['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' already_AddRefed','line_number':10,'multiline':False]['text':' MOZ_ASSERT','line_number':11,'multiline':False]['text':' mozilla::Atomic','line_number':12,'multiline':False]['text':' MOZ_RAII','line_number':13,'multiline':False]['text':' mozilla::HashMap','line_number':14,'multiline':False]['text':' mozilla::Maybe','line_number':15,'multiline':False]['text':' mozilla::MallocSizeOf','line_number':16,'multiline':False]['text':' RefPtr','line_number':17,'multiline':False]['text':' EnvironmentCoordinate','line_number':22,'multiline':False]['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':23,'multiline':False]['text':' ScriptIndex','line_number':24,'multiline':False]['text':' TaggedParserAtomIndexHasher','line_number':27,'multiline':False]['text':' AtomicRefCounted','line_number':32,'multiline':False]['text':' js::UniquePtr','line_number':35,'multiline':False]['text':' GlobalObject','line_number':38,'multiline':False]['text':' JSFunction','line_number':40,'multiline':False]['text':' SourceExtent','line_number':41,'multiline':False]['text':' ScopeKind','line_number':43,'multiline':False]['text':' SharedImmutableScriptData','line_number':44,'multiline':False]['text':' ScopeContext holds information derived from the scope and environment chains','line_number':57,'multiline':False]['text':' to try to avoid the parser needing to traverse VM structures directly.','line_number':58,'multiline':False]['text':' Class field initializer info if we are nested within a class constructor.','line_number':60,'multiline':False]['text':' We may be an combination of arrow and eval context within the constructor.','line_number':61,'multiline':False]['text':' Cache of enclosing lexical bindings.','line_number':76,'multiline':False]['text':' Used only for eval.','line_number':77,'multiline':False]['text':' A map of private names to NameLocations used to allow evals to','line_number':80,'multiline':False]['text':' provide correct private name semantics (particularly around early','line_number':81,'multiline':False]['text':' errors and private brand lookup).','line_number':82,'multiline':False]['text':' Cache of enclosing class's private fields.','line_number':87,'multiline':False]['text':' Used only for eval.','line_number':88,'multiline':False]['text':' How many hops required to navigate from 'enclosingScope' to effective','line_number':96,'multiline':False]['text':' scope.','line_number':97,'multiline':False]['text':' Eval and arrow scripts also inherit the "this" environment -- used by','line_number':102,'multiline':False]['text':' `super` expressions -- from their enclosing script. We count the number of','line_number':103,'multiline':False]['text':' environment hops needed to get from enclosing scope to the nearest','line_number':104,'multiline':False]['text':' appropriate environment. This value is undefined if the script we are','line_number':105,'multiline':False]['text':' compiling is not an eval or arrow-function.','line_number':106,'multiline':False]['text':' The kind of enclosing scope.','line_number':109,'multiline':False]['text':' The type of binding required for `this` of the top level context, as','line_number':112,'multiline':False]['text':' indicated by the enclosing scopes of this parse.','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':' NOTE: This is computed based on the effective scope (defined above).','line_number':115,'multiline':False]['text':' Eval and arrow scripts inherit certain syntax allowances from their','line_number':118,'multiline':False]['text':' enclosing scripts.','line_number':119,'multiline':False]['text':' Indicates there is a 'class' or 'with' scope on enclosing scope chain.','line_number':125,'multiline':False]['text':' True if the enclosing scope is for FunctionScope of arrow function.','line_number':129,'multiline':False]['text':' True if the enclosing scope has environment.','line_number':132,'multiline':False]['text':' True if the enclosing scope has non-syntactic scope on chain.','line_number':136,'multiline':False]['text':' True if the enclosing scope has function scope where the function needs','line_number':139,'multiline':False]['text':' home object.','line_number':140,'multiline':False]['text':' Atoms lowered into or converted from CompilationStencil.parserAtomData.','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':' This field is here instead of in CompilationGCOutput because atoms lowered','line_number':188,'multiline':False]['text':' from JSAtom is part of input (enclosing scope bindings, lazy function name,','line_number':189,'multiline':False]['text':' etc), and having 2 vectors in both input/output is error prone.','line_number':190,'multiline':False]['text':' Input of the compilation, including source and enclosing context.','line_number':212,'multiline':False]['text':'  * If the target is Global, null.','line_number':235,'multiline':False]['text':'  * If the target is SelfHosting, an empty global scope.','line_number':236,'multiline':False]['text':'    This scope is also used for EmptyGlobalScopeType in','line_number':237,'multiline':False]['text':'    CompilationStencil.gcThings.','line_number':238,'multiline':False]['text':'    See the comment in initForSelfHostingGlobal.','line_number':239,'multiline':False]['text':'  * If the target is StandaloneFunction, an empty global scope.','line_number':240,'multiline':False]['text':'  * If the target is StandaloneFunctionInNonSyntacticScope, the non-null','line_number':241,'multiline':False]['text':'    enclosing scope of the function','line_number':242,'multiline':False]['text':'  * If the target is Eval, the non-null enclosing scope of the `eval`.','line_number':243,'multiline':False]['text':'  * If the target is Module, null that means empty global scope','line_number':244,'multiline':False]['text':'    (See EmitterScope::checkEnvironmentChainLength)','line_number':245,'multiline':False]['text':'  * If the target is Delazification, the non-null enclosing scope of','line_number':246,'multiline':False]['text':'    the function','line_number':247,'multiline':False]['text':' This enclosing scope is also recorded as EmptyGlobalScopeType in','line_number':268,'multiline':False]['text':' CompilationStencil.gcThings even though corresponding ScopeStencil','line_number':269,'multiline':False]['text':' isn't generated.','line_number':270,'multiline':False]['text':'','line_number':271,'multiline':False]['text':' Store the enclosing scope here in order to access it from','line_number':272,'multiline':False]['text':' inner scopes' ScopeStencil::enclosing.','line_number':273,'multiline':False]['text':' The `enclosingScope` is the emptyGlobalScope.','line_number':304,'multiline':False]['text':' We can only compile functions whose parents have previously been','line_number':311,'multiline':False]['text':' compiled, because compilation requires full information about the','line_number':312,'multiline':False]['text':' function's immediately enclosing scope.','line_number':313,'multiline':False]['text':' Returns true if enclosingScope field is provided to init* function,','line_number':321,'multiline':False]['text':' instead of setting to empty global internally.','line_number':322,'multiline':False]['text':' Returns the enclosing scope provided to init* function.','line_number':329,'multiline':False]['text':' nullptr otherwise.','line_number':330,'multiline':False]['text':' FullParseHandler needs a BaseScript to find the closed-over-binding index,','line_number':338,'multiline':False]['text':' as well as to walk over the inner functions references with','line_number':339,'multiline':False]['text':' skipLazyInnerFunctions.','line_number':340,'multiline':False]['text':' When compiling a lazy function, this is needed to initialize the','line_number':346,'multiline':False]['text':' FunctionBox as well as the CompilationState.','line_number':347,'multiline':False]['text':' When compiling an inner function, we want to know the unique identifier','line_number':350,'multiline':False]['text':' which identify a function. This is computed from the source extend.','line_number':351,'multiline':False]['text':' See `BaseScript::immutableFlags_`.','line_number':354,'multiline':False]['text':' This is equivalent to: ngcthings != 0 || useMemberInitializers()','line_number':362,'multiline':False]['text':' See BaseScript::CreateRawLazy.','line_number':363,'multiline':False]['text':' Whether this CompilationInput is parsing the top-level of a script, or','line_number':367,'multiline':False]['text':' false if we are parsing an inner function.','line_number':368,'multiline':False]['text':' Size of dynamic data. Note that GC data is counted by GC and not here. We','line_number':373,'multiline':False]['text':' also ignore ScriptSource which is a shared RefPtr.','line_number':374,'multiline':False]['text':' AsmJS scripts are very rare on-average, so we use a HashMap to associate','line_number':383,'multiline':False]['text':' data with a ScriptStencil. The ScriptStencil has a flag to indicate if we','line_number':384,'multiline':False]['text':' need to even do this lookup.','line_number':385,'multiline':False]['text':' Store shared data for non-lazy script.','line_number':404,'multiline':False]['text':' NOTE: While stored, we must hold a ref-count and care must be taken when','line_number':406,'multiline':False]['text':'       updating or clearing the pointer.','line_number':407,'multiline':False]['text':' Defaults to SingleSharedData.','line_number':432,'multiline':False]['text':' Returns index-th script's shared data, or nullptr if it doesn't have.','line_number':498,'multiline':False]['text':' Add data for index-th script and share it with VM.','line_number':501,'multiline':False]['text':' Add data for index-th script without sharing it with VM.','line_number':505,'multiline':False]['text':' The data should already be shared with VM.','line_number':506,'multiline':False]['text':'','line_number':507,'multiline':False]['text':' The data is supposed to be added from delazification.','line_number':508,'multiline':False]['text':' Dynamic memory associated with this container. Does not include the','line_number':512,'multiline':False]['text':' SharedImmutableScriptData since we are not the unique owner of it.','line_number':513,'multiline':False]['text':' The top level struct of stencil specialized for non-extensible case.','line_number':534,'multiline':False]['text':' Used as the compilation output, and also XDR decode output.','line_number':535,'multiline':False]['text':'','line_number':536,'multiline':False]['text':' In XDR decode output case, the span and not-owning pointer fields point','line_number':537,'multiline':False]['text':' the internal LifoAlloc and the external XDR buffer.','line_number':538,'multiline':False]['text':'','line_number':539,'multiline':False]['text':' In BorrowingCompilationStencil usage, span and not-owning pointer fields','line_number':540,'multiline':False]['text':' point the ExtensibleCompilationStencil and its LifoAlloc.','line_number':541,'multiline':False]['text':'','line_number':542,'multiline':False]['text':' The dependent XDR buffer or ExtensibleCompilationStencil must be kept','line_number':543,'multiline':False]['text':' alive manually.','line_number':544,'multiline':False]['text':' The lifetime of this CompilationStencil may be managed by stack allocation,','line_number':550,'multiline':False]['text':' UniquePtr<T>, or RefPtr<T>. If a RefPtr is used, this ref-count will track','line_number':551,'multiline':False]['text':' the lifetime, otherwise it is ignored.','line_number':552,'multiline':False]['text':'','line_number':553,'multiline':False]['text':' NOTE: Internal code and public APIs use a mix of these different allocation','line_number':554,'multiline':False]['text':'       modes.','line_number':555,'multiline':False]['text':'','line_number':556,'multiline':False]['text':' See: JS::StencilAddRef/Release','line_number':557,'multiline':False]['text':' Set to true if any pointer/span contains external data instead of','line_number':560,'multiline':False]['text':' LifoAlloc or owned memory.','line_number':561,'multiline':False]['text':' Value of CanLazilyParse(CompilationInput) on compilation.','line_number':564,'multiline':False]['text':' Used during instantiation.','line_number':565,'multiline':False]['text':' FunctionKey is an encoded position of a function within the source text','line_number':568,'multiline':False]['text':' that is reproducible.','line_number':569,'multiline':False]['text':' If this stencil is a delazification, this identifies location of the','line_number':573,'multiline':False]['text':' function in the source text.','line_number':574,'multiline':False]['text':' This holds allocations that do not require destructors to be run but are','line_number':577,'multiline':False]['text':' live until the stencil is released.','line_number':578,'multiline':False]['text':' The source text holder for the script. This may be an empty placeholder if','line_number':581,'multiline':False]['text':' the code will fully parsed and options indicate the source will never be','line_number':582,'multiline':False]['text':' needed again.','line_number':583,'multiline':False]['text':' Stencil for all function and non-function scripts. The TopLevelIndex is','line_number':586,'multiline':False]['text':' reserved for the top-level script. This top-level may or may not be a','line_number':587,'multiline':False]['text':' function.','line_number':588,'multiline':False]['text':' Immutable data computed during initial compilation and never updated during','line_number':591,'multiline':False]['text':' delazification.','line_number':592,'multiline':False]['text':' scopeData and scopeNames have the same size, and i-th scopeNames contains','line_number':597,'multiline':False]['text':' the names for the bindings contained in the slot defined by i-th scopeData.','line_number':598,'multiline':False]['text':' Hold onto the RegExpStencil, BigIntStencil, and ObjLiteralStencil that are','line_number':602,'multiline':False]['text':' allocated during parse to ensure correct destruction.','line_number':603,'multiline':False]['text':' List of parser atoms for this compilation. This may contain nullptr entries','line_number':608,'multiline':False]['text':' when round-tripping with XDR if the atom was generated in original parse','line_number':609,'multiline':False]['text':' but not used by stencil.','line_number':610,'multiline':False]['text':' Variable sized container for bytecode and other immutable data. A valid','line_number':613,'multiline':False]['text':' stencil always contains at least an entry for `TopLevelIndex` script.','line_number':614,'multiline':False]['text':' Module metadata if this is a module compile.','line_number':617,'multiline':False]['text':' AsmJS modules generated by parsing. These scripts are never lazy and','line_number':620,'multiline':False]['text':' therefore only generated during initial parse.','line_number':621,'multiline':False]['text':' End of fields.','line_number':624,'multiline':False]['text':' Construct a CompilationStencil','line_number':626,'multiline':False]['text':' In eval("x=>1"), the arrow function will have a sourceStart of 0 which','line_number':631,'multiline':False]['text':' conflicts with the NullFunctionKey, so shift all keys by 1 instead.','line_number':632,'multiline':False]['text':' To avoid any misuses, make sure this is neither copyable or assignable.','line_number':659,'multiline':False]['text':' Steal ExtensibleCompilationStencil content.','line_number':677,'multiline':False]['text':' The top level struct of stencil specialized for extensible case.','line_number':693,'multiline':False]['text':' Used as the temporary storage during compilation, an the compilation output.','line_number':694,'multiline':False]['text':'','line_number':695,'multiline':False]['text':' All not-owning pointer fields point the internal LifoAlloc.','line_number':696,'multiline':False]['text':'','line_number':697,'multiline':False]['text':' See CompilationStencil for each field's description.','line_number':698,'multiline':False]['text':' Data pointed by other fields are allocated in this LifoAlloc,','line_number':706,'multiline':False]['text':' and moved to `CompilationStencil.alloc`.','line_number':707,'multiline':False]['text':' NOTE: We reserve a modest amount of inline storage in order to reduce','line_number':712,'multiline':False]['text':'       allocations in the most common delazification cases. These common','line_number':713,'multiline':False]['text':'       cases have one script and scope, as well as a handful of gcthings.','line_number':714,'multiline':False]['text':'       For complex pages this covers about 75% of delazifications.','line_number':715,'multiline':False]['text':' Table of parser atoms for this compilation.','line_number':729,'multiline':False]['text':' Steal CompilationStencil content.','line_number':795,'multiline':False]['text':' The internal state of the compilation.','line_number':808,'multiline':False]['text':' The number of functions that *will* have bytecode.','line_number':819,'multiline':False]['text':' This doesn't count top-level non-function script.','line_number':820,'multiline':False]['text':'','line_number':821,'multiline':False]['text':' This should be counted while parsing, and should be passed to','line_number':822,'multiline':False]['text':' SharedDataContainer.prepareStorageFor *before* start emitting bytecode.','line_number':823,'multiline':False]['text':' End of fields.','line_number':826,'multiline':False]['text':' Track the state of key allocations and roll them back as parts of parsing','line_number':836,'multiline':False]['text':' get retried. This ensures iteration during stencil instantiation does not','line_number':837,'multiline':False]['text':' encounter discarded frontend state.','line_number':838,'multiline':False]['text':' Temporarily share this token struct with CompilationState.','line_number':840,'multiline':False]['text':' When parsing arrow function, parameter is parsed twice, and if there are','line_number':851,'multiline':False]['text':' functions inside parameter expression, stencils will be created for them.','line_number':852,'multiline':False]['text':'','line_number':853,'multiline':False]['text':' Those functions exist only for lazy parsing.','line_number':854,'multiline':False]['text':' Mark them "ghost", so that they don't affect other parts.','line_number':855,'multiline':False]['text':'','line_number':856,'multiline':False]['text':' See GHOST_FUNCTION in FunctionFlags.h for more details.','line_number':857,'multiline':False]['text':' Allocate space for `length` gcthings, and return the address of the','line_number':860,'multiline':False]['text':' first element to `cursor` to initialize on the caller.','line_number':861,'multiline':False]['text':' A temporary CompilationStencil instance that borrows','line_number':872,'multiline':False]['text':' ExtensibleCompilationStencil data.','line_number':873,'multiline':False]['text':' Ensure that this instance does not outlive the ExtensibleCompilationStencil.','line_number':874,'multiline':False]['text':' Size of dynamic data. Ignores Spans (unless their contents are in the','line_number':881,'multiline':False]['text':' LifoAlloc) and RefPtrs since we are not the unique owner.','line_number':882,'multiline':False]['text':' The output of GC allocation from stencil.','line_number':914,'multiline':False]['text':' The resulting outermost script for the compilation powered','line_number':916,'multiline':False]['text':' by this CompilationStencil.','line_number':917,'multiline':False]['text':' The resulting module object if there is one.','line_number':920,'multiline':False]['text':' A Rooted vector to handle tracing of JSFunction* and Atoms within.','line_number':923,'multiline':False]['text':'','line_number':924,'multiline':False]['text':' If the top level script isn't a function, the item at TopLevelIndex is','line_number':925,'multiline':False]['text':' nullptr.','line_number':926,'multiline':False]['text':' References to scopes are controlled via AbstractScopePtr, which holds onto','line_number':929,'multiline':False]['text':' an index (and CompilationStencil reference).','line_number':930,'multiline':False]['text':' The result ScriptSourceObject. This is unused in delazifying parses.','line_number':933,'multiline':False]['text':' Reserve output vector capacity. This may be called before instantiate to do','line_number':938,'multiline':False]['text':' allocations ahead of time (off thread). The stencil instantiation code will','line_number':939,'multiline':False]['text':' also run this to ensure the vectors are ready.','line_number':940,'multiline':False]['text':' Size of dynamic data. Note that GC data is counted by GC and not here.','line_number':954,'multiline':False]['text':' Iterator over functions that make up a CompilationStencil. This abstracts','line_number':963,'multiline':False]['text':' over the parallel arrays in stencil and gc-output that use the same index','line_number':964,'multiline':False]['text':' system.','line_number':965,'multiline':False]['text':' Merge CompilationStencil for delazification into initial','line_number':1068,'multiline':False]['text':' ExtensibleCompilationStencil.','line_number':1069,'multiline':False]['text':' The stencil for the initial compilation.','line_number':1074,'multiline':False]['text':' Delazifications are merged into this.','line_number':1075,'multiline':False]['text':'','line_number':1076,'multiline':False]['text':' If any failure happens during merge operation, this field is reset to','line_number':1077,'multiline':False]['text':' nullptr.','line_number':1078,'multiline':False]['text':' A Map from function key to the ScriptIndex in the initial stencil.','line_number':1081,'multiline':False]['text':' A map from delazification's ParserAtomIndex to','line_number':1092,'multiline':False]['text':' initial's TaggedParserAtomIndex','line_number':1093,'multiline':False]['text':' Set the initial stencil and prepare for merging.','line_number':1103,'multiline':False]['text':' Merge the delazification stencil into the initial stencil.','line_number':1107,'multiline':False]['text':' namespace frontend','line_number':1114,'multiline':False]['text':' namespace js','line_number':1115,'multiline':False]['text':' frontend_CompilationStencil_h','line_number':1117,'multiline':False]