['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::BigInt','line_number':15,'multiline':False]['text':' Import VIXL operands directly into the jit namespace for shared code.','line_number':30,'multiline':False]['text':' Perform a downcast. Should be removed by Bug 996602.','line_number':53,'multiline':False]['text':' Restrict to only VIXL-internal functions.','line_number':58,'multiline':False]['text':' Push registers.','line_number':178,'multiline':False]['text':' Pop registers.','line_number':202,'multiline':False]['text':' FIXME: This is the same on every arch.','line_number':233,'multiline':False]['text':' FIXME: If we can share framePushed_, we can share this.','line_number':234,'multiline':False]['text':' FIXME: Or just make it at the highest level.','line_number':235,'multiline':False]['text':' Update sp with the value of the current active stack pointer, if necessary.','line_number':253,'multiline':False]['text':' In debug builds only, cause a trap if PSP is active and PSP != SP','line_number':264,'multiline':False]['text':' The add and sub instructions below will only take a 12-bit immediate.','line_number':267,'multiline':False]['text':' Add a marker, so we can figure out who requested the check when','line_number':271,'multiline':False]['text':' inspecting the generated code.  Note, a more concise way to encode','line_number':272,'multiline':False]['text':' the marker would be to use it as an immediate for the `brk`','line_number':273,'multiline':False]['text':' instruction as generated by `Unreachable()`, and removing the add/sub.','line_number':274,'multiline':False]['text':' In debug builds only, add a marker that doesn't change the machine's','line_number':284,'multiline':False]['text':' state.  Note these markers are x16-based, as opposed to the x28-based','line_number':285,'multiline':False]['text':' ones made by `assertStackPtrsSynced`.','line_number':286,'multiline':False]['text':' Only 12 bits of immediate are allowed.','line_number':289,'multiline':False]['text':' This could be cleverer, but the first attempt had bugs.','line_number':337,'multiline':False]['text':' SP may be < PSP now (that's OK).','line_number':346,'multiline':False]['text':' eg testcase: tests/backup-point-bug1315634.js','line_number':347,'multiline':False]['text':' Uses FPCR rounding mode.','line_number':501,'multiline':False]['text':' Uses FPCR rounding mode.','line_number':521,'multiline':False]['text':' Uses FPCR rounding mode.','line_number':533,'multiline':False]['text':' Uses FPCR rounding mode.','line_number':545,'multiline':False]['text':' ARMv8.3 chips support the FJCVTZS instruction, which handles','line_number':569,'multiline':False]['text':' exactly this logic.','line_number':570,'multiline':False]['text':' Convert double to integer, rounding toward zero.','line_number':572,'multiline':False]['text':' The Z-flag is set iff the conversion is exact. -0 unsets the Z-flag.','line_number':573,'multiline':False]['text':' If conversion was exact, go to end.','line_number':580,'multiline':False]['text':' The conversion was inexact, but the caller intends to allow -0.','line_number':582,'multiline':False]['text':' Compare fsrc64 to 0.','line_number':587,'multiline':False]['text':' If fsrc64 == 0 and FJCVTZS conversion was inexact, then fsrc64 is -0.','line_number':588,'multiline':False]['text':' Pass through -0; fail otherwise.','line_number':591,'multiline':False]['text':' Older processors use a significantly slower path.','line_number':596,'multiline':False]['text':' Convert, rounding toward zero.','line_number':603,'multiline':False]['text':' Convert back, using FPCR rounding mode.','line_number':604,'multiline':False]['text':' Convert, rounding toward zero.','line_number':628,'multiline':False]['text':' Convert back, using FPCR rounding mode.','line_number':629,'multiline':False]['text':' Note: we can't use the FJCVTZS instruction here because that only works','line_number':652,'multiline':False]['text':' for 32-bit values.','line_number':653,'multiline':False]['text':' Convert, rounding toward zero.','line_number':655,'multiline':False]['text':' Convert back, using FPCR rounding mode.','line_number':656,'multiline':False]['text':' Label handleNeg;','line_number':671,'multiline':False]['text':' B(Assembler::Signed, &handleNeg);','line_number':678,'multiline':False]['text':' NaN is always a bail condition, just bail directly.','line_number':679,'multiline':False]['text':' Move the top word of the double into the output reg, if it is non-zero,','line_number':688,'multiline':False]['text':' then the original value was -0.0.','line_number':689,'multiline':False]['text':' Label handleNeg;','line_number':697,'multiline':False]['text':' B(Assembler::Signed, &handleNeg);','line_number':704,'multiline':False]['text':' NaN is always a bail condition, just bail directly.','line_number':705,'multiline':False]['text':' Move the top word of the double into the output reg, if it is non-zero,','line_number':714,'multiline':False]['text':' then the original value was -0.0.','line_number':715,'multiline':False]['text':' NaN is always a bail condition, just bail directly.','line_number':752,'multiline':False]['text':' Move the top word of the double into the output reg, if it is non-zero,','line_number':762,'multiline':False]['text':' then the original value was -0.0.','line_number':763,'multiline':False]['text':' It is unclear why this sync is necessary:','line_number':772,'multiline':False]['text':' * PSP and SP have been observed to be different in testcase','line_number':773,'multiline':False]['text':'   tests/asm.js/testBug1046688.js.','line_number':774,'multiline':False]['text':' * Removing the sync causes no failures in all of jit-tests.','line_number':775,'multiline':False]['text':'','line_number':776,'multiline':False]['text':' Also see branch(JitCode*) below. This version of jump() is called only','line_number':777,'multiline':False]['text':' from jump(TrampolinePtr) which is called on various very slow paths,','line_number':778,'multiline':False]['text':' probably only in JS.','line_number':779,'multiline':False]['text':' The jump target will be patched by executableCopy().','line_number':783,'multiline':False]['text':' ip0','line_number':790,'multiline':False]['text':' Move a pointer using a literal pool, so that the pointer','line_number':835,'multiline':False]['text':' may be easily patched or traced.','line_number':836,'multiline':False]['text':' Returns the BufferOffset of the load instruction emitted.','line_number':837,'multiline':False]['text':' Disallow ScratchReg2.','line_number':1008,'multiline':False]['text':' StackPointer manipulation.','line_number':1040,'multiline':False]['text':' StackPointer testing functions.','line_number':1058,'multiline':False]['text':' Extracts the tag of a value and places it in tag','line_number':1265,'multiline':False]['text':' ip0','line_number':1378,'multiline':False]['text':' ip0 <- [sp]; sp += n; ret ip0','line_number':1380,'multiline':False]['text':' SP is always used to transmit the stack between calls.','line_number':1383,'multiline':False]['text':' It is unclear why this sync is necessary:','line_number':1391,'multiline':False]['text':' * PSP and SP have been observed to be different in testcase','line_number':1392,'multiline':False]['text':'   tests/async/debugger-reject-after-fulfill.js','line_number':1393,'multiline':False]['text':' * Removing the sync causes no failures in all of jit-tests.','line_number':1394,'multiline':False]['text':'','line_number':1395,'multiline':False]['text':' Also see jump() above.  This is used only to implement jump(JitCode*)','line_number':1396,'multiline':False]['text':' and only for JS, it appears.','line_number':1397,'multiline':False]['text':' The jump target will be patched by executableCopy().','line_number':1401,'multiline':False]['text':' Note that the |dest| register here may be ScratchReg, so we shouldn't use','line_number':1443,'multiline':False]['text':' it.','line_number':1444,'multiline':False]['text':' See comment in MacroAssembler-x64.h.','line_number':1527,'multiline':False]['text':' These two functions use the low 32-bits of the full value register.','line_number':1559,'multiline':False]['text':' As opposed to other architecture, splitTag is replaced by splitSignExtTag','line_number':1582,'multiline':False]['text':' which extract the tag with a sign extension. The reason being that cmp32','line_number':1583,'multiline':False]['text':' with a tag value would be too large to fit as a 12 bits immediate value,','line_number':1584,'multiline':False]['text':' and would require the VIXL macro assembler to add an extra instruction','line_number':1585,'multiline':False]['text':' and require extra scratch register to load the Tag value.','line_number':1586,'multiline':False]['text':'','line_number':1587,'multiline':False]['text':' Instead, we compare with the negative value of the sign extended tag with','line_number':1588,'multiline':False]['text':' the CMN instruction. The sign extended tag is expected to be a negative','line_number':1589,'multiline':False]['text':' value. Therefore the negative of the sign extended tag is expected to be','line_number':1590,'multiline':False]['text':' near 0 and fit on 12 bits.','line_number':1591,'multiline':False]['text':'','line_number':1592,'multiline':False]['text':' Ignoring the sign extension, the logic is the following:','line_number':1593,'multiline':False]['text':'','line_number':1594,'multiline':False]['text':'   CMP32(Reg, Tag) = Reg - Tag','line_number':1595,'multiline':False]['text':'                   = Reg + (-Tag)','line_number':1596,'multiline':False]['text':'                   = CMN32(Reg, -Tag)','line_number':1597,'multiline':False]['text':'','line_number':1598,'multiline':False]['text':' Note: testGCThing, testPrimitive and testNumber which are checking for','line_number':1599,'multiline':False]['text':' inequalities should use unsigned comparisons (as done by default) in','line_number':1600,'multiline':False]['text':' order to keep the same relation order after the sign extension, i.e.','line_number':1601,'multiline':False]['text':' using Above or Below which are based on the carry flag.','line_number':1602,'multiline':False]['text':' Check thest negTag is encoded on a 12 bits immediate value.','line_number':1608,'multiline':False]['text':' Register-based tests.','line_number':1613,'multiline':False]['text':' Requires unsigned comparison due to cmpTag internals.','line_number':1657,'multiline':False]['text':' Requires unsigned comparison due to cmpTag internals.','line_number':1663,'multiline':False]['text':' Requires unsigned comparison due to cmpTag internals.','line_number':1669,'multiline':False]['text':' Requires unsigned comparison due to cmpTag internals.','line_number':1680,'multiline':False]['text':' ValueOperand-based tests.','line_number':1687,'multiline':False]['text':' The incoming ValueOperand may use scratch registers.','line_number':1689,'multiline':False]['text':' Address-based tests.','line_number':1785,'multiline':False]['text':' BaseIndex-based tests.','line_number':1871,'multiline':False]['text':' is double, move the bits as is','line_number':2001,'multiline':False]['text':' is int32, do a conversion while moving','line_number':2005,'multiline':False]['text':' Emit a B that can be toggled to a CMP. See ToggleToJmp(), ToggleToCmp().','line_number':2038,'multiline':False]['text':' load: offset to the load instruction obtained by movePatchablePtr().','line_number':2045,'multiline':False]['text':' Raw GC pointer relocations and Value relocations both end up in','line_number':2047,'multiline':False]['text':' Assembler::TraceDataRelocations.','line_number':2048,'multiline':False]['text':' Raw GC pointer relocations and Value relocations both end up in','line_number':2057,'multiline':False]['text':' Assembler::TraceDataRelocations.','line_number':2058,'multiline':False]['text':' The complete address is in `address`, and `access` is used for its type','line_number':2104,'multiline':False]['text':' attributes only; its `offset` is ignored.','line_number':2105,'multiline':False]['text':' Emit a BLR or NOP instruction. ToggleCall can be used to patch','line_number':2113,'multiline':False]['text':' this instruction.','line_number':2114,'multiline':False]['text':' The returned offset must be to the first instruction generated,','line_number':2116,'multiline':False]['text':' for the debugger to match offset with Baseline's pcMappingEntries_.','line_number':2117,'multiline':False]['text':' It is unclear why this sync is necessary:','line_number':2120,'multiline':False]['text':' * PSP and SP have been observed to be different in testcase','line_number':2121,'multiline':False]['text':'   tests/cacheir/bug1448136.js','line_number':2122,'multiline':False]['text':' * Removing the sync causes no failures in all of jit-tests.','line_number':2123,'multiline':False]['text':' The register used for the load is hardcoded, so that ToggleCall','line_number':2130,'multiline':False]['text':' can patch in the branch instruction easily. This could be changed,','line_number':2131,'multiline':False]['text':' but then ToggleCall must read the target register from the load.','line_number':2132,'multiline':False]['text':' The call site is a sequence of two or three instructions:','line_number':2151,'multiline':False]['text':'','line_number':2152,'multiline':False]['text':'   syncStack (optional)','line_number':2153,'multiline':False]['text':'   ldr/adr','line_number':2154,'multiline':False]['text':'   nop/blr','line_number':2155,'multiline':False]['text':'','line_number':2156,'multiline':False]['text':' Flushed constant pools can appear before any of the instructions.','line_number':2157,'multiline':False]['text':' LDR/ADR','line_number':2163,'multiline':False]['text':' NOP/BLR','line_number':2165,'multiline':False]['text':' Clear the scratch register for sanity.','line_number':2180,'multiline':False]['text':' If another register is being used to track pushes, check sp explicitly.','line_number':2188,'multiline':False]['text':' SP is always used to transmit the stack between calls.','line_number':2196,'multiline':False]['text':' Emits a simulator directive to save the current sp on an internal stack.','line_number':2218,'multiline':False]['text':' Emits a simulator directive to pop from its internal stack','line_number':2225,'multiline':False]['text':' and assert that the value is equal to the current sp.','line_number':2226,'multiline':False]['text':' Overwrites the payload bits of a dest register containing a Value.','line_number':2242,'multiline':False]['text':' Bfxil cannot be used with the zero register as a source.','line_number':2244,'multiline':False]['text':' See documentation for ScratchTagScope and ScratchTagScopeRelease in','line_number':2257,'multiline':False]['text':' MacroAssembler-x64.h.','line_number':2258,'multiline':False]['text':' namespace jit','line_number':2309,'multiline':False]['text':' namespace js','line_number':2310,'multiline':False]['text':' jit_arm64_MacroAssembler_arm64_h','line_number':2312,'multiline':False]