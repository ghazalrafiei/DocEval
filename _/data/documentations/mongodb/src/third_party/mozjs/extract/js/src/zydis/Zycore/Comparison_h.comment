['text':'**************************************************************************************************

  Zyan Core Library (Zycore-C)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':'*
 * @file
 * @brief   Defines prototypes of general-purpose comparison functions.
 ','line_number':27,'multiline':True]['text':' ============================================================================================== ','line_number':42,'multiline':True]['text':' Enums and types                                                                                ','line_number':43,'multiline':True]['text':' ============================================================================================== ','line_number':44,'multiline':True]['text':'*
 * @brief   Defines the `ZyanEqualityComparison` function prototype.
 *
 * @param   left    A pointer to the first element.
 * @param   right   A pointer to the second element.
 *
 * @return  This function should return `ZYAN_TRUE` if the `left` element equals the `right` one
 *          or `ZYAN_FALSE`, if not.
 ','line_number':46,'multiline':True]['text':'*
 * @brief   Defines the `ZyanComparison` function prototype.
 *
 * @param   left    A pointer to the first element.
 * @param   right   A pointer to the second element.
 *
 * @return  This function should return values in the following range:
 *          `left == right -> result == 0`
 *          `left <  right -> result  < 0`
 *          `left >  right -> result  > 0`
 ','line_number':57,'multiline':True]['text':' ============================================================================================== ','line_number':70,'multiline':True]['text':' Macros                                                                                         ','line_number':71,'multiline':True]['text':' ============================================================================================== ','line_number':72,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':74,'multiline':True]['text':' Equality comparison functions                                                                  ','line_number':75,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':76,'multiline':True]['text':'*
 * @brief   Declares a generic equality comparison function for an integral datatype.
 *
 * @param   name    The name of the function.
 * @param   type    The name of the integral datatype.
 ','line_number':78,'multiline':True]['text':'*
 * @brief   Declares a generic equality comparison function that compares a single integral
 *          datatype field of a struct.
 *
 * @param   name        The name of the function.
 * @param   type        The name of the integral datatype.
 * @param   field_name  The name of the struct field.
 ','line_number':93,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':110,'multiline':True]['text':' Comparison functions                                                                           ','line_number':111,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':112,'multiline':True]['text':'*
 * @brief   Declares a generic comparison function for an integral datatype.
 *
 * @param   name    The name of the function.
 * @param   type    The name of the integral datatype.
 ','line_number':114,'multiline':True]['text':'*
 * @brief   Declares a generic comparison function that compares a single integral datatype field
 *          of a struct.
 *
 * @param   name        The name of the function.
 * @param   type        The name of the integral datatype.
 * @param   field_name  The name of the struct field.
 ','line_number':137,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':162,'multiline':True]['text':' ============================================================================================== ','line_number':164,'multiline':True]['text':' Exported functions                                                                             ','line_number':165,'multiline':True]['text':' ============================================================================================== ','line_number':166,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':168,'multiline':True]['text':' Default equality comparison functions                                                          ','line_number':169,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':170,'multiline':True]['text':'*
 * @brief   Defines a default equality comparison function for pointer values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `ZYAN_TRUE` if the `left` value equals the `right` one or `ZYAN_FALSE`, if
 *          not.
 ','line_number':172,'multiline':True]['text':'*
 * @brief   Defines a default equality comparison function for `ZyanBool` values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `ZYAN_TRUE` if the `left` value equals the `right` one or `ZYAN_FALSE`, if
 *          not.
 ','line_number':183,'multiline':True]['text':'*
 * @brief   Defines a default equality comparison function for 8-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `ZYAN_TRUE` if the `left` value equals the `right` one or `ZYAN_FALSE`, if
 *          not.
 ','line_number':194,'multiline':True]['text':'*
 * @brief   Defines a default equality comparison function for 16-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `ZYAN_TRUE` if the `left` value equals the `right` one or `ZYAN_FALSE`, if
 *          not.
 ','line_number':205,'multiline':True]['text':'*
 * @brief   Defines a default equality comparison function for 32-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `ZYAN_TRUE` if the `left` value equals the `right` one or `ZYAN_FALSE`, if
 *          not.
 ','line_number':216,'multiline':True]['text':'*
 * @brief   Defines a default equality comparison function for 64-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `ZYAN_TRUE` if the `left` value equals the `right` one or `ZYAN_FALSE`, if
 *          not.
 ','line_number':227,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':238,'multiline':True]['text':' Default comparison functions                                                                   ','line_number':239,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':240,'multiline':True]['text':'*
 * @brief   Defines a default comparison function for pointer values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `0` if the `left` value equals the `right` one, `-1` if the `left` value is
 *          less than the `right` one, or `1` if the `left` value is greater than the `right` one.
 ','line_number':242,'multiline':True]['text':'*
 * @brief   Defines a default comparison function for `ZyanBool` values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `0` if the `left` value equals the `right` one, `-1` if the `left` value is
 *          less than the `right` one, or `1` if the `left` value is greater than the `right` one.
 ','line_number':253,'multiline':True]['text':'*
 * @brief   Defines a default comparison function for 8-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `0` if the `left` value equals the `right` one, `-1` if the `left` value is
 *          less than the `right` one, or `1` if the `left` value is greater than the `right` one.
 ','line_number':264,'multiline':True]['text':'*
 * @brief   Defines a default comparison function for 16-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `0` if the `left` value equals the `right` one, `-1` if the `left` value is
 *          less than the `right` one, or `1` if the `left` value is greater than the `right` one.
 ','line_number':275,'multiline':True]['text':'*
 * @brief   Defines a default comparison function for 32-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `0` if the `left` value equals the `right` one, `-1` if the `left` value is
 *          less than the `right` one, or `1` if the `left` value is greater than the `right` one.
 ','line_number':286,'multiline':True]['text':'*
 * @brief   Defines a default comparison function for 64-bit numeric values.
 *
 * @param   left    A pointer to the first value.
 * @param   right   A pointer to the second value.
 *
 * @return  Returns `0` if the `left` value equals the `right` one, `-1` if the `left` value is
 *          less than the `right` one, or `1` if the `left` value is greater than the `right` one.
 ','line_number':297,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':308,'multiline':True]['text':' ============================================================================================== ','line_number':310,'multiline':True]['text':' ZYCORE_COMPARISON_H ','line_number':316,'multiline':True]