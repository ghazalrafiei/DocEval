['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]['text':'
 * Error-reporting APIs.
 *
 * Despite the types and structures defined here existing in js/public,
 * significant parts of their heritage date back to distant SpiderMonkey past,
 * and they are not all universally well-thought-out as ideal,
 * intended-to-be-permanent API.  We may eventually replace this with something
 * more consistent with ECMAScript the language and less consistent with
 * '90s-era JSAPI inventions, but it's doubtful this will happen any time soon.
 ','line_number':6,'multiline':True]['text':' MOZ_ASSERT','line_number':20,'multiline':False]['text':' std::input_iterator_tag, std::iterator','line_number':22,'multiline':False]['text':' size_t','line_number':24,'multiline':False]['text':' int16_t, uint16_t','line_number':25,'multiline':False]['text':' strlen','line_number':26,'multiline':False]['text':' JS_PUBLIC_API','line_number':28,'multiline':False]['text':' JS::ConstUTF8CharsZ','line_number':31,'multiline':False]['text':' JS::HandleObject, JS::RootedObject','line_number':32,'multiline':False]['text':' js::UniquePtr','line_number':33,'multiline':False]['text':' js::Vector','line_number':34,'multiline':False]['text':'*
 * Possible exception types. These types are part of a JSErrorFormatString
 * structure. They define which error to throw in case of a runtime error.
 *
 * JSEXN_WARN is used for warnings, that are not strictly errors but are handled
 * using the generalized error reporting mechanism.  (One side effect of this
 * type is to not prepend 'Error:' to warning messages.)  This value can go away
 * if we ever decide to use an entirely separate mechanism for warnings.
 ','line_number':46,'multiline':True]['text':'* The error message name in ASCII. ','line_number':77,'multiline':True]['text':'* The error format string in ASCII. ','line_number':80,'multiline':True]['text':'* The number of arguments to expand in the formatted error message. ','line_number':83,'multiline':True]['text':'* One of the JSExnType constants above. ','line_number':86,'multiline':True]['text':'*
 * Base class that implements parts shared by JSErrorReport and
 * JSErrorNotes::Note.
 ','line_number':93,'multiline':True]['text':' The (default) error message.','line_number':99,'multiline':False]['text':' If ownsMessage_ is true, the it is freed in destructor.','line_number':100,'multiline':False]['text':' Source file name, URL, etc., or null.','line_number':104,'multiline':False]['text':' Unique identifier for the script source.','line_number':107,'multiline':False]['text':' Source line number.','line_number':110,'multiline':False]['text':' Zero-based column index in line.','line_number':113,'multiline':False]['text':' the error number, e.g. see js/public/friend/ErrorNumbers.msg.','line_number':116,'multiline':False]['text':' Points to JSErrorFormatString::name.','line_number':119,'multiline':False]['text':' This string must never be freed.','line_number':120,'multiline':False]['text':'*
 * Notes associated with JSErrorReport.
 ','line_number':156,'multiline':True]['text':' Stores pointers to each note.','line_number':164,'multiline':False]['text':' Add an note to the given position.','line_number':171,'multiline':False]['text':' Create a deep copy of notes.','line_number':187,'multiline':False]['text':'*
 * Describes a single error or warning that occurs in the execution of script.
 ','line_number':216,'multiline':True]['text':' Offending source line without final '\n'.','line_number':221,'multiline':False]['text':' If ownsLinebuf_ is true, the buffer is freed in destructor.','line_number':222,'multiline':False]['text':' Number of chars in linebuf_. Does not include trailing '\0'.','line_number':225,'multiline':False]['text':' The 0-based offset of error token in linebuf_.','line_number':228,'multiline':False]['text':' Associated notes, or nullptr if there's no note.','line_number':232,'multiline':False]['text':' One of the JSExnType constants.','line_number':235,'multiline':False]['text':' See the comment in TransitiveCompileOptions.','line_number':238,'multiline':False]['text':' This error report is actually a warning.','line_number':241,'multiline':False]['text':'*
   * Generate a JSErrorReport from the provided thrown value.
   *
   * If the value is a (possibly wrapped) Error object, the JSErrorReport will
   * be exactly initialized from the Error object's information, without
   * observable side effects. (The Error object's JSErrorReport is reused, if
   * it has one.)
   *
   * Otherwise various attempts are made to derive JSErrorReport information
   * from |exnStack| and from the current execution state.  This process is
   * *definitely* inconsistent with any standard, and particulars of the
   * behavior implemented here generally shouldn't be relied upon.
   *
   * If the value of |sniffingBehavior| is |WithSideEffects|, some of these
   * attempts *may* invoke user-configurable behavior when the exception is an
   * object: converting it to a string, detecting and getting its properties,
   * accessing its prototype chain, and others are possible.  Users *must*
   * tolerate |ErrorReportBuilder::init| potentially having arbitrary effects.
   * Any exceptions thrown by these operations will be caught and silently
   * ignored, and "default" values will be substituted into the JSErrorReport.
   *
   * But if the value of |sniffingBehavior| is |NoSideEffects|, these attempts
   * *will not* invoke any observable side effects.  The JSErrorReport will
   * simply contain fewer, less precise details.
   *
   * Unlike some functions involved in error handling, this function adheres
   * to the usual JSAPI return value error behavior.
   ','line_number':286,'multiline':True]['text':' More or less an equivalent of JS_ReportErrorNumber/js::ReportErrorNumberVA','line_number':322,'multiline':False]['text':' but fills in an ErrorReport instead of reporting it.  Uses varargs to','line_number':323,'multiline':False]['text':' make it simpler to call js::ExpandErrorArgumentsVA.','line_number':324,'multiline':False]['text':'','line_number':325,'multiline':False]['text':' Returns false if we fail to actually populate the ErrorReport','line_number':326,'multiline':False]['text':' for some reason (probably out of memory).','line_number':327,'multiline':False]['text':' Reports exceptions from add-on scopes to telemetry.','line_number':334,'multiline':False]['text':' We may have a provided JSErrorReport, so need a way to represent that.','line_number':337,'multiline':False]['text':' Or we may need to synthesize a JSErrorReport one of our own.','line_number':340,'multiline':False]['text':' Root our exception value to keep a possibly borrowed |reportp| alive.','line_number':343,'multiline':False]['text':' And for our filename.','line_number':346,'multiline':False]['text':' We may have a result of error.toString().','line_number':349,'multiline':False]['text':' FIXME: We should not call error.toString(), since it could have side','line_number':350,'multiline':False]['text':'        effect (see bug 633623).','line_number':351,'multiline':False]['text':' Writes a full report to a file descriptor. Does nothing for JSErrorReports','line_number':356,'multiline':False]['text':' which are warnings, unless reportWarnings is set.','line_number':357,'multiline':False]['text':' namespace JS','line_number':365,'multiline':False]['text':'
 * There are four encoding variants for the error reporting API:
 *   UTF-8
 *     JSAPI's default encoding for error handling.  Use this when the encoding
 *     of the error message, format string, and arguments is UTF-8.
 *   ASCII
 *     Equivalent to UTF-8, but also asserts that the error message, format
 *     string, and arguments are all ASCII.  Because ASCII is a subset of UTF-8,
 *     any use of this encoding variant *could* be replaced with use of the
 *     UTF-8 variant.  This variant exists solely to double-check the
 *     developer's assumption that all these strings truly are ASCII, given that
 *     UTF-8 and ASCII strings regrettably have the same C++ type.
 *   UC = UTF-16
 *     Use this when arguments are UTF-16.  The format string must be UTF-8.
 *   Latin1 (planned to be removed)
 *     In this variant, all strings are interpreted byte-for-byte as the
 *     corresponding Unicode codepoint.  This encoding may *safely* be used on
 *     any null-terminated string, regardless of its encoding.  (You shouldn't
 *     *actually* be uncertain, but in the real world, a string's encoding -- if
 *     promised at all -- may be more...aspirational...than reality.)  This
 *     encoding variant will eventually be removed -- work to convert your uses
 *     to UTF-8 as you're able.
 ','line_number':367,'multiline':True]['text':'*
 * Report an exception represented by the sprintf-like conversion of format
 * and its arguments.
 ','line_number':395,'multiline':True]['text':'
 * Use an errorNumber to retrieve the format string, args are char*
 ','line_number':409,'multiline':True]['text':'
 * args is null-terminated.  That is, a null char* means there are no
 * more args.  The number of args must match the number expected for
 * errorNumber for the given JSErrorCallback.
 ','line_number':440,'multiline':True]['text':'
 * Use an errorNumber to retrieve the format string, args are char16_t*
 ','line_number':449,'multiline':True]['text':'*
 * Complain when out of memory.
 ','line_number':462,'multiline':True]['text':'*
 * Complain when an allocation size overflows the maximum supported limit.
 ','line_number':471,'multiline':True]['text':' namespace JS ','line_number':483,'multiline':True]['text':' js_ErrorReport_h ','line_number':485,'multiline':True]