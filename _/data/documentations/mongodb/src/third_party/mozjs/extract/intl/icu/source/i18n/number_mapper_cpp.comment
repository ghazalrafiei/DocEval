['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Allow implicit conversion from char16_t* to UnicodeString for this file:','line_number':8,'multiline':False]['text':' Helpful in toString methods and elsewhere.','line_number':9,'multiline':False]['text':'///////////','line_number':47,'multiline':False]['text':' SYMBOLS //','line_number':48,'multiline':False]['text':'///////////','line_number':49,'multiline':False]['text':'////////////////','line_number':53,'multiline':False]['text':' PLURAL RULES //','line_number':54,'multiline':False]['text':'////////////////','line_number':55,'multiline':False]['text':'///////////','line_number':61,'multiline':False]['text':' AFFIXES //','line_number':62,'multiline':False]['text':'///////////','line_number':63,'multiline':False]['text':'/////////','line_number':68,'multiline':False]['text':' UNITS //','line_number':69,'multiline':False]['text':'/////////','line_number':70,'multiline':False]['text':' NOTE: Slicing is OK.','line_number':80,'multiline':False]['text':' NOLINT','line_number':81,'multiline':False]['text':'/////////////////////','line_number':84,'multiline':False]['text':' ROUNDING STRATEGY //','line_number':85,'multiline':False]['text':'/////////////////////','line_number':86,'multiline':False]['text':' Not assigning directly to macros.roundingMode here: we change','line_number':95,'multiline':False]['text':' roundingMode if and when we also change macros.precision.','line_number':96,'multiline':False]['text':' Resolve min/max frac for currencies, required for the validation logic and for when minFrac or','line_number':100,'multiline':False]['text':' maxFrac was','line_number':101,'multiline':False]['text':' set (but not both) on a currency instance.','line_number':102,'multiline':False]['text':' NOTE: Increments are handled in "Precision.constructCurrency()".','line_number':103,'multiline':False]['text':' if (maxFrac == -1) ','line_number':112,'multiline':True]['text':' Validate min/max int/frac.','line_number':116,'multiline':False]['text':' For backwards compatibility, minimum overrides maximum if the two conflict.','line_number':117,'multiline':False]['text':' Force a digit before the decimal point.','line_number':124,'multiline':False]['text':'/////////////////','line_number':154,'multiline':False]['text':' INTEGER WIDTH //','line_number':155,'multiline':False]['text':'/////////////////','line_number':156,'multiline':False]['text':'/////////////////////','line_number':163,'multiline':False]['text':' GROUPING STRATEGY //','line_number':164,'multiline':False]['text':'/////////////////////','line_number':165,'multiline':False]['text':'///////////','line_number':169,'multiline':False]['text':' PADDING //','line_number':170,'multiline':False]['text':'///////////','line_number':171,'multiline':False]['text':'/////////////////////////////','line_number':177,'multiline':False]['text':' DECIMAL MARK ALWAYS SHOWN //','line_number':178,'multiline':False]['text':'/////////////////////////////','line_number':179,'multiline':False]['text':'/////////////////////','line_number':184,'multiline':False]['text':' SIGN ALWAYS SHOWN //','line_number':185,'multiline':False]['text':'/////////////////////','line_number':186,'multiline':False]['text':'///////////////////////','line_number':190,'multiline':False]['text':' SCIENTIFIC NOTATION //','line_number':191,'multiline':False]['text':'///////////////////////','line_number':192,'multiline':False]['text':' Scientific notation is required.','line_number':195,'multiline':False]['text':' This whole section feels like a hack, but it is needed for regression tests.','line_number':196,'multiline':False]['text':' The mapping from property bag to scientific notation is nontrivial due to LDML rules.','line_number':197,'multiline':False]['text':' But #13110: The maximum of 8 digits has unknown origins and is not in the spec.','line_number':199,'multiline':False]['text':' If maxInt is greater than 8, it is set to minInt, even if minInt is greater than 8.','line_number':200,'multiline':False]['text':' Bug #13289: if maxInt > minInt > 1, then minInt should be 1.','line_number':204,'multiline':False]['text':' Engineering interval:','line_number':210,'multiline':False]['text':' Enforce minimum integer digits (for patterns like "000.00E0"):','line_number':212,'multiline':False]['text':' Minimum exponent digits:','line_number':214,'multiline':False]['text':' Exponent sign always shown:','line_number':216,'multiline':False]['text':' Scientific notation also involves overriding the rounding mode.','line_number':218,'multiline':False]['text':' TODO: Overriding here is a bit of a hack. Should this logic go earlier?','line_number':219,'multiline':False]['text':' For the purposes of rounding, get the original min/max int/frac, since the local','line_number':221,'multiline':False]['text':' variables have been manipulated for display purposes.','line_number':222,'multiline':False]['text':' Patterns like "#E0" and "##E0", which mean no rounding!','line_number':228,'multiline':False]['text':' Patterns like "#.##E0" (no zeros in the mantissa), which mean round to maxFrac+1','line_number':231,'multiline':False]['text':' Bug #20058: if maxInt_ > minInt_ > 1, then minInt_ should be 1.','line_number':235,'multiline':False]['text':' To avoid regression, maxSig is not reset when minInt_ set to 1.','line_number':240,'multiline':False]['text':' TODO: Reset maxSig_ = 1 + minFrac_ to follow the spec.','line_number':241,'multiline':False]['text':'////////////////////','line_number':248,'multiline':False]['text':' COMPACT NOTATION //','line_number':249,'multiline':False]['text':'////////////////////','line_number':250,'multiline':False]['text':' Do not forward the affix provider.','line_number':258,'multiline':False]['text':'///////////////','line_number':262,'multiline':False]['text':' MULTIPLIERS //','line_number':263,'multiline':False]['text':'///////////////','line_number':264,'multiline':False]['text':'////////////////////','line_number':268,'multiline':False]['text':' PROPERTY EXPORTS //','line_number':269,'multiline':False]['text':'////////////////////','line_number':270,'multiline':False]['text':' There are two ways to set affixes in DecimalFormat: via the pattern string (applyPattern), and via the','line_number':318,'multiline':False]['text':' explicit setters (setPositivePrefix and friends).  The way to resolve the settings is as follows:','line_number':319,'multiline':False]['text':'','line_number':320,'multiline':False]['text':' 1) If the explicit setting is present for the field, use it.','line_number':321,'multiline':False]['text':' 2) Otherwise, follows UTS 35 rules based on the pattern string.','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':' Importantly, the explicit setters affect only the one field they override.  If you set the positive','line_number':324,'multiline':False]['text':' prefix, that should not affect the negative prefix.','line_number':325,'multiline':False]['text':' Convenience: Extract the properties into local variables.','line_number':327,'multiline':False]['text':' Variables are named with three chars: [p/n][p/s][o/p]','line_number':328,'multiline':False]['text':' [p/n] => p for positive, n for negative','line_number':329,'multiline':False]['text':' [p/s] => p for prefix, s for suffix','line_number':330,'multiline':False]['text':' [o/p] => o for escaped custom override string, p for pattern string','line_number':331,'multiline':False]['text':' UTS 35: Default positive prefix is empty string.','line_number':346,'multiline':False]['text':' UTS 35: Default positive suffix is empty string.','line_number':355,'multiline':False]['text':' UTS 35: Default negative prefix is "-" with positive prefix.','line_number':364,'multiline':False]['text':' Important: We prepend the "-" to the pattern, not the override!','line_number':365,'multiline':False]['text':' UTS 35: Default negative prefix is the positive prefix.','line_number':374,'multiline':False]['text':' For declaring if this is a currency pattern, we need to look at the','line_number':378,'multiline':False]['text':' original pattern, not at any user-specified overrides.','line_number':379,'multiline':False]['text':' TODO: Change the internal APIs to propagate out the error?','line_number':414,'multiline':False]['text':' We need to use a PropertiesAffixPatternProvider, not the simpler version ParsedPatternInfo,','line_number':453,'multiline':False]['text':' because user-specified affix overrides still need to work.','line_number':454,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':510,'multiline':True]