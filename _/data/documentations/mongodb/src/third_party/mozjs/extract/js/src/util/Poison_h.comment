['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Memory poisoning.
 ','line_number':7,'multiline':True]['text':' std::min','line_number':18,'multiline':False]['text':'
 * Allow extra GC poisoning to be enabled in crash-diagnostics and zeal
 * builds. Except in debug builds, this must be enabled by setting the
 * JSGC_EXTRA_POISONING environment variable.
 ','line_number':28,'multiline':True]['text':'*
 * Set the first |aNElem| T elements in |aDst| to |aSrc|.
 ','line_number':39,'multiline':True]['text':' namespace mozilla ','line_number':49,'multiline':True]['text':'
 * Patterns used by SpiderMonkey to overwrite unused memory. If you are
 * accessing an object with one of these pattern, you probably have a dangling
 * pointer. These values should be odd, see the comment in IsThingPoisoned.
 *
 * Note: new patterns should also be added to the array in IsThingPoisoned!
 *
 * We try to keep our IRC bot, mrgiggles, up to date with these and other
 * patterns:
 * https://bitbucket.org/sfink/mrgiggles/src/default/plugins/knowledge/__init__.py
 ','line_number':51,'multiline':True]['text':' Even ones','line_number':80,'multiline':False]['text':'
 * Ensure JS_SWEPT_CODE_PATTERN is a byte pattern that will crash immediately
 * when executed, so either an undefined instruction or an instruction that's
 * illegal in user mode.
 ','line_number':84,'multiline':True]['text':' IN instruction, crashes in user mode.','line_number':91,'multiline':False]['text':' undefined instruction','line_number':93,'multiline':False]['text':' undefined instruction','line_number':95,'multiline':False]['text':' Marks a region as poisoned. Memory sanitizers like ASan will crash when','line_number':101,'multiline':False]['text':' accessing it (both reads and writes).','line_number':102,'multiline':False]['text':' Marks a region as having undefined contents. In ASan builds this just','line_number':105,'multiline':False]['text':' unpoisons the memory. MSan and Valgrind can also use this to find','line_number':106,'multiline':False]['text':' reads of uninitialized memory.','line_number':107,'multiline':False]['text':' Without a valid Value tag, a poisoned Value may look like a valid','line_number':127,'multiline':False]['text':' floating point number. To ensure that we crash more readily when','line_number':128,'multiline':False]['text':' observing a poisoned Value, we make the poison an invalid ObjectValue.','line_number':129,'multiline':False]['text':' Unfortunately, this adds about 2% more overhead, so we can only enable','line_number':130,'multiline':False]['text':' it in debug.','line_number':131,'multiline':False]['text':' On 32-bit arch, `ptr` is 4 bytes aligned, and it's less than','line_number':145,'multiline':False]['text':' `sizeof(JS::Value)` == 8 bytes.','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':' `mozilla::PodSet` with `v` requires the pointer to be 8 bytes aligned if','line_number':148,'multiline':False]['text':' `value_count > 0`.','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':' If the pointer isn't 8 bytes aligned, fill the leading 1-4 bytes','line_number':151,'multiline':False]['text':' separately here, so that either the pointer is 8 bytes aligned, or','line_number':152,'multiline':False]['text':' we have no more bytes to fill.','line_number':153,'multiline':False]['text':' !DEBUG','line_number':177,'multiline':False]['text':' !DEBUG','line_number':179,'multiline':False]['text':' Unconditionally poison a region on memory.','line_number':182,'multiline':False]['text':' Conditionally poison a region of memory in debug builds and nightly builds','line_number':193,'multiline':False]['text':' when enabled by setting the JSGC_EXTRA_POISONING environment variable. Used','line_number':194,'multiline':False]['text':' by the GC in places where poisoning has a performance impact.','line_number':195,'multiline':False]['text':' Poison a region of memory in debug builds. Can be disabled by setting the','line_number':206,'multiline':False]['text':' JSGC_EXTRA_POISONING environment variable.','line_number':207,'multiline':False]['text':' namespace js','line_number':217,'multiline':False]['text':' util_Poison_h ','line_number':219,'multiline':True]