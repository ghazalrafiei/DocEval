['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' Forward declaration','line_number':58,'multiline':False]['text':' This scope has the following purposes:','line_number':62,'multiline':False]['text':'  * Acquire/Release the underlying assembler's code buffer.','line_number':63,'multiline':False]['text':'     * This is mandatory before emitting.','line_number':64,'multiline':False]['text':'  * Emit the literal or veneer pools if necessary before emitting the','line_number':65,'multiline':False]['text':'    macro-instruction.','line_number':66,'multiline':False]['text':'  * Ensure there is enough space to emit the macro-instruction.','line_number':67,'multiline':False]['text':' Helper for common Emission checks.','line_number':83,'multiline':False]['text':' The macro-instruction maps to a single instruction.','line_number':84,'multiline':False]['text':' The macro instruction is a "typical" macro-instruction. Typical macro-','line_number':92,'multiline':False]['text':' instruction only emit a few instructions, a few being defined as 8 here.','line_number':93,'multiline':False]['text':' Copies of architectural conditions.','line_number':105,'multiline':False]['text':' The associated conditions can be used in place of those, the code will','line_number':106,'multiline':False]['text':' take care of reinterpreting them with the correct type.','line_number':107,'multiline':False]['text':' These two are *different* from the architectural codes al and nv.','line_number':125,'multiline':False]['text':' 'always' is used to generate unconditional branches.','line_number':126,'multiline':False]['text':' 'never' is used to not generate a branch (generally as the inverse','line_number':127,'multiline':False]['text':' branch type of 'always).','line_number':128,'multiline':False]['text':' cbz and cbnz','line_number':130,'multiline':False]['text':' tbz and tbnz','line_number':132,'multiline':False]['text':' Aliases.','line_number':135,'multiline':False]['text':' The macro assembler supports moving automatically pre-shifted immediates for','line_number':145,'multiline':False]['text':' arithmetic and logical instructions, and then applying a post shift in the','line_number':146,'multiline':False]['text':' instruction to undo the modification, in order to reduce the code emitted for','line_number':147,'multiline':False]['text':' an operation. For example:','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':'  Add(x0, x0, 0x1f7de) => movz x16, 0xfbef; add x0, x0, x16, lsl #1.','line_number':150,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' This optimisation can be only partially applied when the stack pointer is an','line_number':152,'multiline':False]['text':' operand or destination, so this enumeration is used to control the shift.','line_number':153,'multiline':False]['text':' Don't pre-shift.','line_number':155,'multiline':False]['text':' Limit pre-shift for add/sub extend use.','line_number':156,'multiline':False]['text':' Allow any pre-shift.','line_number':157,'multiline':False]['text':' Finalize a code buffer of generated instructions. This function must be','line_number':165,'multiline':False]['text':' called before executing or copying code from the buffer.','line_number':166,'multiline':False]['text':' Constant generation helpers.','line_number':170,'multiline':False]['text':' These functions return the number of instructions required to move the','line_number':171,'multiline':False]['text':' immediate into the destination register. Also, if the masm pointer is','line_number':172,'multiline':False]['text':' non-null, it generates the code to do so.','line_number':173,'multiline':False]['text':' The two features are implemented using one function to avoid duplication of','line_number':174,'multiline':False]['text':' the logic.','line_number':175,'multiline':False]['text':' The function can be used to evaluate the cost of synthesizing an','line_number':176,'multiline':False]['text':' instruction using 'mov immediate' instructions. A user might prefer loading','line_number':177,'multiline':False]['text':' a constant using the literal pool instead of using multiple 'mov immediate'','line_number':178,'multiline':False]['text':' instructions.','line_number':179,'multiline':False]['text':' Logical macros.','line_number':188,'multiline':False]['text':' Add and sub macros.','line_number':219,'multiline':False]['text':' Add/sub with carry macros.','line_number':247,'multiline':False]['text':' Move macros.','line_number':270,'multiline':False]['text':' Try to move an immediate into the destination register in a single','line_number':280,'multiline':False]['text':' instruction. Returns true for success, and updates the contents of dst.','line_number':281,'multiline':False]['text':' Returns false, otherwise.','line_number':282,'multiline':False]['text':' Move an immediate into register dst, and return an Operand object for','line_number':285,'multiline':False]['text':' use with a subsequent instruction that accepts a shift. The value moved','line_number':286,'multiline':False]['text':' into dst is not necessarily equal to imm; it may have had a shifting','line_number':287,'multiline':False]['text':' operation applied to it that will be subsequently undone by the shift','line_number':288,'multiline':False]['text':' applied in the Operand.','line_number':289,'multiline':False]['text':' Synthesises the address represented by a MemOperand into a register.','line_number':294,'multiline':False]['text':' Conditional macros.','line_number':297,'multiline':False]['text':' Load/store macros.','line_number':316,'multiline':False]['text':' Push or pop up to 4 registers of the same width to or from the stack,','line_number':338,'multiline':False]['text':' using the current stack pointer as set by SetStackPointer.','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' If an argument register is 'NoReg', all further arguments are also assumed','line_number':341,'multiline':False]['text':' to be 'NoReg', and are thus not pushed or popped.','line_number':342,'multiline':False]['text':'','line_number':343,'multiline':False]['text':' Arguments are ordered such that "Push(a, b);" is functionally equivalent','line_number':344,'multiline':False]['text':' to "Push(a); Push(b);".','line_number':345,'multiline':False]['text':'','line_number':346,'multiline':False]['text':' It is valid to push the same register more than once, and there is no','line_number':347,'multiline':False]['text':' restriction on the order in which registers are specified.','line_number':348,'multiline':False]['text':'','line_number':349,'multiline':False]['text':' It is not valid to pop into the same register more than once in one','line_number':350,'multiline':False]['text':' operation, not even into the zero register.','line_number':351,'multiline':False]['text':'','line_number':352,'multiline':False]['text':' If the current stack pointer (as set by SetStackPointer) is sp, then it','line_number':353,'multiline':False]['text':' must be aligned to 16 bytes on entry and the total size of the specified','line_number':354,'multiline':False]['text':' registers must also be a multiple of 16 bytes.','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':' Even if the current stack pointer is not the system stack pointer (sp),','line_number':357,'multiline':False]['text':' Push (and derived methods) will still modify the system stack pointer in','line_number':358,'multiline':False]['text':' order to comply with ABI rules about accessing memory below the system','line_number':359,'multiline':False]['text':' stack pointer.','line_number':360,'multiline':False]['text':'','line_number':361,'multiline':False]['text':' Other than the registers passed into Pop, the stack pointer and (possibly)','line_number':362,'multiline':False]['text':' the system stack pointer, these methods do not modify any other registers.','line_number':363,'multiline':False]['text':' Alternative forms of Push and Pop, taking a RegList or CPURegList that','line_number':370,'multiline':False]['text':' specifies the registers that are to be pushed or popped. Higher-numbered','line_number':371,'multiline':False]['text':' registers are associated with higher memory addresses (as in the A32 push','line_number':372,'multiline':False]['text':' and pop instructions).','line_number':373,'multiline':False]['text':'','line_number':374,'multiline':False]['text':' (Push|Pop)SizeRegList allow you to specify the register size as a','line_number':375,'multiline':False]['text':' parameter. Only kXRegSize, kWRegSize, kDRegSize and kSRegSize are','line_number':376,'multiline':False]['text':' supported.','line_number':377,'multiline':False]['text':'','line_number':378,'multiline':False]['text':' Otherwise, (Push|Pop)(CPU|X|W|D|S)RegList is preferred.','line_number':379,'multiline':False]['text':' Push the specified register 'count' times.','line_number':416,'multiline':False]['text':' Poke 'src' onto the stack. The offset is in bytes.','line_number':419,'multiline':False]['text':'','line_number':420,'multiline':False]['text':' If the current stack pointer (as set by SetStackPointer) is sp, then sp','line_number':421,'multiline':False]['text':' must be aligned to 16 bytes.','line_number':422,'multiline':False]['text':' Peek at a value on the stack, and put it in 'dst'. The offset is in bytes.','line_number':425,'multiline':False]['text':'','line_number':426,'multiline':False]['text':' If the current stack pointer (as set by SetStackPointer) is sp, then sp','line_number':427,'multiline':False]['text':' must be aligned to 16 bytes.','line_number':428,'multiline':False]['text':' Alternative forms of Peek and Poke, taking a RegList or CPURegList that','line_number':431,'multiline':False]['text':' specifies the registers that are to be pushed or popped. Higher-numbered','line_number':432,'multiline':False]['text':' registers are associated with higher memory addresses.','line_number':433,'multiline':False]['text':'','line_number':434,'multiline':False]['text':' (Peek|Poke)SizeRegList allow you to specify the register size as a','line_number':435,'multiline':False]['text':' parameter. Only kXRegSize, kWRegSize, kDRegSize and kSRegSize are','line_number':436,'multiline':False]['text':' supported.','line_number':437,'multiline':False]['text':'','line_number':438,'multiline':False]['text':' Otherwise, (Peek|Poke)(CPU|X|W|D|S)RegList is preferred.','line_number':439,'multiline':False]['text':' Claim or drop stack space without actually accessing memory.','line_number':481,'multiline':False]['text':'','line_number':482,'multiline':False]['text':' If the current stack pointer (as set by SetStackPointer) is sp, then it','line_number':483,'multiline':False]['text':' must be aligned to 16 bytes and the size claimed or dropped must be a','line_number':484,'multiline':False]['text':' multiple of 16 bytes.','line_number':485,'multiline':False]['text':' Preserve the callee-saved registers (as defined by AAPCS64).','line_number':489,'multiline':False]['text':'','line_number':490,'multiline':False]['text':' Higher-numbered registers are pushed before lower-numbered registers, and','line_number':491,'multiline':False]['text':' thus get higher addresses.','line_number':492,'multiline':False]['text':' Floating-point registers are pushed before general-purpose registers, and','line_number':493,'multiline':False]['text':' thus get higher addresses.','line_number':494,'multiline':False]['text':'','line_number':495,'multiline':False]['text':' This method must not be called unless StackPointer() is sp, and it is','line_number':496,'multiline':False]['text':' aligned to 16 bytes.','line_number':497,'multiline':False]['text':' Restore the callee-saved registers (as defined by AAPCS64).','line_number':500,'multiline':False]['text':'','line_number':501,'multiline':False]['text':' Higher-numbered registers are popped after lower-numbered registers, and','line_number':502,'multiline':False]['text':' thus come from higher addresses.','line_number':503,'multiline':False]['text':' Floating-point registers are popped after general-purpose registers, and','line_number':504,'multiline':False]['text':' thus come from higher addresses.','line_number':505,'multiline':False]['text':'','line_number':506,'multiline':False]['text':' This method must not be called unless StackPointer() is sp, and it is','line_number':507,'multiline':False]['text':' aligned to 16 bytes.','line_number':508,'multiline':False]['text':' Remaining instructions are simple pass-through calls to the assembler.','line_number':514,'multiline':False]['text':' Branch type inversion relies on these relations.','line_number':539,'multiline':False]['text':' Bind a label to a specified offset from the start of the buffer.','line_number':588,'multiline':False]['text':' The VIXL source code contains these assertions, but the AArch64 ISR','line_number':659,'multiline':False]['text':' explicitly permits the use of zero registers. CSET itself is defined','line_number':660,'multiline':False]['text':' in terms of CSINC with WZR/XZR.','line_number':661,'multiline':False]['text':'','line_number':662,'multiline':False]['text':' VIXL_ASSERT(!rn.IsZero());','line_number':663,'multiline':False]['text':' VIXL_ASSERT(!rm.IsZero());','line_number':664,'multiline':False]['text':' Only emit an instruction if vd and vn are different, and they are both D','line_number':856,'multiline':False]['text':' registers. fmov(s0, s0) is not a no-op because it clears the top word of','line_number':857,'multiline':False]['text':' d0. Technically, fmov(d0, d0) is not a no-op either because it clears','line_number':858,'multiline':False]['text':' the top of q0, but VRegister does not currently support Q registers.','line_number':859,'multiline':False]['text':' Provide explicit double and float interfaces for FP immediate moves, rather','line_number':877,'multiline':False]['text':' than relying on implicit C++ casts. This allows signalling NaNs to be','line_number':878,'multiline':False]['text':' preserved when the immediate matches the format of vd. Most systems convert','line_number':879,'multiline':False]['text':' signalling NaNs to quiet NaNs when converting between float and double.','line_number':880,'multiline':False]['text':' Provide a template to allow other types to be converted automatically.','line_number':883,'multiline':False]['text':' Provide both double and float interfaces for FP immediate loads, rather','line_number':981,'multiline':False]['text':' than relying on implicit C++ casts. This allows signalling NaNs to be','line_number':982,'multiline':False]['text':' preserved when the immediate matches the format of fd. Most systems convert','line_number':983,'multiline':False]['text':' signalling NaNs to quiet NaNs when converting between float and double.','line_number':984,'multiline':False]['text':'
  void Ldr(const VRegister& vt, uint64_t high64, uint64_t low64) {
    VIXL_ASSERT(vt.IsQ());
    SingleEmissionCheckScope guard(this);
    ldr(vt, new Literal<uint64_t>(high64, low64,
                                  &literal_pool_,
                                  RawLiteral::kDeletedOnPlacementByPool));
  }
  ','line_number':1001,'multiline':True]['text':' NEON 3 vector register instructions.','line_number':1515,'multiline':False]['text':' NEON 2 vector register instructions.','line_number':1655,'multiline':False]['text':' NEON 2 vector register with immediate instructions.','line_number':1739,'multiline':False]['text':' NEON by element instructions.','line_number':1757,'multiline':False]['text':' Push the system stack pointer (sp) down to allow the same to be done to','line_number':2222,'multiline':False]['text':' the current stack pointer (according to StackPointer()). This must be','line_number':2223,'multiline':False]['text':' called _before_ accessing the memory.','line_number':2224,'multiline':False]['text':'','line_number':2225,'multiline':False]['text':' This is necessary when pushing or otherwise adding things to the stack, to','line_number':2226,'multiline':False]['text':' satisfy the AAPCS64 constraint that the memory below the system stack','line_number':2227,'multiline':False]['text':' pointer is not accessed.','line_number':2228,'multiline':False]['text':'','line_number':2229,'multiline':False]['text':' This method asserts that StackPointer() is not sp, since the call does','line_number':2230,'multiline':False]['text':' not make sense in that context.','line_number':2231,'multiline':False]['text':'','line_number':2232,'multiline':False]['text':' TODO: This method can only accept values of 'space' that can be encoded in','line_number':2233,'multiline':False]['text':' one instruction. Refer to the implementation for details.','line_number':2234,'multiline':False]['text':' Set the current stack pointer, but don't generate any code.','line_number':2237,'multiline':False]['text':' Return the current stack pointer, as set by SetStackPointer.','line_number':2243,'multiline':False]['text':' Trace control when running the debug simulator.','line_number':2259,'multiline':False]['text':'','line_number':2260,'multiline':False]['text':' For example:','line_number':2261,'multiline':False]['text':'','line_number':2262,'multiline':False]['text':' __ Trace(LOG_REGS, TRACE_ENABLE);','line_number':2263,'multiline':False]['text':' Will add registers to the trace if it wasn't already the case.','line_number':2264,'multiline':False]['text':'','line_number':2265,'multiline':False]['text':' __ Trace(LOG_DISASM, TRACE_DISABLE);','line_number':2266,'multiline':False]['text':' Will stop logging disassembly. It has no effect if the disassembly wasn't','line_number':2267,'multiline':False]['text':' already being logged.','line_number':2268,'multiline':False]['text':' Log the requested data independently of what is being traced.','line_number':2271,'multiline':False]['text':'','line_number':2272,'multiline':False]['text':' For example:','line_number':2273,'multiline':False]['text':'','line_number':2274,'multiline':False]['text':' __ Log(LOG_FLAGS)','line_number':2275,'multiline':False]['text':' Will output the flags.','line_number':2276,'multiline':False]['text':' Enable or disable instrumentation when an Instrument visitor is attached to','line_number':2279,'multiline':False]['text':' the simulator.','line_number':2280,'multiline':False]['text':' Add a marker to the instrumentation data produced by an Instrument visitor.','line_number':2284,'multiline':False]['text':' The name is a two character string that will be attached to the marker in','line_number':2285,'multiline':False]['text':' the output data.','line_number':2286,'multiline':False]['text':' The actual Push and Pop implementations. These don't generate any code','line_number':2290,'multiline':False]['text':' other than that required for the push or pop. This allows','line_number':2291,'multiline':False]['text':' (Push|Pop)CPURegList to bundle together setup code for a large block of','line_number':2292,'multiline':False]['text':' registers.','line_number':2293,'multiline':False]['text':'','line_number':2294,'multiline':False]['text':' Note that size is per register, and is specified in bytes.','line_number':2295,'multiline':False]['text':' Perform necessary maintenance operations before a push or pop.','line_number':2307,'multiline':False]['text':'','line_number':2308,'multiline':False]['text':' Note that size is per register, and is specified in bytes.','line_number':2309,'multiline':False]['text':' The actual implementation of load and store operations for CPURegList.','line_number':2313,'multiline':False]['text':' Returns a MemOperand suitable for loading or storing a CPURegList at `dst`.','line_number':2321,'multiline':False]['text':' This helper may allocate registers from `scratch_scope` and generate code','line_number':2322,'multiline':False]['text':' to compute an intermediate address. The resulting MemOperand is only valid','line_number':2323,'multiline':False]['text':' as long as `scratch_scope` remains valid.','line_number':2324,'multiline':False]['text':' The register to use as a stack pointer for stack operations.','line_number':2334,'multiline':False]['text':' Scratch registers available for use by the MacroAssembler.','line_number':2337,'multiline':False]['text':' All Assembler emits MUST acquire/release the underlying code buffer. The','line_number':2346,'multiline':False]['text':' helper scope below will do so and optionally ensure the buffer is big enough','line_number':2347,'multiline':False]['text':' to receive the emit. It is possible to request the scope not to perform any','line_number':2348,'multiline':False]['text':' checks (kNoCheck) if for example it is known in advance the buffer size is','line_number':2349,'multiline':False]['text':' adequate or there is some other size checking mechanism in place.','line_number':2350,'multiline':False]['text':' Tell whether or not the scope needs to ensure the associated CodeBuffer','line_number':2353,'multiline':False]['text':' has enough space for the requested size.','line_number':2354,'multiline':False]['text':' Tell whether or not the scope should assert the amount of code emitted','line_number':2360,'multiline':False]['text':' within the scope is consistent with the requested amount.','line_number':2361,'multiline':False]['text':' No assert required.','line_number':2363,'multiline':False]['text':' The code emitted must be exactly size bytes.','line_number':2364,'multiline':False]['text':' The code emitted must be at most size bytes.','line_number':2365,'multiline':False]['text':' This is a shortcut for CodeBufferCheckScope(assm, 0, kNoCheck, kNoAssert).','line_number':2374,'multiline':False]['text':' Use this scope when you need a one-to-one mapping between methods and','line_number':2379,'multiline':False]['text':' instructions. This scope prevents the MacroAssembler from being called and','line_number':2380,'multiline':False]['text':' literal pools from being emitted. It also asserts the number of instructions','line_number':2381,'multiline':False]['text':' emitted is what you specified when creating the scope.','line_number':2382,'multiline':False]['text':' FIXME: Because of the disabled calls below, this class asserts nothing.','line_number':2383,'multiline':False]['text':' This scope utility allows scratch registers to be managed safely. The','line_number':2397,'multiline':False]['text':' MacroAssembler's TmpList() (and FPTmpList()) is used as a pool of scratch','line_number':2398,'multiline':False]['text':' registers. These registers can be allocated on demand, and will be returned','line_number':2399,'multiline':False]['text':' at the end of the scope.','line_number':2400,'multiline':False]['text':'','line_number':2401,'multiline':False]['text':' When the scope ends, the MacroAssembler's lists will be restored to their','line_number':2402,'multiline':False]['text':' original state, even if the lists were modified by some other means.','line_number':2403,'multiline':False]['text':' This constructor implicitly calls the `Open` function to initialise the','line_number':2406,'multiline':False]['text':' scope, so it is ready to use immediately after it has been constructed.','line_number':2407,'multiline':False]['text':' This constructor allows deferred and optional initialisation of the scope.','line_number':2409,'multiline':False]['text':' The user is required to explicitly call the `Open` function before using','line_number':2410,'multiline':False]['text':' the scope.','line_number':2411,'multiline':False]['text':' This function performs the actual initialisation work.','line_number':2413,'multiline':False]['text':' The destructor always implicitly calls the `Close` function.','line_number':2416,'multiline':False]['text':' This function performs the cleaning-up work. It must succeed even if the','line_number':2418,'multiline':False]['text':' scope has not been opened. It is safe to call multiple times.','line_number':2419,'multiline':False]['text':' Take a register from the appropriate temps list. It will be returned','line_number':2426,'multiline':False]['text':' automatically when the scope ends.','line_number':2427,'multiline':False]['text':' Explicitly release an acquired (or excluded) register, putting it back in','line_number':2439,'multiline':False]['text':' the appropriate temps list.','line_number':2440,'multiline':False]['text':' Make the specified registers available as scratch registers for the','line_number':2444,'multiline':False]['text':' duration of this scope.','line_number':2445,'multiline':False]['text':' Make sure that the specified registers are not available in this scope.','line_number':2457,'multiline':False]['text':' This can be used to prevent helper functions from using sensitive','line_number':2458,'multiline':False]['text':' registers, for example.','line_number':2459,'multiline':False]['text':' Prevent any scratch registers from being used in this scope.','line_number':2475,'multiline':False]['text':' Available scratch registers.','line_number':2493,'multiline':False]['text':' kRegister','line_number':2494,'multiline':False]['text':' kVRegister','line_number':2495,'multiline':False]['text':' The state of the available lists at the start of this scope.','line_number':2497,'multiline':False]['text':' kRegister','line_number':2498,'multiline':False]['text':' kVRegister','line_number':2499,'multiline':False]['text':' Disallow copy constructor and operator=.','line_number':2504,'multiline':False]['text':' namespace vixl','line_number':2514,'multiline':False]['text':' VIXL_A64_MACRO_ASSEMBLER_A64_H_','line_number':2516,'multiline':False]