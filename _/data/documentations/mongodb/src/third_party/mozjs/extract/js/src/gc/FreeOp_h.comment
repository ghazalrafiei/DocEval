['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':10,'multiline':False]['text':' JS_PUBLIC_API','line_number':12,'multiline':False]['text':' js::MemoryUse','line_number':13,'multiline':False]['text':' jit::JitPoisonRangeVector','line_number':14,'multiline':False]['text':' SystemAllocPolicy','line_number':15,'multiline':False]['text':' JSFreeOp','line_number':16,'multiline':False]['text':' AutoEnterOOMUnsafeRegion, js_free','line_number':17,'multiline':False]['text':' js::Vector','line_number':18,'multiline':False]['text':' namespace gc','line_number':25,'multiline':False]['text':' namespace js','line_number':26,'multiline':False]['text':'
 * A JSFreeOp can do one thing: free memory. For convenience, it has delete_
 * convenience methods that also call destructors.
 *
 * JSFreeOp is passed to finalizers and other sweep-phase hooks so that we do
 * not need to pass a JSContext to those hooks.
 ','line_number':28,'multiline':True]['text':' Sometimes background finalization happens on the main thread so','line_number':60,'multiline':False]['text':' runtime_ being null doesn't always mean we are off thread.','line_number':61,'multiline':False]['text':' Deprecated. Where possible, memory should be tracked against the owning GC','line_number':68,'multiline':False]['text':' thing by calling js::AddCellMemory and the memory freed with free_() below.','line_number':69,'multiline':False]['text':' Free memory associated with a GC thing and update the memory accounting.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':' The memory should have been associated with the GC thing using','line_number':74,'multiline':False]['text':' js::InitReservedSlot or js::InitObjectPrivate, or possibly','line_number':75,'multiline':False]['text':' js::AddCellMemory.','line_number':76,'multiline':False]['text':' JSFreeOps other than the defaultFreeOp() are constructed on the stack,','line_number':80,'multiline':False]['text':' and won't hold onto the pointers to free indefinitely.','line_number':81,'multiline':False]['text':' Deprecated. Where possible, memory should be tracked against the owning GC','line_number':87,'multiline':False]['text':' thing by calling js::AddCellMemory and the memory freed with delete_()','line_number':88,'multiline':False]['text':' below.','line_number':89,'multiline':False]['text':' Delete a C++ object that was associated with a GC thing and update the','line_number':98,'multiline':False]['text':' memory accounting. The size is determined by the type T.','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' The memory should have been associated with the GC thing using','line_number':101,'multiline':False]['text':' js::InitReservedSlot or js::InitObjectPrivate, or possibly','line_number':102,'multiline':False]['text':' js::AddCellMemory.','line_number':103,'multiline':False]['text':' Delete a C++ object that was associated with a GC thing and update the','line_number':109,'multiline':False]['text':' memory accounting.','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' The memory should have been associated with the GC thing using','line_number':112,'multiline':False]['text':' js::InitReservedSlot or js::InitObjectPrivate, or possibly','line_number':113,'multiline':False]['text':' js::AddCellMemory.','line_number':114,'multiline':False]['text':' Release a RefCounted object that was associated with a GC thing and update','line_number':123,'multiline':False]['text':' the memory accounting.','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':' The memory should have been associated with the GC thing using','line_number':126,'multiline':False]['text':' js::InitReservedSlot or js::InitObjectPrivate, or possibly','line_number':127,'multiline':False]['text':' js::AddCellMemory.','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' This counts the memory once per association with a GC thing. It's not','line_number':130,'multiline':False]['text':' expected that the same object is associated with more than one GC thing in','line_number':131,'multiline':False]['text':' each zone. If this is the case then some other form of accounting would be','line_number':132,'multiline':False]['text':' more appropriate.','line_number':133,'multiline':False]['text':' Release a RefCounted object and that was associated with a GC thing and','line_number':139,'multiline':False]['text':' update the memory accounting.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' The memory should have been associated with the GC thing using','line_number':142,'multiline':False]['text':' js::InitReservedSlot or js::InitObjectPrivate, or possibly','line_number':143,'multiline':False]['text':' js::AddCellMemory.','line_number':144,'multiline':False]['text':' Update the memory accounting for a GC for memory freed by some other','line_number':148,'multiline':False]['text':' method.','line_number':149,'multiline':False]['text':' gc_FreeOp_h','line_number':153,'multiline':False]