['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':1,'multiline':True]['text':' Copyright 2011 the V8 project authors. All rights reserved.','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':5,'multiline':False]['text':' met:','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':8,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':9,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':10,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':11,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':12,'multiline':False]['text':'       with the distribution.','line_number':13,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':14,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':15,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':18,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':19,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':20,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':21,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':22,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':23,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':24,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':25,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':26,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':27,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':28,'multiline':False]['text':' Utils functions.','line_number':72,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':80,'multiline':False]['text':' MIPS assembly various constants.','line_number':81,'multiline':False]['text':' On MIPS PC cannot actually be directly accessed. We behave as if PC was','line_number':87,'multiline':False]['text':' always the value of the current instruction being executed.','line_number':88,'multiline':False]['text':' Get the raw instruction bits.','line_number':92,'multiline':False]['text':' Set the raw instruction bits to value.','line_number':97,'multiline':False]['text':' Read one particular bit out of the instruction bits.','line_number':102,'multiline':False]['text':' Read a bit field out of the instruction bits.','line_number':105,'multiline':False]['text':' Instruction type.','line_number':110,'multiline':False]['text':' Get the encoding type of the instruction.','line_number':113,'multiline':False]['text':' Accessors for the different named fields used in the MIPS encoding.','line_number':116,'multiline':False]['text':' Float Compare condition code instruction bits.','line_number':158,'multiline':False]['text':' Float Branch condition code instruction bits.','line_number':163,'multiline':False]['text':' Float Branch true/false instruction bit.','line_number':168,'multiline':False]['text':' Return the fields at their original place in the instruction encoding.','line_number':173,'multiline':False]['text':' Same as above function, but safe to call within instructionType().','line_number':184,'multiline':False]['text':' Get the secondary field according to the opcode.','line_number':207,'multiline':False]['text':' Say if the instruction should not be used in a branch delay slot.','line_number':233,'multiline':False]['text':' Say if the instruction 'links'. e.g. jal, bal.','line_number':235,'multiline':False]['text':' Say if the instruction is a debugger break/trap.','line_number':237,'multiline':False]['text':' Coprocessor instructions.','line_number':418,'multiline':False]['text':' Branch on coprocessor condition.','line_number':420,'multiline':False]['text':' 16 bits Immediate type instructions. e.g.: addi dest, src, imm16.','line_number':428,'multiline':False]['text':' 26 bits immediate type instructions. e.g.: j imm26.','line_number':476,'multiline':False]['text':' C/C++ argument slots size.','line_number':486,'multiline':False]['text':' The cache line is only 4 bytes right now.','line_number':499,'multiline':False]['text':' The cached data.','line_number':512,'multiline':False]['text':' One byte per line.','line_number':514,'multiline':False]['text':' Protects the icache() and redirection() properties of the','line_number':517,'multiline':False]['text':' Simulator.','line_number':518,'multiline':False]['text':' Checking is disabled by default.','line_number':529,'multiline':False]['text':' The MipsDebugger class is used by the simulator while debugging simulated','line_number':556,'multiline':False]['text':' code.','line_number':557,'multiline':False]['text':' Print all registers with a nice formatting.','line_number':564,'multiline':False]['text':' We set the breakpoint code to 0xfffff to easily recognize it.','line_number':569,'multiline':False]['text':' Set or delete a breakpoint. Returns true if successful.','line_number':581,'multiline':False]['text':' Undo and redo all breakpoints. This is needed to bracket disassembly and','line_number':585,'multiline':False]['text':' execution to skip past breakpoints when run from the debugger.','line_number':586,'multiline':False]['text':' Get the stop code.','line_number':597,'multiline':False]['text':' Retrieve the encoded address, which comes just after this stop.','line_number':599,'multiline':False]['text':' Update this stop description.','line_number':602,'multiline':False]['text':' Print the stop message and code if it is not the default code.','line_number':606,'multiline':False]['text':' Check if a breakpoint can be set. If not return without any side-effects.','line_number':649,'multiline':False]['text':' Set the breakpoint.','line_number':654,'multiline':False]['text':' Not setting the breakpoint instruction in the code itself. It will be set','line_number':657,'multiline':False]['text':' when the debugger shell continues.','line_number':658,'multiline':False]['text':' f0, f1, f2, ... f31.','line_number':709,'multiline':False]['text':' fgets got an error. Just give up.','line_number':726,'multiline':False]['text':' Since we read a new line we are done reading the line. This','line_number':731,'multiline':False]['text':' will exit the loop after copying this buffer into the result.','line_number':732,'multiline':False]['text':' Allocate the initial result and make room for the terminating '\0'','line_number':736,'multiline':False]['text':' Allocate a new result with enough room for the new addition.','line_number':742,'multiline':False]['text':' Copy the existing input into the new array and set the new','line_number':748,'multiline':False]['text':' array as the result.','line_number':749,'multiline':False]['text':' Copy the newly read line into the result.','line_number':753,'multiline':False]['text':' Make sure to have a proper terminating character if reaching the limit.','line_number':794,'multiline':False]['text':' Undo all set breakpoints while running in the debugger shell. This will','line_number':799,'multiline':False]['text':' make them invisible to all commands.','line_number':800,'multiline':False]['text':' Ownership is transferred to sim_;','line_number':816,'multiline':False]['text':' Use sscanf to parse the individual parts of the command line. At the','line_number':819,'multiline':False]['text':' moment no command expects more than two parameters.','line_number':820,'multiline':False]['text':' Allow si to jump over generated breakpoints.','line_number':833,'multiline':False]['text':' Execute the one instruction we broke at with breakpoints disabled.','line_number':838,'multiline':False]['text':' Leave the debugger shell.','line_number':841,'multiline':False]['text':' Command "mem".','line_number':877,'multiline':False]['text':' The argument is an address or a register name.','line_number':914,'multiline':False]['text':' Disassemble 10 instructions at <arg1>.','line_number':918,'multiline':False]['text':' The argument is the number of instructions.','line_number':922,'multiline':False]['text':' Disassemble <arg1> instructions.','line_number':926,'multiline':False]['text':' Remove the current stop.','line_number':973,'multiline':False]['text':' Print information about all/the specified breakpoint(s).','line_number':981,'multiline':False]['text':' Enable all/the specified breakpoint(s).','line_number':995,'multiline':False]['text':' Disable all/the specified breakpoint(s).','line_number':1007,'multiline':False]['text':' Add all the breakpoints back to stop execution and enter the debugger','line_number':1075,'multiline':False]['text':' shell when hit.','line_number':1076,'multiline':False]['text':' Flush from start up to and not including start + size.','line_number':1111,'multiline':False]['text':' static ','line_number':1146,'multiline':True]['text':' Check that the data in memory matches the contents of the I-cache.','line_number':1158,'multiline':False]['text':' Cache miss.  Load memory into the cache.','line_number':1164,'multiline':False]['text':' static ','line_number':1180,'multiline':True]['text':' Set up simulator support first. Some of this information is needed to','line_number':1189,'multiline':False]['text':' setup the architecture state.','line_number':1190,'multiline':False]['text':' Note, allocation and anything that depends on allocated memory is','line_number':1192,'multiline':False]['text':' deferred until init(), in order to handle OOM properly.','line_number':1193,'multiline':False]['text':' Set up architecture state.','line_number':1206,'multiline':False]['text':' All registers are initialized to zero to start with.','line_number':1207,'multiline':False]['text':' The ra and pc are initialized to a known bad value that will cause an','line_number':1219,'multiline':False]['text':' access violation if the simulator ever tries to execute it.','line_number':1220,'multiline':False]['text':' Allocate 2MB for the stack. Note that we will only use 1MB, see below.','line_number':1232,'multiline':False]['text':' Leave a safety margin of 1MB to prevent overrunning the stack when','line_number':1239,'multiline':False]['text':' pushing values (total stack size is 2MB).','line_number':1240,'multiline':False]['text':' The sp is initialized to point to the bottom (high address) of the','line_number':1243,'multiline':False]['text':' allocated stack area. To be safe in potential stack underflows we leave','line_number':1244,'multiline':False]['text':' some buffer below.','line_number':1245,'multiline':False]['text':' When the generated code calls an external reference we need to catch that in','line_number':1251,'multiline':False]['text':' the simulator.  The external reference will be a function compiled for the','line_number':1252,'multiline':False]['text':' host architecture.  We need to call that function instead of trying to','line_number':1253,'multiline':False]['text':' execute it with the simulator.  We do that by redirecting the external','line_number':1254,'multiline':False]['text':' reference to a swi (software-interrupt) instruction that is handled by','line_number':1255,'multiline':False]['text':' the simulator.  We write the original destination of the jump just at a known','line_number':1256,'multiline':False]['text':' offset from the swi instruction so the simulator knows what to call.','line_number':1257,'multiline':False]['text':' sim's lock must already be held.','line_number':1261,'multiline':False]['text':' Note: we can't use js_new here because the constructor is private.','line_number':1291,'multiline':False]['text':' static ','line_number':1333,'multiline':True]['text':' Get the active Simulator for the current thread.','line_number':1340,'multiline':False]['text':' Sets the register in the architecture state. It will also deal with updating','line_number':1347,'multiline':False]['text':' Simulator internal state for special registers such as PC.','line_number':1348,'multiline':False]['text':' Zero register always holds 0.','line_number':1355,'multiline':False]['text':' Get the register from the architecture state. This function does handle','line_number':1389,'multiline':False]['text':' the special case of accessing the PC register.','line_number':1390,'multiline':False]['text':' Helper functions for setting and testing the FCSR register's bits.','line_number':1444,'multiline':False]['text':' Sets the rounding error codes in FCSR based on the result of the rounding.','line_number':1455,'multiline':False]['text':' Returns true if the operation was invalid.','line_number':1456,'multiline':False]['text':' The reference is not really clear but it seems this is required:','line_number':1487,'multiline':False]['text':' Raw access to the PC register.','line_number':1496,'multiline':False]['text':' Raw access to the PC register without the special adjustment when reading.','line_number':1506,'multiline':False]['text':' MIPS memory instructions (except lw(d)l/r , sw(d)l/r) trap on unaligned','line_number':1528,'multiline':False]['text':' memory access enabling the OS to handle them via trap-and-emulate. Note that','line_number':1529,'multiline':False]['text':' simulator runs have the runtime system running directly on the host system','line_number':1530,'multiline':False]['text':' and only generated code is executed in the simulator. Since the host is','line_number':1531,'multiline':False]['text':' typically IA32 it will not trap on unaligned memory access. We assume that','line_number':1532,'multiline':False]['text':' that executing correct generated code will not produce unaligned memory','line_number':1533,'multiline':False]['text':' access, so we explicitly check for address alignment and trap. Note that','line_number':1534,'multiline':False]['text':' trapping does not occur when executing wasm code, which requires that','line_number':1535,'multiline':False]['text':' unaligned memory access provides correct result.','line_number':1536,'multiline':False]['text':' Note that any memory write or "external" interrupt should reset this','line_number':1785,'multiline':False]['text':' value to false.','line_number':1786,'multiline':False]['text':' Correct behavior in this case, as defined by architecture, is to just','line_number':1798,'multiline':False]['text':' return 0, but there is no point at allowing that. It is certainly an','line_number':1799,'multiline':False]['text':' indicator of a bug.','line_number':1800,'multiline':False]['text':' Note that any memory write or "external" interrupt should reset this','line_number':1839,'multiline':False]['text':' value to false.','line_number':1840,'multiline':False]['text':' Correct behavior in this case, as defined by architecture, is to just','line_number':1852,'multiline':False]['text':' return 0, but there is no point at allowing that. It is certainly an','line_number':1853,'multiline':False]['text':' indicator of a bug.','line_number':1854,'multiline':False]['text':' Unsupported instructions use format to print an error and stop execution.','line_number':1899,'multiline':False]['text':' Note: With the code below we assume that all runtime calls return a 64 bits','line_number':1906,'multiline':False]['text':' result. If they don't, the v1 result register contains a bogus value, which','line_number':1907,'multiline':False]['text':' is fine because it is caller-saved.','line_number':1908,'multiline':False]['text':' Software interrupt instructions are used by the simulator to call into C++.','line_number':1990,'multiline':False]['text':' We first check if we met a call_rt_redirected.','line_number':1995,'multiline':False]['text':' This is dodgy but it works because the C entry stubs are never moved.','line_number':2011,'multiline':False]['text':' See comment in codegen-arm.cc and bug 1242173.','line_number':2012,'multiline':False]['text':' All remaining break_ codes, and all traps are handled here.','line_number':2403,'multiline':False]['text':' Stop helper functions.','line_number':2409,'multiline':False]['text':' Print registers and continue running.','line_number':2420,'multiline':False]['text':' Stop if it is enabled, otherwise go on jumping over the stop','line_number':2424,'multiline':False]['text':' and the message address.','line_number':2425,'multiline':False]['text':' Print a stop status.','line_number':2473,'multiline':False]['text':' Don't print the state of unused breakpoints.','line_number':2484,'multiline':False]['text':' Helper function for decodeTypeRegister.','line_number':2504,'multiline':False]['text':' Every local variable declared here needs to be const.','line_number':2511,'multiline':False]['text':' This is to make sure that changed values are sent back to','line_number':2512,'multiline':False]['text':' decodeTypeRegister correctly.','line_number':2513,'multiline':False]['text':' Instruction fields.','line_number':2515,'multiline':False]['text':' ---------- Configuration.','line_number':2527,'multiline':False]['text':' Coprocessor instructions.','line_number':2529,'multiline':False]['text':' Handled in DecodeTypeImmed, should never come here.','line_number':2531,'multiline':False]['text':' At the moment only FCSR is supported.','line_number':2535,'multiline':False]['text':' Do the store in the execution step.','line_number':2552,'multiline':False]['text':' Do everything in the execution step.','line_number':2559,'multiline':False]['text':' Regular logical right shift of a word by a fixed number of','line_number':2585,'multiline':False]['text':' bits instruction. RS field is always equal to 0.','line_number':2586,'multiline':False]['text':' Logical right-rotate of a word by a fixed number of bits. This','line_number':2589,'multiline':False]['text':' is special case of SRL instruction, added in MIPS32 Release 2.','line_number':2590,'multiline':False]['text':' RS field is equal to 00001.','line_number':2591,'multiline':False]['text':' Regular logical right shift of a double word by a fixed number of','line_number':2598,'multiline':False]['text':' bits instruction. RS field is always equal to 0.','line_number':2599,'multiline':False]['text':' Logical right-rotate of a word by a fixed number of bits. This','line_number':2602,'multiline':False]['text':' is special case of DSRL instruction, added in MIPS64 Release 2.','line_number':2603,'multiline':False]['text':' RS field is equal to 00001.','line_number':2604,'multiline':False]['text':' Regular logical right shift of a double word by a fixed number of','line_number':2610,'multiline':False]['text':' bits instruction. RS field is always equal to 0.','line_number':2611,'multiline':False]['text':' Logical right-rotate of a double word by a fixed number of bits.','line_number':2614,'multiline':False]['text':' This is special case of DSRL instruction, added in MIPS64','line_number':2615,'multiline':False]['text':' Release 2. RS field is equal to 00001.','line_number':2616,'multiline':False]['text':' Regular logical right-shift of a word by a variable number of','line_number':2637,'multiline':False]['text':' bits instruction. SA field is always equal to 0.','line_number':2638,'multiline':False]['text':' Logical right-rotate of a word by a variable number of bits.','line_number':2641,'multiline':False]['text':' This is special case od SRLV instruction, added in MIPS32','line_number':2642,'multiline':False]['text':' Release 2. SA field is equal to 00001.','line_number':2643,'multiline':False]['text':' Regular logical right-shift of a double word by a variable number','line_number':2650,'multiline':False]['text':' of bits instruction. SA field is always equal to 0.','line_number':2651,'multiline':False]['text':' Logical right-rotate of a double word by a variable number of','line_number':2654,'multiline':False]['text':' bits. This is special case od DSRLV instruction, added in MIPS64','line_number':2655,'multiline':False]['text':' Release 2. SA field is equal to 00001.','line_number':2656,'multiline':False]['text':' Break and trap instructions.','line_number':2744,'multiline':False]['text':' No action taken on decode.','line_number':2769,'multiline':False]['text':' Only the lower 32 bits are kept.','line_number':2811,'multiline':False]['text':' Mips64r2 instruction.','line_number':2825,'multiline':False]['text':' Interpret rd field as 5-bit msb of insert.','line_number':2826,'multiline':False]['text':' Interpret sa field as 5-bit lsb of insert.','line_number':2828,'multiline':False]['text':' Mips64r2 instruction.','line_number':2840,'multiline':False]['text':' Interpret rd field as 5-bit msb of insert.','line_number':2841,'multiline':False]['text':' Interpret sa field as 5-bit lsb of insert.','line_number':2843,'multiline':False]['text':' Mips64r2 instruction.','line_number':2854,'multiline':False]['text':' Interpret rd field as 5-bit msb of insert.','line_number':2855,'multiline':False]['text':' Interpret sa field as 5-bit lsb of insert.','line_number':2857,'multiline':False]['text':' Mips64r2 instruction.','line_number':2864,'multiline':False]['text':' Interpret rd field as 5-bit msb of insert.','line_number':2865,'multiline':False]['text':' Interpret sa field as 5-bit lsb of insert.','line_number':2867,'multiline':False]['text':' Mips64r2 instruction.','line_number':2878,'multiline':False]['text':' Interpret rd field as 5-bit msb of extract.','line_number':2879,'multiline':False]['text':' Interpret sa field as 5-bit lsb of extract.','line_number':2881,'multiline':False]['text':' Mips64r2 instruction.','line_number':2892,'multiline':False]['text':' Interpret rd field as 5-bit msb of extract.','line_number':2893,'multiline':False]['text':' Interpret sa field as 5-bit lsb of extract.','line_number':2895,'multiline':False]['text':' Mips64r2 instruction.','line_number':2902,'multiline':False]['text':' Interpret rd field as 5-bit msb of extract.','line_number':2903,'multiline':False]['text':' Interpret sa field as 5-bit lsb of extract.','line_number':2905,'multiline':False]['text':' Mips64r2 instruction.','line_number':2916,'multiline':False]['text':' Interpret rd field as 5-bit msb of extract.','line_number':2917,'multiline':False]['text':' Interpret sa field as 5-bit lsb of extract.','line_number':2919,'multiline':False]['text':' Mips32r2 instruction.','line_number':2930,'multiline':False]['text':' seb','line_number':2931,'multiline':False]['text':' seh','line_number':2933,'multiline':False]['text':' wsbh','line_number':2935,'multiline':False]['text':' Mips64r2 instruction.','line_number':2956,'multiline':False]['text':' dsbh','line_number':2960,'multiline':False]['text':' dshd','line_number':2972,'multiline':False]['text':' Handle execution based on instruction types.','line_number':3003,'multiline':False]['text':' Instruction fields.','line_number':3005,'multiline':False]['text':' ALU output.','line_number':3020,'multiline':False]['text':' It should not be used as is. Instructions using it should always','line_number':3021,'multiline':False]['text':' initialize it first.','line_number':3022,'multiline':False]['text':' For break and trap instructions.','line_number':3025,'multiline':False]['text':' For jr and jalr.','line_number':3028,'multiline':False]['text':' Get current pc.','line_number':3029,'multiline':False]['text':' Next pc','line_number':3031,'multiline':False]['text':' Set up the variables if needed before executing the instruction.','line_number':3035,'multiline':False]['text':' ---------- Raise exceptions triggered.','line_number':3039,'multiline':False]['text':' ---------- Execution.','line_number':3042,'multiline':False]['text':' Branch on coprocessor condition.','line_number':3046,'multiline':False]['text':' At the moment only FCSR is supported.','line_number':3062,'multiline':False]['text':' Convert float to word.','line_number':3140,'multiline':False]['text':' Rounding modes are not yet supported.','line_number':3141,'multiline':False]['text':' In rounding mode 0 it should behave like ROUND.','line_number':3143,'multiline':False]['text':' Round double to word (round half to','line_number':3145,'multiline':False]['text':' even).','line_number':3146,'multiline':False]['text':' If the number is halfway between two integers,','line_number':3150,'multiline':False]['text':' round to the even one.','line_number':3151,'multiline':False]['text':' Truncate float to word (round towards 0).','line_number':3160,'multiline':False]['text':' Round float to word towards negative','line_number':3169,'multiline':False]['text':' infinity.','line_number':3170,'multiline':False]['text':' Round double to word towards positive','line_number':3179,'multiline':False]['text':' infinity.','line_number':3180,'multiline':False]['text':' Mips64r2: Truncate float to 64-bit long-word.','line_number':3189,'multiline':False]['text':' Rounding modes are not yet supported.','line_number':3190,'multiline':False]['text':' In rounding mode 0 it should behave like ROUND.','line_number':3192,'multiline':False]['text':' Mips64r2 instruction.','line_number':3194,'multiline':False]['text':' Mips64r2 instruction.','line_number':3204,'multiline':False]['text':' Mips64r2 instruction.','line_number':3213,'multiline':False]['text':' Mips64r2 instruction.','line_number':3222,'multiline':False]['text':' Convert double to word.','line_number':3313,'multiline':False]['text':' Rounding modes are not yet supported.','line_number':3314,'multiline':False]['text':' In rounding mode 0 it should behave like ROUND.','line_number':3316,'multiline':False]['text':' Round double to word (round half to','line_number':3318,'multiline':False]['text':' even).','line_number':3319,'multiline':False]['text':' If the number is halfway between two integers,','line_number':3323,'multiline':False]['text':' round to the even one.','line_number':3324,'multiline':False]['text':' Truncate double to word (round towards','line_number':3333,'multiline':False]['text':' 0).','line_number':3334,'multiline':False]['text':' Round double to word towards negative','line_number':3343,'multiline':False]['text':' infinity.','line_number':3344,'multiline':False]['text':' Round double to word towards positive','line_number':3353,'multiline':False]['text':' infinity.','line_number':3354,'multiline':False]['text':' Convert double to float (single).','line_number':3363,'multiline':False]['text':' Mips64r2: Truncate double to 64-bit','line_number':3366,'multiline':False]['text':' long-word.','line_number':3367,'multiline':False]['text':' Rounding modes are not yet supported.','line_number':3368,'multiline':False]['text':' In rounding mode 0 it should behave like ROUND.','line_number':3370,'multiline':False]['text':' Mips64r2 instruction.','line_number':3372,'multiline':False]['text':' Mips64r2 instruction.','line_number':3382,'multiline':False]['text':' Mips64r2 instruction.','line_number':3391,'multiline':False]['text':' Mips64r2 instruction.','line_number':3400,'multiline':False]['text':' location of cc field in MOVF is equal to float branch','line_number':3423,'multiline':False]['text':' instructions','line_number':3424,'multiline':False]['text':' Convert word to float (single).','line_number':3437,'multiline':False]['text':' Convert word to double.','line_number':3441,'multiline':False]['text':' Mips64r2 instruction.','line_number':3451,'multiline':False]['text':' Instructions using HI and LO registers.','line_number':3511,'multiline':False]['text':' Divide by zero and overflow was not checked in the configuration','line_number':3530,'multiline':False]['text':' step - div and divu do not raise exceptions. On division by 0','line_number':3531,'multiline':False]['text':' the result will be UNPREDICTABLE. On overflow (INT_MIN/-1),','line_number':3532,'multiline':False]['text':' return INT_MIN which is what the hardware does.','line_number':3533,'multiline':False]['text':' Divide by zero and overflow was not checked in the configuration','line_number':3539,'multiline':False]['text':' step - div and divu do not raise exceptions. On division by 0','line_number':3540,'multiline':False]['text':' the result will be UNPREDICTABLE. On overflow (INT_MIN/-1),','line_number':3541,'multiline':False]['text':' return INT_MIN which is what the hardware does.','line_number':3542,'multiline':False]['text':' Break and trap instructions.','line_number':3548,'multiline':False]['text':' Conditional moves.','line_number':3560,'multiline':False]['text':' Read Tf bit.','line_number':3569,'multiline':False]['text':' For other special opcodes we do the default operation.','line_number':3585,'multiline':False]['text':' HI and LO are UNPREDICTABLE after the operation.','line_number':3593,'multiline':False]['text':' For other special2 opcodes we do the default operation.','line_number':3597,'multiline':False]['text':' Ins instr leaves result in Rt, rather than Rd.','line_number':3607,'multiline':False]['text':' Ext instr leaves result in Rt, rather than Rd.','line_number':3614,'multiline':False]['text':' Unimplemented opcodes raised an error in the configuration step before,','line_number':3627,'multiline':False]['text':' so we can use the default here to set the destination register in','line_number':3628,'multiline':False]['text':' common cases.','line_number':3629,'multiline':False]['text':' Type 2: instructions using a 16 bits immediate. (e.g. addi, beq).','line_number':3635,'multiline':False]['text':' Instruction fields.','line_number':3637,'multiline':False]['text':' Destination register.','line_number':3640,'multiline':False]['text':' Destination register.','line_number':3644,'multiline':False]['text':' Zero extended immediate.','line_number':3646,'multiline':False]['text':' Sign extended immediate.','line_number':3648,'multiline':False]['text':' Get current pc.','line_number':3651,'multiline':False]['text':' Next pc.','line_number':3653,'multiline':False]['text':' Used for conditional branch instructions.','line_number':3656,'multiline':False]['text':' Used for arithmetic instructions.','line_number':3660,'multiline':False]['text':' Floating point.','line_number':3662,'multiline':False]['text':' Used for memory instructions.','line_number':3666,'multiline':False]['text':' Value to be written in memory.','line_number':3668,'multiline':False]['text':' ---------- Configuration (and execution for op_regimm).','line_number':3672,'multiline':False]['text':' ------------- op_cop1. Coprocessor instructions.','line_number':3674,'multiline':False]['text':' Branch on coprocessor condition.','line_number':3677,'multiline':False]['text':' Set next_pc.','line_number':3683,'multiline':False]['text':' ------------- op_regimm class.','line_number':3694,'multiline':False]['text':' Branch instructions common part.','line_number':3717,'multiline':False]['text':' Set next_pc.','line_number':3719,'multiline':False]['text':' case op_regimm.','line_number':3732,'multiline':False]['text':' ------------- Branch instructions.','line_number':3733,'multiline':False]['text':' When comparing to zero, the encoding of rt field is always 0, so we','line_number':3734,'multiline':False]['text':' don't need to replace rt with zero.','line_number':3735,'multiline':False]['text':' ------------- Arithmetic instructions.','line_number':3748,'multiline':False]['text':' ------------- Memory instructions.','line_number':3787,'multiline':False]['text':' al_offset is offset of the effective address within an aligned word.','line_number':3813,'multiline':False]['text':' al_offset is offset of the effective address within an aligned word.','line_number':3824,'multiline':False]['text':' al_offset is offset of the effective address within an aligned word.','line_number':3848,'multiline':False]['text':' al_offset is offset of the effective address within an aligned word.','line_number':3859,'multiline':False]['text':' ---------- Raise exceptions triggered.','line_number':3937,'multiline':False]['text':' ---------- Execution.','line_number':3940,'multiline':False]['text':' ------------- Branch instructions.','line_number':3942,'multiline':False]['text':' Branch instructions common part.','line_number':3947,'multiline':False]['text':' Set next_pc.','line_number':3949,'multiline':False]['text':' ------------- Arithmetic instructions.','line_number':3959,'multiline':False]['text':' ------------- Memory instructions.','line_number':3972,'multiline':False]['text':' Execute branch delay slot','line_number':4035,'multiline':False]['text':' We don't check for end_sim_pc. First it should not be met as the current','line_number':4036,'multiline':False]['text':' pc is valid. Secondly a jump should always execute its branch delay slot.','line_number':4037,'multiline':False]['text':' If needed update pc after the branch delay execution.','line_number':4043,'multiline':False]['text':' Type 3: instructions using a 26 bits immediate. (e.g. j, jal).','line_number':4049,'multiline':False]['text':' Get current pc.','line_number':4051,'multiline':False]['text':' Get unchanged bits of pc.','line_number':4053,'multiline':False]['text':' Next pc.','line_number':4055,'multiline':False]['text':' Execute branch delay slot.','line_number':4058,'multiline':False]['text':' We don't check for end_sim_pc. First it should not be met as the current pc','line_number':4059,'multiline':False]['text':' is valid. Secondly a jump should always execute its branch delay slot.','line_number':4060,'multiline':False]['text':' Update pc and ra if necessary.','line_number':4065,'multiline':False]['text':' Do this after the branch delay execution.','line_number':4066,'multiline':False]['text':' Executes the current instruction.','line_number':4074,'multiline':False]['text':' Short-cut generic nop instructions. They are always valid and they','line_number':4103,'multiline':False]['text':' never change the simulator state.','line_number':4104,'multiline':False]['text':' Get the PC to simulate. Cannot use the accessor here as we need the','line_number':4137,'multiline':False]['text':' raw PC value and not the one used as input to arithmetic instructions.','line_number':4138,'multiline':False]['text':' Prepare to execute the code at entry.','line_number':4164,'multiline':False]['text':' Put down marker for end of simulation. The simulator will stop simulation','line_number':4166,'multiline':False]['text':' when the PC reaches this value. By saving the "end simulation" value into','line_number':4167,'multiline':False]['text':' the LR the simulation stops when returning to this call point.','line_number':4168,'multiline':False]['text':' Remember the values of callee-saved registers.','line_number':4171,'multiline':False]['text':' The code below assumes that r9 is not used as sb (static base) in','line_number':4172,'multiline':False]['text':' simulator code and therefore is regarded as a callee-saved register.','line_number':4173,'multiline':False]['text':' Set up the callee-saved registers with a known value. To be able to check','line_number':4186,'multiline':False]['text':' that they are preserved properly across JS execution.','line_number':4187,'multiline':False]['text':' Start the simulation.','line_number':4200,'multiline':False]['text':' Check that the callee-saved registers have been preserved.','line_number':4207,'multiline':False]['text':' Restore callee-saved registers with the original value.','line_number':4219,'multiline':False]['text':' Compute position of stack on entry to generated code.','line_number':4238,'multiline':False]['text':' Setup the arguments.','line_number':4250,'multiline':False]['text':' Pop stack passed arguments.','line_number':4265,'multiline':False]['text':' namespace jit','line_number':4289,'multiline':False]['text':' namespace js','line_number':4290,'multiline':False]