['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Broken down form of 64 bit time value.
 ','line_number':16,'multiline':True]['text':' microseconds of second (0-999999) ','line_number':20,'multiline':True]['text':' seconds of minute (0-59) ','line_number':21,'multiline':True]['text':' minutes of hour (0-59) ','line_number':22,'multiline':True]['text':' hour of day (0-23) ','line_number':23,'multiline':True]['text':' day of month (1-31) ','line_number':24,'multiline':True]['text':' month of year (0-11) ','line_number':25,'multiline':True]['text':' 0=sunday, 1=monday, ... ','line_number':26,'multiline':True]['text':' absolute year, AD ','line_number':27,'multiline':True]['text':' day of year (0 to 365) ','line_number':28,'multiline':True]['text':' non-zero if DST in effect ','line_number':29,'multiline':True]['text':' Some handy constants ','line_number':33,'multiline':True]['text':' Return the current local time in micro-seconds ','line_number':37,'multiline':True]['text':' Initialize the resources associated with PRMJ_Now. ','line_number':40,'multiline':True]['text':' Release the resources associated with PRMJ_Now; don't call PRMJ_Now again ','line_number':47,'multiline':True]['text':' Format a time value into a buffer. Same semantics as strftime() ','line_number':55,'multiline':True]['text':'*
 * Requesting the number of cycles from the CPU.
 *
 * `rdtsc`, or Read TimeStamp Cycle, is an instruction provided by
 * x86-compatible CPUs that lets processes request the number of
 * cycles spent by the CPU executing instructions since the CPU was
 * started. It may be used for performance monitoring, but you should
 * be aware of the following limitations.
 *
 *
 * 1. The value is *not* monotonic.
 *
 * The value is reset to 0 whenever a CPU is turned off (e.g. computer
 * in full hibernation, single CPU going turned off). Moreover, on
 * multi-core/multi-CPU architectures, the cycles of each core/CPU are
 * generally not synchronized.  Therefore, is a process or thread is
 * rescheduled to another core/CPU, the result of `rdtsc` may decrease
 * arbitrarily.
 *
 * The only way to prevent this is to pin your thread to a particular
 * CPU, which is generally not a good idea.
 *
 *
 *
 * 2. The value increases independently.
 *
 * The value may increase whenever the CPU executes an instruction,
 * regardless of the process that has issued this
 * instruction. Moreover, if a process or thread is rescheduled to
 * another core/CPU, the result of `rdtsc` may increase arbitrarily.
 *
 * The only way to prevent this is to ensure that your thread is the
 * sole owner of the CPU. See [1] for an example. This is also
 * generally not a good idea.
 *
 *
 *
 * 3. The value does not measure time.
 *
 * On older architectures (pre-Pentium 4), there was no constant mapping
 * between rdtsc and CPU time.
 *
 *
 * 4. Instructions may be reordered.
 *
 * The CPU can reorder instructions. Also, rdtsc does not necessarily
 * wait until all previous instructions have finished executing before
 * reading the counter. Similarly, subsequent instructions may begin
 * execution before the read operation is performed. If you use rdtsc
 * for micro-benchmarking, you may end up measuring something else
 * than what you expect. See [1] for a study of countermeasures.
 *
 *
 * ** Performance
 *
 * According to unchecked sources on the web, the overhead of rdtsc is
 * expected to be 150-200 cycles on old architectures, 6-50 on newer
 * architectures. Agner's instruction tables [2] seem to confirm the latter
 * results.
 *
 *
 * [1]
 * http://www.intel.com/content/dam/www/public/us/en/documents/white-papers/ia-32-ia-64-benchmark-code-execution-paper.pdf
 * [2] http://www.agner.org/optimize/instruction_tables.pdf
 ','line_number':61,'multiline':True]['text':' namespace js','line_number':178,'multiline':False]['text':' vm_Time_h ','line_number':180,'multiline':True]