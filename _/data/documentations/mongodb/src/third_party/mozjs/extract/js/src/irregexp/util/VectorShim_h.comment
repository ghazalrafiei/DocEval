['text':' Copyright 2014 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]['text':' found in the LICENSE file.','line_number':3,'multiline':False]['text':'////////////////////////////////////////////////','line_number':20,'multiline':False]['text':' Adapted from:','line_number':22,'multiline':False]['text':' https://github.com/v8/v8/blob/5f69bbc233c2d1baf149faf869a7901603929914/src/utils/allocation.h#L36-L58','line_number':23,'multiline':False]['text':'////////////////////////////////////////////////','line_number':41,'multiline':False]['text':' A non-resizable vector containing a pointer and a length.','line_number':43,'multiline':False]['text':' The Vector may or may not own the pointer, depending on context.','line_number':44,'multiline':False]['text':' Origin:','line_number':45,'multiline':False]['text':' https://github.com/v8/v8/blob/5f69bbc233c2d1baf149faf869a7901603929914/src/utils/vector.h#L20-L134','line_number':46,'multiline':False]['text':' Returns a vector using the same backing storage as this one,','line_number':61,'multiline':False]['text':' spanning from and including 'from', to but not including 'to'.','line_number':62,'multiline':False]['text':' Returns the length of the vector. Only use this if you really need an','line_number':69,'multiline':False]['text':' integer return value. Use {size()} otherwise.','line_number':70,'multiline':False]['text':' Returns the length of the vector as a size_t.','line_number':76,'multiline':False]['text':' Returns whether or not the vector is empty.','line_number':79,'multiline':False]['text':' Access individual vector elements - checks bounds in debug mode.','line_number':82,'multiline':False]['text':' Returns a pointer to the start of the data in the vector.','line_number':97,'multiline':False]['text':' Returns a pointer past the end of the data in the vector.','line_number':100,'multiline':False]['text':' Returns a clone of this vector with a new backing store.','line_number':103,'multiline':False]['text':' Releases the array underlying this vector. Once disposed the','line_number':115,'multiline':False]['text':' vector is empty.','line_number':116,'multiline':False]['text':' Implicit conversion from Vector<T> to Vector<const T>.','line_number':135,'multiline':False]['text':' The resulting vector does not contain a null-termination byte. If you want','line_number':162,'multiline':False]['text':' the null byte, use ArrayVector("foo").','line_number':163,'multiline':False]['text':' namespace internal','line_number':168,'multiline':False]['text':' SmallVector uses inline storage first, and reallocates when full.','line_number':172,'multiline':False]['text':' It is basically equivalent to js::Vector, and is implemented','line_number':173,'multiline':False]['text':' as a thin wrapper.','line_number':174,'multiline':False]['text':' V8's implementation:','line_number':175,'multiline':False]['text':' https://github.com/v8/v8/blob/master/src/base/small-vector.h','line_number':176,'multiline':False]['text':' namespace base','line_number':211,'multiline':False]['text':' namespace v8','line_number':213,'multiline':False]['text':' V8_UTIL_VECTOR_H_','line_number':215,'multiline':False]