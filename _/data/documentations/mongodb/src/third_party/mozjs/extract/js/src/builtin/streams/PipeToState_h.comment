['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ReadableStream.prototype.pipeTo state. ','line_number':7,'multiline':True]['text':' MOZ_ASSERT','line_number':12,'multiline':False]['text':' mozilla::WrapToSigned','line_number':13,'multiline':False]['text':' uint32_t','line_number':15,'multiline':False]['text':' js::ReadableStreamDefaultReader','line_number':17,'multiline':False]['text':' js::WritableStreamDefaultWriter','line_number':18,'multiline':False]['text':' JSClass','line_number':19,'multiline':False]['text':' JS::Handle','line_number':20,'multiline':False]['text':' JS::Int32Value, JS::ObjectValue','line_number':21,'multiline':False]['text':' js::NativeObject','line_number':22,'multiline':False]['text':' js::PromiseObject','line_number':23,'multiline':False]['text':'*
 * PipeToState objects implement the local variables in Streams spec 3.4.11
 * ReadableStreamPipeTo across all sub-operations that occur in that algorithm.
 ','line_number':32,'multiline':True]['text':'*
   * Memory layout for PipeToState instances.
   ','line_number':38,'multiline':True]['text':'* Integer bit field of various flags. ','line_number':42,'multiline':True]['text':'*
     * The promise resolved or rejected when the overall pipe-to operation
     * completes.
     *
     * This promise is created directly under |ReadableStreamPipeTo|, at the
     * same time the corresponding |PipeToState| is created, so it is always
     * same-compartment with this and is guaranteed to hold a |PromiseObject*|
     * if initialization succeeded.
     ','line_number':45,'multiline':True]['text':'*
     * A |ReadableStreamDefaultReader| used to read from the readable stream
     * being piped from.
     *
     * This reader is created at the same time as its |PipeToState|, so this
     * reader is same-compartment with this and is guaranteed to be a
     * |ReadableStreamDefaultReader*| if initialization succeeds.
     ','line_number':56,'multiline':True]['text':'*
     * A |WritableStreamDefaultWriter| used to write to the writable stream
     * being piped to.
     *
     * This writer is created at the same time as its |PipeToState|, so this
     * writer is same-compartment with this and is guaranteed to be a
     * |WritableStreamDefaultWriter*| if initialization succeeds.
     ','line_number':66,'multiline':True]['text':'*
     * The |PromiseObject*| of the last write performed to the destinationg
     * |WritableStream| using the writer in |Slot_Writer|.  If no writes have
     * yet been performed, this slot contains |undefined|.
     *
     * This promise is created inside a handler function in the same compartment
     * and realm as this |PipeToState|, so it is always a |PromiseObject*| and
     * never a wrapper around one.
     ','line_number':76,'multiline':True]['text':'*
     * Either |undefined| or an |AbortSignal| instance specified by the user,
     * whose controller may be used to externally abort the piping algorithm.
     *
     * This signal is user-provided, so it may be a wrapper around an
     * |AbortSignal| not from the same compartment as this.
     ','line_number':87,'multiline':True]['text':' The set of possible actions to be passed to the "shutdown with an action"','line_number':99,'multiline':False]['text':' algorithm.','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' We store actions as numbers because 1) handler functions already devote','line_number':102,'multiline':False]['text':' their extra slots to target and extra value; and 2) storing a full function','line_number':103,'multiline':False]['text':' pointer would require an extra slot, while storing as number packs into','line_number':104,'multiline':False]['text':' existing flag storage.','line_number':105,'multiline':False]['text':'* The action used during |abortAlgorithm|.','line_number':107,'multiline':True]['text':'*
     * The action taken when |source| errors and aborting is not prevented, to
     * abort |dest| with |source|'s error.
     ','line_number':110,'multiline':True]['text':'*
     * The action taken when |dest| becomes errored or closed and canceling is
     * not prevented, to cancel |source| with |dest|'s error.
     ','line_number':116,'multiline':True]['text':'*
     * The action taken when |source| closes and closing is not prevented, to
     * close the writer while propagating any error in it.
     ','line_number':122,'multiline':True]['text':'*
     * The action passed to the "shutdown with an action" algorithm.
     *
     * Note that because only the first "shutdown" and "shutdown with an action"
     * operation has any effect, we can store this action in |PipeToState| in
     * the first invocation of either operation without worrying about it being
     * overwritten.
     *
     * Purely for convenience, we encode this in the lowest bits so that the
     * result of a mask is the underlying value of the correct |ShutdownAction|.
     ','line_number':132,'multiline':True]['text':' Flags start out zeroed, so the initially-stored shutdown action value will','line_number':162,'multiline':False]['text':' be this value.  (This is also the value of an *initialized* shutdown','line_number':163,'multiline':False]['text':' action, but it doesn't seem worth the trouble to store an extra bit to','line_number':164,'multiline':False]['text':' detect this specific action being recorded multiple times, purely for','line_number':165,'multiline':False]['text':' assertions.)','line_number':166,'multiline':False]['text':' namespace js','line_number':289,'multiline':False]['text':' builtin_streams_PipeToState_h','line_number':291,'multiline':False]