['text':' -*- Mode: javascript; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- ','line_number':1,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]['text':' This fuzzing target aims to stress the SpiderMonkey parser. However, for','line_number':6,'multiline':False]['text':' this purpose, it does *not* use `parse()` because some past bugs in the','line_number':7,'multiline':False]['text':' parser could only be triggered in the runtime later. Instead, we use','line_number':8,'multiline':False]['text':' the `evaluate` function which parses and runs the code. This brings in','line_number':9,'multiline':False]['text':' other problems like timeouts and permanent side-effects. We try to minimize','line_number':10,'multiline':False]['text':' the amount of permanent side-effects from running the code by running it','line_number':11,'multiline':False]['text':' in a fresh global for each iteration. We also use a special function','line_number':12,'multiline':False]['text':' called `sanitizeGlobal` to remove any harmful shell functions from the','line_number':13,'multiline':False]['text':' global prior to running. Many of these shell functions would otherwise','line_number':14,'multiline':False]['text':' have permanent side-effects of some sort or be disruptive to testing like','line_number':15,'multiline':False]['text':' increasing the amount of timeouts or leak memory. Finally, the target also','line_number':16,'multiline':False]['text':' tries to catch timeouts locally and signal back any timeouts by returning 1','line_number':17,'multiline':False]['text':' from the iteration function.','line_number':18,'multiline':False]['text':' This global will hold the current fuzzing buffer for each iteration.','line_number':20,'multiline':False]['text':' Set a default value for timeouts to 1 second, but allow this to','line_number':27,'multiline':False]['text':' be set on the command line as well using -e fuzzTimeout=VAL.','line_number':28,'multiline':False]['text':' Create a new global and sanitize it such that its potentially permanent','line_number':38,'multiline':False]['text':' side-effects are reduced to a minimum.','line_number':39,'multiline':False]['text':' Work around memory leaks when the hook is not set','line_number':43,'multiline':False]['text':' Start a timer and set a timeout in addition','line_number':51,'multiline':False]['text':' Reset some things that could have been altered by the code we ran','line_number':64,'multiline':False]['text':' If we either ended terminating the script, or we took longer than','line_number':70,'multiline':False]['text':' the timeout set (but timeout didn't kick in), then we return 1 to','line_number':71,'multiline':False]['text':' signal libFuzzer that the sample just be abandoned.','line_number':72,'multiline':False]