['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2001-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  unormcmp.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2004sep13
*   created by: Markus W. Scherer
*
*   unorm_compare() function moved here from unorm.cpp for better modularization.
*   Depends on both normalization and case folding.
*   Allows unorm.cpp to not depend on any character properties code.
','line_number':3,'multiline':True]['text':' compare canonically equivalent ------------------------------------------- ','line_number':37,'multiline':True]['text':'
 * Compare two strings for canonical equivalence.
 * Further options include case-insensitive comparison and
 * code point order (as opposed to code unit order).
 *
 * In this function, canonical equivalence is optional as well.
 * If canonical equivalence is tested, then both strings must fulfill
 * the FCD check.
 *
 * Semantically, this is equivalent to
 *   strcmp[CodePointOrder](NFD(foldCase(s1)), NFD(foldCase(s2)))
 * where code point order, NFD and foldCase are all optional.
 *
 * String comparisons almost always yield results before processing both strings
 * completely.
 * They are generally more efficient working incrementally instead of
 * performing the sub-processing (strlen, normalization, case-folding)
 * on the entire strings first.
 *
 * It is also unnecessary to not normalize identical characters.
 *
 * This function works in principle as follows:
 *
 * loop {
 *   get one code unit c1 from s1 (-1 if end of source)
 *   get one code unit c2 from s2 (-1 if end of source)
 *
 *   if(either string finished) {
 *     return result;
 *   }
 *   if(c1==c2) {
 *     continue;
 *   }
 *
 *   // c1!=c2
 *   try to decompose/case-fold c1/c2, and continue if one does;
 *
 *   // still c1!=c2 and neither decomposes/case-folds, return result
 *   return c1-c2;
 * }
 *
 * When a character decomposes, then the pointer for that source changes to
 * the decomposition, pushing the previous pointer onto a stack.
 * When the end of the decomposition is reached, then the code unit reader
 * pops the previous source from the stack.
 * (Same for case-folding.)
 *
 * This is complicated further by operating on variable-width UTF-16.
 * The top part of the loop works on code units, while lookups for decomposition
 * and case-folding need code points.
 * Code points are assembled after the equality/end-of-source part.
 * The source pointer is only advanced beyond all code units when the code point
 * actually decomposes/case-folds.
 *
 * If we were on a trail surrogate unit when assembling a code point,
 * and the code point decomposes/case-folds, then the decomposition/folding
 * result must be compared with the part of the other string that corresponds to
 * this string's lead surrogate.
 * Since we only assemble a code point when hitting a trail unit when the
 * preceding lead units were identical, we back up the other string by one unit
 * in such a case.
 *
 * The optional code point order comparison at the end works with
 * the same fix-up as the other code point order comparison functions.
 * See ustring.c and the comment near the end of this function.
 *
 * Assumption: A decomposition or case-folding result string never contains
 * a single surrogate. This is a safe assumption in the Unicode Standard.
 * Therefore, we do not need to check for surrogate pairs across
 * decomposition/case-folding boundaries.
 *
 * Further assumptions (see verifications tstnorm.cpp):
 * The API function checks for FCD first, while the core function
 * first case-folds and then decomposes. This requires that case-folding does not
 * un-FCD any strings.
 *
 * The API function may also NFD the input and turn off decomposition.
 * This requires that case-folding does not un-NFD strings either.
 *
 * TODO If any of the above two assumptions is violated,
 * then this entire code must be re-thought.
 * If this happens, then a simple solution is to case-fold both strings up front
 * and to turn off UNORM_INPUT_IS_FCD.
 * We already do this when not both strings are in FCD because makeFCD
 * would be a partial NFD before the case folding, which does not work.
 * Note that all of this is only a problem when case-folding _and_
 * canonical equivalence come together.
 * (Comments in unorm_compare() are more up to date than this TODO.)
 ','line_number':39,'multiline':True]['text':' stack element for previous-level source/decomposition pointers ','line_number':129,'multiline':True]['text':'*
 * Internal option for unorm_cmpEquivFold() for decomposing.
 * If not set, just do strcasecmp().
 ','line_number':135,'multiline':True]['text':' internal function ','line_number':141,'multiline':True]['text':' current-level start/limit - s1/s2 as current ','line_number':149,'multiline':True]['text':' decomposition and case folding variables ','line_number':152,'multiline':True]['text':' stacks of previous-level start/current/limit ','line_number':156,'multiline':True]['text':' buffers for algorithmic decompositions ','line_number':159,'multiline':True]['text':' case folding buffers, only use current-level start/limit ','line_number':162,'multiline':True]['text':' track which is the current level per string ','line_number':165,'multiline':True]['text':' current code units, and code points for lookups ','line_number':168,'multiline':True]['text':' no argument error checking because this itself is not an API ','line_number':171,'multiline':True]['text':'
     * assume that at least one of the options _COMPARE_EQUIV and U_COMPARE_IGNORE_CASE is set
     * otherwise this function must behave exactly as uprv_strCompare()
     * not checking for that here makes testing this function easier
     ','line_number':173,'multiline':True]['text':' normalization/properties data loaded? ','line_number':179,'multiline':True]['text':' initialize ','line_number':189,'multiline':True]['text':' comparison loop ','line_number':207,'multiline':True]['text':'
         * here a code unit value of -1 means "get another code unit"
         * below it will mean "this source is finished"
         ','line_number':209,'multiline':True]['text':' get next code unit from string 1, post-increment ','line_number':215,'multiline':True]['text':' reached end of level buffer, pop one level ','line_number':227,'multiline':True]['text':'Not uninitialized','line_number':230,'multiline':True]['text':'Not uninitialized','line_number':232,'multiline':True]['text':'Not uninitialized','line_number':233,'multiline':True]['text':' get next code unit from string 2, post-increment ','line_number':238,'multiline':True]['text':' reached end of level buffer, pop one level ','line_number':250,'multiline':True]['text':'Not uninitialized','line_number':253,'multiline':True]['text':'Not uninitialized','line_number':255,'multiline':True]['text':'Not uninitialized','line_number':256,'multiline':True]['text':'
         * compare c1 and c2
         * either variable c1, c2 is -1 only if the corresponding string is finished
         ','line_number':260,'multiline':True]['text':' c1==c2==-1 indicating end of strings ','line_number':266,'multiline':True]['text':' make us fetch new code units ','line_number':268,'multiline':True]['text':' string 1 ends before string 2 ','line_number':271,'multiline':True]['text':' string 2 ends before string 1 ','line_number':273,'multiline':True]['text':' c1!=c2 && c1>=0 && c2>=0 ','line_number':275,'multiline':True]['text':' get complete code points for c1, c2 for lookups if either is a surrogate ','line_number':277,'multiline':True]['text':' advance ++s1; only below if cp1 decomposes/case-folds ','line_number':284,'multiline':True]['text':' isTrail(c1) ','line_number':287,'multiline':True]['text':' advance ++s2; only below if cp2 decomposes/case-folds ','line_number':300,'multiline':True]['text':' isTrail(c2) ','line_number':303,'multiline':True]['text':'
         * go down one level for each string
         * continue with the main loop as soon as there is a real change
         ','line_number':310,'multiline':True]['text':' cp1 case-folds to the code point "length" or to p[length] ','line_number':318,'multiline':True]['text':' advance beyond source surrogate pair if it case-folds ','line_number':321,'multiline':True]['text':' isTrail(c1) ','line_number':323,'multiline':True]['text':'
                     * we got a supplementary code point when hitting its trail surrogate,
                     * therefore the lead surrogate must have been the same as in the other string;
                     * compare this decomposition with the lead surrogate in the other string
                     * remember that this simulates bulk text replacement:
                     * the decomposition would replace the entire code point
                     ','line_number':324,'multiline':True]['text':' push current level pointers ','line_number':336,'multiline':True]['text':' copy the folding result to fold1[] ','line_number':342,'multiline':True]['text':' set next level pointers to case folding ','line_number':351,'multiline':True]['text':' get ready to read from decomposition, continue with loop ','line_number':355,'multiline':True]['text':' cp2 case-folds to the code point "length" or to p[length] ','line_number':363,'multiline':True]['text':' advance beyond source surrogate pair if it case-folds ','line_number':366,'multiline':True]['text':' isTrail(c2) ','line_number':368,'multiline':True]['text':'
                     * we got a supplementary code point when hitting its trail surrogate,
                     * therefore the lead surrogate must have been the same as in the other string;
                     * compare this decomposition with the lead surrogate in the other string
                     * remember that this simulates bulk text replacement:
                     * the decomposition would replace the entire code point
                     ','line_number':369,'multiline':True]['text':' push current level pointers ','line_number':381,'multiline':True]['text':' copy the folding result to fold2[] ','line_number':387,'multiline':True]['text':' set next level pointers to case folding ','line_number':396,'multiline':True]['text':' get ready to read from decomposition, continue with loop ','line_number':400,'multiline':True]['text':' cp1 decomposes into p[length] ','line_number':408,'multiline':True]['text':' advance beyond source surrogate pair if it decomposes ','line_number':411,'multiline':True]['text':' isTrail(c1) ','line_number':413,'multiline':True]['text':'
                     * we got a supplementary code point when hitting its trail surrogate,
                     * therefore the lead surrogate must have been the same as in the other string;
                     * compare this decomposition with the lead surrogate in the other string
                     * remember that this simulates bulk text replacement:
                     * the decomposition would replace the entire code point
                     ','line_number':414,'multiline':True]['text':' push current level pointers ','line_number':426,'multiline':True]['text':' set empty intermediate level if skipped ','line_number':432,'multiline':True]['text':' set next level pointers to decomposition ','line_number':437,'multiline':True]['text':' get ready to read from decomposition, continue with loop ','line_number':441,'multiline':True]['text':' cp2 decomposes into p[length] ','line_number':449,'multiline':True]['text':' advance beyond source surrogate pair if it decomposes ','line_number':452,'multiline':True]['text':' isTrail(c2) ','line_number':454,'multiline':True]['text':'
                     * we got a supplementary code point when hitting its trail surrogate,
                     * therefore the lead surrogate must have been the same as in the other string;
                     * compare this decomposition with the lead surrogate in the other string
                     * remember that this simulates bulk text replacement:
                     * the decomposition would replace the entire code point
                     ','line_number':455,'multiline':True]['text':' push current level pointers ','line_number':467,'multiline':True]['text':' set empty intermediate level if skipped ','line_number':473,'multiline':True]['text':' set next level pointers to decomposition ','line_number':478,'multiline':True]['text':' get ready to read from decomposition, continue with loop ','line_number':482,'multiline':True]['text':'
         * no decomposition/case folding, max level for both sides:
         * return difference result
         *
         * code point order comparison must not just return cp1-cp2
         * because when single surrogates are present then the surrogate pairs
         * that formed cp1 and cp2 may be from different string indexes
         *
         * example: { d800 d800 dc01 } vs. { d800 dc00 }, compare at second code units
         * c1=d800 cp1=10001 c2=dc00 cp2=10000
         * cp1-cp2>0 but c1-c2<0 and in fact in UTF-32 it is { d800 10001 } < { 10000 }
         *
         * therefore, use same fix-up as in ustring.c/uprv_strCompare()
         * except: uprv_strCompare() fetches c=*s while this functions fetches c=*s++
         * so we have slightly different pointer/start/limit comparisons here
         ','line_number':487,'multiline':True]['text':' subtract 0x2800 from BMP code points to make them smaller than supplementary ones ','line_number':505,'multiline':True]['text':' part of a surrogate pair, leave >=d800 ','line_number':510,'multiline':True]['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':512,'multiline':True]['text':' part of a surrogate pair, leave >=d800 ','line_number':520,'multiline':True]['text':' BMP code point - may be surrogate code point - make <d800 ','line_number':522,'multiline':True]['text':' check if s fulfill the conditions','line_number':536,'multiline':False]['text':'
     * ICU 2.4 had a further optimization:
     * If both strings were not in FCD, then they were both NFD'ed,
     * and the _COMPARE_EQUIV option was turned off.
     * It is not entirely clear that this is valid with the current
     * definition of the canonical caseless match.
     * Therefore, ICU 2.6 removes that optimization.
     ','line_number':541,'multiline':True]['text':' argument checking ','line_number':565,'multiline':True]['text':'
     * UAX #21 Case Mappings, as fixed for Unicode version 4
     * (see Jitterbug 2021), defines a canonical caseless match as
     *
     * A string X is a canonical caseless match
     * for a string Y if and only if
     * NFD(toCasefold(NFD(X))) = NFD(toCasefold(NFD(Y)))
     *
     * For better performance, we check for FCD (or let the caller tell us that
     * both strings are in FCD) for the inner normalization.
     * BasicNormalizerTest::FindFoldFCDExceptions() makes sure that
     * case-folding preserves the FCD-ness of a string.
     * The outer normalization is then only performed by unorm_cmpEquivFold()
     * when there is a difference.
     *
     * Exception: When using the Turkic case-folding option, we do perform
     * full NFD first. This is because in the Turkic case precomposed characters
     * with 0049 capital I or 0069 small i fold differently whether they
     * are first decomposed or not, so an FCD check - a check only for
     * canonical order - is not sufficient.
     ','line_number':578,'multiline':True]['text':' #if !UCONFIG_NO_NORMALIZATION ','line_number':640,'multiline':True]