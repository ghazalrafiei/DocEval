['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' We don't need the operands to be valid to test for equality.','line_number':62,'multiline':False]['text':' We don't need the operands to be valid to test for equality.','line_number':66,'multiline':False]['text':' do the two registers hold the same type of data (e.g. both float32, both','line_number':102,'multiline':False]['text':' gpr)','line_number':103,'multiline':False]['text':' Registers to hold a boxed value. Uses one register on 64 bit','line_number':116,'multiline':False]['text':' platforms, two registers on 32 bit platforms.','line_number':117,'multiline':False]['text':' Registers to hold either either a typed or untyped value.','line_number':170,'multiline':False]['text':' Type of value being stored.','line_number':172,'multiline':False]['text':' A constant value, or registers to hold a typed/untyped value.','line_number':241,'multiline':False]['text':' Whether a constant value is being stored.','line_number':243,'multiline':False]['text':' Space to hold either a Value or a TypedOrValueRegister.','line_number':246,'multiline':False]['text':' |constant| has a non-trivial constructor and therefore MUST be','line_number':251,'multiline':False]['text':' placement-new'd into existence.','line_number':252,'multiline':False]['text':' [SMDOC] JIT Register-Set overview','line_number':437,'multiline':False]['text':'','line_number':438,'multiline':False]['text':' There are 2 use cases for register sets:','line_number':439,'multiline':False]['text':'','line_number':440,'multiline':False]['text':'   1. To serve as a pool of allocatable register. This is useful for working','line_number':441,'multiline':False]['text':'      on the code produced by some stub where free registers are available, or','line_number':442,'multiline':False]['text':'      when we can release some registers.','line_number':443,'multiline':False]['text':'','line_number':444,'multiline':False]['text':'   2. To serve as a list of typed registers. This is useful for working with','line_number':445,'multiline':False]['text':'      live registers and to manipulate them with the proper instructions. This','line_number':446,'multiline':False]['text':'      is used by the register allocator to fill the Safepoints.','line_number':447,'multiline':False]['text':'','line_number':448,'multiline':False]['text':' These 2 uses cases can be used on top of 3 different backend representation','line_number':449,'multiline':False]['text':' of register sets, which are either GeneralRegisterSet, FloatRegisterSet, or','line_number':450,'multiline':False]['text':' RegisterSet (for both). These classes are used to store the bit sets to','line_number':451,'multiline':False]['text':' represent each register.','line_number':452,'multiline':False]['text':'','line_number':453,'multiline':False]['text':' Each use case defines an Accessor class, such as AllocatableSetAccessor or','line_number':454,'multiline':False]['text':' LiveSetAccessor, which is parameterized with the type of the register','line_number':455,'multiline':False]['text':' set. These accessors are in charge of manipulating the register set in a','line_number':456,'multiline':False]['text':' consistent way.','line_number':457,'multiline':False]['text':'','line_number':458,'multiline':False]['text':' The RegSetCommonInterface class is used to wrap the accessors with convenient','line_number':459,'multiline':False]['text':' shortcuts which are based on the accessors.','line_number':460,'multiline':False]['text':'','line_number':461,'multiline':False]['text':' Then, to avoid to many levels of complexity while using these interfaces,','line_number':462,'multiline':False]['text':' shortcut templates are created to make it easy to distinguish between a','line_number':463,'multiline':False]['text':' register set used for allocating registers, or a register set used for making','line_number':464,'multiline':False]['text':' a collection of allocated (live) registers.','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':' This separation exists to prevent mixing LiveSet and AllocatableSet','line_number':467,'multiline':False]['text':' manipulations of the same register set, and ensure safety while avoiding','line_number':468,'multiline':False]['text':' false positive.','line_number':469,'multiline':False]['text':' [SMDOC] JIT Register-Set (Allocatable)','line_number':477,'multiline':False]['text':'','line_number':478,'multiline':False]['text':' Base accessors classes have the minimal set of raw methods to manipulate the','line_number':479,'multiline':False]['text':' register set given as parameter in a consistent manner.  These methods are:','line_number':480,'multiline':False]['text':'','line_number':481,'multiline':False]['text':'    - all<Type>: Returns a bit-set of all the register of a specific type','line_number':482,'multiline':False]['text':'      which are present.','line_number':483,'multiline':False]['text':'','line_number':484,'multiline':False]['text':'    - has: Returns if all the bits needed to take a register are present.','line_number':485,'multiline':False]['text':'','line_number':486,'multiline':False]['text':'    - takeUnchecked: Subtracts the bits used to represent the register in the','line_number':487,'multiline':False]['text':'      register set.','line_number':488,'multiline':False]['text':'','line_number':489,'multiline':False]['text':'    - addUnchecked: Adds the bits used to represent the register in the','line_number':490,'multiline':False]['text':'      register set.','line_number':491,'multiline':False]['text':' The AllocatableSet accessors are used to make a pool of unused','line_number':493,'multiline':False]['text':' registers. Taking or adding registers should consider the aliasing rules of','line_number':494,'multiline':False]['text':' the architecture.  For example, on ARM, the following piece of code should','line_number':495,'multiline':False]['text':' work fine, knowing that the double register |d0| is composed of float','line_number':496,'multiline':False]['text':' registers |s0| and |s1|:','line_number':497,'multiline':False]['text':'','line_number':498,'multiline':False]['text':'     AllocatableFloatRegisterSet regs;','line_number':499,'multiline':False]['text':'     regs.add(s0);','line_number':500,'multiline':False]['text':'     regs.add(s1);','line_number':501,'multiline':False]['text':'     // d0 is now available.','line_number':502,'multiline':False]['text':'     regs.take(d0);','line_number':503,'multiline':False]['text':'','line_number':504,'multiline':False]['text':' These accessors are useful for allocating registers within the functions used','line_number':505,'multiline':False]['text':' to generate stubs, trampolines, and inline caches (BaselineIC, IonCache).','line_number':506,'multiline':False]['text':' Specialization of the AllocatableSet accessors for the RegisterSet aggregate.','line_number':539,'multiline':False]['text':' [SMDOC] JIT Register-Set (Live)','line_number':574,'multiline':False]['text':'','line_number':575,'multiline':False]['text':' The LiveSet accessors are used to collect a list of allocated','line_number':576,'multiline':False]['text':' registers. Taking or adding a register should *not* consider the aliases, as','line_number':577,'multiline':False]['text':' we care about interpreting the registers with the correct type.  For example,','line_number':578,'multiline':False]['text':' on x64, where one float registers can be interpreted as an Simd128, a Double,','line_number':579,'multiline':False]['text':' or a Float, adding xmm0 as an Simd128, does not make the register available','line_number':580,'multiline':False]['text':' as a Double.','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':'     LiveFloatRegisterSet regs;','line_number':583,'multiline':False]['text':'     regs.add(xmm0.asSimd128());','line_number':584,'multiline':False]['text':'     regs.take(xmm0); // Assert!','line_number':585,'multiline':False]['text':'','line_number':586,'multiline':False]['text':' These accessors are useful for recording the result of a register allocator,','line_number':587,'multiline':False]['text':' such as what the Backtracking allocator do on the Safepoints.','line_number':588,'multiline':False]['text':' Specialization of the LiveSet accessors for the RegisterSet aggregate.','line_number':616,'multiline':False]['text':' This class adds checked accessors on top of the unchecked variants defined by','line_number':662,'multiline':False]['text':' AllocatableSet and LiveSet accessors. Also it defines interface which are','line_number':663,'multiline':False]['text':' specialized to the register set implementation, such as |getAny| and','line_number':664,'multiline':False]['text':' |takeAny| variants.','line_number':665,'multiline':False]['text':' The choice of first or last here is mostly arbitrary, as they are','line_number':708,'multiline':False]['text':' about the same speed on popular architectures. We choose first, as','line_number':709,'multiline':False]['text':' it has the advantage of using the "lower" registers more often. These','line_number':710,'multiline':False]['text':' registers are sometimes more efficient (e.g. optimized encodings for','line_number':711,'multiline':False]['text':' EAX on x86).','line_number':712,'multiline':False]['text':' Specialization of the accessors for the RegisterSet aggregate.','line_number':774,'multiline':False]['text':' Interface which is common to all register set implementations. It overloads','line_number':891,'multiline':False]['text':' |add|, |take| and |takeUnchecked| methods for types such as |ValueOperand|,','line_number':892,'multiline':False]['text':' |TypedOrValueRegister|, and |Register64|.','line_number':893,'multiline':False]['text':' These classes do not provide any additional members, they only use their','line_number':1010,'multiline':False]['text':' constructors to forward to the common interface for all register sets.  The','line_number':1011,'multiline':False]['text':' only benefit of these classes is to provide user friendly names.','line_number':1012,'multiline':False]['text':' Note: We have to provide a qualified name for LiveSetAccessors, as it is','line_number':1047,'multiline':False]['text':' interpreted as being the specialized class name inherited from the parent','line_number':1048,'multiline':False]['text':' class specialization.','line_number':1049,'multiline':False]['text':' Note: We have to provide a qualified name for AllocatableSetAccessors, as','line_number':1059,'multiline':False]['text':' it is interpreted as being the specialized class name inherited from the','line_number':1060,'multiline':False]['text':' parent class specialization.','line_number':1061,'multiline':False]['text':' iterates in whatever order happens to be convenient.','line_number':1084,'multiline':False]['text':' Use TypedRegisterBackwardIterator or TypedRegisterForwardIterator if a','line_number':1085,'multiline':False]['text':' specific order is required.','line_number':1086,'multiline':False]['text':' iterates backwards, that is, rn to r0','line_number':1107,'multiline':False]['text':' iterates forwards, that is r0 to rn','line_number':1128,'multiline':False]['text':' Get the set of registers which should be saved by a block of code which','line_number':1294,'multiline':False]['text':' clobbers all registers besides |unused|, but does not clobber floating point','line_number':1295,'multiline':False]['text':' registers.','line_number':1296,'multiline':False]['text':' Some platforms require the link register to be saved, if calls can be made.','line_number':1309,'multiline':False]['text':' namespace jit','line_number':1321,'multiline':False]['text':' namespace js','line_number':1322,'multiline':False]['text':' jit_RegisterSets_h ','line_number':1324,'multiline':True]