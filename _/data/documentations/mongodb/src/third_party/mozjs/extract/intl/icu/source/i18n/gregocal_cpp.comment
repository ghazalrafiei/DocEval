['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 1997-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File GREGOCAL.CPP
*
* Modification History:
*
*   Date        Name        Description
*   02/05/97    clhuang     Creation.
*   03/28/97    aliu        Made highly questionable fix to computeFields to
*                           handle DST correctly.
*   04/22/97    aliu        Cleaned up code drastically.  Added monthLength().
*                           Finished unimplemented parts of computeTime() for
*                           week-based date determination.  Removed quetionable
*                           fix and wrote correct fix for computeFields() and
*                           daylight time handling.  Rewrote inDaylightTime()
*                           and computeFields() to handle sensitive Daylight to
*                           Standard time transitions correctly.
*   05/08/97    aliu        Added code review changes.  Fixed isLeapYear() to
*                           not cutover.
*   08/12/97    aliu        Added equivalentTo.  Misc other fixes.  Updated
*                           add() from Java source.
*    07/28/98    stephen        Sync up with JDK 1.2
*    09/14/98    stephen        Changed type of kOneDay, kOneWeek to double.
*                            Fixed bug in roll() 
*   10/15/99    aliu        Fixed j31, incorrect WEEK_OF_YEAR computation.
*   10/15/99    aliu        Fixed j32, cannot set date to Feb 29 2000 AD.
*                           {JDK bug 4210209 4209272}
*   11/15/99    weiv        Added YEAR_WOY and DOW_LOCAL computation
*                           to timeToFields method, updated kMinValues, kMaxValues & kLeastMaxValues
*   12/09/99    aliu        Fixed j81, calculation errors and roll bugs
*                           in year of cutover.
*   01/24/2000  aliu        Revised computeJulianDay for YEAR YEAR_WOY WOY.
********************************************************************************
','line_number':3,'multiline':True]['text':' *****************************************************************************','line_number':52,'multiline':False]['text':' class GregorianCalendar','line_number':53,'multiline':False]['text':' *****************************************************************************','line_number':54,'multiline':False]['text':'*
* Note that the Julian date used here is not a true Julian date, since
* it is measured from midnight, not noon.  This value is the Julian
* day number of January 1, 1970 (Gregorian calendar) at noon UTC. [LIU]
','line_number':56,'multiline':True]['text':' 0-based, for day-in-year','line_number':63,'multiline':False]['text':' 0-based, for day-in-year','line_number':65,'multiline':False]['text':' 0-based','line_number':67,'multiline':False]['text':' 0-based','line_number':69,'multiline':False]['text':' setTimeInMillis() limits the Julian day range to +/-7F000000.','line_number':71,'multiline':False]['text':' This would seem to limit the year range to:','line_number':72,'multiline':False]['text':'  ms=+183882168921600000  jd=7f000000  December 20, 5828963 AD','line_number':73,'multiline':False]['text':'  ms=-184303902528000000  jd=81000000  September 20, 5838270 BC','line_number':74,'multiline':False]['text':' HOWEVER, CalendarRegressionTest/Test4167060 shows that the actual','line_number':75,'multiline':False]['text':' range limit on the year field is smaller (~ +/-140000). [alan 3.0]','line_number':76,'multiline':False]['text':' Minimum  Greatest    Least  Maximum','line_number':79,'multiline':False]['text':'           Minimum  Maximum','line_number':80,'multiline':False]['text':' ERA','line_number':81,'multiline':False]['text':' YEAR','line_number':82,'multiline':False]['text':' MONTH','line_number':83,'multiline':False]['text':' WEEK_OF_YEAR','line_number':84,'multiline':False]['text':'N/A','line_number':85,'multiline':True]['text':'N/A','line_number':85,'multiline':True]['text':'N/A','line_number':85,'multiline':True]['text':'N/A','line_number':85,'multiline':True]['text':' WEEK_OF_MONTH','line_number':85,'multiline':False]['text':' DAY_OF_MONTH','line_number':86,'multiline':False]['text':' DAY_OF_YEAR','line_number':87,'multiline':False]['text':'N/A','line_number':88,'multiline':True]['text':'N/A','line_number':88,'multiline':True]['text':'N/A','line_number':88,'multiline':True]['text':'N/A','line_number':88,'multiline':True]['text':' DAY_OF_WEEK','line_number':88,'multiline':False]['text':' DAY_OF_WEEK_IN_MONTH','line_number':89,'multiline':False]['text':'N/A','line_number':90,'multiline':True]['text':'N/A','line_number':90,'multiline':True]['text':'N/A','line_number':90,'multiline':True]['text':'N/A','line_number':90,'multiline':True]['text':' AM_PM','line_number':90,'multiline':False]['text':'N/A','line_number':91,'multiline':True]['text':'N/A','line_number':91,'multiline':True]['text':'N/A','line_number':91,'multiline':True]['text':'N/A','line_number':91,'multiline':True]['text':' HOUR','line_number':91,'multiline':False]['text':'N/A','line_number':92,'multiline':True]['text':'N/A','line_number':92,'multiline':True]['text':'N/A','line_number':92,'multiline':True]['text':'N/A','line_number':92,'multiline':True]['text':' HOUR_OF_DAY','line_number':92,'multiline':False]['text':'N/A','line_number':93,'multiline':True]['text':'N/A','line_number':93,'multiline':True]['text':'N/A','line_number':93,'multiline':True]['text':'N/A','line_number':93,'multiline':True]['text':' MINUTE','line_number':93,'multiline':False]['text':'N/A','line_number':94,'multiline':True]['text':'N/A','line_number':94,'multiline':True]['text':'N/A','line_number':94,'multiline':True]['text':'N/A','line_number':94,'multiline':True]['text':' SECOND','line_number':94,'multiline':False]['text':'N/A','line_number':95,'multiline':True]['text':'N/A','line_number':95,'multiline':True]['text':'N/A','line_number':95,'multiline':True]['text':'N/A','line_number':95,'multiline':True]['text':' MILLISECOND','line_number':95,'multiline':False]['text':'N/A','line_number':96,'multiline':True]['text':'N/A','line_number':96,'multiline':True]['text':'N/A','line_number':96,'multiline':True]['text':'N/A','line_number':96,'multiline':True]['text':' ZONE_OFFSET','line_number':96,'multiline':False]['text':'N/A','line_number':97,'multiline':True]['text':'N/A','line_number':97,'multiline':True]['text':'N/A','line_number':97,'multiline':True]['text':'N/A','line_number':97,'multiline':True]['text':' DST_OFFSET','line_number':97,'multiline':False]['text':' YEAR_WOY','line_number':98,'multiline':False]['text':'N/A','line_number':99,'multiline':True]['text':'N/A','line_number':99,'multiline':True]['text':'N/A','line_number':99,'multiline':True]['text':'N/A','line_number':99,'multiline':True]['text':' DOW_LOCAL','line_number':99,'multiline':False]['text':' EXTENDED_YEAR','line_number':100,'multiline':False]['text':'N/A','line_number':101,'multiline':True]['text':'N/A','line_number':101,'multiline':True]['text':'N/A','line_number':101,'multiline':True]['text':'N/A','line_number':101,'multiline':True]['text':' JULIAN_DAY','line_number':101,'multiline':False]['text':'N/A','line_number':102,'multiline':True]['text':'N/A','line_number':102,'multiline':True]['text':'N/A','line_number':102,'multiline':True]['text':'N/A','line_number':102,'multiline':True]['text':' MILLISECONDS_IN_DAY','line_number':102,'multiline':False]['text':'N/A','line_number':103,'multiline':True]['text':'N/A','line_number':103,'multiline':True]['text':'N/A','line_number':103,'multiline':True]['text':'N/A','line_number':103,'multiline':True]['text':' IS_LEAP_MONTH','line_number':103,'multiline':False]['text':'
* <pre>
*                            Greatest       Least 
* Field name        Minimum   Minimum     Maximum     Maximum
* ----------        -------   -------     -------     -------
* ERA                     0         0           1           1
* YEAR                    1         1      140742      144683
* MONTH                   0         0          11          11
* WEEK_OF_YEAR            1         1          52          53
* WEEK_OF_MONTH           0         0           4           6
* DAY_OF_MONTH            1         1          28          31
* DAY_OF_YEAR             1         1         365         366
* DAY_OF_WEEK             1         1           7           7
* DAY_OF_WEEK_IN_MONTH   -1        -1           4           5
* AM_PM                   0         0           1           1
* HOUR                    0         0          11          11
* HOUR_OF_DAY             0         0          23          23
* MINUTE                  0         0          59          59
* SECOND                  0         0          59          59
* MILLISECOND             0         0         999         999
* ZONE_OFFSET           -12*      -12*         12*         12*
* DST_OFFSET              0         0           1*          1*
* YEAR_WOY                1         1      140742      144683
* DOW_LOCAL               1         1           7           7
* </pre>
* (*) In units of one-hour
','line_number':106,'multiline':True]['text':' 00:00:00 UTC, October 15, 1582, expressed in ms from the epoch.','line_number':142,'multiline':False]['text':' Note that only Italy and other Catholic countries actually','line_number':143,'multiline':False]['text':' observed this cutover.  Most other countries followed in','line_number':144,'multiline':False]['text':' the next few centuries, some as late as 1928. [LIU]','line_number':145,'multiline':False]['text':' in Java, -12219292800000L','line_number':146,'multiline':False]['text':'const UDate GregorianCalendar::kPapalCutover = -12219292800000L;','line_number':147,'multiline':False]['text':'static const UDate kPapalCutoverJulian = (2299161.0 - kEpochStartAsJulianDay);','line_number':150,'multiline':False]['text':' -------------------------------------','line_number':152,'multiline':False]['text':' -------------------------------------','line_number':163,'multiline':False]['text':' -------------------------------------','line_number':174,'multiline':False]['text':' -------------------------------------','line_number':185,'multiline':False]['text':' -------------------------------------','line_number':196,'multiline':False]['text':' -------------------------------------','line_number':208,'multiline':False]['text':' -------------------------------------','line_number':220,'multiline':False]['text':' -------------------------------------','line_number':235,'multiline':False]['text':' -------------------------------------','line_number':252,'multiline':False]['text':' -------------------------------------','line_number':271,'multiline':False]['text':' -------------------------------------','line_number':277,'multiline':False]['text':' -------------------------------------','line_number':287,'multiline':False]['text':' -------------------------------------','line_number':294,'multiline':False]['text':' -------------------------------------','line_number':310,'multiline':False]['text':' Calendar override.','line_number':314,'multiline':False]['text':' -------------------------------------','line_number':319,'multiline':False]['text':' Precompute two internal variables which we use to do the actual','line_number':327,'multiline':False]['text':' cutover computations.  These are the normalized cutover, which is the','line_number':328,'multiline':False]['text':' midnight at or before the cutover, and the cutover year.  The','line_number':329,'multiline':False]['text':' normalized cutover is in pure date milliseconds; it contains no time','line_number':330,'multiline':False]['text':' of day or timezone component, and it used to compare against other','line_number':331,'multiline':False]['text':' pure date values.','line_number':332,'multiline':False]['text':' Handle the rare case of numeric overflow where the user specifies a time','line_number':335,'multiline':False]['text':' outside of INT32_MIN .. INT32_MAX number of days.','line_number':336,'multiline':False]['text':' Normalize the year so BC values are represented as 0 and negative','line_number':349,'multiline':False]['text':' values.','line_number':350,'multiline':False]['text':' test for NULL ','line_number':352,'multiline':True]['text':' The Julian epoch day (not the same as Julian Day)','line_number':388,'multiline':False]['text':' is zero on Saturday December 30, 0 (Gregorian).','line_number':389,'multiline':False]['text':' Compute the Julian calendar day number for January 1, eyear','line_number':393,'multiline':False]['text':' 0-based','line_number':395,'multiline':False]['text':' Julian leap years occurred historically every 4 years starting','line_number':397,'multiline':False]['text':' with 8 AD.  Before 8 AD the spacing is irregular; every 3 years','line_number':398,'multiline':False]['text':' from 45 BC to 9 BC, and then none until 8 AD.  However, we don't','line_number':399,'multiline':False]['text':' implement this historical detail; instead, we implement the','line_number':400,'multiline':False]['text':' computationally cleaner proleptic calendar, which assumes','line_number':401,'multiline':False]['text':' consistent 4-year cycles throughout time.','line_number':402,'multiline':False]['text':' equiv. to (eyear%4 == 0)','line_number':403,'multiline':False]['text':' Common Julian/Gregorian calculation','line_number':405,'multiline':False]['text':' zero-based DOY for March 1','line_number':407,'multiline':False]['text':' zero-based month','line_number':411,'multiline':False]['text':' one-based DOM','line_number':412,'multiline':False]['text':'     fprintf(stderr, "%d - %d[%d] + 1\n", dayOfYear, isLeap?kLeapNumDays[month]:kNumDays[month], month );','line_number':415,'multiline':False]['text':'           fprintf(stderr, "%s:%d:  greg's HCF %d -> %d/%d/%d not %d/%d/%d\n", ','line_number':416,'multiline':False]['text':'                   __FILE__, __LINE__,julianDay,','line_number':417,'multiline':False]['text':'          eyear,month,dayOfMonth,','line_number':418,'multiline':False]['text':'          getGregorianYear(), getGregorianMonth(), getGregorianDayOfMonth()  );','line_number':419,'multiline':False]['text':' [j81] if we are after the cutover in its year, shift the day of the year','line_number':426,'multiline':False]['text':'from handleComputeMonthStart','line_number':428,'multiline':False]['text':' -------------------------------------','line_number':451,'multiline':False]['text':' -------------------------------------','line_number':459,'multiline':False]['text':' MSVC complains bitterly if we try to use Grego::isLeapYear here','line_number':464,'multiline':False]['text':' NOTE: year&0x3 == year%4','line_number':465,'multiline':False]['text':' Gregorian','line_number':467,'multiline':False]['text':' Julian','line_number':468,'multiline':False]['text':' -------------------------------------','line_number':471,'multiline':False]['text':' if we are doing WOY calculations, we are counting relative to Jan 1 *julian*','line_number':479,'multiline':False]['text':' So that the Julian Jan 1 will be used in handleComputeMonthStart','line_number':482,'multiline':False]['text':' The following check handles portions of the cutover year BEFORE the','line_number':487,'multiline':False]['text':' cutover itself happens.','line_number':488,'multiline':False]['text':'if ((fIsGregorian==TRUE) != (jd >= fCutoverJulianDay)) {  /*  cutoverJulianDay)) { */','line_number':489,'multiline':False]['text':'  cutoverJulianDay)) { ','line_number':490,'multiline':True]['text':' shift by weeks for week based fields.','line_number':524,'multiline':False]['text':' useMonth ','line_number':533,'multiline':True]['text':' cast away const','line_number':535,'multiline':False]['text':' If the month is out of range, adjust it into range, and','line_number':537,'multiline':False]['text':' modify the extended year value accordingly.','line_number':538,'multiline':False]['text':' Add 2 because Gregorian calendar starts 2 days after','line_number':557,'multiline':False]['text':' Julian calendar','line_number':558,'multiline':False]['text':' At this point julianDay indicates the day BEFORE the first','line_number':567,'multiline':False]['text':' day of January 1, <eyear> of either the Julian or Gregorian','line_number':568,'multiline':False]['text':' calendar.','line_number':569,'multiline':False]['text':' If the month is out of range, adjust it into range, and','line_number':580,'multiline':False]['text':' modify the extended year value accordingly.','line_number':581,'multiline':False]['text':' -------------------------------------','line_number':601,'multiline':False]['text':' -------------------------------------','line_number':609,'multiline':False]['text':' -------------------------------------','line_number':617,'multiline':False]['text':' -------------------------------------','line_number':625,'multiline':False]['text':'*
* After adjustments such as add(MONTH), add(YEAR), we don't want the
* month to jump around.  E.g., we don't want Jan 31 + 1 month to go to Mar
* 3, we want it to go to Feb 28.  Adjustments which might run into this
* problem call this method to retain the proper month.
','line_number':627,'multiline':True]['text':' -------------------------------------','line_number':642,'multiline':False]['text':' Ignore DATE and DAY_OF_YEAR which are handled below','line_number':649,'multiline':False]['text':' Values differ in Least-Maximum and Maximum should be handled','line_number':657,'multiline':False]['text':' specially.','line_number':658,'multiline':False]['text':' Handle DAY_OF_WEEK_IN_MONTH, which must not have the value zero.','line_number':674,'multiline':False]['text':' We've checked against minimum and maximum above already.','line_number':675,'multiline':False]['text':' -------------------------------------','line_number':684,'multiline':False]['text':' -------------------------------------','line_number':692,'multiline':False]['text':' Divide by 1000 (convert to seconds) in order to prevent overflow when','line_number':698,'multiline':False]['text':' dealing with UDate(Long.MIN_VALUE) and UDate(Long.MAX_VALUE).','line_number':699,'multiline':False]['text':' -------------------------------------','line_number':705,'multiline':False]['text':' -------------------------------------','line_number':708,'multiline':False]['text':'*
* Compute the julian day number of the day BEFORE the first day of
* January 1, year 1 of the given calendar.  If julianDay == 0, it
* specifies (Jan. 1, 1) - 1, in whatever calendar we are using (Julian
* or Gregorian).
','line_number':710,'multiline':True]['text':' Add 2 because Gregorian calendar starts 2 days after Julian calendar','line_number':725,'multiline':False]['text':' /**','line_number':732,'multiline':False]['text':'  * Compute the day of week, relative to the first day of week, from','line_number':733,'multiline':False]['text':'  * 0..6, of the current DOW_LOCAL or DAY_OF_WEEK fields.  This is','line_number':734,'multiline':False]['text':'  * equivalent to get(DOW_LOCAL) - 1.','line_number':735,'multiline':False]['text':'  */','line_number':736,'multiline':False]['text':' int32_t GregorianCalendar::computeRelativeDOW() const {','line_number':737,'multiline':False]['text':'     int32_t relDow = 0;','line_number':738,'multiline':False]['text':'     if (fStamp[UCAL_DOW_LOCAL] > fStamp[UCAL_DAY_OF_WEEK]) {','line_number':739,'multiline':False]['text':'         relDow = internalGet(UCAL_DOW_LOCAL) - 1; // 1-based','line_number':740,'multiline':False]['text':'     } else if (fStamp[UCAL_DAY_OF_WEEK] != kUnset) {','line_number':741,'multiline':False]['text':'         relDow = internalGet(UCAL_DAY_OF_WEEK) - getFirstDayOfWeek();','line_number':742,'multiline':False]['text':'         if (relDow < 0) relDow += 7;','line_number':743,'multiline':False]['text':'     }','line_number':744,'multiline':False]['text':'     return relDow;','line_number':745,'multiline':False]['text':' }','line_number':746,'multiline':False]['text':' /**','line_number':748,'multiline':False]['text':'  * Compute the day of week, relative to the first day of week,','line_number':749,'multiline':False]['text':'  * from 0..6 of the given julian day.','line_number':750,'multiline':False]['text':'  */','line_number':751,'multiline':False]['text':' int32_t GregorianCalendar::computeRelativeDOW(double julianDay) const {','line_number':752,'multiline':False]['text':'   int32_t relDow = julianDayToDayOfWeek(julianDay) - getFirstDayOfWeek();','line_number':753,'multiline':False]['text':'     if (relDow < 0) {','line_number':754,'multiline':False]['text':'         relDow += 7;','line_number':755,'multiline':False]['text':'     }','line_number':756,'multiline':False]['text':'     return relDow;','line_number':757,'multiline':False]['text':' }','line_number':758,'multiline':False]['text':' /**','line_number':760,'multiline':False]['text':'  * Compute the DOY using the WEEK_OF_YEAR field and the julian day','line_number':761,'multiline':False]['text':'  * of the day BEFORE January 1 of a year (a return value from','line_number':762,'multiline':False]['text':'  * computeJulianDayOfYear).','line_number':763,'multiline':False]['text':'  */','line_number':764,'multiline':False]['text':' int32_t GregorianCalendar::computeDOYfromWOY(double julianDayOfYear) const {','line_number':765,'multiline':False]['text':'     // Compute DOY from day of week plus week of year','line_number':766,'multiline':False]['text':'     // Find the day of the week for the first of this year.  This','line_number':768,'multiline':False]['text':'     // is zero-based, with 0 being the locale-specific first day of','line_number':769,'multiline':False]['text':'     // the week.  Add 1 to get first day of year.','line_number':770,'multiline':False]['text':'     int32_t fdy = computeRelativeDOW(julianDayOfYear + 1);','line_number':771,'multiline':False]['text':'     return','line_number':773,'multiline':False]['text':'         // Compute doy of first (relative) DOW of WOY 1','line_number':774,'multiline':False]['text':'         (((7 - fdy) < getMinimalDaysInFirstWeek())','line_number':775,'multiline':False]['text':'          ? (8 - fdy) : (1 - fdy))','line_number':776,'multiline':False]['text':'         // Adjust for the week number.','line_number':778,'multiline':False]['text':'         + (7 * (internalGet(UCAL_WEEK_OF_YEAR) - 1))','line_number':779,'multiline':False]['text':'         // Adjust for the DOW','line_number':781,'multiline':False]['text':'         + computeRelativeDOW();','line_number':782,'multiline':False]['text':' }','line_number':783,'multiline':False]['text':' -------------------------------------','line_number':785,'multiline':False]['text':' -------------------------------------','line_number':793,'multiline':False]['text':' -------------------------------------','line_number':801,'multiline':False]['text':' -------------------------------------','line_number':811,'multiline':False]['text':'*
* Roll a field by a signed amount.
* Note: This will be made public later. [LIU]
','line_number':813,'multiline':True]['text':' J81 processing. (gregorian cutover)','line_number':830,'multiline':False]['text':' 'c' for cutover; in days','line_number':832,'multiline':False]['text':' no discontinuity: [0, cMonthLen)','line_number':833,'multiline':False]['text':' in ms','line_number':834,'multiline':False]['text':' Common code - see if we're in the cutover month of the cutover year','line_number':836,'multiline':False]['text':' We subtract 1 from the DAY_OF_MONTH to make it zero-based, and an','line_number':844,'multiline':False]['text':' additional 10 if we are after the cutover. Thus the monthStart','line_number':845,'multiline':False]['text':' value will be correct iff we actually are in the cutover month.','line_number':846,'multiline':False]['text':' A month containing the cutover is 10 days shorter.','line_number':849,'multiline':False]['text':' Unlike WEEK_OF_MONTH, WEEK_OF_YEAR never shifts the day of the','line_number':863,'multiline':False]['text':' week.  Also, rolling the week of the year can have seemingly','line_number':864,'multiline':False]['text':' strange effects simply because the year of the week of year','line_number':865,'multiline':False]['text':' may be different from the calendar year.  For example, the','line_number':866,'multiline':False]['text':' date Dec 28, 1997 is the first day of week 1 of 1998 (if','line_number':867,'multiline':False]['text':' weeks start on Sunday and the minimal days in first week is','line_number':868,'multiline':False]['text':' <= 3).','line_number':869,'multiline':False]['text':' Get the ISO year, which matches the week of year.  This','line_number':871,'multiline':False]['text':' may be one year before or after the calendar year.','line_number':872,'multiline':False]['text':' Do fast checks to avoid unnecessary computation:','line_number':885,'multiline':False]['text':' Determine the last week of the ISO year.','line_number':887,'multiline':False]['text':' We do this using the standard formula we use','line_number':888,'multiline':False]['text':' everywhere in this file.  If we can see that the','line_number':889,'multiline':False]['text':' days at the end of the year are going to fall into','line_number':890,'multiline':False]['text':' week 1 of the next year, we drop the last week by','line_number':891,'multiline':False]['text':' subtracting 7 from the last day of the year.','line_number':892,'multiline':False]['text':' [j81] 1582 special case for DOM','line_number':911,'multiline':False]['text':' The default computation works except when the current month','line_number':912,'multiline':False]['text':' contains the Gregorian cutover.  We handle this special case','line_number':913,'multiline':False]['text':' here.  [j81 - aliu]','line_number':914,'multiline':False]['text':' NOTE: following copied from  the old','line_number':938,'multiline':False]['text':'     GregorianCalendar::roll( WEEK_OF_MONTH )  code ','line_number':939,'multiline':False]['text':' This is tricky, because during the roll we may have to shift','line_number':941,'multiline':False]['text':' to a different day of the week.  For example:','line_number':942,'multiline':False]['text':'    s  m  t  w  r  f  s','line_number':944,'multiline':False]['text':'          1  2  3  4  5','line_number':945,'multiline':False]['text':'    6  7  8  9 10 11 12','line_number':946,'multiline':False]['text':' When rolling from the 6th or 7th back one week, we go to the','line_number':948,'multiline':False]['text':' 1st (assuming that the first partial week counts).  The same','line_number':949,'multiline':False]['text':' thing happens at the end of the month.','line_number':950,'multiline':False]['text':' The other tricky thing is that we have to figure out whether','line_number':952,'multiline':False]['text':' the first partial week actually counts or not, based on the','line_number':953,'multiline':False]['text':' minimal first days in the week.  And we have to use the','line_number':954,'multiline':False]['text':' correct first day of the week to delineate the week','line_number':955,'multiline':False]['text':' boundaries.','line_number':956,'multiline':False]['text':' Here's our algorithm.  First, we find the real boundaries of','line_number':958,'multiline':False]['text':' the month.  Then we discard the first partial week if it','line_number':959,'multiline':False]['text':' doesn't count in this locale.  Then we fill in the ends with','line_number':960,'multiline':False]['text':' phantom days, so that the first partial week and the last','line_number':961,'multiline':False]['text':' partial week are full weeks.  We then have a nice square','line_number':962,'multiline':False]['text':' block of weeks.  We do the usual rolling within this block,','line_number':963,'multiline':False]['text':' as is done elsewhere in this method.  If we wind up on one of','line_number':964,'multiline':False]['text':' the phantom days that we added, we recognize this and pin to','line_number':965,'multiline':False]['text':' the first or the last day of the month.  Easy, eh?','line_number':966,'multiline':False]['text':' Another wrinkle: To fix jitterbug 81, we have to make all this','line_number':968,'multiline':False]['text':' work in the oddball month containing the Gregorian cutover.','line_number':969,'multiline':False]['text':' This month is 10 days shorter than usual, and also contains','line_number':970,'multiline':False]['text':' a discontinuity in the days; e.g., the default cutover month','line_number':971,'multiline':False]['text':' is Oct 1582, and goes from day of month 4 to day of month 15.','line_number':972,'multiline':False]['text':' Normalize the DAY_OF_WEEK so that 0 is the first day of the week','line_number':974,'multiline':False]['text':' in this locale.  We have dow in 0..6.','line_number':975,'multiline':False]['text':' Find the day of month, compensating for cutover discontinuity.','line_number':980,'multiline':False]['text':' Find the day of the week (normalized for locale) for the first','line_number':983,'multiline':False]['text':' of the month.','line_number':984,'multiline':False]['text':' Get the first day of the first full week of the month,','line_number':989,'multiline':False]['text':' including phantom days, if any.  Figure out if the first week','line_number':990,'multiline':False]['text':' counts or not; if it counts, then fill in phantom days.  If','line_number':991,'multiline':False]['text':' not, advance to the first real full week (skip the partial week).','line_number':992,'multiline':False]['text':' Skip the first partial week','line_number':995,'multiline':False]['text':' This may be zero or negative','line_number':997,'multiline':False]['text':' Get the day of the week (normalized for locale) for the last','line_number':999,'multiline':False]['text':' day of the month.','line_number':1000,'multiline':False]['text':' We know monthLen >= DAY_OF_MONTH so we skip the += 7 step here.','line_number':1003,'multiline':False]['text':' Get the limit day for the blocked-off rectangular month; that','line_number':1005,'multiline':False]['text':' is, the day which is one past the last day of the month,','line_number':1006,'multiline':False]['text':' after the month has already been filled in with phantom days','line_number':1007,'multiline':False]['text':' to fill out the last week.  This day has a normalized DOW of 0.','line_number':1008,'multiline':False]['text':' Now roll between start and (limit - 1).','line_number':1011,'multiline':False]['text':' Finally, pin to the real start and end of the month.','line_number':1018,'multiline':False]['text':' Set the DAY_OF_MONTH.  We rely on the fact that this field','line_number':1024,'multiline':False]['text':' takes precedence over everything else (since all other fields','line_number':1025,'multiline':False]['text':' are also set at this point).  If this fact changes (if the','line_number':1026,'multiline':False]['text':' disambiguation algorithm changes) then we will have to unset','line_number':1027,'multiline':False]['text':' the appropriate fields here so that DAY_OF_MONTH is attended','line_number':1028,'multiline':False]['text':' to.','line_number':1029,'multiline':False]['text':' If we are in the cutover month, manipulate ms directly.  Don't do','line_number':1031,'multiline':False]['text':' this in general because it doesn't work across DST boundaries','line_number':1032,'multiline':False]['text':' (details, details).  This takes care of the discontinuity.','line_number':1033,'multiline':False]['text':' -------------------------------------','line_number':1044,'multiline':False]['text':'*
* Return the minimum value that this field could have, given the current date.
* For the Gregorian calendar, this is the same as getMinimum() and getGreatestMinimum().
* @param field    the time field.
* @return         the minimum value that this field could have, given the current date.
* @deprecated ICU 2.6. Use getActualMinimum(UCalendarDateFields field) instead.
','line_number':1047,'multiline':True]['text':' status ','line_number':1059,'multiline':True]['text':'*
* Return the minimum value that this field could have, given the current date.
* For the Gregorian calendar, this is the same as getMinimum() and getGreatestMinimum().
* @param field    the time field.
* @return         the minimum value that this field could have, given the current date.
* @draft ICU 2.6.
','line_number':1064,'multiline':True]['text':' status ','line_number':1071,'multiline':True]['text':' ------------------------------------','line_number':1077,'multiline':False]['text':'*
* Old year limits were least max 292269054, max 292278994.
','line_number':1079,'multiline':True]['text':'*
* @stable ICU 2.0
','line_number':1083,'multiline':True]['text':'*
* Return the maximum value that this field could have, given the current date.
* For example, with the date "Feb 3, 1997" and the DAY_OF_MONTH field, the actual
* maximum would be 28; for "Feb 3, 1996" it s 29.  Similarly for a Hebrew calendar,
* for some years the actual maximum for MONTH is 12, and for others 13.
* @stable ICU 2.0
','line_number':1090,'multiline':True]['text':' It is a known limitation that the code here (and in getActualMinimum)
    * won't behave properly at the extreme limits of GregorianCalendar's
    * representable range (except for the code that handles the YEAR
    * field).  That's because the ends of the representable range are at
    * odd spots in the year.  For calendars with the default Gregorian
    * cutover, these limits are Sun Dec 02 16:47:04 GMT 292269055 BC to Sun
    * Aug 17 07:12:55 GMT 292278994 AD, somewhat different for non-GMT
    * zones.  As a result, if the calendar is set to Aug 1 292278994 AD,
    * the actual maximum of DAY_OF_MONTH is 17, not 30.  If the date is Mar
    * 31 in that year, the actual maximum month might be Jul, whereas is
    * the date is Mar 15, the actual maximum might be Aug -- depending on
    * the precise semantics that are desired.  Similar considerations
    * affect all fields.  Nonetheless, this effect is sufficiently arcane
    * that we permit it, rather than complicating the code to handle such
    * intricacies. - liu 8/20/98

    * UPDATE: No longer true, since we have pulled in the limit values on
    * the year. - Liu 11/6/00 ','line_number':1099,'multiline':True]['text':' The year computation is no different, in principle, from the
        * others, however, the range of possible maxima is large.  In
        * addition, the way we know we've exceeded the range is different.
        * For these reasons, we use the special case code below to handle
        * this field.
        *
        * The actual maxima for YEAR depend on the type of calendar:
        *
        *     Gregorian = May 17, 292275056 BC - Aug 17, 292278994 AD
        *     Julian    = Dec  2, 292269055 BC - Jan  3, 292272993 AD
        *     Hybrid    = Dec  2, 292269055 BC - Aug 17, 292278994 AD
        *
        * We know we've exceeded the maximum when either the month, date,
        * time, or era changes in response to setting the year.  We don't
        * check for month, date, and time here because the year and era are
        * sufficient to detect an invalid year setting.  NOTE: If code is
        * added to check the month and date in the future for some reason,
        * Feb 29 must be allowed to shift to Mar 1 when setting the year.
        ','line_number':1121,'multiline':True]['text':' Perform a binary search, with the invariant that lowGood is a
            * valid year, and highBad is an out of range year.
            ','line_number':1153,'multiline':True]['text':' Restore original fields','line_number':1165,'multiline':False]['text':' the year to return','line_number':1180,'multiline':False]['text':' year field to use','line_number':1183,'multiline':False]['text':' There are three separate fields which could be used to','line_number':1186,'multiline':False]['text':' derive the proper year.  Use the one most recently set.','line_number':1187,'multiline':False]['text':' based on the "best" year field, get the year','line_number':1193,'multiline':False]['text':' The year defaults to the epoch start, the era to AD','line_number':1201,'multiline':False]['text':' Convert to extended year','line_number':1204,'multiline':False]['text':'    if(internalGet(UCAL_YEAR_WOY) != year) {','line_number':1214,'multiline':False]['text':'}','line_number':1217,'multiline':False]['text':' convert year to extended form','line_number':1229,'multiline':False]['text':' -------------------------------------','line_number':1238,'multiline':False]['text':' Force an update of the state of the Calendar.','line_number':1246,'multiline':False]['text':' cast away const','line_number':1247,'multiline':False]['text':' -------------------------------------','line_number':1252,'multiline':False]['text':'*
* Return the ERA.  We need a special method for this because the
* default ERA is AD, but a zero (unset) ERA is BC.
','line_number':1254,'multiline':True]['text':'static const char kGregorianType = "gregorian";','line_number':1265,'multiline':False]['text':'*
 * The system maintains a static default century start date and Year.  They are
 * initialized the first time they are used.  Once the system default century date 
 * and year are set, they do not change.
 ','line_number':1270,'multiline':True]['text':' initialize systemDefaultCentury and systemDefaultCenturyYear based','line_number':1288,'multiline':False]['text':' on the current time.  They'll be set to 80 years before','line_number':1289,'multiline':False]['text':' the current time.','line_number':1290,'multiline':False]['text':' We have no recourse upon failure unless we want to propagate the failure','line_number':1300,'multiline':False]['text':' out.','line_number':1301,'multiline':False]['text':' lazy-evaluate systemDefaultCenturyStart','line_number':1305,'multiline':False]['text':' lazy-evaluate systemDefaultCenturyStartYear','line_number':1311,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1318,'multiline':True]['text':'eof','line_number':1320,'multiline':False]