['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' "\0asm"','line_number':27,'multiline':False]['text':' Arbitrary, but fits in 7 bits','line_number':47,'multiline':False]['text':' WebAssembly type encodings are all single-byte negative SLEB128s, hence:','line_number':50,'multiline':False]['text':'  forall tc:TypeCode. ((tc & SLEB128SignMask) == SLEB128SignBit','line_number':51,'multiline':False]['text':' If more "simple primitive" (non-reference, non-constructor,','line_number':57,'multiline':False]['text':' non-special-purpose) types are added here then you MUST update','line_number':58,'multiline':False]['text':' LowestPrimitiveTypeCode, below.','line_number':59,'multiline':False]['text':' SLEB128(-0x01)','line_number':61,'multiline':False]['text':' SLEB128(-0x02)','line_number':62,'multiline':False]['text':' SLEB128(-0x03)','line_number':63,'multiline':False]['text':' SLEB128(-0x04)','line_number':64,'multiline':False]['text':' SLEB128(-0x05)','line_number':65,'multiline':False]['text':' SLEB128(-0x06)','line_number':67,'multiline':False]['text':' SLEB128(-0x07)','line_number':68,'multiline':False]['text':' A function pointer with any signature','line_number':70,'multiline':False]['text':' SLEB128(-0x10)','line_number':71,'multiline':False]['text':' A reference to any host value.','line_number':73,'multiline':False]['text':' SLEB128(-0x11)','line_number':74,'multiline':False]['text':' A reference to a struct/array value.','line_number':76,'multiline':False]['text':' SLEB128(-0x12)','line_number':77,'multiline':False]['text':' Type constructor for nullable reference types.','line_number':79,'multiline':False]['text':' SLEB128(-0x14)','line_number':80,'multiline':False]['text':' Type constructor for non-nullable reference types.','line_number':82,'multiline':False]['text':' SLEB128(-0x15)','line_number':83,'multiline':False]['text':' Type constructor for rtt types.','line_number':85,'multiline':False]['text':' SLEB128(-0x17)','line_number':86,'multiline':False]['text':' Type constructor for function types','line_number':88,'multiline':False]['text':' SLEB128(-0x20)','line_number':89,'multiline':False]['text':' Type constructor for structure types - gc proposal','line_number':91,'multiline':False]['text':' SLEB128(-0x21)','line_number':92,'multiline':False]['text':' Type constructor for array types - gc proposal','line_number':94,'multiline':False]['text':' SLEB128(-0x22)','line_number':95,'multiline':False]['text':' The 'empty' case of blocktype.','line_number':97,'multiline':False]['text':' SLEB128(-0x40)','line_number':98,'multiline':False]['text':' This is the lowest-valued TypeCode that is a primitive type, used in','line_number':103,'multiline':False]['text':' UnpackTypeCodeTypeAbstracted().  If primitive typecodes are added below any','line_number':104,'multiline':False]['text':' reference typecode then the logic in that function MUST change.','line_number':105,'multiline':False]['text':' An arbitrary reference type used as the result of','line_number':109,'multiline':False]['text':' UnpackTypeCodeTypeAbstracted() when a value type is a reference.','line_number':110,'multiline':False]['text':' A type code used to represent (ref null? typeindex) whether or not the type','line_number':114,'multiline':False]['text':' is encoded with 'Ref' or 'NullableRef'.','line_number':115,'multiline':False]['text':' A wasm::Trap represents a wasm-defined trap that can occur during execution','line_number':121,'multiline':False]['text':' which triggers a WebAssembly.RuntimeError. Generated code may jump to a Trap','line_number':122,'multiline':False]['text':' symbolically, passing the bytecode offset to report as the trap offset. The','line_number':123,'multiline':False]['text':' generated jump will be bound to a tiny stub which fills the offset and','line_number':124,'multiline':False]['text':' then jumps to a per-Trap shared stub at the end of the module.','line_number':125,'multiline':False]['text':' The Unreachable opcode has been executed.','line_number':128,'multiline':False]['text':' An integer arithmetic operation led to an overflow.','line_number':130,'multiline':False]['text':' Trying to coerce NaN to an integer.','line_number':132,'multiline':False]['text':' Integer division by zero.','line_number':134,'multiline':False]['text':' Out of bounds on wasm memory accesses.','line_number':136,'multiline':False]['text':' Unaligned on wasm atomic accesses; also used for non-standard ARM','line_number':138,'multiline':False]['text':' unaligned access faults.','line_number':139,'multiline':False]['text':' call_indirect to null.','line_number':141,'multiline':False]['text':' call_indirect signature mismatch.','line_number':143,'multiline':False]['text':' Dereference null pointer in operation on (Ref T)','line_number':145,'multiline':False]['text':' Failed to cast a (Ref T) in a ref.cast instruction','line_number':147,'multiline':False]['text':' The internal stack space was exhausted. For compatibility, this throws','line_number':150,'multiline':False]['text':' the same over-recursed error as JS.','line_number':151,'multiline':False]['text':' The wasm execution has potentially run too long and the engine must call','line_number':154,'multiline':False]['text':' CheckForInterrupt(). This trap is resumable.','line_number':155,'multiline':False]['text':' Signal an error that was reported in C++ code.','line_number':158,'multiline':False]['text':' The representation of a null reference value throughout the compiler.','line_number':164,'multiline':False]['text':' Control flow operators','line_number':213,'multiline':False]['text':' Call operators','line_number':232,'multiline':False]['text':' Additional exception operators','line_number':236,'multiline':False]['text':' Parametric operators','line_number':242,'multiline':False]['text':' Variable access','line_number':247,'multiline':False]['text':' Reftypes,','line_number':253,'multiline':False]['text':'   per proposal as of February 2019','line_number':254,'multiline':False]['text':' Memory-related operators','line_number':256,'multiline':False]['text':' Constants','line_number':283,'multiline':False]['text':' Comparison operators','line_number':289,'multiline':False]['text':' Numeric operators','line_number':325,'multiline':False]['text':' Conversions','line_number':391,'multiline':False]['text':' Reinterpretations','line_number':414,'multiline':False]['text':' Sign extension','line_number':420,'multiline':False]['text':' Reference types','line_number':427,'multiline':False]['text':' Function references','line_number':432,'multiline':False]['text':' GC (experimental)','line_number':436,'multiline':False]['text':' Opcodes in the GC opcode space.','line_number':451,'multiline':False]['text':' Structure operations','line_number':453,'multiline':False]['text':' Array operations','line_number':461,'multiline':False]['text':' Rtt operations','line_number':470,'multiline':False]['text':' Ref operations','line_number':474,'multiline':False]['text':' Opcode list from the SIMD proposal post-renumbering in May, 2020.','line_number':482,'multiline':False]['text':' Opcodes with suffix 'Experimental' are proposed but not standardized, and are','line_number':484,'multiline':False]['text':' compatible with those same opcodes in V8.  No opcode labeled 'Experimental'','line_number':485,'multiline':False]['text':' will ship in a Release build where SIMD is enabled by default.','line_number':486,'multiline':False]['text':' Unused = 0x9a','line_number':643,'multiline':False]['text':' Narrow = 0xa2','line_number':651,'multiline':False]['text':' Narrow = 0xa5','line_number':654,'multiline':False]['text':' Narrow = 0xa6','line_number':655,'multiline':False]['text':' AddSatS = 0xaf','line_number':664,'multiline':False]['text':' AddSatU = 0xb0','line_number':665,'multiline':False]['text':' SubSatS = 0xb2','line_number':667,'multiline':False]['text':' SubSatU = 0xb3','line_number':668,'multiline':False]['text':' Dot = 0xb4','line_number':669,'multiline':False]['text':' Unused = 0xbb','line_number':676,'multiline':False]['text':' AnyTrue = 0xc2','line_number':683,'multiline':False]['text':' Narrow = 0xc5','line_number':686,'multiline':False]['text':' Narrow = 0xc6','line_number':687,'multiline':False]['text':' Unused = 0xcf','line_number':696,'multiline':False]['text':' Unused = 0xd0','line_number':697,'multiline':False]['text':' Unused = 0xd2','line_number':699,'multiline':False]['text':' Unused = 0xd3','line_number':700,'multiline':False]['text':' Dot = 0xd4','line_number':701,'multiline':False]['text':' Round = 0xe2','line_number':715,'multiline':False]['text':' Round = 0xee','line_number':727,'multiline':False]['text':' Unused = 0x100 and up','line_number':745,'multiline':False]['text':' Mozilla extensions, highly experimental and platform-specific','line_number':747,'multiline':False]['text':' The wormhole is a mechanism for injecting experimental, possibly','line_number':749,'multiline':False]['text':' platform-dependent, opcodes into the generated code.  A wormhole op is','line_number':750,'multiline':False]['text':' expressed as a two-operation SIMD shuffle op with the pattern <31, 0, 30,','line_number':751,'multiline':False]['text':' 2, 29, 4, 28, 6, 27, 8, 26, 10, 25, 12, 24, X> where X is the opcode,','line_number':752,'multiline':False]['text':' 0..31, from the set below.  If an operation uses no operands, the operands','line_number':753,'multiline':False]['text':' to the shuffle opcode should be v128.const 0.  If an operation uses one','line_number':754,'multiline':False]['text':' operand, the operands to the shuffle opcode should both be that operand.','line_number':755,'multiline':False]['text':'','line_number':756,'multiline':False]['text':' The wormhole must be enabled by a flag (see below) and is only supported on','line_number':757,'multiline':False]['text':' x64 and x86 (though with both compilers).','line_number':758,'multiline':False]['text':'','line_number':759,'multiline':False]['text':' The benefit of this mechanism is that it allows experimental opcodes to be','line_number':760,'multiline':False]['text':' used without updating other tools (compilers, linkers, optimizers).','line_number':761,'multiline':False]['text':'','line_number':762,'multiline':False]['text':' Controlling the wormhole:','line_number':763,'multiline':False]['text':'','line_number':764,'multiline':False]['text':' - Under the correct circumstances, an options bag that is passed as an','line_number':765,'multiline':False]['text':'   additional and nonstandard argument to any function that validates or','line_number':766,'multiline':False]['text':'   compiles wasm will be inspected for carrying additional compilation','line_number':767,'multiline':False]['text':'   options. The options bag always follows any fixed and optional arguments','line_number':768,'multiline':False]['text':'   already in the signature.  The functions are: WA.validate, WA.compile,','line_number':769,'multiline':False]['text':'   WA.instantiate when called on a BufferSource, WA.compileStreaming,','line_number':770,'multiline':False]['text':'   WA.instantiateStreaming, and WA.Module.constructor.  If compiled code can','line_number':771,'multiline':False]['text':'   be cached, the presence of the options bag forces recompilation.','line_number':772,'multiline':False]['text':'','line_number':773,'multiline':False]['text':' - If the bag is inspected and contains the property `simdWormhole` and that','line_number':774,'multiline':False]['text':'   property has the boolean value `true` (and not just any truthy value),','line_number':775,'multiline':False]['text':'   then wasm SIMD will be enabled and the wormhole functionality will also','line_number':776,'multiline':False]['text':'   be enabled for the affected compilation only.','line_number':777,'multiline':False]['text':'','line_number':778,'multiline':False]['text':' - The options bag is parsed under these circumstances:','line_number':779,'multiline':False]['text':'','line_number':780,'multiline':False]['text':'   - In the shell, if the switch `--wasm-simd-wormhole` is set.','line_number':781,'multiline':False]['text':'','line_number':782,'multiline':False]['text':'   - In Nightly and early Beta browsers, if the flag','line_number':783,'multiline':False]['text':'     `j.o.wasm_simd_wormhole` is set.','line_number':784,'multiline':False]['text':'','line_number':785,'multiline':False]['text':'   - In all browsers, if the content passing the options bag is privileged','line_number':786,'multiline':False]['text':'     (in a way that is TBD).','line_number':787,'multiline':False]['text':'','line_number':788,'multiline':False]['text':' - As per normal, wasm SIMD can be enabled by setting `j.o.wasm_simd` to','line_number':789,'multiline':False]['text':'   true, but in that case the wormhole functionality will not be enabled.','line_number':790,'multiline':False]['text':'   Note that `j.o.wasm_simd_wormhole` does not enable the wormhole','line_number':791,'multiline':False]['text':'   functionality directly; it must be enabled by passing an options bag as','line_number':792,'multiline':False]['text':'   described above.','line_number':793,'multiline':False]['text':' These opcodes can be rearranged but the X values associated with them must','line_number':795,'multiline':False]['text':' remain fixed.','line_number':796,'multiline':False]['text':' X=0, selftest opcode.  No operands.  The result is an 8x16 hex value:','line_number':798,'multiline':False]['text':' DEADD00DCAFEBABE.','line_number':799,'multiline':False]['text':' X=1, Intel SSE3 PMADDUBSW instruction. Two operands.','line_number':802,'multiline':False]['text':' X=2, Intel SSE2 PMADDWD instruction. Two operands.','line_number':805,'multiline':False]['text':' Opcodes in the "miscellaneous" opcode space.','line_number':812,'multiline':False]['text':' Saturating float-to-int conversions','line_number':814,'multiline':False]['text':' Bulk memory operations, per proposal as of February 2019.','line_number':824,'multiline':False]['text':' Reftypes, per proposal as of February 2019.','line_number':833,'multiline':False]['text':' Opcodes from threads proposal as of June 30, 2017','line_number':841,'multiline':False]['text':' Wait and wake','line_number':843,'multiline':False]['text':' Load and store','line_number':849,'multiline':False]['text':' Read-modify-write operations','line_number':865,'multiline':False]['text':' CompareExchange','line_number':914,'multiline':False]['text':' ------------------------------------------------------------------------','line_number':927,'multiline':False]['text':' These operators are emitted internally when compiling asm.js and are','line_number':928,'multiline':False]['text':' rejected by wasm validation.  They are prefixed by MozPrefix.','line_number':929,'multiline':False]['text':' asm.js-specific operators.  They start at 1 so as to check for','line_number':931,'multiline':False]['text':' uninitialized (zeroed) storage.','line_number':932,'multiline':False]['text':' asm.js-style call_indirect with the callee evaluated first.','line_number':962,'multiline':False]['text':' b0 is a byte value but has a 16-bit representation to allow for a full','line_number':970,'multiline':False]['text':' 256-value range plus a sentinel Limit value.','line_number':971,'multiline':False]['text':' b1 is a LEB128 value but 32 bits is enough for now.','line_number':973,'multiline':False]['text':' The WebAssembly spec hard-codes the virtual page size to be 64KiB and','line_number':992,'multiline':False]['text':' requires the size of linear memory to always be a multiple of 64KiB.','line_number':993,'multiline':False]['text':' These limits are agreed upon with other engines for consistency.','line_number':1001,'multiline':False]['text':' TODO: get this into the shared limits spec','line_number':1016,'multiline':False]['text':' These limits pertain to our WebAssembly implementation only.','line_number':1032,'multiline':False]['text':' The maximum number of results of a function call or block that may be','line_number':1040,'multiline':False]['text':' returned in registers.','line_number':1041,'multiline':False]['text':' An asm.js heap can in principle be up to INT32_MAX bytes but requirements','line_number':1043,'multiline':False]['text':' on the format restrict it further to the largest pseudo-ARM-immediate.','line_number':1044,'multiline':False]['text':' See IsValidAsmJSHeapLength().','line_number':1045,'multiline':False]['text':' A magic value of the FramePointer to indicate after a return to the entry','line_number':1048,'multiline':False]['text':' stub that an exception has been caught and that we should throw.','line_number':1049,'multiline':False]['text':' Asserted by Decoder::readVarU32.','line_number':1053,'multiline':False]['text':' Which backend to use in the case of the optimized tier.','line_number':1057,'multiline':False]['text':' The CompileMode controls how compilation of a module is performed (notably,','line_number':1064,'multiline':False]['text':' how many times we compile it).','line_number':1065,'multiline':False]['text':' Typed enum for whether debugging is enabled.','line_number':1069,'multiline':False]['text':' A wasm module can either use no memory, a unshared memory (ArrayBuffer) or','line_number':1073,'multiline':False]['text':' shared memory (SharedArrayBuffer).','line_number':1074,'multiline':False]['text':' namespace wasm','line_number':1078,'multiline':False]['text':' namespace js','line_number':1079,'multiline':False]['text':' wasm_constants_h','line_number':1081,'multiline':False]