['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' This file contains compliant implementations of FormattedValue which can be','line_number':10,'multiline':False]['text':' leveraged by ICU formatters.','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':' Each implementation is defined in its own cpp file in order to split','line_number':13,'multiline':False]['text':' dependencies more modularly.','line_number':14,'multiline':False]['text':'*
 * Represents the type of constraint for ConstrainedFieldPosition.
 *
 * Constraints are used to control the behavior of iteration in FormattedValue.
 *
 * @internal
 ','line_number':24,'multiline':True]['text':'*
     * Represents the lack of a constraint.
     *
     * This is the value of fConstraint if no "constrain" methods were called.
     *
     * @internal
     ','line_number':32,'multiline':True]['text':'*
     * Represents that the field category is constrained.
     *
     * This is the value of fConstraint if constraintCategory was called.
     *
     * FormattedValue implementations should not change the field category
     * while this constraint is active.
     *
     * @internal
     ','line_number':41,'multiline':True]['text':'*
     * Represents that the field and field category are constrained.
     *
     * This is the value of fConstraint if constraintField was called.
     *
     * FormattedValue implementations should not change the field or field category
     * while this constraint is active.
     *
     * @internal
     ','line_number':53,'multiline':True]['text':'*
 * Implementation of FormattedValue using FieldPositionHandler to accept fields.
 *
 * TODO(ICU-20897): This class is unused. If it is not needed when fixing ICU-20897,
 * it should be deleted.
 ','line_number':70,'multiline':True]['text':'* @param initialFieldCapacity Initially allocate space for this many fields. ','line_number':79,'multiline':True]['text':' Implementation of FormattedValue (const):','line_number':84,'multiline':False]['text':' Additional methods used during construction phase only (non-const):','line_number':91,'multiline':False]['text':'*
     * Computes the spans for duplicated values.
     * For example, if the string has fields:
     * 
     *     ...aa..[b.cc]..d.[bb.e.c]..a..
     *
     * then the spans will be the bracketed regions.
     *
     * Assumes that the currently known fields are sorted
     * and all in the same category.
     ','line_number':96,'multiline':True]['text':'*
     * Sorts the fields: start index first, length second.
     ','line_number':109,'multiline':True]['text':' Internal struct that must be exported for MSVC','line_number':120,'multiline':False]['text':' Export an explicit template instantiation of the MaybeStackArray that','line_number':128,'multiline':False]['text':'    is used as a data member of CEBuffer.','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':'    When building DLLs for Windows this is required even though','line_number':131,'multiline':False]['text':'    no direct access to the MaybeStackArray leaks out of the i18n library.','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':' See digitlst.h, pluralaffix.h, datefmt.h, and others for similar examples.','line_number':134,'multiline':False]['text':'','line_number':135,'multiline':False]['text':'*
 * Implementation of FormattedValue based on FormattedStringBuilder.
 *
 * The implementation currently revolves around numbers and number fields.
 * However, it can be generalized in the future when there is a need.
 *
 * @author sffc (Shane Carr)
 ','line_number':140,'multiline':True]['text':' Exported as U_I18N_API for tests','line_number':148,'multiline':False]['text':' Implementation of FormattedValue (const):','line_number':156,'multiline':False]['text':' Additional helper functions:','line_number':163,'multiline':False]['text':'*
     * Adds additional metadata used for span fields.
     *
     * category: the category to use for the span field.
     * spanValue: the value of the span field: index of the list item, for example.
     * start: the start position within the string of the span. -1 if unknown.
     * length: the length of the span, used to split adjacent fields.
     ','line_number':173,'multiline':True]['text':' C API Helpers for FormattedValue','line_number':198,'multiline':False]['text':' Magic number as ASCII == "UFV"','line_number':199,'multiline':False]['text':' This pointer should be set by the child class.','line_number':203,'multiline':False]['text':'* Boilerplate to check for valid status before dereferencing the fData pointer. ','line_number':208,'multiline':True]['text':'* Implementation of the methods from U_FORMATTED_VALUE_SUBCLASS_AUTO. ','line_number':219,'multiline':True]['text':'* Like UPRV_FORMATTED_VALUE_CAPI_AUTO_IMPL but without impl type declarations. ','line_number':256,'multiline':True]['text':'*
 * Implementation of the standard methods for a UFormattedValue "subclass" C API.
 * @param CPPType The public C++ type, like FormattedList
 * @param CType The public C type, like UFormattedList
 * @param ImplType A name to use for the implementation class
 * @param HelperType A name to use for the "mixin" typedef for C API conversion
 * @param Prefix The C API prefix, like ulistfmt
 * @param MagicNumber A unique 32-bit number to use to identify this type
 ','line_number':284,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':313,'multiline':True]['text':' __FORMVAL_IMPL_H__','line_number':314,'multiline':False]