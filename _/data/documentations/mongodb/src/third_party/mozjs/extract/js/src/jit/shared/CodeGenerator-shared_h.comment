['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Label for the common return path.','line_number':66,'multiline':False]['text':' Mapping from bailout table ID to an offset in the snapshot buffer.','line_number':72,'multiline':False]['text':' Allocated data space needed at runtime.','line_number':75,'multiline':False]['text':' Vector mapping each IC index to its offset in runtimeData_.','line_number':78,'multiline':False]['text':' IC data we need at compile-time. Discarded after creating the IonScript.','line_number':81,'multiline':False]['text':' The offset of the first instruction of the OSR entry block from the','line_number':118,'multiline':False]['text':' beginning of the code buffer.','line_number':119,'multiline':False]['text':' See JitOptions.checkOsiPointRegisters. We set this here to avoid','line_number':136,'multiline':False]['text':' races when enableOsiPointRegisterChecks is called while we're generating','line_number':137,'multiline':False]['text':' code off-thread.','line_number':138,'multiline':False]['text':' The initial size of the frame in bytes. These are bytes beyond the','line_number':142,'multiline':False]['text':' constant header present for every Ion frame, used for pre-determined','line_number':143,'multiline':False]['text':' spills.','line_number':144,'multiline':False]['text':' Frame class this frame's size falls into (see IonFrame.h).','line_number':147,'multiline':False]['text':' For arguments to the current function.','line_number':150,'multiline':False]['text':' For argument construction for calls. Argslots are Value-sized.','line_number':156,'multiline':False]['text':' Returns the offset from FP to address incoming stack arguments','line_number':169,'multiline':False]['text':' when we use wasm stack argument abi (useWasmStackArgumentAbi()).','line_number':170,'multiline':False]['text':' When appending to runtimeData_, the vector might realloc, leaving pointers','line_number':191,'multiline':False]['text':' int the origianl vector stale and unusable. DataPtr acts like a pointer,','line_number':192,'multiline':False]['text':' but allows safety in the face of potentially realloc'ing vector appends.','line_number':193,'multiline':False]['text':' Use the copy constructor on the allocated space.','line_number':228,'multiline':False]['text':' Encodes an LSnapshot into the compressed snapshot buffer.','line_number':235,'multiline':False]['text':' Attempts to assign a BailoutId to a snapshot, if one isn't already set.','line_number':241,'multiline':False]['text':' If the bailout table is full, this returns false, which is not a fatal','line_number':242,'multiline':False]['text':' error (the code generator may use a slower bailout mechanism).','line_number':243,'multiline':False]['text':' Encode all encountered safepoints in CG-order, and resolve |indices| for','line_number':246,'multiline':False]['text':' safepoint offsets.','line_number':247,'multiline':False]['text':' Fixup offsets of native-to-bytecode map.','line_number':250,'multiline':False]['text':' Mark the safepoint on |ins| as corresponding to the current assembler','line_number':255,'multiline':False]['text':' location. The location should be just after a call.','line_number':256,'multiline':False]['text':' Mark the OSI point |ins| as corresponding to the current','line_number':260,'multiline':False]['text':' assembler location inside the |osiIndices_|. Return the assembler','line_number':261,'multiline':False]['text':' location for the OSI point return location.','line_number':262,'multiline':False]['text':' Ensure that there is enough room between the last OSI point and the','line_number':265,'multiline':False]['text':' current instruction, such that:','line_number':266,'multiline':False]['text':'  (1) Invalidation will not overwrite the current instruction, and','line_number':267,'multiline':False]['text':'  (2) Overwriting the current instruction will not overwrite','line_number':268,'multiline':False]['text':'      an invalidation marker.','line_number':269,'multiline':False]['text':' We don't emit code for trivial blocks, so if we want to branch to the','line_number':282,'multiline':False]['text':' given block, and it's trivial, return the ultimate block we should','line_number':283,'multiline':False]['text':' actually branch directly to.','line_number':284,'multiline':False]['text':' Test whether the given block can be reached via fallthrough from the','line_number':294,'multiline':False]['text':' current block.','line_number':295,'multiline':False]['text':' Trivial blocks can be crossed via fallthrough.','line_number':302,'multiline':False]['text':' Save and restore all volatile registers to/from the stack, excluding the','line_number':312,'multiline':False]['text':' specified register(s), before a function call made using callWithABI and','line_number':313,'multiline':False]['text':' after storing the function call's return value to an output register.','line_number':314,'multiline':False]['text':' (The only registers that don't need to be saved/restored are 1) the','line_number':315,'multiline':False]['text':' temporary register used to store the return value of the function call,','line_number':316,'multiline':False]['text':' if there is one [otherwise that stored value would be overwritten]; and','line_number':317,'multiline':False]['text':' 2) temporary registers whose values aren't needed in the rest of the LIR','line_number':318,'multiline':False]['text':' instruction [this is purely an optimization].  All other volatiles must','line_number':319,'multiline':False]['text':' be saved and restored in case future LIR instructions need those values.)','line_number':320,'multiline':False]['text':' These functions have to be called before and after any callVM and before','line_number':354,'multiline':False]['text':' any modifications of the stack.  Modification of the stack made after','line_number':355,'multiline':False]['text':' these calls should update the framePushed variable, needed by the exit','line_number':356,'multiline':False]['text':' frame produced by callVM.','line_number':357,'multiline':False]['text':' Get/save/restore all registers that are both live and volatile.','line_number':362,'multiline':False]['text':' Generate a jump to the start of the specified block. Use this in place of','line_number':415,'multiline':False]['text':' jumping directly to mir->lir()->label(), or use getJumpLabelForBranch()','line_number':416,'multiline':False]['text':' if a label to use directly is needed.','line_number':417,'multiline':False]['text':' This function is not used for MIPS. MIPS has branchToBlock.','line_number':420,'multiline':False]['text':' isStart =','line_number':446,'multiline':True]['text':' isStart =','line_number':447,'multiline':True]['text':' isStart =','line_number':449,'multiline':True]['text':' isStart =','line_number':452,'multiline':True]['text':' Log an arbitrary text. The TraceloggerTextId is used to toggle the','line_number':454,'multiline':False]['text':' logging on and off.','line_number':455,'multiline':False]['text':' Note: the text is not copied and need to be kept alive until linking.','line_number':456,'multiline':False]['text':' isStart =','line_number':459,'multiline':True]['text':' isStart =','line_number':463,'multiline':True]['text':' An out-of-line path is generated at the end of the function.','line_number':489,'multiline':False]['text':' For OOL paths that want a specific-typed code generator.','line_number':510,'multiline':False]['text':' namespace jit','line_number':578,'multiline':False]['text':' namespace js','line_number':579,'multiline':False]['text':' jit_shared_CodeGenerator_shared_h ','line_number':581,'multiline':True]