['text':' vim: set ts=2 et sw=2 tw=80 filetype=javascript: ','line_number':1,'multiline':True]['text':' Copyright 2019 Mozilla Foundation and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':3,'multiline':True]['text':' fluent-syntax@0.12.0 ','line_number':19,'multiline':True]['text':'
 * Base class for all Fluent AST nodes.
 *
 * All productions described in the ASDL subclass BaseNode, including Span and
 * Annotation.
 *
 ','line_number':21,'multiline':True]['text':'
 * Base class for AST nodes which can have Spans.
 ','line_number':93,'multiline':True]['text':'
 * An abstract base class for useful elements of Resource.body.
 ','line_number':110,'multiline':True]['text':'
 * An abstract base class for elements of Patterns.
 ','line_number':145,'multiline':True]['text':'
 * An abstract base class for expressions.
 ','line_number':166,'multiline':True]['text':' An abstract base class for Literals.','line_number':171,'multiline':False]['text':' The "value" field contains the exact contents of the literal,','line_number':175,'multiline':False]['text':' character-for-character.','line_number':176,'multiline':False]['text':' Backslash backslash, backslash double quote, uHHHH, UHHHHHH.','line_number':192,'multiline':False]['text':' It's a Unicode scalar value.','line_number':205,'multiline':False]['text':' Escape sequences reresenting surrogate code points are','line_number':208,'multiline':False]['text':' well-formed but invalid in Fluent. Replace them with U+FFFD','line_number':209,'multiline':False]['text':' REPLACEMENT CHARACTER.','line_number':210,'multiline':False]['text':' eslint-disable complexity ','line_number':428,'multiline':True]['text':' eslint no-magic-numbers: "off" ','line_number':506,'multiline':True]['text':' When the cursor is at CRLF, return LF but don't move the cursor.','line_number':516,'multiline':False]['text':' The cursor still points to the EOL position, which in this case is the','line_number':517,'multiline':False]['text':' beginning of the compound CRLF sequence. This ensures slices of','line_number':518,'multiline':False]['text':' [inclusive, exclusive) continue to work properly.','line_number':519,'multiline':False]['text':' Skip over the CRLF as if it was a single character.','line_number':538,'multiline':False]['text':' Skip over the CRLF as if it was a single character.','line_number':548,'multiline':False]['text':' Treat the blank line at EOF as a blank block.','line_number':597,'multiline':False]['text':' Any other char; reset to column 1 on this line.','line_number':600,'multiline':False]['text':' EOF is a valid line end in Fluent.','line_number':634,'multiline':False]['text':' Unicode Character 'SYMBOL FOR NEWLINE' (U+2424)','line_number':643,'multiline':False]['text':' a-z','line_number':665,'multiline':False]['text':' A-Z','line_number':666,'multiline':False]['text':' 0-9','line_number':684,'multiline':False]['text':' Inline Patterns may start with any char.','line_number':698,'multiline':False]['text':' -1 - any','line_number':724,'multiline':False]['text':'  0 - comment','line_number':725,'multiline':False]['text':'  1 - group comment','line_number':726,'multiline':False]['text':'  2 - resource comment','line_number':727,'multiline':False]['text':' The first char after #, ## or ###.','line_number':746,'multiline':False]['text':' Last seen newline is _after_ the junk start. It's safe to rewind','line_number':777,'multiline':False]['text':' without the risk of resuming at the same broken entry.','line_number':778,'multiline':False]['text':' We're only interested in beginnings of line.','line_number':782,'multiline':False]['text':' Break if the first char in this line looks like an entry start.','line_number':788,'multiline':False]['text':' a-z','line_number':809,'multiline':False]['text':' A-Z','line_number':810,'multiline':False]['text':' 0-9','line_number':811,'multiline':False]['text':' _-','line_number':812,'multiline':False]['text':' 0-9','line_number':821,'multiline':False]['text':' 0-9','line_number':830,'multiline':False]['text':' A-F','line_number':831,'multiline':False]['text':' a-f','line_number':832,'multiline':False]['text':'  eslint no-magic-numbers: [0]  ','line_number':839,'multiline':True]['text':' Don't re-add the span if the node already has it. This may happen when','line_number':854,'multiline':False]['text':' one decorated function calls another decorated function.','line_number':855,'multiline':False]['text':' Poor man's decorators.','line_number':873,'multiline':False]['text':' Regular Comments require special logic. Comments may be attached to','line_number':896,'multiline':False]['text':' Messages or Terms if they are followed immediately by them. However','line_number':897,'multiline':False]['text':' they should parse as standalone when they're followed by Junk.','line_number':898,'multiline':False]['text':' Consequently, we only attach Comments once we know that the Message','line_number':899,'multiline':False]['text':' or the Term parsed successfully.','line_number':900,'multiline':False]['text':' Stash the comment and decide what to do with it in the next pass.','line_number':904,'multiline':False]['text':' In either case, the stashed comment has been dealt with; clear it.','line_number':918,'multiline':False]['text':' No special logic for other types of entries.','line_number':922,'multiline':False]['text':'
   * Parse the first Message or Term in `source`.
   *
   * Skip all encountered comments and start parsing at the first Message or
   * Term start. Return Junk if the parsing is not successful.
   *
   * Preceding comments are ignored unless they contain syntax errors
   * themselves, in which case Junk for the invalid comment is returned.
   ','line_number':935,'multiline':True]['text':' Don't skip Junk comments.','line_number':951,'multiline':False]['text':' The position of the error must be inside of the Junk's span.','line_number':976,'multiline':False]['text':' Create a Junk instance','line_number':980,'multiline':False]['text':' 0 - comment','line_number':1010,'multiline':False]['text':' 1 - group comment','line_number':1011,'multiline':False]['text':' 2 - resource comment','line_number':1012,'multiline':False]['text':' 0-9, -','line_number':1138,'multiline':False]['text':' maybeGetPattern distinguishes between patterns which start on the same line','line_number':1234,'multiline':False]['text':' as the identifier (a.k.a. inline signleline patterns and inline multiline','line_number':1235,'multiline':False]['text':' patterns) and patterns which start on a new line (a.k.a. block multiline','line_number':1236,'multiline':False]['text':' patterns). The distinction is important for the dedentation logic: the','line_number':1237,'multiline':False]['text':' indent of the first line of a block pattern must be taken into account when','line_number':1238,'multiline':False]['text':' calculating the maximum common indent.','line_number':1239,'multiline':False]['text':' A block pattern is a pattern which starts on a new line. Store and','line_number':1259,'multiline':False]['text':' measure the indent of this first line for the dedentation logic.','line_number':1260,'multiline':False]['text':' The end condition for getPattern's while loop is a newline','line_number':1283,'multiline':False]['text':' which is not followed by a valid pattern continuation.','line_number':1284,'multiline':False]['text':' Create a token representing an indent. It's not part of the AST and it will','line_number':1303,'multiline':False]['text':' be trimmed and merged into adjacent TextElements, or turned into a new','line_number':1304,'multiline':False]['text':' TextElement, if it's surrounded by two Placeables.','line_number':1305,'multiline':False]['text':' Dedent a list of elements by removing the maximum common indent from the','line_number':1314,'multiline':False]['text':' beginning of text lines. The common indent is calculated in getPattern.','line_number':1315,'multiline':False]['text':' Strip common indent.','line_number':1326,'multiline':False]['text':' Join adjacent TextElements by replacing them with their sum.','line_number':1336,'multiline':False]['text':' If the indent hasn't been merged into a preceding TextElement,','line_number':1346,'multiline':False]['text':' convert it into a new TextElement.','line_number':1347,'multiline':False]['text':' Trim trailing whitespace from the Pattern.','line_number':1358,'multiline':False]['text':' It's a Function. Ensure it's all upper-case.','line_number':1513,'multiline':False]['text':' Add the trailing newline.','line_number':1705,'multiline':False]['text':' Special-case select expression to control the whitespace around the','line_number':1794,'multiline':False]['text':' opening and the closing brace.','line_number':1795,'multiline':False]['text':'
 * Abstract Visitor pattern
 ','line_number':1884,'multiline':True]['text':'
 * Abstract Transformer pattern
 ','line_number':1907,'multiline':True]['text':' eslint object-shorthand: "off",
          comma-dangle: "off",
          no-labels: "off" ','line_number':1946,'multiline':True]