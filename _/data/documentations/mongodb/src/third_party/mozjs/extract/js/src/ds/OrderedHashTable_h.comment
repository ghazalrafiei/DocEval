['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Define two collection templates, js::OrderedHashMap and js::OrderedHashSet.
 * They are like js::HashMap and js::HashSet except that:
 *
 *   - Iterating over an Ordered hash table visits the entries in the order in
 *     which they were inserted. This means that unlike a HashMap, the behavior
 *     of an OrderedHashMap is deterministic (as long as the HashPolicy methods
 *     are effect-free and consistent); the hashing is a pure performance
 *     optimization.
 *
 *   - Range objects over Ordered tables remain valid even when entries are
 *     added or removed or the table is resized. (However in the case of
 *     removing entries, note the warning on class Range below.)
 *
 *   - The API is a little different, so it's not a drop-in replacement.
 *     In particular, the hash policy is a little different.
 *     Also, the Ordered templates lack the Ptr and AddPtr types.
 *
 * Hash policies
 *
 * See the comment about "Hash policy" in HashTable.h for general features that
 * hash policy classes must provide. Hash policies for OrderedHashMaps and Sets
 * differ in that the hash() method takes an extra argument:
 *     static js::HashNumber hash(Lookup, const HashCodeScrambler&);
 * They must additionally provide a distinguished "empty" key value and the
 * following static member functions:
 *     bool isEmpty(const Key&);
 *     void makeEmpty(Key*);
 ','line_number':10,'multiline':True]['text':'
 * detail::OrderedHashTable is the underlying data structure used to implement
 * both OrderedHashMap and OrderedHashSet. Programs should use one of those two
 * templates rather than OrderedHashTable.
 ','line_number':51,'multiline':True]['text':' hash table (has hashBuckets() elements)','line_number':74,'multiline':False]['text':' data vector, an array of Data objects','line_number':75,'multiline':False]['text':' data[0:dataLength] are constructed','line_number':76,'multiline':False]['text':' number of constructed elements in data','line_number':77,'multiline':False]['text':' size of data, in elements','line_number':78,'multiline':False]['text':' dataLength less empty (removed) entries','line_number':79,'multiline':False]['text':' multiplicative hash shift','line_number':80,'multiline':False]['text':' list of all live Ranges on this table in malloc memory','line_number':81,'multiline':False]['text':' list of all live Ranges on this table in the GC nursery','line_number':83,'multiline':False]['text':' don't reveal pointer hash codes','line_number':85,'multiline':False]['text':' TODO: This should be templated on a functor type and receive lambda','line_number':87,'multiline':False]['text':' arguments but this causes problems for the hazard analysis builds. See','line_number':88,'multiline':False]['text':' bug 1398213.','line_number':89,'multiline':False]['text':' clear() requires that members are assigned only after all allocation','line_number':135,'multiline':False]['text':' has succeeded, and that this->ranges is left untouched.','line_number':136,'multiline':False]['text':' |hashBuckets()| isn't valid when |hashTable| hasn't been created.','line_number':150,'multiline':False]['text':' Return the number of elements in the table. ','line_number':167,'multiline':True]['text':' True if any element matches l. ','line_number':170,'multiline':True]['text':' Return a pointer to the element, if any, that matches l, or nullptr. ','line_number':173,'multiline':True]['text':' Return a pointer to the element, if any, that matches l, or nullptr. ','line_number':179,'multiline':True]['text':'
   * If the table already contains an entry that matches |element|,
   * replace that entry with |element|. Otherwise add a new entry.
   *
   * On success, return true, whether there was already a matching element or
   * not. On allocation failure, return false. If this returns false, it
   * means the element was not added to the table.
   ','line_number':184,'multiline':True]['text':' If the hashTable is more than 1/4 deleted data, simply rehash in','line_number':201,'multiline':False]['text':' place to free up some space. Otherwise, grow the table.','line_number':202,'multiline':False]['text':'
   * If the table contains an element matching l, remove it and set *foundp
   * to true. Otherwise set *foundp to false.
   *
   * Return true on success, false if we tried to shrink the table and hit an
   * allocation failure. Even if this returns false, *foundp is set correctly
   * and the matching element was removed. Shrinking is an optimization and
   * it's OK for it to fail.
   ','line_number':218,'multiline':True]['text':' Note: This could be optimized so that removing the last entry,','line_number':228,'multiline':False]['text':' data[dataLength - 1], decrements dataLength. LIFO use cases would','line_number':229,'multiline':False]['text':' benefit.','line_number':230,'multiline':False]['text':' If a matching entry exists, empty it.','line_number':232,'multiline':False]['text':' Update active Ranges.','line_number':243,'multiline':False]['text':' If many entries have been removed, try to shrink the table.','line_number':247,'multiline':False]['text':'
   * Remove all entries.
   *
   * Returns false on OOM, leaving the OrderedHashTable and any live Ranges
   * in the old state.
   *
   * The effect on live Ranges is the same as removing all entries; in
   * particular, those Ranges are still live and will see any entries added
   * after a successful clear().
   ','line_number':257,'multiline':True]['text':' init() only mutates members on success; see comment above.','line_number':277,'multiline':False]['text':'
   * Ranges are used to iterate over OrderedHashTables.
   *
   * Suppose 'Map' is some instance of OrderedHashMap, and 'map' is a Map.
   * Then you can walk all the key-value pairs like this:
   *
   *     for (Map::Range r = map.all(); !r.empty(); r.popFront()) {
   *         Map::Entry& pair = r.front();
   *         ... do something with pair ...
   *     }
   *
   * Ranges remain valid for the lifetime of the OrderedHashTable, even if
   * entries are added or removed or the table is resized. Don't do anything
   * to a Range, except destroy it, after the OrderedHashTable has been
   * destroyed. (We support destroying the two objects in either order to
   * humor the GC, bless its nondeterministic heart.)
   *
   * Warning: The behavior when the current front() entry is removed from the
   * table is subtly different from js::HashTable<>::Enum::removeFront()!
   * HashTable::Enum doesn't skip any entries when you removeFront() and then
   * popFront(). OrderedHashTable::Range does! (This is useful for using a
   * Range to implement JS Map.prototype.iterator.)
   *
   * The workaround is to call popFront() as soon as possible,
   * before there's any possibility of modifying the table:
   *
   *     for (Map::Range r = map.all(); !r.empty(); ) {
   *         Key key = r.front().key;         // this won't modify map
   *         Value val = r.front().value;     // this won't modify map
   *         r.popFront();
   *         // ...do things that might modify map...
   *     }
   ','line_number':294,'multiline':True]['text':' Cannot be a reference since we need to be able to do','line_number':330,'multiline':False]['text':' |offsetof(Range, ht)|.','line_number':331,'multiline':False]['text':' The index of front() within ht->data. ','line_number':334,'multiline':True]['text':'
     * The number of nonempty entries in ht->data to the left of front().
     * This is used when the table is resized or compacted.
     ','line_number':337,'multiline':True]['text':'
     * Links in the doubly-linked list of active Ranges on ht.
     *
     * prevp points to the previous Range's .next field;
     *   or to ht->ranges if this is the first Range in the list.
     * next points to the next Range;
     *   or nullptr if this is the last Range in the list.
     *
     * Invariant: *prevp == this.
     ','line_number':343,'multiline':True]['text':'
     * Create a Range over all the entries in ht.
     * (This is private on purpose. End users must use ht->all().)
     ','line_number':356,'multiline':True]['text':' Prohibit copy assignment.','line_number':390,'multiline':False]['text':'
     * The hash table calls this when an entry is removed.
     * j is the index of the removed entry.
     ','line_number':400,'multiline':True]['text':'
     * The hash table calls this when the table is resized or compacted.
     * Since |count| is the number of nonempty entries to the left of
     * front(), discarding the empty entries will not affect count, and it
     * will make i and count equal.
     ','line_number':414,'multiline':True]['text':' The hash table calls this when cleared. ','line_number':425,'multiline':True]['text':'
     * Return the first element in the range. This must not be called if
     * this->empty().
     *
     * Warning: Removing an entry from the table also removes it from any
     * live Ranges, and a Range can become empty that way, rendering
     * front() invalid. If in doubt, check empty() before calling front().
     ','line_number':445,'multiline':True]['text':'
     * Remove the first element from this range.
     * This must not be called if this->empty().
     *
     * Warning: Removing an entry from the table also removes it from any
     * live Ranges, and a Range can become empty that way, rendering
     * popFront() invalid. If in doubt, check empty() before calling
     * popFront().
     ','line_number':459,'multiline':True]['text':'
     * Change the key of the front entry.
     *
     * This calls Ops::hash on both the current key and the new key.
     * Ops::hash on the current key must return the same hash code as
     * when the entry was added to the table.
     ','line_number':477,'multiline':True]['text':' Remove this entry from its old hash chain. (If this crashes','line_number':492,'multiline':False]['text':' reading nullptr, it would mean we did not find this entry on','line_number':493,'multiline':False]['text':' the hash chain where we expected it. That probably means the','line_number':494,'multiline':False]['text':' key's hash code changed since it was inserted, breaking the','line_number':495,'multiline':False]['text':' hash code invariant.)','line_number':496,'multiline':False]['text':' Add it to the new hash chain. We could just insert it at the','line_number':503,'multiline':False]['text':' beginning of the chain. Instead, we do a bit of work to','line_number':504,'multiline':False]['text':' preserve the invariant that hash chains always go in reverse','line_number':505,'multiline':False]['text':' insertion order (descending memory order). No code currently','line_number':506,'multiline':False]['text':' depends on this invariant, so it's fine to kill it if','line_number':507,'multiline':False]['text':' needed.','line_number':508,'multiline':False]['text':'
   * Allocate a new Range, possibly in nursery memory. The buffer must be
   * large enough to hold a Range object.
   *
   * All nursery-allocated ranges can be freed in one go by calling
   * destroyNurseryRanges().
   ','line_number':534,'multiline':True]['text':'
   * Change the value of the given key.
   *
   * This calls Ops::hash on both the current key and the new key.
   * Ops::hash on the current key must return the same hash code as
   * when the entry was added to the table.
   ','line_number':549,'multiline':True]['text':' Remove this entry from its old hash chain. (If this crashes','line_number':571,'multiline':False]['text':' reading nullptr, it would mean we did not find this entry on','line_number':572,'multiline':False]['text':' the hash chain where we expected it. That probably means the','line_number':573,'multiline':False]['text':' key's hash code changed since it was inserted, breaking the','line_number':574,'multiline':False]['text':' hash code invariant.)','line_number':575,'multiline':False]['text':' Add it to the new hash chain. We could just insert it at the','line_number':582,'multiline':False]['text':' beginning of the chain. Instead, we do a bit of work to','line_number':583,'multiline':False]['text':' preserve the invariant that hash chains always go in reverse','line_number':584,'multiline':False]['text':' insertion order (descending memory order). No code currently','line_number':585,'multiline':False]['text':' depends on this invariant, so it's fine to kill it if','line_number':586,'multiline':False]['text':' needed.','line_number':587,'multiline':False]['text':' Logarithm base 2 of the number of buckets in the hash table initially. ','line_number':609,'multiline':True]['text':'
   * The maximum load factor (mean number of entries per bucket).
   * It is an invariant that
   *     dataCapacity == floor(hashBuckets() * fillFactor()).
   *
   * The fill factor should be between 2 and 4, and it should be chosen so that
   * the fill factor times sizeof(Data) is close to but <= a power of 2.
   * This fixed fill factor was chosen to make the size of the data
   * array, in bytes, close to a power of two when sizeof(T) is 16.
   ','line_number':613,'multiline':True]['text':'
   * The minimum permitted value of (liveCount / dataLength).
   * If that ratio drops below this value, we shrink the table.
   ','line_number':625,'multiline':True]['text':' The size of hashTable, in elements. Always a power of two. ','line_number':637,'multiline':True]['text':' This is called after rehashing the table. ','line_number':666,'multiline':True]['text':' If we had any empty entries, compacting may have moved live entries','line_number':668,'multiline':False]['text':' to the left within |data|. Notify all live Ranges of the change.','line_number':669,'multiline':False]['text':' Compact the entries in |data| and rehash them. ','line_number':673,'multiline':True]['text':'
   * Grow, shrink, or compact both |hashTable| and |data|.
   *
   * On success, this returns true, dataLength == liveCount, and there are no
   * empty elements in data[0:dataLength]. On allocation failure, this
   * leaves everything as it was and returns false.
   ','line_number':700,'multiline':True]['text':' If the size of the table is not changing, rehash in place to avoid','line_number':708,'multiline':False]['text':' allocating memory.','line_number':709,'multiline':False]['text':' Not copyable.','line_number':757,'multiline':False]['text':' namespace detail','line_number':762,'multiline':False]['text':' Clear the value. Destroying it is another possibility, but that','line_number':800,'multiline':False]['text':' would complicate class Entry considerably.','line_number':801,'multiline':False]['text':' namespace js','line_number':917,'multiline':False]['text':' ds_OrderedHashTable_h ','line_number':919,'multiline':True]