['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Baseline Interpreter frames for scripts that have a BaselineScript','line_number':114,'multiline':False]['text':' or IonScript don't need to be patched but they do need to be','line_number':115,'multiline':False]['text':' invalidated and recompiled. See also CollectInterpreterStackScripts','line_number':116,'multiline':False]['text':' for C++ interpreter frames.','line_number':117,'multiline':False]['text':' The frame must be settled on a pc with a RetAddrEntry.','line_number':122,'multiline':False]['text':' Collect interpreter frame stacks with IonScript or BaselineScript as','line_number':163,'multiline':False]['text':' well. These do not need to be patched, but do need to be invalidated','line_number':164,'multiline':False]['text':' and recompiled.','line_number':165,'multiline':False]['text':' JS_JITSPEW','line_number':201,'multiline':False]['text':'','line_number':219,'multiline':False]['text':' Recompile Patching Overview','line_number':220,'multiline':False]['text':'','line_number':221,'multiline':False]['text':' When toggling debug mode with live baseline scripts on the stack, we','line_number':222,'multiline':False]['text':' could have entered the VM via the following ways from the baseline','line_number':223,'multiline':False]['text':' script.','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' Off to On:','line_number':226,'multiline':False]['text':'  A. From a non-prologue IC (fallback stub or "can call" stub).','line_number':227,'multiline':False]['text':'  B. From a VM call.','line_number':228,'multiline':False]['text':'  C. From inside the interrupt handler via the prologue stack check.','line_number':229,'multiline':False]['text':'','line_number':230,'multiline':False]['text':' On to Off:','line_number':231,'multiline':False]['text':'  - All the ways above.','line_number':232,'multiline':False]['text':'  D. From the debug trap handler.','line_number':233,'multiline':False]['text':'  E. From the debug prologue.','line_number':234,'multiline':False]['text':'  F. From the debug epilogue.','line_number':235,'multiline':False]['text':'  G. From a JSOp::AfterYield instruction.','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':' In general, we patch the return address from VM calls and ICs to the','line_number':238,'multiline':False]['text':' corresponding entry in the recompiled BaselineScript. For entries that are','line_number':239,'multiline':False]['text':' not present in the recompiled script (cases D to G above) we switch the','line_number':240,'multiline':False]['text':' frame to interpreter mode and resume in the Baseline Interpreter.','line_number':241,'multiline':False]['text':'','line_number':242,'multiline':False]['text':' Specifics on what needs to be done are documented below.','line_number':243,'multiline':False]['text':'','line_number':244,'multiline':False]['text':' If the script wasn't recompiled or is not observed, there's','line_number':256,'multiline':False]['text':' nothing to patch.','line_number':257,'multiline':False]['text':' We recompiled the script's BaselineScript but Baseline Interpreter','line_number':271,'multiline':False]['text':' frames don't need to be patched.','line_number':272,'multiline':False]['text':' Cases A, B, C above.','line_number':292,'multiline':False]['text':'','line_number':293,'multiline':False]['text':' For the baseline frame here, we resume right after the CallVM or','line_number':294,'multiline':False]['text':' IC returns.','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':' For CallVM (case B) the assumption is that all callVMs which can','line_number':297,'multiline':False]['text':' trigger debug mode OSR are the *only* callVMs generated for their','line_number':298,'multiline':False]['text':' respective pc locations in the Baseline JIT code.','line_number':299,'multiline':False]['text':' Cases D, E, F, G above.','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':' Resume in the Baseline Interpreter because these callVMs are not','line_number':324,'multiline':False]['text':' present in the new BaselineScript if we recompiled without debug','line_number':325,'multiline':False]['text':' instrumentation.','line_number':326,'multiline':False]['text':' DebugTrap handling is different from the ones below because','line_number':334,'multiline':False]['text':' it's not a callVM but a trampoline call at the start of the','line_number':335,'multiline':False]['text':' bytecode op. When we return to the frame we can resume at the','line_number':336,'multiline':False]['text':' interpretOp label.','line_number':337,'multiline':False]['text':' These cannot trigger BaselineDebugModeOSR.','line_number':358,'multiline':False]['text':' Nothing to patch.','line_number':368,'multiline':False]['text':' Skip interpreter frames, which do not need patching.','line_number':396,'multiline':False]['text':' If a script is on the stack multiple times, it may have already','line_number':409,'multiline':False]['text':' been recompiled.','line_number':410,'multiline':False]['text':' forceDebugMode = ','line_number':424,'multiline':True]['text':' We will only fail to recompile for debug mode due to OOM. Restore','line_number':426,'multiline':False]['text':' the old baseline script in case something doesn't properly','line_number':427,'multiline':False]['text':' propagate OOM.','line_number':428,'multiline':False]['text':' Don't destroy the old baseline script yet, since if we fail any of the','line_number':434,'multiline':False]['text':' recompiles we need to rollback all the old baseline scripts.','line_number':435,'multiline':False]['text':' Cancel off-thread Ion compile for anything that has a','line_number':456,'multiline':False]['text':' BaselineScript. If we relied on the call to Invalidate below to','line_number':457,'multiline':False]['text':' cancel off-thread Ion compiles, only those with existing IonScripts','line_number':458,'multiline':False]['text':' would be cancelled.','line_number':459,'multiline':False]['text':' No need to cancel off-thread Ion compiles again, we already did it','line_number':465,'multiline':False]['text':' above.','line_number':466,'multiline':False]['text':' resetUses = ','line_number':468,'multiline':True]['text':' cancelOffThread = ','line_number':468,'multiline':True]['text':' In case of failure, roll back the entire set of active scripts so that','line_number':474,'multiline':False]['text':' we don't have to patch return addresses on the stack.','line_number':475,'multiline':False]['text':' First recompile the active scripts on the stack and patch the live','line_number':490,'multiline':False]['text':' frames.','line_number':491,'multiline':False]['text':' When the profiler is enabled, we need to have suppressed sampling,','line_number':510,'multiline':False]['text':' since the basline jit scripts are in a state of flux.','line_number':511,'multiline':False]['text':' Invalidate all scripts we are recompiling.','line_number':514,'multiline':False]['text':' Try to recompile all the scripts. If we encounter an error, we need to','line_number':528,'multiline':False]['text':' roll back as if none of the compilations happened, so that we don't','line_number':529,'multiline':False]['text':' crash.','line_number':530,'multiline':False]['text':' If all recompiles succeeded, destroy the old baseline scripts and patch','line_number':540,'multiline':False]['text':' the live frames.','line_number':541,'multiline':False]['text':'','line_number':542,'multiline':False]['text':' After this point the function must be infallible.','line_number':543,'multiline':False]