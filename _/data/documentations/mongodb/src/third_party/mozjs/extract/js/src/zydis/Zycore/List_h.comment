['text':'**************************************************************************************************

  Zyan Core Library (Zycore-C)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':'*
 * @file
 * @brief   Implements a doubly linked list.
 ','line_number':27,'multiline':True]['text':' ============================================================================================== ','line_number':45,'multiline':True]['text':' Enums and types                                                                                ','line_number':46,'multiline':True]['text':' ============================================================================================== ','line_number':47,'multiline':True]['text':'*
 * @brief   Defines the `ZyanListNode` struct.
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':49,'multiline':True]['text':'*
     * @brief   A pointer to the previous list node.
     ','line_number':57,'multiline':True]['text':'*
     * @brief   A pointer to the next list node.
     ','line_number':61,'multiline':True]['text':'*
 * @brief   Defines the `ZyanList` struct.
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':67,'multiline':True]['text':'*
     * @brief   The memory allocator.
     ','line_number':75,'multiline':True]['text':'*
     * @brief   The current number of elements in the list.
     ','line_number':79,'multiline':True]['text':'*
     * @brief   The size of a single element in bytes.
     ','line_number':83,'multiline':True]['text':'*
     * @brief   The element destructor callback.   
     ','line_number':87,'multiline':True]['text':'*
     * @brief   The head node.
     ','line_number':91,'multiline':True]['text':'*
     * @brief   The tail node.
     ','line_number':95,'multiline':True]['text':'*
     * @brief   The data buffer. 
     * 
     * Only used for instances created by `ZyanListInitCustomBuffer`.  
     ','line_number':99,'multiline':True]['text':'*
     * @brief   The data buffer capacity (number of bytes). 
     * 
     * Only used for instances created by `ZyanListInitCustomBuffer`.
     ','line_number':105,'multiline':True]['text':'*
     * @brief   The first unused node. 
     * 
     * When removing a node, the first-unused value is updated to point at the removed node and the
     * next node of the removed node will be updated to point at the old first-unused node.
     * 
     * When appending the memory of the first unused-node is recycled to store the new node. The
     * value of the first-unused node is then updated to point at the reused nodes next node.
     * 
     * If the first-unused value is `ZYAN_NULL`, any new node will be "allocated" behind the tail
     * node (if there is enough space left in the fixed size buffer).
     * 
     * Only used for instances created by `ZyanListInitCustomBuffer`.
     ','line_number':111,'multiline':True]['text':' ============================================================================================== ','line_number':128,'multiline':True]['text':' Macros                                                                                         ','line_number':129,'multiline':True]['text':' ============================================================================================== ','line_number':130,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':132,'multiline':True]['text':' General                                                                                        ','line_number':133,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':134,'multiline':True]['text':'*
 * @brief   Defines an uninitialized `ZyanList` instance.
 ','line_number':136,'multiline':True]['text':' allocator        ','line_number':141,'multiline':True]['text':' size             ','line_number':142,'multiline':True]['text':' element_size     ','line_number':143,'multiline':True]['text':' head             ','line_number':144,'multiline':True]['text':' destructor       ','line_number':145,'multiline':True]['text':' tail             ','line_number':146,'multiline':True]['text':' buffer           ','line_number':147,'multiline':True]['text':' capacity         ','line_number':148,'multiline':True]['text':' first_unused     ','line_number':149,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':152,'multiline':True]['text':' Helper macros                                                                                  ','line_number':153,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':154,'multiline':True]['text':'*
 * @brief   Returns the data value of the given `node`.
 *
 * @param   type    The desired value type.
 * @param   node    A pointer to the `ZyanListNode` struct.
 *
 * @result  The data value of the given `node`.
 *
 * Note that this function is unsafe and might dereference a null-pointer.
 ','line_number':156,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':174,'multiline':True]['text':' ============================================================================================== ','line_number':176,'multiline':True]['text':' Exported functions                                                                             ','line_number':177,'multiline':True]['text':' ============================================================================================== ','line_number':178,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':180,'multiline':True]['text':' Constructor and destructor                                                                     ','line_number':181,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':182,'multiline':True]['text':'*
 * @brief   Initializes the given `ZyanList` instance.
 *
 * @param   list            A pointer to the `ZyanList` instance.
 * @param   element_size    The size of a single element in bytes.
 * @param   destructor      A destructor callback that is invoked every time an item is deleted, or
 *                          `ZYAN_NULL` if not needed.
 *
 * @return  A zyan status code.
 *
 * The memory for the list elements is dynamically allocated by the default allocator.
 *
 * Finalization with `ZyanListDestroy` is required for all instances created by this function.
 ','line_number':186,'multiline':True]['text':' ZYAN_NO_LIBC','line_number':203,'multiline':False]['text':'*
 * @brief   Initializes the given `ZyanList` instance and sets a custom `allocator`.
 *
 * @param   list            A pointer to the `ZyanList` instance.
 * @param   element_size    The size of a single element in bytes.
 * @param   destructor      A destructor callback that is invoked every time an item is deleted, or
 *                          `ZYAN_NULL` if not needed.
 * @param   allocator       A pointer to a `ZyanAllocator` instance.
 *
 * @return  A zyan status code.
 *
 * Finalization with `ZyanListDestroy` is required for all instances created by this function.
 ','line_number':205,'multiline':True]['text':'*
 * @brief   Initializes the given `ZyanList` instance and configures it to use a custom user
 *          defined buffer with a fixed size.
 *
 * @param   list            A pointer to the `ZyanList` instance.
 * @param   element_size    The size of a single element in bytes.
 * @param   destructor      A destructor callback that is invoked every time an item is deleted, or
 *                          `ZYAN_NULL` if not needed.
 * @param   buffer          A pointer to the buffer that is used as storage for the elements.
 * @param   capacity        The maximum capacity (number of bytes) of the buffer including the 
 *                          space required for the list-nodes.
 *
 * @return  A zyan status code.
 *
 * The buffer capacity required to store `n` elements of type `T` is be calculated by:
 * `size = n * sizeof(ZyanListNode) + n * sizeof(T)`
 *
 * Finalization is not required for instances created by this function.
 ','line_number':221,'multiline':True]['text':'*
 * @brief   Destroys the given `ZyanList` instance.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 *
 * @return  A zyan status code.
 ','line_number':243,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':252,'multiline':True]['text':' Duplication                                                                                    ','line_number':253,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':254,'multiline':True]['text':'*
 * @brief   Initializes a new `ZyanList` instance by duplicating an existing list.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanList` instance.
 * @param   source      A pointer to the source list.
 *
 * @return  A zyan status code.
 *
 * The memory for the list is dynamically allocated by the default allocator.
 *
 * Finalization with `ZyanListDestroy` is required for all instances created by this function.
 ','line_number':258,'multiline':True]['text':' ZYAN_NO_LIBC','line_number':273,'multiline':False]['text':'*
 * @brief   Initializes a new `ZyanList` instance by duplicating an existing list and sets a
 *          custom `allocator`.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanList` instance.
 * @param   source      A pointer to the source list.
 * @param   allocator   A pointer to a `ZyanAllocator` instance.
 *
 * @return  A zyan status code.

 * Finalization with `ZyanListDestroy` is required for all instances created by this function.
 ','line_number':275,'multiline':True]['text':'*
 * @brief   Initializes a new `ZyanList` instance by duplicating an existing list and
 *          configures it to use a custom user defined buffer with a fixed size.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanList` instance.
 * @param   source      A pointer to the source list.
 * @param   buffer      A pointer to the buffer that is used as storage for the elements.
 * @param   capacity    The maximum capacity (number of bytes) of the buffer including the 
 *                      space required for the list-nodes.

 *                      This function will fail, if the capacity of the buffer is not sufficient
 *                      to store all elements of the source list.
 *
 * @return  A zyan status code.
 * 
 * The buffer capacity required to store `n` elements of type `T` is be calculated by:
 * `size = n * sizeof(ZyanListNode) + n * sizeof(T)`
 *
 * Finalization is not required for instances created by this function.
 ','line_number':290,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':313,'multiline':True]['text':' Item access                                                                                    ','line_number':314,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':315,'multiline':True]['text':'*
 * @brief   Returns a pointer to the first `ZyanListNode` struct of the given list.
 * 
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   node    Receives a pointer to the first `ZyanListNode` struct of the list.
 * 
 * @return  A zyan status code.   
 ','line_number':317,'multiline':True]['text':'*
 * @brief   Returns a pointer to the last `ZyanListNode` struct of the given list.
 * 
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   node    Receives a pointer to the last `ZyanListNode` struct of the list.
 * 
 * @return  A zyan status code.   
 ','line_number':327,'multiline':True]['text':'*
 * @brief   Receives a pointer to the previous `ZyanListNode` struct linked to the passed one.
 * 
 * @param   node    Receives a pointer to the previous `ZyanListNode` struct linked to the passed 
 *                  one.
 * 
 * @return  A zyan status code.
 ','line_number':337,'multiline':True]['text':'*
 * @brief   Receives a pointer to the next `ZyanListNode` struct linked to the passed one.
 * 
 * @param   node    Receives a pointer to the next `ZyanListNode` struct linked to the passed one.
 * 
 * @return  A zyan status code.
 ','line_number':347,'multiline':True]['text':'*
 * @brief   Returns a constant pointer to the data of the given `node`.
 *
 * @param   node    A pointer to the `ZyanListNode` struct.
 *
 * @return  A constant pointer to the the data of the given `node` or `ZYAN_NULL`, if an error
 *          occured.
 *
 * Take a look at `ZyanListGetNodeDataEx`, if you need a function that returns a zyan status code.
 ','line_number':356,'multiline':True]['text':'*
 * @brief   Returns a constant pointer to the data of the given `node`..
 *
 * @param   node    A pointer to the `ZyanListNode` struct.
 * @param   value   Receives a constant pointer to the data of the given `node`.
 *
 * Take a look at `ZyanListGetNodeData`, if you need a function that directly returns a pointer.
 *
 * @return  A zyan status code.
 ','line_number':368,'multiline':True]['text':'*
 * @brief   Returns a mutable pointer to the data of the given `node`.
 *
 * @param   node    A pointer to the `ZyanListNode` struct.
 *
 * @return  A mutable pointer to the the data of the given `node` or `ZYAN_NULL`, if an error
 *          occured.
 *
 * Take a look at `ZyanListGetPointerMutableEx` instead, if you need a function that returns a  
 * zyan status code.
 ','line_number':380,'multiline':True]['text':'*
 * @brief   Returns a mutable pointer to the data of the given `node`..
 *
 * @param   node    A pointer to the `ZyanListNode` struct.
 * @param   value   Receives a mutable pointer to the data of the given `node`.
 *
 * Take a look at `ZyanListGetNodeDataMutable`, if you need a function that directly returns a 
 * pointer.
 *
 * @return  A zyan status code.
 ','line_number':393,'multiline':True]['text':'*
 * @brief   Assigns a new data value to the given `node`.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   node    A pointer to the `ZyanListNode` struct.
 * @param   value   The value to assign.
 *
 * @return  A zyan status code.
 ','line_number':406,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':418,'multiline':True]['text':' Insertion                                                                                      ','line_number':419,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':420,'multiline':True]['text':'*
 * @brief   Adds a new `item` to the end of the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   item    A pointer to the item to add.
 *
 * @return  A zyan status code.
 ','line_number':422,'multiline':True]['text':'*
 * @brief   Adds a new `item` to the beginning of the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   item    A pointer to the item to add.
 *
 * @return  A zyan status code.
 ','line_number':432,'multiline':True]['text':'*
 * @brief   Constructs an `item` in-place at the end of the list.
 *
 * @param   list        A pointer to the `ZyanList` instance.
 * @param   item        Receives a pointer to the new item.
 * @param   constructor The constructor callback or `ZYAN_NULL`. The new item will be in
 *                      undefined state, if no constructor was passed.
 *
 * @return  A zyan status code.
 ','line_number':442,'multiline':True]['text':'*
 * @brief   Constructs an `item` in-place at the beginning of the list.
 *
 * @param   list        A pointer to the `ZyanList` instance.
 * @param   item        Receives a pointer to the new item.
 * @param   constructor The constructor callback or `ZYAN_NULL`. The new item will be in
 *                      undefined state, if no constructor was passed.
 *
 * @return  A zyan status code.
 ','line_number':455,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':468,'multiline':True]['text':' Deletion                                                                                       ','line_number':469,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':470,'multiline':True]['text':'*
 * @brief   Removes the last element of the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 *
 * @return  A zyan status code.
 ','line_number':472,'multiline':True]['text':'*
 * @brief   Removes the firstelement of the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 *
 * @return  A zyan status code.
 ','line_number':481,'multiline':True]['text':'*
 * @brief   Removes the given `node` from the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   node    A pointer to the `ZyanListNode` struct.
 *
 * @return  A zyan status code.
 ','line_number':490,'multiline':True]['text':'*
 * @brief   Removes multiple nodes from the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   first   A pointer to the first node.
 * @param   last    A pointer to the last node.
 *
 * @return  A zyan status code.
 ','line_number':500,'multiline':True]['text':'*
 * @brief   Erases all elements of the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 *
 * @return  A zyan status code.
 ','line_number':512,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':521,'multiline':True]['text':' Searching                                                                                      ','line_number':522,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':523,'multiline':True]['text':' TODO:','line_number':525,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':527,'multiline':True]['text':' Memory management                                                                              ','line_number':528,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':529,'multiline':True]['text':'*
 * @brief   Resizes the given `ZyanList` instance.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   size    The new size of the list.
 *
 * @return  A zyan status code.
 ','line_number':531,'multiline':True]['text':'*
 * @brief   Resizes the given `ZyanList` instance.
 *
 * @param   list        A pointer to the `ZyanList` instance.
 * @param   size        The new size of the list.
 * @param   initializer A pointer to a value to be used as initializer for new items.
 *
 * @return  A zyan status code.
 ','line_number':541,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':552,'multiline':True]['text':' Information                                                                                    ','line_number':553,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':554,'multiline':True]['text':'*
 * @brief   Returns the current size of the list.
 *
 * @param   list    A pointer to the `ZyanList` instance.
 * @param   size    Receives the size of the list.
 *
 * @return  A zyan status code.
 ','line_number':556,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':566,'multiline':True]['text':' ============================================================================================== ','line_number':568,'multiline':True]['text':' ZYCORE_VECTOR_H ','line_number':574,'multiline':True]