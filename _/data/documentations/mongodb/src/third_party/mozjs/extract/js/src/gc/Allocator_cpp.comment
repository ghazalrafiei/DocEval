['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' = CanGC ','line_number':38,'multiline':True]['text':' = nullptr ','line_number':42,'multiline':True]['text':' We cannot trigger GC or make runtime assertions when nursery allocation','line_number':57,'multiline':False]['text':' is suppressed, either explicitly or because we are off-thread.','line_number':58,'multiline':False]['text':' Our most common non-jit allocation path is NoGC; thus, if we fail the','line_number':84,'multiline':False]['text':' alloc and cannot GC, we *must* return nullptr here so that the caller','line_number':85,'multiline':False]['text':' will do a CanGC allocation to clear the nursery. Failing to do so will','line_number':86,'multiline':False]['text':' cause all allocations on this path to land in Tenured, and we will not','line_number':87,'multiline':False]['text':' get the benefit of the nursery.','line_number':88,'multiline':False]['text':' Attempt to allocate a new JSObject out of the nursery. If there is not','line_number':108,'multiline':False]['text':' enough room in the nursery or there is an OOM, this method will return','line_number':109,'multiline':False]['text':' nullptr.','line_number':110,'multiline':False]['text':' Exceeding gcMaxBytes while tenuring can disable the Nursery.','line_number':131,'multiline':False]['text':' Attempt to allocate a new string out of the nursery. If there is not enough','line_number':174,'multiline':False]['text':' room in the nursery or there is an OOM, this method will return nullptr.','line_number':175,'multiline':False]['text':' Exceeding gcMaxBytes while tenuring can disable the Nursery, and','line_number':194,'multiline':False]['text':' other heuristics can disable nursery strings for this zone.','line_number':195,'multiline':False]['text':' = CanGC ','line_number':204,'multiline':True]['text':' Off-thread alloc cannot trigger GC or make runtime assertions.','line_number':214,'multiline':False]['text':' Our most common non-jit allocation path is NoGC; thus, if we fail the','line_number':237,'multiline':False]['text':' alloc and cannot GC, we *must* return nullptr here so that the caller','line_number':238,'multiline':False]['text':' will do a CanGC allocation to clear the nursery. Failing to do so will','line_number':239,'multiline':False]['text':' cause all allocations on this path to land in Tenured, and we will not','line_number':240,'multiline':False]['text':' get the benefit of the nursery.','line_number':241,'multiline':False]['text':' Attempt to allocate a new BigInt out of the nursery. If there is not enough','line_number':250,'multiline':False]['text':' room in the nursery or there is an OOM, this method will return nullptr.','line_number':251,'multiline':False]['text':' Exceeding gcMaxBytes while tenuring can disable the Nursery, and','line_number':270,'multiline':False]['text':' other heuristics can disable nursery BigInts for this zone.','line_number':271,'multiline':False]['text':' = CanGC ','line_number':280,'multiline':True]['text':' Off-thread alloc cannot trigger GC or make runtime assertions.','line_number':286,'multiline':False]['text':' Our most common non-jit allocation path is NoGC; thus, if we fail the','line_number':309,'multiline':False]['text':' alloc and cannot GC, we *must* return nullptr here so that the caller','line_number':310,'multiline':False]['text':' will do a CanGC allocation to clear the nursery. Failing to do so will','line_number':311,'multiline':False]['text':' cause all allocations on this path to land in Tenured, and we will not','line_number':312,'multiline':False]['text':' get the benefit of the nursery.','line_number':313,'multiline':False]['text':' = CanGC ','line_number':335,'multiline':True]['text':' static ','line_number':364,'multiline':True]['text':' Bump allocate in the arena's current free-list span.','line_number':367,'multiline':False]['text':' Get the next available free list and allocate out of it. This may','line_number':370,'multiline':False]['text':' acquire a new arena, which will lock the chunk list. If there are no','line_number':371,'multiline':False]['text':' chunks available it may also allocate new memory directly.','line_number':372,'multiline':False]['text':' We count this regardless of the profiler's state, assuming that it costs','line_number':391,'multiline':False]['text':' just as much to count it, as to check the profiler's state and decide not','line_number':392,'multiline':False]['text':' to count it.','line_number':393,'multiline':False]['text':' Either there was no memory available for a new chunk or the heap hit its','line_number':399,'multiline':False]['text':' size limit. Try to perform an all-compartments, non-incremental, shrinking','line_number':400,'multiline':False]['text':' GC and wait for it to finish.','line_number':401,'multiline':False]['text':' Crash if we perform a GC action when it is not safe.','line_number':440,'multiline':False]['text':' For testing out of memory conditions','line_number':445,'multiline':False]['text':' If we are doing a fallible allocation, percolate up the OOM','line_number':447,'multiline':False]['text':' instead of reporting it.','line_number':448,'multiline':False]['text':' Invoking the interrupt callback can fail and we can't usefully','line_number':465,'multiline':False]['text':' handle that here. Just check in case we need to collect instead.','line_number':466,'multiline':False]['text':' static ','line_number':475,'multiline':True]['text':' ///////////  Arena -> Thing Allocator  //////////////////////////////////////','line_number':504,'multiline':False]['text':' Join the previous invocation of the task. This will return immediately','line_number':509,'multiline':False]['text':' if the thread has never been started.','line_number':510,'multiline':False]['text':' static ','line_number':516,'multiline':True]['text':' static ','line_number':528,'multiline':True]['text':' It should not be possible to allocate on the main thread while we are','line_number':531,'multiline':False]['text':' inside a GC.','line_number':532,'multiline':False]['text':' static ','line_number':539,'multiline':True]['text':' A GC may be happening on the main thread, but zones used by off thread','line_number':542,'multiline':False]['text':' tasks are never collected.','line_number':543,'multiline':False]['text':' static ','line_number':551,'multiline':True]['text':' Called by compacting GC to refill a free list while we are in a GC.','line_number':553,'multiline':False]['text':' See if we can proceed without taking the GC lock.','line_number':572,'multiline':False]['text':' Empty arenas should be immediately freed.','line_number':579,'multiline':False]['text':' Parallel threads have their own ArenaLists, but chunks are shared;','line_number':585,'multiline':False]['text':' if we haven't already, take the GC lock now to avoid racing.','line_number':586,'multiline':False]['text':' Although our chunk should definitely have enough space for another arena,','line_number':596,'multiline':False]['text':' there are other valid reasons why TenuredChunk::allocateArena() may fail.','line_number':597,'multiline':False]['text':' This allocation is infallible.','line_number':635,'multiline':False]['text':' Ensure that anything allocated during the mark or sweep phases of an','line_number':641,'multiline':False]['text':' incremental GC will be marked black by pre-marking all free cells in the','line_number':642,'multiline':False]['text':' arena we are about to allocate from.','line_number':643,'multiline':False]['text':' This can only be changed on the main thread otherwise we could race.','line_number':653,'multiline':False]['text':' This can only be changed on the main thread otherwise we could race.','line_number':673,'multiline':False]['text':' ///////////  TenuredChunk -> Arena Allocator  ///////////////////////////////','line_number':691,'multiline':False]['text':' To minimize memory waste, we do not want to run the background chunk','line_number':694,'multiline':False]['text':' allocation if we already have some empty chunks or when the runtime has','line_number':695,'multiline':False]['text':' a small heap size (and therefore likely has a small growth rate).','line_number':696,'multiline':False]['text':' Fail the allocation if we are over our heap size limits.','line_number':708,'multiline':False]['text':' Trigger an incremental slice if needed.','line_number':716,'multiline':False]['text':' numArenasFreeCommitted will be updated in addArenasInPageToFreeList.','line_number':757,'multiline':False]['text':' No need to update numArenasFree, as the arena is still free, it just','line_number':758,'multiline':False]['text':' changes from decommitted to committed free. Later fetchNextFreeArena should','line_number':759,'multiline':False]['text':' update the numArenasFree.','line_number':760,'multiline':False]['text':'
 * Search for and return the next decommitted page. Our goal is to keep
 * lastDecommittedPageOffset "close" to a free page. We do this by setting
 * it to the most recently freed page when we free, and forcing it to
 * the last alloc + 1 when we allocate.
 ','line_number':783,'multiline':True]['text':' Note: lastFreeArenaOffset can be past the end of the list. ','line_number':790,'multiline':True]['text':' ///////////  System -> TenuredChunk Allocator  //////////////////////////////','line_number':804,'multiline':False]['text':' static ','line_number':876,'multiline':True]['text':' The chunk may still have some regions marked as no-access. ','line_number':888,'multiline':True]['text':'
   * Poison the chunk. Note that decommitAllArenas() below will mark the
   * arenas as inaccessible (for memory sanitizers).
   ','line_number':891,'multiline':True]['text':'
   * Decommit the arenas. We do this after poisoning so that if the OS does
   * not have to recycle the pages, we still get the benefit of poisoning.
   ','line_number':900,'multiline':True]['text':' The rest of info fields are initialized in pickChunk. ','line_number':910,'multiline':True]