['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
******************************************************************************
*   file name:  nfsubs.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
* Modification history
* Date        Name      Comments
* 10/11/2001  Doug      Ported from ICU4J
','line_number':3,'multiline':True]['text':' for 'typeid' to work','line_number':19,'multiline':False]['text':' "==" ','line_number':39,'multiline':True]['text':' ">>>" ','line_number':43,'multiline':True]['text':' ">>" ','line_number':47,'multiline':True]['text':'oldRuleValue','line_number':63,'multiline':True]['text':' '='','line_number':65,'multiline':False]['text':'oldRuleValue','line_number':113,'multiline':True]['text':'oldUpperBound','line_number':117,'multiline':True]['text':' '<'','line_number':119,'multiline':False]['text':'oldUpperBound','line_number':168,'multiline':True]['text':' '>'','line_number':172,'multiline':False]['text':'oldUpperBound','line_number':195,'multiline':True]['text':' '<'','line_number':196,'multiline':False]['text':'number','line_number':219,'multiline':True]['text':'toInsertInto','line_number':219,'multiline':True]['text':'_pos','line_number':219,'multiline':True]['text':'recursionCount','line_number':219,'multiline':True]['text':'status','line_number':219,'multiline':True]['text':'number','line_number':220,'multiline':True]['text':'oldUpperBound','line_number':232,'multiline':True]['text':' '>'','line_number':233,'multiline':False]['text':'oldRuleValue','line_number':253,'multiline':True]['text':'oldUpperBound','line_number':254,'multiline':True]['text':' '>'','line_number':255,'multiline':False]['text':'number','line_number':293,'multiline':True]['text':'toInsertInto','line_number':293,'multiline':True]['text':'_pos','line_number':293,'multiline':True]['text':'recursionCount','line_number':293,'multiline':True]['text':'status','line_number':293,'multiline':True]['text':'lenientParse','line_number':299,'multiline':True]['text':'oldUpperBound','line_number':304,'multiline':True]['text':' '<'','line_number':305,'multiline':False]['text':' if the description is empty, return a NullSubstitution','line_number':325,'multiline':False]['text':' if the description begins with '<'...','line_number':331,'multiline':False]['text':' throw an exception if the rule is a negative number','line_number':333,'multiline':False]['text':' rule','line_number':334,'multiline':False]['text':' throw new IllegalArgumentException("<< not allowed in negative-number rule");','line_number':336,'multiline':False]['text':' if the rule is a fraction rule, return an','line_number':341,'multiline':False]['text':' IntegralPartSubstitution','line_number':342,'multiline':False]['text':' if the rule set containing the rule is a fraction','line_number':349,'multiline':False]['text':' rule set, return a NumeratorSubstitution','line_number':350,'multiline':False]['text':' otherwise, return a MultiplierSubstitution','line_number':356,'multiline':False]['text':' if the description begins with '>'...','line_number':362,'multiline':False]['text':' if the rule is a negative-number rule, return','line_number':364,'multiline':False]['text':' an AbsoluteValueSubstitution','line_number':365,'multiline':False]['text':' if the rule is a fraction rule, return a','line_number':370,'multiline':False]['text':' FractionalPartSubstitution','line_number':371,'multiline':False]['text':' if the rule set owning the rule is a fraction rule set,','line_number':378,'multiline':False]['text':' throw an exception','line_number':379,'multiline':False]['text':' throw new IllegalArgumentException(">> not allowed in fraction rule set");','line_number':381,'multiline':False]['text':' otherwise, return a ModulusSubstitution','line_number':386,'multiline':False]['text':' if the description begins with '=', always return a','line_number':392,'multiline':False]['text':' SameValueSubstitution','line_number':393,'multiline':False]['text':' and if it's anything else, throw an exception','line_number':397,'multiline':False]['text':' throw new IllegalArgumentException("Illegal substitution character");','line_number':399,'multiline':False]['text':' the description should begin and end with the same character.','line_number':411,'multiline':False]['text':' If it doesn't that's a syntax error.  Otherwise,','line_number':412,'multiline':False]['text':' makeSubstitution() was the only thing that needed to know','line_number':413,'multiline':False]['text':' about these characters, so strip them off','line_number':414,'multiline':False]['text':' throw new IllegalArgumentException("Illegal substitution syntax");','line_number':423,'multiline':False]['text':' if the description was just two paired token characters','line_number':429,'multiline':False]['text':' (i.e., "<<" or ">>"), it uses the rule set it belongs to to','line_number':430,'multiline':False]['text':' format its result','line_number':431,'multiline':False]['text':' if the description contains a rule set name, that's the rule','line_number':435,'multiline':False]['text':' set we use to format the result: get a reference to the','line_number':436,'multiline':False]['text':' names rule set','line_number':437,'multiline':False]['text':' if the description begins with 0 or #, treat it as a','line_number':441,'multiline':False]['text':' DecimalFormat pattern, and initialize a DecimalFormat with','line_number':442,'multiline':False]['text':' that pattern (then set it to use the DecimalFormatSymbols','line_number':443,'multiline':False]['text':' belonging to our formatter)','line_number':444,'multiline':False]['text':' test for NULL ','line_number':451,'multiline':True]['text':' if the description is ">>>", this substitution bypasses the','line_number':463,'multiline':False]['text':' usual rule-search process and always uses the rule that precedes','line_number':464,'multiline':False]['text':' it in its own rule set's rule list (this is used for place-value','line_number':465,'multiline':False]['text':' notations: formats where you want to see a particular part of','line_number':466,'multiline':False]['text':' a number even when it's 0)','line_number':467,'multiline':False]['text':' this causes problems when >>> is used in a frationalPartSubstitution','line_number':469,'multiline':False]['text':' this->ruleSet = NULL;','line_number':470,'multiline':False]['text':' and of the description is none of these things, it's a syntax error','line_number':475,'multiline':False]['text':' throw new IllegalArgumentException("Illegal substitution syntax");','line_number':477,'multiline':False]['text':'*
 * Set's the substitution's divisor.  Used by NFRule.setBaseValue().
 * A no-op for all substitutions except multiplier and modulus
 * substitutions.
 * @param radix The radix of the divisor
 * @param exponent The exponent of the divisor
 ','line_number':488,'multiline':True]['text':'radix','line_number':496,'multiline':True]['text':'exponent','line_number':496,'multiline':True]['text':'status','line_number':496,'multiline':True]['text':' a no-op for all substitutions except multiplier and modulus substitutions','line_number':497,'multiline':False]['text':'status','line_number':501,'multiline':True]['text':'-----------------------------------------------------------------------','line_number':507,'multiline':False]['text':' boilerplate','line_number':508,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':509,'multiline':False]['text':'*
 * Compares two substitutions for equality
 * @param The substitution to compare this one to
 * @return true if the two substitutions are functionally equivalent
 ','line_number':513,'multiline':True]['text':' compare class and all of the fields all substitutions have','line_number':521,'multiline':False]['text':' in common','line_number':522,'multiline':False]['text':' this should be called by subclasses before their own equality tests','line_number':523,'multiline':False]['text':' && ruleSet == rhs.ruleSet causes circularity, other checks to make instead?','line_number':527,'multiline':False]['text':'*
 * Returns a textual description of the substitution
 * @return A textual description of the substitution.  This might
 * not be identical to the description it was created from, but
 * it'll produce the same result.
 ','line_number':533,'multiline':True]['text':' use tokenChar() to get the character at the beginning and','line_number':542,'multiline':False]['text':' end of the substitutin token.  In between them will go','line_number':543,'multiline':False]['text':' either the name of the rule set it uses, or the pattern of','line_number':544,'multiline':False]['text':' the DecimalFormat it uses','line_number':545,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':559,'multiline':False]['text':' formatting','line_number':560,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':561,'multiline':False]['text':'*
 * Performs a mathematical operation on the number, formats it using
 * either ruleSet or decimalFormat, and inserts the result into
 * toInsertInto.
 * @param number The number being formatted.
 * @param toInsertInto The string we insert the result into
 * @param pos The position in toInsertInto where the owning rule's
 * rule text begins (this value is added to this substitution's
 * position to determine exactly where to insert the new text)
 ','line_number':563,'multiline':True]['text':' Perform a transformation on the number that is dependent','line_number':577,'multiline':False]['text':' on the type of substitution this is, then just call its','line_number':578,'multiline':False]['text':' rule set's format() method to format the result','line_number':579,'multiline':False]['text':' or perform the transformation on the number (preserving','line_number':583,'multiline':False]['text':' the result's fractional part if the formatter it set','line_number':584,'multiline':False]['text':' to show it), then use that formatter's format() method','line_number':585,'multiline':False]['text':' to format the result','line_number':586,'multiline':False]['text':' We have gone beyond double precision. Something has to give. ','line_number':597,'multiline':False]['text':' We're favoring accuracy of the large number over potential rules ','line_number':598,'multiline':False]['text':' that round like a CompactDecimalFormat, which is not a common use case. ','line_number':599,'multiline':False]['text':' ','line_number':600,'multiline':False]['text':' Perform a transformation on the number that is dependent ','line_number':601,'multiline':False]['text':' on the type of substitution this is, then just call its ','line_number':602,'multiline':False]['text':' rule set's format() method to format the result ','line_number':603,'multiline':False]['text':'*
 * Performs a mathematical operation on the number, formats it using
 * either ruleSet or decimalFormat, and inserts the result into
 * toInsertInto.
 * @param number The number being formatted.
 * @param toInsertInto The string we insert the result into
 * @param pos The position in toInsertInto where the owning rule's
 * rule text begins (this value is added to this substitution's
 * position to determine exactly where to insert the new text)
 ','line_number':612,'multiline':True]['text':' perform a transformation on the number being formatted that','line_number':624,'multiline':False]['text':' is dependent on the type of substitution this is','line_number':625,'multiline':False]['text':' This is probably a minus rule. Combine it with an infinite rule.','line_number':629,'multiline':False]['text':' if the result is an integer, from here on out we work in integer','line_number':635,'multiline':False]['text':' space (saving time and memory and preserving accuracy)','line_number':636,'multiline':False]['text':' if the result isn't an integer, then call either our rule set's','line_number':640,'multiline':False]['text':' format() method or our DecimalFormat's format() method to','line_number':641,'multiline':False]['text':' format the result','line_number':642,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':655,'multiline':False]['text':' parsing','line_number':656,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':657,'multiline':False]['text':'*
 * Parses a string using the rule set or DecimalFormat belonging
 * to this substitution.  If there's a match, a mathematical
 * operation (the inverse of the one used in formatting) is
 * performed on the result of the parse and the value passed in
 * and returned as the result.  The parse position is updated to
 * point to the first unmatched character in the string.
 * @param text The string to parse
 * @param parsePosition On entry, ignored, but assumed to be 0.
 * On exit, this is updated to point to the first unmatched
 * character (or 0 if the substitution didn't match)
 * @param baseValue A partial parse result that should be
 * combined with the result of this parse
 * @param upperBound When searching the rule set for a rule
 * matching the string passed in, only rules with base values
 * lower than this are considered
 * @param lenientParse If true and matching against rules fails,
 * the substitution will also try matching the text against
 * numerals using a default-costructed NumberFormat.  If false,
 * no extra work is done.  (This value is false whenever the
 * formatter isn't in lenient-parse mode, but is also false
 * under some conditions even when the formatter _is_ in
 * lenient-parse mode.)
 * @return If there's a match, this is the result of composing
 * baseValue with whatever was returned from matching the
 * characters.  This will be either a Long or a Double.  If there's
 * no match this is new Long(0) (not null), and parsePosition
 * is left unchanged.
 ','line_number':663,'multiline':True]['text':' figure out the highest base value a rule can have and match','line_number':704,'multiline':False]['text':' the text being parsed (this varies according to the type of','line_number':705,'multiline':False]['text':' substitutions: multiplier, modulus, and numerator substitutions','line_number':706,'multiline':False]['text':' restrict the search to rules with base values lower than their','line_number':707,'multiline':False]['text':' own; same-value substitutions leave the upper bound wherever','line_number':708,'multiline':False]['text':' it was, and the others allow any rule to match','line_number':709,'multiline':False]['text':' use our rule set to parse the text.  If that fails and','line_number':712,'multiline':False]['text':' lenient parsing is enabled (this is always false if the','line_number':713,'multiline':False]['text':' formatter's lenient-parsing mode is off, but it may also','line_number':714,'multiline':False]['text':' be false even when the formatter's lenient-parse mode is','line_number':715,'multiline':False]['text':' on), then also try parsing the text using a default-','line_number':716,'multiline':False]['text':' constructed NumberFormat','line_number':717,'multiline':False]['text':' ...or use our DecimalFormat to parse the text','line_number':729,'multiline':False]['text':' if the parse was successful, we've already advanced the caller's','line_number':734,'multiline':False]['text':' parse position (this is the one function that doesn't have one','line_number':735,'multiline':False]['text':' of its own).  Derive a parse result and return it as a Long,','line_number':736,'multiline':False]['text':' if possible, or a Double','line_number':737,'multiline':False]['text':' composeRuleValue() produces a full parse result from','line_number':742,'multiline':False]['text':' the partial parse result passed to this function from','line_number':743,'multiline':False]['text':' the caller (this is either the owning rule's base value','line_number':744,'multiline':False]['text':' or the partial result obtained from composing the','line_number':745,'multiline':False]['text':' owning rule's base value with its other substitution's','line_number':746,'multiline':False]['text':' parse result) and the partial parse result obtained by','line_number':747,'multiline':False]['text':' matching the substitution (which will be the same value','line_number':748,'multiline':False]['text':' the caller would get by parsing just this part of the','line_number':749,'multiline':False]['text':' text with RuleBasedNumberFormat.parse() ).  How the two','line_number':750,'multiline':False]['text':' values are used to derive the full parse result depends','line_number':751,'multiline':False]['text':' on the types of substitutions: For a regular rule, the','line_number':752,'multiline':False]['text':' ultimate result is its multiplier substitution's result','line_number':753,'multiline':False]['text':' times the rule's divisor (or the rule's base value) plus','line_number':754,'multiline':False]['text':' the modulus substitution's result (which will actually','line_number':755,'multiline':False]['text':' supersede part of the rule's base value).  For a negative-','line_number':756,'multiline':False]['text':' number rule, the result is the negative of its substitution's','line_number':757,'multiline':False]['text':' result.  For a fraction rule, it's the sum of its two','line_number':758,'multiline':False]['text':' substitution results.  For a rule in a fraction rule set,','line_number':759,'multiline':False]['text':' it's the numerator substitution's result divided by','line_number':760,'multiline':False]['text':' the rule's base value.  Results from same-value substitutions','line_number':761,'multiline':False]['text':' propagate back upard, and null substitutions don't affect','line_number':762,'multiline':False]['text':' the result.','line_number':763,'multiline':False]['text':' if the parse was UNsuccessful, return 0','line_number':767,'multiline':False]['text':'*
     * Returns true if this is a modulus substitution.  (We didn't do this
     * with instanceof partially because it causes source files to
     * proliferate and partially because we have to port this to C++.)
     * @return true if this object is an instance of ModulusSubstitution
     ','line_number':774,'multiline':True]['text':'===================================================================','line_number':785,'multiline':False]['text':' SameValueSubstitution','line_number':786,'multiline':False]['text':'===================================================================','line_number':787,'multiline':False]['text':'*
 * A substitution that passes the value passed to it through unchanged.
 * Represented by == in rule descriptions.
 ','line_number':789,'multiline':True]['text':' throw new IllegalArgumentException("== is not a legal token");','line_number':800,'multiline':False]['text':'===================================================================','line_number':807,'multiline':False]['text':' MultiplierSubstitution','line_number':808,'multiline':False]['text':'===================================================================','line_number':809,'multiline':False]['text':'===================================================================','line_number':820,'multiline':False]['text':' ModulusSubstitution','line_number':821,'multiline':False]['text':'===================================================================','line_number':822,'multiline':False]['text':'*
 * A substitution that divides the number being formatted by the its rule's
 * divisor and formats the remainder.  Represented by "&gt;&gt;" in a
 * regular rule.
 ','line_number':824,'multiline':True]['text':' the owning rule's divisor controls the behavior of this','line_number':839,'multiline':False]['text':' substitution: rather than keeping a backpointer to the rule,','line_number':840,'multiline':False]['text':' we keep a copy of the divisor','line_number':841,'multiline':False]['text':' the >>> token doesn't alter how this substituion calculates the','line_number':848,'multiline':False]['text':' values it uses for formatting and parsing, but it changes','line_number':849,'multiline':False]['text':' what's done with that value after it's obtained: >>> short-','line_number':850,'multiline':False]['text':' circuits the rule-search process and goes straight to the','line_number':851,'multiline':False]['text':' specified rule to format the substitution value','line_number':852,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':866,'multiline':False]['text':' formatting','line_number':867,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':868,'multiline':False]['text':'*
 * If this is a &gt;&gt;&gt; substitution, use ruleToUse to fill in
 * the substitution.  Otherwise, just use the superclass function.
 * @param number The number being formatted
 * @toInsertInto The string to insert the result of this substitution
 * into
 * @param pos The position of the rule text in toInsertInto
 ','line_number':871,'multiline':True]['text':' if this isn't a >>> substitution, just use the inherited version','line_number':882,'multiline':False]['text':' of this function (which uses either a rule set or a DecimalFormat','line_number':883,'multiline':False]['text':' to format its substitution value)','line_number':884,'multiline':False]['text':' a >>> substitution goes straight to a particular rule to','line_number':888,'multiline':False]['text':' format the substitution value','line_number':889,'multiline':False]['text':'*
* If this is a &gt;&gt;&gt; substitution, use ruleToUse to fill in
* the substitution.  Otherwise, just use the superclass function.
* @param number The number being formatted
* @toInsertInto The string to insert the result of this substitution
* into
* @param pos The position of the rule text in toInsertInto
','line_number':896,'multiline':True]['text':' if this isn't a >>> substitution, just use the inherited version','line_number':907,'multiline':False]['text':' of this function (which uses either a rule set or a DecimalFormat','line_number':908,'multiline':False]['text':' to format its substitution value)','line_number':909,'multiline':False]['text':' a >>> substitution goes straight to a particular rule to','line_number':913,'multiline':False]['text':' format the substitution value','line_number':914,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':922,'multiline':False]['text':' parsing','line_number':923,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':924,'multiline':False]['text':'*
 * If this is a &gt;&gt;&gt; substitution, match only against ruleToUse.
 * Otherwise, use the superclass function.
 * @param text The string to parse
 * @param parsePosition Ignored on entry, updated on exit to point to
 * the first unmatched character.
 * @param baseValue The partial parse result prior to calling this
 * routine.
 ','line_number':926,'multiline':True]['text':' if this isn't a >>> substitution, we can just use the','line_number':944,'multiline':False]['text':' inherited parse() routine to do the parsing','line_number':945,'multiline':False]['text':' but if it IS a >>> substitution, we have to do it here: we','line_number':949,'multiline':False]['text':' use the specific rule's doParse() method, and then we have to','line_number':950,'multiline':False]['text':' do some of the other work of NFRuleSet.parse()','line_number':951,'multiline':False]['text':'*
 * Returns a textual description of the substitution
 * @return A textual description of the substitution.  This might
 * not be identical to the description it was created from, but
 * it'll produce the same result.
 ','line_number':965,'multiline':True]['text':' use tokenChar() to get the character at the beginning and','line_number':974,'multiline':False]['text':' end of the substitutin token.  In between them will go','line_number':975,'multiline':False]['text':' either the name of the rule set it uses, or the pattern of','line_number':976,'multiline':False]['text':' the DecimalFormat it uses','line_number':977,'multiline':False]['text':' Must have been a >>> substitution.','line_number':979,'multiline':False]['text':' Otherwise just use the super-class function.','line_number':984,'multiline':False]['text':'===================================================================','line_number':988,'multiline':False]['text':' IntegralPartSubstitution','line_number':989,'multiline':False]['text':'===================================================================','line_number':990,'multiline':False]['text':'===================================================================','line_number':995,'multiline':False]['text':' FractionalPartSubstitution','line_number':996,'multiline':False]['text':'===================================================================','line_number':997,'multiline':False]['text':'*
     * Constructs a FractionalPartSubstitution.  This object keeps a flag
     * telling whether it should format by digits or not.  In addition,
     * it marks the rule set it calls (if any) as a fraction rule set.
     ','line_number':1000,'multiline':True]['text':' akk, ruleSet can change in superclass constructor','line_number':1014,'multiline':False]['text':' cast away const','line_number':1023,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1028,'multiline':False]['text':' formatting','line_number':1029,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1030,'multiline':False]['text':'*
 * If in "by digits" mode, fills in the substitution one decimal digit
 * at a time using the rule set containing this substitution.
 * Otherwise, uses the superclass function.
 * @param number The number being formatted
 * @param toInsertInto The string to insert the result of formatting
 * the substitution into
 * @param pos The position of the owning rule's rule text in
 * toInsertInto
 ','line_number':1032,'multiline':True]['text':' if we're not in "byDigits" mode, just use the inherited','line_number':1046,'multiline':False]['text':' doSubstitution() routine','line_number':1047,'multiline':False]['text':' if we're in "byDigits" mode, transform the value into an integer','line_number':1051,'multiline':False]['text':' by moving the decimal point eight places to the right and','line_number':1052,'multiline':False]['text':' pulling digits off the right one at a time, formatting each digit','line_number':1053,'multiline':False]['text':' as an integer using this substitution's owning rule set','line_number':1054,'multiline':False]['text':' (this is slower, but more accurate, than doing it from the','line_number':1055,'multiline':False]['text':' other end)','line_number':1056,'multiline':False]['text':'          int32_t numberToFormat = (int32_t)uprv_round(transformNumber(number) * uprv_pow(10, kMaxDecimalDigits));','line_number':1058,'multiline':False]['text':'          // this flag keeps us from formatting trailing zeros.  It starts','line_number':1059,'multiline':False]['text':'          // out false because we're pulling from the right, and switches','line_number':1060,'multiline':False]['text':'          // to true the first time we encounter a non-zero digit','line_number':1061,'multiline':False]['text':'          UBool doZeros = FALSE;','line_number':1062,'multiline':False]['text':'          for (int32_t i = 0; i < kMaxDecimalDigits; i++) {','line_number':1063,'multiline':False]['text':'              int64_t digit = numberToFormat % 10;','line_number':1064,'multiline':False]['text':'              if (digit != 0 || doZeros) {','line_number':1065,'multiline':False]['text':'                  if (doZeros && useSpaces) {','line_number':1066,'multiline':False]['text':'                      toInsertInto.insert(_pos + getPos(), gSpace);','line_number':1067,'multiline':False]['text':'                  }','line_number':1068,'multiline':False]['text':'                  doZeros = TRUE;','line_number':1069,'multiline':False]['text':'                  getRuleSet()->format(digit, toInsertInto, _pos + getPos());','line_number':1070,'multiline':False]['text':'              }','line_number':1071,'multiline':False]['text':'              numberToFormat /= 10;','line_number':1072,'multiline':False]['text':'          }','line_number':1073,'multiline':False]['text':' round to 20 fraction digits.','line_number':1077,'multiline':False]['text':' Loop iterates over fraction digits, starting with the LSD.','line_number':1081,'multiline':False]['text':'   include both real digits from the number, and zeros','line_number':1082,'multiline':False]['text':'   to the left of the MSD but to the right of the decimal point.','line_number':1083,'multiline':False]['text':' hack around lack of precision in digitlist. if we would end up with','line_number':1094,'multiline':False]['text':' "foo point" make sure we add a " zero" to the end.','line_number':1095,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1101,'multiline':False]['text':' parsing','line_number':1102,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1103,'multiline':False]['text':'*
 * If in "by digits" mode, parses the string as if it were a string
 * of individual digits; otherwise, uses the superclass function.
 * @param text The string to parse
 * @param parsePosition Ignored on entry, but updated on exit to point
 * to the first unmatched character
 * @param baseValue The partial parse result prior to entering this
 * function
 * @param upperBound Only consider rules with base values lower than
 * this when filling in the substitution
 * @param lenientParse If true, try matching the text as numerals if
 * matching as words doesn't work
 * @return If the match was successful, the current partial parse
 * result; otherwise new Long(0).  The result is either a Long or
 * a Double.
 ','line_number':1105,'multiline':True]['text':'upperBound','line_number':1126,'multiline':True]['text':' if we're not in byDigits mode, we can just use the inherited','line_number':1131,'multiline':False]['text':' doParse()','line_number':1132,'multiline':False]['text':' if we ARE in byDigits mode, parse the text one digit at a time','line_number':1136,'multiline':False]['text':' using this substitution's owning rule set (we do this by setting','line_number':1137,'multiline':False]['text':' upperBound to 10 when calling doParse() ) until we reach','line_number':1138,'multiline':False]['text':' nonmatching text','line_number':1139,'multiline':False]['text':'          double p10 = 0.1;','line_number':1145,'multiline':False]['text':'            digit = temp.getType() == Formattable::kLong ?','line_number':1156,'multiline':False]['text':'               temp.getLong() :','line_number':1157,'multiline':False]['text':'            (int32_t)temp.getDouble();','line_number':1158,'multiline':False]['text':'                  result += digit * p10;','line_number':1178,'multiline':False]['text':'                  p10 /= 10;','line_number':1179,'multiline':False]['text':'===================================================================','line_number':1208,'multiline':False]['text':' AbsoluteValueSubstitution','line_number':1209,'multiline':False]['text':'===================================================================','line_number':1210,'multiline':False]['text':'===================================================================','line_number':1214,'multiline':False]['text':' NumeratorSubstitution','line_number':1215,'multiline':False]['text':'===================================================================','line_number':1216,'multiline':False]['text':' perform a transformation on the number being formatted that','line_number':1220,'multiline':False]['text':' is dependent on the type of substitution this is','line_number':1221,'multiline':False]['text':' if there are leading zeros in the decimal expansion then emit them','line_number':1228,'multiline':False]['text':' if the result is an integer, from here on out we work in integer','line_number':1238,'multiline':False]['text':' space (saving time and memory and preserving accuracy)','line_number':1239,'multiline':False]['text':' if the result isn't an integer, then call either our rule set's','line_number':1243,'multiline':False]['text':' format() method or our DecimalFormat's format() method to','line_number':1244,'multiline':False]['text':' format the result','line_number':1245,'multiline':False]['text':'lenientParse','line_number':1262,'multiline':True]['text':' we don't have to do anything special to do the parsing here,','line_number':1266,'multiline':False]['text':' but we have to turn lenient parsing off-- if we leave it on,','line_number':1267,'multiline':False]['text':' it SERIOUSLY messes up the algorithm','line_number':1268,'multiline':False]['text':' if withZeros is true, we need to count the zeros','line_number':1270,'multiline':False]['text':' and use that to adjust the parse result','line_number':1271,'multiline':False]['text':' parse zero or nothing at all','line_number':1282,'multiline':False]['text':' we failed, either there were no more zeros, or the number was formatted with digits','line_number':1284,'multiline':False]['text':' either way, we're done','line_number':1285,'multiline':False]['text':' we've parsed off the zeros, now let's parse the rest from our current position','line_number':1303,'multiline':False]['text':' any base value will do in this case.  is there a way to','line_number':1307,'multiline':False]['text':' force this to not bother trying all the base values?','line_number':1308,'multiline':False]['text':' compute the 'effective' base and prescale the value down','line_number':1310,'multiline':False]['text':' force conversion!','line_number':1311,'multiline':False]['text':' now add the zeros','line_number':1318,'multiline':False]['text':' d is now our true denominator','line_number':1323,'multiline':False]['text':' U_HAVE_RBNF ','line_number':1343,'multiline':True]