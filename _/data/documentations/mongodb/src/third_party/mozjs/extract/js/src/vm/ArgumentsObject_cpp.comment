['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js_*_str','line_number':21,'multiline':False]['text':' js::FrameIter::unaliasedForEachActual','line_number':24,'multiline':False]['text':' static ','line_number':31,'multiline':True]['text':' static ','line_number':37,'multiline':True]['text':' Copy arguments. ','line_number':85,'multiline':True]['text':' static ','line_number':93,'multiline':True]['text':' static ','line_number':109,'multiline':True]['text':'
   * If a call object exists and the arguments object aliases formals, the
   * call object is the canonical location for formals.
   ','line_number':136,'multiline':True]['text':' Copy all arguments. ','line_number':160,'multiline':True]['text':' +1 to skip this. ','line_number':161,'multiline':True]['text':'
   * If a call object exists and the arguments object aliases formals, the
   * call object is the canonical location for formals.
   ','line_number':176,'multiline':True]['text':' Copy actual arguments. ','line_number':192,'multiline':True]['text':' Define formals which are not part of the actuals. ','line_number':195,'multiline':True]['text':'
   * Ion frames are copying every argument onto the stack, other locations are
   * invalid.
   ','line_number':211,'multiline':True]['text':' Copy actual arguments.','line_number':240,'multiline':False]['text':' Fill in missing arguments with |undefined|.','line_number':246,'multiline':False]['text':'
   * If a call object exists and the arguments object aliases formals, the
   * call object is the canonical location for formals.
   ','line_number':255,'multiline':True]['text':' static ','line_number':318,'multiline':True]['text':' The copyArgs call below can allocate objects, so add this block scope','line_number':337,'multiline':False]['text':' to make sure we set the metadata for this arguments object first.','line_number':338,'multiline':False]['text':' Make the object safe for GC.','line_number':350,'multiline':False]['text':' Initialize |args| with a pattern that is safe for GC tracing.','line_number':358,'multiline':False]['text':' Copy [0, numArgs) into data->slots. ','line_number':368,'multiline':True]['text':' static ','line_number':421,'multiline':True]['text':' static ','line_number':432,'multiline':True]['text':' static ','line_number':445,'multiline':True]['text':' JIT code calls this directly (no callVM), because it's faster, so we're','line_number':450,'multiline':False]['text':' not allowed to GC in here.','line_number':451,'multiline':False]['text':' Make the object safe for GC. Don't report OOM, the slow path will','line_number':466,'multiline':False]['text':' retry the allocation.','line_number':467,'multiline':False]['text':' static ','line_number':494,'multiline':True]['text':' static ','line_number':515,'multiline':True]['text':' Arguments might resolve indexes, Symbol.iterator, or length/callee.','line_number':518,'multiline':False]['text':'
     * arg can exceed the number of arguments if a script changed the
     * prototype to point to another Arguments object with a bigger argc.
     ','line_number':531,'multiline':True]['text':'
   * For simplicity we use delete/define to replace the property with a
   * simple data property. Note that we rely on ArgumentsObject::obj_delProperty
   * to set the corresponding override-bit.
   * Note also that we must define the property instead of setting it in case
   * the user has changed the prototype to an object that has a setter for
   * this id.
   ','line_number':575,'multiline':True]['text':' static ','line_number':590,'multiline':True]['text':' static ','line_number':599,'multiline':True]['text':' static ','line_number':615,'multiline':True]['text':' Note: we don't need to call ReshapeForShadowedProp here because we're just','line_number':638,'multiline':False]['text':' resolving an existing property instead of defining a new property.','line_number':639,'multiline':False]['text':' static ','line_number':653,'multiline':True]['text':' static ','line_number':696,'multiline':True]['text':' Trigger reflection.','line_number':703,'multiline':False]['text':' The custom data properties (see MappedArgGetter, MappedArgSetter) have to','line_number':733,'multiline':False]['text':' be (re)defined manually because PropertyDescriptor and NativeDefineProperty','line_number':734,'multiline':False]['text':' don't support these special properties.','line_number':735,'multiline':False]['text':'','line_number':736,'multiline':False]['text':' This exists in order to let JS code change the configurable/enumerable','line_number':737,'multiline':False]['text':' attributes for these properties.','line_number':738,'multiline':False]['text':'','line_number':739,'multiline':False]['text':' Note: because this preserves the default mapped-arguments behavior, we','line_number':740,'multiline':False]['text':' don't need to mark elements as overridden or deleted.','line_number':741,'multiline':False]['text':' Mapped properties aren't used when defining a non-writable property.','line_number':749,'multiline':False]['text':' First, resolve the property to simplify the code below.','line_number':752,'multiline':False]['text':' Change the property's attributes by implementing the relevant parts of','line_number':764,'multiline':False]['text':' ValidateAndApplyPropertyDescriptor (ES2021 draft, 10.1.6.3), in particular','line_number':765,'multiline':False]['text':' steps 4 and 9.','line_number':766,'multiline':False]['text':' Determine whether the property should be configurable and/or enumerable.','line_number':768,'multiline':False]['text':' Property is not configurable so disallow any attribute changes.','line_number':779,'multiline':False]['text':' ES 2017 draft 9.4.4.2','line_number':796,'multiline':False]['text':' static ','line_number':797,'multiline':True]['text':' Step 1.','line_number':802,'multiline':False]['text':' Steps 2-3.','line_number':805,'multiline':False]['text':' Step 4.','line_number':813,'multiline':False]['text':' Step 5.','line_number':816,'multiline':False]['text':' Step 5.a.','line_number':819,'multiline':False]['text':' In this case the live mapping is supposed to keep working.','line_number':826,'multiline':False]['text':' Step 6. NativeDefineProperty will lookup [[Value]] for us.','line_number':831,'multiline':False]['text':' Step 7.','line_number':842,'multiline':False]['text':' Step 8.','line_number':847,'multiline':False]['text':' Step 9.','line_number':866,'multiline':False]['text':'
     * arg can exceed the number of arguments if a script changed the
     * prototype to point to another Arguments object with a bigger argc.
     ','line_number':875,'multiline':True]['text':'
   * For simplicity we use delete/define to replace the property with a
   * simple data property. Note that we rely on ArgumentsObject::obj_delProperty
   * to set the corresponding override-bit.
   ','line_number':915,'multiline':True]['text':' static ','line_number':927,'multiline':True]['text':' static ','line_number':982,'multiline':True]['text':' Trigger reflection.','line_number':990,'multiline':False]['text':' Template objects have no ArgumentsData.','line_number':1032,'multiline':False]['text':' static ','line_number':1037,'multiline':True]['text':'
 * The classes below collaborate to lazily reflect and synchronize actual
 * argument values, argument count, and callee function object stored in a
 * stack frame with their corresponding property values in the frame's
 * arguments object.
 ','line_number':1093,'multiline':True]['text':' addProperty','line_number':1100,'multiline':False]['text':' delProperty','line_number':1101,'multiline':False]['text':' enumerate','line_number':1102,'multiline':False]['text':' newEnumerate','line_number':1103,'multiline':False]['text':' resolve','line_number':1104,'multiline':False]['text':' mayResolve','line_number':1105,'multiline':False]['text':' finalize','line_number':1106,'multiline':False]['text':' call','line_number':1107,'multiline':False]['text':' hasInstance','line_number':1108,'multiline':False]['text':' construct','line_number':1109,'multiline':False]['text':' trace','line_number':1110,'multiline':False]['text':' objectMovedOp','line_number':1114,'multiline':False]['text':' lookupProperty','line_number':1118,'multiline':False]['text':' defineProperty','line_number':1119,'multiline':False]['text':' hasProperty','line_number':1120,'multiline':False]['text':' getProperty','line_number':1121,'multiline':False]['text':' setProperty','line_number':1122,'multiline':False]['text':' getOwnPropertyDescriptor','line_number':1123,'multiline':False]['text':' deleteProperty','line_number':1124,'multiline':False]['text':' getElements','line_number':1125,'multiline':False]['text':' funToString','line_number':1126,'multiline':False]['text':'
 * Unmapped arguments is significantly less magical than mapped arguments, so
 * it is represented by a different class while sharing some functionality.
 ','line_number':1140,'multiline':True]['text':' addProperty','line_number':1145,'multiline':False]['text':' delProperty','line_number':1146,'multiline':False]['text':' enumerate','line_number':1147,'multiline':False]['text':' newEnumerate','line_number':1148,'multiline':False]['text':' resolve','line_number':1149,'multiline':False]['text':' mayResolve','line_number':1150,'multiline':False]['text':' finalize','line_number':1151,'multiline':False]['text':' call','line_number':1152,'multiline':False]['text':' hasInstance','line_number':1153,'multiline':False]['text':' construct','line_number':1154,'multiline':False]['text':' trace','line_number':1155,'multiline':False]['text':' objectMovedOp','line_number':1159,'multiline':False]