['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' The `JS::Stencil` type holds the output of the JS Parser before it is
 * allocated on the GC heap as a `JSScript`. This form may be serialized as
 * part of building a bytecode cache. This `Stencil` is not associated with any
 * particular Realm and may be generated off-main-thread, making it useful for
 * building script loaders.
 ','line_number':10,'multiline':True]['text':' RefPtr, already_AddRefed','line_number':17,'multiline':False]['text':' mozilla::Utf8Unit','line_number':18,'multiline':False]['text':' size_t','line_number':20,'multiline':False]['text':' JS_PUBLIC_API','line_number':22,'multiline':False]['text':' JS::ReadOnlyCompileOptions','line_number':24,'multiline':False]['text':' JS::OffThreadCompileCallback','line_number':25,'multiline':False]['text':' JS::SourceText','line_number':26,'multiline':False]['text':' Underlying opaque type.','line_number':31,'multiline':False]['text':' These non-member functions let us manipulate the ref counts of the opaque','line_number':42,'multiline':False]['text':' Stencil type. The RefPtrTraits below calls these for use when using the','line_number':43,'multiline':False]['text':' RefPtr type.','line_number':44,'multiline':False]['text':' Compile the source text into a JS::Stencil using the provided options. The','line_number':48,'multiline':False]['text':' resulting stencil may be instantiated into any Realm on the current runtime','line_number':49,'multiline':False]['text':' and may be used multiple times.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' NOTE: On error, a null will be returned and an exception will be set on the','line_number':52,'multiline':False]['text':'       JSContext.','line_number':53,'multiline':False]['text':' Compile the source text into a JS::Stencil using "module" parse goal. The','line_number':61,'multiline':False]['text':' ECMAScript spec defines special semantics so we use a seperate entry point','line_number':62,'multiline':False]['text':' here for clarity. The result is still a JS::Stencil, but should use the','line_number':63,'multiline':False]['text':' appropriate instantiate API below.','line_number':64,'multiline':False]['text':' Off-thread compilation uses the normal off-thread APIs but uses a special','line_number':72,'multiline':False]['text':' finish method to avoid automatic instantiation. This is used for both global','line_number':73,'multiline':False]['text':' and modules compiles.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' NOTE: CompileOptions::useOffThreadParseGlobal must be false.','line_number':76,'multiline':False]['text':' Instantiate the Stencil into current Realm and return the JSScript.','line_number':80,'multiline':False]['text':' Instantiate a module Stencil and return the associated object. Inside the','line_number':85,'multiline':False]['text':' engine this is a js::ModuleObject.','line_number':86,'multiline':False]['text':' Serialize the Stencil into the transcode buffer.','line_number':91,'multiline':False]['text':' Deserialize data and create a new Stencil.','line_number':96,'multiline':False]['text':' namespace JS','line_number':114,'multiline':False]['text':' namespace mozilla','line_number':122,'multiline':False]['text':' js_experimental_JSStencil_h','line_number':124,'multiline':False]