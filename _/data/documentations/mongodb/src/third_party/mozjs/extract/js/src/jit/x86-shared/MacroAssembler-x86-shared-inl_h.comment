['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'{{{ check_macroassembler_style','line_number':15,'multiline':False]['text':' ===============================================================','line_number':16,'multiline':False]['text':' Move instructions','line_number':17,'multiline':False]['text':' ===============================================================','line_number':39,'multiline':False]['text':' Logical instructions','line_number':40,'multiline':False]['text':' If the source is zero then bsrl leaves garbage in the destination.','line_number':84,'multiline':False]['text':' Equivalent to mozilla::CountPopulation32()','line_number':116,'multiline':False]['text':' ===============================================================','line_number':138,'multiline':False]['text':' Swap instructions','line_number':139,'multiline':False]['text':' ===============================================================','line_number':153,'multiline':False]['text':' Arithmetic instructions','line_number':154,'multiline':False]['text':' Sign extend eax into edx to make (edx:eax): idiv/udiv are 64-bit.','line_number':208,'multiline':False]['text':' Sign extend eax into edx to make (edx:eax): idiv/udiv are 64-bit.','line_number':222,'multiline':False]['text':' XOR the float in a float register with -0.0.','line_number':248,'multiline':False]['text':' s ^ 0x80000000','line_number':249,'multiline':False]['text':' From MacroAssemblerX86Shared::maybeInlineDouble','line_number':253,'multiline':False]['text':' XOR the float in a float register with -0.0.','line_number':258,'multiline':False]['text':' s ^ 0x80000000000000','line_number':259,'multiline':False]['text':' ===============================================================','line_number':316,'multiline':False]['text':' Rotation instructions','line_number':317,'multiline':False]['text':' ===============================================================','line_number':347,'multiline':False]['text':' Shift instructions','line_number':348,'multiline':False]['text':' Shift amount must be in ecx.','line_number':367,'multiline':False]['text':' Shift amount must be in ecx.','line_number':391,'multiline':False]['text':' Shift amount must be in ecx.','line_number':416,'multiline':False]['text':' ===============================================================','line_number':435,'multiline':False]['text':' Condition functions','line_number':436,'multiline':False]['text':' ===============================================================','line_number':444,'multiline':False]['text':' Branch instructions','line_number':445,'multiline':False]['text':' Note: use movl instead of move32/xorl to ensure flags are not clobbered.','line_number':1097,'multiline':False]['text':' ========================================================================','line_number':1102,'multiline':False]['text':' Memory access primitives.','line_number':1103,'multiline':False]['text':' ========================================================================','line_number':1160,'multiline':False]['text':' Wasm SIMD','line_number':1161,'multiline':False]['text':'','line_number':1162,'multiline':False]['text':' Some parts of the masm API are currently agnostic as to the data's','line_number':1163,'multiline':False]['text':' interpretation as int or float, despite the Intel architecture having','line_number':1164,'multiline':False]['text':' separate functional units and sometimes penalizing type-specific instructions','line_number':1165,'multiline':False]['text':' that operate on data in the "wrong" unit.','line_number':1166,'multiline':False]['text':'','line_number':1167,'multiline':False]['text':' For the time being, we always choose the integer interpretation when we are','line_number':1168,'multiline':False]['text':' forced to choose blind, but whether that is right or wrong depends on the','line_number':1169,'multiline':False]['text':' application.  This applies to moveSimd128, zeroSimd128, loadConstantSimd128,','line_number':1170,'multiline':False]['text':' loadUnalignedSimd128, and storeUnalignedSimd128, at least.','line_number':1171,'multiline':False]['text':'','line_number':1172,'multiline':False]['text':' SSE4.1 or better is assumed.','line_number':1173,'multiline':False]['text':'','line_number':1174,'multiline':False]['text':' The order of operations here follows the header file.','line_number':1175,'multiline':False]['text':' Moves.  See comments above regarding integer operation.','line_number':1177,'multiline':False]['text':' Constants.  See comments above regarding integer operation.','line_number':1183,'multiline':False]['text':' Splat','line_number':1198,'multiline':False]['text':' Extract lane as scalar','line_number':1220,'multiline':False]['text':' Replace lane value','line_number':1263,'multiline':False]['text':' Shuffle - permute with immediate indices','line_number':1290,'multiline':False]['text':' All lanes true','line_number':1392,'multiline':False]['text':' xtmp is all-00h','line_number':1396,'multiline':False]['text':' Set FFh if byte==0 otherwise 00h','line_number':1398,'multiline':False]['text':' Operand ordering constraint: lhs==output','line_number':1399,'multiline':False]['text':' Get all bytes' high bits','line_number':1401,'multiline':False]['text':' Now set dest to 1 if it is zero, otherwise to zero.','line_number':1403,'multiline':False]['text':' xtmp is all-00h','line_number':1410,'multiline':False]['text':' Set FFFFh if word==0 otherwise 0000h','line_number':1412,'multiline':False]['text':' Operand ordering constraint: lhs==output','line_number':1413,'multiline':False]['text':' Get all bytes' high bits','line_number':1415,'multiline':False]['text':' Now set dest to 1 if it is zero, otherwise to zero.','line_number':1417,'multiline':False]['text':' xtmp is all-00h','line_number':1424,'multiline':False]['text':' Set FFFFFFFFh if doubleword==0 otherwise 00000000h','line_number':1426,'multiline':False]['text':' Operand ordering constraint: lhs==output','line_number':1427,'multiline':False]['text':' Get all bytes' high bits','line_number':1429,'multiline':False]['text':' Now set dest to 1 if it is zero, otherwise to zero.','line_number':1431,'multiline':False]['text':' xtmp is all-00h','line_number':1438,'multiline':False]['text':' Set FFFFFFFFFFFFFFFFh if quadword==0 otherwise 0000000000000000h','line_number':1440,'multiline':False]['text':' Operand ordering constraint: lhs==output','line_number':1441,'multiline':False]['text':' Get all bytes' high bits','line_number':1443,'multiline':False]['text':' Now set dest to 1 if it is zero, otherwise to zero.','line_number':1445,'multiline':False]['text':' Bitmask','line_number':1450,'multiline':False]['text':' A three-instruction sequence is possible by using scratch as a don't-care','line_number':1458,'multiline':False]['text':' input and shifting rather than masking at the end, but creates a false','line_number':1459,'multiline':False]['text':' dependency on the old value of scratch.  The better fix is to allow src to','line_number':1460,'multiline':False]['text':' be clobbered.','line_number':1461,'multiline':False]['text':' Swizzle - permute with variable indices','line_number':1476,'multiline':False]['text':' set high bit','line_number':1481,'multiline':False]['text':'   for values > 15','line_number':1482,'multiline':False]['text':' permute','line_number':1483,'multiline':False]['text':' Integer Add','line_number':1486,'multiline':False]['text':' Integer subtract','line_number':1528,'multiline':False]['text':' Integer multiply','line_number':1570,'multiline':False]['text':' lhs = <D C> <B A>','line_number':1596,'multiline':False]['text':' rhs = <H G> <F E>','line_number':1597,'multiline':False]['text':' result = <(DG+CH)_low+CG_high CG_low> <(BE+AF)_low+AE_high AE_low>','line_number':1598,'multiline':False]['text':' temp  = <D C> <B A>','line_number':1599,'multiline':False]['text':' temp  = <0 D> <0 B>','line_number':1600,'multiline':False]['text':' temp  = <DG> <BE>','line_number':1601,'multiline':False]['text':' temp2 = <H G> <F E>','line_number':1602,'multiline':False]['text':' temp2 = <0 H> <0 F>','line_number':1603,'multiline':False]['text':' temp2 = <CH> <AF>','line_number':1604,'multiline':False]['text':' temp2 = <DG+CH> <BE+AF>','line_number':1605,'multiline':False]['text':' temp2 = <(DG+CH)_low 0>','line_number':1606,'multiline':False]['text':'         <(BE+AF)_low 0>','line_number':1607,'multiline':False]['text':' dest = <CG_high CG_low>','line_number':1608,'multiline':False]['text':'        <AE_high AE_low>','line_number':1609,'multiline':False]['text':' dest =','line_number':1610,'multiline':False]['text':'    <(DG+CH)_low+CG_high CG_low>','line_number':1611,'multiline':False]['text':'    <(BE+AF)_low+AE_high AE_low>','line_number':1612,'multiline':False]['text':' Code generation from the PR: https://github.com/WebAssembly/simd/pull/376.','line_number':1615,'multiline':False]['text':' The double PSHUFD for the 32->64 case is not great, and there's some','line_number':1616,'multiline':False]['text':' discussion on the PR (scroll down far enough) on how to avoid one of them,','line_number':1617,'multiline':False]['text':' but we need benchmarking + correctness proofs.','line_number':1618,'multiline':False]['text':' Integer negate','line_number':1729,'multiline':False]['text':' Saturating integer add','line_number':1771,'multiline':False]['text':' Saturating integer subtract','line_number':1815,'multiline':False]['text':' Lane-wise integer minimum','line_number':1859,'multiline':False]['text':' Lane-wise integer maximum','line_number':1924,'multiline':False]['text':' Lane-wise integer rounding average','line_number':1989,'multiline':False]['text':' Lane-wise integer absolute value','line_number':2001,'multiline':False]['text':' Left shift by scalar','line_number':2023,'multiline':False]['text':' Right shift by scalar','line_number':2072,'multiline':False]['text':' Sign replication operation','line_number':2173,'multiline':False]['text':' Bitwise and, or, xor, not','line_number':2200,'multiline':False]['text':' Bitwise and-not','line_number':2240,'multiline':False]['text':' Bitwise select','line_number':2247,'multiline':False]['text':' Population count','line_number':2257,'multiline':False]['text':' Comparisons (integer and floating-point)','line_number':2264,'multiline':False]['text':' Code in the SIMD implementation allows operands to be reversed like this,','line_number':2324,'multiline':False]['text':' this benefits the baseline compiler.  Ion takes care of the reversing','line_number':2325,'multiline':False]['text':' itself and never generates GT/GE.','line_number':2326,'multiline':False]['text':' Code in the SIMD implementation allows operands to be reversed like this,','line_number':2350,'multiline':False]['text':' this benefits the baseline compiler.  Ion takes care of the reversing','line_number':2351,'multiline':False]['text':' itself and never generates GT/GE.','line_number':2352,'multiline':False]['text':' Load.  See comments above regarding integer operation.','line_number':2373,'multiline':False]['text':' Store.  See comments above regarding integer operation.','line_number':2390,'multiline':False]['text':' Floating point negation','line_number':2402,'multiline':False]['text':' Floating point absolute value','line_number':2414,'multiline':False]['text':' NaN-propagating minimum','line_number':2426,'multiline':False]['text':' NaN-propagating maximum','line_number':2440,'multiline':False]['text':' Compare-based minimum','line_number':2454,'multiline':False]['text':' Shut up the linter by using the same names as in the declaration, then','line_number':2458,'multiline':False]['text':' aliasing here.','line_number':2459,'multiline':False]['text':' Compare-based maximum','line_number':2472,'multiline':False]['text':' Widening/pairwise integer dot product','line_number':2488,'multiline':False]['text':' Rounding','line_number':2500,'multiline':False]['text':' Floating add','line_number':2534,'multiline':False]['text':' Floating subtract','line_number':2556,'multiline':False]['text':' Floating division','line_number':2578,'multiline':False]['text':' Floating Multiply','line_number':2600,'multiline':False]['text':' Pairwise add','line_number':2622,'multiline':False]['text':' Floating square root','line_number':2663,'multiline':False]['text':' Integer to floating point with rounding','line_number':2673,'multiline':False]['text':' Floating point to integer with saturation','line_number':2695,'multiline':False]['text':' Floating point widening','line_number':2720,'multiline':False]['text':' Integer to integer narrowing','line_number':2732,'multiline':False]['text':' Integer to integer widening','line_number':2776,'multiline':False]['text':' ========================================================================','line_number':2838,'multiline':False]['text':' Truncate floating point.','line_number':2839,'multiline':False]['text':' Set conversion to truncation.','line_number':2858,'multiline':False]['text':' Load double on fp stack, convert and load regular stack.','line_number':2866,'multiline':False]['text':' Reset the conversion flag.','line_number':2870,'multiline':False]['text':' Set conversion to truncation.','line_number':2892,'multiline':False]['text':' Load double on fp stack, convert and load regular stack.','line_number':2900,'multiline':False]['text':' Reset the conversion flag.','line_number':2904,'multiline':False]['text':' ===============================================================','line_number':2910,'multiline':False]['text':' Clamping functions.','line_number':2911,'multiline':False]['text':'}}} check_macroassembler_style','line_number':2924,'multiline':False]['text':' ===============================================================','line_number':2925,'multiline':False]['text':' namespace jit','line_number':2927,'multiline':False]['text':' namespace js','line_number':2928,'multiline':False]['text':' jit_x86_shared_MacroAssembler_x86_shared_inl_h ','line_number':2930,'multiline':True]