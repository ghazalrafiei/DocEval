['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
**********************************************************************
* Copyright (c) 2003-2011, International Business Machines
* Corporation and others.  All Rights Reserved.
**********************************************************************
* Author: Alan Liu
* Created: September 24 2003
* Since: ICU 2.8
**********************************************************************
','line_number':3,'multiline':True]['text':'*
 * An iterator that returns 32-bit code points.  This class is deliberately
 * <em>not</em> related to any of the ICU character iterator classes
 * in order to minimize complexity.
 * @author Alan Liu
 * @since ICU 2.8
 ','line_number':24,'multiline':True]['text':' TODO: Ideas for later.  (Do not implement if not needed, lest the','line_number':33,'multiline':False]['text':' code coverage numbers go down due to unused methods.)','line_number':34,'multiline':False]['text':' 1. Add a copy constructor, operator==() method.','line_number':35,'multiline':False]['text':' 2. Rather than return DONE, throw an exception if the end','line_number':36,'multiline':False]['text':' is reached -- this is an alternate usage model, probably not useful.','line_number':37,'multiline':False]['text':'*
     * Text being iterated.
     ','line_number':40,'multiline':True]['text':'*
     * Position of iterator.
     ','line_number':45,'multiline':True]['text':'*
     * Symbol table used to parse and dereference variables.  May be 0.
     ','line_number':50,'multiline':True]['text':'*
     * Current variable expansion, or 0 if none.
     ','line_number':55,'multiline':True]['text':'*
     * Position within buf.  Meaningless if buf == 0.
     ','line_number':60,'multiline':True]['text':'*
     * Value returned when there are no more characters to iterate.
     ','line_number':66,'multiline':True]['text':'*
     * Bitmask option to enable parsing of variable names.  If (options &
     * PARSE_VARIABLES) != 0, then an embedded variable will be expanded to
     * its value.  Variables are parsed using the SymbolTable API.
     ','line_number':71,'multiline':True]['text':'*
     * Bitmask option to enable parsing of escape sequences.  If (options &
     * PARSE_ESCAPES) != 0, then an embedded escape sequence will be expanded
     * to its value.  Escapes are parsed using Utility.unescapeAt().
     ','line_number':78,'multiline':True]['text':'*
     * Bitmask option to enable skipping of whitespace.  If (options &
     * SKIP_WHITESPACE) != 0, then Pattern_White_Space characters will be silently
     * skipped, as if they were not present in the input.
     ','line_number':85,'multiline':True]['text':'*
     * Constructs an iterator over the given text, starting at the given
     * position.
     * @param text the text to be iterated
     * @param sym the symbol table, or null if there is none.  If sym is null,
     * then variables will not be deferenced, even if the PARSE_VARIABLES
     * option is set.
     * @param pos upon input, the index of the next character to return.  If a
     * variable has been dereferenced, then pos will <em>not</em> increment as
     * characters of the variable value are iterated.
     ','line_number':92,'multiline':True]['text':'*
     * Returns true if this iterator has no more characters to return.
     ','line_number':106,'multiline':True]['text':'*
     * Returns the next character using the given options, or DONE if there
     * are no more characters, and advance the position to the next
     * character.
     * @param options one or more of the following options, bitwise-OR-ed
     * together: PARSE_VARIABLES, PARSE_ESCAPES, SKIP_WHITESPACE.
     * @param isEscaped output parameter set to true if the character
     * was escaped
     * @param ec input-output error code.  An error will only be set by
     * this routing if options includes PARSE_VARIABLES and an unknown
     * variable name is seen, or if options includes PARSE_ESCAPES and
     * an invalid escape sequence is seen.
     * @return the current 32-bit code point, or DONE
     ','line_number':111,'multiline':True]['text':'*
     * Returns true if this iterator is currently within a variable expansion.
     ','line_number':127,'multiline':True]['text':'*
     * An opaque object representing the position of a RuleCharacterIterator.
     ','line_number':132,'multiline':True]['text':'*
     * Sets an object which, when later passed to setPos(), will
     * restore this iterator's position.  Usage idiom:
     *
     * RuleCharacterIterator iterator = ...;
     * RuleCharacterIterator::Pos pos;
     * iterator.getPos(pos);
     * for (;;) {
     *   iterator.getPos(pos);
     *   int c = iterator.next(...);
     *   ...
     * }
     * iterator.setPos(pos);
     *
     * @param p a position object to be set to this iterator's
     * current position.
     ','line_number':143,'multiline':True]['text':'*
     * Restores this iterator to the position it had when getPos()
     * set the given object.
     * @param p a position object previously set by getPos()
     ','line_number':162,'multiline':True]['text':'*
     * Skips ahead past any ignored characters, as indicated by the given
     * options.  This is useful in conjunction with the lookahead() method.
     *
     * Currently, this only has an effect for SKIP_WHITESPACE.
     * @param options one or more of the following options, bitwise-OR-ed
     * together: PARSE_VARIABLES, PARSE_ESCAPES, SKIP_WHITESPACE.
     ','line_number':169,'multiline':True]['text':'*
     * Returns a string containing the remainder of the characters to be
     * returned by this iterator, without any option processing.  If the
     * iterator is currently within a variable expansion, this will only
     * extend to the end of the variable expansion.  This method is provided
     * so that iterators may interoperate with string-based APIs.  The typical
     * sequence of calls is to call skipIgnored(), then call lookahead(), then
     * parse the string returned by lookahead(), then call jumpahead() to
     * resynchronize the iterator.
     * @param result a string to receive the characters to be returned
     * by future calls to next()
     * @param maxLookAhead The maximum to copy into the result.
     * @return a reference to result
     ','line_number':179,'multiline':True]['text':'*
     * Advances the position by the given number of 16-bit code units.
     * This is useful in conjunction with the lookahead() method.
     * @param count the number of 16-bit code units to jump over
     ','line_number':195,'multiline':True]['text':'*
     * Returns a string representation of this object, consisting of the
     * characters being iterated, with a '|' marking the current position.
     * Position within an expanded variable is <em>not</em> indicated.
     * @param result output parameter to receive a string
     * representation of this object
     ','line_number':202,'multiline':True]['text':'    UnicodeString& toString(UnicodeString& result) const;','line_number':209,'multiline':False]['text':'*
     * Returns the current 32-bit code point without parsing escapes, parsing
     * variables, or skipping whitespace.
     * @return the current 32-bit code point
     ','line_number':212,'multiline':True]['text':'*
     * Advances the position by the given amount.
     * @param count the number of 16-bit code units to advance past
     ','line_number':219,'multiline':True]['text':' _RULEITER_H_','line_number':232,'multiline':False]['text':'eof','line_number':233,'multiline':False]