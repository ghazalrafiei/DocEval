['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2016 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' AllocateExecutableMemory() requires a multiple of ExecutableCodePageSize.','line_number':115,'multiline':False]['text':' static ','line_number':119,'multiline':True]['text':' If the allocation failed and the embedding gives us a last-ditch attempt','line_number':132,'multiline':False]['text':' to purge all memory (which, in gecko, does a purging GC/CC/GC), do that','line_number':133,'multiline':False]['text':' then retry the allocation.','line_number':134,'multiline':False]['text':' Zero the padding.','line_number':148,'multiline':False]['text':' We account for the bytes allocated in WasmModuleObject::create, where we','line_number':151,'multiline':False]['text':' have the necessary JSContext.','line_number':152,'multiline':False]['text':' In the case of tiering, RegisterCodeSegment() immediately makes this code','line_number':162,'multiline':False]['text':' segment live to access from other threads executing the containing','line_number':163,'multiline':False]['text':' module. So only call once the CodeSegment is fully initialized.','line_number':164,'multiline':False]['text':' This bool is only used by the destructor which cannot be called racily','line_number':169,'multiline':False]['text':' and so it is not a problem to mutate it after RegisterCodeSegment().','line_number':170,'multiline':False]['text':' to reset immediate to null','line_number':232,'multiline':False]['text':' Avoid "unused" warnings','line_number':288,'multiline':False]['text':' static ','line_number':348,'multiline':True]['text':' static ','line_number':364,'multiline':True]['text':' Optimized compilation finishes on a background thread, so we must make sure','line_number':388,'multiline':False]['text':' to flush the icaches of all the executing threads.','line_number':389,'multiline':False]['text':' Reprotect the whole region to avoid having separate RW and RX mappings.','line_number':394,'multiline':False]['text':' See comments in CodeSegment::initialize() for why this must be last.','line_number':402,'multiline':False]['text':' static ','line_number':427,'multiline':True]['text':' static ','line_number':573,'multiline':True]['text':' Exports that don't support a jit entry get only the interp entry.','line_number':694,'multiline':False]['text':' asmjs ','line_number':701,'multiline':True]['text':' Optimized compilation finishes on a background thread, so we must make sure','line_number':755,'multiline':False]['text':' to flush the icaches of all the executing threads.','line_number':756,'multiline':False]['text':' Create lazy function exports for funcIndex -> entry lookup.','line_number':765,'multiline':False]['text':' Exports that don't support a jit entry get only the interp entry.','line_number':787,'multiline':False]['text':' This happens on the executing thread (when createOne is called from','line_number':801,'multiline':False]['text':' GetInterpEntryAndEnsureStubs), so no need to flush the icaches on all the','line_number':802,'multiline':False]['text':' threads.','line_number':803,'multiline':False]['text':' Exports that don't support a jit entry get only the interp entry.','line_number':815,'multiline':False]['text':' This compilation happens on a background compiler thread, so the icache may','line_number':839,'multiline':False]['text':' need to be flushed on all the threads.','line_number':840,'multiline':False]['text':' static ','line_number':962,'multiline':True]['text':' = nullptr ','line_number':1002,'multiline':True]['text':' See comments in CodeSegment::initialize() for why this must be last.','line_number':1071,'multiline':False]['text':' static ','line_number':1090,'multiline':True]['text':' We find the first hit (there may be multiple) to obtain the innermost','line_number':1133,'multiline':False]['text':' handler, which is why we cannot binary search here.','line_number':1134,'multiline':False]['text':' The number of jit entries is overestimated, but it is simpler when','line_number':1168,'multiline':False]['text':' filling/looking up the jit entries and safe (worst case we'll crash','line_number':1169,'multiline':False]['text':' because of a null deref when trying to call the jit entry of an','line_number':1170,'multiline':False]['text':' unexported function).','line_number':1171,'multiline':False]['text':' When enabled, generate profiling labels for every name in funcNames_ that is','line_number':1380,'multiline':False]['text':' the name of some Function CodeRange. This involves malloc() so do it now','line_number':1381,'multiline':False]['text':' since, once we start sampling, we'll be in a signal-handing context where we','line_number':1382,'multiline':False]['text':' cannot malloc.','line_number':1383,'multiline':False]['text':' Any tier will do, we only need tier-invariant data that are incidentally','line_number':1396,'multiline':False]['text':' stored with the code ranges.','line_number':1397,'multiline':False]['text':' oh well','line_number':1466,'multiline':False]['text':' static ','line_number':1491,'multiline':True]['text':' The buffer is quite large in order to accomodate mangled C++ names;','line_number':1558,'multiline':False]['text':' lengths over 3500 have been observed in the wild.','line_number':1559,'multiline':False]