['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
* Copyright (C) 1999-2015, International Business Machines Corporation and
* others. All Rights Reserved.
******************************************************************************
*   Date        Name        Description
*   10/22/99    alan        Creation.
**********************************************************************
','line_number':3,'multiline':True]['text':'
 * Constants for hinting whether a key is an integer
 * or a pointer.  If a hint bit is zero, then the associated
 * token is assumed to be an integer. This is needed for iSeries
 ','line_number':21,'multiline':True]['text':' Fix bogus initialCapacity values; avoid malloc(0)','line_number':50,'multiline':False]['text':'*
 * Assign this object to another (make this a copy of 'other').
 ','line_number':73,'multiline':True]['text':' else index out of range ','line_number':102,'multiline':True]['text':' must have 0 <= index <= count','line_number':106,'multiline':False]['text':' else index out of range ','line_number':114,'multiline':True]['text':' integer overflow check','line_number':215,'multiline':False]['text':' integer overflow check','line_number':226,'multiline':False]['text':' We keep the original memory contents on bad minimumCapacity/maxCapacity.','line_number':227,'multiline':False]['text':' We keep the original contents on the memory failure on realloc.','line_number':233,'multiline':False]['text':' integer overflow check for realloc','line_number':247,'multiline':False]['text':'  Something is very wrong, don't realloc, leave capacity and maxCapacity unchanged','line_number':248,'multiline':False]['text':' Current capacity is within the new limit.','line_number':253,'multiline':False]['text':' New maximum capacity is smaller than the current size.','line_number':257,'multiline':False]['text':' Realloc the storage to the new, smaller size.','line_number':258,'multiline':False]['text':' Realloc to smaller failed.','line_number':261,'multiline':False]['text':'   Just keep what we had.  No need to call it a failure.','line_number':262,'multiline':False]['text':'*
 * Change the size of this vector as follows: If newSize is smaller,
 * then truncate the array, possibly deleting held elements for i >=
 * newSize.  If newSize is larger, grow the array, filling in new
 * slots with NULL.
 ','line_number':272,'multiline':True]['text':'*
 * Insert the given integer into this vector at its sorted position
 * as defined by 'compare'.  The current elements are assumed to
 * be sorted already.
 ','line_number':298,'multiline':True]['text':' Perform a binary search for the location to insert tok at.  Tok','line_number':304,'multiline':False]['text':' will be inserted between two elements a and b such that a <=','line_number':305,'multiline':False]['text':' tok && tok < b, where there is a 'virtual' elements[-1] always','line_number':306,'multiline':False]['text':' less than tok and a 'virtual' elements[count] always greater','line_number':307,'multiline':False]['text':' than tok.','line_number':308,'multiline':False]['text':'int8_t c = (*compare)(elements[probe], tok);','line_number':312,'multiline':False]['text':'if (c > 0) {','line_number':313,'multiline':False]['text':' assert(c <= 0);','line_number':317,'multiline':False]