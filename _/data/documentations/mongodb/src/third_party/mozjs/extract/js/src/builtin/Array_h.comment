['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS Array interface. ','line_number':7,'multiline':True]['text':' js::ShouldUpdateTypes','line_number':18,'multiline':False]['text':' The methods below only create dense boxed arrays.','line_number':40,'multiline':False]['text':' Create a dense array with no capacity allocated, length set to 0, in the','line_number':42,'multiline':False]['text':' normal (i.e. non-tenured) heap.','line_number':43,'multiline':False]['text':' Create a dense array with no capacity allocated, length set to 0, in the','line_number':47,'multiline':False]['text':' tenured heap.','line_number':48,'multiline':False]['text':' Create a dense array with a set length, but without allocating space for the','line_number':52,'multiline':False]['text':' contents. This is useful, e.g., when accepting length from the user.','line_number':53,'multiline':False]['text':' Create a dense array with length and capacity == 'length', initialized length','line_number':58,'multiline':False]['text':' set to 0.','line_number':59,'multiline':False]['text':' Create a dense array with length == 'length', initialized length set to 0,','line_number':64,'multiline':False]['text':' and capacity == 'length' clamped to EagerAllocationMaxLength.','line_number':65,'multiline':False]['text':' Create a dense array from the given array values, which must be rooted.','line_number':70,'multiline':False]['text':' Create a dense array based on templateObject with the given length.','line_number':76,'multiline':False]['text':'
 * Copy 'length' elements from aobj to vp.
 *
 * This function assumes 'length' is effectively the result of calling
 * GetLengthProperty on aobj. vp must point to rooted memory.
 ','line_number':90,'multiline':True]['text':' Natives exposed for optimization by the interpreter and JITs. ','line_number':99,'multiline':True]['text':'
 * Append the given (non-hole) value to the end of an array.  The array must be
 * a newborn array -- that is, one which has not been exposed to script for
 * arbitrary manipulation.  (This method optimizes on the assumption that
 * extending the array to accommodate the element will never make the array
 * sparse, which requires that the array be completely filled.)
 ','line_number':119,'multiline':True]['text':' Array constructor native. Exposed only so the JIT can know its address. ','line_number':136,'multiline':True]['text':' Like Array constructor, but doesn't perform GetPrototypeFromConstructor.','line_number':139,'multiline':False]['text':' JS::IsArray has multiple overloads, use js::IsArrayFromJit to disambiguate.','line_number':149,'multiline':False]['text':'
   * An ArraySpeciesLookup holds the following:
   *
   *  Array.prototype (arrayProto_)
   *      To ensure that the incoming array has the standard proto.
   *
   *  Array.prototype's shape (arrayProtoShape_)
   *      To ensure that Array.prototype has not been modified.
   *
   *  Array (arrayConstructor_)
   *  Array's shape (arrayConstructorShape_)
   *       To ensure that Array has not been modified.
   *
   *  Array.prototype's slot number for constructor (arrayProtoConstructorSlot_)
   *      To quickly retrieve and ensure that the Array constructor
   *      stored in the slot has not changed.
   *
   *  Array's slot number for the @@species getter. (arraySpeciesGetterSlot_)
   *  Array's canonical value for @@species (canonicalSpeciesFunc_)
   *      To quickly retrieve and ensure that the @@species getter for Array
   *      has not changed.
   *
   * MOZ_INIT_OUTSIDE_CTOR fields below are set in |initialize()|.  The
   * constructor only initializes a |state_| field, that defines whether the
   * other fields are accessible.
   ','line_number':159,'multiline':True]['text':' Pointer to canonical Array.prototype and Array.','line_number':186,'multiline':False]['text':' Shape of matching Array, and slot containing the @@species property, and','line_number':190,'multiline':False]['text':' the canonical value.','line_number':191,'multiline':False]['text':' Shape of matching Array.prototype object, and slot containing the','line_number':196,'multiline':False]['text':' constructor for it.','line_number':197,'multiline':False]['text':' Flags marking the lazy initialization of the above fields.','line_number':202,'multiline':False]['text':' The disabled flag is set when we don't want to try optimizing','line_number':206,'multiline':False]['text':' anymore because core objects were changed.','line_number':207,'multiline':False]['text':' Initialize the internal fields.','line_number':213,'multiline':False]['text':' Reset the cache.','line_number':216,'multiline':False]['text':' Check if the global array-related objects have not been messed with','line_number':219,'multiline':False]['text':' in a way that would disable this cache.','line_number':220,'multiline':False]['text':'* Construct an |ArraySpeciesLookup| in the uninitialized state. ','line_number':224,'multiline':True]['text':' Try to optimize the @@species lookup for an array.','line_number':227,'multiline':False]['text':' Purge the cache and all info associated with it.','line_number':230,'multiline':False]['text':' namespace js ','line_number':238,'multiline':True]['text':' builtin_Array_h ','line_number':240,'multiline':True]