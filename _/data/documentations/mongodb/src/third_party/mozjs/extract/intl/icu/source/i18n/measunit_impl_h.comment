['text':' Â© 2020 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' namespace number','line_number':21,'multiline':False]['text':'*
 * Looks up the "unitQuantity" (aka "type" or "category") of a base unit
 * identifier. The category is returned via `result`, which must initially be
 * empty.
 *
 * This only supports base units: other units must be resolved to base units
 * before passing to this function, otherwise U_UNSUPPORTED_ERROR status will be
 * returned.
 *
 * Categories are found in `unitQuantities` in the `units` resource (see
 * `units.txt`).
 ','line_number':26,'multiline':True]['text':'*
 * A struct representing a single unit (optional SI or binary prefix, and dimensionality).
 ','line_number':40,'multiline':True]['text':'*
     * Gets a single unit from the MeasureUnit. If there are multiple single units, sets an error
     * code and returns the base dimensionless unit. Parses if necessary.
     ','line_number':44,'multiline':True]['text':'* Transform this SingleUnitImpl into a MeasureUnit, simplifying if possible. ','line_number':50,'multiline':True]['text':'*
     * Returns the "simple unit ID", without SI or dimensionality prefix: this
     * instance may represent a square-kilometer, but only "meter" will be
     * returned.
     *
     * The returned pointer points at memory that exists for the duration of the
     * program's running.
     ','line_number':53,'multiline':True]['text':'*
     * Generates and append a neutral identifier string for a single unit which means we do not include
     * the dimension signal.
     ','line_number':63,'multiline':True]['text':'*
     * Returns the index of this unit's "quantity" in unitQuantities (in
     * measunit_extra.cpp). The value of this index determines sort order for
     * normalization of unit identifiers.
     ','line_number':69,'multiline':True]['text':'*
     * Compare this SingleUnitImpl to another SingleUnitImpl for the sake of
     * sorting and coalescing.
     *
     * Sort order of units is specified by UTS #35
     * (https://unicode.org/reports/tr35/tr35-info.html#Unit_Identifier_Normalization).
     *
     * Takes the sign of dimensionality into account, but not the absolute
     * value: per-meter is not considered the same as meter, but meter is
     * considered the same as square-meter.
     *
     * The dimensionless unit generally does not get compared, but if it did, it
     * would sort before other units by virtue of index being < 0 and
     * dimensionality not being negative.
     ','line_number':76,'multiline':True]['text':' Positive dimensions first','line_number':93,'multiline':False]['text':' Sort by official quantity order','line_number':99,'multiline':False]['text':' If quantity order didn't help, then we go by index.','line_number':108,'multiline':False]['text':' TODO: revisit if the spec dictates prefix sort order - it doesn't','line_number':115,'multiline':False]['text':' currently. For now we're sorting binary prefixes before SI prefixes,','line_number':116,'multiline':False]['text':' as per enum values order.','line_number':117,'multiline':False]['text':'*
     * Return whether this SingleUnitImpl is compatible with another for the purpose of coalescing.
     *
     * Units with the same base unit and SI or binary prefix should match, except that they must also
     * have the same dimensionality sign, such that we don't merge numerator and denominator.
     ','line_number':127,'multiline':True]['text':'*
     * Returns true if this unit is the "dimensionless base unit", as produced
     * by the MeasureUnit() default constructor. (This does not include the
     * likes of concentrations or angles.)
     ','line_number':137,'multiline':True]['text':'*
     * Simple unit index, unique for every simple unit, -1 for the dimensionless
     * unit. This is an index into a string list in measunit_extra.cpp, as
     * loaded by SimpleUnitIdentifiersSink.
     *
     * The default value is -1, meaning the dimensionless unit:
     * isDimensionless() will return true, until index is changed.
     ','line_number':146,'multiline':True]['text':'*
     * SI or binary prefix.
     *
     * This is ignored for the dimensionless unit.
     ','line_number':156,'multiline':True]['text':'*
     * Dimensionality.
     *
     * This is meaningless for the dimensionless unit.
     ','line_number':163,'multiline':True]['text':' Forward declaration','line_number':171,'multiline':False]['text':' Export explicit template instantiations of MaybeStackArray, MemoryPool and','line_number':174,'multiline':False]['text':' MaybeStackVector. This is required when building DLLs for Windows. (See','line_number':175,'multiline':False]['text':' datefmt.h, collationiterator.h, erarules.h and others for similar examples.)','line_number':176,'multiline':False]['text':'*
 * Internal representation of measurement units. Capable of representing all complexities of units,
 * including mixed and compound units.
 ','line_number':183,'multiline':True]['text':' No copy constructor, use MeasureUnitImpl::copy() to make it explicit.','line_number':191,'multiline':False]['text':'* Extract the MeasureUnitImpl from a MeasureUnit. ','line_number':197,'multiline':True]['text':'*
     * Parse a unit identifier into a MeasureUnitImpl.
     *
     * @param identifier The unit identifier string.
     * @param status Set if the identifier string is not valid.
     * @return A newly parsed value object. Behaviour of this unit is
     * unspecified if an error is returned via status.
     ','line_number':202,'multiline':True]['text':'*
     * Extract the MeasureUnitImpl from a MeasureUnit, or parse if it is not present.
     * 
     * @param measureUnit The source MeasureUnit.
     * @param memory A place to write the new MeasureUnitImpl if parsing is required.
     * @param status Set if an error occurs.
     * @return A reference to either measureUnit.fImpl or memory.
     ','line_number':212,'multiline':True]['text':'*
     * Extract the MeasureUnitImpl from a MeasureUnit, or parse if it is not present.
     *
     * @param measureUnit The source MeasureUnit.
     * @param status Set if an error occurs.
     * @return A value object, either newly parsed or copied from measureUnit.
     ','line_number':223,'multiline':True]['text':'*
     * Used for currency units.
     ','line_number':233,'multiline':True]['text':' localStatus is not expected to fail since currencyCode should be 3 chars long','line_number':240,'multiline':False]['text':'* Transform this MeasureUnitImpl into a MeasureUnit, simplifying if possible. ','line_number':244,'multiline':True]['text':'*
     * Create a copy of this MeasureUnitImpl. Don't use copy constructor to make this explicit.
     ','line_number':247,'multiline':True]['text':'*
     * Extracts the list of all the individual units inside the `MeasureUnitImpl` with their indices.
     *      For example:    
     *          -   if the `MeasureUnitImpl` is `foot-per-hour`
     *                  it will return a list of 1 {(0, `foot-per-hour`)} 
     *          -   if the `MeasureUnitImpl` is `foot-and-inch` 
     *                  it will return a list of 2 {(0, `foot`), (1, `inch`)}
     ','line_number':252,'multiline':True]['text':'* Mutates this MeasureUnitImpl to take the reciprocal. ','line_number':263,'multiline':True]['text':'*
     * Mutates this MeasureUnitImpl to append a single unit.
     *
     * @return true if a new item was added. If unit is the dimensionless unit,
     * it is never added: the return value will always be false.
     ','line_number':266,'multiline':True]['text':'* The complexity, either SINGLE, COMPOUND, or MIXED. ','line_number':274,'multiline':True]['text':'*
     * The list of single units. These may be summed or multiplied, based on the
     * value of the complexity field.
     *
     * The "dimensionless" unit (SingleUnitImpl default constructor) must not be
     * added to this list.
     ','line_number':277,'multiline':True]['text':'*
     * The full unit identifier.  Owned by the MeasureUnitImpl.  Empty if not computed.
     ','line_number':286,'multiline':True]['text':'*
     * Normalizes a MeasureUnitImpl and generate the identifier string in place.
     ','line_number':292,'multiline':True]['text':' For calling serialize','line_number':297,'multiline':False]['text':' TODO(icu-units#147): revisit serialization','line_number':298,'multiline':False]['text':' Makes a copy of unitImpl.','line_number':305,'multiline':False]['text':' Export explicit template instantiations of MaybeStackArray, MemoryPool and','line_number':314,'multiline':False]['text':' MaybeStackVector. This is required when building DLLs for Windows. (See','line_number':315,'multiline':False]['text':' datefmt.h, collationiterator.h, erarules.h and others for similar examples.)','line_number':316,'multiline':False]['text':' Export an explicit template instantiation of the LocalPointer that is used as a','line_number':322,'multiline':False]['text':' data member of MeasureUnitImpl.','line_number':323,'multiline':False]['text':' (When building DLLs for Windows this is required.)','line_number':324,'multiline':False]['text':' Ignore warning 4661 as LocalPointerBase does not use operator== or operator!=','line_number':326,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':339,'multiline':True]['text':'__MEASUNIT_IMPL_H__','line_number':340,'multiline':False]