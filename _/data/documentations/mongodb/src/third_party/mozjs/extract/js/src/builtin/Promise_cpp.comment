['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JSJitGetterOp, JSJitInfo','line_number':18,'multiline':False]['text':' JS::ForOfIterator','line_number':19,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':20,'multiline':False]['text':' js::PlainObject','line_number':30,'multiline':False]['text':' js::PromiseLookup','line_number':31,'multiline':False]['text':' js::PromiseObject, js::PromiseSlot_*','line_number':32,'multiline':False]['text':' js::WarnNumberASCII','line_number':34,'multiline':False]['text':' JSContext::check','line_number':39,'multiline':False]['text':' ES 2018 draft 25.5.5.4-5.','line_number':54,'multiline':False]['text':' ES2019 draft rev 49b781ec80117b60f73327ef3054703a3111e40c','line_number':58,'multiline':False]['text':' 6.2.3.1.1 Await Fulfilled Functions','line_number':59,'multiline':False]['text':' 6.2.3.1.2 Await Rejected Functions','line_number':60,'multiline':False]['text':' ES2019 draft rev 49b781ec80117b60f73327ef3054703a3111e40c','line_number':64,'multiline':False]['text':' 25.5.3.5.1 AsyncGeneratorResumeNext Return Processor Fulfilled Functions','line_number':65,'multiline':False]['text':' 25.5.3.5.2 AsyncGeneratorResumeNext Return Processor Rejected Functions','line_number':66,'multiline':False]['text':' ES2019 draft rev 49b781ec80117b60f73327ef3054703a3111e40c','line_number':70,'multiline':False]['text':' 25.5.3.7 AsyncGeneratorYield, steps 8.c-e.','line_number':71,'multiline':False]['text':' ES2019 draft rev 49b781ec80117b60f73327ef3054703a3111e40c','line_number':75,'multiline':False]['text':' 25.1.4.2.5 Async-from-Sync Iterator Value Unwrap Functions','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' Async-from-Sync iterator handlers take the resolved value and create new','line_number':78,'multiline':False]['text':' iterator objects.  To do so it needs to forward whether the iterator is','line_number':79,'multiline':False]['text':' done. In spec, this is achieved via the [[Done]] internal slot. We','line_number':80,'multiline':False]['text':' enumerate both true and false cases here.','line_number':81,'multiline':False]['text':' One past the maximum allowed PromiseHandler value.','line_number':85,'multiline':False]['text':' The handler to use as the Promise reaction. It is a callable object','line_number':111,'multiline':False]['text':' that's guaranteed to be from the same compartment as the','line_number':112,'multiline':False]['text':' PromiseReactionJob.','line_number':113,'multiline':False]['text':' JobData - a, potentially CCW-wrapped, dense list containing data','line_number':116,'multiline':False]['text':' required for proper execution of the reaction.','line_number':117,'multiline':False]['text':' The Promise to resolve using the given thenable.','line_number':122,'multiline':False]['text':' The thenable to use as the receiver when calling the `then` function.','line_number':125,'multiline':False]['text':' The Promise to resolve using the given thenable.','line_number':132,'multiline':False]['text':' The thenable to use as the receiver when calling the built-in `then`','line_number':135,'multiline':False]['text':' function.','line_number':136,'multiline':False]['text':' namespace js','line_number':199,'multiline':False]['text':' Smart pointer to the "F.[[Values]]" part of the state of a Promise.all or','line_number':244,'multiline':False]['text':' Promise.allSettled invocation, or the "F.[[Errors]]" part of the state of a','line_number':245,'multiline':False]['text':' Promise.any invocation. Copes with compartment issues when setting an','line_number':246,'multiline':False]['text':' element.','line_number':247,'multiline':False]['text':' Object value holding the elements array. The object can be a wrapper.','line_number':249,'multiline':False]['text':' Unwrapped elements array. May not belong to the current compartment!','line_number':252,'multiline':False]['text':' Set to true if the |setElement| method needs to wrap its input value.','line_number':255,'multiline':False]['text':' |needsWrapping| isn't tracked here, because all modifications on the','line_number':310,'multiline':False]['text':' initial elements don't require any wrapping.','line_number':311,'multiline':False]['text':' Helper for the AutoRealm we need to work with |array|. We mostly do this','line_number':322,'multiline':False]['text':' for performance; we could go ahead and do the define via a cross-','line_number':323,'multiline':False]['text':' compartment proxy instead...','line_number':324,'multiline':False]['text':' `Promise.all` Resolve Element Functions','line_number':331,'multiline':False]['text':' Step 9. Set values[index] to x.','line_number':332,'multiline':False]['text':'','line_number':333,'multiline':False]['text':' `Promise.allSettled` Resolve Element Functions','line_number':334,'multiline':False]['text':' `Promise.allSettled` Reject Element Functions','line_number':335,'multiline':False]['text':' Step 12. Set values[index] to obj.','line_number':336,'multiline':False]['text':'','line_number':337,'multiline':False]['text':' `Promise.any` Reject Element Functions','line_number':338,'multiline':False]['text':' Step 9. Set errors[index] to x.','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' These handler functions are always created in the compartment of the','line_number':341,'multiline':False]['text':' Promise.all/allSettled/any function, which isn't necessarily the same','line_number':342,'multiline':False]['text':' compartment as unwrappedArray as explained in NewPromiseCombinatorElements.','line_number':343,'multiline':False]['text':' So before storing |val| we may need to enter unwrappedArray's compartment.','line_number':344,'multiline':False]['text':' The index is guaranteed to be initialized to `undefined`.','line_number':347,'multiline':False]['text':' namespace js','line_number':365,'multiline':False]['text':' Generator used by PromiseObject::getID.','line_number':388,'multiline':False]['text':' namespace','line_number':390,'multiline':False]['text':'*
   * Returns the given PromiseObject's process-unique ID.
   * The ID is lazily assigned when first queried, and then either stored
   * in the DebugInfo slot if no debug info was recorded for this Promise,
   * or in the Id slot of the DebugInfo object.
   ','line_number':436,'multiline':True]['text':' The |unwrappedRejectionStack| parameter should only be set on promise','line_number':471,'multiline':False]['text':' rejections and should be the stack of the exception that caused the promise','line_number':472,'multiline':False]['text':' to be rejected. If the |unwrappedRejectionStack| is null, the current stack','line_number':473,'multiline':False]['text':' will be used instead. This is also the default behavior for fulfilled','line_number':474,'multiline':False]['text':' promises.','line_number':475,'multiline':False]['text':' If async stacks weren't enabled and the Promise's global wasn't a','line_number':485,'multiline':False]['text':' debuggee when the Promise was created, we won't have a debugInfo','line_number':486,'multiline':False]['text':' object. We still want to capture the resolution stack, so we','line_number':487,'multiline':False]['text':' create the object now and change it's slots' values around a bit.','line_number':488,'multiline':False]['text':' The current stack was stored in the AllocationSite slot, move','line_number':498,'multiline':False]['text':' it to ResolutionSite as that's what it really is.','line_number':499,'multiline':False]['text':' There's no good default for a missing AllocationTime, so','line_number':504,'multiline':False]['text':' instead of resetting that, ensure that it's the same as','line_number':505,'multiline':False]['text':' ResolutionTime, so that the diff shows as 0, which isn't great,','line_number':506,'multiline':False]['text':' but bearable.','line_number':507,'multiline':False]['text':' The Promise's ID might've been queried earlier, in which case','line_number':511,'multiline':False]['text':' it's stored in the DebugInfo slot. We saved that earlier, so','line_number':512,'multiline':False]['text':' now we can store it in the right place (or leave it as','line_number':513,'multiline':False]['text':' undefined if it wasn't ever initialized.)','line_number':514,'multiline':False]['text':' The exception stack is always unwrapped so it might be in','line_number':521,'multiline':False]['text':' a different compartment.','line_number':522,'multiline':False]['text':'*
 * Wrapper for GetAndClearExceptionAndStack that handles cases where
 * no exception is pending, but an error occurred.
 * This can be the case if an OOM was encountered while throwing the error.
 ','line_number':576,'multiline':True]['text':' ES2016, 25.4.1.1.1, Steps 1.a-b.','line_number':596,'multiline':False]['text':' Extracting all of this internal spec algorithm into a helper function would','line_number':597,'multiline':False]['text':' be tedious, so the check in step 1 and the entirety of step 2 aren't','line_number':598,'multiline':False]['text':' included.','line_number':599,'multiline':False]['text':' Step 1.a.','line_number':602,'multiline':False]['text':' Step 1.b.','line_number':614,'multiline':False]['text':' This is the promise-like object that gets resolved with the result of this','line_number':626,'multiline':False]['text':' reaction, if any. If this reaction record was created with .then or .catch,','line_number':627,'multiline':False]['text':' this is the promise that .then or .catch returned.','line_number':628,'multiline':False]['text':'','line_number':629,'multiline':False]['text':' The spec says that a PromiseReaction record has a [[Capability]] field','line_number':630,'multiline':False]['text':' whose value is either undefined or a PromiseCapability record, but we just','line_number':631,'multiline':False]['text':' store the PromiseCapability's fields directly in this object. This is the','line_number':632,'multiline':False]['text':' capability's [[Promise]] field; its [[Resolve]] and [[Reject]] fields are','line_number':633,'multiline':False]['text':' stored in ReactionRecordSlot_Resolve and ReactionRecordSlot_Reject.','line_number':634,'multiline':False]['text':'','line_number':635,'multiline':False]['text':' This can be 'null' in reaction records created for a few situations:','line_number':636,'multiline':False]['text':'','line_number':637,'multiline':False]['text':' - When you resolve one promise to another. When you pass a promise P1 to','line_number':638,'multiline':False]['text':'   the 'fulfill' function of a promise P2, so that resolving P1 resolves P2','line_number':639,'multiline':False]['text':'   in the same way, P1 gets a reaction record with the','line_number':640,'multiline':False]['text':'   REACTION_FLAG_DEFAULT_RESOLVING_HANDLER flag set and whose','line_number':641,'multiline':False]['text':'   ReactionRecordSlot_GeneratorOrPromiseToResolve slot holds P2.','line_number':642,'multiline':False]['text':'','line_number':643,'multiline':False]['text':' - When you await a promise. When an async function or generator awaits a','line_number':644,'multiline':False]['text':'   value V, then the await expression generates an internal promise P,','line_number':645,'multiline':False]['text':'   resolves it to V, and then gives P a reaction record with the','line_number':646,'multiline':False]['text':'   REACTION_FLAG_ASYNC_FUNCTION or REACTION_FLAG_ASYNC_GENERATOR flag set','line_number':647,'multiline':False]['text':'   and whose ReactionRecordSlot_GeneratorOrPromiseToResolve slot holds the','line_number':648,'multiline':False]['text':'   generator object. (Typically V is a promise, so resolving P to V gives V','line_number':649,'multiline':False]['text':'   a REACTION_FLAGS_DEFAULT_RESOLVING_HANDLER reaction record as described','line_number':650,'multiline':False]['text':'   above.)','line_number':651,'multiline':False]['text':'','line_number':652,'multiline':False]['text':' - When JS::AddPromiseReactions{,IgnoringUnhandledRejection} cause the','line_number':653,'multiline':False]['text':'   reaction to be created.  (These functions act as if they had created a','line_number':654,'multiline':False]['text':'   promise to invoke the appropriate provided reaction function, without','line_number':655,'multiline':False]['text':'   actually allocating a promise for them.)','line_number':656,'multiline':False]['text':' The [[Handler]] field(s) of a PromiseReaction record. We create a','line_number':659,'multiline':False]['text':' single reaction record for fulfillment and rejection, therefore our','line_number':660,'multiline':False]['text':' PromiseReaction implementation needs two [[Handler]] fields.','line_number':661,'multiline':False]['text':'','line_number':662,'multiline':False]['text':' The slot value is either a callable object, an integer constant from','line_number':663,'multiline':False]['text':' the |PromiseHandler| enum, or null. If the value is null, either the','line_number':664,'multiline':False]['text':' REACTION_FLAG_DEBUGGER_DUMMY or the','line_number':665,'multiline':False]['text':' REACTION_FLAG_DEFAULT_RESOLVING_HANDLER flag must be set.','line_number':666,'multiline':False]['text':'','line_number':667,'multiline':False]['text':' After setting the target state for a PromiseReaction, the slot of the','line_number':668,'multiline':False]['text':' no longer used handler gets reused to store the argument of the active','line_number':669,'multiline':False]['text':' handler.','line_number':670,'multiline':False]['text':' The functions to resolve or reject the promise. Matches the','line_number':676,'multiline':False]['text':' [[Capability]].[[Resolve]] and [[Capability]].[[Reject]] fields from','line_number':677,'multiline':False]['text':' the spec.','line_number':678,'multiline':False]['text':'','line_number':679,'multiline':False]['text':' The slot values are either callable objects or null, but the latter','line_number':680,'multiline':False]['text':' case is only allowed if the promise is either a built-in Promise object','line_number':681,'multiline':False]['text':' or null.','line_number':682,'multiline':False]['text':' The incumbent global for this reaction record. Can be null.','line_number':686,'multiline':False]['text':' Bitmask of the REACTION_FLAG values.','line_number':689,'multiline':False]['text':' Additional slot to store extra data for specific reaction record types.','line_number':692,'multiline':False]['text':'','line_number':693,'multiline':False]['text':' - When the REACTION_FLAG_ASYNC_FUNCTION flag is set, this slot stores','line_number':694,'multiline':False]['text':'   the (internal) generator object for this promise reaction.','line_number':695,'multiline':False]['text':' - When the REACTION_FLAG_ASYNC_GENERATOR flag is set, this slot stores','line_number':696,'multiline':False]['text':'   the async generator object for this promise reaction.','line_number':697,'multiline':False]['text':' - When the REACTION_FLAG_DEFAULT_RESOLVING_HANDLER flag is set, this','line_number':698,'multiline':False]['text':'   slot stores the promise to resolve when conceptually "calling" the','line_number':699,'multiline':False]['text':'   OnFulfilled or OnRejected handlers.','line_number':700,'multiline':False]['text':' ES2016, 25.4.1.2.','line_number':706,'multiline':False]['text':' ES2016, 25.4.1.3.','line_number':867,'multiline':False]['text':' Caller needs to handle dead wrappers.','line_number':908,'multiline':False]['text':' ES2016, 25.4.1.7.','line_number':917,'multiline':False]['text':' ES2016, 25.4.1.7.','line_number':922,'multiline':False]['text':' ES2016, 25.4.1.3.1.','line_number':927,'multiline':False]['text':' Steps 1-2.','line_number':934,'multiline':False]['text':' Steps 3-4.','line_number':937,'multiline':False]['text':' If the Promise isn't available anymore, it has been resolved and the','line_number':938,'multiline':False]['text':' reference to it removed to make it eligible for collection.','line_number':939,'multiline':False]['text':' Store the promise value in |promise| before ClearResolutionFunctionSlots','line_number':945,'multiline':False]['text':' removes the reference.','line_number':946,'multiline':False]['text':' Step 5.','line_number':949,'multiline':False]['text':' Here, we only remove the Promise reference from the resolution','line_number':950,'multiline':False]['text':' functions. Actually marking it as fulfilled/rejected happens later.','line_number':951,'multiline':False]['text':' In some cases the Promise reference on the resolution function won't','line_number':954,'multiline':False]['text':' have been removed during resolution, so we need to check that here,','line_number':955,'multiline':False]['text':' too.','line_number':956,'multiline':False]['text':' Step 6.','line_number':962,'multiline':False]['text':' ES2016, 25.4.1.3.2, steps 6-13.','line_number':985,'multiline':False]['text':' Step 7 (reordered).','line_number':992,'multiline':False]['text':' Step 6.','line_number':999,'multiline':False]['text':' Step 6.a.','line_number':1001,'multiline':False]['text':' Step 6.b.','line_number':1010,'multiline':False]['text':' Step 8.','line_number':1014,'multiline':False]['text':' Testing functions allow to directly settle a promise without going','line_number':1027,'multiline':False]['text':' through the resolving functions. In that case the normal bookkeeping to','line_number':1028,'multiline':False]['text':' ensure only pending promises can be resolved doesn't apply and we need','line_number':1029,'multiline':False]['text':' to manually check for already settled promises. The exception is simply','line_number':1030,'multiline':False]['text':' dropped when this case happens.','line_number':1031,'multiline':False]['text':' Step 9.','line_number':1036,'multiline':False]['text':' Step 10 (implicit).','line_number':1041,'multiline':False]['text':' Step 11.','line_number':1043,'multiline':False]['text':' If the resolution object is a built-in Promise object and the','line_number':1048,'multiline':False]['text':' `then` property is the original Promise.prototype.then function','line_number':1049,'multiline':False]['text':' from the current realm, we skip storing/calling it.','line_number':1050,'multiline':False]['text':' Additionally we require that |promise| itself is also a built-in','line_number':1051,'multiline':False]['text':' Promise object, so the fast path doesn't need to cope with wrappers.','line_number':1052,'multiline':False]['text':' Step 12.','line_number':1060,'multiline':False]['text':' Step 13.','line_number':1073,'multiline':False]['text':' ES2016, 25.4.1.3.2.','line_number':1077,'multiline':False]['text':' Steps 3-4 (reordered).','line_number':1084,'multiline':False]['text':' We use the reference to the reject function as a signal for whether','line_number':1085,'multiline':False]['text':' the resolve or reject function was already called, at which point','line_number':1086,'multiline':False]['text':' the references on each of the functions are cleared.','line_number':1087,'multiline':False]['text':' Steps 1-2 (reordered).','line_number':1094,'multiline':False]['text':' Step 5.','line_number':1098,'multiline':False]['text':' Here, we only remove the Promise reference from the resolution','line_number':1099,'multiline':False]['text':' functions. Actually marking it as fulfilled/rejected happens later.','line_number':1100,'multiline':False]['text':' In some cases the Promise reference on the resolution function won't','line_number':1103,'multiline':False]['text':' have been removed during resolution, so we need to check that here,','line_number':1104,'multiline':False]['text':' too.','line_number':1105,'multiline':False]['text':' Steps 6-13.','line_number':1111,'multiline':False]['text':'*
 * Tells the embedding to enqueue a Promise reaction job, based on
 * three parameters:
 * reactionObj - The reaction record.
 * handlerArg_ - The first and only argument to pass to the handler invoked by
 *              the job. This will be stored on the reaction record.
 * targetState - The PromiseState this reaction job targets. This decides
 *               whether the onFulfilled or onRejected handler is called.
 ','line_number':1121,'multiline':True]['text':' The reaction might have been stored on a Promise from another','line_number':1136,'multiline':False]['text':' compartment, which means it would've been wrapped in a CCW.','line_number':1137,'multiline':False]['text':' To properly handle that case here, unwrap it and enter its','line_number':1138,'multiline':False]['text':' compartment, where the job creation should take place anyway.','line_number':1139,'multiline':False]['text':' If the compartment has multiple realms, create the job in the','line_number':1147,'multiline':False]['text':' reaction's realm. This is consistent with the code in the else-branch','line_number':1148,'multiline':False]['text':' and avoids problems with running jobs against a dying global (Gecko','line_number':1149,'multiline':False]['text':' drops such jobs).','line_number':1150,'multiline':False]['text':' Must not enqueue a reaction job more than once.','line_number':1168,'multiline':False]['text':' If we have a handler callback, we enter that handler's compartment so','line_number':1177,'multiline':False]['text':' that the promise reaction job function is created in that compartment.','line_number':1178,'multiline':False]['text':' That guarantees that the embedding ends up with the right entry global.','line_number':1179,'multiline':False]['text':' This is relevant for some html APIs like fetch that derive information','line_number':1180,'multiline':False]['text':' from said global.','line_number':1181,'multiline':False]['text':' The unwrapping has to be unchecked because we specifically want to','line_number':1184,'multiline':False]['text':' be able to use handlers with wrappers that would only allow calls.','line_number':1185,'multiline':False]['text':' E.g., it's ok to have a handler from a chrome compartment in a','line_number':1186,'multiline':False]['text':' reaction to a content compartment's Promise instance.','line_number':1187,'multiline':False]['text':' We need to wrap the reaction to store it on the job function.','line_number':1192,'multiline':False]['text':' Create the JS function to call when the job is triggered.','line_number':1198,'multiline':False]['text':' Store the reaction on the reaction job.','line_number':1207,'multiline':False]['text':' When using JS::AddPromiseReactions{,IgnoringUnHandledRejection}, no actual','line_number':1210,'multiline':False]['text':' promise is created, so we might not have one here.','line_number':1211,'multiline':False]['text':' Additionally, we might have an object here that isn't an instance of','line_number':1212,'multiline':False]['text':' Promise. This can happen if content overrides the value of','line_number':1213,'multiline':False]['text':' Promise[@@species] (or invokes Promise#then on a Promise subclass','line_number':1214,'multiline':False]['text':' instance with a non-default @@species value on the constructor) with a','line_number':1215,'multiline':False]['text':' function that returns objects that're not Promise (subclass) instances.','line_number':1216,'multiline':False]['text':' In that case, we just pretend we didn't have an object in the first','line_number':1217,'multiline':False]['text':' place.','line_number':1218,'multiline':False]['text':' If after all this we do have an object, wrap it in case we entered the','line_number':1219,'multiline':False]['text':' handler's compartment above, because we should pass objects from a','line_number':1220,'multiline':False]['text':' single compartment to the enqueuePromiseJob callback.','line_number':1221,'multiline':False]['text':' `promise` can be already-wrapped promise object at this point.','line_number':1229,'multiline':False]['text':' Using objectFromIncumbentGlobal, we can derive the incumbent global by','line_number':1243,'multiline':False]['text':' unwrapping and then getting the global. This is very convoluted, but','line_number':1244,'multiline':False]['text':' much better than having to store the original global as a private value','line_number':1245,'multiline':False]['text':' because we couldn't wrap it to store it as a normal JS value.','line_number':1246,'multiline':False]['text':' Note: the global we pass here might be from a different compartment','line_number':1255,'multiline':False]['text':' than job and promise. While it's somewhat unusual to pass objects','line_number':1256,'multiline':False]['text':' from multiple compartments, in this case we specifically need the','line_number':1257,'multiline':False]['text':' global to be unwrapped because wrapping and unwrapping aren't','line_number':1258,'multiline':False]['text':' necessarily symmetric for globals.','line_number':1259,'multiline':False]['text':' ES2016, Commoned-out implementation of 25.4.1.4. and 25.4.1.7.','line_number':1268,'multiline':False]['text':'','line_number':1269,'multiline':False]['text':' This method takes an additional optional |unwrappedRejectionStack| parameter,','line_number':1270,'multiline':False]['text':' which is only used for debugging purposes.','line_number':1271,'multiline':False]['text':' It allows callers to to pass in the stack of some exception which','line_number':1272,'multiline':False]['text':' triggered the rejection of the promise.','line_number':1273,'multiline':False]['text':' Step 1.','line_number':1278,'multiline':False]['text':' Step 2.','line_number':1284,'multiline':False]['text':' We only have one list of reactions for both resolution types. So','line_number':1285,'multiline':False]['text':' instead of getting the right list of reactions, we determine the','line_number':1286,'multiline':False]['text':' resolution type to retrieve the right information from the','line_number':1287,'multiline':False]['text':' reaction records.','line_number':1288,'multiline':False]['text':' Steps 3-5.','line_number':1291,'multiline':False]['text':' The same slot is used for the reactions list and the result, so setting','line_number':1292,'multiline':False]['text':' the result also removes the reactions list.','line_number':1293,'multiline':False]['text':' Step 6.','line_number':1296,'multiline':False]['text':' Also null out the resolve/reject functions so they can be GC'd.','line_number':1304,'multiline':False]['text':' Now that everything else is done, do the things the debugger needs.','line_number':1307,'multiline':False]['text':' Step 7 of RejectPromise implemented in onSettled.','line_number':1308,'multiline':False]['text':' Step 7 of FulfillPromise.','line_number':1311,'multiline':False]['text':' Step 8 of RejectPromise.','line_number':1312,'multiline':False]['text':' ES2016, 25.4.1.7.','line_number':1316,'multiline':False]['text':' ES2016, 25.4.1.4.','line_number':1324,'multiline':False]['text':' ES2016, 25.4.3.1., as if called with GetCapabilitiesExecutor as the','line_number':1375,'multiline':False]['text':' executor argument.','line_number':1376,'multiline':False]['text':' Steps 1-2 (Not applicable).','line_number':1378,'multiline':False]['text':' Steps 3-7.','line_number':1380,'multiline':False]['text':' Step 8.','line_number':1386,'multiline':False]['text':' Steps 9-10 (Not applicable).','line_number':1393,'multiline':False]['text':' Step 11.','line_number':1395,'multiline':False]['text':' ES2016, 25.4.1.5.','line_number':1399,'multiline':False]['text':' Steps 1-2.','line_number':1405,'multiline':False]['text':' If we'd call the original Promise constructor and know that the','line_number':1412,'multiline':False]['text':' resolve/reject functions won't ever escape to content, we can skip','line_number':1413,'multiline':False]['text':' creating and calling the executor function and instead return a Promise','line_number':1414,'multiline':False]['text':' marked as having default resolve/reject functions.','line_number':1415,'multiline':False]['text':'','line_number':1416,'multiline':False]['text':' This can't be used in Promise.all and Promise.race because we have to','line_number':1417,'multiline':False]['text':' pass the reject (and resolve, in the race case) function to thenables','line_number':1418,'multiline':False]['text':' in the list passed to all/race, which (potentially) means exposing them','line_number':1419,'multiline':False]['text':' to content.','line_number':1420,'multiline':False]['text':'','line_number':1421,'multiline':False]['text':' For Promise.all and Promise.race we can only optimize away the creation','line_number':1422,'multiline':False]['text':' of the GetCapabilitiesExecutor function, and directly allocate the','line_number':1423,'multiline':False]['text':' result promise instead of invoking the Promise constructor.','line_number':1424,'multiline':False]['text':' Step 3 (omitted).','line_number':1442,'multiline':False]['text':' Step 4.','line_number':1444,'multiline':False]['text':' Step 5 (omitted).','line_number':1453,'multiline':False]['text':' Step 6.','line_number':1455,'multiline':False]['text':' Step 7.','line_number':1462,'multiline':False]['text':' Step 8.','line_number':1471,'multiline':False]['text':' Step 9 (well, the equivalent for all of promiseCapabilities' fields.)','line_number':1480,'multiline':False]['text':' Step 10.','line_number':1484,'multiline':False]['text':' ES2016, 25.4.1.5.1.','line_number':1488,'multiline':False]['text':' Steps 1-2 (implicit).','line_number':1493,'multiline':False]['text':' Steps 3-4.','line_number':1495,'multiline':False]['text':' Step 5.','line_number':1503,'multiline':False]['text':' Step 6.','line_number':1506,'multiline':False]['text':' Step 7.','line_number':1509,'multiline':False]['text':' ES2016, 25.4.1.7.','line_number':1514,'multiline':False]['text':' The rejection reason might've been created in a compartment with higher','line_number':1534,'multiline':False]['text':' privileges than the Promise's. In that case, object-type rejection','line_number':1535,'multiline':False]['text':' values might be wrapped into a wrapper that throws whenever the','line_number':1536,'multiline':False]['text':' Promise's reaction handler wants to do anything useful with it. To','line_number':1537,'multiline':False]['text':' avoid that situation, we synthesize a generic error that doesn't','line_number':1538,'multiline':False]['text':' expose any privileged information but can safely be used in the','line_number':1539,'multiline':False]['text':' rejection handler.','line_number':1540,'multiline':False]['text':' Report the existing reason, so we don't just drop it on the','line_number':1545,'multiline':False]['text':' floor.','line_number':1546,'multiline':False]['text':' Async stacks are only properly adopted if there's at least one','line_number':1552,'multiline':False]['text':' interpreter frame active right now. If a thenable job with a','line_number':1553,'multiline':False]['text':' throwing `then` function got us here, that'll not be the case,','line_number':1554,'multiline':False]['text':' so we add one by throwing the error from self-hosted code.','line_number':1555,'multiline':False]['text':' Apply f to a mutable handle on each member of a collection of reactions, like','line_number':1567,'multiline':False]['text':' that stored in PromiseSlot_ReactionsOrResult on a pending promise. When the','line_number':1568,'multiline':False]['text':' reaction record is wrapped, we pass the wrapper, without dereferencing it. If','line_number':1569,'multiline':False]['text':' f returns false, then we stop the iteration immediately and return false.','line_number':1570,'multiline':False]['text':' Otherwise, we return true.','line_number':1571,'multiline':False]['text':'','line_number':1572,'multiline':False]['text':' There are several different representations for collections:','line_number':1573,'multiline':False]['text':'','line_number':1574,'multiline':False]['text':' - We represent an empty collection of reactions as an 'undefined' value.','line_number':1575,'multiline':False]['text':'','line_number':1576,'multiline':False]['text':' - We represent a collection containing a single reaction simply as the given','line_number':1577,'multiline':False]['text':'   PromiseReactionRecord object, possibly wrapped.','line_number':1578,'multiline':False]['text':'','line_number':1579,'multiline':False]['text':' - We represent a collection of two or more reactions as a dense array of','line_number':1580,'multiline':False]['text':'   possibly-wrapped PromiseReactionRecords.','line_number':1581,'multiline':False]['text':'','line_number':1582,'multiline':False]['text':' ES2016, 25.4.1.8.','line_number':1613,'multiline':False]['text':' Implements PromiseReactionJob optimized for the case when the reaction','line_number':1631,'multiline':False]['text':' handler is one of the default resolving functions as created by the','line_number':1632,'multiline':False]['text':' CreateResolvingFunctions abstract operation.','line_number':1633,'multiline':False]['text':' Testing functions allow to directly settle a promise without going','line_number':1641,'multiline':False]['text':' through the resolving functions. In that case the normal bookkeeping to','line_number':1642,'multiline':False]['text':' ensure only pending promises can be resolved doesn't apply and we need','line_number':1643,'multiline':False]['text':' to manually check for already settled promises. We still call','line_number':1644,'multiline':False]['text':' Run{Fulfill,Reject}Function for consistency with PromiseReactionJob.','line_number':1645,'multiline':False]['text':' Step 6.','line_number':1652,'multiline':False]['text':' Steps 7-9.','line_number':1669,'multiline':False]['text':' Await's handlers don't return a value, nor throw any exceptions.','line_number':1695,'multiline':False]['text':' They fail only on OOM.','line_number':1696,'multiline':False]['text':' Await's handlers don't return a value, nor throw any exceptions.','line_number':1713,'multiline':False]['text':' They fail only on OOM.','line_number':1714,'multiline':False]['text':' ES2020 draft rev a09fc232c137800dbf51b6204f37fdede4ba1646','line_number':1716,'multiline':False]['text':' 6.2.3.1.1 Await Fulfilled Functions','line_number':1717,'multiline':False]['text':' ES2020 draft rev a09fc232c137800dbf51b6204f37fdede4ba1646','line_number':1725,'multiline':False]['text':' 6.2.3.1.2 Await Rejected Functions','line_number':1726,'multiline':False]['text':' ES2020 draft rev a09fc232c137800dbf51b6204f37fdede4ba1646','line_number':1734,'multiline':False]['text':' 25.5.3.5.1 AsyncGeneratorResumeNext Return Processor Fulfilled Functions','line_number':1735,'multiline':False]['text':' Steps 1-2.','line_number':1741,'multiline':False]['text':' Step 3.','line_number':1744,'multiline':False]['text':' ES2020 draft rev a09fc232c137800dbf51b6204f37fdede4ba1646','line_number':1748,'multiline':False]['text':' 25.5.3.5.2 AsyncGeneratorResumeNext Return Processor Rejected Functions','line_number':1749,'multiline':False]['text':' Steps 1-2.','line_number':1755,'multiline':False]['text':' Step 3.','line_number':1758,'multiline':False]['text':' ES2020 draft rev a09fc232c137800dbf51b6204f37fdede4ba1646','line_number':1762,'multiline':False]['text':' 25.5.3.7 AsyncGeneratorYield','line_number':1763,'multiline':False]['text':' We're using a separate 'AwaitingYieldReturn' state when awaiting a','line_number':1769,'multiline':False]['text':' return completion in yield expressions, whereas the spec uses the','line_number':1770,'multiline':False]['text':' 'Executing' state all along. So we now need to transition into the','line_number':1771,'multiline':False]['text':' 'Executing' state.','line_number':1772,'multiline':False]['text':' Steps 8.d-e.','line_number':1775,'multiline':False]['text':' ES2020 draft rev a09fc232c137800dbf51b6204f37fdede4ba1646','line_number':1780,'multiline':False]['text':' 25.5.3.7 AsyncGeneratorYield','line_number':1781,'multiline':False]['text':' We're using a separate 'AwaitingYieldReturn' state when awaiting a','line_number':1787,'multiline':False]['text':' return completion in yield expressions, whereas the spec uses the','line_number':1788,'multiline':False]['text':' 'Executing' state all along. So we now need to transition into the','line_number':1789,'multiline':False]['text':' 'Executing' state.','line_number':1790,'multiline':False]['text':' Step 8.c.','line_number':1793,'multiline':False]['text':' ES2016, 25.4.2.1.','line_number':1803,'multiline':False]['text':'*
 * Callback triggering the fulfill/reject reaction for a resolved Promise,
 * to be invoked by the embedding during its processing of the Promise job
 * queue.
 *
 * See
 * http://www.ecma-international.org/ecma-262/7.0/index.html#sec-jobs-and-job-queues
 *
 * A PromiseReactionJob is set as the native function of an extended
 * JSFunction object, with all information required for the job's
 * execution stored in in a reaction record in its first extended slot.
 ','line_number':1804,'multiline':True]['text':' Promise reactions don't return any value.','line_number':1821,'multiline':False]['text':' To ensure that the embedding ends up with the right entry global, we're','line_number':1827,'multiline':False]['text':' guaranteeing that the reaction job function gets created in the same','line_number':1828,'multiline':False]['text':' compartment as the handler function. That's not necessarily the global','line_number':1829,'multiline':False]['text':' that the job was triggered from, though.','line_number':1830,'multiline':False]['text':' We can find the triggering global via the job's reaction record. To go','line_number':1831,'multiline':False]['text':' back, we check if the reaction is a wrapper and if so, unwrap it and','line_number':1832,'multiline':False]['text':' enter its compartment.','line_number':1833,'multiline':False]['text':' Steps 1-2.','line_number':1848,'multiline':False]['text':' Step 3.','line_number':1864,'multiline':False]['text':' Steps 4-6.','line_number':1874,'multiline':False]['text':' Step 4.','line_number':1878,'multiline':False]['text':' Step 5.','line_number':1882,'multiline':False]['text':' 25.1.4.2.5 Async-from-Sync Iterator Value Unwrap Functions, steps 1-2.','line_number':1892,'multiline':False]['text':' Step 6.','line_number':1904,'multiline':False]['text':' Steps 7-9.','line_number':1914,'multiline':False]['text':' ES2016, 25.4.2.2.','line_number':1931,'multiline':False]['text':'*
 * Callback for resolving a thenable, to be invoked by the embedding during
 * its processing of the Promise job queue.
 *
 * See https://tc39.github.io/ecma262/#sec-jobs-and-job-queues
 *
 * A PromiseResolveThenableJob is set as the native function of an extended
 * JSFunction object, with all information required for the job's
 * execution stored in the function's extended slots.
 *
 * Usage of the function's extended slots is described in the ThenableJobSlots
 * enum.
 ','line_number':1932,'multiline':True]['text':' Step 1.','line_number':1961,'multiline':False]['text':' Step 2.','line_number':1968,'multiline':False]['text':' In difference to the usual pattern, we return immediately on success.','line_number':1973,'multiline':False]['text':' Steps 3-4.','line_number':1979,'multiline':False]['text':' Can't pass stack to a JS function.','line_number':1980,'multiline':False]['text':'*
 * Specialization of PromiseResolveThenableJob when the `thenable` is a
 * built-in Promise object and the `then` property is the built-in
 * `Promise.prototype.then` function.
 *
 * A PromiseResolveBuiltinThenableJob is set as the native function of an
 * extended JSFunction object, with all information required for the job's
 * execution stored in the function's extended slots.
 *
 * Usage of the function's extended slots is described in the
 * BuiltinThenableJobSlots enum.
 ','line_number':1994,'multiline':True]['text':' Step 1 (Skipped).','line_number':2020,'multiline':False]['text':' Step 2.','line_number':2022,'multiline':False]['text':' In difference to the usual pattern, we return immediately on success.','line_number':2023,'multiline':False]['text':' Steps 3-4.','line_number':2029,'multiline':False]['text':' Testing functions allow to directly settle a promise without going','line_number':2036,'multiline':False]['text':' through the resolving functions. In that case the normal bookkeeping to','line_number':2037,'multiline':False]['text':' ensure only pending promises can be resolved doesn't apply and we need','line_number':2038,'multiline':False]['text':' to manually check for already settled promises. The exception is simply','line_number':2039,'multiline':False]['text':' dropped when this case happens.','line_number':2040,'multiline':False]['text':'*
 * Tells the embedding to enqueue a Promise resolve thenable job, based on
 * three parameters:
 * promiseToResolve_ - The promise to resolve, obviously.
 * thenable_ - The thenable to resolve the Promise with.
 * thenVal - The `then` function to invoke with the `thenable` as the receiver.
 ','line_number':2049,'multiline':True]['text':' Need to re-root these to enable wrapping them below.','line_number':2059,'multiline':False]['text':' We enter the `then` callable's compartment so that the job function is','line_number':2063,'multiline':False]['text':' created in that compartment.','line_number':2064,'multiline':False]['text':' That guarantees that the embedding ends up with the right entry global.','line_number':2065,'multiline':False]['text':' This is relevant for some html APIs like fetch that derive information','line_number':2066,'multiline':False]['text':' from said global.','line_number':2067,'multiline':False]['text':' Wrap the `promiseToResolve` and `thenable` arguments.','line_number':2071,'multiline':False]['text':' Store the `then` function on the callback.','line_number':2089,'multiline':False]['text':' Create a dense array to hold the data needed for the reaction job to','line_number':2092,'multiline':False]['text':' work.','line_number':2093,'multiline':False]['text':' The layout is described in the ThenableJobDataIndices enum.','line_number':2094,'multiline':False]['text':' Set the `promiseToResolve` and `thenable` arguments.','line_number':2101,'multiline':False]['text':' Store the data array on the reaction job.','line_number':2106,'multiline':False]['text':' At this point the promise is guaranteed to be wrapped into the job's','line_number':2109,'multiline':False]['text':' compartment.','line_number':2110,'multiline':False]['text':'*
 * Tells the embedding to enqueue a Promise resolve thenable built-in job,
 * based on two parameters:
 * promiseToResolve - The promise to resolve, obviously.
 * thenable - The thenable to resolve the Promise with.
 ','line_number':2118,'multiline':True]['text':' Store the promise and the thenable on the reaction job.','line_number':2138,'multiline':False]['text':' We can safely unwrap it because all we want is to get the resolve','line_number':2180,'multiline':False]['text':' function.','line_number':2181,'multiline':False]['text':' Only the original RejectPromiseFunction has a reference to the resolve','line_number':2192,'multiline':False]['text':' function.','line_number':2193,'multiline':False]['text':' The reject function was already called and cleared its resolve-function','line_number':2198,'multiline':False]['text':' extended slot.','line_number':2199,'multiline':False]['text':' ES2016, 25.4.3.1. steps 3-7.','line_number':2227,'multiline':False]['text':' = nullptr ','line_number':2229,'multiline':True]['text':' = false ','line_number':2230,'multiline':True]['text':' = true ','line_number':2231,'multiline':True]['text':' Step 3.','line_number':2232,'multiline':False]['text':' Enter the unwrapped proto's compartment, if that's different from','line_number':2233,'multiline':False]['text':' the current one.','line_number':2234,'multiline':False]['text':' All state stored in a Promise's fixed slots must be created in the','line_number':2235,'multiline':False]['text':' same compartment, so we get all of that out of the way here.','line_number':2236,'multiline':False]['text':' (Except for the resolution functions, which are created below.)','line_number':2237,'multiline':False]['text':' Step 4.','line_number':2248,'multiline':False]['text':' Steps 5-6.','line_number':2251,'multiline':False]['text':' Omitted, we allocate our single list of reaction records lazily.','line_number':2252,'multiline':False]['text':' Step 7.','line_number':2254,'multiline':False]['text':' Implicit, the handled flag is unset by default.','line_number':2255,'multiline':False]['text':' Store an allocation stack so we can later figure out what the','line_number':2261,'multiline':False]['text':' control flow was for some unexpected results. Frightfully expensive,','line_number':2262,'multiline':False]['text':' but oh well.','line_number':2263,'multiline':False]['text':' Let the Debugger know about this Promise.','line_number':2272,'multiline':False]['text':' ES2016, 25.4.3.1.','line_number':2280,'multiline':False]['text':' Step 1.','line_number':2284,'multiline':False]['text':' Step 2.','line_number':2289,'multiline':False]['text':' Steps 3-10.','line_number':2296,'multiline':False]['text':' If the constructor is called via an Xray wrapper, then the newTarget','line_number':2299,'multiline':False]['text':' hasn't been unwrapped. We want that because, while the actual instance','line_number':2300,'multiline':False]['text':' should be created in the target compartment, the constructor's code','line_number':2301,'multiline':False]['text':' should run in the wrapper's compartment.','line_number':2302,'multiline':False]['text':'','line_number':2303,'multiline':False]['text':' This is so that the resolve and reject callbacks get created in the','line_number':2304,'multiline':False]['text':' wrapper's compartment, which is required for code in that compartment','line_number':2305,'multiline':False]['text':' to freely interact with it, and, e.g., pass objects as arguments, which','line_number':2306,'multiline':False]['text':' it wouldn't be able to if the callbacks were themselves wrapped in Xray','line_number':2307,'multiline':False]['text':' wrappers.','line_number':2308,'multiline':False]['text':'','line_number':2309,'multiline':False]['text':' At the same time, just creating the Promise itself in the wrapper's','line_number':2310,'multiline':False]['text':' compartment wouldn't be helpful: if the wrapper forbids interactions','line_number':2311,'multiline':False]['text':' with objects except for specific actions, such as calling them, then','line_number':2312,'multiline':False]['text':' the code we want to expose it to can't actually treat it as a Promise:','line_number':2313,'multiline':False]['text':' calling .then on it would throw, for example.','line_number':2314,'multiline':False]['text':'','line_number':2315,'multiline':False]['text':' Another scenario where it's important to create the Promise in a','line_number':2316,'multiline':False]['text':' different compartment from the resolution functions is when we want to','line_number':2317,'multiline':False]['text':' give non-privileged code a Promise resolved with the result of a','line_number':2318,'multiline':False]['text':' Promise from privileged code; as a return value of a JS-implemented','line_number':2319,'multiline':False]['text':' API, say. If the resolution functions were unprivileged, then resolving','line_number':2320,'multiline':False]['text':' with a privileged Promise would cause `resolve` to attempt accessing','line_number':2321,'multiline':False]['text':' .then on the passed Promise, which would throw an exception, so we'd','line_number':2322,'multiline':False]['text':' just end up with a rejected Promise. Really, we want to chain the two','line_number':2323,'multiline':False]['text':' Promises, with the unprivileged one resolved with the resolution of the','line_number':2324,'multiline':False]['text':' privileged one.','line_number':2325,'multiline':False]['text':' Promise subclasses don't get the special Xray treatment, so','line_number':2344,'multiline':False]['text':' we only need to do the complex wrapping and unwrapping scheme','line_number':2345,'multiline':False]['text':' described above for instances of Promise itself.','line_number':2346,'multiline':False]['text':' Step 11.','line_number':2373,'multiline':False]['text':' ES2016, 25.4.3.1. steps 3-11.','line_number':2381,'multiline':False]['text':' static ','line_number':2382,'multiline':True]['text':' = nullptr ','line_number':2384,'multiline':True]['text':' = false ','line_number':2385,'multiline':True]['text':' If the proto is wrapped, that means the current function is running','line_number':2389,'multiline':False]['text':' with a different compartment active from the one the Promise instance','line_number':2390,'multiline':False]['text':' is to be created in.','line_number':2391,'multiline':False]['text':' See the comment in PromiseConstructor for details.','line_number':2392,'multiline':False]['text':' Steps 3-7.','line_number':2402,'multiline':False]['text':' Step 8.','line_number':2414,'multiline':False]['text':' The resolving functions are created in the compartment active when the','line_number':2415,'multiline':False]['text':' (maybe wrapped) Promise constructor was called. They contain checks and','line_number':2416,'multiline':False]['text':' can unwrap the Promise if required.','line_number':2417,'multiline':False]['text':' Need to wrap the resolution functions before storing them on the Promise.','line_number':2424,'multiline':False]['text':' Step 9.','line_number':2439,'multiline':False]['text':' Step 10.','line_number':2450,'multiline':False]['text':' Can't pass stack to a JS function.','line_number':2453,'multiline':False]['text':' Let the Debugger know about this Promise.','line_number':2466,'multiline':False]['text':' Step 11.','line_number':2469,'multiline':False]['text':' ES2016, 25.4.3.1. skipping creation of resolution functions and executor','line_number':2473,'multiline':False]['text':' function invocation.','line_number':2474,'multiline':False]['text':' static ','line_number':2475,'multiline':True]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':2512,'multiline':False]['text':'','line_number':2513,'multiline':False]['text':' Unified implementation of','line_number':2514,'multiline':False]['text':' 25.6.4.1 Promise.all ( iterable )','line_number':2515,'multiline':False]['text':' 25.6.4.2 Promise.allSettled ( iterable )','line_number':2516,'multiline':False]['text':' 25.6.4.4 Promise.race ( iterable )','line_number':2517,'multiline':False]['text':'','line_number':2518,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':2519,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':2520,'multiline':False]['text':'','line_number':2521,'multiline':False]['text':' Promise.any ( iterable )','line_number':2522,'multiline':False]['text':' Step 2 (moved from NewPromiseCapability, step 1).','line_number':2527,'multiline':False]['text':' Step 1.','line_number':2550,'multiline':False]['text':' Step 2.','line_number':2553,'multiline':False]['text':' 25.6.4.1, step 3.','line_number':2569,'multiline':False]['text':' 25.6.4.2, step 3.','line_number':2570,'multiline':False]['text':' 25.6.4.4, step 3.','line_number':2571,'multiline':False]['text':' 25.6.4.1, step 4.','line_number':2576,'multiline':False]['text':' 25.6.4.2, step 4.','line_number':2577,'multiline':False]['text':' 25.6.4.4, step 4.','line_number':2578,'multiline':False]['text':' Steps 3-4.','line_number':2586,'multiline':False]['text':' Step 5.','line_number':2613,'multiline':False]['text':' Step 6.','line_number':2634,'multiline':False]['text':' Step 6.a.','line_number':2636,'multiline':False]['text':' Step 6.b.','line_number':2641,'multiline':False]['text':' Step 7.','line_number':2645,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':2650,'multiline':False]['text':' 25.6.4.1 Promise.all ( iterable )','line_number':2651,'multiline':False]['text':' Unforgeable version of ES2016, 25.4.4.1.','line_number':2673,'multiline':False]['text':' Step 1.','line_number':2684,'multiline':False]['text':' Step 2 (omitted).','line_number':2691,'multiline':False]['text':' Step 3.','line_number':2693,'multiline':False]['text':' Steps 4-6 (omitted).','line_number':2699,'multiline':False]['text':' Step 7.','line_number':2701,'multiline':False]['text':' Implemented as an inlined, simplied version of ES2016 25.4.4.1.1,','line_number':2702,'multiline':False]['text':' PerformPromiseAll.','line_number':2703,'multiline':False]['text':' Sub-steps 1-2 (omitted).','line_number':2706,'multiline':False]['text':' Sub-step 3.','line_number':2708,'multiline':False]['text':' Sub-step 4.','line_number':2720,'multiline':False]['text':' Create our data holder that holds all the things shared across','line_number':2721,'multiline':False]['text':' every step of the iterator.  In particular, this holds the','line_number':2722,'multiline':False]['text':' remainingElementsCount (as an integer reserved slot), the array of','line_number':2723,'multiline':False]['text':' values, and the resolve function from our PromiseCapability.','line_number':2724,'multiline':False]['text':' Call PerformPromiseThen with resolve and reject set to nullptr.','line_number':2732,'multiline':False]['text':' Sub-step 5 (inline in loop-header below).','line_number':2736,'multiline':False]['text':' Sub-step 6.','line_number':2738,'multiline':False]['text':' Steps a-c (omitted).','line_number':2740,'multiline':False]['text':' Step d (implemented after the loop).','line_number':2741,'multiline':False]['text':' Steps e-g (omitted).','line_number':2742,'multiline':False]['text':' Step h.','line_number':2744,'multiline':False]['text':' Step i, vastly simplified.','line_number':2747,'multiline':False]['text':' Steps j-o.','line_number':2750,'multiline':False]['text':' Step p.','line_number':2757,'multiline':False]['text':' Step q, very roughly.','line_number':2760,'multiline':False]['text':' GetWaitForAllPromise is used internally only and must not','line_number':2765,'multiline':False]['text':' trigger content-observable effects when registering a reaction.','line_number':2766,'multiline':False]['text':' It's also meant to work on wrapped Promises, potentially from','line_number':2767,'multiline':False]['text':' compartments with principals inaccessible from the current','line_number':2768,'multiline':False]['text':' compartment. To make that work, it unwraps promises with','line_number':2769,'multiline':False]['text':' UncheckedUnwrap,','line_number':2770,'multiline':False]['text':' Step r (inline in loop-header).','line_number':2778,'multiline':False]['text':' Sub-step d.i (implicit).','line_number':2781,'multiline':False]['text':' Sub-step d.ii.','line_number':2782,'multiline':False]['text':' Sub-step d.iii-iv.','line_number':2785,'multiline':False]['text':' Step 8 (omitted).','line_number':2794,'multiline':False]['text':' Step 9.','line_number':2796,'multiline':False]['text':' If |onFulfilledFunc| couldn't be optimized away, just call it.','line_number':2808,'multiline':False]['text':' The promise itself may be optimized away.  If so, we're done.','line_number':2814,'multiline':False]['text':' Resolve the promise only if it's still pending.','line_number':2819,'multiline':False]['text':' If the promise has a default resolution function, perform its steps.','line_number':2825,'multiline':False]['text':' Otherwise we're done.','line_number':2830,'multiline':False]['text':' If |onRejectedFunc| couldn't be optimized away, just call it.','line_number':2842,'multiline':False]['text':' The promise itself may be optimized away.','line_number':2848,'multiline':False]['text':' Do nothing if unhandled rejections are to be ignored.','line_number':2850,'multiline':False]['text':' Otherwise create and reject a promise on the fly.  The promise's','line_number':2855,'multiline':False]['text':' allocation time will be wrong.  So it goes.','line_number':2856,'multiline':False]['text':' Reject the promise only if it's still pending.','line_number':2868,'multiline':False]['text':' If the promise has a default rejection function, perform its steps.','line_number':2874,'multiline':False]['text':' Otherwise we're done.','line_number':2879,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':2889,'multiline':False]['text':' 25.6.4.1.1 Runtime Semantics: PerformPromiseAll, steps 5-6 and step 8.','line_number':2890,'multiline':False]['text':' 25.6.4.2.1 Runtime Semantics: PerformPromiseAllSettled, steps 5-6 and step 8.','line_number':2891,'multiline':False]['text':' 25.6.4.4.1 Runtime Semantics: PerformPromiseRace, steps 3-5.','line_number':2892,'multiline':False]['text':'','line_number':2893,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':2894,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':2895,'multiline':False]['text':' Runtime Semantics: PerformPromiseAny, steps 6-8.','line_number':2896,'multiline':False]['text':' Optimized dense array iteration ensures no side-effects take place','line_number':2908,'multiline':False]['text':' during the iteration.','line_number':2909,'multiline':False]['text':' Try to optimize when the Promise object is in its default state, guarded','line_number':2914,'multiline':False]['text':' by |C == promiseCtor| because we can only perform this optimization','line_number':2915,'multiline':False]['text':' for the builtin Promise constructor.','line_number':2916,'multiline':False]['text':' We're reusing rooted variables in the loop below, so we don't need to','line_number':2925,'multiline':False]['text':' declare a gazillion different rooted variables here. Rooted variables','line_number':2926,'multiline':False]['text':' which are reused include "Or" in their name.','line_number':2927,'multiline':False]['text':' Steps a-c, e-g.','line_number':2935,'multiline':False]['text':' Steps b, f.','line_number':2938,'multiline':False]['text':' Steps c, g.','line_number':2941,'multiline':False]['text':' Step d.','line_number':2945,'multiline':False]['text':' Set to false when we can skip the [[Get]] for "then" and instead','line_number':2950,'multiline':False]['text':' use the built-in Promise.prototype.then function.','line_number':2951,'multiline':False]['text':' The below steps don't produce any side-effects, so we can','line_number':2968,'multiline':False]['text':' skip the Promise state revalidation in the next iteration','line_number':2969,'multiline':False]['text':' when the iterator itself also doesn't produce any','line_number':2970,'multiline':False]['text':' side-effects.','line_number':2971,'multiline':False]['text':' 25.6.4.1.1, step 8.i.','line_number':2974,'multiline':False]['text':' 25.6.4.3.1, step 5.h.','line_number':2975,'multiline':False]['text':' Promise.resolve is a no-op for the default case.','line_number':2976,'multiline':False]['text':' `nextPromise` uses the built-in `then` function.','line_number':2979,'multiline':False]['text':' Need to revalidate the Promise state in the next iteration,','line_number':2982,'multiline':False]['text':' because CommonStaticResolveRejectImpl may have modified it.','line_number':2983,'multiline':False]['text':' 25.6.4.1.1, step 8.i.','line_number':2986,'multiline':False]['text':' 25.6.4.3.1, step 5.h.','line_number':2987,'multiline':False]['text':' Inline the call to Promise.resolve.','line_number':2988,'multiline':False]['text':' |promiseResolve| is undefined when the Promise constructor was','line_number':2998,'multiline':False]['text':' initially in its default state, i.e. if it had been retrieved, it would','line_number':2999,'multiline':False]['text':' have been set to |Promise.resolve|.','line_number':3000,'multiline':False]['text':' 25.6.4.1.1, step 8.i.','line_number':3002,'multiline':False]['text':' 25.6.4.3.1, step 5.h.','line_number':3003,'multiline':False]['text':' Inline the call to Promise.resolve.','line_number':3004,'multiline':False]['text':' 25.6.4.1.1, step 8.i.','line_number':3013,'multiline':False]['text':' 25.6.4.3.1, step 5.h.','line_number':3014,'multiline':False]['text':' Get the resolving functions for this iteration.','line_number':3020,'multiline':False]['text':' 25.6.4.1.1, steps 8.j-q.','line_number':3021,'multiline':False]['text':' Call |nextPromise.then| with the provided hooks and add','line_number':3026,'multiline':False]['text':' |resultPromise| to the list of dependent promises.','line_number':3027,'multiline':False]['text':'','line_number':3028,'multiline':False]['text':' If |nextPromise.then| is the original |Promise.prototype.then|','line_number':3029,'multiline':False]['text':' function and the call to |nextPromise.then| would use the original','line_number':3030,'multiline':False]['text':' |Promise| constructor to create the resulting promise, we skip the','line_number':3031,'multiline':False]['text':' call to |nextPromise.then| and thus creating a new promise that','line_number':3032,'multiline':False]['text':' would not be observable by content.','line_number':3033,'multiline':False]['text':' 25.6.4.1.1, step 8.r.','line_number':3035,'multiline':False]['text':' 25.6.4.3.1, step 5.i.','line_number':3036,'multiline':False]['text':' We don't use the Promise lookup cache here, because this code','line_number':3044,'multiline':False]['text':' is only called when we had a lookup cache miss, so it's likely','line_number':3045,'multiline':False]['text':' we'd get another cache miss when trying to use the cache here.','line_number':3046,'multiline':False]['text':' |nextPromise| is an unwrapped Promise, and |then| is the','line_number':3052,'multiline':False]['text':' original |Promise.prototype.then|, inline it here.','line_number':3053,'multiline':False]['text':' By default, the blocked promise is added as an extra entry to the','line_number':3060,'multiline':False]['text':' rejected promises list.','line_number':3061,'multiline':False]['text':' 25.6.5.4, step 3.','line_number':3068,'multiline':False]['text':' The fast path here and the one in NewPromiseCapability may not','line_number':3080,'multiline':False]['text':' set the resolve and reject handlers, so we need to clear the','line_number':3081,'multiline':False]['text':' fields in case they were set in the previous iteration.','line_number':3082,'multiline':False]['text':' Skip the creation of a built-in Promise object if:','line_number':3086,'multiline':False]['text':' 1. `thenSpecies` is the built-in Promise constructor.','line_number':3087,'multiline':False]['text':' 2. `resolveFun` doesn't return an object, which ensures no side effects','line_number':3088,'multiline':False]['text':'    occur in ResolvePromiseInternal.','line_number':3089,'multiline':False]['text':' 3. The result promise is a built-in Promise object.','line_number':3090,'multiline':False]['text':' 4. The result promise doesn't use the default resolving functions,','line_number':3091,'multiline':False]['text':'    which in turn means Run{Fulfill,Reject}Function when called from','line_number':3092,'multiline':False]['text':'    PromiseReactionJob won't try to resolve the promise.','line_number':3093,'multiline':False]['text':' 25.6.5.4, step 4.','line_number':3101,'multiline':False]['text':' 25.6.5.4, step 5.','line_number':3107,'multiline':False]['text':' Optimization failed, do the normal call.','line_number':3114,'multiline':False]['text':' In case the value to depend on isn't an object at all, there's','line_number':3121,'multiline':False]['text':' nothing more to do here: we can only add reactions to Promise','line_number':3122,'multiline':False]['text':' objects (potentially after unwrapping them), and non-object','line_number':3123,'multiline':False]['text':' values can't be Promise objects. This can happen if Promise.all','line_number':3124,'multiline':False]['text':' is called on an object with a `resolve` method that returns','line_number':3125,'multiline':False]['text':' primitives.','line_number':3126,'multiline':False]['text':' Adds |resultPromise| to the list of dependent promises.','line_number':3132,'multiline':False]['text':' The object created by the |promise.then| call or the inlined','line_number':3134,'multiline':False]['text':' version of it above is visible to content (either because','line_number':3135,'multiline':False]['text':' |promise.then| was overridden by content and could leak it,','line_number':3136,'multiline':False]['text':' or because a constructor other than the original value of','line_number':3137,'multiline':False]['text':' |Promise| was used to create it). To have both that object and','line_number':3138,'multiline':False]['text':' |resultPromise| show up as dependent promises in the debugger,','line_number':3139,'multiline':False]['text':' add a dummy reaction to the list of reject reactions that','line_number':3140,'multiline':False]['text':' contains |resultPromise|, but otherwise does nothing.','line_number':3141,'multiline':False]['text':' If either the object to depend on (`nextPromiseObj`) or the','line_number':3163,'multiline':False]['text':' object that gets blocked (`resultPromise`) isn't a,','line_number':3164,'multiline':False]['text':' maybe-wrapped, Promise instance, we ignore it. All this does is','line_number':3165,'multiline':False]['text':' lose some small amount of debug information in scenarios that','line_number':3166,'multiline':False]['text':' are highly unlikely to occur in useful code.','line_number':3167,'multiline':False]['text':' Create the elements for the Promise combinators Promise.all and','line_number':3179,'multiline':False]['text':' Promise.allSettled.','line_number':3180,'multiline':False]['text':' We have to be very careful about which compartments we create things for','line_number':3184,'multiline':False]['text':' the Promise combinators. In particular, we have to maintain the invariant','line_number':3185,'multiline':False]['text':' that anything stored in a reserved slot is same-compartment with the object','line_number':3186,'multiline':False]['text':' whose reserved slot it's in. But we want to create the values array in the','line_number':3187,'multiline':False]['text':' compartment of the result capability's Promise, because that array can get','line_number':3188,'multiline':False]['text':' exposed as the Promise's resolution value to code that has access to the','line_number':3189,'multiline':False]['text':' Promise (in particular code from that compartment), and that should work,','line_number':3190,'multiline':False]['text':' even if the Promise compartment is less-privileged than our caller','line_number':3191,'multiline':False]['text':' compartment.','line_number':3192,'multiline':False]['text':'','line_number':3193,'multiline':False]['text':' So the plan is as follows: Create the values array in the promise','line_number':3194,'multiline':False]['text':' compartment. Create the promise resolving functions and the data holder in','line_number':3195,'multiline':False]['text':' our current compartment, i.e. the compartment of the Promise combinator','line_number':3196,'multiline':False]['text':' function. Store a cross-compartment wrapper to the values array in the','line_number':3197,'multiline':False]['text':' holder. This should be OK because the only things we hand the promise','line_number':3198,'multiline':False]['text':' resolving functions to are the "then" calls we do and in the case when the','line_number':3199,'multiline':False]['text':' Promise's compartment is not the current compartment those are happening','line_number':3200,'multiline':False]['text':' over Xrays anyway, which means they get the canonical "then" function and','line_number':3201,'multiline':False]['text':' content can't see our promise resolving functions.','line_number':3202,'multiline':False]['text':' Retrieve the combinator elements from the data holder.','line_number':3232,'multiline':False]['text':' See comment for NewPromiseCombinatorElements for why we unwrap here.','line_number':3239,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':3271,'multiline':False]['text':' 25.6.4.1.2 Promise.all Resolve Element Functions','line_number':3272,'multiline':False]['text':' 25.6.4.2.2 Promise.allSettled Resolve Element Functions','line_number':3273,'multiline':False]['text':' 25.6.4.2.3 Promise.allSettled Reject Element Functions','line_number':3274,'multiline':False]['text':'','line_number':3275,'multiline':False]['text':' Common implementation for Promise combinator element functions to check if','line_number':3276,'multiline':False]['text':' they've already been called.','line_number':3277,'multiline':False]['text':' Step 1.','line_number':3281,'multiline':False]['text':' Step 2.','line_number':3284,'multiline':False]['text':' Step 3.','line_number':3288,'multiline':False]['text':' We use the existence of the data holder as a signal for whether the Promise','line_number':3289,'multiline':False]['text':' combinator element function was already called. Upon resolution, it's reset','line_number':3290,'multiline':False]['text':' to `undefined`.','line_number':3291,'multiline':False]['text':' Step 4.','line_number':3298,'multiline':False]['text':' Step 5.','line_number':3302,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':3312,'multiline':False]['text':' 25.6.4.1.1 PerformPromiseAll (iteratorRecord, constructor, resultCapability)','line_number':3313,'multiline':False]['text':' Step 1.','line_number':3320,'multiline':False]['text':' Step 2 (omitted).','line_number':3323,'multiline':False]['text':' Step 3.','line_number':3325,'multiline':False]['text':' Step 4.','line_number':3331,'multiline':False]['text':' Create our data holder that holds all the things shared across','line_number':3332,'multiline':False]['text':' every step of the iterator.  In particular, this holds the','line_number':3333,'multiline':False]['text':' remainingElementsCount (as an integer reserved slot), the array of','line_number':3334,'multiline':False]['text':' values, and the resolve function from our PromiseCapability.','line_number':3335,'multiline':False]['text':' Step 7.','line_number':3343,'multiline':False]['text':' Step 8.h.','line_number':3349,'multiline':False]['text':' Steps 8.j-p.','line_number':3354,'multiline':False]['text':' Step 8.q.','line_number':3361,'multiline':False]['text':' Step 8.s.','line_number':3364,'multiline':False]['text':' Steps 5-6 and 8.','line_number':3373,'multiline':False]['text':' Step 8.d.ii.','line_number':3380,'multiline':False]['text':' Steps 8.d.iii-iv.','line_number':3383,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':3392,'multiline':False]['text':' 25.6.4.1.2 Promise.all Resolve Element Functions','line_number':3393,'multiline':False]['text':' Steps 1-5.','line_number':3399,'multiline':False]['text':' Step 6.','line_number':3407,'multiline':False]['text':' Step 7 (moved under step 11).','line_number':3413,'multiline':False]['text':' Step 8 (moved to step 10).','line_number':3414,'multiline':False]['text':' Step 9.','line_number':3416,'multiline':False]['text':' Steps 8,10.','line_number':3421,'multiline':False]['text':' Step 11.','line_number':3424,'multiline':False]['text':' Step 11.a. (Omitted, happened in PerformPromiseAll.)','line_number':3426,'multiline':False]['text':' Step 11.b.','line_number':3427,'multiline':False]['text':' Step 7 (Adapted to work with PromiseCombinatorDataHolder's layout).','line_number':3429,'multiline':False]['text':' Step 12.','line_number':3437,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':3442,'multiline':False]['text':' 25.6.4.3 Promise.race ( iterable )','line_number':3443,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':3449,'multiline':False]['text':' 25.6.4.3.1 PerformPromiseRace (iteratorRecord, constructor, resultCapability)','line_number':3450,'multiline':False]['text':' Step 1.','line_number':3457,'multiline':False]['text':' Step 2 (omitted).','line_number':3460,'multiline':False]['text':' BlockOnPromise fast path requires the passed onFulfilled function','line_number':3462,'multiline':False]['text':' doesn't return an object value, because otherwise the skipped promise','line_number':3463,'multiline':False]['text':' creation is detectable due to missing property lookups.','line_number':3464,'multiline':False]['text':' Steps 3-5.','line_number':3476,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':3484,'multiline':False]['text':' 25.6.4.2 Promise.allSettled ( iterable )','line_number':3485,'multiline':False]['text':'','line_number':3486,'multiline':False]['text':' Promise.allSettled Resolve Element Functions','line_number':3487,'multiline':False]['text':' Promise.allSettled Reject Element Functions','line_number':3488,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':3493,'multiline':False]['text':' 25.6.4.2 Promise.allSettled ( iterable )','line_number':3494,'multiline':False]['text':'','line_number':3495,'multiline':False]['text':' Promise.allSettled ( iterable )','line_number':3496,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':3502,'multiline':False]['text':' 25.6.4.2 Promise.allSettled ( iterable )','line_number':3503,'multiline':False]['text':'','line_number':3504,'multiline':False]['text':' PerformPromiseAllSettled ( iteratorRecord, constructor, resultCapability )','line_number':3505,'multiline':False]['text':' Step 1.','line_number':3512,'multiline':False]['text':' Step 2 (omitted).','line_number':3515,'multiline':False]['text':' Step 3.','line_number':3517,'multiline':False]['text':' Step 4.','line_number':3523,'multiline':False]['text':' Create our data holder that holds all the things shared across every step','line_number':3524,'multiline':False]['text':' of the iterator. In particular, this holds the remainingElementsCount','line_number':3525,'multiline':False]['text':' (as an integer reserved slot), the array of values, and the resolve','line_number':3526,'multiline':False]['text':' function from our PromiseCapability.','line_number':3527,'multiline':False]['text':' Step 7.','line_number':3535,'multiline':False]['text':' Step 8.h.','line_number':3541,'multiline':False]['text':' Steps 8.j-q.','line_number':3553,'multiline':False]['text':' Steps 8.r-x.','line_number':3561,'multiline':False]['text':' Step 8.y.','line_number':3569,'multiline':False]['text':' Step 8.aa.','line_number':3572,'multiline':False]['text':' Steps 5-6 and 8.','line_number':3579,'multiline':False]['text':' Step 8.d.ii.','line_number':3586,'multiline':False]['text':' Steps 8.d.iii-iv.','line_number':3589,'multiline':False]['text':' ES2020 draft rev e97c95d064750fb949b6778584702dd658cf5624','line_number':3598,'multiline':False]['text':' 25.6.4.2.2 Promise.allSettled Resolve Element Functions','line_number':3599,'multiline':False]['text':' 25.6.4.2.3 Promise.allSettled Reject Element Functions','line_number':3600,'multiline':False]['text':' Steps 1-5.','line_number':3607,'multiline':False]['text':' Step 6.','line_number':3615,'multiline':False]['text':' Steps 2-3.','line_number':3621,'multiline':False]['text':' The already-called check above only handles the case when |this| function','line_number':3622,'multiline':False]['text':' is called repeatedly, so we still need to check if the other pair of this','line_number':3623,'multiline':False]['text':' resolving function was already called:','line_number':3624,'multiline':False]['text':' We use the element value as a signal for whether the Promise was already','line_number':3625,'multiline':False]['text':' fulfilled. Upon resolution, it's set to the result object created below.','line_number':3626,'multiline':False]['text':' Steps 7-8 (moved below).','line_number':3632,'multiline':False]['text':' Step 9.','line_number':3634,'multiline':False]['text':' Step 10.','line_number':3640,'multiline':False]['text':' Step 11.','line_number':3652,'multiline':False]['text':' Steps 4, 12.','line_number':3662,'multiline':False]['text':' Steps 8, 13.','line_number':3668,'multiline':False]['text':' Step 14.','line_number':3671,'multiline':False]['text':' Step 14.a. (Omitted, happened in PerformPromiseAllSettled.)','line_number':3673,'multiline':False]['text':' Step 14.b.','line_number':3674,'multiline':False]['text':' Step 7 (Adapted to work with PromiseCombinatorDataHolder's layout).','line_number':3676,'multiline':False]['text':' Step 15.','line_number':3684,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':3689,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':3690,'multiline':False]['text':'','line_number':3691,'multiline':False]['text':' Promise.any ( iterable )','line_number':3692,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':3698,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':3699,'multiline':False]['text':'','line_number':3700,'multiline':False]['text':' Promise.any Reject Element Functions','line_number':3701,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':3705,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':3706,'multiline':False]['text':'','line_number':3707,'multiline':False]['text':' ThrowAggregateError ( errors )','line_number':3708,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':3713,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':3714,'multiline':False]['text':'','line_number':3715,'multiline':False]['text':' PerformPromiseAny ( iteratorRecord, constructor, resultCapability )','line_number':3716,'multiline':False]['text':' Step 1.','line_number':3723,'multiline':False]['text':' Step 2 (omitted).','line_number':3726,'multiline':False]['text':' Step 3.','line_number':3728,'multiline':False]['text':' Step 4.','line_number':3734,'multiline':False]['text':' Create our data holder that holds all the things shared across every step','line_number':3735,'multiline':False]['text':' of the iterator. In particular, this holds the remainingElementsCount (as','line_number':3736,'multiline':False]['text':' an integer reserved slot), the array of errors, and the reject function','line_number':3737,'multiline':False]['text':' from our PromiseCapability.','line_number':3738,'multiline':False]['text':' Step 5.','line_number':3746,'multiline':False]['text':' Step 8.h.','line_number':3752,'multiline':False]['text':' Steps 8.j-p.','line_number':3757,'multiline':False]['text':' Step 8.q.','line_number':3764,'multiline':False]['text':' Step 8.s.','line_number':3767,'multiline':False]['text':' BlockOnPromise fast path requires the passed onFulfilled function doesn't','line_number':3776,'multiline':False]['text':' return an object value, because otherwise the skipped promise creation is','line_number':3777,'multiline':False]['text':' detectable due to missing property lookups.','line_number':3778,'multiline':False]['text':' Steps 6-8.','line_number':3782,'multiline':False]['text':' Step 8.d.ii.','line_number':3789,'multiline':False]['text':' Step 8.d.iii.','line_number':3792,'multiline':False]['text':' Step 8.d.iv.','line_number':3798,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':3802,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':3803,'multiline':False]['text':'','line_number':3804,'multiline':False]['text':' Promise.any Reject Element Functions','line_number':3805,'multiline':False]['text':' Steps 1-5.','line_number':3811,'multiline':False]['text':' Step 6.','line_number':3819,'multiline':False]['text':' Step 9.','line_number':3825,'multiline':False]['text':' Steps 8, 10.','line_number':3830,'multiline':False]['text':' Step 11.','line_number':3833,'multiline':False]['text':' Step 7 (Adapted to work with PromiseCombinatorDataHolder's layout).','line_number':3835,'multiline':False]['text':' Step 12.','line_number':3853,'multiline':False]['text':' Promise.any (Stage 3 proposal)','line_number':3858,'multiline':False]['text':' https://tc39.es/proposal-promise-any/','line_number':3859,'multiline':False]['text':'','line_number':3860,'multiline':False]['text':' ThrowAggregateError ( errors )','line_number':3861,'multiline':False]['text':' Create the AggregateError in the same realm as the array object.','line_number':3867,'multiline':False]['text':' Provide a more useful error stack if possible: This function is typically','line_number':3873,'multiline':False]['text':' called from Promise job queue, which doesn't have any JS frames on the','line_number':3874,'multiline':False]['text':' stack. So when we create the AggregateError below, its stack property will','line_number':3875,'multiline':False]['text':' be set to the empty string, which makes it harder to debug the error cause.','line_number':3876,'multiline':False]['text':' To avoid this situation set-up an async stack based on the Promise','line_number':3877,'multiline':False]['text':' allocation site, which should point to calling site of |Promise.any|.','line_number':3878,'multiline':False]['text':' AutoSetAsyncStackForNewCalls requires a new activation before it takes','line_number':3888,'multiline':False]['text':' effect, so call into the self-hosting helper to set-up new call frames.','line_number':3889,'multiline':False]['text':' |error| isn't guaranteed to be an AggregateError in case of OOM or stack','line_number':3895,'multiline':False]['text':' overflow.','line_number':3896,'multiline':False]['text':' Adopt the existing saved frames when present.','line_number':3907,'multiline':False]['text':' https://tc39.github.io/ecma262/#sec-promise.reject','line_number':3917,'multiline':False]['text':'','line_number':3918,'multiline':False]['text':' Unified implementation of','line_number':3919,'multiline':False]['text':' 25.6.4.4 Promise.reject ( r )','line_number':3920,'multiline':False]['text':' 25.6.4.5 Promise.resolve ( x )','line_number':3921,'multiline':False]['text':' 25.6.4.5.1 PromiseResolve ( C, x )','line_number':3922,'multiline':False]['text':' Steps 1-2 of Promise.reject and Promise.resolve.','line_number':3926,'multiline':False]['text':' Step 1: Let C be the this value.','line_number':3927,'multiline':False]['text':' Step 2: If Type(C) is not Object, throw a TypeError exception.','line_number':3928,'multiline':False]['text':' Promise.resolve, step 3: Return ? PromiseResolve(C, x).','line_number':3938,'multiline':False]['text':' PromiseResolve, step 1: Assert: Type(C) is Object (implicit).','line_number':3939,'multiline':False]['text':' PromiseResolve, step 2: If IsPromise(x) is true, then','line_number':3940,'multiline':False]['text':' Treat instances of Promise from other compartments as Promises','line_number':3947,'multiline':False]['text':' here, too.','line_number':3948,'multiline':False]['text':' It's important to do the GetProperty for the `constructor`','line_number':3949,'multiline':False]['text':' below through the wrapper, because wrappers can change the','line_number':3950,'multiline':False]['text':' outcome, so instead of unwrapping and then performing the','line_number':3951,'multiline':False]['text':' GetProperty, just check here and then operate on the original','line_number':3952,'multiline':False]['text':' object again.','line_number':3953,'multiline':False]['text':' Step 2.a: Let xConstructor be ? Get(x, "constructor").','line_number':3959,'multiline':False]['text':' Step 2.b: If SameValue(xConstructor, C) is true, return x.','line_number':3965,'multiline':False]['text':' The step numbers below happen to be the same for PromiseResolve and','line_number':3972,'multiline':False]['text':' Promise.reject.','line_number':3973,'multiline':False]['text':' Step 3: Let promiseCapability be ? NewPromiseCapability(C).','line_number':3974,'multiline':False]['text':' PromiseResolve, step 4:','line_number':3982,'multiline':False]['text':'      Perform ? Call(promiseCapability.[[Resolve]], undefined, « x »).','line_number':3983,'multiline':False]['text':' Promise.reject, step 4:','line_number':3988,'multiline':False]['text':'      Perform ? Call(promiseCapability.[[Reject]], undefined, « r »).','line_number':3989,'multiline':False]['text':' Step 5: Return promiseCapability.[[Promise]].','line_number':3996,'multiline':False]['text':'*
 * ES2016, 25.4.4.4, Promise.reject.
 ','line_number':4007,'multiline':True]['text':'*
 * Unforgeable version of ES2016, 25.4.4.4, Promise.reject.
 ','line_number':4023,'multiline':True]['text':' static ','line_number':4026,'multiline':True]['text':'*
 * ES2016, 25.4.4.5, Promise.resolve.
 ','line_number':4048,'multiline':True]['text':'*
 * Unforgeable version of ES2016, 25.4.4.5, Promise.resolve.
 ','line_number':4064,'multiline':True]['text':' static ','line_number':4067,'multiline':True]['text':'*
 * Unforgeable version of ES2016, 25.4.4.5, Promise.resolve(value), where
 * value is guaranteed not to be a promise.
 ','line_number':4077,'multiline':True]['text':' static ','line_number':4081,'multiline':True]['text':'*
 * ES2016, 25.4.4.6 get Promise [ @@species ]
 ','line_number':4123,'multiline':True]['text':' Step 1: Return the this value.','line_number':4129,'multiline':False]['text':' ES2016, 25.4.5.1, implemented in Promise.js.','line_number':4134,'multiline':False]['text':' Do not use the incumbent global, this is a special case used by the','line_number':4137,'multiline':False]['text':' debugger.','line_number':4138,'multiline':False]['text':' Use incumbent global, this is the normal operation.','line_number':4141,'multiline':False]['text':' If `resultCapability.promise` is a Promise object,','line_number':4153,'multiline':False]['text':' `resultCapability.{resolve,reject}` may be optimized out,','line_number':4154,'multiline':False]['text':' but if they're not, they should be callable.','line_number':4155,'multiline':False]['text':' If `resultCapability.promise` is a non-Promise object','line_number':4161,'multiline':False]['text':' (including wrapped Promise object),','line_number':4162,'multiline':False]['text':' `resultCapability.{resolve,reject}` should be callable.','line_number':4163,'multiline':False]['text':' For debugger usage, `resultCapability.promise` should be a','line_number':4170,'multiline':False]['text':' maybe-wrapped Promise object. The other fields are not used.','line_number':4171,'multiline':False]['text':'','line_number':4172,'multiline':False]['text':' This is the only case where we allow `resolve` and `reject` to','line_number':4173,'multiline':False]['text':' be null when the `promise` field is not a PromiseObject.','line_number':4174,'multiline':False]['text':' `resultCapability.promise` is null for the following cases:','line_number':4181,'multiline':False]['text':'   * resulting Promise is known to be unused','line_number':4182,'multiline':False]['text':'   * Async Function','line_number':4183,'multiline':False]['text':'   * Async Generator','line_number':4184,'multiline':False]['text':' In any case, other fields are also not used.','line_number':4185,'multiline':False]['text':' Ensure the onFulfilled handler has the expected type.','line_number':4192,'multiline':False]['text':' Ensure the onRejected handler has the expected type.','line_number':4199,'multiline':False]['text':' Handlers must either both be present or both be absent.','line_number':4206,'multiline':False]['text':' Whether to create a promise as the return value of Promise#{then,catch}.','line_number':4248,'multiline':False]['text':' If the return value is known to be unused, and if the operation is known','line_number':4249,'multiline':False]['text':' to be unobservable, we can skip creating the promise.','line_number':4250,'multiline':False]['text':' Step 3.','line_number':4257,'multiline':False]['text':' Step 4.','line_number':4266,'multiline':False]['text':' ES2016, 25.4.5.3., steps 3-5.','line_number':4289,'multiline':False]['text':' Steps 3-4.','line_number':4310,'multiline':False]['text':' Step 5.','line_number':4321,'multiline':False]['text':' Steps 3-4.','line_number':4339,'multiline':False]['text':' Step 5.','line_number':4347,'multiline':False]['text':' ES2016, 25.4.5.3., steps 3-5.','line_number':4397,'multiline':False]['text':' Steps 3-4.','line_number':4408,'multiline':False]['text':' Step 5.','line_number':4422,'multiline':False]['text':' Reject the promise, but also propagate this uncatchable error.','line_number':4441,'multiline':False]['text':' Some async/await functions are implemented here instead of','line_number':4453,'multiline':False]['text':' js/src/builtin/AsyncFunction.cpp, to call Promise internal functions.','line_number':4454,'multiline':False]['text':' ES 2018 draft 14.6.11 and 14.7.14 step 1.','line_number':4456,'multiline':False]['text':' Step 1.','line_number':4458,'multiline':False]['text':' ES2019 draft rev 7428c89bef626548084cd4e697a19ece7168f24c','line_number':4484,'multiline':False]['text':' 25.7.5.1 AsyncFunctionStart, steps 3.f-g.','line_number':4485,'multiline':False]['text':' OOM after resolving promise.','line_number':4490,'multiline':False]['text':' Report a warning and ignore the result.','line_number':4491,'multiline':False]['text':' ES2019 draft rev 7428c89bef626548084cd4e697a19ece7168f24c','line_number':4503,'multiline':False]['text':' 25.7.5.1 AsyncFunctionStart, steps 3.d-e, 3.g.','line_number':4504,'multiline':False]['text':' https://tc39.github.io/ecma262/#await','line_number':4510,'multiline':False]['text':'','line_number':4511,'multiline':False]['text':' Helper function that performs 6.2.3.1 Await(promise) steps 2 and 9.','line_number':4512,'multiline':False]['text':' The same steps are also used in a few other places in the spec.','line_number':4513,'multiline':False]['text':' Step 2: Let promise be ? PromiseResolve(%Promise%, « value »).','line_number':4520,'multiline':False]['text':' This downcast is safe because unforgeableResolve either returns `value`','line_number':4526,'multiline':False]['text':' (only if it is already a possibly-wrapped promise) or creates a new','line_number':4527,'multiline':False]['text':' promise using the Promise constructor.','line_number':4528,'multiline':False]['text':' Steps 3-8 of the spec create onFulfilled and onRejected functions.','line_number':4535,'multiline':False]['text':' Step 9: Perform ! PerformPromiseThen(promise, onFulfilled, onRejected).','line_number':4537,'multiline':False]['text':' https://tc39.github.io/ecma262/#await','line_number':4552,'multiline':False]['text':'','line_number':4553,'multiline':False]['text':' 6.2.3.1 Await(promise) steps 2-10 when the running execution context is','line_number':4554,'multiline':False]['text':' evaluating an `await` expression in an async function.','line_number':4555,'multiline':False]['text':' 6.2.3.1 Await(promise) steps 2-10 when the running execution context is','line_number':4570,'multiline':False]['text':' evaluating an `await` expression in an async generator.','line_number':4571,'multiline':False]['text':' https://tc39.github.io/ecma262/#sec-%asyncfromsynciteratorprototype%.next','line_number':4583,'multiline':False]['text':' 25.1.4.2.1 %AsyncFromSyncIteratorPrototype%.next','line_number':4584,'multiline':False]['text':' 25.1.4.2.2 %AsyncFromSyncIteratorPrototype%.return','line_number':4585,'multiline':False]['text':' 25.1.4.2.3 %AsyncFromSyncIteratorPrototype%.throw','line_number':4586,'multiline':False]['text':' Step 1: Let O be the this value.','line_number':4589,'multiline':False]['text':' Step 2: Let promiseCapability be ! NewPromiseCapability(%Promise%).','line_number':4592,'multiline':False]['text':' Step 3: If Type(O) is not Object, or if O does not have a','line_number':4599,'multiline':False]['text':'         [[SyncIteratorRecord]] internal slot, then','line_number':4600,'multiline':False]['text':' NB: See https://github.com/tc39/proposal-async-iteration/issues/105','line_number':4603,'multiline':False]['text':' for why this check shouldn't be necessary as long as we can ensure','line_number':4604,'multiline':False]['text':' the Async-from-Sync iterator can't be accessed directly by user','line_number':4605,'multiline':False]['text':' code.','line_number':4606,'multiline':False]['text':' Step 3.a: Let invalidIteratorError be a newly created TypeError object.','line_number':4608,'multiline':False]['text':' Step 3.b: Perform ! Call(promiseCapability.[[Reject]], undefined,','line_number':4614,'multiline':False]['text':'                          « invalidIteratorError »).','line_number':4615,'multiline':False]['text':' Step 3.c: Return promiseCapability.[[Promise]].','line_number':4620,'multiline':False]['text':' Step 4: Let syncIteratorRecord be O.[[SyncIteratorRecord]].','line_number':4628,'multiline':False]['text':' next() preparing for steps 5-6.','line_number':4633,'multiline':False]['text':' return() steps 5-7.','line_number':4636,'multiline':False]['text':' Step 5: Let return be GetMethod(syncIterator, "return").','line_number':4637,'multiline':False]['text':' Step 6: IfAbruptRejectPromise(return, promiseCapability).','line_number':4638,'multiline':False]['text':' Step 7: If return is undefined, then','line_number':4643,'multiline':False]['text':' (Note: GetMethod contains a step that changes `null` to `undefined`;','line_number':4644,'multiline':False]['text':' we omit that step above, and check for `null` here instead.)','line_number':4645,'multiline':False]['text':' Step 7.a: Let iterResult be ! CreateIterResultObject(value, true).','line_number':4647,'multiline':False]['text':' Step 7.b: Perform ! Call(promiseCapability.[[Resolve]], undefined,','line_number':4655,'multiline':False]['text':'                          « iterResult »).','line_number':4656,'multiline':False]['text':' Step 7.c: Return promiseCapability.[[Promise]].','line_number':4661,'multiline':False]['text':' noexcept(true) steps 5-7.','line_number':4666,'multiline':False]['text':' Step 5: Let throw be GetMethod(syncIterator, "throw").','line_number':4669,'multiline':False]['text':' Step 6: IfAbruptRejectPromise(throw, promiseCapability).','line_number':4670,'multiline':False]['text':' Step 7: If throw is undefined, then','line_number':4675,'multiline':False]['text':' (Note: GetMethod contains a step that changes `null` to `undefined`;','line_number':4676,'multiline':False]['text':' we omit that step above, and check for `null` here instead.)','line_number':4677,'multiline':False]['text':' Step 7.a: Perform ! Call(promiseCapability.[[Reject]], undefined, «','line_number':4679,'multiline':False]['text':' value »).','line_number':4680,'multiline':False]['text':' Step 7.b: Return promiseCapability.[[Promise]].','line_number':4685,'multiline':False]['text':' next() steps 5-6.','line_number':4691,'multiline':False]['text':'     Step 5: Let result be IteratorNext(syncIteratorRecord, value).','line_number':4692,'multiline':False]['text':'     Step 6: IfAbruptRejectPromise(result, promiseCapability).','line_number':4693,'multiline':False]['text':' return/throw() steps 8-9.','line_number':4694,'multiline':False]['text':'     Step 8: Let result be Call(throw, syncIterator, « value »).','line_number':4695,'multiline':False]['text':'     Step 9: IfAbruptRejectPromise(result, promiseCapability).','line_number':4696,'multiline':False]['text':'','line_number':4697,'multiline':False]['text':' Including the changes from: https://github.com/tc39/ecma262/pull/1776','line_number':4698,'multiline':False]['text':' next() step 5 -> IteratorNext Step 3:','line_number':4711,'multiline':False]['text':'     If Type(result) is not Object, throw a TypeError exception.','line_number':4712,'multiline':False]['text':' Followed by IfAbruptRejectPromise in step 6.','line_number':4713,'multiline':False]['text':'','line_number':4714,'multiline':False]['text':' return/throw() Step 10: If Type(result) is not Object, then','line_number':4715,'multiline':False]['text':'     Step 10.a: Perform ! Call(promiseCapability.[[Reject]], undefined,','line_number':4716,'multiline':False]['text':'                               « a newly created TypeError object »).','line_number':4717,'multiline':False]['text':'     Step 10.b: Return promiseCapability.[[Promise]].','line_number':4718,'multiline':False]['text':' next() Step 7, return/throw() Step 11: Return','line_number':4738,'multiline':False]['text':'     ! AsyncFromSyncIteratorContinuation(result, promiseCapability).','line_number':4739,'multiline':False]['text':'','line_number':4740,'multiline':False]['text':' The step numbers below are for','line_number':4741,'multiline':False]['text':' 25.1.4.4 AsyncFromSyncIteratorContinuation ( result, promiseCapability ).','line_number':4742,'multiline':False]['text':' Step 1: Let done be IteratorComplete(result).','line_number':4744,'multiline':False]['text':' Step 2: IfAbruptRejectPromise(done, promiseCapability).','line_number':4745,'multiline':False]['text':' Step 3: Let value be IteratorValue(result).','line_number':4752,'multiline':False]['text':' Step 4: IfAbruptRejectPromise(value, promiseCapability).','line_number':4753,'multiline':False]['text':' Step numbers below include the changes in','line_number':4759,'multiline':False]['text':' <https://github.com/tc39/ecma262/pull/1470>, which inserted a new step 6.','line_number':4760,'multiline':False]['text':'','line_number':4761,'multiline':False]['text':' Steps 7-9 (reordered).','line_number':4762,'multiline':False]['text':' Step 7: Let steps be the algorithm steps defined in Async-from-Sync','line_number':4763,'multiline':False]['text':'         Iterator Value Unwrap Functions.','line_number':4764,'multiline':False]['text':' Step 8: Let onFulfilled be CreateBuiltinFunction(steps, « [[Done]] »).','line_number':4765,'multiline':False]['text':' Step 9: Set onFulfilled.[[Done]] to done.','line_number':4766,'multiline':False]['text':' Steps 5 and 10 are identical to some steps in Await; we have a utility','line_number':4772,'multiline':False]['text':' function InternalAwait() that implements the idiom.','line_number':4773,'multiline':False]['text':'','line_number':4774,'multiline':False]['text':' Step 5: Let valueWrapper be PromiseResolve(%Promise%, « value »).','line_number':4775,'multiline':False]['text':' Step 6: IfAbruptRejectPromise(valueWrapper, promiseCapability).','line_number':4776,'multiline':False]['text':' Step 10: Perform ! PerformPromiseThen(valueWrapper, onFulfilled,','line_number':4777,'multiline':False]['text':'                                      undefined, promiseCapability).','line_number':4778,'multiline':False]['text':' Step 11: Return promiseCapability.[[Promise]].','line_number':4785,'multiline':False]['text':' 25.5.3.3 AsyncGeneratorResolve ( generator, value, done )','line_number':4796,'multiline':False]['text':' 25.5.3.4 AsyncGeneratorReject ( generator, exception )','line_number':4804,'multiline':False]['text':' Unified implementation of:','line_number':4812,'multiline':False]['text':' 25.5.3.3 AsyncGeneratorResolve ( generator, value, done )','line_number':4813,'multiline':False]['text':' 25.5.3.4 AsyncGeneratorReject ( generator, exception )','line_number':4814,'multiline':False]['text':' 25.5.3.5 AsyncGeneratorResumeNext ( generator )','line_number':4815,'multiline':False]['text':' = UndefinedHandleValue ','line_number':4818,'multiline':True]['text':' = false ','line_number':4819,'multiline':True]['text':' Many paths through the algorithm end in recursive tail-calls.','line_number':4822,'multiline':False]['text':' We implement these with a loop.','line_number':4823,'multiline':False]['text':' No further action required.','line_number':4827,'multiline':False]['text':' 25.5.3.4 AsyncGeneratorReject ( generator, exception )','line_number':4830,'multiline':False]['text':' Step 1: Assert: generator is an AsyncGenerator instance (implicit).','line_number':4833,'multiline':False]['text':' Step 2: Let queue be generator.[[AsyncGeneratorQueue]].','line_number':4834,'multiline':False]['text':' Step 3: Assert: queue is not an empty List.','line_number':4835,'multiline':False]['text':' Step 4: Remove the first element from queue and let next be the value','line_number':4838,'multiline':False]['text':'         of that element.','line_number':4839,'multiline':False]['text':' Step 5: Let promiseCapability be next.[[Capability]].','line_number':4846,'multiline':False]['text':' Step 6: Perform ! Call(promiseCapability.[[Reject]], undefined,','line_number':4851,'multiline':False]['text':'                        « exception »).','line_number':4852,'multiline':False]['text':' Step 7: Perform ! AsyncGeneratorResumeNext(generator).','line_number':4857,'multiline':False]['text':' Step 8: Return undefined.','line_number':4858,'multiline':False]['text':' 25.5.3.3 AsyncGeneratorResolve ( generator, value, done )','line_number':4862,'multiline':False]['text':' Step 1: Assert: generator is an AsyncGenerator instance (implicit).','line_number':4865,'multiline':False]['text':' Step 2: Let queue be generator.[[AsyncGeneratorQueue]].','line_number':4866,'multiline':False]['text':' Step 3: Assert: queue is not an empty List.','line_number':4867,'multiline':False]['text':' Step 4: Remove the first element from queue and let next be the value','line_number':4870,'multiline':False]['text':'         of that element.','line_number':4871,'multiline':False]['text':' Step 5: Let promiseCapability be next.[[Capability]].','line_number':4878,'multiline':False]['text':' Step 6: Let iteratorResult be ! CreateIterResultObject(value, done).','line_number':4883,'multiline':False]['text':' Step 7: Perform ! Call(promiseCapability.[[Resolve]], undefined,','line_number':4891,'multiline':False]['text':'                        « iteratorResult »).','line_number':4892,'multiline':False]['text':' Step 8: Perform ! AsyncGeneratorResumeNext(generator).','line_number':4897,'multiline':False]['text':' Step 9: Return undefined.','line_number':4898,'multiline':False]['text':' 25.5.3.5 AsyncGeneratorResumeNext ( generator )','line_number':4903,'multiline':False]['text':' Step 1: Assert: generator is an AsyncGenerator instance (implicit).','line_number':4904,'multiline':False]['text':' Step 2: Let state be generator.[[AsyncGeneratorState]] (implicit).','line_number':4905,'multiline':False]['text':' Step 3: Assert: state is not "executing".','line_number':4906,'multiline':False]['text':' Step 4: If state is "awaiting-return", return undefined.','line_number':4910,'multiline':False]['text':' Step 5: Let queue be generator.[[AsyncGeneratorQueue]].','line_number':4915,'multiline':False]['text':' Step 6: If queue is an empty List, return undefined.','line_number':4916,'multiline':False]['text':' Step 7: Let next be the value of the first element of queue.','line_number':4921,'multiline':False]['text':' Step 8: Assert: next is an AsyncGeneratorRequest record.','line_number':4922,'multiline':False]['text':' Step 9: Let completion be next.[[Completion]].','line_number':4929,'multiline':False]['text':' Step 10: If completion is an abrupt completion, then','line_number':4932,'multiline':False]['text':' Step 10.a: If state is "suspendedStart", then','line_number':4934,'multiline':False]['text':' Step 10.a.i: Set generator.[[AsyncGeneratorState]] to "completed".','line_number':4936,'multiline':False]['text':' Step 10.a.ii: Set state to "completed".','line_number':4937,'multiline':False]['text':' Step 10.b: If state is "completed", then','line_number':4941,'multiline':False]['text':' Step 10.b.i: If completion.[[Type]] is return, then','line_number':4945,'multiline':False]['text':' Step 10.b.i.1: Set generator.[[AsyncGeneratorState]] to','line_number':4947,'multiline':False]['text':'                "awaiting-return".','line_number':4948,'multiline':False]['text':' (reordered)','line_number':4951,'multiline':False]['text':' Step 10.b.i.3: Let stepsFulfilled be the algorithm steps defined in','line_number':4952,'multiline':False]['text':'                AsyncGeneratorResumeNext Return Processor Fulfilled','line_number':4953,'multiline':False]['text':'                Functions.','line_number':4954,'multiline':False]['text':' Step 10.b.i.4: Let onFulfilled be CreateBuiltinFunction(','line_number':4955,'multiline':False]['text':'                stepsFulfilled, « [[Generator]] »).','line_number':4956,'multiline':False]['text':' Step 10.b.i.5: Set onFulfilled.[[Generator]] to generator.','line_number':4957,'multiline':False]['text':' Step 10.b.i.6: Let stepsRejected be the algorithm steps defined in','line_number':4958,'multiline':False]['text':'                AsyncGeneratorResumeNext Return Processor Rejected','line_number':4959,'multiline':False]['text':'                Functions.','line_number':4960,'multiline':False]['text':' Step 10.b.i.7: Let onRejected be CreateBuiltinFunction(','line_number':4961,'multiline':False]['text':'                stepsRejected, « [[Generator]] »).','line_number':4962,'multiline':False]['text':' Step 10.b.i.8: Set onRejected.[[Generator]] to generator.','line_number':4963,'multiline':False]['text':'','line_number':4964,'multiline':False]['text':' These steps are nearly identical to some steps in Await;','line_number':4970,'multiline':False]['text':' InternalAwait() implements the idiom.','line_number':4971,'multiline':False]['text':'','line_number':4972,'multiline':False]['text':' Step 10.b.i.2: Let promise be ? PromiseResolve(%Promise%,','line_number':4973,'multiline':False]['text':'                « _completion_.[[Value]] »).','line_number':4974,'multiline':False]['text':' Step 10.b.i.9: Perform ! PerformPromiseThen(promise, onFulfilled,','line_number':4975,'multiline':False]['text':'                                             onRejected).','line_number':4976,'multiline':False]['text':' Step 10.b.i.10: Return undefined.','line_number':4977,'multiline':False]['text':' Step 10.b.ii: Else,','line_number':4985,'multiline':False]['text':' Step 10.b.ii.1: Assert: completion.[[Type]] is throw.','line_number':4987,'multiline':False]['text':' Step 10.b.ii.2: Perform ! AsyncGeneratorReject(generator,','line_number':4990,'multiline':False]['text':'                 completion.[[Value]]).','line_number':4991,'multiline':False]['text':' Step 10.b.ii.3: Return undefined.','line_number':4992,'multiline':False]['text':' Step 11: Else if state is "completed", return','line_number':4998,'multiline':False]['text':'          ! AsyncGeneratorResolve(generator, undefined, true).','line_number':4999,'multiline':False]['text':' Step 12: Assert: state is either "suspendedStart" or "suspendedYield".','line_number':5006,'multiline':False]['text':' 25.5.3.7 AsyncGeneratorYield steps 8.b-e.','line_number':5012,'multiline':False]['text':' Since we don't have the place that handles return from yield','line_number':5013,'multiline':False]['text':' inside the generator, handle the case here, with extra state','line_number':5014,'multiline':False]['text':' State_AwaitingYieldReturn.','line_number':5015,'multiline':False]['text':' Step 16 (reordered): Set generator.[[AsyncGeneratorState]] to','line_number':5030,'multiline':False]['text':'                      "executing".','line_number':5031,'multiline':False]['text':' Steps 13-15, 17-21.','line_number':5034,'multiline':False]['text':' 25.5.3.6 AsyncGeneratorEnqueue ( generator, completion )','line_number':5039,'multiline':False]['text':' Step 1 (implicit).','line_number':5045,'multiline':False]['text':' Step 3.','line_number':5047,'multiline':False]['text':' Step 2.','line_number':5050,'multiline':False]['text':' Step 3.a.','line_number':5057,'multiline':False]['text':' Step 3.b.','line_number':5063,'multiline':False]['text':' Step 3.c.','line_number':5068,'multiline':False]['text':' The |resultPromise| must be same-compartment with |asyncGenObj|, because','line_number':5078,'multiline':False]['text':' it is stored in AsyncGeneratorRequest, which in turn is stored in a','line_number':5079,'multiline':False]['text':' reserved slot of |asyncGenObj|.','line_number':5080,'multiline':False]['text':' So we first enter the realm of |asyncGenObj|, then create the result','line_number':5081,'multiline':False]['text':' promise and resume the generator, and finally wrap the result promise to','line_number':5082,'multiline':False]['text':' match the original compartment.','line_number':5083,'multiline':False]['text':' Step 2.','line_number':5096,'multiline':False]['text':' Step 5 (reordered).','line_number':5103,'multiline':False]['text':' Steps 4, 6.','line_number':5111,'multiline':False]['text':' Step 7.','line_number':5116,'multiline':False]['text':' Step 8.','line_number':5118,'multiline':False]['text':' Step 9.','line_number':5124,'multiline':False]['text':' Fast path when the default Promise state is intact.','line_number':5139,'multiline':False]['text':' Step 1.','line_number':5145,'multiline':False]['text':' The returned promise of Promise#then and Promise#catch contains','line_number':5163,'multiline':False]['text':' stack info if async stack is enabled.  Even if their return value is not','line_number':5164,'multiline':False]['text':' used explicitly in the script, the stack info is observable in devtools','line_number':5165,'multiline':False]['text':' and profilers.  We shouldn't apply the optimization not to allocate the','line_number':5166,'multiline':False]['text':' returned Promise object if the it's implicitly used by them.','line_number':5167,'multiline':False]['text':' If devtools is opened, the current realm will become debuggee.','line_number':5172,'multiline':False]['text':' There are 2 profilers, and they can be independently enabled.','line_number':5177,'multiline':False]['text':' The stack is also observable from Error#stack, but we don't care since','line_number':5185,'multiline':False]['text':' it's nonstandard feature.','line_number':5186,'multiline':False]['text':' ES2016, 25.4.5.3.','line_number':5190,'multiline':False]['text':' ES2016, 25.4.5.3.','line_number':5196,'multiline':False]['text':' Step 1 (implicit).','line_number':5204,'multiline':False]['text':' Step 2.','line_number':5205,'multiline':False]['text':' Fast path when the default Promise state is intact.','line_number':5213,'multiline':False]['text':' Steps 3-4.','line_number':5231,'multiline':False]['text':' Step 5.','line_number':5241,'multiline':False]['text':' ES2016, 25.4.5.3.','line_number':5255,'multiline':False]['text':' ES2016, 25.4.5.3.','line_number':5263,'multiline':False]['text':' ES2016, 25.4.5.3.1.','line_number':5270,'multiline':False]['text':' Step 1 (implicit).','line_number':5274,'multiline':False]['text':' Step 2 (implicit).','line_number':5275,'multiline':False]['text':' Step 3.','line_number':5277,'multiline':False]['text':' Step 4.','line_number':5283,'multiline':False]['text':' Step 7.','line_number':5289,'multiline':False]['text':' Step 1 (implicit).','line_number':5304,'multiline':False]['text':' Step 2 (implicit).','line_number':5305,'multiline':False]['text':' Step 3.','line_number':5307,'multiline':False]['text':' Step 4.','line_number':5310,'multiline':False]['text':' Step 7.','line_number':5313,'multiline':False]['text':' https://tc39.github.io/ecma262/#sec-performpromisethen','line_number':5326,'multiline':False]['text':' 25.6.5.4.1 PerformPromiseThen steps 8-11.','line_number':5327,'multiline':False]['text':' Step 8: If promise.[[PromiseState]] is "pending", then','line_number':5331,'multiline':False]['text':' Step 8.a: Append fulfillReaction as the last element of the List that is','line_number':5335,'multiline':False]['text':'           promise.[[PromiseFulfillReactions]].','line_number':5336,'multiline':False]['text':' Step 8.b: Append rejectReaction as the last element of the List that is','line_number':5337,'multiline':False]['text':'           promise.[[PromiseRejectReactions]].','line_number':5338,'multiline':False]['text':'','line_number':5339,'multiline':False]['text':' Instead of creating separate reaction records for fulfillment and','line_number':5340,'multiline':False]['text':' rejection, we create a combined record. All places we use the record','line_number':5341,'multiline':False]['text':' can handle that.','line_number':5342,'multiline':False]['text':' Steps 9-10. In the spec, step 9 runs if the promise is fulfilled, step 10','line_number':5348,'multiline':False]['text':' if it is rejected. This implementation unifies the two paths.','line_number':5349,'multiline':False]['text':' Step 10.a.','line_number':5351,'multiline':False]['text':' Step 9.a: Let value be promise.[[PromiseResult]].','line_number':5355,'multiline':False]['text':' Step 10.b: Let reason be promise.[[PromiseResult]].','line_number':5356,'multiline':False]['text':' We might be operating on a promise from another compartment. In that','line_number':5359,'multiline':False]['text':' case, we need to wrap the result/reason value before using it.','line_number':5360,'multiline':False]['text':' Step 10.c: If promise.[[PromiseIsHandled]] is false,','line_number':5365,'multiline':False]['text':'            perform HostPromiseRejectionTracker(promise, "handle").','line_number':5366,'multiline':False]['text':' Step 9.b: Perform EnqueueJob("PromiseJobs", PromiseReactionJob,','line_number':5372,'multiline':False]['text':'                              « fulfillReaction, value »).','line_number':5373,'multiline':False]['text':' Step 10.d: Perform EnqueueJob("PromiseJobs", PromiseReactionJob,','line_number':5374,'multiline':False]['text':'                               « rejectReaction, reason »).','line_number':5375,'multiline':False]['text':' Step 11: Set promise.[[PromiseIsHandled]] to true.','line_number':5381,'multiline':False]['text':' The code that creates Promise reactions can handle wrapped Promises,','line_number':5393,'multiline':False]['text':' unwrapping them as needed. That means that the `promise` and `reaction`','line_number':5394,'multiline':False]['text':' objects we have here aren't necessarily from the same compartment. In','line_number':5395,'multiline':False]['text':' order to store the reaction on the promise, we have to ensure that it','line_number':5396,'multiline':False]['text':' is properly wrapped.','line_number':5397,'multiline':False]['text':' 25.4.5.3.1 steps 7.a,b.','line_number':5407,'multiline':False]['text':' If no reactions existed so far, just store the reaction record directly.','line_number':5411,'multiline':False]['text':' If only a single reaction exists, it's stored directly instead of in a','line_number':5418,'multiline':False]['text':' list. In that case, `reactionsObj` might be a wrapper, which we can','line_number':5419,'multiline':False]['text':' always safely unwrap.','line_number':5420,'multiline':False]['text':' If a single reaction existed so far, create a list and store the','line_number':5432,'multiline':False]['text':' old and the new reaction in it.','line_number':5433,'multiline':False]['text':' Otherwise, just store the new reaction.','line_number':5446,'multiline':False]['text':' `dependentPromise` should be a maybe-wrapped Promise.','line_number':5468,'multiline':False]['text':' Leave resolve and reject as null.','line_number':5471,'multiline':False]['text':'*
 * Returns all promises that directly depend on this one. That means those
 * created by calling `then` on this promise, or the promise returned by
 * `Promise.all(iterable)` or `Promise.race(iterable)`, with this promise
 * being a member of the passed-in `iterable`.
 *
 * Per spec, we should have separate lists of reaction records for the
 * fulfill and reject cases. As an optimization, we have only one of those,
 * containing the required data for both cases. So we just walk that list
 * and extract the dependent promises from all reaction records.
 ','line_number':5493,'multiline':True]['text':' Not all reactions have a Promise on them.','line_number':5528,'multiline':False]['text':' Promise was resolved, so no reaction records are present.','line_number':5544,'multiline':False]['text':' No reaction records are attached to this promise.','line_number':5550,'multiline':False]['text':' static ','line_number':5609,'multiline':True]['text':' For xray'd Promises, the resolve fun may have been created in another','line_number':5628,'multiline':False]['text':' compartment. For the call below to work in that case, wrap the','line_number':5629,'multiline':False]['text':' function into the current compartment.','line_number':5630,'multiline':False]['text':' static ','line_number':5639,'multiline':True]['text':' static ','line_number':5659,'multiline':True]['text':' We can skip `await` with an already resolved value only if the current frame','line_number':5693,'multiline':False]['text':' is the topmost JS frame and the current job is the last job in the job queue.','line_number':5694,'multiline':False]['text':' This guarantees that any new job enqueued in the current turn will be','line_number':5695,'multiline':False]['text':' executed immediately after the current job.','line_number':5696,'multiline':False]['text':'','line_number':5697,'multiline':False]['text':' Currently we only support skipping jobs when the async function is resumed','line_number':5698,'multiline':False]['text':' at least once.','line_number':5699,'multiline':False]['text':' The current frame should be the async function.','line_number':5703,'multiline':False]['text':' The iterator is not a function frame, it is a module frame.','line_number':5709,'multiline':False]['text':' Ignore this optimization for now.','line_number':5710,'multiline':False]['text':' The parent frame should be the `next` function of the generator that is','line_number':5722,'multiline':False]['text':' internally called in AsyncFunctionResume resp. AsyncGeneratorResume.','line_number':5723,'multiline':False]['text':' The initial call into an async function can happen from top-level code, so','line_number':5727,'multiline':False]['text':' the parent frame isn't required to be a function frame. Contrary to that,','line_number':5728,'multiline':False]['text':' the parent frame for an async generator function is always a function','line_number':5729,'multiline':False]['text':' frame, because async generators can't directly fall through to an `await`','line_number':5730,'multiline':False]['text':' expression from their initial call.','line_number':5731,'multiline':False]['text':' Always skip InterpretGeneratorResume if present.','line_number':5737,'multiline':False]['text':' There should be no more frames.','line_number':5757,'multiline':False]['text':' Primitive values cannot be 'thenables', so we can trivially skip the','line_number':5777,'multiline':False]['text':' await operation.','line_number':5778,'multiline':False]['text':' We don't optimize rejected Promises for now.','line_number':5804,'multiline':False]['text':' Ensure all callers of this are jumping past the','line_number':5815,'multiline':False]['text':' extract if it's not possible to extract.','line_number':5816,'multiline':False]['text':' Primitive values cannot be 'thenables', so we can trivially skip the','line_number':5825,'multiline':False]['text':' await operation.','line_number':5826,'multiline':False]['text':' unused ','line_number':5860,'multiline':True]['text':' unused ','line_number':5861,'multiline':True]['text':' unused ','line_number':5869,'multiline':True]['text':' unused ','line_number':5870,'multiline':True]