['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':15,'multiline':False]['text':' JS_vsmprintf','line_number':16,'multiline':False]['text':' JS::WarningReporter','line_number':17,'multiline':False]['text':' If there's a runtime exception type associated with this error','line_number':43,'multiline':False]['text':' number, set that as the pending exception.  For errors occuring at','line_number':44,'multiline':False]['text':' compile time, this is very likely to be a JSEXN_SYNTAXERR.','line_number':45,'multiline':False]['text':' On the main thread, report the error immediately. When compiling off','line_number':57,'multiline':False]['text':' thread, save the error so that the thread finishing the parse can report','line_number':58,'multiline':False]['text':' it later.','line_number':59,'multiline':False]['text':' On the main thread, report the error immediately. When compiling off','line_number':96,'multiline':False]['text':' thread, save the error so that the thread finishing the parse can report','line_number':97,'multiline':False]['text':' it later.','line_number':98,'multiline':False]['text':' No assertSameCompartment version that doesn't take JSContext...','line_number':147,'multiline':False]['text':' DEBUG','line_number':151,'multiline':False]['text':' Check the error report, and set a JavaScript-catchable exception','line_number':163,'multiline':False]['text':' if the error is defined to have an associated exception.','line_number':164,'multiline':False]['text':'
 * The given JSErrorReport object have been zeroed and must not outlive
 * cx->fp() (otherwise owned fields may become invalid).
 ','line_number':168,'multiline':True]['text':'
   * Walk stack until we find a frame that is associated with a non-builtin
   * rather than a builtin frame and which we're allowed to know about.
   ','line_number':178,'multiline':True]['text':' only {0} thru {9} supported ','line_number':199,'multiline':True]['text':' free the arguments only if we allocated them ','line_number':211,'multiline':True]['text':' Gather the arguments into an array, and accumulate their sizes.
   *
   * We could template on the type of argsArg, but we're already trusting people
   * to do the right thing with varargs, so might as well trust them on this
   * part too.  Upstream consumers do assert that it's the right thing.  Also,
   * if argsArg were strongly typed we'd still need casting below for this to
   * compile, because typeArg is not known at compile-time here.
   ','line_number':237,'multiline':True]['text':'
 * The arguments from ap need to be packaged up into an array and stored
 * into the report struct.
 *
 * The format string addressed by the error number may contain operands
 * identified by the format {N}, where N is a decimal digit. Each of these
 * is to be replaced by the Nth argument from the va_list. The complete
 * message is placed into reportp->message_.
 *
 * Returns true if the expansion succeeds (can fail if out of memory).
 *
 * messageArgs is a `const char**` or a `const char16_t**` but templating on
 * that is not worth it here because AutoMessageArgs takes a void* anyway, and
 * using void* here simplifies our callers a bit.
 ','line_number':301,'multiline':True]['text':'
       * Parse the error format, substituting the argument X
       * for {X} in the format.
       ','line_number':348,'multiline':True]['text':' exclude the {n} ','line_number':366,'multiline':True]['text':'
         * Note - the above calculation assumes that each argument
         * is used once and only once in the expansion !!!
         ','line_number':369,'multiline':True]['text':' Non-null messageArgs should have at least one non-null arg. ','line_number':401,'multiline':True]['text':'
       * Zero arguments: the format string (if it exists) is the
       * entire message.
       ','line_number':403,'multiline':True]['text':' where's the right place for this ??? ','line_number':413,'multiline':True]