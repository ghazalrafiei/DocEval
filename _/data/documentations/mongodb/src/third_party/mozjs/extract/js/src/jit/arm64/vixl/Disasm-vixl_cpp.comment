['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' The immediate encoded in the instruction is not in the expected format.','line_number':236,'multiline':False]['text':' Test for movz: 16 bits set at positions 0, 16, 32 or 48.','line_number':276,'multiline':False]['text':' Test for movn: NOT(16 bits set at positions 0, 16, 32 or 48).','line_number':284,'multiline':False]['text':' If the top bit of the immediate is clear, the tested register is','line_number':731,'multiline':False]['text':' disassembled as Wt, otherwise Xt. As the top bit of the immediate is','line_number':732,'multiline':False]['text':' encoded in bit 31 of the instruction, we can reuse the Rt form, which','line_number':733,'multiline':False]['text':' uses bit 31 (normally "sf") to choose the register size.','line_number':734,'multiline':False]['text':' Print the shift separately for movk, to make it clear which half word will','line_number':750,'multiline':False]['text':' be overwritten. Movn and movz print the computed immediate, which includes','line_number':751,'multiline':False]['text':' shift calculation.','line_number':752,'multiline':False]['text':' Some system instructions hijack their Op and Cp fields to represent a','line_number':1284,'multiline':False]['text':' range of immediates instead of indicating a different instruction. This','line_number':1285,'multiline':False]['text':' makes the decoding tricky.','line_number':1286,'multiline':False]['text':' These instructions all use a two bit size field, except NOT and RBIT,','line_number':1440,'multiline':False]['text':' which use the field to encode the operation.','line_number':1441,'multiline':False]['text':' These instructions all use a one bit size field, except XTN, SQXTUN,','line_number':1486,'multiline':False]['text':' SHLL, SQXTN and UQXTN, which use a two bit size field.','line_number':1487,'multiline':False]['text':' Handled by logical cases above.','line_number':1598,'multiline':False]['text':' Operation is determined by the opcode bits (15-11), the top bit of','line_number':1628,'multiline':False]['text':' size (23) and the U bit (29).','line_number':1629,'multiline':False]['text':' Assert that index is not one of the previously handled logical','line_number':1634,'multiline':False]['text':' instructions.','line_number':1635,'multiline':False]['text':' Ignore the Q bit. Appending a "2" suffix is handled later.','line_number':1653,'multiline':False]['text':' cmode<0> == '1'.','line_number':2160,'multiline':False]['text':' cmode<3> == '1'.','line_number':2164,'multiline':False]['text':' cmode<0> == '1'.','line_number':2168,'multiline':False]['text':' cmode<2> == '1'.','line_number':2172,'multiline':False]['text':' cmode<1> == '1'.','line_number':2177,'multiline':False]['text':' cmode<0> == '1'','line_number':2185,'multiline':False]['text':' These instructions all use a two bit size field, except NOT and RBIT,','line_number':2212,'multiline':False]['text':' which use the field to encode the operation.','line_number':2213,'multiline':False]['text':' These instructions all use a one bit size field, except SQXTUN, SQXTN','line_number':2229,'multiline':False]['text':' and UQXTN, which use a two bit size field.','line_number':2230,'multiline':False]['text':' immh has to be non-zero.','line_number':2434,'multiline':False]['text':' 0001->8H, 001x->4S, 01xx->2D, all others undefined.','line_number':2494,'multiline':False]['text':' 00010->8B, 00011->16B, 001x0->4H, 001x1->8H,','line_number':2500,'multiline':False]['text':' 01xx0->2S, 01xx1->4S, 1xxx1->2D, all others undefined.','line_number':2501,'multiline':False]['text':' immh has to be non-zero.','line_number':2512,'multiline':False]['text':' sxtl variant.','line_number':2567,'multiline':False]['text':' sshll variant.','line_number':2570,'multiline':False]['text':' uxtl variant.','line_number':2578,'multiline':False]['text':' ushll variant.','line_number':2581,'multiline':False]['text':'instr','line_number':2657,'multiline':True]['text':' The base disasm does nothing more than disassembling into a buffer.','line_number':2658,'multiline':False]['text':' A core or scalar/vector register: [wx]0 - 30, [bhsdq]0 - 31.','line_number':2684,'multiline':False]['text':' Disassemble w31/x31 as stack pointer wsp/sp.','line_number':2687,'multiline':False]['text':' Disassemble w31/x31 as zero register wzr/xzr.','line_number':2690,'multiline':False]['text':' NB. The remaining substitution prefix characters are: GJKUZ.','line_number':2794,'multiline':False]['text':' Register. X or W, selected by sf bit.','line_number':2795,'multiline':False]['text':' FP register. S or D, selected by type field.','line_number':2796,'multiline':False]['text':' Vector register, V, vector format.','line_number':2797,'multiline':False]['text':' Handle registers tagged with b (bytes), z (instruction), or','line_number':2843,'multiline':False]['text':' r (registers), used for address updates in','line_number':2844,'multiline':False]['text':' NEON load/store instructions.','line_number':2845,'multiline':False]['text':' This is register Rm, but using a 4-bit specifier. Used in NEON','line_number':2873,'multiline':False]['text':' by-element instructions.','line_number':2874,'multiline':False]['text':' Handle consecutive vector register specifiers Vt2, Vt3 and Vt4.','line_number':2883,'multiline':False]['text':' Handle register specifier Rt2.','line_number':2889,'multiline':False]['text':' Increase field length for registers tagged as stack.','line_number':2898,'multiline':False]['text':' IMoveImm, IMoveNeg or IMoveLSL.','line_number':2950,'multiline':False]['text':' ILLiteral - Immediate Load Literal.','line_number':2970,'multiline':False]['text':' ILS - Immediate Load/Store.','line_number':2975,'multiline':False]['text':' ILPx - Immediate Load/Store Pair, x = access size.','line_number':2981,'multiline':False]['text':' format[3] is the scale value. Convert to a number.','line_number':2983,'multiline':False]['text':' ILU - Immediate Load/Store Unsigned.','line_number':2989,'multiline':False]['text':' ICondB - Immediate Conditional Branch.','line_number':3002,'multiline':False]['text':' IAddSub.','line_number':3007,'multiline':False]['text':' IFPSingle, IFPDouble or IFPFBits.','line_number':3013,'multiline':False]['text':' IFPFbits.','line_number':3014,'multiline':False]['text':' ITri - Immediate Triangular Encoded.','line_number':3023,'multiline':False]['text':' INzcv.','line_number':3027,'multiline':False]['text':' IP - Conditional compare.','line_number':3035,'multiline':False]['text':' Bitfields.','line_number':3039,'multiline':False]['text':' IExtract.','line_number':3042,'multiline':False]['text':' IS - Test and branch bit.','line_number':3046,'multiline':False]['text':' Is - Shift (immediate).','line_number':3051,'multiline':False]['text':' Is1 - SSHR.','line_number':3053,'multiline':False]['text':' Is2 - SLI.','line_number':3059,'multiline':False]['text':' IDebug - HLT and BRK instructions.','line_number':3071,'multiline':False]['text':' Immediate Vector.','line_number':3075,'multiline':False]['text':' IVExtract.','line_number':3077,'multiline':False]['text':' IVByElemIndex.','line_number':3081,'multiline':False]['text':' INS element.','line_number':3089,'multiline':False]['text':' IVLSLane[0123] - suffix indicates access size shift.','line_number':3111,'multiline':False]['text':' Modified Immediate cases.','line_number':3115,'multiline':False]['text':' IX - CLREX instruction.','line_number':3165,'multiline':False]['text':' IBr.','line_number':3184,'multiline':False]['text':' IBs+1 or IBs-r+1.','line_number':3188,'multiline':False]['text':' IBZ-r.','line_number':3198,'multiline':False]['text':' Use the prefetch hint to decide how to print the address.','line_number':3228,'multiline':False]['text':' PLD: prefetch for load.','line_number':3230,'multiline':False]['text':' PST: prepare for store.','line_number':3231,'multiline':False]['text':' PLI: preload instructions.','line_number':3234,'multiline':False]['text':' Unallocated hint.','line_number':3237,'multiline':False]['text':' HDP.','line_number':3257,'multiline':False]['text':' HLo.','line_number':3261,'multiline':False]['text':' Used by `adr`.','line_number':3299,'multiline':False]['text':' Used by `adrp`.','line_number':3300,'multiline':False]['text':' Compute the target address based on the effective address (after applying','line_number':3304,'multiline':False]['text':' code_address_offset). This is required for correct behaviour of adrp.','line_number':3305,'multiline':False]['text':' Strip code_address_offset before printing, so we can use the','line_number':3311,'multiline':False]['text':' semantically-correct AppendCodeRelativeAddressToOutput.','line_number':3312,'multiline':False]['text':' BImmUncn - unconditional branch immediate.','line_number':3329,'multiline':False]['text':' BImmCond - conditional branch immediate.','line_number':3331,'multiline':False]['text':' BImmCmpa - compare and branch immediate.','line_number':3333,'multiline':False]['text':' BImmTest - test and branch immediate.','line_number':3335,'multiline':False]['text':' If rd or rn is SP, uxtw on 32-bit registers and uxtx on 64-bit','line_number':3360,'multiline':False]['text':' registers becomes lsl.','line_number':3361,'multiline':False]['text':' Extend mode UXTX is an alias for shift mode LSL here.','line_number':3396,'multiline':False]['text':' Unallocated prefetch operations.','line_number':3420,'multiline':False]['text':' Just to be safe','line_number':3509,'multiline':False]['text':' namespace vixl','line_number':3519,'multiline':False]