['text':' @(#)e_log.c 1.3 95/01/18 ','line_number':2,'multiline':True]['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice 
 * is preserved.
 * ====================================================
 ','line_number':3,'multiline':True]['text':'#include <sys/cdefs.h>','line_number':14,'multiline':False]['text':'__FBSDID("$FreeBSD$");','line_number':15,'multiline':False]['text':' __ieee754_log(x)
 * Return the logrithm of x
 *
 * Method :                  
 *   1. Argument Reduction: find k and f such that 
 *			x = 2^k * (1+f), 
 *	   where  sqrt(2)/2 < 1+f < sqrt(2) .
 *
 *   2. Approximation of log(1+f).
 *	Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)
 *		 = 2s + 2/3 s**3 + 2/5 s**5 + .....,
 *	     	 = 2s + s*R
 *      We use a special Reme algorithm on [0,0.1716] to generate 
 * 	a polynomial of degree 14 to approximate R The maximum error 
 *	of this polynomial approximation is bounded by 2**-58.45. In
 *	other words,
 *		        2      4      6      8      10      12      14
 *	    R(z) ~ Lg1*s +Lg2*s +Lg3*s +Lg4*s +Lg5*s  +Lg6*s  +Lg7*s
 *  	(the values of Lg1 to Lg7 are listed in the program)
 *	and
 *	    |      2          14          |     -58.45
 *	    | Lg1*s +...+Lg7*s    -  R(z) | <= 2 
 *	    |                             |
 *	Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.
 *	In order to guarantee error in log below 1ulp, we compute log
 *	by
 *		log(1+f) = f - s*(f - R)	(if f is not too large)
 *		log(1+f) = f - (hfsq - s*(hfsq+R)).	(better accuracy)
 *	
 *	3. Finally,  log(x) = k*ln2 + log(1+f).  
 *			    = k*ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*ln2_lo)))
 *	   Here ln2 is split into two floating point number: 
 *			ln2_hi + ln2_lo,
 *	   where n*ln2_hi is always exact for |n| < 2000.
 *
 * Special cases:
 *	log(x) is NaN with signal if x < 0 (including -INF) ; 
 *	log(+INF) is +INF; log(0) is -INF with signal;
 *	log(NaN) is that NaN with no signal.
 *
 * Accuracy:
 *	according to an error analysis, the error is always less than
 *	1 ulp (unit in the last place).
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following 
 * constants. The decimal values may be used, provided that the 
 * compiler will convert from decimal to binary accurately enough 
 * to produce the hexadecimal values shown.
 ','line_number':17,'multiline':True]['text':' 3fe62e42 fee00000 ','line_number':73,'multiline':True]['text':' 3dea39ef 35793c76 ','line_number':74,'multiline':True]['text':' 43500000 00000000 ','line_number':75,'multiline':True]['text':' 3FE55555 55555593 ','line_number':76,'multiline':True]['text':' 3FD99999 9997FA04 ','line_number':77,'multiline':True]['text':' 3FD24924 94229359 ','line_number':78,'multiline':True]['text':' 3FCC71C5 1D8E78AF ','line_number':79,'multiline':True]['text':' 3FC74664 96CB03DE ','line_number':80,'multiline':True]['text':' 3FC39A09 D078C69F ','line_number':81,'multiline':True]['text':' 3FC2F112 DF3E5244 ','line_number':82,'multiline':True]['text':' x < 2**-1022  ','line_number':97,'multiline':True]['text':' log(+-0)=-inf ','line_number':99,'multiline':True]['text':' log(-#) = NaN ','line_number':100,'multiline':True]['text':' subnormal number, scale up x ','line_number':101,'multiline':True]['text':' normalize x or x/2 ','line_number':108,'multiline':True]['text':' -2**-20 <= f < 2**-20 ','line_number':111,'multiline':True]