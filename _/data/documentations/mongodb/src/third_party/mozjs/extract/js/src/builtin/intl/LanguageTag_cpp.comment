['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':31,'multiline':False]['text':' Tell the analysis the |std::all_of| function can't GC.','line_number':51,'multiline':False]['text':' unicode_language_subtag = alpha{2,3} | alpha{5,8};','line_number':54,'multiline':False]['text':' Tell the analysis the |std::all_of| function can't GC.','line_number':70,'multiline':False]['text':' unicode_script_subtag = alpha{4} ;','line_number':73,'multiline':False]['text':' Tell the analysis the |std::all_of| function can't GC.','line_number':88,'multiline':False]['text':' unicode_region_subtag = (alpha{2} | digit{3}) ;','line_number':91,'multiline':False]['text':' unicode_variant_subtag = (alphanum{5,8} | digit alphanum{3}) ;','line_number':108,'multiline':False]['text':' other_extensions = sep [alphanum-[tTuUxX]] (sep alphanum{2,8})+ ;','line_number':123,'multiline':False]['text':' NB: Allow any extension, including Unicode and Transform here, because','line_number':124,'multiline':False]['text':' this function is only used for an assertion.','line_number':125,'multiline':False]['text':' pu_extensions = sep [xX] (sep alphanum{1,8})+ ;','line_number':156,'multiline':False]['text':' The extension subtags aren't necessarily sorted, so we can't use binary','line_number':188,'multiline':False]['text':' search here.','line_number':189,'multiline':False]['text':' Replace the existing Unicode extension subtag or append a new one.','line_number':211,'multiline':False]['text':' Zero or one element lists are already sorted.','line_number':232,'multiline':False]['text':' Handle two element lists inline.','line_number':237,'multiline':False]['text':' Per 6.2.3 CanonicalizeUnicodeLocaleId, the very first step is to','line_number':267,'multiline':False]['text':' canonicalize the syntax by normalizing the case and ordering all subtags.','line_number':268,'multiline':False]['text':' The canonical syntax form is specified in UTS 35, 3.2.1.','line_number':269,'multiline':False]['text':' Language codes need to be in lower case. "JA" -> "ja"','line_number':271,'multiline':False]['text':' The first character of a script code needs to be capitalized.','line_number':275,'multiline':False]['text':' "hans" -> "Hans"','line_number':276,'multiline':False]['text':' Region codes need to be in upper case. "bu" -> "BU"','line_number':281,'multiline':False]['text':' The canonical case for variant subtags is lowercase.','line_number':286,'multiline':False]['text':' Extensions and privateuse subtags are case normalized in the','line_number':295,'multiline':False]['text':' |canonicalizeExtensions| method.','line_number':296,'multiline':False]['text':' The second step in UTS 35, 3.2.1, is to order all subtags.','line_number':298,'multiline':False]['text':' 1. Any variants are in alphabetical order.','line_number':301,'multiline':False]['text':' Reject the Locale identifier if a duplicate variant was found, e.g.','line_number':306,'multiline':False]['text':' "en-variant-Variant".','line_number':307,'multiline':False]['text':' 2. Any extensions are in alphabetical order by their singleton.','line_number':320,'multiline':False]['text':' 3. All attributes are sorted in alphabetical order.','line_number':321,'multiline':False]['text':' 4. All keywords and tfields are sorted by alphabetical order of their keys,','line_number':322,'multiline':False]['text':'    within their respective extensions.','line_number':323,'multiline':False]['text':' 5. Any type or tfield value "true" is removed.','line_number':324,'multiline':False]['text':' - A subsequent call to canonicalizeExtensions() will perform these steps.','line_number':325,'multiline':False]['text':' 6.2.3 CanonicalizeUnicodeLocaleId, step 2 transforms the locale identifier','line_number':327,'multiline':False]['text':' into its canonical form per UTS 3.2.1.','line_number':328,'multiline':False]['text':' 1. Use the bcp47 data to replace keys, types, tfields, and tvalues by their','line_number':330,'multiline':False]['text':' canonical forms.','line_number':331,'multiline':False]['text':' - A subsequent call to canonicalizeExtensions() will perform this step.','line_number':332,'multiline':False]['text':' 2. Replace aliases in the unicode_language_id and tlang (if any).','line_number':334,'multiline':False]['text':' - tlang is handled in canonicalizeExtensions().','line_number':335,'multiline':False]['text':' Replace deprecated language, region, and variant subtags with their','line_number':337,'multiline':False]['text':' preferred mappings.','line_number':338,'multiline':False]['text':' Replace deprecated language subtags with their preferred values.','line_number':344,'multiline':False]['text':' Replace deprecated script subtags with their preferred values.','line_number':349,'multiline':False]['text':' Replace deprecated region subtags with their preferred values.','line_number':354,'multiline':False]['text':' Replace deprecated variant subtags with their preferred values.','line_number':361,'multiline':False]['text':' No extension replacements are currently present.','line_number':366,'multiline':False]['text':' Private use sequences are left as is.','line_number':367,'multiline':False]['text':' 3. Replace aliases in special key values.','line_number':369,'multiline':False]['text':' - A subsequent call to canonicalizeExtensions() will perform this step.','line_number':370,'multiline':False]['text':' The canonical case for all extension subtags is lowercase.','line_number':389,'multiline':False]['text':' Any extensions are in alphabetical order by their singleton.','line_number':399,'multiline':False]['text':' "u-ca-chinese-t-zh-latn" -> "t-zh-latn-u-ca-chinese"','line_number':400,'multiline':False]['text':' The canonical case for privateuse subtags is lowercase.','line_number':420,'multiline':False]['text':'*
 * CanonicalizeUnicodeExtension( attributes, keywords )
 *
 * Canonical syntax per
 * <https://unicode.org/reports/tr35/#Canonical_Unicode_Locale_Identifiers>:
 *
 * - All attributes and keywords are in lowercase.
 *   - Note: The parser already converted keywords to lowercase.
 * - All attributes are sorted in alphabetical order.
 * - All keywords are sorted by alphabetical order of their keys.
 * - Any type value "true" is removed.
 *
 * Canonical form:
 * - All keys and types use the canonical form (from the name attribute;
 *   see Section 3.6.4 U Extension Data Files).
 ','line_number':431,'multiline':True]['text':' All attributes are sorted in alphabetical order.','line_number':484,'multiline':False]['text':' All keywords are sorted by alphabetical order of keys.','line_number':511,'multiline':False]['text':' Using merge sort, being a stable sort algorithm, guarantees that two','line_number':518,'multiline':False]['text':' keywords using the same key are never reordered. That means for example','line_number':519,'multiline':False]['text':' when we have the input "u-nu-thai-kf-false-nu-latn", we are guaranteed to','line_number':520,'multiline':False]['text':' get the result "u-kf-false-nu-thai-nu-latn", i.e. "nu-thai" still occurs','line_number':521,'multiline':False]['text':' before "nu-latn".','line_number':522,'multiline':False]['text':' This is required so that deduplication below preserves the first keyword','line_number':523,'multiline':False]['text':' for a given key and discards the rest.','line_number':524,'multiline':False]['text':' Append all Unicode extension attributes.','line_number':540,'multiline':False]['text':' Skip duplicate attributes.','line_number':544,'multiline':False]['text':' Elide the Unicode extension type "true".','line_number':584,'multiline':False]['text':' Otherwise append the complete Unicode extension keyword.','line_number':588,'multiline':False]['text':' Elide the type "true" if present in the replacement.','line_number':596,'multiline':False]['text':' Otherwise append the Unicode key (including the separator) and the','line_number':600,'multiline':False]['text':' replaced type.','line_number':601,'multiline':False]['text':' Append all Unicode extension keywords.','line_number':606,'multiline':False]['text':' Skip duplicate keywords.','line_number':610,'multiline':False]['text':' Keyword without type value.','line_number':626,'multiline':False]['text':' Search if there's a replacement for the current Unicode keyword.','line_number':635,'multiline':False]['text':' We can keep the previous extension when canonicalization didn't modify it.','line_number':648,'multiline':False]['text':' Null-terminate the new string and replace the previous extension.','line_number':651,'multiline':False]['text':' Append the language subtag.','line_number':688,'multiline':False]['text':' Append the script subtag if present.','line_number':693,'multiline':False]['text':' Append the region subtag if present.','line_number':700,'multiline':False]['text':' Append the variant subtags if present.','line_number':707,'multiline':False]['text':' Append the extensions subtags if present.','line_number':712,'multiline':False]['text':' Append the private-use subtag if present.','line_number':717,'multiline':False]['text':'*
 * CanonicalizeTransformExtension
 *
 * Canonical form per <https://unicode.org/reports/tr35/#BCP47_T_Extension>:
 *
 * - These subtags are all in lowercase (that is the canonical casing for these
 *   subtags), [...].
 *
 * And per
 * <https://unicode.org/reports/tr35/#Canonical_Unicode_Locale_Identifiers>:
 *
 * - All keywords and tfields are sorted by alphabetical order of their keys,
 *   within their respective extensions.
 ','line_number':727,'multiline':True]['text':' All tfields are sorted by alphabetical order of their keys.','line_number':771,'multiline':False]['text':' Append the language subtag if present.','line_number':792,'multiline':False]['text':'','line_number':793,'multiline':False]['text':' Replace aliases in tlang per','line_number':794,'multiline':False]['text':' <https://unicode.org/reports/tr35/#Canonical_Unicode_Locale_Identifiers>.','line_number':795,'multiline':False]['text':' The canonical case for Transform extensions is lowercase per','line_number':805,'multiline':False]['text':' <https://unicode.org/reports/tr35/#BCP47_T_Extension>. Convert the two','line_number':806,'multiline':False]['text':' subtags which don't use lowercase for their canonical syntax.','line_number':807,'multiline':False]['text':' Append all fields.','line_number':820,'multiline':False]['text':'','line_number':821,'multiline':False]['text':' UTS 35, 3.2.1 specifies:','line_number':822,'multiline':False]['text':' - Any type or tfield value "true" is removed.','line_number':823,'multiline':False]['text':'','line_number':824,'multiline':False]['text':' But the `tvalue` subtag is mandatory in `tfield: tkey tvalue`, so ignore','line_number':825,'multiline':False]['text':' this apparently invalid part of the UTS 35 specification and simply','line_number':826,'multiline':False]['text':' append all `tfield` subtags.','line_number':827,'multiline':False]['text':' Search if there's a replacement for the current transform keyword.','line_number':837,'multiline':False]['text':' We can keep the previous extension when canonicalization didn't modify it.','line_number':852,'multiline':False]['text':' Null-terminate the new string and replace the previous extension.','line_number':855,'multiline':False]['text':' Zero-terminated ICU Locale ID.','line_number':890,'multiline':False]['text':' Return true iff the language tag is already maximized resp. minimized.','line_number':896,'multiline':False]['text':' The language tag is already maximized if the language, script, and region','line_number':899,'multiline':False]['text':' subtags are present and no placeholder subtags ("und", "Zzzz", "ZZ") are','line_number':900,'multiline':False]['text':' used.','line_number':901,'multiline':False]['text':' The language tag is already minimized if it only contains a language','line_number':908,'multiline':False]['text':' subtag whose value is not the placeholder value "und".','line_number':909,'multiline':False]['text':' Create an ICU locale ID from the given language tag.','line_number':914,'multiline':False]['text':' Append the language subtag.','line_number':925,'multiline':False]['text':' Append the script subtag if present.','line_number':930,'multiline':False]['text':' Append the region subtag if present.','line_number':937,'multiline':False]['text':' Zero-terminated for use with ICU.','line_number':944,'multiline':False]['text':' Assign the language, script, and region subtags from an ICU locale ID.','line_number':948,'multiline':False]['text':'','line_number':949,'multiline':False]['text':' ICU provides |uloc_getLanguage|, |uloc_getScript|, and |uloc_getCountry| to','line_number':950,'multiline':False]['text':' retrieve these subtags, but unfortunately these functions are rather slow, so','line_number':951,'multiline':False]['text':' we use our own implementation.','line_number':952,'multiline':False]['text':' Replace the ICU locale ID separator.','line_number':958,'multiline':False]['text':' ICU replaces "und" with the empty string, which means "und" becomes "" and','line_number':961,'multiline':False]['text':' "und-Latn" becomes "-Latn". Handle this case separately.','line_number':962,'multiline':False]['text':' Insert "und" in front of the locale ID.','line_number':967,'multiline':False]['text':' Retrieve the language, script, and region subtags from the locale ID, but','line_number':977,'multiline':False]['text':' ignore any other subtags.','line_number':978,'multiline':False]['text':' Locale ID must be zero-terminated before passing it to ICU.','line_number':994,'multiline':False]['text':' Ensure there's enough room for the result.','line_number':998,'multiline':False]['text':' Resize the vector to the actual string length.','line_number':1016,'multiline':False]['text':' Zero-terminated for use with ICU.','line_number':1019,'multiline':False]['text':' The canonical way to compute the Unicode BCP 47 locale identifier with likely','line_number':1023,'multiline':False]['text':' subtags is as follows:','line_number':1024,'multiline':False]['text':'','line_number':1025,'multiline':False]['text':' 1. Call uloc_forLanguageTag() to transform the locale identifer into an ICU','line_number':1026,'multiline':False]['text':'    locale ID.','line_number':1027,'multiline':False]['text':' 2. Call uloc_addLikelySubtags() to add the likely subtags to the locale ID.','line_number':1028,'multiline':False]['text':' 3. Call uloc_toLanguageTag() to transform the resulting locale ID back into','line_number':1029,'multiline':False]['text':'    a Unicode BCP 47 locale identifier.','line_number':1030,'multiline':False]['text':'','line_number':1031,'multiline':False]['text':' Since uloc_forLanguageTag() and uloc_toLanguageTag() are both kind of slow','line_number':1032,'multiline':False]['text':' and we know, by construction, that the input Unicode BCP 47 locale identifier','line_number':1033,'multiline':False]['text':' only contains valid language, script, and region subtags, we can avoid both','line_number':1034,'multiline':False]['text':' calls if we implement them ourselves, see CreateLocaleForLikelySubtags() and','line_number':1035,'multiline':False]['text':' AssignFromLocaleId(). (Where "slow" means about 50% of the execution time of','line_number':1036,'multiline':False]['text':' |Intl.Locale.prototype.maximize|.)','line_number':1037,'multiline':False]['text':' Return early if the input is already maximized/minimized.','line_number':1040,'multiline':False]['text':' Create the locale ID for the input argument.','line_number':1045,'multiline':False]['text':' Either add or remove likely subtags to/from the locale ID.','line_number':1051,'multiline':False]['text':' Assign the language, script, and region subtags from the locale ID.','line_number':1065,'multiline':False]['text':' Update mappings in case ICU returned a non-canonical locale.','line_number':1070,'multiline':False]['text':' UTS 35, section 3.1.','line_number':1088,'multiline':False]['text':' alpha = [A-Z a-z] ;','line_number':1089,'multiline':False]['text':' digit = [0-9] ;','line_number':1090,'multiline':False]['text':' Add +1 to null-terminate the string.','line_number':1111,'multiline':False]['text':' Parse the `unicode_language_id` production.','line_number':1125,'multiline':False]['text':'','line_number':1126,'multiline':False]['text':' unicode_language_id = unicode_language_subtag','line_number':1127,'multiline':False]['text':'                       (sep unicode_script_subtag)?','line_number':1128,'multiline':False]['text':'                       (sep unicode_region_subtag)?','line_number':1129,'multiline':False]['text':'                       (sep unicode_variant_subtag)* ;','line_number':1130,'multiline':False]['text':'','line_number':1131,'multiline':False]['text':' sep                 = "-"','line_number':1132,'multiline':False]['text':'','line_number':1133,'multiline':False]['text':' Note: Unicode CLDR locale identifier backward compatibility extensions','line_number':1134,'multiline':False]['text':'       removed from `unicode_language_id`.','line_number':1135,'multiline':False]['text':'','line_number':1136,'multiline':False]['text':' |tok| is the current token from |ts|.','line_number':1137,'multiline':False]['text':'','line_number':1138,'multiline':False]['text':' All subtags will be added unaltered to |tag|, without canonicalizing their','line_number':1139,'multiline':False]['text':' case or, in the case of variant subtags, detecting and rejecting duplicate','line_number':1140,'multiline':False]['text':' variants. Users must subsequently |canonicalizeBaseName| to perform these','line_number':1141,'multiline':False]['text':' actions.','line_number':1142,'multiline':False]['text':'','line_number':1143,'multiline':False]['text':' Do not use this function directly: use |parseBaseName| or','line_number':1144,'multiline':False]['text':' |parseTlangFromTransformExtension| instead.','line_number':1145,'multiline':False]['text':' The language subtag is mandatory.','line_number':1155,'multiline':False]['text':' unicode_locale_id = unicode_language_id','line_number':1220,'multiline':False]['text':'                     extensions*','line_number':1221,'multiline':False]['text':'                     pu_extensions? ;','line_number':1222,'multiline':False]['text':' extensions = unicode_locale_extensions','line_number':1233,'multiline':False]['text':'            | transformed_extensions','line_number':1234,'multiline':False]['text':'            | other_extensions ;','line_number':1235,'multiline':False]['text':' Bit set of seen singletons.','line_number':1237,'multiline':False]['text':' Reject the input if a duplicate singleton was found.','line_number':1244,'multiline':False]['text':' We'll check for missing non-singleton subtags after this block by','line_number':1254,'multiline':False]['text':' comparing |startValue| with the then-current position.','line_number':1255,'multiline':False]['text':' transformed_extensions = sep [tT]','line_number':1263,'multiline':False]['text':'                          ((sep tlang (sep tfield)*)','line_number':1264,'multiline':False]['text':'                           | (sep tfield)+) ;','line_number':1265,'multiline':False]['text':' tlang = unicode_language_subtag','line_number':1267,'multiline':False]['text':'         (sep unicode_script_subtag)?','line_number':1268,'multiline':False]['text':'         (sep unicode_region_subtag)?','line_number':1269,'multiline':False]['text':'         (sep unicode_variant_subtag)* ;','line_number':1270,'multiline':False]['text':' tfield = tkey tvalue;','line_number':1287,'multiline':False]['text':' `tfield` requires at least one `tvalue`.','line_number':1296,'multiline':False]['text':' Singletons must be followed by a non-singleton subtag, "en-a-b" is not','line_number':1307,'multiline':False]['text':' allowed.','line_number':1308,'multiline':False]['text':' Trailing `pu_extension` component of the `unicode_locale_id` production.','line_number':1322,'multiline':False]['text':' There must be at least one subtag after the "-x-".','line_number':1332,'multiline':False]['text':' Return true if the complete input was successfully parsed.','line_number':1344,'multiline':False]['text':' Parse only the base-name part and ignore any trailing characters.','line_number':1384,'multiline':False]['text':' Return true if the complete input was successfully parsed.','line_number':1406,'multiline':False]['text':' Parse |extension|, which must be a valid `transformed_extensions` subtag, and','line_number':1412,'multiline':False]['text':' fill |tag| and |fields| from the `tlang` and `tfield` components.','line_number':1413,'multiline':False]['text':' We're parsing a possible `tlang` in a known-valid transform extension, so','line_number':1432,'multiline':False]['text':' use the special-purpose function that takes advantage of this to compute','line_number':1433,'multiline':False]['text':' lowercased |tag| contents in an optimal manner.','line_number':1434,'multiline':False]['text':' After `tlang` we must have a `tfield` and its `tkey`, or we're at the end','line_number':1437,'multiline':False]['text':' of the transform extension.','line_number':1438,'multiline':False]['text':' If there's no `tlang` subtag, at least one `tfield` must be present.','line_number':1441,'multiline':False]['text':' Trailing `tfield` subtags. (Any other trailing subtags are an error,','line_number':1445,'multiline':False]['text':' because we're guaranteed to only see a valid tranform extension here.)','line_number':1446,'multiline':False]['text':' `tfield` requires at least one `tvalue`.','line_number':1456,'multiline':False]['text':' Return true if the complete input was successfully parsed.','line_number':1467,'multiline':False]['text':' Parse |extension|, which must be a valid `unicode_locale_extensions` subtag,','line_number':1471,'multiline':False]['text':' and fill |attributes| and |keywords| from the `attribute` and `keyword`','line_number':1472,'multiline':False]['text':' components.','line_number':1473,'multiline':False]['text':' unicode_locale_extensions = sep [uU] ((sep keyword)+ |','line_number':1481,'multiline':False]['text':'                                       (sep attribute)+ (sep keyword)*) ;','line_number':1482,'multiline':False]['text':' keyword = key (sep type)? ;','line_number':1502,'multiline':False]['text':' Return true if the complete input was successfully parsed.','line_number':1521,'multiline':False]['text':' unicode_locale_extensions = sep [uU] ((sep keyword)+ |','line_number':1531,'multiline':False]['text':'                                       (sep attribute)+ (sep keyword)*) ;','line_number':1532,'multiline':False]['text':' keyword = key (sep type)? ;','line_number':1548,'multiline':False]['text':' Return true if the complete input was successfully parsed.','line_number':1561,'multiline':False]['text':' Return true if the complete input was successfully parsed.','line_number':1579,'multiline':False]['text':' Tell the analysis the |std::all_of| function can't GC.','line_number':1634,'multiline':False]['text':' Tell the analysis the |std::all_of| function can't GC.','line_number':1652,'multiline':False]['text':' ISO-639 language codes contain either two or three characters.','line_number':1670,'multiline':False]['text':' We can directly the return the input below if it's in the correct case.','line_number':1676,'multiline':False]['text':' Must be an ASCII alpha string.','line_number':1679,'multiline':False]['text':' The language subtag is canonicalized to lower case.','line_number':1695,'multiline':False]['text':' Reject the input if the canonical tag contains more than just a single','line_number':1699,'multiline':False]['text':' language subtag.','line_number':1700,'multiline':False]['text':' Take care to replace deprecated subtags with their preferred values.','line_number':1705,'multiline':False]['text':' namespace intl','line_number':1723,'multiline':False]['text':' namespace js','line_number':1724,'multiline':False]