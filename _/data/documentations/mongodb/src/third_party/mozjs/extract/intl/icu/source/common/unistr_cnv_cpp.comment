['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  unistr_cnv.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:2
*
*   created on: 2004aug19
*   created by: Markus W. Scherer
*
*   Character conversion functions moved here from unistr.cpp
','line_number':3,'multiline':True]['text':'========================================','line_number':38,'multiline':False]['text':' Constructors','line_number':39,'multiline':False]['text':'========================================','line_number':40,'multiline':False]['text':' else see unistr.cpp','line_number':59,'multiline':False]['text':' check arguments','line_number':84,'multiline':False]['text':' treat as an empty string, do nothing more','line_number':86,'multiline':False]['text':' get input length','line_number':90,'multiline':False]['text':' use the provided converter','line_number':96,'multiline':False]['text':' use the default converter','line_number':100,'multiline':False]['text':'========================================','line_number':114,'multiline':False]['text':' Codeset conversion','line_number':115,'multiline':False]['text':'========================================','line_number':116,'multiline':False]['text':' else see unistr.cpp','line_number':128,'multiline':False]['text':' if the arguments are illegal, then do nothing','line_number':138,'multiline':False]['text':'dstSize < 0 || ','line_number':139,'multiline':True]['text':' pin the indices to legal values','line_number':143,'multiline':False]['text':' We need to cast dstSize to int32_t for all subsequent code.','line_number':146,'multiline':False]['text':' I don't know why the API was defined with uint32_t but we are stuck with it.','line_number':147,'multiline':False]['text':' Also, dstSize==0xffffffff means "unlimited" but if we use target+dstSize','line_number':148,'multiline':False]['text':' as a limit in some functions, it may wrap around and yield a pointer','line_number':149,'multiline':False]['text':' that compares less-than target.','line_number':150,'multiline':False]['text':' Assume that the capacity is real and a limit pointer won't wrap around.','line_number':153,'multiline':False]['text':' Pin the capacity so that a limit pointer does not wrap around.','line_number':156,'multiline':False]['text':' U_MAX_PTR(target) returns a targetLimit that is at most 0x7fffffff','line_number':158,'multiline':False]['text':' greater than target and does not wrap around the top of the address space.','line_number':159,'multiline':False]['text':' create the converter','line_number':163,'multiline':False]['text':' just write the NUL if the string length is 0','line_number':167,'multiline':False]['text':' if the codepage is the default, use our cache','line_number':172,'multiline':False]['text':' if it is an empty string, then use the "invariant character" conversion','line_number':173,'multiline':False]['text':' use the "invariant characters" conversion','line_number':181,'multiline':False]['text':' close the converter','line_number':196,'multiline':False]['text':' nothing to do?','line_number':220,'multiline':False]['text':' get the converter','line_number':225,'multiline':False]['text':' convert','line_number':238,'multiline':False]['text':' release the converter','line_number':241,'multiline':False]['text':' Pin the limit to U_MAX_PTR if the "magic" destCapacity is used.','line_number':269,'multiline':False]['text':' for NUL-termination, translate into highest int32_t','line_number':271,'multiline':False]['text':' perform the conversion','line_number':277,'multiline':False]['text':' if an overflow occurs, then get the preflighting length','line_number':281,'multiline':False]['text':' if there's nothing to convert, do nothing','line_number':302,'multiline':False]['text':' create the converter','line_number':312,'multiline':False]['text':' if the codepage is the default, use our cache','line_number':313,'multiline':False]['text':' if it is an empty string, then use the "invariant character" conversion','line_number':314,'multiline':False]['text':' use the "invariant characters" conversion','line_number':324,'multiline':False]['text':' if we failed, set the appropriate flags and return','line_number':336,'multiline':False]['text':' perform the conversion','line_number':342,'multiline':False]['text':' close the converter','line_number':348,'multiline':False]['text':' set up the conversion parameters','line_number':366,'multiline':False]['text':' estimate the size needed:','line_number':371,'multiline':False]['text':' try to use the stack buffer','line_number':374,'multiline':False]['text':' 1.25 UChar's per source byte should cover most cases','line_number':377,'multiline':False]['text':' we do not care about the current contents','line_number':381,'multiline':False]['text':' perform the conversion','line_number':389,'multiline':False]['text':' update the conversion parameters','line_number':395,'multiline':False]['text':' allocate more space and copy data, if needed','line_number':398,'multiline':False]['text':' reset the error code','line_number':400,'multiline':False]['text':' keep the previous conversion results','line_number':403,'multiline':False]['text':' estimate the new size needed, larger than before','line_number':406,'multiline':False]['text':' try 2 UChar's per remaining source byte','line_number':407,'multiline':False]