['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
 *******************************************************************************
 * Copyright (C) 2008-2014, Google, International Business Machines Corporation
 * and others. All Rights Reserved.
 *******************************************************************************
 ','line_number':3,'multiline':True]['text':'*
 * \file
 * \brief C++ API: Format and parse duration in single time unit
 ','line_number':15,'multiline':True]['text':'*
 * Constants for various styles.
 * There are 2 styles: full name and abbreviated name.
 * For example, for English, the full name for hour duration is "3 hours",
 * and the abbreviated name is "3 hrs".
 * @deprecated ICU 53 Use MeasureFormat and UMeasureFormatWidth instead.
 ','line_number':34,'multiline':True]['text':'* @deprecated ICU 53 ','line_number':42,'multiline':True]['text':'* @deprecated ICU 53 ','line_number':44,'multiline':True]['text':'* @deprecated ICU 53 ','line_number':46,'multiline':True]['text':'*< @deprecated ICU 53 ','line_number':49,'multiline':True]['text':'*
 * Format or parse a TimeUnitAmount, using plural rules for the units where available.
 *
 * <P>
 * Code Sample:
 * <pre>
 *   // create time unit amount instance - a combination of Number and time unit
 *   UErrorCode status = U_ZERO_ERROR;
 *   TimeUnitAmount* source = new TimeUnitAmount(2, TimeUnit::UTIMEUNIT_YEAR, status);
 *   // create time unit format instance
 *   TimeUnitFormat* format = new TimeUnitFormat(Locale("en"), status);
 *   // format a time unit amount
 *   UnicodeString formatted;
 *   Formattable formattable;
 *   if (U_SUCCESS(status)) {
 *       formattable.adoptObject(source);
 *       formatted = ((Format*)format)->format(formattable, formatted, status);
 *       Formattable result;
 *       ((Format*)format)->parseObject(formatted, result, status);
 *       if (U_SUCCESS(status)) {
 *           assert (result == formattable);
 *       }
 *   }
 * </pre>
 *
 * <P>
 * @see TimeUnitAmount
 * @see TimeUnitFormat
 * @deprecated ICU 53 Use the MeasureFormat class instead.
 ','line_number':59,'multiline':True]['text':'*
     * Create TimeUnitFormat with default locale, and full name style.
     * Use setLocale and/or setFormat to modify.
     * @deprecated ICU 53
     ','line_number':92,'multiline':True]['text':'*
     * Create TimeUnitFormat given locale, and full name style.
     * @deprecated ICU 53
     ','line_number':99,'multiline':True]['text':'*
     * Create TimeUnitFormat given locale and style.
     * @deprecated ICU 53
     ','line_number':105,'multiline':True]['text':'*
     * Copy constructor.
     * @deprecated ICU 53
     ','line_number':111,'multiline':True]['text':'*
     * deconstructor
     * @deprecated ICU 53
     ','line_number':117,'multiline':True]['text':'*
     * Clone this Format object polymorphically. The caller owns the result and
     * should delete it when done.
     * @return    A copy of the object.
     * @deprecated ICU 53
     ','line_number':123,'multiline':True]['text':'*
     * Assignment operator
     * @deprecated ICU 53
     ','line_number':131,'multiline':True]['text':'*
     * Return true if the given Format objects are not semantically equal.
     * Objects of different subclasses are considered unequal.
     * @param other the object to be compared with.
     * @return      true if the given Format objects are not semantically equal.
     * @deprecated ICU 53
     ','line_number':137,'multiline':True]['text':'*
     * Set the locale used for formatting or parsing.
     * @param locale  the locale to be set
     * @param status  output param set to success/failure code on exit
     * @deprecated ICU 53
     ','line_number':146,'multiline':True]['text':'*
     * Set the number format used for formatting or parsing.
     * @param format  the number formatter to be set
     * @param status  output param set to success/failure code on exit
     * @deprecated ICU 53
     ','line_number':155,'multiline':True]['text':'*
     * Parse a TimeUnitAmount.
     * @see Format#parseObject(const UnicodeString&, Formattable&, ParsePosition&) const;
     * @deprecated ICU 53
     ','line_number':163,'multiline':True]['text':'*
     * Return the class ID for this class. This is useful only for comparing to
     * a return value from getDynamicClassID(). For example:
     * <pre>
     * .   Base* polymorphic_pointer = createPolymorphicObject();
     * .   if (polymorphic_pointer->getDynamicClassID() ==
     * .       erived::getStaticClassID()) ...
     * </pre>
     * @return          The class ID for all objects of this class.
     * @deprecated ICU 53
     ','line_number':172,'multiline':True]['text':'*
     * Returns a unique class ID POLYMORPHICALLY. Pure virtual override. This
     * method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone()
     * methods call this method.
     *
     * @return          The class ID for this object. All objects of a
     *                  given class have the same class ID.  Objects of
     *                  other classes have different class IDs.
     * @deprecated ICU 53
     ','line_number':185,'multiline':True]['text':' it might actually be simpler to make them Decimal Formats later.','line_number':204,'multiline':False]['text':' initialize all private data members','line_number':205,'multiline':False]['text':' initialize data member without fill in data for fTimeUnitToCountToPattern','line_number':208,'multiline':False]['text':' initialize fTimeUnitToCountToPatterns from current locale's resource.','line_number':211,'multiline':False]['text':' check completeness of fTimeUnitToCountToPatterns against all time units,','line_number':215,'multiline':False]['text':' and all plural rules, fill in fallback as necessary.','line_number':216,'multiline':False]['text':' fill in fTimeUnitToCountToPatterns from locale fall-back chain','line_number':219,'multiline':False]['text':' initialize hash table','line_number':224,'multiline':False]['text':' delete hash table','line_number':227,'multiline':False]['text':' copy hash table','line_number':230,'multiline':False]['text':' get time unit name, such as "year", from time unit field enum, such as','line_number':232,'multiline':False]['text':' UTIMEUNIT_YEAR.','line_number':233,'multiline':False]['text':' U_HIDE_DEPRECATED_API ','line_number':246,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':247,'multiline':True]['text':' U_SHOW_CPLUSPLUS_API ','line_number':249,'multiline':True]['text':' __TMUTFMT_H__','line_number':251,'multiline':False]['text':'eof','line_number':252,'multiline':False]