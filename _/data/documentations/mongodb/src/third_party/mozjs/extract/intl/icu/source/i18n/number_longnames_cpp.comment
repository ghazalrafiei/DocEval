['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'*
 * Display Name (this format has no placeholder).
 *
 * Used as an index into the LongNameHandler::simpleFormats array. Units
 * resources cover the normal set of PluralRules keys, as well as `dnam` and
 * `per` forms.
 ','line_number':28,'multiline':True]['text':'*
 * "per" form (e.g. "{0} per day" is day's "per" form).
 *
 * Used as an index into the LongNameHandler::simpleFormats array. Units
 * resources cover the normal set of PluralRules keys, as well as `dnam` and
 * `per` forms.
 ','line_number':36,'multiline':True]['text':'*
 * Gender of the word, in languages with grammatical gender.
 ','line_number':44,'multiline':True]['text':' Number of keys in the array populated by PluralTableSink.','line_number':48,'multiline':False]['text':' TODO(icu-units#28): load this list from resources, after creating a "&set"','line_number':51,'multiline':False]['text':' function for use in ldml2icu rules.','line_number':52,'multiline':False]['text':' Converts a UnicodeString to a const char*, either pointing to a string in','line_number':57,'multiline':False]['text':' gGenders, or pointing to an empty string if an appropriate string was not','line_number':58,'multiline':False]['text':' found.','line_number':59,'multiline':False]['text':' We don't return an error in case our gGenders list is incomplete in','line_number':82,'multiline':False]['text':' production.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' TODO(icu-units#28): a unit test checking all locales' genders are covered','line_number':85,'multiline':False]['text':' by gGenders? Else load a complete list of genders found in','line_number':86,'multiline':False]['text':' grammaticalFeatures in an initOnce.','line_number':87,'multiline':False]['text':' Returns the array index that corresponds to the given pluralKeyword.','line_number':91,'multiline':False]['text':' pluralKeyword can also be "dnam", "per", or "gender"','line_number':93,'multiline':False]['text':' Selects a string out of the `strings` array which corresponds to the','line_number':117,'multiline':False]['text':' specified plural form, with fallback to the OTHER form.','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':' The `strings` array must have ARRAY_LENGTH items: one corresponding to each','line_number':120,'multiline':False]['text':' of the plural forms, plus a display name ("dnam") and a "per" form.','line_number':121,'multiline':False]['text':' There should always be data in the "other" plural variant.','line_number':131,'multiline':False]['text':'*
 * Returns three outputs extracted from pattern.
 *
 * @param coreUnit is extracted as per Extract(...) in the spec:
 *   https://unicode.org/reports/tr35/tr35-general.html#compound-units
 * @param PlaceholderPosition indicates where in the string the placeholder was
 *   found.
 * @param joinerChar Iff the placeholder was at the beginning or end, joinerChar
 *   contains the space character (if any) that separated the placeholder from
 *   the rest of the pattern. Otherwise, joinerChar is set to NUL. Only one
 *   space character is considered.
 ','line_number':139,'multiline':True]['text':'////////////////////////','line_number':182,'multiline':False]['text':'/ BEGIN DATA LOADING ///','line_number':183,'multiline':False]['text':'////////////////////////','line_number':184,'multiline':False]['text':' Gets the gender of a built-in unit: unit must be a built-in. Returns an empty','line_number':186,'multiline':False]['text':' string both in case of unknown gender and in case of unknown unit.','line_number':187,'multiline':False]['text':' Map duration-year-person, duration-week-person, etc. to duration-year, duration-week, ...','line_number':193,'multiline':False]['text':' TODO(ICU-20400): Get duration-*-person data properly with aliases.','line_number':194,'multiline':False]['text':' TODO(icu-units#28): "$unitRes/gender" does not exist. Do we want to','line_number':218,'multiline':False]['text':' check whether the parent "$unitRes" exists? Then we could return','line_number':219,'multiline':False]['text':' U_MISSING_RESOURCE_ERROR for incorrect usage (e.g. builtinUnit not','line_number':220,'multiline':False]['text':' being a builtin).','line_number':221,'multiline':False]['text':' Loads data from a resource tree with paths matching','line_number':226,'multiline':False]['text':' $key/$pluralForm/$gender/$case, with lateral inheritance for missing cases','line_number':227,'multiline':False]['text':' and genders.','line_number':228,'multiline':False]['text':'','line_number':229,'multiline':False]['text':' An InflectedPluralSink is configured to load data for a specific gender and','line_number':230,'multiline':False]['text':' case. It loads all plural forms, because selection between plural forms is','line_number':231,'multiline':False]['text':' dependent upon the value being formatted.','line_number':232,'multiline':False]['text':'','line_number':233,'multiline':False]['text':' See data/unit/de.txt and data/unit/fr.txt for examples - take a look at','line_number':234,'multiline':False]['text':' units/compound/power2: German has case, French has differences for gender,','line_number':235,'multiline':False]['text':' but no case.','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':' TODO(icu-units#138): Conceptually similar to PluralTableSink, however the','line_number':238,'multiline':False]['text':' tree structures are different. After homogenizing the structures, we may be','line_number':239,'multiline':False]['text':' able to unify the two classes.','line_number':240,'multiline':False]['text':'','line_number':241,'multiline':False]['text':' TODO: Spec violation: expects presence of "count" - does not fallback to an','line_number':242,'multiline':False]['text':' absent "count"! If this fallback were added, getCompoundValue could be','line_number':243,'multiline':False]['text':' superseded?','line_number':244,'multiline':False]['text':' Accepts `char*` rather than StringPiece because','line_number':247,'multiline':False]['text':' ResourceTable::findValue(...) requires a null-terminated `char*`.','line_number':248,'multiline':False]['text':'','line_number':249,'multiline':False]['text':' NOTE: outArray MUST have a length of at least ARRAY_LENGTH. No bounds','line_number':250,'multiline':False]['text':' checking is performed.','line_number':251,'multiline':False]['text':' Initialize the array to bogus strings.','line_number':254,'multiline':False]['text':' See ResourceSink::put().','line_number':260,'multiline':False]['text':'noFallback','line_number':261,'multiline':True]['text':' We already have a pattern','line_number':268,'multiline':False]['text':' This instance has to outlive `value`','line_number':272,'multiline':False]['text':' Tries to load data for the configured gender from `genderTable`. Returns','line_number':280,'multiline':False]['text':' true if found, returning the data in `value`. The returned data will be','line_number':281,'multiline':False]['text':' for the configured gender if found, falling back to "neuter" and','line_number':282,'multiline':False]['text':' no-gender if not. The caseTable parameter holds the intermediate','line_number':283,'multiline':False]['text':' ResourceTable for the sake of lifetime management.','line_number':284,'multiline':False]['text':' Tries to load data for the given gender from `genderTable`. Returns true','line_number':304,'multiline':False]['text':' if found, returning the data in `value`. The returned data will be for','line_number':305,'multiline':False]['text':' the configured case if found, falling back to "nominative" and no-case if','line_number':306,'multiline':False]['text':' not.','line_number':307,'multiline':False]['text':' Tries to load data for the given case from `caseTable`. Returns true if','line_number':332,'multiline':False]['text':' found, returning the data in `value`.','line_number':333,'multiline':False]['text':' Fetches localised formatting patterns for the given subKey. See documentation','line_number':346,'multiline':False]['text':' for InflectedPluralSink for details.','line_number':347,'multiline':False]['text':'','line_number':348,'multiline':False]['text':' Data is loaded for the appropriate unit width, with missing data filled in','line_number':349,'multiline':False]['text':' from unitsShort.','line_number':350,'multiline':False]['text':' TODO(ICU-13353): The fallback to short does not work in ICU4C.','line_number':379,'multiline':False]['text':' Manually fall back to short (this is done automatically in Java).','line_number':380,'multiline':False]['text':' NOTE: outArray MUST have a length of at least ARRAY_LENGTH. No bounds','line_number':389,'multiline':False]['text':' checking is performed.','line_number':390,'multiline':False]['text':' Initialize the array to bogus strings.','line_number':392,'multiline':False]['text':'noFallback','line_number':398,'multiline':True]['text':'*
 * Populates outArray with `locale`-specific values for `unit` through use of
 * PluralTableSink. Only the set of basic units are supported!
 *
 * Reading from resources *unitsNarrow* and *unitsShort* (for width
 * UNUM_UNIT_WIDTH_NARROW), or just *unitsShort* (for width
 * UNUM_UNIT_WIDTH_SHORT). For other widths, it reads just "units".
 *
 * @param unit must be a built-in unit, i.e. must have a type and subtype,
 *     listed in gTypes and gSubTypes in measunit.cpp.
 * @param unitDisplayCase the empty string and "nominative" are treated the
 *     same. For other cases, strings for the requested case are used if found.
 *     (For any missing case-specific data, we fall back to nominative.)
 * @param outArray must be of fixed length ARRAY_LENGTH.
 ','line_number':419,'multiline':True]['text':' Map duration-year-person, duration-week-person, etc. to duration-year, duration-week, ...','line_number':449,'multiline':False]['text':' TODO(ICU-20400): Get duration-*-person data properly with aliases.','line_number':450,'multiline':False]['text':' Grab desired case first, if available. Then grab no-case data to fill in','line_number':479,'multiline':False]['text':' the gaps.','line_number':480,'multiline':False]['text':' TODO(icu-units#138): our fallback logic is not spec-compliant:','line_number':488,'multiline':False]['text':' lateral fallback should happen before locale fallback. Switch to','line_number':489,'multiline':False]['text':' getInflectedMeasureData after homogenizing data format? Find a unit','line_number':490,'multiline':False]['text':' test case that demonstrates the incorrect fallback logic (via','line_number':491,'multiline':False]['text':' regional variant of an inflected language?)','line_number':492,'multiline':False]['text':' TODO(icu-units#138): our fallback logic is not spec-compliant: we','line_number':496,'multiline':False]['text':' check the given case, then go straight to the no-case data. The spec','line_number':497,'multiline':False]['text':' states we should first look for case="nominative". As part of #138,','line_number':498,'multiline':False]['text':' either get the spec changed, or add unit tests that warn us if','line_number':499,'multiline':False]['text':' case="nominative" data differs from no-case data?','line_number':500,'multiline':False]['text':' TODO(ICU-13353): The fallback to short does not work in ICU4C.','line_number':510,'multiline':False]['text':' Manually fall back to short (this is done automatically in Java).','line_number':511,'multiline':False]['text':' NOTE: outArray MUST have a length of at least ARRAY_LENGTH.','line_number':518,'multiline':False]['text':' In ICU4J, this method gets a CurrencyData from CurrencyData.provider.','line_number':521,'multiline':False]['text':' TODO(ICU4J): Implement this without going through CurrencyData, like in ICU4C?','line_number':522,'multiline':False]['text':' isChoiceFormat ','line_number':537,'multiline':True]['text':' Example pattern from data: "{0} {1}"','line_number':541,'multiline':False]['text':' Example output after find-and-replace: "{0} US dollars"','line_number':542,'multiline':False]['text':' Fall back to short, which contains more compound data','line_number':568,'multiline':False]['text':'*
 * Loads and applies deriveComponent rules from CLDR's grammaticalFeatures.xml.
 *
 * Consider a deriveComponent rule that looks like this:
 *
 *     <deriveComponent feature="case" structure="per" value0="compound" value1="nominative"/>
 *
 * Instantiating an instance as follows:
 *
 *     DerivedComponents d(loc, "case", "per");
 *
 * Applying the rule in the XML element above, `d.value0("foo")` will be "foo",
 * and `d.value1("foo")` will be "nominative".
 *
 * The values returned by value0(...) and value1(...) are valid only while the
 * instance exists. In case of any kind of failure, value0(...) and value1(...)
 * will return "".
 ','line_number':582,'multiline':True]['text':'*
     * Constructor.
     *
     * The feature and structure parameters must be null-terminated. The string
     * referenced by compoundValue must exist for longer than the
     * DerivedComponents instance.
     ','line_number':602,'multiline':True]['text':' TODO(icu-units#28): use standard normal locale resolution algorithms','line_number':620,'multiline':False]['text':' rather than just grabbing language:','line_number':621,'multiline':False]['text':' TODO(icu-units#28):','line_number':624,'multiline':False]['text':' - code currently assumes if the locale exists, the rules are there -','line_number':625,'multiline':False]['text':'   instead of falling back to root when the requested rule is missing.','line_number':626,'multiline':False]['text':' - investigate ures.h functions, see if one that uses res_findResource()','line_number':627,'multiline':False]['text':'   might be better (or use res_findResource directly), or maybe help','line_number':628,'multiline':False]['text':'   improve ures documentation to guide function selection?','line_number':629,'multiline':False]['text':' Returns a StringPiece that is only valid as long as the instance exists.','line_number':656,'multiline':False]['text':' Returns a StringPiece that is only valid as long as the instance exists.','line_number':661,'multiline':False]['text':' Returns a char* that is only valid as long as the instance exists.','line_number':666,'multiline':False]['text':' Returns a char* that is only valid as long as the instance exists.','line_number':671,'multiline':False]['text':' Holds strings referred to by value0 and value1;','line_number':679,'multiline':False]['text':' TODO(icu-units#28): test somehow? Associate with an ICU ticket for adding','line_number':684,'multiline':False]['text':' testsuite support for testing with synthetic data?','line_number':685,'multiline':False]['text':'*
 * Loads and returns the value in rules that look like these:
 *
 * <deriveCompound feature="gender" structure="per" value="0"/>
 * <deriveCompound feature="gender" structure="times" value="1"/>
 *
 * Currently a fake example, but spec compliant:
 * <deriveCompound feature="gender" structure="power" value="feminine"/>
 *
 * NOTE: If U_FAILURE(status), returns an empty string.
 ','line_number':686,'multiline':True]['text':' TODO: use standard normal locale resolution algorithms rather than just grabbing language:','line_number':704,'multiline':False]['text':' TODO:','line_number':706,'multiline':False]['text':' - code currently assumes if the locale exists, the rules are there -','line_number':707,'multiline':False]['text':'   instead of falling back to root when the requested rule is missing.','line_number':708,'multiline':False]['text':' - investigate ures.h functions, see if one that uses res_findResource()','line_number':709,'multiline':False]['text':'   might be better (or use res_findResource directly), or maybe help','line_number':710,'multiline':False]['text':'   improve ures documentation to guide function selection?','line_number':711,'multiline':False]['text':' Returns the gender string for structures following these rules:','line_number':726,'multiline':False]['text':'','line_number':727,'multiline':False]['text':' <deriveCompound feature="gender" structure="per" value="0"/>','line_number':728,'multiline':False]['text':' <deriveCompound feature="gender" structure="times" value="1"/>','line_number':729,'multiline':False]['text':'','line_number':730,'multiline':False]['text':' Fake example:','line_number':731,'multiline':False]['text':' <deriveCompound feature="gender" structure="power" value="feminine"/>','line_number':732,'multiline':False]['text':'','line_number':733,'multiline':False]['text':' data0 and data1 should be pattern arrays (UnicodeString[ARRAY_SIZE]) that','line_number':734,'multiline':False]['text':' correspond to value="0" and value="1".','line_number':735,'multiline':False]['text':'','line_number':736,'multiline':False]['text':' Pass a nullptr to data1 if the structure has no concept of value="1" (e.g.','line_number':737,'multiline':False]['text':' "prefix" doesn't).','line_number':738,'multiline':False]['text':'//////////////////////','line_number':759,'multiline':False]['text':'/ END DATA LOADING ///','line_number':760,'multiline':False]['text':'//////////////////////','line_number':761,'multiline':False]['text':' TODO: promote this somewhere? It's based on patternprops.cpp' trimWhitespace','line_number':763,'multiline':False]['text':' There is non-white space at start; we will not move limit below that,','line_number':774,'multiline':False]['text':' so we need not test start<limit in the loop.','line_number':775,'multiline':False]['text':'*
 * Calculates the gender of an arbitrary unit: this is the *second*
 * implementation of an algorithm to do this:
 *
 * Gender is also calculated in "processPatternTimes": that code path is "bottom
 * up", loading the gender for every component of a compound unit (at the same
 * time as loading the Long Names formatting patterns), even if the gender is
 * unneeded, then combining the single units' genders into the compound unit's
 * gender, according to the rules. This algorithm does a lazier "top-down"
 * evaluation, starting with the compound unit, calculating which single unit's
 * gender is needed by breaking it down according to the rules, and then loading
 * only the gender of the one single unit who's gender is needed.
 *
 * For future refactorings:
 * 1. we could drop processPatternTimes' gender calculation and just call this
 *    function: for UNUM_UNIT_WIDTH_FULL_NAME, the unit gender is in the very
 *    same table as the formatting patterns, so loading it then may be
 *    efficient. For other unit widths however, it needs to be explicitly looked
 *    up anyway.
 * 2. alternatively, if CLDR is providing all the genders we need such that we
 *    don't need to calculate them in ICU anymore, we could drop this function
 *    and keep only processPatternTimes' calculation. (And optimise it a bit?)
 *
 * @param locale The desired locale.
 * @param unit The measure unit to calculate the gender for.
 * @return The gender string for the unit, or an empty string if unknown or
 *     ungendered.
 ','line_number':784,'multiline':True]['text':' inclusive','line_number':818,'multiline':False]['text':' Else it would not be COMPOUND','line_number':820,'multiline':False]['text':' We have a -per- construct','line_number':822,'multiline':False]['text':' Fixed gender for -per- units','line_number':825,'multiline':False]['text':' Find the start of the denominator. We already know there is one.','line_number':829,'multiline':False]['text':' Find the end of the numerator','line_number':834,'multiline':False]['text':' We have only a denominator, e.g. "per-second".','line_number':839,'multiline':False]['text':' TODO(icu-units#28): find out what gender to use in the','line_number':840,'multiline':False]['text':' absence of a first value - mentioned in CLDR-14253.','line_number':841,'multiline':False]['text':' We have a -times- construct','line_number':847,'multiline':False]['text':' Fixed gender for -times- units','line_number':850,'multiline':False]['text':' We assume timesRule[0] == u'1'','line_number':856,'multiline':False]['text':' Now we know which singleUnit's gender we want','line_number':870,'multiline':False]['text':' Check for any power-prefix gender override:','line_number':872,'multiline':False]['text':' Fixed gender for -powN- units','line_number':876,'multiline':False]['text':' powerRule[0] == u'0'; u'1' not currently in spec.','line_number':879,'multiline':False]['text':' Check for any SI and binary prefix gender override:','line_number':881,'multiline':False]['text':' Fixed gender for -powN- units','line_number':885,'multiline':False]['text':' prefixRule[0] == u'0'; u'1' not currently in spec.','line_number':888,'multiline':False]['text':' Now we've boiled it down to the gender of one simple unit identifier:','line_number':890,'multiline':False]['text':' No gender for meter: assume ungendered language','line_number':902,'multiline':False]['text':' We have a gendered language, but are lacking gender for unitRef.','line_number':905,'multiline':False]['text':' namespace','line_number':910,'multiline':False]['text':' From https://unicode.org/reports/tr35/tr35-general.html#compound-units -','line_number':920,'multiline':False]['text':' Points 1 and 2 are mostly handled by MeasureUnit:','line_number':921,'multiline':False]['text':'','line_number':922,'multiline':False]['text':' 1. If the unitId is empty or invalid, fail','line_number':923,'multiline':False]['text':' 2. Put the unitId into normalized order','line_number':924,'multiline':False]['text':' Handling built-in units:','line_number':928,'multiline':False]['text':'','line_number':929,'multiline':False]['text':' 3. Set result to be getValue(unitId with length, pluralCategory, caseVariant)','line_number':930,'multiline':False]['text':'    - If result is not empty, return it','line_number':931,'multiline':False]['text':' TODO(icu-units#145): figure out why this causes a failure in','line_number':947,'multiline':False]['text':' format/MeasureFormatTest/TestIndividualPluralFallback and other','line_number':948,'multiline':False]['text':' tests, when it should have been an alternative for the lines above:','line_number':949,'multiline':False]['text':' forArbitraryUnit(loc, unitRef, width, unitDisplayCase, fillIn, status);','line_number':951,'multiline':False]['text':' fillIn->rules = rules;','line_number':952,'multiline':False]['text':' fillIn->parent = parent;','line_number':953,'multiline':False]['text':' return;','line_number':954,'multiline':False]['text':' Check if it is a MeasureUnit this constructor handles: this','line_number':956,'multiline':False]['text':' constructor does not handle mixed units','line_number':957,'multiline':False]['text':' Numbered list items are from the algorithms at','line_number':980,'multiline':False]['text':' https://unicode.org/reports/tr35/tr35-general.html#compound-units:','line_number':981,'multiline':False]['text':'','line_number':982,'multiline':False]['text':' 4. Divide the unitId into numerator (the part before the "-per-") and','line_number':983,'multiline':False]['text':'    denominator (the part after the "-per-). If both are empty, fail','line_number':984,'multiline':False]['text':' TODO(icu-units#28): check placeholder logic, see if it needs to be','line_number':1003,'multiline':False]['text':' present here instead of only in processPatternTimes:','line_number':1004,'multiline':False]['text':'','line_number':1005,'multiline':False]['text':' 5. Set both globalPlaceholder and globalPlaceholderPosition to be empty','line_number':1006,'multiline':False]['text':' 6. numeratorUnitString','line_number':1010,'multiline':False]['text':' 7. denominatorUnitString','line_number':1015,'multiline':False]['text':' TODO(icu-units#139):','line_number':1020,'multiline':False]['text':' - implement DerivedComponents for "plural/times" and "plural/power":','line_number':1021,'multiline':False]['text':'   French has different rules, we'll be producing the wrong results','line_number':1022,'multiline':False]['text':'   currently. (Prove via tests!)','line_number':1023,'multiline':False]['text':' - implement DerivedComponents for "plural/per", "plural/prefix",','line_number':1024,'multiline':False]['text':'   "case/times", "case/power", and "case/prefix" - although they're','line_number':1025,'multiline':False]['text':'   currently hardcoded. Languages with different rules are surely on the','line_number':1026,'multiline':False]['text':'   way.','line_number':1027,'multiline':False]['text':'','line_number':1028,'multiline':False]['text':' Currently we only use "case/per", "plural/times", "case/times", and','line_number':1029,'multiline':False]['text':' "case/power".','line_number':1030,'multiline':False]['text':'','line_number':1031,'multiline':False]['text':' This may have impact on multiSimpleFormatsToModifiers(...) below too?','line_number':1032,'multiline':False]['text':' These rules are currently (ICU 69) all the same and hard-coded below.','line_number':1033,'multiline':False]['text':' If we have no denominator, we obtain the empty string:','line_number':1036,'multiline':False]['text':' 8. Set perPattern to be getValue([per], locale, length)','line_number':1039,'multiline':False]['text':' rawPerUnitFormat is something like "{0} per {1}"; we need to substitute in the secondary unit.','line_number':1041,'multiline':False]['text':' Plural and placeholder handling for 7. denominatorUnitString:','line_number':1046,'multiline':False]['text':' TODO(icu-units#139): hardcoded:','line_number':1047,'multiline':False]['text':' <deriveComponent feature="plural" structure="per" value0="compound" value1="one"/>','line_number':1048,'multiline':False]['text':' Some "one" pattern may not contain "{0}". For example in "ar" or "ne" locale.','line_number':1051,'multiline':False]['text':' 9. If the denominatorString is empty, set result to','line_number':1060,'multiline':False]['text':'    [numeratorString], otherwise set result to format(perPattern,','line_number':1061,'multiline':False]['text':'    numeratorString, denominatorString)','line_number':1062,'multiline':False]['text':'','line_number':1063,'multiline':False]['text':' TODO(icu-units#28): Why does UnicodeString need to be explicit in the','line_number':1064,'multiline':False]['text':' following line?','line_number':1065,'multiline':False]['text':' Gender','line_number':1079,'multiline':False]['text':'','line_number':1080,'multiline':False]['text':' TODO(icu-units#28): find out what gender to use in the absence of a first','line_number':1081,'multiline':False]['text':' value - e.g. what's the gender of "per-second"? Mentioned in CLDR-14253.','line_number':1082,'multiline':False]['text':'','line_number':1083,'multiline':False]['text':' gender/per deriveCompound rules don't say:','line_number':1084,'multiline':False]['text':' <deriveCompound feature="gender" structure="per" value="0"/> <!-- gender(gram-per-meter) â  gender(gram) -->','line_number':1085,'multiline':False]['text':' These are handled by MixedUnitLongNameHandler','line_number':1100,'multiline':False]['text':' TODO(icu-units#28): consider when serialize should be called.','line_number':1113,'multiline':False]['text':' identifier might also be empty for MeasureUnit().','line_number':1114,'multiline':False]['text':' MeasureUnit(): no units: return empty strings.','line_number':1121,'multiline':False]['text':' TODO(icu-units#145): spec doesn't cover builtin-per-builtin, it','line_number':1127,'multiline':False]['text':' breaks them all down. Do we want to drop this?','line_number':1128,'multiline':False]['text':' - findBySubType isn't super efficient, if we skip it and go to basic','line_number':1129,'multiline':False]['text':'   singles, we don't have to construct MeasureUnit's anymore.','line_number':1130,'multiline':False]['text':' - Check all the existing unit tests that fail without this: is it due','line_number':1131,'multiline':False]['text':'   to incorrect fallback via getMeasureData?','line_number':1132,'multiline':False]['text':' - Do those unit tests cover this code path representatively?','line_number':1133,'multiline':False]['text':' 2. Set timesPattern to be getValue(times, locale, length)','line_number':1141,'multiline':False]['text':' Numbered list items are from the algorithms at','line_number':1150,'multiline':False]['text':' https://unicode.org/reports/tr35/tr35-general.html#compound-units:','line_number':1151,'multiline':False]['text':'','line_number':1152,'multiline':False]['text':' pattern(...) point 5:','line_number':1153,'multiline':False]['text':' - Set both globalPlaceholder and globalPlaceholderPosition to be empty','line_number':1154,'multiline':False]['text':'','line_number':1155,'multiline':False]['text':' 3. Set result to be empty','line_number':1156,'multiline':False]['text':' Initial state: empty string pattern, via all falling back to OTHER:','line_number':1158,'multiline':False]['text':' Empty string represents "compound" (propagate the plural form).','line_number':1167,'multiline':False]['text':' 4. For each single_unit in product_unit','line_number':1173,'multiline':False]['text':' TODO(icu-units#28): ensure we have unit tests that change/fail if we','line_number':1179,'multiline':False]['text':' assign incorrect case variants here:','line_number':1180,'multiline':False]['text':' 4.1. If hasMultiple','line_number':1182,'multiline':False]['text':' 4.2. Get the gender of that single_unit','line_number':1192,'multiline':False]['text':' Ideally all simple units should be known, but they're not:','line_number':1195,'multiline':False]['text':' 100-kilometer is internally treated as a simple unit, but it is','line_number':1196,'multiline':False]['text':' not a built-in unit and does not have formatting data in CLDR 39.','line_number':1197,'multiline':False]['text':'','line_number':1198,'multiline':False]['text':' TODO(icu-units#28): test (desirable) invariants in unit tests.','line_number':1199,'multiline':False]['text':' 4.3. If singleUnit starts with a dimensionality_prefix, such as 'square-'','line_number':1205,'multiline':False]['text':' 4.3.1. set dimensionalityPrefixPattern to be','line_number':1210,'multiline':False]['text':'   getValue(that dimensionality_prefix, locale, length, singlePluralCategory, singleCaseVariant, gender),','line_number':1211,'multiline':False]['text':'   such as "{0} kwadratowym"','line_number':1212,'multiline':False]['text':' At the time of writing, only pow2 and pow3 are supported.','line_number':1218,'multiline':False]['text':' Attempting to format other powers results in a','line_number':1219,'multiline':False]['text':' U_RESOURCE_TYPE_MISMATCH. We convert the error if we','line_number':1220,'multiline':False]['text':' understand it:','line_number':1221,'multiline':False]['text':' TODO(icu-units#139):','line_number':1228,'multiline':False]['text':' 4.3.2. set singlePluralCategory to be power0(singlePluralCategory)','line_number':1229,'multiline':False]['text':' 4.3.3. set singleCaseVariant to be power0(singleCaseVariant)','line_number':1231,'multiline':False]['text':' 4.3.4. remove the dimensionality_prefix from singleUnit','line_number':1233,'multiline':False]['text':' 4.4. if singleUnit starts with an si_prefix, such as 'centi'','line_number':1237,'multiline':False]['text':' 4.4.1. set siPrefixPattern to be getValue(that si_prefix, locale,','line_number':1241,'multiline':False]['text':'        length), such as "centy{0}"','line_number':1242,'multiline':False]['text':' prefixKey looks like "1024p3" or "10p-2":','line_number':1244,'multiline':False]['text':' Contains a pattern like "centy{0}".','line_number':1248,'multiline':False]['text':' 4.4.2. set singlePluralCategory to be prefix0(singlePluralCategory)','line_number':1251,'multiline':False]['text':'','line_number':1252,'multiline':False]['text':' TODO(icu-units#139): that refers to these rules:','line_number':1253,'multiline':False]['text':' <deriveComponent feature="plural" structure="prefix" value0="one" value1="compound"/>','line_number':1254,'multiline':False]['text':' though I'm not sure what other value they might end up having.','line_number':1255,'multiline':False]['text':'','line_number':1256,'multiline':False]['text':' 4.4.3. set singleCaseVariant to be prefix0(singleCaseVariant)','line_number':1257,'multiline':False]['text':'','line_number':1258,'multiline':False]['text':' TODO(icu-units#139): that refers to:','line_number':1259,'multiline':False]['text':' <deriveComponent feature="case" structure="prefix" value0="nominative"','line_number':1260,'multiline':False]['text':' value1="compound"/> but the prefix (value0) doesn't have case, the rest simply','line_number':1261,'multiline':False]['text':' propagates.','line_number':1262,'multiline':False]['text':' 4.4.4. remove the si_prefix from singleUnit','line_number':1264,'multiline':False]['text':' 4.5. Set corePattern to be the getValue(singleUnit, locale, length,','line_number':1268,'multiline':False]['text':'      singlePluralCategory, singleCaseVariant), such as "{0} metrem"','line_number':1269,'multiline':False]['text':' At this point we are left with a Simple Unit:','line_number':1271,'multiline':False]['text':' Shouldn't happen if we have data for all single units','line_number':1277,'multiline':False]['text':' Calculate output gender','line_number':1281,'multiline':False]['text':' Calculate resulting patterns for each plural form','line_number':1318,'multiline':False]['text':' singleUnitArray[pluralIndex] looks something like "{0} Meter"','line_number':1322,'multiline':False]['text':' Let the usual plural fallback mechanism take care of this','line_number':1325,'multiline':False]['text':' plural form','line_number':1326,'multiline':False]['text':' Since our singleUnit can have a plural form that outArray','line_number':1329,'multiline':False]['text':' doesn't yet have (relying on fallback to OTHER), we start','line_number':1330,'multiline':False]['text':' by grabbing it with the normal plural fallback mechanism','line_number':1331,'multiline':False]['text':' 4.6. Extract(corePattern, coreUnit, placeholder, placeholderPosition) from that pattern.','line_number':1343,'multiline':False]['text':' 4.7 If the position is middle, then fail','line_number':1350,'multiline':False]['text':' 4.8. If globalPlaceholder is empty','line_number':1356,'multiline':False]['text':' Expect all units involved to have the same placeholder position','line_number':1361,'multiline':False]['text':' TODO(icu-units#28): Do we want to add a unit test that checks','line_number':1363,'multiline':False]['text':' for consistent joiner chars? Probably not, given how','line_number':1364,'multiline':False]['text':' inconsistent they are. File a CLDR ticket with examples?','line_number':1365,'multiline':False]['text':' Now coreUnit would be just "Meter"','line_number':1367,'multiline':False]['text':' 4.9. If siPrefixPattern is not empty','line_number':1369,'multiline':False]['text':' 4.9.1. Set coreUnit to be the combineLowercasing(locale, length, siPrefixPattern,','line_number':1376,'multiline':False]['text':'        coreUnit)','line_number':1377,'multiline':False]['text':' combineLowercasing(locale, length, prefixPattern, coreUnit)','line_number':1379,'multiline':False]['text':'','line_number':1380,'multiline':False]['text':' TODO(icu-units#28): run this only if prefixPattern does not','line_number':1381,'multiline':False]['text':' contain space characters - do languages "as", "bn", "hi",','line_number':1382,'multiline':False]['text':' "kk", etc have concepts of upper and lower case?:','line_number':1383,'multiline':False]['text':' 4.10. If dimensionalityPrefixPattern is not empty','line_number':1394,'multiline':False]['text':' 4.10.1. Set coreUnit to be the combineLowercasing(locale, length,','line_number':1402,'multiline':False]['text':'         dimensionalityPrefixPattern, coreUnit)','line_number':1403,'multiline':False]['text':' combineLowercasing(locale, length, prefixPattern, coreUnit)','line_number':1405,'multiline':False]['text':'','line_number':1406,'multiline':False]['text':' TODO(icu-units#28): run this only if prefixPattern does not','line_number':1407,'multiline':False]['text':' contain space characters - do languages "as", "bn", "hi",','line_number':1408,'multiline':False]['text':' "kk", etc have concepts of upper and lower case?:','line_number':1409,'multiline':False]['text':' 4.11. If the result is empty, set result to be coreUnit','line_number':1421,'multiline':False]['text':' 4.12. Otherwise set result to be format(timesPattern, result, coreUnit)','line_number':1424,'multiline':False]['text':' The above already handles fallback from other widths to short','line_number':1473,'multiline':False]['text':' Now handle fallback from other plural forms to OTHER','line_number':1477,'multiline':False]['text':' TODO(icu-units#28): currency gender?','line_number':1495,'multiline':False]['text':'signum','line_number':1542,'multiline':True]['text':' Defensive, for production code:','line_number':1562,'multiline':False]['text':' Should be using the normal LongNameHandler','line_number':1564,'multiline':False]['text':' Grab data for each of the components.','line_number':1572,'multiline':False]['text':' TODO(CLDR-14502): check from the CLDR-14502 ticket whether this','line_number':1574,'multiline':False]['text':' propagation of unitDisplayCase is correct:','line_number':1575,'multiline':False]['text':' TODO(ICU-21494): if we add support for gender for mixed units, we may','line_number':1578,'multiline':False]['text':' need maybeCalculateGender() here.','line_number':1579,'multiline':False]['text':' TODO(icu-units#120): Make sure ICU doesn't output zero-valued','line_number':1582,'multiline':False]['text':' high-magnitude fields','line_number':1583,'multiline':False]['text':' * for mixed units count N, produce N listFormatters, one for each subset','line_number':1584,'multiline':False]['text':'   that might be formatted.','line_number':1585,'multiline':False]['text':' This might be the same as SHORT in most languages:','line_number':1590,'multiline':False]['text':' TODO(ICU-21494): grab gender of each unit, calculate the gender','line_number':1595,'multiline':False]['text':' associated with this list formatter, save it for later.','line_number':1596,'multiline':False]['text':' We need a localised NumberFormatter for the numbers of the bigger units','line_number':1600,'multiline':False]['text':' (providing Arabic numerals, for example).','line_number':1601,'multiline':False]['text':' Mixed unit: we must have more than one unit value','line_number':1618,'multiline':False]['text':' Algorithm:','line_number':1623,'multiline':False]['text':'','line_number':1624,'multiline':False]['text':' For the mixed-units measurement of: "3 yard, 1 foot, 2.6 inch", we should','line_number':1625,'multiline':False]['text':' find "3 yard" and "1 foot" in micros.mixedMeasures.','line_number':1626,'multiline':False]['text':'','line_number':1627,'multiline':False]['text':' Obtain long-names with plural forms corresponding to measure values:','line_number':1628,'multiline':False]['text':'   * {0} yards, {0} foot, {0} inches','line_number':1629,'multiline':False]['text':'','line_number':1630,'multiline':False]['text':' Format the integer values appropriately and modify with the format','line_number':1631,'multiline':False]['text':' strings:','line_number':1632,'multiline':False]['text':'   - 3 yards, 1 foot','line_number':1633,'multiline':False]['text':'','line_number':1634,'multiline':False]['text':' Use ListFormatter to combine, with one placeholder:','line_number':1635,'multiline':False]['text':'   - 3 yards, 1 foot and {0} inches','line_number':1636,'multiline':False]['text':'','line_number':1637,'multiline':False]['text':' Return a SimpleModifier for this pattern, letting the rest of the','line_number':1638,'multiline':False]['text':' pipeline take care of the remaining inches.','line_number':1639,'multiline':False]['text':' If numbers are negative, only the first number needs to have its','line_number':1650,'multiline':False]['text':' negative sign formatted.','line_number':1651,'multiline':False]['text':' Insert placeholder for `quantity`','line_number':1654,'multiline':False]['text':' If quantity is not the first value and quantity is negative','line_number':1655,'multiline':False]['text':' TODO(ICU-21494): implement gender for lists of mixed units. Presumably we','line_number':1680,'multiline':False]['text':' can set micros.gender to the gender associated with the list formatter in','line_number':1681,'multiline':False]['text':' use below (once we have correct support for that). And then document this','line_number':1682,'multiline':False]['text':' appropriately? "getMixedUnitModifier" doesn't sound like it would do','line_number':1683,'multiline':False]['text':' something like this.','line_number':1684,'multiline':False]['text':' Combine list into a "premixed" pattern','line_number':1686,'multiline':False]['text':'signum','line_number':1700,'multiline':True]['text':'plural','line_number':1701,'multiline':True]['text':' TODO(icu-units#28): investigate this method when investigating where','line_number':1702,'multiline':False]['text':' ModifierStore::getModifier() gets used. To be sure it remains','line_number':1703,'multiline':False]['text':' unreachable:','line_number':1704,'multiline':False]['text':' We call parent->processQuantity() from the Multiplexer, instead of','line_number':1748,'multiline':False]['text':' letting LongNameHandler handle it: we don't know which LongNameHandler to','line_number':1749,'multiline':False]['text':' call until we've called the parent!','line_number':1750,'multiline':False]['text':' Call the correct LongNameHandler based on outputUnit','line_number':1753,'multiline':False]['text':' We shouldn't receive any outputUnit for which we haven't already got a','line_number':1763,'multiline':False]['text':' LongNameHandler:','line_number':1764,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1768,'multiline':True]