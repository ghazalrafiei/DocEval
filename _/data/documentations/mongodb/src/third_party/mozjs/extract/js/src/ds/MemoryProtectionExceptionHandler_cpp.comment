['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Nothing.','line_number':15,'multiline':False]['text':' Memory protection occurs at non-deterministic points when','line_number':38,'multiline':False]['text':' recording/replaying.','line_number':39,'multiline':False]['text':'
 * A class to store the addresses of the regions recognized as protected
 * by this exception handler. We use a splay tree to store these addresses.
 ','line_number':43,'multiline':True]['text':' This function compares 2 memory regions. If they overlap they are','line_number':55,'multiline':False]['text':' considered as identical. This is used for querying if an address is','line_number':56,'multiline':False]['text':' included in a range, or if an address is already registered as a','line_number':57,'multiline':False]['text':' protected region.','line_number':58,'multiline':False]['text':' Here "false" is used to not use the memory protection mechanism of','line_number':77,'multiline':False]['text':' LifoAlloc in order to prevent dead-locks.','line_number':78,'multiline':False]['text':' Under Windows ASan, WasmFaultHandler registers itself at 'last' priority','line_number':116,'multiline':False]['text':' in order to let ASan's ShadowExceptionHandler stay at 'first' priority.','line_number':117,'multiline':False]['text':' Unfortunately that results in spurious wasm faults passing through the','line_number':118,'multiline':False]['text':' MemoryProtectionExceptionHandler, which breaks its assumption that any','line_number':119,'multiline':False]['text':' faults it sees are fatal. Just disable this handler in that case, as the','line_number':120,'multiline':False]['text':' crash annotations provided here are not critical for ASan builds.','line_number':121,'multiline':False]['text':' Disable the exception handler for Beta and Release builds.','line_number':124,'multiline':False]['text':' -------------------------------------------------------------------------- ','line_number':145,'multiline':True]['text':'
 * This helper function attempts to replicate the functionality of
 * mozilla::MOZ_ReportCrash() in an async-signal-safe way.
 ','line_number':147,'multiline':True]['text':' Ignore failures; we're already crashing anyway.','line_number':163,'multiline':False]['text':' -------------------------------------------------------------------------- ','line_number':167,'multiline':True]['text':'
 * We can only handle one exception. To guard against races and reentrancy,
 * we set this value the first time we enter the exception handler and never
 * touch it again.
 ','line_number':173,'multiline':True]['text':' We only handle one kind of exception; ignore all others.','line_number':184,'multiline':False]['text':' Make absolutely sure we can only get here once.','line_number':186,'multiline':False]['text':' Restore the previous handler. We're going to forward to it','line_number':188,'multiline':False]['text':' anyway, and if we crash while doing so we don't want to hang.','line_number':189,'multiline':False]['text':' Get the address that the offending code tried to access.','line_number':194,'multiline':False]['text':' If the faulting address is in one of our protected regions, we','line_number':197,'multiline':False]['text':' want to annotate the crash to make it stand out from the crowd.','line_number':198,'multiline':False]['text':' Forward to the previous handler which may be a debugger,','line_number':207,'multiline':False]['text':' the crash reporter or something else entirely.','line_number':208,'multiline':False]['text':' If the exception handler is disabled, report success anyway.','line_number':215,'multiline':False]['text':' Install our new exception handler.','line_number':220,'multiline':False]['text':' FirstHandler = ','line_number':222,'multiline':True]['text':' Restore the previous exception handler.','line_number':232,'multiline':False]['text':'
 * We can only handle one exception. To guard against races and reentrancy,
 * we set this value the first time we enter the exception handler and never
 * touch it again.
 ','line_number':249,'multiline':True]['text':' Make absolutely sure we can only get here once.','line_number':257,'multiline':False]['text':' Restore the previous handler. We're going to forward to it','line_number':259,'multiline':False]['text':' anyway, and if we crash while doing so we don't want to hang.','line_number':260,'multiline':False]['text':' Get the address that the offending code tried to access.','line_number':266,'multiline':False]['text':' If the faulting address is in one of our protected regions, we','line_number':269,'multiline':False]['text':' want to annotate the crash to make it stand out from the crowd.','line_number':270,'multiline':False]['text':' Forward to the previous handler which may be a debugger,','line_number':279,'multiline':False]['text':' the crash reporter or something else entirely.','line_number':280,'multiline':False]['text':' If we reach here, we're returning to let the default signal handler deal','line_number':290,'multiline':False]['text':' with the exception. This is technically undefined behavior, but','line_number':291,'multiline':False]['text':' everything seems to do it, and it removes us from the crash stack.','line_number':292,'multiline':False]['text':' If the exception handler is disabled, report success anyway.','line_number':298,'multiline':False]['text':' Install our new exception handler and save the previous one.','line_number':303,'multiline':False]['text':' Restore the previous exception handler.','line_number':318,'multiline':False]['text':'
 * The fact that we need to be able to forward to other exception handlers
 * makes this code much more complicated. The forwarding logic and the
 * structures required to make it work are heavily based on the code at
 * www.ravenbrook.com/project/mps/prototype/2013-06-24/machtest/machtest/main.c
 ','line_number':327,'multiline':True]['text':' -------------------------------------------------------------------------- ','line_number':334,'multiline':True]['text':'                Begin Mach definitions and helper functions                 ','line_number':335,'multiline':True]['text':' -------------------------------------------------------------------------- ','line_number':336,'multiline':True]['text':'
 * These are the message IDs associated with each exception type.
 * We'll be using sIDRequest64, but we need the others for forwarding.
 ','line_number':338,'multiline':True]['text':'
 * Each message ID has an associated Mach message structure.
 * We use the preprocessor to make defining them a little less arduous.
 ','line_number':350,'multiline':True]['text':' This is needed because not all fields are naturally aligned on 64-bit. ','line_number':399,'multiline':True]['text':' We use this as a common base when forwarding to the previous handler. ','line_number':411,'multiline':True]['text':' This isn't really a full Mach message, but it's all we need to send. ','line_number':422,'multiline':True]['text':'
 * The exception handler we're forwarding to may not have the same behavior
 * or thread state flavor as what we're using. These macros help populate
 * the fields of the message we're about to send to the previous handler.
 ','line_number':441,'multiline':True]['text':' -------------------------------------------------------------------------- ','line_number':511,'multiline':True]['text':'                 End Mach definitions and helper functions                  ','line_number':512,'multiline':True]['text':' -------------------------------------------------------------------------- ','line_number':513,'multiline':True]['text':' Every Mach exception handler is parameterized by these four properties. ','line_number':515,'multiline':True]['text':' Each Mach exception handler runs in its own thread. ','line_number':527,'multiline':True]['text':' This choice of ID is arbitrary, but must not match our exception ID. ','line_number':531,'multiline':True]['text':'
 * The meat of our exception handler. This thread waits for an exception
 * message, annotates the exception if needed, then forwards it to the
 * previously installed handler (which will likely terminate the process).
 ','line_number':536,'multiline':True]['text':' We use the simplest kind of 64-bit exception message here.','line_number':547,'multiline':False]['text':' Restore the previous handler. We're going to forward to it','line_number':554,'multiline':False]['text':' anyway, and if we crash while doing so we don't want to hang.','line_number':555,'multiline':False]['text':' If we failed even receiving the message, just give up.','line_number':559,'multiline':False]['text':' Terminate the thread if we're shutting down.','line_number':564,'multiline':False]['text':' The only other valid message ID is the one associated with the','line_number':569,'multiline':False]['text':' EXCEPTION_DEFAULT | MACH_EXCEPTION_CODES behavior we chose.','line_number':570,'multiline':False]['text':' Make sure we can understand the exception we received.','line_number':575,'multiline':False]['text':' Get the address that the offending code tried to access.','line_number':580,'multiline':False]['text':' If the faulting address is inside one of our protected regions, we','line_number':583,'multiline':False]['text':' want to annotate the crash to make it stand out from the crowd.','line_number':584,'multiline':False]['text':' Forward to the previous handler which may be a debugger, the unix','line_number':590,'multiline':False]['text':' signal handler, the crash reporter or something else entirely.','line_number':591,'multiline':False]['text':' If the previous handler requested thread state, get it here.','line_number':597,'multiline':False]['text':' Depending on the behavior of the previous handler, the forwarded','line_number':607,'multiline':False]['text':' exception message will have a different set of fields.','line_number':608,'multiline':False]['text':' Of particular note is that exception handlers that lack','line_number':609,'multiline':False]['text':' MACH_EXCEPTION_CODES will get 32-bit fields even on 64-bit','line_number':610,'multiline':False]['text':' systems. It appears that OSX simply truncates these fields.','line_number':611,'multiline':False]['text':' Forward the generated message to the old port. The local and remote','line_number':640,'multiline':False]['text':' port fields *and their rights* are swapped on arrival, so we need to','line_number':641,'multiline':False]['text':' swap them back first.','line_number':642,'multiline':False]['text':' There was no previous task-level exception handler, so defer to the','line_number':656,'multiline':False]['text':' host level one instead. We set the return code to KERN_FAILURE to','line_number':657,'multiline':False]['text':' indicate that we did not handle the exception.','line_number':658,'multiline':False]['text':' The reply message ID is always the request ID + 100.','line_number':659,'multiline':False]['text':' Send a simple quit message to the exception handler thread.','line_number':678,'multiline':False]['text':' If the exception handler is disabled, report success anyway.','line_number':701,'multiline':False]['text':' Allocate a new exception port with receive rights.','line_number':714,'multiline':False]['text':' Give the new port send rights as well.','line_number':722,'multiline':False]['text':' Start the thread that will receive the messages from our exception port.','line_number':731,'multiline':False]['text':' Set the other properties of our new exception handler.','line_number':738,'multiline':False]['text':' Tell the task to use our exception handler, and save the previous one.','line_number':744,'multiline':False]['text':' We should have info on the previous exception handler, even if it's null.','line_number':760,'multiline':False]['text':' Restore the previous exception handler.','line_number':773,'multiline':False]['text':' Release the Mach IPC port we used.','line_number':780,'multiline':False]['text':' namespace js ','line_number':799,'multiline':True]