['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::shadow::Symbol','line_number':20,'multiline':False]['text':' namespace js','line_number':29,'multiline':False]['text':' User description of symbol, stored in the cell header.','line_number':36,'multiline':False]['text':' Each Symbol gets its own hash code so that we don't have to use','line_number':42,'multiline':False]['text':' addresses as hash codes (a security hazard).','line_number':43,'multiline':False]['text':' An "interesting symbol" is a well-known symbol, like @@toStringTag,','line_number':77,'multiline':False]['text':' that's often looked up on random objects but is usually not present. We','line_number':78,'multiline':False]['text':' optimize this by setting a flag on the object's BaseShape when such','line_number':79,'multiline':False]['text':' symbol properties are added, so we can optimize lookups on objects that','line_number':80,'multiline':False]['text':' don't have the BaseShape flag.','line_number':81,'multiline':False]['text':' Symbol created for the #PrivateName syntax.','line_number':86,'multiline':False]['text':' Override base class implementation to tell GC about well-known symbols.','line_number':96,'multiline':False]['text':' Debugger-friendly stderr dump.','line_number':104,'multiline':False]['text':' namespace JS ','line_number':109,'multiline':True]['text':' Hash policy used by the SymbolRegistry. ','line_number':113,'multiline':True]['text':'
 * [SMDOC] Symbol.for() registry (ES6 GlobalSymbolRegistry)
 *
 * The runtime-wide symbol registry, used to implement Symbol.for().
 *
 * ES6 draft rev 25 (2014 May 22) calls this the GlobalSymbolRegistry List. In
 * our implementation, it is not global. There is one per JSRuntime. The
 * symbols in the symbol registry, like all symbols, are allocated in the atoms
 * compartment and can be directly referenced from any compartment. They are
 * never shared across runtimes.
 *
 * The memory management strategy here is modeled after js::AtomSet. It's like
 * a WeakSet. The registry itself does not keep any symbols alive; when a
 * symbol in the registry is collected, the registry entry is removed. No GC
 * nondeterminism is exposed to scripts, because there is no API for
 * enumerating the symbol registry, querying its size, etc.
 ','line_number':122,'multiline':True]['text':' ES6 rev 27 (2014 Aug 24) 19.4.3.3','line_number':146,'multiline':False]['text':' namespace js ','line_number':150,'multiline':True]['text':' vm_SymbolType_h ','line_number':152,'multiline':True]