['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
********************************************************************************
*
*   Copyright (C) 1996-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
********************************************************************************
','line_number':3,'multiline':True]['text':' NOTES:
   3/20/1999 srl - strncpy called w/o setting nulls at the end
 ','line_number':23,'multiline':True]['text':'*
 *  How may columns to indent the 'OK' markers.
 ','line_number':31,'multiline':True]['text':'*
 *   How many lines of scrollage can go by before we need to remind the user what the test is.
 ','line_number':35,'multiline':True]['text':' This is dynamically allocated off the end with malloc. ','line_number':49,'multiline':True]['text':' Local prototypes ','line_number':66,'multiline':True]['text':'*
 * Do the work of logging an error. Doesn't increase the error count.
 *
 * @prefix optional prefix prepended to message, or NULL.
 * @param pattern printf style pattern
 * @param ap vprintf style arg list
 ','line_number':85,'multiline':True]['text':'*
 * Log test structure, with indent
 * @param pattern printf pattern
 ','line_number':96,'multiline':True]['text':'*
 * Log test structure, NO indent
 * @param pattern printf pattern
 ','line_number':102,'multiline':True]['text':' If we need to make the framework multi-thread safe
   we need to pass around the following vars
','line_number':108,'multiline':True]['text':' Count of errors from all tests. ','line_number':112,'multiline':True]['text':' were there any other errors? ','line_number':113,'multiline':True]['text':' count of data related errors or warnings ','line_number':114,'multiline':True]['text':' are we on the top line with our test name? ','line_number':119,'multiline':True]['text':' did the user leave us without a trailing \n ? ','line_number':120,'multiline':True]['text':' global count of printouts ','line_number':121,'multiline':True]['text':' Was REPEAT_TESTS initialized? ','line_number':122,'multiline':True]['text':' Number of times to run the test ','line_number':123,'multiline':True]['text':' be No-verbose by default ','line_number':124,'multiline':True]['text':' error messages will be displayed by default','line_number':125,'multiline':True]['text':' Skip some of the slower tests? ','line_number':126,'multiline':True]['text':' Reduce data errs to warnings? ','line_number':127,'multiline':True]['text':' ICU tracing level ','line_number':128,'multiline':True]['text':' Minimum library memory allocation window that will fail. ','line_number':129,'multiline':True]['text':' Maximum library memory allocation window that will fail. ','line_number':130,'multiline':True]['text':'-------------------------------------------','line_number':136,'multiline':True]['text':' strncmp that also makes sure there's a \0 at s2[0] ','line_number':138,'multiline':True]['text':' null check fails ','line_number':144,'multiline':True]['text':' Get the next component of the name ','line_number':155,'multiline':True]['text':' skip '/' ','line_number':162,'multiline':True]['text':'printf("->%s-< [%d] -> [%s]\n", name, *nameLen, *nextName);','line_number':165,'multiline':True]['text':'if this is the first Test created','line_number':210,'multiline':True]['text':'  printf("addTest: nreName = %s\n", newNode->name );','line_number':216,'multiline':True]['text':' non recursive insert function ','line_number':221,'multiline':True]['text':' length of current 'name' ','line_number':226,'multiline':True]['text':' remove leading slash ','line_number':228,'multiline':True]['text':' Start with the next child ','line_number':236,'multiline':True]['text':'      printf("* %s\n", name );','line_number':241,'multiline':True]['text':' if nextNode is already null, then curNode has no children
        -- add them ','line_number':243,'multiline':True]['text':' Add all children of the node ','line_number':247,'multiline':True]['text':' Get the next component of the name ','line_number':250,'multiline':True]['text':' update curName to have the next name segment ','line_number':253,'multiline':True]['text':' printf("*** added %s\n", curNode->child->name );','line_number':255,'multiline':True]['text':' Search across for the name ','line_number':264,'multiline':True]['text':' Did not find 'name' on this level. ','line_number':272,'multiline':True]['text':' nextNode matches 'name' ','line_number':279,'multiline':True]['text':' end of the line ','line_number':281,'multiline':True]['text':' Loop again with the next item ','line_number':286,'multiline':True]['text':'*
 * Log the time taken. May not output anything.
 * @param deltaTime change in time
 ','line_number':292,'multiline':True]['text':' at least terminate it. ','line_number':307,'multiline':True]['text':'*
 * Run or list tests (according to mode) in a subtree.
 *
 * @param root root of the subtree to operate on
 * @param depth The depth of this tree (0=root)
 * @param nodeList an array of MAXTESTS depth that's used for keeping track of where we are. nodeList[depth] points to the 'parent' at depth depth.
 * @param mode what mode we are operating in.
 ','line_number':319,'multiline':True]['text':' record the current root node, and increment depth. ','line_number':347,'multiline':True]['text':' depth is now the depth of root's children. ','line_number':349,'multiline':True]['text':' Collect the 'path' to the current subtree. ','line_number':351,'multiline':True]['text':' including 'root' ','line_number':357,'multiline':True]['text':' print test name and space. ','line_number':359,'multiline':True]['text':' we are still on the line with the test name ','line_number':366,'multiline':True]['text':' if root is a leaf node, run it ','line_number':370,'multiline':True]['text':' depth of subitems ','line_number':383,'multiline':True]['text':' PERFORM THE TEST ***********************','line_number':390,'multiline':True]['text':' depth of root ','line_number':398,'multiline':True]['text':' There was an error without a newline ','line_number':401,'multiline':True]['text':' had some output ','line_number':415,'multiline':True]['text':' in case they forgot. ','line_number':419,'multiline':True]['text':' put -- out at 30 sp. ','line_number':422,'multiline':True]['text':' we are back on-line ','line_number':433,'multiline':True]['text':' root ','line_number':436,'multiline':True]['text':' we want these messages to be at 0 indent. so just push the indent level breifly. ','line_number':438,'multiline':True]['text':' TODO:  summarize subtests ','line_number':458,'multiline':True]['text':' in case they forgot. ','line_number':463,'multiline':True]['text':' DO NOT iterate over siblings of the root. TODO: why not? ','line_number':485,'multiline':True]['text':' make up one for them ','line_number':495,'multiline':True]['text':' make up one for them ','line_number':510,'multiline':True]['text':'print out result summary','line_number':519,'multiline':True]['text':' just in case ','line_number':521,'multiline':True]['text':' length of current 'name' ','line_number':581,'multiline':True]['text':' remove leading slash ','line_number':587,'multiline':True]['text':' Start with the next child ','line_number':595,'multiline':True]['text':'      printf("* %s\n", name );','line_number':600,'multiline':True]['text':' if nextNode is already null, then curNode has no children
        -- add them ','line_number':602,'multiline':True]['text':' Search across for the name ','line_number':609,'multiline':True]['text':' Did not find 'name' on this level. ','line_number':617,'multiline':True]['text':' nextNode matches 'name' ','line_number':622,'multiline':True]['text':' end of the line ','line_number':624,'multiline':True]['text':' Loop again with the next item ','line_number':629,'multiline':True]['text':'  =========== io functions ======== ','line_number':635,'multiline':True]['text':' col 1 - bang ','line_number':682,'multiline':True]['text':'*
 * Log test structure, with indent
 ','line_number':739,'multiline':True]['text':'*
 * Log test structure (no ident)
 ','line_number':753,'multiline':True]['text':'
         * Count errors only if there is a line feed in the pattern
         * so that we do not exaggerate our error count.
         ','line_number':795,'multiline':True]['text':' Count at least one error. ','line_number':801,'multiline':True]['text':' for informational message at the end ','line_number':822,'multiline':True]['text':' Fatal error. ','line_number':826,'multiline':True]['text':' no need for prefix in default case ','line_number':832,'multiline':True]['text':' Fatal error. ','line_number':838,'multiline':True]['text':' no need for prefix in default case ','line_number':844,'multiline':True]['text':' for informational message at the end ','line_number':874,'multiline':True]['text':' Fatal error. ','line_number':877,'multiline':True]['text':' no need for prefix in default case ','line_number':881,'multiline':True]['text':'
 * Tracing functions.
 ','line_number':888,'multiline':True]['text':' suppress compiler warnings about unused variable','line_number':894,'multiline':False]['text':' suppress compiler warnings about unused variable','line_number':903,'multiline':False]['text':' suppress compiler warnings about unused variables','line_number':919,'multiline':False]['text':' suppress compiler warnings about unused variable','line_number':931,'multiline':False]['text':'if (VERBOSITY) {
        printf("Allocated %ld\n", (long)size);
    }','line_number':932,'multiline':True]['text':' suppress compiler warnings about unused variable','line_number':941,'multiline':False]['text':'if (VERBOSITY) {
        printf("Reallocated %ld\n", (long)size);
    }','line_number':942,'multiline':True]['text':'free(mem);','line_number':946,'multiline':True]['text':' Realloc doesn't free on failure. ','line_number':946,'multiline':True]['text':' suppress compiler warnings about unused variable','line_number':952,'multiline':False]['text':' We don't run the tests here. ','line_number':971,'multiline':True]['text':' We don't run the tests here. ','line_number':976,'multiline':True]['text':' doList = TRUE; ','line_number':985,'multiline':True]['text':' Use the default value ','line_number':1030,'multiline':True]['text':' set the name ','line_number':1053,'multiline':True]['text':' total error count ','line_number':1093,'multiline':True]['text':'*
     * This main will parse the l, v, h, n, and path arguments
     ','line_number':1101,'multiline':True]['text':' couldn't fire up XML thing ','line_number':1114,'multiline':True]['text':' just in case ','line_number':1134,'multiline':True]['text':' just in case ','line_number':1141,'multiline':True]['text':' else option already handled by initArgs ','line_number':1151,'multiline':True]['text':' no other subtree given, run the default ','line_number':1154,'multiline':True]['text':' just in case ','line_number':1156,'multiline':True]['text':' just in case ','line_number':1161,'multiline':True]['text':' total error count ','line_number':1177,'multiline':True]['text':'*
 * Display program invocation arguments
 ','line_number':1180,'multiline':True]['text':'
 * ================== JUnit support ================================
 ','line_number':1257,'multiline':True]['text':' write prefix ','line_number':1289,'multiline':True]