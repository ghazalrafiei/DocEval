['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*   Copyright (C) 2010-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  stringtriebuilder.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2010dec24
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':' for 'typeid' to work','line_number':17,'multiline':False]['text':' USTRINGTRIE_BUILD_SMALL ','line_number':72,'multiline':True]['text':' Requires start<limit,','line_number':83,'multiline':False]['text':' and all strings of the [start..limit[ elements must be sorted and','line_number':84,'multiline':False]['text':' have a common prefix of length unitIndex.','line_number':85,'multiline':False]['text':' An intermediate or final value.','line_number':92,'multiline':False]['text':' final-value node','line_number':95,'multiline':False]['text':' Now all [start..limit[ strings are longer than unitIndex.','line_number':99,'multiline':False]['text':' Linear-match node: All strings have the same character at unitIndex.','line_number':103,'multiline':False]['text':' Break the linear-match sequence into chunks of at most kMaxLinearMatchLength.','line_number':106,'multiline':False]['text':' Branch node.','line_number':118,'multiline':False]['text':' length>=2 because minUnit!=maxUnit.','line_number':120,'multiline':False]['text':' start<limit && all strings longer than unitIndex &&','line_number':132,'multiline':False]['text':' length different units at unitIndex','line_number':133,'multiline':False]['text':' Branch on the middle unit.','line_number':140,'multiline':False]['text':' First, find the middle unit.','line_number':141,'multiline':False]['text':' Encode the less-than branch first.','line_number':143,'multiline':False]['text':' middle unit','line_number':144,'multiline':False]['text':' Continue for the greater-or-equal branch.','line_number':147,'multiline':False]['text':' For each unit, find its elements array start and whether it has a final value.','line_number':151,'multiline':False]['text':' unitNumber==length-1, and the maxUnit elements range is [start..limit[','line_number':162,'multiline':False]['text':' Write the sub-nodes in reverse order: The jump lengths are deltas from','line_number':165,'multiline':False]['text':' after their own positions, so if we wrote the minUnit sub-node first,','line_number':166,'multiline':False]['text':' then its jump delta would be larger.','line_number':167,'multiline':False]['text':' Instead we write the minUnit sub-node last, for a shorter delta.','line_number':168,'multiline':False]['text':' The maxUnit sub-node is written as the very last one because we do','line_number':176,'multiline':False]['text':' not jump for it at all.','line_number':177,'multiline':False]['text':' Write the rest of this node's unit-value pairs.','line_number':181,'multiline':False]['text':' Write the final value for the one string ending with this unit.','line_number':186,'multiline':False]['text':' Write the delta to the start position of the sub-node.','line_number':189,'multiline':False]['text':' Write the split-branch nodes.','line_number':195,'multiline':False]['text':' Requires start<limit,','line_number':204,'multiline':False]['text':' and all strings of the [start..limit[ elements must be sorted and','line_number':205,'multiline':False]['text':' have a common prefix of length unitIndex.','line_number':206,'multiline':False]['text':' An intermediate or final value.','line_number':215,'multiline':False]['text':' Now all [start..limit[ strings are longer than unitIndex.','line_number':223,'multiline':False]['text':' Linear-match node: All strings have the same character at unitIndex.','line_number':227,'multiline':False]['text':' Break the linear-match sequence into chunks of at most kMaxLinearMatchLength.','line_number':230,'multiline':False]['text':' Branch node.','line_number':241,'multiline':False]['text':' length>=2 because minUnit!=maxUnit.','line_number':243,'multiline':False]['text':' start<limit && all strings longer than unitIndex &&','line_number':257,'multiline':False]['text':' length different units at unitIndex','line_number':258,'multiline':False]['text':' Branch on the middle unit.','line_number':269,'multiline':False]['text':' First, find the middle unit.','line_number':270,'multiline':False]['text':' Create the less-than branch.','line_number':272,'multiline':False]['text':' middle unit','line_number':273,'multiline':False]['text':' Continue for the greater-or-equal branch.','line_number':276,'multiline':False]['text':' For each unit, find its elements array start and whether it has a final value.','line_number':288,'multiline':False]['text':' unitNumber==length-1, and the maxUnit elements range is [start..limit[','line_number':301,'multiline':False]['text':' Create the split-branch nodes.','line_number':309,'multiline':False]['text':' If uhash_puti() returns a non-zero value from an equivalent, previously','line_number':333,'multiline':False]['text':' registered node, then uhash_find() failed to find that and we will leak newNode.','line_number':334,'multiline':False]['text':' Only in debug mode to avoid a compiler warning about unused oldValue.','line_number':336,'multiline':False]['text':' If uhash_puti() returns a non-zero value from an equivalent, previously','line_number':362,'multiline':False]['text':' registered node, then uhash_find() failed to find that and we will leak newNode.','line_number':363,'multiline':False]['text':' Only in debug mode to avoid a compiler warning about unused oldValue.','line_number':365,'multiline':False]['text':' For all but the rightmost edge, decrement the edge number.','line_number':502,'multiline':False]['text':' Write the sub-nodes in reverse order: The jump lengths are deltas from','line_number':512,'multiline':False]['text':' after their own positions, so if we wrote the minUnit sub-node first,','line_number':513,'multiline':False]['text':' then its jump delta would be larger.','line_number':514,'multiline':False]['text':' Instead we write the minUnit sub-node last, for a shorter delta.','line_number':515,'multiline':False]['text':' The maxUnit sub-node is written as the very last one because we do','line_number':525,'multiline':False]['text':' not jump for it at all.','line_number':526,'multiline':False]['text':' Write the rest of this node's unit-value pairs.','line_number':534,'multiline':False]['text':' Write the final value for the one string ending with this unit.','line_number':539,'multiline':False]['text':' Write the delta to the start position of the sub-node.','line_number':543,'multiline':False]['text':' Encode the less-than branch first.','line_number':577,'multiline':False]['text':' Encode the greater-or-equal branch last because we do not jump for it at all.','line_number':579,'multiline':False]['text':' Write this node.','line_number':581,'multiline':False]['text':' less-than','line_number':583,'multiline':False]