['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * JS object implementation.
 ','line_number':7,'multiline':True]['text':' js::IdValuePair','line_number':34,'multiline':False]['text':' js::DumpObject','line_number':39,'multiline':False]['text':' JSErrNum, js::GetErrorMessage, JSMSG_*','line_number':40,'multiline':False]['text':' js::IsWindow, js::ToWindowProxyIfWindow','line_number':41,'multiline':False]['text':' JS::FromPropertyDescriptor','line_number':43,'multiline':False]['text':' JSPropertySpec','line_number':44,'multiline':False]['text':' js_*_str','line_number':67,'multiline':False]['text':' js::CopyInitializerObject','line_number':82,'multiline':False]['text':' ES6 draft rev37 6.2.4.4 FromPropertyDescriptor','line_number':147,'multiline':False]['text':' Step 1.','line_number':155,'multiline':False]['text':' Step 2-3.','line_number':168,'multiline':False]['text':' Step 4.','line_number':176,'multiline':False]['text':' Step 5.','line_number':183,'multiline':False]['text':' Step 6.','line_number':192,'multiline':False]['text':' Step 7.','line_number':204,'multiline':False]['text':' Step 8.','line_number':216,'multiline':False]['text':' Step 9.','line_number':224,'multiline':False]['text':'** PropertyDescriptor operations and DefineProperties ********************','line_number':295,'multiline':True]['text':' 6.2.5.5 ToPropertyDescriptor(Obj)','line_number':310,'multiline':False]['text':' Step 1.','line_number':314,'multiline':False]['text':' Step 2.','line_number':321,'multiline':False]['text':' Steps 3-4.','line_number':327,'multiline':False]['text':' Steps 5-6.','line_number':337,'multiline':False]['text':' Steps 7-8.','line_number':347,'multiline':False]['text':' Steps 9-10.','line_number':357,'multiline':False]['text':' Steps 11-12.','line_number':367,'multiline':False]['text':' Steps 13-14.','line_number':390,'multiline':False]['text':' Step 15.','line_number':413,'multiline':False]['text':' We delay setGetter/setSetter after the previous check,','line_number':421,'multiline':False]['text':' because otherwise we would assert.','line_number':422,'multiline':False]['text':' 6.2.5.6 CompletePropertyDescriptor(Desc)','line_number':449,'multiline':False]['text':' Step 1.','line_number':451,'multiline':False]['text':' Step 2.','line_number':454,'multiline':False]['text':' Let like be the Record { [[Value]]: undefined, [[Writable]]: false,','line_number':455,'multiline':False]['text':'                          [[Get]]: undefined, [[Set]]: undefined,','line_number':456,'multiline':False]['text':'                          [[Enumerable]]: false, [[Configurable]]: false }.','line_number':457,'multiline':False]['text':' Step 3.','line_number':459,'multiline':False]['text':' Step 3.a.','line_number':461,'multiline':False]['text':' Step 3.b.','line_number':465,'multiline':False]['text':' Step 4.a.','line_number':470,'multiline':False]['text':' Step 4.b.','line_number':474,'multiline':False]['text':' Step 5.','line_number':480,'multiline':False]['text':' Step 6.','line_number':485,'multiline':False]['text':'** Seal and freeze *******************************************************','line_number':514,'multiline':True]['text':' ES6 draft rev 29 (6 Dec 2014) 7.3.13. ','line_number':516,'multiline':True]['text':' Steps 3-5. (Steps 1-2 are redundant assertions.)','line_number':521,'multiline':False]['text':' Steps 6-9, loosely interpreted.','line_number':526,'multiline':False]['text':' Use a fast path to seal/freeze properties. This has the benefit of','line_number':531,'multiline':False]['text':' creating shared property maps if possible, whereas the slower/generic','line_number':532,'multiline':False]['text':' implementation below ends up converting non-empty objects to dictionary','line_number':533,'multiline':False]['text':' mode.','line_number':534,'multiline':False]['text':' Ordinarily ArraySetLength handles this, but we're going behind its back','line_number':541,'multiline':False]['text':' right now, so we must do this manually.','line_number':542,'multiline':False]['text':' Steps 6-7.','line_number':547,'multiline':False]['text':' 8.a/9.a. The two different loops are merged here.','line_number':557,'multiline':False]['text':' 8.a.i.','line_number':562,'multiline':False]['text':' 9.a.i-ii.','line_number':565,'multiline':False]['text':' 9.a.iii.','line_number':571,'multiline':False]['text':' 9.a.iii.1-2','line_number':576,'multiline':False]['text':' 8.a.i-ii. / 9.a.iii.3-4','line_number':586,'multiline':False]['text':' Finally, freeze or seal the dense elements.','line_number':593,'multiline':False]['text':' enumerableOnly = ','line_number':613,'multiline':True]['text':' ES6 draft rev33 (12 Feb 2015) 7.3.15','line_number':629,'multiline':False]['text':' Steps 3-6. (Steps 1-2 are redundant assertions.)','line_number':632,'multiline':False]['text':' Fast path for native objects.','line_number':642,'multiline':False]['text':' Force lazy properties to be resolved.','line_number':646,'multiline':False]['text':' Typed array elements are configurable, writable properties, so if any','line_number':651,'multiline':False]['text':' elements are present, the typed array can neither be sealed nor frozen.','line_number':652,'multiline':False]['text':' Unless the sealed flag is set, dense elements are configurable.','line_number':668,'multiline':False]['text':' Unless the frozen flag is set, dense elements are writable.','line_number':674,'multiline':False]['text':' Steps 7-9.','line_number':681,'multiline':False]['text':' Steps 9.c.i-ii.','line_number':683,'multiline':False]['text':' Steps 7-8.','line_number':692,'multiline':False]['text':' Step 9.','line_number':699,'multiline':False]['text':' Steps 9.a-b.','line_number':705,'multiline':False]['text':' Step 9.c.','line_number':710,'multiline':False]['text':' Steps 9.c.i-ii.','line_number':715,'multiline':False]['text':' Step 10.','line_number':725,'multiline':False]['text':' * ','line_number':730,'multiline':True]['text':' For objects which can have fixed data following the object, only use','line_number':741,'multiline':False]['text':' enough fixed slots to cover the number of reserved slots in the object,','line_number':742,'multiline':False]['text':' regardless of the allocation kind specified.','line_number':743,'multiline':False]['text':' Find the appropriate proto for clasp. Built-in classes have a cached','line_number':864,'multiline':False]['text':' proto on cx->global(); all others get %ObjectPrototype%.','line_number':865,'multiline':False]['text':' Steps 4.a-b fetch the builtin prototype of the current realm, which we','line_number':927,'multiline':False]['text':' represent as nullptr.','line_number':928,'multiline':False]['text':' Bug 1317416. The caller did not pass a reasonable JSProtoKey, so let the','line_number':931,'multiline':False]['text':' caller select a prototype object. Most likely they will choose one from','line_number':932,'multiline':False]['text':' the wrong realm.','line_number':933,'multiline':False]['text':' Step 4.a: Let realm be ? GetFunctionRealm(constructor);','line_number':936,'multiline':False]['text':' Step 4.b: Set proto to realm's intrinsic object named','line_number':942,'multiline':False]['text':'           intrinsicDefaultProto.','line_number':943,'multiline':False]['text':' static ','line_number':961,'multiline':True]['text':' static ','line_number':969,'multiline':True]['text':' |target| must not be a CCW because we need to enter its realm below and','line_number':983,'multiline':False]['text':' CCWs are not associated with a single realm.','line_number':984,'multiline':False]['text':' |obj| and |cx| are generally not same-compartment with |target| here.','line_number':987,'multiline':False]['text':' Both |obj| and |target| must not be CCWs because we need to enter their','line_number':1010,'multiline':False]['text':' realms below and CCWs are not associated with a single realm.','line_number':1011,'multiline':False]['text':' NB: Keep this in sync with XDRObjectLiteral. ','line_number':1093,'multiline':True]['text':' Deep clone any elements.','line_number':1102,'multiline':False]['text':' proto = ','line_number':1110,'multiline':True]['text':' If there are no properties to copy, we're done.','line_number':1148,'multiline':False]['text':' We need to generate a new shape for dst that has dst's proto but all','line_number':1158,'multiline':False]['text':' the property information from src.  Note that we asserted above that','line_number':1159,'multiline':False]['text':' dst's object flags are empty.','line_number':1160,'multiline':False]['text':' NB: Keep this in sync with DeepCloneObjectLiteral. ','line_number':1193,'multiline':True]['text':' Distinguish between objects and array classes.','line_number':1198,'multiline':False]['text':' Recursively copy dense elements.','line_number':1231,'multiline':False]['text':' proto = ','line_number':1238,'multiline':True]['text':' Code the properties in the object.','line_number':1247,'multiline':False]['text':' static ','line_number':1295,'multiline':True]['text':' This object has just been swapped with some other object, and its shape','line_number':1299,'multiline':False]['text':' no longer reflects its allocated size. Correct this information and','line_number':1300,'multiline':False]['text':' fill the slots in with the specified values.','line_number':1301,'multiline':False]['text':' Make sure the shape's numFixedSlots() is correct.','line_number':1305,'multiline':False]['text':' We want to optimize Window/globals and Gecko doesn't require transplanting','line_number':1355,'multiline':False]['text':' them (only the WindowProxy around them). A Window may be a DOMClass, so we','line_number':1356,'multiline':False]['text':' explicitly check if this is a global.','line_number':1357,'multiline':False]['text':' WindowProxy, Wrapper, DeadProxyObject, DOMProxy, and DOMClass (non-global)','line_number':1362,'multiline':False]['text':' types may be swapped. It is hard to detect DOMProxy from shell, so target','line_number':1363,'multiline':False]['text':' proxies in general.','line_number':1364,'multiline':False]['text':' Remove the GCPtrValues we're about to swap from the store buffer, to','line_number':1372,'multiline':False]['text':' ensure we don't trace bogus values.','line_number':1373,'multiline':False]['text':' Reserve space for the expando, private slot and the reserved slots.','line_number':1376,'multiline':False]['text':' |values| contains the expando slot, private slot and the reserved slots.','line_number':1402,'multiline':False]['text':' Note: we allocate external slots iff the proxy had an inline','line_number':1420,'multiline':False]['text':' ProxyValueArray, so at this point reservedSlots points into the','line_number':1421,'multiline':False]['text':' old object and we don't have to free anything.','line_number':1422,'multiline':False]['text':' Use this method with extreme caution. It trades the guts of two objects. ','line_number':1427,'multiline':True]['text':' Ensure swap doesn't cause a finalizer to not be run.','line_number':1430,'multiline':False]['text':' You must have entered the objects' compartment before calling this.','line_number':1435,'multiline':False]['text':' Only certain types of objects are allowed to be swapped. This allows the','line_number':1438,'multiline':False]['text':' JITs to better optimize objects that can never swap.','line_number':1439,'multiline':False]['text':'
   * Neither object may be in the nursery, but ensure we update any embedded
   * nursery pointers in either object.
   ','line_number':1443,'multiline':True]['text':' Do the fundamental swapping of the contents of two objects.','line_number':1457,'multiline':False]['text':' Don't try to swap functions with different sizes.','line_number':1461,'multiline':False]['text':' Watch for oddball objects that have special organizational issues and','line_number':1465,'multiline':False]['text':' can't be swapped.','line_number':1466,'multiline':False]['text':' Don't swap objects that may currently be participating in shape','line_number':1473,'multiline':False]['text':' teleporting optimizations.','line_number':1474,'multiline':False]['text':'','line_number':1475,'multiline':False]['text':' See: ReshapeForProtoMutation, ReshapeForShadowedProp','line_number':1476,'multiline':False]['text':' Swap element associations.','line_number':1490,'multiline':False]['text':' When both objects are the same size, just do a plain swap of their','line_number':1495,'multiline':False]['text':' contents.','line_number':1496,'multiline':False]['text':' Swap slot associations.','line_number':1498,'multiline':False]['text':' Avoid GC in here to avoid confusing the tracing code with our','line_number':1518,'multiline':False]['text':' intermediate state.','line_number':1519,'multiline':False]['text':' When the objects have different sizes, they will have different','line_number':1522,'multiline':False]['text':' numbers of fixed slots before and after the swap, so the slots for','line_number':1523,'multiline':False]['text':' native objects will need to be rearranged.','line_number':1524,'multiline':False]['text':' Remember the original values from the objects.','line_number':1528,'multiline':False]['text':' Do the same for proxies storing ProxyValueArray inline.','line_number':1550,'multiline':False]['text':' Swap the main fields of the objects, whether they are native objects or','line_number':1567,'multiline':False]['text':' proxies.','line_number':1568,'multiline':False]['text':' Preserve the IsUsedAsPrototype flag on the objects.','line_number':1598,'multiline':False]['text':'
   * We need a write barrier here. If |a| was marked and |b| was not, then
   * after the swap, |b|'s guts would never be marked. The write barrier
   * solves this.
   *
   * Normally write barriers happen before the write. However, that's not
   * necessary here because nothing is being destroyed. We're just swapping.
   ','line_number':1610,'multiline':True]['text':' Create the prototype object.','line_number':1634,'multiline':False]['text':'
   * All instances of the class will inherit properties from the prototype
   * object we are about to create (in DefineConstructorAndPrototype), which
   * in turn will inherit from protoProto.
   *
   * If protoProto is null, default to Object.prototype.
   ','line_number':1685,'multiline':True]['text':' To avoid the JIT guarding on each prototype in chain to detect prototype','line_number':1706,'multiline':False]['text':' mutation, we can instead reshape the rest of the proto chain such that a','line_number':1707,'multiline':False]['text':' guard on any of them is sufficient. To avoid excessive reshaping and','line_number':1708,'multiline':False]['text':' invalidation, we apply heuristics to decide when to apply this and when','line_number':1709,'multiline':False]['text':' to require a guard.','line_number':1710,'multiline':False]['text':'','line_number':1711,'multiline':False]['text':' There are two cases:','line_number':1712,'multiline':False]['text':'','line_number':1713,'multiline':False]['text':' (1) The object is not marked IsUsedAsPrototype. This is the common case.','line_number':1714,'multiline':False]['text':'     Because shape implies proto, we rely on the caller changing the','line_number':1715,'multiline':False]['text':'     object's shape. The JIT guards on this object's shape or prototype so','line_number':1716,'multiline':False]['text':'     there's nothing we have to do here for objects on the proto chain.','line_number':1717,'multiline':False]['text':'','line_number':1718,'multiline':False]['text':' (2) The object is marked IsUsedAsPrototype. This implies the object may be','line_number':1719,'multiline':False]['text':'     participating in shape teleporting. To invalidate JIT ICs depending on','line_number':1720,'multiline':False]['text':'     the proto chain being unchanged, set the UncacheableProto shape flag','line_number':1721,'multiline':False]['text':'     for this object and objects on its proto chain.','line_number':1722,'multiline':False]['text':'','line_number':1723,'multiline':False]['text':'     This flag disables future shape teleporting attempts, so next time this','line_number':1724,'multiline':False]['text':'     happens the loop below will be a no-op.','line_number':1725,'multiline':False]['text':'','line_number':1726,'multiline':False]['text':' NOTE: We only handle NativeObjects and don't propagate reshapes through','line_number':1727,'multiline':False]['text':'       any non-native objects on the chain.','line_number':1728,'multiline':False]['text':'','line_number':1729,'multiline':False]['text':' See Also:','line_number':1730,'multiline':False]['text':'  - GeneratePrototypeGuards','line_number':1731,'multiline':False]['text':'  - GeneratePrototypeHoleGuards','line_number':1732,'multiline':False]['text':' Update prototype shapes if needed to invalidate JIT code that is affected','line_number':1754,'multiline':False]['text':' by a prototype mutation.','line_number':1755,'multiline':False]['text':'*
 * Returns the original Object.prototype from the embedding-provided incumbent
 * global.
 *
 * Really, we want the incumbent global itself so we can pass it to other
 * embedding hooks which need it. Specifically, the enqueue promise hook
 * takes an incumbent global so it can set that on the PromiseCallbackJob
 * it creates.
 *
 * The reason for not just returning the global itself is that we'd need to
 * wrap it into the current compartment, and later unwrap it. Unwrapping
 * globals is tricky, though: we might accidentally unwrap through an inner
 * to its outer window and end up with the wrong global. Plain objects don't
 * have this problem, so we use the global's Object.prototype. The code using
 * it - e.g. EnqueuePromiseReactionJob - can then unwrap the object and get
 * its global without fear of unwrapping too far.
 ','line_number':1770,'multiline':True]['text':' The object might be from a different compartment, so wrap it.','line_number':1802,'multiline':False]['text':' Note: The prototype shares its JSClass with instances.','line_number':1816,'multiline':False]['text':' Note: The prototype shares its JSClass with instances.','line_number':1826,'multiline':False]['text':' Note that isNativeConstructor does not imply that we are a standard','line_number':1840,'multiline':False]['text':' constructor, but the converse is true (at least until we start having','line_number':1841,'multiline':False]['text':' self-hosted constructors for standard classes). This lets us avoid a costly','line_number':1842,'multiline':False]['text':' loop for many functions (which, depending on the call site, may be the','line_number':1843,'multiline':False]['text':' common case).','line_number':1844,'multiline':False]['text':' See note above RuntimeLexicalErrorObject.','line_number':1955,'multiline':False]['text':' Treat Debugger environments specially for TDZ checks, as they','line_number':1959,'multiline':False]['text':' look like non-native environments but in fact wrap native','line_number':1960,'multiline':False]['text':' environments.','line_number':1961,'multiline':False]['text':' Assigning to a named lambda callee name is a no-op in sloppy mode.','line_number':1984,'multiline':False]['text':' Fail if we have a custom getter.','line_number':2056,'multiline':False]['text':' Just like GetPropertyPure, but get getter function, without invoking
   * it. ','line_number':2119,'multiline':True]['text':'** ES6 standard internal methods *****************************************','line_number':2208,'multiline':True]['text':' The proxy trap subsystem fully handles prototype-setting for proxies','line_number':2212,'multiline':False]['text':' with dynamic [[Prototype]]s.','line_number':2213,'multiline':False]['text':'
   * ES6 9.1.2 step 3-4 if |obj.[[Prototype]]| has SameValue as |proto| return
   * true. Since the values in question are objects, we can just compare
   * pointers.
   ','line_number':2219,'multiline':True]['text':' Disallow mutation of immutable [[Prototype]]s. ','line_number':2228,'multiline':True]['text':'
   * Disallow mutating the [[Prototype]] on Typed Objects, per the spec.
   ','line_number':2233,'multiline':True]['text':' ES6 9.1.2 step 5 forbids changing [[Prototype]] if not [[Extensible]]. ','line_number':2243,'multiline':True]['text':'
   * ES6 9.1.2 step 6 forbids generating cyclical prototype chains. But we
   * have to do this comparison on the observable WindowProxy, not on the
   * possibly-Window object we're setting the proto on.
   ','line_number':2252,'multiline':True]['text':' If the following assertion fails, there's somewhere else a missing','line_number':2294,'multiline':False]['text':' call to shrinkCapacityToInitializedLength() which needs to be found','line_number':2295,'multiline':False]['text':' and fixed.','line_number':2296,'multiline':False]['text':' Force lazy properties to be resolved.','line_number':2305,'multiline':False]['text':' Prepare the elements. We have to do this before we mark the object','line_number':2311,'multiline':False]['text':' non-extensible; that's fine because these changes are not observable.','line_number':2312,'multiline':False]['text':' Finally, set the NotExtensible flag on the Shape and ObjectElements.','line_number':2316,'multiline':False]['text':'** SpiderMonkey nonstandard internal methods *****************************','line_number':2433,'multiline':True]['text':' Mark an object as having an immutable prototype','line_number':2435,'multiline':False]['text':'','line_number':2436,'multiline':False]['text':' NOTE: This does not correspond to the SetImmutablePrototype ECMAScript','line_number':2437,'multiline':False]['text':'       method.','line_number':2438,'multiline':False]['text':' If this is a global object, resolve the Object class first to ensure the','line_number':2446,'multiline':False]['text':' global's prototype is set to Object.prototype before we mark the global as','line_number':2447,'multiline':False]['text':' having an immutable prototype.','line_number':2448,'multiline':False]['text':' * ','line_number':2488,'multiline':True]['text':' If a property or method is part of an experimental feature that can be','line_number':2494,'multiline':False]['text':' disabled at run-time by a preference, we keep it in the JSFunctionSpec /','line_number':2495,'multiline':False]['text':' JSPropertySpec list, but omit the definition if the preference is off.','line_number':2496,'multiline':False]['text':'** ToPrimitive ***********************************************************','line_number':2551,'multiline':True]['text':'
 * Gets |obj[id]|.  If that value's not callable, returns true and stores an
 * object value in *vp.  If it's callable, calls it with no arguments and |obj|
 * as |this|, returning the result in *vp.
 *
 * This is a mini-abstraction for ES6 draft rev 36 (2015 Mar 17),
 * 7.1.1, second algorithm (OrdinaryToPrimitive), steps 5.a-c.
 ','line_number':2553,'multiline':True]['text':' Avoid recursive death when decompiling in ReportValueError.','line_number':2578,'multiline':False]['text':' Optimize (new String(...)).toString(). ','line_number':2608,'multiline':True]['text':' Optimize new String(...).valueOf(). ','line_number':2634,'multiline':True]['text':' Optimize new Number(...).valueOf(). ','line_number':2643,'multiline':True]['text':' Step numbers refer to the first algorithm listed in ES6 draft rev 36','line_number':2673,'multiline':False]['text':' (2015 Mar 17) 7.1.1 ToPrimitive.','line_number':2674,'multiline':False]['text':' Steps 4-5.','line_number':2679,'multiline':False]['text':' Step 6.','line_number':2686,'multiline':False]['text':' Step 6 of GetMethod. js::Call() below would do this check and throw a','line_number':2688,'multiline':False]['text':' TypeError anyway, but this produces a better error message.','line_number':2689,'multiline':False]['text':' Steps 1-3, 6.a-b.','line_number':2695,'multiline':False]['text':' Steps 6.c-d.','line_number':2706,'multiline':False]['text':' ES6 draft rev 28 (2014 Oct 14) 7.1.14 ','line_number':2717,'multiline':True]['text':' Steps 1-2.','line_number':2722,'multiline':False]['text':' Steps 3-4.','line_number':2728,'multiline':False]['text':' * ','line_number':2732,'multiline':True]['text':' The [[Prototype]] chain might be cyclic.','line_number':2738,'multiline':False]['text':' Like PrimitiveToObject, but returns the JSProtoKey of the prototype that','line_number':2788,'multiline':False]['text':' would be used without actually creating the object.','line_number':2789,'multiline':False]['text':'
 * Invokes the ES5 ToObject algorithm on vp, returning the result. If vp might
 * already be an object, use ToObject. reportScanStack controls how null and
 * undefined errors are reported.
 *
 * Callers must handle the already-object case.
 ','line_number':2816,'multiline':True]['text':' Use the WindowProxy if the global is a Window, as Window must never be','line_number':2888,'multiline':False]['text':' exposed to script.','line_number':2889,'multiline':False]['text':' We should not expose any environments except NSVOs to script. The NSVO is','line_number':2894,'multiline':False]['text':' pretending to be the global object in this case.','line_number':2895,'multiline':False]['text':'** Debugging routines ****************************************************','line_number':2989,'multiline':True]['text':'
 * Routines to print out values during debugging.  These are FRIEND_API to help
 * the debugger find them and to support temporarily hacking js::Dump* calls
 * into other code.
 ','line_number':2993,'multiline':True]['text':' We don't want jsfriendapi.h to depend on GenericPrinter,','line_number':3081,'multiline':False]['text':' so these functions are declared directly in the cpp.','line_number':3082,'multiline':False]['text':' namespace js','line_number':3091,'multiline':False]['text':' For debuggers.','line_number':3331,'multiline':False]['text':' This should only called during live debugging. ','line_number':3360,'multiline':True]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':3431,'multiline':True]['text':' We don't want jsfriendapi.h to depend on GenericPrinter,','line_number':3435,'multiline':False]['text':' so these functions are declared directly in the cpp.','line_number':3436,'multiline':False]['text':' namespace js','line_number':3440,'multiline':False]['text':' * ','line_number':3480,'multiline':True]['text':' Use minimal size object if we are just going to copy the pointer. ','line_number':3492,'multiline':True]['text':'
   * Typed arrays in the nursery may have a lazily allocated buffer, make
   * sure there is room for the array's fixed data when moving the array.
   ','line_number':3505,'multiline':True]['text':' Proxies that are CrossCompartmentWrappers may be nursery allocated.','line_number':3520,'multiline':False]['text':' Inlined typed objects are followed by their data, so make sure we copy','line_number':3525,'multiline':False]['text':' it all over to the new object.','line_number':3526,'multiline':False]['text':' Figure out the size of this object, from the prototype's RttValue.','line_number':3528,'multiline':False]['text':' The objects we are traversing here are all tenured, so we don't need','line_number':3529,'multiline':False]['text':' to check forwarding pointers.','line_number':3530,'multiline':False]['text':' All nursery allocatable non-native objects are handled above.','line_number':3540,'multiline':False]['text':' Other things may be measured in the future if DMD indicates it is','line_number':3556,'multiline':False]['text':' worthwhile.','line_number':3557,'multiline':False]['text':' Do nothing.  But this function is hot, and we win by getting the','line_number':3560,'multiline':False]['text':' common cases out of the way early.  Some stats on the most common','line_number':3561,'multiline':False]['text':' classes, as measured during a vanilla browser session:','line_number':3562,'multiline':False]['text':' - (53.7%, 53.7%): Function','line_number':3563,'multiline':False]['text':' - (18.0%, 71.7%): Object','line_number':3564,'multiline':False]['text':' - (16.9%, 88.6%): Array','line_number':3565,'multiline':False]['text':' - ( 3.9%, 92.5%): Call','line_number':3566,'multiline':False]['text':' - ( 2.8%, 95.3%): RegExp','line_number':3567,'multiline':False]['text':' - ( 1.0%, 96.4%): Proxy','line_number':3568,'multiline':False]['text':' Note that any JSClass that is special cased below likely needs to','line_number':3570,'multiline':False]['text':' specify the JSCLASS_DELAY_METADATA_BUILDER flag, or else we will','line_number':3571,'multiline':False]['text':' probably crash if the object metadata callback attempts to get the','line_number':3572,'multiline':False]['text':' size of the new object (which Debugger code does) before private','line_number':3573,'multiline':False]['text':' slots are initialized.','line_number':3574,'multiline':False]['text':' This must be the last case.','line_number':3598,'multiline':False]['text':' This function doesn't concern itself yet with typed objects (bug 1133593).','line_number':3606,'multiline':False]['text':' Tracing can mutate the target but cannot change the slot count,','line_number':3658,'multiline':False]['text':' but the compiler has no way of knowing this.','line_number':3659,'multiline':False]['text':' Call the trace hook at the end so that during a moving GC the trace hook','line_number':3673,'multiline':False]['text':' will see updated fields and slots.','line_number':3674,'multiline':False]['text':' ES 2016 7.3.20.','line_number':3684,'multiline':False]['text':' Step 1 (implicit).','line_number':3688,'multiline':False]['text':' Fast-path for steps 2 - 8. Applies if all of the following conditions','line_number':3690,'multiline':False]['text':' are met:','line_number':3691,'multiline':False]['text':' - obj.constructor can be retrieved without side-effects.','line_number':3692,'multiline':False]['text':' - obj.constructor[[@@species]] can be retrieved without side-effects.','line_number':3693,'multiline':False]['text':' - obj.constructor[[@@species]] is the builtin's original @@species','line_number':3694,'multiline':False]['text':'   getter.','line_number':3695,'multiline':False]['text':' Step 2.','line_number':3708,'multiline':False]['text':' Step 3.','line_number':3714,'multiline':False]['text':' Step 4.','line_number':3719,'multiline':False]['text':' Step 5.','line_number':3727,'multiline':False]['text':' Step 6.','line_number':3735,'multiline':False]['text':' Step 7.','line_number':3740,'multiline':False]['text':' Step 8.','line_number':3745,'multiline':False]['text':' static ','line_number':3788,'multiline':True]['text':' Classes with a finalizer must specify whether instances will be finalized','line_number':3799,'multiline':False]['text':' on the main thread or in the background, except proxies whose behaviour','line_number':3800,'multiline':False]['text':' depends on the target object.','line_number':3801,'multiline':False]['text':' Non-native classes manage their own data and slots, so numFixedSlots is','line_number':3822,'multiline':False]['text':' always 0. Note that proxy classes can have reserved slots but they're not','line_number':3823,'multiline':False]['text':' included in numFixedSlots.','line_number':3824,'multiline':False]