['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Writable stream writer abstract operations. ','line_number':7,'multiline':True]['text':' MOZ_ASSERT','line_number':11,'multiline':False]['text':' JS_ReportErrorNumberASCII, JS_ReportErrorASCII','line_number':13,'multiline':False]['text':' js::PromiseRejectedWithPendingError','line_number':15,'multiline':False]['text':' js::WritableStream','line_number':16,'multiline':False]['text':' js::WritableStream::controller','line_number':17,'multiline':False]['text':' js::WritableStreamDefaultController{Close,GetDesiredSize}','line_number':18,'multiline':False]['text':' js::WritableStreamDefaultWriter','line_number':19,'multiline':False]['text':' js::WritableStream{Abort,CloseQueuedOrInFlight}','line_number':20,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':21,'multiline':False]['text':' JS::PromiseState','line_number':22,'multiline':False]['text':' JS::Value, JS::{Int32,Null}Value','line_number':23,'multiline':False]['text':' JS::Compartment','line_number':24,'multiline':False]['text':' js::GetAndClearException','line_number':25,'multiline':False]['text':' JSContext','line_number':26,'multiline':False]['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':27,'multiline':False]['text':' js::SetSettledPromiseIsHandled','line_number':29,'multiline':False]['text':' js::ResolveUnwrappedPromiseWithUndefined','line_number':30,'multiline':False]['text':' js::WritableStream::setCloseRequest','line_number':31,'multiline':False]['text':' js::UnwrapStreamFromWriter','line_number':32,'multiline':False]['text':' js::UnwrapAnd{DowncastObject,TypeCheckThis}','line_number':33,'multiline':False]['text':' JSContext::check','line_number':34,'multiline':False]['text':' js::AutoRealm','line_number':35,'multiline':False]['text':'** 4.6. Writable stream writer abstract operations ***********************','line_number':50,'multiline':True]['text':'*
 * Streams spec, 4.6.2.
 * WritableStreamDefaultWriterAbort ( writer, reason )
 ','line_number':52,'multiline':True]['text':' Step 1: Let stream be writer.[[ownerWritableStream]].','line_number':61,'multiline':False]['text':' Step 2: Assert: stream is not undefined.','line_number':62,'multiline':False]['text':' Step 3: Return ! WritableStreamAbort(stream, reason).','line_number':70,'multiline':False]['text':'*
 * Streams spec, 4.6.3.
 * WritableStreamDefaultWriterClose ( writer )
 ','line_number':74,'multiline':True]['text':' Step 1: Let stream be writer.[[ownerWritableStream]].','line_number':80,'multiline':False]['text':' Step 2: Assert: stream is not undefined.','line_number':81,'multiline':False]['text':' Step 3: Let state be stream.[[state]].','line_number':89,'multiline':False]['text':' Step 4: If state is "closed" or "errored", return a promise rejected with a','line_number':90,'multiline':False]['text':'         TypeError exception.','line_number':91,'multiline':False]['text':' Step 5: Assert: state is "writable" or "erroring".','line_number':98,'multiline':False]['text':' Step 6: Assert: ! WritableStreamCloseQueuedOrInFlight(stream) is false.','line_number':101,'multiline':False]['text':' Step 7: Let promise be a new promise.','line_number':104,'multiline':False]['text':' Step 8: Set stream.[[closeRequest]] to promise.','line_number':110,'multiline':False]['text':' Step 9: If stream.[[backpressure]] is true and state is "writable", resolve','line_number':121,'multiline':False]['text':'         writer.[[readyPromise]] with undefined.','line_number':122,'multiline':False]['text':' Step 10: Perform','line_number':130,'multiline':False]['text':'          ! WritableStreamDefaultControllerClose(','line_number':131,'multiline':False]['text':'              stream.[[writableStreamController]]).','line_number':132,'multiline':False]['text':' Step 11: Return promise.','line_number':139,'multiline':False]['text':'*
 * Streams spec.
 * WritableStreamDefaultWriterCloseWithErrorPropagation ( writer )
 ','line_number':143,'multiline':True]['text':' Step 1: Let stream be writer.[[ownerWritableStream]].','line_number':149,'multiline':False]['text':' Step 2: Assert: stream is not undefined.','line_number':150,'multiline':False]['text':' Step 3: Let state be stream.[[state]].','line_number':156,'multiline':False]['text':' Step 4: If ! WritableStreamCloseQueuedOrInFlight(stream) is true or state','line_number':157,'multiline':False]['text':'         is "closed", return a promise resolved with undefined.','line_number':158,'multiline':False]['text':' Step 5: If state is "errored", return a promise rejected with','line_number':164,'multiline':False]['text':'         stream.[[storedError]].','line_number':165,'multiline':False]['text':' Step 6: Assert: state is "writable" or "erroring".','line_number':175,'multiline':False]['text':' Step 7: Return ! WritableStreamDefaultWriterClose(writer).','line_number':178,'multiline':False]['text':' 4.6.{5,6} step 1: If writer.[[<field>]].[[PromiseState]] is "pending",','line_number':197,'multiline':False]['text':'                   reject writer.[[<field>]] with error.','line_number':198,'multiline':False]['text':' 4.6.{5,6} step 2: Otherwise, set writer.[[<field>]] to a promise rejected','line_number':204,'multiline':False]['text':'                   with error.','line_number':205,'multiline':False]['text':' Directly-unobservable rejected promises aren't collapsed like resolved','line_number':220,'multiline':False]['text':' promises, and this promise is created in the current realm, so it's','line_number':221,'multiline':False]['text':' always an actual Promise.','line_number':222,'multiline':False]['text':' 4.6.{5,6} step 3: Set writer.[[<field>]].[[PromiseIsHandled]] to true.','line_number':226,'multiline':False]['text':'*
 * Streams spec, 4.6.5.
 *  WritableStreamDefaultWriterEnsureClosedPromiseRejected( writer, error )
 ','line_number':231,'multiline':True]['text':'*
 * Streams spec, 4.6.6.
 *  WritableStreamDefaultWriterEnsureReadyPromiseRejected( writer, error )
 ','line_number':243,'multiline':True]['text':'*
 * Streams spec, 4.6.7.
 * WritableStreamDefaultWriterGetDesiredSize ( writer )
 ','line_number':255,'multiline':True]['text':' Step 1: Let stream be writer.[[ownerWritableStream]].','line_number':262,'multiline':False]['text':' Step 2: Let state be stream.[[state]].','line_number':269,'multiline':False]['text':' Step 3: If state is "errored" or "erroring", return null.','line_number':270,'multiline':False]['text':' Step 4: If state is "closed", return 0.','line_number':274,'multiline':False]['text':' Step 5: Return','line_number':278,'multiline':False]['text':'         ! WritableStreamDefaultControllerGetDesiredSize(','line_number':279,'multiline':False]['text':'             stream.[[writableStreamController]]).','line_number':280,'multiline':False]['text':'*
 * Streams spec, 4.6.8.
 * WritableStreamDefaultWriterRelease ( writer )
 ','line_number':289,'multiline':True]['text':' Step 1: Let stream be writer.[[ownerWritableStream]].','line_number':295,'multiline':False]['text':' Step 2: Assert: stream is not undefined.','line_number':296,'multiline':False]['text':' Step 3: Assert: stream.[[writer]] is writer.','line_number':304,'multiline':False]['text':' Step 4: Let releasedError be a new TypeError.','line_number':317,'multiline':False]['text':' Step 5: Perform','line_number':325,'multiline':False]['text':'         ! WritableStreamDefaultWriterEnsureReadyPromiseRejected(','line_number':326,'multiline':False]['text':'               writer, releasedError).','line_number':327,'multiline':False]['text':' Step 6: Perform','line_number':333,'multiline':False]['text':'         ! WritableStreamDefaultWriterEnsureClosedPromiseRejected(','line_number':334,'multiline':False]['text':'               writer, releasedError).','line_number':335,'multiline':False]['text':' Step 7: Set stream.[[writer]] to undefined.','line_number':341,'multiline':False]['text':' Step 8: Set writer.[[ownerWritableStream]] to undefined.','line_number':344,'multiline':False]['text':'*
 * Streams spec, 4.6.9.
 * WritableStreamDefaultWriterWrite ( writer, chunk )
 ','line_number':349,'multiline':True]['text':' Step 1: Let stream be writer.[[ownerWritableStream]].','line_number':358,'multiline':False]['text':' Step 2: Assert: stream is not undefined.','line_number':359,'multiline':False]['text':' Step 3: Let controller be stream.[[writableStreamController]].','line_number':367,'multiline':False]['text':' Step 4: Let chunkSize be','line_number':371,'multiline':False]['text':'         ! WritableStreamDefaultControllerGetChunkSize(controller, chunk).','line_number':372,'multiline':False]['text':' Step 5: If stream is not equal to writer.[[ownerWritableStream]], return a','line_number':380,'multiline':False]['text':'         promise rejected with a TypeError exception.','line_number':381,'multiline':False]['text':' (This is just an obscure way of saying "If step 4 caused writer's lock on','line_number':382,'multiline':False]['text':' stream to be released", or concretely, "If writer.[[ownerWritableStream]]','line_number':383,'multiline':False]['text':' is [now, newly] undefined".)','line_number':384,'multiline':False]['text':' Step 6: Let state be stream.[[state]].','line_number':402,'multiline':False]['text':' Step 7: If state is "errored", return a promise rejected with','line_number':403,'multiline':False]['text':'         stream.[[storedError]].','line_number':404,'multiline':False]['text':' Step 8: If ! WritableStreamCloseQueuedOrInFlight(stream) is true or state','line_number':409,'multiline':False]['text':'         is "closed", return a promise rejected with a TypeError exception','line_number':410,'multiline':False]['text':'         indicating that the stream is closing or closed.','line_number':411,'multiline':False]['text':' Step 9: If state is "erroring", return a promise rejected with','line_number':419,'multiline':False]['text':'         stream.[[storedError]].','line_number':420,'multiline':False]['text':' Step 10: Assert: state is "writable".','line_number':425,'multiline':False]['text':' Step 11: Let promise be ! WritableStreamAddWriteRequest(stream).','line_number':428,'multiline':False]['text':' Step 12: Perform','line_number':435,'multiline':False]['text':'          ! WritableStreamDefaultControllerWrite(controller, chunk,','line_number':436,'multiline':False]['text':'                                                 chunkSize).','line_number':437,'multiline':False]['text':' Step 13: Return promise.','line_number':443,'multiline':False]