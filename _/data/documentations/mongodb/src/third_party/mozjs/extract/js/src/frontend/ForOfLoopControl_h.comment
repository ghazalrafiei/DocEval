['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' mozilla::Maybe','line_number':10,'multiline':False]['text':' int32_t, uint32_t','line_number':12,'multiline':False]['text':' CompletionKind','line_number':14,'multiline':False]['text':' NestableControl, LoopControl','line_number':16,'multiline':False]['text':' BytecodeOffset','line_number':17,'multiline':False]['text':' IteratorKind','line_number':18,'multiline':False]['text':' TryEmitter','line_number':19,'multiline':False]['text':' The stack depth of the iterator.','line_number':28,'multiline':False]['text':' for-of loops, when throwing from non-iterator code (i.e. from the body','line_number':31,'multiline':False]['text':' or from evaluating the LHS of the loop condition), need to call','line_number':32,'multiline':False]['text':' IteratorClose.  This is done by enclosing non-iterator code with','line_number':33,'multiline':False]['text':' try-catch and call IteratorClose in `catch` block.','line_number':34,'multiline':False]['text':' If IteratorClose itself throws, we must not re-call IteratorClose. Since','line_number':35,'multiline':False]['text':' non-local jumps like break and return call IteratorClose, whenever a','line_number':36,'multiline':False]['text':' non-local jump is emitted, we must tell catch block not to perform','line_number':37,'multiline':False]['text':' IteratorClose.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':'   for (x of y) {','line_number':40,'multiline':False]['text':'     // Operations for iterator (IteratorNext etc) are outside of','line_number':41,'multiline':False]['text':'     // try-block.','line_number':42,'multiline':False]['text':'     try {','line_number':43,'multiline':False]['text':'       ...','line_number':44,'multiline':False]['text':'       if (...) {','line_number':45,'multiline':False]['text':'         // Before non-local jump, clear iterator on the stack to tell','line_number':46,'multiline':False]['text':'         // catch block not to perform IteratorClose.','line_number':47,'multiline':False]['text':'         tmpIterator = iterator;','line_number':48,'multiline':False]['text':'         iterator = undefined;','line_number':49,'multiline':False]['text':'         IteratorClose(tmpIterator, { break });','line_number':50,'multiline':False]['text':'         break;','line_number':51,'multiline':False]['text':'       }','line_number':52,'multiline':False]['text':'       ...','line_number':53,'multiline':False]['text':'     } catch (e) {','line_number':54,'multiline':False]['text':'       // Just throw again when iterator is cleared by non-local jump.','line_number':55,'multiline':False]['text':'       if (iterator === undefined)','line_number':56,'multiline':False]['text':'         throw e;','line_number':57,'multiline':False]['text':'       IteratorClose(iterator, { throw, e });','line_number':58,'multiline':False]['text':'     }','line_number':59,'multiline':False]['text':'   }','line_number':60,'multiline':False]['text':' Used to track if any yields were emitted between calls to to','line_number':63,'multiline':False]['text':' emitBeginCodeNeedingIteratorClose and emitEndCodeNeedingIteratorClose.','line_number':64,'multiline':False]['text':' namespace frontend ','line_number':94,'multiline':True]['text':' namespace js ','line_number':95,'multiline':True]['text':' frontend_ForOfLoopControl_h ','line_number':97,'multiline':True]