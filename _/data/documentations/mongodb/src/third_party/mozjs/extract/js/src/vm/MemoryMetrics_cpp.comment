['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' static ','line_number':51,'multiline':True]['text':' Use rope's non-copying hash function.','line_number':57,'multiline':False]['text':' tcx ','line_number':78,'multiline':True]['text':' tcx ','line_number':91,'multiline':True]['text':' static ','line_number':101,'multiline':True]['text':' We can't use js::EqualStrings, because that flattens our strings.','line_number':104,'multiline':False]['text':' namespace js','line_number':115,'multiline':False]['text':' tcx ','line_number':128,'multiline':True]['text':' We might truncate |str| even if it's much shorter than 1024 chars, if','line_number':135,'multiline':False]['text':' |str| contains unicode chars.  Since this is just for a memory reporter,','line_number':136,'multiline':False]['text':' we don't care.','line_number':137,'multiline':False]['text':' quote ','line_number':138,'multiline':True]['text':' namespace JS','line_number':173,'multiline':False]['text':' Append a new RealmStats to the vector.','line_number':204,'multiline':False]['text':' CollectRuntimeStats reserves enough space.','line_number':207,'multiline':False]['text':' Append a new RealmStats to the vector.','line_number':225,'multiline':False]['text':' CollectRuntimeStats reserves enough space.','line_number':228,'multiline':False]['text':' Measure the realm object itself, and things hanging off it.','line_number':236,'multiline':False]['text':' The admin space includes (a) the header fields and (b) the padding','line_number':249,'multiline':False]['text':' between the end of the header fields and the first GC thing.','line_number':250,'multiline':False]['text':' We don't call the callback on unused things.  So we compute the','line_number':254,'multiline':False]['text':' unused space like this:  arenaUnused = maxArenaUnused - arenaUsed.','line_number':255,'multiline':False]['text':' We do this by setting arenaUnused to maxArenaUnused here, and then','line_number':256,'multiline':False]['text':' subtracting thingSize for every used cell, in StatsCellCallback().','line_number':257,'multiline':False]['text':' FineGrained is used for normal memory reporting.  CoarseGrained is used by','line_number':261,'multiline':False]['text':' AddSizeOfTab(), which aggregates all the measurements into a handful of','line_number':262,'multiline':False]['text':' high-level numbers, which means that fine-grained reporting would be a waste','line_number':263,'multiline':False]['text':' of effort.','line_number':264,'multiline':False]['text':' Ignore failure -- we just won't record the','line_number':277,'multiline':False]['text':' object/shape/base-shape as notable.','line_number':278,'multiline':False]['text':' Not much to be done on failure.','line_number':296,'multiline':False]['text':' This zeroes all the sizes.','line_number':298,'multiline':False]['text':' Ignore failure -- we just won't record the script source as notable.','line_number':313,'multiline':False]['text':' The various kinds of hashing are expensive, and the results are unused when','line_number':321,'multiline':False]['text':' doing coarse-grained measurements. Skipping them more than doubles the','line_number':322,'multiline':False]['text':' profile speed for complex pages such as gmail.com.','line_number':323,'multiline':False]['text':' This zeroes all the sizes.','line_number':336,'multiline':False]['text':' These classes require special handling due to shared resources which','line_number':345,'multiline':False]['text':' we must be careful not to report twice.','line_number':346,'multiline':False]['text':' The primary use case for anonymization is automated crash submission','line_number':423,'multiline':False]['text':' (to help detect OOM crashes). In that case, we don't want to pay the','line_number':424,'multiline':False]['text':' memory cost required to do notable string detection.','line_number':425,'multiline':False]['text':' Ignore failure -- we just won't record the string as notable.','line_number':431,'multiline':False]['text':' This zeroes all the sizes.','line_number':457,'multiline':False]['text':' No malloc-heap measurements.','line_number':459,'multiline':False]['text':' The code for a script is counted in ExecutableAllocator::sizeOfCode().','line_number':488,'multiline':False]['text':' This zeroes all the sizes.','line_number':495,'multiline':False]['text':' Yes, this is a subtraction:  see StatsArenaCallback() for details.','line_number':526,'multiline':False]['text':' We should only run FindNotableStrings once per ZoneStats object.','line_number':543,'multiline':False]['text':' We're moving this string from a non-notable to a notable bucket, so','line_number':559,'multiline':False]['text':' subtract it out of the non-notable tallies.','line_number':560,'multiline':False]['text':' Release |allStrings| now, rather than waiting for zStats's destruction, to','line_number':563,'multiline':False]['text':' reduce peak memory consumption during reporting.','line_number':564,'multiline':False]['text':' We should only run FindNotableClasses once per ZoneStats object.','line_number':572,'multiline':False]['text':' If this class isn't notable, or if we can't grow the notableStrings','line_number':580,'multiline':False]['text':' vector, skip this string.','line_number':581,'multiline':False]['text':' We're moving this class from a non-notable to a notable bucket, so','line_number':590,'multiline':False]['text':' subtract it out of the non-notable tallies.','line_number':591,'multiline':False]['text':' Release |allClasses| now, rather than waiting for zStats's destruction, to','line_number':594,'multiline':False]['text':' reduce peak memory consumption during reporting.','line_number':595,'multiline':False]['text':' We should only run FindNotableScriptSources once per RuntimeSizes.','line_number':603,'multiline':False]['text':' We're moving this script source from a non-notable to a notable','line_number':620,'multiline':False]['text':' bucket, so subtract its sizes from the non-notable tallies.','line_number':621,'multiline':False]['text':' Release |allScriptSources| now, rather than waiting for zStats's','line_number':624,'multiline':False]['text':' destruction, to reduce peak memory consumption during reporting.','line_number':625,'multiline':False]['text':' Wait for any off-thread parsing to finish, as that currently allocates GC','line_number':633,'multiline':False]['text':' things.','line_number':634,'multiline':False]['text':' Finish any ongoing incremental GC that may change the data we're gathering','line_number':638,'multiline':False]['text':' and ensure that we don't do anything that could start another one.','line_number':639,'multiline':False]['text':' Wait for any background tasks to finish.','line_number':643,'multiline':False]['text':' + 1 for the atoms zone.','line_number':650,'multiline':False]['text':' Take the per-compartment measurements.','line_number':666,'multiline':False]['text':' Take the "explicit/js/runtime/" measurements.','line_number':671,'multiline':False]['text':' We don't look for notable strings for zTotals. So we first sum all the','line_number':681,'multiline':False]['text':' zones' measurements to get the totals. Then we find the notable strings','line_number':682,'multiline':False]['text':' within each zone.','line_number':683,'multiline':False]['text':' As with the zones, we sum all realms first, and then get the','line_number':699,'multiline':False]['text':' notable classes within each zone.','line_number':700,'multiline':False]['text':' Check that the in-arena measurements look ok.','line_number':717,'multiline':False]['text':' |gcHeapUnusedArenas| is the only thing left.  Compute it in terms of','line_number':734,'multiline':False]['text':' all the others.  See the comment in RuntimeStats for explanation.','line_number':735,'multiline':False]['text':' HelperThreadState holds data that is not part of a Runtime. This does','line_number':747,'multiline':False]['text':' not include data is is currently being processed by a HelperThread.','line_number':748,'multiline':False]['text':' Global data used by TraceLogger','line_number':752,'multiline':False]['text':' Take the per-compartment measurements. No need to anonymize because','line_number':845,'multiline':False]['text':' these measurements will be aggregated.','line_number':846,'multiline':False]['text':' anonymize = ','line_number':847,'multiline':True]['text':' No need to anonymize because the results will be aggregated.','line_number':874,'multiline':False]['text':' anonymize = ','line_number':875,'multiline':True]['text':' namespace JS','line_number':897,'multiline':False]