['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2014-2015, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
','line_number':3,'multiline':True]['text':' ures_getByKeyWithFallback','line_number':19,'multiline':False]['text':' U_ICUDATA_BRKITR','line_number':20,'multiline':False]['text':'*
 * Used with sortedInsert()
 ','line_number':49,'multiline':True]['text':'*
 * A UVector which implements a set of strings.
 ','line_number':58,'multiline':True]['text':'*
   * Is this UnicodeSet contained?
   ','line_number':68,'multiline':True]['text':'*
   * Return the ith UnicodeString alias
   ','line_number':75,'multiline':True]['text':'*
   * Adopt the UnicodeString if not already contained.
   * Caller no longer owns the pointer in any case.
   * @return true if adopted successfully, false otherwise (error, or else duplicate)
   ','line_number':81,'multiline':True]['text':'*
   * Add by value.
   * @return true if successfully adopted.
   ','line_number':99,'multiline':True]['text':'*
   * Remove this string.
   * @return true if successfully removed, false otherwise (error, or else it wasn't there)
   ','line_number':111,'multiline':True]['text':'*
 * Virtual, won't be inlined
 ','line_number':121,'multiline':True]['text':' ----------------------------------------------------------- ','line_number':126,'multiline':True]['text':' Filtered Break constants ','line_number':129,'multiline':True]['text':'< partial - need to run through forward trie','line_number':130,'multiline':False]['text':'< exact match - skip this one.','line_number':131,'multiline':False]['text':' '.'','line_number':134,'multiline':False]['text':'*
 * Shared data for SimpleFilteredSentenceBreakIterator
 ','line_number':136,'multiline':True]['text':' These tries own their data arrays.','line_number':162,'multiline':False]['text':' They are shared and must therefore not be modified.','line_number':163,'multiline':False]['text':'  Has ".a" for "a.M."','line_number':164,'multiline':False]['text':'  i.e. ".srM" for Mrs.','line_number':165,'multiline':False]['text':'*
 * Concrete implementation
 ','line_number':171,'multiline':True]['text':' -- subclass interface -- ','line_number':184,'multiline':True]['text':' -- cloning and other subclass stuff -- ','line_number':186,'multiline':True]['text':'stackBuffer','line_number':187,'multiline':True]['text':'BufferSize','line_number':188,'multiline':True]['text':' for now - always deep clone','line_number':190,'multiline':False]['text':' -- text modifying -- ','line_number':198,'multiline':True]['text':' -- other functions that are just delegated -- ','line_number':204,'multiline':True]['text':' -- ITERATION -- ','line_number':208,'multiline':True]['text':' we keep the delegate current, so this should be correct.','line_number':213,'multiline':False]['text':'*
     * Given that the fDelegate has already given its "initial" answer,
     * find the NEXT actual (non-excepted) break.
     * @param n initial position from delegate
     * @return new break position or UBRK_DONE
     ','line_number':222,'multiline':True]['text':'*
     * Given that the fDelegate has already given its "initial" answer,
     * find the PREV actual (non-excepted) break.
     * @param n initial position from delegate
     * @return new break position or UBRK_DONE
     ','line_number':229,'multiline':True]['text':'*
     * set up the UText with the value of the fDelegate.
     * Call this before calling breakExceptionAt. 
     * May be able to avoid excess calls
     ','line_number':236,'multiline':True]['text':'*
     * Is there a match  (exception) at this spot?
     ','line_number':242,'multiline':True]['text':'*
     * Determine if there is an exception at this spot
     * @param n spot to check
     * @return kNoExceptionHere or kExceptionHere
     *','line_number':246,'multiline':True]['text':' loops while 'n' points to an exception.','line_number':286,'multiline':False]['text':' from n..','line_number':287,'multiline':False]['text':'if(debug2) u_printf(" n@ %d\n", n);','line_number':289,'multiline':False]['text':' Assume a space is following the '.'  (so we handle the case:  "Mr. /Brown")','line_number':290,'multiline':False]['text':' TODO: skip a class of chars here??','line_number':291,'multiline':False]['text':' TODO only do this the 1st time?','line_number':292,'multiline':False]['text':'if(debug2) u_printf("skipping prev: |%C| \n", (UChar)uch);','line_number':293,'multiline':False]['text':'if(debug2) u_printf("not skipping prev: |%C| \n", (UChar)uch);','line_number':295,'multiline':False]['text':'if(debug2) u_printf(" -> : |%C| \n", (UChar)uch);','line_number':297,'multiline':False]['text':' Do not modify the shared trie!','line_number':301,'multiline':False]['text':' more to consume backwards','line_number':304,'multiline':False]['text':' remember the best match so far','line_number':306,'multiline':False]['text':'if(debug2) u_printf("rev< /%C/ cont?%d @%d\n", (UChar)uch, r, utext_getNativeIndex(fText.getAlias()));','line_number':313,'multiline':False]['text':'if(bestValue >= 0) {','line_number':317,'multiline':False]['text':'if(debug2) u_printf("rev<+/%C/+end of seq.. r=%d, bestPosn=%d, bestValue=%d\n", (UChar)uch, r, bestPosn, bestValue);','line_number':318,'multiline':False]['text':'}','line_number':319,'multiline':False]['text':'if(debug2) u_printf("rev< /%C/ end of seq.. r=%d, bestPosn=%d, bestValue=%d\n", (UChar)uch, r, bestPosn, bestValue);','line_number':322,'multiline':False]['text':'if(USTRINGTRIE_MATCHES(r)) {  // matched - so, now what?','line_number':324,'multiline':False]['text':'int32_t bestValue = iter.getValue();','line_number':325,'multiline':False]['text':'//if(debug2) u_printf("rev< /%C/ matched, skip..%d  bestValue=%d\n", (UChar)uch, r, bestValue);','line_number':326,'multiline':False]['text':' exact match!','line_number':328,'multiline':False]['text':'if(debug2) u_printf(" exact backward match\n");','line_number':329,'multiline':False]['text':' See if the next is another exception.','line_number':330,'multiline':False]['text':' make sure there's a forward trie','line_number':332,'multiline':False]['text':'if(debug2) u_printf(" partial backward match\n");','line_number':333,'multiline':False]['text':' We matched the "Ph." in "Ph.D." - now we need to run everything through the forwards trie','line_number':334,'multiline':False]['text':' to see if it matches something going forward.','line_number':335,'multiline':False]['text':' hope that's close ..','line_number':337,'multiline':False]['text':'if(debug2) u_printf("Retrying at %d\n", bestPosn);','line_number':338,'multiline':False]['text':' Do not modify the shared trie!','line_number':339,'multiline':False]['text':'if(debug2) u_printf("fwd> /%C/ cont?%d @%d\n", (UChar)uch, rfwd, utext_getNativeIndex(fText.getAlias()));','line_number':344,'multiline':False]['text':'if(debug2) u_printf("fwd> /%C/ == forward match!\n", (UChar)uch);','line_number':347,'multiline':False]['text':' only full matches here, nothing to check','line_number':348,'multiline':False]['text':' skip the next:','line_number':349,'multiline':False]['text':'if(debug2) u_printf("fwd> /%C/ no match.\n", (UChar)uch);','line_number':352,'multiline':False]['text':' no match (no exception) -return the 'underlying' break','line_number':353,'multiline':False]['text':' internal error and/or no forwards trie','line_number':357,'multiline':False]['text':'if(debug2) u_printf("rev< /%C/ .. no match..%d\n", (UChar)uch, r);  // no best match','line_number':360,'multiline':False]['text':' No match - so exit. Not an exception.','line_number':361,'multiline':False]['text':' the workhorse single next.','line_number':365,'multiline':False]['text':' at end  or','line_number':368,'multiline':False]['text':' .. no backwards table loaded == no exceptions','line_number':369,'multiline':False]['text':' OK, do we need to break here?','line_number':372,'multiline':False]['text':' refresh text','line_number':374,'multiline':False]['text':' bail out','line_number':376,'multiline':False]['text':'if(debug2) u_printf("str, native len=%d\n", utext_nativeLength(fText.getAlias()));','line_number':379,'multiline':False]['text':' outer loop runs once per underlying break (from fDelegate).','line_number':380,'multiline':False]['text':' skip this one. Find the next lowerlevel break.','line_number':385,'multiline':False]['text':' at end  or','line_number':398,'multiline':False]['text':' .. no backwards table loaded == no exceptions','line_number':399,'multiline':False]['text':' OK, do we need to break here?','line_number':402,'multiline':False]['text':' refresh text','line_number':404,'multiline':False]['text':' bail out','line_number':406,'multiline':False]['text':'if(debug2) u_printf("str, native len=%d\n", utext_nativeLength(fText.getAlias()));','line_number':408,'multiline':False]['text':' outer loop runs once per underlying break (from fDelegate).','line_number':409,'multiline':False]['text':' skip this one. Find the next lowerlevel break.','line_number':414,'multiline':False]['text':' Don't suppress a break opportunity at the beginning of text.','line_number':433,'multiline':False]['text':' no break to suppress','line_number':448,'multiline':False]['text':' no data = no suppressions','line_number':450,'multiline':False]['text':' Don't suppress a break opportunity at the end of text.','line_number':478,'multiline':False]['text':'*
 * Concrete implementation of builder class.
 ','line_number':483,'multiline':True]['text':' copy the failing status ','line_number':514,'multiline':False]['text':' leaves the builder empty, if you try to use it.','line_number':518,'multiline':False]['text':' copy the failing status ','line_number':522,'multiline':False]['text':' leaves the builder empty, if you try to use it.','line_number':526,'multiline':False]['text':' copy the failing status ','line_number':538,'multiline':False]['text':' leaves the builder empty, if you try to use it.','line_number':542,'multiline':False]['text':' Pick up inherited warning status now ','line_number':546,'multiline':False]['text':' load the string','line_number':551,'multiline':False]['text':'*
 * Jitterbug 2974: MSVC has a bug whereby new X[0] behaves badly.
 * Work around this.
 *
 * Note: "new UnicodeString[subCount]" ends up calling global operator new
 * on MSVC2012 for some reason.
 ','line_number':576,'multiline':True]['text':'  i.e. ".srM" for Mrs.','line_number':609,'multiline':False]['text':'  Has ".a" for "a.M."','line_number':610,'multiline':False]['text':' copy by value','line_number':619,'multiline':False]['text':' default: not partial','line_number':626,'multiline':False]['text':' first pass - find partials.','line_number':629,'multiline':False]['text':' TODO: non-'.' abbreviations','line_number':631,'multiline':False]['text':' is partial.','line_number':634,'multiline':False]['text':' is it unique?','line_number':635,'multiline':False]['text':'UBool otherIsPartial = ((nn+1)!=ustrs[j].length());  // true if ustrs[j] doesn't end at nn','line_number':641,'multiline':False]['text':' hasn't been processed yet','line_number':642,'multiline':False]['text':' the other entry is already in the reverse table.','line_number':646,'multiline':False]['text':' first one - add the prefix to the reverse table.','line_number':654,'multiline':False]['text':' an optimization would be to only add the portion after the '.'','line_number':676,'multiline':False]['text':' for example, for "Ph.D." we store ".hP" in the reverse table. We could just store "D." in the forward,','line_number':677,'multiline':False]['text':' instead of "Ph.D." since we already know the "Ph." part is a match.','line_number':678,'multiline':False]['text':' would need the trie to be able to hold 0-length strings, though.','line_number':679,'multiline':False]['text':' forward','line_number':680,'multiline':False]['text':'ustrs[i].reverse();','line_number':682,'multiline':False]['text':'//if(debug2) u_printf("SUPPRESS- not Added(%d):  /%S/ status=%s\n",partials[i], ustrs[i].getTerminatedBuffer(), u_errorName(status));','line_number':683,'multiline':False]['text':' ----------- Base class implementation','line_number':708,'multiline':False]['text':'#if !UCONFIG_NO_BREAK_ITERATION && !UCONFIG_NO_FILTERED_BREAK_ITERATION','line_number':737,'multiline':False]