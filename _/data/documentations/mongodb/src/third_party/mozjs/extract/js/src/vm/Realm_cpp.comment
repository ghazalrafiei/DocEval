['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::shadow::Realm','line_number':7,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':28,'multiline':False]['text':' Write the code coverage information in a file.','line_number':80,'multiline':False]['text':'
   * As a hack, we clear our timezone cache every time we create a new realm.
   * This ensures that the cache is always relatively fresh, but shouldn't
   * interfere with benchmarks that create tons of date objects (unless they
   * also create tons of iframes, which seems unlikely).
   ','line_number':101,'multiline':True]['text':' Any realm with the trusted principals -- and there can be','line_number':114,'multiline':False]['text':' multiple -- is a system realm.','line_number':115,'multiline':False]['text':' Try to release memory first instead of potentially reporting OOM below.','line_number':137,'multiline':False]['text':' Unfortunately, initialization depends on jitRuntime_ being non-null, so','line_number':148,'multiline':False]['text':' we can't just wait to assign jitRuntime_.','line_number':149,'multiline':False]['text':' JSGC_HASH_TABLE_CHECKS','line_number':191,'multiline':False]['text':' If a wrapped WithEnvironmentObject was passed in, unwrap it, as we may','line_number':230,'multiline':False]['text':' be creating different WithEnvironmentObject wrappers each time.','line_number':231,'multiline':False]['text':' NOTE: The default global |this| value is set to key for compatibility','line_number':238,'multiline':False]['text':' with existing users of the lexical environment cache.','line_number':239,'multiline':False]['text':'  - When used by shared-global JSM loader, |this| must be the','line_number':240,'multiline':False]['text':'    NonSyntacticVariablesObject passed as enclosing.','line_number':241,'multiline':False]['text':'  - When used by SubscriptLoader, |this| must be the target object of','line_number':242,'multiline':False]['text':'    the WithEnvironmentObject wrapper.','line_number':243,'multiline':False]['text':'  - When used by XBL/DOM Events, we execute directly as a function and','line_number':244,'multiline':False]['text':'    do not access the |this| value.','line_number':245,'multiline':False]['text':' See js::GetFunctionThis / js::GetNonSyntacticGlobalThis','line_number':246,'multiline':False]['text':'thisv = ','line_number':248,'multiline':True]['text':' If a wrapped WithEnvironmentObject was passed in, unwrap it as in','line_number':258,'multiline':False]['text':' getOrCreateNonSyntacticLexicalEnvironment.','line_number':259,'multiline':False]['text':' Trace things reachable from the realm's global. Note that these edges','line_number':283,'multiline':False]['text':' must be swept too in case the realm is live but the global is not.','line_number':284,'multiline':False]['text':' Atoms are always tenured.','line_number':292,'multiline':False]['text':' The global is never nursery allocated, so we don't need to','line_number':316,'multiline':False]['text':' trace it when doing a minor collection.','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' If a realm is on-stack, we mark its global so that','line_number':319,'multiline':False]['text':' JSContext::global() remains valid.','line_number':320,'multiline':False]['text':' Nothing below here needs to be treated as a root if we aren't marking','line_number':326,'multiline':False]['text':' this zone for a collection.','line_number':327,'multiline':False]['text':' Mark debug scopes, if present ','line_number':333,'multiline':True]['text':'
   * JIT code increments activeWarmUpCounter for any RegExpShared used by jit
   * code for the lifetime of the JIT script. Thus, we must perform
   * sweeping after clearing jit code.
   ','line_number':397,'multiline':True]['text':' Sweep list of native iterators. ','line_number':412,'multiline':True]['text':' No scripts should have run in this realm. This is used when merging','line_number':478,'multiline':False]['text':' a realm that has been used off thread into another realm and zone.','line_number':479,'multiline':False]['text':' Check to see if this individual realm is recording allocations. Debuggers or','line_number':489,'multiline':False]['text':' runtimes can try and record allocations, so this method can check to see if','line_number':490,'multiline':False]['text':' any initialization is needed.','line_number':491,'multiline':False]['text':' Clear any jitcode in the runtime, which behaves differently depending on','line_number':496,'multiline':False]['text':' whether there is a creation callback.','line_number':497,'multiline':False]['text':' Unlike setAllocationMetadataBuilder, we don't have to discard all JIT','line_number':504,'multiline':False]['text':' code here (code is still valid, just a bit slower because it doesn't do','line_number':505,'multiline':False]['text':' inline GC allocations when a metadata builder is present), but we do want','line_number':506,'multiline':False]['text':' to cancel off-thread Ion compilations to avoid races when Ion calls','line_number':507,'multiline':False]['text':' hasAllocationMetadataBuilder off-thread.','line_number':508,'multiline':False]['text':' Interrupt any running interpreter frame. The scriptCounts are','line_number':590,'multiline':False]['text':' allocated on demand when a script resumes its execution.','line_number':591,'multiline':False]['text':' If code coverage is enabled by any other means, keep it.','line_number':604,'multiline':False]['text':' If we don't have a cx, we didn't change the metadata state, so no need to','line_number':682,'multiline':False]['text':' reset it here.','line_number':683,'multiline':False]['text':' This destructor often runs upon exit from a function that is','line_number':689,'multiline':False]['text':' returning an unrooted pointer to a Cell. The allocation metadata','line_number':690,'multiline':False]['text':' callback often allocates; if it causes a GC, then the Cell pointer','line_number':691,'multiline':False]['text':' being returned won't be traced or relocated.','line_number':692,'multiline':False]['text':'','line_number':693,'multiline':False]['text':' The only extant callbacks are those internal to SpiderMonkey that','line_number':694,'multiline':False]['text':' capture the JS stack. In fact, we're considering removing general','line_number':695,'multiline':False]['text':' callbacks altogther in bug 1236748. Since it's not running arbitrary','line_number':696,'multiline':False]['text':' code, it's adequate to simply suppress GC while we run the callback.','line_number':697,'multiline':False]['text':' Make sure to restore the previous state before setting the object's','line_number':702,'multiline':False]['text':' metadata. SetNewObjectMetadata asserts that the state is not','line_number':703,'multiline':False]['text':' PendingMetadata in order to ensure that metadata callbacks are called','line_number':704,'multiline':False]['text':' in order.','line_number':705,'multiline':False]['text':' The way GC works with compartments is basically incomprehensible.','line_number':716,'multiline':False]['text':' For Realms, what we want is very simple: each Realm has a strong','line_number':717,'multiline':False]['text':' reference to its GlobalObject, and vice versa.','line_number':718,'multiline':False]['text':'','line_number':719,'multiline':False]['text':' Here we simply trace our side of that edge. During GC,','line_number':720,'multiline':False]['text':' GCRuntime::traceRuntimeCommon() marks all other realm roots, for','line_number':721,'multiline':False]['text':' all realms.','line_number':722,'multiline':False]['text':' https://tc39.github.io/ecma262/#sec-getfunctionrealm','line_number':798,'multiline':False]['text':' 7.3.22 GetFunctionRealm ( obj )','line_number':799,'multiline':False]['text':' Step 1.','line_number':812,'multiline':False]['text':' Steps 2 and 3. We use a loop instead of recursion to unwrap bound','line_number':815,'multiline':False]['text':' functions.','line_number':816,'multiline':False]['text':' Step 4.','line_number':827,'multiline':False]['text':' Steps 4.a-b.','line_number':829,'multiline':False]['text':' Step 4.c.','line_number':837,'multiline':False]['text':' Step 5.','line_number':842,'multiline':False]