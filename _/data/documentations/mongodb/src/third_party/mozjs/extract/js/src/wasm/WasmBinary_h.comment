['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' The Opcode compactly and safely represents the primary opcode plus any','line_number':42,'multiline':False]['text':' extension, with convenient predicates and accessors.','line_number':43,'multiline':False]['text':' This struct captures the bytecode offset of a section's payload (so not','line_number':107,'multiline':False]['text':' including the header) and the size of the payload.','line_number':108,'multiline':False]['text':' The Encoder class appends bytes to the Bytes object it is given during','line_number':122,'multiline':False]['text':' construction. The client is responsible for the Bytes's lifetime and must','line_number':123,'multiline':False]['text':' keep the Bytes alive as long as the Encoder is used.','line_number':124,'multiline':False]['text':' Fixed-size encoding operations simply copy the literal bytes (without','line_number':206,'multiline':False]['text':' attempting to align).','line_number':207,'multiline':False]['text':' Variable-length encodings that all use LEB128.','line_number':218,'multiline':False]['text':' The Opcode constructor has asserted that `opcode` is meaningful, so no','line_number':235,'multiline':False]['text':' further correctness checking is necessary here.','line_number':236,'multiline':False]['text':' Fixed-length encodings that allow back-patching.','line_number':247,'multiline':False]['text':' Variable-length encodings that allow back-patching.','line_number':257,'multiline':False]['text':' Byte ranges start with an LEB128 length followed by an arbitrary sequence','line_number':267,'multiline':False]['text':' of bytes. When used for strings, bytes are to be interpreted as utf8.','line_number':268,'multiline':False]['text':' A "section" is a contiguous range of bytes that stores its own size so','line_number':275,'multiline':False]['text':' that it may be trivially skipped without examining the payload. Sections','line_number':276,'multiline':False]['text':' require backpatching since the size of the section is only known at the','line_number':277,'multiline':False]['text':' end while the size's varU32 must be stored at the beginning. Immediately','line_number':278,'multiline':False]['text':' after the section length is the string id of the section.','line_number':279,'multiline':False]['text':' The Decoder class decodes the bytes in the range it is given during','line_number':291,'multiline':False]['text':' construction. The client is responsible for keeping the byte range alive as','line_number':292,'multiline':False]['text':' long as the Decoder is used.','line_number':293,'multiline':False]['text':' These convenience functions use currentOffset() as the errorOffset.','line_number':417,'multiline':False]['text':' Report an error at the given offset (relative to the whole module).','line_number':422,'multiline':False]['text':' pos must be a value previously returned from currentPosition.','line_number':443,'multiline':False]['text':' Peek at the next byte, if it exists, without advancing the position.','line_number':450,'multiline':False]['text':' Fixed-size encoding operations simply copy the literal bytes (without','line_number':460,'multiline':False]['text':' attempting to align).','line_number':461,'multiline':False]['text':' Variable-length encodings that all use LEB128.','line_number':478,'multiline':False]['text':' Value and reference types','line_number':489,'multiline':False]['text':' Instruction opcode','line_number':525,'multiline':False]['text':' Instruction immediates for constant instructions','line_number':529,'multiline':False]['text':' See writeBytes comment.','line_number':545,'multiline':False]['text':' See "section" description in Encoder.','line_number':559,'multiline':False]['text':' Custom sections do not cause validation errors unless the error is in','line_number':569,'multiline':False]['text':' the section header itself.','line_number':570,'multiline':False]['text':' The Name section has its own optional subsections.','line_number':590,'multiline':False]['text':' The infallible "unchecked" decoding functions can be used when we are','line_number':597,'multiline':False]['text':' sure that the bytes are well-formed (by construction or due to previous','line_number':598,'multiline':False]['text':' validation).','line_number':599,'multiline':False]['text':' Value and reference types','line_number':643,'multiline':False]['text':' Instruction opcode','line_number':891,'multiline':False]['text':' Instruction immediates for constant instructions','line_number':906,'multiline':False]['text':' namespace wasm','line_number':968,'multiline':False]['text':' namespace js','line_number':969,'multiline':False]['text':' namespace wasm_binary_h','line_number':971,'multiline':False]