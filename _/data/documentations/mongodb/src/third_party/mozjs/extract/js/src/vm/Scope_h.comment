['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT, MOZ_ASSERT_IF','line_number':10,'multiline':False]['text':' MOZ_IMPLICIT, MOZ_INIT_OUTSIDE_CTOR, MOZ_STACK_CLASS','line_number':11,'multiline':False]['text':' mozilla::AssertedCast','line_number':12,'multiline':False]['text':' mozilla::Maybe','line_number':13,'multiline':False]['text':' mozilla::MallocSizeOf','line_number':14,'multiline':False]['text':' mozilla::Span','line_number':15,'multiline':False]['text':' std::fill_n','line_number':17,'multiline':False]['text':' size_t','line_number':18,'multiline':False]['text':' uint8_t, uint16_t, uint32_t, uintptr_t','line_number':19,'multiline':False]['text':' std::is_same_v, std::is_base_of_v','line_number':20,'multiline':False]['text':' ModuleObject, HandleModuleObject','line_number':22,'multiline':False]['text':' frontend::TaggedParserAtomIndex','line_number':23,'multiline':False]['text':' AllowGC','line_number':24,'multiline':False]['text':' HeapPtr','line_number':25,'multiline':False]['text':' TenuredCellWithNonGCPointer','line_number':26,'multiline':False]['text':' MaybeRooted','line_number':27,'multiline':False]['text':' HandleScope, HandleShape, MutableHandleShape','line_number':28,'multiline':False]['text':' GCPolicy, IgnoreGCPolicy','line_number':29,'multiline':False]['text':' CellFlagBitsReservedForGC','line_number':30,'multiline':False]['text':' Handle, MutableHandle','line_number':31,'multiline':False]['text':' JS::TraceKind','line_number':32,'multiline':False]['text':' HandleFunction','line_number':33,'multiline':False]['text':' ubi::*','line_number':34,'multiline':False]['text':' UniquePtr','line_number':35,'multiline':False]['text':' AlwaysPoison, JS_SCOPE_DATA_TRAILING_NAMES_PATTERN, MemCheckKind','line_number':36,'multiline':False]['text':' LOCALNO_LIMIT, ENVCOORD_SLOT_LIMIT','line_number':37,'multiline':False]['text':' JSFunction','line_number':38,'multiline':False]['text':' ScopeKind','line_number':39,'multiline':False]['text':' Shape','line_number':40,'multiline':False]['text':' XDRResult, XDRState','line_number':41,'multiline':False]['text':' WasmInstanceObject','line_number':42,'multiline':False]['text':' namespace JS','line_number':53,'multiline':False]['text':' namespace frontend','line_number':64,'multiline':False]['text':' A JSAtom* with its low bit used as a tag for the:','line_number':103,'multiline':False]['text':'  * whether it is closed over (i.e., exists in the environment shape)','line_number':104,'multiline':False]['text':'  * whether it is a top-level function binding in global or eval scope,','line_number':105,'multiline':False]['text':'    instead of var binding (both are in the same range in Scope data)','line_number':106,'multiline':False]['text':' TODO: We should reuse this bit for let vs class distinction to','line_number':110,'multiline':False]['text':'       show the better redeclaration error message (bug 1428672).','line_number':111,'multiline':False]['text':' For fromXDR.','line_number':124,'multiline':False]['text':' This method should be called only for binding names in `vars` range in','line_number':148,'multiline':False]['text':' BindingIter.','line_number':149,'multiline':False]['text':' TaggedParserAtomIndex's tags shouldn't overlap with flags.','line_number':178,'multiline':False]['text':' This method should be called only for binding names in `vars` range in','line_number':209,'multiline':False]['text':' BindingIter.','line_number':210,'multiline':False]['text':'*
 * Base class for scope {Runtime,Parser}Data classes to inherit from.
 *
 * `js::Scope` stores a pointer to RuntimeData classes in their first word, so
 * they must be suitably aligned to allow storing GC flags in the low bits.
 ','line_number':218,'multiline':True]['text':' The length of names after specialized ScopeData subclasses.','line_number':229,'multiline':False]['text':' frontend::TaggedParserAtomIndex doesn't require poison value.','line_number':288,'multiline':False]['text':' Fill with null value instead.','line_number':289,'multiline':False]['text':'','line_number':304,'multiline':False]['text':' Allow using is<T> and as<T> on Rooted<Scope*> and Handle<Scope*>.','line_number':305,'multiline':False]['text':'','line_number':306,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' The base class of all Scopes.','line_number':320,'multiline':False]['text':'','line_number':321,'multiline':False]['text':' The raw data pointer, stored in the cell header.','line_number':328,'multiline':False]['text':' The kind determines data_.','line_number':332,'multiline':False]['text':' If there are any aliased bindings, the shape for the','line_number':335,'multiline':False]['text':' EnvironmentObject. Otherwise nullptr.','line_number':336,'multiline':False]['text':' The enclosing scope or nullptr.','line_number':339,'multiline':False]['text':' If there's a shape, an environment must be created for this scope.','line_number':418,'multiline':False]['text':' defined(DEBUG) || defined(JS_JITSPEW) ','line_number':462,'multiline':True]['text':'','line_number':471,'multiline':False]['text':' A useful typedef for selecting between a gc-aware wrappers','line_number':472,'multiline':False]['text':' around pointers to BaseScopeData-derived types, and around raw','line_number':473,'multiline':False]['text':' pointer wrappers around BaseParserScopeData-derived types.','line_number':474,'multiline':False]['text':'','line_number':475,'multiline':False]['text':' Binding names are stored from `this+1`.','line_number':485,'multiline':False]['text':' Make sure the class aligns the binding name size.','line_number':486,'multiline':False]['text':' RuntimeScopeData has 2 requirements:','line_number':497,'multiline':False]['text':'   * It aligns with `BindingName`, that is stored after `this+1`','line_number':498,'multiline':False]['text':'   * It aligns with ScopeDataAlignBytes, in order to put it in the first','line_number':499,'multiline':False]['text':'     word of `js::Scope`','line_number':500,'multiline':False]['text':'','line_number':513,'multiline':False]['text':' A lexical scope that holds let and const bindings. There are 4 kinds of','line_number':514,'multiline':False]['text':' LexicalScopes.','line_number':515,'multiline':False]['text':'','line_number':516,'multiline':False]['text':' Lexical','line_number':517,'multiline':False]['text':'   A plain lexical scope.','line_number':518,'multiline':False]['text':'','line_number':519,'multiline':False]['text':' SimpleCatch','line_number':520,'multiline':False]['text':'   Holds the single catch parameter of a catch block.','line_number':521,'multiline':False]['text':'','line_number':522,'multiline':False]['text':' Catch','line_number':523,'multiline':False]['text':'   Holds the catch parameters (and only the catch parameters) of a catch','line_number':524,'multiline':False]['text':'   block.','line_number':525,'multiline':False]['text':'','line_number':526,'multiline':False]['text':' NamedLambda','line_number':527,'multiline':False]['text':' StrictNamedLambda','line_number':528,'multiline':False]['text':'   Holds the single name of the callee for a named lambda expression.','line_number':529,'multiline':False]['text':'','line_number':530,'multiline':False]['text':' All kinds of LexicalScopes correspond to LexicalEnvironmentObjects on the','line_number':531,'multiline':False]['text':' environment chain.','line_number':532,'multiline':False]['text':'','line_number':533,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':542,'multiline':False]['text':' scope.','line_number':543,'multiline':False]['text':' Bindings are sorted by kind in both frames and environments.','line_number':546,'multiline':False]['text':'','line_number':547,'multiline':False]['text':'   lets - [0, constStart)','line_number':548,'multiline':False]['text':' consts - [constStart, length)','line_number':549,'multiline':False]['text':' Returns an empty shape for extensible global and non-syntactic lexical','line_number':587,'multiline':False]['text':' scopes.','line_number':588,'multiline':False]['text':' The body scope of a JS class, containing only synthetic bindings for private','line_number':600,'multiline':False]['text':' class members. (The binding for the class name, `C` in the example below, is','line_number':601,'multiline':False]['text':' in another scope, a `LexicalScope`, that encloses the `ClassBodyScope`.)','line_number':602,'multiline':False]['text':' Example:','line_number':603,'multiline':False]['text':'','line_number':604,'multiline':False]['text':'     class C {','line_number':605,'multiline':False]['text':'       #f = 0;','line_number':606,'multiline':False]['text':'       #m() {','line_number':607,'multiline':False]['text':'         return this.#f++;','line_number':608,'multiline':False]['text':'       }','line_number':609,'multiline':False]['text':'     }','line_number':610,'multiline':False]['text':'','line_number':611,'multiline':False]['text':' This class has a ClassBodyScope with four synthetic bindings:','line_number':612,'multiline':False]['text':' - `#f` (private name)','line_number':613,'multiline':False]['text':' - `#m` (private name)','line_number':614,'multiline':False]['text':' - `#m.method` (function object)','line_number':615,'multiline':False]['text':' - `.privateBrand` (the class's private brand)','line_number':616,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':628,'multiline':False]['text':' scope.','line_number':629,'multiline':False]['text':' Bindings are sorted by kind in both frames and environments.','line_number':632,'multiline':False]['text':'','line_number':633,'multiline':False]['text':'     synthetic - [0, privateMethodStart)','line_number':634,'multiline':False]['text':' privateMethod - [privateMethodStart, length)','line_number':635,'multiline':False]['text':' Returns an empty shape for extensible global and non-syntactic lexical','line_number':673,'multiline':False]['text':' scopes.','line_number':674,'multiline':False]['text':'','line_number':678,'multiline':False]['text':' Scope corresponding to a function. Holds formal parameter names, special','line_number':679,'multiline':False]['text':' internal names (see FunctionScope::isSpecialName), and, if the function','line_number':680,'multiline':False]['text':' parameters contain no expressions that might possibly be evaluated, the','line_number':681,'multiline':False]['text':' function's var bindings. For example, in these functions, the FunctionScope','line_number':682,'multiline':False]['text':' will store a/b/c bindings but not d/e/f bindings:','line_number':683,'multiline':False]['text':'','line_number':684,'multiline':False]['text':'   function f1(a, b) {','line_number':685,'multiline':False]['text':'     var c;','line_number':686,'multiline':False]['text':'     let e;','line_number':687,'multiline':False]['text':'     const f = 3;','line_number':688,'multiline':False]['text':'   }','line_number':689,'multiline':False]['text':'   function f2([a], b = 4, ...c) {','line_number':690,'multiline':False]['text':'     var d, e, f; // stored in VarScope','line_number':691,'multiline':False]['text':'   }','line_number':692,'multiline':False]['text':'','line_number':693,'multiline':False]['text':' Corresponds to CallObject on environment chain.','line_number':694,'multiline':False]['text':'','line_number':695,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':706,'multiline':False]['text':' scope.','line_number':707,'multiline':False]['text':' Flag bits.','line_number':710,'multiline':False]['text':' This uses uint32_t in order to make this struct packed.','line_number':711,'multiline':False]['text':' If parameter expressions are present, parameters act like lexical','line_number':714,'multiline':False]['text':' bindings.','line_number':715,'multiline':False]['text':' Bindings are sorted by kind in both frames and environments.','line_number':718,'multiline':False]['text':'','line_number':719,'multiline':False]['text':' Positional formal parameter names are those that are not','line_number':720,'multiline':False]['text':' destructured. They may be referred to by argument slots if','line_number':721,'multiline':False]['text':' !script()->hasParameterExprs().','line_number':722,'multiline':False]['text':'','line_number':723,'multiline':False]['text':' An argument slot that needs to be skipped due to being destructured','line_number':724,'multiline':False]['text':' or having defaults will have a nullptr name in the name array to','line_number':725,'multiline':False]['text':' advance the argument slot.','line_number':726,'multiline':False]['text':'','line_number':727,'multiline':False]['text':' Rest parameter binding is also included in positional formals.','line_number':728,'multiline':False]['text':' This also becomes nullptr if destructuring.','line_number':729,'multiline':False]['text':'','line_number':730,'multiline':False]['text':' The number of positional formals is equal to function.length if','line_number':731,'multiline':False]['text':' there's no rest, function.length+1 otherwise.','line_number':732,'multiline':False]['text':'','line_number':733,'multiline':False]['text':' Destructuring parameters and destructuring rest are included in','line_number':734,'multiline':False]['text':' "other formals" below.','line_number':735,'multiline':False]['text':'','line_number':736,'multiline':False]['text':' "vars" contains the following:','line_number':737,'multiline':False]['text':'   * function's top level vars if !script()->hasParameterExprs()','line_number':738,'multiline':False]['text':'   * special internal names (arguments, .this, .generator) if','line_number':739,'multiline':False]['text':'     they're used.','line_number':740,'multiline':False]['text':'','line_number':741,'multiline':False]['text':' positional formals - [0, nonPositionalFormalStart)','line_number':742,'multiline':False]['text':'      other formals - [nonPositionalParamStart, varStart)','line_number':743,'multiline':False]['text':'               vars - [varStart, length)','line_number':744,'multiline':False]['text':' The canonical function of the scope, as during a scope walk we','line_number':755,'multiline':False]['text':' often query properties of the JSFunction (e.g., is the function an','line_number':756,'multiline':False]['text':' arrow).','line_number':757,'multiline':False]['text':'','line_number':821,'multiline':False]['text':' Scope holding only vars. There is a single kind of VarScopes.','line_number':822,'multiline':False]['text':'','line_number':823,'multiline':False]['text':' FunctionBodyVar','line_number':824,'multiline':False]['text':'   Corresponds to the extra var scope present in functions with parameter','line_number':825,'multiline':False]['text':'   expressions. See examples in comment above FunctionScope.','line_number':826,'multiline':False]['text':'','line_number':827,'multiline':False]['text':' Corresponds to VarEnvironmentObject on environment chain.','line_number':828,'multiline':False]['text':'','line_number':829,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':838,'multiline':False]['text':' scope.','line_number':839,'multiline':False]['text':' All bindings are vars.','line_number':842,'multiline':False]['text':'','line_number':843,'multiline':False]['text':'            vars - [0, length)','line_number':844,'multiline':False]['text':'','line_number':886,'multiline':False]['text':' Scope corresponding to both the global object scope and the global lexical','line_number':887,'multiline':False]['text':' scope.','line_number':888,'multiline':False]['text':'','line_number':889,'multiline':False]['text':' Both are extensible and are singletons across <script> tags, so these','line_number':890,'multiline':False]['text':' scopes are a fragment of the names in global scope. In other words, two','line_number':891,'multiline':False]['text':' global scripts may have two different GlobalScopes despite having the same','line_number':892,'multiline':False]['text':' GlobalObject.','line_number':893,'multiline':False]['text':'','line_number':894,'multiline':False]['text':' There are 2 kinds of GlobalScopes.','line_number':895,'multiline':False]['text':'','line_number':896,'multiline':False]['text':' Global','line_number':897,'multiline':False]['text':'   Corresponds to a GlobalObject and its GlobalLexicalEnvironmentObject on','line_number':898,'multiline':False]['text':'   the environment chain.','line_number':899,'multiline':False]['text':'','line_number':900,'multiline':False]['text':' NonSyntactic','line_number':901,'multiline':False]['text':'   Corresponds to a non-GlobalObject created by the embedding on the','line_number':902,'multiline':False]['text':'   environment chain. This distinction is important for optimizations.','line_number':903,'multiline':False]['text':'','line_number':904,'multiline':False]['text':' Bindings are sorted by kind.','line_number':912,'multiline':False]['text':' `vars` includes top-level functions which is distinguished by a bit','line_number':913,'multiline':False]['text':' on the BindingName.','line_number':914,'multiline':False]['text':'','line_number':915,'multiline':False]['text':'            vars - [0, letStart)','line_number':916,'multiline':False]['text':'            lets - [letStart, constStart)','line_number':917,'multiline':False]['text':'          consts - [constStart, length)','line_number':918,'multiline':False]['text':'','line_number':966,'multiline':False]['text':' Scope of a 'with' statement. Has no bindings.','line_number':967,'multiline':False]['text':'','line_number':968,'multiline':False]['text':' Corresponds to a WithEnvironmentObject on the environment chain.','line_number':969,'multiline':False]['text':'','line_number':983,'multiline':False]['text':' Scope of an eval. Holds var bindings. There are 2 kinds of EvalScopes.','line_number':984,'multiline':False]['text':'','line_number':985,'multiline':False]['text':' StrictEval','line_number':986,'multiline':False]['text':'   A strict eval. Corresponds to a VarEnvironmentObject, where its var','line_number':987,'multiline':False]['text':'   bindings lives.','line_number':988,'multiline':False]['text':'','line_number':989,'multiline':False]['text':' Eval','line_number':990,'multiline':False]['text':'   A sloppy eval. This is an empty scope, used only in the frontend, to','line_number':991,'multiline':False]['text':'   detect redeclaration errors. It has no Environment. Any `var`s declared','line_number':992,'multiline':False]['text':'   in the eval code are bound on the nearest enclosing var environment.','line_number':993,'multiline':False]['text':'','line_number':994,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':1003,'multiline':False]['text':' scope.','line_number':1004,'multiline':False]['text':' All bindings in an eval script are 'var' bindings. The implicit','line_number':1007,'multiline':False]['text':' lexical scope around the eval is present regardless of strictness','line_number':1008,'multiline':False]['text':' and is its own LexicalScope.','line_number':1009,'multiline':False]['text':' `vars` includes top-level functions which is distinguished by a bit','line_number':1010,'multiline':False]['text':' on the BindingName.','line_number':1011,'multiline':False]['text':'','line_number':1012,'multiline':False]['text':'            vars - [0, length)','line_number':1013,'multiline':False]['text':' Starting a scope, the nearest var scope that a direct eval can','line_number':1046,'multiline':False]['text':' introduce vars on.','line_number':1047,'multiline':False]['text':'','line_number':1069,'multiline':False]['text':' Scope corresponding to the toplevel script in an ES module.','line_number':1070,'multiline':False]['text':'','line_number':1071,'multiline':False]['text':' Like GlobalScopes, these scopes contain both vars and lexical bindings, as','line_number':1072,'multiline':False]['text':' the treating of imports and exports requires putting them in one scope.','line_number':1073,'multiline':False]['text':'','line_number':1074,'multiline':False]['text':' Corresponds to a ModuleEnvironmentObject on the environment chain.','line_number':1075,'multiline':False]['text':'','line_number':1076,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':1087,'multiline':False]['text':' scope.','line_number':1088,'multiline':False]['text':' Bindings are sorted by kind.','line_number':1091,'multiline':False]['text':'','line_number':1092,'multiline':False]['text':' imports - [0, varStart)','line_number':1093,'multiline':False]['text':'    vars - [varStart, letStart)','line_number':1094,'multiline':False]['text':'    lets - [letStart, constStart)','line_number':1095,'multiline':False]['text':'  consts - [constStart, length)','line_number':1096,'multiline':False]['text':' The module of the scope.','line_number':1105,'multiline':False]['text':' Off-thread compilation needs to calculate environmentChainLength for','line_number':1148,'multiline':False]['text':' an emptyGlobalScope where the global may not be available.','line_number':1149,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':1162,'multiline':False]['text':' scope.','line_number':1163,'multiline':False]['text':' Bindings list the WASM memories and globals.','line_number':1166,'multiline':False]['text':'','line_number':1167,'multiline':False]['text':' memories - [0, globalsStart)','line_number':1168,'multiline':False]['text':'  globals - [globalsStart, length)','line_number':1169,'multiline':False]['text':' The wasm instance of the scope.','line_number':1176,'multiline':False]['text':' Scope corresponding to the wasm function. A WasmFunctionScope is used by','line_number':1211,'multiline':False]['text':' Debugger only, and not for wasm execution.','line_number':1212,'multiline':False]['text':'','line_number':1213,'multiline':False]['text':' Frame slots [0, nextFrameSlot) are live when this is the innermost','line_number':1223,'multiline':False]['text':' scope.','line_number':1224,'multiline':False]['text':' Bindings are the local variable names.','line_number':1227,'multiline':False]['text':'','line_number':1228,'multiline':False]['text':'    vars - [0, length)','line_number':1229,'multiline':False]['text':' With scopes do not have data.','line_number':1272,'multiline':False]['text':'','line_number':1295,'multiline':False]['text':' An iterator for a Scope's bindings. This is the source of truth for frame','line_number':1296,'multiline':False]['text':' and environment object layout.','line_number':1297,'multiline':False]['text':'','line_number':1298,'multiline':False]['text':' It may be placed in GC containers; for example:','line_number':1299,'multiline':False]['text':'','line_number':1300,'multiline':False]['text':'   for (Rooted<BindingIter> bi(cx, BindingIter(scope)); bi; bi++) {','line_number':1301,'multiline':False]['text':'     use(bi);','line_number':1302,'multiline':False]['text':'     SomeMayGCOperation();','line_number':1303,'multiline':False]['text':'     use(bi);','line_number':1304,'multiline':False]['text':'   }','line_number':1305,'multiline':False]['text':'','line_number':1306,'multiline':False]['text':' Bindings are sorted by kind. Because different Scopes have differently','line_number':1310,'multiline':False]['text':' laid out {Runtime,Parser}Data for packing, BindingIter must handle all','line_number':1311,'multiline':False]['text':' binding kinds.','line_number':1312,'multiline':False]['text':'','line_number':1313,'multiline':False]['text':' Kind ranges:','line_number':1314,'multiline':False]['text':'','line_number':1315,'multiline':False]['text':'            imports - [0, positionalFormalStart)','line_number':1316,'multiline':False]['text':' positional formals - [positionalFormalStart, nonPositionalFormalStart)','line_number':1317,'multiline':False]['text':'      other formals - [nonPositionalParamStart, varStart)','line_number':1318,'multiline':False]['text':'               vars - [varStart, letStart)','line_number':1319,'multiline':False]['text':'               lets - [letStart, constStart)','line_number':1320,'multiline':False]['text':'             consts - [constStart, syntheticStart)','line_number':1321,'multiline':False]['text':'          synthetic - [syntheticStart, privateMethodStart)','line_number':1322,'multiline':False]['text':'    private methods = [privateMethodStart, length)','line_number':1323,'multiline':False]['text':'','line_number':1324,'multiline':False]['text':' Access method when not closed over:','line_number':1325,'multiline':False]['text':'','line_number':1326,'multiline':False]['text':'            imports - name','line_number':1327,'multiline':False]['text':' positional formals - argument slot','line_number':1328,'multiline':False]['text':'      other formals - frame slot','line_number':1329,'multiline':False]['text':'               vars - frame slot','line_number':1330,'multiline':False]['text':'               lets - frame slot','line_number':1331,'multiline':False]['text':'             consts - frame slot','line_number':1332,'multiline':False]['text':'          synthetic - frame slot','line_number':1333,'multiline':False]['text':'    private methods - frame slot','line_number':1334,'multiline':False]['text':'','line_number':1335,'multiline':False]['text':' Access method when closed over:','line_number':1336,'multiline':False]['text':'','line_number':1337,'multiline':False]['text':'            imports - name','line_number':1338,'multiline':False]['text':' positional formals - environment slot or name','line_number':1339,'multiline':False]['text':'      other formals - environment slot or name','line_number':1340,'multiline':False]['text':'               vars - environment slot or name','line_number':1341,'multiline':False]['text':'               lets - environment slot or name','line_number':1342,'multiline':False]['text':'             consts - environment slot or name','line_number':1343,'multiline':False]['text':'          synthetic - environment slot or name','line_number':1344,'multiline':False]['text':'    private methods - environment slot or name','line_number':1345,'multiline':False]['text':' See comment in settle below.','line_number':1363,'multiline':False]['text':' Truly I hate named lambdas.','line_number':1367,'multiline':False]['text':' Imports must not be given known slots. They are','line_number':1437,'multiline':False]['text':' indirect bindings.','line_number':1438,'multiline':False]['text':' Usually positional formal parameters don't have frame','line_number':1443,'multiline':False]['text':' slots, except when there are parameter expressions, in','line_number':1444,'multiline':False]['text':' which case they act like lets.','line_number':1445,'multiline':False]['text':' When the parameter list has expressions, the parameters act','line_number':1567,'multiline':False]['text':' like lexical bindings and have TDZ.','line_number':1568,'multiline':False]['text':'','line_number':1684,'multiline':False]['text':' A refinement BindingIter that only iterates over positional formal','line_number':1685,'multiline':False]['text':' parameters of a function.','line_number':1686,'multiline':False]['text':'','line_number':1687,'multiline':False]['text':'','line_number':1707,'multiline':False]['text':' Iterator for walking the scope chain.','line_number':1708,'multiline':False]['text':'','line_number':1709,'multiline':False]['text':' It may be placed in GC containers; for example:','line_number':1710,'multiline':False]['text':'','line_number':1711,'multiline':False]['text':'   for (Rooted<ScopeIter> si(cx, ScopeIter(scope)); si; si++) {','line_number':1712,'multiline':False]['text':'     use(si);','line_number':1713,'multiline':False]['text':'     SomeMayGCOperation();','line_number':1714,'multiline':False]['text':'     use(si);','line_number':1715,'multiline':False]['text':'   }','line_number':1716,'multiline':False]['text':'','line_number':1717,'multiline':False]['text':' Returns the shape of the environment if it is known. It is possible to','line_number':1747,'multiline':False]['text':' hasSyntacticEnvironment and to have no known shape, e.g., eval.','line_number':1748,'multiline':False]['text':' Returns whether this scope has a syntactic environment (i.e., an','line_number':1751,'multiline':False]['text':' Environment that isn't a non-syntactic With or NonSyntacticVariables)','line_number':1752,'multiline':False]['text':' on the environment chain.','line_number':1753,'multiline':False]['text':'','line_number':1763,'multiline':False]['text':' Specializations of Rooted containers for the iterators.','line_number':1764,'multiline':False]['text':'','line_number':1765,'multiline':False]['text':' FunctionScope','line_number':1842,'multiline':False]['text':' VarScope','line_number':1846,'multiline':False]['text':' LexicalScope','line_number':1850,'multiline':False]['text':' ClassBodyScope','line_number':1859,'multiline':False]['text':' EvalScope','line_number':1863,'multiline':False]['text':' GlobalScope','line_number':1868,'multiline':False]['text':' ModuleScope','line_number':1873,'multiline':False]['text':' WasmInstanceScope','line_number':1877,'multiline':False]['text':' WasmFunctionScope','line_number':1881,'multiline':False]['text':' WithScope doesn't have ScopeData.','line_number':1885,'multiline':False]['text':' namespace js','line_number':1909,'multiline':False]['text':' namespace ubi','line_number':1958,'multiline':False]['text':' namespace JS','line_number':1959,'multiline':False]['text':' vm_Scope_h','line_number':1961,'multiline':False]