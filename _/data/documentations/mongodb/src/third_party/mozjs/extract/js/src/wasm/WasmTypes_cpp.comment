['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' JSMSG_*','line_number':27,'multiline':False]['text':' js:WarnNumberASCII','line_number':31,'multiline':False]['text':' We have only tested huge memory on x64 and arm64.','line_number':49,'multiline':False]['text':' All plausible targets must be able to do at least IEEE754 double','line_number':57,'multiline':False]['text':' loads/stores, hence the lower limit of 8.  Some Intel processors support','line_number':58,'multiline':False]['text':' AVX-512 loads/stores, hence the upper limit of 64.','line_number':59,'multiline':False]['text':' TODO: We want this static_assert back, but it reqires MaxMemory32Bytes to be','line_number':66,'multiline':False]['text':' a constant or constexpr function, not a regular function as now.','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' The assert is also present in WasmMemoryObject::isHuge and','line_number':69,'multiline':False]['text':' WasmMemoryObject::grow, so it's OK to comment out here for now.','line_number':70,'multiline':False]['text':' static_assert(MaxMemory32Bytes < HugeMappedSize(),','line_number':72,'multiline':False]['text':'               "Normal array buffer could be confused with huge memory");','line_number':73,'multiline':False]['text':' for 32/64 consistency','line_number':93,'multiline':False]['text':' static ','line_number':157,'multiline':True]['text':' static ','line_number':188,'multiline':True]['text':' static ','line_number':200,'multiline':True]['text':'  Heap length on ARM should fit in an ARM immediate. We approximate the set','line_number':497,'multiline':False]['text':'  of valid ARM immediates with the predicate:','line_number':498,'multiline':False]['text':'    2^n for n in [16, 24)','line_number':499,'multiline':False]['text':'  or','line_number':500,'multiline':False]['text':'    2^24 * n for n >= 1.','line_number':501,'multiline':False]['text':' TODO: memory64 maximum size may overflow size_t','line_number':535,'multiline':False]['text':' It is the bounds-check limit, not the mapped size, that gets baked into','line_number':538,'multiline':False]['text':' code. Thus round up the maxSize to the next valid immediate value','line_number':539,'multiline':False]['text':' *before* adding in the guard page.','line_number':540,'multiline':False]