['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' Useful extensions to UniquePtr. ','line_number':7,'multiline':True]['text':'*
 * MakeUniqueFallible works exactly like MakeUnique, except that the memory
 * allocation performed is done fallibly, i.e. it can return nullptr.
 ','line_number':24,'multiline':True]['text':'*
 * MakeUniqueForOverwrite and MakeUniqueFallibleForOverwrite are like MakeUnique
 * and MakeUniqueFallible except they use default-initialization. This is
 * useful, for example, when you have a POD type array that will be overwritten
 * directly after construction and so zero-initialization is a waste.
 ','line_number':45,'multiline':True]['text':' Can't include <windows.h> to get the actual definition of HANDLE','line_number':92,'multiline':False]['text':' because of namespace pollution.','line_number':93,'multiline':False]['text':' Windows uses both nullptr and INVALID_HANDLE_VALUE (-1 cast to','line_number':109,'multiline':False]['text':' HANDLE) in different situations, but nullptr is more reliably','line_number':110,'multiline':False]['text':' null while -1 is also valid input to some calls that take','line_number':111,'multiline':False]['text':' handles.  So class considers both to be null (since neither','line_number':112,'multiline':False]['text':' should be closed) but default-constructs as nullptr.','line_number':113,'multiline':False]['text':' NSPR uses an integer type for PROsfd, so this conversion is','line_number':124,'multiline':False]['text':' provided for working with it without needing reinterpret casts','line_number':125,'multiline':False]['text':' everywhere.','line_number':126,'multiline':False]['text':' When there's only one user-defined conversion operator, the','line_number':132,'multiline':False]['text':' compiler will use that to derive equality, but that doesn't work','line_number':133,'multiline':False]['text':' when the conversion is ambiguoug (the XP_WIN case above).','line_number':134,'multiline':False]['text':' See above for why this is nullptr.  (Also, INVALID_HANDLE_VALUE','line_number':143,'multiline':False]['text':' can't be expressed as a constexpr.)','line_number':144,'multiline':False]['text':' namespace detail','line_number':156,'multiline':False]['text':' A RAII class for the OS construct used for open files and similar','line_number':161,'multiline':False]['text':' objects: a file descriptor on Unix or a handle on Windows.','line_number':162,'multiline':False]['text':' Helper for passing a UniquePtr to an old-style function that uses raw','line_number':166,'multiline':False]['text':' pointers for out params. Example usage:','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':'   void AllocateFoo(Foo** out) { *out = new Foo(); }','line_number':169,'multiline':False]['text':'   UniquePtr<Foo> foo;','line_number':170,'multiline':False]['text':'   AllocateFoo(getter_Transfers(foo));','line_number':171,'multiline':False]['text':' namespace mozilla','line_number':192,'multiline':False]['text':' mozilla_UniquePtrExtensions_h','line_number':194,'multiline':False]