['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' ColorRect defines an optionally-rounded, optionally-bordered rectangle of a','line_number':40,'multiline':False]['text':' particular color that we will draw.','line_number':41,'multiline':False]['text':' DrawRect is mostly the same as ColorRect, but exists as an implementation','line_number':54,'multiline':False]['text':' detail to simplify drawing borders. We draw borders as a strokeOnly rect','line_number':55,'multiline':False]['text':' underneath an inner rect of a particular color. We also need to keep','line_number':56,'multiline':False]['text':' track of the backgroundColor for rounding rects, in order to correctly','line_number':57,'multiline':False]['text':' anti-alias.','line_number':58,'multiline':False]['text':' Produces a smooth curve in [0,1] based on a linear input in [0,1]','line_number':96,'multiline':False]['text':' Color values needed by the animation loop','line_number':121,'multiline':False]['text':' NOTE: these values were pulled out of thin air as round numbers that are','line_number':177,'multiline':False]['text':' likely to be too big to be seen in practice. If we legitimately see windows','line_number':178,'multiline':False]['text':' this big, we probably don't want to be drawing them on the CPU anyway.','line_number':179,'multiline':False]['text':' This is paraphrased from WinHeaderOnlyUtils.h. The fact that this file is','line_number':203,'multiline':False]['text':' included in standalone SpiderMonkey builds prohibits us from including that','line_number':204,'multiline':False]['text':' file directly, and it hardly warrants its own header. Bug 1674920 tracks','line_number':205,'multiline':False]['text':' only including this file for gecko-related builds.','line_number':206,'multiline':False]['text':' PreXULSkeletonUIDisallowed means that we don't even have the capacity to','line_number':228,'multiline':False]['text':' enable the skeleton UI, whether because we're on a platform that doesn't','line_number':229,'multiline':False]['text':' support it or because we launched with command line arguments that we don't','line_number':230,'multiline':False]['text':' support. Some of these situations are transient, so we want to make sure we','line_number':231,'multiline':False]['text':' don't mess with registry values in these scenarios that we may use in','line_number':232,'multiline':False]['text':' other scenarios in which the skeleton UI is actually enabled.','line_number':233,'multiline':False]['text':' Note: this is specifically *not* a robust, multi-locale lowercasing','line_number':240,'multiline':False]['text':' operation. It is not intended to be such. It is simply intended to match the','line_number':241,'multiline':False]['text':' way in which we look for other instances of firefox to remote into.','line_number':242,'multiline':False]['text':' See','line_number':243,'multiline':False]['text':' https://searchfox.org/mozilla-central/rev/71621bfa47a371f2b1ccfd33c704913124afb933/toolkit/components/remote/nsRemoteService.cpp#56','line_number':244,'multiline':False]['text':' Note: because we're in mozglue, we cannot easily access things from','line_number':265,'multiline':False]['text':' toolkit, like `GetInstallHash`. We could move `GetInstallHash` into','line_number':266,'multiline':False]['text':' mozglue, and rip out all of its usage of types defined in toolkit headers.','line_number':267,'multiline':False]['text':' However, it seems cleaner to just hash the bin path ourselves. We don't','line_number':268,'multiline':False]['text':' get quite the same robustness that `GetInstallHash` might provide, but','line_number':269,'multiline':False]['text':' we already don't have that with how we key our registry values, so it','line_number':270,'multiline':False]['text':' probably makes sense to just match those.','line_number':271,'multiline':False]['text':' Lowercase the binpath to match how we look for remote instances.','line_number':275,'multiline':False]['text':' The number of bytes * 2 characters per byte + 1 for the null terminator','line_number':278,'multiline':False]['text':' This isn't perfect - it's a 32-bit hash of the path to our executable. It','line_number':281,'multiline':False]['text':' could reasonably collide, or casing could potentially affect things, but','line_number':282,'multiline':False]['text':' the theory is that that should be uncommon enough and the failure case','line_number':283,'multiline':False]['text':' mild enough that this is fine.','line_number':284,'multiline':False]['text':' We intentionally leak this file - that is okay, and (kind of) the point.','line_number':294,'multiline':False]['text':' We want to hold onto this handle until the application exits, and hold','line_number':295,'multiline':False]['text':' onto it with exclusive rights. If this check fails, then we assume that','line_number':296,'multiline':False]['text':' another instance of the executable is holding it, and thus return false.','line_number':297,'multiline':False]['text':' No sharing - this is how the lock works','line_number':300,'multiline':False]['text':' Don't leave this lying around','line_number':302,'multiline':False]['text':' If we don't find it in the .ini file, we interpret that as true','line_number':343,'multiline':False]['text':' We could use nsAutoRegKey, but including nsWindowsHelpers.h causes build','line_number':367,'multiline':False]['text':' failures in random places because we're in mozglue. Overall it should be','line_number':368,'multiline':False]['text':' simpler and cleaner to just step around that issue with this class:','line_number':369,'multiline':False]['text':' Some things appear to floor to device pixels rather than rounding. A good','line_number':391,'multiline':False]['text':' example of this is border widths.','line_number':392,'multiline':False]['text':' For more details, see','line_number':401,'multiline':False]['text':' https://searchfox.org/mozilla-central/rev/a5d9abfda1e26b1207db9549549ab0bdd73f735d/gfx/wr/webrender/res/shared.glsl#141-187','line_number':402,'multiline':False]['text':' which was a reference for this function.','line_number':403,'multiline':False]['text':' Distance assumed to be in device pixels. We use an aa range of 0.5 for','line_number':405,'multiline':False]['text':' reasons detailed in the linked code above.','line_number':406,'multiline':False]['text':' Add 0.5 to x and y to get the pixel center.','line_number':442,'multiline':False]['text':' We iterate through logical pixel rows here, from inside to outside, which','line_number':468,'multiline':False]['text':' for the top of the rounded rect means from bottom to top, and for the','line_number':469,'multiline':False]['text':' bottom of the rect means top to bottom. We paint pixels from left to','line_number':470,'multiline':False]['text':' right on the top and bottom rows at the same time for the entire animation','line_number':471,'multiline':False]['text':' window. (If the animation window does not overlap any rounded corners,','line_number':472,'multiline':False]['text':' however, we won't be called at all)','line_number':473,'multiline':False]['text':' Add 0.5 to x and y to get the pixel center.','line_number':482,'multiline':False]['text':' The column index is the distance from the innermost pixel, which','line_number':485,'multiline':False]['text':' is different depending on whether we're on the left or right','line_number':486,'multiline':False]['text':' side of the rect. It will always be the max here, and if it's','line_number':487,'multiline':False]['text':' negative that just means we're outside the rounded area.','line_number':488,'multiline':False]['text':' We don't do alpha blending for the antialiased pixels at the','line_number':501,'multiline':False]['text':' shape's border. It is not noticeable in the animation.','line_number':502,'multiline':False]['text':' Overwrite the tail end of last frame's animation with the','line_number':504,'multiline':False]['text':' rect's normal, unanimated color.','line_number':505,'multiline':False]['text':' We sometimes split our rect into two, to simplify drawing borders. If we','line_number':517,'multiline':False]['text':' have a border, we draw a stroke-only rect first, and then draw the smaller','line_number':518,'multiline':False]['text':' inner rect on top of it.','line_number':519,'multiline':False]['text':' For rounded rectangles, the first thing we do is draw the top and','line_number':567,'multiline':False]['text':' bottom of the rectangle, with the more complicated logic below. After','line_number':568,'multiline':False]['text':' that we can just draw the vertically centered part of the rect like','line_number':569,'multiline':False]['text':' normal.','line_number':570,'multiline':False]['text':' We then draw the flat, central portion of the rect (which in the case of','line_number':573,'multiline':False]['text':' non-rounded rects, is just the entire thing.)','line_number':574,'multiline':False]['text':' For strokeOnly rects (used to draw borders), we just draw the left','line_number':580,'multiline':False]['text':' and right side here. Looping down a column of pixels is not the most','line_number':581,'multiline':False]['text':' cache-friendly thing, but it shouldn't be a big deal given the height','line_number':582,'multiline':False]['text':' of the urlbar.','line_number':583,'multiline':False]['text':' Also, if borderRadius is less than borderWidth, we need to ensure','line_number':584,'multiline':False]['text':' that we fully draw the top and bottom lines, so we make sure to check','line_number':585,'multiline':False]['text':' that we're inside the middle range range before excluding pixels.','line_number':586,'multiline':False]['text':' Paints the pixels to sPixelBuffer for the skeleton UI animation (a light','line_number':614,'multiline':False]['text':' gradient which moves from left to right across the grey placeholder rects).','line_number':615,'multiline':False]['text':' Takes in the rect to draw, together with a lookup table for the gradient,','line_number':616,'multiline':False]['text':' and the bounds of the previous and current frame of the animation.','line_number':617,'multiline':False]['text':' If we don't overlap the left or right side of the rounded rectangle,','line_number':640,'multiline':False]['text':' just pretend it's not rounded. This is a small optimization but','line_number':641,'multiline':False]['text':' there's no point in doing all of this rounded rectangle checking if','line_number':642,'multiline':False]['text':' we aren't even overlapping','line_number':643,'multiline':False]['text':' Similarly to how we draw the rounded rects in DrawSkeletonUI, we','line_number':648,'multiline':False]['text':' first draw the rounded top and bottom, and then we draw the center','line_number':649,'multiline':False]['text':' rect.','line_number':650,'multiline':False]['text':' Overwrite the tail end of last frame's animation with the rect's','line_number':659,'multiline':False]['text':' normal, unanimated color.','line_number':660,'multiline':False]['text':' Then apply the animated color','line_number':664,'multiline':False]['text':' NOTE: we opt here to paint a pixel buffer for the application chrome by','line_number':677,'multiline':False]['text':' hand, without using native UI library methods. Why do we do this?','line_number':678,'multiline':False]['text':'','line_number':679,'multiline':False]['text':' 1) It gives us a little bit more control, especially if we want to animate','line_number':680,'multiline':False]['text':'    any of this.','line_number':681,'multiline':False]['text':' 2) It's actually more portable. We can do this on any platform where we','line_number':682,'multiline':False]['text':'    can blit a pixel buffer to the screen, and it only has to change','line_number':683,'multiline':False]['text':'    insofar as the UI is different on those platforms (and thus would have','line_number':684,'multiline':False]['text':'    to change anyway.)','line_number':685,'multiline':False]['text':'','line_number':686,'multiline':False]['text':' The performance impact of this ought to be negligible. As far as has been','line_number':687,'multiline':False]['text':' observed, on slow reference hardware this might take up to a millisecond,','line_number':688,'multiline':False]['text':' for a startup which otherwise takes 30 seconds.','line_number':689,'multiline':False]['text':'','line_number':690,'multiline':False]['text':' The readability and maintainability are a greater concern. When the','line_number':691,'multiline':False]['text':' silhouette of Firefox's core UI changes, this code will likely need to','line_number':692,'multiline':False]['text':' change. However, for the foreseeable future, our skeleton UI will be mostly','line_number':693,'multiline':False]['text':' axis-aligned geometric shapes, and the thought is that any code which is','line_number':694,'multiline':False]['text':' manipulating raw pixels should not be *too* hard to maintain and','line_number':695,'multiline':False]['text':' understand so long as it is only painting such simple shapes.','line_number':696,'multiline':False]['text':' found in tabs.inc.css, "--tab-min-height" + 2 * "--tab-block-margin"','line_number':711,'multiline':False]['text':' found in tabs.inc.css, "--tab-block-margin"','line_number':714,'multiline':False]['text':' found in tabs.inc.css, ".titlebar-spacer"','line_number':719,'multiline':False]['text':' found in tabs.inc.css, "--tab-block-margin"','line_number':722,'multiline':False]['text':' found in browser.css, "#PersonalToolbar"','line_number':731,'multiline':False]['text':' found in urlbar-searchbar.inc.css, "#urlbar[breakout]"','line_number':736,'multiline':False]['text':' found in browser-aero.css, "#navigator-toolbox::after" border-bottom','line_number':739,'multiline':False]['text':' controlled by css variable urlbarMarginInline in urlbar-searchbar.inc.css','line_number':759,'multiline':False]['text':' found in browser.css "--toolbarbutton-border-radius"','line_number':793,'multiline':False]['text':' The (traditionally dark blue on Windows) background of the tab bar.','line_number':796,'multiline':False]['text':' The initial selected tab','line_number':808,'multiline':False]['text':' A placeholder rect representing text that will fill the selected tab title','line_number':824,'multiline':False]['text':' The toolbar background','line_number':837,'multiline':False]['text':' The single-pixel divider line below the toolbar','line_number':849,'multiline':False]['text':' The urlbar','line_number':861,'multiline':False]['text':' The urlbar placeholder rect representating text that will fill the urlbar','line_number':878,'multiline':False]['text':' If rtl is enabled, it is flipped relative to the the urlbar rectangle, not','line_number':879,'multiline':False]['text':' sWindowWidth.','line_number':880,'multiline':False]['text':' The searchbar and placeholder text, if present','line_number':897,'multiline':False]['text':' This is y-aligned with the urlbar','line_number':898,'multiline':False]['text':' The placeholder rect representating text that will fill the searchbar','line_number':918,'multiline':False]['text':' This uses the same margins as the urlbarTextPlaceholder','line_number':919,'multiline':False]['text':' If rtl is enabled, it is flipped relative to the the searchbar rectangle,','line_number':920,'multiline':False]['text':' not sWindowWidth.','line_number':921,'multiline':False]['text':' Determine where the placeholder rectangles should not go. This is','line_number':940,'multiline':False]['text':' anywhere occupied by a spring, urlbar, or searchbar','line_number':941,'multiline':False]['text':' If we're RTL, then the springs as ordered in the DOM will be from right','line_number':962,'multiline':False]['text':' to left, which will break our comparison logic below','line_number':963,'multiline':False]['text':' The placeholder rects should all be y-aligned.','line_number':1010,'multiline':False]['text':' First, we just paint the chrome area with our pixel buffer','line_number':1073,'multiline':False]['text':' Then, we just fill the rest with FillRect','line_number':1081,'multiline':False]['text':' See the comments above the InterlockedIncrement calls below here - we','line_number':1104,'multiline':False]['text':' atomically flip this up and down around sleep so the main thread doesn't','line_number':1105,'multiline':False]['text':' have to wait for us if we're just sleeping.','line_number':1106,'multiline':False]['text':' Sleep for two seconds - startups faster than this don't really benefit','line_number':1110,'multiline':False]['text':' from an animation, and we don't want to take away cycles from them.','line_number':1111,'multiline':False]['text':' Startups longer than this, however, are more likely to be blocked on IO,','line_number':1112,'multiline':False]['text':' and thus animating does not substantially impact startup times for them.','line_number':1113,'multiline':False]['text':' On each of the animated rects (which happen to all be placeholder UI','line_number':1119,'multiline':False]['text':' rects sharing the same color), we want to animate a gradient moving across','line_number':1120,'multiline':False]['text':' the screen from left to right. The gradient starts as the rect's color on,','line_number':1121,'multiline':False]['text':' the left side, changes to the background color of the window by the middle','line_number':1122,'multiline':False]['text':' of the gradient, and then goes back down to the rect's color. To make this','line_number':1123,'multiline':False]['text':' faster than interpolating between the two colors for each pixel for each','line_number':1124,'multiline':False]['text':' frame, we simply create a lookup buffer in which we can look up the color','line_number':1125,'multiline':False]['text':' for a particular offset into the gradient.','line_number':1126,'multiline':False]['text':'','line_number':1127,'multiline':False]['text':' To do this we just interpolate between the two values, and to give the','line_number':1128,'multiline':False]['text':' gradient a smoother transition between colors, we transform the linear','line_number':1129,'multiline':False]['text':' blend amount via the cubic smooth step function (SmoothStep3) to produce','line_number':1130,'multiline':False]['text':' a smooth start and stop for the gradient. We do this for the first half','line_number':1131,'multiline':False]['text':' of the gradient, and then simply copy that backwards for the second half.','line_number':1132,'multiline':False]['text':'','line_number':1133,'multiline':False]['text':' The CSS width of 80 chosen here is effectively is just to match the size','line_number':1134,'multiline':False]['text':' of the animation provided in the design mockup. We define it in CSS pixels','line_number':1135,'multiline':False]['text':' simply because the rest of our UI is based off of CSS scalings.','line_number':1136,'multiline':False]['text':' Build the first half of the lookup table','line_number':1143,'multiline':False]['text':' Copy the first half of the lookup table into the second half backwards','line_number':1155,'multiline':False]['text':' If animationWidth is odd, we'll be left with one pixel at the center.','line_number':1159,'multiline':False]['text':' Just color that as the animation color.','line_number':1160,'multiline':False]['text':' The bitmap info remains unchanged throughout the animation - this just','line_number':1167,'multiline':False]['text':' effectively describes the contents of sPixelBuffer','line_number':1168,'multiline':False]['text':' The window got consumed before we were able to draw anything.','line_number':1185,'multiline':False]['text':' The gradient will move across the screen at devPixelsPerFrame at','line_number':1190,'multiline':False]['text':' 60fps, and then loop back to the beginning. However, we add a buffer of','line_number':1191,'multiline':False]['text':' devPixelsExtraWindowSize around the edges so it doesn't immediately','line_number':1192,'multiline':False]['text':' jump back, giving it a more pulsing feel.','line_number':1193,'multiline':False]['text':' The priorAnimationMin is the beginning of the previous frame's animation.','line_number':1198,'multiline':False]['text':' Since we only want to draw the bits of the image that we updated, we need','line_number':1199,'multiline':False]['text':' to overwrite the left bit of the animation we drew last frame with the','line_number':1200,'multiline':False]['text':' default color.','line_number':1201,'multiline':False]['text':' The gradient only affects the specific rects that we put into','line_number':1207,'multiline':False]['text':' sAnimatedRects. So we simply update those rects, and maintain a flag','line_number':1208,'multiline':False]['text':' to avoid drawing when we don't need to.','line_number':1209,'multiline':False]['text':' We coordinate around our sleep here to ensure that the main thread does','line_number':1235,'multiline':False]['text':' not wait on us if we're sleeping. If we don't get 1 here, it means the','line_number':1236,'multiline':False]['text':' window has been consumed and we don't need to sleep. If in','line_number':1237,'multiline':False]['text':' ConsumePreXULSkeletonUIHandle we get a value other than 1 after','line_number':1238,'multiline':False]['text':' incrementing, it means we're sleeping, and that function can assume that','line_number':1239,'multiline':False]['text':' we will safely exit after the sleep because of the observed value of','line_number':1240,'multiline':False]['text':' sAnimationControlFlag.','line_number':1241,'multiline':False]['text':' Note: Sleep does not guarantee an exact time interval. If the system is','line_number':1246,'multiline':False]['text':' busy, for instance, we could easily end up taking several frames longer,','line_number':1247,'multiline':False]['text':' and really we could be left unscheduled for an arbitrarily long time.','line_number':1248,'multiline':False]['text':' This is fine, and we don't really care. We could track how much time this','line_number':1249,'multiline':False]['text':' actually took and jump the animation forward the appropriate amount, but','line_number':1250,'multiline':False]['text':' its not even clear that that's a better user experience. So we leave this','line_number':1251,'multiline':False]['text':' as simple as we can.','line_number':1252,'multiline':False]['text':' Here we bring sAnimationControlFlag back down - again, if we don't get a','line_number':1255,'multiline':False]['text':' 0 here it means we consumed the skeleton UI window in the mean time, so','line_number':1256,'multiline':False]['text':' we can simply exit.','line_number':1257,'multiline':False]['text':' Exposing a generic oleacc proxy for the skeleton isn't useful and may cause','line_number':1268,'multiline':False]['text':' screen readers to report spurious information when the skeleton appears.','line_number':1269,'multiline':False]['text':' NOTE: this block was copied from WinUtils.cpp, and needs to be kept in','line_number':1274,'multiline':False]['text':' sync.','line_number':1275,'multiline':False]['text':' NOTE: this block was paraphrased from the WM_NCCALCSIZE handler in','line_number':1280,'multiline':False]['text':' nsWindow.cpp, and will need to be kept in sync.','line_number':1281,'multiline':False]['text':' These match the margins set in browser-tabsintitlebar.js with','line_number':1287,'multiline':False]['text':' default prefs on Windows. Bug 1673092 tracks lining this up with','line_number':1288,'multiline':False]['text':' that more correctly instead of hard-coding it.','line_number':1289,'multiline':False]['text':' Dark theme or default theme when in dark mode','line_number':1333,'multiline':False]['text':' controlled by css variable --toolbar-bgcolor','line_number':1335,'multiline':False]['text':' controlled by css variable --lwt-accent-color','line_number':1340,'multiline':False]['text':' controlled by --toolbar-non-lwt-textcolor in browser.css','line_number':1342,'multiline':False]['text':' controlled by css variable --lwt-toolbar-field-background-color','line_number':1344,'multiline':False]['text':' --toolbar-non-lwt-bgcolor in browser.css','line_number':1352,'multiline':False]['text':' found in browser-aero.css ":root[tabsintitlebar]:not(:-moz-lwtheme)"','line_number':1357,'multiline':False]['text':' (set to "hsl(235,33%,19%)")','line_number':1358,'multiline':False]['text':' --chrome-content-separator-color in browser.css','line_number':1360,'multiline':False]['text':' controlled by css variable --toolbar-color','line_number':1362,'multiline':False]['text':' EnableNonClientDpiScaling is optional - we can handle not having it.','line_number':1407,'multiline':False]['text':' Strips "--", "-", and "/" from the front of the arg if one of those exists,','line_number':1494,'multiline':False]['text':' returning `arg + 2`, `arg + 1`, and `arg + 1` respectively. If none of these','line_number':1495,'multiline':False]['text':' prefixes are found, the argument is not a flag, and nullptr is returned.','line_number':1496,'multiline':False]['text':' Ensures that we only see arguments in the command line which are acceptable.','line_number':1518,'multiline':False]['text':' This is based on manual inspection of the list of arguments listed in the MDN','line_number':1519,'multiline':False]['text':' page for Gecko/Firefox commandline options:','line_number':1520,'multiline':False]['text':' https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options','line_number':1521,'multiline':False]['text':' Broadly speaking, we want to reject any argument which causes us to show','line_number':1522,'multiline':False]['text':' something other than the default window at its normal size. Here is a non-','line_number':1523,'multiline':False]['text':' exhaustive list of command line options we want to *exclude*:','line_number':1524,'multiline':False]['text':'','line_number':1525,'multiline':False]['text':'   -ProfileManager : This will display the profile manager window, which does','line_number':1526,'multiline':False]['text':'                     not match the skeleton UI at all.','line_number':1527,'multiline':False]['text':'','line_number':1528,'multiline':False]['text':'   -CreateProfile  : This will display a firefox window with the default','line_number':1529,'multiline':False]['text':'                     screen position and size, and not the position and size','line_number':1530,'multiline':False]['text':'                     which we have recorded in the registry.','line_number':1531,'multiline':False]['text':'','line_number':1532,'multiline':False]['text':'   -P <profile>    : This could cause us to display firefox with a position','line_number':1533,'multiline':False]['text':'                     and size of a different profile than that in which we','line_number':1534,'multiline':False]['text':'                     were previously running.','line_number':1535,'multiline':False]['text':'','line_number':1536,'multiline':False]['text':'   -width, -height : This will cause the width and height values in the','line_number':1537,'multiline':False]['text':'                     registry to be incorrect.','line_number':1538,'multiline':False]['text':'','line_number':1539,'multiline':False]['text':'   -kiosk          : See above.','line_number':1540,'multiline':False]['text':'','line_number':1541,'multiline':False]['text':'   -headless       : This one should be rather obvious.','line_number':1542,'multiline':False]['text':'','line_number':1543,'multiline':False]['text':'   -migration      : This will start with the import wizard, which of course','line_number':1544,'multiline':False]['text':'                     does not match the skeleton UI.','line_number':1545,'multiline':False]['text':'','line_number':1546,'multiline':False]['text':'   -private-window : This is tricky, but the colors of the main content area','line_number':1547,'multiline':False]['text':'                     make this not feel great with the white content of the','line_number':1548,'multiline':False]['text':'                     default skeleton UI.','line_number':1549,'multiline':False]['text':'','line_number':1550,'multiline':False]['text':' NOTE: we generally want to skew towards erroneous rejections of the command','line_number':1551,'multiline':False]['text':' line rather than erroneous approvals. The consequence of a bad rejection','line_number':1552,'multiline':False]['text':' is that we don't show the skeleton UI, which is business as usual. The','line_number':1553,'multiline':False]['text':' consequence of a bad approval is that we show it when we're not supposed to,','line_number':1554,'multiline':False]['text':' which is visually jarring and can also be unpredictable - there's no','line_number':1555,'multiline':False]['text':' guarantee that the code which handles the non-default window is set up to','line_number':1556,'multiline':False]['text':' properly handle the transition from the skeleton UI window.','line_number':1557,'multiline':False]['text':' These won't cause the browser to be visualy different in any way','line_number':1561,'multiline':False]['text':' These will cause the chrome to be a bit different or extra windows to','line_number':1565,'multiline':False]['text':' be created, but overall the skeleton UI should still be broadly','line_number':1566,'multiline':False]['text':' correct enough.','line_number':1567,'multiline':False]['text':' To the extent possible, we want to ensure that existing tests cover','line_number':1570,'multiline':False]['text':' the skeleton UI, so we need to allow marionette','line_number':1571,'multiline':False]['text':' These will cause the content area to appear different, but won't','line_number':1574,'multiline':False]['text':' meaningfully affect the chrome','line_number':1575,'multiline':False]['text':' On local builds, we want to allow -profile, because it's how `mach run`','line_number':1579,'multiline':False]['text':' operates, and excluding that would create an unnecessary blind spot for','line_number':1580,'multiline':False]['text':' Firefox devs.','line_number':1581,'multiline':False]['text':' There are other arguments which are likely okay. However, they are','line_number':1585,'multiline':False]['text':' not included here because this list is not intended to be','line_number':1586,'multiline':False]['text':' exhaustive - it only intends to green-light some somewhat commonly','line_number':1587,'multiline':False]['text':' used arguments. We want to err on the side of an unnecessary','line_number':1588,'multiline':False]['text':' rejection of the command line.','line_number':1589,'multiline':False]['text':' If we're running mochitests or direct marionette tests, those specify a','line_number':1605,'multiline':False]['text':' temporary profile, and we want to ensure that we get the added coverage','line_number':1606,'multiline':False]['text':' from those.','line_number':1607,'multiline':False]['text':' If this is not a flag, then we interpret it as a URL, similar to','line_number':1626,'multiline':False]['text':' BrowserContentHandler.jsm. Some command line options take additional','line_number':1627,'multiline':False]['text':' arguments, which may or may not be URLs. We don't need to know this,','line_number':1628,'multiline':False]['text':' because we don't need to parse them out; we just rely on the','line_number':1629,'multiline':False]['text':' assumption that if arg X is actually a parameter for the preceding','line_number':1630,'multiline':False]['text':' arg Y, then X must not look like a flag (starting with "--", "-",','line_number':1631,'multiline':False]['text':' or "/").','line_number':1632,'multiline':False]['text':'','line_number':1633,'multiline':False]['text':' The most important thing here is the assumption that if something is','line_number':1634,'multiline':False]['text':' going to meaningfully alter the appearance of the window itself, it','line_number':1635,'multiline':False]['text':' must be a flag.','line_number':1636,'multiline':False]['text':' We do a case-insensitive compare here with _stricmp. Even though some','line_number':1642,'multiline':False]['text':' of these arguments are *not* read as case-insensitive, others *are*.','line_number':1643,'multiline':False]['text':' Similar to the flag logic above, we don't really care about this','line_number':1644,'multiline':False]['text':' distinction, because we don't need to parse the arguments - we just','line_number':1645,'multiline':False]['text':' rely on the assumption that none of the listed flags in our','line_number':1646,'multiline':False]['text':' approvedArguments are overloaded in such a way that a different','line_number':1647,'multiline':False]['text':' casing would visually alter the firefox window.','line_number':1648,'multiline':False]['text':' No guarantee on the packing of CSSPixelSpan. We could #pragma it, but it's','line_number':1759,'multiline':False]['text':' also trivial to just copy them into a buffer of doubles.','line_number':1760,'multiline':False]['text':' Initializing COM below may load modules via SetWindowHookEx, some of','line_number':1808,'multiline':False]['text':' which may modify the executable's IAT for ntdll.dll.  If that happens,','line_number':1809,'multiline':False]['text':' this browser process fails to launch sandbox processes because we cannot','line_number':1810,'multiline':False]['text':' copy a modified IAT into a remote process (See SandboxBroker::LaunchApp).','line_number':1811,'multiline':False]['text':' To prevent that, we cache the intact IAT before COM initialization.','line_number':1812,'multiline':False]['text':' If EAF+ is enabled, CacheNtDllThunk() causes a crash, but EAF+ will','line_number':1813,'multiline':False]['text':' also prevent an injected module from parsing the PE headers and modifying','line_number':1814,'multiline':False]['text':' the IAT.  Therefore, we can skip CacheNtDllThunk().','line_number':1815,'multiline':False]['text':' NOTE: it's important that we initialize sProcessRuntime before showing a','line_number':1820,'multiline':False]['text':' window. Historically we ran into issues where showing the window would','line_number':1821,'multiline':False]['text':' cause an accessibility win event to fire, which could cause in-process','line_number':1822,'multiline':False]['text':' system or third party components to initialize COM and prevent us from','line_number':1823,'multiline':False]['text':' initializing it with important settings we need.','line_number':1824,'multiline':False]['text':' Some COM settings are global to the process and must be set before any non-','line_number':1826,'multiline':False]['text':' trivial COM is run in the application. Since these settings may affect','line_number':1827,'multiline':False]['text':' stability, we should instantiate COM ASAP so that we can ensure that these','line_number':1828,'multiline':False]['text':' global settings are configured before anything can interfere.','line_number':1829,'multiline':False]['text':' TODO: just ensure we disable this if we've overridden the window class','line_number':1899,'multiline':False]['text':' NOTE: we specifically don't clean up the window here. If we're unable','line_number':1998,'multiline':False]['text':' to finish setting up the window how we want it, we still need to keep','line_number':1999,'multiline':False]['text':' it around and consume it with the first real toplevel window we','line_number':2000,'multiline':False]['text':' create, to avoid flickering.','line_number':2001,'multiline':False]['text':' NOTE: we need to make sure that everything that runs here is a no-op if','line_number':2056,'multiline':False]['text':' it failed to be set, which is a possibility. If anything fails to be set','line_number':2057,'multiline':False]['text':' we don't want to clean everything up right away, because if we have a','line_number':2058,'multiline':False]['text':' blank window up, we want that to stick around and get consumed by nsWindow','line_number':2059,'multiline':False]['text':' as normal, otherwise the window will flicker in and out, which we imagine','line_number':2060,'multiline':False]['text':' is unpleasant.','line_number':2061,'multiline':False]['text':' If we don't get 1 here, it means the thread is actually just sleeping, so','line_number':2063,'multiline':False]['text':' we don't need to worry about giving out ownership of the window, because','line_number':2064,'multiline':False]['text':' the thread will simply exit after its sleep. However, if it is 1, we need','line_number':2065,'multiline':False]['text':' to wait for the thread to exit to be safe, as it could be doing anything.','line_number':2066,'multiline':False]['text':' If the pre-XUL skeleton UI was disallowed for some reason, we just want to','line_number':2155,'multiline':False]['text':' ignore changes to the registry. An example of how things could be bad if','line_number':2156,'multiline':False]['text':' we didn't: someone running firefox with the -profile argument could','line_number':2157,'multiline':False]['text':' turn the skeleton UI on or off for the default profile. Turning it off','line_number':2158,'multiline':False]['text':' maybe isn't so bad (though it's likely still incorrect), but turning it','line_number':2159,'multiline':False]['text':' on could be bad if the user had specifically disabled it for a profile for','line_number':2160,'multiline':False]['text':' some reason. Ultimately there's no correct decision here, and the','line_number':2161,'multiline':False]['text':' messiness of this is just a consequence of sharing the registry values','line_number':2162,'multiline':False]['text':' across profiles. However, whatever ill effects we observe should be','line_number':2163,'multiline':False]['text':' correct themselves after one session.','line_number':2164,'multiline':False]['text':' We specifically don't care if we fail to get this lock. We just want to','line_number':2179,'multiline':False]['text':' do our best effort to lock it so that future instances don't create','line_number':2180,'multiline':False]['text':' skeleton UIs while we're still running, since they will immediately exit','line_number':2181,'multiline':False]['text':' and tell us to open a new window.','line_number':2182,'multiline':False]['text':' If we fail below, invalidate sTheme','line_number':2198,'multiline':False]['text':' We assume that we are going to exit the application very shortly after','line_number':2228,'multiline':False]['text':' this. It should thus be fine to release this lock, and we'll need to,','line_number':2229,'multiline':False]['text':' since during a restart we launch the new instance before closing this','line_number':2230,'multiline':False]['text':' one.','line_number':2231,'multiline':False]['text':' namespace mozilla','line_number':2238,'multiline':False]