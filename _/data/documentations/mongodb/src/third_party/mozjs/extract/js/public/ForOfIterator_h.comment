['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * A convenience class that makes it easy to perform the operations of a for-of
 * loop.
 ','line_number':7,'multiline':True]['text':' MOZ_STACK_CLASS','line_number':15,'multiline':False]['text':' UINT32_MAX, uint32_t','line_number':17,'multiline':False]['text':' JS_PUBLIC_API','line_number':19,'multiline':False]['text':' JS::{Handle,Rooted}','line_number':21,'multiline':False]['text':' JS::Value, JS::{,Mutable}Handle<JS::Value>','line_number':22,'multiline':False]['text':'*
 * A convenience class for imitating a JS for-of loop. Typical usage:
 *
 *     JS::ForOfIterator it(cx);
 *     if (!it.init(iterable)) {
 *       return false;
 *     }
 *     JS::Rooted<JS::Value> val(cx);
 *     while (true) {
 *       bool done;
 *       if (!it.next(&val, &done)) {
 *         return false;
 *       }
 *       if (done) {
 *         break;
 *       }
 *       if (!DoStuff(cx, val)) {
 *         return false;
 *       }
 *     }
 ','line_number':29,'multiline':True]['text':' Use the ForOfPIC on the global object (see vm/GlobalObject.h) to try to','line_number':54,'multiline':False]['text':' optimize iteration across arrays.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':'  Case 1: Regular Iteration','line_number':57,'multiline':False]['text':'      iterator - pointer to the iterator object.','line_number':58,'multiline':False]['text':'      nextMethod - value of |iterator|.next.','line_number':59,'multiline':False]['text':'      index - fixed to NOT_ARRAY (== UINT32_MAX)','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'  Case 2: Optimized Array Iteration','line_number':62,'multiline':False]['text':'      iterator - pointer to the array object.','line_number':63,'multiline':False]['text':'      nextMethod - the undefined value.','line_number':64,'multiline':False]['text':'      index - current position in array.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' The cases are distinguished by whether |index == NOT_ARRAY|.','line_number':67,'multiline':False]['text':'*
   * Initialize the iterator.  If AllowNonIterable is passed then if getting
   * the @@iterator property from iterable returns undefined init() will just
   * return true instead of throwing.  Callers must then check
   * valueIsIterable() before continuing with the iteration.
   ','line_number':84,'multiline':True]['text':'*
   * Get the next value from the iterator.  If false *done is true
   * after this call, do not examine val.
   ','line_number':94,'multiline':True]['text':'*
   * Close the iterator.
   * For the case that completion type is throw.
   ','line_number':100,'multiline':True]['text':'*
   * If initialized with throwOnNonCallable = false, check whether
   * the value is iterable.
   ','line_number':106,'multiline':True]['text':' namespace JS','line_number':116,'multiline':False]['text':' js_ForOfIterator_h','line_number':118,'multiline':False]