['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JSErrNum','line_number':15,'multiline':False]['text':' JS::shadow::Zone','line_number':18,'multiline':False]['text':' namespace JS','line_number':29,'multiline':False]['text':' namespace gc','line_number':40,'multiline':False]['text':'**************************************************************************','line_number':42,'multiline':True]['text':'
 * The NewObjectKind allows an allocation site to specify the lifetime
 * requirements that must be fixed at allocation time.
 ','line_number':50,'multiline':True]['text':' This is the default. Most objects are generic. ','line_number':55,'multiline':True]['text':'
   * Objects which will not benefit from being allocated in the nursery
   * (e.g. because they are known to have a long lifetime) may be allocated
   * with this kind to place them immediately into the tenured generation.
   ','line_number':58,'multiline':True]['text':' Forward declarations, required for later friend declarations.','line_number':66,'multiline':False]['text':' namespace js ','line_number':72,'multiline':True]['text':'
 * [SMDOC] JSObject layout
 *
 * A JavaScript object.
 *
 * This is the base class for all objects exposed to JS script (as well as some
 * objects that are only accessed indirectly). Subclasses add additional fields
 * and execution semantics. The runtime class of an arbitrary JSObject is
 * identified by JSObject::getClass().
 *
 * All objects have a non-null Shape, stored in the cell header, which describes
 * the current layout and set of property keys of the object.
 *
 * Each Shape has a pointer to a BaseShape. The BaseShape contains the object's
 * prototype object, its class, and its realm.
 *
 * NOTE: Some operations can change the contents of an object (including class)
 *       in-place so avoid assuming an object with same pointer has same class
 *       as before.
 *       - JSObject::swap()
 ','line_number':74,'multiline':True]['text':' The Shape is stored in the cell header.','line_number':98,'multiline':False]['text':' Ensure fixed slots have 8-byte alignment on 32-bit platforms.','line_number':102,'multiline':False]['text':' Note: use Cell::Zone() instead of zone() because zone() relies on the','line_number':153,'multiline':False]['text':' shape we still have to initialize.','line_number':154,'multiline':False]['text':' Change this object's shape for a prototype mutation.','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' Note: this does not reshape the proto chain to invalidate shape','line_number':175,'multiline':False]['text':' teleporting, check for an immutable proto, etc.','line_number':176,'multiline':False]['text':' An object is marked IsUsedAsPrototype if it is (or was) another object's','line_number':180,'multiline':False]['text':' prototype. Optimization heuristics will make use of this flag.','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':' This flag is only relevant for static prototypes. Proxy traps can return','line_number':183,'multiline':False]['text':' objects without this flag set.','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':' NOTE: it's important to call setIsUsedAsPrototype *after* initializing the','line_number':186,'multiline':False]['text':' object's properties, because that avoids unnecessary shadowing checks and','line_number':187,'multiline':False]['text':' reshaping.','line_number':188,'multiline':False]['text':'','line_number':189,'multiline':False]['text':' See: ReshapeForProtoMutation, ReshapeForShadowedProp','line_number':190,'multiline':False]['text':' A "qualified" varobj is the object on which "qualified" variable','line_number':200,'multiline':False]['text':' declarations (i.e., those defined with "var") are kept.','line_number':201,'multiline':False]['text':'','line_number':202,'multiline':False]['text':' Conceptually, when a var binding is defined, it is defined on the','line_number':203,'multiline':False]['text':' innermost qualified varobj on the scope chain.','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':' Function scopes (CallObjects) are qualified varobjs, and there can be','line_number':206,'multiline':False]['text':' no other qualified varobj that is more inner for var bindings in that','line_number':207,'multiline':False]['text':' function. As such, all references to local var bindings in a function','line_number':208,'multiline':False]['text':' may be statically bound to the function scope. This is subject to','line_number':209,'multiline':False]['text':' further optimization. Unaliased bindings inside functions reside','line_number':210,'multiline':False]['text':' entirely on the frame, not in CallObjects.','line_number':211,'multiline':False]['text':'','line_number':212,'multiline':False]['text':' Global scopes are also qualified varobjs. It is possible to statically','line_number':213,'multiline':False]['text':' know, for a given script, that are no more inner qualified varobjs, so','line_number':214,'multiline':False]['text':' free variable references can be statically bound to the global.','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' Finally, there are non-syntactic qualified varobjs used by embedders','line_number':217,'multiline':False]['text':' (e.g., Gecko and XPConnect), as they often wish to run scripts under a','line_number':218,'multiline':False]['text':' scope that captures var bindings.','line_number':219,'multiline':False]['text':' An "unqualified" varobj is the object on which "unqualified"','line_number':225,'multiline':False]['text':' assignments (i.e., bareword assignments for which the LHS does not','line_number':226,'multiline':False]['text':' exist on the scope chain) are kept.','line_number':227,'multiline':False]['text':' An object with an "uncacheable proto" is a prototype object that either had','line_number':230,'multiline':False]['text':' its own proto mutated or it was on the proto chain of an object that had','line_number':231,'multiline':False]['text':' its proto mutated. This is used to opt-out of the shape teleporting','line_number':232,'multiline':False]['text':' optimization. See: ReshapeForProtoMutation, ProtoChainSupportsTeleporting.','line_number':233,'multiline':False]['text':'
   * Whether there may be "interesting symbol" properties on this object. An
   * interesting symbol is a symbol for which symbol->isInterestingSymbol()
   * returns true.
   ','line_number':243,'multiline':True]['text':' GC support. ','line_number':250,'multiline':True]['text':' Return the allocKind we would use if we were to tenure this object. ','line_number':278,'multiline':True]['text':' We can only use addSizeOfExcludingThis on tenured objects: it assumes it','line_number':289,'multiline':False]['text':' can apply mallocSizeOf to bits and pieces of the object, whereas objects','line_number':290,'multiline':False]['text':' in the nursery may have those bits and pieces allocated in the nursery','line_number':291,'multiline':False]['text':' along with them, and are not each their own malloc blocks.','line_number':292,'multiline':False]['text':'
   * We permit proxies to dynamically compute their prototype if desired.
   * (Not all proxies will so desire: in particular, most DOM proxies can
   * track their prototype with a single, nullable JSObject*.)  If a proxy
   * so desires, we store (JSObject*)0x1 in the proto field of the object's
   * group.
   *
   * We offer three ways to get an object's prototype:
   *
   * 1. obj->staticPrototype() returns the prototype, but it asserts if obj
   *    is a proxy, and the proxy has opted to dynamically compute its
   *    prototype using a getPrototype() handler.
   * 2. obj->taggedProto() returns a TaggedProto, which can be tested to
   *    check if the proto is an object, nullptr, or lazily computed.
   * 3. js::GetPrototype(cx, obj, &proto) computes the proto of an object.
   *    If obj is a proxy with dynamically-computed prototype, this code may
   *    perform arbitrary behavior (allocation, GC, run JS) while computing
   *    the proto.
   ','line_number':303,'multiline':True]['text':' Normal objects and a subset of proxies have an uninteresting, static','line_number':332,'multiline':False]['text':' (albeit perhaps mutable) [[Prototype]].  For such objects the','line_number':333,'multiline':False]['text':' [[Prototype]] is just a value returned when needed for accesses, or','line_number':334,'multiline':False]['text':' modified in response to requests.  These objects store the','line_number':335,'multiline':False]['text':' [[Prototype]] directly within |obj->group()|.','line_number':336,'multiline':False]['text':' The remaining proxies have a [[Prototype]] requiring dynamic computation','line_number':339,'multiline':False]['text':' for every access, going through the proxy handler {get,set}Prototype and','line_number':340,'multiline':False]['text':' setImmutablePrototype methods.  (Wrappers particularly use this to keep','line_number':341,'multiline':False]['text':' the wrapper/wrappee [[Prototype]]s consistent.)','line_number':342,'multiline':False]['text':' True iff this object's [[Prototype]] is immutable.  Must be called only','line_number':349,'multiline':False]['text':' on objects with a static [[Prototype]]!','line_number':350,'multiline':False]['text':'
   * Environment chains.
   *
   * The environment chain of an object is the link in the search path when
   * a script does a name lookup on an environment object. For JS internal
   * environment objects --- Call, LexicalEnvironment, and WithEnvironment
   * --- the chain is stored in the first fixed slot of the object.  For
   * other environment objects, the chain goes directly to the global.
   *
   * In code which is not marked hasNonSyntacticScope, environment chains
   * can contain only syntactic environment objects (see
   * IsSyntacticEnvironment) with a global object at the root as the
   * environment of the outermost non-function script. In
   * hasNonSyntacticScope code, the environment of the outermost
   * non-function script might not be a global object, and can have a mix of
   * other objects above it before the global object is reached.
   ','line_number':353,'multiline':True]['text':'
   * Get the enclosing environment of an object. When called on a
   * non-EnvironmentObject, this will just be the global (the name
   * "enclosing environment" still applies in this situation because
   * non-EnvironmentObjects can be on the environment chain).
   ','line_number':371,'multiline':True]['text':' Cross-compartment wrappers are not associated with a single realm/global,','line_number':379,'multiline':False]['text':' so these methods assert the object is not a CCW.','line_number':380,'multiline':False]['text':' Returns the object's realm even if the object is a CCW (be careful, in','line_number':389,'multiline':False]['text':' this case the realm is not very meaningful because wrappers are shared by','line_number':390,'multiline':False]['text':' all realms in the compartment).','line_number':391,'multiline':False]['text':'
   * ES5 meta-object properties and operations.
   ','line_number':394,'multiline':True]['text':' Indicates whether a non-proxy is extensible.  Don't call on proxies!','line_number':399,'multiline':False]['text':' This method really shouldn't exist -- but there are a few internal','line_number':400,'multiline':False]['text':' places that want it (JITs and the like), and it'd be a pain to mark them','line_number':401,'multiline':False]['text':' all as friends.','line_number':402,'multiline':False]['text':'
   * Back to generic stuff.
   ','line_number':407,'multiline':True]['text':'
   * In addition to the generic object interface provided by JSObject,
   * specific types of objects may provide additional operations. To access,
   * these addition operations, callers should use the pattern:
   *
   *   if (obj.is<XObject>()) {
   *     XObject& x = obj.as<XObject>();
   *     x.foo();
   *   }
   *
   * These XObject classes form a hierarchy. For example, for a cloned block
   * object, the following predicates are true: is<ClonedBlockObject>,
   * is<NestedScopeObject> and is<ScopeObject>. Each of these has a
   * respective class that derives and adds operations.
   *
   * A class XObject is defined in a vm/XObject{.h, .cpp, -inl.h} file
   * triplet (along with any class YObject that derives XObject).
   *
   * Note that X represents a low-level representation and does not query the
   * [[Class]] property of object defined by the spec: use |JS::GetBuiltinClass|
   * for this.
   ','line_number':430,'multiline':True]['text':'
   * True if either this or CheckedUnwrap(this) is an object of class T.
   * (Only two objects are checked, regardless of how many wrappers there
   * are.)
   *
   * /!\ Note: This can be true at one point, but false later for the same
   * object, thanks to js::NukeCrossCompartmentWrapper and friends.
   ','line_number':470,'multiline':True]['text':'
   * Unwrap and downcast to class T.
   *
   * Precondition: `this->canUnwrapAs<T>()`. Note that it's not enough to
   * have checked this at some point in the past; if there's any doubt as to
   * whether js::Nuke* could have been called in the meantime, check again.
   ','line_number':481,'multiline':True]['text':'
   * Tries to unwrap and downcast to class T. Returns nullptr if (and only if) a
   * wrapper with a security policy is involved. Crashes in all builds if the
   * (possibly unwrapped) object is not of class T (for example, because it's a
   * dead wrapper).
   ','line_number':491,'multiline':True]['text':'
   * Tries to unwrap and downcast to an object with class |clasp|.  Returns
   * nullptr if (and only if) a wrapper with a security policy is involved.
   * Crashes in all builds if the (possibly unwrapped) object doesn't have class
   * |clasp| (for example, because it's a dead wrapper).
   ','line_number':500,'multiline':True]['text':'
   * Tries to unwrap and downcast to class T. Returns nullptr if a wrapper with
   * a security policy is involved or if the object does not have class T.
   ','line_number':508,'multiline':True]['text':' Maximum size in bytes of a JSObject.','line_number':520,'multiline':False]['text':' JIT Accessors.','line_number':530,'multiline':False]['text':'','line_number':531,'multiline':False]['text':' To help avoid writing Spectre-unsafe code, we only allow MacroAssembler','line_number':532,'multiline':False]['text':' to call the method below.','line_number':533,'multiline':False]['text':' Since the caller just called canUnwrapAs<T>(), which does a','line_number':591,'multiline':False]['text':' CheckedUnwrap, this does not need to repeat the security check.','line_number':592,'multiline':False]['text':'
 * The only sensible way to compare JSObject with == is by identity. We use
 * const& instead of * as a syntactic way to assert non-null. This leads to an
 * abundance of address-of operators to identity. Hence this overload.
 ','line_number':650,'multiline':True]['text':' Size of the various GC thing allocation sizes used for objects.','line_number':665,'multiline':False]['text':' Returns true if object may possibly use JSObject::swap. The JITs may better','line_number':692,'multiline':False]['text':' optimize objects that can never swap (and thus change their type).','line_number':693,'multiline':False]['text':'','line_number':694,'multiline':False]['text':' If ObjectMayBeSwapped is false, it is safe to guard on pointer identity to','line_number':695,'multiline':False]['text':' test immutable features of the object. For example, the target of a','line_number':696,'multiline':False]['text':' JSFunction will not change. Note: the object can still be moved by GC.','line_number':697,'multiline':False]['text':'*
 * This enum is used to select whether the defined functions should be marked as
 * builtin native instrinsics for self-hosted code.
 ','line_number':700,'multiline':True]['text':' ES6 draft rev 36 (2015 March 17) 7.1.1 ToPrimitive(vp[, preferredType]) ','line_number':710,'multiline':True]['text':'
 * toString support. (This isn't called GetClassName because there's a macro in
 * <windows.h> with that name.)
 ','line_number':728,'multiline':True]['text':'
 * Prepare a |this| object to be returned to script. This includes replacing
 * Windows with their corresponding WindowProxy.
 *
 * Helpers are also provided to first extract the |this| from specific
 * types of environment.
 ','line_number':735,'multiline':True]['text':' namespace js ','line_number':748,'multiline':True]['text':' ES6 9.1.15 GetPrototypeFromConstructor.','line_number':757,'multiline':False]['text':' https://tc39.github.io/ecma262/#sec-getprototypefromconstructor','line_number':763,'multiline':False]['text':'','line_number':764,'multiline':False]['text':' Determine which [[Prototype]] to use when creating a new object using a','line_number':765,'multiline':False]['text':' builtin constructor.','line_number':766,'multiline':False]['text':'','line_number':767,'multiline':False]['text':' This sets `proto` to `nullptr` to mean "the builtin prototype object for','line_number':768,'multiline':False]['text':' this type in the current realm", the common case.','line_number':769,'multiline':False]['text':'','line_number':770,'multiline':False]['text':' We could set it to `cx->global()->getOrCreatePrototype(protoKey)`, but','line_number':771,'multiline':False]['text':' nullptr gets a fast path in e.g. js::NewObjectWithClassProtoCommon.','line_number':772,'multiline':False]['text':'','line_number':773,'multiline':False]['text':' intrinsicDefaultProto can be JSProto_Null if there's no appropriate','line_number':774,'multiline':False]['text':' JSProtoKey enum; but we then select the wrong prototype object in a','line_number':775,'multiline':False]['text':' multi-realm corner case (see bug 1515167).','line_number':776,'multiline':False]['text':' We can skip the "prototype" lookup in the two common cases:','line_number':780,'multiline':False]['text':' 1.  Builtin constructor called without `new`, as in `obj = Object();`.','line_number':781,'multiline':False]['text':' 2.  Builtin constructor called with `new`, as in `obj = new Object();`.','line_number':782,'multiline':False]['text':'','line_number':783,'multiline':False]['text':' Cases that can't take the fast path include `new MySubclassOfObject()`,','line_number':784,'multiline':False]['text':' `new otherGlobal.Object()`, and `Reflect.construct(Object, [], Date)`.','line_number':785,'multiline':False]['text':' We're calling this constructor from a derived class, retrieve the','line_number':793,'multiline':False]['text':' actual prototype from newTarget.','line_number':794,'multiline':False]['text':' Generic call for constructing |this|.','line_number':800,'multiline':False]['text':' ES6 draft rev 32 (2015 Feb 2) 6.2.4.5 ToPropertyDescriptor(Obj) ','line_number':806,'multiline':True]['text':'
 * Throw a TypeError if desc.getter() or setter() is not
 * callable. This performs exactly the checks omitted by ToPropertyDescriptor
 * when checkAccessors is false.
 ','line_number':811,'multiline':True]['text':'
 * Read property descriptors from props, as for Object.defineProperties. See
 * ES5 15.2.3.7 steps 3-5.
 ','line_number':821,'multiline':True]['text':' Read the name using a dynamic lookup on the scopeChain. ','line_number':829,'multiline':True]['text':'
 * Like LookupName except returns the global object if 'name' is not found in
 * any preceding scope.
 *
 * Additionally, pobjp and propp are not needed by callers so they are not
 * returned.
 ','line_number':838,'multiline':True]['text':'
 * Like LookupName except returns the unqualified var object if 'name' is not
 * found in any preceding scope. Normally the unqualified var object is the
 * global. If the value for the name in the looked-up scope is an
 * uninitialized lexical, an UninitializedLexicalObject is returned.
 *
 * Additionally, pobjp is not needed by callers so it is not returned.
 ','line_number':849,'multiline':True]['text':' namespace js','line_number':861,'multiline':False]['text':'
 * Like JS::FromPropertyDescriptor, but ignore desc.object() and always set vp
 * to an object on success.
 *
 * Use JS::FromPropertyDescriptor for getOwnPropertyDescriptor, since
 * desc.object() is used to indicate whether a result was found or not.  Use
 * this instead for defineProperty: it would be senseless to define a "missing"
 * property.
 ','line_number':886,'multiline':True]['text':' obj is a JSObject*, but we root it immediately up front. We do it','line_number':899,'multiline':False]['text':' that way because we need a Rooted temporary in this method anyway.','line_number':900,'multiline':False]['text':' Wrap boolean, number or string as Boolean, Number or String object. ','line_number':904,'multiline':True]['text':' namespace js ','line_number':908,'multiline':True]['text':'
 * Report a TypeError: "so-and-so is not an object".
 * Using NotNullObject is usually less code.
 ','line_number':946,'multiline':True]['text':'
 * Report a TypeError: "SOMETHING must be an object, got VALUE".
 * Using NotNullObject is usually less code.
 *
 * By default this function will attempt to report the expression which computed
 * the value which given as argument. This can be disabled by using
 * JSDVG_IGNORE_STACK.
 ','line_number':960,'multiline':True]['text':'
 * Report a TypeError: "N-th argument of FUN must be an object, got VALUE".
 * Using NotNullObjectArg is usually less code.
 ','line_number':990,'multiline':True]['text':' Helper for throwing, always returns false. ','line_number':1010,'multiline':True]['text':'
 * ES6 rev 29 (6 Dec 2014) 7.3.13. Mark obj as non-extensible, and adjust each
 * of obj's own properties' attributes appropriately: each property becomes
 * non-configurable, and if level == Frozen, data properties become
 * non-writable as well.
 ','line_number':1014,'multiline':True]['text':'
 * ES6 rev 29 (6 Dec 2014) 7.3.14. Code shared by Object.isSealed and
 * Object.isFrozen.
 ','line_number':1027,'multiline':True]['text':'
 * A generic trace hook that calls the object's 'trace' method.
 *
 * If you are introducing a new JSObject subclass, MyObject, that needs a custom
 * JSClassOps::trace function, it's often helpful to write `trace` as a
 * non-static member function, since `this` will the correct type. In this case,
 * you can use `CallTraceMethod<MyObject>` as your JSClassOps::trace value.
 ','line_number':1054,'multiline':True]['text':' namespace ctypes','line_number':1074,'multiline':False]['text':' namespace js ','line_number':1078,'multiline':True]['text':' vm_JSObject_h ','line_number':1080,'multiline':True]