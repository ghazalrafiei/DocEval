['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' Copyright 2012 the V8 project authors. All rights reserved.','line_number':2,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':3,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':4,'multiline':False]['text':' met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':7,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':9,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':10,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':11,'multiline':False]['text':'       with the distribution.','line_number':12,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':13,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':14,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':17,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':18,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':19,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':20,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':21,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':23,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':24,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':25,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':26,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':27,'multiline':False]['text':' When the SingleStepCallback is called, the simulator is about to execute','line_number':54,'multiline':False]['text':' sim->get_pc() and the current machine state represents the completed','line_number':55,'multiline':False]['text':' execution of the previous pc.','line_number':56,'multiline':False]['text':' VFP rounding modes. See ARM DDI 0406B Page A2-29.','line_number':59,'multiline':False]['text':' Round to Nearest.','line_number':61,'multiline':False]['text':' Round towards Plus Infinity.','line_number':62,'multiline':False]['text':' Round towards Minus Infinity.','line_number':63,'multiline':False]['text':' Round towards zero.','line_number':64,'multiline':False]['text':' Aliases.','line_number':66,'multiline':False]['text':' Per thread simulator state.','line_number':78,'multiline':False]['text':' Returns nullptr on OOM.','line_number':191,'multiline':False]['text':' Constructor/destructor are for internal use only; use the static methods','line_number':196,'multiline':False]['text':' above.','line_number':197,'multiline':False]['text':' The currently executing Simulator instance. Potentially there can be one','line_number':201,'multiline':False]['text':' for each native thread.','line_number':202,'multiline':False]['text':' Disassemble some instructions starting at instr and print them','line_number':207,'multiline':False]['text':' on stdout.  Useful for working within GDB after a MOZ_CRASH(),','line_number':208,'multiline':False]['text':' among other things.','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':' Typical use within a crashed instruction decoding method is simply:','line_number':211,'multiline':False]['text':'','line_number':212,'multiline':False]['text':'   call Simulator::disassemble(instr, 1)','line_number':213,'multiline':False]['text':'','line_number':214,'multiline':False]['text':' or use one of the more convenient inline methods below.','line_number':215,'multiline':False]['text':' Disassemble one instruction.','line_number':218,'multiline':False]['text':' "call disasm(instr)"','line_number':219,'multiline':False]['text':' Disassemble n instructions starting at instr.','line_number':222,'multiline':False]['text':' "call disasm(instr, 3)"','line_number':223,'multiline':False]['text':' Skip backwards m instructions before starting, then disassemble n','line_number':226,'multiline':False]['text':' instructions.','line_number':227,'multiline':False]['text':' "call disasm(instr, 3, 7)"','line_number':228,'multiline':False]['text':' Accessors for register state. Reading the pc value adheres to the ARM','line_number':233,'multiline':False]['text':' architecture specification and is off by a 8 from the currently executing','line_number':234,'multiline':False]['text':' instruction.','line_number':235,'multiline':False]['text':' Support for VFP.','line_number':242,'multiline':False]['text':' Special case of set_register and get_register to access the raw PC value.','line_number':275,'multiline':False]['text':' Executes ARM instructions until the PC reaches end_sim_pc.','line_number':291,'multiline':False]['text':' Sets up the simulator state and grabs the result on return.','line_number':295,'multiline':False]['text':' Debugger input.','line_number':298,'multiline':False]['text':' Returns true if pc register contains one of the 'special_values' defined','line_number':302,'multiline':False]['text':' below (bad_lr, end_sim_pc).','line_number':303,'multiline':False]['text':' Known bad pc value to ensure that the simulator does not execute','line_number':308,'multiline':False]['text':' without being properly setup.','line_number':309,'multiline':False]['text':' A pc value used to signal the simulator to stop execution. Generally','line_number':311,'multiline':False]['text':' the lr is set to this value on transition from native C code to','line_number':312,'multiline':False]['text':' simulated execution, so that the simulator can "return" to the native','line_number':313,'multiline':False]['text':' C code.','line_number':314,'multiline':False]['text':' ForbidUnaligned means "always fault on unaligned access".','line_number':318,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' AllowUnaligned means "allow the unaligned access if other conditions are','line_number':320,'multiline':False]['text':' met".  The "other conditions" vary with the instruction: For all','line_number':321,'multiline':False]['text':' instructions the base condition is !HasAlignmentFault(), ie, the chip is','line_number':322,'multiline':False]['text':' configured to allow unaligned accesses.  For instructions like VLD1','line_number':323,'multiline':False]['text':' there is an additional constraint that the alignment attribute in the','line_number':324,'multiline':False]['text':' instruction must be set to "default alignment".','line_number':325,'multiline':False]['text':' Checks if the current instruction should be executed based on its','line_number':331,'multiline':False]['text':' condition bits.','line_number':332,'multiline':False]['text':' Helper functions to set the conditional flags in the architecture state.','line_number':335,'multiline':False]['text':' Support for VFP.','line_number':346,'multiline':False]['text':' Helper functions to decode common "addressing" modes','line_number':352,'multiline':False]['text':' Stop helper functions.','line_number':361,'multiline':False]['text':' Handle a wasm interrupt triggered by an async signal handler.','line_number':370,'multiline':False]['text':' Handle any wasm faults, returning true if the fault was handled.','line_number':373,'multiline':False]['text':' This method is rather hot so inline the normal (no-wasm) case.','line_number':374,'multiline':False]['text':' Read and write memory.','line_number':390,'multiline':False]['text':' Note: Overloaded on the sign of the value.','line_number':401,'multiline':False]['text':' Executing is handled based on the instruction type.','line_number':427,'multiline':False]['text':' Both type 0 and type 1 rolled into one.','line_number':428,'multiline':False]['text':' Support for VFP.','line_number':437,'multiline':False]['text':' Support for some system functions.','line_number':448,'multiline':False]['text':' Executes one instruction.','line_number':451,'multiline':False]['text':' For testing the MoveResolver code, a MoveResolver is set up, and','line_number':457,'multiline':False]['text':' the VFP registers are loaded with pre-determined values,','line_number':458,'multiline':False]['text':' then the sequence of code is simulated.  In order to test this with the','line_number':459,'multiline':False]['text':' simulator, the callee-saved registers can't be trashed. This flag','line_number':460,'multiline':False]['text':' disables that feature.','line_number':461,'multiline':False]['text':' Runtime call support.','line_number':464,'multiline':False]['text':' Handle arguments and return value for runtime FP functions.','line_number':469,'multiline':False]['text':' Architecture state.','line_number':485,'multiline':False]['text':' Saturating instructions require a Q flag to indicate saturation.','line_number':486,'multiline':False]['text':' There is currently no way to read the CPSR directly, and thus read the Q','line_number':487,'multiline':False]['text':' flag, so this is left unimplemented.','line_number':488,'multiline':False]['text':' VFP architecture state.','line_number':495,'multiline':False]['text':' VFP rounding mode. See ARM DDI 0406B Page A2-29.','line_number':502,'multiline':False]['text':' VFP FP exception flags architecture state.','line_number':506,'multiline':False]['text':' Simulator support.','line_number':513,'multiline':False]['text':' Debugger input.','line_number':519,'multiline':False]['text':' Registered breakpoints.','line_number':522,'multiline':False]['text':' Single-stepping support','line_number':526,'multiline':False]['text':' A stop is watched if its code is less than kNumOfWatchedStops.','line_number':531,'multiline':False]['text':' Only watched stops support enabling/disabling and the counter feature.','line_number':532,'multiline':False]['text':' Breakpoint is disabled if bit 31 is set.','line_number':535,'multiline':False]['text':' A stop is enabled, meaning the simulator will stop when meeting the','line_number':538,'multiline':False]['text':' instruction, if bit 31 of watched_stops_[code].count is unset.','line_number':539,'multiline':False]['text':' The value watched_stops_[code].count & ~(1 << 31) indicates how many times','line_number':540,'multiline':False]['text':' the breakpoint was hit or gone through.','line_number':541,'multiline':False]['text':' Exclusive access monitor','line_number':552,'multiline':False]['text':' Process wide simulator state.','line_number':561,'multiline':False]['text':' ICache checking.','line_number':567,'multiline':False]['text':' This lock creates a critical section around 'redirection_' and','line_number':599,'multiline':False]['text':' 'icache_', which are referenced both by the execution engine','line_number':600,'multiline':False]['text':' and by the off-thread compiler (see Redirection::Get in the cpp file).','line_number':601,'multiline':False]['text':' Technically we need the lock to access the innards of the','line_number':609,'multiline':False]['text':' icache, not to take its address, but the latter condition','line_number':610,'multiline':False]['text':' serves as a useful complement to the former.','line_number':611,'multiline':False]['text':' namespace jit','line_number':627,'multiline':False]['text':' namespace js','line_number':628,'multiline':False]['text':' JS_SIMULATOR_ARM ','line_number':630,'multiline':True]['text':' jit_arm_Simulator_arm_h ','line_number':632,'multiline':True]