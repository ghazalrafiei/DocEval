['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Given the last found common dominator and a new definition to dominate, the','line_number':21,'multiline':False]['text':' CommonDominator function returns the basic block which dominate the last','line_number':22,'multiline':False]['text':' common dominator and the definition. If no such block exists, then this','line_number':23,'multiline':False]['text':' functions return null.','line_number':24,'multiline':False]['text':' This is the first instruction visited, record its basic block as being','line_number':27,'multiline':False]['text':' the only interesting one.','line_number':28,'multiline':False]['text':' Iterate on immediate dominators of the known common dominator to find a','line_number':33,'multiline':False]['text':' block which dominates all previous uses as well as this instruction.','line_number':34,'multiline':False]['text':' All uses are dominated, so, this cannot happen unless the graph','line_number':37,'multiline':False]['text':' coherency is not respected.','line_number':38,'multiline':False]['text':' Only instructions which can be recovered on bailout can be moved','line_number':61,'multiline':False]['text':' into the bailout paths.','line_number':62,'multiline':False]['text':' Compute a common dominator for all uses of the current','line_number':68,'multiline':False]['text':' instruction.','line_number':69,'multiline':False]['text':' If the instruction is a Phi, then we should dominate the','line_number':90,'multiline':False]['text':' predecessor from which the value is coming from.','line_number':91,'multiline':False]['text':' Leave this instruction for DCE.','line_number':103,'multiline':False]['text':' We have no uses, so sink this instruction in all the bailout','line_number':108,'multiline':False]['text':' paths.','line_number':109,'multiline':False]['text':' This guard is temporarly moved here as the above code deals with','line_number':118,'multiline':False]['text':' Dead Code elimination, which got moved into this Sink phase, as','line_number':119,'multiline':False]['text':' the Dead Code elimination used to move instructions with no-live','line_number':120,'multiline':False]['text':' uses to the bailout path.','line_number':121,'multiline':False]['text':' To move an effectful instruction, we would have to verify that the','line_number':126,'multiline':False]['text':' side-effect is not observed. In the mean time, we just inhibit','line_number':127,'multiline':False]['text':' this optimization on effectful instructions.','line_number':128,'multiline':False]['text':' If all the uses are under a loop, we might not want to work','line_number':133,'multiline':False]['text':' against LICM by moving everything back into the loop, but if the','line_number':134,'multiline':False]['text':' loop is it-self inside an if, then we still want to move the','line_number':135,'multiline':False]['text':' computation under this if statement.','line_number':136,'multiline':False]['text':' Only move instructions if there is a branch between the dominator','line_number':142,'multiline':False]['text':' of the uses and the original instruction. This prevent moving the','line_number':143,'multiline':False]['text':' computation of the arguments into an inline function if there is','line_number':144,'multiline':False]['text':' no major win.','line_number':145,'multiline':False]['text':' Skip to the next instruction if we cannot find a common dominator','line_number':159,'multiline':False]['text':' for all the uses of this instruction, or if the common dominator','line_number':160,'multiline':False]['text':' correspond to the block of the current instruction.','line_number':161,'multiline':False]['text':' Only instruction which can be recovered on bailout and which are','line_number':166,'multiline':False]['text':' sinkable can be moved into blocks which are below while filling','line_number':167,'multiline':False]['text':' the resume points with a clone which is recovered on bailout.','line_number':168,'multiline':False]['text':' If the instruction has live uses and if it is clonable, then we','line_number':170,'multiline':False]['text':' can clone the instruction for all non-dominated uses and move the','line_number':171,'multiline':False]['text':' instruction into the block which is dominating all live uses.','line_number':172,'multiline':False]['text':' If the block is a split-edge block, which is created for folding','line_number':177,'multiline':False]['text':' test conditions, then the block has no resume point and has','line_number':178,'multiline':False]['text':' multiple predecessors.  In such case, we cannot safely move','line_number':179,'multiline':False]['text':' bailing instruction to these blocks as we have no way to bailout.','line_number':180,'multiline':False]['text':' Copy the arguments and clone the instruction.','line_number':190,'multiline':False]['text':' We should not update the producer of the entry resume point, as','line_number':205,'multiline':False]['text':' it cannot refer to any instruction within the basic block excepts','line_number':206,'multiline':False]['text':' for Phi nodes.','line_number':207,'multiline':False]['text':' Replace the instruction by its clone in all the resume points /','line_number':210,'multiline':False]['text':' recovered-on-bailout instructions which are not in blocks which','line_number':211,'multiline':False]['text':' are dominated by the usesDominator block.','line_number':212,'multiline':False]['text':' If the consumer is a Phi, then we look for the index of the','line_number':217,'multiline':False]['text':' use to find the corresponding predecessor block, which is','line_number':218,'multiline':False]['text':' then used as the consumer block.','line_number':219,'multiline':False]['text':' Keep the current instruction for all dominated uses, except','line_number':226,'multiline':False]['text':' for the entry resume point of the block in which the','line_number':227,'multiline':False]['text':' instruction would be moved into.','line_number':228,'multiline':False]['text':' As we move this instruction in a different block, we should','line_number':238,'multiline':False]['text':' verify that we do not carry over a resume point which would refer','line_number':239,'multiline':False]['text':' to an outdated state of the control flow.','line_number':240,'multiline':False]['text':' Now, that all uses which are not dominated by usesDominator are','line_number':245,'multiline':False]['text':' using the cloned instruction, we can safely move the instruction','line_number':246,'multiline':False]['text':' into the usesDominator block.','line_number':247,'multiline':False]['text':' namespace jit','line_number':257,'multiline':False]['text':' namespace js','line_number':258,'multiline':False]