['text':' Copyright (C) 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' file: rbbi_cache.h','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' DictionaryCache  stores the boundaries obtained from a run of dictionary characters.
 *                 Dictionary boundaries are moved first to this cache, then from here
 *                 to the main BreakCache, where they may inter-leave with non-dictionary
 *                 boundaries. The public BreakIterator API always fetches directly
 *                 from the main BreakCache, not from here.
 *
 *                 In common situations, the number of boundaries in a single dictionary run
 *                 should be quite small, it will be terminated by punctuation, spaces,
 *                 or any other non-dictionary characters. The main BreakCache may end
 *                 up with boundaries from multiple dictionary based runs.
 *
 *                 The boundaries are stored in a simple ArrayList (vector), with the
 *                 assumption that they will be accessed sequentially.
 ','line_number':20,'multiline':True]['text':'*
     * Populate the cache with the dictionary based boundaries within a region of text.
     * @param startPos  The start position of a range of text
     * @param endPos    The end position of a range of text
     * @param firstRuleStatus The rule status index that applies to the break at startPos
     * @param otherRuleStatus The rule status index that applies to boundaries other than startPos
     * @internal
     ','line_number':44,'multiline':True]['text':' A vector containing the boundaries.','line_number':59,'multiline':False]['text':' Index in fBreaks of last boundary returned by following()','line_number':60,'multiline':False]['text':'    or preceding(). Optimizes sequential access.','line_number':61,'multiline':False]['text':' Text position of first boundary in cache.','line_number':62,'multiline':False]['text':' Last boundary in cache. Which is the limit of the','line_number':63,'multiline':False]['text':'    text segment being handled by the dictionary.','line_number':64,'multiline':False]['text':' Rule status info for first boundary.','line_number':65,'multiline':False]['text':' Rule status info for 2nd through last boundaries.','line_number':66,'multiline':False]['text':'
 * class BreakCache
 *
 * Cache of break boundary positions and rule status values.
 * Break iterator API functions, next(), previous(), etc., will use cached results
 * when possible, and otherwise cache new results as they are obtained.
 *
 * Uniformly caches both dictionary and rule based (non-dictionary) boundaries.
 *
 * The cache is implemented as a single circular buffer.
 ','line_number':70,'multiline':True]['text':'
 * size of the circular cache buffer.
 ','line_number':82,'multiline':True]['text':' Move the iteration state to the position following the startPosition.','line_number':104,'multiline':False]['text':' Input position must be pinned to the input length.','line_number':105,'multiline':False]['text':'
     * Update the state of the public BreakIterator (fBI) to reflect the
     * current state of the break iterator cache (this).
     ','line_number':110,'multiline':True]['text':'*
     * Add boundaries to the cache near the specified position.
     * The given position need not be a boundary itself.
     * The input position must be within the range of the text, and
     * on a code point boundary.
     * If the requested position is a break boundary, leave the iteration
     * position on it.
     * If the requested position is not a boundary, leave the iteration
     * position on the preceding boundary and include both the
     * preceding and following boundaries in the cache.
     * Additional boundaries, either preceding or following, may be added
     * to the cache as a side effect.
     *
     * Return false if the operation failed.
     ','line_number':116,'multiline':True]['text':'*
     *  Add boundary(s) to the cache following the current last boundary.
     *  Return false if at the end of the text, and no more boundaries can be added.
     *  Leave iteration position at the first newly added boundary, or unchanged if no boundary was added.
     ','line_number':133,'multiline':True]['text':'*
     *  Add one or more boundaries to the cache preceding the first currently cached boundary.
     *  Leave the iteration position on the first added boundary.
     *  Return false if no boundaries could be added (if at the start of the text.)
     ','line_number':140,'multiline':True]['text':'
     * Add the boundary following the current position.
     * The current position can be left as it was, or changed to the newly added boundary,
     * as specified by the update parameter.
     ','line_number':152,'multiline':True]['text':'
     * Add the boundary preceding the current position.
     * The current position can be left as it was, or changed to the newly added boundary,
     * as specified by the update parameter.
     ','line_number':160,'multiline':True]['text':'*
     *  Set the cache position to the specified position, or, if the position
     *  falls between to cached boundaries, to the preceding boundary.
     *  Fails if the requested position is outside of the range of boundaries currently held by the cache.
     *  The startPosition must be on a code point boundary.
     *
     *  Return true if successful, false if the specified position is after
     *  the last cached boundary or before the first.
     ','line_number':167,'multiline':True]['text':' inclusive','line_number':188,'multiline':False]['text':' #if !UCONFIG_NO_BREAK_ITERATION','line_number':201,'multiline':False]['text':' RBBI_CACHE_H','line_number':203,'multiline':False]