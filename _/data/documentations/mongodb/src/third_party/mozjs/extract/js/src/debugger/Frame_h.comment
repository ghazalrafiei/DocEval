['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' for Maybe','line_number':10,'multiline':False]['text':' for Range','line_number':11,'multiline':False]['text':' for Result','line_number':12,'multiline':False]['text':' for size_t','line_number':14,'multiline':False]['text':' for JSContext, CallArgs','line_number':16,'multiline':False]['text':' for Value, MutableHandleValue, HandleObject','line_number':18,'multiline':False]['text':' for ResumeMode','line_number':19,'multiline':False]['text':' for ResumeMode, Handler, Debugger','line_number':20,'multiline':False]['text':' for HeapPtr','line_number':21,'multiline':False]['text':' for HandleDebuggerFrame, HandleNativeObject','line_number':22,'multiline':False]['text':' for FrameIter','line_number':23,'multiline':False]['text':' for JSObject','line_number':24,'multiline':False]['text':' for NativeObject','line_number':25,'multiline':False]['text':' for AbstractFramePtr','line_number':26,'multiline':False]['text':'
 * An OnStepHandler represents a handler function that is called when a small
 * amount of progress is made in a frame.
 ','line_number':33,'multiline':True]['text':'
   * If we have made a small amount of progress in a frame, this method is
   * called with the frame as argument. If succesful, this method should
   * return true, with `resumeMode` and `vp` set to a resumption value
   * specifiying how execution should continue.
   ','line_number':38,'multiline':True]['text':'
 * An OnPopHandler represents a handler function that is called just before a
 * frame is popped.
 ','line_number':63,'multiline':True]['text':'
   * The given `frame` is about to be popped; `completion` explains why.
   *
   * When this method returns true, it must set `resumeMode` and `vp` to a
   * resumption value specifying how execution should continue.
   *
   * When this method returns false, it should set an exception on `cx`.
   ','line_number':68,'multiline':True]['text':' If this is a frame for a generator call, and the generator object has','line_number':128,'multiline':False]['text':' been created (which doesn't happen until after default argument','line_number':129,'multiline':False]['text':' evaluation and destructuring), then this is a PrivateValue pointing to a','line_number':130,'multiline':False]['text':' GeneratorInfo struct that points to the call's AbstractGeneratorObject.','line_number':131,'multiline':False]['text':' This allows us to implement Debugger.Frame methods even while the call is','line_number':132,'multiline':False]['text':' suspended, and we have no FrameIter::Data.','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':' While Debugger::generatorFrames maps an AbstractGeneratorObject to its','line_number':135,'multiline':False]['text':' Debugger.Frame, this link represents the reverse relation, from a','line_number':136,'multiline':False]['text':' Debugger.Frame to its generator object. This slot is set if and only if','line_number':137,'multiline':False]['text':' there is a corresponding entry in generatorFrames.','line_number':138,'multiline':False]['text':' Like isOnStack, but works even in the midst of a relocating GC.','line_number':192,'multiline':False]['text':' If hasGeneratorInfo(), return an direct cross-compartment reference to this','line_number':203,'multiline':False]['text':' Debugger.Frame's generator object.','line_number':204,'multiline':False]['text':'
   * Associate the generator object genObj with this Debugger.Frame. This
   * association allows the Debugger.Frame to track the generator's execution
   * across suspensions and resumptions, and to implement some methods even
   * while the generator is suspended.
   *
   * The context `cx` must be in the Debugger.Frame's realm, and `genObj` must
   * be in a debuggee realm.
   *
   * Technically, the generator activation need not actually be on the stack
   * right now; it's okay to call this method on a Debugger.Frame that has no
   * ScriptFrameIter::Data at present. However, this function has no way to
   * verify that genObj really is the generator associated with the call for
   * which this Debugger.Frame was originally created, so it's best to make the
   * association while the call is on the stack, and the relationships are easy
   * to discern.
   ','line_number':211,'multiline':True]['text':'
   * Undo the effects of a prior call to setGenerator.
   *
   * If provided, owner must be the Debugger to which this Debugger.Frame
   * belongs; remove this frame's entry from its generatorFrames map, and clean
   * up its cross-compartment wrapper table entry. The owner must be passed
   * unless this method is being called from the Debugger.Frame's finalizer. (In
   * that case, the owner is not reliably available, and is not actually
   * necessary.)
   *
   * If maybeGeneratorFramesEnum is non-null, use it to remove this frame's
   * entry from the Debugger's generatorFrames weak map. In this case, this
   * function will not otherwise disturb generatorFrames. Passing the enum
   * allows this function to be used while iterating over generatorFrames.
   ','line_number':232,'multiline':True]['text':'
   * Called after a generator/async frame is resumed, before exposing this
   * Debugger.Frame object to any hooks.
   ','line_number':249,'multiline':True]['text':' namespace js ','line_number':299,'multiline':True]['text':' debugger_Frame_h ','line_number':301,'multiline':True]