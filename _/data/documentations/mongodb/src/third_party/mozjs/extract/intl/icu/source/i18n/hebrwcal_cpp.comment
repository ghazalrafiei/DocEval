['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
* Copyright (C) 2003-2016, International Business Machines Corporation
* and others. All Rights Reserved.
******************************************************************************
*
* File HEBRWCAL.CPP
*
* Modification History:
*
*   Date        Name        Description
*   12/03/2003  srl         ported from java HebrewCalendar
*****************************************************************************
','line_number':3,'multiline':True]['text':' Math','line_number':25,'multiline':False]['text':' CalendarAstronomer','line_number':26,'multiline':False]['text':' Hebrew Calendar implementation','line_number':30,'multiline':False]['text':'*
* The absolute date, in milliseconds since 1/1/1970 AD, Gregorian,
* of the start of the Hebrew calendar.  In order to keep this calendar's
* time of day in sync with that of the Gregorian calendar, we use
* midnight, rather than sunset the day before.
','line_number':32,'multiline':True]['text':'static const double EPOCH_MILLIS = -180799862400000.; // 1/1/1 HY','line_number':38,'multiline':False]['text':' Minimum  Greatest    Least  Maximum','line_number':41,'multiline':False]['text':'           Minimum  Maximum','line_number':42,'multiline':False]['text':' ERA','line_number':43,'multiline':False]['text':' YEAR','line_number':44,'multiline':False]['text':' MONTH','line_number':45,'multiline':False]['text':' WEEK_OF_YEAR','line_number':46,'multiline':False]['text':'N/A','line_number':47,'multiline':True]['text':'N/A','line_number':47,'multiline':True]['text':'N/A','line_number':47,'multiline':True]['text':'N/A','line_number':47,'multiline':True]['text':' WEEK_OF_MONTH','line_number':47,'multiline':False]['text':' DAY_OF_MONTH','line_number':48,'multiline':False]['text':' DAY_OF_YEAR','line_number':49,'multiline':False]['text':'N/A','line_number':50,'multiline':True]['text':'N/A','line_number':50,'multiline':True]['text':'N/A','line_number':50,'multiline':True]['text':'N/A','line_number':50,'multiline':True]['text':' DAY_OF_WEEK','line_number':50,'multiline':False]['text':' DAY_OF_WEEK_IN_MONTH','line_number':51,'multiline':False]['text':'N/A','line_number':52,'multiline':True]['text':'N/A','line_number':52,'multiline':True]['text':'N/A','line_number':52,'multiline':True]['text':'N/A','line_number':52,'multiline':True]['text':' AM_PM','line_number':52,'multiline':False]['text':'N/A','line_number':53,'multiline':True]['text':'N/A','line_number':53,'multiline':True]['text':'N/A','line_number':53,'multiline':True]['text':'N/A','line_number':53,'multiline':True]['text':' HOUR','line_number':53,'multiline':False]['text':'N/A','line_number':54,'multiline':True]['text':'N/A','line_number':54,'multiline':True]['text':'N/A','line_number':54,'multiline':True]['text':'N/A','line_number':54,'multiline':True]['text':' HOUR_OF_DAY','line_number':54,'multiline':False]['text':'N/A','line_number':55,'multiline':True]['text':'N/A','line_number':55,'multiline':True]['text':'N/A','line_number':55,'multiline':True]['text':'N/A','line_number':55,'multiline':True]['text':' MINUTE','line_number':55,'multiline':False]['text':'N/A','line_number':56,'multiline':True]['text':'N/A','line_number':56,'multiline':True]['text':'N/A','line_number':56,'multiline':True]['text':'N/A','line_number':56,'multiline':True]['text':' SECOND','line_number':56,'multiline':False]['text':'N/A','line_number':57,'multiline':True]['text':'N/A','line_number':57,'multiline':True]['text':'N/A','line_number':57,'multiline':True]['text':'N/A','line_number':57,'multiline':True]['text':' MILLISECOND','line_number':57,'multiline':False]['text':'N/A','line_number':58,'multiline':True]['text':'N/A','line_number':58,'multiline':True]['text':'N/A','line_number':58,'multiline':True]['text':'N/A','line_number':58,'multiline':True]['text':' ZONE_OFFSET','line_number':58,'multiline':False]['text':'N/A','line_number':59,'multiline':True]['text':'N/A','line_number':59,'multiline':True]['text':'N/A','line_number':59,'multiline':True]['text':'N/A','line_number':59,'multiline':True]['text':' DST_OFFSET','line_number':59,'multiline':False]['text':' YEAR_WOY','line_number':60,'multiline':False]['text':'N/A','line_number':61,'multiline':True]['text':'N/A','line_number':61,'multiline':True]['text':'N/A','line_number':61,'multiline':True]['text':'N/A','line_number':61,'multiline':True]['text':' DOW_LOCAL','line_number':61,'multiline':False]['text':' EXTENDED_YEAR','line_number':62,'multiline':False]['text':'N/A','line_number':63,'multiline':True]['text':'N/A','line_number':63,'multiline':True]['text':'N/A','line_number':63,'multiline':True]['text':'N/A','line_number':63,'multiline':True]['text':' JULIAN_DAY','line_number':63,'multiline':False]['text':'N/A','line_number':64,'multiline':True]['text':'N/A','line_number':64,'multiline':True]['text':'N/A','line_number':64,'multiline':True]['text':'N/A','line_number':64,'multiline':True]['text':' MILLISECONDS_IN_DAY','line_number':64,'multiline':False]['text':'N/A','line_number':65,'multiline':True]['text':'N/A','line_number':65,'multiline':True]['text':'N/A','line_number':65,'multiline':True]['text':'N/A','line_number':65,'multiline':True]['text':' IS_LEAP_MONTH','line_number':65,'multiline':False]['text':'*
* The lengths of the Hebrew months.  This is complicated, because there
* are three different types of years, or six if you count leap years.
* Due to the rules for postponing the start of the year to avoid having
* certain holidays fall on the sabbath, the year can end up being three
* different lengths, called "deficient", "normal", and "complete".
','line_number':68,'multiline':True]['text':' Deficient  Normal     Complete','line_number':76,'multiline':False]['text':'Tishri','line_number':77,'multiline':False]['text':'Heshvan','line_number':78,'multiline':False]['text':'Kislev','line_number':79,'multiline':False]['text':'Tevet','line_number':80,'multiline':False]['text':'Shevat','line_number':81,'multiline':False]['text':'Adar I (leap years only)','line_number':82,'multiline':False]['text':'Adar','line_number':83,'multiline':False]['text':'Nisan','line_number':84,'multiline':False]['text':'Iyar','line_number':85,'multiline':False]['text':'Sivan','line_number':86,'multiline':False]['text':'Tammuz','line_number':87,'multiline':False]['text':'Av','line_number':88,'multiline':False]['text':'Elul','line_number':89,'multiline':False]['text':'*
* The cumulative # of days to the end of each month in a non-leap year
* Although this can be calculated from the MONTH_LENGTH table,
* keeping it around separately makes some calculations a lot faster
','line_number':92,'multiline':True]['text':' Deficient  Normal     Complete','line_number':99,'multiline':False]['text':' (placeholder)','line_number':100,'multiline':False]['text':' Tishri','line_number':101,'multiline':False]['text':' Heshvan','line_number':102,'multiline':False]['text':' Kislev','line_number':103,'multiline':False]['text':' Tevet','line_number':104,'multiline':False]['text':' Shevat','line_number':105,'multiline':False]['text':' (Adar I placeholder)','line_number':106,'multiline':False]['text':' Adar','line_number':107,'multiline':False]['text':' Nisan','line_number':108,'multiline':False]['text':' Iyar','line_number':109,'multiline':False]['text':' Sivan','line_number':110,'multiline':False]['text':' Tammuz','line_number':111,'multiline':False]['text':' Av','line_number':112,'multiline':False]['text':' Elul','line_number':113,'multiline':False]['text':'*
* The cumulative # of days to the end of each month in a leap year
','line_number':116,'multiline':True]['text':' Deficient  Normal     Complete','line_number':120,'multiline':False]['text':' (placeholder)','line_number':121,'multiline':False]['text':' Tishri','line_number':122,'multiline':False]['text':' Heshvan','line_number':123,'multiline':False]['text':' Kislev','line_number':124,'multiline':False]['text':' Tevet','line_number':125,'multiline':False]['text':' Shevat','line_number':126,'multiline':False]['text':' Adar I','line_number':127,'multiline':False]['text':' Adar II','line_number':128,'multiline':False]['text':' Nisan','line_number':129,'multiline':False]['text':' Iyar','line_number':130,'multiline':False]['text':' Sivan','line_number':131,'multiline':False]['text':' Tammuz','line_number':132,'multiline':False]['text':' Av','line_number':133,'multiline':False]['text':' Elul','line_number':134,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':148,'multiline':False]['text':' Constructors...','line_number':149,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':150,'multiline':False]['text':'*
* Constructs a default <code>HebrewCalendar</code> using the current time
* in the default time zone with the default locale.
* @internal
','line_number':152,'multiline':True]['text':' Call this again now that the vtable is set up properly.','line_number':161,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':180,'multiline':False]['text':' Rolling and adding functions overridden from Calendar','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':' These methods call through to the default implementation in IBMCalendar','line_number':183,'multiline':False]['text':' for most of the fields and only handle the unusual ones themselves.','line_number':184,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':185,'multiline':False]['text':'*
* Add a signed amount to a specified field, using this calendar's rules.
* For example, to add three days to the current date, you can call
* <code>add(Calendar.DATE, 3)</code>. 
* <p>
* When adding to certain fields, the values of other fields may conflict and
* need to be changed.  For example, when adding one to the {@link #MONTH MONTH} field
* for the date "30 Av 5758", the {@link #DAY_OF_MONTH DAY_OF_MONTH} field
* must be adjusted so that the result is "29 Elul 5758" rather than the invalid
* "30 Elul 5758".
* <p>
* This method is able to add to
* all fields except for {@link #ERA ERA}, {@link #DST_OFFSET DST_OFFSET},
* and {@link #ZONE_OFFSET ZONE_OFFSET}.
* <p>
* <b>Note:</b> You should always use {@link #roll roll} and add rather
* than attempting to perform arithmetic operations directly on the fields
* of a <tt>HebrewCalendar</tt>.  Since the {@link #MONTH MONTH} field behaves
* discontinuously in non-leap years, simple arithmetic can give invalid results.
* <p>
* @param field     the time field.
* @param amount    the amount to add to the field.
*
* @exception   IllegalArgumentException if the field is invalid or refers
*              to a field that cannot be handled by this method.
* @internal
','line_number':187,'multiline':True]['text':' We can't just do a set(MONTH, get(MONTH) + amount).  The','line_number':222,'multiline':False]['text':' reason is ADAR_1.  Suppose amount is +2 and we land in','line_number':223,'multiline':False]['text':' ADAR_1 -- then we have to bump to ADAR_2 aka ADAR.  But','line_number':224,'multiline':False]['text':' if amount is -2 and we land in ADAR_1, then we have to','line_number':225,'multiline':False]['text':' bump the other way -- down to SHEVAT.  - Alan 11/00','line_number':226,'multiline':False]['text':' started before ADAR_1?','line_number':231,'multiline':False]['text':' started after ADAR_1?','line_number':245,'multiline':False]['text':'*
* @deprecated ICU 2.6 use UCalendarDateFields instead of EDateFields
','line_number':271,'multiline':True]['text':'*
* Rolls (up/down) a specified amount time on the given field.  For
* example, to roll the current date up by three days, you can call
* <code>roll(Calendar.DATE, 3)</code>.  If the
* field is rolled past its maximum allowable value, it will "wrap" back
* to its minimum and continue rolling.  
* For example, calling <code>roll(Calendar.DATE, 10)</code>
* on a Hebrew calendar set to "25 Av 5758" will result in the date "5 Av 5758".
* <p>
* When rolling certain fields, the values of other fields may conflict and
* need to be changed.  For example, when rolling the {@link #MONTH MONTH} field
* upward by one for the date "30 Av 5758", the {@link #DAY_OF_MONTH DAY_OF_MONTH} field
* must be adjusted so that the result is "29 Elul 5758" rather than the invalid
* "30 Elul".
* <p>
* This method is able to roll
* all fields except for {@link #ERA ERA}, {@link #DST_OFFSET DST_OFFSET},
* and {@link #ZONE_OFFSET ZONE_OFFSET}.  Subclasses may, of course, add support for
* additional fields in their overrides of <code>roll</code>.
* <p>
* <b>Note:</b> You should always use roll and {@link #add add} rather
* than attempting to perform arithmetic operations directly on the fields
* of a <tt>HebrewCalendar</tt>.  Since the {@link #MONTH MONTH} field behaves
* discontinuously in non-leap years, simple arithmetic can give invalid results.
* <p>
* @param field     the time field.
* @param amount    the amount by which the field should be rolled.
*
* @exception   IllegalArgumentException if the field is invalid or refers
*              to a field that cannot be handled by this method.
* @internal
','line_number':279,'multiline':True]['text':'','line_number':325,'multiline':False]['text':' If it's not a leap year and we're rolling past the missing month','line_number':326,'multiline':False]['text':' of ADAR_1, we need to roll an extra month to make up for it.','line_number':327,'multiline':False]['text':'','line_number':328,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':349,'multiline':False]['text':' Support methods','line_number':350,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':351,'multiline':False]['text':' Hebrew date calculations are performed in terms of days, hours, and','line_number':353,'multiline':False]['text':' "parts" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.','line_number':354,'multiline':False]['text':' An approximate value for the length of a lunar month.','line_number':358,'multiline':False]['text':' It is used to calculate the approximate year and month of a given','line_number':359,'multiline':False]['text':' absolute date.','line_number':360,'multiline':False]['text':' The time of the new moon (in parts) on 1 Tishri, year 1 (the epoch)','line_number':365,'multiline':False]['text':' counting from noon on the day before.  BAHARAD is an abbreviation of','line_number':366,'multiline':False]['text':' Bet (Monday), Hey (5 hours from sunset), Resh-Daled (204).','line_number':367,'multiline':False]['text':'*
* Finds the day # of the first day in the given Hebrew year.
* To do this, we want to calculate the time of the Tishri 1 new moon
* in that year.
* <p>
* The algorithm here is similar to ones described in a number of
* references, including:
* <ul>
* <li>"Calendrical Calculations", by Nachum Dershowitz & Edward Reingold,
*     Cambridge University Press, 1997, pages 85-91.
*
* <li>Hebrew Calendar Science and Myths,
*     <a href="http://www.geocities.com/Athens/1584/">
*     http://www.geocities.com/Athens/1584/</a>
*
* <li>The Calendar FAQ,
*      <a href="http://www.faqs.org/faqs/calendars/faq/">
*      http://www.faqs.org/faqs/calendars/faq/</a>
* </ul>
','line_number':370,'multiline':True]['text':' # of months before year','line_number':396,'multiline':False]['text':' Fractional part of day #','line_number':399,'multiline':False]['text':' Whole # part of calculation','line_number':400,'multiline':False]['text':' Time of day','line_number':401,'multiline':False]['text':' Day of week (0 == Monday)','line_number':403,'multiline':False]['text':' If the 1st is on Sun, Wed, or Fri, postpone to the next day','line_number':406,'multiline':False]['text':' If the new moon falls after 3:11:20am (15h204p from the previous noon)','line_number':411,'multiline':False]['text':' on a Tuesday and it is not a leap year, postpone by 2 days.','line_number':412,'multiline':False]['text':' This prevents 356-day years.','line_number':413,'multiline':False]['text':' If the new moon falls after 9:32:43 1/3am (21h589p from yesterday noon)','line_number':417,'multiline':False]['text':' on a Monday and *last* year was a leap year, postpone by 1 day.','line_number':418,'multiline':False]['text':' Prevents 382-day years.','line_number':419,'multiline':False]['text':'*
* Find the day of the week for a given day
*
* @param day   The # of days since the start of the Hebrew calendar,
*              1-based (i.e. 1/1/1 AM is day 1).
','line_number':427,'multiline':True]['text':' We know that 1/1/1 AM is a Monday, which makes the math easy...','line_number':435,'multiline':False]['text':'*
* Returns the the type of a given year.
*  0   "Deficient" year with 353 or 383 days
*  1   "Normal"    year with 354 or 384 days
*  2   "Complete"  year with 355 or 385 days
','line_number':439,'multiline':True]['text':' Subtract length of leap month.','line_number':450,'multiline':False]['text':'throw new RuntimeException("Illegal year length " + yearLength + " in year " + year);','line_number':463,'multiline':False]['text':'*
* Determine whether a given Hebrew year is a leap year
*
* The rule here is that if (year % 19) == 0, 3, 6, 8, 11, 14, or 17.
* The formula below performs the same test, believe it or not.
','line_number':469,'multiline':True]['text':'return (year * 12 + 17) % 19 >= 12;','line_number':476,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':485,'multiline':False]['text':' Calendar framework','line_number':486,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':487,'multiline':False]['text':'*
* @internal
','line_number':489,'multiline':True]['text':'*
* Returns the length of the given month in the given year
* @internal
','line_number':496,'multiline':True]['text':' Resolve out-of-range months.  This is necessary in order to','line_number':501,'multiline':False]['text':' obtain the correct year.  We correct to','line_number':502,'multiline':False]['text':' a 12- or 13-month year (add/subtract 12 or 13, depending','line_number':503,'multiline':False]['text':' on the year) but since we _always_ number from 0..12, and','line_number':504,'multiline':False]['text':' the leap year determines whether or not month 5 (Adar 1)','line_number':505,'multiline':False]['text':' is present, we allow 0..12 in any given year.','line_number':506,'multiline':False]['text':' Careful: allow 0..12 in all years','line_number':510,'multiline':False]['text':' These two month lengths can vary','line_number':518,'multiline':False]['text':' The rest are a fixed length','line_number':522,'multiline':False]['text':'*
* Returns the number of days in the given Hebrew year
* @internal
','line_number':527,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':543,'multiline':False]['text':' Functions for converting from milliseconds to field values','line_number':544,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':545,'multiline':False]['text':'*
* Subclasses may override this method to compute several fields
* specific to each calendar system.  These are:
*
* <ul><li>ERA
* <li>YEAR
* <li>MONTH
* <li>DAY_OF_MONTH
* <li>DAY_OF_YEAR
* <li>EXTENDED_YEAR</ul>
* 
* Subclasses can refer to the DAY_OF_WEEK and DOW_LOCAL fields,
* which will be set when this method is called.  Subclasses can
* also call the getGregorianXxx() methods to obtain Gregorian
* calendar equivalents for the given Julian day.
*
* <p>In addition, subclasses should compute any subclass-specific
* fields, that is, fields from BASE_FIELD_COUNT to
* getFieldCount() - 1.
* @internal
','line_number':547,'multiline':True]['text':' Months (approx)','line_number':570,'multiline':False]['text':' Years (approx)','line_number':571,'multiline':False]['text':' 1st day of year','line_number':572,'multiline':False]['text':' Because of the postponement rules, it's possible to guess wrong.  Fix it.','line_number':575,'multiline':False]['text':' Now figure out which month we're in, and the date within that month','line_number':582,'multiline':False]['text':' TODO: I found dayOfYear could be out of range when','line_number':592,'multiline':False]['text':' a large value is set to julianDay.  I patched startOfYear','line_number':593,'multiline':False]['text':' to reduce the chace, but it could be still reproduced either','line_number':594,'multiline':False]['text':' by startOfYear or other places.  For now, we check','line_number':595,'multiline':False]['text':' the month is in valid range to avoid out of array index','line_number':596,'multiline':False]['text':' access problem here.  However, we need to carefully review','line_number':597,'multiline':False]['text':' the calendar implementation to check the extreme limit of','line_number':598,'multiline':False]['text':' each calendar field and the code works well for any values','line_number':599,'multiline':False]['text':' in the valid value range.  -yoshito','line_number':600,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':615,'multiline':False]['text':' Functions for converting from field values to milliseconds','line_number':616,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':617,'multiline':False]['text':'*
* @internal
','line_number':619,'multiline':True]['text':' Default to year 1','line_number':625,'multiline':False]['text':' Default to year 1','line_number':627,'multiline':False]['text':'*
* Return JD of start of given month/year.
* @internal
','line_number':632,'multiline':True]['text':'useMonth','line_number':636,'multiline':True]['text':' Resolve out-of-range months.  This is necessary in order to','line_number':638,'multiline':False]['text':' obtain the correct year.  We correct to','line_number':639,'multiline':False]['text':' a 12- or 13-month year (add/subtract 12 or 13, depending','line_number':640,'multiline':False]['text':' on the year) but since we _always_ number from 0..12, and','line_number':641,'multiline':False]['text':' the leap year determines whether or not month 5 (Adar 1)','line_number':642,'multiline':False]['text':' is present, we allow 0..12 in any given year.','line_number':643,'multiline':False]['text':' Careful: allow 0..12 in all years','line_number':647,'multiline':False]['text':' copied from GregorianCalendar','line_number':672,'multiline':False]['text':' Force an update of the state of the Calendar.','line_number':676,'multiline':False]['text':' cast away const','line_number':677,'multiline':False]['text':'*
 * The system maintains a static default century start date and Year.  They are
 * initialized the first time they are used.  Once the system default century date 
 * and year are set, they do not change.
 ','line_number':682,'multiline':True]['text':' initialize systemDefaultCentury and systemDefaultCenturyYear based','line_number':698,'multiline':False]['text':' on the current time.  They'll be set to 80 years before','line_number':699,'multiline':False]['text':' the current time.','line_number':700,'multiline':False]['text':' We have no recourse upon failure unless we want to propagate the failure','line_number':710,'multiline':False]['text':' out.','line_number':711,'multiline':False]['text':' lazy-evaluate systemDefaultCenturyStart','line_number':716,'multiline':False]['text':' lazy-evaluate systemDefaultCenturyStartYear','line_number':722,'multiline':False]['text':' UCONFIG_NO_FORMATTING','line_number':732,'multiline':False]