['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' X64 doesn't need a temp for 64bit multiplication.','line_number':55,'multiline':False]['text':' If the operand is a constant, emit near its uses.','line_number':66,'multiline':False]['text':' If the unbox is fallible, load the Value in a register first to','line_number':90,'multiline':False]['text':' avoid multiple loads.','line_number':91,'multiline':False]['text':' useI386ByteRegisters = ','line_number':148,'multiline':True]['text':' useI386ByteRegisters = ','line_number':171,'multiline':True]['text':' Case 1: the result of the operation is not used.','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':' We can omit allocating the result BigInt.','line_number':187,'multiline':False]['text':' Case 2: the result of the operation is used.','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':' For ADD and SUB we'll use XADD.','line_number':200,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' For AND/OR/XOR we need to use a CMPXCHG loop with rax as a temp register.','line_number':202,'multiline':False]['text':' useI386ByteRegisters = ','line_number':222,'multiline':True]['text':' No way to encode an int64-to-memory move on x64.','line_number':293,'multiline':False]['text':' The output may not be used but will be clobbered regardless, so','line_number':327,'multiline':False]['text':' pin the output to eax.','line_number':328,'multiline':False]['text':'','line_number':329,'multiline':False]['text':' The input values must both be in registers.','line_number':330,'multiline':False]['text':' The output may not be used but will be clobbered regardless,','line_number':347,'multiline':False]['text':' so ignore the case where we're not using the value and just','line_number':348,'multiline':False]['text':' use the output register as a temp.','line_number':349,'multiline':False]['text':' No support for 64-bit operations with constants at the masm level.','line_number':360,'multiline':False]['text':' Case 1: the result of the operation is not used.','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':' We'll emit a single instruction: LOCK ADD, LOCK SUB, LOCK AND,','line_number':366,'multiline':False]['text':' LOCK OR, or LOCK XOR.','line_number':367,'multiline':False]['text':' Case 2: the result of the operation is used.','line_number':378,'multiline':False]['text':'','line_number':379,'multiline':False]['text':' For ADD and SUB we'll use XADD with word and byte ops as','line_number':380,'multiline':False]['text':' appropriate.  Any output register can be used and if value is a','line_number':381,'multiline':False]['text':' register it's best if it's the same as output:','line_number':382,'multiline':False]['text':'','line_number':383,'multiline':False]['text':'    movl       value, output  ; if value != output','line_number':384,'multiline':False]['text':'    lock xaddl output, mem','line_number':385,'multiline':False]['text':'','line_number':386,'multiline':False]['text':' For AND/OR/XOR we need to use a CMPXCHG loop, and the output is','line_number':387,'multiline':False]['text':' always in rax:','line_number':388,'multiline':False]['text':'','line_number':389,'multiline':False]['text':'    movl          *mem, rax','line_number':390,'multiline':False]['text':' L: mov           rax, temp','line_number':391,'multiline':False]['text':'    andl          value, temp','line_number':392,'multiline':False]['text':'    lock cmpxchg  temp, mem  ; reads rax also','line_number':393,'multiline':False]['text':'    jnz           L','line_number':394,'multiline':False]['text':'    ; result in rax','line_number':395,'multiline':False]['text':'','line_number':396,'multiline':False]['text':' Note the placement of L, cmpxchg will update rax with *mem if','line_number':397,'multiline':False]['text':' *mem does not have the expected value, so reloading it at the','line_number':398,'multiline':False]['text':' top of the loop would be redundant.','line_number':399,'multiline':False]