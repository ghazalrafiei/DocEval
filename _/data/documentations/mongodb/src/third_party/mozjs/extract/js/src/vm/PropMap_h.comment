['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' [SMDOC] Property Maps','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' Property maps are used to store information about native object properties.','line_number':25,'multiline':False]['text':' Each property map represents an ordered list of (PropertyKey, PropertyInfo)','line_number':26,'multiline':False]['text':' tuples.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Each property map can store up to 8 properties (see PropMap::Capacity). To','line_number':29,'multiline':False]['text':' store more than eight properties, multiple maps must be linked together with','line_number':30,'multiline':False]['text':' the |previous| pointer.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' Shapes and Property Maps','line_number':33,'multiline':False]['text':' ------------------------','line_number':34,'multiline':False]['text':' Native object shapes represent property information as a (PropMap*, length)','line_number':35,'multiline':False]['text':' tuple. When there are no properties yet, the shape's map will be nullptr and','line_number':36,'multiline':False]['text':' the length is zero.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' For example, consider the following objects:','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'   o1 = {x: 1, y: 2}','line_number':41,'multiline':False]['text':'   o2 = {x: 3, y: 4, z: 5}','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' This is stored as follows:','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':'   +-------------+      +--------------+     +-------------------+','line_number':46,'multiline':False]['text':'   | JSObject o1 |      | Shape S1     |     | PropMap M1        |','line_number':47,'multiline':False]['text':'   |-------------+      +--------------+     +-------------------+','line_number':48,'multiline':False]['text':'   | shape: S1  -+--->  | map: M1     -+--+> | key 0: x (slot 0) |','line_number':49,'multiline':False]['text':'   | slot 0: 1   |      | mapLength: 2 |  |  | key 1: y (slot 1) |','line_number':50,'multiline':False]['text':'   | slot 1: 2   |      +--------------+  |  | key 2: z (slot 2) |','line_number':51,'multiline':False]['text':'   +-------------+                        |  | ...               |','line_number':52,'multiline':False]['text':'                                          |  +-------------------+','line_number':53,'multiline':False]['text':'                                          |','line_number':54,'multiline':False]['text':'   +-------------+      +--------------+  |','line_number':55,'multiline':False]['text':'   | JSObject o2 |      | Shape S2     |  |','line_number':56,'multiline':False]['text':'   |-------------+      +--------------+  |','line_number':57,'multiline':False]['text':'   | shape: S2  -+--->  | map: M1     -+--+','line_number':58,'multiline':False]['text':'   | slot 0: 3   |      | mapLength: 3 |','line_number':59,'multiline':False]['text':'   | slot 1: 4   |      +--------------+','line_number':60,'multiline':False]['text':'   | slot 2: 5   |','line_number':61,'multiline':False]['text':'   +-------------+','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' There's a single map M1 shared by shapes S1 and S2. Shape S1 includes only','line_number':64,'multiline':False]['text':' the first two properties and shape S2 includes all three properties.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' Class Hierarchy','line_number':67,'multiline':False]['text':' ---------------','line_number':68,'multiline':False]['text':' Property maps have the following C++ class hierarchy:','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':'   PropMap (abstract)','line_number':71,'multiline':False]['text':'    |','line_number':72,'multiline':False]['text':'    +-- SharedPropMap (abstract)','line_number':73,'multiline':False]['text':'    |      |','line_number':74,'multiline':False]['text':'    |      +-- CompactPropMap','line_number':75,'multiline':False]['text':'    |      |','line_number':76,'multiline':False]['text':'    |      +-- NormalPropMap','line_number':77,'multiline':False]['text':'    |','line_number':78,'multiline':False]['text':'    +-- DictionaryPropMap','line_number':79,'multiline':False]['text':'','line_number':80,'multiline':False]['text':' * PropMap: base class. It has a flags word and an array of PropertyKeys.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' * SharedPropMap: base class for all shared property maps. See below for more','line_number':83,'multiline':False]['text':'                  information on shared maps.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' * CompactPropMap: a shared map that stores its information more compactly','line_number':86,'multiline':False]['text':'                   than the other maps. It saves four words by not storing a','line_number':87,'multiline':False]['text':'                   PropMapTable, previous pointer, and by using a more compact','line_number':88,'multiline':False]['text':'                   PropertyInfo type for slot numbers that fit in one byte.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' * NormalPropMap: a shared map, used when CompactPropMap can't be used.','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' * DictionaryPropMap: an unshared map (used by a single object/shape). See','line_number':93,'multiline':False]['text':'                      below for more information on dictionary maps.','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':' Secondary hierarchy','line_number':96,'multiline':False]['text':' -------------------','line_number':97,'multiline':False]['text':' NormalPropMap and DictionaryPropMap store property information in the same','line_number':98,'multiline':False]['text':' way. This means property lookups don't have to distinguish between these two','line_number':99,'multiline':False]['text':' types. This is represented with a second class hierarchy:','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':'   PropMap (abstract)','line_number':102,'multiline':False]['text':'    |','line_number':103,'multiline':False]['text':'    +-- CompactPropMap','line_number':104,'multiline':False]['text':'    |','line_number':105,'multiline':False]['text':'    +-- LinkedPropMap (NormalPropMap or DictionaryPropMap)','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' Property lookup and property iteration are very performance sensitive and use','line_number':108,'multiline':False]['text':' this Compact vs Linked "view" so that they don't have to handle the three map','line_number':109,'multiline':False]['text':' types separately.','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' LinkedPropMap also stores the PropMapTable and a pointer to the |previous|','line_number':112,'multiline':False]['text':' map. Compact maps don't have these fields.','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':' To summarize these map types:','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':'   +-------------------+-------------+--------+','line_number':117,'multiline':False]['text':'   | Concrete type     | Shared/tree | Linked |','line_number':118,'multiline':False]['text':'   +-------------------+-------------+--------+','line_number':119,'multiline':False]['text':'   | CompactPropMap    | yes         | no     |','line_number':120,'multiline':False]['text':'   | NormalPropMap     | yes         | yes    |','line_number':121,'multiline':False]['text':'   | DictionaryPropMap | no          | yes    |','line_number':122,'multiline':False]['text':'   +-------------------+-------------+--------+','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':' PropMapTable','line_number':125,'multiline':False]['text':' ------------','line_number':126,'multiline':False]['text':' Finding the PropertyInfo for a particular PropertyKey requires a linear','line_number':127,'multiline':False]['text':' search if the map is small. For larger maps we can create a PropMapTable, a','line_number':128,'multiline':False]['text':' hash table that maps from PropertyKey to PropMap + index, to speed up','line_number':129,'multiline':False]['text':' property lookups.','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':' To save memory, property map tables can be discarded on GC and recreated when','line_number':132,'multiline':False]['text':' needed. AutoKeepPropMapTables can be used to avoid discarding tables in a','line_number':133,'multiline':False]['text':' particular zone. Methods to access a PropMapTable take either an','line_number':134,'multiline':False]['text':' AutoCheckCannotGC or AutoKeepPropMapTables argument, to help ensure tables','line_number':135,'multiline':False]['text':' are not purged while we're using them.','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' Shared Property Maps','line_number':138,'multiline':False]['text':' --------------------','line_number':139,'multiline':False]['text':' Shared property maps can be shared per-Zone by objects with the same property','line_number':140,'multiline':False]['text':' keys, flags, and slot numbers. To make this work, shared maps form a tree:','line_number':141,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' - Each Zone has a table that maps from first PropertyKey + PropertyInfo to','line_number':143,'multiline':False]['text':'   a SharedPropMap that begins with that property. This is used to lookup the','line_number':144,'multiline':False]['text':'   the map to use when adding the first property.','line_number':145,'multiline':False]['text':'   See ShapeZone::initialPropMaps.','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':' - When adding a property other than the first one, the property is stored in','line_number':148,'multiline':False]['text':'   the next entry of the same map when possible. If the map is full or the','line_number':149,'multiline':False]['text':'   next entry already stores a different property, a child map is created and','line_number':150,'multiline':False]['text':'   linked to the parent map.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' For example, imagine we want to create these objects:','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':'   o1 = {x: 1, y: 2, z: 3}','line_number':155,'multiline':False]['text':'   o2 = {x: 1, y: 2, foo: 4}','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' This will result in the following maps being created:','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':'     +---------------------+    +---------------------+','line_number':160,'multiline':False]['text':'     | SharedPropMap M1    |    | SharedPropMap M2    |','line_number':161,'multiline':False]['text':'     +---------------------+    +---------------------+','line_number':162,'multiline':False]['text':'     | Child M2 (index 1) -+--> | Parent M1 (index 1) |','line_number':163,'multiline':False]['text':'     +---------------------+    +---------------------+','line_number':164,'multiline':False]['text':'     | 0: x                |    | 0: x                |','line_number':165,'multiline':False]['text':'     | 1: y                |    | 1: y                |','line_number':166,'multiline':False]['text':'     | 2: z                |    | 2: foo              |','line_number':167,'multiline':False]['text':'     | ...                 |    | ...                 |','line_number':168,'multiline':False]['text':'     +---------------------+    +---------------------+','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':' M1 is the map used for initial property "x". Properties "y" and "z" can be','line_number':171,'multiline':False]['text':' stored inline. When later adding "foo" following "y", the map has to be','line_number':172,'multiline':False]['text':' forked: a child map M2 is created and M1 remembers this transition at','line_number':173,'multiline':False]['text':' property index 1 so that M2 will be used the next time properties "x", "y",','line_number':174,'multiline':False]['text':' and "foo" are added to an object.','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':' Shared maps contain a TreeData struct that stores the parent and children','line_number':177,'multiline':False]['text':' links for the SharedPropMap tree. The parent link is a tagged pointer that','line_number':178,'multiline':False]['text':' stores both the parent map and the property index of the last used property','line_number':179,'multiline':False]['text':' in the parent map before the branch. The children are stored similarly: the','line_number':180,'multiline':False]['text':' parent map can store a single child map and index, or a set of children.','line_number':181,'multiline':False]['text':' See SharedChildrenPtr.','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' Looking up a child map can then be done based on the index of the last','line_number':184,'multiline':False]['text':' property in the parent map and the new property's key and flags. So for the','line_number':185,'multiline':False]['text':' example above, the lookup key for M1 => M2 is (index 1, "foo", <flags>).','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':' Note: shared maps can have both a |previous| map and a |parent| map. They are','line_number':188,'multiline':False]['text':' equal when the previous map was full, but can be different maps when','line_number':189,'multiline':False]['text':' branching in the middle of a map like in the example above: M2 has parent M1','line_number':190,'multiline':False]['text':' but does not have a |previous| map (because it only has three properties).','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' Dictionary Property Maps','line_number':193,'multiline':False]['text':' ------------------------','line_number':194,'multiline':False]['text':' Certain operations can't be implemented (efficiently) for shared property','line_number':195,'multiline':False]['text':' maps, for example changing or deleting a property other than the last one.','line_number':196,'multiline':False]['text':' When this happens the map is copied as a DictionaryPropMap.','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':' Dictionary maps are unshared so can be mutated in place (after generating a','line_number':199,'multiline':False]['text':' new shape for the object).','line_number':200,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' Unlike shared maps, dictionary maps can have holes between two property keys','line_number':202,'multiline':False]['text':' after removing a property. When there are more holes than properties, the','line_number':203,'multiline':False]['text':' map is compacted. See DictionaryPropMap::maybeCompact.','line_number':204,'multiline':False]['text':' Template class for storing a PropMap* and a property index as tagged pointer.','line_number':216,'multiline':False]['text':' Children of shared maps. This is either:','line_number':264,'multiline':False]['text':'','line_number':265,'multiline':False]['text':' - None (no children)','line_number':266,'multiline':False]['text':' - SingleMapAndIndex (one child map, including the property index of the last','line_number':267,'multiline':False]['text':'   property before the branch)','line_number':268,'multiline':False]['text':' - SharedChildrenSet (multiple children)','line_number':269,'multiline':False]['text':'','line_number':270,'multiline':False]['text':' Because SingleMapAndIndex use all bits, this relies on the HasChildrenSet','line_number':271,'multiline':False]['text':' flag in the map to distinguish the latter two cases.','line_number':272,'multiline':False]['text':' Ensures no property map tables are purged in the current zone.','line_number':294,'multiline':False]['text':' Hash table to optimize property lookups on larger maps. This maps from','line_number':306,'multiline':False]['text':' PropertyKey to PropMapAndIndex.','line_number':307,'multiline':False]['text':' Small lookup cache. This has a hit rate of 30-60% on most workloads and is','line_number':316,'multiline':False]['text':' a lot faster than the full HashSet lookup.','line_number':317,'multiline':False]['text':' This counts the PropMapTable object itself (which must be heap-allocated)','line_number':366,'multiline':False]['text':' and its HashSet.','line_number':367,'multiline':False]['text':' init() is fallible and reports OOM to the context.','line_number':372,'multiline':False]['text':' Number of properties that can be stored in each map. This must be small','line_number':414,'multiline':False]['text':' enough so that every index fits in a tagged PropMap* pointer (MapAndIndex).','line_number':415,'multiline':False]['text':' Set if this is a CompactPropMap.','line_number':423,'multiline':False]['text':' Set if this map has a non-null previous map pointer. Never set for','line_number':426,'multiline':False]['text':' compact maps because they don't have a previous field.','line_number':427,'multiline':False]['text':' Set if this is a DictionaryPropMap.','line_number':430,'multiline':False]['text':' Set if this map can have a table. Never set for compact maps. Always set','line_number':433,'multiline':False]['text':' for dictionary maps.','line_number':434,'multiline':False]['text':' If set, this SharedPropMap has a SharedChildrenSet. Else it either has no','line_number':437,'multiline':False]['text':' children or a single child. See SharedChildrenPtr. Never set for','line_number':438,'multiline':False]['text':' dictionary maps.','line_number':439,'multiline':False]['text':' If set, this SharedPropMap was once converted to dictionary mode. This is','line_number':442,'multiline':False]['text':' only used for heuristics. Never set for dictionary maps.','line_number':443,'multiline':False]['text':' For SharedPropMap this stores the number of previous maps, clamped to','line_number':446,'multiline':False]['text':' NumPreviousMapsMax. This is used for heuristics.','line_number':447,'multiline':False]['text':' Flags word, stored in the cell header. Note that this hides the','line_number':453,'multiline':False]['text':' Cell::flags() method.','line_number':454,'multiline':False]['text':' Shared maps are stored in a tree structure. Each shared map has a TreeData','line_number':531,'multiline':False]['text':' struct linking the map to its parent and children. Initial maps (the ones','line_number':532,'multiline':False]['text':' stored in ShapeZone's initialPropMaps table) don't have a parent.','line_number':533,'multiline':False]['text':' Clamp to NumPreviousMapsMax. This is okay because this value is only used','line_number':565,'multiline':False]['text':' for heuristics.','line_number':566,'multiline':False]['text':' Heuristics used when adding a property via NativeObject::addProperty and','line_number':582,'multiline':False]['text':' friends:','line_number':583,'multiline':False]['text':'','line_number':584,'multiline':False]['text':' * If numPreviousMaps >= NumPrevMapsForAddConsiderDictionary, consider','line_number':585,'multiline':False]['text':'   converting the object to a dictionary object based on other heuristics.','line_number':586,'multiline':False]['text':'','line_number':587,'multiline':False]['text':' * If numPreviousMaps >= NumPrevMapsForAddAlwaysDictionary, always convert','line_number':588,'multiline':False]['text':'   the object to a dictionary object.','line_number':589,'multiline':False]['text':' The number of properties that can definitely be added to an object without','line_number':596,'multiline':False]['text':' triggering dictionary mode conversion in NativeObject::addProperty.','line_number':597,'multiline':False]['text':' Number of slots required for objects with this map/mapLength.','line_number':638,'multiline':False]['text':' The object only has custom data properties.','line_number':649,'multiline':False]['text':' Some builtin objects store properties in reserved slots. Make sure the','line_number':652,'multiline':False]['text':' slot span >= numReserved. See addPropertyInReservedSlot.','line_number':653,'multiline':False]['text':' Add a new property to this map. Returns the new map/mapLength, slot number,','line_number':662,'multiline':False]['text':' and object flags.','line_number':663,'multiline':False]['text':' Like addProperty, but for when the slot number is a reserved slot. A few','line_number':669,'multiline':False]['text':' builtin objects use this for initial properties.','line_number':670,'multiline':False]['text':' Like addProperty, but for when the caller already knows the slot number to','line_number':677,'multiline':False]['text':' use (or wants to assert this exact slot number is used).','line_number':678,'multiline':False]['text':' Like addProperty, but for adding a custom data property.','line_number':685,'multiline':False]['text':' Freeze or seal all properties by creating a new shared map. Returns the new','line_number':692,'multiline':False]['text':' map and object flags.','line_number':693,'multiline':False]['text':' Create a new dictionary map as copy of this map.','line_number':700,'multiline':False]['text':' Layout shared by NormalPropMap and DictionaryPropMap.','line_number':751,'multiline':False]['text':' SHAPE_INVALID_SLOT or head of slot freelist in owning dictionary-mode','line_number':881,'multiline':False]['text':' object.','line_number':882,'multiline':False]['text':' Number of holes for removed properties in this and previous maps. Used by','line_number':885,'multiline':False]['text':' compacting heuristics.','line_number':886,'multiline':False]['text':' Add a new property to this map. Returns the new map/mapLength and object','line_number':961,'multiline':False]['text':' flags. The caller is responsible for generating a new dictionary shape.','line_number':962,'multiline':False]['text':' Remove the property referenced by the table pointer. Returns the new','line_number':968,'multiline':False]['text':' map/mapLength. The caller is responsible for generating a new dictionary','line_number':969,'multiline':False]['text':' shape.','line_number':970,'multiline':False]['text':' Turn all sparse elements into dense elements. The caller is responsible','line_number':976,'multiline':False]['text':' for checking all sparse elements are plain data properties and must','line_number':977,'multiline':False]['text':' generate a new shape for the object.','line_number':978,'multiline':False]['text':' Freeze or seal all properties in this map. Returns the new object flags.','line_number':983,'multiline':False]['text':' The caller is responsible for generating a new shape for the object.','line_number':984,'multiline':False]['text':' Change a property's slot number and/or flags and return the new object','line_number':989,'multiline':False]['text':' flags. The caller is responsible for generating a new shape.','line_number':990,'multiline':False]['text':' Like changeProperty, but doesn't change the slot number.','line_number':995,'multiline':False]['text':' Hash policy for SharedPropMap children.','line_number':1086,'multiline':False]['text':' namespace js','line_number':1113,'multiline':False]['text':' JS::ubi::Nodes can point to PropMaps; they're js::gc::Cell instances','line_number':1115,'multiline':False]['text':' with no associated compartment.','line_number':1116,'multiline':False]['text':' namespace ubi','line_number':1136,'multiline':False]['text':' namespace JS','line_number':1137,'multiline':False]['text':' vm_PropMap_h','line_number':1139,'multiline':False]