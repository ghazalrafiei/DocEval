['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2000-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uoptions.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2000apr17
*   created by: Markus W. Scherer
*
*   This file provides a command line argument parser.
','line_number':3,'multiline':True]['text':' This should usually be called before calling u_parseArgs ','line_number':26,'multiline':True]['text':'#if U_PLATFORM == U_PF_OS390 && (U_CHARSET_FAMILY == U_ASCII_FAMILY)','line_number':27,'multiline':True]['text':' translate args from EBCDIC to ASCII ','line_number':28,'multiline':True]['text':'#   define U_MAIN_INIT_ARGS(argc, argv) __argvtoascii_a(argc, argv)','line_number':29,'multiline':True]['text':'#elif defined(XP_MAC_CONSOLE)','line_number':30,'multiline':True]['text':' Get the arguments from the GUI, since old Macs don't have a console Window. ','line_number':33,'multiline':True]['text':' Normally we do nothing. ','line_number':36,'multiline':True]['text':' forward declarations for the function declaration ','line_number':42,'multiline':True]['text':' function to be called for a command line option ','line_number':46,'multiline':True]['text':' values of UOption.hasArg ','line_number':49,'multiline':True]['text':' structure describing a command line option ','line_number':52,'multiline':True]['text':' "foo" for --foo ','line_number':54,'multiline':True]['text':' output placeholder, will point to the argument string, if any ','line_number':55,'multiline':True]['text':' function to be called when this option occurs ','line_number':56,'multiline':True]['text':' parameter for the function ','line_number':57,'multiline':True]['text':' 'f' for -f ','line_number':58,'multiline':True]['text':' enum value: option takes no/requires/may have argument ','line_number':59,'multiline':True]['text':' boolean for "this one occured" ','line_number':60,'multiline':True]['text':' macro for an entry in a declaration of UOption[] ','line_number':63,'multiline':True]['text':' ICU Tools option definitions ','line_number':67,'multiline':True]['text':'*
 * C Command line argument parser.
 *
 * This function takes the argv[argc] command line and a description of
 * the program's options in form of an array of UOption structures.
 * Each UOption defines a long and a short name (a string and a character)
 * for options like "--foo" and "-f".
 *
 * Each option is marked with whether it does not take an argument,
 * requires one, or optionally takes one. The argument may follow in
 * the same argv[] entry for short options, or it may always follow
 * in the next argv[] entry.
 *
 * An argument is in the next argv[] entry for both long and short name
 * options, except it is taken from directly behind the short name in
 * its own argv[] entry if there are characters following the option letter.
 * An argument in its own argv[] entry must not begin with a '-'
 * unless it is only the '-' itself. There is no restriction of the
 * argument format if it is part of the short name options's argv[] entry.
 *
 * The argument is stored in the value field of the corresponding
 * UOption entry, and the doesOccur field is set to 1 if the option
 * is found at all.
 *
 * Short name options without arguments can be collapsed into a single
 * argv[] entry. After an option letter takes an argument, following
 * letters will be taken as its argument.
 *
 * If the same option is found several times, then the last
 * argument value will be stored in the value field.
 *
 * For each option, a function can be called. This could be used
 * for options that occur multiple times and all arguments are to
 * be collected.
 *
 * All options are removed from the argv[] array itself. If the parser
 * is successful, then it returns the number of remaining non-option
 * strings (including argv[0]).
 * argv[0], the program name, is never read or modified.
 *
 * An option "--" ends option processing; everything after this
 * remains in the argv[] array.
 *
 * An option string "-" alone is treated as a non-option.
 *
 * If an option is not recognized or an argument missing, then
 * the parser returns with the negative index of the argv[] entry
 * where the error was detected.
 *
 * The OS/400 compiler requires that argv either be "char* argv[]",
 * or "const char* const argv[]", and it will not accept, 
 * "const char* argv[]" as a definition for main().
 *
 * @param argv This parameter is modified
 * @param options This parameter is modified
 ','line_number':83,'multiline':True]