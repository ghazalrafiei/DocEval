['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 2008-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  uspoof_conf.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2009Jan05  (refactoring earlier files)
*   created by: Andy Heninger
*
*   Internal classes for compiling confusable data into its binary (runtime) form.
','line_number':3,'multiline':True]['text':'---------------------------------------------------------------------','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'  buildConfusableData   Compile the source confusable data, as defined by','line_number':42,'multiline':False]['text':'                        the Unicode data file confusables.txt, into the binary','line_number':43,'multiline':False]['text':'                        structures used by the confusable detector.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':'                        The binary structures are described in uspoof_impl.h','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'     1.  Parse the data, making a hash table mapping from a UChar32 to a String.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'     2.  Sort all of the strings encountered by length, since they will need to','line_number':50,'multiline':False]['text':'         be stored in that order in the final string table.','line_number':51,'multiline':False]['text':'         TODO: Sorting these strings by length is no longer needed since the removal of','line_number':52,'multiline':False]['text':'         the string lengths table.  This logic can be removed to save processing time','line_number':53,'multiline':False]['text':'         when building confusables data.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':'     3.  Build a list of keys (UChar32s) from the four mapping tables.  Sort the','line_number':56,'multiline':False]['text':'         list because that will be the ordering of our runtime table.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':'     4.  Generate the run time string table.  This is generated before the key & value','line_number':59,'multiline':False]['text':'         tables because we need the string indexes when building those tables.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'     5.  Build the run-time key and value tables.  These are parallel tables, and are built','line_number':62,'multiline':False]['text':'         at the same time','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' key hash function','line_number':83,'multiline':False]['text':' Key Comparator','line_number':84,'multiline':False]['text':' Value Comparator','line_number':85,'multiline':False]['text':' Comparison function for ordering strings in the string pool.','line_number':111,'multiline':False]['text':' Compare by length first, then, within a group of the same length,','line_number':112,'multiline':False]['text':' by code point order.','line_number':113,'multiline':False]['text':' Conforms to the type signature for a USortComparator in uvector.h','line_number':114,'multiline':False]['text':' Convert the user input data from UTF-8 to UChar (UTF-16)','line_number':231,'multiline':False]['text':' Regular Expression to parse a line from Confusables.txt.  The expression will match','line_number':249,'multiline':False]['text':' any line.  What was matched is determined by examining which capture groups have a match.','line_number':250,'multiline':False]['text':'   Capture Group 1:  the source char','line_number':251,'multiline':False]['text':'   Capture Group 2:  the replacement chars','line_number':252,'multiline':False]['text':'   Capture Group 3-6  the table type, SL, SA, ML, or MA (deprecated)','line_number':253,'multiline':False]['text':'   Capture Group 7:  A blank or comment only line.','line_number':254,'multiline':False]['text':'   Capture Group 8:  A syntactically invalid line.  Anything that didn't match before.','line_number':255,'multiline':False]['text':' Example Line from the confusables.txt source file:','line_number':256,'multiline':False]['text':'   "1D702 ;	006E 0329 ;	SL	# MATHEMATICAL ITALIC SMALL ETA ... "','line_number':257,'multiline':False]['text':' Match the source char','line_number':259,'multiline':False]['text':' Match the replacement char(s)','line_number':260,'multiline':False]['text':'     (continued)','line_number':261,'multiline':False]['text':' Match the table type','line_number':262,'multiline':False]['text':' Match any trailing #comment','line_number':263,'multiline':False]['text':' OR match empty lines or lines with only a #comment','line_number':264,'multiline':False]['text':' OR match any line, which catches illegal lines.','line_number':265,'multiline':False]['text':' TODO: Why are we using the regex C API here? C++ would just take UnicodeString...','line_number':266,'multiline':False]['text':' Regular expression for parsing a hex number out of a space-separated list of them.','line_number':269,'multiline':False]['text':'   Capture group 1 gets the number, with spaces removed.','line_number':270,'multiline':False]['text':' Zap any Byte Order Mark at the start of input.  Changing it to a space is benign','line_number':274,'multiline':False]['text':'   given the syntax of the input.','line_number':275,'multiline':False]['text':' Parse the input, one line per iteration of this loop.','line_number':280,'multiline':False]['text':' this was a blank or comment line.','line_number':285,'multiline':False]['text':' input file syntax error.','line_number':289,'multiline':False]['text':' We have a good input line.  Extract the key character and mapping string, and','line_number':294,'multiline':False]['text':'    put them into the appropriate mapping table.','line_number':295,'multiline':False]['text':' Put the map (value) string into the string pool','line_number':315,'multiline':False]['text':' This a little like a Java intern() - any duplicates will be eliminated.','line_number':316,'multiline':False]['text':' Add the UChar32 -> string mapping to the table.','line_number':319,'multiline':False]['text':' For Unicode 8, the SL, SA and ML tables have been discontinued.','line_number':320,'multiline':False]['text':'                All input data from confusables.txt is tagged MA.','line_number':321,'multiline':False]['text':' Input data is now all parsed and collected.','line_number':327,'multiline':False]['text':' Now create the run-time binary form of the data.','line_number':328,'multiline':False]['text':'','line_number':329,'multiline':False]['text':' This is done in two steps.  First the data is assembled into vectors and strings,','line_number':330,'multiline':False]['text':'   for ease of construction, then the contents of these collections are dumped','line_number':331,'multiline':False]['text':'   into the actual raw-bytes data storage.','line_number':332,'multiline':False]['text':' Build up the string array, and record the index of each string therein','line_number':334,'multiline':False]['text':'  in the (build time only) string pool.','line_number':335,'multiline':False]['text':' Strings of length one are not entered into the strings array.','line_number':336,'multiline':False]['text':' (Strings in the table are sorted by length)','line_number':337,'multiline':False]['text':' strings of length one do not get an entry in the string table.','line_number':347,'multiline':False]['text':' Keep the single string character itself here, which is the same','line_number':348,'multiline':False]['text':'  convention that is used in the final run-time string table index.','line_number':349,'multiline':False]['text':' Construct the compile-time Key and Value tables','line_number':357,'multiline':False]['text':'','line_number':358,'multiline':False]['text':' For each key code point, check which mapping tables it applies to,','line_number':359,'multiline':False]['text':'   and create the final data for the key & value structures.','line_number':360,'multiline':False]['text':'','line_number':361,'multiline':False]['text':'   The four logical mapping tables are conflated into one combined table.','line_number':362,'multiline':False]['text':'   If multiple logical tables have the same mapping for some key, they','line_number':363,'multiline':False]['text':'     share a single entry in the combined table.','line_number':364,'multiline':False]['text':'   If more than one mapping exists for the same key code point, multiple','line_number':365,'multiline':False]['text':'     entries will be created in the table','line_number':366,'multiline':False]['text':' It is an oddity of the UnicodeSet API that simply enumerating the contained','line_number':369,'multiline':False]['text':'   code points requires a nested loop.','line_number':370,'multiline':False]['text':' Set an error code if trying to consume a long string.  Otherwise,','line_number':376,'multiline':False]['text':' codePointAndLengthToKey will abort on a U_ASSERT.','line_number':377,'multiline':False]['text':' Put the assembled data into the flat runtime array','line_number':392,'multiline':False]['text':' All of the intermediate allocated data belongs to the ConfusabledataBuilder','line_number':395,'multiline':False]['text':'  object  (this), and is deleted in the destructor.','line_number':396,'multiline':False]['text':'','line_number':400,'multiline':False]['text':' outputData     The confusable data has been compiled and stored in intermediate','line_number':401,'multiline':False]['text':'                collections and strings.  Copy it from there to the final flat','line_number':402,'multiline':False]['text':'                binary array.','line_number':403,'multiline':False]['text':'','line_number':404,'multiline':False]['text':'                Note that as each section is added to the output data, the','line_number':405,'multiline':False]['text':'                expand (reserveSpace() function will likely relocate it in memory.','line_number':406,'multiline':False]['text':'                Be careful with pointers.','line_number':407,'multiline':False]['text':'','line_number':408,'multiline':False]['text':'  The Key Table','line_number':413,'multiline':False]['text':'     While copying the keys to the runtime array,','line_number':414,'multiline':False]['text':'       also sanity check that they are sorted.','line_number':415,'multiline':False]['text':' Suppress unused variable warning.','line_number':428,'multiline':False]['text':' strictly greater because there can be only one entry per code point','line_number':429,'multiline':False]['text':' The Value Table, parallels the key table','line_number':440,'multiline':False]['text':' The Strings Table.','line_number':458,'multiline':False]['text':' Reserve an extra space so the string will be nul-terminated.  This is','line_number':461,'multiline':False]['text':' only a convenience, for when debugging; it is not needed otherwise.','line_number':462,'multiline':False]['text':' !UCONFIG_NO_REGULAR_EXPRESSIONS','line_number':477,'multiline':False]