['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Block state at the entrance of all basic blocks.','line_number':32,'multiline':False]['text':' Initialize the current block state of each block to an unknown state.','line_number':44,'multiline':False]['text':' Initialize the first block which needs to be traversed in RPO.','line_number':49,'multiline':False]['text':' Iterate over each basic block which has a valid entry state, and merge','line_number':55,'multiline':False]['text':' the state in the successor blocks.','line_number':56,'multiline':False]['text':' Get the block state as the result of the merge of all predecessors','line_number':63,'multiline':False]['text':' which have already been visited in RPO.  This means that backedges','line_number':64,'multiline':False]['text':' are not yet merged into the loop.','line_number':65,'multiline':False]['text':' Iterates over resume points, phi and instructions.','line_number':72,'multiline':False]['text':' Increment the iterator before visiting the instruction, as the','line_number':74,'multiline':False]['text':' visit function might discard itself from the basic block.','line_number':75,'multiline':False]['text':' For each successor, merge the current state into the state of the','line_number':95,'multiline':False]['text':' successors.','line_number':96,'multiline':False]['text':' Returns False if the lambda is not escaped and if it is optimizable by','line_number':112,'multiline':False]['text':' ScalarReplacementOfObject.','line_number':113,'multiline':False]['text':' The scope chain is not escaped if none of the Lambdas which are','line_number':120,'multiline':False]['text':' capturing it are escaped.','line_number':121,'multiline':False]['text':' Cannot optimize if it is observable from fun.arguments or others.','line_number':125,'multiline':False]['text':' Returns False if the object is not escaped and if it is optimizable by','line_number':154,'multiline':False]['text':' ScalarReplacementOfObject.','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' For the moment, this code is dumb as it only supports objects which are not','line_number':157,'multiline':False]['text':' changing shape, and which are known by TI at the object creation.','line_number':158,'multiline':False]['text':' Check if the object is escaped. If the object is not the first argument','line_number':179,'multiline':False]['text':' of either a known Store / Load, then we consider it as escaped. This is a','line_number':180,'multiline':False]['text':' cheap and conservative escape analysis.','line_number':181,'multiline':False]['text':' Cannot optimize if it is observable from fun.arguments or others.','line_number':185,'multiline':False]['text':' Not escaped if it is the first argument.','line_number':197,'multiline':False]['text':' Assert that MSlots are only used by MStoreDynamicSlot and','line_number':210,'multiline':False]['text':' MLoadDynamicSlot.','line_number':211,'multiline':False]['text':' toDefinition should normally never fail, since they don't get','line_number':215,'multiline':False]['text':' captured by resume points.','line_number':216,'multiline':False]['text':' This instruction is a no-op used to verify that scalar replacement','line_number':269,'multiline':False]['text':' is working as expected in jit-test.','line_number':270,'multiline':False]['text':' Used to improve the memory usage by sharing common modification.','line_number':296,'multiline':False]['text':' static ','line_number':339,'multiline':True]['text':' Annotate snapshots RValue such that we recover the store first.','line_number':350,'multiline':False]['text':' Annotate the instruction such that we do not replace it by a','line_number':353,'multiline':False]['text':' Magic(JS_OPTIMIZED_OUT) in case of removed uses.','line_number':354,'multiline':False]['text':' Uninitialized slots have an "undefined" value.','line_number':361,'multiline':False]['text':' Create a new block state and insert at it at the location of the new','line_number':365,'multiline':False]['text':' object.','line_number':366,'multiline':False]['text':' Initialize the properties of the object state.','line_number':374,'multiline':False]['text':' Hold out of resume point until it is visited.','line_number':379,'multiline':False]['text':' When a block has no state yet, create an empty one for the','line_number':393,'multiline':False]['text':' successor.','line_number':394,'multiline':False]['text':' If the successor is not dominated then the object cannot flow','line_number':396,'multiline':False]['text':' in this basic block without a Phi.  We know that no Phi exist','line_number':397,'multiline':False]['text':' in non-dominated successors as the conservative escaped','line_number':398,'multiline':False]['text':' analysis fails otherwise.  Such condition can succeed if the','line_number':399,'multiline':False]['text':' successor is a join at the end of a if-block and the object','line_number':400,'multiline':False]['text':' only exists within the branch.','line_number':401,'multiline':False]['text':' If there is only one predecessor, carry over the last state of the','line_number':406,'multiline':False]['text':' block to the successor.  As the block state is immutable, if the','line_number':407,'multiline':False]['text':' current block has multiple successors, they will share the same entry','line_number':408,'multiline':False]['text':' state.','line_number':409,'multiline':False]['text':' If we have multiple predecessors, then we allocate one Phi node for','line_number':415,'multiline':False]['text':' each predecessor, and create a new block state which only has phi','line_number':416,'multiline':False]['text':' nodes.  These would later be removed by the removal of redundant phi','line_number':417,'multiline':False]['text':' nodes.','line_number':418,'multiline':False]['text':' Fill the input of the successors Phi with undefined','line_number':431,'multiline':False]['text':' values, and each block later fills the Phi inputs.','line_number':432,'multiline':False]['text':' Add Phi in the list of Phis of the basic block.','line_number':437,'multiline':False]['text':' Insert the newly created block state instruction at the beginning','line_number':442,'multiline':False]['text':' of the successor block, after all the phi nodes.  Note that it','line_number':443,'multiline':False]['text':' would be captured by the entry resume point of the successor','line_number':444,'multiline':False]['text':' block.','line_number':445,'multiline':False]['text':' We need to re-compute successorWithPhis as the previous EliminatePhis','line_number':453,'multiline':False]['text':' phase might have removed all the Phis from the successor block.','line_number':454,'multiline':False]['text':' Copy the current slot states to the index of current block in all the','line_number':466,'multiline':False]['text':' Phi created during the first visit of the successor.','line_number':467,'multiline':False]['text':' Resume points have been replaced by the object state.','line_number':483,'multiline':False]['text':' The only remaining uses would be removed by DCE, which will also','line_number':490,'multiline':False]['text':' recover the object on bailouts.','line_number':491,'multiline':False]['text':' As long as the MObjectState is not yet seen next to the allocation, we do','line_number':500,'multiline':False]['text':' not patch the resume point to recover the side effects.','line_number':501,'multiline':False]['text':' Skip stores made on other objects.','line_number':515,'multiline':False]['text':' Clone the state and update the slot value.','line_number':520,'multiline':False]['text':' UnsafeSetReserveSlot can access baked-in slots which are guarded by','line_number':531,'multiline':False]['text':' conditions, which are not seen by the escape analysis.','line_number':532,'multiline':False]['text':' Remove original instruction.','line_number':537,'multiline':False]['text':' Skip loads made on other objects.','line_number':542,'multiline':False]['text':' Replace load by the slot value.','line_number':547,'multiline':False]['text':' UnsafeGetReserveSlot can access baked-in slots which are guarded by','line_number':551,'multiline':False]['text':' conditions, which are not seen by the escape analysis.','line_number':552,'multiline':False]['text':' Remove original instruction.','line_number':558,'multiline':False]['text':' Skip loads made on other objects.','line_number':563,'multiline':False]['text':' Remove original instruction.','line_number':568,'multiline':False]['text':' Skip stores made on other objects.','line_number':573,'multiline':False]['text':' Guard objects are replaced when they are visited.','line_number':576,'multiline':False]['text':' Clone the state and update the slot value.','line_number':582,'multiline':False]['text':' UnsafeSetReserveSlot can access baked-in slots which are guarded by','line_number':593,'multiline':False]['text':' conditions, which are not seen by the escape analysis.','line_number':594,'multiline':False]['text':' Remove original instruction.','line_number':599,'multiline':False]['text':' Skip loads made on other objects.','line_number':604,'multiline':False]['text':' Guard objects are replaced when they are visited.','line_number':607,'multiline':False]['text':' Replace load by the slot value.','line_number':613,'multiline':False]['text':' UnsafeGetReserveSlot can access baked-in slots which are guarded by','line_number':617,'multiline':False]['text':' conditions, which are not seen by the escape analysis.','line_number':618,'multiline':False]['text':' Remove original instruction.','line_number':624,'multiline':False]['text':' Skip guards on other objects.','line_number':634,'multiline':False]['text':' Replace the guard by its object.','line_number':639,'multiline':False]['text':' Remove original instruction.','line_number':642,'multiline':False]['text':' Skip checks on other objects.','line_number':651,'multiline':False]['text':' Replace the check by its object.','line_number':656,'multiline':False]['text':' Remove original instruction.','line_number':659,'multiline':False]['text':' Skip unrelated unboxes.','line_number':664,'multiline':False]['text':' Replace the unbox with the object.','line_number':670,'multiline':False]['text':' Remove the unbox.','line_number':673,'multiline':False]['text':' Skip function environment which are not aliases of the NewCallObject.','line_number':678,'multiline':False]['text':' Replace the function environment by the scope chain of the lambda.','line_number':696,'multiline':False]['text':' Remove original instruction.','line_number':699,'multiline':False]['text':' In order to recover the lambda we need to recover the scope chain, as the','line_number':708,'multiline':False]['text':' lambda is holding it.','line_number':709,'multiline':False]['text':' ins->index();','line_number':731,'multiline':False]['text':' Returns False if the elements is not escaped and if it is optimizable by','line_number':749,'multiline':False]['text':' ScalarReplacementOfArray.','line_number':750,'multiline':False]['text':' The MIRType::Elements cannot be captured in a resume point as','line_number':758,'multiline':False]['text':' it does not represent a value allocation.','line_number':759,'multiline':False]['text':' If the index is not a constant then this index can alias','line_number':766,'multiline':False]['text':' all others. We do not handle this case.','line_number':767,'multiline':False]['text':' StoreElement must bail out if it stores to a hole, in case','line_number':786,'multiline':False]['text':' there is a setter on the prototype chain. If this StoreElement','line_number':787,'multiline':False]['text':' might store to a hole, we can't scalar-replace it.','line_number':788,'multiline':False]['text':' If the index is not a constant then this index can alias','line_number':795,'multiline':False]['text':' all others. We do not handle this case.','line_number':796,'multiline':False]['text':' Dense element holes are written using MStoreHoleValueElement instead','line_number':811,'multiline':False]['text':' of MStoreElement.','line_number':812,'multiline':False]['text':' Returns False if the array is not escaped and if it is optimizable by','line_number':842,'multiline':False]['text':' ScalarReplacementOfArray.','line_number':843,'multiline':False]['text':'','line_number':844,'multiline':False]['text':' For the moment, this code is dumb as it only supports arrays which are not','line_number':845,'multiline':False]['text':' changing length, with only access with known constants.','line_number':846,'multiline':False]['text':' Check if the object is escaped. If the object is not the first argument','line_number':874,'multiline':False]['text':' of either a known Store / Load, then we consider it as escaped. This is a','line_number':875,'multiline':False]['text':' cheap and conservative escape analysis.','line_number':876,'multiline':False]['text':' Cannot optimize if it is observable from fun.arguments or others.','line_number':880,'multiline':False]['text':' This instruction is a no-op used to verify that scalar replacement','line_number':945,'multiline':False]['text':' is working as expected in jit-test.','line_number':946,'multiline':False]['text':' This class replaces every MStoreElement and MSetInitializedLength by an','line_number':960,'multiline':False]['text':' MArrayState which emulates the content of the array. All MLoadElement,','line_number':961,'multiline':False]['text':' MInitializedLength and MArrayLength are replaced by the corresponding value.','line_number':962,'multiline':False]['text':'','line_number':963,'multiline':False]['text':' In order to restore the value of the array correctly in case of bailouts, we','line_number':964,'multiline':False]['text':' replace all reference of the allocation by the MArrayState definition.','line_number':965,'multiline':False]['text':' Used to improve the memory usage by sharing common modification.','line_number':979,'multiline':False]['text':' Annotate snapshots RValue such that we recover the store first.','line_number':1032,'multiline':False]['text':' Annotate the instruction such that we do not replace it by a','line_number':1035,'multiline':False]['text':' Magic(JS_OPTIMIZED_OUT) in case of removed uses.','line_number':1036,'multiline':False]['text':' Uninitialized elements have an "undefined" value.','line_number':1043,'multiline':False]['text':' Create a new block state and insert at it at the location of the new array.','line_number':1049,'multiline':False]['text':' Initialize the elements of the array state.','line_number':1057,'multiline':False]['text':' Hold out of resume point until it is visited.','line_number':1062,'multiline':False]['text':' When a block has no state yet, create an empty one for the','line_number':1076,'multiline':False]['text':' successor.','line_number':1077,'multiline':False]['text':' If the successor is not dominated then the array cannot flow','line_number':1079,'multiline':False]['text':' in this basic block without a Phi.  We know that no Phi exist','line_number':1080,'multiline':False]['text':' in non-dominated successors as the conservative escaped','line_number':1081,'multiline':False]['text':' analysis fails otherwise.  Such condition can succeed if the','line_number':1082,'multiline':False]['text':' successor is a join at the end of a if-block and the array','line_number':1083,'multiline':False]['text':' only exists within the branch.','line_number':1084,'multiline':False]['text':' If there is only one predecessor, carry over the last state of the','line_number':1089,'multiline':False]['text':' block to the successor.  As the block state is immutable, if the','line_number':1090,'multiline':False]['text':' current block has multiple successors, they will share the same entry','line_number':1091,'multiline':False]['text':' state.','line_number':1092,'multiline':False]['text':' If we have multiple predecessors, then we allocate one Phi node for','line_number':1098,'multiline':False]['text':' each predecessor, and create a new block state which only has phi','line_number':1099,'multiline':False]['text':' nodes.  These would later be removed by the removal of redundant phi','line_number':1100,'multiline':False]['text':' nodes.','line_number':1101,'multiline':False]['text':' Fill the input of the successors Phi with undefined','line_number':1114,'multiline':False]['text':' values, and each block later fills the Phi inputs.','line_number':1115,'multiline':False]['text':' Add Phi in the list of Phis of the basic block.','line_number':1120,'multiline':False]['text':' Insert the newly created block state instruction at the beginning','line_number':1125,'multiline':False]['text':' of the successor block, after all the phi nodes.  Note that it','line_number':1126,'multiline':False]['text':' would be captured by the entry resume point of the successor','line_number':1127,'multiline':False]['text':' block.','line_number':1128,'multiline':False]['text':' We need to re-compute successorWithPhis as the previous EliminatePhis','line_number':1136,'multiline':False]['text':' phase might have removed all the Phis from the successor block.','line_number':1137,'multiline':False]['text':' Copy the current element states to the index of current block in all','line_number':1149,'multiline':False]['text':' the Phi created during the first visit of the successor.','line_number':1150,'multiline':False]['text':' As long as the MArrayState is not yet seen next to the allocation, we do','line_number':1165,'multiline':False]['text':' not patch the resume point to recover the side effects.','line_number':1166,'multiline':False]['text':' Skip other array objects.','line_number':1193,'multiline':False]['text':' Register value of the setter in the state.','line_number':1199,'multiline':False]['text':' Remove original instruction.','line_number':1211,'multiline':False]['text':' Skip other array objects.','line_number':1216,'multiline':False]['text':' Replace by the value contained at the index.','line_number':1222,'multiline':False]['text':' The only way to store a hole value in a new array is with','line_number':1226,'multiline':False]['text':' StoreHoleValueElement, which IsElementEscaped does not allow.','line_number':1227,'multiline':False]['text':' Therefore, we do not have to do a hole check.','line_number':1228,'multiline':False]['text':' Remove original instruction.','line_number':1234,'multiline':False]['text':' Skip other array objects.','line_number':1239,'multiline':False]['text':' Replace by the new initialized length.  Note that the argument of','line_number':1245,'multiline':False]['text':' MSetInitializedLength is the last index and not the initialized length.','line_number':1246,'multiline':False]['text':' To obtain the length, we need to add 1 to it, and thus we need to create','line_number':1247,'multiline':False]['text':' a new constant that we register in the ArrayState.','line_number':1248,'multiline':False]['text':' Remove original instruction.','line_number':1261,'multiline':False]['text':' Skip other array objects.','line_number':1266,'multiline':False]['text':' Replace by the value of the length.','line_number':1272,'multiline':False]['text':' Remove original instruction.','line_number':1275,'multiline':False]['text':' Skip other array objects.','line_number':1280,'multiline':False]['text':' Replace by the value of the length.','line_number':1286,'multiline':False]['text':' Remove original instruction.','line_number':1293,'multiline':False]['text':' Skip barriers on other objects.','line_number':1298,'multiline':False]['text':' Remove original instruction.','line_number':1303,'multiline':False]['text':' Skip barriers on other objects.','line_number':1309,'multiline':False]['text':' Remove original instruction.','line_number':1314,'multiline':False]['text':' Skip guards on other objects.','line_number':1319,'multiline':False]['text':' Replace the guard by its object.','line_number':1324,'multiline':False]['text':' Remove original instruction.','line_number':1327,'multiline':False]['text':' Skip guards on other objects.','line_number':1332,'multiline':False]['text':' Replace the guard by its object.','line_number':1337,'multiline':False]['text':' Remove original instruction.','line_number':1340,'multiline':False]['text':' Skip unrelated unboxes.','line_number':1345,'multiline':False]['text':' Replace the unbox with the array object.','line_number':1351,'multiline':False]['text':' Remove the unbox.','line_number':1354,'multiline':False]['text':' Returns false if the arguments object does not escape.','line_number':1395,'multiline':False]['text':' We can replace inlined arguments in scripts with OSR entries, but','line_number':1402,'multiline':False]['text':' the outermost arguments object has already been allocated before','line_number':1403,'multiline':False]['text':' we enter via OSR and can't be replaced.','line_number':1404,'multiline':False]['text':' Check all uses to see whether they can be supported without','line_number':1410,'multiline':False]['text':' allocating an ArgumentsObject.','line_number':1411,'multiline':False]['text':' If a resume point can observe this instruction, we can only optimize','line_number':1415,'multiline':False]['text':' if it is recoverable.','line_number':1416,'multiline':False]['text':' We can replace arguments.callee.','line_number':1464,'multiline':False]['text':' This is a replaceable consumer.','line_number':1482,'multiline':False]['text':' This instruction is a no-op used to test that scalar replacement','line_number':1488,'multiline':False]['text':' is working as expected.','line_number':1489,'multiline':False]['text':' Replacing the arguments object is simpler than replacing an object','line_number':1503,'multiline':False]['text':' or array, because the arguments object does not change state.','line_number':1504,'multiline':False]['text':' Iterate over each basic block.','line_number':1508,'multiline':False]['text':' Iterates over phis and instructions.','line_number':1515,'multiline':False]['text':' We do not have to visit resume points. Any resume points that capture','line_number':1516,'multiline':False]['text':' the argument object will be handled by the Sink pass.','line_number':1517,'multiline':False]['text':' Increment the iterator before visiting the instruction, as the','line_number':1519,'multiline':False]['text':' visit function might discard itself from the basic block.','line_number':1520,'multiline':False]['text':' Skip guards on other objects.','line_number':1546,'multiline':False]['text':' Replace the guard with the args object.','line_number':1552,'multiline':False]['text':' Remove the guard.','line_number':1555,'multiline':False]['text':' Skip other arguments objects.','line_number':1561,'multiline':False]['text':' Each *_OVERRIDDEN_BIT can only be set by setting or deleting a','line_number':1567,'multiline':False]['text':' property of the args object. We have already determined that the','line_number':1568,'multiline':False]['text':' args object doesn't escape, so its properties can't be mutated.','line_number':1569,'multiline':False]['text':'','line_number':1570,'multiline':False]['text':' FORWARDED_ARGUMENTS_BIT is set if any mapped argument is closed','line_number':1571,'multiline':False]['text':' over, which is an immutable property of the script. Because we','line_number':1572,'multiline':False]['text':' are replacing the args object for a known script, we can check','line_number':1573,'multiline':False]['text':' the flag once, which is done when we first attach the CacheIR,','line_number':1574,'multiline':False]['text':' and rely on it.  (Note that this wouldn't be true if we didn't','line_number':1575,'multiline':False]['text':' know the origin of args_, because it could be passed in from','line_number':1576,'multiline':False]['text':' another function.)','line_number':1577,'multiline':False]['text':' Replace the guard with the args object.','line_number':1589,'multiline':False]['text':' Remove the guard.','line_number':1592,'multiline':False]['text':' Skip unrelated unboxes.','line_number':1597,'multiline':False]['text':' Replace the unbox with the args object.','line_number':1603,'multiline':False]['text':' Remove the unbox.','line_number':1606,'multiline':False]['text':' Skip other arguments objects.','line_number':1612,'multiline':False]['text':' We don't support setting arguments in ArgumentsReplacer::escapes,','line_number':1617,'multiline':False]['text':' so we can load the initial value of the argument without worrying','line_number':1618,'multiline':False]['text':' about it being stale.','line_number':1619,'multiline':False]['text':' Inlined frames have direct access to the actual arguments.','line_number':1622,'multiline':False]['text':' Omitted arguments are not mapped to the arguments object, and','line_number':1627,'multiline':False]['text':' will always be undefined.','line_number':1628,'multiline':False]['text':' Load the argument from the frame.','line_number':1634,'multiline':False]['text':' Remove original instruction.','line_number':1644,'multiline':False]['text':' Skip other arguments objects.','line_number':1650,'multiline':False]['text':' Insert bounds check.','line_number':1661,'multiline':False]['text':' Insert bounds check.','line_number':1676,'multiline':False]['text':' Remove original instruction.','line_number':1698,'multiline':False]['text':' Skip other arguments objects.','line_number':1704,'multiline':False]['text':' Remove original instruction.','line_number':1719,'multiline':False]['text':' Skip other arguments objects.','line_number':1724,'multiline':False]['text':'constructing=','line_number':1732,'multiline':True]['text':' TODO: Should we rename MApplyArgs?','line_number':1759,'multiline':False]['text':' Skip other arguments objects.','line_number':1780,'multiline':False]['text':' Remove original instruction.','line_number':1797,'multiline':False]['text':' Phis added by Scalar Replacement are only redundant Phis which are','line_number':1850,'multiline':False]['text':' not directly captured by any resume point but only by the MDefinition','line_number':1851,'multiline':False]['text':' state. The conservative observability only focuses on Phis which are','line_number':1852,'multiline':False]['text':' not used as resume points operands.','line_number':1853,'multiline':False]['text':' namespace jit ','line_number':1863,'multiline':True]['text':' namespace js ','line_number':1864,'multiline':True]