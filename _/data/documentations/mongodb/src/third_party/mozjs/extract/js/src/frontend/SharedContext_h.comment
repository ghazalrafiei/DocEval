['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ScopeIndex','line_number':16,'multiline':False]['text':' FunctionSyntaxKind','line_number':17,'multiline':False]['text':' TaggedParserAtomIndex','line_number':19,'multiline':False]['text':' ScriptIndex','line_number':20,'multiline':False]['text':' JS::WasmModule','line_number':21,'multiline':False]['text':' js::FunctionFlags','line_number':22,'multiline':False]['text':' js::GeneratorKind, js::FunctionAsyncKind','line_number':23,'multiline':False]['text':' Used only by BytecodeEmitter.','line_number':54,'multiline':False]['text':' List of directives that may be encountered in a Directive Prologue','line_number':70,'multiline':False]['text':' (ES5 15.1).','line_number':71,'multiline':False]['text':' The kind of this-binding for the current scope. Note that arrow functions','line_number':97,'multiline':False]['text':' have a lexical this-binding so their ThisBinding is the same as the','line_number':98,'multiline':False]['text':' ThisBinding of their enclosing scope and can be any value. Derived','line_number':99,'multiline':False]['text':' constructors require TDZ checks when accessing the binding.','line_number':100,'multiline':False]['text':' If Yes, the script inherits it's "this" environment and binding from the','line_number':108,'multiline':False]['text':' enclosing script. This is true for arrow-functions and eval scripts.','line_number':109,'multiline':False]['text':'
 * The struct SharedContext is part of the current parser context (see
 * ParseContext). It stores information that is reused between the parser and
 * the bytecode emitter.
 ','line_number':123,'multiline':True]['text':' See: BaseScript::immutableFlags_','line_number':133,'multiline':False]['text':' The location of this script in the source. Note that the value here differs','line_number':136,'multiline':False]['text':' from the final BaseScript for the case of standalone functions.','line_number':137,'multiline':False]['text':' This field is copied to ScriptStencil, and shouldn't be modified after the','line_number':138,'multiline':False]['text':' copy.','line_number':139,'multiline':False]['text':' See: ThisBinding','line_number':143,'multiline':False]['text':' These flags do not have corresponding script flags and may be inherited','line_number':146,'multiline':False]['text':' from the scope chain in the case of eval and arrows.','line_number':147,'multiline':False]['text':' See `strict()` below.','line_number':155,'multiline':False]['text':' True if "use strict"; appears in the body instead of being inherited.','line_number':158,'multiline':False]['text':' Tracks if script-related fields are already copied to ScriptStencilExtra.','line_number':161,'multiline':False]['text':'','line_number':162,'multiline':False]['text':' If this field is true, those fileds shouldn't be modified.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' For FunctionBox, some fields are allowed to be modified, but the','line_number':165,'multiline':False]['text':' modification should be synced with ScriptStencilExtra by','line_number':166,'multiline':False]['text':' FunctionBox::copyUpdated* methods.','line_number':167,'multiline':False]['text':' End of fields.','line_number':170,'multiline':False]['text':' Alias enum into SharedContext','line_number':174,'multiline':False]['text':' Strict: custom logic below','line_number':202,'multiline':False]['text':' The ImmutableFlag tracks if the entire script is strict, while the','line_number':251,'multiline':False]['text':' localStrict flag indicates the current region (such as class body) should','line_number':252,'multiline':False]['text':' be treated as strict. The localStrict flag will always be reset to false','line_number':253,'multiline':False]['text':' before the end of the script.','line_number':254,'multiline':False]['text':' If this FunctionBox refers to a lazy child of the function being','line_number':321,'multiline':False]['text':' compiled, this field holds the child's immediately enclosing scope's index.','line_number':322,'multiline':False]['text':' Once compilation succeeds, we will store the scope pointed by this in the','line_number':323,'multiline':False]['text':' child's BaseScript.  (Debugger may become confused if lazy scripts refer to','line_number':324,'multiline':False]['text':' partially initialized enclosing scopes, so we must avoid storing the','line_number':325,'multiline':False]['text':' scope in the BaseScript until compilation has completed','line_number':326,'multiline':False]['text':' successfully.)','line_number':327,'multiline':False]['text':' This is copied to ScriptStencil.','line_number':328,'multiline':False]['text':' Any update after the copy should be synced to the ScriptStencil.','line_number':329,'multiline':False]['text':' Names from the named lambda scope, if a named lambda.','line_number':332,'multiline':False]['text':' Names from the function scope.','line_number':335,'multiline':False]['text':' Names from the extra 'var' scope of the function, if the parameter list','line_number':338,'multiline':False]['text':' has expressions.','line_number':339,'multiline':False]['text':' The explicit or implicit name of the function. The FunctionFlags indicate','line_number':342,'multiline':False]['text':' the kind of name.','line_number':343,'multiline':False]['text':' This is copied to ScriptStencil.','line_number':344,'multiline':False]['text':' Any update after the copy should be synced to the ScriptStencil.','line_number':345,'multiline':False]['text':' Index into CompilationStencil::scriptData.','line_number':348,'multiline':False]['text':' See: FunctionFlags','line_number':351,'multiline':False]['text':' This is copied to ScriptStencil.','line_number':352,'multiline':False]['text':' Any update after the copy should be synced to the ScriptStencil.','line_number':353,'multiline':False]['text':' See: ImmutableScriptData::funLength','line_number':356,'multiline':False]['text':' JSFunction::nargs_','line_number':359,'multiline':False]['text':' This field is copied to ScriptStencil, and shouldn't be modified after the','line_number':360,'multiline':False]['text':' copy.','line_number':361,'multiline':False]['text':' See: PrivateScriptData::memberInitializers_','line_number':364,'multiline':False]['text':' This field is copied to ScriptStencil, and shouldn't be modified after the','line_number':365,'multiline':False]['text':' copy.','line_number':366,'multiline':False]['text':' Back pointer used by asm.js for error messages.','line_number':370,'multiline':False]['text':' True if bytecode will be emitted for this function in the current','line_number':373,'multiline':False]['text':' compilation.','line_number':374,'multiline':False]['text':' This is set by the BytecodeEmitter of the enclosing script when a reference','line_number':377,'multiline':False]['text':' to this function is generated. This is also used to determine a hoisted','line_number':378,'multiline':False]['text':' function already is referenced by the bytecode.','line_number':379,'multiline':False]['text':' Need to emit a synthesized Annex B assignment','line_number':382,'multiline':False]['text':' Track if we saw "use asm".','line_number':385,'multiline':False]['text':' If we successfully validated it, `flags_` is seto to `AsmJS` kind.','line_number':386,'multiline':False]['text':' Analysis of parameter list','line_number':389,'multiline':False]['text':' Arrow function with expression body like: `() => 1`.','line_number':394,'multiline':False]['text':' Used to issue an early error in static class blocks.','line_number':397,'multiline':False]['text':' Tracks if function-related fields are already copied to ScriptStencil.','line_number':400,'multiline':False]['text':' If this field is true, modification to those fields should be synced with','line_number':401,'multiline':False]['text':' ScriptStencil by copyUpdated* methods.','line_number':402,'multiline':False]['text':' True if this is part of initial compilation.','line_number':405,'multiline':False]['text':' False if this is part of delazification.','line_number':406,'multiline':False]['text':' True if this is standalone function','line_number':409,'multiline':False]['text':' (new Function() including generator/async, or event handler).','line_number':410,'multiline':False]['text':' End of fields.','line_number':413,'multiline':False]['text':' NeedsHomeObject: custom logic below.','line_number':483,'multiline':False]['text':' IsDerivedClassConstructor: custom logic below.','line_number':484,'multiline':False]['text':' IsFieldInitializer: custom logic below.','line_number':485,'multiline':False]['text':' HasMappedArgsObj: custom logic below.','line_number':494,'multiline':False]['text':' Always create a CallObject if:','line_number':497,'multiline':False]['text':' - The scope is extensible at runtime due to sloppy eval.','line_number':498,'multiline':False]['text':' - The function is a generator or async function. (The debugger reads the','line_number':499,'multiline':False]['text':'   generator object directly from the frame.)','line_number':500,'multiline':False]['text':' NOTE: We propagate to any existing functions for now. This handles both the','line_number':557,'multiline':False]['text':' delazification case where functions already exist, and also handles','line_number':558,'multiline':False]['text':' code-coverage which is not yet deferred.','line_number':559,'multiline':False]['text':' Field initializer or class consturctor.','line_number':595,'multiline':False]['text':' Return whether this or an enclosing function is being parsed and','line_number':608,'multiline':False]['text':' validated as asm.js. Note: if asm.js validation fails, this will be false','line_number':609,'multiline':False]['text':' while the function is being reparsed. This flag can be used to disable','line_number':610,'multiline':False]['text':' certain parsing features that are necessary in general, but unnecessary','line_number':611,'multiline':False]['text':' for validated asm.js.','line_number':612,'multiline':False]['text':' For all functions except class constructors, the buffer and','line_number':624,'multiline':False]['text':' toString ending positions are the same. Class constructors override','line_number':625,'multiline':False]['text':' the toString ending position with the end of the class definition.','line_number':626,'multiline':False]['text':' * setCtorFunctionHasThisBinding can be called to a class constructor','line_number':681,'multiline':False]['text':'   with a lazy function, while parsing enclosing class','line_number':682,'multiline':False]['text':' * setIsInlinableLargeFunction can be called by BCE to update flags of the','line_number':683,'multiline':False]['text':'   previous top-level function, but only in self-hosted mode.','line_number':684,'multiline':False]['text':' * setCtorToStringEnd bcan be called to a class constructor with a lazy','line_number':687,'multiline':False]['text':'   function, while parsing enclosing class','line_number':688,'multiline':False]['text':' * setMemberInitializers can be called to a class constructor with a lazy','line_number':691,'multiline':False]['text':'   function, while emitting enclosing script','line_number':692,'multiline':False]['text':' * setEnclosingScopeForInnerLazyFunction can be called to a lazy function,','line_number':695,'multiline':False]['text':'   while emitting enclosing script','line_number':696,'multiline':False]['text':' * setInferredName can be called to a lazy function, while emitting','line_number':699,'multiline':False]['text':'   enclosing script','line_number':700,'multiline':False]['text':' * setGuessedAtom can be called to both lazy/non-lazy functions,','line_number':701,'multiline':False]['text':'   while running NameFunctions','line_number':702,'multiline':False]['text':' * setWasEmitted can be called to a lazy function, while emitting','line_number':705,'multiline':False]['text':'   enclosing script','line_number':706,'multiline':False]['text':' namespace frontend','line_number':723,'multiline':False]['text':' namespace js','line_number':724,'multiline':False]['text':' frontend_SharedContext_h ','line_number':726,'multiline':True]