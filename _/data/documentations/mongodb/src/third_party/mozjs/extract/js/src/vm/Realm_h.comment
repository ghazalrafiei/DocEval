['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::PlainObject','line_number':28,'multiline':False]['text':' js::PromiseLookup','line_number':29,'multiline':False]['text':' namespace coverage','line_number':39,'multiline':False]['text':' namespace jit','line_number':43,'multiline':False]['text':'
 * A single-entry cache for some base-10 double-to-string conversions. This
 * helps date-format-xparb.js.  It also avoids skewing the results for
 * v8-splay.js when measured by the SunSpider harness, where the splay tree
 * initialization (which includes many repeated double-to-string conversions)
 * is erroneously included in the measurement; see bug 562553.
 ','line_number':54,'multiline':True]['text':' if s==nullptr, d and base are not valid','line_number':64,'multiline':False]['text':' Cache to speed up the group/shape lookup in ProxyObject::create. A proxy's','line_number':85,'multiline':False]['text':' shape is only determined by the Class + proto, so a small cache for this is','line_number':86,'multiline':False]['text':' very effective in practice.','line_number':87,'multiline':False]['text':' [SMDOC] Object MetadataBuilder API','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' We must ensure that all newly allocated JSObjects get their metadata','line_number':130,'multiline':False]['text':' set. However, metadata builders may require the new object be in a sane','line_number':131,'multiline':False]['text':' state (eg, have its reserved slots initialized so they can get the','line_number':132,'multiline':False]['text':' sizeOfExcludingThis of the object). Therefore, for objects of certain','line_number':133,'multiline':False]['text':' JSClasses (those marked with JSCLASS_DELAY_METADATA_BUILDER), it is not safe','line_number':134,'multiline':False]['text':' for the allocation paths to call the object metadata builder','line_number':135,'multiline':False]['text':' immediately. Instead, the JSClass-specific "constructor" C++ function up the','line_number':136,'multiline':False]['text':' stack makes a promise that it will ensure that the new object has its','line_number':137,'multiline':False]['text':' metadata set after the object is initialized.','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':' To help those constructor functions keep their promise of setting metadata,','line_number':140,'multiline':False]['text':' each compartment is in one of three states at any given time:','line_number':141,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' * ImmediateMetadata: Allocators should set new object metadata immediately,','line_number':143,'multiline':False]['text':'                      as usual.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' * DelayMetadata: Allocators should *not* set new object metadata, it will be','line_number':146,'multiline':False]['text':'                  handled after reserved slots are initialized by custom code','line_number':147,'multiline':False]['text':'                  for the object's JSClass. The newly allocated object's','line_number':148,'multiline':False]['text':'                  JSClass *must* have the JSCLASS_DELAY_METADATA_BUILDER flag','line_number':149,'multiline':False]['text':'                  set.','line_number':150,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' * PendingMetadata: This object has been allocated and is still pending its','line_number':152,'multiline':False]['text':'                    metadata. This should never be the case when we begin an','line_number':153,'multiline':False]['text':'                    allocation, as a constructor function was supposed to have','line_number':154,'multiline':False]['text':'                    set the metadata of the previous object *before*','line_number':155,'multiline':False]['text':'                    allocating another object.','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' The js::AutoSetNewObjectMetadata RAII class provides an ergonomic way for','line_number':158,'multiline':False]['text':' constructor functions to navigate state transitions, and its instances','line_number':159,'multiline':False]['text':' collectively maintain a stack of previous states. The stack is required to','line_number':160,'multiline':False]['text':' support the lazy resolution and allocation of global builtin constructors and','line_number':161,'multiline':False]['text':' prototype objects. The initial (and intuitively most common) state is','line_number':162,'multiline':False]['text':' ImmediateMetadata.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' Without the presence of internal errors (such as OOM), transitions between','line_number':165,'multiline':False]['text':' the states are as follows:','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':'     ImmediateMetadata                 .----- previous state on stack','line_number':168,'multiline':False]['text':'           |                           |          ^','line_number':169,'multiline':False]['text':'           | via constructor           |          |','line_number':170,'multiline':False]['text':'           |                           |          | via setting the new','line_number':171,'multiline':False]['text':'           |        via constructor    |          | object's metadata','line_number':172,'multiline':False]['text':'           |   .-----------------------'          |','line_number':173,'multiline':False]['text':'           |   |                                  |','line_number':174,'multiline':False]['text':'           V   V                                  |','line_number':175,'multiline':False]['text':'     DelayMetadata -------------------------> PendingMetadata','line_number':176,'multiline':False]['text':'                         via allocation','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' In the presence of internal errors, we do not set the new object's metadata','line_number':179,'multiline':False]['text':' (if it was even allocated) and reset to the previous state on the stack.','line_number':180,'multiline':False]['text':' See below in namespace JS for the template specialization for','line_number':182,'multiline':False]['text':' ImmediateMetadata and DelayMetadata.','line_number':183,'multiline':False]['text':' ObjectRealm stores various tables and other state associated with particular','line_number':224,'multiline':False]['text':' objects in a realm. To make sure the correct ObjectRealm is used for an','line_number':225,'multiline':False]['text':' object, use of the ObjectRealm::get(obj) static method is required.','line_number':226,'multiline':False]['text':' All non-syntactic lexical environments in the realm. These are kept in a','line_number':232,'multiline':False]['text':' map because when loading scripts into a non-syntactic environment, we','line_number':233,'multiline':False]['text':' need to use the same lexical environment to persist lexical bindings.','line_number':234,'multiline':False]['text':' List of potentially active iterators that may need deleted property','line_number':241,'multiline':False]['text':' suppression.','line_number':242,'multiline':False]['text':' Map from array buffers to views sharing that storage.','line_number':245,'multiline':False]['text':' Keep track of the metadata objects which can be associated with each JS','line_number':248,'multiline':False]['text':' object. Both keys and values are in this realm.','line_number':249,'multiline':False]['text':' namespace js','line_number':288,'multiline':False]['text':' namespace JS','line_number':297,'multiline':False]['text':' The global lexical environment. This is stored here instead of in','line_number':309,'multiline':False]['text':' GlobalObject for easier/faster JIT access.','line_number':310,'multiline':False]['text':' Note: this is private to enforce use of ObjectRealm::get(obj).','line_number':313,'multiline':False]['text':' The global environment record's [[VarNames]] list that contains all','line_number':317,'multiline':False]['text':' names declared using FunctionDeclaration, GeneratorDeclaration, and','line_number':318,'multiline':False]['text':' VariableDeclaration declarations in global code in this realm.','line_number':319,'multiline':False]['text':' Names are only removed from this list by a |delete IdentifierReference|','line_number':320,'multiline':False]['text':' that successfully removes that global property.','line_number':321,'multiline':False]['text':' Random number generator for Math.random().','line_number':330,'multiline':False]['text':' Random number generator for randomHashCodeScrambler().','line_number':334,'multiline':False]['text':' Bookkeeping information for debug scope objects.','line_number':341,'multiline':False]['text':' Used by memory reporters and invalid otherwise.','line_number':346,'multiline':False]['text':' There are two ways to enter a realm:','line_number':358,'multiline':False]['text':'','line_number':359,'multiline':False]['text':' (1) AutoRealm (and JSAutoRealm, JS::EnterRealm)','line_number':360,'multiline':False]['text':' (2) When calling a cross-realm (but same-compartment) function in JIT','line_number':361,'multiline':False]['text':'     code.','line_number':362,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' This field only accounts for (1), to keep the JIT code as simple as','line_number':364,'multiline':False]['text':' possible.','line_number':365,'multiline':False]['text':'','line_number':366,'multiline':False]['text':' An important invariant is that the JIT can only switch to a different','line_number':367,'multiline':False]['text':' realm within the same compartment, so whenever that happens there must','line_number':368,'multiline':False]['text':' always be a same-compartment realm with enterRealmDepthIgnoringJit_ > 0.','line_number':369,'multiline':False]['text':' This lets us set Compartment::hasEnteredRealm without walking the','line_number':370,'multiline':False]['text':' stack.','line_number':371,'multiline':False]['text':' Various timers for collecting time spent delazifying, jit compiling,','line_number':375,'multiline':False]['text':' executing, etc','line_number':376,'multiline':False]['text':' The debugger relies on iterating through the DebuggerVector to know what','line_number':380,'multiline':False]['text':' debuggers to notify about certain actions, which it does using this','line_number':381,'multiline':False]['text':' pointer. We need an explicit Debugger* because the JSObject* from','line_number':382,'multiline':False]['text':' the DebuggerDebuggeeLink to the Debugger is only set some of the time.','line_number':383,'multiline':False]['text':' This `Debugger*` pointer itself could also live on the','line_number':384,'multiline':False]['text':' DebuggerDebuggeeLink itself, but that would then require all of the','line_number':385,'multiline':False]['text':' places that iterate over the realm's DebuggerVector to also traverse','line_number':386,'multiline':False]['text':' the CCW which seems like it would be needlessly complicated.','line_number':387,'multiline':False]['text':' This links to the debugger's DebuggerDebuggeeLink object, via a CCW.','line_number':390,'multiline':False]['text':' Tracing this link from the realm allows the debugger to define','line_number':391,'multiline':False]['text':' whether pieces of the debugger should be held live by a given realm.','line_number':392,'multiline':False]['text':' WebAssembly state for the realm.','line_number':418,'multiline':False]['text':'
   * Lazily initialized script source object to use for scripts cloned
   * from the self-hosting global.
   ','line_number':428,'multiline':True]['text':' Last time at which an animation was played for this realm.','line_number':434,'multiline':False]['text':'
   * For generational GC, record whether a write barrier has added this
   * realm's global to the store buffer since the last minor GC.
   *
   * This is used to avoid calling into the VM every time a nursery object is
   * written to a property of the global.
   ','line_number':437,'multiline':True]['text':' True if all incoming wrappers have been nuked. This happens when','line_number':450,'multiline':False]['text':' NukeCrossCompartmentWrappers is called with the NukeAllReferences option.','line_number':451,'multiline':False]['text':' This prevents us from creating new wrappers for the compartment.','line_number':452,'multiline':False]['text':' Note: Unrestricted access to the runtime from an arbitrary thread','line_number':485,'multiline':False]['text':' can easily lead to races. Use this method very carefully.','line_number':486,'multiline':False]['text':' NOTE: Do not provide accessor for mutable reference.','line_number':493,'multiline':False]['text':' Modifying RealmBehaviors after creating a realm can result in','line_number':494,'multiline':False]['text':' inconsistency.','line_number':495,'multiline':False]['text':' Whether to preserve JIT code on non-shrinking GCs. ','line_number':500,'multiline':True]['text':' The global object for this realm.
   *
   * Note: the global_ field is null briefly during GC, after the global
   * object is collected; but when that happens the Realm is destroyed during
   * the same GC.)
   *
   * In contrast, JSObject::global() is infallible because marking a JSObject
   * always marks its global as well.
   ','line_number':506,'multiline':True]['text':' An unbarriered getter for use while tracing. ','line_number':517,'multiline':True]['text':' True if a global object exists, but it's being collected. ','line_number':525,'multiline':True]['text':' True if a global exists and it's not being collected. ','line_number':528,'multiline':True]['text':'
   * This method traces data that is live iff we know that this realm's
   * global is still live.
   ','line_number':534,'multiline':True]['text':'
   * This method traces Realm-owned GC roots that are considered live
   * regardless of whether the realm's global is still live.
   ','line_number':543,'multiline':True]['text':'
   * This method clears out tables of roots in preparation for the final GC.
   ','line_number':549,'multiline':True]['text':' Add a name to [[VarNames]].  Reports OOM on failure.','line_number':568,'multiline':False]['text':' Whether the given name is in [[VarNames]].','line_number':574,'multiline':False]['text':' If we entered this realm in JIT code, there must be a script and','line_number':586,'multiline':False]['text':' function on the stack for this realm, so the global will definitely','line_number':587,'multiline':False]['text':' be traced and it's safe to return false here.','line_number':588,'multiline':False]['text':' This should only be called when it is non-null, i.e. during memory','line_number':621,'multiline':False]['text':' reporting.','line_number':622,'multiline':False]['text':' We use MOZ_RELEASE_ASSERT here because in bug 1132502 there was some','line_number':624,'multiline':False]['text':' (inconclusive) evidence that realmStats_ can be nullptr unexpectedly.','line_number':625,'multiline':False]['text':'
   * The principals associated with this realm. Note that the same several
   * realms may share the same principals and that a realm may change
   * principals during its lifetime (e.g. in case of lazy parsing).
   ','line_number':640,'multiline':True]['text':'','line_number':666,'multiline':False]['text':' The Debugger observes execution on a frame-by-frame basis. The','line_number':667,'multiline':False]['text':' invariants of Realm's debug mode bits, JSScript::isDebuggee,','line_number':668,'multiline':False]['text':' InterpreterFrame::isDebuggee, and BaselineFrame::isDebuggee are','line_number':669,'multiline':False]['text':' enumerated below.','line_number':670,'multiline':False]['text':'','line_number':671,'multiline':False]['text':' 1. When a realm's isDebuggee() == true, relazification and lazy','line_number':672,'multiline':False]['text':'    parsing are disabled.','line_number':673,'multiline':False]['text':'','line_number':674,'multiline':False]['text':'    Whether AOT wasm is disabled is togglable by the Debugger API. By','line_number':675,'multiline':False]['text':'    default it is disabled. See debuggerObservesAsmJS below.','line_number':676,'multiline':False]['text':'','line_number':677,'multiline':False]['text':' 2. When a realm's debuggerObservesAllExecution() == true, all of','line_number':678,'multiline':False]['text':'    the realm's scripts are considered debuggee scripts.','line_number':679,'multiline':False]['text':'','line_number':680,'multiline':False]['text':' 3. A script is considered a debuggee script either when, per above, its','line_number':681,'multiline':False]['text':'    realm is observing all execution, or if it has breakpoints set.','line_number':682,'multiline':False]['text':'','line_number':683,'multiline':False]['text':' 4. A debuggee script always pushes a debuggee frame.','line_number':684,'multiline':False]['text':'','line_number':685,'multiline':False]['text':' 5. A debuggee frame calls all slow path Debugger hooks in the','line_number':686,'multiline':False]['text':'    Interpreter and Baseline. A debuggee frame implies that its script's','line_number':687,'multiline':False]['text':'    BaselineScript, if extant, has been compiled with debug hook calls.','line_number':688,'multiline':False]['text':'','line_number':689,'multiline':False]['text':' 6. A debuggee script or a debuggee frame (i.e., during OSR) ensures','line_number':690,'multiline':False]['text':'    that the compiled BaselineScript is compiled with debug hook calls','line_number':691,'multiline':False]['text':'    when attempting to enter Baseline.','line_number':692,'multiline':False]['text':'','line_number':693,'multiline':False]['text':' 7. A debuggee script or a debuggee frame (i.e., during OSR) does not','line_number':694,'multiline':False]['text':'    attempt to enter Ion.','line_number':695,'multiline':False]['text':'','line_number':696,'multiline':False]['text':' Note that a debuggee frame may exist without its script being a','line_number':697,'multiline':False]['text':' debuggee script. e.g., Debugger.Frame.prototype.eval only marks the','line_number':698,'multiline':False]['text':' frame in which it is evaluating as a debuggee frame.','line_number':699,'multiline':False]['text':'','line_number':700,'multiline':False]['text':' True if this realm's global is a debuggee of some Debugger','line_number':702,'multiline':False]['text':' object.','line_number':703,'multiline':False]['text':' True if this compartment's global is a debuggee of some Debugger','line_number':711,'multiline':False]['text':' object with a live hook that observes all execution; e.g.,','line_number':712,'multiline':False]['text':' onEnterFrame.','line_number':713,'multiline':False]['text':' True if this realm's global is a debuggee of some Debugger object','line_number':722,'multiline':False]['text':' whose allowUnobservedAsmJS flag is false.','line_number':723,'multiline':False]['text':'','line_number':724,'multiline':False]['text':' Note that since AOT wasm functions cannot bail out, this flag really','line_number':725,'multiline':False]['text':' means "observe wasm from this point forward". We cannot make','line_number':726,'multiline':False]['text':' already-compiled wasm code observable to Debugger.','line_number':727,'multiline':False]['text':' True if this realm's global is a debuggee of some Debugger object','line_number':736,'multiline':False]['text':' whose collectCoverageInfo flag is true.','line_number':737,'multiline':False]['text':' Returns true if the Debugger API is collecting code coverage data for this','line_number':744,'multiline':False]['text':' realm or if the process-wide LCov option is enabled.','line_number':745,'multiline':False]['text':' Get or allocate the associated LCovRealm.','line_number':748,'multiline':False]['text':' Initializes randomNumberGenerator if needed.','line_number':751,'multiline':False]['text':' Recompute the probability with which this realm should record','line_number':771,'multiline':False]['text':' profiling data (stack traces, allocations log, etc.) about each','line_number':772,'multiline':False]['text':' allocation. We first consult the JS runtime to see if it is recording','line_number':773,'multiline':False]['text':' allocations, and if not then check the probabilities requested by the','line_number':774,'multiline':False]['text':' Debugger instances observing us, if any.','line_number':775,'multiline':False]['text':'
   * It's safe to use |unbarrieredGet()| here because any realm that is on-stack
   * will be marked automatically, so there's no need for a read barrier on
   * it. Once the realm is popped, the handle is no longer safe to use.
   ','line_number':801,'multiline':True]['text':' AutoRealm can be used to enter the realm of a JSObject, JSScript or','line_number':825,'multiline':False]['text':' ObjectGroup. It must not be used with cross-compartment wrappers, because','line_number':826,'multiline':False]['text':' CCWs are not associated with a single realm.','line_number':827,'multiline':False]['text':' During GC we sometimes need to enter a realm when we may have been allocating','line_number':859,'multiline':False]['text':' in the the atoms zone. This leaves the atoms zone temporarily. This happens','line_number':860,'multiline':False]['text':' in embedding callbacks and when we need to mark object groups as pretenured.','line_number':861,'multiline':False]['text':' Enter a realm directly. Only use this where there's no target GC thing','line_number':873,'multiline':False]['text':' to pass to AutoRealm or where you need to avoid the assertions in','line_number':874,'multiline':False]['text':' JS::Compartment::enterCompartmentOf().','line_number':875,'multiline':False]['text':'
 * Use this to change the behavior of an AutoRealm slightly on error. If
 * the exception happens to be an Error object, copy it to the origin
 * compartment instead of wrapping it.
 ','line_number':881,'multiline':True]['text':' namespace js ','line_number':894,'multiline':True]['text':' vm_Realm_h ','line_number':896,'multiline':True]