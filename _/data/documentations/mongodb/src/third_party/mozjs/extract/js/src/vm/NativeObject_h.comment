['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::shadow::Object','line_number':24,'multiline':False]['text':' JS::shadow::Zone','line_number':25,'multiline':False]['text':'
 * To really poison a set of values, using 'magic' or 'undefined' isn't good
 * enough since often these will just be ignored by buggy code (see bug 629974)
 * in debug builds and crash in release builds. Instead, we use a safe-for-crash
 * pointer.
 ','line_number':38,'multiline':True]['text':'
 * ES6 20130308 draft 8.4.2.4 ArraySetLength.
 *
 * |id| must be "length", |desc| is the new non-accessor descriptor, and
 * |result| receives an error code if the change is invalid.
 ','line_number':83,'multiline':True]['text':'
 * [SMDOC] NativeObject Elements layout
 *
 * Elements header used for native objects. The elements component of such
 * objects offers an efficient representation for all or some of the indexed
 * properties of the object, using a flat array of Values rather than a shape
 * hierarchy stored in the object's slots. This structure is immediately
 * followed by an array of elements, with the elements member in an object
 * pointing to the beginning of that array (the end of this structure). See
 * below for usage of this structure.
 *
 * The sets of properties represented by an object's elements and slots
 * are disjoint. The elements contain only indexed properties, while the slots
 * can contain both named and indexed properties; any indexes in the slots are
 * distinct from those in the elements. If isIndexed() is false for an object,
 * all indexed properties (if any) are stored in the dense elements.
 *
 * Indexes will be stored in the object's slots instead of its elements in
 * the following case:
 *  - there are more than MIN_SPARSE_INDEX slots total and the load factor
 *    (COUNT / capacity) is less than 0.25
 *  - a property is defined that has non-default property attributes.
 *
 * We track these pieces of metadata for dense elements:
 *  - The length property as a uint32_t, accessible for array objects with
 *    ArrayObject::{length,setLength}().  This is unused for non-arrays.
 *  - The number of element slots (capacity), gettable with
 *    getDenseCapacity().
 *  - The array's initialized length, accessible with
 *    getDenseInitializedLength().
 *
 * Holes in the array are represented by MagicValue(JS_ELEMENTS_HOLE) values.
 * These indicate indexes which are not dense properties of the array. The
 * property may, however, be held by the object's properties.
 *
 * The capacity and length of an object's elements are almost entirely
 * unrelated!  In general the length may be greater than, less than, or equal
 * to the capacity.  The first case occurs with |new Array(100)|.  The length
 * is 100, but the capacity remains 0 (indices below length and above capacity
 * must be treated as holes) until elements between capacity and length are
 * set.  The other two cases are common, depending upon the number of elements
 * in an array and the underlying allocator used for element storage.
 *
 * The only case in which the capacity and length of an object's elements are
 * related is when the object is an array with non-writable length.  In this
 * case the capacity is always less than or equal to the length.  This permits
 * JIT code to optimize away the check for non-writable length when assigning
 * to possibly out-of-range elements: such code already has to check for
 * |index < capacity|, and fallback code checks for non-writable length.
 *
 * The initialized length of an object specifies the number of elements that
 * have been initialized. All elements above the initialized length are
 * holes in the object, and the memory for all elements between the initialized
 * length and capacity is left uninitialized. The initialized length is some
 * value less than or equal to both the object's length and the object's
 * capacity.
 *
 * There is flexibility in exactly the value the initialized length must hold,
 * e.g. if an array has length 5, capacity 10, completely empty, it is valid
 * for the initialized length to be any value between zero and 5, as long as
 * the in memory values below the initialized length have been initialized with
 * a hole value. However, in such cases we want to keep the initialized length
 * as small as possible: if the object is known to have no hole values below
 * its initialized length, then it is "packed" and can be accessed much faster
 * by JIT code.
 *
 * Elements do not track property creation order, so enumerating the elements
 * of an object does not necessarily visit indexes in the order they were
 * created.
 *
 *
 * [SMDOC] NativeObject shifted elements optimization
 *
 * Shifted elements
 * ----------------
 * It's pretty common to use an array as a queue, like this:
 *
 *    while (arr.length > 0)
 *        foo(arr.shift());
 *
 * To ensure we don't get quadratic behavior on this, elements can be 'shifted'
 * in memory. tryShiftDenseElements does this by incrementing elements_ to point
 * to the next element and moving the ObjectElements header in memory (so it's
 * stored where the shifted Value used to be).
 *
 * Shifted elements can be moved when we grow the array, when the array is
 * made non-extensible (for simplicity, shifted elements are not supported on
 * objects that are non-extensible, have copy-on-write elements, or on arrays
 * with non-writable length).
 ','line_number':93,'multiline':True]['text':' (0x1 is unused)','line_number':186,'multiline':False]['text':' Present only if these elements correspond to an array with','line_number':188,'multiline':False]['text':' non-writable length; never present for non-arrays.','line_number':189,'multiline':False]['text':' (0x4 is unused)','line_number':192,'multiline':False]['text':' For TypedArrays only: this TypedArray's storage is mapping shared','line_number':194,'multiline':False]['text':' memory.  This is a static property of the TypedArray, set when it','line_number':195,'multiline':False]['text':' is created and never changed.','line_number':196,'multiline':False]['text':' These elements are not extensible. If this flag is set, the object's','line_number':199,'multiline':False]['text':' Shape must also have the NotExtensible flag. This exists on','line_number':200,'multiline':False]['text':' ObjectElements in addition to Shape to simplify JIT code.','line_number':201,'multiline':False]['text':' These elements are set to integrity level "sealed". If this flag is','line_number':204,'multiline':False]['text':' set, the NOT_EXTENSIBLE flag must be set as well.','line_number':205,'multiline':False]['text':' These elements are set to integrity level "frozen". If this flag is','line_number':208,'multiline':False]['text':' set, the SEALED flag must be set as well.','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':' This flag must only be set if the Shape has the FrozenElements flag.','line_number':211,'multiline':False]['text':' The Shape flag ensures a shape guard can be used to guard against frozen','line_number':212,'multiline':False]['text':' elements. The ObjectElements flag is convenient for JIT code and','line_number':213,'multiline':False]['text':' ObjectElements assertions.','line_number':214,'multiline':False]['text':' If this flag is not set, the elements are guaranteed to contain no hole','line_number':217,'multiline':False]['text':' values (the JS_ELEMENTS_HOLE MagicValue) in [0, initializedLength).','line_number':218,'multiline':False]['text':' If this flag is not set, there's definitely no for-in iterator that','line_number':221,'multiline':False]['text':' covers these dense elements so elements can be deleted without calling','line_number':222,'multiline':False]['text':' SuppressDeletedProperty. This is used by fast paths for various Array','line_number':223,'multiline':False]['text':' builtins. See also NativeObject::denseElementsMaybeInIteration.','line_number':224,'multiline':False]['text':' The flags word stores both the flags and the number of shifted elements.','line_number':228,'multiline':False]['text':' Allow shifting 2047 elements before actually moving the elements.','line_number':229,'multiline':False]['text':' The NumShiftedElementsBits high bits of this are used to store the','line_number':250,'multiline':False]['text':' number of shifted elements, the other bits are available for the flags.','line_number':251,'multiline':False]['text':' See Flags enum above.','line_number':252,'multiline':False]['text':'
   * Number of initialized elements. This is <= the capacity, and for arrays
   * is <= the length. Memory for elements above the initialized length is
   * uninitialized, but values between the initialized length and the proper
   * length are conceptually holes.
   ','line_number':255,'multiline':True]['text':' Number of allocated slots. ','line_number':263,'multiline':True]['text':' 'length' property of array objects, unused for other objects. ','line_number':266,'multiline':True]['text':' See ArrayObject::setNonWritableLength.','line_number':273,'multiline':False]['text':' This is enough slots to store an object of this class. See the static','line_number':408,'multiline':False]['text':' assertion below.','line_number':409,'multiline':False]['text':'
 * Slots header used for native objects. The header stores the capacity and the
 * slot data follows in memory.
 ','line_number':417,'multiline':True]['text':'
 * Shared singletons for objects with no elements.
 * emptyObjectElementsShared is used only for TypedArrays, when the TA
 * maps shared memory.
 ','line_number':468,'multiline':True]['text':'
 * Shared singletons for objects with no dynamic slots.
 ','line_number':476,'multiline':True]['text':' Operations which change an object's dense elements can either succeed, fail,','line_number':488,'multiline':False]['text':' or be unable to complete. The latter is used when the object's elements must','line_number':489,'multiline':False]['text':' become sparse instead. The enum below is used for such operations.','line_number':490,'multiline':False]['text':'
 * [SMDOC] NativeObject layout
 *
 * NativeObject specifies the internal implementation of a native object.
 *
 * Native objects use ShapedObject::shape to record property information. Two
 * native objects with the same shape are guaranteed to have the same number of
 * fixed slots.
 *
 * Native objects extend the base implementation of an object with storage for
 * the object's named properties and indexed elements.
 *
 * These are stored separately from one another. Objects are followed by a
 * variable-sized array of values for inline storage, which may be used by
 * either properties of native objects (fixed slots), by elements (fixed
 * elements), or by other data for certain kinds of objects, such as
 * ArrayBufferObjects and TypedArrayObjects.
 *
 * Named property storage can be split between fixed slots and a dynamically
 * allocated array (the slots member). For an object with N fixed slots, shapes
 * with slots [0..N-1] are stored in the fixed slots, and the remainder are
 * stored in the dynamic array. If all properties fit in the fixed slots, the
 * 'slots_' member is nullptr.
 *
 * Elements are indexed via the 'elements_' member. This member can point to
 * either the shared emptyObjectElements and emptyObjectElementsShared
 * singletons, into the inline value array (the address of the third value, to
 * leave room for a ObjectElements header;in this case numFixedSlots() is zero)
 * or to a dynamically allocated array.
 *
 * Slots and elements may both be non-empty. The slots may be either names or
 * indexes; no indexed property will be in both the slots and elements.
 ','line_number':493,'multiline':True]['text':' Slots for object properties. ','line_number':528,'multiline':True]['text':' Slots for object dense elements. ','line_number':531,'multiline':True]['text':' Sanity check NativeObject size is what we expect.','line_number':560,'multiline':False]['text':' Update the object's shape, keeping the number of allocated slots in sync','line_number':590,'multiline':False]['text':' with the object's new slot span.','line_number':591,'multiline':False]['text':' Optimized version of setShapeAndUpdateSlots for adding a single property','line_number':594,'multiline':False]['text':' with a slot.','line_number':595,'multiline':False]['text':' Newly-created TypedArrays that map a SharedArrayBuffer are','line_number':616,'multiline':False]['text':' marked as shared by giving them an ObjectElements that has the','line_number':617,'multiline':False]['text':' ObjectElements::SHARED_MEMORY flag set.','line_number':618,'multiline':False]['text':'
   * Update the slot span directly for a dictionary object, and allocate
   * slots to cover the new span if necessary.
   ','line_number':642,'multiline':True]['text':'
   * Get internal pointers to the range of values from |start| to |end|
   * exclusive.
   ','line_number':658,'multiline':True]['text':' DEBUG ','line_number':709,'multiline':True]['text':'
   * Initialize the object's slots from a flat array. The caller must ensure
   * that there are enough slots. This is used during brain transplants.
   ','line_number':714,'multiline':True]['text':'
   * Check that slot is in range for the object's allocated slots.
   * If sentinelAllowed then slot may equal the slot capacity.
   ','line_number':723,'multiline':True]['text':'
   * Check whether a slot is a fixed slot.
   ','line_number':730,'multiline':True]['text':'
   * Check whether the supplied number of fixed slots is correct.
   ','line_number':735,'multiline':True]['text':'
   * Minimum size for dynamically allocated slots in normal Objects.
   * ArrayObjects don't use this limit and can have a lower slot capacity,
   * since they normally don't have a lot of slots.
   ','line_number':741,'multiline':True]['text':' Object allocation may directly initialize slots so this is public. ','line_number':753,'multiline':True]['text':' The maximum number of slots in an object.','line_number':766,'multiline':False]['text':' |MAX_SLOTS_COUNT * sizeof(JS::Value)| shouldn't overflow','line_number':767,'multiline':False]['text':' int32_t (see slotsSizeMustNotOverflow).','line_number':768,'multiline':False]['text':' Get the number of fixed slots when the shape pointer may have been','line_number':784,'multiline':False]['text':' forwarded by a moving GC. You need to use this rather that','line_number':785,'multiline':False]['text':' numFixedSlots() in a trace hook if you access an object that is not the','line_number':786,'multiline':False]['text':' object being traced, since it may have a stale shape pointer.','line_number':787,'multiline':False]['text':' Get the private when the ObjectGroup pointer may have been forwarded by a','line_number':790,'multiline':False]['text':' moving GC.','line_number':791,'multiline':False]['text':' Whether a slot is at a fixed offset from this object. ','line_number':812,'multiline':True]['text':' Index into the dynamic slots array to use for a dynamic slot. ','line_number':815,'multiline':True]['text':' Native objects are never proxies. Call isExtensible instead.','line_number':821,'multiline':False]['text':'
   * Whether there may be indexed properties on this object, excluding any in
   * the object's elements.
   ','line_number':826,'multiline':True]['text':'
   * Grow or shrink slots immediately before changing the slot span.
   * The number of allocated slots is not stored explicitly, and changes to
   * the slots must track changes in the slot span.
   ','line_number':843,'multiline':True]['text':'
   * This method is static because it's called from JIT code. On OOM, returns
   * false without leaving a pending exception on the context.
   ','line_number':853,'multiline':True]['text':'
   * Like growSlotsPure but for dense elements. This will return
   * false if we failed to allocate a dense element for some reason (OOM, too
   * many dense elements, non-writable array length, etc).
   ','line_number':860,'multiline':True]['text':' Compute the number of dynamic slots required for this object. ','line_number':869,'multiline':True]['text':' Contextless; can be called from other pure code. ','line_number':890,'multiline':True]['text':'
   * Allocate and free an object slot.
   *
   * FIXME: bug 593129 -- slot allocation should be done by object methods
   * after calling object-parameter-free shape methods, avoiding coupling
   * logic across the object vs. shape module wall.
   ','line_number':904,'multiline':True]['text':' Add a new property. Must only be used when the |id| is not already present','line_number':920,'multiline':False]['text':' in the object's shape. Checks for non-extensibility must be done by the','line_number':921,'multiline':False]['text':' callers.','line_number':922,'multiline':False]['text':' Change a property with key |id| in this object. The object must already','line_number':946,'multiline':False]['text':' have a property (stored in the shape tree) with this |id|.','line_number':947,'multiline':False]['text':' Remove the property named by id from this object.','line_number':955,'multiline':False]['text':' Return true if this object has been converted from shared-immutable','line_number':974,'multiline':False]['text':' shapes to object-owned dictionary shapes.','line_number':975,'multiline':False]['text':'
     * This can be used to get the address of the end of the slots for the
     * object, which may be necessary when fetching zero-length arrays of
     * slots (e.g. for callObjVarArray).
     ','line_number':1004,'multiline':True]['text':'
     * This can be used to get the address of the end of the slots for the
     * object, which may be necessary when fetching zero-length arrays of
     * slots (e.g. for callObjVarArray).
     ','line_number':1014,'multiline':True]['text':' Check requirements on values stored to this object.','line_number':1033,'multiline':False]['text':' Returns the GetterSetter for an accessor property.','line_number':1058,'multiline':False]['text':' Returns the (possibly nullptr) getter or setter object. |prop| and |slot|','line_number':1067,'multiline':False]['text':' must be (for) an accessor property.','line_number':1068,'multiline':False]['text':' Returns true if the property has a non-nullptr getter or setter object.','line_number':1079,'multiline':False]['text':' |prop| can be any property.','line_number':1080,'multiline':False]['text':' If the property has a non-nullptr getter/setter, return it as ObjectValue.','line_number':1088,'multiline':False]['text':' Else return |undefined|. |prop| must be an accessor property.','line_number':1089,'multiline':False]['text':' MAX_FIXED_SLOTS is the biggest number of fixed slots our GC','line_number':1105,'multiline':False]['text':' size classes will give an object.','line_number':1106,'multiline':False]['text':'
   * Trigger the write barrier on a range of slots that will no longer be
   * reachable.
   ','line_number':1122,'multiline':True]['text':' For slots which are known to always be fixed, due to the way they are','line_number':1160,'multiline':False]['text':' allocated.','line_number':1161,'multiline':False]['text':'
   * Calculate the number of dynamic slots to allocate to cover the properties
   * in an object with the given number of fixed slots and slot span.
   ','line_number':1185,'multiline':True]['text':' Elements accessors. ','line_number':1196,'multiline':True]['text':' The maximum size, in sizeof(Value), of the allocation used for an','line_number':1198,'multiline':False]['text':' object's dense elements.  (This includes space used to store an','line_number':1199,'multiline':False]['text':' ObjectElements instance.)','line_number':1200,'multiline':False]['text':' |MAX_DENSE_ELEMENTS_ALLOCATION * sizeof(JS::Value)| shouldn't overflow','line_number':1201,'multiline':False]['text':' int32_t (see elementsSizeMustNotOverflow).','line_number':1202,'multiline':False]['text':' The maximum number of usable dense elements in an object.','line_number':1205,'multiline':False]['text':' Returns a pointer to the first element, including shifted elements.','line_number':1221,'multiline':False]['text':' Like getElementsHeader, but returns a pointer to the unshifted header.','line_number':1226,'multiline':False]['text':' This is mainly useful for free()ing dynamic elements: the pointer','line_number':1227,'multiline':False]['text':' returned here is the one we got from malloc.','line_number':1228,'multiline':False]['text':' Accessors for elements. ','line_number':1237,'multiline':True]['text':' Try to shift |count| dense elements, see the "Shifted elements" comment.','line_number':1246,'multiline':False]['text':' Try to make space for |count| dense elements at the start of the array.','line_number':1249,'multiline':False]['text':' Move the elements header and all shifted elements to the start of the','line_number':1252,'multiline':False]['text':' allocated elements space, so that numShiftedElements is 0 afterwards.','line_number':1253,'multiline':False]['text':' If this object has many shifted elements call moveShiftedElements.','line_number':1256,'multiline':False]['text':' Run a post write barrier that encompasses multiple contiguous elements in a','line_number':1266,'multiline':False]['text':' single step.','line_number':1267,'multiline':False]['text':' Note: Streams code can call this for the internal ListObject type with','line_number':1299,'multiline':False]['text':' MagicValue(JS_WRITABLESTREAM_CLOSE_RECORD).','line_number':1300,'multiline':False]['text':' Note: 'Unchecked' here means we don't assert |val| isn't the hole','line_number':1311,'multiline':False]['text':' MagicValue.','line_number':1312,'multiline':False]['text':' Mark the dense elements as possibly containing holes.','line_number':1326,'multiline':False]['text':' Store the Values in the range [begin, end) as elements of this array.','line_number':1341,'multiline':False]['text':'','line_number':1342,'multiline':False]['text':' Preconditions: This must be a boring ArrayObject with dense initialized','line_number':1343,'multiline':False]['text':' length 0: no shifted elements, no frozen elements, no fixed "length", not','line_number':1344,'multiline':False]['text':' indexed, not inextensible, not copy-on-write. Existing capacity is','line_number':1345,'multiline':False]['text':' optional.','line_number':1346,'multiline':False]['text':'','line_number':1347,'multiline':False]['text':' This runs write barriers but does not update types. `end - begin` must','line_number':1348,'multiline':False]['text':' return the size of the range, which must be >= 0 and fit in an int32_t.','line_number':1349,'multiline':False]['text':' Return whether the object's dense elements might be in the midst of for-in','line_number':1378,'multiline':False]['text':' iteration. We rely on this to be able to safely delete or move dense array','line_number':1379,'multiline':False]['text':' elements without worrying about updating in-progress iterators.','line_number':1380,'multiline':False]['text':' See bug 690622.','line_number':1381,'multiline':False]['text':'','line_number':1382,'multiline':False]['text':' Note that it's fine to return false if this object is on the prototype of','line_number':1383,'multiline':False]['text':' another object: SuppressDeletedProperty only suppresses properties deleted','line_number':1384,'multiline':False]['text':' from the iterated object itself.','line_number':1385,'multiline':False]['text':' Ensures that the object can hold at least index + extra elements. This','line_number':1389,'multiline':False]['text':' returns DenseElement_Success on success, DenseElement_Failed on failure','line_number':1390,'multiline':False]['text':' to grow the array, or DenseElement_Incomplete when the object is too','line_number':1391,'multiline':False]['text':' sparse to grow (this includes the case of index + extra overflow). In','line_number':1392,'multiline':False]['text':' the last two cases the object is kept intact.','line_number':1393,'multiline':False]['text':' Small objects are dense, no matter what. ','line_number':1401,'multiline':True]['text':'
   * Element storage for an object will be sparse if fewer than 1/8 indexes
   * are filled in.
   ','line_number':1404,'multiline':True]['text':'
   * Check if after growing the object's elements will be too sparse.
   * newElementsHint is an estimated number of elements to be added.
   ','line_number':1410,'multiline':True]['text':'
   * After adding a sparse index to obj, see if it should be converted to use
   * dense elements.
   ','line_number':1417,'multiline':True]['text':'
     * Note: for objects with zero fixed slots this could potentially give
     * a spurious 'true' result, if the end of this object is exactly
     * aligned with the end of its arena and dynamic slots are allocated
     * immediately afterwards. Such cases cannot occur for dense arrays
     * (which have at least two fixed slots) and can only result in a leak.
     ','line_number':1444,'multiline':True]['text':'
   * Get a pointer to the unused data in the object's allocation immediately
   * following this object, for use with objects which allocate a larger size
   * class than they need and store non-elements data inline.
   ','line_number':1463,'multiline':True]['text':' Private data accessors. ','line_number':1472,'multiline':True]['text':'
     * The private field of an object is used to hold a pointer by storing it as
     * a PrivateValue(). Private fields are stored immediately after the last
     * fixed slot of the object.
     ','line_number':1476,'multiline':True]['text':' Return the allocKind we would use if we were to tenure this object. ','line_number':1527,'multiline':True]['text':' Native objects are never wrappers, so a native object always has a realm','line_number':1530,'multiline':False]['text':' and global.','line_number':1531,'multiline':False]['text':' JIT Accessors ','line_number':1535,'multiline':True]['text':'** Standard internal methods *********************************************','line_number':1570,'multiline':True]['text':'
 * These functions should follow the algorithms in ES6 draft rev 29 section 9.1
 * ("Ordinary Object Internal Methods"). It's an ongoing project.
 *
 * Many native objects are not "ordinary" in ES6, so these functions also have
 * to serve some of the special needs of Functions (9.2, 9.3, 9.4.1), Arrays
 * (9.4.2), Strings (9.4.3), and so on.
 ','line_number':1572,'multiline':True]['text':' If the result out-param is omitted, throw on failure. ','line_number':1590,'multiline':True]['text':'
 * Indicates whether an assignment operation is qualified (`x.y = 0`) or
 * unqualified (`y = 0`). In strict mode, the latter is an error if no such
 * variable already exists.
 *
 * Used as an argument to NativeSetProperty.
 ','line_number':1641,'multiline':True]['text':'** SpiderMonkey nonstandard internal methods *****************************','line_number':1662,'multiline':True]['text':'
 * Get a property from `receiver`, after having already done a lookup and found
 * the property on a native object `obj`.
 *
 * `prop` must be present in obj's shape.
 ','line_number':1669,'multiline':True]['text':' * ','line_number':1679,'multiline':True]['text':' namespace js ','line_number':1684,'multiline':True]['text':' Alternate to JSObject::as<NativeObject>() that tolerates null pointers.','line_number':1693,'multiline':False]['text':' Defined in NativeObject-inl.h.','line_number':1698,'multiline':False]['text':' Initialize an object's reserved slot with a private value pointing to','line_number':1701,'multiline':False]['text':' malloc-allocated memory and associate the memory with the object.','line_number':1702,'multiline':False]['text':'','line_number':1703,'multiline':False]['text':' This call should be matched with a call to JSFreeOp::free_/delete_ in the','line_number':1704,'multiline':False]['text':' object's finalizer to free the memory and update the memory accounting.','line_number':1705,'multiline':False]['text':' Initialize an object's private slot with a pointer to malloc-allocated memory','line_number':1718,'multiline':False]['text':' and associate the memory with the object.','line_number':1719,'multiline':False]['text':'','line_number':1720,'multiline':False]['text':' This call should be matched with a call to JSFreeOp::free_/delete_ in the','line_number':1721,'multiline':False]['text':' object's finalizer to free the memory and update the memory accounting.','line_number':1722,'multiline':False]['text':' namespace js','line_number':1734,'multiline':False]['text':' vm_NativeObject_h ','line_number':1736,'multiline':True]