['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2016 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' The kind of a control-flow stack item.','line_number':35,'multiline':False]['text':' The type of values on the operand stack during validation.  This is either a','line_number':49,'multiline':False]['text':' ValType or the special type "Bottom".','line_number':50,'multiline':False]['text':' Families of opcodes that share a signature and validation logic.','line_number':117,'multiline':False]['text':' Return the OpKind for a given Op. This is used for sanity-checking that','line_number':214,'multiline':False]['text':' API users use the correct read function for a given Op.','line_number':215,'multiline':False]['text':' Common fields for linear memory access.','line_number':219,'multiline':False]['text':' Use a pair to optimize away empty ControlItem.','line_number':233,'multiline':False]['text':' The "base" of a control stack entry is valueStack_.length() minus','line_number':236,'multiline':False]['text':' type().params().length(), i.e., the size of the value stack "below"','line_number':237,'multiline':False]['text':' this block.','line_number':238,'multiline':False]['text':' Use a Pair to optimize away empty Value.','line_number':287,'multiline':False]['text':' An iterator over the bytes of a function body. It performs validation','line_number':302,'multiline':False]['text':' and unpacks the data into a usable form.','line_number':303,'multiline':False]['text':'','line_number':304,'multiline':False]['text':' The MOZ_STACK_CLASS attribute here is because of the use of DebugOnly.','line_number':305,'multiline':False]['text':' There's otherwise nothing inherent in this class which would require','line_number':306,'multiline':False]['text':' it to be used on the stack.','line_number':307,'multiline':False]['text':' Return the decoding byte offset.','line_number':430,'multiline':False]['text':' Return the offset within the entire module of the last-read op.','line_number':433,'multiline':False]['text':' Return a BytecodeOffset describing where the current op should be reported','line_number':438,'multiline':False]['text':' to trap/call.','line_number':439,'multiline':False]['text':' Test whether the iterator has reached the end of the buffer.','line_number':444,'multiline':False]['text':' Return a pointer to the end of the buffer being decoded by this iterator.','line_number':447,'multiline':False]['text':' Report a general failure.','line_number':450,'multiline':False]['text':' Report a general failure with a context','line_number':453,'multiline':False]['text':' Report an unrecognized opcode.','line_number':456,'multiline':False]['text':' Return whether the innermost block has a polymorphic base of its stack.','line_number':459,'multiline':False]['text':' Ideally this accessor would be removed; consider using something else.','line_number':460,'multiline':False]['text':' ------------------------------------------------------------------------','line_number':465,'multiline':False]['text':' Decoding and validation interface.','line_number':466,'multiline':False]['text':' Initialization and termination','line_number':468,'multiline':False]['text':' Value and reference types','line_number':476,'multiline':False]['text':' Instructions','line_number':481,'multiline':False]['text':' At a location where readOp is allowed, peek at the next opcode','line_number':648,'multiline':False]['text':' without consuming it or updating any internal state.','line_number':649,'multiline':False]['text':' Never fails: returns uint16_t(Op::Limit) in op->b0 if it can't read.','line_number':650,'multiline':False]['text':' ------------------------------------------------------------------------','line_number':653,'multiline':False]['text':' Stack management.','line_number':654,'multiline':False]['text':' Set the top N result values.','line_number':656,'multiline':False]['text':' Set the result value of the current top-of-value-stack expression.','line_number':677,'multiline':False]['text':' Return the result value of the current top-of-value-stack expression.','line_number':680,'multiline':False]['text':' Return a reference to the top of the control stack.','line_number':683,'multiline':False]['text':' Return a reference to an element in the control stack.','line_number':686,'multiline':False]['text':' Return the LabelKind of an element in the control stack.','line_number':692,'multiline':False]['text':' Return a reference to the outermost element on the control stack.','line_number':697,'multiline':False]['text':' Test whether the control-stack is empty, meaning we've consumed the final','line_number':700,'multiline':False]['text':' end of the function body.','line_number':701,'multiline':False]['text':' This function pops exactly one value from the stack, yielding Bottom types in','line_number':764,'multiline':False]['text':' various cases and therefore making it the caller's responsibility to do the','line_number':765,'multiline':False]['text':' right thing for StackType::Bottom. Prefer (pop|top)WithType.  This is an','line_number':766,'multiline':False]['text':' optimization for the super-common case where the caller is statically','line_number':767,'multiline':False]['text':' expecting the resulttype `[valtype]`.','line_number':768,'multiline':False]['text':' If the base of this block's stack is polymorphic, then we can pop a','line_number':775,'multiline':False]['text':' dummy value of the bottom type; it won't be used since we're in','line_number':776,'multiline':False]['text':' unreachable code.','line_number':777,'multiline':False]['text':' Maintain the invariant that, after a pop, there is always memory','line_number':782,'multiline':False]['text':' reserved to push a value infallibly.','line_number':783,'multiline':False]['text':' This function pops exactly one value from the stack, checking that it has the','line_number':797,'multiline':False]['text':' expected type which can either be a specific value type or a type variable.','line_number':798,'multiline':False]['text':' Pops each of the given expected types (in reverse, because it's a stack).','line_number':810,'multiline':False]['text':' This function pops exactly one value from the stack, checking that it is a','line_number':829,'multiline':False]['text':' reference type.','line_number':830,'multiline':False]['text':' This function pops exactly one value from the stack, checking that it is an','line_number':856,'multiline':False]['text':' rtt type with any type index or depth value.','line_number':857,'multiline':False]['text':' This function is an optimization of the sequence:','line_number':891,'multiline':False]['text':'   popWithType(ResultType, tmp)','line_number':892,'multiline':False]['text':'   push(ResultType, tmp)','line_number':893,'multiline':False]['text':' We're iterating as-if we were popping each expected/actual type one by','line_number':909,'multiline':False]['text':' one, which means iterating the array of expected results backwards.','line_number':910,'multiline':False]['text':' The "current" value stack length refers to what the value stack length','line_number':911,'multiline':False]['text':' would have been if we were popping it.','line_number':912,'multiline':False]['text':' If the base of this block's stack is polymorphic, then we can just','line_number':929,'multiline':False]['text':' pull out as many fake values as we need to validate; they won't be used','line_number':930,'multiline':False]['text':' since we're in unreachable code. We must however push these types on','line_number':931,'multiline':False]['text':' the operand stack since they are now fixed by this constraint.','line_number':932,'multiline':False]['text':' We're iterating as-if we were popping each expected/actual type one by','line_number':972,'multiline':False]['text':' one, which means iterating the array of expected results backwards.','line_number':973,'multiline':False]['text':' The "current" value stack length refers to what the value stack length','line_number':974,'multiline':False]['text':' would have been if we were popping it.','line_number':975,'multiline':False]['text':' If the base of this block's stack is polymorphic, then we can just','line_number':992,'multiline':False]['text':' pull out as many fake values as we need to validate; they won't be used','line_number':993,'multiline':False]['text':' since we're in unreachable code.','line_number':994,'multiline':False]['text':' If an `if` block ends with `end` instead of `else`, then the `else` block','line_number':1286,'multiline':False]['text':' implicitly passes the `if` parameters as the `else` results.  In that','line_number':1287,'multiline':False]['text':' case, assert that the `if`'s param type matches the result type.','line_number':1288,'multiline':False]['text':' Check the typing of a branch instruction which casts an input type to','line_number':1329,'multiline':False]['text':' an output type, branching on success to a target which takes the output','line_number':1330,'multiline':False]['text':' type along with extra values from the stack. On casting failure, the','line_number':1331,'multiline':False]['text':' original input type and extra values are left on the stack.','line_number':1332,'multiline':False]['text':' Get the branch target type, which will determine the type of extra values','line_number':1339,'multiline':False]['text':' that are passed along with the casted type.','line_number':1340,'multiline':False]['text':' Check we at least have one type in the branch target type, which will take','line_number':1347,'multiline':False]['text':' the casted type.','line_number':1348,'multiline':False]['text':' The top of the stack is the type that is being cast. This is the last type','line_number':1363,'multiline':False]['text':' in the branch target type. This is guaranteed to exist by the above check.','line_number':1364,'multiline':False]['text':' Check that the branch target type can accept the castedToType. The branch','line_number':1367,'multiline':False]['text':' target may specify a super type of the castedToType, and this is okay.','line_number':1368,'multiline':False]['text':' Create a copy of the branch target type, with the castTypeIndex replaced','line_number':1373,'multiline':False]['text':' with the castedFromType. Use this to check that the stack has the proper','line_number':1374,'multiline':False]['text':' types to branch to the target type.','line_number':1375,'multiline':False]['text':'','line_number':1376,'multiline':False]['text':' TODO: We could avoid a potential allocation here by handwriting a custom','line_number':1377,'multiline':False]['text':'       topWithType that handles this case.','line_number':1378,'multiline':False]['text':' Avoid re-collecting the same values for subsequent branch targets.','line_number':1444,'multiline':False]['text':' Depths for delegate start counting in the surrounding block.','line_number':1588,'multiline':False]['text':' Because `delegate` acts like `end` and ends the block, we will check','line_number':1599,'multiline':False]['text':' the stack here.','line_number':1600,'multiline':False]['text':' We need popDelegate because readDelegate cannot pop the control stack','line_number':1604,'multiline':False]['text':' itself, as its caller may need to use the control item for delegate.','line_number':1605,'multiline':False]['text':' For memories, the index is currently always a placeholder zero byte.','line_number':1733,'multiline':False]['text':'','line_number':1734,'multiline':False]['text':' For tables, the index is a placeholder zero byte until we get multi-table','line_number':1735,'multiline':False]['text':' with the reftypes proposal.','line_number':1736,'multiline':False]['text':'','line_number':1737,'multiline':False]['text':' The zero-ness of the value must be checked by the caller.','line_number':1738,'multiline':False]['text':' Iterate through the argument types backward so that pops occur in the','line_number':2215,'multiline':False]['text':' right order.','line_number':2216,'multiline':False]['text':' Special case this for improved user experience.','line_number':2273,'multiline':False]['text':' Per spec; smallest WAIT is i32.','line_number':2377,'multiline':False]['text':' Spec requires (dest, src) as of 2019-10-04.','line_number':2504,'multiline':False]['text':' The casted from type is any subtype of eqref','line_number':3165,'multiline':False]['text':' The casted to type is a non-nullable reference to the type index specified','line_number':3168,'multiline':False]['text':' by the input rtt on the stack','line_number':3169,'multiline':False]['text':' Caller signals error','line_number':3183,'multiline':False]['text':'byteSize=','line_number':3332,'multiline':True]['text':' ENABLE_WASM_SIMD','line_number':3387,'multiline':False]['text':' namespace wasm','line_number':3389,'multiline':False]['text':' namespace js','line_number':3390,'multiline':False]['text':' Specialize IsPod for the Nothing specializations.','line_number':3394,'multiline':False]['text':' namespace mozilla','line_number':3400,'multiline':False]['text':' wasm_op_iter_h','line_number':3402,'multiline':False]