['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
 ********************************************************************************
 * Copyright (C) 2003-2013, International Business Machines Corporation
 * and others. All Rights Reserved.
 ********************************************************************************
 *
 * File BUDDHCAL.H
 *
 * Modification History:
 *
 *   Date        Name        Description
 *   05/13/2003  srl          copied from gregocal.h
 ********************************************************************************
 ','line_number':3,'multiline':True]['text':'*
 * Concrete class which provides the Buddhist calendar.
 * <P>
 * <code>BuddhistCalendar</code> is a subclass of <code>GregorianCalendar</code>
 * that numbers years since the birth of the Buddha.  This is the civil calendar
 * in some predominantly Buddhist countries such as Thailand, and it is used for
 * religious purposes elsewhere.
 * <p>
 * The Buddhist calendar is identical to the Gregorian calendar in all respects
 * except for the year and era.  Years are numbered since the birth of the
 * Buddha in 543 BC (Gregorian), so that 1 AD (Gregorian) is equivalent to 544
 * BE (Buddhist Era) and 1998 AD is 2541 BE.
 * <p>
 * The Buddhist Calendar has only one allowable era: <code>BE</code>.  If the
 * calendar is not in lenient mode (see <code>setLenient</code>), dates before
 * 1/1/1 BE are rejected as an illegal argument.
 * <p>
 * @internal
 ','line_number':30,'multiline':True]['text':'*
     * Useful constants for BuddhistCalendar.  Only one Era.
     * @internal
     ','line_number':52,'multiline':True]['text':'*
     * Constructs a BuddhistCalendar based on the current time in the default time zone
     * with the given locale.
     *
     * @param aLocale  The given locale.
     * @param success  Indicates the status of BuddhistCalendar object construction.
     *                 Returns U_ZERO_ERROR if constructed successfully.
     * @internal
     ','line_number':60,'multiline':True]['text':'*
     * Destructor
     * @internal
     ','line_number':72,'multiline':True]['text':'*
     * Copy constructor
     * @param source    the object to be copied.
     * @internal
     ','line_number':78,'multiline':True]['text':'*
     * Default assignment operator
     * @param right    the object to be copied.
     * @internal
     ','line_number':85,'multiline':True]['text':'*
     * Create and return a polymorphic copy of this calendar.
     * @return    return a polymorphic copy of this calendar.
     * @internal
     ','line_number':92,'multiline':True]['text':'*
     * Override Calendar Returns a unique class ID POLYMORPHICALLY. Pure virtual
     * override. This method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone() methods call
     * this method.
     *
     * @return   The class ID for this object. All objects of a given class have the
     *           same class ID. Objects of other classes have different class IDs.
     * @internal
     ','line_number':100,'multiline':True]['text':'*
     * Return the class ID for this class. This is useful only for comparing to a return
     * value from getDynamicClassID(). For example:
     *
     *      Base* polymorphic_pointer = createPolymorphicObject();
     *      if (polymorphic_pointer->getDynamicClassID() ==
     *          Derived::getStaticClassID()) ...
     *
     * @return   The class ID for all objects of this class.
     * @internal
     ','line_number':112,'multiline':True]['text':'*
     * return the calendar type, "buddhist".
     *
     * @return calendar type
     * @internal
     ','line_number':125,'multiline':True]['text':' default constructor not implemented','line_number':134,'multiline':False]['text':'*
     * Return the extended year defined by the current fields.  This will
     * use the UCAL_EXTENDED_YEAR field or the UCAL_YEAR and supra-year fields (such
     * as UCAL_ERA) specific to the calendar system, depending on which set of
     * fields is newer.
     * @return the extended year
     * @internal
     ','line_number':137,'multiline':True]['text':'*
     * Subclasses may override this method to compute several fields
     * specific to each calendar system.  
     * @internal
     ','line_number':146,'multiline':True]['text':'*
     * Subclass API for defining limits of different types.
     * @param field one of the field numbers
     * @param limitType one of <code>MINIMUM</code>, <code>GREATEST_MINIMUM</code>,
     * <code>LEAST_MAXIMUM</code>, or <code>MAXIMUM</code>
     * @internal
     ','line_number':152,'multiline':True]['text':'*
     * Return the Julian day number of day before the first day of the
     * given month in the given extended year.  Subclasses should override
     * this method to implement their calendar system.
     * @param eyear the extended year
     * @param month the zero-based month, or 0 if useMonth is false
     * @param useMonth if false, compute the day before the first day of
     * the given year, otherwise, compute the day before the first day of
     * the given month
     * @param return the Julian day number of the day before the first
     * day of the given month and year
     * @internal
     ','line_number':160,'multiline':True]['text':'*
     * Returns true because the Buddhist Calendar does have a default century
     * @internal
     ','line_number':176,'multiline':True]['text':'*
     * Returns the date of the start of the default century
     * @return start of century - in milliseconds since epoch, 1970
     * @internal
     ','line_number':182,'multiline':True]['text':'*
     * Returns the year in which the default century begins
     * @internal
     ','line_number':189,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':198,'multiline':True]['text':' _GREGOCAL','line_number':200,'multiline':False]['text':'eof','line_number':201,'multiline':False]