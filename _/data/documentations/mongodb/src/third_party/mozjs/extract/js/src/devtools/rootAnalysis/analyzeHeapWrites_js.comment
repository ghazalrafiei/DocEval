['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' -*- indent-tabs-mode: nil; js-indent-level: 4 -*- ','line_number':5,'multiline':True]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':14,'multiline':False]['text':' Annotations','line_number':15,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':16,'multiline':False]['text':' Assume that atomic accesses are threadsafe.','line_number':39,'multiline':False]['text':' memcpy and memset are safe if the target pointer is threadsafe.','line_number':45,'multiline':False]['text':' regexp should match some nsISupports-operating function and produce the','line_number':60,'multiline':False]['text':' name of the nsISupports class via exec().','line_number':61,'multiline':False]['text':' nsISupports classes which have threadsafe reference counting.','line_number':63,'multiline':False]['text':' I don't know if these always have threadsafe refcounts.','line_number':67,'multiline':False]['text':' We get here when a virtual call is made on a structure which might be','line_number':79,'multiline':False]['text':' overridden by script or by a binary extension. This includes almost','line_number':80,'multiline':False]['text':' everything under nsISupports, however, so for the most part we ignore','line_number':81,'multiline':False]['text':' this issue. The exception is for nsISupports AddRef/Release, which are','line_number':82,'multiline':False]['text':' not in general threadsafe and whose overrides will not be generated by','line_number':83,'multiline':False]['text':' the callgraph analysis.','line_number':84,'multiline':False]['text':' Watch for raw addref/release.','line_number':97,'multiline':False]['text':' These hash table callbacks should be threadsafe.','line_number':114,'multiline':False]['text':' Annotations for function parameters, based on function name and parameter','line_number':130,'multiline':False]['text':' name + type.','line_number':131,'multiline':False]['text':' These iterator classes should all be thread local. They are passed','line_number':135,'multiline':False]['text':' in to some Servo bindings and are created on the heap by others, so','line_number':136,'multiline':False]['text':' just ignore writes to them.','line_number':137,'multiline':False]['text':' The use of BeginReading() to instantiate this class confuses the','line_number':141,'multiline':False]['text':' analysis.','line_number':142,'multiline':False]['text':' These classes are passed to some Servo bindings to fill in.','line_number':145,'multiline':False]['text':' RawGeckoBorrowedNode thread-mutable parameters.','line_number':149,'multiline':False]['text':' Various Servo binding out parameters. This is a mess and there needs','line_number':153,'multiline':False]['text':' to be a way to indicate which params are out parameters, either using','line_number':154,'multiline':False]['text':' an attribute or a naming convention.','line_number':155,'multiline':False]['text':' The assignment','line_number':257,'multiline':False]['text':'','line_number':258,'multiline':False]['text':'   nsFont* font = fontTypes[eType];','line_number':259,'multiline':False]['text':'','line_number':260,'multiline':False]['text':' ends up with 'font' pointing to a member of 'this', so it should inherit','line_number':261,'multiline':False]['text':' the safety of 'this'.','line_number':262,'multiline':False]['text':' 'this'','line_number':273,'multiline':False]['text':' The analysis is having some trouble keeping track of whether','line_number':284,'multiline':False]['text':' already_AddRefed and nsCOMPtr structures are safe to access.','line_number':285,'multiline':False]['text':' Hopefully these will be thread local, but it would be better to','line_number':286,'multiline':False]['text':' improve the analysis to handle these.','line_number':287,'multiline':False]['text':' Debugging check for string corruption.','line_number':296,'multiline':False]['text':' Maybe<T> uses placement new on local storage in a way we don't understand.','line_number':312,'multiline':False]['text':' Allow this if the Maybe<> value itself is threadsafe.','line_number':313,'multiline':False]['text':' UniquePtr writes through temporaries referring to its internal storage.','line_number':317,'multiline':False]['text':' Allow this if the UniquePtr<> is threadsafe.','line_number':318,'multiline':False]['text':' Operations on nsISupports reference counts.','line_number':322,'multiline':False]['text':' ConvertToLowerCase::write writes through a local pointer into the first','line_number':326,'multiline':False]['text':' argument.','line_number':327,'multiline':False]['text':' nsPropertyTable::GetPropertyInternal has the option of removing data','line_number':338,'multiline':False]['text':' from the table, but when it is called by nsPropertyTable::GetProperty','line_number':339,'multiline':False]['text':' this will not occur.','line_number':340,'multiline':False]['text':' Document::PropertyTable calls GetExtraPropertyTable (which has side','line_number':347,'multiline':False]['text':' effects) if the input category is non-zero. If a literal zero was passed','line_number':348,'multiline':False]['text':' in for the category then we treat it as a safe argument, per','line_number':349,'multiline':False]['text':' isEdgeSafeArgument, so just watch for that.','line_number':350,'multiline':False]['text':' This function has an explicit test for being on the main thread if the','line_number':358,'multiline':False]['text':' style has non-threadsafe refcounts, but the analysis isn't smart enough','line_number':359,'multiline':False]['text':' to understand what the actual styles that can be involved are.','line_number':360,'multiline':False]['text':' CachedBorderImageData is exclusively owned by nsStyleImage, but the','line_number':364,'multiline':False]['text':' analysis is not smart enough to know this.','line_number':365,'multiline':False]['text':' StyleShapeSource exclusively owns its UniquePtr<nsStyleImage>.','line_number':373,'multiline':False]['text':' The AddRef through a just-assigned heap pointer here is not handled by','line_number':381,'multiline':False]['text':' the analysis.','line_number':382,'multiline':False]['text':' AllChildrenIterator asks AppendOwnedAnonBoxes to append into an nsTArray','line_number':390,'multiline':False]['text':' local variable.','line_number':391,'multiline':False]['text':' Runnables are created and named on one thread, then dispatched','line_number':398,'multiline':False]['text':' (possibly to another). Writes on the origin thread are ok.','line_number':399,'multiline':False]['text':' We manually lock here','line_number':406,'multiline':False]['text':' We don't care what happens when we're about to crash.','line_number':421,'multiline':False]['text':' These ought to be threadsafe.','line_number':431,'multiline':False]['text':' Uses an AutoLock','line_number':443,'multiline':False]['text':' These all create static strings in local storage, which is threadsafe','line_number':460,'multiline':False]['text':' to do but not understood by the analysis yet.','line_number':461,'multiline':False]['text':' These could probably be handled by treating the scope of PSAutoLock','line_number':464,'multiline':False]['text':' aka BaseAutoLock<PSMutex> as threadsafe.','line_number':465,'multiline':False]['text':' The analysis thinks we'll write to mBits in the DoGetStyleFoo<false>','line_number':469,'multiline':False]['text':' call.  Maybe the template parameter confuses it?','line_number':470,'multiline':False]['text':' The analysis can't cope with the indirection used for the objects','line_number':473,'multiline':False]['text':' being initialized here, from nsCSSValue::Array::Create to the return','line_number':474,'multiline':False]['text':' value of the Item(i) getter.','line_number':475,'multiline':False]['text':' Unable to analyze safety of linked list initialization.','line_number':478,'multiline':False]['text':' Unable to trace through dataflow, but straightforward if inspected.','line_number':482,'multiline':False]['text':' Need main thread assertions or other fixes.','line_number':485,'multiline':False]['text':' Operations on heap structures pointed to by arrays and strings are','line_number':493,'multiline':False]['text':' threadsafe as long as the array/string itself is threadsafe.','line_number':494,'multiline':False]['text':' Similar for some other data structures','line_number':515,'multiline':False]['text':' UniquePtr is similar.','line_number':520,'multiline':False]['text':' The use of unique pointers when copying mCropRect here confuses','line_number':523,'multiline':False]['text':' the analysis.','line_number':524,'multiline':False]['text':' Handle some writes into an array whose safety we don't have a good way','line_number':537,'multiline':False]['text':' of tracking currently.','line_number':538,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':559,'multiline':False]['text':' Sixgill Utilities','line_number':560,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':561,'multiline':False]['text':' Fields and index operations do not involve any dereferences. Remove them','line_number':570,'multiline':False]['text':' from the expression but remember any encountered fields for use by','line_number':571,'multiline':False]['text':' annotations later on.','line_number':572,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':616,'multiline':False]['text':' Analysis Structures','line_number':617,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':618,'multiline':False]['text':' Safe arguments are those which may be written through (directly, not through','line_number':620,'multiline':False]['text':' pointer fields etc.) without concerns about thread safety. This includes','line_number':621,'multiline':False]['text':' pointers to stack data, null pointers, and other data we know is thread','line_number':622,'multiline':False]['text':' local, such as certain arguments to the root functions.','line_number':623,'multiline':False]['text':'','line_number':624,'multiline':False]['text':' Entries in the worklist keep track of the pointer arguments to the function','line_number':625,'multiline':False]['text':' which are safe using a sorted array, so that this can be propagated down the','line_number':626,'multiline':False]['text':' stack. Zero is |this|, and arguments are indexed starting at one.','line_number':627,'multiline':False]['text':' Sorting isn't necessary for correctness but makes printed stack info tidier.','line_number':671,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':735,'multiline':False]['text':' Analysis Core','line_number':736,'multiline':False]['text':'/////////////////////////////////////////////////////////////////////////////','line_number':737,'multiline':False]['text':' We want to suppress output for functions that ended up not having any','line_number':742,'multiline':False]['text':' hazards, for brevity of the final output. So each new toplevel function will','line_number':743,'multiline':False]['text':' initialize this to a string, which should be printed only if an error is','line_number':744,'multiline':False]['text':' seen.','line_number':745,'multiline':False]['text':' All local variable assignments we have seen in either the outer or inner','line_number':833,'multiline':False]['text':' function. This crosses loop boundaries, and currently has an unsoundness','line_number':834,'multiline':False]['text':' where later assignments in a loop are not taken into account.','line_number':835,'multiline':False]['text':' All loops in the current function which are reachable off main thread.','line_number':838,'multiline':False]['text':' Functions that are reachable from the current root.','line_number':841,'multiline':False]['text':' Include the callers in the stack trace instead of the callees. Make sure','line_number':855,'multiline':False]['text':' the dummy stack entry we added for the original roots is in place.','line_number':856,'multiline':False]['text':' If edge is an assignment from a local variable, return the rhs variable.','line_number':870,'multiline':False]['text':' Remember any assignments to local variables in this function.','line_number':890,'multiline':False]['text':' Note that we ignore any points where the variable's address is','line_number':891,'multiline':False]['text':' taken and indirect assignments might occur. This is an','line_number':892,'multiline':False]['text':' unsoundness in the analysis.','line_number':893,'multiline':False]['text':' Chain assignments if the RHS has only been assigned once.','line_number':897,'multiline':False]['text':' This shows up under MOZ_ASSERT, to crash the process.','line_number':942,'multiline':False]['text':' Add any arguments which are safe due to annotations.','line_number':959,'multiline':False]['text':' Points in the body which are reachable if we are not on the main thread.','line_number':977,'multiline':False]['text':' Ignore code that only executes on the main thread.','line_number':982,'multiline':False]['text':' Treat assertion failures as if they don't return, so that','line_number':1023,'multiline':False]['text':' asserting NS_IsMainThread() is sufficient to prevent the','line_number':1024,'multiline':False]['text':' analysis from considering a block of code.','line_number':1025,'multiline':False]['text':' If a function is missing it might be because a destructor Foo::~Foo() is','line_number':1042,'multiline':False]['text':' being called but GCC only gave us an implementation for','line_number':1043,'multiline':False]['text':' Foo::~Foo(int32). See computeCallgraph.js for a little more info.','line_number':1044,'multiline':False]['text':' Similarly, a call to a C1 constructor might invoke the C4 constructor. A','line_number':1052,'multiline':False]['text':' mangled constructor will be something like _ZN<length><name>C1E... or in','line_number':1053,'multiline':False]['text':' the case of a templatized constructor, _ZN<length><name>C1I...EE... so','line_number':1054,'multiline':False]['text':' we hack it and look for "C1E" or "C1I" and replace them with their C4','line_number':1055,'multiline':False]['text':' variants. This will have rare false matches, but so far we haven't hit','line_number':1056,'multiline':False]['text':' any external function calls of that sort.','line_number':1057,'multiline':False]['text':' Hack to manually follow some typedefs that show up on some functions.','line_number':1064,'multiline':False]['text':' This is a bug in the sixgill GCC plugin I think, since sixgill is','line_number':1065,'multiline':False]['text':' supposed to follow any typedefs itself.','line_number':1066,'multiline':False]['text':' Hack for contravariant return types. When overriding a virtual method','line_number':1073,'multiline':False]['text':' with a method that returns a different return type (a subtype of the','line_number':1074,'multiline':False]['text':' original return type), we are getting the right mangled name but the','line_number':1075,'multiline':False]['text':' wrong return type in the unmangled name.','line_number':1076,'multiline':False]['text':' In principle we would be better off doing a meet-over-paths here to get','line_number':1097,'multiline':False]['text':' the common subset of arguments which are safe to write through. However,','line_number':1098,'multiline':False]['text':' analyzing functions separately for each subset if simpler, ensures that','line_number':1099,'multiline':False]['text':' the stack traces we produce accurately characterize the stack arguments,','line_number':1100,'multiline':False]['text':' and should be fast enough for now.','line_number':1101,'multiline':False]['text':' Reverse the order of the bodies we process so that we visit the','line_number':1114,'multiline':False]['text':' outer function and see its assignments before the inner loops.','line_number':1115,'multiline':False]['text':' Examples:','line_number':1194,'multiline':False]['text':'','line_number':1195,'multiline':False]['text':'   void foo(type* aSafe) {','line_number':1196,'multiline':False]['text':'     type* safeBecauseNew = new type(...);','line_number':1197,'multiline':False]['text':'     type* unsafeBecauseMultipleAssignments = new type(...);','line_number':1198,'multiline':False]['text':'     if (rand())','line_number':1199,'multiline':False]['text':'       unsafeBecauseMultipleAssignments = bar();','line_number':1200,'multiline':False]['text':'     type* safeBecauseSingleAssignmentOfSafe = aSafe;','line_number':1201,'multiline':False]['text':'   }','line_number':1202,'multiline':False]['text':'','line_number':1203,'multiline':False]['text':' If there is a single place where this variable has been assigned on','line_number':1226,'multiline':False]['text':' edges we are considering, look at that edge.','line_number':1227,'multiline':False]['text':' Treat temporary pointers to DebugOnly contents as thread local.','line_number':1232,'multiline':False]['text':' Treat heap allocated pointers as thread local during construction.','line_number':1236,'multiline':False]['text':' Hopefully the construction code doesn't leak pointers to the object','line_number':1237,'multiline':False]['text':' to places where other threads might access it.','line_number':1238,'multiline':False]['text':' References to the contents of an array are threadsafe if the array','line_number':1246,'multiline':False]['text':' itself is threadsafe.','line_number':1247,'multiline':False]['text':' Watch for the coerced result of a getter_AddRefs or getter_Copies call.','line_number':1257,'multiline':False]['text':' RefPtr::operator->() and operator* transmit the safety of the','line_number':1268,'multiline':False]['text':' RefPtr to the return value.','line_number':1269,'multiline':False]['text':' Placement-new returns a pointer that is as safe as the pointer','line_number':1276,'multiline':False]['text':' passed to it. Exp[0] is the size, Exp[1] is the pointer/address.','line_number':1277,'multiline':False]['text':' Note that the invocation of the constructor is a separate call,','line_number':1278,'multiline':False]['text':' and so need not be considered here.','line_number':1279,'multiline':False]['text':' Coercion via AsAString preserves safety.','line_number':1287,'multiline':False]['text':' Special case:','line_number':1294,'multiline':False]['text':'','line_number':1295,'multiline':False]['text':'   keyframe->mTimingFunction.emplace()','line_number':1296,'multiline':False]['text':'   keyframe->mTimingFunction->Init()','line_number':1297,'multiline':False]['text':'','line_number':1298,'multiline':False]['text':' The object calling Init should be considered safe here because','line_number':1299,'multiline':False]['text':' we just emplaced it, though in general keyframe::operator->','line_number':1300,'multiline':False]['text':' could do something crazy.','line_number':1301,'multiline':False]['text':' Watch out for variables which were assigned arguments.','line_number':1318,'multiline':False]['text':' When temporary stack structures are created (either to return or to call','line_number':1324,'multiline':False]['text':' methods on without assigning them a name), the generated sixgill JSON is','line_number':1325,'multiline':False]['text':' rather strange. The temporary has structure type and is never assigned','line_number':1326,'multiline':False]['text':' to, but is dereferenced. GCC is probably not showing us everything it is','line_number':1327,'multiline':False]['text':' doing to compile this code. Pattern match for this case here.','line_number':1328,'multiline':False]['text':' The variable should have structure type.','line_number':1330,'multiline':False]['text':' The variable should not have been written to anywhere up to this point.','line_number':1341,'multiline':False]['text':' If it is initialized at this point we should have seen *some* write','line_number':1342,'multiline':False]['text':' already, since the CFG edges are visited in reverse post order.','line_number':1343,'multiline':False]['text':' nsTArray owns its header.','line_number':1352,'multiline':False]['text':' Special-cases go here :)','line_number':1359,'multiline':False]['text':' Return whether 'exp == value' holds only when execution is on the main thread.','line_number':1363,'multiline':False]