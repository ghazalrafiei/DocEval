['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
* Copyright (C) 2015, International Business Machines Corporation and
* others. All Rights Reserved.
******************************************************************************
*
* File unifiedcache.cpp
******************************************************************************
','line_number':3,'multiline':True]['text':' For std::max()','line_number':15,'multiline':False]['text':' Add fake references to prevent fNoValue from being deleted','line_number':122,'multiline':False]['text':' when other references to it are removed.','line_number':123,'multiline':False]['text':' Use a loop in case cache items that are flushed held hard references to','line_number':179,'multiline':False]['text':' other cache items making those additional cache items eligible for','line_number':180,'multiline':False]['text':' flushing.','line_number':181,'multiline':False]['text':' Dumps content of cache.','line_number':213,'multiline':False]['text':' On entry, gCacheMutex must be held.','line_number':214,'multiline':False]['text':' On exit, cache contents dumped to stderr.','line_number':215,'multiline':False]['text':' Try our best to clean up first.','line_number':243,'multiline':False]['text':' Now all that should be left in the cache are entries that refer to','line_number':246,'multiline':False]['text':' each other and entries with hard references from outside the cache.','line_number':247,'multiline':False]['text':' Nothing we can do about these so proceed to wipe out the cache.','line_number':248,'multiline':False]['text':' Deletes the sharedObject when softRefCount goes to zero.','line_number':283,'multiline':False]['text':' Deletes sharedObject when SoftRefCount goes to zero.','line_number':314,'multiline':False]['text':' best-effort basis only.','line_number':362,'multiline':False]['text':' Run an eviction slice. This will run even if we added a primary entry','line_number':367,'multiline':False]['text':' which doesn't increase the unused count, but that is still o.k','line_number':368,'multiline':False]['text':' If the hash table contains an inProgress placeholder entry for this key,','line_number':384,'multiline':False]['text':' this means that another thread is currently constructing the value object.','line_number':385,'multiline':False]['text':' Loop, waiting for that construction to complete.','line_number':386,'multiline':False]['text':' If the hash table contains an entry for the key,','line_number':394,'multiline':False]['text':' fetch out the contents and return them.','line_number':395,'multiline':False]['text':' The hash table contained nothing for this key.','line_number':401,'multiline':False]['text':' Insert an inProgress place holder value.','line_number':402,'multiline':False]['text':' Our caller will create the final value and update the hash table.','line_number':403,'multiline':False]['text':' Tell waiting threads that we replace in-progress status with','line_number':462,'multiline':False]['text':' an error.','line_number':463,'multiline':False]['text':' Since we have the cache lock, calling regular SharedObject add/removeRef','line_number':475,'multiline':False]['text':' could cause us to deadlock on ourselves since they may need to lock','line_number':476,'multiline':False]['text':' the cache mutex.','line_number':477,'multiline':False]['text':' Entries that are under construction are never evictable','line_number':504,'multiline':False]['text':' We can evict entries that are either not a primary or have just','line_number':509,'multiline':False]['text':' one reference (The one reference being from the cache itself).','line_number':510,'multiline':False]['text':' This path only happens from flush(all). Which only happens from the','line_number':522,'multiline':False]['text':' UnifiedCache destructor.  Nulling out value.cacheptr changes the behavior','line_number':523,'multiline':False]['text':' of value.removeRef(), causing the deletion to be done there.','line_number':524,'multiline':False]