['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' The data structure use to storing JSObject CCWs for a given source','line_number':27,'multiline':False]['text':' compartment. These are partitioned by target compartment so that we can','line_number':28,'multiline':False]['text':' easily select wrappers by source and target compartment. String CCWs are','line_number':29,'multiline':False]['text':' stored in a per-zone separate map.','line_number':30,'multiline':False]['text':' Leave the outer map as nothing and only iterate the inner map we','line_number':86,'multiline':False]['text':' find here.','line_number':87,'multiline':False]['text':' Iterator over compartments that the ObjectWrapperMap has wrappers for.','line_number':130,'multiline':False]['text':' It's possible for InnerMap to be empty after wrappers have been','line_number':135,'multiline':False]['text':' removed, e.g. by being nuked.','line_number':136,'multiline':False]['text':' namespace js','line_number':253,'multiline':False]['text':'
   * During GC, stores the head of a list of incoming pointers from gray cells.
   *
   * The objects in the list are either cross-compartment wrappers, or
   * debugger wrapper objects.  The list link is either in the second extra
   * slot for the former, or a special slot for the latter.
   ','line_number':266,'multiline':True]['text':' Fields set and used by the GC. Be careful, may be stale after we return','line_number':277,'multiline':False]['text':' to the mutator.','line_number':278,'multiline':False]['text':' These flags help us to discover if a compartment that shouldn't be','line_number':280,'multiline':False]['text':' alive manages to outlive a GC. Note that these flags have to be on','line_number':281,'multiline':False]['text':' the compartment, not the realm, because same-compartment realms can','line_number':282,'multiline':False]['text':' have cross-realm pointers without wrappers.','line_number':283,'multiline':False]['text':' During GC, we may set this to |true| if we entered a realm in this','line_number':287,'multiline':False]['text':' compartment. Note that (without a stack walk) we don't know exactly','line_number':288,'multiline':False]['text':' *which* realms, because Realm::enterRealmDepthIgnoringJit_ does not','line_number':289,'multiline':False]['text':' account for cross-Realm calls in JIT code updating cx->realm_. See','line_number':290,'multiline':False]['text':' also the enterRealmDepthIgnoringJit_ comment.','line_number':291,'multiline':False]['text':' True if all outgoing wrappers have been nuked. This happens when all realms','line_number':295,'multiline':False]['text':' have been nuked and NukeCrossCompartmentWrappers is called with the','line_number':296,'multiline':False]['text':' NukeAllReferences option. This prevents us from creating new wrappers for','line_number':297,'multiline':False]['text':' the compartment.','line_number':298,'multiline':False]['text':' Note: Unrestricted access to the zone's runtime from an arbitrary','line_number':309,'multiline':False]['text':' thread can easily lead to races. Use this method very carefully.','line_number':310,'multiline':False]['text':' Certain compartments are implementation details of the embedding, and','line_number':313,'multiline':False]['text':' references to them should never leak out to script. For realms belonging to','line_number':314,'multiline':False]['text':' this compartment, onNewGlobalObject does not fire, and addDebuggee is a','line_number':315,'multiline':False]['text':' no-op.','line_number':316,'multiline':False]['text':' Cross-compartment wrappers are shared by all realms in the compartment, but','line_number':321,'multiline':False]['text':' they still have a per-realm ObjectGroup etc. To prevent us from having','line_number':322,'multiline':False]['text':' multiple realms, each with some cross-compartment wrappers potentially','line_number':323,'multiline':False]['text':' keeping the realm alive longer than necessary, we always allocate CCWs in','line_number':324,'multiline':False]['text':' the first realm.','line_number':325,'multiline':False]['text':' Iterator over |wrapped -> wrapper| entries for object CCWs in a given','line_number':390,'multiline':False]['text':' compartment. Can be optionally restricted by target compartment.','line_number':391,'multiline':False]['text':' Iterator over compartments that this compartment has CCWs for.','line_number':404,'multiline':False]['text':'
   * These methods mark pointers that cross compartment boundaries. They are
   * called in per-zone GCs to prevent the wrappers' outgoing edges from
   * dangling (full GCs naturally follow pointers across compartments) and
   * when compacting to update cross-compartment pointers.
   ','line_number':412,'multiline':True]['text':' We only set the maybeAlive flag for objects and scripts. It's assumed that,','line_number':436,'multiline':False]['text':' if a compartment is alive, then it will have at least some live object or','line_number':437,'multiline':False]['text':' script it in. Even if we get this wrong, the worst that will happen is that','line_number':438,'multiline':False]['text':' scheduledForDestruction will be set on the compartment, which will cause','line_number':439,'multiline':False]['text':' some extra GC activity to try to free the compartment.','line_number':440,'multiline':False]['text':'
 * AutoWrapperVector and AutoWrapperRooter can be used to store wrappers that
 * are obtained from the cross-compartment map. However, these classes should
 * not be used if the wrapper will escape. For example, it should not be stored
 * in the heap.
 *
 * The AutoWrapper rooters are different from other autorooters because their
 * wrappers are marked on every GC slice rather than just the first one. If
 * there's some wrapper that we want to use temporarily without causing it to be
 * marked, we can use these AutoWrapper classes. If we get unlucky and a GC
 * slice runs during the code using the wrapper, the GC will mark the wrapper so
 * that it doesn't get swept out from under us. Otherwise, the wrapper needn't
 * be marked. This is useful in functions like JS_TransplantObject that
 * manipulate wrappers in compartments that may no longer be alive.
 ','line_number':454,'multiline':True]['text':'
 * This class stores the data for AutoWrapperVector and AutoWrapperRooter. It
 * should not be used in any other situations.
 ','line_number':470,'multiline':True]['text':'
   * We use unsafeGet() in the constructors to avoid invoking a read barrier
   * on the wrapper, which may be dead (see the comment about bug 803376 in
   * gc/GC.cpp regarding this). If there is an incremental GC while the
   * wrapper is in use, the AutoWrapper rooter will ensure the wrapper gets
   * marked.
   ','line_number':475,'multiline':True]['text':' namespace js ','line_number':521,'multiline':True]['text':' vm_Compartment_h ','line_number':523,'multiline':True]