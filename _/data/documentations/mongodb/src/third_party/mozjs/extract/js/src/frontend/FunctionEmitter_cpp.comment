['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':9,'multiline':False]['text':' ModuleObject','line_number':11,'multiline':False]['text':' AsyncEmitter','line_number':12,'multiline':False]['text':' BytecodeEmitter','line_number':13,'multiline':False]['text':' FunctionSyntaxKind','line_number':14,'multiline':False]['text':' ModuleSharedContext','line_number':15,'multiline':False]['text':' NameLocation','line_number':16,'multiline':False]['text':' NameOpEmitter','line_number':17,'multiline':False]['text':' BindingIter','line_number':18,'multiline':False]['text':' PropOpEmitter','line_number':19,'multiline':False]['text':' SharedContext','line_number':20,'multiline':False]['text':' AsyncFunctionResolveKind','line_number':21,'multiline':False]['text':' JSScript','line_number':22,'multiline':False]['text':' ModuleBuilder','line_number':23,'multiline':False]['text':' JSOp','line_number':24,'multiline':False]['text':' BindingKind','line_number':25,'multiline':False]['text':' IsAsmJSModule','line_number':26,'multiline':False]['text':'                [stack]','line_number':50,'multiline':False]['text':'                [stack]','line_number':63,'multiline':False]['text':'              [stack] FUN?','line_number':66,'multiline':False]['text':'                [stack]','line_number':83,'multiline':False]['text':' Prepare to update the inner lazy script now that it's parent is fully','line_number':87,'multiline':False]['text':' compiled. These updates will be applied in UpdateEmittedInnerFunctions().','line_number':88,'multiline':False]['text':'              [stack] FUN?','line_number':92,'multiline':False]['text':'                [stack]','line_number':106,'multiline':False]['text':' Annex B block-scoped functions are hoisted like any other assignment','line_number':108,'multiline':False]['text':' that assigns the function to the outer 'var' binding.','line_number':109,'multiline':False]['text':' Get the location of the 'var' binding in the body scope. The','line_number':117,'multiline':False]['text':' name must be found, else there is a bug in the Annex B handling','line_number':118,'multiline':False]['text':' in Parser.','line_number':119,'multiline':False]['text':'','line_number':120,'multiline':False]['text':' In sloppy eval contexts, this location is dynamic.','line_number':121,'multiline':False]['text':' If there are parameter expressions, the var name could be a','line_number':125,'multiline':False]['text':' parameter.','line_number':126,'multiline':False]['text':'              [stack]','line_number':145,'multiline':False]['text':'              [stack] FUN','line_number':150,'multiline':False]['text':'              [stack] FUN','line_number':155,'multiline':False]['text':'              [stack]','line_number':160,'multiline':False]['text':'                [stack]','line_number':176,'multiline':False]['text':'              [stack]','line_number':181,'multiline':False]['text':' Make the function object a literal in the outer script's pool.','line_number':192,'multiline':False]['text':'                [stack]','line_number':198,'multiline':False]['text':'              [stack] FUN?','line_number':202,'multiline':False]['text':' No nested functions inside other functions are top-level.','line_number':208,'multiline':False]['text':' In sloppy eval scripts, top-level functions are accessed dynamically.','line_number':211,'multiline':False]['text':' In global and module scripts, top-level functions are those bound in','line_number':212,'multiline':False]['text':' the var scope.','line_number':213,'multiline':False]['text':'              [stack]','line_number':221,'multiline':False]['text':'                [stack]','line_number':225,'multiline':False]['text':' Non-hoisted functions simply emit their respective op.','line_number':229,'multiline':False]['text':'                [stack]','line_number':231,'multiline':False]['text':' JSOp::LambdaArrow is always preceded by a opcode that pushes new.target.','line_number':233,'multiline':False]['text':' See below.','line_number':234,'multiline':False]['text':'            [stack] NEW.TARGET/NULL','line_number':239,'multiline':False]['text':'              [stack] PROTO','line_number':245,'multiline':False]['text':'            [stack] FUN','line_number':247,'multiline':False]['text':' This is a FunctionExpression, ArrowFunctionExpression, or class','line_number':253,'multiline':False]['text':' constructor. Emit the single instruction (without location info).','line_number':254,'multiline':False]['text':'              [stack] FUN','line_number':258,'multiline':False]['text':'                [stack]','line_number':268,'multiline':False]['text':' For functions nested within functions and blocks, make a lambda and','line_number':270,'multiline':False]['text':' initialize the binding name of the function in the current scope.','line_number':271,'multiline':False]['text':'              [stack]','line_number':275,'multiline':False]['text':'              [stack] FUN','line_number':280,'multiline':False]['text':'              [stack] FUN','line_number':285,'multiline':False]['text':'              [stack]','line_number':290,'multiline':False]['text':'                [stack]','line_number':298,'multiline':False]['text':' For modules, we record the function and instantiate the binding','line_number':301,'multiline':False]['text':' during ModuleInstantiate(), before the script is run.','line_number':302,'multiline':False]['text':' NOTE: The `index` is not directly stored as an opcode, but we collect the','line_number':311,'multiline':False]['text':' range of indices in `BytecodeEmitter::emitDeclarationInstantiation` instead','line_number':312,'multiline':False]['text':' of discrete indices.','line_number':313,'multiline':False]['text':'                [stack]','line_number':320,'multiline':False]['text':'            [stack] NEW.TARGET','line_number':324,'multiline':False]['text':'            [stack] NULL','line_number':329,'multiline':False]['text':'                [stack]','line_number':341,'multiline':False]['text':' The ordering of these EmitterScopes is important. The named lambda','line_number':347,'multiline':False]['text':' scope needs to enclose the function scope needs to enclose the extra','line_number':348,'multiline':False]['text':' var scope.','line_number':349,'multiline':False]['text':' There's parameter exprs, emit them in the main section.','line_number':376,'multiline':False]['text':'','line_number':377,'multiline':False]['text':' One caveat is that Debugger considers ops in the prologue to be','line_number':378,'multiline':False]['text':' unreachable (i.e. cannot set a breakpoint on it). If there are no','line_number':379,'multiline':False]['text':' parameter exprs, any unobservable environment ops (like pushing the','line_number':380,'multiline':False]['text':' call object, setting '.this', etc) need to go in the prologue, else it','line_number':381,'multiline':False]['text':' messes up breakpoint tests.','line_number':382,'multiline':False]['text':'              [stack]','line_number':391,'multiline':False]['text':'                [stack]','line_number':420,'multiline':False]['text':'              [stack]','line_number':429,'multiline':False]['text':'          [stack]','line_number':442,'multiline':False]['text':'                [stack]','line_number':455,'multiline':False]['text':' After emitting expressions for all parameters, copy over any formal','line_number':470,'multiline':False]['text':' parameters which have been redeclared as vars. For example, in the','line_number':471,'multiline':False]['text':' following, the var y in the body scope is 42:','line_number':472,'multiline':False]['text':'','line_number':473,'multiline':False]['text':'   function f(x, y = 42) { var y; }','line_number':474,'multiline':False]['text':'','line_number':475,'multiline':False]['text':' There may not be a var binding of the same name.','line_number':480,'multiline':False]['text':' The '.this' and '.generator' function special','line_number':486,'multiline':False]['text':' bindings should never appear in the extra var','line_number':487,'multiline':False]['text':' scope. 'arguments', however, may.','line_number':488,'multiline':False]['text':'            [stack]','line_number':494,'multiline':False]['text':'            [stack] VAL','line_number':501,'multiline':False]['text':'            [stack] VAL','line_number':506,'multiline':False]['text':'            [stack]','line_number':511,'multiline':False]['text':'                [stack]','line_number':521,'multiline':False]['text':' If we fall off the end of a generator, do a final yield.','line_number':524,'multiline':False]['text':' Emit final yield bytecode for generators, for example:','line_number':527,'multiline':False]['text':' function gen * () { ... }','line_number':528,'multiline':False]['text':'          [stack] RESULT','line_number':530,'multiline':False]['text':'          [stack] RESULT? UNDEF','line_number':535,'multiline':False]['text':'          [stack] RESULT','line_number':540,'multiline':False]['text':'          [stack]','line_number':545,'multiline':False]['text':'          [stack] GEN','line_number':550,'multiline':False]['text':' No need to check for finally blocks, etc as in EmitReturn.','line_number':554,'multiline':False]['text':'          [stack]','line_number':556,'multiline':False]['text':' Emit final yield bytecode for async functions, for example:','line_number':560,'multiline':False]['text':' async function deferred() { ... }','line_number':561,'multiline':False]['text':' Emit final yield bytecode for async generators, for example:','line_number':566,'multiline':False]['text':' async function asyncgen * () { ... }','line_number':567,'multiline':False]['text':'          [stack] RESULT? UNDEF','line_number':569,'multiline':False]['text':'          [stack]','line_number':574,'multiline':False]['text':'          [stack] GEN','line_number':579,'multiline':False]['text':' No need to check for finally blocks, etc as in EmitReturn.','line_number':583,'multiline':False]['text':'          [stack]','line_number':585,'multiline':False]['text':' Non-generator functions just return |undefined|. The','line_number':590,'multiline':False]['text':' JSOp::RetRval emitted below will do that, except if the','line_number':591,'multiline':False]['text':' script has a finally block: there can be a non-undefined','line_number':592,'multiline':False]['text':' value in the return value slot. Make sure the return value','line_number':593,'multiline':False]['text':' is |undefined|.','line_number':594,'multiline':False]['text':'          [stack] UNDEF','line_number':597,'multiline':False]['text':'          [stack]','line_number':601,'multiline':False]['text':'            [stack]','line_number':609,'multiline':False]['text':' We only want to mark the end of a function as a breakable position if','line_number':634,'multiline':False]['text':' there is token there that the user can easily associate with the function','line_number':635,'multiline':False]['text':' as a whole. Since arrow function single-expression bodies have no closing','line_number':636,'multiline':False]['text':' curly bracket, we do not place a breakpoint at their end position.','line_number':637,'multiline':False]['text':' Always end the script with a JSOp::RetRval. Some other parts of the','line_number':644,'multiline':False]['text':' codebase depend on this opcode,','line_number':645,'multiline':False]['text':' e.g. InterpreterRegs::setToEndOfScript.','line_number':646,'multiline':False]['text':'              [stack]','line_number':648,'multiline':False]['text':'                [stack]','line_number':688,'multiline':False]['text':'            [stack] ARG','line_number':692,'multiline':False]['text':'            [stack]','line_number':697,'multiline':False]['text':'                [stack]','line_number':709,'multiline':False]['text':'              [stack]','line_number':712,'multiline':False]['text':'                [stack] DEFAULT','line_number':725,'multiline':False]['text':'              [stack] ARG/DEFAULT','line_number':728,'multiline':False]['text':'              [stack]','line_number':732,'multiline':False]['text':'                [stack]','line_number':747,'multiline':False]['text':'              [stack] ARG','line_number':750,'multiline':False]['text':'                [stack] ARG','line_number':763,'multiline':False]['text':'              [stack]','line_number':766,'multiline':False]['text':'                [stack]','line_number':781,'multiline':False]['text':'              [stack]','line_number':784,'multiline':False]['text':'                [stack] DEFAULT','line_number':797,'multiline':False]['text':'              [stack] ARG/DEFAULT','line_number':800,'multiline':False]['text':'                [stack] ARG/DEFAULT','line_number':813,'multiline':False]['text':'              [stack]','line_number':816,'multiline':False]['text':'                [stack]','line_number':831,'multiline':False]['text':'              [stack] REST','line_number':834,'multiline':False]['text':'              [stack]','line_number':838,'multiline':False]['text':'                [stack]','line_number':851,'multiline':False]['text':'              [stack] REST','line_number':854,'multiline':False]['text':'                [stack] REST','line_number':867,'multiline':False]['text':'              [stack]','line_number':870,'multiline':False]['text':'                [stack]','line_number':881,'multiline':False]['text':' If we have an initializer, emit the initializer and assign it','line_number':883,'multiline':False]['text':' to the argument slot. TDZ is taken care of afterwards.','line_number':884,'multiline':False]['text':'              [stack] ARG','line_number':887,'multiline':False]['text':'              [stack]','line_number':892,'multiline':False]['text':'                [stack] DEFAULT','line_number':899,'multiline':False]['text':'              [stack] ARG/DEFAULT','line_number':902,'multiline':False]['text':'                [stack]','line_number':910,'multiline':False]['text':'              [stack] REST','line_number':913,'multiline':False]['text':'                [stack] ARG','line_number':920,'multiline':False]['text':' RHS is already pushed in the caller side.','line_number':925,'multiline':False]['text':' Make sure prepareForRhs doesn't touch stack.','line_number':926,'multiline':False]['text':'              [stack] ARG','line_number':933,'multiline':False]['text':'              [stack] ARG','line_number':938,'multiline':False]['text':'              [stack]','line_number':943,'multiline':False]