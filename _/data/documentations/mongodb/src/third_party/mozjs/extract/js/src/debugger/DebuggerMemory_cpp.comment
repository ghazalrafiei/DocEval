['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':20,'multiline':False]['text':' js::PlainObject','line_number':28,'multiline':False]['text':' static ','line_number':40,'multiline':True]['text':' static ','line_number':63,'multiline':True]['text':' static ','line_number':70,'multiline':True]['text':' static ','line_number':73,'multiline':True]['text':' Check for Debugger.Memory.prototype, which has the same class as','line_number':92,'multiline':False]['text':' Debugger.Memory instances, however doesn't actually represent an instance','line_number':93,'multiline':False]['text':' of Debugger.Memory. It is the only object that is<DebuggerMemory>() but','line_number':94,'multiline':False]['text':' doesn't have a Debugger instance.','line_number':95,'multiline':False]['text':' Accessor properties of Debugger.Memory.prototype.','line_number':117,'multiline':False]['text':' Function properties of Debugger.Memory.prototype.','line_number':129,'multiline':False]['text':' static ','line_number':141,'multiline':True]['text':' Don't pop the AllocationsLogEntry yet. The queue's links are followed','line_number':215,'multiline':False]['text':' by the GC to find the AllocationsLogEntry, but are not barriered, so','line_number':216,'multiline':False]['text':' we must edit them with great care. Use the queue entry in place, and','line_number':217,'multiline':False]['text':' then pop and delete together.','line_number':218,'multiline':False]['text':' Pop the front queue entry, and delete it immediately, so that the GC','line_number':255,'multiline':False]['text':' sees the AllocationsLogEntry's HeapPtr barriers run atomically with','line_number':256,'multiline':False]['text':' the change to the graph (the queue link).','line_number':257,'multiline':False]['text':' Careful!  This must also reject NaN.','line_number':314,'multiline':False]['text':' If this is a change any debuggees would observe, have all debuggee','line_number':327,'multiline':False]['text':' realms recompute their sampling probabilities.','line_number':328,'multiline':False]['text':' Debugger.Memory.prototype.takeCensus ','line_number':353,'multiline':True]['text':' The takeCensus function works in three phases:','line_number':369,'multiline':False]['text':'','line_number':370,'multiline':False]['text':' 1) We examine the 'breakdown' property of our 'options' argument, and','line_number':371,'multiline':False]['text':'    use that to build a CountType tree.','line_number':372,'multiline':False]['text':'','line_number':373,'multiline':False]['text':' 2) We create a count node for the root of our CountType tree, and then walk','line_number':374,'multiline':False]['text':'    the heap, counting each node we find, expanding our tree of counts as we','line_number':375,'multiline':False]['text':'    go.','line_number':376,'multiline':False]['text':'','line_number':377,'multiline':False]['text':' 3) We walk the tree of counts and produce JavaScript objects reporting the','line_number':378,'multiline':False]['text':'    accumulated results.','line_number':379,'multiline':False]['text':' Populate our target set of debuggee zones.','line_number':403,'multiline':False]['text':' Debugger.Memory property and method tables. ','line_number':432,'multiline':True]['text':' static ','line_number':434,'multiline':True]['text':' static ','line_number':447,'multiline':True]