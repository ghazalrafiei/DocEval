['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ScopeContext','line_number':9,'multiline':False]['text':' ParserBase','line_number':10,'multiline':False]['text':' JSMSG_*','line_number':11,'multiline':False]['text':' js_*_str','line_number':12,'multiline':False]['text':' We need a token position precisely where we have private visibility.','line_number':84,'multiline':False]['text':' We have seen at least one private name','line_number':89,'multiline':False]['text':' We never saw any private names, so can just return early','line_number':108,'multiline':False]['text':' Don't care about public;','line_number':114,'multiline':False]['text':' empty list means all bound','line_number':119,'multiline':False]['text':' Return a sorted list in ascendng order of position.','line_number':130,'multiline':False]['text':' We never saw any private names, so can just return early','line_number':142,'multiline':False]['text':' GetUnboundPrivateNames returns the list sorted.','line_number':156,'multiline':False]['text':' Strict mode doesn't have wack Annex B function semantics.','line_number':215,'multiline':False]['text':' Base case: actually declare the Annex B vars and mark applicable','line_number':222,'multiline':False]['text':' function boxes as Annex B.','line_number':223,'multiline':False]['text':' Inner scope case: propagate still applicable function boxes to the','line_number':245,'multiline':False]['text':' enclosing scope.','line_number':246,'multiline':False]['text':' This check is needed because the catch body could have declared','line_number':303,'multiline':False]['text':' vars, which would have been added to catchParamScope.','line_number':304,'multiline':False]['text':' Named lambdas always need a binding for their own name. If this','line_number':349,'multiline':False]['text':' binding is closed over when we finish parsing the function in','line_number':350,'multiline':False]['text':' finishFunctionScopes, the function box needs to be marked as','line_number':351,'multiline':False]['text':' needing a dynamic DeclEnv object.','line_number':352,'multiline':False]['text':' Annex B.3.3.1 disallows redeclaring parameter names. In the','line_number':398,'multiline':False]['text':' presence of parameter expressions, parameter names are on the','line_number':399,'multiline':False]['text':' function scope, which encloses the var scope. This means the','line_number':400,'multiline':False]['text':' isVarRedeclaredInInnermostScope call above would not catch this','line_number':401,'multiline':False]['text':' case, so test it manually.','line_number':402,'multiline':False]['text':' If an early error would have occurred already, this function should not','line_number':414,'multiline':False]['text':' exhibit Annex B.3.3 semantics.','line_number':415,'multiline':False]['text':' It is an early error if a 'var' declaration appears inside a','line_number':475,'multiline':False]['text':' scope contour that has a lexical declaration of the same name. For','line_number':476,'multiline':False]['text':' example, the following are early errors:','line_number':477,'multiline':False]['text':'','line_number':478,'multiline':False]['text':'   { let x; var x; }','line_number':479,'multiline':False]['text':'   { { var x; } let x; }','line_number':480,'multiline':False]['text':'','line_number':481,'multiline':False]['text':' And the following are not:','line_number':482,'multiline':False]['text':'','line_number':483,'multiline':False]['text':'   { var x; var x; }','line_number':484,'multiline':False]['text':'   { { let x; } var x; }','line_number':485,'multiline':False]['text':' Annex B.3.5 allows redeclaring simple (non-destructured)','line_number':496,'multiline':False]['text':' catch parameters with var declarations.','line_number':497,'multiline':False]['text':' Annex B.3.3 allows redeclaring functions in the same block.','line_number':501,'multiline':False]['text':' Annex B.3.3.1 disallows redeclaring parameter names.','line_number':515,'multiline':False]['text':' We don't need to set *prevPos here since this case is not','line_number':516,'multiline':False]['text':' an error.','line_number':517,'multiline':False]['text':' DryRunOption is used for propagating Annex B functions: we don't','line_number':527,'multiline':False]['text':' want to declare the synthesized Annex B vars until we exit the var','line_number':528,'multiline':False]['text':' scope and know that no early errors would have occurred. In order','line_number':529,'multiline':False]['text':' to avoid quadratic search, we only check for var redeclarations in','line_number':530,'multiline':False]['text':' the innermost scope when doing a dry run.','line_number':531,'multiline':False]['text':' We don't have position information at runtime.','line_number':542,'multiline':False]['text':' The asm.js validator does all its own symbol-table management so, as an','line_number':567,'multiline':False]['text':' optimization, avoid doing any work here.','line_number':568,'multiline':False]['text':' Derived class constructors emit JSOp::CheckReturn, which requires','line_number':573,'multiline':False]['text':' '.this' to be bound.','line_number':574,'multiline':False]['text':' Time to implement the odd semantics of 'arguments'.','line_number':609,'multiline':False]['text':' ES 9.2.12 steps 19 and 20 say formal parameters, lexical bindings,','line_number':619,'multiline':False]['text':' and body-level functions named 'arguments' shadow the arguments','line_number':620,'multiline':False]['text':' object.','line_number':621,'multiline':False]['text':'','line_number':622,'multiline':False]['text':' So even if there wasn't a free use of 'arguments' but there is a var','line_number':623,'multiline':False]['text':' binding of 'arguments', we still might need the arguments object.','line_number':624,'multiline':False]['text':'','line_number':625,'multiline':False]['text':' If we have an extra var scope due to parameter expressions and the body','line_number':626,'multiline':False]['text':' declared 'var arguments', we still need to declare 'arguments' in the','line_number':627,'multiline':False]['text':' function scope.','line_number':628,'multiline':False]['text':' Formal parameters shadow the arguments object.','line_number':649,'multiline':False]['text':' The special '.generator' binding must be on the function scope, and must','line_number':662,'multiline':False]['text':' be marked closed-over, as generators expect to find it on the CallObject.','line_number':663,'multiline':False]['text':' Provide a .generator binding on the module scope for compatibility with','line_number':677,'multiline':False]['text':' generator code, which expect to find it on the CallObject for normal','line_number':678,'multiline':False]['text':' generators.','line_number':679,'multiline':False]['text':' namespace frontend','line_number':691,'multiline':False]['text':' namespace js','line_number':693,'multiline':False]