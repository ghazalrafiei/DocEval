['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2003-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  gencnvex.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2003oct12
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':' toUnicode (state table in ucm->states) ','line_number':51,'multiline':True]['text':' fromUnicode ','line_number':54,'multiline':True]['text':' 0x10000 because of 16-bit stage 2/3 indexes ','line_number':59,'multiline':True]['text':' for stage3 compaction of <subchar1> |2 mappings ','line_number':64,'multiline':True]['text':' statistics ','line_number':67,'multiline':True]['text':' aliased, not owned ','line_number':84,'multiline':True]['text':' we do not expect this to be called ','line_number':106,'multiline':True]['text':' suppress compiler warnings about unused variables','line_number':110,'multiline':False]['text':' suppress compiler warnings about unused variable','line_number':120,'multiline':False]['text':' write the header and base table name for an extension-only table ','line_number':131,'multiline':True]['text':' add padding ','line_number':134,'multiline':True]['text':' fill the header ','line_number':140,'multiline':True]['text':' write the header and the base table name ','line_number':145,'multiline':True]['text':' fill indexes[] - offsets/indexes are in units of the target array ','line_number':150,'multiline':True]['text':' add padding ','line_number':169,'multiline':True]['text':' add padding ','line_number':185,'multiline':True]['text':' add padding ','line_number':202,'multiline':True]['text':' statistics ','line_number':215,'multiline':True]['text':' write the extension data ','line_number':227,'multiline':True]['text':' return the number of bytes that should have been written ','line_number':288,'multiline':True]['text':' to Unicode --------------------------------------------------------------- ','line_number':292,'multiline':True]['text':'
 * Remove fromUnicode fallbacks and SUB mappings which are irrelevant for
 * the toUnicode table.
 * This includes mappings with MBCS_FROM_U_EXT_FLAG which were suitable
 * for the base toUnicode table but not for the base fromUnicode table.
 * The table must be sorted.
 * Modifies previous data in the reverseMap.
 ','line_number':294,'multiline':True]['text':' leave the map alone for the initial mappings with desired flags ','line_number':313,'multiline':True]['text':' reduce from here to the rest ','line_number':321,'multiline':True]['text':' write the Unicode result code point or string index ','line_number':340,'multiline':True]['text':' the parser enforces m->uLen<=UCNV_EXT_MAX_UCHARS ','line_number':345,'multiline':True]['text':' get the result code point string and its 16-bit string length ','line_number':347,'multiline':True]['text':' allocate it and put its length and index into the value ','line_number':355,'multiline':True]['text':' write the result 16-bit string ','line_number':361,'multiline':True]['text':' update statistics ','line_number':372,'multiline':True]['text':'
 * Recursive toUTable generator core function.
 * Preconditions:
 * - start<limit (There is at least one mapping.)
 * - The mappings are sorted lexically. (Access is through the reverseMap.)
 * - All mappings between start and limit have input sequences that share
 *   the same prefix of unitIndex length, and therefore all of these sequences
 *   are at least unitIndex+1 long.
 * - There are only relevant mappings available through the reverseMap,
 *   see reduceToUMappings().
 *
 * One function invocation generates one section table.
 *
 * Steps:
 * 1. Count the number of unique unit values and get the low/high unit values
 *    that occur at unitIndex.
 * 2. Allocate the section table with possible optimization for linear access.
 * 3. Write temporary version of the section table with start indexes of
 *    subsections, each corresponding to one unit value at unitIndex.
 * 4. Iterate through the table once more, and depending on the subsection length:
 *    0: write 0 as a result value (unused byte in linear-access section table)
 *   >0: if there is one mapping with an input unit sequence of unitIndex+1
 *       then defaultValue=compute the mapping result for this whole sequence
 *       else defaultValue=0
 *
 *       recurse into the subsection
 ','line_number':388,'multiline':True]['text':' step 1: examine the input units; set low, high, uniqueCount ','line_number':431,'multiline':True]['text':' step 2: allocate the section; set count, section ','line_number':449,'multiline':True]['text':'
         * for the root table and for fairly full tables:
         * allocate for direct, linear array access
         * by keeping count, to write an entry for each unit value
         * from low to high
         * exception: use a compact table if count==0x100 because
         * that cannot be encoded in the length byte
         ','line_number':452,'multiline':True]['text':' allocate the section: 1 entry for the header + count for the items ','line_number':469,'multiline':True]['text':' write the section header ','line_number':472,'multiline':True]['text':' step 3: write temporary section table with subsection starts ','line_number':475,'multiline':True]['text':' just before low to prevent empty subsections before low ','line_number':476,'multiline':True]['text':' section table index ','line_number':477,'multiline':True]['text':' start of a new subsection for unit high ','line_number':484,'multiline':True]['text':' write empty subsections for unused units in a linear table ','line_number':486,'multiline':True]['text':' write the entry with the subsection start ','line_number':494,'multiline':True]['text':' assert(j==count) ','line_number':498,'multiline':True]['text':' step 4: recurse and write results ','line_number':500,'multiline':True]['text':' remove the subStart temporary value ','line_number':506,'multiline':True]['text':' leave the value zero: empty subsection for unused unit in a linear table ','line_number':510,'multiline':True]['text':' see if there is exactly one input unit sequence of length unitIndex+1 ','line_number':514,'multiline':True]['text':' do not include this in generateToUTable() ','line_number':518,'multiline':True]['text':' print error for multiple same-input-sequence mappings ','line_number':522,'multiline':True]['text':' write the result for the input sequence ending here ','line_number':533,'multiline':True]['text':' write the index to the subsection table ','line_number':536,'multiline':True]['text':' recurse ','line_number':539,'multiline':True]['text':'
 * Generate the toUTable and toUUChars from the input table.
 * The input table must be sorted, and all precision flags must be 0..3.
 * This function will modify the table's reverseMap.
 ','line_number':548,'multiline':True]['text':' from Unicode ------------------------------------------------------------- ','line_number':565,'multiline':True]['text':'
 * preprocessing:
 * rebuild reverseMap with mapping indexes for mappings relevant for from Unicode
 * change each Unicode string to encode all but the first code point in 16-bit form
 *
 * generation:
 * for each unique code point
 *   write an entry in the 3-stage trie
 *   check that there is only one single-code point sequence
 *   start recursion for following 16-bit input units
 ','line_number':567,'multiline':True]['text':'
 * Remove toUnicode fallbacks and non-<subchar1> SUB mappings
 * which are irrelevant for the fromUnicode extension table.
 * Remove MBCS_FROM_U_EXT_FLAG bits.
 * Overwrite the reverseMap with an index array to the relevant mappings.
 * Modify the code point sequences to a generator-friendly format where
 * the first code points remains unchanged but the following are recoded
 * into 16-bit Unicode string form.
 * The table must be sorted.
 * Destroys previous data in the reverseMap.
 ','line_number':579,'multiline':True]['text':'
     * we do not go through the map on input because the mappings are
     * sorted lexically
     ','line_number':601,'multiline':True]['text':' recode all but the first code point to 16-bit Unicode ','line_number':617,'multiline':True]['text':' destructive in-place recoding ','line_number':624,'multiline':True]['text':' counts the first code point always at 2 - the first 16-bit unit is at 16-bit index 2 ','line_number':630,'multiline':True]['text':'
         * no mapping, <subchar1> preferred
         *
         * no need to count in statistics because the subchars are already
         * counted for maxOutBytes and maxBytesPerUChar in UConverterStaticData,
         * and this non-mapping does not count for maxInUChars which are always
         * trivially at least two if counting unmappable supplementary code points
         ','line_number':646,'multiline':True]['text':' 1..3: store the bytes in the value word ','line_number':660,'multiline':True]['text':' the parser enforces m->bLen<=UCNV_EXT_MAX_BYTES ','line_number':669,'multiline':True]['text':' store the bytes in fromUBytes[] and the index in the value word ','line_number':670,'multiline':True]['text':' calculate the real UTF-16 length (see recoding in prepareFromUMappings()) ','line_number':683,'multiline':True]['text':' update statistics ','line_number':690,'multiline':True]['text':'
 * works like generateToUTable(), except that the
 * output section consists of two arrays, one for input UChars and one
 * for result values
 *
 * also, fromUTable sections are always stored in a compact form for
 * access via binary search
 ','line_number':706,'multiline':True]['text':' step 1: examine the input units; set low, high, uniqueCount ','line_number':731,'multiline':True]['text':' step 2: allocate the section; set count, section ','line_number':749,'multiline':True]['text':' the fromUTable always stores for access via binary search ','line_number':750,'multiline':True]['text':' allocate the section: 1 entry for the header + count for the items ','line_number':753,'multiline':True]['text':' write the section header ','line_number':757,'multiline':True]['text':' step 3: write temporary section table with subsection starts ','line_number':761,'multiline':True]['text':' just before low to prevent empty subsections before low ','line_number':762,'multiline':True]['text':' section table index ','line_number':763,'multiline':True]['text':' start of a new subsection for unit high ','line_number':770,'multiline':True]['text':' write the entry with the subsection start ','line_number':773,'multiline':True]['text':' assert(j==count) ','line_number':779,'multiline':True]['text':' step 4: recurse and write results ','line_number':781,'multiline':True]['text':' see if there is exactly one input unit sequence of length unitIndex+1 ','line_number':787,'multiline':True]['text':' do not include this in generateToUTable() ','line_number':791,'multiline':True]['text':' print error for multiple same-input-sequence mappings ','line_number':795,'multiline':True]['text':' write the result for the input sequence ending here ','line_number':806,'multiline':True]['text':' write the index to the subsection table ','line_number':809,'multiline':True]['text':' recurse ','line_number':812,'multiline':True]['text':'
 * add entries to the fromUnicode trie,
 * assume to be called with code points in ascending order
 * and use that to build the trie in precompacted form
 ','line_number':821,'multiline':True]['text':'
     * compute the index for each stage,
     * allocate a stage block if necessary,
     * and write the stage value
     ','line_number':834,'multiline':True]['text':' allocate another block in stage 2; overlap with the previous block ','line_number':847,'multiline':True]['text':' minimum block start with overlap ','line_number':849,'multiline':True]['text':' allocate another block in stage 3; overlap with the previous block ','line_number':866,'multiline':True]['text':' minimum block start with overlap ','line_number':868,'multiline':True]['text':' round up to a multiple of stage 3 granularity >1 (similar to utrie.c) ','line_number':873,'multiline':True]['text':'
     * assume extData->stage3[i3]==0 because we get
     * code points in strictly ascending order
     ','line_number':885,'multiline':True]['text':' <subchar1> SUB mapping, see getFromUBytesValue() and prepareFromUMappings() ','line_number':891,'multiline':True]['text':'
         * precompaction is not optimal for <subchar1> |2 mappings because
         * stage3 values for them are all the same, unlike for other mappings
         * which all have unique values;
         * use a simple compaction of reusing a whole block filled with these
         * mappings
         ','line_number':894,'multiline':True]['text':' is the entire block filled with <subchar1> |2 mappings? ','line_number':902,'multiline':True]['text':' the entire block is filled with these mappings ','line_number':909,'multiline':True]['text':' point to the previous such block and remove this block from stage3 ','line_number':911,'multiline':True]['text':' remember this block's stage2 entry ','line_number':916,'multiline':True]['text':' roundtrip or fallback mapping ','line_number':927,'multiline':True]['text':'
     * iterate over same-initial-code point mappings,
     * enter the initial code point into the trie,
     * and start a recursion on the corresponding mappings section
     * with generateFromUTable()
     ','line_number':950,'multiline':True]['text':' get a new subsection of mappings starting with the same code point ','line_number':961,'multiline':True]['text':'
         * compute the value for this code point;
         * if there is a mapping for this code point alone, it is at subStart
         * because the table is sorted lexically
         ','line_number':970,'multiline':True]['text':' do not include this in generateFromUTable() ','line_number':979,'multiline':True]['text':' print error for multiple same-input-sequence mappings ','line_number':983,'multiline':True]['text':' write the result for this one code point ','line_number':994,'multiline':True]['text':' write the index to the subsection table ','line_number':997,'multiline':True]['text':' recurse, starting from 16-bit-unit index 2, the first 16-bit unit after c ','line_number':1000,'multiline':True]['text':'
 * Generate the fromU data structures from the input table.
 * The input table must be sorted, and all precision flags must be 0..3.
 * This function will modify the table's reverseMap.
 ','line_number':1009,'multiline':True]['text':' allocate all-unassigned stage blocks ','line_number':1025,'multiline':True]['text':'
     * stage 3b stores only unique values, and in
     * index 0: 0 for "no mapping"
     * index 1: "no mapping" with preference for <subchar1> rather than <subchar>
     ','line_number':1029,'multiline':True]['text':' allocate the first entry in the fromUTable because index 0 means "no result" ','line_number':1037,'multiline':True]['text':'
     * offset the stage 1 trie entries by stage1Top because they will
     * be stored in a single array
     ','line_number':1045,'multiline':True]['text':' -------------------------------------------------------------------------- ','line_number':1058,'multiline':True]['text':'
     * assume that the table is sorted
     *
     * call the functions in this order because
     * makeToUTable() modifies the original reverseMap,
     * makeFromUTable() writes a whole new mapping into reverseMap
     ','line_number':1073,'multiline':True]