['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 1997-2016, International Business Machines Corporation and    *
* others. All Rights Reserved.                                                *
*******************************************************************************
*
* File CALENDAR.CPP
*
* Modification History:
*
*   Date        Name        Description
*   02/03/97    clhuang     Creation.
*   04/22/97    aliu        Cleaned up, fixed memory leak, made
*                           setWeekCountData() more robust.
*                           Moved platform code to TPlatformUtilities.
*   05/01/97    aliu        Made equals(), before(), after() arguments const.
*   05/20/97    aliu        Changed logic of when to compute fields and time
*                           to fix bugs.
*   08/12/97    aliu        Added equivalentTo.  Misc other fixes.
*   07/28/98    stephen     Sync up with JDK 1.2
*   09/02/98    stephen     Sync with JDK 1.2 8/31 build (getActualMin/Max)
*   03/17/99    stephen     Changed adoptTimeZone() - now fAreFieldsSet is
*                           set to FALSE to force update of time.
*******************************************************************************
','line_number':3,'multiline':True]['text':' for 'typeid' to work','line_number':29,'multiline':False]['text':' INTERNAL - for cleanup','line_number':70,'multiline':False]['text':' ------------------------------------------','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':' Registration','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':'-------------------------------------------','line_number':89,'multiline':False]['text':'#define U_DEBUG_CALSVC 1','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':'*
 * fldName was removed as a duplicate implementation.
 * use  udbg_ services instead,
 * which depend on include files and library from ../tools/toolutil, the following circular link:
 *   CPPFLAGS+=-I$(top_srcdir)/tools/toolutil
 *   LIBS+=$(LIBICUTOOLUTIL)
 ','line_number':95,'multiline':True]['text':'*
* convert a UCalendarDateFields into a string - for debugging
* @param f field enum
* @return static string to the field name
* @internal
','line_number':105,'multiline':True]['text':' from CalendarTest::calToStr - but doesn't modify contents.','line_number':117,'multiline':False]['text':' can add more things here: DST, zone, etc.','line_number':129,'multiline':False]['text':'} else if(fStamp[i] == kInternalDefault) {','line_number':139,'multiline':False]['text':'    fprintf(stderr, " (internal default) ");','line_number':140,'multiline':False]['text':' Max value for stamp allowable before recalculation ','line_number':156,'multiline':True]['text':' Must be in the order of gCalTypes above','line_number':181,'multiline':False]['text':'unusedCreationContext','line_number':212,'multiline':True]['text':' Only used with service registration.','line_number':237,'multiline':False]['text':' only used with service registration.','line_number':246,'multiline':False]['text':' '=' ','line_number':252,'multiline':True]['text':''@'','line_number':253,'multiline':True]['text':'TODO: ULOC_FULL_NAME is out of date and too small..','line_number':266,'multiline':False]['text':' Canonicalize, so that an old-style variant will be transformed to keywords.','line_number':269,'multiline':False]['text':' e.g ja_JP_TRADITIONAL -> ja_JP@calendar=japanese','line_number':270,'multiline':False]['text':' NOTE: Since ICU-20187, ja_JP_TRADITIONAL no longer canonicalizes, and','line_number':271,'multiline':False]['text':' the Gregorian calendar is returned instead.','line_number':272,'multiline':False]['text':' terminate','line_number':277,'multiline':False]['text':' when calendar keyword is not available or not supported, read supplementalData','line_number':292,'multiline':False]['text':' to get the default calendar type for the locale's region','line_number':293,'multiline':False]['text':' Read preferred calendar values from supplementalData calendarPreference','line_number':300,'multiline':False]['text':' the first calendar type is the default for the region','line_number':311,'multiline':False]['text':' terminate;','line_number':316,'multiline':False]['text':' final fallback','line_number':325,'multiline':False]['text':' default any region specific not handled individually to islamic','line_number':360,'multiline':False]['text':' -------------------------------------','line_number':404,'multiline':False]['text':'*
* a Calendar Factory which creates the "basic" calendar types, that is, those
* shipped with ICU.
','line_number':406,'multiline':True]['text':'*
    * @param calendarType static const string (caller owns storage - will be aliased) to calendar type
    ','line_number':412,'multiline':True]['text':'virtual UBool isSupportedID( const UnicodeString& id, UErrorCode& status) const {','line_number':421,'multiline':False]['text':'  if(U_FAILURE(status)) {','line_number':422,'multiline':False]['text':'    return FALSE;','line_number':423,'multiline':False]['text':'  }','line_number':424,'multiline':False]['text':'  char keyword[ULOC_FULLNAME_CAPACITY];','line_number':425,'multiline':False]['text':'  getCalendarKeyword(id, keyword, (int32_t)sizeof(keyword));','line_number':426,'multiline':False]['text':'  return isStandardSupportedKeyword(keyword, status);','line_number':427,'multiline':False]['text':'}','line_number':428,'multiline':False]['text':' '@' a variant character ','line_number':434,'multiline':True]['text':'service','line_number':442,'multiline':True]['text':' current locale','line_number':449,'multiline':False]['text':' Canonical locale','line_number':450,'multiline':False]['text':' Do we handle this type?','line_number':465,'multiline':False]['text':'*
* A factory which looks up the DefaultCalendar resource to determine which class of calendar to use
','line_number':479,'multiline':True]['text':'service','line_number':488,'multiline':True]['text':' '@' is a variant character','line_number':498,'multiline':False]['text':' -------------------------------------','line_number':508,'multiline':False]['text':'actualID','line_number':533,'multiline':True]['text':'int32_t kind = lkey.kind();','line_number':535,'multiline':False]['text':' -------------------------------------','line_number':565,'multiline':False]['text':' -------------------------------------','line_number':572,'multiline':False]['text':' Register all basic instances.','line_number':590,'multiline':False]['text':' UCONFIG_NO_SERVICE ','line_number':621,'multiline':True]['text':' -------------------------------------','line_number':623,'multiline':False]['text':'    Minimum  Greatest min      Least max   Greatest max','line_number':626,'multiline':False]['text':'N/A','line_number':627,'multiline':True]['text':'N/A','line_number':627,'multiline':True]['text':'N/A','line_number':627,'multiline':True]['text':'N/A','line_number':627,'multiline':True]['text':' ERA','line_number':627,'multiline':False]['text':'N/A','line_number':628,'multiline':True]['text':'N/A','line_number':628,'multiline':True]['text':'N/A','line_number':628,'multiline':True]['text':'N/A','line_number':628,'multiline':True]['text':' YEAR','line_number':628,'multiline':False]['text':'N/A','line_number':629,'multiline':True]['text':'N/A','line_number':629,'multiline':True]['text':'N/A','line_number':629,'multiline':True]['text':'N/A','line_number':629,'multiline':True]['text':' MONTH','line_number':629,'multiline':False]['text':'N/A','line_number':630,'multiline':True]['text':'N/A','line_number':630,'multiline':True]['text':'N/A','line_number':630,'multiline':True]['text':'N/A','line_number':630,'multiline':True]['text':' WEEK_OF_YEAR','line_number':630,'multiline':False]['text':'N/A','line_number':631,'multiline':True]['text':'N/A','line_number':631,'multiline':True]['text':'N/A','line_number':631,'multiline':True]['text':'N/A','line_number':631,'multiline':True]['text':' WEEK_OF_MONTH','line_number':631,'multiline':False]['text':'N/A','line_number':632,'multiline':True]['text':'N/A','line_number':632,'multiline':True]['text':'N/A','line_number':632,'multiline':True]['text':'N/A','line_number':632,'multiline':True]['text':' DAY_OF_MONTH','line_number':632,'multiline':False]['text':'N/A','line_number':633,'multiline':True]['text':'N/A','line_number':633,'multiline':True]['text':'N/A','line_number':633,'multiline':True]['text':'N/A','line_number':633,'multiline':True]['text':' DAY_OF_YEAR','line_number':633,'multiline':False]['text':' DAY_OF_WEEK','line_number':634,'multiline':False]['text':'N/A','line_number':635,'multiline':True]['text':'N/A','line_number':635,'multiline':True]['text':'N/A','line_number':635,'multiline':True]['text':'N/A','line_number':635,'multiline':True]['text':' DAY_OF_WEEK_IN_MONTH','line_number':635,'multiline':False]['text':' AM_PM','line_number':636,'multiline':False]['text':' HOUR','line_number':637,'multiline':False]['text':' HOUR_OF_DAY','line_number':638,'multiline':False]['text':' MINUTE','line_number':639,'multiline':False]['text':' SECOND','line_number':640,'multiline':False]['text':' MILLISECOND','line_number':641,'multiline':False]['text':' ZONE_OFFSET','line_number':642,'multiline':False]['text':' DST_OFFSET','line_number':643,'multiline':False]['text':'N/A','line_number':644,'multiline':True]['text':'N/A','line_number':644,'multiline':True]['text':'N/A','line_number':644,'multiline':True]['text':'N/A','line_number':644,'multiline':True]['text':' YEAR_WOY','line_number':644,'multiline':False]['text':' DOW_LOCAL','line_number':645,'multiline':False]['text':'N/A','line_number':646,'multiline':True]['text':'N/A','line_number':646,'multiline':True]['text':'N/A','line_number':646,'multiline':True]['text':'N/A','line_number':646,'multiline':True]['text':' EXTENDED_YEAR','line_number':646,'multiline':False]['text':' JULIAN_DAY','line_number':647,'multiline':False]['text':' MILLISECONDS_IN_DAY','line_number':648,'multiline':False]['text':' IS_LEAP_MONTH','line_number':649,'multiline':False]['text':' Resource bundle tags read by this class','line_number':652,'multiline':False]['text':' Data flow in Calendar','line_number':657,'multiline':False]['text':' ---------------------','line_number':658,'multiline':False]['text':' The current time is represented in two ways by Calendar: as UTC','line_number':660,'multiline':False]['text':' milliseconds from the epoch start (1 January 1970 0:00 UTC), and as local','line_number':661,'multiline':False]['text':' fields such as MONTH, HOUR, AM_PM, etc.  It is possible to compute the','line_number':662,'multiline':False]['text':' millis from the fields, and vice versa.  The data needed to do this','line_number':663,'multiline':False]['text':' conversion is encapsulated by a TimeZone object owned by the Calendar.','line_number':664,'multiline':False]['text':' The data provided by the TimeZone object may also be overridden if the','line_number':665,'multiline':False]['text':' user sets the ZONE_OFFSET and/or DST_OFFSET fields directly. The class','line_number':666,'multiline':False]['text':' keeps track of what information was most recently set by the caller, and','line_number':667,'multiline':False]['text':' uses that to compute any other information as needed.','line_number':668,'multiline':False]['text':' If the user sets the fields using set(), the data flow is as follows.','line_number':670,'multiline':False]['text':' This is implemented by the Calendar subclass's computeTime() method.','line_number':671,'multiline':False]['text':' During this process, certain fields may be ignored.  The disambiguation','line_number':672,'multiline':False]['text':' algorithm for resolving which fields to pay attention to is described','line_number':673,'multiline':False]['text':' above.','line_number':674,'multiline':False]['text':'   local fields (YEAR, MONTH, DATE, HOUR, MINUTE, etc.)','line_number':676,'multiline':False]['text':'           |','line_number':677,'multiline':False]['text':'           | Using Calendar-specific algorithm','line_number':678,'multiline':False]['text':'           V','line_number':679,'multiline':False]['text':'   local standard millis','line_number':680,'multiline':False]['text':'           |','line_number':681,'multiline':False]['text':'           | Using TimeZone or user-set ZONE_OFFSET / DST_OFFSET','line_number':682,'multiline':False]['text':'           V','line_number':683,'multiline':False]['text':'   UTC millis (in time data member)','line_number':684,'multiline':False]['text':' If the user sets the UTC millis using setTime(), the data flow is as','line_number':686,'multiline':False]['text':' follows.  This is implemented by the Calendar subclass's computeFields()','line_number':687,'multiline':False]['text':' method.','line_number':688,'multiline':False]['text':'   UTC millis (in time data member)','line_number':690,'multiline':False]['text':'           |','line_number':691,'multiline':False]['text':'           | Using TimeZone getOffset()','line_number':692,'multiline':False]['text':'           V','line_number':693,'multiline':False]['text':'   local standard millis','line_number':694,'multiline':False]['text':'           |','line_number':695,'multiline':False]['text':'           | Using Calendar-specific algorithm','line_number':696,'multiline':False]['text':'           V','line_number':697,'multiline':False]['text':'   local fields (YEAR, MONTH, DATE, HOUR, MINUTE, etc.)','line_number':698,'multiline':False]['text':' In general, a round trip from fields, through local and UTC millis, and','line_number':700,'multiline':False]['text':' back out to fields is made when necessary.  This is implemented by the','line_number':701,'multiline':False]['text':' complete() method.  Resolving a partial set of fields into a UTC millis','line_number':702,'multiline':False]['text':' value allows all remaining fields to be generated from that value.  If','line_number':703,'multiline':False]['text':' the Calendar is lenient, the fields are also renormalized to standard','line_number':704,'multiline':False]['text':' ranges when they are regenerated.','line_number':705,'multiline':False]['text':' -------------------------------------','line_number':707,'multiline':False]['text':' -------------------------------------','line_number':735,'multiline':False]['text':' -------------------------------------','line_number':770,'multiline':False]['text':' -------------------------------------','line_number':798,'multiline':False]['text':' -------------------------------------','line_number':805,'multiline':False]['text':' -------------------------------------','line_number':814,'multiline':False]['text':' -------------------------------------','line_number':852,'multiline':False]['text':' -------------------------------------','line_number':860,'multiline':False]['text':' -------------------------------------','line_number':868,'multiline':False]['text':' ------------------------------------- Adopting','line_number':876,'multiline':False]['text':' Note: this is the bottleneck that actually calls the service routines.','line_number':878,'multiline':False]['text':' Propagate some kind of err','line_number':901,'multiline':False]['text':' It's a unicode string telling us what type of calendar to load ("gregorian", etc)','line_number':910,'multiline':False]['text':' Create a Locale over this string','line_number':911,'multiline':False]['text':' Don't overwrite actualLoc, since the actual loc from this call','line_number':923,'multiline':False]['text':' may be something like "@calendar=gregorian" -- TODO investigate','line_number':924,'multiline':False]['text':' further...','line_number':925,'multiline':False]['text':' Propagate some err','line_number':930,'multiline':False]['text':' recursed! Second lookup returned a UnicodeString.','line_number':937,'multiline':False]['text':' Perhaps DefaultCalendar{} was set to another locale.','line_number':938,'multiline':False]['text':' Extract a char* out of it..','line_number':941,'multiline':False]['text':' requested a calendar type which could NOT be found.','line_number':952,'multiline':False]['text':' set the correct locale (this was an indirected calendar)','line_number':959,'multiline':False]['text':' UCONFIG_NO_SERVICE ','line_number':970,'multiline':True]['text':' a calendar was returned - we assume the factory did the right thing.','line_number':972,'multiline':False]['text':' Now, reset calendar to default state:','line_number':995,'multiline':False]['text':'  Set the correct time zone','line_number':996,'multiline':False]['text':' let the new calendar have the current time.','line_number':997,'multiline':False]['text':' -------------------------------------','line_number':1002,'multiline':False]['text':' -------------------------------------','line_number':1014,'multiline':False]['text':' -------------------------------------','line_number':1059,'multiline':False]['text':' -------------------------------------','line_number':1068,'multiline':False]['text':' -------------------------------------','line_number':1077,'multiline':False]['text':' -------------------------------------','line_number':1086,'multiline':False]['text':' -------------------------------------','line_number':1095,'multiline':False]['text':' This is a wrapper over ucal_getKeywordValuesForLocale','line_number':1101,'multiline':False]['text':' -------------------------------------','line_number':1115,'multiline':False]['text':' return as milliseconds','line_number':1120,'multiline':False]['text':' -------------------------------------','line_number':1123,'multiline':False]['text':'*
* Gets this Calendar's current time as a long.
* @return the current time as UTC milliseconds from the epoch.
','line_number':1125,'multiline':True]['text':' Test for buffer overflows ','line_number':1138,'multiline':True]['text':' -------------------------------------','line_number':1145,'multiline':False]['text':'*
* Sets this Calendar's current time from the given long value.
* A status of U_ILLEGAL_ARGUMENT_ERROR is set when millis is
* outside the range permitted by a Calendar object when not in lenient mode.
* when in lenient mode the out of range values are pinned to their respective min/max.
* @param date the new time in UTC milliseconds from the epoch.
','line_number':1147,'multiline':True]['text':' -------------------------------------','line_number':1188,'multiline':False]['text':' field values are only computed when actually requested; for more on when computation','line_number':1193,'multiline':False]['text':' of various things happens, see the "data flow in Calendar" description at the top','line_number':1194,'multiline':False]['text':' of this file','line_number':1195,'multiline':False]['text':' Cast away const','line_number':1196,'multiline':False]['text':' -------------------------------------','line_number':1200,'multiline':False]['text':' Ensure that the fNextStamp value doesn't go pass max value for int32_t ','line_number':1210,'multiline':True]['text':' Remove later','line_number':1215,'multiline':False]['text':' -------------------------------------','line_number':1219,'multiline':False]['text':' -------------------------------------','line_number':1229,'multiline':False]['text':' -------------------------------------','line_number':1241,'multiline':False]['text':' -------------------------------------','line_number':1254,'multiline':False]['text':' For now the full getRelatedYear implementation is here;','line_number':1255,'multiline':False]['text':' per #10752 move the non-default implementation to subclasses','line_number':1256,'multiline':False]['text':' (default implementation will do no year adjustment)','line_number':1257,'multiline':False]['text':' ad hoc conversion, improve under #10752','line_number':1260,'multiline':False]['text':' rough est for now, ok for grego 1846-2138,','line_number':1261,'multiline':False]['text':' otherwise occasionally wrong (for 3% of years)','line_number':1262,'multiline':False]['text':' modify for calendar type','line_number':1285,'multiline':False]['text':' CALTYPE_GREGORIAN','line_number':1311,'multiline':False]['text':' CALTYPE_JAPANESE','line_number':1312,'multiline':False]['text':' CALTYPE_BUDDHIST','line_number':1313,'multiline':False]['text':' CALTYPE_ROC','line_number':1314,'multiline':False]['text':' CALTYPE_ISO8601','line_number':1315,'multiline':False]['text':' do nothing, EXTENDED_YEAR same as Gregorian','line_number':1316,'multiline':False]['text':' -------------------------------------','line_number':1322,'multiline':False]['text':' For now the full setRelatedYear implementation is here;','line_number':1323,'multiline':False]['text':' per #10752 move the non-default implementation to subclasses','line_number':1324,'multiline':False]['text':' (default implementation will do no year adjustment)','line_number':1325,'multiline':False]['text':' ad hoc conversion, improve under #10752','line_number':1328,'multiline':False]['text':' rough est for now, ok for grego 1846-2138,','line_number':1329,'multiline':False]['text':' otherwise occasionally wrong (for 3% of years)','line_number':1330,'multiline':False]['text':' modify for calendar type','line_number':1345,'multiline':False]['text':' CALTYPE_GREGORIAN','line_number':1371,'multiline':False]['text':' CALTYPE_JAPANESE','line_number':1372,'multiline':False]['text':' CALTYPE_BUDDHIST','line_number':1373,'multiline':False]['text':' CALTYPE_ROC','line_number':1374,'multiline':False]['text':' CALTYPE_ISO8601','line_number':1375,'multiline':False]['text':' do nothing, EXTENDED_YEAR same as Gregorian','line_number':1376,'multiline':False]['text':' set extended year','line_number':1379,'multiline':False]['text':' -------------------------------------','line_number':1383,'multiline':False]['text':' Must do this; other code depends on it','line_number':1389,'multiline':False]['text':' Remove later','line_number':1391,'multiline':False]['text':' fTime is not 'cleared' - may be used if no fields are set.','line_number':1394,'multiline':False]['text':' -------------------------------------','line_number':1397,'multiline':False]['text':' Remove later','line_number':1408,'multiline':False]['text':' -------------------------------------','line_number':1412,'multiline':False]['text':' -------------------------------------','line_number':1433,'multiline':False]['text':' Test for buffer overflows ','line_number':1440,'multiline':True]['text':' fills in unset fields','line_number':1446,'multiline':False]['text':' Test for buffer overflows ','line_number':1447,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':1456,'multiline':False]['text':' Protected utility methods for use by subclasses.  These are very handy','line_number':1457,'multiline':False]['text':' for implementing add, roll, and computeFields.','line_number':1458,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':1459,'multiline':False]['text':'*
* Adjust the specified field so that it is within
* the allowable range for the date to which this calendar is set.
* For example, in a Gregorian calendar pinning the {@link #DAY_OF_MONTH DAY_OF_MONTH}
* field for a calendar set to April 31 would cause it to be set
* to April 30.
* <p>
* <b>Subclassing:</b>
* <br>
* This utility method is intended for use by subclasses that need to implement
* their own overrides of {@link #roll roll} and {@link #add add}.
* <p>
* <b>Note:</b>
* <code>pinField</code> is implemented in terms of
* {@link #getActualMinimum getActualMinimum}
* and {@link #getActualMaximum getActualMaximum}.  If either of those methods uses
* a slow, iterative algorithm for a particular field, it would be
* unwise to attempt to call <code>pinField</code> for that field.  If you
* really do need to do so, you should override this method to do
* something more efficient for that field.
* <p>
* @param field The calendar field whose value should be pinned.
*
* @see #getActualMinimum
* @see #getActualMaximum
* @stable ICU 2.0
','line_number':1461,'multiline':True]['text':' Compute local wall millis','line_number':1505,'multiline':False]['text':' Mark fields as set.  Do this before calling handleComputeFields().','line_number':1511,'multiline':False]['text':'fInternalSetMask;','line_number':1512,'multiline':False]['text':' = UCAL_DATE','line_number':1516,'multiline':False]['text':' Remove later','line_number':1523,'multiline':False]['text':' Remove later','line_number':1526,'multiline':False]['text':' We used to check for and correct extreme millis values (near','line_number':1531,'multiline':False]['text':' Long.MIN_VALUE or Long.MAX_VALUE) here.  Such values would cause','line_number':1532,'multiline':False]['text':' overflows from positive to negative (or vice versa) and had to','line_number':1533,'multiline':False]['text':' be manually tweaked.  We no longer need to do this because we','line_number':1534,'multiline':False]['text':' have limited the range of supported dates to those that have a','line_number':1535,'multiline':False]['text':' Julian day that fits into an int.  This allows us to implement a','line_number':1536,'multiline':False]['text':' JULIAN_DAY field and also removes some inelegant code. - Liu','line_number':1537,'multiline':False]['text':' 11/6/00','line_number':1538,'multiline':False]['text':'fprintf(stderr, "%s:%d- Hmm! Jules @ %d, as per %.0lf millis\n",','line_number':1545,'multiline':False]['text':'__FILE__, __LINE__, fFields[UCAL_JULIAN_DAY], localMillis);','line_number':1546,'multiline':False]['text':' Call framework method to have subclass compute its fields.','line_number':1551,'multiline':False]['text':' These must include, at a minimum, MONTH, DAY_OF_MONTH,','line_number':1552,'multiline':False]['text':' EXTENDED_YEAR, YEAR, DAY_OF_YEAR.  This method will call internalSet(),','line_number':1553,'multiline':False]['text':' which will update stamp[].','line_number':1554,'multiline':False]['text':' Compute week-related fields, based on the subclass-computed','line_number':1557,'multiline':False]['text':' fields computed by handleComputeFields().','line_number':1558,'multiline':False]['text':' Compute time-related fields.  These are indepent of the date and','line_number':1561,'multiline':False]['text':' of the subclass algorithm.  They depend only on the local zone','line_number':1562,'multiline':False]['text':' wall milliseconds in day.','line_number':1563,'multiline':False]['text':' Assume AM == 0','line_number':1573,'multiline':False]['text':' If julian is negative, then julian%7 will be negative, so we adjust','line_number':1581,'multiline':False]['text':' accordingly.  We add 1 because Julian day 0 is Monday.','line_number':1582,'multiline':False]['text':'*
* Compute the Gregorian calendar year, month, and day of month from
* the given Julian day.  These values are not stored in fields, but in
* member variables gregorianXxx.  Also compute the DAY_OF_WEEK and
* DOW_LOCAL fields.
','line_number':1589,'multiline':True]['text':' Compute day of week: JD 0 = Monday','line_number':1599,'multiline':False]['text':' Calculate 1-based localized day of week','line_number':1603,'multiline':False]['text':'*
* Compute the Gregorian calendar year, month, and day of month from the
* Julian day.  These values are not stored in fields, but in member
* variables gregorianXxx.  They are used for time zone computations and by
* subclasses that are Gregorian derivatives.  Subclasses may call this
* method to perform a Gregorian calendar millis->fields computation.
','line_number':1612,'multiline':True]['text':' ec ','line_number':1619,'multiline':True]['text':'*
* Compute the fields WEEK_OF_YEAR, YEAR_WOY, WEEK_OF_MONTH,
* DAY_OF_WEEK_IN_MONTH, and DOW_LOCAL from EXTENDED_YEAR, YEAR,
* DAY_OF_WEEK, and DAY_OF_YEAR.  The latter fields are computed by the
* subclass based on the calendar system.
*
* <p>The YEAR_WOY field is computed simplistically.  It is equal to YEAR
* most of the time, but at the year boundary it may be adjusted to YEAR-1
* or YEAR+1 to reflect the overlap of a week into an adjacent year.  In
* this case, a simple increment or decrement is performed on YEAR, even
* though this may yield an invalid YEAR value.  For instance, if the YEAR
* is part of a calendar system with an N-year cycle field CYCLE, then
* incrementing the YEAR may involve incrementing CYCLE and setting YEAR
* back to 0 or 1.  This is not handled by this code, and in fact cannot be
* simply handled without having subclasses define an entire parallel set of
* fields for fields larger than or equal to a year.  This additional
* complexity is not warranted, since the intention of the YEAR_WOY field is
* to support ISO 8601 notation, so it will typically be used with a
* proleptic Gregorian calendar, which has no field larger than a year.
','line_number':1624,'multiline':True]['text':' WEEK_OF_YEAR start','line_number':1652,'multiline':False]['text':' Compute the week of the year.  For the Gregorian calendar, valid week','line_number':1653,'multiline':False]['text':' numbers run from 1 to 52 or 53, depending on the year, the first day','line_number':1654,'multiline':False]['text':' of the week, and the minimal days in the first week.  For other','line_number':1655,'multiline':False]['text':' calendars, the valid range may be different -- it depends on the year','line_number':1656,'multiline':False]['text':' length.  Days at the start of the year may fall into the last week of','line_number':1657,'multiline':False]['text':' the previous year; days at the end of the year may fall into the','line_number':1658,'multiline':False]['text':' first week of the next year.  ASSUME that the year length is less than','line_number':1659,'multiline':False]['text':' 7000 days.','line_number':1660,'multiline':False]['text':' 0..6','line_number':1662,'multiline':False]['text':' 0..6','line_number':1663,'multiline':False]['text':' 0..53','line_number':1664,'multiline':False]['text':' Adjust for weeks at the year end that overlap into the previous or','line_number':1669,'multiline':False]['text':' next calendar year.','line_number':1670,'multiline':False]['text':' We are the last week of the previous year.','line_number':1672,'multiline':False]['text':' Check to see if we are in the last week; if so, we need','line_number':1673,'multiline':False]['text':' to handle the case in which we are the first week of the','line_number':1674,'multiline':False]['text':' next year.','line_number':1675,'multiline':False]['text':' Fast check: For it to be week 1 of the next year, the DOY','line_number':1682,'multiline':False]['text':' must be on or after L-5, where L is yearLength(), then it','line_number':1683,'multiline':False]['text':' cannot possibly be week 1 of the next year:','line_number':1684,'multiline':False]['text':'          L-5                  L','line_number':1685,'multiline':False]['text':' doy: 359 360 361 362 363 364 365 001','line_number':1686,'multiline':False]['text':' dow:      1   2   3   4   5   6   7','line_number':1687,'multiline':False]['text':' WEEK_OF_YEAR end','line_number':1702,'multiline':False]['text':' Determine the day of the week of the first day of the period','line_number':1716,'multiline':False]['text':' in question (either a year or a month).  Zero represents the','line_number':1717,'multiline':False]['text':' first day of the week on this calendar.','line_number':1718,'multiline':False]['text':' Compute the week number.  Initially, ignore the first week, which','line_number':1722,'multiline':False]['text':' may be fractional (or may not be).  We add periodStartDayOfWeek in','line_number':1723,'multiline':False]['text':' order to fill out the first week, if it is fractional.','line_number':1724,'multiline':False]['text':' If the first week is long enough, then count it.  If','line_number':1727,'multiline':False]['text':' the minimal days in the first week is one, or if the period start','line_number':1728,'multiline':False]['text':' is zero, we always increment weekNo.','line_number':1729,'multiline':False]['text':' julianDay ','line_number':1735,'multiline':True]['text':' status ','line_number':1735,'multiline':True]['text':' -------------------------------------','line_number':1750,'multiline':False]['text':' Nothing to do','line_number':1761,'multiline':False]['text':' These are the standard roll instructions.  These work for all','line_number':1777,'multiline':False]['text':' simple cases, that is, cases in which the limits are fixed, such','line_number':1778,'multiline':False]['text':' as the hour, the day of the month, and the era.','line_number':1779,'multiline':False]['text':' Rolling the hour is difficult on the ONSET and CEASE days of','line_number':1798,'multiline':False]['text':' daylight savings.  For example, if the change occurs at','line_number':1799,'multiline':False]['text':' 2 AM, we have the following progression:','line_number':1800,'multiline':False]['text':' ONSET: 12 Std -> 1 Std -> 3 Dst -> 4 Dst','line_number':1801,'multiline':False]['text':' CEASE: 12 Dst -> 1 Dst -> 1 Std -> 2 Std','line_number':1802,'multiline':False]['text':' To get around this problem we don't use fields; we manipulate','line_number':1803,'multiline':False]['text':' the time in millis directly.','line_number':1804,'multiline':False]['text':' Assume min == 0 in calculations below','line_number':1806,'multiline':False]['text':' Rolling the month involves both pinning the final value','line_number':1819,'multiline':False]['text':' and adjusting the DAY_OF_MONTH if necessary.  We only adjust the','line_number':1820,'multiline':False]['text':' DAY_OF_MONTH if, after updating the MONTH field, it is illegal.','line_number':1821,'multiline':False]['text':' E.g., <jan31>.roll(MONTH, 1) -> <feb28> or <feb29>.','line_number':1822,'multiline':False]['text':' Keep the day of month in range.  We don't want to spill over','line_number':1832,'multiline':False]['text':' into the next month; e.g., we don't want jan31 + 1 mo -> feb31 ->','line_number':1833,'multiline':False]['text':' mar3.','line_number':1834,'multiline':False]['text':' * If era==0 and years go backwards in time, change sign of amount.','line_number':1842,'multiline':False]['text':' * Until we have new API per #9393, we temporarily hardcode knowledge of','line_number':1843,'multiline':False]['text':'   which calendars have era 0 years that go backwards.','line_number':1844,'multiline':False]['text':' this era has real bounds, roll should wrap years','line_number':1858,'multiline':False]['text':' else era is unbounded, just pin low year instead of wrapping','line_number':1864,'multiline':False]['text':' else we are in era 0 with newYear < 1;','line_number':1868,'multiline':False]['text':' calendars with years that go backwards must pin the year value at 0,','line_number':1869,'multiline':False]['text':' other calendars can have years < 0 in era 0','line_number':1870,'multiline':False]['text':' Rolling the year can involve pinning the DAY_OF_MONTH.','line_number':1881,'multiline':False]['text':' This is tricky, because during the roll we may have to shift','line_number':1889,'multiline':False]['text':' to a different day of the week.  For example:','line_number':1890,'multiline':False]['text':'    s  m  t  w  r  f  s','line_number':1892,'multiline':False]['text':'          1  2  3  4  5','line_number':1893,'multiline':False]['text':'    6  7  8  9 10 11 12','line_number':1894,'multiline':False]['text':' When rolling from the 6th or 7th back one week, we go to the','line_number':1896,'multiline':False]['text':' 1st (assuming that the first partial week counts).  The same','line_number':1897,'multiline':False]['text':' thing happens at the end of the month.','line_number':1898,'multiline':False]['text':' The other tricky thing is that we have to figure out whether','line_number':1900,'multiline':False]['text':' the first partial week actually counts or not, based on the','line_number':1901,'multiline':False]['text':' minimal first days in the week.  And we have to use the','line_number':1902,'multiline':False]['text':' correct first day of the week to delineate the week','line_number':1903,'multiline':False]['text':' boundaries.','line_number':1904,'multiline':False]['text':' Here's our algorithm.  First, we find the real boundaries of','line_number':1906,'multiline':False]['text':' the month.  Then we discard the first partial week if it','line_number':1907,'multiline':False]['text':' doesn't count in this locale.  Then we fill in the ends with','line_number':1908,'multiline':False]['text':' phantom days, so that the first partial week and the last','line_number':1909,'multiline':False]['text':' partial week are full weeks.  We then have a nice square','line_number':1910,'multiline':False]['text':' block of weeks.  We do the usual rolling within this block,','line_number':1911,'multiline':False]['text':' as is done elsewhere in this method.  If we wind up on one of','line_number':1912,'multiline':False]['text':' the phantom days that we added, we recognize this and pin to','line_number':1913,'multiline':False]['text':' the first or the last day of the month.  Easy, eh?','line_number':1914,'multiline':False]['text':' Normalize the DAY_OF_WEEK so that 0 is the first day of the week','line_number':1916,'multiline':False]['text':' in this locale.  We have dow in 0..6.','line_number':1917,'multiline':False]['text':' Find the day of the week (normalized for locale) for the first','line_number':1921,'multiline':False]['text':' of the month.','line_number':1922,'multiline':False]['text':' Get the first day of the first full week of the month,','line_number':1926,'multiline':False]['text':' including phantom days, if any.  Figure out if the first week','line_number':1927,'multiline':False]['text':' counts or not; if it counts, then fill in phantom days.  If','line_number':1928,'multiline':False]['text':' not, advance to the first real full week (skip the partial week).','line_number':1929,'multiline':False]['text':' Skip the first partial week','line_number':1932,'multiline':False]['text':' This may be zero or negative','line_number':1934,'multiline':False]['text':' Get the day of the week (normalized for locale) for the last','line_number':1936,'multiline':False]['text':' day of the month.','line_number':1937,'multiline':False]['text':' We know monthLen >= DAY_OF_MONTH so we skip the += 7 step here.','line_number':1940,'multiline':False]['text':' Get the limit day for the blocked-off rectangular month; that','line_number':1942,'multiline':False]['text':' is, the day which is one past the last day of the month,','line_number':1943,'multiline':False]['text':' after the month has already been filled in with phantom days','line_number':1944,'multiline':False]['text':' to fill out the last week.  This day has a normalized DOW of 0.','line_number':1945,'multiline':False]['text':' Now roll between start and (limit - 1).','line_number':1948,'multiline':False]['text':' Finally, pin to the real start and end of the month.','line_number':1955,'multiline':False]['text':' Set the DAY_OF_MONTH.  We rely on the fact that this field','line_number':1959,'multiline':False]['text':' takes precedence over everything else (since all other fields','line_number':1960,'multiline':False]['text':' are also set at this point).  If this fact changes (if the','line_number':1961,'multiline':False]['text':' disambiguation algorithm changes) then we will have to unset','line_number':1962,'multiline':False]['text':' the appropriate fields here so that DAY_OF_MONTH is attended','line_number':1963,'multiline':False]['text':' to.','line_number':1964,'multiline':False]['text':' This follows the outline of WEEK_OF_MONTH, except it applies','line_number':1970,'multiline':False]['text':' to the whole year.  Please see the comment for WEEK_OF_MONTH','line_number':1971,'multiline':False]['text':' for general notes.','line_number':1972,'multiline':False]['text':' Normalize the DAY_OF_WEEK so that 0 is the first day of the week','line_number':1974,'multiline':False]['text':' in this locale.  We have dow in 0..6.','line_number':1975,'multiline':False]['text':' Find the day of the week (normalized for locale) for the first','line_number':1979,'multiline':False]['text':' of the year.','line_number':1980,'multiline':False]['text':' Get the first day of the first full week of the year,','line_number':1984,'multiline':False]['text':' including phantom days, if any.  Figure out if the first week','line_number':1985,'multiline':False]['text':' counts or not; if it counts, then fill in phantom days.  If','line_number':1986,'multiline':False]['text':' not, advance to the first real full week (skip the partial week).','line_number':1987,'multiline':False]['text':' Skip the first partial week','line_number':1990,'multiline':False]['text':' This may be zero or negative','line_number':1992,'multiline':False]['text':' Get the day of the week (normalized for locale) for the last','line_number':1994,'multiline':False]['text':' day of the year.','line_number':1995,'multiline':False]['text':' We know yearLen >= DAY_OF_YEAR so we skip the += 7 step here.','line_number':1998,'multiline':False]['text':' Get the limit day for the blocked-off rectangular year; that','line_number':2000,'multiline':False]['text':' is, the day which is one past the last day of the year,','line_number':2001,'multiline':False]['text':' after the year has already been filled in with phantom days','line_number':2002,'multiline':False]['text':' to fill out the last week.  This day has a normalized DOW of 0.','line_number':2003,'multiline':False]['text':' Now roll between start and (limit - 1).','line_number':2006,'multiline':False]['text':' Finally, pin to the real start and end of the month.','line_number':2013,'multiline':False]['text':' Make sure that the year and day of year are attended to by','line_number':2017,'multiline':False]['text':' clearing other fields which would normally take precedence.','line_number':2018,'multiline':False]['text':' If the disambiguation algorithm is changed, this section will','line_number':2019,'multiline':False]['text':' have to be updated as well.','line_number':2020,'multiline':False]['text':' Roll the day of year using millis.  Compute the millis for','line_number':2027,'multiline':False]['text':' the start of the year, and get the length of the year.','line_number':2028,'multiline':False]['text':' Scale up from days to millis','line_number':2029,'multiline':False]['text':'      double min2 = internalGetTime() - (internalGet(UCAL_DAY_OF_YEAR) - 1.0) * kOneDay;','line_number':2034,'multiline':False]['text':' Roll the day of week using millis.  Compute the millis for','line_number':2048,'multiline':False]['text':' the start of the week, using the first day of week setting.','line_number':2049,'multiline':False]['text':' Restrict the millis to [start, start+7days).','line_number':2050,'multiline':False]['text':' Scale up from days to millis','line_number':2051,'multiline':False]['text':' Compute the number of days before the current day in this','line_number':2052,'multiline':False]['text':' week.  This will be a value 0..6.','line_number':2053,'multiline':False]['text':' Roll the day of week in the month using millis.  Determine','line_number':2065,'multiline':False]['text':' the first day of the week in the month, and then the last,','line_number':2066,'multiline':False]['text':' and then roll within that range.','line_number':2067,'multiline':False]['text':' Scale up from weeks to millis','line_number':2068,'multiline':False]['text':' Find the number of same days of the week before this one','line_number':2069,'multiline':False]['text':' in this month.','line_number':2070,'multiline':False]['text':' Find the number of same days of the week after this one','line_number':2072,'multiline':False]['text':' in this month.','line_number':2073,'multiline':False]['text':' From these compute the min and gap millis for rolling.','line_number':2076,'multiline':False]['text':' Must add 1!','line_number':2078,'multiline':False]['text':' Roll within this range','line_number':2079,'multiline':False]['text':' Other fields cannot be rolled by this method','line_number':2089,'multiline':False]['text':' -------------------------------------','line_number':2103,'multiline':False]['text':' Do nothing!','line_number':2107,'multiline':False]['text':' We handle most fields in the same way.  The algorithm is to add','line_number':2110,'multiline':False]['text':' a computed amount of millis to the current millis.  The only','line_number':2111,'multiline':False]['text':' wrinkle is with DST (and/or a change to the zone's UTC offset, which','line_number':2112,'multiline':False]['text':' we'll include with DST) -- for some fields, like the DAY_OF_MONTH,','line_number':2113,'multiline':False]['text':' we don't want the wall time to shift due to changes in DST.  If the','line_number':2114,'multiline':False]['text':' result of the add operation is to move from DST to Standard, or','line_number':2115,'multiline':False]['text':' vice versa, we need to adjust by an hour forward or back,','line_number':2116,'multiline':False]['text':' respectively.  For such fields we set keepWallTimeInvariant to TRUE.','line_number':2117,'multiline':False]['text':' We only adjust the DST for fields larger than an hour.  For','line_number':2119,'multiline':False]['text':' fields smaller than an hour, we cannot adjust for DST without','line_number':2120,'multiline':False]['text':' causing problems.  for instance, if you add one hour to April 5,','line_number':2121,'multiline':False]['text':' 1998, 1:00 AM, in PST, the time becomes "2:00 AM PDT" (an','line_number':2122,'multiline':False]['text':' illegal value), but then the adjustment sees the change and','line_number':2123,'multiline':False]['text':' compensates by subtracting an hour.  As a result the time','line_number':2124,'multiline':False]['text':' doesn't advance at all.','line_number':2125,'multiline':False]['text':' For some fields larger than a day, such as a UCAL_MONTH, we pin the','line_number':2127,'multiline':False]['text':' UCAL_DAY_OF_MONTH.  This allows <March 31>.add(UCAL_MONTH, 1) to be','line_number':2128,'multiline':False]['text':' <April 30>, rather than <April 31> => <May 1>.','line_number':2129,'multiline':False]['text':' delta in ms','line_number':2131,'multiline':False]['text':' * If era=0 and years go backwards in time, change sign of amount.','line_number':2143,'multiline':False]['text':' * Until we have new API per #9393, we temporarily hardcode knowledge of','line_number':2144,'multiline':False]['text':'   which calendars have era 0 years that go backwards.','line_number':2145,'multiline':False]['text':' * Note that for UCAL_YEAR (but not UCAL_YEAR_WOY) we could instead handle','line_number':2146,'multiline':False]['text':'   this by applying the amount to the UCAL_EXTENDED_YEAR field; but since','line_number':2147,'multiline':False]['text':'   we would still need to handle UCAL_YEAR_WOY as below, might as well','line_number':2148,'multiline':False]['text':'   also handle UCAL_YEAR the same way.','line_number':2149,'multiline':False]['text':' Fall through into normal handling','line_number':2158,'multiline':False]['text':' force recalculate ','line_number':2168,'multiline':True]['text':'  throw new IllegalArgumentException("Calendar.add(" + fieldName(field) +','line_number':2220,'multiline':False]['text':'                                     ") not supported");','line_number':2221,'multiline':False]['text':' In order to keep the wall time invariant (for fields where this is','line_number':2224,'multiline':False]['text':' appropriate), check the combined DST & ZONE offset before and','line_number':2225,'multiline':False]['text':' after the add() operation. If it changes, then adjust the millis','line_number':2226,'multiline':False]['text':' to compensate.','line_number':2227,'multiline':False]['text':' There is at least one zone transition between the base','line_number':2240,'multiline':False]['text':' time and the result time. As the result, wall time has','line_number':2241,'multiline':False]['text':' changed.','line_number':2242,'multiline':False]['text':' When the difference of the previous UTC offset and','line_number':2246,'multiline':False]['text':' the new UTC offset exceeds 1 full day, we do not want','line_number':2247,'multiline':False]['text':' to roll over/back the date. For now, this only happens','line_number':2248,'multiline':False]['text':' in Samoa (Pacific/Apia) on Dec 30, 2011. See ticket:9452.','line_number':2249,'multiline':False]['text':' The result wall time or adjusted wall time was shifted because','line_number':2257,'multiline':False]['text':' the target wall time does not exist on the result date.','line_number':2258,'multiline':False]['text':' -------------------------------------','line_number':2285,'multiline':False]['text':' Always add from the start millis.  This accommodates','line_number':2294,'multiline':False]['text':' operations like adding years from February 29, 2000 up to','line_number':2295,'multiline':False]['text':' February 29, 2004.  If 1, 1, 1, 1 is added to the year','line_number':2296,'multiline':False]['text':' field, the DOM gets pinned to 28 and stays there, giving an','line_number':2297,'multiline':False]['text':' incorrect DOM difference of 1.  We have to add 1, reset, 2,','line_number':2298,'multiline':False]['text':' reset, 3, reset, 4.','line_number':2299,'multiline':False]['text':' Find a value that is too large','line_number':2302,'multiline':False]['text':' Field difference too large to fit into int32_t','line_number':2318,'multiline':False]['text':' Do a binary search','line_number':2326,'multiline':False]['text':' make sure intermediate values don't exceed INT32_MAX','line_number':2328,'multiline':False]['text':' Find a value that is too small','line_number':2342,'multiline':False]['text':' Field difference too large to fit into int32_t','line_number':2355,'multiline':False]['text':' Do a binary search','line_number':2364,'multiline':False]['text':' make sure intermediate values don't exceed INT32_MAX','line_number':2366,'multiline':False]['text':' Set calendar to end point','line_number':2379,'multiline':False]['text':' Test for buffer overflows ','line_number':2383,'multiline':True]['text':' -------------------------------------','line_number':2390,'multiline':False]['text':' Do nothing if passed-in zone is NULL','line_number':2395,'multiline':False]['text':' fZone should always be non-null','line_number':2398,'multiline':False]['text':' if the zone changes, we need to recompute the time fields','line_number':2402,'multiline':False]['text':' -------------------------------------','line_number':2406,'multiline':False]['text':' -------------------------------------','line_number':2413,'multiline':False]['text':' -------------------------------------','line_number':2422,'multiline':False]['text':' we let go of the time zone; the new time zone is the system default time zone','line_number':2427,'multiline':False]['text':' No error handling available. Must keep fZone non-NULL, there are many unchecked uses.','line_number':2430,'multiline':False]['text':' -------------------------------------','line_number':2438,'multiline':False]['text':' -------------------------------------','line_number':2446,'multiline':False]['text':' -------------------------------------','line_number':2454,'multiline':False]['text':' -------------------------------------','line_number':2464,'multiline':False]['text':' -------------------------------------','line_number':2472,'multiline':False]['text':' -------------------------------------','line_number':2480,'multiline':False]['text':' -------------------------------------','line_number':2488,'multiline':False]['text':' -------------------------------------','line_number':2500,'multiline':False]['text':'status','line_number':2509,'multiline':True]['text':' -------------------------------------','line_number':2513,'multiline':False]['text':' Values less than 1 have the same effect as 1; values greater','line_number':2518,'multiline':False]['text':' than 7 have the same effect as 7. However, we normalize values','line_number':2519,'multiline':False]['text':' so operator== and so forth work.','line_number':2520,'multiline':False]['text':' -------------------------------------','line_number':2532,'multiline':False]['text':' -------------------------------------','line_number':2540,'multiline':False]['text':' weekend functions, just dummy implementations for now (for API freeze)','line_number':2541,'multiline':False]['text':' clone the calendar so we don't mess with the real one.','line_number':2597,'multiline':False]['text':' Use internalGet() because the above call to get() populated all fields.','line_number':2626,'multiline':False]['text':' else fall through, return FALSE','line_number':2635,'multiline':False]['text':' ------------------------------------- limits','line_number':2645,'multiline':False]['text':' -------------------------------------','line_number':2658,'multiline':False]['text':' -------------------------------------','line_number':2671,'multiline':False]['text':' -------------------------------------','line_number':2684,'multiline':False]['text':' -------------------------------------','line_number':2697,'multiline':False]['text':' limitType == UCAL_LIMIT_MAXIMUM','line_number':2733,'multiline':False]['text':' if we know that the minimum value is always the same, just return it','line_number':2751,'multiline':False]['text':' clone the calendar so we don't mess with the real one, and set it to','line_number':2756,'multiline':False]['text':' accept anything for the field values','line_number':2757,'multiline':False]['text':' now try each value from getLeastMaximum() to getMaximum() one by one until','line_number':2765,'multiline':False]['text':' we get a value that normalizes to another value.  The last value that','line_number':2766,'multiline':False]['text':' normalizes to itself is the actual minimum for the current date','line_number':2767,'multiline':False]['text':' Test for buffer overflows ','line_number':2783,'multiline':True]['text':' -------------------------------------','line_number':2790,'multiline':False]['text':'*
* Ensure that each field is within its valid range by calling {@link
* #validateField(int)} on each field that has been set.  This method
* should only be called if this calendar is not lenient.
* @see #isLenient
* @see #validateField(int)
','line_number':2794,'multiline':True]['text':'*
* Validate a single field of this calendar.  Subclasses should
* override this method to validate any calendar-specific fields.
* Generic fields can be handled by
* <code>Calendar.validateField()</code>.
* @see #validateField(int, int, int)
','line_number':2809,'multiline':True]['text':' "DAY_OF_WEEK_IN_MONTH cannot be zero"','line_number':2833,'multiline':False]['text':'*
* Validate a single field of this calendar given its minimum and
* maximum allowed value.  If the field is out of range, throw a
* descriptive <code>IllegalArgumentException</code>.  Subclasses may
* use this method in their implementation of {@link
* #validateField(int)}.
','line_number':2844,'multiline':True]['text':' -------------------------','line_number':2864,'multiline':False]['text':' Skip over first entry if it is negative','line_number':2886,'multiline':False]['text':' If any field is unset then don't use this line','line_number':2890,'multiline':False]['text':' Record new maximum stamp & field no.','line_number':2897,'multiline':False]['text':' First field refers to entire line','line_number':2899,'multiline':False]['text':' This check is needed to resolve some issues with UCAL_YEAR precedence mapping','line_number':2902,'multiline':False]['text':' if YEAR is set over YEAR_WOY use DAY_OF_MONTH','line_number':2932,'multiline':False]['text':' if YEAR_WOY is set,  calc based on WEEK_OF_YEAR','line_number':2933,'multiline':False]['text':' precedence for calculating a year','line_number':2958,'multiline':False]['text':' YEAR_WOY is useless without WEEK_OF_YEAR','line_number':2964,'multiline':False]['text':' -------------------------','line_number':2971,'multiline':False]['text':' Compute the Julian day','line_number':2982,'multiline':False]['text':'  int32_t julianInsanityCheck =  (int32_t)ClockMath::floorDivide(millis, kOneDay);','line_number':2988,'multiline':False]['text':'  julianInsanityCheck += kEpochStartAsJulianDay;','line_number':2989,'multiline':False]['text':'  if(1 || julianInsanityCheck != julianDay) {','line_number':2990,'multiline':False]['text':'    fprintf(stderr, "%s:%d- D'oh- computed jules %d, to mills (%s)%.lf, recomputed %d\n",','line_number':2991,'multiline':False]['text':'            __FILE__, __LINE__, julianDay, millis<0.0?"NEG":"", millis, julianInsanityCheck);','line_number':2992,'multiline':False]['text':'  }','line_number':2993,'multiline':False]['text':' We only use MILLISECONDS_IN_DAY if it has been set by the user.','line_number':2998,'multiline':False]['text':' This makes it possible for the caller to set the calendar to a','line_number':2999,'multiline':False]['text':' time and call clear(MONTH) to reset the MONTH to January.  This','line_number':3000,'multiline':False]['text':' is legacy behavior.  Without this, clear(MONTH) has no effect,','line_number':3001,'multiline':False]['text':' since the internally set JULIAN_DAY is used.','line_number':3002,'multiline':False]['text':' Compute the time zone offset and DST offset.  There are two potential','line_number':3014,'multiline':False]['text':' ambiguities here.  We'll assume a 2:00 am (wall time) switchover time','line_number':3015,'multiline':False]['text':' for discussion purposes here.','line_number':3016,'multiline':False]['text':'','line_number':3017,'multiline':False]['text':' 1. The positive offset change such as transition into DST.','line_number':3018,'multiline':False]['text':'    Here, a designated time of 2:00 am - 2:59 am does not actually exist.','line_number':3019,'multiline':False]['text':'    For this case, skippedWallTime option specifies the behavior.','line_number':3020,'multiline':False]['text':'    For example, 2:30 am is interpreted as;','line_number':3021,'multiline':False]['text':'      - WALLTIME_LAST(default): 3:30 am (DST) (interpreting 2:30 am as 31 minutes after 1:59 am (STD))','line_number':3022,'multiline':False]['text':'      - WALLTIME_FIRST: 1:30 am (STD) (interpreting 2:30 am as 30 minutes before 3:00 am (DST))','line_number':3023,'multiline':False]['text':'      - WALLTIME_NEXT_VALID: 3:00 am (DST) (next valid time after 2:30 am on a wall clock)','line_number':3024,'multiline':False]['text':' 2. The negative offset change such as transition out of DST.','line_number':3025,'multiline':False]['text':'    Here, a designated time of 1:00 am - 1:59 am can be in standard or DST.  Both are valid','line_number':3026,'multiline':False]['text':'    representations (the rep jumps from 1:59:59 DST to 1:00:00 Std).','line_number':3027,'multiline':False]['text':'    For this case, repeatedWallTime option specifies the behavior.','line_number':3028,'multiline':False]['text':'    For example, 1:30 am is interpreted as;','line_number':3029,'multiline':False]['text':'      - WALLTIME_LAST(default): 1:30 am (STD) - latter occurrence','line_number':3030,'multiline':False]['text':'      - WALLTIME_FIRST: 1:30 am (DST) - former occurrence','line_number':3031,'multiline':False]['text':'','line_number':3032,'multiline':False]['text':' In addition to above, when calendar is strict (not default), wall time falls into','line_number':3033,'multiline':False]['text':' the skipped time range will be processed as an error case.','line_number':3034,'multiline':False]['text':'','line_number':3035,'multiline':False]['text':' These special cases are mostly handled in #computeZoneOffset(long), except WALLTIME_NEXT_VALID','line_number':3036,'multiline':False]['text':' at positive offset change. The protected method computeZoneOffset(long) is exposed to Calendar','line_number':3037,'multiline':False]['text':' subclass implementations and marked as @stable. Strictly speaking, WALLTIME_NEXT_VALID','line_number':3038,'multiline':False]['text':' should be also handled in the same place, but we cannot change the code flow without deprecating','line_number':3039,'multiline':False]['text':' the protected method.','line_number':3040,'multiline':False]['text':'','line_number':3041,'multiline':False]['text':' We use the TimeZone object, unless the user has explicitly set the ZONE_OFFSET','line_number':3042,'multiline':False]['text':' or DST_OFFSET fields; then we use those fields.','line_number':3043,'multiline':False]['text':' When strict, invalidate a wall time falls into a skipped wall time range.','line_number':3046,'multiline':False]['text':' When lenient and skipped wall time option is WALLTIME_NEXT_VALID,','line_number':3047,'multiline':False]['text':' the result time will be adjusted to the next valid time (on wall clock).','line_number':3048,'multiline':False]['text':' zoneOffset != (raw + dst) only when the given wall time fall into','line_number':3056,'multiline':False]['text':' a skipped wall time range caused by positive zone offset transition.','line_number':3057,'multiline':False]['text':' Adjust time to the next valid wall clock time.','line_number':3063,'multiline':False]['text':' At this point, tmpTime is on or after the zone offset transition causing','line_number':3064,'multiline':False]['text':' the skipped time range.','line_number':3065,'multiline':False]['text':'*
 * Find the previous zone transtion near the given time.
 ','line_number':3085,'multiline':True]['text':' Could not find any transitions.','line_number':3097,'multiline':False]['text':' Note: This should never happen.','line_number':3098,'multiline':False]['text':' If not BasicTimeZone, return unsupported error for now.','line_number':3102,'multiline':False]['text':' TODO: We may support non-BasicTimeZone in future.','line_number':3103,'multiline':False]['text':'*
* Compute the milliseconds in the day from the fields.  This is a
* value from 0 to 23:59:59.999 inclusive, unless fields are out of
* range, in which case it can be an arbitrary value.  This value
* reflects local zone wall time.
* @stable ICU 2.0
','line_number':3109,'multiline':True]['text':' Do the time portion of the conversion.','line_number':3117,'multiline':False]['text':' Find the best set of fields specifying the time of day.  There','line_number':3121,'multiline':False]['text':' are only two possibilities here; the HOUR_OF_DAY or the','line_number':3122,'multiline':False]['text':' AM_PM and the HOUR.','line_number':3123,'multiline':False]['text':' Hours','line_number':3128,'multiline':False]['text':' Don't normalize here; let overflow bump into the next period.','line_number':3131,'multiline':False]['text':' This is consistent with how we handle other fields.','line_number':3132,'multiline':False]['text':' Don't normalize here; let overflow bump into the next period.','line_number':3135,'multiline':False]['text':' This is consistent with how we handle other fields.','line_number':3136,'multiline':False]['text':' Default works for unset AM_PM','line_number':3138,'multiline':False]['text':' We use the fact that unset == 0; we start with millisInDay','line_number':3142,'multiline':False]['text':' == HOUR_OF_DAY.','line_number':3143,'multiline':False]['text':' now have minutes','line_number':3145,'multiline':False]['text':' now have seconds','line_number':3147,'multiline':False]['text':' now have millis','line_number':3149,'multiline':False]['text':'*
* This method can assume EXTENDED_YEAR has been set.
* @param millis milliseconds of the date fields
* @param millisInDay milliseconds of the time fields; may be out
* or range.
* @stable ICU 2.0
','line_number':3154,'multiline':True]['text':' By default, TimeZone::getOffset behaves UCAL_WALLTIME_LAST for both.','line_number':3171,'multiline':False]['text':' Check if the given wall time falls into repeated time range','line_number':3176,'multiline':False]['text':' Any negative zone transition within last 6 hours?','line_number':3179,'multiline':False]['text':' Note: The maximum historic negative zone transition is -3 hours in the tz database.','line_number':3180,'multiline':False]['text':' 6 hour window would be sufficient for this purpose.','line_number':3181,'multiline':False]['text':' Negative shift within last 6 hours. When UCAL_WALLTIME_FIRST is used and the given wall time falls','line_number':3189,'multiline':False]['text':' into the repeated time range, use offsets before the transition.','line_number':3190,'multiline':False]['text':' Note: If it does not fall into the repeated time range, offsets remain unchanged below.','line_number':3191,'multiline':False]['text':' When skipped wall time option is WALLTIME_FIRST,','line_number':3196,'multiline':False]['text':' recalculate offsets from the resolved time (non-wall).','line_number':3197,'multiline':False]['text':' When the given wall time falls into skipped wall time,','line_number':3198,'multiline':False]['text':' the offsets will be based on the zone offsets AFTER','line_number':3199,'multiline':False]['text':' the transition (which means, earliest possibe interpretation).','line_number':3200,'multiline':False]['text':' We want to see if any of the date fields is newer than the','line_number':3210,'multiline':False]['text':' JULIAN_DAY.  If not, then we use JULIAN_DAY.  If so, then we do','line_number':3211,'multiline':False]['text':' the normal resolution.  We only use JULIAN_DAY if it has been','line_number':3212,'multiline':False]['text':' set by the user.  This makes it possible for the caller to set','line_number':3213,'multiline':False]['text':' the calendar to a time and call clear(MONTH) to reset the MONTH','line_number':3214,'multiline':False]['text':' to January.  This is legacy behavior.  Without this,','line_number':3215,'multiline':False]['text':' clear(MONTH) has no effect, since the internally set JULIAN_DAY','line_number':3216,'multiline':False]['text':' is used.','line_number':3217,'multiline':False]['text':' -------------------------------------------','line_number':3234,'multiline':False]['text':' Get the Julian day of the day BEFORE the start of this year.','line_number':3254,'multiline':False]['text':' If useMonth is true, get the day before the start of the month.','line_number':3255,'multiline':False]['text':' give calendar subclass a chance to have a default 'first' month','line_number':3257,'multiline':False]['text':' give calendar subclass a chance to have a default 'first' dom','line_number':3270,'multiline':False]['text':' Localized fdw','line_number':3284,'multiline':False]['text':' At this point julianDay is the 0-based day BEFORE the first day of','line_number':3286,'multiline':False]['text':' January 1, year 1 of the given calendar.  If julianDay == 0, it','line_number':3287,'multiline':False]['text':' specifies (Jan. 1, 1) - 1, in whatever calendar we are using (Julian','line_number':3288,'multiline':False]['text':' or Gregorian). (or it is before the month we are in, if useMonth is True)','line_number':3289,'multiline':False]['text':' At this point we need to process the WEEK_OF_MONTH or','line_number':3291,'multiline':False]['text':' WEEK_OF_YEAR, which are similar, or the DAY_OF_WEEK_IN_MONTH.','line_number':3292,'multiline':False]['text':' First, perform initial shared computations.  These locate the','line_number':3293,'multiline':False]['text':' first week of the period.','line_number':3294,'multiline':False]['text':' Get the 0-based localized DOW of day one of the month or year.','line_number':3296,'multiline':False]['text':' Valid range 0..6.','line_number':3297,'multiline':False]['text':' Find the first target DOW (dowLocal) in the month or year.','line_number':3305,'multiline':False]['text':' Actually, it may be just before the first of the month or year.','line_number':3306,'multiline':False]['text':' It will be an integer from -5..7.','line_number':3307,'multiline':False]['text':' Adjust the target DOW to be in the month or year.','line_number':3311,'multiline':False]['text':' The only trickiness occurs if the day-of-week-in-month is','line_number':3316,'multiline':False]['text':' negative.','line_number':3317,'multiline':False]['text':' Move date to the last of this day-of-week in this month,','line_number':3323,'multiline':False]['text':' then back up as needed.  If dim==-1, we don't back up at','line_number':3324,'multiline':False]['text':' all.  If dim==-2, we back up once, etc.  Don't back up','line_number':3325,'multiline':False]['text':' past the first of the given day-of-week in this month.','line_number':3326,'multiline':False]['text':' Note that we handle -2, -3, etc. correctly, even though','line_number':3327,'multiline':False]['text':' values < -1 are technically disallowed.','line_number':3328,'multiline':False]['text':' ------------------------------------- WOY -------------','line_number':3338,'multiline':False]['text':' YWOY not set at all or','line_number':3339,'multiline':False]['text':' YWOY doesn't have precedence','line_number':3340,'multiline':False]['text':' (excluding where all fields are internally set - then YWOY is used)','line_number':3341,'multiline':False]['text':' need to be sure to stay in 'real' year.','line_number':3343,'multiline':False]['text':' jd of day before jan 1','line_number':3346,'multiline':False]['text':' 0..6 ldow of Jan 1','line_number':3349,'multiline':False]['text':' FIRST WEEK ---------------------------------','line_number':3353,'multiline':False]['text':' nextFirst is now the localized DOW of Jan 1  of y-woy+1','line_number':3362,'multiline':False]['text':' Jan 1 starts on FDOW','line_number':3363,'multiline':False]['text':' or enough days in the week','line_number':3364,'multiline':False]['text':' Jan 1 of (yearWoy+1) is in yearWoy+1 - recalculate JD to next year','line_number':3366,'multiline':False]['text':' recalculate 'first' [0-based local dow of jan 1]','line_number':3373,'multiline':False]['text':' recalculate date.','line_number':3378,'multiline':False]['text':' could be in the last week- find out if this JD would overstep','line_number':3382,'multiline':False]['text':' Now adjust for the week number.','line_number':3388,'multiline':False]['text':' is it past Dec 31?  (nextJulianDay is day BEFORE year+1's  Jan 1)','line_number':3395,'multiline':False]['text':' Fire up the calculating engines.. retry YWOY = (year-1)','line_number':3396,'multiline':False]['text':' jd before Jan 1 of previous year','line_number':3397,'multiline':False]['text':' 0 based local dow   of first week','line_number':3398,'multiline':False]['text':' 0..6','line_number':3400,'multiline':False]['text':' correction needed ','line_number':3411,'multiline':True]['text':' leastmaximum ','line_number':3412,'multiline':True]['text':' resolvefields(year) != year_woy ','line_number':3413,'multiline':True]['text':' bestfield != week_of_year ','line_number':3414,'multiline':True]['text':' assert(bestField == WEEK_OF_MONTH || bestField == WEEK_OF_YEAR)','line_number':3416,'multiline':False]['text':' Adjust for minimal days in first week','line_number':3417,'multiline':False]['text':' Now adjust for the week number.','line_number':3422,'multiline':False]['text':'eyear','line_number':3430,'multiline':True]['text':'eyear','line_number':3436,'multiline':True]['text':'month','line_number':3436,'multiline':True]['text':' Get zero-based localized DOW, valid range 0..6.  This is the DOW','line_number':3444,'multiline':False]['text':' we are looking for.','line_number':3445,'multiline':False]['text':' We have UCAL_YEAR_WOY and UCAL_WEEK_OF_YEAR - from those, determine','line_number':3466,'multiline':False]['text':' what year we fall in, so that other code can set it properly.','line_number':3467,'multiline':False]['text':' (code borrowed from computeWeekFields and handleComputeJulianDay)','line_number':3468,'multiline':False]['text':'return yearWoy;','line_number':3469,'multiline':False]['text':' First, we need a reliable DOW.','line_number':3471,'multiline':False]['text':' !! Note: if subclasses have a different table, they should override handleGetExtendedYearFromWeekFields','line_number':3472,'multiline':False]['text':' Now, a local DOW','line_number':3474,'multiline':False]['text':' 0..6','line_number':3475,'multiline':False]['text':' Localized fdw','line_number':3476,'multiline':False]['text':' next year's Jan1 start','line_number':3478,'multiline':False]['text':' At this point julianDay is the 0-based day BEFORE the first day of','line_number':3480,'multiline':False]['text':' January 1, year 1 of the given calendar.  If julianDay == 0, it','line_number':3481,'multiline':False]['text':' specifies (Jan. 1, 1) - 1, in whatever calendar we are using (Julian','line_number':3482,'multiline':False]['text':' or Gregorian). (or it is before the month we are in, if useMonth is True)','line_number':3483,'multiline':False]['text':' At this point we need to process the WEEK_OF_MONTH or','line_number':3485,'multiline':False]['text':' WEEK_OF_YEAR, which are similar, or the DAY_OF_WEEK_IN_MONTH.','line_number':3486,'multiline':False]['text':' First, perform initial shared computations.  These locate the','line_number':3487,'multiline':False]['text':' first week of the period.','line_number':3488,'multiline':False]['text':' Get the 0-based localized DOW of day one of the month or year.','line_number':3490,'multiline':False]['text':' Valid range 0..6.','line_number':3491,'multiline':False]['text':'// (nextFirst was not used below)','line_number':3497,'multiline':False]['text':' int32_t nextFirst = julianDayToDayOfWeek(nextJan1Start + 1) - firstDayOfWeek;','line_number':3498,'multiline':False]['text':' if (nextFirst < 0) {','line_number':3499,'multiline':False]['text':'     nextFirst += 7;','line_number':3500,'multiline':False]['text':'}','line_number':3501,'multiline':False]['text':' January 1st in the year of WOY is the 1st week?  (i.e. first week is < minimal )','line_number':3504,'multiline':False]['text':'UBool nextJan1InPrevYear = FALSE; // January 1st of Year of WOY + 1 is in the first week?','line_number':3505,'multiline':False]['text':'   if((7 - nextFirst) < minDays) {','line_number':3511,'multiline':False]['text':'     nextJan1InPrevYear = TRUE;','line_number':3512,'multiline':False]['text':'   }','line_number':3513,'multiline':False]['text':' the first week of January is in the previous year','line_number':3519,'multiline':False]['text':' therefore WOY1 is always solidly within yearWoy','line_number':3520,'multiline':False]['text':' First WOY is split between two years','line_number':3523,'multiline':False]['text':' we are prior to Jan 1','line_number':3524,'multiline':False]['text':' previous year','line_number':3525,'multiline':False]['text':' in this year','line_number':3527,'multiline':False]['text':' we _might_ be in the last week..','line_number':3531,'multiline':False]['text':' Calculate JD of our target day:','line_number':3532,'multiline':False]['text':' JD of Jan 1','line_number':3533,'multiline':False]['text':'  days in the first week (Jan 1.. )','line_number':3534,'multiline':False]['text':' add the weeks of the year','line_number':3535,'multiline':False]['text':' the local dow (0..6) of last week','line_number':3536,'multiline':False]['text':' woy already includes Jan 1's week.','line_number':3538,'multiline':False]['text':' we are in week 52 or 53 etc. - actual year is yearWoy+1','line_number':3542,'multiline':False]['text':' still in yearWoy;','line_number':3545,'multiline':False]['text':' we're not possibly in the last week -must be ywoy','line_number':3549,'multiline':False]['text':' month 0, late woy = in the next year','line_number':3556,'multiline':False]['text':'if(nextJan1InPrevYear) {','line_number':3558,'multiline':False]['text':'}','line_number':3564,'multiline':False]['text':'(internalGet(UCAL_DATE) <= (7-first)) /* && in minDow  */ ) {','line_number':3567,'multiline':False]['text':'within 1st week and in this month..','line_number':3568,'multiline':False]['text':'return yearWoy+1;','line_number':3569,'multiline':False]['text':' assume the year is appropriate','line_number':3572,'multiline':False]['text':' These fields all have fixed minima/maxima','line_number':3629,'multiline':False]['text':' For all other fields, do it the hard way....','line_number':3634,'multiline':False]['text':'*
* Prepare this calendar for computing the actual minimum or maximum.
* This method modifies this calendar's fields; it is called on a
* temporary calendar.
*
* <p>Rationale: The semantics of getActualXxx() is to return the
* maximum or minimum value that the given field can take, taking into
* account other relevant fields.  In general these other fields are
* larger fields.  For example, when computing the actual maximum
* DATE, the current value of DATE itself is ignored,
* as is the value of any field smaller.
*
* <p>The time fields all have fixed minima and maxima, so we don't
* need to worry about them.  This also lets us set the
* MILLISECONDS_IN_DAY to zero to erase any effects the time fields
* might have when computing date fields.
*
* <p>DAY_OF_WEEK is adjusted specially for the WEEK_OF_MONTH and
* WEEK_OF_YEAR fields to ensure that they are computed correctly.
* @internal
','line_number':3642,'multiline':True]['text':' For dowim, the maximum occurs for the DOW of the first of the','line_number':3681,'multiline':False]['text':' month.','line_number':3682,'multiline':False]['text':' Make this user set','line_number':3684,'multiline':False]['text':' If we're counting weeks, set the day of the week to either the','line_number':3689,'multiline':False]['text':' first or last localized DOW.  We know the last week of a month','line_number':3690,'multiline':False]['text':' or year will contain the first day of the week, and that the','line_number':3691,'multiline':False]['text':' first week will contain the last DOW.','line_number':3692,'multiline':False]['text':' set to last DOW','line_number':3696,'multiline':False]['text':' Do this last to give it the newest time stamp','line_number':3711,'multiline':False]['text':' if we know that the maximum value is always the same, just return it','line_number':3721,'multiline':False]['text':' clone the calendar so we don't mess with the real one, and set it to','line_number':3727,'multiline':False]['text':' accept anything for the field values','line_number':3728,'multiline':False]['text':' need to resolve time here, otherwise, fields set for actual limit','line_number':3733,'multiline':False]['text':' may cause conflict with fields previously set (but not yet resolved).','line_number':3734,'multiline':False]['text':' now try each value from the start to the end one by one until','line_number':3740,'multiline':False]['text':' we get a value that normalizes to another value.  The last value that','line_number':3741,'multiline':False]['text':' normalizes to itself is the actual maximum for the current date','line_number':3742,'multiline':False]['text':' prepareGetActual sets the first day of week in the same week with','line_number':3745,'multiline':False]['text':' the first day of a month.  Unlike WEEK_OF_YEAR, week number for the','line_number':3746,'multiline':False]['text':' week which contains days from both previous and current month is','line_number':3747,'multiline':False]['text':' not unique.  For example, last several days in the previous month','line_number':3748,'multiline':False]['text':' is week 5, and the rest of week is week 1.','line_number':3749,'multiline':False]['text':' -------------------------------------','line_number':3779,'multiline':False]['text':' 24*60*60*1000','line_number':3792,'multiline':False]['text':' Since week and weekend data is territory based instead of language based,','line_number':3794,'multiline':False]['text':' we may need to tweak the locale that we are using to try to get the appropriate','line_number':3795,'multiline':False]['text':' values, using the following logic:','line_number':3796,'multiline':False]['text':' 1). If the locale has a language but no territory, use the territory as defined by','line_number':3797,'multiline':False]['text':'     the likely subtags.','line_number':3798,'multiline':False]['text':' 2). If the locale has a script designation then we ignore it,','line_number':3799,'multiline':False]['text':'     then remove it ( i.e. "en_Latn_US" becomes "en_US" )','line_number':3800,'multiline':False]['text':' The code here is somewhat of a hack, since week data and weekend data aren't really tied to
       a specific calendar, they aren't truly locale data.  But this is the only place where valid and
       actual locale can be set, so we take a shot at it here by loading a representative resource
       from the calendar data.  The code used to use the dateTimeElements resource to get first day
       of week data, but this was moved to supplemental data under ticket 7755. (JCE) ','line_number':3817,'multiline':True]['text':' Get the monthNames resource bundle for the calendar 'type'. Fallback to gregorian if the resource is not','line_number':3823,'multiline':False]['text':' found.','line_number':3824,'multiline':False]['text':' Read week data values from supplementalData week data','line_number':3855,'multiline':False]['text':'*
* Recompute the time and update the status fields isTimeSet
* and areFieldsSet.  Callers should check isTimeSet and only
* call this method if isTimeSet is false.
','line_number':3888,'multiline':True]['text':' If we are lenient, we need to recompute the fields to normalize','line_number':3900,'multiline':False]['text':' the values.  Also, if we haven't set all the fields yet (i.e.,','line_number':3901,'multiline':False]['text':' in a newly-created object), we need to fill in the fields. [LIU]','line_number':3902,'multiline':False]['text':' Deprecated function. This doesn't need to be inline.','line_number':3949,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':3969,'multiline':True]['text':'eof','line_number':3972,'multiline':False]