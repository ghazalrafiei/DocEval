['text':' © 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Allow implicit conversion from char16_t* to UnicodeString for this file:','line_number':8,'multiline':False]['text':' Helpful in toString methods and elsewhere.','line_number':9,'multiline':False]['text':' Create a new UnicodeString','line_number':71,'multiline':False]['text':'///////////////////////////////////////////////////','line_number':118,'multiline':False]['text':'/ BEGIN RECURSIVE DESCENT PARSER IMPLEMENTATION ///','line_number':119,'multiline':False]['text':'///////////////////////////////////////////////////','line_number':120,'multiline':False]['text':' This class is not intended for writing twice!','line_number':140,'multiline':False]['text':' Use move assignment to overwrite instead.','line_number':141,'multiline':False]['text':' pattern := subpattern (';' subpattern)?','line_number':144,'multiline':False]['text':' consume the ';'','line_number':149,'multiline':False]['text':' Don't consume the negative subpattern if it is empty (trailing ';')','line_number':150,'multiline':False]['text':' subpattern := literals? number exponent? literals?','line_number':165,'multiline':False]['text':' consume the '*'','line_number':195,'multiline':False]['text':' literals := { literal }','line_number':202,'multiline':False]['text':' Characters that cannot appear unquoted in a literal','line_number':223,'multiline':False]['text':' break outer;','line_number':224,'multiline':False]['text':' consume the starting quote','line_number':263,'multiline':False]['text':' consume a quoted character','line_number':270,'multiline':False]['text':' consume the ending quote','line_number':273,'multiline':False]['text':' consume a non-quoted literal character','line_number':275,'multiline':False]['text':' consume the decimal point','line_number':284,'multiline':False]['text':' Convenience reference:','line_number':293,'multiline':False]['text':' consume the symbol','line_number':363,'multiline':False]['text':' Disallow patterns with a trailing ',' or with two ',' next to each other','line_number':367,'multiline':False]['text':' Convenience reference:','line_number':384,'multiline':False]['text':' consume the symbol','line_number':427,'multiline':False]['text':' Convenience reference:','line_number':432,'multiline':False]['text':' consume the E','line_number':443,'multiline':False]['text':' consume the +','line_number':446,'multiline':False]['text':' consume the 0','line_number':451,'multiline':False]['text':'/////////////////////////////////////////////////','line_number':457,'multiline':False]['text':'/ END RECURSIVE DESCENT PARSER IMPLEMENTATION ///','line_number':458,'multiline':False]['text':'/////////////////////////////////////////////////','line_number':459,'multiline':False]['text':' Backwards compatibility requires that we reset to the default values.','line_number':465,'multiline':False]['text':' TODO: Only overwrite the properties that "saveToProperties" normally touches?','line_number':466,'multiline':False]['text':' Translate from PatternParseResult to Properties.','line_number':480,'multiline':False]['text':' Note that most data from "negative" is ignored per the specification of DecimalFormat.','line_number':481,'multiline':False]['text':' Grouping settings','line_number':495,'multiline':False]['text':' For backwards compatibility, require that the pattern emit at least one min digit.','line_number':512,'multiline':False]['text':' patterns like ".##"','line_number':515,'multiline':False]['text':' patterns like "#.##"','line_number':519,'multiline':False]['text':' Rounding settings','line_number':527,'multiline':False]['text':' Don't set basic rounding when there is a currency sign; defer to CurrencyUsage','line_number':528,'multiline':False]['text':' If the pattern ends with a '.' then force the decimal point.','line_number':561,'multiline':False]['text':' Scientific notation settings','line_number':568,'multiline':False]['text':' patterns without '@' can define max integer digits, used for engineering notation','line_number':573,'multiline':False]['text':' patterns with '@' cannot define max integer digits','line_number':577,'multiline':False]['text':' Compute the affix patterns (required for both padding and affixes)','line_number':588,'multiline':False]['text':' Padding settings','line_number':592,'multiline':False]['text':' The width of the positive prefix and suffix templates are included in the padding','line_number':594,'multiline':False]['text':' Set the affixes','line_number':618,'multiline':False]['text':' Always call the setter, even if the prefixes are empty, especially in the case of the','line_number':619,'multiline':False]['text':' negative prefix pattern, to prevent default values from overriding the pattern.','line_number':620,'multiline':False]['text':' Set the magnitude multiplier','line_number':633,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':643,'multiline':False]['text':'/ End PatternStringParser.java; begin PatternStringUtils.java ///','line_number':644,'multiline':False]['text':'/////////////////////////////////////////////////////////////////','line_number':645,'multiline':False]['text':' Determine whether a given roundingIncrement should be ignored for formatting','line_number':647,'multiline':False]['text':' based on the current maxFrac value (maximum fraction digits). For example a','line_number':648,'multiline':False]['text':' roundingIncrement of 0.01 should be ignored if maxFrac is 1, but not if maxFrac','line_number':649,'multiline':False]['text':' is 2 or more. Note that roundingIncrements are rounded in significance, so','line_number':650,'multiline':False]['text':' a roundingIncrement of 0.006 is treated like 0.01 for this determination, i.e.','line_number':651,'multiline':False]['text':' it should not be ignored if maxFrac is 2 or more (but a roundingIncrement of','line_number':652,'multiline':False]['text':' 0.005 is treated like 0.001 for significance). This is the reason for the','line_number':653,'multiline':False]['text':' initial doubling below.','line_number':654,'multiline':False]['text':' roundIncr must be non-zero.','line_number':655,'multiline':False]['text':' Convenience references','line_number':670,'multiline':False]['text':' The uprv_min() calls prevent DoS','line_number':671,'multiline':False]['text':' Prefixes','line_number':691,'multiline':False]['text':' Figure out the grouping sizes.','line_number':695,'multiline':False]['text':' Figure out the digits we need to put in the pattern.','line_number':704,'multiline':False]['text':' Significant Digits.','line_number':709,'multiline':False]['text':' Rounding Interval.','line_number':717,'multiline':False]['text':' TODO: Check for DoS here?','line_number':719,'multiline':False]['text':' TODO: Unsupported operation exception or fail silently?','line_number':726,'multiline':False]['text':' Write the digits to the string builder','line_number':740,'multiline':False]['text':' Decimal separator','line_number':751,'multiline':False]['text':' Least-significant grouping separator','line_number':758,'multiline':False]['text':' All other grouping separators','line_number':762,'multiline':False]['text':' Exponential notation','line_number':768,'multiline':False]['text':' Suffixes','line_number':779,'multiline':False]['text':' Resolve Padding','line_number':783,'multiline':False]['text':' Negative affixes','line_number':815,'multiline':False]['text':' Ignore if the negative prefix pattern is "-" and the negative suffix is empty','line_number':816,'multiline':False]['text':' Copy the positive digit format into the negative.','line_number':820,'multiline':False]['text':' This is optional; the pattern is the same as if '#' were appended here instead.','line_number':821,'multiline':False]['text':' NOTE: It is not safe to append the UnicodeString to itself, so we need to copy.','line_number':822,'multiline':False]['text':' See http://bugs.icu-project.org/trac/ticket/13707','line_number':823,'multiline':False]['text':' it's okay to deal in chars here because the quote mark is the only interesting thing.','line_number':849,'multiline':False]['text':' Construct a table of strings to be converted between localized and standard.','line_number':867,'multiline':False]['text':' Special case: quotes are NOT allowed to be in any localIdx strings.','line_number':899,'multiline':False]['text':' Substitute them with '’' instead.','line_number':900,'multiline':False]['text':' Iterate through the string and convert.','line_number':905,'multiline':False]['text':' State table:','line_number':906,'multiline':False]['text':' 0 => base state','line_number':907,'multiline':False]['text':' 1 => first char inside a quoted sequence in input and output string','line_number':908,'multiline':False]['text':' 2 => inside a quoted sequence in input and output string','line_number':909,'multiline':False]['text':' 3 => first char after a close quote in input string;','line_number':910,'multiline':False]['text':' close quote still needs to be written to output string','line_number':911,'multiline':False]['text':' 4 => base state in input string; inside quoted sequence in output string','line_number':912,'multiline':False]['text':' 5 => first char inside a quoted sequence in input string;','line_number':913,'multiline':False]['text':' inside quoted sequence in output string','line_number':914,'multiline':False]['text':' Handle a quote character (state shift)','line_number':920,'multiline':False]['text':' Perform a greedy match on this symbol string','line_number':952,'multiline':False]['text':' Skip ahead past this region for the next iteration','line_number':955,'multiline':False]['text':' No replacement found. Check if a special quote is necessary','line_number':965,'multiline':False]['text':' Still nothing. Copy the char verbatim. (Add a close quote if necessary)','line_number':977,'multiline':False]['text':' Resolve final quotes','line_number':990,'multiline':False]['text':' Malformed localized pattern: unterminated quote','line_number':996,'multiline':False]['text':' Should the output render '+' where '-' would normally appear in the pattern?','line_number':1007,'multiline':False]['text':' Should we use the affix from the negative subpattern?','line_number':1011,'multiline':False]['text':' (If not, we will use the positive subpattern.)','line_number':1012,'multiline':False]['text':' Resolve the flags for the affix pattern.','line_number':1017,'multiline':False]['text':' Should we prepend a sign to the pattern?','line_number':1030,'multiline':False]['text':' Compute the length of the affix pattern.','line_number':1040,'multiline':False]['text':' Finally, set the result into the StringBuilder.','line_number':1043,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1134,'multiline':True]