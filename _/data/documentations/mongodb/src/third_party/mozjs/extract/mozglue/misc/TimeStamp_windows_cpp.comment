['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' Implement TimeStamp::Now() with QueryPerformanceCounter() controlled with','line_number':7,'multiline':False]['text':' values of GetTickCount64().','line_number':8,'multiline':False]['text':' To enable logging define to your favorite logging API','line_number':20,'multiline':False]['text':' Estimate of the smallest duration of time we can measure.','line_number':35,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':41,'multiline':False]['text':' Global constants','line_number':42,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':43,'multiline':False]['text':' Tolerance to failures settings.','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':' What is the interval we want to have failure free.','line_number':47,'multiline':False]['text':' in [ms]','line_number':48,'multiline':False]['text':' How many failures we are willing to tolerate in the interval.','line_number':50,'multiline':False]['text':' What is the threshold to treat fluctuations as actual failures.','line_number':52,'multiline':False]['text':' in [ms]','line_number':53,'multiline':False]['text':' If we are not able to get the value of GTC time increment, use this value','line_number':56,'multiline':False]['text':' which is the most usual increment.','line_number':57,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':60,'multiline':False]['text':' Global variables, not changing at runtime','line_number':61,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':62,'multiline':False]['text':' Result of QueryPerformanceFrequency','line_number':64,'multiline':False]['text':' We use default of 1 for the case we can't use QueryPerformanceCounter','line_number':65,'multiline':False]['text':' to make mt/ms conversions work despite that.','line_number':66,'multiline':False]['text':' namespace mozilla','line_number':75,'multiline':False]['text':' How much we are tolerant to GTC occasional loose of resoltion.','line_number':77,'multiline':False]['text':' This number says how many multiples of the minimal GTC resolution','line_number':78,'multiline':False]['text':' detected on the system are acceptable.  This number is empirical.','line_number':79,'multiline':False]['text':' Base tolerance (more: "inability of detection" range) threshold is calculated','line_number':82,'multiline':False]['text':' dynamically, and kept in sGTCResolutionThreshold.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' Schematically, QPC worked "100%" correctly if ((GTC_now - GTC_epoch) -','line_number':85,'multiline':False]['text':' (QPC_now - QPC_epoch)) was in  [-sGTCResolutionThreshold,','line_number':86,'multiline':False]['text':' sGTCResolutionThreshold] interval every time we'd compared two time stamps.','line_number':87,'multiline':False]['text':' If not, then we check the overflow behind this basic threshold','line_number':88,'multiline':False]['text':' is in kFailureThreshold.  If not, we condider it as a QPC failure.  If too','line_number':89,'multiline':False]['text':' many failures in short time are detected, QPC is considered faulty and','line_number':90,'multiline':False]['text':' disabled.','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' Kept in [mt]','line_number':93,'multiline':False]['text':' If QPC is found faulty for two stamps in this interval, we engage','line_number':96,'multiline':False]['text':' the fault detection algorithm.  For duration larger then this limit','line_number':97,'multiline':False]['text':' we bypass using durations calculated from QPC when jitter is detected,','line_number':98,'multiline':False]['text':' but don't touch the sUseQPC flag.','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' Value is in [ms].','line_number':101,'multiline':False]['text':' Conversion to [mt]','line_number':103,'multiline':False]['text':' Conversion of kFailureFreeInterval and kFailureThreshold to [mt]','line_number':106,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':110,'multiline':False]['text':' Systemm status flags','line_number':111,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':112,'multiline':False]['text':' Flag for stable TSC that indicates platform where QPC is stable.','line_number':114,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':117,'multiline':False]['text':' Global state variables, changing at runtime','line_number':118,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':119,'multiline':False]['text':' Initially true, set to false when QPC is found unstable and never','line_number':121,'multiline':False]['text':' returns back to true since that time.','line_number':122,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':125,'multiline':False]['text':' Global lock','line_number':126,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':127,'multiline':False]['text':' Thread spin count before entering the full wait state for sTimeStampLock.','line_number':129,'multiline':False]['text':' Inspired by Rob Arnold's work on PRMJ_Now().','line_number':130,'multiline':False]['text':' Common mutex (thanks the relative complexity of the logic, this is better','line_number':133,'multiline':False]['text':' then using CMPXCHG8B.)','line_number':134,'multiline':False]['text':' It is protecting the globals bellow.','line_number':135,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':138,'multiline':False]['text':' Global lock protected variables','line_number':139,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':140,'multiline':False]['text':' Timestamp in future until QPC must behave correctly.','line_number':142,'multiline':False]['text':' Set to now + kFailureFreeInterval on first QPC failure detection.','line_number':143,'multiline':False]['text':' Set to now + E * kFailureFreeInterval on following errors,','line_number':144,'multiline':False]['text':'   where E is number of errors detected during last kFailureFreeInterval','line_number':145,'multiline':False]['text':'   milliseconds, calculated simply as:','line_number':146,'multiline':False]['text':'   E = (sFaultIntoleranceCheckpoint - now) / kFailureFreeInterval + 1.','line_number':147,'multiline':False]['text':' When E > kMaxFailuresPerInterval -> disable QPC.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' Kept in [mt]','line_number':150,'multiline':False]['text':' Result is in [mt]','line_number':155,'multiline':False]['text':' QueryPerformanceCounter may slightly jitter (not be 100% monotonic.)','line_number':160,'multiline':False]['text':' This is a simple go-backward protection for such a faulty hardware.','line_number':161,'multiline':False]['text':' Ceiling to a millisecond','line_number':184,'multiline':False]['text':' Example values: 156001, 210000','line_number':185,'multiline':False]['text':' Don't want to round up if already rounded, values will be: 156000, 209999','line_number':187,'multiline':False]['text':' Convert to ms, values will be: 15, 20','line_number':189,'multiline':False]['text':' Round up, values will be: 16, 21','line_number':191,'multiline':False]['text':' Convert back to 100ns, values will be: 160000, 210000','line_number':193,'multiline':False]['text':' How many milli-ticks has the interval rounded up','line_number':196,'multiline':False]['text':' GTC may jump by 32 (2*16) ms in two steps, therefor use the ceiling value.','line_number':200,'multiline':False]['text':' 10 total trials is arbitrary: what we're trying to avoid by','line_number':210,'multiline':False]['text':' looping is getting unlucky and being interrupted by a context','line_number':211,'multiline':False]['text':' switch or signal, or being bitten by paging/cache effects','line_number':212,'multiline':False]['text':' GetTickCount has only ~16ms known resolution','line_number':231,'multiline':False]['text':' Converting minres that is in [mt] to nanosecods, multiplicating','line_number':235,'multiline':False]['text':' the argument to preserve resolution.','line_number':236,'multiline':False]['text':' find the number of significant digits in mResolution, for the','line_number':244,'multiline':False]['text':' sake of ToSecondsSigDigits()','line_number':245,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':254,'multiline':False]['text':' TimeStampValue implementation','line_number':255,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':256,'multiline':False]['text':' If the duration is less then two seconds, perform check of QPC stability','line_number':279,'multiline':False]['text':' by comparing both GTC and QPC calculated durations of this and aOther.','line_number':280,'multiline':False]['text':' Both not holding QPC','line_number':284,'multiline':False]['text':' For stable TSC there is no need to check','line_number':290,'multiline':False]['text':' Check QPC is sane before using it.','line_number':294,'multiline':False]['text':' Treat absolutely for calibration purposes','line_number':300,'multiline':False]['text':' We are in the limit, let go.','line_number':307,'multiline':False]['text':' QPC deviates, don't use it, since now this method may only return deltaGTC.','line_number':311,'multiline':False]['text':' QPC already disabled, no need to run the fault tolerance','line_number':313,'multiline':False]['text':' algorithm.','line_number':314,'multiline':False]['text':' Interval between the two time stamps is very short, consider','line_number':321,'multiline':False]['text':' QPC as unstable and record a failure.','line_number':322,'multiline':False]['text':' There's already been an error in the last fault intollerant interval.','line_number':328,'multiline':False]['text':' Time since now to the checkpoint actually holds information on how many','line_number':329,'multiline':False]['text':' failures there were in the failure free interval we have defined.','line_number':330,'multiline':False]['text':' Move the fault intolerance checkpoint more to the future, prolong it','line_number':338,'multiline':False]['text':' to reflect the number of detected failures.','line_number':339,'multiline':False]['text':' Setup fault intolerance checkpoint in the future for first detected','line_number':345,'multiline':False]['text':' error.','line_number':346,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':364,'multiline':False]['text':' TimeDuration and TimeStamp implementation','line_number':365,'multiline':False]['text':' ----------------------------------------------------------------------------','line_number':366,'multiline':False]['text':' Converting before arithmetic avoids blocked store forward','line_number':369,'multiline':False]['text':' don't report a value < mResolution ...','line_number':375,'multiline':False]['text':' and chop off insignificant digits','line_number':379,'multiline':False]['text':' AArch64 defines that its system counter run at a constant rate','line_number':402,'multiline':False]['text':' regardless of the current clock frequency of the system.  See "The','line_number':403,'multiline':False]['text':' Generic Timer", section D7, in the ARMARM for ARMv8.','line_number':404,'multiline':False]['text':' Only allow Intel or AMD CPUs for now.','line_number':416,'multiline':False]['text':' The order of the registers is reg[1], reg[3], reg[2].  We just adjust the','line_number':417,'multiline':False]['text':' string so that we can compare in one go.','line_number':418,'multiline':False]['text':' detect if the Advanced Power Management feature is supported','line_number':426,'multiline':False]['text':' XXX should we return true here?  If there is no APM there may be','line_number':429,'multiline':False]['text':' no way how TSC can run out of sync among cores.','line_number':430,'multiline':False]['text':' if bit 8 is set than TSC will run at a constant rate','line_number':435,'multiline':False]['text':' in all ACPI P-states, C-states and T-states','line_number':436,'multiline':False]['text':' Decide which implementation to use for the high-performance timer.','line_number':450,'multiline':False]['text':' No Performance Counter.  Fall back to use GetTickCount64.','line_number':469,'multiline':False]['text':' sUseQPC is volatile','line_number':491,'multiline':False]['text':' Both values are in [mt] units.','line_number':494,'multiline':False]['text':' Computes and returns the process uptime in microseconds.','line_number':508,'multiline':False]['text':' Returns 0 if an error was encountered.','line_number':509,'multiline':False]['text':' namespace mozilla','line_number':535,'multiline':False]