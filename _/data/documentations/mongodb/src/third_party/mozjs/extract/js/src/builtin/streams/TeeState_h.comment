['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Stream teeing state. ','line_number':7,'multiline':True]['text':' MOZ_ASSERT','line_number':12,'multiline':False]['text':' uint32_t','line_number':14,'multiline':False]['text':' js::ReadableStreamDefaultController','line_number':16,'multiline':False]['text':' JSClass','line_number':17,'multiline':False]['text':' JS::{Int32,Object}Value','line_number':18,'multiline':False]['text':' js::NativeObject','line_number':19,'multiline':False]['text':' js::PromiseObject','line_number':20,'multiline':False]['text':'*
 * TeeState objects implement the local variables in Streams spec 3.3.9
 * ReadableStreamTee, which are accessed by several algorithms.
 ','line_number':24,'multiline':True]['text':'*
   * Memory layout for TeeState instances.
   *
   * The Reason1 and Reason2 slots store opaque values, which might be
   * wrapped objects from other compartments. Since we don't treat them as
   * objects in Streams-specific code, we don't have to worry about that
   * apart from ensuring that the values are properly wrapped before storing
   * them.
   *
   * CancelPromise is always created in TeeState::create below, so is
   * guaranteed to be in the same compartment as the TeeState instance
   * itself.
   *
   * Stream can be from another compartment. It is automatically wrapped
   * before storing it and unwrapped upon retrieval. That means that
   * TeeState consumers need to be able to deal with unwrapped
   * ReadableStream instances from non-current compartments.
   *
   * Branch1 and Branch2 are always created in the same compartment as the
   * TeeState instance, so cannot be from another compartment.
   ','line_number':30,'multiline':True]['text':' No internal user ever sets the cloneForBranch2 flag to true, and the','line_number':68,'multiline':False]['text':' streams spec doesn't expose a way to set the flag to true.  So for the','line_number':69,'multiline':False]['text':' moment, don't even reserve flag-space to store it.','line_number':70,'multiline':False]['text':' Flag_CloneForBranch2 = 1 << 3,','line_number':71,'multiline':False]['text':' Consistent with not even storing this always-false flag, expose it as','line_number':81,'multiline':False]['text':' compile-time constant false.','line_number':82,'multiline':False]['text':' namespace js','line_number':153,'multiline':False]['text':' builtin_streams_TeeState_h','line_number':155,'multiline':False]