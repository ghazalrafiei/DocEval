['text':'**************************************************************************************************

  Zyan Core Library (Zycore-C)

  Original Author : Joel Hoener

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':' ============================================================================================== ','line_number':30,'multiline':True]['text':' Exported functions                                                                             ','line_number':31,'multiline':True]['text':' ============================================================================================== ','line_number':32,'multiline':True]['text':' TODO: Once we have a decent hash map impl, refactor this to use it. The majority of for','line_number':52,'multiline':False]['text':'       loops through the argument list could be avoided.','line_number':53,'multiline':False]['text':' Check argument syntax.','line_number':60,'multiline':False]['text':' TODO: Duplicate check','line_number':63,'multiline':False]['text':' Single dash arguments only accept a single char name.','line_number':76,'multiline':False]['text':' Initialize output vector.','line_number':83,'multiline':False]['text':' Double-dash argument?','line_number':95,'multiline':False]['text':' GNU style end of argument parsing.','line_number':98,'multiline':False]['text':' Regular double-dash argument.','line_number':103,'multiline':False]['text':' Allocate parsed argument struct.','line_number':106,'multiline':False]['text':' Find corresponding argument definition.','line_number':111,'multiline':False]['text':' Search exhausted & argument not found. RIP.','line_number':121,'multiline':False]['text':' Does the argument expect a value? If yes, consume next token.','line_number':129,'multiline':False]['text':' Continue parsing at next token.','line_number':143,'multiline':False]['text':' Single-dash argument?','line_number':147,'multiline':False]['text':' TODO: How to deal with just dashes? Current code treats it as unnamed arg.','line_number':148,'multiline':False]['text':' Iterate argument token chars until there are either no more chars left','line_number':151,'multiline':False]['text':' or we encounter a non-boolean argument, in which case we consume the','line_number':152,'multiline':False]['text':' remaining chars as its value.','line_number':153,'multiline':False]['text':' Allocate parsed argument struct.','line_number':156,'multiline':False]['text':' Find corresponding argument definition.','line_number':161,'multiline':False]['text':' Search exhausted, no match found?','line_number':173,'multiline':False]['text':' Requires value?','line_number':181,'multiline':False]['text':' If there are chars left, consume them (e.g. `-n1000`).','line_number':184,'multiline':False]['text':' If not, consume next token (e.g. `-n 1000`).','line_number':190,'multiline':False]['text':' Either way, continue with next argument.','line_number':204,'multiline':False]['text':' Still here? We're looking at an unnamed argument.','line_number':210,'multiline':False]['text':' Allocate parsed argument struct.','line_number':219,'multiline':False]['text':' All tokens processed. Do we have enough unnamed arguments?','line_number':229,'multiline':False]['text':' No sensible error token for this error type.','line_number':233,'multiline':False]['text':' Check whether all required arguments are present.','line_number':237,'multiline':False]['text':' Skip unnamed args.','line_number':250,'multiline':False]['text':' Yay!','line_number':268,'multiline':False]['text':' ============================================================================================== ','line_number':279,'multiline':True]