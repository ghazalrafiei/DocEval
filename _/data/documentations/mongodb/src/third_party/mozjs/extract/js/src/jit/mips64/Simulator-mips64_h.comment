['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':1,'multiline':True]['text':' Copyright 2011 the V8 project authors. All rights reserved.','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':5,'multiline':False]['text':' met:','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':8,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':9,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':10,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':11,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':12,'multiline':False]['text':'       with the distribution.','line_number':13,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':14,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':15,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':18,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':19,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':20,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':21,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':22,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':23,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':24,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':25,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':26,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':27,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':28,'multiline':False]['text':' When the SingleStepCallback is called, the simulator is about to execute','line_number':54,'multiline':False]['text':' sim->get_pc() and the current machine state represents the completed','line_number':55,'multiline':False]['text':' execution of the previous pc.','line_number':56,'multiline':False]['text':' Number of general purpose registers.','line_number':65,'multiline':False]['text':' In the simulator, the PC register is simulated as the 34th register.','line_number':68,'multiline':False]['text':' Number coprocessor registers.','line_number':71,'multiline':False]['text':' FPU (coprocessor 1) control registers. Currently only FCSR is implemented.','line_number':74,'multiline':False]['text':' FCSR constants.','line_number':80,'multiline':False]['text':' On MIPS64 Simulator breakpoints can have different codes:','line_number':105,'multiline':False]['text':' - Breaks between 0 and kMaxWatchpointCode are treated as simple watchpoints,','line_number':106,'multiline':False]['text':'   the simulator will run through them and print the registers.','line_number':107,'multiline':False]['text':' - Breaks between kMaxWatchpointCode and kMaxStopCode are treated as stop()','line_number':108,'multiline':False]['text':'   instructions (see Assembler::stop()).','line_number':109,'multiline':False]['text':' - Breaks larger than kMaxStopCode are simple breaks, dropping you into the','line_number':110,'multiline':False]['text':'   debugger.','line_number':111,'multiline':False]['text':' -----------------------------------------------------------------------------','line_number':116,'multiline':False]['text':' Utility functions','line_number':117,'multiline':False]['text':' Per thread simulator state.','line_number':122,'multiline':False]['text':' Registers are declared in order. See "See MIPS Run Linux" chapter 2.','line_number':127,'multiline':False]['text':' LO, HI, and pc.','line_number':162,'multiline':False]['text':' pc must be the last register.','line_number':165,'multiline':False]['text':' aliases','line_number':167,'multiline':False]['text':' Coprocessor registers.','line_number':171,'multiline':False]['text':' Returns nullptr on OOM.','line_number':208,'multiline':False]['text':' Constructor/destructor are for internal use only; use the static methods','line_number':213,'multiline':False]['text':' above.','line_number':214,'multiline':False]['text':' The currently executing Simulator instance. Potentially there can be one','line_number':218,'multiline':False]['text':' for each native thread.','line_number':219,'multiline':False]['text':' Accessors for register state. Reading the pc value adheres to the MIPS','line_number':228,'multiline':False]['text':' architecture specification and is off by a 8 from the currently executing','line_number':229,'multiline':False]['text':' instruction.','line_number':230,'multiline':False]['text':' Same for FPURegisters.','line_number':233,'multiline':False]['text':' Special case of set_register and get_register to access the raw PC value.','line_number':249,'multiline':False]['text':' Accessor to the internal simulator stack area.','line_number':261,'multiline':False]['text':' Executes MIPS instructions until the PC reaches end_sim_pc.','line_number':266,'multiline':False]['text':' Sets up the simulator state and grabs the result on return.','line_number':270,'multiline':False]['text':' Push an address onto the JS stack.','line_number':273,'multiline':False]['text':' Pop an address from the JS stack.','line_number':276,'multiline':False]['text':' Debugger input.','line_number':279,'multiline':False]['text':' Returns true if pc register contains one of the 'SpecialValues' defined','line_number':283,'multiline':False]['text':' below (bad_ra, end_sim_pc).','line_number':284,'multiline':False]['text':' Known bad pc value to ensure that the simulator does not execute','line_number':289,'multiline':False]['text':' without being properly setup.','line_number':290,'multiline':False]['text':' A pc value used to signal the simulator to stop execution.  Generally','line_number':292,'multiline':False]['text':' the ra is set to this value on transition from native C code to','line_number':293,'multiline':False]['text':' simulated execution, so that the simulator can "return" to the native','line_number':294,'multiline':False]['text':' C code.','line_number':295,'multiline':False]['text':' Unpredictable value.','line_number':297,'multiline':False]['text':' Unsupported instructions use Format to print an error and stop execution.','line_number':303,'multiline':False]['text':' Read and write memory.','line_number':306,'multiline':False]['text':' Helper function for decodeTypeRegister.','line_number':338,'multiline':False]['text':' Executing is handled based on the instruction type.','line_number':344,'multiline':False]['text':' Used for breakpoints and traps.','line_number':349,'multiline':False]['text':' Stop helper functions.','line_number':352,'multiline':False]['text':' Handle any wasm faults, returning true if the fault was handled.','line_number':365,'multiline':False]['text':' This method is rather hot so inline the normal (no-wasm) case.','line_number':366,'multiline':False]['text':' Executes one instruction.','line_number':383,'multiline':False]['text':' Execute one instruction placed in a branch delay slot.','line_number':385,'multiline':False]['text':' Runtime call support.','line_number':391,'multiline':False]['text':' Exceptions.','line_number':405,'multiline':False]['text':' Handle return value for runtime FP functions.','line_number':408,'multiline':False]['text':' Architecture state.','line_number':416,'multiline':False]['text':' Registers.','line_number':417,'multiline':False]['text':' Coprocessor Registers.','line_number':419,'multiline':False]['text':' FPU control register.','line_number':421,'multiline':False]['text':' Simulator support.','line_number':428,'multiline':False]['text':' Debugger input.','line_number':435,'multiline':False]['text':' Registered breakpoints.','line_number':438,'multiline':False]['text':' Single-stepping support','line_number':442,'multiline':False]['text':' A stop is watched if its code is less than kNumOfWatchedStops.','line_number':447,'multiline':False]['text':' Only watched stops support enabling/disabling and the counter feature.','line_number':448,'multiline':False]['text':' Stop is disabled if bit 31 is set.','line_number':451,'multiline':False]['text':' A stop is enabled, meaning the simulator will stop when meeting the','line_number':454,'multiline':False]['text':' instruction, if bit 31 of watchedStops_[code].count is unset.','line_number':455,'multiline':False]['text':' The value watchedStops_[code].count & ~(1 << 31) indicates how many times','line_number':456,'multiline':False]['text':' the breakpoint was hit or gone through.','line_number':457,'multiline':False]['text':' Process wide simulator state.','line_number':465,'multiline':False]['text':' ICache checking.','line_number':471,'multiline':False]['text':' This lock creates a critical section around 'redirection_' and','line_number':503,'multiline':False]['text':' 'icache_', which are referenced both by the execution engine','line_number':504,'multiline':False]['text':' and by the off-thread compiler (see Redirection::Get in the cpp file).','line_number':505,'multiline':False]['text':' Technically we need the lock to access the innards of the','line_number':513,'multiline':False]['text':' icache, not to take its address, but the latter condition','line_number':514,'multiline':False]['text':' serves as a useful complement to the former.','line_number':515,'multiline':False]['text':' namespace jit','line_number':531,'multiline':False]['text':' namespace js','line_number':532,'multiline':False]['text':' JS_SIMULATOR_MIPS64 ','line_number':534,'multiline':True]['text':' jit_mips64_Simulator_mips64_h ','line_number':536,'multiline':True]