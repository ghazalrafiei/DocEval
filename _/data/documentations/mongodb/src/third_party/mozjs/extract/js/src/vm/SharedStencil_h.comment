['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT, MOZ_CRASH','line_number':10,'multiline':False]['text':' mozilla::{Atomic, SequentiallyConsistent}','line_number':11,'multiline':False]['text':' mozilla::CheckedInt','line_number':12,'multiline':False]['text':' mozilla::HahNumber, mozilla::HashBytes','line_number':13,'multiline':False]['text':' mozilla::HashSet','line_number':14,'multiline':False]['text':' mozilla::MallocSizeOf','line_number':15,'multiline':False]['text':' RefPtr','line_number':16,'multiline':False]['text':' mozilla::Span','line_number':17,'multiline':False]['text':' size_t','line_number':19,'multiline':False]['text':' uint8_t, uint16_t, uint32_t','line_number':20,'multiline':False]['text':' js::SrcNote','line_number':22,'multiline':False]['text':' js::frontend::TypedIndex','line_number':23,'multiline':False]['text':' js::SystemAllocPolicy','line_number':25,'multiline':False]['text':' JSContext,jsbytecode','line_number':26,'multiline':False]['text':' js::UniquePtr','line_number':27,'multiline':False]['text':' js::EnumFlags','line_number':28,'multiline':False]['text':' js::TrailingArray','line_number':29,'multiline':False]['text':' GeneratorKind, FunctionAsyncKind','line_number':30,'multiline':False]['text':' js::{TryNoteKind,ImmutableScriptFlagsEnum,MutableScriptFlagsEnum}','line_number':31,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' Data structures shared between Stencil and the VM.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' namespace frontend','line_number':41,'multiline':False]['text':' Index into gcthings array.','line_number':43,'multiline':False]['text':' Delegate constructors;','line_number':46,'multiline':False]['text':'
 * Exception handling record.
 ','line_number':60,'multiline':True]['text':' one of TryNoteKind ','line_number':64,'multiline':True]['text':' stack depth upon exception handler entry ','line_number':65,'multiline':True]['text':' start of the try statement or loop relative
                          to script->code() ','line_number':66,'multiline':True]['text':' length of the try statement or loop ','line_number':68,'multiline':True]['text':' A block scope has a range in bytecode: it is entered at some offset, and left','line_number':93,'multiline':False]['text':' at some later offset.  Scopes can be nested.  Given an offset, the','line_number':94,'multiline':False]['text':' ScopeNote containing that offset whose with the highest start value','line_number':95,'multiline':False]['text':' indicates the block scope.  The block scope list is sorted by increasing','line_number':96,'multiline':False]['text':' start value.','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' It is possible to leave a scope nonlocally, for example via a "break"','line_number':99,'multiline':False]['text':' statement, so there may be short bytecode ranges in a block scope in which we','line_number':100,'multiline':False]['text':' are popping the block chain in preparation for a goto.  These exits are also','line_number':101,'multiline':False]['text':' nested with respect to outer scopes.  The scopes in these exits are indicated','line_number':102,'multiline':False]['text':' by the "index" field, just like any other block.  If a nonlocal exit pops the','line_number':103,'multiline':False]['text':' last block scope, the index will be NoScopeIndex.','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' Sentinel index for no Scope.','line_number':107,'multiline':False]['text':' Sentinel index for no ScopeNote.','line_number':110,'multiline':False]['text':' Index of the js::Scope in the script's gcthings array, or NoScopeIndex if','line_number':113,'multiline':False]['text':' there is no block scope in this range.','line_number':114,'multiline':False]['text':' Bytecode offset at which this scope starts relative to script->code().','line_number':117,'multiline':False]['text':' Length of bytecode span this scope covers.','line_number':120,'multiline':False]['text':' Index of parent block scope in notes, or NoScopeNoteIndex.','line_number':123,'multiline':False]['text':' Range of characters in scriptSource which contains a script's source,','line_number':127,'multiline':False]['text':' that is, the range used by the Parser to produce a script.','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' For most functions the fields point to the following locations.','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':'   function * foo(a, b) { return a + b; }','line_number':132,'multiline':False]['text':'   ^             ^                       ^','line_number':133,'multiline':False]['text':'   |             |                       |','line_number':134,'multiline':False]['text':'   |             sourceStart     sourceEnd','line_number':135,'multiline':False]['text':'   |                                     |','line_number':136,'multiline':False]['text':'   toStringStart               toStringEnd','line_number':137,'multiline':False]['text':'','line_number':138,'multiline':False]['text':' For the special case of class constructors, the spec requires us to use an','line_number':139,'multiline':False]['text':' alternate definition of toStringStart / toStringEnd.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':'   class C { constructor() { this.field = 42; } }','line_number':142,'multiline':False]['text':'   ^                    ^                      ^ ^','line_number':143,'multiline':False]['text':'   |                    |                      | |','line_number':144,'multiline':False]['text':'   |                    sourceStart    sourceEnd |','line_number':145,'multiline':False]['text':'   |                                             |','line_number':146,'multiline':False]['text':'   toStringStart                       toStringEnd','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' Implicit class constructors use the following definitions.','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':'   class C { someMethod() { } }','line_number':151,'multiline':False]['text':'   ^                           ^','line_number':152,'multiline':False]['text':'   |                           |','line_number':153,'multiline':False]['text':'   sourceStart         sourceEnd','line_number':154,'multiline':False]['text':'   |                           |','line_number':155,'multiline':False]['text':'   toStringStart     toStringEnd','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' Field initializer lambdas are internal details of the engine, but we still','line_number':158,'multiline':False]['text':' provide a sensible definition of these values.','line_number':159,'multiline':False]['text':'','line_number':160,'multiline':False]['text':'   class C { static field = 1 }','line_number':161,'multiline':False]['text':'   class C {        field = 1 }','line_number':162,'multiline':False]['text':'   class C {        somefield }','line_number':163,'multiline':False]['text':'                    ^        ^','line_number':164,'multiline':False]['text':'                    |        |','line_number':165,'multiline':False]['text':'          sourceStart        sourceEnd','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':' The non-static private class methods (including getters and setters) ALSO','line_number':168,'multiline':False]['text':' create a hidden initializer lambda in addition to the method itself. These','line_number':169,'multiline':False]['text':' lambdas are not exposed directly to script.','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':'   class C { #field() {       } }','line_number':172,'multiline':False]['text':'   class C { get #field() {   } }','line_number':173,'multiline':False]['text':'   class C { async #field() { } }','line_number':174,'multiline':False]['text':'   class C { * #field() {     } }','line_number':175,'multiline':False]['text':'             ^                 ^','line_number':176,'multiline':False]['text':'             |                 |','line_number':177,'multiline':False]['text':'             sourceStart       sourceEnd','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' NOTE: These are counted in Code Units from the start of the script source.','line_number':180,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' Also included in the SourceExtent is the line and column numbers of the','line_number':182,'multiline':False]['text':' sourceStart position. Compilation options may specify the initial line and','line_number':183,'multiline':False]['text':' column number.','line_number':184,'multiline':False]['text':'','line_number':185,'multiline':False]['text':' NOTE: Column number may saturate and must not be used as unique identifier.','line_number':186,'multiline':False]['text':' Line and column of |sourceStart_| position.','line_number':213,'multiline':False]['text':' 1-indexed.','line_number':214,'multiline':False]['text':' Count of Code Points','line_number':215,'multiline':False]['text':'                                                                        \
    ** A script may not be relazifiable if parts of it can be entrained in    \
    ** interesting ways:                                                      \
    **  - Scripts with inner-functions or direct-eval (which can add          \
    **    inner-functions) should not be relazified as their Scopes may be    \
    **    part of another scope-chain.                                        \
    **  - Generators and async functions may be re-entered in complex ways so \
    **    don't discard bytecode. The JIT resume code assumes this.           \
    **  - Functions with template literals must always return the same object \
    **    instance so must not discard it by relazifying.                     \
    ','line_number':305,'multiline':True]['text':' [SMDOC] JSScript data layout (immutable)','line_number':350,'multiline':False]['text':'','line_number':351,'multiline':False]['text':' ImmutableScriptData stores variable-length script data that may be shared','line_number':352,'multiline':False]['text':' between scripts with the same bytecode, even across different GC Zones.','line_number':353,'multiline':False]['text':' Abstractly this structure consists of multiple (optional) arrays that are','line_number':354,'multiline':False]['text':' exposed as mozilla::Span<T>. These arrays exist in a single heap allocation.','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':' Under the hood, ImmutableScriptData is a fixed-size header class followed','line_number':357,'multiline':False]['text':' the various array bodies interleaved with metadata to compactly encode the','line_number':358,'multiline':False]['text':' bounds. These arrays have varying requirements for alignment, performance,','line_number':359,'multiline':False]['text':' and jit-friendliness which leads to the complex indexing system below.','line_number':360,'multiline':False]['text':'','line_number':361,'multiline':False]['text':' Note: The '----' separators are for readability only.','line_number':362,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' ----','line_number':364,'multiline':False]['text':'   <ImmutableScriptData itself>','line_number':365,'multiline':False]['text':' ----','line_number':366,'multiline':False]['text':'   (REQUIRED) Flags structure','line_number':367,'multiline':False]['text':'   (REQUIRED) Array of jsbytecode constituting code()','line_number':368,'multiline':False]['text':'   (REQUIRED) Array of SrcNote constituting notes()','line_number':369,'multiline':False]['text':' ----','line_number':370,'multiline':False]['text':'   (OPTIONAL) Array of uint32_t optional-offsets','line_number':371,'multiline':False]['text':'  optArrayOffset:','line_number':372,'multiline':False]['text':' ----','line_number':373,'multiline':False]['text':'  L0:','line_number':374,'multiline':False]['text':'   (OPTIONAL) Array of uint32_t constituting resumeOffsets()','line_number':375,'multiline':False]['text':'  L1:','line_number':376,'multiline':False]['text':'   (OPTIONAL) Array of ScopeNote constituting scopeNotes()','line_number':377,'multiline':False]['text':'  L2:','line_number':378,'multiline':False]['text':'   (OPTIONAL) Array of TryNote constituting tryNotes()','line_number':379,'multiline':False]['text':'  L3:','line_number':380,'multiline':False]['text':' ----','line_number':381,'multiline':False]['text':'','line_number':382,'multiline':False]['text':' NOTE: The notes() array must have been null-padded such that','line_number':383,'multiline':False]['text':'       flags/code/notes together have uint32_t alignment.','line_number':384,'multiline':False]['text':'','line_number':385,'multiline':False]['text':' The labels shown are recorded as byte-offsets relative to 'this'. This is to','line_number':386,'multiline':False]['text':' reduce memory as well as make ImmutableScriptData easier to share across','line_number':387,'multiline':False]['text':' processes.','line_number':388,'multiline':False]['text':'','line_number':389,'multiline':False]['text':' The L0/L1/L2/L3 labels indicate the start and end of the optional arrays.','line_number':390,'multiline':False]['text':' Some of these labels may refer to the same location if the array between','line_number':391,'multiline':False]['text':' them is empty. Each unique label position has an offset stored in the','line_number':392,'multiline':False]['text':' optional-offsets table. Note that we also avoid entries for labels that','line_number':393,'multiline':False]['text':' match 'optArrayOffset'. This saves memory when arrays are empty.','line_number':394,'multiline':False]['text':'','line_number':395,'multiline':False]['text':' The flags() data indicates (for each optional array) which entry from the','line_number':396,'multiline':False]['text':' optional-offsets table marks the *end* of array. The array starts where the','line_number':397,'multiline':False]['text':' previous array ends (with the first array beginning at 'optArrayOffset').','line_number':398,'multiline':False]['text':' The optional-offset table is addressed at negative indices from','line_number':399,'multiline':False]['text':' 'optArrayOffset'.','line_number':400,'multiline':False]['text':'','line_number':401,'multiline':False]['text':' In general, the length of each array is computed from subtracting the start','line_number':402,'multiline':False]['text':' offset of the array from the start offset of the subsequent array. The','line_number':403,'multiline':False]['text':' notable exception is that bytecode length is stored explicitly.','line_number':404,'multiline':False]['text':' Length of bytecode','line_number':409,'multiline':False]['text':' Offset of main entry point from code, after predef'ing prologue.','line_number':413,'multiline':False]['text':' Fixed frame slots.','line_number':416,'multiline':False]['text':' Slots plus maximum stack depth.','line_number':419,'multiline':False]['text':' Index into the gcthings array of the body scope.','line_number':422,'multiline':False]['text':' Number of IC entries to allocate in JitScript for Baseline ICs.','line_number':425,'multiline':False]['text':' ES6 function length.','line_number':428,'multiline':False]['text':' NOTE: The raw bytes of this structure are used for hashing so use explicit','line_number':431,'multiline':False]['text':' padding values as needed for predicatable results across compilers.','line_number':432,'multiline':False]['text':' Offsets (in bytes) from 'this' to each component array. The delta between','line_number':445,'multiline':False]['text':' each offset and the next offset is the size of each array and is defined','line_number':446,'multiline':False]['text':' even if an array is empty.','line_number':447,'multiline':False]['text':' Determine the location to beginning of optional-offsets array by looking','line_number':452,'multiline':False]['text':' at index for try-notes.','line_number':453,'multiline':False]['text':'','line_number':454,'multiline':False]['text':'   optionalOffsetsOffset():','line_number':455,'multiline':False]['text':'     (OPTIONAL) tryNotesEndOffset','line_number':456,'multiline':False]['text':'     (OPTIONAL) scopeNotesEndOffset','line_number':457,'multiline':False]['text':'     (OPTIONAL) resumeOffsetsEndOffset','line_number':458,'multiline':False]['text':'   optArrayOffset_:','line_number':459,'multiline':False]['text':'     ....','line_number':460,'multiline':False]['text':' Initialize to GC-safe state','line_number':481,'multiline':False]['text':' The index 0 represents (implicitly) the offset 'optArrayOffset_'.','line_number':492,'multiline':False]['text':' The code() and note() arrays together maintain an target alignment by','line_number':528,'multiline':False]['text':' padding the source notes with null. This allows arrays with stricter','line_number':529,'multiline':False]['text':' alignment requirements to follow them.','line_number':530,'multiline':False]['text':' Compute number of null notes to pad out source notes with.','line_number':533,'multiline':False]['text':' The source notes must have at least one null-terminator.','line_number':539,'multiline':False]['text':' Span over all raw bytes in this struct and its trailing arrays.','line_number':545,'multiline':False]['text':' Expose offsets to the JITs.','line_number':581,'multiline':False]['text':' Resume-offsets are the first optional array if they exist. Locate the','line_number':586,'multiline':False]['text':' array with the 'optArrayOffset_' field.','line_number':587,'multiline':False]['text':' ImmutableScriptData has trailing data so isn't copyable or movable.','line_number':602,'multiline':False]['text':' Wrapper type for ImmutableScriptData to allow sharing across a JSRuntime.','line_number':607,'multiline':False]['text':'','line_number':608,'multiline':False]['text':' Note: This is distinct from ImmutableScriptData because it contains a mutable','line_number':609,'multiline':False]['text':'       ref-count while the ImmutableScriptData may live in read-only memory.','line_number':610,'multiline':False]['text':'','line_number':611,'multiline':False]['text':' Note: This is *not* directly inlined into the SharedImmutableScriptDataTable','line_number':612,'multiline':False]['text':'       because scripts point directly to object and table resizing moves','line_number':613,'multiline':False]['text':'       entries. This allows for fast finalization by decrementing the','line_number':614,'multiline':False]['text':'       ref-count directly without doing a hash-table lookup.','line_number':615,'multiline':False]['text':' This class is reference counted as follows: each pointer from a JSScript','line_number':617,'multiline':False]['text':' counts as one reference plus there may be one reference from the shared','line_number':618,'multiline':False]['text':' script data table.','line_number':619,'multiline':False]['text':' End of fields.','line_number':628,'multiline':False]['text':' Hash over the contents of SharedImmutableScriptData and its','line_number':647,'multiline':False]['text':' ImmutableScriptData.','line_number':648,'multiline':False]['text':' SharedImmutableScriptData has trailing data so isn't copyable or movable.','line_number':678,'multiline':False]['text':' Matches SharedImmutableScriptData objects that have the same atoms as well as','line_number':704,'multiline':False]['text':' contain the same bytes in their ImmutableScriptData.','line_number':705,'multiline':False]['text':' This struct will eventually have a vector of constant values for optimizing','line_number':733,'multiline':False]['text':' field initializers.','line_number':734,'multiline':False]['text':' Singleton to use for class constructors that do not have to initialize any','line_number':751,'multiline':False]['text':' fields. This is used when we elide the trivial data but still need a valid','line_number':752,'multiline':False]['text':' set to stop scope walking.','line_number':753,'multiline':False]['text':' namespace js','line_number':779,'multiline':False]['text':' vm_SharedStencil_h ','line_number':781,'multiline':True]