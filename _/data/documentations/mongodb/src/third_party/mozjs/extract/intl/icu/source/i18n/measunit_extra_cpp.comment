['text':' Â© 2020 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Extra functions for MeasureUnit not needed for all clients.','line_number':4,'multiline':False]['text':' Separate .o file so that it can be removed for modularity.','line_number':5,'multiline':False]['text':' Allow implicit conversion from char16_t* to UnicodeString for this file:','line_number':11,'multiline':False]['text':' Helpful in toString methods and elsewhere.','line_number':12,'multiline':False]['text':' TODO: Propose a new error code for this?','line_number':41,'multiline':False]['text':' Trie value offset for SI or binary prefixes. This is big enough to ensure we only','line_number':44,'multiline':False]['text':' insert positive integers into the trie.','line_number':45,'multiline':False]['text':' Trie value offset for compound parts, e.g. "-per-", "-", "-and-".','line_number':52,'multiline':False]['text':' Represents "-per-"','line_number':60,'multiline':False]['text':' Represents "-"','line_number':62,'multiline':False]['text':' Represents "-and-"','line_number':64,'multiline':False]['text':' Trie value offset for "per-".','line_number':68,'multiline':False]['text':' Represents "per-", the only compound part that can appear at the start of','line_number':72,'multiline':False]['text':' an identifier.','line_number':73,'multiline':False]['text':' Trie value offset for powers like "square-", "cubic-", "pow2-" etc.','line_number':77,'multiline':False]['text':' Trie value offset for simple units, e.g. "gram", "nautical-mile",','line_number':97,'multiline':False]['text':' "fluid-ounce-imperial".','line_number':98,'multiline':False]['text':' SI prefixes','line_number':105,'multiline':False]['text':' Binary prefixes','line_number':126,'multiline':False]['text':'*
 * A ResourceSink that collects simple unit identifiers from the keys of the
 * convertUnits table into an array, and adds these values to a TrieBuilder,
 * with associated values being their index into this array plus a specified
 * offset.
 *
 * Example code:
 *
 *     UErrorCode status = U_ZERO_ERROR;
 *     BytesTrieBuilder b(status);
 *     int32_t ARR_SIZE = 200;
 *     const char *unitIdentifiers[ARR_SIZE];
 *     int32_t *unitCategories[ARR_SIZE];
 *     SimpleUnitIdentifiersSink identifierSink(gSerializedUnitCategoriesTrie, unitIdentifiers,
 *                                              unitCategories, ARR_SIZE, b, kTrieValueOffset);
 *     LocalUResourceBundlePointer unitsBundle(ures_openDirect(NULL, "units", &status));
 *     ures_getAllItemsWithFallback(unitsBundle.getAlias(), "convertUnits", identifierSink, status);
 ','line_number':137,'multiline':True]['text':'*
     * Constructor.
     * @param quantitiesTrieData The data for constructing a quantitiesTrie,
     *     which maps from a simple unit identifier to an index into the
     *     gCategories array.
     * @param out Array of char* to which pointers to the simple unit
     *     identifiers will be saved. (Does not take ownership.)
     * @param outCategories Array of int32_t to which category indexes will be
     *     saved: this corresponds to simple unit IDs saved to `out`, mapping
     *     from the ID to the value produced by the quantitiesTrie (which is an
     *     index into the gCategories array).
     * @param outSize The size of `out` and `outCategories`.
     * @param trieBuilder The trie builder to which the simple unit identifier
     *     should be added. The trie builder must outlive this resource sink.
     * @param trieValueOffset This is added to the index of the identifier in
     *     the `out` array, before adding to `trieBuilder` as the value
     *     associated with the identifier.
     ','line_number':157,'multiline':True]['text':'*
     * Adds the table keys found in value to the output vector.
     * @param key The key of the resource passed to `value`: the second
     *     parameter of the ures_getAllItemsWithFallback() call.
     * @param value Should be a ResourceTable value, if
     *     ures_getAllItemsWithFallback() was called correctly for this sink.
     * @param noFallback Ignored.
     * @param status The standard ICU error code output parameter.
     ','line_number':181,'multiline':True]['text':'key','line_number':190,'multiline':True]['text':'noFallback','line_number':190,'multiline':True]['text':' Collect keys from the table resource.','line_number':201,'multiline':False]['text':' For parsing, we use "gram", the prefixless metric mass unit. We','line_number':207,'multiline':False]['text':' thus ignore the SI Base Unit of Mass: it exists due to being the','line_number':208,'multiline':False]['text':' mass conversion target unit, but not needed for MeasureUnit','line_number':209,'multiline':False]['text':' parsing.','line_number':210,'multiline':False]['text':' Find the base target unit for this simple unit','line_number':216,'multiline':False]['text':'*
 * A ResourceSink that collects information from `unitQuantities` in the `units`
 * resource to provide key->value lookups from base unit to category, as well as
 * preserving ordering information for these categories. See `units.txt`.
 *
 * For example: "kilogram" -> "mass", "meter-per-second" -> "speed".
 *
 * In C++ unitQuantity values are collected in order into a UChar* array, while
 * unitQuantity keys are added added to a TrieBuilder, with associated values
 * being the index into the aforementioned UChar* array.
 ','line_number':252,'multiline':True]['text':'*
     * Constructor.
     * @param out Array of UChar* to which unitQuantity values will be saved.
     *     The pointers returned  not owned: they point directly at the resource
     *     strings in static memory.
     * @param outSize The size of the `out` array.
     * @param trieBuilder The trie builder to which the keys (base units) of
     *     each unitQuantity will be added, each with value being the offset
     *     into `out`.
     ','line_number':265,'multiline':True]['text':'key','line_number':278,'multiline':True]['text':'noFallback','line_number':278,'multiline':True]['text':' Array of simple unit IDs.','line_number':318,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' The array memory itself is owned by this pointer, but the individual char* in','line_number':320,'multiline':False]['text':' that array point at static memory. (Note that these char* are also returned','line_number':321,'multiline':False]['text':' by SingleUnitImpl::getSimpleUnitID().)','line_number':322,'multiline':False]['text':' Maps from the value associated with each simple unit ID to an index into the','line_number':325,'multiline':False]['text':' gCategories array.','line_number':326,'multiline':False]['text':' Array of UChar* pointing at the unit categories (aka "quantities", aka','line_number':331,'multiline':False]['text':' "types"), as found in the `unitQuantities` resource. The array memory itself','line_number':332,'multiline':False]['text':' is owned by this pointer, but the individual UChar* in that array point at','line_number':333,'multiline':False]['text':' static memory.','line_number':334,'multiline':False]['text':' Number of items in `gCategories`.','line_number':336,'multiline':False]['text':' TODO: rather save an index into gCategories?','line_number':338,'multiline':False]['text':' Serialized BytesTrie for mapping from base units to indices into gCategories.','line_number':341,'multiline':False]['text':' Collect unitQuantities information into gSerializedUnitCategoriesTrie and gCategories.','line_number':363,'multiline':False]['text':' Copy the result into the global constant pointer','line_number':381,'multiline':False]['text':' Build the BytesTrie that Parser needs for parsing unit identifiers.','line_number':390,'multiline':False]['text':' Add SI and binary prefixes','line_number':395,'multiline':False]['text':' Add syntax parts (compound, power prefixes)','line_number':401,'multiline':False]['text':' Add sanctioned simple units by offset: simple units all have entries in','line_number':424,'multiline':False]['text':' units/convertUnits resources.','line_number':425,'multiline':False]['text':' Allocate enough space: with identifierSink below skipping kilogram, we're','line_number':430,'multiline':False]['text':' probably allocating one more than needed.','line_number':431,'multiline':False]['text':' Populate gSimpleUnits and build the associated trie.','line_number':448,'multiline':False]['text':' Build the CharsTrie','line_number':453,'multiline':False]['text':' TODO: Use SLOW or FAST here?','line_number':454,'multiline':False]['text':' Copy the result into the global constant pointer','line_number':458,'multiline':False]['text':' Token type for "-per-", "-", and "-and-".','line_number':475,'multiline':False]['text':' Token type for "per-".','line_number':477,'multiline':False]['text':' Calling getType() is invalid, resulting in an assertion failure, if Token','line_number':483,'multiline':False]['text':' value isn't positive.','line_number':484,'multiline':False]['text':' Valid only for tokens with type TYPE_COMPOUND_PART.','line_number':507,'multiline':False]['text':' Even if there is only one InitialCompoundPart value, we have this','line_number':514,'multiline':False]['text':' function for the simplicity of code consistency.','line_number':515,'multiline':False]['text':' Defensive: if this assert fails, code using this function also needs','line_number':517,'multiline':False]['text':' to change.','line_number':518,'multiline':False]['text':'*
     * Factory function for parsing the given identifier.
     *
     * @param source The identifier to parse. This function does not make a copy
     * of source: the underlying string that source points at, must outlive the
     * parser.
     * @param status ICU error code.
     ','line_number':539,'multiline':True]['text':' The dimenionless unit: nothing to parse. leave result as is.','line_number':565,'multiline':False]['text':' Two similar units are not allowed in a mixed unit.','line_number':583,'multiline':False]['text':' nextSingleUnit fails appropriately for "per" and "and" in the','line_number':589,'multiline':False]['text':' same identifier. It doesn't fail for other compound units','line_number':590,'multiline':False]['text':' (COMPOUND_PART_TIMES). Consequently we take care of that','line_number':591,'multiline':False]['text':' here.','line_number':592,'multiline':False]['text':' After appending two singleUnits, the complexity will be `UMEASURE_UNIT_COMPOUND`','line_number':596,'multiline':False]['text':' Can't have mixed compound units','line_number':600,'multiline':False]['text':' Tracks parser progress: the offset into fSource.','line_number':611,'multiline':False]['text':' Since we're not owning this memory, whatever is passed to the constructor','line_number':614,'multiline':False]['text':' should live longer than this Parser - and the parser shouldn't return any','line_number':615,'multiline':False]['text':' references to that string.','line_number':616,'multiline':False]['text':' Set to true when we've seen a "-per-" or a "per-", after which all units','line_number':620,'multiline':False]['text':' are in the denominator. Until we find an "-and-", at which point the','line_number':621,'multiline':False]['text':' identifier is invalid pending TODO(CLDR-13700).','line_number':622,'multiline':False]['text':' Returns the next Token parsed from fSource, advancing fIndex to the end','line_number':634,'multiline':False]['text':' of that token in fSource. In case of U_FAILURE(status), the token','line_number':635,'multiline':False]['text':' returned will cause an abort if getType() is called on it.','line_number':636,'multiline':False]['text':' Saves the position in the fSource string for the end of the most','line_number':640,'multiline':False]['text':' recent matching token.','line_number':641,'multiline':False]['text':' Find the longest token that matches a value in the trie:','line_number':643,'multiline':False]['text':' continue;','line_number':658,'multiline':False]['text':'*
     * Returns the next "single unit" via result.
     *
     * If a "-per-" was parsed, the result will have appropriate negative
     * dimensionality.
     *
     * Returns an error if we parse both compound units and "-and-", since mixed
     * compound units are not yet supported - TODO(CLDR-13700).
     *
     * @param result Will be overwritten by the result, if status shows success.
     * @param sawAnd If an "-and-" was parsed prior to finding the "single
     * unit", sawAnd is set to true. If not, it is left as is.
     * @param status ICU error code.
     ','line_number':669,'multiline':True]['text':' state:','line_number':689,'multiline':False]['text':' 0 = no tokens seen yet (will accept power, SI or binary prefix, or simple unit)','line_number':690,'multiline':False]['text':' 1 = power token seen (will not accept another power token)','line_number':691,'multiline':False]['text':' 2 = SI or binary prefix token seen (will not accept a power, or SI or binary prefix token)','line_number':692,'multiline':False]['text':' Identifiers optionally start with "per-".','line_number':702,'multiline':False]['text':' All other SingleUnit's are separated from previous SingleUnit's','line_number':714,'multiline':False]['text':' via a compound part:','line_number':715,'multiline':False]['text':' Mixed compound units not yet supported,','line_number':724,'multiline':False]['text':' TODO(CLDR-13700).','line_number':725,'multiline':False]['text':' Can't start with "-and-", and mixed compound units','line_number':741,'multiline':False]['text':' not yet supported, TODO(CLDR-13700).','line_number':742,'multiline':False]['text':' Read tokens until we have a complete SingleUnit or we reach the end.','line_number':756,'multiline':False]['text':' We ran out of tokens before finding a complete single unit.','line_number':787,'multiline':False]['text':' Sorting function wrapping SingleUnitImpl::compareTo for use with uprv_sortArray.','line_number':801,'multiline':False]['text':'context','line_number':803,'multiline':True]['text':' Returns an index into the gCategories array, for the "unitQuantity" (aka','line_number':809,'multiline':False]['text':' "type" or "category") associated with the given base unit identifier. Returns','line_number':810,'multiline':False]['text':' -1 on failure, together with U_UNSUPPORTED_ERROR.','line_number':811,'multiline':False]['text':' namespace','line_number':826,'multiline':False]['text':' TODO(icu-units#130): support inverting any unit, with correct','line_number':859,'multiline':False]['text':' fallback logic: inversion and fallback may depend on presence or','line_number':860,'multiline':False]['text':' absence of a usage for that category.','line_number':861,'multiline':False]['text':' In ICU4J, this is MeasureUnit.getSingleUnitImpl().','line_number':877,'multiline':False]['text':' TODO(icu-units#28): the MeasureUnitImpl::build() method uses','line_number':897,'multiline':False]['text':' findBySubtype, which is relatively slow.','line_number':898,'multiline':False]['text':' - At the time of loading the simple unit IDs, we could also save a','line_number':899,'multiline':False]['text':'   mapping to the builtin MeasureUnit type and subtype they correspond to.','line_number':900,'multiline':False]['text':' - This method could then check dimensionality and index, and if both are','line_number':901,'multiline':False]['text':'   1, directly return MeasureUnit instances very quickly.','line_number':902,'multiline':False]['text':' "this function does not support the dimensionless single units";','line_number':913,'multiline':False]['text':' no-op','line_number':916,'multiline':False]['text':' Unit Identifier Syntax Error','line_number':926,'multiline':False]['text':' TODO: consider using binary search? If we do this, add a unit','line_number':937,'multiline':False]['text':' test to ensure gUnitPrefixStrings is sorted?','line_number':938,'multiline':False]['text':'status','line_number':985,'multiline':True]['text':' Do not append dimensionless units.','line_number':996,'multiline':False]['text':' Find a similar unit that already exists, to attempt to coalesce','line_number':1000,'multiline':False]['text':' Both dimensionalities will be positive, or both will be negative, by','line_number':1010,'multiline':False]['text':' virtue of isCompatibleWith().','line_number':1011,'multiline':False]['text':' Add a copy of singleUnit','line_number':1017,'multiline':False]['text':' NOTE: MaybeStackVector::emplaceBackAndCheckErrorCode creates new copy of  singleUnit.','line_number':1018,'multiline':False]['text':' If the MeasureUnitImpl is `UMEASURE_UNIT_SINGLE` and after the appending a unit, the `singleUnits`','line_number':1024,'multiline':False]['text':' contains more than one. thus means the complexity should be `UMEASURE_UNIT_COMPOUND`','line_number':1025,'multiline':False]['text':'*
 * Normalize a MeasureUnitImpl and generate the identifier string in place.
 ','line_number':1053,'multiline':True]['text':' Dimensionless, constructed by the default constructor.','line_number':1062,'multiline':False]['text':' Note: don't sort a MIXED unit','line_number':1067,'multiline':False]['text':' !UNCONFIG_NO_FORMATTING ','line_number':1194,'multiline':True]