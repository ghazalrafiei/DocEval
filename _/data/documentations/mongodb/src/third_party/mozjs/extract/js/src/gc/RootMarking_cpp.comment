['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' For more detail see JS::Rooted::root and js::RootedTraceable.','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' The JS::RootKind::Traceable list contains a bunch of totally disparate types,','line_number':45,'multiline':False]['text':' but to refer to this list we need /something/ in the type field. We use the','line_number':46,'multiline':False]['text':' following type as a compatible stand-in. No actual methods from','line_number':47,'multiline':False]['text':' ConcreteTraceable type are actually used at runtime.','line_number':48,'multiline':False]['text':' RootedTraceable uses virtual dispatch.','line_number':98,'multiline':False]['text':' RootedTraceable uses virtual dispatch.','line_number':135,'multiline':False]['text':' Note that we do not finalize the Traceable list as we do not know how to','line_number':163,'multiline':False]['text':' safely clear members. We instead assert that none escape the RootLists.','line_number':164,'multiline':False]['text':' See the comment on RootLists::~RootLists for details.','line_number':165,'multiline':False]['text':'
   * We need to use TraceManuallyBarrieredEdge here because we trace wrapper
   * roots in every slice. This is because of some rule-breaking in
   * RemapAllWrappersForObject; see comment there.
   ','line_number':194,'multiline':True]['text':'
   * We need to use TraceManuallyBarrieredEdge here because we trace wrapper
   * roots in every slice. This is because of some rule-breaking in
   * RemapAllWrappersForObject; see comment there.
   ','line_number':203,'multiline':True]['text':' static ','line_number':225,'multiline':True]['text':' We only need to trace atoms when we're marking; atoms are never moved by','line_number':249,'multiline':False]['text':' compacting GC.','line_number':250,'multiline':False]['text':' Trace incoming cross compartment edges from uncollected compartments,','line_number':256,'multiline':False]['text':' skipping gray edges which are traced later.','line_number':257,'multiline':False]['text':' Note that we *must* trace the runtime during the SHUTDOWN_GC's minor GC','line_number':272,'multiline':False]['text':' despite having called FinishRoots already. This is because FinishRoots','line_number':273,'multiline':False]['text':' does not clear the crossCompartmentWrapper map. It cannot do this','line_number':274,'multiline':False]['text':' because Proxy's trace for CrossCompartmentWrappers asserts presence in','line_number':275,'multiline':False]['text':' the map. And we can reach its trace function despite having finished the','line_number':276,'multiline':False]['text':' roots via the edges stored by the pre-barrier verifier when we finish','line_number':277,'multiline':False]['text':' the verifier for the last time.','line_number':278,'multiline':False]['text':' Trace active interpreter and JIT stack roots.','line_number':327,'multiline':False]['text':' Trace legacy C stack roots.','line_number':331,'multiline':False]['text':' Trace C stack roots.','line_number':334,'multiline':False]['text':' Trace runtime global roots.','line_number':343,'multiline':False]['text':' Trace the self-hosting global compartment.','line_number':346,'multiline':False]['text':' Trace the shared Intl data.','line_number':350,'multiline':False]['text':' Trace the JSContext.','line_number':354,'multiline':False]['text':' Trace all realm roots, but not the realm itself; it is traced via the','line_number':357,'multiline':False]['text':' parent pointer if traceRoots actually traces anything.','line_number':358,'multiline':False]['text':' Trace zone script-table roots. See comment in','line_number':363,'multiline':False]['text':' Zone::traceScriptTableRoots() for justification re: calling this only','line_number':364,'multiline':False]['text':' during major (non-nursery) collections.','line_number':365,'multiline':False]['text':' Trace helper thread roots.','line_number':373,'multiline':False]['text':' Trace Debugger.Frames that have live hooks, since dropping them would be','line_number':376,'multiline':False]['text':' observable. In effect, they are rooted by the stack frames.','line_number':377,'multiline':False]['text':' Trace the embedding's black and gray roots.','line_number':380,'multiline':False]['text':'
     * The embedding can register additional roots here.
     *
     * We don't need to trace these in a minor GC because all pointers into
     * the nursery should be in the store buffer, and we want to avoid the
     * time taken to trace all these roots.
     ','line_number':384,'multiline':True]['text':' During GC, we don't trace gray roots at this stage. ','line_number':393,'multiline':True]['text':' The analysis doesn't like the function pointer below.','line_number':403,'multiline':False]['text':' The analysis doesn't like the function pointer below.','line_number':413,'multiline':False]['text':' This skips tracking WeakMap entries because they are not roots.','line_number':429,'multiline':False]['text':' DEBUG','line_number':434,'multiline':False]['text':' Clear any remaining roots from the embedding (as otherwise they will be','line_number':457,'multiline':False]['text':' left dangling after we shut down) and remove the callbacks.','line_number':458,'multiline':False]['text':' DEBUG','line_number':469,'multiline':False]['text':' Append traced things to a buffer on the zone for use later in the GC.','line_number':472,'multiline':False]['text':' See the comment in GCRuntime.h above grayBufferState for details.','line_number':473,'multiline':False]['text':' Set to false if we OOM while buffering gray roots.','line_number':475,'multiline':False]['text':' Precondition: the state has been reset to "unused" after the last GC','line_number':534,'multiline':False]['text':'               and the zone's buffers have been cleared.','line_number':535,'multiline':False]['text':' Propagate the failure flag from the marker to the runtime.','line_number':546,'multiline':False]['text':' Check if |thing| is corrupt by calling a method that touches the heap.','line_number':559,'multiline':False]['text':' This is run from a helper thread while the mutator is paused so we have','line_number':564,'multiline':False]['text':' to use *FromAnyThread methods here.','line_number':565,'multiline':False]['text':' See the comment on SetMaybeAliveFlag to see why we only do this for','line_number':568,'multiline':False]['text':' objects and scripts. We rely on gray root buffering for this to work,','line_number':569,'multiline':False]['text':' but we only need to worry about uncollected dead compartments during','line_number':570,'multiline':False]['text':' incremental GCs (when we do gray root buffering).','line_number':571,'multiline':False]['text':' Bug 1203273: Check for bad pointers on OSX and output diagnostics.','line_number':594,'multiline':False]