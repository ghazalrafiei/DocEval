['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'* Returns a static string equivalent of |kind|. ','line_number':23,'multiline':True]['text':'* Returns the base size in bytes of the GC thing of kind |kind|. ','line_number':26,'multiline':True]['text':' Kinds of JSTracer.','line_number':29,'multiline':False]['text':' Marking path: a tracer used only for marking liveness of cells, not','line_number':31,'multiline':False]['text':' for moving them.','line_number':32,'multiline':False]['text':' Generic tracers: Internal tracers that have a different virtual method','line_number':35,'multiline':False]['text':' called for each edge kind.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' Order is important. All generic kinds must follow this one.','line_number':38,'multiline':False]['text':' Specific kinds of generic tracer.','line_number':41,'multiline':False]['text':' Callback tracers: General-purpose tracers that have a single virtual','line_number':49,'multiline':False]['text':' method called on every edge.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Order is important. All callback kinds must follow this one.','line_number':52,'multiline':False]['text':' Specific kinds of callback tracer.','line_number':55,'multiline':False]['text':'*
   * Do not trace into weak map keys or values during traversal. Users must
   * handle weak maps manually.
   ','line_number':61,'multiline':True]['text':'*
   * Do true ephemeron marking with a weak key lookup marking phase. This is
   * the default for GCMarker.
   ','line_number':67,'multiline':True]['text':'*
   * Trace through to all values, irrespective of whether the keys are live
   * or not. Used for non-marking tracers.
   ','line_number':73,'multiline':True]['text':'*
   * Trace through to all keys and values, irrespective of whether the keys
   * are live or not. Used for non-marking tracers.
   ','line_number':79,'multiline':True]['text':' Whether a tracer should trace weak edges. GCMarker sets this to Skip.','line_number':86,'multiline':False]['text':' Whether a tracer can skip tracing JS::Ids. This is needed by the cycle','line_number':89,'multiline':False]['text':' collector to skip some Ids for performance reasons. Not all Ids are skipped.','line_number':90,'multiline':False]['text':' Optional context information that can be used to construct human readable','line_number':116,'multiline':False]['text':' descriptions of what is being traced.','line_number':117,'multiline':False]['text':' Access to the tracing context: When tracing with a JS::CallbackTracer, we','line_number':120,'multiline':False]['text':' invoke the callback with the edge location and the type of target. This is','line_number':121,'multiline':False]['text':' useful for operating on the edge in the abstract or on the target thing,','line_number':122,'multiline':False]['text':' satisfying most common use cases.  However, some tracers need additional','line_number':123,'multiline':False]['text':' detail about the specific edge that is being traced in order to be','line_number':124,'multiline':False]['text':' useful. Unfortunately, the raw pointer to the edge that we provide is not','line_number':125,'multiline':False]['text':' enough information to infer much of anything useful about that edge.','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':' In order to better support use cases that care in particular about edges --','line_number':128,'multiline':False]['text':' as opposed to the target thing -- tracing implementations are responsible','line_number':129,'multiline':False]['text':' for providing extra context information about each edge they trace, as it','line_number':130,'multiline':False]['text':' is traced. This contains, at a minimum, an edge name and, when tracing an','line_number':131,'multiline':False]['text':' array, the index. Further specialization can be achieved (with some','line_number':132,'multiline':False]['text':' complexity), by associating a functor with the tracer so that, when','line_number':133,'multiline':False]['text':' requested, the user can generate totally custom edge descriptions.','line_number':134,'multiline':False]['text':' Returns the current edge's name. It is only valid to call this when','line_number':136,'multiline':False]['text':' inside the trace callback, however, the edge name will always be set.','line_number':137,'multiline':False]['text':' Returns the current edge's index, if marked as part of an array of edges.','line_number':143,'multiline':False]['text':' This must be called only inside the trace callback. When not tracing an','line_number':144,'multiline':False]['text':' array, the value will be InvalidIndex.','line_number':145,'multiline':False]['text':' Build a description of this edge in the heap graph. This call may invoke','line_number':149,'multiline':False]['text':' the context functor, if set, which may inspect arbitrary areas of the','line_number':150,'multiline':False]['text':' heap. On the other hand, the description provided by this method may be','line_number':151,'multiline':False]['text':' substantially more accurate and useful than those provided by only the','line_number':152,'multiline':False]['text':' name and index.','line_number':153,'multiline':False]['text':' The trace implementation may associate a callback with one or more edges','line_number':156,'multiline':False]['text':' using AutoTracingDetails. This functor is called by getEdgeName and','line_number':157,'multiline':False]['text':' is responsible for providing a textual representation of the edge currently','line_number':158,'multiline':False]['text':' being traced. The callback has access to the full heap, including the','line_number':159,'multiline':False]['text':' currently set tracing context.','line_number':160,'multiline':False]['text':' namespace JS','line_number':177,'multiline':False]['text':' namespace js','line_number':181,'multiline':False]['text':' Return the runtime set on the tracer.','line_number':185,'multiline':False]['text':' Get the current GC number. Only call this method if |isMarkingTracer()|','line_number':209,'multiline':False]['text':' is true.','line_number':210,'multiline':False]['text':' These methods are called when the tracer encounters an edge. Clients should','line_number':235,'multiline':False]['text':' override them to receive notifications when an edge of each type is','line_number':236,'multiline':False]['text':' visited.','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' The caller updates the edge with the return value (if different).','line_number':239,'multiline':False]['text':'','line_number':240,'multiline':False]['text':' In C++, overriding a method hides all methods in the base class with that','line_number':241,'multiline':False]['text':' name, not just methods with that signature. Thus, the typed edge methods','line_number':242,'multiline':False]['text':' have to have distinct names to allow us to override them individually,','line_number':243,'multiline':False]['text':' which is freqently useful if, for example, we only want to process one type','line_number':244,'multiline':False]['text':' of edge.','line_number':245,'multiline':False]['text':' namespace js','line_number':260,'multiline':False]['text':' Override this method to receive notification when a node in the GC','line_number':274,'multiline':False]['text':' heap graph is visited.','line_number':275,'multiline':False]['text':' This class implements the GenericTracer interface to dispatches to onChild.','line_number':279,'multiline':False]['text':' Set the name portion of the tracer's context for the current edge.','line_number':330,'multiline':False]['text':' Set the index portion of the tracer's context for the current range.','line_number':346,'multiline':False]['text':' Set a context callback for the trace callback to use, if it needs a detailed','line_number':366,'multiline':False]['text':' edge description.','line_number':367,'multiline':False]['text':' Save and clear tracing context when performing nested tracing.','line_number':382,'multiline':False]['text':' namespace JS','line_number':396,'multiline':False]['text':' Declare edge-tracing function overloads for public GC pointer types.','line_number':419,'multiline':False]['text':' namespace gc','line_number':425,'multiline':False]['text':' namespace js','line_number':426,'multiline':False]['text':' The JS::TraceEdge family of functions traces the given GC thing reference.','line_number':430,'multiline':False]['text':' This performs the tracing action configured on the given JSTracer: typically','line_number':431,'multiline':False]['text':' calling the JSTracer::callback or marking the thing as live.','line_number':432,'multiline':False]['text':'','line_number':433,'multiline':False]['text':' The argument to JS::TraceEdge is an in-out param: when the function returns,','line_number':434,'multiline':False]['text':' the garbage collector might have moved the GC thing. In this case, the','line_number':435,'multiline':False]['text':' reference passed to JS::TraceEdge will be updated to the thing's new','line_number':436,'multiline':False]['text':' location. Callers of this method are responsible for updating any state that','line_number':437,'multiline':False]['text':' is dependent on the object's address. For example, if the object's address','line_number':438,'multiline':False]['text':' is used as a key in a hashtable, then the object must be removed and','line_number':439,'multiline':False]['text':' re-inserted with the correct hash.','line_number':440,'multiline':False]['text':'','line_number':441,'multiline':False]['text':' Note that while |edgep| must never be null, it is fine for |*edgep| to be','line_number':442,'multiline':False]['text':' nullptr.','line_number':443,'multiline':False]['text':' Edges that are always traced as part of root marking do not require','line_number':463,'multiline':False]['text':' incremental barriers. |JS::UnsafeTraceRoot| overloads allow for marking','line_number':464,'multiline':False]['text':' non-barriered pointers but assert that this happens during root marking.','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':' Note that while |edgep| must never be null, it is fine for |*edgep| to be','line_number':467,'multiline':False]['text':' nullptr.','line_number':468,'multiline':False]['text':' Declare edge-tracing function overloads for public GC pointer types.','line_number':473,'multiline':False]['text':' We also require overloads for these purely-internal types.  These overloads','line_number':477,'multiline':False]['text':' ought not be in public headers, and they should use a different name in order','line_number':478,'multiline':False]['text':' to not be *actual* overloads, but for the moment we still declare them here.','line_number':479,'multiline':False]['text':' namespace JS','line_number':487,'multiline':False]['text':' Trace an edge that is not a GC root and is not wrapped in a barriered','line_number':495,'multiline':False]['text':' wrapper for some reason.','line_number':496,'multiline':False]['text':'','line_number':497,'multiline':False]['text':' This method does not check if |*edgep| is non-null before tracing through','line_number':498,'multiline':False]['text':' it, so callers must check any nullable pointer before calling this method.','line_number':499,'multiline':False]['text':' Not part of the public API, but declared here so we can use it in','line_number':504,'multiline':False]['text':' GCPolicyAPI.h','line_number':505,'multiline':False]['text':' Return true if the given edge is not live and is about to be swept.','line_number':519,'multiline':False]['text':' Not part of the public API, but declared here so we can use it in GCPolicy','line_number':523,'multiline':False]['text':' which is.','line_number':524,'multiline':False]['text':' namespace gc','line_number':528,'multiline':False]['text':'
 * Return whether the runtime is currently being destroyed, for use in
 * assertions.
 ','line_number':531,'multiline':True]['text':' namespace js','line_number':538,'multiline':False]['text':' js_TracingAPI_h ','line_number':540,'multiline':True]