['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Portions of this code taken from WebKit, whose copyright is as follows:
 *
 *   Copyright (C) 2017 Caio Lima <ticaiolima@gmail.com>
 *   Copyright (C) 2017-2018 Apple Inc. All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *   THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 *   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *   PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *   OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Portions of this code taken from V8, whose copyright notice is as follows:
 *
 *   Copyright 2017 the V8 project authors. All rights reserved.
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *       * Redistributions of source code must retain the above copyright
 *         notice, this list of conditions and the following disclaimer.
 *       * Redistributions in binary form must reproduce the above
 *         copyright notice, this list of conditions and the following
 *         disclaimer in the documentation and/or other materials provided
 *         with the distribution.
 *       * Neither the name of Google Inc. nor the names of its
 *         contributors may be used to endorse or promote products derived
 *         from this software without specific prior written permission.
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Portions of this code taken from Dart, whose copyright notice is as follows:
 *
 *   Copyright (c) 2014 the Dart project authors.  Please see the AUTHORS file
 * [1] for details. All rights reserved. Use of this source code is governed by
 * a BSD-style license that can be found in the LICENSE file [2].
 *
 *   [1] https://github.com/dart-lang/sdk/blob/master/AUTHORS
 *   [2] https://github.com/dart-lang/sdk/blob/master/LICENSE
 *
 * Portions of this code taken from Go, whose copyright notice is as follows:
 *
 *   Copyright 2009 The Go Authors. All rights reserved.
 *   Use of this source code is governed by a BSD-style
 *   license that can be found in the LICENSE file [3].
 *
 *   [3] https://golang.org/LICENSE
 ','line_number':7,'multiline':True]['text':' mozilla::Span','line_number':89,'multiline':False]['text':' std::is_same_v','line_number':96,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':105,'multiline':False]['text':' |x| is partially initialized, expose it as a BigInt using inline digits','line_number':165,'multiline':False]['text':' to the GC.','line_number':166,'multiline':False]['text':' See |AllocateBigIntDigits()|.','line_number':210,'multiline':False]['text':' Multiply in half-pointer-sized chunks.','line_number':287,'multiline':False]['text':' For inputs [AH AL]*[BH BL], the result is:','line_number':288,'multiline':False]['text':'','line_number':289,'multiline':False]['text':'            [AL*BL]  // rLow','line_number':290,'multiline':False]['text':'    +    [AL*BH]     // rMid1','line_number':291,'multiline':False]['text':'    +    [AH*BL]     // rMid2','line_number':292,'multiline':False]['text':'    + [AH*BH]        // rHigh','line_number':293,'multiline':False]['text':'    = [R4 R3 R2 R1]  // high = [R4 R3], low = [R2 R1]','line_number':294,'multiline':False]['text':'','line_number':295,'multiline':False]['text':' Where of course we must be careful with carries between the columns.','line_number':296,'multiline':False]['text':' Outputs: `quotient` will be in rax, `rem` in rdx.','line_number':324,'multiline':False]['text':' Inputs: put `high` into rdx, `low` into rax, and `divisor` into','line_number':326,'multiline':False]['text':' any register or stack slot.','line_number':327,'multiline':False]['text':' Outputs: `quotient` will be in eax, `rem` in edx.','line_number':335,'multiline':False]['text':' Inputs: put `high` into edx, `low` into eax, and `divisor` into','line_number':337,'multiline':False]['text':' any register or stack slot.','line_number':338,'multiline':False]['text':' Adapted from Warren, Hacker's Delight, p. 152.','line_number':344,'multiline':False]['text':' If `s` is DigitBits here, it causes an undefined behavior.','line_number':346,'multiline':False]['text':' But `s` is never DigitBits since `divisor` is never zero here.','line_number':347,'multiline':False]['text':' `sZeroMask` which is 0 if s == 0 and all 1-bits otherwise.','line_number':354,'multiline':False]['text':'','line_number':355,'multiline':False]['text':' `s` can be 0. If `s` is 0, performing "low >> (DigitBits - s)" must not','line_number':356,'multiline':False]['text':' be done since it causes an undefined behavior since `>> DigitBits` is','line_number':357,'multiline':False]['text':' undefined in C++. Quoted from C++ spec, "The type of the result is that of','line_number':358,'multiline':False]['text':' the promoted left operand.','line_number':359,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' The behavior is undefined if the right operand is negative, or greater','line_number':361,'multiline':False]['text':' than or equal to the length in bits of the promoted left operand". We','line_number':362,'multiline':False]['text':' mask the right operand of the shift by `shiftMask` (`DigitBits - 1`),','line_number':363,'multiline':False]['text':' which makes `DigitBits - 0` zero.','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':' This shifting produces a value which covers 0 < `s` <= (DigitBits - 1)','line_number':366,'multiline':False]['text':' cases. `s` == DigitBits never happen as we asserted.  Since `sZeroMask`','line_number':367,'multiline':False]['text':' clears the value in the case of `s` == 0, `s` == 0 case is also covered.','line_number':368,'multiline':False]['text':' Multiplies `source` with `factor` and adds `summand` to the result.','line_number':408,'multiline':False]['text':' `result` and `source` may be the same BigInt for inplace modification.','line_number':409,'multiline':False]['text':' Compute this round's multiplication.','line_number':421,'multiline':False]['text':' Add last round's carryovers.','line_number':425,'multiline':False]['text':' Store result and prepare for next round.','line_number':429,'multiline':False]['text':' Current callers don't pass in such large results, but let's be robust.','line_number':438,'multiline':False]['text':' Multiplies `this` with `factor` and adds `summand` to the result.','line_number':447,'multiline':False]['text':' Multiplies `multiplicand` with `multiplier` and adds the result to','line_number':452,'multiline':False]['text':' `accumulator`, starting at `accumulatorIndex` for the least-significant','line_number':453,'multiline':False]['text':' digit.  Callers must ensure that `accumulator`'s digitLength and','line_number':454,'multiline':False]['text':' corresponding digit storage is long enough to hold the result.','line_number':455,'multiline':False]['text':' Add last round's carryovers.','line_number':472,'multiline':False]['text':' Compute this round's multiplication.','line_number':476,'multiline':False]['text':' Store result and prepare for next round.','line_number':481,'multiline':False]['text':' Sanity checks to catch negative zeroes escaping to the wild.','line_number':503,'multiline':False]['text':' Ensure `left` has at least as many digits as `right`.','line_number':527,'multiline':False]['text':' Fast path for the likely-common case of up to a uint64_t of magnitude.','line_number':540,'multiline':False]['text':' Fast path for the likely-common case of up to a uint64_t of magnitude.','line_number':617,'multiline':False]['text':' Divides `x` by `divisor`, returning the result in `quotient` and `remainder`.','line_number':656,'multiline':False]['text':' Mathematically, the contract is:','line_number':657,'multiline':False]['text':'','line_number':658,'multiline':False]['text':'   quotient = (x - remainder) / divisor, with 0 <= remainder < divisor.','line_number':659,'multiline':False]['text':'','line_number':660,'multiline':False]['text':' If `quotient` is an empty handle, an appropriately sized BigInt will be','line_number':661,'multiline':False]['text':' allocated for it; otherwise the caller must ensure that it is big enough.','line_number':662,'multiline':False]['text':' `quotient` can be the same as `x` for an in-place division. `quotient` can','line_number':663,'multiline':False]['text':' also be `Nothing()` if the caller is only interested in the remainder.','line_number':664,'multiline':False]['text':'','line_number':665,'multiline':False]['text':' This function returns false if `quotient` is an empty handle, but allocating','line_number':666,'multiline':False]['text':' the quotient failed.  Otherwise it returns true, indicating success.','line_number':667,'multiline':False]['text':' Adds `summand` onto `this`, starting with `summand`'s 0th digit','line_number':715,'multiline':False]['text':' at `this`'s `startIndex`'th digit. Returns the "carry" (0 or 1).','line_number':716,'multiline':False]['text':' Subtracts `subtrahend` from this, starting with `subtrahend`'s 0th digit','line_number':736,'multiline':False]['text':' at `this`'s `startIndex`-th digit. Returns the "borrow" (0 or 1).','line_number':737,'multiline':False]['text':' Returns whether (factor1 * factor2) > (high << kDigitBits) + low.','line_number':759,'multiline':False]['text':' Always copies the input, even when `shift` == 0.','line_number':786,'multiline':False]['text':' Divides `dividend` by `divisor`, returning the result in `quotient` and','line_number':828,'multiline':False]['text':' `remainder`. Mathematically, the contract is:','line_number':829,'multiline':False]['text':'','line_number':830,'multiline':False]['text':'   quotient = (dividend - remainder) / divisor, with 0 <= remainder < divisor.','line_number':831,'multiline':False]['text':'','line_number':832,'multiline':False]['text':' Both `quotient` and `remainder` are optional, for callers that are only','line_number':833,'multiline':False]['text':' interested in one of them.  See Knuth, Volume 2, section 4.3.1, Algorithm D.','line_number':834,'multiline':False]['text':' Also see the overview of the algorithm by Jan Marthedal Rasmussen over at','line_number':835,'multiline':False]['text':' https://janmr.com/blog/2014/04/basic-multiple-precision-long-division/.','line_number':836,'multiline':False]['text':' Any early error return is detectable by checking the quotient and/or','line_number':844,'multiline':False]['text':' remainder output values.','line_number':845,'multiline':False]['text':' The unusual variable names inside this function are consistent with','line_number':849,'multiline':False]['text':' Knuth's book, as well as with Go's implementation of this algorithm.','line_number':850,'multiline':False]['text':' Maintaining this consistency is probably more useful than trying to','line_number':851,'multiline':False]['text':' come up with more descriptive names for them.','line_number':852,'multiline':False]['text':' The quotient to be computed.','line_number':856,'multiline':False]['text':' In each iteration, `qhatv` holds `divisor` * `current quotient digit`.','line_number':865,'multiline':False]['text':' "v" is the book's name for `divisor`, `qhat` the current quotient digit.','line_number':866,'multiline':False]['text':' D1.','line_number':872,'multiline':False]['text':' Left-shift inputs so that the divisor's MSB is set. This is necessary to','line_number':873,'multiline':False]['text':' prevent the digit-wise divisions (see digitDiv call below) from','line_number':874,'multiline':False]['text':' overflowing (they take a two digits wide input, and return a one digit','line_number':875,'multiline':False]['text':' result).','line_number':876,'multiline':False]['text':' Holds the (continuously updated) remaining part of the dividend, which','line_number':891,'multiline':False]['text':' eventually becomes the remainder.','line_number':892,'multiline':False]['text':' D2.','line_number':900,'multiline':False]['text':' Iterate over the dividend's digit (like the "grade school" algorithm).','line_number':901,'multiline':False]['text':' `vn1` is the divisor's most significant digit.','line_number':902,'multiline':False]['text':' D3.','line_number':905,'multiline':False]['text':' Estimate the current iteration's quotient digit (see Knuth for details).','line_number':906,'multiline':False]['text':' `qhat` is the current quotient digit.','line_number':907,'multiline':False]['text':' `ujn` is the dividend's most significant remaining digit.','line_number':910,'multiline':False]['text':' `rhat` is the current iteration's remainder.','line_number':913,'multiline':False]['text':' Estimate the current quotient digit by dividing the most significant','line_number':915,'multiline':False]['text':' digits of dividend and divisor. The result will not be too small,','line_number':916,'multiline':False]['text':' but could be a bit too large.','line_number':917,'multiline':False]['text':' Decrement the quotient estimate as needed by looking at the next','line_number':920,'multiline':False]['text':' digit, i.e. by testing whether','line_number':921,'multiline':False]['text':' qhat * v_{n-2} > (rhat << DigitBits) + u_{j+n-2}.','line_number':922,'multiline':False]['text':' v[n-1] >= 0, so this tests for overflow.','line_number':929,'multiline':False]['text':' D4.','line_number':936,'multiline':False]['text':' Multiply the divisor with the current quotient digit, and subtract','line_number':937,'multiline':False]['text':' it from the dividend. If there was "borrow", then the quotient digit','line_number':938,'multiline':False]['text':' was one too high, so we must correct it and undo one subtraction of','line_number':939,'multiline':False]['text':' the (shifted) divisor.','line_number':940,'multiline':False]['text':' Helper for Absolute{And,AndNot,Or,Xor}.','line_number':970,'multiline':False]['text':' Performs the given binary `op` on digit pairs of `x` and `y`; when the','line_number':971,'multiline':False]['text':' end of the shorter of the two is reached, `kind` configures how','line_number':972,'multiline':False]['text':' remaining digits are handled.','line_number':973,'multiline':False]['text':' Example:','line_number':974,'multiline':False]['text':'       y:             [ y2 ][ y1 ][ y0 ]','line_number':975,'multiline':False]['text':'       x:       [ x3 ][ x2 ][ x1 ][ x0 ]','line_number':976,'multiline':False]['text':'                   |     |     |     |','line_number':977,'multiline':False]['text':'                (Fill)  (op)  (op)  (op)','line_number':978,'multiline':False]['text':'                   |     |     |     |','line_number':979,'multiline':False]['text':'                   v     v     v     v','line_number':980,'multiline':False]['text':'  result: [  0 ][ x3 ][ r2 ][ r1 ][ r0 ]','line_number':981,'multiline':False]['text':' The addition will overflow into a new digit if all existing digits are','line_number':1047,'multiline':False]['text':' at maximum.','line_number':1048,'multiline':False]['text':' Ignore resultNegative.','line_number':1088,'multiline':False]['text':' Lookup table for the maximum number of bits required per character of a','line_number':1136,'multiline':False]['text':' base-N string representation of a number. To increase accuracy, the array','line_number':1137,'multiline':False]['text':' value is the actual value multiplied by 32. To generate this table:','line_number':1138,'multiline':False]['text':' for (var i = 0; i <= 36; i++) { print(Math.ceil(Math.log2(i) * 32) + ","); }','line_number':1139,'multiline':False]['text':' 0..8','line_number':1141,'multiline':False]['text':' 9..16','line_number':1142,'multiline':False]['text':' 17..24','line_number':1143,'multiline':False]['text':' 25..32','line_number':1144,'multiline':False]['text':' 33..36','line_number':1145,'multiline':False]['text':' Compute (an overapproximation of) the length of the string representation of','line_number':1158,'multiline':False]['text':' a BigInt.  In base B an X-digit number has maximum value:','line_number':1159,'multiline':False]['text':'','line_number':1160,'multiline':False]['text':'   B**X - 1','line_number':1161,'multiline':False]['text':'','line_number':1162,'multiline':False]['text':' We're trying to find N for an N-digit number in base |radix| full','line_number':1163,'multiline':False]['text':' representing a |bitLength|-digit number in base 2, so we have:','line_number':1164,'multiline':False]['text':'','line_number':1165,'multiline':False]['text':'   radix**N - 1 ≥ 2**bitLength - 1','line_number':1166,'multiline':False]['text':'   radix**N ≥ 2**bitLength','line_number':1167,'multiline':False]['text':'   N ≥ log2(2**bitLength) / log2(radix)','line_number':1168,'multiline':False]['text':'   N ≥ bitLength / log2(radix)','line_number':1169,'multiline':False]['text':'','line_number':1170,'multiline':False]['text':' so the smallest N is:','line_number':1171,'multiline':False]['text':'','line_number':1172,'multiline':False]['text':'   N = ⌈bitLength / log2(radix)⌉','line_number':1173,'multiline':False]['text':'','line_number':1174,'multiline':False]['text':' We want to avoid floating-point computations and precompute the logarithm, so','line_number':1175,'multiline':False]['text':' we multiply both sides of the division by |bitsPerCharTableMultiplier|:','line_number':1176,'multiline':False]['text':'','line_number':1177,'multiline':False]['text':'   N = ⌈(bPCTM * bitLength) / (bPCTM * log2(radix))⌉','line_number':1178,'multiline':False]['text':'','line_number':1179,'multiline':False]['text':' and then because |maxBitsPerChar| representing the denominator may have been','line_number':1180,'multiline':False]['text':' rounded *up* -- which could produce an overall under-computation -- we reduce','line_number':1181,'multiline':False]['text':' by one to undo any rounding and conservatively compute:','line_number':1182,'multiline':False]['text':'','line_number':1183,'multiline':False]['text':'   N ≥ ⌈(bPCTM * bitLength) / (maxBitsPerChar - 1)⌉','line_number':1184,'multiline':False]['text':'','line_number':1185,'multiline':False]['text':' Compute the length of the resulting string: divide the bit length of the','line_number':1215,'multiline':False]['text':' BigInt by the number of bits representable per character (rounding up).','line_number':1216,'multiline':False]['text':' Keeps track of how many unprocessed bits there are in |digit|.','line_number':1233,'multiline':False]['text':' Take any leftover bits from the last iteration into account.','line_number':1238,'multiline':False]['text':' Write out the character containing the lowest-order bit of |msd|.','line_number':1253,'multiline':False]['text':'','line_number':1254,'multiline':False]['text':' This character may include leftover bits from the Digit below |msd|.  For','line_number':1255,'multiline':False]['text':' example, if |x === 2n**64n| and |radix == 32|: the preceding loop writes','line_number':1256,'multiline':False]['text':' twelve zeroes for low-order bits 0-59 in |x->digit(0)| (and |x->digit(1)|','line_number':1257,'multiline':False]['text':' on 32-bit); then the highest 4 bits of of |x->digit(0)| (or |x->digit(1)|','line_number':1258,'multiline':False]['text':' on 32-bit) and bit 0 of |x->digit(1)| (|x->digit(2)| on 32-bit) will','line_number':1259,'multiline':False]['text':' comprise the |current == 0b1'0000| computed below for the high-order 'g'','line_number':1260,'multiline':False]['text':' character.','line_number':1261,'multiline':False]['text':' Write out remaining characters represented by |msd|.  (There may be none,','line_number':1266,'multiline':False]['text':' as in the example above.)','line_number':1267,'multiline':False]['text':' `rest` holds the part of the BigInt that we haven't looked at yet.','line_number':1389,'multiline':False]['text':' Not to be confused with "remainder"!','line_number':1390,'multiline':False]['text':' In the first round, divide the input, allocating a new BigInt for','line_number':1393,'multiline':False]['text':' the result == rest; from then on divide the rest in-place.','line_number':1394,'multiline':False]['text':'','line_number':1395,'multiline':False]['text':' FIXME: absoluteDivWithDigitDivisor doesn't','line_number':1396,'multiline':False]['text':' destructivelyTrimHighZeroDigits for in-place divisions, leading to','line_number':1397,'multiline':False]['text':' worse constant factors.  See','line_number':1398,'multiline':False]['text':' https://bugzilla.mozilla.org/show_bug.cgi?id=1510213.','line_number':1399,'multiline':False]['text':' Remove leading zeroes.','line_number':1437,'multiline':False]['text':' Would be better to somehow adopt resultString directly.','line_number':1449,'multiline':False]['text':' The maximum value `radix**charCount - 1` must be represented as a max number','line_number':1519,'multiline':False]['text':' `2**(N * DigitBits) - 1` for `N` digits, so','line_number':1520,'multiline':False]['text':'','line_number':1521,'multiline':False]['text':'   2**(N * DigitBits) - 1 ≥ radix**charcount - 1','line_number':1522,'multiline':False]['text':'   2**(N * DigitBits) ≥ radix**charcount','line_number':1523,'multiline':False]['text':'   N * DigitBits ≥ log2(radix**charcount)','line_number':1524,'multiline':False]['text':'   N * DigitBits ≥ charcount * log2(radix)','line_number':1525,'multiline':False]['text':'   N ≥ ⌈charcount * log2(radix) / DigitBits⌉ (conservatively)','line_number':1526,'multiline':False]['text':'','line_number':1527,'multiline':False]['text':' or in the code's terms (all numbers promoted to exact mathematical values),','line_number':1528,'multiline':False]['text':'','line_number':1529,'multiline':False]['text':'   N ≥ ⌈charcount * bitsPerChar / (DigitBits * bitsPerCharTableMultiplier)⌉','line_number':1530,'multiline':False]['text':'','line_number':1531,'multiline':False]['text':' Note that `N` is computed even more conservatively here because `bitsPerChar`','line_number':1532,'multiline':False]['text':' is rounded up.','line_number':1533,'multiline':False]['text':' Skipping leading zeroes.','line_number':1572,'multiline':False]['text':' BigInt proposal section 7.2','line_number':1616,'multiline':False]['text':' This function is only called from the frontend when parsing BigInts. Parsed','line_number':1626,'multiline':False]['text':' BigInts are stored in the script's data vector and therefore need to be','line_number':1627,'multiline':False]['text':' allocated in the tenured heap.','line_number':1628,'multiline':False]['text':' StringNumericLiteral ::: BinaryIntegerLiteral','line_number':1633,'multiline':False]['text':' StringNumericLiteral ::: HexIntegerLiteral','line_number':1638,'multiline':False]['text':' StringNumericLiteral ::: OctalIntegerLiteral','line_number':1643,'multiline':False]['text':' Skipping leading zeroes.','line_number':1660,'multiline':False]['text':' trim and remove radix selection prefix.','line_number':1671,'multiline':False]['text':' Skip over radix selector.','line_number':1679,'multiline':False]['text':' We construct a BigInt from the double `d` by shifting its mantissa','line_number':1707,'multiline':False]['text':' according to its exponent and mapping the bit pattern onto digits.','line_number':1708,'multiline':False]['text':'','line_number':1709,'multiline':False]['text':'               <----------- bitlength = exponent + 1 ----------->','line_number':1710,'multiline':False]['text':'                <----- 52 ------> <------ trailing zeroes ------>','line_number':1711,'multiline':False]['text':' mantissa:     1yyyyyyyyyyyyyyyyy 0000000000000000000000000000000','line_number':1712,'multiline':False]['text':' digits:    0001xxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx','line_number':1713,'multiline':False]['text':'                <-->          <------>','line_number':1714,'multiline':False]['text':'          msdTopBits          DigitBits','line_number':1715,'multiline':False]['text':'','line_number':1716,'multiline':False]['text':' Add implicit high bit.','line_number':1720,'multiline':False]['text':' 0-indexed.','line_number':1723,'multiline':False]['text':' 0-indexed position of `d`'s most significant bit within the `msd`.','line_number':1725,'multiline':False]['text':' Next digit under construction.','line_number':1728,'multiline':False]['text':' First, build the MSD by shifting the mantissa appropriately.','line_number':1731,'multiline':False]['text':' Fill in digits containing mantissa contributions.','line_number':1744,'multiline':False]['text':' Fill in low-order zeroes.','line_number':1761,'multiline':False]['text':' BigInt proposal section 5.1.2','line_number':1809,'multiline':False]['text':' Step 1 is an assertion checked by the caller.','line_number':1811,'multiline':False]['text':' Step 2.','line_number':1812,'multiline':False]['text':' Step 3.','line_number':1822,'multiline':False]['text':' BigInt proposal section 1.1.7','line_number':1842,'multiline':False]['text':' x + y == x + y','line_number':1846,'multiline':False]['text':' -x + -y == -(x + y)','line_number':1847,'multiline':False]['text':' x + -y == x - y == -(y - x)','line_number':1852,'multiline':False]['text':' -x + y == y - x == -(x - y)','line_number':1853,'multiline':False]['text':' BigInt proposal section 1.1.8','line_number':1866,'multiline':False]['text':' x - (-y) == x + y','line_number':1870,'multiline':False]['text':' (-x) - y == -(x + y)','line_number':1871,'multiline':False]['text':' x - y == -(y - x)','line_number':1875,'multiline':False]['text':' (-x) - (-y) == y - x == -(x - y)','line_number':1876,'multiline':False]['text':' BigInt proposal section 1.1.4','line_number':1889,'multiline':False]['text':' Fast path for the likely-common case of up to a uint64_t of magnitude.','line_number':1900,'multiline':False]['text':' BigInt proposal section 1.1.5','line_number':1926,'multiline':False]['text':' 1. If y is 0n, throw a RangeError exception.','line_number':1928,'multiline':False]['text':' 2. Let quotient be the mathematical value of x divided by y.','line_number':1935,'multiline':False]['text':' 3. Return a BigInt representing quotient rounded towards 0 to the next','line_number':1936,'multiline':False]['text':'    integral value.','line_number':1937,'multiline':False]['text':' BigInt proposal section 1.1.6','line_number':1969,'multiline':False]['text':' 1. If y is 0n, throw a RangeError exception.','line_number':1971,'multiline':False]['text':' 2. If x is 0n, return x.','line_number':1978,'multiline':False]['text':' 3. Let r be the BigInt defined by the mathematical relation r = x - (y ×','line_number':1982,'multiline':False]['text':' q) where q is a BigInt that is negative only if x/y is negative and','line_number':1983,'multiline':False]['text':' positive only if x/y is positive, and whose magnitude is as large as','line_number':1984,'multiline':False]['text':' possible without exceeding the magnitude of the true mathematical','line_number':1985,'multiline':False]['text':' quotient of x and y.','line_number':1986,'multiline':False]['text':' BigInt proposal section 1.1.3','line_number':2020,'multiline':False]['text':' 1. If exponent is < 0, throw a RangeError exception.','line_number':2022,'multiline':False]['text':' 2. If base is 0n and exponent is 0n, return 1n.','line_number':2029,'multiline':False]['text':' 3. Return a BigInt representing the mathematical value of base raised','line_number':2038,'multiline':False]['text':'    to the power exponent.','line_number':2039,'multiline':False]['text':' (-1) ** even_number == 1.','line_number':2041,'multiline':False]['text':' (-1) ** odd_number == -1; 1 ** anything == 1.','line_number':2045,'multiline':False]['text':' For all bases >= 2, very large exponents would lead to unrepresentable','line_number':2049,'multiline':False]['text':' results.','line_number':2050,'multiline':False]['text':' Fast path for (2^m)^n.','line_number':2074,'multiline':False]['text':' Result is negative for odd powers.','line_number':2076,'multiline':False]['text':' Fast path for the likely-common case of up to a uint64_t of magnitude.','line_number':2100,'multiline':False]['text':' Recover |runningSquare| before we restart the loop.','line_number':2116,'multiline':False]['text':' This implicitly sets the result's sign correctly.','line_number':2140,'multiline':False]['text':' For negative numbers, round down if any bit was shifted out (so that e.g.','line_number':2231,'multiline':False]['text':' -5n >> 1n == -3n and not -2n). Check now whether this will happen and','line_number':2232,'multiline':False]['text':' whether it can cause overflow into a new digit. If we allocate the result','line_number':2233,'multiline':False]['text':' large enough up front, it avoids having to do a second allocation later.','line_number':2234,'multiline':False]['text':' If bits_shift is non-zero, it frees up bits, preventing overflow.','line_number':2249,'multiline':False]['text':' Overflow cannot happen if the most significant digit has unset bits.','line_number':2251,'multiline':False]['text':' If roundingCanOverflow, manually initialize the overflow digit.','line_number':2266,'multiline':False]['text':' Since the result is negative, rounding down means adding one to','line_number':2284,'multiline':False]['text':' its absolute value. This cannot overflow.  TODO: modify the result in','line_number':2285,'multiline':False]['text':' place.','line_number':2286,'multiline':False]['text':' BigInt proposal section 1.1.9. BigInt::leftShift ( x, y )','line_number':2292,'multiline':False]['text':' BigInt proposal section 1.1.10. BigInt::signedRightShift ( x, y )','line_number':2300,'multiline':False]['text':' BigInt proposal section 1.1.17. BigInt::bitwiseAND ( x, y )','line_number':2308,'multiline':False]['text':' (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))','line_number':2323,'multiline':False]['text':' == -(((x-1) | (y-1)) + 1)','line_number':2324,'multiline':False]['text':' x & (-y) == x & ~(y-1) == x & ~(y-1)','line_number':2350,'multiline':False]['text':' BigInt proposal section 1.1.18. BigInt::bitwiseXOR ( x, y )','line_number':2354,'multiline':False]['text':' (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)','line_number':2369,'multiline':False]['text':' x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)','line_number':2385,'multiline':False]['text':' BigInt proposal section 1.1.19. BigInt::bitwiseOR ( x, y )','line_number':2398,'multiline':False]['text':' (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))','line_number':2415,'multiline':False]['text':' == -(((x-1) & (y-1)) + 1)','line_number':2416,'multiline':False]['text':' x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) &~ x) + 1)','line_number':2436,'multiline':False]['text':' BigInt proposal section 1.1.2. BigInt::bitwiseNOT ( x )','line_number':2448,'multiline':False]['text':' ~(-x) == ~(~(x-1)) == x-1','line_number':2451,'multiline':False]['text':' ~x == -x-1 == -(x+1)','line_number':2454,'multiline':False]['text':' Return the two's complement if x is negative.','line_number':2469,'multiline':False]['text':' Compute `2**bits - (x & (2**bits - 1))`.  Used when treating BigInt values as','line_number':2547,'multiline':False]['text':' arbitrary-precision two's complement signed integers.','line_number':2548,'multiline':False]['text':' Process all digits except the MSD.','line_number':2567,'multiline':False]['text':' Take digits from `x` until its length is exhausted.','line_number':2570,'multiline':False]['text':' Then simulate leading zeroes in `x` as needed.','line_number':2578,'multiline':False]['text':' The MSD might contain extra bits that we don't want.','line_number':2586,'multiline':False]['text':' If all subtracted bits were zero, we have to get rid of the','line_number':2601,'multiline':False]['text':' materialized minuendMSD again.','line_number':2602,'multiline':False]['text':' When truncating a negative number, simulate two's complement.','line_number':2619,'multiline':False]['text':' Eagerly trim high zero digits.','line_number':2651,'multiline':False]['text':' All the cases above were the trivial cases: truncating zero, or to zero','line_number':2713,'multiline':False]['text':' bits, or to more bits than are in `x` (so we return `x` directly), or we','line_number':2714,'multiline':False]['text':' already have the 64-bit fast path.  If we get here, follow the textbook','line_number':2715,'multiline':False]['text':' algorithm from the specification.','line_number':2716,'multiline':False]['text':' BigInt.asIntN step 3:  Let `mod` be `x` modulo `2**bits`.','line_number':2718,'multiline':False]['text':' Step 4: If `mod >= 2**(bits - 1)`, return `mod - 2**bits`; otherwise,','line_number':2724,'multiline':False]['text':' return `mod`.','line_number':2725,'multiline':False]['text':' BigInt proposal section 7.3','line_number':2981,'multiline':False]['text':' Step 1.','line_number':2985,'multiline':False]['text':' Step 2.','line_number':2990,'multiline':False]['text':' Fast path for the likely-common case of up to a uint64_t of magnitude not','line_number':3045,'multiline':False]['text':' exceeding integral precision in IEEE-754.  (Note that we *depend* on this','line_number':3046,'multiline':False]['text':' optimization being performed further down.)','line_number':3047,'multiline':False]['text':' `2**ExponentBias` is the largest power of two in a finite IEEE-754','line_number':3061,'multiline':False]['text':' double.  If this bigint has a greater power of two, it'll round to','line_number':3062,'multiline':False]['text':' infinity.','line_number':3063,'multiline':False]['text':' Otherwise munge the most significant bits of the number into proper','line_number':3070,'multiline':False]['text':' position in an IEEE-754 double and go to town.','line_number':3071,'multiline':False]['text':' Omit the most significant bit: the IEEE-754 format includes this bit','line_number':3073,'multiline':False]['text':' implicitly for all double-precision integers.','line_number':3074,'multiline':False]['text':' We compute the final mantissa of the result, shifted upward to the top of','line_number':3078,'multiline':False]['text':' the `uint64_t` space -- plus an extra bit to detect potential rounding.','line_number':3079,'multiline':False]['text':' Shift `msd`'s contributed bits upward to remove high-order zeroes and the','line_number':3082,'multiline':False]['text':' highest set bit (which is implicit in IEEE-754 integral values so must be','line_number':3083,'multiline':False]['text':' removed) and to add low-order zeroes.  (Lower-order garbage bits are','line_number':3084,'multiline':False]['text':' discarded when `shiftedMantissa` is converted to a real mantissa.)','line_number':3085,'multiline':False]['text':' If the extra bit is set, correctly rounding the result may require','line_number':3089,'multiline':False]['text':' examining all lower-order bits.  Also compute 1) the index of the Digit','line_number':3090,'multiline':False]['text':' storing the extra bit, and 2) whether bits beneath the extra bit in that','line_number':3091,'multiline':False]['text':' Digit are nonzero so we can round if needed.','line_number':3092,'multiline':False]['text':' Add shifted bits to `shiftedMantissa` until we have a complete mantissa and','line_number':3096,'multiline':False]['text':' an extra bit.','line_number':3097,'multiline':False]['text':'       DigitBits=64 (necessarily for msdIncludedBits ≥ SignificandWidth+1;','line_number':3099,'multiline':False]['text':'            |        C++ compiler range analysis ought eliminate this','line_number':3100,'multiline':False]['text':'            |        check on 32-bit)','line_number':3101,'multiline':False]['text':'   _________|__________','line_number':3102,'multiline':False]['text':'  /                    |','line_number':3103,'multiline':False]['text':'        msdIncludedBits','line_number':3104,'multiline':False]['text':'      ________|________','line_number':3105,'multiline':False]['text':'     /                 |','line_number':3106,'multiline':False]['text':' [001···················|','line_number':3107,'multiline':False]['text':'  \_/\_____________/\__|','line_number':3108,'multiline':False]['text':'   |            |    |','line_number':3109,'multiline':False]['text':' msdIgnoredBits |   bits below the extra bit (may be no bits)','line_number':3110,'multiline':False]['text':'      BitsNeededForShiftedMantissa=SignificandWidth+1','line_number':3111,'multiline':False]['text':'  msdIncludedBits + DigitBits','line_number':3129,'multiline':False]['text':'      ________|_________','line_number':3130,'multiline':False]['text':'     /                  |','line_number':3131,'multiline':False]['text':'             DigitBits=64','line_number':3132,'multiline':False]['text':' msdIncludedBits    |','line_number':3133,'multiline':False]['text':'      __|___   _____|___','line_number':3134,'multiline':False]['text':'     /      \ /         |','line_number':3135,'multiline':False]['text':' [001········|···········|','line_number':3136,'multiline':False]['text':'  \_/\_____________/\___|','line_number':3137,'multiline':False]['text':'   |            |     |','line_number':3138,'multiline':False]['text':' msdIgnoredBits | bits below the extra bit (always more than one)','line_number':3139,'multiline':False]['text':'                |','line_number':3140,'multiline':False]['text':'      BitsNeededForShiftedMantissa=SignificandWidth+1','line_number':3141,'multiline':False]['text':'  msdIncludedBits + DigitBits','line_number':3153,'multiline':False]['text':'      ______|________','line_number':3154,'multiline':False]['text':'     /               |','line_number':3155,'multiline':False]['text':'             DigitBits=32','line_number':3156,'multiline':False]['text':' msdIncludedBits |','line_number':3157,'multiline':False]['text':'      _|_   _____|___','line_number':3158,'multiline':False]['text':'     /   \ /         |','line_number':3159,'multiline':False]['text':' [001·····|···········|','line_number':3160,'multiline':False]['text':'     \___________/\__|','line_number':3161,'multiline':False]['text':'          |        |','line_number':3162,'multiline':False]['text':'          |      bits below the extra bit (may be no bits)','line_number':3163,'multiline':False]['text':'      BitsNeededForShiftedMantissa=SignificandWidth+1','line_number':3164,'multiline':False]['text':'    msdIncludedBits + DigitBits + DigitBits','line_number':3183,'multiline':False]['text':'      ____________|______________','line_number':3184,'multiline':False]['text':'     /                           |','line_number':3185,'multiline':False]['text':'             DigitBits=32','line_number':3186,'multiline':False]['text':' msdIncludedBits |     DigitBits=32','line_number':3187,'multiline':False]['text':'      _|_   _____|___   ____|____','line_number':3188,'multiline':False]['text':'     /   \ /         \ /         |','line_number':3189,'multiline':False]['text':' [001·····|···········|···········|','line_number':3190,'multiline':False]['text':'     \____________________/\_____|','line_number':3191,'multiline':False]['text':'               |               |','line_number':3192,'multiline':False]['text':'               |      bits below the extra bit','line_number':3193,'multiline':False]['text':'      BitsNeededForShiftedMantissa=SignificandWidth+1','line_number':3194,'multiline':False]['text':' Shift out the mantissa bits and the extra bit.','line_number':3200,'multiline':False]['text':' The extra bit must be set for rounding to change the mantissa.','line_number':3211,'multiline':False]['text':' If the lowest mantissa bit is set, it doesn't matter what lower bits','line_number':3215,'multiline':False]['text':' are: nearest-even rounds up regardless.','line_number':3216,'multiline':False]['text':' If the lowest mantissa bit is unset, *all* lower bits are relevant.','line_number':3219,'multiline':False]['text':' All-zero bits below the extra bit situates `x` halfway between two','line_number':3220,'multiline':False]['text':' values, and the nearest *even* value lies downward.  But if any bit','line_number':3221,'multiline':False]['text':' below the extra bit is set, `x` is closer to the rounded-up value.','line_number':3222,'multiline':False]['text':' Add one to the significand bits.  If they overflow, the exponent must','line_number':3235,'multiline':False]['text':' also be increased.  If *that* overflows, return the correct infinity.','line_number':3236,'multiline':False]['text':' Sanity checks to catch negative zeroes escaping to the wild.','line_number':3256,'multiline':False]['text':' ±Infinity exceeds a finite bigint value.','line_number':3296,'multiline':False]['text':' Handle `x === 0n` and `y == 0` special cases.','line_number':3301,'multiline':False]['text':' -0 and +0 are treated identically.','line_number':3304,'multiline':False]['text':' Nonzero `x` and `y` with different signs are trivially compared.','line_number':3316,'multiline':False]['text':' `x` and `y` are same-signed.  Determine which has greater magnitude,','line_number':3322,'multiline':False]['text':' then combine that with the signedness just computed to reach a result.','line_number':3323,'multiline':False]['text':' `y` is a nonzero fraction of magnitude less than 1.','line_number':3326,'multiline':False]['text':' Differing bit-length makes for a simple comparison.','line_number':3337,'multiline':False]['text':' Compare the high 64 bits of both numbers.  (Lower-order bits not present','line_number':3346,'multiline':False]['text':' in either number are zeroed.)  Either that distinguishes `x` and `y`, or','line_number':3347,'multiline':False]['text':' `x` and `y` differ only if a subsequent nonzero bit in `x` means `x` has','line_number':3348,'multiline':False]['text':' larger magnitude.','line_number':3349,'multiline':False]['text':' Readd the implicit-one bit when constructing `y`'s high 64 bits.','line_number':3358,'multiline':False]['text':' Cons up `x`'s high 64 bits, backfilling zeroes for binary fractions of 1','line_number':3363,'multiline':False]['text':' if `x` doesn't have 64 bits.','line_number':3364,'multiline':False]['text':' At this point we no longer need to look at the most significant digit.','line_number':3368,'multiline':False]['text':' The high 64 bits from `x` will probably not align to a digit boundary.','line_number':3371,'multiline':False]['text':' `xHasNonZeroLeftoverBits` will be set to true if any remaining','line_number':3372,'multiline':False]['text':' least-significant bit from the digit holding xHigh64Bits's','line_number':3373,'multiline':False]['text':' least-significant bit is nonzero.','line_number':3374,'multiline':False]['text':' If high bits are unequal, the larger one has greater magnitude.','line_number':3399,'multiline':False]['text':' Otherwise the top 64 bits of both are equal.  If the values differ, a','line_number':3407,'multiline':False]['text':' lower-order bit in `x` is nonzero and `x` has greater magnitude than','line_number':3408,'multiline':False]['text':' `y`; otherwise `x == y`.','line_number':3409,'multiline':False]['text':' BigInt proposal section 3.2.5','line_number':3439,'multiline':False]['text':' Step 1.','line_number':3442,'multiline':False]['text':' Steps 2-5 (not applicable).','line_number':3447,'multiline':False]['text':' Steps 6-7.','line_number':3449,'multiline':False]['text':' Steps 8-9 (not applicable).','line_number':3455,'multiline':False]['text':' Steps 10-11.','line_number':3457,'multiline':False]['text':' Step 12.','line_number':3466,'multiline':False]['text':' Step 13.','line_number':3471,'multiline':False]['text':' BigInt proposal section 1.1.12. BigInt::lessThan ( x, y )','line_number':3475,'multiline':False]['text':' Punt on doing generic toString without GC.','line_number':3564,'multiline':False]['text':' StringNumericLiteral ::: StrDecimalLiteral, but without Infinity, decimal','line_number':3598,'multiline':False]['text':' points, or exponents.  Note that the raw '+' or '-' cases fall through','line_number':3599,'multiline':False]['text':' because the string is too short, and eventually signal a parse error.','line_number':3600,'multiline':False]['text':' Called from BigInt constructor.','line_number':3620,'multiline':False]['text':' A nullptr result can indicate either a parse error or out-of-memory.','line_number':3641,'multiline':False]['text':' Called from parser with already trimmed and validated token.','line_number':3649,'multiline':False]['text':' Check a already validated numeric literal for a non-zero value. Used by','line_number':3662,'multiline':False]['text':' the parsers node folder in deferred mode.','line_number':3663,'multiline':False]['text':' As the maximum source code size is currently UINT32_MAX code units','line_number':3736,'multiline':False]['text':' (see BytecodeCompiler::checkLength), any bigint literal's length in','line_number':3737,'multiline':False]['text':' word-sized digits will be less than UINT32_MAX as well.  That could','line_number':3738,'multiline':False]['text':' change or FoldConstants could start creating these though, so leave','line_number':3739,'multiline':False]['text':' this as a release-enabled assert.','line_number':3740,'multiline':False]['text':' Public API','line_number':3780,'multiline':False]['text':' isNegative = ','line_number':3817,'multiline':True]['text':' isNegative = ','line_number':3822,'multiline':True]['text':' isNegative = ','line_number':3827,'multiline':True]['text':' Semi-public template details','line_number':3883,'multiline':False]