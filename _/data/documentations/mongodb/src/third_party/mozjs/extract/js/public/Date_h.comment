['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]['text':' JavaScript date/time computation and creation functions. ','line_number':6,'multiline':True]['text':'
 * Dates in JavaScript are defined by IEEE-754 double precision numbers from
 * the set:
 *
 *   { t ∈ ℕ : -8.64e15 ≤ t ≤ +8.64e15 } ∪ { NaN }
 *
 * The single NaN value represents any invalid-date value.  All other values
 * represent idealized durations in milliseconds since the UTC epoch.  (Leap
 * seconds are ignored; leap days are not.)  +0 is the only zero in this set.
 * The limit represented by 8.64e15 milliseconds is 100 million days either
 * side of 00:00 January 1, 1970 UTC.
 *
 * Dates in the above set are represented by the |ClippedTime| class.  The
 * double type is a superset of the above set, so it *may* (but need not)
 * represent a date.  Use ECMAScript's |TimeClip| method to produce a date from
 * a double.
 *
 * Date *objects* are simply wrappers around |TimeClip|'d numbers, with a bunch
 * of accessor methods to the various aspects of the represented date.
 ','line_number':11,'multiline':True]['text':' mozilla::{IsFinite,IsNaN}, mozilla::UnspecifiedNaN','line_number':32,'multiline':False]['text':' mozilla::Abs','line_number':33,'multiline':False]['text':' JS::ToInteger','line_number':35,'multiline':False]['text':' JS::CanonicalizeNaN, JS::DoubleValue, JS::Value','line_number':37,'multiline':False]['text':'*
 * Re-query the system to determine the current time zone adjustment from UTC,
 * including any component due to DST.  If the time zone has changed, this will
 * cause all Date object non-UTC methods and formatting functions to produce
 * appropriately adjusted results.
 *
 * Left to its own devices, SpiderMonkey itself may occasionally try to detect
 * system time changes.  However, no particular frequency of checking is
 * guaranteed.  Embedders unable to accept occasional inaccuracies should call
 * this method in response to system time changes, or immediately before
 * operations requiring instantaneous correctness, to guarantee correct
 * behavior.
 ','line_number':41,'multiline':True]['text':'
 * |ClippedTime| represents the limited subset of dates/times described above.
 *
 * An invalid date/time may be created through the |ClippedTime::invalid|
 * method.  Otherwise, a |ClippedTime| may be created using the |TimeClip|
 * method.
 *
 * In typical use, the user might wish to manipulate a timestamp.  The user
 * performs a series of operations on it, but the final value might not be a
 * date as defined above -- it could have overflowed, acquired a fractional
 * component, &c.  So as a *final* step, the user passes that value through
 * |TimeClip| to produce a number restricted to JavaScript's date range.
 *
 * APIs that accept a JavaScript date value thus accept a |ClippedTime|, not a
 * double.  This ensures that date/time APIs will only ever receive acceptable
 * JavaScript dates.  This also forces users to perform any desired clipping,
 * as only the user knows what behavior is desired when clipping occurs.
 ','line_number':59,'multiline':True]['text':' Create an invalid date.','line_number':84,'multiline':False]['text':' Create an invalid date/time, more explicitly; prefer this to the default','line_number':87,'multiline':False]['text':' constructor.','line_number':88,'multiline':False]['text':' ES6 20.3.1.15.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' Clip a double to JavaScript's date range (or to an invalid date) using the','line_number':98,'multiline':False]['text':' ECMAScript TimeClip algorithm.','line_number':99,'multiline':False]['text':' Steps 1-2.','line_number':101,'multiline':False]['text':' Step 3.','line_number':107,'multiline':False]['text':' Produce a double Value from the given time.  Because times may be NaN,','line_number':111,'multiline':False]['text':' prefer using this to manual canonicalization.','line_number':112,'multiline':False]['text':' Create a new Date object whose [[DateValue]] internal slot contains the','line_number':117,'multiline':False]['text':' clipped |time|.  (Users who must represent times outside that range must use','line_number':118,'multiline':False]['text':' another representation.)','line_number':119,'multiline':False]['text':'*
 * Create a new Date object for a year/month/day-of-month/hour/minute/second.
 *
 * The created date is initialized with the time value
 *
 *   TimeClip(UTC(MakeDate(MakeDay(year, mon, mday),
 *                MakeTime(hour, min, sec, 0.0))))
 *
 * where each function/operation is as specified in ECMAScript.
 ','line_number':122,'multiline':True]['text':'*
 * On success, returns true, setting |*isDate| to true if |obj| is a Date
 * object or a wrapper around one, or to false if not.  Returns false on
 * failure.
 *
 * This method returns true with |*isDate == false| when passed an ES6 proxy
 * whose target is a Date, or when passed a revoked proxy.
 ','line_number':136,'multiline':True]['text':' Year is a year, month is 0-11, day is 1-based.  The return value is a number','line_number':147,'multiline':False]['text':' of milliseconds since the epoch.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' Consistent with the MakeDate algorithm defined in ECMAScript, this value is','line_number':150,'multiline':False]['text':' *not* clipped!  Use JS::TimeClip if you need a clipped date.','line_number':151,'multiline':False]['text':' Year is a year, month is 0-11, day is 1-based, and time is in milliseconds.','line_number':154,'multiline':False]['text':' The return value is a number of milliseconds since the epoch.','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' Consistent with the MakeDate algorithm defined in ECMAScript, this value is','line_number':157,'multiline':False]['text':' *not* clipped!  Use JS::TimeClip if you need a clipped date.','line_number':158,'multiline':False]['text':' Takes an integer number of milliseconds since the epoch and returns the','line_number':162,'multiline':False]['text':' year.  Can return NaN, and will do so if NaN is passed in.','line_number':163,'multiline':False]['text':' Takes an integer number of milliseconds since the epoch and returns the','line_number':166,'multiline':False]['text':' month (0-11).  Can return NaN, and will do so if NaN is passed in.','line_number':167,'multiline':False]['text':' Takes an integer number of milliseconds since the epoch and returns the','line_number':170,'multiline':False]['text':' day (1-based).  Can return NaN, and will do so if NaN is passed in.','line_number':171,'multiline':False]['text':' Takes an integer year and returns the number of days from epoch to the given','line_number':174,'multiline':False]['text':' year.','line_number':175,'multiline':False]['text':' NOTE: The calculation performed by this function is literally that given in','line_number':176,'multiline':False]['text':' the ECMAScript specification.  Nonfinite years, years containing fractional','line_number':177,'multiline':False]['text':' components, and years outside ECMAScript's date range are not handled with','line_number':178,'multiline':False]['text':' any particular intelligence.  Garbage in, garbage out.','line_number':179,'multiline':False]['text':' Takes an integer number of milliseconds since the epoch and an integer year,','line_number':182,'multiline':False]['text':' returns the number of days in that year. If |time| is nonfinite, returns NaN.','line_number':183,'multiline':False]['text':' Otherwise |time| *must* correspond to a time within the valid year |year|.','line_number':184,'multiline':False]['text':' This should usually be ensured by computing |year| as','line_number':185,'multiline':False]['text':' |JS::DayFromYear(time)|.','line_number':186,'multiline':False]['text':' The callback will be a wrapper function that accepts a single double (the','line_number':189,'multiline':False]['text':' time to clamp and jitter.) Inside the JS Engine, other parameters that may be','line_number':190,'multiline':False]['text':' needed are all constant, so they are handled inside the wrapper function','line_number':191,'multiline':False]['text':' Set a callback into the toolkit/components/resistfingerprinting function that','line_number':194,'multiline':False]['text':' will centralize time resolution and jitter into one place.','line_number':195,'multiline':False]['text':' Sets the time resolution for fingerprinting protection, and whether jitter','line_number':199,'multiline':False]['text':' should occur. If resolution is set to zero, then no rounding or jitter will','line_number':200,'multiline':False]['text':' occur. This is used if the callback above is not specified.','line_number':201,'multiline':False]['text':' namespace JS','line_number':204,'multiline':False]['text':' js_Date_h ','line_number':206,'multiline':True]