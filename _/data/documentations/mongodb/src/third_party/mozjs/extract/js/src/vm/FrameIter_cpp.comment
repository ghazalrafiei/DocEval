['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT, MOZ_CRASH','line_number':9,'multiline':False]['text':' mozilla::MaybeOneOf','line_number':10,'multiline':False]['text':' size_t','line_number':12,'multiline':False]['text':' uint8_t, uint32_t','line_number':13,'multiline':False]['text':' getenv','line_number':14,'multiline':False]['text':' js::jit::BaselineFrame','line_number':16,'multiline':False]['text':' js::jit::EnsureBareExitFrame','line_number':17,'multiline':False]['text':' js::jit::{FrameType,InlineFrameIterator,JSJitFrameIter,MaybeReadFallback,SnapshotIterator}','line_number':18,'multiline':False]['text':' JS::AutoSuppressGCAnalysis','line_number':19,'multiline':False]['text':' JSSubsumesOp','line_number':20,'multiline':False]['text':' JS::Rooted','line_number':21,'multiline':False]['text':' js::Activation{,Iterator}','line_number':22,'multiline':False]['text':' js::CallObject','line_number':23,'multiline':False]['text':' js::jit::JitActivation','line_number':24,'multiline':False]['text':' JSContext','line_number':25,'multiline':False]['text':' JSFunction','line_number':26,'multiline':False]['text':' js::PCToLineNumber, JSScript, js::ScriptSource','line_number':27,'multiline':False]['text':' JSRuntime','line_number':28,'multiline':False]['text':' js::{AbstractFramePtr,InterpreterFrame,MaybeCheckAliasing}','line_number':29,'multiline':False]['text':' js::wasm::WasmFrameIter','line_number':30,'multiline':False]['text':' js::wasm::Instance','line_number':31,'multiline':False]['text':' js::jit::JSJitFrameIter::baselineFrame{,NumValueSlots}','line_number':33,'multiline':False]['text':' js::AbstractFramePtr::*','line_number':34,'multiline':False]['text':' namespace JS','line_number':38,'multiline':False]['text':' namespace js','line_number':42,'multiline':False]['text':' Stop at the first scripted frame.','line_number':100,'multiline':False]['text':' Transition from js jit frames to wasm frames: we're on the','line_number':156,'multiline':False]['text':' wasm-to-jit fast path. The current stack layout is as follows:','line_number':157,'multiline':False]['text':' (stack grows downward)','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':' [--------------------]','line_number':160,'multiline':False]['text':' [WASM FUNC           ]','line_number':161,'multiline':False]['text':' [WASM JIT EXIT FRAME ]','line_number':162,'multiline':False]['text':' [JIT WASM ENTRY FRAME] <-- we're here.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' So prevFP points to the wasm jit exit FP, maintaing the invariant in','line_number':165,'multiline':False]['text':' WasmFrameIter that the first frame is an exit frame and can be','line_number':166,'multiline':False]['text':' popped.','line_number':167,'multiline':False]['text':' Transition from wasm frames to jit frames: we're on the','line_number':187,'multiline':False]['text':' jit-to-wasm fast path. The current stack layout is as follows:','line_number':188,'multiline':False]['text':' (stack grows downward)','line_number':189,'multiline':False]['text':'','line_number':190,'multiline':False]['text':' [--------------------]','line_number':191,'multiline':False]['text':' [JIT FRAME           ]','line_number':192,'multiline':False]['text':' [WASM JIT ENTRY FRAME] <-- we're here','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':' The wasm iterator has saved the previous jit frame pointer for us.','line_number':195,'multiline':False]['text':' Unwind the frame by updating packedExitFP. This is necessary','line_number':225,'multiline':False]['text':' so that (1) debugger exception unwind and leave frame hooks','line_number':226,'multiline':False]['text':' don't see this frame when they use ScriptFrameIter, and (2)','line_number':227,'multiline':False]['text':' ScriptFrameIter does not crash when accessing an IonScript','line_number':228,'multiline':False]['text':' that's destroyed by the ionScript->decref call.','line_number':229,'multiline':False]['text':'***************************************************************************','line_number':248,'multiline':True]['text':' If the caller supplied principals, only show frames which are','line_number':256,'multiline':False]['text':' subsumed (of the same origin or of an origin accessible) by these','line_number':257,'multiline':False]['text':' principals.','line_number':258,'multiline':False]['text':' It's possible to have an JitActivation with no scripted','line_number':302,'multiline':False]['text':' frames, for instance if we hit an over-recursion during','line_number':303,'multiline':False]['text':' bailout.','line_number':304,'multiline':False]['text':' If we OSR'ed into JIT code, skip the interpreter frame so that','line_number':318,'multiline':False]['text':' the same frame is not reported twice.','line_number':319,'multiline':False]['text':' No principals so we can see all frames.','line_number':353,'multiline':False]['text':' If we're not allowed to see this frame, call operator++ to skip this (and','line_number':363,'multiline':False]['text':' other) cross-origin frames.','line_number':364,'multiline':False]['text':' Look for the current frame.','line_number':728,'multiline':False]['text':' Update the pc.','line_number':734,'multiline':False]['text':' activation's exitFP may be invalid, so create a new','line_number':744,'multiline':False]['text':' activation iterator.','line_number':745,'multiline':False]['text':' Look for the current frame.','line_number':751,'multiline':False]['text':' Update the pc.','line_number':758,'multiline':False]['text':' Relookup the current frame, updating the bytecode offset in the process.','line_number':773,'multiline':False]['text':' Use the calleeTemplate to rule out a match without needing to invalidate to','line_number':818,'multiline':False]['text':' find the actual callee. The real callee my be a clone of the template which','line_number':819,'multiline':False]['text':' should *not* be considered a match.','line_number':820,'multiline':False]['text':' The calleeTemplate for a callee will always have the same BaseScript. If','line_number':832,'multiline':False]['text':' the script clones do not use the same script, they also have a different','line_number':833,'multiline':False]['text':' group and Ion will not inline them interchangeably.','line_number':834,'multiline':False]['text':'','line_number':835,'multiline':False]['text':' See: js::jit::InlineFrameIterator::findNextFrame(),','line_number':836,'multiline':False]['text':'      js::CloneFunctionAndScript()','line_number':837,'multiline':False]['text':' See JSFunction::needsFunctionEnvironmentObjects().','line_number':900,'multiline':False]