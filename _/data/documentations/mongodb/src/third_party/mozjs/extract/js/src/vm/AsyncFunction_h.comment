['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' AsyncFunctionResolveKind','line_number':11,'multiline':False]['text':' [SMDOC] Async functions','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' # Implementation','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' Async functions are implemented based on generators, in terms of','line_number':21,'multiline':False]['text':' suspend/resume.','line_number':22,'multiline':False]['text':' Instead of returning the generator object itself, they return the async','line_number':23,'multiline':False]['text':' function's result promise to the caller.','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' The async function's result promise is stored in the generator object','line_number':26,'multiline':False]['text':' (js::AsyncFunctionGeneratorObject) and retrieved from it whenever the','line_number':27,'multiline':False]['text':' execution needs it.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' # Start','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' When an async function is called, it synchronously runs until the first','line_number':33,'multiline':False]['text':' `await` or `return`.  This works just like a normal function.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' This corresponds to steps 1-3, 5-9 of AsyncFunctionStart.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' AsyncFunctionStart ( promiseCapability, asyncFunctionBody )','line_number':38,'multiline':False]['text':' https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'   1. Let runningContext be the running execution context.','line_number':41,'multiline':False]['text':'   2. Let asyncContext be a copy of runningContext.','line_number':42,'multiline':False]['text':'   3. NOTE: Copying the execution state is required for the step below to','line_number':43,'multiline':False]['text':'      resume its execution. It is ill-defined to resume a currently executing','line_number':44,'multiline':False]['text':'      context.','line_number':45,'multiline':False]['text':'   ...','line_number':46,'multiline':False]['text':'   5. Push asyncContext onto the execution context stack; asyncContext is now','line_number':47,'multiline':False]['text':'      the running execution context.','line_number':48,'multiline':False]['text':'   6. Resume the suspended evaluation of asyncContext. Let result be the value','line_number':49,'multiline':False]['text':'      returned by the resumed computation.','line_number':50,'multiline':False]['text':'   7. Assert: When we return here, asyncContext has already been removed from','line_number':51,'multiline':False]['text':'      the execution context stack and runningContext is the currently running','line_number':52,'multiline':False]['text':'      execution context.','line_number':53,'multiline':False]['text':'   8. Assert: result is a normal completion with a value of undefined. The','line_number':54,'multiline':False]['text':'      possible sources of completion values are Await or, if the async','line_number':55,'multiline':False]['text':'      function doesn't await anything, step 4.g above.','line_number':56,'multiline':False]['text':'   9. Return.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' Unlike generators, async functions don't contain JSOp::InitialYield and','line_number':59,'multiline':False]['text':' don't suspend immediately when call.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' # Return','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' Explicit/implicit `return` is implemented with the following bytecode','line_number':65,'multiline':False]['text':' sequence:','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' ```','line_number':68,'multiline':False]['text':'   GetAliasedVar ".generator"      # VALUE .generator','line_number':69,'multiline':False]['text':'   AsyncResolve 0                  # PROMISE','line_number':70,'multiline':False]['text':'   SetRval                         #','line_number':71,'multiline':False]['text':'   GetAliasedVar ".generator"      # .generator','line_number':72,'multiline':False]['text':'   FinalYieldRval                  #','line_number':73,'multiline':False]['text':' ```','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' JSOp::Resolve (js::AsyncFunctionResolve) resolves the current async','line_number':76,'multiline':False]['text':' function's result promise. Then this sets it as the function's return value.','line_number':77,'multiline':False]['text':' (The return value is observable if the caller is still on the stack--','line_number':78,'multiline':False]['text':' that is, the async function is returning without ever awaiting.','line_number':79,'multiline':False]['text':' Otherwise we're returning to the microtask loop, which ignores the','line_number':80,'multiline':False]['text':' return value.)','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' This corresponds to AsyncFunctionStart steps 4.a-e. 4.g.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':'   4. Set the code evaluation state of asyncContext such that when evaluation','line_number':85,'multiline':False]['text':'      is resumed for that execution context the following steps will be','line_number':86,'multiline':False]['text':'      performed:','line_number':87,'multiline':False]['text':'     a. Let result be the result of evaluating asyncFunctionBody.','line_number':88,'multiline':False]['text':'     b. Assert: If we return here, the async function either threw an','line_number':89,'multiline':False]['text':'        exception or performed an implicit or explicit return; all awaiting','line_number':90,'multiline':False]['text':'        is done.','line_number':91,'multiline':False]['text':'     c. Remove asyncContext from the execution context stack and restore the','line_number':92,'multiline':False]['text':'        execution context that is at the top of the execution context stack as','line_number':93,'multiline':False]['text':'        the running execution context.','line_number':94,'multiline':False]['text':'     d. If result.[[Type]] is normal, then','line_number':95,'multiline':False]['text':'       i. Perform','line_number':96,'multiline':False]['text':'          ! Call(promiseCapability.[[Resolve]], undefined, «undefined»).','line_number':97,'multiline':False]['text':'     e. Else if result.[[Type]] is return, then','line_number':98,'multiline':False]['text':'       i. Perform','line_number':99,'multiline':False]['text':'          ! Call(promiseCapability.[[Resolve]], undefined,','line_number':100,'multiline':False]['text':'                 «result.[[Value]]»).','line_number':101,'multiline':False]['text':'     ...','line_number':102,'multiline':False]['text':'     g. Return.','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' # Throw','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' The body part of an async function is enclosed by an implicit try-catch','line_number':108,'multiline':False]['text':' block, to catch `throw` completion of the function body.','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' If an exception is thrown by the function body, the catch block catches it','line_number':111,'multiline':False]['text':' and rejects the async function's result promise.','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':' If there's an expression in parameters, the entire parameters part is also','line_number':114,'multiline':False]['text':' enclosed by a separate implicit try-catch block.','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' ```','line_number':117,'multiline':False]['text':'   Try                             #','line_number':118,'multiline':False]['text':'   (parameter expressions here)    #','line_number':119,'multiline':False]['text':'   Goto BODY                       #','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':'   JumpTarget from try             #','line_number':122,'multiline':False]['text':'   Exception                       # EXCEPTION','line_number':123,'multiline':False]['text':'   GetAliasedVar ".generator"      # EXCEPTION .generator','line_number':124,'multiline':False]['text':'   AsyncResolve 1                  # PROMISE','line_number':125,'multiline':False]['text':'   SetRval                         #','line_number':126,'multiline':False]['text':'   GetAliasedVar ".generator"      # .generator','line_number':127,'multiline':False]['text':'   FinalYieldRval                  #','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' BODY:','line_number':130,'multiline':False]['text':'   JumpTarget                      #','line_number':131,'multiline':False]['text':'   Try                             #','line_number':132,'multiline':False]['text':'   (body here)                     #','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':'   JumpTarget from try             #','line_number':135,'multiline':False]['text':'   Exception                       # EXCEPTION','line_number':136,'multiline':False]['text':'   GetAliasedVar ".generator"      # EXCEPTION .generator','line_number':137,'multiline':False]['text':'   AsyncResolve 1                  # PROMISE','line_number':138,'multiline':False]['text':'   SetRval                         #','line_number':139,'multiline':False]['text':'   GetAliasedVar ".generator"      # .generator','line_number':140,'multiline':False]['text':'   FinalYieldRval                  #','line_number':141,'multiline':False]['text':' ```','line_number':142,'multiline':False]['text':'','line_number':143,'multiline':False]['text':' This corresponds to AsyncFunctionStart steps 4.f-g.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':'   4. ...','line_number':146,'multiline':False]['text':'     f. Else,','line_number':147,'multiline':False]['text':'       i. Assert: result.[[Type]] is throw.','line_number':148,'multiline':False]['text':'       ii. Perform','line_number':149,'multiline':False]['text':'           ! Call(promiseCapability.[[Reject]], undefined,','line_number':150,'multiline':False]['text':'                  «result.[[Value]]»).','line_number':151,'multiline':False]['text':'     g. Return.','line_number':152,'multiline':False]['text':'','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':' # Await','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' `await` is implemented with the following bytecode sequence:','line_number':157,'multiline':False]['text':' (ignoring CanSkipAwait for now, see "Optimization for await" section)','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':' ```','line_number':160,'multiline':False]['text':'   (operand here)                  # VALUE','line_number':161,'multiline':False]['text':'   GetAliasedVar ".generator"      # VALUE .generator','line_number':162,'multiline':False]['text':'   AsyncAwait                      # PROMISE','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':'   GetAliasedVar ".generator"      # PROMISE .generator','line_number':165,'multiline':False]['text':'   Await 0                         # RVAL GENERATOR RESUMEKIND','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':'   AfterYield                      # RVAL GENERATOR RESUMEKIND','line_number':168,'multiline':False]['text':'   CheckResumeKind                 # RVAL','line_number':169,'multiline':False]['text':' ```','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':' JSOp::AsyncAwait corresponds to Await steps 1-9, and JSOp::Await corresponds','line_number':172,'multiline':False]['text':' to Await steps 10-12 in the spec.','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' See the next section for JSOp::CheckResumeKind.','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':' After them, the async function is suspended, and if this is the first await','line_number':177,'multiline':False]['text':' in the execution, the async function's result promise is returned to the','line_number':178,'multiline':False]['text':' caller.','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':' Await','line_number':181,'multiline':False]['text':' https://tc39.es/ecma262/#await','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':'   1. Let asyncContext be the running execution context.','line_number':184,'multiline':False]['text':'   2. Let promise be ? PromiseResolve(%Promise%, value).','line_number':185,'multiline':False]['text':'   3. Let stepsFulfilled be the algorithm steps defined in Await Fulfilled','line_number':186,'multiline':False]['text':'      Functions.','line_number':187,'multiline':False]['text':'   4. Let onFulfilled be ! CreateBuiltinFunction(stepsFulfilled, «','line_number':188,'multiline':False]['text':'      [[AsyncContext]] »).','line_number':189,'multiline':False]['text':'   5. Set onFulfilled.[[AsyncContext]] to asyncContext.','line_number':190,'multiline':False]['text':'   6. Let stepsRejected be the algorithm steps defined in Await Rejected','line_number':191,'multiline':False]['text':'      Functions.','line_number':192,'multiline':False]['text':'   7. Let onRejected be ! CreateBuiltinFunction(stepsRejected, «','line_number':193,'multiline':False]['text':'      [[AsyncContext]] »).','line_number':194,'multiline':False]['text':'   8. Set onRejected.[[AsyncContext]] to asyncContext.','line_number':195,'multiline':False]['text':'   9. Perform ! PerformPromiseThen(promise, onFulfilled, onRejected).','line_number':196,'multiline':False]['text':'   10. Remove asyncContext from the execution context stack and restore the','line_number':197,'multiline':False]['text':'       execution context that is at the top of the execution context stack as','line_number':198,'multiline':False]['text':'       the running execution context.','line_number':199,'multiline':False]['text':'   11. Set the code evaluation state of asyncContext such that when evaluation','line_number':200,'multiline':False]['text':'       is resumed with a Completion completion, the following steps of the','line_number':201,'multiline':False]['text':'       algorithm that invoked Await will be performed, with completion','line_number':202,'multiline':False]['text':'       available.','line_number':203,'multiline':False]['text':'   12. Return.','line_number':204,'multiline':False]['text':'   13. NOTE: This returns to the evaluation of the operation that had most','line_number':205,'multiline':False]['text':'       previously resumed evaluation of asyncContext.','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' (See comments above AsyncAwait and Await in js/src/vm/Opcodes.h for more','line_number':208,'multiline':False]['text':'  details)','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' # Reaction jobs and resume after await','line_number':212,'multiline':False]['text':'','line_number':213,'multiline':False]['text':' When an async function performs `await` and the operand becomes settled, a','line_number':214,'multiline':False]['text':' new reaction job for the operand is enqueued to the job queue.','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' The reaction record for the job is marked as "this is for async function"','line_number':217,'multiline':False]['text':' (see js::AsyncFunctionAwait), and handled specially in','line_number':218,'multiline':False]['text':' js::PromiseReactionJob.','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':' When the await operand resolves (either with fulfillment or rejection),','line_number':221,'multiline':False]['text':' the async function is resumed from the job queue, by calling','line_number':222,'multiline':False]['text':' js::AsyncFunctionAwaitedFulfilled or js::AsyncFunctionAwaitedRejected','line_number':223,'multiline':False]['text':' from js::AsyncFunctionPromiseReactionJob.','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' The execution resumes from JSOp::AfterYield, with the resolved value','line_number':226,'multiline':False]['text':' and the resume kind, either normal or throw, corresponds to fulfillment or','line_number':227,'multiline':False]['text':' rejection, on the stack.','line_number':228,'multiline':False]['text':'','line_number':229,'multiline':False]['text':' The resume kind is handled by JSOp::CheckResumeKind after that.','line_number':230,'multiline':False]['text':'','line_number':231,'multiline':False]['text':' If the resume kind is normal (=fulfillment), the async function resumes','line_number':232,'multiline':False]['text':' the execution with the resolved value as the result of `await`.','line_number':233,'multiline':False]['text':'','line_number':234,'multiline':False]['text':' If the resume kind is throw (=rejection), it throws the resolved value,','line_number':235,'multiline':False]['text':' and it will be caught by the try-catch explained above.','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' # Optimization for await','line_number':239,'multiline':False]['text':'','line_number':240,'multiline':False]['text':' Suspending the execution and going into the embedding's job queue is slow','line_number':241,'multiline':False]['text':' and hard to optimize.','line_number':242,'multiline':False]['text':'','line_number':243,'multiline':False]['text':' If the following conditions are met, we don't have to perform the above','line_number':244,'multiline':False]['text':' but just use the await operand as the result of await.','line_number':245,'multiline':False]['text':'','line_number':246,'multiline':False]['text':'   1. The await operand is either non-promise or already-fulfilled promise,','line_number':247,'multiline':False]['text':'      so that the result value is already known','line_number':248,'multiline':False]['text':'   2. There's no jobs in the job queue,','line_number':249,'multiline':False]['text':'      so that we don't have to perform other jobs before resuming from','line_number':250,'multiline':False]['text':'      await','line_number':251,'multiline':False]['text':'   3. Promise constructor/prototype are not modified,','line_number':252,'multiline':False]['text':'      so that the optimization isn't visible to the user code','line_number':253,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' This is implemented by the following bytecode sequence:','line_number':255,'multiline':False]['text':'','line_number':256,'multiline':False]['text':' ```','line_number':257,'multiline':False]['text':'   (operand here)                  # VALUE','line_number':258,'multiline':False]['text':'','line_number':259,'multiline':False]['text':'   CanSkipAwait                    # VALUE, CAN_SKIP','line_number':260,'multiline':False]['text':'   MaybeExtractAwaitValue          # VALUE_OR_RVAL, CAN_SKIP','line_number':261,'multiline':False]['text':'   JumpIfTrue END                  # VALUE','line_number':262,'multiline':False]['text':'','line_number':263,'multiline':False]['text':'   JumpTarget                      # VALUE','line_number':264,'multiline':False]['text':'   GetAliasedVar ".generator"      # VALUE .generator','line_number':265,'multiline':False]['text':'   Await 0                         # RVAL GENERATOR RESUMEKIND','line_number':266,'multiline':False]['text':'   AfterYield                      # RVAL GENERATOR RESUMEKIND','line_number':267,'multiline':False]['text':'   CheckResumeKind                 # RVAL','line_number':268,'multiline':False]['text':'','line_number':269,'multiline':False]['text':' END:','line_number':270,'multiline':False]['text':'   JumpTarget                      # RVAL','line_number':271,'multiline':False]['text':' ```','line_number':272,'multiline':False]['text':'','line_number':273,'multiline':False]['text':' JSOp::CanSkipAwait checks the above conditions. MaybeExtractAwaitValue will','line_number':274,'multiline':False]['text':' replace Value if it can be skipped, and then the await is jumped over.','line_number':275,'multiline':False]['text':' Resume the async function when the `await` operand resolves.','line_number':283,'multiline':False]['text':' Split into two functions depending on whether the awaited value was','line_number':284,'multiline':False]['text':' fulfilled or rejected.','line_number':285,'multiline':False]['text':' Resolve the async function's promise object with the given value and then','line_number':294,'multiline':False]['text':' return the promise object.','line_number':295,'multiline':False]['text':' namespace js','line_number':323,'multiline':False]['text':' vm_AsyncFunction_h ','line_number':325,'multiline':True]