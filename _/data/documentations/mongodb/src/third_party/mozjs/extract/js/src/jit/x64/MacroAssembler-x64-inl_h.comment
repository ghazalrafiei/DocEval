['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'{{{ check_macroassembler_style','line_number':17,'multiline':False]['text':' ===============================================================','line_number':18,'multiline':False]['text':' Use mov instead of movq because it has special optimizations for imm == 0.','line_number':21,'multiline':False]['text':' ===============================================================','line_number':65,'multiline':False]['text':' Load instructions','line_number':66,'multiline':False]['text':' ===============================================================','line_number':72,'multiline':False]['text':' Logical instructions','line_number':73,'multiline':False]['text':' ===============================================================','line_number':143,'multiline':False]['text':' Swap instructions','line_number':144,'multiline':False]['text':' ===============================================================','line_number':148,'multiline':False]['text':' Arithmetic functions','line_number':149,'multiline':False]['text':' ===============================================================','line_number':296,'multiline':False]['text':' Shift functions','line_number':297,'multiline':False]['text':' ===============================================================','line_number':373,'multiline':False]['text':' Rotation functions','line_number':374,'multiline':False]['text':' ===============================================================','line_number':428,'multiline':False]['text':' Condition functions','line_number':429,'multiline':False]['text':' ===============================================================','line_number':437,'multiline':False]['text':' Bit counting functions','line_number':438,'multiline':False]['text':' Equivalent to mozilla::CountPopulation32, adapted for 64 bits.','line_number':486,'multiline':False]['text':' x -= (x >> 1) & m1;','line_number':487,'multiline':False]['text':' x = (x & m2) + ((x >> 2) & m2);','line_number':494,'multiline':False]['text':' x = (x + (x >> 4)) & m4;','line_number':502,'multiline':False]['text':' (x * h01) >> 56','line_number':509,'multiline':False]['text':' ===============================================================','line_number':515,'multiline':False]['text':' Branch functions','line_number':516,'multiline':False]['text':' Same trick as for Doubles','line_number':640,'multiline':False]['text':' Zero upper 32-bits.','line_number':649,'multiline':False]['text':' Check that the result is in the int32_t range.','line_number':656,'multiline':False]['text':' Zero upper 32-bits.','line_number':662,'multiline':False]['text':' vcvttsd2sq returns 0x8000000000000000 on failure. Test for it by','line_number':669,'multiline':False]['text':' subtracting 1 and testing overflow (this avoids the need to','line_number':670,'multiline':False]['text':' materialize that value in a register).','line_number':671,'multiline':False]['text':' Zero upper 32-bits.','line_number':680,'multiline':False]['text':' Check that the result is in the int32_t range.','line_number':687,'multiline':False]['text':' Zero upper 32-bits.','line_number':693,'multiline':False]['text':' ========================================================================','line_number':874,'multiline':False]['text':' SIMD.','line_number':875,'multiline':False]['text':'','line_number':876,'multiline':False]['text':' These are x64-only because they use ScratchRegister or they use a quadword','line_number':877,'multiline':False]['text':' operation.  SSE4.1 or better is assumed.','line_number':878,'multiline':False]['text':' Any lane true, ie any bit set','line_number':880,'multiline':False]['text':' Extract lane as scalar','line_number':890,'multiline':False]['text':' Replace lane value','line_number':897,'multiline':False]['text':' Splat','line_number':904,'multiline':False]['text':' ========================================================================','line_number':911,'multiline':False]['text':' Truncate floating point.','line_number':912,'multiline':False]['text':' For unsigned conversion the case of [INT64, UINT64] needs to get handled','line_number':923,'multiline':False]['text':' separately.','line_number':924,'multiline':False]['text':' Move the value inside INT64 range.','line_number':928,'multiline':False]['text':' For unsigned conversion the case of [INT64, UINT64] needs to get handle','line_number':951,'multiline':False]['text':' seperately.','line_number':952,'multiline':False]['text':' Move the value inside INT64 range.','line_number':956,'multiline':False]['text':' dest := src XOR mask','line_number':974,'multiline':False]['text':' scratch := dest >> JSVAL_TAG_SHIFT','line_number':975,'multiline':False]['text':' fail if scratch != 0','line_number':976,'multiline':False]['text':'','line_number':977,'multiline':False]['text':' Note: src and dest can be the same register.','line_number':978,'multiline':False]['text':'}}} check_macroassembler_style','line_number':1002,'multiline':False]['text':' ===============================================================','line_number':1003,'multiline':False]['text':' If source is a double, load it into dest. If source is int32,','line_number':1035,'multiline':False]['text':' convert it to double. Else, branch to failure.','line_number':1036,'multiline':False]['text':' namespace jit','line_number':1060,'multiline':False]['text':' namespace js','line_number':1061,'multiline':False]['text':' jit_x64_MacroAssembler_x64_inl_h ','line_number':1063,'multiline':True]