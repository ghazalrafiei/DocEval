['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Generic printf interface, similar to an ostream in the standard library.','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' This class is useful to make generic printers which can work either with a','line_number':27,'multiline':False]['text':' file backend, with a buffer allocated with an JSContext or a link-list','line_number':28,'multiline':False]['text':' of chunks allocated with a LifoAlloc.','line_number':29,'multiline':False]['text':' whether reportOutOfMemory() has been called.','line_number':32,'multiline':False]['text':' Puts |len| characters from |s| at the current position and','line_number':37,'multiline':False]['text':' return true on success, false on failure.','line_number':38,'multiline':False]['text':' Do nothing ','line_number':40,'multiline':True]['text':' Prints a formatted string into the buffer.','line_number':46,'multiline':False]['text':' Report that a string operation failed to get the memory it requested.','line_number':50,'multiline':False]['text':' Return true if this Sprinter ran out of memory.','line_number':53,'multiline':False]['text':' Sprintf, but with unlimited and automatically allocated buffering.','line_number':57,'multiline':False]['text':' context executing the decompiler','line_number':70,'multiline':False]['text':' true if this is initialized, use for debug builds','line_number':75,'multiline':False]['text':' whether to report OOM to the context','line_number':77,'multiline':False]['text':' malloc'd buffer address','line_number':78,'multiline':False]['text':' size of buffer allocated at base','line_number':79,'multiline':False]['text':' offset of next free char in buffer','line_number':80,'multiline':False]['text':' Initialize this sprinter, returns false on error.','line_number':88,'multiline':False]['text':' Returns the string at offset |off|.','line_number':97,'multiline':False]['text':' Returns the char at offset |off|.','line_number':99,'multiline':False]['text':' Attempt to reserve len + 1 space (for a trailing nullptr byte). If the','line_number':102,'multiline':False]['text':' attempt succeeds, return a pointer to the start of that space and adjust','line_number':103,'multiline':False]['text':' the internal content. The caller *must* completely fill this space on','line_number':104,'multiline':False]['text':' success.','line_number':105,'multiline':False]['text':' Puts |len| characters from |s| at the current position and','line_number':108,'multiline':False]['text':' return true on success, false on failure.','line_number':109,'multiline':False]['text':' pick up |inline bool put(const char* s);|','line_number':111,'multiline':False]['text':' Format the given format/arguments as if by JS_vsmprintf, then put it.','line_number':113,'multiline':False]['text':' Return true on success, else return false and report an error (typically','line_number':114,'multiline':False]['text':' OOM).','line_number':115,'multiline':False]['text':' Report that a string operation failed to get the memory it requested. The','line_number':122,'multiline':False]['text':' first call to this function calls JS_ReportOutOfMemory, and sets this','line_number':123,'multiline':False]['text':' Sprinter's outOfMemory flag; subsequent calls do nothing.','line_number':124,'multiline':False]['text':' Fprinter, print a string directly into a file.','line_number':128,'multiline':False]['text':' Initialize this printer, returns false on error.','line_number':143,'multiline':False]['text':' Puts |len| characters from |s| at the current position and','line_number':150,'multiline':False]['text':' return true on success, false on failure.','line_number':151,'multiline':False]['text':' pick up |inline bool put(const char* s);|','line_number':153,'multiline':False]['text':' LSprinter, is similar to Sprinter except that instead of using an','line_number':156,'multiline':False]['text':' JSContext to allocate strings, it use a LifoAlloc as a backend for the','line_number':157,'multiline':False]['text':' allocation of the chunk of the string.','line_number':158,'multiline':False]['text':' LifoAlloc used as a backend of chunk allocations.','line_number':170,'multiline':False]['text':' Copy the content of the chunks into another printer, such that we can','line_number':179,'multiline':False]['text':' flush the content of this printer to a file.','line_number':180,'multiline':False]['text':' Drop the current string, and let them be free with the LifoAlloc.','line_number':183,'multiline':False]['text':' Puts |len| characters from |s| at the current position and','line_number':186,'multiline':False]['text':' return true on success, false on failure.','line_number':187,'multiline':False]['text':' pick up |inline bool put(const char* s);|','line_number':189,'multiline':False]['text':' Map escaped code to the letter/symbol escaped with a backslash.','line_number':192,'multiline':False]['text':' Return a C-string containing the chars in str, with any non-printing chars','line_number':195,'multiline':False]['text':' escaped. If the optional quote parameter is present and is not '\0', quotes','line_number':196,'multiline':False]['text':' (as specified by the quote argument) are also escaped, and the quote','line_number':197,'multiline':False]['text':' character is appended at the beginning and end of the result string.','line_number':198,'multiline':False]['text':' The returned string is guaranteed to contain only ASCII characters.','line_number':199,'multiline':False]['text':' Appends the quoted string to the given Sprinter. Follows the same semantics','line_number':203,'multiline':False]['text':' as QuoteString from above.','line_number':204,'multiline':False]['text':' Appends the quoted string to the given Sprinter. Follows the same','line_number':207,'multiline':False]['text':' Appends the JSON quoted string to the given Sprinter.','line_number':208,'multiline':False]['text':' Internal implementation code for QuoteString methods above.','line_number':211,'multiline':False]['text':' namespace js','line_number':218,'multiline':False]['text':' vm_Printer_h','line_number':220,'multiline':False]