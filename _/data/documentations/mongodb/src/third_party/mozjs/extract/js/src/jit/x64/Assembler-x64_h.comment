['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' X86-common synonyms.','line_number':68,'multiline':False]['text':' Avoid, except for assertions.','line_number':84,'multiline':False]['text':' Helper class for ScratchRegister usage. Asserts that only one piece','line_number':90,'multiline':False]['text':' of code thinks it has exclusive ownership of the scratch register.','line_number':91,'multiline':False]['text':' Avoid rbp, which is the FramePointer, which is unavailable in some modes.','line_number':113,'multiline':False]['text':' Different argument registers for WIN64','line_number':121,'multiline':False]['text':' Registerd used in RegExpMatcher instruction (do not use JSReturnOperand).','line_number':167,'multiline':False]['text':' Registerd used in RegExpTester instruction (do not use ReturnReg).','line_number':172,'multiline':False]['text':' These registers may be volatile or nonvolatile.','line_number':195,'multiline':False]['text':' Avoid r11, which is the MacroAssembler's ScratchReg.','line_number':196,'multiline':False]['text':' This register may be volatile or nonvolatile. Avoid xmm15 which is the','line_number':202,'multiline':False]['text':' ScratchDoubleReg.','line_number':203,'multiline':False]['text':' These registers may be volatile or nonvolatile.','line_number':207,'multiline':False]['text':' Note: these three registers are all guaranteed to be different','line_number':208,'multiline':False]['text':' This register is guaranteed to be clobberable during the prologue and','line_number':213,'multiline':False]['text':' epilogue of an ABI call which must preserve both ABI argument, return','line_number':214,'multiline':False]['text':' and non-volatile registers.','line_number':215,'multiline':False]['text':' TLS pointer argument register for WebAssembly functions. This must not alias','line_number':218,'multiline':False]['text':' any other register used for passing function arguments or return values.','line_number':219,'multiline':False]['text':' Preserved by WebAssembly functions.','line_number':220,'multiline':False]['text':' Registers used for asm.js/wasm table calls. These registers must be disjoint','line_number':223,'multiline':False]['text':' from the ABI argument registers, WasmTlsReg and each other.','line_number':224,'multiline':False]['text':' Register used as a scratch along the return path in the fast js -> wasm stub','line_number':230,'multiline':False]['text':' code.  This must not overlap ReturnReg, JSReturnOperand, or WasmTlsReg.  It','line_number':231,'multiline':False]['text':' must be a volatile register.','line_number':232,'multiline':False]['text':' Register used to store a reference to an exception thrown by Wasm to an','line_number':235,'multiline':False]['text':' exception handling block. Should not overlap with WasmTlsReg.','line_number':236,'multiline':False]['text':' See comments in wasm::GenerateFunctionPrologue.  The difference between these','line_number':273,'multiline':False]['text':' is the size of the largest callable prologue on the platform.','line_number':274,'multiline':False]['text':' namespace jit','line_number':280,'multiline':False]['text':' namespace js','line_number':281,'multiline':False]['text':' Return operand from a JS -> JS call.','line_number':288,'multiline':False]['text':' x64 jumps may need extra bits of relocation, because a jump may extend','line_number':292,'multiline':False]['text':' beyond the signed 32-bit range. To account for this we add an extended','line_number':293,'multiline':False]['text':' jump table at the bottom of the instruction stream, and if a jump','line_number':294,'multiline':False]['text':' overflows its range, it will redirect here.','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':' Each entry in this table is a jmp [rip], followed by a ud2 to hint to the','line_number':297,'multiline':False]['text':' hardware branch predictor that there is no fallthrough, followed by the','line_number':298,'multiline':False]['text':' eight bytes containing an immediate address. This comes out to 16 bytes.','line_number':299,'multiline':False]['text':'    +1 byte for opcode','line_number':300,'multiline':False]['text':'    +1 byte for mod r/m','line_number':301,'multiline':False]['text':'    +4 bytes for rip-relative offset (2)','line_number':302,'multiline':False]['text':'    +2 bytes for ud2 instruction','line_number':303,'multiline':False]['text':'    +8 bytes for 64-bit address','line_number':304,'multiline':False]['text':'','line_number':305,'multiline':False]['text':' Two kinds of jumps on x64:','line_number':309,'multiline':False]['text':'','line_number':310,'multiline':False]['text':' * codeJumps_ tracks jumps with target within the executable code region','line_number':311,'multiline':False]['text':'   for the process. These jumps don't need entries in the extended jump','line_number':312,'multiline':False]['text':'   table because source and target must be within 2 GB of each other.','line_number':313,'multiline':False]['text':'','line_number':314,'multiline':False]['text':' * extendedJumps_ tracks jumps with target outside the executable code','line_number':315,'multiline':False]['text':'   region. These jumps need entries in the extended jump table described','line_number':316,'multiline':False]['text':'   above.','line_number':317,'multiline':False]['text':' The buffer is about to be linked, make sure any constant pools or excess','line_number':341,'multiline':False]['text':' bookkeeping has been flushed to the instruction stream.','line_number':342,'multiline':False]['text':' Copy the assembly code to the given buffer, and perform any pending','line_number':345,'multiline':False]['text':' relocations relying on the target address.','line_number':346,'multiline':False]['text':' Actual assembly emitting functions.','line_number':361,'multiline':False]['text':' We often end up with ImmWords that actually fit into int32.','line_number':368,'multiline':False]['text':' Be aware of the sign extension behavior.','line_number':369,'multiline':False]['text':' This is for patching during code generation, not after.','line_number':401,'multiline':False]['text':' Load an ImmWord value into a register. Note that this instruction will','line_number':407,'multiline':False]['text':' attempt to optimize its immediate field size. When a full 64-bit','line_number':408,'multiline':False]['text':' immediate is needed for a relocation, use movWithPatch.','line_number':409,'multiline':False]['text':' Load a 64-bit immediate into a register. If the value falls into','line_number':411,'multiline':False]['text':' certain ranges, we can use specialized instructions which have','line_number':412,'multiline':False]['text':' smaller encodings.','line_number':413,'multiline':False]['text':' movl has a 32-bit unsigned (effectively) immediate field.','line_number':415,'multiline':False]['text':' movq has a 32-bit signed immediate field.','line_number':419,'multiline':False]['text':' Otherwise use movabs.','line_number':422,'multiline':False]['text':' movzbl zero-extends to 64 bits and is one byte smaller, so use that','line_number':620,'multiline':False]['text':' instead.','line_number':621,'multiline':False]['text':' movzwl zero-extends to 64 bits and is one byte smaller, so use that','line_number':643,'multiline':False]['text':' instead.','line_number':644,'multiline':False]['text':' Use xor for setting registers to zero, as it is specially optimized','line_number':982,'multiline':False]['text':' for this purpose on modern hardware. Note that it does clobber FLAGS','line_number':983,'multiline':False]['text':' though. Use xorl instead of xorq since they are functionally','line_number':984,'multiline':False]['text':' equivalent (32-bit instructions zero-extend their results to 64 bits)','line_number':985,'multiline':False]['text':' and xorl has a smaller encoding.','line_number':986,'multiline':False]['text':' placeholder ','line_number':1003,'multiline':True]['text':' Emit a CALL or CMP (nop) instruction. ToggleCall can be used to patch','line_number':1168,'multiline':False]['text':' this instruction.','line_number':1169,'multiline':False]['text':' Size of a call instruction.','line_number':1179,'multiline':False]['text':' Do not mask shared implementations.','line_number':1183,'multiline':False]['text':' Get a register in which we plan to put a quantity that will be used as an','line_number':1214,'multiline':False]['text':' integer argument.  This differs from GetIntArgReg in that if we have no more','line_number':1215,'multiline':False]['text':' actual argument registers to use we will fall back on using whatever','line_number':1216,'multiline':False]['text':' CallTempReg* don't overlap the argument registers, and only fail once those','line_number':1217,'multiline':False]['text':' run out too.','line_number':1218,'multiline':False]['text':' Unfortunately, we have to assume things about the point at which','line_number':1224,'multiline':False]['text':' GetIntArgReg returns false, because we need to know how many registers it','line_number':1225,'multiline':False]['text':' can allocate.','line_number':1226,'multiline':False]['text':' namespace jit','line_number':1254,'multiline':False]['text':' namespace js','line_number':1255,'multiline':False]['text':' jit_x64_Assembler_x64_h ','line_number':1257,'multiline':True]