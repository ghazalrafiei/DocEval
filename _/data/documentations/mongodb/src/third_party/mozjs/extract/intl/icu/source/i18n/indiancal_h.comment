['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
 *****************************************************************************
 * Copyright (C) 2003-2008, International Business Machines Corporation
 * and others. All Rights Reserved.
 *****************************************************************************
 *
 * File INDIANCAL.H
 *****************************************************************************
 ','line_number':3,'multiline':True]['text':'*
 * Concrete class which provides the Indian calendar.
 * <P>
 * <code>IndianCalendar</code> is a subclass of <code>Calendar</code>
 * that numbers years since the beginning of SAKA ERA.  This is the civil calendar
 * which is accepted by government of India as Indian National Calendar.
 * The two calendars most widely used in India today are the Vikrama calendar
 * followed in North India and the Shalivahana or Saka calendar which is followed
 * in South India and Maharashtra.

 * A variant of the Shalivahana Calendar was reformed and standardized as the
 * Indian National calendar in 1957.
 * <p>
 * Some details of Indian National Calendar (to be implemented) :
 * The Months
 * Month          Length      Start date (Gregorian)
 * =================================================
 * 1 Chaitra      30/31          March 22*
 * 2 Vaisakha     31             April 21
 * 3 Jyaistha     31             May 22
 * 4 Asadha       31             June 22
 * 5 Sravana      31             July 23
 * 6 Bhadra       31             August 23
 * 7 Asvina       30             September 23
 * 8 Kartika      30             October 23
 * 9 Agrahayana   30             November 22
 * 10 Pausa       30             December 22
 * 11 Magha       30             January 21
 * 12 Phalguna    30             February 20

 * In leap years, Chaitra has 31 days and starts on March 21 instead.
 * The leap years of Gregorian calendar and Indian National Calendar are in synchornization.
 * So When its a leap year in Gregorian calendar then Chaitra has 31 days.
 *
 * The Years
 * Years are counted in the Saka Era, which starts its year 0 in 78AD (by gregorian calendar).
 * So for eg. 9th June 2006 by Gregorian Calendar, is same as 19th of Jyaistha in 1928 of Saka
 * era by Indian National Calendar.
 * <p>
 * The Indian Calendar has only one allowable era: <code>Saka Era</code>.  If the
 * calendar is not in lenient mode (see <code>setLenient</code>), dates before
 * 1/1/1 Saka Era are rejected with an <code>IllegalArgumentException</code>.
 * <p>
 * @internal
 ','line_number':24,'multiline':True]['text':'*
   * Useful constants for IndianCalendar.
   * @internal
   ','line_number':73,'multiline':True]['text':'* 
     * Constant for Chaitra, the 1st month of the Indian year. 
     ','line_number':78,'multiline':True]['text':'*
     * Constant for Vaisakha, the 2nd month of the Indian year. 
     ','line_number':83,'multiline':True]['text':'*
     * Constant for Jyaistha, the 3rd month of the Indian year. 
     ','line_number':88,'multiline':True]['text':'*
     * Constant for Asadha, the 4th month of the Indian year. 
     ','line_number':93,'multiline':True]['text':'*
     * Constant for Sravana, the 5th month of the Indian year. 
     ','line_number':98,'multiline':True]['text':'*
     * Constant for Bhadra the 6th month of the Indian year
     ','line_number':103,'multiline':True]['text':'* 
     * Constant for the Asvina, the 7th month of the Indian year. 
     ','line_number':108,'multiline':True]['text':'*
     * Constant for Kartika, the 8th month of the Indian year. 
     ','line_number':113,'multiline':True]['text':'*
     * Constant for Agrahayana, the 9th month of the Indian year. 
     ','line_number':118,'multiline':True]['text':'*
     * Constant for Pausa, the 10th month of the Indian year. 
     ','line_number':123,'multiline':True]['text':'*
     * Constant for Magha, the 11th month of the Indian year. 
     ','line_number':128,'multiline':True]['text':'*
     * Constant for Phalguna, the 12th month of the Indian year. 
     ','line_number':133,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':139,'multiline':False]['text':' Constructors...','line_number':140,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':141,'multiline':False]['text':'*
   * Constructs an IndianCalendar based on the current time in the default time zone
   * with the given locale.
   *
   * @param aLocale  The given locale.
   * @param success  Indicates the status of IndianCalendar object construction.
   *                 Returns U_ZERO_ERROR if constructed successfully.
   * @param beCivil  Whether the calendar should be civil (default-true) or religious (false)
   * @internal
   ','line_number':143,'multiline':True]['text':'*
   * Copy Constructor
   * @internal
   ','line_number':155,'multiline':True]['text':'*
   * Destructor.
   * @internal
   ','line_number':161,'multiline':True]['text':'*
   * Determines whether this object uses the fixed-cycle Indian civil calendar
   * or an approximation of the religious, astronomical calendar.
   *
   * @param beCivil   <code>CIVIL</code> to use the civil calendar,
   *                  <code>ASTRONOMICAL</code> to use the astronomical calendar.
   * @internal
   ','line_number':167,'multiline':True]['text':'void setCivil(ECivil beCivil, UErrorCode &status);','line_number':175,'multiline':False]['text':'*
   * Returns <code>true</code> if this object is using the fixed-cycle civil
   * calendar, or <code>false</code> if using the religious, astronomical
   * calendar.
   * @internal
   ','line_number':177,'multiline':True]['text':'UBool isCivil();','line_number':183,'multiline':False]['text':' TODO: copy c'tor, etc','line_number':186,'multiline':False]['text':' clone','line_number':188,'multiline':False]['text':'*
   * Determine whether a year is the gregorian year a leap year 
   ','line_number':192,'multiline':True]['text':'static UBool isGregorianLeap(int32_t year);','line_number':195,'multiline':False]['text':'----------------------------------------------------------------------','line_number':196,'multiline':False]['text':' Calendar framework','line_number':197,'multiline':False]['text':'----------------------------------------------------------------------','line_number':198,'multiline':False]['text':'*
   * @internal
   ','line_number':200,'multiline':True]['text':'*
   * Return the length (in days) of the given month.
   *
   * @param year  The year in Saka era
   * @param year  The month(0-based) in Indian year
   * @internal
   ','line_number':205,'multiline':True]['text':'*
   * Return the number of days in the given Indian year
   * @internal
   ','line_number':214,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':220,'multiline':False]['text':' Functions for converting from field values to milliseconds....','line_number':221,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':222,'multiline':False]['text':' Return JD of start of given month/year','line_number':224,'multiline':False]['text':'*
   * @internal
   ','line_number':225,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':230,'multiline':False]['text':' Functions for converting from milliseconds to field values','line_number':231,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':232,'multiline':False]['text':'*
   * @internal
   ','line_number':234,'multiline':True]['text':'*
   * Override Calendar to compute several fields specific to the Indian
   * calendar system.  These are:
   *
   * <ul><li>ERA
   * <li>YEAR
   * <li>MONTH
   * <li>DAY_OF_MONTH
   * <li>DAY_OF_YEAR
   * <li>EXTENDED_YEAR</ul>
   * 
   * The DAY_OF_WEEK and DOW_LOCAL fields are already set when this
   * method is called. The getGregorianXxx() methods return Gregorian
   * calendar equivalents for the given Julian day.
   * @internal
   ','line_number':239,'multiline':True]['text':' UObject stuff','line_number':257,'multiline':False]['text':'*
   * @return   The class ID for this object. All objects of a given class have the
   *           same class ID. Objects of other classes have different class IDs.
   * @internal
   ','line_number':259,'multiline':True]['text':'*
   * Return the class ID for this class. This is useful only for comparing to a return
   * value from getDynamicClassID(). For example:
   *
   *      Base* polymorphic_pointer = createPolymorphicObject();
   *      if (polymorphic_pointer->getDynamicClassID() ==
   *          Derived::getStaticClassID()) ...
   *
   * @return   The class ID for all objects of this class.
   * @internal
   ','line_number':266,'multiline':True]['text':'*
   * return the calendar type, "indian".
   *
   * @return calendar type
   * @internal
   ','line_number':279,'multiline':True]['text':' default constructor not implemented','line_number':288,'multiline':False]['text':' Default century.','line_number':290,'multiline':False]['text':'*
   * (Overrides Calendar) Return true if the current date for this Calendar is in
   * Daylight Savings Time. Recognizes DST_OFFSET, if it is set.
   *
   * @param status Fill-in parameter which receives the status of this operation.
   * @return   True if the current date for this Calendar is in Daylight Savings Time,
   *           false, otherwise.
   * @internal
   ','line_number':293,'multiline':True]['text':'*
   * Returns true because the Indian Calendar does have a default century
   * @internal
   ','line_number':305,'multiline':True]['text':'*
   * Returns the date of the start of the default century
   * @return start of century - in milliseconds since epoch, 1970
   * @internal
   ','line_number':311,'multiline':True]['text':'*
   * Returns the year in which the default century begins
   * @internal
   ','line_number':318,'multiline':True]