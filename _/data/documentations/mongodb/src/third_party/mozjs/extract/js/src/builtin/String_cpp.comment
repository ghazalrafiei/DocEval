['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':33,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':34,'multiline':False]['text':' js::ValueToSource','line_number':60,'multiline':False]['text':' js_*_str','line_number':61,'multiline':False]['text':'
 * Forward declarations for URI encode/decode and helper routines
 ','line_number':97,'multiline':True]['text':'
 * Global string methods
 ','line_number':108,'multiline':True]['text':' ES5 B.2.1 ','line_number':112,'multiline':True]['text':' clang-format off','line_number':117,'multiline':False]['text':'    !"#$%&'()*+,-./  ','line_number':121,'multiline':True]['text':'   0123456789:;<=>?  ','line_number':122,'multiline':True]['text':'   @ABCDEFGHIJKLMNO  ','line_number':123,'multiline':True]['text':'   PQRSTUVWXYZ[\]^_  ','line_number':124,'multiline':True]['text':'   `abcdefghijklmno  ','line_number':125,'multiline':True]['text':'   pqrstuvwxyz{\}~  DEL ','line_number':126,'multiline':True]['text':' clang-format on','line_number':128,'multiline':False]['text':' Take a first pass and see how big the result string will need to be. ','line_number':130,'multiline':True]['text':'
     * newlength is incremented below by at most 5 and at this point it must
     * be a valid string length, so this should never overflow uint32_t.
     ','line_number':138,'multiline':True]['text':' The character will be encoded as %XX or %uXXXX. ','line_number':147,'multiline':True]['text':' initialize to silence GCC warning','line_number':201,'multiline':False]['text':' Return input if no characters need to be escaped.','line_number':216,'multiline':False]['text':' Step 2.','line_number':265,'multiline':False]['text':'
   * Note that the spec algorithm has been optimized to avoid building
   * a string in the case where no escapes are present.
   ','line_number':268,'multiline':True]['text':' Step 4.','line_number':283,'multiline':False]['text':' Step 5.','line_number':286,'multiline':False]['text':' Step 5.a.','line_number':288,'multiline':False]['text':' Step 5.b.','line_number':291,'multiline':False]['text':' Steps 5.b.i-ii.','line_number':296,'multiline':False]['text':' Step 5.c.','line_number':310,'multiline':False]['text':' Step 5.d.','line_number':315,'multiline':False]['text':' ES2018 draft rev f83aa38282c2a60c6916ebc410bfdf105a0f6a54','line_number':323,'multiline':False]['text':' B.2.1.2 unescape ( string )','line_number':324,'multiline':False]['text':' Step 1.','line_number':328,'multiline':False]['text':' Step 3.','line_number':334,'multiline':False]['text':' Steps 2, 4-5.','line_number':340,'multiline':False]['text':' Step 6.','line_number':353,'multiline':False]['text':' str_resolve ignores non-integer ids.','line_number':416,'multiline':False]['text':' addProperty','line_number':446,'multiline':False]['text':' delProperty','line_number':447,'multiline':False]['text':' enumerate','line_number':448,'multiline':False]['text':' newEnumerate','line_number':449,'multiline':False]['text':' resolve','line_number':450,'multiline':False]['text':' mayResolve','line_number':451,'multiline':False]['text':' finalize','line_number':452,'multiline':False]['text':' call','line_number':453,'multiline':False]['text':' hasInstance','line_number':454,'multiline':False]['text':' construct','line_number':455,'multiline':False]['text':' trace','line_number':456,'multiline':False]['text':'
 * Perform the initial |RequireObjectCoercible(thisv)| and |ToString(thisv)|
 * from nearly all String.prototype.* functions.
 ','line_number':465,'multiline':True]['text':' We have to make sure that the ToPrimitive call from ToString','line_number':484,'multiline':False]['text':' would be unobservable.','line_number':485,'multiline':False]['text':'
 * Java-like string native methods.
 ','line_number':552,'multiline':True]['text':'
   * Optimization for one level deep ropes.
   * This is common for the following pattern:
   *
   * while() {
   *   text = text.substr(0, x) + "bla" + text.substr(x)
   *   test.charCodeAt(x + 1)
   * }
   ','line_number':566,'multiline':True]['text':' Substring is totally in leftChild of rope. ','line_number':578,'multiline':True]['text':' Substring is totally in rightChild of rope. ','line_number':583,'multiline':True]['text':'
     * Requested substring is partly in the left and partly in right child.
     * Create a rope of substrings for both childs.
     ','line_number':589,'multiline':True]['text':'*
 * U+03A3 GREEK CAPITAL LETTER SIGMA has two different lower case mappings
 * depending on its context:
 * When it's preceded by a cased character and not followed by another cased
 * character, its lower case form is U+03C2 GREEK SMALL LETTER FINAL SIGMA.
 * Otherwise its lower case mapping is U+03C3 GREEK SMALL LETTER SIGMA.
 *
 * Unicode 9.0, ยง3.13 Default Case Algorithms
 ','line_number':618,'multiline':True]['text':' Tell the analysis the BinaryProperty.contains function pointer called by','line_number':635,'multiline':False]['text':' u_hasBinaryProperty cannot GC.','line_number':636,'multiline':False]['text':' Ignore any characters with the property Case_Ignorable.','line_number':651,'multiline':False]['text':' NB: We need to skip over all Case_Ignorable characters, even when','line_number':652,'multiline':False]['text':' they also have the Cased binary property.','line_number':653,'multiline':False]['text':' Ignore any characters with the property Case_Ignorable.','line_number':677,'multiline':False]['text':' NB: We need to skip over all Case_Ignorable characters, even when','line_number':678,'multiline':False]['text':' they also have the Cased binary property.','line_number':679,'multiline':False]['text':' If |srcLength == destLength| is true, the destination buffer was allocated','line_number':695,'multiline':False]['text':' with the same size as the source buffer. When we append characters which','line_number':696,'multiline':False]['text':' have special casing mappings, we test |srcLength == destLength| to decide','line_number':697,'multiline':False]['text':' if we need to back out and reallocate a sufficiently large destination','line_number':698,'multiline':False]['text':' buffer. Otherwise the destination buffer was allocated with the correct','line_number':699,'multiline':False]['text':' size to hold all lower case mapped characters, i.e.','line_number':700,'multiline':False]['text':' |destLength == ToLowerCaseLength(srcChars, 0, srcLength)| is true.','line_number':701,'multiline':False]['text':' Special case: U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE','line_number':727,'multiline':False]['text':' lowercases to <U+0069 U+0307>.','line_number':728,'multiline':False]['text':' Return if the output buffer is too small.','line_number':730,'multiline':False]['text':' Special case: U+03A3 GREEK CAPITAL LETTER SIGMA lowercases to','line_number':740,'multiline':False]['text':' one of two codepoints depending on context.','line_number':741,'multiline':False]['text':' U+0130 is lowercased to the two-element sequence <U+0069 U+0307>.','line_number':762,'multiline':False]['text':' Unlike toUpperCase, toLowerCase has the nice invariant that if the','line_number':772,'multiline':False]['text':' input is a Latin-1 string, the output is also a Latin-1 string.','line_number':773,'multiline':False]['text':' We don't need extra special casing checks in the loop below,','line_number':783,'multiline':False]['text':' because U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE and U+03A3','line_number':784,'multiline':False]['text':' GREEK CAPITAL LETTER SIGMA already have simple lower case mappings.','line_number':785,'multiline':False]['text':' One element Latin-1 strings can be directly retrieved from the','line_number':793,'multiline':False]['text':' static strings cache.','line_number':794,'multiline':False]['text':' Look for the first character that changes when lowercased.','line_number':804,'multiline':False]['text':' If no character needs to change, return the input string.','line_number':826,'multiline':False]['text':' String.prototype.toLocaleLowerCase is self-hosted when Intl is exposed,','line_number':892,'multiline':False]['text':' with core functionality performed by the intrinsic below.','line_number':893,'multiline':False]['text':' Lithuanian, Turkish, and Azeri have language dependent case mappings.','line_number':903,'multiline':False]['text':' All strings in |languagesWithSpecialCasing| are of length two, so we','line_number':906,'multiline':False]['text':' only need to compare the first two characters to find a matching locale.','line_number':907,'multiline':False]['text':' ES2017 Intl, ยง9.2.2 BestAvailableLocale','line_number':908,'multiline':False]['text':' ICU root locale','line_number':918,'multiline':False]['text':' Call String.prototype.toLowerCase() for language independent casing.','line_number':934,'multiline':False]['text':' Note: maximum case mapping length is three characters, so the result','line_number':951,'multiline':False]['text':' length might be > INT32_MAX. ICU will fail in this case.','line_number':952,'multiline':False]['text':' When the Intl API is not exposed, String.prototype.toLowerCase is implemented','line_number':985,'multiline':False]['text':' in C++.','line_number':986,'multiline':False]['text':'
   * Forcefully ignore the first (or any) argument and return toLowerCase(),
   * ECMA has reserved that argument, presumably for defining the locale.
   ','line_number':996,'multiline':True]['text':' JS_HAS_INTL_API','line_number':1025,'multiline':False]['text':' U+00DF LATIN SMALL LETTER SHARP S is the only Latin-1 code point with','line_number':1028,'multiline':False]['text':' special casing rules, so detect it inline.','line_number':1029,'multiline':False]['text':' U+00DF LATIN SMALL LETTER SHARP S is uppercased to two 'S'.','line_number':1043,'multiline':False]['text':' U+00DF LATIN SMALL LETTER SHARP S is uppercased to two 'S'.','line_number':1058,'multiline':False]['text':' See ToLowerCaseImpl for an explanation of the parameters.','line_number':1072,'multiline':False]['text':' Return if the output buffer is too small.','line_number':1101,'multiline':False]['text':' Most one element Latin-1 strings can be directly retrieved from the','line_number':1194,'multiline':False]['text':' static strings cache.','line_number':1195,'multiline':False]['text':' Look for the first character that changes when uppercased.','line_number':1214,'multiline':False]['text':' If no character needs to change, return the input string.','line_number':1239,'multiline':False]['text':' The string changes when uppercased, so we must create a new string.','line_number':1244,'multiline':False]['text':' Can it be Latin-1?','line_number':1245,'multiline':False]['text':'','line_number':1246,'multiline':False]['text':' If the original string is Latin-1, it can -- unless the string','line_number':1247,'multiline':False]['text':' contains U+00B5 MICRO SIGN or U+00FF SMALL LETTER Y WITH DIAERESIS,','line_number':1248,'multiline':False]['text':' the only Latin-1 codepoints that don't uppercase within Latin-1.','line_number':1249,'multiline':False]['text':' Search for those codepoints to decide whether the new string can be','line_number':1250,'multiline':False]['text':' Latin-1.','line_number':1251,'multiline':False]['text':' If the original string is a two-byte string, its uppercase form is','line_number':1252,'multiline':False]['text':' so rarely Latin-1 that we don't even consider creating a new','line_number':1253,'multiline':False]['text':' Latin-1 string.','line_number':1254,'multiline':False]['text':' String.prototype.toLocaleUpperCase is self-hosted when Intl is exposed,','line_number':1332,'multiline':False]['text':' with core functionality performed by the intrinsic below.','line_number':1333,'multiline':False]['text':' Call String.prototype.toUpperCase() for language independent casing.','line_number':1348,'multiline':False]['text':' Note: maximum case mapping length is three characters, so the result','line_number':1365,'multiline':False]['text':' length might be > INT32_MAX. ICU will fail in this case.','line_number':1366,'multiline':False]['text':' When the Intl API is not exposed, String.prototype.toUpperCase is implemented','line_number':1399,'multiline':False]['text':' in C++.','line_number':1400,'multiline':False]['text':'
   * Forcefully ignore the first (or any) argument and return toUpperCase(),
   * ECMA has reserved that argument, presumably for defining the locale.
   ','line_number':1410,'multiline':True]['text':' JS_HAS_INTL_API','line_number':1439,'multiline':False]['text':' String.prototype.localeCompare is self-hosted when Intl functionality is','line_number':1443,'multiline':False]['text':' exposed, and the only intrinsics it requires are provided in the','line_number':1444,'multiline':False]['text':' implementation of Intl.Collator.','line_number':1445,'multiline':False]['text':' String.prototype.localeCompare is implemented in C++ (delegating to','line_number':1449,'multiline':False]['text':' JSLocaleCallbacks) when Intl functionality is not exposed.','line_number':1450,'multiline':False]['text':' JS_HAS_INTL_API','line_number':1485,'multiline':False]['text':' ES2017 draft rev 45e890512fd77add72cc0ee742785f9f6f6482de','line_number':1489,'multiline':False]['text':' 21.1.3.12 String.prototype.normalize ( [ form ] )','line_number':1490,'multiline':False]['text':'','line_number':1491,'multiline':False]['text':' String.prototype.normalize is only implementable if ICU's normalization','line_number':1492,'multiline':False]['text':' functionality is available.','line_number':1493,'multiline':False]['text':' Steps 1-2.','line_number':1497,'multiline':False]['text':' Step 3.','line_number':1508,'multiline':False]['text':' Step 4.','line_number':1511,'multiline':False]['text':' Step 5.','line_number':1517,'multiline':False]['text':' Latin-1 strings are already in Normalization Form C.','line_number':1533,'multiline':False]['text':' Step 7.','line_number':1535,'multiline':False]['text':' Step 6.','line_number':1540,'multiline':False]['text':' The unorm2_getXXXInstance() methods return a shared instance which must','line_number':1548,'multiline':False]['text':' not be deleted.','line_number':1549,'multiline':False]['text':' Return if the input string is already normalized.','line_number':1578,'multiline':False]['text':' Step 7.','line_number':1580,'multiline':False]['text':' Copy the already normalized prefix.','line_number':1592,'multiline':False]['text':' Step 7.','line_number':1619,'multiline':False]['text':' JS_HAS_INTL_API','line_number':1624,'multiline':False]['text':' check whether d is negative as size_t is unsigned','line_number':1679,'multiline':False]['text':'
 * Boyer-Moore-Horspool superlinear search for pat:patlen in text:textlen.
 * The patlen argument must be positive and no greater than sBMHPatLenMax.
 *
 * Return the index of pat in text, or -1 if not found.
 ','line_number':1718,'multiline':True]['text':' ISO-Latin-1 ','line_number':1724,'multiline':True]['text':' skip table element is uint8_t ','line_number':1725,'multiline':True]['text':' return value if pat is not ISO-Latin-1 ','line_number':1727,'multiline':True]['text':' safe: max string size ','line_number':1754,'multiline':True]['text':'
   * Given enough registers, the unrolled loop below is faster than the
   * following loop. 32-bit x86 does not have enough registers.
   ','line_number':1895,'multiline':True]['text':'
   * If the text or pattern string is short, BMH will be more expensive than
   * the basic linear scan due to initialization cost and a more complex loop
   * body. While the correct threshold is input-dependent, we can make a few
   * conservative observations:
   *  - When |textLen| is "big enough", the initialization time will be
   *    proportionally small, so the worst-case slowdown is minimized.
   *  - When |patLen| is "too small", even the best case for BMH will be
   *    slower than a simple scan for large |textLen| due to the more complex
   *    loop body of BMH.
   * From this, the values for "big enough" and "too small" are determined
   * empirically. See bug 526348.
   ','line_number':1911,'multiline':True]['text':'
   * For big patterns with large potential overlap we want the SIMD-optimized
   * speed of memcmp. For small patterns, a simple loop is faster. We also can't
   * use memcmp if one of the strings is TwoByte and the other is Latin-1.
   ','line_number':1931,'multiline':True]['text':' When an algorithm does not need a string represented as a single linear','line_number':1977,'multiline':False]['text':' array of characters, this range utility may be used to traverse the string a','line_number':1978,'multiline':False]['text':' sequence of linear arrays of characters. This avoids flattening ropes.','line_number':1979,'multiline':False]['text':' If malloc() shows up in any profiles from this vector, we can add a new','line_number':1981,'multiline':False]['text':' StackAllocPolicy which stashes a reusable freed-at-gc buffer in the cx.','line_number':1982,'multiline':False]['text':' Absolute offset from the beginning of the logical text string. ','line_number':2031,'multiline':True]['text':' Try to find a match within 'outer'. ','line_number':2036,'multiline':True]['text':' Matched! ','line_number':2042,'multiline':True]['text':' Try to find a match starting in 'outer' and running into other nodes. ','line_number':2046,'multiline':True]['text':' Matched! ','line_number':2075,'multiline':True]['text':' -1 because of *t++ above ','line_number':2076,'multiline':True]['text':'
 * RopeMatch takes the text to search and the pattern to search for in the text.
 * RopeMatch returns false on OOM and otherwise returns the match index through
 * the 'match' outparam (-1 for not found).
 ','line_number':2087,'multiline':True]['text':'
   * List of leaf nodes in the rope. If we run out of memory when trying to
   * append to this list, we can still fall back to StringMatch, so use the
   * system allocator so we don't report OOM in that case.
   ','line_number':2104,'multiline':True]['text':'
   * We don't want to do rope matching if there is a poor node-to-char ratio,
   * since this means spending a lot of time in the match loop below. We also
   * need to build the list of leaf nodes. Do both here: iterate over the
   * nodes so long as there are not too many.
   *
   * We also don't use rope matching if the rope contains both Latin-1 and
   * TwoByte nodes, to simplify the match algorithm.
   ','line_number':2111,'multiline':True]['text':' Only call IsRegExp if the first argument is definitely an object, so we','line_number':2169,'multiline':False]['text':' don't pay the cost of an additional function call in the common case.','line_number':2170,'multiline':False]['text':' ES2018 draft rev de77aaeffce115deaf948ed30c7dbe4c60983c0c','line_number':2189,'multiline':False]['text':' 21.1.3.7 String.prototype.includes ( searchString [ , position ] )','line_number':2190,'multiline':False]['text':' Steps 1-2.','line_number':2194,'multiline':False]['text':' Steps 3-4.','line_number':2200,'multiline':False]['text':' Step 5.','line_number':2205,'multiline':False]['text':' Step 6.','line_number':2211,'multiline':False]['text':' Step 7.','line_number':2226,'multiline':False]['text':' Step 8.','line_number':2229,'multiline':False]['text':' Steps 9-10.','line_number':2232,'multiline':False]['text':' ES6 20120927 draft 15.5.4.7. ','line_number':2242,'multiline':True]['text':' Steps 1, 2, and 3','line_number':2246,'multiline':False]['text':' Steps 4 and 5','line_number':2252,'multiline':False]['text':' Steps 6 and 7','line_number':2258,'multiline':False]['text':' Step 8','line_number':2273,'multiline':False]['text':' Step 9','line_number':2276,'multiline':False]['text':' AngularJS often invokes "false".indexOf("false"). This check should','line_number':2280,'multiline':False]['text':' be cheap enough to not hurt anything else.','line_number':2281,'multiline':False]['text':' Steps 10 and 11','line_number':2286,'multiline':False]['text':' ES2017 draft rev 6859bb9ccaea9c6ede81d71e5320e3833b92cb3e','line_number':2325,'multiline':False]['text':' 21.1.3.9 String.prototype.lastIndexOf ( searchString [ , position ] )','line_number':2326,'multiline':False]['text':' Steps 1-2.','line_number':2330,'multiline':False]['text':' Step 3.','line_number':2337,'multiline':False]['text':' Step 6.','line_number':2343,'multiline':False]['text':' Step 8.','line_number':2346,'multiline':False]['text':' Steps 4-5, 7.','line_number':2349,'multiline':False]['text':' Start searching here','line_number':2350,'multiline':False]['text':' Step 9.','line_number':2396,'multiline':False]['text':' ES2018 draft rev de77aaeffce115deaf948ed30c7dbe4c60983c0c','line_number':2423,'multiline':False]['text':' 21.1.3.20 String.prototype.startsWith ( searchString [ , position ] )','line_number':2424,'multiline':False]['text':' Steps 1-2.','line_number':2428,'multiline':False]['text':' Steps 3-4.','line_number':2435,'multiline':False]['text':' Step 5.','line_number':2440,'multiline':False]['text':' Step 6.','line_number':2446,'multiline':False]['text':' Step 7.','line_number':2461,'multiline':False]['text':' Step 8.','line_number':2464,'multiline':False]['text':' Step 9.','line_number':2467,'multiline':False]['text':' Step 10.','line_number':2470,'multiline':False]['text':' Steps 11-12.','line_number':2476,'multiline':False]['text':' ES2018 draft rev de77aaeffce115deaf948ed30c7dbe4c60983c0c','line_number':2486,'multiline':False]['text':' 21.1.3.6 String.prototype.endsWith ( searchString [ , endPosition ] )','line_number':2487,'multiline':False]['text':' Steps 1-2.','line_number':2491,'multiline':False]['text':' Steps 3-4.','line_number':2497,'multiline':False]['text':' Step 5.','line_number':2502,'multiline':False]['text':' Step 6.','line_number':2508,'multiline':False]['text':' Step 7.','line_number':2511,'multiline':False]['text':' Step 8.','line_number':2526,'multiline':False]['text':' Step 9.','line_number':2529,'multiline':False]['text':' Step 11 (reordered).','line_number':2532,'multiline':False]['text':' Step 10.','line_number':2538,'multiline':False]['text':' Steps 12-13.','line_number':2541,'multiline':False]['text':' Utility for building a rope (lazy concatenation) of strings.','line_number':2620,'multiline':False]['text':' anonymous namespace ','line_number':2652,'multiline':True]['text':'
 * Constructs a result string that looks like:
 *
 *      newstring = string[:matchStart] + repstr + string[matchEnd:]
 ','line_number':2654,'multiline':True]['text':'
   * If we are replacing over a rope, avoid flattening it by iterating
   * through it, building a new rope.
   ','line_number':2691,'multiline':True]['text':'
   * Special case when the pattern string is '', which matches to the
   * head of the string and doesn't overlap with any component of the rope.
   ','line_number':2702,'multiline':True]['text':'
       * We need to special-case any part of the rope that overlaps
       * with the replacement string.
       ','line_number':2719,'multiline':True]['text':'
         * If this part of the rope overlaps with the left side of
         * the pattern, then it must be the only one to overlap with
         * the first character in the pattern, so we include the
         * replacement string here.
         ','line_number':2724,'multiline':True]['text':'
       * If str runs off the end of the matched string, append the
       * last part of str.
       ','line_number':2736,'multiline':True]['text':' Move the pre-dollar chunk in bulk.','line_number':2770,'multiline':False]['text':' Move the rest char-by-char, interpreting dollars as we encounter them.','line_number':2775,'multiline':False]['text':' Eat one of the dollars.','line_number':2787,'multiline':False]['text':' The dollar we saw was not special (no matter what its mother told','line_number':2810,'multiline':False]['text':' it).','line_number':2811,'multiline':False]['text':' We always eat an extra char in the above switch.','line_number':2817,'multiline':False]['text':'
 * Perform a linear-scan dollar substitution on the replacement text.
 ','line_number':2823,'multiline':True]['text':'
   * Most probably:
   *
   *      len(newstr) >= len(orig) - len(match) + len(replacement)
   *
   * Note that dollar vars _could_ make the resulting text smaller than this.
   ','line_number':2836,'multiline':True]['text':' The pattern is empty, so we interleave the replacement string in-between','line_number':2882,'multiline':False]['text':' each character.','line_number':2883,'multiline':False]['text':' If it's true, we are sure that the result's length is, at least, the same','line_number':2905,'multiline':False]['text':' length as |str->length()|.','line_number':2906,'multiline':False]['text':' This is identical to "str.split(pattern).join(replacement)" except that we','line_number':2935,'multiline':False]['text':' do some deforestation optimization in Ion.','line_number':2936,'multiline':False]['text':'
   * |string| could be a rope, so we want to avoid flattening it for as
   * long as possible.
   ','line_number':3024,'multiline':True]['text':' https://tc39.es/proposal-string-replaceall/#sec-string.prototype.replaceall','line_number':3052,'multiline':False]['text':' Steps 7-16 when functionalReplace is false and searchString is not empty.','line_number':3053,'multiline':False]['text':'','line_number':3054,'multiline':False]['text':' The steps are quite different, for performance. Loops in steps 11 and 14','line_number':3055,'multiline':False]['text':' are fused. GetSubstitution is optimized away when possible.','line_number':3056,'multiline':False]['text':' Step 7.','line_number':3061,'multiline':False]['text':' Step 8 (advanceBy is equal to searchLength when searchLength > 0).','line_number':3070,'multiline':False]['text':' Step 9 (not needed in this implementation).','line_number':3072,'multiline':False]['text':' Step 10.','line_number':3074,'multiline':False]['text':' Find the first match.','line_number':3075,'multiline':False]['text':' Nothing to replace, so return early.','line_number':3078,'multiline':False]['text':' Step 11 (moved below).','line_number':3083,'multiline':False]['text':' Step 12.','line_number':3085,'multiline':False]['text':' Step 13.','line_number':3088,'multiline':False]['text':' If it's true, we are sure that the result's length is, at least, the same','line_number':3104,'multiline':False]['text':' length as |str->length()|.','line_number':3105,'multiline':False]['text':' Step 14.c.','line_number':3113,'multiline':False]['text':' Append the substring before the current match.','line_number':3114,'multiline':False]['text':' Steps 14.a-b and 14.d.','line_number':3120,'multiline':False]['text':' Append the replacement.','line_number':3121,'multiline':False]['text':' Step 14.e.','line_number':3134,'multiline':False]['text':' Step 11.','line_number':3137,'multiline':False]['text':' Find the next match.','line_number':3138,'multiline':False]['text':' Step 15.','line_number':3142,'multiline':False]['text':' Append the substring after the last match.','line_number':3143,'multiline':False]['text':' Step 16.','line_number':3150,'multiline':False]['text':' https://tc39.es/proposal-string-replaceall/#sec-string.prototype.replaceall','line_number':3154,'multiline':False]['text':' Steps 7-16 when functionalReplace is false and searchString is the empty','line_number':3155,'multiline':False]['text':' string.','line_number':3156,'multiline':False]['text':'','line_number':3157,'multiline':False]['text':' The steps are quite different, for performance. Loops in steps 11 and 14','line_number':3158,'multiline':False]['text':' are fused. GetSubstitution is optimized away when possible.','line_number':3159,'multiline':False]['text':' Step 7.','line_number':3163,'multiline':False]['text':' Step 8 (advanceBy is 1 when searchString is the empty string).','line_number':3167,'multiline':False]['text':' Steps 9-12 (trivial when searchString is the empty string).','line_number':3169,'multiline':False]['text':' Step 13.','line_number':3171,'multiline':False]['text':' Compute the exact result length when no substitutions take place.','line_number':3192,'multiline':False]['text':' Steps 11, 14.a-b and 14.d.','line_number':3215,'multiline':False]['text':' The empty string matches before each character.','line_number':3216,'multiline':False]['text':' Step 14.c.','line_number':3221,'multiline':False]['text':' Steps 11, 14.a-b and 14.d.','line_number':3227,'multiline':False]['text':' The empty string also matches at the end of the string.','line_number':3228,'multiline':False]['text':' Step 15 (not applicable when searchString is the empty string).','line_number':3233,'multiline':False]['text':' Step 16.','line_number':3236,'multiline':False]['text':' String.prototype.replaceAll (Stage 3 proposal)','line_number':3240,'multiline':False]['text':' https://tc39.es/proposal-string-replaceall/','line_number':3241,'multiline':False]['text':'','line_number':3242,'multiline':False]['text':' String.prototype.replaceAll ( searchValue, replaceValue )','line_number':3243,'multiline':False]['text':'','line_number':3244,'multiline':False]['text':' Steps 7-16 when functionalReplace is false.','line_number':3245,'multiline':False]['text':' Directly return when we're guaranteed to find no match.','line_number':3252,'multiline':False]['text':' The pattern is empty, so we interleave the replacement string in-between','line_number':3272,'multiline':False]['text':' each character.','line_number':3273,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.17 steps 4, 8, 12-18.','line_number':3312,'multiline':False]['text':' Step 12.','line_number':3319,'multiline':False]['text':' Step 12.a.','line_number':3321,'multiline':False]['text':' Step 12.b.','line_number':3324,'multiline':False]['text':' Steps 12.c-e.','line_number':3329,'multiline':False]['text':' Step 3 (reordered).','line_number':3333,'multiline':False]['text':' Step 8 (reordered).','line_number':3336,'multiline':False]['text':' Step 13.','line_number':3339,'multiline':False]['text':' Step 14.','line_number':3342,'multiline':False]['text':' Step 14.a.','line_number':3344,'multiline':False]['text':' Step 14.b.','line_number':3347,'multiline':False]['text':'','line_number':3348,'multiline':False]['text':' Our match algorithm differs from the spec in that it returns the','line_number':3349,'multiline':False]['text':' next index at which a match happens.  If no match happens we're','line_number':3350,'multiline':False]['text':' done.','line_number':3351,'multiline':False]['text':'','line_number':3352,'multiline':False]['text':' But what if the match is at the end of the string (and the string is','line_number':3353,'multiline':False]['text':' not empty)?  Per 14.c.i this shouldn't be a match, so we have to','line_number':3354,'multiline':False]['text':' specially exclude it.  Thus this case should hold:','line_number':3355,'multiline':False]['text':'','line_number':3356,'multiline':False]['text':'   var a = "abc".split(/\b/);','line_number':3357,'multiline':False]['text':'   assertEq(a.length, 1);','line_number':3358,'multiline':False]['text':'   assertEq(a[0], "abc");','line_number':3359,'multiline':False]['text':' Step 14.c.','line_number':3364,'multiline':False]['text':' Step 14.c.i.','line_number':3367,'multiline':False]['text':' Step 14.c.ii.','line_number':3373,'multiline':False]['text':' Step 14.c.ii.1.','line_number':3378,'multiline':False]['text':' Steps 14.c.ii.2-4.','line_number':3382,'multiline':False]['text':' Step 14.c.ii.5.','line_number':3387,'multiline':False]['text':' Step 14.c.ii.6.','line_number':3392,'multiline':False]['text':' Step 14.c.ii.7.','line_number':3395,'multiline':False]['text':' Step 15.','line_number':3399,'multiline':False]['text':' Steps 16-17.','line_number':3403,'multiline':False]['text':' Step 18.','line_number':3408,'multiline':False]['text':' Fast-path for splitting a string into a character array via split("").','line_number':3412,'multiline':False]['text':' Count the number of occurrences of patCh within text.','line_number':3460,'multiline':False]['text':' Handle zero-occurrence case - return input string in an array.','line_number':3468,'multiline':False]['text':' Create the result array for the substring values.','line_number':3473,'multiline':False]['text':' Add substrings.','line_number':3480,'multiline':False]['text':' Add substring for tail of string (after last match).','line_number':3495,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.17 steps 4, 8, 12-18.','line_number':3506,'multiline':False]['text':' Step 12.','line_number':3509,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.17 steps 4, 8, 12-18.','line_number':3526,'multiline':False]['text':' Java-like methods. ','line_number':3556,'multiline':True]['text':' Perl-ish methods (search is actually Python-esque). ','line_number':3587,'multiline':True]['text':' Python-esque sequence methods. ','line_number':3596,'multiline':True]['text':' HTML string methods. ','line_number':3602,'multiline':True]['text':' ES6 rev 27 (2014 Aug 24) 21.1.1','line_number':3619,'multiline':False]['text':' Optimize the single-char case.','line_number':3660,'multiline':False]['text':' Optimize the case where the result will definitely fit in an inline','line_number':3665,'multiline':False]['text':' string (thin or fat) and so we don't need to malloc the chars. (We could','line_number':3666,'multiline':False]['text':' cover some cases where args.length() goes up to','line_number':3667,'multiline':False]['text':' JSFatInlineString::MAX_LENGTH_LATIN1 if we also checked if the chars are','line_number':3668,'multiline':False]['text':' all Latin-1, but it doesn't seem worth the effort.)','line_number':3669,'multiline':False]['text':' String.fromCodePoint, Steps 5.a-b.','line_number':3724,'multiline':False]['text':' Fast path for the common case - the input is already an int32.','line_number':3726,'multiline':False]['text':' String.fromCodePoint, Steps 5.c-d.','line_number':3740,'multiline':False]['text':' Steps 1-4 (omitted).','line_number':3757,'multiline':False]['text':' Steps 5.a-d.','line_number':3759,'multiline':False]['text':' Steps 5.e, 6.','line_number':3765,'multiline':False]['text':' Steps 1-2 (omitted).','line_number':3784,'multiline':False]['text':' Step 3.','line_number':3786,'multiline':False]['text':' Steps 4-5.','line_number':3789,'multiline':False]['text':' Steps 5.a-d.','line_number':3792,'multiline':False]['text':' Step 5.e.','line_number':3798,'multiline':False]['text':' Step 6.','line_number':3802,'multiline':False]['text':' ES2017 draft rev 40edb3a95a475c1b251141ac681b8793129d9a6d','line_number':3812,'multiline':False]['text':' 21.1.2.2 String.fromCodePoint(...codePoints)','line_number':3813,'multiline':False]['text':' Optimize the single code-point case.','line_number':3817,'multiline':False]['text':' Optimize the case where the result will definitely fit in an inline','line_number':3822,'multiline':False]['text':' string (thin or fat) and so we don't need to malloc the chars. (We could','line_number':3823,'multiline':False]['text':' cover some cases where |args.length()| goes up to','line_number':3824,'multiline':False]['text':' JSFatInlineString::MAX_LENGTH_LATIN1 / 2 if we also checked if the chars','line_number':3825,'multiline':False]['text':' are all Latin-1, but it doesn't seem worth the effort.)','line_number':3826,'multiline':False]['text':' Steps 1-2 (omitted).','line_number':3831,'multiline':False]['text':' Step 3.','line_number':3833,'multiline':False]['text':' Steps 4-5.','line_number':3843,'multiline':False]['text':' Steps 5.a-d.','line_number':3846,'multiline':False]['text':' Step 5.e.','line_number':3852,'multiline':False]['text':' Step 6.','line_number':3856,'multiline':False]['text':' static ','line_number':3874,'multiline':True]['text':' Create "trimLeft" as an alias for "trimStart".','line_number':3904,'multiline':False]['text':' Create "trimRight" as an alias for "trimEnd".','line_number':3913,'multiline':False]['text':'
   * Define escape/unescape, the URI encode/decode functions, and maybe
   * uneval on the global object.
   ','line_number':3921,'multiline':True]['text':'
 * Uri reserved chars + #:
 * - 35: #
 * - 36: $
 * - 38: &
 * - 43: +
 * - 44: ,
 * - 47: /
 * - 58: :
 * - 59: ;
 * - 61: =
 * - 63: ?
 * - 64: @
 ','line_number':3944,'multiline':True]['text':' clang-format off','line_number':3959,'multiline':False]['text':'       0     1     2     3     4     5     6     7     8     9  ','line_number':3960,'multiline':True]['text':'  0 ','line_number':3961,'multiline':True]['text':'  1 ','line_number':3962,'multiline':True]['text':'  2 ','line_number':3963,'multiline':True]['text':'  3 ','line_number':3964,'multiline':True]['text':'  4 ','line_number':3965,'multiline':True]['text':'  5 ','line_number':3966,'multiline':True]['text':'  6 ','line_number':3967,'multiline':True]['text':'  7 ','line_number':3968,'multiline':True]['text':'  8 ','line_number':3969,'multiline':True]['text':'  9 ','line_number':3970,'multiline':True]['text':' 10 ','line_number':3971,'multiline':True]['text':' 11 ','line_number':3972,'multiline':True]['text':' 12 ','line_number':3973,'multiline':True]['text':' clang-format on','line_number':3974,'multiline':False]['text':'
 * Uri unescaped chars:
 * -      33: !
 * -      39: '
 * -      40: (
 * -      41: )
 * -      42: *
 * -      45: -
 * -      46: .
 * -  48..57: 0-9
 * -  65..90: A-Z
 * -      95: _
 * - 97..122: a-z
 * -     126: ~
 ','line_number':3977,'multiline':True]['text':' clang-format off','line_number':3993,'multiline':False]['text':'       0     1     2     3     4     5     6     7     8     9  ','line_number':3994,'multiline':True]['text':'  0 ','line_number':3995,'multiline':True]['text':'  1 ','line_number':3996,'multiline':True]['text':'  2 ','line_number':3997,'multiline':True]['text':'  3 ','line_number':3998,'multiline':True]['text':'  4 ','line_number':3999,'multiline':True]['text':'  5 ','line_number':4000,'multiline':True]['text':'  6 ','line_number':4001,'multiline':True]['text':'  7 ','line_number':4002,'multiline':True]['text':'  8 ','line_number':4003,'multiline':True]['text':'  9 ','line_number':4004,'multiline':True]['text':' 10 ','line_number':4005,'multiline':True]['text':' 11 ','line_number':4006,'multiline':True]['text':' 12 ','line_number':4007,'multiline':True]['text':' clang-format on','line_number':4008,'multiline':False]['text':'
 * ECMA 3, 15.1.3 URI Handling Function Properties
 *
 * The following are implementations of the algorithms
 * given in the ECMA specification for the hidden functions
 * 'Encode' and 'Decode'.
 ','line_number':4025,'multiline':True]['text':' Bug 1403318: GCC sometimes inlines this Encode function rather than the','line_number':4034,'multiline':False]['text':' caller Encode function. Annotate both functions with MOZ_NEVER_INLINE resp.','line_number':4035,'multiline':False]['text':' MOZ_ALWAYS_INLINE to ensure we get the desired inlining behavior.','line_number':4036,'multiline':False]['text':' NB: uppercase ','line_number':4045,'multiline':True]['text':' Get the templateObject that defines the shape and type of the output','line_number':4405,'multiline':False]['text':' object.','line_number':4406,'multiline':False]['text':' Store a Value for each pair.','line_number':4419,'multiline':False]['text':' Set the |index| property. (TemplateObject positions it in slot 0).','line_number':4423,'multiline':False]['text':' Set the |input| property. (TemplateObject positions it in slot 1).','line_number':4426,'multiline':False]