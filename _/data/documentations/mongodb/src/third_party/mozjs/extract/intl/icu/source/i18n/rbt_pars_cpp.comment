['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
 **********************************************************************
 *   Copyright (C) 1999-2016, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
 *   11/17/99    aliu        Creation.
 **********************************************************************
 ','line_number':3,'multiline':True]['text':' Operators','line_number':45,'multiline':False]['text':'=','line_number':46,'multiline':True]['text':'>','line_number':47,'multiline':True]['text':'<','line_number':48,'multiline':True]['text':'~','line_number':49,'multiline':True]['text':' internal rep of <> op','line_number':49,'multiline':False]['text':' Other special characters','line_number':51,'multiline':False]['text':''','line_number':52,'multiline':True]['text':'\','line_number':53,'multiline':True]['text':';','line_number':54,'multiline':True]['text':'#','line_number':55,'multiline':True]['text':'(','line_number':57,'multiline':True]['text':')','line_number':58,'multiline':True]['text':'{','line_number':59,'multiline':True]['text':'}','line_number':60,'multiline':True]['text':'|','line_number':61,'multiline':True]['text':'@','line_number':62,'multiline':True]['text':'^','line_number':63,'multiline':True]['text':'*','line_number':64,'multiline':True]['text':'+','line_number':65,'multiline':True]['text':'?','line_number':66,'multiline':True]['text':'.','line_number':68,'multiline':True]['text':' "[^[:Zp:][:Zl:]\r\n$]";','line_number':70,'multiline':False]['text':' A function is denoted &Source-Target/Variant(text)','line_number':75,'multiline':False]['text':'&','line_number':76,'multiline':True]['text':' Aliases for some of the syntax characters. These are provided so','line_number':78,'multiline':False]['text':' transliteration rules can be expressed in XML without clashing with','line_number':79,'multiline':False]['text':' XML syntax characters '<', '>', and '&'.','line_number':80,'multiline':False]['text':' Left Arrow','line_number':81,'multiline':False]['text':' Right Arrow','line_number':82,'multiline':False]['text':' Left Right Arrow','line_number':83,'multiline':False]['text':' Increment (~Greek Capital Delta)','line_number':84,'multiline':False]['text':' Special characters disallowed at the top level','line_number':86,'multiline':False]['text':' ")"','line_number':87,'multiline':False]['text':' Special characters disallowed within a segment','line_number':89,'multiline':False]['text':' "{}|@"','line_number':90,'multiline':False]['text':' Special characters disallowed within a function argument','line_number':92,'multiline':False]['text':' "^(.*+?{}|@"','line_number':93,'multiline':False]['text':' By definition, the ANCHOR_END special character is a','line_number':95,'multiline':False]['text':' trailing SymbolTable.SYMBOL_REF character.','line_number':96,'multiline':False]['text':' private static final char ANCHOR_END       = '$';','line_number':97,'multiline':False]['text':' "=><"','line_number':99,'multiline':False]['text':' "=><;"','line_number':105,'multiline':False]['text':' These are also used in Transliterator::toRules()','line_number':112,'multiline':False]['text':' ':', ':'','line_number':114,'multiline':False]['text':'
commented out until we do real ::BEGIN/::END functionality
static const int32_t BEGIN_TOKEN_LEN = 5;
static const UChar BEGIN_TOKEN[] = { 0x42, 0x45, 0x47, 0x49, 0x4e }; // 'BEGIN'

static const int32_t END_TOKEN_LEN = 3;
static const UChar END_TOKEN[] = { 0x45, 0x4e, 0x44 }; // 'END'
','line_number':116,'multiline':True]['text':'----------------------------------------------------------------------','line_number':127,'multiline':False]['text':' BEGIN ParseData','line_number':128,'multiline':False]['text':'----------------------------------------------------------------------','line_number':129,'multiline':False]['text':'*
 * This class implements the SymbolTable interface.  It is used
 * during parsing to give UnicodeSet access to variables that
 * have been defined so far.  Note that it uses variablesVector,
 * _not_ data.setVariables.
 ','line_number':131,'multiline':True]['text':' alias','line_number':139,'multiline':False]['text':' alias','line_number':141,'multiline':False]['text':' alias','line_number':143,'multiline':False]['text':'*
     * Return true if the given character is a matcher standin or a plain
     * character (non standin).
     ','line_number':157,'multiline':True]['text':'*
     * Return true if the given character is a replacer standin or a plain
     * character (non standin).
     ','line_number':163,'multiline':True]['text':' forbid copying of this class','line_number':170,'multiline':False]['text':' forbid copying of this class','line_number':171,'multiline':False]['text':'*
 * Implement SymbolTable API.
 ','line_number':181,'multiline':True]['text':'*
 * Implement SymbolTable API.
 ','line_number':188,'multiline':True]['text':' Note that we cannot use data.lookupSet() because the','line_number':192,'multiline':False]['text':' set array has not been constructed yet.','line_number':193,'multiline':False]['text':'*
 * Implement SymbolTable API.  Parse out a symbol reference
 * name.
 ','line_number':204,'multiline':True]['text':' No valid name chars','line_number':220,'multiline':False]['text':' Indicate failure with empty string','line_number':221,'multiline':False]['text':' Note that we cannot use data.lookup() because the','line_number':229,'multiline':False]['text':' set array has not been constructed yet.','line_number':230,'multiline':False]['text':'*
 * Return true if the given character is a replacer standin or a plain
 * character (non standin).
 ','line_number':239,'multiline':True]['text':' Note that we cannot use data.lookup() because the','line_number':244,'multiline':False]['text':' set array has not been constructed yet.','line_number':245,'multiline':False]['text':'----------------------------------------------------------------------','line_number':254,'multiline':False]['text':' BEGIN RuleHalf','line_number':255,'multiline':False]['text':'----------------------------------------------------------------------','line_number':256,'multiline':False]['text':'*
 * A class representing one side of a rule.  This class knows how to
 * parse half of a rule.  It is tightly coupled to the method
 * RuleBasedTransliterator.Parser.parseRule().
 ','line_number':258,'multiline':True]['text':' position of cursor in text','line_number':269,'multiline':False]['text':' position of ante context marker '{' in text','line_number':270,'multiline':False]['text':' position of post context marker '}' in text','line_number':271,'multiline':False]['text':' Record the offset to the cursor either to the left or to the','line_number':273,'multiline':False]['text':' right of the key.  This is indicated by characters on the output','line_number':274,'multiline':False]['text':' side that allow the cursor to be positioned arbitrarily within','line_number':275,'multiline':False]['text':' the matching text.  For example, abc{def} > | @@@ xyz; changes','line_number':276,'multiline':False]['text':' def to xyz and moves the cursor to before abc.  Offset characters','line_number':277,'multiline':False]['text':' must be at the start or end, and they cannot move the cursor past','line_number':278,'multiline':False]['text':' the ante- or postcontext text.  Placeholders are only valid in','line_number':279,'multiline':False]['text':' output text.  The length of the ante and post context is','line_number':280,'multiline':False]['text':' determined at runtime, because of supplementals and quantifiers.','line_number':281,'multiline':False]['text':' only nonzero on output side','line_number':282,'multiline':False]['text':' Position of first CURSOR_OFFSET on _right_.  This will be -1','line_number':284,'multiline':False]['text':' for |@, -2 for |@@, etc., and 1 for @|, 2 for @@|, etc.','line_number':285,'multiline':False]['text':'*
     * The segment number from 1..n of the next '(' we see
     * during parsing; 1-based.
     ','line_number':291,'multiline':True]['text':'--------------------------------------------------','line_number':299,'multiline':False]['text':' Methods','line_number':300,'multiline':False]['text':'*
     * Remove context.
     ','line_number':313,'multiline':True]['text':'*
     * Return true if this half looks like valid output, that is, does not
     * contain quantifiers or other special input-only elements.
     ','line_number':318,'multiline':True]['text':'*
     * Return true if this half looks like valid input, that is, does not
     * contain functions or other special output-only elements.
     ','line_number':324,'multiline':True]['text':' Disallowed methods; no impl.','line_number':338,'multiline':False]['text':'*
 * Parse one side of a rule, stopping at either the limit,
 * the END_OF_RULE character, or an operator.
 * @return the index after the terminating character, or
 * if limit was reached, limit
 ','line_number':358,'multiline':True]['text':'*
 * Parse a section of one side of a rule, stopping at either
 * the limit, the END_OF_RULE character, an operator, or a
 * segment close character.  This method parses both a
 * top-level rule half and a segment within such a rule half.
 * It calls itself recursively to parse segments and nested
 * segments.
 * @param buf buffer into which to accumulate the rule pattern
 * characters, either literal characters from the rule or
 * standins for UnicodeMatcher objects including segments.
 * @param illegal the set of special characters that is illegal during
 * this parse.
 * @param isSegment if true, then we've already seen a '(' and
 * pos on entry points right after it.  Accumulate everything
 * up to the closing ')', put it in a segment matcher object,
 * generate a standin for it, and add the standin to buf.  As
 * a side effect, update the segments vector with a reference
 * to the segment matcher.  This works recursively for nested
 * segments.  If isSegment is false, just accumulate
 * characters into buf.
 * @return the index after the terminating character, or
 * if limit was reached, limit
 ','line_number':376,'multiline':True]['text':' Most recent 'single quoted string'','line_number':407,'multiline':False]['text':' Most recent $variableReference','line_number':409,'multiline':False]['text':' Since all syntax characters are in the BMP, fetching','line_number':414,'multiline':False]['text':' 16-bit code units suffices here.','line_number':415,'multiline':False]['text':' Ignore whitespace.  Note that this is not Unicode','line_number':418,'multiline':False]['text':' spaces, but Java spaces -- a subset, representing','line_number':419,'multiline':False]['text':' whitespace likely to be seen in code.','line_number':420,'multiline':False]['text':' Unclosed segment','line_number':425,'multiline':False]['text':' Text after a presumed end anchor is a syntax err','line_number':431,'multiline':False]['text':' Backup to opening '['','line_number':435,'multiline':False]['text':' Handle escapes','line_number':443,'multiline':False]['text':' pos is already past '\\'','line_number':448,'multiline':False]['text':' Handle quoted matter','line_number':458,'multiline':False]['text':' Parse [''] outside quotes as [']','line_number':462,'multiline':False]['text':' This loop picks up a run of quoted text of the
                 * form 'aaaa' each time through.  If this run
                 * hasn't really ended ('aaaa''bbbb') then it keeps
                 * looping, each time adding on a new run.  When it
                 * reaches the final quote it breaks.
                 ','line_number':465,'multiline':True]['text':' Parse [''] inside quotes as [']','line_number':481,'multiline':False]['text':' Continue looping','line_number':483,'multiline':False]['text':'------------------------------------------------------','line_number':509,'multiline':False]['text':' Elements allowed within and out of segments','line_number':510,'multiline':False]['text':'------------------------------------------------------','line_number':511,'multiline':False]['text':' bufSegStart is the offset in buf to the first','line_number':522,'multiline':False]['text':' character of the segment we are parsing.','line_number':523,'multiline':False]['text':' Record segment number now, since nextSegmentNumber','line_number':526,'multiline':False]['text':' will be incremented during the call to parseSection','line_number':527,'multiline':False]['text':' if there are nested segments.','line_number':528,'multiline':False]['text':' 1-based','line_number':529,'multiline':False]['text':' Parse the segment','line_number':531,'multiline':False]['text':' After parsing a segment, the relevant characters are','line_number':534,'multiline':False]['text':' in buf, starting at offset bufSegStart.  Extract them','line_number':535,'multiline':False]['text':' into a string matcher, and replace them with a','line_number':536,'multiline':False]['text':' standin for that matcher.','line_number':537,'multiline':False]['text':' Record and associate object and segment number','line_number':545,'multiline':False]['text':' The next character MUST be a segment open','line_number':557,'multiline':False]['text':' bufSegStart is the offset in buf to the first','line_number':569,'multiline':False]['text':' character of the segment we are parsing.','line_number':570,'multiline':False]['text':' Parse the segment','line_number':573,'multiline':False]['text':' After parsing a segment, the relevant characters are','line_number':576,'multiline':False]['text':' in buf, starting at offset bufSegStart.','line_number':577,'multiline':False]['text':' Replace the buffer contents with a stand-in','line_number':586,'multiline':False]['text':' Handle variable references and segment references "$1" .. "$9"','line_number':592,'multiline':False]['text':' A variable reference must be followed immediately','line_number':594,'multiline':False]['text':' by a Unicode identifier start and zero or more','line_number':595,'multiline':False]['text':' Unicode identifier part characters, or by a digit','line_number':596,'multiline':False]['text':' 1..9 if it is a segment reference.','line_number':597,'multiline':False]['text':' A variable ref character at the end acts as','line_number':599,'multiline':False]['text':' an anchor to the context limit, as in perl.','line_number':600,'multiline':False]['text':' Parse "$1" "$2" .. "$9" .. (no upper limit)','line_number':604,'multiline':False]['text':' This means the '$' was not followed by a','line_number':619,'multiline':False]['text':' valid name.  Try to interpret it as an','line_number':620,'multiline':False]['text':' end anchor then.  If this also doesn't work','line_number':621,'multiline':False]['text':' (if we see a following character) then signal','line_number':622,'multiline':False]['text':' an error.','line_number':623,'multiline':False]['text':' If this is a variable definition statement,','line_number':628,'multiline':False]['text':' then the LHS variable will be undefined.  In','line_number':629,'multiline':False]['text':' that case appendVariableDef() will append the','line_number':630,'multiline':False]['text':' special placeholder char variableLimit-1.','line_number':631,'multiline':False]['text':' Quantifiers.  We handle single characters, quoted strings,','line_number':644,'multiline':False]['text':' variable references, and segments.','line_number':645,'multiline':False]['text':'  a+      matches  aaa','line_number':646,'multiline':False]['text':'  'foo'+  matches  foofoofoo','line_number':647,'multiline':False]['text':'  $v+     matches  xyxyxy if $v == xy','line_number':648,'multiline':False]['text':'  (seg)+  matches  segsegseg','line_number':649,'multiline':False]['text':' The */+ immediately follows '('','line_number':652,'multiline':False]['text':' The */+ follows an isolated character or quote','line_number':657,'multiline':False]['text':' or variable reference','line_number':658,'multiline':False]['text':' The */+ follows a 'quoted string'','line_number':660,'multiline':False]['text':' The */+ follows a $variableReference','line_number':664,'multiline':False]['text':' The */+ follows a single character, possibly','line_number':668,'multiline':False]['text':' a segment standin','line_number':669,'multiline':False]['text':' case KLEENE_STAR:','line_number':689,'multiline':False]['text':'    do nothing -- min, max already set','line_number':690,'multiline':False]['text':'------------------------------------------------------','line_number':701,'multiline':False]['text':' Elements allowed ONLY WITHIN segments','line_number':702,'multiline':False]['text':'------------------------------------------------------','line_number':703,'multiline':False]['text':' assert(isSegment);','line_number':705,'multiline':False]['text':' We're done parsing a segment.','line_number':706,'multiline':False]['text':'------------------------------------------------------','line_number':710,'multiline':False]['text':' Elements allowed ONLY OUTSIDE segments','line_number':711,'multiline':False]['text':'------------------------------------------------------','line_number':712,'multiline':False]['text':'------------------------------------------------------','line_number':755,'multiline':False]['text':' Non-special characters','line_number':756,'multiline':False]['text':'------------------------------------------------------','line_number':757,'multiline':False]['text':' Disallow unquoted characters other than [0-9A-Za-z]','line_number':759,'multiline':False]['text':' in the printable ASCII range.  These characters are','line_number':760,'multiline':False]['text':' reserved for possible future use.','line_number':761,'multiline':False]['text':''0'','line_number':763,'multiline':True]['text':''9'','line_number':763,'multiline':True]['text':''A'','line_number':764,'multiline':True]['text':''Z'','line_number':764,'multiline':True]['text':''a'','line_number':765,'multiline':True]['text':''z'','line_number':765,'multiline':True]['text':'*
 * Remove context.
 ','line_number':776,'multiline':True]['text':'text = text.substring(ante < 0 ? 0 : ante,','line_number':780,'multiline':False]['text':'                      post < 0 ? text.length() : post);','line_number':781,'multiline':False]['text':'*
 * Return true if this half looks like valid output, that is, does not
 * contain quantifiers or other special input-only elements.
 ','line_number':792,'multiline':True]['text':'*
 * Return true if this half looks like valid input, that is, does not
 * contain functions or other special output-only elements.
 ','line_number':807,'multiline':True]['text':'----------------------------------------------------------------------','line_number':822,'multiline':False]['text':' PUBLIC API','line_number':823,'multiline':False]['text':'----------------------------------------------------------------------','line_number':824,'multiline':False]['text':'*
 * Constructor.
 ','line_number':826,'multiline':True]['text':'*
 * Destructor.
 ','line_number':842,'multiline':True]['text':'*
 * Return the compound filter parsed by parse().  Caller owns result.
 ','line_number':865,'multiline':True]['text':'----------------------------------------------------------------------','line_number':874,'multiline':False]['text':' Private implementation','line_number':875,'multiline':False]['text':'----------------------------------------------------------------------','line_number':876,'multiline':False]['text':'*
 * Parse the given string as a sequence of rules, separated by newline
 * characters ('\n'), and cause this object to implement those rules.  Any
 * previous rules are discarded.  Typically this method is called exactly
 * once, during construction.
 * @exception IllegalArgumentException if there is a syntax error in the
 * rules
 ','line_number':878,'multiline':True]['text':' Clear error struct','line_number':890,'multiline':False]['text':' used for memory allocation error checking','line_number':924,'multiline':False]['text':' scratch','line_number':925,'multiline':False]['text':' The compound filter offset is an index into idBlockResult.','line_number':930,'multiline':False]['text':' If it is 0, then the compound filter occurred at the start,','line_number':931,'multiline':False]['text':' and it is the offset to the _start_ of the compound filter','line_number':932,'multiline':False]['text':' pattern.  Otherwise it is the offset to the _limit_ of the','line_number':933,'multiline':False]['text':' compound filter pattern within idBlockResult.','line_number':934,'multiline':False]['text':' Ignore leading whitespace.','line_number':941,'multiline':False]['text':' Skip lines starting with the comment character','line_number':944,'multiline':False]['text':'\n','line_number':946,'multiline':True]['text':' No "\n" found; rest of rule is a comment','line_number':948,'multiline':False]['text':' Either fall out or restart with next line','line_number':950,'multiline':False]['text':' skip empty rules','line_number':953,'multiline':False]['text':' keep track of how many rules we've seen','line_number':957,'multiline':False]['text':' We've found the start of a rule or ID.  c is its first','line_number':960,'multiline':False]['text':' character, and pos points past c.','line_number':961,'multiline':False]['text':' Look for an ID token.  Must have at least ID_TOKEN_LEN + 1','line_number':963,'multiline':False]['text':' chars left.','line_number':964,'multiline':False]['text':' Successful ::ID parse.','line_number':990,'multiline':False]['text':' Couldn't parse an ID.  Try to parse a global filter','line_number':1000,'multiline':False]['text':' Multiple compound filters','line_number':1008,'multiline':False]['text':' Invalid ::id','line_number':1019,'multiline':False]['text':' Can be parsed as neither an ID nor a global filter','line_number':1020,'multiline':False]['text':' NULL pointer check','line_number':1029,'multiline':False]['text':' NULL pointer check','line_number':1041,'multiline':False]['text':' By default, rules use part of the private use area','line_number':1048,'multiline':False]['text':' E000..F8FF for variables and other stand-ins.  Currently','line_number':1049,'multiline':False]['text':' the range F000..F8FF is typically sufficient.  The 'use','line_number':1050,'multiline':False]['text':' variable range' pragma allows rule sets to modify this.','line_number':1051,'multiline':False]['text':' Parse a rule','line_number':1061,'multiline':False]['text':' NULL pointer check','line_number':1070,'multiline':False]['text':' Convert the set vector to an array','line_number':1088,'multiline':False]['text':' NULL pointer check','line_number':1097,'multiline':False]['text':' keeps them from getting deleted when we succeed','line_number':1124,'multiline':False]['text':' Index the rules','line_number':1126,'multiline':False]['text':'*
 * Set the variable range to [start, end] (inclusive).
 ','line_number':1144,'multiline':True]['text':'*
 * Assert that the given character is NOT within the variable range.
 * If it is, return FALSE.  This is necessary to ensure that the
 * variable range does not overlap characters used in a rule.
 ','line_number':1160,'multiline':True]['text':'*
 * Set the maximum backup to 'backup', in response to a pragma
 * statement.
 ','line_number':1169,'multiline':True]['text':'backup','line_number':1173,'multiline':True]['text':'TODO Finish','line_number':1174,'multiline':False]['text':'*
 * Begin normalizing all rules using the given mode, in response
 * to a pragma statement.
 ','line_number':1177,'multiline':True]['text':'mode','line_number':1181,'multiline':True]['text':'TODO Finish','line_number':1182,'multiline':False]['text':' "use "','line_number':1185,'multiline':False]['text':' "~variable range # #~;"','line_number':1187,'multiline':False]['text':' "~maximum backup #~;"','line_number':1189,'multiline':False]['text':' "~nfd rules~;"','line_number':1191,'multiline':False]['text':' "~nfc rules~;"','line_number':1193,'multiline':False]['text':'*
 * Return true if the given rule looks like a pragma.
 * @param pos offset to the first non-whitespace character
 * of the rule.
 * @param limit pointer past the last character of the rule.
 ','line_number':1195,'multiline':True]['text':' Must start with /use\s/i','line_number':1202,'multiline':False]['text':'*
 * Parse a pragma.  This method assumes resemblesPragma() has
 * already returned true.
 * @param pos offset to the first non-whitespace character
 * of the rule.
 * @param limit pointer past the last character of the rule.
 * @return the position index after the final ';' of the pragma,
 * or -1 on failure.
 ','line_number':1206,'multiline':True]['text':' resemblesPragma() has already returned true, so we','line_number':1218,'multiline':False]['text':' know that pos points to /use\s/i; we can skip 4 characters','line_number':1219,'multiline':False]['text':' immediately','line_number':1220,'multiline':False]['text':' Here are the pragmas we recognize:','line_number':1223,'multiline':False]['text':' use variable range 0xE000 0xEFFF;','line_number':1224,'multiline':False]['text':' use maximum backup 16;','line_number':1225,'multiline':False]['text':' use nfd rules;','line_number':1226,'multiline':False]['text':' use nfc rules;','line_number':1227,'multiline':False]['text':' Syntax error: unable to parse pragma','line_number':1252,'multiline':False]['text':'*
 * MAIN PARSER.  Parse the next rule in the given rule string, starting
 * at pos.  Return the index after the last character parsed.  Do not
 * parse characters at or after limit.
 *
 * Important:  The character at pos must be a non-whitespace character
 * that is not the comment character.
 *
 * This method handles quoting, escaping, and whitespace removal.  It
 * parses the end-of-rule character.  It recognizes context and cursor
 * indicators.  Once it does a lexical breakdown of the rule at pos, it
 * creates a rule object and adds it to our rule list.
 ','line_number':1256,'multiline':True]['text':' Locate the left side, operator, and right side','line_number':1270,'multiline':False]['text':' Set up segments data','line_number':1275,'multiline':False]['text':' Use pointers to automatics to make swapping possible.','line_number':1279,'multiline':False]['text':' Found an operator char.  Check for forward-reverse operator.','line_number':1295,'multiline':False]['text':' Translate alternate op characters.','line_number':1302,'multiline':False]['text':' RuleHalf parser must have terminated at an operator','line_number':1324,'multiline':False]['text':' LHS is the name.  RHS is a single character, either a literal','line_number':1330,'multiline':False]['text':' or a set (already parsed).  If RHS is longer than one','line_number':1331,'multiline':False]['text':' character, it is either a multi-character string, or multiple','line_number':1332,'multiline':False]['text':' sets, or a mixture of chars and sets -- syntax error.','line_number':1333,'multiline':False]['text':' We expect to see a single undefined variable (the one being','line_number':1335,'multiline':False]['text':' defined).','line_number':1336,'multiline':False]['text':' "Missing '$' or duplicate definition"','line_number':1338,'multiline':False]['text':' "Malformed LHS"','line_number':1342,'multiline':False]['text':' We allow anything on the right, including an empty string.','line_number':1349,'multiline':False]['text':' NULL pointer check','line_number':1351,'multiline':False]['text':' If this is not a variable definition rule, we shouldn't have','line_number':1360,'multiline':False]['text':' any undefined variable names.','line_number':1361,'multiline':False]['text':' "Undefined variable $" + undefinedVariableName,','line_number':1363,'multiline':False]['text':' Verify segments','line_number':1368,'multiline':False]['text':' will never happen','line_number':1374,'multiline':False]['text':' will never happen','line_number':1379,'multiline':False]['text':' If the direction we want doesn't match the rule','line_number':1383,'multiline':False]['text':' direction, do nothing.','line_number':1384,'multiline':False]['text':' Transform the rule into a forward rule by swapping the','line_number':1390,'multiline':False]['text':' sides if necessary.','line_number':1391,'multiline':False]['text':' Remove non-applicable elements in forward-reverse','line_number':1397,'multiline':False]['text':' rules.  Bidirectional rules ignore elements that do not','line_number':1398,'multiline':False]['text':' apply.','line_number':1399,'multiline':False]['text':' Normalize context','line_number':1406,'multiline':False]['text':' Context is only allowed on the input side.  Cursors are only','line_number':1414,'multiline':False]['text':' allowed on the output side.  Segment delimiters can only appear','line_number':1415,'multiline':False]['text':' on the left, and references on the right.  Cursor offset','line_number':1416,'multiline':False]['text':' cannot appear without an explicit cursor.  Cursor offset','line_number':1417,'multiline':False]['text':' cannot place the cursor outside the limits of the context.','line_number':1418,'multiline':False]['text':' Anchors are only allowed on the input side.','line_number':1419,'multiline':False]['text':' - The following two checks were used to ensure that the','line_number':1422,'multiline':False]['text':' - the cursor offset stayed within the ante- or postcontext.','line_number':1423,'multiline':False]['text':' - However, with the addition of quantifiers, we have to','line_number':1424,'multiline':False]['text':' - allow arbitrary cursor offsets and do runtime checking.','line_number':1425,'multiline':False]['text':'(right->cursorOffset > (left->text.length() - left->post)) ||','line_number':1426,'multiline':False]['text':'(-right->cursorOffset > left->ante) ||','line_number':1427,'multiline':False]['text':' Flatten segment objects vector to an array','line_number':1435,'multiline':False]['text':' Null pointer check','line_number':1439,'multiline':False]['text':'Null pointer check','line_number':1453,'multiline':False]['text':'*
 * Called by main parser upon syntax error.  Search the rule string
 * for the probable end of the rule.  Of course, if the error is that
 * the end of rule marker is missing, then the rule end will not be found.
 * In any case the rule start will be correctly reported.
 * @param msg error description
 * @param rule pattern string
 * @param start position of first character of current rule
 ','line_number':1464,'multiline':True]['text':' we are not using line numbers ','line_number':1479,'multiline':True]['text':' for pre-context','line_number':1481,'multiline':False]['text':'null terminate the buffer','line_number':1487,'multiline':False]['text':'for post-context','line_number':1490,'multiline':False]['text':'null terminate the buffer','line_number':1495,'multiline':False]['text':'*
 * Parse a UnicodeSet out, store it, and return the stand-in character
 * used to represent it.
 ','line_number':1503,'multiline':True]['text':' Null pointer check','line_number':1511,'multiline':False]['text':' Return empty character with error.','line_number':1514,'multiline':False]['text':'*
 * Generate and return a stand-in for a new UnicodeFunctor.  Store
 * the matcher (adopt it).
 ','line_number':1520,'multiline':True]['text':' assert(obj != null);','line_number':1525,'multiline':False]['text':' Look up previous stand-in, if any.  This is a short list','line_number':1527,'multiline':False]['text':' (typical n is 0, 1, or 2); linear search is optimal.','line_number':1528,'multiline':False]['text':' [sic] pointer comparison','line_number':1530,'multiline':False]['text':'*
 * Return the standin for segment seg (1-based).
 ','line_number':1544,'multiline':True]['text':' Special character used to indicate an empty spot','line_number':1548,'multiline':False]['text':' Set a placeholder in the primary variables vector that will be','line_number':1560,'multiline':False]['text':' filled in later by setSegmentObject().  We know that we will get','line_number':1561,'multiline':False]['text':' called first because setSegmentObject() will call us.','line_number':1562,'multiline':False]['text':'*
 * Set the object for segment seg (1-based).
 ','line_number':1569,'multiline':True]['text':' Since we call parseSection() recursively, nested','line_number':1573,'multiline':False]['text':' segments will result in segment i+1 getting parsed','line_number':1574,'multiline':False]['text':' and stored before segment i; be careful with the','line_number':1575,'multiline':False]['text':' vector handling here.','line_number':1576,'multiline':False]['text':' should never happen','line_number':1583,'multiline':False]['text':'*
 * Return the stand-in for the dot set.  It is allocated the first
 * time and reused thereafter.
 ','line_number':1591,'multiline':True]['text':' Null pointer check.','line_number':1598,'multiline':False]['text':'*
 * Append the value of the given variable name to the given
 * UnicodeString.
 ','line_number':1608,'multiline':True]['text':' We allow one undefined variable so that variable definition','line_number':1617,'multiline':False]['text':' statements work.  For the first undefined variable we return','line_number':1618,'multiline':False]['text':' the special placeholder variableLimit-1, and save the variable','line_number':1619,'multiline':False]['text':' name.','line_number':1620,'multiline':False]['text':' throw new RuntimeException("Private use variables exhausted");','line_number':1624,'multiline':False]['text':'throw new IllegalArgumentException("Undefined variable $"','line_number':1630,'multiline':False]['text':'                                   + name);','line_number':1631,'multiline':False]['text':'*
 * Glue method to get around access restrictions in C++.
 ','line_number':1640,'multiline':True]['text':'Transliterator* TransliteratorParser::createBasicInstance(const UnicodeString& id, const UnicodeString* canonID) {
    return Transliterator::createBasicInstance(id, canonID);
}','line_number':1643,'multiline':True]['text':'const UChar *sourceStart = source;','line_number':1653,'multiline':False]['text':' read the rules into the buffer ','line_number':1663,'multiline':True]['text':' skip comments and all preceding spaces ','line_number':1674,'multiline':True]['text':' A backslash at the end of a line. ','line_number':1693,'multiline':True]['text':' Since we're stripping lines, ignore the backslash. ','line_number':1694,'multiline':True]['text':' \u seen. \U isn't unescaped. ','line_number':1698,'multiline':True]['text':' It was escaped for a reason. Write what it was suppose to be. ','line_number':1709,'multiline':True]['text':' \' seen. Make sure we don't do anything when we see it again. ','line_number':1715,'multiline':True]['text':' ignore spaces carriage returns, and all leading spaces on the next line.
            * and line feed unless in the form \uXXXX
            ','line_number':1722,'multiline':True]['text':' Append UChar * after dissembling if c > 0xffff','line_number':1736,'multiline':True]['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':1747,'multiline':True]