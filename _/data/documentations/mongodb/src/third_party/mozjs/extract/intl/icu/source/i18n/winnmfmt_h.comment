['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
********************************************************************************
*   Copyright (C) 2005-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
********************************************************************************
*
* File WINNMFMT.H
*
********************************************************************************
','line_number':3,'multiline':True]['text':'*
 * \file 
 * \brief C++ API: Format numbers using Windows API.
 ','line_number':29,'multiline':True]['text':'*
     * Format a double number. Concrete subclasses must implement
     * these pure virtual methods.
     *
     * @param number    The value to be formatted.
     * @param appendTo  Output parameter to receive result.
     *                  Result is appended to existing contents.
     * @param pos       On input: an alignment field, if desired.
     *                  On output: the offsets of the alignment field.
     * @return          Reference to 'appendTo' parameter.
     ','line_number':51,'multiline':True]['text':'*
     * Format a long number. Concrete subclasses must implement
     * these pure virtual methods.
     *
     * @param number    The value to be formatted.
     * @param appendTo  Output parameter to receive result.
     *                  Result is appended to existing contents.
     * @param pos       On input: an alignment field, if desired.
     *                  On output: the offsets of the alignment field.
     * @return          Reference to 'appendTo' parameter.
    ','line_number':65,'multiline':True]['text':'*
     * Format an int64 number.
     *
     * @param number    The value to be formatted.
     * @param appendTo  Output parameter to receive result.
     *                  Result is appended to existing contents.
     * @param pos       On input: an alignment field, if desired.
     *                  On output: the offsets of the alignment field.
     * @return          Reference to 'appendTo' parameter.
    ','line_number':80,'multiline':True]['text':' Use the default behavior for the following.','line_number':96,'multiline':False]['text':'    virtual UnicodeString &format(double number, UnicodeString &appendTo) const;','line_number':97,'multiline':False]['text':'    virtual UnicodeString &format(int32_t number, UnicodeString &appendTo) const;','line_number':98,'multiline':False]['text':'    virtual UnicodeString &format(int64_t number, UnicodeString &appendTo) const;','line_number':99,'multiline':False]['text':'*
     * Sets the maximum number of digits allowed in the fraction portion of a
     * number. maximumFractionDigits must be >= minimumFractionDigits.  If the
     * new value for maximumFractionDigits is less than the current value
     * of minimumFractionDigits, then minimumFractionDigits will also be set to
     * the new value.
     * @param newValue    the new value to be set.
     * @see getMaximumFractionDigits
     ','line_number':103,'multiline':True]['text':'*
     * Sets the minimum number of digits allowed in the fraction portion of a
     * number. minimumFractionDigits must be &lt;= maximumFractionDigits.   If the
     * new value for minimumFractionDigits exceeds the current value
     * of maximumFractionDigits, then maximumIntegerDigits will also be set to
     * the new value
     * @param newValue    the new value to be set.
     * @see getMinimumFractionDigits
     ','line_number':114,'multiline':True]['text':'*
     * Return the class ID for this class. This is useful only for comparing to
     * a return value from getDynamicClassID(). For example:
     * <pre>
     * .   Base* polymorphic_pointer = createPolymorphicObject();
     * .   if (polymorphic_pointer->getDynamicClassID() ==
     * .       derived::getStaticClassID()) ...
     * </pre>
     * @return          The class ID for all objects of this class.
     ','line_number':125,'multiline':True]['text':'*
     * Returns a unique class ID POLYMORPHICALLY. Pure virtual override. This
     * method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone()
     * methods call this method.
     *
     * @return          The class ID for this object. All objects of a
     *                  given class have the same class ID.  Objects of
     *                  other classes have different class IDs.
     ','line_number':137,'multiline':True]['text':' Stores the equivalent Windows locale name.','line_number':158,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':163,'multiline':True]['text':' U_PLATFORM_USES_ONLY_WIN32_API','line_number':165,'multiline':False]['text':' __WINNMFMT','line_number':167,'multiline':False]