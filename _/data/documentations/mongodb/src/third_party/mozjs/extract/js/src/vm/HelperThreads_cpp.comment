['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' mozilla::Utf8Unit','line_number':12,'multiline':False]['text':' frontend::{CompilationStencil, ExtensibleCompilationStencil, CompilationInput, CompilationGCOutput, BorrowingCompilationStencil}','line_number':17,'multiline':False]['text':' frontend::ParserAtomsTable','line_number':18,'multiline':False]['text':' gc::MergeRealms','line_number':19,'multiline':False]['text':' JS::ContextOptions','line_number':22,'multiline':False]['text':' js::ReportOverRecursed','line_number':23,'multiline':False]['text':' JS::OffThreadToken, JS::OffThreadCompileCallback','line_number':25,'multiline':False]['text':' namespace js','line_number':64,'multiline':False]['text':' It's extremely rare for SpiderMonkey to have more than a few cores worth','line_number':90,'multiline':False]['text':' of work. At higher core counts, performance can even decrease due to NUMA','line_number':91,'multiline':False]['text':' (and SpiderMonkey's lack of NUMA-awareness), contention, and general lack','line_number':92,'multiline':False]['text':' of optimization for high core counts. So to avoid wasting thread stack','line_number':93,'multiline':False]['text':' resources (and cluttering gdb and core dumps), clamp to 8 cores for now.','line_number':94,'multiline':False]['text':' We need at least two threads for tier-2 wasm compilations, because','line_number':99,'multiline':False]['text':' there's a master task that holds a thread while other threads do the','line_number':100,'multiline':False]['text':' compilation.','line_number':101,'multiline':False]['text':' This must be called before any threads have been initialized.','line_number':111,'multiline':False]['text':' We can't do this if an external thread pool is in use.','line_number':115,'multiline':False]['text':' Set the stack quota to 10% less that the actual size.','line_number':138,'multiline':False]['text':' Bug 1630189: Without MOZ_NEVER_INLINE, Windows PGO builds have a linking','line_number':142,'multiline':False]['text':' error for HelperThreadTaskCallback.','line_number':143,'multiline':False]['text':' Remove pending tasks from the tier2 generator worklist and cancel and','line_number':214,'multiline':False]['text':' delete them.','line_number':215,'multiline':False]['text':' There is at most one running Tier2Generator task and we assume that','line_number':226,'multiline':False]['text':' below.','line_number':227,'multiline':False]['text':' If there is a running Tier2 generator task, shut it down in a predictable','line_number':231,'multiline':False]['text':' way.  The task will be deleted by the normal deletion logic.','line_number':232,'multiline':False]['text':' Set a flag that causes compilation to shortcut itself.','line_number':235,'multiline':False]['text':' Wait for the generator task to finish.  This avoids a shutdown race','line_number':238,'multiline':False]['text':' where the shutdown code is trying to shut down helper threads and the','line_number':239,'multiline':False]['text':' ongoing tier2 compilation is trying to finish, which requires it to','line_number':240,'multiline':False]['text':' have access to helper threads.','line_number':241,'multiline':False]['text':' At most one of these tasks.','line_number':249,'multiline':False]['text':' The build is moving off-thread. Freeze the LifoAlloc to prevent any','line_number':273,'multiline':False]['text':' unwanted mutations.','line_number':274,'multiline':False]['text':'
 * Move an IonCompilationTask for which compilation has either finished, failed,
 * or been cancelled into the global finished compilation list. All off thread
 * compilations which are started must eventually be finished.
 ','line_number':304,'multiline':True]['text':' Cancel any pending entries for which processing hasn't started. ','line_number':377,'multiline':True]['text':' Once finished, tasks are added to a Linked list which is','line_number':383,'multiline':False]['text':' allocated with the IonCompileTask class. The IonCompileTask is','line_number':384,'multiline':False]['text':' allocated in the LifoAlloc so we need the LifoAlloc to be mutable.','line_number':385,'multiline':False]['text':' Wait for in progress entries to finish up. ','line_number':393,'multiline':True]['text':' Cancel code generation for any completed entries. ','line_number':413,'multiline':True]['text':' Cancel lazy linking for pending tasks (attached to the ionScript). ','line_number':426,'multiline':True]['text':' When we set the JSContext, we need to reset the computed stack limits for','line_number':507,'multiline':False]['text':' the current thread, so we also set the native stack quota.','line_number':508,'multiline':False]['text':' Note that |cx| is the main thread context here but the parse task will','line_number':535,'multiline':False]['text':' run with a different, helper thread, context.','line_number':536,'multiline':False]['text':' TODO: 'errors' requires adding support to `CompileError`. They are not','line_number':600,'multiline':False]['text':' common though.','line_number':601,'multiline':False]['text':' The callback is invoked while we are still off thread.','line_number':619,'multiline':False]['text':' FinishOffThreadScript will need to be called on the script to','line_number':622,'multiline':False]['text':' migrate it into the correct compartment.','line_number':623,'multiline':False]['text':' Whatever happens to the top-level script compilation (even if it fails),','line_number':762,'multiline':False]['text':' we must finish initializing the SSO.  This is because there may be valid','line_number':763,'multiline':False]['text':' inner scripts observable by the debugger which reference the partially-','line_number':764,'multiline':False]['text':' initialized SSO.','line_number':765,'multiline':False]['text':' The buffer contains stencil.','line_number':839,'multiline':False]['text':' The buffer contains JSScript.','line_number':874,'multiline':False]['text':' sourceObjectOut = ','line_number':877,'multiline':True]['text':' This sets |outOfMemory|.','line_number':906,'multiline':False]['text':' If any decodes fail, don't process the rest. We likely are hitting OOM.','line_number':935,'multiline':False]['text':' Instead of forcibly canceling pending parse tasks, just wait for all','line_number':999,'multiline':False]['text':' scheduled and in progress ones to complete. Otherwise the final GC may not','line_number':1000,'multiline':False]['text':' collect everything due to zones being used off thread.','line_number':1001,'multiline':False]['text':' Clean up any parse tasks which haven't been finished by the main thread.','line_number':1004,'multiline':False]['text':' Off thread parsing can't occur during incremental collections on the','line_number':1032,'multiline':False]['text':' atoms zone, to avoid triggering barriers. (Outside the atoms zone, the','line_number':1033,'multiline':False]['text':' compilation will use a new zone that is never collected.) If an','line_number':1034,'multiline':False]['text':' atoms-zone GC is in progress, hold off on executing the parse task until','line_number':1035,'multiline':False]['text':' the atoms-zone GC completes (see EnqueuePendingParseTasksAfterGC).','line_number':1036,'multiline':False]['text':' Set the used-as-prototype flag here because we can't GC in mergeRealms.','line_number':1046,'multiline':False]['text':' Initialize all classes potentially created during parsing for use in parser','line_number':1051,'multiline':False]['text':' data structures, template objects, &c.','line_number':1052,'multiline':False]['text':' needed by functions, also adds object literals' proto','line_number':1057,'multiline':False]['text':' needed by array literals','line_number':1061,'multiline':False]['text':' needed by regular expression literals','line_number':1065,'multiline':False]['text':' needed by function*() {}','line_number':1069,'multiline':False]['text':' needed by async function() {}','line_number':1073,'multiline':False]['text':' needed by async function*() {}','line_number':1077,'multiline':False]['text':' Set the used-as-prototype flag on the prototype objects because we can't','line_number':1081,'multiline':False]['text':' GC in mergeRealms.','line_number':1082,'multiline':False]['text':' Don't falsely inherit the host's global trace hook.','line_number':1126,'multiline':False]['text':' Suppress GC so that calls below do not trigger a new incremental GC','line_number':1169,'multiline':False]['text':' which could require barriers on the atoms zone.','line_number':1170,'multiline':False]['text':' Mark the global's zone as created for a helper thread. This prevents it','line_number':1183,'multiline':False]['text':' from being collected until clearUsedByHelperThread() is called after','line_number':1184,'multiline':False]['text':' parsing is complete. If this function exits due to error this state is','line_number':1185,'multiline':False]['text':' cleared automatically.','line_number':1186,'multiline':False]['text':' Return an opaque pointer to caller so that it may query/cancel the task','line_number':1200,'multiline':False]['text':' before the callback is fired.','line_number':1201,'multiline':False]['text':' XDR data must be Stencil format, or a parse-global must be available.','line_number':1300,'multiline':False]['text':' NOTE: All uses of DecodeMulti are currently generated by non-incremental','line_number':1322,'multiline':False]['text':'       XDR and therefore do not support the stencil format. As a result,','line_number':1323,'multiline':False]['text':'       they must continue to use the off-thread-parse-global in order to','line_number':1324,'multiline':False]['text':'       decode.','line_number':1325,'multiline':False]['text':' Make sure there are no Ion free tasks left. We check this here because,','line_number':1442,'multiline':False]['text':' unlike the other tasks, we don't explicitly block on this when','line_number':1443,'multiline':False]['text':' destroying a runtime.','line_number':1444,'multiline':False]['text':' DEBUG','line_number':1498,'multiline':False]['text':' This doesn't guarantee that we don't dispatch more tasks to the external','line_number':1503,'multiline':False]['text':' pool than necessary if tasks are taking a long time to start, but it does','line_number':1504,'multiline':False]['text':' limit the number.','line_number':1505,'multiline':False]['text':' The hazard analysis can't tell that the callback doesn't GC.','line_number':1508,'multiline':False]['text':' = TimeDuration::Forever() ','line_number':1517,'multiline':True]['text':' A task can be a "master" task, ie, it will block waiting for other worker','line_number':1566,'multiline':False]['text':' threads that perform work on its behalf.  If so it must not take the last','line_number':1567,'multiline':False]['text':' available thread; there must always be at least one worker thread able to do','line_number':1568,'multiline':False]['text':' the actual work.  (Or the system may deadlock.)','line_number':1569,'multiline':False]['text':'','line_number':1570,'multiline':False]['text':' If a task is a master task it *must* pass isMaster=true here, or perform a','line_number':1571,'multiline':False]['text':' similar calculation to avoid deadlock from starvation.','line_number':1572,'multiline':False]['text':'','line_number':1573,'multiline':False]['text':' isMaster should only be true if the thread calling checkTaskThreadLimit() is','line_number':1574,'multiline':False]['text':' a helper thread.','line_number':1575,'multiline':False]['text':'','line_number':1576,'multiline':False]['text':' NOTE: Calling checkTaskThreadLimit() from a helper thread in the dynamic','line_number':1577,'multiline':False]['text':' region after currentTask.emplace() and before currentTask.reset() may cause','line_number':1578,'multiline':False]['text':' it to return a different result than if it is called outside that dynamic','line_number':1579,'multiline':False]['text':' region, as the predicate inspects the values of the threads' currentTask','line_number':1580,'multiline':False]['text':' members.','line_number':1581,'multiline':False]['text':' It is possible for the number of idle threads to be zero here, because','line_number':1600,'multiline':False]['text':' checkTaskThreadLimit() can be called from non-helper threads.  Notably,','line_number':1601,'multiline':False]['text':' the compression task scheduler invokes it, and runs off a helper thread.','line_number':1602,'multiline':False]['text':' A master thread that's the last available thread must not be allowed to','line_number':1607,'multiline':False]['text':' run.','line_number':1608,'multiline':False]['text':' This context hasn't been used since the last time freeUnusedMemory','line_number':1624,'multiline':False]['text':' was set. Free the temp LifoAlloc from the main thread.','line_number':1625,'multiline':False]['text':' Report memory used by various containers','line_number':1658,'multiline':False]['text':' Report ParseTasks on wait lists','line_number':1677,'multiline':False]['text':' Report IonCompileTasks on wait lists','line_number':1688,'multiline':False]['text':' Report wasm::CompileTasks on wait lists','line_number':1700,'multiline':False]['text':' Report memory used by the JSContexts.','line_number':1709,'multiline':False]['text':' We're holding the helper state lock, and the JSContext memory reporter','line_number':1710,'multiline':False]['text':' won't do anything more substantial than traversing data structures and','line_number':1711,'multiline':False]['text':' getting their size, so disable ProtectedData checks.','line_number':1712,'multiline':False]['text':' Report number of helper threads.','line_number':1719,'multiline':False]['text':' Compression is triggered on major GCs to compress ScriptSources. It is','line_number':1765,'multiline':False]['text':' considered low priority work.','line_number':1766,'multiline':False]['text':' Parallel compilation and background compilation should be disabled on','line_number':1813,'multiline':False]['text':' unicore systems.','line_number':1814,'multiline':False]['text':' If Tier2 is very backlogged we must give priority to it, since the Tier2','line_number':1818,'multiline':False]['text':' queue holds onto Tier1 tasks.  Indeed if Tier2 is backlogged we will','line_number':1819,'multiline':False]['text':' devote more resources to Tier2 and not start any Tier1 work at all.','line_number':1820,'multiline':False]['text':' For Tier1 and Once compilation, honor the maximum allowed threads to','line_number':1824,'multiline':False]['text':' compile wasm jobs at once, to avoid oversaturating the machine.','line_number':1825,'multiline':False]['text':'','line_number':1826,'multiline':False]['text':' For Tier2 compilation we need to allow other things to happen too, so we','line_number':1827,'multiline':False]['text':' do not allow all logical cores to be used for background work; instead we','line_number':1828,'multiline':False]['text':' wish to use a fraction of the physical cores.  We can't directly compute','line_number':1829,'multiline':False]['text':' the physical cores from the logical cores, but 1/3 of the logical cores','line_number':1830,'multiline':False]['text':' is a safe estimate for the number of physical cores available for','line_number':1831,'multiline':False]['text':' background work.','line_number':1832,'multiline':False]['text':'isMaster=','line_number':1871,'multiline':True]['text':' PromiseHelperTasks can be wasm compilation tasks that in turn block on','line_number':1885,'multiline':False]['text':' wasm compilation so set isMaster = true.','line_number':1886,'multiline':False]['text':'isMaster=','line_number':1890,'multiline':True]['text':' Return true if priority(first) > priority(second).','line_number':1895,'multiline':False]['text':'','line_number':1896,'multiline':False]['text':' This method can return whatever it wants, though it really ought to be a','line_number':1897,'multiline':False]['text':' total order. The ordering is allowed to race (change on the fly), however.','line_number':1898,'multiline':False]['text':' A higher warm-up counter indicates a higher priority.','line_number':1900,'multiline':False]['text':' Get the highest priority IonCompileTask which has not started compilation','line_number':1944,'multiline':False]['text':' yet.','line_number':1945,'multiline':False]['text':' Parse tasks that end up compiling asm.js in turn may use Wasm compilation','line_number':1972,'multiline':False]['text':' threads to generate machine code.  We have no way (at present) to know','line_number':1973,'multiline':False]['text':' ahead of time whether a parse task is going to parse asm.js content or not,','line_number':1974,'multiline':False]['text':' so we just assume that all parse tasks are master tasks.','line_number':1975,'multiline':False]['text':'isMaster=','line_number':1978,'multiline':True]['text':' OOMing during appending results in the task not being scheduled','line_number':2012,'multiline':False]['text':' and deleted.','line_number':2013,'multiline':False]['text':' Mark the zone as no longer in use by a helper thread, and available','line_number':2055,'multiline':False]['text':' to be collected by the GC.','line_number':2056,'multiline':False]['text':' The token is really a ParseTask* which should be in the finished list.','line_number':2065,'multiline':False]['text':' The token was passed in from the browser. Check that the pointer is likely','line_number':2068,'multiline':False]['text':' a valid parse task of the expected kind.','line_number':2069,'multiline':False]['text':' Remove the task from the finished list.','line_number':2073,'multiline':False]['text':' Make sure we have all the constructors we need for the prototype','line_number':2089,'multiline':False]['text':' remapping below, since we can't GC while that's happening.','line_number':2090,'multiline':False]['text':' Finish initializing ScriptSourceObject now that we are back on','line_number':2109,'multiline':False]['text':' main-thread and in the correct realm.','line_number':2110,'multiline':False]['text':' GC things should be allocated in finishSingleParseTask, after','line_number':2123,'multiline':False]['text':' calling finishParseTaskCommon.','line_number':2124,'multiline':False]['text':' Report out of memory errors eagerly, or errors could be malformed.','line_number':2129,'multiline':False]['text':' Report any error or warnings generated during the parse.','line_number':2135,'multiline':False]['text':' Generate initial LCovSources for generated inner functions.','line_number':2157,'multiline':False]['text':' Initialize LCov data for the script.','line_number':2170,'multiline':False]['text':' Add inner-function scripts to the work-list.','line_number':2175,'multiline':False]['text':' Ignore asm.js functions','line_number':2187,'multiline':False]['text':' = StartEncoding::No ','line_number':2205,'multiline':True]['text':' Finish main-thread initialization of scripts.','line_number':2214,'multiline':False]['text':' No error was reported, but no script produced. Assume we hit out of','line_number':2221,'multiline':False]['text':' memory.','line_number':2222,'multiline':False]['text':' See: InstantiateTopLevel in frontend/Stencil.cpp.','line_number':2229,'multiline':False]['text':' The Debugger only needs to be told about the topmost script that was','line_number':2237,'multiline':False]['text':' compiled.','line_number':2238,'multiline':False]['text':' Start the incremental-XDR encoder.','line_number':2254,'multiline':False]['text':' No error was reported, but fewer scripts produced than expected.','line_number':2334,'multiline':False]['text':' Assume we hit out of memory.','line_number':2335,'multiline':False]['text':' The Debugger only needs to be told about the topmost scripts that were','line_number':2341,'multiline':False]['text':' compiled.','line_number':2342,'multiline':False]['text':' = StartEncoding::No ','line_number':2358,'multiline':True]['text':' TODO: The Script and Module task kinds should be combined in future since','line_number':2398,'multiline':False]['text':'       they both generate the same Stencil type.','line_number':2399,'multiline':False]['text':' Check pending queues to see if we can simply remove the task.','line_number':2434,'multiline':False]['text':' If task is currently running, wait for it to complete.','line_number':2459,'multiline':False]['text':' After we call LeaveParseTaskZone() it's not safe to GC until we have','line_number':2502,'multiline':False]['text':' finished merging the contents of the parse task's realm into the','line_number':2503,'multiline':False]['text':' destination realm.','line_number':2504,'multiline':False]['text':' Move the parsed script and all its contents into the desired realm.','line_number':2509,'multiline':False]['text':' Keep in sync with recoverFromOutOfMemory.','line_number':2537,'multiline':False]['text':' Cancel all pending compression tasks.','line_number':2580,'multiline':False]['text':' Cancel all in-process compression tasks and wait for them to join so we','line_number':2586,'multiline':False]['text':' clean up the finished tasks.','line_number':2587,'multiline':False]['text':' Clean up finished tasks.','line_number':2607,'multiline':False]['text':' Wait until all tasks have started compression.','line_number':2643,'multiline':False]['text':' Wait for all in-process compression tasks to complete.','line_number':2648,'multiline':False]['text':' Don't release the lock between dispatching the resolve and destroy','line_number':2665,'multiline':False]['text':' operation (which may start immediately on another thread) and returning','line_number':2666,'multiline':False]['text':' from this method.','line_number':2667,'multiline':False]['text':' Execute synchronously if there are no helper threads.','line_number':2674,'multiline':False]['text':' Since we hold the helper thread lock here we must disable GCMarker's','line_number':2710,'multiline':False]['text':' checking of the atom marking bitmap since that also relies on taking the','line_number':2711,'multiline':False]['text':' lock.','line_number':2712,'multiline':False]['text':' Definition of helper thread tasks.','line_number':2760,'multiline':False]['text':'','line_number':2761,'multiline':False]['text':' Priority is determined by the order they're listed here.','line_number':2762,'multiline':False]['text':' The selectors may depend on the HelperThreadState not changing between task','line_number':2800,'multiline':False]['text':' selection and task execution, in particular, on new tasks not being added','line_number':2801,'multiline':False]['text':' (because of the lifo structure of the work lists). Unlocking the','line_number':2802,'multiline':False]['text':' HelperThreadState between task selection and execution is not well-defined.','line_number':2803,'multiline':False]['text':' Return the highest priority task that is ready to start, or nullptr.','line_number':2815,'multiline':False]['text':' Delete task from helperTasks.','line_number':2839,'multiline':False]