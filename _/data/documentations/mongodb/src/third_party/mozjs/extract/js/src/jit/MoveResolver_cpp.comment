['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Assert that we're not doing no-op moves.','line_number':60,'multiline':False]['text':' Given move (A -> B), this function attempts to find any move (B -> *) in the','line_number':70,'multiline':False]['text':' pending move list, and returns the first one.','line_number':71,'multiline':False]['text':' We now have pairs in the form (A -> X) (X -> y). The second pair','line_number':79,'multiline':False]['text':' blocks the move in the first pair, so return it.','line_number':80,'multiline':False]['text':' No blocking moves found.','line_number':85,'multiline':False]['text':' Given move (A -> B), this function attempts to find any move (B -> *) in the','line_number':89,'multiline':False]['text':' move list iterator, and returns the first one.','line_number':90,'multiline':False]['text':' N.B. It is unclear if a single move can complete more than one cycle, so to','line_number':91,'multiline':False]['text':' be conservative, this function operates on iterators, so the caller can','line_number':92,'multiline':False]['text':' process all instructions that start a cycle.','line_number':93,'multiline':False]['text':' We now have pairs in the form (A -> X) (X -> y). The second pair','line_number':100,'multiline':False]['text':' blocks the move in the first pair, so return it.','line_number':101,'multiline':False]['text':' No blocking moves found.','line_number':106,'multiline':False]['text':' Resolves the pending_ list to a list in orderedMoves_.','line_number':173,'multiline':False]['text':' Upon return from this function, the pending_ list must be cleared.','line_number':178,'multiline':False]['text':' Some of ARM's double registers alias two of its single registers,','line_number':182,'multiline':False]['text':' but the algorithm below assumes that every register can participate','line_number':183,'multiline':False]['text':' in at most one cycle. To satisfy the algorithm, any double registers','line_number':184,'multiline':False]['text':' that may conflict are split into their single-register halves.','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':' This logic is only applicable because ARM only uses registers d0-d15,','line_number':187,'multiline':False]['text':' all of which alias s0-s31. Double registers d16-d31 are unused.','line_number':188,'multiline':False]['text':' Therefore there is never a double move that cannot be split.','line_number':189,'multiline':False]['text':' If this changes in the future, the algorithm will have to be fixed.','line_number':190,'multiline':False]['text':' Insert the new node before the current position to not affect','line_number':220,'multiline':False]['text':' iteration.','line_number':221,'multiline':False]['text':' Overwrite pm in place for the upper move. Iteration proceeds as normal.','line_number':224,'multiline':False]['text':' This is a depth-first-search without recursion, which tries to find','line_number':234,'multiline':False]['text':' cycles in a list of moves.','line_number':235,'multiline':False]['text':'','line_number':236,'multiline':False]['text':' Algorithm.','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' S = Traversal stack.','line_number':239,'multiline':False]['text':' P = Pending move list.','line_number':240,'multiline':False]['text':' O = Ordered list of moves.','line_number':241,'multiline':False]['text':'','line_number':242,'multiline':False]['text':' As long as there are pending moves in P:','line_number':243,'multiline':False]['text':'      Let |root| be any pending move removed from P','line_number':244,'multiline':False]['text':'      Add |root| to the traversal stack.','line_number':245,'multiline':False]['text':'      As long as S is not empty:','line_number':246,'multiline':False]['text':'          Let |L| be the most recent move added to S.','line_number':247,'multiline':False]['text':'','line_number':248,'multiline':False]['text':'          Find any pending move M whose source is L's destination, thus','line_number':249,'multiline':False]['text':'          preventing L's move until M has completed.','line_number':250,'multiline':False]['text':'','line_number':251,'multiline':False]['text':'          If a move M was found,','line_number':252,'multiline':False]['text':'              Remove M from the pending list.','line_number':253,'multiline':False]['text':'              If M's destination is |root|,','line_number':254,'multiline':False]['text':'                  Annotate M and |root| as cycles.','line_number':255,'multiline':False]['text':'                  Add M to S.','line_number':256,'multiline':False]['text':'                  do not Add M to O, since M may have other conflictors in P','line_number':257,'multiline':False]['text':'                  that have not yet been processed.','line_number':258,'multiline':False]['text':'              Otherwise,','line_number':259,'multiline':False]['text':'                  Add M to S.','line_number':260,'multiline':False]['text':'         Otherwise,','line_number':261,'multiline':False]['text':'              Remove L from S.','line_number':262,'multiline':False]['text':'              Add L to O.','line_number':263,'multiline':False]['text':'','line_number':264,'multiline':False]['text':' Add this pending move to the cycle detection stack.','line_number':268,'multiline':False]['text':' Find the cycle's start.','line_number':278,'multiline':False]['text':' We annotate cycles at each move in the cycle, and','line_number':279,'multiline':False]['text':' assert that we do not find two cycles in one move chain','line_number':280,'multiline':False]['text':' traversal (which would indicate two moves to the same','line_number':281,'multiline':False]['text':' destination).','line_number':282,'multiline':False]['text':' Since there can be more than one cycle, find them all.','line_number':283,'multiline':False]['text':' This is a new link in the move chain, so keep','line_number':294,'multiline':False]['text':' searching for a cycle.','line_number':295,'multiline':False]['text':' Otherwise, pop the last move on the search stack because it's','line_number':300,'multiline':False]['text':' complete and not participating in a cycle. The resulting','line_number':301,'multiline':False]['text':' move can safely be added to the ordered move list.','line_number':302,'multiline':False]['text':' If the current queue is empty, it is certain that there are','line_number':310,'multiline':False]['text':' all previous cycles cannot conflict with future cycles,','line_number':311,'multiline':False]['text':' so re-set the counter of pending cycles, while keeping a high-water mark.','line_number':312,'multiline':False]['text':' Sometimes the register allocator generates move groups where multiple','line_number':323,'multiline':False]['text':' moves have the same source. Try to optimize these cases when the source','line_number':324,'multiline':False]['text':' is in memory and the target of one of the moves is in a register.','line_number':325,'multiline':False]['text':' Look for an earlier move with the same source, where no intervening move','line_number':332,'multiline':False]['text':' touches either the source or destination of the new move.','line_number':333,'multiline':False]['text':' Try to reorder memory->memory moves so that they are executed right','line_number':376,'multiline':False]['text':' before a move that clobbers some register. This will allow the move','line_number':377,'multiline':False]['text':' emitter to use that clobbered register as a scratch register for the','line_number':378,'multiline':False]['text':' memory->memory move, if necessary.','line_number':379,'multiline':False]['text':' Look for an earlier move clobbering a register.','line_number':389,'multiline':False]['text':' Look for a later move clobbering a register.','line_number':408,'multiline':False]['text':' There is no move that uses a register between the','line_number':422,'multiline':False]['text':' original memory->memory move and this move that','line_number':423,'multiline':False]['text':' clobbers a register. The move should already be able','line_number':424,'multiline':False]['text':' to use a scratch register, so don't shift anything','line_number':425,'multiline':False]['text':' around.','line_number':426,'multiline':False]['text':' Redo the search for memory->memory moves at the current','line_number':437,'multiline':False]['text':' index, so we don't skip the move just shifted back.','line_number':438,'multiline':False]