['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 1999-2016, International Business Machines Corporation
*               and others. All Rights Reserved.
*******************************************************************************
*   file name:  uresdata.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999dec08
*   created by: Markus W. Scherer
* Modification History:
*
*   Date        Name        Description
*   06/20/2000  helena      OS/400 port changes; mostly typecast.
*   06/24/02    weiv        Added support for resource sharing
','line_number':3,'multiline':True]['text':'
 * Resource access helpers
 ','line_number':38,'multiline':True]['text':' get a const char* pointer to the key with the keyOffset byte offset from pRoot ','line_number':42,'multiline':True]['text':' empty resources, returned when the resource offset is 0 ','line_number':55,'multiline':True]['text':'
 * All the type-access functions assume that
 * the resource is of the expected type.
 ','line_number':69,'multiline':True]['text':' do a binary search for the key ','line_number':81,'multiline':True]['text':' We found it! ','line_number':97,'multiline':True]['text':' not found or table is empty. ','line_number':102,'multiline':True]['text':' do a binary search for the key ','line_number':112,'multiline':True]['text':' We found it! ','line_number':128,'multiline':True]['text':' not found or table is empty. ','line_number':133,'multiline':True]['text':' helper for res_load() ---------------------------------------------------- ','line_number':136,'multiline':True]['text':'type','line_number':140,'multiline':True]['text':'name','line_number':140,'multiline':True]['text':' dataFormat="ResB" ','line_number':148,'multiline':True]['text':' semi-public functions ---------------------------------------------------- ','line_number':155,'multiline':True]['text':' get the root resource ','line_number':163,'multiline':True]['text':' formatVersion 1.1 must have a root item and at least 5 indexes ','line_number':168,'multiline':True]['text':' currently, we accept only resources that have a Table as their roots ','line_number':175,'multiline':True]['text':' greater than any 16-bit key string offset ','line_number':184,'multiline':True]['text':' bundles with formatVersion 1.1 and later contain an indexes[] array ','line_number':186,'multiline':True]['text':' In formatVersion 1, the indexLength took up this whole int.','line_number':206,'multiline':False]['text':' In version 2, bits 31..8 were reserved and always 0.','line_number':207,'multiline':False]['text':' In version 3, they contain bits 23..0 of the poolStringIndexLimit.','line_number':208,'multiline':False]['text':' Bits 27..24 are in indexes[URES_INDEX_ATTRIBUTES] bits 15..12.','line_number':209,'multiline':False]['text':' bits 15..12 -> 27..24','line_number':217,'multiline':False]['text':'
         * formatVersion 1: compare key strings in native-charset order
         * formatVersion 2 and up: compare key strings in ASCII order
         ','line_number':233,'multiline':True]['text':' load the ResourceBundle file ','line_number':265,'multiline':True]['text':' get its memory and initialize *pResData ','line_number':271,'multiline':True]['text':' URES_TABLE32 ','line_number':289,'multiline':True]['text':' URES_TABLE16 ','line_number':290,'multiline':True]['text':' URES_STRING_V2 ','line_number':291,'multiline':True]['text':' URES_ARRAY16 ','line_number':295,'multiline':True]['text':' RES_GET_TYPE(res)==URES_STRING ','line_number':335,'multiline':True]['text':'*
 * CLDR string value (three empty-set symbols)=={2205, 2205, 2205}
 * prevents fallback to the parent bundle.
 * TODO: combine with other code that handles this marker, use EMPTY_SET constant.
 * TODO: maybe move to uresbund.cpp?
 ','line_number':351,'multiline':True]['text':' empty string','line_number':360,'multiline':False]['text':' implicit length','line_number':374,'multiline':False]['text':' explicit length 3 (should not occur)','line_number':376,'multiline':False]['text':' Assume that the string has not been stored with more length units than necessary.','line_number':379,'multiline':False]['text':' No tracing: handled by the caller','line_number':406,'multiline':False]['text':' namespace','line_number':417,'multiline':False]['text':' empty if offset==0','line_number':582,'multiline':False]['text':' empty if offset==0','line_number':610,'multiline':False]['text':' empty if offset==0','line_number':622,'multiline':False]['text':' Tracing is already performed above (unimportant for trace that this is an array)','line_number':686,'multiline':False]['text':' Pool string, nothing to do.','line_number':702,'multiline':False]['text':' Local string, adjust the 16-bit offset to a regular one,','line_number':704,'multiline':False]['text':' with a larger pool string index limit.','line_number':705,'multiline':False]['text':' empty if offset==0 ','line_number':722,'multiline':True]['text':' empty if offset==0 ','line_number':743,'multiline':True]['text':' empty if offset==0 ','line_number':769,'multiline':True]['text':' empty if offset==0 ','line_number':794,'multiline':True]['text':' Note: the ResourceTracer keeps a reference to the field of this','line_number':835,'multiline':False]['text':' ResourceTable. This is OK because the ResourceTable should remain','line_number':836,'multiline':False]['text':' alive for the duration that fields are being read from it','line_number':837,'multiline':False]['text':' (including nested fields).','line_number':838,'multiline':False]['text':' Same note about lifetime as in getKeyAndValue().','line_number':861,'multiline':False]['text':' empty if offset==0 ','line_number':876,'multiline':True]['text':' Note: the ResourceTracer keeps a reference to the field of this','line_number':908,'multiline':False]['text':' ResourceArray. This is OK because the ResourceArray should remain','line_number':909,'multiline':False]['text':' alive for the duration that fields are being read from it','line_number':910,'multiline':False]['text':' (including nested fields).','line_number':911,'multiline':False]['text':' if you come in with an empty path, you'll be getting back the same resource ','line_number':929,'multiline':True]['text':' one needs to have an aggregate resource in order to search in it ','line_number':934,'multiline':True]['text':' Iteration stops if: the path has been consumed, we found a non-existing
     * resource (t1 == RES_BOGUS) or we found a scalar resource (including alias)
     ','line_number':940,'multiline':True]['text':' if there are more separators, terminate string 
     * and set path to the remaining part of the string
     ','line_number':944,'multiline':True]['text':' Empty key string.','line_number':949,'multiline':False]['text':' overwrite the separator with a NUL to terminate the key ','line_number':952,'multiline':True]['text':' if the resource is a table ','line_number':958,'multiline':True]['text':' try the key based access ','line_number':959,'multiline':True]['text':' have an array, but don't have a valid index ','line_number':968,'multiline':True]['text':' can't do much here, except setting t2 to bogus ','line_number':971,'multiline':True]['text':' position pathP to next resource key/index ','line_number':976,'multiline':True]['text':' resource bundle swapping ------------------------------------------------- ','line_number':983,'multiline':True]['text':'
 * Need to always enumerate the entire item tree,
 * track the lowest address of any item to use as the limit for char keys[],
 * track the highest address of any item to return the size of the data.
 *
 * We should have thought of storing those in the data...
 * It is possible to extend the data structure by putting additional values
 * in places that are inaccessible by ordinary enumeration of the item tree.
 * For example, additional integers could be stored at the beginning or
 * end of the key strings; this could be indicated by a minor version number,
 * and the data swapping would have to know about these values.
 *
 * The data structure does not forbid keys to be shared, so we must swap
 * all keys once instead of each key when it is referenced.
 *
 * These swapping functions assume that a resource bundle always has a length
 * that is a multiple of 4 bytes.
 * Currently, this is trivially true because genrb writes bundle tree leaves
 * physically first, before their branches, so that the root table with its
 * array of resource items (uint32_t values) is always last.
 ','line_number':985,'multiline':True]['text':' definitions for table sorting ------------------------ ','line_number':1007,'multiline':True]['text':'
 * row of a temporary array
 *
 * gets platform-endian key string indexes and sorting indexes;
 * after sorting this array by keys, the actual key/value arrays are permutated
 * according to the sorting indexes
 ','line_number':1009,'multiline':True]['text':' The table item key string is not locally available. ','line_number':1040,'multiline':True]['text':' resource table key for collation binaries: "%%CollationBin" ','line_number':1043,'multiline':True]['text':'
 * swap one resource item
 ','line_number':1051,'multiline':True]['text':' caller swaps res itself ','line_number':1057,'multiline':True]['text':' integer, or points to 16-bit units, nothing to do here ','line_number':1070,'multiline':True]['text':' all other types use an offset to point to their data ','line_number':1076,'multiline':True]['text':' special offset indicating an empty item ','line_number':1079,'multiline':True]['text':' we already swapped this resource item ','line_number':1083,'multiline':True]['text':' mark it as swapped now ','line_number':1086,'multiline':True]['text':' physically same value layout as string, fall through ','line_number':1095,'multiline':True]['text':' swap length ','line_number':1099,'multiline':True]['text':' swap each UChar (the terminating NUL would not change) ','line_number':1101,'multiline':True]['text':' swap length ','line_number':1106,'multiline':True]['text':' no need to swap or copy bytes - ures_swap() copied them all ','line_number':1108,'multiline':True]['text':' swap known formats ','line_number':1110,'multiline':True]['text':' the binary is in a table ','line_number':1112,'multiline':True]['text':' its table key string is "%%CollationBin" ','line_number':1114,'multiline':True]['text':' its table key string is unknown but it looks like a collation binary ','line_number':1117,'multiline':True]['text':' get table item count ','line_number':1137,'multiline':True]['text':' swap count ','line_number':1144,'multiline':True]['text':' get table item count ','line_number':1149,'multiline':True]['text':' swap count ','line_number':1156,'multiline':True]['text':' pointer to table resources ','line_number':1166,'multiline':True]['text':' recurse ','line_number':1169,'multiline':True]['text':' no need to sort, just swap the offset/value arrays ','line_number':1193,'multiline':True]['text':' swap key offsets and items as one array ','line_number':1198,'multiline':True]['text':'
             * We need to sort tables by outCharset key strings because they
             * sort differently for different charset families.
             * ures_swap() already set pTempTable->keyChars appropriately.
             * First we set up a temporary table with the key indexes and
             * sorting indexes and sort that.
             * Then we permutate and copy/swap the actual values.
             ','line_number':1204,'multiline':True]['text':'
             * copy/swap/permutate items
             *
             * If we swap in-place, then the permutation must use another
             * temporary array (pTempTable->resort)
             * before the results are copied to the outBundle.
             ','line_number':1232,'multiline':True]['text':' keys ','line_number':1239,'multiline':True]['text':' resources ','line_number':1272,'multiline':True]['text':' swap length ','line_number':1298,'multiline':True]['text':' recurse ','line_number':1301,'multiline':True]['text':' swap items ','line_number':1312,'multiline':True]['text':' swap length and each integer ','line_number':1318,'multiline':True]['text':' also catches RES_BOGUS ','line_number':1322,'multiline':True]['text':' the following integers count Resource item offsets (4 bytes each), not bytes ','line_number':1343,'multiline':True]['text':' udata_swapDataHeader checks the arguments ','line_number':1346,'multiline':True]['text':' check data format and format version ','line_number':1352,'multiline':True]['text':' dataFormat="ResB" ','line_number':1355,'multiline':True]['text':' formatVersion 1.1+ or 2.x or 3.x ','line_number':1359,'multiline':True]['text':' a resource bundle must contain at least one resource item ','line_number':1372,'multiline':True]['text':' formatVersion 1.1 must have a root item and at least 5 indexes ','line_number':1378,'multiline':True]['text':' formatVersion 1.1 adds the indexes[] array ','line_number':1390,'multiline':True]['text':' track which resources we have already swapped ','line_number':1424,'multiline':True]['text':'
         * We need one bit per 4 resource bundle bytes so that we can track
         * every possible Resource for whether we have swapped it already.
         * Multiple Resource words can refer to the same bundle offsets
         * for sharing identical values.
         * We could optimize this by allocating only for locations above
         * where Resource values are stored (above keys & strings).
         ','line_number':1428,'multiline':True]['text':' number of bytes needed ','line_number':1436,'multiline':True]['text':' multiple of 4 bytes for uint32_t ','line_number':1437,'multiline':True]['text':' copy the bundle for binary and inaccessible data ','line_number':1450,'multiline':True]['text':' swap the key strings, but not the padding bytes (0xaa) after the last string and its NUL ','line_number':1455,'multiline':True]['text':' swap the 16-bit units (strings, table16, array16) ','line_number':1463,'multiline':True]['text':' allocate the temporary table for sorting resource tables ','line_number':1472,'multiline':True]['text':' sort by outCharset ','line_number':1473,'multiline':True]['text':' swap the resources ','line_number':1491,'multiline':True]['text':' swap the root resource and indexes ','line_number':1505,'multiline':True]