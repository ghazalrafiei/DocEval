['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2014 International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  rbbidata.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   RBBI data formats  Includes
*
*                          Structs that describes the format of the Binary RBBI data,
*                          as it is stored in ICU's data file.
*
*      RBBIDataWrapper  -  Instances of this class sit between the
*                          raw data structs and the RulesBasedBreakIterator objects
*                          that are created by applications.  The wrapper class
*                          provides reference counting for the underlying data,
*                          and direct pointers to data that would not otherwise
*                          be accessible without ugly pointer arithmetic.  The
*                          wrapper does not attempt to provide any higher level
*                          abstractions for the data itself.
*
*                          There will be only one instance of RBBIDataWrapper for any
*                          set of RBBI run time data being shared by instances
*                          (clones) of RulesBasedBreakIterator.
','line_number':3,'multiline':True]['text':'*
 * Swap RBBI data. See udataswp.h.
 * @internal
 ','line_number':41,'multiline':True]['text':' The current RBBI data format version.','line_number':61,'multiline':False]['text':'  
 *   The following structs map exactly onto the raw data from ICU common data file. 
 ','line_number':64,'multiline':True]['text':'  == 0xbla0                                               ','line_number':68,'multiline':True]['text':' Data Format.  Same as the value in struct UDataInfo      ','line_number':69,'multiline':True]['text':'   if there is one associated with this data.             ','line_number':70,'multiline':True]['text':'     (version originates in rbbi, is copied to UDataInfo) ','line_number':71,'multiline':True]['text':'  Total length in bytes of this RBBI Data,                ','line_number':72,'multiline':True]['text':'      including all sections, not just the header.        ','line_number':73,'multiline':True]['text':'  Number of character categories.                         ','line_number':74,'multiline':True]['text':'                                                                        ','line_number':76,'multiline':True]['text':'  Offsets and sizes of each of the subsections within the RBBI data.    ','line_number':77,'multiline':True]['text':'  All offsets are bytes from the start of the RBBIDataHeader.           ','line_number':78,'multiline':True]['text':'  All sizes are in bytes.                                               ','line_number':79,'multiline':True]['text':'                                                                        ','line_number':80,'multiline':True]['text':'  forward state transition table. ','line_number':81,'multiline':True]['text':'  Offset to the reverse state transition table. ','line_number':83,'multiline':True]['text':'  Offset to Trie data for character categories ','line_number':85,'multiline':True]['text':'  Offset to the source for for the break ','line_number':87,'multiline':True]['text':'    rules.  Stored UChar *. ','line_number':88,'multiline':True]['text':' Offset to the table of rule status values ','line_number':89,'multiline':True]['text':'  Reserved for expansion ','line_number':92,'multiline':True]['text':'  Non-zero if this row is for an accepting state.','line_number':100,'multiline':False]['text':'  Value 0: not an accepting state.','line_number':101,'multiline':False]['text':'        1: (ACCEPTING_UNCONDITIONAL) Unconditional Accepting state.','line_number':102,'multiline':False]['text':'       >1: Look-ahead match has completed.','line_number':103,'multiline':False]['text':'           Actual boundary position happened earlier.','line_number':104,'multiline':False]['text':'           Value here == fLookAhead in earlier','line_number':105,'multiline':False]['text':'           state, at actual boundary pos.','line_number':106,'multiline':False]['text':'  Non-zero if this row is for a state that','line_number':107,'multiline':False]['text':'    corresponds to a '/' in the rule source.','line_number':108,'multiline':False]['text':'    Value is the same as the fAccepting','line_number':109,'multiline':False]['text':'    value for the rule (which will appear','line_number':110,'multiline':False]['text':'    in a different state.','line_number':111,'multiline':False]['text':'  Non-zero if this row covers a {tagged} position','line_number':112,'multiline':False]['text':'    from a rule.  Value is the index in the','line_number':113,'multiline':False]['text':'    StatusTable of the set of matching','line_number':114,'multiline':False]['text':'    tags (rule status values)','line_number':115,'multiline':False]['text':'  Next State, indexed by char category.','line_number':116,'multiline':False]['text':'    Variable-length array declared with length 1','line_number':117,'multiline':False]['text':'    to disable bounds checkers.','line_number':118,'multiline':False]['text':'    Array Size is actually fData->fHeader->fCatCount','line_number':119,'multiline':False]['text':'    CAUTION:  see RBBITableBuilder::getTableSize()','line_number':120,'multiline':False]['text':'              before changing anything here.','line_number':121,'multiline':False]['text':' Value constant for RBBIStateTableRow::fAccepting','line_number':127,'multiline':False]['text':' Number of states.','line_number':135,'multiline':False]['text':' Length of a state table row, in bytes.','line_number':136,'multiline':False]['text':' Char category number of the first dictionary','line_number':137,'multiline':False]['text':'   char class, or the the largest category number + 1','line_number':138,'multiline':False]['text':'   if there are no dictionary categories.','line_number':139,'multiline':False]['text':' Size of run-time array required for holding','line_number':140,'multiline':False]['text':'   look-ahead results. Indexed by row.fLookAhead.','line_number':141,'multiline':False]['text':' Option Flags for this state table.','line_number':142,'multiline':False]['text':' First RBBIStateTableRow begins here.','line_number':143,'multiline':False]['text':'   Variable-length array declared with length 1','line_number':144,'multiline':False]['text':'   to disable bounds checkers.','line_number':145,'multiline':False]['text':'   (making it char[] simplifies ugly address','line_number':146,'multiline':False]['text':'   arithmetic for indexing variable length rows.)','line_number':147,'multiline':False]['text':'                                        ','line_number':155,'multiline':True]['text':'   The reference counting wrapper class ','line_number':156,'multiline':True]['text':'                                        ','line_number':157,'multiline':True]['text':'                                     ','line_number':180,'multiline':True]['text':'   Pointers to items within the data ','line_number':181,'multiline':True]['text':'                                     ','line_number':182,'multiline':True]['text':' number of int32_t values in the rule status table.   Used to sanity check indexing ','line_number':189,'multiline':True]['text':'  forbid copying of this class ','line_number':200,'multiline':True]['text':'  forbid copying of this class ','line_number':201,'multiline':True]['text':' C++ ','line_number':210,'multiline':True]