['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' Forward-declare (maybe don't want number_utils.h included here):','line_number':19,'multiline':False]['text':'*
 * A class for representing a number to be processed by the decimal formatting pipeline. Includes
 * methods for rounding, plural rules, and decimal digit extraction.
 *
 * <p>By design, this is NOT IMMUTABLE and NOT THREAD SAFE. It is intended to be an intermediate
 * object holding state during a pass through the decimal formatting pipeline.
 *
 * <p>Represents numbers and digit display properties using Binary Coded Decimal (BCD).
 *
 * <p>Java has multiple implementations for testing, but C++ has only one implementation.
 ','line_number':22,'multiline':True]['text':'* Copy constructor. ','line_number':35,'multiline':True]['text':'* Move constructor. ','line_number':38,'multiline':True]['text':'*
     * Sets this instance to be equal to another instance.
     *
     * @param other The instance to copy from.
     ','line_number':45,'multiline':True]['text':'* Move assignment ','line_number':52,'multiline':True]['text':'*
     * Sets the minimum integer digits that this {@link DecimalQuantity} should generate.
     * This method does not perform rounding.
     *
     * @param minInt The minimum number of integer digits.
     ','line_number':55,'multiline':True]['text':'*
     * Sets the minimum fraction digits that this {@link DecimalQuantity} should generate.
     * This method does not perform rounding.
     *
     * @param minFrac The minimum number of fraction digits.
     ','line_number':63,'multiline':True]['text':'*
     * Truncates digits from the upper magnitude of the number in order to satisfy the
     * specified maximum number of integer digits.
     *
     * @param maxInt The maximum number of integer digits.
     ','line_number':71,'multiline':True]['text':'*
     * Rounds the number to a specified interval, such as 0.05.
     *
     * <p>If rounding to a power of ten, use the more efficient {@link #roundToMagnitude} instead.
     *
     * @param roundingIncrement The increment to which to round.
     * @param roundingMode The {@link RoundingMode} to use if rounding is necessary.
     ','line_number':79,'multiline':True]['text':'* Removes all fraction digits. ','line_number':90,'multiline':True]['text':'*
     * Rounds the number to the nearest multiple of 5 at the specified magnitude.
     * For example, when magnitude == -2, this performs rounding to the nearest 0.05.
     *
     * @param magnitude The magnitude at which the digit should become either 0 or 5.
     * @param roundingMode Rounding strategy.
     ','line_number':93,'multiline':True]['text':'*
     * Rounds the number to a specified magnitude (power of ten).
     *
     * @param roundingMagnitude The power of ten to which to round. For example, a value of -2 will
     *     round to 2 decimal places.
     * @param roundingMode The {@link RoundingMode} to use if rounding is necessary.
     ','line_number':102,'multiline':True]['text':'*
     * Rounds the number to an infinite number of decimal points. This has no effect except for
     * forcing the double in {@link DecimalQuantity_AbstractBCD} to adopt its exact representation.
     ','line_number':111,'multiline':True]['text':'*
     * Multiply the internal value. Uses decNumber.
     *
     * @param multiplicand The value by which to multiply.
     ','line_number':117,'multiline':True]['text':'*
     * Divide the internal value. Uses decNumber.
     *
     * @param multiplicand The value by which to multiply.
     ','line_number':124,'multiline':True]['text':'* Flips the sign from positive to negative and back. ','line_number':131,'multiline':True]['text':'*
     * Scales the number by a power of ten. For example, if the value is currently "1234.56", calling
     * this method with delta=-3 will change the value to "1.23456".
     *
     * @param delta The number of magnitudes of ten to change by.
     * @return true if integer overflow occured; false otherwise.
     ','line_number':134,'multiline':True]['text':'*
     * @return The power of ten corresponding to the most significant nonzero digit.
     * The number must not be zero.
     ','line_number':143,'multiline':True]['text':'*
     * @return The value of the (suppressed) exponent after the number has been
     * put into a notation with exponents (ex: compact, scientific).  Ex: given
     * the number 1000 as "1K" / "1E3", the return value will be 3 (positive).
     ','line_number':149,'multiline':True]['text':'*
     * Adjusts the value for the (suppressed) exponent stored when using
     * notation with exponents (ex: compact, scientific).
     *
     * <p>Adjusting the exponent is decoupled from {@link #adjustMagnitude} in
     * order to allow flexibility for {@link StandardPlural} to be selected in
     * formatting (ex: for compact notation) either with or without the exponent
     * applied in the value of the number.
     * @param delta
     *             The value to adjust the exponent by.
     ','line_number':156,'multiline':True]['text':'*
     * @return Whether the value represented by this {@link DecimalQuantity} is
     * zero, infinity, or NaN.
     ','line_number':169,'multiline':True]['text':'* @return Whether the value represented by this {@link DecimalQuantity} is less than zero. ','line_number':175,'multiline':True]['text':'* @return The appropriate value from the Signum enum. ','line_number':178,'multiline':True]['text':'* @return Whether the value represented by this {@link DecimalQuantity} is infinite. ','line_number':181,'multiline':True]['text':'* @return Whether the value represented by this {@link DecimalQuantity} is not a number. ','line_number':184,'multiline':True]['text':'*  
     * Note: this method incorporates the value of {@code exponent}
     * (for cases such as compact notation) to return the proper long value
     * represented by the result.
     * @param truncateIfOverflow if false and the number does NOT fit, fails with an assertion error. 
     ','line_number':187,'multiline':True]['text':'*
     * Note: this method incorporates the value of {@code exponent}
     * (for cases such as compact notation) to return the proper long value
     * represented by the result.
     ','line_number':195,'multiline':True]['text':'*
     * Returns whether or not a Long can fully represent the value stored in this DecimalQuantity.
     * @param ignoreFraction if true, silently ignore digits after the decimal place.
     ','line_number':202,'multiline':True]['text':'* @return The value contained in this {@link DecimalQuantity} approximated as a double. ','line_number':208,'multiline':True]['text':'* Computes a DecNum representation of this DecimalQuantity, saving it to the output parameter. ','line_number':211,'multiline':True]['text':'*
     * Produces a DecimalQuantity that was parsed from a string by the decNumber
     * C Library.
     *
     * decNumber is similar to BigDecimal in Java, and supports parsing strings
     * such as "123.456621E+40".
     ','line_number':220,'multiline':True]['text':'* Internal method if the caller already has a DecNum. ','line_number':229,'multiline':True]['text':'*
     * Appends a digit, optionally with one or more leading zeros, to the end of the value represented
     * by this DecimalQuantity.
     *
     * <p>The primary use of this method is to construct numbers during a parsing loop. It allows
     * parsing to take advantage of the digit list infrastructure primarily designed for formatting.
     *
     * @param value The digit to append.
     * @param leadingZeros The number of zeros to append before the digit. For example, if the value
     *     in this instance starts as 12.3, and you append a 4 with 1 leading zero, the value becomes
     *     12.304.
     * @param appendAsInteger If true, increase the magnitude of existing digits to make room for the
     *     new digit. If false, append to the end like a fraction digit. If true, there must not be
     *     any fraction digits already in the number.
     * @internal
     * @deprecated This API is ICU internal only.
     ','line_number':232,'multiline':True]['text':'*
     * Gets the digit at the specified magnitude. For example, if the represented number is 12.3,
     * getDigit(-1) returns 3, since 3 is the digit corresponding to 10^-1.
     *
     * @param magnitude The magnitude of the digit.
     * @return The digit at the specified magnitude.
     ','line_number':255,'multiline':True]['text':'*
     * Gets the largest power of ten that needs to be displayed. The value returned by this function
     * will be bounded between minInt and maxInt.
     *
     * @return The highest-magnitude digit to be displayed.
     ','line_number':264,'multiline':True]['text':'*
     * Gets the smallest power of ten that needs to be displayed. The value returned by this function
     * will be bounded between -minFrac and -maxFrac.
     *
     * @return The lowest-magnitude digit to be displayed.
     ','line_number':272,'multiline':True]['text':'* This method is for internal testing only. ','line_number':286,'multiline':True]['text':'    /**','line_number':289,'multiline':False]['text':'     * If the given {@link FieldPosition} is a {@link UFieldPosition}, populates it with the fraction','line_number':290,'multiline':False]['text':'     * length and fraction long value. If the argument is not a {@link UFieldPosition}, nothing','line_number':291,'multiline':False]['text':'     * happens.','line_number':292,'multiline':False]['text':'     *','line_number':293,'multiline':False]['text':'     * @param fp The {@link UFieldPosition} to populate.','line_number':294,'multiline':False]['text':'     */','line_number':295,'multiline':False]['text':'    void populateUFieldPosition(FieldPosition fp);','line_number':296,'multiline':False]['text':'*
     * Checks whether the bytes stored in this instance are all valid. For internal unit testing only.
     *
     * @return An error message if this instance is invalid, or null if this instance is healthy.
     ','line_number':298,'multiline':True]['text':'* Returns the string in standard exponential notation. ','line_number':307,'multiline':True]['text':'* Returns the string without exponential notation. Slightly slower than toScientificString(). ','line_number':310,'multiline':True]['text':'* Visible for testing ','line_number':313,'multiline':True]['text':'* Visible for testing ','line_number':316,'multiline':True]['text':'*
     * Bogus flag for when a DecimalQuantity is stored on the stack.
     ','line_number':325,'multiline':True]['text':'*
     * The power of ten corresponding to the least significant digit in the BCD. For example, if this
     * object represents the number "3.14", the BCD will be "0x314" and the scale will be -2.
     *
     * <p>Note that in {@link java.math.BigDecimal}, the scale is defined differently: the number of
     * digits after the decimal place, which is the negative of our definition of scale.
     ','line_number':331,'multiline':True]['text':'*
     * The number of digits in the BCD. For example, "1007" has BCD "0x1007" and precision 4. The
     * maximum precision is 16 since a long can hold only 16 digits.
     *
     * <p>This value must be re-calculated whenever the value in bcd changes by using {@link
     * #computePrecisionAndCompact()}.
     ','line_number':340,'multiline':True]['text':'*
     * A bitmask of properties relating to the number represented by this object.
     *
     * @see #NEGATIVE_FLAG
     * @see #INFINITY_FLAG
     * @see #NAN_FLAG
     ','line_number':349,'multiline':True]['text':' The following three fields relate to the double-to-ascii fast path algorithm.','line_number':358,'multiline':False]['text':' When a double is given to DecimalQuantityBCD, it is converted to using a fast algorithm. The','line_number':359,'multiline':False]['text':' fast algorithm guarantees correctness to only the first ~12 digits of the double. The process','line_number':360,'multiline':False]['text':' of rounding the number ensures that the converted digits are correct, falling back to a slow-','line_number':361,'multiline':False]['text':' path algorithm if required.  Therefore, if a DecimalQuantity is constructed from a double, it','line_number':362,'multiline':False]['text':' is *required* that roundToMagnitude(), roundToIncrement(), or roundToInfinity() is called. If','line_number':363,'multiline':False]['text':' you don't round, assertions will fail in certain other methods if you try calling them.','line_number':364,'multiline':False]['text':'*
     * Whether the value in the BCD comes from the double fast path without having been rounded to
     * ensure correctness
     ','line_number':366,'multiline':True]['text':'*
     * The original number provided by the user and which is represented in BCD. Used when we need to
     * re-compute the BCD for an exact double representation.
     ','line_number':372,'multiline':True]['text':'*
     * The change in magnitude relative to the original double. Used when we need to re-compute the
     * BCD for an exact double representation.
     ','line_number':378,'multiline':True]['text':' Positions to keep track of leading and trailing zeros.','line_number':384,'multiline':False]['text':' lReqPos is the magnitude of the first required leading zero.','line_number':385,'multiline':False]['text':' rReqPos is the magnitude of the last required trailing zero.','line_number':386,'multiline':False]['text':' The value of the (suppressed) exponent after the number has been put into','line_number':390,'multiline':False]['text':' a notation with exponents (ex: compact, scientific).','line_number':391,'multiline':False]['text':'*
     * The BCD of the 16 digits of the number represented by this object. Every 4 bits of the long map
     * to one digit. For example, the number "12345" in BCD is "0x12345".
     *
     * <p>Whenever bcd changes internally, {@link #compact()} must be called, except in special cases
     * like setting the digit to zero.
     ','line_number':394,'multiline':True]['text':'*
     * Whether this {@link DecimalQuantity} has been explicitly converted to an exact double. true if
     * backed by a double that was explicitly converted via convertToAccurateDouble; false otherwise.
     * Used for testing.
     ','line_number':411,'multiline':True]['text':'*
     * Returns a single digit from the BCD list. No internal state is changed by calling this method.
     *
     * @param position The position of the digit to pop, counted in BCD units from the least
     *     significant digit. If outside the range supported by the implementation, zero is returned.
     * @return The digit at the specified location.
     ','line_number':420,'multiline':True]['text':'*
     * Sets the digit in the BCD list. This method only sets the digit; it is the caller's
     * responsibility to call {@link #compact} after setting the digit.
     *
     * @param position The position of the digit to pop, counted in BCD units from the least
     *     significant digit. If outside the range supported by the implementation, an AssertionError
     *     is thrown.
     * @param value The digit to set at the specified location.
     ','line_number':429,'multiline':True]['text':'*
     * Adds zeros to the end of the BCD list. This will result in an invalid BCD representation; it is
     * the caller's responsibility to do further manipulation and then call {@link #compact}.
     *
     * @param numDigits The number of zeros to add.
     ','line_number':440,'multiline':True]['text':'*
     * Directly removes digits from the end of the BCD list.
     * Updates the scale and precision.
     *
     * CAUTION: it is the caller's responsibility to call {@link #compact} after this method.
     ','line_number':448,'multiline':True]['text':'*
     * Directly removes digits from the front of the BCD list.
     * Updates precision.
     *
     * CAUTION: it is the caller's responsibility to call {@link #compact} after this method.
     ','line_number':456,'multiline':True]['text':'*
     * Sets the internal representation to zero. Clears any values stored in scale, precision,
     * hasDouble, origDouble, origDelta, exponent, and BCD data.
     ','line_number':464,'multiline':True]['text':'*
     * Sets the internal BCD state to represent the value in the given int. The int is guaranteed to
     * be either positive. The internal state is guaranteed to be empty when this method is called.
     *
     * @param n The value to consume.
     ','line_number':470,'multiline':True]['text':'*
     * Sets the internal BCD state to represent the value in the given long. The long is guaranteed to
     * be either positive. The internal state is guaranteed to be empty when this method is called.
     *
     * @param n The value to consume.
     ','line_number':478,'multiline':True]['text':'*
     * Removes trailing zeros from the BCD (adjusting the scale as required) and then computes the
     * precision. The precision is the number of digits in the number up through the greatest nonzero
     * digit.
     *
     * <p>This method must always be called when bcd changes in order for assumptions to be correct in
     * methods like {@link #fractionCount()}.
     ','line_number':496,'multiline':True]['text':'* Ensure that a byte array of at least 40 digits is allocated. ','line_number':516,'multiline':True]['text':'* Switches the internal storage mechanism between the 64-bit long and the byte array. ','line_number':521,'multiline':True]['text':' namespace impl','line_number':525,'multiline':False]['text':' namespace number','line_number':526,'multiline':False]['text':'__NUMBER_DECIMALQUANTITY_H__','line_number':530,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':532,'multiline':True]