['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' [SMDOC] Async generators','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' # Start','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' When an async generator is called, it synchronously runs until the','line_number':22,'multiline':False]['text':' JSOp::InitialYield and then suspends, just like a sync generator, and returns','line_number':23,'multiline':False]['text':' an async generator object (js::AsyncGeneratorObject).','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' # Request queue','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' When next/return/throw is called on the async generator object,','line_number':29,'multiline':False]['text':' js::AsyncGeneratorEnqueue performs the following:','line_number':30,'multiline':False]['text':'   * Create a new AsyncGeneratorRequest and enqueue it in the generator','line_number':31,'multiline':False]['text':'     object's request queue.','line_number':32,'multiline':False]['text':'   * Resume the generator with the oldest request, if the generator is','line_number':33,'multiline':False]['text':'     suspended (see "Resume" section below)','line_number':34,'multiline':False]['text':'   * Return the promise for the request','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' This is done in js::AsyncGeneratorEnqueue, which corresponds to','line_number':37,'multiline':False]['text':' AsyncGeneratorEnqueue in the spec,','line_number':38,'multiline':False]['text':' and js::AsyncGeneratorResumeNext corresponds to the following:','line_number':39,'multiline':False]['text':'   * AsyncGeneratorResolve','line_number':40,'multiline':False]['text':'   * AsyncGeneratorReject','line_number':41,'multiline':False]['text':'   * AsyncGeneratorResumeNext','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' The returned promise is resolved when the resumption for the request','line_number':44,'multiline':False]['text':' completes with yield/throw/return, in js::AsyncGeneratorResolve and','line_number':45,'multiline':False]['text':' js::AsyncGeneratorReject.','line_number':46,'multiline':False]['text':' They correspond to AsyncGeneratorResolve and AsyncGeneratorReject in the','line_number':47,'multiline':False]['text':' spec.','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' # Await','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' Async generator's `await` is implemented differently than async function's','line_number':53,'multiline':False]['text':' `await`.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' The bytecode is the following:','line_number':56,'multiline':False]['text':' (ignoring CanSkipAwait; see the comment in AsyncFunction.h for more details)','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' ```','line_number':59,'multiline':False]['text':'   (operand here)                  # VALUE','line_number':60,'multiline':False]['text':'   GetAliasedVar ".generator"      # VALUE .generator','line_number':61,'multiline':False]['text':'   Await 0                         # RVAL GENERATOR RESUMEKIND','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'   AfterYield                      # RVAL GENERATOR RESUMEKIND','line_number':64,'multiline':False]['text':'   CheckResumeKind                 # RVAL','line_number':65,'multiline':False]['text':' ```','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' Async generators don't use JSOp::AsyncAwait, and that part is handled','line_number':68,'multiline':False]['text':' in js::AsyncGeneratorResume, and js::AsyncGeneratorAwait called there.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' Both JSOp::Await and JSOp::Yield behave in the exactly same way,','line_number':71,'multiline':False]['text':' and js::AsyncGeneratorResume checks the last opcode and branches for','line_number':72,'multiline':False]['text':' await/yield/return cases.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' # Reaction jobs and resume after await','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' This is almost same as for async functions (see AsyncFunction.h).','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' The reaction record for the job is marked as "this is for async generator"','line_number':80,'multiline':False]['text':' (see js::AsyncGeneratorAwait), and handled specially in','line_number':81,'multiline':False]['text':' js::PromiseReactionJob, which calls js::AsyncGeneratorPromiseReactionJob.','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' # Yield','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':' `yield` is implemented with the following bytecode sequence:','line_number':87,'multiline':False]['text':' (Ignoring CanSkipAwait for simplicity)','line_number':88,'multiline':False]['text':'','line_number':89,'multiline':False]['text':' ```','line_number':90,'multiline':False]['text':'   (operand here)                  # VALUE','line_number':91,'multiline':False]['text':'   GetAliasedVar ".generator"      # VALUE .generator','line_number':92,'multiline':False]['text':'   Await 1                         # RVAL GENERATOR RESUMEKIND','line_number':93,'multiline':False]['text':'   AfterYield                      # RVAL GENERATOR RESUMEKIND','line_number':94,'multiline':False]['text':'   CheckResumeKind                 # RVAL','line_number':95,'multiline':False]['text':'','line_number':96,'multiline':False]['text':'   GetAliasedVar ".generator"      # RVAL .generator','line_number':97,'multiline':False]['text':'   Yield 2                         # RVAL2 GENERATOR RESUMEKIND','line_number':98,'multiline':False]['text':'','line_number':99,'multiline':False]['text':'   AfterYield                      # RVAL2 GENERATOR RESUMEKIND','line_number':100,'multiline':False]['text':'   CheckResumeKind                 # RVAL2','line_number':101,'multiline':False]['text':' ```','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':' The 1st part (JSOp::Await + JSOp::CheckResumeKind) performs an implicit','line_number':104,'multiline':False]['text':' `await`, as specified in AsyncGeneratorYield step 5.','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' AsyncGeneratorYield ( value )','line_number':107,'multiline':False]['text':' https://tc39.es/ecma262/#sec-asyncgeneratoryield','line_number':108,'multiline':False]['text':'','line_number':109,'multiline':False]['text':'   5. Set value to ? Await(value).','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' The 2nd part (JSOp::Yield) suspends execution and yields the result of','line_number':112,'multiline':False]['text':' `await`, as specified in AsyncGeneratorYield steps 1-4, 6-7, 9-10.','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':' AsyncGeneratorYield ( value )','line_number':115,'multiline':False]['text':' https://tc39.es/ecma262/#sec-asyncgeneratoryield','line_number':116,'multiline':False]['text':'','line_number':117,'multiline':False]['text':'   1. Let genContext be the running execution context.','line_number':118,'multiline':False]['text':'   2. Assert: genContext is the execution context of a generator.','line_number':119,'multiline':False]['text':'   3. Let generator be the value of the Generator component of genContext.','line_number':120,'multiline':False]['text':'   4. Assert: GetGeneratorKind() is async.','line_number':121,'multiline':False]['text':'   ..','line_number':122,'multiline':False]['text':'   6. Set generator.[[AsyncGeneratorState]] to suspendedYield.','line_number':123,'multiline':False]['text':'   7. Remove genContext from the execution context stack and restore the','line_number':124,'multiline':False]['text':'      execution context that is at the top of the execution context stack as','line_number':125,'multiline':False]['text':'      the running execution context.','line_number':126,'multiline':False]['text':'   8. ...','line_number':127,'multiline':False]['text':'   9. Return ! AsyncGeneratorResolve(generator, value, false).','line_number':128,'multiline':False]['text':'   10. NOTE: This returns to the evaluation of the operation that had most','line_number':129,'multiline':False]['text':'       previously resumed evaluation of genContext.','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':' The last part (JSOp::CheckResumeKind) checks the resumption type and','line_number':132,'multiline':False]['text':' resumes/throws/returns the execution, as specified in AsyncGeneratorYield','line_number':133,'multiline':False]['text':' step 8.','line_number':134,'multiline':False]['text':'','line_number':135,'multiline':False]['text':'   8. Set the code evaluation state of genContext such that when evaluation is','line_number':136,'multiline':False]['text':'      resumed with a Completion resumptionValue the following steps will be','line_number':137,'multiline':False]['text':'      performed:','line_number':138,'multiline':False]['text':'     a. If resumptionValue.[[Type]] is not return, return','line_number':139,'multiline':False]['text':'        Completion(resumptionValue).','line_number':140,'multiline':False]['text':'     b. Let awaited be Await(resumptionValue.[[Value]]).','line_number':141,'multiline':False]['text':'     c. If awaited.[[Type]] is throw, return Completion(awaited).','line_number':142,'multiline':False]['text':'     d. Assert: awaited.[[Type]] is normal.','line_number':143,'multiline':False]['text':'     e. Return Completion { [[Type]]: return, [[Value]]: awaited.[[Value]],','line_number':144,'multiline':False]['text':'        [[Target]]: empty }.','line_number':145,'multiline':False]['text':'     f. NOTE: When one of the above steps returns, it returns to the','line_number':146,'multiline':False]['text':'        evaluation of the YieldExpression production that originally called','line_number':147,'multiline':False]['text':'        this abstract operation.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' Resumption with `AsyncGenerator.prototype.return` is handled differently.','line_number':150,'multiline':False]['text':' See "Resumption with return" section below.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':'','line_number':153,'multiline':False]['text':' # Return','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':' `return` with operand is implemented with the following bytecode sequence:','line_number':156,'multiline':False]['text':' (Ignoring CanSkipAwait for simplicity)','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':' ```','line_number':159,'multiline':False]['text':'   (operand here)                  # VALUE','line_number':160,'multiline':False]['text':'   GetAliasedVar ".generator"      # VALUE .generator','line_number':161,'multiline':False]['text':'   Await 0                         # RVAL GENERATOR RESUMEKIND','line_number':162,'multiline':False]['text':'   AfterYield                      # RVAL GENERATOR RESUMEKIND','line_number':163,'multiline':False]['text':'   CheckResumeKind                 # RVAL','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':'   SetRval                         #','line_number':166,'multiline':False]['text':'   GetAliasedVar ".generator"      # .generator','line_number':167,'multiline':False]['text':'   FinalYieldRval                  #','line_number':168,'multiline':False]['text':' ```','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':' The 1st part (JSOp::Await + JSOp::CheckResumeKind) performs implicit','line_number':171,'multiline':False]['text':' `await`, as specified in ReturnStatement's Evaluation step 3.','line_number':172,'multiline':False]['text':'','line_number':173,'multiline':False]['text':' ReturnStatement: return Expression;','line_number':174,'multiline':False]['text':' https://tc39.es/ecma262/#sec-return-statement-runtime-semantics-evaluation','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':'   3. If ! GetGeneratorKind() is async, set exprValue to ? Await(exprValue).','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' And the 2nd part corresponds to AsyncGeneratorStart steps 5.a-e, 5.g.','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':' AsyncGeneratorStart ( generator, generatorBody )','line_number':181,'multiline':False]['text':' https://tc39.es/ecma262/#sec-asyncgeneratorstart','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':'   5. Set the code evaluation state of genContext such that when evaluation','line_number':184,'multiline':False]['text':'      is resumed for that execution context the following steps will be','line_number':185,'multiline':False]['text':'      performed:','line_number':186,'multiline':False]['text':'     a. Let result be the result of evaluating generatorBody.','line_number':187,'multiline':False]['text':'     b. Assert: If we return here, the async generator either threw an','line_number':188,'multiline':False]['text':'        exception or performed either an implicit or explicit return.','line_number':189,'multiline':False]['text':'     c. Remove genContext from the execution context stack and restore the','line_number':190,'multiline':False]['text':'        execution context that is at the top of the execution context stack','line_number':191,'multiline':False]['text':'        as the running execution context.','line_number':192,'multiline':False]['text':'     d. Set generator.[[AsyncGeneratorState]] to completed.','line_number':193,'multiline':False]['text':'     e. If result is a normal completion, let resultValue be undefined.','line_number':194,'multiline':False]['text':'     ...','line_number':195,'multiline':False]['text':'     g. Return ! AsyncGeneratorResolve(generator, resultValue, true).','line_number':196,'multiline':False]['text':'','line_number':197,'multiline':False]['text':' `return` without operand or implicit return is implicit with the following','line_number':198,'multiline':False]['text':' bytecode sequence:','line_number':199,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' ```','line_number':201,'multiline':False]['text':'   Undefined                       # undefined','line_number':202,'multiline':False]['text':'   SetRval                         #','line_number':203,'multiline':False]['text':'   GetAliasedVar ".generator"      # .generator','line_number':204,'multiline':False]['text':'   FinalYieldRval                  #','line_number':205,'multiline':False]['text':' ```','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' This is also AsyncGeneratorStart steps 5.a-e, 5.g.','line_number':208,'multiline':False]['text':'','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':' # Throw','line_number':211,'multiline':False]['text':'','line_number':212,'multiline':False]['text':' Unlike async function, async generator doesn't use implicit try-catch,','line_number':213,'multiline':False]['text':' but the throw completion is handled by js::AsyncGeneratorResume,','line_number':214,'multiline':False]['text':' and js::AsyncGeneratorThrown is called there.','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':'   5. ...','line_number':217,'multiline':False]['text':'     f. Else,','line_number':218,'multiline':False]['text':'       i. Let resultValue be result.[[Value]].','line_number':219,'multiline':False]['text':'       ii. If result.[[Type]] is not return, then','line_number':220,'multiline':False]['text':'         1. Return ! AsyncGeneratorReject(generator, resultValue).','line_number':221,'multiline':False]['text':'','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':' # Resumption with return','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' Resumption with return completion is handled in js::AsyncGeneratorResumeNext.','line_number':226,'multiline':False]['text':'','line_number':227,'multiline':False]['text':' If the generator is suspended, it doesn't immediately resume the generator','line_number':228,'multiline':False]['text':' script itself, but handles implicit `await` it in','line_number':229,'multiline':False]['text':' js::AsyncGeneratorResumeNext.','line_number':230,'multiline':False]['text':' (See PromiseHandlerAsyncGeneratorYieldReturnAwaitedFulfilled and','line_number':231,'multiline':False]['text':' PromiseHandlerAsyncGeneratorYieldReturnAwaitedRejected), and resumes the','line_number':232,'multiline':False]['text':' generator with the result of await.','line_number':233,'multiline':False]['text':' And the return completion is finally handled in JSOp::CheckResumeKind','line_number':234,'multiline':False]['text':' after JSOp::Yield.','line_number':235,'multiline':False]['text':'','line_number':236,'multiline':False]['text':' This corresponds to AsyncGeneratorYield step 8.','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' AsyncGeneratorYield ( value )','line_number':239,'multiline':False]['text':' https://tc39.es/ecma262/#sec-asyncgeneratoryield','line_number':240,'multiline':False]['text':'','line_number':241,'multiline':False]['text':'   8. Set the code evaluation state of genContext such that when evaluation','line_number':242,'multiline':False]['text':'      is resumed with a Completion resumptionValue the following steps will','line_number':243,'multiline':False]['text':'      be performed:','line_number':244,'multiline':False]['text':'     ..','line_number':245,'multiline':False]['text':'     b. Let awaited be Await(resumptionValue.[[Value]]).','line_number':246,'multiline':False]['text':'     c. If awaited.[[Type]] is throw, return Completion(awaited).','line_number':247,'multiline':False]['text':'     d. Assert: awaited.[[Type]] is normal.','line_number':248,'multiline':False]['text':'     e. Return Completion { [[Type]]: return, [[Value]]: awaited.[[Value]],','line_number':249,'multiline':False]['text':'        [[Target]]: empty }.','line_number':250,'multiline':False]['text':'','line_number':251,'multiline':False]['text':' If the generator is already completed, it awaits on the return value,','line_number':252,'multiline':False]['text':' (See PromiseHandlerAsyncGeneratorResumeNextReturnFulfilled and','line_number':253,'multiline':False]['text':'  PromiseHandlerAsyncGeneratorResumeNextReturnRejected), and resolves the','line_number':254,'multiline':False]['text':' request's promise with the value.','line_number':255,'multiline':False]['text':'','line_number':256,'multiline':False]['text':' It corresponds to AsyncGeneratorResumeNext step 10.b.i.','line_number':257,'multiline':False]['text':'','line_number':258,'multiline':False]['text':' AsyncGeneratorResumeNext ( generator )','line_number':259,'multiline':False]['text':' https://tc39.es/ecma262/#sec-asyncgeneratorresumenext','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':'   10. If completion is an abrupt completion, then','line_number':262,'multiline':False]['text':'     ..','line_number':263,'multiline':False]['text':'     b. If state is completed, then','line_number':264,'multiline':False]['text':'       i. If completion.[[Type]] is return, then','line_number':265,'multiline':False]['text':'         1. Set generator.[[AsyncGeneratorState]] to awaiting-return.','line_number':266,'multiline':False]['text':'         2. Let promise be ? PromiseResolve(%Promise%, completion.[[Value]]).','line_number':267,'multiline':False]['text':'         3. Let stepsFulfilled be the algorithm steps defined in','line_number':268,'multiline':False]['text':'            AsyncGeneratorResumeNext Return Processor Fulfilled Functions.','line_number':269,'multiline':False]['text':'         4. Let onFulfilled be ! CreateBuiltinFunction(stepsFulfilled, «','line_number':270,'multiline':False]['text':'            [[Generator]] »).','line_number':271,'multiline':False]['text':'         5. Set onFulfilled.[[Generator]] to generator.','line_number':272,'multiline':False]['text':'         6. Let stepsRejected be the algorithm steps defined in','line_number':273,'multiline':False]['text':'            AsyncGeneratorResumeNext Return Processor Rejected Functions.','line_number':274,'multiline':False]['text':'         7. Let onRejected be ! CreateBuiltinFunction(stepsRejected, «','line_number':275,'multiline':False]['text':'            [[Generator]] »).','line_number':276,'multiline':False]['text':'         8. Set onRejected.[[Generator]] to generator.','line_number':277,'multiline':False]['text':'         9. Perform ! PerformPromiseThen(promise, onFulfilled, onRejected).','line_number':278,'multiline':False]['text':'         10. Return undefined.','line_number':279,'multiline':False]['text':'','line_number':280,'multiline':False]['text':' Resume the async generator when the `await` operand fulfills to `value`.','line_number':288,'multiline':False]['text':' Resume the async generator when the `await` operand rejects with `reason`.','line_number':293,'multiline':False]['text':' Resume the async generator after awaiting on the value passed to','line_number':298,'multiline':False]['text':' AsyncGenerator#return, when the async generator was still executing.','line_number':299,'multiline':False]['text':' Split into two functions depending on whether the awaited value was','line_number':300,'multiline':False]['text':' fulfilled or rejected.','line_number':301,'multiline':False]['text':' AsyncGeneratorRequest record in the spec.','line_number':313,'multiline':False]['text':' Stores the info from AsyncGenerator#{next,return,throw}.','line_number':314,'multiline':False]['text':'','line_number':315,'multiline':False]['text':' This object is reused across multiple requests as an optimization, and','line_number':316,'multiline':False]['text':' stored in the Slot_CachedRequest slot.','line_number':317,'multiline':False]['text':' Int32 value with CompletionKind.','line_number':321,'multiline':False]['text':'   Normal: next','line_number':322,'multiline':False]['text':'   Return: return','line_number':323,'multiline':False]['text':'   Throw:  throw','line_number':324,'multiline':False]['text':' The value passed to AsyncGenerator#{next,return,throw}.','line_number':327,'multiline':False]['text':' The promise returned by AsyncGenerator#{next,return,throw}.','line_number':330,'multiline':False]['text':' Clear the request data for reuse.','line_number':344,'multiline':False]['text':' Int32 value containing one of the |State| fields from below.','line_number':375,'multiline':False]['text':' * null value if this async generator has no requests','line_number':378,'multiline':False]['text':' * AsyncGeneratorRequest if this async generator has only one request','line_number':379,'multiline':False]['text':' * list object if this async generator has 2 or more requests','line_number':380,'multiline':False]['text':' Cached AsyncGeneratorRequest for later use.','line_number':383,'multiline':False]['text':' undefined if there's no cache.','line_number':384,'multiline':False]['text':' "suspendedStart" in the spec.','line_number':392,'multiline':False]['text':' Suspended after invocation.','line_number':393,'multiline':False]['text':' "suspendedYield" in the spec','line_number':396,'multiline':False]['text':' Suspended with `yield` expression.','line_number':397,'multiline':False]['text':' "executing" in the spec.','line_number':400,'multiline':False]['text':' Resumed from initial suspend or yield, and either running the script','line_number':401,'multiline':False]['text':' or awaiting for `await` expression.','line_number':402,'multiline':False]['text':' Part of "executing" in the spec.','line_number':405,'multiline':False]['text':' Awaiting on the value passed by AsyncGenerator#return which is called','line_number':406,'multiline':False]['text':' while executing.','line_number':407,'multiline':False]['text':' "awaiting-return" in the spec.','line_number':410,'multiline':False]['text':' Awaiting on the value passed by AsyncGenerator#return which is called','line_number':411,'multiline':False]['text':' after completed.','line_number':412,'multiline':False]['text':' "completed" in the spec.','line_number':415,'multiline':False]['text':' The generator is completed.','line_number':416,'multiline':False]['text':' Queue is implemented in 2 ways.  If only one request is queued ever,','line_number':426,'multiline':False]['text':' request is stored directly to the slot.  Once 2 requests are queued, a','line_number':427,'multiline':False]['text':' list is created and requests are appended into it, and the list is','line_number':428,'multiline':False]['text':' stored to the slot.','line_number':429,'multiline':False]['text':' This function does either of the following:','line_number':498,'multiline':False]['text':'   * return a cached request object with the slots updated','line_number':499,'multiline':False]['text':'   * create a new request object with the slots set','line_number':500,'multiline':False]['text':' Stores the given request to the generator's cache after clearing its data','line_number':506,'multiline':False]['text':' slots.  The cached request will be reused in the subsequent createRequest','line_number':507,'multiline':False]['text':' call.','line_number':508,'multiline':False]['text':' Object that implements the sync iterator protocol.','line_number':540,'multiline':False]['text':' The `next` property of the iterator object.','line_number':543,'multiline':False]['text':' Iterator Helpers proposal','line_number':575,'multiline':False]['text':' namespace js','line_number':589,'multiline':False]['text':' vm_AsyncIteration_h ','line_number':591,'multiline':True]