['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2012-2015, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationkeys.cpp
*
* created on: 2012sep02
* created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':' the caller used GetAppendBuffer() and wrote the bytes already','line_number':48,'multiline':False]['text':' Do not write ignored bytes right at the end of the buffer.','line_number':69,'multiline':False]['text':'*
 * uint8_t byte buffer, similar to CharString but simpler.
 ','line_number':88,'multiline':True]['text':'* @return FALSE if memory allocation failed ','line_number':96,'multiline':True]['text':'* Appends all but the last byte to the sink. The last byte should be the 01 terminator. ','line_number':110,'multiline':True]['text':' forbid copying of this class','line_number':123,'multiline':False]['text':' forbid copying of this class','line_number':124,'multiline':False]['text':' namespace','line_number':201,'multiline':False]['text':'level','line_number':206,'multiline':True]['text':'*
 * Map from collation strength (UColAttributeValue)
 * to a mask of Collation::Level bits up to that strength,
 * excluding the CASE_LEVEL which is independent of the strength,
 * and excluding IDENTICAL_LEVEL which this function does not write.
 ','line_number':208,'multiline':True]['text':' UCOL_PRIMARY -> PRIMARY_LEVEL','line_number':215,'multiline':False]['text':' UCOL_SECONDARY -> up to SECONDARY_LEVEL','line_number':216,'multiline':False]['text':' UCOL_TERTIARY -> up to TERTIARY_LEVEL','line_number':217,'multiline':False]['text':' UCOL_QUATERNARY -> up to QUATERNARY_LEVEL','line_number':218,'multiline':False]['text':' UCOL_IDENTICAL -> up to QUATERNARY_LEVEL','line_number':222,'multiline':False]['text':' Set of levels to process and write.','line_number':235,'multiline':False]['text':' Minus the levels below minLevel.','line_number':240,'multiline':False]['text':' +1 so that we can use "<" and primary ignorables test out early.','line_number':248,'multiline':False]['text':' 0==no compression','line_number':259,'multiline':False]['text':' No need to keep all CEs in the buffer when we write a sort key.','line_number':269,'multiline':False]['text':' Variable CE, shift it to quaternary level.','line_number':274,'multiline':False]['text':' Ignore all following primary ignorables, and shift further variable CEs.','line_number':275,'multiline':False]['text':' Shifted primary weights are lower than the common weight.','line_number':282,'multiline':False]['text':' Prevent shifted primary lead bytes from','line_number':292,'multiline':False]['text':' overlapping with the common compression range.','line_number':293,'multiline':False]['text':' ce could be primary ignorable, or NO_CE, or the merge separator,','line_number':304,'multiline':False]['text':' or a regular primary CE, but it is not variable.','line_number':305,'multiline':False]['text':' If ce==NO_CE, then write nothing for the primary level but','line_number':306,'multiline':False]['text':' terminate compression on all levels and then exit the loop.','line_number':307,'multiline':False]['text':' Test the un-reordered primary for compressibility.','line_number':309,'multiline':False]['text':' No primary compression terminator','line_number':318,'multiline':False]['text':' at the end of the level or merged segment.','line_number':319,'multiline':False]['text':' Optimization for internalNextSortKeyPart():','line_number':339,'multiline':False]['text':' When the primary level overflows we can stop because we need not','line_number':340,'multiline':False]['text':' calculate (preflight) the whole sort key length.','line_number':341,'multiline':False]['text':' completely ignorable, no secondary/case/tertiary/quaternary','line_number':351,'multiline':False]['text':' secondary ignorable','line_number':356,'multiline':False]['text':' s is a common secondary weight, and','line_number':360,'multiline':False]['text':' backwards-secondary is off or the ce is not the merge separator.','line_number':361,'multiline':False]['text':' Append reverse weights. The level will be re-reversed later.','line_number':383,'multiline':False]['text':' commonSecondaries is now a multiple of SEC_COMMON_MAX_COUNT.','line_number':393,'multiline':False]['text':' same as >= SEC_COMMON_MAX_COUNT','line_number':394,'multiline':False]['text':' commonSecondaries == 0','line_number':398,'multiline':False]['text':' The backwards secondary level compares secondary weights backwards','line_number':401,'multiline':False]['text':' within segments separated by the merge separator (U+FFFE).','line_number':402,'multiline':False]['text':' Primary+caseLevel: Ignore case level weights of primary ignorables.','line_number':428,'multiline':False]['text':' Otherwise: Ignore case level weights of secondary ignorables.','line_number':429,'multiline':False]['text':' For details see the comments in the CollationCompare class.','line_number':430,'multiline':False]['text':' case bits & tertiary lead byte','line_number':432,'multiline':False]['text':' lowerFirst: Compress common weights to nibbles 1..7..13, mixed=14, upper=15.','line_number':438,'multiline':False]['text':' If there are only common (=lowest) weights in the whole level,','line_number':439,'multiline':False]['text':' then we need not write anything.','line_number':440,'multiline':False]['text':' Level length differences are handled already on the next-higher level.','line_number':441,'multiline':False]['text':' 14 or 15','line_number':459,'multiline':False]['text':' upperFirst: Compress common weights to nibbles 3..15, mixed=2, upper=1.','line_number':462,'multiline':False]['text':' The compressed common case weights only go up from the "low" value','line_number':463,'multiline':False]['text':' because with upperFirst the common weight is the highest one.','line_number':464,'multiline':False]['text':' 2 or 1','line_number':475,'multiline':False]['text':' c is a separator byte 01,','line_number':478,'multiline':False]['text':' or a left-shifted nibble 0x10, 0x20, ... 0xf0.','line_number':479,'multiline':False]['text':' Tertiary weights without case bits.','line_number':491,'multiline':False]['text':' Move lead bytes 06..3F to C6..FF for a large common-weight range.','line_number':492,'multiline':False]['text':' Tertiary weights with caseFirst=lowerFirst.','line_number':511,'multiline':False]['text':' Move lead bytes 06..BF to 46..FF for the common-weight range.','line_number':512,'multiline':False]['text':' Tertiary weights with caseFirst=upperFirst.','line_number':531,'multiline':False]['text':' Do not change the artificial uppercase weight of a tertiary CE (0.0.ut),','line_number':532,'multiline':False]['text':' to keep tertiary CEs well-formed.','line_number':533,'multiline':False]['text':' Their case+tertiary weights must be greater than those of','line_number':534,'multiline':False]['text':' primary and secondary CEs.','line_number':535,'multiline':False]['text':'','line_number':536,'multiline':False]['text':' Separator         01 -> 01      (unchanged)','line_number':537,'multiline':False]['text':' Lowercase     02..04 -> 82..84  (includes uncased)','line_number':538,'multiline':False]['text':' Common weight     05 -> 85..C5  (common-weight compression range)','line_number':539,'multiline':False]['text':' Lowercase     06..3F -> C6..FF','line_number':540,'multiline':False]['text':' Mixed case    42..7F -> 42..7F','line_number':541,'multiline':False]['text':' Uppercase     82..BF -> 02..3F','line_number':542,'multiline':False]['text':' Tertiary CE   86..BF -> C6..FF','line_number':543,'multiline':False]['text':' Keep separators unchanged.','line_number':545,'multiline':False]['text':' Invert case bits of primary & secondary CEs.','line_number':547,'multiline':False]['text':' Keep uppercase bits of tertiary CEs.','line_number':553,'multiline':False]['text':' If alternate=non-ignorable and there are only common quaternary weights,','line_number':583,'multiline':False]['text':' then we need not write anything.','line_number':584,'multiline':False]['text':' The only weights greater than the merge separator and less than the common weight','line_number':585,'multiline':False]['text':' are shifted primary weights, which are not generated for alternate=non-ignorable.','line_number':586,'multiline':False]['text':' There are also exactly as many quaternary weights as tertiary weights,','line_number':587,'multiline':False]['text':' so level length differences are handled already on tertiary level.','line_number':588,'multiline':False]['text':' Any above-common quaternary weight will compare greater regardless.','line_number':589,'multiline':False]['text':' ce == NO_CE','line_number':616,'multiline':False]['text':' Append the beyond-primary levels.','line_number':621,'multiline':False]['text':' Write pairs of nibbles as bytes, except separator bytes as themselves.','line_number':634,'multiline':False]['text':' Ignore the trailing NO_CE.','line_number':635,'multiline':False]['text':' !UCONFIG_NO_COLLATION','line_number':673,'multiline':False]