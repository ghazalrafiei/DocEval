['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' This file declares LIR instructions that are common to every platform.','line_number':14,'multiline':False]['text':' An LOsiPoint captures a snapshot after a call and ensures enough space to','line_number':55,'multiline':False]['text':' patch in a call to the invalidation mechanism.','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' Note: LSafepoints are 1:1 with LOsiPoints, so it holds a reference to the','line_number':58,'multiline':False]['text':' corresponding LSafepoint to inform it of the LOsiPoint's masm offset when it','line_number':59,'multiline':False]['text':' gets GC'd.','line_number':60,'multiline':False]['text':' Optional general register available for use when executing moves.','line_number':94,'multiline':False]['text':' Add a move which takes place simultaneously with all others in the group.','line_number':110,'multiline':False]['text':' Add a move which takes place after existing moves in the group.','line_number':113,'multiline':False]['text':' Constant 32-bit integer.','line_number':135,'multiline':False]['text':' Constant 64-bit integer.','line_number':147,'multiline':False]['text':' Constant pointer.','line_number':160,'multiline':False]['text':' Constant double.','line_number':173,'multiline':False]['text':' Constant float32.','line_number':185,'multiline':False]['text':' A constant Value.','line_number':197,'multiline':False]['text':' Formal argument for a function, returning a box. Formal arguments are','line_number':218,'multiline':False]['text':' initially read from the stack.','line_number':219,'multiline':False]['text':' Stack offset for a word-sized immutable input value to a frame.','line_number':227,'multiline':False]['text':' Base class for control instructions (goto, branch, etc.)','line_number':242,'multiline':False]['text':' Jumps to the start of a basic block.','line_number':261,'multiline':False]['text':' Allocates a new NamedLambdaObject.','line_number':453,'multiline':False]['text':'','line_number':454,'multiline':False]['text':' This instruction generates two possible instruction sets:','line_number':455,'multiline':False]['text':'   (1) An inline allocation of the call object is attempted.','line_number':456,'multiline':False]['text':'   (2) Otherwise, a callVM create a new object.','line_number':457,'multiline':False]['text':'','line_number':458,'multiline':False]['text':' Allocates a new CallObject.','line_number':473,'multiline':False]['text':'','line_number':474,'multiline':False]['text':' This instruction generates two possible instruction sets:','line_number':475,'multiline':False]['text':'   (1) If the call object is extensible, this is a callVM to create the','line_number':476,'multiline':False]['text':'       call object.','line_number':477,'multiline':False]['text':'   (2) Otherwise, an inline allocation of the call object is attempted.','line_number':478,'multiline':False]['text':'','line_number':479,'multiline':False]['text':' Takes in an Object and a Value.','line_number':529,'multiline':False]['text':' namespace details','line_number':632,'multiline':False]['text':' Allocate an object for |new| on the caller-side,','line_number':746,'multiline':False]['text':' when there is no templateObject or prototype known','line_number':747,'multiline':False]['text':' Allocate an object for |new| on the caller-side.','line_number':764,'multiline':False]['text':' Always performs object initialization with a fast path.','line_number':765,'multiline':False]['text':' Allocate a new arguments object for the frame.','line_number':782,'multiline':False]['text':' Allocate a new arguments object for an inlined frame.','line_number':807,'multiline':False]['text':' Get argument from arguments object.','line_number':853,'multiline':False]['text':' Set argument on arguments object.','line_number':871,'multiline':False]['text':' Load an element from an arguments object.','line_number':893,'multiline':False]['text':' Return |arguments.length| unless it has been overridden.','line_number':911,'multiline':False]['text':' Guard that the given flags are not set on the arguments object.','line_number':924,'multiline':False]['text':' If the Value is an Object, return unbox(Value).','line_number':944,'multiline':False]['text':' Otherwise, return the other Object.','line_number':945,'multiline':False]['text':' Writes a typed argument for a function call to the frame's argument vector.','line_number':990,'multiline':False]['text':' Index into frame-scope argument vector.','line_number':992,'multiline':False]['text':' Writes an untyped argument for a function call to the frame's argument','line_number':1007,'multiline':False]['text':' vector.','line_number':1008,'multiline':False]['text':' Index into frame-scope argument vector.','line_number':1010,'multiline':False]['text':' Common code for LIR descended from MCall.','line_number':1023,'multiline':False]['text':' Does not include |this|.','line_number':1043,'multiline':False]['text':' Generates a polymorphic callsite, wherein the function being called is','line_number':1050,'multiline':False]['text':' unknown and anticipated to vary.','line_number':1051,'multiline':False]['text':' Generates a hardcoded callsite for a known, non-native target.','line_number':1069,'multiline':False]['text':' Generates a hardcoded callsite for a known, native target.','line_number':1084,'multiline':False]['text':' Registers used for callWithABI().','line_number':1092,'multiline':False]['text':' Temporary registers.','line_number':1097,'multiline':False]['text':' Generates a hardcoded callsite for a known, DOM-native target.','line_number':1107,'multiline':False]['text':' Generates a polymorphic callsite, wherein the function being called is','line_number':1307,'multiline':False]['text':' unknown and anticipated to vary.','line_number':1308,'multiline':False]['text':' All registers are calltemps. argc is mapped to the same register as','line_number':1361,'multiline':False]['text':' ArgsObj. argc becomes live as ArgsObj is dying.','line_number':1362,'multiline':False]['text':' argc is mapped to the same register as elements: argc becomes','line_number':1393,'multiline':False]['text':' live as elements is dying, all registers are calltemps.','line_number':1394,'multiline':False]['text':' argc is mapped to the same register as elements: argc becomes','line_number':1432,'multiline':False]['text':' live as elements is dying, all registers are calltemps.','line_number':1433,'multiline':False]['text':' tempStackCounter is mapped to the same register as newTarget:','line_number':1436,'multiline':False]['text':' tempStackCounter becomes live as newTarget is dying, all registers are','line_number':1437,'multiline':False]['text':' calltemps.','line_number':1438,'multiline':False]['text':' Takes in either an integer or boolean input and tests it for truthiness.','line_number':1442,'multiline':False]['text':' Takes in an int64 input and tests it for truthiness.','line_number':1459,'multiline':False]['text':' Takes in a double input and tests it for truthiness.','line_number':1476,'multiline':False]['text':' Takes in a float32 input and tests it for truthiness.','line_number':1493,'multiline':False]['text':' Takes in a bigint input and tests it for truthiness.','line_number':1510,'multiline':False]['text':' Takes an object and tests it for truthiness.  An object is falsy iff it','line_number':1527,'multiline':False]['text':' emulates |undefined|; see js::EmulatesUndefined.','line_number':1528,'multiline':False]['text':' Takes in a boxed value and tests it for truthiness.','line_number':1550,'multiline':False]['text':' Compares two integral values of the same JS type, either integer or object.','line_number':1581,'multiline':False]['text':' For objects, both operands are in registers.','line_number':1582,'multiline':False]['text':' Compares two integral values of the same JS type, either integer or object.','line_number':1652,'multiline':False]['text':' For objects, both operands are in registers.','line_number':1653,'multiline':False]['text':' Takes a value and tests whether it is null, undefined, or is an object that','line_number':1869,'multiline':False]['text':' emulates |undefined|, as determined by the JSCLASS_EMULATES_UNDEFINED class','line_number':1870,'multiline':False]['text':' flag on unwrapped objects.  See also js::EmulatesUndefined.','line_number':1871,'multiline':False]['text':' Takes an object pointer and tests whether it is an object that emulates','line_number':1893,'multiline':False]['text':' |undefined|, as above.','line_number':1894,'multiline':False]['text':' Not operation on an integer.','line_number':1990,'multiline':False]['text':' Not operation on an int64.','line_number':2000,'multiline':False]['text':' Not operation on a double.','line_number':2011,'multiline':False]['text':' Not operation on a float32.','line_number':2023,'multiline':False]['text':' Not operation on a BigInt.','line_number':2035,'multiline':False]['text':' Boolean complement operation on an object.','line_number':2047,'multiline':False]['text':' Boolean complement operation on a value.','line_number':2059,'multiline':False]['text':' Bitwise not operation, takes a 32-bit integer as input and returning','line_number':2083,'multiline':False]['text':' a 32-bit integer result as an output.','line_number':2084,'multiline':False]['text':' Binary bitwise operation, taking two 32-bit integers as inputs and returning','line_number':2092,'multiline':False]['text':' a 32-bit integer result as an output.','line_number':2093,'multiline':False]['text':' Shift operation, taking two 32-bit integers as inputs and returning','line_number':2128,'multiline':False]['text':' a 32-bit integer result as an output.','line_number':2129,'multiline':False]['text':' Sign extension','line_number':2163,'multiline':False]['text':' Returns from the function being compiled (not used in inlined frames). The','line_number':2207,'multiline':False]['text':' input must be a box.','line_number':2208,'multiline':False]['text':' Negative of an integer','line_number':2311,'multiline':False]['text':' Negative of an int64','line_number':2320,'multiline':False]['text':' Negative of a double.','line_number':2330,'multiline':False]['text':' Negative of a float32.','line_number':2339,'multiline':False]['text':' Absolute value of an integer.','line_number':2348,'multiline':False]['text':' Absolute value of a double.','line_number':2359,'multiline':False]['text':' Absolute value of a float32.','line_number':2368,'multiline':False]['text':' Copysign for doubles.','line_number':2377,'multiline':False]['text':' Copysign for float32.','line_number':2384,'multiline':False]['text':' Count leading zeroes on an int32.','line_number':2391,'multiline':False]['text':' Count leading zeroes on an int64.','line_number':2402,'multiline':False]['text':' Count trailing zeroes on an int32.','line_number':2414,'multiline':False]['text':' Count trailing zeroes on an int64.','line_number':2425,'multiline':False]['text':' Count population on an int32.','line_number':2437,'multiline':False]['text':' Count population on an int64.','line_number':2452,'multiline':False]['text':' Square root of a double.','line_number':2465,'multiline':False]['text':' Square root of a float32.','line_number':2474,'multiline':False]['text':' Double raised to an integer power.','line_number':2544,'multiline':False]['text':' Integer raised to an integer power.','line_number':2561,'multiline':False]['text':' Double raised to a double power.','line_number':2582,'multiline':False]['text':' Constant of a power of two raised to an integer power.','line_number':2599,'multiline':False]['text':' Sign value of an integer.','line_number':2614,'multiline':False]['text':' Sign value of a double.','line_number':2623,'multiline':False]['text':' Sign value of a double with expected int32 result.','line_number':2632,'multiline':False]['text':' Adds two integers, returning an integer value.','line_number':2677,'multiline':False]['text':' Subtracts two integers, returning an integer value.','line_number':2706,'multiline':False]['text':' Performs an add, sub, mul, or div on two double values.','line_number':2759,'multiline':False]['text':' Performs an add, sub, mul, or div on two double values.','line_number':2773,'multiline':False]['text':' Adds two string, returning a string.','line_number':3102,'multiline':False]['text':' Get uint16 character code from a string.','line_number':3130,'multiline':False]['text':' Convert uint16 character code to a string.','line_number':3148,'multiline':False]['text':' Convert uint32 code point to a string.','line_number':3161,'multiline':False]['text':' Calls the ToLowerCase or ToUpperCase case conversion function.','line_number':3181,'multiline':False]['text':' Convert a 32-bit integer to a double.','line_number':3234,'multiline':False]['text':' Convert a 32-bit float to a double.','line_number':3245,'multiline':False]['text':' Convert a double to a 32-bit float.','line_number':3256,'multiline':False]['text':' Convert a 32-bit integer to a float32.','line_number':3267,'multiline':False]['text':' Convert a value to a double.','line_number':3278,'multiline':False]['text':' Convert a value to a float32.','line_number':3292,'multiline':False]['text':' Convert a value to an int32.','line_number':3306,'multiline':False]['text':'   Input: components of a Value','line_number':3307,'multiline':False]['text':'   Output: 32-bit integer','line_number':3308,'multiline':False]['text':'   Bailout: undefined, string, object, or non-int32 double','line_number':3309,'multiline':False]['text':'   Temps: one float register, one GP register','line_number':3310,'multiline':False]['text':'','line_number':3311,'multiline':False]['text':' This instruction requires a temporary float register.','line_number':3312,'multiline':False]['text':' Convert a value to a BigInt.','line_number':3357,'multiline':False]['text':' Convert a double to an int32.','line_number':3371,'multiline':False]['text':'   Input: floating-point register','line_number':3372,'multiline':False]['text':'   Output: 32-bit integer','line_number':3373,'multiline':False]['text':'   Bailout: if the double cannot be converted to an integer.','line_number':3374,'multiline':False]['text':' Convert a float32 to an int32.','line_number':3387,'multiline':False]['text':'   Input: floating-point register','line_number':3388,'multiline':False]['text':'   Output: 32-bit integer','line_number':3389,'multiline':False]['text':'   Bailout: if the float32 cannot be converted to an integer.','line_number':3390,'multiline':False]['text':' Truncates a double to an int32.','line_number':3403,'multiline':False]['text':'   Input: floating-point register','line_number':3404,'multiline':False]['text':'   Output: 32-bit integer','line_number':3405,'multiline':False]['text':'   Bailout: if the double when converted to an integer exceeds the int32','line_number':3406,'multiline':False]['text':'            bounds. No bailout for NaN or negative zero.','line_number':3407,'multiline':False]['text':' Truncates a float to an int32.','line_number':3420,'multiline':False]['text':'   Input: floating-point register','line_number':3421,'multiline':False]['text':'   Output: 32-bit integer','line_number':3422,'multiline':False]['text':'   Bailout: if the double when converted to an integer exceeds the int32','line_number':3423,'multiline':False]['text':'            bounds. No bailout for NaN or negative zero.','line_number':3424,'multiline':False]['text':' Convert a double to a truncated int32.','line_number':3437,'multiline':False]['text':'   Input: floating-point register','line_number':3438,'multiline':False]['text':'   Output: 32-bit integer','line_number':3439,'multiline':False]['text':' Convert a double to a truncated int32 with tls offset because we need it for','line_number':3455,'multiline':False]['text':' the slow ool path.','line_number':3456,'multiline':False]['text':' Convert a float32 to a truncated int32.','line_number':3476,'multiline':False]['text':'   Input: floating-point register','line_number':3477,'multiline':False]['text':'   Output: 32-bit integer','line_number':3478,'multiline':False]['text':' Convert a float32 to a truncated int32 with tls offset because we need it for','line_number':3494,'multiline':False]['text':' the slow ool path.','line_number':3495,'multiline':False]['text':' Convert a boolean value to a string.','line_number':3553,'multiline':False]['text':' Convert an integer hosted on one definition to a string with a function call.','line_number':3566,'multiline':False]['text':' Convert a double hosted on one definition to a string with a function call.','line_number':3579,'multiline':False]['text':' Convert a primitive to a string with a function call.','line_number':3594,'multiline':False]['text':' Double raised to a half power.','line_number':3612,'multiline':False]['text':' Passed the BaselineFrame address in the OsrFrameReg via the IonOsrTempData','line_number':3642,'multiline':False]['text':' populated by PrepareOsrTempData.','line_number':3643,'multiline':False]['text':'','line_number':3644,'multiline':False]['text':' Forwards this object to the LOsrValues for Value materialization.','line_number':3645,'multiline':False]['text':' Materialize a Value stored in an interpreter frame for OSR.','line_number':3665,'multiline':False]['text':' Materialize a JSObject env chain stored in an interpreter frame for OSR.','line_number':3678,'multiline':False]['text':' Materialize a JSObject env chain stored in an interpreter frame for OSR.','line_number':3691,'multiline':False]['text':' Materialize a JSObject ArgumentsObject stored in an interpreter frame for','line_number':3704,'multiline':False]['text':' OSR.','line_number':3705,'multiline':False]['text':' Takes two temps: these are intendend to be FloatReg0 and FloatReg1','line_number':3864,'multiline':False]['text':' To allow the actual cache code to safely clobber those values without','line_number':3865,'multiline':False]['text':' save and restore.','line_number':3866,'multiline':False]['text':' Takes two temps: these are intendend to be FloatReg0 and FloatReg1','line_number':3886,'multiline':False]['text':' To allow the actual cache code to safely clobber those values without','line_number':3887,'multiline':False]['text':' save and restore.','line_number':3888,'multiline':False]['text':' Load the "slots" member out of a JSObject.','line_number':4016,'multiline':False]['text':'   Input: JSObject pointer','line_number':4017,'multiline':False]['text':'   Output: slots pointer','line_number':4018,'multiline':False]['text':' Load the "elements" member out of a JSObject.','line_number':4030,'multiline':False]['text':'   Input: JSObject pointer','line_number':4031,'multiline':False]['text':'   Output: elements pointer','line_number':4032,'multiline':False]['text':' Load the initialized length from an elements header.','line_number':4047,'multiline':False]['text':' Store to the initialized length in an elements header. Note the input is an','line_number':4060,'multiline':False]['text':' *index*, one less than the desired initialized length.','line_number':4061,'multiline':False]['text':' Load the length from an elements header.','line_number':4076,'multiline':False]['text':' Store to the length in an elements header. Note the input is an *index*,','line_number':4089,'multiline':False]['text':' one less than the desired length.','line_number':4090,'multiline':False]['text':' Load the "length" property of a function.','line_number':4105,'multiline':False]['text':' Load the "name" property of a function.','line_number':4118,'multiline':False]['text':' Read the length of an array buffer view.','line_number':4170,'multiline':False]['text':' Read the byteOffset of an array buffer view.','line_number':4187,'multiline':False]['text':' Load an array buffer view's elements vector.','line_number':4200,'multiline':False]['text':' Return the element size of a typed array.','line_number':4212,'multiline':False]['text':' Double to IntPtr, eligible for accessing into a TypedArray or DataView. If','line_number':4239,'multiline':False]['text':' the index isn't exactly representable as an IntPtr, depending on the','line_number':4240,'multiline':False]['text':' supportOOB flag on the MIR instruction, either bail out or produce an IntPtr','line_number':4241,'multiline':False]['text':' which is equivalent to an OOB access.','line_number':4242,'multiline':False]['text':' Bailout if index >= length.','line_number':4257,'multiline':False]['text':' Bailout if index + minimum < 0 or index + maximum >= length.','line_number':4272,'multiline':False]['text':' Bailout if index < minimum.','line_number':4289,'multiline':False]['text':' Load a value from a dense array's elements vector. Bail out if it's the hole','line_number':4317,'multiline':False]['text':' value.','line_number':4318,'multiline':False]['text':' Load a value from an array's elements vector, loading |undefined| if we hit a','line_number':4368,'multiline':False]['text':' hole. Bail out if we get a negative index.','line_number':4369,'multiline':False]['text':' Store a boxed value to a dense array's element vector.','line_number':4392,'multiline':False]['text':' Store a typed value to a dense array's elements vector. Compared to','line_number':4416,'multiline':False]['text':' LStoreElementV, this instruction can store doubles and constants directly,','line_number':4417,'multiline':False]['text':' and does not store the type tag if the array is monomorphic and known to','line_number':4418,'multiline':False]['text':' be packed.','line_number':4419,'multiline':False]['text':' Like LStoreElementV, but supports indexes >= initialized length.','line_number':4456,'multiline':False]['text':' Like LStoreElementT, but supports indexes >= initialized length.','line_number':4481,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':4833,'multiline':False]['text':' MIPS32, MIPS64','line_number':4846,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':4869,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':4883,'multiline':False]['text':' MIPS32, MIPS64','line_number':4894,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':4917,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':4933,'multiline':False]['text':' MIPS32, MIPS64','line_number':4946,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':4974,'multiline':False]['text':' Atomic binary operation where the result is discarded.','line_number':4984,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':4990,'multiline':False]['text':' MIPS32, MIPS64','line_number':5001,'multiline':False]['text':' Temp that may be used on LL/SC platforms for the flag result of the store.','line_number':5022,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':5024,'multiline':False]['text':' x64, ARM64','line_number':5057,'multiline':False]['text':' ARM32','line_number':5069,'multiline':False]['text':' x86','line_number':5082,'multiline':False]['text':' x64, ARM64','line_number':5111,'multiline':False]['text':' x86','line_number':5129,'multiline':False]['text':' ARM','line_number':5146,'multiline':False]['text':' ARM, ARM64, x64','line_number':5183,'multiline':False]['text':' x86','line_number':5197,'multiline':False]['text':' x86','line_number':5226,'multiline':False]['text':' ARM64, x64','line_number':5240,'multiline':False]['text':' ARM','line_number':5255,'multiline':False]['text':' Atomic binary operation where the result is discarded.','line_number':5283,'multiline':False]['text':' x86','line_number':5289,'multiline':False]['text':' x64','line_number':5304,'multiline':False]['text':' ARM64','line_number':5318,'multiline':False]['text':' Load a boxed value from an object's fixed slot.','line_number':5396,'multiline':False]['text':' Load a typed value from an object's fixed slot.','line_number':5408,'multiline':False]['text':' Store a boxed value to an object's fixed slot.','line_number':5508,'multiline':False]['text':' Store a typed value to an object's fixed slot.','line_number':5525,'multiline':False]['text':' Note, Name ICs always return a Value. There are no V/T variants.','line_number':5540,'multiline':False]['text':' Patchable jump to stubs generated for a GetProperty cache, which loads a','line_number':5585,'multiline':False]['text':' boxed value.','line_number':5586,'multiline':False]['text':' Load a value from an object's dslots or a slots vector.','line_number':5629,'multiline':False]['text':' Store a value to an object's dslots or a slots vector.','line_number':5641,'multiline':False]['text':' Store a typed value to an object's dslots or a slots vector. This has a','line_number':5658,'multiline':False]['text':' few advantages over LStoreDynamicSlotV:','line_number':5659,'multiline':False]['text':' 1) We can bypass storing the type tag if the slot has the same type as','line_number':5660,'multiline':False]['text':'    the value.','line_number':5661,'multiline':False]['text':' 2) Better register allocation: we can store constants and FP regs directly','line_number':5662,'multiline':False]['text':'    without requiring a second register for the value.','line_number':5663,'multiline':False]['text':' Read length field of a JSString*.','line_number':5678,'multiline':False]['text':' Take the floor of a double precision number and converts it to an int32.','line_number':5691,'multiline':False]['text':' Implements Math.floor().','line_number':5692,'multiline':False]['text':' Take the floor of a single precision number and converts it to an int32.','line_number':5702,'multiline':False]['text':' Implements Math.floor().','line_number':5703,'multiline':False]['text':' Take the ceiling of a double precision number and converts it to an int32.','line_number':5713,'multiline':False]['text':' Implements Math.ceil().','line_number':5714,'multiline':False]['text':' Take the ceiling of a single precision number and converts it to an int32.','line_number':5724,'multiline':False]['text':' Implements Math.ceil().','line_number':5725,'multiline':False]['text':' Round a double precision number and converts it to an int32.','line_number':5735,'multiline':False]['text':' Implements Math.round().','line_number':5736,'multiline':False]['text':' Round a single precision number and converts it to an int32.','line_number':5751,'multiline':False]['text':' Implements Math.round().','line_number':5752,'multiline':False]['text':' Truncates a double precision number and converts it to an int32.','line_number':5767,'multiline':False]['text':' Implements Math.trunc().','line_number':5768,'multiline':False]['text':' Truncates a single precision number and converts it to an int32.','line_number':5778,'multiline':False]['text':' Implements Math.trunc().','line_number':5779,'multiline':False]['text':' Rounds a double precision number accordingly to mir()->roundingMode(),','line_number':5789,'multiline':False]['text':' and keeps a double output.','line_number':5790,'multiline':False]['text':' Rounds a single precision number accordingly to mir()->roundingMode(),','line_number':5802,'multiline':False]['text':' and keeps a single output.','line_number':5803,'multiline':False]['text':' Load a function's call environment.','line_number':5815,'multiline':False]['text':' Allocate a new LexicalEnvironmentObject.','line_number':5850,'multiline':False]['text':' Copy a LexicalEnvironmentObject.','line_number':5866,'multiline':False]['text':' Allocate a new ClassBodyLexicalEnvironmentObject.','line_number':5882,'multiline':False]['text':' Patchable jump to stubs generated for a SetProperty cache.','line_number':5947,'multiline':False]['text':' Takes an additional temp: this is intendend to be FloatReg0 to allow the','line_number':5952,'multiline':False]['text':' actual cache code to safely clobber that value without save and restore.','line_number':5953,'multiline':False]['text':' Read the number of actual arguments.','line_number':6059,'multiline':False]['text':' Load a value from the actual arguments.','line_number':6067,'multiline':False]['text':' Create the rest parameter.','line_number':6079,'multiline':False]['text':' Convert a Boolean to an Int64, following ToBigInt.','line_number':6142,'multiline':False]['text':' Convert a String to an Int64, following ToBigInt.','line_number':6157,'multiline':False]['text':' Simulate ToBigInt on a Value and produce a matching Int64.','line_number':6172,'multiline':False]['text':' Truncate a BigInt to an unboxed int64.','line_number':6189,'multiline':False]['text':' Create a new BigInt* from an unboxed int64.','line_number':6206,'multiline':False]['text':' Generational write barrier used when writing an object to another object.','line_number':6224,'multiline':False]['text':' Generational write barrier used when writing a string to an object.','line_number':6243,'multiline':False]['text':' Generational write barrier used when writing a BigInt to an object.','line_number':6262,'multiline':False]['text':' Generational write barrier used when writing a value to another object.','line_number':6281,'multiline':False]['text':' Generational write barrier used when writing an object to another object's','line_number':6301,'multiline':False]['text':' elements.','line_number':6302,'multiline':False]['text':' Generational write barrier used when writing a string to an object's','line_number':6329,'multiline':False]['text':' elements.','line_number':6330,'multiline':False]['text':' Generational write barrier used when writing a BigInt to an object's','line_number':6357,'multiline':False]['text':' elements.','line_number':6358,'multiline':False]['text':' Generational write barrier used when writing a value to another object's','line_number':6385,'multiline':False]['text':' elements.','line_number':6386,'multiline':False]['text':' Guard against an object's identity.','line_number':6415,'multiline':False]['text':' Guard against an function's identity.','line_number':6432,'multiline':False]['text':' This is a base class for LWasmLoad/LWasmLoadI64.','line_number':7353,'multiline':False]['text':' namespace details','line_number':7369,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':7483,'multiline':False]['text':' MIPS32, MIPS64','line_number':7494,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':7519,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':7539,'multiline':False]['text':' MIPS32, MIPS64','line_number':7548,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':7570,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':7586,'multiline':False]['text':' MIPS32, MIPS64','line_number':7599,'multiline':False]['text':' Temp that may be used on some platforms to hold a computed address.','line_number':7623,'multiline':False]['text':' Temp that may be used on LL/SC platforms for the flag result of the store.','line_number':7627,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':7629,'multiline':False]['text':' Atomic binary operation where the result is discarded.','line_number':7637,'multiline':False]['text':' ARM, ARM64, x86, x64','line_number':7641,'multiline':False]['text':' MIPS32, MIPS64','line_number':7653,'multiline':False]['text':' Temp that may be used on some platforms to hold a computed address.','line_number':7673,'multiline':False]['text':' Temp that may be used on LL/SC platforms for the flag result of the store.','line_number':7677,'multiline':False]['text':' Temp that may be used on LL/SC platforms for extract/insert bits of word.','line_number':7679,'multiline':False]['text':' +1 for tls.','line_number':7800,'multiline':False]['text':' All MWasmCalls preserve the TLS register:','line_number':7862,'multiline':False]['text':'  - internal/indirect calls do by the internal wasm ABI','line_number':7863,'multiline':False]['text':'  - import calls do by explicitly saving/restoring at the callsite','line_number':7864,'multiline':False]['text':'  - builtin calls do because the TLS reg is non-volatile','line_number':7865,'multiline':False]['text':' See also CodeGeneratorShared::emitWasmCall.','line_number':7866,'multiline':False]['text':' LDefinition::TypeFrom isn't defined for MIRType::Int64 values on','line_number':7936,'multiline':False]['text':' this platform, so here we have a special case.','line_number':7937,'multiline':False]['text':' The parameter 'type' is a bitwise 'or' of the barrier types needed,','line_number':8271,'multiline':False]['text':' see AtomicOp.h.','line_number':8272,'multiline':False]['text':' Math.random().','line_number':8311,'multiline':False]['text':' defs = ','line_number':8412,'multiline':True]['text':' operands = ','line_number':8412,'multiline':True]['text':' temps = ','line_number':8413,'multiline':True]['text':' defs= ','line_number':8454,'multiline':True]['text':'operands = ','line_number':8455,'multiline':True]['text':' temps = ','line_number':8456,'multiline':True]['text':' defs= ','line_number':8475,'multiline':True]['text':' defs= ','line_number':8475,'multiline':True]['text':' temps = ','line_number':8476,'multiline':True]['text':' defs= ','line_number':8491,'multiline':True]['text':' defs= ','line_number':8492,'multiline':True]['text':' temps = ','line_number':8493,'multiline':True]['text':' Wasm SIMD.','line_number':9024,'multiline':False]['text':' Constant Simd128','line_number':9026,'multiline':False]['text':' (v128, v128, v128) -> v128 effect-free operation.','line_number':9038,'multiline':False]['text':' temp is FPR (and always in use).','line_number':9039,'multiline':False]['text':' (v128, v128) -> v128 effect-free operations','line_number':9065,'multiline':False]['text':' lhs and dest are the same.','line_number':9066,'multiline':False]['text':' temps (if in use) are FPR.','line_number':9067,'multiline':False]['text':' The op may differ from the MIR node's op.','line_number':9068,'multiline':False]['text':' (v128, i32) -> v128 effect-free variable-width shift operations','line_number':9120,'multiline':False]['text':' lhs and dest are the same.','line_number':9121,'multiline':False]['text':' temp0 is a GPR (if in use).','line_number':9122,'multiline':False]['text':' temp1 is an FPR (if in use).','line_number':9123,'multiline':False]['text':' (v128, i32) -> v128 effect-free constant-width shift operations','line_number':9147,'multiline':False]['text':' (v128) -> v128 sign replication operation.','line_number':9166,'multiline':False]['text':' (v128, v128, imm_simd) -> v128 effect-free operation.','line_number':9182,'multiline':False]['text':' temp is FPR (and always in use).','line_number':9183,'multiline':False]['text':' Shuffle operations.  NOTE: these may still be x86-centric, but the set can','line_number':9186,'multiline':False]['text':' accomodate operations from other architectures.','line_number':9187,'multiline':False]['text':' Blend bytes.  control_ has the blend mask as an I8x16: 0 to select from','line_number':9189,'multiline':False]['text':' the lhs, -1 to select from the rhs.','line_number':9190,'multiline':False]['text':' Blend words.  control_ has the blend mask as an I16x8: 0 to select from','line_number':9193,'multiline':False]['text':' the lhs, -1 to select from the rhs.','line_number':9194,'multiline':False]['text':' Concat the lhs in front of the rhs and shift right by bytes, extracting','line_number':9197,'multiline':False]['text':' the low 16 bytes; control_[0] has the shift count.','line_number':9198,'multiline':False]['text':' Interleave qwords/dwords/words/bytes from high/low halves of operands.','line_number':9201,'multiline':False]['text':' The low-order item in the result comes from the lhs, then the next from','line_number':9202,'multiline':False]['text':' the rhs, and so on.  control_ is ignored.','line_number':9203,'multiline':False]['text':' Fully general shuffle+blend.  control_ has the shuffle mask.','line_number':9213,'multiline':False]['text':' (v128, imm_simd) -> v128 effect-free operation.','line_number':9244,'multiline':False]['text':' Permutation operations.  NOTE: these may still be x86-centric, but the set','line_number':9247,'multiline':False]['text':' can accomodate operations from other architectures.','line_number':9248,'multiline':False]['text':'','line_number':9249,'multiline':False]['text':' The "low-order" byte is in lane 0 of an 8x16 datum, the "high-order" byte','line_number':9250,'multiline':False]['text':' in lane 15.  The low-order byte is also the "rightmost".  In wasm, the','line_number':9251,'multiline':False]['text':' constant (v128.const i8x16 0 1 2 ... 15) has 0 in the low-order byte and 15','line_number':9252,'multiline':False]['text':' in the high-order byte.','line_number':9253,'multiline':False]['text':' A single byte lane is copied into all the other byte lanes.  control_[0]','line_number':9255,'multiline':False]['text':' has the source lane.','line_number':9256,'multiline':False]['text':' A single word lane is copied into all the other word lanes.  control_[0]','line_number':9259,'multiline':False]['text':' has the source lane.','line_number':9260,'multiline':False]['text':' Copy input to output.','line_number':9263,'multiline':False]['text':' control_ has bytes in range 0..15 s.t. control_[i] holds the source lane','line_number':9266,'multiline':False]['text':' for output lane i.','line_number':9267,'multiline':False]['text':' control_ has int16s in range 0..7, as for 8x16.  In addition, the high','line_number':9270,'multiline':False]['text':' byte of control_[0] has flags detailing the operation, values taken','line_number':9271,'multiline':False]['text':' from the Perm16x8Action enum below.','line_number':9272,'multiline':False]['text':' control_ has int32s in range 0..3, as for 8x16.','line_number':9275,'multiline':False]['text':' control_[0] has the number of places to rotate by.','line_number':9278,'multiline':False]['text':' Zeroes are shifted into high-order bytes and low-order bytes are lost.','line_number':9281,'multiline':False]['text':' control_[0] has the number of places to shift by.','line_number':9282,'multiline':False]['text':' Zeroes are shifted into low-order bytes and high-order bytes are lost.','line_number':9285,'multiline':False]['text':' control_[0] has the number of places to shift by.','line_number':9286,'multiline':False]['text':' (scalar) -> v128 effect-free operations, scalar != int64','line_number':9361,'multiline':False]['text':' (int64) -> v128 effect-free operations','line_number':9379,'multiline':False]['text':' (v128) -> v128 effect-free operations','line_number':9397,'multiline':False]['text':' temp is FPR (if in use).','line_number':9398,'multiline':False]['text':' (v128, imm) -> scalar effect-free operations.','line_number':9416,'multiline':False]['text':' temp is FPR (if in use).','line_number':9417,'multiline':False]['text':' (v128, onTrue, onFalse) test-and-branch operations.','line_number':9435,'multiline':False]['text':' (v128, imm) -> i64 effect-free operations','line_number':9460,'multiline':False]['text':' End Wasm SIMD','line_number':9536,'multiline':False]['text':' namespace jit','line_number':9538,'multiline':False]['text':' namespace js','line_number':9539,'multiline':False]['text':' jit_shared_LIR_shared_h ','line_number':9541,'multiline':True]