['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':' NOTE: The object lifecycle of ScientificModifier and ScientificHandler differ greatly in Java and C++.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' During formatting, we need to provide an object with state (the exponent) as the inner modifier.','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' In Java, where the priority is put on reducing object creations, the unsafe code path re-uses the','line_number':23,'multiline':False]['text':' ScientificHandler as a ScientificModifier, and the safe code path pre-computes 25 ScientificModifier','line_number':24,'multiline':False]['text':' instances.  This scheme reduces the number of object creations by 1 in both safe and unsafe.','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' In C++, MicroProps provides a pre-allocated ScientificModifier, and ScientificHandler simply populates','line_number':27,'multiline':False]['text':' the state (the exponent) into that ScientificModifier. There is no difference between safe and unsafe.','line_number':28,'multiline':False]['text':' ScientificModifier should be set only once.','line_number':33,'multiline':False]['text':'leftIndex','line_number':39,'multiline':True]['text':' FIXME: Localized exponent separator location.','line_number':41,'multiline':False]['text':' Append the exponent separator and sign','line_number':43,'multiline':False]['text':' Append the exponent digits (using a simple inline algorithm)','line_number':64,'multiline':False]['text':' TODO: Localized exponent separator location.','line_number':80,'multiline':False]['text':' NOTE: This method is only called one place, NumberRangeFormatterImpl.','line_number':85,'multiline':False]['text':' The call site only cares about != 0 and != 1.','line_number':86,'multiline':False]['text':' Return a very large value so that if this method is used elsewhere, we should notice.','line_number':87,'multiline':False]['text':' Scientific is always strong','line_number':92,'multiline':False]['text':' This method is not used for inner modifiers.','line_number':98,'multiline':False]['text':' Not part of any plural sets','line_number':103,'multiline':False]['text':' TODO: Check for locale symbols and settings as well? Could be less efficient.','line_number':112,'multiline':False]['text':' Note: Visual Studio does not compile this function without full name space. Why?','line_number':116,'multiline':False]['text':' Do not apply scientific notation to special doubles','line_number':126,'multiline':False]['text':' Treat zero as if it had magnitude 0','line_number':132,'multiline':False]['text':' Show "00.000E0" on pattern "00.000E0"','line_number':136,'multiline':False]['text':' Use MicroProps's helper ScientificModifier and save it as the modInner.','line_number':147,'multiline':False]['text':' Change the exponent only after we select appropriate plural form','line_number':152,'multiline':False]['text':' for formatting purposes so that we preserve expected formatted','line_number':153,'multiline':False]['text':' string behavior.','line_number':154,'multiline':False]['text':' We already performed rounding. Do not perform it again.','line_number':157,'multiline':False]['text':' For patterns like "000.00E0" and ".00E0"','line_number':165,'multiline':False]['text':' For patterns like "0.00E0" and "@@@E0"','line_number':168,'multiline':False]['text':' For patterns like "##0.00"','line_number':171,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':177,'multiline':True]