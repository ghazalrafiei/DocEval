['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::AutoCheckRecursionLimit','line_number':26,'multiline':False]['text':' Debugger eval-in-frame. These are likely short-running scripts so','line_number':60,'multiline':False]['text':' don't bother compiling them for now.','line_number':61,'multiline':False]['text':' Fall back to the interpreter to avoid running out of stack space.','line_number':67,'multiline':False]['text':' Check for potential stack overflow before OSR-ing.','line_number':108,'multiline':False]['text':' Assert we don't GC before entering JIT code. A GC could discard JIT code','line_number':117,'multiline':False]['text':' or move the function stored in the CalleeToken (it won't be traced at','line_number':118,'multiline':False]['text':' this point). We use Maybe<> here so we can call reset() to call the','line_number':119,'multiline':False]['text':' AutoAssertNoGC destructor before we enter JIT code.','line_number':120,'multiline':False]['text':' Caller must construct |this| before invoking the function.','line_number':130,'multiline':False]['text':' Single transition point from Interpreter to Baseline.','line_number':146,'multiline':False]['text':' Jit callers wrap primitive constructor return, except for derived','line_number':154,'multiline':False]['text':' class constructors, which are forced to do it themselves.','line_number':155,'multiline':False]['text':' Release temporary buffer used for OSR into Ion.','line_number':162,'multiline':False]['text':' Use the entry point that skips the debug trap because the C++ interpreter','line_number':176,'multiline':False]['text':' already handled this for the current op.','line_number':177,'multiline':False]['text':' +1 = include |this|','line_number':192,'multiline':False]['text':' -1 = include |this|','line_number':193,'multiline':False]['text':' Skip if the script has been disabled.','line_number':262,'multiline':False]['text':' This check is needed in the following corner case. Consider a function h,','line_number':272,'multiline':False]['text':'','line_number':273,'multiline':False]['text':'   function h(x) {','line_number':274,'multiline':False]['text':'      if (!x)','line_number':275,'multiline':False]['text':'        return;','line_number':276,'multiline':False]['text':'      h(false);','line_number':277,'multiline':False]['text':'      for (var i = 0; i < N; i++)','line_number':278,'multiline':False]['text':'         /* do stuff */','line_number':279,'multiline':False]['text':'   }','line_number':280,'multiline':False]['text':'','line_number':281,'multiline':False]['text':' Suppose h is not yet compiled in baseline and is executing in the','line_number':282,'multiline':False]['text':' interpreter. Let this interpreter frame be f_older. The debugger marks','line_number':283,'multiline':False]['text':' f_older as isDebuggee. At the point of the recursive call h(false), h is','line_number':284,'multiline':False]['text':' compiled in baseline without debug instrumentation, pushing a baseline','line_number':285,'multiline':False]['text':' frame f_newer. The debugger never flags f_newer as isDebuggee, and never','line_number':286,'multiline':False]['text':' recompiles h. When the recursive call returns and execution proceeds to','line_number':287,'multiline':False]['text':' the loop, the interpreter attempts to OSR into baseline. Since h is','line_number':288,'multiline':False]['text':' already compiled in baseline, execution jumps directly into baseline','line_number':289,'multiline':False]['text':' code. This is incorrect as h's baseline script does not have debug','line_number':290,'multiline':False]['text':' instrumentation.','line_number':291,'multiline':False]['text':' Check script warm-up counter.','line_number':311,'multiline':False]['text':' Check this before calling ensureJitRealmExists, so we're less','line_number':316,'multiline':False]['text':' likely to report OOM in JSRuntime::createJitRuntime.','line_number':317,'multiline':False]['text':' Frames can be marked as debuggee frames independently of its underlying','line_number':331,'multiline':False]['text':' script being a debuggee script, e.g., when performing','line_number':332,'multiline':False]['text':' Debugger.Frame.prototype.eval.','line_number':333,'multiline':False]['text':' Avoid overrecursion exceptions when the script has a ton of stack slots','line_number':347,'multiline':False]['text':' by forcing such scripts to run in the C++ interpreter with heap-allocated','line_number':348,'multiline':False]['text':' stack frames.','line_number':349,'multiline':False]['text':' Check script warm-up counter.','line_number':368,'multiline':False]['text':' JITs do not respect the debugger's OnNativeCall hook, so JIT execution is','line_number':392,'multiline':False]['text':' disabled if this hook might need to be called.','line_number':393,'multiline':False]['text':' osrSourceFrame = ','line_number':424,'multiline':True]['text':' osrSourceFrame = ','line_number':445,'multiline':True]['text':' Compute size including trailing arrays.','line_number':478,'multiline':False]['text':' Allocate contiguous raw buffer.','line_number':491,'multiline':False]['text':' static ','line_number':534,'multiline':True]['text':' This allocation is tracked by JSScript::setBaselineScriptImpl.','line_number':542,'multiline':False]['text':' Search for the first entry for this pc.','line_number':608,'multiline':False]['text':' Search for the last entry for this pc.','line_number':614,'multiline':False]['text':' There must be a unique entry for this pcOffset and Kind to ensure our','line_number':632,'multiline':False]['text':' return value is well-defined.','line_number':633,'multiline':False]['text':' The prologue entries will always be at a very low offset, so just do a','line_number':649,'multiline':False]['text':' linear search from the beginning.','line_number':650,'multiline':False]['text':' Translate pcOffset to BaselineScript native address. This may return','line_number':683,'multiline':False]['text':' nullptr if compiler decided code was unreachable.','line_number':684,'multiline':False]['text':' Use the RetAddrEntry list (sorted on pc and return address) to look for the','line_number':722,'multiline':False]['text':' first pc that has a return address >= nativeOffset. This isn't perfect but','line_number':723,'multiline':False]['text':' it's a reasonable approximation for the profiler because most non-trivial','line_number':724,'multiline':False]['text':' bytecode ops have a RetAddrEntry.','line_number':725,'multiline':False]['text':' Return the last entry's pc. Every BaselineScript has at least one','line_number':734,'multiline':False]['text':' RetAddrEntry for the prologue stack overflow check.','line_number':735,'multiline':False]['text':' Only scripts compiled for debug mode have toggled calls.','line_number':744,'multiline':False]['text':' If the |pc| argument is non-null we can skip all other bytecode ops.','line_number':754,'multiline':False]['text':' Patch the trap.','line_number':762,'multiline':False]['text':' Patch the logging script textId to be correct.','line_number':822,'multiline':False]['text':' When logging log the specific textId else the global Scripts textId.','line_number':823,'multiline':False]['text':' Enable/Disable the traceLogger.','line_number':830,'multiline':False]['text':' Enable/Disable the traceLogger prologue and epilogue.','line_number':852,'multiline':False]['text':' Toggle jumps for debugger instrumentation.','line_number':920,'multiline':False]['text':' Toggle DebugTrapHandler calls.','line_number':930,'multiline':False]['text':' Instrumentation is enabled no matter what.','line_number':964,'multiline':False]['text':' Temporary IsBaselineInterpreterEnabled check to not generate the','line_number':1076,'multiline':False]['text':' interpreter code (until it's enabled by default).','line_number':1077,'multiline':False]