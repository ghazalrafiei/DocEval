['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
***************************************************************************
*   Copyright (C) 2002-2016 International Business Machines Corporation   *
*   and others. All rights reserved.                                      *
***************************************************************************
','line_number':3,'multiline':True]['text':'','line_number':10,'multiline':False]['text':'  File:  rbbinode.cpp','line_number':11,'multiline':False]['text':'','line_number':12,'multiline':False]['text':'         Implementation of class RBBINode, which represents a node in the','line_number':13,'multiline':False]['text':'         tree generated when parsing the Rules Based Break Iterator rules.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':'         This "Class" is actually closer to a struct.','line_number':16,'multiline':False]['text':'         Code using it is expected to directly access fields much of the time.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':'    Constructor.   Just set the fields to reasonable default values.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':49,'multiline':False]['text':' TODO - get a real status from somewhere','line_number':69,'multiline':False]['text':' TODO - get a real status from somewhere','line_number':98,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':'    Destructor.   Deletes both this node AND any child nodes,','line_number':106,'multiline':False]['text':'                  except in the case of variable reference nodes.  For','line_number':107,'multiline':False]['text':'                  these, the l. child points back to the definition, which','line_number':108,'multiline':False]['text':'                  is common for all references to the variable, meaning','line_number':109,'multiline':False]['text':'                  it can't be deleted here.','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':112,'multiline':False]['text':' printf("deleting node %8x   serial %4d\n", this, this->fSerialNum);','line_number':114,'multiline':False]['text':' for these node types, multiple instances point to the same "children"','line_number':121,'multiline':False]['text':' Storage ownership of children handled elsewhere.  Don't delete here.','line_number':122,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':'    cloneTree     Make a copy of the subtree rooted at this node.','line_number':142,'multiline':False]['text':'                  Discard any variable references encountered along the way,','line_number':143,'multiline':False]['text':'                  and replace with copies of the variable's definitions.','line_number':144,'multiline':False]['text':'                  Used to replicate the expression underneath variable','line_number':145,'multiline':False]['text':'                  references in preparation for generating the DFA tables.','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':148,'multiline':False]['text':' If the current node is a variable reference, skip over it','line_number':153,'multiline':False]['text':'   and clone the definition of the variable instead.','line_number':154,'multiline':False]['text':' Check for null pointer.','line_number':160,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':'   flattenVariables   Walk a parse tree, replacing any variable','line_number':179,'multiline':False]['text':'                      references with a copy of the variable's definition.','line_number':180,'multiline':False]['text':'                      Aside from variables, the tree is not changed.','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':'                      Return the root of the tree.  If the root was not a variable','line_number':183,'multiline':False]['text':'                      reference, it remains unchanged - the root we started with','line_number':184,'multiline':False]['text':'                      is the root we return.  If, however, the root was a variable','line_number':185,'multiline':False]['text':'                      reference, the root of the newly cloned replacement tree will','line_number':186,'multiline':False]['text':'                      be returned, and the original tree deleted.','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':'                      This function works by recursively walking the tree','line_number':189,'multiline':False]['text':'                      without doing anything until a variable reference is','line_number':190,'multiline':False]['text':'                      found, then calling cloneTree() at that point.  Any','line_number':191,'multiline':False]['text':'                      nested references are handled by cloneTree(), not here.','line_number':192,'multiline':False]['text':'','line_number':193,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':194,'multiline':False]['text':' TODO: undefined behavior. Fix.','line_number':202,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':'  flattenSets    Walk the parse tree, replacing any nodes of type setRef','line_number':220,'multiline':False]['text':'                 with a copy of the expression tree for the set.  A set's','line_number':221,'multiline':False]['text':'                 equivalent expression tree is precomputed and saved as','line_number':222,'multiline':False]['text':'                 the left child of the uset node.','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':225,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':258,'multiline':False]['text':'','line_number':259,'multiline':False]['text':'   findNodes()     Locate all the nodes of the specified type, starting','line_number':260,'multiline':False]['text':'                   at the specified root.','line_number':261,'multiline':False]['text':'','line_number':262,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':263,'multiline':False]['text':' test for buffer overflows ','line_number':265,'multiline':True]['text':'-------------------------------------------------------------------------','line_number':281,'multiline':False]['text':'','line_number':282,'multiline':False]['text':'    print.         Print out a single node, for debugging.','line_number':283,'multiline':False]['text':'','line_number':284,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':285,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':337,'multiline':False]['text':'','line_number':338,'multiline':False]['text':'    print.         Print out the tree of nodes rooted at "this"','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':'-------------------------------------------------------------------------','line_number':341,'multiline':False]['text':' Only dump the definition under a variable reference if asked to.','line_number':353,'multiline':False]['text':' Unconditinally dump children of all other node types.','line_number':354,'multiline':False]['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':372,'multiline':True]