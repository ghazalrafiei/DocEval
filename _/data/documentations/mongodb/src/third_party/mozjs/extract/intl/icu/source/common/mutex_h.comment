['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 1997-2013, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
','line_number':3,'multiline':True]['text':'----------------------------------------------------------------------------','line_number':11,'multiline':False]['text':' File:     mutex.h','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' Lightweight C++ wrapper for umtx_ C mutex functions','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' Author:   Alan Liu  1/31/97','line_number':16,'multiline':False]['text':' History:','line_number':17,'multiline':False]['text':' 06/04/97   helena         Updated setImplementation as per feedback from 5/21 drop.','line_number':18,'multiline':False]['text':' 04/07/1999  srl               refocused as a thin wrapper','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':21,'multiline':False]['text':'*
  * Mutex is a helper class for convenient locking and unlocking of a UMutex.
  *
  * Creating a local scope Mutex will lock a UMutex, holding the lock until the Mutex
  * goes out of scope.
  *
  *  If no UMutex is specified, the ICU global mutex is implied.
  *
  *  For example:
  *
  *  static UMutex myMutex;
  *
  *  void Function(int arg1, int arg2)
  *  {
  *     static Object* foo;      // Shared read-write object
  *     Mutex mutex(&myMutex);   // or no args for the global lock
  *     foo->Method();
  *     // When 'mutex' goes out of scope and gets destroyed here, the lock is released
  *  }
  *
  *  Note:  Do NOT use the form 'Mutex mutex();' as that merely forward-declares a function
  *         returning a Mutex. This is a common mistake which silently slips through the
  *         compiler!!
  ','line_number':31,'multiline':True]['text':' forbid assigning of this class','line_number':65,'multiline':False]['text':' forbid copying of this class','line_number':66,'multiline':False]['text':' forbid heap allocation. Locals only.','line_number':67,'multiline':False]['text':'_MUTEX_','line_number':76,'multiline':False]['text':'eof','line_number':77,'multiline':False]