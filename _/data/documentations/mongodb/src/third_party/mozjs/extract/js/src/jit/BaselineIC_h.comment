['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' [SMDOC] JIT Inline Caches (ICs)','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Baseline Inline Caches are polymorphic caches that aggressively','line_number':52,'multiline':False]['text':' share their stub code.','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' Every polymorphic site contains a linked list of stubs which are','line_number':55,'multiline':False]['text':' specific to that site.  These stubs are composed of a |StubData|','line_number':56,'multiline':False]['text':' structure that stores parametrization information (e.g.','line_number':57,'multiline':False]['text':' the shape pointer for a shape-check-and-property-get stub), any','line_number':58,'multiline':False]['text':' dynamic information (e.g. warm-up counters), a pointer to the stub code,','line_number':59,'multiline':False]['text':' and a pointer to the next stub state in the linked list.','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' Every BaselineScript keeps an table of |CacheDescriptor| data','line_number':62,'multiline':False]['text':' structures, which store the following:','line_number':63,'multiline':False]['text':'      A pointer to the first StubData in the cache.','line_number':64,'multiline':False]['text':'      The bytecode PC of the relevant IC.','line_number':65,'multiline':False]['text':'      The machine-code PC where the call to the stubcode returns.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' A diagram:','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':'        Control flow                  Pointers','line_number':70,'multiline':False]['text':'      =======#                     ----.     .---->','line_number':71,'multiline':False]['text':'             #                         |     |','line_number':72,'multiline':False]['text':'             #======>                  \-----/','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':'                                   .---------------------------------------.','line_number':76,'multiline':False]['text':'                                   |         .-------------------------.   |','line_number':77,'multiline':False]['text':'                                   |         |         .----.          |   |','line_number':78,'multiline':False]['text':'         Baseline                  |         |         |    |          |   |','line_number':79,'multiline':False]['text':'         JIT Code              0   ^     1   ^     2   ^    |          |   |','line_number':80,'multiline':False]['text':'     +--------------+    .-->+-----+   +-----+   +-----+    |          |   |','line_number':81,'multiline':False]['text':'     |              |  #=|==>|     |==>|     |==>| FB  |    |          |   |','line_number':82,'multiline':False]['text':'     |              |  # |   +-----+   +-----+   +-----+    |          |   |','line_number':83,'multiline':False]['text':'     |              |  # |      #         #         #       |          |   |','line_number':84,'multiline':False]['text':'     |==============|==# |      #         #         #       |          |   |','line_number':85,'multiline':False]['text':'     |=== IC =======|    |      #         #         #       |          |   |','line_number':86,'multiline':False]['text':'  .->|==============|<===|======#=========#=========#       |          |   |','line_number':87,'multiline':False]['text':'  |  |              |    |                                  |          |   |','line_number':88,'multiline':False]['text':'  |  |              |    |                                  |          |   |','line_number':89,'multiline':False]['text':'  |  |              |    |                                  |          |   |','line_number':90,'multiline':False]['text':'  |  |              |    |                                  v          |   |','line_number':91,'multiline':False]['text':'  |  |              |    |                              +---------+    |   |','line_number':92,'multiline':False]['text':'  |  |              |    |                              | Fallback|    |   |','line_number':93,'multiline':False]['text':'  |  |              |    |                              | Stub    |    |   |','line_number':94,'multiline':False]['text':'  |  |              |    |                              | Code    |    |   |','line_number':95,'multiline':False]['text':'  |  |              |    |                              +---------+    |   |','line_number':96,'multiline':False]['text':'  |  +--------------+    |                                             |   |','line_number':97,'multiline':False]['text':'  |         |_______     |                              +---------+    |   |','line_number':98,'multiline':False]['text':'  |                |     |                              | Stub    |<---/   |','line_number':99,'multiline':False]['text':'  |        IC      |     \--.                           | Code    |        |','line_number':100,'multiline':False]['text':'  |    Descriptor  |        |                           +---------+        |','line_number':101,'multiline':False]['text':'  |      Table     v        |                                              |','line_number':102,'multiline':False]['text':'  |  +-----------------+    |                           +---------+        |','line_number':103,'multiline':False]['text':'  \--| Ins | PC | Stub |----/                           | Stub    |<-------/','line_number':104,'multiline':False]['text':'     +-----------------+                                | Code    |','line_number':105,'multiline':False]['text':'     |       ...       |                                +---------+','line_number':106,'multiline':False]['text':'     +-----------------+','line_number':107,'multiline':False]['text':'                                                          Shared','line_number':108,'multiline':False]['text':'                                                          Stub Code','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' An entry in the ICScript IC table. There's one ICEntry per IC.','line_number':123,'multiline':False]['text':' A pointer to the first IC stub for this instruction.','line_number':125,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' Base class for all IC stubs.','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':' The raw jitcode to call for this stub.','line_number':152,'multiline':False]['text':' Counts the number of times the stub was entered','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' See Bug 1494473 comment 6 for a mechanism to handle overflow if overflow','line_number':157,'multiline':False]['text':' becomes a concern.','line_number':158,'multiline':False]['text':' Tracks input types for some CacheIR stubs, to help optimize','line_number':161,'multiline':False]['text':' polymorphic cases. Stored in the base class to make use of','line_number':162,'multiline':False]['text':' padding bytes.','line_number':163,'multiline':False]['text':' Whether this is an ICFallbackStub or an ICCacheIRStub.','line_number':166,'multiline':False]['text':' All fallback code is stored in a single JitCode instance, so we can't','line_number':199,'multiline':False]['text':' call JitCode::FromExecutable on the raw pointer.','line_number':200,'multiline':False]['text':' The PC offset of this IC's bytecode op within the JSScript.','line_number':224,'multiline':False]['text':' The state of this IC.','line_number':227,'multiline':False]['text':' isFallback = ','line_number':232,'multiline':True]['text':' Add a new stub to the IC chain terminated by this fallback stub.','line_number':245,'multiline':False]['text':' Pointer to next IC stub.','line_number':267,'multiline':False]['text':' Ensure stub data is 8-byte aligned on 32-bit.','line_number':273,'multiline':False]['text':' isFallback = ','line_number':279,'multiline':True]['text':' Optimized stubs get purged on GC.  But some stubs can be active on the','line_number':290,'multiline':False]['text':' stack during GC - specifically the ones that can make calls.  To ensure','line_number':291,'multiline':False]['text':' that these do not get purged, all stubs that can make calls are allocated','line_number':292,'multiline':False]['text':' in the fallback stub space.','line_number':293,'multiline':False]['text':' Assert stub size is what we expect to catch regressions.','line_number':305,'multiline':False]['text':' namespace jit','line_number':438,'multiline':False]['text':' namespace js','line_number':439,'multiline':False]['text':' jit_BaselineIC_h ','line_number':441,'multiline':True]