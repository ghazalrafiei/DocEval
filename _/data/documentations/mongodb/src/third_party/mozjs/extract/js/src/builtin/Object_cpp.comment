['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JS::GetBuiltinClass','line_number':8,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':21,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':22,'multiline':False]['text':' js::SameValue','line_number':30,'multiline':False]['text':' js::PlainObject','line_number':34,'multiline':False]['text':' js::ValueToSource','line_number':37,'multiline':False]['text':' js_*_str','line_number':38,'multiline':False]['text':' Make an object whether this was called with 'new' or not. ','line_number':73,'multiline':True]['text':' ES5 15.2.4.7. ','line_number':83,'multiline':True]['text':' As an optimization, provide a fast path when rooting is not necessary and','line_number':89,'multiline':False]['text':' we can safely retrieve the attributes from the object's shape.','line_number':90,'multiline':False]['text':' Steps 1-2. ','line_number':92,'multiline':True]['text':' Step 3. ','line_number':98,'multiline':True]['text':' Step 4. ','line_number':103,'multiline':True]['text':' Step 5. ','line_number':109,'multiline':True]['text':' Step 1. ','line_number':116,'multiline':True]['text':' Step 2. ','line_number':122,'multiline':True]['text':' Step 3. ','line_number':128,'multiline':True]['text':' Step 4. ','line_number':134,'multiline':True]['text':' Step 5. ','line_number':140,'multiline':True]['text':'
 * Given a function source string, return the offset and length of the part
 * between '(function $name' and ')'.
 ','line_number':202,'multiline':True]['text':' Remove enclosing parentheses.','line_number':217,'multiline':False]['text':' Support the following cases, with spaces between tokens:','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':'   -+---------+-+------------+-+-----+-+- [ - <any> - ] - ( -+-','line_number':225,'multiline':False]['text':'    |         | |            | |     | |                     |','line_number':226,'multiline':False]['text':'    +- async -+ +- function -+ +- * -+ +- <any> - ( ---------+','line_number':227,'multiline':False]['text':'                |            |','line_number':228,'multiline':False]['text':'                +- get ------+','line_number':229,'multiline':False]['text':'                |            |','line_number':230,'multiline':False]['text':'                +- set ------+','line_number':231,'multiline':False]['text':'','line_number':232,'multiline':False]['text':' This accepts some invalid syntax, but we don't care, since it's only','line_number':233,'multiline':False]['text':' used by the non-standard toSource, and we're doing a best-effort attempt','line_number':234,'multiline':False]['text':' here.','line_number':235,'multiline':False]['text':' Jump over the function's name.','line_number':245,'multiline':False]['text':' Skip ']'.','line_number':250,'multiline':False]['text':' If outermost, we need parentheses to be an expression, not a block. ','line_number':272,'multiline':True]['text':' Convert id to a string. ','line_number':300,'multiline':True]['text':'
       * If id is a string that's not an identifier, or if it's a
       * negative integer, then it must be quoted.
       ','line_number':315,'multiline':True]['text':' Methods and accessors can return exact syntax of source, that fits','line_number':348,'multiline':False]['text':' into property without adding property name or "get"/"set" prefix.','line_number':349,'multiline':False]['text':' Use the exact syntax when the following conditions are met:','line_number':350,'multiline':False]['text':'','line_number':351,'multiline':False]['text':'   * It's a function object','line_number':352,'multiline':False]['text':'     (exclude proxies)','line_number':353,'multiline':False]['text':'   * Function's kind and property's kind are same','line_number':354,'multiline':False]['text':'     (this can be false for dynamically defined properties)','line_number':355,'multiline':False]['text':'   * Function has explicit name','line_number':356,'multiline':False]['text':'     (this can be false for computed property and dynamically defined','line_number':357,'multiline':False]['text':'      properties)','line_number':358,'multiline':False]['text':'   * Function's name and property's name are same','line_number':359,'multiline':False]['text':'     (this can be false for dynamically defined properties)','line_number':360,'multiline':False]['text':' Method's case should be checked on caller.','line_number':366,'multiline':False]['text':' When falling back try to generate a better string','line_number':386,'multiline':False]['text':' representation by skipping the prelude, and also removing','line_number':387,'multiline':False]['text':' the enclosing parentheses.','line_number':388,'multiline':False]['text':' Step 4.','line_number':508,'multiline':False]['text':' Step 5.','line_number':514,'multiline':False]['text':' Steps 6-14.','line_number':519,'multiline':False]['text':' Non-standard: Prevent <object> from showing up as Function.','line_number':542,'multiline':False]['text':' Optimize the non-proxy case to bypass GetBuiltinClass.','line_number':558,'multiline':False]['text':' This case is by far the most common so we handle it first.','line_number':560,'multiline':False]['text':' Non-standard: Prevent <object> from showing up as Function.','line_number':601,'multiline':False]['text':' For primitive values we try to avoid allocating the object if we can','line_number':608,'multiline':False]['text':' determine that the prototype it would use does not define Symbol.toStringTag.','line_number':609,'multiline':False]['text':' If prototype doesn't exist yet, just fall through.','line_number':613,'multiline':False]['text':' If determining this may have side-effects, we must instead create the','line_number':619,'multiline':False]['text':' object normally since it is the receiver while looking up','line_number':620,'multiline':False]['text':' Symbol.toStringTag.','line_number':621,'multiline':False]['text':' Return the direct result.','line_number':627,'multiline':False]['text':' ES6 19.1.3.6','line_number':646,'multiline':False]['text':' Step 1.','line_number':652,'multiline':False]['text':' Step 2.','line_number':658,'multiline':False]['text':' Try fast-path for primitives. This is unusual but we encounter code like','line_number':664,'multiline':False]['text':' this in the wild.','line_number':665,'multiline':False]['text':' Step 3.','line_number':672,'multiline':False]['text':' When |obj| is a non-proxy object, compute |builtinTag| only when needed.','line_number':681,'multiline':False]['text':' Step 15.','line_number':691,'multiline':False]['text':' Step 16.','line_number':698,'multiline':False]['text':' Assert this fast path is correct and matches BuiltinTagSlow.','line_number':703,'multiline':False]['text':' Step 17.','line_number':716,'multiline':False]['text':' Step 1-2. ','line_number':748,'multiline':True]['text':' Step 3. ','line_number':756,'multiline':True]['text':' Step 4. ','line_number':765,'multiline':True]['text':' Step 5-7. ','line_number':771,'multiline':True]['text':' Step 8. ','line_number':778,'multiline':True]['text':' Returns true if properties not named "__proto__" can be added to |obj|','line_number':807,'multiline':False]['text':' with a fast path that doesn't check any properties on the prototype chain.','line_number':808,'multiline':False]['text':' The object must be an extensible, non-prototype object. Prototypes require','line_number':810,'multiline':False]['text':' extra shadowing checks for shape teleporting.','line_number':811,'multiline':False]['text':' Ensure the object has no non-writable properties or getters/setters.','line_number':816,'multiline':False]['text':' For now only support PlainObjects so that we don't have to worry about','line_number':817,'multiline':False]['text':' resolve hooks and other JSClass hooks.','line_number':818,'multiline':False]['text':' Object.assign is used with PlainObjects most of the time. This is a fast','line_number':837,'multiline':False]['text':' path to optimize that case. This lets us avoid checks that are only','line_number':838,'multiline':False]['text':' relevant for other JSClasses.','line_number':839,'multiline':False]['text':' Don't use the fast path if |from| may have extra indexed properties.','line_number':847,'multiline':False]['text':' Empty |from| objects are common, so check for this first.','line_number':855,'multiline':False]['text':' Get a list of all enumerable |from| properties.','line_number':866,'multiline':False]['text':' Symbol properties need to be assigned last. For now fall back to the','line_number':876,'multiline':False]['text':' slow path if we see a symbol property.','line_number':877,'multiline':False]['text':' __proto__ is not supported by CanAddNewPropertyExcludingProtoFast.','line_number':882,'multiline':False]['text':' If the |to| object has no properties and the |from| object only has plain','line_number':904,'multiline':False]['text':' enumerable/writable/configurable data properties, try to use its shape.','line_number':905,'multiline':False]['text':' Assert |from| still has the same properties.','line_number':923,'multiline':False]['text':' Don't use the fast path if |from| may have extra indexed or lazy','line_number':963,'multiline':False]['text':' properties.','line_number':964,'multiline':False]['text':' Get a list of |from| properties. As long as from->shape() == fromShape','line_number':973,'multiline':False]['text':' we can use this to speed up both the enumerability check and the GetProp.','line_number':974,'multiline':False]['text':' Symbol properties need to be assigned last. For now fall back to the','line_number':980,'multiline':False]['text':' slow path if we see a symbol property.','line_number':981,'multiline':False]['text':' If |from| still has the same shape, it must still be a NativeObject with','line_number':1000,'multiline':False]['text':' the properties in |props|.','line_number':1001,'multiline':False]['text':' |from| changed shape or the property is not a data property, so','line_number':1008,'multiline':False]['text':' we have to do the slower enumerability check and GetProp.','line_number':1009,'multiline':False]['text':' Step 4.b.ii.','line_number':1036,'multiline':False]['text':' Step 4.c.','line_number':1043,'multiline':False]['text':' Step 4.c.i.','line_number':1049,'multiline':False]['text':' Step 4.c.ii.1.','line_number':1058,'multiline':False]['text':' Step 4.c.ii.2.','line_number':1063,'multiline':False]['text':' ES2018 draft rev 48ad2688d8f964da3ea8c11163ef20eb126fb8a4','line_number':1093,'multiline':False]['text':' 19.1.2.1 Object.assign(target, ...sources)','line_number':1094,'multiline':False]['text':' Step 1.','line_number':1098,'multiline':False]['text':' Note: step 2 is implicit. If there are 0 arguments, ToObject throws. If','line_number':1104,'multiline':False]['text':' there's 1 argument, the loop below is a no-op.','line_number':1105,'multiline':False]['text':' Step 4.','line_number':1107,'multiline':False]['text':' Step 4.a.','line_number':1110,'multiline':False]['text':' Step 4.b.i.','line_number':1115,'multiline':False]['text':' Steps 4.b.ii, 4.c.','line_number':1121,'multiline':False]['text':' Step 5.','line_number':1127,'multiline':False]['text':' ES5 15.2.4.6. ','line_number':1132,'multiline':True]['text':' Step 1. ','line_number':1136,'multiline':True]['text':' Step 2. ','line_number':1142,'multiline':True]['text':' Step 3. ','line_number':1148,'multiline':True]['text':' Give the new object a small number of fixed slots, like we do for empty','line_number':1159,'multiline':False]['text':' object literals ({}).','line_number':1160,'multiline':False]['text':' ES 2017 draft 19.1.2.3.1','line_number':1172,'multiline':False]['text':' Step 1. implicit','line_number':1176,'multiline':False]['text':' Step 2.','line_number':1177,'multiline':False]['text':' Step 3.','line_number':1183,'multiline':False]['text':' Step 4.','line_number':1195,'multiline':False]['text':' Step 5.','line_number':1200,'multiline':False]['text':' Step 5.a.','line_number':1204,'multiline':False]['text':' Step 5.b.','line_number':1209,'multiline':False]['text':' Step 6.','line_number':1219,'multiline':False]['text':' ES6 draft rev34 (2015/02/20) 19.1.2.2 Object.create(O [, Properties])','line_number':1239,'multiline':False]['text':' Step 1.','line_number':1243,'multiline':False]['text':' Step 2.','line_number':1261,'multiline':False]['text':' Step 3.','line_number':1268,'multiline':False]['text':' we can't ever end up with failures to define on a WindowProxy','line_number':1270,'multiline':False]['text':' here, because "obj" is never a WindowProxy.','line_number':1271,'multiline':False]['text':' Step 4.','line_number':1279,'multiline':False]['text':' ES2017 draft rev 6859bb9ccaea9c6ede81d71e5320e3833b92cb3e','line_number':1284,'multiline':False]['text':' 6.2.4.4 FromPropertyDescriptor ( Desc )','line_number':1285,'multiline':False]['text':' Step 1.','line_number':1289,'multiline':False]['text':' Steps 2-11.','line_number':1295,'multiline':False]['text':' Retrieve all property descriptor fields and place them into the result','line_number':1296,'multiline':False]['text':' array. The actual return object is created in self-hosted code for','line_number':1297,'multiline':False]['text':' performance reasons.','line_number':1298,'multiline':False]['text':' ES2017 draft rev 6859bb9ccaea9c6ede81d71e5320e3833b92cb3e','line_number':1354,'multiline':False]['text':' 19.1.2.6 Object.getOwnPropertyDescriptor ( O, P )','line_number':1355,'multiline':False]['text':' Step 1.','line_number':1361,'multiline':False]['text':' Step 2.','line_number':1367,'multiline':False]['text':' Step 3.','line_number':1373,'multiline':False]['text':' Step 4.','line_number':1379,'multiline':False]['text':' We also check for enumerability and symbol properties, so uninteresting','line_number':1401,'multiline':False]['text':' non-data properties like |array.length| don't let us fall into the slow','line_number':1402,'multiline':False]['text':' path.','line_number':1403,'multiline':False]['text':' Use the fast path if |obj| has neither extra indexed properties nor a','line_number':1419,'multiline':False]['text':' newEnumerate hook. String objects need to be special-cased, because','line_number':1420,'multiline':False]['text':' they're only marked as indexed after their enumerate hook ran. And','line_number':1421,'multiline':False]['text':' because their enumerate hook is slowish, it's more performant to','line_number':1422,'multiline':False]['text':' exclude them directly instead of executing the hook first.','line_number':1423,'multiline':False]['text':' Resolve lazy properties on |nobj|.','line_number':1431,'multiline':False]['text':' Ensure no extra indexed properties were added through enumerate().','line_number':1437,'multiline':False]['text':' We have ensured |nobj| contains no extra indexed properties, so the','line_number':1449,'multiline':False]['text':' only indexed properties we need to handle here are dense and typed','line_number':1450,'multiline':False]['text':' array elements.','line_number':1451,'multiline':False]['text':' Fail early if the typed array contains too many elements for a','line_number':1488,'multiline':False]['text':' dense array, because we likely OOM anyway when trying to allocate','line_number':1489,'multiline':False]['text':' more than 2GB for the properties vector. This also means we don't','line_number':1490,'multiline':False]['text':' need to handle indices greater than MAX_INT32 in the loop below.','line_number':1491,'multiline':False]['text':' Up to this point no side-effects through accessor properties are','line_number':1534,'multiline':False]['text':' possible which could have replaced |obj| with a non-native object.','line_number':1535,'multiline':False]['text':' If |kind == Values| or |kind == KeysAndValues|:','line_number':1541,'multiline':False]['text':' All enumerable properties with string property keys are data','line_number':1542,'multiline':False]['text':' properties. This allows us to collect the property values while','line_number':1543,'multiline':False]['text':' iterating over the shape hierarchy without worrying over accessors','line_number':1544,'multiline':False]['text':' modifying any state.','line_number':1545,'multiline':False]['text':' The (non-indexed) properties were visited in reverse iteration order,','line_number':1587,'multiline':False]['text':' call std::reverse() to ensure they appear in iteration order.','line_number':1588,'multiline':False]['text':' Get a list of all |obj| properties. As long as obj->shape()','line_number':1594,'multiline':False]['text':' is equal to |objShape|, we can use this to speed up both the','line_number':1595,'multiline':False]['text':' enumerability check and GetProperty.','line_number':1596,'multiline':False]['text':' Collect all non-symbol properties.','line_number':1599,'multiline':False]['text':' If |obj| still has the same shape, it must still be a NativeObject with','line_number':1617,'multiline':False]['text':' the properties in |props|.','line_number':1618,'multiline':False]['text':' |obj| changed shape or the property is not a data property,','line_number':1625,'multiline':False]['text':' so we have to do the slower enumerability check and','line_number':1626,'multiline':False]['text':' GetProperty.','line_number':1627,'multiline':False]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1663,'multiline':False]['text':' 7.3.21 EnumerableOwnProperties ( O, kind )','line_number':1664,'multiline':False]['text':' Step 1. (Step 1 of Object.{keys,values,entries}, really.)','line_number':1671,'multiline':False]['text':' Typed arrays are always handled in the fast path.','line_number':1686,'multiline':False]['text':' Step 2.','line_number':1689,'multiline':False]['text':' Step 3.','line_number':1695,'multiline':False]['text':' Step 4.','line_number':1707,'multiline':False]['text':' Step 4.a. (Symbols were filtered out in step 2.)','line_number':1712,'multiline':False]['text':' Step 4.a.i.','line_number':1721,'multiline':False]['text':' Step 4.a.ii. (inverted.)','line_number':1742,'multiline':False]['text':' Step 4.a.ii.1.','line_number':1747,'multiline':False]['text':' (Omitted because Object.keys doesn't use this implementation.)','line_number':1748,'multiline':False]['text':' Step 4.a.ii.2.a.','line_number':1750,'multiline':False]['text':' Steps 4.a.ii.2.b-c.','line_number':1756,'multiline':False]['text':' Step 5.','line_number':1764,'multiline':False]['text':' (Implemented in step 2.)','line_number':1765,'multiline':False]['text':' Step 3 of Object.{keys,values,entries}','line_number':1767,'multiline':False]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1777,'multiline':False]['text':' 19.1.2.16 Object.keys ( O )','line_number':1778,'multiline':False]['text':' Step 1.','line_number':1782,'multiline':False]['text':' Steps 2-3.','line_number':1799,'multiline':False]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1803,'multiline':False]['text':' 19.1.2.21 Object.values ( O )','line_number':1804,'multiline':False]['text':' Steps 1-3.','line_number':1808,'multiline':False]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1812,'multiline':False]['text':' 19.1.2.5 Object.entries ( O )','line_number':1813,'multiline':False]['text':' Steps 1-3.','line_number':1817,'multiline':False]['text':' ES6 draft 15.2.3.16 ','line_number':1822,'multiline':True]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1851,'multiline':False]['text':' 19.1.2.10.1 Runtime Semantics: GetOwnPropertyKeys ( O, Type )','line_number':1852,'multiline':False]['text':' Step 1 (Performed in caller).','line_number':1855,'multiline':False]['text':' Steps 2-4.','line_number':1857,'multiline':False]['text':' Step 5 (Inlined CreateArrayFromList).','line_number':1863,'multiline':False]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1885,'multiline':False]['text':' 19.1.2.9 Object.getOwnPropertyNames ( O )','line_number':1886,'multiline':False]['text':' ES2018 draft rev c164be80f7ea91de5526b33d54e5c9321ed03d3f','line_number':1910,'multiline':False]['text':' 19.1.2.10 Object.getOwnPropertySymbols ( O )','line_number':1911,'multiline':False]['text':' ES5 15.2.3.7: Object.defineProperties(O, Properties) ','line_number':1926,'multiline':True]['text':' Step 1. ','line_number':1930,'multiline':True]['text':' Step 2. ','line_number':1936,'multiline':True]['text':' Steps 3-6. ','line_number':1941,'multiline':True]['text':' Step 7, but modified to deal with WindowProxy mess ','line_number':1947,'multiline':True]['text':' ES6 20141014 draft 19.1.2.15 Object.preventExtensions(O)','line_number':1956,'multiline':False]['text':' Step 1.','line_number':1961,'multiline':False]['text':' Steps 2-5.','line_number':1966,'multiline':False]['text':' ES6 draft rev27 (2014/08/24) 19.1.2.5 Object.freeze(O)','line_number':1971,'multiline':False]['text':' Step 1.','line_number':1976,'multiline':False]['text':' Steps 2-5.','line_number':1981,'multiline':False]['text':' ES6 draft rev27 (2014/08/24) 19.1.2.12 Object.isFrozen(O)','line_number':1986,'multiline':False]['text':' Step 1.','line_number':1990,'multiline':False]['text':' Step 2.','line_number':1993,'multiline':False]['text':' ES6 draft rev27 (2014/08/24) 19.1.2.17 Object.seal(O)','line_number':2004,'multiline':False]['text':' Step 1.','line_number':2009,'multiline':False]['text':' Steps 2-5.','line_number':2014,'multiline':False]['text':' ES6 draft rev27 (2014/08/24) 19.1.2.13 Object.isSealed(O)','line_number':2019,'multiline':False]['text':' Step 1.','line_number':2023,'multiline':False]['text':' Step 2.','line_number':2026,'multiline':False]['text':' Mutating a boxed primitive's [[Prototype]] has no side effects.','line_number':2047,'multiline':False]['text':' Do nothing if __proto__ isn't being set to an object or null. ','line_number':2052,'multiline':True]['text':' Proposal ','line_number':2112,'multiline':True]['text':' Create the Object function now that we have a [[Prototype]] for it. ','line_number':2124,'multiline':True]['text':'
   * Create |Object.prototype| first, mirroring CreateBlankProto but for the
   * prototype of the created object.
   ','line_number':2140,'multiline':True]['text':' ES5 15.1.2.1. ','line_number':2165,'multiline':True]['text':' fuzzingSafe = ','line_number':2176,'multiline':True]['text':' disableOOMFunctions = ','line_number':2177,'multiline':True]['text':'
   * The global object should have |Object.prototype| as its [[Prototype]].
   * Eventually we'd like to have standard classes be there from the start,
   * and thus we would know we were always setting what had previously been a
   * null [[Prototype]], but right now some code assumes it can set the
   * [[Prototype]] before standard classes have been initialized.  For now,
   * only set the [[Prototype]] if it hasn't already been set.
   ','line_number':2189,'multiline':True]