['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' JSOps not yet supported by WarpBuilder. See warning at the end of the list.','line_number':22,'multiline':False]['text':' Intentionally not implemented ','line_number':24,'multiline':True]['text':' With ','line_number':26,'multiline':True]['text':' Eval ','line_number':29,'multiline':True]['text':' Super ','line_number':34,'multiline':True]['text':' Environments (bug 1366470) ','line_number':39,'multiline':True]['text':' Compound assignment ','line_number':41,'multiline':True]['text':' Generators / Async (bug 1317690) ','line_number':43,'multiline':True]['text':' try-finally ','line_number':46,'multiline':True]['text':' Misc ','line_number':50,'multiline':True]['text':' Private Fields ','line_number':53,'multiline':True]['text':' === !! WARNING WARNING WARNING !! ===','line_number':56,'multiline':False]['text':' Do you really want to sacrifice performance by not implementing this','line_number':57,'multiline':False]['text':' operation in the optimizing compiler?','line_number':58,'multiline':False]['text':' [SMDOC] Control Flow handling in WarpBuilder.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' WarpBuilder traverses the script's bytecode and compiles each instruction to','line_number':68,'multiline':False]['text':' corresponding MIR instructions. Handling control flow bytecode ops requires','line_number':69,'multiline':False]['text':' some special machinery:','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' Forward branches','line_number':72,'multiline':False]['text':' ----------------','line_number':73,'multiline':False]['text':' Most branches in the bytecode are forward branches to a JSOp::JumpTarget','line_number':74,'multiline':False]['text':' instruction that we have not inspected yet. We compile them in two phases:','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':' 1) When compiling the source instruction: the MBasicBlock is terminated','line_number':77,'multiline':False]['text':'    with a control instruction that has a nullptr successor block. We also add','line_number':78,'multiline':False]['text':'    a PendingEdge instance to the PendingEdges list for the target bytecode','line_number':79,'multiline':False]['text':'    location.','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':' 2) When finally compiling the JSOp::JumpTarget: WarpBuilder::build_JumpTarget','line_number':82,'multiline':False]['text':'    creates the target block and uses the list of PendingEdges to 'link' the','line_number':83,'multiline':False]['text':'    blocks.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' Loops','line_number':86,'multiline':False]['text':' -----','line_number':87,'multiline':False]['text':' Loops may be nested within other loops, so each WarpBuilder has a LoopState','line_number':88,'multiline':False]['text':' stack. This is used to link the backedge to the loop's header block.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' Unreachable/dead code','line_number':91,'multiline':False]['text':' ---------------------','line_number':92,'multiline':False]['text':' Some bytecode instructions never fall through to the next instruction, for','line_number':93,'multiline':False]['text':' example JSOp::Return, JSOp::Goto, or JSOp::Throw. Code after such','line_number':94,'multiline':False]['text':' instructions is guaranteed to be dead so WarpBuilder skips it until it gets','line_number':95,'multiline':False]['text':' to a jump target instruction with pending edges.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' Note: The frontend may generate unnecessary JSOp::JumpTarget instructions we','line_number':98,'multiline':False]['text':' can ignore when they have no incoming pending edges.','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' Try-catch','line_number':101,'multiline':False]['text':' ---------','line_number':102,'multiline':False]['text':' WarpBuilder supports scripts with try-catch by only compiling the try-block','line_number':103,'multiline':False]['text':' and bailing out (to the Baseline Interpreter) from the exception handler','line_number':104,'multiline':False]['text':' whenever we need to execute the catch-block.','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' Because we don't compile the catch-block and the code after the try-catch may','line_number':107,'multiline':False]['text':' only be reachable via the catch-block, Baseline's BytecodeAnalysis ensures','line_number':108,'multiline':False]['text':' Baseline does not attempt OSR into Warp at loops that are only reachable via','line_number':109,'multiline':False]['text':' catch/finally blocks.','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' Finally-blocks are currently not supported by WarpBuilder.','line_number':112,'multiline':False]['text':' PendingEdge is used whenever a block is terminated with a forward branch in','line_number':114,'multiline':False]['text':' the bytecode. When we reach the jump target we use this information to link','line_number':115,'multiline':False]['text':' the block to the jump target's block.','line_number':116,'multiline':False]['text':' MTest true-successor.','line_number':120,'multiline':False]['text':' MTest false-successor.','line_number':123,'multiline':False]['text':' MGoto successor.','line_number':126,'multiline':False]['text':' PendingEdgesMap maps a bytecode instruction to a Vector of PendingEdges','line_number':158,'multiline':False]['text':' targeting it. We use InlineMap<> for this because most of the time there are','line_number':159,'multiline':False]['text':' only a few pending edges but there can be many when switch-statements are','line_number':160,'multiline':False]['text':' involved.','line_number':161,'multiline':False]['text':' LoopState stores information about a loop that's being compiled to MIR.','line_number':167,'multiline':False]['text':' Data that is shared across all WarpBuilders for a given compilation.','line_number':178,'multiline':False]['text':' The total loop depth, including loops in the caller while','line_number':180,'multiline':False]['text':' compiling inlined functions.','line_number':181,'multiline':False]['text':' Loop phis for iterators that need to be kept alive.','line_number':184,'multiline':False]['text':' WarpBuilder builds a MIR graph from WarpSnapshot. Unlike WarpOracle,','line_number':200,'multiline':False]['text':' WarpBuilder can run off-thread.','line_number':201,'multiline':False]['text':' Pointer to a WarpOpSnapshot or nullptr if we reached the end of the list.','line_number':209,'multiline':False]['text':' Because bytecode is compiled from first to last instruction (and','line_number':210,'multiline':False]['text':' WarpOpSnapshot is sorted the same way), the iterator always moves forward.','line_number':211,'multiline':False]['text':' Note: loopStack_ is builder-specific. loopStack_.length is the','line_number':214,'multiline':False]['text':' depth relative to the current script.  The overall loop depth is','line_number':215,'multiline':False]['text':' stored in the WarpCompilation.','line_number':216,'multiline':False]['text':' These are only initialized when building an inlined script.','line_number':220,'multiline':False]['text':' namespace jit','line_number':339,'multiline':False]['text':' namespace js','line_number':340,'multiline':False]['text':' jit_WarpBuilder_h ','line_number':342,'multiline':True]