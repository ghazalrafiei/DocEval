['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' GeneratorResumeKind','line_number':15,'multiline':False]['text':' Base class for BaselineCompiler and BaselineInterpreterGenerator. The Handler','line_number':23,'multiline':False]['text':' template is a class storing fields/methods that are interpreter or compiler','line_number':24,'multiline':False]['text':' specific. This can be combined with template specialization of methods in','line_number':25,'multiline':False]['text':' this class to specialize behavior.','line_number':26,'multiline':False]['text':' Shared epilogue code to return to the caller.','line_number':39,'multiline':False]['text':' Prologue code where we resume for Ion prologue bailouts.','line_number':44,'multiline':False]['text':' Early Ion bailouts will enter at this address. This is after frame','line_number':50,'multiline':False]['text':' construction and before environment chain is initialized.','line_number':51,'multiline':False]['text':' Baseline Interpreter can enter Baseline Compiler code at this address. This','line_number':54,'multiline':False]['text':' is right after the warm-up counter check in the prologue.','line_number':55,'multiline':False]['text':' Pushes the current script as argument for a VM function.','line_number':71,'multiline':False]['text':' Pushes the bytecode pc as argument for a VM function.','line_number':74,'multiline':False]['text':' Pushes a name/object/scope associated with the current bytecode op (and','line_number':77,'multiline':False]['text':' stored in the script) as argument for a VM function.','line_number':78,'multiline':False]['text':' Pushes a bytecode operand as argument for a VM function.','line_number':85,'multiline':False]['text':' Loads the current JSScript* in dest.','line_number':92,'multiline':False]['text':' Subtracts |script->nslots() * sizeof(Value)| from reg.','line_number':98,'multiline':False]['text':' Jump to the script's resume entry indicated by resumeIndex.','line_number':101,'multiline':False]['text':' Load the global's lexical environment.','line_number':105,'multiline':False]['text':' Load the |this|-value from the global's lexical environment.','line_number':109,'multiline':False]['text':' Computes the frame size. See BaselineFrame::debugFrameSize_.','line_number':112,'multiline':False]['text':' ifDebuggee should be a function emitting code for when the script is a','line_number':133,'multiline':False]['text':' debuggee script. ifNotDebuggee (if present) is called to emit code for','line_number':134,'multiline':False]['text':' non-debuggee scripts.','line_number':135,'multiline':False]['text':' ifSet should be a function emitting code for when the script has |flag|','line_number':150,'multiline':False]['text':' set. ifNotSet emits code for when the flag isn't set.','line_number':151,'multiline':False]['text':' If |script->hasFlag(flag) == value|, execute the code emitted by |emit|.','line_number':157,'multiline':False]['text':' JSOp::Pos, JSOp::Neg, JSOp::BitNot, JSOp::Inc, JSOp::Dec, JSOp::ToNumeric.','line_number':190,'multiline':False]['text':' JSOp::BitXor, JSOp::Lsh, JSOp::Add etc.','line_number':193,'multiline':False]['text':' Handles JSOp::Lt, JSOp::Gt, and friends','line_number':196,'multiline':False]['text':' Handles JSOp::NewObject and JSOp::NewInit.','line_number':199,'multiline':False]['text':' For a JOF_JUMP op, jumps to the op's jump target.','line_number':202,'multiline':False]['text':' For a JOF_JUMP op, jumps to the op's jump target depending on the Value','line_number':205,'multiline':False]['text':' in |val|.','line_number':206,'multiline':False]['text':' Converts |val| to an index in the jump table and stores this in |dest|','line_number':209,'multiline':False]['text':' or branches to the default pc if not int32 or out-of-range.','line_number':210,'multiline':False]['text':' Jumps to the target of a table switch based on |key| and the','line_number':214,'multiline':False]['text':' firstResumeIndex stored in JSOp::TableSwitch.','line_number':215,'multiline':False]['text':' Try to bake in the result of GETGNAME/BINDGNAME instead of using an IC.','line_number':234,'multiline':False]['text':' Return true if we managed to optimize the op.','line_number':235,'multiline':False]['text':' Interface used by BaselineCodeGen for BaselineCompiler.','line_number':279,'multiline':False]['text':' Native code offsets for OSR at JSOp::LoopHead ops.','line_number':290,'multiline':False]['text':' Index of the current ICEntry in the script's JitScript.','line_number':298,'multiline':False]['text':' The JIT uses the return address -> pc mapping and bakes in the pc','line_number':323,'multiline':False]['text':' argument so the DebugEpilogue call needs to be part of the returning','line_number':324,'multiline':False]['text':' bytecode op for this to work.','line_number':325,'multiline':False]['text':' If a script has more |nslots| than this the stack check must account','line_number':355,'multiline':False]['text':' for these slots explicitly.','line_number':356,'multiline':False]['text':' Native code offsets for bytecode ops in the script's resume offsets list.','line_number':368,'multiline':False]['text':' Native code offsets for debug traps if the script is compiled with debug','line_number':371,'multiline':False]['text':' instrumentation.','line_number':372,'multiline':False]['text':' Interface used by BaselineCodeGen for BaselineInterpreterGenerator.','line_number':400,'multiline':False]['text':' Entry point to start interpreting a bytecode op. No registers are live. PC','line_number':404,'multiline':False]['text':' is loaded from the frame.','line_number':405,'multiline':False]['text':' Like interpretOp_ but at this point the PC is expected to be in','line_number':408,'multiline':False]['text':' InterpreterPCReg.','line_number':409,'multiline':False]['text':' Offsets of toggled jumps for debugger instrumentation.','line_number':412,'multiline':False]['text':' Offsets of toggled jumps for code coverage instrumentation.','line_number':416,'multiline':False]['text':' Offsets of IC calls for IsIonInlinableOp ops, for Ion bailouts.','line_number':421,'multiline':False]['text':' Offsets of some callVMs for BaselineDebugModeOSR.','line_number':424,'multiline':False]['text':' The current JSOp we are emitting interpreter code for.','line_number':427,'multiline':False]['text':' Interpreter doesn't know the script and pc statically.','line_number':456,'multiline':False]['text':' The interpreter doesn't use the return address -> pc mapping and doesn't','line_number':463,'multiline':False]['text':' bake in bytecode PCs so it can emit a shared DebugEpilogue call instead','line_number':464,'multiline':False]['text':' of duplicating it for every return op.','line_number':465,'multiline':False]['text':' The interpreter doesn't know the number of slots statically so we always','line_number':481,'multiline':False]['text':' include them.','line_number':482,'multiline':False]['text':' Offsets of patchable call instructions for debugger breakpoints/stepping.','line_number':491,'multiline':False]['text':' Offsets of move instructions for tableswitch base address.','line_number':494,'multiline':False]['text':' Offset of the first tableswitch entry.','line_number':497,'multiline':False]['text':' Offset of the code to start interpreting a bytecode op.','line_number':500,'multiline':False]['text':' Like interpretOpOffset_ but skips the debug trap for the current op.','line_number':503,'multiline':False]['text':' Offset of the jump (tail call) to the debug trap handler trampoline code.','line_number':506,'multiline':False]['text':' When the debugger is enabled, NOPs are patched to calls to this location.','line_number':507,'multiline':False]['text':' namespace jit','line_number':522,'multiline':False]['text':' namespace js','line_number':523,'multiline':False]['text':' jit_BaselineCodeGen_h ','line_number':525,'multiline':True]