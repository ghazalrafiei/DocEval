['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::jit::JitActivation','line_number':21,'multiline':False]['text':' Note that C++ bool is only 1 byte, so zero extend it to clear the','line_number':35,'multiline':False]['text':' higher-order bits.','line_number':36,'multiline':False]['text':' Checks whether a double is representable as a 32-bit integer. If so, the','line_number':104,'multiline':False]['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':105,'multiline':False]['text':' the given snapshot. This function overwrites the scratch float register.','line_number':106,'multiline':False]['text':' Truncate double to int ; if result is inexact or invalid fail.','line_number':117,'multiline':False]['text':' masking for Inexact and Invalid flag.','line_number':123,'multiline':False]['text':' Checks whether a float32 is representable as a 32-bit integer. If so, the','line_number':143,'multiline':False]['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':144,'multiline':False]['text':' the given snapshot. This function overwrites the scratch float register.','line_number':145,'multiline':False]['text':' placeholder ','line_number':190,'multiline':True]['text':' This method generates lui, dsll and ori instruction block that can be','line_number':243,'multiline':False]['text':' modified by UpdateLoad64Value, either during compilation (eg.','line_number':244,'multiline':False]['text':' Assembler::bind), or during execution (eg. jit::PatchJump).','line_number':245,'multiline':False]['text':' Shifts','line_number':273,'multiline':False]['text':' Arithmetic-based ops.','line_number':386,'multiline':False]['text':' Add.','line_number':388,'multiline':False]['text':' Check for signed range because of as_daddiu','line_number':415,'multiline':False]['text':' If the sign of rs and rt are different, no overflow','line_number':440,'multiline':False]['text':' Check for signed range because of as_daddiu','line_number':471,'multiline':False]['text':' Subtract.','line_number':484,'multiline':False]['text':' If the sign of rs and rt are the same, no overflow','line_number':530,'multiline':False]['text':' Check if the sign of rd and rs are the same','line_number':532,'multiline':False]['text':' Memory.','line_number':575,'multiline':False]['text':' Shortcut for when we know we're transferring 32 bits of data.','line_number':722,'multiline':False]['text':' Pushing sp requires one more instruction.','line_number':730,'multiline':False]['text':' Branches when done from within mips-specific code.','line_number':739,'multiline':False]['text':' Generate the long jump for calls because return address has to be','line_number':773,'multiline':False]['text':' the address after the reserved block.','line_number':774,'multiline':False]['text':' Second word holds a pointer to the next branch in label's chain.','line_number':784,'multiline':False]['text':' Make the whole branch continous in the buffer. The '6'','line_number':788,'multiline':False]['text':' instructions are writing at below (contain delay slot).','line_number':789,'multiline':False]['text':' Leave space for long jump.','line_number':798,'multiline':False]['text':' simply output the pointer of one label as its id,','line_number':809,'multiline':False]['text':' notice that after one label destructor, the pointer will be reused.','line_number':810,'multiline':False]['text':' Handle long jump','line_number':835,'multiline':False]['text':' Handle long conditional branch, the target offset is based on self,','line_number':843,'multiline':False]['text':' point to next instruction of nop at below.','line_number':844,'multiline':False]['text':' No need for a "nop" here because we can clobber scratch.','line_number':851,'multiline':False]['text':' Generate open jump and link it to a label.','line_number':859,'multiline':False]['text':' Second word holds a pointer to the next branch in label's chain.','line_number':861,'multiline':False]['text':' Make the whole branch continous in the buffer.','line_number':866,'multiline':False]['text':' Indicate that this is short jump with offset 4.','line_number':869,'multiline':False]['text':' Make the whole branch continous in the buffer. The '7'','line_number':884,'multiline':False]['text':' instructions are writing at below (contain conditional nop).','line_number':885,'multiline':False]['text':' Leave space for potential long jump.','line_number':896,'multiline':False]['text':' fp instructions','line_number':927,'multiline':False]['text':' descriptor_','line_number':1021,'multiline':False]['text':' if res > 255; res = 255;','line_number':1339,'multiline':False]['text':' if !(input > 0); res = 0;','line_number':1341,'multiline':False]['text':' If it's an int, convert it to double.','line_number':1539,'multiline':False]['text':' Not an int, just load as double.','line_number':1547,'multiline':False]['text':' If it's an int, convert it to double.','line_number':1557,'multiline':False]['text':' Since we only have one scratch, we need to stomp over it with the tag.','line_number':1559,'multiline':False]['text':' Not an int, just load as double.','line_number':1569,'multiline':False]['text':' First, recompute the offset that had been stored in the scratch register','line_number':1571,'multiline':False]['text':' since the scratch register was overwritten loading in the type.','line_number':1572,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':1604,'multiline':False]['text':' X86/X64-common/ARM/MIPS interface.','line_number':1605,'multiline':False]['text':'///////////////////////////////////////////////////////////////','line_number':1606,'multiline':False]['text':' Allocate stack slots for Value. One for each.','line_number':1699,'multiline':False]['text':' Store Value','line_number':1701,'multiline':False]['text':' Load value before allocate stack, addr.base may be is sp.','line_number':1706,'multiline':False]['text':' Reserve space for exception information.','line_number':1752,'multiline':False]['text':' Use a0 since it is a first function argument','line_number':1756,'multiline':False]['text':' Call the handler.','line_number':1758,'multiline':False]['text':' Already clobbered a0, so use it...','line_number':1773,'multiline':False]['text':' Invalid kind.','line_number':1791,'multiline':False]['text':' No exception handler. Load the error value, load the new stack pointer','line_number':1793,'multiline':False]['text':' and return from the entry frame.','line_number':1794,'multiline':False]['text':' We're going to be returning by the ion calling convention','line_number':1800,'multiline':False]['text':' If we found a catch handler, this must be a baseline frame. Restore','line_number':1805,'multiline':False]['text':' state and jump to the catch block.','line_number':1806,'multiline':False]['text':' If we found a finally block, this must be a baseline frame. Push','line_number':1815,'multiline':False]['text':' two values expected by JSOp::Retsub: BooleanValue(true) and the','line_number':1816,'multiline':False]['text':' exception.','line_number':1817,'multiline':False]['text':' Only used in debug mode. Return BaselineFrame->returnValue() to the','line_number':1831,'multiline':False]['text':' caller.','line_number':1832,'multiline':False]['text':' If profiling is enabled, then update the lastProfilingFrame to refer to','line_number':1844,'multiline':False]['text':' caller frame before returning.','line_number':1845,'multiline':False]['text':' Test if profiler enabled.','line_number':1848,'multiline':False]['text':' If we are bailing out to baseline to handle an exception, jump to','line_number':1859,'multiline':False]['text':' the bailout tail stub. Load 1 (true) in ReturnReg to indicate success.','line_number':1860,'multiline':False]['text':' If we are throwing and the innermost frame was a wasm frame, reset SP and','line_number':1867,'multiline':False]['text':' FP; SP is pointing to the unwound return address to the wasm entry, so','line_number':1868,'multiline':False]['text':' we can just ret().','line_number':1869,'multiline':False]['text':' Found a wasm catch handler, restore state and jump to it.','line_number':1877,'multiline':False]['text':'{{{ check_macroassembler_style','line_number':1931,'multiline':False]['text':' ===============================================================','line_number':1932,'multiline':False]['text':' Stack manipulation functions.','line_number':1933,'multiline':False]['text':' ===============================================================','line_number':2027,'multiline':False]['text':' ABI function calls.','line_number':2028,'multiline':False]['text':' Force sp to be aligned','line_number':2037,'multiline':False]['text':' Reserve place for $ra.','line_number':2047,'multiline':False]['text':' Save $ra because call is going to clobber it. Restore it in','line_number':2061,'multiline':False]['text':' callWithABIPost. NOTE: This is needed for calls from SharedIC.','line_number':2062,'multiline':False]['text':' Maybe we can do this differently.','line_number':2063,'multiline':False]['text':' Position all arguments.','line_number':2066,'multiline':False]['text':' Restore ra value (as stored in callWithABIPre()).','line_number':2083,'multiline':False]['text':' Restore sp value from stack (as stored in setupUnalignedABICall()).','line_number':2087,'multiline':False]['text':' Use adjustFrame instead of freeStack because we already restored sp.','line_number':2089,'multiline':False]['text':' Load the callee in t9, no instruction between the lw and call','line_number':2102,'multiline':False]['text':' should clobber it. Note that we can't use fun.base because it may','line_number':2103,'multiline':False]['text':' be one of the IntArg registers clobbered before the call.','line_number':2104,'multiline':False]['text':' Load the callee in t9, as above.','line_number':2114,'multiline':False]['text':' ===============================================================','line_number':2122,'multiline':False]['text':' Move','line_number':2123,'multiline':False]['text':' ===============================================================','line_number':2167,'multiline':False]['text':' Branch functions','line_number':2168,'multiline':False]['text':' temp may be InvalidReg, use scratch2 instead.','line_number':2191,'multiline':False]['text':' ========================================================================','line_number':2211,'multiline':False]['text':' Memory access primitives.','line_number':2212,'multiline':False]['text':' For known integers and booleans, we can just store the unboxed value if','line_number':2222,'multiline':False]['text':' the slot has the same type.','line_number':2223,'multiline':False]['text':' ma_li INT64_MAX','line_number':2358,'multiline':False]['text':' For numbers in  -1.[ : ]INT64_MAX range do nothing more','line_number':2362,'multiline':False]['text':' ma_li INT64_MIN','line_number':2366,'multiline':False]['text':' Guard against negative values that result in 0 due the precision loss.','line_number':2375,'multiline':False]['text':' ma_li INT64_MAX','line_number':2413,'multiline':False]['text':' For numbers in  -1.[ : ]INT64_MAX range do nothing more','line_number':2417,'multiline':False]['text':' ma_li INT64_MIN','line_number':2421,'multiline':False]['text':' Guard against negative values that result in 0 due the precision loss.','line_number':2430,'multiline':False]['text':' Maybe add the offset.','line_number':2454,'multiline':False]['text':' Maybe add the offset.','line_number':2513,'multiline':False]['text':' ========================================================================','line_number':2771,'multiline':False]['text':' Convert floating point.','line_number':2772,'multiline':False]['text':'}}} check_macroassembler_style','line_number':2818,'multiline':False]