['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * JS execution context.
 ','line_number':7,'multiline':True]['text':' mozilla::ConvertUtf16ToUtf8','line_number':18,'multiline':False]['text':' ANDROID','line_number':26,'multiline':False]['text':' XP_WIN','line_number':29,'multiline':False]['text':' JS_SetNativeStackQuota','line_number':31,'multiline':False]['text':' JS::ContextOptions','line_number':44,'multiline':False]['text':' js::GetErrorMessage, JSMSG_*','line_number':45,'multiline':False]['text':' js::ReportOverRecursed','line_number':46,'multiline':False]['text':' JSDVG_IGNORE_STACK','line_number':54,'multiline':False]['text':' js::PlainObject','line_number':63,'multiline':False]['text':' StringToNewUTF8CharsZ','line_number':66,'multiline':False]['text':' js::ValueToSource','line_number':67,'multiline':False]['text':' js_*_str','line_number':68,'multiline':False]['text':' Avoid holding on to unused heap allocations.','line_number':115,'multiline':False]['text':' Skip most of the initialization if this thread will not be running JS.','line_number':122,'multiline':False]['text':' Set the ContextKind last, so that ProtectedData checks will allow us to','line_number':151,'multiline':False]['text':' initialize this context before it becomes the runtime's active context.','line_number':152,'multiline':False]['text':' Initialize stack quota to a reasonable default. Embedders can override this','line_number':159,'multiline':False]['text':' by calling JS_SetNativeStackQuota.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' NOTE: Firefox overrides these values. For the main thread this happens in','line_number':162,'multiline':False]['text':' XPCJSContext::Initialize.','line_number':163,'multiline':False]['text':' Initialize stack quota last because simulators rely on the JSRuntime having','line_number':207,'multiline':False]['text':' been initialized.','line_number':208,'multiline':False]['text':' Cancel all off thread Ion compiles. Completed Ion compiles may try to','line_number':224,'multiline':False]['text':' interrupt this context. See HelperThread::handleIonWorkload.','line_number':225,'multiline':False]['text':' Flush promise tasks executing in helper threads early, before any parts','line_number':234,'multiline':False]['text':' of the JSRuntime that might be visible to helper threads are torn down.','line_number':235,'multiline':False]['text':' Destroy the runtime along with its last context.','line_number':238,'multiline':False]['text':'
 * Since memory has been exhausted, avoid the normal error-handling path which
 * allocates an error object, report and callstack. If code is running, simply
 * throw the static atom "out of memory". If code is not running, call the
 * error reporter directly.
 *
 * Furthermore, callers of ReportOutOfMemory (viz., malloc) assume a GC does
 * not occur, so GC must be avoided or suppressed.
 ','line_number':266,'multiline':True]['text':'
   * OOMs are non-deterministic, especially across different execution modes
   * (e.g. interpreter vs JIT). When doing differential testing, print to stderr
   * so that the fuzzers can detect this.
   ','line_number':276,'multiline':True]['text':' Report the oom. ','line_number':292,'multiline':True]['text':' If we OOM early in process startup, this may be unavailable so just return','line_number':297,'multiline':False]['text':' instead of crashing unexpectedly.','line_number':298,'multiline':False]['text':'
   * We cannot make stack depth deterministic across different
   * implementations (e.g. JIT vs. interpreter will differ in
   * their maximum stack depth).
   * However, we can detect externally when we hit the maximum
   * stack depth which is useful for external testing programs
   * like fuzzers.
   ','line_number':313,'multiline':True]['text':' |callee| requires a usage string provided by JS_DefineFunctionsWithHelp. ','line_number':355,'multiline':True]['text':' This function is only used for shell command-line sorts of stuff where','line_number':385,'multiline':False]['text':' performance doesn't really matter, so just encode into max-sized','line_number':386,'multiline':False]['text':' memory.','line_number':387,'multiline':False]['text':' linebuf/utf8buf usually ends with a newline. If not, add one here.','line_number':417,'multiline':False]['text':' embedded newlines -- argh! ','line_number':476,'multiline':True]['text':' If there were no filename or lineno, the prefix might be empty ','line_number':487,'multiline':True]['text':' Conditionally ignore reported warnings. ','line_number':503,'multiline':True]['text':' Keep in sync with addPendingOutOfMemory.','line_number':693,'multiline':False]['text':' Internal job queue handling must be set up very early. Self-hosting','line_number':706,'multiline':False]['text':' initialization is as good a marker for that as any.','line_number':707,'multiline':False]['text':' It doesn't make sense for job queue draining to be reentrant. At the','line_number':772,'multiline':False]['text':' same time we don't want to assert against it, because that'd make','line_number':773,'multiline':False]['text':' drainJobQueue unsafe for fuzzers. We do want fuzzers to test this,','line_number':774,'multiline':False]['text':' so we simply ignore nested calls of drainJobQueue.','line_number':775,'multiline':False]['text':' Execute jobs in a loop until we've reached the end of the queue.','line_number':782,'multiline':False]['text':' A previous job might have set this flag. E.g., the js shell','line_number':784,'multiline':False]['text':' sets it if the `quit` builtin function is called.','line_number':785,'multiline':False]['text':' If the next job is the last job in the job queue, allow','line_number':793,'multiline':False]['text':' skipping the standard job queuing behavior.','line_number':794,'multiline':False]['text':' Nothing we can do about uncatchable exceptions.','line_number':802,'multiline':False]['text':'
             * Clear the exception, because
             * PrepareScriptEnvironmentAndInvoke will assert that we don't
             * have one.
             ','line_number':808,'multiline':True]['text':' It's possible a job added a new off-thread promise task.','line_number':830,'multiline':False]['text':' When MakeUnique's allocation fails, the SavedQueue constructor is never','line_number':871,'multiline':False]['text':' called, so this->queue is still initialized. (The move doesn't occur','line_number':872,'multiline':False]['text':' until the constructor gets called.)','line_number':873,'multiline':False]['text':' Keep in sync with addPendingOutOfMemory.','line_number':886,'multiline':False]['text':' Clear the ContextKind first, so that ProtectedData checks will allow us to','line_number':989,'multiline':False]['text':' destroy this context even if the runtime is already gone.','line_number':990,'multiline':False]['text':' Free the stuff hanging off of cx. ','line_number':993,'multiline':True]['text':' Do not intercept exceptions if we are already','line_number':1059,'multiline':False]['text':' in the exception interceptor. That would lead','line_number':1060,'multiline':False]['text':' to infinite recursion.','line_number':1061,'multiline':False]['text':' Check whether we have an interceptor at all.','line_number':1066,'multiline':False]['text':' Don't report OOM exceptions. The interceptor isn't interested in those','line_number':1071,'multiline':False]['text':' and they can confuse the interceptor because OOM can be thrown when we','line_number':1072,'multiline':False]['text':' are not in a realm (atom allocation, for example).','line_number':1073,'multiline':False]['text':' Make sure that we do not call the interceptor from within','line_number':1078,'multiline':False]['text':' the interceptor.','line_number':1079,'multiline':False]['text':' The interceptor must be infallible.','line_number':1082,'multiline':False]['text':' defined(NIGHTLY_BUILD)','line_number':1090,'multiline':False]['text':' overRecursed_ is set after the fact by ReportOverRecursed.','line_number':1092,'multiline':False]['text':'
   * There are other JSContext members that could be measured; the following
   * ones have been found by DMD to be worth measuring.  More stuff may be
   * added later.
   ','line_number':1151,'multiline':True]['text':' Note that, for now, we use the untrusted limit for ion. This is fine,','line_number':1184,'multiline':False]['text':' because it's the most conservative limit, and if we hit it, we'll bail','line_number':1185,'multiline':False]['text':' out of ion into the interpreter, which will do a proper recursion check.','line_number':1186,'multiline':False]['text':' In non-DEBUG builds MOZ_CRASH normally doesn't print to stderr so we have','line_number':1210,'multiline':False]['text':' to do this explicitly (the jit-test allow-unhandlable-oom annotation and','line_number':1211,'multiline':False]['text':' fuzzers depend on it).','line_number':1212,'multiline':False]['text':' This is a helper thread doing Ion or Wasm compilation - nothing to do.','line_number':1244,'multiline':False]