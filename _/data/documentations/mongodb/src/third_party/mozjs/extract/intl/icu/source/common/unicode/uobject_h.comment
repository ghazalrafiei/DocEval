['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 2002-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  uobject.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002jun26
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':'*
 * \file
 * \brief C++ API: Common ICU base class UObject.
 ','line_number':28,'multiline':True]['text':'*
 * \def U_NO_THROW
 *         Since ICU 64, use U_NOEXCEPT instead.
 *
 *         Previously, define this to define the throw() specification so
 *                 certain functions do not throw any exceptions
 *
 *         UMemory operator new methods should have the throw() specification 
 *         appended to them, so that the compiler adds the additional NULL check 
 *         before calling constructors. Without, if <code>operator new</code> returns NULL the 
 *         constructor is still called, and if the constructor references member 
 *         data, (which it typically does), the result is a segmentation violation.
 *
 * @stable ICU 4.2. Since ICU 64, Use U_NOEXCEPT instead. See ICU-20422.
 ','line_number':33,'multiline':True]['text':'===========================================================================','line_number':52,'multiline':True]['text':' UClassID-based RTTI ','line_number':53,'multiline':True]['text':'===========================================================================','line_number':54,'multiline':True]['text':'*
 * UClassID is used to identify classes without using the compiler's RTTI.
 * This was used before C++ compilers consistently supported RTTI.
 * ICU 4.6 requires compiler RTTI to be turned on.
 *
 * Each class hierarchy which needs
 * to implement polymorphic clone() or operator==() defines two methods,
 * described in detail below.  UClassID values can be compared using
 * operator==(). Nothing else should be done with them.
 *
 * \par
 * In class hierarchies that implement "poor man's RTTI",
 * each concrete subclass implements getDynamicClassID() in the same way:
 *
 * \code
 *      class Derived {
 *      public:
 *          virtual UClassID getDynamicClassID() const
 *            { return Derived::getStaticClassID(); }
 *      }
 * \endcode
 *
 * Each concrete class implements getStaticClassID() as well, which allows
 * clients to test for a specific type.
 *
 * \code
 *      class Derived {
 *      public:
 *          static UClassID U_EXPORT2 getStaticClassID();
 *      private:
 *          static char fgClassID;
 *      }
 *
 *      // In Derived.cpp:
 *      UClassID Derived::getStaticClassID()
 *        { return (UClassID)&Derived::fgClassID; }
 *      char Derived::fgClassID = 0; // Value is irrelevant
 * \endcode
 * @stable ICU 2.0
 ','line_number':56,'multiline':True]['text':'*
 * UMemory is the common ICU base class.
 * All other ICU C++ classes are derived from UMemory (starting with ICU 2.4).
 *
 * This is primarily to make it possible and simple to override the
 * C++ memory management by adding new/delete operators to this base class.
 *
 * To override ALL ICU memory management, including that from plain C code,
 * replace the allocation functions declared in cmemory.h
 *
 * UMemory does not contain any virtual functions.
 * Common "boilerplate" functions are defined in UObject.
 *
 * @stable ICU 2.4
 ','line_number':100,'multiline':True]['text':' test versions for debugging shaper heap memory problems ','line_number':118,'multiline':True]['text':'*
     * Override for ICU4C C++ memory management.
     * simple, non-class types are allocated using the macros in common/cmemory.h
     * (uprv_malloc(), uprv_free(), uprv_realloc());
     * they or something else could be used here to implement C++ new/delete
     * for ICU4C C++ classes
     * @stable ICU 2.4
     ','line_number':126,'multiline':True]['text':'*
     * Override for ICU4C C++ memory management.
     * See new().
     * @stable ICU 2.4
     ','line_number':136,'multiline':True]['text':'*
     * Override for ICU4C C++ memory management.
     * simple, non-class types are allocated using the macros in common/cmemory.h
     * (uprv_malloc(), uprv_free(), uprv_realloc());
     * they or something else could be used here to implement C++ new/delete
     * for ICU4C C++ classes
     * @stable ICU 2.4
     ','line_number':143,'multiline':True]['text':'*
     * Override for ICU4C C++ memory management.
     * See delete().
     * @stable ICU 2.4
     ','line_number':153,'multiline':True]['text':'*
     * Override for ICU4C C++ memory management for STL.
     * See new().
     * @stable ICU 2.6
     ','line_number':161,'multiline':True]['text':'*
     * Override for ICU4C C++ memory management for STL.
     * See delete().
     * @stable ICU 2.6
     ','line_number':168,'multiline':True]['text':' U_HAVE_PLACEMENT_NEW ','line_number':174,'multiline':True]['text':'*
      * This method overrides the MFC debug version of the operator new
      * 
      * @param size   The requested memory size
      * @param file   The file where the allocation was requested
      * @param line   The line where the allocation was requested 
      ','line_number':176,'multiline':True]['text':'*
      * This method provides a matching delete for the MFC debug new
      * 
      * @param p      The pointer to the allocated memory
      * @param file   The file where the allocation was requested
      * @param line   The line where the allocation was requested 
      ','line_number':184,'multiline':True]['text':' U_HAVE_DEBUG_LOCATION_NEW ','line_number':192,'multiline':True]['text':' U_OVERRIDE_CXX_ALLOCATION ','line_number':193,'multiline':True]['text':'
     * Assignment operator not declared. The compiler will provide one
     * which does nothing since this class does not contain any data members.
     * API/code coverage may show the assignment operator as present and
     * untested - ignore.
     * Subclasses need this assignment operator if they use compiler-provided
     * assignment operators of their own. An alternative to not declaring one
     * here would be to declare and empty-implement a protected or public one.
    UMemory &UMemory::operator=(const UMemory &);
     ','line_number':195,'multiline':True]['text':'*
 * UObject is the common ICU "boilerplate" class.
 * UObject inherits UMemory (starting with ICU 2.4),
 * and all other public ICU C++ classes
 * are derived from UObject (starting with ICU 2.2).
 *
 * UObject contains common virtual functions, in particular a virtual destructor.
 *
 * The clone() function is not available in UObject because it is not
 * implemented by all ICU classes.
 * Many ICU services provide a clone() function for their class trees,
 * defined on the service's C++ base class
 * (which itself is a subclass of UObject).
 *
 * @stable ICU 2.2
 ','line_number':207,'multiline':True]['text':'*
     * Destructor.
     *
     * @stable ICU 2.2
     ','line_number':225,'multiline':True]['text':'*
     * ICU4C "poor man's RTTI", returns a UClassID for the actual ICU class.
     * The base class implementation returns a dummy value.
     *
     * Use compiler RTTI rather than ICU's "poor man's RTTI".
     * Since ICU 4.6, new ICU C++ class hierarchies do not implement "poor man's RTTI".
     *
     * @stable ICU 2.2
     ','line_number':232,'multiline':True]['text':' the following functions are protected to prevent instantiation and','line_number':244,'multiline':False]['text':' direct use of UObject itself','line_number':245,'multiline':False]['text':' default constructor','line_number':247,'multiline':False]['text':' inline UObject() {}','line_number':248,'multiline':False]['text':' copy constructor','line_number':250,'multiline':False]['text':' inline UObject(const UObject &other) {}','line_number':251,'multiline':False]['text':' TODO Sometime in the future. Implement operator==().','line_number':254,'multiline':False]['text':' (This comment inserted in 2.2)','line_number':255,'multiline':False]['text':' some or all of the following "boilerplate" functions may be made public','line_number':256,'multiline':False]['text':' in a future ICU4C release when all subclasses implement them','line_number':257,'multiline':False]['text':' assignment operator','line_number':259,'multiline':False]['text':' (not virtual, see "Taligent's Guide to Designing Programs" pp.73..74)','line_number':260,'multiline':False]['text':' commented out because the implementation is the same as a compiler's default','line_number':261,'multiline':False]['text':' UObject &operator=(const UObject &other) { return *this; }','line_number':262,'multiline':False]['text':' comparison operators','line_number':264,'multiline':False]['text':' clone() commented out from the base class:','line_number':268,'multiline':False]['text':' some compilers do not support co-variant return types','line_number':269,'multiline':False]['text':' (i.e., subclasses would have to return UObject * as well, instead of SubClass *)','line_number':270,'multiline':False]['text':' see also UObject class documentation.','line_number':271,'multiline':False]['text':' virtual UObject *clone() const;','line_number':272,'multiline':False]['text':'
     * Assignment operator not declared. The compiler will provide one
     * which does nothing since this class does not contain any data members.
     * API/code coverage may show the assignment operator as present and
     * untested - ignore.
     * Subclasses need this assignment operator if they use compiler-provided
     * assignment operators of their own. An alternative to not declaring one
     * here would be to declare and empty-implement a protected or public one.
    UObject &UObject::operator=(const UObject &);
     ','line_number':275,'multiline':True]['text':'*
 * This is a simple macro to add ICU RTTI to an ICU object implementation.
 * This does not go into the header. This should only be used in *.cpp files.
 *
 * @param myClass The name of the class that needs RTTI defined.
 * @internal
 ','line_number':288,'multiline':True]['text':'*
 * This macro adds ICU RTTI to an ICU abstract class implementation.
 * This macro should be invoked in *.cpp files.  The corresponding
 * header should declare getStaticClassID.
 *
 * @param myClass The name of the class that needs RTTI defined.
 * @internal
 ','line_number':304,'multiline':True]['text':' U_HIDE_INTERNAL_API ','line_number':318,'multiline':True]['text':' U_SHOW_CPLUSPLUS_API ','line_number':322,'multiline':True]