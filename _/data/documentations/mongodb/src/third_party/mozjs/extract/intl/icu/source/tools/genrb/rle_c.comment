['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2000-2003, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*
* File writejava.c
*
* Modification History:
*
*   Date        Name        Description
*   01/11/02    Ram        Creation.
*******************************************************************************
','line_number':3,'multiline':True]['text':'*
 * The ESCAPE character is used during run-length encoding.  It signals
 * a run of identical chars.
 ','line_number':21,'multiline':True]['text':'*
 * The ESCAPE_BYTE character is used during run-length encoding.  It signals
 * a run of identical bytes.
 ','line_number':27,'multiline':True]['text':'*
 * Append a byte to the given StringBuffer, packing two bytes into each
 * character.  The state parameter maintains intermediary data between
 * calls.
 * @param state A two-element array, with state[0] == 0 if this is the
 * first byte of a pair, or state[0] != 0 if this is the second byte
 * of a pair, in which case state[1] is the first byte.
 ','line_number':33,'multiline':True]['text':'*
 * Encode a run, possibly a degenerate run (of < 4 values).
 * @param length The length of the run; must be > 0 && <= 0xFF.
 ','line_number':62,'multiline':True]['text':' Don't need to escape this value','line_number':90,'multiline':True]['text':'*
 * Encode a run, possibly a degenerate run (of < 4 values).
 * @param length The length of the run; must be > 0 && <= 0xFFFF.
 ','line_number':104,'multiline':True]['text':' Don't need to escape this value ','line_number':132,'multiline':True]['text':'*
 * Construct a string representing a char array.  Use run-length encoding.
 * A character represents itself, unless it is the ESCAPE character.  Then
 * the following notations are possible:
 *   ESCAPE ESCAPE   ESCAPE literal
 *   ESCAPE n c      n instances of character c
 * Since an encoded run occupies 3 characters, we only encode runs of 4 or
 * more characters.  Thus we have n > 0 and n != ESCAPE and n <= 0xFFFF.
 * If we encounter a run where n == ESCAPE, we represent this as:
 *   c ESCAPE n-1 c
 * The ESCAPE value is chosen so as not to collide with commonly
 * seen values.
 ','line_number':137,'multiline':True]['text':'*
 * Construct a string representing a byte array.  Use run-length encoding.
 * Two bytes are packed into a single char, with a single extra zero byte at
 * the end if needed.  A byte represents itself, unless it is the
 * ESCAPE_BYTE.  Then the following notations are possible:
 *   ESCAPE_BYTE ESCAPE_BYTE   ESCAPE_BYTE literal
 *   ESCAPE_BYTE n b           n instances of byte b
 * Since an encoded run occupies 3 bytes, we only encode runs of 4 or
 * more bytes.  Thus we have n > 0 and n != ESCAPE_BYTE and n <= 0xFF.
 * If we encounter a run where n == ESCAPE_BYTE, we represent this as:
 *   b ESCAPE_BYTE n-1 b
 * The ESCAPE_BYTE value is chosen so as not to collide with commonly
 * seen values.
 ','line_number':182,'multiline':True]['text':' We must save the final byte, if there is one, by padding
             * an extra zero.
             ','line_number':222,'multiline':True]['text':'*
 * Construct an array of shorts from a run-length encoded string.
 ','line_number':238,'multiline':True]['text':' the source is null terminated ','line_number':250,'multiline':True]['text':'*
 * Construct an array of bytes from a run-length encoded string.
 ','line_number':294,'multiline':True]['text':' the source is null terminated ','line_number':311,'multiline':True]['text':' This part of the loop places the next byte into the local
        * variable 'b' each time through the loop.  It keeps the
        * current character in 'c' and uses the boolean 'nextChar'
        * to see if we've taken both bytes out of 'c' yet.
        ','line_number':329,'multiline':True]['text':' This part of the loop is a tiny state machine which handles
        * the parsing of the run-length encoding.  This would be simpler
        * if we could look ahead, but we can't, so we use 'node' to
        * move between three nodes in the state machine.
        ','line_number':345,'multiline':True]['text':' Normal idle node ','line_number':352,'multiline':True]['text':' We have seen one ESCAPE_BYTE; we expect either a second
            * one, or a run length and value.
            ','line_number':361,'multiline':True]['text':' We have seen an ESCAPE_BYTE and length byte.  We interpret
                * the next byte as the value to be repeated.
                ','line_number':376,'multiline':True]['text':'("Bad run-length encoded byte array")','line_number':395,'multiline':True]['text':'("Excess data in RLE byte array string");','line_number':401,'multiline':True]