['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' First id is 1.','line_number':29,'multiline':False]['text':' Instructions with safepoints must be in linear order.','line_number':45,'multiline':False]['text':' Count the number of LPhis we'll need.','line_number':74,'multiline':False]['text':' Allocate space for the LPhis.','line_number':91,'multiline':False]['text':' For each MIR phi, set up LIR phis as appropriate. We'll fill in their','line_number':96,'multiline':False]['text':' operands on each incoming edge, and set their definitions at the start of','line_number':97,'multiline':False]['text':' their defining block.','line_number':98,'multiline':False]['text':' de-virtualise MResumePoint::getOperand calls.','line_number':207,'multiline':False]['text':' As there is no cycle in the data-flow (without MPhi), checking for','line_number':213,'multiline':False]['text':' isInWorkList implies that the definition is already in the','line_number':214,'multiline':False]['text':' instruction vector, and not processed by a caller of the current','line_number':215,'multiline':False]['text':' function.','line_number':216,'multiline':False]['text':' Stores should be recovered first.','line_number':246,'multiline':False]['text':' Before exiting this function, remove temporary flags from all definitions','line_number':266,'multiline':False]['text':' added in the vector.','line_number':267,'multiline':False]['text':' Sort operations in the order in which we need to restore the stack. This','line_number':277,'multiline':False]['text':' implies that outer frames, as well as operations needed to recover the','line_number':278,'multiline':False]['text':' current frame, are located before the current frame. The inner-most','line_number':279,'multiline':False]['text':' resume point should be the last element in the list.','line_number':280,'multiline':False]['text':' Mark any operands to this snapshot with the same value as input as being','line_number':316,'multiline':False]['text':' equal to the instruction's result.','line_number':317,'multiline':False]['text':' Check that SIMD moves are aligned according to ABI requirements.','line_number':642,'multiline':False]['text':' clang-format off','line_number':643,'multiline':False]['text':' Alignment is not currently required for SIMD on x86/x64/arm64.  See also','line_number':645,'multiline':False]['text':' CodeGeneratorShared::CodeGeneratorShared and in general everywhere','line_number':646,'multiline':False]['text':' SimdMemoryAignment is used.  Likely, alignment requirements will return.','line_number':647,'multiline':False]['text':' No need for any check on x86/x64/arm64.','line_number':650,'multiline':False]['text':' The following code may be of use if we need alignment checks on','line_number':653,'multiline':False]['text':' some future target.','line_number':654,'multiline':False]['text':'if (LDefinition(type).type() == LDefinition::SIMD128) {','line_number':655,'multiline':False]['text':'  MOZ_ASSERT(from.isMemory() || from.isFloatReg());','line_number':656,'multiline':False]['text':'  if (from.isMemory()) {','line_number':657,'multiline':False]['text':'    if (from.isArgument()) {','line_number':658,'multiline':False]['text':'      MOZ_ASSERT(from.toArgument()->index() % SimdMemoryAlignment == 0);','line_number':659,'multiline':False]['text':'    } else {','line_number':660,'multiline':False]['text':'      MOZ_ASSERT(from.toStackSlot()->slot() % SimdMemoryAlignment == 0);','line_number':661,'multiline':False]['text':'    }','line_number':662,'multiline':False]['text':'  }','line_number':663,'multiline':False]['text':'  MOZ_ASSERT(to.isMemory() || to.isFloatReg());','line_number':664,'multiline':False]['text':'  if (to.isMemory()) {','line_number':665,'multiline':False]['text':'    if (to.isArgument()) {','line_number':666,'multiline':False]['text':'      MOZ_ASSERT(to.toArgument()->index() % SimdMemoryAlignment == 0);','line_number':667,'multiline':False]['text':'    } else {','line_number':668,'multiline':False]['text':'      MOZ_ASSERT(to.toStackSlot()->slot() % SimdMemoryAlignment == 0);','line_number':669,'multiline':False]['text':'    }','line_number':670,'multiline':False]['text':'  }','line_number':671,'multiline':False]['text':'}','line_number':672,'multiline':False]['text':' clang-format on','line_number':675,'multiline':False]['text':' Transform the operands to this move so that performing the result','line_number':683,'multiline':False]['text':' simultaneously with existing moves in the group will have the same','line_number':684,'multiline':False]['text':' effect as if the original move took place after the existing moves.','line_number':685,'multiline':False]