['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Generic structures and functions for use by register allocators.','line_number':16,'multiline':False]['text':' Structure for running a liveness analysis on a finished register allocation.','line_number':24,'multiline':False]['text':' This analysis can be used for two purposes:','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' - Check the integrity of the allocation, i.e. that the reads and writes of','line_number':27,'multiline':False]['text':'   physical values preserve the semantics of the original virtual registers.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' - Populate safepoints with live registers, GC thing and value data, to','line_number':30,'multiline':False]['text':'   streamline the process of prototyping new allocators.','line_number':31,'multiline':False]['text':' Record all virtual registers in the graph. This must be called before','line_number':35,'multiline':False]['text':' register allocation, to pick up the original LUses.','line_number':36,'multiline':False]['text':' Perform the liveness analysis on the graph, and assert on an invalid','line_number':39,'multiline':False]['text':' allocation. This must be called after register allocation, to pick up','line_number':40,'multiline':False]['text':' all assigned physical values.','line_number':41,'multiline':False]['text':' For all instructions and phis in the graph, keep track of the virtual','line_number':47,'multiline':False]['text':' registers for all inputs and outputs of the nodes. These are overwritten','line_number':48,'multiline':False]['text':' in place during register allocation. This information is kept on the','line_number':49,'multiline':False]['text':' side rather than in the instructions and phis themselves to avoid','line_number':50,'multiline':False]['text':' debug-builds-only bloat in the size of the involved structures.','line_number':51,'multiline':False]['text':' Describes a correspondence that should hold at the end of a block.','line_number':84,'multiline':False]['text':' The value which was written to vreg in the original LIR should be','line_number':85,'multiline':False]['text':' physically stored in alloc after the register allocation.','line_number':86,'multiline':False]['text':' Order of insertion into seen, for sorting.','line_number':92,'multiline':False]['text':' Items still to be processed.','line_number':108,'multiline':False]['text':' Set of all items that have already been processed.','line_number':111,'multiline':False]['text':' DEBUG','line_number':125,'multiline':False]['text':' Represents with better-than-instruction precision a position in the','line_number':127,'multiline':False]['text':' instruction stream.','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' An issue comes up when performing register allocation as to how to represent','line_number':130,'multiline':False]['text':' information such as "this register is only needed for the input of','line_number':131,'multiline':False]['text':' this instruction, it can be clobbered in the output". Just having ranges','line_number':132,'multiline':False]['text':' of instruction IDs is insufficiently expressive to denote all possibilities.','line_number':133,'multiline':False]['text':' This class solves this issue by associating an extra bit with the instruction','line_number':134,'multiline':False]['text':' ID which indicates whether the position is the input half or output half of','line_number':135,'multiline':False]['text':' an instruction.','line_number':136,'multiline':False]['text':' This is the half of the instruction this code position represents, as','line_number':149,'multiline':False]['text':' described in the huge comment above.','line_number':150,'multiline':False]['text':' Structure to track all moves inserted next to instructions in a graph.','line_number':194,'multiline':False]['text':' Common superclass for register allocators.','line_number':226,'multiline':False]['text':' Context','line_number':232,'multiline':False]['text':' Pool of all registers that should be considered allocateable','line_number':237,'multiline':False]['text':' Computed data','line_number':240,'multiline':False]['text':' All phis in a block write their outputs after all of them have','line_number':263,'multiline':False]['text':' read their inputs. Consequently, it doesn't make sense to talk','line_number':264,'multiline':False]['text':' about code positions in the middle of a series of phis.','line_number':265,'multiline':False]['text':' All phis in a block read their inputs before any of them write their','line_number':277,'multiline':False]['text':' outputs. Consequently, it doesn't make sense to talk about code','line_number':278,'multiline':False]['text':' positions in the middle of a series of phis.','line_number':279,'multiline':False]['text':' Compute the shortest interval that captures vregs defined by ins.','line_number':297,'multiline':False]['text':' Watch for instructions that are followed by an OSI point.','line_number':298,'multiline':False]['text':' If moves are introduced between the instruction and the OSI point then','line_number':299,'multiline':False]['text':' safepoint information for the instruction may be incorrect.','line_number':300,'multiline':False]['text':' namespace jit','line_number':333,'multiline':False]['text':' namespace js','line_number':334,'multiline':False]['text':' jit_RegisterAllocator_h ','line_number':336,'multiline':True]