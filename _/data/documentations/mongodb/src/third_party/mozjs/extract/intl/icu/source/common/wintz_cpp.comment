['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
********************************************************************************
*   Copyright (C) 2005-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
********************************************************************************
*
* File WINTZ.CPP
*
********************************************************************************
','line_number':3,'multiline':True]['text':' Note these constants and the struct are only used when dealing with the fallback path for RDP sesssions.','line_number':39,'multiline':False]['text':' This is the location of the time zones in the registry on Vista+ systems.','line_number':41,'multiline':False]['text':' See: https://docs.microsoft.com/windows/win32/api/timezoneapi/ns-timezoneapi-dynamic_time_zone_information','line_number':42,'multiline':False]['text':' Max length for a registry key is 255. +1 for null.','line_number':45,'multiline':False]['text':' See: https://docs.microsoft.com/windows/win32/sysinfo/registry-element-size-limits','line_number':46,'multiline':False]['text':' This is the layout of the TZI binary value in the registry.','line_number':51,'multiline':False]['text':' See: https://docs.microsoft.com/windows/win32/api/timezoneapi/ns-timezoneapi-time_zone_information','line_number':52,'multiline':False]['text':' U_PLATFORM_HAS_WINUWP_API','line_number':61,'multiline':False]['text':'*
* This is main Windows time zone detection function.
* 
* It returns the Windows time zone converted to an ICU time zone as a heap-allocated buffer, or nullptr upon failure.
*
* We use the Win32 API GetDynamicTimeZoneInformation (which is available since Vista) to get the current time zone info,
* as this API returns a non-localized time zone name which can be then mapped to an ICU time zone.
* 
* However, in some RDP/terminal services situations, this struct isn't always fully complete, and the TimeZoneKeyName
* field of the struct might be NULL. This can happen with some 3rd party RDP clients, and also when using older versions
* of the RDP protocol, which don't send the newer TimeZoneKeyNamei information and only send the StandardName and DaylightName.
* 
* Since these 3rd party clients and older RDP clients only send the pre-Vista time zone information to the server, this means that we 
* need to fallback on using the pre-Vista methods to determine the time zone. This unfortunately requires examining the registry directly
* in order to try and determine the current time zone.
* 
* Note that this can however still fail in some cases though if the client and server are using different languages, as the StandardName
* that is sent by client is localized in the client's language. However, we must compare this to the names that are on the server, which
* are localized in registry using the server's language. Despite that, this is the best we can do.
* 
* Note: This fallback method won't work for the UWP version though, as we can't use the registry APIs in UWP.
* 
* Once we have the current Windows time zone, then we can then map it to an ICU time zone ID (~ Olsen ID).
','line_number':63,'multiline':True]['text':' We first try to obtain the time zone directly by using the TimeZoneKeyName field of the DYNAMIC_TIME_ZONE_INFORMATION struct.','line_number':90,'multiline':False]['text':' If the DST setting has been turned off in the Control Panel, then return "Etc/GMT<offset>".','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Note: This logic is based on how the Control Panel itself determines if DST is 'off' on Windows.','line_number':102,'multiline':False]['text':' The code is somewhat convoluted; in a sort of pseudo-code it looks like this:','line_number':103,'multiline':False]['text':' ','line_number':104,'multiline':False]['text':'   IF (GetDynamicTimeZoneInformation != TIME_ZONE_ID_INVALID) && (DynamicDaylightTimeDisabled != 0) &&','line_number':105,'multiline':False]['text':'      (StandardDate == DaylightDate) &&','line_number':106,'multiline':False]['text':'      (','line_number':107,'multiline':False]['text':'       (TimeZoneKeyName != Empty && StandardDate == 0) ||','line_number':108,'multiline':False]['text':'       (TimeZoneKeyName == Empty && StandardDate != 0)','line_number':109,'multiline':False]['text':'      )','line_number':110,'multiline':False]['text':'   THEN','line_number':111,'multiline':False]['text':'     DST setting is "Disabled".','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':' No way to support when DST is turned off and the offset in minutes is not a multiple of 60.','line_number':124,'multiline':False]['text':' "Etc/GMT+dd" is 11-char long with a terminal null.','line_number':126,'multiline':False]['text':' Important note on the sign convention for zones:','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' From https://en.wikipedia.org/wiki/Tz_database#Area','line_number':129,'multiline':False]['text':'   "In order to conform with the POSIX style, those zone names beginning with "Etc/GMT" have their sign reversed','line_number':130,'multiline':False]['text':'   from the standard ISO 8601 convention. In the "Etc" area, zones west of GMT have a positive sign and those','line_number':131,'multiline':False]['text':'   east have a negative sign in their name (e.g "Etc/GMT-14" is 14 hours ahead of GMT)."','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':' Regarding the POSIX style, from https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html','line_number':134,'multiline':False]['text':'   "The offset specifies the time value you must add to the local time to get a Coordinated Universal Time value."','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':' However, the Bias value in DYNAMIC_TIME_ZONE_INFORMATION *already* follows the POSIX convention.','line_number':137,'multiline':False]['text':' ','line_number':138,'multiline':False]['text':' From https://docs.microsoft.com/en-us/windows/win32/api/timezoneapi/ns-timezoneapi-dynamic_time_zone_information','line_number':139,'multiline':False]['text':'   "The bias is the difference, in minutes, between Coordinated Universal Time (UTC) and','line_number':140,'multiline':False]['text':'   local time. All translations between UTC and local time are based on the following formula:','line_number':141,'multiline':False]['text':'      UTC = local time + bias"','line_number':142,'multiline':False]['text':'','line_number':143,'multiline':False]['text':' For example, a time zone that is 3 hours ahead of UTC (UTC+03:00) would have a Bias value of -180, and the','line_number':144,'multiline':False]['text':' corresponding time zone ID would be "Etc/GMT-3". (So there is no need to negate utcOffsetMins below.)','line_number':145,'multiline':False]['text':' If DST is NOT disabled, but the TimeZoneKeyName field of the struct is NULL, then we may be dealing with a','line_number':153,'multiline':False]['text':' RDP/terminal services session where the 'Time Zone Redirection' feature is enabled. However, either the RDP','line_number':154,'multiline':False]['text':' client sent the server incomplete info (some 3rd party RDP clients only send the StandardName and  DaylightName,','line_number':155,'multiline':False]['text':' but do not send the important TimeZoneKeyName), or if the RDP server has not appropriately populated the struct correctly.','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' In this case we unfortunately have no choice but to fallback to using the pre-Vista method of determining the','line_number':158,'multiline':False]['text':' time zone, which requires examining the registry directly.','line_number':159,'multiline':False]['text':'','line_number':160,'multiline':False]['text':' Note that this can however still fail though if the client and server are using different languages, as the StandardName','line_number':161,'multiline':False]['text':' that is sent by client is *localized* in the client's language. However, we must compare this to the names that are','line_number':162,'multiline':False]['text':' on the server, which are *localized* in registry using the server's language.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' One other note is that this fallback method doesn't work for the UWP version, as we can't use the registry APIs.','line_number':165,'multiline':False]['text':' windowsTimeZoneName will point at timezoneSubKeyName if we had to fallback to using the registry, and we found a match.','line_number':167,'multiline':False]['text':' We can't use the registry APIs in the UWP version.','line_number':173,'multiline':False]['text':' suppress unused variable warnings.','line_number':175,'multiline':False]['text':' Open the path to the time zones in the Windows registry.','line_number':178,'multiline':False]['text':' If we can't open the key, then we can't do much, so fail.','line_number':185,'multiline':False]['text':' Read the number of subkeys under the time zone registry path.','line_number':189,'multiline':False]['text':' Examine each of the subkeys to try and find a match for the localized standard name ("Std").','line_number':199,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' Note: The name of the time zone subkey itself is not localized, but the "Std" name is localized. This means','line_number':201,'multiline':False]['text':' that we could fail to find a match if the RDP client and RDP server are using different languages, but unfortunately','line_number':202,'multiline':False]['text':' there isn't much we can do about it.','line_number':203,'multiline':False]['text':' Note: RegEnumKeyExW wants the size of the buffer in characters.','line_number':209,'multiline':False]['text':' Note: RegQueryValueExW wants the size of the buffer in bytes.','line_number':226,'multiline':False]['text':' Note: wcscmp does an ordinal (byte) comparison.','line_number':237,'multiline':False]['text':' Since we are comparing the *localized* time zone name, it's possible that some languages might use','line_number':239,'multiline':False]['text':' the same string for more than one time zone. Thus we need to examine the TZI data in the registry to','line_number':240,'multiline':False]['text':' compare the GMT offset (the bias), and the DST transition dates, to ensure it's the same time zone','line_number':241,'multiline':False]['text':' as the currently reported one.','line_number':242,'multiline':False]['text':' Note: RegQueryValueExW wants the size of the buffer in bytes.','line_number':246,'multiline':False]['text':' We found a matching time zone.','line_number':256,'multiline':False]['text':' U_PLATFORM_HAS_WINUWP_API','line_number':272,'multiline':False]['text':' Map Windows Timezone name (non-localized) to ICU timezone ID (~ Olson timezone id).','line_number':279,'multiline':False]['text':' Note: Since the ISO 3166 country/region codes are all invariant ASCII chars, we can','line_number':289,'multiline':False]['text':' directly downcast from wchar_t to do the conversion.','line_number':290,'multiline':False]['text':' We could call the A version of the GetGeoInfo API, but that would be slightly slower than calling the W API,','line_number':291,'multiline':False]['text':' as the A version of the API will end up calling MultiByteToWideChar anyways internally.','line_number':292,'multiline':False]['text':' 2 letter ISO 3166 country/region code made entirely of invariant chars.','line_number':294,'multiline':False]['text':' fallback to default "001" (world)','line_number':308,'multiline':False]['text':' Note: We want the first entry in the string returned by ures_getStringByKey.','line_number':313,'multiline':False]['text':' However this string can be a space delimited list of timezones:','line_number':314,'multiline':False]['text':'  Ex: "America/New_York America/Detroit America/Indiana/Petersburg ..."','line_number':315,'multiline':False]['text':' We need to stop at the first space, so we pass tzLen (instead of tzListLen) to appendInvariantChars below.','line_number':316,'multiline':False]['text':' Note: cloneData returns nullptr if the status is a failure, so this','line_number':324,'multiline':False]['text':' will return nullptr if the above look-up fails.','line_number':325,'multiline':False]['text':' U_PLATFORM_USES_ONLY_WIN32_API  ','line_number':331,'multiline':True]