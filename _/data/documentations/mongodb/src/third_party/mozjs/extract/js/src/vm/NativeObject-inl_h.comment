['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':20,'multiline':False]['text':' Mark non-packed if we're copying holes or if there are too many elements','line_number':128,'multiline':False]['text':' to check this efficiently.','line_number':129,'multiline':False]['text':' This method populates the elements of a particular Array that's an','line_number':166,'multiline':False]['text':' internal implementation detail of GeneratorObject. Failing any of the','line_number':167,'multiline':False]['text':' following means the Array has escaped and/or been mistreated.','line_number':168,'multiline':False]['text':'
   * Using memmove here would skip write barriers. Also, we need to consider
   * an array containing [A, B, C], in the following situation:
   *
   * 1. Incremental GC marks slot 0 of array (i.e., A), then returns to JS code.
   * 2. JS code moves slots 1..2 into slots 0..1, so it contains [B, C, C].
   * 3. Incremental GC finishes by marking slots 1 and 2 (i.e., C).
   *
   * Since normal marking never happens on B, it is very important that the
   * write barrier is invoked here on B, despite the fact that it exists in
   * the array before and after the move.
   ','line_number':244,'multiline':True]['text':' Ensure that the array's contents have been initialized up to index, and','line_number':303,'multiline':False]['text':' mark the elements through 'index + extra' as initialized in preparation','line_number':304,'multiline':False]['text':' for a write.','line_number':305,'multiline':False]['text':'
   * Don't grow elements for objects which already have sparse indexes.
   * This avoids needing to count non-hole elements in willBeSparseElements
   * every time a new index is added.
   ','line_number':338,'multiline':True]['text':'
   * We use the extra argument also as a hint about number of non-hole
   * elements to be inserted.
   ','line_number':347,'multiline':True]['text':' Optimize for the common case. ','line_number':371,'multiline':True]['text':' Overflow. ','line_number':378,'multiline':True]['text':' Overflow. ','line_number':384,'multiline':True]['text':' static ','line_number':432,'multiline':True]['text':' = nullptr ','line_number':434,'multiline':True]['text':' NOTE: Dynamic slots are created internally by Allocate<JSObject>.','line_number':452,'multiline':False]['text':' Trigger write barriers on the old slots before reallocating. ','line_number':497,'multiline':True]['text':'
 * Call obj's resolve hook.
 *
 * cx and id are the parameters initially passed to the ongoing lookup;
 * propp and recursedp are its out parameters.
 *
 * There are four possible outcomes:
 *
 *  - On failure, report an error or exception and return false.
 *
 *  - If we are already resolving a property of obj, call setRecursiveResolve on
 *    propp and return true.
 *
 *  - If the resolve hook finds or defines the sought property, set propp
 *    appropriately, and return true.
 *
 *  - Otherwise no property was resolved. Set propp to NotFound and return true.
 ','line_number':603,'multiline':True]['text':' Avoid recursion on (obj, id) already being resolved on cx.','line_number':626,'multiline':False]['text':' Already resolving id in obj, suppress recursion.','line_number':629,'multiline':False]['text':' Assert the mayResolve hook, if there is one, returns true for this','line_number':645,'multiline':False]['text':' property.','line_number':646,'multiline':False]['text':' Native objects should should avoid `lookupProperty` hooks, and those that','line_number':681,'multiline':False]['text':' use them should avoid recursively triggering lookup, and those that still','line_number':682,'multiline':False]['text':' violate this guidance are the ModuleEnvironmentObject.','line_number':683,'multiline':False]['text':' Check for a native dense element.','line_number':687,'multiline':False]['text':' Check for a typed array element. Integer lookups always finish here','line_number':696,'multiline':False]['text':' so that integer properties on the prototype are ignored even for out','line_number':697,'multiline':False]['text':' of bounds accesses.','line_number':698,'multiline':False]['text':' Check for a native property. Call Shape::lookup directly (instead of','line_number':721,'multiline':False]['text':' NativeObject::lookup) because it's inlined.','line_number':722,'multiline':False]['text':' Some callers explicitily want us to ignore the resolve hook entirely. In','line_number':729,'multiline':False]['text':' that case, we report the property as NotFound.','line_number':730,'multiline':False]['text':' JITs in particular use the `mayResolve` hook to determine a JSClass can','line_number':736,'multiline':False]['text':' never resolve this property name (for all instances of the class).','line_number':737,'multiline':False]['text':' If there is no resolve hook, the property definitely does not exist.','line_number':748,'multiline':False]['text':'
 * Simplified version of NativeLookupOwnPropertyInline that doesn't call
 * resolve hooks.
 ','line_number':761,'multiline':True]['text':' Search scopes starting with obj and following the prototype link. ','line_number':780,'multiline':True]['text':' If a `lookupProperty` hook exists, recurse into LookupProperty, otherwise','line_number':803,'multiline':False]['text':' we can simply loop within this call frame.','line_number':804,'multiline':False]['text':' Assert correctness of the NON_PACKED flag by checking the first few','line_number':848,'multiline':False]['text':' elements don't contain holes.','line_number':849,'multiline':False]['text':' namespace js','line_number':877,'multiline':False]['text':' vm_NativeObject_inl_h ','line_number':879,'multiline':True]