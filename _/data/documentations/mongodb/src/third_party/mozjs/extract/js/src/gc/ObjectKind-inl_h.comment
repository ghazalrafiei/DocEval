['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * GC-internal helper functions for getting the AllocKind used to allocate a
 * JSObject and related information.
 ','line_number':7,'multiline':True]['text':' Capacity for slotsToThingKind ','line_number':21,'multiline':True]['text':' Get the best kind to use when making an object with the given slot count. ','line_number':26,'multiline':True]['text':' As for GetGCObjectKind, but for dense array allocation. ','line_number':57,'multiline':True]['text':'
   * Dense arrays can use their fixed slots to hold their elements array
   * (less two Values worth of ObjectElements header), but if more than the
   * maximum number of fixed slots is needed then the fixed slots will be
   * unused.
   ','line_number':59,'multiline':True]['text':' Get the best kind to use when allocating an object that needs a specific','line_number':77,'multiline':False]['text':' number of bytes.','line_number':78,'multiline':False]['text':' Get the number of fixed slots and initial capacity associated with a kind. ','line_number':92,'multiline':True]['text':' Using a switch in hopes that thingKind will usually be a compile-time','line_number':94,'multiline':False]['text':' constant.','line_number':95,'multiline':False]['text':' An object's private data uses the space taken by its last fixed slot. ','line_number':125,'multiline':True]['text':'
   * Functions have a larger alloc kind than AllocKind::OBJECT to reserve
   * space for the extra fields in JSFunction, but have no fixed slots.
   ','line_number':131,'multiline':True]['text':' If a foreground alloc kind is specified but the class has no finalizer or a','line_number':148,'multiline':False]['text':' finalizer that is safe to call on a different thread, we can change the','line_number':149,'multiline':False]['text':' alloc kind to one which is finalized on a background thread.','line_number':150,'multiline':False]['text':'','line_number':151,'multiline':False]['text':' For example, AllocKind::OBJECT0 calls the finalizer on the main thread, and','line_number':152,'multiline':False]['text':' AllocKind::OBJECT0_BACKGROUND calls the finalizer on the a helper thread.','line_number':153,'multiline':False]['text':' This kind is already a background finalized kind.','line_number':158,'multiline':False]['text':' For objects, each background alloc kind is defined just after the','line_number':168,'multiline':False]['text':' corresponding foreground alloc kind so we can convert between them by','line_number':169,'multiline':False]['text':' incrementing or decrementing as appropriate.','line_number':170,'multiline':False]['text':' namespace gc','line_number':180,'multiline':False]['text':' namespace js','line_number':181,'multiline':False]['text':' gc_ObjectKind_inl_h','line_number':183,'multiline':False]