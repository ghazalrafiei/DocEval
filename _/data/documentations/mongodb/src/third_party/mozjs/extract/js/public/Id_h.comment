['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' [SMDOC] Property Key / JSID','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' A jsid is an identifier for a property or method of an object which is','line_number':12,'multiline':False]['text':' either a 31-bit unsigned integer, interned string or symbol.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' Also, there is an additional jsid value, JSID_VOID, which does not occur in','line_number':15,'multiline':False]['text':' JS scripts but may be used to indicate the absence of a valid jsid.  A void','line_number':16,'multiline':False]['text':' jsid is not a valid id and only arises as an exceptional API return value,','line_number':17,'multiline':False]['text':' such as in JS_NextProperty. Embeddings must not pass JSID_VOID into JSAPI','line_number':18,'multiline':False]['text':' entry points expecting a jsid and do not need to handle JSID_VOID in hooks','line_number':19,'multiline':False]['text':' receiving a jsid except when explicitly noted in the API contract.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' A jsid is not implicitly convertible to or from a Value; JS_ValueToId or','line_number':22,'multiline':False]['text':' JS_IdToValue must be used instead.','line_number':23,'multiline':False]['text':' All jsids with the low bit set are integer ids. This means the other type','line_number':36,'multiline':False]['text':' tags must all be even.','line_number':37,'multiline':False]['text':' Use 0 for JSID_TYPE_STRING to avoid a bitwise op for atom <-> id conversions.','line_number':40,'multiline':False]['text':' (0x6 is unused)','line_number':44,'multiline':False]['text':' Use XOR instead of `& ~JSID_TYPE_MASK` because small immediates can be','line_number':93,'multiline':False]['text':' encoded more efficiently on some platorms.','line_number':94,'multiline':False]['text':' This API can be used by embedders to convert pinned (aka interned) strings,','line_number':121,'multiline':False]['text':' as created by JS_AtomizeAndPinJSString, into PropertyKeys.','line_number':122,'multiline':False]['text':' This means the string does not have to be explicitly rooted.','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':' Only use this API when absolutely necessary, otherwise use JS_StringToId.','line_number':125,'multiline':False]['text':' Must not be used on atoms that are representable as integer PropertyKey.','line_number':128,'multiline':False]['text':' Prefer NameToId or AtomToId over this function:','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':' A PropertyName is an atom that does not contain an integer in the range','line_number':131,'multiline':False]['text':' [0, UINT32_MAX]. However, PropertyKey can only hold an integer in the range','line_number':132,'multiline':False]['text':' [0, JSID_INT_MAX] (where JSID_INT_MAX == 2^31-1).  Thus, for the range of','line_number':133,'multiline':False]['text':' integers (JSID_INT_MAX, UINT32_MAX], to represent as a 'id', it must be','line_number':134,'multiline':False]['text':' the case id.isString() and id.toString()->isIndex(). In most','line_number':135,'multiline':False]['text':' cases when creating a PropertyKey, code does not have to care about','line_number':136,'multiline':False]['text':' this corner case because:','line_number':137,'multiline':False]['text':'','line_number':138,'multiline':False]['text':' - When given an arbitrary JSAtom*, AtomToId must be used, which checks for','line_number':139,'multiline':False]['text':'   integer atoms representable as integer PropertyKey, and does this','line_number':140,'multiline':False]['text':'   conversion.','line_number':141,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' - When given a PropertyName*, NameToId can be used which does not need','line_number':143,'multiline':False]['text':'   to do any dynamic checks.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' Thus, it is only the rare third case which needs this function, which','line_number':146,'multiline':False]['text':' handles any JSAtom* that is known not to be representable with an int','line_number':147,'multiline':False]['text':' PropertyKey.','line_number':148,'multiline':False]['text':' The JSAtom/JSString type exposed to embedders is opaque.','line_number':155,'multiline':False]['text':' Internal API!','line_number':162,'multiline':False]['text':' All string PropertyKeys are actually atomized.','line_number':163,'multiline':False]['text':' namespace JS','line_number':178,'multiline':False]['text':' It's not safe to trace unbarriered pointers except as part of root','line_number':229,'multiline':False]['text':' marking.','line_number':230,'multiline':False]['text':' namespace JS','line_number':253,'multiline':False]['text':' If the jsid is a GC pointer type, convert to that type and call |f| with the','line_number':276,'multiline':False]['text':' pointer and return the result wrapped in a Maybe, otherwise return None().','line_number':277,'multiline':False]['text':' If the jsid is a GC pointer type, convert to that type and call |f| with the','line_number':291,'multiline':False]['text':' pointer. Return whether this happened.','line_number':292,'multiline':False]['text':' Internal API','line_number':326,'multiline':False]['text':' namespace js','line_number':332,'multiline':False]['text':' js_Id_h ','line_number':334,'multiline':True]