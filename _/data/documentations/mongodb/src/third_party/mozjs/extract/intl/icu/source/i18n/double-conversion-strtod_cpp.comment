['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' From the double-conversion library. Original license:','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Copyright 2010 the V8 project authors. All rights reserved.','line_number':6,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':7,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':8,'multiline':False]['text':' met:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':11,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':12,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':13,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':14,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':15,'multiline':False]['text':'       with the distribution.','line_number':16,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':17,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':18,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':21,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':23,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':24,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':25,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':26,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':27,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':28,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':29,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':30,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':31,'multiline':False]['text':' ICU PATCH: ifdef around UCONFIG_NO_FORMATTING','line_number':33,'multiline':False]['text':' ICU PATCH: Customize header file paths for ICU.','line_number':40,'multiline':False]['text':' ICU PATCH: Wrap in ICU namespace','line_number':47,'multiline':False]['text':' 2^53 = 9007199254740992.','line_number':53,'multiline':False]['text':' Any integer with at most 15 decimal digits will hence fit into a double','line_number':54,'multiline':False]['text':' (which has a 53bit significand) without loss of precision.','line_number':55,'multiline':False]['text':' #if defined(DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS)','line_number':57,'multiline':False]['text':' 2^64 = 18446744073709551616 > 10^19','line_number':58,'multiline':False]['text':' Max double: 1.7976931348623157 x 10^308','line_number':61,'multiline':False]['text':' Min non-zero double: 4.9406564584124654 x 10^-324','line_number':62,'multiline':False]['text':' Any x >= 10^309 is interpreted as +infinity.','line_number':63,'multiline':False]['text':' Any x <= 10^-324 is interpreted as 0.','line_number':64,'multiline':False]['text':' Note that 2.5e-324 (despite being smaller than the min double) will be read','line_number':65,'multiline':False]['text':' as non-zero (equal to the min non-zero double).','line_number':66,'multiline':False]['text':' 2^64 = 18446744073709551616','line_number':70,'multiline':False]['text':' 10^0','line_number':76,'multiline':False]['text':' 10^10','line_number':86,'multiline':False]['text':' 10^20','line_number':96,'multiline':False]['text':' 10^22 = 0x21e19e0c9bab2400000 = 0x878678326eac9 * 2^22','line_number':98,'multiline':False]['text':' #if defined(DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS)','line_number':102,'multiline':False]['text':' Maximum number of significant digits in the decimal representation.','line_number':104,'multiline':False]['text':' In fact the value is 772 (see conversions.cc), but to give us some margin','line_number':105,'multiline':False]['text':' we round up to 780.','line_number':106,'multiline':False]['text':' The input buffer has been trimmed. Therefore the last digit must be','line_number':125,'multiline':False]['text':' different from '0'.','line_number':126,'multiline':False]['text':' Set the last digit to be non-zero. This is sufficient to guarantee','line_number':128,'multiline':False]['text':' correct rounding.','line_number':129,'multiline':False]['text':' Trims the buffer and cuts it to at most kMaxSignificantDecimalDigits.','line_number':136,'multiline':False]['text':' If possible the input-buffer is reused, but if the buffer needs to be','line_number':137,'multiline':False]['text':' modified (due to cutting), then the input needs to be copied into the','line_number':138,'multiline':False]['text':' buffer_copy_space.','line_number':139,'multiline':False]['text':' Mark variable as used.','line_number':147,'multiline':False]['text':' Reads digits from the buffer and converts them to a uint64.','line_number':160,'multiline':False]['text':' Reads in as many digits as fit into a uint64.','line_number':161,'multiline':False]['text':' When the string starts with "1844674407370955161" no further digit is read.','line_number':162,'multiline':False]['text':' Since 2^64 = 18446744073709551616 it would still be possible read another','line_number':163,'multiline':False]['text':' digit if it was less or equal than 6, but this would complicate the code.','line_number':164,'multiline':False]['text':' Reads a DiyFp from the buffer.','line_number':179,'multiline':False]['text':' The returned DiyFp is not necessarily normalized.','line_number':180,'multiline':False]['text':' If remaining_decimals is zero then the returned DiyFp is accurate.','line_number':181,'multiline':False]['text':' Otherwise it has been rounded and has error of at most 1/2 ulp.','line_number':182,'multiline':False]['text':' Round the significand.','line_number':192,'multiline':False]['text':' Compute the binary exponent.','line_number':196,'multiline':False]['text':' Avoid "unused parameter" warnings','line_number':208,'multiline':False]['text':' On x86 the floating-point stack can be 64 or 80 bits wide. If it is','line_number':212,'multiline':False]['text':' 80 bits wide (as is the case on Linux) then double-rounding occurs and the','line_number':213,'multiline':False]['text':' result is not accurate.','line_number':214,'multiline':False]['text':' We know that Windows32 uses 64 bits and is therefore accurate.','line_number':215,'multiline':False]['text':' The trimmed input fits into a double.','line_number':220,'multiline':False]['text':' If the 10^exponent (resp. 10^-exponent) fits into a double too then we','line_number':221,'multiline':False]['text':' can compute the result-double simply by multiplying (resp. dividing) the','line_number':222,'multiline':False]['text':' two numbers.','line_number':223,'multiline':False]['text':' This is possible because IEEE guarantees that floating-point operations','line_number':224,'multiline':False]['text':' return the best possible approximation.','line_number':225,'multiline':False]['text':' 10^-exponent fits into a double.','line_number':227,'multiline':False]['text':' 10^exponent fits into a double.','line_number':234,'multiline':False]['text':' The trimmed string was short and we can multiply it with','line_number':244,'multiline':False]['text':' 10^remaining_digits. As a result the remaining exponent now fits','line_number':245,'multiline':False]['text':' into a double too.','line_number':246,'multiline':False]['text':' Returns 10^exponent as an exact DiyFp.','line_number':259,'multiline':False]['text':' The given exponent must be in the range [1; kDecimalExponentDistance[.','line_number':260,'multiline':False]['text':' Simply hardcode the remaining powers for the given decimal exponent','line_number':264,'multiline':False]['text':' distance.','line_number':265,'multiline':False]['text':' If the function returns true then the result is the correct double.','line_number':281,'multiline':False]['text':' Otherwise it is either the correct double or the double that is just below','line_number':282,'multiline':False]['text':' the correct double.','line_number':283,'multiline':False]['text':' Since we may have dropped some digits the input is not accurate.','line_number':290,'multiline':False]['text':' If remaining_decimals is different than 0 than the error is at most','line_number':291,'multiline':False]['text':' .5 ulp (unit in the last place).','line_number':292,'multiline':False]['text':' We don't want to deal with fractions and therefore keep a common','line_number':293,'multiline':False]['text':' denominator.','line_number':294,'multiline':False]['text':' Move the remaining decimals into the exponent.','line_number':297,'multiline':False]['text':' The product of input with the adjustment power fits into a 64 bit','line_number':321,'multiline':False]['text':' integer.','line_number':322,'multiline':False]['text':' The adjustment power is exact. There is hence only an error of 0.5.','line_number':325,'multiline':False]['text':' The error introduced by a multiplication of a*b equals','line_number':331,'multiline':False]['text':'   error_a + error_b + error_a*error_b/2^64 + 0.5','line_number':332,'multiline':False]['text':' Substituting a with 'input' and b with 'cached_power' we have','line_number':333,'multiline':False]['text':'   error_b = 0.5  (all cached powers have an error of less than 0.5 ulp),','line_number':334,'multiline':False]['text':'   error_ab = 0 or 1 / kDenominator > error_a*error_b/ 2^64','line_number':335,'multiline':False]['text':' We round up to 1.','line_number':337,'multiline':False]['text':' See if the double's significand changes if we add/subtract the error.','line_number':345,'multiline':False]['text':' This can only happen for very small denormals. In this case the','line_number':352,'multiline':False]['text':' half-way multiplied by the denominator exceeds the range of an uint64.','line_number':353,'multiline':False]['text':' Simply shift everything to the right.','line_number':354,'multiline':False]['text':' We add 1 for the lost precision of error, and kDenominator for','line_number':359,'multiline':False]['text':' the lost precision of input.f().','line_number':360,'multiline':False]['text':' We use uint64_ts now. This only works if the DiyFp uses uint64_ts too.','line_number':364,'multiline':False]['text':' If the last_bits are too close to the half-way case than we are too','line_number':378,'multiline':False]['text':' inaccurate and round down. In this case we return false so that we can','line_number':379,'multiline':False]['text':' fall back to a more precise algorithm.','line_number':380,'multiline':False]['text':' Too imprecise. The caller will have to fall back to a slower version.','line_number':384,'multiline':False]['text':' However the returned number is guaranteed to be either the correct','line_number':385,'multiline':False]['text':' double, or the next-lower double.','line_number':386,'multiline':False]['text':' Returns','line_number':394,'multiline':False]['text':'   - -1 if buffer*10^exponent < diy_fp.','line_number':395,'multiline':False]['text':'   -  0 if buffer*10^exponent == diy_fp.','line_number':396,'multiline':False]['text':'   - +1 if buffer*10^exponent > diy_fp.','line_number':397,'multiline':False]['text':' Preconditions:','line_number':398,'multiline':False]['text':'   buffer.length() + exponent <= kMaxDecimalPower + 1','line_number':399,'multiline':False]['text':'   buffer.length() + exponent > kMinDecimalPower','line_number':400,'multiline':False]['text':'   buffer.length() <= kMaxDecimalSignificantDigits','line_number':401,'multiline':False]['text':' Make sure that the Bignum will be able to hold all our numbers.','line_number':408,'multiline':False]['text':' Our Bignum implementation has a separate field for exponents. Shifts will','line_number':409,'multiline':False]['text':' consume at most one bigit (< 64 bits).','line_number':410,'multiline':False]['text':' ln(10) == 3.3219...','line_number':411,'multiline':False]['text':' Returns true if the guess is the correct double.','line_number':431,'multiline':False]['text':' Returns false, when guess is either correct or the next-lower double.','line_number':432,'multiline':False]['text':' needed for ICU only in debug mode','line_number':458,'multiline':False]['text':' needed for ICU only in debug mode','line_number':480,'multiline':False]['text':' Round towards even.','line_number':497,'multiline':False]['text':' ASAN has a sanitize check that disallows casting doubles to floats if','line_number':515,'multiline':False]['text':' they are too big.','line_number':516,'multiline':False]['text':' https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#available-checks','line_number':517,'multiline':False]['text':' The behavior should be covered by IEEE 754, but some projects use this','line_number':518,'multiline':False]['text':' flag, so work around it.','line_number':519,'multiline':False]['text':' The half-way point between the max-finite and infinity value.','line_number':521,'multiline':False]['text':' Since infinity has an even significand everything equal or greater than','line_number':522,'multiline':False]['text':' this value should become infinity.','line_number':523,'multiline':False]['text':' This shortcut triggers for integer values.','line_number':556,'multiline':False]['text':' We must catch double-rounding. Say the double has been rounded up, and is','line_number':560,'multiline':False]['text':' now a boundary of a float, and rounds up again. This is why we have to','line_number':561,'multiline':False]['text':' look at previous too.','line_number':562,'multiline':False]['text':' Example (in decimal numbers):','line_number':563,'multiline':False]['text':'    input: 12349','line_number':564,'multiline':False]['text':'    high-precision (4 digits): 1235','line_number':565,'multiline':False]['text':'    low-precision (3 digits):','line_number':566,'multiline':False]['text':'       when read from input: 123','line_number':567,'multiline':False]['text':'       when rounded from high precision: 124.','line_number':568,'multiline':False]['text':' To do this we simply look at the neigbors of the correct result and see','line_number':569,'multiline':False]['text':' if they would round to the same float. If the guess is not correct we have','line_number':570,'multiline':False]['text':' to look at four values (since two different doubles could be the correct','line_number':571,'multiline':False]['text':' double).','line_number':572,'multiline':False]['text':' Mark variable as used.','line_number':587,'multiline':False]['text':' If the guess doesn't lie near a single-precision boundary we can simply','line_number':590,'multiline':False]['text':' return its float-value.','line_number':591,'multiline':False]['text':' guess and next are the two possible candidates (in the same way that','line_number':600,'multiline':False]['text':' double_guess was the lower candidate for a double-precision guess).','line_number':601,'multiline':False]['text':' Round towards even.','line_number':617,'multiline':False]['text':' namespace double_conversion','line_number':624,'multiline':False]['text':' ICU PATCH: Close ICU namespace','line_number':626,'multiline':False]['text':' ICU PATCH: close #if !UCONFIG_NO_FORMATTING','line_number':628,'multiline':False]