['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':16,'multiline':False]['text':' JSMSG_*','line_number':18,'multiline':False]['text':' This is a no-op if built with JS_HAS_INTL_API.','line_number':29,'multiline':False]['text':' Initialize the Number class, returning its prototype object. ','line_number':32,'multiline':True]['text':'
 * When base == 10, this function implements ToString() as specified by
 * ECMA-262-5 section 9.8.1; but note that it handles integers specially for
 * performance.  See also js::NumberToCString().
 ','line_number':35,'multiline':True]['text':' ES6 15.7.3.12','line_number':60,'multiline':False]['text':'
 * Convert an integer or double (contained in the given value) to a string and
 * append to the given buffer.
 ','line_number':65,'multiline':True]['text':'
 * Usually a small amount of static storage is enough, but sometimes we need
 * to dynamically allocate much more.  This struct encapsulates that.
 * Dynamically allocated memory will be freed when the object is destroyed.
 ','line_number':75,'multiline':True]['text':'
   * The longest possible result that would need to fit in sbuf is
   * (-0x80000000).toString(2), which has length 33.  Longer cases are
   * possible, but they'll go in dbuf.
   ','line_number':81,'multiline':True]['text':'
 * Convert a number to a C string.  When base==10, this function implements
 * ToString() as specified by ECMA-262-5 section 9.8.1.  It handles integral
 * values cheaply.  Return nullptr if we ran out of memory.  See also
 * NumberToCString().
 ','line_number':94,'multiline':True]['text':'
 * The largest positive integer such that all positive integers less than it
 * may be precisely represented using the IEEE-754 double-precision format.
 ','line_number':103,'multiline':True]['text':'
 * Parse a decimal number encoded in |chars|.  The decimal number must be
 * sufficiently small that it will not overflow the integrally-precise range of
 * the double type -- that is, the number will be smaller than
 * DOUBLE_INTEGRAL_PRECISION_LIMIT
 ','line_number':109,'multiline':True]['text':'
 * Compute the positive integer of the given base described immediately at the
 * start of the range [start, end) -- no whitespace-skipping, no magical
 * leading-"0" octal or leading-"0x" hex behavior, no "+"/"-" parsing, just
 * reading the digits of the integer.  Return the index one past the end of the
 * digits of the integer in *endp, and return the integer itself in *dp.  If
 * base is 10 or a power of two the returned integer is the closest possible
 * double; otherwise extremely large integers may be slightly inaccurate.
 *
 * The |separatorHandling| controls whether or not numeric separators can be
 * part of integer string. If the option is enabled, all '_' characters in the
 * string are ignored. Underscore characters must not appear directly next to
 * each other, e.g. '1__2' will lead to an assertion.
 *
 * If [start, end) does not begin with a number with the specified base,
 * *dp == 0 and *endp == start upon return.
 ','line_number':120,'multiline':True]['text':'*
 * Like GetPrefixInteger, but [start, end) must all be digits in the given
 * base (and so this function doesn't take a useless outparam).
 ','line_number':152,'multiline':True]['text':'
 * This is like GetPrefixInteger, but only deals with base 10, always ignores
 * '_', and doesn't have an |endp| outparam. It should only be used when the
 * characters are known to match |DecimalIntegerLiteral|, cf. ES2020, 11.8.3
 * Numeric Literals.
 ','line_number':169,'multiline':True]['text':'
 * This is like GetDecimalInteger, but also allows non-integer numbers. It
 * should only be used when the characters are known to match |DecimalLiteral|,
 * cf. ES2020, 11.8.3 Numeric Literals.
 ','line_number':179,'multiline':True]['text':'
 * Return true and set |*result| to the parsed number value if |str| can be
 * parsed as a number using the same rules as in |StringToNumber|. Otherwise
 * return false and leave |*result| in an indeterminate state.
 ','line_number':199,'multiline':True]['text':' ES5 9.3 ToNumber, overwriting *vp with the appropriate number value. ','line_number':207,'multiline':True]['text':' BigInt proposal section 3.1.6','line_number':226,'multiline':False]['text':' namespace js ','line_number':245,'multiline':True]['text':'
 * Similar to strtod except that it replaces overflows with infinities of the
 * correct sign, and underflows with zeros of the correct sign.  Guaranteed to
 * return the closest double number to the given input in dp.
 *
 * Also allows inputs of the form [+|-]Infinity, which produce an infinity of
 * the appropriate sign.  The case of the "Infinity" string must match exactly.
 * If the string does not contain a number, set *dEnd to begin and return 0.0
 * in *d.
 *
 * Return false if out of memory.
 ','line_number':247,'multiline':True]['text':'*
 * Like js_strtod, but for when the number always constitutes the entire range
 * (and so |dEnd| would be a value already known).
 ','line_number':266,'multiline':True]['text':'
 * Returns true if the given value is definitely an index: that is, the value
 * is a number that's an unsigned 32-bit integer.
 *
 * This method prioritizes common-case speed over accuracy in every case.  It
 * can produce false negatives (but not false positives): some values which are
 * indexes will be reported not to be indexes by this method.  Users must
 * consider this possibility when using this method.
 ','line_number':287,'multiline':True]['text':' ES2020 draft rev 6b05bc56ba4e3c7a2b9922c4282d9eb844426d9b','line_number':317,'multiline':False]['text':' 7.1.5 ToInteger ( argument )','line_number':318,'multiline':False]['text':' ES2017 draft 7.1.17 ToIndex
 *
 * Return true and set |*index| to the integer value if |v| is a valid
 * integer index value. Otherwise report a RangeError and return false.
 *
 * The returned index will always be in the range 0 <= *index <= 2^53-1.
 ','line_number':341,'multiline':True]['text':' namespace js ','line_number':370,'multiline':True]['text':' jsnum_h ','line_number':372,'multiline':True]