['text':'**************************************************************************************************

  Zyan Disassembler Library (Zydis)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]['text':'*
 * @file
 * @brief   Defines the basic `ZydisDecodedInstruction` and `ZydisDecodedOperand` structs.
 ','line_number':27,'multiline':True]['text':' ============================================================================================== ','line_number':45,'multiline':True]['text':' Decoded operand                                                                                ','line_number':46,'multiline':True]['text':' ============================================================================================== ','line_number':47,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':49,'multiline':True]['text':' Memory type                                                                                    ','line_number':50,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':51,'multiline':True]['text':'*
 * @brief   Defines the `ZydisMemoryOperandType` enum.
 ','line_number':53,'multiline':True]['text':'*
     * @brief   Normal memory operand.
     ','line_number':59,'multiline':True]['text':'*
     * @brief   The memory operand is only used for address-generation. No real memory-access is
     *          caused.
     ','line_number':63,'multiline':True]['text':'*
     * @brief   A memory operand using `SIB` addressing form, where the index register is not used
     *          in address calculation and scale is ignored. No real memory-access is caused.
     ','line_number':68,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':74,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':78,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':84,'multiline':True]['text':' Decoded operand                                                                                ','line_number':85,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':86,'multiline':True]['text':'*
 * @brief   Defines the `ZydisDecodedOperand` struct.
 ','line_number':88,'multiline':True]['text':'*
     * @brief   The operand-id.
     ','line_number':93,'multiline':True]['text':'*
     * @brief   The type of the operand.
     ','line_number':97,'multiline':True]['text':'*
     * @brief   The visibility of the operand.
     ','line_number':101,'multiline':True]['text':'*
     * @brief   The operand-actions.
     ','line_number':105,'multiline':True]['text':'*
     * @brief   The operand-encoding.
     ','line_number':109,'multiline':True]['text':'*
     * @brief   The logical size of the operand (in bits).
     ','line_number':113,'multiline':True]['text':'*
     * @brief   The element-type.
     ','line_number':117,'multiline':True]['text':'*
     * @brief   The size of a single element.
     ','line_number':121,'multiline':True]['text':'*
     * @brief   The number of elements.
     ','line_number':125,'multiline':True]['text':'*
     * @brief   Extended info for register-operands.
     ','line_number':129,'multiline':True]['text':'*
         * @brief   The register value.
         ','line_number':134,'multiline':True]['text':' TODO: AVX512_4VNNIW MULTISOURCE registers','line_number':138,'multiline':False]['text':'*
     * @brief   Extended info for memory-operands.
     ','line_number':140,'multiline':True]['text':'*
         * @brief   The type of the memory operand.
         ','line_number':145,'multiline':True]['text':'*
         * @brief   The segment register.
         ','line_number':149,'multiline':True]['text':'*
         * @brief   The base register.
         ','line_number':153,'multiline':True]['text':'*
         * @brief   The index register.
         ','line_number':157,'multiline':True]['text':'*
         * @brief   The scale factor.
         ','line_number':161,'multiline':True]['text':'*
         * @brief   Extended info for memory-operands with displacement.
         ','line_number':165,'multiline':True]['text':'*
             * @brief   Signals, if the displacement value is used.
             ','line_number':170,'multiline':True]['text':'*
             * @brief   The displacement value
             ','line_number':174,'multiline':True]['text':'*
     * @brief   Extended info for pointer-operands.
     ','line_number':180,'multiline':True]['text':'*
     * @brief   Extended info for immediate-operands.
     ','line_number':188,'multiline':True]['text':'*
         * @brief   Signals, if the immediate value is signed.
         ','line_number':193,'multiline':True]['text':'*
         * @brief   Signals, if the immediate value contains a relative offset. You can use
         *          `ZydisCalcAbsoluteAddress` to determine the absolute address value.
         ','line_number':197,'multiline':True]['text':'*
         * @brief   The immediate value.
         ','line_number':202,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':213,'multiline':True]['text':' ============================================================================================== ','line_number':215,'multiline':True]['text':' Decoded instruction                                                                            ','line_number':216,'multiline':True]['text':' ============================================================================================== ','line_number':217,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':219,'multiline':True]['text':' Instruction attributes                                                                         ','line_number':220,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':221,'multiline':True]['text':'*
 * @brief   Defines the `ZydisInstructionAttributes` data-type.
 ','line_number':223,'multiline':True]['text':'*
 * @brief   The instruction has the `ModRM` byte.
 ','line_number':228,'multiline':True]['text':' (1 <<  0)','line_number':231,'multiline':False]['text':'*
 * @brief   The instruction has the `SIB` byte.
 ','line_number':232,'multiline':True]['text':' (1 <<  1)','line_number':235,'multiline':False]['text':'*
 * @brief   The instruction has the `REX` prefix.
 ','line_number':236,'multiline':True]['text':' (1 <<  2)','line_number':239,'multiline':False]['text':'*
 * @brief   The instruction has the `XOP` prefix.
 ','line_number':240,'multiline':True]['text':' (1 <<  3)','line_number':243,'multiline':False]['text':'*
 * @brief   The instruction has the `VEX` prefix.
 ','line_number':244,'multiline':True]['text':' (1 <<  4)','line_number':247,'multiline':False]['text':'*
 * @brief   The instruction has the `EVEX` prefix.
 ','line_number':248,'multiline':True]['text':' (1 <<  5)','line_number':251,'multiline':False]['text':'*
 * @brief   The instruction has the `MVEX` prefix.
 ','line_number':252,'multiline':True]['text':' (1 <<  6)','line_number':255,'multiline':False]['text':'*
 * @brief   The instruction has one or more operands with position-relative offsets.
 ','line_number':256,'multiline':True]['text':' (1 <<  7)','line_number':259,'multiline':False]['text':'*
 * @brief   The instruction is privileged.
 *
 * Privileged instructions are any instructions that require a current ring level below 3.
 ','line_number':260,'multiline':True]['text':' (1 <<  8)','line_number':265,'multiline':False]['text':'*
 * @brief   The instruction accesses one or more CPU-flags.
 ','line_number':267,'multiline':True]['text':' (1 << 36) // TODO: rebase','line_number':270,'multiline':False]['text':'*
 * @brief   The instruction may conditionally read the general CPU state.
 ','line_number':272,'multiline':True]['text':' (1 << 37) // TODO: rebase','line_number':275,'multiline':False]['text':'*
 * @brief   The instruction may conditionally write the general CPU state.
 ','line_number':276,'multiline':True]['text':' (1 << 38) // TODO: rebase','line_number':279,'multiline':False]['text':'*
 * @brief   The instruction may conditionally read the FPU state (X87, MMX).
 ','line_number':280,'multiline':True]['text':' (1 << 39) // TODO: rebase','line_number':283,'multiline':False]['text':'*
 * @brief   The instruction may conditionally write the FPU state (X87, MMX).
 ','line_number':284,'multiline':True]['text':' (1 << 40) // TODO: rebase','line_number':287,'multiline':False]['text':'*
 * @brief   The instruction may conditionally read the XMM state (AVX, AVX2, AVX-512).
 ','line_number':288,'multiline':True]['text':' (1 << 41) // TODO: rebase','line_number':291,'multiline':False]['text':'*
 * @brief   The instruction may conditionally write the XMM state (AVX, AVX2, AVX-512).
 ','line_number':292,'multiline':True]['text':' (1 << 42) // TODO: rebase','line_number':295,'multiline':False]['text':'*
 * @brief   The instruction accepts the `LOCK` prefix (`0xF0`).
 ','line_number':297,'multiline':True]['text':' (1 <<  9)','line_number':300,'multiline':False]['text':'*
 * @brief   The instruction accepts the `REP` prefix (`0xF3`).
 ','line_number':301,'multiline':True]['text':' (1 << 10)','line_number':304,'multiline':False]['text':'*
 * @brief   The instruction accepts the `REPE`/`REPZ` prefix (`0xF3`).
 ','line_number':305,'multiline':True]['text':' (1 << 11)','line_number':308,'multiline':False]['text':'*
 * @brief   The instruction accepts the `REPE`/`REPZ` prefix (`0xF3`).
 ','line_number':309,'multiline':True]['text':' (1 << 11)','line_number':312,'multiline':False]['text':'*
 * @brief   The instruction accepts the `REPNE`/`REPNZ` prefix (`0xF2`).
 ','line_number':313,'multiline':True]['text':' (1 << 12)','line_number':316,'multiline':False]['text':'*
 * @brief   The instruction accepts the `REPNE`/`REPNZ` prefix (`0xF2`).
 ','line_number':317,'multiline':True]['text':' (1 << 12)','line_number':320,'multiline':False]['text':'*
 * @brief   The instruction accepts the `BND` prefix (`0xF2`).
 ','line_number':321,'multiline':True]['text':' (1 << 13)','line_number':324,'multiline':False]['text':'*
 * @brief   The instruction accepts the `XACQUIRE` prefix (`0xF2`).
 ','line_number':325,'multiline':True]['text':' (1 << 14)','line_number':328,'multiline':False]['text':'*
 * @brief   The instruction accepts the `XRELEASE` prefix (`0xF3`).
 ','line_number':329,'multiline':True]['text':' (1 << 15)','line_number':332,'multiline':False]['text':'*
 * @brief   The instruction accepts the `XACQUIRE`/`XRELEASE` prefixes (`0xF2`, `0xF3`) without
 *          the `LOCK` prefix (`0x0F`).
 ','line_number':333,'multiline':True]['text':' (1 << 16)','line_number':337,'multiline':False]['text':'*
 * @brief   The instruction accepts branch hints (0x2E, 0x3E).
 ','line_number':338,'multiline':True]['text':' (1 << 17)','line_number':341,'multiline':False]['text':'*
 * @brief   The instruction accepts segment prefixes (`0x2E`, `0x36`, `0x3E`, `0x26`, `0x64`,
 *          `0x65`).
 ','line_number':342,'multiline':True]['text':' (1 << 18)','line_number':346,'multiline':False]['text':'*
 * @brief   The instruction has the `LOCK` prefix (`0xF0`).
 ','line_number':347,'multiline':True]['text':' (1 << 19)','line_number':350,'multiline':False]['text':'*
 * @brief   The instruction has the `REP` prefix (`0xF3`).
 ','line_number':351,'multiline':True]['text':' (1 << 20)','line_number':354,'multiline':False]['text':'*
 * @brief   The instruction has the `REPE`/`REPZ` prefix (`0xF3`).
 ','line_number':355,'multiline':True]['text':' (1 << 21)','line_number':358,'multiline':False]['text':'*
 * @brief   The instruction has the `REPE`/`REPZ` prefix (`0xF3`).
 ','line_number':359,'multiline':True]['text':' (1 << 21)','line_number':362,'multiline':False]['text':'*
 * @brief   The instruction has the `REPNE`/`REPNZ` prefix (`0xF2`).
 ','line_number':363,'multiline':True]['text':' (1 << 22)','line_number':366,'multiline':False]['text':'*
 * @brief   The instruction has the `REPNE`/`REPNZ` prefix (`0xF2`).
 ','line_number':367,'multiline':True]['text':' (1 << 22)','line_number':370,'multiline':False]['text':'*
 * @brief   The instruction has the `BND` prefix (`0xF2`).
 ','line_number':371,'multiline':True]['text':' (1 << 23)','line_number':374,'multiline':False]['text':'*
 * @brief   The instruction has the `XACQUIRE` prefix (`0xF2`).
 ','line_number':375,'multiline':True]['text':' (1 << 24)','line_number':378,'multiline':False]['text':'*
 * @brief   The instruction has the `XRELEASE` prefix (`0xF3`).
 ','line_number':379,'multiline':True]['text':' (1 << 25)','line_number':382,'multiline':False]['text':'*
 * @brief   The instruction has the branch-not-taken hint (`0x2E`).
 ','line_number':383,'multiline':True]['text':' (1 << 26)','line_number':386,'multiline':False]['text':'*
 * @brief   The instruction has the branch-taken hint (`0x3E`).
 ','line_number':387,'multiline':True]['text':' (1 << 27)','line_number':390,'multiline':False]['text':'*
 * @brief   The instruction has a segment modifier.
 ','line_number':391,'multiline':True]['text':'*
 * @brief   The instruction has the `CS` segment modifier (`0x2E`).
 ','line_number':395,'multiline':True]['text':' (1 << 28)','line_number':398,'multiline':False]['text':'*
 * @brief   The instruction has the `SS` segment modifier (`0x36`).
 ','line_number':399,'multiline':True]['text':' (1 << 29)','line_number':402,'multiline':False]['text':'*
 * @brief   The instruction has the `DS` segment modifier (`0x3E`).
 ','line_number':403,'multiline':True]['text':' (1 << 30)','line_number':406,'multiline':False]['text':'*
 * @brief   The instruction has the `ES` segment modifier (`0x26`).
 ','line_number':407,'multiline':True]['text':' (1 << 31)','line_number':410,'multiline':False]['text':'*
 * @brief   The instruction has the `FS` segment modifier (`0x64`).
 ','line_number':411,'multiline':True]['text':' (1 << 32)','line_number':414,'multiline':False]['text':'*
 * @brief   The instruction has the `GS` segment modifier (`0x65`).
 ','line_number':415,'multiline':True]['text':' (1 << 33)','line_number':418,'multiline':False]['text':'*
 * @brief   The instruction has the operand-size override prefix (`0x66`).
 ','line_number':419,'multiline':True]['text':' (1 << 34) // TODO: rename','line_number':422,'multiline':False]['text':'*
 * @brief   The instruction has the address-size override prefix (`0x67`).
 ','line_number':423,'multiline':True]['text':' (1 << 35) // TODO: rename','line_number':426,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':428,'multiline':True]['text':' R/E/FLAGS info                                                                                 ','line_number':429,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':430,'multiline':True]['text':'*
 * @brief   Defines the `ZydisCPUFlags` data-type.
 ','line_number':432,'multiline':True]['text':'*
 * @brief   Defines the `ZydisCPUFlag` enum.
 ','line_number':437,'multiline':True]['text':'*
     * @brief   Carry flag.
     ','line_number':442,'multiline':True]['text':'*
     * @brief   Parity flag.
     ','line_number':446,'multiline':True]['text':'*
     * @brief   Adjust flag.
     ','line_number':450,'multiline':True]['text':'*
     * @brief   Zero flag.
     ','line_number':454,'multiline':True]['text':'*
     * @brief   Sign flag.
     ','line_number':458,'multiline':True]['text':'*
     * @brief   Trap flag.
     ','line_number':462,'multiline':True]['text':'*
     * @brief   Interrupt enable flag.
     ','line_number':466,'multiline':True]['text':'*
     * @brief   Direction flag.
     ','line_number':470,'multiline':True]['text':'*
     * @brief   Overflow flag.
     ','line_number':474,'multiline':True]['text':'*
     * @brief   I/O privilege level flag.
     ','line_number':478,'multiline':True]['text':'*
     * @brief   Nested task flag.
     ','line_number':482,'multiline':True]['text':'*
     * @brief   Resume flag.
     ','line_number':486,'multiline':True]['text':'*
     * @brief   Virtual 8086 mode flag.
     ','line_number':490,'multiline':True]['text':'*
     * @brief   Alignment check.
     ','line_number':494,'multiline':True]['text':'*
     * @brief   Virtual interrupt flag.
     ','line_number':498,'multiline':True]['text':'*
     * @brief   Virtual interrupt pending.
     ','line_number':502,'multiline':True]['text':'*
     * @brief   Able to use CPUID instruction.
     ','line_number':506,'multiline':True]['text':'*
     * @brief   FPU condition-code flag 0.
     ','line_number':510,'multiline':True]['text':'*
     * @brief   FPU condition-code flag 1.
     ','line_number':514,'multiline':True]['text':'*
     * @brief   FPU condition-code flag 2.
     ','line_number':518,'multiline':True]['text':'*
     * @brief   FPU condition-code flag 3.
     ','line_number':522,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':527,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':531,'multiline':True]['text':'*
 * @brief   Defines the `ZydisCPUFlagAction` enum.
 ','line_number':537,'multiline':True]['text':'*
     * @brief   The CPU flag is not touched by the instruction.
     ','line_number':542,'multiline':True]['text':'*
     * @brief   The CPU flag is tested (read).
     ','line_number':546,'multiline':True]['text':'*
     * @brief   The CPU flag is tested and modified afterwards (read-write).
     ','line_number':550,'multiline':True]['text':'*
     * @brief   The CPU flag is modified (write).
     ','line_number':554,'multiline':True]['text':'*
     * @brief   The CPU flag is set to 0 (write).
     ','line_number':558,'multiline':True]['text':'*
     * @brief   The CPU flag is set to 1 (write).
     ','line_number':562,'multiline':True]['text':'*
     * @brief   The CPU flag is undefined (write).
     ','line_number':566,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':571,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':575,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':581,'multiline':True]['text':' Branch types                                                                                   ','line_number':582,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':583,'multiline':True]['text':'*
 * @brief   Defines the `ZydisBranchType` enum.
 ','line_number':585,'multiline':True]['text':'*
     * @brief   The instruction is not a branch instruction.
     ','line_number':590,'multiline':True]['text':'*
     * @brief   The instruction is a short (8-bit) branch instruction.
     ','line_number':594,'multiline':True]['text':'*
     * @brief   The instruction is a near (16-bit or 32-bit) branch instruction.
     ','line_number':598,'multiline':True]['text':'*
     * @brief   The instruction is a far (inter-segment) branch instruction.
     ','line_number':602,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':607,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':611,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':617,'multiline':True]['text':' SSE/AVX exception-class                                                                        ','line_number':618,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':619,'multiline':True]['text':'*
 * @brief   Defines the `ZydisExceptionClass` enum.
 ','line_number':621,'multiline':True]['text':' TODO: FP Exceptions','line_number':627,'multiline':False]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':668,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':672,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':678,'multiline':True]['text':' AVX mask mode                                                                                  ','line_number':679,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':680,'multiline':True]['text':'*
 * @brief   Defines the `ZydisMaskMode` enum.
 ','line_number':682,'multiline':True]['text':'*
     * @brief   Masking is disabled for the current instruction (`K0` register is used).
     ','line_number':688,'multiline':True]['text':'*
     * @brief   The embedded mask register is used as a merge-mask.
     ','line_number':692,'multiline':True]['text':'*
     * @brief   The embedded mask register is used as a zero-mask.
     ','line_number':696,'multiline':True]['text':'*
     * @brief   The embedded mask register is used as a control-mask (element selector).
     ','line_number':700,'multiline':True]['text':'*
     * @brief   The embedded mask register is used as a zeroing control-mask (element selector).
     ','line_number':704,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':709,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':713,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':719,'multiline':True]['text':' AVX broadcast-mode                                                                             ','line_number':720,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':721,'multiline':True]['text':'*
 * @brief   Defines the `ZydisBroadcastMode` enum.
 ','line_number':723,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':742,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':746,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':752,'multiline':True]['text':' AVX rounding-mode                                                                              ','line_number':753,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':754,'multiline':True]['text':'*
 * @brief   Defines the `ZydisRoundingMode` enum.
 ','line_number':756,'multiline':True]['text':'*
     * @brief   Round to nearest.
     ','line_number':762,'multiline':True]['text':'*
     * @brief   Round down.
     ','line_number':766,'multiline':True]['text':'*
     * @brief   Round up.
     ','line_number':770,'multiline':True]['text':'*
     * @brief   Round towards zero.
     ','line_number':774,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':779,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':783,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':789,'multiline':True]['text':' KNC swizzle-mode                                                                               ','line_number':790,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':791,'multiline':True]['text':'*
 * @brief   Defines the `ZydisSwizzleMode` enum.
 ','line_number':793,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':808,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':812,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':818,'multiline':True]['text':' KNC conversion-mode                                                                            ','line_number':819,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':820,'multiline':True]['text':'*
 * @brief   Defines the `ZydisConversionMode` enum.
 ','line_number':822,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':834,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':838,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':844,'multiline':True]['text':' Legacy prefix type                                                                             ','line_number':845,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':846,'multiline':True]['text':'*
 * @brief   Defines the `ZydisPrefixType` enum.
 ','line_number':848,'multiline':True]['text':'*
     * @brief   The prefix is ignored by the instruction.
     *
     * This applies to all prefixes that are not accepted by the instruction in general or the
     * ones that are overwritten by a prefix of the same group closer to the instruction opcode.
     ','line_number':853,'multiline':True]['text':'*
     * @brief   The prefix is effectively used by the instruction.
     ','line_number':860,'multiline':True]['text':'*
     * @brief   The prefix is used as a mandatory prefix.
     *
     * A mandatory prefix is interpreted as an opcode extension and has no further effect on the
     * instruction.
     ','line_number':864,'multiline':True]['text':'*
     * @brief   Maximum value of this enum.
     ','line_number':872,'multiline':True]['text':'*
     * @brief   The minimum number of bits required to represent all values of this enum.
     ','line_number':876,'multiline':True]['text':' TODO: Check effective for 66/67 prefixes (currently defaults to EFFECTIVE)','line_number':882,'multiline':False]['text':' ---------------------------------------------------------------------------------------------- ','line_number':884,'multiline':True]['text':' Decoded instruction                                                                            ','line_number':885,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':886,'multiline':True]['text':'*
 * @brief   Defines the `ZydisDecodedInstruction` struct.
 ','line_number':888,'multiline':True]['text':'*
     * @brief   The machine mode used to decode this instruction.
     ','line_number':893,'multiline':True]['text':'*
     * @brief   The instruction-mnemonic.
     ','line_number':897,'multiline':True]['text':'*
     * @brief   The length of the decoded instruction.
     ','line_number':901,'multiline':True]['text':'*
     * @brief   The instruction-encoding (`LEGACY`, `3DNOW`, `VEX`, `EVEX`, `XOP`).
     ','line_number':905,'multiline':True]['text':'*
     * @brief   The opcode-map.
     ','line_number':909,'multiline':True]['text':'*
     * @brief   The instruction-opcode.
     ','line_number':913,'multiline':True]['text':'*
     * @brief   The stack width.
     ','line_number':917,'multiline':True]['text':'*
     * @brief   The effective operand width.
     ','line_number':921,'multiline':True]['text':'*
     * @brief   The effective address width.
     ','line_number':925,'multiline':True]['text':'*
     * @brief   The number of instruction-operands.
     ','line_number':929,'multiline':True]['text':'*
     * @brief   Detailed info for all instruction operands.
     *
     * Explicit operands are guaranteed to be in the front and ordered as they are printed
     * by the formatter in Intel mode. No assumptions can be made about the order of hidden
     * operands, except that they always located behind the explicit operands.
     ','line_number':933,'multiline':True]['text':'*
     * @brief  Instruction attributes.
     ','line_number':941,'multiline':True]['text':'*
     * @brief   Information about accessed CPU flags.
     ','line_number':945,'multiline':True]['text':'*
         * @brief   The CPU-flag action.
         *
         * Use `ZydisGetAccessedFlagsByAction` to get a mask with all flags matching a specific
         * action.
         ','line_number':950,'multiline':True]['text':'*
     * @brief   Extended info for `AVX` instructions.
     ','line_number':958,'multiline':True]['text':'*
         * @brief   The `AVX` vector-length.
         ','line_number':963,'multiline':True]['text':'*
         * @brief   Info about the embedded writemask-register (`AVX-512` and `KNC` only).
         ','line_number':967,'multiline':True]['text':'*
             * @brief   The masking mode.
             ','line_number':972,'multiline':True]['text':'*
             * @brief   The mask register.
             ','line_number':976,'multiline':True]['text':'*
         * @brief   Contains info about the `AVX` broadcast.
         ','line_number':981,'multiline':True]['text':'*
             * @brief   Signals, if the broadcast is a static broadcast.
             *
             * This is the case for instructions with inbuilt broadcast functionality, which is
             * always active and not controlled by the `EVEX/MVEX.RC` bits.
             ','line_number':986,'multiline':True]['text':'*
             * @brief   The `AVX` broadcast-mode.
             ','line_number':993,'multiline':True]['text':'*
         * @brief   Contains info about the `AVX` rounding.
         ','line_number':998,'multiline':True]['text':'*
             * @brief   The `AVX` rounding-mode.
             ','line_number':1003,'multiline':True]['text':'*
         * @brief   Contains info about the `AVX` register-swizzle (`KNC` only).
         ','line_number':1008,'multiline':True]['text':'*
             * @brief   The `AVX` register-swizzle mode.
             ','line_number':1013,'multiline':True]['text':'*
         * @brief   Contains info about the `AVX` data-conversion (`KNC` only).
         ','line_number':1018,'multiline':True]['text':'*
             * @brief   The `AVX` data-conversion mode.
             ','line_number':1023,'multiline':True]['text':'*
         * @brief   Signals, if the `SAE` (suppress-all-exceptions) functionality is enabled for
         *          the instruction.
         ','line_number':1028,'multiline':True]['text':'*
         * @brief   Signals, if the instruction has a memory-eviction-hint (`KNC` only).
         ','line_number':1033,'multiline':True]['text':' TODO: publish EVEX tuple-type and MVEX functionality','line_number':1037,'multiline':False]['text':'*
     * @brief   Meta info.
     ','line_number':1039,'multiline':True]['text':'*
         * @brief   The instruction category.
         ','line_number':1044,'multiline':True]['text':'*
         * @brief   The ISA-set.
         ','line_number':1048,'multiline':True]['text':'*
         * @brief   The ISA-set extension.
         ','line_number':1052,'multiline':True]['text':'*
         * @brief   The branch type.
         ','line_number':1056,'multiline':True]['text':'*
         * @brief   The exception class.
         ','line_number':1060,'multiline':True]['text':'*
     * @brief   Detailed info about different instruction-parts like `ModRM`, `SIB` or
     *          encoding-prefixes.
     ','line_number':1065,'multiline':True]['text':'*
         * @brief   The number of legacy prefixes.
         ','line_number':1071,'multiline':True]['text':'*
         * @brief   Detailed info about the legacy prefixes (including `REX`).
         ','line_number':1075,'multiline':True]['text':'*
             * @brief   The prefix type.
             ','line_number':1080,'multiline':True]['text':'*
             * @brief   The prefix byte.
             ','line_number':1084,'multiline':True]['text':'*
         * @brief   Detailed info about the `REX` prefix.
         ','line_number':1089,'multiline':True]['text':'*
             * @brief   64-bit operand-size promotion.
             ','line_number':1094,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.reg` field.
             ','line_number':1098,'multiline':True]['text':'*
             * @brief   Extension of the `SIB.index` field.
             ','line_number':1102,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.rm`, `SIB.base`, or `opcode.reg` field.
             ','line_number':1106,'multiline':True]['text':'*
             * @brief   The offset of the effective `REX` byte, relative to the beginning of the
             *          instruction, in bytes.
             *
             * This offset always points to the "effective" `REX` prefix (the one closest to the
             * instruction opcode), if multiple `REX` prefixes are present.
             *
             * Note that the `REX` byte can be the first byte of the instruction, which would lead
             * to an offset of `0`. Please refer to the instruction attributes to check for the
             * presence of the `REX` prefix.
             ','line_number':1110,'multiline':True]['text':'*
         * @brief   Detailed info about the `XOP` prefix.
         ','line_number':1123,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.reg` field (inverted).
             ','line_number':1128,'multiline':True]['text':'*
             * @brief   Extension of the `SIB.index` field (inverted).
             ','line_number':1132,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.rm`, `SIB.base`, or `opcode.reg` field (inverted).
             ','line_number':1136,'multiline':True]['text':'*
             * @brief   Opcode-map specifier.
             ','line_number':1140,'multiline':True]['text':'*
             * @brief   64-bit operand-size promotion or opcode-extension.
             ','line_number':1144,'multiline':True]['text':'*
             * @brief   `NDS`/`NDD` (non-destructive-source/destination) register specifier
             *          (inverted).
             ','line_number':1148,'multiline':True]['text':'*
             * @brief   Vector-length specifier.
             ','line_number':1153,'multiline':True]['text':'*
             * @brief   Compressed legacy prefix.
             ','line_number':1157,'multiline':True]['text':'*
             * @brief   The offset of the first xop byte, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1161,'multiline':True]['text':'*
         * @brief   Detailed info about the `VEX` prefix.
         ','line_number':1167,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.reg` field (inverted).
             ','line_number':1172,'multiline':True]['text':'*
             * @brief   Extension of the `SIB.index` field (inverted).
             ','line_number':1176,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.rm`, `SIB.base`, or `opcode.reg` field (inverted).
             ','line_number':1180,'multiline':True]['text':'*
             * @brief   Opcode-map specifier.
             ','line_number':1184,'multiline':True]['text':'*
             * @brief   64-bit operand-size promotion or opcode-extension.
             ','line_number':1188,'multiline':True]['text':'*
             * @brief   `NDS`/`NDD` (non-destructive-source/destination) register specifier
             *          (inverted).
             ','line_number':1192,'multiline':True]['text':'*
             * @brief   Vector-length specifier.
             ','line_number':1197,'multiline':True]['text':'*
             * @brief   Compressed legacy prefix.
             ','line_number':1201,'multiline':True]['text':'*
             * @brief   The offset of the first `VEX` byte, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1205,'multiline':True]['text':'*
             * @brief   The size of the `VEX` prefix, in bytes.
             ','line_number':1210,'multiline':True]['text':'*
         * @brief   Detailed info about the `EVEX` prefix.
         ','line_number':1215,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.reg` field (inverted).
             ','line_number':1220,'multiline':True]['text':'*
             * @brief   Extension of the `SIB.index/vidx` field (inverted).
             ','line_number':1224,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.rm` or `SIB.base` field (inverted).
             ','line_number':1228,'multiline':True]['text':'*
             * @brief   High-16 register specifier modifier (inverted).
             ','line_number':1232,'multiline':True]['text':'*
             * @brief   Opcode-map specifier.
             ','line_number':1236,'multiline':True]['text':'*
             * @brief   64-bit operand-size promotion or opcode-extension.
             ','line_number':1240,'multiline':True]['text':'*
             * @brief   `NDS`/`NDD` (non-destructive-source/destination) register specifier
             *          (inverted).
             ','line_number':1244,'multiline':True]['text':'*
             * @brief   Compressed legacy prefix.
             ','line_number':1249,'multiline':True]['text':'*
             * @brief   Zeroing/Merging.
             ','line_number':1253,'multiline':True]['text':'*
             * @brief   Vector-length specifier or rounding-control (most significant bit).
             ','line_number':1257,'multiline':True]['text':'*
             * @brief   Vector-length specifier or rounding-control (least significant bit).
             ','line_number':1261,'multiline':True]['text':'*
             * @brief   Broadcast/RC/SAE context.
             ','line_number':1265,'multiline':True]['text':'*
             * @brief   High-16 `NDS`/`VIDX` register specifier.
             ','line_number':1269,'multiline':True]['text':'*
             * @brief   Embedded opmask register specifier.
             ','line_number':1273,'multiline':True]['text':'*
             * @brief   The offset of the first evex byte, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1277,'multiline':True]['text':'*
        * @brief    Detailed info about the `MVEX` prefix.
        ','line_number':1283,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.reg` field (inverted).
             ','line_number':1288,'multiline':True]['text':'*
             * @brief   Extension of the `SIB.index/vidx` field (inverted).
             ','line_number':1292,'multiline':True]['text':'*
             * @brief   Extension of the `ModRM.rm` or `SIB.base` field (inverted).
             ','line_number':1296,'multiline':True]['text':'*
             * @brief   High-16 register specifier modifier (inverted).
             ','line_number':1300,'multiline':True]['text':'*
             * @brief   Opcode-map specifier.
             ','line_number':1304,'multiline':True]['text':'*
             * @brief   64-bit operand-size promotion or opcode-extension.
             ','line_number':1308,'multiline':True]['text':'*
             * @brief   `NDS`/`NDD` (non-destructive-source/destination) register specifier
             *          (inverted).
             ','line_number':1312,'multiline':True]['text':'*
             * @brief   Compressed legacy prefix.
             ','line_number':1317,'multiline':True]['text':'*
             * @brief   Non-temporal/eviction hint.
             ','line_number':1321,'multiline':True]['text':'*
             * @brief   Swizzle/broadcast/up-convert/down-convert/static-rounding controls.
             ','line_number':1325,'multiline':True]['text':'*
             * @brief   High-16 `NDS`/`VIDX` register specifier.
             ','line_number':1329,'multiline':True]['text':'*
             * @brief   Embedded opmask register specifier.
             ','line_number':1333,'multiline':True]['text':'*
             * @brief   The offset of the first mvex byte, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1337,'multiline':True]['text':'*
         * @brief   Detailed info about the `ModRM` byte.
         ','line_number':1343,'multiline':True]['text':'*
             * @brief   The addressing mode.
             ','line_number':1348,'multiline':True]['text':'*
             * @brief   Register specifier or opcode-extension.
             ','line_number':1352,'multiline':True]['text':'*
             * @brief   Register specifier or opcode-extension.
             ','line_number':1356,'multiline':True]['text':'*
             * @brief   The offset of the `ModRM` byte, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1360,'multiline':True]['text':'*
         * @brief   Detailed info about the `SIB` byte.
         ','line_number':1366,'multiline':True]['text':'*
             * @brief   The scale factor.
             ','line_number':1371,'multiline':True]['text':'*
             * @brief   The index-register specifier.
             ','line_number':1375,'multiline':True]['text':'*
             * @brief   The base-register specifier.
             ','line_number':1379,'multiline':True]['text':'*
             * @brief   The offset of the `SIB` byte, relative to the beginning of the instruction,
             *          in bytes.
             ','line_number':1383,'multiline':True]['text':'*
         * @brief   Detailed info about displacement-bytes.
         ','line_number':1389,'multiline':True]['text':'*
             * @brief   The displacement value
             ','line_number':1394,'multiline':True]['text':'*
             * @brief   The physical displacement size, in bits.
             ','line_number':1398,'multiline':True]['text':' TODO: publish cd8 scale','line_number':1402,'multiline':False]['text':'*
             * @brief   The offset of the displacement data, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1403,'multiline':True]['text':'*
         * @brief   Detailed info about immediate-bytes.
         ','line_number':1409,'multiline':True]['text':'*
             * @brief   Signals, if the immediate value is signed.
             ','line_number':1414,'multiline':True]['text':'*
             * @brief   Signals, if the immediate value contains a relative offset. You can use
             *          `ZydisCalcAbsoluteAddress` to determine the absolute address value.
             ','line_number':1418,'multiline':True]['text':'*
             * @brief   The immediate value.
             ','line_number':1423,'multiline':True]['text':'*
             * @brief   The physical immediate size, in bits.
             ','line_number':1431,'multiline':True]['text':'*
             * @brief   The offset of the immediate data, relative to the beginning of the
             *          instruction, in bytes.
             ','line_number':1435,'multiline':True]['text':' ---------------------------------------------------------------------------------------------- ','line_number':1444,'multiline':True]['text':' ============================================================================================== ','line_number':1446,'multiline':True]['text':' ZYDIS_INSTRUCTIONINFO_H ','line_number':1452,'multiline':True]