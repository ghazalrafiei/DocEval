['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Remove a block from the graph. It will also cleanup the block.','line_number':101,'multiline':False]['text':' The predecessor does not have a PC, this is a Wasm compilation.','line_number':190,'multiline':False]['text':' The predecessor has a PC, this is a Warp compilation.','line_number':196,'multiline':False]['text':' A split edge is used to simplify the graph to avoid having a','line_number':208,'multiline':False]['text':' predecessor with multiple successors as well as a successor with','line_number':209,'multiline':False]['text':' multiple predecessors.  As instructions can be moved in this','line_number':210,'multiline':False]['text':' split-edge block, we need to give this block a resume point. To do','line_number':211,'multiline':False]['text':' so, we copy the entry resume points of the successor and filter the','line_number':212,'multiline':False]['text':' phis to keep inputs from the current edge.','line_number':213,'multiline':False]['text':' Propagate the caller resume point from the inherited block.','line_number':215,'multiline':False]['text':' Split-edge are created after the interpreter stack emulation. Thus,','line_number':218,'multiline':False]['text':' there is no need for creating slots.','line_number':219,'multiline':False]['text':' Create a resume point using our initial stack position.','line_number':222,'multiline':False]['text':' The target entry resume point might have phi operands, keep the','line_number':230,'multiline':False]['text':' operands of the phi coming from our edge.','line_number':231,'multiline':False]['text':' This early in the pipeline, we have no recover instructions in','line_number':236,'multiline':False]['text':' any entry resume point.','line_number':237,'multiline':False]['text':' This is done in the New variant for wasm, so we cannot keep this','line_number':246,'multiline':False]['text':' line below, where the rest of the graph is modified.','line_number':247,'multiline':False]['text':' Insert the split edge block in-between.','line_number':255,'multiline':False]['text':' Note: Phis are inserted in the same order as the slots.','line_number':290,'multiline':False]['text':' Add append Phis in the block.','line_number':306,'multiline':False]['text':' Create an empty and unreachable block which jumps to |header|. Used','line_number':325,'multiline':False]['text':' when the normal entry into a loop is removed (but the loop is still','line_number':326,'multiline':False]['text':' reachable due to OSR) to preserve the invariant that every loop','line_number':327,'multiline':False]['text':' header has two predecessors, which is needed for building the','line_number':328,'multiline':False]['text':' dominator tree. The new block is inserted immediately before the','line_number':329,'multiline':False]['text':' header, which preserves the graph ordering (post-order/RPO). These','line_number':330,'multiline':False]['text':' blocks will all be removed before lowering.','line_number':331,'multiline':False]['text':' Create fake defs to use as inputs for any phis in |header|.','line_number':346,'multiline':False]['text':' The backedge is always the last predecessor, but we have added a','line_number':363,'multiline':False]['text':' new pred. Restore |backedge| as |header|'s loop backedge.','line_number':364,'multiline':False]['text':' Propagate the caller resume point from the inherited block.','line_number':462,'multiline':False]['text':' Create a resume point using our initial stack state.','line_number':465,'multiline':False]['text':'
     * Don't leave the operands uninitialized for the caller, as it may not
     * initialize them later on.
     ','line_number':494,'multiline':True]['text':' Remove the previous resume point.','line_number':512,'multiline':False]['text':' Create a resume point using our initial stack state.','line_number':515,'multiline':False]['text':' pick takes a value and moves it to the top.','line_number':541,'multiline':False]['text':' pick(-2):','line_number':542,'multiline':False]['text':'   A B C D E','line_number':543,'multiline':False]['text':'   A B D C E [ swapAt(-2) ]','line_number':544,'multiline':False]['text':'   A B D E C [ swapAt(-1) ]','line_number':545,'multiline':False]['text':' unpick takes the value on top of the stack and moves it under the depth-th','line_number':552,'multiline':False]['text':' element;','line_number':553,'multiline':False]['text':' unpick(-2):','line_number':554,'multiline':False]['text':'   A B C D E','line_number':555,'multiline':False]['text':'   A B C E D [ swapAt(-1) ]','line_number':556,'multiline':False]['text':'   A B E C D [ swapAt(-2) ]','line_number':557,'multiline':False]['text':' If the first instruction is a MConstant(MagicValue(JS_OPTIMIZED_OUT))','line_number':575,'multiline':False]['text':' then reuse it.','line_number':576,'multiline':False]['text':' Remove |ins| from the current block.','line_number':588,'multiline':False]['text':' Insert into new block, which may be distinct.','line_number':592,'multiline':False]['text':' Uses and operands are untouched.','line_number':593,'multiline':False]['text':' Beta nodes and interrupt checks are required to be located at the','line_number':602,'multiline':False]['text':' beginnings of basic blocks, so we must insert new instructions after any','line_number':603,'multiline':False]['text':' such instructions.','line_number':604,'multiline':False]['text':' = RefType_Default ','line_number':617,'multiline':True]['text':' We should reach it before reaching the end.','line_number':624,'multiline':False]['text':' = RefType_Default ','line_number':633,'multiline':True]['text':' Only remove instructions from the same basic block.  This is needed for','line_number':634,'multiline':False]['text':' correctly removing the resume point if any.','line_number':635,'multiline':False]['text':' We need to assert that instructions have no uses after removing the their','line_number':643,'multiline':False]['text':' resume points operands as they could be captured by their own resume','line_number':644,'multiline':False]['text':' point.','line_number':645,'multiline':False]['text':' Discard operands and resume point operands and flag the instruction','line_number':690,'multiline':False]['text':' as discarded.  Also we do not assert that we have no uses as blocks','line_number':691,'multiline':False]['text':' might be removed in reverse post order.','line_number':692,'multiline':False]['text':' Find the previous resume point which would be used for bailing out.','line_number':783,'multiline':False]['text':' If none, take the entry resume point.','line_number':792,'multiline':False]['text':' The only blocks which do not have any entryResumePoint in Ion, are the','line_number':797,'multiline':False]['text':' SplitEdge blocks.  SplitEdge blocks only have a Goto instruction before','line_number':798,'multiline':False]['text':' Range Analysis phase.  In adjustInputs, we are manipulating instructions','line_number':799,'multiline':False]['text':' which have a TypePolicy.  So, as a Goto has no operand and no type','line_number':800,'multiline':False]['text':' policy, the entry resume point should exist.','line_number':801,'multiline':False]['text':' Flag all operands as being potentially used.','line_number':804,'multiline':False]['text':' Predecessors must be finished, and at the correct stack depth.','line_number':822,'multiline':False]['text':' If the current instruction is a phi, and it was created in this','line_number':836,'multiline':False]['text':' basic block, then we have already placed this phi and should','line_number':837,'multiline':False]['text':' instead append to its operands.','line_number':838,'multiline':False]['text':' Otherwise, create a new phi node.','line_number':848,'multiline':False]['text':' Prime the phi for each predecessor, so input(x) comes from','line_number':855,'multiline':False]['text':' predecessor(x).','line_number':856,'multiline':False]['text':' Predecessors must be finished, and at the correct stack depth.','line_number':884,'multiline':False]['text':' Predecessors must be finished.','line_number':904,'multiline':False]['text':' Predecessors must be finished, and at the correct stack depth.','line_number':926,'multiline':False]['text':' We must be a pending loop header','line_number':931,'multiline':False]['text':' Add exit definitions to each corresponding phi at the entry.','line_number':934,'multiline':False]['text':' We are now a loop header proper','line_number':939,'multiline':False]['text':' Predecessors must be finished, and at the correct stack depth.','line_number':946,'multiline':False]['text':' We must be a pending loop header','line_number':951,'multiline':False]['text':' Add exit definitions to each corresponding phi at the entry.','line_number':954,'multiline':False]['text':' Note: Phis are inserted in the same order as the slots. (see','line_number':955,'multiline':False]['text':' MBasicBlock::New)','line_number':956,'multiline':False]['text':' Assert that we already placed phis for each slot.','line_number':962,'multiline':False]['text':' Assert that the phi already has the correct type.','line_number':965,'multiline':False]['text':' If the exit def is the same as the entry def, make a redundant','line_number':970,'multiline':False]['text':' phi. Since loop headers have exactly two incoming edges, we','line_number':971,'multiline':False]['text':' know that that's just the first input.','line_number':972,'multiline':False]['text':'','line_number':973,'multiline':False]['text':' Note that we eliminate later rather than now, to avoid any','line_number':974,'multiline':False]['text':' weirdness around pending continue edges which might still hold','line_number':975,'multiline':False]['text':' onto phis.','line_number':976,'multiline':False]['text':' Phis always have room for 2 operands, so this can't fail.','line_number':980,'multiline':False]['text':' Two cases here: phis that correspond to locals, and phis that correspond','line_number':984,'multiline':False]['text':' to loop parameters.  Only phis for locals go in slots.','line_number':985,'multiline':False]['text':' We are now a loop header proper','line_number':991,'multiline':False]['text':' Set the loop backedge to be the last element in predecessors_.','line_number':1019,'multiline':False]['text':' If we have phis, reorder their operands accordingly.','line_number':1022,'multiline':False]['text':' Note, during split-critical-edges, successors-with-phis is not yet set.','line_number':1061,'multiline':False]['text':' During PAA, this case is handled before we enter.','line_number':1062,'multiline':False]['text':' The same block should not appear twice in the predecessor list.','line_number':1074,'multiline':False]['text':' If we're removing the last backedge, this is no longer a loop.','line_number':1095,'multiline':False]['text':' Adjust phis.  Note that this can leave redundant phis behind.','line_number':1100,'multiline':False]['text':' Don't adjust successorWithPhis() if we haven't constructed this','line_number':1101,'multiline':False]['text':' information yet.','line_number':1102,'multiline':False]['text':' Remove from pred list.','line_number':1111,'multiline':False]['text':' Remove the phi operands.','line_number':1118,'multiline':False]['text':' Now we can call the underlying function, which expects that phi','line_number':1123,'multiline':False]['text':' operands have been removed.','line_number':1124,'multiline':False]['text':' We must be a pending loop header','line_number':1129,'multiline':False]['text':' Get the value stack-slot of the back edge.','line_number':1134,'multiline':False]['text':' Get the value of the loop header.','line_number':1137,'multiline':False]['text':' If we are finishing a pending loop header, then we need to ensure','line_number':1140,'multiline':False]['text':' that all operands are phis. This is usualy the case, except for','line_number':1141,'multiline':False]['text':' object/arrays build with generators, in which case we share the','line_number':1142,'multiline':False]['text':' same allocations across all blocks.','line_number':1143,'multiline':False]['text':' Phis are allocated by NewPendingLoopHeader.','line_number':1149,'multiline':False]['text':' If the exit def is the same as the entry def, make a redundant','line_number':1154,'multiline':False]['text':' phi. Since loop headers have exactly two incoming edges, we','line_number':1155,'multiline':False]['text':' know that that's just the first input.','line_number':1156,'multiline':False]['text':'','line_number':1157,'multiline':False]['text':' Note that we eliminate later rather than now, to avoid any','line_number':1158,'multiline':False]['text':' weirdness around pending continue edges which might still hold','line_number':1159,'multiline':False]['text':' onto phis.','line_number':1160,'multiline':False]['text':' Look for a trailing MTest branching to this block.','line_number':1184,'multiline':False]