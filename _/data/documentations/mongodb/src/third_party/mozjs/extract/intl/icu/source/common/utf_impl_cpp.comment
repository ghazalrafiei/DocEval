['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 1999-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  utf_impl.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999sep13
*   created by: Markus W. Scherer
*
*   This file provides implementation functions for macros in the utfXX.h
*   that would otherwise be too long as macros.
','line_number':3,'multiline':True]['text':' set import/export definitions ','line_number':22,'multiline':True]['text':'
 * Table of the number of utf8 trail bytes, indexed by the lead byte.
 * Used by the deprecated macro UTF8_COUNT_TRAIL_BYTES, defined in utf_old.h
 *
 * The current macro, U8_COUNT_TRAIL_BYTES, does _not_ use this table.
 *
 * Note that this table cannot be removed, even if UTF8_COUNT_TRAIL_BYTES were
 * changed to no longer use it. References to the table from expansions of UTF8_COUNT_TRAIL_BYTES
 * may exist in old client code that must continue to run with newer icu library versions.
 *
 * This table could be replaced on many machines by
 * a few lines of assembler code using an
 * "index of first 0-bit from msb" instruction and
 * one or two more integer instructions.
 *
 * For example, on an i386, do something like
 * - MOV AL, leadByte
 * - NOT AL         (8-bit, leave b15..b8==0..0, reverse only b7..b0)
 * - MOV AH, 0
 * - BSR BX, AX     (16-bit)
 * - MOV AX, 6      (result)
 * - JZ finish      (ZF==1 if leadByte==0xff)
 * - SUB AX, BX (result)
 * -finish:
 * (BSR: Bit Scan Reverse, scans for a 1-bit, starting from the MSB)
 ','line_number':32,'multiline':True]['text':' illegal C0 & C1','line_number':75,'multiline':False]['text':' 2-byte lead bytes C2..DF','line_number':76,'multiline':False]['text':' 3-byte lead bytes E0..EF','line_number':80,'multiline':False]['text':' 4-byte lead bytes F0..F4','line_number':82,'multiline':False]['text':' illegal F5..FF','line_number':83,'multiline':False]['text':' Same values as UTF8_ERROR_VALUE_1, UTF8_ERROR_VALUE_2, UTF_ERROR_VALUE,','line_number':89,'multiline':False]['text':' but without relying on the obsolete unicode/utf_old.h.','line_number':90,'multiline':False]['text':'
 * Handle the non-inline part of the U8_NEXT() and U8_NEXT_FFFD() macros
 * and their obsolete sibling UTF8_NEXT_CHAR_SAFE().
 *
 * U8_NEXT() supports NUL-terminated strings indicated via length<0.
 *
 * The "strict" parameter controls the error behavior:
 * <0  "Safe" behavior of U8_NEXT():
 *     -1: All illegal byte sequences yield U_SENTINEL=-1.
 *     -2: Same as -1, except for lenient treatment of surrogate code points as legal.
 *         Some implementations use this for roundtripping of
 *         Unicode 16-bit strings that are not well-formed UTF-16, that is, they
 *         contain unpaired surrogates.
 *     -3: All illegal byte sequences yield U+FFFD.
 *  0  Obsolete "safe" behavior of UTF8_NEXT_CHAR_SAFE(..., FALSE):
 *     All illegal byte sequences yield a positive code point such that this
 *     result code point would be encoded with the same number of bytes as
 *     the illegal sequence.
 * >0  Obsolete "strict" behavior of UTF8_NEXT_CHAR_SAFE(..., TRUE):
 *     Same as the obsolete "safe" behavior, but non-characters are also treated
 *     like illegal sequences.
 *
 * Note that a UBool is the same as an int8_t.
 ','line_number':106,'multiline':True]['text':' *pi is one after byte c.','line_number':132,'multiline':False]['text':' length can be negative for NUL-terminated strings: Read and validate one byte at a time.','line_number':134,'multiline':False]['text':' end of string, or not a lead byte','line_number':136,'multiline':False]['text':' Test for 4-byte sequences first because','line_number':138,'multiline':False]['text':' U8_NEXT() handles shorter valid sequences inline.','line_number':139,'multiline':False]['text':' strict: forbid non-characters like U+fffe','line_number':147,'multiline':False]['text':' strict: forbid non-characters like U+fffe','line_number':161,'multiline':False]['text':' strict=-2 -> lenient: allow surrogates','line_number':168,'multiline':False]['text':' else 0x80<=c<0xc2 is not a lead byte','line_number':182,'multiline':False]['text':' error handling ','line_number':184,'multiline':True]['text':' Starting with Unicode 3.2, surrogate code points must not be encoded in UTF-8. ','line_number':199,'multiline':True]['text':' c>0x10ffff or not enough space, write an error value ','line_number':215,'multiline':True]['text':' *pi is the index of byte c.','line_number':237,'multiline':False]['text':' Truncated 3- or 4-byte sequence.','line_number':246,'multiline':False]['text':' Extract the value bits from the last trail byte.','line_number':251,'multiline':False]['text':' strict: forbid non-characters like U+fffe','line_number':264,'multiline':False]['text':' strict=-2 -> lenient: allow surrogates','line_number':269,'multiline':False]['text':' Truncated 4-byte sequence.','line_number':277,'multiline':False]['text':' strict: forbid non-characters like U+fffe','line_number':291,'multiline':False]['text':' Same as utf8_prevCharSafeBody(..., strict=-1) minus assembling code points.','line_number':304,'multiline':False]