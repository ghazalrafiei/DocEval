['text':' @(#)e_exp.c 1.6 04/04/22 ','line_number':2,'multiline':True]['text':'
 * ====================================================
 * Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice 
 * is preserved.
 * ====================================================
 ','line_number':3,'multiline':True]['text':'#include <sys/cdefs.h>','line_number':13,'multiline':False]['text':'__FBSDID("$FreeBSD$");','line_number':14,'multiline':False]['text':' __ieee754_exp(x)
 * Returns the exponential of x.
 *
 * Method
 *   1. Argument reduction:
 *      Reduce x to an r so that |r| <= 0.5*ln2 ~ 0.34658.
 *	Given x, find r and integer k such that
 *
 *               x = k*ln2 + r,  |r| <= 0.5*ln2.  
 *
 *      Here r will be represented as r = hi-lo for better 
 *	accuracy.
 *
 *   2. Approximation of exp(r) by a special rational function on
 *	the interval [0,0.34658]:
 *	Write
 *	    R(r**2) = r*(exp(r)+1)/(exp(r)-1) = 2 + r*r/6 - r**4/360 + ...
 *      We use a special Remes algorithm on [0,0.34658] to generate 
 * 	a polynomial of degree 5 to approximate R. The maximum error 
 *	of this polynomial approximation is bounded by 2**-59. In
 *	other words,
 *	    R(z) ~ 2.0 + P1*z + P2*z**2 + P3*z**3 + P4*z**4 + P5*z**5
 *  	(where z=r*r, and the values of P1 to P5 are listed below)
 *	and
 *	    |                  5          |     -59
 *	    | 2.0+P1*z+...+P5*z   -  R(z) | <= 2 
 *	    |                             |
 *	The computation of exp(r) thus becomes
 *                             2*r
 *		exp(r) = 1 + -------
 *		              R - r
 *                                 r*R1(r)	
 *		       = 1 + r + ----------- (for better accuracy)
 *		                  2 - R1(r)
 *	where
 *			         2       4             10
 *		R1(r) = r - (P1*r  + P2*r  + ... + P5*r   ).
 *	
 *   3. Scale back to obtain exp(x):
 *	From step 1, we have
 *	   exp(x) = 2^k * exp(r)
 *
 * Special cases:
 *	exp(INF) is INF, exp(NaN) is NaN;
 *	exp(-INF) is 0, and
 *	for finite argument, only exp(0)=1 is exact.
 *
 * Accuracy:
 *	according to an error analysis, the error is always less than
 *	1 ulp (unit in the last place).
 *
 * Misc. info.
 *	For IEEE double 
 *	    if x >  7.09782712893383973096e+02 then exp(x) overflow
 *	    if x < -7.45133219101941108420e+02 then exp(x) underflow
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following 
 * constants. The decimal values may be used, provided that the 
 * compiler will convert from decimal to binary accurately enough
 * to produce the hexadecimal values shown.
 ','line_number':16,'multiline':True]['text':' 0x40862E42, 0xFEFA39EF ','line_number':86,'multiline':True]['text':' 0xc0874910, 0xD52D3051 ','line_number':87,'multiline':True]['text':' 0x3fe62e42, 0xfee00000 ','line_number':88,'multiline':True]['text':' 0xbfe62e42, 0xfee00000 ','line_number':89,'multiline':True]['text':' 0x3dea39ef, 0x35793c76 ','line_number':90,'multiline':True]['text':' 0xbdea39ef, 0x35793c76 ','line_number':91,'multiline':True]['text':' 0x3ff71547, 0x652b82fe ','line_number':92,'multiline':True]['text':' 0x3FC55555, 0x5555553E ','line_number':93,'multiline':True]['text':' 0xBF66C16C, 0x16BEBD93 ','line_number':94,'multiline':True]['text':' 0x3F11566A, 0xAF25DE2C ','line_number':95,'multiline':True]['text':' 0xBEBBBD41, 0xC5D26BF1 ','line_number':96,'multiline':True]['text':' 0x3E663769, 0x72BEA4D0 ','line_number':97,'multiline':True]['text':' e ','line_number':99,'multiline':True]['text':' 2**-1000=0x01700000,0','line_number':103,'multiline':True]['text':' default IEEE double exp ','line_number':106,'multiline':True]['text':' sign bit of x ','line_number':113,'multiline':True]['text':' high word of |x| ','line_number':114,'multiline':True]['text':' filter out non-finite argument ','line_number':116,'multiline':True]['text':' if |x|>=709.78... ','line_number':117,'multiline':True]['text':' NaN ','line_number':122,'multiline':True]['text':' exp(+-inf)={inf,0} ','line_number':123,'multiline':True]['text':' overflow ','line_number':125,'multiline':True]['text':' underflow ','line_number':126,'multiline':True]['text':' argument reduction ','line_number':129,'multiline':True]['text':' if  |x| > 0.5 ln2 ','line_number':130,'multiline':True]['text':' and |x| < 1.5 ln2 ','line_number':131,'multiline':True]['text':' t*ln2HI is exact here ','line_number':137,'multiline':True]['text':' when |x|<2**-28 ','line_number':142,'multiline':True]['text':' trigger inexact ','line_number':143,'multiline':True]['text':' x is now in primary range ','line_number':147,'multiline':True]