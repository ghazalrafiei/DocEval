['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' If RegExpPrototypeOptimizable succeeds, `exec` and `@@match` are','line_number':15,'multiline':False]['text':' guaranteed to be data properties.','line_number':16,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.11.','line_number':26,'multiline':False]['text':' Step 1.','line_number':28,'multiline':False]['text':' Step 2.','line_number':32,'multiline':False]['text':' Step 2.a.','line_number':35,'multiline':False]['text':' Step 2.b.','line_number':38,'multiline':False]['text':' Step 3.','line_number':43,'multiline':False]['text':' Step 4.','line_number':52,'multiline':False]['text':' Step 5 (optimized case).','line_number':55,'multiline':False]['text':' Step 5.','line_number':59,'multiline':False]['text':' String.prototype.matchAll proposal.','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' String.prototype.matchAll ( regexp )','line_number':66,'multiline':False]['text':' Step 1.','line_number':68,'multiline':False]['text':' Step 2.','line_number':72,'multiline':False]['text':' Steps 2.a-b.','line_number':74,'multiline':False]['text':' Step 2.b.i.','line_number':76,'multiline':False]['text':' Step 2.b.ii.','line_number':79,'multiline':False]['text':' Step 2.b.iii.','line_number':84,'multiline':False]['text':' Step 2.c.','line_number':90,'multiline':False]['text':' Step 2.d.','line_number':93,'multiline':False]['text':' Step 3.','line_number':98,'multiline':False]['text':' Step 4.','line_number':101,'multiline':False]['text':' Step 5.','line_number':104,'multiline':False]['text':'*
 * A helper function implementing the logic for both String.prototype.padStart
 * and String.prototype.padEnd as described in ES7 Draft March 29, 2016
 ','line_number':108,'multiline':True]['text':' Step 1.','line_number':113,'multiline':False]['text':' Step 2.','line_number':117,'multiline':False]['text':' Steps 3-4.','line_number':120,'multiline':False]['text':' Step 5.','line_number':124,'multiline':False]['text':' Steps 6-7.','line_number':128,'multiline':False]['text':' Step 8.','line_number':132,'multiline':False]['text':' Throw an error if the final string length exceeds the maximum string','line_number':136,'multiline':False]['text':' length. Perform this check early so we can use int32 operations below.','line_number':137,'multiline':False]['text':' Step 9.','line_number':141,'multiline':False]['text':' Step 10.','line_number':144,'multiline':False]['text':' Perform an int32 division to ensure String_repeat is not called with a','line_number':145,'multiline':False]['text':' double to avoid repeated bailouts in ToInteger.','line_number':146,'multiline':False]['text':' Step 11.','line_number':152,'multiline':False]['text':' A thin wrapper to call SubstringKernel with int32-typed arguments.','line_number':174,'multiline':False]['text':' Caller should check the range of |from| and |length|.','line_number':175,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.14.','line_number':184,'multiline':False]['text':' Step 1.','line_number':186,'multiline':False]['text':' Step 2.','line_number':190,'multiline':False]['text':' Step 2.a.','line_number':194,'multiline':False]['text':' Step 2.b.','line_number':197,'multiline':False]['text':' Step 3.','line_number':202,'multiline':False]['text':' Step 4.','line_number':205,'multiline':False]['text':' Steps 6-12: Optimized for string case.','line_number':209,'multiline':False]['text':' Step 5.','line_number':213,'multiline':False]['text':' Steps 6-12.','line_number':215,'multiline':False]['text':' Step 7.','line_number':219,'multiline':False]['text':' Step 8.','line_number':224,'multiline':False]['text':' Step 10.','line_number':227,'multiline':False]['text':' Step 11.','line_number':230,'multiline':False]['text':' Step 12.','line_number':242,'multiline':False]['text':' String.prototype.replaceAll (Stage 3 proposal)','line_number':246,'multiline':False]['text':' https://tc39.es/proposal-string-replaceall/','line_number':247,'multiline':False]['text':'','line_number':248,'multiline':False]['text':' String.prototype.replaceAll ( searchValue, replaceValue )','line_number':249,'multiline':False]['text':' Step 1.','line_number':251,'multiline':False]['text':' Step 2.','line_number':255,'multiline':False]['text':' Steps 2.a-b.','line_number':257,'multiline':False]['text':' Step 2.b.i.','line_number':259,'multiline':False]['text':' Step 2.b.ii.','line_number':262,'multiline':False]['text':' Step 2.b.iii.','line_number':267,'multiline':False]['text':' Step 2.c.','line_number':273,'multiline':False]['text':' Step 2.b.','line_number':276,'multiline':False]['text':' Step 3.','line_number':282,'multiline':False]['text':' Step 4.','line_number':285,'multiline':False]['text':' Steps 5-6.','line_number':288,'multiline':False]['text':' Steps 7-16.','line_number':290,'multiline':False]['text':' Step 7.','line_number':294,'multiline':False]['text':' Step 8.','line_number':297,'multiline':False]['text':' Step 9 (not needed in this implementation).','line_number':300,'multiline':False]['text':' Step 12.','line_number':302,'multiline':False]['text':' Step 13.','line_number':305,'multiline':False]['text':' Steps 10-11, 14.','line_number':308,'multiline':False]['text':' Steps 10-11.','line_number':311,'multiline':False]['text':'','line_number':312,'multiline':False]['text':' StringIndexOf doesn't clamp the |position| argument to the input','line_number':313,'multiline':False]['text':' string length, i.e. |StringIndexOf("abc", "", 4)| returns -1,','line_number':314,'multiline':False]['text':' whereas |"abc".indexOf("", 4)| returns 3. That means we need to','line_number':315,'multiline':False]['text':' exit the loop when |nextPosition| is smaller than |position| and','line_number':316,'multiline':False]['text':' not just when |nextPosition| is -1.','line_number':317,'multiline':False]['text':' Step 14.a.','line_number':324,'multiline':False]['text':' Step 14.b (not applicable).','line_number':328,'multiline':False]['text':' Step 14.c.','line_number':330,'multiline':False]['text':' Step 14.d.','line_number':333,'multiline':False]['text':' Step 14.e.','line_number':336,'multiline':False]['text':' Step 11.b.','line_number':339,'multiline':False]['text':' Step 15.','line_number':343,'multiline':False]['text':' Step 15.a.','line_number':345,'multiline':False]['text':' Step 16.','line_number':349,'multiline':False]['text':' If RegExpPrototypeOptimizable succeeds, `exec` and `@@search` are','line_number':363,'multiline':False]['text':' guaranteed to be data properties.','line_number':364,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.15.','line_number':370,'multiline':False]['text':' Step 1.','line_number':372,'multiline':False]['text':' Step 2.','line_number':376,'multiline':False]['text':' Step 2.a.','line_number':379,'multiline':False]['text':' Step 2.b.','line_number':382,'multiline':False]['text':' Step 3.','line_number':387,'multiline':False]['text':' Step 4.','line_number':396,'multiline':False]['text':' Step 5.','line_number':399,'multiline':False]['text':' ES 2016 draft Mar 25, 2016 21.1.3.17.','line_number':411,'multiline':False]['text':' Step 1.','line_number':413,'multiline':False]['text':' Optimized path for string.split(string), especially when both strings','line_number':417,'multiline':False]['text':' are constants.  Following sequence of if's cannot be put together in','line_number':418,'multiline':False]['text':' order that IonMonkey sees the constant if present (bug 1246141).','line_number':419,'multiline':False]['text':' inlineConstantStringSplitString needs both arguments to','line_number':424,'multiline':False]['text':' be MConstant, so pass them directly.','line_number':425,'multiline':False]['text':' Step 2.','line_number':432,'multiline':False]['text':' Step 2.a.','line_number':436,'multiline':False]['text':' Step 2.b.','line_number':439,'multiline':False]['text':' Step 3.','line_number':444,'multiline':False]['text':' Step 6.','line_number':447,'multiline':False]['text':' Step 9.','line_number':452,'multiline':False]['text':' Step 10.','line_number':455,'multiline':False]['text':' Step 11.','line_number':459,'multiline':False]['text':' Steps 4, 8, 12-18.','line_number':463,'multiline':False]['text':' Step 9.','line_number':467,'multiline':False]['text':' Step 11.','line_number':470,'multiline':False]['text':' Optimized path.','line_number':474,'multiline':False]['text':' Steps 4, 8, 12-18.','line_number':475,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':479,'multiline':False]['text':' 21.1.3.22 String.prototype.substring ( start, end )','line_number':480,'multiline':False]['text':' Step 1.','line_number':482,'multiline':False]['text':' Step 2.','line_number':486,'multiline':False]['text':' Step 3.','line_number':489,'multiline':False]['text':' Step 4.','line_number':492,'multiline':False]['text':' Step 5.','line_number':495,'multiline':False]['text':' Step 6.','line_number':498,'multiline':False]['text':' Step 7.','line_number':501,'multiline':False]['text':' Steps 8-9.','line_number':504,'multiline':False]['text':' Step 10.','line_number':514,'multiline':False]['text':' While |from| and |to - from| are bounded to the length of |str| and this','line_number':515,'multiline':False]['text':' and thus definitely in the int32 range, they can still be typed as','line_number':516,'multiline':False]['text':' double. Eagerly truncate since SubstringKernel only accepts int32.','line_number':517,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':522,'multiline':False]['text':' B.2.3.1 String.prototype.substr ( start, length )','line_number':523,'multiline':False]['text':' Steps 1.','line_number':525,'multiline':False]['text':' Step 2.','line_number':529,'multiline':False]['text':' Step 3.','line_number':532,'multiline':False]['text':' Steps 4-5.','line_number':535,'multiline':False]['text':' Use |size| instead of +Infinity to avoid performing calculations with','line_number':537,'multiline':False]['text':' doubles. (The result is the same either way.)','line_number':538,'multiline':False]['text':' Step 6.','line_number':541,'multiline':False]['text':' Step 7.','line_number':545,'multiline':False]['text':' Step 8.','line_number':548,'multiline':False]['text':' Step 9.','line_number':552,'multiline':False]['text':' While |intStart| and |resultLength| are bounded to the length of |str|','line_number':553,'multiline':False]['text':' and thus definitely in the int32 range, they can still be typed as','line_number':554,'multiline':False]['text':' double. Eagerly truncate since SubstringKernel only accepts int32.','line_number':555,'multiline':False]['text':' ES2021 draft rev 12a546b92275a0e2f834017db2727bb9c6f6c8fd','line_number':560,'multiline':False]['text':' 21.1.3.4 String.prototype.concat ( ...args )','line_number':561,'multiline':False]['text':' Note: String.prototype.concat.length is 1.','line_number':562,'multiline':False]['text':' Step 1.','line_number':564,'multiline':False]['text':' Step 2.','line_number':568,'multiline':False]['text':' Specialize for the most common number of arguments for better inlining.','line_number':571,'multiline':False]['text':' Step 3. (implicit)','line_number':582,'multiline':False]['text':' Step 4.','line_number':583,'multiline':False]['text':' Step 5.','line_number':586,'multiline':False]['text':' Steps 5.a-b.','line_number':588,'multiline':False]['text':' Step 5.c.','line_number':590,'multiline':False]['text':' Step 6.','line_number':594,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':598,'multiline':False]['text':' 21.1.3.19 String.prototype.slice ( start, end )','line_number':599,'multiline':False]['text':' Step 1.','line_number':601,'multiline':False]['text':' Step 2.','line_number':605,'multiline':False]['text':' Step 3.','line_number':608,'multiline':False]['text':' Step 4.','line_number':611,'multiline':False]['text':' Step 5.','line_number':614,'multiline':False]['text':' Step 6.','line_number':617,'multiline':False]['text':' Step 7.','line_number':620,'multiline':False]['text':' Step 8.','line_number':623,'multiline':False]['text':' Step 9.','line_number':626,'multiline':False]['text':' While |from| and |span| are bounded to the length of |str|','line_number':627,'multiline':False]['text':' and thus definitely in the int32 range, they can still be typed as','line_number':628,'multiline':False]['text':' double. Eagerly truncate since SubstringKernel only accepts int32.','line_number':629,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':634,'multiline':False]['text':' 21.1.3.3 String.prototype.codePointAt ( pos )','line_number':635,'multiline':False]['text':' Step 1.','line_number':637,'multiline':False]['text':' Step 2.','line_number':641,'multiline':False]['text':' Step 3.','line_number':644,'multiline':False]['text':' Step 4.','line_number':647,'multiline':False]['text':' Step 5.','line_number':650,'multiline':False]['text':' Steps 6-7.','line_number':654,'multiline':False]['text':' Steps 8-9.','line_number':659,'multiline':False]['text':' Step 10.','line_number':664,'multiline':False]['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':668,'multiline':False]['text':' 21.1.3.16 String.prototype.repeat ( count )','line_number':669,'multiline':False]['text':' Step 1.','line_number':671,'multiline':False]['text':' Step 2.','line_number':675,'multiline':False]['text':' Step 3.','line_number':678,'multiline':False]['text':' Step 4.','line_number':681,'multiline':False]['text':' Step 5.','line_number':685,'multiline':False]['text':' Inverted condition to handle |Infinity * 0 = NaN| correctly.','line_number':686,'multiline':False]['text':' Communicate |n|'s possible range to the compiler. We actually use','line_number':690,'multiline':False]['text':' MAX_STRING_LENGTH + 1 as range because that's a valid bit mask. That's','line_number':691,'multiline':False]['text':' fine because it's only used as optimization hint.','line_number':692,'multiline':False]['text':' Steps 6-7.','line_number':699,'multiline':False]['text':' ES6 draft specification, section 21.1.3.27, version 2013-09-27.','line_number':713,'multiline':False]['text':' Step 1.','line_number':715,'multiline':False]['text':' Step 2.','line_number':721,'multiline':False]['text':' Step 3.','line_number':724,'multiline':False]['text':' We know that JSString::MAX_LENGTH <= INT32_MAX (and assert this in','line_number':739,'multiline':False]['text':' SelfHostring.cpp) so our current index can never be anything other than','line_number':740,'multiline':False]['text':' an Int32Value.','line_number':741,'multiline':False]['text':' Communicate |first|'s possible range to the compiler.','line_number':763,'multiline':False]['text':'*
 * Compare this String against that String, using the locale and collation
 * options provided.
 *
 * Spec: ECMAScript Internationalization API Specification, 13.1.1.
 ','line_number':772,'multiline':True]['text':' Step 1.','line_number':779,'multiline':False]['text':' Steps 2-3.','line_number':783,'multiline':False]['text':' Steps 4-5.','line_number':787,'multiline':False]['text':' Step 6.','line_number':791,'multiline':False]['text':' This cache only optimizes for the old ES5 localeCompare without','line_number':794,'multiline':False]['text':' locales and options.','line_number':795,'multiline':False]['text':' Step 7.','line_number':805,'multiline':False]['text':'*
 * 13.1.2 String.prototype.toLocaleLowerCase ( [ locales ] )
 *
 * ES2017 Intl draft rev 94045d234762ad107a3d09bb6f7381a65f1a2f9b
 ','line_number':809,'multiline':True]['text':' Step 1.','line_number':815,'multiline':False]['text':' Step 2.','line_number':819,'multiline':False]['text':' Handle the common cases (no locales argument or a single string','line_number':822,'multiline':False]['text':' argument) first.','line_number':823,'multiline':False]['text':' Steps 3, 6.','line_number':827,'multiline':False]['text':' Steps 3, 5.','line_number':830,'multiline':False]['text':' Step 3.','line_number':833,'multiline':False]['text':' Steps 4-6.','line_number':836,'multiline':False]['text':' Trivial case: When the input is empty, directly return the empty string.','line_number':840,'multiline':False]['text':' Steps 7-16.','line_number':847,'multiline':False]['text':'*
 * 13.1.3 String.prototype.toLocaleUpperCase ( [ locales ] )
 *
 * ES2017 Intl draft rev 94045d234762ad107a3d09bb6f7381a65f1a2f9b
 ','line_number':851,'multiline':True]['text':' Step 1.','line_number':857,'multiline':False]['text':' Step 2.','line_number':861,'multiline':False]['text':' Handle the common cases (no locales argument or a single string','line_number':864,'multiline':False]['text':' argument) first.','line_number':865,'multiline':False]['text':' Steps 3, 6.','line_number':869,'multiline':False]['text':' Steps 3, 5.','line_number':872,'multiline':False]['text':' Step 3.','line_number':875,'multiline':False]['text':' Steps 4-6.','line_number':878,'multiline':False]['text':' Trivial case: When the input is empty, directly return the empty string.','line_number':882,'multiline':False]['text':' Steps 7-16.','line_number':889,'multiline':False]['text':' JS_HAS_INTL_API','line_number':892,'multiline':False]['text':' ES2018 draft rev 8fadde42cf6a9879b4ab0cb6142b31c4ee501667','line_number':894,'multiline':False]['text':' 21.1.2.4 String.raw ( template, ...substitutions )','line_number':895,'multiline':False]['text':', ...substitutions','line_number':896,'multiline':True]['text':' Steps 1-2 (not applicable).','line_number':897,'multiline':False]['text':' Step 3.','line_number':899,'multiline':False]['text':' Step 4.','line_number':902,'multiline':False]['text':' Step 5.','line_number':905,'multiline':False]['text':' Step 6.','line_number':908,'multiline':False]['text':' Special case for |String.raw `<literal>`| callers to avoid falling into','line_number':912,'multiline':False]['text':' the loop code below.','line_number':913,'multiline':False]['text':' Steps 7-9 were reordered to use the arguments object instead of a rest','line_number':917,'multiline':False]['text':' parameter, because the former is currently more optimized.','line_number':918,'multiline':False]['text':'','line_number':919,'multiline':False]['text':' String.raw intersperses the substitution elements between the literal','line_number':920,'multiline':False]['text':' segments, i.e. a substitution is added iff there are still pending','line_number':921,'multiline':False]['text':' literal segments. Furthermore by moving the access to |raw[0]| outside','line_number':922,'multiline':False]['text':' of the loop, we can use |nextIndex| to index into both, the |raw| array','line_number':923,'multiline':False]['text':' and the arguments object.','line_number':924,'multiline':False]['text':' Steps 7 (implicit) and 9.a-c.','line_number':926,'multiline':False]['text':' Steps 8-9, 9.d, and 9.i.','line_number':929,'multiline':False]['text':' Steps 9.e-h.','line_number':931,'multiline':False]['text':' Steps 9.a-c.','line_number':935,'multiline':False]['text':' Step 9.d.i.','line_number':939,'multiline':False]['text':' https://github.com/tc39/proposal-relative-indexing-method','line_number':943,'multiline':False]['text':' String.prototype.at ( index )','line_number':944,'multiline':False]['text':' Step 1.','line_number':946,'multiline':False]['text':' Step 2.','line_number':950,'multiline':False]['text':' Step 3.','line_number':953,'multiline':False]['text':' Step 4.','line_number':956,'multiline':False]['text':' Steps 5-6.','line_number':959,'multiline':False]['text':' Step 7.','line_number':967,'multiline':False]['text':' Step 8.','line_number':972,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.3','line_number':976,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.4','line_number':983,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.5','line_number':990,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.6','line_number':997,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.9','line_number':1004,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.11','line_number':1011,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.12','line_number':1018,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.13','line_number':1025,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.14','line_number':1032,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.2','line_number':1044,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.7','line_number':1052,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.8','line_number':1060,'multiline':False]['text':' ES6 draft 2014-04-27 B.2.3.10','line_number':1068,'multiline':False]