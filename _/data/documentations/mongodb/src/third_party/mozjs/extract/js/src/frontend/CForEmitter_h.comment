['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_STACK_CLASS','line_number':10,'multiline':False]['text':' mozilla::Maybe','line_number':11,'multiline':False]['text':' uint32_t','line_number':13,'multiline':False]['text':' LoopControl','line_number':15,'multiline':False]['text':' BytecodeOffset','line_number':16,'multiline':False]['text':' TDZCheckCache','line_number':17,'multiline':False]['text':' Class for emitting bytecode for c-style for block.','line_number':25,'multiline':False]['text':'','line_number':26,'multiline':False]['text':' Usage: (check for the return value is omitted for simplicity)','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':'   `for (init; cond; update) body`','line_number':29,'multiline':False]['text':'     CForEmitter cfor(this, headLexicalEmitterScopeForLet or nullptr);','line_number':30,'multiline':False]['text':'     cfor.emitInit(Some(offset_of_init));','line_number':31,'multiline':False]['text':'     emit(init); // without pushing value','line_number':32,'multiline':False]['text':'     cfor.emitCond(Some(offset_of_cond));','line_number':33,'multiline':False]['text':'     emit(cond);','line_number':34,'multiline':False]['text':'     cfor.emitBody(CForEmitter::Cond::Present, Some(offset_of_body));','line_number':35,'multiline':False]['text':'     emit(body);','line_number':36,'multiline':False]['text':'     cfor.emitUpdate(CForEmitter::Update::Present, Some(offset_of_update)));','line_number':37,'multiline':False]['text':'     emit(update);','line_number':38,'multiline':False]['text':'     cfor.emitEnd(Some(offset_of_for));','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':'   `for (;;) body`','line_number':41,'multiline':False]['text':'     CForEmitter cfor(this, nullptr);','line_number':42,'multiline':False]['text':'     cfor.emitInit(Nothing());','line_number':43,'multiline':False]['text':'     cfor.emitCond(Nothing());','line_number':44,'multiline':False]['text':'     cfor.emitBody(CForEmitter::Cond::Missing, Some(offset_of_body));','line_number':45,'multiline':False]['text':'     emit(body);','line_number':46,'multiline':False]['text':'     cfor.emitUpdate(CForEmitter::Update::Missing, Nothing());','line_number':47,'multiline':False]['text':'     cfor.emitEnd(Some(offset_of_for));','line_number':48,'multiline':False]['text':'','line_number':49,'multiline':False]['text':' Basic structure of the bytecode (not complete).','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' If `cond` is not empty:','line_number':53,'multiline':False]['text':'     {init}','line_number':54,'multiline':False]['text':'   loop:','line_number':55,'multiline':False]['text':'     JSOp::LoopHead','line_number':56,'multiline':False]['text':'     {cond}','line_number':57,'multiline':False]['text':'     JSOp::JumpIfFalse break','line_number':58,'multiline':False]['text':'     {body}','line_number':59,'multiline':False]['text':'   continue:','line_number':60,'multiline':False]['text':'     {update}','line_number':61,'multiline':False]['text':'     JSOp::Goto loop','line_number':62,'multiline':False]['text':'   break:','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' If `cond` is empty:','line_number':65,'multiline':False]['text':'     {init}','line_number':66,'multiline':False]['text':'   loop:','line_number':67,'multiline':False]['text':'     JSOp::LoopHead','line_number':68,'multiline':False]['text':'     {body}','line_number':69,'multiline':False]['text':'   continue:','line_number':70,'multiline':False]['text':'     {update}','line_number':71,'multiline':False]['text':'     JSOp::Goto loop','line_number':72,'multiline':False]['text':'   break:','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' Whether the c-style for loop has `cond` and `update`.','line_number':82,'multiline':False]['text':' The lexical scope to be freshened for each iteration.','line_number':88,'multiline':False]['text':' See the comment in `emitCond` for more details.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' ### Scope freshening','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' Each iteration of a `for (let V...)` loop creates a fresh loop variable','line_number':93,'multiline':False]['text':' binding for V, even if the loop is a C-style `for(;;)` loop:','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':'     var funcs = [];','line_number':96,'multiline':False]['text':'     for (let i = 0; i < 2; i++)','line_number':97,'multiline':False]['text':'         funcs.push(function() { return i; });','line_number':98,'multiline':False]['text':'     assertEq(funcs[0](), 0);  // the two closures capture...','line_number':99,'multiline':False]['text':'     assertEq(funcs[1](), 1);  // ...two different `i` bindings','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' This is implemented by "freshening" the implicit block -- changing the','line_number':102,'multiline':False]['text':' scope chain to a fresh clone of the instantaneous block object -- each','line_number':103,'multiline':False]['text':' iteration, just before evaluating the "update" in for(;;) loops.','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' ECMAScript doesn't freshen in `for (const ...;;)`.  Lack of freshening','line_number':106,'multiline':False]['text':' isn't directly observable in-language because `const`s can't be mutated,','line_number':107,'multiline':False]['text':' but it *can* be observed in the Debugger API.','line_number':108,'multiline':False]['text':' The state of this emitter.','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' +-------+ emitInit +------+ emitCond +------+ emitBody +------+','line_number':116,'multiline':False]['text':' | Start |--------->| Init |--------->| Cond |--------->| Body |-+','line_number':117,'multiline':False]['text':' +-------+          +------+          +------+          +------+ |','line_number':118,'multiline':False]['text':'                                                                 |','line_number':119,'multiline':False]['text':'                           +-------------------------------------+','line_number':120,'multiline':False]['text':'                           |','line_number':121,'multiline':False]['text':'                           | emitUpdate +--------+ emitEnd +-----+','line_number':122,'multiline':False]['text':'                           +----------->| Update |-------->| End |','line_number':123,'multiline':False]['text':'                                        +--------+         +-----+','line_number':124,'multiline':False]['text':' The initial state.','line_number':126,'multiline':False]['text':' After calling emitInit.','line_number':129,'multiline':False]['text':' After calling emitCond.','line_number':132,'multiline':False]['text':' After calling emitBody.','line_number':135,'multiline':False]['text':' After calling emitUpdate.','line_number':138,'multiline':False]['text':' After calling emitEnd.','line_number':141,'multiline':False]['text':' Parameters are the offset in the source code for each character below:','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':'   for ( x = 10 ; x < 20 ; x ++ ) { f(x); }','line_number':153,'multiline':False]['text':'   ^     ^        ^        ^','line_number':154,'multiline':False]['text':'   |     |        |        |','line_number':155,'multiline':False]['text':'   |     |        |        updatePos','line_number':156,'multiline':False]['text':'   |     |        |','line_number':157,'multiline':False]['text':'   |     |        condPos','line_number':158,'multiline':False]['text':'   |     |','line_number':159,'multiline':False]['text':'   |     initPos','line_number':160,'multiline':False]['text':'   |','line_number':161,'multiline':False]['text':'   forPos','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':' Can be Nothing() if not available.','line_number':164,'multiline':False]['text':' namespace frontend ','line_number':173,'multiline':True]['text':' namespace js ','line_number':174,'multiline':True]['text':' frontend_CForEmitter_h ','line_number':176,'multiline':True]