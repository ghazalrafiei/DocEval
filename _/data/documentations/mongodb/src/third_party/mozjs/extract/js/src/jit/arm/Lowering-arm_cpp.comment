['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' If the box wrapped a double, it needs a new register.','line_number':49,'multiline':False]['text':' Otherwise, we should not define a new register for the payload portion','line_number':69,'multiline':False]['text':' of the output, so bypass defineBox().','line_number':70,'multiline':False]['text':' Note that because we're using BogusTemp(), we do not change the type of','line_number':73,'multiline':False]['text':' the definition. We also do not define the first output as "TYPE",','line_number':74,'multiline':False]['text':' because it has no corresponding payload at (vreg + 1). Also note that','line_number':75,'multiline':False]['text':' although we copy the input's original type for the payload half of the','line_number':76,'multiline':False]['text':' definition, this is only for clarity. BogusTemp() definitions are','line_number':77,'multiline':False]['text':' ignored.','line_number':78,'multiline':False]['text':' An unbox on arm reads in a type tag (either in memory or a register) and','line_number':88,'multiline':False]['text':' a payload. Unlike most instructions consuming a box, we ask for the type','line_number':89,'multiline':False]['text':' second, so that the result can re-use the first input.','line_number':90,'multiline':False]['text':' Swap the order we use the box pieces so we can re-use the payload register.','line_number':105,'multiline':False]['text':' Types and payloads form two separate intervals. If the type becomes dead','line_number':114,'multiline':False]['text':' before the payload, it could be used as a Value without the type being','line_number':115,'multiline':False]['text':' recoverable. Unbox's purpose is to eagerly kill the definition of a type','line_number':116,'multiline':False]['text':' tag, so keeping both alive (for the purpose of gcmaps) is unappealing.','line_number':117,'multiline':False]['text':' Instead, we create a new virtual register.','line_number':118,'multiline':False]['text':' x = !y','line_number':161,'multiline':False]['text':' z = x+y','line_number':171,'multiline':False]['text':' Some operations depend on checking inputs after writing the result, e.g.','line_number':175,'multiline':False]['text':' MulI, but only for bail out paths so useAtStart when no bailouts.','line_number':176,'multiline':False]['text':' See special cases in CodeGeneratorARM::visitMulI64','line_number':201,'multiline':False]['text':' Division instructions are slow. Division by constant denominators can be','line_number':330,'multiline':False]['text':' rewritten to use other instructions.','line_number':331,'multiline':False]['text':' Check for division by a positive power of two, which is an easy and','line_number':334,'multiline':False]['text':' important case to optimize. Note that other optimizations are also','line_number':335,'multiline':False]['text':' possible; division by negative powers of two can be optimized in a','line_number':336,'multiline':False]['text':' similar manner as positive powers of two, and division by other','line_number':337,'multiline':False]['text':' constants can be optimized by a reciprocal multiplication technique.','line_number':338,'multiline':False]['text':' Reuse the input.  Define + use-at-start would create risk that the output','line_number':376,'multiline':False]['text':' uses the same register pair as the input but in reverse order.  Reusing','line_number':377,'multiline':False]['text':' probably has less spilling than the alternative, define + use.','line_number':378,'multiline':False]['text':' For the ARM it is best to keep the 'base' in a register if a bounds check','line_number':741,'multiline':False]['text':' is needed.','line_number':742,'multiline':False]['text':' A bounds check is only skipped for a positive index.','line_number':747,'multiline':False]['text':' The two register pairs must be distinct.','line_number':817,'multiline':False]['text':' If the target is a floating register then we need a temp at the','line_number':830,'multiline':False]['text':' CodeGenerator level for creating the result.','line_number':831,'multiline':False]['text':' Wasm additionally pins the value register to `FetchOpVal64`, but it's','line_number':860,'multiline':False]['text':' unclear why this was deemed necessary.','line_number':861,'multiline':False]['text':' flagTemp= ','line_number':884,'multiline':True]['text':' For a Uint32Array with a known double result we need a temp for','line_number':889,'multiline':False]['text':' the intermediate output.','line_number':890,'multiline':False]['text':'','line_number':891,'multiline':False]['text':' Optimization opportunity (bug 1077317): We can do better by','line_number':892,'multiline':False]['text':' allowing 'value' to remain as an imm32 if it is small enough to','line_number':893,'multiline':False]['text':' fit in an instruction.','line_number':894,'multiline':False]['text':' On arm, map flagTemp to temp1 and outTemp to temp2, at least for now.','line_number':903,'multiline':False]['text':' The three register pairs must be distinct.','line_number':926,'multiline':False]['text':' If the target is a floating register then we need a temp at the','line_number':938,'multiline':False]['text':' CodeGenerator level for creating the result.','line_number':939,'multiline':False]['text':'','line_number':940,'multiline':False]['text':' Optimization opportunity (bug 1077317): We could do better by','line_number':941,'multiline':False]['text':' allowing oldval to remain an immediate, if it is small enough','line_number':942,'multiline':False]['text':' to fit in an instruction.','line_number':943,'multiline':False]['text':' The three register pairs must be distinct.','line_number':985,'multiline':False]['text':' flagTemp= ','line_number':1048,'multiline':True]['text':' temp = ','line_number':1055,'multiline':True]['text':' flagTemp= ','line_number':1056,'multiline':True]['text':' Probably many we want to do here','line_number':1152,'multiline':False]