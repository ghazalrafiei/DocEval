['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * JS function support.
 ','line_number':7,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':41,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':42,'multiline':False]['text':' js::FunctionFlags','line_number':53,'multiline':False]['text':' js::GeneratorKind, js::FunctionAsyncKind','line_number':54,'multiline':False]['text':' js::PlainObject','line_number':62,'multiline':False]['text':' js_*_str','line_number':67,'multiline':False]['text':' js::FrameIter::unaliasedForEachActual','line_number':73,'multiline':False]['text':' FunctionDeclaration or FunctionExpression in sloppy mode.','line_number':146,'multiline':False]['text':' Or asm.js function in sloppy mode.','line_number':160,'multiline':False]['text':' Beware: this function can be invoked on *any* function! That includes','line_number':168,'multiline':False]['text':' natives, strict mode functions, bound functions, arrow functions,','line_number':169,'multiline':False]['text':' self-hosted functions and constructors, asm.js functions, functions with','line_number':170,'multiline':False]['text':' destructuring arguments and/or a rest argument, and probably a few more I','line_number':171,'multiline':False]['text':' forgot. Turn back and save yourself while you still can. It's too late for','line_number':172,'multiline':False]['text':' me.','line_number':173,'multiline':False]['text':' Throw unless the function is a sloppy, normal function.','line_number':175,'multiline':False]['text':' TODO (bug 1057208): ensure semantics are correct for all possible','line_number':176,'multiline':False]['text':' pairings of callee/caller.','line_number':177,'multiline':False]['text':' Return null if this function wasn't found on the stack.','line_number':194,'multiline':False]['text':' Disabling compiling of this script in IonMonkey.  IonMonkey doesn't','line_number':208,'multiline':False]['text':' guarantee |f.arguments| can be fully recovered, so we try to mitigate','line_number':209,'multiline':False]['text':' observing this behavior by detecting its use early.','line_number':210,'multiline':False]['text':' If the function passes the gauntlet, return |undefined|.','line_number':232,'multiline':False]['text':' Beware: this function can be invoked on *any* function! That includes','line_number':242,'multiline':False]['text':' natives, strict mode functions, bound functions, arrow functions,','line_number':243,'multiline':False]['text':' self-hosted functions and constructors, asm.js functions, functions with','line_number':244,'multiline':False]['text':' destructuring arguments and/or a rest argument, and probably a few more I','line_number':245,'multiline':False]['text':' forgot. Turn back and save yourself while you still can. It's too late for','line_number':246,'multiline':False]['text':' me.','line_number':247,'multiline':False]['text':' Throw unless the function is a sloppy, normal function.','line_number':249,'multiline':False]['text':' TODO (bug 1057208): ensure semantics are correct for all possible','line_number':250,'multiline':False]['text':' pairings of callee/caller.','line_number':251,'multiline':False]['text':' Beware!  This function can be invoked on *any* function!  It can't','line_number':263,'multiline':False]['text':' assume it'll never be invoked on natives, strict mode functions, bound','line_number':264,'multiline':False]['text':' functions, or anything else that ordinarily has immutable .caller','line_number':265,'multiline':False]['text':' defined with [[ThrowTypeError]].','line_number':266,'multiline':False]['text':' Also return null if this function wasn't found on the stack.','line_number':272,'multiline':False]['text':' Censor the caller if we don't have full access to it.  If we do, but the','line_number':294,'multiline':False]['text':' caller is a function with strict mode code, throw a TypeError per ES5.','line_number':295,'multiline':False]['text':' If we pass these checks, we can return the computed caller.','line_number':296,'multiline':False]['text':' We just have to return |undefined|, but first we call CallerGetterImpl','line_number':333,'multiline':False]['text':' because we need the same strict-mode and security checks.','line_number':334,'multiline':False]['text':' Assert that fun is not a compiler-created function object, which','line_number':359,'multiline':False]['text':' must never leak to script or embedding code and then be mutated.','line_number':360,'multiline':False]['text':' Also assert that fun is not bound, per the ES5 15.3.4.5 ref above.','line_number':361,'multiline':False]['text':' Make the prototype object an instance of Object with the same parent as','line_number':365,'multiline':False]['text':' the function object itself, unless the function is an ES6 generator.  In','line_number':366,'multiline':False]['text':' that case, per the 15 July 2013 ES6 draft, section 15.19.3, its parent is','line_number':367,'multiline':False]['text':' the GeneratorObjectPrototype singleton.','line_number':368,'multiline':False]['text':' Per ES5 13.2 the prototype's .constructor property is configurable,','line_number':389,'multiline':False]['text':' non-enumerable, and writable.  However, per the 15 July 2013 ES6 draft,','line_number':390,'multiline':False]['text':' section 15.19.3, the .prototype of a generator function does not link','line_number':391,'multiline':False]['text':' back with a .constructor.','line_number':392,'multiline':False]['text':' Per ES5 15.3.5.2 a user-defined function's .prototype property is','line_number':400,'multiline':False]['text':' initially non-configurable, non-enumerable, and writable.','line_number':401,'multiline':False]['text':'
   * Built-in functions do not have a .prototype property per ECMA-262,
   * or (Object.prototype, Function.prototype, etc.) have that property
   * created eagerly.
   *
   * ES5 15.3.4.5: bound functions don't have a prototype property. The
   * isBuiltin() test covers this case because bound functions are self-hosted
   * (scripted) built-ins.
   *
   * ES6 9.2.8 MakeConstructor defines the .prototype property on constructors.
   * Generators are not constructors, but they have a .prototype property
   * anyway, according to errata to ES6. See bug 1191486.
   *
   * Thus all of the following don't get a .prototype property:
   * - Methods (that are not class-constructors or generators)
   * - Arrow functions
   * - Function.prototype
   * - Async functions
   ','line_number':408,'multiline':True]['text':' Self-hosted constructors other than bound functions have a','line_number':436,'multiline':False]['text':' non-configurable .prototype data property.','line_number':437,'multiline':False]['text':' We probably don't have a .prototype property. Avoid the lookup below.','line_number':453,'multiline':False]['text':' Since f.length and f.name are configurable, they could be resolved','line_number':498,'multiline':False]['text':' and then deleted:','line_number':499,'multiline':False]['text':'     function f(x) {}','line_number':500,'multiline':False]['text':'     assertEq(f.length, 1);','line_number':501,'multiline':False]['text':'     delete f.length;','line_number':502,'multiline':False]['text':'     assertEq(f.name, "f");','line_number':503,'multiline':False]['text':'     delete f.name;','line_number':504,'multiline':False]['text':' Afterwards, asking for f.length or f.name again will cause this','line_number':505,'multiline':False]['text':' resolve hook to run again. Defining the property again the second','line_number':506,'multiline':False]['text':' time through would be a bug.','line_number':507,'multiline':False]['text':'     assertEq(f.length, 0);  // gets Function.prototype.length!','line_number':508,'multiline':False]['text':'     assertEq(f.name, "");  // gets Function.prototype.name!','line_number':509,'multiline':False]['text':' We use the RESOLVED_LENGTH and RESOLVED_NAME flags as a hack to prevent','line_number':510,'multiline':False]['text':' this bug.','line_number':511,'multiline':False]['text':' NB: Keep this in sync with CloneInnerInterpretedFunction. ','line_number':560,'multiline':True]['text':' bitmask of FirstWordFlag ','line_number':564,'multiline':True]['text':' Encode the script.','line_number':588,'multiline':False]['text':' Encode a lazy script.','line_number':591,'multiline':False]['text':' Sanity check the flags. We should have cleared the mutable flags already','line_number':633,'multiline':False]['text':' and we do not support self-hosted-lazy, bound or wasm functions.','line_number':634,'multiline':False]['text':' Verify marker at end of function to detect buffer trunction.','line_number':656,'multiline':False]['text':' ES6 (04-25-16) 19.2.3.6 Function.prototype [ @@hasInstance ] ','line_number':672,'multiline':True]['text':' Step 1. ','line_number':681,'multiline':True]['text':' Primitives are non-callable and will always return false from','line_number':684,'multiline':False]['text':' OrdinaryHasInstance.','line_number':685,'multiline':False]['text':' Step 2. ','line_number':693,'multiline':True]['text':'
 * ES6 (4-25-16) 7.3.19 OrdinaryHasInstance
 ','line_number':703,'multiline':True]['text':' Step 1. ','line_number':713,'multiline':True]['text':' Step 2. ','line_number':719,'multiline':True]['text':' Steps 2a-b. ','line_number':721,'multiline':True]['text':' Step 3. ','line_number':730,'multiline':True]['text':' Step 4. ','line_number':736,'multiline':True]['text':' Step 5. ','line_number':742,'multiline':True]['text':'
     * Throw a runtime error if instanceof is called on a function that
     * has a non-object as its .prototype value.
     ','line_number':744,'multiline':True]['text':' Step 6. ','line_number':753,'multiline':True]['text':' Functions can be be marked as interpreted despite having no script','line_number':772,'multiline':False]['text':' yet at some points when parsing, and can be lazy with no lazy script','line_number':773,'multiline':False]['text':' for self-hosted code.','line_number':774,'multiline':False]['text':' Self-hosted scripts are shared with workers but are never','line_number':780,'multiline':False]['text':' relocated. Skip unnecessary writes to prevent the possible data race.','line_number':781,'multiline':False]['text':' NOTE: The u.scripted.s.selfHostedLazy_ does not point to GC things.','line_number':786,'multiline':False]['text':' Self-hosted built-ins should not expose their source code.','line_number':858,'multiline':False]['text':' If we're in toSource mode, put parentheses around lambda functions so','line_number':861,'multiline':False]['text':' that eval returns lambda, not function statement.','line_number':862,'multiline':False]['text':' Fast path for the common case, to avoid StringBuffer overhead.','line_number':873,'multiline':False]['text':' For the toString() output the source representation must match','line_number':907,'multiline':False]['text':' NativeFunction when no source text is available.','line_number':908,'multiline':False]['text':'','line_number':909,'multiline':False]['text':' NativeFunction:','line_number':910,'multiline':False]['text':'   function PropertyName[~Yield,~Await]opt (','line_number':911,'multiline':False]['text':'      FormalParameters[~Yield,~Await] ) { [native code] }','line_number':912,'multiline':False]['text':'','line_number':913,'multiline':False]['text':' Additionally, if |fun| is a well-known intrinsic object and is not','line_number':914,'multiline':False]['text':' identified as an anonymous function, the portion of the returned','line_number':915,'multiline':False]['text':' string that would be matched by IdentifierName must be the initial','line_number':916,'multiline':False]['text':' value of the name property of |fun|.','line_number':917,'multiline':False]['text':' We don't want to fully parse the function's name here because of','line_number':936,'multiline':False]['text':' performance reasons, so only append the name if we're confident it','line_number':937,'multiline':False]['text':' can be matched as the 'PropertyName' grammar production.','line_number':938,'multiline':False]['text':' Built-in getters or setters are classified as normal','line_number':946,'multiline':False]['text':' functions, strip any leading "get " or "set " if present.','line_number':947,'multiline':False]['text':' isToSource = ','line_number':1032,'multiline':True]['text':' isToSource = ','line_number':1052,'multiline':True]['text':' We don't need to do this -- Call would do it for us -- but the error','line_number':1069,'multiline':False]['text':' message is *much* better if we do this here.  (Without this,','line_number':1070,'multiline':False]['text':' JSDVG_SEARCH_STACK tries to decompile |func| as if it were |this| in','line_number':1071,'multiline':False]['text':' the scripted caller's frame -- so for example','line_number':1072,'multiline':False]['text':'','line_number':1073,'multiline':False]['text':'   Function.prototype.call.call({});','line_number':1074,'multiline':False]['text':'','line_number':1075,'multiline':False]['text':' would identify |{}| as |this| as being the result of evaluating','line_number':1076,'multiline':False]['text':' |Function.prototype.call| and would conclude, "Function.prototype.call','line_number':1077,'multiline':False]['text':' is not a function".  Grotesque.)','line_number':1078,'multiline':False]['text':' strip off provided |this|','line_number':1086,'multiline':False]['text':' ES5 15.3.4.3','line_number':1101,'multiline':False]['text':' Step 1.','line_number':1105,'multiline':False]['text':'','line_number':1106,'multiline':False]['text':' Note that we must check callability here, not at actual call time,','line_number':1107,'multiline':False]['text':' because extracting argument values from the provided arraylike might','line_number':1108,'multiline':False]['text':' have side effects or throw an exception.','line_number':1109,'multiline':False]['text':' Step 2.','line_number':1116,'multiline':False]['text':' Step 3.','line_number':1121,'multiline':False]['text':' Steps 4-5 (note erratum removing steps originally numbered 5 and 7 in','line_number':1128,'multiline':False]['text':' original version of ES5).','line_number':1129,'multiline':False]['text':' Step 6.','line_number':1136,'multiline':False]['text':' Steps 7-8.','line_number':1144,'multiline':False]['text':' Step 9.','line_number':1149,'multiline':False]['text':' addProperty','line_number':1164,'multiline':False]['text':' delProperty','line_number':1165,'multiline':False]['text':' enumerate','line_number':1166,'multiline':False]['text':' newEnumerate','line_number':1167,'multiline':False]['text':' resolve','line_number':1168,'multiline':False]['text':' mayResolve','line_number':1169,'multiline':False]['text':' finalize','line_number':1170,'multiline':False]['text':' call','line_number':1171,'multiline':False]['text':' hasInstance','line_number':1172,'multiline':False]['text':' construct','line_number':1173,'multiline':False]['text':' trace','line_number':1174,'multiline':False]['text':' static ','line_number':1199,'multiline':True]['text':' static ','line_number':1218,'multiline':True]['text':' Bound functions' length can have values up to MAX_SAFE_INTEGER, so','line_number':1224,'multiline':False]['text':' they're handled differently from other functions.','line_number':1225,'multiline':False]['text':' static ','line_number':1253,'multiline':True]['text':' static ','line_number':1270,'multiline':True]['text':' Bound functions are never unnamed.','line_number':1276,'multiline':False]['text':' If the bound function prefix is present, return the name as is.','line_number':1279,'multiline':False]['text':' Otherwise return "bound " * (number of bound function targets) + name.','line_number':1284,'multiline':False]['text':' |function /*unnamed*/ (){...}.bind()| is a common case, handle it here.','line_number':1296,'multiline':False]['text':' static ','line_number':1377,'multiline':True]['text':' 9.4.1.3 BoundFunctionCreate, steps 1, 3-5, 8-12 (Already performed).','line_number':1384,'multiline':False]['text':' 9.4.1.3 BoundFunctionCreate, step 6.','line_number':1386,'multiline':False]['text':' 9.4.1.3 BoundFunctionCreate, step 2.','line_number':1391,'multiline':False]['text':' 9.4.1.3 BoundFunctionCreate, step 7.','line_number':1397,'multiline':False]['text':' Try to avoid invoking the resolve hook.','line_number':1406,'multiline':False]['text':' 19.2.3.2 Function.prototype.bind, step 5.','line_number':1417,'multiline':False]['text':' 19.2.3.2 Function.prototype.bind, step 6.','line_number':1424,'multiline':False]['text':' 19.2.3.2 Function.prototype.bind, step 7 (implicit).','line_number':1437,'multiline':False]['text':' 19.2.3.2 Function.prototype.bind, step 8.','line_number':1440,'multiline':False]['text':' Try to avoid invoking the resolve hook.','line_number':1446,'multiline':False]['text':' If the target is a bound function with a prefixed name, we can't','line_number':1451,'multiline':False]['text':' lazily compute the full name in getBoundFunctionName(), therefore','line_number':1452,'multiline':False]['text':' we need to append the bound function name prefix here.','line_number':1453,'multiline':False]['text':' 19.2.3.2 Function.prototype.bind, step 9.','line_number':1467,'multiline':False]['text':' 19.2.3.2 Function.prototype.bind, step 10.','line_number':1473,'multiline':False]['text':' If the target itself is a bound function (with a resolved name), we','line_number':1478,'multiline':False]['text':' can't compute the full name in getBoundFunctionName() based only on','line_number':1479,'multiline':False]['text':' the number of bound target functions, therefore we need to store','line_number':1480,'multiline':False]['text':' the complete prefixed name here.','line_number':1481,'multiline':False]['text':' static ','line_number':1501,'multiline':True]['text':' The function must be same-compartment but might be cross-realm. Make sure','line_number':1507,'multiline':False]['text':' the script is created in the function's realm.','line_number':1508,'multiline':False]['text':' If this function is non-canonical, then use the canonical function first','line_number':1514,'multiline':False]['text':' to get the delazified script. This may result in calling this method','line_number':1515,'multiline':False]['text':' again on the canonical function. This ensures the canonical function is','line_number':1516,'multiline':False]['text':' always non-lazy if any of the clones are non-lazy.','line_number':1517,'multiline':False]['text':' Delazifying the canonical function should naturally make us non-lazy','line_number':1524,'multiline':False]['text':' because we share a BaseScript with the canonical function.','line_number':1525,'multiline':False]['text':' Finally, compile the script if it really doesn't exist.','line_number':1530,'multiline':False]['text':' The frontend shouldn't fail after linking the function and the','line_number':1532,'multiline':False]['text':' non-lazy script together.','line_number':1533,'multiline':False]['text':' static ','line_number':1542,'multiline':True]['text':' The function must be same-compartment but might be cross-realm. Make sure','line_number':1547,'multiline':False]['text':' the script is created in the function's realm.','line_number':1548,'multiline':False]['text':' Lazily cloned self-hosted script. ','line_number':1551,'multiline':True]['text':' Don't relazify functions in compartments that are active.','line_number':1563,'multiline':False]['text':' The caller should have checked we're not in the self-hosting zone (it's','line_number':1573,'multiline':False]['text':' shared with worker runtimes so relazifying functions in it will race).','line_number':1574,'multiline':False]['text':' Don't relazify if the realm is being debugged. The debugger side-tables','line_number':1577,'multiline':False]['text':' such as the set of active breakpoints require bytecode to exist.','line_number':1578,'multiline':False]['text':' Don't relazify if we are collecting coverage so that we do not lose count','line_number':1583,'multiline':False]['text':' information.','line_number':1584,'multiline':False]['text':' Check the script's eligibility.','line_number':1589,'multiline':False]['text':' There must not be any JIT code attached since the relazification process','line_number':1596,'multiline':False]['text':' does not know how to discard it. In general, the GC should discard most JIT','line_number':1597,'multiline':False]['text':' code before attempting relazification.','line_number':1598,'multiline':False]['text':' This is a lazy clone of a self-hosted builtin. It has no BaseScript, and','line_number':1614,'multiline':False]['text':' `this->flags_` does not contain the generator kind. Consult the','line_number':1615,'multiline':False]['text':' implementation in the self-hosting realm, which has a BaseScript.','line_number':1616,'multiline':False]['text':' ES2018 draft rev 2aea8f3e617b49df06414eb062ab44fad87661d3','line_number':1622,'multiline':False]['text':' 19.2.1.1.1 CreateDynamicFunction( constructor, newTarget, kind, args )','line_number':1623,'multiline':False]['text':' Steps 1-5.','line_number':1629,'multiline':False]['text':' Steps 10, 14.d.','line_number':1688,'multiline':False]['text':' Steps 14.a-b, 14.d.i-ii.','line_number':1692,'multiline':False]['text':' Steps 14.b, 14.d.iii.','line_number':1698,'multiline':False]['text':' Step 14.d.iii.','line_number':1704,'multiline':False]['text':' Remember the position of ")".','line_number':1716,'multiline':False]['text':' Steps 13, 14.e, 15.','line_number':1725,'multiline':False]['text':' The parser only accepts two byte strings.','line_number':1736,'multiline':False]['text':' Block this call if security callbacks forbid it.','line_number':1746,'multiline':False]['text':' Steps 7.a-b, 8.a-b, 9.a-b, 16-28.','line_number':1754,'multiline':False]['text':' Steps 6, 29.','line_number':1809,'multiline':False]['text':' Steps 7.d, 8.d (implicit).','line_number':1815,'multiline':False]['text':' Call SetPrototype if an explicit prototype was given.','line_number':1816,'multiline':False]['text':' Step 38.','line_number':1821,'multiline':False]['text':' Note: this should be kept in sync with','line_number':1886,'multiline':False]['text':' FunctionBox::needsCallObjectRegardlessOfBindings().','line_number':1887,'multiline':False]['text':' = nullptr ','line_number':1897,'multiline':True]['text':' = AllocKind::FUNCTION ','line_number':1898,'multiline':True]['text':' = GenericObject ','line_number':1899,'multiline':True]['text':' = nullptr ','line_number':1900,'multiline':True]['text':' Assert that the terminating environment is null, global, or a debug','line_number':1922,'multiline':False]['text':' scope proxy. All other cases of polluting global scope behavior are','line_number':1923,'multiline':False]['text':' handled by EnvironmentObjects (viz. non-syntactic DynamicWithObject and','line_number':1924,'multiline':False]['text':' NonSyntacticVariablesObject).','line_number':1925,'multiline':False]['text':' = AllocKind::FUNCTION ','line_number':1935,'multiline':True]['text':' = GenericObject ','line_number':1936,'multiline':True]['text':' NOTE: Keep this in sync with `CreateFunctionFast` in Stencil.cpp','line_number':1942,'multiline':False]['text':' Disallow flags that require special union arms to be initialized.','line_number':1954,'multiline':False]['text':' Initialize all function members. ','line_number':1958,'multiline':True]['text':' Self-hosted functions have null [[Prototype]]. This allows self-hosting to','line_number':1979,'multiline':False]['text':' support generators, despite this loop in the builtin object graph:','line_number':1980,'multiline':False]['text':' - %Generator%.prototype.[[Prototype]] is Iterator.prototype;','line_number':1981,'multiline':False]['text':' - Iterator.prototype has self-hosted methods (iterator helpers).','line_number':1982,'multiline':False]['text':' Don't need to clone the script if newEnclosingEnv is a syntactic scope,','line_number':2019,'multiline':False]['text':' since in that case we have some actual scope objects on our scope chain and','line_number':2020,'multiline':False]['text':' whatnot; whoever put them there should be responsible for setting our','line_number':2021,'multiline':False]['text':' script's flags appropriately.  We hit this case for JSOp::Lambda, for','line_number':2022,'multiline':False]['text':' example.','line_number':2023,'multiline':False]['text':' We need to clone the script if we're not already marked as having a','line_number':2028,'multiline':False]['text':' non-syntactic scope. The HasNonSyntacticScope flag is not computed for lazy','line_number':2029,'multiline':False]['text':' scripts so fallback to checking the scope chain.','line_number':2030,'multiline':False]['text':' = nullptr ','line_number':2124,'multiline':True]['text':' proto = ','line_number':2166,'multiline':True]['text':' proto = ','line_number':2186,'multiline':True]['text':' Step 4.a.','line_number':2198,'multiline':False]['text':' Step 4.b, no prefix fastpath.','line_number':2201,'multiline':False]['text':' Step 5 (reordered).','line_number':2206,'multiline':False]['text':' Step 4.b.','line_number':2218,'multiline':False]['text':' Note: Private symbols are wedged in, as implementation wise they're','line_number':2220,'multiline':False]['text':' PrivateNameSymbols with a the source level name as a description','line_number':2221,'multiline':False]['text':' i.e. obj.#f desugars to obj.[PrivateNameSymbol("#f")], however','line_number':2222,'multiline':False]['text':' they don't use the symbol naming, but rather property naming.','line_number':2223,'multiline':False]['text':' Step 4.c.','line_number':2229,'multiline':False]['text':'
 * Return an atom for use as the name of a builtin method with the given
 * property id.
 *
 * Function names are always strings. If id is the well-known @@iterator
 * symbol, this returns "[Symbol.iterator]".  If a prefix is supplied the final
 * name is |prefix + " " + name|.
 *
 * Implements steps 3-5 of 9.2.11 SetFunctionName in ES2016.
 ','line_number':2267,'multiline':True]['text':' = FunctionPrefixKind::None ','line_number':2279,'multiline':True]['text':' No prefix fastpath.','line_number':2282,'multiline':False]['text':' Step 3 (implicit).','line_number':2287,'multiline':False]['text':' Step 4.','line_number':2289,'multiline':False]['text':' Step 5.','line_number':2294,'multiline':False]['text':' `fun` is a newly created function, so it can't already have an inferred','line_number':2303,'multiline':False]['text':' name.','line_number':2304,'multiline':False]['text':' Anonymous functions should neither have an own 'name' property nor a','line_number':2307,'multiline':False]['text':' resolved name at this point.','line_number':2308,'multiline':False]['text':' = AllocKind::FUNCTION ','line_number':2326,'multiline':True]['text':' namespace detail','line_number':2418,'multiline':False]['text':' namespace JS','line_number':2419,'multiline':False]