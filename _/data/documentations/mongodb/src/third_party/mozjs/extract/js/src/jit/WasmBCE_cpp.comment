['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' The Wasm Bounds Check Elimination (BCE) pass looks for bounds checks','line_number':21,'multiline':False]['text':' on SSA values that have already been checked. (in the same block or in a','line_number':22,'multiline':False]['text':' dominating block). These bounds checks are redundant and thus eliminated.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' Note: This is safe in the presense of dynamic memory sizes as long as they','line_number':25,'multiline':False]['text':' can ONLY GROW. If we allow SHRINKING the heap, this pass should be','line_number':26,'multiline':False]['text':' RECONSIDERED.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' TODO (dbounov): Are there a lot of cases where there is no single dominating','line_number':29,'multiline':False]['text':' check, but a set of checks that together dominate a redundant check?','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' TODO (dbounov): Generalize to constant additions relative to one base','line_number':32,'multiline':False]['text':' Map for dominating block where a given definition was checked','line_number':35,'multiline':False]['text':' Eliminate constant-address bounds checks to addresses below','line_number':49,'multiline':False]['text':' the heap minimum.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' The payload of the MConstant will be Double if the constant','line_number':52,'multiline':False]['text':' result is above 2^31-1, but we don't care about that for BCE.','line_number':53,'multiline':False]['text':' If all incoming values to a phi node are safe (i.e. have a','line_number':91,'multiline':False]['text':' check that dominates this block) then we can consider this','line_number':92,'multiline':False]['text':' phi node checked.','line_number':93,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' Note that any phi that is part of a cycle','line_number':95,'multiline':False]['text':' will not be "safe" since the value coming on the backedge','line_number':96,'multiline':False]['text':' cannot be in lastSeen because its block hasn't been traversed yet.','line_number':97,'multiline':False]