['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]['text':' All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]['text':'     specific prior written permission.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]['text':' Supervisor Call (svc) specific support.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' The SVC instruction encodes an optional 16-bit immediate value.','line_number':38,'multiline':False]['text':' The simulator understands the codes below.','line_number':39,'multiline':False]['text':' Transition to x86_64 C code.','line_number':41,'multiline':False]['text':' Push the current SP on a special Simulator stack.','line_number':42,'multiline':False]['text':' Pop from the special Simulator stack and compare to SP.','line_number':43,'multiline':False]['text':' Callee saved registers are x21-x30(lr).','line_number':49,'multiline':False]['text':' Callee saved FP registers are d8-d15. Note that the high parts of v8-v15 are','line_number':52,'multiline':False]['text':' still caller-saved.','line_number':53,'multiline':False]['text':' Register fields ','line_number':64,'multiline':True]['text':' Destination register.        ','line_number':65,'multiline':True]['text':' First source register.       ','line_number':66,'multiline':True]['text':' Second source register.      ','line_number':67,'multiline':True]['text':' Third source register.       ','line_number':68,'multiline':True]['text':' Load/store register.         ','line_number':69,'multiline':True]['text':' Load/store second register.  ','line_number':70,'multiline':True]['text':' Exclusive access status.     ','line_number':71,'multiline':True]['text':' Common bits ','line_number':73,'multiline':True]['text':' PC relative addressing ','line_number':77,'multiline':True]['text':' Add/subtract/logical shift register ','line_number':81,'multiline':True]['text':' Add/subtract immediate ','line_number':85,'multiline':True]['text':' Add/substract extend ','line_number':89,'multiline':True]['text':' Move wide ','line_number':93,'multiline':True]['text':' Logical immediate, bitfield and extract ','line_number':97,'multiline':True]['text':' Test and branch immediate ','line_number':104,'multiline':True]['text':' Conditionals ','line_number':109,'multiline':True]['text':' Floating point ','line_number':116,'multiline':True]['text':' Load Store ','line_number':121,'multiline':True]['text':' Other immediates ','line_number':134,'multiline':True]['text':' System (MRS, MSR, SYS) ','line_number':143,'multiline':True]['text':' Load-/store-exclusive ','line_number':152,'multiline':True]['text':' NEON generic fields ','line_number':159,'multiline':True]['text':' NEON Modified Immediate fields ','line_number':171,'multiline':True]['text':' NEON Shift Immediate fields ','line_number':177,'multiline':True]['text':' NZCV ','line_number':183,'multiline':True]['text':' FPCR ','line_number':190,'multiline':True]['text':' Fields offsets.','line_number':197,'multiline':False]['text':' ImmPCRel is a compound field (not present in INSTRUCTION_FIELDS_LIST), formed','line_number':208,'multiline':False]['text':' from ImmPCRelLo and ImmPCRelHi.','line_number':209,'multiline':False]['text':' Condition codes.','line_number':212,'multiline':False]['text':' Z set            Equal.','line_number':214,'multiline':False]['text':' Z clear          Not equal.','line_number':215,'multiline':False]['text':' C set            Carry set.','line_number':216,'multiline':False]['text':' C clear          Carry clear.','line_number':217,'multiline':False]['text':' N set            Negative.','line_number':218,'multiline':False]['text':' N clear          Positive or zero.','line_number':219,'multiline':False]['text':' V set            Overflow.','line_number':220,'multiline':False]['text':' V clear          No overflow.','line_number':221,'multiline':False]['text':' C set, Z clear   Unsigned higher.','line_number':222,'multiline':False]['text':' C clear or Z set Unsigned lower or same.','line_number':223,'multiline':False]['text':' N == V           Greater or equal.','line_number':224,'multiline':False]['text':' N != V           Less than.','line_number':225,'multiline':False]['text':' Z clear, N == V  Greater than.','line_number':226,'multiline':False]['text':' Z set or N != V  Less then or equal','line_number':227,'multiline':False]['text':'                  Always.','line_number':228,'multiline':False]['text':' Behaves as always/al.','line_number':229,'multiline':False]['text':' Aliases.','line_number':231,'multiline':False]['text':' C set            Unsigned higher or same.','line_number':232,'multiline':False]['text':' C clear          Unsigned lower.','line_number':233,'multiline':False]['text':' Mozilla expanded aliases.','line_number':235,'multiline':False]['text':' Conditions al and nv behave identically, as "always true". They can't be','line_number':255,'multiline':False]['text':' inverted, because there is no "always false" condition.','line_number':256,'multiline':False]['text':' Derive the flag combinations from the system register bit descriptions.','line_number':274,'multiline':False]['text':' Floating-point comparison results.','line_number':291,'multiline':False]['text':' These correspond to the values of the CRm:op2 fields in the equivalent HINT','line_number':341,'multiline':False]['text':' instruction.','line_number':342,'multiline':False]['text':' Set when executing any instruction on a guarded page, except those cases','line_number':385,'multiline':False]['text':' listed below.','line_number':386,'multiline':False]['text':' Set when an indirect branch is taken from an unguarded page to a guarded','line_number':389,'multiline':False]['text':' page, or from a guarded page to ip0 or ip1 (x16 or x17), eg "br ip0".','line_number':390,'multiline':False]['text':' Set when an indirect branch and link (call) is taken, eg. "blr x0".','line_number':393,'multiline':False]['text':' Set when an indirect branch is taken from a guarded page to a register','line_number':396,'multiline':False]['text':' that is not ip0 or ip1 (x16 or x17), eg, "br x0".','line_number':397,'multiline':False]['text':' System/special register names.','line_number':412,'multiline':False]['text':' This information is not encoded as one field but as the concatenation of','line_number':413,'multiline':False]['text':' multiple fields (Op0, Op1, Crn, Crm, Op2).','line_number':414,'multiline':False]['text':' Random number.','line_number':418,'multiline':False]['text':' Reseeded random number.','line_number':419,'multiline':False]['text':' Instruction enumerations.','line_number':445,'multiline':False]['text':'','line_number':446,'multiline':False]['text':' These are the masks that define a class of instructions, and the list of','line_number':447,'multiline':False]['text':' instructions within each class. Each enumeration has a Fixed, FMask and','line_number':448,'multiline':False]['text':' Mask value.','line_number':449,'multiline':False]['text':'','line_number':450,'multiline':False]['text':' Fixed: The fixed bits in this instruction class.','line_number':451,'multiline':False]['text':' FMask: The mask used to extract the fixed bits in the class.','line_number':452,'multiline':False]['text':' Mask:  The mask used to identify the instructions within a class.','line_number':453,'multiline':False]['text':'','line_number':454,'multiline':False]['text':' The enumerations can be used like this:','line_number':455,'multiline':False]['text':'','line_number':456,'multiline':False]['text':' VIXL_ASSERT(instr->Mask(PCRelAddressingFMask) == PCRelAddressingFixed);','line_number':457,'multiline':False]['text':' switch(instr->Mask(PCRelAddressingMask)) {','line_number':458,'multiline':False]['text':'   case ADR:  Format("adr 'Xd, 'AddrPCRelByte"); break;','line_number':459,'multiline':False]['text':'   case ADRP: Format("adrp 'Xd, 'AddrPCRelPage"); break;','line_number':460,'multiline':False]['text':'   default:   printf("Unknown instruction\n");','line_number':461,'multiline':False]['text':' }','line_number':462,'multiline':False]['text':' Generic fields.','line_number':465,'multiline':False]['text':' PC relative addressing.','line_number':519,'multiline':False]['text':' Add/sub (immediate, shifted and extended.)','line_number':528,'multiline':False]['text':' Add/sub with carry.','line_number':578,'multiline':False]['text':' Rotate right into flags.','line_number':595,'multiline':False]['text':' Evaluate into flags.','line_number':603,'multiline':False]['text':' Logical (immediate and shifted register).','line_number':612,'multiline':False]['text':' Logical immediate.','line_number':626,'multiline':False]['text':' Logical shifted register.','line_number':641,'multiline':False]['text':' Move wide immediate.','line_number':672,'multiline':False]['text':' Bitfield.','line_number':688,'multiline':False]['text':' Bitfield N field.','line_number':703,'multiline':False]['text':' Extract.','line_number':706,'multiline':False]['text':' Unconditional branch.','line_number':716,'multiline':False]['text':' Unconditional branch to register.','line_number':725,'multiline':False]['text':' Compare and branch.','line_number':746,'multiline':False]['text':' Test and branch.','line_number':759,'multiline':False]['text':' Conditional branch.','line_number':768,'multiline':False]['text':' System.','line_number':776,'multiline':False]['text':' System instruction encoding is complicated because some instructions use op','line_number':777,'multiline':False]['text':' and CR fields to encode parameters. To handle this cleanly, the system','line_number':778,'multiline':False]['text':' instructions are split into more than one enum.','line_number':779,'multiline':False]['text':' Exception.','line_number':817,'multiline':False]['text':' XPACLRI has the same fixed mask as System Hints and needs to be handled','line_number':865,'multiline':False]['text':' differently.','line_number':866,'multiline':False]['text':' Any load or store.','line_number':870,'multiline':False]['text':' Any load pair or store pair.','line_number':876,'multiline':False]['text':' Load/store pair (post, pre and offset.)','line_number':895,'multiline':False]['text':' Load with pointer authentication.','line_number':952,'multiline':False]['text':' Load literal.','line_number':964,'multiline':False]['text':' Load/store (post, pre, offset and unsigned.)','line_number':1003,'multiline':False]['text':' Load/store unscaled offset.','line_number':1014,'multiline':False]['text':' Load/store post index.','line_number':1026,'multiline':False]['text':' Load/store pre index.','line_number':1037,'multiline':False]['text':' Load/store unsigned offset.','line_number':1048,'multiline':False]['text':' Load/store register offset.','line_number':1060,'multiline':False]['text':' v8.1 Load/store LORegion ops','line_number':1109,'multiline':False]['text':' v8.1 Load/store exclusive ops','line_number':1119,'multiline':False]['text':' Load/store RCpc unscaled offset.','line_number':1153,'multiline':False]['text':' Atomic memory.','line_number':1183,'multiline':False]['text':' Conditional compare.','line_number':1234,'multiline':False]['text':' Conditional compare register.','line_number':1241,'multiline':False]['text':' Conditional compare immediate.','line_number':1252,'multiline':False]['text':' Conditional select.','line_number':1263,'multiline':False]['text':' Data processing 1 source.','line_number':1282,'multiline':False]['text':' Pointer authentication instructions in Armv8.3.','line_number':1304,'multiline':False]['text':' Data processing 2 source.','line_number':1325,'multiline':False]['text':' Data processing 3 source.','line_number':1359,'multiline':False]['text':' Floating point compare.','line_number':1378,'multiline':False]['text':' Floating point conditional compare.','line_number':1401,'multiline':False]['text':' Floating point conditional select.','line_number':1416,'multiline':False]['text':' Floating point immediate.','line_number':1427,'multiline':False]['text':' Floating point data processing 1 source.','line_number':1437,'multiline':False]['text':' Floating point data processing 2 source.','line_number':1506,'multiline':False]['text':' Floating point data processing 3 source.','line_number':1549,'multiline':False]['text':' Conversion between floating point and integer.','line_number':1568,'multiline':False]['text':' Conversion between fixed point and floating point.','line_number':1670,'multiline':False]['text':' Crypto - two register SHA.','line_number':1705,'multiline':False]['text':' Crypto - three register SHA.','line_number':1711,'multiline':False]['text':' Crypto - AES.','line_number':1717,'multiline':False]['text':' NEON instructions with two register operands.','line_number':1723,'multiline':False]['text':' These instructions use only one bit of the size field. The other bit is','line_number':1763,'multiline':False]['text':' used to distinguish between instructions.','line_number':1764,'multiline':False]['text':' NEON instructions with two register operands (FP16).','line_number':1809,'multiline':False]['text':' NEON instructions with three same-type operands.','line_number':1845,'multiline':False]['text':' NEON floating point instructions with three same-type operands.','line_number':1897,'multiline':False]['text':' NEON logical instructions with three same-type operands.','line_number':1926,'multiline':False]['text':' FHM (FMLAL-like) instructions have an oddball encoding scheme under 3Same.','line_number':1940,'multiline':False]['text':' U  size  opcode','line_number':1941,'multiline':False]['text':' 0    00   11101','line_number':1942,'multiline':False]['text':' 1    00   11001','line_number':1943,'multiline':False]['text':' 0    10   11101','line_number':1944,'multiline':False]['text':' 1    10   11001','line_number':1945,'multiline':False]['text':' 'Extra' NEON instructions with three same-type operands.','line_number':1978,'multiline':False]['text':' v8.3 Complex Numbers ','line_number':1989,'multiline':True]['text':' FCMLA fixes opcode<3:2>, and uses opcode<1:0> to encode <rotate>.','line_number':1992,'multiline':False]['text':' FCADD fixes opcode<3:2, 0>, and uses opcode<1> to encode <rotate>.','line_number':1995,'multiline':False]['text':' Other encodings under NEON3SameExtraFCFMask are UNALLOCATED.','line_number':1998,'multiline':False]['text':' NEON instructions with three different-type operands.','line_number':2001,'multiline':False]['text':' NEON instructions operating across vectors.','line_number':2060,'multiline':False]['text':' NEON floating point across instructions.','line_number':2081,'multiline':False]['text':' NEON instructions with indexed element operand.','line_number':2092,'multiline':False]['text':' Floating point instructions.','line_number':2121,'multiline':False]['text':' FMLAL-like instructions.','line_number':2129,'multiline':False]['text':' For all cases: U = x, size = 10, opcode = xx00','line_number':2130,'multiline':False]['text':' Complex instruction(s).','line_number':2139,'multiline':False]['text':' This is necessary because the 'rot' encoding moves into the','line_number':2140,'multiline':False]['text':' NEONByIndex..Mask space.','line_number':2141,'multiline':False]['text':' NEON register copy.','line_number':2146,'multiline':False]['text':' NEON extract.','line_number':2165,'multiline':False]['text':' NEON load/store multiple structures.','line_number':2184,'multiline':False]['text':' NEON load/store multiple structures with post-index addressing.','line_number':2208,'multiline':False]['text':' NEON load/store single structure.','line_number':2244,'multiline':False]['text':' NEON load/store single structure with post-index addressing.','line_number':2309,'multiline':False]['text':' NEON modified immediate.','line_number':2356,'multiline':False]['text':' NEON shift immediate.','line_number':2368,'multiline':False]['text':' NEON table.','line_number':2404,'multiline':False]['text':' NEON perm.','line_number':2420,'multiline':False]['text':' NEON scalar instructions with two register operands.','line_number':2433,'multiline':False]['text':' NEON instructions with two register operands (FP16).','line_number':2480,'multiline':False]['text':' NEON scalar instructions with three same-type operands.','line_number':2507,'multiline':False]['text':' NEON floating point scalar instructions with three same-type operands.','line_number':2535,'multiline':False]['text':' NEON scalar instructions with three different-type operands.','line_number':2550,'multiline':False]['text':' NEON scalar instructions with indexed element operand.','line_number':2560,'multiline':False]['text':' Floating point instructions.','line_number':2580,'multiline':False]['text':' NEON scalar register copy.','line_number':2591,'multiline':False]['text':' NEON scalar pairwise instructions.','line_number':2599,'multiline':False]['text':' NEON scalar shift immediate.','line_number':2617,'multiline':False]['text':' Unimplemented and unallocated instructions. These are defined to make fixed','line_number':2656,'multiline':False]['text':' bit assertion easier.','line_number':2657,'multiline':False]['text':' Instruction bit pattern for an undefined instruction, that will trigger a','line_number':2668,'multiline':False]['text':' SIGILL at runtime.','line_number':2669,'multiline':False]['text':'','line_number':2670,'multiline':False]['text':' A couple of strategies we can use here. There are no unencoded','line_number':2671,'multiline':False]['text':' instructions in the instruction set that are guaranteed to remain that','line_number':2672,'multiline':False]['text':' way.  However there are some currently (as of 2018) unencoded','line_number':2673,'multiline':False]['text':' instructions that are good candidates.','line_number':2674,'multiline':False]['text':'','line_number':2675,'multiline':False]['text':' Ideally, unencoded instructions should be non-destructive to the register','line_number':2676,'multiline':False]['text':' state, and should be unencoded at all exception levels.','line_number':2677,'multiline':False]['text':'','line_number':2678,'multiline':False]['text':' At the trap the pc will hold the address of the offending instruction.','line_number':2679,'multiline':False]['text':'','line_number':2680,'multiline':False]['text':' Some candidates for unencoded instructions:','line_number':2681,'multiline':False]['text':'','line_number':2682,'multiline':False]['text':' 0xd4a00000 (essentially dcps0, a good one since it is nonsensical and may','line_number':2683,'multiline':False]['text':'             remain unencoded in the future for that reason)','line_number':2684,'multiline':False]['text':' 0x33000000 (bfm variant)','line_number':2685,'multiline':False]['text':' 0xd67f0000 (br variant)','line_number':2686,'multiline':False]['text':' 0x5ac00c00 (rbit variant)','line_number':2687,'multiline':False]['text':'','line_number':2688,'multiline':False]['text':' This instruction is "dcps0", also has 16-bit payload if needed.','line_number':2689,'multiline':False]['text':' namespace vixl','line_number':2692,'multiline':False]['text':' VIXL_A64_CONSTANTS_A64_H_','line_number':2694,'multiline':False]