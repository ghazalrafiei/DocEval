['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' Provides checked integers, detecting integer overflow and divide-by-0. ','line_number':7,'multiline':True]['text':' Probe for builtin math overflow support.  Disabled for 32-bit builds for now','line_number':22,'multiline':False]['text':' since "gcc -m32" claims to support these but its implementation is buggy.','line_number':23,'multiline':False]['text':' https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82274','line_number':24,'multiline':False]['text':' Also disabled for clang before version 7 (resp. Xcode clang 10.0.1): while','line_number':25,'multiline':False]['text':' clang 5 and 6 have a working __builtin_add_overflow, it is not constexpr.','line_number':26,'multiline':False]['text':' (clang also defines __GNUC__ but it supports __has_builtin since at least','line_number':37,'multiline':False]['text':'  v3.1 (released in 2012) so it won't get here.)','line_number':38,'multiline':False]['text':'
 * Step 1: manually record supported types
 *
 * What's nontrivial here is that there are different families of integer
 * types: basic integer types and stdint types. It is merrily undefined which
 * types from one family may be just typedefs for a type from another family.
 *
 * For example, on GCC 4.6, aside from the basic integer types, the only other
 * type that isn't just a typedef for some of them, is int8_t.
 ','line_number':56,'multiline':True]['text':'
 * Step 2: Implement the actual validity checks.
 *
 * Ideas taken from IntegerLib, code different.
 ','line_number':174,'multiline':True]['text':' In C++, right bit shifts on negative values is undefined by the standard.','line_number':193,'multiline':False]['text':' Notice that signed-to-unsigned conversions are always well-defined in the','line_number':194,'multiline':False]['text':' standard, as the value congruent modulo 2**n as expected. By contrast,','line_number':195,'multiline':False]['text':' unsigned-to-signed is only well-defined if the value is representable.','line_number':196,'multiline':False]['text':' Bitwise ops may return a larger type, so it's good to use this inline','line_number':200,'multiline':False]['text':' helper guaranteeing that the result is really of type T.','line_number':201,'multiline':False]['text':' Addition is valid if the sign of aX+aY is equal to either that of aX or','line_number':278,'multiline':False]['text':' that of aY. Since the value of aX+aY is undefined if we have a signed','line_number':279,'multiline':False]['text':' type, we compute it using the unsigned type of the same size.  Beware!','line_number':280,'multiline':False]['text':' These bitwise operations can return a larger integer type, if T was a','line_number':281,'multiline':False]['text':' small type like int8_t, so we explicitly cast to T.','line_number':282,'multiline':False]['text':' Subtraction is valid if either aX and aY have same sign, or aX-aY and aX','line_number':299,'multiline':False]['text':' have same sign. Since the value of aX-aY is undefined if we have a signed','line_number':300,'multiline':False]['text':' type, we compute it using the unsigned type of the same size.','line_number':301,'multiline':False]['text':' If we reach this point, we know that aX < 0.','line_number':339,'multiline':False]['text':' Keep in mind that in the signed case, min/-1 is invalid because','line_number':363,'multiline':False]['text':' abs(min)>max.','line_number':364,'multiline':False]['text':'
 * Mod is pretty simple.
 * For now, let's just use the ANSI C definition:
 * If aX or aY are negative, the results are implementation defined.
 *   Consider these invalid.
 * Undefined for aY=0.
 * The result will never exceed either aX or aY.
 *
 * Checking that aX>=0 is a warning when T is unsigned.
 ','line_number':377,'multiline':True]['text':' Handle negation separately for signed/unsigned, for simpler code and to','line_number':409,'multiline':False]['text':' avoid an MSVC warning negating an unsigned value.','line_number':410,'multiline':False]['text':' Watch out for the min-value, which (with twos-complement) can't be','line_number':419,'multiline':False]['text':' negated as -min-value is then (max-value + 1).','line_number':420,'multiline':False]['text':' For some T, arithmetic ops automatically promote to a wider type, so
     * explitly do the narrowing cast here.  The narrowing cast is valid because
     * we did the check for min value above. ','line_number':424,'multiline':True]['text':' namespace detail','line_number':431,'multiline':False]['text':'
 * Step 3: Now define the CheckedInt class.
 ','line_number':433,'multiline':True]['text':'*
 * @class CheckedInt
 * @brief Integer wrapper class checking for integer overflow and other errors
 * @param T the integer type to wrap. Can be any type among the following:
 *            - any basic integer type such as |int|
 *            - any stdint type such as |int8_t|
 *
 * This class implements guarded integer arithmetic. Do a computation, check
 * that isValid() returns true, you then have a guarantee that no problem, such
 * as integer overflow, happened during this computation, and you can call
 * value() to get the plain integer value.
 *
 * The arithmetic operators in this class are guaranteed not to raise a signal
 * (e.g. in case of a division by zero).
 *
 * For example, suppose that you want to implement a function that computes
 * (aX+aY)/aZ, that doesn't crash if aZ==0, and that reports on error (divide by
 * zero or integer overflow). You could code it as follows:
   @code
   bool computeXPlusYOverZ(int aX, int aY, int aZ, int* aResult)
   {
     CheckedInt<int> checkedResult = (CheckedInt<int>(aX) + aY) / aZ;
     if (checkedResult.isValid()) {
       *aResult = checkedResult.value();
       return true;
     } else {
       return false;
     }
   }
   @endcode
 *
 * Implicit conversion from plain integers to checked integers is allowed. The
 * plain integer is checked to be in range before being casted to the
 * destination type. This means that the following lines all compile, and the
 * resulting CheckedInts are correctly detected as valid or invalid:
 * @code
   // 1 is of type int, is found to be in range for uint8_t, x is valid
   CheckedInt<uint8_t> x(1);
   // -1 is of type int, is found not to be in range for uint8_t, x is invalid
   CheckedInt<uint8_t> x(-1);
   // -1 is of type int, is found to be in range for int8_t, x is valid
   CheckedInt<int8_t> x(-1);
   // 1000 is of type int16_t, is found not to be in range for int8_t,
   // x is invalid
   CheckedInt<int8_t> x(int16_t(1000));
   // 3123456789 is of type uint32_t, is found not to be in range for int32_t,
   // x is invalid
   CheckedInt<int32_t> x(uint32_t(3123456789));
 * @endcode
 * Implicit conversion from
 * checked integers to plain integers is not allowed. As shown in the
 * above example, to get the value of a checked integer as a normal integer,
 * call value().
 *
 * Arithmetic operations between checked and plain integers is allowed; the
 * result type is the type of the checked integer.
 *
 * Checked integers of different types cannot be used in the same arithmetic
 * expression.
 *
 * There are convenience typedefs for all stdint types, of the following form
 * (these are just 2 examples):
   @code
   typedef CheckedInt<int32_t> CheckedInt32;
   typedef CheckedInt<uint16_t> CheckedUint16;
   @endcode
 ','line_number':437,'multiline':True]['text':'*
   * Constructs a checked integer with given @a value. The checked integer is
   * initialized as valid or invalid depending on whether the @a value
   * is in range.
   *
   * This constructor is not explicit. Instead, the type of its argument is a
   * separate template parameter, ensuring that no conversion is performed
   * before this constructor is actually called. As explained in the above
   * documentation for class CheckedInt, this constructor checks that its
   * argument is valid.
   ','line_number':522,'multiline':True]['text':'* Constructs a valid checked integer with initial value 0 ','line_number':551,'multiline':True]['text':'* @returns the actual value ','line_number':558,'multiline':True]['text':'*
   * @returns true if the checked integer is valid, i.e. is not the result
   * of an invalid operation or of an operation involving an invalid checked
   * integer
   ','line_number':566,'multiline':True]['text':'*
   * @returns true if the left and right hand sides are valid
   * and have the same value.
   *
   * Note that these semantics are the reason why we don't offer
   * a operator!=. Indeed, we'd want to have a!=b be equivalent to !(a==b)
   * but that would mean that whenever a or b is invalid, a!=b
   * is always true, which would be very confusing.
   *
   * For similar reasons, operators <, >, <=, >= would be very tricky to
   * specify, so we just avoid offering them.
   *
   * Notice that these == semantics are made more reasonable by these facts:
   *  1. a==b implies equality at the raw data level
   *     (the converse is false, as a==b is never true among invalids)
   *  2. This is similar to the behavior of IEEE floats, where a==b
   *     means that a and b have the same value *and* neither is NaN.
   ','line_number':612,'multiline':True]['text':'* prefix ++ ','line_number':634,'multiline':True]['text':'* postfix ++ ','line_number':640,'multiline':True]['text':'* prefix -- ','line_number':647,'multiline':True]['text':'* postfix -- ','line_number':653,'multiline':True]['text':'*
   * The !=, <, <=, >, >= operators are disabled:
   * see the comment on operator==.
   ','line_number':661,'multiline':True]['text':' For some T, arithmetic ops automatically promote to a wider type, so \
     * explitly do the narrowing cast here.  The narrowing cast is valid    \
     * because we did the "Is##NAME##Valid" check above. ','line_number':686,'multiline':True]['text':' Implement castToCheckedInt<T>(x), making sure that','line_number':720,'multiline':False]['text':'  - it allows x to be either a CheckedInt<T> or any integer type','line_number':721,'multiline':False]['text':'    that can be casted to T','line_number':722,'multiline':False]['text':'  - if x is already a CheckedInt<T>, we just return a reference to it,','line_number':723,'multiline':False]['text':'    instead of copying it (optimization)','line_number':724,'multiline':False]['text':' namespace detail','line_number':742,'multiline':False]['text':' Convenience typedefs.','line_number':792,'multiline':False]['text':' namespace mozilla','line_number':802,'multiline':False]['text':' mozilla_CheckedInt_h ','line_number':804,'multiline':True]