['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 ','line_number':1,'multiline':True]['text':' Copyright 2011 the V8 project authors. All rights reserved.','line_number':4,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':5,'multiline':False]['text':' found in the LICENSE file.','line_number':6,'multiline':False]['text':' A Disassembler object is used to disassemble a block of code instruction by','line_number':8,'multiline':False]['text':' instruction. The default implementation of the NameConverter object can be','line_number':9,'multiline':False]['text':' overriden to modify register names or to do symbol lookup on addresses.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' The example below will disassemble a block of code and print it to stdout.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':'   disasm::NameConverter converter;','line_number':14,'multiline':False]['text':'   disasm::Disassembler d(converter);','line_number':15,'multiline':False]['text':'   for (uint8_t* pc = begin; pc < end;) {','line_number':16,'multiline':False]['text':'     disasm::EmbeddedVector<char, disasm::ReasonableBufferSize> buffer;','line_number':17,'multiline':False]['text':'     uint8_t* prev_pc = pc;','line_number':18,'multiline':False]['text':'     pc += d.InstructionDecode(buffer, pc);','line_number':19,'multiline':False]['text':'     printf("%p    %08x      %s\n",','line_number':20,'multiline':False]['text':'            prev_pc, *reinterpret_cast<int32_t*>(prev_pc), buffer);','line_number':21,'multiline':False]['text':'   }','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' The Disassembler class also has a convenience method to disassemble a block','line_number':24,'multiline':False]['text':' of code into a FILE*, meaning that the above functionality could also be','line_number':25,'multiline':False]['text':' achieved by just calling Disassembler::Disassemble(stdout, begin, end);','line_number':26,'multiline':False]['text':' Helper function for printing to a Vector.','line_number':42,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':52,'multiline':False]['text':' Decoder decodes and disassembles instructions into an output buffer.','line_number':54,'multiline':False]['text':' It uses the converter to convert register names and call destinations into','line_number':55,'multiline':False]['text':' more informative description.','line_number':56,'multiline':False]['text':' Writes one disassembled instruction into 'buffer' (0-terminated).','line_number':66,'multiline':False]['text':' Returns the length of the disassembled machine instruction in bytes.','line_number':67,'multiline':False]['text':' Bottleneck functions to print into the out_buffer.','line_number':74,'multiline':False]['text':' Printing of common values.','line_number':78,'multiline':False]['text':' Handle formatting of instructions and their options.','line_number':92,'multiline':False]['text':' Each of these functions decodes one particular instruction type, a 3-bit','line_number':100,'multiline':False]['text':' field in the instruction encoding.','line_number':101,'multiline':False]['text':' Types 0 and 1 are combined as they are largely the same except for the way','line_number':102,'multiline':False]['text':' they interpret the shifter operand.','line_number':103,'multiline':False]['text':' Type 7 includes special Debugger instructions.','line_number':110,'multiline':False]['text':' For VFP support.','line_number':112,'multiline':False]['text':' Disallow copy and assign.','line_number':127,'multiline':False]['text':' Support for assertions in the Decoder formatting functions.','line_number':132,'multiline':False]['text':' Append the ch to the output buffer.','line_number':136,'multiline':False]['text':' Append the str to the output buffer.','line_number':139,'multiline':False]['text':' These condition names are defined in a way to match the native disassembler','line_number':149,'multiline':False]['text':' formatting. See for example the command "objdump -d <binary file>".','line_number':150,'multiline':False]['text':' Print the condition guarding the instruction.','line_number':156,'multiline':False]['text':' Print the register name according to the active name converter.','line_number':161,'multiline':False]['text':' Print the VFP S register name according to the active name converter.','line_number':166,'multiline':False]['text':' Print the VFP D register name according to the active name converter.','line_number':169,'multiline':False]['text':' These shift names are defined in a way to match the native disassembler','line_number':172,'multiline':False]['text':' formatting. See for example the command "objdump -d <binary file>".','line_number':173,'multiline':False]['text':' Print the register shift operands for the instruction. Generally used for','line_number':177,'multiline':False]['text':' data processing instructions.','line_number':178,'multiline':False]['text':' Special case for using rm only.','line_number':188,'multiline':False]['text':' by immediate','line_number':192,'multiline':False]['text':' by register','line_number':202,'multiline':False]['text':' Print the immediate operand for the instruction. Generally used for data','line_number':215,'multiline':False]['text':' processing instructions.','line_number':216,'multiline':False]['text':' Print the optional shift and immediate used by saturating instructions.','line_number':224,'multiline':False]['text':' Print PU formatting to reduce complexity of FormatOption.','line_number':234,'multiline':False]['text':' Print SoftwareInterrupt codes. Factoring this out reduces the complexity of','line_number':260,'multiline':False]['text':' the FormatOption method.','line_number':261,'multiline':False]['text':' Handle all register based formatting in this function to reduce the','line_number':281,'multiline':False]['text':' complexity of FormatOption.','line_number':282,'multiline':False]['text':' 'rn: Rn register','line_number':285,'multiline':False]['text':' 'rd: Rd register','line_number':289,'multiline':False]['text':' 'rs: Rs register','line_number':293,'multiline':False]['text':' 'rm: Rm register','line_number':297,'multiline':False]['text':' 'rt: Rt register','line_number':301,'multiline':False]['text':' 'rlist: register list for load and store multiple instructions','line_number':306,'multiline':False]['text':' Print register list in ascending order, by scanning the bit mask.','line_number':311,'multiline':False]['text':' Handle all VFP register based formatting in this function to reduce the','line_number':329,'multiline':False]['text':' complexity of FormatOption.','line_number':330,'multiline':False]['text':' vmov.32 has Vd in a different place.','line_number':346,'multiline':False]['text':' Print the movw or movt instruction.','line_number':407,'multiline':False]['text':' FormatOption takes a formatting string and interprets it based on','line_number':415,'multiline':False]['text':' the current instructions. The format string points to the first','line_number':416,'multiline':False]['text':' character of the option string (the option escape has already been','line_number':417,'multiline':False]['text':' consumed by the caller.)  FormatOption returns the number of','line_number':418,'multiline':False]['text':' characters that were consumed from the formatting string.','line_number':419,'multiline':False]['text':' 'a: accumulate multiplies','line_number':422,'multiline':False]['text':' 'b: byte loads or stores','line_number':430,'multiline':False]['text':' 'cond: conditional execution','line_number':436,'multiline':False]['text':' 'd: vmov double immediate.','line_number':441,'multiline':False]['text':' 'f: bitfield instructions - v7 and above.','line_number':446,'multiline':False]['text':' BFC/BFI:','line_number':450,'multiline':False]['text':' Bits 20-16 represent most-significant bit. Covert to width.','line_number':451,'multiline':False]['text':' 'h: halfword operation for extra loads and stores','line_number':460,'multiline':False]['text':' 'i: immediate value from adjacent bits.','line_number':468,'multiline':False]['text':' Expects tokens in the form imm%02d@%02d, i.e. imm05@07, imm10@16','line_number':469,'multiline':False]['text':' 'l: branch and link','line_number':481,'multiline':False]['text':' 'mw: movt/movw instructions.','line_number':489,'multiline':False]['text':' 'memop: load/store instructions.','line_number':493,'multiline':False]['text':' 'msg: for simulator break instructions','line_number':511,'multiline':False]['text':' 'off12: 12-bit offset for load and store instructions','line_number':521,'multiline':False]['text':' 'off0to3and8to19 16-bit immediate encoded in bits 19-8 and 3-0.','line_number':527,'multiline':False]['text':' 'off8: 8-bit offset for extra load and store instructions','line_number':534,'multiline':False]['text':' 'pu: P and U bits for load and store instructions','line_number':540,'multiline':False]['text':' 'shift_op or 'shift_rm or 'shift_sat.','line_number':549,'multiline':False]['text':' 'shift_op','line_number':550,'multiline':False]['text':' 'shift_sat.','line_number':559,'multiline':False]['text':' 'shift_rm','line_number':563,'multiline':False]['text':' 'svc','line_number':568,'multiline':False]['text':' 'sign: signed extra loads and stores','line_number':572,'multiline':False]['text':' 's: S field of data processing instructions','line_number':579,'multiline':False]['text':' 'target: target of branch instructions','line_number':585,'multiline':False]['text':' 'u: signed or unsigned multiplies','line_number':593,'multiline':False]['text':' The manual gets the meaning of bit 22 backwards in the multiply','line_number':594,'multiline':False]['text':' instruction overview on page A3.16.2.  The instructions that','line_number':595,'multiline':False]['text':' exist in u and s variants are the following:','line_number':596,'multiline':False]['text':' smull A4.1.87','line_number':597,'multiline':False]['text':' umull A4.1.129','line_number':598,'multiline':False]['text':' umlal A4.1.128','line_number':599,'multiline':False]['text':' smlal A4.1.76','line_number':600,'multiline':False]['text':' For these 0 means u and 1 means s.  As can be seen on their individual','line_number':601,'multiline':False]['text':' pages.  The other 18 mul instructions have the bit set or unset in','line_number':602,'multiline':False]['text':' arbitrary ways that are unrelated to the signedness of the instruction.','line_number':603,'multiline':False]['text':' None of these 18 instructions exist in both a 'u' and an 's' variant.','line_number':604,'multiline':False]['text':' 'w: W field of load and store instructions','line_number':620,'multiline':False]['text':' Format takes a formatting string for a whole instruction and prints it into','line_number':635,'multiline':False]['text':' the output buffer. All escaped options are handed to FormatOption to be','line_number':636,'multiline':False]['text':' parsed further.','line_number':637,'multiline':False]['text':' Single quote is used as the formatting escape.','line_number':641,'multiline':False]['text':' The disassembler may end up decoding data inlined in the code. We do not want','line_number':651,'multiline':False]['text':' it to crash if the data does not ressemble any known instruction.','line_number':652,'multiline':False]['text':' For currently unimplemented decodings the disassembler calls Unknown(instr)','line_number':659,'multiline':False]['text':' which will just print "unknown" of the instruction bits.','line_number':660,'multiline':False]['text':' multiply instruction or extra loads and stores','line_number':666,'multiline':False]['text':' multiply instructions','line_number':669,'multiline':False]['text':' The MUL instruction description (A 4.1.33) refers to Rd as being','line_number':672,'multiline':False]['text':' the destination for the operation, but it confusingly uses the','line_number':673,'multiline':False]['text':' Rn field to encode it.','line_number':674,'multiline':False]['text':' The MLA instruction description (A 4.1.28) refers to the order','line_number':678,'multiline':False]['text':' of registers as "Rd, Rm, Rs, Rn". But confusingly it uses the','line_number':679,'multiline':False]['text':' Rn field to encode the Rd register and the Rd field to encode','line_number':680,'multiline':False]['text':' the Rn register.','line_number':681,'multiline':False]['text':' The MLS instruction description (A 4.1.29) refers to the order','line_number':684,'multiline':False]['text':' of registers as "Rd, Rm, Rs, Rn". But confusingly it uses the','line_number':685,'multiline':False]['text':' Rn field to encode the Rd register and the Rd field to encode','line_number':686,'multiline':False]['text':' the Rn register.','line_number':687,'multiline':False]['text':' The signed/long multiply instructions use the terms RdHi and RdLo','line_number':692,'multiline':False]['text':' when referring to the target registers. They are mapped to the Rn','line_number':693,'multiline':False]['text':' and Rd fields as follows:','line_number':694,'multiline':False]['text':' RdLo == Rd field','line_number':695,'multiline':False]['text':' RdHi == Rn field','line_number':696,'multiline':False]['text':' The order of registers is: <RdLo>, <RdHi>, <Rm>, <Rs>','line_number':697,'multiline':False]['text':' The documentation names the low four bits of the','line_number':718,'multiline':False]['text':' store-exclusive instructions "Rt" but canonically','line_number':719,'multiline':False]['text':' for disassembly they are really "Rm".','line_number':720,'multiline':False]['text':' ldrd, strd','line_number':741,'multiline':False]['text':' The PU field is a 2-bit field.','line_number':776,'multiline':False]['text':' extra load/store instructions','line_number':782,'multiline':False]['text':' The PU field is a 2-bit field.','line_number':817,'multiline':False]['text':' not used by V8','line_number':837,'multiline':False]['text':' not used by V8','line_number':846,'multiline':False]['text':' not used by V8','line_number':850,'multiline':False]['text':' Other instructions matching this pattern are handled in the','line_number':902,'multiline':False]['text':' miscellaneous instructions part above.','line_number':903,'multiline':False]['text':' Other instructions matching this pattern are handled in the','line_number':920,'multiline':False]['text':' miscellaneous instructions part above.','line_number':921,'multiline':False]['text':' The Opcode field is a 4-bit field.','line_number':943,'multiline':False]['text':' not used in V8','line_number':955,'multiline':False]['text':' not used in V8','line_number':963,'multiline':False]['text':' The PU field is a 2-bit field.','line_number':978,'multiline':False]['text':' SMMLA (in V8 notation matching ARM ISA format)','line_number':1205,'multiline':False]['text':' Flag doesn't exist in our engine.','line_number':1211,'multiline':False]['text':' UDIV (in V8 notation matching ARM ISA format) rn = rm/rs','line_number':1216,'multiline':False]['text':' SDIV (in V8 notation matching ARM ISA format) rn = rm/rs','line_number':1219,'multiline':False]['text':' The PU field is a 2-bit field.','line_number':1261,'multiline':False]['text':' Privileged mode currently not supported.','line_number':1270,'multiline':False]['text':' Also print the stop message. Its address is encoded','line_number':1293,'multiline':False]['text':' in the following 4 bytes.','line_number':1294,'multiline':False]['text':' We have decoded 2 * Instruction::kInstrSize bytes.','line_number':1300,'multiline':False]['text':' void Decoder::DecodeTypeVFP(Instruction* instr)','line_number':1311,'multiline':False]['text':' vmov: Sn = Rt','line_number':1312,'multiline':False]['text':' vmov: Rt = Sn','line_number':1313,'multiline':False]['text':' vcvt: Dd = Sm','line_number':1314,'multiline':False]['text':' vcvt: Sd = Dm','line_number':1315,'multiline':False]['text':' vcvt.f64.s32 Dd, Dd, #<fbits>','line_number':1316,'multiline':False]['text':' Dd = vabs(Dm)','line_number':1317,'multiline':False]['text':' Sd = vabs(Sm)','line_number':1318,'multiline':False]['text':' Dd = vneg(Dm)','line_number':1319,'multiline':False]['text':' Sd = vneg(Sm)','line_number':1320,'multiline':False]['text':' Dd = vadd(Dn, Dm)','line_number':1321,'multiline':False]['text':' Sd = vadd(Sn, Sm)','line_number':1322,'multiline':False]['text':' Dd = vsub(Dn, Dm)','line_number':1323,'multiline':False]['text':' Sd = vsub(Sn, Sm)','line_number':1324,'multiline':False]['text':' Dd = vmul(Dn, Dm)','line_number':1325,'multiline':False]['text':' Sd = vmul(Sn, Sm)','line_number':1326,'multiline':False]['text':' Dd = vmla(Dn, Dm)','line_number':1327,'multiline':False]['text':' Sd = vmla(Sn, Sm)','line_number':1328,'multiline':False]['text':' Dd = vmls(Dn, Dm)','line_number':1329,'multiline':False]['text':' Sd = vmls(Sn, Sm)','line_number':1330,'multiline':False]['text':' Dd = vdiv(Dn, Dm)','line_number':1331,'multiline':False]['text':' Sd = vdiv(Sn, Sm)','line_number':1332,'multiline':False]['text':' vcmp(Dd, Dm)','line_number':1333,'multiline':False]['text':' vcmp(Sd, Sm)','line_number':1334,'multiline':False]['text':' Dd = vsqrt(Dm)','line_number':1335,'multiline':False]['text':' Sd = vsqrt(Sm)','line_number':1336,'multiline':False]['text':' vmrs','line_number':1337,'multiline':False]['text':' vmsr','line_number':1338,'multiline':False]['text':' Other data processing instructions','line_number':1345,'multiline':False]['text':' vmov register to register.','line_number':1347,'multiline':False]['text':' vabs','line_number':1354,'multiline':False]['text':' vneg','line_number':1361,'multiline':False]['text':' vcvt.f64.s32 Dd, Dd, #<fbits>','line_number':1373,'multiline':False]['text':' Not used by V8.','line_number':1394,'multiline':False]['text':' vrintz - round towards zero (truncate)','line_number':1397,'multiline':False]['text':' Not used by V8.','line_number':1404,'multiline':False]['text':' Not used by V8.','line_number':1445,'multiline':False]['text':' Comparison.','line_number':1502,'multiline':False]['text':' invalid','line_number':1512,'multiline':False]['text':' invalid','line_number':1520,'multiline':False]['text':' Not used by V8.','line_number':1523,'multiline':False]['text':' Decode Type 6 coprocessor instructions.','line_number':1582,'multiline':False]['text':' Dm = vmov(Rt, Rt2)','line_number':1583,'multiline':False]['text':' <Rt, Rt2> = vmov(Dm)','line_number':1584,'multiline':False]['text':' Ddst = MEM(Rbase + 4*offset).','line_number':1585,'multiline':False]['text':' MEM(Rbase + 4*offset) = Dsrc.','line_number':1586,'multiline':False]['text':' Not used by V8.','line_number':1623,'multiline':False]['text':' Load and store double to two GP registers','line_number':1628,'multiline':False]['text':' Not used by V8.','line_number':1630,'multiline':False]['text':' Not used by V8.','line_number':1668,'multiline':False]['text':' Not used by V8.','line_number':1671,'multiline':False]['text':' vmovl signed','line_number':1680,'multiline':False]['text':' vmovl unsigned','line_number':1694,'multiline':False]['text':' vst1','line_number':1707,'multiline':False]['text':' vld1','line_number':1720,'multiline':False]['text':' vst1','line_number':1738,'multiline':False]['text':' vld1','line_number':1750,'multiline':False]['text':' VRINTA, VRINTN, VRINTP, VRINTM (floating-point)','line_number':1834,'multiline':False]['text':' Case analysis is exhaustive.','line_number':1867,'multiline':False]['text':' Disassemble the instruction at *instr_ptr into the output buffer.','line_number':1896,'multiline':False]['text':' Print raw instruction bytes.','line_number':1899,'multiline':False]['text':' The code age prologue has a constant immediatly following the jump','line_number':1913,'multiline':False]['text':' instruction.','line_number':1914,'multiline':False]['text':' The type field is 3-bits in the ARM encoding.','line_number':1951,'multiline':False]['text':' namespace disasm','line_number':1959,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1964,'multiline':False]['text':' ARM does not have the concept of a byte register','line_number':1982,'multiline':False]['text':' ARM does not have any XMM registers','line_number':1987,'multiline':False]['text':' The default name converter is called for unknown code. So we will not try','line_number':1992,'multiline':False]['text':' to access any memory.','line_number':1993,'multiline':False]['text':'------------------------------------------------------------------------------','line_number':1997,'multiline':False]['text':' namespace disasm','line_number':2027,'multiline':False]['text':' namespace jit','line_number':2028,'multiline':False]['text':' namespace js','line_number':2029,'multiline':False]['text':' JS_DISASM_ARM','line_number':2031,'multiline':False]