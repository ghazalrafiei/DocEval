['text':' Copyright 2019 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]['text':' found in the LICENSE file.','line_number':3,'multiline':False]['text':' Returns true if the interests and assumptions of this node','line_number':45,'multiline':False]['text':' matches the given one.','line_number':46,'multiline':False]['text':' Updates the interests of this node given the interests of the','line_number':54,'multiline':False]['text':' node preceding it.','line_number':55,'multiline':False]['text':' Sets the interests of this node to include the interests of the','line_number':68,'multiline':False]['text':' following node.','line_number':69,'multiline':False]['text':' These bits are set of this node has to know what the preceding','line_number':84,'multiline':False]['text':' character was.','line_number':85,'multiline':False]['text':' Any successful match starting from the current node will consume at least','line_number':116,'multiline':False]['text':' this many characters. This does not necessarily mean that there is a','line_number':117,'multiline':False]['text':' possible match with exactly this many characters, but we generally try to','line_number':118,'multiline':False]['text':' get this number as high as possible to allow for early exit on failure.','line_number':119,'multiline':False]['text':' Like eats_at_least_from_possibly_start, but with the additional assumption','line_number':122,'multiline':False]['text':' that start-of-string assertions (^) can't match. This value is greater than','line_number':123,'multiline':False]['text':' or equal to eats_at_least_from_possibly_start.','line_number':124,'multiline':False]['text':' Generates a goto to this node or actually generates the code at this point.','line_number':139,'multiline':False]['text':' How many characters must this node consume at a minimum in order to','line_number':141,'multiline':False]['text':' succeed.  The not_at_start argument is used to indicate that we know we are','line_number':142,'multiline':False]['text':' not at the start of the input.  In this case anchored branches will always','line_number':143,'multiline':False]['text':' fail and can be ignored when determining how many characters are consumed','line_number':144,'multiline':False]['text':' on success.  If this node has not been analyzed yet, EatsAtLeast returns 0.','line_number':145,'multiline':False]['text':' Returns how many characters this node must consume in order to succeed,','line_number':147,'multiline':False]['text':' given that this is a LoopChoiceNode whose counter register is in a','line_number':148,'multiline':False]['text':' newly-initialized state at the current position in the generated code. For','line_number':149,'multiline':False]['text':' example, consider /a{6,8}/. Absent any extra information, the','line_number':150,'multiline':False]['text':' LoopChoiceNode for the repetition must report that it consumes at least','line_number':151,'multiline':False]['text':' zero characters, because it may have already looped several times. However,','line_number':152,'multiline':False]['text':' with a newly-initialized counter, it can report that it consumes at least','line_number':153,'multiline':False]['text':' six characters.','line_number':154,'multiline':False]['text':' Emits some quick code that checks whether the preloaded characters match.','line_number':156,'multiline':False]['text':' Falls through on certain failure, jumps to the label on possible success.','line_number':157,'multiline':False]['text':' If the node cannot make a quick check it does nothing and returns false.','line_number':158,'multiline':False]['text':' For a given number of characters this returns a mask and a value.  The','line_number':164,'multiline':False]['text':' next n characters are anded with the mask and compared with the value.','line_number':165,'multiline':False]['text':' A comparison failure indicates the node cannot match the next n characters.','line_number':166,'multiline':False]['text':' A comparison success indicates the node may match.','line_number':167,'multiline':False]['text':' Fills in quick check details for this node, given that this is a','line_number':172,'multiline':False]['text':' LoopChoiceNode whose counter register is in a newly-initialized state at','line_number':173,'multiline':False]['text':' the current position in the generated code. For example, consider /a{6,8}/.','line_number':174,'multiline':False]['text':' Absent any extra information, the LoopChoiceNode for the repetition cannot','line_number':175,'multiline':False]['text':' generate any useful quick check because a match might be the (empty)','line_number':176,'multiline':False]['text':' continuation node. However, with a newly-initialized counter, it can','line_number':177,'multiline':False]['text':' generate a quick check for several 'a' characters at once.','line_number':178,'multiline':False]['text':' Only returns the successor for a text node of length 1 that matches any','line_number':185,'multiline':False]['text':' character and that has no guards on it.','line_number':186,'multiline':False]['text':' Collects information on the possible code units (mod 128) that can match if','line_number':192,'multiline':False]['text':' we look forward.  This is used for a Boyer-Moore-like string searching','line_number':193,'multiline':False]['text':' implementation.  TODO(erikcorry):  This should share more code with','line_number':194,'multiline':False]['text':' EatsAtLeast, GetQuickCheckDetails.  The budget argument is used to limit','line_number':195,'multiline':False]['text':' the number of nodes we are willing to look at in order to create this data.','line_number':196,'multiline':False]['text':' If we know that the input is one-byte then there are some nodes that can','line_number':204,'multiline':False]['text':' never match.  This method returns a node that can be substituted for','line_number':205,'multiline':False]['text':' itself, or nullptr if the node can never match.','line_number':206,'multiline':False]['text':' Helper for FilterOneByte.','line_number':208,'multiline':False]['text':' For convenience.','line_number':216,'multiline':False]['text':' We want to avoid recalculating the lookahead info, so we store it on the','line_number':219,'multiline':False]['text':' node.  Only info that is for this node is stored.  We can tell that the','line_number':220,'multiline':False]['text':' info is for this node when offset == 0, so the information is calculated','line_number':221,'multiline':False]['text':' relative to this node.','line_number':222,'multiline':False]['text':' If non-generic code is generated for a node (i.e. the node is not at the','line_number':228,'multiline':False]['text':' start of the trace) then it cannot be reused.  This variable sets a limit','line_number':229,'multiline':False]['text':' on how often we allow that to happen before we insist on starting a new','line_number':230,'multiline':False]['text':' trace and generating generic code for a node that can be reused by flushing','line_number':231,'multiline':False]['text':' the deferred actions in the current trace and generating a goto.','line_number':232,'multiline':False]['text':' TODO(v8:10441): This is a hacky way to avoid exponential code size growth','line_number':244,'multiline':False]['text':' for very large choice nodes that can be generated by unicode property','line_number':245,'multiline':False]['text':' escapes. In order to avoid inlining (i.e. trace recursion), we pretend to','line_number':246,'multiline':False]['text':' have generated the maximum count of code copies already.','line_number':247,'multiline':False]['text':' We should instead fix this properly, e.g. by using the code size budget','line_number':248,'multiline':False]['text':' (flush_budget) or by generating property escape matches as calls to a C','line_number':249,'multiline':False]['text':' function.','line_number':250,'multiline':False]['text':' Saved values for EatsAtLeast results, to avoid recomputation. Filled in','line_number':275,'multiline':False]['text':' during analysis (valid if info_.been_analyzed is true).','line_number':276,'multiline':False]['text':' This variable keeps track of how many times code has been generated for','line_number':279,'multiline':False]['text':' this node (in different traces).  We don't keep track of where the','line_number':280,'multiline':False]['text':' generated code is located unless the code is generated at the start of','line_number':281,'multiline':False]['text':' a trace, in which case it is generic and can be reused by flushing the','line_number':282,'multiline':False]['text':' deferred operations in the current trace and generating a goto.','line_number':283,'multiline':False]['text':' TODO(erikcorry): We should allow some action nodes in greedy loops.','line_number':351,'multiline':False]['text':' Create TextNode for a single character class for the given ranges.','line_number':404,'multiline':False]['text':' Create TextNode for a surrogate pair with a range given for the','line_number':410,'multiline':False]['text':' lead and the trail surrogate each.','line_number':411,'multiline':False]['text':' Check for characters that can't match.','line_number':436,'multiline':False]['text':' Case-dependent single character check.','line_number':437,'multiline':False]['text':' Check characters that have no case equivs.','line_number':438,'multiline':False]['text':' Case-independent single character check.','line_number':439,'multiline':False]['text':' Character class.','line_number':440,'multiline':False]['text':' Returning 0 from EatsAtLeast should ensure we never get here.','line_number':535,'multiline':False]['text':' Returning 0 from EatsAtLeast should ensure we never get here.','line_number':540,'multiline':False]['text':' If true, this node is never checked at the start of the input.','line_number':655,'multiline':False]['text':' Allows a new trace to start with at_start() set to false.','line_number':656,'multiline':False]['text':' For a negative lookahead we don't emit the quick check for the','line_number':687,'multiline':False]['text':' alternative that is expected to fail.  This is because quick check code','line_number':688,'multiline':False]['text':' starts by loading enough characters for the alternative that takes fewest','line_number':689,'multiline':False]['text':' characters, but on a negative lookahead the negative branch did not take','line_number':690,'multiline':False]['text':' part in that calculation (EatsAtLeast) so the assumptions don't hold.','line_number':691,'multiline':False]['text':' AddAlternative is made private for loop nodes because alternatives','line_number':732,'multiline':False]['text':' should not be added freely, we need to keep track of which node','line_number':733,'multiline':False]['text':' goes back to the node itself.','line_number':734,'multiline':False]['text':' Temporary marker set only while generating quick check details. Represents','line_number':744,'multiline':False]['text':' whether GetQuickCheckDetails traversed the initialization node for this','line_number':745,'multiline':False]['text':' loop's counter. If so, we may be able to generate stricter quick checks','line_number':746,'multiline':False]['text':' because we know the loop node must match at least min_loop_iterations_','line_number':747,'multiline':False]['text':' times before the continuation node can match.','line_number':748,'multiline':False]['text':' The minimum number of times the loop_node_ must match before the','line_number':751,'multiline':False]['text':' continue_node_ might be considered. This value can be temporarily decreased','line_number':752,'multiline':False]['text':' while generating quick check details, to represent the remaining iterations','line_number':753,'multiline':False]['text':' after the completed portion of the quick check details.','line_number':754,'multiline':False]['text':' namespace internal','line_number':769,'multiline':False]['text':' namespace v8','line_number':770,'multiline':False]['text':' V8_REGEXP_REGEXP_NODES_H_','line_number':772,'multiline':False]