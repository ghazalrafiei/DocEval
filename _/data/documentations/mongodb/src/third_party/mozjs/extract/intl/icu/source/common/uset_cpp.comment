['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
*
*   Copyright (C) 2002-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uset.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002mar07
*   created by: Markus W. Scherer
*
*   There are functions to efficiently serialize a USet into an array of uint16_t
*   and functions to use such a serialized form efficiently without
*   instantiating a new USet.
','line_number':3,'multiline':True]['text':' UnicodeString handles -1 for strLen','line_number':91,'multiline':False]['text':' UnicodeString handles -1 for strLen','line_number':98,'multiline':False]['text':' Create a string alias, since nothing is being added to the set.','line_number':222,'multiline':False]['text':'*
 * This class only exists to provide access to the UnicodeSet private
 * USet support API.  Declaring a class a friend is more portable than
 * trying to declare extern "C" functions as friends.
 ','line_number':278,'multiline':True]['text':' not : public UObject because all methods are static ','line_number':283,'multiline':True]['text':' Try to have the compiler inline these','line_number':285,'multiline':True]['text':' do not instantiate','line_number':294,'multiline':True]['text':'U_CAPI int32_t U_EXPORT2','line_number':333,'multiline':False]['text':'uset_getRangeCount(const USet* set) {','line_number':334,'multiline':False]['text':'    return ((const UnicodeSet*) set)->getRangeCount();','line_number':335,'multiline':False]['text':'}','line_number':336,'multiline':False]['text':'','line_number':337,'multiline':False]['text':'U_CAPI UBool U_EXPORT2','line_number':338,'multiline':False]['text':'uset_getRange(const USet* set, int32_t rangeIndex,','line_number':339,'multiline':False]['text':'              UChar32* pStart, UChar32* pEnd) {','line_number':340,'multiline':False]['text':'    if ((uint32_t) rangeIndex >= (uint32_t) uset_getRangeCount(set)) {','line_number':341,'multiline':False]['text':'        return FALSE;','line_number':342,'multiline':False]['text':'    }','line_number':343,'multiline':False]['text':'    const UnicodeSet* us = (const UnicodeSet*) set;','line_number':344,'multiline':False]['text':'    *pStart = us->getRangeStart(rangeIndex);','line_number':345,'multiline':False]['text':'    *pEnd = us->getRangeEnd(rangeIndex);','line_number':346,'multiline':False]['text':'    return TRUE;','line_number':347,'multiline':False]['text':'}','line_number':348,'multiline':False]['text':'
 * Serialize a USet into 16-bit units.
 * Store BMP code points as themselves with one 16-bit unit each.
 *
 * Important: the code points in the array are in ascending order,
 * therefore all BMP code points precede all supplementary code points.
 *
 * Store each supplementary code point in 2 16-bit units,
 * simply with higher-then-lower 16-bit halfs.
 *
 * Precede the entire list with the length.
 * If there are supplementary code points, then set bit 15 in the length
 * and add the bmpLength between it and the array.
 *
 * In other words:
 * - all BMP:            (length=bmpLength) BMP, .., BMP
 * - some supplementary: (length|0x8000) (bmpLength<length) BMP, .., BMP, supp-high, supp-low, ..
 ','line_number':350,'multiline':True]['text':' there are supplementary values ','line_number':391,'multiline':True]['text':' only BMP values ','line_number':399,'multiline':True]['text':' c==0x10ffff ','line_number':436,'multiline':True]['text':' find c in the BMP part ','line_number':454,'multiline':True]['text':' Done!','line_number':463,'multiline':False]['text':' find c in the supplementary part ','line_number':475,'multiline':True]['text':' Guarantee even result','line_number':484,'multiline':False]['text':' Done!','line_number':487,'multiline':False]['text':' count pairs of 16-bit units even per BMP and check if the number of pairs is odd ','line_number':497,'multiline':True]['text':' address start/limit pairs ','line_number':525,'multiline':True]['text':' address pairs of pairs of units ','line_number':538,'multiline':True]['text':' TODO The old, internal uset.c had an efficient uset_containsOne function.','line_number':556,'multiline':False]['text':' Returned the one and only code point, or else -1 or something.','line_number':557,'multiline':False]['text':' Consider adding such a function to both C and C++ UnicodeSet/uset.','line_number':558,'multiline':False]['text':' See tools/gennorm/store.c for usage, now usetContainsOne there.','line_number':559,'multiline':False]['text':' TODO Investigate incorporating this code into UnicodeSet to improve','line_number':561,'multiline':False]['text':' efficiency.','line_number':562,'multiline':False]['text':' ---','line_number':563,'multiline':False]['text':' #define USET_GROW_DELTA 20','line_number':564,'multiline':False]['text':' ','line_number':565,'multiline':False]['text':' static int32_t','line_number':566,'multiline':False]['text':' findChar(const UChar32* array, int32_t length, UChar32 c) {','line_number':567,'multiline':False]['text':'     int32_t i;','line_number':568,'multiline':False]['text':' ','line_number':569,'multiline':False]['text':'     /* check the last range limit first for more efficient appending */','line_number':570,'multiline':False]['text':'     if(length>0) {','line_number':571,'multiline':False]['text':'         if(c>=array[length-1]) {','line_number':572,'multiline':False]['text':'             return length;','line_number':573,'multiline':False]['text':'         }','line_number':574,'multiline':False]['text':' ','line_number':575,'multiline':False]['text':'         /* do not check the last range limit again in the loop below */','line_number':576,'multiline':False]['text':'         --length;','line_number':577,'multiline':False]['text':'     }','line_number':578,'multiline':False]['text':' ','line_number':579,'multiline':False]['text':'     for(i=0; i<length && c>=array[i]; ++i) {}','line_number':580,'multiline':False]['text':'     return i;','line_number':581,'multiline':False]['text':' }','line_number':582,'multiline':False]['text':' ','line_number':583,'multiline':False]['text':' static UBool','line_number':584,'multiline':False]['text':' addRemove(USet* set, UChar32 c, int32_t doRemove) {','line_number':585,'multiline':False]['text':'     int32_t i, length, more;','line_number':586,'multiline':False]['text':' ','line_number':587,'multiline':False]['text':'     if(set==NULL || (uint32_t)c>0x10ffff) {','line_number':588,'multiline':False]['text':'         return FALSE;','line_number':589,'multiline':False]['text':'     }','line_number':590,'multiline':False]['text':' ','line_number':591,'multiline':False]['text':'     length=set->length;','line_number':592,'multiline':False]['text':'     i=findChar(set->array, length, c);','line_number':593,'multiline':False]['text':'     if((i&1)^doRemove) {','line_number':594,'multiline':False]['text':'         /* c is already in the set */','line_number':595,'multiline':False]['text':'         return TRUE;','line_number':596,'multiline':False]['text':'     }','line_number':597,'multiline':False]['text':' ','line_number':598,'multiline':False]['text':'     /* how many more array items do we need? */','line_number':599,'multiline':False]['text':'     if(i<length && (c+1)==set->array[i]) {','line_number':600,'multiline':False]['text':'         /* c is just before the following range, extend that in-place by one */','line_number':601,'multiline':False]['text':'         set->array[i]=c;','line_number':602,'multiline':False]['text':'         if(i>0) {','line_number':603,'multiline':False]['text':'             --i;','line_number':604,'multiline':False]['text':'             if(c==set->array[i]) {','line_number':605,'multiline':False]['text':'                 /* the previous range collapsed, remove it */','line_number':606,'multiline':False]['text':'                 set->length=length-=2;','line_number':607,'multiline':False]['text':'                 if(i<length) {','line_number':608,'multiline':False]['text':'                     uprv_memmove(set->array+i, set->array+i+2, (length-i)*4);','line_number':609,'multiline':False]['text':'                 }','line_number':610,'multiline':False]['text':'             }','line_number':611,'multiline':False]['text':'         }','line_number':612,'multiline':False]['text':'         return TRUE;','line_number':613,'multiline':False]['text':'     } else if(i>0 && c==set->array[i-1]) {','line_number':614,'multiline':False]['text':'         /* c is just after the previous range, extend that in-place by one */','line_number':615,'multiline':False]['text':'         if(++c<=0x10ffff) {','line_number':616,'multiline':False]['text':'             set->array[i-1]=c;','line_number':617,'multiline':False]['text':'             if(i<length && c==set->array[i]) {','line_number':618,'multiline':False]['text':'                 /* the following range collapsed, remove it */','line_number':619,'multiline':False]['text':'                 --i;','line_number':620,'multiline':False]['text':'                 set->length=length-=2;','line_number':621,'multiline':False]['text':'                 if(i<length) {','line_number':622,'multiline':False]['text':'                     uprv_memmove(set->array+i, set->array+i+2, (length-i)*4);','line_number':623,'multiline':False]['text':'                 }','line_number':624,'multiline':False]['text':'             }','line_number':625,'multiline':False]['text':'         } else {','line_number':626,'multiline':False]['text':'             /* extend the previous range (had limit 0x10ffff) to the end of Unicode */','line_number':627,'multiline':False]['text':'             set->length=i-1;','line_number':628,'multiline':False]['text':'         }','line_number':629,'multiline':False]['text':'         return TRUE;','line_number':630,'multiline':False]['text':'     } else if(i==length && c==0x10ffff) {','line_number':631,'multiline':False]['text':'         /* insert one range limit c */','line_number':632,'multiline':False]['text':'         more=1;','line_number':633,'multiline':False]['text':'     } else {','line_number':634,'multiline':False]['text':'         /* insert two range limits c, c+1 */','line_number':635,'multiline':False]['text':'         more=2;','line_number':636,'multiline':False]['text':'     }','line_number':637,'multiline':False]['text':' ','line_number':638,'multiline':False]['text':'     /* insert <more> range limits */','line_number':639,'multiline':False]['text':'     if(length+more>set->capacity) {','line_number':640,'multiline':False]['text':'         /* reallocate */','line_number':641,'multiline':False]['text':'         int32_t newCapacity=set->capacity+set->capacity/2+USET_GROW_DELTA;','line_number':642,'multiline':False]['text':'         UChar32* newArray=(UChar32* )uprv_malloc(newCapacity*4);','line_number':643,'multiline':False]['text':'         if(newArray==NULL) {','line_number':644,'multiline':False]['text':'             return FALSE;','line_number':645,'multiline':False]['text':'         }','line_number':646,'multiline':False]['text':'         set->capacity=newCapacity;','line_number':647,'multiline':False]['text':'         uprv_memcpy(newArray, set->array, length*4);','line_number':648,'multiline':False]['text':' ','line_number':649,'multiline':False]['text':'         if(set->array!=set->staticBuffer) {','line_number':650,'multiline':False]['text':'             uprv_free(set->array);','line_number':651,'multiline':False]['text':'         }','line_number':652,'multiline':False]['text':'         set->array=newArray;','line_number':653,'multiline':False]['text':'     }','line_number':654,'multiline':False]['text':' ','line_number':655,'multiline':False]['text':'     if(i<length) {','line_number':656,'multiline':False]['text':'         uprv_memmove(set->array+i+more, set->array+i, (length-i)*4);','line_number':657,'multiline':False]['text':'     }','line_number':658,'multiline':False]['text':'     set->array[i]=c;','line_number':659,'multiline':False]['text':'     if(more==2) {','line_number':660,'multiline':False]['text':'         set->array[i+1]=c+1;','line_number':661,'multiline':False]['text':'     }','line_number':662,'multiline':False]['text':'     set->length+=more;','line_number':663,'multiline':False]['text':' ','line_number':664,'multiline':False]['text':'     return TRUE;','line_number':665,'multiline':False]['text':' }','line_number':666,'multiline':False]['text':' ','line_number':667,'multiline':False]['text':' U_CAPI UBool U_EXPORT2','line_number':668,'multiline':False]['text':' uset_add(USet* set, UChar32 c) {','line_number':669,'multiline':False]['text':'     return addRemove(set, c, 0);','line_number':670,'multiline':False]['text':' }','line_number':671,'multiline':False]['text':' ','line_number':672,'multiline':False]['text':' U_CAPI void U_EXPORT2','line_number':673,'multiline':False]['text':' uset_remove(USet* set, UChar32 c) {','line_number':674,'multiline':False]['text':'     addRemove(set, c, 1);','line_number':675,'multiline':False]['text':' }','line_number':676,'multiline':False]