['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' A wasm::SymbolicAddress represents a pointer to a well-known function/global','line_number':34,'multiline':False]['text':' that is embedded in wasm code. Since wasm code is serialized and later','line_number':35,'multiline':False]['text':' deserialized into a different address space, symbolic addresses must be used','line_number':36,'multiline':False]['text':' for *all* pointers into the address space. The MacroAssembler records a list','line_number':37,'multiline':False]['text':' of all SymbolicAddresses and the offsets of their use in the code for later','line_number':38,'multiline':False]['text':' patching during static linking.','line_number':39,'multiline':False]['text':' The FailureMode indicates whether, immediately after a call to a builtin','line_number':136,'multiline':False]['text':' returns, the return value should be checked against an error condition','line_number':137,'multiline':False]['text':' (and if so, which one) which signals that the C++ calle has already','line_number':138,'multiline':False]['text':' reported an error and thus wasm needs to wasmTrap(Trap::ThrowReported).','line_number':139,'multiline':False]['text':' SymbolicAddressSignature carries type information for a function referred','line_number':148,'multiline':False]['text':' to by a SymbolicAddress.  In order that |argTypes| can be written out as a','line_number':149,'multiline':False]['text':' static initialiser, it has to have fixed length.  At present','line_number':150,'multiline':False]['text':' SymbolicAddressType is used to describe functions with at most 6 arguments,','line_number':151,'multiline':False]['text':' so |argTypes| has 7 entries in order to allow the last value to be','line_number':152,'multiline':False]['text':' MIRType::None, in the hope of catching any accidental overruns of the','line_number':153,'multiline':False]['text':' defined section of the array.','line_number':154,'multiline':False]['text':' The SymbolicAddress that is described.','line_number':159,'multiline':False]['text':' The return type, or MIRType::None to denote 'void'.','line_number':161,'multiline':False]['text':' The failure mode, which is checked by masm.wasmCallBuiltinInstanceMethod.','line_number':163,'multiline':False]['text':' The number of arguments, 0 .. SymbolicAddressSignatureMaxArgs only.','line_number':165,'multiline':False]['text':' The argument types; SymbolicAddressSignatureMaxArgs + 1 guard, which','line_number':167,'multiline':False]['text':' should be MIRType::None.','line_number':168,'multiline':False]['text':' The 16 in this assertion is derived as follows: SymbolicAddress is probably','line_number':172,'multiline':False]['text':' size-4 aligned-4, but it's at the start of the struct, so there's no','line_number':173,'multiline':False]['text':' alignment hole before it.  All other components (MIRType and uint8_t) are','line_number':174,'multiline':False]['text':' size-1 aligned-1, and there are 8 in total, so it is reasonable to assume','line_number':175,'multiline':False]['text':' that they also don't create any alignment holes.  Hence it is also','line_number':176,'multiline':False]['text':' reasonable to assume that the actual size is 1 * 4 + 8 * 1 == 12.  The','line_number':177,'multiline':False]['text':' worst-plausible-case rounding will take that up to 16.  Hence, the','line_number':178,'multiline':False]['text':' assertion uses 16.','line_number':179,'multiline':False]['text':' These provide argument type information for a subset of the SymbolicAddress','line_number':184,'multiline':False]['text':' targets, for which type info is needed to generate correct stackmaps.','line_number':185,'multiline':False]['text':' A SymbolicAddress that NeedsBuiltinThunk() will call through a thunk to the','line_number':241,'multiline':False]['text':' C++ function. This will be true for all normal calls from normal wasm','line_number':242,'multiline':False]['text':' function code. Only calls to C++ from other exits/thunks do not need a thunk.','line_number':243,'multiline':False]['text':' This function queries whether pc is in one of the process's builtin thunks','line_number':247,'multiline':False]['text':' and, if so, returns the CodeRange and pointer to the code segment that the','line_number':248,'multiline':False]['text':' CodeRange is relative to.','line_number':249,'multiline':False]['text':' EnsureBuiltinThunksInitialized() must be called, and must succeed, before','line_number':254,'multiline':False]['text':' SymbolicAddressTarget() or MaybeGetBuiltinThunk(). This function creates all','line_number':255,'multiline':False]['text':' thunks for the process. ReleaseBuiltinThunks() should be called before','line_number':256,'multiline':False]['text':' ReleaseProcessExecutableMemory() so that the latter can assert that all','line_number':257,'multiline':False]['text':' executable code has been released.','line_number':258,'multiline':False]['text':' namespace wasm','line_number':283,'multiline':False]['text':' namespace js','line_number':284,'multiline':False]['text':' wasm_builtins_h','line_number':286,'multiline':False]