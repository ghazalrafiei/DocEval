['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Copyright 2019 the V8 project authors. All rights reserved.','line_number':7,'multiline':False]['text':' Use of this source code is governed by a BSD-style license that can be','line_number':8,'multiline':False]['text':' found in the LICENSE file.','line_number':9,'multiline':False]['text':' js::AutoCheckRecursionLimit','line_number':33,'multiline':False]['text':' Forward declaration of classes','line_number':43,'multiline':False]['text':' namespace internal','line_number':52,'multiline':False]['text':' namespace v8','line_number':53,'multiline':False]['text':' Origin:','line_number':91,'multiline':False]['text':' https://github.com/v8/v8/blob/855591a54d160303349a5f0a32fab15825c708d1/src/base/macros.h#L310-L319','line_number':92,'multiline':False]['text':' ptrdiff_t is 't' according to the standard, but MSVC uses 'I'.','line_number':93,'multiline':False]['text':' Explicitly declare the assignment operator as deleted.','line_number':106,'multiline':False]['text':' Explicitly declare the copy constructor and assignment operator as deleted.','line_number':109,'multiline':False]['text':' This also deletes the implicit move constructor and implicit move assignment','line_number':110,'multiline':False]['text':' operator, but still allows to manually define them.','line_number':111,'multiline':False]['text':' Explicitly declare all implicit constructors as deleted, namely the','line_number':116,'multiline':False]['text':' default constructor, copy constructor and operator= functions.','line_number':117,'multiline':False]['text':' This is especially useful for classes containing only static methods.','line_number':118,'multiline':False]['text':' Origin:','line_number':125,'multiline':False]['text':' https://github.com/v8/v8/blob/855591a54d160303349a5f0a32fab15825c708d1/src/base/macros.h#L364-L367','line_number':126,'multiline':False]['text':' Latin1/UTF-16 constants','line_number':136,'multiline':False]['text':' Code-point values in Unicode 4.0 are 21 bits wide.','line_number':137,'multiline':False]['text':' Code units in UTF-16 are 16 bits wide.','line_number':138,'multiline':False]['text':' Origin:','line_number':144,'multiline':False]['text':' https://github.com/v8/v8/blob/855591a54d160303349a5f0a32fab15825c708d1/src/base/macros.h#L247-L258','line_number':145,'multiline':False]['text':' The USE(x, ...) template is used to silence C++ compiler warnings','line_number':146,'multiline':False]['text':' issued for (yet) unused variables (typically parameters).','line_number':147,'multiline':False]['text':' The arguments are guaranteed to be evaluated from left to right.','line_number':148,'multiline':False]['text':' NOLINT(runtime/explicit)','line_number':151,'multiline':False]['text':' Origin:','line_number':159,'multiline':False]['text':' https://github.com/v8/v8/blob/855591a54d160303349a5f0a32fab15825c708d1/src/base/safe_conversions.h#L35-L39','line_number':160,'multiline':False]['text':' saturated_cast<> is analogous to static_cast<> for numeric types, except','line_number':161,'multiline':False]['text':' that the specified numeric conversion will saturate rather than overflow or','line_number':162,'multiline':False]['text':' underflow.','line_number':163,'multiline':False]['text':' This is the only specialization that is needed for regexp code.','line_number':167,'multiline':False]['text':' Instead of pulling in dozens of lines of template goo','line_number':168,'multiline':False]['text':' to derive it, I used the implementation from uint8_clamped in','line_number':169,'multiline':False]['text':' ArrayBufferObject.h.','line_number':170,'multiline':False]['text':' Origin:','line_number':176,'multiline':False]['text':' https://github.com/v8/v8/blob/fc088cdaccadede84886eee881e67af9db53669a/src/base/bounds.h#L14-L28','line_number':177,'multiline':False]['text':' Checks if value is in range [lower_limit, higher_limit] using a single','line_number':178,'multiline':False]['text':' branch.','line_number':179,'multiline':False]['text':' Use static_cast to support enum classes.','line_number':183,'multiline':False]['text':' namespace bits','line_number':231,'multiline':False]['text':' namespace base','line_number':232,'multiline':False]['text':' Origin:','line_number':238,'multiline':False]['text':' https://github.com/v8/v8/blob/1f1e4cdb04c75eab77adbecd5f5514ddc3eb56cf/src/strings/unicode.h#L133-L150','line_number':239,'multiline':False]['text':' Convert the character to Latin-1 case equivalent if possible.','line_number':244,'multiline':False]['text':' "GREEK CAPITAL LETTER MU" case maps to "MICRO SIGN".','line_number':246,'multiline':False]['text':' "GREEK SMALL LETTER MU" case maps to "MICRO SIGN".','line_number':247,'multiline':False]['text':' "LATIN CAPITAL LETTER Y WITH DIAERESIS" case maps to "LATIN SMALL LETTER','line_number':251,'multiline':False]['text':' Y WITH DIAERESIS".','line_number':252,'multiline':False]['text':' Origin:','line_number':260,'multiline':False]['text':' https://github.com/v8/v8/blob/b4bfbce6f91fc2cc72178af42bb3172c5f5eaebb/src/strings/unicode.h#L99-L131','line_number':261,'multiline':False]['text':' A cache used in case conversion.  It caches the value for characters','line_number':284,'multiline':False]['text':' that either have no mapping or map to a single character independent','line_number':285,'multiline':False]['text':' of context.  Characters that map to more than one character or that','line_number':286,'multiline':False]['text':' map differently depending on context are always looked up.','line_number':287,'multiline':False]['text':' Origin:','line_number':288,'multiline':False]['text':' https://github.com/v8/v8/blob/b4bfbce6f91fc2cc72178af42bb3172c5f5eaebb/src/strings/unicode.h#L64-L88','line_number':289,'multiline':False]['text':' Origin:','line_number':338,'multiline':False]['text':' https://github.com/v8/v8/blob/b4bfbce6f91fc2cc72178af42bb3172c5f5eaebb/src/strings/unicode.h#L241-L252','line_number':339,'multiline':False]['text':' !V8_INTL_SUPPORT','line_number':353,'multiline':False]['text':' namespace unibrow','line_number':359,'multiline':False]['text':' Superclass for classes only using static method functions.','line_number':367,'multiline':False]['text':' The subclass of AllStatic cannot be instantiated at all.','line_number':368,'multiline':False]['text':' Superclass for classes managed with new and delete.','line_number':376,'multiline':False]['text':' In irregexp, this is only AlternativeGeneration (in regexp-compiler.cc)','line_number':377,'multiline':False]['text':' Compare:','line_number':378,'multiline':False]['text':' https://github.com/v8/v8/blob/7b3332844212d78ee87a9426f3a6f7f781a8fbfa/src/utils/allocation.cc#L88-L96','line_number':379,'multiline':False]['text':' The largest integer n such that n and n + 1 are both exactly','line_number':400,'multiline':False]['text':' representable as a Number value.  ES6 section 20.1.2.6','line_number':401,'multiline':False]['text':' 2^53-1','line_number':402,'multiline':False]['text':' Wrappers to disambiguate char16_t and uc16.','line_number':425,'multiline':False]['text':' This class is used for the output of trace-regexp-parser.  V8 has','line_number':439,'multiline':False]['text':' an elaborate implementation to ensure that the output gets to the','line_number':440,'multiline':False]['text':' right place, even on Android. We just need something that will','line_number':441,'multiline':False]['text':' print output (ideally to stderr, to match the rest of our tracing','line_number':442,'multiline':False]['text':' code). This is an empty wrapper that will convert itself to','line_number':443,'multiline':False]['text':' std::cerr when used.','line_number':444,'multiline':False]['text':' Reuse existing Maybe implementation','line_number':452,'multiline':False]['text':' Compare 8bit/16bit chars to 8bit/16bit chars.','line_number':468,'multiline':False]['text':' Used indirectly by regexp-interpreter.cc','line_number':469,'multiline':False]['text':' Taken from: https://github.com/v8/v8/blob/master/src/utils/utils.h','line_number':470,'multiline':False]['text':' memcmp compares byte-by-byte, yielding wrong results for two-byte','line_number':476,'multiline':False]['text':' strings on little-endian systems.','line_number':477,'multiline':False]['text':' Compare 8bit/16bit chars to 8bit/16bit chars.','line_number':513,'multiline':False]['text':' memcmp compares byte-by-byte, but for equality it doesn't matter whether','line_number':520,'multiline':False]['text':' two-byte char comparison is little- or big-endian.','line_number':521,'multiline':False]['text':' Origin:','line_number':539,'multiline':False]['text':' https://github.com/v8/v8/blob/855591a54d160303349a5f0a32fab15825c708d1/src/utils/utils.h#L40-L48','line_number':540,'multiline':False]['text':' Returns the value (0 .. 15) of a hexadecimal character c.','line_number':541,'multiline':False]['text':' If c is not a legal hexadecimal character, returns a value < 0.','line_number':542,'multiline':False]['text':' Used in regexp-parser.cc','line_number':543,'multiline':False]['text':' detect 0x11..0x16 and 0x31..0x36.','line_number':547,'multiline':False]['text':' V8::Object ~= JS::Value','line_number':552,'multiline':False]['text':' The default object constructor in V8 stores a nullptr,','line_number':555,'multiline':False]['text':' which has its low bit clear and is interpreted as Smi(0).','line_number':556,'multiline':False]['text':' Used in regexp-interpreter.cc to check the return value of','line_number':561,'multiline':False]['text':' isolate->stack_guard()->HandleInterrupts(). We want to handle','line_number':562,'multiline':False]['text':' interrupts in the caller, so we always return false from','line_number':563,'multiline':False]['text':' HandleInterrupts and true here.','line_number':564,'multiline':False]['text':' V8::HeapObject ~= GC thing','line_number':591,'multiline':False]['text':' A fixed-size array with Objects (aka Values) as element types.','line_number':601,'multiline':False]['text':' Implemented using the dense elements of an ArrayObject.','line_number':602,'multiline':False]['text':' Used for named captures.','line_number':603,'multiline':False]['text':'
 * Conceptually, ByteArrayData is a variable-size structure. To
 * implement this in a C++-approved way, we allocate a struct
 * containing the 32-bit length field, followed by additional memory
 * for the data. To access the data, we get a pointer to the next byte
 * after the length field and cast it to the correct type.
 ','line_number':619,'multiline':True]['text':' A fixed-size array of bytes.','line_number':634,'multiline':False]['text':' Like Handles in SM, V8 handles are references to marked pointers.','line_number':660,'multiline':False]['text':' Unlike SM, where Rooted pointers are created individually on the','line_number':661,'multiline':False]['text':' stack, the target of a V8 handle lives in an arena on the isolate','line_number':662,'multiline':False]['text':' (~= JSContext). Whenever a Handle is created, a new "root" is','line_number':663,'multiline':False]['text':' created at the end of the arena.','line_number':664,'multiline':False]['text':'','line_number':665,'multiline':False]['text':' HandleScopes are used to manage the lifetimes of these handles.  A','line_number':666,'multiline':False]['text':' HandleScope lives on the stack and stores the size of the arena at','line_number':667,'multiline':False]['text':' the time of its creation. When the function returns and the','line_number':668,'multiline':False]['text':' HandleScope is destroyed, the arena is truncated to its previous','line_number':669,'multiline':False]['text':' size, clearing all roots that were created since the creation of','line_number':670,'multiline':False]['text':' the HandleScope.','line_number':671,'multiline':False]['text':'','line_number':672,'multiline':False]['text':' In some cases, objects that are GC-allocated in V8 are not in SM.','line_number':673,'multiline':False]['text':' In particular, irregexp allocates ByteArrays during code generation','line_number':674,'multiline':False]['text':' to store lookup tables. This does not play nicely with the SM','line_number':675,'multiline':False]['text':' macroassembler's requirement that no GC allocations take place','line_number':676,'multiline':False]['text':' while it is on the stack. To work around this, this shim layer also','line_number':677,'multiline':False]['text':' provides the ability to create pseudo-handles, which are not','line_number':678,'multiline':False]['text':' managed by the GC but provide the same API to irregexp. The "root"','line_number':679,'multiline':False]['text':' of a pseudohandle is a unique pointer living in a second arena. If','line_number':680,'multiline':False]['text':' the allocated object should outlive the HandleScope, it must be','line_number':681,'multiline':False]['text':' manually moved out of the arena using takeOwnership.','line_number':682,'multiline':False]['text':' Origin:','line_number':697,'multiline':False]['text':' https://github.com/v8/v8/blob/5792f3587116503fc047d2f68c951c72dced08a5/src/handles/handles.h#L88-L171','line_number':698,'multiline':False]['text':' Constructor for handling automatic up casting.','line_number':706,'multiline':False]['text':' {ObjectRef} is returned by {Handle::operator->}. It should never be stored','line_number':715,'multiline':False]['text':' anywhere or used in any other code; no one should ever have to spell out','line_number':716,'multiline':False]['text':' {ObjectRef} in code. Its only purpose is to be dereferenced immediately by','line_number':717,'multiline':False]['text':' "operator-> chaining". Returning the address of the field is valid because','line_number':718,'multiline':False]['text':' this object's lifetime only ends at the end of the full statement.','line_number':719,'multiline':False]['text':' Origin:','line_number':720,'multiline':False]['text':' https://github.com/v8/v8/blob/03aaa4b3bf4cb01eee1f223b252e6869b04ab08c/src/handles/handles.h#L91-L105','line_number':721,'multiline':False]['text':' A Handle can be converted into a MaybeHandle. Converting a MaybeHandle','line_number':749,'multiline':False]['text':' into a Handle requires checking that it does not point to nullptr.  This','line_number':750,'multiline':False]['text':' ensures nullptr checks before use.','line_number':751,'multiline':False]['text':'','line_number':752,'multiline':False]['text':' Also note that Handles do not provide default equality comparison or hashing','line_number':753,'multiline':False]['text':' operators on purpose. Such operators would be misleading, because intended','line_number':754,'multiline':False]['text':' semantics is ambiguous between Handle location and object identity.','line_number':755,'multiline':False]['text':' Origin:','line_number':756,'multiline':False]['text':' https://github.com/v8/v8/blob/5792f3587116503fc047d2f68c951c72dced08a5/src/handles/maybe-handles.h#L15-L78','line_number':757,'multiline':False]['text':' Constructor for handling automatic up casting from Handle.','line_number':763,'multiline':False]['text':' Ex. Handle<JSArray> can be passed when MaybeHandle<Object> is expected.','line_number':764,'multiline':False]['text':' Convert to a Handle with a type that can be upcasted to.','line_number':774,'multiline':False]['text':' From v8/src/handles/handles-inl.h','line_number':790,'multiline':False]['text':' RAII Guard classes','line_number':797,'multiline':False]['text':' V8 uses this inside DisallowGarbageCollection regions to turn','line_number':801,'multiline':False]['text':' allocation back on before throwing a stack overflow exception or','line_number':802,'multiline':False]['text':' handling interrupts. AutoSuppressGC is sufficient for the former','line_number':803,'multiline':False]['text':' case, but not for the latter: handling interrupts can execute','line_number':804,'multiline':False]['text':' arbitrary script code, and V8 jumps through some scary hoops to','line_number':805,'multiline':False]['text':' "manually relocate unhandlified references" afterwards. To keep','line_number':806,'multiline':False]['text':' things sane, we don't try to handle interrupts while regex code is','line_number':807,'multiline':False]['text':' still on the stack. Instead, we return EXCEPTION and handle','line_number':808,'multiline':False]['text':' interrupts in the caller. (See RegExpShared::execute.)','line_number':809,'multiline':False]['text':' Origin:','line_number':816,'multiline':False]['text':' https://github.com/v8/v8/blob/84f3877c15bc7f8956d21614da4311337525a3c8/src/objects/string.h#L83-L474','line_number':817,'multiline':False]['text':' Max char codes.','line_number':828,'multiline':False]['text':' Origin:','line_number':838,'multiline':False]['text':' https://github.com/v8/v8/blob/84f3877c15bc7f8956d21614da4311337525a3c8/src/objects/string.h#L95-L152','line_number':839,'multiline':False]['text':' A flat string reader provides random access to the contents of a','line_number':905,'multiline':False]['text':' string independent of the character width of the string.','line_number':906,'multiline':False]['text':' ******************************************************','line_number':936,'multiline':False]['text':' Methods that are called from inside the implementation','line_number':937,'multiline':False]['text':' ******************************************************','line_number':938,'multiline':False]['text':' TODO: should we expose this?','line_number':948,'multiline':False]['text':' Each capture (including the match itself) needs two registers.','line_number':959,'multiline':False]['text':' ******************************','line_number':966,'multiline':False]['text':' Static constants','line_number':967,'multiline':False]['text':' ******************************','line_number':968,'multiline':False]['text':' Maximum number of captures allowed.','line_number':970,'multiline':False]['text':' **************************************************','line_number':973,'multiline':False]['text':' JSRegExp::Flags','line_number':974,'multiline':False]['text':' **************************************************','line_number':975,'multiline':False]['text':' Allocate in the nursery','line_number':1014,'multiline':False]['text':' Allocate in the tenured heap','line_number':1015,'multiline':False]['text':'********** Isolate code **********//','line_number':1029,'multiline':False]['text':' This is called from inside no-GC code. Instead of suppressing GC','line_number':1033,'multiline':False]['text':' to allocate the error, we return false from Execute and call','line_number':1034,'multiline':False]['text':' ReportOverRecursed in the caller.','line_number':1035,'multiline':False]['text':' !V8_INTL_SUPPORT','line_number':1055,'multiline':False]['text':' An empty stub for telemetry we don't support','line_number':1058,'multiline':False]['text':'********** Factory code **********//','line_number':1063,'multiline':False]['text':' Allocates a fixed array initialized with undefined values.','line_number':1069,'multiline':False]['text':'********** Stack guard code **********//','line_number':1075,'multiline':False]['text':' This is called from inside no-GC code. V8 runs the interrupt','line_number':1078,'multiline':False]['text':' inside the no-GC code and then "manually relocates unhandlified','line_number':1079,'multiline':False]['text':' references" afterwards. We just return false and let the caller','line_number':1080,'multiline':False]['text':' handle interrupts.','line_number':1081,'multiline':False]['text':'********** Handle code **********//','line_number':1088,'multiline':False]['text':' Origin:','line_number':1128,'multiline':False]['text':' https://github.com/v8/v8/blob/50dcf2af54ce27801a71c47c1be1d2c5e36b0dd6/src/execution/isolate.h#L1909-L1931','line_number':1129,'multiline':False]['text':' Use this to check for stack-overflows in C++ code.','line_number':1134,'multiline':False]['text':' We don't report overrecursion here, but we throw an exception later','line_number':1138,'multiline':False]['text':' and this still affects differential testing. Mimic ReportOverRecursed','line_number':1139,'multiline':False]['text':' (the fuzzers check for this particular string).','line_number':1140,'multiline':False]['text':' Use this to check for interrupt request in C++ code.','line_number':1146,'multiline':False]['text':' Use this to check for stack-overflow when entering runtime from JS code.','line_number':1151,'multiline':False]['text':' Origin: https://github.com/v8/v8/blob/master/src/codegen/label.h','line_number':1189,'multiline':False]['text':'**************************************************','line_number':1213,'multiline':False]['text':' Constant Flags','line_number':1214,'multiline':False]['text':'**************************************************','line_number':1215,'multiline':False]['text':' V8 uses this for differential fuzzing to handle stack overflows.','line_number':1217,'multiline':False]['text':' We address the same problem in StackLimitCheck::HasOverflowed.','line_number':1218,'multiline':False]['text':' Instead of using a flag for this, we provide an implementation of','line_number':1221,'multiline':False]['text':' CanReadUnaligned in SMRegExpMacroAssembler.','line_number':1222,'multiline':False]['text':' This is used to guard a prototype implementation of sequence properties.','line_number':1225,'multiline':False]['text':' See: https://github.com/tc39/proposal-regexp-unicode-sequence-properties','line_number':1226,'multiline':False]['text':' TODO: Expose this behind a pref once it is past stage 2?','line_number':1227,'multiline':False]['text':' This is only used in a helper function in regex.h that we never call.','line_number':1230,'multiline':False]['text':' This is used to guard a prototype implementation of mode modifiers,','line_number':1233,'multiline':False]['text':' which can modify the regexp flags on the fly inside the pattern.','line_number':1234,'multiline':False]['text':' As far as I can tell, there isn't even a TC39 proposal for this.','line_number':1235,'multiline':False]['text':' This is used to guard an old prototype implementation of possessive','line_number':1238,'multiline':False]['text':' quantifiers, which never got past the point of adding parser support.','line_number':1239,'multiline':False]['text':' These affect the default level of optimization. We can still turn','line_number':1242,'multiline':False]['text':' optimization off on a case-by-case basis in CompilePattern - for','line_number':1243,'multiline':False]['text':' example, if a regexp is too long - so we might as well turn these','line_number':1244,'multiline':False]['text':' flags on unconditionally.','line_number':1245,'multiline':False]['text':' peephole optimization not supported on big endian','line_number':1248,'multiline':False]['text':' This is used to control whether regexps tier up from interpreted to','line_number':1254,'multiline':False]['text':' compiled. We control this with --no-native-regexp and','line_number':1255,'multiline':False]['text':' --regexp-warmup-threshold.','line_number':1256,'multiline':False]['text':'**************************************************','line_number':1259,'multiline':False]['text':' Debugging Flags','line_number':1260,'multiline':False]['text':'**************************************************','line_number':1261,'multiline':False]['text':' namespace internal','line_number':1275,'multiline':False]['text':' namespace v8','line_number':1276,'multiline':False]['text':' RegexpShim_h','line_number':1278,'multiline':False]