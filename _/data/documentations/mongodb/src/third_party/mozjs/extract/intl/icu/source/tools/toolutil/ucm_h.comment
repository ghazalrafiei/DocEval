['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
 *******************************************************************************
 *   Copyright (C) 2003-2013, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *******************************************************************************
 *   file name:  ucm.h
 *   encoding:   UTF-8
 *   tab size:   8 (not used)
 *   indentation:4
 *
 *   created on: 2003jun20
 *   created by: Markus W. Scherer
 *
 *   Definitions for the .ucm file parser and handler module ucm.c.
 ','line_number':3,'multiline':True]['text':' constants for UCMapping.moveFlag ','line_number':32,'multiline':True]['text':'
 * Per-mapping data structure
 *
 * u if uLen==1: Unicode code point
 *   else index to uLen code points
 * b if bLen<=4: up to 4 bytes
 *   else index to bLen bytes
 * uLen number of code points
 * bLen number of words containing left-justified bytes
 * bIsMultipleChars indicates that the bytes contain more than one sequence
 *                  according to the state table
 * f flag for roundtrip (0), fallback (1), sub mapping (2), reverse fallback (3)
 *   or "good one-way" mapping (4).
 *   Same values as in the source file after |
 ','line_number':38,'multiline':True]['text':' constants for UCMTable.flagsType ','line_number':62,'multiline':True]['text':' no mappings parsed yet ','line_number':64,'multiline':True]['text':' .ucm file has mappings with | fallback indicators ','line_number':65,'multiline':True]['text':' .ucm file has mappings without | fallback indicators, later wins ','line_number':66,'multiline':True]['text':' both implicit and explicit ','line_number':67,'multiline':True]['text':' index map for mapping by bytes first ','line_number':80,'multiline':True]['text':' UCM_FLAGS_INITIAL etc. ','line_number':84,'multiline':True]['text':' simple accesses ---------------------------------------------------------- ','line_number':111,'multiline':True]['text':' APIs --------------------------------------------------------------------- ','line_number':119,'multiline':True]['text':' @return -1 illegal bytes  0 suitable for base table  1 needs to go into extension table ','line_number':131,'multiline':True]['text':' add a mapping to the base or extension table as appropriate ','line_number':138,'multiline':True]['text':'
 * Remove mappings with their move flag set from the base table
 * and move some of them (with UCM_MOVE_TO_EXT) to the extension table.
 ','line_number':161,'multiline':True]['text':'*
 * Read a table from a .ucm file, from after the CHARMAP line to
 * including the END CHARMAP line.
 ','line_number':168,'multiline':True]['text':'*
 * Check the validity of mappings against a base table's states;
 * necessary for extension-only tables that were read before their base tables.
 ','line_number':177,'multiline':True]['text':'*
 * Check a base table against an extension table.
 * Set the moveTarget!=NULL if it is possible to move mappings from the base.
 * This is the case where base and extension tables are parsed from a single file
 * (moveTarget==ext)
 * or when delta file mappings are subtracted from a base table.
 *
 * When a base table cannot be modified because a delta file is parsed in makeconv,
 * then set moveTarget=NULL.
 *
 * if(intersectBase) then mappings that exist in the base table but not in
 * the extension table are moved to moveTarget instead of showing an error.
 *
 * Special mode:
 * If intersectBase==2 for a DBCS extension table, then SBCS mappings are
 * not moved out of the base unless their Unicode input requires it.
 * This helps ucmkbase generate base tables for DBCS-only extension .cnv files.
 *
 * For both tables in the same file, the extension table is automatically
 * built.
 * For separate files, the extension file can use a complete mapping table (.ucm file),
 * so that common mappings need not be stripped out manually.
 *
 *
 * Sort both tables, and then for each mapping direction:
 *
 * If intersectBase is TRUE and the base table contains a mapping
 * that does not exist in the extension table, then this mapping is moved
 * to moveTarget.
 *
 * - otherwise -
 *
 * If the base table contains a mapping for which the input sequence is
 * the same as the extension input, then
 * - if the output is the same: remove the extension mapping
 * - else: error
 *
 * If the base table contains a mapping for which the input sequence is
 * a prefix of the extension input, then
 * - if moveTarget!=NULL: move the base mapping to the moveTarget table
 * - else: error
 *
 * @return FALSE in case of an irreparable error
 ','line_number':184,'multiline':True]['text':' very makeconv-specific functions ----------------------------------------- ','line_number':265,'multiline':True]['text':' finalize and optimize states after the toUnicode mappings are processed ','line_number':267,'multiline':True]['text':' moved here because it is used inside ucmstate.c ','line_number':274,'multiline':True]['text':' very rptp2ucm-specific functions ----------------------------------------- ','line_number':279,'multiline':True]['text':'
 * Input: Separate tables with mappings from/to Unicode,
 * subchar and subchar1 (0 if none).
 * All mappings must have flag 0.
 *
 * Output: fromUTable will contain the union of mappings with the correct
 * precision flags, and be sorted.
 ','line_number':281,'multiline':True]