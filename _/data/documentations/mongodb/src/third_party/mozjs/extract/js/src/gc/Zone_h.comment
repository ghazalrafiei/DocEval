['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' namespace jit','line_number':36,'multiline':False]['text':' Maps a Cell* to a unique, 64bit id.','line_number':48,'multiline':False]['text':' A vector of FinalizationRecord objects, or CCWs to them.','line_number':60,'multiline':False]['text':' namespace gc','line_number':63,'multiline':False]['text':' If two different nursery strings are wrapped into the same zone, and have','line_number':65,'multiline':False]['text':' the same contents, then deduplication may make them duplicates.','line_number':66,'multiline':False]['text':' `DuplicatesPossible` will allow this and map both wrappers to the same (now','line_number':67,'multiline':False]['text':' tenured) source string.','line_number':68,'multiline':False]['text':' WeakRefHeapPtrVector is a GCVector of WeakRefObjects.','line_number':112,'multiline':False]['text':' call in compacting, to update the target in each WeakRefObject.','line_number':118,'multiline':False]['text':' WeakRefMap is a per-zone GCHashMap, which maps from the target of the JS','line_number':122,'multiline':False]['text':' WeakRef to the list of JS WeakRefs.','line_number':123,'multiline':False]['text':' namespace js','line_number':134,'multiline':False]['text':' [SMDOC] GC Zones','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':' A zone is a collection of compartments. Every compartment belongs to exactly','line_number':140,'multiline':False]['text':' one zone. In Firefox, there is roughly one zone per tab along with a system','line_number':141,'multiline':False]['text':' zone for everything else. Zones mainly serve as boundaries for garbage','line_number':142,'multiline':False]['text':' collection. Unlike compartments, they have no special security properties.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' Every GC thing belongs to exactly one zone. GC things from the same zone but','line_number':145,'multiline':False]['text':' different compartments can share an arena (4k page). GC things from different','line_number':146,'multiline':False]['text':' zones cannot be stored in the same arena. The garbage collector is capable of','line_number':147,'multiline':False]['text':' collecting one zone at a time; it cannot collect at the granularity of','line_number':148,'multiline':False]['text':' compartments.','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':' GC things are tied to zones and compartments as follows:','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' - JSObjects belong to a compartment and cannot be shared between','line_number':153,'multiline':False]['text':'   compartments. If an object needs to point to a JSObject in a different','line_number':154,'multiline':False]['text':'   compartment, regardless of zone, it must go through a cross-compartment','line_number':155,'multiline':False]['text':'   wrapper. Each compartment keeps track of its outgoing wrappers in a table.','line_number':156,'multiline':False]['text':'   JSObjects find their compartment via their ObjectGroup.','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':' - JSStrings do not belong to any particular compartment, but they do belong','line_number':159,'multiline':False]['text':'   to a zone. Thus, two different compartments in the same zone can point to a','line_number':160,'multiline':False]['text':'   JSString. When a string needs to be wrapped, we copy it if it's in a','line_number':161,'multiline':False]['text':'   different zone and do nothing if it's in the same zone. Thus, transferring','line_number':162,'multiline':False]['text':'   strings within a zone is very efficient.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' - Shapes and base shapes belong to a zone and are shared between compartments','line_number':165,'multiline':False]['text':'   in that zone where possible. Accessor shapes store getter and setter','line_number':166,'multiline':False]['text':'   JSObjects which belong to a single compartment, so these shapes and all','line_number':167,'multiline':False]['text':'   their descendants can't be shared with other compartments.','line_number':168,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' - Scripts are also compartment-local and cannot be shared. A script points to','line_number':170,'multiline':False]['text':'   its compartment.','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':' - ObjectGroup and JitCode objects belong to a compartment and cannot be','line_number':173,'multiline':False]['text':'   shared. There is no mechanism to obtain the compartment from a JitCode','line_number':174,'multiline':False]['text':'   object.','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':' A zone remains alive as long as any GC things in the zone are alive. A','line_number':177,'multiline':False]['text':' compartment remains alive as long as any JSObjects, scripts, shapes, or base','line_number':178,'multiline':False]['text':' shapes within it are alive.','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':' We always guarantee that a zone has at least one live compartment by refusing','line_number':181,'multiline':False]['text':' to delete the last compartment in a live zone.','line_number':182,'multiline':False]['text':' The helper thread context with exclusive access to this zone, if','line_number':189,'multiline':False]['text':' usedByHelperThread(), or nullptr when on the main thread.','line_number':190,'multiline':False]['text':' Per-zone data for use by an embedder.','line_number':196,'multiline':False]['text':' Number of marked/finalzied JSString/JSFatInlineString during major GC.','line_number':203,'multiline':False]['text':' When true, skip calling the metadata callback. We use this:','line_number':210,'multiline':False]['text':' - to avoid invoking the callback recursively;','line_number':211,'multiline':False]['text':' - to avoid observing lazy prototype setup (which confuses callbacks that','line_number':212,'multiline':False]['text':'   want to use the types being set up!);','line_number':213,'multiline':False]['text':' - to avoid attaching allocation stacks to allocation stack nodes, which','line_number':214,'multiline':False]['text':'   is silly','line_number':215,'multiline':False]['text':' And so on.','line_number':216,'multiline':False]['text':' Script side-tables. These used to be held by Realm, but are now placed','line_number':219,'multiline':False]['text':' here in order to allow JSScript to access them during finalize (see bug','line_number':220,'multiline':False]['text':' 1568245; this change in 1575350). The tables are initialized lazily by','line_number':221,'multiline':False]['text':' JSScript.','line_number':222,'multiline':False]['text':' Side map for storing unique ids for cells, independent of address.','line_number':243,'multiline':False]['text':' Number of allocations since the most recent minor GC for this thread.','line_number':246,'multiline':False]['text':' Live weakmaps in this zone.','line_number':249,'multiline':False]['text':' The set of compartments in this zone.','line_number':252,'multiline':False]['text':' All cross-zone string wrappers in the zone.','line_number':257,'multiline':False]['text':' This zone's gray roots.','line_number':260,'multiline':False]['text':' List of non-ephemeron weak containers to sweep during','line_number':266,'multiline':False]['text':' beginSweepingSweepGroup.','line_number':267,'multiline':False]['text':' Mapping from not yet marked keys to a vector of all values that the key','line_number':270,'multiline':False]['text':' maps to in any live weak map. Separate tables for nursery and tenured','line_number':271,'multiline':False]['text':' keys.','line_number':272,'multiline':False]['text':' Keep track of all RttValue and related objects in this compartment.','line_number':276,'multiline':False]['text':' This is used by the GC to trace them all first when compacting, since the','line_number':277,'multiline':False]['text':' TypedObject trace hook may access these objects.','line_number':278,'multiline':False]['text':'','line_number':279,'multiline':False]['text':' There are no barriers here - the set contains only tenured objects so no','line_number':280,'multiline':False]['text':' post-barrier is required, and these are weak references so no pre-barrier','line_number':281,'multiline':False]['text':' is required.','line_number':282,'multiline':False]['text':' Bitmap of atoms marked by this zone.','line_number':291,'multiline':False]['text':' Set of atoms recently used by this Zone. Purged on GC.','line_number':294,'multiline':False]['text':' Cache storing allocated external strings. Purged on GC.','line_number':297,'multiline':False]['text':' Cache for Function.prototype.toString. Purged on GC.','line_number':300,'multiline':False]['text':' Information about Shapes and BaseShapes.','line_number':303,'multiline':False]['text':' The set of all finalization registries in this zone.','line_number':306,'multiline':False]['text':' A map from finalization registry targets to a list of finalization records','line_number':312,'multiline':False]['text':' representing registries that the target is registered with and their','line_number':313,'multiline':False]['text':' associated held values.','line_number':314,'multiline':False]['text':' Allow zones to be linked into a list','line_number':328,'multiline':False]['text':' Whether this zone was created for use by a helper thread.','line_number':356,'multiline':False]['text':' Whether this zone is currently in use by a helper thread.','line_number':360,'multiline':False]['text':' Iterate over all cells in the zone. See the definition of ZoneCellIter','line_number':404,'multiline':False]['text':' in gc/GC-inl.h for the possible arguments and documentation.','line_number':405,'multiline':False]['text':' As above, but can return about-to-be-finalised things.','line_number':412,'multiline':False]['text':' Whether this zone can currently be collected.','line_number':431,'multiline':False]['text':' We only need to check needsIncrementalBarrier() for the pre-barrier','line_number':450,'multiline':False]['text':' verifier. During marking isGCMarking() will always be true.','line_number':451,'multiline':False]['text':' Was this zone collected in the last GC.','line_number':455,'multiline':False]['text':' Get a number that is incremented whenever this zone is collected, and','line_number':459,'multiline':False]['text':' possibly at other times too.','line_number':460,'multiline':False]['text':' Perform all pending weakmap entry marking for this zone after','line_number':550,'multiline':False]['text':' transitioning to weak marking mode.','line_number':551,'multiline':False]['text':' A set of edges from this zone to other zones used during GC to calculate','line_number':555,'multiline':False]['text':' sweep groups.','line_number':556,'multiline':False]['text':' Defined in GraphNodeBase base class.','line_number':558,'multiline':False]['text':' Creates a HashNumber based on getUniqueId. Returns false on OOM.','line_number':598,'multiline':False]['text':' Gets an existing UID in |uidp| if one exists.','line_number':601,'multiline':False]['text':' Puts an existing UID in |uidp|, or creates a new UID for this Cell and','line_number':604,'multiline':False]['text':' puts that into |uidp|. Returns false on OOM.','line_number':605,'multiline':False]['text':' Return true if this cell has a UID associated with it.','line_number':611,'multiline':False]['text':' Transfer an id from another cell. This must only be called on behalf of a','line_number':614,'multiline':False]['text':' moving GC. This method is infallible.','line_number':615,'multiline':False]['text':' Remove any unique id associated with this Cell.','line_number':618,'multiline':False]['text':' When finished parsing off-thread, transfer any UIDs we created in the','line_number':621,'multiline':False]['text':' off-thread zone into the target zone.','line_number':622,'multiline':False]['text':' Delete an empty compartment after its contents have been merged.','line_number':628,'multiline':False]['text':' Add the target of JS WeakRef to a kept-alive set maintained by GC.','line_number':639,'multiline':False]['text':' See: https://tc39.es/proposal-weakrefs/#sec-keepduringjob','line_number':640,'multiline':False]['text':' Clear the kept-alive set.','line_number':645,'multiline':False]['text':' See: https://tc39.es/proposal-weakrefs/#sec-clear-kept-objects','line_number':646,'multiline':False]['text':' Assert that the UniqueId table has been redirected successfully.','line_number':660,'multiline':False]['text':' For testing purposes, return the index of the sweep group which this zone','line_number':667,'multiline':False]['text':' was swept in in the last GC.','line_number':668,'multiline':False]['text':' namespace JS','line_number':696,'multiline':False]['text':' namespace gc','line_number':701,'multiline':False]['text':' namespace js','line_number':702,'multiline':False]['text':' gc_Zone_h','line_number':704,'multiline':False]