['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2011-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File TZNAMES_IMPL.CPP
*
*******************************************************************************
','line_number':3,'multiline':True]['text':' place holder for empty ZNames','line_number':47,'multiline':False]['text':' place holder for dummy ZNamesLoader','line_number':48,'multiline':False]['text':' for empty no-fallback time zone names','line_number':49,'multiline':False]['text':' stuff for TZDBTimeZoneNames','line_number':51,'multiline':False]['text':' The order in which strings are stored may be different than the order in the public enum.','line_number':63,'multiline':False]['text':'*
 * ZNameInfo stores zone name information in the trie
 ','line_number':95,'multiline':True]['text':'*
 * ZMatchInfo stores zone name match information used by find method
 ','line_number':104,'multiline':True]['text':' Helper functions','line_number':112,'multiline':False]['text':' ---------------------------------------------------','line_number':117,'multiline':False]['text':' CharacterNode class implementation','line_number':118,'multiline':False]['text':' ---------------------------------------------------','line_number':119,'multiline':False]['text':' Do nothing.','line_number':126,'multiline':False]['text':' At least one value already.','line_number':147,'multiline':False]['text':' There is only one value so far, and not in a vector yet.','line_number':149,'multiline':False]['text':' Create a vector and add the old value.','line_number':150,'multiline':False]['text':' Add the new value.','line_number':162,'multiline':False]['text':' ---------------------------------------------------','line_number':167,'multiline':False]['text':' TextTrieMapSearchResultHandler class implementation','line_number':168,'multiline':False]['text':' ---------------------------------------------------','line_number':169,'multiline':False]['text':' ---------------------------------------------------','line_number':173,'multiline':False]['text':' TextTrieMap class implementation','line_number':174,'multiline':False]['text':' ---------------------------------------------------','line_number':175,'multiline':False]['text':' Use a separate field for fIsEmpty because it will remain unchanged once the','line_number':198,'multiline':False]['text':'   Trie is built, while fNodes and fLazyContents change with the lazy init','line_number':199,'multiline':False]['text':'   of the nodes structure.  Trying to test the changing fields has','line_number':200,'multiline':False]['text':'   thread safety complications.','line_number':201,'multiline':False]['text':'  We defer actually building the TextTrieMap node structure until the first time a','line_number':206,'multiline':False]['text':'     search is performed.  put() simply saves the parameters in case we do','line_number':207,'multiline':False]['text':'     eventually need to build it.','line_number':208,'multiline':False]['text':'     ','line_number':209,'multiline':False]['text':' This method is designed for a persistent key, such as string key stored in','line_number':216,'multiline':False]['text':' resource bundle.','line_number':217,'multiline':False]['text':' Init root node.','line_number':256,'multiline':False]['text':' Ok to use fastCopyFrom() because we discard the copy when we return.','line_number':264,'multiline':False]['text':' We use 16-bit node indexes.','line_number':284,'multiline':False]['text':' Linear search of the sorted list of children.','line_number':306,'multiline':False]['text':' Ensure capacity. Grow fNodes[] if needed.','line_number':321,'multiline':False]['text':' Insert a new child node with c in sorted order.','line_number':331,'multiline':False]['text':' Linear search of the sorted list of children.','line_number':347,'multiline':False]['text':' buildTrie() - The Trie node structure is needed.  Create it from the data that was','line_number':363,'multiline':False]['text':'               saved at the time the ZoneStringFormatter was created.  The Trie is only','line_number':364,'multiline':False]['text':'               needed for parsing operations, which are less common than formatting,','line_number':365,'multiline':False]['text':'               and the Trie is big, which is why its creation is deferred until first use.','line_number':366,'multiline':False]['text':' Aliasing UnicodeString constructor.','line_number':372,'multiline':False]['text':' TODO: if locking the mutex for each check proves to be a performance problem,','line_number':384,'multiline':False]['text':'       add a flag of type atomic_int32_t to class TextTrieMap, and use only','line_number':385,'multiline':False]['text':'       the ICU atomic safe functions for assigning and testing.','line_number':386,'multiline':False]['text':'       Don't test the pointer fLazyContents.','line_number':387,'multiline':False]['text':'       Don't do unless it's really required.','line_number':388,'multiline':False]['text':' Mutex for protecting the lazy creation of the Trie node structure on the first call to search().','line_number':390,'multiline':False]['text':' for folding we need to get a complete code point.','line_number':420,'multiline':False]['text':' size of character may grow after fold operation;','line_number':421,'multiline':False]['text':' then we need to get result as UTF16 code units.','line_number':422,'multiline':False]['text':' here we just get the next UTF16 code unit','line_number':436,'multiline':False]['text':' ---------------------------------------------------','line_number':445,'multiline':False]['text':' ZNStringPool class implementation','line_number':446,'multiline':False]['text':' ---------------------------------------------------','line_number':447,'multiline':False]['text':' Ptr to next pool chunk','line_number':450,'multiline':False]['text':' Index to start of unused area at end of fStrings','line_number':451,'multiline':False]['text':'  Strings array','line_number':452,'multiline':False]['text':' keyHash ','line_number':473,'multiline':True]['text':' keyComp ','line_number':474,'multiline':True]['text':' valueComp ','line_number':475,'multiline':True]['text':'','line_number':533,'multiline':False]['text':'  ZNStringPool::adopt()    Put a string into the hash, but do not copy the string data','line_number':534,'multiline':False]['text':'                           into the pool's storage.  Used for strings from resource bundles,','line_number':535,'multiline':False]['text':'                           which will perisist for the life of the zone string formatter, and','line_number':536,'multiline':False]['text':'                           therefore can be used directly without copying.','line_number':537,'multiline':False]['text':'
 * freeze().   Close the hash table that maps to the pooled strings.
 *             After freezing, the pool can not be searched or added to,
 *             but all existing references to pooled strings remain valid.
 *
 *             The main purpose is to recover the storage used for the hash.
 ','line_number':559,'multiline':True]['text':'*
 * This class stores name data for a meta zone or time zone.
 ','line_number':572,'multiline':True]['text':' Whether we own the location string, if computed rather than loaded from a bundle.','line_number':607,'multiline':False]['text':' A meta zone names instance never has an exemplar location string.','line_number':608,'multiline':False]['text':' Use the persistent ID as the resource key, so we can','line_number':637,'multiline':False]['text':' avoid duplications.','line_number':638,'multiline':False]['text':' TODO: Is there a more efficient way, like intern() in Java?','line_number':639,'multiline':False]['text':' If necessary, compute the location name from the time zone name.','line_number':660,'multiline':False]['text':' Copy the computed location name to the heap','line_number':666,'multiline':False]['text':' Use the persistent ID as the resource key, so we can','line_number':679,'multiline':False]['text':' avoid duplications.','line_number':680,'multiline':False]['text':' TODO: Is there a more efficient way, like intern() in Java?','line_number':681,'multiline':False]['text':' trie.put() takes ownership of the key','line_number':721,'multiline':False]['text':'* Reset for loading another set of names. ','line_number':741,'multiline':True]['text':' Replace "/" with ":".','line_number':756,'multiline':False]['text':' Ignore errors, but propogate possible warnings.','line_number':779,'multiline':False]['text':' 'NO_NAME' indicates internally that this field should remain empty.  It will be','line_number':790,'multiline':False]['text':' replaced by 'NULL' in getNames()','line_number':791,'multiline':False]['text':'noFallback','line_number':796,'multiline':True]['text':'*
    * Returns an array of names.  It is the caller's responsibility to copy the data into a
    * permanent location, as the returned array is owned by the loader instance and may be
    * cleared or leave scope.
    *
    * This is different than Java, where the array will no longer be modified and null
    * may be returned.
    ','line_number':828,'multiline':True]['text':' Remove 'NO_NAME' references in the array and replace with 'NULL'','line_number':837,'multiline':False]['text':' ---------------------------------------------------','line_number':850,'multiline':False]['text':' The meta zone ID enumeration class','line_number':851,'multiline':False]['text':' ---------------------------------------------------','line_number':852,'multiline':False]['text':'status','line_number':899,'multiline':True]['text':'status','line_number':904,'multiline':True]['text':' ---------------------------------------------------','line_number':915,'multiline':False]['text':' ZNameSearchHandler','line_number':916,'multiline':False]['text':' ---------------------------------------------------','line_number':917,'multiline':False]['text':' matches a requested type','line_number':955,'multiline':False]['text':' give the ownership to the caller','line_number':982,'multiline':False]['text':' reset','line_number':986,'multiline':False]['text':' ---------------------------------------------------','line_number':992,'multiline':False]['text':' TimeZoneNamesImpl','line_number':993,'multiline':False]['text':'','line_number':994,'multiline':False]['text':' TimeZoneNames implementation class. This is the main','line_number':995,'multiline':False]['text':' part of this module.','line_number':996,'multiline':False]['text':' ---------------------------------------------------','line_number':997,'multiline':False]['text':'*
 * Deleter for ZNames
 ','line_number':1000,'multiline':True]['text':'*
 * Deleter for ZNameInfo
 ','line_number':1010,'multiline':True]['text':' Load zoneStrings bundle','line_number':1037,'multiline':False]['text':' OK with fallback warning..','line_number':1038,'multiline':False]['text':' Initialize hashtables holding time zone/meta zone names','line_number':1047,'multiline':False]['text':' no key deleters for name maps','line_number':1057,'multiline':False]['text':' preload zone strings for the default zone','line_number':1059,'multiline':False]['text':'
 * This method updates the cache and must be called with a lock,
 * except initializer.
 ','line_number':1070,'multiline':True]['text':' No implementation for now','line_number':1112,'multiline':False]['text':' static implementation of getAvailableMetaZoneIDs(UErrorCode&)','line_number':1127,'multiline':False]['text':' static implementation of getAvailableMetaZoneIDs(const UnicodeString&, UErrorCode&)','line_number':1145,'multiline':False]['text':' static implementation of getMetaZoneID','line_number':1185,'multiline':False]['text':' static implementaion of getReferenceZoneID','line_number':1197,'multiline':False]['text':' cleanup result.','line_number':1208,'multiline':False]['text':' cleanup result.','line_number':1234,'multiline':False]['text':' cleanup result.','line_number':1260,'multiline':False]['text':' Merge the MZ_PREFIX and mzId','line_number':1283,'multiline':False]['text':'
 * This method updates the cache and must be called with a lock
 ','line_number':1299,'multiline':True]['text':' already checked length above','line_number':1309,'multiline':False]['text':'
 * This method updates the cache and must be called with a lock
 ','line_number':1327,'multiline':True]['text':' already checked length above','line_number':1337,'multiline':False]['text':' tznames is never EMPTY','line_number':1348,'multiline':False]['text':' Synchronize so that data is not loaded multiple times.','line_number':1358,'multiline':False]['text':' TODO: Consider more fine-grained synchronization.','line_number':1359,'multiline':False]['text':' First try of lookup.','line_number':1363,'multiline':False]['text':' All names are not yet loaded into the trie.','line_number':1370,'multiline':False]['text':' We may have loaded names for formatting several time zones,','line_number':1371,'multiline':False]['text':' and might be parsing one of those.','line_number':1372,'multiline':False]['text':' Populate the parsing trie from all of the already-loaded names.','line_number':1373,'multiline':False]['text':' Second try of lookup.','line_number':1376,'multiline':False]['text':' There are still some names we haven't loaded into the trie yet.','line_number':1383,'multiline':False]['text':' Load everything now.','line_number':1384,'multiline':False]['text':' Third try: we must return this one.','line_number':1390,'multiline':False]['text':' perfect match, or no more names available','line_number':1405,'multiline':False]['text':' Caller must synchronize.','line_number':1412,'multiline':False]['text':' Replace all colons ':' with slashes '/'','line_number':1481,'multiline':False]['text':' We have already loaded the names for this meta zone.','line_number':1522,'multiline':False]['text':' We have already loaded the names for this time zone.','line_number':1535,'multiline':False]['text':' Let the ZNamesLoader consume the names table.','line_number':1557,'multiline':False]['text':' Ignore fields that aren't tables (e.g., fallbackFormat and regionFormatStandard).','line_number':1571,'multiline':False]['text':' All time zone fields are tables.','line_number':1572,'multiline':False]['text':' Virtual destructors must be defined out of line.','line_number':1579,'multiline':False]['text':' Load the time zone strings','line_number':1603,'multiline':False]['text':' Load the values into the dest array','line_number':1611,'multiline':False]['text':' Load the meta zone name','line_number':1617,'multiline':False]['text':' Load the meta zone strings','line_number':1623,'multiline':False]['text':' Mutex is scoped to the "else" statement','line_number':1624,'multiline':False]['text':' Note: when the metazone doesn't exist, in Java, loadMetaZoneNames returns','line_number':1628,'multiline':False]['text':' a dummy object instead of NULL.','line_number':1629,'multiline':False]['text':' Caller must synchronize.','line_number':1648,'multiline':False]['text':' load strings for all zones','line_number':1659,'multiline':False]['text':' loadStrings also loads related metazone strings','line_number':1670,'multiline':False]['text':' "Etc/"','line_number':1683,'multiline':False]['text':' "SystemV/','line_number':1685,'multiline':False]['text':' "Riyadh8"','line_number':1687,'multiline':False]['text':' '/' ','line_number':1698,'multiline':True]['text':' _ ','line_number':1701,'multiline':True]['text':' space ','line_number':1702,'multiline':True]['text':' ---------------------------------------------------','line_number':1709,'multiline':False]['text':' TZDBTimeZoneNames and its supporting classes','line_number':1710,'multiline':False]['text':'','line_number':1711,'multiline':False]['text':' TZDBTimeZoneNames is an implementation class of','line_number':1712,'multiline':False]['text':' TimeZoneNames holding the IANA tz database abbreviations.','line_number':1713,'multiline':False]['text':' ---------------------------------------------------','line_number':1714,'multiline':False]['text':' filling regions','line_number':1805,'multiline':False]['text':'*
 * TZDBNameInfo stores metazone name information for the IANA abbreviations
 * in the trie
 ','line_number':1875,'multiline':True]['text':' Some tz database abbreviations are ambiguous. For example,','line_number':1931,'multiline':False]['text':' CST means either Central Standard Time or China Standard Time.','line_number':1932,'multiline':False]['text':' Unlike CLDR time zone display names, this implementation','line_number':1933,'multiline':False]['text':' does not use unique names. And TimeZoneFormat does not expect','line_number':1934,'multiline':False]['text':' multiple results returned for the same time zone type.','line_number':1935,'multiline':False]['text':' For this reason, this implementation resolve one among same','line_number':1936,'multiline':False]['text':' zone type with a same name at this level.','line_number':1937,'multiline':False]['text':' parseRegions == null means this is the default metazone','line_number':1939,'multiline':False]['text':' mapping for the abbreviation.','line_number':1940,'multiline':False]['text':' non-default metazone mapping for an abbreviation','line_number':1946,'multiline':False]['text':' comes with applicable regions. For example, the default','line_number':1947,'multiline':False]['text':' metazone mapping for "CST" is America_Central,','line_number':1948,'multiline':False]['text':' but if region is one of CN/MO/TW, "CST" is parsed','line_number':1949,'multiline':False]['text':' as metazone China (China Standard Time).','line_number':1950,'multiline':False]['text':' Note: Workaround for duplicated standard/daylight names','line_number':1971,'multiline':False]['text':' The tz database contains a few zones sharing a','line_number':1972,'multiline':False]['text':' same name for both standard time and daylight saving','line_number':1973,'multiline':False]['text':' time. For example, Australia/Sydney observes DST,','line_number':1974,'multiline':False]['text':' but "EST" is used for both standard and daylight.','line_number':1975,'multiline':False]['text':' When both SHORT_STANDARD and SHORT_DAYLIGHT are included','line_number':1976,'multiline':False]['text':' in the find operation, we cannot tell which one was','line_number':1977,'multiline':False]['text':' actually matched.','line_number':1978,'multiline':False]['text':' TimeZoneFormat#parse returns a matched name type (standard','line_number':1979,'multiline':False]['text':' or daylight) and DateFormat implementation uses the info to','line_number':1980,'multiline':False]['text':' to adjust actual time. To avoid false type information,','line_number':1981,'multiline':False]['text':' this implementation replaces the name type with SHORT_GENERIC.','line_number':1982,'multiline':False]['text':' give the ownership to the caller','line_number':2011,'multiline':False]['text':' reset','line_number':2015,'multiline':False]['text':'*
 * Deleter for TZDBNames
 ','line_number':2022,'multiline':True]['text':' no key deleters for tzdb name maps','line_number':2038,'multiline':False]['text':'*
 * Deleter for TZDBNameInfo
 ','line_number':2043,'multiline':True]['text':' The tz database contains a few zones sharing a','line_number':2082,'multiline':False]['text':' same name for both standard time and daylight saving','line_number':2083,'multiline':False]['text':' time. For example, Australia/Sydney observes DST,','line_number':2084,'multiline':False]['text':' but "EST" is used for both standard and daylight.','line_number':2085,'multiline':False]['text':' we need to store the information for later processing.','line_number':2086,'multiline':False]['text':' No implementation for now','line_number':2164,'multiline':False]['text':' tzID ','line_number':2217,'multiline':True]['text':' type ','line_number':2217,'multiline':True]['text':' No abbreviations associated a zone directly for now.','line_number':2218,'multiline':False]['text':' already checked length above','line_number':2250,'multiline':False]['text':' Use the persistent ID as the resource key, so we can','line_number':2270,'multiline':False]['text':' avoid duplications.','line_number':2271,'multiline':False]['text':' TODO: Is there a more efficient way, like intern() in Java?','line_number':2272,'multiline':False]['text':' Should never happen with a valid input','line_number':2283,'multiline':False]['text':' It's not possible that we get a valid tzdbNames with unknown ID.','line_number':2285,'multiline':False]['text':' But just in case..','line_number':2286,'multiline':False]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2305,'multiline':True]['text':'eof','line_number':2307,'multiline':False]