['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::IsWindow','line_number':16,'multiline':False]['text':' static ','line_number':39,'multiline':True]['text':' static ','line_number':72,'multiline':True]['text':' Clone the shared property map to an unshared dictionary map.','line_number':83,'multiline':False]['text':' Allocate and use a new dictionary shape.','line_number':91,'multiline':False]['text':' namespace js','line_number':126,'multiline':False]['text':' static ','line_number':128,'multiline':True]['text':' We only support custom data properties on ArrayObject and ArgumentsObject.','line_number':145,'multiline':False]['text':' The mechanism is deprecated so we don't want to add new uses.','line_number':146,'multiline':False]['text':' static ','line_number':152,'multiline':True]['text':' First generate a new dictionary shape so that the map can be mutated','line_number':170,'multiline':False]['text':' without having to worry about OOM conditions.','line_number':171,'multiline':False]['text':' Add shapes with a non-None ShapeCachePtr to the shapesWithCache list so that','line_number':253,'multiline':False]['text':' these caches can be discarded on GC.','line_number':254,'multiline':False]['text':' Already registered this shape.','line_number':258,'multiline':False]['text':' static ','line_number':264,'multiline':True]['text':' The object must not contain a property named |id|. The object must be','line_number':272,'multiline':False]['text':' extensible, but allow private fields and sparsifying dense elements.','line_number':273,'multiline':False]['text':' First generate a new dictionary shape so that the map and shape can be','line_number':290,'multiline':False]['text':' mutated without having to worry about OOM conditions.','line_number':291,'multiline':False]['text':' Add the new shape to the old shape's shape cache, to optimize this shape','line_number':337,'multiline':False]['text':' transition. Don't do this if we just allocated a new shape, because that','line_number':338,'multiline':False]['text':' suggests this may not be a hot transition that would benefit from the','line_number':339,'multiline':False]['text':' cache.','line_number':340,'multiline':False]['text':' Ignore OOM, the cache is just an optimization.','line_number':347,'multiline':False]['text':' static ','line_number':369,'multiline':True]['text':' The slot must be a reserved slot.','line_number':378,'multiline':False]['text':' The object must not contain a property named |id| and must be extensible.','line_number':381,'multiline':False]['text':' The object must not be in dictionary mode. This simplifies the code below.','line_number':387,'multiline':False]['text':'
 * Assert some invariants that should hold when changing properties. It's the
 * responsibility of the callers to ensure these hold.
 ','line_number':412,'multiline':True]['text':' A non-configurable property must stay non-configurable.','line_number':422,'multiline':False]['text':' Reject attempts to turn a non-configurable data property into an accessor','line_number':425,'multiline':False]['text':' or custom data property.','line_number':426,'multiline':False]['text':' Reject attempts to turn a non-configurable accessor property into a data','line_number':429,'multiline':False]['text':' property or custom data property.','line_number':430,'multiline':False]['text':' static ','line_number':447,'multiline':True]['text':' If the property flags are not changing, the only thing we have to do is','line_number':474,'multiline':False]['text':' update the object flags. This prevents a dictionary mode conversion below.','line_number':475,'multiline':False]['text':' Fast path for changing the last property in a SharedPropMap. Call','line_number':494,'multiline':False]['text':' getPrevious to "remove" the last property and then call addProperty','line_number':495,'multiline':False]['text':' to re-add the last property with the new flags.','line_number':496,'multiline':False]['text':' Changing a non-last property. Switch to dictionary mode and relookup','line_number':526,'multiline':False]['text':' pointers for the new dictionary map.','line_number':527,'multiline':False]['text':' The object has a new dictionary shape (see toDictionaryMode and','line_number':540,'multiline':False]['text':' generateNewDictionaryShape calls above), so we can mutate the map and shape','line_number':541,'multiline':False]['text':' in place.','line_number':542,'multiline':False]['text':' static ','line_number':562,'multiline':True]['text':' If the property flags are not changing, we're done.','line_number':584,'multiline':False]['text':' Fast path for changing the last property in a SharedPropMap. Call','line_number':593,'multiline':False]['text':' getPrevious to "remove" the last property and then call','line_number':594,'multiline':False]['text':' addCustomDataProperty to re-add the last property with the new flags.','line_number':595,'multiline':False]['text':' Changing a non-last property. Switch to dictionary mode and relookup','line_number':617,'multiline':False]['text':' pointers for the new dictionary map.','line_number':618,'multiline':False]['text':' The object has a new dictionary shape (see toDictionaryMode and','line_number':631,'multiline':False]['text':' generateNewDictionaryShape calls above), so we can mutate the map and shape','line_number':632,'multiline':False]['text':' in place.','line_number':633,'multiline':False]['text':' static ','line_number':644,'multiline':True]['text':' If we're removing an accessor property, ensure the HadGetterSetterChange','line_number':668,'multiline':False]['text':' object flag is set. This is necessary because the slot holding the','line_number':669,'multiline':False]['text':' GetterSetter can be changed indirectly by removing the property and then','line_number':670,'multiline':False]['text':' adding it back with a different GetterSetter value but the same shape.','line_number':671,'multiline':False]['text':' Fast path for removing the last property from a SharedPropMap. In this','line_number':679,'multiline':False]['text':' case we can just call getPrevious and then look up a shape for the','line_number':680,'multiline':False]['text':' resulting map/mapLength.','line_number':681,'multiline':False]['text':' Removing a non-last property. Switch to dictionary mode and relookup','line_number':710,'multiline':False]['text':' pointers for the new dictionary map.','line_number':711,'multiline':False]['text':' The object has a new dictionary shape (see toDictionaryMode and','line_number':727,'multiline':False]['text':' generateNewDictionaryShape calls above), so we can mutate the map and shape','line_number':728,'multiline':False]['text':' in place.','line_number':729,'multiline':False]['text':' If the property has a slot, free its slot number.','line_number':737,'multiline':False]['text':' static ','line_number':749,'multiline':True]['text':' First generate a new dictionary shape so that the shape and map can then','line_number':755,'multiline':False]['text':' be updated infallibly.','line_number':756,'multiline':False]['text':' All indexed properties on the object are now dense. Clear the indexed','line_number':766,'multiline':False]['text':' flag so that we will not start using sparse indexes again if we need','line_number':767,'multiline':False]['text':' to grow the object.','line_number':768,'multiline':False]['text':' static','line_number':776,'multiline':False]['text':' First generate a new dictionary shape so that the map and shape can be','line_number':786,'multiline':False]['text':' updated infallibly.','line_number':787,'multiline':False]['text':' static ','line_number':815,'multiline':True]['text':' Clone the current dictionary shape to a new shape. This ensures ICs and','line_number':818,'multiline':False]['text':' other shape guards are properly invalidated before we start mutating the','line_number':819,'multiline':False]['text':' map or new shape.','line_number':820,'multiline':False]['text':' static ','line_number':839,'multiline':True]['text':' static ','line_number':862,'multiline':True]['text':' static ','line_number':892,'multiline':True]['text':' Windows may not appear on prototype chains.','line_number':918,'multiline':False]['text':' static ','line_number':928,'multiline':True]['text':' DEBUG','line_number':1008,'multiline':False]['text':' static ','line_number':1010,'multiline':True]['text':' Use the cache on the prototype's shape to get to the initial shape.','line_number':1020,'multiline':False]['text':' This cache has a hit rate of 80-90% on typical workloads and is faster','line_number':1021,'multiline':False]['text':' than the HashSet lookup below.','line_number':1022,'multiline':False]['text':' Verify the table lookup below would have resulted in the same','line_number':1032,'multiline':False]['text':' shape.','line_number':1033,'multiline':False]['text':' Ensure the proto object has a unique id to prevent OOM crashes below.','line_number':1047,'multiline':False]['text':' Cache the result of this lookup on the prototype's shape.','line_number':1063,'multiline':False]['text':' static ','line_number':1096,'multiline':True]['text':' static ','line_number':1105,'multiline':True]['text':' static ','line_number':1149,'multiline':True]['text':' static ','line_number':1191,'multiline':True]['text':' The metadata callback can end up causing redundant changes of the initial','line_number':1201,'multiline':False]['text':' shape.','line_number':1202,'multiline':False]['text':' Purge the prototype's shape cache entry.','line_number':1214,'multiline':False]['text':'
   * This affects the shape that will be produced by the various NewObject
   * methods, so clear any cache entry referring to the old shape. This is
   * not required for correctness: the NewObject must always check for a
   * nativeEmpty() result and generate the appropriate properties if found.
   * Clearing the cache entry avoids this duplicate regeneration.
   *
   * Clearing is not necessary when this context is running off
   * thread, as it will not use the new object cache for allocations.
   ','line_number':1222,'multiline':True]