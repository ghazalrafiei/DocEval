['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' Map from all trace kinds to the base GC type.','line_number':32,'multiline':False]['text':' Map from a possibly-derived type to the base GC type.','line_number':44,'multiline':False]['text':'
 * BufferableRef represents an abstract reference for use in the generational
 * GC's remembered set. Entries in the store buffer that cannot be represented
 * with the simple pointer-to-a-pointer scheme must derive from this class and
 * use the generic store buffer interface.
 *
 * A single BufferableRef entry in the generic buffer can represent many entries
 * in the remembered set.  For example js::OrderedHashTableRef represents all
 * the incoming edges corresponding to keys in an ordered hash table.
 ','line_number':59,'multiline':True]['text':' The size of a single block of store buffer storage space. ','line_number':77,'multiline':True]['text':'
 * The StoreBuffer observes all writes that occur in the system and performs
 * efficient filtering of them to derive a remembered set for nursery GC.
 ','line_number':80,'multiline':True]['text':' The size at which a block is about to overflow for the generic buffer. ','line_number':87,'multiline':True]['text':' The size at which other store buffers are about to overflow. ','line_number':91,'multiline':True]['text':'
   * This buffer holds only a single type of edge. Using this buffer is more
   * efficient than the generic buffer when many writes will be to the same
   * type of edge: e.g. Value or Cell*.
   ','line_number':94,'multiline':True]['text':' The canonical set of stores. ','line_number':101,'multiline':True]['text':'
     * A one element cache in front of the canonical set to speed up
     * temporary instances of HeapPtr.
     ','line_number':105,'multiline':True]['text':' Maximum number of entries before we request a minor GC. ','line_number':115,'multiline':True]['text':' Add one item to the buffer. ','line_number':126,'multiline':True]['text':' Remove an item from the store buffer. ','line_number':132,'multiline':True]['text':' Fast, hashless remove of last put.','line_number':134,'multiline':False]['text':' Move any buffered stores to the canonical store set. ','line_number':142,'multiline':True]['text':' Trace the source of all edges in the store buffer. ','line_number':157,'multiline':True]['text':' Trace all generic edges. ','line_number':233,'multiline':True]['text':' Ensure T is derived from BufferableRef. ','line_number':240,'multiline':True]['text':' These definitions must match those in HeapSlot::Kind.','line_number':336,'multiline':False]['text':' NativeObject* | Kind','line_number':340,'multiline':False]['text':' True if this SlotsEdge range overlaps with the other SlotsEdge range,','line_number':367,'multiline':False]['text':' false if they do not overlap.','line_number':368,'multiline':False]['text':' Widen our range by one on each side so that we consider','line_number':374,'multiline':False]['text':' adjacent-but-not-actually-overlapping ranges as overlapping. This','line_number':375,'multiline':False]['text':' is particularly useful for coalescing a series of increasing or','line_number':376,'multiline':False]['text':' decreasing single index writes 0, 1, 2, ..., N into a SlotsEdge','line_number':377,'multiline':False]['text':' range of elements [0, N].','line_number':378,'multiline':False]['text':' Destructively make this SlotsEdge range the union of the other','line_number':389,'multiline':False]['text':' SlotsEdge range and this one. A precondition is that the ranges must','line_number':390,'multiline':False]['text':' overlap.','line_number':391,'multiline':False]['text':' The GC runs tasks that may access the storebuffer in parallel and so must','line_number':416,'multiline':False]['text':' take a lock. The mutator may only access the storebuffer from the main','line_number':417,'multiline':False]['text':' thread.','line_number':418,'multiline':False]['text':' For ReentrancyGuard. ','line_number':469,'multiline':True]['text':' Get the overflowed status. ','line_number':488,'multiline':True]['text':'
   * Brain transplants may add whole cell buffer entires for dead cells. We must
   * evict the nursery prior to sweeping arenas if any such entries are present.
   ','line_number':491,'multiline':True]['text':' Insert a single edge into the buffer/remembered set. ','line_number':499,'multiline':True]['text':' Insert an entry into the generic buffer. ','line_number':523,'multiline':True]['text':' Methods to trace the source of all edges in the store buffer. ','line_number':531,'multiline':True]['text':' For use by our owned buffers and for testing. ','line_number':542,'multiline':True]['text':' For use by the GC only.','line_number':550,'multiline':False]['text':' A set of cells in an arena used to implement the whole cell store buffer.','line_number':555,'multiline':False]['text':' The arena this relates to.','line_number':561,'multiline':False]['text':' Pointer to next set forming a linked list.','line_number':564,'multiline':False]['text':' Bit vector for each possible cell start position.','line_number':567,'multiline':False]['text':' The minor GC number when this was created. This object should not survive','line_number':571,'multiline':False]['text':' past the next minor collection.','line_number':572,'multiline':False]['text':' Construct the empty sentinel object.','line_number':576,'multiline':False]['text':' Sentinel object used for all empty sets.','line_number':612,'multiline':False]['text':'','line_number':613,'multiline':False]['text':' We use a sentinel because it simplifies the JIT code slightly as we can','line_number':614,'multiline':False]['text':' assume all arenas have a cell set.','line_number':615,'multiline':False]['text':' Attempt to trigger a minor GC if free space in the nursery (where these','line_number':622,'multiline':False]['text':' objects are allocated) falls below this threshold.','line_number':623,'multiline':False]['text':' Post-write barrier implementation for GC cells.','line_number':630,'multiline':False]['text':' Implement the post-write barrier for nursery allocateable cell type |T|. Call','line_number':632,'multiline':False]['text':' this from |T::postWriteBarrier|.','line_number':633,'multiline':False]['text':' If the target needs an entry, add it.','line_number':638,'multiline':False]['text':' If we know that the prev has already inserted an entry, we can skip','line_number':641,'multiline':False]['text':' doing the lookup to add the new entry. Note that we cannot safely','line_number':642,'multiline':False]['text':' assert the presence of the entry because it may have been added','line_number':643,'multiline':False]['text':' via a different store buffer.','line_number':644,'multiline':False]['text':' Remove the prev entry if the new value does not need it. There will only','line_number':652,'multiline':False]['text':' be a prev entry if the prev value was in the nursery.','line_number':653,'multiline':False]['text':' Used when we don't have a specific edge to put in the store buffer.','line_number':673,'multiline':False]['text':' namespace gc ','line_number':676,'multiline':True]['text':' namespace js ','line_number':677,'multiline':True]['text':' gc_StoreBuffer_h ','line_number':679,'multiline':True]