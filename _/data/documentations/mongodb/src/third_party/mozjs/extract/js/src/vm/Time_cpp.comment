['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' PR time code. ','line_number':7,'multiline':True]['text':' for _CrtSetReportMode ','line_number':26,'multiline':True]['text':' for timeBegin/EndPeriod ','line_number':27,'multiline':True]['text':' for _set_invalid_parameter_handler ','line_number':28,'multiline':True]['text':' Defined only on Solaris, see Solaris <sys/types.h> ','line_number':33,'multiline':True]['text':' XP_UNIX ','line_number':39,'multiline':True]['text':' Forward declare the function','line_number':43,'multiline':False]['text':' We check the FuzzyFox clock in case it was recently disabled, to prevent','line_number':51,'multiline':False]['text':' time from going backwards.','line_number':52,'multiline':False]['text':' Defined only on Solaris, see Solaris <sys/types.h> ','line_number':60,'multiline':True]['text':' _SVID_GETTOD ','line_number':64,'multiline':True]['text':' Returns the number of microseconds since the Unix epoch.','line_number':71,'multiline':False]['text':' Get the time in 100ns intervals.','line_number':73,'multiline':False]['text':' The Windows epoch is around 1600. The Unix epoch is around 1970.','line_number':76,'multiline':False]['text':' Subtract the difference.','line_number':77,'multiline':False]['text':' Divide by 10 to convert to microseconds.','line_number':81,'multiline':False]['text':' The performance counter frequency ','line_number':86,'multiline':True]['text':' The low res 'epoch' ','line_number':87,'multiline':True]['text':' The high res 'epoch' ','line_number':88,'multiline':True]['text':' By wrapping a timeBegin/EndPeriod pair of calls around this loop,','line_number':100,'multiline':False]['text':' the loop seems to take much less time (1 ms vs 15ms) on Vista.','line_number':101,'multiline':False]['text':' According to the documentation, QueryPerformanceFrequency will never','line_number':125,'multiline':False]['text':' return false or return a non-zero frequency on systems that run','line_number':126,'multiline':False]['text':' Windows XP or later. Also, the frequency is fixed so we only have to','line_number':127,'multiline':False]['text':' query it once.','line_number':128,'multiline':False]['text':' Windows 8 has a new API function we can use.','line_number':138,'multiline':False]['text':' Please see bug 363258 for why the win32 timing code is so complex.','line_number':151,'multiline':False]['text':' Windows 8 has a new API function that does all the work.','line_number':154,'multiline':False]['text':' Recalibrate only if no one else did before us.','line_number':167,'multiline':False]['text':' Since calibration can take a while, make any other','line_number':169,'multiline':False]['text':' threads immediately wait.','line_number':170,'multiline':False]['text':' Restore spin count.','line_number':177,'multiline':False]['text':' Calculate a low resolution time.','line_number':184,'multiline':False]['text':' Grab high resolution time.','line_number':189,'multiline':False]['text':' Assume the NT kernel ticks every 15.6 ms. Unfortunately there's no','line_number':202,'multiline':False]['text':' good way to determine this (NtQueryTimerResolution is an undocumented','line_number':203,'multiline':False]['text':' API), but 15.6 ms seems to be the max possible value. Hardcoding 15.6','line_number':204,'multiline':False]['text':' means we'll recalibrate if the highres and lowres timers diverge by','line_number':205,'multiline':False]['text':' more than 30 ms.','line_number':206,'multiline':False]['text':' Check for clock skew.','line_number':209,'multiline':False]['text':' For some reason that I have not determined, the skew can be','line_number':212,'multiline':False]['text':' up to twice a kernel tick. This does not seem to happen by','line_number':213,'multiline':False]['text':' itself, but I have only seen it triggered by another program','line_number':214,'multiline':False]['text':' doing some kind of file I/O. The symptoms are a negative diff','line_number':215,'multiline':False]['text':' followed by an equally large positive diff.','line_number':216,'multiline':False]['text':' No detectable clock skew.','line_number':218,'multiline':False]['text':' If we already calibrated once this instance, and the','line_number':223,'multiline':False]['text':' clock is still skewed, then either the processor(s) are','line_number':224,'multiline':False]['text':' wildly changing clockspeed or the system is so busy that','line_number':225,'multiline':False]['text':' we get switched out for long periods of time. In either','line_number':226,'multiline':False]['text':' case, it would be infeasible to make use of high','line_number':227,'multiline':False]['text':' resolution results for anything, so let's resort to old','line_number':228,'multiline':False]['text':' behavior for this call. It's possible that in the','line_number':229,'multiline':False]['text':' future, the user will want the high resolution timer, so','line_number':230,'multiline':False]['text':' we don't disable it entirely.','line_number':231,'multiline':False]['text':' It is possible that when we recalibrate, we will return a','line_number':235,'multiline':False]['text':' value less than what we have returned before; this is','line_number':236,'multiline':False]['text':' unavoidable. We cannot tell the different between a','line_number':237,'multiline':False]['text':' faulty QueryPerformanceCounter implementation and user','line_number':238,'multiline':False]['text':' changes to the operating system time. Since we must','line_number':239,'multiline':False]['text':' respect user changes to the operating system time, we','line_number':240,'multiline':False]['text':' cannot maintain the invariant that Date.now() never','line_number':241,'multiline':False]['text':' decreases; the old implementation has this behavior as','line_number':242,'multiline':False]['text':' well.','line_number':243,'multiline':False]['text':' empty ','line_number':255,'multiline':True]['text':' Format a time value into a buffer. Same semantics as strftime() ','line_number':259,'multiline':True]['text':' __MINGW32__','line_number':270,'multiline':False]['text':' XP_WIN','line_number':271,'multiline':False]['text':'
   * On systems where |struct tm| has members tm_gmtoff and tm_zone, we
   * must fill in those values, or else strftime will return wrong results
   * (e.g., bug 511726, bug 554338).
   ','line_number':282,'multiline':True]['text':'
     * Fill out |td| to the time represented by |prtm|, leaving the
     * timezone fields zeroed out. localtime_r will then fill in the
     * timezone fields for that local time according to the system's
     * timezone parameters. Use |timeZoneYear| for the year to ensure the
     * time zone name matches the time zone offset used by the caller.
     ','line_number':290,'multiline':True]['text':' If either mktime or localtime_r failed, fill in the fallback time','line_number':311,'multiline':False]['text':' zone offset |offsetInSeconds| and set the time zone identifier to','line_number':312,'multiline':False]['text':' the empty string.','line_number':313,'multiline':False]['text':'
   * Years before 1900 and after 9999 cause strftime() to abort on Windows.
   * To avoid that we replace it with FAKE_YEAR_BASE + year % 100 and then
   * replace matching substrings in the strftime() result with the real year.
   * Note that FAKE_YEAR_BASE should be a multiple of 100 to make 2-digit
   * year formats (%y) work correctly (since we won't find the fake year
   * in that case).
   ','line_number':324,'multiline':True]['text':'
   * Even with the above, SunOS 4 seems to detonate if tm_zone and tm_gmtoff
   * are null.  This doesn't quite work, though - the timezone is off by
   * tzoff + dst.  (And mktime seems to return -1 for the exact dst
   * changeover time.)
   ','line_number':343,'multiline':True]['text':'
   * MinGW doesn't have _CrtSetReportMode and defines it to be a no-op.
   * We ifdef it off to avoid warnings about unused variables
   ','line_number':353,'multiline':True]['text':' __MINGW32__','line_number':358,'multiline':False]['text':' XP_WIN','line_number':359,'multiline':False]['text':' __MINGW32__','line_number':367,'multiline':False]['text':' XP_WIN','line_number':368,'multiline':False]['text':' Replace the fake year in the result with the real year. ','line_number':382,'multiline':True]['text':' !JS_HAS_INTL_API || MOZ_SYSTEM_ICU ','line_number':397,'multiline':True]