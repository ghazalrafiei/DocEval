['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2013-2014, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationrootelements.h
*
* created on: 2013mar01
* created by: Markus W. Scherer
','line_number':3,'multiline':True]['text':'*
 * Container and access methods for collation elements and weights
 * that occur in the root collator.
 * Needed for finding boundaries for building a tailoring.
 *
 * This class takes and returns 16-bit secondary and tertiary weights.
 ','line_number':26,'multiline':True]['text':'*
     * Higher than any root primary.
     ','line_number':38,'multiline':True]['text':'*
     * Flag in a root element, set if the element contains secondary & tertiary weights,
     * rather than a primary.
     ','line_number':43,'multiline':True]['text':'*
     * Mask for getting the primary range step value from a primary-range-end element.
     ','line_number':48,'multiline':True]['text':'*
         * Index of the first CE with a non-zero tertiary weight.
         * Same as the start of the compact root elements table.
         ','line_number':54,'multiline':True]['text':'*
         * Index of the first CE with a non-zero secondary weight.
         ','line_number':59,'multiline':True]['text':'*
         * Index of the first CE with a non-zero primary weight.
         ','line_number':63,'multiline':True]['text':'*
         * Must match Collation::COMMON_SEC_AND_TER_CE.
         ','line_number':67,'multiline':True]['text':'*
         * Secondary & tertiary boundaries.
         * Bits 31..24: [fixed last secondary common byte 45]
         * Bits 23..16: [fixed first ignorable secondary byte 80]
         * Bits 15.. 8: reserved, 0
         * Bits  7.. 0: [fixed first ignorable tertiary byte 3C]
         ','line_number':71,'multiline':True]['text':'*
         * The current number of indexes.
         * Currently the same as elements[IX_FIRST_TERTIARY_INDEX].
         ','line_number':79,'multiline':True]['text':'*
     * Returns the boundary between tertiary weights of primary/secondary CEs
     * and those of tertiary CEs.
     * This is the upper limit for tertiaries of primary/secondary CEs.
     * This minus one is the lower limit for tertiaries of tertiary CEs.
     ','line_number':86,'multiline':True]['text':'*
     * Returns the first assigned tertiary CE.
     ','line_number':96,'multiline':True]['text':'*
     * Returns the last assigned tertiary CE.
     ','line_number':103,'multiline':True]['text':'*
     * Returns the last common secondary weight.
     * This is the lower limit for secondaries of primary CEs.
     ','line_number':110,'multiline':True]['text':'*
     * Returns the boundary between secondary weights of primary CEs
     * and those of secondary CEs.
     * This is the upper limit for secondaries of primary CEs.
     * This minus one is the lower limit for secondaries of secondary CEs.
     ','line_number':118,'multiline':True]['text':'*
     * Returns the first assigned secondary CE.
     ','line_number':128,'multiline':True]['text':'*
     * Returns the last assigned secondary CE.
     ','line_number':135,'multiline':True]['text':'*
     * Returns the first assigned primary weight.
     ','line_number':142,'multiline':True]['text':' step=0: cannot be a range end','line_number':146,'multiline':False]['text':'*
     * Returns the first assigned primary CE.
     ','line_number':149,'multiline':True]['text':'*
     * Returns the last root CE with a primary weight before p.
     * Intended only for reordering group boundaries.
     ','line_number':156,'multiline':True]['text':'*
     * Returns the first root CE with a primary weight of at least p.
     * Intended only for reordering group boundaries.
     ','line_number':162,'multiline':True]['text':'*
     * Returns the primary weight before p.
     * p must be greater than the first root primary.
     ','line_number':168,'multiline':True]['text':'* Returns the secondary weight before [p, s]. ','line_number':174,'multiline':True]['text':'* Returns the tertiary weight before [p, s, t]. ','line_number':177,'multiline':True]['text':'*
     * Finds the index of the input primary.
     * p must occur as a root primary, and must not be 0.
     ','line_number':180,'multiline':True]['text':'*
     * Returns the primary weight after p where index=findPrimary(p).
     * p must be at least the first root primary.
     ','line_number':186,'multiline':True]['text':'*
     * Returns the secondary weight after [p, s] where index=findPrimary(p)
     * except use index=0 for p=0.
     *
     * Must return a weight for every root [p, s] as well as for every weight
     * returned by getSecondaryBefore(). If p!=0 then s can be BEFORE_WEIGHT16.
     *
     * Exception: [0, 0] is handled by the CollationBuilder:
     * Both its lower and upper boundaries are special.
     ','line_number':191,'multiline':True]['text':'*
     * Returns the tertiary weight after [p, s, t] where index=findPrimary(p)
     * except use index=0 for p=0.
     *
     * Must return a weight for every root [p, s, t] as well as for every weight
     * returned by getTertiaryBefore(). If s!=0 then t can be BEFORE_WEIGHT16.
     *
     * Exception: [0, 0, 0] is handled by the CollationBuilder:
     * Both its lower and upper boundaries are special.
     ','line_number':202,'multiline':True]['text':'*
     * Returns the first secondary & tertiary weights for p where index=findPrimary(p)+1.
     ','line_number':215,'multiline':True]['text':'*
     * Finds the largest index i where elements[i]<=p.
     * Requires first primary<=p<0xffffff00 (PRIMARY_SENTINEL).
     * Does not require that p is a root collator primary.
     ','line_number':220,'multiline':True]['text':'*
     * Data structure:
     *
     * The first few entries are indexes, up to elements[IX_FIRST_TERTIARY_INDEX].
     * See the comments on the IX_ constants.
     *
     * All other elements are a compact form of the root collator CEs
     * in mostly collation order.
     *
     * A sequence of one or more root CEs with the same primary weight is stored as
     * one element with the primary weight, with the SEC_TER_DELTA_FLAG flag not set,
     * followed by elements with only the secondary/tertiary weights,
     * each with that flag set.
     * If the lowest secondary/tertiary combination is Collation::COMMON_SEC_AND_TER_CE,
     * then the element for that combination is omitted.
     *
     * Note: If the first actual secondary/tertiary combination is higher than
     * Collation::COMMON_SEC_AND_TER_CE (which is unusual),
     * the runtime code will assume anyway that Collation::COMMON_SEC_AND_TER_CE is present.
     *
     * A range of only-primary CEs with a consistent "step" increment
     * from each primary to the next may be stored as a range.
     * Only the first and last primary are stored, and the last has the step
     * value in the low bits (PRIMARY_STEP_MASK).
     *
     * An range-end element may also either start a new range or be followed by
     * elements with secondary/tertiary deltas.
     *
     * A primary element that is not a range end has zero step bits.
     *
     * There is no element for the completely ignorable CE (all weights 0).
     *
     * Before elements[IX_FIRST_PRIMARY_INDEX], all elements are secondary/tertiary deltas,
     * for all of the ignorable root CEs.
     *
     * There are no elements for unassigned-implicit primary CEs.
     * All primaries stored here are at most 3 bytes long.
     ','line_number':231,'multiline':True]['text':' !UCONFIG_NO_COLLATION','line_number':275,'multiline':False]['text':' __COLLATIONROOTELEMENTS_H__','line_number':276,'multiline':False]