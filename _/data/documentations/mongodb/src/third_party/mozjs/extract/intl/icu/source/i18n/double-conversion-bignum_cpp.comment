['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' From the double-conversion library. Original license:','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Copyright 2010 the V8 project authors. All rights reserved.','line_number':6,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':7,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':8,'multiline':False]['text':' met:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':11,'multiline':False]['text':'       notice, this list of conditions and the following disclaimer.','line_number':12,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':13,'multiline':False]['text':'       copyright notice, this list of conditions and the following','line_number':14,'multiline':False]['text':'       disclaimer in the documentation and/or other materials provided','line_number':15,'multiline':False]['text':'       with the distribution.','line_number':16,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':17,'multiline':False]['text':'       contributors may be used to endorse or promote products derived','line_number':18,'multiline':False]['text':'       from this software without specific prior written permission.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':21,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':23,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':24,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':25,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':26,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':27,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':28,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':29,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':30,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':31,'multiline':False]['text':' ICU PATCH: ifdef around UCONFIG_NO_FORMATTING','line_number':33,'multiline':False]['text':' ICU PATCH: Customize header file paths for ICU.','line_number':40,'multiline':False]['text':' ICU PATCH: Wrap in ICU namespace','line_number':45,'multiline':False]['text':' Mark variable as used.','line_number':64,'multiline':False]['text':' Guaranteed to lie in one Bigit.','line_number':68,'multiline':False]['text':' 2^64 = 18446744073709551616 > 10^19','line_number':112,'multiline':False]['text':' Let's just say that each digit needs 4 bits.','line_number':117,'multiline':False]['text':' Unlike AssignDecimalString(), this function is "only" used','line_number':144,'multiline':False]['text':' for unit-tests and therefore not performance critical.','line_number':145,'multiline':False]['text':' Required capacity could be reduced by ignoring leading zeros.','line_number':148,'multiline':False]['text':' TODO: static_assert','line_number':150,'multiline':False]['text':' Accumulates converted hex digits until at least kBigitSize bits.','line_number':151,'multiline':False]['text':' Works with non-factor-of-four kBigitSizes.','line_number':152,'multiline':False]['text':' Accumulates converted hex digits until at least','line_number':153,'multiline':False]['text':' If this has a greater exponent than other append zero-bigits to this.','line_number':183,'multiline':False]['text':' After this call exponent_ <= other.exponent_.','line_number':184,'multiline':False]['text':' There are two possibilities:','line_number':187,'multiline':False]['text':'   aaaaaaaaaaa 0000  (where the 0s represent a's exponent)','line_number':188,'multiline':False]['text':'     bbbbb 00000000','line_number':189,'multiline':False]['text':'   ----------------','line_number':190,'multiline':False]['text':'   ccccccccccc 0000','line_number':191,'multiline':False]['text':' or','line_number':192,'multiline':False]['text':'    aaaaaaaaaa 0000','line_number':193,'multiline':False]['text':'  bbbbbbbbb 0000000','line_number':194,'multiline':False]['text':'  -----------------','line_number':195,'multiline':False]['text':'  cccccccccccc 0000','line_number':196,'multiline':False]['text':' In both cases we might need a carry bigit.','line_number':197,'multiline':False]['text':' We require this to be bigger than other.','line_number':228,'multiline':False]['text':' The product of a bigit with the factor is of size kBigitSize + 32.','line_number':274,'multiline':False]['text':' Assert that this number + 1 (for the carry) fits into double chunk.','line_number':275,'multiline':False]['text':' We shift by exponent at the end just before returning.','line_number':351,'multiline':False]['text':' Comba multiplication: compute each column separately.','line_number':373,'multiline':False]['text':' Example: r = a2a1a0 * b2b1b0.','line_number':374,'multiline':False]['text':'    r =  1    * a0b0 +','line_number':375,'multiline':False]['text':'        10    * (a1b0 + a0b1) +','line_number':376,'multiline':False]['text':'        100   * (a2b0 + a1b1 + a0b2) +','line_number':377,'multiline':False]['text':'        1000  * (a2b1 + a1b2) +','line_number':378,'multiline':False]['text':'        10000 * a2b2','line_number':379,'multiline':False]['text':'','line_number':380,'multiline':False]['text':' In the worst case we have to accumulate nb-digits products of digit*digit.','line_number':381,'multiline':False]['text':'','line_number':382,'multiline':False]['text':' Assert that the additional number of bits in a DoubleChunk are enough to','line_number':383,'multiline':False]['text':' sum up used_digits of Bigit*Bigit.','line_number':384,'multiline':False]['text':' First shift the digits so we don't overwrite them.','line_number':389,'multiline':False]['text':' We have two loops to avoid some 'if's in the loop.','line_number':394,'multiline':False]['text':' Process temporary digit i with power i.','line_number':396,'multiline':False]['text':' The sum of the two indices must be equal to i.','line_number':397,'multiline':False]['text':' Sum all of the sub-products.','line_number':400,'multiline':False]['text':' Invariant: sum of both indices is again equal to i.','line_number':414,'multiline':False]['text':' Inner loop runs 0 times on last iteration, emptying accumulator.','line_number':415,'multiline':False]['text':' The overwritten RawBigit(i) will never be read in further loop iterations,','line_number':423,'multiline':False]['text':' because bigit_index1 and bigit_index2 are always greater','line_number':424,'multiline':False]['text':' than i - used_bigits_.','line_number':425,'multiline':False]['text':' Since the result was guaranteed to lie inside the number the','line_number':429,'multiline':False]['text':' accumulator must be 0 now.','line_number':430,'multiline':False]['text':' Don't forget to update the used_digits and the exponent.','line_number':433,'multiline':False]['text':' We expect base to be in range 2-32, and most often to be 10.','line_number':449,'multiline':False]['text':' It does not make much sense to implement different algorithms for counting','line_number':450,'multiline':False]['text':' the bits.','line_number':451,'multiline':False]['text':' 1 extra bigit for the shifting, and one for rounded final_size.','line_number':463,'multiline':False]['text':' Left to Right exponentiation.','line_number':466,'multiline':False]['text':' The mask is now pointing to the bit above the most significant 1-bit of','line_number':470,'multiline':False]['text':' power_exponent.','line_number':471,'multiline':False]['text':' Get rid of first 1-bit;','line_number':472,'multiline':False]['text':' Verify that there is enough space in this_value to perform the','line_number':480,'multiline':False]['text':' multiplication.  The first bit_size bits must be 0.','line_number':481,'multiline':False]['text':' Now do the same thing as a bignum.','line_number':500,'multiline':False]['text':' And finally add the saved shifts.','line_number':509,'multiline':False]['text':' Precondition: this/other < 16bit.','line_number':514,'multiline':False]['text':' Easy case: if we have less digits than the divisor than the result is 0.','line_number':520,'multiline':False]['text':' Note: this handles the case where this == 0, too.','line_number':521,'multiline':False]['text':' Start by removing multiples of 'other' until both numbers have the same','line_number':530,'multiline':False]['text':' number of digits.','line_number':531,'multiline':False]['text':' This naive approach is extremely inefficient if `this` divided by other','line_number':533,'multiline':False]['text':' is big. This function is implemented for doubleToString where','line_number':534,'multiline':False]['text':' the result should be small (less than 10).','line_number':535,'multiline':False]['text':' Remove the multiples of the first digit.','line_number':538,'multiline':False]['text':' Example this = 23 and other equals 9. -> Remove 2 multiples.','line_number':539,'multiline':False]['text':' Both bignums are at the same length now.','line_number':546,'multiline':False]['text':' Since other has more than 0 digits we know that the access to','line_number':547,'multiline':False]['text':' RawBigit(used_bigits_ - 1) is safe.','line_number':548,'multiline':False]['text':' Shortcut for easy (and common) case.','line_number':553,'multiline':False]['text':' No need to even try to subtract. Even if other's remaining digits were 0','line_number':568,'multiline':False]['text':' another subtraction would be too much.','line_number':569,'multiline':False]['text':' Each bigit must be printable as separate hex-character.','line_number':604,'multiline':False]['text':' We add 1 for the terminating '\0' character.','line_number':616,'multiline':False]['text':' And finally the last bigit.','line_number':636,'multiline':False]['text':' Otherwise they are equal up to this digit. Try the next digit.','line_number':677,'multiline':False]['text':' The exponent encodes 0-bigits. So if there are more 0-digits in 'a' than','line_number':696,'multiline':False]['text':' 'b' has digits, then the bigit-length of 'a'+'b' must be equal to the one','line_number':697,'multiline':False]['text':' of 'a'.','line_number':698,'multiline':False]['text':' Starting at min_exponent all digits are == 0. So no need to compare them.','line_number':704,'multiline':False]['text':' Zero.','line_number':733,'multiline':False]['text':' If "X" represents a "hidden" bigit (by the exponent) then we are in the','line_number':741,'multiline':False]['text':' following case (a == this, b == other):','line_number':742,'multiline':False]['text':' a:  aaaaaaXXXX   or a:   aaaaaXXX','line_number':743,'multiline':False]['text':' b:     bbbbbbX      b: bbbbbbbbXX','line_number':744,'multiline':False]['text':' We replace some of the hidden digits (X) of a with 0 digits.','line_number':745,'multiline':False]['text':' a:  aaaaaa000X   or a:   aaaaa0XX','line_number':746,'multiline':False]['text':' namespace double_conversion','line_number':810,'multiline':False]['text':' ICU PATCH: Close ICU namespace','line_number':812,'multiline':False]['text':' ICU PATCH: close #if !UCONFIG_NO_FORMATTING','line_number':814,'multiline':False]