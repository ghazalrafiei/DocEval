['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * Typed array, ArrayBuffer, and DataView creation, predicate, and accessor
 * functions.
 ','line_number':7,'multiline':True]['text':' MOZ_ASSERT, MOZ_CRASH','line_number':15,'multiline':False]['text':' mozilla::AssertedCast','line_number':16,'multiline':False]['text':' size_t','line_number':18,'multiline':False]['text':' {,u}int8_t, {,u}int16_t, {,u}int32_t','line_number':19,'multiline':False]['text':' JS_PUBLIC_API','line_number':21,'multiline':False]['text':' JS::GetClass, JS::GetPrivate, JS::GetReservedSlot','line_number':23,'multiline':False]['text':' JS::Handle','line_number':24,'multiline':False]['text':' js::Scalar::Type','line_number':25,'multiline':False]['text':' namespace JS','line_number':34,'multiline':False]['text':'
 * Create a new typed array with nelements elements.
 *
 * These functions (except the WithBuffer variants) fill in the array with
 * zeros.
 ','line_number':36,'multiline':True]['text':'
 * Create a new typed array and copy in values from the given object. The
 * object is used as if it were an array; that is, the new array (if
 * successfully created) will have length given by array.length, and its
 * elements will be those specified by array[0], array[1], and so on, after
 * conversion to the typed array element type.
 ','line_number':61,'multiline':True]['text':'
 * Create a new typed array using the given ArrayBuffer or
 * SharedArrayBuffer for storage.  The length value is optional; if -1
 * is passed, enough elements to use up the remainder of the byte
 * array is used as the default value.
 ','line_number':88,'multiline':True]['text':'*
 * Check whether obj supports JS_GetTypedArray* APIs. Note that this may return
 * false if a security wrapper is encountered that denies the unwrapping. If
 * this test or one of the JS_Is*Array tests succeeds, then it is safe to call
 * the various accessor JSAPI calls defined below.
 ','line_number':129,'multiline':True]['text':'*
 * Check whether obj supports JS_GetArrayBufferView* APIs. Note that this may
 * return false if a security wrapper is encountered that denies the
 * unwrapping. If this test or one of the more specific tests succeeds, then it
 * is safe to call the various ArrayBufferView accessor JSAPI calls defined
 * below.
 ','line_number':137,'multiline':True]['text':'
 * Test for specific typed array types (ArrayBufferView subtypes)
 ','line_number':146,'multiline':True]['text':'*
 * Return the isShared flag of a typed array, which denotes whether
 * the underlying buffer is a SharedArrayBuffer.
 *
 * |obj| must have passed a JS_IsTypedArrayObject/JS_Is*Array test, or somehow
 * be known that it would pass such a test: it is a typed array or a wrapper of
 * a typed array, and the unwrapping will succeed.
 ','line_number':160,'multiline':True]['text':'
 * Test for specific typed array types (ArrayBufferView subtypes) and return
 * the unwrapped object if so, else nullptr.  Never throws.
 ','line_number':170,'multiline':True]['text':' namespace detail','line_number':209,'multiline':False]['text':' This one isn't inlined because it's rather tricky (by dint of having to deal','line_number':234,'multiline':False]['text':' with a dozen-plus classes and varying slot layouts.','line_number':235,'multiline':False]['text':' namespace js','line_number':241,'multiline':False]['text':'
 * Unwrap Typed arrays all at once. Return nullptr without throwing if the
 * object cannot be viewed as the correct typed array, or the typed array
 * object on success, filling both outparameters.
 ','line_number':243,'multiline':True]['text':'
 * Get the type of elements in a typed array, or MaxTypedArrayViewType if a
 * DataView.
 *
 * |obj| must have passed a JS_IsArrayBufferView/JS_Is*Array test, or somehow
 * be known that it would pass such a test: it is an ArrayBufferView or a
 * wrapper of an ArrayBufferView, and the unwrapping will succeed.
 ','line_number':285,'multiline':True]['text':'*
 * Return the number of elements in a typed array.
 *
 * |obj| must have passed a JS_IsTypedArrayObject/JS_Is*Array test, or somehow
 * be known that it would pass such a test: it is a typed array or a wrapper of
 * a typed array, and the unwrapping will succeed.
 ','line_number':295,'multiline':True]['text':'*
 * Return the byte offset from the start of an ArrayBuffer to the start of a
 * typed array view.
 *
 * |obj| must have passed a JS_IsTypedArrayObject/JS_Is*Array test, or somehow
 * be known that it would pass such a test: it is a typed array or a wrapper of
 * a typed array, and the unwrapping will succeed.
 ','line_number':304,'multiline':True]['text':'*
 * Return the byte length of a typed array.
 *
 * |obj| must have passed a JS_IsTypedArrayObject/JS_Is*Array test, or somehow
 * be known that it would pass such a test: it is a typed array or a wrapper of
 * a typed array, and the unwrapping will succeed.
 ','line_number':314,'multiline':True]['text':'*
 * More generic name for JS_GetTypedArrayByteLength to cover DataViews as well
 ','line_number':323,'multiline':True]['text':'*
 * More generic name for JS_GetTypedArrayByteOffset to cover DataViews as well
 ','line_number':328,'multiline':True]['text':'
 * Return a pointer to the start of the data referenced by a typed array. The
 * data is still owned by the typed array, and should not be modified on
 * another thread. Furthermore, the pointer can become invalid on GC (if the
 * data is small and fits inside the array's GC header), so callers must take
 * care not to hold on across anything that could GC.
 *
 * |obj| must have passed a JS_Is*Array test, or somehow be known that it would
 * pass such a test: it is a typed array or a wrapper of a typed array, and the
 * unwrapping will succeed.
 *
 * |*isSharedMemory| will be set to true if the typed array maps a
 * SharedArrayBuffer, otherwise to false.
 ','line_number':333,'multiline':True]['text':'*
 * Same as above, but for any kind of ArrayBufferView. Prefer the type-specific
 * versions when possible.
 ','line_number':373,'multiline':True]['text':'*
 * Return a "fixed" pointer (one that will not move during a GC) to the
 * ArrayBufferView's data. Note that this will not keep the object alive; the
 * holding object should be rooted or traced. If the view is storing the data
 * inline, this will copy the data to the provided buffer, returning nullptr if
 * bufSize is inadequate.
 *
 * Avoid using this unless necessary. JS_GetArrayBufferViewData is simpler and
 * more efficient because it requires the caller to ensure that a GC will not
 * occur and thus does not need to handle movable data.
 ','line_number':380,'multiline':True]['text':'*
 * If the bufSize passed to JS_GetArrayBufferViewFixedData is at least this
 * many bytes, then any copied data is guaranteed to fit into the provided
 * buffer.
 ','line_number':395,'multiline':True]['text':'*
 * Return the ArrayBuffer or SharedArrayBuffer underlying an ArrayBufferView.
 * This may return a detached buffer.  |obj| must be an object that would
 * return true for JS_IsArrayBufferViewObject().
 ','line_number':402,'multiline':True]['text':'*
 * Create a new DataView using the given buffer for storage. The given buffer
 * must be an ArrayBuffer or SharedArrayBuffer (or a cross-compartment wrapper
 * of either type), and the offset and length must fit within the bounds of the
 * buffer. Currently, nullptr will be returned and an exception will be thrown
 * if these conditions do not hold, but do not depend on that behavior.
 ','line_number':410,'multiline':True]['text':'
 * Returns whether the passed array buffer view is 'large': its byteLength >= 2
 * GB. See also SetLargeArrayBuffersEnabled.
 *
 * |obj| must pass a JS_IsArrayBufferViewObject test.
 ','line_number':423,'multiline':True]['text':' namespace JS','line_number':431,'multiline':False]['text':' js_experimental_TypedData_h','line_number':433,'multiline':False]