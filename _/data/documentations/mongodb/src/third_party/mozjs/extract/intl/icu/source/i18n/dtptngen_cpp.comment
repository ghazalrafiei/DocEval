['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
*******************************************************************************
* Copyright (C) 2007-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File DTPTNGEN.CPP
*
*******************************************************************************
','line_number':3,'multiline':True]['text':'*
 * If we are on EBCDIC, use an iterator which will
 * traverse the bundles in ASCII order.
 ','line_number':47,'multiline':True]['text':' Must be C linkage to pass function pointer to the sort function ','line_number':72,'multiline':True]['text':'CompareContext *cmp=(CompareContext *)context;','line_number':78,'multiline':False]['text':' *****************************************************************************','line_number':135,'multiline':False]['text':' class DateTimePatternGenerator','line_number':136,'multiline':False]['text':' *****************************************************************************','line_number':137,'multiline':False]['text':' GyQMwWEDFdaHmsSv','line_number':139,'multiline':False]['text':' The UDATPG_x_FIELD constants and these fields have a different order than in ICU4J','line_number':141,'multiline':False]['text':' patternChar, field, type, minLen, weight','line_number':146,'multiline':False]['text':' LOW_E is currently not used in CLDR data, should not be canonical','line_number':191,'multiline':False]['text':' really internal use, so we don't care','line_number':198,'multiline':False]['text':' b needs to be closer to a than to B, so we make this 3*DT_DELTA','line_number':210,'multiline':False]['text':' 24 hour','line_number':215,'multiline':False]['text':' 24 hour','line_number':216,'multiline':False]['text':' 12 hour','line_number':217,'multiline':False]['text':' 12 hour','line_number':218,'multiline':False]['text':' The C code has had versions of the following 3, keep & update. Should not need these, but...','line_number':219,'multiline':False]['text':' Without these, certain tests using e.g. staticGetSkeleton fail because j/J in patterns','line_number':220,'multiline':False]['text':' get skipped instead of mapped to the right hour chars, for example in','line_number':221,'multiline':False]['text':'   DateFormatTest::TestPatternFromSkeleton','line_number':222,'multiline':False]['text':'   IntlTestDateTimePatternGeneratorAPI:: testStaticGetSkeleton','line_number':223,'multiline':False]['text':'   DateIntervalFormatTest::testTicket11985','line_number':224,'multiline':False]['text':' Need to investigate better handling of jJC replacement e.g. in staticGetSkeleton.','line_number':225,'multiline':False]['text':' 12/24 hour no AM/PM','line_number':226,'multiline':False]['text':' 12/24 hour','line_number':227,'multiline':False]['text':' 12/24 hour with preferred dayPeriods for 12','line_number':228,'multiline':False]['text':' last row of dtTypes[]','line_number':257,'multiline':False]['text':' The UDATPG_x_FIELD constants and these fields have a different order than in ICU4J','line_number':262,'multiline':False]['text':' The UDATPG_x_FIELD constants and these fields have a different order than in ICU4J','line_number':268,'multiline':False]['text':' [UDATPG_WIDTH_COUNT]','line_number':272,'multiline':False]['text':' TODO(ticket:13619): remove when definition uncommented in dtptngen.h.','line_number':276,'multiline':False]['text':' max length of CLDR field tag (type + width)','line_number':279,'multiline':False]['text':' For appendItems','line_number':281,'multiline':False]['text':' {0} \u251C{2}: {1}\u2524','line_number':283,'multiline':False]['text':'static const UChar repeatedPatterns[6]={CAP_G, CAP_E, LOW_Z, LOW_V, CAP_Q, 0}; // "GEzvQ"','line_number':285,'multiline':False]['text':'static const UnicodeString repeatedPattern=UnicodeString(repeatedPatterns);','line_number':293,'multiline':False]['text':' reflexive case','line_number':386,'multiline':False]['text':' NUL-terminate for the C API.','line_number':398,'multiline':False]['text':' NUL-terminate for the C API.','line_number':415,'multiline':False]['text':' NUL-terminate for the C API.','line_number':418,'multiline':False]['text':' Value deleter for hashmap.','line_number':473,'multiline':False]['text':' Close hashmap at cleanup.','line_number':478,'multiline':False]['text':' Added ICU-20383, used by JP','line_number':488,'multiline':False]['text':' Added ICU-20383, not currently used','line_number':489,'multiline':False]['text':' Added ICU-20383, not currently used','line_number':492,'multiline':False]['text':' Added ICU-20383, not currently used','line_number':493,'multiline':False]['text':' ICU-20383 The following are unlikely and not currently used','line_number':494,'multiline':False]['text':' namespace','line_number':499,'multiline':False]['text':'const char *baseLangName = locale.getBaseName(); // unused','line_number':503,'multiline':False]['text':' skip to prevent circular dependency when called from SimpleDateFormat::construct','line_number':508,'multiline':False]['text':' If any of the above methods failed then the object is in an invalid state.','line_number':516,'multiline':False]['text':' DateTimePatternGenerator::initData','line_number':518,'multiline':False]['text':' Initialize sub-sinks.','line_number':523,'multiline':False]['text':'noFallback','line_number':527,'multiline':True]['text':' below we construct a list[] that has an entry for the "preferred" value at [0],','line_number':535,'multiline':False]['text':' followed by 1 or more entries for the "allowed" values, terminated with an','line_number':536,'multiline':False]['text':' entry for ALLOWED_HOUR_FORMAT_UNKNOWN (not included in length below)','line_number':537,'multiline':False]['text':' 1 preferred to add later, 1 allowed to add now','line_number':544,'multiline':False]['text':' 1 preferred, getSize allowed','line_number':553,'multiline':False]['text':' fallback handling for missing data','line_number':570,'multiline':False]['text':' 1 preferred, 1 allowed','line_number':571,'multiline':False]['text':' At this point list[] will have at least two non-ALLOWED_HOUR_FORMAT_UNKNOWN entries,','line_number':580,'multiline':False]['text':' followed by ALLOWED_HOUR_FORMAT_UNKNOWN.','line_number':581,'multiline':False]['text':' namespace','line_number':606,'multiline':False]['text':' TODO: Currently in the enumeration each table allocates a new array.','line_number':623,'multiline':False]['text':' Try to reduce the number of memory allocations. Consider storing a','line_number':624,'multiline':False]['text':' UVector32 with the concatenation of all of the sub-arrays, put the start index','line_number':625,'multiline':False]['text':' into the hashmap, store 6 single-value sub-arrays right at the beginning of the','line_number':626,'multiline':False]['text':' vector (at index enum*2) for easy data sharing, copy sub-arrays into runtime','line_number':627,'multiline':False]['text':' object. Remember to clean up the vector, too.','line_number':628,'multiline':False]['text':' must be here for correct lifetime','line_number':652,'multiline':False]['text':' Unexpected, but fail gracefully','line_number':663,'multiline':False]['text':' We need to check if there is an hour cycle on locale','line_number':672,'multiline':False]['text':' Check if the region has an alias','line_number':689,'multiline':False]['text':' the real region code','line_number':694,'multiline':False]['text':' Lookup is successful','line_number':699,'multiline':False]['text':' Here allowedFormats points to a list consisting of key for preferredFormat,','line_number':700,'multiline':False]['text':' followed by one or more keys for allowedFormats, then followed by ALLOWED_HOUR_FORMAT_UNKNOWN.','line_number':701,'multiline':False]['text':' Lookup failed, twice','line_number':718,'multiline':False]['text':' We need to return something, but the caller should ignore it','line_number':733,'multiline':False]['text':' anyways since the returned status is a failure.','line_number':734,'multiline':False]['text':'status','line_number':754,'multiline':True]['text':'status','line_number':764,'multiline':True]['text':'status','line_number':773,'multiline':True]['text':'status','line_number':783,'multiline':True]['text':' Load with ICU patterns','line_number':798,'multiline':False]['text':' TODO Maybe we should return an error when the date format isn't simple.','line_number':807,'multiline':False]['text':' TODO: C++ and Java are inconsistent (see #12568).','line_number':816,'multiline':False]['text':' C++ uses MEDIUM, but Java uses SHORT.','line_number':817,'multiline':False]['text':' TODO Maybe we should return an error when the date format isn't simple.','line_number':822,'multiline':False]['text':' initial default','line_number':878,'multiline':False]['text':' obtain a locale that always has the calendar key value that should be used','line_number':882,'multiline':False]['text':' ensure null termination','line_number':893,'multiline':False]['text':' now get the calendar key value from that locale','line_number':894,'multiline':False]['text':' If the input locale was invalid, don't fail with missing resource error, instead','line_number':902,'multiline':False]['text':' continue with default of Gregorian.','line_number':903,'multiline':False]['text':' ICU-20383 No longer set fDefaultHourFormatChar to the hour format character from','line_number':919,'multiline':False]['text':' this pattern; instead it is set from localeToAllowedHourFormatsMap which now','line_number':920,'multiline':False]['text':' includes entries for both preferred and allowed formats.','line_number':921,'multiline':False]['text':' HACK for hh:ss','line_number':923,'multiline':False]['text':' Destination for data, modified via setters.','line_number':929,'multiline':False]['text':'noFallback','line_number':935,'multiline':True]['text':' Read-only alias.','line_number':950,'multiline':False]['text':' Destination for data, modified via setters.','line_number':962,'multiline':False]['text':'noFallback','line_number':968,'multiline':True]['text':' TODO: Implement support for alias types.','line_number':980,'multiline':False]['text':' F0, F1, ..., F9','line_number':1005,'multiline':False]['text':' F10, F11, ...','line_number':1008,'multiline':False]['text':' NUL-terminate for the C API.','line_number':1012,'multiline':False]['text':' Destination for data, modified via setters.','line_number':1027,'multiline':False]['text':' Temporary variable, required for calling addPatternWithSkeleton.','line_number':1030,'multiline':False]['text':' Add pattern with its associated skeleton. Override any duplicate','line_number':1044,'multiline':False]['text':' derived from std patterns, but not a previous availableFormats entry:','line_number':1045,'multiline':False]['text':' Virtual destructors must be defined out of line.','line_number':1054,'multiline':False]['text':' to be filled in with the type to use, if all goes well','line_number':1068,'multiline':False]['text':' Local err to ignore resource not found exceptions','line_number':1072,'multiline':False]['text':' Load append item formats.','line_number':1075,'multiline':False]['text':' i.e., calendar/xxx/appendItems','line_number':1082,'multiline':False]['text':' Load CLDR item names.','line_number':1087,'multiline':False]['text':' Load the available formats from CLDR.','line_number':1093,'multiline':False]['text':' i.e., calendar/xxx/availableFormats','line_number':1103,'multiline':False]['text':' NUL-terminate for the C API.','line_number':1123,'multiline':False]['text':' NUL-terminate for the C API.','line_number':1145,'multiline':False]['text':' Replace hour metacharacters 'j', 'C' and 'J', set flags as necessary','line_number':1188,'multiline':False]['text':'
 * Map a skeleton that may have metacharacters jJC to one without, by replacing
 * the metacharacters with locale-appropriate fields of h/H/k/K and of a/b/B
 * (depends on fDefaultHourFormatChar and fAllowedHourFormats being set, which in
 * turn depends on initData having been run). This method also updates the flags
 * as necessary. Returns the updated skeleton.
 ','line_number':1231,'multiline':True]['text':' Handle special mappings for 'j' and 'C' in which fields lengths','line_number':1249,'multiline':False]['text':' 1,3,5 => hour field length 1','line_number':1250,'multiline':False]['text':' 2,4,6 => hour field length 2','line_number':1251,'multiline':False]['text':' 1,2 => abbreviated dayPeriod (field length 1..3)','line_number':1252,'multiline':False]['text':' 3,4 => long dayPeriod (field length 4)','line_number':1253,'multiline':False]['text':' 5,6 => narrow dayPeriod (field length 5)','line_number':1254,'multiline':False]['text':' 1 less than total field length','line_number':1256,'multiline':False]['text':' in #13183 just add b/B to skeleton, no longer need to set special flags','line_number':1282,'multiline':False]['text':' Get pattern for skeleton with H, then replace H or k','line_number':1299,'multiline':False]['text':' with fDefaultHourFormatChar (if different)','line_number':1300,'multiline':False]['text':' NUL-terminate for the C API.','line_number':1338,'multiline':False]['text':' NUL-terminate for the C API.','line_number':1363,'multiline':False]['text':' NUL-terminate for the C API.','line_number':1419,'multiline':False]['text':' For DateTimePatternGenerator::addPatternWithSkeleton -','line_number':1439,'multiline':False]['text':' If skeletonToUse is specified, then an availableFormats entry is being added. In this case:','line_number':1440,'multiline':False]['text':' 1. We pass that skeleton to matcher.set instead of having it derive a skeleton from the pattern.','line_number':1441,'multiline':False]['text':' 2. If the new entry's skeleton or basePattern does match an existing entry but that entry also had a skeleton specified','line_number':1442,'multiline':False]['text':' (i.e. it was also from availableFormats), then the new entry does not override it regardless of the value of the override','line_number':1443,'multiline':False]['text':' parameter. This prevents later availableFormats entries from a parent locale overriding earlier ones from the actual','line_number':1444,'multiline':False]['text':' specified locale. However, availableFormats entries *should* override entries with matching skeleton whose skeleton was','line_number':1445,'multiline':False]['text':' derived (i.e. entries derived from the standard date/time patters for the specified locale).','line_number':1446,'multiline':False]['text':' 3. When adding the pattern (patternMap->add), we set a new boolean to indicate that the added entry had a','line_number':1447,'multiline':False]['text':' specified skeleton (which sets a new field in the PtnElem in the PatternMap).','line_number':1448,'multiline':False]['text':' no longer trims skeleton fields to max len 3, per #7930','line_number':1471,'multiline':False]['text':' or perhaps instead: basePattern = *skeletonToUse;','line_number':1472,'multiline':False]['text':' We only care about base conflicts - and replacing the pattern associated with a base - if:','line_number':1474,'multiline':False]['text':' 1. the conflicting previous base pattern did *not* have an explicit skeleton; in that case the previous','line_number':1475,'multiline':False]['text':' base + pattern combination was derived from either (a) a canonical item, (b) a standard format, or','line_number':1476,'multiline':False]['text':' (c) a pattern specified programmatically with a previous call to addPattern (which would only happen','line_number':1477,'multiline':False]['text':' if we are getting here from a subsequent call to addPattern).','line_number':1478,'multiline':False]['text':' 2. a skeleton is specified for the current pattern, but override=false; in that case we are checking','line_number':1479,'multiline':False]['text':' availableFormats items from root, which should not override any previous entry with the same base.','line_number':1480,'multiline':False]['text':' The only time we get here with override=true and skeletonToUse!=null is when adding availableFormats','line_number':1490,'multiline':False]['text':' items from CLDR data. In that case, we don't want an item from a parent locale to replace an item with','line_number':1491,'multiline':False]['text':' same skeleton from the specified locale, so skip the current item if skeletonWasSpecified is true for','line_number':1492,'multiline':False]['text':' the previously-specified conflicting item.','line_number':1493,'multiline':False]['text':' ensure termination','line_number':1526,'multiline':False]['text':' now delete width portion of key','line_number':1536,'multiline':False]['text':' Because we iterate over a map the order is undefined. Can change between implementations,','line_number':1567,'multiline':False]['text':' versions, and will very likely be different between Java and C/C++.','line_number':1568,'multiline':False]['text':' So if we have patterns with the same distance we also look at the missingFieldMask,','line_number':1569,'multiline':False]['text':' and we favour the smallest one. Because the field is a bitmask this technically means we','line_number':1570,'multiline':False]['text':' favour differences in the "least significant fields". For example we prefer the one with differences','line_number':1571,'multiline':False]['text':' in seconds field vs one with difference in the hours field.','line_number':1572,'multiline':False]['text':' If the best raw match had a specified skeleton and that skeleton was requested by the caller,','line_number':1584,'multiline':False]['text':' then return it too. This generally happens when the caller needs to pass that skeleton','line_number':1585,'multiline':False]['text':' through to adjustFieldTypes so the latter can do a better job.','line_number':1586,'multiline':False]['text':' don't adjust','line_number':1616,'multiline':False]['text':' handle day periods - with #13183, no longer need special handling here, integrated with normal types','line_number':1621,'multiline':False]['text':' Here:','line_number':1627,'multiline':False]['text':' - "reqField" is the field from the originally requested skeleton after replacement','line_number':1628,'multiline':False]['text':' of metacharacters 'j', 'C' and 'J', with length "reqFieldLen".','line_number':1629,'multiline':False]['text':' - "field" is the field from the found pattern.','line_number':1630,'multiline':False]['text':'','line_number':1631,'multiline':False]['text':' The adjusted field should consist of characters from the originally requested','line_number':1632,'multiline':False]['text':' skeleton, except in the case of UDATPG_MONTH_FIELD or','line_number':1633,'multiline':False]['text':' UDATPG_WEEKDAY_FIELD or UDATPG_YEAR_FIELD, in which case it should consist','line_number':1634,'multiline':False]['text':' of characters from the found pattern. In some cases of UDATPG_HOUR_FIELD,','line_number':1635,'multiline':False]['text':' there is adjustment following the "defaultHourFormatChar". There is explanation','line_number':1636,'multiline':False]['text':' how it is done below.','line_number':1637,'multiline':False]['text':'','line_number':1638,'multiline':False]['text':' The length of the adjusted field (adjFieldLen) should match that in the originally','line_number':1639,'multiline':False]['text':' requested skeleton, except that in the following cases the length of the adjusted field','line_number':1640,'multiline':False]['text':' should match that in the found pattern (i.e. the length of this pattern field should','line_number':1641,'multiline':False]['text':' not be adjusted):','line_number':1642,'multiline':False]['text':' 1. typeValue is UDATPG_HOUR_FIELD/MINUTE/SECOND and the corresponding bit in options is','line_number':1643,'multiline':False]['text':'    not set (ticket #7180). Note, we may want to implement a similar change for other','line_number':1644,'multiline':False]['text':'    numeric fields (MM, dd, etc.) so the default behavior is to get locale preference for','line_number':1645,'multiline':False]['text':'    field length, but options bits can be used to override this.','line_number':1646,'multiline':False]['text':' 2. There is a specified skeleton for the found pattern and one of the following is true:','line_number':1647,'multiline':False]['text':'    a) The length of the field in the skeleton (skelFieldLen) is equal to reqFieldLen.','line_number':1648,'multiline':False]['text':'    b) The pattern field is numeric and the skeleton field is not, or vice versa.','line_number':1649,'multiline':False]['text':' 1-3 for E are equivalent to 3 for c,e','line_number':1654,'multiline':False]['text':' don't adjust the field length in the found pattern','line_number':1665,'multiline':False]['text':' The adjustment here is required to match spec (https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-hour).','line_number':1676,'multiline':False]['text':' It is necessary to match the hour-cycle preferred by the Locale.','line_number':1677,'multiline':False]['text':' Given that, we need to do the following adjustments:','line_number':1678,'multiline':False]['text':' 1. When hour-cycle is h11 it should replace 'h' by 'K'.','line_number':1679,'multiline':False]['text':' 2. When hour-cycle is h23 it should replace 'H' by 'k'.','line_number':1680,'multiline':False]['text':' 3. When hour-cycle is h24 it should replace 'k' by 'H'.','line_number':1681,'multiline':False]['text':' 4. When hour-cycle is h12 it should replace 'K' by 'h'.','line_number':1682,'multiline':False]['text':' precondition: EVERY single field must work!','line_number':1728,'multiline':False]['text':' cannot find the proper missing field','line_number':1730,'multiline':False]['text':' walk through the hash table and create a deep clone','line_number':1808,'multiline':False]['text':' out of memory','line_number':1946,'multiline':False]['text':' out of memory','line_number':1950,'multiline':False]['text':' Release ownership from the LocalPointer of the PtnElem object.','line_number':1954,'multiline':False]['text':' The PtnElem will now be owned by either the boot (for the first entry in the linked-list)','line_number':1955,'multiline':False]['text':' or owned by the previous PtnElem object in the linked-list.','line_number':1956,'multiline':False]['text':' PatternMap destructor','line_number':2000,'multiline':False]['text':' mapped pattern value','line_number':2005,'multiline':False]['text':' the baseChar must be A-Z or a-z','line_number':2012,'multiline':False]['text':' out of memory','line_number':2029,'multiline':False]['text':' out of memory','line_number':2033,'multiline':False]['text':' the boot array now owns the PtnElem.','line_number':2037,'multiline':False]['text':' the boot array now owns the PtnElem.','line_number':2040,'multiline':False]['text':' add new element to the list.','line_number':2047,'multiline':False]['text':' out of memory','line_number':2056,'multiline':False]['text':' out of memory','line_number':2060,'multiline':False]['text':' Pattern exists in the list already.','line_number':2067,'multiline':False]['text':' Overwrite the value.','line_number':2071,'multiline':False]['text':' It was a bug that we were not doing the following previously,','line_number':2073,'multiline':False]['text':' though that bug hid other problems by making things partly work.','line_number':2074,'multiline':False]['text':' PatternMap::add','line_number':2078,'multiline':False]['text':' Find the pattern from the given basePattern string.','line_number':2080,'multiline':False]['text':' key to search for','line_number':2082,'multiline':False]['text':' no match','line_number':2086,'multiline':False]['text':' PatternMap::getFromBasePattern','line_number':2098,'multiline':False]['text':' Find the pattern from the given skeleton.','line_number':2101,'multiline':False]['text':' At least when this is called from getBestRaw & addPattern (in which case specifiedSkeletonPtr is non-NULL),','line_number':2102,'multiline':False]['text':' the comparison should be based on skeleton.original (which is unique and tied to the distance measurement in bestRaw)','line_number':2103,'multiline':False]['text':' and not skeleton.baseOriginal (which is not unique); otherwise we may pick a different skeleton than the one with the','line_number':2104,'multiline':False]['text':' optimum distance value in getBestRaw. When this is called from public getRedundants (specifiedSkeletonPtr is NULL),','line_number':2105,'multiline':False]['text':' for now it will continue to compare based on baseOriginal so as not to change the behavior unnecessarily.','line_number':2106,'multiline':False]['text':' key to search for','line_number':2108,'multiline':False]['text':' find boot entry','line_number':2115,'multiline':False]['text':' no match','line_number':2118,'multiline':False]['text':' called from DateTimePatternGenerator::getBestRaw or addPattern, use original','line_number':2123,'multiline':False]['text':' called from DateTimePatternGenerator::getRedundants, use baseOriginal','line_number':2125,'multiline':False]['text':' find any key existing in the mapping table already.','line_number':2176,'multiline':False]['text':' return TRUE if there is an existing key, otherwise return FALSE.','line_number':2177,'multiline':False]['text':' end of the list','line_number':2207,'multiline':False]['text':' PatternMap::getDuplicateElem','line_number':2210,'multiline':False]['text':' don't skip 'a' anymore, dayPeriod handled specially below','line_number':2246,'multiline':False]['text':' #20739, we have a skeleton with minutes and milliseconds, but no seconds','line_number':2271,'multiline':False]['text':'','line_number':2272,'multiline':False]['text':' Theoretically we would need to check and fix all fields with "gaps":','line_number':2273,'multiline':False]['text':' for example year-day (no month), month-hour (no day), and so on, All the possible field combinations.','line_number':2274,'multiline':False]['text':' Plus some smartness: year + hour => should we add month, or add day-of-year?','line_number':2275,'multiline':False]['text':' What about month + day-of-week, or month + am/pm indicator.','line_number':2276,'multiline':False]['text':' I think beyond a certain point we should not try to fix bad developer input and try guessing what they mean.','line_number':2277,'multiline':False]['text':' Garbage in, garbage out.','line_number':2278,'multiline':False]['text':' Force the use of seconds','line_number':2282,'multiline':False]['text':' first entry for UDATPG_SECOND_FIELD','line_number':2285,'multiline':False]['text':' We add value.length, same as above, when type is first initialized.','line_number':2288,'multiline':False]['text':' The value we want to "fake" here is "s", and 1 means "s".length()','line_number':2289,'multiline':False]['text':' #13183, handle special behavior for day period characters (a, b, B)','line_number':2297,'multiline':False]['text':' We have a skeleton with 12-hour-cycle format','line_number':2300,'multiline':False]['text':' But we do not have a day period in the skeleton; add the default DAYPERIOD (currently "a")','line_number':2302,'multiline':False]['text':' first entry for UDATPG_DAYPERIOD_FIELD','line_number':2305,'multiline':False]['text':' Skeleton has 24-hour-cycle hour format and has dayPeriod, delete dayPeriod (i.e. ignore it)','line_number':2315,'multiline':False]['text':' Reset the result first.','line_number':2326,'multiline':False]['text':' and other is not','line_number':2346,'multiline':False]['text':' same as clear','line_number':2371,'multiline':False]['text':' Find the next token with the starting position and length','line_number':2408,'multiline':False]['text':' Note: the startPos may','line_number':2409,'multiline':False]['text':' check the current char is between A-Z or a-z','line_number':2416,'multiline':False]['text':' not the same token','line_number':2429,'multiline':False]['text':' Verify that all are the same character.','line_number':2464,'multiline':False]['text':' This function assumes the current itemIndex points to the quote literal.','line_number':2495,'multiline':False]['text':' Please call isQuoteLiteral prior to this function.','line_number':2496,'multiline':False]['text':' two single quotes e.g. 'o''clock'','line_number':2509,'multiline':False]['text':' Set initial values to zero','line_number':2643,'multiline':False]['text':' for backward compatibility: if DateTimeMatcher.set added a single 'a' that','line_number':2744,'multiline':False]['text':' was not in the provided skeleton, remove it here before returning skeleton.','line_number':2745,'multiline':False]['text':' for backward compatibility: if DateTimeMatcher.set added a single 'a' that','line_number':2757,'multiline':False]['text':' was not in the provided skeleton, remove it here before returning skeleton.','line_number':2758,'multiline':False]['text':' fSkeletons vector now owns the UnicodeString.','line_number':2817,'multiline':False]['text':'status','line_number':2836,'multiline':True]['text':'status','line_number':2841,'multiline':True]['text':' fPatterns now owns the string.','line_number':2890,'multiline':False]['text':'status','line_number':2902,'multiline':True]['text':'status','line_number':2907,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2938,'multiline':True]['text':'eof','line_number':2940,'multiline':False]