['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 1998-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File uprntf_p.c
*
* Modification History:
*
*   Date        Name        Description
*   11/23/98    stephen     Creation.
*   03/12/99    stephen     Modified for new C API.
*   08/07/2003  george      Reunify printf implementations
******************************************************************************
','line_number':3,'multiline':True]['text':' ANSI style formatting ','line_number':33,'multiline':True]['text':' Use US-ASCII characters only for formatting ','line_number':34,'multiline':True]['text':' % ','line_number':36,'multiline':True]['text':' s ','line_number':38,'multiline':True]['text':' c ','line_number':40,'multiline':True]['text':' d, i ','line_number':42,'multiline':True]['text':' u ','line_number':44,'multiline':True]['text':' o ','line_number':46,'multiline':True]['text':' x, X ','line_number':48,'multiline':True]['text':' f ','line_number':50,'multiline':True]['text':' e, E ','line_number':52,'multiline':True]['text':' g, G ','line_number':54,'multiline':True]['text':' n ','line_number':56,'multiline':True]['text':' non-ANSI extensions ','line_number':59,'multiline':True]['text':' Use US-ASCII characters only for formatting ','line_number':60,'multiline':True]['text':' p ','line_number':62,'multiline':True]['text':' V ','line_number':64,'multiline':True]['text':' P ','line_number':66,'multiline':True]['text':' C  K is old format ','line_number':68,'multiline':True]['text':' S  U is old format ','line_number':70,'multiline':True]['text':'*
 * A u_printf handler function.  
 * A u_printf handler is responsible for handling a single u_printf 
 * format specification, for example 'd' or 's'.
 * @param stream The UFILE to which to write output.
 * @param info A pointer to a <TT>u_printf_spec_info</TT> struct containing
 * information on the format specification.
 * @param args A pointer to the argument data
 * @return The number of Unicode characters written to <TT>stream</TT>.
 ','line_number':76,'multiline':True]['text':'*
 * Struct encapsulating a single uprintf format specification.
 ','line_number':99,'multiline':True]['text':' Information on this spec ','line_number':103,'multiline':True]['text':' Position of width in arg list ','line_number':104,'multiline':True]['text':' Position of precision in arg list ','line_number':105,'multiline':True]['text':' Position of data in arg list ','line_number':106,'multiline':True]['text':' We do not use handlers for 0-0x1f ','line_number':111,'multiline':True]['text':' buffer size for formatting ','line_number':114,'multiline':True]['text':' "(null)" ','line_number':118,'multiline':True]['text':' " " ','line_number':119,'multiline':True]['text':' Sets the sign of a format based on u_printf_spec_info ','line_number':121,'multiline':True]['text':' TODO: Is setting the prefix symbol to a positive sign a good idea in all locales? ','line_number':122,'multiline':True]['text':' Setting UNUM_PLUS_SIGN_SYMBOL affects the exponent too. ','line_number':137,'multiline':True]['text':' unum_setSymbol(format, UNUM_PLUS_SIGN_SYMBOL, gSpaceStr, 1, &status); ','line_number':138,'multiline':True]['text':' handle a '%' ','line_number':179,'multiline':True]['text':' put a single '%' onto the output ','line_number':192,'multiline':True]['text':' handle 's' ','line_number':196,'multiline':True]['text':' convert from the default codepage to Unicode ','line_number':211,'multiline':True]['text':' width = minimum # of characters to write ','line_number':232,'multiline':True]['text':' precision = maximum # of characters to write ','line_number':233,'multiline':True]['text':' clean up ','line_number':240,'multiline':True]['text':' convert from default codepage to Unicode ','line_number':260,'multiline':True]['text':' Remember that this may be an MBCS character ','line_number':263,'multiline':True]['text':' width = minimum # of characters to write ','line_number':268,'multiline':True]['text':' precision = maximum # of characters to write ','line_number':269,'multiline':True]['text':' precision is ignored when handling a char ','line_number':270,'multiline':True]['text':' mask off any necessary bits ','line_number':296,'multiline':True]['text':'  if(! info->fIsLongDouble)
    num &= DBL_MAX;','line_number':297,'multiline':True]['text':' get the formatter ','line_number':300,'multiline':True]['text':' handle error ','line_number':303,'multiline':True]['text':' save the formatter's state ','line_number':307,'multiline':True]['text':' set the appropriate flags and number of decimal digits on the formatter ','line_number':311,'multiline':True]['text':' set the # of decimal digits ','line_number':313,'multiline':True]['text':' '#' means always show decimal point ','line_number':317,'multiline':True]['text':' copy of printf behavior on Solaris - '#' shows 6 digits ','line_number':318,'multiline':True]['text':' # of decimal digits is 6 if precision not specified regardless of locale ','line_number':322,'multiline':True]['text':' set whether to show the sign ','line_number':326,'multiline':True]['text':' format the number ','line_number':331,'multiline':True]['text':' restore the number format ','line_number':338,'multiline':True]['text':' TODO: Is this needed? ','line_number':339,'multiline':True]['text':' Reset back to original value regardless of what the error was ','line_number':344,'multiline':True]['text':' HSYS ','line_number':352,'multiline':True]['text':' mask off any necessary bits ','line_number':371,'multiline':True]['text':' get the formatter ','line_number':377,'multiline':True]['text':' handle error ','line_number':380,'multiline':True]['text':' set the appropriate flags on the formatter ','line_number':384,'multiline':True]['text':' set the minimum integer digits ','line_number':386,'multiline':True]['text':' set the minimum # of digits ','line_number':388,'multiline':True]['text':' set whether to show the sign ','line_number':393,'multiline':True]['text':' format the number ','line_number':398,'multiline':True]['text':' restore the number format ','line_number':405,'multiline':True]['text':' Reset back to original value regardless of what the error was ','line_number':411,'multiline':True]['text':' mask off any necessary bits ','line_number':432,'multiline':True]['text':' format the number, preserving the minimum # of digits ','line_number':438,'multiline':True]['text':' convert to alt form, if desired ','line_number':443,'multiline':True]['text':' shift the formatted string right by 2 chars ','line_number':445,'multiline':True]['text':' mask off any necessary bits ','line_number':468,'multiline':True]['text':' format the number, preserving the minimum # of digits ','line_number':474,'multiline':True]['text':' doesn't matter for octal ','line_number':476,'multiline':True]['text':' convert to alt form, if desired ','line_number':479,'multiline':True]['text':' shift the formatted string right by 1 char ','line_number':481,'multiline':True]['text':' TODO: Fix this once uint64_t can be formatted. ','line_number':504,'multiline':True]['text':' get the formatter ','line_number':510,'multiline':True]['text':' handle error ','line_number':513,'multiline':True]['text':' set the appropriate flags on the formatter ','line_number':517,'multiline':True]['text':' set the minimum integer digits ','line_number':519,'multiline':True]['text':' set the minimum # of digits ','line_number':521,'multiline':True]['text':' To mirror other stdio implementations, we ignore the sign argument ','line_number':526,'multiline':True]['text':' format the number ','line_number':528,'multiline':True]['text':' restore the number format ','line_number':535,'multiline':True]['text':' format the pointer in hex ','line_number':554,'multiline':True]['text':', info->fPrecision','line_number':555,'multiline':True]['text':' mask off any necessary bits ','line_number':582,'multiline':True]['text':'  if(! info->fIsLongDouble)
    num &= DBL_MAX;','line_number':583,'multiline':True]['text':' get the formatter ','line_number':586,'multiline':True]['text':' handle error ','line_number':589,'multiline':True]['text':' set the appropriate flags on the formatter ','line_number':593,'multiline':True]['text':' Upper/lower case the e ','line_number':601,'multiline':True]['text':' e ','line_number':602,'multiline':True]['text':' save the formatter's state ','line_number':621,'multiline':True]['text':' set the appropriate flags and number of decimal digits on the formatter ','line_number':625,'multiline':True]['text':' set the # of decimal digits ','line_number':627,'multiline':True]['text':' e ','line_number':628,'multiline':True]['text':' E ','line_number':628,'multiline':True]['text':' '#' means always show decimal point ','line_number':637,'multiline':True]['text':' copy of printf behavior on Solaris - '#' shows 6 digits ','line_number':638,'multiline':True]['text':' # of decimal digits is 6 if precision not specified ','line_number':642,'multiline':True]['text':' set whether to show the sign ','line_number':646,'multiline':True]['text':' format the number ','line_number':651,'multiline':True]['text':' restore the number format ','line_number':658,'multiline':True]['text':' TODO: Is this needed? ','line_number':659,'multiline':True]['text':' Since we're the only one using the scientific
       format, we don't need to save the old exponent value. ','line_number':663,'multiline':True]['text':'unum_setSymbol(format,
        UNUM_EXPONENTIAL_SYMBOL,
        srcExpBuf,
        srcLen,
        &status);','line_number':665,'multiline':True]['text':' Reset back to original value regardless of what the error was ','line_number':672,'multiline':True]['text':' mask off any necessary bits ','line_number':699,'multiline':True]['text':'  if(! info->fIsLongDouble)
    num &= DBL_MAX;','line_number':700,'multiline':True]['text':' get the formatter ','line_number':703,'multiline':True]['text':' handle error ','line_number':706,'multiline':True]['text':' save the formatter's state ','line_number':710,'multiline':True]['text':' set the appropriate flags and number of decimal digits on the formatter ','line_number':714,'multiline':True]['text':' set the # of decimal digits ','line_number':716,'multiline':True]['text':' '#' means always show decimal point ','line_number':720,'multiline':True]['text':' copy of printf behavior on Solaris - '#' shows 6 digits ','line_number':721,'multiline':True]['text':' # of decimal digits is 6 if precision not specified ','line_number':725,'multiline':True]['text':' set whether to show the sign ','line_number':729,'multiline':True]['text':' format the number ','line_number':734,'multiline':True]['text':' restore the number format ','line_number':741,'multiline':True]['text':' TODO: Is this needed? ','line_number':742,'multiline':True]['text':' Reset back to original value regardless of what the error was ','line_number':747,'multiline':True]['text':' allocate enough space for the buffer ','line_number':766,'multiline':True]['text':' width = minimum # of characters to write ','line_number':772,'multiline':True]['text':' precision = maximum # of characters to write ','line_number':773,'multiline':True]['text':' determine if the string should be padded ','line_number':778,'multiline':True]['text':' width = minimum # of characters to write ','line_number':795,'multiline':True]['text':' precision = maximum # of characters to write ','line_number':796,'multiline':True]['text':' precision is ignored when handling a uchar ','line_number':797,'multiline':True]['text':' determine if the string should be padded ','line_number':799,'multiline':True]['text':' determine whether to use 'd', 'e' or 'f' notation ','line_number':820,'multiline':True]['text':' use 'f' notation ','line_number':823,'multiline':True]['text':' call the double handler ','line_number':826,'multiline':True]['text':' use 'e' or 'E' notation ','line_number':832,'multiline':True]['text':' call the scientific handler ','line_number':837,'multiline':True]['text':' Check for null pointer ','line_number':842,'multiline':True]['text':' use 'f' notation ','line_number':849,'multiline':True]['text':' call the double handler ','line_number':856,'multiline':True]['text':' in the special case of count, the u_printf_spec_info's width ','line_number':876,'multiline':True]['text':' will contain the # of chars written thus far ','line_number':877,'multiline':True]['text':' mask off any necessary bits ','line_number':902,'multiline':True]['text':'  if(! info->fIsLongDouble)
    num &= DBL_MAX;','line_number':903,'multiline':True]['text':' get the formatter ','line_number':906,'multiline':True]['text':' handle error ','line_number':909,'multiline':True]['text':' save the formatter's state ','line_number':913,'multiline':True]['text':' set the appropriate flags and number of decimal digits on the formatter ','line_number':917,'multiline':True]['text':' set the # of decimal digits ','line_number':919,'multiline':True]['text':' '#' means always show decimal point ','line_number':923,'multiline':True]['text':' copy of printf behavior on Solaris - '#' shows 6 digits ','line_number':924,'multiline':True]['text':' # of decimal digits is 6 if precision not specified ','line_number':928,'multiline':True]['text':' set whether to show the sign ','line_number':932,'multiline':True]['text':' format the number ','line_number':937,'multiline':True]['text':' restore the number format ','line_number':944,'multiline':True]['text':' TODO: Is this needed? ','line_number':945,'multiline':True]['text':' Reset back to original value regardless of what the error was ','line_number':950,'multiline':True]['text':' Use US-ASCII characters only for formatting. Most codepages have
 characters 20-7F from Unicode. Using any other codepage specific
 characters will make it very difficult to format the string on
 non-Unicode machines ','line_number':958,'multiline':True]['text':' 0x20 ','line_number':963,'multiline':True]['text':' 0x30 ','line_number':969,'multiline':True]['text':' 0x40 ','line_number':975,'multiline':True]['text':'deprecated','line_number':979,'multiline':True]['text':' 0x50 ','line_number':985,'multiline':True]['text':'deprecated','line_number':988,'multiline':True]['text':' 0x60 ','line_number':995,'multiline':True]['text':' 0x70 ','line_number':1001,'multiline':True]['text':' flag characters for uprintf ','line_number':1008,'multiline':True]['text':' special characters for uprintf ','line_number':1023,'multiline':True]['text':' unicode digits ','line_number':1029,'multiline':True]['text':' u_printf modifiers ','line_number':1052,'multiline':True]['text':' Returns an array of the parsed argument type given in the format string. ','line_number':1060,'multiline':True]['text':' get maximum number of arguments ','line_number':1071,'multiline':True]['text':' find % ','line_number':1073,'multiline':True]['text':' handle the pos number ','line_number':1084,'multiline':True]['text':' handle positional parameters ','line_number':1087,'multiline':True]['text':' if there is no '$', don't read anything ','line_number':1097,'multiline':True]['text':' create the parsed argument list ','line_number':1110,'multiline':True]['text':' If malloc failed, return NULL ','line_number':1115,'multiline':True]['text':' reset alias back to the beginning ','line_number':1133,'multiline':True]['text':' find % ','line_number':1137,'multiline':True]['text':' handle positional parameters ','line_number':1148,'multiline':True]['text':' offset position by 1 ','line_number':1157,'multiline':True]['text':' skip over everything except for the type ','line_number':1160,'multiline':True]['text':' store the argument type in the correct position of the parsed argument list ','line_number':1174,'multiline':True]['text':' store argument in arglist ','line_number':1183,'multiline':True]['text':' else args is ignored ','line_number':1208,'multiline':True]['text':' We parse the argument list in Unicode ','line_number':1220,'multiline':True]['text':' parsed argument list ','line_number':1241,'multiline':True]['text':' initialized it to avoid compiler warnings ','line_number':1242,'multiline':True]['text':' get the parsed list of argument types ','line_number':1245,'multiline':True]['text':' Return error if parsing failed. ','line_number':1248,'multiline':True]['text':' iterate through the pattern ','line_number':1254,'multiline':True]['text':' find the next '%' ','line_number':1257,'multiline':True]['text':' write any characters before the '%' ','line_number':1263,'multiline':True]['text':' break if at end of string ','line_number':1268,'multiline':True]['text':' initialize spec to default values ','line_number':1273,'multiline':True]['text':' skip over the initial '%' ','line_number':1283,'multiline':True]['text':' Check for positional argument ','line_number':1286,'multiline':True]['text':' Save the current position ','line_number':1289,'multiline':True]['text':' handle positional parameters ','line_number':1292,'multiline':True]['text':' if there is no '$', don't read anything ','line_number':1302,'multiline':True]['text':' munge the '$' ','line_number':1307,'multiline':True]['text':' Get any format flags ','line_number':1312,'multiline':True]['text':' left justify ','line_number':1316,'multiline':True]['text':' always show sign ','line_number':1321,'multiline':True]['text':' use space if no sign present ','line_number':1326,'multiline':True]['text':' use alternate form ','line_number':1332,'multiline':True]['text':' pad with leading zeroes ','line_number':1337,'multiline':True]['text':' pad character specified ','line_number':1343,'multiline':True]['text':' TODO test that all four are numbers ','line_number':1346,'multiline':True]['text':' first four characters are hex values for pad char ','line_number':1347,'multiline':True]['text':' final character is ignored ','line_number':1353,'multiline':True]['text':' Get the width ','line_number':1360,'multiline':True]['text':' width is specified out of line ','line_number':1362,'multiline':True]['text':' Skip the '*' ','line_number':1367,'multiline':True]['text':' Save the current position ','line_number':1370,'multiline':True]['text':' handle positional parameters ','line_number':1373,'multiline':True]['text':' if there is no '$', don't read anything ','line_number':1383,'multiline':True]['text':' munge the '$' ','line_number':1388,'multiline':True]['text':' read the width, if present ','line_number':1392,'multiline':True]['text':' Get the precision ','line_number':1402,'multiline':True]['text':' eat up the '.' ','line_number':1406,'multiline':True]['text':' precision is specified out of line ','line_number':1409,'multiline':True]['text':' Skip the '*' ','line_number':1414,'multiline':True]['text':' save the current position ','line_number':1417,'multiline':True]['text':' handle positional parameters ','line_number':1420,'multiline':True]['text':' if there is no '$', don't read anything ','line_number':1429,'multiline':True]['text':' munge the '$' ','line_number':1435,'multiline':True]['text':' read the precision ','line_number':1440,'multiline':True]['text':' Get any modifiers ','line_number':1451,'multiline':True]['text':' short ','line_number':1455,'multiline':True]['text':' long or long long ','line_number':1460,'multiline':True]['text':' skip over the next 'l' ','line_number':1464,'multiline':True]['text':' long double ','line_number':1471,'multiline':True]['text':' finally, get the specifier letter ','line_number':1478,'multiline':True]['text':' fill in the precision and width, if specified out of line ','line_number':1482,'multiline':True]['text':' width specified out of line ','line_number':1484,'multiline':True]['text':' read the width from the argument list ','line_number':1487,'multiline':True]['text':' else handle positional parameter ','line_number':1490,'multiline':True]['text':' if it's negative, take the absolute value and set left alignment ','line_number':1492,'multiline':True]['text':' Make positive ','line_number':1494,'multiline':True]['text':' precision specified out of line ','line_number':1499,'multiline':True]['text':' read the precision from the argument list ','line_number':1502,'multiline':True]['text':' else handle positional parameter ','line_number':1505,'multiline':True]['text':' if it's negative, set it to zero ','line_number':1507,'multiline':True]['text':' query the info function for argument information ','line_number':1514,'multiline':True]['text':' goto the correct argument on arg_list if position is specified ','line_number':1517,'multiline':True]['text':' offset position by 1 ','line_number':1519,'multiline':True]['text':' set the spec's width to the # of chars written ','line_number':1523,'multiline':True]['text':' fall through to set the pointer ','line_number':1525,'multiline':True]['text':' else args is ignored ','line_number':1544,'multiline':True]['text':' no positional argument specified ','line_number':1548,'multiline':True]['text':' set the spec's width to the # of chars written ','line_number':1551,'multiline':True]['text':' fall through to set the pointer ','line_number':1553,'multiline':True]['text':' else args is ignored ','line_number':1577,'multiline':True]['text':' call the handler function ','line_number':1583,'multiline':True]['text':' just echo unknown tags ','line_number':1589,'multiline':True]['text':' just echo unknown tags ','line_number':1594,'multiline':True]['text':' delete parsed argument list ','line_number':1598,'multiline':True]['text':' return # of characters in this format that have been parsed. ','line_number':1602,'multiline':True]['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1606,'multiline':True]