['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':'
 * JS Atomics pseudo-module.
 *
 * See chapter 24.4 "The Atomics Object" and chapter 27 "Memory Model" in
 * ECMAScript 2021 for the full specification.
 ','line_number':7,'multiline':True]['text':' js::GetErrorMessage, JSMSG_*','line_number':29,'multiline':False]['text':' Use JSMSG_BAD_INDEX here, it is what ToIndex uses for some cases that it','line_number':55,'multiline':False]['text':' reports directly.','line_number':56,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':61,'multiline':False]['text':' Plus: https://github.com/tc39/ecma262/pull/1908','line_number':62,'multiline':False]['text':' 24.4.1.1 ValidateIntegerTypedArray ( typedArray [ , waitable ] )','line_number':63,'multiline':False]['text':' Step 1 (implicit).','line_number':67,'multiline':False]['text':' Step 2.','line_number':69,'multiline':False]['text':' Steps 3-6.','line_number':80,'multiline':False]['text':' Steps 7-9 (modified to return the TypedArray).','line_number':105,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':110,'multiline':False]['text':' 24.4.1.2 ValidateAtomicAccess ( typedArray, requestIndex )','line_number':111,'multiline':False]['text':' Step 1 (implicit).','line_number':115,'multiline':False]['text':' Step 2.','line_number':120,'multiline':False]['text':' Steps 3-5.','line_number':126,'multiline':False]['text':' Step 6.','line_number':131,'multiline':False]['text':' Always double typed so that the JITs can assume the types are stable.','line_number':168,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':239,'multiline':False]['text':' 24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op ), steps 1-2.','line_number':240,'multiline':False]['text':' 24.4.1.12 AtomicLoad ( typedArray, index ), steps 1-2.','line_number':241,'multiline':False]['text':' 24.4.4 Atomics.compareExchange ( typedArray, index, ... ), steps 1-2.','line_number':242,'multiline':False]['text':' 24.4.9 Atomics.store ( typedArray, index, value ), steps 1-2.','line_number':243,'multiline':False]['text':' Step 1.','line_number':246,'multiline':False]['text':' Step 2.','line_number':252,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':298,'multiline':False]['text':' 24.4.4 Atomics.compareExchange ( typedArray, index, expectedValue,','line_number':299,'multiline':False]['text':'                                  replacementValue )','line_number':300,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':336,'multiline':False]['text':' 24.4.7 Atomics.load ( typedArray, index )','line_number':337,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':361,'multiline':False]['text':' 24.4.9 Atomics.store ( typedArray, index, value )','line_number':362,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':390,'multiline':False]['text':' 24.4.1.11 AtomicReadModifyWrite ( typedArray, index, value, op )','line_number':391,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':421,'multiline':False]['text':' 24.4.5 Atomics.exchange ( typedArray, index, value )','line_number':422,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':431,'multiline':False]['text':' 24.4.2 Atomics.add ( typedArray, index, value )','line_number':432,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':441,'multiline':False]['text':' 24.4.10 Atomics.sub ( typedArray, index, value )','line_number':442,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':451,'multiline':False]['text':' 24.4.3 Atomics.and ( typedArray, index, value )','line_number':452,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':461,'multiline':False]['text':' 24.4.8 Atomics.or ( typedArray, index, value )','line_number':462,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':471,'multiline':False]['text':' 24.4.13 Atomics.xor ( typedArray, index, value )','line_number':472,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':481,'multiline':False]['text':' 24.4.6 Atomics.isLockFree ( size )','line_number':482,'multiline':False]['text':' Step 1.','line_number':487,'multiline':False]['text':' Step 7 (non-integer case only).','line_number':497,'multiline':False]['text':' Steps 2-7.','line_number':504,'multiline':False]['text':' Represents one waiting worker.','line_number':511,'multiline':False]['text':'','line_number':512,'multiline':False]['text':' The type is declared opaque in SharedArrayObject.h.  Instances of','line_number':513,'multiline':False]['text':' js::FutexWaiter are stack-allocated and linked onto a list across a','line_number':514,'multiline':False]['text':' call to FutexThread::wait().','line_number':515,'multiline':False]['text':'','line_number':516,'multiline':False]['text':' The 'waiters' field of the SharedArrayRawBuffer points to the highest','line_number':517,'multiline':False]['text':' priority waiter in the list, and lower priority nodes are linked through','line_number':518,'multiline':False]['text':' the 'lower_pri' field.  The 'back' field goes the other direction.','line_number':519,'multiline':False]['text':' The list is circular, so the 'lower_pri' field of the lowest priority','line_number':520,'multiline':False]['text':' node points to the first node in the list.  The list has no dedicated','line_number':521,'multiline':False]['text':' header node.','line_number':522,'multiline':False]['text':' int32 element index within the SharedArrayBuffer','line_number':529,'multiline':False]['text':' The waiting thread','line_number':530,'multiline':False]['text':' Lower priority nodes in circular doubly-linked','line_number':531,'multiline':False]['text':' list of waiters','line_number':532,'multiline':False]['text':' Other direction','line_number':533,'multiline':False]['text':' We have to wrap this in a Maybe because of the way loading','line_number':537,'multiline':False]['text':' mozilla::Atomic pointers works.','line_number':538,'multiline':False]['text':' namespace js','line_number':552,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':554,'multiline':False]['text':' 24.4.11 Atomics.wait ( typedArray, index, value, timeout ), steps 8-9, 14-25.','line_number':555,'multiline':False]['text':' Validation and other guards should ensure that this does not happen.','line_number':560,'multiline':False]['text':' Steps 8-9.','line_number':563,'multiline':False]['text':' Steps 15 (reordered), 17.a and 23 (through destructor).','line_number':573,'multiline':False]['text':' This lock also protects the "waiters" field on SharedArrayRawBuffer,','line_number':574,'multiline':False]['text':' and it provides the necessary memory fence.','line_number':575,'multiline':False]['text':' Steps 16-17.','line_number':578,'multiline':False]['text':' Steps 14, 18-22.','line_number':583,'multiline':False]['text':' Steps 24-25.','line_number':607,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':623,'multiline':False]['text':' 24.4.11 Atomics.wait ( typedArray, index, value, timeout ), steps 6-25.','line_number':624,'multiline':False]['text':' Step 6.','line_number':632,'multiline':False]['text':' Step 7.','line_number':638,'multiline':False]['text':' Step 10.','line_number':649,'multiline':False]['text':' Step 11.','line_number':653,'multiline':False]['text':' Steps 12-13.','line_number':656,'multiline':False]['text':' The computation will not overflow because range checks have been','line_number':657,'multiline':False]['text':' performed.','line_number':658,'multiline':False]['text':' Steps 8-9, 14-25.','line_number':661,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':680,'multiline':False]['text':' 24.4.11 Atomics.wait ( typedArray, index, value, timeout )','line_number':681,'multiline':False]['text':' Step 1.','line_number':690,'multiline':False]['text':' https://github.com/tc39/ecma262/pull/1908','line_number':698,'multiline':False]['text':' Step 2.','line_number':703,'multiline':False]['text':' Step 5.','line_number':710,'multiline':False]['text':' Steps 6-25.','line_number':716,'multiline':False]['text':' Step 4.','line_number':722,'multiline':False]['text':' Steps 6-25.','line_number':728,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':733,'multiline':False]['text':' 24.4.12 Atomics.notify ( typedArray, index, count ), steps 10-16.','line_number':734,'multiline':False]['text':' Validation should ensure this does not happen.','line_number':737,'multiline':False]['text':' Steps 12 (reordered), 15 (through destructor).','line_number':740,'multiline':False]['text':' Step 11 (reordered).','line_number':743,'multiline':False]['text':' Steps 10, 13-14.','line_number':746,'multiline':False]['text':' Overflow will be a problem only in two cases:','line_number':757,'multiline':False]['text':' (1) 128-bit systems with substantially more than 2^64 bytes of','line_number':758,'multiline':False]['text':'     memory per process, and a very lightweight','line_number':759,'multiline':False]['text':'     Atomics.waitAsync().  Obviously a future problem.','line_number':760,'multiline':False]['text':' (2) Bugs.','line_number':761,'multiline':False]['text':' Step 16.','line_number':770,'multiline':False]['text':' ES2021 draft rev bd868f20b8c574ad6689fba014b62a1dba819e56','line_number':774,'multiline':False]['text':' 24.4.12 Atomics.notify ( typedArray, index, count )','line_number':775,'multiline':False]['text':' Step 1.','line_number':783,'multiline':False]['text':' Step 2.','line_number':791,'multiline':False]['text':' Steps 3-4.','line_number':797,'multiline':False]['text':' https://github.com/tc39/ecma262/pull/1908','line_number':812,'multiline':False]['text':' Step 5.','line_number':818,'multiline':False]['text':' Step 6.','line_number':822,'multiline':False]['text':' Steps 7-9.','line_number':825,'multiline':False]['text':' The computation will not overflow because range checks have been','line_number':826,'multiline':False]['text':' performed.','line_number':827,'multiline':False]['text':' Steps 10-16.','line_number':831,'multiline':False]['text':' static ','line_number':838,'multiline':True]['text':' static ','line_number':845,'multiline':True]['text':' static ','line_number':854,'multiline':True]['text':' Load the atomic pointer.','line_number':856,'multiline':False]['text':' static ','line_number':862,'multiline':True]['text':' static ','line_number':865,'multiline':True]['text':' Load the atomic pointer.','line_number':867,'multiline':False]['text':' When a worker is awoken for an interrupt it goes into state','line_number':889,'multiline':False]['text':' WaitingNotifiedForInterrupt for a short time before it actually','line_number':890,'multiline':False]['text':' wakes up and goes into WaitingInterrupted.  In those states the','line_number':891,'multiline':False]['text':' worker is still waiting, and if an explicit notify arrives the','line_number':892,'multiline':False]['text':' worker transitions to Woken.  See further comments in','line_number':893,'multiline':False]['text':' FutexThread::wait().','line_number':894,'multiline':False]['text':' Disallow waiting when a runtime is processing an interrupt.','line_number':906,'multiline':False]['text':' See explanation below.','line_number':907,'multiline':False]['text':' Go back to Idle after returning.','line_number':916,'multiline':False]['text':' 4000s is about the longest timeout slice that is guaranteed to','line_number':925,'multiline':False]['text':' work cross-platform.','line_number':926,'multiline':False]['text':' If we are doing a timed wait, calculate the end time for this wait','line_number':930,'multiline':False]['text':' slice.','line_number':931,'multiline':False]['text':' Timeout or spurious wakeup.','line_number':967,'multiline':False]['text':' The interrupt handler may reenter the engine.  In that case','line_number':980,'multiline':False]['text':' there are two complications:','line_number':981,'multiline':False]['text':'','line_number':982,'multiline':False]['text':' - The waiting thread is not actually waiting on the','line_number':983,'multiline':False]['text':'   condition variable so we have to record that it','line_number':984,'multiline':False]['text':'   should be woken when the interrupt handler returns.','line_number':985,'multiline':False]['text':'   To that end, we flag the thread as interrupted around','line_number':986,'multiline':False]['text':'   the interrupt and check state_ when the interrupt','line_number':987,'multiline':False]['text':'   handler returns.  A notify() call that reaches the','line_number':988,'multiline':False]['text':'   runtime during the interrupt sets state_ to Woken.','line_number':989,'multiline':False]['text':'','line_number':990,'multiline':False]['text':' - It is in principle possible for wait() to be','line_number':991,'multiline':False]['text':'   reentered on the same thread/runtime and waiting on the','line_number':992,'multiline':False]['text':'   same location and to yet again be interrupted and enter','line_number':993,'multiline':False]['text':'   the interrupt handler.  In this case, it is important','line_number':994,'multiline':False]['text':'   that when another agent notifies waiters, all waiters using','line_number':995,'multiline':False]['text':'   the same runtime on the same location are woken in LIFO','line_number':996,'multiline':False]['text':'   order; FIFO may be the required order, but FIFO would','line_number':997,'multiline':False]['text':'   fail to wake up the innermost call.  Interrupts are','line_number':998,'multiline':False]['text':'   outside any spec anyway.  Also, several such suspended','line_number':999,'multiline':False]['text':'   waiters may be woken at a time.','line_number':1000,'multiline':False]['text':'','line_number':1001,'multiline':False]['text':'   For the time being we disallow waiting from within code','line_number':1002,'multiline':False]['text':'   that runs from within an interrupt handler; this may','line_number':1003,'multiline':False]['text':'   occasionally (very rarely) be surprising but is','line_number':1004,'multiline':False]['text':'   expedient.  Other solutions exist, see bug #1131943.  The','line_number':1005,'multiline':False]['text':'   code that performs the check is above, at the head of','line_number':1006,'multiline':False]['text':'   this function.','line_number':1007,'multiline':False]['text':' Legacy name','line_number':1065,'multiline':False]