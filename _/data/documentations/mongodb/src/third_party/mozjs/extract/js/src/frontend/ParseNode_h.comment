['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' mozilla::Span','line_number':11,'multiline':False]['text':' js::Bit','line_number':17,'multiline':False]['text':' FunctionSyntaxKind','line_number':19,'multiline':False]['text':' PrivateNameKind','line_number':20,'multiline':False]['text':' TaggedParserAtomIndex','line_number':21,'multiline':False]['text':' BigIntStencil','line_number':22,'multiline':False]['text':' [SMDOC] ParseNode tree lifetime information','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' - All the `ParseNode` instances MUST BE explicitly allocated in the context's','line_number':32,'multiline':False]['text':'   `LifoAlloc`. This is typically implemented by the `FullParseHandler` or it','line_number':33,'multiline':False]['text':'   can be reimplemented with a custom `new_`.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' - The tree is bulk-deallocated when the parser is deallocated. Consequently,','line_number':36,'multiline':False]['text':'   references to a subtree MUST NOT exist once the parser has been','line_number':37,'multiline':False]['text':'   deallocated.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' - This bulk-deallocation DOES NOT run destructors.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' - Instances of `LexicalScope::ParserData` and `ClassBodyScope::ParserData`','line_number':42,'multiline':False]['text':'   MUST BE allocated as instances of `ParseNode`, in the same `LifoAlloc`.','line_number':43,'multiline':False]['text':'   They are bulk-deallocated alongside the rest of the tree.','line_number':44,'multiline':False]['text':' Delete operations.  These must be sequential. ','line_number':130,'multiline':True]['text':' Unary operators. ','line_number':180,'multiline':True]['text':'                                                             \
   * Binary operators.                                           \
   * This list must be kept in the same order in several places: \
   *   - The binary operators in ParseNode.h                     \
   *   - the binary operators in TokenKind.h                     \
   *   - the precedence list in Parser.cpp                       \
   *   - the JSOp code list in BytecodeEmitter.cpp               \
   ','line_number':188,'multiline':True]['text':' Assignment operators (= += -= etc.). ','line_number':223,'multiline':True]['text':' AssignmentNode::test assumes all these are consecutive. ','line_number':224,'multiline':True]['text':'
 * Parsing builds a tree of nodes that directs code generation.  This tree is
 * not a concrete syntax tree in all respects (for example, || and && are left
 * associative, but (A && B && C) translates into the right-associated tree
 * <A && <B && C>> so that code generation can emit a left-associative branch
 * around <B && C> when A is false).  Nodes are labeled by kind.
 *
 * The long comment after this enum block describes the kinds in detail.
 ','line_number':242,'multiline':True]['text':' These constants start at 1001, the better to catch','line_number':252,'multiline':False]['text':'
 * <Definitions>
 * Function (FunctionNode)
 *   funbox: ptr to js::FunctionBox
 *   body: ParamsBody or null for lazily-parsed function, ordinarily;
 *         ParseNodeKind::LexicalScope for implicit function in genexpr
 *   syntaxKind: the syntax of the function
 * ParamsBody (ListNode)
 *   head: list of formal parameters with
 *           * Name node with non-empty name for SingleNameBinding without
 *             Initializer
 *           * AssignExpr node for SingleNameBinding with Initializer
 *           * Name node with empty name for destructuring
 *               expr: Array or Object for BindingPattern without
 *                     Initializer, Assign for BindingPattern with
 *                     Initializer
 *         followed by either:
 *           * StatementList node for function body statements
 *           * ReturnStmt for expression closure
 *   count: number of formal parameters + 1
 * Spread (UnaryNode)
 *   kid: expression being spread
 * ClassDecl (ClassNode)
 *   kid1: ClassNames for class name. can be null for anonymous class.
 *   kid2: expression after `extends`. null if no expression
 *   kid3: either of
 *           * ClassMemberList, if anonymous class
 *           * LexicalScopeNode which contains ClassMemberList as scopeBody,
 *             if named class
 * ClassNames (ClassNames)
 *   left: Name node for outer binding, or null if the class is an expression
 *         that doesn't create an outer binding
 *   right: Name node for inner binding
 * ClassMemberList (ListNode)
 *   head: list of N ClassMethod, ClassField or StaticClassBlock nodes
 *   count: N >= 0
 * DefaultConstructor (ClassMethod)
 *   name: propertyName
 *   method: methodDefinition
 * ClassMethod (ClassMethod)
 *   name: propertyName
 *   method: methodDefinition
 *   initializerIfPrivate: initializer to stamp private method onto instance
 * Module (ModuleNode)
 *   body: statement list of the module
 *
 * <Statements>
 * StatementList (ListNode)
 *   head: list of N statements
 *   count: N >= 0
 * IfStmt (TernaryNode)
 *   kid1: cond
 *   kid2: then
 *   kid3: else or null
 * SwitchStmt (SwitchStatement)
 *   left: discriminant
 *   right: LexicalScope node that contains the list of Case nodes, with at
 *          most one default node.
 *   hasDefault: true if there's a default case
 * Case (CaseClause)
 *   left: case-expression if CaseClause, or null if DefaultClause
 *   right: StatementList node for this case's statements
 * WhileStmt (BinaryNode)
 *   left: cond
 *   right: body
 * DoWhileStmt (BinaryNode)
 *   left: body
 *   right: cond
 * ForStmt (ForNode)
 *   left: one of
 *           * ForIn: for (x in y) ...
 *           * ForOf: for (x of x) ...
 *           * ForHead: for (;;) ...
 *   right: body
 * ForIn (TernaryNode)
 *   kid1: declaration or expression to left of 'in'
 *   kid2: null
 *   kid3: object expr to right of 'in'
 * ForOf (TernaryNode)
 *   kid1: declaration or expression to left of 'of'
 *   kid2: null
 *   kid3: expr to right of 'of'
 * ForHead (TernaryNode)
 *   kid1:  init expr before first ';' or nullptr
 *   kid2:  cond expr before second ';' or nullptr
 *   kid3:  update expr after second ';' or nullptr
 * ThrowStmt (UnaryNode)
 *   kid: thrown exception
 * TryStmt (TernaryNode)
 *   kid1: try block
 *   kid2: null or LexicalScope for catch-block with scopeBody pointing to a
 *         Catch node
 *   kid3: null or finally block
 * Catch (BinaryNode)
 *   left: Name, Array, or Object catch var node
 *         (Array or Object if destructuring),
 *         or null if optional catch binding
 *   right: catch block statements
 * BreakStmt (BreakStatement)
 *   label: label or null
 * ContinueStmt (ContinueStatement)
 *   label: label or null
 * WithStmt (BinaryNode)
 *   left: head expr
 *   right: body
 * VarStmt, LetDecl, ConstDecl (ListNode)
 *   head: list of N Name or AssignExpr nodes
 *         each name node has either
 *           atom: variable name
 *           expr: initializer or null
 *         or
 *           atom: variable name
 *         each assignment node has
 *           left: pattern
 *           right: initializer
 *   count: N > 0
 * ReturnStmt (UnaryNode)
 *   kid: returned expression, or null if none
 * ExpressionStmt (UnaryNode)
 *   kid: expr
 * EmptyStmt (NullaryNode)
 *   (no fields)
 * LabelStmt (LabeledStatement)
 *   atom: label
 *   expr: labeled statement
 * ImportDecl (BinaryNode)
 *   left: ImportSpecList import specifiers
 *   right: String module specifier
 * ImportSpecList (ListNode)
 *   head: list of N ImportSpec nodes
 *   count: N >= 0 (N = 0 for `import {} from ...`)
 * ImportSpec (BinaryNode)
 *   left: import name
 *   right: local binding name
 * ImportNamespaceSpec (UnaryNode)
 *   kid: local binding name
 * ExportStmt (UnaryNode)
 *   kid: declaration expression
 * ExportFromStmt (BinaryNode)
 *   left: ExportSpecList export specifiers
 *   right: String module specifier
 * ExportSpecList (ListNode)
 *   head: list of N ExportSpec nodes
 *   count: N >= 0 (N = 0 for `export {}`)
 * ExportSpec (BinaryNode)
 *   left: local binding name
 *   right: export name
 * ExportNamespaceSpec (UnaryNode)
 *   kid: export name
 * ExportDefaultStmt (BinaryNode)
 *   left: export default declaration or expression
 *   right: Name node for assignment
 *
 * <Expressions>
 * The `Expr` suffix is used for nodes that can appear anywhere an expression
 * could appear.  It is not used on a few weird kinds like Arguments and
 * CallSiteObj that are always the child node of an expression node, but which
 * can't stand alone.
 *
 * All left-associated binary trees of the same type are optimized into lists
 * to avoid recursion when processing expression chains.
 *
 * CommaExpr (ListNode)
 *   head: list of N comma-separated exprs
 *   count: N >= 2
 * AssignExpr (BinaryNode)
 *   left: target of assignment
 *   right: value to assign
 * AddAssignExpr, SubAssignExpr, CoalesceAssignExpr, OrAssignExpr,
 * AndAssignExpr, BitOrAssignExpr, BitXorAssignExpr, BitAndAssignExpr,
 * LshAssignExpr, RshAssignExpr, UrshAssignExpr, MulAssignExpr, DivAssignExpr,
 * ModAssignExpr, PowAssignExpr (AssignmentNode)
 *   left: target of assignment
 *   right: value to assign
 * ConditionalExpr (ConditionalExpression)
 *   (cond ? thenExpr : elseExpr)
 *   kid1: cond
 *   kid2: thenExpr
 *   kid3: elseExpr
 * CoalesceExpr, OrExpr, AndExpr, BitOrExpr, BitXorExpr,
 * BitAndExpr, StrictEqExpr, EqExpr, StrictNeExpr, NeExpr, LtExpr, LeExpr,
 * GtExpr, GeExpr, InstanceOfExpr, InExpr, LshExpr, RshExpr, UrshExpr, AddExpr,
 * SubExpr, MulExpr, DivExpr, ModExpr, PowExpr (ListNode)
 *   head: list of N subexpressions
 *         All of these operators are left-associative except Pow which is
 *         right-associative, but still forms a list (see comments in
 *         ParseNode::appendOrCreateList).
 *   count: N >= 2
 * PosExpr, NegExpr, VoidExpr, NotExpr, BitNotExpr, TypeOfNameExpr,
 * TypeOfExpr (UnaryNode)
 *   kid: unary expr
 * PreIncrementExpr, PostIncrementExpr, PreDecrementExpr,
 * PostDecrementExpr (UnaryNode)
 *   kid: member expr
 * NewExpr (BinaryNode)
 *   left: ctor expression on the left of the '('
 *   right: Arguments
 * DeleteNameExpr, DeletePropExpr, DeleteElemExpr, DeleteExpr (UnaryNode)
 *   kid: expression that's evaluated, then the overall delete evaluates to
 *        true; can't be a kind for a more-specific ParseNodeKind::Delete*
 *        unless constant folding (or a similar parse tree manipulation) has
 *        occurred
 *          * DeleteNameExpr: Name expr
 *          * DeletePropExpr: Dot expr
 *          * DeleteElemExpr: Elem expr
 *          * DeleteOptionalChainExpr: Member expr
 *          * DeleteExpr: Member expr
 * DeleteOptionalChainExpr (UnaryNode)
 *   kid: expression that's evaluated, then the overall delete evaluates to
 *        true; If constant folding occurs, Elem expr may become Dot expr.
 *        OptionalElemExpr does not get folded into OptionalDot.
 * OptionalChain (UnaryNode)
 *   kid: expression that is evaluated as a chain. An Optional chain contains
 *        one or more optional nodes. It's first node (kid) is always an
 *        optional node, for example: an OptionalElemExpr, OptionalDotExpr, or
 *        OptionalCall.  An OptionalChain will shortcircuit and return
 *        Undefined without evaluating the rest of the expression if any of the
 *        optional nodes it contains are nullish. An optionalChain also can
 *        contain nodes such as DotExpr, ElemExpr, NameExpr CallExpr, etc.
 *        These are evaluated normally.
 *          * OptionalDotExpr: Dot expr with jump
 *          * OptionalElemExpr: Elem expr with jump
 *          * OptionalCallExpr: Call expr with jump
 *          * DotExpr: Dot expr without jump
 *          * ElemExpr: Elem expr without jump
 *          * CallExpr: Call expr without jump
 * PropertyNameExpr (NameNode)
 *   atom: property name being accessed
 *   privateNameKind: kind of the name if private
 * DotExpr (PropertyAccess)
 *   left: MEMBER expr to left of '.'
 *   right: PropertyName to right of '.'
 * OptionalDotExpr (OptionalPropertyAccess)
 *   left: MEMBER expr to left of '.', short circuits back to OptionalChain
 *        if nullish.
 *   right: PropertyName to right of '.'
 * ElemExpr (PropertyByValue)
 *   left: MEMBER expr to left of '['
 *   right: expr between '[' and ']'
 * OptionalElemExpr (OptionalPropertyByValue)
 *   left: MEMBER expr to left of '[', short circuits back to OptionalChain
 *         if nullish.
 *   right: expr between '[' and ']'
 * CallExpr (BinaryNode)
 *   left: callee expression on the left of the '('
 *   right: Arguments
 * OptionalCallExpr (BinaryNode)
 *   left: callee expression on the left of the '(', short circuits back to
 *         OptionalChain if nullish.
 *   right: Arguments
 * Arguments (ListNode)
 *   head: list of arg1, arg2, ... argN
 *   count: N >= 0
 * ArrayExpr (ListNode)
 *   head: list of N array element expressions
 *         holes ([,,]) are represented by Elision nodes,
 *         spread elements ([...X]) are represented by Spread nodes
 *   count: N >= 0
 * ObjectExpr (ListNode)
 *   head: list of N nodes, each item is one of:
 *           * MutateProto
 *           * PropertyDefinition
 *           * Shorthand
 *           * Spread
 *   count: N >= 0
 * PropertyDefinition (PropertyDefinition)
 *   key-value pair in object initializer or destructuring lhs
 *   left: property id
 *   right: value
 * Shorthand (BinaryNode)
 *   Same fields as PropertyDefinition. This is used for object literal
 *   properties using shorthand ({x}).
 * ComputedName (UnaryNode)
 *   ES6 ComputedPropertyName.
 *   kid: the AssignmentExpression inside the square brackets
 * Name (NameNode)
 *   atom: name, or object atom
 * StringExpr (NameNode)
 *   atom: string
 * TemplateStringListExpr (ListNode)
 *   head: list of alternating expr and template strings
 *           TemplateString [, expression, TemplateString]+
 *         there's at least one expression.  If the template literal contains
 *         no ${}-delimited expression, it's parsed as a single TemplateString
 * TemplateStringExpr (NameNode)
 *   atom: template string atom
 * TaggedTemplateExpr (BinaryNode)
 *   left: tag expression
 *   right: Arguments, with the first being the call site object, then
 *          arg1, arg2, ... argN
 * CallSiteObj (CallSiteNode)
 *   head:  an Array of raw TemplateString, then corresponding cooked
 *          TemplateString nodes
 *            Array [, cooked TemplateString]+
 *          where the Array is
 *            [raw TemplateString]+
 * RegExpExpr (RegExpLiteral)
 *   regexp: RegExp model object
 * NumberExpr (NumericLiteral)
 *   value: double value of numeric literal
 * BigIntExpr (BigIntLiteral)
 *   stencil: script compilation struct that has |bigIntData| vector
 *   index: index into the script compilation's |bigIntData| vector
 * TrueExpr, FalseExpr (BooleanLiteral)
 * NullExpr (NullLiteral)
 * RawUndefinedExpr (RawUndefinedLiteral)
 *
 * ThisExpr (UnaryNode)
 *   kid: '.this' Name if function `this`, else nullptr
 * SuperBase (UnaryNode)
 *   kid: '.this' Name
 * SuperCallExpr (BinaryNode)
 *   left: SuperBase
 *   right: Arguments
 * SetThis (BinaryNode)
 *   left: '.this' Name
 *   right: SuperCall
 *
 * LexicalScope (LexicalScopeNode)
 *   scopeBindings: scope bindings
 *   scopeBody: scope body
 * Generator (NullaryNode)
 * InitialYield (UnaryNode)
 *   kid: generator object
 * YieldExpr, YieldStarExpr, AwaitExpr (UnaryNode)
 *   kid: expr or null
 ','line_number':275,'multiline':True]['text':' FIXME: Remove `*Type` (bug 1489008)','line_number':603,'multiline':False]['text':' To help diagnose sporadic crashes in the frontend, a few assertions are','line_number':682,'multiline':False]['text':' enabled in early beta builds. (Most are not; those still use MOZ_ASSERT.)','line_number':683,'multiline':False]['text':' See bug 1547561.','line_number':684,'multiline':False]['text':' ParseNodeKind::PNK_* type ','line_number':692,'multiline':True]['text':' this expr was enclosed in parens ','line_number':694,'multiline':True]['text':' this expr is anonymous function or class that
                             * is a direct RHS of ParseNodeKind::Assign or
                             * ParseNodeKind::PropertyDefinition of property,
                             * that needs SetFunctionName. ','line_number':695,'multiline':True]['text':' Used by ComputedName to indicate if the ComputedName is a','line_number':701,'multiline':False]['text':' a synthetic construct. This allows us to avoid needing to','line_number':702,'multiline':False]['text':' compute ToString on uncommon property values such as BigInt.','line_number':703,'multiline':False]['text':' Instead we parse as though they were computed names.','line_number':704,'multiline':False]['text':'','line_number':705,'multiline':False]['text':' We need this bit to distinguish a synthetic computed name like','line_number':706,'multiline':False]['text':' this however to undo this transformation in Reflect.parse and','line_number':707,'multiline':False]['text':' name guessing.','line_number':708,'multiline':False]['text':' Used to implement test() on a few ParseNodes efficiently.','line_number':749,'multiline':False]['text':' (This enum doesn't fully reflect the ParseNode class hierarchy,','line_number':750,'multiline':False]['text':' so don't use it for anything else.)','line_number':751,'multiline':False]['text':' typeCodeTable[getKindAsIndex()] is the type code of a ParseNode of kind','line_number':762,'multiline':False]['text':' pnk.','line_number':763,'multiline':False]['text':' Boolean attributes. ','line_number':781,'multiline':True]['text':' two 16-bit pairs here, for 64 bits ','line_number':789,'multiline':True]['text':' intrinsic link in parent PN_LIST ','line_number':790,'multiline':True]['text':'
   * If |left| is a list of the given kind/left-associative op, append
   * |right| to it and return |left|.  Otherwise return a [left, right] list.
   ','line_number':793,'multiline':True]['text':' True if pn is a parsenode representing a literal constant. ','line_number':802,'multiline':True]['text':' True iff this is a for-in/of loop variable declaration (var/let/const).','line_number':813,'multiline':False]['text':' Casting operations. ','line_number':823,'multiline':True]['text':' Debugger-friendly stderr printer.','line_number':837,'multiline':False]['text':' The size of this node, in bytes.','line_number':843,'multiline':False]['text':' Remove a ParseNode, **pnp, from a parse tree, putting another ParseNode,','line_number':848,'multiline':False]['text':' *pn, in its place.','line_number':849,'multiline':False]['text':'','line_number':850,'multiline':False]['text':' pnp points to a ParseNode pointer. This must be the only pointer that points','line_number':851,'multiline':False]['text':' to the parse node being replaced. The replacement, *pn, is unchanged except','line_number':852,'multiline':False]['text':' for its pn_next pointer; updating that is necessary if *pn's new parent is a','line_number':853,'multiline':False]['text':' list node.','line_number':854,'multiline':False]['text':' lexical name or label atom ','line_number':883,'multiline':True]['text':'
   * Non-null if this is a statement node which could be a member of a
   * Directive Prologue: an expression statement consisting of a single
   * string literal.
   *
   * This considers only the node and its children, not its context. After
   * parsing, check the node's prologue flag to see if it is indeed part of
   * a directive prologue.
   *
   * Note that a Directive Prologue can contain statements that cannot
   * themselves be directives (string literals that include escape sequences
   * or escaped newlines, say). This member function returns true for such
   * nodes; we use it to determine the extent of the prologue.
   ','line_number':960,'multiline':True]['text':' Methods used by FoldConstants.cpp.','line_number':983,'multiline':False]['text':' Methods used by FoldConstants.cpp.','line_number':1040,'multiline':False]['text':' callers are responsible for keeping the list consistent.','line_number':1041,'multiline':False]['text':' JSITER_* flags ','line_number':1063,'multiline':True]['text':' condition, discriminant, etc. ','line_number':1089,'multiline':True]['text':' then-part, case list, etc. ','line_number':1090,'multiline':True]['text':' else-part, default case, etc. ','line_number':1091,'multiline':True]['text':' Methods used by FoldConstants.cpp.','line_number':1148,'multiline':False]['text':' first node in list ','line_number':1157,'multiline':True]['text':' ptr to last node's pn_next in list ','line_number':1158,'multiline':True]['text':' number of nodes in list ','line_number':1159,'multiline':True]['text':' xflags bits.','line_number':1163,'multiline':False]['text':' Statement list has top-level function statements.','line_number':1165,'multiline':False]['text':' Array/Object/Class initializer has non-constants.','line_number':1168,'multiline':False]['text':'   * array has holes','line_number':1169,'multiline':False]['text':'   * array has spread node','line_number':1170,'multiline':False]['text':'   * array has element which is known not to be constant','line_number':1171,'multiline':False]['text':'   * array has no element','line_number':1172,'multiline':False]['text':'   * object/class has __proto__','line_number':1173,'multiline':False]['text':'   * object/class has property which is known not to be constant','line_number':1174,'multiline':False]['text':'   * object/class shorthand property','line_number':1175,'multiline':False]['text':'   * object/class spread property','line_number':1176,'multiline':False]['text':'   * object/class has method','line_number':1177,'multiline':False]['text':'   * object/class has computed property','line_number':1178,'multiline':False]['text':' Flag set by the emitter after emitting top-level function statements.','line_number':1181,'multiline':False]['text':' Don't use PN*& because we want to check if it changed, so we can use','line_number':1214,'multiline':False]['text':' ReplaceNode','line_number':1215,'multiline':False]['text':'
   * Compute a pointer to the last element in a singly-linked list. NB: list
   * must be non-empty -- this is asserted!
   ','line_number':1287,'multiline':True]['text':'','line_number':1293,'multiline':False]['text':' ParseNode                      ParseNode','line_number':1294,'multiline':False]['text':' +-----+---------+-----+        +-----+---------+-----+','line_number':1295,'multiline':False]['text':' | ... | pn_next | ... | +-...->| ... | pn_next | ... |','line_number':1296,'multiline':False]['text':' +-----+---------+-----+ |      +-----+---------+-----+','line_number':1297,'multiline':False]['text':' ^       |               |      ^     ^','line_number':1298,'multiline':False]['text':' |       +---------------+      |     |','line_number':1299,'multiline':False]['text':' |                              |     tail()','line_number':1300,'multiline':False]['text':' |                              |','line_number':1301,'multiline':False]['text':' head()                         last()','line_number':1302,'multiline':False]['text':'','line_number':1303,'multiline':False]['text':' Methods used by FoldConstants.cpp.','line_number':1355,'multiline':False]['text':' Caller is responsible for keeping the list consistent.','line_number':1356,'multiline':False]['text':' Classes to iterate over ListNode contents:','line_number':1370,'multiline':False]['text':'','line_number':1371,'multiline':False]['text':' Usage:','line_number':1372,'multiline':False]['text':'   ListNode* list;','line_number':1373,'multiline':False]['text':'   for (ParseNode* item : list->contents()) {','line_number':1374,'multiline':False]['text':'     // item is ParseNode* typed.','line_number':1375,'multiline':False]['text':'   }','line_number':1376,'multiline':False]['text':' Implement std::iterator_traits.','line_number':1385,'multiline':False]['text':' Note: body is null for lazily-parsed functions.','line_number':1502,'multiline':False]['text':' aligned numeric literal value ','line_number':1561,'multiline':True]['text':' Whether the number has a decimal point ','line_number':1562,'multiline':True]['text':' Return the decimal string representation of this numeric literal.','line_number':1593,'multiline':False]['text':' Inside a switch statement, a CaseClause is a case-label and the subsequent','line_number':1725,'multiline':False]['text':' statements. The same node type is used for DefaultClauses. The only','line_number':1726,'multiline':False]['text':' difference is that their caseExpression() is null.','line_number':1727,'multiline':False]['text':' target of break/continue statement ','line_number':1748,'multiline':True]['text':' Label associated with this break/continue statement, if any. ','line_number':1760,'multiline':True]['text':' This is only used internally, currently just for tagged templates and the','line_number':1892,'multiline':False]['text':' initial value of fields without initializers. It represents the value','line_number':1893,'multiline':False]['text':' 'undefined' (aka `void 0`), like NullLiteral represents the value 'null'.','line_number':1894,'multiline':False]['text':' Create a RegExp object of this RegExp literal.','line_number':1928,'multiline':False]['text':'
   * PropertyAccess nodes can have any expression/'super' as left-hand
   * side, but the name must be a ParseNodeKind::PropertyName node.
   ','line_number':1953,'multiline':True]['text':' Method used by BytecodeEmitter::emitPropLHS for optimization.','line_number':1977,'multiline':False]['text':' Those methods allow expression to temporarily be nullptr for','line_number':1978,'multiline':False]['text':' optimization purpose.','line_number':1979,'multiline':False]['text':' ParseNodeKind::SuperBase cannot result from any expression syntax.','line_number':2002,'multiline':False]['text':'
 * A CallSiteNode represents the implicit call site object argument in a
 * TaggedTemplate.
 ','line_number':2122,'multiline':True]['text':'
   * Method definitions often keep a name and function body that overlap,
   * so explicitly define the beginning and end here.
   ','line_number':2177,'multiline':True]['text':' Hold onto the function generated for a class static block like','line_number':2233,'multiline':False]['text':'','line_number':2234,'multiline':False]['text':' class A {','line_number':2235,'multiline':False]['text':'  static { /* this static block */ }','line_number':2236,'multiline':False]['text':' }','line_number':2237,'multiline':False]['text':'','line_number':2238,'multiline':False]['text':' only for ParseNodeKind::Switch ','line_number':2274,'multiline':True]['text':'
   * Classes require two definitions: The first "outer" binding binds the
   * class into the scope in which it was declared. the outer binding is a
   * mutable lexial binding. The second "inner" binding binds the class by
   * name inside a block in which the methods are evaulated. It is immutable,
   * giving the methods access to the static members of the class even if
   * the outer binding has been overwritten.
   ','line_number':2330,'multiline':True]['text':' namespace frontend ','line_number':2443,'multiline':True]['text':' namespace js ','line_number':2444,'multiline':True]['text':' frontend_ParseNode_h ','line_number':2446,'multiline':True]