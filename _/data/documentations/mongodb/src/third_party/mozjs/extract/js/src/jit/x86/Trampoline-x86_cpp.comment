['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' js::jit::JitActivation','line_number':21,'multiline':False]['text':' All registers to save and restore. This includes the stack pointer, since we','line_number':36,'multiline':False]['text':' use the ability to reference register values on the stack by index.','line_number':37,'multiline':False]['text':' Generates a trampoline for calling Jit compiled code from a C++ function.','line_number':53,'multiline':False]['text':' The trampoline use the EnterJitCode signature, with the standard cdecl','line_number':54,'multiline':False]['text':' calling convention.','line_number':55,'multiline':False]['text':' return address ','line_number':60,'multiline':True]['text':' Save old stack frame pointer, set new stack frame pointer.','line_number':62,'multiline':False]['text':' Save non-volatile registers. These must be saved by the trampoline,','line_number':66,'multiline':False]['text':' rather than the JIT'd code, because they are scanned by the conservative','line_number':67,'multiline':False]['text':' scanner.','line_number':68,'multiline':False]['text':' Keep track of the stack which has to be unwound after returning from the','line_number':73,'multiline':False]['text':' compiled function.','line_number':74,'multiline':False]['text':' Load the number of values to be copied (argc) into eax','line_number':77,'multiline':False]['text':' If we are constructing, that also needs to include newTarget','line_number':80,'multiline':False]['text':' eax <- 8*numValues, eax is now the offset betwen argv and the last value.','line_number':92,'multiline':False]['text':' Guarantee stack alignment of Jit frames.','line_number':95,'multiline':False]['text':'','line_number':96,'multiline':False]['text':' This code compensates for the offset created by the copy of the vector of','line_number':97,'multiline':False]['text':' arguments, such that the jit frame will be aligned once the return','line_number':98,'multiline':False]['text':' address is pushed on the stack.','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':' In the computation of the offset, we omit the size of the JitFrameLayout','line_number':101,'multiline':False]['text':' which is pushed on the stack, as the JitFrameLayout size is a multiple of','line_number':102,'multiline':False]['text':' the JitStackAlignment.','line_number':103,'multiline':False]['text':' ecx = ecx & 15, holds alignment.','line_number':110,'multiline':False]['text':'**************************************************************
  Loop over argv vector, push arguments onto stack in reverse order
  **************************************************************','line_number':114,'multiline':True]['text':' ebx = argv   --argv pointer is in ebp + 16','line_number':118,'multiline':False]['text':' eax = argv[8(argc)]  --eax now points one value past the last argument','line_number':121,'multiline':False]['text':' while (eax > ebx)  --while still looping through arguments','line_number':124,'multiline':False]['text':' eax -= 8  --move to previous argument','line_number':132,'multiline':False]['text':' Push what eax points to on stack, a Value is 2 words','line_number':135,'multiline':False]['text':' Create the frame descriptor.','line_number':143,'multiline':False]['text':' Push the number of actual arguments.  |result| is used to store the','line_number':147,'multiline':False]['text':' actual number of arguments without adding an extra argument to the enter','line_number':148,'multiline':False]['text':' JIT.','line_number':149,'multiline':False]['text':' Push the callee token.','line_number':154,'multiline':False]['text':' Load the InterpreterFrame address into the OsrFrameReg.','line_number':157,'multiline':False]['text':' This address is also used for setting the constructing bit on all paths.','line_number':158,'multiline':False]['text':' Push the descriptor.','line_number':161,'multiline':False]['text':' Handle Interpreter -> Baseline OSR.','line_number':167,'multiline':False]['text':' Push return address.','line_number':185,'multiline':False]['text':' Push previous frame pointer.','line_number':189,'multiline':False]['text':' Reserve frame.','line_number':192,'multiline':False]['text':' Reserve space for locals and stack values.','line_number':199,'multiline':False]['text':' Enter exit frame.','line_number':204,'multiline':False]['text':' Fake return address.','line_number':210,'multiline':False]['text':' No GC things to mark on the stack, push a bare token.','line_number':212,'multiline':False]['text':' BaselineFrame','line_number':222,'multiline':False]['text':' InterpreterFrame','line_number':223,'multiline':False]['text':' If OSR-ing, then emit instrumentation for setting lastProfilerFrame','line_number':238,'multiline':False]['text':' if profiler instrumentation is enabled.','line_number':239,'multiline':False]['text':' OOM: load error value, discard return address and previous frame','line_number':254,'multiline':False]['text':' pointer and return.','line_number':255,'multiline':False]['text':' The call will push the return address on the stack, thus we check that','line_number':267,'multiline':False]['text':' the stack would be aligned once the call is complete.','line_number':268,'multiline':False]['text':'**************************************************************
      Call passed-in code, get return value and fill in the
      passed in return value pointer
  **************************************************************','line_number':271,'multiline':True]['text':' Interpreter -> Baseline OSR will return here.','line_number':278,'multiline':False]['text':' Pop arguments off the stack.','line_number':285,'multiline':False]['text':' eax <- 8*argc (size of all arguments we pushed on the stack)','line_number':286,'multiline':False]['text':' Unmark EntryFrame.','line_number':288,'multiline':False]['text':' Discard calleeToken.','line_number':289,'multiline':False]['text':' Discard numActualArgs.','line_number':290,'multiline':False]['text':' |ebp| could have been clobbered by the inner function.','line_number':293,'multiline':False]['text':' Grab the address for the Value result from the argument stack.','line_number':294,'multiline':False]['text':'  +20 ... arguments ...','line_number':295,'multiline':False]['text':'  +16 <return>','line_number':296,'multiline':False]['text':'  +12 ebp <- original %ebp pointing here.','line_number':297,'multiline':False]['text':'  +8  ebx','line_number':298,'multiline':False]['text':'  +4  esi','line_number':299,'multiline':False]['text':'  +0  edi','line_number':300,'multiline':False]['text':'*************************************************************
      Return stack and registers to correct state
  *************************************************************','line_number':304,'multiline':True]['text':' Restore non-volatile registers','line_number':308,'multiline':False]['text':' Restore old stack frame pointer','line_number':313,'multiline':False]['text':' static','line_number':318,'multiline':False]['text':' Not supported, or not implemented yet.','line_number':321,'multiline':False]['text':' TODO: Implement along with the corresponding stack-walker changes, in','line_number':322,'multiline':False]['text':' coordination with the Gecko Profiler, see bug 1635987 and follow-ups.','line_number':323,'multiline':False]['text':' Push AllRegs in a way that is compatible with RegisterDump, regardless of','line_number':327,'multiline':False]['text':' what PushRegsInMask might do to reduce the set size.','line_number':328,'multiline':False]['text':' When SIMD isn't supported, PushRegsInMask reduces the set of float','line_number':333,'multiline':False]['text':' registers to be double-sized, while the RegisterDump expects each of','line_number':334,'multiline':False]['text':' the float registers to have the maximal possible size','line_number':335,'multiline':False]['text':' (Simd128DataSize). To work around this, we just spill the double','line_number':336,'multiline':False]['text':' registers by hand here, using the register dump offset directly.','line_number':337,'multiline':False]['text':' We do the minimum amount of work in assembly and shunt the rest','line_number':356,'multiline':False]['text':' off to InvalidationBailout. Assembly does:','line_number':357,'multiline':False]['text':'','line_number':358,'multiline':False]['text':' - Push the machine state onto the stack.','line_number':359,'multiline':False]['text':' - Call the InvalidationBailout routine with the stack pointer.','line_number':360,'multiline':False]['text':' - Now that the frame has been bailed out, convert the invalidated','line_number':361,'multiline':False]['text':'   frame into an exit frame.','line_number':362,'multiline':False]['text':' - Do the normal check-return-code-and-thunk-to-the-interpreter dance.','line_number':363,'multiline':False]['text':' Push registers such that we can access them from [base + code].','line_number':365,'multiline':False]['text':' Argument to jit::InvalidationBailout.','line_number':368,'multiline':False]['text':' Make space for InvalidationBailout's frameSize outparam.','line_number':370,'multiline':False]['text':' Make space for InvalidationBailout's bailoutInfo outparam.','line_number':374,'multiline':False]['text':' Get bailoutInfo outparam.','line_number':387,'multiline':False]['text':' Get the frameSize outparam.','line_number':388,'multiline':False]['text':' Pop the machine state and the dead frame.','line_number':390,'multiline':False]['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in ecx.','line_number':393,'multiline':False]['text':' Caller:','line_number':408,'multiline':False]['text':' [arg2] [arg1] [this] [ [argc] [callee] [descr] [raddr] ] <- esp','line_number':409,'multiline':False]['text':' Load argc.','line_number':411,'multiline':False]['text':' Load the number of |undefined|s to push into %ecx.','line_number':415,'multiline':False]['text':' The frame pointer and its padding are pushed on the stack.','line_number':421,'multiline':False]['text':' Including |this|, there are (|nformals| + 1) arguments to push to the','line_number':422,'multiline':False]['text':' stack.  Then we push a JitFrameLayout.  We compute the padding expressed','line_number':423,'multiline':False]['text':' in the number of extra |undefined| values to push on the stack.','line_number':424,'multiline':False]['text':' for padding ','line_number':437,'multiline':True]['text':' Account for newTarget, if necessary.','line_number':439,'multiline':False]['text':' Copy the number of actual arguments into edx.','line_number':450,'multiline':False]['text':' NOTE: The fact that x86 ArgumentsRectifier saves the FramePointer','line_number':455,'multiline':False]['text':' is relied upon by the baseline bailout code.  If this changes,','line_number':456,'multiline':False]['text':' fix that code!  See the |#if defined(JS_CODEGEN_X86) portions of','line_number':457,'multiline':False]['text':' BaselineStackBuilder::calculatePrevFramePtr and','line_number':458,'multiline':False]['text':' BaselineStackBuilder::buildRectifierFrame (in BaselineBailouts.cpp).','line_number':459,'multiline':False]['text':' Save %esp.','line_number':461,'multiline':False]['text':' padding ','line_number':462,'multiline':True]['text':' Caller:','line_number':464,'multiline':False]['text':' [arg2] [arg1] [this] [ [argc] [callee] [descr] [raddr] ]','line_number':465,'multiline':False]['text':' '-- #esi ---'','line_number':466,'multiline':False]['text':'','line_number':467,'multiline':False]['text':' Rectifier frame:','line_number':468,'multiline':False]['text':' [ebp'] <- ebp [padding] <- esp [undef] [undef] [arg2] [arg1] [this]','line_number':469,'multiline':False]['text':'                                '--- #ecx ----' '-- #esi ---'','line_number':470,'multiline':False]['text':'','line_number':471,'multiline':False]['text':' [ [argc] [callee] [descr] [raddr] ]','line_number':472,'multiline':False]['text':' Push undefined.','line_number':474,'multiline':False]['text':' type(undefined);','line_number':479,'multiline':False]['text':' payload(undefined);','line_number':480,'multiline':False]['text':' Get the topmost argument. We did a push of %ebp earlier, so be sure to','line_number':485,'multiline':False]['text':' account for this in the offset','line_number':486,'multiline':False]['text':' Push arguments, |nargs| + 1 times (to include |this|).','line_number':491,'multiline':False]['text':' Construct descriptor, accounting for pushed frame pointer above','line_number':529,'multiline':False]['text':' Construct JitFrameLayout.','line_number':534,'multiline':False]['text':' number of actual arguments','line_number':535,'multiline':False]['text':' callee token','line_number':536,'multiline':False]['text':' descriptor','line_number':537,'multiline':False]['text':' Call the target function.','line_number':539,'multiline':False]['text':' See BaselineCacheIRCompiler::emitCallInlinedFunction.','line_number':552,'multiline':False]['text':' Remove the rectifier frame.','line_number':560,'multiline':False]['text':' ebx <- descriptor with FrameType.','line_number':561,'multiline':False]['text':' ebx <- descriptor.','line_number':562,'multiline':False]['text':' Discard calleeToken.','line_number':563,'multiline':False]['text':' Discard number of actual arguments.','line_number':564,'multiline':False]['text':' Discard pushed arguments, but not the pushed frame pointer.','line_number':566,'multiline':False]['text':' Push registers such that we can access them from [base + code].','line_number':576,'multiline':False]['text':' Push the bailout table number.','line_number':579,'multiline':False]['text':' The current stack pointer is the first argument to jit::Bailout.','line_number':582,'multiline':False]['text':' Make space for Bailout's baioutInfo outparam.','line_number':590,'multiline':False]['text':' Call the bailout function. This will correct the size of the bailout.','line_number':594,'multiline':False]['text':' Get bailoutInfo outparam.','line_number':602,'multiline':False]['text':' Common size of stuff we've pushed.','line_number':604,'multiline':False]['text':' frameClass','line_number':605,'multiline':False]['text':' Remove both the bailout frame and the topmost Ion frame's stack.','line_number':608,'multiline':False]['text':' We want the frameSize. Stack is:','line_number':610,'multiline':False]['text':'    ... frame ...','line_number':611,'multiline':False]['text':'    snapshotOffset','line_number':612,'multiline':False]['text':'    frameSize','line_number':613,'multiline':False]['text':'    ... bailoutFrame ...','line_number':614,'multiline':False]['text':' Stack is:','line_number':620,'multiline':False]['text':'    ... frame ...','line_number':621,'multiline':False]['text':'    bailoutId','line_number':622,'multiline':False]['text':'    ... bailoutFrame ...','line_number':623,'multiline':False]['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in ecx.','line_number':628,'multiline':False]['text':' Avoid conflicts with argument registers while discarding the result after','line_number':660,'multiline':False]['text':' the function call.','line_number':661,'multiline':False]['text':' The context is the first argument.','line_number':668,'multiline':False]['text':' Stack is:','line_number':671,'multiline':False]['text':'    ... frame ...','line_number':672,'multiline':False]['text':'  +8  [args]','line_number':673,'multiline':False]['text':'  +4  descriptor','line_number':674,'multiline':False]['text':'  +0  returnAddress','line_number':675,'multiline':False]['text':'','line_number':676,'multiline':False]['text':' We're aligned to an exit frame, so link it up.','line_number':677,'multiline':False]['text':' Save the current stack pointer as the base for copying arguments.','line_number':681,'multiline':False]['text':' Reserve space for the outparameter.','line_number':688,'multiline':False]['text':' Copy arguments.','line_number':731,'multiline':False]['text':' We don't pass doubles in float registers on x86, so no need','line_number':739,'multiline':False]['text':' to check for argPassedInFloatReg.','line_number':740,'multiline':False]['text':' Copy the implicit outparam, if any.','line_number':761,'multiline':False]['text':' Test for failure.','line_number':773,'multiline':False]['text':' Load the outparam and free any allocated stack.','line_number':788,'multiline':False]['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':822,'multiline':False]['text':' execution from returning any private data.','line_number':823,'multiline':False]['text':' Call into C++ to mark this GC thing.','line_number':852,'multiline':False]['text':'','line_number':912,'multiline':False]['text':' The code generated below expects that the current stack pointer points','line_number':913,'multiline':False]['text':' to an Ion or Baseline frame, at the state it would be immediately','line_number':914,'multiline':False]['text':' before a ret().  Thus, after this stub's business is done, it executes','line_number':915,'multiline':False]['text':' a ret() and returns directly to the caller script, on behalf of the','line_number':916,'multiline':False]['text':' callee script that jumped to this code.','line_number':917,'multiline':False]['text':'','line_number':918,'multiline':False]['text':' Thus the expected stack is:','line_number':919,'multiline':False]['text':'','line_number':920,'multiline':False]['text':'                                   StackPointer ----+','line_number':921,'multiline':False]['text':'                                                    v','line_number':922,'multiline':False]['text':' ..., ActualArgc, CalleeToken, Descriptor, ReturnAddr','line_number':923,'multiline':False]['text':' MEM-HI                                       MEM-LOW','line_number':924,'multiline':False]['text':'','line_number':925,'multiline':False]['text':'','line_number':926,'multiline':False]['text':' The generated jitcode is responsible for overwriting the','line_number':927,'multiline':False]['text':' jitActivation->lastProfilingFrame field with a pointer to the previous','line_number':928,'multiline':False]['text':' Ion or Baseline jit-frame that was pushed before this one. It is also','line_number':929,'multiline':False]['text':' responsible for overwriting jitActivation->lastProfilingCallSite with','line_number':930,'multiline':False]['text':' the return address into that frame.  The frame could either be an','line_number':931,'multiline':False]['text':' immediate "caller" frame, or it could be a frame in a previous','line_number':932,'multiline':False]['text':' JitActivation (if the current frame was entered from C++, and the C++','line_number':933,'multiline':False]['text':' was entered by some caller jit-frame further down the stack).','line_number':934,'multiline':False]['text':'','line_number':935,'multiline':False]['text':' So this jitcode is responsible for "walking up" the jit stack, finding','line_number':936,'multiline':False]['text':' the previous Ion or Baseline JS frame, and storing its address and the','line_number':937,'multiline':False]['text':' return address into the appropriate fields on the current jitActivation.','line_number':938,'multiline':False]['text':'','line_number':939,'multiline':False]['text':' There are a fixed number of different path types that can lead to the','line_number':940,'multiline':False]['text':' current frame, which is either a baseline or ion frame:','line_number':941,'multiline':False]['text':'','line_number':942,'multiline':False]['text':' <Baseline-Or-Ion>','line_number':943,'multiline':False]['text':' ^','line_number':944,'multiline':False]['text':' |','line_number':945,'multiline':False]['text':' ^--- Ion','line_number':946,'multiline':False]['text':' |','line_number':947,'multiline':False]['text':' ^--- Baseline Stub <---- Baseline','line_number':948,'multiline':False]['text':' |','line_number':949,'multiline':False]['text':' ^--- Argument Rectifier','line_number':950,'multiline':False]['text':' |    ^','line_number':951,'multiline':False]['text':' |    |','line_number':952,'multiline':False]['text':' |    ^--- Ion','line_number':953,'multiline':False]['text':' |    |','line_number':954,'multiline':False]['text':' |    ^--- Baseline Stub <---- Baseline','line_number':955,'multiline':False]['text':' |','line_number':956,'multiline':False]['text':' ^--- Entry Frame (From C++)','line_number':957,'multiline':False]['text':'','line_number':958,'multiline':False]['text':' Ensure that frame we are exiting is current lastProfilingFrame','line_number':970,'multiline':False]['text':' Load the frame descriptor into |scratch1|, figure out what to do','line_number':983,'multiline':False]['text':' depending on its type.','line_number':984,'multiline':False]['text':' Going into the conditionals, we will have:','line_number':988,'multiline':False]['text':'      FrameDescriptor.size in scratch1','line_number':989,'multiline':False]['text':'      FrameDescriptor.type in scratch2','line_number':990,'multiline':False]['text':' Handling of each case is dependent on FrameDescriptor.type','line_number':995,'multiline':False]['text':' The WasmToJSJit is just another kind of entry.','line_number':1016,'multiline':False]['text':'','line_number':1023,'multiline':False]['text':' FrameType::IonJS','line_number':1024,'multiline':False]['text':'','line_number':1025,'multiline':False]['text':' Stack layout:','line_number':1026,'multiline':False]['text':'                  ...','line_number':1027,'multiline':False]['text':'                  Ion-Descriptor','line_number':1028,'multiline':False]['text':'     Prev-FP ---> Ion-ReturnAddr','line_number':1029,'multiline':False]['text':'                  ... previous frame data ... |- Descriptor.Size','line_number':1030,'multiline':False]['text':'                  ... arguments ...           |','line_number':1031,'multiline':False]['text':'                  ActualArgc          |','line_number':1032,'multiline':False]['text':'                  CalleeToken         |- JitFrameLayout::Size()','line_number':1033,'multiline':False]['text':'                  Descriptor          |','line_number':1034,'multiline':False]['text':'        FP -----> ReturnAddr          |','line_number':1035,'multiline':False]['text':'','line_number':1036,'multiline':False]['text':' |scratch1| contains Descriptor.size','line_number':1039,'multiline':False]['text':' returning directly to an IonJS frame.  Store return addr to frame','line_number':1041,'multiline':False]['text':' in lastProfilingCallSite.','line_number':1042,'multiline':False]['text':' Store return frame in lastProfilingFrame.','line_number':1047,'multiline':False]['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1048,'multiline':False]['text':'','line_number':1055,'multiline':False]['text':' FrameType::BaselineStub','line_number':1056,'multiline':False]['text':'','line_number':1057,'multiline':False]['text':' Look past the stub and store the frame pointer to','line_number':1058,'multiline':False]['text':' the baselineJS frame prior to it.','line_number':1059,'multiline':False]['text':'','line_number':1060,'multiline':False]['text':' Stack layout:','line_number':1061,'multiline':False]['text':'              ...','line_number':1062,'multiline':False]['text':'              BL-Descriptor','line_number':1063,'multiline':False]['text':' Prev-FP ---> BL-ReturnAddr','line_number':1064,'multiline':False]['text':'      +-----> BL-PrevFramePointer','line_number':1065,'multiline':False]['text':'      |       ... BL-FrameData ...','line_number':1066,'multiline':False]['text':'      |       BLStub-Descriptor','line_number':1067,'multiline':False]['text':'      |       BLStub-ReturnAddr','line_number':1068,'multiline':False]['text':'      |       BLStub-StubPointer          |','line_number':1069,'multiline':False]['text':'      +------ BLStub-SavedFramePointer    |- Descriptor.Size','line_number':1070,'multiline':False]['text':'              ... arguments ...           |','line_number':1071,'multiline':False]['text':'              ActualArgc          |','line_number':1072,'multiline':False]['text':'              CalleeToken         |- JitFrameLayout::Size()','line_number':1073,'multiline':False]['text':'              Descriptor          |','line_number':1074,'multiline':False]['text':'    FP -----> ReturnAddr          |','line_number':1075,'multiline':False]['text':'','line_number':1076,'multiline':False]['text':' We take advantage of the fact that the stub frame saves the frame','line_number':1077,'multiline':False]['text':' pointer pointing to the baseline frame, so a bunch of calculation can','line_number':1078,'multiline':False]['text':' be avoided.','line_number':1079,'multiline':False]['text':'','line_number':1080,'multiline':False]['text':' Skip past BL-PrevFramePtr','line_number':1094,'multiline':False]['text':'','line_number':1099,'multiline':False]['text':' FrameType::Rectifier','line_number':1100,'multiline':False]['text':'','line_number':1101,'multiline':False]['text':' The rectifier frame can be preceded by either an IonJS, a BaselineStub,','line_number':1102,'multiline':False]['text':' or a CppToJSJit/WasmToJSJit frame.','line_number':1103,'multiline':False]['text':'','line_number':1104,'multiline':False]['text':' Stack layout if caller of rectifier was Ion or CppToJSJit/WasmToJSJit:','line_number':1105,'multiline':False]['text':'','line_number':1106,'multiline':False]['text':'              Ion-Descriptor','line_number':1107,'multiline':False]['text':'              Ion-ReturnAddr','line_number':1108,'multiline':False]['text':'              ... ion frame data ... |- Rect-Descriptor.Size','line_number':1109,'multiline':False]['text':'              < COMMON LAYOUT >','line_number':1110,'multiline':False]['text':'','line_number':1111,'multiline':False]['text':' Stack layout if caller of rectifier was Baseline:','line_number':1112,'multiline':False]['text':'','line_number':1113,'multiline':False]['text':'              BL-Descriptor','line_number':1114,'multiline':False]['text':' Prev-FP ---> BL-ReturnAddr','line_number':1115,'multiline':False]['text':'      +-----> BL-SavedFramePointer','line_number':1116,'multiline':False]['text':'      |       ... baseline frame data ...','line_number':1117,'multiline':False]['text':'      |       BLStub-Descriptor','line_number':1118,'multiline':False]['text':'      |       BLStub-ReturnAddr','line_number':1119,'multiline':False]['text':'      |       BLStub-StubPointer          |','line_number':1120,'multiline':False]['text':'      +------ BLStub-SavedFramePointer    |- Rect-Descriptor.Size','line_number':1121,'multiline':False]['text':'              ... args to rectifier ...   |','line_number':1122,'multiline':False]['text':'              < COMMON LAYOUT >','line_number':1123,'multiline':False]['text':'','line_number':1124,'multiline':False]['text':' Common stack layout:','line_number':1125,'multiline':False]['text':'','line_number':1126,'multiline':False]['text':'              ActualArgc          |','line_number':1127,'multiline':False]['text':'              CalleeToken         |- IonRectitiferFrameLayout::Size()','line_number':1128,'multiline':False]['text':'              Rect-Descriptor     |','line_number':1129,'multiline':False]['text':'              Rect-ReturnAddr     |','line_number':1130,'multiline':False]['text':'              ... rectifier data & args ... |- Descriptor.Size','line_number':1131,'multiline':False]['text':'              ActualArgc      |','line_number':1132,'multiline':False]['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1133,'multiline':False]['text':'              Descriptor      |','line_number':1134,'multiline':False]['text':'    FP -----> ReturnAddr      |','line_number':1135,'multiline':False]['text':'','line_number':1136,'multiline':False]['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1139,'multiline':False]['text':' Now |scratch1| contains Rect-Descriptor.Size','line_number':1148,'multiline':False]['text':' and |scratch2| points to Rectifier frame','line_number':1149,'multiline':False]['text':' and |scratch3| contains Rect-Descriptor.Type','line_number':1150,'multiline':False]['text':' Check for either Ion or BaselineStub frame.','line_number':1154,'multiline':False]['text':' Handle Rectifier <- IonJS','line_number':1159,'multiline':False]['text':' scratch3 := RectFrame[ReturnAddr]','line_number':1160,'multiline':False]['text':' scratch3 := RectFrame + Rect-Descriptor.Size +','line_number':1166,'multiline':False]['text':'             RectifierFrameLayout::Size()','line_number':1167,'multiline':False]['text':' Check for either BaselineStub or a CppToJSJit/WasmToJSJit entry','line_number':1176,'multiline':False]['text':' frame.','line_number':1177,'multiline':False]['text':' Handle Rectifier <- BaselineStub <- BaselineJS','line_number':1181,'multiline':False]['text':' FrameType::IonICCall','line_number':1198,'multiline':False]['text':'','line_number':1199,'multiline':False]['text':' The caller is always an IonJS frame.','line_number':1200,'multiline':False]['text':'','line_number':1201,'multiline':False]['text':'              Ion-Descriptor','line_number':1202,'multiline':False]['text':'              Ion-ReturnAddr','line_number':1203,'multiline':False]['text':'              ... ion frame data ... |- CallFrame-Descriptor.Size','line_number':1204,'multiline':False]['text':'              StubCode               |','line_number':1205,'multiline':False]['text':'              ICCallFrame-Descriptor |- IonICCallFrameLayout::Size()','line_number':1206,'multiline':False]['text':'              ICCallFrame-ReturnAddr |','line_number':1207,'multiline':False]['text':'              ... call frame data & args ... |- Descriptor.Size','line_number':1208,'multiline':False]['text':'              ActualArgc      |','line_number':1209,'multiline':False]['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1210,'multiline':False]['text':'              Descriptor      |','line_number':1211,'multiline':False]['text':'    FP -----> ReturnAddr      |','line_number':1212,'multiline':False]['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1215,'multiline':False]['text':' scratch3 := ICCallFrame-Descriptor.Size','line_number':1219,'multiline':False]['text':' Assert previous frame is an IonJS frame.','line_number':1223,'multiline':False]['text':' lastProfilingCallSite := ICCallFrame-ReturnAddr','line_number':1236,'multiline':False]['text':' lastProfilingFrame := ICCallFrame + ICCallFrame-Descriptor.Size +','line_number':1242,'multiline':False]['text':'                       IonICCallFrameLayout::Size()','line_number':1243,'multiline':False]['text':'','line_number':1251,'multiline':False]['text':' FrameType::CppToJSJit / FrameType::WasmToJSJit','line_number':1252,'multiline':False]['text':'','line_number':1253,'multiline':False]['text':' If at an entry frame, store null into both fields.','line_number':1254,'multiline':False]['text':' A fast-path wasm->jit transition frame is an entry frame from the point','line_number':1255,'multiline':False]['text':' of view of the JIT.','line_number':1256,'multiline':False]['text':'','line_number':1257,'multiline':False]