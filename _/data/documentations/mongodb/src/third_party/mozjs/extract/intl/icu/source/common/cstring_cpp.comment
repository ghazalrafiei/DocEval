['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]['text':'
******************************************************************************
*
*   Copyright (C) 1997-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File CSTRING.C
*
* @author       Helena Shih
*
* Modification History:
*
*   Date        Name        Description
*   6/18/98     hshih       Created
*   09/08/98    stephen     Added include for ctype, for Mac Port
*   11/15/99    helena      Integrated S/390 IEEE changes. 
******************************************************************************
','line_number':3,'multiline':True]['text':'
 * We hardcode case conversion for invariant characters to match our expectation
 * and the compiler execution charset.
 * This prevents problems on systems
 * - with non-default casing behavior, like Turkish system locales where
 *   tolower('I') maps to dotless i and toupper('i') maps to dotted I
 * - where there are no lowercase Latin characters at all, or using different
 *   codes (some old EBCDIC codepages)
 *
 * This works because the compiler usually runs on a platform where the execution
 * charset includes all of the invariant characters at their expected
 * code positions, so that the char * string literals in ICU code match
 * the char literals here.
 *
 * Note that the set of lowercase Latin letters is discontiguous in EBCDIC
 * and the set of uppercase Latin letters is discontiguous as well.
 ','line_number':33,'multiline':True]['text':'
 * Commented out because cstring.h defines uprv_tolower() to be
 * the same as either uprv_asciitolower() or uprv_ebcdictolower()
 * to reduce the amount of code to cover with tests.
 *
 * Note that this uprv_tolower() definition is likely to work for most
 * charset families, not just ASCII and EBCDIC, because its #else branch
 * is written generically.
 ','line_number':78,'multiline':True]['text':'
 * Takes a int32_t and fills in  a char* string with that number "radix"-based.
 * Does not handle negative values (makes an empty string for them).
 * Writes at most 12 chars ("-2147483647" plus NUL).
 * Returns the length of the string (not including the NUL).
 ','line_number':150,'multiline':True]['text':' Only in base 10 do we conside numbers to be signed. ','line_number':168,'multiline':True]['text':' We are generating the digits backwards.  Null term the end. ','line_number':174,'multiline':True]['text':' copy converted number into user buffer  ','line_number':181,'multiline':True]['text':'
 * Takes a int64_t and fills in  a char* string with that number "radix"-based.
 * Writes at most 21: chars ("-9223372036854775807" plus NUL).
 * Returns the length of the string, not including the terminating NULL.
 ','line_number':189,'multiline':True]['text':' Only in base 10 do we conside numbers to be signed. ','line_number':206,'multiline':True]['text':' We are generating the digits backwards.  Null term the end. ','line_number':212,'multiline':True]['text':' copy converted number into user buffer  ','line_number':219,'multiline':True]['text':' compare non-NULL strings lexically with lowercase ','line_number':245,'multiline':True]['text':' compare non-zero characters with lowercase ','line_number':261,'multiline':True]['text':' compare non-NULL strings lexically with lowercase ','line_number':284,'multiline':True]['text':' compare non-zero characters with lowercase ','line_number':300,'multiline':True]