['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' ExtensibleCompilationStencil','line_number':13,'multiline':False]['text':' ParserBase','line_number':16,'multiline':False]['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':17,'multiline':False]['text':' GetScopeDataTrailingNames','line_number':22,'multiline':False]['text':'
 * Allocate a ParseNode from parser's node freelist or, failing that, from
 * cx's temporary arena.
 ','line_number':50,'multiline':True]['text':' The asm.js specification is written in ECMAScript grammar terms that','line_number':67,'multiline':False]['text':' specify *only* a binary tree.  It's a royal pain to implement the asm.js','line_number':68,'multiline':False]['text':' spec to act upon n-ary lists as created below.  So for asm.js, form a','line_number':69,'multiline':False]['text':' binary tree of lists exactly as ECMAScript would by skipping the','line_number':70,'multiline':False]['text':' following optimization.','line_number':71,'multiline':False]['text':' Left-associative trees of a given operator (e.g. |a + b + c|) are','line_number':73,'multiline':False]['text':' binary trees in the spec: (+ (+ a b) c) in Lisp terms.  Recursively','line_number':74,'multiline':False]['text':' processing such a tree, exactly implemented that way, would blow the','line_number':75,'multiline':False]['text':' the stack.  We use a list node that uses O(1) stack to represent','line_number':76,'multiline':False]['text':' such operations: (+ a b c).','line_number':77,'multiline':False]['text':'','line_number':78,'multiline':False]['text':' (**) is right-associative; per spec |a ** b ** c| parses as','line_number':79,'multiline':False]['text':' (** a (** b c)). But we treat this the same way, creating a list','line_number':80,'multiline':False]['text':' node: (** a b c). All consumers must understand that this must be','line_number':81,'multiline':False]['text':' processed with a right fold, whereas the list (+ a b c) must be','line_number':82,'multiline':False]['text':' processed with a left fold because (+) is left-associative.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' atom() already includes the '#', no','line_number':321,'multiline':False]['text':' need to specially include it.','line_number':322,'multiline':False]['text':' ES 2017 draft','line_number':408,'multiline':False]['text':' 12.15.2 (ArrowFunction, AsyncArrowFunction).','line_number':409,'multiline':False]['text':' 14.1.12 (FunctionExpression).','line_number':410,'multiline':False]['text':' 14.4.8 (Generatoression).','line_number':411,'multiline':False]['text':' 14.6.8 (AsyncFunctionExpression)','line_number':412,'multiline':False]['text':' 14.5.8 (ClassExpression)','line_number':418,'multiline':False]