['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]['text':' Cast operations to supplement the built-in casting operations. ','line_number':7,'multiline':True]['text':'*
 * Sets the outparam value of type |To| with the same underlying bit pattern of
 * |aFrom|.
 *
 * |To| and |From| must be types of the same size; be careful of cross-platform
 * size differences, or this might fail to compile on some but not all
 * platforms.
 *
 * There is also a variant that returns the value directly.  In most cases, the
 * two variants should be identical.  However, in the specific case of x86
 * chips, the behavior differs: returning floating-point values directly is done
 * through the x87 stack, and x87 loads and stores turn signaling NaNs into
 * quiet NaNs... silently.  Returning floating-point values via outparam,
 * however, is done entirely within the SSE registers when SSE2 floating-point
 * is enabled in the compiler, which has semantics-preserving behavior you would
 * expect.
 *
 * If preserving the distinction between signaling NaNs and quiet NaNs is
 * important to you, you should use the outparam version.  In all other cases,
 * you should use the direct return version.
 ','line_number':20,'multiline':True]['text':' We could maybe downgrade these to std::is_trivially_copyable, but the','line_number':46,'multiline':False]['text':' various STLs we use don't all provide it.','line_number':47,'multiline':False]['text':' Implicit conversions on operands to binary operations make this all a bit','line_number':77,'multiline':False]['text':' hard to verify.  Attempt to ease the pain below by *only* comparing values','line_number':78,'multiline':False]['text':' that are obviously the same type (and will undergo no further conversions),','line_number':79,'multiline':False]['text':' even when it's not strictly necessary, for explicitness.','line_number':80,'multiline':False]['text':' Unsigned-to-unsigned range check','line_number':84,'multiline':False]['text':' Signed-to-unsigned range check','line_number':111,'multiline':False]['text':' Unsigned-to-signed range check','line_number':127,'multiline':False]['text':' Signed-to-signed range check','line_number':159,'multiline':False]['text':' namespace detail','line_number':198,'multiline':False]['text':'*
 * Cast a value of integral type |From| to a value of integral type |To|,
 * asserting that the cast will be a safe cast per C++ (that is, that |to| is in
 * the range of values permitted for the type |From|).
 ','line_number':200,'multiline':True]['text':'*
 * Cast a value of integral type |From| to a value of integral type |To|,
 * release asserting that the cast will be a safe cast per C++ (that is, that
 * |to| is in the range of values permitted for the type |From|).
 ','line_number':211,'multiline':True]['text':' namespace mozilla','line_number':222,'multiline':False]['text':' mozilla_Casting_h ','line_number':224,'multiline':True]