['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2015 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':' In the context of wasm, the OptimizedEncodingListener specifically is','line_number':34,'multiline':False]['text':' listening for the completion of tier-2.','line_number':35,'multiline':False]['text':' A struct containing the typed, imported values that are harvested from the','line_number':39,'multiline':False]['text':' import object and passed to Module::instantiate(). This struct must be','line_number':40,'multiline':False]['text':' stored in a (Persistent)Rooted, not in the heap due to its use of TraceRoot()','line_number':41,'multiline':False]['text':' and complete lack of barriers.','line_number':42,'multiline':False]['text':' Module represents a compiled wasm module and primarily provides three','line_number':66,'multiline':False]['text':' operations: instantiation, tiered compilation, serialization. A Module can be','line_number':67,'multiline':False]['text':' instantiated any number of times to produce new Instance objects. A Module','line_number':68,'multiline':False]['text':' can have a single tier-2 task initiated to augment a Module's code with a','line_number':69,'multiline':False]['text':' higher tier. A Module can  have its optimized code serialized at any point','line_number':70,'multiline':False]['text':' where the LinkData is also available, which is primarily (1) at the end of','line_number':71,'multiline':False]['text':' module generation, (2) at the end of tier-2 compilation.','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':' Fully linked-and-instantiated code (represented by Code and its owned','line_number':74,'multiline':False]['text':' ModuleSegment) can be shared between instances, provided none of those','line_number':75,'multiline':False]['text':' instances are being debugged. If patchable code is needed then each instance','line_number':76,'multiline':False]['text':' must have its own Code. Module eagerly creates a new Code and gives it to the','line_number':77,'multiline':False]['text':' first instance; it then instantiates new Code objects from a copy of the','line_number':78,'multiline':False]['text':' unlinked code that it keeps around for that purpose.','line_number':79,'multiline':False]['text':' These fields are only meaningful when code_->metadata().debugEnabled.','line_number':89,'multiline':False]['text':' `debugCodeClaimed_` is set to false initially and then to true when','line_number':90,'multiline':False]['text':' `code_` is already being used for an instance and can't be shared because','line_number':91,'multiline':False]['text':' it may be patched by the debugger. Subsequent instances must then create','line_number':92,'multiline':False]['text':' copies by linking the `debugUnlinkedCode_` using `debugLinkData_`.','line_number':93,'multiline':False]['text':' This could all be removed if debugging didn't need to perform','line_number':94,'multiline':False]['text':' per-instance code patching.','line_number':95,'multiline':False]['text':' This field is set during tier-2 compilation and cleared on success or','line_number':102,'multiline':False]['text':' failure. These happen on different threads and are serialized by the','line_number':103,'multiline':False]['text':' control flow of helper tasks.','line_number':104,'multiline':False]['text':' This flag is used for logging (and testing) purposes to indicate','line_number':108,'multiline':False]['text':' whether the module was deserialized (from a cache).','line_number':109,'multiline':False]['text':' This flag is only used for testing purposes and is cleared on success or','line_number':113,'multiline':False]['text':' failure. The field is racily polled from various threads.','line_number':114,'multiline':False]['text':' Cached malloc allocation size for GC memory tracking.','line_number':118,'multiline':False]['text':' Instantiate this module with the given imports:','line_number':194,'multiline':False]['text':' Tier-2 compilation may be initiated after the Module is constructed at','line_number':200,'multiline':False]['text':' most once. When tier-2 compilation completes, ModuleGenerator calls','line_number':201,'multiline':False]['text':' finishTier2() from a helper thread, passing tier-variant data which will','line_number':202,'multiline':False]['text':' be installed and made visible.','line_number':203,'multiline':False]['text':' Code caching support.','line_number':212,'multiline':False]['text':' JS API and JS::WasmModule implementation:','line_number':222,'multiline':False]['text':' about:memory reporting:','line_number':227,'multiline':False]['text':' GC malloc memory tracking:','line_number':232,'multiline':False]['text':' Generated code analysis support:','line_number':239,'multiline':False]['text':' JS API implementations:','line_number':247,'multiline':False]['text':' namespace wasm','line_number':251,'multiline':False]['text':' namespace js','line_number':252,'multiline':False]['text':' wasm_module_h','line_number':254,'multiline':False]