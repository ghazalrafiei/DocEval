['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' A JS frame is analogous to a js::InterpreterFrame, representing one','line_number':27,'multiline':False]['text':' scripted function activation. IonJS frames are used by the optimizing','line_number':28,'multiline':False]['text':' compiler.','line_number':29,'multiline':False]['text':' JS frame used by the Baseline Interpreter and Baseline JIT.','line_number':32,'multiline':False]['text':' Frame pushed by Baseline stubs that make non-tail calls, so that the','line_number':35,'multiline':False]['text':' return address -> ICEntry mapping works.','line_number':36,'multiline':False]['text':' The entry frame is the initial prologue block transitioning from the VM','line_number':39,'multiline':False]['text':' into the Ion world.','line_number':40,'multiline':False]['text':' A rectifier frame sits in between two JS frames, adapting argc != nargs','line_number':43,'multiline':False]['text':' mismatches in calls.','line_number':44,'multiline':False]['text':' Ion IC calling a scripted getter/setter or a VMFunction.','line_number':47,'multiline':False]['text':' An exit frame is necessary for transitioning from a JS frame into C++.','line_number':50,'multiline':False]['text':' From within C++, an exit frame is always the last frame in any','line_number':51,'multiline':False]['text':' JitActivation.','line_number':52,'multiline':False]['text':' A bailout frame is a special IonJS jit frame after a bailout, and before','line_number':55,'multiline':False]['text':' the reconstruction of the BaselineJS frame. From within C++, a bailout','line_number':56,'multiline':False]['text':' frame is always the last frame in a JitActivation iff the bailout frame','line_number':57,'multiline':False]['text':' information is recorded on the JitActivation.','line_number':58,'multiline':False]['text':' A wasm to JS frame is constructed during fast calls from wasm to the JS','line_number':61,'multiline':False]['text':' jits, used as a marker to interleave JS jit and wasm frames. From the','line_number':62,'multiline':False]['text':' point of view of JS JITs, this is just another kind of entry frame.','line_number':63,'multiline':False]['text':' A JS to wasm frame is constructed during fast calls from any JS jits to','line_number':66,'multiline':False]['text':' wasm, and is a special kind of exit frame that doesn't have the exit','line_number':67,'multiline':False]['text':' footer. From the point of view of the jit, it can be skipped as an exit.','line_number':68,'multiline':False]['text':' Only read formals (i.e. [0 ... callee()->nargs]','line_number':73,'multiline':False]['text':' Only read overflown args (i.e. [callee()->nargs ... numActuals()]','line_number':76,'multiline':False]['text':' Read all args (i.e. [0 ... numActuals()])','line_number':79,'multiline':False]['text':' Iterate over the JIT stack to assert that all invariants are respected.','line_number':92,'multiline':False]['text':'  - Check that all entry frames are aligned on JitStackAlignment.','line_number':93,'multiline':False]['text':'  - Check that all rectifier frames keep the JitStackAlignment.','line_number':94,'multiline':False]['text':' A JSJitFrameIter can iterate over a linear frame group of JS jit frames','line_number':98,'multiline':False]['text':' only. It will stop at the first frame that is not of the same kind, or at','line_number':99,'multiline':False]['text':' the end of an activation.','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' If you want to handle every kind of frames (including wasm frames), use','line_number':102,'multiline':False]['text':' JitFrameIter. If you want to skip interleaved frames of other kinds, use','line_number':103,'multiline':False]['text':' OnlyJSJitFrameIter.','line_number':104,'multiline':False]['text':' Size of the current Baseline frame. Equivalent to','line_number':113,'multiline':False]['text':' BaselineFrame::debugFrameSize_ in debug builds.','line_number':114,'multiline':False]['text':' See comment above the class.','line_number':124,'multiline':False]['text':' A constructor specialized for jit->wasm frames, which starts at a','line_number':127,'multiline':False]['text':' specific FP.','line_number':128,'multiline':False]['text':' Current frame information.','line_number':136,'multiline':False]['text':' Return the pointer of the JitFrame, the iterator is assumed to be settled','line_number':145,'multiline':False]['text':' on a scripted frame.','line_number':146,'multiline':False]['text':' Returns whether the JS frame has been invalidated and, if so,','line_number':151,'multiline':False]['text':' places the invalidated Ion script in |ionScript|.','line_number':152,'multiline':False]['text':' Returns the address of the next instruction that will execute in this','line_number':192,'multiline':False]['text':' frame, once control returns to this frame.','line_number':193,'multiline':False]['text':' Previous frame information extracted from the current frame.','line_number':196,'multiline':False]['text':' Returns the stack space used by the current frame, in bytes. This does','line_number':201,'multiline':False]['text':' not include the size of its fixed header.','line_number':202,'multiline':False]['text':' Functions used to iterate on frames. When prevType is an entry,','line_number':208,'multiline':False]['text':' the current frame is the last JS Jit frame.','line_number':209,'multiline':False]['text':' Returns the IonScript associated with this JS frame.','line_number':213,'multiline':False]['text':' Returns the IonScript associated with this JS frame; the frame must','line_number':216,'multiline':False]['text':' not be invalidated.','line_number':217,'multiline':False]['text':' Returns the Safepoint associated with this JS frame. Incurs a lookup','line_number':220,'multiline':False]['text':' overhead.','line_number':221,'multiline':False]['text':' Returns the OSI index associated with this JS frame. Incurs a lookup','line_number':224,'multiline':False]['text':' overhead.','line_number':225,'multiline':False]['text':' Returns the Snapshot offset associated with this JS frame. Incurs a','line_number':228,'multiline':False]['text':' lookup overhead.','line_number':229,'multiline':False]['text':' Returns the number of local and expression stack Values for the current','line_number':265,'multiline':False]['text':' Baseline frame.','line_number':266,'multiline':False]['text':' This function isn't used, but we keep it here (debug-only) because it is','line_number':269,'multiline':False]['text':' helpful when chasing issues with the jitcode map.','line_number':270,'multiline':False]['text':' Vector of results of recover instructions.','line_number':322,'multiline':False]['text':' The frame pointer is used as a key to check if the current frame already','line_number':326,'multiline':False]['text':' bailed out.','line_number':327,'multiline':False]['text':' Record if we tried and succeed at allocating and filling the vector of','line_number':330,'multiline':False]['text':' recover instruction results, if needed.  This flag is needed in order to','line_number':331,'multiline':False]['text':' avoid evaluating the recover instruction twice.','line_number':332,'multiline':False]['text':' Reads frame information in snapshot-encoding order (that is, outermost frame','line_number':400,'multiline':False]['text':' to innermost frame).','line_number':401,'multiline':False]['text':' Read the normal value.','line_number':412,'multiline':False]['text':' Read the default value, or the normal value if there is no default.','line_number':415,'multiline':False]['text':' Try to read the normal value if it is readable, otherwise default to','line_number':418,'multiline':False]['text':' the Default value.','line_number':419,'multiline':False]['text':' Read a spilled register from the machine state.','line_number':424,'multiline':False]['text':' Read an uintptr_t from the stack.','line_number':431,'multiline':False]['text':' Handle iterating over RValueAllocations of the snapshots.','line_number':452,'multiline':False]['text':' Used by recover instruction to store the value back into the instruction','line_number':472,'multiline':False]['text':' results array.','line_number':473,'multiline':False]['text':' Exhibits frame properties contained in the snapshot.','line_number':477,'multiline':False]['text':' Inline frames are inlined on calls, which are considered as being','line_number':480,'multiline':False]['text':' resumed on the Call as baseline will push the pc once we return from','line_number':481,'multiline':False]['text':' the call.','line_number':482,'multiline':False]['text':' Read the next instruction available and get ready to either skip it or','line_number':491,'multiline':False]['text':' evaluate it.','line_number':492,'multiline':False]['text':' Skip an Instruction by walking to the next instruction and by skipping','line_number':499,'multiline':False]['text':' all the allocations corresponding to this instruction.','line_number':500,'multiline':False]['text':' Register a vector used for storing the results of the evaluation of','line_number':505,'multiline':False]['text':' recover instructions. This vector should be registered before the','line_number':506,'multiline':False]['text':' beginning of the iteration. This function is in charge of allocating','line_number':507,'multiline':False]['text':' enough space for all instructions results, and return false iff it fails.','line_number':508,'multiline':False]['text':' This function is used internally for computing the result of the recover','line_number':512,'multiline':False]['text':' instructions.','line_number':513,'multiline':False]['text':' Handle iterating over frames of the snapshots.','line_number':518,'multiline':False]['text':' The last instruction is recovering the innermost frame, so as long as','line_number':523,'multiline':False]['text':' there is more instruction there is necesseray more frames.','line_number':524,'multiline':False]['text':' Connect all informations about the current script in order to recover the','line_number':529,'multiline':False]['text':' content of baseline frames.','line_number':530,'multiline':False]['text':' Read the |Normal| value unless it is not available and that the snapshot','line_number':538,'multiline':False]['text':' provides a |Default| value. This is useful to avoid invalidations of the','line_number':539,'multiline':False]['text':' frame while we are only interested in a few properties which are provided','line_number':540,'multiline':False]['text':' by the |Default| value.','line_number':541,'multiline':False]['text':' Assumes that the common frame arguments have already been read.','line_number':565,'multiline':False]['text':' We are not always able to read values from the snapshots, some values','line_number':592,'multiline':False]['text':' such as non-gc things may still be live in registers and cause an','line_number':593,'multiline':False]['text':' error while reading the machine state.','line_number':594,'multiline':False]['text':' Iterate over all the allocations and return only the value of the','line_number':600,'multiline':False]['text':' allocation located at one index.','line_number':601,'multiline':False]['text':' Reads frame information in callstack order (that is, innermost frame to','line_number':609,'multiline':False]['text':' outermost frame).','line_number':610,'multiline':False]['text':' When the inline-frame-iterator is created, this variable is defined to','line_number':617,'multiline':False]['text':' UINT32_MAX. Then the first iteration of findNextFrame, which settle on','line_number':618,'multiline':False]['text':' the innermost frame, is used to update this counter to the number of','line_number':619,'multiline':False]['text':' frames contained in the recover buffer.','line_number':620,'multiline':False]['text':' The |calleeTemplate_| fields contains either the JSFunction or the','line_number':623,'multiline':False]['text':' template from which it is supposed to be cloned. The |calleeRVA_| is an','line_number':624,'multiline':False]['text':' Invalid value allocation, if the |calleeTemplate_| field is the effective','line_number':625,'multiline':False]['text':' JSFunction, and not its template. On the other hand, any other value','line_number':626,'multiline':False]['text':' allocation implies that the |calleeTemplate_| is the template JSFunction','line_number':627,'multiline':False]['text':' from which the effective one would be derived and cached by the Recover','line_number':628,'multiline':False]['text':' instruction result.','line_number':629,'multiline':False]['text':' Register state, used by all snapshot iterators.','line_number':637,'multiline':False]['text':' Due to optimizations, we are not always capable of reading the callee of','line_number':656,'multiline':False]['text':' inlined frames without invalidating the IonCode. This function might','line_number':657,'multiline':False]['text':' return either the effective callee of the JSFunction which might be used','line_number':658,'multiline':False]['text':' to create it.','line_number':659,'multiline':False]['text':'','line_number':660,'multiline':False]['text':' As such, the |calleeTemplate()| can be used to read most of the metadata','line_number':661,'multiline':False]['text':' which are conserved across clones.','line_number':662,'multiline':False]['text':' The number of actual arguments of inline frames is recovered by the','line_number':672,'multiline':False]['text':' iteration process. It is recovered from the bytecode because this','line_number':673,'multiline':False]['text':' property still hold since the for inlined frames. This property does not','line_number':674,'multiline':False]['text':' hold for the parent frame because it can have optimize a call to','line_number':675,'multiline':False]['text':' js_fun_call or js_fun_apply.','line_number':676,'multiline':False]['text':' Read the env chain.','line_number':693,'multiline':False]['text':' Read return value.','line_number':702,'multiline':False]['text':' For now, only support reading new.target when we are reading','line_number':710,'multiline':False]['text':' overflown arguments.','line_number':711,'multiline':False]['text':' Read arguments, which only function frames have.','line_number':716,'multiline':False]['text':' Get the non overflown arguments, which are taken from the inlined','line_number':721,'multiline':False]['text':' frame, because it will have the updated value when JSOp::SetArg is','line_number':722,'multiline':False]['text':' done.','line_number':723,'multiline':False]['text':' There is still a parent frame of this inlined frame.  All','line_number':731,'multiline':False]['text':' arguments (also the overflown) are the last pushed values','line_number':732,'multiline':False]['text':' in the parent frame.  To get the overflown arguments, we','line_number':733,'multiline':False]['text':' need to take them from there.','line_number':734,'multiline':False]['text':' The overflown arguments are not available in current frame.','line_number':736,'multiline':False]['text':' They are the last pushed arguments in the parent frame of','line_number':737,'multiline':False]['text':' this inlined frame.','line_number':738,'multiline':False]['text':' Skip over all slots until we get to the last slots','line_number':745,'multiline':False]['text':' (= arguments slots of callee) the +3 is for [this], [returnvalue],','line_number':746,'multiline':False]['text':' [envchain], and maybe +1 for [argsObj]','line_number':747,'multiline':False]['text':' Get the overflown arguments','line_number':756,'multiline':False]['text':' env chain','line_number':758,'multiline':False]['text':' return value','line_number':759,'multiline':False]['text':' There is no parent frame to this inlined frame, we can read','line_number':766,'multiline':False]['text':' from the frame's Value vector directly.','line_number':767,'multiline':False]['text':' At this point we've read all the formals in s, and can read the','line_number':779,'multiline':False]['text':' locals.','line_number':780,'multiline':False]['text':' envChain','line_number':806,'multiline':False]['text':' envChain','line_number':814,'multiline':False]['text':' return value','line_number':817,'multiline':False]['text':' Arguments object.','line_number':820,'multiline':False]['text':' Inline frame number, 0 for the outermost (non-inlined) frame.','line_number':839,'multiline':False]['text':' namespace jit','line_number':851,'multiline':False]['text':' namespace js','line_number':852,'multiline':False]['text':' jit_JSJitFrameIter_h ','line_number':854,'multiline':True]