['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]['text':' MOZ_ASSERT','line_number':10,'multiline':False]['text':' mozilla::{Maybe, Nothing}','line_number':11,'multiline':False]['text':' mozilla::MallocSizeOf','line_number':12,'multiline':False]['text':' mozilla::Range','line_number':13,'multiline':False]['text':' mozilla::Span','line_number':14,'multiline':False]['text':' mozilla::Variant','line_number':15,'multiline':False]['text':' size_t','line_number':17,'multiline':False]['text':' char16_t, uint8_t, uint16_t, uint32_t','line_number':18,'multiline':False]['text':' AbstractScopePtr, ScopeIndex','line_number':20,'multiline':False]['text':' FunctionSyntaxKind','line_number':21,'multiline':False]['text':' ObjLiteralStencil','line_number':22,'multiline':False]['text':' TaggedParserAtomIndex','line_number':23,'multiline':False]['text':' ScriptIndex','line_number':24,'multiline':False]['text':' TypedIndex','line_number':25,'multiline':False]['text':' SystemAllocPolicy','line_number':26,'multiline':False]['text':' AtomicRefCounted','line_number':27,'multiline':False]['text':' JS::RegExpFlags','line_number':28,'multiline':False]['text':' Handle','line_number':29,'multiline':False]['text':' JSContext','line_number':30,'multiline':False]['text':' js::UniquePtr','line_number':31,'multiline':False]['text':' UniqueTwoByteChars','line_number':32,'multiline':False]['text':' js::Vector','line_number':33,'multiline':False]['text':' DuplicateString','line_number':34,'multiline':False]['text':' ParseBigIntLiteral','line_number':35,'multiline':False]['text':' FunctionFlags','line_number':36,'multiline':False]['text':' GeneratorKind, FunctionAsyncKind','line_number':37,'multiline':False]['text':' Scope, BaseScopeData, FunctionScope, LexicalScope, VarScope, GlobalScope, EvalScope, ModuleScope','line_number':38,'multiline':False]['text':' ScopeKind','line_number':39,'multiline':False]['text':' ImmutableScriptFlags, GCThingIndex, js::SharedImmutableScriptData, MemberInitializers, SourceExtent','line_number':40,'multiline':False]['text':' ImmutableScriptFlagsEnum','line_number':41,'multiline':False]['text':' [SMDOC] Script Stencil (Frontend Representation)','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':' Stencils are the set of data structures capturing the result of parsing and','line_number':76,'multiline':False]['text':' bytecode emission. The Stencil format is a precursor format that is then used','line_number':77,'multiline':False]['text':' to allocate the corresponding scripts on the GC heap that will be used for','line_number':78,'multiline':False]['text':' execution. By decoupling from the GC and other runtime systems, robust','line_number':79,'multiline':False]['text':' caching and speculation systems can be built that are more thread-agnostic','line_number':80,'multiline':False]['text':' and flexible.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' See: https://bugzil.la/stencil','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' There are numerous data structures that make up the Stencil format. The','line_number':85,'multiline':False]['text':' structures are designed for fast serialization to and from disk by preferring','line_number':86,'multiline':False]['text':' indices over pointers and vectors instead of graphs to allow bulk operations.','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':'','line_number':89,'multiline':False]['text':' ParserAtom','line_number':90,'multiline':False]['text':' ----------','line_number':91,'multiline':False]['text':' Our parser relies on atomized strings as part of its normal operations and so','line_number':92,'multiline':False]['text':' a `ParserAtom` type exists that mirrors the `JSAtom` type but does not','line_number':93,'multiline':False]['text':' involve the garbage collector. This is possible because the lifetime of these','line_number':94,'multiline':False]['text':' ParserAtoms is the lifetime of the Stencil that makes use of them and we do','line_number':95,'multiline':False]['text':' not need finer grained collection.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' ScriptStencil','line_number':99,'multiline':False]['text':' -------------','line_number':100,'multiline':False]['text':' The key structures generated by parsing are instances of `ScriptStencil`.','line_number':101,'multiline':False]['text':' There is a `ScriptStencil` for the top-level script and for each inner','line_number':102,'multiline':False]['text':' function. It contains information needed to create the `JSFunction` (if it is','line_number':103,'multiline':False]['text':' a function) and the `BaseScript` (if not asm.js) and may or may not have','line_number':104,'multiline':False]['text':' bytecode. Each `ScriptStencil` may also reference the following Stencil types','line_number':105,'multiline':False]['text':' (similar to the `BaseScript::gcthings()` list):','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':'   * ParserAtom','line_number':108,'multiline':False]['text':'   * ScopeStencil','line_number':109,'multiline':False]['text':'   * RegExpStencil','line_number':110,'multiline':False]['text':'   * BigIntStencil','line_number':111,'multiline':False]['text':'   * ObjLiteralStencil','line_number':112,'multiline':False]['text':'   * StencilModuleMetadata','line_number':113,'multiline':False]['text':'','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' CompilationStencil','line_number':116,'multiline':False]['text':' ------------------','line_number':117,'multiline':False]['text':' Parsing a single JavaScript file may generate a tree of `ScriptStencil` that','line_number':118,'multiline':False]['text':' we then package up into the `CompilationStencil` type. This contains a series','line_number':119,'multiline':False]['text':' of vectors segregated by stencil type for fast processing. Delazifying a','line_number':120,'multiline':False]['text':' function will generate its bytecode but some fields remain unchanged from the','line_number':121,'multiline':False]['text':' initial lazy parse.','line_number':122,'multiline':False]['text':'','line_number':123,'multiline':False]['text':' When we delazify a function that was lazily parsed, we generate a new Stencil','line_number':124,'multiline':False]['text':' at the point too. These delazifications can be merged into the Stencil of','line_number':125,'multiline':False]['text':' the initial parse.','line_number':126,'multiline':False]['text':'','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' CompilationGCOutput','line_number':129,'multiline':False]['text':' -------------------','line_number':130,'multiline':False]['text':' When a Stencil is instantiated the equivalent script objects are allocated on','line_number':131,'multiline':False]['text':' the GC heap and their pointers are collected into the `CompilationGCOutput`','line_number':132,'multiline':False]['text':' structure. This is only used temporarily during instantiation.','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':'','line_number':135,'multiline':False]['text':' CompilationState','line_number':136,'multiline':False]['text':' ----------------','line_number':137,'multiline':False]['text':' This is another temporary structure used by the parser while the Stencil is','line_number':138,'multiline':False]['text':' being generated. Once the `CompilationStencil` is complete, this can be','line_number':139,'multiline':False]['text':' released.','line_number':140,'multiline':False]['text':' Typed indices for the different stencil elements in the compilation result.','line_number':142,'multiline':False]['text':' Index into {ExtensibleCompilationStencil,CompilationStencil}.gcThingData.','line_number':147,'multiline':False]['text':' A syntax-checked regular expression string.','line_number':157,'multiline':False]['text':' Use uint32_t to make this struct fully-packed.','line_number':162,'multiline':False]['text':' This is used by `Reflect.parse` when we need the RegExpObject but are not','line_number':178,'multiline':False]['text':' doing a complete instantiation of the CompilationStencil.','line_number':179,'multiline':False]['text':' This owns a set of characters guaranteed to parse into a BigInt via','line_number':191,'multiline':False]['text':' ParseBigIntLiteral. Used to avoid allocating the BigInt on the','line_number':192,'multiline':False]['text':' GC heap during parsing.','line_number':193,'multiline':False]['text':' Source of the BigInt literal.','line_number':197,'multiline':False]['text':' It's not null-terminated, and also trailing 'n' suffix is not included.','line_number':198,'multiline':False]['text':' The enclosing scope. Valid only if HasEnclosing flag is set.','line_number':234,'multiline':False]['text':' compilation applies.','line_number':235,'multiline':False]['text':' First frame slot to use, or LOCALNO_LIMIT if none are allowed.','line_number':238,'multiline':False]['text':' The number of environment shape's slots.  Valid only if','line_number':241,'multiline':False]['text':' HasEnvironmentShape flag is set.','line_number':242,'multiline':False]['text':' Canonical function if this is a FunctionScope. Valid only if','line_number':245,'multiline':False]['text':' kind_ is ScopeKind::Function.','line_number':246,'multiline':False]['text':' The kind determines the corresponding BaseParserScopeData.','line_number':249,'multiline':False]['text':' True if this scope has enclosing scope.','line_number':252,'multiline':False]['text':' If true, an environment Shape must be created. The shape itself may','line_number':255,'multiline':False]['text':' have no slots if the environment may be extensible later.','line_number':256,'multiline':False]['text':' True if this is a FunctionScope for an arrow function.','line_number':259,'multiline':False]['text':' To make this struct packed, add explicit field for padding.','line_number':264,'multiline':False]['text':' For XDR only.','line_number':268,'multiline':False]['text':' Silence -Wunused-private-field warnings.','line_number':285,'multiline':False]['text':' Create ScopeStencil with `args`, and append ScopeStencil and `data` to','line_number':290,'multiline':False]['text':' `compilationState`, and return the index of them as `indexOut`.','line_number':291,'multiline':False]['text':' Check if scope kind alone means we have an env shape, and','line_number':374,'multiline':False]['text':' otherwise check if we have one created.','line_number':375,'multiline':False]['text':' Transfer ownership into a new UniquePtr.','line_number':397,'multiline':False]['text':' See JSOp::Lambda for interepretation of this index.','line_number':456,'multiline':False]['text':' Common type for ImportEntry / ExportEntry / ModuleRequest within frontend. We','line_number':461,'multiline':False]['text':' use a shared stencil class type to simplify serialization.','line_number':462,'multiline':False]['text':'','line_number':463,'multiline':False]['text':' https://tc39.es/ecma262/#importentry-record','line_number':464,'multiline':False]['text':' https://tc39.es/ecma262/#exportentry-record','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':' Note: We subdivide the spec's ExportEntry into ExportAs / ExportFrom forms','line_number':467,'multiline':False]['text':'       for readability.','line_number':468,'multiline':False]['text':' clang-format off','line_number':471,'multiline':False]['text':'','line_number':472,'multiline':False]['text':'              | ModuleRequest | ImportEntry | ImportNamespaceEntry | ExportAs | ExportFrom | ExportNamespaceFrom | ExportBatchFrom |','line_number':473,'multiline':False]['text':'              |--------------------------------------------------------------------------------------------------------------------|','line_number':474,'multiline':False]['text':' specifier    | required      | required    | required             | null     | required   | required            | required        |','line_number':475,'multiline':False]['text':' localName    | null          | required    | required             | required | null       | null                | null            |','line_number':476,'multiline':False]['text':' importName   | null          | required    | null                 | null     | required   | null                | null            |','line_number':477,'multiline':False]['text':' exportName   | null          | null        | null                 | required | required   | required            | null            |','line_number':478,'multiline':False]['text':'','line_number':479,'multiline':False]['text':' clang-format on','line_number':480,'multiline':False]['text':' Location used for error messages. If this is for a module request entry','line_number':486,'multiline':False]['text':' then it is the module specifier string, otherwise the import/export spec','line_number':487,'multiline':False]['text':' that failed. Exports may not fill these fields if an error cannot be','line_number':488,'multiline':False]['text':' generated such as `export let x;`.','line_number':489,'multiline':False]['text':' For XDR only.','line_number':498,'multiline':False]['text':' Metadata generated by parsing module scripts, including import/export tables.','line_number':572,'multiline':False]['text':' Set to true if the module has a top-level await keyword.','line_number':584,'multiline':False]['text':' As an alternative to a ScopeIndex (which references a ScopeStencil), we may','line_number':609,'multiline':False]['text':' instead refer to an existing scope from GlobalObject::emptyGlobalScope().','line_number':610,'multiline':False]['text':'','line_number':611,'multiline':False]['text':' NOTE: This is only used for the self-hosting global.','line_number':612,'multiline':False]['text':' Things pointed by this index all end up being baked into GC things as part','line_number':615,'multiline':False]['text':' of stencil instantiation.','line_number':616,'multiline':False]['text':'','line_number':617,'multiline':False]['text':' 0x0000_0000  Null','line_number':618,'multiline':False]['text':' 0x1YYY_YYYY  28-bit ParserAtom','line_number':619,'multiline':False]['text':' 0x2YYY_YYYY  Well-known/static atom (See TaggedParserAtomIndex)','line_number':620,'multiline':False]['text':' 0x3YYY_YYYY  28-bit BigInt','line_number':621,'multiline':False]['text':' 0x4YYY_YYYY  28-bit ObjLiteral','line_number':622,'multiline':False]['text':' 0x5YYY_YYYY  28-bit RegExp','line_number':623,'multiline':False]['text':' 0x6YYY_YYYY  28-bit Scope','line_number':624,'multiline':False]['text':' 0x7YYY_YYYY  28-bit Function','line_number':625,'multiline':False]['text':' 0x8000_0000  EmptyGlobalScope','line_number':626,'multiline':False]['text':' Data generated by frontend that will be used to create a js::BaseScript.','line_number':740,'multiline':False]['text':' Fields for BaseScript.','line_number':745,'multiline':False]['text':' Used by:','line_number':746,'multiline':False]['text':'   * Global script','line_number':747,'multiline':False]['text':'   * Eval','line_number':748,'multiline':False]['text':'   * Module','line_number':749,'multiline':False]['text':'   * non-lazy Function (except asm.js module)','line_number':750,'multiline':False]['text':'   * lazy Function (cannot be asm.js module)','line_number':751,'multiline':False]['text':' GCThings are stored into','line_number':753,'multiline':False]['text':' {ExtensibleCompilationStencil,CompilationStencil}.gcThingData,','line_number':754,'multiline':False]['text':' in [gcThingsOffset, gcThingsOffset + gcThingsLength) range.','line_number':755,'multiline':False]['text':' Fields for JSFunction.','line_number':759,'multiline':False]['text':' Used by:','line_number':760,'multiline':False]['text':'   * non-lazy Function','line_number':761,'multiline':False]['text':'   * lazy Function','line_number':762,'multiline':False]['text':'   * asm.js module','line_number':763,'multiline':False]['text':' The explicit or implicit name of the function. The FunctionFlags indicate','line_number':765,'multiline':False]['text':' the kind of name.','line_number':766,'multiline':False]['text':' If this ScriptStencil refers to a lazy child of the function being','line_number':769,'multiline':False]['text':' compiled, this field holds the child's immediately enclosing scope's index.','line_number':770,'multiline':False]['text':' Once compilation succeeds, we will store the scope pointed by this in the','line_number':771,'multiline':False]['text':' child's BaseScript.  (Debugger may become confused if lazy scripts refer to','line_number':772,'multiline':False]['text':' partially initialized enclosing scopes, so we must avoid storing the','line_number':773,'multiline':False]['text':' scope in the BaseScript until compilation has completed','line_number':774,'multiline':False]['text':' successfully.)','line_number':775,'multiline':False]['text':'','line_number':776,'multiline':False]['text':' OR','line_number':777,'multiline':False]['text':'','line_number':778,'multiline':False]['text':' This may be used for self-hosting canonical name (TaggedParserAtomIndex).','line_number':779,'multiline':False]['text':' See: `FunctionFlags`.','line_number':782,'multiline':False]['text':' This is set by the BytecodeEmitter of the enclosing script when a reference','line_number':785,'multiline':False]['text':' to this function is generated.','line_number':786,'multiline':False]['text':' If this is for the root of delazification, this represents','line_number':789,'multiline':False]['text':' MutableScriptFlagsEnum::AllowRelazify value of the script *after*','line_number':790,'multiline':False]['text':' delazification.','line_number':791,'multiline':False]['text':' False otherwise.','line_number':792,'multiline':False]['text':' Set if this is non-lazy script and shared data is created.','line_number':795,'multiline':False]['text':' The shared data is stored into CompilationStencil.sharedData.','line_number':796,'multiline':False]['text':' True if this script is lazy function and has enclosing scope.  In that','line_number':799,'multiline':False]['text':' case, `enclosingScopeOrCanonicalName` will hold the ScopeIndex.','line_number':800,'multiline':False]['text':' True if this script is a self-hosted function with a canonical name','line_number':803,'multiline':False]['text':' explicitly set. In that case, `enclosingScopeOrCanonicalName` will hold the','line_number':804,'multiline':False]['text':' TaggedParserAtomIndex.','line_number':805,'multiline':False]['text':' End of fields.','line_number':810,'multiline':False]['text':' In addition to ScriptStencil, data generated only while initial-parsing.','line_number':895,'multiline':False]['text':' See `BaseScript::immutableFlags_`.','line_number':898,'multiline':False]['text':' The location of this script in the source.','line_number':901,'multiline':False]['text':' See `PrivateScriptData::memberInitializers_`.','line_number':904,'multiline':False]['text':' This data only valid when `UseMemberInitializers` script flag is true.','line_number':905,'multiline':False]['text':' See `JSFunction::nargs_`.','line_number':908,'multiline':False]['text':' To make this struct packed, add explicit field for padding.','line_number':911,'multiline':False]['text':' namespace frontend ','line_number':952,'multiline':True]['text':' namespace js ','line_number':953,'multiline':True]['text':' frontend_Stencil_h ','line_number':955,'multiline':True]