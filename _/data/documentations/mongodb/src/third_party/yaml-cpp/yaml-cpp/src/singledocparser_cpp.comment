['text':' IWYU pragma: keep','line_number':5,'multiline':False]['text':' IWYU pragma: keep','line_number':12,'multiline':False]['text':' HandleDocument','line_number':26,'multiline':False]['text':' . Handles the next document','line_number':27,'multiline':False]['text':' . Throws a ParserException on error.','line_number':28,'multiline':False]['text':' guaranteed that there are tokens','line_number':30,'multiline':False]['text':' eat doc start','line_number':35,'multiline':False]['text':' recurse!','line_number':39,'multiline':False]['text':' and finally eat any doc ends we see','line_number':44,'multiline':False]['text':' an empty node *is* a possibility','line_number':50,'multiline':False]['text':' save location','line_number':56,'multiline':False]['text':' special case: a value node by itself must be a map, with no header','line_number':59,'multiline':False]['text':' special case: an alias node','line_number':67,'multiline':False]['text':' add non-specific tags','line_number':90,'multiline':False]['text':' now split based on what kind of node we should be','line_number':94,'multiline':False]['text':' compact maps can only go in a flow sequence','line_number':122,'multiline':False]['text':' split based on start token','line_number':142,'multiline':False]['text':' eat start token','line_number':156,'multiline':False]['text':' check for null','line_number':172,'multiline':False]['text':' eat start token','line_number':189,'multiline':False]['text':' first check for end','line_number':197,'multiline':False]['text':' then read the node','line_number':203,'multiline':False]['text':' now eat the separator (or could be a sequence end, which we ignore - but','line_number':209,'multiline':False]['text':' if it's neither, then it's a bad node)','line_number':210,'multiline':False]['text':' split based on start token','line_number':222,'multiline':False]['text':' eat start token','line_number':242,'multiline':False]['text':' grab key (if non-null)','line_number':260,'multiline':False]['text':' now grab value (optional)','line_number':268,'multiline':False]['text':' eat start token','line_number':281,'multiline':False]['text':' first check for end','line_number':291,'multiline':False]['text':' grab key (if non-null)','line_number':297,'multiline':False]['text':' now grab value (optional)','line_number':305,'multiline':False]['text':' now eat the separator (or could be a map end, which we ignore - but if','line_number':316,'multiline':False]['text':' it's neither, then it's a bad node)','line_number':317,'multiline':False]['text':' . Single "key: value" pair in a flow sequence','line_number':328,'multiline':False]['text':' grab key','line_number':332,'multiline':False]['text':' now grab value (optional)','line_number':337,'multiline':False]['text':' . Single ": value" pair in a flow sequence','line_number':348,'multiline':False]['text':' null key','line_number':352,'multiline':False]['text':' grab value','line_number':355,'multiline':False]['text':' ParseProperties','line_number':362,'multiline':False]['text':' . Grabs any tag or anchor tokens and deals with them.','line_number':363,'multiline':False]['text':' namespace YAML','line_number':422,'multiline':False]