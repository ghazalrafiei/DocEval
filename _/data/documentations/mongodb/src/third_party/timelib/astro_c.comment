['text':'
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2019 Derick Rethans
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':'
   | Algorithms are taken from a public domain source by Paul             |
   | Schlyter, who wrote this in December 1992                            |
 ','line_number':24,'multiline':True]['text':' The trigonometric functions in degrees ','line_number':43,'multiline':True]['text':' Following are some macros around the "workhorse" function __daylen__ ','line_number':55,'multiline':True]['text':' They mainly fill in the desired values for the reference altitude    ','line_number':56,'multiline':True]['text':' below the horizon, and also selects whether this altitude should     ','line_number':57,'multiline':True]['text':' refer to the Sun's center or its upper limb.                         ','line_number':58,'multiline':True]['text':'****************************************************************','line_number':63,'multiline':True]['text':' This function reduces any angle to within the first revolution ','line_number':64,'multiline':True]['text':' by subtracting or adding even multiples of 360.0 until the     ','line_number':65,'multiline':True]['text':' result is >= 0.0 and < 360.0                                   ','line_number':66,'multiline':True]['text':'****************************************************************','line_number':67,'multiline':True]['text':'***************************************','line_number':71,'multiline':True]['text':' Reduce angle to within 0..360 degrees ','line_number':72,'multiline':True]['text':'***************************************','line_number':73,'multiline':True]['text':'*******************************************','line_number':79,'multiline':True]['text':' Reduce angle to within +180..+180 degrees ','line_number':80,'multiline':True]['text':'*******************************************','line_number':81,'multiline':True]['text':'*****************************************************************','line_number':87,'multiline':True]['text':' This function computes GMST0, the Greenwich Mean Sidereal Time  ','line_number':88,'multiline':True]['text':' at 0h UT (i.e. the sidereal time at the Greenwhich meridian at  ','line_number':89,'multiline':True]['text':' 0h UT).  GMST is then the sidereal time at Greenwich at any     ','line_number':90,'multiline':True]['text':' time of the day.  I've generalized GMST0 as well, and define it ','line_number':91,'multiline':True]['text':' as:  GMST0 = GMST - UT  --  this allows GMST0 to be computed at ','line_number':92,'multiline':True]['text':' other times than 0h UT as well.  While this sounds somewhat     ','line_number':93,'multiline':True]['text':' contradictory, it is very practical:  instead of computing      ','line_number':94,'multiline':True]['text':' GMST like:                                                      ','line_number':95,'multiline':True]['text':'                                                                 ','line_number':96,'multiline':True]['text':'  GMST = (GMST0) + UT * (366.2422/365.2422)                      ','line_number':97,'multiline':True]['text':'                                                                 ','line_number':98,'multiline':True]['text':' where (GMST0) is the GMST last time UT was 0 hours, one simply  ','line_number':99,'multiline':True]['text':' computes:                                                       ','line_number':100,'multiline':True]['text':'                                                                 ','line_number':101,'multiline':True]['text':'  GMST = GMST0 + UT                                              ','line_number':102,'multiline':True]['text':'                                                                 ','line_number':103,'multiline':True]['text':' where GMST0 is the GMST "at 0h UT" but at the current moment!   ','line_number':104,'multiline':True]['text':' Defined in this way, GMST0 will increase with about 4 min a     ','line_number':105,'multiline':True]['text':' day.  It also happens that GMST0 (in degrees, 1 hr = 15 degr)   ','line_number':106,'multiline':True]['text':' is equal to the Sun's mean longitude plus/minus 180 degrees!    ','line_number':107,'multiline':True]['text':' (if we neglect aberration, which amounts to 20 seconds of arc   ','line_number':108,'multiline':True]['text':' or 1.33 seconds of time)                                        ','line_number':109,'multiline':True]['text':'                                                                 ','line_number':110,'multiline':True]['text':'*****************************************************************','line_number':111,'multiline':True]['text':' Sidtime at 0h UT = L (Sun's mean longitude) + 180.0 degr  ','line_number':116,'multiline':True]['text':' L = M + w, as defined in sunpos().  Since I'm too lazy to ','line_number':117,'multiline':True]['text':' add these numbers, I'll let the C compiler do it for me.  ','line_number':118,'multiline':True]['text':' Any decent C compiler will add the constants at compile   ','line_number':119,'multiline':True]['text':' time, imposing no runtime or code overhead.               ','line_number':120,'multiline':True]['text':' This function computes the Sun's position at any instant ','line_number':125,'multiline':True]['text':'****************************************************','line_number':127,'multiline':True]['text':' Computes the Sun's ecliptic longitude and distance ','line_number':128,'multiline':True]['text':' at an instant given in d, number of days since     ','line_number':129,'multiline':True]['text':' 2000 Jan 0.0.  The Sun's ecliptic latitude is not  ','line_number':130,'multiline':True]['text':' computed, since it's always very near 0.           ','line_number':131,'multiline':True]['text':'****************************************************','line_number':132,'multiline':True]['text':' Mean anomaly of the Sun ','line_number':135,'multiline':True]['text':' Mean longitude of perihelion ','line_number':136,'multiline':True]['text':' Note: Sun's mean longitude = M + w ','line_number':137,'multiline':True]['text':' Eccentricity of Earth's orbit ','line_number':138,'multiline':True]['text':' Eccentric anomaly ','line_number':139,'multiline':True]['text':' x, y coordinates in orbit ','line_number':140,'multiline':True]['text':' True anomaly ','line_number':141,'multiline':True]['text':' Compute mean elements ','line_number':143,'multiline':True]['text':' Compute true longitude and radius vector ','line_number':148,'multiline':True]['text':' Solar distance ','line_number':152,'multiline':True]['text':' True anomaly ','line_number':153,'multiline':True]['text':' True solar longitude ','line_number':154,'multiline':True]['text':' Make it 0..360 degrees ','line_number':156,'multiline':True]['text':' Compute Sun's ecliptical coordinates ','line_number':164,'multiline':True]['text':' Compute ecliptic rectangular coordinates (z=0) ','line_number':167,'multiline':True]['text':' Compute obliquity of ecliptic (inclination of Earth's axis) ','line_number':171,'multiline':True]['text':' Convert to equatorial rectangular coordinates - x is unchanged ','line_number':174,'multiline':True]['text':' Convert to spherical coordinates ','line_number':178,'multiline':True]['text':'*
 * Note: timestamp = unixtimestamp (NEEDS to be 00:00:00 UT)
 *       Eastern longitude positive, Western longitude negative
 *       Northern latitude positive, Southern latitude negative
 *       The longitude value IS critical in this function!
 *       altit = the altitude which the Sun should cross
 *               Set to -35/60 degrees for rise/set, -6 degrees
 *               for civil, -12 degrees for nautical and -18
 *               degrees for astronomical twilight.
 *         upper_limb: non-zero -> upper limb, zero -> center
 *               Set to non-zero (e.g. 1) when computing rise/set
 *               times, and to zero when computing start/end of
 *               twilight.
 *        *rise = where to store the rise time
 *        *set  = where to store the set  time
 *                Both times are relative to the specified altitude,
 *                and thus this function can be used to compute
 *                various twilight times, as well as rise/set times
 * Return value:  0 = sun rises/sets this day, times stored at
 *                    *trise and *tset.
 *               +1 = sun above the specified "horizon" 24 hours.
 *                    *trise set to time when the sun is at south,
 *                    minus 12 hours while *tset is set to the south
 *                    time plus 12 hours. "Day" length = 24 hours
 *               -1 = sun is below the specified "horizon" 24 hours
 *                    "Day" length = 0 hours, *trise and *tset are
 *                    both set to the time when the sun is at south.
 *
 ','line_number':183,'multiline':True]['text':' Days since 2000 Jan 0.0 (negative before) ','line_number':214,'multiline':True]['text':' Solar distance, astronomical units ','line_number':215,'multiline':True]['text':' Sun's Right Ascension ','line_number':216,'multiline':True]['text':' Sun's declination ','line_number':217,'multiline':True]['text':' Sun's apparent radius ','line_number':218,'multiline':True]['text':' Diurnal arc ','line_number':219,'multiline':True]['text':' Time when Sun is at south ','line_number':220,'multiline':True]['text':' Local sidereal time ','line_number':221,'multiline':True]['text':' Return cde from function - usually 0 ','line_number':225,'multiline':True]['text':' Normalize time ','line_number':227,'multiline':True]['text':' Calculate TS belonging to UTC 00:00 of the current day, for input into
	 * the algorithm ','line_number':233,'multiline':True]['text':' Compute d of 12h local mean solar time ','line_number':242,'multiline':True]['text':' Compute local sidereal time of this moment ','line_number':246,'multiline':True]['text':' Compute Sun's RA + Decl at this moment ','line_number':249,'multiline':True]['text':' Compute time when Sun is at south - in hours UT ','line_number':252,'multiline':True]['text':' Compute the Sun's apparent radius, degrees ','line_number':255,'multiline':True]['text':' Do correction to upper limb, if necessary ','line_number':258,'multiline':True]['text':' Compute the diurnal arc that the Sun traverses to reach ','line_number':263,'multiline':True]['text':' the specified altitude altit: ','line_number':264,'multiline':True]['text':' Sun always below altit ','line_number':271,'multiline':True]['text':' Sun always above altit ','line_number':276,'multiline':True]['text':' The diurnal arc, hours ','line_number':281,'multiline':True]['text':' Store rise and set times - as Unix Timestamp ','line_number':283,'multiline':True]['text':' Kill temporary time and restore original sse ','line_number':292,'multiline':True]