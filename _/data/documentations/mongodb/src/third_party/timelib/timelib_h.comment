['text':'
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2022 Derick Rethans
 * Copyright (c) 2018,2021 MongoDB, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' 1=Jn, 2=n, 3=Mm.w.d','line_number':157,'multiline':False]['text':' index into tz->type','line_number':179,'multiline':False]['text':' index into tz->type','line_number':180,'multiline':False]['text':' Years, Months and Days ','line_number':224,'multiline':True]['text':' Hours, mInutes and Seconds ','line_number':225,'multiline':True]['text':' Microseconds ','line_number':226,'multiline':True]['text':' Stores the day in 'next monday' ','line_number':228,'multiline':True]['text':' 0: the current day should *not* be counted when advancing forwards; 1: the current day *should* be counted ','line_number':229,'multiline':True]['text':' Whether the difference should be inverted ','line_number':232,'multiline':True]['text':' Contains the number of *days*, instead of Y-M-D differences ','line_number':233,'multiline':True]['text':' Year, Month, Day ','line_number':252,'multiline':True]['text':' Hour, mInute, Second ','line_number':253,'multiline':True]['text':' Microseconds ','line_number':254,'multiline':True]['text':' UTC offset in seconds ','line_number':255,'multiline':True]['text':' Timezone abbreviation (display only) ','line_number':256,'multiline':True]['text':' Timezone structure ','line_number':257,'multiline':True]['text':' Flag if we were parsing a DST zone ','line_number':258,'multiline':True]['text':' Seconds since epoch ','line_number':261,'multiline':True]['text':' !0 if the sse member is up to date with the date/time members ','line_number':265,'multiline':True]['text':' !0 if the date/time members are up to date with the sse member ','line_number':266,'multiline':True]['text':'  1 if the current struct represents localtime, 0 if it is in GMT ','line_number':267,'multiline':True]['text':'  1 time offset,
	                              *  3 TimeZone identifier,
	                              *  2 TimeZone abbreviation ','line_number':268,'multiline':True]['text':' An entry for each of these error codes is also in the
 * timelib_error_messages array in timelib.c.
 * Codes 0x00, 0x07, and 0x09 are warnings only. ','line_number':383,'multiline':True]['text':' Warns if the file is SLIM, but we can't read it ','line_number':393,'multiline':True]['text':' Warns if the POSIX string is empty, but still produces results ','line_number':395,'multiline':True]['text':' Format speciifiers must be preceded by 'prefix_char' if not '\0'. ','line_number':452,'multiline':True]['text':' Function pointers ','line_number':456,'multiline':True]['text':' From dow.c ','line_number':459,'multiline':True]['text':' Calculates the day of the week from y, m, and d. 0=Sunday..6=Saturday ','line_number':460,'multiline':True]['text':' Calculates the day of the ISO week from y, m, and d. 1=Monday, 7=Sunday ','line_number':463,'multiline':True]['text':' Calculates the day of the year according to y-m-d. 0=Jan 1st..364/365=Dec
 * 31st ','line_number':466,'multiline':True]['text':' Calculates the day of the year according to y-w-dow. 0..364/365 ','line_number':470,'multiline':True]['text':' Calculates the number of days in month m for year y. 28..31 ','line_number':473,'multiline':True]['text':' Calculates the ISO year and week from y, m, and d, into iw and iy ','line_number':476,'multiline':True]['text':' Calculates the ISO year, week, and day of week from y, m, and d, into iy,
 * iw, and id ','line_number':479,'multiline':True]['text':' Calculates the year, month, and day from iy, iw, and iw, into y, m, and d ','line_number':483,'multiline':True]['text':' Returns true if h, i and s fit in the range 00:00:00..23:59:59, false
 * otherwise ','line_number':486,'multiline':True]['text':' Returns true if m fits in the range 1..12, and d fits in the range
 * 1..<days-in-month> for year y ','line_number':490,'multiline':True]['text':' From parse_date.re ','line_number':494,'multiline':True]['text':' Parses the date/time string in 's' with length 'len' into the constituent
 * parts of timelib_time*.
 *
 * Depending on the contents of the string 's', not all elements might be
 * filled. You can check whether a specific element has been parsed by
 * comparing with the TIMELIB_UNSET define.
 *
 * If errors occur, this function keeps already parsed elements in the
 * returned timelib_time* value.
 *
 * If the **errors points to a timelib_error_container variable, warnings
 * and errors will be recorded. You are responsible for freeing the stored
 * information with timelib_error_container_dtor(). To see whether errors have
 * occurred, inspect errors->errors_count. To see whether warnings have occurred,
 * inspect errors->warnings_count.
 *
 * The returned timelib_time* value is dynamically allocated and should be
 * freed with timelib_time_dtor().
 ','line_number':496,'multiline':True]['text':' Parses the date/time string in 's' with length 'len' into the constituent
 * parts of timelib_time* according to the format in 'format'.
 *
 * Depending on the contents of the string 's', not all elements might be
 * filled. You can check whether a specific element has been parsed by
 * comparing with the TIMELIB_UNSET define.
 *
 * If errors occur, this function keeps already parsed elements in the
 * returned timelib_time* value.
 *
 * If the **errors points to a timelib_error_container variable, warnings
 * and errors will be recorded. You are responsible for freeing the stored
 * information with timelib_error_container_dtor(). To see whether errors have
 * occurred, inspect errors->errors_count. To see whether warnings have occurred,
 * inspect errors->warnings_count.
 *
 * The returned timelib_time* value is dynamically allocated and should be
 * freed with timelib_time_dtor().
 ','line_number':517,'multiline':True]['text':' Parses the date/time string in 's' with length 'len' into the constituent
 * parts of timelib_time* according to the format in 'format' with format
 * specifier configuration 'format_config'.
 *
 * 'format_map' is an array of pairs, with the first element being the format
 * specifier as a character and the second element corresponds to the
 * representation of the specifier from the enum list
 * 'timelib_format_specifier_code'.
 *
 * Note: 'format_map' must be terminated with specifier '\0' to indicate to the
 * parser that there are no more format specifiers in the list.
 ','line_number':538,'multiline':True]['text':' Fills the gaps in the parsed timelib_time with information from the reference date/time in 'now'
 *
 * If any of the 'parsed' y, m, d, h, i or s parameters is unset (TIMELIB_UNSET):
 * - if microtime (us) is unset, then the us of the parsed time is set to 0.
 * - else if microtime (us) is unset and 'now'->'us' is set, use it, otherwise use 0.
 *
 * For either of the 'parsed' y, m, d, h, i, s, z (utc offset in seconds) or
 * dst is unset, set it to the corresponding value in 'now' if set, otherwise
 * set it to 0.
 *
 * It duplicates tz_abbr if unset in 'parsed' but set in 'now'.
 *
 * It duplicates tz_info if unset in 'parsed', but set in 'now' unless
 * TIMELIB_NO_CLONE is passed, in which case only the pointer in 'parsed' is
 * set to 'now'.
 *
 * If the option TIMELIB_OVERRIDE_TIME is passed and the parsed date/time has
 * no time portion, the function will ignore the time aspect in 'now' and
 * instead fill it with zeros.
 ','line_number':552,'multiline':True]['text':' Tries to convert a time zone abbreviation, gmtoffset and/or isdst flag
 * combination to a time zone identifier.
 *
 * If 'abbr' is either 'utc' or 'gmt' (case insensitve) then "UTC" is
 * returned.
 *
 * It first uses the data in the timezonemap.h file to find a matching
 * abbreviation/GMT offset combination. If not found, it uses the data in
 * fallbackmap.h to match only the GMT offset/isdst flag to try to find a
 * match. If nothing is found, NULL is returned.
 *
 * The returned char* is not duplicated, and should not be freed.
 ','line_number':574,'multiline':True]['text':' Returns an array of known time zone abbreviations
 *
 * This file is generated from the time zone database through the
 * gettzmapping.php scripts, which requires that an up-to-date time zone
 * database is used with the PHP binary that runs the script.
 *
 * Each item in the returned list contains the abbreviation, a flag whether
 * it's an abbreviation used with DST, the UTC offset in seconds, and the name
 * of the time zone identifier that this abbreviation belongs to.
 *
 * The order for each specific abbreviation is controlled through the
 * preference list in the gettzmapping.php script. Time zones that match the
 * pattern Â±\d{2,4} are excluded
 ','line_number':589,'multiline':True]['text':'*
 * DEPRECATED, but still used by PHP.
 ','line_number':605,'multiline':True]['text':' From parse_iso_intervals.re ','line_number':610,'multiline':True]['text':'*
 * Parses a subset of an ISO 8601 intervals specification string into its
 * constituent parts.
 *
 * If the **errors points to a timelib_error_container variable, warnings
 * and errors will be recorded. You are responsible for freeing the stored
 * information with timelib_error_container_dtor(). To see whether errors have
 * occurred, inspect errors->errors_count. To see whether warnings have occurred,
 * inspect errors->warnings_count.
 ','line_number':612,'multiline':True]['text':' From tm2unixtime.c ','line_number':628,'multiline':True]['text':'*
 * Uses the y/m/d/h/i/s fields to calculate and store the equivalent timestamp
 * in the sse field.
 *
 * It uses the time zone information associated with 'time' to account for the
 * right UTC offset and/or DST rules. You can associate time zone information
 * with the timelib_set_timezone_* functions (see below).
 *
 * If the type is 'TIMELIB_ZONETYPE_ID' and there is no associated tzinfo, it
 * will use the second argument 'tzi' to provide the rules necessary to
 * calculate the right timestamp.
 ','line_number':630,'multiline':True]['text':'*
 * Returns the number of days from the y/m/d fields of 'time' since the Unix
 * Epoch.
 ','line_number':644,'multiline':True]['text':'*
 * Takes the information from the y/m/d/h/i/s fields and makes sure their
 * values are in the right range.
 *
 * If a value under- or overflows it will adjust the larger measure up (or
 * down). It also takes into account leap days.
 ','line_number':650,'multiline':True]['text':'*
 * Takes the information from the y/m/d/h/i/s fields of 'rt' and makes sure
 * their values are in the right range.
 *
 * If a value under- or overflows it will adjust the larger measure up (or
 * down). As this function operates on a *relative date/time*, it also takes
 * into account leap days and correctly accounts for the difference depending
 * on the base date/time in 'base'.
 ','line_number':659,'multiline':True]['text':' From unixtime2tm.c ','line_number':670,'multiline':True]['text':'*
 * Takes the unix timestamp in seconds from 'ts', and calculates y, m, and d,
 * in the proleptic Gregorian calendar.
 *
 * It uses the algorithm from howardhinnant.github.io/date_algorithms.html
 ','line_number':672,'multiline':True]['text':'*
 * Takes the unix timestamp in seconds from 'ts' and populates the y/m/d/h/i/s
 * fields of 'tm' without taking time zones into account
 ','line_number':680,'multiline':True]['text':'*
 * Takes the Unix timestamp from 'ts', and calculates the y/m/d/h/i/s fields
 * according to the time zone information attached to 'tm'.
 ','line_number':686,'multiline':True]['text':'*
 * Takes the Unix timestamp stored in 'tm', and calculates the y/m/d/h/i/s
 * fields according to the time zone information attached to 'tm'.
 ','line_number':692,'multiline':True]['text':'*
 * Attaches the UTC offset as time zone information to 't'.
 *
 * 'utc_offset' is in seconds East of UTC.
 ','line_number':698,'multiline':True]['text':'*
 * Attaches the information from 'abbr_info' as time zone information to 't'.
 *
 * The timelib_abbr_info struct contains an abbreviation ('abbr') which string
 * value is duplicated, as well as a 'utc_offset' and 'dst' flag. It only
 * supports a 'dst' change over of 1 hour.
 ','line_number':705,'multiline':True]['text':'*
 * Attaches the time zone information in 'tz' to to 't'.
 *
 * It fetches the right UTC offset that is currently stored in the time
 * stamp field in 't' ('sse'), and assigns that to the 'z' field and 'dst'
 * field (whether DST is in effect at the time). It also sets the current
 * abbreviation to the 'tz_addr' field, making sure that if a value was already
 * set it was freed.
 *
 * The time zone information in 'tz' is *not* duplicated into the 't' field so
 * it should not be freed until all timelib_time* variables have been freed as
 * well.
 ','line_number':714,'multiline':True]['text':' From parse_tz.c ','line_number':729,'multiline':True]['text':'*
 * Returns whether the time zone ID 'timezone' is available in the time zone
 * database as pointed to be 'tzdb'.
 ','line_number':731,'multiline':True]['text':'*
 * Converts the binary stored time zone information from 'tzdb' for the time
 * zone 'timezone' into a structure the library can use for calculations.
 *
 * The function can be used on both timelib_builtin_db as well as a time zone
 * db as opened by timelib_zoneinfo.
 *
 * 'error_code' must not be a null pointer, and will always be written to. If
 * the value is TIMELIB_ERROR_NO_ERROR then the file was parsed without
 * problems.
 *
 * The function will return null upon failure, and also set an error code
 * through 'error_code'.
 *
 * The error code is one of the TIMELIB_ERROR_* constants as listed above.
 * These error constants can be converted into a string by
 * timelib_get_error_message.
 *
 * If the function returns not-null, the 'error_code' might have a non-null
 * value that can be used to detect incompatibilities. The only one that is
 * currently detected is whether the file is a 'slim' file, in which case
 * 'error_code' will be set to TIMELIB_ERROR_SLIM_FILE.
 *
 * This function allocates memory for the new time zone structure, which must
 * be freed after use. Although it is recommended that a cache of each used
 * time zone is kept.
 ','line_number':737,'multiline':True]['text':'*
 * Frees up the resources allocated by 'timelib_parse_tzfile'.
 ','line_number':766,'multiline':True]['text':'*
 * Deep-clones a timelib_tzinfo structure.
 *
 * This allocates resources that need to be freed with 'timelib_tzinfo_dtor'
 ','line_number':771,'multiline':True]['text':'*
 * Returns whether DST is active with time zone 'tz' for the time stamp 'ts'.
 *
 * Returns 0 if DST is not active, 1 if DST is active, or -1 if no transitions
 * were available through 'tz'.
 ','line_number':778,'multiline':True]['text':'*
 * Returns offset information with time zone 'tz' for the time stamp 'ts'.
 *
 * The returned information contains: the offset in seconds East of UTC (in
 * 'offset'), whether DST is active ('is_dst'), what the current time zone
 * abbreviation is ('abbr') and the transition time that got to this state (in
 * 'transition_time');
 ','line_number':786,'multiline':True]['text':'*
 * Returns offset information with time zone 'tz' for the time stamp 'ts'.
 *
 * The returned information contains: the offset in seconds East of UTC (in
 * the output parameter 'offset'), whether DST is active (in the output
 * parameter 'is_dst'), and the transition time that got to this state (in
 * the output parameter 'transition_time'); if NULL is passed, the value is
 * not retrieved
 *
 * Returns 1 if successful, 0 for failure.
 ','line_number':796,'multiline':True]['text':'*
 * Returns the UTC offset currently applicable for the information stored in 't'.
 *
 * The value returned is the UTC offset in seconds East.
 ','line_number':809,'multiline':True]['text':'*
 * Returns whether the timezone information in *one and *two are the same
 *
 * A timezone is considered the same if:
 * - the ->zone_type values are the same for *one and *two
 * - for TYPE_ABBR and TYPE_OFFSET, ->z + (->dst * 3600), is the same
 * - for TYPE_ID, the zone's names are the same
 ','line_number':816,'multiline':True]['text':'*
 * Displays debugging information about the time zone information in 'tz'.
 ','line_number':826,'multiline':True]['text':'*
 * Returns a pointer to the built-in time zone database.
 *
 * You must *not* free the returned pointer as it is part of the text segment.
 ','line_number':831,'multiline':True]['text':'*
 * Returns a pointer to the start of an array containing a list of timezone identifiers.
 *
 * The amount of entries in the array is returned through the 'count' OUT parameter.
 *
 * Each entry contains the time zone ID ('id' field), and the position within the time zone
 * information ('pos' field). The pos field should not be used.
 ','line_number':838,'multiline':True]['text':' From parse_zoneinfo.c ','line_number':848,'multiline':True]['text':'*
 * Scans the directory and subdirectories of 'directory' for valid time zone files and builds
 * a time zone database out of these files.
 *
 * Typically, the directory should point to '/usr/share/zoneinfo'.
 *
 * Unlike 'timelib_builtin_db', the return value of this function must be freed
 * with the 'timelib_zoneinfo_dtor' function.
 ','line_number':850,'multiline':True]['text':'*
 * Frees up the resources as created through 'timelib_zoneinfo'.
 *
 * This function must be used to free up all the resources that have been
 * allocated while calling 'timelib_zoneinfo'.
 ','line_number':861,'multiline':True]['text':' From timelib.c ','line_number':869,'multiline':True]['text':'*
 * Returns a static string containing an error message belonging to a specific
 * error code.
 ','line_number':871,'multiline':True]['text':'*
 * Allocates resources for the relative time structure.
 *
 * Must be freed with 'timelib_rel_time_dtor'.
 ','line_number':877,'multiline':True]['text':'*
 * Frees up the resources as allocated through 'timelib_rel_time_ctor'.
 ','line_number':884,'multiline':True]['text':'*
 * Creates a new timelib_rel_time resource and copies over the information
 * from 'tz'.
 *
 * Must be freed with 'timelib_rel_time_dtor'.
 ','line_number':889,'multiline':True]['text':'*
 * Allocates resources for the time structure.
 *
 * Must be freed with 'timelib_time_dtor'.
 ','line_number':897,'multiline':True]['text':'*
 * Frees up the resources as allocated through 'timelib_time_ctor'.
 ','line_number':904,'multiline':True]['text':'*
 * Creates a new timelib_time resource and copies over the information
 * from 'orig'.
 *
 * Must be freed with 'timelib_time_dtor'.
 ','line_number':909,'multiline':True]['text':'*
 * Compares two timelib_time structures and returns which one is earlier in
 * time.
 *
 * To decide which comes earlier it uses the 'sse' (Seconds Since Epoch) and
 * 'us' (microseconds) fields.
 *
 * Returns -1 if t1 < t2, 0 if t1 == t2, and -1 if t1 > t2.
 ','line_number':917,'multiline':True]['text':'*
 * Allocates resources for the time offset structure.
 *
 * Must be freed with 'timelib_time_offset_dtor'.
 ','line_number':928,'multiline':True]['text':'*
 * Frees up the resources as allocated through 'timelib_time_offset_ctor'.
 ','line_number':935,'multiline':True]['text':'*
 * Frees up the resources allocated while converting strings to timelib_time
 * structures with the timelib_strtotime and timelib_strtointerval functions.
 ','line_number':940,'multiline':True]['text':'*
 * Converts the 'sse' value of 'd' to a timelib_long type.
 *
 * If the value fits in the TIMELIB_LONG_MIN and TIMELIB_LONG_MAX range, the
 * value is cast to (timelib_long) and returned. If *error is not a NULL
 * pointer, it will be set to 0.
 *
 * If the value does *not* fit in the range, the function returns 0 and if
 * *error is not a NULL pointer, it will be set to 1.
 *
 * timelib_long is a 32 bit signed long integer on 32 bit platforms, and a 64
 * bit signed long long integer on 64 bit platforms. In other words, it makes
 * sure that the value in 'sse' (which is always a signed long long 64 bit
 * integer) can be used safely outside of the library.
 ','line_number':946,'multiline':True]['text':'*
 * Displays debugging information about the date/time information stored in 'd'.
 *
 * 'options' is a bit field, where:
 * - 1 controls whether the relative time portion is shown.
 * - 2 controls whether the zone type is shown.
 ','line_number':963,'multiline':True]['text':'*
 * Displays debugging information about the relative time information stored
 * in 'd'.
 ','line_number':972,'multiline':True]['text':'*
 * Converts a decimal hour into hour/min/sec components
 ','line_number':978,'multiline':True]['text':'*
 * Converts hour/min/sec values into a decimal hour
 ','line_number':983,'multiline':True]['text':'*
 * Converts hour/min/sec/micro sec values into a decimal hour
 ','line_number':988,'multiline':True]['text':'*
 * Converts hour/min/sec values into seconds
 ','line_number':993,'multiline':True]['text':' from astro.c ','line_number':999,'multiline':True]['text':'*
 * Converts the Unix Epoch time stamp 'ts' to a Julian Day
 *
 * The value returned is the number of whole days since -4714-11-24T12:00:00 UTC
 * (in the proleptic Gregorian calendar):
 * https://en.wikipedia.org/wiki/Julian_day
 ','line_number':1001,'multiline':True]['text':'*
 * Converts the Unix Epoch time stamp 'ts' to the J2000 epoch
 *
 * The value returned is the number of whole days since 2000-01-01T12:00:00
 * UTC: https://en.wikipedia.org/wiki/Epoch_(astronomy)#Julian_years_and_J2000
 ','line_number':1010,'multiline':True]['text':'*
 * Calculates when the Sun is above a certain latitude.
 *
 * Parameters:
 * - time: A timelib_time time describing that needs to specific midnight for a
 *         specific day.
 * - lon: The longitude of the observer (East positive, West negative).
 * - lat: The latitude of the observer (North positive, South negative).
 * - altit: The altitude. Set to -35/60 for rise/set, -6 for civil twilight,
 *          -12 for nautical, and -18 for astronomical twilight.
 * - upper_limb: set to non-zero for rise/set calculations, and 0 for twilight
 *               calculations.
 *
 * Out Parameters:
 * - h_rise: The decimal hour when the Sun rises
 * - h_set: The decimal hour when the Sun sets
 * - ts_rise: The Unix timestamp of the Sun rising
 * - ts_set: The Unix timestamp of the Sun setting
 * - ts_transit: The Unix timestmap of the Sun transitting through South
 *
 * Return Values:
 * - 0: The Sun rises and sets.
 * - +1: The Sun is always above the horizon. (ts_rise is set to ts_transit -
 *       (12 * 3600); ts_set is set to ts_transit + (12 * 3600).
 * - -1: The Sun is awlays below the horizon. (ts_rise and ts_set are set
 *       to ts_transit)
 ','line_number':1018,'multiline':True]['text':' from interval.c ','line_number':1047,'multiline':True]['text':'*
 * Calculates the difference between two times
 *
 * The result is a timelib_rel_time structure that describes how you can
 * convert from 'one' to 'two' with 'timelib_add'. This does *not* necessarily
 * mean that you can go from 'two' to 'one' by using 'timelib_sub' due to the
 * way months and days are calculated.
 ','line_number':1049,'multiline':True]['text':'*
 * Calculates the difference in full days between two times
 *
 * The result is the number of full days between 'one' and 'two'. It does take
 * into account 23 and 25 hour (and variants) days when the zone_type
 * is TIMELIB_ZONETYPE_ID and have the same TZID for 'one' and 'two'.
 ','line_number':1059,'multiline':True]['text':'*
 * Adds the relative time information 'interval' to the base time 't'.
 *
 * This can be a relative time as created by 'timelib_diff', but also by more
 * complex statements such as "next workday".
 ','line_number':1068,'multiline':True]['text':'*
 * Subtracts the relative time information 'interval' to the base time 't'.
 *
 * This can be a relative time as created by 'timelib_diff'. Unlike with
 * 'timelib_add', this does not support more complex statements such as "next
 * workday".
 ','line_number':1077,'multiline':True]['text':' from parse_posix.c ','line_number':1087,'multiline':True]['text':'*
 * Calculate the two yearly to/from DST
 ','line_number':1093,'multiline':True]['text':' extern "C" ','line_number':1100,'multiline':True]