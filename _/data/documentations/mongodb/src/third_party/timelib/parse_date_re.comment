['text':'
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2019 Derick Rethans
 * Copyright (c) 2018 MongoDB, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ','line_number':1,'multiline':True]['text':' Some compilers like AIX, defines uchar in sys/types.h ','line_number':79,'multiline':True]['text':'	(x) = 0; ','line_number':110,'multiline':True]['text':' Number of elements ','line_number':129,'multiline':True]['text':' Values ','line_number':130,'multiline':True]['text':' The timezone table. ','line_number':155,'multiline':True]['text':' The relative text table. ','line_number':241,'multiline':True]['text':' The month table. ','line_number':263,'multiline':True]['text':' Realloc in power of two increments ','line_number':352,'multiline':True]['text':' for sign and \0','line_number':549,'multiline':False]['text':'*
 * The time_part parameter is a flag. It can be TIMELIB_TIME_PART_KEEP in case
 * the time portion should not be reset to midnight, or
 * TIMELIB_TIME_PART_DONT_KEEP in case it does need to be reset. This is used
 * for not overwriting the time portion for 'X weekday'.
 ','line_number':695,'multiline':True]['text':' Still didn't find anything, let's find the zone solely based on
	 * offset/isdst then ','line_number':766,'multiline':True]['text':' Only include A-Z, a-z, 0-9, /, _, and - in abbreviations/TZ IDs ','line_number':783,'multiline':True]['text':' H ','line_number':824,'multiline':True]['text':' HH ','line_number':825,'multiline':True]['text':' H:M ','line_number':829,'multiline':True]['text':' H:MM, HH:M, HHMM ','line_number':830,'multiline':True]['text':' HH:MM ','line_number':845,'multiline':True]['text':' HHMMSS ','line_number':854,'multiline':True]['text':' HH:MM:SS ','line_number':860,'multiline':True]['text':' First character must be +/- ','line_number':878,'multiline':True]['text':' First, we lookup by abbreviation only ','line_number':938,'multiline':True]['text':' Otherwise, we look if we have a TimeZone identifier ','line_number':946,'multiline':True]['text':'!re2c
any = [\000-\377];

space = [ \t]+;
frac = "."[0-9]+;

ago = 'ago';

hour24 = [01]?[0-9] | "2"[0-4];
hour24lz = [01][0-9] | "2"[0-4];
hour12 = "0"?[1-9] | "1"[0-2];
minute = [0-5]?[0-9];
minutelz = [0-5][0-9];
second = minute | "60";
secondlz = minutelz | "60";
meridian = ([AaPp] "."? [Mm] "."?) [\000\t ];
tz = "("? [A-Za-z]{1,6} ")"? | [A-Z][a-z]+([_/-][A-Za-z]+)+;
tzcorrection = "GMT"? [+-] ((hour24 (":"? minute)?) | (hour24lz minutelz secondlz) | (hour24lz ":" minutelz ":" secondlz));

daysuf = "st" | "nd" | "rd" | "th";

month = "0"? [0-9] | "1"[0-2];
day   = (([0-2]?[0-9]) | ("3"[01])) daysuf?;
year  = [0-9]{1,4};
year2 = [0-9]{2};
year4 = [0-9]{4};
year4withsign = [+-]? [0-9]{4};
yearx = [+-] [0-9]{5,19};

dayofyear = "00"[1-9] | "0"[1-9][0-9] | [1-2][0-9][0-9] | "3"[0-5][0-9] | "36"[0-6];
weekofyear = "0"[1-9] | [1-4][0-9] | "5"[0-3];

monthlz = "0" [0-9] | "1" [0-2];
daylz   = "0" [0-9] | [1-2][0-9] | "3" [01];

dayfulls = 'sundays' | 'mondays' | 'tuesdays' | 'wednesdays' | 'thursdays' | 'fridays' | 'saturdays';
dayfull = 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';
dayabbr = 'sun' | 'mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat' | 'sun';
dayspecial = 'weekday' | 'weekdays';
daytext = dayfulls | dayfull | dayabbr | dayspecial;

monthfull = 'january' | 'february' | 'march' | 'april' | 'may' | 'june' | 'july' | 'august' | 'september' | 'october' | 'november' | 'december';
monthabbr = 'jan' | 'feb' | 'mar' | 'apr' | 'may' | 'jun' | 'jul' | 'aug' | 'sep' | 'sept' | 'oct' | 'nov' | 'dec';
monthroman = "I" | "II" | "III" | "IV" | "V" | "VI" | "VII" | "VIII" | "IX" | "X" | "XI" | "XII";
monthtext = monthfull | monthabbr | monthroman;

/* Time formats ','line_number':985,'multiline':True]['text':' iso8601shorttz = hour24 [:] minutelz space? (tzcorrection | tz); ','line_number':1041,'multiline':True]['text':' iso8601longtz =  hour24 [:] minute [:] secondlz frac space? (tzcorrection | tz); ','line_number':1043,'multiline':True]['text':' gnunocolontz     = hour24lz minutelz space? (tzcorrection | tz); ','line_number':1046,'multiline':True]['text':' iso8601nocolontz = hour24lz minutelz secondlz space? (tzcorrection | tz); ','line_number':1048,'multiline':True]['text':' Date formats ','line_number':1050,'multiline':True]['text':' Special formats ','line_number':1070,'multiline':True]['text':' Common Log Format: 10/Oct/2000:13:55:36 -0700 ','line_number':1087,'multiline':True]['text':' Timestamp format: @1126396800 ','line_number':1090,'multiline':True]['text':' To fix some ambiguities ','line_number':1094,'multiline':True]['text':'
 * Relative regexps
 ','line_number':1101,'multiline':True]['text':'!re2c
	/* so that vim highlights correctly ','line_number':1117,'multiline':True]['text':' Don't merge into PHP','line_number':1245,'multiline':False]['text':' skip "last day of" or "first day of" ','line_number':1247,'multiline':True]['text':' first, second... etc ','line_number':1292,'multiline':True]['text':' last ','line_number':1295,'multiline':True]['text':' | iso8601short | iso8601norm ','line_number':1340,'multiline':True]['text':'| iso8601shorttz | iso8601normtz | iso8601longtz','line_number':1340,'multiline':True]['text':'
	gnunocolontz
	{
		DEBUG_OUTPUT("gnunocolontz");
		TIMELIB_INIT;
		switch (s->time->have_time) {
			case 0:
				s->time->h = timelib_get_nr(&ptr, 2);
				s->time->i = timelib_get_nr(&ptr, 2);
				s->time->s = 0;
				s->time->z = timelib_parse_zone(&ptr, &s->time->dst, s->time, s->tzdb, tz_get_wrapper);
				break;
			case 1:
				s->time->y = timelib_get_nr(&ptr, 4);
				break;
			default:
				TIMELIB_DEINIT;
				return TIMELIB_ERROR;
		}
		s->time->have_time++;
		TIMELIB_DEINIT;
		return TIMELIB_GNU_NOCOLON_TZ;
	}
','line_number':1390,'multiline':True]['text':'| iso8601nocolontz','line_number':1414,'multiline':True]['text':' timezone is optional ','line_number':1638,'multiline':True]['text':' to handle the format weekday + last/this/next week ','line_number':1812,'multiline':True]['text':'!max:re2c ','line_number':1952,'multiline':True]['text':' do funky checking whether the parsed time was valid time ','line_number':2016,'multiline':True]['text':' do funky checking whether the parsed date was valid date ','line_number':2020,'multiline':True]['text':' No prefix required by default.','line_number':2122,'multiline':False]['text':' Loop over the format string ','line_number':2179,'multiline':True]['text':' There are 2 cases where the input string and format string
			 * should match the next literal:
			 *
			 * 1. No prefix has been specified yet in the format, so expect 1:1
			 *    match.
			 * 2. Sequential prefix characters indicating that the second
			 *    prefix is escaped. (e.g. "%%" is expecting literal "%")
			 ','line_number':2184,'multiline':True]['text':' Fall through case is that the prefix has been found and the next
			 * character is the format specifier. ','line_number':2209,'multiline':True]['text':' three letter day ','line_number':2215,'multiline':True]['text':' full day ','line_number':2216,'multiline':True]['text':' two digit day, without leading zero ','line_number':2232,'multiline':True]['text':' two digit day, with leading zero ','line_number':2233,'multiline':True]['text':' day suffix, ignored, nor checked ','line_number':2242,'multiline':True]['text':' day of year - resets month (0 based) - also initializes everything else to !TIMELIB_UNSET ','line_number':2245,'multiline':True]['text':' two digit month, without leading zero ','line_number':2263,'multiline':True]['text':' two digit month, with leading zero ','line_number':2264,'multiline':True]['text':' three letter month ','line_number':2272,'multiline':True]['text':' full month ','line_number':2273,'multiline':True]['text':' two digit year ','line_number':2283,'multiline':True]['text':' four digit year ','line_number':2296,'multiline':True]['text':' optional symbol, followed by up to 19 digits ','line_number':2305,'multiline':True]['text':' two digit hour, without leading zero ','line_number':2314,'multiline':True]['text':' two digit hour, with leading zero ','line_number':2315,'multiline':True]['text':' two digit hour, with leading zero ','line_number':2328,'multiline':True]['text':' two digit hour, without leading zero ','line_number':2329,'multiline':True]['text':' am/pm/a.m./p.m. AM/PM/A.M./P.M. ','line_number':2338,'multiline':True]['text':' two digit minute, with leading zero ','line_number':2352,'multiline':True]['text':' two digit second, with leading zero ','line_number':2368,'multiline':True]['text':' up to six digit microsecond ','line_number':2384,'multiline':True]['text':' up to three digit millisecond ','line_number':2399,'multiline':True]['text':' any sort of whitespace (' ' and \t) ','line_number':2414,'multiline':True]['text':' epoch seconds ','line_number':2417,'multiline':True]['text':' separation symbol ','line_number':2429,'multiline':True]['text':' reset all fields to default ','line_number':2447,'multiline':True]['text':' break intentionally not missing ','line_number':2449,'multiline':True]['text':' reset all fields to default when not set ','line_number':2451,'multiline':True]['text':' break intentionally not missing ','line_number':2453,'multiline':True]['text':' random char ','line_number':2455,'multiline':True]['text':' escaped char ','line_number':2459,'multiline':True]['text':' random chars until a separator or number ([ \t.,:;/-0123456789]) ','line_number':2473,'multiline':True]['text':' allow extra chars in the format ','line_number':2477,'multiline':True]['text':' Range is 1 - 53  for ISO week of year ','line_number':2493,'multiline':True]['text':' timezone ','line_number':2513,'multiline':True]['text':' timezone format +/-mmm ','line_number':2526,'multiline':True]['text':' Trailing reset specifiers are valid. ','line_number':2553,'multiline':True]['text':' reset all fields to default ','line_number':2557,'multiline':True]['text':' reset all fields to default when not set ','line_number':2561,'multiline':True]['text':' clean up a bit ','line_number':2575,'multiline':True]['text':' Check for mixing of ISO dates with natural dates. ','line_number':2591,'multiline':True]['text':' Convert ISO values ','line_number':2599,'multiline':True]['text':' Default week of year and day of week to 1. ','line_number':2601,'multiline':True]['text':' do funky checking whether the parsed time was valid time ','line_number':2613,'multiline':True]['text':' do funky checking whether the parsed date was valid date ','line_number':2619,'multiline':True]['text':'		parsed->tz_abbr = now->tz_abbr ? timelib_strdup(now->tz_abbr) : NULL;
		parsed->tz_info = now->tz_info ? timelib_tzinfo_clone(now->tz_info) : NULL;
','line_number':2670,'multiline':True]['text':'	timelib_dump_date(parsed, 2);
	timelib_dump_date(now, 2);
','line_number':2674,'multiline':True]['text':'
 * vim: syntax=c
 ','line_number':2717,'multiline':True]