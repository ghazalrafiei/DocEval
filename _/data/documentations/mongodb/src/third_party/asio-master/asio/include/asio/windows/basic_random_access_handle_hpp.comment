['text':'','line_number':1,'multiline':False]['text':' windows/basic_random_access_handle.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Provides random-access handle functionality.','line_number':37,'multiline':False]['text':'*
 * The windows::basic_random_access_handle class template provides asynchronous
 * and blocking random-access handle functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':38,'multiline':True]['text':'/ The native representation of a handle.','line_number':51,'multiline':False]['text':'/ Construct a basic_random_access_handle without opening it.','line_number':55,'multiline':False]['text':'*
   * This constructor creates a random-access handle without opening it. The
   * handle needs to be opened before data can be written to or read from it.
   *
   * @param io_context The io_context object that the random-access handle will
   * use to dispatch handlers for any asynchronous operations performed on the
   * handle.
   ','line_number':56,'multiline':True]['text':'/ Construct a basic_random_access_handle on an existing native handle.','line_number':69,'multiline':False]['text':'*
   * This constructor creates a random-access handle object to hold an existing
   * native handle.
   *
   * @param io_context The io_context object that the random-access handle will
   * use to dispatch handlers for any asynchronous operations performed on the
   * handle.
   *
   * @param handle The new underlying handle implementation.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':70,'multiline':True]['text':'/ Move-construct a basic_random_access_handle from another.','line_number':89,'multiline':False]['text':'*
   * This constructor moves a random-access handle from one object to another.
   *
   * @param other The other basic_random_access_handle object from which the
   * move will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_random_access_handle(io_context&)
   * constructor.
   ','line_number':90,'multiline':True]['text':'/ Move-assign a basic_random_access_handle from another.','line_number':106,'multiline':False]['text':'*
   * This assignment operator moves a random-access handle from one object to
   * another.
   *
   * @param other The other basic_random_access_handle object from which the
   * move will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_random_access_handle(io_context&)
   * constructor.
   ','line_number':107,'multiline':True]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':124,'multiline':False]['text':'/ Write some data to the handle at the specified offset.','line_number':126,'multiline':False]['text':'*
   * This function is used to write data to the random-access handle. The
   * function call will block until one or more bytes of the data has been
   * written successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be written.
   *
   * @param buffers One or more data buffers to be written to the handle.
   *
   * @returns The number of bytes written.
   *
   * @throws asio::system_error Thrown on failure. An error code of
   * asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @note The write_some_at operation may not write all of the data. Consider
   * using the @ref write_at function if you need to ensure that all data is
   * written before the blocking operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.write_some_at(42, asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':127,'multiline':True]['text':'/ Write some data to the handle at the specified offset.','line_number':166,'multiline':False]['text':'*
   * This function is used to write data to the random-access handle. The
   * function call will block until one or more bytes of the data has been
   * written successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be written.
   *
   * @param buffers One or more data buffers to be written to the handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes written. Returns 0 if an error occurred.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write_at function if you need to ensure that
   * all data is written before the blocking operation completes.
   ','line_number':167,'multiline':True]['text':'/ Start an asynchronous write at the specified offset.','line_number':192,'multiline':False]['text':'*
   * This function is used to asynchronously write data to the random-access
   * handle. The function call always returns immediately.
   *
   * @param offset The offset at which the data will be written.
   *
   * @param buffers One or more data buffers to be written to the handle.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param handler The handler to be called when the write operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes written.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The write operation may not transmit all of the data to the peer.
   * Consider using the @ref async_write_at function if you need to ensure that
   * all data is written before the asynchronous operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.async_write_some_at(42, asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':193,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':236,'multiline':False]['text':' not meet the documented type requirements for a WriteHandler.','line_number':237,'multiline':False]['text':'/ Read some data from the handle at the specified offset.','line_number':244,'multiline':False]['text':'*
   * This function is used to read data from the random-access handle. The
   * function call will block until one or more bytes of data has been read
   * successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be read.
   *
   * @param buffers One or more buffers into which the data will be read.
   *
   * @returns The number of bytes read.
   *
   * @throws asio::system_error Thrown on failure. An error code of
   * asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read_at function if you need to ensure that
   * the requested amount of data is read before the blocking operation
   * completes.
   *
   * @par Example
   * To read into a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.read_some_at(42, asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on reading into multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':245,'multiline':True]['text':'/ Read some data from the handle at the specified offset.','line_number':285,'multiline':False]['text':'*
   * This function is used to read data from the random-access handle. The
   * function call will block until one or more bytes of data has been read
   * successfully, or until an error occurs.
   *
   * @param offset The offset at which the data will be read.
   *
   * @param buffers One or more buffers into which the data will be read.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes read. Returns 0 if an error occurred.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read_at function if you need to ensure that
   * the requested amount of data is read before the blocking operation
   * completes.
   ','line_number':286,'multiline':True]['text':'/ Start an asynchronous read at the specified offset.','line_number':312,'multiline':False]['text':'*
   * This function is used to asynchronously read data from the random-access
   * handle. The function call always returns immediately.
   *
   * @param offset The offset at which the data will be read.
   *
   * @param buffers One or more buffers into which the data will be read.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param handler The handler to be called when the read operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes read.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @note The read operation may not read all of the requested number of bytes.
   * Consider using the @ref async_read_at function if you need to ensure that
   * the requested amount of data is read before the asynchronous operation
   * completes.
   *
   * @par Example
   * To read into a single data buffer use the @ref buffer function as follows:
   * @code
   * handle.async_read_some_at(42, asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on reading into multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':313,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':357,'multiline':False]['text':' not meet the documented type requirements for a ReadHandler.','line_number':358,'multiline':False]['text':' namespace windows','line_number':366,'multiline':False]['text':' namespace asio','line_number':367,'multiline':False]['text':' defined(ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE)','line_number':371,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':372,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':374,'multiline':False]['text':' ASIO_WINDOWS_BASIC_RANDOM_ACCESS_HANDLE_HPP','line_number':376,'multiline':False]