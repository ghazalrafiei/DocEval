['text':'','line_number':1,'multiline':False]['text':' ssl/stream.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Provides stream-oriented functionality using SSL.','line_number':40,'multiline':False]['text':'*
 * The stream class template provides asynchronous and blocking stream-oriented
 * functionality using SSL.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe. The application must also ensure that all
 * asynchronous operations are performed within the same implicit or explicit
 * strand.
 *
 * @par Example
 * To use the SSL stream template with an ip::tcp::socket, you would write:
 * @code
 * asio::io_context io_context;
 * asio::ssl::context ctx(asio::ssl::context::sslv23);
 * asio::ssl::stream<asio:ip::tcp::socket> sock(io_context, ctx);
 * @endcode
 *
 * @par Concepts:
 * AsyncReadStream, AsyncWriteStream, Stream, SyncReadStream, SyncWriteStream.
 ','line_number':41,'multiline':True]['text':'/ The native handle type of the SSL stream.','line_number':68,'multiline':False]['text':'/ Structure for use with deprecated impl_type.','line_number':71,'multiline':False]['text':'/ The type of the next layer.','line_number':77,'multiline':False]['text':'/ The type of the lowest layer.','line_number':80,'multiline':False]['text':'/ The type of the executor associated with the object.','line_number':83,'multiline':False]['text':'/ Construct a stream.','line_number':87,'multiline':False]['text':'*
   * This constructor creates a stream and initialises the underlying stream
   * object.
   *
   * @param arg The argument to be passed to initialise the underlying stream.
   *
   * @param ctx The SSL context to be used for the stream.
   ','line_number':88,'multiline':True]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':103,'multiline':False]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':111,'multiline':False]['text':'/ Destructor.','line_number':113,'multiline':False]['text':'*
   * @note A @c stream object must not be destroyed while there are pending
   * asynchronous operations associated with it.
   ','line_number':114,'multiline':True]['text':'/ Get the executor associated with the object.','line_number':122,'multiline':False]['text':'*
   * This function may be used to obtain the executor object that the stream
   * uses to dispatch handlers for asynchronous operations.
   *
   * @return A copy of the executor that stream will use to dispatch handlers.
   ','line_number':123,'multiline':True]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':135,'multiline':False]['text':'/ object.','line_number':136,'multiline':False]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':142,'multiline':False]['text':'/ object.','line_number':143,'multiline':False]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':148,'multiline':False]['text':'/ Get the underlying implementation in the native type.','line_number':150,'multiline':False]['text':'*
   * This function may be used to obtain the underlying implementation of the
   * context. This is intended to allow access to context functionality that is
   * not otherwise provided.
   *
   * @par Example
   * The native_handle() function returns a pointer of type @c SSL* that is
   * suitable for passing to functions such as @c SSL_get_verify_result and
   * @c SSL_get_peer_certificate:
   * @code
   * asio::ssl::stream<asio:ip::tcp::socket> sock(io_context, ctx);
   *
   * // ... establish connection and perform handshake ...
   *
   * if (X509* cert = SSL_get_peer_certificate(sock.native_handle()))
   * {
   *   if (SSL_get_verify_result(sock.native_handle()) == X509_V_OK)
   *   {
   *     // ...
   *   }
   * }
   * @endcode
   ','line_number':151,'multiline':True]['text':'/ Get a reference to the next layer.','line_number':179,'multiline':False]['text':'*
   * This function returns a reference to the next layer in a stack of stream
   * layers.
   *
   * @return A reference to the next layer in the stack of stream layers.
   * Ownership is not transferred to the caller.
   ','line_number':180,'multiline':True]['text':'/ Get a reference to the next layer.','line_number':192,'multiline':False]['text':'*
   * This function returns a reference to the next layer in a stack of stream
   * layers.
   *
   * @return A reference to the next layer in the stack of stream layers.
   * Ownership is not transferred to the caller.
   ','line_number':193,'multiline':True]['text':'/ Get a reference to the lowest layer.','line_number':205,'multiline':False]['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * stream layers.
   *
   * @return A reference to the lowest layer in the stack of stream layers.
   * Ownership is not transferred to the caller.
   ','line_number':206,'multiline':True]['text':'/ Get a reference to the lowest layer.','line_number':218,'multiline':False]['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * stream layers.
   *
   * @return A reference to the lowest layer in the stack of stream layers.
   * Ownership is not transferred to the caller.
   ','line_number':219,'multiline':True]['text':'/ Set the peer verification mode.','line_number':231,'multiline':False]['text':'*
   * This function may be used to configure the peer verification mode used by
   * the stream. The new mode will override the mode inherited from the context.
   *
   * @param v A bitmask of peer verification modes. See @ref verify_mode for
   * available values.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note Calls @c SSL_set_verify.
   ','line_number':232,'multiline':True]['text':'/ Set the peer verification mode.','line_number':250,'multiline':False]['text':'*
   * This function may be used to configure the peer verification mode used by
   * the stream. The new mode will override the mode inherited from the context.
   *
   * @param v A bitmask of peer verification modes. See @ref verify_mode for
   * available values.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note Calls @c SSL_set_verify.
   ','line_number':251,'multiline':True]['text':'/ Set the peer verification depth.','line_number':269,'multiline':False]['text':'*
   * This function may be used to configure the maximum verification depth
   * allowed by the stream.
   *
   * @param depth Maximum depth for the certificate chain verification that
   * shall be allowed.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note Calls @c SSL_set_verify_depth.
   ','line_number':270,'multiline':True]['text':'/ Set the peer verification depth.','line_number':288,'multiline':False]['text':'*
   * This function may be used to configure the maximum verification depth
   * allowed by the stream.
   *
   * @param depth Maximum depth for the certificate chain verification that
   * shall be allowed.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note Calls @c SSL_set_verify_depth.
   ','line_number':289,'multiline':True]['text':'/ Set the callback used to verify peer certificates.','line_number':307,'multiline':False]['text':'*
   * This function is used to specify a callback function that will be called
   * by the implementation when it needs to verify a peer certificate.
   *
   * @param callback The function object to be used for verifying a certificate.
   * The function signature of the handler must be:
   * @code bool verify_callback(
   *   bool preverified, // True if the certificate passed pre-verification.
   *   verify_context& ctx // The peer certificate and other context.
   * ); @endcode
   * The return value of the callback is true if the certificate has passed
   * verification, false otherwise.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note Calls @c SSL_set_verify.
   ','line_number':308,'multiline':True]['text':'/ Set the callback used to verify peer certificates.','line_number':333,'multiline':False]['text':'*
   * This function is used to specify a callback function that will be called
   * by the implementation when it needs to verify a peer certificate.
   *
   * @param callback The function object to be used for verifying a certificate.
   * The function signature of the handler must be:
   * @code bool verify_callback(
   *   bool preverified, // True if the certificate passed pre-verification.
   *   verify_context& ctx // The peer certificate and other context.
   * ); @endcode
   * The return value of the callback is true if the certificate has passed
   * verification, false otherwise.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note Calls @c SSL_set_verify.
   ','line_number':334,'multiline':True]['text':'/ Perform SSL handshaking.','line_number':360,'multiline':False]['text':'*
   * This function is used to perform SSL handshaking on the stream. The
   * function call will block until handshaking is complete or an error occurs.
   *
   * @param type The type of handshaking to be performed, i.e. as a client or as
   * a server.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':361,'multiline':True]['text':'/ Perform SSL handshaking.','line_number':377,'multiline':False]['text':'*
   * This function is used to perform SSL handshaking on the stream. The
   * function call will block until handshaking is complete or an error occurs.
   *
   * @param type The type of handshaking to be performed, i.e. as a client or as
   * a server.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':378,'multiline':True]['text':'/ Perform SSL handshaking.','line_number':394,'multiline':False]['text':'*
   * This function is used to perform SSL handshaking on the stream. The
   * function call will block until handshaking is complete or an error occurs.
   *
   * @param type The type of handshaking to be performed, i.e. as a client or as
   * a server.
   *
   * @param buffers The buffered data to be reused for the handshake.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':395,'multiline':True]['text':'/ Perform SSL handshaking.','line_number':414,'multiline':False]['text':'*
   * This function is used to perform SSL handshaking on the stream. The
   * function call will block until handshaking is complete or an error occurs.
   *
   * @param type The type of handshaking to be performed, i.e. as a client or as
   * a server.
   *
   * @param buffers The buffered data to be reused for the handshake.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':415,'multiline':True]['text':'/ Start an asynchronous SSL handshake.','line_number':435,'multiline':False]['text':'*
   * This function is used to asynchronously perform an SSL handshake on the
   * stream. This function call always returns immediately.
   *
   * @param type The type of handshaking to be performed, i.e. as a client or as
   * a server.
   *
   * @param handler The handler to be called when the handshake operation
   * completes. Copies will be made of the handler as required. The equivalent
   * function signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error // Result of operation.
   * ); @endcode
   ','line_number':436,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':456,'multiline':False]['text':' not meet the documented type requirements for a HandshakeHandler.','line_number':457,'multiline':False]['text':'/ Start an asynchronous SSL handshake.','line_number':469,'multiline':False]['text':'*
   * This function is used to asynchronously perform an SSL handshake on the
   * stream. This function call always returns immediately.
   *
   * @param type The type of handshaking to be performed, i.e. as a client or as
   * a server.
   *
   * @param buffers The buffered data to be reused for the handshake. Although
   * the buffers object may be copied as necessary, ownership of the underlying
   * buffers is retained by the caller, which must guarantee that they remain
   * valid until the handler is called.
   *
   * @param handler The handler to be called when the handshake operation
   * completes. Copies will be made of the handler as required. The equivalent
   * function signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred // Amount of buffers used in handshake.
   * ); @endcode
   ','line_number':470,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':496,'multiline':False]['text':' not meet the documented type requirements for a BufferedHandshakeHandler.','line_number':497,'multiline':False]['text':'/ Shut down SSL on the stream.','line_number':511,'multiline':False]['text':'*
   * This function is used to shut down SSL on the stream. The function call
   * will block until SSL has been shut down or an error occurs.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':512,'multiline':True]['text':'/ Shut down SSL on the stream.','line_number':525,'multiline':False]['text':'*
   * This function is used to shut down SSL on the stream. The function call
   * will block until SSL has been shut down or an error occurs.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':526,'multiline':True]['text':'/ Asynchronously shut down SSL on the stream.','line_number':538,'multiline':False]['text':'*
   * This function is used to asynchronously shut down SSL on the stream. This
   * function call always returns immediately.
   *
   * @param handler The handler to be called when the handshake operation
   * completes. Copies will be made of the handler as required. The equivalent
   * function signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error // Result of operation.
   * ); @endcode
   ','line_number':539,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':555,'multiline':False]['text':' not meet the documented type requirements for a ShutdownHandler.','line_number':556,'multiline':False]['text':'/ Write some data to the stream.','line_number':568,'multiline':False]['text':'*
   * This function is used to write data on the stream. The function call will
   * block until one or more bytes of data has been written successfully, or
   * until an error occurs.
   *
   * @param buffers The data to be written.
   *
   * @returns The number of bytes written.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write function if you need to ensure that all
   * data is written before the blocking operation completes.
   ','line_number':569,'multiline':True]['text':'/ Write some data to the stream.','line_number':593,'multiline':False]['text':'*
   * This function is used to write data on the stream. The function call will
   * block until one or more bytes of data has been written successfully, or
   * until an error occurs.
   *
   * @param buffers The data to be written to the stream.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes written. Returns 0 if an error occurred.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write function if you need to ensure that all
   * data is written before the blocking operation completes.
   ','line_number':594,'multiline':True]['text':'/ Start an asynchronous write.','line_number':617,'multiline':False]['text':'*
   * This function is used to asynchronously write one or more bytes of data to
   * the stream. The function call always returns immediately.
   *
   * @param buffers The data to be written to the stream. Although the buffers
   * object may be copied as necessary, ownership of the underlying buffers is
   * retained by the caller, which must guarantee that they remain valid until
   * the handler is called.
   *
   * @param handler The handler to be called when the write operation completes.
   * Copies will be made of the handler as required. The equivalent function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes written.
   * ); @endcode
   *
   * @note The async_write_some operation may not transmit all of the data to
   * the peer. Consider using the @ref async_write function if you need to
   * ensure that all data is written before the asynchronous operation
   * completes.
   ','line_number':618,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':646,'multiline':False]['text':' not meet the documented type requirements for a WriteHandler.','line_number':647,'multiline':False]['text':'/ Read some data from the stream.','line_number':660,'multiline':False]['text':'*
   * This function is used to read data from the stream. The function call will
   * block until one or more bytes of data has been read successfully, or until
   * an error occurs.
   *
   * @param buffers The buffers into which the data will be read.
   *
   * @returns The number of bytes read.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read function if you need to ensure that the
   * requested amount of data is read before the blocking operation completes.
   ','line_number':661,'multiline':True]['text':'/ Read some data from the stream.','line_number':685,'multiline':False]['text':'*
   * This function is used to read data from the stream. The function call will
   * block until one or more bytes of data has been read successfully, or until
   * an error occurs.
   *
   * @param buffers The buffers into which the data will be read.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes read. Returns 0 if an error occurred.
   *
   * @note The read_some operation may not read all of the requested number of
   * bytes. Consider using the @ref read function if you need to ensure that the
   * requested amount of data is read before the blocking operation completes.
   ','line_number':686,'multiline':True]['text':'/ Start an asynchronous read.','line_number':709,'multiline':False]['text':'*
   * This function is used to asynchronously read one or more bytes of data from
   * the stream. The function call always returns immediately.
   *
   * @param buffers The buffers into which the data will be read. Although the
   * buffers object may be copied as necessary, ownership of the underlying
   * buffers is retained by the caller, which must guarantee that they remain
   * valid until the handler is called.
   *
   * @param handler The handler to be called when the read operation completes.
   * Copies will be made of the handler as required. The equivalent function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes read.
   * ); @endcode
   *
   * @note The async_read_some operation may not read all of the requested
   * number of bytes. Consider using the @ref async_read function if you need to
   * ensure that the requested amount of data is read before the asynchronous
   * operation completes.
   ','line_number':710,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':738,'multiline':False]['text':' not meet the documented type requirements for a ReadHandler.','line_number':739,'multiline':False]['text':' namespace ssl','line_number':757,'multiline':False]['text':' namespace asio','line_number':758,'multiline':False]['text':' ASIO_SSL_STREAM_HPP','line_number':762,'multiline':False]