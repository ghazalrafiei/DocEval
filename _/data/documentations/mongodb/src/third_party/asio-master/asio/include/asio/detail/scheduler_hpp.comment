['text':'','line_number':1,'multiline':False]['text':' detail/scheduler.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' Constructor. Specifies the number of concurrent threads that are likely to','line_number':44,'multiline':False]['text':' run the scheduler. If set to 1 certain optimisation are performed.','line_number':45,'multiline':False]['text':' Destroy all user-defined handler objects owned by the service.','line_number':49,'multiline':False]['text':' Initialise the task, if required.','line_number':52,'multiline':False]['text':' Run the event loop until interrupted or no more work.','line_number':55,'multiline':False]['text':' Run until interrupted or one operation is performed.','line_number':58,'multiline':False]['text':' Run until timeout, interrupted, or one operation is performed.','line_number':61,'multiline':False]['text':' Poll for operations without blocking.','line_number':65,'multiline':False]['text':' Poll for one operation without blocking.','line_number':68,'multiline':False]['text':' Interrupt the event processing loop.','line_number':71,'multiline':False]['text':' Determine whether the scheduler is stopped.','line_number':74,'multiline':False]['text':' Restart in preparation for a subsequent run invocation.','line_number':77,'multiline':False]['text':' Notify that some work has started.','line_number':80,'multiline':False]['text':' Used to compensate for a forthcoming work_finished call. Must be called','line_number':86,'multiline':False]['text':' from within a scheduler-owned thread.','line_number':87,'multiline':False]['text':' Notify that some work has finished.','line_number':90,'multiline':False]['text':' Return whether a handler can be dispatched immediately.','line_number':97,'multiline':False]['text':' Request invocation of the given operation and return immediately. Assumes','line_number':103,'multiline':False]['text':' that work_started() has not yet been called for the operation.','line_number':104,'multiline':False]['text':' Request invocation of the given operation and return immediately. Assumes','line_number':108,'multiline':False]['text':' that work_started() was previously called for the operation.','line_number':109,'multiline':False]['text':' Request invocation of the given operations and return immediately. Assumes','line_number':112,'multiline':False]['text':' that work_started() was previously called for each operation.','line_number':113,'multiline':False]['text':' Enqueue the given operation following a failed attempt to dispatch the','line_number':116,'multiline':False]['text':' operation for immediate invocation.','line_number':117,'multiline':False]['text':' Process unfinished operations as part of a shutdownoperation. Assumes that','line_number':120,'multiline':False]['text':' work_started() was previously called for the operations.','line_number':121,'multiline':False]['text':' Get the concurrency hint that was used to initialise the scheduler.','line_number':124,'multiline':False]['text':' The mutex type used by this scheduler.','line_number':131,'multiline':False]['text':' The event type used by this scheduler.','line_number':134,'multiline':False]['text':' Structure containing thread-specific data.','line_number':137,'multiline':False]['text':' Run at most one operation. May block.','line_number':140,'multiline':False]['text':' Run at most one operation with a timeout. May block.','line_number':144,'multiline':False]['text':' Poll for at most one operation.','line_number':148,'multiline':False]['text':' Stop the task and all idle threads.','line_number':152,'multiline':False]['text':' Wake a single idle thread, or the task, and always unlock the mutex.','line_number':155,'multiline':False]['text':' Helper class to perform task-related operations on block exit.','line_number':159,'multiline':False]['text':' Helper class to call work-related operations on block exit.','line_number':163,'multiline':False]['text':' Whether to optimise for single-threaded use cases.','line_number':167,'multiline':False]['text':' Mutex to protect access to internal data.','line_number':170,'multiline':False]['text':' Event to wake up blocked threads.','line_number':173,'multiline':False]['text':' The task to be run by this service.','line_number':176,'multiline':False]['text':' Operation object to represent the position of the task in the queue.','line_number':179,'multiline':False]['text':' Whether the task has been interrupted.','line_number':185,'multiline':False]['text':' The count of unfinished work.','line_number':188,'multiline':False]['text':' The queue of handlers that are ready to be delivered.','line_number':191,'multiline':False]['text':' Flag to indicate that the dispatcher has been stopped.','line_number':194,'multiline':False]['text':' Flag to indicate that the dispatcher has been shut down.','line_number':197,'multiline':False]['text':' The concurrency hint used to initialise the scheduler.','line_number':200,'multiline':False]['text':' namespace detail','line_number':204,'multiline':False]['text':' namespace asio','line_number':205,'multiline':False]['text':' defined(ASIO_HEADER_ONLY)','line_number':211,'multiline':False]['text':' ASIO_DETAIL_SCHEDULER_HPP','line_number':213,'multiline':False]