['text':'','line_number':1,'multiline':False]['text':' basic_seq_packet_socket.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':27,'multiline':False]['text':'/ Provides sequenced packet socket functionality.','line_number':33,'multiline':False]['text':'*
 * The basic_seq_packet_socket class template provides asynchronous and blocking
 * sequenced packet socket functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':34,'multiline':True]['text':'/ The native representation of a socket.','line_number':48,'multiline':False]['text':'/ The protocol type.','line_number':56,'multiline':False]['text':'/ The endpoint type.','line_number':59,'multiline':False]['text':'/ Construct a basic_seq_packet_socket without opening it.','line_number':62,'multiline':False]['text':'*
   * This constructor creates a sequenced packet socket without opening it. The
   * socket needs to be opened and then connected or accepted before data can
   * be sent or received on it.
   *
   * @param io_context The io_context object that the sequenced packet socket
   * will use to dispatch handlers for any asynchronous operations performed on
   * the socket.
   ','line_number':63,'multiline':True]['text':'/ Construct and open a basic_seq_packet_socket.','line_number':77,'multiline':False]['text':'*
   * This constructor creates and opens a sequenced_packet socket. The socket
   * needs to be connected or accepted before data can be sent or received on
   * it.
   *
   * @param io_context The io_context object that the sequenced packet socket
   * will use to dispatch handlers for any asynchronous operations performed on
   * the socket.
   *
   * @param protocol An object specifying protocol parameters to be used.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':78,'multiline':True]['text':'/ Construct a basic_seq_packet_socket, opening it and binding it to the','line_number':97,'multiline':False]['text':'/ given local endpoint.','line_number':98,'multiline':False]['text':'*
   * This constructor creates a sequenced packet socket and automatically opens
   * it bound to the specified endpoint on the local machine. The protocol used
   * is the protocol associated with the given endpoint.
   *
   * @param io_context The io_context object that the sequenced packet socket
   * will use to dispatch handlers for any asynchronous operations performed on
   * the socket.
   *
   * @param endpoint An endpoint on the local machine to which the sequenced
   * packet socket will be bound.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':99,'multiline':True]['text':'/ Construct a basic_seq_packet_socket on an existing native socket.','line_number':119,'multiline':False]['text':'*
   * This constructor creates a sequenced packet socket object to hold an
   * existing native socket.
   *
   * @param io_context The io_context object that the sequenced packet socket
   * will use to dispatch handlers for any asynchronous operations performed on
   * the socket.
   *
   * @param protocol An object specifying protocol parameters to be used.
   *
   * @param native_socket The new underlying socket implementation.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':120,'multiline':True]['text':'/ Move-construct a basic_seq_packet_socket from another.','line_number':142,'multiline':False]['text':'*
   * This constructor moves a sequenced packet socket from one object to
   * another.
   *
   * @param other The other basic_seq_packet_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_seq_packet_socket(io_context&) constructor.
   ','line_number':143,'multiline':True]['text':'/ Move-assign a basic_seq_packet_socket from another.','line_number':158,'multiline':False]['text':'*
   * This assignment operator moves a sequenced packet socket from one object to
   * another.
   *
   * @param other The other basic_seq_packet_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_seq_packet_socket(io_context&) constructor.
   ','line_number':159,'multiline':True]['text':'/ Move-construct a basic_seq_packet_socket from a socket of another protocol','line_number':175,'multiline':False]['text':'/ type.','line_number':176,'multiline':False]['text':'*
   * This constructor moves a sequenced packet socket from one object to
   * another.
   *
   * @param other The other basic_seq_packet_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_seq_packet_socket(io_context&) constructor.
   ','line_number':177,'multiline':True]['text':'/ Move-assign a basic_seq_packet_socket from a socket of another protocol','line_number':195,'multiline':False]['text':'/ type.','line_number':196,'multiline':False]['text':'*
   * This assignment operator moves a sequenced packet socket from one object to
   * another.
   *
   * @param other The other basic_seq_packet_socket object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_seq_packet_socket(io_context&) constructor.
   ','line_number':197,'multiline':True]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':215,'multiline':False]['text':'/ Destroys the socket.','line_number':217,'multiline':False]['text':'*
   * This function destroys the socket, cancelling any outstanding asynchronous
   * operations associated with the socket as if by calling @c cancel.
   ','line_number':218,'multiline':True]['text':'/ Send some data on the socket.','line_number':226,'multiline':False]['text':'*
   * This function is used to send data on the sequenced packet socket. The
   * function call will block until the data has been sent successfully, or an
   * until error occurs.
   *
   * @param buffers One or more data buffers to be sent on the socket.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @returns The number of bytes sent.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @par Example
   * To send a single data buffer use the @ref buffer function as follows:
   * @code
   * socket.send(asio::buffer(data, size), 0);
   * @endcode
   * See the @ref buffer documentation for information on sending multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':227,'multiline':True]['text':'/ Send some data on the socket.','line_number':260,'multiline':False]['text':'*
   * This function is used to send data on the sequenced packet socket. The
   * function call will block the data has been sent successfully, or an until
   * error occurs.
   *
   * @param buffers One or more data buffers to be sent on the socket.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes sent. Returns 0 if an error occurred.
   *
   * @note The send operation may not transmit all of the data to the peer.
   * Consider using the @ref write function if you need to ensure that all data
   * is written before the blocking operation completes.
   ','line_number':261,'multiline':True]['text':'/ Start an asynchronous send.','line_number':286,'multiline':False]['text':'*
   * This function is used to asynchronously send data on the sequenced packet
   * socket. The function call always returns immediately.
   *
   * @param buffers One or more data buffers to be sent on the socket. Although
   * the buffers object may be copied as necessary, ownership of the underlying
   * memory blocks is retained by the caller, which must guarantee that they
   * remain valid until the handler is called.
   *
   * @param flags Flags specifying how the send call is to be made.
   *
   * @param handler The handler to be called when the send operation completes.
   * Copies will be made of the handler as required. The function signature of
   * the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes sent.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @par Example
   * To send a single data buffer use the @ref buffer function as follows:
   * @code
   * socket.async_send(asio::buffer(data, size), 0, handler);
   * @endcode
   * See the @ref buffer documentation for information on sending multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':287,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':326,'multiline':False]['text':' not meet the documented type requirements for a WriteHandler.','line_number':327,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':333,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':341,'multiline':False]['text':'/ Receive some data on the socket.','line_number':344,'multiline':False]['text':'*
   * This function is used to receive data on the sequenced packet socket. The
   * function call will block until data has been received successfully, or
   * until an error occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param out_flags After the receive call completes, contains flags
   * associated with the received data. For example, if the
   * socket_base::message_end_of_record bit is set then the received data marks
   * the end of a record.
   *
   * @returns The number of bytes received.
   *
   * @throws asio::system_error Thrown on failure. An error code of
   * asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code
   * socket.receive(asio::buffer(data, size), out_flags);
   * @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':345,'multiline':True]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':381,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':384,'multiline':False]['text':'/ Receive some data on the socket.','line_number':389,'multiline':False]['text':'*
   * This function is used to receive data on the sequenced packet socket. The
   * function call will block until data has been received successfully, or
   * until an error occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param in_flags Flags specifying how the receive call is to be made.
   *
   * @param out_flags After the receive call completes, contains flags
   * associated with the received data. For example, if the
   * socket_base::message_end_of_record bit is set then the received data marks
   * the end of a record.
   *
   * @returns The number of bytes received.
   *
   * @throws asio::system_error Thrown on failure. An error code of
   * asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @note The receive operation may not receive all of the requested number of
   * bytes. Consider using the @ref read function if you need to ensure that the
   * requested amount of data is read before the blocking operation completes.
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code
   * socket.receive(asio::buffer(data, size), 0, out_flags);
   * @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':390,'multiline':True]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':433,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':436,'multiline':False]['text':'/ Receive some data on a connected socket.','line_number':441,'multiline':False]['text':'*
   * This function is used to receive data on the sequenced packet socket. The
   * function call will block until data has been received successfully, or
   * until an error occurs.
   *
   * @param buffers One or more buffers into which the data will be received.
   *
   * @param in_flags Flags specifying how the receive call is to be made.
   *
   * @param out_flags After the receive call completes, contains flags
   * associated with the received data. For example, if the
   * socket_base::message_end_of_record bit is set then the received data marks
   * the end of a record.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes received. Returns 0 if an error occurred.
   *
   * @note The receive operation may not receive all of the requested number of
   * bytes. Consider using the @ref read function if you need to ensure that the
   * requested amount of data is read before the blocking operation completes.
   ','line_number':442,'multiline':True]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':472,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':475,'multiline':False]['text':'/ Start an asynchronous receive.','line_number':478,'multiline':False]['text':'*
   * This function is used to asynchronously receive data from the sequenced
   * packet socket. The function call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be received.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param out_flags Once the asynchronous operation completes, contains flags
   * associated with the received data. For example, if the
   * socket_base::message_end_of_record bit is set then the received data marks
   * the end of a record. The caller must guarantee that the referenced
   * variable remains valid until the handler is called.
   *
   * @param handler The handler to be called when the receive operation
   * completes. Copies will be made of the handler as required. The function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes received.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code
   * socket.async_receive(asio::buffer(data, size), out_flags, handler);
   * @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':479,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':523,'multiline':False]['text':' not meet the documented type requirements for a ReadHandler.','line_number':524,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':531,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':540,'multiline':False]['text':'/ Start an asynchronous receive.','line_number':543,'multiline':False]['text':'*
   * This function is used to asynchronously receive data from the sequenced
   * data socket. The function call always returns immediately.
   *
   * @param buffers One or more buffers into which the data will be received.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the handler is called.
   *
   * @param in_flags Flags specifying how the receive call is to be made.
   *
   * @param out_flags Once the asynchronous operation completes, contains flags
   * associated with the received data. For example, if the
   * socket_base::message_end_of_record bit is set then the received data marks
   * the end of a record. The caller must guarantee that the referenced
   * variable remains valid until the handler is called.
   *
   * @param handler The handler to be called when the receive operation
   * completes. Copies will be made of the handler as required. The function
   * signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred           // Number of bytes received.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   *
   * @par Example
   * To receive into a single data buffer use the @ref buffer function as
   * follows:
   * @code
   * socket.async_receive(
   *     asio::buffer(data, size),
   *     0, out_flags, handler);
   * @endcode
   * See the @ref buffer documentation for information on receiving into
   * multiple buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':544,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':593,'multiline':False]['text':' not meet the documented type requirements for a ReadHandler.','line_number':594,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':601,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':610,'multiline':False]['text':' namespace asio','line_number':614,'multiline':False]['text':' ASIO_BASIC_SEQ_PACKET_SOCKET_HPP','line_number':618,'multiline':False]