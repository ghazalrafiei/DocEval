['text':'','line_number':1,'multiline':False]['text':' execution_context.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' !defined(GENERATING_DOCUMENTATION)','line_number':37,'multiline':False]['text':'/ A context for function object execution.','line_number':41,'multiline':False]['text':'*
 * An execution context represents a place where function objects will be
 * executed. An @c io_context is an example of an execution context.
 *
 * @par The execution_context class and services
 *
 * Class execution_context implements an extensible, type-safe, polymorphic set
 * of services, indexed by service type.
 *
 * Services exist to manage the resources that are shared across an execution
 * context. For example, timers may be implemented in terms of a single timer
 * queue, and this queue would be stored in a service.
 *
 * Access to the services of an execution_context is via three function
 * templates, use_service(), add_service() and has_service().
 *
 * In a call to @c use_service<Service>(), the type argument chooses a service,
 * making available all members of the named type. If @c Service is not present
 * in an execution_context, an object of type @c Service is created and added
 * to the execution_context. A C++ program can check if an execution_context
 * implements a particular service with the function template @c
 * has_service<Service>().
 *
 * Service objects may be explicitly added to an execution_context using the
 * function template @c add_service<Service>(). If the @c Service is already
 * present, the service_already_exists exception is thrown. If the owner of the
 * service is not the same object as the execution_context parameter, the
 * invalid_service_owner exception is thrown.
 *
 * Once a service reference is obtained from an execution_context object by
 * calling use_service(), that reference remains usable as long as the owning
 * execution_context object exists.
 *
 * All service implementations have execution_context::service as a public base
 * class. Custom services may be implemented by deriving from this class and
 * then added to an execution_context using the facilities described above.
 *
 * @par The execution_context as a base class
 *
 * Class execution_context may be used only as a base class for concrete
 * execution context types. The @c io_context is an example of such a derived
 * type.
 *
 * On destruction, a class that is derived from execution_context must perform
 * <tt>execution_context::shutdown()</tt> followed by
 * <tt>execution_context::destroy()</tt>.
 *
 * This destruction sequence permits programs to simplify their resource
 * management by using @c shared_ptr<>. Where an object's lifetime is tied to
 * the lifetime of a connection (or some other sequence of asynchronous
 * operations), a @c shared_ptr to the object would be bound into the handlers
 * for all asynchronous operations associated with it. This works as follows:
 *
 * @li When a single connection ends, all associated asynchronous operations
 * complete. The corresponding handler objects are destroyed, and all @c
 * shared_ptr references to the objects are destroyed.
 *
 * @li To shut down the whole program, the io_context function stop() is called
 * to terminate any run() calls as soon as possible. The io_context destructor
 * calls @c shutdown() and @c destroy() to destroy all pending handlers,
 * causing all @c shared_ptr references to all connection objects to be
 * destroyed.
 ','line_number':42,'multiline':True]['text':'/ Constructor.','line_number':113,'multiline':False]['text':'/ Destructor.','line_number':116,'multiline':False]['text':'/ Shuts down all services in the context.','line_number':119,'multiline':False]['text':'*
   * This function is implemented as follows:
   *
   * @li For each service object @c svc in the execution_context set, in
   * reverse order of the beginning of service object lifetime, performs @c
   * svc->shutdown().
   ','line_number':120,'multiline':True]['text':'/ Destroys all services in the context.','line_number':129,'multiline':False]['text':'*
   * This function is implemented as follows:
   *
   * @li For each service object @c svc in the execution_context set, in
   * reverse order * of the beginning of service object lifetime, performs
   * <tt>delete static_cast<execution_context::service*>(svc)</tt>.
   ','line_number':130,'multiline':True]['text':'/ Fork-related event notifications.','line_number':140,'multiline':False]['text':'/ Notify the context that the process is about to fork.','line_number':143,'multiline':False]['text':'/ Notify the context that the process has forked and is the parent.','line_number':146,'multiline':False]['text':'/ Notify the context that the process has forked and is the child.','line_number':149,'multiline':False]['text':'/ Notify the execution_context of a fork-related event.','line_number':153,'multiline':False]['text':'*
   * This function is used to inform the execution_context that the process is
   * about to fork, or has just forked. This allows the execution_context, and
   * the services it contains, to perform any necessary housekeeping to ensure
   * correct operation following a fork.
   *
   * This function must not be called while any other execution_context
   * function, or any function associated with the execution_context's derived
   * class, is being called in another thread. It is, however, safe to call
   * this function from within a completion handler, provided no other thread
   * is accessing the execution_context or its derived class.
   *
   * @param event A fork-related event.
   *
   * @throws asio::system_error Thrown on failure. If the notification
   * fails the execution_context object should no longer be used and should be
   * destroyed.
   *
   * @par Example
   * The following code illustrates how to incorporate the notify_fork()
   * function:
   * @code my_execution_context.notify_fork(execution_context::fork_prepare);
   * if (fork() == 0)
   * {
   *   // This is the child process.
   *   my_execution_context.notify_fork(execution_context::fork_child);
   * }
   * else
   * {
   *   // This is the parent process.
   *   my_execution_context.notify_fork(execution_context::fork_parent);
   * } @endcode
   *
   * @note For each service object @c svc in the execution_context set,
   * performs <tt>svc->notify_fork();</tt>. When processing the fork_prepare
   * event, services are visited in reverse order of the beginning of service
   * object lifetime. Otherwise, services are visited in order of the beginning
   * of service object lifetime.
   ','line_number':154,'multiline':True]['text':'/ Obtain the service object corresponding to the given type.','line_number':195,'multiline':False]['text':'*
   * This function is used to locate a service object that corresponds to the
   * given service type. If there is no existing implementation of the service,
   * then the execution_context will create a new instance of the service.
   *
   * @param e The execution_context object that owns the service.
   *
   * @return The service interface implementing the specified service type.
   * Ownership of the service interface is not transferred to the caller.
   ','line_number':196,'multiline':True]['text':'/ Obtain the service object corresponding to the given type.','line_number':209,'multiline':False]['text':'*
   * This function is used to locate a service object that corresponds to the
   * given service type. If there is no existing implementation of the service,
   * then the io_context will create a new instance of the service.
   *
   * @param ioc The io_context object that owns the service.
   *
   * @return The service interface implementing the specified service type.
   * Ownership of the service interface is not transferred to the caller.
   *
   * @note This overload is preserved for backwards compatibility with services
   * that inherit from io_context::service.
   ','line_number':210,'multiline':True]['text':'/ Creates a service object and adds it to the execution_context.','line_number':228,'multiline':False]['text':'*
   * This function is used to add a service to the execution_context.
   *
   * @param e The execution_context object that owns the service.
   *
   * @param args Zero or more arguments to be passed to the service
   * constructor.
   *
   * @throws asio::service_already_exists Thrown if a service of the
   * given type is already present in the execution_context.
   ','line_number':229,'multiline':True]['text':' defined(ASIO_HAS_VARIADIC_TEMPLATES)','line_number':249,'multiline':False]['text':'','line_number':258,'multiline':True]['text':' defined(ASIO_HAS_VARIADIC_TEMPLATES)','line_number':262,'multiline':False]['text':'/ (Deprecated: Use make_service().) Add a service object to the','line_number':264,'multiline':False]['text':'/ execution_context.','line_number':265,'multiline':False]['text':'*
   * This function is used to add a service to the execution_context.
   *
   * @param e The execution_context object that owns the service.
   *
   * @param svc The service object. On success, ownership of the service object
   * is transferred to the execution_context. When the execution_context object
   * is destroyed, it will destroy the service object by performing: @code
   * delete static_cast<execution_context::service*>(svc) @endcode
   *
   * @throws asio::service_already_exists Thrown if a service of the
   * given type is already present in the execution_context.
   *
   * @throws asio::invalid_service_owner Thrown if the service's owning
   * execution_context is not the execution_context object specified by the
   * @c e parameter.
   ','line_number':266,'multiline':True]['text':'/ Determine if an execution_context contains a specified service type.','line_number':286,'multiline':False]['text':'*
   * This function is used to determine whether the execution_context contains a
   * service object corresponding to the given service type.
   *
   * @param e The execution_context object that owns the service.
   *
   * @return A boolean indicating whether the execution_context contains the
   * service.
   ','line_number':287,'multiline':True]['text':' The service registry.','line_number':300,'multiline':False]['text':'/ Class used to uniquely identify a service.','line_number':304,'multiline':False]['text':'/ Constructor.','line_number':309,'multiline':False]['text':'/ Base class for all io_context services.','line_number':313,'multiline':False]['text':'/ Get the context object that owns the service.','line_number':318,'multiline':False]['text':'/ Constructor.','line_number':322,'multiline':False]['text':'*
   * @param owner The execution_context object that owns the service.
   ','line_number':323,'multiline':True]['text':'/ Destructor.','line_number':328,'multiline':False]['text':'/ Destroy all user-defined handler objects owned by the service.','line_number':332,'multiline':False]['text':'/ Handle notification of a fork-related event to perform any necessary','line_number':335,'multiline':False]['text':'/ housekeeping.','line_number':336,'multiline':False]['text':'*
   * This function is not a pure virtual so that services only have to
   * implement it if necessary. The default implementation does nothing.
   ','line_number':337,'multiline':True]['text':'/ Exception thrown when trying to add a duplicate service to an','line_number':356,'multiline':False]['text':'/ execution_context.','line_number':357,'multiline':False]['text':'/ Exception thrown when trying to add a service object to an','line_number':365,'multiline':False]['text':'/ execution_context where the service has a different owner.','line_number':366,'multiline':False]['text':' Special derived service id type to keep classes header-file only.','line_number':376,'multiline':False]['text':' Special service base class to keep classes header-file only.','line_number':383,'multiline':False]['text':' Constructor.','line_number':391,'multiline':False]['text':' namespace detail','line_number':401,'multiline':False]['text':' namespace asio','line_number':402,'multiline':False]['text':' defined(ASIO_HEADER_ONLY)','line_number':409,'multiline':False]['text':' ASIO_EXECUTION_CONTEXT_HPP','line_number':411,'multiline':False]