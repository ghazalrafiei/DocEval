['text':'','line_number':1,'multiline':False]['text':' spawn.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Context object the represents the currently executing coroutine.','line_number':33,'multiline':False]['text':'*
 * The basic_yield_context class is used to represent the currently executing
 * stackful coroutine. A basic_yield_context may be passed as a handler to an
 * asynchronous operation. For example:
 *
 * @code template <typename Handler>
 * void my_coroutine(basic_yield_context<Handler> yield)
 * {
 *   ...
 *   std::size_t n = my_socket.async_read_some(buffer, yield);
 *   ...
 * } @endcode
 *
 * The initiating function (async_read_some in the above example) suspends the
 * current coroutine. The coroutine is resumed when the asynchronous operation
 * completes, and the result of the operation is returned.
 ','line_number':34,'multiline':True]['text':'/ The coroutine callee type, used by the implementation.','line_number':55,'multiline':False]['text':'*
   * When using Boost.Coroutine v1, this type is:
   * @code typename coroutine<void()> @endcode
   * When using Boost.Coroutine v2 (unidirectional coroutines), this type is:
   * @code push_coroutine<void> @endcode
   ','line_number':56,'multiline':True]['text':'/ The coroutine caller type, used by the implementation.','line_number':70,'multiline':False]['text':'*
   * When using Boost.Coroutine v1, this type is:
   * @code typename coroutine<void()>::caller_type @endcode
   * When using Boost.Coroutine v2 (unidirectional coroutines), this type is:
   * @code pull_coroutine<void> @endcode
   ','line_number':71,'multiline':True]['text':'/ Construct a yield context to represent the specified coroutine.','line_number':85,'multiline':False]['text':'*
   * Most applications do not need to use this constructor. Instead, the
   * spawn() function passes a yield context as an argument to the coroutine
   * function.
   ','line_number':86,'multiline':True]['text':'/ Construct a yield context from another yield context type.','line_number':101,'multiline':False]['text':'*
   * Requires that OtherHandler be convertible to Handler.
   ','line_number':102,'multiline':True]['text':'/ Return a yield context that sets the specified error_code.','line_number':114,'multiline':False]['text':'*
   * By default, when a yield context is used with an asynchronous operation, a
   * non-success error_code is converted to system_error and thrown. This
   * operator may be used to specify an error_code object that should instead be
   * set with the asynchronous operation's result. For example:
   *
   * @code template <typename Handler>
   * void my_coroutine(basic_yield_context<Handler> yield)
   * {
   *   ...
   *   std::size_t n = my_socket.async_read_some(buffer, yield[ec]);
   *   if (ec)
   *   {
   *     // An error occurred.
   *   }
   *   ...
   * } @endcode
   ','line_number':115,'multiline':True]['text':' defined(GENERATING_DOCUMENTATION)','line_number':142,'multiline':False]['text':'/ Context object that represents the currently executing coroutine.','line_number':150,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':152,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':155,'multiline':False]['text':'*
 * @defgroup spawn asio::spawn
 *
 * @brief Start a new stackful coroutine.
 *
 * The spawn() function is a high-level wrapper over the Boost.Coroutine
 * library. This function enables programs to implement asynchronous logic in a
 * synchronous manner, as illustrated by the following example:
 *
 * @code asio::spawn(my_strand, do_echo);
 *
 * // ...
 *
 * void do_echo(asio::yield_context yield)
 * {
 *   try
 *   {
 *     char data[128];
 *     for (;;)
 *     {
 *       std::size_t length =
 *         my_socket.async_read_some(
 *           asio::buffer(data), yield);
 *
 *       asio::async_write(my_socket,
 *           asio::buffer(data, length), yield);
 *     }
 *   }
 *   catch (std::exception& e)
 *   {
 *     // ...
 *   }
 * } @endcode
 ','line_number':157,'multiline':True]['text':'@{','line_number':191,'multiline':True]['text':'/ Start a new stackful coroutine, calling the specified handler when it','line_number':193,'multiline':False]['text':'/ completes.','line_number':194,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(basic_yield_context<Handler> yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':195,'multiline':True]['text':'/ Start a new stackful coroutine, calling the specified handler when it','line_number':208,'multiline':False]['text':'/ completes.','line_number':209,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param handler A handler to be called when the coroutine exits. More
 * importantly, the handler provides an execution context (via the the handler
 * invocation hook) for the coroutine. The handler must have the signature:
 * @code void handler(); @endcode
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(basic_yield_context<Handler> yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':210,'multiline':True]['text':'/ Start a new stackful coroutine, inheriting the execution context of another.','line_number':231,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param ctx Identifies the current coroutine as a parent of the new
 * coroutine. This specifies that the new coroutine should inherit the
 * execution context of the parent. For example, if the parent coroutine is
 * executing in a particular strand, then the new coroutine will execute in the
 * same strand.
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(basic_yield_context<Handler> yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':232,'multiline':True]['text':'/ Start a new stackful coroutine that executes on a given executor.','line_number':252,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param ex Identifies the executor that will run the coroutine. The new
 * coroutine is implicitly given its own strand within this executor.
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(yield_context yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':253,'multiline':True]['text':'/ Start a new stackful coroutine that executes on a given strand.','line_number':271,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param ex Identifies the strand that will run the coroutine.
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(yield_context yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':272,'multiline':True]['text':'/ Start a new stackful coroutine that executes in the context of a strand.','line_number':288,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param s Identifies a strand. By starting multiple coroutines on the same
 * strand, the implementation ensures that none of those coroutines can execute
 * simultaneously.
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(yield_context yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':289,'multiline':True]['text':'/ Start a new stackful coroutine that executes on a given execution context.','line_number':307,'multiline':False]['text':'*
 * This function is used to launch a new coroutine.
 *
 * @param ctx Identifies the execution context that will run the coroutine. The
 * new coroutine is implicitly given its own strand within this execution
 * context.
 *
 * @param function The coroutine function. The function must have the signature:
 * @code void function(yield_context yield); @endcode
 *
 * @param attributes Boost.Coroutine attributes used to customise the coroutine.
 ','line_number':308,'multiline':True]['text':'@}','line_number':328,'multiline':True]['text':' namespace asio','line_number':330,'multiline':False]['text':' ASIO_SPAWN_HPP','line_number':336,'multiline':False]