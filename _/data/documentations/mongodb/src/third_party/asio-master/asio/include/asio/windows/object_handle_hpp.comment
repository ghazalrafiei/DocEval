['text':'','line_number':1,'multiline':False]['text':' windows/object_handle.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':' Copyright (c) 2011 Boris Schaeling (boris@highscore.de)','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':17,'multiline':False]['text':' defined(ASIO_HAS_MOVE)','line_number':33,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':37,'multiline':False]['text':' Typedef for the typical usage of an object handle.','line_number':47,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':49,'multiline':False]['text':'/ Provides object-oriented handle functionality.','line_number':50,'multiline':False]['text':'*
 * The windows::object_handle class provides asynchronous and blocking
 * object-oriented handle functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':51,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':63,'multiline':False]['text':'/ The native representation of a handle.','line_number':66,'multiline':False]['text':'/ An object_handle is always the lowest layer.','line_number':73,'multiline':False]['text':'/ Construct an object_handle without opening it.','line_number':76,'multiline':False]['text':'*
   * This constructor creates an object handle without opening it.
   *
   * @param io_context The io_context object that the object handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   ','line_number':77,'multiline':True]['text':'/ Construct an object_handle on an existing native handle.','line_number':88,'multiline':False]['text':'*
   * This constructor creates an object handle object to hold an existing native
   * handle.
   *
   * @param io_context The io_context object that the object handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   *
   * @param native_handle The new underlying handle implementation.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':89,'multiline':True]['text':'/ Move-construct an object_handle from another.','line_number':110,'multiline':False]['text':'*
   * This constructor moves an object handle from one object to another.
   *
   * @param other The other object_handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c object_handle(io_context&) constructor.
   ','line_number':111,'multiline':True]['text':'/ Move-assign an object_handle from another.','line_number':125,'multiline':False]['text':'*
   * This assignment operator moves an object handle from one object to another.
   *
   * @param other The other object_handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c object_handle(io_context&) constructor.
   ','line_number':126,'multiline':True]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':140,'multiline':False]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':143,'multiline':False]['text':'/ object.','line_number':144,'multiline':False]['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':145,'multiline':True]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':157,'multiline':False]['text':'/ object.','line_number':158,'multiline':False]['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':159,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':170,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':172,'multiline':False]['text':'/ Get a reference to the lowest layer.','line_number':178,'multiline':False]['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since an object_handle cannot contain any further layers, it simply
   * returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':179,'multiline':True]['text':'/ Get a const reference to the lowest layer.','line_number':192,'multiline':False]['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since an object_handle cannot contain any further layers, it simply
   * returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':193,'multiline':True]['text':'/ Assign an existing native handle to the handle.','line_number':206,'multiline':False]['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':207,'multiline':True]['text':'/ Assign an existing native handle to the handle.','line_number':221,'multiline':False]['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':222,'multiline':True]['text':'/ Determine whether the handle is open.','line_number':236,'multiline':False]['text':'/ Close the handle.','line_number':242,'multiline':False]['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':243,'multiline':True]['text':'/ Close the handle.','line_number':257,'multiline':False]['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':258,'multiline':True]['text':'/ Get the native handle representation.','line_number':271,'multiline':False]['text':'*
   * This function may be used to obtain the underlying representation of the
   * handle. This is intended to allow access to native handle functionality
   * that is not otherwise provided.
   ','line_number':272,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':282,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':283,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':297,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':298,'multiline':True]['text':'/ Perform a blocking wait on the object handle.','line_number':311,'multiline':False]['text':'*
   * This function is used to wait for the object handle to be set to the
   * signalled state. This function blocks and does not return until the object
   * handle has been set to the signalled state.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':312,'multiline':True]['text':'/ Perform a blocking wait on the object handle.','line_number':326,'multiline':False]['text':'*
   * This function is used to wait for the object handle to be set to the
   * signalled state. This function blocks and does not return until the object
   * handle has been set to the signalled state.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':327,'multiline':True]['text':'/ Start an asynchronous wait on the object handle.','line_number':339,'multiline':False]['text':'*
   * This function is be used to initiate an asynchronous wait against the
   * object handle. It always returns immediately.
   *
   * @param handler The handler to be called when the object handle is set to
   * the signalled state. Copies will be made of the handler as required. The
   * function signature of the handler must be:
   * @code void handler(
   *   const asio::error_code& error // Result of operation.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   ','line_number':340,'multiline':True]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':369,'multiline':False]['text':' namespace windows','line_number':371,'multiline':False]['text':' namespace asio','line_number':372,'multiline':False]['text':' defined(ASIO_HAS_WINDOWS_OBJECT_HANDLE)','line_number':378,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':379,'multiline':False]['text':' ASIO_WINDOWS_OBJECT_HANDLE_HPP','line_number':381,'multiline':False]