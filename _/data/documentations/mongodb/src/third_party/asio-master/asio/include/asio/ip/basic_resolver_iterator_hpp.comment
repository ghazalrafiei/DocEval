['text':'','line_number':1,'multiline':False]['text':' ip/basic_resolver_iterator.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(ASIO_WINDOWS_RUNTIME)','line_number':31,'multiline':False]['text':'/ An iterator over the entries produced by a resolver.','line_number':38,'multiline':False]['text':'*
 * The asio::ip::basic_resolver_iterator class template is used to define
 * iterators over the results returned by a resolver.
 *
 * The iterator's value_type, obtained when the iterator is dereferenced, is:
 * @code const basic_resolver_entry<InternetProtocol> @endcode
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':39,'multiline':True]['text':'/ The type used for the distance between two iterators.','line_number':54,'multiline':False]['text':'/ The type of the value pointed to by the iterator.','line_number':57,'multiline':False]['text':'/ The type of the result of applying operator->() to the iterator.','line_number':60,'multiline':False]['text':'/ The type of the result of applying operator*() to the iterator.','line_number':63,'multiline':False]['text':'/ The iterator category.','line_number':66,'multiline':False]['text':'/ Default constructor creates an end iterator.','line_number':69,'multiline':False]['text':'/ Copy constructor.','line_number':75,'multiline':False]['text':'/ Move constructor.','line_number':83,'multiline':False]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':90,'multiline':False]['text':'/ Assignment operator.','line_number':92,'multiline':False]['text':'/ Move-assignment operator.','line_number':101,'multiline':False]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':113,'multiline':False]['text':'/ Dereference an iterator.','line_number':115,'multiline':False]['text':'/ Dereference an iterator.','line_number':121,'multiline':False]['text':'/ Increment operator (prefix).','line_number':127,'multiline':False]['text':'/ Increment operator (postfix).','line_number':134,'multiline':False]['text':'/ Test two iterators for equality.','line_number':142,'multiline':False]['text':'/ Test two iterators for inequality.','line_number':149,'multiline':False]['text':' Reset state to match a default constructed end iterator.','line_number':161,'multiline':False]['text':' namespace ip','line_number':187,'multiline':False]['text':' namespace asio','line_number':188,'multiline':False]['text':' ASIO_IP_BASIC_RESOLVER_ITERATOR_HPP','line_number':192,'multiline':False]