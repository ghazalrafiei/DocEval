['text':'','line_number':1,'multiline':False]['text':' buffered_write_stream.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Adds buffering to the write-related operations of a stream.','line_number':35,'multiline':False]['text':'*
 * The buffered_write_stream class template can be used to add buffering to the
 * synchronous and asynchronous write operations of a stream.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * @par Concepts:
 * AsyncReadStream, AsyncWriteStream, Stream, SyncReadStream, SyncWriteStream.
 ','line_number':36,'multiline':True]['text':'/ The type of the next layer.','line_number':52,'multiline':False]['text':'/ The type of the lowest layer.','line_number':55,'multiline':False]['text':'/ The type of the executor associated with the object.','line_number':58,'multiline':False]['text':'/ The default buffer size.','line_number':62,'multiline':False]['text':'/ Construct, passing the specified argument to initialise the next layer.','line_number':68,'multiline':False]['text':'/ Construct, passing the specified argument to initialise the next layer.','line_number':76,'multiline':False]['text':'/ Get a reference to the next layer.','line_number':84,'multiline':False]['text':'/ Get a reference to the lowest layer.','line_number':90,'multiline':False]['text':'/ Get a const reference to the lowest layer.','line_number':96,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':102,'multiline':False]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':109,'multiline':False]['text':'/ object.','line_number':110,'multiline':False]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':116,'multiline':False]['text':'/ object.','line_number':117,'multiline':False]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':122,'multiline':False]['text':'/ Close the stream.','line_number':124,'multiline':False]['text':'/ Close the stream.','line_number':130,'multiline':False]['text':'/ Flush all data from the buffer to the next layer. Returns the number of','line_number':137,'multiline':False]['text':'/ bytes written to the next layer on the last write operation. Throws an','line_number':138,'multiline':False]['text':'/ exception on failure.','line_number':139,'multiline':False]['text':'/ Flush all data from the buffer to the next layer. Returns the number of','line_number':142,'multiline':False]['text':'/ bytes written to the next layer on the last write operation, or 0 if an','line_number':143,'multiline':False]['text':'/ error occurred.','line_number':144,'multiline':False]['text':'/ Start an asynchronous flush.','line_number':147,'multiline':False]['text':'/ Write the given data to the stream. Returns the number of bytes written.','line_number':153,'multiline':False]['text':'/ Throws an exception on failure.','line_number':154,'multiline':False]['text':'/ Write the given data to the stream. Returns the number of bytes written,','line_number':158,'multiline':False]['text':'/ or 0 if an error occurred and the error handler did not throw.','line_number':159,'multiline':False]['text':'/ Start an asynchronous write. The data being written must be valid for the','line_number':164,'multiline':False]['text':'/ lifetime of the asynchronous operation.','line_number':165,'multiline':False]['text':'/ Read some data from the stream. Returns the number of bytes read. Throws','line_number':172,'multiline':False]['text':'/ an exception on failure.','line_number':173,'multiline':False]['text':'/ Read some data from the stream. Returns the number of bytes read or 0 if','line_number':180,'multiline':False]['text':'/ an error occurred.','line_number':181,'multiline':False]['text':'/ Start an asynchronous read. The buffer into which the data will be read','line_number':189,'multiline':False]['text':'/ must be valid for the lifetime of the asynchronous operation.','line_number':190,'multiline':False]['text':'/ Peek at the incoming data on the stream. Returns the number of bytes read.','line_number':201,'multiline':False]['text':'/ Throws an exception on failure.','line_number':202,'multiline':False]['text':'/ Peek at the incoming data on the stream. Returns the number of bytes read,','line_number':209,'multiline':False]['text':'/ or 0 if an error occurred.','line_number':210,'multiline':False]['text':'/ Determine the amount of data that may be read without blocking.','line_number':218,'multiline':False]['text':'/ Determine the amount of data that may be read without blocking.','line_number':224,'multiline':False]['text':'/ Copy data into the internal buffer from the specified source buffer.','line_number':231,'multiline':False]['text':'/ Returns the number of bytes copied.','line_number':232,'multiline':False]['text':'/ The next layer.','line_number':236,'multiline':False]['text':' The data in the buffer.','line_number':239,'multiline':False]['text':' namespace asio','line_number':243,'multiline':False]['text':' ASIO_BUFFERED_WRITE_STREAM_HPP','line_number':249,'multiline':False]