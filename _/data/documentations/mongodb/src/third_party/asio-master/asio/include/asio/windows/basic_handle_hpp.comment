['text':'','line_number':1,'multiline':False]['text':' windows/basic_handle.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':'/ Provides Windows handle functionality.','line_number':36,'multiline':False]['text':'*
 * The windows::basic_handle class template provides the ability to wrap a
 * Windows handle.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':37,'multiline':True]['text':'/ The native representation of a handle.','line_number':50,'multiline':False]['text':'/ A basic_handle is always the lowest layer.','line_number':53,'multiline':False]['text':'/ Construct a basic_handle without opening it.','line_number':56,'multiline':False]['text':'*
   * This constructor creates a handle without opening it.
   *
   * @param io_context The io_context object that the handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   ','line_number':57,'multiline':True]['text':'/ Construct a basic_handle on an existing native handle.','line_number':68,'multiline':False]['text':'*
   * This constructor creates a handle object to hold an existing native handle.
   *
   * @param io_context The io_context object that the handle will use to
   * dispatch handlers for any asynchronous operations performed on the handle.
   *
   * @param handle A native handle.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':69,'multiline':True]['text':'/ Move-construct a basic_handle from another.','line_number':89,'multiline':False]['text':'*
   * This constructor moves a handle from one object to another.
   *
   * @param other The other basic_handle object from which the move will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_handle(io_context&) constructor.
   ','line_number':90,'multiline':True]['text':'/ Move-assign a basic_handle from another.','line_number':104,'multiline':False]['text':'*
   * This assignment operator moves a handle from one object to another.
   *
   * @param other The other basic_handle object from which the move will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_handle(io_context&) constructor.
   ','line_number':105,'multiline':True]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':119,'multiline':False]['text':'/ Get a reference to the lowest layer.','line_number':121,'multiline':False]['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since a basic_handle cannot contain any further layers, it simply
   * returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':122,'multiline':True]['text':'/ Get a const reference to the lowest layer.','line_number':135,'multiline':False]['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since a basic_handle cannot contain any further layers, it simply
   * returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':136,'multiline':True]['text':'/ Assign an existing native handle to the handle.','line_number':149,'multiline':False]['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':150,'multiline':True]['text':'/ Assign an existing native handle to the handle.','line_number':164,'multiline':False]['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':165,'multiline':True]['text':'/ Determine whether the handle is open.','line_number':179,'multiline':False]['text':'/ Close the handle.','line_number':185,'multiline':False]['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':186,'multiline':True]['text':'/ Close the handle.','line_number':200,'multiline':False]['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':201,'multiline':True]['text':'/ Get the native handle representation.','line_number':214,'multiline':False]['text':'*
   * This function may be used to obtain the underlying representation of the
   * handle. This is intended to allow access to native handle functionality
   * that is not otherwise provided.
   ','line_number':215,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':225,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':226,'multiline':True]['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':240,'multiline':False]['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':241,'multiline':True]['text':'/ Protected destructor to prevent deletion through this type.','line_number':255,'multiline':False]['text':' namespace windows','line_number':261,'multiline':False]['text':' namespace asio','line_number':262,'multiline':False]['text':' defined(ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE)','line_number':266,'multiline':False]['text':'   || defined(ASIO_HAS_WINDOWS_STREAM_HANDLE)','line_number':267,'multiline':False]['text':'   || defined(ASIO_HAS_WINDOWS_OBJECT_HANDLE)','line_number':268,'multiline':False]['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':269,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':271,'multiline':False]['text':' ASIO_WINDOWS_BASIC_HANDLE_HPP','line_number':273,'multiline':False]