['text':'','line_number':1,'multiline':False]['text':' associated_allocator.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' namespace detail','line_number':56,'multiline':False]['text':'/ Traits type used to obtain the allocator associated with an object.','line_number':58,'multiline':False]['text':'*
 * A program may specialise this traits type if the @c T template parameter in
 * the specialisation is a user-defined type. The template parameter @c
 * Allocator shall be a type meeting the Allocator requirements.
 *
 * Specialisations shall meet the following requirements, where @c t is a const
 * reference to an object of type @c T, and @c a is an object of type @c
 * Allocator.
 *
 * @li Provide a nested typedef @c type that identifies a type meeting the
 * Allocator requirements.
 *
 * @li Provide a noexcept static member function named @c get, callable as @c
 * get(t) and with return type @c type.
 *
 * @li Provide a noexcept static member function named @c get, callable as @c
 * get(t,a) and with return type @c type.
 ','line_number':59,'multiline':True]['text':'/ If @c T has a nested type @c allocator_type, <tt>T::allocator_type</tt>.','line_number':80,'multiline':False]['text':'/ Otherwise @c Allocator.','line_number':81,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':84,'multiline':False]['text':' defined(GENERATING_DOCUMENTATION)','line_number':86,'multiline':False]['text':'/ If @c T has a nested type @c allocator_type, returns','line_number':88,'multiline':False]['text':'/ <tt>t.get_allocator()</tt>. Otherwise returns @c a.','line_number':89,'multiline':False]['text':'/ Helper function to obtain an object's associated allocator.','line_number':97,'multiline':False]['text':'*
 * @returns <tt>associated_allocator<T>::get(t)</tt>
 ','line_number':98,'multiline':True]['text':'/ Helper function to obtain an object's associated allocator.','line_number':108,'multiline':False]['text':'*
 * @returns <tt>associated_allocator<T, Allocator>::get(t, a)</tt>
 ','line_number':109,'multiline':True]['text':' defined(ASIO_HAS_ALIAS_TEMPLATES)','line_number':125,'multiline':False]['text':' namespace asio','line_number':127,'multiline':False]['text':' ASIO_ASSOCIATED_ALLOCATOR_HPP','line_number':131,'multiline':False]