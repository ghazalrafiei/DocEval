['text':'','line_number':1,'multiline':False]['text':' detail/deadline_timer_service.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(ASIO_WINDOWS_RUNTIME)','line_number':37,'multiline':False]['text':' The time type.','line_number':49,'multiline':False]['text':' The duration type.','line_number':52,'multiline':False]['text':' The implementation type of the timer. This type is dependent on the','line_number':55,'multiline':False]['text':' underlying implementation of the timer service.','line_number':56,'multiline':False]['text':' Constructor.','line_number':65,'multiline':False]['text':' Destructor.','line_number':74,'multiline':False]['text':' Destroy all user-defined handler objects owned by the service.','line_number':80,'multiline':False]['text':' Construct a new timer implementation.','line_number':85,'multiline':False]['text':' Destroy a timer implementation.','line_number':92,'multiline':False]['text':' Move-construct a new serial port implementation.','line_number':99,'multiline':False]['text':' Move-assign from another serial port implementation.','line_number':112,'multiline':False]['text':' Cancel any asynchronous wait operations associated with the timer.','line_number':131,'multiline':False]['text':' Cancels one asynchronous wait operation associated with the timer.','line_number':149,'multiline':False]['text':' Get the expiry time for the timer as an absolute time.','line_number':170,'multiline':False]['text':' Get the expiry time for the timer as an absolute time.','line_number':176,'multiline':False]['text':' Get the expiry time for the timer relative to now.','line_number':182,'multiline':False]['text':' Set the expiry time for the timer as an absolute time.','line_number':188,'multiline':False]['text':' Set the expiry time for the timer relative to now.','line_number':198,'multiline':False]['text':' Set the expiry time for the timer relative to now.','line_number':206,'multiline':False]['text':' Perform a blocking wait on the timer.','line_number':214,'multiline':False]['text':' Start an asynchronous wait on the timer.','line_number':227,'multiline':False]['text':' Allocate and construct an operation to wrap the handler.','line_number':231,'multiline':False]['text':' Helper function to wait given a duration type. The duration type should','line_number':247,'multiline':False]['text':' either be of type boost::posix_time::time_duration, or implement the','line_number':248,'multiline':False]['text':' required subset of its interface.','line_number':249,'multiline':False]['text':' defined(ASIO_WINDOWS_RUNTIME)','line_number':258,'multiline':False]['text':' defined(ASIO_WINDOWS_RUNTIME)','line_number':263,'multiline':False]['text':' The queue of timers.','line_number':266,'multiline':False]['text':' The object that schedules and executes timers. Usually a reactor.','line_number':269,'multiline':False]['text':' namespace detail','line_number':273,'multiline':False]['text':' namespace asio','line_number':274,'multiline':False]['text':' ASIO_DETAIL_DEADLINE_TIMER_SERVICE_HPP','line_number':278,'multiline':False]