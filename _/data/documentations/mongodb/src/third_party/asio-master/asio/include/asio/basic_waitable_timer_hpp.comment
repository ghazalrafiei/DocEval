['text':'','line_number':1,'multiline':False]['text':' basic_waitable_timer.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(ASIO_HAS_MOVE)','line_number':28,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':32,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':38,'multiline':False]['text':' Forward declaration with defaulted arguments.','line_number':47,'multiline':False]['text':' !defined(ASIO_BASIC_WAITABLE_TIMER_FWD_DECL)','line_number':53,'multiline':False]['text':'/ Provides waitable timer functionality.','line_number':55,'multiline':False]['text':'*
 * The basic_waitable_timer class template provides the ability to perform a
 * blocking or asynchronous wait for a timer to expire.
 *
 * A waitable timer is always in one of two states: "expired" or "not expired".
 * If the wait() or async_wait() function is called on an expired timer, the
 * wait operation will complete immediately.
 *
 * Most applications will use one of the asio::steady_timer,
 * asio::system_timer or asio::high_resolution_timer typedefs.
 *
 * @note This waitable timer functionality is for use with the C++11 standard
 * library's @c &lt;chrono&gt; facility, or with the Boost.Chrono library.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * @par Examples
 * Performing a blocking wait (C++11):
 * @code
 * // Construct a timer without setting an expiry time.
 * asio::steady_timer timer(io_context);
 *
 * // Set an expiry time relative to now.
 * timer.expires_after(std::chrono::seconds(5));
 *
 * // Wait for the timer to expire.
 * timer.wait();
 * @endcode
 *
 * @par 
 * Performing an asynchronous wait (C++11):
 * @code
 * void handler(const asio::error_code& error)
 * {
 *   if (!error)
 *   {
 *     // Timer expired.
 *   }
 * }
 *
 * ...
 *
 * // Construct a timer with an absolute expiry time.
 * asio::steady_timer timer(io_context,
 *     std::chrono::steady_clock::now() + std::chrono::seconds(60));
 *
 * // Start an asynchronous wait.
 * timer.async_wait(handler);
 * @endcode
 *
 * @par Changing an active waitable timer's expiry time
 *
 * Changing the expiry time of a timer while there are pending asynchronous
 * waits causes those wait operations to be cancelled. To ensure that the action
 * associated with the timer is performed only once, use something like this:
 * used:
 *
 * @code
 * void on_some_event()
 * {
 *   if (my_timer.expires_after(seconds(5)) > 0)
 *   {
 *     // We managed to cancel the timer. Start new asynchronous wait.
 *     my_timer.async_wait(on_timeout);
 *   }
 *   else
 *   {
 *     // Too late, timer has already expired!
 *   }
 * }
 *
 * void on_timeout(const asio::error_code& e)
 * {
 *   if (e != asio::error::operation_aborted)
 *   {
 *     // Timer was not cancelled, take necessary action.
 *   }
 * }
 * @endcode
 *
 * @li The asio::basic_waitable_timer::expires_after() function
 * cancels any pending asynchronous waits, and returns the number of
 * asynchronous waits that were cancelled. If it returns 0 then you were too
 * late and the wait handler has already been executed, or will soon be
 * executed. If it returns 1 then the wait handler was successfully cancelled.
 *
 * @li If a wait handler is cancelled, the asio::error_code passed to
 * it contains the value asio::error::operation_aborted.
 ','line_number':56,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':152,'multiline':False]['text':'/ The clock type.','line_number':155,'multiline':False]['text':'/ The duration type of the clock.','line_number':158,'multiline':False]['text':'/ The time point type of the clock.','line_number':161,'multiline':False]['text':'/ The wait traits type.','line_number':164,'multiline':False]['text':'/ Constructor.','line_number':167,'multiline':False]['text':'*
   * This constructor creates a timer without setting an expiry time. The
   * expires_at() or expires_after() functions must be called to set an expiry
   * time before the timer can be waited on.
   *
   * @param io_context The io_context object that the timer will use to dispatch
   * handlers for any asynchronous operations performed on the timer.
   ','line_number':168,'multiline':True]['text':'/ Constructor to set a particular expiry time as an absolute time.','line_number':181,'multiline':False]['text':'*
   * This constructor creates a timer and sets the expiry time.
   *
   * @param io_context The io_context object that the timer will use to dispatch
   * handlers for any asynchronous operations performed on the timer.
   *
   * @param expiry_time The expiry time to be used for the timer, expressed
   * as an absolute time.
   ','line_number':182,'multiline':True]['text':'/ Constructor to set a particular expiry time relative to now.','line_number':200,'multiline':False]['text':'*
   * This constructor creates a timer and sets the expiry time.
   *
   * @param io_context The io_context object that the timer will use to dispatch
   * handlers for any asynchronous operations performed on the timer.
   *
   * @param expiry_time The expiry time to be used for the timer, relative to
   * now.
   ','line_number':201,'multiline':True]['text':'/ Move-construct a basic_waitable_timer from another.','line_number':221,'multiline':False]['text':'*
   * This constructor moves a timer from one object to another.
   *
   * @param other The other basic_waitable_timer object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_waitable_timer(io_context&) constructor.
   ','line_number':222,'multiline':True]['text':'/ Move-assign a basic_waitable_timer from another.','line_number':236,'multiline':False]['text':'*
   * This assignment operator moves a timer from one object to another. Cancels
   * any outstanding asynchronous operations associated with the target object.
   *
   * @param other The other basic_waitable_timer object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_waitable_timer(io_context&) constructor.
   ','line_number':237,'multiline':True]['text':' defined(ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':252,'multiline':False]['text':'/ Destroys the timer.','line_number':254,'multiline':False]['text':'*
   * This function destroys the timer, cancelling any outstanding asynchronous
   * wait operations associated with the timer as if by calling @c cancel.
   ','line_number':255,'multiline':True]['text':' These functions are provided by basic_io_object<>.','line_number':264,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':265,'multiline':False]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':267,'multiline':False]['text':'/ object.','line_number':268,'multiline':False]['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':269,'multiline':True]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':281,'multiline':False]['text':'/ object.','line_number':282,'multiline':False]['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':283,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':294,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':296,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':301,'multiline':False]['text':'/ Cancel any asynchronous operations that are waiting on the timer.','line_number':303,'multiline':False]['text':'*
   * This function forces the completion of any pending asynchronous wait
   * operations against the timer. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * Cancelling the timer does not change the expiry time.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note If the timer has already expired when cancel() is called, then the
   * handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':304,'multiline':True]['text':'/ (Deprecated: Use non-error_code overload.) Cancel any asynchronous','line_number':334,'multiline':False]['text':'/ operations that are waiting on the timer.','line_number':335,'multiline':False]['text':'*
   * This function forces the completion of any pending asynchronous wait
   * operations against the timer. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * Cancelling the timer does not change the expiry time.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @note If the timer has already expired when cancel() is called, then the
   * handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':336,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':361,'multiline':False]['text':'/ Cancels one asynchronous operation that is waiting on the timer.','line_number':363,'multiline':False]['text':'*
   * This function forces the completion of one pending asynchronous wait
   * operation against the timer. Handlers are cancelled in FIFO order. The
   * handler for the cancelled operation will be invoked with the
   * asio::error::operation_aborted error code.
   *
   * Cancelling the timer does not change the expiry time.
   *
   * @return The number of asynchronous operations that were cancelled. That is,
   * either 0 or 1.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note If the timer has already expired when cancel_one() is called, then
   * the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':364,'multiline':True]['text':'/ (Deprecated: Use non-error_code overload.) Cancels one asynchronous','line_number':397,'multiline':False]['text':'/ operation that is waiting on the timer.','line_number':398,'multiline':False]['text':'*
   * This function forces the completion of one pending asynchronous wait
   * operation against the timer. Handlers are cancelled in FIFO order. The
   * handler for the cancelled operation will be invoked with the
   * asio::error::operation_aborted error code.
   *
   * Cancelling the timer does not change the expiry time.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of asynchronous operations that were cancelled. That is,
   * either 0 or 1.
   *
   * @note If the timer has already expired when cancel_one() is called, then
   * the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':399,'multiline':True]['text':'/ (Deprecated: Use expiry().) Get the timer's expiry time as an absolute','line_number':427,'multiline':False]['text':'/ time.','line_number':428,'multiline':False]['text':'*
   * This function may be used to obtain the timer's current expiry time.
   * Whether the timer has expired or not does not affect this value.
   ','line_number':429,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':437,'multiline':False]['text':'/ Get the timer's expiry time as an absolute time.','line_number':439,'multiline':False]['text':'*
   * This function may be used to obtain the timer's current expiry time.
   * Whether the timer has expired or not does not affect this value.
   ','line_number':440,'multiline':True]['text':'/ Set the timer's expiry time as an absolute time.','line_number':449,'multiline':False]['text':'*
   * This function sets the expiry time. Any pending asynchronous wait
   * operations will be cancelled. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * @param expiry_time The expiry time to be used for the timer.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note If the timer has already expired when expires_at() is called, then
   * the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':450,'multiline':True]['text':'/ (Deprecated: Use non-error_code overload.) Set the timer's expiry time as','line_number':481,'multiline':False]['text':'/ an absolute time.','line_number':482,'multiline':False]['text':'*
   * This function sets the expiry time. Any pending asynchronous wait
   * operations will be cancelled. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * @param expiry_time The expiry time to be used for the timer.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @note If the timer has already expired when expires_at() is called, then
   * the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':483,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':510,'multiline':False]['text':'/ Set the timer's expiry time relative to now.','line_number':512,'multiline':False]['text':'*
   * This function sets the expiry time. Any pending asynchronous wait
   * operations will be cancelled. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * @param expiry_time The expiry time to be used for the timer.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note If the timer has already expired when expires_after() is called,
   * then the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':513,'multiline':True]['text':'/ (Deprecated: Use expiry().) Get the timer's expiry time relative to now.','line_number':544,'multiline':False]['text':'*
   * This function may be used to obtain the timer's current expiry time.
   * Whether the timer has expired or not does not affect this value.
   ','line_number':545,'multiline':True]['text':'/ (Deprecated: Use expires_after().) Set the timer's expiry time relative','line_number':554,'multiline':False]['text':'/ to now.','line_number':555,'multiline':False]['text':'*
   * This function sets the expiry time. Any pending asynchronous wait
   * operations will be cancelled. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * @param expiry_time The expiry time to be used for the timer.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note If the timer has already expired when expires_from_now() is called,
   * then the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':556,'multiline':True]['text':'/ (Deprecated: Use expires_after().) Set the timer's expiry time relative','line_number':586,'multiline':False]['text':'/ to now.','line_number':587,'multiline':False]['text':'*
   * This function sets the expiry time. Any pending asynchronous wait
   * operations will be cancelled. The handler for each cancelled operation will
   * be invoked with the asio::error::operation_aborted error code.
   *
   * @param expiry_time The expiry time to be used for the timer.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of asynchronous operations that were cancelled.
   *
   * @note If the timer has already expired when expires_from_now() is called,
   * then the handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':588,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':615,'multiline':False]['text':'/ Perform a blocking wait on the timer.','line_number':617,'multiline':False]['text':'*
   * This function is used to wait for the timer to expire. This function
   * blocks and does not return until the timer has expired.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':618,'multiline':True]['text':'/ Perform a blocking wait on the timer.','line_number':631,'multiline':False]['text':'*
   * This function is used to wait for the timer to expire. This function
   * blocks and does not return until the timer has expired.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':632,'multiline':True]['text':'/ Start an asynchronous wait on the timer.','line_number':643,'multiline':False]['text':'*
   * This function may be used to initiate an asynchronous wait against the
   * timer. It always returns immediately.
   *
   * For each call to async_wait(), the supplied handler will be called exactly
   * once. The handler will be called when:
   *
   * @li The timer has expired.
   *
   * @li The timer was cancelled, in which case the handler is passed the error
   * code asio::error::operation_aborted.
   *
   * @param handler The handler to be called when the timer expires. Copies
   * will be made of the handler as required. The function signature of the
   * handler must be:
   * @code void handler(
   *   const asio::error_code& error // Result of operation.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   ','line_number':644,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':672,'multiline':False]['text':' not meet the documented type requirements for a WaitHandler.','line_number':673,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':679,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':687,'multiline':False]['text':' Disallow copying and assignment.','line_number':691,'multiline':False]['text':' namespace asio','line_number':697,'multiline':False]['text':' !defined(ASIO_ENABLE_OLD_SERVICES)','line_number':703,'multiline':False]['text':' ASIO_BASIC_WAITABLE_TIMER_HPP','line_number':705,'multiline':False]