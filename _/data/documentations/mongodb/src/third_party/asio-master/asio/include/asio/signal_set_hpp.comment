['text':'','line_number':1,'multiline':False]['text':' signal_set.hpp','line_number':2,'multiline':False]['text':' ~~~~~~~~~~~~~~','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Copyright (c) 2003-2018 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':29,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':31,'multiline':False]['text':' Typedef for the typical usage of a signal set.','line_number':36,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':38,'multiline':False]['text':'/ Provides signal functionality.','line_number':39,'multiline':False]['text':'*
 * The signal_set class provides the ability to perform an asynchronous wait
 * for one or more signals to occur.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 *
 * @par Example
 * Performing an asynchronous wait:
 * @code
 * void handler(
 *     const asio::error_code& error,
 *     int signal_number)
 * {
 *   if (!error)
 *   {
 *     // A signal occurred.
 *   }
 * }
 *
 * ...
 *
 * // Construct a signal set registered for process termination.
 * asio::signal_set signals(io_context, SIGINT, SIGTERM);
 *
 * // Start an asynchronous wait for one of the signals to occur.
 * signals.async_wait(handler);
 * @endcode
 *
 * @par Queueing of signal notifications
 *
 * If a signal is registered with a signal_set, and the signal occurs when
 * there are no waiting handlers, then the signal notification is queued. The
 * next async_wait operation on that signal_set will dequeue the notification.
 * If multiple notifications are queued, subsequent async_wait operations
 * dequeue them one at a time. Signal notifications are dequeued in order of
 * ascending signal number.
 *
 * If a signal number is removed from a signal_set (using the @c remove or @c
 * erase member functions) then any queued notifications for that signal are
 * discarded.
 *
 * @par Multiple registration of signals
 *
 * The same signal number may be registered with different signal_set objects.
 * When the signal occurs, one handler is called for each signal_set object.
 *
 * Note that multiple registration only works for signals that are registered
 * using Asio. The application must not also register a signal handler using
 * functions such as @c signal() or @c sigaction().
 *
 * @par Signal masking on POSIX platforms
 *
 * POSIX allows signals to be blocked using functions such as @c sigprocmask()
 * and @c pthread_sigmask(). For signals to be delivered, programs must ensure
 * that any signals registered using signal_set objects are unblocked in at
 * least one thread.
 ','line_number':40,'multiline':True]['text':'/ The type of the executor associated with the object.','line_number':103,'multiline':False]['text':'/ Construct a signal set without adding any signals.','line_number':106,'multiline':False]['text':'*
   * This constructor creates a signal set without registering for any signals.
   *
   * @param io_context The io_context object that the signal set will use to
   * dispatch handlers for any asynchronous operations performed on the set.
   ','line_number':107,'multiline':True]['text':'/ Construct a signal set and add one signal.','line_number':118,'multiline':False]['text':'*
   * This constructor creates a signal set and registers for one signal.
   *
   * @param io_context The io_context object that the signal set will use to
   * dispatch handlers for any asynchronous operations performed on the set.
   *
   * @param signal_number_1 The signal number to be added.
   *
   * @note This constructor is equivalent to performing:
   * @code asio::signal_set signals(io_context);
   * signals.add(signal_number_1); @endcode
   ','line_number':119,'multiline':True]['text':'/ Construct a signal set and add two signals.','line_number':139,'multiline':False]['text':'*
   * This constructor creates a signal set and registers for two signals.
   *
   * @param io_context The io_context object that the signal set will use to
   * dispatch handlers for any asynchronous operations performed on the set.
   *
   * @param signal_number_1 The first signal number to be added.
   *
   * @param signal_number_2 The second signal number to be added.
   *
   * @note This constructor is equivalent to performing:
   * @code asio::signal_set signals(io_context);
   * signals.add(signal_number_1);
   * signals.add(signal_number_2); @endcode
   ','line_number':140,'multiline':True]['text':'/ Construct a signal set and add three signals.','line_number':166,'multiline':False]['text':'*
   * This constructor creates a signal set and registers for three signals.
   *
   * @param io_context The io_context object that the signal set will use to
   * dispatch handlers for any asynchronous operations performed on the set.
   *
   * @param signal_number_1 The first signal number to be added.
   *
   * @param signal_number_2 The second signal number to be added.
   *
   * @param signal_number_3 The third signal number to be added.
   *
   * @note This constructor is equivalent to performing:
   * @code asio::signal_set signals(io_context);
   * signals.add(signal_number_1);
   * signals.add(signal_number_2);
   * signals.add(signal_number_3); @endcode
   ','line_number':167,'multiline':True]['text':'/ Destroys the signal set.','line_number':198,'multiline':False]['text':'*
   * This function destroys the signal set, cancelling any outstanding
   * asynchronous wait operations associated with the signal set as if by
   * calling @c cancel.
   ','line_number':199,'multiline':True]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':209,'multiline':False]['text':'/ object.','line_number':210,'multiline':False]['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':211,'multiline':True]['text':'/ (Deprecated: Use get_executor().) Get the io_context associated with the','line_number':223,'multiline':False]['text':'/ object.','line_number':224,'multiline':False]['text':'*
   * This function may be used to obtain the io_context object that the I/O
   * object uses to dispatch handlers for asynchronous operations.
   *
   * @return A reference to the io_context object that the I/O object will use
   * to dispatch handlers. Ownership is not transferred to the caller.
   ','line_number':225,'multiline':True]['text':' !defined(ASIO_NO_DEPRECATED)','line_number':236,'multiline':False]['text':'/ Get the executor associated with the object.','line_number':238,'multiline':False]['text':'/ Add a signal to a signal_set.','line_number':244,'multiline':False]['text':'*
   * This function adds the specified signal to the set. It has no effect if the
   * signal is already in the set.
   *
   * @param signal_number The signal to be added to the set.
   *
   * @throws asio::system_error Thrown on failure.
   ','line_number':245,'multiline':True]['text':'/ Add a signal to a signal_set.','line_number':260,'multiline':False]['text':'*
   * This function adds the specified signal to the set. It has no effect if the
   * signal is already in the set.
   *
   * @param signal_number The signal to be added to the set.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':261,'multiline':True]['text':'/ Remove a signal from a signal_set.','line_number':276,'multiline':False]['text':'*
   * This function removes the specified signal from the set. It has no effect
   * if the signal is not in the set.
   *
   * @param signal_number The signal to be removed from the set.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note Removes any notifications that have been queued for the specified
   * signal number.
   ','line_number':277,'multiline':True]['text':'/ Remove a signal from a signal_set.','line_number':295,'multiline':False]['text':'*
   * This function removes the specified signal from the set. It has no effect
   * if the signal is not in the set.
   *
   * @param signal_number The signal to be removed from the set.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note Removes any notifications that have been queued for the specified
   * signal number.
   ','line_number':296,'multiline':True]['text':'/ Remove all signals from a signal_set.','line_number':314,'multiline':False]['text':'*
   * This function removes all signals from the set. It has no effect if the set
   * is already empty.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note Removes all queued notifications.
   ','line_number':315,'multiline':True]['text':'/ Remove all signals from a signal_set.','line_number':330,'multiline':False]['text':'*
   * This function removes all signals from the set. It has no effect if the set
   * is already empty.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note Removes all queued notifications.
   ','line_number':331,'multiline':True]['text':'/ Cancel all operations associated with the signal set.','line_number':345,'multiline':False]['text':'*
   * This function forces the completion of any pending asynchronous wait
   * operations against the signal set. The handler for each cancelled
   * operation will be invoked with the asio::error::operation_aborted
   * error code.
   *
   * Cancellation does not alter the set of registered signals.
   *
   * @throws asio::system_error Thrown on failure.
   *
   * @note If a registered signal occurred before cancel() is called, then the
   * handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':346,'multiline':True]['text':'/ Cancel all operations associated with the signal set.','line_number':373,'multiline':False]['text':'*
   * This function forces the completion of any pending asynchronous wait
   * operations against the signal set. The handler for each cancelled
   * operation will be invoked with the asio::error::operation_aborted
   * error code.
   *
   * Cancellation does not alter the set of registered signals.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @note If a registered signal occurred before cancel() is called, then the
   * handlers for asynchronous wait operations will:
   *
   * @li have already been invoked; or
   *
   * @li have been queued for invocation in the near future.
   *
   * These handlers can no longer be cancelled, and therefore are passed an
   * error code that indicates the successful completion of the wait operation.
   ','line_number':374,'multiline':True]['text':'/ Start an asynchronous operation to wait for a signal to be delivered.','line_number':400,'multiline':False]['text':'*
   * This function may be used to initiate an asynchronous wait against the
   * signal set. It always returns immediately.
   *
   * For each call to async_wait(), the supplied handler will be called exactly
   * once. The handler will be called when:
   *
   * @li One of the registered signals in the signal set occurs; or
   *
   * @li The signal set was cancelled, in which case the handler is passed the
   * error code asio::error::operation_aborted.
   *
   * @param handler The handler to be called when the signal occurs. Copies
   * will be made of the handler as required. The function signature of the
   * handler must be:
   * @code void handler(
   *   const asio::error_code& error, // Result of operation.
   *   int signal_number // Indicates which signal occurred.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the handler will not be invoked from within this function. Invocation
   * of the handler will be performed in a manner equivalent to using
   * asio::io_context::post().
   ','line_number':401,'multiline':True]['text':' If you get an error on the following line it means that your handler does','line_number':430,'multiline':False]['text':' not meet the documented type requirements for a SignalHandler.','line_number':431,'multiline':False]['text':' defined(ASIO_ENABLE_OLD_SERVICES)','line_number':443,'multiline':False]['text':' namespace asio','line_number':445,'multiline':False]['text':' ASIO_SIGNAL_SET_HPP','line_number':447,'multiline':False]