['text':' Copyright 2011 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':3,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':4,'multiline':False]['text':' met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':7,'multiline':False]['text':' notice, this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':9,'multiline':False]['text':' copyright notice, this list of conditions and the following disclaimer','line_number':10,'multiline':False]['text':' in the documentation and/or other materials provided with the','line_number':11,'multiline':False]['text':' distribution.','line_number':12,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':13,'multiline':False]['text':' contributors may be used to endorse or promote products derived from','line_number':14,'multiline':False]['text':' this software without specific prior written permission.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':17,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':18,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':19,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':20,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':21,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':23,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':24,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':25,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':26,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Various stubs for the unit tests for the open-source version of Snappy.','line_number':29,'multiline':False]['text':' Stubs for if the user doesn't have Google Test installed.','line_number':69,'multiline':False]['text':' This is tricky; both gflags and Google Test want to look at the command line','line_number':86,'multiline':False]['text':' arguments. Google Test seems to be the most happy with unknown arguments,','line_number':87,'multiline':False]['text':' though, so we call it first and hope for the best.','line_number':88,'multiline':False]['text':' If we don't have the gflags package installed, these can only be','line_number':95,'multiline':False]['text':' changed at compile time.','line_number':96,'multiline':False]['text':' namespace file','line_number':165,'multiline':False]['text':' namespace','line_number':167,'multiline':False]['text':' A sprintf() variant that returns a std::string.','line_number':190,'multiline':False]['text':' Not safe for general use due to truncation issues.','line_number':191,'multiline':False]['text':' A simple, non-cryptographically-secure random generator.','line_number':194,'multiline':False]['text':' Skewed: pick "base" uniformly from range [0,max_log] and then','line_number':209,'multiline':False]['text':' return "base" random bits.  The effect is to pick a number in the','line_number':210,'multiline':False]['text':' range [0,2^max_log-1] with bias towards smaller numbers.','line_number':211,'multiline':False]['text':' 2^31-1','line_number':215,'multiline':False]['text':' bits 14, 8, 7, 5, 2, 1, 0','line_number':220,'multiline':False]['text':' We are computing','line_number':221,'multiline':False]['text':'       seed_ = (seed_ * A) % M,    where M = 2^31-1','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':' seed_ must not be zero or M, or else all subsequent computed values','line_number':224,'multiline':False]['text':' will be zero or M respectively.  For all other values, seed_ will end','line_number':225,'multiline':False]['text':' up cycling through every number in [1,M-1]','line_number':226,'multiline':False]['text':' Compute (product % M) using the fact that ((x << 31) % M) == x.','line_number':229,'multiline':False]['text':' The first reduction may overflow by 1 bit, so we may need to repeat.','line_number':231,'multiline':False]['text':' mod == M is not possible; using > allows the faster sign-bit-based test.','line_number':232,'multiline':False]['text':' A wall-time clock. This stub is not super-accurate, nor resistant to the','line_number':244,'multiline':False]['text':' system time changing.','line_number':245,'multiline':False]['text':' Minimalistic microbenchmark framework.','line_number':290,'multiline':False]['text':' Object-oriented wrapper around zlib.','line_number':329,'multiline':False]['text':' Wipe a ZLib object to a virgin state.  This differs from Reset()','line_number':335,'multiline':False]['text':' in that it also breaks any state.','line_number':336,'multiline':False]['text':' Call this to make a zlib buffer as good as new.  Here's the only','line_number':339,'multiline':False]['text':' case where they differ:','line_number':340,'multiline':False]['text':'    CompressChunk(a); CompressChunk(b); CompressChunkDone();   vs','line_number':341,'multiline':False]['text':'    CompressChunk(a); Reset(); CompressChunk(b); CompressChunkDone();','line_number':342,'multiline':False]['text':' You'll want to use Reset(), then, when you interrupt a compress','line_number':343,'multiline':False]['text':' (or uncompress) in the middle of a chunk and want to start over.','line_number':344,'multiline':False]['text':' According to the zlib manual, when you Compress, the destination','line_number':347,'multiline':False]['text':' buffer must have size at least src + .1%*src + 12.  This function','line_number':348,'multiline':False]['text':' helps you calculate that.  Augment this to account for a potential','line_number':349,'multiline':False]['text':' gzip header and footer, plus a few bytes of slack.','line_number':350,'multiline':False]['text':' Compresses the source buffer into the destination buffer.','line_number':355,'multiline':False]['text':' sourceLen is the byte length of the source buffer.','line_number':356,'multiline':False]['text':' Upon entry, destLen is the total size of the destination buffer,','line_number':357,'multiline':False]['text':' which must be of size at least MinCompressbufSize(sourceLen).','line_number':358,'multiline':False]['text':' Upon exit, destLen is the actual size of the compressed buffer.','line_number':359,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' This function can be used to compress a whole file at once if the','line_number':361,'multiline':False]['text':' input file is mmap'ed.','line_number':362,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' Returns Z_OK if success, Z_MEM_ERROR if there was not','line_number':364,'multiline':False]['text':' enough memory, Z_BUF_ERROR if there was not enough room in the','line_number':365,'multiline':False]['text':' output buffer. Note that if the output buffer is exactly the same','line_number':366,'multiline':False]['text':' size as the compressed result, we still return Z_BUF_ERROR.','line_number':367,'multiline':False]['text':' (check CL#1936076)','line_number':368,'multiline':False]['text':' Uncompresses the source buffer into the destination buffer.','line_number':372,'multiline':False]['text':' The destination buffer must be long enough to hold the entire','line_number':373,'multiline':False]['text':' decompressed contents.','line_number':374,'multiline':False]['text':'','line_number':375,'multiline':False]['text':' Returns Z_OK on success, otherwise, it returns a zlib error code.','line_number':376,'multiline':False]['text':' Uncompress data one chunk at a time -- ie you can call this','line_number':380,'multiline':False]['text':' more than once.  To get this to work you need to call per-chunk','line_number':381,'multiline':False]['text':' and "done" routines.','line_number':382,'multiline':False]['text':'','line_number':383,'multiline':False]['text':' Returns Z_OK if success, Z_MEM_ERROR if there was not','line_number':384,'multiline':False]['text':' enough memory, Z_BUF_ERROR if there was not enough room in the','line_number':385,'multiline':False]['text':' output buffer.','line_number':386,'multiline':False]['text':' Checks gzip footer information, as needed.  Mostly this just','line_number':391,'multiline':False]['text':' makes sure the checksums match.  Whenever you call this, it','line_number':392,'multiline':False]['text':' will assume the last 8 bytes from the previous UncompressChunk','line_number':393,'multiline':False]['text':' call are the footer.  Returns true iff everything looks ok.','line_number':394,'multiline':False]['text':' sets up the zlib inflate structure','line_number':398,'multiline':False]['text':' sets up the zlib deflate structure','line_number':399,'multiline':False]['text':' These init the zlib data structures for compressing/uncompressing','line_number':401,'multiline':False]['text':' Initialization method to be called if we hit an error while','line_number':406,'multiline':False]['text':' uncompressing. On hitting an error, call this method before','line_number':407,'multiline':False]['text':' returning the error.','line_number':408,'multiline':False]['text':' Helper function for Compress','line_number':411,'multiline':False]['text':' Likewise for UncompressAndUncompressChunk','line_number':419,'multiline':False]['text':' Initialization method to be called if we hit an error while','line_number':428,'multiline':False]['text':' compressing. On hitting an error, call this method before','line_number':429,'multiline':False]['text':' returning the error.','line_number':430,'multiline':False]['text':' compression level','line_number':433,'multiline':False]['text':' log base 2 of the window size used in compression','line_number':434,'multiline':False]['text':' specifies the amount of memory to be used by','line_number':435,'multiline':False]['text':' compressor (1-9)','line_number':436,'multiline':False]['text':' Zlib stream data structure','line_number':437,'multiline':False]['text':' True if we have initialized comp_stream_','line_number':438,'multiline':False]['text':' Zlib stream data structure','line_number':439,'multiline':False]['text':' True if we have initialized uncomp_stream_','line_number':440,'multiline':False]['text':' These are used only with chunked compression.','line_number':442,'multiline':False]['text':' true if we need to emit headers with this chunk','line_number':443,'multiline':False]['text':' HAVE_LIBZ','line_number':446,'multiline':False]['text':' namespace snappy','line_number':448,'multiline':False]['text':' HAVE_GTEST','line_number':495,'multiline':False]['text':' For main().','line_number':497,'multiline':False]['text':' Logging.','line_number':500,'multiline':False]['text':' Asserts, both versions activated in debug mode only,','line_number':523,'multiline':False]['text':' and ones that are always active.','line_number':524,'multiline':False]['text':' ~LogMessageCrash calls abort() and therefore never exits. This is by design','line_number':531,'multiline':False]['text':' so temporarily disable warning C4722.','line_number':532,'multiline':False]['text':' This class is used to explicitly ignore values in the conditional','line_number':550,'multiline':False]['text':' logging macros.  This avoids compiler warnings like "value computed','line_number':551,'multiline':False]['text':' is not used" and "statement has no effect".','line_number':552,'multiline':False]['text':' This has to be an operator with a precedence lower than << but','line_number':557,'multiline':False]['text':' higher than ?:','line_number':558,'multiline':False]['text':' namespace snappy','line_number':571,'multiline':False]['text':' THIRD_PARTY_SNAPPY_OPENSOURCE_SNAPPY_TEST_H_','line_number':573,'multiline':False]