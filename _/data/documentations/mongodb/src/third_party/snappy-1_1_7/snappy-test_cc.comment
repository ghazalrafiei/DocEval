['text':' Copyright 2011 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':3,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':4,'multiline':False]['text':' met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':7,'multiline':False]['text':' notice, this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':9,'multiline':False]['text':' copyright notice, this list of conditions and the following disclaimer','line_number':10,'multiline':False]['text':' in the documentation and/or other materials provided with the','line_number':11,'multiline':False]['text':' distribution.','line_number':12,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':13,'multiline':False]['text':' contributors may be used to endorse or promote products derived from','line_number':14,'multiline':False]['text':' this software without specific prior written permission.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':17,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':18,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':19,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':20,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':21,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':23,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':24,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':25,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':26,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Various stubs for the unit tests for the open-source version of Snappy.','line_number':29,'multiline':False]['text':' Needed to be able to use std::max without workarounds in the source code.','line_number':36,'multiline':False]['text':' https://support.microsoft.com/en-us/help/143208/prb-using-stl-in-windows-program-can-cause-min-max-conflicts','line_number':37,'multiline':False]['text':' This is set by Automake.','line_number':53,'multiline':False]['text':' WIN32','line_number':93,'multiline':False]['text':' WIN32','line_number':96,'multiline':False]['text':' WIN32','line_number':144,'multiline':False]['text':' WIN32','line_number':161,'multiline':False]['text':' Run a few iterations first to find out approximately how fast','line_number':190,'multiline':False]['text':' the benchmark is.','line_number':191,'multiline':False]['text':' Let each test case run for about 200ms, but at least as many','line_number':198,'multiline':False]['text':' as we used to calibrate.','line_number':199,'multiline':False]['text':' Run five times and pick the median.','line_number':200,'multiline':False]['text':' DEF_MEM_LEVEL','line_number':279,'multiline':False]['text':' --------- COMPRESS MODE','line_number':295,'multiline':False]['text':' Initialization method to be called if we hit an error while','line_number':297,'multiline':False]['text':' compressing. On hitting an error, call this method before returning','line_number':298,'multiline':False]['text':' the error.','line_number':299,'multiline':False]['text':' only need to set up stream the first time through','line_number':326,'multiline':False]['text':' we've already initted it','line_number':329,'multiline':False]['text':' first use','line_number':337,'multiline':False]['text':' In a perfect world we'd always have the full buffer to compress','line_number':348,'multiline':False]['text':' when the time came, and we could just call Compress().  Alas, we','line_number':349,'multiline':False]['text':' want to do chunked compression on our webserver.  In this','line_number':350,'multiline':False]['text':' application, we compress the header, send it off, then compress the','line_number':351,'multiline':False]['text':' results, send them off, then compress the footer.  Thus we need to','line_number':352,'multiline':False]['text':' use the chunked compression features of zlib.','line_number':353,'multiline':False]['text':' Z_FULL_FLUSH or Z_FINISH','line_number':356,'multiline':False]['text':' This is used to figure out how many bytes we wrote *this chunk*','line_number':362,'multiline':False]['text':' Some setup happens only for the first chunk we compress in a run','line_number':365,'multiline':False]['text':' flush_mode is Z_FINISH for all mode, Z_SYNC_FLUSH for incremental','line_number':370,'multiline':False]['text':' compression.','line_number':371,'multiline':False]['text':' we processed everything ok and the output buffer was large enough.','line_number':379,'multiline':False]['text':' should never happen','line_number':382,'multiline':False]['text':' an error happened','line_number':384,'multiline':False]['text':' not enough space','line_number':387,'multiline':False]['text':' update the crc and other metadata','line_number':395,'multiline':False]['text':' delta','line_number':396,'multiline':False]['text':' Z_FULL_FLUSH or Z_FINISH','line_number':404,'multiline':False]['text':' This routine only initializes the compression stream once.  Thereafter, it','line_number':412,'multiline':False]['text':' just does a deflateReset on the stream, which should be faster.','line_number':413,'multiline':False]['text':' reset for next call to Compress','line_number':420,'multiline':False]['text':' --------- UNCOMPRESS MODE','line_number':426,'multiline':False]['text':' Initialization method to be called if we hit an error while','line_number':432,'multiline':False]['text':' uncompressing. On hitting an error, call this method before','line_number':433,'multiline':False]['text':' returning the error.','line_number':434,'multiline':False]['text':' Check for source > 64K on 16-bit machine:','line_number':447,'multiline':False]['text':' only need to set up stream the first time through','line_number':454,'multiline':False]['text':' we've already initted it','line_number':457,'multiline':False]['text':' If you compressed your data a chunk at a time, with CompressChunk,','line_number':476,'multiline':False]['text':' you can uncompress it a chunk at a time with UncompressChunk.','line_number':477,'multiline':False]['text':' Only difference bewteen chunked and unchunked uncompression','line_number':478,'multiline':False]['text':' is the flush mode we use: Z_SYNC_FLUSH (chunked) or Z_FINISH (unchunked).','line_number':479,'multiline':False]['text':' Z_SYNC_FLUSH or Z_FINISH','line_number':482,'multiline':False]['text':' This is used to figure out how many output bytes we wrote *this chunk*:','line_number':491,'multiline':False]['text':' This is used to figure out how many input bytes we read *this chunk*:','line_number':494,'multiline':False]['text':' Some setup happens only for the first chunk we compress in a run','line_number':497,'multiline':False]['text':' so we don't do this again','line_number':499,'multiline':False]['text':' For the first chunk *only* (to avoid infinite troubles), we let','line_number':501,'multiline':False]['text':' there be no actual data to uncompress.  This sometimes triggers','line_number':502,'multiline':False]['text':' when the input is only the gzip header, say.','line_number':503,'multiline':False]['text':' We'll uncompress as much as we can.  If we end OK great, otherwise','line_number':510,'multiline':False]['text':' if we get an error that seems to be the gzip footer, we store the','line_number':511,'multiline':False]['text':' gzip footer and return OK, otherwise we return the error.','line_number':512,'multiline':False]['text':' flush_mode is Z_SYNC_FLUSH for chunked mode, Z_FINISH for all mode.','line_number':514,'multiline':False]['text':' Figure out how many bytes of the input zlib slurped up:','line_number':517,'multiline':False]['text':' everything went ok','line_number':522,'multiline':False]['text':' and we read it all','line_number':523,'multiline':False]['text':' what's the extra data for?','line_number':532,'multiline':False]['text':' an error happened','line_number':534,'multiline':False]['text':' size for this call','line_number':547,'multiline':False]['text':' Z_SYNC_FLUSH or Z_FINISH','line_number':554,'multiline':False]['text':' We make sure we've uncompressed everything, that is, the current','line_number':567,'multiline':False]['text':' uncompress stream is at a compressed-buffer-EOF boundary.  In gzip','line_number':568,'multiline':False]['text':' mode, we also check the gzip footer to make sure we pass the gzip','line_number':569,'multiline':False]['text':' consistency checks.  We RETURN true iff both types of checks pass.','line_number':570,'multiline':False]['text':' Make sure we're at the end-of-compressed-data point.  This means','line_number':573,'multiline':False]['text':' if we call inflate with Z_FINISH we won't consume any input or','line_number':574,'multiline':False]['text':' write any output','line_number':575,'multiline':False]['text':' Make sure that when we exit, we can start a new round of chunks later','line_number':583,'multiline':False]['text':' Uncompresses the source buffer into the destination buffer.','line_number':589,'multiline':False]['text':' The destination buffer must be long enough to hold the entire','line_number':590,'multiline':False]['text':' decompressed contents.','line_number':591,'multiline':False]['text':'','line_number':592,'multiline':False]['text':' We only initialize the uncomp_stream once.  Thereafter, we use','line_number':593,'multiline':False]['text':' inflateReset, which should be faster.','line_number':594,'multiline':False]['text':'','line_number':595,'multiline':False]['text':' Returns Z_OK on success, otherwise, it returns a zlib error code.','line_number':596,'multiline':False]['text':' let us try to compress again','line_number':602,'multiline':False]['text':' calls Reset()','line_number':605,'multiline':False]['text':' stream_end is ok','line_number':607,'multiline':False]['text':' HAVE_LIBZ','line_number':610,'multiline':False]['text':' namespace snappy','line_number':612,'multiline':False]