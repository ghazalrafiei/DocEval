['text':' Copyright 2008 Google Inc. All Rights Reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':3,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':4,'multiline':False]['text':' met:','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':7,'multiline':False]['text':' notice, this list of conditions and the following disclaimer.','line_number':8,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':9,'multiline':False]['text':' copyright notice, this list of conditions and the following disclaimer','line_number':10,'multiline':False]['text':' in the documentation and/or other materials provided with the','line_number':11,'multiline':False]['text':' distribution.','line_number':12,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':13,'multiline':False]['text':' contributors may be used to endorse or promote products derived from','line_number':14,'multiline':False]['text':' this software without specific prior written permission.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':17,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':18,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':19,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':20,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':21,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':22,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':23,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':24,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':25,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':26,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Internals shared between the Snappy implementation and its unittest.','line_number':29,'multiline':False]['text':' Allocates and clears a hash table using memory in "*this",','line_number':44,'multiline':False]['text':' stores the number of buckets in "*table_size" and returns a pointer to','line_number':45,'multiline':False]['text':' the base of the hash table.','line_number':46,'multiline':False]['text':' 32KB','line_number':50,'multiline':False]['text':' Allocated only when needed','line_number':51,'multiline':False]['text':' No copying','line_number':53,'multiline':False]['text':' Flat array compression that does not emit the "uncompressed length"','line_number':58,'multiline':False]['text':' prefix. Compresses "input" string to the "*op" buffer.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':' REQUIRES: "input_length <= kBlockSize"','line_number':61,'multiline':False]['text':' REQUIRES: "op" points to an array of memory that is at least','line_number':62,'multiline':False]['text':' "MaxCompressedLength(input_length)" in size.','line_number':63,'multiline':False]['text':' REQUIRES: All elements in "table[0..table_size-1]" are initialized to zero.','line_number':64,'multiline':False]['text':' REQUIRES: "table_size" is a power of two','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' Returns an "end" pointer into "op" buffer.','line_number':67,'multiline':False]['text':' "end - op" is the compressed size of "input".','line_number':68,'multiline':False]['text':' Find the largest n such that','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':'   s1[0,n-1] == s2[0,n-1]','line_number':77,'multiline':False]['text':'   and n <= (s2_limit - s2).','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' Return make_pair(n, n < 8).','line_number':80,'multiline':False]['text':' Does not read *s2_limit or beyond.','line_number':81,'multiline':False]['text':' Does not read *(s1 + (s2_limit - s2)) or beyond.','line_number':82,'multiline':False]['text':' Requires that s2_limit >= s2.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' Separate implementation for 64-bit, little-endian cpus.','line_number':85,'multiline':False]['text':' This block isn't necessary for correctness; we could just start looping','line_number':94,'multiline':False]['text':' immediately.  As an optimization though, it is useful.  It creates some not','line_number':95,'multiline':False]['text':' uncommon code paths that determine, without extra effort, whether the match','line_number':96,'multiline':False]['text':' length is less than 8.  In short, we are hoping to avoid a conditional','line_number':97,'multiline':False]['text':' branch, and perhaps get better code layout from the C++ compiler.','line_number':98,'multiline':False]['text':' Find out how long the match is. We loop over the data 64 bits at a','line_number':111,'multiline':False]['text':' time until we find a 64-bit block that doesn't match; then we find','line_number':112,'multiline':False]['text':' the first non-matching bit and use that to calculate the total','line_number':113,'multiline':False]['text':' length of the match.','line_number':114,'multiline':False]['text':' Implementation based on the x86-64 version, above.','line_number':141,'multiline':False]['text':' Lookup tables for decompression code.  Give --snappy_dump_decompression_table','line_number':164,'multiline':False]['text':' to the unit test to recompute char_table.','line_number':165,'multiline':False]['text':' 3 bit length + 3 bits of offset in opcode','line_number':169,'multiline':False]['text':' COPY_4_BYTE_OFFSET plus the actual offset.','line_number':173,'multiline':False]['text':' Data stored per entry in lookup table:','line_number':175,'multiline':False]['text':'      Range   Bits-used       Description','line_number':176,'multiline':False]['text':'      ------------------------------------','line_number':177,'multiline':False]['text':'      1..64   0..7            Literal/copy length encoded in opcode byte','line_number':178,'multiline':False]['text':'      0..7    8..10           Copy offset encoded in opcode byte / 256','line_number':179,'multiline':False]['text':'      0..4    11..13          Extra bytes after opcode','line_number':180,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' We use eight bits for the length even though 7 would have sufficed','line_number':182,'multiline':False]['text':' because of efficiency reasons:','line_number':183,'multiline':False]['text':'      (1) Extracting a byte is faster than a bit-field','line_number':184,'multiline':False]['text':'      (2) It properly aligns copy offset so we do not need a <<8','line_number':185,'multiline':False]['text':' end namespace internal','line_number':221,'multiline':False]['text':' end namespace snappy','line_number':222,'multiline':False]['text':' THIRD_PARTY_SNAPPY_SNAPPY_INTERNAL_H_','line_number':224,'multiline':False]