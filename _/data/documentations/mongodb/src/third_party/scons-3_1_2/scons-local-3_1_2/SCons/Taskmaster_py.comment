['text':'','line_number':1,'multiline':False]['text':' Copyright (c) 2001 - 2019 The SCons Foundation','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Permission is hereby granted, free of charge, to any person obtaining','line_number':4,'multiline':False]['text':' a copy of this software and associated documentation files (the','line_number':5,'multiline':False]['text':' "Software"), to deal in the Software without restriction, including','line_number':6,'multiline':False]['text':' without limitation the rights to use, copy, modify, merge, publish,','line_number':7,'multiline':False]['text':' distribute, sublicense, and/or sell copies of the Software, and to','line_number':8,'multiline':False]['text':' permit persons to whom the Software is furnished to do so, subject to','line_number':9,'multiline':False]['text':' the following conditions:','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' The above copyright notice and this permission notice shall be included','line_number':12,'multiline':False]['text':' in all copies or substantial portions of the Software.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY','line_number':15,'multiline':False]['text':' KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE','line_number':16,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND','line_number':17,'multiline':False]['text':' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE','line_number':18,'multiline':False]['text':' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION','line_number':19,'multiline':False]['text':' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION','line_number':20,'multiline':False]['text':' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.','line_number':21,'multiline':False]['text':' set by option --debug=prepare','line_number':76,'multiline':False]['text':' A subsystem for recording stats about how different Nodes are handled by','line_number':78,'multiline':False]['text':' the main Taskmaster loop.  There's no external control here (no need for','line_number':79,'multiline':False]['text':' a --debug= option); enable it by changing the value of CollectStats.','line_number':80,'multiline':False]['text':' Now that it's the appropriate time, give the TaskMaster a','line_number':176,'multiline':False]['text':' chance to raise any exceptions it encountered while preparing','line_number':177,'multiline':False]['text':' this task.','line_number':178,'multiline':False]['text':' Let the targets take care of any necessary preparations.','line_number':185,'multiline':False]['text':' This includes verifying that all of the necessary sources','line_number':186,'multiline':False]['text':' and dependencies exist, removing the target file(s), etc.','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':' As of April 2008, the get_executor().prepare() method makes','line_number':189,'multiline':False]['text':' sure that all of the aggregate sources necessary to build this','line_number':190,'multiline':False]['text':' Task's target(s) exist in one up-front check.  The individual','line_number':191,'multiline':False]['text':' target t.prepare() methods check that each target's explicit','line_number':192,'multiline':False]['text':' or implicit dependencies exists, and also initialize the','line_number':193,'multiline':False]['text':' .sconsign info.','line_number':194,'multiline':False]['text':' TODO(deprecate):  "return True" is the old default behavior;','line_number':216,'multiline':False]['text':' change it to NotImplementedError (after running through the','line_number':217,'multiline':False]['text':' Deprecation Cycle) so the desired behavior is explicitly','line_number':218,'multiline':False]['text':' determined by which concrete subclass is used.','line_number':219,'multiline':False]['text':'raise NotImplementedError','line_number':220,'multiline':False]['text':' Remove targets before building. It's possible that we','line_number':245,'multiline':False]['text':' partially retrieved targets from the cache, leaving','line_number':246,'multiline':False]['text':' them in read-only mode. That might cause the command','line_number':247,'multiline':False]['text':' to fail.','line_number':248,'multiline':False]['text':'','line_number':249,'multiline':False]['text':' Invoke will_not_build() to clean-up the pending children','line_number':347,'multiline':False]['text':' list.','line_number':348,'multiline':False]['text':' Tell the taskmaster to not start any new tasks','line_number':351,'multiline':False]['text':' We're stopping because of a build failure, but give the','line_number':354,'multiline':False]['text':' calling Task class a chance to postprocess() the top-level','line_number':355,'multiline':False]['text':' target under which the build failure occurred.','line_number':356,'multiline':False]['text':' add disambiguate here to mirror the call on targets above','line_number':390,'multiline':False]['text':' add disambiguate here to mirror the call on targets in first loop above','line_number':423,'multiline':False]['text':' We must invoke visited() to ensure that the node','line_number':427,'multiline':False]['text':' information has been computed before allowing the','line_number':428,'multiline':False]['text':' parent nodes to execute. (That could occur in a','line_number':429,'multiline':False]['text':' parallel build...)','line_number':430,'multiline':False]['text':' We may have built multiple targets, some of which may have','line_number':452,'multiline':False]['text':' common parents waiting for this build.  Count up how many','line_number':453,'multiline':False]['text':' targets each parent was waiting for so we can subtract the','line_number':454,'multiline':False]['text':' values later, and so we *don't* put waiting side-effect Nodes','line_number':455,'multiline':False]['text':' back on the candidates list if the Node is also a waiting','line_number':456,'multiline':False]['text':' parent.','line_number':457,'multiline':False]['text':' A node can only be in the pending_children set if it has','line_number':464,'multiline':False]['text':' some waiting_parents.','line_number':465,'multiline':False]['text':' The side-effects may have been transferred to','line_number':481,'multiline':False]['text':' NODE_NO_STATE by executed_with{,out}_callbacks, but was','line_number':482,'multiline':False]['text':' not taken out of the waiting parents/pending children','line_number':483,'multiline':False]['text':' data structures. Check for that now.','line_number':484,'multiline':False]['text':' Exception handling subsystem.','line_number':505,'multiline':False]['text':'','line_number':506,'multiline':False]['text':' Exceptions that occur while walking the DAG or examining Nodes','line_number':507,'multiline':False]['text':' must be raised, but must be raised at an appropriate time and in','line_number':508,'multiline':False]['text':' a controlled manner so we can, if necessary, recover gracefully,','line_number':509,'multiline':False]['text':' possibly write out signature information for Nodes we've updated,','line_number':510,'multiline':False]['text':' etc.  This is done by having the Taskmaster tell us about the','line_number':511,'multiline':False]['text':' exception, and letting','line_number':512,'multiline':False]['text':' pylint: disable=unbalanced-tuple-unpacking','line_number':554,'multiline':False]['text':' raise exc_type(exc_value).with_traceback(exc_traceback)','line_number':557,'multiline':False]['text':'  sys.version_info[0] == 3:','line_number':560,'multiline':False]['text':'hasattr(exc_value, 'with_traceback'):','line_number':561,'multiline':False]['text':' If exc_value is an exception, then just reraise','line_number':562,'multiline':False]['text':' else we'll create an exception using the value and raise that','line_number':565,'multiline':False]['text':' raise e.__class__, e.__class__(e), sys.exc_info()[2]','line_number':569,'multiline':False]['text':'     exec("raise exc_type(exc_value).with_traceback(exc_traceback)")','line_number':570,'multiline':False]['text':' For debugging only:','line_number':806,'multiline':False]['text':'','line_number':807,'multiline':False]['text':' try:','line_number':808,'multiline':False]['text':'     self._validate_pending_children()','line_number':809,'multiline':False]['text':' except:','line_number':810,'multiline':False]['text':'     self.ready_exc = sys.exc_info()','line_number':811,'multiline':False]['text':'     return node','line_number':812,'multiline':False]['text':' Mark this node as being on the execution stack:','line_number':826,'multiline':False]['text':' Skip this node if it has already been evaluated:','line_number':829,'multiline':False]['text':' We had a problem just trying to figure out the','line_number':845,'multiline':False]['text':' children (like a child couldn't be linked in to a','line_number':846,'multiline':False]['text':' VariantDir, or a Scanner threw something).  Arrange to','line_number':847,'multiline':False]['text':' raise the exception when the Task is "executed."','line_number':848,'multiline':False]['text':' These nodes have not even been visited yet.  Add','line_number':874,'multiline':False]['text':' them to the list so that on some next pass we can','line_number':875,'multiline':False]['text':' take a stab at evaluating them (or their children).','line_number':876,'multiline':False]['text':' if T and children_not_visited:','line_number':882,'multiline':False]['text':'    T.write(self.trace_message('     adding to candidates: %s' % map(str, children_not_visited)))','line_number':883,'multiline':False]['text':'    T.write(self.trace_message('     candidates now: %s\n' % map(str, self.candidates)))','line_number':884,'multiline':False]['text':' Skip this node if any of its children have failed.','line_number':886,'multiline':False]['text':'','line_number':887,'multiline':False]['text':' This catches the case where we're descending a top-level','line_number':888,'multiline':False]['text':' target and one of our children failed while trying to be','line_number':889,'multiline':False]['text':' built by a *previous* descent of an earlier top-level','line_number':890,'multiline':False]['text':' target.','line_number':891,'multiline':False]['text':'','line_number':892,'multiline':False]['text':' It can also occur if a node is reused in multiple','line_number':893,'multiline':False]['text':' targets. One first descends though the one of the','line_number':894,'multiline':False]['text':' target, the next time occurs through the other target.','line_number':895,'multiline':False]['text':'','line_number':896,'multiline':False]['text':' Note that we can only have failed_children if the','line_number':897,'multiline':False]['text':' --keep-going flag was used, because without it the build','line_number':898,'multiline':False]['text':' will stop before diving in the other branch.','line_number':899,'multiline':False]['text':'','line_number':900,'multiline':False]['text':' Note that even if one of the children fails, we still','line_number':901,'multiline':False]['text':' added the other children to the list of candidate nodes','line_number':902,'multiline':False]['text':' to keep on building (--keep-going).','line_number':903,'multiline':False]['text':' We're waiting on one or more derived targets','line_number':914,'multiline':False]['text':' that have not yet finished building.','line_number':915,'multiline':False]['text':' Add this node to the waiting parents lists of','line_number':918,'multiline':False]['text':' anything we're waiting on, with a reference','line_number':919,'multiline':False]['text':' count so we can be put back on the list for','line_number':920,'multiline':False]['text':' re-evaluation when they've all finished.','line_number':921,'multiline':False]['text':' Skip this node if it has side-effects that are','line_number':934,'multiline':False]['text':' currently being built:','line_number':935,'multiline':False]['text':' The default when we've gotten through all of the checks above:','line_number':946,'multiline':False]['text':' this node is ready to be built.','line_number':947,'multiline':False]['text':' For debugging only:','line_number':952,'multiline':False]['text':'','line_number':953,'multiline':False]['text':' try:','line_number':954,'multiline':False]['text':'     self._validate_pending_children()','line_number':955,'multiline':False]['text':' except:','line_number':956,'multiline':False]['text':'     self.ready_exc = sys.exc_info()','line_number':957,'multiline':False]['text':'     return node','line_number':958,'multiline':False]['text':' We had a problem just trying to get this task ready (like','line_number':986,'multiline':False]['text':' a child couldn't be linked to a VariantDir when deciding','line_number':987,'multiline':False]['text':' whether this node is current).  Arrange to raise the','line_number':988,'multiline':False]['text':' exception when the Task is "executed."','line_number':989,'multiline':False]['text':' Prune recursion by flushing the waiting children','line_number':1022,'multiline':False]['text':' list immediately.','line_number':1023,'multiline':False]['text':' The container to_visit has been emptied.','line_number':1035,'multiline':False]['text':' We have the stick back the pending_children list into the','line_number':1038,'multiline':False]['text':' taskmaster because the python 1.5.2 compatibility does not','line_number':1039,'multiline':False]['text':' allow us to use in-place updates','line_number':1040,'multiline':False]['text':' All of the "cycles" found were single nodes in EXECUTED state,','line_number':1063,'multiline':False]['text':' which is to say, they really weren't cycles.  Just return.','line_number':1064,'multiline':False]['text':' Local Variables:','line_number':1078,'multiline':False]['text':' tab-width:4','line_number':1079,'multiline':False]['text':' indent-tabs-mode:nil','line_number':1080,'multiline':False]['text':' End:','line_number':1081,'multiline':False]['text':' vim: set expandtab tabstop=4 shiftwidth=4:','line_number':1082,'multiline':False]