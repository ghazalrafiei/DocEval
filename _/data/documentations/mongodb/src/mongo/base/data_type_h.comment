['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':40,'multiline':False]['text':' Second template parameter allows templatized SFINAE specialization.','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':' Something like:','line_number':47,'multiline':False]['text':'   template <typename T, typename std::enable_if<std::is_CONDITION<T>::value>::type>','line_number':48,'multiline':False]['text':'   struct Handler { ... };','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' That would allow you to constrain your specialization to all T's','line_number':51,'multiline':False]['text':' that std::is_CONDITION<T>','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' Again, note that you probably don't ever want to use this second','line_number':54,'multiline':False]['text':' parameter for anything.  If you're not interested in template meta','line_number':55,'multiline':False]['text':' programming to duck type in a specialization, you can pretend that','line_number':56,'multiline':False]['text':' this just says template <typename T>.','line_number':57,'multiline':False]['text':' It may be useful to specialize this for types that aren't natively','line_number':111,'multiline':False]['text':' default constructible. Otherwise there's no way for us to support','line_number':112,'multiline':False]['text':' that body of types (other than wrapping them with another tagged','line_number':113,'multiline':False]['text':' type). Also, this guarantees value/aggregate initialization, which','line_number':114,'multiline':False]['text':' guarantees no uninitialized memory leaks from load's, which gcc','line_number':115,'multiline':False]['text':' otherwise can't seem to see.','line_number':116,'multiline':False]['text':' The following dispatch functions don't just save typing, they also work','line_number':122,'multiline':False]['text':' around what seems like template type deduction bugs (for template','line_number':123,'multiline':False]['text':' specializations) in gcc.  I.e. for sufficiently complicated workflows (a','line_number':124,'multiline':False]['text':' specialization for tuple), going through dispatch functions compiles on','line_number':125,'multiline':False]['text':' gcc 4.9 and using DataType<T> does not.','line_number':126,'multiline':False]['text':' We return a status and take an out pointer so that we can:','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' 1. Run a load without returning a value (I.e. skip / validate)','line_number':130,'multiline':False]['text':' 2. Load directly into a remote structure, rather than forcing moves of','line_number':131,'multiline':False]['text':'    possibly large objects','line_number':132,'multiline':False]['text':' namespace mongo','line_number':164,'multiline':False]['text':' Force the visibility of the DataType::Handler specializations.','line_number':166,'multiline':False]