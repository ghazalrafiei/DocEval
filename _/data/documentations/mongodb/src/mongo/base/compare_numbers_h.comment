['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * These functions compare numbers using the same rules as BSON. Care is taken to always give
 * numerically correct results when comparing different types. Returns are always -1, 0, or 1 to
 * ensure it is safe to negate the result to invert the direction of the comparison.
 *
 * lhs > rhs returns 1
 * lhs < rhs returns -1
 * lhs == rhs returns 0
 *
 ','line_number':39,'multiline':True]['text':' If none of the above cases returned, lhs or rhs must be NaN.','line_number':66,'multiline':False]['text':' This is the tricky one. Needs to support the following cases:','line_number':73,'multiline':False]['text':' * Doubles with a fractional component.','line_number':74,'multiline':False]['text':' * Longs that can't be precisely represented as a double.','line_number':75,'multiline':False]['text':' * Doubles outside of the range of Longs (including +/- Inf).','line_number':76,'multiline':False]['text':' * NaN (defined by us as less than all Longs)','line_number':77,'multiline':False]['text':' * Return value is always -1, 0, or 1 to ensure it is safe to negate.','line_number':78,'multiline':False]['text':' All Longs are > NaN','line_number':80,'multiline':False]['text':' Ints with magnitude <= 2**53 can be precisely represented as doubles.','line_number':84,'multiline':False]['text':' Additionally, doubles outside of this range can't have a fractional component.','line_number':85,'multiline':False]['text':' Large magnitude doubles (including +/- Inf) are strictly > or < all Longs.','line_number':91,'multiline':False]['text':' positive 2**63','line_number':92,'multiline':False]['text':' Can't be represented in a Long.','line_number':94,'multiline':False]['text':' Can be represented in a Long.','line_number':96,'multiline':False]['text':' Remaining Doubles can have their integer component precisely represented as long longs.','line_number':98,'multiline':False]['text':' If they have a fractional component, they must be strictly > or < lhs even after','line_number':99,'multiline':False]['text':' truncation of the fractional component since low-magnitude lhs were handled above.','line_number':100,'multiline':False]['text':' Only implement the real logic once.','line_number':105,'multiline':False]['text':'* Decimal type comparisons
 * These following cases need support:
 * 1. decimal and decimal: directly compare (enforce ordering: NaN < -Inf < N < +Inf)
 * 2. decimal and int: convert int to decimal and compare
 * 3. decimal and long: convert long to decimal and compare
 * 4. decimal to double: convert decimal to double with round toward negative.
 *    Check for exact conversion and determine ordering based on result.
 ','line_number':109,'multiline':True]['text':' Case 1: Compare two decimal values, but enforce MongoDB's total ordering convention','line_number':118,'multiline':False]['text':' When we're comparing, lhs is always a decimal, which means more often than not','line_number':120,'multiline':False]['text':' the rhs will be less than the lhs (decimal type has the largest capacity)','line_number':121,'multiline':False]['text':' lhs is necessarily equal to rhs','line_number':130,'multiline':False]['text':' Compare decimal and int','line_number':134,'multiline':False]['text':' Compare decimal and long','line_number':143,'multiline':False]['text':' Compare decimal and double','line_number':152,'multiline':False]['text':' If our conversion was not exact, lhs was necessarily greater than rhs','line_number':158,'multiline':False]['text':' otherwise, they are equal','line_number':159,'multiline':False]['text':' namespace mongo','line_number':181,'multiline':False]