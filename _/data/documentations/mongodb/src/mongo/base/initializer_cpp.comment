['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Note that cycles in the dependency graph are not discovered by this
     * function. Rather, they're discovered by `topSort`, below.
     ','line_number':62,'multiline':True]['text':'*
     * Returns the payload of the node that was added by `name`, or nullptr if no such node exists.
     ','line_number':78,'multiline':True]['text':'*
     * Returns a topological sort of the dependency graph, represented
     * as an ordered vector of node names.
     *
     * - Throws with `ErrorCodes::GraphContainsCycle` if the graph contains a cycle.
     *
     * - Throws with `ErrorCodes::BadValue` if the graph is incomplete.
     *   That is, a node named in a dependency edge was never added.
     ','line_number':85,'multiline':True]['text':'*
     * Map of all named nodes. Nodes named as dependency edges but not
     * explicitly added will either be absent from this map or be present with
     * a null-valude initFn.
     ','line_number':99,'multiline':True]['text':' freeze','line_number':142,'multiline':False]['text':' Legacy initializer without re-initialization support.','line_number':154,'multiline':False]['text':' The order of the initializers is non-deterministic, so make it available.','line_number':166,'multiline':False]['text':' Must be after verbose has been parsed, or the Debug(2) severity won't be visible.','line_number':167,'multiline':False]['text':' Execute deinitialization in reverse order from initialization.','line_number':180,'multiline':False]['text':' Make sure that getGlobalInitializer() is called at least once before main(), and so at least','line_number':230,'multiline':False]['text':' once in a single-threaded context.  Otherwise, static initialization inside','line_number':231,'multiline':False]['text':' getGlobalInitializer() won't be thread-safe.','line_number':232,'multiline':False]['text':' namespace','line_number':238,'multiline':False]['text':' namespace mongo','line_number':240,'multiline':False]