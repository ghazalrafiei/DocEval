['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * StatusWith is used to return an error or a value.
 * This class is designed to make exception-free code cleaner by not needing as many out
 * parameters.
 *
 * Example:
 * StatusWith<int> fib( int n ) {
 *   if ( n < 0 )
 *       return StatusWith<int>( ErrorCodes::BadValue, "parameter to fib has to be >= 0" );
 *   if ( n <= 1 ) return StatusWith<int>( 1 );
 *   StatusWith<int> a = fib( n - 1 );
 *   StatusWith<int> b = fib( n - 2 );
 *   if ( !a.isOK() ) return a;
 *   if ( !b.isOK() ) return b;
 *   return StatusWith<int>( a.getValue() + b.getValue() );
 * }
 ','line_number':63,'multiline':True]['text':' `TagTypeBase` is used as a base for the `TagType` type, to prevent it from being an','line_number':85,'multiline':False]['text':' aggregate.','line_number':86,'multiline':False]['text':' `TagType` is used as a placeholder type in parameter lists for `enable_if` clauses.  They','line_number':91,'multiline':False]['text':' have to be real parameters, not template parameters, due to MSVC limitations.','line_number':92,'multiline':False]['text':'*
     * For the error case.
     * As with the `Status` constructors, `reason` can be `std::string` or
     * anything that can construct one (e.g. `StringData`, `str::stream`).
     ','line_number':101,'multiline':True]['text':'*
     * for the error case
     ','line_number':113,'multiline':True]['text':'*
     * for the OK case
     ','line_number':120,'multiline':True]['text':'*
     * This method is a transitional tool, to facilitate transition to compile-time enforced status
     * checking.
     *
     * NOTE: DO NOT ADD NEW CALLS TO THIS METHOD. This method serves the same purpose as
     * `.getStatus().ignore()`; however, it indicates a situation where the code that presently
     * ignores a status code has not been audited for correctness. This method will be removed at
     * some point. If you encounter a compiler error from ignoring the result of a `StatusWith`
     * returning function be sure to check the return value, or deliberately ignore the return
     * value. The function is named to be auditable independently from unaudited `Status` ignore
     * cases.
     ','line_number':158,'multiline':True]['text':' The `TagType` type cannot be constructed as a default function-parameter in Clang.  So we use','line_number':174,'multiline':False]['text':' a static member function that initializes that default parameter.','line_number':175,'multiline':False]['text':' SFINAE on T streamability.','line_number':195,'multiline':False]['text':' SFINAE on T streamability.','line_number':204,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' EqualityComparable(StatusWith<T>, T). Intentionally not providing an ordering relation.','line_number':212,'multiline':False]['text':'','line_number':213,'multiline':False]['text':'','line_number':235,'multiline':False]['text':' EqualityComparable(StatusWith<T>, Status)','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' EqualityComparable(StatusWith<T>, ErrorCode)','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':' namespace mongo','line_number':283,'multiline':False]