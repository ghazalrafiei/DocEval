['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':45,'multiline':False]['text':' namespace secure_allocator_details','line_number':73,'multiline':False]['text':'*
 * Provides a secure allocator for trivially copyable types. By secure we mean
 * memory that will be zeroed on free and locked out of paging while in memory
 * (to prevent it from being written to disk).
 *
 * While this type can be used with any allocator aware container, it should be
 * considered whether either of the two named specializations below are
 * sufficient (a string and a vector). The allocations out of this container
 * are quite expensive, so one should endeavor to use containers which make
 * few, contiguous allocations where possible.
 *
 * Note that this allocator is written without reling on default
 * semantics injected via allocator_traits, and so defines all
 * optional allocator members, and does not rely on allocator_traits
 * to default them in. See http://stackoverflow.com/a/33267132 for a
 * rationale for GCC 4.8, our current default compiler. There is also
 * evidence that MSVC 2013's _DEBUG STL does not work correctly with
 * allocator_traits.
 *
 * See also: http://howardhinnant.github.io/allocator_boilerplate.html
 ','line_number':75,'multiline':True]['text':'*
         * We only support trivially copyable types to avoid situations where the
         * SecureAllocator is used in containers with complex types that do their
         * own allocation. I.e. one could otherwise have a:
         *
         * std::vector<std::string, SecureAllocator<std::string>>
         *
         * where the vectors were stored securely, but the strings spilled to the
         * heap
         *
         ','line_number':100,'multiline':True]['text':' NOTE: The standard doesn't seem to require these, but libstdc++','line_number':114,'multiline':False]['text':' definitly wants them.','line_number':115,'multiline':False]['text':' NOTE: These members are defined in the same order as specified','line_number':120,'multiline':False]['text':' in the "Allocator Requirements" section of the standard. Please','line_number':121,'multiline':False]['text':' retain this ordering.','line_number':122,'multiline':False]['text':' SecureAllocator is stateless, so just return a default','line_number':171,'multiline':False]['text':' constructed instance.','line_number':172,'multiline':False]['text':' For background:','line_number':176,'multiline':False]['text':'','line_number':177,'multiline':False]['text':' http://stackoverflow.com/questions/27471053/example-usage-of-propagate-on-container-move-assignment','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' https://foonathan.github.io/blog/2015/10/05/allocatorawarecontainer-propagation-pitfalls.html','line_number':180,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' This allocator is stateless, so we can avoid a runtime check','line_number':182,'multiline':False]['text':' (even though it would probably be optimized out based on the','line_number':183,'multiline':False]['text':' constrexpr-esque nature of our equality comparison operator),','line_number':184,'multiline':False]['text':' so we can set all of these to true.','line_number':185,'multiline':False]['text':' Note: If you change this, you must re-evaluate the select_ and','line_number':195,'multiline':False]['text':' propagate_ methods and typedefs above.','line_number':196,'multiline':False]['text':'*
     * SecureHandle offers a smart pointer-ish interface to a type.
     *
     * It attempts to solve the problem of using container types with small object optimizations
     * that
     * might accidentally leave important data on the stack if they're too small to spill to the
     * heap.
     * It uses the secure allocator for allocations and deallocations.
     *
     * This type is meant to offer more value like semantics than a unique_ptr:
     *   - SecureHandle's are only default constructible if their T is
     *   - You can construct a SecureHandle like the underlying value:
     *       SecureHandle<Mytype> type(foo, bar baz);
     *   - SecureHandle's are copyable if their T's are
     *   - only moving can produce a non-usable T
     *
     * While still being cheap and convenient like a unique_ptr:
     *   - SecureHandle's move by pointer to their secure storage
     *   - T& operator*()
     *   - T* operator->()
     *
     * In a moved from state, SecureHandle's may be copy or move assigned and the destructor may
     * run,
     * but all other operations will invariant.
     ','line_number':205,'multiline':True]['text':' NOTE: (jcarey)','line_number':233,'multiline':False]['text':'','line_number':234,'multiline':False]['text':' We have the default ctor and the perfect forwarding ctor because msvc 2013 ice's on some','line_number':235,'multiline':False]['text':' default constructed types without it (sfinae was falling over for some reason).','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':' For non-default constructible t's, we'll fail to substitute the forwarded call to new','line_number':238,'multiline':False]['text':' Generic constructor that forwards to the underlying T if the first arg isn't a','line_number':241,'multiline':False]['text':' SecureHandle','line_number':242,'multiline':False]['text':' namespace mongo','line_number':345,'multiline':False]