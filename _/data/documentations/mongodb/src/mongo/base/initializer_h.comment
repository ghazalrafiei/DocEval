['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'* Context of an initialization process. Passed as a parameter to initialization functions. ','line_number':42,'multiline':True]['text':'* Context of a deinitialization process. Passed as a parameter to deinitialization functions. ','line_number':55,'multiline':True]['text':'*
 * An InitializerFunction implements the behavior of an initializer operation.
 * It may inspect and mutate the supplied InitializerContext.
 * Throws on failure.
 ','line_number':63,'multiline':True]['text':'*
 * A DeinitializerFunction implements the behavior of a deinitializer operation.
 * It may inspect and mutate the supplied DeinitializerContext.
 * Throws on failure.
 ','line_number':70,'multiline':True]['text':'*
 * Class representing an initialization process.
 *
 * Such a process is described by a directed acyclic graph of initialization operations, the
 * InitializerDependencyGraph. One constructs an initialization process by adding nodes and
 * edges to the graph.  Then, one executes the process, causing each initialization operation to
 * execute in an order that respects the programmer-established prerequistes.
 *
 * The initialize and delinitialize process can repeat, a features which
 * supports embedded contexts.  However, the graph cannot be modified with
 * `addInitializer` after the first initialization. Latecomers are rejected.
 ','line_number':78,'multiline':True]['text':'*
     * Add a new initializer node, with the specified `name`, to the dependency graph, with the
     * given behavior, `initFn`, `deinitFn`, and with the given `prerequisites` and `dependents`,
     * which are the names of other initializers which will be in the graph when `topSort`
     * is called. `initFn` must be non-null, but null-valued `deinitFn` are allowed.
     *
     * - Throws `ErrorCodes::BadValue` if `initFn` is null-valued.
     *
     * - Throws with `ErrorCodes::CannotMutateObject` if the graph has been frozen
     *   by a previous call to `executeInitializers`.
     ','line_number':95,'multiline':True]['text':'*
     * Execute the initializer process, using the given args as input.
     * This call freezes the graph, so that addInitializer will reject any latecomers.
     *
     * Throws on initialization failures, or on invalid call sequences
     * (double-init, double-deinit, etc) and the thing being initialized should
     * be considered dead in the water.
     ','line_number':112,'multiline':True]['text':'*
     * Executes all deinit functions in reverse order from init order.
     * Note that this does not unfreeze the graph. Freezing is permanent.
     ','line_number':122,'multiline':True]['text':'*
     * Returns the function mapped to `name`, for testing only.
     *
     * Throws with `ErrorCodes::BadValue` if name is not mapped to a node.
     ','line_number':128,'multiline':True]['text':'*
     *  kNeverInitialized
     *  |
     *  +-> kUninitialized <----------+
     *      |                         |
     *      +-> kInitializing         |
     *          |                     |
     *          +-> kInitialized      |
     *              |                 |
     *              +-> kDeinitializing
     ','line_number':138,'multiline':True]['text':'/< still accepting addInitializer calls','line_number':150,'multiline':False]['text':' pimpl','line_number':159,'multiline':False]['text':'*
 * Get the process-global initializer object.
 ','line_number':164,'multiline':True]['text':'*
 * Run the global initializers.
 *
 * It's a programming error for this to fail, but if it does it will return a status other
 * than Status::OK.
 *
 * This means that the few initializers that might want to terminate the program by failing
 * should probably arrange to terminate the process themselves.
 ','line_number':169,'multiline':True]['text':'*
 * Same as runGlobalInitializers(), except prints a brief message to std::cerr
 * and terminates the process on failure.
 ','line_number':180,'multiline':True]['text':'*
 * Run the global deinitializers. They will execute in reverse order from initialization.
 *
 * It's a programming error for this to fail, but if it does it will return a status other
 * than Status::OK.
 *
 * This means that the few initializers that might want to terminate the program by failing
 * should probably arrange to terminate the process themselves.
 ','line_number':186,'multiline':True]['text':' namespace mongo','line_number':197,'multiline':False]