['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This is the default `CloneFactory` conforming to `mongo::concept::CloneFactory` for','line_number':40,'multiline':False]['text':' `clonable_ptr`.','line_number':41,'multiline':False]['text':' TODO: Move some of these traits detection structs to a template metaprogramming header.','line_number':49,'multiline':False]['text':' namespace clonable_ptr_detail','line_number':89,'multiline':False]['text':'*
 * The 'clonable_traits' class is a specializable traits class for clonable-like types.  By
 * specializing this traits class for a type it is possible to change the global default
 * `CloneFactory` type for a specific type.  Types which conform to `mongo::concept::Clonable`
 * will get a default `CloneFactory` type whch invokes their specific `Clonable::clone` function.  A
 * specialization can be used to make a type use a different clone factory function.  A type `T` may
 * specify `T::clone_factory_type` instead of specializing this traits type.
 ','line_number':91,'multiline':True]['text':'*
 * The `clonable_ptr` represents a value-like type held at a distance.  The `clonable_ptr` class is
 * a smart-pointer type which functions like a `std::unique_ptr` with the added ability to create
 * new copies of the pointee on copy construction.  The default CloneFactory assumes that `T` is a
 * type which models the Concept `mongo::concept::Clonable`.  The supplied type may supply an
 * alternative default `CloneFactory` type by either of two means:
 *
 *  * `T` may define a member `T::clone_factory_type` which conforms to
 *    `mongo::concept::CloneFactory`
 *  * `T` may have an accompanying specialization of `mongo::clonable_traits< T >` which
 *    defines `clonable_factory_type`.
 *
 * NOTE: The `CloneFactory` type is permitted to be stateful, but must be copy constructible and
 * copy assignable.
 * NOTE: The `CloneFactory` member does NOT participate in value comparisons for a `clonable_ptr`,
 * even when it has state.
 *
 * `T`: The type of the object being managed.
 * `CloneFactory`: A type which models the Concept `mongo::concept::CloneFactory`.
 * `UniquePtr`: A type which models the Concept `mongo::concept::UniquePtr`
 ','line_number':102,'multiline':True]['text':' `std::tuple` is used to avoid allocating storage for `cloneFactory` if it is a non-storage','line_number':128,'multiline':False]['text':' type.','line_number':129,'multiline':False]['text':'! Destroys this pointer.  Functions like `std::unique_ptr`. ','line_number':174,'multiline':True]['text':'! Moves a value, by pointer.  Functions like `std::unique_ptr`. ','line_number':177,'multiline':True]['text':'! Moves a value, by pointer.  Functions like `std::unique_ptr`. ','line_number':182,'multiline':True]['text':'!
     * Constructs a pointer referring to a new copy of an original value.  The old object owned by
     * `*this` will be deleted, and `*this` will manage a new copy of `copy`, as created by
     * `copy->clone()`.  If `copy` is not managing anything (its internal pointer is `nullptr`),
     * then this new copy will also be nullptr.
     *
     * POST: `copy != nullptr ? copy != *this : copy == *this` -- If `copy` stores a pointer to a
     * value, then `*this` will have an independent pointer.  If `copy` stores `nullptr`, then
     * `*this` will also store `nullptr`.
     *
     * `copy`: The original value to copy.
     * THROWS: Any exceptions thrown by `cloneFactory( *copy )`.
     * TODO: Consider adding a noexcept deduction specifier to this copy operation.
     ','line_number':187,'multiline':True]['text':'!
     * Constructs a pointer referring to a new copy of an original value.  The old object owned by
     * `*this` will be deleted, and `*this` will manage a new copy of `copy`, as created by
     * `copy->clone()`.  If `copy` is not managing anything (its internal pointer is `nullptr`),
     * then this new copy will also be nullptr.
     *
     * POST: `copy != nullptr ? copy != *this : copy == *this` -- If `copy` stores a pointer to a
     * value, then `*this` will have an independent pointer.  If `copy` stores `nullptr`, then
     * `*this` will also store `nullptr`.
     *
     * NOTE: The `CloneFactory` will be copied from the `copy` poiner, by default.
     *
     * `copy`: The original value to copy.
     * `factory`: The factory to use for cloning.  Defaults to the source's factory.
     * THROWS: Any exceptions thrown by `factory( *copy )`.
     * TODO: Consider adding a noexcept deduction specifier to this copy operation.
     ','line_number':204,'multiline':True]['text':'!
     * Changes the value of this pointer, by creating a new object having the same value as `copy`.
     * The old object owned by `*this` will be deleted, and `*this` will manage a new copy of
     * `copy`, as created by `copy->clone()`.  If `copy` is not managing anything (its internal
     * pointer is `nullptr`), then this new copy will also be nullptr.
     *
     * NOTE: This operation cannot be conducted on an xvalue or prvalue instance.  (This prevents
     * silliness such as: `func_returning_ptr()= some_other_func_returning_ptr();`)
     *
     * NOTE: `copy`'s `CloneFactory` will be used to copy.
     *
     * POST: `copy != nullptr ? copy != *this : copy == *this` -- If `copy` stores a pointer to a
     * value, then `*this` will have an independent pointer.  If `copy` stores `nullptr`, then
     * `*this` will also store `nullptr`.
     *
     * `copy`: The value to make a copy of.
     * RETURNS: A reference to this pointer, after modification.
     * TODO: Consider adding a noexcept deduction specifier to this copy operation.
     ','line_number':224,'multiline':True]['text':' Maintenance note: The two enable_if overloads of `clonable_ptr( std::nullptr_t )` are','line_number':247,'multiline':False]['text':' necessary, due to the fact that `std::nullptr_t` is capable of implicit conversion to a','line_number':248,'multiline':False]['text':' built-in pointer type.  If the stateful form being deleted causes the `nullptr` to convert,','line_number':249,'multiline':False]['text':' this could cause binding to another ctor which may be undesired.','line_number':250,'multiline':False]['text':'!
     * `nullptr` construct a clonable pointer (to `nullptr`), if the `CloneFactory` type is
     * stateless.
     * The value will be a pointer to nothing, with a default `CloneFactory`.
     * NOTE: This constructor is only available for types with a stateless `CloneFactory` type.
     ','line_number':252,'multiline':True]['text':'!
     * Disable `nullptr` construction of clonable pointer (to `nullptr`), if the `CloneFactory` type
     * is stateful.
     * NOTE: This constructor is disabled for types with a stateless `CloneFactory` type.
     ','line_number':262,'multiline':True]['text':'!
     * Constructs a pointer to nothing, with a default `CloneFactory`.
     * This function is unavailable when `CloneFactory` is stateful.
     ','line_number':272,'multiline':True]['text':'! Constructs a pointer to nothing, with the specified `CloneFactory`. ','line_number':280,'multiline':True]['text':'!
     * Constructs a `clonable_ptr` which owns `p`, initializing the stored pointer with `p`.
     * This function is unavailable when `CloneFactory` is stateful.
     * `p`: The pointer to take ownership of.
     ','line_number':283,'multiline':True]['text':'!
     * Disable single-argument construction of clonable pointer (with a raw pointer), if the
     * `CloneFactory` type is stateful.
     * NOTE: This constructor is disabled for types with a stateless `CloneFactory` type.
     ','line_number':293,'multiline':True]['text':' The reason that we have two overloads for clone factory is to ensure that we avoid as many','line_number':302,'multiline':False]['text':' exception-unsafe uses as possible.  The const-lvalue-reference variant in conjunction with','line_number':303,'multiline':False]['text':' the rvalue-reference variant lets us separate the cases of "constructed in place" from','line_number':304,'multiline':False]['text':' "passed from a local".  In the latter case, we can't make our type any safer, since the','line_number':305,'multiline':False]['text':' timing of the construction of the local and the timing of the `new` on the raw pointer are','line_number':306,'multiline':False]['text':' out of our control.  At least we prevent an accidental use which SEEMS exception safe but','line_number':307,'multiline':False]['text':' isn't -- hopefully highlighting exception unsafe code, by making it more explicit.  In the','line_number':308,'multiline':False]['text':' former, "constructed in place", case, we are able to successfully move construct without','line_number':309,'multiline':False]['text':' exception problems, if it's nothrow move constructible.  If it isn't we flag a compiler','line_number':310,'multiline':False]['text':' error.  In this case, too, we prevent accidental use which SEEMS exception safe and hopefully','line_number':311,'multiline':False]['text':' will similarly highlight exception unsafe code.','line_number':312,'multiline':False]['text':'!
     * Constructs a `clonable_ptr` which owns `p`, initializing the stored pointer with `p`.  The
     * `factory` parameter will be used as the `CloneFactory`
     * `p`: The pointer to take ownership of.
     * `factory`: The clone factory to use in future copies.
     * NOTE: It is not recommended to use this constructor, as the following is not exception safe
     * code:
     * ~~~
     * std::function<T* ()> cloner= [](const T& p){ return p; };
     * auto getCloner= [=]{ return cloner; };
     * clonable_ptr<T, std::function<T* ()>> bad{new T, getCloner()}; // BAD IDEA!!!
     * ~~~
     * Even if the above could be made exception safe, there are other more complicated use cases
     * which would not be exception safe.  (The above is not exception safe, because the `new T`
     * expression can be evaluated before the `getCloner()` expression is evaluated.  `getCloner()`
     * is allowed to throw, thus leaving `new T` to be abandoned.
     ','line_number':314,'multiline':True]['text':'!
     * We forbid construction of a `clonable_ptr` from an unmanaged pointer, when specifying
     * a cloning function -- regardless of whether the `CloneFactory` is stateful or not.
     * NOTE: We have disabled this constructor, as the following is not exception safe
     * code:
     * ~~~
     * clonable_ptr<T, std::function<T* ()>> bad{new T, [](const T& p){ return p; }}; // BAD IDEA!!!
     * ~~~
     * Even if the above could be made exception safe, there are other more complicated use cases
     * which would not be exception safe.  (The above is not exception safe, because the `new T`
     * expression can be evaluated before the lambda expression is evaluated and converted to a
     * `std::function`.  The `std::function` constructor is allowed to throw, thus leaving `new T`
     * to be abandoned.  More complicated cases are completely hidden from `clonable_ptr`'s
     * inspection, thus making this constructor too dangerous to exist.
     ','line_number':334,'multiline':True]['text':'!
     * Constructs a `nullptr` valued clonable pointer, with a specified `CloneFactory`, `factory`.
     ','line_number':351,'multiline':True]['text':'!
     * Constructs a `clonable_ptr` by transferring ownership from `p` to `*this`.  A default
     * `CloneFactory` will be provided for future copies.
     * `p`: The pointer to take ownership of.
     * NOTE: This constructor allows for implicit conversion from a `UniquePtr` (xvalue) object.
     * NOTE: This constructor is unavailable when `CloneFactory` is stateful.
     * NOTE: This usage should be preferred over the raw-pointer construction forms, when using
     * factories as constructor arguments, as in the following exception safe code:
     * ~~~
     * clonable_ptr<T, std::function<T* ()>> good{std::make_unique<T>(),
     *                                            [](const T& p){ return p; }}; // GOOD IDEA!!!
     * ~~~
     ','line_number':357,'multiline':True]['text':'!
     * Constructs a `clonable_ptr` by transferring ownership from `p` to `*this`.  The `factory`
     * parameter will be used as the `CloneFactory` for future copies.
     * NOTE: This constructor allows for implicit conversion from a `UniquePtr` (xvalue) object.
     * `p`: The pointer to take ownership of.
     * `factory`: The clone factory to use in future copies.
     * NOTE: This usage should be preferred over the raw-pointer construction forms, when using
     * factories as constructor arguments, as in the following exception safe code:
     * ~~~
     * clonable_ptr<T, std::function<T* ()>> good{std::make_unique<T>(),
     *                                            [](const T& p){ return p; }}; // GOOD IDEA!!!
     * ~~~
     ','line_number':374,'multiline':True]['text':'!
     * Changes the value of this pointer, by creating a new object having the same value as `copy`.
     * The old object owned by `*this` will be deleted, and `*this` will manage a new copy of
     * `copy`, as created by `copy->clone()`.  If `copy` is not managing anything (its internal
     * pointer is `nullptr`), then this new copy will also be nullptr.
     *
     * NOTE: This operation cannot be performed on an xvalue or prvalue instance.  (This prevents
     * silliness such as: `func_returning_ptr()= some_other_func_returning_ptr();`)
     *
     * NOTE: `copy`'s `CloneFactory` will be used to copy.
     *
     * POST: `copy != nullptr ? copy != *this : copy == *this` -- If `copy` stores a pointer to a
     * value, then `*this` will have an independent pointer.  If `copy` stores `nullptr`, then
     * `*this` will also store `nullptr`.
     *
     * `copy`: The value to make a copy of.
     * RETURNS: A reference to this pointer, after modification.
     ','line_number':391,'multiline':True]['text':'!
     * Change the `CloneFactory` for `*this` to `factory`.
     * NOTE: This operation cannot be performed on an xvalue or prvalue instance.  (This prevents
     * silliness such as: `func_returning_ptr().setCloneFactory( factory );`.)
     ','line_number':418,'multiline':True]['text':'!
     * Dereferences the pointer owned by `*this`.
     * NOTE: The behavior is undefined if `this->get() == nullptr`.
     * RETURNS: The object owned by `*this`, equivalent to `*get()`.
     ','line_number':428,'multiline':True]['text':'!
     * Dereferences the pointer owned by `*this`.
     * NOTE: The behavior is undefined if `this->get() == nullptr`.
     * RETURNS: A pointer to the object owned by `*this`, equivalent to `get()`.
     ','line_number':437,'multiline':True]['text':'!
     * Returns `true` if `*this` owns a pointer to a value, and `false` otherwise.
     * RETURNS: A value equivalent to `static_cast< bool >( this->get() )`.
     ','line_number':446,'multiline':True]['text':'!
     * Converts `*this` to a `UniquePtr< T >` by transferring ownership.  This function will retire
     * ownership of the pointer owned by `*this`.  This is a safe operation, as this function cannot
     * be called from an lvalue context -- rvalue operations are used to represent transfer of
     * ownership semantics.
     *
     * NOTE: This function is only applicable in `rvalue` contexts.
     * NOTE: This function has transfer of ownership semantics.
     *
     * RETURNS: A `UniquePtr< T >` which owns the pointer formerly managed by `*this`.
     ','line_number':454,'multiline':True]['text':'! Provides a constant `UniquePtr< T >` view of the object owned by `*this`. ','line_number':469,'multiline':True]['text':'! Provides a mutable `UniquePtr< T >` view of the object owned by `*this`. ','line_number':474,'multiline':True]['text':'! Provides a C-style `T *` pointer to the object owned by `*this`. ','line_number':479,'multiline':True]['text':' Equality','line_number':492,'multiline':False]['text':' Strict weak order','line_number':516,'multiline':False]['text':' Inequality','line_number':541,'multiline':False]['text':' Greater than','line_number':568,'multiline':False]['text':' Equal or Less','line_number':595,'multiline':False]['text':' Equal or greater','line_number':622,'multiline':False]['text':' namespace mongo','line_number':648,'multiline':False]