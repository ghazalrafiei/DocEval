['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' These are helper types to make ConstDataRange's and friends constructable either from','line_number':50,'multiline':False]['text':' a range of byte-like pointers or from a container of byte-like values.','line_number':51,'multiline':False]['text':'','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' You can construct a ConstDataRange from any byte-like sequence. Byte-like means an','line_number':83,'multiline':False]['text':' integral type with a size of one.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' begin and end should point to the first and one past last bytes in','line_number':86,'multiline':False]['text':' the range you wish to view.','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' debug_offset provides a way to indicate that the ConstDataRange is','line_number':89,'multiline':False]['text':' located at an offset into some larger logical buffer. By setting it','line_number':90,'multiline':False]['text':' to a non-zero value, you'll change the Status messages that are','line_number':91,'multiline':False]['text':' returned on failure to be offset by the amount passed to this','line_number':92,'multiline':False]['text':' constructor.','line_number':93,'multiline':False]['text':' Constructing from nullptr, nullptr initializes an empty ConstDataRange.','line_number':102,'multiline':False]['text':' You can also construct from a pointer to a byte-like type and a size.','line_number':106,'multiline':False]['text':' ConstDataRange can also act as a view of a container of byte-like values, such as a','line_number':113,'multiline':False]['text':' std::vector<uint8_t> or a std::array<char, size>. The requirements are that the','line_number':114,'multiline':False]['text':' value_type of the container is byte-like and that the values be contiguous - the container','line_number':115,'multiline':False]['text':' must have a data() function that returns a pointer to the front and a size() function','line_number':116,'multiline':False]['text':' that returns the number of elements.','line_number':117,'multiline':False]['text':' You can also construct from a C-style array, including string literals.','line_number':123,'multiline':False]['text':'*
     * Split this ConstDataRange into two parts at `splitPoint`.
     * May provide either a pointer within the range or an offset from the beginning.
     ','line_number':173,'multiline':True]['text':'*
     * Create a smaller chunk of the original ConstDataRange.
     * May provide either a pointer within the range or an offset from the beginning.
     ','line_number':182,'multiline':True]['text':' Shared implementation of split() logic between DataRange and ConstDataRange.','line_number':209,'multiline':False]['text':' RangeT will enforce constness, so use common-denominator for args to ctor.','line_number':216,'multiline':False]['text':' Convenience wrapper to just grab the first half of a split.','line_number':228,'multiline':False]['text':' You can construct a DataRange from all the same types as ConstDataRange, except that the','line_number':245,'multiline':False]['text':' arguments may not be const (since this is the mutable version of ConstDataRange).','line_number':246,'multiline':False]['text':' Enable for classes derived from ConstDataRange','line_number':334,'multiline':False]['text':' Assuming you know what you're doing at the read above this','line_number':340,'multiline':False]['text':' is fine.  Either you're reading into a readable buffer, so','line_number':341,'multiline':False]['text':' ptr started off non-const, or the const_cast will feed back','line_number':342,'multiline':False]['text':' to const char* taking Const variants.  So it'll get tossed','line_number':343,'multiline':False]['text':' out again.','line_number':344,'multiline':False]['text':' namespace mongo','line_number':377,'multiline':False]