['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * Simple8B is a compression method for storing unsigned int 64 values. In this case
 * we make a few optimizations detailed below. We reserve the 4 lsbs for a baseSelector value. And
 * then we encode integers based on the following selector choice:
 *
 * Selector value:     0 |  1  2  3  4  5  6  7  8  9 10 11 12 13 14 | 15 (RLE)
 * Integers coded:     0 | 60 30 20 15 12 10  8  7  6  5  4  3  2  1 | up to 1920
 * Value Bits/integer: 0 |  1  2  3  4  5  6  7  8 10 12 15 20 30 60 | Last Value added
 * Wasted bits:        0 |  0  0  0  0  0  0  4  4  0  0  0  0  0  0 | 56
 * Total Bits/Integer: 0 |  1  2  3  4  5  6  7  8 10 12 15 20 30 60 | Last Valued added
 *
 * However, we make optimizations for selector value 7 and 8. We can see there are 4
 * wasted trailing bits. Using these 4 bits we can consider compression of trailing zeros.
 * For a selector extension value of 7, we store 4 bits and these represent up to 15 trailing zeros.
 * The extension bits are stored directly after the initial selector bits so that the simple8b word
 * looks like: | Base Selector (0-3) | Selector Extension (4-7) | Bits for Values (8 - 63)
 *
 * Selector Value:              0 | 7  7  7  7  7  7  7  7  7
 * Selector 7 Extension Value:  0 | 1  2  3  4  5  6  7  8  9
 * Value Bits/Integer:          0 | 2  3  4  5  7 10 14 24 52
 * TrailingZeroBits:            0 | 4  4  4  4  4  4  4  4  4
 * MaxTrailingZeroSize:         0 |15 15 15 15 15 15 15 15 15
 * Total Bits/Integer:          0 | 6  7  8  9 11 14 18 28 56
 *
 * Additionally, we consider larger trailing zero counts in selector 8. In this case the value
 * of the trailing zero bits is multiplied by a nibble shift of 4. We consider trailing zero sizes
 * of both 4 and 5 bits and thus, we split selector 8 in our implementation into Selector8Small and
 * Selector8Large
 *
 * Selector Value:             0 | 8   8   8   8   8   8   8   8   8   8   8   8   8
 * Selector 8 Extension Value: 0 | 1   2   3   4   5   6   7   8   9  10  11  12  13
 * Value Bits/Integer:         0 | 4   5   7  10  14  24  52   4   6   9  13  23  51
 * TrailingZeroBits:           0 | 4   4   4   4   4   4   4   5   5   5   5   5   5
 * MaxTrailingZerosSize:       0 |60  60  60  60  60  60  60 124 124 124 124 124 124
 * Total Bits/Integer:         0 | 8   9  11  14  18  28  56   9  11  14  18  28  56
 *
 * The simple8b words are according to this spec of selectors and their extension types.
 ','line_number':36,'multiline':True]['text':' Map selectorNames to their indexs.','line_number':75,'multiline':False]['text':' Variables to handle RLE','line_number':81,'multiline':False]['text':' Mask to obtain the base and extended selectors.','line_number':86,'multiline':False]['text':' Selectors are always of size 4','line_number':89,'multiline':False]['text':' Nibble Shift is always of size 4','line_number':92,'multiline':False]['text':' The max selector value for each extension','line_number':95,'multiline':False]['text':' The min selector value for each extension','line_number':98,'multiline':False]['text':' The max amount of data bits each selector type can store. This is the amount of bits in the 64bit','line_number':101,'multiline':False]['text':' word that are not used for selector values.','line_number':102,'multiline':False]['text':' The amount of bits allocated to store a set of trailing zeros','line_number':105,'multiline':False]['text':' The amount of possible trailing zeros each selector can handle in the trailingZeroBitSize','line_number':108,'multiline':False]['text':' Obtain a mask for the trailing zeros for the seven and eight selectors. We shift 4 and 5 bits to','line_number':111,'multiline':False]['text':' create the mask The trailingZeroBitSize variable is used as an index, but must be shifted - 4 to','line_number':112,'multiline':False]['text':' correspond to indexes 0 and 1.','line_number':113,'multiline':False]['text':' The amount of zeros each value in the trailing zero count represents','line_number':117,'multiline':False]['text':' Transfer from the base selector to the shift size.','line_number':121,'multiline':False]['text':' Transfer from a selector to a specific extension type','line_number':125,'multiline':False]['text':' This is for selector 7 and 8 extensions where the selector value is passed along with','line_number':126,'multiline':False]['text':' selector index.','line_number':127,'multiline':False]['text':' Transfer from a extensionType and selectorIdx to the selector value to be held in the 4 lsb (base','line_number':132,'multiline':False]['text':' selector)','line_number':133,'multiline':False]['text':' A mask to obtain the value bits for each selector including the trailing zero bits. The masks are','line_number':141,'multiline':False]['text':' calculated as the following: Mask = 2^(kBitsPerInteger+kTrailingZeroBitSize) - 1','line_number':142,'multiline':False]['text':' The number of meaningful bits for each selector. This does not include any trailing zero bits.','line_number':210,'multiline':False]['text':' We use 64 bits for all invalid selectors, this is to make sure iteration does not get stuck.','line_number':211,'multiline':False]['text':' The number of integers coded for each selector.','line_number':218,'multiline':False]['text':' namespace mongo::simple8b_internal','line_number':225,'multiline':False]