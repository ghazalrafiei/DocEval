['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The BSONColumn class represents an implementation to interpret a BSONElement of BinDataType 7,
 * which can efficiently store any BSONArray in a compact representation. The format has the
 * following high-level features and capabilities:
 *   - implied field names: decimal keys representing index keys are not stored.
 *   - type specific delta/delta-of-delta compression stored using Simple-8b: difference between
 *     subsequent scalars of the same type are stored with as few bits as possible.
 *   - doubles are scaled and rounded to nearest integer for efficient storage.
 *   - internal encoding for missing values.
 *   - run-length-encoding for efficient storage of large number of repeated values
 *   - object/array compression where scalars are internally stored as separate interleaved
 *     BSONColumn compressed binary streams.
 *
 * The BSONColumn will not take ownership of the provided binary, but otherwise implements an
 * interface similar to BSONObj.
 *
 * Iterators over the BSONColumn need to materialize BSONElement from deltas and use additional
 * storage owned by the BSONColumn. All BSONElements returned remain valid while the BSONColumn is
 * kept in scope. Multiple passes grows memory usage which is not free'd until the BSONColumn goes
 * out of scope or the release() function is called.
 *
 * Thread safety: The BSONColumn class is generally NOT thread-safe, unless declared otherwise. This
 * also applies to functions declared 'const'.
 ','line_number':62,'multiline':True]['text':'*
     * Input iterator type to access BSONElement from BSONColumn.
     *
     * A default-constructed BSONElement (EOO type) represents a missing value. Returned
     * BSONElements are owned by the BSONColumn instance and should not be kept after the BSONColumn
     * instance goes out of scope.
     *
     * Iterator can be used either as an STL iterator with begin() and end() or as a non-STL
     * iterator via begin() and incrementing until more() returns false.
     ','line_number':92,'multiline':True]['text':' typedefs expected in iterators','line_number':106,'multiline':False]['text':' Constructs an end iterator','line_number':113,'multiline':False]['text':' pre-increment operator','line_number':123,'multiline':False]['text':'*
         * Returns true if iterator may be incremented. Equivalent to comparing not equal with the
         * end iterator.
         ','line_number':133,'multiline':True]['text':' Constructs a begin iterator','line_number':142,'multiline':False]['text':' Initialize sub-object interleaving from current control byte position. Must be on a','line_number':145,'multiline':False]['text':' interleaved start byte.','line_number':146,'multiline':False]['text':' Handles EOO when in regular mode. Iterator is set to end.','line_number':149,'multiline':False]['text':' Checks if control byte is literal','line_number':152,'multiline':False]['text':' Checks if control byte is interleaved mode start','line_number':155,'multiline':False]['text':' Returns number of Simple-8b blocks from control byte','line_number':158,'multiline':False]['text':' Sentinel to represent end iterator','line_number':161,'multiline':False]['text':' Current iterator value','line_number':164,'multiline':False]['text':' Current iterator position','line_number':167,'multiline':False]['text':' Current control byte on iterator position','line_number':170,'multiline':False]['text':' End of BSONColumn memory block, we may not dereference any memory past this.','line_number':173,'multiline':False]['text':' Allocator to use when materializing elements','line_number':176,'multiline':False]['text':'*
         * Decoding state for decoding compressed binary into BSONElement. It is detached from the
         * actual binary to allow interleaving where control bytes corresponds to separate decoding
         * states.
         ','line_number':179,'multiline':True]['text':'*
             * Internal decoding state for types using 64bit aritmetic
             ','line_number':187,'multiline':True]['text':'*
             * Internal decoding state for types using 128bit aritmetic
             ','line_number':200,'multiline':True]['text':' Loads a literal','line_number':213,'multiline':False]['text':' Loads current control byte','line_number':216,'multiline':False]['text':' Loads delta value','line_number':221,'multiline':False]['text':' Last encoded values used to calculate delta and delta-of-delta','line_number':225,'multiline':False]['text':'*
         * Internal state for regular decoding mode (decoding of scalars)
         ','line_number':230,'multiline':True]['text':'*
         * Internal state for interleaved decoding mode (decoding of objects/arrays)
         ','line_number':237,'multiline':True]['text':' Interleaving reference object read when encountered the interleaving start control','line_number':245,'multiline':False]['text':' byte. We setup a decoding state for each scalar field in this object. The object','line_number':246,'multiline':False]['text':' hierarchy is used to re-construct with full objects with the correct hierachy to the','line_number':247,'multiline':False]['text':' user.','line_number':248,'multiline':False]['text':' Indicates if decoding states should be opened when encountering arrays','line_number':251,'multiline':False]['text':' Type for root object/reference object. May be Object or Array.','line_number':254,'multiline':False]['text':' Helpers to increment the iterator in regular and interleaved mode.','line_number':258,'multiline':False]['text':'*
     * Input iterator access.
     *
     * Iterator value is EOO when element is skipped.
     *
     * Iterators materialize compressed BSONElement as they iterate over the compressed binary.
     * Grows memory usage for this BSONColumn.
     *
     * It is NOT safe to call this or iterate from multiple threads concurrently.
     *
     * Throws if invalid encoding is encountered.
     ','line_number':265,'multiline':True]['text':'*
     * Element lookup by index
     *
     * Returns EOO if index represent skipped element.
     * Returns boost::none if index is out of bounds.
     *
     * O(N) time complexity
     *
     * Materializes BSONElement as needed and grows memory usage for this BSONColumn.
     *
     * It is NOT safe to call this from multiple threads concurrently.
     *
     * Throws if invalid encoding is encountered.
     ','line_number':280,'multiline':True]['text':'*
     * Number of elements stored in this BSONColumn
     *
     * O(N) time complexity
     *
     * Materializes BSONElements internally and grows memory usage for this BSONColumn.

     * It is NOT safe to call this from multiple threads concurrently.
     *
     * Throws if invalid encoding is encountered.
     ','line_number':296,'multiline':True]['text':' Scans the compressed BSON Column format to efficiently determine if the','line_number':309,'multiline':False]['text':' column contains an element of type `elementType`.','line_number':310,'multiline':False]['text':' Because it is marked const, it always iterates over the entire column.','line_number':311,'multiline':False]['text':'','line_number':312,'multiline':False]['text':' TODO SERVER-74926: add interleaved support','line_number':313,'multiline':False]['text':'*
     * Releases memory that has been used to materialize BSONElements for this BSONColumn.
     *
     * The returned reference counted pointer holds are reference to the previously materialized
     * BSONElements and can be used to extend their lifetime over the BSONColumn.
     *
     * It is NOT safe to call this from multiple threads concurrently.
     ','line_number':316,'multiline':True]['text':'*
     * Validates the BSONColumn on construction, should be the last call in the constructor when all
     * members are initialized.
     ','line_number':327,'multiline':True]['text':' Reference counted allocator, used to allocate memory when materializing BSONElements.','line_number':338,'multiline':False]['text':' Avoid GCC/Clang compiler issues','line_number':342,'multiline':False]['text':' See','line_number':343,'multiline':False]['text':' https://stackoverflow.com/questions/53408962/try-to-understand-compiler-error-message-default-member-initializer-required-be','line_number':344,'multiline':False]['text':'*
 * BSONElement storage, owns materialised BSONElement returned by BSONColumn.
 * Allocates memory in blocks which double in size as they grow.
 ','line_number':348,'multiline':True]['text':'*
     * "Writable" BSONElement. Provides access to a writable pointer for writing the value of
     * the BSONElement. Users must write valid BSON data depending on the requested BSON type.
     ','line_number':355,'multiline':True]['text':'*
         * Returns a pointer for writing a BSONElement value.
         ','line_number':363,'multiline':True]['text':'*
         * Size for the pointer returned by value()
         ','line_number':368,'multiline':True]['text':'*
         * Constructs a BSONElement from the owned buffer.
         ','line_number':373,'multiline':True]['text':'*
     * RAII Helper to manage contiguous mode. Starts on construction and leaves on destruction.
     ','line_number':384,'multiline':True]['text':' Return pointer to contigous block and the block size','line_number':392,'multiline':False]['text':'*
     * Allocates provided number of bytes. Returns buffer that is safe to write up to that
     * amount. Any subsequent call to allocate() or deallocate() invalidates the returned
     * buffer.
     ','line_number':400,'multiline':True]['text':'*
     * Allocates a BSONElement of provided type and value size. Field name is set to empty
     * string.
     ','line_number':407,'multiline':True]['text':'*
     * Deallocates provided number of bytes. Moves back the pointer of used memory so it can be
     * re-used by the next allocate() call.
     ','line_number':413,'multiline':True]['text':'*
     * Starts contiguous mode. All allocations will be in a contiguous memory block. When
     * allocate() need to grow contents from previous memory block is copied.
     ','line_number':419,'multiline':True]['text':'*
     * Returns writable pointer to the beginning of contiguous memory block. Any call to
     * allocate() will invalidate this pointer.
     ','line_number':425,'multiline':True]['text':'*
     * Returns pointer to the end of current memory block. Any call to allocate() will
     * invalidate this pointer.
     ','line_number':433,'multiline':True]['text':' Starts contiguous mode','line_number':442,'multiline':False]['text':' Ends contiguous mode, returns size of block','line_number':445,'multiline':False]['text':' Full memory blocks that are kept alive.','line_number':448,'multiline':False]['text':' Current memory block','line_number':451,'multiline':False]['text':' Capacity of current memory block','line_number':454,'multiline':False]['text':' Position to first unused byte in current memory block','line_number':457,'multiline':False]['text':' Position to beginning of contiguous block if enabled.','line_number':460,'multiline':False]['text':'*
 * Work in progress, do not use.
 ','line_number':466,'multiline':True]['text':'*
 * Interface for a buffer to receive decoded elements from block-based
 * BSONColumn decompression.
 ','line_number':471,'multiline':True]['text':' Strings can arrive either in 128-bit encoded format, or as','line_number':490,'multiline':False]['text':' literals (BSONElement)','line_number':491,'multiline':False]['text':' Takes pre-allocated BSONElement','line_number':493,'multiline':False]['text':'*
 * Interface to accept elements decoded from BSONColumn and materialize them
 * as Elements of user-defined type.
 ','line_number':509,'multiline':True]['text':'*
 * Implements Appendable and utilizes a user-defined Materializer to receive output of
 * BSONColumn decoding and fill a container of user-defined elements.  Container can
 * be user-defined or any STL container can be used.
 ','line_number':550,'multiline':True]['text':'*
     * Decompress entire BSONColumn
     *
     ','line_number':633,'multiline':True]['text':'*
     * Wrapper that expects the caller to define a Materializer and
     * a Container to receive a collection of elements from block decoding
     ','line_number':641,'multiline':True]['text':'*
     * Return first non-missing element stored in this BSONColumn
     ','line_number':652,'multiline':True]['text':'*
     * Return last non-missing element stored in this BSONColumn
     ','line_number':657,'multiline':True]['text':'*
     * Return 'min' element in this BSONColumn.
     *
     * TODO: Do we need to specify ComparisonRulesSet here?
     ','line_number':662,'multiline':True]['text':'*
     * Return 'max' element in this BSONColumn.
     *
     * TODO: Do we need to specify ComparisonRulesSet here?
     ','line_number':669,'multiline':True]['text':'*
     * Return sum of all elements stored in this BSONColumn.
     *
     * The BSONColumn must only contain NumberInt, NumberLong, NumberDouble, NumberDecimal types,
     * throws otherwise.
     ','line_number':676,'multiline':True]['text':'*
     * Element lookup by index
     *
     * Returns EOO if index represent skipped element.
     * Returns boost::none if index is out of bounds.
     ','line_number':684,'multiline':True]['text':'*
     * Number of elements stored (including 'missing') in this BSONColumn
     ','line_number':692,'multiline':True]['text':'*
     * Returns true if 'type' is stored within the BSONColumn. Traverses any internal objects if
     * 'type' is a scalar.
     ','line_number':697,'multiline':True]['text':'*
 * Implements the "materializer" concept such that the output elements are BSONElements.
 ','line_number':706,'multiline':True]['text':'*
     * Helper function used by both BSONCode and String.
     ','line_number':736,'multiline':True]['text':' namespace bsoncolumn','line_number':744,'multiline':False]['text':' namespace mongo','line_number':745,'multiline':False]