['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Calculates number of bits needed to store value. Must be less than','line_number':56,'multiline':False]['text':' numeric_limits<uint64_t>::max().','line_number':57,'multiline':False]['text':' All 1s is reserved for skip encoding so we add 1 to value to account for that case.','line_number':59,'multiline':False]['text':' countTrailingZeros64 returns 64 if the value is 0 but we consider this to be 0 trailing','line_number':64,'multiline':False]['text':' zeros.','line_number':65,'multiline':False]['text':' If value == 0 then we cannot add 64','line_number':73,'multiline':False]['text':' Calculates number of bits needed to store value. Must be less than','line_number':81,'multiline':False]['text':' numeric_limits<uint128_t>::max().','line_number':82,'multiline':False]['text':' We can't call _countBitsWithoutLeadingZeros() with numeric_limits<uint64_t>::max as it','line_number':87,'multiline':False]['text':' would overflow and yield the wrong result. Just return the correct value instead.','line_number':88,'multiline':False]['text':'
 * This method takes a number of intsNeeded and an extensionType and returns the selector index for
 * that type. This method should never fail as it is called when we are encoding a largest value.
 ','line_number':97,'multiline':True]['text':' namespace','line_number':109,'multiline':False]['text':' This is called in _encode while iterating through _pendingValues. For the base selector, we just','line_number':112,'multiline':False]['text':' return val. Contains unsed vars in order to seamlessly integrate with seven and eight selector','line_number':113,'multiline':False]['text':' extensions.','line_number':114,'multiline':False]['text':' This is called in _encode while iterating through _pendingValues. It creates part of a simple8b','line_number':122,'multiline':False]['text':' word according to the specifications of the sevenSelector extension. This value is then appended','line_number':123,'multiline':False]['text':' to the full simple8b word in _encode.','line_number':124,'multiline':False]['text':' We do two shifts here to account for the case where trailingZeros is > kTrailingZero bit','line_number':130,'multiline':False]['text':' size. If we subtracted this could lead to shift by a negative value which is undefined.','line_number':131,'multiline':False]['text':' This is a helper functor that is extended by the EightSelectorSmall and EightSelectorLarge encode','line_number':138,'multiline':False]['text':' functors. It provides the logic for encoding with the eight selector where the extension type is','line_number':139,'multiline':False]['text':' designated by the inheritance in the EightSelectorSmall and EightSelectorLarge functors.','line_number':140,'multiline':False]['text':' integer division. We have a nibble shift of size 4','line_number':145,'multiline':False]['text':' Shift to remove trailing zeros * 4 and then shift over for the 4 bits to hold','line_number':148,'multiline':False]['text':' the trailingZerosCount','line_number':149,'multiline':False]['text':' This is called in _encode while iterating through _pendingValues. It creates part of a simple8b','line_number':156,'multiline':False]['text':' word according to the specifications of the eightSelectorSmall extension. This value is then','line_number':157,'multiline':False]['text':' appended to the full simple8b word in _encode.','line_number':158,'multiline':False]['text':' This is called in _encode while iterating through _pendingValues. It creates part of a simple8b','line_number':163,'multiline':False]['text':' word according to the specifications of the eightSelectorLarge extension. This value is then','line_number':164,'multiline':False]['text':' appended to the full simple8b word in _encode.','line_number':165,'multiline':False]['text':' Base Constructor for PendingValue','line_number':170,'multiline':False]['text':' tryRle ','line_number':274,'multiline':True]['text':' Flush repeating integers that have been kept for RLE.','line_number':279,'multiline':False]['text':' Flush buffered values in _pendingValues.','line_number':281,'multiline':False]['text':' always flush with the most recent valid selector. This value is the baseSelector if we','line_number':283,'multiline':False]['text':' have not have a valid selector yet.','line_number':284,'multiline':False]['text':' There are no more words in _pendingValues and RLE is possible.','line_number':290,'multiline':False]['text':' However the _rleCount is 0 because we have not read any of the values in the next word.','line_number':291,'multiline':False]['text':' Always reset _lastValueInPrevWord. We may only start RLE after flush on 0 value.','line_number':295,'multiline':False]['text':' Early exit if we try to store max value. They are not handled when counting zeros.','line_number':301,'multiline':False]['text':' Initially set every selector as invalid.','line_number':306,'multiline':False]['text':' We use integer division to ensure that a multiple of 4 is stored in','line_number':312,'multiline':False]['text':' trailingZerosStoredInCount when we have the nibble shift.','line_number':313,'multiline':False]['text':' We use integer division to ensure that a multiple of 4 is stored in','line_number':320,'multiline':False]['text':' trailingZerosStoredInCount when we have the nibble shift.','line_number':321,'multiline':False]['text':' Edge cases where we have the number of trailing zeros bits as all ones and we need to add a','line_number':329,'multiline':False]['text':' padded zero to the meaningful bits to avoid confilicts with skip storage. Otherwise, we can','line_number':330,'multiline':False]['text':' reuse the bitCountWithoutLeadingZeros already calculated above.','line_number':331,'multiline':False]['text':' This case is specifically for 128 bit types where we have 124 zeros or max zeros','line_number':340,'multiline':False]['text':' count. We do not need to even check this for 64 bit types','line_number':341,'multiline':False]['text':' Check if the amount of bits needed is more than we can store using all selector combinations.','line_number':354,'multiline':False]['text':' Check if we have a valid selector for the current word. This method update the global','line_number':371,'multiline':False]['text':' isSelectorValid to avoid redundant computation.','line_number':372,'multiline':False]['text':' If the integer fits in the current word, add it.','line_number':374,'multiline':False]['text':' If the integer does not fit in the current word, convert the integers into simple8b','line_number':378,'multiline':False]['text':' word(s) with no unused buckets until the new value can be added to _pendingValues. Then','line_number':379,'multiline':False]['text':' add the Simple8b word(s) to the buffer. Finally add the new integer and update any global','line_number':380,'multiline':False]['text':' variables. We add based on the lastSelector that was valid where priority ordering is the','line_number':381,'multiline':False]['text':' following: base, seven, eightSmall, eightLarge. Store pending last value for RLE.','line_number':382,'multiline':False]['text':' There are no more words in _pendingValues and the last element of the last Simple8b','line_number':390,'multiline':False]['text':' word is the same as the new value. Therefore, start RLE.','line_number':391,'multiline':False]['text':' There is never a case where we need to write more than one Simple8b wrod','line_number':407,'multiline':False]['text':' because we only need 1 bit for skip','line_number':408,'multiline':False]['text':' Form simple8b word if skip can not fit with last selector','line_number':410,'multiline':False]['text':' It is possible to start rle','line_number':417,'multiline':False]['text':' Push true into skip and the dummy value, 0, into currNum. We use the dummy value, 0 because','line_number':423,'multiline':False]['text':' it takes 1 bit and it will not affect our global curr bit length calculations.','line_number':424,'multiline':False]['text':' Try to create a RLE Simple8b word.','line_number':433,'multiline':False]['text':' Add any values that could not be encoded in RLE.','line_number':435,'multiline':False]['text':' tryRle ','line_number':438,'multiline':True]['text':' This encodes a value using rle. The selector is set as 15 and the count is added in the next','line_number':448,'multiline':False]['text':' 4 bits. The value is the previous value stored by simple8b or 0 if no previous value was','line_number':449,'multiline':False]['text':' stored.','line_number':450,'multiline':False]['text':' We will store (count - 1) during encoding and execute (count + 1) during decoding.','line_number':453,'multiline':False]['text':' Check to make sure count is big enough for RLE encoding','line_number':459,'multiline':False]['text':' If one RLE word is insufficient use multiple RLE words.','line_number':462,'multiline':False]['text':' Stop loop early if we find a valid selector.','line_number':485,'multiline':False]['text':' If the numBitswithValue is greater than max bits or we cannot fit the trailingZeros we update','line_number':499,'multiline':False]['text':' this selector as false and return false. Special case for baseSelector where we never add','line_number':500,'multiline':False]['text':' trailingZeros so we always pass the zeros comparison.','line_number':501,'multiline':False]['text':' Update so we remember the last validExtensionType when its time to encode a word','line_number':506,'multiline':False]['text':' Since this is always called right after _doesIntegerFitInCurrentWord fails for the first','line_number':513,'multiline':False]['text':' time, we know all values in _pendingValues fits in the slots for the selector that can store','line_number':514,'multiline':False]['text':' this many values. Find the smallest selector that doesn't leave any unused slots.','line_number':515,'multiline':False]['text':' Reset which selectors are possible to use for next word','line_number':538,'multiline':False]['text':' namespace mongo','line_number':606,'multiline':False]