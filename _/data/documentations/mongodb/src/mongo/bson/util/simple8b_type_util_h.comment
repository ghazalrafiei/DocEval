['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * TypeCompressor: This class allows storing a wide variety of types using a series of compression
 * methods. Each supported type has an overloaded encode and decode method and a short comment
 * explaining the type of current compression used
 ','line_number':45,'multiline':True]['text':' These methods are for encoding a signed integer with simple8b. They move the signed bit from','line_number':52,'multiline':False]['text':' the most significant bit position to the least significant bit to provide the ability to','line_number':53,'multiline':False]['text':' store as an unsigned integer','line_number':54,'multiline':False]['text':' the most significant bit position to the least significant bit and call simple8b as an','line_number':55,'multiline':False]['text':' unsigned integer.','line_number':56,'multiline':False]['text':' The Abseil right shift implementation on signed int128 is not correct as an arithmetic','line_number':64,'multiline':False]['text':' shift in their non-intrinsic implementation. When we detect this case we replace the','line_number':65,'multiline':False]['text':' right arithmetic shift of 127 positions that needs to produce 0xFF..FF or 0x00..00','line_number':66,'multiline':False]['text':' depending on the sign bit. We take the high 64 bits and performing a right arithmetic','line_number':67,'multiline':False]['text':' shift 63 positions which produces 0xFF..FF if the sign bit is set and 0x00..00 otherwise.','line_number':68,'multiline':False]['text':' We can then use this value in both the high and low components of int128 to produce the','line_number':69,'multiline':False]['text':' value that we need.','line_number':70,'multiline':False]['text':' get signed bit','line_number':74,'multiline':False]['text':' These methods are for encoding OID with simple8b. The unique identifier is not part of','line_number':87,'multiline':False]['text':' the encoded integer and must thus be provided when decoding.','line_number':88,'multiline':False]['text':' Re-organize the bytes so that most of the entropy is in the least significant bytes.','line_number':89,'multiline':False]['text':' Since TS = Timestamp is in big endian and C = Counter is in big endian,','line_number':90,'multiline':False]['text':' then rearrange the bytes to:','line_number':91,'multiline':False]['text':' | Byte Usage | C2 | TS3 | C1 | TS2 | C0 | TS1 | TS0 |','line_number':92,'multiline':False]['text':' | Byte Index |  0 |  1  |  2 |  3  |  4 |  5  |  6  |','line_number':93,'multiline':False]['text':' The buffer passed to decodeObjectIdInto() must have at least OID::kOIDSize size.','line_number':94,'multiline':False]['text':' These methods add floating point support for encoding and decoding with simple8b up to 8','line_number':99,'multiline':False]['text':' decimal digits. They work by multiplying the floating point value by a multiple of 10 and','line_number':100,'multiline':False]['text':' rounding to the nearest integer. They return a option that will not be valid in the case of a','line_number':101,'multiline':False]['text':' value being greater than 8 decimal digits. Additionally, they will return a boost::none in','line_number':102,'multiline':False]['text':' the cae that compression is not feasible.','line_number':103,'multiline':False]['text':' These methods allow encoding decimal 128 with simple8b.','line_number':108,'multiline':False]['text':' These methods allow encoding binary with simple8b. We do not make any','line_number':112,'multiline':False]['text':' assumptions about the data other than the fact that the data is valid up to the size','line_number':113,'multiline':False]['text':' provided. Encoding is only possible for sizes less than or equal to 16 bytes. boost::none is','line_number':114,'multiline':False]['text':' returned if encoding is not possible.','line_number':115,'multiline':False]['text':' These methods allow encoding strings with simple8b. Encoding is only possible for strings','line_number':119,'multiline':False]['text':' less than or equal to 16 bytes and for strings starting with a non-null character.','line_number':120,'multiline':False]['text':' boost::none is returned if encoding is not possible.','line_number':121,'multiline':False]['text':' Array is a double as it will always be multiplied by a double and we don't want to do an','line_number':129,'multiline':False]['text':' extra cast for','line_number':130,'multiline':False]['text':' namespace mongo','line_number':145,'multiline':False]