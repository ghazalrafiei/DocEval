['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Callback type to implement writing of 64 bit Simple8b words.
 ','line_number':49,'multiline':True]['text':'*
 * Simple8bBuilder compresses a series of integers into chains of 64 bit Simple8b blocks.
 *
 * T may be uint64_t and uint128_t only.
 ','line_number':54,'multiline':True]['text':' Callback to handle writing of finalized Simple-8b blocks. Machine Endian byte order, the','line_number':65,'multiline':False]['text':' value need to be converted to Little Endian before persisting.','line_number':66,'multiline':False]['text':'*
     * Appends val to Simple8b. Returns true if the append was successful and false if the value was
     * outside the range of possible values we can store in Simple8b.
     *
     * A call to append may result in multiple Simple8b blocks being finalized.
     ','line_number':70,'multiline':True]['text':'*
     * Appends a missing value to Simple8b.
     *
     * May result in a single Simple8b being finalized.
     ','line_number':78,'multiline':True]['text':'*
     * Flushes all buffered values into finalized Simple8b blocks.
     *
     * It is allowed to continue to append values after this call.
     ','line_number':85,'multiline':True]['text':'*
     * Iterator for reading pending values in Simple8bBuilder that has not yet been written to
     * Simple-8b blocks.
     *
     * Provides bidirectional iteration
     ','line_number':92,'multiline':True]['text':' typedefs expected in iterators','line_number':101,'multiline':False]['text':'*
     * Forward iterators to read pending values
     ','line_number':133,'multiline':True]['text':'*
     * Reverse iterators to read pending values
     ','line_number':139,'multiline':True]['text':'*
     * Set write callback
     ','line_number':145,'multiline':True]['text':' Number of different type of selectors and their extensions available','line_number':151,'multiline':False]['text':'*
     * This stores a value that has yet to be added to the buffer. It also stores the number of bits
     * required to store the value for each selector extension type. Furthermore, it stores the
     * number of trailing zeros that would be stored if this value was stored according to the
     * respective selector type. The arrays are indexed using the same selector indexes as defined
     * in the cpp file.
     ','line_number':154,'multiline':True]['text':' This is not the total number of trailing zeros, but the trailing zeros that will be','line_number':178,'multiline':False]['text':' stored given the selector chosen.','line_number':179,'multiline':False]['text':' The min number of meaningful bits each selector can store','line_number':183,'multiline':False]['text':'*
     * Function objects to encode Simple8b blocks for the different extension types.
     *
     * See .cpp file for more information.
     ','line_number':185,'multiline':True]['text':'*
     * Appends a value to the Simple8b chain of words.
     * Return true if successfully appended and false otherwise.
     *
     * 'tryRle' indicates if we are allowed to put this skip in RLE count or not. Should only be set
     * to true when terminating RLE and we are flushing excess values.
     ','line_number':199,'multiline':True]['text':'*
     * Appends a skip to _pendingValues and forms a new Simple8b word if there is no space.
     *
     * 'tryRle' indicates if we are allowed to put this value in RLE count or not. Should only be
     * set to true when terminating RLE and we are flushing excess values.
     ','line_number':208,'multiline':True]['text':'*
     * When an RLE ends because of inconsecutive values, check if there are enough
     * consecutive values for a RLE value and/or any values to be appended to _pendingValues.
     ','line_number':216,'multiline':True]['text':'*
     * Based on _rleCount, create a RLE Simple8b word if possible.
     * If _rleCount is not large enough, do nothing.
     ','line_number':222,'multiline':True]['text':'
     * Checks to see if RLE is possible and/or ongoing
     ','line_number':228,'multiline':True]['text':'*
     * Tests if a value would fit inside the current simple8b word using any of the selectors
     * selector. Returns true if adding the value fits in the current simple8b word and false
     * otherwise.
     ','line_number':233,'multiline':True]['text':'
     * This is a helper method for testing if a given selector will allow an integer to fit in a
     * simple8b word. Takes in a value to be stored and an extensionType representing the selector
     * compression method to check. Returns true if the word fits and updates the global
     * _lastValidExtensionType with the extensionType passed. If false, updates
     * isSelectorPossible[extensionType] to false so we do not need to recheck that extension if we
     * find a valid type and more values are added into the current word.
     ','line_number':240,'multiline':True]['text':'*
     * Encodes the largest possible simple8b word from _pendingValues without unused buckets using
     * the selector compression method passed in extensionType. Assumes is always called right after
     * _doesIntegerFitInCurrentWord fails for the first time. It removes the integers used to form
     * the simple8b word from _pendingValues permanently and updates our global state with any
     * remaining integers in _pendingValues.
     ','line_number':251,'multiline':True]['text':'*
     * Takes a vector of integers to be compressed into a 64 bit word via the selector type given.
     * The values will be stored from right to left in little endian order.
     * For now, we will assume that all ints in the vector are greater or equal to zero.
     * We will also assume that the selector and all values will fit into the 64 bit word.
     * Returns the encoded Simple8b word if the inputs are valid and errCode otherwise.
     ','line_number':260,'multiline':True]['text':'*
     * Updates the simple8b current state with the passed parameters. The maximum is always taken
     * between the current state and the new value passed. This is used to keep track of the size of
     * the simple8b word that we will need to encode.
     ','line_number':270,'multiline':True]['text':' If RLE is ongoing, the number of consecutive repeats fo lastValueInPrevWord.','line_number':277,'multiline':False]['text':' If RLE is ongoing, the last value in the previous Simple8b word.','line_number':279,'multiline':False]['text':' These variables hold the max amount of bits for each value in _pendingValues. They are','line_number':282,'multiline':False]['text':' updated whenever values are added or removed from _pendingValues to always reflect the max','line_number':283,'multiline':False]['text':' value in the deque.','line_number':284,'multiline':False]['text':' This holds the last valid selector compression method that succeded for','line_number':288,'multiline':False]['text':' doesIntegerFitInCurrentWord and is used to designate the compression type when we need to','line_number':289,'multiline':False]['text':' write a simple8b word to buffer.','line_number':290,'multiline':False]['text':' Holds whether the selector compression method is possible. This is updated in','line_number':293,'multiline':False]['text':' doesIntegerFitInCurrentWordWithSelector to avoid unnecessary calls when a selector is already','line_number':294,'multiline':False]['text':' invalid for the current set of words in _pendingValues.','line_number':295,'multiline':False]['text':' This holds values that have not be encoded to the simple8b buffer, but are waiting for a full','line_number':298,'multiline':False]['text':' simple8b word to be filled before writing to buffer.','line_number':299,'multiline':False]['text':' User-defined callback to handle writing of finalized Simple-8b blocks','line_number':302,'multiline':False]['text':' namespace mongo','line_number':306,'multiline':False]