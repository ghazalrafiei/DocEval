['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':38,'multiline':False]['text':' BSON Type byte','line_number':337,'multiline':False]['text':' Null terminator for field name','line_number':340,'multiline':False]['text':' Element value','line_number':343,'multiline':False]['text':' Verify that we can traverse BSONColumn twice and extract values on the second pass','line_number':451,'multiline':False]['text':' Verify that we can traverse BSONColumn and extract values on the first pass','line_number':468,'multiline':False]['text':' Verify operator[] when accessing in order','line_number':480,'multiline':False]['text':' Verify operator[] when accessing in reverse order','line_number':489,'multiline':False]['text':' Verify that we can continue traverse with new iterators when we stop before end','line_number':498,'multiline':False]['text':' Verify that we can have multiple iterators on the same thread','line_number':511,'multiline':False]['text':' Verify iterator equality operator','line_number':526,'multiline':False]['text':'*
     * Constructs a BSON Column encoding with a non-zero delta after the specified element, and
     * expects error 6785500 to be thrown.
     ','line_number':544,'multiline':True]['text':' Column should have several scalar values of same type','line_number':581,'multiline':False]['text':' -> 32-bit Ints','line_number':582,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':590,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':591,'multiline':False]['text':' Control = 1, CountOfSimple8b's = 0+1','line_number':594,'multiline':False]['text':' Column should have several scalar values of same type','line_number':617,'multiline':False]['text':' -> 64-bit Ints','line_number':618,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':626,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':627,'multiline':False]['text':' Control = 1, CountOfSimple8b's = 0+1','line_number':630,'multiline':False]['text':' Column should have several scalar values of same type','line_number':653,'multiline':False]['text':' -> Double','line_number':654,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':662,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':663,'multiline':False]['text':' Control = 1001 (double only, scale=0), CountOfSimple8b's = 0+1','line_number':667,'multiline':False]['text':' Column should have several scalar values of same type','line_number':690,'multiline':False]['text':' -> Timestamp','line_number':691,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':699,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':700,'multiline':False]['text':' Column should have several scalar values of same type','line_number':727,'multiline':False]['text':' -> String','line_number':728,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':735,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':736,'multiline':False]['text':' Control = 1, CountOfSimple8b's = 0+1','line_number':739,'multiline':False]['text':' Column should have several scalar values of same type','line_number':760,'multiline':False]['text':' -> ObjectID','line_number':761,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':769,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':770,'multiline':False]['text':' Control = 1, CountOfSimple8b's = 0+1','line_number':773,'multiline':False]['text':' Don't encode first value.','line_number':776,'multiline':False]['text':' For second value, set prevprev to prev.','line_number':777,'multiline':False]['text':' => (val, prev, prev)','line_number':778,'multiline':False]['text':' steady state => (val, prev, prevprev)','line_number':780,'multiline':False]['text':' Column should have several scalar values of same type','line_number':802,'multiline':False]['text':' -> Bool','line_number':803,'multiline':False]['text':' Recreate cb "manually" to create the BSONColumn class, so as to','line_number':811,'multiline':False]['text':' test BSONColumn::contains_forTest','line_number':812,'multiline':False]['text':' Control = 1, CountOfSimple8b's = 0+1','line_number':815,'multiline':False]['text':' The values below should result in two Simple8b blocks, one scaled with 10.0 and the second','line_number':1244,'multiline':False]['text':' scaled to 1.0. This tests that we can scale down doubles after writing a Simple8b block and','line_number':1245,'multiline':False]['text':' that we are in a good state to continue to append values.','line_number':1246,'multiline':False]['text':'','line_number':1247,'multiline':False]['text':' When the value '105.0' is appended the first Simple8b block with scale factor 10.0 will be','line_number':1248,'multiline':False]['text':' written and it will be determined that we can scale down to scale factor 1.0 for the next','line_number':1249,'multiline':False]['text':' block as '119.0' (last value previous Simple8b block) and '105.0' can both be encoded using','line_number':1250,'multiline':False]['text':' scale factor '1.0'. We then test that we can continue to append a value ('120.0') using this','line_number':1251,'multiline':False]['text':' lower scale factor.','line_number':1252,'multiline':False]['text':' This tests that we properly set '_lastValueInPrevBlock' after writing out a full Simple8b','line_number':1395,'multiline':False]['text':' block. In this test the last value in the first block will be '99.0' but the block will not','line_number':1396,'multiline':False]['text':' be written until '89.0' is appended. That means that 'previous' will be '123.0' which is not','line_number':1397,'multiline':False]['text':' the last value in previous block.','line_number':1398,'multiline':False]['text':' std::numeric_limits<int64_t>::min() - 0x1000 will cause an overflow if performed as signed,','line_number':1529,'multiline':False]['text':' make sure it is handled correctly','line_number':1530,'multiline':False]['text':' 0.0 compares equal to -0.0 when compared as double. Make sure we can handle this case without','line_number':1553,'multiline':False]['text':' data loss.','line_number':1554,'multiline':False]['text':' These numbers are encoded as a large integer that does not fit in Simple8b so the result is','line_number':1560,'multiline':False]['text':' two uncompressed literals.','line_number':1561,'multiline':False]['text':' Increment the lower byte for timestamp and counter.','line_number':1717,'multiline':False]['text':' Increment the lower byte for counter.','line_number':1719,'multiline':False]['text':' Increment the lower byte for timestamp and counter.','line_number':1765,'multiline':False]['text':' Test confirms that _prevTimestampDelta gets reset to 0.','line_number':1850,'multiline':False]['text':' Semi-large number so that the delta-of-delta will fit into a Simple8b word.','line_number':1901,'multiline':False]['text':' Need to make sure we have a significant overlap in delta so we can have a trailingZeroCount','line_number':2532,'multiline':False]['text':' thats viable.','line_number':2533,'multiline':False]['text':' Confirm that empty string is encoded as 0 which this test relies on.','line_number':2578,'multiline':False]['text':' The empty string must be stored as full literal to avoid ambiguity with repeat of previous.','line_number':2584,'multiline':False]['text':' Add decimals first','line_number':2616,'multiline':False]['text':' Add strings','line_number':2626,'multiline':False]['text':' Need to make sure we have a significant overlap in delta so we can have a trailingZeroCount','line_number':2629,'multiline':False]['text':' thats viable.','line_number':2630,'multiline':False]['text':' BSONColumnBuilder does not produce this kind of binary where Objects are stored uncompressed.','line_number':2710,'multiline':False]['text':' However they are valid according to the specification so verify that we can decompress.','line_number':2711,'multiline':False]['text':' BSONColumnBuilder does not produce this kind of binary where Objects are stored uncompressed.','line_number':2730,'multiline':False]['text':' However they are valid according to the specification so verify that we can decompress.','line_number':2731,'multiline':False]['text':' Verify that we can decompress the following elements when sub-objects are encoded as','line_number':3277,'multiline':False]['text':' scalars in a single interleaved stream','line_number':3278,'multiline':False]['text':' Test that we can successfully build reference object when there are unrelated fields with','line_number':5333,'multiline':False]['text':' object and scalar mismatch.','line_number':5334,'multiline':False]['text':' Test that we can successfully build reference object when there are unrelated fields with','line_number':5362,'multiline':False]['text':' object and scalar mismatch.','line_number':5363,'multiline':False]['text':' Append elements so we are in kSubObjDeterminingReference state when element with 'b'','line_number':5806,'multiline':False]['text':' field is appended. Make sure this does not re-start subobj compression as it only contain','line_number':5807,'multiline':False]['text':' empty subobj.','line_number':5808,'multiline':False]['text':' Append elements so we are in kSubObjDeterminingReference state when element with 'b'','line_number':5833,'multiline':False]['text':' field is appended. Make sure this does not re-start subobj compression as it only contain','line_number':5834,'multiline':False]['text':' empty subobj.','line_number':5835,'multiline':False]['text':' Append enough elements so we are in kSubObjAppending state when element with 'b' field is','line_number':5857,'multiline':False]['text':' appended. Make sure this does not re-start subobj compression as it only contain empty','line_number':5858,'multiline':False]['text':' subobj.','line_number':5859,'multiline':False]['text':' Append enough elements so we are in kSubObjAppending state when element with 'b' field is','line_number':5896,'multiline':False]['text':' appended. Make sure this does not re-start subobj compression as it only contain empty','line_number':5897,'multiline':False]['text':' subobj.','line_number':5898,'multiline':False]['text':' This test makes sure we're not leaking the skip from the 'yyyyyy' field into the next','line_number':5930,'multiline':False]['text':' measurement. 'yyyyyy' will be written into the buffer for the second item before we realize','line_number':5931,'multiline':False]['text':' that it only contain skips. We must not attempt to interpret this memory when the next','line_number':5932,'multiline':False]['text':' measurement is all skips.','line_number':5933,'multiline':False]['text':' Start with values that give large deltas so we write out 16 simple8b blocks and end with a','line_number':5966,'multiline':False]['text':' non zero value that is equal to the deltas that will follow','line_number':5967,'multiline':False]['text':' Add 120 additional elements that all get a delta of 1, because the last block ended with the','line_number':5980,'multiline':False]['text':' / same value they can be encoded with RLE.','line_number':5981,'multiline':False]['text':' We should now have 16 regular Simple8b blocks and then a 17th using RLE at the end.','line_number':6010,'multiline':False]['text':' A Simple8b block with an invalid selector doesn't throw an error, but make sure we can handle','line_number':6122,'multiline':False]['text':' it gracefully. Check so we don't read out of bounds and can iterate.','line_number':6123,'multiline':False]['text':' Starting the stream with a delta block doesn't throw an error. Make sure we handle it','line_number':6140,'multiline':False]['text':' gracefully even if the values we extracted may not be meaningful. Check so we don't read out','line_number':6141,'multiline':False]['text':' of bounds and can iterate.','line_number':6142,'multiline':False]['text':' This test sets up an interleaved reference object with two fields but only provides one','line_number':6159,'multiline':False]['text':' interleaved substream.','line_number':6160,'multiline':False]['text':' This tests that we handle the interleaved start byte when already in interleaved mode.','line_number':6190,'multiline':False]['text':' This test uses a non-zero delta value after an interleaved object, which is invalid.','line_number':6222,'multiline':False]['text':' Make sure we throw InvalidBSONType even if we would detect that "a" needs to be merged before','line_number':6345,'multiline':False]['text':' observing the MinKey.','line_number':6346,'multiline':False]['text':' Verify that the intermediate function works as expected','line_number':6388,'multiline':False]['text':' Various elements','line_number':6392,'multiline':False]['text':' Anchor is always less than the final buffer because of the EOO at the end','line_number':6427,'multiline':False]['text':' Anchor should increase or stay the same when appending','line_number':6429,'multiline':False]['text':' Verify that the binaries are exactly the same even if intermediate is called','line_number':6435,'multiline':False]['text':' Validate that no data changed before the returned anchor','line_number':6441,'multiline':False]['text':' The large literal emits this on Visual Studio: Fatal error C1091: compiler limit: string exceeds','line_number':6448,'multiline':False]['text':' 65535 bytes in length','line_number':6449,'multiline':False]['text':' IWYU pragma: keep','line_number':6453,'multiline':False]['text':' Test that we can decompress and re-compress without any data loss.','line_number':6473,'multiline':False]['text':' Dummy allocator is not used','line_number':6480,'multiline':False]['text':' Normally a materializer either has its own Allocator definition, or templates on an external','line_number':6481,'multiline':False]['text':' allocator and simply declares','line_number':6482,'multiline':False]['text':'','line_number':6483,'multiline':False]['text':' using Allocator = typename TemplateAllocator;','line_number':6484,'multiline':False]['text':' Some compilers require that specializations be defined outside of class','line_number':6508,'multiline':False]['text':' namespace','line_number':6639,'multiline':False]['text':' namespace mongo','line_number':6640,'multiline':False]