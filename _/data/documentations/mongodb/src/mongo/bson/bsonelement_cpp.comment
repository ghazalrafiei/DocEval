['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':35,'multiline':False]['text':' return to not check the write limit below, we're not in a leaf','line_number':169,'multiline':False]['text':' return to not check the write limit below, we're not in a leaf','line_number':180,'multiline':False]['text':' valuestrsize() returns the size including the null terminator','line_number':184,'multiline':False]['text':' fall through if scope is empty','line_number':211,'multiline':False]['text':' If a write limit is enabled and we went over it, record truncation info and roll back buffer.','line_number':229,'multiline':False]['text':' Compares two string elements using a simple binary compare.','line_number':273,'multiline':False]['text':' we use memcmp as we allow zeros in UTF8 strings','line_number':275,'multiline':False]['text':' longer std::string is the greater one','line_number':282,'multiline':False]['text':' namespace','line_number':286,'multiline':False]['text':' EOO and Undefined are same canonicalType','line_number':294,'multiline':False]['text':' unsigned compare for timestamps - note they are not really dates but (ordinal +','line_number':306,'multiline':False]['text':' time_t)','line_number':307,'multiline':False]['text':' Signed comparisons for Dates.','line_number':312,'multiline':False]['text':' All types can precisely represent all NumberInts, so it is safe to simply convert to','line_number':322,'multiline':False]['text':' whatever rhs's type is.','line_number':323,'multiline':False]['text':' our bin data size in bytes, not including the subtype byte','line_number':411,'multiline':False]['text':'+1 for subtype byte','line_number':415,'multiline':True]['text':' When comparing the scope object, we should consider field names. Special string','line_number':429,'multiline':False]['text':' comparison semantics do not apply to strings nested inside the CodeWScope scope','line_number':430,'multiline':False]['text':' object, so we do not pass through the string comparator.','line_number':431,'multiline':False]['text':' The binaryEqual method above implicitly compares the type, but we need to do so explicitly','line_number':487,'multiline':False]['text':' here. It doesn't make sense to consider to BSONElement objects as binaryEqual if they have','line_number':488,'multiline':False]['text':' the same bit pattern but different types (consider an integer and a double).','line_number':489,'multiline':False]['text':' NaN doubles are rejected.','line_number':526,'multiline':False]['text':' No integral doubles that are too large to be represented as a 64 bit signed integer.','line_number':533,'multiline':False]['text':' We use 'kLongLongMaxAsDouble' because if we just did eDouble > 2^63-1, it would be','line_number':534,'multiline':False]['text':' compared against 2^63. eDouble=2^63 would not get caught that way.','line_number':535,'multiline':False]['text':' This checks if elem is an integral double.','line_number':543,'multiline':False]['text':' never reachable','line_number':601,'multiline':False]['text':' wrap this element up as a singleton object.','line_number':615,'multiline':False]['text':' We intentionally read memory that may be out of the allocated memory's boundary, so do not','line_number':643,'multiline':False]['text':' do this when the address sanitizer is enabled. We do this in an attempt to log as much','line_number':644,'multiline':False]['text':' context about the failure, even if that risks undefined behavior or a segmentation fault.','line_number':645,'multiline':False]['text':' To reduce the risk of a segmentation fault, only print the bytes in the 32-bit aligned','line_number':656,'multiline':False]['text':' block in which the address is located (i.e. round down to the lowest multiple of 32). The','line_number':657,'multiline':False]['text':' hope is that it's safe to read memory that may fall within the same cache line. Generate','line_number':658,'multiline':False]['text':' a mask to zero-out the last bits for a block-aligned address.','line_number':659,'multiline':False]['text':' Ex: Inverse of 0x1F (32 - 1) looks like 0xFFFFFFE0, and ANDed with the pointer, zeroes','line_number':660,'multiline':False]['text':' the lowest 5 bits, giving the starting address of a 32-bit block.','line_number':661,'multiline':False]['text':' namespace','line_number':677,'multiline':False]['text':' Total size is a fixed amount + key length.','line_number':681,'multiline':False]['text':' Like Fixed, but also add in the int32 immediately following the key.','line_number':682,'multiline':False]['text':' Handled specially: RegEx, MinKey, MaxKey.','line_number':683,'multiline':False]['text':' Includes type byte. Excludes field name and variable lengths.','line_number':687,'multiline':False]['text':' This table should take 32 bytes. Align to that size to avoid splitting across cache lines','line_number':691,'multiline':False]['text':' unnecessarily.','line_number':692,'multiline':False]['text':' EOO','line_number':694,'multiline':False]['text':' NumberDouble','line_number':695,'multiline':False]['text':' String','line_number':696,'multiline':False]['text':' Object','line_number':697,'multiline':False]['text':' Array','line_number':698,'multiline':False]['text':' BinData','line_number':699,'multiline':False]['text':' Undefined','line_number':700,'multiline':False]['text':' OID','line_number':701,'multiline':False]['text':' Bool','line_number':702,'multiline':False]['text':' Date','line_number':703,'multiline':False]['text':' Null','line_number':704,'multiline':False]['text':' Regex','line_number':705,'multiline':False]['text':' DBRef','line_number':706,'multiline':False]['text':' Code','line_number':707,'multiline':False]['text':' Symbol','line_number':708,'multiline':False]['text':' CodeWScope','line_number':709,'multiline':False]['text':' Int','line_number':710,'multiline':False]['text':' Timestamp','line_number':711,'multiline':False]['text':' Long','line_number':712,'multiline':False]['text':' Decimal','line_number':713,'multiline':False]['text':' reserved 20','line_number':714,'multiline':False]['text':' reserved 21','line_number':715,'multiline':False]['text':' reserved 22','line_number':716,'multiline':False]['text':' reserved 23','line_number':717,'multiline':False]['text':' reserved 24','line_number':718,'multiline':False]['text':' reserved 25','line_number':719,'multiline':False]['text':' reserved 26','line_number':720,'multiline':False]['text':' reserved 27','line_number':721,'multiline':False]['text':' reserved 28','line_number':722,'multiline':False]['text':' reserved 29','line_number':723,'multiline':False]['text':' reserved 30','line_number':724,'multiline':False]['text':' MinKey,  MaxKey','line_number':725,'multiline':False]['text':' This function attempts to push complex handling of unlikely events out-of-line to ensure that','line_number':729,'multiline':False]['text':' the common cases never need to spill any registers, which reduces the function call overhead.','line_number':730,'multiline':False]['text':' Most invalid types have type != sizeInfoIndex and fall through to the cold path, as do RegEx,','line_number':731,'multiline':False]['text':' MinKey, MaxKey and the remaining invalid types mapping to SizeStyle::kSpecial.','line_number':732,'multiline':False]['text':' The following code handles all special cases: MinKey, MaxKey, RegEx and invalid types.','line_number':743,'multiline':False]['text':' RegEx is two c-strings back-to-back.','line_number':749,'multiline':False]['text':' check if we want the full/complete string','line_number':779,'multiline':False]['text':' If the BinData is a correctly sized newUUID, display it as such.','line_number':880,'multiline':False]['text':' 4 Octets - 2 Octets - 2 Octets - 2 Octets - 6 Octets','line_number':884,'multiline':False]['text':' Convert from Milliseconds to Seconds for consistent Timestamp printing.','line_number':901,'multiline':False]['text':'*
 * Types used to represent BSONElement memory in the Visual Studio debugger
 ','line_number':994,'multiline':True]['text':' defined(_MSC_VER) && defined(_DEBUG)','line_number':1013,'multiline':False]['text':' namespace mongo','line_number':1015,'multiline':False]