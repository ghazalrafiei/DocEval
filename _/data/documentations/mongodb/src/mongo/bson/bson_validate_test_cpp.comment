['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' like a BSONObj string, but without a NUL terminator.','line_number':78,'multiline':False]['text':'withNUL','line_number':80,'multiline':True]['text':'withNUL','line_number':82,'multiline':True]['text':' Copy the 'original' BSONObj to 'buffer'.','line_number':204,'multiline':False]['text':' Randomly flip bits in 'buffer', with probability determined by 'fuzzFrequency'. The','line_number':208,'multiline':False]['text':' first four bytes, representing the size of the object, are excluded from bit','line_number':209,'multiline':False]['text':' flipping.','line_number':210,'multiline':False]['text':' There is no assert here because there is no other BSON validator oracle','line_number':220,'multiline':False]['text':' to compare outputs against (BSONObj::valid() is a wrapper for validateBSON()).','line_number':221,'multiline':False]['text':' Thus, the reason for this test is to ensure that validateBSON() doesn't trip','line_number':222,'multiline':False]['text':' any ASAN or UBSAN check when fed fuzzed input.','line_number':223,'multiline':False]['text':' 16 byte string.','line_number':229,'multiline':False]['text':' 15 byte string.','line_number':235,'multiline':False]['text':' Invalid UTF-8 - 10000000; leading bit cannot be set for single byte UTF-8.','line_number':371,'multiline':False]['text':' Invalid UTF-8 - 11011111 11001111; second bit of second byte cannot be set.','line_number':384,'multiline':False]['text':' Invalid UTF-8 - 11101111 10111111 11111111 - second bit of third byte cannot be set.','line_number':397,'multiline':False]['text':' Invalid UTF-8 - 11110000 10011000 10011010 11111111 - second bit of fourth byte cannot be','line_number':410,'multiline':False]['text':' set.','line_number':411,'multiline':False]['text':' 64-bit binary floating point','line_number':478,'multiline':False]['text':' UTF-8 string','line_number':480,'multiline':False]['text':' Embedded document','line_number':481,'multiline':False]['text':' Array','line_number':482,'multiline':False]['text':' Binary data','line_number':483,'multiline':False]['text':' Undefined (value) -- Deprecated','line_number':484,'multiline':False]['text':' ObjectId','line_number':485,'multiline':False]['text':' Boolean','line_number':486,'multiline':False]['text':' UTC datetime','line_number':487,'multiline':False]['text':' Null value','line_number':488,'multiline':False]['text':' Regular Expression','line_number':489,'multiline':False]['text':' DBPointer -- Deprecated','line_number':491,'multiline':False]['text':' JavaScript code','line_number':492,'multiline':False]['text':' Symbol. Deprecated','line_number':493,'multiline':False]['text':' JavaScript code w/ scope','line_number':495,'multiline':False]['text':' 32-bit integer','line_number':496,'multiline':False]['text':' Timestamp','line_number':497,'multiline':False]['text':' 64-bit integer','line_number':498,'multiline':False]['text':' 128-bit decimal floating point','line_number':499,'multiline':False]['text':'withNUL','line_number':589,'multiline':True]['text':' overhead','line_number':592,'multiline':False]['text':' type','line_number':593,'multiline':False]['text':' name','line_number':594,'multiline':False]['text':' size','line_number':595,'multiline':False]['text':' Legal, because we know that the BufBuilder gave','line_number':607,'multiline':False]['text':' us back some heap memory, which isn't originally const.','line_number':608,'multiline':False]['text':' The next few lines may look non-optimal and strange, however the assignment of a','line_number':610,'multiline':False]['text':' signed char to int is not safe, generally speaking. Recall that the numeric_limits','line_number':611,'multiline':False]['text':' library returns the limit as the type requested and that the signedness of char is','line_number':612,'multiline':False]['text':' platform-dependent. We know in this case that all values of a byte need to be','line_number':613,'multiline':False]['text':' tested, so we can hardcode the limits ourselves to sidestep casting issues and','line_number':614,'multiline':False]['text':' warnings from clang-tidy.','line_number':615,'multiline':False]['text':'','line_number':616,'multiline':False]['text':' Loop iteration will be the following for platforms with:','line_number':617,'multiline':False]['text':'    signed char: -128->127','line_number':618,'multiline':False]['text':'  unsigned char: 128->255, 0->127','line_number':619,'multiline':False]['text':' Encode an invalid BSON Object with an invalid type, x90.','line_number':633,'multiline':False]['text':' Constructing the object is fine, but validating should fail.','line_number':636,'multiline':False]['text':' Validate fails.','line_number':639,'multiline':False]['text':' Make sure the binary buffer above indeed has the invalid type.','line_number':642,'multiline':False]['text':' Check if previous byte looks like EOO','line_number':672,'multiline':False]['text':' Checks that RegEx with invalid options strings (either an unknown flag or not in alphabetical','line_number':680,'multiline':False]['text':' order) throws a warning.','line_number':681,'multiline':False]['text':' Checks that an invalid UUID length (!= 16 bytes) throws a warning.','line_number':710,'multiline':False]['text':' Checks that a valid UUID does not throw any warnings.','line_number':725,'multiline':False]['text':' Successful FLE2 Unindexed Encrypted Value','line_number':800,'multiline':False]['text':' Successful FLE2 Equality Indexed Value','line_number':813,'multiline':False]['text':' Successful FLE2 Range Indexed Value','line_number':825,'multiline':False]['text':' Successful FLE2 Equality Indexed Value V2','line_number':837,'multiline':False]['text':' Successful FLE2 Range Indexed Value V2','line_number':850,'multiline':False]['text':' Successful FLE2 Unindexed Encrypted Value V2','line_number':862,'multiline':False]['text':' Empty Encrypted BSON Value.','line_number':875,'multiline':False]['text':' Encrypted BSON value subtype not supposed to persist.','line_number':885,'multiline':False]['text':' Short Encrypted BSON Value.','line_number':898,'multiline':False]['text':' Unsupported original BSON subtype.','line_number':912,'multiline':False]['text':' Change one important byte.','line_number':952,'multiline':False]['text':' Remove final EOO','line_number':971,'multiline':False]['text':' Remove final EOO and 0 previous byte (check no overflow)','line_number':974,'multiline':False]['text':' Remove all string null terminators, expect failure but not overflow','line_number':1017,'multiline':False]['text':' start of "a" ','line_number':1032,'multiline':True]['text':' start of "a" string ','line_number':1043,'multiline':True]['text':' Remove all string null terminators after string start, expect failure but not overflow','line_number':1058,'multiline':False]['text':' start of "deadbeef" string ','line_number':1059,'multiline':True]['text':' Remove EOO and one block ','line_number':1141,'multiline':True]['text':' Change extended selector on a 7 selector to 14 ','line_number':1153,'multiline':True]['text':' first 7 selector ','line_number':1154,'multiline':True]['text':' Check that we found a 7 selector','line_number':1156,'multiline':False]['text':' 14 extended selector ','line_number':1157,'multiline':True]['text':' original selector ','line_number':1158,'multiline':True]['text':' original blocks ','line_number':1159,'multiline':True]['text':' namespace','line_number':1164,'multiline':False]