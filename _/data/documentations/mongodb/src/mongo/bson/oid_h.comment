['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Object ID type.
 * BSON objects typically have an _id field for the object id. This field should be the first
 * member of the object when present. The OID class is a special type that is a 12 byte id which
 * is likely to be unique to the system.  You may also use other types for _id's.
 * When _id field is missing from a BSON object, on an insert the database may insert one
 * automatically in certain circumstances.
 *
 * The BSON ObjectID is a 12-byte value consisting of a 4-byte timestamp (seconds since epoch),
 * in the highest order 4 bytes followed by a 5 byte value unique to this machine AND process,
 * followed by a 3 byte counter.
 *
 *               4 byte timestamp    5 byte process unique   3 byte counter
 *             |<----------------->|<---------------------->|<------------->
 * OID layout: [----|----|----|----|----|----|----|----|----|----|----|----]
 *             0                   4                   8                   12
 *
 * The timestamp is a big endian 4 byte signed-integer.
 *
 * The process unique is an arbitrary sequence of 5 bytes. There are no endianness concerns
 * since it is never interpreted as a multi-byte value.
 *
 * The counter is a big endian 3 byte unsigned integer.
 *
 * Note: The timestamp and counter are big endian (in contrast to the rest of BSON) because
 * we use memcmp to order OIDs, and we want to ensure an increasing order.
 *
 * Warning: You MUST call OID::justForked() after a fork(). This ensures that each process will
 * generate unique OIDs.
 ','line_number':52,'multiline':True]['text':'* init from a 24 char hex string ','line_number':88,'multiline':True]['text':'* init from a reference to a 12-byte array ','line_number':93,'multiline':True]['text':'* initialize to 'null' ','line_number':98,'multiline':True]['text':'* @return the object ID output as 24 hex digits ','line_number':107,'multiline':True]['text':'* @return the random/sequential part of the object ID as 6 hex digits ','line_number':109,'multiline':True]['text':' Return OID initialized with a 8 byte term id and max Timestamp. Used for ElectionID.','line_number':121,'multiline':False]['text':' Caller must ensure that the buffer is valid for kOIDSize bytes.','line_number':128,'multiline':False]['text':' this is templated because some places use unsigned char vs signed char','line_number':129,'multiline':False]['text':'*
     * This method creates and initializes an OID from a string,
     * returning a bad Status on failure.
     ','line_number':143,'multiline':True]['text':'*
     * This method creates and initializes an OID from a string, throwing a BadValue exception if
     * the string is not a valid OID.
     ','line_number':149,'multiline':True]['text':'* sets the contents to a new oid / randomized value ','line_number':157,'multiline':True]['text':'* init from a 24 char hex std::string ','line_number':160,'multiline':True]['text':'* Set to the min/max OID that could be generated at given timestamp. ','line_number':163,'multiline':True]['text':'*
     * Sets the contents to contain the leading max Timestamp (0x7FFFFFFF)
     * followed by an big endian 8 byte term id
     ','line_number':166,'multiline':True]['text':' True iff the OID is not empty','line_number':177,'multiline':False]['text':'*
     * Functor compatible with std::hash for std::unordered_{map,set}
     * Warning: The hash function is subject to change. Do not use in cases where hashes need
     *          to be consistent across versions.
     ','line_number':182,'multiline':True]['text':'*
     * this is not consistent
     * do not store on disk
     ','line_number':191,'multiline':True]['text':'*
     * Hash function compatible with absl::Hash for absl::unordered_{map,set}
     ','line_number':197,'multiline':True]['text':'* call this after a fork to update the process id ','line_number':206,'multiline':True]['text':' used by the 'features' command','line_number':209,'multiline':False]['text':' Timestamp is 4 bytes so we just use int32_t','line_number':212,'multiline':False]['text':' Wrappers so we can return stuff by value.','line_number':215,'multiline':False]['text':' Internal mutable view','line_number':244,'multiline':False]['text':' When we are going to immediately overwrite the bytes, there is no point in zero','line_number':249,'multiline':False]['text':' initializing the data first.','line_number':250,'multiline':False]['text':'* Formatting mode for generating JSON from BSON.
    See <http://dochub.mongodb.org/core/mongodbextendedjson>
    for details.
','line_number':265,'multiline':True]['text':' namespace mongo','line_number':284,'multiline':False]