['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * If 'stringComparator' is null, the default binary comparator will be used for comparing
     * string elements.  A custom string comparator may be provided, but it must outlive the
     * constructed BSONElementCmpWithoutField.
     ','line_number':45,'multiline':True]['text':'* Use BSON macro to build a BSONObj from a stream

    e.g.,
       BSON( "name" << "joe" << "age" << 33 )

    with auto-generated object id:
       BSON( GENOID << "name" << "joe" << "age" << 33 )

    The labels GT, GTE, LT, LTE, NE can be helpful for stream-oriented construction
    of a BSONObj, particularly when assembling a Query.  For example,
    BSON( "a" << GT << 23.4 << NE << 30 << "b" << 2 ) produces the object
    { a: { \$gt: 23.4, \$ne: 30 }, b: 2 }.
','line_number':61,'multiline':True]['text':'* Use BSON_ARRAY macro like BSON macro, but without keys

    BSONArray arr = BSON_ARRAY( "hello" << 1 <<
                        BSON( "foo" << BSON_ARRAY( "bar" << "baz" << "qux" ) ) );

 ','line_number':76,'multiline':True]['text':' Utility class to auto assign object IDs.
   Example:
     std::cout << BSON( GENOID << "z" << 3 ); // { _id : ..., z : 3 }
','line_number':84,'multiline':True]['text':' Utility class to add a Date element with the current time
   Example:
     std::cout << BSON( "created" << DATENOW ); // { created : "2009-10-09 11:41:42" }
','line_number':91,'multiline':True]['text':' Utility class to assign a NULL value to a given attribute
   Example:
     std::cout << BSON( "a" << BSONNULL ); // { a : null }
','line_number':98,'multiline':True]['text':' Utility class to assign an Undefined value to a given attribute
   Example:
     std::cout << BSON( "a" << BSONUndefined ); // { a : undefined }
','line_number':105,'multiline':True]['text':' Utility class to add the minKey (minus infinity) to a given attribute
   Example:
     std::cout << BSON( "a" << MINKEY ); // { "a" : { "$minKey" : 1 } }
','line_number':112,'multiline':True]['text':' Utility class to implement GT, GTE, etc as described above.','line_number':121,'multiline':False]['text':' the value of the element e is appended i.e. for
         "age" << GT << someElement
       one gets
         { age : { $gt : someElement's value } }
    ','line_number':132,'multiline':True]['text':' definitions in bsonobjbuilder.h b/c of incomplete types','line_number':152,'multiline':False]['text':' Utility class to implement BSON( key << val ) as described above.','line_number':154,'multiline':False]['text':' The following methods provide API compatibility with BSONArrayBuilder','line_number':183,'multiline':False]['text':' This method should only be called from inside of implementations of','line_number':187,'multiline':False]['text':' BSONObjBuilder& operator<<(BSONObjBuilderValueStream&, SOME_TYPE)','line_number':188,'multiline':False]['text':' to provide the return value.','line_number':189,'multiline':False]['text':'*
     * Restores this object to its empty state.
     ','line_number':194,'multiline':True]['text':'*
   used in conjuction with BSONObjBuilder, allows for proper buffer size to prevent crazy memory
   usage
 ','line_number':210,'multiline':True]['text':' this is the default, so just be consistent','line_number':219,'multiline':False]['text':' thread safe at least on certain compilers','line_number':226,'multiline':False]['text':'*
     * right now choosing largest size
     ','line_number':229,'multiline':True]['text':' sane min','line_number':233,'multiline':False]['text':' considers order','line_number':247,'multiline':False]['text':' namespace mongo','line_number':249,'multiline':False]