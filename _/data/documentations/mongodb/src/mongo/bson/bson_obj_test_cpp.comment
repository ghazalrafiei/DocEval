['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' max is finite','line_number':102,'multiline':False]['text':' TODO in C++11 use hex floating point to test distinct NaN representations','line_number':120,'multiline':False]['text':' All powers of two in this range can be represented exactly as doubles.','line_number':168,'multiline':False]['text':' is dNum - 0.5 representable?','line_number':179,'multiline':False]['text':' is dNum + 0.5 representable?','line_number':184,'multiline':False]['text':' Numbers around +/- numeric_limits<long long>::max() which can't be represented','line_number':191,'multiline':False]['text':' precisely as a double.','line_number':192,'multiline':False]['text':' 2**63','line_number':194,'multiline':False]['text':' 2**63 - epsilon','line_number':195,'multiline':False]['text':' Numbers around numeric_limits<long long>::min() which can be represented precisely as','line_number':207,'multiline':False]['text':' a double, but not as a positive long long.','line_number':208,'multiline':False]['text':' -2**63 - epsilon','line_number':210,'multiline':False]['text':' 2**63','line_number':211,'multiline':False]['text':' -2**63 + epsilon','line_number':212,'multiline':False]['text':' VS2017 Doesn't like the tests below, even though we're using static_cast','line_number':214,'multiline':False]['text':' warning C4056: overflow in floating-point constant arithmetic','line_number':217,'multiline':False]['text':' over 34 digits of precision so it should be equal','line_number':249,'multiline':False]['text':' +/-NaN is well ordered and compares smallest, so +NaN and -NaN should behave the same','line_number':279,'multiline':False]['text':' Double 0.1 should not compare the same as decimal 0.1. The standard','line_number':359,'multiline':False]['text':' double constructor for decimal types quantizes at 15 places, but this','line_number':360,'multiline':False]['text':' is not safe for a well ordered comparison because decimal(0.1) would','line_number':361,'multiline':False]['text':' then compare equal to both double(0.10000000000000000555) and','line_number':362,'multiline':False]['text':' double(0.999999999999999876). The following test cases check that','line_number':363,'multiline':False]['text':' proper well ordering is applied to double and decimal comparisons.','line_number':364,'multiline':False]['text':' Double 0.1 should compare well against significantly different decimals','line_number':377,'multiline':False]['text':' These tests deal with doubles that get adjusted when converted to decimal.','line_number':383,'multiline':False]['text':' The decimal type only will store a double's first 15 decimal digits of','line_number':384,'multiline':False]['text':' precision (the most it can accurately express).','line_number':385,'multiline':False]['text':' Now that tmp is out of scope, if obj didn't retain ownership, it would be accessing free'd','line_number':692,'multiline':False]['text':' memory which should error on ASAN and debug builds.','line_number':693,'multiline':False]['text':' Check that replacing a field maintains the same ordering and doesn't add a field.','line_number':701,'multiline':False]['text':' Check that adding a new field places it at the end.','line_number':708,'multiline':False]['text':' Check that after all this obj is unchanged.','line_number':714,'multiline':False]['text':' New fields are appended to the end in the order in which they appear in the 'from' object.','line_number':719,'multiline':False]['text':' Duplicate fields names are merged at original poistion.','line_number':724,'multiline':False]['text':' New fields are appended to the end while duplicates are merged in place.','line_number':729,'multiline':False]['text':' No fields added when the set is empty','line_number':734,'multiline':False]['text':' Fields that are not present in the 'from' object are ignored.','line_number':741,'multiline':False]['text':' Duplicate fields names are merged at original poistion.','line_number':746,'multiline':False]['text':' New fields are appended to the end, in the order in which they appear in the 'from'','line_number':751,'multiline':False]['text':' object.','line_number':752,'multiline':False]['text':' Implicitly assert that BSONObj constructor does not throw','line_number':768,'multiline':False]['text':' with standard size buffers.','line_number':769,'multiline':False]['text':' Large buffers cause an exception to be thrown.','line_number':774,'multiline':False]['text':' Assert that the max size can be increased by passing BSONObj a tag type.','line_number':784,'multiline':False]['text':' But a size is in fact being enforced.','line_number':790,'multiline':False]['text':' { "a": "b\0c" }','line_number':804,'multiline':False]['text':' { "a": "b\0c\0d" }','line_number':817,'multiline':False]['text':' { "a": "\0\0\0\0\0\0\0\0\0" }','line_number':830,'multiline':False]['text':' unnamed namespace','line_number':839,'multiline':False]