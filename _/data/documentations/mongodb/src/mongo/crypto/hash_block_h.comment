['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Secure allocator wrapper for HashBlock Traits.
 *
 * Usage:
 *   HashBlock<SecureTraits<SHA256BlockTraits>> secureBlock;
 * or as a convenience:
 *   SHA256Block::Secure secureBlock;
 ','line_number':54,'multiline':True]['text':'*
 * Data structure with fixed sized byte array that can be used as HMAC key or result of a SHA
 * computation.
 ','line_number':97,'multiline':True]['text':'*
     * Constructs a HashBlock from a buffer of specified size.
     ','line_number':113,'multiline':True]['text':'*
     * Computes a hash of 'input' from multiple contigous buffers.
     ','line_number':146,'multiline':True]['text':'*
     * Computes a hash of 'input' from one buffer.
     ','line_number':155,'multiline':True]['text':'*
     * Computes a HMAC keyed hash of 'input' using the key 'key'.
     ','line_number':162,'multiline':True]['text':'*
     * Computes a HMAC keyed hash of 'input' using the key 'key'. Writes the results into
     * a pre-allocated HashBlock. This lets us allocate HashBlocks with the SecureAllocator.
     ','line_number':174,'multiline':True]['text':'*
     * Make a new HashBlock from a BSON BinData value.
     ','line_number':217,'multiline':True]['text':'*
     * Make a new HashBlock from a vector of bytes representing bindata. For IDL.
     ','line_number':237,'multiline':True]['text':'*
     * Append this to a builder using the given name as a BSON BinData type value.
     ','line_number':249,'multiline':True]['text':'*
     * Do a bitwise xor against another HashBlock and replace the current contents of this block
     * with the result.
     ','line_number':256,'multiline':True]['text':'*
     * Base64 encoding of the sha block as a string.
     ','line_number':266,'multiline':True]['text':'*
     * Hex encoded hash block.
     ','line_number':274,'multiline':True]['text':'*
     * Custom hasher so HashBlocks can be used in unordered data structures.
     *
     * ex: std::unordered_set<HashBlock, HashBlock::Hash> shaSet;
     *
     * Cryptographically secure hashes are good hashes so no need to hash them again. Just truncate
     * the hash and return it.
     ','line_number':301,'multiline':True]['text':'*
     * Hash function compatible with absl::Hash for absl::unordered_{map,set}
     ','line_number':318,'multiline':True]['text':' The backing array of bytes for the sha block','line_number':329,'multiline':False]['text':' namespace mongo','line_number':339,'multiline':False]