['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':60,'multiline':False]['text':' IWYU pragma: keep','line_number':72,'multiline':False]['text':' Level 1','line_number':250,'multiline':False]['text':' Level 2','line_number':267,'multiline':False]['text':' Level 3','line_number':290,'multiline':False]['text':' Level 4','line_number':319,'multiline':False]['text':' Level 5','line_number':341,'multiline':False]['text':' Unindexed field decryption','line_number':373,'multiline':False]['text':' Encryption can not be generated using test vectors because IV is random','line_number':374,'multiline':False]['text':' Non-anchor documents don't work with decryptAnchorDocument()','line_number':504,'multiline':False]['text':' shuffle?','line_number':590,'multiline':False]['text':' std::sort(_docs.begin(), _docs.end());','line_number':591,'multiline':False]['text':' Test Empty Collection','line_number':630,'multiline':False]['text':' insert null anchor','line_number':693,'multiline':False]['text':' insert regular anchors with positions between anchorStart and anchorEnd (exclusive)','line_number':701,'multiline':False]['text':' insert non-anchors with positions between nonAnchorStart and nonAnchorEnd (exclusive)','line_number':713,'multiline':False]['text':' namespace','line_number':724,'multiline':False]['text':' Test EmuBinaryV2 on empty collection','line_number':726,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing non-anchors only','line_number':735,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing non-null anchors only','line_number':744,'multiline':False]['text':' insert anchors 1-10, with cpos all at 0','line_number':746,'multiline':False]['text':' insert anchors 1-17 with cpos from 31 thru 47','line_number':752,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing both non-anchors and regular (non-null) anchors only','line_number':759,'multiline':False]['text':' insert regular anchors 1-7, with cpos all at 0; non-anchors 1-20','line_number':762,'multiline':False]['text':' insert regular anchors 1-7, with cpos between 41-47; non-anchors 1-20','line_number':769,'multiline':False]['text':' insert regular anchors 1-7, with cpos between 41-47; non-anchors 30-47','line_number':775,'multiline':False]['text':' insert regular anchors 1-7, with cpos between 41-47; non-anchors 48-59','line_number':781,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing the null anchor only','line_number':789,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing null anchor and non-anchors only','line_number':801,'multiline':False]['text':' insert null anchor with apos = 0, cpos = 23; non-anchors 1-20','line_number':804,'multiline':False]['text':' insert null anchor with apos = 0, cpos = 23; non-anchor at 23','line_number':809,'multiline':False]['text':' insert null anchor with apos = 0, cpos = 23; non-anchors 24-29','line_number':814,'multiline':False]['text':' insert null anchor with apos = 0, cpos = 0; non-anchors 1-20','line_number':820,'multiline':False]['text':' insert null anchor with apos = 10, cpos = 0; non-anchors 1-20','line_number':826,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing null and non-null anchors only','line_number':833,'multiline':False]['text':' insert null anchor with apos = 47, cpos = 123; regular anchors 1-20','line_number':836,'multiline':False]['text':' insert null anchor with apos = 47, cpos = 123; regular anchors 20-47','line_number':841,'multiline':False]['text':' insert null anchor with apos = 47, cpos = 123; regular anchors 40-59','line_number':846,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing all kinds of records, where the positions in the','line_number':853,'multiline':False]['text':' null anchor are ahead of all existing anchor positions.','line_number':854,'multiline':False]['text':' e.g. (null_apos > last_apos && null_cpos >= last_anchor_cpos)','line_number':855,'multiline':False]['text':' all tests have null anchor with null_apos=40 and null_cpos=60','line_number':857,'multiline':False]['text':' regular anchors 1-39 (cpos 12 thru 50); non-anchors 1-49','line_number':860,'multiline':False]['text':' regular anchors 1-39 (cpos 12 thru 50); non-anchor at 50','line_number':865,'multiline':False]['text':' regular anchors 1-39 (cpos 12 thru 50); non-anchors at 51-59','line_number':870,'multiline':False]['text':' regular anchors 1-39 (cpos 12 thru 50); non-anchor at 60','line_number':875,'multiline':False]['text':' regular anchors 1-39 (cpos 12 thru 50); non-anchors at 61-69','line_number':880,'multiline':False]['text':' regular anchors 1-39 (cpos 22 thru 60); non-anchors at 50-60','line_number':886,'multiline':False]['text':' regular anchors 1-39 (cpos 22 thru 60); non-anchors at 50-69','line_number':891,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing all kinds of records, where the positions in the','line_number':898,'multiline':False]['text':' null anchor are similar to the most recent regular anchor's positions.','line_number':899,'multiline':False]['text':' e.g. (null_apos == last_apos && null_cpos == last_anchor_cpos)','line_number':900,'multiline':False]['text':' all tests have null anchor with null_apos=40 and null_cpos=60','line_number':902,'multiline':False]['text':' regular anchors 1-40 (cpos 21 thru 60); non-anchors 1-59','line_number':905,'multiline':False]['text':' regular anchors 1-40 (cpos 21 thru 60); non-anchor at 60','line_number':910,'multiline':False]['text':' regular anchors 1-40 (cpos 21 thru 60); non-anchors 61-69','line_number':915,'multiline':False]['text':' Test EmuBinaryV2 on ESC containing all kinds of records, where the positions in the null','line_number':922,'multiline':False]['text':' anchor are less than the most recent regular anchor's positions.','line_number':923,'multiline':False]['text':' e.g. (null_apos < last_apos && null_cpos <= last_anchor_cpos)','line_number':924,'multiline':False]['text':' all tests have null anchor with null_apos=40 and null_cpos=60','line_number':926,'multiline':False]['text':' regular anchors 1-50 (cpos 11 thru 60); non-anchors 1-59','line_number':929,'multiline':False]['text':' regular anchors 1-50 (cpos 11 thru 60); non-anchor at 60','line_number':935,'multiline':False]['text':' regular anchors 1-50 (cpos 11 thru 60); non-anchors 61-69','line_number':941,'multiline':False]['text':' regular anchors 1-50 (cpos 21 thru 70); non-anchors 1-69','line_number':948,'multiline':False]['text':' regular anchors 1-50 (cpos 21 thru 70); non-anchor at 70','line_number':954,'multiline':False]['text':' regular anchors 1-50 (cpos 21 thru 70); non-anchors at 71-79','line_number':960,'multiline':False]['text':' Test one new field in esc','line_number':968,'multiline':False]['text':' Test with various fake counts to ensure enumBinary works with bad estimates and the original','line_number':995,'multiline':False]['text':' exact count.','line_number':996,'multiline':False]['text':' Test two new fields in esc','line_number':1010,'multiline':False]['text':' Test with various fake counts to ensure enumBinary works with bad estimates and the original','line_number':1054,'multiline':False]['text':' exact count.','line_number':1055,'multiline':False]['text':' Test Emulated Binary with null record','line_number':1073,'multiline':False]['text':' Set a default lower and upper bound','line_number':1123,'multiline':False]['text':' Start Server Side','line_number':1214,'multiline':False]['text':' Finalize document for insert','line_number':1227,'multiline':False]['text':' Decrypt document','line_number':1274,'multiline':False]['text':' Remove this so the round-trip is clean','line_number':1277,'multiline':False]['text':' Used to generate the test data for the ExpressionFLETest in expression_test.cpp','line_number':1328,'multiline':False]['text':' Since FLEClientCrypto::transformPlaceholders validates the type is correct,','line_number':1627,'multiline':False]['text':' we send an allowed type and then change the type to something that is not allowed','line_number':1628,'multiline':False]['text':' Start Server Side','line_number':1645,'multiline':False]['text':' Test bogus client encrypted value fails for FLE2 indexed equality value v2','line_number':1791,'multiline':False]['text':' Test bogus client encrypted value fails for FLE2 indexed range value v2','line_number':1803,'multiline':False]['text':' Test setting bogus type byte throws','line_number':1812,'multiline':False]['text':' Test mismatch vector length throws for range encrypted value v2','line_number':1819,'multiline':False]['text':' test short input for equality payload','line_number':1839,'multiline':False]['text':' test short input for range payload','line_number':1859,'multiline':False]['text':' test bad bson type for equality payload','line_number':1877,'multiline':False]['text':' bad bsonType','line_number':1880,'multiline':False]['text':' test bad bson type for range payload','line_number':1902,'multiline':False]['text':' test invalid ciphertext length for equality payload fails to decrypt','line_number':1922,'multiline':False]['text':' test invalid ciphertext length for range payload fails to decrypt','line_number':1930,'multiline':False]['text':' Test that serialize and parseAndDecryptMetadataBlocks don't work with derivedDataTokens','line_number':2034,'multiline':False]['text':' of incorrect length.','line_number':2035,'multiline':False]['text':' Decrypt document','line_number':2107,'multiline':False]['text':' Error if the user tries to reuse the same index key across fields','line_number':2310,'multiline':False]['text':' Verify we can compare two list of tags correctly','line_number':2332,'multiline':False]['text':' assert length of ciphertext (including HMAC & IV) is consistent with CBC mode','line_number':2423,'multiline':False]['text':' Positive - Encrypted Doc','line_number':2473,'multiline':False]['text':' Positive - Unencrypted Doc','line_number':2476,'multiline':False]['text':' Remove all tags','line_number':2480,'multiline':False]['text':' Remove an encrypted field','line_number':2488,'multiline':False]['text':' Remove a tag','line_number':2495,'multiline':False]['text':' Make safecontent an int','line_number':2503,'multiline':False]['text':' Replace a tag','line_number':2511,'multiline':False]['text':' Wrong tag type','line_number':2523,'multiline':False]['text':' "garbage"','line_number':2554,'multiline':False]['text':' "\x07garbage"','line_number':2555,'multiline':False]['text':' "\x06garbage"','line_number':2556,'multiline':False]['text':' Start Server Side','line_number':2607,'multiline':False]['text':' Test update with no $push','line_number':2623,'multiline':False]['text':' Test update with no crypto','line_number':2644,'multiline':False]['text':' Test all fields changed','line_number':2738,'multiline':False]['text':' Test field "b" changed','line_number':2745,'multiline':False]['text':' Test all fields removed','line_number':2750,'multiline':False]['text':' Test field "a" removed','line_number':2756,'multiline':False]['text':' Test no fields changed','line_number':2761,'multiline':False]['text':' Test field added','line_number':2768,'multiline':False]['text':' Test exception if old fields contain deprecated FLE2 subtype...','line_number':2772,'multiline':False]['text':' .. but not if the v1 field is also in the new document.','line_number':2778,'multiline':False]['text':' Verify failure when list of tags is empty','line_number':2820,'multiline':False]['text':' validate fails until all fields are present','line_number':2856,'multiline':False]['text':' validate doesn't care about the value, so this is fine','line_number':2861,'multiline':False]['text':' validate OK if obj has extra fields','line_number':2866,'multiline':False]['text':' min int32_t, no equivalent in positive part of integer','line_number':2939,'multiline':False]['text':' min int32_t, no equivalent in positive part of integer','line_number':2965,'multiline':False]['text':' min Int64_t, no equivalent in positive part of integer','line_number':3004,'multiline':False]['text':' min Int64_t, no equivalent in positive part of integer','line_number':3031,'multiline':False]['text':' Larger numbers map to larger uint64','line_number':3068,'multiline':False]['text':' Larger exponents map to larger uint64','line_number':3081,'multiline':False]['text':' Smaller exponents map to smaller uint64','line_number':3086,'multiline':False]['text':' Smaller negative exponents map to smaller uint64','line_number':3094,'multiline':False]['text':' Larger exponents map to larger uint64','line_number':3102,'multiline':False]['text':' Larger numbers map tw larger uint64','line_number':3236,'multiline':False]['text':' Smaller exponents map to smaller uint64','line_number':3286,'multiline':False]['text':' Smaller negative exponents map to smaller uint64','line_number':3294,'multiline':False]['text':' Larger exponents map to larger uint64','line_number':3302,'multiline':False]['text':' Test a range that requires > 64 bits.','line_number':3426,'multiline':False]['text':' Test a range that requires > 64 bits.','line_number':3428,'multiline':False]['text':' min has more places after the decimal than precision.','line_number':3429,'multiline':False]['text':' Tests to make sure that the getMinCover() interface properly calculates the mincover when given a','line_number':3519,'multiline':False]['text':' FLE2FindRangeSpec. Does not test correctness for the mincover algorithm. That testing is covered','line_number':3520,'multiline':False]['text':' by the MinCoverCalcTest suite above.','line_number':3521,'multiline':False]['text':' Test point queries and that trimming bitstrings is correct in precision mode','line_number':4507,'multiline':False]['text':' namespace mongo','line_number':4554,'multiline':False]