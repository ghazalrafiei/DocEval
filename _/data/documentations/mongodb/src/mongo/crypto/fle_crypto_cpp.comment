['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/multiprecision/detail/default_ops.hpp"','line_number':44,'multiline':False]['text':' IWYU pragma: no_include "boost/multiprecision/detail/integer_ops.hpp"','line_number':45,'multiline':False]['text':' IWYU pragma: no_include "boost/multiprecision/detail/no_et_ops.hpp"','line_number':46,'multiline':False]['text':' IWYU pragma: no_include "boost/multiprecision/detail/number_base.hpp"','line_number':47,'multiline':False]['text':' IWYU pragma: no_include "boost/multiprecision/detail/number_compare.hpp"','line_number':48,'multiline':False]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':53,'multiline':False]['text':' Optional defines to help with debugging','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' Appends unencrypted fields to the state collections to aid in debugging','line_number':117,'multiline':False]['text':' #define FLE2_DEBUG_STATE_COLLECTIONS','line_number':118,'multiline':False]['text':' Verbose std::cout to troubleshoot the EmuBinary algorithm','line_number':120,'multiline':False]['text':' #define DEBUG_ENUM_BINARY 1','line_number':121,'multiline':False]['text':' namespace libmongocrypt_support_detail','line_number':210,'multiline':False]['text':'*
 * C++ friendly wrapper around libmongocrypt's public mongocrypt_status_t* and its associated
 * functions.
 ','line_number':219,'multiline':True]['text':'*
     * Get the error category for the status.
     ','line_number':236,'multiline':True]['text':'*
     * Get a libmongocrypt specific error code
     ','line_number':243,'multiline':True]['text':'*
     * Returns true if there are no errors
     ','line_number':250,'multiline':True]['text':'*
     * Convert a mongocrypt_status_t to a mongo::Status.
     ','line_number':261,'multiline':True]['text':'*
 * C++ friendly wrapper around libmongocrypt's public mongocrypt_binary_t* and its associated
 * functions.
 *
 * mongocrypt_binary_t* is a view type. Callers must ensure the data has a valid lifetime.
 ','line_number':301,'multiline':True]['text':'*
     * Callers responsibility to call getOwned() if needed as this is a view on underlying data
     ','line_number':342,'multiline':True]['text':'*
 * C++ friendly wrapper around libmongocrypt's private _mongocrypt_buffer_t and its associated
 * functions.
 *
 * This class may or may not own data.
 ','line_number':360,'multiline':True]['text':'*
 * AEAD AES + SHA256
 * Block size = 16 bytes
 * SHA-256 - block size = 256 bits = 32 bytes
 ','line_number':519,'multiline':True]['text':' In CBC mode, the plaintext may end up shorter than the max possible','line_number':577,'multiline':False]['text':' length because of padding, so the output buffer must be resized.','line_number':578,'multiline':False]['text':' Note: the reference must be removed before the const','line_number':601,'multiline':False]['text':' Default search parameters','line_number':656,'multiline':False]['text':' Step 2:','line_number':660,'multiline':False]['text':' Search for null record','line_number':661,'multiline':False]['text':' step 4, 5: get document count','line_number':676,'multiline':False]['text':' Since fast count() is not reliable, if it says zero, try 1 instead just to be sure the','line_number':679,'multiline':False]['text':' collection is empty.','line_number':680,'multiline':False]['text':' step 6','line_number':689,'multiline':False]['text':' step 7','line_number':692,'multiline':False]['text':' TODO - this loop never terminates unless it finds a document, need to add a terminating','line_number':693,'multiline':False]['text':' condition','line_number':694,'multiline':False]['text':' 7 a','line_number':696,'multiline':False]['text':' 7 b','line_number':703,'multiline':False]['text':' Step 8:','line_number':711,'multiline':False]['text':' Step 9','line_number':714,'multiline':False]['text':' 9a','line_number':723,'multiline':False]['text':' 9b','line_number':727,'multiline':False]['text':' 9c','line_number':740,'multiline':False]['text':' 9 c i','line_number':742,'multiline':False]['text':' 9 c ii','line_number':745,'multiline':False]['text':' 9d','line_number':749,'multiline':False]['text':' 9 d i','line_number':751,'multiline':False]['text':' 9 d ii','line_number':754,'multiline':False]['text':' Binary search has ended without finding a document, check for the first document','line_number':755,'multiline':False]['text':' explicitly','line_number':756,'multiline':False]['text':' 9 d ii A','line_number':758,'multiline':False]['text':' 9 d ii B','line_number':760,'multiline':False]['text':'*
 * Stores a KeyId and encrypted value
 *
 * struct {
 *   uint8_t key_uuid[16];
 *   ciphertext[ciphertext_length];
 *  }
 ','line_number':774,'multiline':True]['text':'*
     * Read the key id from the payload.
     ','line_number':787,'multiline':True]['text':'*
 * Read and write FLE2InsertUpdate payload.
 ','line_number':846,'multiline':True]['text':'*
 * Lightweight class to build a singly linked list of field names to represent the current field
 * name
 *
 * Avoids heap allocations until getFieldPath() is called
 ','line_number':1110,'multiline':True]['text':' Name of the current field that is being parsed.','line_number':1127,'multiline':False]['text':' Pointer to a parent parser context.','line_number':1130,'multiline':False]['text':' This provides a singly linked list of parent pointers, and use to produce a full path to a','line_number':1131,'multiline':False]['text':' field with an error.','line_number':1132,'multiline':False]['text':'*
 * Copies an input document to the output but provides callers a way to customize how encrypted
 * fields are handled.
 *
 * Callers can pass a function doTransform(Original bindata content, BSONObjBuilder, Field Name).
 *
 * Function is expected to append a field with the specified "Field Name" to the output.
 ','line_number':1181,'multiline':True]['text':'*
 * Iterates through all encrypted fields. Does not return a document like doTransform.
 *
 * Callers can pass a function doVisit(Original bindata content, Field Name).
 ','line_number':1239,'multiline':True]['text':'*
 * Converts an encryption placeholder to FLE2InsertUpdatePayload in prepration for insert,
 * fndAndModify and update.
 ','line_number':1284,'multiline':True]['text':' Enforced as non-optional in this case in IDL','line_number':1352,'multiline':False]['text':' TODO - validate acceptable types - kFLE2Placeholder or kFLE2UnindexedEncryptedValue or','line_number':1404,'multiline':False]['text':' kFLE2EqualityIndexedValue','line_number':1405,'multiline':False]['text':' TODO - validate field is actually indexed in the schema?','line_number':1447,'multiline':False]['text':' No-op','line_number':1458,'multiline':False]['text':' No-op','line_number':1462,'multiline':False]['text':' TODO - validate field is actually indexed in the schema?','line_number':1503,'multiline':False]['text':' The size here is to construct a new BSON document and validate the','line_number':1575,'multiline':False]['text':' total size of the object. The first four bytes is for the size of an','line_number':1576,'multiline':False]['text':' int32_t, then a space for the type of the first element, then the space','line_number':1577,'multiline':False]['text':' for the value string and the the 0x00 terminated field name, then the','line_number':1578,'multiline':False]['text':' size of the actual data, then the last byte for the end document character,','line_number':1579,'multiline':False]['text':' also 0x00.','line_number':1580,'multiline':False]['text':' For non-contentious fields, we select the partition number, u, to be equal to 0.','line_number':1627,'multiline':False]['text':'','line_number':1628,'multiline':False]['text':' for contentious fields, with a contention factor, p, we pick the partition number, u,','line_number':1629,'multiline':False]['text':' uniformly at random from the set {0, ..., p}.','line_number':1630,'multiline':False]['text':'','line_number':1631,'multiline':False]['text':' Note: nextInt64() returns [0,p) instead of [0,p] so we +1.','line_number':1632,'multiline':False]['text':'','line_number':1633,'multiline':False]['text':'*
 * Return the first bit set in a integer. 1 indexed.
 ','line_number':1648,'multiline':True]['text':' Queries are of the shape:','line_number':1721,'multiline':False]['text':'    { $or: [','line_number':1722,'multiline':False]['text':'            { _id: { $in: [ UUID("12345678-1234-9876-1234-123456789012")','line_number':1723,'multiline':False]['text':'                      ]','line_number':1724,'multiline':False]['text':'                 }','line_number':1725,'multiline':False]['text':'            },','line_number':1726,'multiline':False]['text':'            {','line_number':1727,'multiline':False]['text':'            keyAltNames: {','line_number':1728,'multiline':False]['text':'                 $in: []','line_number':1729,'multiline':False]['text':'                 }','line_number':1730,'multiline':False]['text':'            }','line_number':1731,'multiline':False]['text':'       ]','line_number':1732,'multiline':False]['text':'  }','line_number':1733,'multiline':False]['text':' This state is responsible for retrieving a collection schema from mongod. It is','line_number':1782,'multiline':False]['text':' not needed during decryption.','line_number':1783,'multiline':False]['text':' This state is responsible for sending a document to mongocryptd/crypt_shared_v1','line_number':1787,'multiline':False]['text':' to be replace fields with encryption placeholders. It is not needed during','line_number':1788,'multiline':False]['text':' decryption.','line_number':1789,'multiline':False]['text':' This state is responsible for decrypting data keys encrypted by a KMS. This is','line_number':1797,'multiline':False]['text':' not needed for local kms keys','line_number':1798,'multiline':False]['text':' We don't handle KMS credentials','line_number':1820,'multiline':False]['text':'*
 * Reads the anchor document identified by anchorId, and if found, decrypts the value
 * and returns the parsed positions as a pair. If the anchor is not found, returns none.
 ','line_number':1831,'multiline':True]['text':'*
 * Performs all the ESC reads required by the QE cleanup algorithm.
 ','line_number':1850,'multiline':True]['text':' step (C)','line_number':1860,'multiline':False]['text':' positions.cpos is a_1','line_number':1861,'multiline':False]['text':' positions.apos is a_2','line_number':1862,'multiline':False]['text':' step (D)','line_number':1865,'multiline':False]['text':' nullAnchorPositions is r','line_number':1866,'multiline':False]['text':' This holds what value of a_1 should be used when inserting/updating the null anchor.','line_number':1870,'multiline':False]['text':' case (E)','line_number':1874,'multiline':False]['text':' Null anchor exists & contains the latest anchor position,','line_number':1875,'multiline':False]['text':' and *maybe* the latest non-anchor position.','line_number':1876,'multiline':False]['text':' emuBinary must not return 0 for cpos if an anchor exists','line_number':1879,'multiline':False]['text':' If emuBinary returns none for a_1, then the null anchor has the latest non-anchor pos.','line_number':1882,'multiline':False]['text':' This may happen if a prior cleanup was interrupted after the null anchors were updated,','line_number':1883,'multiline':False]['text':' but before the ECOC temp collection could be dropped, and on resume, no new insertions','line_number':1884,'multiline':False]['text':' or compactions have occurred since the previous cleanup.','line_number':1885,'multiline':False]['text':' case (F)','line_number':1889,'multiline':False]['text':' No anchors yet exist, so null anchor cannot exist and emuBinary must have','line_number':1890,'multiline':False]['text':' returned a value for cpos.','line_number':1891,'multiline':False]['text':' (apos > 0) ','line_number':1896,'multiline':True]['text':' case (G)','line_number':1897,'multiline':False]['text':' New anchors exist - if null anchor exists, then it contains stale positions.','line_number':1898,'multiline':False]['text':' emuBinary must not return 0 for cpos if an anchor exists','line_number':1900,'multiline':False]['text':' If emuBinary returns none for cpos, then the newest anchor has the latest non-anchor pos.','line_number':1903,'multiline':False]['text':' This may happen if a prior compact was interrupted after it inserted a new anchor, but','line_number':1904,'multiline':False]['text':' before the ECOC temp collection could be dropped, and cleanup started immediately','line_number':1905,'multiline':False]['text':' after.','line_number':1906,'multiline':False]['text':'*
 * Performs all the ESC reads required by the QE compact algorithm.
 ','line_number':1921,'multiline':True]['text':' Handle case where cpos is none. This means that no new non-anchors have been inserted','line_number':1934,'multiline':False]['text':' since since the last compact/cleanup.','line_number':1935,'multiline':False]['text':' This could happen if a previous compact inserted an anchor, but the temp ECOC drop','line_number':1936,'multiline':False]['text':' was interrupted. On restart, the compaction will run emuBinaryV2 again, but since the','line_number':1937,'multiline':False]['text':' anchor was already inserted for this value, it may return null cpos if there have been no','line_number':1938,'multiline':False]['text':' new insertions for that value since the first compact attempt.','line_number':1939,'multiline':False]['text':' No new non-anchors since the last compact/cleanup.','line_number':1941,'multiline':False]['text':' There must be at least one anchor.','line_number':1942,'multiline':False]['text':' the anchor with the latest cpos already exists so no more work needed','line_number':1946,'multiline':False]['text':' Either no ESC documents exist yet (cpos == 0), OR new non-anchors','line_number':1984,'multiline':False]['text':' have been inserted since the last compact/cleanup (cpos > 0).','line_number':1985,'multiline':False]['text':' No new non-anchors since the last compact/cleanup.','line_number':1988,'multiline':False]['text':' There must be at least one anchor.','line_number':1989,'multiline':False]['text':' namespace','line_number':2017,'multiline':False]['text':' Open-ended ranges are represented with infinity as the other endpoint. Resolve infinite','line_number':2036,'multiline':False]['text':' bounds at this point to end at the min or max for this index.','line_number':2037,'multiline':False]['text':' TODO: Check on the implications of safeNumberInt() and safeNumberLong().','line_number':2047,'multiline':False]['text':' IDL validates that no other type is permitted.','line_number':2096,'multiline':False]['text':' Generate a number between [1,maxContentionFactor]','line_number':2323,'multiline':False]['text':' Ensure all encrypted fields are in EncryptedFieldConfig','line_number':2397,'multiline':False]['text':' It is ok for fields to be in EncryptedFieldConfig but not present','line_number':2398,'multiline':False]['text':' If there are no tags and no safeContent, then this document is not Queryable Encryption and','line_number':2439,'multiline':False]['text':' is therefore fine','line_number':2440,'multiline':False]['text':' Binary search has ended without finding a document, check for the first document','line_number':2699,'multiline':False]['text':' explicitly','line_number':2700,'multiline':False]['text':' namespace','line_number':2714,'multiline':False]['text':' 1. find null anchor','line_number':2735,'multiline':False]['text':' 2. case: null anchor exists','line_number':2739,'multiline':False]['text':' 3. case: null anchor does not exist','line_number':2746,'multiline':False]['text':' 4. initialize rho at 2','line_number':2752,'multiline':False]['text':' 5-8. perform binary searches','line_number':2755,'multiline':False]['text':' 1. If no anchors present, then i = lambda = 0.','line_number':2776,'multiline':False]['text':'    Otherwise, get the anchor (either null or non-null),','line_number':2777,'multiline':False]['text':'    and set i = null and lambda = anchor.cpos','line_number':2778,'multiline':False]['text':' 2-4. initialize rho based on ESC','line_number':2794,'multiline':False]['text':' the remaining length must fit one serialized FLE2TagAndEncryptedMetadataBlock','line_number':3279,'multiline':False]['text':' We should ensure that the user is not manually modifying the safe content array.','line_number':3696,'multiline':False]['text':' Create collection checks for unique index key ids but users can supply schema client-side','line_number':3726,'multiline':False]['text':' We check here at runtime that all fields index keys are unique.','line_number':3727,'multiline':False]['text':' throws if EDCServerPayloadInfo has invalid payload version','line_number':3754,'multiline':False]['text':' First: transform all the markings','line_number':3804,'multiline':False]['text':' Second: reuse an existing array if present','line_number':3812,'multiline':False]['text':' Append existing array elements','line_number':3821,'multiline':False]['text':' Add new tags','line_number':3826,'multiline':False]['text':' Third: append the tags array if it does not exist','line_number':3837,'multiline':False]['text':' First: transform all the markings','line_number':3856,'multiline':False]['text':' Second: reuse an existing array if present if we have tags to append.','line_number':3864,'multiline':False]['text':' Only need to process $push if we have tags to append','line_number':3867,'multiline':False]['text':' Append existing fields elements','line_number':3874,'multiline':False]['text':' Since we cannot be sure if the $push the server wants to perform (i.e. a $push','line_number':3876,'multiline':False]['text':' with $each) we can stop the client from sending $push. They can always submit it','line_number':3877,'multiline':False]['text':' via an unencrypted client.','line_number':3878,'multiline':False]['text':' Build {$push: { _safeContent__ : {$each: [tag...]} }','line_number':3885,'multiline':False]['text':' Add new tags','line_number':3890,'multiline':False]['text':' Third: append the tags array if it does not exist','line_number':3902,'multiline':False]['text':' Build {$push: { _safeContent__ : {$each: [tag...]} }','line_number':3904,'multiline':False]['text':' Add new tags','line_number':3910,'multiline':False]['text':' Build { $pull : {__safeContent__ : {$in : [tag..] } } }','line_number':3925,'multiline':False]['text':' Add new tags','line_number':3932,'multiline':False]['text':' Lower bound tag count is the number of removed fields.','line_number':3960,'multiline':False]['text':' Do not include tenant id in nss in the schema as the command request has "$tenant".','line_number':4005,'multiline':False]['text':' Do not include tenant id in nss in the schema as the command request has "$tenant".','line_number':4015,'multiline':False]['text':'*
 * Encode a signed 32-bit integer as an unsigned 32-bit integer
 ','line_number':4184,'multiline':True]['text':' Signed integers have a value that there is no positive equivalent and must be handled','line_number':4190,'multiline':False]['text':' specially','line_number':4191,'multiline':False]['text':' Handle min int32 as a special case','line_number':4222,'multiline':False]['text':' For negative numbers, first convert them to unbiased uint32 and then subtract the min','line_number':4228,'multiline':False]['text':' value.','line_number':4229,'multiline':False]['text':'*
 * Encode a signed 64-bit integer as an unsigned 64-bit integer
 ','line_number':4247,'multiline':True]['text':' Signed integers have a value that there is no positive equivalent and must be handled','line_number':4253,'multiline':False]['text':' specially','line_number':4254,'multiline':False]['text':' Handle min int64 as a special case','line_number':4284,'multiline':False]['text':' For negative numbers, first convert them to unbiased uin64 and then subtract the min','line_number':4290,'multiline':False]['text':' value.','line_number':4291,'multiline':False]['text':' Map negative 0 to zero so sign bit is 0.','line_number':4331,'multiline':False]['text':' When we use precision mode, we try to represent as a double value that fits in [-2^63, 2^63]','line_number':4336,'multiline':False]['text':' (i.e. is a valid int64)','line_number':4337,'multiline':False]['text':'','line_number':4338,'multiline':False]['text':' This check determines if we can represent the precision truncated value as a 64-bit integer','line_number':4339,'multiline':False]['text':' I.e. Is ((ub - lb) * 10^precision) < 64 bits.','line_number':4340,'multiline':False]['text':'','line_number':4341,'multiline':False]['text':' It is important we determine whether a range and its precision fit without looking that value','line_number':4342,'multiline':False]['text':' because the encoding for precision truncated doubles is incompatible with the encoding for','line_number':4343,'multiline':False]['text':' doubles without precision.','line_number':4344,'multiline':False]['text':'','line_number':4345,'multiline':False]['text':' Subnormal representations can support up to 5x10^-324 as a number','line_number':4350,'multiline':False]['text':' We can overflow if max = max double and min = min double so make sure we have finite','line_number':4359,'multiline':False]['text':' number after we do subtraction','line_number':4360,'multiline':False]['text':' This creates a range which is wider then we permit by our min/max bounds check with','line_number':4363,'multiline':False]['text':' the +1 but it is as the algorithm is written in the paper.','line_number':4364,'multiline':False]['text':' Take a number of xxxx.ppppp and truncate it xxxx.ppp if precision = 3. We do not change','line_number':4381,'multiline':False]['text':' the digits before the decimal place.','line_number':4382,'multiline':False]['text':' Adjust maximum value to be the max bit range. This will be used by getEdges/minCover to','line_number':4390,'multiline':False]['text':' trim bits.','line_number':4391,'multiline':False]['text':' When we translate the double into "bits", the sign bit means that the negative numbers','line_number':4398,'multiline':False]['text':' get mapped into the higher 63 bits of a 64-bit integer. We want them to map into the lower','line_number':4399,'multiline':False]['text':' 64-bits so we invert the sign bit.','line_number':4400,'multiline':False]['text':'','line_number':4401,'multiline':False]['text':' On Endianness, we support two sets of architectures','line_number':4402,'multiline':False]['text':' 1. Little Endian (ppc64le, x64, aarch64) - in these architectures, int64 and double are both','line_number':4403,'multiline':False]['text':' 64-bits and both arranged in little endian byte order.','line_number':4404,'multiline':False]['text':' 2. Big Endian (s390x) - in these architectures, int64 and double are both','line_number':4405,'multiline':False]['text':' 64-bits and both arranged in big endian byte order.','line_number':4406,'multiline':False]['text':'','line_number':4407,'multiline':False]['text':' Therefore, since the order of bytes on each platform is consistent with itself, the','line_number':4408,'multiline':False]['text':' conversion below converts a double into correct 64-bit integer that produces the same','line_number':4409,'multiline':False]['text':' behavior across plaforms.','line_number':4410,'multiline':False]['text':' This algorithm only works because it assumes we are dealing with Decimal128 numbers that are','line_number':4426,'multiline':False]['text':' valid uint128 numbers. This means the Decimal128 has to be an integer or else the result is','line_number':4427,'multiline':False]['text':' undefined.','line_number':4428,'multiline':False]['text':' If after rounding, the number has changed, we have a fraction, not an integer.','line_number':4432,'multiline':False]['text':' Round-trip our new Int128 back to Decimal128 and make sure it is equal to the original','line_number':4449,'multiline':False]['text':' Decimal128 or else.','line_number':4450,'multiline':False]['text':' For full algorithm see SERVER-68542','line_number':4457,'multiline':False]['text':' When we use precision mode, we try to represent as a decimal128 value that fits in [-2^127,','line_number':4481,'multiline':False]['text':' 2^127] (i.e. is a valid int128)','line_number':4482,'multiline':False]['text':'','line_number':4483,'multiline':False]['text':' This check determines if we can represent the precision truncated value as a 128-bit integer','line_number':4484,'multiline':False]['text':' I.e. Is ((ub - lb) * 10^precision) < 128 bits.','line_number':4485,'multiline':False]['text':'','line_number':4486,'multiline':False]['text':' It is important we determine whether a range and its precision fit without looking that value','line_number':4487,'multiline':False]['text':' because the encoding for precision truncated decimal128 is incompatible with normal','line_number':4488,'multiline':False]['text':' decimal128 values.','line_number':4489,'multiline':False]['text':' kRoundTowardPositive is the same as C99 ceil()','line_number':4506,'multiline':False]['text':' bits_range is always >= 0 but coverity cannot be sure since it does not','line_number':4510,'multiline':False]['text':' understand Decimal128 math so we add a check for positive integers.','line_number':4511,'multiline':False]['text':' Example value: 31.4159','line_number':4520,'multiline':False]['text':' Example Precision = 2','line_number':4521,'multiline':False]['text':' Shift the number up','line_number':4523,'multiline':False]['text':' Returns: 3141.9','line_number':4524,'multiline':False]['text':' Round the number down','line_number':4527,'multiline':False]['text':' Returns 3141.0','line_number':4528,'multiline':False]['text':' Shift the number down','line_number':4531,'multiline':False]['text':' Returns: 31.41','line_number':4532,'multiline':False]['text':' Adjust the number by the lower bound','line_number':4535,'multiline':False]['text':' Make it an integer by scaling the number','line_number':4536,'multiline':False]['text':'','line_number':4537,'multiline':False]['text':' Returns 3141.0','line_number':4538,'multiline':False]['text':' Round the number down again. min may have a fractional value with more decimal places','line_number':4540,'multiline':False]['text':' than the precision (e.g. .001). Subtracting min may have resulted in v_prime2 with','line_number':4541,'multiline':False]['text':' a non-zero fraction. v_prime2 is expected to have no fractional value when','line_number':4542,'multiline':False]['text':' converting to int128.','line_number':4543,'multiline':False]['text':' Now we need to get the Decimal128 out as a 128-bit integer','line_number':4548,'multiline':False]['text':' But Decimal128 does not support conversion to Int128.','line_number':4549,'multiline':False]['text':'','line_number':4550,'multiline':False]['text':' If we think the Decimal128 fits in the range, based on the maximum value, we try to','line_number':4551,'multiline':False]['text':' convert to int64 directly.','line_number':4552,'multiline':False]['text':' Try conversion to int64, it may fail but since it is easy we try this first.','line_number':4555,'multiline':False]['text':'','line_number':4556,'multiline':False]['text':' use int128_t where possible on gcc/clang','line_number':4580,'multiline':False]['text':' Edges','line_number':4676,'multiline':False]['text':' Generate and apply a mask to an integer, filling masked bits with 1;','line_number':4774,'multiline':False]['text':' bits from 0 to bits-1 will be set to 1. Other bits are left as-is.','line_number':4775,'multiline':False]['text':' for example: applyMask(0b00000000, 4) = 0b00001111','line_number':4776,'multiline':False]['text':' Some levels are discarded when sparsity does not divide current level','line_number':4791,'multiline':False]['text':' Discarded levels are replaced by the set of edges on the next level','line_number':4792,'multiline':False]['text':' Return true if level is stored','line_number':4793,'multiline':False]['text':' Generate a minCover recursively for the minimum set of edges covered','line_number':4809,'multiline':False]['text':' by [_rangeMin, _rangeMax]. Edges on a level discarded due to sparsity are','line_number':4810,'multiline':False]['text':' replaced with the edges from next level','line_number':4811,'multiline':False]['text':'*
 * OST-1 represents all ranges as inclusive, but MQL queries also have support for ranges that
 * exclude either bound. If the user query does not include the lower/upper bound, then narrow the
 * range by 1 on the proper end.
 *
 * This function is templated so that it can operate on the concrete OSTType struct for each
 * supported numeric type.
 ','line_number':4844,'multiline':True]['text':' namespace mongo','line_number':4988,'multiline':False]