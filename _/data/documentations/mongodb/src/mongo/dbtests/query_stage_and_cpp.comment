['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This file tests db/exec/and_*.cpp and RecordId invalidation.  RecordId invalidation forces a
 * fetch so we cannot test it outside of a dbtest.
 ','line_number':30,'multiline':True]['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':44,'multiline':False]['text':' IWYU pragma: keep','line_number':80,'multiline':False]['text':'*
     * Executes plan stage until EOF.  Returns number of results seen if execution reaches EOF
     * successfully. Throws on stage failure.
     ','line_number':141,'multiline':True]['text':'*
     * Gets the next result from 'stage'. Asserts that the returned working set member is fetched,
     * and that there are more results.
     ','line_number':158,'multiline':True]['text':' We failed to produce a result.','line_number':176,'multiline':False]['text':'','line_number':201,'multiline':False]['text':' Hash AND tests','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':'*
 * Delete a RecordId held by a hashed AND before the AND finishes evaluating. The AND should
 * return the result despite its deletion.
 ','line_number':205,'multiline':True]['text':' Foo <= 20.','line_number':233,'multiline':False]['text':' Bar >= 10.','line_number':239,'multiline':False]['text':' 'ah' reads the first child into its hash table: foo=20, foo=19, ..., foo=0','line_number':244,'multiline':False]['text':' in that order. Read half of them.','line_number':245,'multiline':False]['text':' Save state and delete one of the read objects.','line_number':252,'multiline':False]['text':' The deleted result should still be buffered inside the AND_HASH stage, so there should be','line_number':266,'multiline':False]['text':' no change in memory consumption.','line_number':267,'multiline':False]['text':' Now, finish up the AND. We expect 10 results. Although the deleted result is still','line_number':270,'multiline':False]['text':' buffered, the {bar: 1} index scan won't encounter the deleted document, and hence the','line_number':271,'multiline':False]['text':' document won't appear in the result set.','line_number':272,'multiline':False]['text':' Delete one of the "are we EOF?" lookahead results while the plan is yielded.','line_number':296,'multiline':False]['text':' Foo <= 20 (descending).','line_number':319,'multiline':False]['text':' Bar <= 19 (descending).','line_number':325,'multiline':False]['text':' First call to work reads the first result from the children. The first result for the','line_number':331,'multiline':False]['text':' first scan over foo is {foo: 20, bar: 20, baz: 20}. The first result for the second scan','line_number':332,'multiline':False]['text':' over bar is {foo: 19, bar: 19, baz: 19}.','line_number':333,'multiline':False]['text':' Delete 'deletedObj' from the collection.','line_number':338,'multiline':False]['text':' The deletion should not affect the amount of data buffered inside the AND_HASH stage.','line_number':352,'multiline':False]['text':' We expect that the deleted document doers not appear in our result set.','line_number':358,'multiline':False]['text':' An AND with two children.','line_number':376,'multiline':False]['text':' Foo <= 20','line_number':399,'multiline':False]['text':' Bar >= 10','line_number':405,'multiline':False]['text':' foo == bar == baz, and foo<=20, bar>=10, so our values are:','line_number':411,'multiline':False]['text':' foo == 10, 11, 12, 13, 14, 15. 16, 17, 18, 19, 20','line_number':412,'multiline':False]['text':' An AND with two children.','line_number':417,'multiline':False]['text':' Add large keys (512 bytes) to index of first child to cause','line_number':418,'multiline':False]['text':' internal buffer within hashed AND to exceed threshold (32MB)','line_number':419,'multiline':False]['text':' before gathering all requested results.','line_number':420,'multiline':False]['text':' Generate large keys for {foo: 1, big: 1} index.','line_number':431,'multiline':False]['text':' Lower buffer limit to 20 * sizeof(big) to force memory error','line_number':441,'multiline':False]['text':' before hashed AND is done reading the first child (stage has to','line_number':442,'multiline':False]['text':' hold 21 keys in buffer for Foo <= 20).','line_number':443,'multiline':False]['text':' Foo <= 20','line_number':447,'multiline':False]['text':' Bar >= 10','line_number':454,'multiline':False]['text':' An AND with three children.','line_number':466,'multiline':False]['text':' Add large keys (512 bytes) to index of last child to verify that','line_number':467,'multiline':False]['text':' keys in last child are not buffered','line_number':468,'multiline':False]['text':' Generate large keys for {baz: 1, big: 1} index.','line_number':479,'multiline':False]['text':' Lower buffer limit to 5 * sizeof(big) to ensure that','line_number':489,'multiline':False]['text':' keys in last child's index are not buffered. There are 6 keys','line_number':490,'multiline':False]['text':' that satisfy the criteria Foo <= 20 and Bar >= 10 and 5 <= baz <= 15.','line_number':491,'multiline':False]['text':' Foo <= 20','line_number':495,'multiline':False]['text':' Bar >= 10','line_number':501,'multiline':False]['text':' foo == bar == baz, and foo<=20, bar>=10, so our values are:','line_number':507,'multiline':False]['text':' foo == 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20.','line_number':508,'multiline':False]['text':' An AND with three children.','line_number':513,'multiline':False]['text':' Foo <= 20','line_number':536,'multiline':False]['text':' Bar >= 10','line_number':542,'multiline':False]['text':' 5 <= baz <= 15','line_number':547,'multiline':False]['text':' foo == bar == baz, and foo<=20, bar>=10, 5<=baz<=15, so our values are:','line_number':553,'multiline':False]['text':' foo == 10, 11, 12, 13, 14, 15.','line_number':554,'multiline':False]['text':' An AND with three children.','line_number':559,'multiline':False]['text':' Add large keys (512 bytes) to index of second child to cause','line_number':560,'multiline':False]['text':' internal buffer within hashed AND to exceed threshold (32MB)','line_number':561,'multiline':False]['text':' before gathering all requested results.','line_number':562,'multiline':False]['text':' We need 3 children because the hashed AND stage buffered data for','line_number':563,'multiline':False]['text':' N-1 of its children. If the second child is the last child, it will not','line_number':564,'multiline':False]['text':' be buffered.','line_number':565,'multiline':False]['text':' Generate large keys for {bar: 1, big: 1} index.','line_number':577,'multiline':False]['text':' Lower buffer limit to 10 * sizeof(big) to force memory error','line_number':588,'multiline':False]['text':' before hashed AND is done reading the second child (stage has to','line_number':589,'multiline':False]['text':' hold 11 keys in buffer for Foo <= 20 and Bar >= 10).','line_number':590,'multiline':False]['text':' Foo <= 20','line_number':594,'multiline':False]['text':' Bar >= 10','line_number':600,'multiline':False]['text':' 5 <= baz <= 15','line_number':605,'multiline':False]['text':' Stage execution should fail.','line_number':611,'multiline':False]['text':' An AND with an index scan that returns nothing.','line_number':618,'multiline':False]['text':' Foo <= 20','line_number':641,'multiline':False]['text':' Bar == 5.  Index scan should be eof.','line_number':647,'multiline':False]['text':' We check the "look ahead for EOF" here by examining the number of works required to','line_number':667,'multiline':False]['text':' hit EOF.  Our first call to work will pick up that bar==5 is EOF and the AND will EOF','line_number':668,'multiline':False]['text':' immediately.','line_number':669,'multiline':False]['text':' An AND that scans data but returns nothing.','line_number':674,'multiline':False]['text':' Foo >= 100','line_number':697,'multiline':False]['text':' Bar <= 100','line_number':702,'multiline':False]['text':' This is subtle and confusing.  We couldn't extract any keys from the elements with','line_number':705,'multiline':False]['text':' 'foo' in them so we would normally index them with the "nothing found" key.  We don't','line_number':706,'multiline':False]['text':' want to include that in our scan.','line_number':707,'multiline':False]['text':'*
 * SERVER-14607: Check that hash-based intersection works when the first
 * child returns fetched docs but the second child returns index keys.
 ','line_number':718,'multiline':True]['text':' Foo <= 20','line_number':744,'multiline':False]['text':' First child of the AND_HASH stage is a Fetch. The NULL in the','line_number':750,'multiline':False]['text':' constructor means there is no filter.','line_number':751,'multiline':False]['text':' Bar >= 10','line_number':756,'multiline':False]['text':' Check that the AndHash stage returns docs {foo: 10, bar: 10}','line_number':761,'multiline':False]['text':' through {foo: 20, bar: 20}.','line_number':762,'multiline':False]['text':'*
 * SERVER-14607: Check that hash-based intersection works when the first
 * child returns index keys but the second returns fetched docs.
 ','line_number':771,'multiline':True]['text':' Foo <= 20','line_number':797,'multiline':False]['text':' Bar >= 10','line_number':803,'multiline':False]['text':' Second child of the AND_HASH stage is a Fetch. The NULL in the','line_number':808,'multiline':False]['text':' constructor means there is no filter.','line_number':809,'multiline':False]['text':' Check that the AndHash stage returns docs {foo: 10, bar: 10}','line_number':814,'multiline':False]['text':' through {foo: 20, bar: 20}.','line_number':815,'multiline':False]['text':' Confirm exception is thrown when children contain the following WorkingSetMembers:','line_number':839,'multiline':False]['text':'     Child1:  Data','line_number':840,'multiline':False]['text':'     Child2:  NEED_TIME, FAILURE','line_number':841,'multiline':False]['text':' Confirm exception is thrown when children contain the following WorkingSetMembers:','line_number':867,'multiline':False]['text':'     Child1:  Data, FAILURE','line_number':868,'multiline':False]['text':'     Child2:  Data','line_number':869,'multiline':False]['text':' Confirm throws exception when children contain the following WorkingSetMembers:','line_number':903,'multiline':False]['text':'     Child1:  Data','line_number':904,'multiline':False]['text':'     Child2:  Data, FAILURE','line_number':905,'multiline':False]['text':'','line_number':940,'multiline':False]['text':' Sorted AND tests','line_number':941,'multiline':False]['text':'','line_number':942,'multiline':False]['text':'*
 * Delete a RecordId held by a sorted AND before the AND finishes evaluating.
 ','line_number':944,'multiline':True]['text':' Insert a bunch of data.','line_number':957,'multiline':False]['text':' Scan over foo == 1.','line_number':968,'multiline':False]['text':' Scan over bar == 1.','line_number':974,'multiline':False]['text':' Get the set of RecordIds in our collection to use later.','line_number':980,'multiline':False]['text':' We're making an assumption here that happens to be true because we clear out the','line_number':984,'multiline':False]['text':' collection before running this: increasing inserts have increasing RecordIds. This isn't','line_number':985,'multiline':False]['text':' true in general if the collection is not dropped beforehand.','line_number':986,'multiline':False]['text':' Sorted AND looks at the first child, which is an index scan over foo==1.','line_number':989,'multiline':False]['text':' The first thing that the index scan returns (due to increasing RecordId trick) is the','line_number':992,'multiline':False]['text':' very first insert, which should be the very first thing in data. Delete it.','line_number':993,'multiline':False]['text':' Proceed along, AND-ing results.','line_number':1000,'multiline':False]['text':' Move 'it' to a result that's yet to show up.','line_number':1021,'multiline':False]['text':' Remove a result that's coming up.','line_number':1025,'multiline':False]['text':' Get all results aside from the two we deleted.','line_number':1030,'multiline':False]['text':' An AND with three children.','line_number':1053,'multiline':False]['text':' Insert a bunch of data','line_number':1065,'multiline':False]['text':' Some data that'll show up but not be in all.','line_number':1067,'multiline':False]['text':' The needle in the haystack.  Only these should be returned by the AND.','line_number':1070,'multiline':False]['text':' Scan over foo == 1','line_number':1085,'multiline':False]['text':' bar == 1','line_number':1091,'multiline':False]['text':' baz == 1','line_number':1097,'multiline':False]['text':' An AND with an index scan that returns nothing.','line_number':1107,'multiline':False]['text':' Foo == 7.  Should be EOF.','line_number':1130,'multiline':False]['text':' Bar == 20, not EOF.','line_number':1136,'multiline':False]['text':' An AND that scans data but returns nothing.','line_number':1146,'multiline':False]['text':' Insert data with foo=7, bar==20, but nothing with both.','line_number':1159,'multiline':False]['text':' foo == 7.','line_number':1173,'multiline':False]['text':' bar == 20.','line_number':1179,'multiline':False]['text':' Verify that AND preserves the order of the last child.','line_number':1189,'multiline':False]['text':' Scan over foo == 1','line_number':1212,'multiline':False]['text':' Intersect with 7 <= bar < 10000','line_number':1218,'multiline':False]['text':'*
 * SERVER-14607: Check that sort-based intersection works when the first
 * child returns fetched docs but the second child returns index keys.
 ','line_number':1247,'multiline':True]['text':' Insert a bunch of data','line_number':1262,'multiline':False]['text':' Scan over foo == 1','line_number':1274,'multiline':False]['text':' First child of the AND_SORTED stage is a Fetch. The NULL in the','line_number':1280,'multiline':False]['text':' constructor means there is no filter.','line_number':1281,'multiline':False]['text':' bar == 1','line_number':1286,'multiline':False]['text':'*
 * SERVER-14607: Check that sort-based intersection works when the first
 * child returns index keys but the second returns fetched docs.
 ','line_number':1300,'multiline':True]['text':' Insert a bunch of data','line_number':1315,'multiline':False]['text':' Scan over foo == 1','line_number':1327,'multiline':False]['text':' bar == 1','line_number':1333,'multiline':False]['text':' Second child of the AND_SORTED stage is a Fetch. The NULL in the','line_number':1339,'multiline':False]['text':' constructor means there is no filter.','line_number':1340,'multiline':False]['text':' namespace QueryStageAnd','line_number':1383,'multiline':False]