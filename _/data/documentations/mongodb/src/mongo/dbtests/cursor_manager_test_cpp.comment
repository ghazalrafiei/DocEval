['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':75,'multiline':False]['text':' Do nothing.','line_number':108,'multiline':False]['text':' Create a mock ExpressionContext.','line_number':117,'multiline':False]['text':' Do nothing.','line_number':169,'multiline':False]['text':' Do nothing.','line_number':173,'multiline':False]['text':'*
 * Test that an attempt to kill a pinned cursor succeeds.
 ','line_number':177,'multiline':True]['text':' The original operation should have been interrupted since the cursor was pinned.','line_number':199,'multiline':False]['text':'*
 * Test that an attempt to kill a pinned cursor succeeds with more than one client.
 ','line_number':203,'multiline':True]['text':' Pin the cursor from one client.','line_number':210,'multiline':False]['text':' Set up another client to kill the cursor.','line_number':225,'multiline':False]['text':' Keep around a raw pointer for when we transfer ownership of killingClientOwned to the global','line_number':228,'multiline':False]['text':' current client.','line_number':229,'multiline':False]['text':' Need to swap the current client in order to make an operation context.','line_number':232,'multiline':False]['text':' The original operation should have been interrupted since the cursor was pinned.','line_number':240,'multiline':False]['text':'*
 * Test that client cursors time out and get deleted.
 ','line_number':244,'multiline':True]['text':'*
 * Test that pinned cursors do not get timed out.
 ','line_number':284,'multiline':True]['text':' The pin is still in scope, so it should not time out.','line_number':303,'multiline':False]['text':'*
 * A cursor can be left in the CursorManager in a killed state when a pinned cursor is interrupted
 * with an unusual error code (a code other than ErrorCodes::Interrupted or
 * ErrorCodes::CursorKilled). Verify that such cursors get deregistered and deleted on an attempt to
 * pin.
 ','line_number':308,'multiline':True]['text':' A cursor will stay alive, but be marked as killed, if it is interrupted with a code other','line_number':330,'multiline':False]['text':' than ErrorCodes::Interrupted or ErrorCodes::CursorKilled and then unpinned.','line_number':331,'multiline':False]['text':' The cursor should still be present in the manager.','line_number':335,'multiline':False]['text':' Pinning the cursor should fail with the same error code that interrupted the OpCtx. The','line_number':338,'multiline':False]['text':' cursor should no longer be present in the manager.','line_number':339,'multiline':False]['text':'*
 * Test that client cursors which have been marked as killed time out and get deleted.
 ','line_number':345,'multiline':True]['text':' A cursor will stay alive, but be marked as killed, if it is interrupted with a code other','line_number':364,'multiline':False]['text':' than ErrorCodes::Interrupted or ErrorCodes::CursorKilled and then unpinned.','line_number':365,'multiline':False]['text':' The cursor should still be present in the manager.','line_number':369,'multiline':False]['text':' Advance the clock to simulate time passing, and verify that the cursor times out.','line_number':372,'multiline':False]['text':'*
 * Test that using a cursor updates its time of last use.
 ','line_number':378,'multiline':True]['text':' Register a cursor which we will look at again.','line_number':385,'multiline':False]['text':' Register a cursor to immediately forget about, to make sure it will time out on a normal','line_number':400,'multiline':False]['text':' schedule.','line_number':401,'multiline':False]['text':' Advance the clock to simulate time passing.','line_number':413,'multiline':False]['text':' Touch the cursor with id 'usedCursorId' to advance its time of last use.','line_number':416,'multiline':False]['text':' We should be able to time out the unused cursor, but the one we used should stay alive.','line_number':419,'multiline':False]['text':' We should be able to time out the used cursor after one more millisecond.','line_number':425,'multiline':False]['text':'*
 * Test that a cursor cannot be timed out while in use, and that it's time of last use is updated
 * when it is unpinned.
 ','line_number':431,'multiline':True]['text':' Register a cursor which we will look at again.','line_number':439,'multiline':False]['text':' Advance the clock to simulate time passing.','line_number':452,'multiline':False]['text':' Make sure the pinned cursor does not time out, before or after unpinning it.','line_number':455,'multiline':False]['text':' Advance the clock to simulate more time passing, then assert that the now-inactive cursor','line_number':466,'multiline':False]['text':' times out.','line_number':467,'multiline':False]['text':'*
 * Test that a cursor correctly stores API parameters.
 ','line_number':473,'multiline':True]['text':'*
 * Test that cursors inherit the logical session id from their operation context
 ','line_number':501,'multiline':True]['text':' Cursors created on an op ctx without a session id have no session id.','line_number':505,'multiline':False]['text':' Cursors created on an op ctx with a session id have a session id.','line_number':513,'multiline':False]['text':'*
 * Test that a manager whose cursors do not have sessions does not return them.
 ','line_number':523,'multiline':True]['text':' Add a cursor with no session to the cursor manager.','line_number':527,'multiline':False]['text':' Retrieve all sessions active in manager - set should be empty.','line_number':532,'multiline':False]['text':'*
 * Test a manager that has one cursor running inside of a session.
 ','line_number':538,'multiline':True]['text':' Add a cursor with a session to the cursor manager.','line_number':542,'multiline':False]['text':' Retrieve all sessions active in manager - set should contain just lsid.','line_number':547,'multiline':False]['text':' Retrieve all cursors for this lsid - should be just ours.','line_number':553,'multiline':False]['text':' Remove the cursor from the manager.','line_number':559,'multiline':False]['text':' There should be no more cursor entries by session id.','line_number':563,'multiline':False]['text':'*
 * Test a manager with multiple cursors running inside of the same session.
 ','line_number':570,'multiline':True]['text':' Add two cursors on the same session to the cursor manager.','line_number':574,'multiline':False]['text':' Retrieve all sessions - set should contain just lsid.','line_number':583,'multiline':False]['text':' Retrieve all cursors for session - should be both cursors.','line_number':589,'multiline':False]['text':' Remove one cursor from the manager.','line_number':595,'multiline':False]['text':' Should still be able to retrieve the session.','line_number':599,'multiline':False]['text':' Should still be able to retrieve remaining cursor by session.','line_number':605,'multiline':False]['text':'*
 * Test a manager with multiple cursors running inside of different sessions.
 ','line_number':611,'multiline':True]['text':' Cursor with session 1.','line_number':621,'multiline':False]['text':' Cursor with session 2.','line_number':627,'multiline':False]['text':' Cursor with no session.','line_number':633,'multiline':False]['text':' Retrieve all sessions - should be both lsids.','line_number':639,'multiline':False]['text':' Retrieve cursors for each session - should be just one.','line_number':646,'multiline':False]['text':'*
 * Test that a CursorManager is registered with the global ServiceContext.
 ','line_number':656,'multiline':True]['text':'*
 * Test that a CursorManager is registered with a custom ServiceContext.
 ','line_number':664,'multiline':True]['text':'*
 * Test that a CursorManager is accessible via an OperationContext.
 ','line_number':672,'multiline':True]['text':' Remove the cursor from the manager and verify that we can't retrieve it.','line_number':697,'multiline':False]['text':' Cursor with operationKey 1.','line_number':710,'multiline':False]['text':' Cursor with operationKey 2.','line_number':717,'multiline':False]['text':' Cursor with no operation key.','line_number':724,'multiline':False]['text':' Retrieve cursors for each operation key - should be one for each.','line_number':730,'multiline':False]['text':' Retrieve cursors for both operation keys.','line_number':739,'multiline':False]['text':' Advance the clock and verify that the cursor times out.','line_number':757,'multiline':False]['text':' Verify that the timed out cursor is not returned when looking up by OperationKey.','line_number':763,'multiline':False]['text':' Mark the OperationContext as killed.','line_number':775,'multiline':False]['text':' A cursor will stay alive, but be marked as killed, if it is interrupted with a code other','line_number':778,'multiline':False]['text':' than ErrorCodes::Interrupted or ErrorCodes::CursorKilled and then unpinned.','line_number':779,'multiline':False]['text':' The cursor should still be present in the manager.','line_number':784,'multiline':False]['text':' Verify that the killed cursor is still returned when looking up by OperationKey.','line_number':787,'multiline':False]['text':' The results for cursorsForNamespace won't necessarily be the same as the order of insertion.','line_number':811,'multiline':False]['text':' Add a cursor for kTestNss.','line_number':822,'multiline':False]['text':' Get cursors for a different NamespaceString.','line_number':824,'multiline':False]['text':' namespace','line_number':830,'multiline':False]['text':' namespace mongo','line_number':831,'multiline':False]