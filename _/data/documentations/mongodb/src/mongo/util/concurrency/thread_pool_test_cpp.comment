['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]['text':' IWYU pragma: keep','line_number':39,'multiline':False]['text':' Destructor should reap leftover threads.','line_number':224,'multiline':False]['text':' This test is a little complicated. We need to ensure that the ThreadPool destructor runs','line_number':230,'multiline':False]['text':' while some thread is blocked running ThreadPool::join, to see that double-join is fatal in','line_number':231,'multiline':False]['text':' the pool destructor. To do this, we first wait for minThreads threads to have started. Then,','line_number':232,'multiline':False]['text':' we create and lock a mutex in the test thread, schedule a work item in the pool to lock that','line_number':233,'multiline':False]['text':' mutex, schedule an independent thread to call join, and wait for numIdleThreads to hit 0','line_number':234,'multiline':False]['text':' inside the test thread. When that happens, we know that the thread in the pool executing our','line_number':235,'multiline':False]['text':' mutex-lock is blocked waiting for the mutex, so the independent thread must be blocked inside','line_number':236,'multiline':False]['text':' of join(), until the pool thread finishes. At this point, if we destroy the pool, its','line_number':237,'multiline':False]['text':' destructor should trigger a fatal error due to double-join.','line_number':238,'multiline':False]['text':' We can't guarantee that ThreadPool::waitForIdle() is always called before','line_number':330,'multiline':False]['text':' ThreadPool::shutdown(). Introducing the following sleep increases the chances of such an','line_number':331,'multiline':False]['text':' ordering. However, this is a best-effort, and ThreadPool::shutdown() may still precede','line_number':332,'multiline':False]['text':' ThreadPool::waitForIdle on slow machines.','line_number':333,'multiline':False]['text':' namespace','line_number':342,'multiline':False]