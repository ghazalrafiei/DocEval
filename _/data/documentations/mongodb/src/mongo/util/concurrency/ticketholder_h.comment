['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Maintains and distributes tickets across operations from a limited pool of tickets. The ticketing
 * mechanism is required for global lock acquisition to reduce contention on storage engine
 * resources.
 ','line_number':55,'multiline':True]['text':'*
     * Adjusts the total number of tickets allocated for the ticket pool to 'newSize'.
     ','line_number':68,'multiline':True]['text':'*
     * Attempts to acquire a ticket without blocking.
     * Returns a ticket if one is available, and boost::none otherwise.
     ','line_number':73,'multiline':True]['text':'*
     * Attempts to acquire a ticket. Blocks until a ticket is acquired or the OperationContext
     * 'opCtx' is killed, throwing an AssertionException. If no OperationContext is provided, then
     * the operation is uninterruptible.
     ','line_number':79,'multiline':True]['text':'*
     * Attempts to acquire a ticket within a deadline, 'until'. Returns 'true' if a ticket is
     * acquired and 'false' if the deadline is reached, but the operation is retryable. Throws an
     * AssertionException if the OperationContext 'opCtx' is killed and no waits for tickets can
     * proceed. If no OperationContext is provided, then the operation is uninterruptible.
     ','line_number':86,'multiline':True]['text':'*
     * The total number of tickets allotted to the ticket pool.
     ','line_number':96,'multiline':True]['text':'*
     * Instantaneous number of tickets that are checked out by an operation.
     ','line_number':103,'multiline':True]['text':'*
     * Peak number of tickets checked out at once since the previous time this function was called.
     ','line_number':110,'multiline':True]['text':'*
     * 'Immediate' admissions don't need to acquire or wait for a ticket. However, they should
     * report to the TicketHolder for tracking purposes.
     *
     * Increments the count of 'immediate' priority admissions reported.
     ','line_number':115,'multiline':True]['text':'*
     * Returns the number of 'immediate' priority admissions, which always bypass ticket
     * acquisition.
     ','line_number':125,'multiline':True]['text':'*
     * Instantaneous number of tickets 'available' (not checked out by an operation) in the ticket
     * pool.
     ','line_number':135,'multiline':True]['text':'*
     * Instantaneous number of operations waiting in queue for a ticket.
     *
     * TODO SERVER-74082: Once the SemaphoreTicketHolder is removed, consider changing this metric
     * to int32_t.
     ','line_number':141,'multiline':True]['text':'*
     * The total number of operations that acquired a ticket, completed their work, and released the
     * ticket.
     ','line_number':149,'multiline':True]['text':'*
     * Statistics for queueing mechanisms in the TicketHolder implementations. The term "Queue" is a
     * loose abstraction for the way in which operations are queued when there are no available
     * tickets.
     ','line_number':155,'multiline':True]['text':'*
     * Releases a ticket back into the ticketing pool.
     ','line_number':172,'multiline':True]['text':'*
     * Fetches the queueing statistics corresponding to the 'admCtx'. All statistics that are queue
     * specific should be updated through the resulting 'QueueStats'.
     ','line_number':189,'multiline':True]['text':'*
     * Appends the standard statistics stored in QueueStats to BSONObjBuilder b;
     ','line_number':205,'multiline':True]['text':'*
 * RAII-style movable token that gets generated when a ticket is acquired and is automatically
 * released when going out of scope.
 ','line_number':286,'multiline':True]['text':'*
     * Returns whether or not a ticket is being held.
     ','line_number':320,'multiline':True]['text':'*
     * Discards the ticket without releasing it back to the ticketholder.
     ','line_number':331,'multiline':True]['text':' No copy constructors.','line_number':339,'multiline':False]['text':' namespace mongo','line_number':346,'multiline':False]