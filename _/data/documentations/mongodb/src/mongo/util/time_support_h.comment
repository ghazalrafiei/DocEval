['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Representation of a point in time, with millisecond resolution and capable
 * of representing all times representable by the BSON Date type.
 *
 * The epoch used for this type is the Posix Epoch (1970-01-01T00:00:00Z).
 ','line_number':56,'multiline':True]['text':'*
     * The largest representable Date_t.
     ','line_number':64,'multiline':True]['text':'*
     * The minimum representable Date_t.
     ','line_number':71,'multiline':True]['text':'*
     * Reads the system clock and returns a Date_t representing the present time.
     ','line_number':78,'multiline':True]['text':'*
     * Returns a Date_t from an integer number of milliseconds since the epoch.
     ','line_number':83,'multiline':True]['text':'*
     * Returns a Date_t from a duration since the epoch.
     ','line_number':90,'multiline':True]['text':'*
     * Constructs a Date_t representing the epoch.
     ','line_number':98,'multiline':True]['text':'*
     * Constructs a Date_t from a system clock time point.
     ','line_number':103,'multiline':True]['text':'*
     * Returns a string representation of the date.
     *
     * If isFormattable() returns true for this date, the string will be equivalent to the one
     * returned by dateToISOStringLocal(*this).  Otherwise, returns the string Date(...) where
     * ... is the string representation in base 10 of the number of milliseconds since the epoch
     * that this date represents (negative for pre-epoch).
     ','line_number':108,'multiline':True]['text':'*
     * Returns a representation of this date as a C time_t.
     *
     * Raises an exception if this date is not representable as a time_t on the system.
     ','line_number':118,'multiline':True]['text':'*
     * DEPRECATED. This is a deprecated form of toMillisSinceEpoch().
     ','line_number':125,'multiline':True]['text':'*
     * DEPRECATED. This is a deprecated form of toMillisSinceEpoch() that casts the result to
     * unsigned long long.  It is leftover because sometimes objects of logical type Timestamp
     * get stored in BSON documents (or in-memory structures) with effective type Date_t, and
     * it is necessary to convert between the two.
     ','line_number':132,'multiline':True]['text':'*
     * Returns a duration representing the time since the epoch represented by this Date_t.
     ','line_number':142,'multiline':True]['text':'*
     * Returns the number of milliseconds since the epoch represented by this Date_t.
     ','line_number':149,'multiline':True]['text':'
     * Returns a system clock time_point representing the same point in time as this Date_t.
     * Warning: careful when using with Date_t::max() as it can have a value that is bigger than
     * time_point can store.
     ','line_number':156,'multiline':True]['text':'*
     * Returns true if this Date_t is in the range of Date_ts that can be formatted as calendar
     * dates.  This property is guaranteed to be true for all dates from the epoch,
     * 1970-01-01T00:00:00.000Z, through 3000-12-31T23:59:59.000Z on 64-bit systems and through
     * 2038-01-19T03:14:07.000Z on 32-bit systems.
     ','line_number':163,'multiline':True]['text':'*
     * Implicit conversion operator to system clock time point.  Enables use of Date_t with
     * condition_variable::wait_until.
     * Warning: careful when using with Date_t::max() as it can have a value that is bigger than
     * time_point can store.
     ','line_number':171,'multiline':True]['text':'*
     * Only exposed for testing.  See lastNow()
     ','line_number':237,'multiline':True]['text':'*
     * Returns the last time fetched from Date_t::now()
     *
     * Note that this is a private semi-implementation detail for BackgroundThreadClockSource.  Use
     * svc->getFastClockSource()->now() over calling this method.
     *
     * If you think you have another use for it, please reconsider, or at least consider very
     * carefully as correctly using it is complicated.
     ','line_number':251,'multiline':True]['text':' Holds the last value returned from now()','line_number':264,'multiline':False]['text':'* Fill with formatted `date`, either in `local` or UTC. ','line_number':270,'multiline':True]['text':'*
     * Fill with formatted `date`, in modified ctime format.
     * Like ctime, but newline and year removed, and milliseconds added.
     ','line_number':273,'multiline':True]['text':'*
 * Uses a format similar to, but incompatable with ISO 8601
 * to produce UTC based datetimes suitable for use in filenames.
 ','line_number':292,'multiline':True]['text':'* @{ ','line_number':298,'multiline':True]['text':'*
 * Formats "date" in 3 formats to 3 kinds of output.
 * Function variants are provided to produce ISO local, ISO UTC, or modified ctime formats.
 * The ISO formats are according to the ISO 8601 extended form standard, including date and
 * time with a milliseconds decimal component.
 * Modified ctime format is like `ctime`, but with milliseconds and no year.
 *     "2013-07-23T18:42:14.072Z"       // *ToISOStringUTC
 *     "2013-07-23T18:42:14.072-05:00"  // *ToISOStringLocal
 *     "Wed Oct 31 13:34:47.996"        // *ToCtimeString (modified ctime)
 * Output can be a std::string, or put to a std::ostream.
 ','line_number':299,'multiline':True]['text':'* @} ','line_number':316,'multiline':True]['text':'*
 * Parses a Date_t from an ISO 8601 std::string representation.
 *
 * Sample formats: "2013-07-23T18:42:14.072-05:00"
 *                 "2013-07-23T18:42:14.072Z"
 *
 * Local times are currently not supported.
 ','line_number':318,'multiline':True]['text':' Don't reset < the max sleep','line_number':342,'multiline':False]['text':'*
     * testing-only function. used in dbtests/basictests.cpp
     ','line_number':348,'multiline':True]['text':' Parameters','line_number':356,'multiline':False]['text':' Last sleep information','line_number':360,'multiline':False]['text':' DO NOT TOUCH except for testing','line_number':365,'multiline':False]['text':'* Date_t is milliseconds since epoch ','line_number':371,'multiline':True]['text':' these are so that if you use one of them compilation will fail','line_number':377,'multiline':False]['text':' Find minimum system timer resolution of OS','line_number':383,'multiline':False]['text':' namespace mongo','line_number':386,'multiline':False]