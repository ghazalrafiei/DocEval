['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Test FutureContinuationResult<Func, Args...>:','line_number':55,'multiline':False]['text':' match.','line_number':68,'multiline':False]['text':' SFINAE-failure.','line_number':69,'multiline':False]['text':' Don't allow banned conversions:','line_number':71,'multiline':False]['text':' This isn't currently allowed for implementation reasons, but it isn't fundamentally undesirable.','line_number':89,'multiline':False]['text':' We may want to allow it at some point.','line_number':90,'multiline':False]['text':' https://developercommunity.visualstudio.com/content/problem/507821/is-constructible.html','line_number':92,'multiline':False]['text':' Check the return types of then-chaining a Future with a function that returns a SemiFuture or an','line_number':96,'multiline':False]['text':' ExecutorFuture.','line_number':97,'multiline':False]['text':'','line_number':106,'multiline':False]['text':'','line_number':109,'multiline':False]['text':'','line_number':112,'multiline':False]['text':'','line_number':115,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'','line_number':122,'multiline':False]['text':'','line_number':125,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' Check deduction guides:','line_number':133,'multiline':False]['text':'','line_number':141,'multiline':False]['text':'','line_number':144,'multiline':False]['text':'','line_number':147,'multiline':False]['text':' Future() and Future(status) are both banned even though they could resolve to Future<void>','line_number':156,'multiline':False]['text':' It just seems too likely to lead to mistakes.','line_number':157,'multiline':False]['text':' sanity checks of ctadCheck: (watch those watchmen!)','line_number':168,'multiline':False]['text':' This is the motivating case for SharedStateBase::isJustForContinuation. Without that logic, there','line_number':174,'multiline':False]['text':' would be a long chain of SharedStates, growing longer with each recursion. That logic exists to','line_number':175,'multiline':False]['text':' limit it to a fixed-size chain.','line_number':176,'multiline':False]['text':' This tests for a bug in an earlier implementation of isJustForContinuation. Due to an off-by-one,','line_number':189,'multiline':False]['text':' it would replace the "then" continuation's SharedState. A different type is used for the return','line_number':190,'multiline':False]['text':' from then to cause it to fail a checked_cast close to the bug in debug builds.','line_number':191,'multiline':False]['text':' Note, this is intentionally somewhat racy. async() is defined to sleep 100ms before running','line_number':218,'multiline':False]['text':' the function so it will generally test blocking in the final get(). Under TSAN the sleep is','line_number':219,'multiline':False]['text':' removed to allow it to find more interesting interleavings, and give it a better chance at','line_number':220,'multiline':False]['text':' detecting data races.','line_number':221,'multiline':False]['text':' Note, this is intentionally somewhat racy. async() is defined to sleep 100ms before running','line_number':251,'multiline':False]['text':' the function so it will generally test blocking in the final get(). Under TSAN the sleep is','line_number':252,'multiline':False]['text':' removed to allow it to find more interesting interleavings, and give it a better chance at','line_number':253,'multiline':False]['text':' detecting data races.','line_number':254,'multiline':False]['text':' Note, this is intentionally somewhat racy. async() is defined to sleep 100ms before running','line_number':275,'multiline':False]['text':' the function so the first batch of futures will generally block before getting the value is','line_number':276,'multiline':False]['text':' emplaced, and the second batch will happen around the same time. In all cases the final batch','line_number':277,'multiline':False]['text':' happen after the emplaceValue(), but roughly at the same time. Under TSAN the sleep is','line_number':278,'multiline':False]['text':' removed to allow it to find more interesting interleavings, and give it a better chance at','line_number':279,'multiline':False]['text':' detecting data races.','line_number':280,'multiline':False]['text':' Note, this is intentionally somewhat racy. async() is defined to sleep 100ms before running','line_number':310,'multiline':False]['text':' the function so the first batch of futures will generally block before getting the value is','line_number':311,'multiline':False]['text':' emplaced, and the second batch will happen around the same time. In all cases the final batch','line_number':312,'multiline':False]['text':' happen after the emplaceValue(), but roughly at the same time. Under TSAN the sleep is','line_number':313,'multiline':False]['text':' removed to allow it to find more interesting interleavings, and give it a better chance at','line_number':314,'multiline':False]['text':' detecting data races.','line_number':315,'multiline':False]['text':' Make sure we actually die if someone throws from the getAsync callback.','line_number':357,'multiline':False]['text':'','line_number':358,'multiline':False]['text':' With gcc 5.8 we terminate, but print "terminate() called. No exception is active". This works in','line_number':359,'multiline':False]['text':' clang and gcc 7, so hopefully we can change the death-test search string to "die die die!!!" when','line_number':360,'multiline':False]['text':' we upgrade the toolchain.','line_number':361,'multiline':False]['text':' namespace','line_number':367,'multiline':False]['text':' namespace mongo','line_number':368,'multiline':False]