['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Use forStorage as the default serializing rule','line_number':66,'multiline':False]['text':' We want everything in the DatabaseName (tenantId, db) to be present in the serialized output','line_number':75,'multiline':False]['text':' to prevent loss of information in the prevalidated context.','line_number':76,'multiline':False]['text':' tenantId came from either a $tenant field or security token.','line_number':96,'multiline':False]['text':' fallthrough','line_number':100,'multiline':False]['text':' tenantId came from the prefix.','line_number':110,'multiline':False]['text':' fallthrough','line_number':115,'multiline':False]['text':' If we fail to parse an OID, either the size of the substring is incorrect, or there is an','line_number':135,'multiline':False]['text':' invalid character. This indicates that the db has the "_" character, but it does not act','line_number':136,'multiline':False]['text':' as a delimeter for a tenantId prefix.','line_number':137,'multiline':False]['text':' Use forStorage as the default deserializing rule','line_number':169,'multiline':False]['text':' If there is a tenantId, expect that it's included in the DB string, and that the tenantId','line_number':180,'multiline':False]['text':' field passed will be empty.','line_number':181,'multiline':False]['text':' Assumes that we are passing in validated and correct values for fields, and skip all checks.','line_number':185,'multiline':False]['text':' TenantId could be prefixed, or passed in separately (or both) and namespace is always','line_number':202,'multiline':False]['text':' constructed with the tenantId separately.','line_number':203,'multiline':False]['text':' we only get here if we are processing a Command Request.  We disregard the feature flag in','line_number':216,'multiline':False]['text':' this case, essentially letting the request dictate the state of the feature.','line_number':217,'multiline':False]['text':' We received a tenantId from $tenant or the security token.','line_number':219,'multiline':False]['text':' fallthrough','line_number':223,'multiline':False]['text':' We received the tenantId from the prefix.','line_number':252,'multiline':False]['text':' TenantId always prefix in the passed `db` for durable catalog. This method below checks for','line_number':262,'multiline':False]['text':' multitenancy and will either return a DatabaseName with (tenantId, nonPrefixedDb) or','line_number':263,'multiline':False]['text':' (none, prefixedDb).','line_number':264,'multiline':False]['text':' Internally, CollectionCatalog still keys against DatabaseName but needs to address all','line_number':270,'multiline':False]['text':' tenantIds when pattern matching by passing in boost::none.','line_number':271,'multiline':False]['text':' TenantId always prefix in the error message. This method returns either (tenantId,','line_number':285,'multiline':False]['text':' nonPrefixedDb) or (none, prefixedDb) depending on gMultitenancySupport flag.','line_number':286,'multiline':False]['text':' namespace mongo','line_number':290,'multiline':False]