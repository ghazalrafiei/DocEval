['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Environment implementation','line_number':46,'multiline':False]['text':'* Get the value at Key.  Note that we should not be able to add empty values to the
 *  environment, so we don't check for that here ','line_number':57,'multiline':True]['text':'* Set the Value in our Environment.  Always disallow empty values ','line_number':74,'multiline':True]['text':' 1. Make sure value is not empty','line_number':76,'multiline':False]['text':' 2. Save old values','line_number':81,'multiline':False]['text':' 3. Add value to be added','line_number':84,'multiline':False]['text':' 4. Validate only if our environment is already valid','line_number':87,'multiline':False]['text':' 5. Revert to old values if this was invalid','line_number':91,'multiline':False]['text':'* Removes a Value from our Environment ','line_number':100,'multiline':True]['text':' 1. Save old values','line_number':102,'multiline':False]['text':' 2. Remove value to be removed','line_number':105,'multiline':False]['text':' 3. Validate only if our environment is already valid','line_number':108,'multiline':False]['text':' 4. Revert to old values if this was invalid','line_number':112,'multiline':False]['text':'* Set the default Value for the given Key in our Environment.  Always disallow empty values ','line_number':121,'multiline':True]['text':' 1. Make sure value is not empty','line_number':123,'multiline':False]['text':' 2. Disallow modifying defaults after calling validate on this Environment','line_number':128,'multiline':False]['text':' 3. Add this value to our defaults','line_number':134,'multiline':False]['text':'* Set all the Values from the source Environment in our Environment.  Does not check for empty
 *  values as the source Environment should not have been allowed to have any ','line_number':140,'multiline':True]['text':' 1. Save old values','line_number':143,'multiline':False]['text':' 2. Add values to be added','line_number':146,'multiline':False]['text':' 3. Validate only if our environment is already valid','line_number':154,'multiline':False]['text':' 4. Revert to old values if this was invalid','line_number':158,'multiline':False]['text':'* Validate the Environment by iterating over all our constraints and calling them on our
 *  Environment
 ','line_number':167,'multiline':True]['text':' 1. Iterate and check all KeyConstraints','line_number':171,'multiline':False]['text':' 2. Iterate and check all Constraints','line_number':181,'multiline':False]['text':' 3. Our Environment is now valid.  Record this if we should and return success','line_number':190,'multiline':False]['text':'* Implementation of legacy interface to be consistent with
 *  boost::program_options::variables_map during the transition period
 *
 *  boost::program_options::variables_map inherits the count function from std::map, which
 *  returns 1 if the value is set, and 0 if it is not set
 ','line_number':197,'multiline':True]['text':' Debugging ','line_number':222,'multiline':True]['text':' Converts a map of values with dotted key names to a BSONObj with sub objects.','line_number':233,'multiline':False]['text':' 1. Check for dotted field names and call valueMapToBSON recursively.','line_number':234,'multiline':False]['text':' 2. Append the actual value to our builder if we did not find a dot in our key name.','line_number':235,'multiline':False]['text':' 1. Check for dotted field names and call valueMapToBSON recursively.','line_number':243,'multiline':False]['text':' NOTE: this code depends on the fact that std::map is sorted','line_number':244,'multiline':False]['text':'','line_number':245,'multiline':False]['text':' EXAMPLE:','line_number':246,'multiline':False]['text':' The map:','line_number':247,'multiline':False]['text':' {','line_number':248,'multiline':False]['text':'     "var1.dotted1" : false,','line_number':249,'multiline':False]['text':'     "var2" : true,','line_number':250,'multiline':False]['text':'     "var1.dotted2" : 6','line_number':251,'multiline':False]['text':' }','line_number':252,'multiline':False]['text':'','line_number':253,'multiline':False]['text':' Gets sorted by keys as:','line_number':254,'multiline':False]['text':' {','line_number':255,'multiline':False]['text':'     "var1.dotted1" : false,','line_number':256,'multiline':False]['text':'     "var1.dotted2" : 6,','line_number':257,'multiline':False]['text':'     "var2" : true','line_number':258,'multiline':False]['text':' }','line_number':259,'multiline':False]['text':'','line_number':260,'multiline':False]['text':' Which means when we see the "var1" prefix, we can iterate until we see either a name','line_number':261,'multiline':False]['text':' without a dot or without "var1" as a prefix, aggregating its fields in a new map as','line_number':262,'multiline':False]['text':' we go.  Because the map is sorted, once we see a name without a dot or a "var1"','line_number':263,'multiline':False]['text':' prefix we know that we've seen everything with "var1" as a prefix and can recursively','line_number':264,'multiline':False]['text':' build the entire sub object at once using our new map (which is the only way to make','line_number':265,'multiline':False]['text':' a single coherent BSON sub object using this append only builder).','line_number':266,'multiline':False]['text':'','line_number':267,'multiline':False]['text':' The result of this function for this example should be a BSON object of the form:','line_number':268,'multiline':False]['text':' {','line_number':269,'multiline':False]['text':'     "var1" : {','line_number':270,'multiline':False]['text':'         "dotted1" : false,','line_number':271,'multiline':False]['text':'         "dotted2" : 6','line_number':272,'multiline':False]['text':'     },','line_number':273,'multiline':False]['text':'     "var2" : true','line_number':274,'multiline':False]['text':' }','line_number':275,'multiline':False]['text':' Check to see if this key name is dotted','line_number':277,'multiline':False]['text':' Get the name of the "section" that we are currently iterating.  This will be','line_number':280,'multiline':False]['text':' the name of our sub object.','line_number':281,'multiline':False]['text':' Build a map of the "section" that we are iterating to be passed in a','line_number':284,'multiline':False]['text':' recursive call.','line_number':285,'multiline':False]['text':' Here we know that the key at it_next has a dot and has the prefix we are','line_number':293,'multiline':False]['text':' currently creating a sub object for.  Since that means we will definitely','line_number':294,'multiline':False]['text':' process that element in this loop, advance the outer for loop iterator here.','line_number':295,'multiline':False]['text':' Add the value to our section map with a key of whatever is after the dot','line_number':298,'multiline':False]['text':' since the section name itself will be part of our sub object builder.','line_number':299,'multiline':False]['text':' Peek at the next value for our iterator and check to see if we've finished.','line_number':302,'multiline':False]['text':' Look for a dot for our next iteration.','line_number':309,'multiline':False]['text':' Use the section name in our object builder, and recursively call','line_number':316,'multiline':False]['text':' valueMapToBSON with our sub map with keys that have the section name removed.','line_number':317,'multiline':False]['text':' Our iterator is currently on the last field that matched our dot and prefix, so','line_number':322,'multiline':False]['text':' continue to the next loop iteration.','line_number':323,'multiline':False]['text':' 2. Append the actual value to our builder if we did not find a dot in our key name.','line_number':327,'multiline':False]['text':' boost po uses empty string for flags like --quiet','line_number':332,'multiline':False]['text':' TODO: Remove this when we remove boost::program_options','line_number':333,'multiline':False]['text':' Other types should not be produced by MOE.','line_number':402,'multiline':False]['text':' namespace','line_number':414,'multiline':False]['text':' namespace optionenvironment','line_number':432,'multiline':False]['text':' namespace mongo','line_number':433,'multiline':False]