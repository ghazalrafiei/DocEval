['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':60,'multiline':False]['text':' IWYU pragma: keep','line_number':75,'multiline':False]['text':' IWYU pragma: no_include "boost/program_options/detail/parsers.hpp"','line_number':76,'multiline':False]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':77,'multiline':False]['text':' IWYU pragma: no_include "boost/iostreams/detail/error.hpp"','line_number':78,'multiline':False]['text':' IWYU pragma: no_include "boost/iostreams/detail/streambuf/indirect_streambuf.hpp"','line_number':79,'multiline':False]['text':' IWYU pragma: keep','line_number':87,'multiline':False]['text':' IWYU pragma: keep','line_number':95,'multiline':False]['text':' IWYU pragma: keep','line_number':114,'multiline':False]['text':' The following section contains utility functions that convert between the various objects','line_number':142,'multiline':False]['text':' we need to deal with while parsing command line options.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' These conversions are different depending on the data source because our current','line_number':145,'multiline':False]['text':' implementation uses boost::program_options for the command line and INI files and the','line_number':146,'multiline':False]['text':' yaml-cpp YAML parser for YAML config files.  Our destination storage in both cases is an','line_number':147,'multiline':False]['text':' Environment which stores Value objects.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' 1. YAML Config Files','line_number':150,'multiline':False]['text':'     The YAML parser parses a YAML config file into a YAML::Node.  Therefore, we need:','line_number':151,'multiline':False]['text':'         a. A function to convert a YAML::Node to a Value (YAMLNodeToValue)','line_number':152,'multiline':False]['text':'         b. A function to iterate a YAML::Node, convert the leaf Nodes to Values, and add','line_number':153,'multiline':False]['text':'            them to our Environment (addYAMLNodesToEnvironment)','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':' 2. INI Config Files and command line','line_number':156,'multiline':False]['text':'     The boost::program_options parsers store their output in a','line_number':157,'multiline':False]['text':'     boost::program_options::variables_map.  Therefore, we need:','line_number':158,'multiline':False]['text':'         a. A function to convert a boost::any to a Value (boostAnyToValue)','line_number':159,'multiline':False]['text':'         b. A function to iterate a variables_map, convert the boost::any elements to','line_number':160,'multiline':False]['text':'            Values, and add them to our Environment (addBoostVariablesToEnvironment)','line_number':161,'multiline':False]['text':' Attempts to convert a string to a value of the given type.','line_number':163,'multiline':False]['text':' XXX: should not get here ','line_number':249,'multiline':True]['text':' Convert a boost::any to a Value.  See comments at the beginning of this section.','line_number':254,'multiline':False]['text':' We should not be telling boost about numerical type information.  Instead, for','line_number':268,'multiline':False]['text':' any numerical type we tell boost to read a string value and parse it manually,','line_number':269,'multiline':False]['text':' since boost's parsing is not consistent with ours.  See SERVER-14110.','line_number':270,'multiline':False]['text':' We already checked the type, so this is just a sanity check','line_number':285,'multiline':False]['text':' Returns true if the option for the given key is a StringMap option, and false otherwise','line_number':292,'multiline':False]['text':' Searches a YAML node for configuration expansion directives such as:
 * __rest: https://example.com/path?query=val
 * __exec: '/usr/bin/getConfig param'
 *
 * and optionally the fields `type`, `trim`, `digest`, and `digest_key`.
 *
 * If the field pairing `trim: whitespace` is present,
 * then the process() method will have standard ctype spaces removed from
 * both the front end end of the returned value.
 *
 * If the field pairing `type: yaml` is present (valid only the top-level node)
 * then the process() method will parse any string provided to it as YAML.
 * If the field is not present, or is set to `string`, then process will
 * encapsulate any provided string in a YAML String Node.
 *
 * If the fields `digest` and `digest_key` are present (both a co-required)
 * then the result of the expansion will be hashed (post trimming)
 * using SHA256-HMAC. If the resulting digest does not match expectation,
 * the expansion will be considered to have failed.
 *
 * If no configuration expansion directive is found, the constructor will
 * uassert with ErrorCodes::NoSuchKey.
 ','line_number':309,'multiline':True]['text':' Not this kind of expansion block.','line_number':362,'multiline':False]['text':' Parse optional fields, keeping track of how many we've handled.','line_number':391,'multiline':False]['text':' If there are additional (unknown) fields beyond that, raise an error.','line_number':392,'multiline':False]['text':'*
     * Optionally trim whitespace from the result of an expansion,
     * and either wrap it as a YAML string node, or process it as a
     * YAML blob.
     ','line_number':491,'multiline':True]['text':' The type of expansion represented.','line_number':548,'multiline':False]['text':' Whether this expansion represents a single value, or structured YAML.','line_number':555,'multiline':False]['text':' Whether the result of the expansion action should be trimmed for whitespace.','line_number':562,'multiline':False]['text':' Expect https:// URLs unless we can be sure we're talking to localhost.','line_number':581,'multiline':False]['text':' Attempts to parse configuration expansion directives from a config block.
 *
 * If a __rest configuration expansion directive is found,
 * mongo::HttpClient will be invoked to fetch the resource via GET request.
 *
 * If an __exec configuration expansion directive is found,
 * mongo::shellExec() will be invoked to execute the process.
 *
 * See the comment for class ConfigExpandNode for more details.
 ','line_number':607,'multiline':True]['text':' Hard-cap shell expansion at 128MB','line_number':648,'multiline':False]['text':' Convert a YAML::Node to a Value.  See comments at the beginning of this section.','line_number':662,'multiline':False]['text':' 'canonicalKey' holds the dotted name that should be used in the result Environment.','line_number':663,'multiline':False]['text':' This ensures that both canonical and deprecated dotted names in the configuration','line_number':664,'multiline':False]['text':' are mapped to the canonical name.','line_number':665,'multiline':False]['text':' The logic below should ensure that we don't use this uninitialized, but we need to','line_number':674,'multiline':False]['text':' initialize it here to avoid a compiler warning.  Initializing it to a "Bool" since','line_number':675,'multiline':False]['text':' that's the most restricted type we have and is most likely to result in an early','line_number':676,'multiline':False]['text':' failure if we have a logic error.','line_number':677,'multiline':False]['text':' The config file had a ":" as the first non whitespace character on a line','line_number':680,'multiline':False]['text':' Get expected type','line_number':687,'multiline':False]['text':' Handle multi keys','line_number':720,'multiline':False]['text':' Handle a sub map as a value','line_number':741,'multiline':False]['text':' Because the object returned by dereferencing the `YAMLNode` iterator is an emphemeral','line_number':771,'multiline':False]['text':' proxy value, the objects within it do not get lifetime extension when referred by','line_number':772,'multiline':False]['text':' reference. By making `elementVal` hold a copy of the element, we avoid a bug, found','line_number':773,'multiline':False]['text':' by ASAN, where `elementVal` will be an invalid reference immediately after its','line_number':774,'multiline':False]['text':' creation.','line_number':775,'multiline':False]['text':' else not an expansion block.','line_number':789,'multiline':False]['text':' Our YAML parser reads everything as a string, so we need to parse it ourselves.','line_number':806,'multiline':False]['text':' Trim off the short option from our name so we can look it up correctly in our map','line_number':824,'multiline':False]['text':' If this is really a StringMap, try to split on "key=value" for each element','line_number':857,'multiline':False]['text':' in our StringVector','line_number':858,'multiline':False]['text':' Make sure we aren't setting an option to two different values','line_number':878,'multiline':False]['text':' Add all the values in the given variables_map to our environment.  See comments at the','line_number':913,'multiline':False]['text':' beginning of this section.','line_number':914,'multiline':False]['text':' Add all the values in the given YAML Node to our environment.  See comments at the','line_number':945,'multiline':False]['text':' beginning of this section.','line_number':946,'multiline':False]['text':' Don't return an error on empty config files','line_number':958,'multiline':False]['text':' Expanded fine, but disallow recursion.','line_number':966,'multiline':False]['text':' else not an expansion block.','line_number':971,'multiline':False]['text':' We are at the top level, so the full specifier is just the current field name','line_number':986,'multiline':False]['text':' If our field name is "value", assume this contains the value for the parent','line_number':989,'multiline':False]['text':' If this is not a special field name, and we are in a sub object, append our','line_number':994,'multiline':False]['text':' current fieldName to the selector for the sub object we are traversing','line_number':995,'multiline':False]['text':' Avoid potential double-expand in YAMLNodeToValue by clearing configExpand per-element.','line_number':1001,'multiline':False]['text':' else not an expansion block.','line_number':1011,'multiline':False]['text':' Possible if using non-strict parsing.','line_number':1033,'multiline':False]['text':' Only add the value if it is not empty.  YAMLNodeToValue will set the','line_number':1047,'multiline':False]['text':' optionValue to an empty Value if we should not set it in the Environment.','line_number':1048,'multiline':False]['text':'*
 * For all options that we registered as composable, combine the values from source and dest
 * and set the result in dest.  Note that this only works for options that are registered as
 * vectors of strings.
 ','line_number':1068,'multiline':True]['text':' Only do something if our source environment has something to add','line_number':1095,'multiline':False]['text':' Append sourceValue on the end of destValue','line_number':1105,'multiline':False]['text':' Set the resulting value in our output environment','line_number':1108,'multiline':False]['text':' Only do something if our source environment has something to add','line_number':1127,'multiline':False]['text':' Iterate sourceValue and add elements to destValue','line_number':1137,'multiline':False]['text':' Set the resulting value in our output environment','line_number':1144,'multiline':False]['text':'*
 * For all options that have constraints, add those constraints to our environment so that
 * they run when the environment gets validated.
 ','line_number':1166,'multiline':True]['text':'*
 *  Remove any options of type "Switch" that are set to false.  This is needed because boost
 *  defaults switches to false, and we need to be able to tell the difference between
 *  whether an option is set explicitly to false in config files or not present at all.
 ','line_number':1187,'multiline':True]['text':' namespace','line_number':1225,'multiline':False]['text':'*
 * This function delegates the command line parsing to boost program_options.
 *
 * 1. Extract the boost readable option descriptions and positional option descriptions from the
 * OptionSection
 * 2. Passes them to the boost command line parser
 * 3. Copy everything from the variables map returned by boost into the Environment
 ','line_number':1227,'multiline':True]['text':' Need to convert to an argc and a vector of char* since that is what','line_number':1242,'multiline':False]['text':' boost::program_options expects as input to its command line parser','line_number':1243,'multiline':False]['text':' The function boost::program_options makes the assumption there is at','line_number':1252,'multiline':False]['text':' least one argument passed (usually the executable). When no options are','line_number':1253,'multiline':False]['text':' passed to the executable we're left with an argc value of 0 and an','line_number':1254,'multiline':False]['text':' empty argv_buffer vector from our post-processing above.','line_number':1255,'multiline':False]['text':'','line_number':1256,'multiline':False]['text':' This simply ensures that we always have at least one argument for','line_number':1257,'multiline':False]['text':' boost::program_options','line_number':1258,'multiline':False]['text':'*
     * Style options for boost command line parser
     *
     * unix_style is an alias for a group of basic style options.  We are deviating from that
     * base style in the following ways:
     *
     * 1. Don't allow guessing - '--dbpat' != '--dbpath'
     * 2. Don't allow sticky - '-hf' != '-h -f'
     * 3. Allow long disguises - '--dbpath' == '-dbpath'
     *
     * In some executables, we are using multiple 'v' options to set the verbosity (e.g. '-vvv')
     * To make this work, we need to allow long disguises and disallow guessing.
     ','line_number':1264,'multiline':True]['text':' This is needed because "switches" default to false in boost, and we don't want to','line_number':1314,'multiline':False]['text':' erroneously think that they were present but set to false in a config file.','line_number':1315,'multiline':False]['text':'*
 * This function delegates the INI config parsing to boost program_options.
 *
 * 1. Extract the boost readable option descriptions from the OptionSection
 * 2. Passes them to the boost config file parser
 * 3. Copy everything from the variables map returned by boost into the Environment
 ','line_number':1324,'multiline':True]['text':'*
 * This function delegates the YAML config parsing to the third party YAML parser.  It does no
 * error checking other than the parse error checking done by the YAML parser.
 ','line_number':1364,'multiline':True]['text':' The YAML parser is very forgiving, and for the INI config files we've parsed so far using','line_number':1385,'multiline':False]['text':' the YAML parser, the YAML parser just slurps the entire config file into a single string','line_number':1386,'multiline':False]['text':' rather than erroring out.  Thus, we assume that having a scalar (string) as the root node','line_number':1387,'multiline':False]['text':' means that this is not meant to be a YAML config file, since even a very simple YAML','line_number':1388,'multiline':False]['text':' config file should be parsed as a Map, and thus "config.IsScalar()" would return false.','line_number':1389,'multiline':False]['text':'','line_number':1390,'multiline':False]['text':' This requires more testing, both to ensure that all INI style files get parsed as a','line_number':1391,'multiline':False]['text':' single string, and to ensure that the user experience does not suffer (in terms of this','line_number':1392,'multiline':False]['text':' causing confusing error messages for users writing a brand new YAML config file that','line_number':1393,'multiline':False]['text':' incorrectly triggers this check).','line_number':1394,'multiline':False]['text':' Must be owned by current process user.','line_number':1413,'multiline':False]['text':' Must not be accessible by non-owner.','line_number':1418,'multiline':False]['text':' namespace','line_number':1427,'multiline':False]['text':'*
 * Add default values from the given OptionSection to the given Environment
 ','line_number':1429,'multiline':True]['text':'*
 * Reads the entire config file into the output string.  This was done this way because the JSON
 * parser only takes complete strings, and we were using that to parse the config file before.
 * We could redesign the parser to use some kind of streaming interface, but for now this is
 * simple and works for the current use case of config files which should be limited in size.
 ','line_number':1457,'multiline':True]['text':' check if it's a valid file','line_number':1464,'multiline':False]['text':' The checks below are only performed on POSIX systems','line_number':1491,'multiline':False]['text':' due to differing permission models.','line_number':1492,'multiline':False]['text':' Transfer data to a stringstream','line_number':1522,'multiline':False]['text':' Config files cannot have null bytes','line_number':1534,'multiline':False]['text':' On Windows, it is common for files to be saved by Notepad as UTF-16 with a BOM so convert','line_number':1538,'multiline':False]['text':' it for the user. If the file lacks a BOM, but is UTF-16 encoded we will fail rather then','line_number':1539,'multiline':False]['text':' try to guess the file encoding.','line_number':1540,'multiline':False]['text':' Copy the vector contents into our result string','line_number':1553,'multiline':False]['text':'*
 * Find implicit options and merge them with "=".
 * Implicit options in boost 1.59 no longer support
 * --option value
 * instead they only support "--option=value", this function
 * attempts to workound this by translating the former into the later.
 ','line_number':1559,'multiline':True]['text':' Some options have a short name (a single letter) in addition to a long name.','line_number':1584,'multiline':False]['text':' In this case, the format for the name of the option is "long_name,S" where S is a','line_number':1585,'multiline':False]['text':' single character.','line_number':1586,'multiline':False]['text':' This is validated as such by the boost option parser later in the code.','line_number':1587,'multiline':False]['text':' If there are no implicit options for this option parser instance, no filtering is needed.','line_number':1610,'multiline':False]['text':' Now try to merge the implicit arguments','line_number':1617,'multiline':False]['text':' Candidates to merge:','line_number':1618,'multiline':False]['text':'   -arg value','line_number':1619,'multiline':False]['text':'   --arg value','line_number':1620,'multiline':False]['text':'   -arg ""','line_number':1621,'multiline':False]['text':'   --arg ""','line_number':1622,'multiline':False]['text':' Candidates not to merge:','line_number':1623,'multiline':False]['text':'   -arg=value','line_number':1624,'multiline':False]['text':'   --arg=value','line_number':1625,'multiline':False]['text':' Enable us to fall through to the default code path of pushing another arg into the vector','line_number':1629,'multiline':False]['text':' Skip processing of the last argument in the array since there would be nothing to','line_number':1631,'multiline':False]['text':' merge it with','line_number':1632,'multiline':False]['text':' Skip empty strings','line_number':1637,'multiline':False]['text':' All options start with at least one "-"','line_number':1642,'multiline':False]['text':' Is the argument just a single "-", i.e. short form or a disguised long form?','line_number':1646,'multiline':False]['text':' Is the argument just a double "--", i.e. long form?','line_number':1652,'multiline':False]['text':' Now we strip the prefix, and do a match on the parameter name.','line_number':1660,'multiline':False]['text':' At this point we may have "option=value" which is not in our option list so','line_number':1661,'multiline':False]['text':' we move onto the next option.','line_number':1662,'multiline':False]['text':' If the next argument is the empty string, just eat the empty string','line_number':1670,'multiline':False]['text':' If the type of the option was a string type with a implicit value other than','line_number':1677,'multiline':False]['text':' "", then we cannot handle merging these two strings because simply leaving','line_number':1678,'multiline':False]['text':' just the option name around has a different behavior.','line_number':1679,'multiline':False]['text':' i.e., it is impossible to have "--option=''" on the command line as some','line_number':1680,'multiline':False]['text':' non-empty string must follow the equal sign.','line_number':1681,'multiline':False]['text':' This specific case is only known to affect "verbose" in the long form in','line_number':1682,'multiline':False]['text':' mongod and mongos which makes it a breaking change for this one specific','line_number':1683,'multiline':False]['text':' change. Users can get similar behavior by removing both the option and the','line_number':1684,'multiline':False]['text':' original string in this case.','line_number':1685,'multiline':False]['text':' For strings that have an implicit value of "", we just','line_number':1692,'multiline':False]['text':' disregard the empty string argument since it has the same meaning.','line_number':1693,'multiline':False]['text':' For other types like integers this is not a problem in non-test code as the','line_number':1694,'multiline':False]['text':' only options with implicit options are string types.','line_number':1695,'multiline':False]['text':' Before we decide to merge the arguments, we must see if the next argument','line_number':1697,'multiline':False]['text':' is actually an option. Boost checks its list of options, but we will just','line_number':1698,'multiline':False]['text':' guess based on a leading '-' rather then try to match Boost's logic.','line_number':1699,'multiline':False]['text':' Merge this short form argument and the next into one.','line_number':1705,'multiline':False]['text':' Note: we do not support allow_sticky so a simple append works','line_number':1706,'multiline':False]['text':' Merge this long form argument and the next into one.','line_number':1709,'multiline':False]['text':' Advance to the next argument','line_number':1714,'multiline':False]['text':' Add the option to the final list, this may be an option that we simply ignore.','line_number':1719,'multiline':False]['text':' namespace','line_number':1726,'multiline':False]['text':'*
 * Run the OptionsParser
 *
 * Overview:
 *
 * 1. Parse argc and argv using the given OptionSection as a description of expected options
 * 2. Check for a "config" argument
 * 3. If "config" found, read config file
 * 4. Detect config file type (YAML or INI)
 * 5. Parse config file using the given OptionSection as a description of expected options
 * 6. Add the results to the output Environment in the proper order to ensure correct precedence
 ','line_number':1779,'multiline':True]['text':' We had an error other than "config" not existing in our environment','line_number':1812,'multiline':False]['text':' "config" exists in our environment','line_number':1817,'multiline':False]['text':' Environment::get returns a bad status if config was not set','line_number':1819,'multiline':False]['text':' Adds the values for all our options that were registered as composable to the composed','line_number':1844,'multiline':False]['text':' environment.  addCompositions doesn't override the values like "setAll" on our','line_number':1845,'multiline':False]['text':' environment.  Instead it aggregates the values in the result environment.','line_number':1846,'multiline':False]['text':' NOTE: We must add our configEnvironment compositions first since we have a StringMap type','line_number':1847,'multiline':False]['text':' in which some options can be overridden by the command line.','line_number':1848,'multiline':False]['text':' Add the default values to our resulting environment','line_number':1859,'multiline':False]['text':' Add the values to our result in the order of override','line_number':1865,'multiline':False]['text':' NOTE: This should not fail validation as we haven't called environment->validate() yet','line_number':1866,'multiline':False]['text':' Add this last because it has all the composable options aggregated over different','line_number':1876,'multiline':False]['text':' sources.  For example, if we have a StringMap type with some values set on the command','line_number':1877,'multiline':False]['text':' line and some values set in config files, we want to make sure to get them all.  This','line_number':1878,'multiline':False]['text':' should not override any non composable options, since composedEnvironment should not have','line_number':1879,'multiline':False]['text':' them set.  See the addCompositions function for more details.','line_number':1880,'multiline':False]['text':' Add the constraints from our options to the result environment','line_number':1886,'multiline':False]['text':' Add values from the provided config file','line_number':1898,'multiline':False]['text':' Add the default values to our resulting environment','line_number':1904,'multiline':False]['text':' Add the constraints from our options to the result environment','line_number':1910,'multiline':False]['text':' Check if YAML parsing was successful, if not try to read as INI','line_number':1929,'multiline':False]['text':' namespace optionenvironment','line_number':1945,'multiline':False]['text':' namespace mongo','line_number':1946,'multiline':False]