['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Immutable ordered dictionary.
 *
 * Interfaces that "modify" the map are 'const' and return a new version of the map with the
 * modifications applied and leaves the original version untouched.
 *
 * It is optimized for efficient copies and low memory usage when multiple versions of the map exist
 * simultaneously at the expense of regular lookups not being as efficient as the regular std
 * ordered containers. Suitable for use in code that uses the copy-on-write pattern.
 *
 * Thread-safety: All methods are const, it is safe to perform modifications that result in new
 * versions from multiple threads concurrently.
 *
 * Memory management: Internal memory management is done using reference counting, memory is free'd
 * as references to different versions of the map are released.
 *
 * Built on top  of 'immer::flex_vector'.
 * Documentation: 'immer/flex_vector.h' and https://sinusoid.es/immer/
 ','line_number':42,'multiline':True]['text':'*
     * Returns a reference to the value associated with 'key' if one exists, otherwise a default
     * constructed Value.
     ','line_number':111,'multiline':True]['text':'*
     * Returns a reference to the value associated with 'key' if one exists, otherwise throws.
     ','line_number':123,'multiline':True]['text':'*
     * Insert a new 'key' and 'value' pair to the map.
     *
     * Returns the modified map, or the original if 'key' was already contained.
     ','line_number':134,'multiline':True]['text':'*
     * Insert a new 'key' and 'value' pair to the map. Uses 'it' as a hint.
     *
     * Returns the modified map, or the original if 'key' was already contained.
     ','line_number':150,'multiline':True]['text':'*
     * Sets the value associated with 'key' to 'value', inserting the new pair if 'key' does not
     * exist.
     *
     * Returns the modified map.
     ','line_number':166,'multiline':True]['text':'*
     * Sets the value associated with 'key' to 'value', inserting the new pair if 'key' does not
     * exist. Treats 'it' as a hint.
     *
     * Returns the modified map.
     ','line_number':183,'multiline':True]['text':'*
     * Sets the value associated with 'key' by applying 'valueUpdate' to the existing value, or to a
     * default-constructed value if no entry for 'key' exists.
     *
     * The signature of 'valueUpdate' should be equivalent to
     * std::function<mapped_type(const mapped_type&)>. Returns the modified map.
     ','line_number':200,'multiline':True]['text':'*
     * Updates the value associated with 'key' by applying 'valueUpdate' to the existing value, or
     * to a default-constructed value if no entry for 'key' exists. Uses 'it' as a hint.
     *
     * The signature of 'valueUpdate' should be equivalent to
     * std::function<mapped_type(const mapped_type&)>. Returns the modified map.
     ','line_number':218,'multiline':True]['text':'*
     * Updates the value associated with 'key' if it exists by applying 'valueUpdate' to the
     * existing value.
     *
     * The signature of 'valueUpdate' should be equivalent to
     * std::function<mapped_type(const mapped_type&)>. Returns the modified map, or the original if
     * 'key' does not exist.
     ','line_number':236,'multiline':True]['text':'*
     * Updates the value associated with 'key' if it exists by applying 'valueUpdate' to the
     * existing value. Uses 'it' as a hint.
     *
     * The signature of 'valueUpdate' should be equivalent to
     * std::function<mapped_type(const mapped_type&)>. Returns the modified map, or the original if
     * 'key' does not exist.
     ','line_number':255,'multiline':True]['text':'*
     * Removes 'key' and its associated value from the map.
     *
     * Returns the modified map, or the original if 'key' does not exist.
     ','line_number':274,'multiline':True]['text':'*
     * Removes entry assocated with 'it' from the map. 'it' must match 'key' or it will not be
     * erased.
     *
     * Returns the modified map, or the original if 'it' is equal to 'end()'.
     ','line_number':290,'multiline':True]['text':'*
     * Returns an iterator to the entry for 'key' if it exists, 'end()' otherwise.
     *
     * Supports heterogeneous lookup.
     ','line_number':307,'multiline':True]['text':'*
     * Returns true if map contains an entry for 'key'.
     *
     * Supports heterogeneous lookup.
     ','line_number':317,'multiline':True]['text':'*
     * Returns the first the entry greater than or equal to 'key' if one exists, 'end()' otherwise.
     *
     * Supports heterogeneous lookup.
     ','line_number':327,'multiline':True]['text':'*
     * Returns the first the entry strictly greater than 'key' if one exists, 'end()' otherwise.
     *
     * Supports heterogeneous lookup.
     ','line_number':337,'multiline':True]['text':' namespace mongo::immutable','line_number':358,'multiline':False]