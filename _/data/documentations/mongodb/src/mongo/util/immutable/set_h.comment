['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Immutable ordered set.
 *
 * Interfaces that "modify" the set are 'const' and return a new version of the set with the
 * modifications applied and leaves the original version untouched.
 *
 * It is optimized for efficient copies and low memory usage when multiple versions of the set exist
 * simultaneously at the expense of regular lookups not being as efficient as the regular std
 * ordered containers. Suitable for use in code that uses the copy-on-write pattern.
 *
 * Thread-safety: All methods are const, it is safe to perform modifications that result in new
 * versions from multiple threads concurrently.
 *
 * Memory management: Internal memory management is done using reference counting, memory is free'd
 * as references to different versions of the set are released.
 *
 * Built on top  of 'immer::flex_vector'.
 * Documentation: 'immer/flex_vector.h' and https://sinusoid.es/immer/
 ','line_number':41,'multiline':True]['text':'*
     * Insert a new 'key' to the set.
     *
     * Returns the modified set, or the original if 'key' was already contained.
     ','line_number':95,'multiline':True]['text':'*
     * Insert a new 'key' to the set. Uses 'it' as a hint.
     *
     * Returns the modified set, or the original if 'key' was already contained.
     ','line_number':109,'multiline':True]['text':'*
     * Removes 'key' from the set.
     *
     * Returns the modified set, or the original if 'key' does not exist.
     ','line_number':123,'multiline':True]['text':'*
     * Removes key associated with 'key' from the set. Uses 'it' as a hint.
     *
     * Returns the modified set, or the original if 'key' does not exist.
     ','line_number':137,'multiline':True]['text':'*
     * Returns an iterator to the element for 'key' if it exists, 'end()' otherwise.
     *
     * Supports heterogeneous lookup.
     ','line_number':151,'multiline':True]['text':'*
     * Returns true if set contains 'key'.
     *
     * Supports heterogeneous lookup.
     ','line_number':161,'multiline':True]['text':'*
     * Returns the first the element greater than or equal to 'key' if one exists, 'end()'
     * otherwise.
     *
     * Supports heterogeneous lookup.
     ','line_number':171,'multiline':True]['text':'*
     * Returns the first the element strictly greater than 'key' if one exists, 'end()' otherwise.
     *
     * Supports heterogeneous lookup.
     ','line_number':182,'multiline':True]['text':' namespace mongo::immutable','line_number':199,'multiline':False]