['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':31,'multiline':False]['text':' Since this is called very frequently by many threads, the common case should not write to','line_number':69,'multiline':False]['text':' shared memory.','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' If we read ReaderHasRead, we have at least the last time from a previous reader, or the','line_number':72,'multiline':False]['text':' background thread.','line_number':73,'multiline':False]['text':' acquire','line_number':74,'multiline':False]['text':' We capture the lastUpdate time now to ensure that we sleep for the right target granularity,','line_number':82,'multiline':False]['text':' even if it takes a while for the background thread to wake up.','line_number':83,'multiline':False]['text':' Updates Date_t::lastNow by calling Date_t::now()','line_number':86,'multiline':False]['text':' This will be called at most once per _granularity per thread. In common cases it will only be','line_number':90,'multiline':False]['text':' called by a single thread per _granularity.','line_number':91,'multiline':False]['text':' Try to go from TimerWillPause to ReaderHasRead.','line_number':95,'multiline':False]['text':' There are three possible states _state could have been in before this cas:','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' kTimerWillPause - In this case, we've transitioned to kReaderHasRead, telling the timer','line_number':99,'multiline':False]['text':'                   it still has recent readers and should continue to loop.  In that case,','line_number':100,'multiline':False]['text':'                   we have no more to do, return.','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':' kReaderHasRead - Another thread had already performed the kTimerWillPause ->','line_number':103,'multiline':False]['text':'                  kReaderHasRead transition, we have no work to do, return.','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' kTimerPaused - The timer was paused, so we have to wake it up.  Don't return and attempt','line_number':106,'multiline':False]['text':'                to wake the timer thread.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' For the first two cases, we can be sure we've acquired an up to date notion of time (from','line_number':109,'multiline':False]['text':' the timer thread or a reader that has woken calling updateClock()), from either','line_number':110,'multiline':False]['text':' succeeding or failing the cas above.','line_number':111,'multiline':False]['text':' We may be in timer paused','line_number':115,'multiline':False]['text':' See if we still observe paused, after taking a lock.  This prevents multiple threads from','line_number':117,'multiline':False]['text':' racing to update the clock.','line_number':118,'multiline':False]['text':' If not, someone else has taken care of it','line_number':120,'multiline':False]['text':' If we were still in pause, there are a couple of tasks we have to do:','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':' 1. update the clock','line_number':126,'multiline':False]['text':' 2. store kReaderHasRead','line_number':127,'multiline':False]['text':' 3. wake the background thread','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':' It's important that we do them in that order, so that the background thread sleeps','line_number':130,'multiline':False]['text':' exactly granularity from now, and so that readers that observe kReaderHasRead pick up the','line_number':131,'multiline':False]['text':' updated time.  Failing to keep that order may cause them to observe what may be a very','line_number':132,'multiline':False]['text':' stale read (if the background timer was a sleep for an extended period).','line_number':133,'multiline':False]['text':' release','line_number':135,'multiline':False]['text':' Start the background thread that repeatedly sleeps for the specified duration of milliseconds','line_number':146,'multiline':False]['text':' and wakes up to store the current time.','line_number':147,'multiline':False]['text':' update the clock every pass','line_number':155,'multiline':False]['text':' Always transition to will pause on every run.','line_number':158,'multiline':False]['text':' release','line_number':159,'multiline':False]['text':' There are 3 possible states _state could have been in:','line_number':161,'multiline':False]['text':'','line_number':162,'multiline':False]['text':' kTimerWillPause - We slept until the next tick without a reader.  We should pause','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' kReaderHasRead - A reader has read since our last sleep.  We should sleep again','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':' kTimerPaused - We were asleep and spuriously woke or we just started (we start in','line_number':167,'multiline':False]['text':'                kTimerPaused)','line_number':168,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' If we do pause our wake up will indicate:','line_number':170,'multiline':False]['text':'   1. That we've had a reader and it's time to tick again','line_number':171,'multiline':False]['text':'   2. That we're in shutdown, where we'll early return from the next condvar wait','line_number':172,'multiline':False]['text':'   3. Experiencing a spurious wake, which may make us tick an extra time, but no more','line_number':173,'multiline':False]['text':'      than once per granularity','line_number':174,'multiline':False]['text':' Stop running if nothing has read the time since we last updated the time.','line_number':177,'multiline':False]['text':' We don't care about spurious wake ups here, at worst we'll update the clock an','line_number':182,'multiline':False]['text':' extra time.','line_number':183,'multiline':False]['text':' Wait for the thread to start. This prevents other threads from calling now() until the timer','line_number':194,'multiline':False]['text':' thread is at its first wait() call. While the code would work without this, it makes startup','line_number':195,'multiline':False]['text':' more predictable and therefore easier to test.','line_number':196,'multiline':False]['text':' namespace mongo','line_number':201,'multiline':False]