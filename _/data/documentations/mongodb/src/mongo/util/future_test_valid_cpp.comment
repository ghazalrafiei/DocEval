['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * These tests validate the postconditions of operations on the 4 future types:
 * - Future
 * - SemiFuture
 * - SharedSemiFuture
 * - ExecutorFuture
 ','line_number':54,'multiline':True]['text':'* Asserts that the Future or ExecutorFuture is still valid() after `func`. ','line_number':62,'multiline':True]['text':'* Asserts that the Future or ExecutorFuture is invalid() after `func`. ','line_number':72,'multiline':True]['text':'*
 * Asserts that `func` returns a valid() future while making the input Future or ExecutorFuture
 * non-valid().
 ','line_number':82,'multiline':True]['text':'* Passes an invalid Future or ExecutorFuture into `func`. To be used with DEATH_TEST. ','line_number':96,'multiline':True]['text':' TODO SERVER-64948: this test is only needed if the lvalue& getter is kept around.','line_number':110,'multiline':False]['text':'* Asserts that the SemiFuture is invalid() after `func`. ','line_number':237,'multiline':True]['text':'* Asserts that the SemiFuture is still valid() after `func`. ','line_number':248,'multiline':True]['text':' Asserts that `func` returns a valid() future while making the input SemiFuture non-valid(). ','line_number':259,'multiline':True]['text':' TODO SERVER-64948: this test is only needed if the lvalue& getter is kept around.','line_number':271,'multiline':False]['text':'* Asserts that the SharedSemiFuture is still valid() after `func`. ','line_number':332,'multiline':True]['text':'*
 * Asserts that `func` returns a valid() future while making the input SharedSemiFuture non-valid().
 ','line_number':343,'multiline':True]['text':'* Asserts that `func` returns a valid() Future and keeps the input SharedSemiFuture valid(). ','line_number':357,'multiline':True]['text':'* Passes an invalid SharedSemiFuture into `func`. To be used with DEATH_TEST. ','line_number':369,'multiline':True]['text':'
 * Handles the case around an interrupted get() operation. We expect that the Future remains valid
 * up until the point where the value is made available. I.e. a continuation can be chained off of
 * a Future whose get() has been interrupted because the caller never gets access to the value.
 ','line_number':446,'multiline':True]['text':' namespace','line_number':485,'multiline':False]['text':' namespace mongo','line_number':486,'multiline':False]