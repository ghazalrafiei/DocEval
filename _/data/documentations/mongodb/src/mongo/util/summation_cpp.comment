['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Split 64-bit integers into two doubles, so the sum remains exact.','line_number':41,'multiline':False]['text':'*
 * Returns whether the sum is in range of the 64-bit signed integer long long type.
 ','line_number':49,'multiline':True]['text':' Fast path: if the rounded _sum is strictly between the minimum and maximum long long value,','line_number':54,'multiline':False]['text':' it must be valid. This is the common case. Note that this is correct for NaNs/infinities.','line_number':55,'multiline':False]['text':' Now check the cases where the _sum equals one of the boundaries, and check the compensation','line_number':59,'multiline':False]['text':' amount to determine to what integer the value would round.','line_number':60,'multiline':False]['text':' If _sum is equal to limits::max() + 1, _addend must cause us to round down to a lower integer','line_number':62,'multiline':False]['text':' and thus be strictly less than -0.5. limits.max() rounds up to limits.max() + 1, as double','line_number':63,'multiline':False]['text':' precision does not have enough precision.','line_number':64,'multiline':False]['text':' If _sum is equal to limits::min(), _addend must not cause us to round down and thus be','line_number':68,'multiline':False]['text':' greater than or equal to -0.5.','line_number':69,'multiline':False]['text':' The sum is out of range, an infinity or a NaN.','line_number':73,'multiline':False]['text':'*
 * Returns result of sum rounded to nearest integer, rounding half-way cases away from zero.
 ','line_number':77,'multiline':True]['text':' Can't directly convert, because _sum would overflow a signed 64-bit number.','line_number':83,'multiline':False]['text':' namespace mongo','line_number':91,'multiline':False]