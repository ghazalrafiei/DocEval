['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Memory aggregator where memory updates can be propagated to concurrently. This creates child
 * `ChunkedMemoryAggregator` nodes which propagate updates to this `ConcurrentMemoryAggregator`
 * node in chunks, which will always be an over count and never an under count.
 ','line_number':42,'multiline':True]['text':'*
     * Optional user provided callback that will be invoked when memory usage increases.
     ','line_number':49,'multiline':True]['text':'*
         * Invoked when the memory usage increases.
         *
         * `memoryUsageBytes` - Current overall memory usage reported from the concurrent memory
         * aggregator instance. `sourceId` - The chunked memory aggregator ID that triggered this
         * increase in memory. `memoryAggregator` - The concurrent memory aggregator instance.
         ','line_number':56,'multiline':True]['text':' class UsageMonitor','line_number':66,'multiline':False]['text':'*
     * Creates a new chunked memory aggregator. A chunked memory aggregator can be used to allocate
     * `MemoryUsageHandle` instances which are used to report memory usage. Updates to the
     * `ChunkedMemoryAggregator` are thread-safe.
     ','line_number':72,'multiline':True]['text':'*
     * Returns the current memory usage across all chunked memory aggregator. This is meant to be an
     * approximation and not an exact number because the chunked memory aggregators only send
     * updates if there is a significant memory change.
     ','line_number':80,'multiline':True]['text':'*
     * Invokes the callback for each active `ChunkedMemoryAggregator` under this
     * `ConcurrentMemoryAggregator`. This acquires the `ConcurrentMemoryAggregator` `_mutex` for the
     * entire duration.
     ','line_number':87,'multiline':True]['text':'*
     * Atomically updates the overall memory usage. If the memory usage went up, a notification
     * will be sent to the usage monitor that was supplied, letting it know what the current
     * memory usage is and which chunked memory aggregator just triggered this update.
     ','line_number':100,'multiline':True]['text':'*
     * Invokes the `_usageMonitor` callback, if present.
     ','line_number':107,'multiline':True]['text':'*
     * Removes the input chunked memory aggregator. This will be called automatically when the
     * `ChunkedMemoryAggregator` is destroyed through `ChunkedMemoryAggregatorDeleter`.
     ','line_number':112,'multiline':True]['text':' Custom user supplied callback that gets notified when the memory usage increases.','line_number':118,'multiline':False]['text':' Overall memory usage based on deltas reported by the individual chunked memory aggregators.','line_number':121,'multiline':False]['text':' Mutex that protects access to `_chunkedMemoryAggregators`.','line_number':124,'multiline':False]['text':' Map (key is the ID) of currently active chunked memory aggregators. This gets automatically','line_number':127,'multiline':False]['text':' cleaned up when `ChunkedMemoryAggregator`s go out of scope.','line_number':128,'multiline':False]['text':' Auto incrementing ID generator that is used to assign unique IDs to `ChunkedMemoryAggregator`','line_number':131,'multiline':False]['text':' instances that are created from this `ConcurrentMemoryAggregator`','line_number':132,'multiline':False]['text':' class ConcurrentMemoryAggregator','line_number':134,'multiline':False]['text':' namespace mongo','line_number':136,'multiline':False]