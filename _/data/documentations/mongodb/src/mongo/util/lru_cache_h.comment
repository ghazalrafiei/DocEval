['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A caching structure with a least recently used (LRU) replacement policy.
 * The number of entries allowed in the cache is set upon construction.
 *
 * This cache is not thread safe.
 *
 * Internally, this structure holds two containers: a list for LRU ordering and an
 * unordered_map for fast lookup. The add(), get(), and remove() operations are all O(1).
 *
 * Iteration over the cache will visit elements in order of last use, from most
 * recently used to least recently used.
 ','line_number':45,'multiline':True]['text':'*
     * Inserts a new entry into the cache. If the given key already exists in the cache,
     * then we will drop the old entry and replace it with the given new entry. The cache
     * takes ownership of the new entry.
     *
     * If the cache is full when add() is called, the least recently used entry will be
     * evicted from the cache and returned to the caller.
     *
     * This method does not provide the strong exception safe guarantee. If a call
     * to this method throws, the cache may be left in an inconsistent state.
     ','line_number':105,'multiline':True]['text':' If the key already exists, delete it first.','line_number':117,'multiline':False]['text':' If the store has grown beyond its allowed size,','line_number':126,'multiline':False]['text':' evict the least recently used entry.','line_number':127,'multiline':False]['text':'*
     * Finds an element in the cache by key.
     ','line_number':142,'multiline':True]['text':'*
     * Finds and element in the cache by key, without promoting the found
     * element to be the least recently used.
     *
     * This method is meant for testing and other callers that wish to "observe"
     * items in the cache without actually using them. Using this method over
     * the find(...) method above will prevent the LRUCache from functioning
     * properly.
     ','line_number':150,'multiline':True]['text':'*
     * Promotes the element matching the given key, if one exists in the cache,
     * to the least recently used element.
     ','line_number':166,'multiline':True]['text':'*
     * Promotes the element pointed to by the given iterator to be the least
     * recently used element in the cache.
     ','line_number':176,'multiline':True]['text':'*
     * Promotes the element pointed to by the given const_iterator to be the
     * least recently used element in the cache.
     ','line_number':189,'multiline':True]['text':'*
     * Removes the element in the cache stored for this key, if one
     * exists. Returns the count of elements erased.
     ','line_number':202,'multiline':True]['text':'*
     * Removes the element pointed to by the given iterator from this
     * cache, and returns an iterator to the next least recently used
     * element, or the end iterator, if no such element exists.
     ','line_number':219,'multiline':True]['text':'*
     * Removes all items from the cache.
     ','line_number':230,'multiline':True]['text':'*
     * If the given key has a matching element stored in the cache, returns true.
     * Otherwise, returns false.
     ','line_number':238,'multiline':True]['text':'*
     * Returns the number of elements currently in the cache.
     ','line_number':248,'multiline':True]['text':'*
     * Returns an iterator pointing to the most recently used element in the cache.
     ','line_number':259,'multiline':True]['text':'*
     * Returns an iterator pointing past the least recently used element in the cache.
     ','line_number':266,'multiline':True]['text':'*
     * Returns a const_iterator pointing to the most recently used element in the cache.
     ','line_number':273,'multiline':True]['text':'*
     * Returns a const_iterafor pointing past the least recently used element in the cache.
     ','line_number':280,'multiline':True]['text':'*
     * Returns a const_iterator pointing to the most recently used element in the cache.
     ','line_number':287,'multiline':True]['text':'*
     * Returns a const_iterator pointing past the least recently used element in the cache.
     ','line_number':294,'multiline':True]['text':' The maximum allowable number of entries in the cache.','line_number':308,'multiline':False]['text':' (K, V) pairs are stored in this std::list. They are sorted in order','line_number':311,'multiline':False]['text':' of use, where the front is the most recently used and the back is the','line_number':312,'multiline':False]['text':' least recently used.','line_number':313,'multiline':False]['text':' Maps from a key to the corresponding std::list entry.','line_number':316,'multiline':False]['text':' namespace mongo','line_number':320,'multiline':False]