['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' TenantID is not included in serialization when multitenancySupport and','line_number':48,'multiline':False]['text':' featureFlagRequireTenantID are enabled.','line_number':49,'multiline':False]['text':' TenantID is included in serialization when multitenancySupport is enabled and','line_number':58,'multiline':False]['text':' featureFlagRequireTenantID is disabled.','line_number':59,'multiline':False]['text':' Serialize correctly when multitenancySupport is disabled.','line_number':70,'multiline':False]['text':' Assert that if multitenancySupport and featureFlagRequireTenantID are on, then tenantId is set.','line_number':77,'multiline':False]['text':' Deserialize NamespaceString using the tenantID as a parameter to the NamespaceString constructor','line_number':88,'multiline':False]['text':' when multitenancySupport and featureFlagRequireTenantID are enabled and ns does not have prefixed','line_number':89,'multiline':False]['text':' tenantID.','line_number':90,'multiline':False]['text':' Assert that if multitenancySupport is enabled and featureFlagRequireTenantID is disabled,','line_number':103,'multiline':False]['text':' then tenantId parsed from ns and tenantID passed to NamespaceString object are equal.','line_number':104,'multiline':False]['text':' Deserialize NamespaceString when multitenancySupport is enabled and featureFlagRequireTenantID is','line_number':118,'multiline':False]['text':' disabled.','line_number':119,'multiline':False]['text':' Assert tenantID is not initialized when multitenancySupport is disabled.','line_number':135,'multiline':False]['text':' Deserialize NamespaceString with prefixed tenantId when multitenancySupport and','line_number':145,'multiline':False]['text':' featureFlagRequireTenantId are disabled.','line_number':146,'multiline':False]['text':' Deserialize NamespaceString when multitenancySupport and featureFlagRequireTenantID are disabled.','line_number':159,'multiline':False]['text':' We will focus on specific configurations of the SerializationContext ie. Command Request and','line_number':170,'multiline':False]['text':' Command Reply as this is a defaulted parameter where tests that don't specify this parameter','line_number':171,'multiline':False]['text':' already test the default codepath.','line_number':172,'multiline':False]['text':' No prefix, no tenantId.','line_number':185,'multiline':False]['text':' request --> { ns: database.coll }','line_number':186,'multiline':False]['text':' Has prefix, no tenantId.','line_number':191,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':192,'multiline':False]['text':' No prefix, has tenantId.','line_number':197,'multiline':False]['text':' request --> { ns: database.coll }','line_number':198,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':203,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':204,'multiline':False]['text':' in this test, we're getting the toString() for ns, but we also have a tenantId. This','line_number':205,'multiline':False]['text':' means if we called ns.toStringWithTenantId(), we would see two tenantId prefixes','line_number':206,'multiline':False]['text':' No prefix, no tenantId.','line_number':225,'multiline':False]['text':' request --> { ns: database.coll }','line_number':226,'multiline':False]['text':' Has prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':231,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':232,'multiline':False]['text':' No prefix, has tenantId.','line_number':237,'multiline':False]['text':' request --> { ns: database.coll }','line_number':238,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':243,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':244,'multiline':False]['text':' Serializing with SerializationContext, with an expectPrefix set to true','line_number':250,'multiline':False]['text':' No prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':264,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':265,'multiline':False]['text':' Has prefix, no tenantId.','line_number':270,'multiline':False]['text':' request --> { ns: tenantId_database.coll, expectPrefix: true }','line_number':271,'multiline':False]['text':' No prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':276,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':277,'multiline':False]['text':' Has prefix, has tenantId.','line_number':282,'multiline':False]['text':' request -->  { ns: tenantId_database.coll, expectPrefix: true }','line_number':283,'multiline':False]['text':' No prefix, no tenantId.   *** we shouldn't see this from Atlas Proxy in MT mode','line_number':302,'multiline':False]['text':' request --> { ns: database.coll }','line_number':303,'multiline':False]['text':' Has prefix, no tenantId.','line_number':309,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':310,'multiline':False]['text':' No prefix, has tenantId.','line_number':316,'multiline':False]['text':' request --> { ns: database.coll }','line_number':317,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':323,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':324,'multiline':False]['text':' No prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy in MT mode','line_number':344,'multiline':False]['text':' request --> { ns: database.coll }','line_number':345,'multiline':False]['text':' Has prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':351,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':352,'multiline':False]['text':' This is an anomaly, when no tenantId is supplied, we actually ignore expectPrefix, so we','line_number':354,'multiline':False]['text':' can't expect nss.toString == nsPrefixString as we will still attempt to parse the prefix','line_number':355,'multiline':False]['text':' as usual.','line_number':356,'multiline':False]['text':' No prefix, has tenantId.','line_number':361,'multiline':False]['text':' request --> { ns: database.coll }','line_number':362,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':368,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':369,'multiline':False]['text':' No prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy in MT mode','line_number':389,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':390,'multiline':False]['text':' Has prefix, no tenantId.','line_number':396,'multiline':False]['text':' request --> { ns: tenantId_database.coll, expectPrefix: true }','line_number':397,'multiline':False]['text':' No prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':403,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':404,'multiline':False]['text':' Has prefix, has tenantId.','line_number':410,'multiline':False]['text':' request -->  { ns: tenantId_database.coll, expectPrefix: true }','line_number':411,'multiline':False]['text':' TODO: SERVER-82748 Remove $tenant in BSON objects and pass the tenant information another way','line_number':432,'multiline':False]['text':' Test fail point data has both name space and $tenant.','line_number':439,'multiline':False]['text':' Test fail point data only has $tenant.','line_number':454,'multiline':False]['text':' Test fail point data only has name space.','line_number':467,'multiline':False]['text':' Test fail point data has neither $teannt nor name sapce.','line_number':475,'multiline':False]['text':' Feature flag on with multitenancy off is not handled','line_number':498,'multiline':False]['text':' Clang is stupid, so to use ASSERT_THROWS_CODE (which internally creates a','line_number':513,'multiline':False]['text':' lambda function), we need to rebind the two structured bindings tenantId and','line_number':514,'multiline':False]['text':' nsStr to real variables.','line_number':515,'multiline':False]['text':' Expect deserialization to fail when we have a tenant ID and multitenancy','line_number':518,'multiline':False]['text':' support is disabled','line_number':519,'multiline':False]['text':' Expect serialization to drop the tenant ID when multitenancy support is','line_number':522,'multiline':False]['text':' disabled','line_number':523,'multiline':False]['text':' namespace mongo','line_number':554,'multiline':False]