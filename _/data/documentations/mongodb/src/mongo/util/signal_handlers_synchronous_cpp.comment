['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "bits/types/siginfo_t.h"','line_number':45,'multiline':False]['text':' IWYU pragma: keep','line_number':70,'multiline':False]['text':' should only see SIGABRT on windows','line_number':83,'multiline':False]['text':' Follow SEH conventions by defining a status code per their conventions','line_number':98,'multiline':False]['text':' Bit 31-30: 11 = ERROR','line_number':99,'multiline':False]['text':' Bit 29:     1 = Client bit, i.e. a user-defined code','line_number':100,'multiline':False]['text':' Historically we relied on raising SEH exception and letting the unhandled exception handler','line_number':103,'multiline':False]['text':' then handle it to that we can dump the process. This works in all but one case. The C++','line_number':104,'multiline':False]['text':' terminate handler runs the terminate handler in a SEH __try/__catch. Therefore, any SEH','line_number':105,'multiline':False]['text':' exceptions we raise become handled. Now, we setup our own SEH handler to quick catch the SEH','line_number':106,'multiline':False]['text':' exception and take the dump bypassing the unhandled exception handler.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' The exception filter exits the process','line_number':114,'multiline':False]['text':' This works by restoring the system-default handler for the given signal and re-raising','line_number':122,'multiline':False]['text':' it, in order to get the system default termination behavior (i.e., dumping core, or just','line_number':123,'multiline':False]['text':' exiting).','line_number':124,'multiline':False]['text':' This should only be used with MallocFreeOSteam','line_number':135,'multiline':False]['text':'*
 * Instances of this type guard the mallocFreeOStream. While locking a mutex isn't guaranteed to
 * be signal-safe, this file does it anyway. The assumption is that the main safety risk to
 * locking a mutex is that you could deadlock with yourself. That risk is protected against by
 * only locking the mutex in fatal functions that log then exit. There is a remaining risk that
 * one of these functions recurses (possible if logging segfaults while handing a
 * segfault). This is currently acceptable because if things are that broken, there is little we
 * can do about it.
 *
 * If in the future, we decide to be more strict about posix signal safety, we could switch to
 * an atomic test-and-set loop, possibly with a mechanism for detecting signals raised while
 * handling other signals.
 ','line_number':177,'multiline':True]['text':'*
     * If we detect that we've been signaled while handling another signal, we'll fall back to
     * the default handler for the given signum. In that case, it's important that we kill
     * the process in a timely manner so the user has a chance to detect that and restart it.
     ','line_number':192,'multiline':True]['text':' NOLINT','line_number':205,'multiline':False]['text':' NOLINT','line_number':210,'multiline':False]['text':' If we were within a log call when we hit a signal, don't call back into the logging','line_number':214,'multiline':False]['text':' subsystem.','line_number':215,'multiline':False]['text':' must hold MallocFreeOStreamGuard to call','line_number':223,'multiline':False]['text':' must hold MallocFreeOStreamGuard to call','line_number':230,'multiline':False]['text':' must hold MallocFreeOStreamGuard to call','line_number':240,'multiline':False]['text':' this will be called in certain c++ error cases, for example if there are two active','line_number':260,'multiline':False]['text':' exceptions','line_number':261,'multiline':False]['text':' Must hold MallocFreeOStreamGuard to call','line_number':315,'multiline':False]['text':' For convenient debugger access.','line_number':328,'multiline':False]['text':' Writing out message to log separate from the stack trace so at least that much gets','line_number':336,'multiline':False]['text':' logged. This is important because we may get here by jumping to an invalid address which','line_number':337,'multiline':False]['text':' could cause unwinding the stack to break.','line_number':338,'multiline':False]['text':' namespace','line_number':350,'multiline':False]['text':' signal ignored if nullptr','line_number':368,'multiline':False]['text':' sent by '^\'. Log and hard quit, no cleanup.','line_number':373,'multiline':False]['text':' We need to make sure that all signals are unmasked so signals are handled correctly','line_number':415,'multiline':False]['text':' Later entries in the catch chain will become the innermost catch blocks, so','line_number':429,'multiline':False]['text':' these are in order of increasing specificity. User-provided probes','line_number':430,'multiline':False]['text':' will be appended, so they will be considered more specific than any of','line_number':431,'multiline':False]['text':' these, which are essentially "fallback" handlers.','line_number':432,'multiline':False]['text':' namespace mongo','line_number':464,'multiline':False]