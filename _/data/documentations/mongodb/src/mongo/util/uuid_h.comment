['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A UUID is a 128-bit unique identifier, per RFC 4122, v4, using
 * a secure random number generator.
 ','line_number':54,'multiline':True]['text':'*
     * The number of bytes contained in a UUID.
     ','line_number':60,'multiline':True]['text':'*
     * Generate a new random v4 UUID per RFC 4122.
     ','line_number':65,'multiline':True]['text':'*
     * If the given string represents a valid UUID, constructs and returns the UUID,
     * otherwise returns an error.
     ','line_number':70,'multiline':True]['text':'*
     * If the given BSONElement represents a valid UUID, constructs and returns the UUID,
     * otherwise returns an error.
     ','line_number':76,'multiline':True]['text':'*
     * Parses a BSON document of the form { uuid: BinData(4, "...") }.
     *
     * For IDL.
     ','line_number':82,'multiline':True]['text':' Allow empty CDRs to generate empty UUIDs.','line_number':91,'multiline':False]['text':'*
     * Returns whether this string represents a valid UUID.
     ','line_number':100,'multiline':True]['text':'
     * Return the underlying 128-bit array.
     ','line_number':105,'multiline':True]['text':'*
     * Returns a ConstDataRange view of the UUID.
     ','line_number':112,'multiline':True]['text':'*
     * Appends to builder as BinData(4, "...") element with the given name.
     ','line_number':119,'multiline':True]['text':'*
     * Appends to array builder as BinData(4, "...").
     ','line_number':124,'multiline':True]['text':'*
     * Returns a BSON object of the form { uuid: BinData(4, "...") }.
     ','line_number':129,'multiline':True]['text':'*
     * Returns a string representation of this UUID, in hexadecimal,
     * as per RFC 4122:
     *
     * 4 Octets - 2 Octets - 2 Octets - 2 Octets - 6 Octets
     ','line_number':134,'multiline':True]['text':'*
     * Returns true only if the UUID is the RFC 4122 variant, v4 (random).
     ','line_number':175,'multiline':True]['text':'*
     * Custom hasher so UUIDs can be used in unordered data structures. Uses the first four bytes
     * of the UUID itself as the hash, since these are already randomly generated.
     * e.g. std::unordered_set<UUID, UUID::Hash> uuidSet;
     ','line_number':180,'multiline':True]['text':' BigEndian because UUID is in network order','line_number':188,'multiline':False]['text':' UUID in network byte order','line_number':201,'multiline':False]['text':'* Allow IDL-generated parsers to define uninitialized UUID objects. ','line_number':204,'multiline':True]['text':'*
 * Supports use of UUID with the BSON macro:
 *     BSON("uuid" << uuid) -> { uuid: BinData(4, "...") }
 ','line_number':217,'multiline':True]['text':' namespace mongo','line_number':224,'multiline':False]