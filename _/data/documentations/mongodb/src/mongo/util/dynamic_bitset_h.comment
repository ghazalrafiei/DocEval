['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace bitset_utils','line_number':46,'multiline':False]['text':'*
 * Bitset class implementation, which can dynamically grow and shrink. t has the capability to
 * inline up to (8 * sizeof(T) * NumberOfBlocks) bits When the number of elements exceeds the
 * threshold, the data is then stored in the heap. The size of the bitset is always a factor of 8 *
 * sizeof(T).
 ','line_number':48,'multiline':True]['text':' Useful for bit operations constants.','line_number':62,'multiline':False]['text':' All bits unset: 0b00000000','line_number':63,'multiline':False]['text':' All bits set: 0b11111111','line_number':64,'multiline':False]['text':'*
     * A proxy class serving as a reference to a bit.
     ','line_number':66,'multiline':True]['text':'*
         * Return negated value of this bit.
         ','line_number':92,'multiline':True]['text':'*
         * Return value of this bit.
         ','line_number':99,'multiline':True]['text':'*
         * Flip this bit.
         ','line_number':106,'multiline':True]['text':'*
     * Allocates a bitset of default size. The bitset of default size occupies all available inlined
     * storage and never allocates. The default size is equal to NumberOfBlocks * sizeof(BlockType)
     * * CHAR_BIT. E.g., DynamicBitset<uint8_t, 1> has default size 8 bits, DynamicBitset<uint64_t,
     * 2> - 128 bits.
     ','line_number':123,'multiline':True]['text':'*
     * Create a bitset of size >= 'minSize'. The actual size will be ceil(minSize/sizeof(block)).
     * E.g., for 32 bit blocks (uint32_t) and the minSize equals 8 the actual size will be 32, for
     * minSize = 33, the actual size will be 64, and for minSize = 64 the actual size will be 64 as
     * well.
     ','line_number':131,'multiline':True]['text':'*
     * Create a bitset from a binary strings containing only '0's and '1's.
     ','line_number':139,'multiline':True]['text':'*
     * Return true if at least one bit of this bitset is set.
     ','line_number':151,'multiline':True]['text':'*
     * Return false if no bits of this bitset are set.
     ','line_number':163,'multiline':True]['text':'*
     * Compute AND of this subset and subset 'other' and assign the result to this subset. The
     * bitsets must have the same size.
     ','line_number':170,'multiline':True]['text':'*
     * Compute OR of this subset and subset 'other' and assign the result to this subset. The
     * bitsets must have the same size.
     ','line_number':182,'multiline':True]['text':'*
     * Compute XOR of this subset and subset 'other' and assign the result to this subset. The
     * bitsets must have the same size.
     ','line_number':194,'multiline':True]['text':'*
     * Compute a set difference of this subset and subset 'other' and assign the result to this
     * bitsets. The subsets must have the same size.
     ','line_number':206,'multiline':True]['text':'*
     * Flip all bits of this subset.
     ','line_number':218,'multiline':True]['text':'*
     * Complement operator: Return a new bitset with all bits flipped.
     ','line_number':227,'multiline':True]['text':'*
     * Return a reference to 'index'-th bit. Using the reference you may change read or set the bit.
     ','line_number':236,'multiline':True]['text':'*
     * Return a value of 'index'-th bit.
     ','line_number':244,'multiline':True]['text':'*
     * Set all bits of this bitset.
     ','line_number':252,'multiline':True]['text':'*
     * Set 'index'-th bit to the given 'value'.
     ','line_number':261,'multiline':True]['text':'*
     * Return the number of set bits in the bitset.
     ','line_number':272,'multiline':True]['text':'*
     * Return true if this bitset is a subset of subset 'other'.
     ','line_number':283,'multiline':True]['text':'*
     * Return true if this bitset has common set bits with 'other'.
     ','line_number':293,'multiline':True]['text':'*
     * Return true if this bitset is equal to masked 'other'. This operation is
     * implementation of 'this == (mask & other)'.
     ','line_number':303,'multiline':True]['text':'*
     * Return the index of first set bit, if nothing found return 'kNpos'.
     ','line_number':317,'multiline':True]['text':'*
     * Return the index of the first set bit starting AFTER position 'previous', if nothing found
     * return 'kNpos'.
     ','line_number':331,'multiline':True]['text':' Step 1. Checking the starting block.','line_number':341,'multiline':False]['text':' Step 2. In not found in the starting block, continue search as in 'findNext' function.','line_number':349,'multiline':False]['text':'*
     * Resize this bitset. See the comment to 'DynamicBitset(size_t minSize)' about the actual size
     * of the bitset. All bits higher than 'newSize' will be cleared.
     ','line_number':360,'multiline':True]['text':' Clear high bits.','line_number':370,'multiline':False]['text':'*
     * Return the number of the bits in this subset.
     ','line_number':377,'multiline':True]['text':'*
     * Iterates over integer blocks of the bitsets and returns true if the predicate returns true
     * for at least one set of corresponing blocks.
     ','line_number':384,'multiline':True]['text':'*
     * Iterates over integer blocks of the bitsets and returns true if the predicate returns true
     * for all sets of corresponing blocks.
     ','line_number':393,'multiline':True]['text':'*
     * Returns bit inside inside its block.
     ','line_number':427,'multiline':True]['text':' 0 is the least significant word.','line_number':446,'multiline':False]['text':'*
 * Return true if the given bitset are equal. The bitsets must be of the same size.
 ','line_number':450,'multiline':True]['text':'
 * Return true if 'lhs' bitset is lexicographically less than 'rhs', and false otherwise.
 ','line_number':459,'multiline':True]['text':'*
 * Return a new bitset which is a result of AND operator of the given bitsets. The bitsets must be
 * of the same size.
 ','line_number':468,'multiline':True]['text':'*
 * Return a new bitset which is a result of OR operator of the given bitsets. The bitsets must be of
 * the same size.
 ','line_number':480,'multiline':True]['text':'*
 * Return a new bitset which is a result of XOR operator of the given bitsets. The bitsets must be
 * of the same size.
 ','line_number':492,'multiline':True]['text':'*
 * Return a set difference of the given bitsets. The bitsets must be of the same size.
 ','line_number':504,'multiline':True]['text':' namespace mongo','line_number':522,'multiline':False]