['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' TenantID is not included in serialization when multitenancySupport and','line_number':48,'multiline':False]['text':' featureFlagRequireTenantID are enabled.','line_number':49,'multiline':False]['text':' TenantID is included in serialization when multitenancySupport is enabled and','line_number':58,'multiline':False]['text':' featureFlagRequireTenantID is disabled.','line_number':59,'multiline':False]['text':' Serialize correctly when multitenancySupport is disabled.','line_number':69,'multiline':False]['text':' Assert that if multitenancySupport and featureFlagRequireTenantID are on, then tenantId is set.','line_number':76,'multiline':False]['text':'"TenantId must be set"','line_number':84,'multiline':True]['text':' If the database is an inernal db, it's acceptable not to have a tenantId even if','line_number':87,'multiline':False]['text':' multitenancySupport and featureFlagRequireTenantID are on.','line_number':88,'multiline':False]['text':' Deserialize DatabaseName using the tenantID as a parameter to the DatabaseName constructor','line_number':98,'multiline':False]['text':' when multitenancySupport and featureFlagRequireTenantID are enabled and ns does not have prefixed','line_number':99,'multiline':False]['text':' tenantID.','line_number':100,'multiline':False]['text':' Deserialize DatabaseName when multitenancySupport is enabled and featureFlagRequireTenantID is','line_number':113,'multiline':False]['text':' disabled.','line_number':114,'multiline':False]['text':' Assert tenantID is not initialized when multitenancySupport is disabled.','line_number':130,'multiline':False]['text':' Deserialize DatabaseName with prefixed tenantId when multitenancySupport and','line_number':140,'multiline':False]['text':' featureFlagRequireTenantId are disabled.','line_number':141,'multiline':False]['text':' Deserialize DatabaseName when multitenancySupport and featureFlagRequireTenantID are disabled.','line_number':153,'multiline':False]['text':' We will focus on specific configurations of the SerializationContext ie. Command Request and','line_number':164,'multiline':False]['text':' Command Reply as this is a defaulted parameter where tests that don't specify this parameter','line_number':165,'multiline':False]['text':' already test the default codepath.','line_number':166,'multiline':False]['text':' No prefix, no tenantId.','line_number':179,'multiline':False]['text':' request --> { ns: database.coll }','line_number':180,'multiline':False]['text':' Has prefix, no tenantId.','line_number':185,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':186,'multiline':False]['text':' No prefix, has tenantId.','line_number':191,'multiline':False]['text':' request --> { ns: database.coll }','line_number':192,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':197,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':198,'multiline':False]['text':' No prefix, no tenantId.','line_number':217,'multiline':False]['text':' request --> { ns: database.coll }','line_number':218,'multiline':False]['text':' Has prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':223,'multiline':False]['text':' request --> { ns: tenantId_database.coll}','line_number':224,'multiline':False]['text':' No prefix, has tenantId.','line_number':229,'multiline':False]['text':' request --> { ns: database.coll }','line_number':230,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':235,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':236,'multiline':False]['text':' Serializing with SerializationContext, with an expectPrefix set to true','line_number':242,'multiline':False]['text':' No prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':256,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':257,'multiline':False]['text':' Has prefix, no tenantId.','line_number':262,'multiline':False]['text':' request --> { ns: tenantId_database.coll, expectPrefix: true }','line_number':263,'multiline':False]['text':' No prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':268,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':269,'multiline':False]['text':' Has prefix, has tenantId.','line_number':274,'multiline':False]['text':' request -->  { ns: tenantId_database.coll, expectPrefix: true }','line_number':275,'multiline':False]['text':' No prefix, no tenantId.','line_number':290,'multiline':False]['text':' request --> { ns: database.coll }','line_number':291,'multiline':False]['text':' Has prefix, no tenantId. Storage catalog always returns prefixed dbname.','line_number':297,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':298,'multiline':False]['text':' No prefix, no tenantId.','line_number':307,'multiline':False]['text':' request --> { ns: database.coll }','line_number':308,'multiline':False]['text':' Has prefix, no tenantId. Storage catalog always returns prefixed dbname.','line_number':314,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':315,'multiline':False]['text':' No prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy in MT mode','line_number':334,'multiline':False]['text':' request --> { ns: database.coll }','line_number':335,'multiline':False]['text':'"TenantId must be set"','line_number':338,'multiline':True]['text':' Has prefix, no tenantId.','line_number':341,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':342,'multiline':False]['text':' No prefix, has tenantId.','line_number':348,'multiline':False]['text':' request --> { ns: database.coll }','line_number':349,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':355,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':356,'multiline':False]['text':' No prefix, no tenantId.','line_number':377,'multiline':False]['text':' request --> { ns: database.coll }','line_number':378,'multiline':False]['text':'"TenantId must be set"','line_number':381,'multiline':True]['text':' Has prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':384,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':385,'multiline':False]['text':' This is an anomaly, when no tenantId is supplied, we actually ignore expectPrefix, so we','line_number':387,'multiline':False]['text':' can't expect dbName.toString == dbnPrefixString as we will still attempt to parse the','line_number':388,'multiline':False]['text':' prefix as usual.','line_number':389,'multiline':False]['text':' No prefix, has tenantId.','line_number':394,'multiline':False]['text':' request --> { ns: database.coll }','line_number':395,'multiline':False]['text':' Has prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':401,'multiline':False]['text':' request --> { ns: tenantId_database.coll }','line_number':402,'multiline':False]['text':' No prefix, no tenantId.  *** we shouldn't see this from Atlas Proxy in MT mode','line_number':423,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':424,'multiline':False]['text':'"TenantId must be set"','line_number':427,'multiline':True]['text':' Has prefix, no tenantId.','line_number':430,'multiline':False]['text':' request --> { ns: tenantId_database.coll, expectPrefix: true }','line_number':431,'multiline':False]['text':' No prefix, has tenantId.  *** we shouldn't see this from Atlas Proxy','line_number':437,'multiline':False]['text':' request --> { ns: database.coll, expectPrefix: true }','line_number':438,'multiline':False]['text':' Has prefix, has tenantId.','line_number':444,'multiline':False]['text':' request -->  { ns: tenantId_database.coll, expectPrefix: true }','line_number':445,'multiline':False]['text':' Feature flag on with multitenancy off is not handled','line_number':463,'multiline':False]['text':' Clang is stupid, so to use ASSERT_THROWS_CODE (which internally creates a','line_number':478,'multiline':False]['text':' lambda function), we need to rebind the two structured bindings tenantId and','line_number':479,'multiline':False]['text':' nsStr to real variables.','line_number':480,'multiline':False]['text':' Expect deserialization to fail when we have a tenant ID and multitenancy','line_number':483,'multiline':False]['text':' support is disabled','line_number':484,'multiline':False]['text':' Expect serialization to drop the tenant ID when multitenancy support is','line_number':487,'multiline':False]['text':' disabled','line_number':488,'multiline':False]['text':' namespace mongo','line_number':499,'multiline':False]