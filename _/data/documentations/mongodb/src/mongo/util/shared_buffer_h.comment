['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A mutable, ref-counted buffer.
 ','line_number':52,'multiline':True]['text':'*
     * Resizes the buffer, copying the current contents.
     *
     * Like ::realloc() this can be called on a null SharedBuffer.
     *
     * This method is illegal to call if any other SharedBuffer instances share this buffer since
     * they wouldn't be updated and would still try to delete the original buffer.
     ','line_number':68,'multiline':True]['text':' Get newPtr into _holder with a ref-count of 1 without touching the current pointee of','line_number':82,'multiline':False]['text':' _holder which is now invalid.','line_number':83,'multiline':False]['text':'*
     * Resizes the buffer, copying the current contents. If shared, an exclusive copy is made.
     ','line_number':89,'multiline':True]['text':'*
     * Returns false if this object has exclusive access to the underlying buffer.
     * (That is, reference count == 1).
     ','line_number':114,'multiline':True]['text':'*
     * Returns the allocation size of the underlying buffer.
     * Users of this type must maintain the "used" size separately.
     ','line_number':122,'multiline':True]['text':' these are called automatically by boost::intrusive_ptr','line_number':138,'multiline':False]['text':' We placement new'ed a Holder in takeOwnership above,','line_number':145,'multiline':False]['text':' so we must destroy the object here.','line_number':146,'multiline':False]['text':'add_ref=','line_number':168,'multiline':True]['text':' NOTE: The 'false' above is because we have already initialized the Holder with a','line_number':169,'multiline':False]['text':' refcount of '1' in takeOwnership below. This avoids an atomic increment.','line_number':170,'multiline':False]['text':'*
     * Given a pointer to a region of un-owned data, prefixed by sufficient space for a
     * SharedBuffer::Holder object, return an SharedBuffer that owns the memory.
     *
     * This class will call free(holderPrefixedData), so it must have been allocated in a way
     * that makes that valid.
     ','line_number':173,'multiline':True]['text':' Initialize the refcount to 1 so we don't need to increment it in the constructor','line_number':181,'multiline':False]['text':' (see private Holder* constructor above).','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' TODO: Should dassert alignment of holderPrefixedData here if possible.','line_number':184,'multiline':False]['text':' Declared here so definition of 'Holder' is available.','line_number':191,'multiline':False]['text':'*
 * A constant view into a ref-counted buffer.
 *
 * Use SharedBuffer to allocate since allocating a const buffer is useless.
 ','line_number':202,'multiline':True]['text':'implicit','line_number':210,'multiline':True]['text':'*
     * Converts to a mutable SharedBuffer.
     * This is only legal to call if you have exclusive access to the underlying buffer.
     ','line_number':232,'multiline':True]['text':' The buffer holder size for 'ConstSharedBuffer' is the same as the one for 'SharedBuffer'','line_number':241,'multiline':False]['text':'*
 * A uniquely owned buffer. Has the same memory layout as SharedBuffer so that it
 * can be easily converted into a SharedBuffer.
 *
 * Layout:
 * | <size (4 bytes)> <unused (4 bytes)> | <data> |
 *
 * When converting to SharedBuffer, the entire prefix region is turned into a Holder.
 ','line_number':252,'multiline':True]['text':'*
     * Given memory which was released from a UniqueBuffer using the release() method,
     * returns a UniqueBuffer owning that memory.
     ','line_number':267,'multiline':True]['text':'*
     * Releases the buffer to the caller. The caller may not free the buffer themselves,
     * and must eventually turn it back into a UniqueBuffer using the reclaim() method.
     ','line_number':314,'multiline':True]['text':' The buffer holder size for 'UniqueBuffer' is the same as the one for 'SharedBuffer'','line_number':324,'multiline':False]['text':' Assumes the size has already been initialized.','line_number':330,'multiline':False]['text':' namespace mongo','line_number':344,'multiline':False]