['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' C4091: 'typedef ': ignored on left of '' when no variable is declared','line_number':36,'multiline':False]['text':' On Windows the symbol handler must be initialized at process startup and cleaned up at shutdown.','line_number':71,'multiline':False]['text':' This class wraps up that logic and gives access to the process handle associated with the','line_number':72,'multiline':False]['text':' symbol handler. Because access to the symbol handler API is not thread-safe, it also provides','line_number':73,'multiline':False]['text':' a lock/unlock method so the whole symbol handler can be used with a stdx::lock_guard.','line_number':74,'multiline':False]['text':' NOLINT','line_number':134,'multiline':False]['text':' We call this to ensure that the symbol handler is initialized in a single-threaded','line_number':139,'multiline':False]['text':' context. The constructor of SymbolHandler does all the error handling, so we don't need to','line_number':140,'multiline':False]['text':' do anything with the return value. Just make sure it gets called.','line_number':141,'multiline':False]['text':'*
 * Get the display name of the executable module containing the specified address.
 *
 * @param process               Process handle
 * @param address               Address to find
 ','line_number':145,'multiline':True]['text':'*
 * Get the display name and line number of the source file containing the specified address.
 *
 * @param process               Process handle
 * @param address               Address to find
 ','line_number':163,'multiline':True]['text':'*
 * Get the display text of the symbol and offset of the specified address.
 *
 * @param process                   Process handle
 * @param address                   Address to find
 * @param symbolInfo                Caller's pre-built SYMBOL_INFO struct (for efficiency)
 ','line_number':190,'multiline':True]['text':' namespace','line_number':302,'multiline':False]['text':' namespace mongo','line_number':339,'multiline':False]