['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "bits/types/siginfo_t.h"','line_number':34,'multiline':False]['text':' IWYU pragma: keep','line_number':43,'multiline':False]['text':' IWYU pragma: keep','line_number':58,'multiline':False]['text':'
 * WARNING: PLEASE READ BEFORE CHANGING THIS MODULE
 *
 * All code in this module must be signal-friendly. Before adding any system
 * call or other dependency, please make sure that this still holds.
 *
 * All code in this file follows this pattern:
 *   Generic code
 *   #ifdef _WIN32
 *       Windows code
 *   #else
 *       Posix code
 *   #endif
 *
 ','line_number':67,'multiline':True]['text':' only sent to services, and only in pre-Vista Windows; FALSE means ignore','line_number':112,'multiline':False]['text':'*
 * Filled by the `waitForSignal` function.
 * Only Linux has `sigwaitinfo` to synchronously get a signal with its `siginfo_t`.
 * Only Linux has a procfs from which to read metadata for such signal sending process.
 * So outside Linux we just get the `sig`.
 ','line_number':163,'multiline':True]['text':' defined(__linux__)','line_number':173,'multiline':False]['text':'* Fill `result` with a caught signal from `sigset`. Return true on success. ','line_number':176,'multiline':True]['text':' __linux__','line_number':226,'multiline':False]['text':' log rotate signal','line_number':229,'multiline':False]['text':' Rate limit: 1 second per signal','line_number':231,'multiline':False]['text':' If there's a stackTraceSignal at all, catch it here so we don't die from it.','line_number':250,'multiline':False]['text':' Can dump all threads if we can, else silently ignore it.','line_number':251,'multiline':False]['text':' interrupt/terminate signal','line_number':259,'multiline':False]['text':'*
 * The signals in `kSignalProcessingThreadExclusives` will be delivered to this thread only,
 * to ensure the db and log mutexes aren't held.
 ','line_number':264,'multiline':True]['text':' On this thread, block the stackTraceSignal and rely on a signal wait to deliver it.','line_number':280,'multiline':False]['text':' Must happen after blocking the signal, so this thread doesn't get','line_number':291,'multiline':False]['text':' confused and forward the stack trace signal to itself.','line_number':292,'multiline':False]['text':' namespace','line_number':304,'multiline':False]['text':' The signals that should be handled by the SignalProcessingThread, once it is started via','line_number':321,'multiline':False]['text':' startSignalProcessingThread().','line_number':322,'multiline':False]['text':' On a Unixlike build without the stacktrace behavior, we still want to handle SIGUSR2 to','line_number':329,'multiline':False]['text':' print a message, but it must only go to the signalProcessingThread, not on other threads.','line_number':330,'multiline':False]['text':' It's as if stackTraceSignal (e.g. SIGUSR2) is a member of kSignalProcessingThreadExclusives.','line_number':331,'multiline':False]['text':' Mask signals in the current (only) thread. All new threads will inherit this mask.','line_number':335,'multiline':False]['text':' Spawn a thread to capture the signals we just masked off.','line_number':337,'multiline':False]['text':' namespace mongo','line_number':350,'multiline':False]