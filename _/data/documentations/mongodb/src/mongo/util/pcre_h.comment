['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * Mongo's C++ wrapper for the PCRE2 library. Applies mongo-isms like
 * StringData.
 *
 * This wrapper is deliberately low-level and intended to be ignorant of mongo
 * server code's app-level preferences. It provides only a general-purpose PCRE2
 * wrapper.
 *
 * Care is taken to make this library self-contained through strict
 * encapsulation. No code depending on this library needs to include the pcre2
 * header or take on a dependency on the third_party/pcre2 library.
 ','line_number':45,'multiline':True]['text':'*
 * The complete list of PCRE2 errors, with the `PCRE2_` prefix stripped.
 * These are publicly available as members of the `Errc` enum class below.
 * E.g., `mongo::pcre::Errc::ERROR_BAD_SUBPATTERN_REFERENCE`.
 ','line_number':58,'multiline':True]['text':'','line_number':230,'multiline':True]['text':'*
 * These values are usable as `CompileOptions` OR `MatchOptions`.
 * See `CompileAndMatchOptions` below.
 ','line_number':232,'multiline':True]['text':'','line_number':240,'multiline':True]['text':'* Options for the `Regex` constructor. See `CompileOptions`. ','line_number':242,'multiline':True]['text':'','line_number':271,'multiline':True]['text':'* Options for match and/or substitute calls. See `MatchOptions`. ','line_number':273,'multiline':True]['text':'','line_number':293,'multiline':True]['text':'* Extended compile options for the compile context. Not yet used. ','line_number':296,'multiline':True]['text':'','line_number':305,'multiline':True]['text':' 0','line_number':306,'multiline':False]['text':'*
 * The `std::error_code` enum type for the PCRE2 error number space.
 * `std::is_error_code_enum` is specialized for this enum type, which enables
 * `Errc` to be implicitly convertible to `std::error_code`.
 ','line_number':308,'multiline':True]['text':'* Category for a pcre2 API error code. ','line_number':320,'multiline':True]['text':'* Wrap a pcre2 API error code in a std::error_code{e,errorCategory()}. ','line_number':323,'multiline':True]['text':'*
 * Creates a `std::error_code` from an `Errc`.
 * An implicit `std::error_code` constructor finds this function by ADL.
 ','line_number':328,'multiline':True]['text':'*
 * A typesafe wrapper around `uint32_t`, representing the bitfields of PCRE2
 * options. A CRTP base class for the `Options` types.
 ','line_number':337,'multiline':True]['text':' namespace detail','line_number':371,'multiline':False]['text':'* The bitfield of Regex compile (constructor) options. ','line_number':373,'multiline':True]['text':'* The bitfield of `Regex` match options. ','line_number':379,'multiline':True]['text':'*
 * A few of the PCRE2 options' bit positions are usable as compile options OR
 * match options. We model this by making this type implicitly convertible to
 * both `CompileOptions` and `MatchOptions`.
 ','line_number':385,'multiline':True]['text':'*
 * @{
 * The `CompileOptions`, `MatchOptions`, and `CompileAndMatchOptions` values
 * are declared as `extern const` and not as more basic enum or constexpr values.
 * This arrangement allows the variables to be given definitions in the
 * pcre.cpp file, where the pcre2 library's corresponding macros are available
 * to their initializers.
 *
 * It can be assumed that these variables have static constant initialization.
 * That is, they are available for use in static initializers.
 *
 * The options values are given an inilne namespace so they can be brought into
 * a local scope with a `using namespace pcre::options;` directive.
 ','line_number':401,'multiline':True]['text':' namespace options','line_number':427,'multiline':False]['text':'* @} ','line_number':428,'multiline':True]['text':' namespace detail','line_number':435,'multiline':False]['text':'*
 * Wrapper class encapsulating the PCRE2 regular expression library.
 * See https://www.pcre.org/current/doc/html/
 ','line_number':437,'multiline':True]['text':'* The pattern string from the constructor. ','line_number':457,'multiline':True]['text':'* The Options from the constructor. ','line_number':460,'multiline':True]['text':'* True if this Regex was created without error. ','line_number':463,'multiline':True]['text':'* The error saved from the compile of this Regex. ','line_number':466,'multiline':True]['text':'* Position in the pattern at which the compile `error` occurred. ','line_number':469,'multiline':True]['text':'* Count of subpattern captures in this pattern. ','line_number':472,'multiline':True]['text':'* The size of the compiled regex. ','line_number':475,'multiline':True]['text':'*
     * Creates a MatchData by applying this regex to an `input` string.
     *
     * Options supplied at `match` time cannot be optimized as well as behaviors
     * like '^', '$' built into the Regex directly.
     ','line_number':478,'multiline':True]['text':'* Can avoid a string copy when input will outlive the returned MatchData. ','line_number':488,'multiline':True]['text':'*
     * Replaces occurrences in `str` of this pattern with `replacement`.
     * Additional substitute `options` can change behavior. Important ones:
     *
     *  - SUBSTITUTE_GLOBAL: Replace all occurrences
     *  - SUBSTITUTE_LITERAL: No $ variable expansions in replacement
     *  - SUBSTITUTE_EXTENDED: Better escapes, bash-like substitutions
     *
     * See https://www.pcre.org/current/doc/html/pcre2api.html#SEC36
     ','line_number':493,'multiline':True]['text':'*
 * Represents the result of a Regex match (or matchView operation).
 * The MatchData refers to the Regex that produced it, so the Regex
 * must outlive any MatchData it produces.
 ','line_number':512,'multiline':True]['text':'* Implementation detail used by Regex to create these objects. ','line_number':519,'multiline':True]['text':'* True if the match succeeded. ','line_number':527,'multiline':True]['text':'*
     * Returns the number of subpatterns captured by this match,
     * Does not count the `m[0]` element: only subpattern captures.
     ','line_number':530,'multiline':True]['text':'*
     * @{
     * Returns a match group by index or by name. Element zero (by index) is
     * the full matched substring, followed by captures.
     *
     * An empty and null capture are slightly different and can be
     * distinguished by their rawData pointer. The difference doesn't
     * often matter though. E.g.,
     *    Regex{"(A|B(C))"}.match("A")[2].rawData() == nullptr
     * because capture group 2 (the `C`) was on the inactive `B` branch.
     * Throws `ExceptionFor<NoSuchKey>` if capture not found.
     * Requires `i <= captureCount()`.
     ','line_number':536,'multiline':True]['text':'* @} ','line_number':551,'multiline':True]['text':'*
     * All capture groups. For MatchData `m`:
     *     {m[1]... m[captureCount()]};
     ','line_number':553,'multiline':True]['text':'* Same as `getCaptures`, but as `std::vector<std::string>`. ','line_number':559,'multiline':True]['text':'*
     * The matched substring, followed by the `getCaptures()` list.
     * For MatchData `m`:
     *     {m[0], m[1]... m[m.captureCount()]};
     ','line_number':564,'multiline':True]['text':'* Same as `getMatchList`, but as `std::vector<std::string>`. ','line_number':571,'multiline':True]['text':'* Error saved from the match that created this object. ','line_number':576,'multiline':True]['text':'*
     * The input to the match that created this object. If this MatchData was
     * created by a `match` call, the `input` refers to a string owned by this
     * object. If this MatchData was created by a `matchView` call, then this
     * `input` result refers to the StringData provided to it.
     ','line_number':579,'multiline':True]['text':' namespace mongo::pcre','line_number':614,'multiline':False]['text':' namespace std','line_number':619,'multiline':False]