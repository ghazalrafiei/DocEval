['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' On UNIX, make a connected pair of PF_LOCAL (aka PF_UNIX) sockets via the native 'socketpair'','line_number':55,'multiline':False]['text':' call. The 'type' parameter should be one of SOCK_STREAM, SOCK_DGRAM, SOCK_SEQPACKET, etc.','line_number':56,'multiline':False]['text':' For Win32, we don't have a native socketpair function, so we hack up a connected PF_INET','line_number':57,'multiline':False]['text':' pair on a random port.','line_number':58,'multiline':False]['text':' namespace detail','line_number':83,'multiline':False]['text':' Create a listen socket and a connect socket.','line_number':88,'multiline':False]['text':' Bind the listen socket on port zero, it will pick one for us, and start it listening','line_number':93,'multiline':False]['text':' for connections.','line_number':94,'multiline':False]['text':' Read out the port to which we bound.','line_number':114,'multiline':False]['text':' I'd prefer to avoid trying to do this non-blocking on Windows. Just spin up some','line_number':145,'multiline':False]['text':' threads to do the connect and acccept.','line_number':146,'multiline':False]['text':' We can just use ::socketpair and wrap up the result in a Socket.','line_number':187,'multiline':False]['text':' PF_LOCAL is the POSIX name for Unix domain sockets, while PF_UNIX','line_number':189,'multiline':False]['text':' is the name that BSD used.  We use the BSD name because it is more','line_number':190,'multiline':False]['text':' widely supported (e.g. Solaris 10).','line_number':191,'multiline':False]['text':' This should match the name of the fail point declared in sock.cpp.','line_number':204,'multiline':False]['text':' You must queue at least one byte on the send socket before calling this function.','line_number':239,'multiline':False]['text':' This isn't great, because we don't have a guarantee that multiple sends will be','line_number':242,'multiline':False]['text':' captured in one recv. However, sock doesn't let us pass flags into recv, so we','line_number':243,'multiline':False]['text':' can't make this non blocking, and therefore can't risk another call.','line_number':244,'multiline':False]['text':' Channel should be working again','line_number':275,'multiline':False]['text':' data for recv','line_number':292,'multiline':False]['text':' data for recv','line_number':295,'multiline':False]['text':' data for recv','line_number':301,'multiline':False]['text':' queue 1 byte','line_number':309,'multiline':False]['text':' Fail to queue another byte','line_number':311,'multiline':False]['text':' Failed byte should not have been transmitted.','line_number':314,'multiline':False]['text':' Ensure that calling send doesn't actually enqueue data to the socket','line_number':318,'multiline':False]['text':' queue 1 byte','line_number':323,'multiline':False]['text':' Fail to queue another byte','line_number':325,'multiline':False]['text':' Failed byte should not have been transmitted.','line_number':328,'multiline':False]['text':' Fail to recv that byte','line_number':338,'multiline':False]['text':' Failed byte should still be queued to recv.','line_number':341,'multiline':False]['text':' Channel should be working again','line_number':343,'multiline':False]['text':' namespace','line_number':349,'multiline':False]