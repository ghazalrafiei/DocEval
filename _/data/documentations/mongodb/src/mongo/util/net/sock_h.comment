['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' not _WIN32','line_number':45,'multiline':False]['text':' _WIN32','line_number':79,'multiline':False]['text':'*
 * thin wrapper around file descriptor and system calls
 * todo: ssl
 ','line_number':81,'multiline':True]['text':'* In some cases the timeout will actually be 2x this value - eg we do a partial send,
        then the timeout fires, then we try to send again, then the timeout fires again with
        no data sent, then we detect that the other side is down.

        Generally you don't want a timeout, you should be very prepared for errors if you set one.
    ','line_number':94,'multiline':True]['text':'* The correct way to initialize and connect to a socket is as follows: (1) construct the
     *  SockAddr, (2) check whether the SockAddr isValid(), (3) if the SockAddr is valid, a
     *  Socket may then try to connect to that SockAddr. It is critical to check the return
     *  value of connect as a false return indicates that there was an error, and the Socket
     *  failed to connect to the given SockAddr. This failure may be due to ConnectBG returning
     *  an error, or due to a timeout on connection, or due to the system socket deciding the
     *  socket is invalid.
     ','line_number':104,'multiline':True]['text':'*
     * Connect using a default connect timeout of min(_timeout * 1000, kMaxConnectTimeoutMS)
     ','line_number':114,'multiline':True]['text':' recv len or throw SocketException','line_number':123,'multiline':False]['text':'*
     * This sets the Sock's socket descriptor to be invalid and returns the old descriptor. This
     * only gets called in listen.cpp in Listener::_accepted(). This gets called on the listener
     * thread immediately after the thread creates the Sock, so it doesn't need to be thread-safe.
     ','line_number':162,'multiline':True]['text':'* secures inline
     *  ssl - Pointer to the global SSLManager.
     *  remoteHost - The hostname of the remote server.
     ','line_number':185,'multiline':True]['text':'*
     * This function calls SSL_accept() if SSL-encrypted sockets
     * are desired. SSL_accept() waits until the remote host calls
     * SSL_connect(). The return value is the subject name of any
     * client certificate provided during the handshake.
     *
     * @firstBytes is the first bytes received on the socket used
     * to detect the connection SSL, @len is the number of bytes
     *
     * This function may throw SocketException.
     ','line_number':194,'multiline':True]['text':'*
     * @return the time when the socket was opened.
     ','line_number':207,'multiline':True]['text':'* sends dumbly, just each buffer at a time ','line_number':220,'multiline':True]['text':'* raw send, same semantics as ::send with an additional context parameter ','line_number':223,'multiline':True]['text':'* raw recv, same semantics as ::recv ','line_number':226,'multiline':True]['text':' passed to log() when logging errors','line_number':243,'multiline':False]['text':'* true until the first packet has been received or an outgoing connect has been made ','line_number':245,'multiline':True]['text':' namespace mongo','line_number':249,'multiline':False]