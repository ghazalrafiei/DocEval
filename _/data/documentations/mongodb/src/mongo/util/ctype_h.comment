['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Replacements for <cctype> or <ctype.h> functions and macros.
 * These should be used instead of the corresponding standard functions.
 * Note the camel-case spelling to distinguish these from the C++ functions
 * and especially the C macros.
 *
 * Regarding the capitalization of these functions: POSIX defines standard
 * identifiers for the 12 character classes. Each "is"- function here directly
 * references and evokes such a POSIX identifier, so they are not
 * camel-cased as ordinary English phrases (so `isAlnum` not `isAlNum`).
 *
 * <https://en.wikipedia.org/wiki/Regular_expression#Character_classes>
 *
 * Problems with the standard functions:
 *
 *   - They accept int (to accept the EOF of -1 and integrate with cstdio).
 *     Passing negative char values other than EOF is undefined behavior!
 *     They cannot be used directly in std algorithms operating on char
 *     arguments because of this, say to `std::transform` or `std::find_if`
 *     on a `std::string`. You need a lambda and it has to do a cast.
 *   - Most are locale dependent, so they have to be slow. Dropping
 *     locale makes the "is"- functions 200% faster.
 *   - They return int instead of bool for C compatibility. Undesirable in C++.
 *   - In C they are macros, so they are very different entities depending on
 *     the subtle choice of #include <cctype> vs #include <ctype.h>.
 *   - Support for the EOF value bloats the lookup tables and carves out a
 *     surprising special case.
 *
 * The `<cctype>` character classification functions are a subtle source of bugs.
 * See warnings at <https://en.cppreference.com/w/cpp/header/cctype>.
 *
 * The proper call sequence is often not done, creating bugs. So
 * here are some more suitable C++17 implementations. We can make our versions
 * constexpr and noexcept because they don't depend on the locale or other
 * dynamic program state.
 ','line_number':30,'multiline':True]['text':'* Define a bit position for each character class queryable with this API. ','line_number':75,'multiline':True]['text':'< [upper] UPPERCASE','line_number':77,'multiline':False]['text':'< [lower] lowercase','line_number':78,'multiline':False]['text':'< [alpha] Alphabetic (upper case or lower case)','line_number':79,'multiline':False]['text':'< [digit] Decimal digit','line_number':80,'multiline':False]['text':'< [xdigit] Hexadecimal digit (upper case or lower case: [0-9A-Fa-f])','line_number':81,'multiline':False]['text':'< [space] Whitespace ([ \t\r\n\f\v])','line_number':82,'multiline':False]['text':'< [print] Printing (non-control chars)','line_number':83,'multiline':False]['text':'< [graph] Graphical (non-control, non-whitespace)','line_number':84,'multiline':False]['text':'< [blank] Blank (' ', '\t')','line_number':85,'multiline':False]['text':'< [cntrl] Control character: 0x00-0x1f, and 0x7f (DEL)','line_number':86,'multiline':False]['text':'< [punct] Punctuation (graphical, but not alphanumeric)','line_number':87,'multiline':False]['text':'< [alnum] Alphanumeric (letter or digit)','line_number':88,'multiline':False]['text':'* Returns the bitwise-or of all `ClassBit` pertinent to character `c`.  ','line_number':91,'multiline':True]['text':'* The character class memberships for each char. ','line_number':123,'multiline':True]['text':'* Lookup table for `toUpper`. ','line_number':135,'multiline':True]['text':'* Lookup table for `toLower`. ','line_number':143,'multiline':True]['text':' namespace detail','line_number':151,'multiline':False]['text':'*
 * These 12 "is"- functions exactly match the <cctype> definitions for the
 * POSIX (or C) locale. See the corresponding definitions in <cctype>.
 * <https://en.cppreference.com/w/cpp/header/cctype>
 * See notes above.
 ','line_number':154,'multiline':True]['text':'*
 * Returns the upper case of `c` if `c` is lower case, otherwise `c`.
 * Unlike `std::toupper`, is not affected by locale. See notes above.
 ','line_number':197,'multiline':True]['text':'*
 * Returns the lower case of `c` if `c` is upper case, otherwise `c`.
 * Unlike `std::tolower`, is not affected by locale. See notes above.
 ','line_number':205,'multiline':True]['text':' namespace mongo::ctype','line_number':213,'multiline':False]