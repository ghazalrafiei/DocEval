['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This test performs the simplest idempotent set of successful operations on a single level L1:','line_number':89,'multiline':False]['text':' - add(L1) suceeds because nothing is set','line_number':90,'multiline':False]['text':' - remove(L1) suceeds because only L1 is set','line_number':91,'multiline':False]['text':' This test performs an exhaustive idempotent set of operations on a single Level L1:','line_number':102,'multiline':False]['text':' - remove(L1) fails because nothing is set','line_number':103,'multiline':False]['text':' - add(L1) suceeds because nothing is set','line_number':104,'multiline':False]['text':' - add(L1) fails because L1 is set','line_number':105,'multiline':False]['text':' - remove(L1) suceeds because L1 is set','line_number':106,'multiline':False]['text':' - remove(L1) fails because nothing is set','line_number':107,'multiline':False]['text':' Removing an empty level fails','line_number':112,'multiline':False]['text':' Adding an empty level succeeds','line_number':115,'multiline':False]['text':' Adding a full level fails','line_number':118,'multiline':False]['text':' Removing a full level succeeds','line_number':121,'multiline':False]['text':' Removing an empty level again fails','line_number':124,'multiline':False]['text':' This test verifies that interleaved acquire releases fail as expected for two levels L1 and','line_number':130,'multiline':False]['text':' L2 where L1 > L2:','line_number':131,'multiline':False]['text':' - add(L2) suceeds because L1 > L2','line_number':132,'multiline':False]['text':' - remove(L1) fails because L1 > L2','line_number':133,'multiline':False]['text':' Set the first level','line_number':136,'multiline':False]['text':' Adding the current level succeeds','line_number':141,'multiline':False]['text':' Removing the lag level fails','line_number':144,'multiline':False]['text':' This test verifies that interleaved acquire releases fail as expected for two levels L1 and','line_number':158,'multiline':False]['text':' L2 where L1 < L2:','line_number':159,'multiline':False]['text':' - add(L2) fails because L1 < L2','line_number':160,'multiline':False]['text':' - remove(L1) suceeds because L1 < L2','line_number':161,'multiline':False]['text':' Set the first level','line_number':164,'multiline':False]['text':' Adding the current level fails','line_number':169,'multiline':False]['text':' Removing the lag level succeeds','line_number':172,'multiline':False]['text':' This test verifies that the expected set of sequential operations succeed:','line_number':186,'multiline':False]['text':' - add(L) for every L such that every previous L(n-1) > L','line_number':187,'multiline':False]['text':' - remove(L) for every L such that every previous L(n-1) < L','line_number':188,'multiline':False]['text':' Adding the current level succeeds','line_number':193,'multiline':False]['text':' Removing the current level succeeds','line_number':198,'multiline':False]['text':' This test verifies that the expected set of sequential operations fail:','line_number':212,'multiline':False]['text':' - add(L) for every L such that every previous L(n-1) < L','line_number':213,'multiline':False]['text':' - remove(L) for every L such that every previous L(n-1) > L','line_number':214,'multiline':False]['text':' Set the first level','line_number':219,'multiline':False]['text':' Adding the current level fails','line_number':223,'multiline':False]['text':' Removing the current level fails','line_number':229,'multiline':False]['text':' firstLevel is the only Level, so it succeeds','line_number':233,'multiline':False]['text':' namespace','line_number':245,'multiline':False]['text':' namespace mongo','line_number':246,'multiline':False]