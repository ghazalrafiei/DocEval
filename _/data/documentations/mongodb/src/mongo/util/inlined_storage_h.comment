['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * An InlinedStorage is a simplifed version of `absl::InlinedVector`, and optimized for perfomance
 * and minimal overhead. It has the capability to inline a maximum of 'InlinedCapacity' elements of
 * the 'BT' type. When the number of elements exceeds the 'InlinedCapacity' threshold, the data is
 * then stored in the heap.
 ','line_number':42,'multiline':True]['text':'*
     * Resize the storage. Newly added memory is zeroed.
     ','line_number':159,'multiline':True]['text':'*
     * Returns true if the predicate returns true for all correspondong blocks of the storages.
     ','line_number':179,'multiline':True]['text':'*
     * Returns true if the predicate returns true for att least a pair of correspondong blocks of
     * the storages.
     ','line_number':202,'multiline':True]['text':' Inlined -> Inlined: do nothing, just update the size.','line_number':249,'multiline':False]['text':' On heap -> on heap. Do nothing, just update the size and forget that we actually','line_number':250,'multiline':False]['text':' allocated more memory than we use. Here we trade off memory for CPU.','line_number':251,'multiline':False]['text':' On heap -> Inlined: copy data to inlined and free the buffer.','line_number':254,'multiline':False]['text':' Exception safety note: no exceptions are expected be raised in std::copy(),','line_number':256,'multiline':False]['text':' so the buffer will be freed safely.','line_number':257,'multiline':False]['text':' No exceptions are expected here, otherwise we have to update '_size' before.','line_number':261,'multiline':False]['text':' Inlined -> Inlined. Update the size, and zero new memory.','line_number':271,'multiline':False]['text':' Inlined -> on heap. Copy the data and free newly added memory.','line_number':274,'multiline':False]['text':' Copy old blocks.','line_number':276,'multiline':False]['text':' Zero newly added blocks.','line_number':281,'multiline':False]['text':' On heap -> Allocated: Allocate new buffer, copy the data, zero new','line_number':285,'multiline':False]['text':' data, free the old buffer.','line_number':286,'multiline':False]['text':' Copy old blocks.','line_number':288,'multiline':False]['text':' Zero newly added blocks.','line_number':294,'multiline':False]['text':'
 * Return true if 'lhs' storage is lexicographically less than 'rhs', and false otherwise.
 ','line_number':330,'multiline':True]['text':' namespace mongo','line_number':360,'multiline':False]