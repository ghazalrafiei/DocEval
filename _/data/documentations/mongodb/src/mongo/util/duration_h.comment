['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace duration_detail','line_number':74,'multiline':False]['text':'','line_number':76,'multiline':False]['text':' Streaming output operators for common duration types. Writes the numerical value followed by','line_number':77,'multiline':False]['text':' an abbreviated unit, without a space.','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' E.g., std::cout << Minutes{5} << std::endl; should produce the following:','line_number':80,'multiline':False]['text':' 5min','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':'*
 * Casts from one Duration precision to another.
 *
 * May throw a AssertionException if "from" is of lower-precision type and is outside the range of
 * the ToDuration. For example, Seconds::max() cannot be represented as a Milliseconds, and so
 * attempting to cast that value to Milliseconds will throw an exception.
 ','line_number':90,'multiline':True]['text':'*
 * Convenience method for reading the count of a duration with specified units.
 *
 * Use when logging or comparing to integers, to ensure that you're using
 * the units you intend.
 *
 * E.g., log() << durationCount<Seconds>(some duration) << " seconds";
 ','line_number':120,'multiline':True]['text':'*
 * Type representing a duration using a 64-bit counter.
 *
 * The Period template argument is a std::ratio describing the units of the duration type.
 *
 * This type's behavior is similar to std::chrono::duration, but instead of undefined behavior on
 * overflows and other conversions, throws exceptions.
 ','line_number':138,'multiline':True]['text':'*
     * Type with static bool "value" set to true if this Duration type is higher precision than
     * OtherDuration. That is, if OtherDuration::period > period.
     ','line_number':191,'multiline':True]['text':'*
     * Type with static bool "value" set to true if this Duration type is lower precision than
     * OtherDuration. That is, if OtherDuration::period > period.
     ','line_number':205,'multiline':True]['text':'*
     * Function that returns true if period > OtherDuration::period.
     ','line_number':219,'multiline':True]['text':'*
     * Function that returns true if period < OtherDuration::period.
     ','line_number':227,'multiline':True]['text':'*
     * Constructs the zero duration.
     ','line_number':247,'multiline':True]['text':'*
     * Constructs a duration representing "r" periods.
     ','line_number':252,'multiline':True]['text':'*
     * Implicit converting constructor from a lower-precision duration to a higher-precision one, as
     * by duration_cast.
     *
     * It is a compilation error to convert from higher precision to lower, or if the conversion
     * would cause an integer overflow.
     ','line_number':266,'multiline':True]['text':'* Implicitly convertible if `FromPeriod` is a multiple of `period`. ','line_number':273,'multiline':True]['text':'*
     * Returns the number of periods represented by this duration.
     *
     * It is better to use durationCount<DesiredDurationType>(value), since it makes the unit of the
     * count clear at the call site.
     ','line_number':289,'multiline':True]['text':'*
     * Compares this duration to another duration of the same type.
     *
     * Returns 1, -1 or 0 depending on whether this duration is greater than, less than or equal to
     * the other duration, respectively.
     ','line_number':299,'multiline':True]['text':'*
     * Compares this duration to a lower-precision duration, "other".
     ','line_number':309,'multiline':True]['text':'','line_number':340,'multiline':False]['text':' In-place arithmetic operators','line_number':341,'multiline':False]['text':'','line_number':342,'multiline':False]['text':'*
 * Returns the sum of two durations, "lhs" and "rhs".
 ','line_number':441,'multiline':True]['text':'*
 * Returns the result of subtracting "rhs" from "lhs".
 ','line_number':454,'multiline':True]['text':'*
 * Returns the product of a duration "d" and a unitless integer, "scale".
 ','line_number':467,'multiline':True]['text':'*
 * Returns duration "d" divided by unitless integer "scale".
 ','line_number':482,'multiline':True]['text':'*
 * Make a std::chrono::duration from an arithmetic expression and a period ratio.
 * This does not do any math or precision changes. It's just a type-deduced wrapper
 * that attaches a period to a number for typesafety. The output std::chrono::duration
 * will retain the Rep type and value of the input argument.
 *
 * E.g:
 *      int waited = 123;  // unitless, type-unsafe millisecond count.
 *      auto dur = deduceChronoDuration<std::milli>(waited);
 *      static_assert(std::is_same_v<decltype(dur),
 *                                   std::chrono::duration<int, std::milli>>);
 *      invariant(dur.count() == 123);
 *
 * Note that std::chrono::duration<int, std::milli> is not std::milliseconds,
 * which has a different (unspecified) Rep type.
 *
 * Then mongo::duration_cast can convert the deduced std::chrono::duration to
 * mongo::Duration, or `std::chrono::duration_cast` be used to adjust the rep
 * to create a more canonical std::chrono::duration:
 *
 *      auto durMongo = duration_cast<Milliseconds>(dur);
 *      auto durChrono = duration_cast<std::milliseconds>(dur);
 *
 * Order the cast operations carefully to avoid losing range or precision.
 ','line_number':512,'multiline':True]['text':' namespace mongo','line_number':542,'multiline':False]