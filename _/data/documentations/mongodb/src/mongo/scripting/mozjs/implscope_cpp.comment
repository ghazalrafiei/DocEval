['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':61,'multiline':False]['text':' IWYU pragma: keep','line_number':69,'multiline':False]['text':' Generated symbols for JS files','line_number':98,'multiline':False]['text':' namespace JSFiles','line_number':102,'multiline':False]['text':'*
 * The threshold (as a fraction of the max) after which garbage collection will be run during
 * interrupts.
 ','line_number':112,'multiline':True]['text':'*
 * The number of bytes to allocate after which garbage collection is run
 * The default is quite low and doesn't seem to directly correlate with
 * malloc'd bytes. We bound JS heap usage by JSHeapLimit independent of this GC limit.
 ','line_number':118,'multiline':True]['text':'*
 * The size, in bytes, of each "stack chunk". 8192 is the recommended amount
 * from mozilla
 ','line_number':125,'multiline':True]['text':'*
 * Maximum size in bytes of an error string. It should be smaller than 'BufferMaxSize' as it may
 * share the buffer with error code, call stack, etc.
 ','line_number':131,'multiline':True]['text':'*
 * Runtime's can race on first creation (on some function statics), so we just
 * serialize the initial Runtime creation.
 ','line_number':137,'multiline':True]['text':' namespace','line_number':147,'multiline':False]['text':' Log any error state in the JS context.','line_number':158,'multiline':False]['text':' You may wonder what the point is to making this thread local','line_number':162,'multiline':False]['text':' variable atomic. We found that without making this atomic, in','line_number':163,'multiline':False]['text':' dynamic builds, the hang analyzer (GDB script) would sometimes see','line_number':164,'multiline':False]['text':' a stale value here which pointed to a destroyed scope. The theory','line_number':165,'multiline':False]['text':' is that this is due to the different TLS model that applies when','line_number':166,'multiline':False]['text':' building a dynamic library. We never dug down to a complete root','line_number':167,'multiline':False]['text':' cause, but emperically demonstrated that making it atomic allowed','line_number':168,'multiline':False]['text':' the hang analyzer tests to pass. Given that we do intend to read','line_number':169,'multiline':False]['text':' this from "another thread" (being GDB), it makes some sense. Or it','line_number':170,'multiline':False]['text':' might be a GDB bug of some sort that forcing it into an atomic','line_number':171,'multiline':False]['text':' papers over.','line_number':172,'multiline':False]['text':' NOLINT','line_number':173,'multiline':False]['text':' getPooledScope may call registerOperation with a nullptr, so we have to','line_number':195,'multiline':False]['text':' check for that here.','line_number':196,'multiline':False]['text':' If we are on the right thread, in the middle of an operation, and we have a','line_number':218,'multiline':False]['text':' registered opCtx, then we should check the opCtx for interrupts.','line_number':219,'multiline':False]['text':' If we didn't have a kill status, someone is killing us by hand here.','line_number':224,'multiline':False]['text':' Check our initial kill status (which might be fine).','line_number':263,'multiline':False]['text':' don't collect stats unless verbose','line_number':290,'multiline':False]['text':'*
     * The maximum amount of memory to be given out per thread to mozilla. We
     * manage this by trapping all calls to malloc, free, etc. and keeping track of
     * counts in some thread locals. If 'jsHeapLimitMB' is specified then we use this instead of
     * the engine limit, given it does not exceed the engine limit.
     ','line_number':338,'multiline':True]['text':' If we've already made a runtime, just proceed','line_number':359,'multiline':False]['text':' We turn on a variety of optimizations if the jit is enabled','line_number':367,'multiline':False]['text':' The process-wide baseline JIT is enabled as part of creating the first JS','line_number':370,'multiline':False]['text':' runtime. If JIT is later disabled for a specific JS runtime, then the ION JIT','line_number':371,'multiline':False]['text':' engine gets disabled, but the baseline JIT is still enabled.','line_number':372,'multiline':False]['text':' The process-wide baseline JIT is disabled as part of creating the first JS','line_number':387,'multiline':False]['text':' runtime. If JIT is later enabled for a specific JS runtime, then the ION JIT','line_number':388,'multiline':False]['text':' engine gets enabled.','line_number':389,'multiline':False]['text':' If this is the first one, hold the lock until after the first','line_number':406,'multiline':False]['text':' one's done','line_number':407,'multiline':False]['text':' We fudge by 64k for a two reasons. First, it appears','line_number':426,'multiline':False]['text':' that the internal recursion checks that SM performs can','line_number':427,'multiline':False]['text':' have stack usage between checks of more than 32k in','line_number':428,'multiline':False]['text':' some builds. Second, some platforms report the guard','line_number':429,'multiline':False]['text':' page (in the linux sense) as "part of the stack", even','line_number':430,'multiline':False]['text':' though accessing that page will fault the process. We','line_number':431,'multiline':False]['text':' don't have a good way of getting information about the','line_number':432,'multiline':False]['text':' guard page on those platforms.','line_number':433,'multiline':False]['text':'','line_number':434,'multiline':False]['text':' TODO: What if we are running on a platform with very','line_number':435,'multiline':False]['text':' large pages, like 4MB?','line_number':436,'multiline':False]['text':' From experimentation, we need a larger reservation of 96k since debug ppc64le','line_number':440,'multiline':False]['text':' code needs more stack space to process stack overflow. In debug builds, more','line_number':441,'multiline':False]['text':' variables are stored on the stack which increases the stack pressure. It does not','line_number':442,'multiline':False]['text':' affects non-debug builds.','line_number':443,'multiline':False]['text':' Windows is greedy for stack space while processing exceptions.','line_number':446,'multiline':False]['text':' The memory limit is in megabytes','line_number':455,'multiline':False]['text':' install global utility functions','line_number':529,'multiline':False]['text':' install process-specific utilities in the global scope (dependancy: types.js,','line_number':533,'multiline':False]['text':' assert.js)','line_number':534,'multiline':False]['text':' There may have already been an error reported by SpiderMonkey. If not, then we use','line_number':574,'multiline':False]['text':' the active C++ exception as the cause of the error.','line_number':575,'multiline':False]['text':' We intentionally don't transmit an JSInterpreterFailureWithStack error over the','line_number':581,'multiline':False]['text':' wire because of the complexity it'd entail on the recipient to reach inside to','line_number':582,'multiline':False]['text':' the underlying error for how it should be handled. Instead, the error is','line_number':583,'multiline':False]['text':' unwrapped and the JavaScript stacktrace is included as part of the error message.','line_number':584,'multiline':False]['text':' Clear the status state','line_number':592,'multiline':False]['text':' Block synchronously awaiting the result of a Promise. This is okay because the test runner is','line_number':708,'multiline':False]['text':' single threaded, but we should remove this if that invariant ever changes.','line_number':709,'multiline':False]['text':' The _runSafely() function is called for all codepaths of executing JavaScript other than','line_number':753,'multiline':False]['text':' callThreadArgs(). We intentionally don't unwrap the JSInterpreterFailureWithStack error','line_number':754,'multiline':False]['text':' to make it possible for the parent thread to chain its JavaScript stacktrace with the','line_number':755,'multiline':False]['text':' child thread's JavaScript stacktrace.','line_number':756,'multiline':False]['text':' The first argument must be the thread start function','line_number':762,'multiline':False]['text':' Run all of the async JS functions','line_number':786,'multiline':False]['text':' Run all of the async JS functions','line_number':889,'multiline':False]['text':' must validate the handle because TerminateExecution may have','line_number':895,'multiline':False]['text':' been thrown after the above checks','line_number':896,'multiline':False]['text':' During runtime, we can get a ReferenceError: await is not defined because there can be await','line_number':932,'multiline':False]['text':' not in global scope, which is not detected during compile.','line_number':933,'multiline':False]['text':' If we should run this as a module, we need to clear the previous exception in order','line_number':972,'multiline':False]['text':' to catch stack traces for future exceptions.','line_number':973,'multiline':False]['text':' If we should run this as a module, we need to clear the previous exception','line_number':999,'multiline':False]['text':' in order to catch stack traces for future exceptions.','line_number':1000,'multiline':False]['text':' Run all of the async JS functions','line_number':1027,'multiline':False]['text':' appears to only be used by shell','line_number':1034,'multiline':False]['text':' install db access functions in the global object','line_number':1073,'multiline':False]['text':' install thread-related functions (e.g. _threadInject)','line_number':1076,'multiline':False]['text':' install the Mongo function object','line_number':1079,'multiline':False]['text':' This builtin map is a javascript 6 thing.  We want our version.  so','line_number':1114,'multiline':False]['text':' take theirs out','line_number':1115,'multiline':False]['text':' exceptions originating from c++ don't get the "uncaught exception: " prefix','line_number':1155,'multiline':False]['text':' The JavaScript Error objects resulting from C++ exceptions may not always','line_number':1172,'multiline':False]['text':' have a','line_number':1173,'multiline':False]['text':' non-empty "stack" property. We instead use the line and column numbers of','line_number':1174,'multiline':False]['text':' where','line_number':1175,'multiline':False]['text':' in the JavaScript code the C++ function was called from.','line_number':1176,'multiline':False]['text':' Clear the status state','line_number':1212,'multiline':False]['text':' Throw if necessary','line_number':1216,'multiline':False]['text':' namespace mozjs','line_number':1282,'multiline':False]['text':' namespace mongo','line_number':1283,'multiline':False]