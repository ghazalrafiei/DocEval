['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':83,'multiline':False]['text':' This class holds a "raw" DBClient connection, along with an optional "encrypted" DBClient','line_number':144,'multiline':False]['text':' that performs automatic encryption of requests before forwarding them to the raw connection.','line_number':145,'multiline':False]['text':' If auto encryption is enabled, this returns the encrypted DBClient in getConnection().','line_number':146,'multiline':False]['text':' Copy the client shared pointer to up the refcount','line_number':222,'multiline':False]['text':' Copy the client shared pointer to up the refcount.','line_number':233,'multiline':False]['text':' If the connection that ran the command is the same as conn, then we set a hidden "_mongo"','line_number':255,'multiline':False]['text':' property on the returned object that is just "this" Mongo object.','line_number':256,'multiline':False]['text':' 'newMongo' is a direct connection to an individual server. Its "host" property therefore','line_number':286,'multiline':False]['text':' reports the stringified HostAndPort of the underlying DBClientConnection.','line_number':287,'multiline':False]['text':' namespace','line_number':314,'multiline':False]['text':'*
 * Common implementation for:
 *   object Mongo._runCommandImpl(string dbname, object cmd, int options, object token)
 *
 * Extra is for connection-wide metadata to pass with any given runCommand.
 ','line_number':350,'multiline':True]['text':' Arg2 is specialization defined, see makeRequest().','line_number':371,'multiline':False]['text':' The returned object is not read only as some of our tests depend on modifying it.','line_number':403,'multiline':False]['text':' Make a copy here because we want a copy after we dump cmdRes','line_number':404,'multiline':False]['text':' read only ','line_number':408,'multiline':True]['text':' namespace','line_number':421,'multiline':False]['text':' no auto-encryption is set, so return undefined','line_number':557,'multiline':False]['text':' Make a copy because I want to insulate us from whether conn->logout','line_number':608,'multiline':False]['text':' writes an owned bson or not','line_number':609,'multiline':False]['text':' getConnectionRef verifies that the connection is still open','line_number':624,'multiline':False]['text':' "new Mongo(uri, encryptedDBClientCallback, {options...})"','line_number':700,'multiline':False]['text':' Adds a property to the Mongo connection object.','line_number':776,'multiline':False]['text':' If retryWrites is not explicitly set in uri, sessions created on this connection default to','line_number':778,'multiline':False]['text':' the global retryWrites value. This is checked in sessions.js by using the injected','line_number':779,'multiline':False]['text':' _shouldRetryWrites() function, which returns true if the --retryWrites flag was passed.','line_number':780,'multiline':False]['text':' ValueWriter currently does not have a native way to retrieve a std::function from a JS','line_number':845,'multiline':False]['text':' function. Existing places that require executing JS functions ($where, db.eval) parse the JS','line_number':846,'multiline':False]['text':' function as a raw string and then stash that into a wrapper type such as JsFunction.','line_number':847,'multiline':False]['text':' ScriptingFunction is loaded with the stringified function and then gets invoked by the parent','line_number':848,'multiline':False]['text':' scope. A potential alternative here would be to use JS_ValueToFunction, but that returns a','line_number':849,'multiline':False]['text':' pointer to a JSFunction that is still locally scoped to this function. Hence, we represent','line_number':850,'multiline':False]['text':' the function as a string, stash it into a lambda, and execute it directly when needed.','line_number':851,'multiline':False]['text':' namespace mozjs','line_number':904,'multiline':False]['text':' namespace mongo','line_number':905,'multiline':False]