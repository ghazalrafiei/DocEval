['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * Wrapper functions to create wrappers with no corresponding JSJitInfo from API
 * function arguments.
 ','line_number':159,'multiline':True]['text':' This is a little different because there is no JS_HasOwnElement','line_number':246,'multiline':False]['text':' For some reason JS_DeletePropertyById doesn't link','line_number':315,'multiline':False]['text':' INCREDIBLY SUBTLE BEHAVIOR:','line_number':605,'multiline':False]['text':'','line_number':606,'multiline':False]['text':' (jcarey): Be very careful about how the Rooting API is used in','line_number':607,'multiline':False]['text':' relationship to WriteFieldRecursionFrames. Mozilla'a API more or less','line_number':608,'multiline':False]['text':' demands that the rooting types are on the stack and only manipulated as','line_number':609,'multiline':False]['text':' regular objects, which we aren't doing here. The reason they do this is','line_number':610,'multiline':False]['text':' because the rooting types must be global created and destroyed in an','line_number':611,'multiline':False]['text':' entirely linear order. This is impossible to screw up in regular use,','line_number':612,'multiline':False]['text':' but our unwinding of the recursion frames makes it easy to do here.','line_number':613,'multiline':False]['text':'','line_number':614,'multiline':False]['text':' The roots above need to be before the first frame is emplaced (so','line_number':615,'multiline':False]['text':' they'll be destroyed after it) and none of the roots in the below code','line_number':616,'multiline':False]['text':' (or in ValueWriter::writeThis) can live longer than until the call to','line_number':617,'multiline':False]['text':' emplace() inside ValueWriter. The runtime asserts enabled by MozJS's','line_number':618,'multiline':False]['text':' debug mode will catch runtime errors, but be aware of how difficult this','line_number':619,'multiline':False]['text':' is to get right and what to look for if one of them bites you.','line_number':620,'multiline':False]['text':' NOTE: Keep the frames in a scope so that it is clear that','line_number':625,'multiline':False]['text':' we always destroy them before we destroy 'b'. It is','line_number':626,'multiline':False]['text':' important to do so: if 'b' is destroyed before the frames,','line_number':627,'multiline':False]['text':' and we don't pop all of the frames (say, due to an','line_number':628,'multiline':False]['text':' exeption), then the frame dtors would write to freed','line_number':629,'multiline':False]['text':' memory.','line_number':630,'multiline':False]['text':' We special case the _id field in top-level objects and move it to the front.','line_number':634,'multiline':False]['text':' This matches other drivers behavior and makes finding the _id field quicker in BSON.','line_number':635,'multiline':False]['text':' If the index is the same as length, we've seen all the keys at this','line_number':643,'multiline':False]['text':' level and should go up a level','line_number':644,'multiline':False]['text':' If this is our first look at the object and it has an unaltered','line_number':651,'multiline':False]['text':' bson behind it, move idx to the end so we'll roll up on the next','line_number':652,'multiline':False]['text':' pass through the loop.','line_number':653,'multiline':False]['text':' TODO: check if it's cheaper to just compare with an interned','line_number':664,'multiline':False]['text':' string of "_id" rather than with ascii','line_number':665,'multiline':False]['text':' writeField invokes ValueWriter with the frame stack, which will push','line_number':671,'multiline':False]['text':' onto frames for subobjects, which will effectively recurse the loop.','line_number':672,'multiline':False]['text':'EOO','line_number':677,'multiline':True]['text':'BSONObj::Holder ref count','line_number':677,'multiline':True]['text':' namespace mozjs','line_number':759,'multiline':False]['text':' namespace mongo','line_number':760,'multiline':False]