['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':49,'multiline':False]['text':' IWYU pragma: no_include "boost/iostreams/detail/error.hpp"','line_number':53,'multiline':False]['text':' IWYU pragma: no_include "boost/iostreams/detail/streambuf/indirect_streambuf.hpp"','line_number':54,'multiline':False]['text':' IWYU pragma: keep','line_number':72,'multiline':False]['text':' IWYU pragma: keep','line_number':84,'multiline':False]['text':' namespace','line_number':146,'multiline':False]['text':' Some instances of ProgramRunner are constructed to read output synchronously. These','line_number':200,'multiline':False]['text':' instances never created a separate stdx::thread and never called registerReaderThread().','line_number':201,'multiline':False]['text':' Remove the PID from the registry.','line_number':206,'multiline':False]['text':' Be careful not to hold the lock while waiting for the pid to finish','line_number':227,'multiline':False]['text':' unregistered pids are dead','line_number':230,'multiline':False]['text':' If you hit this invariant, you're waiting on a PID that was','line_number':237,'multiline':False]['text':' never a child of this process.','line_number':238,'multiline':False]['text':' wait until the process object is signaled before getting its','line_number':248,'multiline':False]['text':' exit code. do this even when block is false to ensure that all','line_number':249,'multiline':False]['text':' file handles open in the process have been closed.','line_number':250,'multiline':False]['text':' It's possible for waitpid to return -1 if the waidpid was already','line_number':290,'multiline':False]['text':' run on the pid. We're not sure if this issue can actually happen','line_number':291,'multiline':False]['text':' due to the locking/single threaded nature of JS, so we're adding','line_number':292,'multiline':False]['text':' this invariant to trigger a failure if this ever happens.','line_number':293,'multiline':False]['text':' See SERVER-63022.','line_number':294,'multiline':False]['text':' NOTE(JCAREY):','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':' We take this lock from before our call to pipe until after we close the write side (in','line_number':467,'multiline':False]['text':' the parent) to avoid leaking fds from threads racing around fork().  I.e.','line_number':468,'multiline':False]['text':'','line_number':469,'multiline':False]['text':' Thread A: calls pipe()','line_number':470,'multiline':False]['text':' Thread B: calls fork()','line_number':471,'multiline':False]['text':' A: sets cloexec on read and write sides','line_number':472,'multiline':False]['text':' B: has a forked child with open fds','line_number':473,'multiline':False]['text':' A: spawns a child thread to read it's child process's stdout','line_number':474,'multiline':False]['text':' A: A's child process exits','line_number':475,'multiline':False]['text':' A: wait's on A's reader thread in de-register','line_number':476,'multiline':False]['text':' A: deadlocks forever (because the child reader thread stays in read() because of the open','line_number':477,'multiline':False]['text':'    fd in B)','line_number':478,'multiline':False]['text':'','line_number':479,'multiline':False]['text':' Holding the lock for the duration of those events prevents the leaks and thus the','line_number':480,'multiline':False]['text':' associated deadlocks.','line_number':481,'multiline':False]['text':' The calls to fcntl to set CLOEXEC ensure that processes started by the process we are','line_number':489,'multiline':False]['text':' about to fork do *not* inherit the file descriptors for the pipe. If grandchild processes','line_number':490,'multiline':False]['text':' could inherit the FD for the pipe, than the pipe wouldn't close on child process exit. On','line_number':491,'multiline':False]['text':' windows, instead the handle inherit flag is turned off after the call to CreateProcess.','line_number':492,'multiline':False]['text':' sets _pid','line_number':509,'multiline':False]['text':' Close the write end of the pipe.','line_number':511,'multiline':False]['text':' Send the never_close_handle flag so that we can handle closing the fd below with safeClose.','line_number':536,'multiline':False]['text':' Close the read end of the pipe.','line_number':550,'multiline':False]['text':' The system programs either come versioned in the form of <utility>-<major.minor>','line_number':558,'multiline':False]['text':' (e.g., mongorestore-2.4) or just <utility>. For windows, the appropriate extension','line_number':559,'multiline':False]['text':' needs to be appended.','line_number':560,'multiline':False]['text':'','line_number':561,'multiline':False]['text':' The file could exist if it is specified as a full path.','line_number':572,'multiline':False]['text':' Check if the binary exists in the current working directory','line_number':577,'multiline':False]['text':' On POSIX, we need to manually resolve the $PATH variable, to try and find the binary in the','line_number':584,'multiline':False]['text':' filesystem.','line_number':585,'multiline':False]['text':' PATH was unset, so path search is implementation defined','line_number':588,'multiline':False]['text':' PATH entries are separated by colons. Per POSIX 2013, there is no way to escape a colon in','line_number':595,'multiline':False]['text':' an entry.','line_number':596,'multiline':False]['text':' Escape all embedded quotes and backslashes.','line_number':627,'multiline':False]['text':' Construct the environment block which the new process will use.','line_number':639,'multiline':False]['text':' An environment block is a NULL terminated array of NULL terminated WCHAR strings. The','line_number':640,'multiline':False]['text':' strings are of the form "name=value\0". Because the strings are variable length, we must','line_number':641,'multiline':False]['text':' precompute the size of the array before we may allocate it.','line_number':642,'multiline':False]['text':' Compute the size of the environment block, in characters. Note that we have to count','line_number':646,'multiline':False]['text':' wchar_t characters, which we'll actually be storing in the block later, rather than UTF8','line_number':647,'multiline':False]['text':' characters we have in _envp and need to convert.','line_number':648,'multiline':False]['text':' Reserve space for the final NULL character which terminates the environment block','line_number':655,'multiline':False]['text':' Ensure there is enough room to write the string, the string's NULL byte, and the block's','line_number':661,'multiline':False]['text':' NULL byte','line_number':662,'multiline':False]['text':' Async signal unsafe functions should not be called in the child process.','line_number':733,'multiline':False]['text':' Fork failed so it is time for the process to exit','line_number':736,'multiline':False]['text':' DON'T ASSERT IN THIS BLOCK - very bad things will happen','line_number':743,'multiline':False]['text':'','line_number':744,'multiline':False]['text':' Also, deliberately call _exit instead of quickExit. We intended to','line_number':745,'multiline':False]['text':' fork() and exec() here, so we never want to run any form of cleanup.','line_number':746,'multiline':False]['text':' This includes things that quickExit calls, such as atexit leak','line_number':747,'multiline':False]['text':' checks.','line_number':748,'multiline':False]['text':' Async signal unsafe code reporting a terminal error condition.','line_number':751,'multiline':False]['text':' do not pass go, do not call atexit handlers','line_number':753,'multiline':False]['text':' Async signal unsafe code reporting a terminal error condition.','line_number':760,'multiline':False]['text':' Load explicitly set environment key value pairs into _envp.','line_number':770,'multiline':False]['text':' Import this process' environment into _envp, for all keys that have not already been set.','line_number':779,'multiline':False]['text':' We need to do this so that the child process has all the PATH and locale variables, unless','line_number':780,'multiline':False]['text':' we explicitly override them.','line_number':781,'multiline':False]['text':' Windows' GetEnvironmentStringsW returns a NULL terminated array of NULL separated','line_number':789,'multiline':False]['text':' <key>=<value> pairs.','line_number':790,'multiline':False]['text':' environ is a POSIX defined array of char*s. Each char* in the array is a <key>=<value>\0','line_number':804,'multiline':False]['text':' pair.','line_number':805,'multiline':False]['text':' Parse individual arguments into _argv','line_number':846,'multiline':False]['text':' skip program name (handled above)','line_number':848,'multiline':False]['text':' same behavior as strtol','line_number':868,'multiline':False]['text':' namespace mongo::shell_utils','line_number':877,'multiline':False]