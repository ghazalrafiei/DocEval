['text':' db.js','line_number':1,'multiline':False]['text':'*
 * Rotate certificates, CRLs, and CA files.
 * @param {String} message optional message for server to log at rotation time
 ','line_number':16,'multiline':True]['text':'*
 * Gets DB level statistics. opt can be a number representing the scale for backwards compatibility
 * or a document with options passed along to the dbstats command.
 ','line_number':39,'multiline':True]['text':' Utility to attach readPreference if needed.','line_number':68,'multiline':False]['text':' If the user has not set a read pref, return the original 'cmdObj'.','line_number':71,'multiline':False]['text':' If user specifies $readPreference manually, then don't change it.','line_number':76,'multiline':False]['text':' Copy object so we don't mutate the original.','line_number':81,'multiline':False]['text':'*
 * If someone passes i.e. runCommand("foo", {bar: "baz"}), we merge it in to
 * runCommand({foo: 1, bar: "baz"}).
 * If we already have a command object in the first argument, we ensure that the second
 * argument 'extraKeys' is either null or an empty object. This prevents users from accidentally
 * calling runCommand({foo: 1}, {bar: 1}) and expecting the final command invocation to be
 * runCommand({foo: 1, bar: 1}).
 * This helper abstracts that logic.
 ','line_number':87,'multiline':True]['text':' this will traverse the prototype chain of extra, but keeping','line_number':117,'multiline':False]['text':' to maintain legacy behavior','line_number':118,'multiline':False]['text':' Like runCommand but applies readPreference if one has been set','line_number':131,'multiline':False]['text':' on the connection. Also sets slaveOk if a (non-primary) readPref has been set.','line_number':132,'multiline':False]['text':' Support users who call this function with a string commandName, e.g.','line_number':136,'multiline':False]['text':' db.runReadCommand("commandName", {arg1: "value", arg2: "value"}).','line_number':137,'multiline':False]['text':' Set slaveOk if readPrefMode has been explicitly set with a readPreference','line_number':149,'multiline':False]['text':' other than primary.','line_number':150,'multiline':False]['text':' The 'extra' parameter is not used as we have already created a merged command object.','line_number':156,'multiline':False]['text':' runCommand uses this impl to actually execute the command','line_number':160,'multiline':False]['text':' Support users who call this function with a string commandName, e.g.','line_number':169,'multiline':False]['text':' db.runCommand("commandName", {arg1: "value", arg2: "value"}).','line_number':170,'multiline':False]['text':' if options were passed (i.e. because they were overridden on a collection), use them.','line_number':173,'multiline':False]['text':' Otherwise use getQueryOptions.','line_number':174,'multiline':False]['text':' When runCommand flowed through query, a connection error resulted in the message','line_number':180,'multiline':False]['text':' "error doing query: failed". Even though this message is arguably incorrect','line_number':181,'multiline':False]['text':' for a command failing due to a connection failure, we preserve it for backwards','line_number':182,'multiline':False]['text':' compatibility. See SERVER-18334 for details.','line_number':183,'multiline':False]['text':' alias old name','line_number':200,'multiline':False]['text':' Permit this command invocation, even if it's not in the requested API version.','line_number':213,'multiline':False]['text':' Disallow explicit API parameters on the aggregate shell helper; callers should use runCommand','line_number':226,'multiline':False]['text':' directly if they want to test this.','line_number':227,'multiline':False]['text':' Make a copy of the initial command object, i.e. {aggregate: x, pipeline: [...]}.','line_number':230,'multiline':False]['text':' Make a copy of the aggregation options.','line_number':233,'multiline':False]['text':' Reassign the cleaned-up options.','line_number':254,'multiline':False]['text':' Add the options to the command object.','line_number':257,'multiline':False]['text':'*
  Create a new collection in the database.  Normally, collection creation is automatic.  You
 would
   use this function if you wish to specify special options on creation.

   If the collection already exists, no action occurs.

    <p>Options:</p>
    <ul>
    <li>
        size: desired initial extent size for the collection.  Must be <= 1000000000.
              for fixed size (capped) collections, this size is the total/max size of the
              collection.
    </li>
    <li>
        capped: if true, this is a capped collection (where old data rolls out).
    </li>
    <li> max: maximum number of objects if capped (optional).</li>
    <li>
        storageEngine: BSON document containing storage engine specific options. Format:
                       {
                           storageEngine: {
                               storageEngine1: {
                                   ...
                               },
                               storageEngine2: {
                                   ...
                               },
                               ...
                           }
                       }
    </li>
    </ul>

    <p>Example:</p>
    <code>db.createCollection("movies", { size: 10 * 1024 * 1024, capped:true } );</code>

 * @param {String} name Name of new collection to create
 * @param {Object} options Object with options for call.  Options are listed above.
 * @return {Object} returned has member ok set to true if operation succeeds, false otherwise.
','line_number':287,'multiline':True]['text':'*
 * Command to create a view based on the specified aggregation pipeline.
 * Usage: db.createView(name, viewOn, pipeline: [{ $operator: {...}}, ... ])
 *
 *  @param name String - name of the new view to create
 *  @param viewOn String - name of the backing view or collection
 *  @param pipeline [{ $operator: {...}}, ... ] - the aggregation pipeline that defines the view
 *  @param options { } - options on the view, e.g., collations
 ','line_number':337,'multiline':True]['text':' Since we allow a single stage pipeline to be specified as an object','line_number':355,'multiline':False]['text':' in aggregation, we need to account for that here for consistency.','line_number':356,'multiline':False]['text':'*
 * @deprecated use getProfilingStatus
 *  Returns the current profiling level of this database
 *  @return SOMETHING_FIXME or null on error
 ','line_number':370,'multiline':True]['text':'*
 *  @return the current profiling status
 *  example { was : 0, slowms : 100 }
 *  @return SOMETHING_FIXME or null on error
 ','line_number':380,'multiline':True]['text':'*
 * Erase the entire database.
 * @params writeConcern: (document) expresses the write concern of the drop command.
 * @return Object returned has member ok set to true if operation succeeds, false otherwise.
 ','line_number':393,'multiline':True]['text':'*
 * Shuts down the database.  Must be run while using the admin database.
 * @param opts Options for shutdown. Possible options are:
 *   - force: (boolean) if the server should shut down, even if there is no
 *     up-to-date secondary
 *   - timeoutSecs: (number) the server will continue checking over timeoutSecs
 *     if any other servers have caught up enough for it to shut down.
 ','line_number':403,'multiline':True]['text':' we expect the command to not return a response, as the server will shut down','line_number':429,'multiline':False]['text':' immediately.','line_number':430,'multiline':False]['text':'*
 * Configures settings for capturing operations inside the system.profile collection and in the
 * slow query log.
 *
 * The 'level' can be 0, 1, or 2:
 *  - 0 means that profiling is off and nothing will be written to system.profile.
 *  - 1 means that profiling is on for operations slower than the currently configured 'slowms'
 *    threshold (more on 'slowms' below).
 *  - 2 means that profiling is on for all operations, regardless of whether or not they are
 *    slower than 'slowms'.
 *
 * The 'options' parameter, if a number, is interpreted as the 'slowms' value to send to the
 * server. 'slowms' determines the threshold, in milliseconds, above which slow operations get
 * profiled at profiling level 1 or logged at logLevel 0.
 *
 * If 'options' is not a number, it is expected to be an object containing additional parameters
 * to get passed to the server. For example, db.setProfilingLevel(2, {foo: "bar"}) will issue
 * the command {profile: 2, foo: "bar"} to the server.
 ','line_number':524,'multiline':True]['text':'*
 * @deprecated
 *  <p> Evaluate a js expression at the database server.</p>
 *
 * <p>Useful if you need to touch a lot of data lightly; in such a scenario
 *  the network transfer of the data could be a bottleneck.  A good example
 *  is "select count(*)" -- can be done server side via this mechanism.
 * </p>
 *
 * <p>
 * If the eval fails, an exception is thrown of the form:
 * </p>
 * <code>{ dbEvalException: { retval: functionReturnValue, ok: num [, errno: num] [, errmsg:
 *str] } }</code>
 *
 * <p>Example: </p>
 * <code>print( "mycount: " + db.eval( function(){db.mycoll.find({},{_id:ObjId()}).length();}
 *);</code>
 *
 * @param {Function} jsfunction Javascript function to run on server.  Note this it not a
 *closure, but rather just "code".
 * @return result of your function, or null if error
 *
 ','line_number':560,'multiline':True]['text':'*
 * <p>
 *  An array of grouped items is returned.  The array must fit in RAM, thus this function is not
 * suitable when the return set is extremely large.
 * </p>
 * <p>
 * To order the grouped data, simply sort it client side upon return.
 * <p>
   Defaults
     cond may be null if you want to run against all rows in the collection
     keyf is a function which takes an object and returns the desired key.  set either key or
 keyf (not both).
 * </p>
 ','line_number':602,'multiline':True]['text':' eslint-disable-line','line_number':618,'multiline':False]['text':' clone','line_number':638,'multiline':False]['text':' must have $ to pass to db','line_number':655,'multiline':False]['text':' Parse apart collection information.','line_number':695,'multiline':False]['text':'*
 * Returns a list that contains the names and options of this database's collections, sorted
 * by collection name. An optional filter can be specified to match only collections with
 * certain metadata.
 ','line_number':723,'multiline':True]['text':' We cannot recover from this error, propagate it.','line_number':734,'multiline':False]['text':' We may be able to compute a set of *some* collections which exist and we have access','line_number':738,'multiline':False]['text':' to from our privileges. For this to work, the previous operation must have failed due','line_number':739,'multiline':False]['text':' to authorization, we must be attempting to recover the names of our own collections,','line_number':740,'multiline':False]['text':' and no filter can have been provided.','line_number':741,'multiline':False]['text':'*
 * Returns this database's list of collection names in sorted order.
 ','line_number':760,'multiline':True]['text':' Convert the incoming currentOp command into an equivalent aggregate command','line_number':808,'multiline':False]['text':' of the form {aggregate:1, pipeline: [{$currentOp: {idleConnections: $all, allUsers:','line_number':809,'multiline':False]['text':' !$ownOps, truncateOps: false}}, {$match: {<user-defined filter>}}], cursor:{}}.','line_number':810,'multiline':False]['text':' The legacy db.currentOp() shell helper ignored any explicitly set read preference and used','line_number':831,'multiline':False]['text':' the default, with the ability to also run on secondaries. To preserve this behavior we will','line_number':832,'multiline':False]['text':' run the aggregate with read preference "primaryPreferred".','line_number':833,'multiline':False]['text':' low 32 bits are ordinal #s within a second','line_number':848,'multiline':False]['text':'*
  Get a replication log information summary.
  <p>
  This command is for the database/cloud administer and not applicable to most databases.
  It is only used with the local database.  One might invoke from the JS shell:
  <pre>
       use local
       db.getReplicationInfo();
  </pre>
  * @return Object timeSpan: time span of the oplog from start to end  if secondary is more out
  *                          of date than that, it can't recover without a complete resync
','line_number':851,'multiline':True]['text':' ignore primaries (1) and arbiters (7)','line_number':985,'multiline':False]['text':' no primary, find the most recent op among all members','line_number':1014,'multiline':False]['text':' Print initial sync info if node is in the STARTUP2 state.','line_number':1031,'multiline':False]['text':' Used to trim entries from the metrics.commands that have never been executed','line_number':1046,'multiline':False]['text':' Handles nested commands','line_number':1064,'multiline':False]['text':' Only prune if we have a metrics tree with commands.','line_number':1079,'multiline':False]['text':' In interactive mode, time out if a transaction or other op holds locks we need. Caller','line_number':1135,'multiline':False]['text':' suppresses exceptions. In non-interactive mode, don't specify a timeout, because in an','line_number':1136,'multiline':False]['text':' automated test we prefer consistent results over quick feedback.','line_number':1137,'multiline':False]['text':' Loads any scripts contained in system.js into the client shell.
 ','line_number':1176,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':1189,'multiline':False]['text':'////////////////////////// Security shell helpers below','line_number':1190,'multiline':False]['text':'///////////////////////////////////////////','line_number':1191,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////////////////','line_number':1192,'multiline':False]['text':' Logging out doesn't require a session since it manipulates connection state.','line_number':1288,'multiline':False]['text':' For backwards compatibility','line_number':1292,'multiline':False]['text':' Code 11 = UserNotFound','line_number':1309,'multiline':False]['text':' Never include PLAIN in auto-negotiation.','line_number':1357,'multiline':False]['text':' If isMaster doesn't support saslSupportedMechs,','line_number':1365,'multiline':False]['text':' or if we couldn't agree on a mechanism,','line_number':1366,'multiline':False]['text':' then fall through to a default mech, either','line_number':1367,'multiline':False]['text':' configured or implicit based on the wire version','line_number':1368,'multiline':False]['text':' Use the default auth mechanism if set on the command line.','line_number':1371,'multiline':False]['text':' for later wire versions, we prefer (or require) SCRAM-SHA-256','line_number':1376,'multiline':False]['text':' if a fallback is required','line_number':1377,'multiline':False]['text':' Logging in doesn't require a session since it manipulates connection state.','line_number':1414,'multiline':False]['text':' auth enabled, and should try to use hello and replSetGetStatus to build prompt','line_number':1418,'multiline':False]['text':' Working with 2.4 schema user data','line_number':1486,'multiline':False]['text':' Code 31 = RoleNotFound','line_number':1529,'multiline':False]['text':' Writing `this.hasOwnProperty` would cause DB.prototype.getCollection() to be called since the','line_number':1664,'multiline':False]['text':' DB's getProperty() handler in C++ takes precedence when a property isn't defined on the DB','line_number':1665,'multiline':False]['text':' instance directly. The "hasOwnProperty" property is defined on Object.prototype, so we must','line_number':1666,'multiline':False]['text':' resort to using the function explicitly ourselves.','line_number':1667,'multiline':False]