['text':' If writeConcern set, use it, else get from collection (which will inherit from db/mongo)','line_number':2,'multiline':False]['text':' Only merge in write concern options if at least one is specified in options','line_number':10,'multiline':False]['text':'*
 * @return {Object} a new document with an _id: ObjectId if _id is not present.
 *     Otherwise, returns the same object passed.
 ','line_number':25,'multiline':True]['text':' don't want to modify input','line_number':34,'multiline':False]['text':'*
 * Perform a bulkWrite operation without a fluent API
 *
 * Legal operation types are
 *
 *  { insertOne: { document: { a: 1 } } }
 *
 *  { updateOne: { filter: {a:2}, update: {$set: {"a.$[i]":2}}, upsert:true, collation: {locale:
 * "fr"}, arrayFilters: [{i: 0}] } }
 *
 *  { updateMany: { filter: {a:2}, update: {$set: {"a.$[i]":2}}, upsert:true collation: {locale:
 * "fr"}, arrayFilters: [{i: 0}] } }
 *
 *  { deleteOne: { filter: {c:1}, collation: {locale: "fr"} } }
 *
 *  { deleteMany: { filter: {c:1}, collation: {locale: "fr"} } }
 *
 *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true, collation: {locale: "fr"} } }
 *
 * @method
 * @param {object[]} operations Bulk operations to perform.
 * @param {object} [options=null] Optional settings.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':47,'multiline':True]['text':' Get the write concern','line_number':78,'multiline':False]['text':' Result','line_number':81,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':84,'multiline':False]['text':' Contains all inserted _ids','line_number':87,'multiline':False]['text':' For each of the operations we need to add the op to the bulk','line_number':90,'multiline':False]['text':' Add _id ObjectId if needed','line_number':97,'multiline':False]['text':' InsertedIds is a map of [originalInsertOrderIndex] = document._id','line_number':99,'multiline':False]['text':' Translate operation to bulk operation','line_number':101,'multiline':False]['text':' Translate operation to bulk operation','line_number':112,'multiline':False]['text':' Translate operation to bulk operation','line_number':140,'multiline':False]['text':' Translate operation to bulkOp operation','line_number':168,'multiline':False]['text':' Translate operation to bulkOp operation.','line_number':188,'multiline':False]['text':' Translate operation to bulkOp operation.','line_number':201,'multiline':False]['text':' Execute bulkOp operation','line_number':212,'multiline':False]['text':' Iterate over all the upserts','line_number':225,'multiline':False]['text':' Return the result','line_number':231,'multiline':False]['text':'*
 * Inserts a single document into MongoDB.
 *
 * @method
 * @param {object} doc Document to insert.
 * @param {object} [options=null] Optional settings.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':235,'multiline':True]['text':' Add _id ObjectId if needed','line_number':249,'multiline':False]['text':' Get the write concern','line_number':252,'multiline':False]['text':' Result','line_number':255,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':258,'multiline':False]['text':' Execute insert','line_number':263,'multiline':False]['text':' Set the inserted id','line_number':283,'multiline':False]['text':' Return the result','line_number':286,'multiline':False]['text':'*
 * Inserts an array of documents into MongoDB.
 *
 * @method
 * @param {object[]} docs Documents to insert.
 * @param {object} [options=null] Optional settings.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @param {boolean} [options.ordered=true] Execute inserts in ordered or unordered fashion.
 * @return {object}
 ','line_number':290,'multiline':True]['text':' Ensure all documents have an _id','line_number':306,'multiline':False]['text':' Get the write concern','line_number':311,'multiline':False]['text':' Result','line_number':314,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':317,'multiline':False]['text':' Add all operations to the bulk operation','line_number':320,'multiline':False]['text':' Execute bulk write operation','line_number':325,'multiline':False]['text':' Set all the created inserts','line_number':332,'multiline':False]['text':' Return the result','line_number':337,'multiline':False]['text':'*
 * Delete a document on MongoDB
 *
 * @method
 * @param {object} filter The filter used to select the document to remove
 * @param {object} [options=null] Optional settings.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':341,'multiline':True]['text':' Get the write concern','line_number':355,'multiline':False]['text':' Result','line_number':358,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':361,'multiline':False]['text':' Add the collation, if there is one.','line_number':365,'multiline':False]['text':' Add the deleteOne operation.','line_number':370,'multiline':False]['text':' Remove the first document that matches the selector','line_number':374,'multiline':False]['text':'*
 * Delete multiple documents on MongoDB
 *
 * @method
 * @param {object} filter The Filter used to select the documents to remove
 * @param {object} [options=null] Optional settings.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':398,'multiline':True]['text':' Get the write concern','line_number':412,'multiline':False]['text':' Result','line_number':415,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':418,'multiline':False]['text':' Add the collation, if there is one.','line_number':422,'multiline':False]['text':' Add the deleteOne operation.','line_number':427,'multiline':False]['text':' Remove all documents that matche the selector','line_number':431,'multiline':False]['text':'*
 * Replace a document on MongoDB
 *
 * @method
 * @param {object} filter The Filter used to select the document to update
 * @param {object} doc The Document that replaces the matching document
 * @param {object} [options=null] Optional settings.
 * @param {boolean} [options.upsert=false] Update operation is an upsert.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':455,'multiline':True]['text':' Cannot use pipeline-style updates in a replacement operation.','line_number':471,'multiline':False]['text':' Check if first key in update statement contains a $','line_number':476,'multiline':False]['text':' Check if first key does not have the $','line_number':478,'multiline':False]['text':' Get the write concern','line_number':483,'multiline':False]['text':' Result','line_number':486,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':489,'multiline':False]['text':' Add the deleteOne operation','line_number':492,'multiline':False]['text':' Replace the document','line_number':509,'multiline':False]['text':'*
 * Update a single document on MongoDB
 *
 * @method
 * @param {object} filter The Filter used to select the document to update
 * @param {object} update The update operations to be applied to the document
 * @param {object} [options=null] Optional settings.
 * @param {boolean} [options.upsert=false] Update operation is an upsert.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':539,'multiline':True]['text':' Pipeline updates are always permitted. Otherwise, we validate the update object.','line_number':555,'multiline':False]['text':' Check if first key in update statement contains a $','line_number':557,'multiline':False]['text':' Check if first key does not have the $','line_number':563,'multiline':False]['text':' Get the write concern','line_number':569,'multiline':False]['text':' Result','line_number':572,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':575,'multiline':False]['text':' Add the updateOne operation','line_number':578,'multiline':False]['text':' Update the first document that matches the selector','line_number':599,'multiline':False]['text':'*
 * Update multiple documents on MongoDB
 *
 * @method
 * @param {object} filter The Filter used to select the document to update
 * @param {object} update The update operations to be applied to the document
 * @param {object} [options=null] Optional settings.
 * @param {boolean} [options.upsert=false] Update operation is an upsert.
 * @param {(number|string)} [options.w=null] The write concern.
 * @param {number} [options.wtimeout=null] The write concern timeout.
 * @param {boolean} [options.j=false] Specify a journal write concern.
 * @return {object}
 ','line_number':629,'multiline':True]['text':' Pipeline updates are always permitted. Otherwise, we validate the update object.','line_number':645,'multiline':False]['text':' Check if first key in update statement contains a $','line_number':647,'multiline':False]['text':' Check if first key does not have the $','line_number':653,'multiline':False]['text':' Get the write concern','line_number':659,'multiline':False]['text':' Result','line_number':662,'multiline':False]['text':' Use bulk operation API already in the shell','line_number':665,'multiline':False]['text':' Add the updateMany operation','line_number':668,'multiline':False]['text':' Update all documents that match the selector','line_number':689,'multiline':False]['text':'*
 * Find a document and delete it in one atomic operation,
 * requires a write lock for the duration of the operation.
 *
 * @method
 * @param {object} filter Document selection filter.
 * @param {object} [options=null] Optional settings.
 * @param {object} [options.projection=null] Limits the fields to return for all matching documents.
 * @param {object} [options.sort=null] Determines which document the operation modifies if the query
 *selects multiple documents.
 * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.
 * @return {object}
 ','line_number':719,'multiline':True]['text':' Set up the command','line_number':734,'multiline':False]['text':' Get the write concern','line_number':753,'multiline':False]['text':' Setup the write concern','line_number':756,'multiline':False]['text':' Execute findAndModify','line_number':761,'multiline':False]['text':'*
 * Find a document and replace it in one atomic operation, requires a write lock for the duration of
 *the operation.
 *
 * @method
 * @param {object} filter Document selection filter.
 * @param {object} replacement Document replacing the matching document.
 * @param {object} [options=null] Optional settings.
 * @param {object} [options.projection=null] Limits the fields to return for all matching documents.
 * @param {object} [options.sort=null] Determines which document the operation modifies if the query
 *selects multiple documents.
 * @param {object|string} [options.hint=null] Force a particular index to be used for the query.
 * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.
 * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.
 * @param {boolean} [options.returnNewDocument=false] When true, returns the updated document rather
 *than the original. The default is false.
 * @return {object}
 ','line_number':765,'multiline':True]['text':' Cannot use pipeline-style updates in a replacement operation.','line_number':786,'multiline':False]['text':' Check if first key in update statement contains a $','line_number':791,'multiline':False]['text':' Check if first key does not have the $','line_number':793,'multiline':False]['text':' Set up the command','line_number':798,'multiline':False]['text':' Set flags','line_number':820,'multiline':False]['text':' Get the write concern','line_number':824,'multiline':False]['text':' Setup the write concern','line_number':827,'multiline':False]['text':' Execute findAndModify','line_number':832,'multiline':False]['text':'*
 * Find a document and update it in one atomic operation, requires a write lock for the duration of
 *the operation.
 *
 * @method
 * @param {object} filter Document selection filter.
 * @param {object} update Update operations to be performed on the document
 * @param {object} [options=null] Optional settings.
 * @param {object} [options.projection=null] Limits the fields to return for all matching documents.
 * @param {object} [options.sort=null] Determines which document the operation modifies if the query
 *selects multiple documents.
 * @param {object|string} [options.hint=null] Force a particular index to be used for the query.
 * @param {number} [options.maxTimeMS=null] The maximum amount of time to allow the query to run.
 * @param {boolean} [options.upsert=false] Upsert the document if it does not exist.
 * @param {boolean} [options.returnNewDocument=false] When true, returns the updated document rather
 *than the original. The default is false.
 * @return {object}
 ','line_number':836,'multiline':True]['text':' Pipeline updates are always permitted. Otherwise, we validate the update object.','line_number':857,'multiline':False]['text':' Check if first key in update statement contains a $','line_number':859,'multiline':False]['text':' Check if first key does not have the $','line_number':865,'multiline':False]['text':' Set up the command','line_number':871,'multiline':False]['text':' Set flags','line_number':897,'multiline':False]['text':' Get the write concern','line_number':901,'multiline':False]['text':' Setup the write concern','line_number':904,'multiline':False]['text':' Execute findAndModify','line_number':909,'multiline':False]