['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Defines a basic set of matchers to be used with the ASSERT_THAT macro (see
 * `assert_that.h`). It's intended that matchers to support higher-level
 * components will be defined alongside that component's other unit testing
 * support classes, rather than in this file.
 ','line_number':55,'multiline':True]['text':'
 * A uniform wrapper around any matcher that accepts a `T`, so they can
 * be treated homogeneously.
 *
 * Example:
 *     std::vector<TypeErasedMatcher<int>> vec{Eq(123), AllOf(Gt(100), Lt(200))};
 *','line_number':63,'multiline':True]['text':'* Always true: matches any value of any type. ','line_number':124,'multiline':True]['text':'*
 * MatchResult will be false when `m.match(v)` fails template substitution.
 * Can be used e.g. to produce a runtime-dispatched matcher for variant types.
 *
 * Example:
 *     typeTolerantMatch(Eq("hello"), 1234);  // Fails to match but compiles
 ','line_number':139,'multiline':True]['text':' namespace detail','line_number':176,'multiline':False]['text':'* Equal to. ','line_number':178,'multiline':True]['text':'* Not equal. ','line_number':187,'multiline':True]['text':'* Less than. ','line_number':196,'multiline':True]['text':'* Greater than. ','line_number':205,'multiline':True]['text':'* Less than or equal to. ','line_number':214,'multiline':True]['text':'* Greater than or equal to. ','line_number':223,'multiline':True]['text':'*
 * Wrapper that inverts the sense of a matcher.
 * Example:
 *     ASSERT_THAT("hi there", Not(ContainsRegex("hello")));
 ','line_number':232,'multiline':True]['text':'*
 * Given a pack of matchers, composes a matcher that passes when all matchers
 * in the pack pass.
 *
 * Example:
 *    ASSERT_THAT(123, AllOf(Gt(100), Lt(200), Eq(123)));
 ','line_number':256,'multiline':True]['text':'*
 * Given a pack of matchers, composees a matcher that passes when any matcher
 * in the pack passes.
 *
 * Example:
 *    ASSERT_THAT(123, AnyOf(Lt(100), Gt(200), Eq(123)));
 ','line_number':289,'multiline':True]['text':'*
 * Match the result dereferencing pointer-like expression with unary `*`.
 * Also fails if `!x`.
 *
 * Example:
 *    int x = 123;
 *    ASSERT_THAT(&x, Pointee(Eq(123)));
 ','line_number':322,'multiline':True]['text':'*
 * Match a string-like expression using a PCRE partial match.
 *
 * Example:
 *     ASSERT_THAT("Hello, world!", ContainsRegex("world"));
 ','line_number':353,'multiline':True]['text':' Should accept anything string-like','line_number':366,'multiline':False]['text':'*
 * Match a sequence container's elements against a sequence of matchers.
 * The matchers need not be of the same type.
 *
 * Example:
 *     std::vector<int> vec{5,6,7};
 *     ASSERT_THAT(vec, ElementsAre(Eq(5), Eq(6), Ge(5)));
 ','line_number':375,'multiline':True]['text':'*
 * Match the tuple elements of an expression.
 *
 * Example:
 *  ASSERT_THAT(std::tuple(123, "Hello, world!"),
 *              TupleElementsAre(Gt(100), ContainsRegex("Hello")));
 ','line_number':427,'multiline':True]['text':'*
 * Match that each of the structured bindings for an expression match a field matcher.
 *
 * Example:
 *  struct Obj { int x; std::string s; } obj{123, "Hello, world!"};
 *  ASSERT_THAT(obj, StructuredBindingsAre(Gt(100), ContainsRegex("Hello")));
 ','line_number':465,'multiline':True]['text':'*
     * There are no variadic structured bindings, but it can be simulated
     * for a fixed member count up to a hardcoded limit.
     ','line_number':488,'multiline':True]['text':'
            Can be regenerated by Python:
            N = 10
            print("    if constexpr (N == 0) {")
            print("        return std::tie();")
            for n in range(1, N):
                fs = ["f{}".format(j) for j in range(n)]
                print("    }} else if constexpr (N == {}) {{".format(n))
                print("        const auto& [{}] = x;".format(",".join(fs)))
                print("        return std::tie({});".format(",".join(fs)))
            print("    }")
        ','line_number':494,'multiline':True]['text':'*
 * `StatusIs(code, reason)` matches a `Status` against matchers
 * for its code and its reason string.
 *
 * Example:
 *  ASSERT_THAT(status, StatusIs(Eq(ErrorCodes::InternalError), ContainsRegex("ouch")));
 ','line_number':552,'multiline':True]['text':'*
 * `BSONElementIs(name,type,value)` matches a `BSONElement` against matchers
 * for its name, type, and value. Experimental: only covers some simple scalar
 * types.
 *
 * Example:
 *  ASSERT_THAT(obj, BSONObjHas(BSONElementIs(Eq("i"), Eq(NumberInt), Any())));
 ','line_number':583,'multiline':True]['text':' need to support more BSON element types.','line_number':623,'multiline':False]['text':'*
 * `BSONObjHas(m)` matches a `BSONObj` having an element matching `m`.
 ','line_number':634,'multiline':True]['text':' namespace mongo::unittest::match','line_number':661,'multiline':False]