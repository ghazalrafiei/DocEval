['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * A C++ unit testing framework.
 *
 * Most users will include the umbrella header "mongo/unittest/unittest.h".
 *
 * For examples of basic usage, see mongo/unittest/unittest_test.cpp.
 *
 * ASSERT macros and supporting definitions are in mongo/unittest/assert.h.
 *
 ','line_number':30,'multiline':True]['text':'*
 * Construct a single test, named `TEST_NAME` within the test Suite `SUITE_NAME`.
 *
 * Usage:
 *
 * TEST(MyModuleTests, TestThatFooFailsOnErrors) {
 *     ASSERT_EQUALS(error_success, foo(invalidValue));
 * }
 ','line_number':66,'multiline':True]['text':'*
 * Construct a single test named TEST_NAME that has access to a common class (a "fixture")
 * named "FIXTURE_NAME". FIXTURE_NAME will be the name of the Suite in which the test appears.
 *
 * Usage:
 *
 * class FixtureClass : public mongo::unittest::Test {
 * protected:
 *   int myVar;
 *   void setUp() { myVar = 10; }
 * };
 *
 * TEST(FixtureClass, TestThatUsesFixture) {
 *     ASSERT_EQUALS(10, myVar);
 * }
 ','line_number':78,'multiline':True]['text':'*
 * Macro to construct a type name for a test, from its `SUITE_NAME` and `TEST_NAME`.
 * Do not use directly in test code.
 ','line_number':111,'multiline':True]['text':'*
 * Representation of a collection of tests.
 *
 * One Suite is constructed for each SUITE_NAME when using the TEST macro.
 *
 * See `OldStyleSuiteSpecification` which adapts dbtests into this framework.
 ','line_number':122,'multiline':True]['text':'*
     * Get a suite with the given name, creating and registering it if necessary.
     * This is the only way to make a Suite object.
     *
     * Safe to call during static initialization.
     ','line_number':157,'multiline':True]['text':'* Points to the string data of the _name field. ','line_number':166,'multiline':True]['text':'*
 * Adaptor to set up a Suite from a dbtest-style suite.
 * Support for deprecated dbtest-style test suites. Tests are are added by overriding setupTests()
 * in a subclass of OldStyleSuiteSpecification, and defining an OldStyleSuiteInstance<T> object.
 * This approach is
 * deprecated.
 *
 * Example:
 *     class All : public OldStyleSuiteSpecification {
 *     public:
 *         All() : OldStyleSuiteSpecification("BunchaTests") {}
 *         void setupTests() {
 *            add<TestThis>();
 *            add<TestThat>();
 *            add<TestTheOtherThing>();
 *         }
 *     };
 *     OldStyleSuiteInitializer<All> all;
 ','line_number':175,'multiline':True]['text':' Note: setupTests() is run by a OldStyleSuiteInitializer at static initialization time.','line_number':204,'multiline':False]['text':' It should in most cases be just a simple sequence of add<T>() calls.','line_number':205,'multiline':False]['text':'*
     * Add an old-style test of type `T` to this Suite, saving any test constructor args
     * that would be needed at test run time.
     * The added test's name will be synthesized as the demangled typename of T.
     * At test run time, the test will be created and run with `T(args...).run()`.
     ','line_number':216,'multiline':True]['text':'*
 * Define a namespace-scope instance of `OldStyleSuiteInitializer<T>` to properly create and
 * initialize an instance of `T` (an `OldStyleSuiteSpecification`). See
 * `OldStyleSuiteSpecification`.
 ','line_number':241,'multiline':True]['text':'*
 * UnitTest singleton class. Provides access to information about current execution state.
 ','line_number':263,'multiline':True]['text':'*
     * Returns the currently running test, or `nullptr` if a test is not running.
     ','line_number':276,'multiline':True]['text':'*
     * Used to set/unset currently running test information.
     ','line_number':282,'multiline':True]['text':'*
     * Sets the currently running tests. Internal: should only be used by unit test framework.
     * testInfo - test info of the currently running test, or `nullptr` is a test is not running.
     ','line_number':297,'multiline':True]['text':'*
 * Base type for unit test fixtures.  Also, the default fixture type used
 * by the TEST() macro.
 ','line_number':307,'multiline':True]['text':'*
     * Called on the test object before running the test.
     ','line_number':320,'multiline':True]['text':'*
     * Called on the test object after running the test.
     ','line_number':325,'multiline':True]['text':'*
     * Adds a Test to a Suite, used by TEST/TEST_F macros.
     ','line_number':331,'multiline':True]['text':'*
         * These TestInfo must point to data that outlives this RegistrationAgent.
         * In the case of TEST/TEST_F, these are static variables.
         ','line_number':337,'multiline':True]['text':'*
     * This exception class is used to exercise the testing framework itself. If a test
     * case throws it, the framework would not consider it an error.
     ','line_number':366,'multiline':True]['text':'*
     * Starts capturing messages logged by code under test.
     *
     * Log messages will still also go to their default destination; this
     * code simply adds an additional sink for log messages.
     *
     * Clears any previously captured log lines.
     ','line_number':372,'multiline':True]['text':'*
     * Stops capturing log messages logged by code under test.
     ','line_number':382,'multiline':True]['text':'*
     * Gets a vector of strings, one log line per string, captured since
     * the last call to startCapturingLogMessages() in this test.
     ','line_number':387,'multiline':True]['text':'*
     * Returns the number of collected log lines containing "needle".
     ','line_number':394,'multiline':True]['text':'*
     * Returns the number of collected log lines where "needle" is a subset of a line.
     *
     * Does a Depth-First-Search of a BSON document. Validates each element in "needle" exists in
     * "haystack". It ignores extra elements in "haystack".
     *
     * In example haystack:     { i : 1, a : { b : 1 } },
     * a valid needles include: { i : 1}  or  {a : { b : 1}}
     * It will not find { b: 1 } since it does not search recursively for sub-tree matches.
     *
     * If a BSON Element is undefined, it simply checks for its existence, not its type or value.
     * This allows callers to test for the existence of elements in variable length log lines.
     ','line_number':399,'multiline':True]['text':'*
     * Prints the captured log lines.
     ','line_number':414,'multiline':True]['text':'*
     * The test itself.
     ','line_number':420,'multiline':True]['text':'*
 * Return a list of suite names.
 ','line_number':426,'multiline':True]['text':'* Invocation info (used e.g. by death test to exec). ','line_number':431,'multiline':True]['text':'* Copy of the original `argv` from main. ','line_number':433,'multiline':True]['text':'* If nonempty, this process is a death test respawn. ','line_number':435,'multiline':True]['text':'*
     * A unit test main has to turn this on to indicate that it can be brought to
     * the death test from a fresh exec with `--suite` and `--filter` options.
     * Otherwise death tests simply fork. See death_test.cpp.
     ','line_number':437,'multiline':True]['text':' namespace mongo::unittest','line_number':454,'multiline':False]