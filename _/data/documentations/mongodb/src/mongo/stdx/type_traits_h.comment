['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace stdx','line_number':41,'multiline':False]['text':' namespace mongo','line_number':42,'multiline':False]['text':' TODO: Deal with importing this from C++20, when the time comes.','line_number':44,'multiline':False]['text':' namespace stdx','line_number':64,'multiline':False]['text':' namespace mongo','line_number':65,'multiline':False]['text':' TODO: Re-evaluate which of these we need when making the cutover to C++17.','line_number':68,'multiline':False]['text':' namespace detail','line_number':78,'multiline':False]['text':' namespace stdx','line_number':103,'multiline':False]['text':' namespace mongo','line_number':104,'multiline':False]['text':' TS2's `std::experimental::is_detected` and related traits.','line_number':106,'multiline':False]['text':' See https://en.cppreference.com/w/cpp/experimental/is_detected','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' It's a utility for concisely writing traits. It allows a simple','line_number':109,'multiline':False]['text':' `Op<...>` alias template to be interrogated for substitution','line_number':110,'multiline':False]['text':' failure, and a few related utilities cover common uses of it.','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' Examples:','line_number':113,'multiline':False]['text':'      template <typename T>','line_number':114,'multiline':False]['text':'      using HasAValueTypeOp = typename T::value_type;','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':'      template <typename T>','line_number':117,'multiline':False]['text':'      constexpr bool hasAValueType = stdx::is_detected_v<HasAValueType, T>;','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'      // You can also access what the Op's type result was if it succeeds.','line_number':120,'multiline':False]['text':'      // If it fails, the typedef will be the sentinel `stdx::nonesuch` type.','line_number':121,'multiline':False]['text':'      template <typename T>','line_number':122,'multiline':False]['text':'      using InThatCaseWhatWasIt = stdx::is_detected_t<HasAValueType, T>;','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':'      // Or provide your own default:','line_number':125,'multiline':False]['text':'      template <typename T>','line_number':126,'multiline':False]['text':'      using ValueTypeOrVoid = stdx::is_detected_or_t<void, HasAValueType, T>;','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' This std::experimental TS2 API may or may not be present in','line_number':129,'multiline':False]['text':' toolchain, so it's simplest to provide a full implementation','line_number':130,'multiline':False]['text':' here until such time as it's available in `std::` or the trait','line_number':131,'multiline':False]['text':' creation niche is filled by simpler language features (e.g.','line_number':132,'multiline':False]['text':' `concept`) and we all migrate off of direct SFINAE.','line_number':133,'multiline':False]['text':' namespace detail','line_number':146,'multiline':False]['text':' namespace mongo::stdx','line_number':182,'multiline':False]