['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Manages an alternate stack for signal handlers.
 * A dummy implementation is provided on platforms which do not support `sigaltstack`.
 ','line_number':56,'multiline':True]['text':'* Return an object that installs and uninstalls our `_stackStorage` as `sigaltstack`. ','line_number':63,'multiline':True]['text':' It would be nice for this to be a constexpr, but','line_number':81,'multiline':False]['text':' MINSIGSTKSZ became a macro that invoked `sysconf` in glibc','line_number':82,'multiline':False]['text':' 2.34.','line_number':83,'multiline':False]['text':' Signal stack consumption was measured in mongo/util/stacktrace_test.','line_number':106,'multiline':False]['text':' 64 kiB is 4X our worst case, so that should be enough.','line_number':107,'multiline':False]['text':'   .                                    signal handler action','line_number':108,'multiline':False]['text':'   .  --use-libunwind : ----\       =============================','line_number':109,'multiline':False]['text':'   .  --dbg=on        : -\   \      minimal |  print  | backtrace','line_number':110,'multiline':False]['text':'   .                     =   =      ========|=========|==========','line_number':111,'multiline':False]['text':'   .                     N   N :      4,344 |   7,144 |     5,096','line_number':112,'multiline':False]['text':'   .                     Y   N :      4,424 |   7,528 |     5,160','line_number':113,'multiline':False]['text':'   .                     N   Y :      4,344 |  13,048 |     7,352','line_number':114,'multiline':False]['text':'   .                     Y   Y :      4,424 |  13,672 |     8,392','line_number':115,'multiline':False]['text':'   ( https://jira.mongodb.org/secure/attachment/233569/233569_stacktrace-writeup.txt )','line_number':116,'multiline':False]['text':' !MONGO_HAS_SIGALTSTACK','line_number':121,'multiline':False]['text':' needed to suppress 'unused variable' warnings.','line_number':124,'multiline':False]['text':' !MONGO_HAS_SIGALTSTACK','line_number':128,'multiline':False]['text':' namespace support','line_number':131,'multiline':False]['text':'*
 * We're wrapping std::thread here, rather than aliasing it, because we'd like
 * a std::thread that's identical in all ways to the original, but terminates
 * if a new thread cannot be allocated.  We'd like this behavior because we
 * rarely if ever try/catch thread creation, and don't have a strategy for
 * retrying.  Therefore, all throwing does is remove context as to which part
 * of the system failed thread creation (as the exception itself is caught at
 * the top of the stack).
 *
 * We also want to allocate and install a `sigaltstack` to diagnose stack overflows.
 *
 * We're putting this in stdx, rather than having it as some kind of
 * mongo::Thread, because the signature and use of the type is otherwise
 * completely identical.  Rather than migrate all callers, it was deemed
 * simpler to make the in place adjustment and retain it in stdx.
 *
 * We implement this with private inheritance to minimize the overhead of our
 * wrapping and to simplify the implementation.
 ','line_number':133,'multiline':True]['text':' NOLINT','line_number':152,'multiline':False]['text':' NOLINT','line_number':154,'multiline':False]['text':' NOLINT','line_number':155,'multiline':False]['text':'*
     * As of C++14, the Function overload for std::thread requires that this constructor only
     * participate in overload resolution if std::decay_t<Function> is not the same type as thread.
     * That prevents this overload from intercepting calls that might generate implicit conversions
     * before binding to other constructors (specifically move/copy constructors).
     *
     * NOTE: The `Function f` parameter must be taken by value, not reference or forwarding
     * reference, as it is used on the far side of the thread launch, and this ctor has to properly
     * transfer ownership to the far side's thread.
     ','line_number':165,'multiline':True]['text':' NOLINT','line_number':179,'multiline':False]['text':' On Win32 we have to set the terminate handler per thread.','line_number':184,'multiline':False]['text':' We set it to our universal terminate handler, which people can register via the','line_number':185,'multiline':False]['text':' `stdx::set_terminate` hook.','line_number':186,'multiline':False]['text':' NOLINT','line_number':187,'multiline':False]['text':' NOLINT','line_number':196,'multiline':False]['text':' NOLINT','line_number':197,'multiline':False]['text':' NOLINT','line_number':198,'multiline':False]['text':' NOLINT','line_number':199,'multiline':False]['text':' NOLINT','line_number':201,'multiline':False]['text':' NOLINT','line_number':202,'multiline':False]['text':' NOLINT','line_number':205,'multiline':False]['text':' NOLINT','line_number':215,'multiline':False]['text':' NOLINT','line_number':216,'multiline':False]['text':' NOLINT','line_number':219,'multiline':False]['text':' NOLINT','line_number':220,'multiline':False]['text':' NOLINT','line_number':223,'multiline':False]['text':' NOLINT','line_number':228,'multiline':False]['text':' NOLINT','line_number':230,'multiline':False]['text':' NOLINT','line_number':240,'multiline':False]['text':' namespace this_thread','line_number':245,'multiline':False]['text':' namespace stdx','line_number':247,'multiline':False]['text':' namespace mongo','line_number':251,'multiline':False]