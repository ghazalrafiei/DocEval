['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Structure used to declare all the prerequisites that the catalog needs to meet in order for an
 * acquisition of a namespace to succeed.
 ','line_number':61,'multiline':True]['text':'*
     * Overload, which acquires a collection by NSS or DB/UUID, without imposing an expected
     * relationship between NSS and UUID.
     ','line_number':66,'multiline':True]['text':'*
     * Overload, which acquires a collection by NSS/UUID combination, requiring that, if specified,
     * the UUID of the namespace matches exactly.
     ','line_number':82,'multiline':True]['text':'*
     * Overload, which acquires a collection or view by NSS or DB/UUID and infers the placement and
     * read concerns from the OperationShardingState and ReadConcern values on the OperationContext.
     ','line_number':100,'multiline':True]['text':' When 'nssOrUUID' is in the NamespaceString form 'expectedUUID' may contain the expected','line_number':112,'multiline':False]['text':' collection UUID for that nss. When 'nssOrUUID' is in the UUID form, then 'expectedUUID' is','line_number':113,'multiline':False]['text':' boost::none because the 'nssOrUUID' already expresses the desired UUID.','line_number':114,'multiline':False]['text':'*
     * Overload, which acquires a collection by NSS or DB/UUID, without imposing an expected
     * relationship between NSS and UUID.
     ','line_number':124,'multiline':True]['text':'*
     * Overload, which acquires a collection by NSS/UUID combination, requiring that, if specified,
     * the UUID of the namespace matches exactly.
     ','line_number':138,'multiline':True]['text':'*
     * Infers the placement and read concerns from the OperationShardingState and ReadConcern values
     * on the OperationContext.
     ','line_number':154,'multiline':True]['text':'*
 * A thread-unsafe ref-counted acquisition of a collection. The underlying acquisition stored inside
 * the operation's TransactionResources is managed by this class. It will be released whenever the
 * last reference to it is descoped. This class can be freely copied and moved around, each copy
 * will point to the same acquisition.
 *
 * This class cannot be transferred to other threads/OperationContext since the pointed to resources
 * lifetime would be held and manipulated by another thread.
 ','line_number':172,'multiline':True]['text':'*
     * Returns whether the acquisition found a collection or the collection didn't exist.
     ','line_number':198,'multiline':True]['text':'*
     * Returns the UUID of the acquired collection, but this operation is only allowed if the
     * collection `exists()`, otherwise this method will invariant.
     ','line_number':203,'multiline':True]['text':' Access to services associated with the specified collection top to bottom on the hierarchical','line_number':209,'multiline':False]['text':' stack','line_number':210,'multiline':False]['text':' Sharding catalog services','line_number':212,'multiline':False]['text':' Local catalog services','line_number':216,'multiline':False]['text':' Points to the acquired resources that live on the TransactionResources opCtx decoration. The','line_number':221,'multiline':False]['text':' lifetime of these resources is tied to the lifetime of this CollectionAcquisition.','line_number':222,'multiline':False]['text':'*
 * A thread-unsafe ref-counted acquisition of a view. The underlying acquisition stored inside the
 * operation's TransactionResources is managed by this class. It will be released whenever the last
 * reference to it is descoped. This class can be freely copied and moved around, each copy will
 * point to the same acquisition.
 *
 * This class cannot be transferred to other threads/OperationContext since the pointed to resources
 * lifetime would be held and manipulated by another thread.
 ','line_number':227,'multiline':True]['text':' StorEx services','line_number':251,'multiline':False]['text':' Points to the acquired resources that live on the TransactionResources opCtx decoration. The','line_number':255,'multiline':False]['text':' lifetime of these resources is tied to the lifetime of this ViewAcquisition.','line_number':256,'multiline':False]['text':'*
 * Takes into account the specified namespace acquisition requests and if they can be satisfied,
 * adds the acquired collections to the set ot TransactionResources for the current operation.
 *
 * This method will acquire and 2-phase hold all the necessary hierarchical locks (Global, DB and
 * Collection).
 ','line_number':332,'multiline':True]['text':'*
 * Same semantics as `acquireCollectionsOrViews` above, but will not acquire or hold any of the
 * 2-phase hierarchical locks if allowed for this operation. The conditions required for the
 * acquisition to be lock-free are:
 *    * The operation is not a multi-document transaction.
 *    * The global lock is not write locked.
 *    * No storage transaction is already open, or if it is, it has to be for a lock free operation.
 ','line_number':356,'multiline':True]['text':'*
 * Please read the comments on AcquisitionPrerequisites::kLocalCatalogOnlyWithPotentialDataLoss for
 * more information on the semantics of this acquisition.
 ','line_number':376,'multiline':True]['text':'*
 * This utility is what allows modifications to the local catalog part of an acquisition for a
 * specific collection to become visible on a previously established acquisition for that
 * collection, before or after the end of a WUOW.
 *
 * The presence of ScopedLocalCatalogWriteFence on the stack renders the collection for which it was
 * instantiated unusable within its scope. Once it goes out of scope, any changes performed to the
 * catalog collection will be visible to:
 *  - The transaction only, if the WUOW has not yet committed
 *  - Any subsequent collection acquisitions, when the WUOW commits
 *
 * NOTE: This utility by itself does not ensure that catalog modifications which are subordinate to
 * the placement concern (create collection is subordinate to the location of the DB primary, for
 * example) do not conflict with placement changes (e.g. movePrimary). This is currently implemented
 * at a higher level through the usage of DB/Collection X-locks.
 ','line_number':383,'multiline':True]['text':'*
 * Serves as a temporary container for transaction resources which have been yielded via a call to
 * `yieldTransactionResources`. Must never be destroyed without having been restored and the
 * transaction resources properly committed/aborted, or disposed of.
 ','line_number':416,'multiline':True]['text':'*
     * Releases the yielded TransactionResources, transitions the resources back to the opCtx and
     * marks them as FAILED.
     ','line_number':431,'multiline':True]['text':'*
 * This method puts the TransactionResources associated with the current OpCtx into the yielded
 * state and then detaches them from the OpCtx, moving their ownership to the returned object.
 *
 * The returned object must either be properly restored by a later call to
 * `restoreTransactionResourcesToOperationContext` or it must be
 * `.transitionTransactionResourcesToFailedState()`d before destruction.
 *
 * It is not always allowed to yield the transaction resources and it is the caller's responsibility
 * to verify a yield can be performed by calling Locker::canSaveLockState().
 ','line_number':441,'multiline':True]['text':'*
 * An opaque class meant for containing TransactionResources that are stashed for subsequent
 * getMores.
 *
 * Usage of this class must be done via the RAII type HandleTransactionResourcesFromStasher. It will
 * take care of restoring the TransactionResources onto the operation and stash them back once it
 * goes out of scope.
 ','line_number':457,'multiline':True]['text':'*
     * Releases the yielded TransactionResources without transitioning them back to an opCtx. This
     * releases all locks and acquisitions held.
     ','line_number':486,'multiline':True]['text':'*
 * Interface for supporting storing/releasing of stashed transaction resources.
 * See ClientCursor for example implementation.
 ','line_number':499,'multiline':True]['text':'*
     *  Releases the stashed TransactionResources to the caller.
     ','line_number':508,'multiline':True]['text':'*
     * Stashes the provided TransactionResources.
     ','line_number':513,'multiline':True]['text':'*
 * This method puts the TransactionResources associated with the current OpCtx into the stashed
 * state and then detaches them from the OpCtx, moving their ownership to the given cursor.
 ','line_number':529,'multiline':True]['text':'*
 * An RAII class that handles restoration of the TransactionResources onto the OperationContext from
 * a TransactionResourcesStasher.
 *
 * This class automatically handles stashing and unstashing the resources onto the
 * TransactionResourcesStasher as long as the TransactionResources aren't in the FAILED
 * state. If the operation has failed and the resources have to be released the user must
 * dismissRestoredResources() in order to release them and not stash them into the stasher.
 ','line_number':536,'multiline':True]['text':'*
     * Marks the current TransactionResources as FAILED and releases all resources. After calling
     * this method the transactions won't be stashed back into the ClientCursor.
     ','line_number':551,'multiline':True]['text':' namespace shard_role_details','line_number':589,'multiline':False]['text':' namespace mongo','line_number':590,'multiline':False]