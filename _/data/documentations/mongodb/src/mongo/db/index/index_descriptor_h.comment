['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A cache of information computed from the memory-mapped per-index data (OnDiskIndexData).
 * Contains accessors for the various immutable index parameters, and an accessor for the
 * mutable "head" pointer which is index-specific.
 *
 * All synchronization is the responsibility of the caller.
 ','line_number':62,'multiline':True]['text':' Used to report the result of a comparison between two indexes.','line_number':74,'multiline':False]['text':' Indicates that the indexes do not match.','line_number':76,'multiline':False]['text':' Indicates that the options which uniquely identify an index match.','line_number':77,'multiline':False]['text':' Indicates that all applicable index options match.','line_number':78,'multiline':False]['text':' Removed in 4.4','line_number':97,'multiline':False]['text':'*
     * infoObj is a copy of the index-describing BSONObj contained in the catalog.
     ','line_number':111,'multiline':True]['text':'*
     * Returns true if the specified index version is supported, and returns false otherwise.
     ','line_number':116,'multiline':True]['text':'*
     * Returns the index version to use if it isn't specified in the index specification.
     ','line_number':121,'multiline':True]['text':'','line_number':126,'multiline':False]['text':' Information about the key pattern.','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':'*
     * Return the user-provided index key pattern.
     * Example: {geo: "2dsphere", nonGeo: 1}
     * Example: {foo: 1, bar: -1}
     ','line_number':130,'multiline':True]['text':'*
     * Return the path projection spec, if one exists. This is only applicable for wildcard ('$**')
     * and columnstore indexes. It is kept as originally specified by the createIndex() call, not
     * normalized.
     *
     * It contains only the projection object that was contained in one of the fields listed below
     * from the original createIndex() parameters object, but it does NOT preserve the field name:
     *   - "wildcardProjection"    (IndexDescriptor::kWildcardProjectionFieldName)
     *   - "columnstoreProjection" (IndexDescriptor::kColumnStoreProjectionFieldName)
     *
     * This is set by the IndexDescriptor constructor and never changes after that.
     *
     * Example: db.a.createIndex({"$**":1}, {"name": "i1", "wildcardProjection": {"a.b": 1}})
     *   return (unnormalized) object: {"a.b":{"$numberDouble":"1"}}
     ','line_number':139,'multiline':True]['text':'*
     * Returns the normalized path projection spec, if one exists. This is only applicable for
     * wildcard ('$**') and columnstore indexes. It is the normalized version of the path projection
     * and is used to determine whether a new index candidate from createIndex() duplicates an
     * existing index.
     *
     * It contains the normalized projection object based on the original object that was contained
     * in one of the fields listed below from the original createIndex() parameters object, but it
     * does NOT preserve the field name:
     *   - "wildcardProjection"    (IndexDescriptor::kWildcardProjectionFieldName)
     *   - "columnstoreProjection" (IndexDescriptor::kColumnStoreProjectionFieldName)
     *
     * This is set by the IndexDescriptor constructor and never changes after that.
     *
     * Example: db.a.createIndex({"$**":1}, {"name": "i1", "wildcardProjection": {"a.b": 1}})
     *   return (normalized) object: {"a":{"b":true},"_id":false}
     ','line_number':158,'multiline':True]['text':' How many fields do we index / are in the key pattern?','line_number':179,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' Information about the index's namespace / collection.','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':' Return the name of the index.','line_number':188,'multiline':False]['text':' Return the name of the access method we must use to access this index's data.','line_number':193,'multiline':False]['text':' Returns the type of the index associated with this descriptor.','line_number':198,'multiline':False]['text':'*
     * Return a pointer to the IndexCatalogEntry that owns this descriptor, or null if orphaned.
     ','line_number':203,'multiline':True]['text':'','line_number':214,'multiline':False]['text':' Properties every index has','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' Return what version of index this is.','line_number':218,'multiline':False]['text':' Return the 'Ordering' of the index keys.','line_number':223,'multiline':False]['text':' May each key only occur once?','line_number':228,'multiline':False]['text':' Is this index sparse?','line_number':237,'multiline':False]['text':' Is this a partial index?','line_number':242,'multiline':False]['text':' Return a (rather compact) std::string representation.','line_number':255,'multiline':False]['text':' Return the info object.','line_number':260,'multiline':False]['text':'*
     * Compares the current IndexDescriptor against the given existing index entry 'existingIndex'.
     * Returns kIdentical if all index options are logically identical, kEquivalent if all options
     * which uniquely identify an index are logically identical, and kDifferent otherwise.
     ','line_number':269,'multiline':True]['text':'*
     * Returns the field names from the index key pattern.
     *
     * Examples:
     * For the index key pattern {a: 1, b: 1}, this method returns {"a", "b"}.
     * For the text index key pattern {a: "text", _fts: "text", b: "text"}, this method returns
     * {"a", "term", "weight", "b"}.
     *
     * Note that this method will not be able to resolve the field names for a wildcard index. So,
     * for the wild card index {"$**": 1}, this method will return {"$**"}.
     ','line_number':295,'multiline':True]['text':'*
     * Returns true if the key pattern is for the _id index.
     * The _id index must have form exactly {_id : 1} or {_id : -1}.
     * Allows an index of form {_id : "hashed"} to exist but
     * Do not consider it to be the primary _id index
     ','line_number':308,'multiline':True]['text':'*
     * Returns true if the key pattern is for the _id index and is hashed.
     * The _id index must have form exactly {_id : "hashed"}.
     ','line_number':327,'multiline':True]['text':'
     * Holder of shared state between IndexDescriptor clones.
     ','line_number':345,'multiline':True]['text':' What access method should we use for this index?','line_number':351,'multiline':False]['text':' The BSONObj describing the index.  Accessed through the various members above.','line_number':356,'multiline':False]['text':' --- cached data from _infoObj','line_number':359,'multiline':False]['text':' How many fields are indexed?','line_number':361,'multiline':False]['text':' for wildcardProjection / columnstoreProjection; never changes','line_number':363,'multiline':False]['text':' for wildcardProjection / columnstoreProjection; never changes','line_number':365,'multiline':False]['text':' '_ordering' should be initialized after '_indexType' because different index types may','line_number':374,'multiline':False]['text':' require different handling of the Ordering.','line_number':375,'multiline':False]['text':' Many query stages require going from an IndexDescriptor to its IndexCatalogEntry, so for','line_number':385,'multiline':False]['text':' now we need this.','line_number':386,'multiline':False]['text':' namespace mongo','line_number':394,'multiline':False]