['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':35,'multiline':False]['text':' Internal exception to abort key generation. Should be translated to something user friendly and','line_number':96,'multiline':False]['text':' not escape past this file.','line_number':97,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' Helper functions for getS2Keys','line_number':108,'multiline':False]['text':'','line_number':109,'multiline':False]['text':' Don't index big polygon','line_number':122,'multiline':False]['text':' Only certain geometries can be indexed in the old index format S2_INDEX_VERSION_1.  See','line_number':127,'multiline':False]['text':' definition of S2IndexVersion for details.','line_number':128,'multiline':False]['text':' Project the geometry into spherical space','line_number':134,'multiline':False]['text':'
 * We take the cartesian product of all keys when appending.
 ','line_number':148,'multiline':True]['text':'
         * This is the base case when the keys for the first field are generated.
         ','line_number':165,'multiline':True]['text':'
         * We copy all of the existing keys and perform 'fn' on each copy.
         ','line_number':172,'multiline':True]['text':'*
 * Fills 'out' with the S2 keys that should be generated for 'elements' in a 2dsphere index.
 *
 * Returns true if an indexed element of the document uses multiple cells for its covering, and
 * returns false otherwise.
 ','line_number':180,'multiline':True]['text':' We'll be taking the cartesian product of cells and keysToAdd, make sure the output won't','line_number':207,'multiline':False]['text':' be too big.','line_number':208,'multiline':False]['text':'*
 * Fills 'out' with the S2 keys that should be generated for 'elements' in a 2dsphere_bucket index.
 *
 * Returns true if an indexed element of the document uses multiple cells for its covering, and
 * returns false otherwise.
 ','line_number':236,'multiline':True]['text':'*
         * We're going to build a MultiPoint GeoJSON that contains all the distinct points in the
         * bucket. The S2RegionCoverer will index that the best it can within the cell limits we
         * impose. In order to re-use S2GetKeysForElement, we need to wrap the GeoJSON as a
         * sub-document of our constructed BSON so we can pass it as an element. In the end, we're
         * building a document like:
         * {
         *   "shape": {
         *     "type": "MultiPoint",
         *     "coords": [
         *        ...
         *     ]
         *   }
         * }
         ','line_number':253,'multiline':True]['text':' We'll be taking the cartesian product of cells and keysToAdd, make sure the output won't','line_number':301,'multiline':False]['text':' be too big.','line_number':302,'multiline':False]['text':'*
 * Fills 'out' with the keys that should be generated for an array value 'obj' in a 2dsphere index.
 * A key is generated for each element of the array value 'obj'.
 ','line_number':330,'multiline':True]['text':' Empty arrays are indexed as undefined.','line_number':344,'multiline':False]['text':' Non-empty arrays are exploded.','line_number':353,'multiline':False]['text':'*
 * Fills 'out' with the keys that should be generated for a value 'elt' in a 2dsphere index. If
 * 'elt' is an array value, then a key is generated for each element of the array value 'obj'.
 *
 * Returns true if 'elt' is an array value and returns false otherwise.
 ','line_number':375,'multiline':True]['text':' One thing, not an array, index as-is.','line_number':394,'multiline':False]['text':'*
 * Fills 'out' with the non-geo keys that should be generated for 'elements' in a 2dsphere
 * index. If any element in 'elements' is an array value, then a key is generated for each
 * element of that array value.
 *
 * Returns true if any element of 'elements' is an array value and returns false otherwise.
 ','line_number':414,'multiline':True]['text':' Missing fields are indexed as null.','line_number':431,'multiline':False]['text':' namespace','line_number':449,'multiline':False]['text':' static','line_number':457,'multiline':False]['text':' If we have a timeseries collection, check that indexed metric fields do not have expanded','line_number':461,'multiline':False]['text':' array values','line_number':462,'multiline':False]['text':' Each user metric field will be included twice, as both control.min.<field> and','line_number':464,'multiline':False]['text':' control.max.<field>, so we'll want to keep track that we've checked data.<field> to avoid','line_number':465,'multiline':False]['text':' scanning it twice. The time field can be excluded as it is guaranteed to be a date at','line_number':466,'multiline':False]['text':' insertion time.','line_number':467,'multiline':False]['text':' Exclude checking the time field. Time values are explicitly dates and not','line_number':482,'multiline':False]['text':' arrays.','line_number':483,'multiline':False]['text':' We are in fact dealing with a metric field. First let's check the min and max','line_number':489,'multiline':False]['text':' values to see if we can conclude that there are no arrays present in the','line_number':490,'multiline':False]['text':' data.','line_number':491,'multiline':False]['text':' Go ahead and look closer','line_number':494,'multiline':False]['text':' static','line_number':510,'multiline':False]['text':' Get all the nested location fields, but don't return individual elements from','line_number':520,'multiline':False]['text':' the last array, if it exists.','line_number':521,'multiline':False]['text':'','line_number':534,'multiline':False]['text':' Grammar for location lookup:','line_number':535,'multiline':False]['text':' locs ::= [loc,loc,...,loc]|{<k>:loc,<k>:loc,...,<k>:loc}|loc','line_number':536,'multiline':False]['text':' loc  ::= { <k1> : #, <k2> : # }|[#, #]|{}','line_number':537,'multiline':False]['text':'','line_number':538,'multiline':False]['text':' Empty locations are ignored, preserving single-location semantics','line_number':539,'multiline':False]['text':'','line_number':540,'multiline':False]['text':' Differentiate between location arrays and locations','line_number':546,'multiline':False]['text':' by seeing if the first element value is a number','line_number':547,'multiline':False]['text':' Go through all the other index keys','line_number':573,'multiline':False]['text':' Get *all* fields for the index key','line_number':577,'multiline':False]['text':' If we have more than one key, store as an array of the objects','line_number':586,'multiline':False]['text':' static','line_number':602,'multiline':False]['text':' static','line_number':614,'multiline':False]['text':' If we hit an array while traversing the path, 'cstr' will point to the path component','line_number':634,'multiline':False]['text':' immediately following the array, or the null termination byte if the terminal path','line_number':635,'multiline':False]['text':' component was an array. In the latter case, 'remainingPath' will be empty.','line_number':636,'multiline':False]['text':' If 'ignoreArraysAlongPath' is set, we want to use the behaviour prior to SERVER-44050,','line_number':639,'multiline':False]['text':' which is to allow arrays along the field path (except the terminal path). This is done so','line_number':640,'multiline':False]['text':' that the document keys inserted prior to SERVER-44050 can be deleted or updated after the','line_number':641,'multiline':False]['text':' upgrade, allowing users to recover from the possible index corruption. The old behaviour','line_number':642,'multiline':False]['text':' before SERVER-44050 was to store 'null' index key if we encountered an array along the','line_number':643,'multiline':False]['text':' index field path. We will use the same logic in the context of removing index keys.','line_number':644,'multiline':False]['text':' Otherwise, throw if an array was encountered at any point along the path.','line_number':649,'multiline':False]['text':' static','line_number':684,'multiline':False]['text':' *** WARNING ***','line_number':686,'multiline':False]['text':' Changing the seed default will break existing indexes and sharded collections','line_number':687,'multiline':False]['text':' Does one of our documents have a geo field?','line_number':704,'multiline':False]['text':' We output keys in the same order as the fields we index.','line_number':716,'multiline':False]['text':' First, we get the keys that this field adds.  Either they're added literally from','line_number':718,'multiline':False]['text':' the value of the field, or they're transformed if the field is geo.','line_number':719,'multiline':False]['text':' Trailing array values aren't being expanded, so we still need to determine whether','line_number':725,'multiline':False]['text':' the last component of the indexed path 'keyElem.fieldName()' causes the index to be','line_number':726,'multiline':False]['text':' multikey. We say that it does if','line_number':727,'multiline':False]['text':'   (a) the last component of the indexed path ever refers to an array value','line_number':728,'multiline':False]['text':'   (regardless of','line_number':729,'multiline':False]['text':'       the number of array elements)','line_number':730,'multiline':False]['text':'   (b) the last component of the indexed path ever refers to GeoJSON data that','line_number':731,'multiline':False]['text':'   requires','line_number':732,'multiline':False]['text':'       multiple cells for its covering.','line_number':733,'multiline':False]['text':' null, undefined, {} and [] should all behave like there is no geo field. So we','line_number':746,'multiline':False]['text':' look for these cases and ignore those measurements if we find them.','line_number':747,'multiline':False]['text':' 2dsphere indices require that at least one geo field to be present in a','line_number':757,'multiline':False]['text':' document in order to index it.','line_number':758,'multiline':False]['text':' For >= V2,','line_number':781,'multiline':False]['text':' geo: null,','line_number':782,'multiline':False]['text':' geo: undefined','line_number':783,'multiline':False]['text':' geo: []','line_number':784,'multiline':False]['text':' should all behave like there is no geo field.  So we look for these cases','line_number':785,'multiline':False]['text':' and throw out the field elements if we find them.','line_number':786,'multiline':False]['text':' Get the :null and :undefined cases.','line_number':789,'multiline':False]['text':' And this is the :[] case.','line_number':793,'multiline':False]['text':' >= V2 2dsphere indices require that at least one geo field to be present','line_number':800,'multiline':False]['text':' in a document in order to index it.','line_number':801,'multiline':False]['text':' We expect there to be the missing field element present in the keys if data is','line_number':829,'multiline':False]['text':' missing.  So, this should be non-empty.','line_number':830,'multiline':False]['text':' Make sure that if we're >= V2 there's at least one geo field present in the doc.','line_number':850,'multiline':False]['text':' namespace mongo','line_number':875,'multiline':False]