['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' BulkBuilderCommon uses CRTP to implement a generic loop for draining keys from a bulk builder.
 * Child classes must implement these functions.
 *
 *   Return inserter that will insert keys into the index
 *   Also must initialize _ns to the namespace string.
 *   Inserter setUpBulkInserter(OperationContext* opCtx, bool dupsAllowed)
 *
 *   Return iterator it of the sorted keys for the type of the child class
 *   Iterator finalizeSort()
 *
 *   Check that current key comes after previous key in sort order.
 *   void debugEnsureSorted(const Key& data)
 *
 *   Return true if data is a duplicate, false otherwise. If duplicate checks don't apply, return
 *   false.
 *   bool duplicateCheck(OperationContext* opCtx, const Key& data, bool dupsAllowed,
 *                       const RecordIdHandlerFn& onDuplicateRecord)
 *
 *   Output key to write cursor.
 *   void insertKey(Inserter& inserter, const Key& data)
 *
 *  Perform finalizing steps for key.
 *  Status keyCommited(const KeyHandlerFn& onDuplicateKeyInserted, const Key& data, bool isDup)
 ','line_number':44,'multiline':True]['text':' secondsBetween ','line_number':95,'multiline':True]['text':' namespace mongo','line_number':97,'multiline':False]['text':' Before attempting to insert, perform a duplicate key check.','line_number':131,'multiline':False]['text':' Duplicates are checked before inserting.','line_number':153,'multiline':False]['text':' Yield locks every 'yieldIterations' key insertions.','line_number':163,'multiline':False]['text':' If we're here either it's a dup and we're cool with it or the addKey went just','line_number':170,'multiline':False]['text':' fine.','line_number':171,'multiline':False]['text':' namespace mongo','line_number':196,'multiline':False]