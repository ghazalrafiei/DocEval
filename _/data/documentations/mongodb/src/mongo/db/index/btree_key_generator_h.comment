['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Internal class used by BtreeAccessMethod to generate keys for indexed documents.
 * This class is meant to be kept under the index access layer.
 ','line_number':57,'multiline':True]['text':'*
     * Provides a context to generate keys based on names in 'fieldNames'. The 'fixed' argument
     * specifies values that have already been identified for their corresponding fields.
     ','line_number':63,'multiline':True]['text':'*
     * Generates the index keys for the document 'obj', and stores them in the set 'keys'.
     *
     * If the 'multikeyPaths' pointer is non-null, then it must point to an empty vector. If this
     * index type supports tracking path-level multikey information, then this function resizes
     * 'multikeyPaths' to have the same number of elements as the index key pattern and fills each
     * element with the prefixes of the indexed field that would cause this index to be multikey as
     * a result of inserting 'keys'.
     *
     * If the caller is certain that the current index is not multikey, and the insertion of 'obj'
     * will not turn the index into a multikey, then the 'skipMultikey' parameter can be set to
     * 'true' to be able to use an optimized algorithm for the index key generation. Otherwise,
     * this parameter must be set to 'false'. In this case a generic algorithm will be used, which
     * can handle both multikey and non-multikey indexes.
     *
     * If the 'collator' argument is set to null, this key generator orders strings according to the
     * simple binary compare. If non-null, represents the collator used to generate index keys for
     * indexed strings.
     ','line_number':73,'multiline':True]['text':'*
     * This function does _not_ generate any keys but extract non-array elements for building a key
     * string. It throws an exception if any extracted element is an array. This can be useful when
     * the caller wants to utilize these elements to build a set of index keys.
     *
     * This function returns a bit set denoting which fields in '_fieldNames' are existent in 'obj'.
     ','line_number':102,'multiline':True]['text':'*
     * Stores info regarding traversal of a positional path. A path through a document is
     * considered positional if this path element names an array element. Generally this means
     * that the field name consists of [0-9]+, but the implementation just calls .Obj() on
     * the array and looks for the named field. This logic happens even if the field does
     * not match [0-9]+.
     *
     * Example:
     *   The path 'a.1.b' can sometimes be positional due to path element '1'. In the document
     *   {a: [{b: 98}, {b: 99}]} it would be considered positional, and would refer to
     *   element 99. In the document {a: [{'1': {b: 97}}]}, the path is *not* considered
     *   positional and would refer to element 97.
     ','line_number':113,'multiline':True]['text':' Stores the array element indexed by position. If the key pattern has no positional','line_number':135,'multiline':False]['text':' element, then this is EOO.','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' Example:','line_number':138,'multiline':False]['text':'   Suppose the key pattern is {"a.0.x": 1} and we're extracting keys for document','line_number':139,'multiline':False]['text':'   {a: [{x: 98}, {x: 99}]}. We should store element {x: 98} here.','line_number':140,'multiline':False]['text':' The array to which 'positionallyIndexedElt' belongs.','line_number':143,'multiline':False]['text':' If we find a positionally indexed element, we traverse the remainder of the path until we','line_number':146,'multiline':False]['text':' find either another array element or the end of the path. The result of this traversal is','line_number':147,'multiline':False]['text':' stored here and used during the recursive call for each array element.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' Example:','line_number':150,'multiline':False]['text':'   Suppose we have key pattern {"a.1.b.0.c": 1}. The document for which we are','line_number':151,'multiline':False]['text':'   generating keys is {a: [0, {b: [{c: 99}]}]}. We will find that {b: [{c: 99}]}','line_number':152,'multiline':False]['text':'   is a positionally indexed element and store it as 'positionallyIndexedElt'.','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':'   We then traverse the remainder of the path, "b.0.c", until encountering an array. The','line_number':155,'multiline':False]['text':'   result is the array [{c: 99}] which is stored here as 'dottedElt'.','line_number':156,'multiline':False]['text':' The remaining path that must be traversed in 'dottedElt' to find the indexed','line_number':159,'multiline':False]['text':' element(s).','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' Example:','line_number':162,'multiline':False]['text':'   Continuing the example above, 'remainingPath' will be "0.c". Note that the path','line_number':163,'multiline':False]['text':'   "0.c" refers to element 99 in 'dottedElt', [{c: 99}].','line_number':164,'multiline':False]['text':'*
     * This recursive method does the heavy-lifting for getKeys().
     * It will modify 'fieldNames' and 'fixed'.
     ','line_number':168,'multiline':True]['text':'*
     * An optimized version of the key generation algorithm to be used when it is known that 'obj'
     * doesn't contain an array value in any of the fields in the key pattern.
     ','line_number':183,'multiline':True]['text':'*
     * A call to _getKeysWithArray() begins by calling this for each field in the key pattern. It
     * traverses the path '*field' in 'obj' until either reaching the end of the path or an array
     * element.
     *
     * The 'positionalInfo' arg is used for handling a field path where 'obj' has an
     * array indexed by position. See the comments for PositionalPathInfo for more detail.
     *
     * Returns the element extracted as a result of traversing the path, or an indexed array
     * if we encounter one during the path traversal.
     *
     * Out-parameters:
     *   --Sets *field to the remaining path that must be traversed.
     *   --Sets *arrayNestedArray to true if the returned BSONElement is a nested array that is
     *     indexed by position in its parent array. Otherwise sets *arrayNestedArray to false.
     *
     * Example:
     *   Suppose we have key pattern {"a.b.c": 1} and we're extracting keys from document
     *   {a: [{b: {c: 98}}, {b: {c: 99}}]}. On the first call to extractNextElement(), 'obj'
     *   will be the full document, {a: [{b: {c: 98}}, {b: {c: 99}}]}. The 'positionalInfo'
     *   argument is not relevant, because the array is not being positionally indexed.
     *   '*field' will point to "a.b.c".
     *
     *   The return value will be the array element [{b: {c: 98}}, {b: {c: 99}}], because path
     *   traversal stops when an indexed array is encountered. Furthermore, '*field' will be set
     *   to "b.c".
     *
     *   extractNextElement() will then be called from a recursive call to
     *   _getKeysWithArray() for each array element. For instance, it will get called with
     *   'obj' {b: {c: 98}} and '*field' pointing to "b.c". It will return element 98 and
     *   set '*field' to "". Similarly, it will return elemtn 99 and set '*field' to "" for
     *   the second array element.
     ','line_number':193,'multiline':True]['text':'*
     * Sets extracted elements in 'fixed' for field paths that we have traversed to the end.
     *
     * fieldNamesTemp and fixedTemp are temporary vectors that will be modified by this method
     *
     * Then calls _getKeysWithArray() recursively.
     ','line_number':231,'multiline':True]['text':' True if any of the indexed paths contains a positional path component. This prohibits the key','line_number':260,'multiline':False]['text':' generator from using the non-multikey fast path.','line_number':261,'multiline':False]['text':' These are used by getKeys below.','line_number':266,'multiline':False]['text':' A full key with all fields null.','line_number':268,'multiline':False]['text':' A vector with size equal to the number of elements in the index key pattern. Each element in','line_number':274,'multiline':False]['text':' the vector is the number of path components in the indexed field.','line_number':275,'multiline':False]['text':' namespace mongo','line_number':279,'multiline':False]