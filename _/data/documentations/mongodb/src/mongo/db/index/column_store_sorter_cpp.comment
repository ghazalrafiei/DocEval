['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Note: unlike function call parameters, the order of evaluation for initializer','line_number':79,'multiline':False]['text':' parameters is defined.','line_number':80,'multiline':False]['text':' Little-endian write','line_number':85,'multiline':False]['text':' Track memory usage of this new path.','line_number':141,'multiline':False]['text':' The sorter assumes that RecordIds are added in sorted order.','line_number':145,'multiline':False]['text':' namespace','line_number':166,'multiline':False]['text':' Cells loaded into memory are sorted by record id but not yet sorted by path. We perform that','line_number':191,'multiline':False]['text':' sort now, so that we can output cells sorted by (path, rid) for later consumption by our','line_number':192,'multiline':False]['text':' standard external merge implementation: SortIteratorInterface<Key, Value>::merge().','line_number':193,'multiline':False]['text':' Add (path, rid, cell) records to the spill file so that the first cell in each contiguous','line_number':212,'multiline':False]['text':' run of cells with the same path lives in its own chunk. E.g.:','line_number':213,'multiline':False]['text':'   Path1, rid1, Cell contents','line_number':214,'multiline':False]['text':'   CHUNK BOUNDARY','line_number':215,'multiline':False]['text':'   Path1, rid2, Cell Contents','line_number':216,'multiline':False]['text':'      ...','line_number':217,'multiline':False]['text':'   Path1, ridN, Cell Contents','line_number':218,'multiline':False]['text':'   CHUNK BOUNDARY','line_number':219,'multiline':False]['text':'   Path2, rid1, Cell Contents','line_number':220,'multiline':False]['text':'   CHUNK BOUNDARY','line_number':221,'multiline':False]['text':'   Path2, rid2, Cell Contents','line_number':222,'multiline':False]['text':'     ...','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':' During merging, file readers will hold one chunk from each spill file in memory, so','line_number':225,'multiline':False]['text':' optimizing chunk size can reduce memory usage during the merge. Merging for a column','line_number':226,'multiline':False]['text':' store index is a special case: because the sorter is loaded in RecordId order, all the','line_number':227,'multiline':False]['text':' cells from this spill are guaranteed to merge together, with no interleaving cells from','line_number':228,'multiline':False]['text':' other spill files.','line_number':229,'multiline':False]['text':'','line_number':230,'multiline':False]['text':' This layout will result in a merger that holds a single cell from each leg of the merge','line_number':231,'multiline':False]['text':' representing the first in a large contiguous range. Once that cell gets picked, the merge','line_number':232,'multiline':False]['text':' will consume all chunks at that path in that file before moving on to the next file or','line_number':233,'multiline':False]['text':' the next path.','line_number':234,'multiline':False]['text':'','line_number':235,'multiline':False]['text':' To avoid the pathological case where runs are very short, we don't force a chunk boundary','line_number':236,'multiline':False]['text':' when a run of cells would not result in a chunk greater than 1024 bytes.','line_number':237,'multiline':False]['text':' Add the chunk boundary just before the first cell with this path name.','line_number':241,'multiline':False]['text':' Add the chunk boundary just after the first cell with this path name, giving it','line_number':252,'multiline':False]['text':' its own chunk.','line_number':253,'multiline':False]['text':'*
 * This iterator "unwinds" our path -> CellVector mapping into sorted tuples of (path name,
 * recordId, cell), with the path name and recordId bundled into a single "key." The unwinding
 * proceeds using an outer iterator over the paths and an inner iterator for the current CellVector.
 * The outer iterator uses a separate path list that gets sorted when the 'InMemoryIterator' is
 * initialized. The inner iterator directly traverses the CellVector, which is already sorted.
 ','line_number':295,'multiline':True]['text':' Cells loaded into memory are sorted by record id but now yet by path. Sorting by path','line_number':305,'multiline':False]['text':' finalizes the sort algorithm.','line_number':306,'multiline':False]['text':' namespace mongo','line_number':365,'multiline':False]['text':'*
 * A 'nextFilename()' is required for the below "sorter.cpp" include to compile, but this file does
 * not use any of the 'Sorter' classes that call it.
 ','line_number':368,'multiline':True]['text':' namespace','line_number':375,'multiline':False]