['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * An IndexAccessMethod is the interface through which all the mutation, lookup, and
 * traversal of index entries is done. The class is designed so that the underlying index
 * data structure is opaque to the caller.
 *
 * IndexAccessMethods for existing indices are obtained through the system catalog.
 *
 * We assume the caller has whatever locks required.  This interface is not thread safe.
 *
 ','line_number':77,'multiline':True]['text':'*
     * Equivalent to (but shorter and faster than): dynamic_cast<SortedDataIndexAccessMethod*>(this)
     ','line_number':111,'multiline':True]['text':'','line_number':121,'multiline':False]['text':' Lookup, traversal, and mutation support','line_number':122,'multiline':False]['text':'','line_number':123,'multiline':False]['text':'*
     * Informs the index of inserts, updates, and deletes of records from the indexed collection.
     ','line_number':125,'multiline':True]['text':' ------ index level operations ------','line_number':158,'multiline':False]['text':'*
     * initializes this index
     * only called once for the lifetime of the index
     * if called multiple times, is an error
     ','line_number':161,'multiline':True]['text':'*
     * Validates the index. If 'full' is false, only performs checks which do not traverse the
     * index. If 'full' is true, additionally traverses the index and validates its internal
     * structure.
     ','line_number':168,'multiline':True]['text':'*
     * Returns the number of keys in the index, traversing the index to do so.
     ','line_number':175,'multiline':True]['text':'*
     * Add custom statistics about this index to BSON object builder, for display.
     *
     * 'scale' is a scaling factor to apply to all byte statistics.
     *
     * Returns true if stats were appended.
     ','line_number':180,'multiline':True]['text':'*
     * @return The number of bytes consumed by this index.
     *         Exactly what is counted is not defined based on padding, re-use, etc...
     ','line_number':191,'multiline':True]['text':'*
     * The number of unused free bytes consumed by this index on disk.
     ','line_number':197,'multiline':True]['text':'*
     * Attempt compaction to regain disk space if the indexed record store supports
     * compaction-in-place.
     ','line_number':202,'multiline':True]['text':'*
     * Fetches the Ident for this index.
     ','line_number':208,'multiline':True]['text':'*
     * Sets the Ident for this index.
     ','line_number':213,'multiline':True]['text':'','line_number':227,'multiline':False]['text':' Bulk operations support','line_number':228,'multiline':False]['text':'','line_number':229,'multiline':False]['text':'*
         * Insert into the BulkBuilder as-if inserting into an IndexAccessMethod.
         ','line_number':235,'multiline':True]['text':'*
         * Call this when you are ready to finish your bulk work.
         * @param dupsAllowed - If false and 'dupRecords' is not null, append with the RecordIds of
         *                      the uninserted duplicates.
         * @param yieldIterations - The number of iterations run before each yielding. Will not
         * yield if zero.
         * @param onDuplicateKeyInserted - Will be called for each duplicate key inserted into the
         * index.
         * @param onDuplicateRecord - If not nullptr, will be called for each RecordId of uninserted
         * duplicate keys.
         ','line_number':247,'multiline':True]['text':'*
         * Persists on disk the keys that have been inserted using this BulkBuilder.
         ','line_number':270,'multiline':True]['text':'*
         * Abandon the current snapshot and release then reacquire locks. Tests that target the
         * behavior of bulk index builds that yield can use failpoints to stall this yield.
         ','line_number':281,'multiline':True]['text':'*
     * Starts a bulk operation.
     * You work on the returned BulkBuilder and then call bulk->commit().
     * This can return NULL, meaning bulk mode is not available.
     *
     * It is only legal to initiate bulk when the index is new and empty, or when resuming an index
     * build.
     *
     * maxMemoryUsageBytes: amount of memory consumed before the external sorter starts spilling to
     *                      disk
     * stateInfo: the information to use to resume the index build, or boost::none if starting a
     * new index build.
     ','line_number':291,'multiline':True]['text':'*
 * Updates are two steps: verify that it's a valid update, and perform it.
 * prepareUpdate fills out the UpdateStatus and update actually applies it.
 ','line_number':311,'multiline':True]['text':' Holds the path components that would cause this index to be multikey as a result of inserting','line_number':329,'multiline':False]['text':' 'newKeys'. The 'newMultikeyPaths' vector remains empty if this index doesn't support','line_number':330,'multiline':False]['text':' path-level multikey tracking.','line_number':331,'multiline':False]['text':'*
 * Flags we can set for inserts and deletes (and updates, which are kind of both).
 ','line_number':335,'multiline':True]['text':' Are duplicate keys allowed in the index?','line_number':339,'multiline':False]['text':'*
     * Specifies whether getKeys should relax the index constraints or not, in order of most
     * permissive to least permissive.
     ','line_number':342,'multiline':True]['text':' Relax all constraints.','line_number':347,'multiline':False]['text':' Relax constraints only if shouldRelaxConstraintsFn callback returns true.','line_number':349,'multiline':False]['text':' Relax all constraints on documents that don't apply to a partial index.','line_number':351,'multiline':False]['text':' Enforce all constraints.','line_number':353,'multiline':False]['text':' Should we relax the index constraints?','line_number':357,'multiline':False]['text':'*
 * Provides implementations for many functions in the IndexAccessMethod interface that will be
 * shared across concrete implementations.
 *
 * IndexCatalogEntry owns an instance of IndexAccessMethod; an IndexCatalogEntry is also required
 * for the initialization and core functionality of this abstract class. To avoid any circular
 * dependencies, it is important that IndexAccessMethod remain an interface.
 ','line_number':361,'multiline':True]['text':'','line_number':374,'multiline':False]['text':' SortedData-specific functions','line_number':375,'multiline':False]['text':'','line_number':376,'multiline':False]['text':'*
     * Splits the sets 'left' and 'right' into two sets, the first containing the elements that
     * only appeared in 'left', and the second containing only elements that appeared in 'right'.
     *
     * Note this considers objects which are not identical as distinct objects. For example,
     * setDifference({BSON("a" << 0.0)}, {BSON("a" << 0LL)}) would result in the pair
     * ( {BSON("a" << 0.0)}, {BSON("a" << 0LL)} ).
     ','line_number':378,'multiline':True]['text':'*
     * Specifies whether getKeys is being used in the context of creating new keys, deleting
     * or validating existing keys.
     ','line_number':392,'multiline':True]['text':'*
     * Fills 'keys' with the keys that should be generated for 'obj' on this index.
     * Based on 'mode', it will honor or ignore index constraints, e.g. duplicated key, key too
     * long, and geo index parsing errors. The ignoring of constraints is for replication due to
     * idempotency reasons. In those cases, the generated 'keys' will be empty.
     *
     * If the 'multikeyPaths' pointer is non-null, then it must point to an empty vector. If this
     * index type supports tracking path-level multikey information, then this function resizes
     * 'multikeyPaths' to have the same number of elements as the index key pattern and fills each
     * element with the prefixes of the indexed field that would cause this index to be multikey as
     * a result of inserting 'keys'.
     *
     * If the 'multikeyMetadataKeys' pointer is non-null, then the function will populate the
     * BSONObjSet with any multikey metadata keys generated while processing the document. These
     * keys are not associated with the document itself, but instead represent multi-key path
     * information that must be stored in a reserved keyspace within the index.
     *
     * If any key generation errors which should be suppressed due to the provided GetKeysMode are
     * encountered, 'onSuppressedErrorFn' is called if provided. The 'onSuppressedErrorFn'
     * return value indicates whether the error should finally suppressed. If not provided, it is as
     * if it returned true, and all suppressible errors are suppressed.
     ','line_number':398,'multiline':True]['text':'*
     * Inserts the specified keys into the index. Does not attempt to determine whether the
     * insertion of these keys should cause the index to become multikey. The 'numInserted' output
     * parameter, if non-nullptr, will be reset to the number of keys inserted by this function
     * call, or to zero in the case of either a non-OK return Status or an empty 'keys' argument.
     ','line_number':434,'multiline':True]['text':'*
     * Inserts the specified keys into the index. and determines whether these keys should cause the
     * index to become multikey. If so, this method also handles the task of marking the index as
     * multikey in the catalog, and sets the path-level multikey information if applicable.
     ','line_number':450,'multiline':True]['text':'*
     * Analogous to insertKeys above, but remove the keys instead of inserting them.
     * 'numDeleted' will be set to the number of keys removed from the index for the provided keys.
     ','line_number':467,'multiline':True]['text':'*
     * Gets the keys of the documents 'from' and 'to' and prepares them for the update.
     * Provides a ticket for actually performing the update.
     ','line_number':477,'multiline':True]['text':'*
     * Perform a validated update.  The keys for the 'from' object will be removed, and the keys
     * for the object 'to' will be added.  Returns OK if the update succeeded, failure if it did
     * not.  If an update does not succeed, the index will be unmodified, and the keys for
     * 'from' will remain.  Assumes that the index has not changed since prepareUpdate was
     * called.  If the index was changed, we may return an error, as our ticket may have been
     * invalidated.
     *
     * 'numInserted' will be set to the number of keys inserted into the index for the document.
     * 'numDeleted' will be set to the number of keys removed from the index for the document.
     ','line_number':490,'multiline':True]['text':'*
     * Returns an unpositioned cursor over 'this' index.
     ','line_number':513,'multiline':True]['text':'*
     * Given the set of keys, multikeyMetadataKeys and multikeyPaths generated by a particular
     * document, return 'true' if the index should be marked as multikey and 'false' otherwise.
     ','line_number':520,'multiline':True]['text':'*
     * Provides direct access to the SortedDataInterface. This should not be used to insert
     * documents into an index, except for testing purposes.
     ','line_number':528,'multiline':True]['text':'','line_number':537,'multiline':False]['text':' Implementations of general IndexAccessMethod API.','line_number':538,'multiline':False]['text':'','line_number':539,'multiline':False]['text':'*
     * Perform some initial validation on the document to ensure it can be indexed before calling
     * the implementation-specific 'doGetKeys' method.
     ','line_number':613,'multiline':True]['text':'*
     * Fills 'keys' with the keys that should be generated for 'obj' on this index.
     *
     * If the 'multikeyPaths' pointer is non-null, then it must point to an empty vector. If this
     * index type supports tracking path-level multikey information, then this function resizes
     * 'multikeyPaths' to have the same number of elements as the index key pattern and fills each
     * element with the prefixes of the indexed field that would cause this index to be multikey as
     * a result of inserting 'keys'.
     *
     * If the 'multikeyMetadataKeys' pointer is non-null, then the function will populate the
     * BSONObjSet with any multikey metadata keys generated while processing the document. These
     * keys are not associated with the document itself, but instead represent multi-key path
     * information that must be stored in a reserved keyspace within the index.
     ','line_number':621,'multiline':True]['text':'*
     * Removes a single key from the index.
     *
     * Used by remove() only.
     ','line_number':649,'multiline':True]['text':'*
     * While inserting keys into index (from external sorter), if a duplicate key is detected
     * (when duplicates are not allowed), 'onDuplicateRecord' will be called if passed, otherwise a
     * DuplicateKey error will be returned.
     ','line_number':659,'multiline':True]['text':' namespace mongo','line_number':692,'multiline':False]