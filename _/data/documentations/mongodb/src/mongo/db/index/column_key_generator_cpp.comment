['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' We should never have a key pattern that contains more than a single element.','line_number':86,'multiline':False]['text':' The keyPattern is either { "$**": "columnstore" } for all paths or { "path.$**":','line_number':89,'multiline':False]['text':' "columnstore" } for a single subtree. If we are indexing a single subtree, then we will','line_number':90,'multiline':False]['text':' project just that path.','line_number':91,'multiline':False]['text':' If we're indexing a single subtree, we can't also specify a path projection.','line_number':96,'multiline':False]['text':' If this is a subtree projection, the projection spec is { "path.to.subtree.$**":','line_number':99,'multiline':False]['text':' "columnstore" }. Otherwise, we use the path projection from the original command object. For','line_number':100,'multiline':False]['text':' the subtree projection, we exclude the "_id" field unless the subtree is rooted off of "_id".','line_number':101,'multiline':False]['text':' Construct a dummy ExpressionContext for ProjectionExecutor. It's OK to set the','line_number':110,'multiline':False]['text':' ExpressionContext's OperationContext and CollatorInterface to 'nullptr' and the namespace','line_number':111,'multiline':False]['text':' string to '' here; since we ban computed fields from the projection, the ExpressionContext','line_number':112,'multiline':False]['text':' will never be used.','line_number':113,'multiline':False]['text':' The user explicitly excluded _id in an inclusion projection. This is legal syntax, but','line_number':126,'multiline':False]['text':' the node indicating that _id is excluded doesn't need to be in the tree.','line_number':127,'multiline':False]['text':' Performs BFS on Projection AST, while simultaenously creating','line_number':134,'multiline':False]['text':' ColumnProjectionTree used for Columnar Index Key generation.','line_number':135,'multiline':False]['text':' If astChild is an internal node, we add to queue and continue BFS.','line_number':154,'multiline':False]['text':' We are guaranteed that child and corresponding fieldname are located in same','line_number':158,'multiline':False]['text':' index in both vectors.','line_number':159,'multiline':False]['text':'*
 * Special handling for vals because BSONElement doesn't support ==, and we want binaryEqualValues
 * rather than woCompare equality anyway.
 ','line_number':170,'multiline':True]['text':'*
 * This class handles the logic of key generation for columnar indexes. It produces
 * UnencodedCellViews, which have all of the data that should be put in the index values, but it is
 * not responsible for encoding that data into a flat buffer. This final serialization step is
 * handled by the 'writeEncodedCell' function.
 *
 * "Shredding" is an informal term for taking a single BSON document and splitting it into the data
 * for each unique path. The data at each path should be sufficient to reconstruct the object in
 * full fidelity, possibly considering parent paths. When determining the path, array index are not
 * considered, only field names are.
 *
 * This class is private to this file, and only exposed via the free-functions in the header.
 ','line_number':185,'multiline':True]['text':'*
     * Option to constructor to avoid overhead when you only need to know about the paths in an
     * object, such as for deletes.
     ','line_number':200,'multiline':True]['text':' We keep track of parameter belowProjLeaf to handle cases where every subfield of an','line_number':210,'multiline':False]['text':' included path should also be included.','line_number':211,'multiline':False]['text':' belowProjLeaf ','line_number':215,'multiline':True]['text':' isRoot ','line_number':216,'multiline':True]['text':' This function requires that the shredder was constructed to record cell values.','line_number':226,'multiline':False]['text':' Don't need to merge if just 1 record.','line_number':249,'multiline':False]['text':'','line_number':250,'multiline':False]['text':' Mapping: column name -> [raw cells and indexes to recs and shredders]','line_number':256,'multiline':False]['text':' Optimize for columns existing in all records.','line_number':262,'multiline':False]['text':' For symmetry with rawCellNew.','line_number':290,'multiline':False]['text':' Need to compute sparseness prior to checking cell equality.','line_number':292,'multiline':False]['text':' No change for this path.','line_number':296,'multiline':False]['text':' This is where we incrementally build up the full arrayInfo for this cell. While each','line_number':315,'multiline':False]['text':' position is essentially a walk from the root to somewhere in the document, this is a walk','line_number':316,'multiline':False]['text':' that starts at the root and then passes through each value or subobject at this path','line_number':317,'multiline':False]['text':' taking (hopefully) the shortest distance between each value. First we build it up in','line_number':318,'multiline':False]['text':' "uncompressed" format, then we call compressArrayInfo() to remove redundant information.','line_number':319,'multiline':False]['text':' This is used when building up arrayInfoBuf. It records the absolute position of the last','line_number':322,'multiline':False]['text':' value or subobject appended to arrayInfoBuf, so that we can easily compute the relative','line_number':323,'multiline':False]['text':' path to the next value. Equivalently, it is the value of _currentArrayInfo at the time of','line_number':324,'multiline':False]['text':' the last call to appendToArrayInfo(). It never has any '|' or 'o' bytes.','line_number':325,'multiline':False]['text':' Number of times this field has been seen.','line_number':329,'multiline':False]['text':' Number of values that are non-empty objects','line_number':330,'multiline':False]['text':' Memoized in computeIsSparse()','line_number':331,'multiline':False]['text':' Used to detect duplicate fields in BSON objects. As the DFS in 'walkObj()' iterates the','line_number':336,'multiline':False]['text':' fields in a target object (the "visitor" object), it remembers each field it observed by','line_number':337,'multiline':False]['text':' marking this '_previousVisitor' with the visitor object's identifier. If the object','line_number':338,'multiline':False]['text':' iterator encounters the same field name twice, it will descend into the resulting path a','line_number':339,'multiline':False]['text':' second time and see that it already visited the corresponding RawCellValue.','line_number':340,'multiline':False]['text':' Sparseness must have already been resolved.','line_number':346,'multiline':False]['text':' Intentionally not checking nSeen or childrenMustBeSparse, since they are just inputs','line_number':350,'multiline':False]['text':' to sparseness computation.','line_number':351,'multiline':False]['text':' Ordered to test cheaper stuff before more expensive stuff.','line_number':353,'multiline':False]['text':'','line_number':354,'multiline':False]['text':'','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':'','line_number':357,'multiline':False]['text':'','line_number':358,'multiline':False]['text':'hasSubPaths','line_number':369,'multiline':True]['text':' Memoized, so amortized O(1) when called on all paths, even though it must check all parent','line_number':375,'multiline':False]['text':' paths.','line_number':376,'multiline':False]['text':' Top level fields are never considered sparse.','line_number':383,'multiline':False]['text':' As 'walkObj()' traverses the BSONObj graph, it uses an integer index as a unique','line_number':416,'multiline':False]['text':' identifier for each object it visits.','line_number':417,'multiline':False]['text':' We skip fields in some edge cases such as dots in the field name. This may also throw','line_number':420,'multiline':False]['text':' if the field name contains invalid UTF-8 in a way that would break the index.','line_number':421,'multiline':False]['text':'','line_number':424,'multiline':False]['text':' If belowProjLeaf is true, then we know we have entered a subfield of an already','line_number':431,'multiline':False]['text':' included path, so we create the cell.','line_number':432,'multiline':False]['text':' If childNode exists and is the final field in the path, we create the cell if it is','line_number':433,'multiline':False]['text':' an inclusion projection.','line_number':434,'multiline':False]['text':' If childNode does not exist, we create the cell if it is an exclusion projection.','line_number':435,'multiline':False]['text':' If childNode exists, we create the cell if it is not the final field in the path,','line_number':436,'multiline':False]['text':' regardless of the type of projection.','line_number':437,'multiline':False]['text':' Detect cases where 'obj' has two fields with the same name. We avoid a separate','line_number':442,'multiline':False]['text':' duplicate-detection loop by marking the '_previousVisitor' member of each','line_number':443,'multiline':False]['text':' RawCellValue that we visit in _this_ loop. If we re-visit a RawCellValue, it','line_number':444,'multiline':False]['text':' means we followed the same path twice and therefore the same field of this','line_number':445,'multiline':False]['text':' BSONObj.','line_number':446,'multiline':False]['text':' Objects with duplicate fields are possible but are not present in most user','line_number':448,'multiline':False]['text':' data. Instead of trying to store their array info, we force projections to','line_number':449,'multiline':False]['text':' fall back to the document store.','line_number':450,'multiline':False]['text':' Zero is common so make it implied rather than explicit.','line_number':483,'multiline':False]['text':' Theoretically, index should be the same as elem.fieldNameStringData(),','line_number':485,'multiline':False]['text':' however, since we don't validate the array indexes, they cannot be trusted.','line_number':486,'multiline':False]['text':' The logic to encode array info relies on "sane" array indexes (at the very','line_number':487,'multiline':False]['text':' least they must be monotonically increasing), so we create a new index string','line_number':488,'multiline':False]['text':' here.','line_number':489,'multiline':False]['text':' [] doesn't start a double nesting since {a:{$eq: []}} matches {a: [[]]}','line_number':494,'multiline':False]['text':' Note: always same cell, since array traversal never changes path.','line_number':499,'multiline':False]['text':' If child is a leaf in the projection tree, then the remaining','line_number':509,'multiline':False]['text':' sub-documents are automatically in the projection.','line_number':510,'multiline':False]['text':' Only recurse on non-empty objects and arrays. Empty objects and arrays are handled as','line_number':513,'multiline':False]['text':' scalars.','line_number':514,'multiline':False]['text':' If we get here, then this walk will not have any children. This means that there is','line_number':524,'multiline':False]['text':' at least one path where all children (if any) will be missing structural information,','line_number':525,'multiline':False]['text':' so they will need to consult the parent path.','line_number':526,'multiline':False]['text':' arrayInfo should be left empty in this case.','line_number':541,'multiline':False]['text':' The first time we get a position for this path, just record it verbatim. The first','line_number':549,'multiline':False]['text':' is special because we are essentially recording the absolute path to this value,','line_number':550,'multiline':False]['text':' while every other time we append the path relative to the prior value.','line_number':551,'multiline':False]['text':' Make better names for symmetry (and to prevent accidental modifications):','line_number':559,'multiline':False]['text':'','line_number':564,'multiline':False]['text':' Walk back to start of differing elem. Important to use newIt here because if they are','line_number':571,'multiline':False]['text':' in the same array, oldIt may have an implicitly encoded 0 index, while newIt must','line_number':572,'multiline':False]['text':' have a higher index.','line_number':573,'multiline':False]['text':' oldIt and newIt are at same index.','line_number':577,'multiline':False]['text':' Close out arrays past the first mismatch in LIFO order.','line_number':584,'multiline':False]['text':' Now process the mismatch. It must be a difference in array index (checked above).','line_number':593,'multiline':False]['text':' Nothing. Increment by one (skipping zero) is implicit.','line_number':604,'multiline':False]['text':' Now put the rest of the new array info into the output buffer.','line_number':610,'multiline':False]['text':' NOTE: all operations in this function either shrink the array info or keep it the same','line_number':617,'multiline':False]['text':' size, so they are able to work in-place in the arrayInfo buffer.','line_number':618,'multiline':False]['text':' Logic below assumes arrayInfo is null terminated as a simplification.','line_number':620,'multiline':False]['text':' Remove all '{' immediately before a '|' or 'o', and check for arrays','line_number':627,'multiline':False]['text':' Rewind output to just past last non-brace, since the last set of opens are','line_number':633,'multiline':False]['text':' encoded implicitly.','line_number':634,'multiline':False]['text':' If there were no arrays, we don't need any array info.','line_number':645,'multiline':False]['text':' Remove final run of '|' since end implies an infinite sequence of them.','line_number':653,'multiline':False]['text':' Reestablishes null termination.','line_number':657,'multiline':False]['text':' Now do a final pass to RLE remaining runs of '|' or 'o'. It may be possible to integrate','line_number':659,'multiline':False]['text':' this with the first loop above, but it would be a bit more complicated because we need','line_number':660,'multiline':False]['text':' to have removed any implicit runs of '{' prior to each '|' or 'o' before looking for','line_number':661,'multiline':False]['text':' runs.','line_number':662,'multiline':False]['text':' Must be on own line so the buffer outlives numStr.','line_number':677,'multiline':False]['text':' We know there is room because a number > 0 takes up no more space than the number','line_number':680,'multiline':False]['text':' of '|' that it is replacing. repeats == 1 is the worst case because it isn't','line_number':681,'multiline':False]['text':' saving any space. However we still replace here since it should make decoding','line_number':682,'multiline':False]['text':' slightly faster.','line_number':683,'multiline':False]['text':' Note: `in` has already been advanced.','line_number':686,'multiline':False]['text':' TODO consider skipping when the nesting depths exceed our documented limits of 100','line_number':697,'multiline':False]['text':' documents. This would allow decoding to use fixed-size bitsets without needing to check','line_number':698,'multiline':False]['text':' for overflow.','line_number':699,'multiline':False]['text':' WARNING: do not include the field name in error messages because if we throw from this','line_number':701,'multiline':False]['text':' function then the field name isn't valid utf-8, and could poison the whole error message!','line_number':702,'multiline':False]['text':' We only care about \xFF at the beginning, even though utf-8 bans it everywhere.','line_number':704,'multiline':False]['text':' Fields with dots are not illegal, but we skip them because a) the query optimizer can't','line_number':710,'multiline':False]['text':' correctly track dependencies with them, and b) the current storage format uses dots as a','line_number':711,'multiline':False]['text':' separator and everything (including the array info encoder) would get confused with','line_number':712,'multiline':False]['text':' documents like {a: {b:1}, a.b: 2} because that breaks some of the assumptions.','line_number':713,'multiline':False]['text':' This is the same as StringMap<V> but with node_hash_map. We need the reference stability','line_number':725,'multiline':False]['text':' guarantee because we have recursive functions that both insert into _paths and hold a','line_number':726,'multiline':False]['text':' reference to one of its values. It seems better to use a node-based hash table than to redo','line_number':727,'multiline':False]['text':' the lookup every time we want to touch a cell.','line_number':728,'multiline':False]['text':' Describes a walk from root to current pos. No '|' or 'o'.','line_number':733,'multiline':False]['text':' This count gets used by the depth-first search in 'walkObj()' to choose a unique integer','line_number':741,'multiline':False]['text':' identifier for each BSONObj that it visits.','line_number':742,'multiline':False]['text':' namespace','line_number':745,'multiline':False]['text':' As a special case, if either is true, we only care about comparing this field, since all','line_number':773,'multiline':False]['text':' other fields are suspect. This simplifies testing, because we don't need to guess what','line_number':774,'multiline':False]['text':' the output will be (and lock it into a correctness test!) for the case with duplicate','line_number':775,'multiline':False]['text':' fields.','line_number':776,'multiline':False]['text':'','line_number':780,'multiline':False]['text':'','line_number':781,'multiline':False]['text':'','line_number':782,'multiline':False]['text':'','line_number':783,'multiline':False]['text':' As a special case just output this info, since other fields don't matter.','line_number':789,'multiline':False]['text':'includeFieldName','line_number':797,'multiline':True]['text':' namespace mongo::column_keygen','line_number':810,'multiline':False]