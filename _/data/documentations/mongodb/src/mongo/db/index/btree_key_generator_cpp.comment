['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]['text':'*
 * Returns the non-array element at the specified path. This function returns an empty BSON element
 * if the path doesn't exist.
 *
 * The 'path' can be specified using a dotted notation in order to traverse through embedded
 * objects. If 'exist' is specified it should be set to true if the element is present. This output
 * can help the caller to know whether the 'path' is missing or has a 'null' value.
 *
 * This function must only be used when there is no an array element along the 'path'. Otherwise,
 * an exception will be thrown if encounters any array.
 ','line_number':69,'multiline':True]['text':' We found a scalar element, but there is more path to traverse, e.g. {a: 1} with a path of','line_number':100,'multiline':False]['text':' "a.b".','line_number':101,'multiline':False]['text':' namespace','line_number':104,'multiline':False]['text':' An index component field name cannot exist in both a document','line_number':144,'multiline':False]['text':' array and one of that array's children.','line_number':145,'multiline':False]['text':' fieldNamesTemp and fixedTemp are passed in by the caller to be used as temporary data','line_number':194,'multiline':False]['text':' structures as we need them to be mutable in the recursion. When they are stored outside we','line_number':195,'multiline':False]['text':' can reuse their memory.','line_number':196,'multiline':False]['text':' Set up any terminal array values.','line_number':204,'multiline':False]['text':' Recurse.','line_number':211,'multiline':False]['text':' we special case for speed','line_number':232,'multiline':False]['text':' The {_id: 1} index can never be multikey because the _id field isn't allowed to be an','line_number':254,'multiline':False]['text':' array value. We therefore always set 'multikeyPaths' as [ [ ] ].','line_number':255,'multiline':False]['text':' This index doesn't contain array values. We therefore always set 'multikeyPaths' as','line_number':260,'multiline':False]['text':' [[ ], [], ...].','line_number':261,'multiline':False]['text':' Extract the underlying sequence and insert elements unsorted to avoid O(N^2) when','line_number':272,'multiline':False]['text':' inserting element by element if array','line_number':273,'multiline':False]['text':' '_fieldNames' and '_fixed' are mutated by _getKeysWithArray so pass in copies','line_number':275,'multiline':False]['text':' Put the sequence back into the set, it will sort and guarantee uniqueness, this is','line_number':288,'multiline':False]['text':' O(NlogN)','line_number':289,'multiline':False]['text':' _fieldNames contains pointers to blocks of memory that BtreeKeyGenerator doesn't own,','line_number':307,'multiline':False]['text':' so we don't account for the sizes of those blocks of memory here. Likewise, _collator','line_number':308,'multiline':False]['text':' points to a block of memory that BtreeKeyGenerator doesn't own, so we don't acccount','line_number':309,'multiline':False]['text':' for the size of this block of memory either.','line_number':310,'multiline':False]['text':' remainingPath points to a block of memory that PositionalPathInfo doesn't own, so we','line_number':321,'multiline':False]['text':' don't account for the size of this block of memory here.','line_number':322,'multiline':False]['text':' A set containing the position of any indexed fields in the key pattern that traverse through','line_number':386,'multiline':False]['text':' the 'arrElt' array value.','line_number':387,'multiline':False]['text':' A vector with size equal to the number of elements in the index key pattern. Each element in','line_number':390,'multiline':False]['text':' the vector, if initialized, refers to the component within the indexed field that traverses','line_number':391,'multiline':False]['text':' through the 'arrElt' array value. We say that this component within the indexed field','line_number':392,'multiline':False]['text':' corresponds to a path that causes the index to be multikey if the 'arrElt' array value','line_number':393,'multiline':False]['text':' contains multiple elements.','line_number':394,'multiline':False]['text':'','line_number':395,'multiline':False]['text':' For example, consider the index {'a.b': 1, 'a.c'} and the document','line_number':396,'multiline':False]['text':' {a: [{b: 1, c: 'x'}, {b: 2, c: 'y'}]}. The path "a" causes the index to be multikey, so we'd','line_number':397,'multiline':False]['text':' have a std::vector<boost::optional<size_t>>{{0U}, {0U}}.','line_number':398,'multiline':False]['text':'','line_number':399,'multiline':False]['text':' Furthermore, due to how positional key patterns are specified, it's possible for an indexed','line_number':400,'multiline':False]['text':' field to cause the index to be multikey at a different component than another indexed field','line_number':401,'multiline':False]['text':' that also traverses through the 'arrElt' array value. It's then also possible for an indexed','line_number':402,'multiline':False]['text':' field not to cause the index to be multikey, even if it traverses through the 'arrElt' array','line_number':403,'multiline':False]['text':' value, because only a particular element would be indexed.','line_number':404,'multiline':False]['text':'','line_number':405,'multiline':False]['text':' For example, consider the index {'a.b': 1, 'a.b.0'} and the document {a: {b: [1, 2]}}. The','line_number':406,'multiline':False]['text':' path "a.b" causes the index to be multikey, but the key pattern "a.b.0" only indexes the','line_number':407,'multiline':False]['text':' first element of the array, so we'd have a','line_number':408,'multiline':False]['text':' std::vector<boost::optional<size_t>>{{1U}, boost::none}.','line_number':409,'multiline':False]['text':' Extract element matching fieldName[ i ] from object xor array.','line_number':419,'multiline':False]['text':' if field not present, set to null','line_number':424,'multiline':False]['text':' done expanding this field name','line_number':426,'multiline':False]['text':' we only expand arrays on a single path -- track the path here','line_number':432,'multiline':False]['text':' enforce single array path here','line_number':435,'multiline':False]['text':' not an array - no need for further expansion','line_number':442,'multiline':False]['text':' No array, so generate a single key.','line_number':448,'multiline':False]['text':' We've encountered an empty array.','line_number':467,'multiline':False]['text':' Any indexed path which traverses through the empty array must be recorded as an array','line_number':469,'multiline':False]['text':' component.','line_number':470,'multiline':False]['text':' We need to determine which component of the indexed field causes the index to be','line_number':472,'multiline':False]['text':' multikey as a result of the empty array. Indexed empty arrays are considered','line_number':473,'multiline':False]['text':' multikey and may occur mid-path. For instance, the indexed path "a.b.c" has','line_number':474,'multiline':False]['text':' multikey components {0, 1} given the document {a: [{b: []}, {b: 1}]}.','line_number':475,'multiline':False]['text':' For an empty array, set matching fields to undefined.','line_number':483,'multiline':False]['text':' For positional key patterns, e.g. {'a.1.b': 1}, we lookup the indexed array element','line_number':504,'multiline':False]['text':' and then traverse the remainder of the field path up front. This prevents us from','line_number':505,'multiline':False]['text':' having to look up the indexed element again on each recursive call (i.e. once per','line_number':506,'multiline':False]['text':' array element).','line_number':507,'multiline':False]['text':' We've reached the end of the path.','line_number':513,'multiline':False]['text':' The 'arrElt' array value isn't expanded into multiple elements when the last','line_number':515,'multiline':False]['text':' component of the indexed field is positional and 'arrElt' contains nested','line_number':516,'multiline':False]['text':' array values. In all other cases, the 'arrElt' array value may be expanded','line_number':517,'multiline':False]['text':' into multiple element and can therefore cause the index to be multikey.','line_number':518,'multiline':False]['text':' The earlier call to dps::extractElementAtPathOrArrayAlongPath(..., fieldNames[i])','line_number':524,'multiline':False]['text':' modified fieldNames[i] to refer to the suffix of the path immediately following the','line_number':525,'multiline':False]['text':' 'arrElt' array value. If we haven't reached the end of this indexed field yet, then','line_number':526,'multiline':False]['text':' we must have traversed through 'arrElt'.','line_number':527,'multiline':False]['text':' We aren't indexing a particular element of the 'arrElt' array value, so it may be','line_number':534,'multiline':False]['text':' expanded into multiple elements. It can therefore cause the index to be multikey.','line_number':535,'multiline':False]['text':' We need to determine which component of the indexed field causes the index to','line_number':537,'multiline':False]['text':' be multikey as a result of the 'arrElt' array value. Since','line_number':538,'multiline':False]['text':'','line_number':539,'multiline':False]['text':'   NumComponents("<pathPrefix>") + NumComponents("<pathSuffix>")','line_number':540,'multiline':False]['text':'       = NumComponents("<pathPrefix>.<pathSuffix>"),','line_number':541,'multiline':False]['text':'','line_number':542,'multiline':False]['text':' we can compute the number of components in a prefix of the indexed field by','line_number':543,'multiline':False]['text':' subtracting the number of components in the suffix 'fieldNames[i]' from the','line_number':544,'multiline':False]['text':' number of components in the indexed field '_fieldNames[i]'.','line_number':545,'multiline':False]['text':'','line_number':546,'multiline':False]['text':' For example, consider the indexed field "a.b.c" and the suffix "c". The path','line_number':547,'multiline':False]['text':' "a.b.c" has 3 components and the suffix "c" has 1 component. Subtracting the','line_number':548,'multiline':False]['text':' latter from the former yields the number of components in the prefix "a.b",','line_number':549,'multiline':False]['text':' i.e. 2.','line_number':550,'multiline':False]['text':' We're indexing an array element by its position. Traverse the remainder of the','line_number':559,'multiline':False]['text':' field path now.','line_number':560,'multiline':False]['text':'','line_number':561,'multiline':False]['text':' Indexing an array element by its position selects a particular element of the','line_number':562,'multiline':False]['text':' 'arrElt' array value when generating keys. It therefore cannot cause the index to be','line_number':563,'multiline':False]['text':' multikey.','line_number':564,'multiline':False]['text':' Generate a key for each element of the indexed array.','line_number':571,'multiline':False]['text':' Record multikey path components.','line_number':593,'multiline':False]['text':' namespace mongo','line_number':612,'multiline':False]