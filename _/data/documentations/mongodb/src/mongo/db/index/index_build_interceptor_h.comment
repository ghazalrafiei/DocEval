['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':33,'multiline':False]['text':'*
     * Determines if we will yield locks while draining the side tables.
     ','line_number':76,'multiline':True]['text':'*
     * Indicates whether to record duplicate keys that have been inserted into the index. When set
     * to 'kNoTrack', inserted duplicate keys will be ignored. When set to 'kTrack', a subsequent
     * call to checkDuplicateKeyConstraints is required.
     ','line_number':83,'multiline':True]['text':'*
     * Creates a temporary table for writes during an index build. Additionally creates a temporary
     * table to store any duplicate key constraint violations found during the build, if the index
     * being built has uniqueness constraints.
     ','line_number':90,'multiline':True]['text':'*
     * Finds the temporary table associated with storing writes during this index build. Only used
     * Only used when resuming an index build and the temporary table already exists on disk.
     * Additionally will find the temporary table associated with storing duplicate key constraint
     * violations found during the build, if the index being built has uniqueness constraints.
     ','line_number':97,'multiline':True]['text':'*
     * Keeps the temporary side writes and duplicate key constraint violations tables.
     ','line_number':109,'multiline':True]['text':'*
     * Client writes that are concurrent with an index build will have their index updates written
     * to a temporary table. After the index table scan is complete, these updates will be applied
     * to the underlying index table.
     *
     * On success, `numKeysOut` if non-null will contain the number of keys added or removed.
     ','line_number':114,'multiline':True]['text':'*
     * Client writes that are concurrent with a column store index build will have their index
     * updates written to a temporary table. After the index table scan is complete, these updates
     * will be applied to the underlying index table.
     *
     * On success, 'numKeysWrittenOut' will contain the number of keys that will be inserted or
     * updated by applying the side write and 'numKeysDeletedOut' will contain the number of keys
     * that will be removed.
     ','line_number':129,'multiline':True]['text':'*
     * Given a duplicate key, record the key for later verification by a call to
     * checkDuplicateKeyConstraints();
     ','line_number':144,'multiline':True]['text':'*
     * Returns Status::OK if all previously recorded duplicate key constraint violations have been
     * resolved for the index. Returns a DuplicateKey error if there are still duplicate key
     * constraint violations on the index.
     ','line_number':152,'multiline':True]['text':'*
     * Performs a resumable scan on the side writes table, and either inserts or removes each key
     * from the underlying IndexAccessMethod. This will only insert as many records as are visible
     * in the current snapshot.
     *
     * This is resumable, so subsequent calls will start the scan at the record immediately
     * following the last inserted record from a previous call to drainWritesIntoIndex.
     ','line_number':161,'multiline':True]['text':'*
     * By default, tries to generate keys and insert previously skipped records in the index. For
     * each record, if the new indexing attempt is successful, keys are written directly to the
     * index. Unsuccessful key generation or writes will return errors.
     *
     * The behaviour can be modified by specifying a RetrySkippedRecordMode.
     ','line_number':184,'multiline':True]['text':'*
     * Returns whether there are no visible records remaining to be applied from the side writes
     * table.
     ','line_number':197,'multiline':True]['text':'*
     * Invariants that there are no visible records remaining to be applied from the side writes
     * table.
     ','line_number':203,'multiline':True]['text':'*
     * When an index builder wants to commit, use this to retrieve any recorded multikey paths
     * that were tracked during the build.
     ','line_number':209,'multiline':True]['text':'*
     * Yield lock manager locks and abandon the current storage engine snapshot.
     ','line_number':238,'multiline':True]['text':' This temporary record store records intercepted keys that will be written into the index by','line_number':254,'multiline':False]['text':' calling drainWritesIntoIndex(). It is owned by the interceptor and dropped along with it.','line_number':255,'multiline':False]['text':' Records RecordIds that have been skipped due to indexing errors.','line_number':258,'multiline':False]['text':' This allows the counter to be used in a RecoveryUnit rollback handler where the','line_number':265,'multiline':False]['text':' IndexBuildInterceptor is no longer available (e.g. due to index build cleanup). If there are','line_number':266,'multiline':False]['text':' additional fields that have to be referenced in commit/rollback handlers, this counter should','line_number':267,'multiline':False]['text':' be moved to a new IndexBuildsInterceptor::InternalState structure that will be managed as a','line_number':268,'multiline':False]['text':' shared resource.','line_number':269,'multiline':False]['text':' Whether to skip the check the the number of writes applied is equal to the number of writes','line_number':273,'multiline':False]['text':' recorded. Resumable index builds to not preserve these counts, so we skip this check for','line_number':274,'multiline':False]['text':' index builds that were resumed.','line_number':275,'multiline':False]['text':' namespace mongo','line_number':282,'multiline':False]