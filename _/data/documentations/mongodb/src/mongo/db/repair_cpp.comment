['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This function is shared by multiple callers. Some of which have opened a transaction to','line_number':79,'multiline':False]['text':' perform reads. This function may make mixed-mode writes. Mixed-mode assertions can only','line_number':80,'multiline':False]['text':' be suppressed when beginning a fresh transaction.','line_number':81,'multiline':False]['text':'callerHoldsReadLock','line_number':96,'multiline':True]['text':'*
 * Re-opening the database can throw an InvalidIndexSpecificationOption error. This can occur if the
 * index option was previously valid, but a node tries to upgrade to a version where the option is
 * invalid. We should remove all invalid options in all index specifications of the database and
 * retry so the database is successfully re-opened for the rest of the repair sequence.
 ','line_number':102,'multiline':True]['text':' Fix any invalid index options for this database.','line_number':115,'multiline':False]['text':' The rest of the --repair sequence requires an open database.','line_number':137,'multiline':False]['text':' There are no concurrent users of the index while --repair is running, so it is OK to','line_number':152,'multiline':False]['text':' pass in a nullptr for the index 'ident', promising that the index is not in use.','line_number':153,'multiline':False]['text':'ident ','line_number':158,'multiline':True]['text':' Unfinished indexes do not need two-phase drop because the incomplete index will','line_number':159,'multiline':False]['text':' never be recovered. This is an optimization that will return disk space to the','line_number':160,'multiline':False]['text':' user more quickly.','line_number':161,'multiline':False]['text':' namespace','line_number':187,'multiline':False]['text':' We must hold some form of lock here','line_number':193,'multiline':False]['text':' Close the db and invalidate all current users and caches.','line_number':200,'multiline':False]['text':' Sucessfully re-opening the db is necessary for repairCollections.','line_number':204,'multiline':False]['text':' Restore oplog Collection pointer cache.','line_number':214,'multiline':False]['text':' The only expected exception is an interrupt.','line_number':217,'multiline':False]['text':' Logs additional info about the specific error.','line_number':222,'multiline':False]['text':' Need to lookup from catalog again because the old collection object was invalidated by','line_number':242,'multiline':False]['text':' repairRecordStore.','line_number':243,'multiline':False]['text':' If data was modified during repairRecordStore, we know to rebuild indexes without needing','line_number':247,'multiline':False]['text':' to run an expensive collection validation.','line_number':248,'multiline':False]['text':' If we are a replica set member in standalone mode and we have unfinished indexes,','line_number':254,'multiline':False]['text':' drop them before rebuilding any completed indexes. Since we have already made','line_number':255,'multiline':False]['text':' invalidating modifications to our data, it is safe to just drop the indexes entirely','line_number':256,'multiline':False]['text':' to avoid the risk of the index rebuild failing.','line_number':257,'multiline':False]['text':' Run collection validation to avoid unnecessarily rebuilding indexes on valid collections','line_number':269,'multiline':False]['text':' with consistent indexes. Initialize the collection prior to validation.','line_number':270,'multiline':False]['text':' Serialize valdiate result for logging in which tenant prefix is expected.','line_number':275,'multiline':False]['text':' Exclude full record store validation because we have already validated the underlying','line_number':280,'multiline':False]['text':' record store in the call to repairRecordStore above.','line_number':281,'multiline':False]['text':'additionalOptions=','line_number':287,'multiline':True]['text':'logDiagnostics=','line_number':290,'multiline':True]['text':' If not valid, whether repair ran or not, indexes will need to be rebuilt.','line_number':315,'multiline':False]['text':' namespace repair','line_number':321,'multiline':False]['text':' namespace mongo','line_number':323,'multiline':False]