['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' The timeout when waiting for linearizable read concern on a getMore command.','line_number':135,'multiline':False]['text':' getMore can run with any readConcern, because cursor-creating commands like find can run with any','line_number':138,'multiline':False]['text':' readConcern.  However, since getMore automatically uses the readConcern of the command that','line_number':139,'multiline':False]['text':' created the cursor, it is not appropriate to apply the default readConcern (just as','line_number':140,'multiline':False]['text':' client-specified readConcern isn't appropriate).','line_number':141,'multiline':False]['text':'*
 * Validates that the lsid of 'opCtx' matches that of 'cursor'. This must be called after
 * authenticating, so that it is safe to report the lsid of 'cursor'.
 ','line_number':147,'multiline':True]['text':'*
 * Validates that the txnNumber of 'opCtx' matches that of 'cursor'. This must be called after
 * authenticating, so that it is safe to report the txnNumber of 'cursor'.
 ','line_number':172,'multiline':True]['text':'*
 * Validate that the client has necessary privileges to call getMore on the given cursor.
 ','line_number':197,'multiline':True]['text':' A user can only call getMore on their own cursor.','line_number':203,'multiline':False]['text':' Ensure that the client still has the privileges to run the originating command.','line_number':210,'multiline':False]['text':'*
 * Validate that the command's and cursor's namespaces match.
 ','line_number':218,'multiline':True]['text':'*
 * Validate that the command's maxTimeMS is only set when the cursor is in awaitData mode.
 ','line_number':235,'multiline':True]['text':'*
 * Apply the read concern from the cursor to this operation.
 ','line_number':247,'multiline':True]['text':' Select the appropriate read source. If we are in a transaction with read concern majority,','line_number':253,'multiline':False]['text':' this will already be set to kNoTimestamp, so don't set it again.','line_number':254,'multiline':False]['text':' Make sure we read from the majority snapshot.','line_number':259,'multiline':False]['text':' Mark the operation as speculative and select the correct read source.','line_number':266,'multiline':False]['text':' For cursor commands that take locks internally, the read concern on the','line_number':282,'multiline':False]['text':' OperationContext may affect the timestamp read source selected by the storage engine.','line_number':283,'multiline':False]['text':' We place the cursor read concern onto the OperationContext so the lock acquisition','line_number':284,'multiline':False]['text':' respects the cursor's read concern.','line_number':285,'multiline':False]['text':'*
 * Sets a deadline on the operation if the originating command had a maxTimeMS specified or if this
 * is a tailable, awaitData cursor.
 ','line_number':292,'multiline':True]['text':' We assume that cursors created through a DBDirectClient are always used from their','line_number':301,'multiline':False]['text':' original OperationContext, so we do not need to move time to and from the cursor.','line_number':302,'multiline':False]['text':' There is no time limit set directly on this getMore command. If the cursor is','line_number':304,'multiline':False]['text':' awaitData, then we supply a default time of one second. Otherwise we roll over','line_number':305,'multiline':False]['text':' any leftover time from the maxTimeMS of the operation that spawned this cursor,','line_number':306,'multiline':False]['text':' applying it to this getMore.','line_number':307,'multiline':False]['text':'*
 * Sets up the OperationContext in order to correctly inherit options like the read concern from the
 * cursor to this operation.
 ','line_number':318,'multiline':True]['text':' If the originating command had a 'comment' field, we extract it and set it on opCtx. Note','line_number':339,'multiline':False]['text':' that if the 'getMore' command itself has a 'comment' field, we give precedence to it.','line_number':340,'multiline':False]['text':'*
 * A command for running getMore() against an existing cursor registered with a CursorManager.
 * Used to generate the next batch of results for a ClientCursor.
 *
 * Can be used in combination with any cursor-generating command (e.g. find, aggregate,
 * listIndexes).
 ','line_number':348,'multiline':True]['text':'*
         * Uses 'cursor' and 'request' to fill out 'nextBatch' with the batch of result documents to
         * be returned by this getMore.
         *
         * Returns true if the cursor should be saved for subsequent getMores, and false otherwise.
         * Fills out *numResults with the number of documents in the batch, which must be
         * initialized to zero by the caller.
         *
         * Throws an exception on failure.
         ','line_number':416,'multiline':True]['text':' If an awaitData getMore is killed during this process due to our max time expiring at','line_number':435,'multiline':False]['text':' an interrupt point, we just continue as normal and return rather than reporting a','line_number':436,'multiline':False]['text':' timeout to the user.','line_number':437,'multiline':False]['text':' If adding this object will cause us to exceed the message size limit, then we','line_number':444,'multiline':False]['text':' stash it for later.','line_number':445,'multiline':False]['text':' As soon as we get a result, this operation no longer waits.','line_number':451,'multiline':False]['text':' If this executor produces a postBatchResumeToken, add it to the response.','line_number':454,'multiline':False]['text':' At this point, we know that there will be at least one document in this','line_number':457,'multiline':False]['text':' batch. Reserve an initial estimated number of bytes for the response.','line_number':458,'multiline':False]['text':' This exception indicates that we should close the cursor without reporting an','line_number':470,'multiline':False]['text':' error.','line_number':471,'multiline':False]['text':' This exception is thrown when a change-stream cursor is invalidated. Set the PBRT','line_number':474,'multiline':False]['text':' to the resume token of the invalidating event, and mark the cursor response as','line_number':475,'multiline':False]['text':' invalidated. We always expect to have ExtraInfo for this error code.','line_number':476,'multiline':False]['text':' The latest oplog timestamp may advance even when there are no results. Ensure','line_number':500,'multiline':False]['text':' that we have the latest postBatchResumeToken produced by the plan executor.','line_number':501,'multiline':False]['text':' The getMore command does not accept a batchSize of 0, so empty batches are','line_number':502,'multiline':False]['text':' always caused by hitting EOF and do not need to be handled separately.','line_number':503,'multiline':False]['text':' Get a reference to the shared_ptr so that we drop the virtual collections (via the','line_number':514,'multiline':False]['text':' destructor) after deleting our cursors and releasing our read locks.','line_number':515,'multiline':False]['text':' Cursors come in one of two flavors:','line_number':519,'multiline':False]['text':'','line_number':520,'multiline':False]['text':' - Cursors which read from a single collection, such as those generated via the','line_number':521,'multiline':False]['text':'   find command. For these cursors, we hold the appropriate collection lock for the','line_number':522,'multiline':False]['text':'   duration of the getMore using AutoGetCollectionForRead. These cursors have the','line_number':523,'multiline':False]['text':'   'kLockExternally' lock policy.','line_number':524,'multiline':False]['text':'','line_number':525,'multiline':False]['text':' - Cursors which may read from many collections, e.g. those generated via the','line_number':526,'multiline':False]['text':'   aggregate command, or which do not read from a collection at all, e.g. those','line_number':527,'multiline':False]['text':'   generated by the listIndexes command. We don't need to acquire locks to use these','line_number':528,'multiline':False]['text':'   cursors, since they either manage locking themselves or don't access data protected','line_number':529,'multiline':False]['text':'   by collection locks. These cursors have the 'kLocksInternally' lock policy.','line_number':530,'multiline':False]['text':'','line_number':531,'multiline':False]['text':' While we only need to acquire locks for 'kLockExternally' cursors, we need to create','line_number':532,'multiline':False]['text':' an AutoStatsTracker in either case. This is responsible for updating statistics in','line_number':533,'multiline':False]['text':' CurOp and Top. We avoid using AutoGetCollectionForReadCommand because we may need to','line_number':534,'multiline':False]['text':' drop and reacquire locks when the cursor is awaitData, but we don't want to update','line_number':535,'multiline':False]['text':' the stats twice.','line_number':536,'multiline':False]['text':' Inherit properties like readConcern and maxTimeMS from our originating cursor.','line_number':545,'multiline':False]['text':' Update opCtx of the decorated ExternalDataSourceScopeGuard object so that it can drop','line_number':549,'multiline':False]['text':' virtual collections in the new 'opCtx'.','line_number':550,'multiline':False]['text':' On early return, typically due to a failed assertion, delete the cursor.','line_number':555,'multiline':False]['text':' TODO SERVER-78724: This invariant can be safely removed once aggregations uses','line_number':565,'multiline':False]['text':' collection acquisitions.','line_number':566,'multiline':False]['text':' Restore the acquisitions used in the original call. This takes care of','line_number':582,'multiline':False]['text':' checking that the preconditions for the original acquisition still hold and','line_number':583,'multiline':False]['text':' restores any locks necessary.','line_number':584,'multiline':False]['text':' Lock the backing collection by using the executor's namespace. Note that it','line_number':587,'multiline':False]['text':' may be different from the cursor's namespace. One such possible scenario is','line_number':588,'multiline':False]['text':' when getMore() is executed against a view. Technically, views are pipelines','line_number':589,'multiline':False]['text':' and under normal circumstances use 'kLocksInternally' policy, so we shouldn't','line_number':590,'multiline':False]['text':' be getting into here in the first place. However, if the pipeline was','line_number':591,'multiline':False]['text':' optimized away and replaced with a query plan, its lock policy would have','line_number':592,'multiline':False]['text':' also been changed to 'kLockExternally'. So, we'll use the executor's','line_number':593,'multiline':False]['text':' namespace to take the lock (which is always the backing collection','line_number':594,'multiline':False]['text':' namespace), but will use the namespace provided in the user request for','line_number':595,'multiline':False]['text':' profiling.','line_number':596,'multiline':False]['text':'','line_number':597,'multiline':False]['text':' Otherwise, these two namespaces will match.','line_number':598,'multiline':False]['text':'','line_number':599,'multiline':False]['text':' Note that some pipelines which were optimized away may require locking','line_number':600,'multiline':False]['text':' multiple namespaces. As such, we pass any secondary namespaces required by','line_number':601,'multiline':False]['text':' the pinned cursor's executor when constructing 'readLock'.','line_number':602,'multiline':False]['text':' Check whether we are allowed to read from this node after acquiring our locks.','line_number':618,'multiline':False]['text':'empty function','line_number':628,'multiline':True]['text':' May trigger maxTimeAlwaysTimeOut fail point.','line_number':633,'multiline':False]['text':' The readOnce option causes any storage-layer cursors created during plan','line_number':639,'multiline':False]['text':' execution to assume read data will not be needed again and need not be cached.','line_number':640,'multiline':False]['text':' Ensure that the original query or command object is available in the slow query','line_number':651,'multiline':False]['text':' log, profiler and currentOp.','line_number':652,'multiline':False]['text':' Update the genericCursor stored in curOp with the new cursor stats.','line_number':662,'multiline':False]['text':' If this is a change stream cursor, check whether the tenant has migrated elsewhere.','line_number':666,'multiline':False]['text':' If the 'failGetMoreAfterCursorCheckout' failpoint is enabled, throw an exception with','line_number':672,'multiline':False]['text':' the given 'errorCode' value, or ErrorCodes::InternalError if 'errorCode' is omitted.','line_number':673,'multiline':False]['text':' We report keysExamined and docsExamined to OpDebug for a given getMore operation. To','line_number':698,'multiline':False]['text':' obtain these values we need to take a diff of the pre-execution and post-execution','line_number':699,'multiline':False]['text':' metrics, as they accumulate over the course of a cursor's lifetime.','line_number':700,'multiline':False]['text':' Mark this as an AwaitData operation if appropriate.','line_number':704,'multiline':False]['text':' Use the commit point of the last batch for exhaust cursors.','line_number':708,'multiline':False]['text':'empty function','line_number':721,'multiline':True]['text':' We do not report 'execStats' for aggregation or other cursors with the','line_number':739,'multiline':False]['text':' 'kLocksInternally' policy, both in the original request and subsequent getMore. It','line_number':740,'multiline':False]['text':' would be useful to have this info for an aggregation, but the source PlanExecutor','line_number':741,'multiline':False]['text':' could be destroyed before we know if we need 'execStats' and we do not want to','line_number':742,'multiline':False]['text':' generate the stats eagerly for all operations due to cost.','line_number':743,'multiline':False]['text':' Update the cursor's lastKnownCommittedOpTime to the current','line_number':762,'multiline':False]['text':' lastCommittedOpTime. The lastCommittedOpTime now may be staler than the','line_number':763,'multiline':False]['text':' actual lastCommittedOpTime returned in the metadata of this latest batch (see','line_number':764,'multiline':False]['text':' appendReplyMetadata).  As a result, we may sometimes return more empty','line_number':765,'multiline':False]['text':' batches than we need to. But it is fine to be conservative in this.','line_number':766,'multiline':False]['text':' Increment this metric once we have generated a response and we know it will return','line_number':783,'multiline':False]['text':' documents.','line_number':784,'multiline':False]['text':' Indicate that an exhaust message should be generated and the previous BSONObj','line_number':795,'multiline':False]['text':' command parameters should be reused as the next BSONObj command parameters.','line_number':796,'multiline':False]['text':' Counted as a getMore, not as a command.','line_number':803,'multiline':False]['text':' The presence of a term in the request indicates that this is an internal replication','line_number':810,'multiline':False]['text':' oplog read request.','line_number':811,'multiline':False]['text':' Validate term before acquiring locks.','line_number':813,'multiline':False]['text':' Note: updateTerm returns ok if term stayed the same.','line_number':815,'multiline':False]['text':' If the term field is present in an oplog request, it means this is an oplog','line_number':818,'multiline':False]['text':' getMore for replication oplog fetching because the term field is only allowed for','line_number':819,'multiline':False]['text':' internal clients (see checkAuthForGetMore).','line_number':820,'multiline':False]['text':' We do not want to wait to take tickets for internal (replication) oplog reads.','line_number':823,'multiline':False]['text':' Stalling on ticket acquisition can cause complicated deadlocks. Primaries may','line_number':824,'multiline':False]['text':' depend on data reaching secondaries in order to proceed; and secondaries may get','line_number':825,'multiline':False]['text':' stalled replicating because of an inability to acquire a read ticket.','line_number':826,'multiline':False]['text':' Perform validation checks which don't cause the cursor to be deleted on failure.','line_number':831,'multiline':False]['text':' Get the read concern level here in case the cursor is exhausted while iterating.','line_number':843,'multiline':False]['text':' waitForLinearizableReadConcern performs a NoOp write and waits for that write','line_number':857,'multiline':False]['text':' to have been majority committed. awaitReplication requires that we release all','line_number':858,'multiline':False]['text':' locks to prevent blocking for a long time while doing network activity. Since','line_number':859,'multiline':False]['text':' getMores do not have support for a maxTimeout duration, we hardcode the timeout','line_number':860,'multiline':False]['text':' to avoid waiting indefinitely.','line_number':861,'multiline':False]['text':' We're about to unpin or delete the cursor as the ClientCursorPin goes out of scope.','line_number':866,'multiline':False]['text':' If the 'waitBeforeUnpinningOrDeletingCursorAfterGetMoreBatch' failpoint is active, we','line_number':867,'multiline':False]['text':' set the 'msg' field of this operation's CurOp to signal that we've hit this point and','line_number':868,'multiline':False]['text':' then spin until the failpoint is released.','line_number':869,'multiline':False]['text':' We need to copy the serialization context from the request to the reply object','line_number':885,'multiline':False]['text':' apiStrict ','line_number':887,'multiline':True]['text':'*
     * A getMore command increments the getMore counter, not the command counter.
     ','line_number':921,'multiline':True]['text':' namespace','line_number':934,'multiline':False]['text':' namespace mongo','line_number':935,'multiline':False]