['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':41,'multiline':False]['text':'*
 * If a pipeline is empty (assuming that a $cursor stage hasn't been created yet), it could mean
 * that we were able to absorb all pipeline stages and pull them into a single PlanExecutor. So,
 * instead of creating a whole pipeline to do nothing more than forward the results of its cursor
 * document source, we can optimize away the entire pipeline and answer the request using the query
 * engine only. This function checks if such optimization is possible.
 ','line_number':182,'multiline':True]['text':' For exchange we will create a number of pipelines consisting of a single','line_number':196,'multiline':False]['text':' DocumentSourceExchange stage, so cannot not optimize it away.','line_number':197,'multiline':False]['text':'*
 * Creates and registers a cursor with the global cursor manager. Returns the pinned cursor.
 ','line_number':201,'multiline':True]['text':'*
 * Builds the reply for a pipeline over a sharded collection that contains an exchange stage.
 ','line_number':230,'multiline':True]['text':' If a time limit was set on the pipeline, remaining time is "rolled over" to the cursor','line_number':261,'multiline':False]['text':' (for use by future getmore ops).','line_number':262,'multiline':False]['text':' Cursor needs to be in a saved state while we yield locks for getmore. State will be','line_number':265,'multiline':False]['text':' restored in getMore().','line_number':266,'multiline':False]['text':'*
 * Gets the first batch of documents produced by this pipeline by calling 'getNext()' on the
 * provided PlanExecutor. The provided CursorResponseBuilder will be populated with the batch.
 *
 * Returns true if we need to register a ClientCursor saved for this pipeline (for future getMore
 * requests). Otherwise, returns false.
 ','line_number':275,'multiline':True]['text':' We are careful to avoid ever calling 'getNext()' on the PlanExecutor when the batchSize is','line_number':296,'multiline':False]['text':' zero to avoid doing any query execution work.','line_number':297,'multiline':False]['text':' This exception is thrown when a $changeStream stage encounters an event that','line_number':305,'multiline':False]['text':' invalidates the cursor. We should close the cursor and return without error.','line_number':306,'multiline':False]['text':' This exception is thrown when a change-stream cursor is invalidated. Set the PBRT to','line_number':310,'multiline':False]['text':' the resume token of the invalidating event, and mark the cursor response as','line_number':311,'multiline':False]['text':' invalidated. We expect ExtraInfo to always be present for this exception.','line_number':312,'multiline':False]['text':' If this executor produces a postBatchResumeToken, add it to the cursor response. We','line_number':336,'multiline':False]['text':' call this on EOF because the PBRT may advance even when there are no further results.','line_number':337,'multiline':False]['text':' There are no more documents, and the query is not tailable, so no need to create','line_number':341,'multiline':False]['text':' a cursor.','line_number':342,'multiline':False]['text':' If adding this object will cause us to exceed the message size limit, then we stash it','line_number':351,'multiline':False]['text':' for later.','line_number':352,'multiline':False]['text':' If this executor produces a postBatchResumeToken, add it to the cursor response.','line_number':359,'multiline':False]['text':' For empty batches, or in the case where the final result was added to the batch rather','line_number':366,'multiline':False]['text':' than being stashed, we update the PBRT to ensure that it is the most recent available.','line_number':367,'multiline':False]['text':' Cursor needs to be in a saved state while we yield locks for getmore. State will be','line_number':372,'multiline':False]['text':' restored in getMore().','line_number':373,'multiline':False]['text':'*
 * Executes the aggregation pipeline, registering any cursors needed for subsequent calls to
 * getMore() if necessary. Returns the first ClientCursorPin, if any cursor was registered.
 ','line_number':386,'multiline':True]['text':' Only register a cursor for the pipeline if we have found that we need one for future','line_number':415,'multiline':False]['text':' calls to 'getMore()'.','line_number':416,'multiline':False]['text':' If a time limit was set on the pipeline, remaining time is "rolled over" to the','line_number':424,'multiline':False]['text':' cursor (for use by future getmore ops).','line_number':425,'multiline':False]['text':' If there is more than one executor, that means this query will be running on multiple','line_number':434,'multiline':False]['text':' shards via exchange and merge. Such queries always require a cursor to be registered for','line_number':435,'multiline':False]['text':' each PlanExecutor.','line_number':436,'multiline':False]['text':' If there are no involved namespaces, return before attempting to take any locks. This is','line_number':457,'multiline':False]['text':' important for collectionless aggregations, which may be expected to run without locking.','line_number':458,'multiline':False]['text':' Acquire a single const view of the CollectionCatalog and use it for all view and collection','line_number':463,'multiline':False]['text':' lookups and view definition resolutions that follow. This prevents the view definitions','line_number':464,'multiline':False]['text':' cached in 'resolvedNamespaces' from changing relative to those in the acquired ViewCatalog.','line_number':465,'multiline':False]['text':' The resolution of the view definitions below might lead into an endless cycle if any are','line_number':466,'multiline':False]['text':' allowed to change.','line_number':467,'multiline':False]['text':' If 'ns' refers to a view namespace, then we resolve its definition.','line_number':482,'multiline':False]['text':' Attempt to acquire UUID of the underlying collection using lock free method.','line_number':492,'multiline':False]['text':' We parse the pipeline corresponding to the resolved view in case we must resolve','line_number':497,'multiline':False]['text':' other view namespaces that are also involved.','line_number':498,'multiline':False]['text':' If the involved namespace is not in the same database as the aggregation, it must be','line_number':510,'multiline':False]['text':' from a $lookup/$graphLookup into a tenant migration donor's oplog view or from an','line_number':511,'multiline':False]['text':' $out/$merge to a collection in a different database.','line_number':512,'multiline':False]['text':' For tenant migrations, we perform an aggregation on 'config.transactions' but','line_number':515,'multiline':False]['text':' require a lookup stage involving a view on the 'local' database.','line_number':516,'multiline':False]['text':' If the involved namespace is 'local.system.tenantMigration.oplogView', resolve','line_number':517,'multiline':False]['text':' its view definition.','line_number':518,'multiline':False]['text':' SERVER-51886: It is not correct to assume that we are reading from a collection','line_number':524,'multiline':False]['text':' because the collection targeted by $out/$merge on a given database can have the','line_number':525,'multiline':False]['text':' same name as a view on the source database. As such, we determine whether the','line_number':526,'multiline':False]['text':' collection name references a view on the aggregation request's database. Note','line_number':527,'multiline':False]['text':' that the inverse scenario (mistaking a view for a collection) is not an issue','line_number':528,'multiline':False]['text':' because $merge/$out cannot target a view.','line_number':529,'multiline':False]['text':' Attempt to acquire UUID of the collection using lock free method.','line_number':542,'multiline':False]['text':' If 'involvedNs' refers to a collection namespace, then we resolve it as an empty','line_number':544,'multiline':False]['text':' pipeline in order to read directly from the underlying collection.','line_number':545,'multiline':False]['text':' 'involvedNs' is neither a view nor a collection, so resolve it as an empty pipeline','line_number':553,'multiline':False]['text':' to treat it as reading from a non-existent collection.','line_number':554,'multiline':False]['text':'*
 * Returns Status::OK if each view namespace in 'pipeline' has a default collator equivalent to
 * 'collator'. Otherwise, returns ErrorCodes::OptionNotSupportedOnView.
 ','line_number':562,'multiline':True]['text':'*
 * Upconverts the read concern for a change stream aggregation, if necesssary.
 *
 * If there is no given read concern level on the given object, upgrades the level to 'majority' and
 * waits for read concern. If a read concern level is already specified on the given read concern
 * object, this method does nothing.
 ','line_number':608,'multiline':True]['text':' There is already a non-default read concern level set. Do nothing.','line_number':617,'multiline':False]['text':' We upconvert an empty read concern to 'majority'.','line_number':621,'multiline':False]['text':' We must obtain the client lock to set the ReadConcernArgs on the operation','line_number':623,'multiline':False]['text':' context as it may be concurrently read by CurrentOp.','line_number':624,'multiline':False]['text':' Change streams are allowed to use the speculative majority read mechanism, if','line_number':628,'multiline':False]['text':' the storage engine doesn't support majority reads directly.','line_number':629,'multiline':False]['text':' Wait for read concern again since we changed the original read concern.','line_number':636,'multiline':False]['text':'*
 * If the aggregation 'request' contains an exchange specification, create a new pipeline for each
 * consumer and put it into the resulting vector. Otherwise, return the original 'pipeline' as a
 * single vector element.
 ','line_number':642,'multiline':True]['text':' For every new pipeline we have create a new ExpressionContext as the context','line_number':660,'multiline':False]['text':' cannot be shared between threads. There is no synchronization for pieces of','line_number':661,'multiline':False]['text':' the execution machinery above the Exchange, so nothing above the Exchange can be','line_number':662,'multiline':False]['text':' shared between different exchange-producer cursors.','line_number':663,'multiline':False]['text':' Create a new pipeline for the consumer consisting of a single','line_number':671,'multiline':False]['text':' DocumentSourceExchange.','line_number':672,'multiline':False]['text':' Assumes this is only called from the 'aggregate' or 'getMore' commands.  The code','line_number':677,'multiline':False]['text':' which relies on this parameter does not distinguish/care about the difference so','line_number':678,'multiline':False]['text':' we simply always pass 'aggregate'.','line_number':679,'multiline':False]['text':'*
 * Creates additional pipelines if needed to serve the aggregation. This includes additional
 * pipelines for exchange optimization and search commands that generate metadata. Returns
 * a vector of all pipelines needed for the query, including the original one.
 *
 * Takes ownership of the original, passed in, pipeline.
 ','line_number':690,'multiline':True]['text':' Exchange is not allowed to be specified if there is a $search stage.','line_number':706,'multiline':False]['text':' Release locks early, before we generate the search pipeline, so that we don't hold them','line_number':708,'multiline':False]['text':' during network calls to mongot. This is fine for search pipelines since they are not','line_number':709,'multiline':False]['text':' reading any local (lock-protected) data in the main pipeline.','line_number':710,'multiline':False]['text':' Takes ownership of 'pipeline'.','line_number':720,'multiline':False]['text':'*
 * Performs validations related to API versioning, time-series stages, and general command
 * validation.
 * Throws UserAssertion if any of the validations fails
 *     - validation of API versioning on each stage on the pipeline
 *     - validation of API versioning on 'AggregateCommandRequest' request
 *     - validation of time-series related stages
 *     - validation of command parameters
 ','line_number':727,'multiline':True]['text':' Check if the pipeline has a $geoNear stage, as it will be ripped away during the build query','line_number':753,'multiline':False]['text':' executor phase below (to be replaced with a $geoNearCursorStage later during the executor','line_number':754,'multiline':False]['text':' attach phase).','line_number':755,'multiline':False]['text':' Prepare a PlanExecutor to provide input into the pipeline, if needed; and additional','line_number':759,'multiline':False]['text':' executors if needed to serve the aggregation, this currently only includes search commands','line_number':760,'multiline':False]['text':' that generate metadata.','line_number':761,'multiline':False]['text':' This pipeline is currently empty, but once completed it will have only one source,','line_number':771,'multiline':False]['text':' which is a DocumentSourceCursor. Instead of creating a whole pipeline to do nothing','line_number':772,'multiline':False]['text':' more than forward the results of its cursor document source, we can use the','line_number':773,'multiline':False]['text':' PlanExecutor by itself. The resulting cursor will look like what the client would','line_number':774,'multiline':False]['text':' have gotten from find command.','line_number':775,'multiline':False]['text':' Complete creation of the initial $cursor stage, if needed.','line_number':780,'multiline':False]['text':' There are separate ExpressionContexts for each exchange pipeline, so make sure to','line_number':787,'multiline':False]['text':' pass the pipeline's ExpressionContext to the plan executor factory.','line_number':788,'multiline':False]['text':' With the pipelines created, we can relinquish locks as they will manage the locks','line_number':797,'multiline':False]['text':' internally further on. We still need to keep the lock for an optimized away pipeline','line_number':798,'multiline':False]['text':' though, as we will be changing its lock policy to 'kLockExternally' (see details','line_number':799,'multiline':False]['text':' below), and in order to execute the initial getNext() call in 'handleCursorCommand',','line_number':800,'multiline':False]['text':' we need to hold the collection lock.','line_number':801,'multiline':False]['text':' Since for requests on timeseries namespaces the ServiceEntryPoint installs shard version','line_number':818,'multiline':False]['text':' on the buckets collection instead of the viewNss.','line_number':819,'multiline':False]['text':' TODO: SERVER-80719 Remove this.','line_number':820,'multiline':False]['text':'shardVersion','line_number':838,'multiline':True]['text':'databaseVersion','line_number':838,'multiline':True]['text':'shardVersion','line_number':846,'multiline':True]['text':'databaseVersion','line_number':847,'multiline':True]['text':' Check that the default collation of 'view' is compatible with the operation's','line_number':883,'multiline':False]['text':' collation. The check is skipped if the request did not specify a collation.','line_number':884,'multiline':False]['text':' Should already be resolved at this point.','line_number':886,'multiline':False]['text':' Queries on timeseries views may specify non-default collation whereas queries','line_number':895,'multiline':False]['text':' on all other types of views must match the default collator (the collation use','line_number':896,'multiline':False]['text':' to originally create that collections). Thus in the case of operations on TS','line_number':897,'multiline':False]['text':' views, we use the request's collation.','line_number':898,'multiline':False]['text':' With the view & collation resolved, we can relinquish locks.','line_number':904,'multiline':False]['text':' Parse the resolved view into a new aggregation request.','line_number':911,'multiline':False]['text':' Non sharding-aware operation.','line_number':917,'multiline':False]['text':' Run the translated query on the view on this node.','line_number':918,'multiline':False]['text':' Sharding-aware operation.','line_number':921,'multiline':False]['text':' Setup the opCtx's OperationShardingState with the expected placement versions for','line_number':938,'multiline':False]['text':' the underlying collection. Use the same 'placementConflictTime' from the original','line_number':939,'multiline':False]['text':' request, if present.','line_number':940,'multiline':False]['text':' If the underlying collection is unsharded and is located on this shard, then we','line_number':944,'multiline':False]['text':' can execute the view aggregation locally. Otherwise, we need to kick-back to the','line_number':945,'multiline':False]['text':' router.','line_number':946,'multiline':False]['text':' Run the resolved aggregation locally.','line_number':948,'multiline':False]['text':' Cannot execute the resolved aggregation locally. The router must do it.','line_number':952,'multiline':False]['text':'','line_number':953,'multiline':False]['text':' Before throwing the kick-back exception, validate the routing table','line_number':954,'multiline':False]['text':' we are basing this decision on. We do so by briefly entering into','line_number':955,'multiline':False]['text':' the shard-role by acquiring the underlying collection.','line_number':956,'multiline':False]['text':' Throw the kick-back exception.','line_number':964,'multiline':False]['text':' Set the namespace of the curop back to the view namespace so ctx records','line_number':973,'multiline':False]['text':' stats on this view namespace on destruction.','line_number':974,'multiline':False]['text':'*
 * Determines the collection type of the query by precedence of various configurations. The order
 * of these checks is critical since there may be overlap (e.g., a view over a virtual collection
 * is classified as a view).
 ','line_number':982,'multiline':True]['text':' TODO: SERVER-73632 Remove feature flag for PM-635.','line_number':1007,'multiline':False]['text':' Remove query settings lookup as it is only done on mongos.','line_number':1008,'multiline':False]['text':' If we're operating over a view, we first parse just the original user-given request','line_number':1040,'multiline':False]['text':' for the sake of registering query stats. Then, we'll parse the view pipeline and stitch','line_number':1041,'multiline':False]['text':' the two pipelines together below.','line_number':1042,'multiline':False]['text':' If any involved collection contains extended-range data, set a flag which individual','line_number':1045,'multiline':False]['text':' DocumentSource parsers can check.','line_number':1046,'multiline':False]['text':' Register query stats with the pre-optimized pipeline. Exclude queries against collections','line_number':1057,'multiline':False]['text':' with encrypted fields. We still collect query stats on collection-less aggregations.','line_number':1058,'multiline':False]['text':' If this is a query over a resolved view, we want to register query stats with the','line_number':1062,'multiline':False]['text':' original user-given request and pipeline, rather than the new request generated when','line_number':1063,'multiline':False]['text':' resolving the view.','line_number':1064,'multiline':False]['text':' For timeseries, there may have been rewrites done on the raw BSON pipeline','line_number':1082,'multiline':False]['text':' during view resolution. We must parse the request's full resolved pipeline','line_number':1083,'multiline':False]['text':' which will account for those rewrites.','line_number':1084,'multiline':False]['text':' TODO SERVER-82101 Re-organize timeseries rewrites so timeseries can follow the','line_number':1085,'multiline':False]['text':' same pattern here as other views','line_number':1086,'multiline':False]['text':' Parse the view pipeline, then stitch the user pipeline and view pipeline together','line_number':1089,'multiline':False]['text':' to build the total aggregation pipeline.','line_number':1090,'multiline':False]['text':' After parsing to detect if $$USER_ROLES is referenced in the query, set the value of','line_number':1099,'multiline':False]['text':' $$USER_ROLES for the aggregation.','line_number':1100,'multiline':False]['text':' Lookup the query settings and attach it to the 'expCtx'.','line_number':1103,'multiline':False]['text':' namespace','line_number':1110,'multiline':False]['text':' TODO SERVER-82228 refactor this file to use a class, which should allow removal of resolvedView','line_number':1123,'multiline':False]['text':' and origRequest parameters','line_number':1124,'multiline':False]['text':' Perform some validations on the LiteParsedPipeline and request before continuing with the','line_number':1135,'multiline':False]['text':' aggregation command.','line_number':1136,'multiline':False]['text':' If we are running a retryable write without shard key, check if the write was applied on this','line_number':1139,'multiline':False]['text':' shard, and if so, return early with an empty cursor with $_wasStatementExecuted','line_number':1140,'multiline':False]['text':' set to true. The isRetryableWrite() check here is to check that the client executed write was','line_number':1141,'multiline':False]['text':' a retryable write (which would've spawned an internal session for a retryable write to','line_number':1142,'multiline':False]['text':' execute the two phase write without shard key protocol), otherwise we skip the retryable','line_number':1143,'multiline':False]['text':' write check.','line_number':1144,'multiline':False]['text':' For operations on views, this will be the underlying namespace.','line_number':1162,'multiline':False]['text':' Determine if this aggregation has foreign collections that the execution subsystem needs','line_number':1165,'multiline':False]['text':' to be aware of.','line_number':1166,'multiline':False]['text':' The collation to use for this aggregation. boost::optional to distinguish between the case','line_number':1170,'multiline':False]['text':' where the collation has not yet been resolved, and where it has been resolved to nullptr.','line_number':1171,'multiline':False]['text':' The UUID of the collection for the execution namespace of this aggregation.','line_number':1175,'multiline':False]['text':' All cursors should share the ownership to 'extDataSrcGuard' if cursor(s) are created. Once','line_number':1178,'multiline':False]['text':' all cursors are destroyed later, 'extDataSrcGuard' will also be destroyed and any virtual','line_number':1179,'multiline':False]['text':' collections will be dropped by the destructor of ExternalDataSourceScopeGuard. We obtain a','line_number':1180,'multiline':False]['text':' reference before taking locks so that the virtual collections will be dropped after releasing','line_number':1181,'multiline':False]['text':' our read locks, avoiding a lock upgrade.','line_number':1182,'multiline':False]['text':' If emplaced, AutoGetCollectionForReadCommand will throw if the sharding version for this','line_number':1186,'multiline':False]['text':' connection is out of date. If the namespace is a view, the lock will be released before','line_number':1187,'multiline':False]['text':' re-running the expanded aggregation.','line_number':1188,'multiline':False]['text':' Going forward this operation must never ignore interrupt signals while waiting for lock','line_number':1192,'multiline':False]['text':' acquisition. This InterruptibleLockGuard will ensure that waiting for lock re-acquisition','line_number':1193,'multiline':False]['text':' after yielding will not ignore interrupt signals. This is necessary to avoid deadlocking with','line_number':1194,'multiline':False]['text':' replication rollback, which at the storage layer waits for all cursors to be closed under the','line_number':1195,'multiline':False]['text':' global MODE_X lock, after having sent interrupt signals to read operations. This operation','line_number':1196,'multiline':False]['text':' must never hold open storage cursors while ignoring interrupt.','line_number':1197,'multiline':False]['text':' If we are in a transaction, check whether the parsed pipeline supports being in','line_number':1224,'multiline':False]['text':' a transaction and if the transaction's read concern is supported.','line_number':1225,'multiline':False]['text':' If this is a collectionless aggregation, we won't create 'ctx' but will still need an','line_number':1233,'multiline':False]['text':' AutoStatsTracker to record CurOp and Top entries.','line_number':1234,'multiline':False]['text':' If this is a change stream, perform special checks and change the execution namespace.','line_number':1237,'multiline':False]['text':' Replace the execution namespace with the oplog.','line_number':1244,'multiline':False]['text':' In case of serverless the change stream will be opened on the change collection.','line_number':1247,'multiline':False]['text':' Assert that a change stream on the config server is always opened on the oplog.','line_number':1259,'multiline':False]['text':' Upgrade and wait for read concern if necessary.','line_number':1266,'multiline':False]['text':' Raise an error if 'origNss' is a view. We do not need to check this if we are opening','line_number':1269,'multiline':False]['text':' a stream on an entire db or across the cluster.','line_number':1270,'multiline':False]['text':' If the user specified an explicit collation, adopt it; otherwise, use the simple','line_number':1283,'multiline':False]['text':' collation. We do not inherit the collection's default collation or UUID, since','line_number':1284,'multiline':False]['text':' the stream may be resuming from a point before the current UUID existed.','line_number':1285,'multiline':False]['text':' Obtain collection locks on the execution namespace; that is, the oplog.','line_number':1291,'multiline':False]['text':' If this is a collectionless agg with no foreign namespaces, don't acquire any locks.','line_number':1304,'multiline':False]['text':' This is a regular aggregation. Lock the collection or view.','line_number':1318,'multiline':False]['text':' If collectionUUID was provided, verify the collection exists and has the expected UUID.','line_number':1339,'multiline':False]['text':' If this is a view, resolve it by finding the underlying collection and stitching view','line_number':1343,'multiline':False]['text':' pipelines and this request's pipeline together. We then release our locks before','line_number':1344,'multiline':False]['text':' recursively calling runAggregate(), which will re-acquire locks on the underlying','line_number':1345,'multiline':False]['text':' collection.  (The lock must be released because recursively acquiring locks on the','line_number':1346,'multiline':False]['text':' database will prohibit yielding.)','line_number':1347,'multiline':False]['text':' We do not need to expand the view pipeline when there is a $collStats stage, as','line_number':1348,'multiline':False]['text':' $collStats is supported on a view namespace. For a time-series collection, however, the','line_number':1349,'multiline':False]['text':' view is abstracted out for the users, so we needed to resolve the namespace to get the','line_number':1350,'multiline':False]['text':' underlying bucket collection.','line_number':1351,'multiline':False]['text':' This prevents opening a new change stream in the critical section of a serverless shard','line_number':1384,'multiline':False]['text':' split or merge operation to prevent resuming on the recipient with a resume token higher','line_number':1385,'multiline':False]['text':' than that operation's blockTimestamp.','line_number':1386,'multiline':False]['text':'','line_number':1387,'multiline':False]['text':' If we do this check before picking a startTime for a change stream then the primary could','line_number':1388,'multiline':False]['text':' go into a blocking state between the check and getting the timestamp resulting in a','line_number':1389,'multiline':False]['text':' startTime greater than blockTimestamp. Therefore we must do this check here, after the','line_number':1390,'multiline':False]['text':' pipeline has been parsed and startTime has been initialized.','line_number':1391,'multiline':False]['text':' Check that the view's collation matches the collation of any views involved in the','line_number':1400,'multiline':False]['text':' pipeline.','line_number':1401,'multiline':False]['text':' If the aggregate command supports encrypted collections, do rewrites of the pipeline to','line_number':1410,'multiline':False]['text':' support querying against encrypted fields.','line_number':1411,'multiline':False]['text':' If the query is eligible for a fast path, use the fast path plan instead of','line_number':1467,'multiline':False]['text':' invoking the optimizer.','line_number':1468,'multiline':False]['text':' Pass ownership of the pipeline to the executor. This is done to allow binding of','line_number':1489,'multiline':False]['text':' parameters to use views onto the constants living in the MatchExpression (in the','line_number':1490,'multiline':False]['text':' DocumentSourceMatch in the Pipeline), so we can avoid copying them into the SBE','line_number':1491,'multiline':False]['text':' runtime environment. We must ensure that the MatchExpression lives at least as','line_number':1492,'multiline':False]['text':' long as the executor.','line_number':1493,'multiline':False]['text':' If we had an optimization failure, only error if we're not in tryBonsai.','line_number':1497,'multiline':False]['text':' Having released the collection lock, we can now begin to fetch results from the pipeline. If','line_number':1534,'multiline':False]['text':' the documents in the result exceed the batch size, a cursor will be created. This cursor owns','line_number':1535,'multiline':False]['text':' no collection state, and thus we register it with the global cursor manager. The global','line_number':1536,'multiline':False]['text':' cursor manager does not deliver invalidations or kill notifications; the underlying','line_number':1537,'multiline':False]['text':' PlanExecutor(s) used by the pipeline will be receiving invalidations and kill notifications','line_number':1538,'multiline':False]['text':' themselves, not the cursor we create here.','line_number':1539,'multiline':False]['text':' Report usage statistics for each stage in the pipeline.','line_number':1543,'multiline':False]['text':' If both explain and cursor are specified, explain wins.','line_number':1546,'multiline':False]['text':' executePipeline ','line_number':1552,'multiline':True]['text':' The explainStages() function for a non-pipeline executor may need to execute the plan','line_number':1555,'multiline':False]['text':' to collect statistics. If the PlanExecutor uses kLockExternally policy, the','line_number':1556,'multiline':False]['text':' appropriate collection lock must be already held. Make sure it has not been released','line_number':1557,'multiline':False]['text':' yet.','line_number':1558,'multiline':False]['text':' The PlanExecutor may have been moved from the 'execs' vector to the cursor if one was','line_number':1573,'multiline':False]['text':' registered, so get it from the right place.','line_number':1574,'multiline':False]['text':' For an optimized away pipeline, signal the cache that a query operation has completed.','line_number':1589,'multiline':False]['text':' For normal pipelines this is done in DocumentSourceCursor.','line_number':1590,'multiline':False]['text':' Due to yielding, the collection pointers saved in MultipleCollectionAccessor might','line_number':1592,'multiline':False]['text':' have become invalid. We will need to refresh them here.','line_number':1593,'multiline':False]['text':' For SBE pushed down pipelines, we may need to report stats saved for secondary','line_number':1603,'multiline':False]['text':' collections separately.','line_number':1604,'multiline':False]['text':' The aggregation pipeline may change the namespace of the curop and we need to set it back to','line_number':1615,'multiline':False]['text':' the original namespace to correctly report command stats. One example when the namespace can','line_number':1616,'multiline':False]['text':' be changed is when the pipeline contains an $out stage, which executes an internal command to','line_number':1617,'multiline':False]['text':' create a temp collection, changing the curop namespace to the name of this temp collection.','line_number':1618,'multiline':False]['text':' namespace mongo','line_number':1627,'multiline':False]