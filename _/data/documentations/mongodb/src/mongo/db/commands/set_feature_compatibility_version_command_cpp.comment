['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Ensures that only one instance of setFeatureCompatibilityVersion can run at a given time.
 ','line_number':165,'multiline':True]['text':'*
 * Deletes the persisted default read/write concern document.
 ','line_number':170,'multiline':True]['text':' TODO SERVER-78330 remove this.','line_number':216,'multiline':False]['text':' The config.shards collection is stable during FCV changes, so query that to discover the','line_number':236,'multiline':False]['text':' current number of shards.','line_number':237,'multiline':False]['text':' Prior to 7.3, the cluster parameter 'hasTwoOrMoreShards' gets set to true when the number','line_number':243,'multiline':False]['text':' of shards goes from 1 to 2 but doesn't get set to false when the number of shards goes down','line_number':244,'multiline':False]['text':' to 1.','line_number':245,'multiline':False]['text':'*
 * Sets the minimum allowed feature compatibility version for the cluster. The cluster should not
 * use any new features introduced in binary versions that are newer than the feature compatibility
 * version set.
 *
 * Format:
 * {
 *   setFeatureCompatibilityVersion: <string version>
 * }
 ','line_number':262,'multiline':True]['text':' Ensure that this operation will be killed by the RstlKillOpThread during step-up or','line_number':327,'multiline':False]['text':' stepdown.','line_number':328,'multiline':False]['text':' Only allow one instance of setFeatureCompatibilityVersion to run at a time.','line_number':335,'multiline':False]['text':' If the request is from a config svr, skip requiring the 'confirm: true'','line_number':352,'multiline':False]['text':' parameter.','line_number':353,'multiline':False]['text':' Always wait for at least majority writeConcern to ensure all writes involved in the','line_number':356,'multiline':False]['text':' upgrade/downgrade process cannot be rolled back. There is currently no mechanism to','line_number':357,'multiline':False]['text':' specify a default writeConcern, so we manually call waitForWriteConcern upon exiting this','line_number':358,'multiline':False]['text':' command.','line_number':359,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' TODO SERVER-25778: replace this with the general mechanism for specifying a default','line_number':361,'multiline':False]['text':' writeConcern.','line_number':362,'multiline':False]['text':' Propagate the user's wTimeout if one was given. Default is kNoTimeout.','line_number':371,'multiline':False]['text':' Set the client's last opTime to the system last opTime so no-ops wait for','line_number':378,'multiline':False]['text':' writeConcern. This will wait for any previous setFCV disk writes to be majority','line_number':379,'multiline':False]['text':' committed before returning to the user, if the previous setFCV command had updated','line_number':380,'multiline':False]['text':' the FCV but encountered failover afterwards.','line_number':381,'multiline':False]['text':' _finalizeUpgrade is only for any tasks that must be done to fully complete the FCV','line_number':384,'multiline':False]['text':' upgrade AFTER the FCV document has already been updated to the UPGRADED FCV.','line_number':385,'multiline':False]['text':' We call it here because it's possible that during an FCV upgrade, the','line_number':386,'multiline':False]['text':' replset/shard server/config server undergoes failover AFTER the FCV document has','line_number':387,'multiline':False]['text':' already been updated to the UPGRADED FCV, but before the cluster has completed','line_number':388,'multiline':False]['text':' _finalizeUpgrade. In this case, since the cluster failed over, the user/client may','line_number':389,'multiline':False]['text':' retry sending the setFCV command to the cluster, but the cluster is already in the','line_number':390,'multiline':False]['text':' requestedVersion (i.e. requestedVersion == actualVersion). However, the cluster','line_number':391,'multiline':False]['text':' should retry/complete the tasks from _finalizeUpgrade before sending ok:1 back to the','line_number':392,'multiline':False]['text':' user/client. Therefore, these tasks **must** be idempotent/retryable.','line_number':393,'multiline':False]['text':' Start transition to 'requestedVersion' by updating the local FCV document to a','line_number':424,'multiline':False]['text':' 'kUpgrading' or 'kDowngrading' state, respectively.','line_number':425,'multiline':False]['text':' If this is a config server, then there must be no active','line_number':437,'multiline':False]['text':' SetClusterParameterCoordinator instances active when downgrading.','line_number':438,'multiline':False]['text':' We pass boost::none as the setIsCleaningServerMetadata argument in order to','line_number':447,'multiline':False]['text':' indicate that we don't want to override the existing isCleaningServerMetadata FCV','line_number':448,'multiline':False]['text':' doc field. This is to protect against the case where a previous FCV downgrade','line_number':449,'multiline':False]['text':' failed in the isCleaningServerMetadata phase, and the user runs setFCV again. In','line_number':450,'multiline':False]['text':' that case we do not want to remove the existing isCleaningServerMetadata FCV doc','line_number':451,'multiline':False]['text':' field because it would not be safe to upgrade the FCV.','line_number':452,'multiline':False]['text':' setTargetVersion ','line_number':459,'multiline':True]['text':' setIsCleaningServerMetadata ','line_number':460,'multiline':True]['text':' This helper function is only for any actions that should be done specifically on','line_number':478,'multiline':False]['text':' shard servers during phase 1 of the 3-phase setFCV protocol for sharded clusters.','line_number':479,'multiline':False]['text':' For example, before completing phase 1, we must wait for backward incompatible','line_number':480,'multiline':False]['text':' ShardingDDLCoordinators to finish.','line_number':481,'multiline':False]['text':' We do not expect any other feature-specific work to be done in the 'start' phase.','line_number':482,'multiline':False]['text':' If we are only running the 'start' phase, then we are done.','line_number':485,'multiline':False]['text':' Tell the shards to enter 'start' phase of setFCV (transition to kDowngrading).','line_number':499,'multiline':False]['text':' The config server may also be a shard, so have it run any shard server tasks.','line_number':503,'multiline':False]['text':' Run this after sending the first phase to shards so they enter the transition','line_number':504,'multiline':False]['text':' state even if this throws.','line_number':505,'multiline':False]['text':' Any checks and actions that need to be performed before being able to downgrade needs','line_number':514,'multiline':False]['text':' to be placed on the _prepareToUpgrade and _prepareToDowngrade functions. After the','line_number':515,'multiline':False]['text':' prepare function complete, a node is not allowed to refuse to upgrade/downgrade.','line_number':516,'multiline':False]['text':' Tell the shards to enter the 'prepare' phase of setFCV (check that they will be','line_number':524,'multiline':False]['text':' able to upgrade or downgrade).','line_number':525,'multiline':False]['text':' If we are only running the 'prepare' phase, then we are done','line_number':532,'multiline':False]['text':' All feature-specific FCV upgrade or downgrade code should go into the respective','line_number':541,'multiline':False]['text':' _runUpgrade and _runDowngrade functions. Each of them have their own helper functions','line_number':542,'multiline':False]['text':' where all feature-specific upgrade/downgrade code should be placed. Please read the','line_number':543,'multiline':False]['text':' comments on the helper functions for more details on where to place the code.','line_number':544,'multiline':False]['text':' Complete transition by updating the local FCV document to the fully upgraded or','line_number':552,'multiline':False]['text':' downgraded requestedVersion.','line_number':553,'multiline':False]['text':' setTargetVersion ','line_number':568,'multiline':True]['text':' setIsCleaningServerMetadata ','line_number':569,'multiline':True]['text':' _finalizeUpgrade is only for any tasks that must be done to fully complete the FCV','line_number':572,'multiline':False]['text':' upgrade AFTER the FCV document has already been updated to the UPGRADED FCV.','line_number':573,'multiline':False]['text':' This is because during _runUpgrade, the FCV is still in the transitional state (which','line_number':574,'multiline':False]['text':' behaves like the downgraded FCV), so certain tasks cannot be done yet until the FCV is','line_number':575,'multiline':False]['text':' fully upgraded.','line_number':576,'multiline':False]['text':' Everything in this function **must** be idempotent/retryable.','line_number':577,'multiline':False]['text':' This helper function is only for any actions that should be done specifically on','line_number':593,'multiline':False]['text':' shard servers during phase 1 of the 3-phase setFCV protocol for sharded clusters.','line_number':594,'multiline':False]['text':' For example, before completing phase 1, we must wait for backward incompatible','line_number':595,'multiline':False]['text':' ShardingDDLCoordinators to finish. This is important in order to ensure that no','line_number':596,'multiline':False]['text':' shard that is currently a participant of such a backward-incompatible','line_number':597,'multiline':False]['text':' ShardingDDLCoordinator can transition to the fully downgraded state (and thus,','line_number':598,'multiline':False]['text':' possibly downgrade its binary) while the coordinator is still in progress.','line_number':599,'multiline':False]['text':' The fact that the FCV has already transitioned to kDowngrading ensures that no','line_number':600,'multiline':False]['text':' new backward-incompatible ShardingDDLCoordinators can start.','line_number':601,'multiline':False]['text':' We do not expect any other feature-specific work to be done in the 'start' phase.','line_number':602,'multiline':False]['text':' TODO SERVER-67392: Remove once gGlobalIndexesShardingCatalog is enabled.','line_number':611,'multiline':False]['text':' TODO SERVER-77915: Remove once v8.0 branches out','line_number':620,'multiline':False]['text':' TODO SERVER-79064: Remove once 8.0 becomes last LTS.','line_number':634,'multiline':False]['text':' TODO SERVER-79304 Remove once shardCollection authoritative version becomes LTS','line_number':643,'multiline':False]['text':' TODO (SERVER-77915): Remove once 8.0 (trackUnshardedCollections) becomes lastLTS.','line_number':644,'multiline':False]['text':' TODO SERVER-77915: Remove once trackUnshardedCollections becomes lastLTS.','line_number':654,'multiline':False]['text':' TODO (SERVER-76436) Remove once global balancing becomes last lts.','line_number':667,'multiline':False]['text':' This helper function is for any actions that should be done before taking the global lock in','line_number':682,'multiline':False]['text':' S mode. It is required that the code in this helper function is idempotent and could be done','line_number':683,'multiline':False]['text':' after _runDowngrade even if it failed at any point in the middle of','line_number':684,'multiline':False]['text':' _userCollectionsUassertsForDowngrade or _internalServerCleanupForDowngrade.','line_number':685,'multiline':False]['text':' Note the config server is also considered a shard, so the ConfigServer and ShardServer','line_number':697,'multiline':False]['text':' roles aren't mutually exclusive.','line_number':698,'multiline':False]['text':' Config server role actions.','line_number':700,'multiline':False]['text':' Shard server role actions.','line_number':706,'multiline':False]['text':' This helper function is for any user collections uasserts, creations, or deletions that need','line_number':710,'multiline':False]['text':' to happen during the upgrade. It is required that the code in this helper function is','line_number':711,'multiline':False]['text':' idempotent and could be done after _runDowngrade even if it failed at any point in the middle','line_number':712,'multiline':False]['text':' of _userCollectionsUassertsForDowngrade or _internalServerCleanupForDowngrade.','line_number':713,'multiline':False]['text':' This helper function is for updating server metadata to make sure the new features in the','line_number':731,'multiline':False]['text':' upgraded version work for sharded and non-sharded clusters. It is required that the code','line_number':732,'multiline':False]['text':' in this helper function is idempotent and could be done after _runDowngrade even if it','line_number':733,'multiline':False]['text':' failed at any point in the middle of _userCollectionsUassertsForDowngrade or','line_number':734,'multiline':False]['text':' _internalServerCleanupForDowngrade.','line_number':735,'multiline':False]['text':' Delete any possible leftover ShardingStateRecovery document.','line_number':739,'multiline':False]['text':' TODO SERVER-78330 remove this.','line_number':740,'multiline':False]['text':' TODO (SERVER-83264): Remove once 8.0 becomes last LTS.','line_number':746,'multiline':False]['text':' TODO SERVER-80490: Remove this once 8.0 is released.','line_number':750,'multiline':False]['text':' Sanitizes the wiredTiger.creationString option from the durable catalog. Removes the','line_number':751,'multiline':False]['text':' encryption config options since they are ephemeral in nature.','line_number':752,'multiline':False]['text':' TODO SERVER-80490: Remove this method once 8.0 is released.','line_number':765,'multiline':False]['text':' We bypass the UserWritesBlock mode here in order to not see errors arising from the','line_number':768,'multiline':False]['text':' block. The user already has permission to run FCV at this point and the writes performed','line_number':769,'multiline':False]['text':' here aren't modifying any user data with the exception of fixing up the collection','line_number':770,'multiline':False]['text':' metadata.','line_number':771,'multiline':False]['text':' Performing sanitisation on node local collections is unnecessary since by','line_number':792,'multiline':False]['text':' definition they can use configuration specific to this node.','line_number':793,'multiline':False]['text':'','line_number':794,'multiline':False]['text':' We also only focus on normal collections that are created by the user.','line_number':795,'multiline':False]['text':' We're guaranteed that if the resharding metadata collection exists, it is empty;','line_number':822,'multiline':False]['text':' if it were not we would have already aborted with ManualInterventionRequired.','line_number':823,'multiline':False]['text':' This could only happen if we got a downgrade command before the service initialized;','line_number':832,'multiline':False]['text':' in that case the collection and index will be created on initialization.','line_number':833,'multiline':False]['text':'fromMigrate','line_number':855,'multiline':True]['text':' The uassert should never happen, but it does not indicate corruption if','line_number':857,'multiline':False]['text':' it does.','line_number':858,'multiline':False]['text':' There is no need to re-create this index on upgrade, as the index is no longer','line_number':891,'multiline':False]['text':' needed to ensure resharding operations are unique.','line_number':892,'multiline':False]['text':' The index name is included literally here to avoid creating a','line_number':901,'multiline':False]['text':' construction-order catastrophe with the static std::string','line_number':902,'multiline':False]['text':' kReshardingCoordinatorActiveIndexName','line_number':903,'multiline':False]['text':' TODO SERVER-67392: Remove once gGlobalIndexesShardingCatalog is enabled.','line_number':925,'multiline':False]['text':' _prepareToUpgrade performs all actions and checks that need to be done before proceeding to','line_number':938,'multiline':False]['text':' make any metadata changes as part of FCV upgrade. Any new feature specific upgrade code','line_number':939,'multiline':False]['text':' should be placed in the _prepareToUpgrade helper functions:','line_number':940,'multiline':False]['text':'  * _prepareToUpgradeActions: for any upgrade actions that should be done before taking the','line_number':941,'multiline':False]['text':'  global lock in S mode','line_number':942,'multiline':False]['text':'  * _userCollectionsWorkForUpgrade: for any user collections uasserts, creations, or deletions','line_number':943,'multiline':False]['text':'    that need to happen during the upgrade. This happens after the global lock.','line_number':944,'multiline':False]['text':' Please read the comments on those helper functions for more details on what should be placed','line_number':945,'multiline':False]['text':' in each function.','line_number':946,'multiline':False]['text':' This helper function is for any actions that should be done before taking the global','line_number':950,'multiline':False]['text':' lock in S mode. It is required that the code in this helper function is idempotent and','line_number':951,'multiline':False]['text':' could be done after _runDowngrade even if it failed at any point in the middle of','line_number':952,'multiline':False]['text':' _userCollectionsUassertsForDowngrade or _internalServerCleanupForDowngrade.','line_number':953,'multiline':False]['text':' Take the global lock in S mode to create a barrier for operations taking the global','line_number':958,'multiline':False]['text':' IX or X locks. This ensures that either:','line_number':959,'multiline':False]['text':'   - The global IX/X locked operation will start after the FCV change, see the','line_number':960,'multiline':False]['text':'     upgrading to the latest FCV and act accordingly.','line_number':961,'multiline':False]['text':'   - The global IX/X locked operation began prior to the FCV change, is acting on that','line_number':962,'multiline':False]['text':'     assumption and will finish before upgrade procedures begin right after this.','line_number':963,'multiline':False]['text':' This helper function is for any user collections uasserts, creations, or deletions that','line_number':967,'multiline':False]['text':' need to happen during the upgrade. It is required that the code in this helper function','line_number':968,'multiline':False]['text':' is idempotent and could be done after _runDowngrade even if it failed at any point in the','line_number':969,'multiline':False]['text':' middle of _userCollectionsUassertsForDowngrade or _internalServerCleanupForDowngrade.','line_number':970,'multiline':False]['text':' _runUpgrade performs all the metadata-changing actions of an FCV upgrade. Any new feature','line_number':981,'multiline':False]['text':' specific upgrade code should be placed in the _runUpgrade helper functions:','line_number':982,'multiline':False]['text':'  * _upgradeServerMetadata: for updating server metadata to make sure the new features in the','line_number':983,'multiline':False]['text':'  upgraded','line_number':984,'multiline':False]['text':'    version work for sharded and non-sharded clusters','line_number':985,'multiline':False]['text':' Please read the comments on those helper functions for more details on what should be placed','line_number':986,'multiline':False]['text':' in each function.','line_number':987,'multiline':False]['text':' Always abort the reshardCollection regardless of version to ensure that it will run','line_number':995,'multiline':False]['text':' on a consistent version from start to finish. This will ensure that it will be able','line_number':996,'multiline':False]['text':' to apply the oplog entries correctly.','line_number':997,'multiline':False]['text':' Tell the shards to complete setFCV (transition to fully upgraded)','line_number':1003,'multiline':False]['text':' This helper function is for updating server metadata to make sure the new features in the','line_number':1007,'multiline':False]['text':' upgraded version work for sharded and non-sharded clusters. It is required that the code','line_number':1008,'multiline':False]['text':' in this helper function is idempotent and could be done after _runDowngrade even if it','line_number':1009,'multiline':False]['text':' failed at any point in the middle of _userCollectionsUassertsForDowngrade or','line_number':1010,'multiline':False]['text':' _internalServerCleanupForDowngrade.','line_number':1011,'multiline':False]['text':' This helper function is for any actions that should be done before taking the global lock in','line_number':1017,'multiline':False]['text':' S mode.','line_number':1018,'multiline':False]['text':' Note the config server is also considered a shard, so the ConfigServer and ShardServer','line_number':1026,'multiline':False]['text':' roles aren't mutually exclusive.','line_number':1027,'multiline':False]['text':' Config server role actions.','line_number':1029,'multiline':False]['text':' Shard server role actions.','line_number':1033,'multiline':False]['text':' Tell the shards to enter phase-1 or phase-2 of setFCV.','line_number':1037,'multiline':False]['text':' This helper function is for any uasserts for users to clean up user collections. Uasserts for','line_number':1050,'multiline':False]['text':' users to change settings or wait for settings to change should also happen here. These','line_number':1051,'multiline':False]['text':' uasserts happen before the internal server downgrade cleanup. The code in this helper','line_number':1052,'multiline':False]['text':' function is required to be idempotent in case the node crashes or downgrade fails in a way','line_number':1053,'multiline':False]['text':' that the user has to run setFCV again. The code added/modified in this helper function should','line_number':1054,'multiline':False]['text':' not leave the server in an inconsistent state if the actions in this function failed part way','line_number':1055,'multiline':False]['text':' through.','line_number':1056,'multiline':False]['text':' This helper function can only fail with some transient error that can be retried (like','line_number':1057,'multiline':False]['text':' InterruptedDueToReplStateChange) or ErrorCode::CannotDowngrade. The uasserts added to this','line_number':1058,'multiline':False]['text':' helper function can only have the CannotDowngrade error code indicating that the user must','line_number':1059,'multiline':False]['text':' manually clean up some user data in order to retry the FCV downgrade.','line_number':1060,'multiline':False]['text':' Ensure audit config cluster parameter is unset on disk.','line_number':1069,'multiline':False]['text':' Note the config server is also considered a shard, so the ConfigServer and ShardServer','line_number':1085,'multiline':False]['text':' roles aren't mutually exclusive.','line_number':1086,'multiline':False]['text':' Remove cluster parameters from the clusterParameters collections which are not enabled on','line_number':1122,'multiline':False]['text':' requestedVersion.','line_number':1123,'multiline':False]['text':'multi','line_number':1135,'multiline':True]['text':' We never downgrade with multitenancy enabled, so assume we have just the none tenant.','line_number':1140,'multiline':False]['text':' This helper function is for any internal server downgrade cleanup, such as dropping','line_number':1161,'multiline':False]['text':' collections or aborting. This cleanup will happen after user collection downgrade','line_number':1162,'multiline':False]['text':' cleanup.','line_number':1163,'multiline':False]['text':' The code in this helper function is required to be IDEMPOTENT and RETRYABLE in case the','line_number':1164,'multiline':False]['text':' node crashes or downgrade fails in a way that the user has to run setFCV again. It cannot','line_number':1165,'multiline':False]['text':' fail for a non-retryable reason since at this point user data has already been cleaned','line_number':1166,'multiline':False]['text':' up.','line_number':1167,'multiline':False]['text':' It also MUST be able to be rolled back. This is because we cannot guarantee the safety of','line_number':1168,'multiline':False]['text':' any server metadata that is not replicated in the event of a rollback.','line_number':1169,'multiline':False]['text':'','line_number':1170,'multiline':False]['text':' This helper function can only fail with some transient error that can be retried','line_number':1171,'multiline':False]['text':' (like InterruptedDueToReplStateChange), ManualInterventionRequired, or fasserts. For','line_number':1172,'multiline':False]['text':' any non-retryable error in this helper function, it should error either with an','line_number':1173,'multiline':False]['text':' uassert with ManualInterventionRequired as the error code (indicating a server bug','line_number':1174,'multiline':False]['text':' but that all the data is consistent on disk and for reads/writes) or with an fassert','line_number':1175,'multiline':False]['text':' (indicating a server bug and that the data is corrupted). ManualInterventionRequired','line_number':1176,'multiline':False]['text':' and fasserts are errors that are not expected to occur in practice, but if they did,','line_number':1177,'multiline':False]['text':' they would turn into a Support case.','line_number':1178,'multiline':False]['text':' Only remove the catalog entry flag if it exists. It could've been','line_number':1197,'multiline':False]['text':' removed if the downgrade process was interrupted and is being run','line_number':1198,'multiline':False]['text':' again. The downgrade process cannot be aborted at this point.','line_number':1199,'multiline':False]['text':' To remove timeseries bucketing parameters from persistent','line_number':1201,'multiline':False]['text':' storage, issue the "collMod" command with none of the parameters','line_number':1202,'multiline':False]['text':' set.','line_number':1203,'multiline':False]['text':' Note the config server is also considered a shard, so the ConfigServer and ShardServer','line_number':1221,'multiline':False]['text':' roles aren't mutually exclusive.','line_number':1222,'multiline':False]['text':' Always abort the reshardCollection regardless of version to ensure that it will','line_number':1230,'multiline':False]['text':' run on a consistent version from start to finish. This will ensure that it will','line_number':1231,'multiline':False]['text':' be able to apply the oplog entries correctly.','line_number':1232,'multiline':False]['text':' TODO (SERVER-83264): Remove once 8.0 becomes last LTS.','line_number':1235,'multiline':False]['text':' TODO SERVER-67392: Remove when 7.0 branches-out.','line_number':1255,'multiline':False]['text':' Coordinators that commits indexes to the csrs must be drained before this point. Older','line_number':1256,'multiline':False]['text':' FCV's must not find cluster-wide indexes.','line_number':1257,'multiline':False]['text':' Note the config server is also considered a shard, so the ConfigServer and','line_number':1261,'multiline':False]['text':' ShardServer roles aren't mutually exclusive.','line_number':1262,'multiline':False]['text':' There cannot be any global indexes at this point, but calling','line_number':1264,'multiline':False]['text':' clearCollectionShardingIndexCatalog removes the index version from','line_number':1265,'multiline':False]['text':' config.shard.collections and the csr transactionally.','line_number':1266,'multiline':False]['text':'*
     * May contain actions to perfom after the FCV document update. Execution occurs when the object
     * goes out of scope.
     ','line_number':1331,'multiline':True]['text':'*
     * Actions to be performed before the FCV document is set into upgrading or downgrading
     * transitional state. The returned object may contain post-update actions which are executed
     * when it goes out of scope, so it must be properly scoped to expire after the FCV document has
     * been updated. The assumption is that the provided opCtx is still valid by the time the action
     * is executed.
     ','line_number':1337,'multiline':True]['text':' Any actions to be performed post-update must also be performed in case of interruption','line_number':1349,'multiline':False]['text':' during this function.','line_number':1350,'multiline':False]['text':' TODO (SERVER-68290): Remove index build abort due to FCV downgrade once the','line_number':1358,'multiline':False]['text':' feature flag is removed.','line_number':1359,'multiline':False]['text':' Block new index builds before writing the transitional FCV state, which will cause','line_number':1368,'multiline':False]['text':' new feature flag checks to consider it disabled.','line_number':1369,'multiline':False]['text':' New index builds will be unblocked after ScopedPostFCVDocumentUpdateActions goes out','line_number':1371,'multiline':False]['text':' of scope once the FCV document has been updated.','line_number':1372,'multiline':False]['text':' While new index builds are blocked, abort all existing index builds and wait for','line_number':1381,'multiline':False]['text':' them.','line_number':1382,'multiline':False]['text':' Some index builds might already be committing or aborting, in which case the above','line_number':1384,'multiline':False]['text':' call does not wait for them. Wait for the rest of the index builds.','line_number':1385,'multiline':False]['text':' _prepareToDowngrade performs all actions and checks that need to be done before proceeding to','line_number':1399,'multiline':False]['text':' make any metadata changes as part of FCV downgrade. Any new feature specific downgrade code','line_number':1400,'multiline':False]['text':' should be placed in the helper functions:','line_number':1401,'multiline':False]['text':' * _prepareToDowngradeActions: Any downgrade actions that should be done before taking the FCV','line_number':1402,'multiline':False]['text':' global lock in S mode should go in this function.','line_number':1403,'multiline':False]['text':' * _userCollectionsUassertsForDowngrade: for any checks on user data or settings that will','line_number':1404,'multiline':False]['text':' uassert if users need to manually clean up user data or settings.','line_number':1405,'multiline':False]['text':' When doing feature flag checking for downgrade, we should check the feature flag is enabled','line_number':1406,'multiline':False]['text':' on current FCV and will be disabled after downgrade by using','line_number':1407,'multiline':False]['text':' isDisabledOnTargetFCVButEnabledOnOriginalFCV(targetFCV, originalFCV) Please read the comments','line_number':1408,'multiline':False]['text':' on those helper functions for more details on what should be placed in each function.','line_number':1409,'multiline':False]['text':' Any actions that should be done before taking the global lock in S mode should go in','line_number':1415,'multiline':False]['text':' this function.','line_number':1416,'multiline':False]['text':' Take the global lock in S mode to create a barrier for operations taking the global','line_number':1420,'multiline':False]['text':' IX or X locks. This ensures that either:','line_number':1421,'multiline':False]['text':'   - The global IX/X locked operation will start after the FCV change, see the','line_number':1422,'multiline':False]['text':'     upgrading to the latest FCV and act accordingly.','line_number':1423,'multiline':False]['text':'   - The global IX/X locked operation began prior to the FCV change, is acting on that','line_number':1424,'multiline':False]['text':'     assumption and will finish before upgrade procedures begin right after this.','line_number':1425,'multiline':False]['text':' This helper function is for any uasserts for users to clean up user collections. Uasserts','line_number':1434,'multiline':False]['text':' for users to change settings or wait for settings to change should also happen here.','line_number':1435,'multiline':False]['text':' These uasserts happen before the internal server downgrade cleanup. The code in this','line_number':1436,'multiline':False]['text':' helper function is required to be idempotent in case the node crashes or downgrade fails','line_number':1437,'multiline':False]['text':' in a way that the user has to run setFCV again. The code added/modified in this helper','line_number':1438,'multiline':False]['text':' function should not leave the server in an inconsistent state if the actions in this','line_number':1439,'multiline':False]['text':' function failed part way through.','line_number':1440,'multiline':False]['text':' This helper function can only fail with some transient error that can be retried (like','line_number':1441,'multiline':False]['text':' InterruptedDueToReplStateChange) or ErrorCode::CannotDowngrade. The uasserts added to','line_number':1442,'multiline':False]['text':' this helper function can only have the CannotDowngrade error code indicating that the','line_number':1443,'multiline':False]['text':' user must manually clean up some user data in order to retry the FCV downgrade.','line_number':1444,'multiline':False]['text':' _runDowngrade performs all the metadata-changing actions of an FCV downgrade. Any new feature','line_number':1448,'multiline':False]['text':' specific downgrade code should be placed in the _runDowngrade helper functions:','line_number':1449,'multiline':False]['text':' * _internalServerCleanupForDowngrade: for any internal server downgrade cleanup','line_number':1450,'multiline':False]['text':' When doing feature flag checking for downgrade, we should check the feature flag is enabled','line_number':1451,'multiline':False]['text':' on current FCV and will be disabled after downgrade by using','line_number':1452,'multiline':False]['text':' isDisabledOnTargetFCVButEnabledOnOriginalFCV(targetFCV, originalFCV)','line_number':1453,'multiline':False]['text':' Please read the comments on those helper functions for more details on what should be placed','line_number':1454,'multiline':False]['text':' in each function.','line_number':1455,'multiline':False]['text':' Set the isCleaningServerMetadata field to true. This prohibits the downgrading to','line_number':1465,'multiline':False]['text':' upgrading transition until the isCleaningServerMetadata is unset when we successfully','line_number':1466,'multiline':False]['text':' finish the FCV downgrade and transition to the DOWNGRADED state.','line_number':1467,'multiline':False]['text':' setTargetVersion ','line_number':1476,'multiline':True]['text':' setIsCleaningServerMetadata','line_number':1477,'multiline':True]['text':' This helper function is for any internal server downgrade cleanup, such as dropping','line_number':1485,'multiline':False]['text':' collections or aborting. This cleanup will happen after user collection downgrade','line_number':1486,'multiline':False]['text':' cleanup.','line_number':1487,'multiline':False]['text':' The code in this helper function is required to be IDEMPOTENT and RETRYABLE in case the','line_number':1488,'multiline':False]['text':' node crashes or downgrade fails in a way that the user has to run setFCV again. It cannot','line_number':1489,'multiline':False]['text':' fail for a non-retryable reason since at this point user data has already been cleaned','line_number':1490,'multiline':False]['text':' up.','line_number':1491,'multiline':False]['text':' It also MUST be able to be rolled back. This is because we cannot guarantee the safety of','line_number':1492,'multiline':False]['text':' any server metadata that is not replicated in the event of a rollback.','line_number':1493,'multiline':False]['text':'','line_number':1494,'multiline':False]['text':' This helper function can only fail with some transient error that can be retried','line_number':1495,'multiline':False]['text':' (like InterruptedDueToReplStateChange), ManualInterventionRequired, or fasserts. For','line_number':1496,'multiline':False]['text':' any non-retryable error in this helper function, it should error either with an','line_number':1497,'multiline':False]['text':' uassert with ManualInterventionRequired as the error code (indicating a server bug','line_number':1498,'multiline':False]['text':' but that all the data is consistent on disk and for reads/writes) or with an fassert','line_number':1499,'multiline':False]['text':' (indicating a server bug and that the data is corrupted). ManualInterventionRequired','line_number':1500,'multiline':False]['text':' and fasserts are errors that are not expected to occur in practice, but if they did,','line_number':1501,'multiline':False]['text':' they would turn into a Support case.','line_number':1502,'multiline':False]['text':' Tell the shards to complete setFCV (transition to fully downgraded).','line_number':1506,'multiline':False]['text':'*
     * Abort all serverless migrations active on this node, for both donors and recipients.
     * Called after reaching an upgrading or downgrading state for nodes with ClusterRole::None.
     * Must only be called in serverless mode.
     ','line_number':1513,'multiline':True]['text':'*
     * For sharded cluster servers:
     *  Generate a new changeTimestamp if change fcv is called on config server,
     *  otherwise retrieve changeTimestamp from the Config Server request.
     ','line_number':1545,'multiline':True]['text':' The Config Server always creates a new ID (i.e., timestamp) when it receives an','line_number':1554,'multiline':False]['text':' upgrade or downgrade request.','line_number':1555,'multiline':False]['text':' Shards receive the timestamp from the Config Server's request.','line_number':1560,'multiline':False]['text':' Config servers only started allowing collections with changeStreamPreAndPostImages','line_number':1575,'multiline':False]['text':' in 7.0, so don't allow downgrading with such a collection.','line_number':1576,'multiline':False]['text':' _finalizeUpgrade is only for any tasks that must be done to fully complete the FCV upgrade','line_number':1598,'multiline':False]['text':' AFTER the FCV document has already been updated to the UPGRADED FCV.','line_number':1599,'multiline':False]['text':' This is because during _runUpgrade, the FCV is still in the transitional state (which behaves','line_number':1600,'multiline':False]['text':' like the downgraded FCV), so certain tasks cannot be done yet until the FCV is fully','line_number':1601,'multiline':False]['text':' upgraded.','line_number':1602,'multiline':False]['text':' Additionally, it's possible that during an FCV upgrade, the replset/shard server/config','line_number':1603,'multiline':False]['text':' server undergoes failover AFTER the FCV document has already been updated to the UPGRADED','line_number':1604,'multiline':False]['text':' FCV, but before the cluster has completed _finalizeUpgrade. In this case, since the cluster','line_number':1605,'multiline':False]['text':' failed over, the user/client may retry sending the setFCV command to the cluster, but the','line_number':1606,'multiline':False]['text':' cluster is already in the requestedVersion (i.e. requestedVersion == actualVersion). However,','line_number':1607,'multiline':False]['text':' the cluster should retry/complete the tasks from _finalizeUpgrade before sending ok:1','line_number':1608,'multiline':False]['text':' back to the user/client. Therefore, these tasks **must** be idempotent/retryable.','line_number':1609,'multiline':False]['text':' TODO SERVER-79064: Remove once 8.0 becomes last LTS.','line_number':1612,'multiline':False]['text':' TODO SERVER-79304 Remove once shardCollection authoritative version becomes LTS','line_number':1621,'multiline':False]['text':' TODO SERVER-80266 remove once 8.0 becomes last lts','line_number':1630,'multiline':False]['text':' namespace','line_number':1638,'multiline':False]['text':' namespace mongo','line_number':1639,'multiline':False]