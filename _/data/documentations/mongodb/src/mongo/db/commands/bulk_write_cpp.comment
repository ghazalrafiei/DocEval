['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':36,'multiline':False]['text':'*
 * BulkWriteReplies maintains the BulkWriteReplyItems and provides an interface to add either
 * Insert or Update/Delete replies.
 ','line_number':164,'multiline':True]['text':' Copy over retriedStmtIds.','line_number':181,'multiline':False]['text':' Copy over retriedStmtIds.','line_number':207,'multiline':False]['text':' Approximate Size in bytes.','line_number':331,'multiline':False]['text':' Only accounting for _replies.','line_number':341,'multiline':False]['text':' Helper to keep _approximateSize up to date when appending to _replies.','line_number':343,'multiline':False]['text':' if the response is not an error and we want to only return errors','line_number':347,'multiline':False]['text':' then we should not store this reply.','line_number':348,'multiline':False]['text':'
 * InsertGrouper is a helper class to group consecutive insert operations for the same namespace in
 * a bulkWrite command.
 ','line_number':372,'multiline':True]['text':'
     * Return true if the insert op is successfully grouped.
     ','line_number':385,'multiline':True]['text':' First op in this group.','line_number':393,'multiline':False]['text':' This should be in a new group after flush.','line_number':402,'multiline':False]['text':'
     * Return (firstOpIdx, numOps) for the current insert group.
     * This function should only be called when the InsertGrouper is not empty.
     ','line_number':410,'multiline':True]['text':' We set logicalOp in CurOp to be 'bulkWrite' so that the 'op' field in the profile output is','line_number':440,'multiline':False]['text':' 'bulkWrite' instead of 'insert/update/delete' as normal writes, but for the 'top' command,','line_number':441,'multiline':False]['text':' we need to pass in 'insert/update/delete' since 'top' needs to aggregate the usage for each','line_number':442,'multiline':False]['text':' write type, hence we need to pass in the 'logicalOp' parameter.','line_number':443,'multiline':False]['text':' Mark the op as complete, log it and profile if the op should be sampled for profiling.','line_number':468,'multiline':False]['text':' We need to ignore all errors here. We don't want a successful op to fail because of a','line_number':472,'multiline':False]['text':' failure to record stats. We also don't want to replace the error reported for an op that','line_number':473,'multiline':False]['text':' is failing.','line_number':474,'multiline':False]['text':' For timeseries operations with the 'isTimeseriesNamespace' field set (i.e. sent from mongos),','line_number':495,'multiline':False]['text':' use the view namespace for logging/profiling purposes.','line_number':496,'multiline':False]['text':' Already checked this namespace.','line_number':515,'multiline':False]['text':'numMatched','line_number':524,'multiline':True]['text':'numDocsModified','line_number':524,'multiline':True]['text':' Since multi cannot be true for retryable writes numDocsModified + upserted should be 1','line_number':531,'multiline':False]['text':' We only care about the values of numDocsModified and upserted from the Update','line_number':541,'multiline':False]['text':' result.','line_number':542,'multiline':False]['text':'
 * Helper function to build an InsertCommandRequest for 'numOps' consecutive insert operations
 * starting from the 'firstOpIdx'-th operation in the bulkWrite request.
 ','line_number':564,'multiline':True]['text':'
 * Helper function to convert the InsertCommandReply of an insert batch to a WriteResult.
 ','line_number':589,'multiline':True]['text':' TODO(SERVER-79787): Remove this if block.','line_number':601,'multiline':False]['text':' A temporary "fix" to work around the invariant below.','line_number':603,'multiline':False]['text':'
 * Helper function to flush FLE insert ops grouped by the insertGrouper.
 * Return true if all insert ops are processed by FLE.
 ','line_number':632,'multiline':True]['text':' For BulkWrite, re-entry is un-expected.','line_number':644,'multiline':False]['text':' A class that meets the type requirements for timeseries::isTimeseriesViewRequest.','line_number':659,'multiline':False]['text':'
 * Helper function to flush timeseries insert ops grouped by the insertGrouper.
 ','line_number':679,'multiline':True]['text':'
 * Helper function to flush insert ops grouped by the insertGrouper.
 * Return true if we can continue with the rest of operations in the bulkWrite request.
 ','line_number':695,'multiline':True]['text':' Handle FLE inserts.','line_number':725,'multiline':False]['text':' Flag set here and in fle_crud.cpp since this only executes on a mongod.','line_number':728,'multiline':False]['text':' Fallthrough to standard inserts.','line_number':738,'multiline':False]['text':' Create nested CurOp for insert.','line_number':741,'multiline':False]['text':' Initialize curOp information.','line_number':748,'multiline':False]['text':' Handle timeseries inserts.','line_number':752,'multiline':False]['text':' Re-throw timeseries insert exceptions to be consistent with the insert command.','line_number':762,'multiline':False]['text':' Handled after we insert anything in the batch to be sure we report errors in the','line_number':797,'multiline':False]['text':' correct order. In an ordered insert, if one of the docs ahead of us fails, we should','line_number':798,'multiline':False]['text':' behave as-if we never got to this document.','line_number':799,'multiline':False]['text':' Similarly, if the insert was already executed as part of a retryable write, flush the','line_number':801,'multiline':False]['text':' current batch to preserve the error results order.','line_number':802,'multiline':False]['text':' Add more to batch before inserting.','line_number':810,'multiline':False]['text':' If the batch had an error and decides to not continue, do not process a current doc that','line_number':825,'multiline':False]['text':' was unsuccessfully "fixed" or an already executed retryable write.','line_number':826,'multiline':False]['text':' Revisit any conditions that may have caused the batch to be flushed. In those cases,','line_number':831,'multiline':False]['text':' append the appropriate result to the output.','line_number':832,'multiline':False]['text':' isMultiUpdate ','line_number':843,'multiline':True]['text':' sampleId ','line_number':844,'multiline':True]['text':' Not able to group this insert op, flush existing group first.','line_number':887,'multiline':False]['text':' Unlike attemptGroupedFLEInserts, no fallback to non-FLE path is needed,','line_number':898,'multiline':False]['text':' returning false only indicate an error occurred.','line_number':899,'multiline':False]['text':' Unlike attemptGroupedFLEInserts, no fallback to non-FLE path is needed,','line_number':942,'multiline':False]['text':' returning false only indicate an error occurred.','line_number':943,'multiline':False]['text':' Make a copy of the nsEntry for the op at opIdx.','line_number':994,'multiline':False]['text':' Make a copy of the operation and adjust its namespace index to 0.','line_number':997,'multiline':False]['text':' Handle FLE deletes.','line_number':1055,'multiline':False]['text':' Non-FLE deletes (including timeseries deletes) will be handled by','line_number':1060,'multiline':False]['text':' write_ops_exec::performDelete.','line_number':1061,'multiline':False]['text':' Since multi:true is not allowed with retryable writes if the statement was','line_number':1070,'multiline':False]['text':' executed there will always be 1 document deleted.','line_number':1071,'multiline':False]['text':' Create nested CurOp for delete.','line_number':1077,'multiline':False]['text':' Initialize curOp information.','line_number':1084,'multiline':False]['text':' IncompleteTrasactionHistory should always be command fatal.','line_number':1123,'multiline':False]['text':' runtimeConstants ','line_number':1150,'multiline':True]['text':'isRouter=','line_number':1280,'multiline':True]['text':' Extract and store the first update op for building mirrored read request.','line_number':1282,'multiline':False]['text':' Only do mirrored read if there exists an update op in bulk write request.','line_number':1306,'multiline':False]['text':' Apply all of the write operations.','line_number':1354,'multiline':False]['text':' Make sure all privileges are authorized.','line_number':1365,'multiline':False]['text':' Skip cursor creation and return the simplest reply.','line_number':1412,'multiline':False]['text':' cursorId ','line_number':1414,'multiline':True]['text':' firstBatch ','line_number':1414,'multiline':True]['text':' Try and fit all replies into the firstBatch.','line_number':1423,'multiline':False]['text':' If we can't fit this result inside the current batch, then we stash it for','line_number':1439,'multiline':False]['text':' later.','line_number':1440,'multiline':False]['text':' We have replies left that will not make the first batch. Need to construct a cursor.','line_number':1451,'multiline':False]['text':' whether owned BSON must be returned ','line_number':1477,'multiline':True]['text':' Undocumented repl fields that mongos depends on.','line_number':1521,'multiline':False]['text':' Current design only uses the first update op for mirrored read.','line_number':1537,'multiline':False]['text':' Update related command execution metrics.','line_number':1547,'multiline':False]['text':' Handle FLE updates.','line_number':1579,'multiline':False]['text':' For BulkWrite, re-entry is un-expected.','line_number':1581,'multiline':False]['text':' Map to processFLEUpdate.','line_number':1584,'multiline':False]['text':' Handle retryable timeseries updates.','line_number':1595,'multiline':False]['text':' Handle retryable non-timeseries updates.','line_number':1617,'multiline':False]['text':' Create nested CurOp for update.','line_number':1637,'multiline':False]['text':' Initialize curOp information.','line_number':1644,'multiline':False]['text':' Handle non-retryable normal and timeseries updates, as well as retryable normal','line_number':1647,'multiline':False]['text':' updates that were not already executed.','line_number':1648,'multiline':False]['text':' Although usually the PlanExecutor handles WCE internally, it will throw WCEs when it','line_number':1668,'multiline':False]['text':' is executing an update. This is done to ensure that we can always match,','line_number':1669,'multiline':False]['text':' modify, and return the document under concurrency, if a matching document exists.','line_number':1670,'multiline':False]['text':' Nested retry loop to handle concurrent conflicting upserts with equality','line_number':1678,'multiline':False]['text':' match.','line_number':1679,'multiline':False]['text':' expCtx ','line_number':1705,'multiline':True]['text':' IncompleteTrasactionHistory should always be command fatal.','line_number':1722,'multiline':False]['text':' namespace','line_number':1733,'multiline':False]['text':' Create an insertGrouper to group consecutive inserts to the same namespace.','line_number':1753,'multiline':False]['text':' If any statements were retried then increment command counter.','line_number':1759,'multiline':False]['text':' Tell mongod what the shard and database versions are. This will cause writes to fail in','line_number':1765,'multiline':False]['text':' case there is a mismatch in the mongos request provided versions and the local (shard's)','line_number':1766,'multiline':False]['text':' understanding of the version.','line_number':1767,'multiline':False]['text':' If a timeseries collection is sharded, only the buckets collection would be sharded.','line_number':1774,'multiline':False]['text':' We expect all versioned commands to be sent over 'system.buckets' namespace. But it','line_number':1775,'multiline':False]['text':' is possible that a stale mongos may send the request over a view namespace. In this','line_number':1776,'multiline':False]['text':' case, we initialize the 'OperationShardingState' with buckets namespace. The bucket','line_number':1777,'multiline':False]['text':' namespace is used because if the shard recognizes this is a timeseries collection,','line_number':1778,'multiline':False]['text':' the timeseries write path will eventually execute on the bucket namespace and locks','line_number':1779,'multiline':False]['text':' will be acquired with the bucket namespace. So we must initialize the','line_number':1780,'multiline':False]['text':' 'OperationShardingState' with the bucket namespace to trigger the shard version','line_number':1781,'multiline':False]['text':' checks.','line_number':1782,'multiline':False]['text':' The returned namespaceForSharding will be the timeseries system bucket collection if','line_number':1784,'multiline':False]['text':' the request is made on a timeseries collection. Otherwise, it will stay unchanged','line_number':1785,'multiline':False]['text':' (i.e. the namespace from the client request).','line_number':1786,'multiline':False]['text':' Before we pause processing, flush grouped inserts.','line_number':1806,'multiline':False]['text':' Insert write failed can no longer continue.','line_number':1826,'multiline':False]['text':' Flush grouped insert ops before handling update ops.','line_number':1830,'multiline':False]['text':' Update write failed can no longer continue.','line_number':1843,'multiline':False]['text':' Flush grouped insert ops before handling delete ops.','line_number':1847,'multiline':False]['text':' Delete write failed can no longer continue.','line_number':1860,'multiline':False]['text':' It does not matter if this final flush had errors or not since we finished processing','line_number':1868,'multiline':False]['text':' the last op already.','line_number':1869,'multiline':False]['text':' namespace bulk_write','line_number':1877,'multiline':False]['text':' namespace mongo','line_number':1878,'multiline':False]