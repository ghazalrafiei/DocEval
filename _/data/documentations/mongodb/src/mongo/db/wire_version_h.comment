['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The 'WireVersion' captures all "protocol events" the write protocol went through.  A
 * protocol event is a change in the syntax of messages on the wire or the semantics of
 * existing messages. We may also add "logical" entries for releases, although that's not
 * mandatory.
 *
 * We use the wire version to determine if two agents (a driver, a mongos, or a mongod) can
 * interact. Each agent carries two versions, a 'max' and a 'min' one. If the two agents
 * are on the same 'max' number, they stricly speak the same wire protocol and it is safe
 * to allow them to communicate. If two agents' ranges do not intersect, they should not be
 * allowed to communicate.
 *
 * If two agents have at least one version in common they can communicate, but one of the
 * sides has to be ready to compensate for not being on its partner version.
 ','line_number':46,'multiline':True]['text':' Everything before we started tracking.','line_number':62,'multiline':False]['text':' The aggregation command may now be requested to return cursors.','line_number':65,'multiline':False]['text':' insert, update, and delete batch command','line_number':68,'multiline':False]['text':' support SCRAM-SHA1, listIndexes, listCollections, new explain','line_number':71,'multiline':False]['text':' Support find and getMore commands, as well as OP_COMMAND in mongod (but not mongos).','line_number':74,'multiline':False]['text':' Supports all write commands take a write concern.','line_number':77,'multiline':False]['text':' Supports the new OP_MSG wireprotocol (3.6+).','line_number':80,'multiline':False]['text':' Supports replica set transactions (4.0+).','line_number':83,'multiline':False]['text':' Supports sharded transactions (4.2+).','line_number':86,'multiline':False]['text':' Supports resumable initial sync (4.4+).','line_number':89,'multiline':False]['text':' Supports features available from 4.7 and onwards.','line_number':92,'multiline':False]['text':' Supports features available from 4.8 and onwards.','line_number':95,'multiline':False]['text':' Supports features available from 4.9 and onwards.','line_number':98,'multiline':False]['text':' Supports features available from 5.0 and onwards.','line_number':101,'multiline':False]['text':' Supports features available from 5.1 and onwards.','line_number':104,'multiline':False]['text':' Calculate the latest wire version using the number of releases since 4.0.','line_number':107,'multiline':False]['text':' Set this to LATEST_WIRE_VERSION - 1.','line_number':110,'multiline':False]['text':' Calculate the last LTS wire version using the latest wire version minus the number of','line_number':113,'multiline':False]['text':' releases since last LTS.','line_number':114,'multiline':False]['text':'*
 * Struct to pass around information about wire version.
 ','line_number':118,'multiline':True]['text':' incomingExternalClient.minWireVersion - Minimum version that the server accepts on','line_number':136,'multiline':False]['text':' incoming requests from external clients. We should bump this whenever we don't want to','line_number':137,'multiline':False]['text':' allow incoming connections from clients that are too old.','line_number':138,'multiline':False]['text':' incomingExternalClient.maxWireVersion - Latest version that the server accepts on','line_number':140,'multiline':False]['text':' incoming requests from external clients. This should always be at the latest entry in','line_number':141,'multiline':False]['text':' WireVersion.','line_number':142,'multiline':False]['text':' incomingInternalClient.minWireVersion - Minimum version that the server accepts on','line_number':145,'multiline':False]['text':' incoming requests from internal clients. This should be','line_number':146,'multiline':False]['text':' incomingInternalClient.maxWireVersion - 1, when the featureCompatibilityVersion is equal','line_number':147,'multiline':False]['text':' to the downgrade version, and incomingInternalClient.maxWireVersion otherwise. However,','line_number':148,'multiline':False]['text':' in 3.6, this needs to be RELEASE_2_4_AND_BEFORE when the featureCompatibilityVersion is','line_number':149,'multiline':False]['text':' equal to the downgrade version due to a bug in 3.4, where if the receiving node says it','line_number':150,'multiline':False]['text':' supports wire version range [COMMANDS_ACCEPT_WRITE_CONCERN, SUPPORTS_OP_MSG] and it is a','line_number':151,'multiline':False]['text':' mongod, the initiating node will think it only supports OP_QUERY.','line_number':152,'multiline':False]['text':' incomingInternalClient.maxWireVersion - Latest version that the server accepts on','line_number':154,'multiline':False]['text':' incoming requests. This should always be at the latest entry in WireVersion.','line_number':155,'multiline':False]['text':' outgoing.minWireVersion - Minimum version allowed on remote nodes when the server sends','line_number':158,'multiline':False]['text':' requests. This should be outgoing.maxWireVersion - 1, when the','line_number':159,'multiline':False]['text':' featureCompatibilityVersion is equal to the downgrade version, and','line_number':160,'multiline':False]['text':' outgoing.maxWireVersion otherwise. However, in 3.6, this needs to be','line_number':161,'multiline':False]['text':' RELEASE_2_4_AND_BEFORE when the featureCompatibilityVersion is equal to the downgrade','line_number':162,'multiline':False]['text':' version due to a bug in 3.4, where if the receiving node says it supports wire version','line_number':163,'multiline':False]['text':' range [COMMANDS_ACCEPT_WRITE_CONCERN, SUPPORTS_OP_MSG] and it is a mongod, the initiating','line_number':164,'multiline':False]['text':' node will think it only supports OP_QUERY.','line_number':165,'multiline':False]['text':' outgoing.maxWireVersion - Latest version allowed on remote nodes when the server sends','line_number':167,'multiline':False]['text':' requests.','line_number':168,'multiline':False]['text':' Set to true if the client is internal to the cluster---this is a mongod or mongos','line_number':171,'multiline':False]['text':' connecting to another mongod.','line_number':172,'multiline':False]['text':'*
     * Appends the min and max versions in 'wireVersionInfo' to 'builder' in the format expected for
     * reporting information about the internal client, if the WireSpec represents the internal
     * client.
     *
     * Intended for use as part of performing the isMaster/hello handshake with a remote node. When
     * an internal clients make a connection to another node in the cluster, it includes internal
     * client information as a parameter to the hello command. This parameter has the following
     * format:
     *
     *    internalClient: {
     *        minWireVersion: <int>,
     *        maxWireVersion: <int>
     *    }
     *
     * This information can be used to ensure correctness during upgrade in mixed version clusters.
     ','line_number':191,'multiline':True]['text':' Calling `get()` on uninitialized instances of `WireSpec` is an invariant failure.','line_number':214,'multiline':False]['text':' Do not call this, it requires the caller to hold the lock on _spec.','line_number':217,'multiline':False]['text':' Ensures concurrent accesses to `get()`, `appendInternalClientWireVersionIfNeeded()`, and','line_number':223,'multiline':False]['text':' `reset()` are thread-safe.','line_number':224,'multiline':False]['text':'*
 * Validates client and server wire version. The server's wire version is returned from
 * hello/isMaster, and the client is from WireSpec.instance().
 ','line_number':232,'multiline':True]['text':'*
 * Determines the min/max wire version of a remote server from a hello/isMaster command reply.
 ','line_number':238,'multiline':True]['text':' namespace wire_version','line_number':243,'multiline':False]['text':' namespace mongo','line_number':244,'multiline':False]