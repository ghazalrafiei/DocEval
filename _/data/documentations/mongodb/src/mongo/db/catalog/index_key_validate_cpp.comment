['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':47,'multiline':False]['text':' When the skipIndexCreateFieldNameValidation failpoint is enabled, validation for index field','line_number':99,'multiline':False]['text':' names will be disabled. This will allow for creation of indexes with invalid field names in their','line_number':100,'multiline':False]['text':' specification.','line_number':101,'multiline':False]['text':' When the skipTTLIndexInvalidExpireAfterSecondsValidationForCreateIndex failpoint is enabled,','line_number':104,'multiline':False]['text':' validation for TTL index 'expireAfterSeconds' will be disabled in certain codepaths.','line_number':105,'multiline':False]['text':' Index creation under legacy writeMode can result in an index spec with an _id field.','line_number':114,'multiline':False]['text':' This is for indexSpec creation only.','line_number':122,'multiline':False]['text':'*
 * Returns Status::OK() if indexes of version 'indexVersion' are allowed to be created, and
 * returns ErrorCodes::CannotCreateIndex otherwise.
 ','line_number':126,'multiline':True]['text':' namespace','line_number':165,'multiline':False]['text':' Columnstore indexes do not support compound indexes.','line_number':242,'multiline':False]['text':' Invalid key names for columnstore are not supported.','line_number':246,'multiline':False]['text':' Ensure that the fields on which we are building the index are valid: a field must not','line_number':252,'multiline':False]['text':' begin with a '$' unless it is part of a wildcard, DBRef or text index, and a field path','line_number':253,'multiline':False]['text':' cannot contain an empty field. If a field cannot be created or updated, it should not be','line_number':254,'multiline':False]['text':' indexable.','line_number':255,'multiline':False]['text':' "$**" is acceptable for a text, wildcard, or columnstore index.','line_number':264,'multiline':False]['text':' Check if the index key path contains an empty field.','line_number':277,'multiline':False]['text':' Check if the '$'-prefixed field is part of a DBRef: since we don't have the','line_number':285,'multiline':False]['text':' necessary context to validate whether this is a proper DBRef, we allow index','line_number':286,'multiline':False]['text':' creation on '$'-prefixed names that match those used in a DBRef.','line_number':287,'multiline':False]['text':' Here we always validate the key pattern according to the most recent rules, in order','line_number':401,'multiline':False]['text':' to enforce that all new indexes have well-formed key patterns.','line_number':402,'multiline':False]['text':' Just use the simple collator, even though the index may have a separate collation','line_number':508,'multiline':False]['text':' specified or may inherit the default collation from the collection. It's legal to','line_number':509,'multiline':False]['text':' parse with the wrong collation, since the collation can be set on a MatchExpression','line_number':510,'multiline':False]['text':' after the fact. Here, we don't bother checking the collation after the fact, since','line_number':511,'multiline':False]['text':' this invocation of the parser is just for validity checking. It's also legal to parse','line_number':512,'multiline':False]['text':' with an empty namespace string, because we are only doing validity checking and not','line_number':513,'multiline':False]['text':' resolving the expression against a given namespace.','line_number':514,'multiline':False]['text':' Special match expression features (e.g. $jsonSchema, $expr, ...) are not allowed in a','line_number':519,'multiline':False]['text':' partialFilterExpression on index creation.','line_number':520,'multiline':False]['text':' For backwards compatibility, we will return BadValue for Wildcard indices.','line_number':536,'multiline':False]['text':' We use createProjectionExecutor to parse and validate the path projection','line_number':570,'multiline':False]['text':' spec. call here','line_number':571,'multiline':False]['text':' We can assume field name is valid at this point. Validation of fieldname is handled','line_number':656,'multiline':False]['text':' prior to this in validateIndexSpecFieldNames().','line_number':657,'multiline':False]['text':' Disallow 'clustered' from taking value 'false'','line_number':680,'multiline':False]['text':' Only require 'unique' if clustered is specified.','line_number':686,'multiline':False]['text':' Ignore any 'ns' field in the index spec because this field is dropped post-4.0. Don't remove','line_number':719,'multiline':False]['text':' the field during repair, as repair may run on old data files (version 3.6 and 4.0) that','line_number':720,'multiline':False]['text':' require the field to be present.','line_number':721,'multiline':False]['text':' We create a new index specification with the 'expireAfterSeconds' field set as','line_number':727,'multiline':False]['text':' kExpireAfterSecondsForInactiveTTLIndex if the current value is invalid. A similar','line_number':728,'multiline':False]['text':' treatment is done in repairIndexSpec(). This rewrites the 'expireAfterSeconds'','line_number':729,'multiline':False]['text':' value to be compliant with the 'safeInt' IDL type for the listIndexes response.','line_number':730,'multiline':False]['text':' We create a new index specification with the 'v' field set as 'defaultIndexVersion' if','line_number':739,'multiline':False]['text':' the field was omitted.','line_number':740,'multiline':False]['text':' Field names for a 'clustered' index spec have already been validated through','line_number':765,'multiline':False]['text':' allowedClusteredIndexFieldNames.','line_number':766,'multiline':False]['text':' validateIndexSpec() should have already verified that 'keyPatternElem' is an object.','line_number':781,'multiline':False]['text':'*
 * Top-level index spec field names for a "clustered" index are specified here.
 ','line_number':797,'multiline':True]['text':'*
 * Top-level index spec field names are validated here. When adding a new field with a document as
 * value, is the the sub-module's responsibility to ensure that the content is valid and that only
 * expected fields are present at creation time
 ','line_number':814,'multiline':True]['text':' validateIndexSpec() should have already verified that 'collationElem' is an object.','line_number':845,'multiline':False]['text':' If the collator factory returned a non-null collator, then inject the entire','line_number':855,'multiline':False]['text':' collation specification into the index specification. This is necessary to fill','line_number':856,'multiline':False]['text':' in any options that the user omitted.','line_number':857,'multiline':False]['text':' If the collator factory returned a null collator (representing the "simple"','line_number':870,'multiline':False]['text':' collation), then we simply omit the "collation" from the index specification.','line_number':871,'multiline':False]['text':' This is desirable to make the representation for the "simple" collation','line_number':872,'multiline':False]['text':' consistent between v=1 and v=2 indexes.','line_number':873,'multiline':False]['text':' validateIndexSpec() should have added the "v" field if it was not present and','line_number':877,'multiline':False]['text':' verified that 'versionElem' is a number.','line_number':878,'multiline':False]['text':' The user did not specify an explicit collation for this index and the collection','line_number':883,'multiline':False]['text':' has a default collator. If we're building a v=2 index, then we should inherit the','line_number':884,'multiline':False]['text':' collection default. However, if we're building a v=1 index, then we're implicitly','line_number':885,'multiline':False]['text':' building an index that's using the "simple" collation.','line_number':886,'multiline':False]['text':' Relax epoch restriction on TTL indexes. This allows us to export and import existing','line_number':907,'multiline':False]['text':' TTL indexes with large values or NaN for the 'expireAfterSeconds' field.','line_number':908,'multiline':False]['text':' Additionally, the 'expireAfterSeconds' for TTL indexes is defined as safeInt (int32_t)','line_number':909,'multiline':False]['text':' in the IDL for listIndexes and collMod. See list_indexes.idl and coll_mod.idl.','line_number':910,'multiline':False]['text':' Clustered collections with TTL.','line_number':919,'multiline':False]['text':' Note that 'expireAfterSeconds' is defined as safeInt64 in the IDL for the create and','line_number':920,'multiline':False]['text':' collMod commands. See create.idl and coll_mod.idl.','line_number':921,'multiline':False]['text':' There are two cases where we can encounter an issue here.','line_number':922,'multiline':False]['text':' The first case is when we try to cast to millseconds from seconds, which could cause an','line_number':923,'multiline':False]['text':' overflow. The second case is where 'expireAfterSeconds' is larger than the current epoch','line_number':924,'multiline':False]['text':' time. This isn't necessarily problematic for the general case, but for the specific case','line_number':925,'multiline':False]['text':' of time series collections, we cluster the collection by an OID value, where the','line_number':926,'multiline':False]['text':' timestamp portion is only a 32-bit unsigned integer offset of seconds since the epoch.','line_number':927,'multiline':False]['text':' Clustered indexes allow 64-bit integers for expireAfterSeconds, but secondary indexes only','line_number':962,'multiline':False]['text':' allow 32-bit integers, so we check the range here for secondary indexes.','line_number':963,'multiline':False]['text':' An index named '*' cannot be dropped on its own, because a dropIndex oplog','line_number':1032,'multiline':False]['text':' entry with a '*' as an index name means "drop all indexes in this','line_number':1033,'multiline':False]['text':' collection".  We disallow creation of such indexes to avoid this conflict.','line_number':1034,'multiline':False]['text':' namespace index_key_validate','line_number':1051,'multiline':False]['text':' namespace mongo','line_number':1052,'multiline':False]