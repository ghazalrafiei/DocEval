['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Data structure to keep track of mappings between namespace or uuid to a catalogId. The mapping is
 * maintained for a range of time [oldest, now) to mirror the time range the server can service
 * queries.
 *
 * Uses immutable data structures internally to be cheap to copy.
 ','line_number':44,'multiline':True]['text':'*
     * CatalogId with Timestamp
     ','line_number':56,'multiline':True]['text':' none represents non-existing at timestamp (due to drop or rename)','line_number':61,'multiline':False]['text':'*
     * Returns the CatalogId for a given 'nss' or 'uuid' at timestamp 'ts'.
     ','line_number':65,'multiline':True]['text':' Namespace or UUID exists at time 'ts' and catalogId set in 'id'.','line_number':70,'multiline':False]['text':' Namespace or UUID does not exist at time 'ts'.','line_number':72,'multiline':False]['text':' Namespace or UUID existence at time 'ts' is unknown. The durable catalog must be','line_number':74,'multiline':False]['text':' scanned to determine existence.','line_number':75,'multiline':False]['text':'*
     * Returns the CatalogId for a given 'nss' or 'uuid' at timestamp 'ts'.
     *
     * Timestamp 'none' returns mapping at latest.
     ','line_number':82,'multiline':True]['text':'*
     * Register that a namespace/uuid was created with given 'catalogId' at timestamp 'ts'.
     *
     * Timestamp 'none' indicates that the namespace was created without a timestamp.
     * Setting 'allowMixedModeWrites' to true will clear historical data for nss/uuid, if any.
     ','line_number':90,'multiline':True]['text':'*
     * Register that a namespace/uuid was dropped at timestamp 'ts'.
     *
     * Timestamp 'none' indicates that the namespace was dropped without a timestamp.
     ','line_number':102,'multiline':True]['text':'*
     * Register that a namespace was renamed at timestamp 'ts'.
     *
     * Timestamp 'none' indicates that the namespace was renamed without a timestamp.
     ','line_number':109,'multiline':True]['text':'*
     * Records existence of a namespace at timestamp 'ts' that was previously unknown.
     ','line_number':118,'multiline':True]['text':'*
     * Records non-existence of a namespace at timestamp 'ts' that was previously unknown.
     ','line_number':126,'multiline':True]['text':'*
     * Returns true if the structure has space to record non-existence of a namespace/uuid.
     ','line_number':132,'multiline':True]['text':'*
     * Returns true if a call to 'cleanup' with the given timestemp would perform any cleanup.
     ','line_number':138,'multiline':True]['text':'*
     * Performs cleanup of historical data when the oldest timestamp advances. Should be performed
     * regularly to free up data for time ranges that are no longer needed for lookups.
     ','line_number':143,'multiline':True]['text':'*
     * Rollback any mappings with larger timestamps than provided stable timestamp. Needs to be
     * performed as part of replication rollback.
     ','line_number':149,'multiline':True]['text':' CatalogId mappings for all known namespaces and UUIDs for the CollectionCatalog. The vector','line_number':172,'multiline':False]['text':' is sorted on timestamp. UUIDs will have at most two entries. One for the create and another','line_number':173,'multiline':False]['text':' for the drop. UUIDs stay the same across collection renames.','line_number':174,'multiline':False]['text':' Set of namespaces and UUIDs that need cleanup when the oldest timestamp advances','line_number':177,'multiline':False]['text':' sufficiently.','line_number':178,'multiline':False]['text':' Point at which the oldest timestamp need to advance for there to be any catalogId namespace','line_number':181,'multiline':False]['text':' that can be cleaned up','line_number':182,'multiline':False]['text':' The oldest timestamp at which the tracker maintains mappings. Anything older than this is','line_number':184,'multiline':False]['text':' unknown.','line_number':185,'multiline':False]['text':' namespace mongo','line_number':189,'multiline':False]