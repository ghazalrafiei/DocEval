['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Checks that the collection has the 'expectedUUID' if given.
 * Checks that writes are allowed to 'coll' -- e.g. whether this server is PRIMARY.
 ','line_number':96,'multiline':True]['text':' Views don't have UUIDs so if the expectedUUID is specified, we will always throw.','line_number':165,'multiline':False]['text':' Validates the view or throws an "invalid view" error.','line_number':183,'multiline':False]['text':' Operations all lock system.views in the end to prevent deadlock.','line_number':186,'multiline':False]['text':' We only need to hold an intent lock to send abort signals to the active index builder on this','line_number':233,'multiline':False]['text':' collection.','line_number':234,'multiline':False]['text':' Abandon the snapshot as the index catalog will compare the in-memory state to the disk state,','line_number':239,'multiline':False]['text':' which may have changed when we released the collection lock temporarily.','line_number':240,'multiline':False]['text':' Even if the collection doesn't exist, UUID mismatches must return an error.','line_number':246,'multiline':False]['text':' Save a copy of the namespace before yielding our locks.','line_number':279,'multiline':False]['text':' Release locks before aborting index builds. The helper will acquire locks on our behalf.','line_number':282,'multiline':False]['text':' Send the abort signal to any active index builds on the collection. This waits until all','line_number':286,'multiline':False]['text':' aborted index builds complete.','line_number':287,'multiline':False]['text':' Take an exclusive lock to finish the collection drop.','line_number':295,'multiline':False]['text':' Abandon the snapshot as the index catalog will compare the in-memory state to the','line_number':299,'multiline':False]['text':' disk state, which may have changed when we released the collection lock temporarily.','line_number':300,'multiline':False]['text':' Even if the collection doesn't exist, UUID mismatches must return an error.','line_number':306,'multiline':False]['text':' Check if any new index builds were started while releasing the collection lock','line_number':314,'multiline':False]['text':' temporarily, if so, we need to abort the new index builders.','line_number':315,'multiline':False]['text':' It's possible for the given collection to be drop pending after obtaining the locks again, if','line_number':322,'multiline':False]['text':' that is the case, then the collection is already registered to be dropped. Return early.','line_number':323,'multiline':False]['text':' Serialize the drop with refreshes to prevent dropping a collection and creating the same','line_number':329,'multiline':False]['text':' nss as a view while refreshing.','line_number':330,'multiline':False]['text':' Even if the collection doesn't exist, UUID mismatches must return an error.','line_number':359,'multiline':False]['text':' If a change collection is to be dropped, that is, the change streams are being','line_number':411,'multiline':False]['text':' disabled for a tenant, acquire exclusive tenant lock.','line_number':412,'multiline':False]['text':' database lock mode','line_number':415,'multiline':True]['text':' appendNs ','line_number':452,'multiline':True]['text':' Disallow checking the expectedUUID when dropping time-series collections.','line_number':469,'multiline':False]['text':' Take a MODE_X lock when dropping timeseries view. This is to prevent','line_number':476,'multiline':False]['text':' a concurrent create collection on the same namespace that will','line_number':477,'multiline':False]['text':' reserve an OpTime before this drop. We already hold a MODE_X lock on','line_number':478,'multiline':False]['text':' the bucket collection inside '_abortIndexBuildsAndDrop' above. When','line_number':479,'multiline':False]['text':' taking both these locks it needs to happen in this order to prevent a','line_number':480,'multiline':False]['text':' deadlock.','line_number':481,'multiline':False]['text':' Drop the buckets collection in its own writeConflictRetry so that if','line_number':489,'multiline':False]['text':' it throws a WCE, only the buckets collection drop is retried.','line_number':490,'multiline':False]['text':' appendNs ','line_number':502,'multiline':True]['text':' Timeseries bucket collection may exist even without the view. If that is the case','line_number':508,'multiline':False]['text':' delete it.','line_number':509,'multiline':False]['text':' There is no collection or view at the namespace. Check whether a UUID was given','line_number':515,'multiline':False]['text':' and error if so because the caller expects the collection to exist. If no UUID','line_number':516,'multiline':False]['text':' was given, then it is OK to return success.','line_number':517,'multiline':False]['text':' Take a MODE_X lock when dropping a view. This is to prevent a concurrent create','line_number':537,'multiline':False]['text':' collection on the same namespace that will reserve an OpTime before this drop.','line_number':538,'multiline':False]['text':' Any unhandled namespace not found errors should be converted into success. Unless the','line_number':543,'multiline':False]['text':' caller specified a UUID and expects the collection to exist.','line_number':544,'multiline':False]['text':' namespace','line_number':554,'multiline':False]['text':' We rewrite drop of time-series buckets collection to drop of time-series view collection.','line_number':571,'multiline':False]['text':' This ensures that such drop will delete both collections.','line_number':572,'multiline':False]['text':'fromMigrate','line_number':607,'multiline':True]['text':' Collections in the local database are not replicated, so we do not need an _id index on','line_number':652,'multiline':False]['text':' any collection. For the same reason, it is not possible for the local database to contain','line_number':653,'multiline':False]['text':' any drop-pending collections (drops are effective immediately).','line_number':654,'multiline':False]['text':' namespace mongo','line_number':763,'multiline':False]