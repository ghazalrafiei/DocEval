['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * CheckRecordId indicates whether to confirm that the recordId matches the element we are
 * removing when unindexing. When deleting documents, it is set to 'Off' by default to allow
 * WiredTiger to do blind unindexing for efficacy. When set to 'On', disables blind deletes and
 * forces recordid-matching for unindex operations.
 ','line_number':73,'multiline':True]['text':'*
     * Use a collection scan to dump all keys into an external sorter. During this process,
     * concurrent client writes are accepted, and their generated keys are written into an
     * interceptor. On completion, this interceptor is drained and used to verify uniqueness
     * constraints on the index.
     *
     * This is the default for all index builds.
     ','line_number':82,'multiline':True]['text':'*
     * Perform a collection scan to dump all keys into the external sorter, then into the index.
     * During this process, callers guarantee that no writes will be accepted on this collection.
     ','line_number':91,'multiline':True]['text':'*
     * kInitFromDisk avoids registering a change to undo this operation when set to true. You
     * must set this flag if calling this function outside of a WriteUnitOfWork.
     ','line_number':102,'multiline':True]['text':'*
     * kIsReady controls whether the index will be directly available for query usage without
     * needing to complete the IndexBuildBlock process.
     ','line_number':107,'multiline':True]['text':'*
     * kFrozen indicates that the index is not usable and that it is not currently being
     * built. This is used when starting a node in standalone mode and a two-phase index build
     * is incomplete. kIsReady must not also be set.
     ','line_number':112,'multiline':True]['text':'*
     * kUpdateMetadata indicates that the index metadata in the storage engine should be updated
     * based on changes to the IndexDescriptor.
     * This is used when converting a regular index to a unique index through the collMod command.
     ','line_number':118,'multiline':True]['text':'*
     * kForceUpdateMetadata indicates bypassing the checks when updating the index metadata in the
     * storage engine.
     * This is used when forcing the conversion of a unique index to a non-unique index through the
     * collMod command.
     ','line_number':124,'multiline':True]['text':'*
 * The IndexCatalog is owned by the Collection and is responsible for the lookup and lifetimes of
 * the indexes in a collection. Every collection has exactly one instance of this class.
 *
 * Callers are expected to have acquired the necessary locks while accessing this interface.
 *
 * To inspect the contents of this IndexCatalog, callers may obtain an iterator from
 * getIndexIterator().
 *
 * Index building functionality is supported by the IndexBuildBlock interface. However, it is
 * recommended to use the higher level MultiIndexBlock interface.
 *
 * Due to the resource-intensive nature of the index building process, this interface also provides
 * information on which indexes are available for queries through the following functions:
 *     int numIndexesTotal();
 *     int numIndexesReady();
 *     int numIndexesInProgress();
 ','line_number':141,'multiline':True]['text':'*
         * Advance the underlying iterator and returns the next index entry. Returns nullptr when
         * the iterator is exhausted.
         ','line_number':168,'multiline':True]['text':'*
         * `ownedContainer` is a container whose lifetime the begin and end iterators depend
         * on. If the caller will keep control of the container for the entire iterator lifetime,
         * it should pass in a null value.
         ','line_number':196,'multiline':True]['text':' Must be called before used.','line_number':230,'multiline':False]['text':' ---- accessors -----','line_number':235,'multiline':False]['text':'*
     * Returns true if the _id index exists.
     ','line_number':247,'multiline':True]['text':'*
     * Returns the spec for the id index to create by default for this collection.
     ','line_number':252,'multiline':True]['text':'*
     * Find index by name.  The index name uniquely identifies an index.
     *
     * @return null if cannot find
     ','line_number':259,'multiline':True]['text':'*
     * Find index by matching key pattern and options. The key pattern, collation spec, and partial
     * filter expression together uniquely identify an index.
     *
     * @return null if cannot find index, otherwise the index with a matching signature.
     ','line_number':269,'multiline':True]['text':'*
     * Find indexes with a matching key pattern, putting them into the vector 'matches'.  The key
     * pattern alone does not uniquely identify an index.
     *
     * Consider using 'findIndexByName' if expecting to match one index.
     ','line_number':281,'multiline':True]['text':'*
     * Finds the index with the given ident. The ident uniquely identifies an index.
     *
     * Returns nullptr if the index is not found.
     ','line_number':297,'multiline':True]['text':'*
     * Reload the index definition for 'oldDesc' from the CollectionCatalogEntry.  'oldDesc'
     * must be a ready index that is already registered with the index catalog.  Returns an
     * unowned pointer to the descriptor for the new index definition.
     *
     * Use this method to notify the IndexCatalog that the spec for this index has changed.
     *
     * It is invalid to dereference 'oldDesc' after calling this method.
     *
     * The caller must hold the collection X lock and ensure no index builds are in progress
     * on the collection.
     ','line_number':307,'multiline':True]['text':'*
     * Returns a pointer to the index catalog entry associated with 'desc'. Throws if there is no
     * such index. Never returns nullptr.
     ','line_number':324,'multiline':True]['text':'*
     * Returns a writable IndexCatalogEntry copy that will be returned by current and future calls
     * to this function. Any previous IndexCatalogEntry/IndexDescriptor pointers that were returned
     * may be invalidated.
     ','line_number':330,'multiline':True]['text':'*
     * Returns a pointer to the index catalog entry associated with 'desc', where the caller assumes
     * shared ownership of the entry. Returns null if the entry does not exist.
     ','line_number':345,'multiline':True]['text':'*
     * Returns a vector of shared pointers to all index entries. Excludes unfinished indexes.
     ','line_number':352,'multiline':True]['text':'*
     * Returns an iterator for the index descriptors in this IndexCatalog.
     ','line_number':358,'multiline':True]['text':' ---- index set modifiers ------','line_number':364,'multiline':False]['text':'
     * Creates an index entry with the provided descriptor on the catalog's collection.
     *
     ','line_number':366,'multiline':True]['text':'*
     * Call this only on an empty collection from inside a WriteUnitOfWork. Index creation on an
     * empty collection can be rolled back as part of a larger WUOW. Returns the full specification
     * of the created index, as it is stored in this index catalog.
     ','line_number':376,'multiline':True]['text':'*
     * Checks the spec 'original' to make sure nothing is incorrectly set and cleans up any legacy
     * fields. Lastly, checks whether the spec conflicts with ready and in-progress indexes.
     *
     * Returns an error Status or the cleaned up version of the non-conflicting spec. Returns
     * IndexAlreadyExists if the index already exists; IndexBuildAlreadyInProgress if the index is
     * already being built.
     ','line_number':385,'multiline':True]['text':'*
     * Returns a copy of 'indexSpecsToBuild' that does not contain index specifications that already
     * exist or are already being built. If this is not done, an index build using
     * 'indexSpecsToBuild' may fail with an IndexAlreadyExists or IndexBuildAlreadyInProgress error.
     * If {buildIndexes:false} is set in the replica set config, also filters non-_id index specs
     * out of the results.
     *
     * Additionally verifies the specs are valid. Throws on any spec validation errors or conflicts
     * other than IndexAlreadyExists, which indicates that the index spec already exists is what
     * this function filters out.
     *
     * 'removeIndexBuildsToo' controls whether in-progress index builds are also filtered out. If
     * they are not, then IndexBuildAlreadyInProgress errors can be thrown.
     ','line_number':399,'multiline':True]['text':'*
     * Filters out ready and in-progress indexes that already exist and returns the remaining
     * indexes. Additionally filters out non-_id indexes if the replica set member config has
     * {buildIndexes:false} set.
     *
     * Does no correctness verification of the provided specs, nor modifications for legacy reasons.
     *
     * This should only be used when we are confident in the specs, such as when specs are received
     * via replica set cloning or chunk migrations.
     *
     * 'removeInProgressIndexBuilds' controls whether in-progress index builds are also filtered
     * out.
     ','line_number':419,'multiline':True]['text':'*
     * Drops indexes in the index catalog that returns true when it's descriptor returns true for
     * 'matchFn'. If 'onDropFn' is provided, it will be called before each index is dropped to
     * allow timestamping each individual drop.
     ','line_number':438,'multiline':True]['text':'*
     * Drops all indexes in the index catalog, optionally dropping the id index depending on the
     * 'includingIdIndex' parameter value. If 'onDropFn' is provided, it will be called before each
     * index is dropped to allow timestamping each individual drop.
     ','line_number':448,'multiline':True]['text':'*
     * Resets the index given its descriptor.
     *
     * This can only be called during startup recovery as it involves recreating the index table to
     * allow bulk cursors to be used again.
     ','line_number':458,'multiline':True]['text':'*
     * Drops an unfinished index given its descriptor.
     *
     * The caller must hold the collection X lock.
     ','line_number':468,'multiline':True]['text':'*
     * Drops the index given its catalog entry.
     *
     * The caller must hold the collection X lock.
     ','line_number':477,'multiline':True]['text':'*
     * Deletes the index from the durable catalog on disk.
     ','line_number':486,'multiline':True]['text':' ---- modify single index','line_number':493,'multiline':False]['text':'*
     * Sets the index 'desc' to be multikey with the provided 'multikeyPaths'.
     *
     * See IndexCatalogEntry::setMultikey().
     ','line_number':495,'multiline':True]['text':' ----- data modifiers ------','line_number':506,'multiline':False]['text':'*
     * When 'keysInsertedOut' is not null, it will be set to the number of index keys inserted by
     * this operation.
     *
     * This method may throw.
     ','line_number':508,'multiline':True]['text':'*
     * Both 'keysInsertedOut' and 'keysDeletedOut' are required and will be set to the number of
     * index keys inserted and deleted by this operation, respectively.
     * The 'opDiff' argument specifies an optional document containing the differences between
     * 'oldDoc' and 'newDoc' that can be used to decide which indexes have to be modified. If
     * set to null, all indexes should be updated.
     *
     * This method may throw.
     ','line_number':519,'multiline':True]['text':'*
     * When 'keysDeletedOut' is not null, it will be set to the number of index keys removed by
     * this operation.
     ','line_number':537,'multiline':True]['text':'
     * Attempt compaction on all ready indexes to regain disk space, if the storage engine's index
     * supports compaction in-place. If the freeSpaceTargetMB is provided, compaction will only
     * proceed if the free storage space available is greater than the provided value.
     ','line_number':549,'multiline':True]['text':' public helpers','line_number':559,'multiline':False]['text':'*
     * Returns length of longest index name.
     * This includes unfinished indexes.
     ','line_number':561,'multiline':True]['text':'*
     * Detects and normalizes _id index key pattern if found.
     ','line_number':567,'multiline':True]['text':'*
     * Fills out 'options' in order to indicate whether to allow dups or relax
     * index constraints, as needed by replication.
     ','line_number':572,'multiline':True]['text':'*
     * Helper function which normalizes index specs. This function will populate a complete
     * collation spec in cases where the index spec specifies a collation, and will add the
     * collection-default collation, if present, in cases where collation is omitted. If the index
     * spec omits the collation and the collection does not have a default, the collation field is
     * omitted from the spec.
     *
     * If 'collection' is null, no changes are made to the input specs.
     *
     * This function throws on error.
     ','line_number':585,'multiline':True]['text':' namespace mongo','line_number':615,'multiline':False]