['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Contains all the index information and stats throughout the validation.
 ','line_number':59,'multiline':True]['text':' Index name.','line_number':64,'multiline':False]['text':' Contains the indexes key pattern.','line_number':66,'multiline':False]['text':' Contains the pre-computed hash of the index name.','line_number':68,'multiline':False]['text':' More efficient representation of the ordering of the descriptor's key pattern.','line_number':70,'multiline':False]['text':' The number of index entries belonging to the index.','line_number':72,'multiline':False]['text':' The number of records that have a key in their document that referenced back to the this','line_number':74,'multiline':False]['text':' index.','line_number':75,'multiline':False]['text':' A hashed set of indexed multikey paths (applies to $** indexes only).','line_number':77,'multiline':False]['text':' Indicates whether or not there are documents that make this index multikey.','line_number':79,'multiline':False]['text':' The set of multikey paths generated from all documents. Only valid when multikeyDocs is also','line_number':81,'multiline':False]['text':' set and an index tracks path-level information.','line_number':82,'multiline':False]['text':' Indicates whether key entries must be unique.','line_number':84,'multiline':False]['text':' Index access method pointer.','line_number':86,'multiline':False]['text':'*
 * Used by _missingIndexEntries to be able to easily access keyString during repairIndexEntries.
 ','line_number':90,'multiline':True]['text':'*
 * The IndexConsistency class provides the base class definitions for index-consistency
 * sub-classes. The base implementation in this class provides the basis for keeping track of the
 * index consistency. It does this by using the index keys from index entries and index keys
 * generated from the document to ensure there is a one-to-one mapping for each key.
 ','line_number':107,'multiline':True]['text':'*
     * Informs the IndexConsistency object that we're advancing to the second phase of
     * index validation.
     ','line_number':125,'multiline':True]['text':' We map the hashed KeyString values to a bucket that contains the count of how many','line_number':141,'multiline':False]['text':' index keys and document keys we've seen in each bucket. This counter is unsigned to avoid','line_number':142,'multiline':False]['text':' undefined behavior in the (unlikely) case of overflow.','line_number':143,'multiline':False]['text':' Count rules:','line_number':144,'multiline':False]['text':'     - If the count is non-zero for a bucket after all documents and index entries have been','line_number':145,'multiline':False]['text':'       processed, one or more indexes are inconsistent for KeyStrings that map to it.','line_number':146,'multiline':False]['text':'       Otherwise, those keys are consistent for all indexes with a high degree of confidence.','line_number':147,'multiline':False]['text':'     - Absent overflow, if a count interpreted as twos complement integer ends up greater','line_number':148,'multiline':False]['text':'       than zero, there are too few index entries.','line_number':149,'multiline':False]['text':'     - Similarly, if that count ends up less than zero, there are too many index entries.','line_number':150,'multiline':False]['text':' Whether we're in the first or second phase of index validation.','line_number':154,'multiline':False]['text':' IndexConsistency','line_number':159,'multiline':False]['text':'*
 * The KeyStringIndexConsistency class is used to keep track of the index consistency for
 * KeyString based indexes. It does this by using the index keys from index entries and index keys
 * generated from the document to ensure there is a one-to-one mapping for each key. In addition, an
 * IndexObserver class can be hooked into the IndexAccessMethod to inform this class about changes
 * to the indexes during a validation and compensate for them.
 ','line_number':161,'multiline':True]['text':'*
     * Traverses the column-store index via 'cursor' and accumulates the traversal results.
     ','line_number':181,'multiline':True]['text':'*
     * Traverses all paths in a single record from the row-store via the given {'recordId','record'}
     * pair and accumulates the traversal results.
     ','line_number':189,'multiline':True]['text':'*
     * Returns true if any value in the `_indexKeyCount` map is not equal to 0, otherwise return
     * false.
     ','line_number':200,'multiline':True]['text':'*
     * If repair mode enabled, try inserting _missingIndexEntries into indexes.
     ','line_number':206,'multiline':True]['text':'*
     * Records the errors gathered from the second phase of index validation into the provided
     * ValidateResultsMap and ValidateResults.
     ','line_number':211,'multiline':True]['text':'*
     * Sets up this IndexConsistency object to limit memory usage in the second phase of index
     * validation. Returns whether the memory limit is sufficient to report at least one index entry
     * inconsistency and continue with the second phase of validation.
     ','line_number':217,'multiline':True]['text':' A vector of IndexInfo indexes by index number','line_number':236,'multiline':False]['text':' Populated during the second phase of validation, this map contains the index entries that','line_number':239,'multiline':False]['text':' were pointing at an invalid document key.','line_number':240,'multiline':False]['text':' The map contains a IndexKey pointing at a set of BSON objects as there may be multiple','line_number':241,'multiline':False]['text':' extra index entries for the same IndexKey.','line_number':242,'multiline':False]['text':' Populated during the second phase of validation, this map contains the index entries that','line_number':245,'multiline':False]['text':' were missing while the document key was in place.','line_number':246,'multiline':False]['text':' The map contains a IndexKey pointing to a IndexEntryInfo as there can only be one missing','line_number':247,'multiline':False]['text':' index entry for a given IndexKey for each index.','line_number':248,'multiline':False]['text':' The total number of index keys is stored during the first validation phase, since this','line_number':251,'multiline':False]['text':' count may change during a second phase.','line_number':252,'multiline':False]['text':'*
     * Return info for an index tracked by this with the given 'indexName'.
     ','line_number':255,'multiline':True]['text':'*
     * During the first phase of validation, given the document's key KeyString, increment the
     * corresponding `_indexKeyCount` by hashing it.
     * For the second phase of validation, keep track of the document keys that hashed to
     * inconsistent hash buckets during the first phase of validation.
     ','line_number':262,'multiline':True]['text':'*
     * During the first phase of validation, given the index entry's KeyString, decrement the
     * corresponding `_indexKeyCount` by hashing it.
     * For the second phase of validation, try to match the index entry keys that hashed to
     * inconsistent hash buckets during the first phase of validation to document keys.
     ','line_number':274,'multiline':True]['text':'*
     * During the first phase of validation, tracks the multikey paths for every observed document.
     ','line_number':287,'multiline':True]['text':'*
     * To validate $** multikey metadata paths, we first scan the collection and add a hash of all
     * multikey paths encountered to a set. We then scan the index for multikey metadata path
     * entries and remove any path encountered. As we expect the index to contain a super-set of
     * the collection paths, a non-empty set represents an invalid index.
     ','line_number':292,'multiline':True]['text':'*
     * Generates a key for the second phase of validation. The keys format is the following:
     * {
     *     indexName: <string>,
     *     recordId: <number>,
     *     idKey: <object>,  // Only available for missing index entries.
     *     indexKey: {
     *         <key>: <value>,
     *         ...
     *     }
     * }
     ','line_number':302,'multiline':True]['text':'*
     * Returns a hashed value from the given KeyString and index namespace.
     ','line_number':320,'multiline':True]['text':'*
     * Prints the collection document's and index entry's metadata.
     ','line_number':325,'multiline':True]['text':' KeyStringIndexConsistency','line_number':332,'multiline':False]['text':' namespace mongo','line_number':333,'multiline':False]