['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Signal that any uncommitted writes are either committed or aborted. Destruction of this','line_number':68,'multiline':False]['text':' CappedWriter is a direct result of the snapshot of the RecoveryUnit being destructed.','line_number':69,'multiline':False]['text':' The only circumstances where we can correctly handle capped visibility are with integer','line_number':89,'multiline':False]['text':' RecordIds, since with clustered collections (string RecordIds) we don't control RecordId','line_number':90,'multiline':False]['text':' assignment.','line_number':91,'multiline':False]['text':' We can register multiple recordids on the same writer, but we update the min and max.','line_number':95,'multiline':False]['text':' We have already been registered, so we should not insert a new entry.','line_number':110,'multiline':False]['text':' Register ourselves as a writer with uncommitted records. We allocate a new single-element','line_number':117,'multiline':False]['text':' list outside the mutex, obtain an iterator, and then splice into the existing list under the','line_number':118,'multiline':False]['text':' mutex. The iterator remains valid even in the new list, and we can erase in constant time','line_number':119,'multiline':False]['text':' when the writer commits.','line_number':120,'multiline':False]['text':' Because CappedWriters is decorated on the RecoveryUnit and tied to its lifetime, we can','line_number':129,'multiline':False]['text':' capture the writer without risk of it dangling.','line_number':130,'multiline':False]['text':' commit ','line_number':136,'multiline':True]['text':' commit ','line_number':139,'multiline':True]['text':' Create a temporary list that we use to splice out the removed element and can deallocate','line_number':157,'multiline':False]['text':' outside of the mutex.','line_number':158,'multiline':False]['text':' We only want to advance the highest record when a transaction commits.','line_number':162,'multiline':False]['text':' namespace mongo','line_number':192,'multiline':False]