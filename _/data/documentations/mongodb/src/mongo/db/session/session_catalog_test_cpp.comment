['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]['text':'*
     * Creates the session with the given 'lsid' by checking it out from the SessionCatalog and then
     * checking it back in.
     ','line_number':91,'multiline':True]['text':'*
     * Returns the session ids for all sessions in the SessionCatalog.
     ','line_number':104,'multiline':True]['text':' When this class is in scope, makes the system behave as if we're in a DBDirectClient','line_number':125,'multiline':False]['text':' Verify that the parent session cannot be checked out until the child session is checked','line_number':192,'multiline':False]['text':' back in.','line_number':193,'multiline':False]['text':' Verify that the child session cannot be checked out until the parent session is checked','line_number':217,'multiline':False]['text':' back in.','line_number':218,'multiline':False]['text':' Verify that another child session cannot be checked out until both the child session','line_number':242,'multiline':False]['text':' above and the parent session are checked back in.','line_number':243,'multiline':False]['text':' Create sessions in the catalog.','line_number':310,'multiline':False]['text':' Mark otherParentSession for reap. The session should get reaped since it doesn't have any','line_number':361,'multiline':False]['text':' child session.','line_number':362,'multiline':False]['text':' Mark parentSession for reap. The session should not get reaped since its child sessions','line_number':376,'multiline':False]['text':' (i.e. childSession0 and childSession1) are not marked for reaped.','line_number':377,'multiline':False]['text':' Mark childSession0 and childSession1 for reap with kNonExclusive mode. The sessions should','line_number':391,'multiline':False]['text':' not get reaped since parentSession is not marked for reaped.','line_number':392,'multiline':False]['text':' Mark childSession0 for reap with kExclusive mode. The session should get reaped.','line_number':408,'multiline':False]['text':' Mark parentSession and childSession1 for reap with kNonExclusive mode. Both sessions should','line_number':427,'multiline':False]['text':' get reaped since all sessions are now marked for reap.','line_number':428,'multiline':False]['text':' Scan over zero Sessions.','line_number':464,'multiline':False]['text':' Create sessions in the catalog.','line_number':471,'multiline':False]['text':' Scan over all Sessions.','line_number':488,'multiline':False]['text':' Scan over all Sessions, visiting a Session with child Sessions.','line_number':493,'multiline':False]['text':' Do not allow matching on child sessions.','line_number':511,'multiline':False]['text':' Check out parentSession.','line_number':532,'multiline':False]['text':' After this wait, parentSession is either checked out or has a thread waiting for it be','line_number':561,'multiline':False]['text':' checked out.','line_number':562,'multiline':False]['text':' Mark parentSession for reap, and additionally mark childSession0 and childSession1 for','line_number':565,'multiline':False]['text':' reap with kNonExclusive mode. parentSession should not get reaped because it is checked','line_number':566,'multiline':False]['text':' out or has a thread waiting for it be checked out. childSession0 and childSession1 also','line_number':567,'multiline':False]['text':' should not get reaped since they must be reaped with parentSession.','line_number':568,'multiline':False]['text':' Mark childSession0 for reap with kExclusive mode. It should get reaped although','line_number':584,'multiline':False]['text':' parentSession is checked out or has a thread waiting for it be checked out.','line_number':585,'multiline':False]['text':' Mark childSession1 for reap with mode kExclusive. The session should get reaped although','line_number':604,'multiline':False]['text':' parentSession is checked out or has a thread waiting for it be checked out.','line_number':605,'multiline':False]['text':' After this point, parentSession is checked back in.','line_number':622,'multiline':False]['text':' Mark parentSession for reap. The session should now get reaped.','line_number':626,'multiline':False]['text':' hangAfterIncrementingNumWaitingToCheckOut ','line_number':641,'multiline':True]['text':' hangAfterIncrementingNumWaitingToCheckOut ','line_number':642,'multiline':True]['text':' Check out childSession2.','line_number':665,'multiline':False]['text':' After this wait, childSession2 is either checked out or has a thread waiting for it be','line_number':694,'multiline':False]['text':' checked out.','line_number':695,'multiline':False]['text':' Mark childSession2 for reap with kExclusive mode. The session should not get reaped since','line_number':698,'multiline':False]['text':' it is checked out or has a thread waiting for it be checked out.','line_number':699,'multiline':False]['text':' Mark parentSession for reap, and additionally mark Reap childSession0 and childSession1','line_number':715,'multiline':False]['text':' with mode kExclusive. parentSession should not get reaped because childSession2 is','line_number':716,'multiline':False]['text':' checked out or has a thread waiting for it be checked out. childSession0 and','line_number':717,'multiline':False]['text':' childSession1 should get reaped since they are not checked out or have any threads','line_number':718,'multiline':False]['text':' waiting for them be checked out.','line_number':719,'multiline':False]['text':' After this point, childSession2 is checked back in.','line_number':745,'multiline':False]['text':' Mark parentSession and childSession2 for reap with kNonExclusive mode. Both sessions','line_number':749,'multiline':False]['text':' should get reaped.','line_number':750,'multiline':False]['text':' hangAfterIncrementingNumWaitingToCheckOut ','line_number':765,'multiline':True]['text':' hangAfterIncrementingNumWaitingToCheckOut ','line_number':766,'multiline':True]['text':' Create the session so there is something to kill','line_number':787,'multiline':False]['text':' Make sure that regular session check-out will fail because the session is marked as','line_number':796,'multiline':False]['text':' killed','line_number':797,'multiline':False]['text':' Schedule a separate "regular operation" thread, which will block on checking-out the','line_number':800,'multiline':False]['text':' session, which we will use to confirm that session kill completion actually unblocks','line_number':801,'multiline':False]['text':' check-out','line_number':802,'multiline':False]['text':' Make sure that "for kill" session check-out succeeds','line_number':811,'multiline':False]['text':' Make sure that session check-out after kill succeeds again','line_number':819,'multiline':False]['text':' Make sure the "regular operation" eventually is able to proceed and use the just killed','line_number':826,'multiline':False]['text':' session','line_number':827,'multiline':False]['text':' Create the session so there is something to kill','line_number':839,'multiline':False]['text':' Make sure the owning operation context is interrupted','line_number':846,'multiline':False]['text':' Make sure that the checkOutForKill call will wait for the owning operation context to','line_number':850,'multiline':False]['text':' check the session back in','line_number':851,'multiline':False]['text':' Make sure that regular session check-out will fail because the session is marked as','line_number':857,'multiline':False]['text':' killed','line_number':858,'multiline':False]['text':' Schedule a separate "regular operation" thread, which will block on checking-out the','line_number':861,'multiline':False]['text':' session, which we will use to confirm that session kill completion actually unblocks','line_number':862,'multiline':False]['text':' check-out','line_number':863,'multiline':False]['text':' Make sure that "for kill" session check-out succeeds','line_number':872,'multiline':False]['text':' Make sure that session check-out after kill succeeds again','line_number':880,'multiline':False]['text':' Make sure the "regular operation" eventually is able to proceed and use the just killed','line_number':887,'multiline':False]['text':' session','line_number':888,'multiline':False]['text':' Create the session so there is something to kill','line_number':900,'multiline':False]['text':' Make sure the owning operation context is interrupted','line_number':907,'multiline':False]['text':' Make sure that the checkOutForKill call will wait for the owning operation context to','line_number':911,'multiline':False]['text':' check the session back in','line_number':912,'multiline':False]['text':' Make sure that regular session check-out will fail because the session is marked as','line_number':918,'multiline':False]['text':' killed','line_number':919,'multiline':False]['text':' Schedule a separate "regular operation" thread, which will block on checking-out the','line_number':922,'multiline':False]['text':' session, which we will use to confirm that session kill completion actually unblocks','line_number':923,'multiline':False]['text':' check-out','line_number':924,'multiline':False]['text':' Make sure that "for kill" session check-out succeeds','line_number':933,'multiline':False]['text':' Make sure that session check-out after kill succeeds again','line_number':941,'multiline':False]['text':' Make sure the "regular operation" eventually is able to proceed and use the just killed','line_number':948,'multiline':False]['text':' session','line_number':949,'multiline':False]['text':' Create the session so there is something to kill','line_number':961,'multiline':False]['text':' Make sure that the checkOutForKill call will wait for the owning operation context to','line_number':970,'multiline':False]['text':' check the session back in','line_number':971,'multiline':False]['text':' Make sure that regular session check-out will fail because the session is marked as','line_number':977,'multiline':False]['text':' killed','line_number':978,'multiline':False]['text':' Schedule a separate "regular operation" thread, which will block on checking-out the','line_number':981,'multiline':False]['text':' session, which we will use to confirm that session kill completion actually unblocks','line_number':982,'multiline':False]['text':' check-out','line_number':983,'multiline':False]['text':' Make sure that "for kill" session check-out succeeds','line_number':992,'multiline':False]['text':' Make sure that session check-out after kill succeeds again','line_number':1000,'multiline':False]['text':' Make sure the "regular operation" eventually is able to proceed and use the just killed','line_number':1007,'multiline':False]['text':' session','line_number':1008,'multiline':False]['text':' Create the session so there is something to kill','line_number':1020,'multiline':False]['text':' Make sure the owning operation context is interrupted','line_number':1027,'multiline':False]['text':' Make sure that the checkOutForKill call will wait for the owning operation context to','line_number':1031,'multiline':False]['text':' check the session back in','line_number':1032,'multiline':False]['text':' Make sure that regular session check-out will fail because the session is marked as','line_number':1039,'multiline':False]['text':' killed','line_number':1040,'multiline':False]['text':' Check that checking out the parent session will fail because it was marked as killed.','line_number':1043,'multiline':False]['text':' Schedule a separate "regular operation" thread, which will block on checking-out the','line_number':1046,'multiline':False]['text':' session, which we will use to confirm that session kill completion actually unblocks','line_number':1047,'multiline':False]['text':' check-out','line_number':1048,'multiline':False]['text':' Make sure that "for kill" session check-out succeeds','line_number':1067,'multiline':False]['text':' Make sure that session check-out after kill succeeds again','line_number':1075,'multiline':False]['text':' Make sure the "regular operations" eventually proceed and use the just killed session','line_number':1079,'multiline':False]['text':' Create the session so there is something to kill','line_number':1092,'multiline':False]['text':' Make sure that the checkOutForKill call will wait for the owning operation context to','line_number':1101,'multiline':False]['text':' check the session back in','line_number':1102,'multiline':False]['text':' Make sure that regular session check-out will fail because the session is marked as','line_number':1109,'multiline':False]['text':' killed','line_number':1110,'multiline':False]['text':' Check that checking out the parent session will fail because it was marked as killed.','line_number':1113,'multiline':False]['text':' Schedule a separate "regular operation" thread, which will block on checking-out the','line_number':1116,'multiline':False]['text':' session, which we will use to confirm that session kill completion actually unblocks','line_number':1117,'multiline':False]['text':' check-out','line_number':1118,'multiline':False]['text':' Make sure that "for kill" session check-out succeeds','line_number':1137,'multiline':False]['text':' Make sure that session check-out after kill succeeds again','line_number':1145,'multiline':False]['text':' Make sure the "regular operations" eventually proceed and use the just killed session','line_number':1149,'multiline':False]['text':' Make sure the owning operation context is interrupted.','line_number':1170,'multiline':False]['text':' Make sure that the checkOutForKill call will wait for the owning operation context to','line_number':1174,'multiline':False]['text':' check the session back in','line_number':1175,'multiline':False]['text':' Use up the killToken.','line_number':1182,'multiline':False]['text':' Create a child session, which will also make the parent session.','line_number':1195,'multiline':False]['text':' Kill the parent.','line_number':1198,'multiline':False]['text':' Verify we can't check out either child or parent now.','line_number':1201,'multiline':False]['text':' We can still kill the child.','line_number':1205,'multiline':False]['text':' Verify we can't check back out either session until all kill tokens have been used.','line_number':1208,'multiline':False]['text':' Create a child session, which will also make the parent session.','line_number':1238,'multiline':False]['text':' Kill the child.','line_number':1241,'multiline':False]['text':' Verify we can't check out either child or parent now.','line_number':1244,'multiline':False]['text':' We can still kill the parent.','line_number':1248,'multiline':False]['text':' Verify we can't check back out either session until all kill tokens have been used.','line_number':1251,'multiline':False]['text':' Create a child session, which will also make the parent session.','line_number':1281,'multiline':False]['text':' Kill the parent and child in interleaved orders to verify the kill order doesn't matter.','line_number':1284,'multiline':False]['text':' Verify we can't check back out either session until all kill tokens have been used. Use','line_number':1294,'multiline':False]['text':' an arbitrary order to verify the return order doesn't matter.','line_number':1295,'multiline':False]['text':' Create the session so there is something to kill','line_number':1353,'multiline':False]['text':' Make sure that regular session check-out will fail because there are two killers on the','line_number':1363,'multiline':False]['text':' session','line_number':1364,'multiline':False]['text':' Finish the first killer of the session','line_number':1369,'multiline':False]['text':' Killing a session while checked out for kill should not affect the killers','line_number':1376,'multiline':False]['text':' Regular session check-out should still fail because there are now still two killers on','line_number':1380,'multiline':False]['text':' the session','line_number':1381,'multiline':False]['text':' Create sessions in the catalog.','line_number':1512,'multiline':False]['text':' Make sure all spawned threads have created the session','line_number':1548,'multiline':False]['text':' Kill the first and the third sessions','line_number':1551,'multiline':False]['text':' Kill the second session','line_number':1570,'multiline':False]['text':' Test that session kill will block normal sesion chechout and will be signaled correctly.','line_number':1589,'multiline':False]['text':' Even if the implementaion has a bug, the test may not always fail depending on thread','line_number':1590,'multiline':False]['text':' scheduling, however, this test case still gives us a good coverage.','line_number':1591,'multiline':False]['text':' This variable is protected by the session check-out.','line_number':1601,'multiline':False]['text':' Check out the session to block both normal check-out and checkOutForKill.','line_number':1604,'multiline':False]['text':' Normal check out should start after kill.','line_number':1607,'multiline':False]['text':' Kill will short-cut the queue and be the next one to check out.','line_number':1617,'multiline':False]['text':' Kill the session','line_number':1623,'multiline':False]['text':' The main thread won't check in the session until it's killed.','line_number':1637,'multiline':False]['text':' namespace','line_number':1659,'multiline':False]['text':' namespace mongo','line_number':1660,'multiline':False]