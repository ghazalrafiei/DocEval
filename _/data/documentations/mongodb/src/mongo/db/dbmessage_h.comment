['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' db response format

   Query or GetMore: // see struct QueryResult
      int resultFlags;
      int64 cursorID;
      int startingFrom;
      int nReturned;
      list of marshalled JSObjects;
','line_number':53,'multiline':True]['text':' db request message format

   unsigned opid;         // arbitary; will be echoed back
   byte operation;
   int options;

   then for:

   dbInsert:
      std::string collection;
      a series of JSObjects
   dbDelete:
      std::string collection;
      int flags=0; // 1=DeleteSingle
      JSObject query;
   dbUpdate:
      std::string collection;
      int flags; // 1=upsert
      JSObject query;
      JSObject objectToUpdate;
        objectToUpdate may include { $inc: <field> } or { $set: ... }, see struct Mod.
   dbQuery:
      std::string collection;
      int nToSkip;
      int nToReturn; // how many you want back as the beginning of the cursor data (0=no limit)
                     // greater than zero is simply a hint on how many objects to send back per
                     // "cursor batch".
                     // a negative number indicates a hard limit.
      JSObject query;
      [JSObject fieldsToReturn]
   dbGetMore:
      std::string collection; // redundant, might use for security.
      int nToReturn;
      int64 cursorID;
   dbKillCursors=2007:
      int n;
      int64 cursorIDs[n];

   Note that on Update, there is only one object, which is different
   from insert where you can pass a list of objects to insert in the db.
   Note that the update field layout is very similar layout to Query.
','line_number':63,'multiline':True]['text':'*
 * See http://dochub.mongodb.org/core/mongowireprotocol.
 ','line_number':108,'multiline':True]['text':' namespace QueryResult','line_number':218,'multiline':False]['text':'*
 * For the database/server protocol, these objects and functions encapsulate the various messages
 * transmitted over the connection.
 *
 * See http://dochub.mongodb.org/core/mongowireprotocol.
 ','line_number':220,'multiline':True]['text':' Assume sizeof(int) == 4 bytes','line_number':227,'multiline':False]['text':'*
     * Note: DbMessage constructor reads the first 4 bytes and stores it in reserved
     ','line_number':231,'multiline':True]['text':'*
     * Indicates whether this message is expected to have a ns.
     ','line_number':236,'multiline':True]['text':'*
     * Returns the 32 bit field before the ns.
     * track all bit usage here as its cross op
     * 0: InsertOption_ContinueOnError
     * 1: fromWriteback
     ','line_number':243,'multiline':True]['text':'*
     * Used by insert and update msgs
     ','line_number':259,'multiline':True]['text':' Check if we have enough data to read','line_number':283,'multiline':False]['text':' Read some type without advancing our position','line_number':287,'multiline':False]['text':' Read some type, and advance our position','line_number':291,'multiline':False]['text':' flags or zero depending on packet, starts the packet','line_number':296,'multiline':False]['text':' start of namespace string, +4 from message start','line_number':298,'multiline':False]['text':' current position reading packet','line_number':299,'multiline':False]['text':' end of packet','line_number':300,'multiline':False]['text':'*
 * The query field 'options' can have these bits set:
 ','line_number':307,'multiline':True]['text':'*
     * Tailable means cursor is not closed when the last data is retrieved. Rather, the cursor
     * marks the final object's position. You can resume using the cursor later, from where it was
     * located, if more data were received. Set on dbQuery and dbGetMore.
     *
     *  like any "latent cursor", the cursor may become invalid at some point -- for example if that
     *  final object it references were deleted.
     ','line_number':311,'multiline':True]['text':'*
     * Allow query of replica secondary. Normally these return an error except for namespace
     * "local".
     ','line_number':321,'multiline':True]['text':'*
     * In previous versions of the server, clients were required to set this option in order to
     * enable an optimized oplog scan. As of 4.4, the server will apply the optimization for
     * eligible queries regardless of whether this flag is set.
     *
     * This bit is reserved for compatibility with old clients, but it should not be set by modern
     * clients.
     *
     * New server code should not use this flag.
     ','line_number':327,'multiline':True]['text':'*
     * The server normally times out idle cursors after an inactivity period to prevent excess
     * memory uses. Set this option to prevent that.
     ','line_number':339,'multiline':True]['text':'*
     * Use with QueryOption_CursorTailable.  If we are at the end of the data, block for a while
     * rather than returning no data. After a timeout period, we do return as normal.
     ','line_number':345,'multiline':True]['text':'*
     * Stream the data down full blast in multiple "more" packages, on the assumption that the
     * client will fully read all data queried.  Faster when you are pulling a lot of data and know
     * you want to pull it all down.  Note: it is not allowed to not read all the data unless you
     * close the connection.
     *
     * Use the query( std::function<void(const BSONObj&)> f, ... ) version of the connection's
     * query() method, and it will take care of all the details for you.
     ','line_number':351,'multiline':True]['text':'*
     * When sharded, this means its ok to return partial results. Usually we will fail a query if
     * all required shards aren't up. If this is set, it'll be a partial result set.
     ','line_number':362,'multiline':True]['text':' DBClientCursor reserves flag 1 << 30 to force the use of OP_QUERY.','line_number':368,'multiline':False]['text':'*
 * A request to run a query, received from the database.
 ','line_number':375,'multiline':True]['text':'*
     * Parses the message into the above fields.
     * Warning: constructor mutates DbMessage.
     ','line_number':387,'multiline':True]['text':'*
     * A non-mutating constructor from the whole message.
     ','line_number':402,'multiline':True]['text':'*
     * With muli-insert keep processing inserts if one fails.
     ','line_number':426,'multiline':True]['text':'*
 * Builds a legacy OP_INSERT message.
 *
 * The OP_INSERT command is no longer supported, so new callers of this function should not be
 * added! This is currently retained for the limited purpose of unit testing.
 ','line_number':432,'multiline':True]['text':'*
 * A response to a DbMessage.
 *
 * Order of fields makes DbResponse{funcReturningMessage()} valid.
 ','line_number':443,'multiline':True]['text':' If empty, nothing will be returned to the client.','line_number':449,'multiline':False]['text':' For exhaust commands, indicates whether the command should be run again.','line_number':452,'multiline':False]['text':' The next invocation for an exhaust command. If this is boost::none, the previous invocation','line_number':455,'multiline':False]['text':' should be reused for the next invocation.','line_number':456,'multiline':False]['text':'*
 * Helper to build an error DbResponse for OP_QUERY and OP_GET_MORE.
 ','line_number':460,'multiline':True]['text':' namespace mongo','line_number':464,'multiline':False]