['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Tracks the number of times a legacy unacknowledged write failed due to','line_number':198,'multiline':False]['text':' not primary error resulted in network disconnection.','line_number':199,'multiline':False]['text':' Tracks the number of times an unacknowledged write failed due to not primary error','line_number':202,'multiline':False]['text':' resulted in network disconnection.','line_number':203,'multiline':False]['text':'
 * Allows for the very complex handleRequest function to be decomposed into parts.
 * It also provides the infrastructure to futurize the process of executing commands.
 ','line_number':217,'multiline':True]['text':' Maintains the context (e.g., opCtx and replyBuilder) required for command execution.','line_number':222,'multiline':False]['text':'*
         * Note that DBDirectClient is treated as an internal client in relation to letting
         * internal errors escape.
         ','line_number':263,'multiline':True]['text':' We could have thrown an exception after setting fields in the builder,','line_number':311,'multiline':False]['text':' so we need to reset it to a clean state just to be sure.','line_number':312,'multiline':False]['text':'*
 * Given the specified command, returns an effective read concern which should be used or an error
 * if the read concern is not valid for the command.
 * Note that the validation performed is not necessarily exhaustive.
 ','line_number':318,'multiline':True]['text':' Represents whether the client explicitly defines read concern within the cmdObj or not.','line_number':335,'multiline':False]['text':' It will be set to false also if the client specifies empty read concern {readConcern: {}}.','line_number':336,'multiline':False]['text':' Update the readConcernSupport, since the default RC was applied.','line_number':349,'multiline':False]['text':' ReadConcern should always be explicitly specified by operations received from','line_number':360,'multiline':False]['text':' internal clients (ie. from a mongos or mongod), even if it is empty (ie.','line_number':361,'multiline':False]['text':' readConcern: {}, meaning to use the implicit server defaults).','line_number':362,'multiline':False]['text':' TODO: Disabled until after SERVER-44539, to avoid log spam.','line_number':371,'multiline':False]['text':' LOGV2(21954, "Missing readConcern on {command}", "Missing readConcern "','line_number':372,'multiline':False]['text':' "for command", "command"_attr = invocation->definition()->getName());','line_number':373,'multiline':False]['text':' A member in a regular replica set.  Since these servers receive client queries, in','line_number':376,'multiline':False]['text':' this context empty RC (ie. readConcern: {}) means the same as if absent/unspecified,','line_number':377,'multiline':False]['text':' which is to apply the CWRWC defaults if present.  This means we just test isEmpty(),','line_number':378,'multiline':False]['text':' since this covers both isSpecified() && !isSpecified()','line_number':379,'multiline':False]['text':' Apply the implicit default read concern even if the command does not support a cluster wide','line_number':396,'multiline':False]['text':' read concern.','line_number':397,'multiline':False]['text':' It's fine for clients to provide any provenance value to mongod. But if they haven't, then an','line_number':406,'multiline':False]['text':' appropriate provenance needs to be determined.','line_number':407,'multiline':False]['text':' If we are starting a transaction, we need to check whether the read concern is','line_number':419,'multiline':False]['text':' appropriate for running a transaction.','line_number':420,'multiline':False]['text':' Otherwise, if there is a read concern present - either user-specified or from the default -','line_number':436,'multiline':False]['text':' then check whether the command supports it. If there is no explicit read concern level, then','line_number':437,'multiline':False]['text':' it is implicitly "local". There is no need to check whether this is supported, because all','line_number':438,'multiline':False]['text':' commands either support "local" or upconvert the absent readConcern to a stronger level that','line_number':439,'multiline':False]['text':' they do support; for instance, $changeStream upconverts to RC level "majority".','line_number':440,'multiline':False]['text':'','line_number':441,'multiline':False]['text':' Individual transaction statements are checked later on, after we've unstashed the','line_number':442,'multiline':False]['text':' transaction resources.','line_number':443,'multiline':False]['text':' If this command invocation asked for 'majority' read concern, supports blocking majority','line_number':452,'multiline':False]['text':' reads, and storage engine support for majority reads is disabled, then we set the majority','line_number':453,'multiline':False]['text':' read mechanism appropriately i.e. we utilize "speculative" read behavior.','line_number':454,'multiline':False]['text':'*
 * For replica set members it returns the last known op time from opCtx. Otherwise will return
 * uninitialized cluster time.
 ','line_number':465,'multiline':True]['text':'*
 * Returns the proper operationTime for a command. To construct the operationTime for replica set
 * members, it uses the last optime in the oplog for writes, last committed optime for majority
 * reads, and the last applied optime for every other read. An uninitialized cluster time is
 * returned for non replica set members.
 *
 * The latest in-memory clusterTime is returned if the start operationTime is uninitialized.
 ','line_number':481,'multiline':True]['text':' If the last operationTime has not changed, consider this command a read, and, for replica set','line_number':497,'multiline':False]['text':' members, construct the operationTime with the proper optime for its read concern level.','line_number':498,'multiline':False]['text':' Note: ReadConcernArgs::getLevel returns kLocal if none was set.','line_number':502,'multiline':False]['text':'*
 * Computes the proper $clusterTime and operationTime values to include in the command response and
 * appends them to it. $clusterTime is added as metadata and operationTime as a command body field.
 *
 * The command body BSONObjBuilder is either the builder for the command body itself, or a builder
 * for extra fields to be added to the reply when generating an error response.
 ','line_number':514,'multiline':True]['text':' The appended operationTime must always be <= the appended $clusterTime, so first compute the','line_number':530,'multiline':False]['text':' operationTime.','line_number':531,'multiline':False]['text':' Ensure that either both operationTime and $clusterTime are output, or neither.','line_number':536,'multiline':False]['text':' isMongos ','line_number':561,'multiline':True]['text':' NotPrimary errors always include a topologyVersion, since we increment topologyVersion on','line_number':574,'multiline':False]['text':' stepdown. ShutdownErrors only include a topologyVersion if the server is in quiesce mode,','line_number':575,'multiline':False]['text':' since we only increment the topologyVersion at shutdown and alert waiting isMaster/hello','line_number':576,'multiline':False]['text':' commands if the server enters quiesce mode.','line_number':577,'multiline':False]['text':' (Ignore FCV check): This feature doesn't have any upgrade/downgrade concerns.','line_number':595,'multiline':False]['text':' Returns a future that executes a command after stripping metadata, performing authorization','line_number':656,'multiline':False]['text':' checks, handling audit impersonation, and (potentially) setting maintenance mode. The future','line_number':657,'multiline':False]['text':' also checks that the command is permissible to run on the node given its current replication','line_number':658,'multiline':False]['text':' state. All the logic here is independent of any particular command; any functionality','line_number':659,'multiline':False]['text':' relevant to a specific command should be confined to its run() method.','line_number':660,'multiline':False]['text':' Ensure the lifetime of `_scopedMetrics` ends here.','line_number':667,'multiline':False]['text':' Do any initialization of the lock state required for a transaction.','line_number':758,'multiline':False]['text':' Clear any lock state which may have changed after the locker update.','line_number':763,'multiline':False]['text':' Any logic, such as authorization and auditing, that must precede execution of the command.','line_number':771,'multiline':False]['text':' Returns the future chain that executes the parsed command against the database.','line_number':774,'multiline':False]['text':' Any error-handling logic that must be performed if the command initiation/execution fails.','line_number':777,'multiline':False]['text':' The following allows `_initiateCommand`, `_commandExec`, and `_handleFailure` to share','line_number':786,'multiline':False]['text':' execution state without concerning the lifetime of these variables.','line_number':787,'multiline':False]['text':' Keep a static variable to track the last time a warning about direct shard connections was','line_number':800,'multiline':False]['text':' logged.','line_number':801,'multiline':False]['text':' Failure to run a command is either indicated by throwing an exception or','line_number':818,'multiline':False]['text':' adding a non-okay field to the replyBuilder.','line_number':819,'multiline':False]['text':' Reference to attributes defined in `ExecCommandDatabase` (e.g., sessionOptions).','line_number':837,'multiline':False]['text':' Any code that must run before command execution (e.g., reserving bytes for reply builder).','line_number':840,'multiline':False]['text':' Runs the command possibly waiting for write concern.','line_number':843,'multiline':False]['text':' Runs the command without waiting for write concern.','line_number':846,'multiline':False]['text':' Any code that must run after command execution.','line_number':849,'multiline':False]['text':' If the command resolved successfully.','line_number':856,'multiline':False]['text':' Allows changing the write concern while running the command and resetting on destruction.','line_number':882,'multiline':False]['text':' Simplifies the interface for invoking commands and allows asynchronous execution of command','line_number':887,'multiline':False]['text':' invocations.','line_number':888,'multiline':False]['text':' Only cleanup if we didn't yield the session.','line_number':906,'multiline':False]['text':' TODO SERVER-53761: find out if we can do this more asynchronously. The client','line_number':931,'multiline':False]['text':' Strand is locked to current thread in SessionWorkflow::Impl::startNewLoop().','line_number':932,'multiline':False]['text':' TODO SERVER-53761: find out if we can do this more asynchronously.','line_number':951,'multiline':False]['text':' If the command didn't yield its session, abort transaction and clean up','line_number':960,'multiline':False]['text':' transaction resources before blocking the command to allow the stable timestamp','line_number':961,'multiline':False]['text':' on the node to advance.','line_number':962,'multiline':False]['text':' No code paths that can throw this error should yield their session but uassert','line_number':973,'multiline':False]['text':' instead of invariant in case that assumption is ever broken since this only needs','line_number':974,'multiline':False]['text':' to be operation fatal.','line_number':975,'multiline':False]['text':' It is illegal for this to throw so we catch and log this here for diagnosability.','line_number':1023,'multiline':False]['text':' This constructor will check out the session. It handles the appropriate state management','line_number':1039,'multiline':False]['text':' for both multi-statement transactions and retryable writes. Currently, only requests with','line_number':1040,'multiline':False]['text':' a transaction number will check out the session.','line_number':1041,'multiline':False]['text':' Used for waiting for an in-progress transaction to transition out of the conflicting state.','line_number':1048,'multiline':False]['text':' Check the session back in and wait for the conflict to resolve.','line_number':1050,'multiline':False]['text':' Wait for any commit or abort oplog entry to be visible in the oplog. This will prevent a','line_number':1053,'multiline':False]['text':' new transaction from missing the transaction table update for the previous commit or','line_number':1054,'multiline':False]['text':' abort due to an oplog hole.','line_number':1055,'multiline':False]['text':' Check out the session again.','line_number':1058,'multiline':False]['text':' This loop allows new transactions on a session to block behind a previous prepared','line_number':1074,'multiline':False]['text':' transaction on that session.','line_number':1075,'multiline':False]['text':' Create coordinator if needed. If "startTransaction" is present, it must be true.','line_number':1106,'multiline':False]['text':' If this shard has been selected as the coordinator, set up the coordinator state','line_number':1108,'multiline':False]['text':' to be ready to receive votes.','line_number':1109,'multiline':False]['text':' Release the transaction lock resources and abort storage transaction for unprepared','line_number':1116,'multiline':False]['text':' transactions on failure to unstash the transaction resources to opCtx. We don't want to','line_number':1117,'multiline':False]['text':' have this error guard for beginOrContinue as it can abort the transaction for any','line_number':1118,'multiline':False]['text':' accidental invalid statements in the transaction.','line_number':1119,'multiline':False]['text':'','line_number':1120,'multiline':False]['text':' Unstashing resources can't yield the session so it's safe to capture a reference to the','line_number':1121,'multiline':False]['text':' TransactionParticipant in this scope guard.','line_number':1122,'multiline':False]['text':' Unstash success.','line_number':1131,'multiline':False]['text':' Record readConcern usages for commands run inside transactions after unstashing the','line_number':1141,'multiline':False]['text':' transaction resources.','line_number':1142,'multiline':False]['text':' isTransaction ','line_number':1145,'multiline':True]['text':' For replica sets, we do not receive the readConcernArgs of our parent transaction','line_number':1148,'multiline':False]['text':' statements until we unstash the transaction resources. The below check is necessary to','line_number':1149,'multiline':False]['text':' ensure commands, including those occurring after the first statement in their respective','line_number':1150,'multiline':False]['text':' transactions, are checked for readConcern support. Presently, only `create` and','line_number':1151,'multiline':False]['text':' `createIndexes` do not support readConcern inside transactions.','line_number':1152,'multiline':False]['text':' Note: _shardsvrCreateCollection is used to run the 'create' command on the primary in','line_number':1153,'multiline':False]['text':' case of sharded cluster','line_number':1154,'multiline':False]['text':' TODO(SERVER-46971): Consider how to extend this check to other commands.','line_number':1155,'multiline':False]['text':' Exceptions are used to resolve views in a sharded cluster, so they should be handled','line_number':1174,'multiline':False]['text':' specially to avoid unnecessary aborts.','line_number':1175,'multiline':False]['text':' If "startTransaction" is present, it must be true.','line_number':1177,'multiline':False]['text':' If the first command a shard receives in a transactions fails with this code, the','line_number':1179,'multiline':False]['text':' shard may not be included in the final participant list if the router's retry after','line_number':1180,'multiline':False]['text':' resolving the view does not re-target it, which is possible if the underlying','line_number':1181,'multiline':False]['text':' collection is sharded. The shard's transaction should be preemptively aborted to','line_number':1182,'multiline':False]['text':' avoid leaving it orphaned in this case, which is fine even if it is re-targeted','line_number':1183,'multiline':False]['text':' because the retry will include "startTransaction" again and "restart" a transaction','line_number':1184,'multiline':False]['text':' at the active txnNumber.','line_number':1185,'multiline':False]['text':' No code paths that can throw this error should yield their session but uassert','line_number':1192,'multiline':False]['text':' instead of invariant in case that assumption is ever broken since this only needs to','line_number':1193,'multiline':False]['text':' be operation fatal.','line_number':1194,'multiline':False]['text':' If this shard has completed an earlier statement for this transaction, it must already be','line_number':1201,'multiline':False]['text':' in the transaction's participant list, so it is guaranteed to learn its outcome.','line_number':1202,'multiline':False]['text':' If ok is present, use its truthiness.','line_number':1211,'multiline':False]['text':' If the command didn't yield its session, stash or commit the transaction when the command','line_number':1218,'multiline':False]['text':' succeeds.','line_number':1219,'multiline':False]['text':' SERVER-22100: In Windows DEBUG builds, the CRT heap debugging overhead, in conjunction with the','line_number':1238,'multiline':False]['text':' additional memory pressure introduced by reply buffer pre-allocation, causes the concurrency','line_number':1239,'multiline':False]['text':' suite to run extremely slowly. As a workaround we do not pre-allocate in Windows DEBUG builds.','line_number':1240,'multiline':False]['text':' Record readConcern usages for commands run outside of transactions, excluding DBDirectClient.','line_number':1247,'multiline':False]['text':' For commands inside a transaction, they inherit the readConcern from the transaction. So we','line_number':1248,'multiline':False]['text':' will record their readConcern usages after we have unstashed the transaction resources.','line_number':1249,'multiline':False]['text':' isTransaction ','line_number':1253,'multiline':True]['text':' If the state is not primary or secondary, we skip collecting metrics. We also use the UNSAFE','line_number':1257,'multiline':False]['text':' method in the replication coordinator, as collecting metrics around read preference usage is','line_number':1258,'multiline':False]['text':' best-effort and should not contend for the replication coordinator mutex.','line_number':1259,'multiline':False]['text':' Skip incrementing metrics when the command is not a read operation, as we expect to all','line_number':1262,'multiline':False]['text':' commands sent via the driver to inherit the read preference, even if we don't use it.','line_number':1263,'multiline':False]['text':' This fail point blocks all commands which are running on the specified namespace, or which','line_number':1280,'multiline':False]['text':' are present in the given list of commands, or which match a given comment. If no namespace,','line_number':1281,'multiline':False]['text':' command list, or comment are provided, then the failpoint will block all commands.','line_number':1282,'multiline':False]['text':' If 'ns', 'commands', or 'comment' is not set, block for all the namespaces, commands,','line_number':1295,'multiline':False]['text':' or comments respectively.','line_number':1296,'multiline':False]['text':' Wait for data to satisfy the read concern level, if necessary.','line_number':1312,'multiline':False]['text':' Propagate error labels specified in the failCommand failpoint to the','line_number':1382,'multiline':False]['text':' OperationContext decoration to override getErrorLabels() behaviors.','line_number':1383,'multiline':False]['text':' WriteConcern will be set up during command processing, it must not be specified on','line_number':1414,'multiline':False]['text':' the command body.','line_number':1415,'multiline':False]['text':' WriteConcern should always be explicitly specified by operations received on shard','line_number':1418,'multiline':False]['text':' and config servers, even if it is empty (ie. writeConcern: {}).  In this context','line_number':1419,'multiline':False]['text':' (shard/config servers) an empty WC indicates the operation should use the implicit','line_number':1420,'multiline':False]['text':' server defaults.  So, warn if the operation has not specified writeConcern and is on','line_number':1421,'multiline':False]['text':' a shard/config server.','line_number':1422,'multiline':False]['text':' WriteConcern should always be explicitly specified by operations received','line_number':1426,'multiline':False]['text':' from internal clients (ie. from a mongos or mongod), even if it is empty','line_number':1427,'multiline':False]['text':' (ie. writeConcern: {}, which is equivalent to { w: 1, wtimeout: 0 }).','line_number':1428,'multiline':False]['text':' TODO: Disabled until after SERVER-44539, to avoid log spam.','line_number':1437,'multiline':False]['text':' LOGV2(21959, "Missing writeConcern on {command}", "Missing "','line_number':1438,'multiline':False]['text':' "writeConcern on command", "command"_attr = command->getName());','line_number':1439,'multiline':False]['text':' Ensure that the WC being set on the opCtx has provenance.','line_number':1450,'multiline':False]['text':' TODO SERVER-69061 rename `failWithErrorCodeInRunCommand` and remove the following comment.','line_number':1460,'multiline':False]['text':' Despite the name, this failpoint only affects commands with write concerns.','line_number':1461,'multiline':False]['text':' Do no-op write before returning NoSuchTransaction if command has writeConcern.','line_number':1480,'multiline':False]['text':' With the exception of getMores inheriting the WriteConcern from the originating command,','line_number':1494,'multiline':False]['text':' nothing in run() should change the writeConcern.','line_number':1495,'multiline':False]['text':' Record the time here to ensure that maxTimeMS, if set by the command, considers the time','line_number':1517,'multiline':False]['text':' spent before the deadline is set on `opCtx`.','line_number':1518,'multiline':False]['text':' Preload generic ClientMetadata ahead of our first hello request. After the first','line_number':1532,'multiline':False]['text':' request, metaElement should always be empty.','line_number':1533,'multiline':False]['text':' Start authz contract tracking before we evaluate failpoints','line_number':1556,'multiline':False]['text':' Connections from mongod or mongos clients (i.e. initial sync, mirrored reads, etc.) should','line_number':1568,'multiline':False]['text':' not contribute to resource consumption metrics.','line_number':1569,'multiline':False]['text':' We disable not-primary-error tracker for help requests due to SERVER-11492, because','line_number':1616,'multiline':False]['text':' config servers use help requests to determine which commands are database writes, and so','line_number':1617,'multiline':False]['text':' must be forwarded to all config servers.','line_number':1618,'multiline':False]['text':' Restart contract tracking afer the impersonation guard checks for impersonate if using','line_number':1627,'multiline':False]['text':' impersonation.','line_number':1628,'multiline':False]['text':' Kill this operation on step down even if it hasn't taken write locks yet, because it','line_number':1639,'multiline':False]['text':' could conflict with transactions from a new primary.','line_number':1640,'multiline':False]['text':' Check ticket SERVER-21432, slaveOk commands are allowed in drain mode','line_number':1675,'multiline':False]['text':' We acquire the RSTL which helps us here in two ways:','line_number':1681,'multiline':False]['text':' 1) It forces us to wait out any outstanding stepdown attempts.','line_number':1682,'multiline':False]['text':' 2) It guarantees that future RSTL holders will see the','line_number':1683,'multiline':False]['text':' 'setAlwaysInterruptAtStepDownOrUp_UNSAFE' flag we set above.','line_number':1684,'multiline':False]['text':' Parse the 'maxTimeMS' command option, and use it to set a deadline for the operation on','line_number':1711,'multiline':False]['text':' the OperationContext. The 'maxTimeMS' option unfortunately has a different meaning for a','line_number':1712,'multiline':False]['text':' getMore command, where it is used to communicate the maximum time to wait for new inserts','line_number':1713,'multiline':False]['text':' on tailable cursors, not as a deadline for the operation.','line_number':1714,'multiline':False]['text':'','line_number':1715,'multiline':False]['text':' TODO SERVER-34277 Remove the special handling for maxTimeMS for getMores. This will','line_number':1716,'multiline':False]['text':' require introducing a new 'max await time' parameter for getMore, and eventually banning','line_number':1717,'multiline':False]['text':' maxTimeMS altogether on a getMore command.','line_number':1718,'multiline':False]['text':' The "hello" command should not inherit the deadline from the user op it is operating','line_number':1730,'multiline':False]['text':' as a part of as that can interfere with replica set monitoring and host selection.','line_number':1731,'multiline':False]['text':' If the operation is being executed as part of DBDirectClient this means we must use the','line_number':1748,'multiline':False]['text':' original read concern.','line_number':1749,'multiline':False]['text':' Ensure that the RC being set on the opCtx has provenance.','line_number':1756,'multiline':False]['text':' We must obtain the client lock to set the ReadConcernArgs on the operation context as','line_number':1767,'multiline':False]['text':' it may be concurrently read by CurrentOp.','line_number':1768,'multiline':False]['text':' Remember whether or not this operation is starting a transaction, in case something later','line_number':1777,'multiline':False]['text':' in the execution needs to adjust its behavior based on this.','line_number':1778,'multiline':False]['text':' Once API params and txn state are set on opCtx, enforce the "requireApiVersion" setting.','line_number':1782,'multiline':False]['text':' Check that the client has the directShardOperations role if this is a direct operation to a','line_number':1785,'multiline':False]['text':' shard.','line_number':1786,'multiline':False]['text':' TODO (SERVER-77073): Remove this failpoint.','line_number':1810,'multiline':False]['text':' If a timeseries collection is sharded, only the buckets collection would be sharded.','line_number':1852,'multiline':False]['text':' We expect all versioned commands to be sent over 'system.buckets' namespace. But it','line_number':1853,'multiline':False]['text':' is possible that a stale mongos may send the request over a view namespace. In this','line_number':1854,'multiline':False]['text':' case, we initialize the 'OperationShardingState' with buckets namespace.','line_number':1855,'multiline':False]['text':' TODO: SERVER-80719 revisit this.','line_number':1856,'multiline':False]['text':' Hold reference to the catalog for collection lookup without locks to be safe.','line_number':1859,'multiline':False]['text':' This may trigger the maxTimeAlwaysTimeOut failpoint.','line_number':1872,'multiline':False]['text':' We still proceed if the primary stepped down, but accept other kinds of interruptions. We','line_number':1875,'multiline':False]['text':' defer to individual commands to allow themselves to be interruptible by stepdowns, since','line_number':1876,'multiline':False]['text':' commands like 'voteRequest' should conversely continue executing.','line_number':1877,'multiline':False]['text':' getMore operations inherit a WriteConcern from their originating cursor. For example,','line_number':1915,'multiline':False]['text':' if the originating command was an aggregate with a $out and batchSize: 0. Note that','line_number':1916,'multiline':False]['text':' if the command only performed reads then we will not need to wait at all.','line_number':1917,'multiline':False]['text':' The shard is recovered and the router is staler than the shard, so we cannot','line_number':1938,'multiline':False]['text':' retry locally','line_number':1939,'multiline':False]['text':' Shard is recovered, but the router didn't sent a shard version, therefore','line_number':1967,'multiline':False]['text':' we just need to tell the router how much it needs to advance to','line_number':1968,'multiline':False]['text':' (getVersionWanted).','line_number':1969,'multiline':False]['text':' Shard is recovered and the router is staler than the shard','line_number':1976,'multiline':False]['text':' Can not rerun the command when executing a GetMore command as the cursor','line_number':1989,'multiline':False]['text':' is already lost.','line_number':1990,'multiline':False]['text':' Can not rerun the command when executing a GetMore command as the cursor is','line_number':2018,'multiline':False]['text':' already lost.','line_number':2019,'multiline':False]['text':' Absorb the exception as the command execution has already been skipped.','line_number':2034,'multiline':False]['text':' Append the error labels for transient transaction errors.','line_number':2045,'multiline':False]['text':' The read concern may not have yet been placed on the operation context, so attempt to parse','line_number':2066,'multiline':False]['text':' it here, so if it is valid it can be used to compute the proper operationTime.','line_number':2067,'multiline':False]['text':'startTransaction','line_number':2073,'multiline':True]['text':' We must obtain the client lock to set the ReadConcernArgs on the operation context as','line_number':2076,'multiline':False]['text':' it may be concurrently read by CurrentOp.','line_number':2077,'multiline':False]['text':' Rethrow the exception to the top to signal that the client connection should be closed.','line_number':2097,'multiline':False]['text':'*
 * Fills out CurOp / OpDebug with basic command info.
 ','line_number':2102,'multiline':True]['text':' We construct a legacy $cmd namespace so we can fill in curOp using','line_number':2109,'multiline':False]['text':' the existing logic that existed for OP_QUERY commands','line_number':2110,'multiline':False]['text':' Need to set request as `makeCommandResponse` expects an empty request on failure.','line_number':2130,'multiline':False]['text':' Otherwise, reply with the parse error. This is useful for cases where parsing fails due to','line_number':2133,'multiline':False]['text':' user-supplied input, such as the document too deep error. Since we failed during parsing, we','line_number':2134,'multiline':False]['text':' can't log anything about the command.','line_number':2135,'multiline':False]['text':' Prepare environment for command execution (e.g., find command object in registry)','line_number':2146,'multiline':False]['text':' In the absence of a Command object, no redaction is possible. Therefore to avoid','line_number':2151,'multiline':False]['text':' displaying potentially sensitive information in the logs, we restrict the log','line_number':2152,'multiline':False]['text':' message to the name of the unrecognized command. However, the complete command','line_number':2153,'multiline':False]['text':' object will still be echoed to the client.','line_number':2154,'multiline':False]['text':' Try to set this as early as possible, as soon as we have figured out the','line_number':2180,'multiline':False]['text':' command.','line_number':2181,'multiline':False]['text':' Close the connection to get client to go through server selection again.','line_number':2215,'multiline':False]['text':' Don't reply.','line_number':2226,'multiline':False]['text':' Create a new reply builder as subsequently calling any methods on a builder after','line_number':2244,'multiline':False]['text':' 'done()' results in undefined behavior.','line_number':2245,'multiline':False]['text':' If this error needs to fail the connection, propagate it out.','line_number':2267,'multiline':False]['text':' Return the exception to the top to signal that the client connection should be','line_number':2282,'multiline':False]['text':' closed.','line_number':2283,'multiline':False]['text':' Allows wrapping synchronous code in futures without repeating the try-catch block.','line_number':2297,'multiline':False]['text':'*
 * Fire and forget network operations don't produce a `DbResponse`.
 * They override `runAndForget` instead of `run`, and this base
 * class provides a `run` that calls it and handles error reporting
 * via the `NotPrimaryErrorTracker` slot.
 ','line_number':2321,'multiline':True]['text':' For compatibility reasons, we only log incidents of receiving operations that are not','line_number':2364,'multiline':False]['text':' supported and return an empty response to the caller.','line_number':2365,'multiline':False]['text':' Fallthrough because it's a query containing a command. Ideally, we'd like to let','line_number':2380,'multiline':False]['text':' through only hello|isMaster commands but at this point the command hasn't been parsed','line_number':2381,'multiline':False]['text':' yet, so we don't know what it is.','line_number':2382,'multiline':False]['text':' We should not be holding any locks at this point','line_number':2420,'multiline':False]['text':' Commands handling code will reset this if the operation is a command','line_number':2425,'multiline':False]['text':' which is logically a basic CRUD operation like query, insert, etc.','line_number':2426,'multiline':False]['text':' Mark the op as complete, and log it if appropriate. Returns a boolean indicating whether','line_number':2436,'multiline':False]['text':' this op should be written to the profiler.','line_number':2437,'multiline':False]['text':' Performance profiling is on','line_number':2454,'multiline':False]['text':' TODO SERVER-26825: Fix race condition where fsyncLock is acquired post','line_number':2460,'multiline':False]['text':' lockedForWriting() call but prior to profile collection lock acquisition.','line_number':2461,'multiline':False]['text':' namespace','line_number':2483,'multiline':False]['text':' TODO SERVER-70510 revert changes introduced by SERVER-60553 that suppresses errors occurred','line_number':2507,'multiline':False]['text':' during handling of mirroring operations on recovering secondaries.','line_number':2508,'multiline':False]['text':' If the last command wasn't safe for a borrowed thread,','line_number':2533,'multiline':False]['text':' then let's move off of it.','line_number':2534,'multiline':False]['text':' namespace mongo','line_number':2552,'multiline':False]