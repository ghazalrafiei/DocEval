['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * CollectionIndexUsageTracker tracks index usage statistics for a collection.  An index is
 * considered "used" when it appears as part of a winning plan for an operation that uses the
 * query system.
 *
 * It also tracks non-usage of indexes. I.e. it collects information about collection scans that
 * occur on a collection.
 *
 * Indexes must be registered and deregistered on creation/destruction.
 ','line_number':51,'multiline':True]['text':' intrusive_ref_counter is copyable while RefCountable is move-only.','line_number':62,'multiline':False]['text':' Statistics that are shared among versions of the same logical collection.','line_number':65,'multiline':False]['text':' Number of operations that have used this index.','line_number':96,'multiline':False]['text':' Date/Time that we started tracking index usage.','line_number':99,'multiline':False]['text':' An owned copy of the associated IndexDescriptor's index key.','line_number':102,'multiline':False]['text':' Features in use by this index for global feature usage tracking.','line_number':105,'multiline':False]['text':'*
     * The IndexUsageStats entries are stored in the map as pointers so that concurrent updates to
     * an entry's internal values are retained across map copies rather than lost. intrusive_ptrs
     * are used rather than shared_ptrs because: intrusive_ptrs are more performant when copies are
     * made; and the usage is encapsulated by this class and not externally exposed.
     ','line_number':109,'multiline':True]['text':'*
     * Constructs a CollectionIndexUsageTracker.
     *
     * Does not take ownership of 'clockSource'. 'clockSource' must refer to a non-null clock
     * source that is valid for the lifetime of the constructed CollectionIndexUsageTracker.
     ','line_number':117,'multiline':True]['text':'*
     * Record that an operation used index 'indexName'. Safe to be called by multiple threads
     * concurrently.
     ','line_number':126,'multiline':True]['text':'*
     * Add map entry for 'indexName' stats collection.
     *
     * Must be called under an exclusive collection lock in order to serialize calls to
     * registerIndex() and unregisterIndex().
     ','line_number':132,'multiline':True]['text':'*
     * Erase statistics for index 'indexName'. Can be safely called even if indexName is not
     * registered, which is possible under certain failure scenarios.
     *
     * Must be called under an exclusive collection lock in order to serialize calls to
     * registerIndex() and unregisterIndex().
     ','line_number':142,'multiline':True]['text':'*
     * Get the current state of the usage statistics map. This map will only include indexes that
     * exist at the time of calling.
     ','line_number':151,'multiline':True]['text':'*
     * Get the current state of the usage of collection scans. This struct will only include
     * information about the collection scans that have occured at the time of calling.
     *
     * Can be safely called by multiple threads concurrently.
     ','line_number':157,'multiline':True]['text':'*
     * Records that an operation did a collection scan.
     *
     * Can be safely called by multiple threads concurrently.
     ','line_number':165,'multiline':True]['text':' Maps index name to index usage statistics.','line_number':174,'multiline':False]['text':' Clock source. Used when the 'trackerStartTime' time for an IndexUsageStats object needs to','line_number':177,'multiline':False]['text':' be set.','line_number':178,'multiline':False]['text':' All CollectionIndexUsageTrackers also update the AggregatedIndexUsageTracker to report','line_number':181,'multiline':False]['text':' globally aggregated index statistics for the server.','line_number':182,'multiline':False]['text':' Statistics shared among all versions of the Collection. Needs to be synchronized separately','line_number':185,'multiline':False]['text':' using atomics or mutexes.','line_number':186,'multiline':False]['text':' namespace mongo','line_number':190,'multiline':False]