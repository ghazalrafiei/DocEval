['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * An OperationContext decoration that tracks which indexes should be made multikey. This is used
 * by IndexCatalogEntryImpl::setMultikey() to track what indexes should be set as multikey during
 * secondary oplog application. This both marks if the multikey path information should be tracked
 * instead of set immediately and saves the multikey path information for later if needed.
 ','line_number':55,'multiline':True]['text':'*
     * Returns a string representation of MultikeyPaths for logging.
     ','line_number':65,'multiline':True]['text':'*
     * Return true iff the child's paths are a subset of the parent.
     ','line_number':72,'multiline':True]['text':' Decoration requires a default constructor.','line_number':77,'multiline':False]['text':'*
     * Appends the provided multikey path information to the list of indexes to set as multikey
     * after the current replication batch finishes.
     * Must call startTrackingMultikeyPathInfo() first.
     ','line_number':80,'multiline':True]['text':'*
     * Clears out any multikey path information that has been appended.
     * Must call stopTrackingMultikeyPathInfo() first if tracking was previously started.
     ','line_number':87,'multiline':True]['text':'*
     * Returns the multikey path information that has been saved.
     ','line_number':93,'multiline':True]['text':'*
     * Returns the multikey path information for the given inputs, or boost::none if none exist.
     ','line_number':98,'multiline':True]['text':'*
     * Specifies that we should track multikey path information on this MultikeyPathTracker. This is
     * only expected to be called during oplog application on secondaries. We cannot simply check
     * 'canAcceptWritesFor' because background index builds use their own OperationContext and
     * cannot store their multikey path info here.
     ','line_number':104,'multiline':True]['text':'*
     * Specifies to stop tracking multikey path information.
     ','line_number':112,'multiline':True]['text':'*
     * Returns if we've called startTrackingMultikeyPathInfo() and not yet called
     * stopTrackingMultikeyPathInfo().
     ','line_number':117,'multiline':True]['text':'*
     * Returns a boolean representing whether or not any multikey path information
     * has been appended to the list of indexes to set as multikey.
     ','line_number':123,'multiline':True]['text':' namespace mongo','line_number':135,'multiline':False]