['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Takes the index specification field name, such as 'control.max.x.y', or 'control.min.z' and
 * returns a pair of the prefix ('control.min.' or 'control.max.') and key ('x.y' or 'z').
 ','line_number':83,'multiline':True]['text':' Can't use rfind() due to dotted fields such as 'control.max.x.y'.','line_number':88,'multiline':False]['text':'*
 * Converts an event-level index spec to a bucket-level index spec.
 *
 * If the input is not a valid index spec, this function must either:
 *  - return an error Status
 *  - return an invalid index spec
 ','line_number':102,'multiline':True]['text':' The index requested on the time field must be a number for an ascending or descending','line_number':130,'multiline':False]['text':' index specification. Note: further validation is expected of the caller, such as','line_number':131,'multiline':False]['text':' eventually calling index_key_validate::validateKeyPattern() on the spec.','line_number':132,'multiline':False]['text':' The time-series index on the 'timeField' is converted into a compound time index on','line_number':144,'multiline':False]['text':' the buckets collection for more efficient querying of buckets.','line_number':145,'multiline':False]['text':' The time-series 'metaField' field name always maps to a field named','line_number':164,'multiline':False]['text':' timeseries::kBucketMetaFieldName on the underlying buckets collection.','line_number':165,'multiline':False]['text':' Time-series indexes on sub-documents of the 'metaField' are allowed.','line_number':170,'multiline':False]['text':' 2dsphere indexes on measurements are allowed, but need to be re-written to','line_number':180,'multiline':False]['text':' point to the data field and use the special 2dsphere_bucket index type.','line_number':181,'multiline':False]['text':' No other special index types are allowed on timeseries measurements.','line_number':189,'multiline':False]['text':' For ascending key patterns, the { control.min.elem: 1, control.max.elem: 1 }','line_number':201,'multiline':False]['text':' compound index is created.','line_number':202,'multiline':False]['text':' For descending key patterns, the { control.max.elem: -1, control.min.elem: -1 }','line_number':208,'multiline':False]['text':' compound index is created.','line_number':209,'multiline':False]['text':'*
 * Maps the buckets collection index spec 'bucketsIndexSpecBSON' to the index schema of the
 * time-series collection using the information provided in 'timeseriesOptions'.
 *
 * If 'bucketsIndexSpecBSON' does not match a valid time-series index format, then boost::none is
 * returned.
 *
 * Conversion Example:
 * On a time-series collection with 'tm' time field and 'mm' metadata field,
 * we may see a compound index on the underlying bucket collection mapped from:
 * {
 *     'meta.tag1': 1,
 *     'control.min.tm': 1,
 *     'control.max.tm': 1
 * }
 * to an index on the time-series collection:
 * {
 *     'mm.tag1': 1,
 *     'tm': 1
 * }
 ','line_number':220,'multiline':True]['text':' The index specification on the time field is ascending or descending.','line_number':255,'multiline':False]['text':' This index spec on the underlying buckets collection is not valid for','line_number':258,'multiline':False]['text':' time-series. Therefore, we will not convert the index spec.','line_number':259,'multiline':False]['text':' Skip 'control.max.<timeField>' since the 'control.min.<timeField>' field is','line_number':266,'multiline':False]['text':' sufficient to determine whether the index is ascending or descending.','line_number':267,'multiline':False]['text':' Only indexes on the control field are allowed beyond this point. We will not convert','line_number':296,'multiline':False]['text':' the index spec.','line_number':297,'multiline':False]['text':' Indexes on measurement fields are built as compound indexes on the two 'control.min' and','line_number':301,'multiline':False]['text':' 'control.max' fields. We use the BSON iterator to lookahead when doing the reverse','line_number':302,'multiline':False]['text':' mapping for these indexes.','line_number':303,'multiline':False]['text':' This measurement index spec on the underlying buckets collection is not valid for','line_number':312,'multiline':False]['text':' time-series as the compound index is incomplete. We will not convert the index spec.','line_number':313,'multiline':False]['text':' Only indexes on the control field are allowed beyond this point. We will not convert','line_number':319,'multiline':False]['text':' the index spec.','line_number':320,'multiline':False]['text':' The compound index has a mixed ascending and descending key pattern. Do not convert','line_number':331,'multiline':False]['text':' the index spec.','line_number':332,'multiline':False]['text':' Ascending index.','line_number':339,'multiline':False]['text':' Descending index.','line_number':345,'multiline':False]['text':' This measurement index spec on the underlying buckets collection is not valid for','line_number':349,'multiline':False]['text':' time-series as the compound index has the wrong ordering. We will not convert the','line_number':350,'multiline':False]['text':' index spec.','line_number':351,'multiline':False]['text':' namespace','line_number':359,'multiline':False]['text':' This buckets index has the original user index definition available, return it if the','line_number':375,'multiline':False]['text':' time-series metric indexes feature flag is enabled. If the feature flag isn't enabled,','line_number':376,'multiline':False]['text':' the reverse mapping mechanism will be used. This is necessary to skip returning any','line_number':377,'multiline':False]['text':' incompatible indexes created when the feature flag was enabled.','line_number':378,'multiline':False]['text':' This creates a BSONObj copy with the kOriginalSpecFieldName field removed, if it','line_number':386,'multiline':False]['text':' exists, and modifies the kKeyFieldName field to timeseriesKeyValue.','line_number':387,'multiline':False]['text':' 'control.min.time' and 'control.max.time' are both ok.','line_number':426,'multiline':False]['text':' Metadata, and subfields of metadata, are both ok.','line_number':433,'multiline':False]['text':' Found a non-time, non-metadata field, which means a 5.0 server would not understand this','line_number':444,'multiline':False]['text':' index. That means it's fine to also include 'originalSpec', because this index would have','line_number':445,'multiline':False]['text':' to be dropped before downgrading to 5.0 anyway.','line_number':446,'multiline':False]['text':' All fields are either time or metadata. That means a 5.0 server will understand this index.','line_number':450,'multiline':False]['text':' Since 5.0 does not know about the 'originalSpec' field, don't include it: we don't want to','line_number':451,'multiline':False]['text':' complicate downgrade for this index.','line_number':452,'multiline':False]['text':' Check index key.','line_number':488,'multiline':False]['text':' Check partial filter expression.','line_number':495,'multiline':False]['text':' collator ','line_number':501,'multiline':True]['text':' TODO SERVER-53380 convert to tassertStatusOK.','line_number':506,'multiline':False]['text':' Partial filter expression depends on a non-time, non-metadata field.','line_number':520,'multiline':False]['text':' Populate a vector of index key fields which we check against existing indexes.','line_number':546,'multiline':False]['text':' We cannot use a partial index when querying buckets to reopen.','line_number':558,'multiline':False]['text':' The index must include the meta and time field (in that order), but may have','line_number':566,'multiline':False]['text':' additional fields included.','line_number':567,'multiline':False]['text':'','line_number':568,'multiline':False]['text':' In cases where there collections do not have a meta field specified, an index on time','line_number':569,'multiline':False]['text':' suffices.','line_number':570,'multiline':False]['text':' namespace mongo::timeseries','line_number':583,'multiline':False]