['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Use a string that is illegal to represent fields in BSON','line_number':52,'multiline':False]['text':' namespace','line_number':57,'multiline':False]['text':'*
 * Flag to indicate if this Data was updated since last clear.
 ','line_number':69,'multiline':True]['text':'*
 * Clear update flag.
 ','line_number':77,'multiline':True]['text':' Use fast lookup if available.','line_number':234,'multiline':False]['text':' Perform linear search forward.','line_number':244,'multiline':False]['text':' Entry found.','line_number':247,'multiline':False]['text':' Found entry that is used for an Array, we can claim this field.','line_number':252,'multiline':False]['text':' Return if we reached our end when doing linear search.','line_number':259,'multiline':False]['text':' We've exhausted the linear search limit, create a map to speedup future searches. Populate it','line_number':264,'multiline':False]['text':' with all current subelements.','line_number':265,'multiline':False]['text':' Retry the search now when the map is created.','line_number':273,'multiline':False]['text':' Remember our iterator position so we can restore it after inserting a new element.','line_number':288,'multiline':False]['text':' Setup our newly created entry.','line_number':293,'multiline':False]['text':' no subelements','line_number':294,'multiline':False]['text':' Also store our offset in the fast lookup map if it is available.','line_number':298,'multiline':False]['text':' We need to traverse the hiearchy up to the root and modify stored offsets to account for','line_number':303,'multiline':False]['text':' this newly created entry. All entries with subobjects got their end-offset pushed by one.','line_number':304,'multiline':False]['text':' All siblings after this entry got their offset to the parent pushed by one.','line_number':305,'multiline':False]['text':' Root object has "self" as parent.','line_number':309,'multiline':False]['text':' Compare objects element-wise if the stored data may need to be updated.','line_number':426,'multiline':False]['text':' Compare objects element-wise if the stored data may need to be updated.','line_number':435,'multiline':False]['text':' Use Obj() instead of Array() to avoid instantiating a temporary std::vector.','line_number':437,'multiline':False]['text':' For all scalar types, just update the value directly if needed.','line_number':462,'multiline':False]['text':' If we are at end but have skipped elements along the way we need to go back and','line_number':490,'multiline':False]['text':' search in the skipped elements. We do not have to search over the consecutive range','line_number':491,'multiline':False]['text':' in the beginning of elements already handled.','line_number':492,'multiline':False]['text':' Field missing, we need to insert it at the end so we preserve the input field order.','line_number':499,'multiline':False]['text':' Entry is only used for Arrays, we can claim the field name.','line_number':502,'multiline':False]['text':' Traversing the FlatBSONStore structure in lock-step with the input document resulted','line_number':505,'multiline':False]['text':' in a miss. This means one of two things. (1) The input document does not contain all','line_number':506,'multiline':False]['text':' prevously-encountered fields and we need to skip over missing ones. Or (2) the input','line_number':507,'multiline':False]['text':' document has a different internal field order than previous inserts. We begin by','line_number':508,'multiline':False]['text':' searching forward to see if we are case (1).','line_number':509,'multiline':False]['text':' Field not found. We can either be in case (2) or this is a new field that needs','line_number':512,'multiline':False]['text':' to be inserted.','line_number':513,'multiline':False]['text':' Search over the skipped elements in case we are actually in case (2).','line_number':515,'multiline':False]['text':' Still not found, insert the new field. Location doesn't matter much','line_number':520,'multiline':False]['text':' as we are operating on incoming documents of different field orders.','line_number':521,'multiline':False]['text':' Select the point we know furthest back.','line_number':522,'multiline':False]['text':' All previous elements have been found as we have never skipped, proceed','line_number':528,'multiline':False]['text':' with inserting this new field.','line_number':529,'multiline':False]['text':' It points to either a found existing or a newly inserted entry at this point. Recursively','line_number':538,'multiline':False]['text':' update it.','line_number':539,'multiline':False]['text':' Re-construct obj from the returned iterator. If an insert was performed inside','line_number':547,'multiline':False]['text':' _update it would dangle.','line_number':548,'multiline':False]['text':' Advance iterator and advance the all handled offset if we have not skipped anything.','line_number':551,'multiline':False]['text':' We can fail early to save some time iterating over the rest of the structure.','line_number':558,'multiline':False]['text':' An update occurred at a lower level, so append the sub diff.','line_number':640,'multiline':False]['text':' Sub diffs are required to come last.','line_number':651,'multiline':False]['text':' An update occurred at a lower level, so append the sub diff.','line_number':678,'multiline':False]['text':' Store element as BSONElement buffer but strip out the field name.','line_number':743,'multiline':False]['text':' The metadata field is already excluded from generated min/max summaries.','line_number':925,'multiline':False]['text':'metaField=','line_number':926,'multiline':True]['text':'metaField=','line_number':931,'multiline':True]['text':' Clear the updated state as we're only constructing the object from an existing document.','line_number':936,'multiline':False]['text':' The metadata field is already excluded from generated min/max summaries.','line_number':964,'multiline':False]['text':'metaField=','line_number':965,'multiline':True]['text':'metaField=','line_number':970,'multiline':True]['text':' Type mismatch','line_number':986,'multiline':False]['text':' Type mismatch','line_number':1001,'multiline':False]['text':' Type mismatch','line_number':1018,'multiline':False]['text':' Instantiations.','line_number':1025,'multiline':False]['text':' namespace mongo::timeseries::bucket_catalog','line_number':1032,'multiline':False]