['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Bundle of information that 'insert' needs to pass down to helper methods that may create a
 * new bucket.
 ','line_number':64,'multiline':True]['text':'*
 * Mode enum to control whether bucket retrieval methods will create new buckets if no suitable
 * bucket exists.
 ','line_number':78,'multiline':True]['text':'*
 * Mode to signal to 'removeBucket' what's happening to the bucket, and how to handle the bucket
 * state change.
 ','line_number':84,'multiline':True]['text':' Normal closure, pending compression','line_number':89,'multiline':False]['text':' Archive bucket, no state change','line_number':90,'multiline':False]['text':' Bucket is being cleared, possibly due to error, erase state','line_number':91,'multiline':False]['text':'*
 * Mode enum to control whether the bucket retrieval methods will return buckets that have a state
 * that conflicts with insertion.
 ','line_number':94,'multiline':True]['text':'*
 * Mode enum to control whether we prepare or unprepare a bucket.
 ','line_number':100,'multiline':True]['text':'*
 * Mode enum to control whether getReopeningCandidate() will allow query-based
 * reopening of buckets when attempting to accommodate a new measurement.
 ','line_number':105,'multiline':True]['text':'*
 * Maps bucket key to the stripe that is responsible for it.
 ','line_number':111,'multiline':True]['text':'*
 * Extracts the information from the input 'doc' that is used to map the document to a bucket.
 ','line_number':116,'multiline':True]['text':'*
 * Retrieve a bucket for read-only use.
 ','line_number':125,'multiline':True]['text':'*
 * Retrieve a bucket for write use.
 ','line_number':134,'multiline':True]['text':'*
 * Retrieve a bucket for write use and prepare/unprepare the 'BucketState'.
 ','line_number':143,'multiline':True]['text':'*
 * Retrieve the open bucket for write use if one exists. If none exists and 'mode' is set to kYes,
 * then we will create a new bucket.
 ','line_number':152,'multiline':True]['text':'*
 * Retrieve a previously closed bucket for write use if one exists in the catalog. Considers buckets
 * that are pending closure or archival but which are still eligible to recieve new measurements.
 ','line_number':161,'multiline':True]['text':'*
 * Given a bucket to reopen, performs validation and constructs the in-memory representation of the
 * bucket. If specified, 'expectedKey' is matched against the key extracted from the document to
 * validate that the bucket is expected (i.e. to help resolve hash collisions for archived buckets).
 * Does *not* hand ownership of the bucket to the catalog.
 ','line_number':167,'multiline':True]['text':'*
 * Given a rehydrated 'bucket', passes ownership of that bucket to the catalog, marking the bucket
 * as open.
 ','line_number':183,'multiline':True]['text':'*
 * Check to see if 'insert' can use existing bucket rather than reopening a candidate bucket. If
 * true, chances are the caller raced with another thread to reopen the same bucket, but if false,
 * there might be another bucket that had been cleared, or that has the same _id in a different
 * namespace.
 ','line_number':197,'multiline':True]['text':'*
 * Given an already-selected 'bucket', inserts 'doc' to the bucket if possible. If not, and 'mode'
 * is set to 'kYes', we will create a new bucket and insert into that bucket.
 ','line_number':211,'multiline':True]['text':'*
 * Helper method to perform the heavy lifting for both 'tryInsert' and 'insert'. See documentation
 * on callers for more details.
 ','line_number':227,'multiline':True]['text':'*
 * Wait for other batches to finish so we can prepare 'batch'
 ','line_number':241,'multiline':True]['text':'*
 * Removes the given bucket from the bucket catalog's internal data structures.
 ','line_number':248,'multiline':True]['text':'*
 * Archives the given bucket, minimizing the memory footprint but retaining the necessary
 * information required to efficiently identify it as a candidate for future insertions.
 ','line_number':254,'multiline':True]['text':'*
 * Identifies a previously archived bucket that may be able to accommodate the measurement
 * represented by 'info', if one exists.
 ','line_number':265,'multiline':True]['text':'*
 * Calculates the bucket max size constrained by the cache size and the cardinality of active
 * buckets. Returns a pair of the effective value that respects the absolute bucket max and min
 * sizes and the raw value.
 ','line_number':274,'multiline':True]['text':'*
 * Identifies a previously archived bucket that may be able to accommodate the measurement
 * represented by 'info', if one exists. Otherwise returns a pipeline to use for query-based
 * reopening if allowed.
 ','line_number':282,'multiline':True]['text':'*
 * Aborts 'batch', and if the corresponding bucket still exists, proceeds to abort any other
 * unprepared batches and remove the bucket from the catalog if there is no unprepared batch.
 ','line_number':295,'multiline':True]['text':'*
 * Aborts any unprepared batches for the given bucket, then removes the bucket if there is no
 * prepared batch. If 'batch' is non-null, it is assumed that the caller has commit rights for that
 * batch.
 ','line_number':305,'multiline':True]['text':'*
 * Adds the bucket to a list of idle buckets to be expired at a later date.
 ','line_number':317,'multiline':True]['text':'*
 * Remove the bucket from the list of idle buckets. The second parameter encodes whether the caller
 * holds a lock on _idleMutex.
 ','line_number':322,'multiline':True]['text':'*
 * Expires idle buckets until the bucket catalog's memory usage is below the expiry threshold.
 ','line_number':328,'multiline':True]['text':'*
 * Generates an OID for the bucket _id field, setting the timestamp portion to a value determined by
 * rounding 'time' based on 'options'.
 ','line_number':338,'multiline':True]['text':'*
 * Resets the counter used for bucket OID generation. Should be called after a collision.
 ','line_number':344,'multiline':True]['text':'*
 * Allocates a new bucket and adds it to the catalog.
 ','line_number':349,'multiline':True]['text':'*
 * Close the existing, full bucket and open a new one for the same metadata.
 *
 * Writes information about the closed bucket to the 'info' parameter.
 ','line_number':358,'multiline':True]['text':'*
 * Determines if 'bucket' needs to be rolled over to accommodate 'doc'. If so, determines whether
 * to archive or close 'bucket'.
 ','line_number':371,'multiline':True]['text':'*
 * Retrieves or initializes the execution stats for the given namespace, for writing.
 ','line_number':385,'multiline':True]['text':'*
 * Retrieves the execution stats for the given namespace, if they have already been initialized.
 ','line_number':391,'multiline':True]['text':'*
 * Retrieves the execution stats from the side bucket catalog.
 * Assumes the side bucket catalog has the stats of one collection.
 ','line_number':397,'multiline':True]['text':'*
 * Merges the execution stats of a collection into the bucket catalog.
 ','line_number':404,'multiline':True]['text':'*
 * Generates a status with code TimeseriesBucketCleared and an appropriate error message.
 ','line_number':411,'multiline':True]['text':'*
 * Close an open bucket, setting the state appropriately and removing it from the catalog.
 ','line_number':416,'multiline':True]['text':'*
 * Close an open bucket, setting the state appropriately and removing it from the catalog.
 ','line_number':425,'multiline':True]['text':'*
 * Close an archived bucket, setting the state appropriately and removing it from the catalog.
 ','line_number':434,'multiline':True]['text':'*
 * Runs (slow) post commit debug checks to ensure we maintain expected invariants about the bucket
 * contents.
 *
 * Set of checks:
 *  - Measurement count on-disk matches in-memory state. (Helpful for detecting race conditions.)
 ','line_number':441,'multiline':True]['text':' namespace mongo::timeseries::bucket_catalog::internal','line_number':452,'multiline':False]