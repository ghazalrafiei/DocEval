['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Internal secret key info.
 ','line_number':66,'multiline':True]['text':' NOLINT','line_number':71,'multiline':False]['text':' NOLINT','line_number':75,'multiline':False]['text':' Used during keyfile rollover to store the alternate key used to authenticate','line_number':78,'multiline':False]['text':'*
 * How user management functions should structure the BSON representation of privileges and roles.
 ','line_number':87,'multiline':True]['text':' AuthenticationRestrictions should not be included in the BSON representation.','line_number':91,'multiline':False]['text':' AuthenticationRestrictions should be included in the BSON representation.','line_number':92,'multiline':False]['text':'*
 * Contains server/cluster-wide information about Authorization.
 ','line_number':95,'multiline':True]['text':'*
     * Status to be returned when authentication fails. Being consistent about our returned Status
     * prevents information leakage.
     ','line_number':122,'multiline':True]['text':'*
     * Query to match the auth schema version document in the versionCollectionNamespace.
     ','line_number':128,'multiline':True]['text':'*
     * Name of the field in the auth schema version document containing the current schema
     * version.
     ','line_number':133,'multiline':True]['text':'*
     * Value used to represent that the schema version is not cached or invalid.
     ','line_number':139,'multiline':True]['text':'*
     * Auth schema version for MongoDB v2.4 and prior.
     ','line_number':144,'multiline':True]['text':'*
     * Auth schema version for MongoDB v2.6 during the upgrade process.  Same as
     * schemaVersion26Final, except that user documents are found in admin.new.users, and user
     * management commands are disabled.
     ','line_number':149,'multiline':True]['text':'*
     * Auth schema version for MongoDB 2.6 and 3.0 MONGODB-CR/SCRAM mixed auth mode.
     * Users are stored in admin.system.users, roles in admin.system.roles.
     ','line_number':156,'multiline':True]['text':'*
     * Auth schema version for MongoDB 3.0 SCRAM only mode.
     * Users are stored in admin.system.users, roles in admin.system.roles.
     * MONGODB-CR credentials have been replaced with SCRAM credentials in the user documents.
     ','line_number':162,'multiline':True]['text':'*
     * Returns a new AuthorizationSession for use with this AuthorizationManager.
     ','line_number':169,'multiline':True]['text':'*
     * Sets whether or not startup AuthSchema validation checks should be applied in this manager.
     ','line_number':174,'multiline':True]['text':'*
     * Returns true if startup AuthSchema validation checks should be applied in this manager.
     ','line_number':179,'multiline':True]['text':'*
     * Sets whether or not access control enforcement is enabled for this manager.
     ','line_number':184,'multiline':True]['text':'*
     * Returns true if access control is enabled for this manager .
     ','line_number':189,'multiline':True]['text':'*
     * Returns whether a schema version document exists.
     ','line_number':194,'multiline':True]['text':'*
     * Returns via the output parameter "version" the version number of the authorization
     * system.  Returns Status::OK() if it was able to successfully fetch the current
     * authorization version.  If it has problems fetching the most up to date version it
     * returns a non-OK status.  When returning a non-OK status, *version will be set to
     * schemaVersionInvalid (0).
     ','line_number':199,'multiline':True]['text':'*
     * The value reported by this method must change every time some persisted authorization rule
     * gets modified. It serves as a means for consumers of authorization data to discover that
     * something changed and that they need to re-cache.
     *
     * The most prominent consumer of this value is MongoS, which uses it to determine whether it
     * needs to re-fetch the authentication info from the config server.
     ','line_number':208,'multiline':True]['text':'*
     * Returns true if there exists at least one privilege document in the system.
     * Used by the AuthorizationSession to determine whether localhost connections should be
     * granted special access to bootstrap the system.
     * NOTE: If this method ever returns true, the result is cached in _privilegeDocsExist,
     * meaning that once this method returns true it will continue to return true for the
     * lifetime of this process, even if all users are subsequently dropped from the system.
     ','line_number':218,'multiline':True]['text':'*
     * Delegates method call to the underlying AuthzManagerExternalState.
     ','line_number':228,'multiline':True]['text':'*
     * Returns true if there exists at least one user document in the system. If `tenantId` is set,
     * only looks for users associated with `tenantId`.
     ','line_number':235,'multiline':True]['text':'*
     * Delegates method call to the underlying AuthzManagerExternalState.
     ','line_number':241,'multiline':True]['text':'*
     * Options for what data resolveRoles() should mine from the role tree.
     *
     * kRoles:        Collect RoleNames in the "roles" field in each role document for subordinates.
     * kPrivileges:   Examine the "privileges" field in each role document and
     *                merge "actions" for identicate "resource" patterns.
     * kRestrictions: Collect the "authenticationRestrictions" field in each role document.
     *
     * kDirectOnly:   If specified, only the RoleNames explicitly supplied to resolveRoles()
     *                will be examined.
     *                If not specified, then resolveRoles() will continue examining all
     *                subordinate roles until the tree has been exhausted.
     *
     * kAll, kDirectRoles, kDirectPrivileges, kDirectRestrictions, and kDirectAll
     * exist as convenience aliases for combinations of the above flags.
     ','line_number':246,'multiline':True]['text':' Only collect from the first pass.','line_number':269,'multiline':False]['text':'*
     * Return type for resolveRoles().
     * Each member will be populated ONLY IF their corresponding Option flag was specifed.
     * Otherwise, they will be equal to boost::none.
     ','line_number':278,'multiline':True]['text':'*
     * Delegates method call to the underlying AuthzManagerExternalState.
     ','line_number':289,'multiline':True]['text':'*
     * Delegates method call to the underlying AuthzManagerExternalState.
     ','line_number':296,'multiline':True]['text':'*
     * Delegates method call to the underlying AuthzManagerExternalState.
     ','line_number':305,'multiline':True]['text':'*
     * Delegates method call to the underlying AuthzManagerExternalState.
     ','line_number':313,'multiline':True]['text':'*
     * Returns a Status or UserHandle for the given userRequest. If the user cache already has a
     * user object for this user, it returns a handle from the cache, otherwise it reads the
     * user document from the AuthzManagerExternalState - this may block for a long time.
     *
     * The returned user may be invalid by the time the caller gets access to it.
     ','line_number':323,'multiline':True]['text':'*
     * Validate the ID associated with a known user while refreshing session cache.
     ','line_number':333,'multiline':True]['text':'*
     * Marks the given user as invalid and removes it from the user cache.
     ','line_number':339,'multiline':True]['text':'*
     * Invalidates all users whose source is "dbname" and removes them from the user cache.
     ','line_number':344,'multiline':True]['text':'*
     * Invalidate all users associated with a given tenant,
     * or entire cache if tenant == boost::none.
     ','line_number':349,'multiline':True]['text':'*
     * Retrieves all users whose source is "$external" and checks if the corresponding user in the
     * backing store has a different set of roles now. If so, it updates the cache entry with the
     * new UserHandle.
     ','line_number':356,'multiline':True]['text':'*
     * Initializes the authorization manager.  Depending on what version the authorization
     * system is at, this may involve building up the user cache and/or the roles graph.
     * Call this function at startup and after resynchronizing a secondary.
     ','line_number':363,'multiline':True]['text':'*
     * Invalidates all of the contents of the user cache.
     ','line_number':370,'multiline':True]['text':'*
     * Hook called by replication code to let the AuthorizationManager observe changes
     * to relevant collections.
     ','line_number':375,'multiline':True]['text':'
     * Represents a user in the user cache.
     ','line_number':385,'multiline':True]['text':' The username of the user','line_number':389,'multiline':False]['text':' Whether the user is currently in use by a thread (a thread has','line_number':390,'multiline':False]['text':' called acquireUser and still owns the returned shared_ptr)','line_number':391,'multiline':False]['text':' namespace mongo','line_number':397,'multiline':False]