['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A ResourcePatternSearchList represents up to kMaxResourcePatternLookups elements
 * of ResourcePattern objects representing the breakdown of the target ResourcePattern
 * into the subpatterns which may potentially match it.
 *
 * The search lists are as follows, depending on the type of "target":
 *
 * target is ResourcePattern::forAnyResource(tenantId):
 *   searchList = { ResourcePattern::forAnyResource(tenantId),
 *                  ResourcePattern::forAnyResource(boost::none) }
 * target is ResourcePattern::forClusterResource(tenantId):
 *   searchList = { ResourcePattern::forAnyResource(tenantId),
 *                  ResourcePattern::forClusterResource(tenantId),
 *                  ResourcePattern::forAnyResource(boost::none),
 *                  ResourcePattern::forClusterResource(boost::none) }
 * target is a database, tenantId_db:
 *   searchList = { ResourcePattern::forAnyResource(tenantId),
 *                  ResourcePattern::forAnyNormalResource(tenantId),
 *                  ResourcePattern::forAnyResource(boost::none),
 *                  ResourcePattern::forAnyNormalResource(boost::none),
 *                  tenantId_db }
 * target is a non-system collection, tenantId_db.coll:
 *   searchList = { ResourcePattern::forAnyResource(tenantId),
 *                  ResourcePattern::forAnyNormalResource(tenantId),
 *                  ResourcePattern::forAnyResource(boost::none),
 *                  ResourcePattern::forAnyNormalResource(boost::none),
 *                  tenantId_db,
 *                  tenantId_*.coll,
 *                  tenantId_db.coll }
 * target is a system buckets collection, tenantId_db.system.buckets.coll:
 *   searchList = { ResourcePattern::forAnyResource(tenantId),
 *                  ResourcePattern::forAnyResource(boost::none),
 *                  ResourcePattern::forAnySystemBuckets(tenantId),
 *                  ResourcePattern::forAnySystemBucketsInDatabase(tenantId, "db"),
 *                  ResourcePattern::forAnySystemBucketsInAnyDatabase(tenantId, "coll"),
 *                  ResourcePattern::forExactSystemBucketsCollection(tenantId, "db", "coll"),
 *                  tenantId_*.system.buckets.coll,
 *                  tenantId_db.system.buckets.coll }
 * target is a system collection, tenantId_db.system.coll:
 *   searchList = { ResourcePattern::forAnyResource(tenantId),
 *                  ResourcePattern::forAnyResource(boost::none),
 *                  tenantId_*.system.coll,
 *                  tenantId_db.system.coll }
 ','line_number':43,'multiline':True]['text':' Normal collections can be matched by anyNormalResource, or their database's resource.','line_number':100,'multiline':False]['text':' But even normal collections in non-normal databases should not be matchable with','line_number':102,'multiline':False]['text':' ResourcePattern::forAnyNormalResource. 'local' and 'config' are','line_number':103,'multiline':False]['text':' used to store special system collections, which user level','line_number':104,'multiline':False]['text':' administrators should not be able to manipulate.','line_number':105,'multiline':False]['text':' System bucket patterns behave similar to any/db/coll/exact patterns,','line_number':112,'multiline':False]['text':' But with a fixed "system.buckets." prefix to the collection name.','line_number':113,'multiline':False]['text':' All collections can be matched by a collection resource for their name','line_number':123,'multiline':False]['text':' Add base tenant versions of top-level matching types.','line_number':136,'multiline':False]['text':' This is so that a system user (with no tenant ID) with privileges on these general','line_number':137,'multiline':False]['text':' match types will be able to take actions on tenant data.','line_number':138,'multiline':False]['text':' Note that we'll only get this far if that user is authorized for the useTenant action','line_number':139,'multiline':False]['text':' on the cluster resource.','line_number':140,'multiline':False]['text':' namespace mongo::auth','line_number':179,'multiline':False]