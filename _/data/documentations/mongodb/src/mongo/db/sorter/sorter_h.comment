['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':39,'multiline':False]['text':'*
 * This is the public API for the Sorter (both in-memory and external)
 *
 * Many of the classes in this file are templated on Key and Value types which
 * require the following public members:
 *
 * // A type carrying extra information used by the deserializer. Contents are
 * // up to you, but it should be cheap to copy. Use an empty struct if your
 * // deserializer doesn't need extra data.
 * struct SorterDeserializeSettings {};
 *
 * // Serialize this object to the BufBuilder
 * void serializeForSorter(BufBuilder& buf) const;
 *
 * // Deserialize and return an object from the BufReader
 * static Type deserializeForSorter(BufReader& buf, const Type::SorterDeserializeSettings&);
 *
 * // How much memory is used by your type? Include sizeof(*this) and any memory you reference.
 * int memUsageForSorter() const;
 *
 * // For types with owned and unowned states, such as BSON, return an owned version. The Sorter
 * // is responsible for converting any unowned data to an owned state if it needs to be buffered.
 * // Return *this if your type doesn't have an unowned state.
 * Type getOwned() const;
 *
 * Comparators are functors that that compare std::pair<Key, Value> and return an
 * int less than, equal to, or greater than 0 depending on how the two pairs
 * compare with the same semantics as memcmp.
 * Example for Key=BSONObj, Value=int:
 *
 * class MyComparator {
 * public:
 *     int operator()(const std::pair<BSONObj, int>& lhs,
 *                    const std::pair<BSONObj, int>& rhs) {
 *         int ret = lhs.first.woCompare(rhs.first, _ord);
 *         if (ret)
 *             return ret;
 *
 *        if (lhs.second >  rhs.second) return 1;
 *        if (lhs.second == rhs.second) return 0;
 *        return -1;
 *     }
 *     Ordering _ord;
 * };
 ','line_number':62,'multiline':True]['text':'*
 * Runtime options that control the Sorter's behavior
 ','line_number':110,'multiline':True]['text':' The number of KV pairs to be returned. 0 indicates no limit.','line_number':114,'multiline':False]['text':' When in-memory memory usage exceeds this value, we try to spill to disk. This is approximate.','line_number':117,'multiline':False]['text':' Whether we are allowed to spill to disk. If this is false and in-memory exceeds','line_number':120,'multiline':False]['text':' maxMemoryUsageBytes, we will uassert.','line_number':121,'multiline':False]['text':' In case the sorter spills encrypted data to disk that must be readable even after process','line_number':124,'multiline':False]['text':' restarts, it must encrypt with a persistent key. This key is accessed using the database','line_number':125,'multiline':False]['text':' name that the sorted collection lives in. If encryption is enabled and dbName is boost::none,','line_number':126,'multiline':False]['text':' a temporary key is used.','line_number':127,'multiline':False]['text':' Directory into which we place a file when spilling to disk. Must be explicitly set if','line_number':130,'multiline':False]['text':' extSortAllowed is true.','line_number':131,'multiline':False]['text':' If set, allows us to observe Sorter file handle usage.','line_number':134,'multiline':False]['text':' If set, allows us to observe aggregate Sorter behaviors.','line_number':137,'multiline':False]['text':' When set, this sorter will own a memory pool that callers should used to allocate memory for','line_number':140,'multiline':False]['text':' the keys we are sorting. If enabled, any values returned by memUsageForSorter() will be','line_number':141,'multiline':False]['text':' ignored.','line_number':142,'multiline':False]['text':' If set to true and sorted data fits into memory, sorted data will be moved into iterator','line_number':145,'multiline':False]['text':' instead of copying.','line_number':146,'multiline':False]['text':' Fluent API to support expressions like SortOptions().Limit(1000).ExtSortAllowed(true)','line_number':158,'multiline':False]['text':'*
 * This is a 0-sized dummy object that satisfies Sorter's Key/Value interface.
 ','line_number':206,'multiline':True]['text':' unused','line_number':211,'multiline':False]['text':'*
 * This is the sorted output iterator from the sorting framework.
 ','line_number':227,'multiline':True]['text':' Unowned objects are only valid until next call to any method','line_number':241,'multiline':False]['text':'*
     * Returns the new key-value pair.
     ','line_number':244,'multiline':True]['text':'*
     * The following two methods are used together. nextWithDeferredValue() returns the next key. It
     * must be followed by a call to getDeferredValue(), to return the pending deferred value,
     * before calling next() or nextWithDeferredValue() again. This is intended specifically to
     * avoid allocating memory for the value if the caller eventually decides to abandon the
     * iterator and never consume any more values from it.
     ','line_number':249,'multiline':True]['text':' Returns an iterator that merges the passed in iterators','line_number':263,'multiline':False]['text':' Opens and closes the source of data over which this class iterates, if applicable.','line_number':270,'multiline':False]['text':' can only be constructed as a base','line_number':280,'multiline':False]['text':'*
 * This is the way to input data to the sorting framework.
 *
 * Each instance of this class will generate a file name and spill sorted data ranges to that file
 * if allowed in its given Settings. If the instance destructs before done() is called, it will
 * handle deleting the data file used for spills. Otherwise, if done() is called, responsibility for
 * file deletion moves to the returned Iterator object, which must then delete the file upon its own
 * destruction.
 *
 * All users of Sorter implementations must define their own nextFileName() function to generate
 * unique file names for spills to disk. This is necessary because the sorter.cpp file is separately
 * directly included in multiple places, rather than compiled in one place and linked, and so cannot
 * itself provide a globally unique ID for file names. See existing function implementations of
 * nextFileName() for example.
 ','line_number':295,'multiline':True]['text':'*
     * Represents the file that a Sorter uses to spill to disk. Supports reading and writing
     * (append-only).
     ','line_number':328,'multiline':True]['text':'*
         * Signals that the on-disk file should not be cleaned up.
         ','line_number':342,'multiline':True]['text':'*
         * Reads the requested data from the file. Cannot write more to the file once this has been
         * called.
         ','line_number':349,'multiline':True]['text':'*
         * Writes the given data to the end of the file. Cannot be called after reading.
         ','line_number':355,'multiline':True]['text':'*
         * Returns the current offset of the end of the file. Cannot be called after reading.
         ','line_number':360,'multiline':True]['text':'*
         * Ensures that the file is open and that _offset is set to the end of the file.
         ','line_number':368,'multiline':True]['text':' The current offset of the end of the file if there may be unflushed data, or -1 if the','line_number':376,'multiline':False]['text':' file either has not yet been opened or has been flushed.','line_number':377,'multiline':False]['text':' Whether to keep the on-disk file even after this in-memory object has been destructed.','line_number':380,'multiline':False]['text':' If set, this points to an external metrics holder for tracking file open/close activity.','line_number':383,'multiline':False]['text':'*
     * ExtSort-only constructor. fileName is the base name of a file in the temp directory.
     ','line_number':389,'multiline':True]['text':'*
     * Cannot add more data after calling done().
     ','line_number':409,'multiline':True]['text':'*
     * Pauses loading and returns the iterator that can be used to get the current state. Clients of
     * this class can call this method to pause loading and get the current state available in
     * read-only mode for storing it to a persistent storage which is used by streaming query use
     * cases. New documents cannot be added until resume is called. The iterator returned is
     * reflecting current in memory state and is not guaranteed to be sorted.
     ','line_number':414,'multiline':True]['text':'*
     * Resumes loading and cleans up internal state created during pause().
     ','line_number':423,'multiline':True]['text':' Data that has already been spilled.','line_number':444,'multiline':False]['text':' Feed one item of input to the sorter.','line_number':458,'multiline':False]['text':' Together, add() and done() represent the input stream.','line_number':459,'multiline':False]['text':' Indicate that no more input will arrive.','line_number':462,'multiline':False]['text':' Together, add() and done() represent the input stream.','line_number':463,'multiline':False]['text':' Prepare the sorter to receive a new stream of input.','line_number':466,'multiline':False]['text':'','line_number':467,'multiline':False]['text':' The new input stream is treated as unrelated to the old one: new elements are only compared','line_number':468,'multiline':False]['text':' against each other, not against any elements of the old input stream.','line_number':469,'multiline':False]['text':'','line_number':470,'multiline':False]['text':' However, any SortOptions::limit applies to the entire sorter, not to each input stream','line_number':471,'multiline':False]['text':' separately.','line_number':472,'multiline':False]['text':' An output document is not available yet, but this may change as more input arrives.','line_number':476,'multiline':False]['text':' An output document is available now: you may call next() once.','line_number':478,'multiline':False]['text':' All output has been returned.','line_number':480,'multiline':False]['text':' Together, state() and next() represent the output stream.','line_number':483,'multiline':False]['text':' See BoundedSorter::State for the meaning of each case.','line_number':484,'multiline':False]['text':' Remove and return one item of output.','line_number':487,'multiline':False]['text':' Only valid to call when getState() == kReady.','line_number':488,'multiline':False]['text':' Together, state() and next() represent the output stream.','line_number':489,'multiline':False]['text':' Serialize the bound for explain output','line_number':492,'multiline':False]['text':' By default, uassert that the input meets our assumptions of being almost-sorted.','line_number':497,'multiline':False]['text':' But if _checkInput is false, don't do that check.','line_number':498,'multiline':False]['text':' The output will be in the wrong order but otherwise it should work.','line_number':499,'multiline':False]['text':'*
 * Sorts data that is already "almost sorted", meaning we can put a bound on how out-of-order
 * any two input elements are. For example, maybe we are sorting by {time: 1} and we know that no
 * two documents are more than an hour out of order. This means as soon as we see {time: t}, we know
 * that any document earlier than {time: t - 1h} is safe to return.
 *
 * Note what's bounded is the difference in sort-key values, not the number of inversions.
 * This means we don't know how much space we'll need.
 *
 * This is not a subclass of Sorter because the interface is different: Sorter has a strict
 * separation between reading input and returning results, while BoundedSorter can alternate
 * between the two.
 *
 * Comparator does a 3-way comparison between two Keys: comp(x, y) < 0 iff x < y.
 *
 * BoundMaker takes a Key from the input, and computes a bound. The bound is a Key that is
 * less-or-equal to all future Keys that will be seen in the input.
 ','line_number':503,'multiline':True]['text':' 'Comparator' is a 3-way comparison, but std::priority_queue wants a '<' comparison.','line_number':524,'multiline':False]['text':' But also, std::priority_queue is a max-heap, and we want a min-heap.','line_number':525,'multiline':False]['text':' And also, 'Comparator' compares Keys, but std::priority_queue calls its comparator','line_number':526,'multiline':False]['text':' on whole elements.','line_number':527,'multiline':False]['text':' Prevent default construction.','line_number':529,'multiline':False]['text':' Feed one item of input to the sorter.','line_number':548,'multiline':False]['text':' Together, add() and done() represent the input stream.','line_number':549,'multiline':False]['text':' Indicate that no more input will arrive.','line_number':552,'multiline':False]['text':' Together, add() and done() represent the input stream.','line_number':553,'multiline':False]['text':' Together, state() and next() represent the output stream.','line_number':561,'multiline':False]['text':' See BoundedSorter::State for the meaning of each case.','line_number':562,'multiline':False]['text':' Remove and return one item of output.','line_number':566,'multiline':False]['text':' Only valid to call when getState() == kReady.','line_number':567,'multiline':False]['text':' Together, state() and next() represent the output stream.','line_number':568,'multiline':False]['text':' Serialize the bound for explain output','line_number':571,'multiline':False]['text':'*
 * Appends a pre-sorted range of data to a given file and hands back an Iterator over that file
 * range.
 ','line_number':606,'multiline':True]['text':'*
     * Writes any data remaining in the buffer to disk and then closes the file to which data was
     * written.
     *
     * No more data can be added via addAlreadySorted() after calling done().
     ','line_number':627,'multiline':True]['text':'*
     * The SortedFileWriter organizes data into chunks, with a chunk getting written to the output
     * file when it exceends a maximum chunks size. A SortedFilerWriter client can produce a short
     * chunk by manually calling this function.
     *
     * If no new data has been added since the last chunk was written, this function is a no-op.
     ','line_number':635,'multiline':True]['text':' Keeps track of the hash of all data objects spilled to disk. Passed to the FileIterator','line_number':660,'multiline':False]['text':' to ensure data has not been corrupted after reading from disk.','line_number':661,'multiline':False]['text':' Tracks where in the file we started writing the sorted data range so that the information can','line_number':664,'multiline':False]['text':' be given to the Iterator in done().','line_number':665,'multiline':False]['text':' namespace mongo','line_number':670,'multiline':False]['text':'*
 * #include "mongo/db/sorter/sorter.cpp" and call this in a single translation
 * unit once for each unique set of template parameters.
 ','line_number':672,'multiline':True]['text':' public classes ','line_number':677,'multiline':True]['text':' internal classes ','line_number':681,'multiline':True]['text':' factory functions ','line_number':688,'multiline':True]