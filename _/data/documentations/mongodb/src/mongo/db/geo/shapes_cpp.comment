['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'//////////// Point','line_number':57,'multiline':False]['text':'//////////// Circle','line_number':81,'multiline':False]['text':'//////////// Box','line_number':87,'multiline':False]['text':' contain part of other range','line_number':143,'multiline':False]['text':' contain part of other range','line_number':144,'multiline':False]['text':' other range contains us','line_number':145,'multiline':False]['text':'//////////// Polygon','line_number':222,'multiline':False]['text':'
 * Return values:
 * -1 if no intersection
 * 0 if maybe an intersection (using fudge)
 * 1 if there is an intersection
 *
 * A ray casting intersection method is used.
 ','line_number':250,'multiline':True]['text':' XXX: why is there a mod here?','line_number':264,'multiline':False]['text':' We need to check whether or not this segment intersects our error box','line_number':267,'multiline':False]['text':' Points not too far below box','line_number':269,'multiline':False]['text':' Points not too far above box','line_number':271,'multiline':False]['text':' Points not too far to left of box','line_number':273,'multiline':False]['text':' Points not too far to right of box','line_number':275,'multiline':False]['text':' If our box contains one or more of these points, we need to do an exact','line_number':277,'multiline':False]['text':' check.','line_number':278,'multiline':False]['text':' Do intersection check for vertical sides','line_number':286,'multiline':False]['text':' Do intersection check for horizontal sides','line_number':301,'multiline':False]['text':' If this is an exact vertex, we won't intersect, so check this','line_number':316,'multiline':False]['text':' If this is a horizontal line we won't intersect, so check this','line_number':322,'multiline':False]['text':' Check that the x-coord lies in the line','line_number':324,'multiline':False]['text':' Normal intersection test.','line_number':330,'multiline':False]['text':' TODO: Invert these for clearer logic?','line_number':331,'multiline':False]['text':' Special case of point on vertical line','line_number':337,'multiline':False]['text':' Need special case for the vertical edges, for example:','line_number':339,'multiline':False]['text':' 1) \e   pe/----->','line_number':340,'multiline':False]['text':' vs.','line_number':341,'multiline':False]['text':' 2) \ep---e/----->','line_number':342,'multiline':False]['text':'','line_number':343,'multiline':False]['text':' if we count exact as intersection, then 1 is in but 2 is out','line_number':344,'multiline':False]['text':' if we count exact as no-int then 1 is out but 2 is in.','line_number':345,'multiline':False]['text':' Partial signed area','line_number':374,'multiline':False]['text':'/ For all vertices except last','line_number':376,'multiline':False]['text':' Do last vertex','line_number':385,'multiline':False]['text':' See if we're inside the inner radius','line_number':429,'multiline':False]['text':' See if we're outside the outer radius','line_number':434,'multiline':False]['text':' Box(_min.x, _min.y, edgeLength)','line_number':444,'multiline':False]['text':'///// Other methods','line_number':558,'multiline':False]['text':'*
 * Distance method that compares x or y coords when other direction is zero,
 * avoids numerical error when distances are very close to radius but axis-aligned.
 *
 * An example of the problem is:
 * (52.0 - 51.9999) - 0.0001 = 3.31965e-15 and 52.0 - 51.9999 > 0.0001 in double arithmetic
 * but:
 * 51.9999 + 0.0001 <= 52.0
 *
 * This avoids some (but not all!) suprising results in $center queries where points are
 * (radius + center.x, center.y) or vice-versa.
 ','line_number':581,'multiline':True]['text':' Compare the distance between p1 and p2 with the radius.','line_number':597,'multiline':False]['text':' Float-number comparison might be inaccurate.','line_number':598,'multiline':False]['text':'','line_number':599,'multiline':False]['text':' > 0: distance is greater than radius','line_number':600,'multiline':False]['text':' = 0: distance equals radius','line_number':601,'multiline':False]['text':' < 0: distance is less than radius','line_number':602,'multiline':False]['text':'','line_number':608,'multiline':False]['text':' Note:  For some, unknown reason, when a 32-bit g++ optimizes this call, the sum is','line_number':609,'multiline':False]['text':' calculated imprecisely.  We need to force the compiler to always evaluate it','line_number':610,'multiline':False]['text':' correctly, hence the weirdness.','line_number':611,'multiline':False]['text':'','line_number':612,'multiline':False]['text':' On some 32-bit linux machines, removing the volatile keyword or calculating the sum','line_number':613,'multiline':False]['text':' inline will make certain geo tests fail.  Of course this check will force volatile','line_number':614,'multiline':False]['text':' for all 32-bit systems, not just affected systems.','line_number':615,'multiline':False]['text':' NOLINT','line_number':617,'multiline':False]['text':' Original math, correct for most systems','line_number':620,'multiline':False]['text':' NOLINT','line_number':627,'multiline':False]['text':' note: multiply by earth radius for distance','line_number':637,'multiline':False]['text':' this uses the n-vector formula: http://en.wikipedia.org/wiki/N-vector','line_number':639,'multiline':False]['text':' If you try to match the code to the formula, note that I inline the cross-product.','line_number':640,'multiline':False]['text':' fun with floats','line_number':651,'multiline':False]['text':' @param p1 A point on the sphere where x and y are degrees.','line_number':659,'multiline':False]['text':' @param p2 A point on the sphere where x and y are degrees.','line_number':660,'multiline':False]['text':' @return The distance between the two points in RADIANS.  Multiply by radius to get arc','line_number':661,'multiline':False]['text':' length.','line_number':662,'multiline':False]['text':' Technically lat/long bounds, not really tied to earth radius.','line_number':667,'multiline':False]['text':' Avoid numerical error if possible...','line_number':676,'multiline':False]['text':' Given a segment (A, B) and a segment (C, D), check whether they intersect.','line_number':689,'multiline':False]['text':' The normal of line AB','line_number':696,'multiline':False]['text':' Dot products of AC and the normal of AB','line_number':699,'multiline':False]['text':' = 0 : C is on the line AB','line_number':700,'multiline':False]['text':' > 0 : C is on one side','line_number':701,'multiline':False]['text':' < 0 : C is on the other side','line_number':702,'multiline':False]['text':' C and D can not on the same side of line AB','line_number':706,'multiline':False]['text':' AB and CD are on the same line','line_number':710,'multiline':False]['text':' Test if C or D is on segment AB.','line_number':712,'multiline':False]['text':' Check if A and B are on different sides of line CD.','line_number':716,'multiline':False]['text':' Perhaps A or B is on line CD','line_number':720,'multiline':False]['text':' NOTE: a circle of zero radius is a point, and there are NO points contained inside a','line_number':726,'multiline':False]['text':' zero-radius circle, not even the point itself.','line_number':727,'multiline':False]['text':' Lower left','line_number':731,'multiline':False]['text':' Upper right','line_number':732,'multiline':False]['text':' Upper Left','line_number':733,'multiline':False]['text':' Lower right','line_number':735,'multiline':False]['text':' Check the intersection by measuring the distance between circle center and box center.','line_number':752,'multiline':False]['text':' NOTE: a circle of zero radius is a point, and there are NO points to intersect inside a','line_number':756,'multiline':False]['text':' zero-radius circle, not even the point itself.','line_number':757,'multiline':False]['text':' Collapses the four quadrants down into one.
     *   ________
     * r|___B___ \  <- a quarter round corner here. Let's name it "D".
     *  |       | |
     * h|       | |
     *  |   A   |C|
     *  |_______|_|
     *      w    r
     ','line_number':761,'multiline':True]['text':' Check if circle.center is in A, B or C.','line_number':778,'multiline':False]['text':' The circle center could be above the box (B) or right to the box (C), but close enough.','line_number':779,'multiline':False]['text':' Now check if circle.center is in the round corner "D".','line_number':788,'multiline':False]['text':' Doc: The last point specified is always implicitly connected to the first.','line_number':810,'multiline':False]['text':' [[ 0 , 0 ], [ 3 , 6 ], [ 6 , 0 ]]','line_number':811,'multiline':False]['text':' The last point and first point.','line_number':817,'multiline':False]['text':' All vertices of box have to be inside the polygon.','line_number':822,'multiline':False]['text':' No intersection between the polygon edges and the box.','line_number':828,'multiline':False]['text':' 1. Polygon contains the box.','line_number':833,'multiline':False]['text':' Check the relaxed condition that whether the polygon include any vertex of the box.','line_number':834,'multiline':False]['text':' 2. Box contains polygon.','line_number':840,'multiline':False]['text':' Check the relaxed condition that whether the box include any vertex of the polygon.','line_number':841,'multiline':False]['text':' 3. Otherwise they intersect on a portion of both shapes.','line_number':848,'multiline':False]['text':' Edges intersects','line_number':849,'multiline':False]['text':' Can always trivially project or project from SPHERE->FLAT','line_number':854,'multiline':False]['text':' If crs is FLAT, we might be able to upgrade the point to SPHERE if it's a valid SPHERE','line_number':859,'multiline':False]['text':' point (lng/lat in bounds).  In this case, we can use FLAT data with SPHERE predicates.','line_number':860,'multiline':False]['text':' Prohibit projection to STRICT_SPHERE CRS','line_number':875,'multiline':False]['text':' Note that it's (lat, lng) for S2 but (lng, lat) for MongoDB.','line_number':878,'multiline':False]['text':' Prohibit projection to STRICT_SPHERE CRS','line_number':887,'multiline':False]['text':' Just remove the additional spherical information','line_number':889,'multiline':False]['text':' Only project from STRICT_SPHERE to SPHERE','line_number':899,'multiline':False]['text':' namespace mongo','line_number':904,'multiline':False]