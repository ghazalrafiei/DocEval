['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Comparison functions','line_number':73,'multiline':False]['text':' Make sure the operator < is defined.','line_number':75,'multiline':False]['text':' Assignment functions','line_number':81,'multiline':False]['text':'  Only 60 bits usable for hash','line_number':88,'multiline':False]['text':'  The test below verifies that types/hashes are stored/retrieved unchanged','line_number':92,'multiline':False]['text':'','line_number':114,'multiline':False]['text':' LockManager','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' Free the first','line_number':163,'multiline':False]['text':' Free the last','line_number':166,'multiline':False]['text':' Free one in the middle','line_number':169,'multiline':False]['text':' Free the remaining so the LockMgr does not compain about leaked locks','line_number':172,'multiline':False]['text':' Release the last held lock and ensure the next one, based on time is granted','line_number':200,'multiline':False]['text':' Release the last one','line_number':209,'multiline':False]['text':' Acquire again, in the same mode','line_number':227,'multiline':False]['text':' Release first acquire','line_number':233,'multiline':False]['text':' Release second acquire','line_number':238,'multiline':False]['text':' Acquire again, in *compatible*, but stricter mode','line_number':257,'multiline':False]['text':' Release the first acquire','line_number':263,'multiline':False]['text':' Release the second acquire','line_number':268,'multiline':False]['text':' Acquire again, in *non-compatible*, but stricter mode','line_number':287,'multiline':False]['text':' Release first acquire','line_number':293,'multiline':False]['text':' Release second acquire','line_number':298,'multiline':False]['text':' Acquire again, in *non-compatible*, but less strict mode','line_number':317,'multiline':False]['text':' Release first acquire','line_number':323,'multiline':False]['text':' Release second acquire','line_number':328,'multiline':False]['text':' First request granted right away','line_number':345,'multiline':False]['text':' Second request must block','line_number':350,'multiline':False]['text':' Release first request','line_number':356,'multiline':False]['text':' Release second acquire','line_number':366,'multiline':False]['text':' Free them one by one and make sure they get granted in the correct order','line_number':399,'multiline':False]['text':' First request granted right away','line_number':427,'multiline':False]['text':' Release second request (which is still in the WAITING mode)','line_number':433,'multiline':False]['text':' Release second acquire','line_number':440,'multiline':False]['text':' Free the second (waiting)','line_number':464,'multiline':False]['text':' Free the last','line_number':467,'multiline':False]['text':' Free one in the middle','line_number':470,'multiline':False]['text':' Free the remaining so the LockMgr does not compain about leaked locks','line_number':473,'multiline':False]['text':' First request granted right away','line_number':491,'multiline':False]['text':' Second request is granted right away','line_number':495,'multiline':False]['text':' Convert first request to conflicting','line_number':499,'multiline':False]['text':' Cancel the conflicting conversion','line_number':505,'multiline':False]['text':' Free the remaining locks so the LockManager destructor does not complain','line_number':511,'multiline':False]['text':' First request granted right away','line_number':528,'multiline':False]['text':' Second request is granted right away','line_number':532,'multiline':False]['text':' Convert second request to conflicting','line_number':536,'multiline':False]['text':' Cancel the conflicting upgrade','line_number':542,'multiline':False]['text':' Free the remaining locks so the LockManager destructor does not complain','line_number':548,'multiline':False]['text':' The S requests are granted right away','line_number':565,'multiline':False]['text':' Convert first request to conflicting','line_number':572,'multiline':False]['text':' Free the second lock and make sure the first is granted','line_number':576,'multiline':False]['text':' Frees the first reference, mode remains X','line_number':582,'multiline':False]['text':' Upgrade the one in the middle (not the first one)','line_number':605,'multiline':False]['text':' Release the two shared modes','line_number':610,'multiline':False]['text':' Request 1 should be unlocked twice','line_number':619,'multiline':False]['text':' Upgrade the S lock to X','line_number':638,'multiline':False]['text':' Downgrade the X request to S','line_number':661,'multiline':False]['text':' Lock conflict matrix tests','line_number':673,'multiline':False]['text':' The subsequent request will block','line_number':739,'multiline':False]['text':' This is a "queue jumping request", which will go before locker 2 above','line_number':745,'multiline':False]['text':' Once the X request is gone, lockerHi should be granted, because it's queue jumping','line_number':752,'multiline':False]['text':' Finally lockerLow should be granted','line_number':758,'multiline':False]['text':' This avoids the lock manager asserting on leaked locks','line_number':764,'multiline':False]['text':' Lock all in IS mode','line_number':782,'multiline':False]['text':' Now an exclusive mode comes, which would block','line_number':787,'multiline':False]['text':' If an S comes, it should be granted, because of request2','line_number':793,'multiline':False]['text':' If request1 goes away, the policy should still be compatible-first, because of request2','line_number':801,'multiline':False]['text':' If S comes again, it should be granted, because of request2 still there','line_number':804,'multiline':False]['text':' With request2 gone the policy should go back to FIFO, even though request3 is active','line_number':812,'multiline':False]['text':' Unlock request3 to keep the lock mgr not assert for leaked locks','line_number':822,'multiline':False]['text':' This tests the following behaviors (alternatives indicated with '|'):','line_number':831,'multiline':False]['text':'   Lock held in X, queue: S X|IX IS, where S is compatibleFirst.','line_number':832,'multiline':False]['text':'   Once X unlocks|downgrades both the S and IS requests should proceed.','line_number':833,'multiline':False]['text':' Hold the lock in X and establish the S IX|X IS queue.','line_number':855,'multiline':False]['text':' Now unlock the initial X, so all readers should be able to proceed, while the writer','line_number':861,'multiline':False]['text':' remains queued.','line_number':862,'multiline':False]['text':' Now unlock the readers, and the writer succeeds as well.','line_number':873,'multiline':False]['text':' Unlock the writer','line_number':881,'multiline':False]['text':' Lock all in IS mode (should block behind the global lock)','line_number':905,'multiline':False]['text':' Now an exclusive mode comes, which would block behind the IS modes','line_number':910,'multiline':False]['text':' Free the first X lock so all IS modes are granted','line_number':915,'multiline':False]['text':' If an S comes, it should be granted, because of request2','line_number':921,'multiline':False]['text':' If request1 goes away, the policy should still be compatible-first, because of request2','line_number':929,'multiline':False]['text':' If S comes again, it should be granted, because of request2 still there','line_number':932,'multiline':False]['text':' With request2 gone the policy should go back to FIFO, even though request3 is active','line_number':940,'multiline':False]['text':' Unlock request3 to keep the lock mgr not assert for leaked locks','line_number':950,'multiline':False]['text':' S1 is not granted yet, so the policy should still be FIFO','line_number':972,'multiline':False]['text':' Unlock S1, the policy should still be FIFO','line_number':980,'multiline':False]['text':' Unlock remaining locks to keep the leak detection logic happy','line_number':990,'multiline':False]['text':' Start with some 'regular' intent locks','line_number':999,'multiline':False]['text':' Now a conflicting lock comes','line_number':1008,'multiline':False]['text':' Now, whoever comes next should be blocked','line_number':1013,'multiline':False]['text':' Freeing the first two locks should grant the X lock','line_number':1018,'multiline':False]['text':' Unlock all locks so we don't assert for leaked locks','line_number':1030,'multiline':False]['text':' namespace mongo','line_number':1053,'multiline':False]