['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':36,'multiline':False]['text':' Ignore data races in certain functions when running with TSAN. For performance reasons,','line_number':81,'multiline':False]['text':' diagnostic commands are expected to race with concurrent lock acquisitions while gathering','line_number':82,'multiline':False]['text':' statistics.','line_number':83,'multiline':False]['text':'*
 * Tracks global (across all clients) lock acquisition statistics, partitioned into multiple
 * buckets to minimize concurrent access conflicts.
 *
 * Each client has a LockerId that monotonically increases across all client instances. The
 * LockerId % 8 is used to index into one of 8 LockStats instances. These LockStats objects must be
 * atomically accessed, so maintaining 8 that are indexed by LockerId reduces client conflicts and
 * improves concurrent write access. A reader, to collect global lock statics for reporting, will
 * sum the results of all 8 disjoint 'buckets' of stats.
 ','line_number':90,'multiline':True]['text':' This alignment is a best effort approach to ensure that each partition falls on a','line_number':132,'multiline':False]['text':' separate page/cache line in order to avoid false sharing.','line_number':133,'multiline':False]['text':' How often (in millis) to check for deadlock if a lock has not been granted for some time','line_number':149,'multiline':False]['text':' Dispenses unique LockerId identifiers','line_number':152,'multiline':False]['text':' Tracks lock statistics across all Locker instances. Distributes stats across multiple buckets','line_number':155,'multiline':False]['text':' indexed by LockerId in order to minimize concurrent access conflicts.','line_number':156,'multiline':False]['text':' namespace','line_number':159,'multiline':False]['text':' Log the _requests that this locker holds. This will provide identifying information to cross','line_number':259,'multiline':False]['text':' reference with the LockManager dump below for extra information.','line_number':260,'multiline':False]['text':' Log the LockManager's lock information. Given the locker 'dump()' above, we should be able to','line_number':263,'multiline':False]['text':' easily cross reference to find the lock info matching this operation. The LockManager can','line_number':264,'multiline':False]['text':' safely access (under internal locks) the LockRequest data that the locker cannot.','line_number':265,'multiline':False]['text':'','line_number':274,'multiline':False]['text':' CondVarLockGrantNotification','line_number':275,'multiline':False]['text':'','line_number':276,'multiline':False]['text':' Because waitForConditionOrInterruptFor evaluates the predicate before checking for','line_number':299,'multiline':False]['text':' interrupt, it is possible that a killed operation can acquire a lock if the request is','line_number':300,'multiline':False]['text':' granted quickly. For that reason, it is necessary to check if the operation has been','line_number':301,'multiline':False]['text':' killed at least once before accepting the lock grant.','line_number':302,'multiline':False]['text':'','line_number':317,'multiline':False]['text':' Locker','line_number':318,'multiline':False]['text':'','line_number':319,'multiline':False]['text':' Reset to represent a non-executing thread.','line_number':336,'multiline':False]['text':' Cannot delete the Locker while there are still outstanding requests, because the','line_number':340,'multiline':False]['text':' LockManager may attempt to access deleted memory. Besides it is probably incorrect','line_number':341,'multiline':False]['text':' to delete with unaccounted locks anyways.','line_number':342,'multiline':False]['text':' Ensure that either we don't have a ticket, or the current ticket mode matches the lock mode.','line_number':370,'multiline':False]['text':' If we already have a ticket, there's nothing to do.','line_number':374,'multiline':False]['text':' TODO SERVER-80206: Remove opCtx->checkForInterrupt().','line_number':385,'multiline':False]['text':' If we've reached this point then that means we tried to acquire a ticket but were','line_number':390,'multiline':False]['text':' unsuccessful, implying that tickets are currently exhausted. Additionally, since','line_number':391,'multiline':False]['text':' we're holding an IS or IX lock for this resource, any pending requests for the same','line_number':392,'multiline':False]['text':' resource must be S or X and will not be able to be granted. Thus, since such a','line_number':393,'multiline':False]['text':' pending lock request may also be holding a ticket, if there are any present we fail','line_number':394,'multiline':False]['text':' this ticket reacquisition in order to avoid a deadlock.','line_number':395,'multiline':False]['text':' Upon startup, the holder is not guaranteed to be initialized.','line_number':407,'multiline':False]['text':' MODE_X is exclusive of all other locks, thus acquiring a ticket is unnecessary.','line_number':414,'multiline':False]['text':' If the ticket wait is interrupted, restore the state of the client.','line_number':416,'multiline':False]['text':' Acquiring a ticket is a potentially blocking operation. This must not be called after a','line_number':419,'multiline':False]['text':' transaction timestamp has been set, indicating this transaction has created an oplog','line_number':420,'multiline':False]['text':' hole.','line_number':421,'multiline':False]['text':' Ignore deadline.','line_number':441,'multiline':False]['text':' Fast, uncontended path','line_number':462,'multiline':False]['text':' If we're here we should only have one reference to any lock. It is a programming','line_number':479,'multiline':False]['text':' error for any lock used with multi-granularity locking to have more references than','line_number':480,'multiline':False]['text':' the global lock, because every scope starts by calling lockGlobal.','line_number':481,'multiline':False]['text':' Don't do anything unless leaving outermost WUOW.','line_number':502,'multiline':False]['text':' If a lock is converted, unlock() may be called multiple times on a resource within','line_number':513,'multiline':False]['text':' the same WriteUnitOfWork. All such unlock() requests must thus be fulfilled here.','line_number':514,'multiline':False]['text':' Equivalent to call beginWriteUnitOfWork() multiple times.','line_number':552,'multiline':False]['text':' Only the global WUOW can be released, since we never need to release and restore','line_number':557,'multiline':False]['text':' nested WUOW's. Thus we don't have to remember the nesting level.','line_number':558,'multiline':False]['text':' All locks should be pending to unlock.','line_number':563,'multiline':False]['text':' No converted lock so we don't need to unlock more than once.','line_number':566,'multiline':False]['text':' `lockGlobal` must be called to lock `resourceIdGlobal`.','line_number':593,'multiline':False]['text':' Fast, uncontended path','line_number':598,'multiline':False]['text':' Don't attempt to unlock twice. This can happen when an interrupted global lock is destructed.','line_number':614,'multiline':False]['text':' Only delay unlocking if the lock is not acquired more than once. Otherwise, we can simply','line_number':619,'multiline':False]['text':' call _unlockImpl to decrement recursiveCount instead of incrementing unlockPending. This','line_number':620,'multiline':False]['text':' is safe because the lock is still being held in the strongest mode necessary.','line_number':621,'multiline':False]['text':' Invariant that the lock is still being held.','line_number':623,'multiline':False]['text':' unlockPending will be incremented if a lock is converted or acquired in the same mode','line_number':631,'multiline':False]['text':' recursively, and unlock() is called multiple times on one ResourceId.','line_number':632,'multiline':False]['text':' Don't attempt to unlock twice. This can happen when an interrupted global lock is destructed.','line_number':643,'multiline':False]['text':' If the RSTL is 'unlockPending' and we are fully unlocking it, then we do not want to','line_number':647,'multiline':False]['text':' attempt to unlock the RSTL when the WUOW ends, since it will already be unlocked.','line_number':648,'multiline':False]['text':' Reset the recursiveCount to 1 so that we fully unlock the RSTL. Since it will be fully','line_number':654,'multiline':False]['text':' unlocked, any future unlocks will be noops anyways.','line_number':655,'multiline':False]['text':' Zero-out the contents','line_number':776,'multiline':False]['text':' lockStatsBase is a snapshot of lock stats taken when the sub-operation starts. Only','line_number':798,'multiline':False]['text':' sub-operations have lockStatsBase.','line_number':799,'multiline':False]['text':' Adjust the lock stats by subtracting the lockStatsBase. No mutex is needed because','line_number':801,'multiline':False]['text':' lockStatsBase is immutable.','line_number':802,'multiline':False]['text':' We shouldn't be saving and restoring lock state from inside a WriteUnitOfWork.','line_number':814,'multiline':False]['text':' Callers must guarantee that they can actually yield.','line_number':817,'multiline':False]['text':' Clear out whatever is in stateOut.','line_number':825,'multiline':False]['text':' First, we look at the global lock.  There is special handling for this so we store it','line_number':829,'multiline':False]['text':' separately from the more pedestrian locks.','line_number':830,'multiline':False]['text':' Next, the non-global locks.','line_number':837,'multiline':False]['text':' We should never have to save and restore metadata locks.','line_number':845,'multiline':False]['text':' And, stuff the info into the out parameter.','line_number':851,'multiline':False]['text':' Sort locks by ResourceId. They'll later be acquired in this canonical locking order.','line_number':860,'multiline':False]['text':' We shouldn't be restoring lock state from inside a WriteUnitOfWork.','line_number':865,'multiline':False]['text':' If we locked the MultiDocumentTransactionsBarrier lock, it must be locked before the','line_number':874,'multiline':False]['text':' resourceIdReplicationStateTransitionLock and resourceIdGlobal resources.','line_number':875,'multiline':False]['text':' If we locked the RSTL, it must be locked before the resourceIdGlobal resource.','line_number':881,'multiline':False]['text':' Ensures we don't acquire locks out of order which can lead to deadlock.','line_number':889,'multiline':False]['text':' Operations which are holding open an oplog hole cannot block when acquiring locks.','line_number':905,'multiline':False]['text':' If unlockPending is nonzero, that means a LockRequest already exists for this resource but','line_number':931,'multiline':False]['text':' is planned to be released at the end of this WUOW due to two-phase locking. Rather than','line_number':932,'multiline':False]['text':' unlocking the existing request, we can reuse it if the existing mode matches the new mode.','line_number':933,'multiline':False]['text':' Making this call here will record lock re-acquisitions and conversions as well.','line_number':942,'multiline':False]['text':' Give priority to the full modes for Global and RSTL resources so we don't stall global','line_number':946,'multiline':False]['text':' operations such as shutdown or stepdown.','line_number':947,'multiline':False]['text':' This is all sanity checks that the global locks are always be acquired','line_number':955,'multiline':False]['text':' before any other lock has been acquired and they must be in sync with the nesting.','line_number':956,'multiline':False]['text':' The notification object must be cleared before we invoke the lock manager, because','line_number':964,'multiline':False]['text':' otherwise we might reset state if the lock becomes granted very fast.','line_number':965,'multiline':False]['text':' Lock acquisitions are not allowed to succeed when opCtx is marked as interrupted, unless','line_number':976,'multiline':False]['text':' the caller requested an uninterruptible lock.','line_number':977,'multiline':False]['text':' Operations which are holding open an oplog hole cannot block when acquiring locks. Lock','line_number':995,'multiline':False]['text':' requests entering this function have been queued up and will be granted the lock as soon as','line_number':996,'multiline':False]['text':' the lock is released, which is a blocking operation.','line_number':997,'multiline':False]['text':' Clean up the state on any failed lock attempts.','line_number':1008,'multiline':False]['text':' This failpoint is used to time out non-intent locks if they cannot be granted immediately','line_number':1016,'multiline':False]['text':' for user operations. Testing-only.','line_number':1017,'multiline':False]['text':' Don't go sleeping without bound in order to be able to report long waits.','line_number':1041,'multiline':False]['text':' It is OK if this call wakes up spuriously, because we re-evaluate the remaining','line_number':1047,'multiline':False]['text':' wait time anyways.','line_number':1048,'multiline':False]['text':' Unless a caller has requested an uninterruptible lock, we want to use the opCtx's','line_number':1049,'multiline':False]['text':' interruptible wait so that pending lock acquisitions can be cancelled.','line_number':1050,'multiline':False]['text':' Account for the time spent waiting on the notification object','line_number':1057,'multiline':False]['text':' If infinite timeout was requested, just keep waiting','line_number':1068,'multiline':False]['text':' Check if the lock acquisition has timed out. If we have an operation context and client','line_number':1078,'multiline':False]['text':' we can provide additional diagnostics data.','line_number':1079,'multiline':False]['text':' FlowControl only acts when a MODE_IX global lock is being taken. The clientState is only','line_number':1107,'multiline':False]['text':' being modified here to change serverStatus' `globalLock.currentQueue` metrics. This','line_number':1108,'multiline':False]['text':' method must not exit with a side-effect on the clientState. That value is also used for','line_number':1109,'multiline':False]['text':' tracking whether other resources need to be released.','line_number':1110,'multiline':False]['text':' Acquiring a ticket is a potentially blocking operation. This must not be called after a','line_number':1113,'multiline':False]['text':' transaction timestamp has been set, indicating this transaction has created an oplog','line_number':1114,'multiline':False]['text':' hole.','line_number':1115,'multiline':False]['text':' We may have already released our ticket through a call to releaseTicket().','line_number':1158,'multiline':False]['text':' We cannot yield strong global locks.','line_number':1181,'multiline':False]['text':' If we don't have a global lock, we do not yield.','line_number':1186,'multiline':False]['text':' If there's no global lock there isn't really anything to do. Check that.','line_number':1191,'multiline':False]['text':' If any lock has been acquired more than once, we're probably somewhere in a','line_number':1207,'multiline':False]['text':' DBDirectClient call.  It's not safe to release and reacquire locks -- the context using','line_number':1208,'multiline':False]['text':' the DBDirectClient is probably not prepared for lock release. This logic applies to all','line_number':1209,'multiline':False]['text':' locks in the hierarchy.','line_number':1210,'multiline':False]['text':' We cannot yield any other lock in a strong lock mode.','line_number':1215,'multiline':False]['text':'','line_number':1230,'multiline':False]['text':' Auto classes','line_number':1231,'multiline':False]['text':'','line_number':1232,'multiline':False]['text':'*
 *  Periodically purges unused lock buckets. The first time the lock is used again after
 *  cleanup it needs to be allocated, and similarly, every first use by a client for an intent
 *  mode may need to create a partitioned lock head. Cleanup is done roughly once a minute.
 ','line_number':1235,'multiline':True]['text':' namespace','line_number':1251,'multiline':False]['text':'','line_number':1253,'multiline':False]['text':' Standalone functions','line_number':1254,'multiline':False]['text':'','line_number':1255,'multiline':False]['text':' namespace mongo','line_number':1265,'multiline':False]