['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * NOTE: This structure should not be used for anything other than the Lock Manager.
 *
 * This is a simple implementation of an unordered associative array with minimal functionality,
 * used by the lock manager. It keeps a small number of memory entries to store values, in order to
 * avoid memory allocations, which dominate the cost of the lock manager calls by a wide margin.
 *
 * This class is not thread-safe.
 *
 * Note: this custom data structure is necessary because we need: fast memory access; to maintain
 * all data pointer/reference validity when entries are added/removed; and to avoid costly and
 * repetitive entry mallocs and frees.
 ','line_number':41,'multiline':True]['text':'*
     * Map entry through which we avoid releasing memory: we mark it as inUse or not.
     * Maps keys to values.
     ','line_number':57,'multiline':True]['text':'*
     * Forward-only iterator. Does not synchronize with the underlying collection in any way.
     * In other words, do not modify the collection while there is an open iterator on it.
     ','line_number':77,'multiline':True]['text':'','line_number':84,'multiline':False]['text':' Operators','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' Other methods','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':'*
         * Returns whether the iterator has been exhausted through calls to next. This value
         * can be used to determine whether a previous call to find has found something.
         ','line_number':105,'multiline':True]['text':'*
         * Returns the address of the object at the current position. Cannot be called with an
         * uninitialized iterator, or iterator which has reached the end.
         ','line_number':113,'multiline':True]['text':'*
         * Returns the key of the value at the current position. Cannot be called with an
         * uninitialized iterator or iterator which has reached the end.
         ','line_number':123,'multiline':True]['text':'*
         * Advances the iterator to the next entry. No particular order of iteration is
         * guaranteed.
         ','line_number':133,'multiline':True]['text':'*
         * Removes the element at the current position and moves the iterator to the next,
         * which might be the last entry on the map.
         ','line_number':146,'multiline':True]['text':' Used for iteration of the complete map','line_number':164,'multiline':False]['text':' Used for iterator starting at a position','line_number':174,'multiline':False]['text':' Used for iteration starting at a particular key','line_number':179,'multiline':False]['text':' The map being iterated on','line_number':191,'multiline':False]['text':' Iterator on the map','line_number':194,'multiline':False]['text':'*
     * Inserts the specified entry in the map and returns a reference to the memory for the
     * entry just inserted.
     ','line_number':208,'multiline':True]['text':' Place the new entry in the front so the below map iteration is faster.','line_number':214,'multiline':False]['text':'*
     * Returns an iterator to the first element in the map.
     ','line_number':232,'multiline':True]['text':'*
     * Returns an iterator pointing to the first position, which has entry with the specified
     * key. Before dereferencing the returned iterator, it should be checked for validity using
     * the finished() method or the ! operator. If no element was found, finished() will return
     * true.
     *
     * While it is allowed to call next() on the returned iterator, this is not very useful,
     * because the container is not ordered.
     ','line_number':243,'multiline':True]['text':' We chose a deque data structure because it maintains the validity of existing','line_number':268,'multiline':False]['text':' pointers/references to its contents when it allocates more memory. Deque also gives us O(1)','line_number':269,'multiline':False]['text':' emplace_front() in insert().','line_number':270,'multiline':False]['text':' namespace mongo','line_number':276,'multiline':False]