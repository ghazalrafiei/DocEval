['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Notfication callback, which stores the last notification result and signals a condition
 * variable, which can be waited on.
 ','line_number':60,'multiline':True]['text':'*
     * Clears the object so it can be reused.
     ','line_number':71,'multiline':True]['text':'*
     * Uninterruptible blocking method, which waits for the notification to fire.
     *
     * @param timeout How many milliseconds to wait before returning LOCK_TIMEOUT.
     ','line_number':76,'multiline':True]['text':'*
     * Interruptible blocking method, which waits for the notification to fire or an interrupt from
     * the operation context.
     *
     * @param opCtx OperationContext to wait on for an interrupt.
     * @param timeout How many milliseconds to wait before returning LOCK_TIMEOUT.
     ','line_number':83,'multiline':True]['text':' These two go together to implement the conditional variable pattern.','line_number':95,'multiline':False]['text':' Result from the last call to notify','line_number':99,'multiline':False]['text':'*
 * Interface for acquiring locks. One of those objects will have to be instantiated for each
 * request (transaction).
 *
 * Lock/unlock methods must always be called from a single thread.
 *
 * All instances reference a single global lock manager.
 *
 ','line_number':103,'multiline':True]['text':' TODO (SERVER-77213): Get rid of LockerImpl, devirtualise Locker and make it final','line_number':112,'multiline':False]['text':'*
     * Instantiates new locker. Must be given a unique identifier for disambiguation. Lockers
     * having the same identifier will not conflict on lock acquisition.
     ','line_number':115,'multiline':True]['text':'*
     * Acquires the ticket within the deadline (or _maxLockTimeout) and tries to grab the lock.
     ','line_number':150,'multiline':True]['text':'*
     * Requests a lock for resource 'resId' with mode 'mode'. An OperationContext 'opCtx' must be
     * provided to interrupt waiting on the locker condition variable that indicates status of
     * the lock acquisition. A lock operation would otherwise wait until a timeout or the lock is
     * granted.
     ','line_number':182,'multiline':True]['text':'','line_number':237,'multiline':False]['text':' Below functions are for testing only.','line_number':238,'multiline':False]['text':'','line_number':239,'multiline':False]['text':'*
     * Allows for lock requests to be requested in a non-blocking way. There can be only one
     * outstanding pending lock request per locker object.
     *
     * _lockBegin posts a request to the lock manager for the specified lock to be acquired,
     * which either immediately grants the lock, or puts the requestor on the conflict queue
     * and returns immediately with the result of the acquisition. The result can be one of:
     *
     * LOCK_OK - Nothing more needs to be done. The lock is granted.
     * LOCK_WAITING - The request has been queued up and will be granted as soon as the lock
     *      is free. If this result is returned, typically _lockComplete needs to be called in
     *      order to wait for the actual grant to occur. If the caller no longer needs to wait
     *      for the grant to happen, unlock needs to be called with the same resource passed
     *      to _lockBegin.
     *
     * In other words for each call to _lockBegin, which does not return LOCK_OK, there needs to
     * be a corresponding call to either _lockComplete or unlock.
     *
     * If an operation context is provided that represents an interrupted operation, _lockBegin will
     * throw an exception whenever it would have been possible to grant the lock with LOCK_OK. This
     * behavior can be disabled with an UninterruptibleLockGuard.
     *
     * NOTE: These methods are not public and should only be used inside the class
     * implementation and for unit-tests and not called directly.
     ','line_number':260,'multiline':True]['text':'*
     * Waits for the completion of a lock, previously requested through _lockBegin/
     * Must only be called, if _lockBegin returned LOCK_WAITING.
     *
     * @param opCtx Operation context that, if not null, will be used to allow interruptible lock
     * acquisition.
     * @param resId Resource id which was passed to an earlier _lockBegin call. Must match.
     * @param mode Mode which was passed to an earlier _lockBegin call. Must match.
     * @param deadline The absolute time point when this lock acquisition will time out, if not yet
     * granted.
     * @param onTimeout Callback which will run if the lock acquisition is about to time out.
     *
     * Throws an exception if it is interrupted.
     ','line_number':287,'multiline':True]['text':'*
     * The main functionality of the unlock method, except accepts iterator in order to avoid
     * additional lookups during unlockGlobal. Frees locks immediately, so must not be called from
     * inside a WUOW.
     ','line_number':307,'multiline':True]['text':'*
     * Whether we should use two phase locking. Returns true if the particular lock's release should
     * be delayed until the end of the operation.
     *
     * We delay release of write operation locks (X, IX) in order to ensure that the data changes
     * they protect are committed successfully. endWriteUnitOfWork will release them afterwards.
     * This protects other threads from seeing inconsistent in-memory state.
     *
     * Shared locks (S, IS) will also participate in two-phase locking if
     * '_sharedLocksShouldTwoPhaseLock' is true. This will protect open storage engine transactions
     * across network calls.
     ','line_number':314,'multiline':True]['text':'*
     * Releases the ticket for the Locker.
     ','line_number':328,'multiline':True]['text':'*
     * Acquires a ticket for the Locker under 'mode'.
     * Returns true   if a ticket is successfully acquired.
     *         false  if it cannot acquire a ticket within 'deadline'.
     * It may throw an exception when it is interrupted.
     ','line_number':333,'multiline':True]['text':'*
     * Calls dump() on this locker instance and the lock manager.
     ','line_number':343,'multiline':True]['text':'*
     * Determines whether global and tenant lock state implies that some database or lower level
     * resource, such as a collection, belonging to a tenant identified by 'tenantId' is locked in
     * 'lockMode'.
     *
     * Returns:
     *   true, if the global and tenant locks imply that the resource is locked for 'mode';
     *   false, if the global and tenant locks imply that the resource is not locked for 'mode';
     *   boost::none, if the global and tenant lock state does not imply either outcome and lower
     * level locks should be consulted.
     ','line_number':348,'multiline':True]['text':' Used to disambiguate different lockers','line_number':362,'multiline':False]['text':' The only reason we have this spin lock here is for the diagnostic tools, which could','line_number':365,'multiline':False]['text':' iterate through the LockRequestsMap on a separate thread and need it to be stable.','line_number':366,'multiline':False]['text':' Apart from that, all accesses to the LockerImpl are always from a single thread.','line_number':367,'multiline':False]['text':'','line_number':368,'multiline':False]['text':' This has to be locked inside const methods, hence the mutable.','line_number':369,'multiline':False]['text':' Note: this data structure must always guarantee the continued validity of pointers/references','line_number':372,'multiline':False]['text':' to its contents (LockRequests). The LockManager maintains a LockRequestList of pointers to','line_number':373,'multiline':False]['text':' the LockRequests managed by this data structure.','line_number':374,'multiline':False]['text':' Reuse the notification object across requests so we don't have to create a new mutex','line_number':377,'multiline':False]['text':' and condition variable every time.','line_number':378,'multiline':False]['text':' Per-locker locking statistics. Reported in the slow-query log message and through','line_number':381,'multiline':False]['text':' db.currentOp. Complementary to the per-instance locking statistics.','line_number':382,'multiline':False]['text':' Delays release of exclusive/intent-exclusive locked resources until the write unit of','line_number':385,'multiline':False]['text':' work completes. Value of 0 means we are not inside a write unit of work.','line_number':386,'multiline':False]['text':' Mode for which the Locker acquired a ticket, or MODE_NONE if no ticket was acquired.','line_number':389,'multiline':False]['text':' Indicates whether the client is active reader/writer or is queued.','line_number':392,'multiline':False]['text':' Track the thread who owns the lock for debugging purposes','line_number':395,'multiline':False]['text':' If true, shared locks will participate in two-phase locking.','line_number':398,'multiline':False]['text':' If this is set, dictates the max number of milliseconds that we will wait for lock','line_number':401,'multiline':False]['text':' acquisition. Effectively resets lock acquisition deadlines to time out sooner. If set to 0,','line_number':402,'multiline':False]['text':' for example, lock attempts will time out immediately if the lock is not immediately','line_number':403,'multiline':False]['text':' available. Note this will be ineffective if uninterruptible lock guard is set.','line_number':404,'multiline':False]['text':' A structure for accumulating time spent getting flow control tickets.','line_number':407,'multiline':False]['text':' The global ticketholders of the service context.','line_number':410,'multiline':False]['text':' This will only be valid when holding a ticket.','line_number':413,'multiline':False]['text':' Tracks the global lock modes ever acquired in this Locker's life. This value should only ever','line_number':416,'multiline':False]['text':' be accessed from the thread that owns the Locker.','line_number':417,'multiline':False]['text':' Tracks whether this operation should be killed on step down.','line_number':420,'multiline':False]['text':' If isValid(), the ResourceId of the resource currently waiting for the lock. If not valid,','line_number':423,'multiline':False]['text':' there is no resource currently waiting.','line_number':424,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////////////////','line_number':427,'multiline':False]['text':'','line_number':428,'multiline':False]['text':' Methods merged from LockState, which should eventually be removed or changed to methods','line_number':429,'multiline':False]['text':' on the LockerImpl interface.','line_number':430,'multiline':False]['text':'','line_number':431,'multiline':False]['text':' namespace mongo','line_number':454,'multiline':False]