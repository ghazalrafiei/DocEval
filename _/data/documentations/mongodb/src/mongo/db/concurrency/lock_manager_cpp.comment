['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':49,'multiline':False]['text':'*
 * Map of conflicts. 'LockConflictsTable[newMode] & existingMode != 0' means that a new request
 * with the given 'newMode' conflicts with an existing request with mode 'existingMode'.
 ','line_number':82,'multiline':True]['text':' MODE_NONE','line_number':87,'multiline':False]['text':' MODE_IS','line_number':90,'multiline':False]['text':' MODE_IX','line_number':93,'multiline':False]['text':' MODE_S','line_number':96,'multiline':False]['text':' MODE_X','line_number':99,'multiline':False]['text':' Mask of modes','line_number':103,'multiline':False]['text':' Ensure we do not add new modes without updating the conflicts table','line_number':106,'multiline':False]['text':'*
 * Maps the mode id to a string.
 ','line_number':110,'multiline':True]['text':' Ensure we do not add new modes without updating the names array','line_number':117,'multiline':False]['text':' Helper functions for the lock modes','line_number':122,'multiline':False]['text':'*
 * Maps the LockRequest status to a human-readable string.
 ','line_number':131,'multiline':True]['text':' Ensure we do not add new status types without updating the names array','line_number':141,'multiline':False]['text':' namespace','line_number':146,'multiline':False]['text':'*
 * There is one of these objects for each resource that has a lock request. Empty objects (i.e.
 * LockHead with no requests) are allowed to exist on the lock manager's hash table.
 *
 * The memory and lifetime is controlled entirely by the LockManager class.
 *
 * Not thread-safe and should only be accessed under the LockManager's bucket lock. Must be locked
 * before locking a partition, not after.
 ','line_number':148,'multiline':True]['text':'*
     * Used for initialization of a LockHead, which might have been retrieved from cache and also in
     * order to keep the LockHead structure a POD.
     ','line_number':159,'multiline':True]['text':'*
     * True iff there may be partitions with granted requests for this resource.
     ','line_number':178,'multiline':True]['text':'*
     * Locates the request corresponding to the particular locker or returns nullptr. Must be called
     * with the bucket holding this lock head locked.
     ','line_number':185,'multiline':True]['text':' Check the granted queue first','line_number':190,'multiline':False]['text':' Check the conflict queue second','line_number':197,'multiline':False]['text':'*
     * Finish creation of request and put it on the LockHead's conflict or granted queues. Returns
     * LOCK_WAITING for conflict case and LOCK_OK otherwise.
     ','line_number':207,'multiline':True]['text':' We cannot set request->partitioned to false, as this might be a migration, in which case','line_number':215,'multiline':False]['text':' access to that field is not protected. The 'partitioned' member instead indicates if a','line_number':216,'multiline':False]['text':' request was initially partitioned.','line_number':217,'multiline':False]['text':' New lock request. Queue after all granted modes and after any already requested','line_number':219,'multiline':False]['text':' conflicting modes','line_number':220,'multiline':False]['text':' Put it on the conflict queue. Conflicts are granted front to back.','line_number':225,'multiline':False]['text':' No conflict, new request','line_number':237,'multiline':False]['text':'*
     * Lock each partitioned LockHead in turn, and move any (granted) intent mode requests for
     * lock->resourceId to lock, which must itself already be locked.
     ','line_number':250,'multiline':True]['text':' Methods to maintain the granted queue','line_number':256,'multiline':False]['text':' Methods to maintain the conflict queue','line_number':273,'multiline':False]['text':' Id of the resource which is protected by this lock. Initialized at construction time and does','line_number':290,'multiline':False]['text':' not change.','line_number':291,'multiline':False]['text':'','line_number':294,'multiline':False]['text':' Granted queue','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':' Doubly-linked list of requests, which have been granted. Newly granted requests go to','line_number':298,'multiline':False]['text':' the end of the queue. Conversion requests are granted from the beginning forward.','line_number':299,'multiline':False]['text':' Counts the grants and conversion counts for each of the supported lock modes. These','line_number':302,'multiline':False]['text':' counts should exactly match the aggregated modes on the granted list.','line_number':303,'multiline':False]['text':' Bit-mask of the granted + converting modes on the granted queue. Maintained in lock-step','line_number':306,'multiline':False]['text':' with the grantedCounts array.','line_number':307,'multiline':False]['text':'','line_number':310,'multiline':False]['text':' Conflict queue','line_number':311,'multiline':False]['text':'','line_number':312,'multiline':False]['text':' Doubly-linked list of requests, which have not been granted yet because they conflict','line_number':314,'multiline':False]['text':' with the set of granted modes. Requests are queued at the end of the queue and are','line_number':315,'multiline':False]['text':' granted from the beginning forward, which gives these locks FIFO ordering. Exceptions to the','line_number':316,'multiline':False]['text':' FIFO rule are strong lock requests for global resources, such as MODE_X for Global.','line_number':317,'multiline':False]['text':' Counts the conflicting requests for each of the lock modes. These counts should exactly','line_number':320,'multiline':False]['text':' match the aggregated modes on the conflicts list.','line_number':321,'multiline':False]['text':' Bit-mask of the conflict modes on the conflict queue. Maintained in lock-step with the','line_number':324,'multiline':False]['text':' conflictCounts array.','line_number':325,'multiline':False]['text':' References partitions that may have PartitionedLockHeads for this LockHead.','line_number':328,'multiline':False]['text':' Non-empty implies the lock has no conflicts and only has intent modes as grantedModes.','line_number':329,'multiline':False]['text':' TODO: Remove this vector and make LockHead a POD','line_number':330,'multiline':False]['text':'','line_number':333,'multiline':False]['text':' Conversion','line_number':334,'multiline':False]['text':'','line_number':335,'multiline':False]['text':' Counts the number of requests on the granted queue, which have requested any kind of','line_number':337,'multiline':False]['text':' conflicting conversion and are blocked (i.e. all requests which are currently','line_number':338,'multiline':False]['text':' STATUS_CONVERTING). This is an optimization for unlocking in that we do not need to','line_number':339,'multiline':False]['text':' check the granted queue for requests in STATUS_CONVERTING if this count is zero. This','line_number':340,'multiline':False]['text':' saves cycles in the regular case and only burdens the less-frequent lock upgrade case.','line_number':341,'multiline':False]['text':' Counts the number of requests on the granted queue, which have requested that the policy','line_number':344,'multiline':False]['text':' be switched to compatible-first. As long as this value is > 0, the policy will stay','line_number':345,'multiline':False]['text':' compatible-first.','line_number':346,'multiline':False]['text':'*
 * The PartitionedLockHead allows optimizing the case where requests overwhelmingly use
 * the intent lock modes MODE_IS and MODE_IX, which are compatible with each other.
 * Having to use a single LockHead causes contention where none would be needed.
 * So, each Locker is associated with a specific partition containing a mapping
 * of resourceId to PartitionedLockHead.
 *
 * As long as all lock requests for a resource have an intent mode, as opposed to a conflicting
 * mode, its LockHead may reference PartitionedLockHeads. A partitioned LockHead will not have
 * any conflicts. The total set of granted requests (with intent mode) is the union of
 * its grantedList and all grantedLists in PartitionedLockHeads.
 *
 * The existence of a PartitionedLockHead for a resource implies that its LockHead is
 * partitioned. If a conflicting request is made on a LockHead, all requests from
 * PartitionedLockHeads are migrated to that LockHead and the LockHead no longer partitioned.
 *
 * Not thread-safe, must be accessed under its partition lock.
 * May not lock a LockManager bucket while holding a partition lock.
 ','line_number':350,'multiline':True]['text':' Doubly-linked list of requests, which have been granted. Newly granted requests go to the end','line_number':384,'multiline':False]['text':' of the queue. The PartitionedLockHead never contains anything but granted requests with','line_number':385,'multiline':False]['text':' intent modes.','line_number':386,'multiline':False]['text':' There can't be non-intent modes or conflicts when the lock is partitioned','line_number':393,'multiline':False]['text':' Migration time: lock each partition in turn and transfer its requests, if any','line_number':396,'multiline':False]['text':' Ordering is important here, as the next/prev fields are shared.','line_number':409,'multiline':False]['text':' Note that newRequest() will preserve the recursiveCount in this case','line_number':410,'multiline':False]['text':' Lock must still be granted','line_number':412,'multiline':False]['text':' Don't pop-back to early as otherwise the lock will be considered not partitioned in','line_number':417,'multiline':False]['text':' newRequest().','line_number':418,'multiline':False]['text':'','line_number':423,'multiline':False]['text':' LockManager','line_number':424,'multiline':False]['text':'','line_number':425,'multiline':False]['text':' Have more buckets than CPUs to reduce contention on lock and caches','line_number':427,'multiline':False]['text':' Balance scalability of intent locks against potential added cost of conflicting locks.','line_number':430,'multiline':False]['text':' The exact value doesn't appear very important, but should be power of two','line_number':431,'multiline':False]['text':' static','line_number':434,'multiline':False]['text':' static','line_number':439,'multiline':False]['text':' static','line_number':444,'multiline':False]['text':' Operation context specific information','line_number':455,'multiline':False]['text':' The client information','line_number':458,'multiline':False]['text':' TODO: dump more information about the non-empty bucket to see what locks were leaked','line_number':479,'multiline':False]['text':' Sanity check that requests are not being reused without proper cleanup','line_number':488,'multiline':False]['text':' For intent modes, try the PartitionedLockHead','line_number':494,'multiline':False]['text':' Fast path for intent locks','line_number':500,'multiline':False]['text':' Unsuccessful: there was no PartitionedLockHead yet, so use regular LockHead.','line_number':507,'multiline':False]['text':' Must not hold any locks. It is OK for requests with intent modes to be on','line_number':508,'multiline':False]['text':' both a PartitionedLockHead and a regular LockHead, so the race here is benign.','line_number':509,'multiline':False]['text':' Use regular LockHead, maybe start partitioning','line_number':512,'multiline':False]['text':' Start a partitioned lock if possible','line_number':519,'multiline':False]['text':' For the first lock with a non-intent mode, migrate requests from partitioned lock heads','line_number':530,'multiline':False]['text':' If we are here, we already hold the lock in some mode. In order to keep it simple, we do','line_number':540,'multiline':False]['text':' not allow requesting a conversion while a lock is already waiting or pending conversion.','line_number':541,'multiline':False]['text':' Fast path for acquiring the same lock multiple times in modes, which are already covered','line_number':546,'multiline':False]['text':' by the current mode. It is safe to do this without locking, because 1) all calls for the','line_number':547,'multiline':False]['text':' same lock request must be done on the same thread and 2) if there are lock requests','line_number':548,'multiline':False]['text':' hanging off a given LockHead, then this lock will never disappear.','line_number':549,'multiline':False]['text':' TODO: For the time being we do not need conversions between unrelated lock modes (i.e.,','line_number':555,'multiline':False]['text':' modes which both add and remove to the conflicts set), so these are not implemented yet','line_number':556,'multiline':False]['text':' (e.g., S -> IX).','line_number':557,'multiline':False]['text':' Construct granted mask without our current mode, so that it is not counted as','line_number':574,'multiline':False]['text':' conflicting','line_number':575,'multiline':False]['text':' We start the counting at 1 below, because LockModesCount also includes MODE_NONE','line_number':578,'multiline':False]['text':' at position 0, which can never be acquired/granted.','line_number':579,'multiline':False]['text':' This check favours conversion requests over pending requests. For example:','line_number':588,'multiline':False]['text':'','line_number':589,'multiline':False]['text':' T1 requests lock L in IS','line_number':590,'multiline':False]['text':' T2 requests lock L in X','line_number':591,'multiline':False]['text':' T1 then upgrades L from IS -> S','line_number':592,'multiline':False]['text':'','line_number':593,'multiline':False]['text':' Because the check does not look into the conflict modes bitmap, it will grant L to','line_number':594,'multiline':False]['text':' T1 in S mode, instead of block, which would otherwise cause deadlock.','line_number':595,'multiline':False]['text':' No conflict, existing request','line_number':604,'multiline':False]['text':' Unlocking a lock that was acquired as partitioned. The lock request may since have','line_number':618,'multiline':False]['text':' moved to the lock head, but there is no safe way to find out without synchronizing','line_number':619,'multiline':False]['text':' thorough the partition mutex. Migrations are expected to be rare.','line_number':620,'multiline':False]['text':'  Fast path: still partitioned.','line_number':629,'multiline':False]['text':' not partitioned anymore, fall through to regular case','line_number':635,'multiline':False]['text':' This releases a currently held lock and is the most common path, so it should be','line_number':647,'multiline':False]['text':' as efficient as possible. The fast path for decrementing multiple references did','line_number':648,'multiline':False]['text':' already ensure request->recursiveCount == 0.','line_number':649,'multiline':False]['text':' Remove from the granted list','line_number':651,'multiline':False]['text':' This cancels a pending lock request','line_number':663,'multiline':False]['text':' This cancels a pending convert request','line_number':671,'multiline':False]['text':' Lock only goes from GRANTED to CONVERTING, so cancelling the conversion request','line_number':675,'multiline':False]['text':' brings it back to the previous granted mode.','line_number':676,'multiline':False]['text':' Invalid request status','line_number':686,'multiline':False]['text':' The conflict set of the newMode should be a subset of the conflict set of the old mode.','line_number':697,'multiline':False]['text':' Can't downgrade from S -> IX for example.','line_number':698,'multiline':False]['text':' Unblock any converting requests (because conversions are still counted as granted and','line_number':751,'multiline':False]['text':' are on the granted queue).','line_number':752,'multiline':False]['text':' Conversion requests are going in a separate queue','line_number':756,'multiline':False]['text':' Construct granted mask without our current mode, so that it is not accounted as','line_number':760,'multiline':False]['text':' a conflict','line_number':761,'multiline':False]['text':' We start the counting at 1 below, because LockModesCount also includes','line_number':764,'multiline':False]['text':' MODE_NONE at position 0, which can never be acquired/granted.','line_number':765,'multiline':False]['text':' We cannot both hold and wait on the same lock mode','line_number':773,'multiline':False]['text':' Grant any conflicting requests, which might now be unblocked. Note that the loop below','line_number':793,'multiline':False]['text':' slightly violates fairness in that it will grant *all* compatible requests on the line even','line_number':794,'multiline':False]['text':' though there might be conflicting ones interspersed between them. For example, assume that an','line_number':795,'multiline':False]['text':' X lock was just freed and the conflict queue looks like this:','line_number':796,'multiline':False]['text':'','line_number':797,'multiline':False]['text':'      IS -> IS -> X -> X -> S -> IS','line_number':798,'multiline':False]['text':'','line_number':799,'multiline':False]['text':' In strict FIFO, we should grant the first two IS modes and then stop when we reach the first','line_number':800,'multiline':False]['text':' X mode (the third request on the queue). However, the loop below would actually grant all IS','line_number':801,'multiline':False]['text':' + S modes and once they all drain it will grant X. The reason for this behaviour is','line_number':802,'multiline':False]['text':' increasing system throughput in the scenario where mutually compatible requests are','line_number':803,'multiline':False]['text':' interspersed with conflicting ones. For example, this would be a worst-case scenario for','line_number':804,'multiline':False]['text':' strict FIFO, because it would make the execution sequential:','line_number':805,'multiline':False]['text':'','line_number':806,'multiline':False]['text':'      S -> X -> S -> X -> S -> X','line_number':807,'multiline':False]['text':' Set on enabling compatibleFirst mode.','line_number':811,'multiline':False]['text':' Store the actual next pointer, because we muck with the iter below and move it to','line_number':816,'multiline':False]['text':' the granted queue.','line_number':817,'multiline':False]['text':' If iter doesn't have a previous pointer, this means that it is at the front of the','line_number':821,'multiline':False]['text':' queue. If we continue scanning the queue beyond this point, we will starve it by','line_number':822,'multiline':False]['text':' granting more and more requests. However, if we newly transition to compatibleFirst','line_number':823,'multiline':False]['text':' mode, grant any waiting compatible requests.','line_number':824,'multiline':False]['text':' Remove from the conflicts list','line_number':833,'multiline':False]['text':' Add to the granted list','line_number':837,'multiline':False]['text':' Small optimization - nothing is compatible with a newly granted MODE_X, so no point in','line_number':847,'multiline':False]['text':' looking further in the conflict queue. Conflicting MODE_X requests are skipped above.','line_number':848,'multiline':False]['text':' This is a convenient place to check that the state of the two request queues is in sync','line_number':854,'multiline':False]['text':' with the bitmask on the modes.','line_number':855,'multiline':False]['text':' LockInfo cleans the unused locks as it goes, but dump doesn't.','line_number':903,'multiline':False]['text':'','line_number':980,'multiline':False]['text':' LockRequest','line_number':981,'multiline':False]['text':'','line_number':982,'multiline':False]['text':'','line_number':1004,'multiline':False]['text':' Helper calls','line_number':1005,'multiline':False]['text':'','line_number':1006,'multiline':False]['text':' namespace mongo','line_number':1025,'multiline':False]