['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':44,'multiline':False]['text':' namespace mutablebson','line_number':99,'multiline':False]['text':'*
 * A simple set of type-erased hooks for pre and post command actions.
 *
 * These hooks will only run on external requests that form CommandInvocations (a.k.a. OP_MSG
 * requests). They are not applied for runCommandDirectly() or raw CommandInvocation::run() calls.
 ','line_number':109,'multiline':True]['text':'*
     * Set `hooks` as the `CommandInvocationHooks` decoration of `serviceContext`
     ','line_number':117,'multiline':True]['text':'*
     * A behavior to perform before CommandInvocation::run()
     ','line_number':124,'multiline':True]['text':'*
     * A behavior to perform before CommandInvocation::asyncRun(). Defaults to `onBeforeRun(...)`.
     ','line_number':131,'multiline':True]['text':'*
     * A behavior to perform after CommandInvocation::run(). Note that the response argument is not
     * const, because the ReplyBuilderInterface does not expose any const methods to inspect the
     * response body. However, onAfterRun must not mutate the response body.
     ','line_number':139,'multiline':True]['text':'*
     * A behavior to perform after CommandInvocation::asyncRun(). Defaults to `onAfterRun(...)`.
     ','line_number':149,'multiline':True]['text':' Various helpers unrelated to any single command or to the command registry.','line_number':158,'multiline':False]['text':' Would be a namespace, but want to keep it closed rather than open.','line_number':159,'multiline':False]['text':' Some of these may move to the BasicCommand shim if they are only for legacy implementations.','line_number':160,'multiline':False]['text':' The type of the first field in 'cmdObj' must be mongo::String. The first field is','line_number':164,'multiline':False]['text':' interpreted as a collection name.','line_number':165,'multiline':False]['text':' The type of the first field in 'cmdObj' must be mongo::String or Symbol.','line_number':168,'multiline':False]['text':' The first field is interpreted as a collection name.','line_number':169,'multiline':False]['text':' Check that the namespace string references a collection that holds documents','line_number':175,'multiline':False]['text':' rather than an internal configuration collection (the names of which contain','line_number':176,'multiline':False]['text':' a $). The one exception is kLocalOplogDollarMain, which is considered valid','line_number':177,'multiline':False]['text':' despite containing $.','line_number':178,'multiline':False]['text':'*
     * Return the namespace for the command. If the first field in 'cmdObj' is of type
     * mongo::String, then that field is interpreted as the collection name.
     * If the first field is not of type mongo::String, then the namespace only has database name.
     ','line_number':181,'multiline':True]['text':'*
     * Utility that returns a ResourcePattern for the namespace returned from
     * BasicCommand::parseNs(dbname, cmdObj). This will be either an exact namespace resource
     * pattern or a database resource pattern, depending on whether parseNs returns a fully qualifed
     * collection name or just a database name.
     ','line_number':188,'multiline':True]['text':'*
     * Helper for setting errmsg and ok field in command result object.
     *
     * This should generally only be called from the command dispatch code or to finish off the
     * result of serializing a reply BSONObj in the case when it isn't going directly into a real
     * command reply to be returned to the user.
     ','line_number':199,'multiline':True]['text':'*
     * Adds the status fields to command replies.
     *
     * Calling this inside of commands to produce their reply is now deprecated. Just throw instead.
     ','line_number':210,'multiline':True]['text':'*
     * If "ok" field is present in `reply`, uses its truthiness.
     * Otherwise, the absence of failure is considered success, `reply` is patched to indicate it.
     * Returns true if reply indicates a success.
     ','line_number':217,'multiline':True]['text':'*
     * Helper for setting a writeConcernError field in the command result object if
     * a writeConcern error occurs.
     *
     * @param result is the BSONObjBuilder for the command response. This function creates the
     *               writeConcernError field for the response.
     * @param awaitReplicationStatus is the status received from awaitReplication.
     * @param wcResult is the writeConcernResult object that holds other write concern information.
     *      This is primarily used for populating errInfo when a timeout occurs, and is populated
     *      by waitForWriteConcern.
     ','line_number':224,'multiline':True]['text':'*
     * Forward generic arguments from a client request to shards.
     ','line_number':239,'multiline':True]['text':'*
     * Forward generic reply fields from a shard's reply to the client.
     ','line_number':245,'multiline':True]['text':'
     * Appends a generic WriteConcernOptions to a bson object
     ','line_number':253,'multiline':True]['text':'*
     * Returns a copy of 'cmdObj' with a majority writeConcern appended.  If the command object does
     * not contain a writeConcern, 'defaultWC' will be used instead, if supplied.
     ','line_number':258,'multiline':True]['text':'*
     * Rewrites cmdObj into a format safe to blindly forward to shards.
     *
     * This performs 2 transformations:
     * 1) $readPreference fields are moved into a subobject called $queryOptions. This matches the
     *    "wrapped" format historically used internally by mongos. Moving off of that format will be
     *    done as SERVER-29091.
     *
     * 2) Filter out generic arguments that shouldn't be blindly passed to the shards.  This is
     *    necessary because many mongos implementations of Command::run() just pass cmdObj through
     *    directly to the shards. However, some of the generic arguments fields are automatically
     *    appended in the egress layer. Removing them here ensures that they don't get duplicated.
     *
     * Ideally this function can be deleted once mongos run() implementations are more careful about
     * what they send to the shards.
     ','line_number':265,'multiline':True]['text':'*
     * Rewrites reply into a format safe to blindly forward from shards to clients.
     *
     * Ideally this function can be deleted once mongos run() implementations are more careful about
     * what they return from the shards.
     ','line_number':285,'multiline':True]['text':'*
     * Returns true if this a request for the 'help' information associated with the command.
     ','line_number':294,'multiline':True]['text':'*
     * Runs a command directly and returns the result. Does not do any other work normally handled
     * by command dispatch, such as checking auth, dealing with CurOp or waiting for write concern.
     * It is illegal to call this if the command does not exist.
     ','line_number':299,'multiline':True]['text':'*
     * Runs the command synchronously in presence of a dedicated thread.
     * Otherwise, runs the command asynchronously.
     ','line_number':306,'multiline':True]['text':'*
     * Runs a previously parsed CommandInvocation and propagates the result to the
     * ReplyBuilderInterface. This function is agnostic to the derived type of the CommandInvocation
     * but may mirror, forward, or do other supplementary actions with the request.
     ','line_number':314,'multiline':True]['text':'*
     * Runs a previously parsed command and propagates the result to the ReplyBuilderInterface. For
     * commands that do not offer an implementation tailored for asynchronous execution, the future
     * schedules the execution of the default implementation, historically designed for synchronous
     * execution.
     ','line_number':324,'multiline':True]['text':'*
     * If '!invocation', we're logging about a Command pre-parse. It has to punt on the logged
     * namespace, giving only the request's $db. Since the Command hasn't parsed the request body,
     * we can't know the collection part of that namespace, so we leave it blank in the audit log.
     ','line_number':333,'multiline':True]['text':'*
     * Should be called before trying to Command::parse a request. Throws 'Unauthorized',
     * and emits an audit log entry, as an early failure if the calling client can't invoke that
     * Command. Returns true if no more auth checks should be performed.
     ','line_number':345,'multiline':True]['text':'*
     * Asserts that a majority write concern was used for a command.
     ','line_number':354,'multiline':True]['text':'*
     * Verifies that command is allowed to run under a transaction in the given database or
     * namespaces, and throws if that verification doesn't pass.
     ','line_number':360,'multiline':True]['text':'*
     * Checks if the command passed in is in the list of failCommands defined in the fail point.
     ','line_number':371,'multiline':True]['text':'*
     * Checks if the command passed in is in the list of failCommands defined in the fail point.
     ','line_number':378,'multiline':True]['text':'*
     * Possibly uasserts according to the "failCommand" fail point.
     ','line_number':386,'multiline':True]['text':'*
     * Handles marking kill on client disconnect.
     ','line_number':392,'multiline':True]['text':'*
     * Provides diagnostics if the reply builder contains an internal-only error, and will cause
     * deferred-fatality when testing diagnostics is enabled.
     ','line_number':398,'multiline':True]['text':'*
 * Serves as a base for server commands. See the constructor for more details.
 ','line_number':406,'multiline':True]['text':'*
     * Constructs a new command and causes it to be registered with the global commands list. It is
     * not safe to construct commands other than when the server is starting up.
     *
     * @param oldName an old, deprecated name for the command
     ','line_number':414,'multiline':True]['text':'*
     * @param aliases the optional list of aliases (e.g., old names) for the command
     ','line_number':423,'multiline':True]['text':' Do not remove or relocate the definition of this "key function".','line_number':431,'multiline':False]['text':' See https://gcc.gnu.org/wiki/VerboseDiagnostics#missing_vtable','line_number':432,'multiline':False]['text':'*
     * Returns the command's name. This value never changes for the lifetime of the command.
     ','line_number':445,'multiline':True]['text':'* Returns the command's aliases if any. Constant. ','line_number':452,'multiline':True]['text':'*
     * Used by command implementations to hint to the rpc system how much space they will need in
     * their replies.
     ','line_number':457,'multiline':True]['text':'*
     * Return true if only the admin ns has privileges to run this command.
     ','line_number':465,'multiline':True]['text':'*
     * Returns the role this command has in the connection handshake.
     ','line_number':472,'multiline':True]['text':'
     * Returns the list of API versions that include this command.
     ','line_number':479,'multiline':True]['text':'
     * Returns the list of API versions in which this command is deprecated.
     ','line_number':484,'multiline':True]['text':'
     * Some commands permit any values for apiVersion, apiStrict, and apiDeprecationErrors.
     * For internal (server to server) commands we should skip checking api version.
     ','line_number':489,'multiline':True]['text':'*
     * Like adminOnly, but even stricter: we must either be authenticated for admin db,
     * or, if running without auth, on the local interface.  Used for things which
     * are so major that remote invocation may not make sense (e.g., shutdownServer).
     *
     * When localHostOnlyIfNoAuth() is true, adminOnly() must also be true.
     ','line_number':497,'multiline':True]['text':'*
     * Note that secondaryAllowed should move to CommandInvocation but cannot because there is
     * one place (i.e. 'listCommands') that inappropriately produces the "secondaryOk" and
     * "secondaryOverrideOk" fields for each Command without regard to payload. This is
     * inappropriate because for some Commands (e.g. 'aggregate'), these properties depend
     * on request payload. See SERVER-34578 for fixing listCommands.
     ','line_number':508,'multiline':True]['text':'*
     * Override and return false if the command opcounters should not be incremented on
     * behalf of this command.
     ','line_number':517,'multiline':True]['text':'*
     * Override and return true if the query opcounters should be incremented on
     * behalf of this command.
     ','line_number':525,'multiline':True]['text':'*
     * Override and return true if the readConcernCounters and readPreferenceCounters in
     * serverStatus should be incremented on behalf of this command. This should be true for
     * read operations.
     ','line_number':533,'multiline':True]['text':'*
      Returns true if this command collects operation resource consumption metrics.
     ','line_number':542,'multiline':True]['text':'*
     * Return true if the command requires auth.
     ','line_number':549,'multiline':True]['text':'*
     * Generates help text for this command.
     ','line_number':556,'multiline':True]['text':'*
     * Redacts "cmdObj" in-place to a form suitable for writing to logs.
     *
     * The default implementation removes the field returned by sensitiveFieldName.
     *
     * This is NOT used to implement user-configurable redaction of PII. Instead, that is
     * implemented via the set of redact() free functions, which are no-ops when log redaction is
     * disabled. All PII must pass through one of the redact() overloads before being logged.
     ','line_number':563,'multiline':True]['text':'*
     * Marks a field name in a cmdObj as sensitive.
     *
     * The default snipForLogging shall remove these field names. Auditing shall not
     * include these fields in audit outputs.
     ','line_number':574,'multiline':True]['text':'*
     * Return true if a replica set secondary should go into "recovering"
     * (unreadable) state while running this command.
     ','line_number':584,'multiline':True]['text':'*
     * Return true if command should be permitted when a replica set secondary is in "recovering"
     * (unreadable) state.
     ','line_number':592,'multiline':True]['text':' assumed true prior to commit ','line_number':597,'multiline':True]['text':'*
     * Returns LogicalOp for this command.
     ','line_number':600,'multiline':True]['text':'*
     * Returns whether this operation is a read, write, command, or multi-document transaction.
     *
     * Commands which implement database read or write logic should override this to return kRead
     * or kWrite as appropriate.
     ','line_number':607,'multiline':True]['text':'*
     * Increment counter for how many times this command has executed.
     ','line_number':618,'multiline':True]['text':'*
     * Increment counter for how many times this command has failed.
     ','line_number':625,'multiline':True]['text':'*
     * Generates a reply from the 'help' information associated with a command. The state of
     * the passed ReplyBuilder will be in kOutputDocs after calling this method.
     ','line_number':632,'multiline':True]['text':'*
     * If true, the logical sessions attached to the command request will be attached to the
     * request's operation context. Note that returning false can potentially strip the logical
     * session from the request in multi-staged invocations, like for example, mongos -> mongod.
     * This can have security implications so think carefully before returning false.
     ','line_number':640,'multiline':True]['text':'*
     * Checks if the command is also known by the provided alias.
     ','line_number':650,'multiline':True]['text':'*
     * Audit when this command fails authz check.
     ','line_number':655,'multiline':True]['text':'*
     * By default, no newly created command is permitted under multitenancy.
     * Implementations must override this to true to permit use.
     ','line_number':662,'multiline':True]['text':'*
     * Get the authorization contract for this command. nullptr means no contract has been
     * specified.
     ','line_number':670,'multiline':True]['text':'*
     * Returns true if this command supports apply once semantic when retried.
     ','line_number':678,'multiline':True]['text':'*
     * Returns true if sessions should be checked out when lsid and txnNumber is present in the
     * request.
     ','line_number':685,'multiline':True]['text':'*
     * Returns true if this is a command related to managing the lifecycle of a transaction.
     ','line_number':693,'multiline':True]['text':'*
     * Returns true if this command can be run in a transaction.
     ','line_number':700,'multiline':True]['text':'*
     * Override to true if this command should be allowed on a direct shard connection regardless
     * of the directShardOperations ActionType.
     ','line_number':707,'multiline':True]['text':' Counters for how many times this command has been executed and failed','line_number':719,'multiline':False]['text':'*
 * Represents a single invocation of a given command.
 ','line_number':724,'multiline':True]['text':'*
     * Runs the command, filling in result. Any exception thrown from here will cause result
     * to be reset and filled in with the error. Non-const to permit modifying the request
     * type to perform normalization. Calls that return normally without setting an "ok"
     * field into result are assumed to have completed successfully. Failure should be
     * indicated either by throwing (preferred), or by calling
     * `CommandHelpers::extractOrAppendOk`.
     ','line_number':739,'multiline':True]['text':'*
     * Returns a future that can schedule asynchronous execution of the command. By default, the
     * future falls back to the execution of `run(...)`, thus the default semantics of
     * `runAsync(...)` is identical to that of `run(...).
     ','line_number':749,'multiline':True]['text':'*
     * The primary namespace on which this command operates. May just be the db.
     ','line_number':766,'multiline':True]['text':'*
     * All of the namespaces this command operates on. For most commands will just be ns().
     ','line_number':771,'multiline':True]['text':'*
     * Returns true if this command should be parsed for a writeConcern field and wait
     * for that write concern to be satisfied after the command runs.
     ','line_number':778,'multiline':True]['text':'*
     * Returns this invocation's support for readConcern.
     ','line_number':784,'multiline':True]['text':'*
     * Returns if this invocation is safe to run on a borrowed threading model.
     *
     * In practice, this is attempting to predict if the operation will do network or storage reads
     * and writes. It will allow auth commands for the most part, since while they do involve
     * network or storage operations, they are not targeting the storage engine or remote
     * mongo-server nodes.
     ','line_number':797,'multiline':True]['text':' If the command has maintenance implications, it has storage implications.','line_number':807,'multiline':False]['text':' If the command supports write concern, it has storage and network implications.','line_number':812,'multiline':False]['text':' isImplicitDefault ','line_number':817,'multiline':True]['text':' If the command supports read concern, it has storage and newtork implications.','line_number':819,'multiline':False]['text':'*
     * Returns if this invocation can be mirrored to secondaries
     ','line_number':826,'multiline':True]['text':'*
     * Returns the name of the database that should be targeted for the mirrored read.
     ','line_number':833,'multiline':True]['text':'*
     * Returns a BSONObj that can be safely mirrored to secondaries for cache warming.
     ','line_number':840,'multiline':True]['text':'*
     * Returns if this invocation is a mirrored read.
     ','line_number':847,'multiline':True]['text':'*
     * Sets that this operation is a mirrored read.
     ','line_number':854,'multiline':True]['text':'*
     * Returns true if command allows afterClusterTime in its readConcern. The command may not allow
     * it if it is specifically intended not to take any LockManager locks. Waiting for
     * afterClusterTime takes the MODE_IS lock.
     ','line_number':861,'multiline':True]['text':'*
     * Returns true if a command may be able to safely ignore prepare conflicts. Only commands that
     * can guarantee they will only perform reads may ignore prepare conflicts.
     ','line_number':870,'multiline':True]['text':'*
     * Returns true if this command invocation is allowed to utilize "speculative" majority reads to
     * service 'majority' read concern requests. This allows a query to satisfy a 'majority' read
     * without storage engine support for reading from a historical snapshot.
     *
     * Note: This feature is currently only limited to a very small subset of commands (related to
     * change streams), and is not intended to be generally used, which is why it is disabled by
     * default.
     ','line_number':878,'multiline':True]['text':'*
     * The command definition that this invocation runs.
     * Note: nonvirtual.
     ','line_number':891,'multiline':True]['text':'*
     * Throws DBException, most likely `ErrorCodes::Unauthorized`, unless
     * the client executing "opCtx" is authorized to run the given command
     * with the given parameters on the given named database.
     * Note: nonvirtual.
     * The 'request' must outlive this CommandInvocation.
     ','line_number':899,'multiline':True]['text':'*
     * Polymorphic extension point for `checkAuthorization`.
     * Throws unless `opCtx`'s client is authorized to `run()` this.
     ','line_number':912,'multiline':True]['text':'*
 * A subclass of Command that only cares about the BSONObj body and doesn't need access to document
 * sequences. Commands should implement this class if they require access to the
 * ReplyBuilderInterface (e.g. to set the next invocation for an exhaust command).
 ','line_number':923,'multiline':True]['text':'','line_number':943,'multiline':False]['text':' Interface for subclasses to implement','line_number':944,'multiline':False]['text':'','line_number':945,'multiline':False]['text':'*
     * Runs the given command. Returns true upon success.
     ','line_number':947,'multiline':True]['text':'*
     * Provides a future that may run the command asynchronously. By default, it falls back to
     * runWithReplyBuilder.
     ','line_number':955,'multiline':True]['text':'*
     * Commands which can be explained override this method. Any operation which has a query
     * part and executes as a tree of execution stages can be explained. A command should
     * implement explain by:
     *
     *   1) Calling its custom parse function in order to parse the command. The output of
     *   this function should be a CanonicalQuery (representing the query part of the
     *   operation), and a PlanExecutor which wraps the tree of execution stages.
     *
     *   2) Calling Explain::explainStages(...) on the PlanExecutor. This is the function
     *   which knows how to convert an execution stage tree into explain output.
     ','line_number':968,'multiline':True]['text':'*
     * Checks if the client associated with the given OperationContext is authorized to run this
     * command.
     * Command imlpementations MUST provide a method here, even if no authz checks are required.
     * Such commands should return Status::OK(), with a comment stating "No auth required".
     ','line_number':985,'multiline':True]['text':'*
     * supportsWriteConcern returns true if this command should be parsed for a writeConcern
     * field and wait for that write concern to be satisfied after the command runs.
     *
     * @param cmd is a BSONObj representation of the command that is used to determine if the
     *            the command supports a write concern.
     ','line_number':995,'multiline':True]['text':'*
     * Returns true if this Command supports the given readConcern level. Takes the command object
     * and the name of the database on which it was invoked as arguments, so that readConcern can be
     * conditionally rejected based on the command's parameters and/or namespace.
     *
     * If a readConcern level argument is sent to a command that returns false the command processor
     * will reject the command, returning an appropriate error message.
     *
     * Note that this is never called on mongos. Sharded commands are responsible for forwarding
     * the option to the shards as needed. We rely on the shards to fail the commands in the
     * cases where it isn't supported.
     ','line_number':1004,'multiline':True]['text':'*
     * Returns if the cmdObj can be mirrored to secondaries in some form.
     ','line_number':1027,'multiline':True]['text':'*
     * Returns a modified form of cmdObj that can be safely mirrored to secondaries for cache
     * warming.
     ','line_number':1034,'multiline':True]['text':'*
     * Returns true if a command may be able to safely ignore prepare conflicts. Only commands that
     * can guarantee they will only perform reads may ignore prepare conflicts.
     ','line_number':1046,'multiline':True]['text':'*
 * Commands should implement this class if they do not require access to the ReplyBuilderInterface.
 ','line_number':1059,'multiline':True]['text':'*
     * Runs the given command. Returns true upon success.
     ','line_number':1066,'multiline':True]['text':'*
 * A CRTP base class for BasicCommandWithRequestParser, which simplifies writing commands that
 * accept requests generated by IDL to enforce API versioning and to overcome the complexity
 * to standardize the output generated by commands using IDL.
 *
 * Derive from it as follows:
 *
 *     class MyCommand : public BasicCommandWithRequestParser<MyCommand> {...};
 *
 * The 'Derived' type parameter must have:
 *
 *   - 'Request' naming a usable request type.
 *     A usable Request type must have:
 *
 *      - a static member factory function 'parse', callable as:
 *
 *         const IDLParserContext& idlCtx = ...;
 *         const OpMsgRequest& opMsgRequest = ...;
 *         Request r = Request::parse(idlCtx, opMsgRequest);
 *
 *      which enables it to be parsed as an IDL command.
 *
 *      - a 'static constexpr StringData kCommandName' member.
 *      - (optional) a 'static constexpr StringData kCommandAlias' member.
 *
 *   - validateResult: that has a custom logic to validate the result BSON object
 *     to enforce API versioning.
 *
 ','line_number':1083,'multiline':True]['text':' Empty. Means no alias.','line_number':1120,'multiline':False]['text':' To enforce API versioning','line_number':1136,'multiline':False]['text':' Only validate results in test mode so that we don't expose users to errors if we','line_number':1141,'multiline':False]['text':' construct an invalid reply.','line_number':1142,'multiline':False]['text':'*
     * Runs the given command. Returns true upon success.
     ','line_number':1152,'multiline':True]['text':' Custom logic to validate results to enforce API versioning.','line_number':1161,'multiline':False]['text':'
     * If the result is an error, assert that it satisfies the IDL-defined requirements on a
     * command error reply.
     * Calls to this function should be done only in test mode so that we don't expose users to
     * errors if we construct an invalid error reply.
     ','line_number':1164,'multiline':True]['text':' Result has "writeConcernError" field but it is not valid wce object.','line_number':1174,'multiline':False]['text':' Will throw if the result doesn't match the ErrorReply.','line_number':1182,'multiline':False]['text':'*
 * Deprecated. Do not add new subclasses.
 ','line_number':1218,'multiline':True]['text':'*
 * A CRTP base class for typed commands, which simplifies writing commands that
 * accept requests generated by IDL. Derive from it as follows:
 *
 *     class MyCommand : public TypedCommand<MyCommand> {...};
 *
 * The 'Derived' type parameter must have:
 *
 *   - 'Request' naming a usable request type.
 *     A usable Request type must have:
 *
 *      - a static member factory function 'parse', callable as:
 *
 *         const IDLParserContext& idlCtx = ...;
 *         const OpMsgRequest& opMsgRequest = ...;
 *         Request r = Request::parse(idlCtx, opMsgRequest);
 *
 *      which enables it to be parsed as an IDL command.
 *
 *      - a 'constexpr StringData kCommandName' member.
 *
 *     Any type generated by the "commands:" section in the IDL syntax meets these
 *     requirements.  Note that IDL "structs:" will not. This is the recommended way to
 *     provide this Derived::Request type rather than writing it by hand.
 *
 *   - 'Invocation' - names a type derived from either of the nested invocation
 *     base classes provided: InvocationBase or MinimalInvocationBase.
 ','line_number':1235,'multiline':True]['text':' Used instead of InvocationBase when a command must customize the 'run()' member.','line_number':1272,'multiline':False]['text':' Commands that only have a single name don't need to define any constructors.','line_number':1275,'multiline':False]['text':' A command with 'apiStrict' cannot be invoked with alias.','line_number':1312,'multiline':False]['text':' Implemented as just a strong typedef for InvocationBaseInternal.','line_number':1331,'multiline':False]['text':'
 * Classes derived from TypedCommand::InvocationBase must:
 *
 *   - inherit constructors with 'using InvocationBase::InvocationBase;'.
 *
 *   - define a 'typedRun' method like:
 *
 *       R typedRun(OperationContext* opCtx);
 *
 *     where R is one of:
 *        - void
 *        - T, where T is usable with fillFrom.
 *
 *     Note: a void typedRun produces a "pass-fail" command. If it runs to completion
 *     the result will be considered and formatted as an "ok".
 *
 *  If the TypedCommand's Request type was specified with the IDL attribute:
 *
 *     namespace: concatenate_with_db
 *
 *  then the ns() method of its Invocation class method should be:
 *
 *     NamespaceString ns() const override {
 *         return request.getNamespace();
 *     }
 ','line_number':1335,'multiline':True]['text':'*
     * _callTypedRun and _runImpl implement the tagged dispatch from 'run'.
     ','line_number':1369,'multiline':True]['text':'*
     * Invokes a callable `f` for each distinct `Command* c` in the registry, as `f(c)`.
     * A `Command*` may be mapped to multiple aliases, but these are omitted
     * from the callback sequence.
     ','line_number':1397,'multiline':True]['text':'* Add `command` to the registry. ','line_number':1408,'multiline':True]['text':'* Convenience overload. ','line_number':1428,'multiline':True]['text':'*
 * When CommandRegistry objects are initialized, they look into the global
 * CommandConstructionPlan to find the list of Command objects that need to
 * be created.
 *
 * It will be populated mainly by the use of EntryBuilder objects.
 ','line_number':1441,'multiline':True]['text':'*
     * Adds to the specified `registry` an instance of all apppriate Command types in this plan.
     * Appropriate is determined by the Entry data members, and by the specified `pred`.
     *
     * There are some server-wide criteria applied automatically:
     *
     *   - FeatureFlag-enabled commands are filtered out according to flag settings.
     *
     *   - testOnly registrations are only created if the server is in testOnly mode.
     *
     * Other criteria can be applied via the caller-supplied `pred`. A `Command`
     * will only be created for an `entry` if the `pred(entry)` passes.
     ','line_number':1470,'multiline':True]['text':'*
     * Calls `execute` with a predicate that enables Commands appropriate for
     * the specified `service`.
     ','line_number':1487,'multiline':True]['text':'*
 * CommandRegisterer objects attach entries to this instance at static-init
 * time by default.
 ','line_number':1499,'multiline':True]['text':'*
 * Builder type designed to inject entries into the global
 * `CommandConstructionPlan`.
 * Example:
 *
 *   auto dum = *CommandConstructionPlan::EntryBuilder::make<CmdType>()
 *       .requiresFeatureFlag(&myFeatureFlag)
 *       .testOnly();
 ','line_number':1505,'multiline':True]['text':'*
     * Returns a builder specifying a simple value-initialized instance of
     * `Cmd`.
     ','line_number':1516,'multiline':True]['text':'*
     * Role specification is mandatory for all EntryBuilders, through addRoles,
     * forShard, and forRouter.
     ','line_number':1532,'multiline':True]['text':'* Add the shard server role. ','line_number':1544,'multiline':True]['text':'* Add the router server role. ','line_number':1549,'multiline':True]['text':'*
     * Denotes a test-only command. See docs/test_commands.md.
     ','line_number':1554,'multiline':True]['text':'*
     * A command object will be created only if the featureFlag is enabled,
     * regardless of the current FCV.
     ','line_number':1562,'multiline':True]['text':'*
     * Set the plan into which the entry will be registered. Used for testing.
     * The default is the `globalCommandConstructionPlan()` singleton.
     ','line_number':1571,'multiline':True]['text':'* The deref operator executes the build, registering the product. ','line_number':1590,'multiline':True]['text':'*
 * Creates a builder for CommandConstuctorPlan entry, which will
 * create a Command of the specified CmdType.
 *
 * Does not end with `;`, which allows attachment of
 * properties to the command plan entry before it is registered.
 * Example:
 *
 *     MONGO_REGISTER_COMMAND(MyCommandType)
 *        .testOnly()
 *        .forFeatureFlag(&myFeatureFlag)
 *        .forShard();
 ','line_number':1604,'multiline':True]['text':' namespace mongo','line_number':1623,'multiline':False]