['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Check that the initial time does not change during VectorClock creation.','line_number':72,'multiline':False]['text':' Verify the reserve ticks functionality.','line_number':83,'multiline':False]['text':' Set clock to a non-zero time, so we can verify wall clock synchronization.','line_number':85,'multiline':False]['text':' Make sure we synchronized with the wall clock.','line_number':92,'multiline':False]['text':' Ensure overflow to a new second.','line_number':107,'multiline':False]['text':' Verify the advanceClusterTime functionality.','line_number':114,'multiline':False]['text':' Verify rate limiter rejects cluster times whose seconds values are too far ahead.','line_number':122,'multiline':False]['text':' Add 10 seconds to ensure limit is exceeded.','line_number':129,'multiline':False]['text':' Verify cluster time can be initialized to a very old time.','line_number':137,'multiline':False]['text':' Verify writes to the oplog advance cluster time.','line_number':151,'multiline':False]['text':' Tests the scenario where an admin incorrectly sets the wall clock more than','line_number':165,'multiline':False]['text':' maxAcceptableLogicalClockDriftSecs in the past at startup, and cluster time is initialized to','line_number':166,'multiline':False]['text':' the incorrect past time, then the admin resets the clock to the current time. In this case,','line_number':167,'multiline':False]['text':' cluster time can be advanced through metadata as long as the new time isn't','line_number':168,'multiline':False]['text':' maxAcceptableLogicalClockDriftSecs ahead of the correct current wall clock time, since the rate','line_number':169,'multiline':False]['text':' limiter compares new times to the wall clock, not the cluster time.','line_number':170,'multiline':False]['text':' Current wall clock and cluster time.','line_number':174,'multiline':False]['text':' Set wall clock more than maxAcceptableLogicalClockDriftSecs seconds in the past.','line_number':178,'multiline':False]['text':' If cluster time is either uninitialized or even farther in the past, a write would set','line_number':182,'multiline':False]['text':' cluster time more than maxAcceptableLogicalClockDriftSecs in the past.','line_number':183,'multiline':False]['text':' Set wall clock to the current time on the affected node.','line_number':189,'multiline':False]['text':' Verify that maxAcceptableLogicalClockDriftSecs parameter does not need to be increased to','line_number':192,'multiline':False]['text':' advance cluster time through metadata back to the current time.','line_number':193,'multiline':False]['text':' Tests the scenario where an admin incorrectly sets the wall clock more than','line_number':198,'multiline':False]['text':' maxAcceptableLogicalClockDriftSecs in the future and a write is accepted, advancing cluster','line_number':199,'multiline':False]['text':' time, then the admin resets the clock to the current time. In this case, cluster time cannot be','line_number':200,'multiline':False]['text':' advanced through metadata unless the drift parameter is increased.','line_number':201,'multiline':False]['text':' Current wall clock and cluster time.','line_number':205,'multiline':False]['text':' Set wall clock more than maxAcceptableLogicalClockDriftSecs seconds in the future.','line_number':209,'multiline':False]['text':' A write gets through and advances cluster time more than maxAcceptableLogicalClockDriftSecs','line_number':213,'multiline':False]['text':' in the future.','line_number':214,'multiline':False]['text':' Set wall clock to the current time on the affected node.','line_number':220,'multiline':False]['text':' Verify that maxAcceptableLogicalClockDriftSecs parameter has to be increased to advance','line_number':223,'multiline':False]['text':' cluster time through metadata.','line_number':224,'multiline':False]['text':' The next lowest cluster time.','line_number':226,'multiline':False]['text':' Set wall clock to the current time + 1 day to simulate increasing the','line_number':231,'multiline':False]['text':' maxAcceptableLogicalClockDriftSecs parameter, which can only be set at startup, and verify','line_number':232,'multiline':False]['text':' time can be advanced through metadata again.','line_number':233,'multiline':False]['text':' Verify the behavior of advancing cluster time around the max allowed values.','line_number':240,'multiline':False]['text':' Ensure the clock starts at 0.','line_number':242,'multiline':False]['text':' Verify clock can be advanced near the max values.','line_number':245,'multiline':False]['text':' Can always advance to the max value for the inc field.','line_number':247,'multiline':False]['text':' Can overflow inc into seconds to reach max seconds value.','line_number':260,'multiline':False]['text':' Can advance inc field when seconds field is at the max value.','line_number':273,'multiline':False]['text':' Can advance to the max value for both the inc and seconds fields.','line_number':282,'multiline':False]['text':' Verify scenarios where the clock cannot be advanced.','line_number':291,'multiline':False]['text':' Can't overflow inc into seconds when seconds field is at the max value.','line_number':293,'multiline':False]['text':' Verify behavior of advancing cluster time when the wall clock is near the max allowed value.','line_number':311,'multiline':False]['text':' Can be set to the max possible time by catching up to the wall clock.','line_number':313,'multiline':False]['text':' Should fail when wall clock would advance cluster time beyond the max allowed time.','line_number':320,'multiline':False]['text':' Verify the clock rejects cluster times greater than the max allowed time.','line_number':328,'multiline':False]['text':' A cluster time can be greater than the maximum value allowed because the signed integer','line_number':330,'multiline':False]['text':' maximum is used for legacy compatibility, but these fields are stored as unsigned integers.','line_number':331,'multiline':False]['text':' The clock can't be initialized to a time greater than the max possible.','line_number':334,'multiline':False]['text':' The time can't be advanced through metadata to a time greater than the max possible.','line_number':340,'multiline':False]['text':' Advance the wall clock close enough to the new value so the rate check is passed.','line_number':341,'multiline':False]['text':' unnamed namespace','line_number':349,'multiline':False]['text':' namespace mongo','line_number':350,'multiline':False]