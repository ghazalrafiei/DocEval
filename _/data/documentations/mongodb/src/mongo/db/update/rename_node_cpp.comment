['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':31,'multiline':False]['text':'*
 * The SetElementNode class provides the $set functionality for $rename. A $rename from a source
 * field to a destination field behaves logically like a $set on the destination followed by a
 * $unset on the source, and the first of those operations is executed by calling apply on a
 * SetElementNode object. We create a class for this purpose (rather than a stand-alone function) so
 * that it can inherit from ModifierNode.
 *
 * Unlike SetNode, SetElementNode takes a mutablebson::Element as its input. Additionally,
 * SetElementNode::updateExistingElement() does not check for the possibility that we are
 * overwriting the target value with an identical source value (a no-op). That check would require
 * us to convert _elemToSet from a mutablebson::Element to a BSONElement, which is not worth the
 * extra time.
 ','line_number':57,'multiline':True]['text':'*
     * These internally-generated nodes do not need to be serialized.
     ','line_number':84,'multiline':True]['text':' Parsing {$rename: {'from': 'to'}} places nodes in the UpdateNode tree for both the "from" and','line_number':140,'multiline':False]['text':' "to" paths via UpdateObjectNode::parseAndMerge(), which will enforce this isUpdatable','line_number':141,'multiline':False]['text':' property.','line_number':142,'multiline':False]['text':' Though we could treat this as a no-op, it is illegal in the current implementation.','line_number':146,'multiline':False]['text':' It would make sense to store fromFieldRef and toFieldRef as members during','line_number':180,'multiline':False]['text':' RenameNode::init(), but FieldRef is not copyable.','line_number':181,'multiline':False]['text':' We could safely remove this restriction (thereby treating a rename with a non-viable','line_number':193,'multiline':False]['text':' source path as a no-op), but most updates fail on an attempt to update a non-viable path,','line_number':194,'multiline':False]['text':' so we throw an error for consistency.','line_number':195,'multiline':False]['text':' The previous uassertStatusOK should always throw.','line_number':198,'multiline':False]['text':' The element we want to rename does not exist. When that happens, we treat the operation','line_number':201,'multiline':False]['text':' as a no-op. The attempted from/to paths are still considered modified.','line_number':202,'multiline':False]['text':' Renaming through an array is prohibited. Check that our source path does not contain an','line_number':210,'multiline':False]['text':' array. (The element being renamed may be an array, however.)','line_number':211,'multiline':False]['text':' Check that our destination path does not contain an array. (If the rename will overwrite an','line_number':226,'multiline':False]['text':' existing element, that element may be an array. Iff pathToCreate is empty, "element"','line_number':227,'multiline':False]['text':' represents an element that we are going to overwrite.)','line_number':228,'multiline':False]['text':' Once we've determined that the rename is valid and found the source element, the actual work','line_number':246,'multiline':False]['text':' gets broken out into a $set operation and an $unset operation. Note that, generally, we','line_number':247,'multiline':False]['text':' should call the init() method of a ModifierNode before calling its apply() method, but the','line_number':248,'multiline':False]['text':' init() methods of SetElementNode and UnsetNode don't do anything, so we can skip them.','line_number':249,'multiline':False]['text':' Renames never "go through" arrays, so we're guaranteed all of the parts of the path are','line_number':256,'multiline':False]['text':' of type kFieldName.','line_number':257,'multiline':False]['text':' The $unset would only be a no-op if the source element did not exist, in which case we would','line_number':272,'multiline':False]['text':' have exited early with a no-op result.','line_number':273,'multiline':False]['text':' namespace mongo','line_number':279,'multiline':False]