['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Parses the 'updateExpr' update expression into the '_updateExecutor' member variable.
     * Uasserts if 'updateExpr' fails to parse.
     ','line_number':80,'multiline':True]['text':'*
     * Fills in document with any fields in the query which are valid.
     *
     * Valid fields include equality matches like "a":1, or "a.b":false
     *
     * Each valid field will be expanded (from dot notation) and conflicts will be
     * checked for all fields added to the underlying document.
     *
     * Returns Status::OK() if the document can be used. If there are any error or
     * conflicts along the way then those errors will be returned.
     *
     * If the current update is a document replacement, only the 'immutablePaths' are extracted from
     * 'query' and used to populate 'doc'.
     ','line_number':89,'multiline':True]['text':'*
     * Executes the update over 'doc'. If any modifier is positional, use 'matchedField' (index of
     * the array item matched). If 'doc' allows the modifiers to be applied in place and no index
     * updating is involved, then the modifiers may be applied "in place" over 'doc'.
     *
     * If the driver's '_logOp' mode is turned on, and if 'logOpRec' is not null, fills in the
     * latter with the oplog entry corresponding to the update. If the modifiers can't be applied,
     * returns an error status or uasserts with a corresponding description.
     *
     * If 'validateForStorage' is true, ensures that modified elements do not violate depth or DBRef
     * constraints. Ensures that no paths in 'immutablePaths' are modified (though they may be
     * created, if they do not yet exist).
     *
     * The value of 'isInsert' controls whether $setOnInsert modifiers get applied.
     *
     * If 'modifiedPaths' is not null, this method will populate it with the set of paths that were
     * either modified at runtime or present statically in the update modifiers. For arrays, the
     * set will include only the path to the array if the length has changed. All paths encode array
     * indexes explicitly.
     *
     * The caller must either provide a null pointer, or a non-null pointer to an empty field ref
     * set.
     ','line_number':112,'multiline':True]['text':'*
     * Passes the visitor through to the root of the update tree. The visitor is responsible for
     * implementing methods that operate on the nodes of the tree.
     ','line_number':145,'multiline':True]['text':'','line_number':163,'multiline':False]['text':' Accessors','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':'*
     * Serialize the update expression to Value. Output of this method is expected to, when parsed,
     * produce a logically equivalent update expression.
     ','line_number':209,'multiline':True]['text':'*
     * Set the collator which will be used by all of the UpdateDriver's underlying modifiers.
     *
     * 'collator' must outlive the UpdateDriver.
     ','line_number':217,'multiline':True]['text':'* Create the modifier and add it to the back of the modifiers vector ','line_number':225,'multiline':True]['text':'','line_number':228,'multiline':False]['text':' immutable properties after parsing','line_number':229,'multiline':False]['text':'','line_number':230,'multiline':False]['text':'','line_number':236,'multiline':False]['text':' mutable properties after parsing','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' Should this driver generate an oplog record when it applies the update?','line_number':240,'multiline':False]['text':' True if this update comes from an oplog application.','line_number':243,'multiline':False]['text':' True if this update is guaranteed not to contain dots or dollars fields and should skip the','line_number':246,'multiline':False]['text':' check.','line_number':247,'multiline':False]['text':' Do any of the mods require positional match details when calling 'prepare'?','line_number':252,'multiline':False]['text':' True if the updated document contains any '.'/'$' field name.','line_number':255,'multiline':False]['text':' The document used to represent or store the object being updated.','line_number':258,'multiline':False]['text':' The document used to build the oplog entry for the update.','line_number':261,'multiline':False]['text':' namespace mongo','line_number':265,'multiline':False]