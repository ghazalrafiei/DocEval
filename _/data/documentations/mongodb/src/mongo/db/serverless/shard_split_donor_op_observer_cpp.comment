['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Initializes the TenantMigrationDonorAccessBlocker for the tenant migration denoted by the given
 * state doc.
 ','line_number':159,'multiline':True]['text':'*
 * Transitions the TenantMigrationDonorAccessBlocker to the blocking state.
 ','line_number':193,'multiline':True]['text':' A primary calls startBlockingWrites on the TenantMigrationDonorAccessBlocker before','line_number':208,'multiline':False]['text':' reserving the OpTime for the "start blocking" write, so only secondaries call','line_number':209,'multiline':False]['text':' startBlockingWrites on the TenantMigrationDonorAccessBlocker in the op observer.','line_number':210,'multiline':False]['text':' Both primaries and secondaries call startBlockingReadsAfter in the op observer, since','line_number':214,'multiline':False]['text':' startBlockingReadsAfter just needs to be called before the "start blocking" write's oplog','line_number':215,'multiline':False]['text':' hole is filled.','line_number':216,'multiline':False]['text':'*
 * Transitions the TenantMigrationDonorAccessBlocker to the committed state.
 ','line_number':221,'multiline':True]['text':'*
 * Transitions the TenantMigrationDonorAccessBlocker to the aborted state.
 ','line_number':240,'multiline':True]['text':' The only case where there can be no tenants is when the instance is created by the','line_number':253,'multiline':False]['text':' abort command. In that case, no tenant migration blockers are created and the state','line_number':254,'multiline':False]['text':' will go straight to abort.','line_number':255,'multiline':False]['text':'*
 * Used to update the TenantMigrationDonorAccessBlocker for the migration denoted by the donor's
 * state doc once the write for updating the doc is committed.
 ','line_number':264,'multiline':True]['text':' The state doc and TenantMigrationDonorAccessBlocker for this','line_number':282,'multiline':False]['text':' migration were removed immediately after expireAt was set. This is','line_number':283,'multiline':False]['text':' unlikely to occur in production where the garbage collection delay','line_number':284,'multiline':False]['text':' should be sufficiently large. All acces blockers for the split should be in','line_number':285,'multiline':False]['text':' the same state.','line_number':286,'multiline':False]['text':' Setting expireAt implies that the TenantMigrationDonorAccessBlocker','line_number':291,'multiline':False]['text':' for this migration will be removed shortly after this. However, a','line_number':292,'multiline':False]['text':' lagged secondary might not manage to advance its majority commit','line_number':293,'multiline':False]['text':' point past the migration commit or abort opTime and consequently','line_number':294,'multiline':False]['text':' transition out of the blocking state before the','line_number':295,'multiline':False]['text':' TenantMigrationDonorAccessBlocker is removed. When this occurs,','line_number':296,'multiline':False]['text':' blocked reads or writes will be left waiting for the migration','line_number':297,'multiline':False]['text':' decision indefinitely. To avoid that, notify the','line_number':298,'multiline':False]['text':' TenantMigrationDonorAccessBlocker here that the commit or abort','line_number':299,'multiline':False]['text':' opTime has been majority committed (guaranteed to be true since by','line_number':300,'multiline':False]['text':' design the donor never marks its state doc as garbage collectable','line_number':301,'multiline':False]['text':' before the migration decision is majority committed).','line_number':302,'multiline':False]['text':' The migration durably aborted and is now marked as garbage','line_number':314,'multiline':False]['text':' collectable, remove its TenantMigrationDonorAccessBlocker right away','line_number':315,'multiline':False]['text':' to allow back-to-back migration retries.','line_number':316,'multiline':False]['text':' namespace','line_number':343,'multiline':False]['text':' If the operation starts aborted, do not do anything.','line_number':364,'multiline':False]['text':' To support back-to-back split retries, when a split is aborted, we remove its','line_number':420,'multiline':False]['text':' TenantMigrationDonorAccessBlockers as soon as its donor state doc is marked as garbage','line_number':421,'multiline':False]['text':' collectable. So onDelete should skip removing the TenantMigrationDonorAccessBlockers for','line_number':422,'multiline':False]['text':' aborted splits.','line_number':423,'multiline':False]['text':' Donor access blockers are removed from donor nodes via the shard split op observer.','line_number':447,'multiline':False]['text':' Donor access blockers are removed from recipient nodes when the node applies the','line_number':448,'multiline':False]['text':' recipient config. When the recipient primary steps up it will delete its state','line_number':449,'multiline':False]['text':' document, the call to remove access blockers there will be a no-op.','line_number':450,'multiline':False]['text':' namespace mongo','line_number':488,'multiline':False]