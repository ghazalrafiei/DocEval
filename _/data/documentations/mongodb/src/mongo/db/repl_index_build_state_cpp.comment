['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Parses index specs to generate list of index names for ReplIndexBuildState initialization.
 ','line_number':65,'multiline':True]['text':' namespace','line_number':80,'multiline':False]['text':' Normal case.','line_number':136,'multiline':False]['text':' Setup failed on a primary, proceed to cleanup. At this point cleanup only','line_number':138,'multiline':False]['text':' requires unregistering.','line_number':139,'multiline':False]['text':' Normal case.','line_number':144,'multiline':False]['text':' The index build was aborted, and the caller took responsibility for cleanup.','line_number':146,'multiline':False]['text':' Internal failure or interrupted (user killOp, disk space monitor, or shutdown).','line_number':148,'multiline':False]['text':' Index build was successfully committed by the primary.','line_number':153,'multiline':False]['text':' As a secondary, we received a commit oplog entry.','line_number':155,'multiline':False]['text':' The index build was aborted, and the caller took responsibility for cleanup.','line_number':157,'multiline':False]['text':' Internal failure or interrupted (user killOp, disk space monitor, or shutdown).','line_number':159,'multiline':False]['text':' We successfully committed the index build as a secondary.','line_number':164,'multiline':False]['text':' Abort for shutdown.','line_number':169,'multiline':False]['text':' The oplog applier is externally aborting the index build while applying','line_number':171,'multiline':False]['text':' 'abortIndexBuild'.','line_number':172,'multiline':False]['text':' A primary node completed self-abort or abort for shutdown.','line_number':177,'multiline':False]['text':' We are waiting for the current primary to abort the index build.','line_number':179,'multiline':False]['text':' The external aborter has finished cleaned up the index build.','line_number':183,'multiline':False]['text':' skipCheck ','line_number':231,'multiline':True]['text':' The index build might have been aborted/interrupted before reaching this point. Trying to','line_number':237,'multiline':False]['text':' transtion to kInProgress would be an error.','line_number':238,'multiline':False]['text':' skipCheck ','line_number':240,'multiline':True]['text':' It is possible that a 'commitIndexBuild' oplog entry is applied while the index builder is','line_number':254,'multiline':False]['text':' transitioning to an abort, or even to have been in a state where the oplog applier is already','line_number':255,'multiline':False]['text':' waiting for the index build to finish.','line_number':256,'multiline':False]['text':' skipCheck ','line_number':266,'multiline':True]['text':' skipCheck ','line_number':293,'multiline':True]['text':' Promise should be set at least once before it's getting destroyed.','line_number':315,'multiline':False]['text':' Cleanup is required for external aborts if setup stage completed at some point in the past.','line_number':346,'multiline':False]['text':' This implies we already got a commit or abort signal by other ways. This might have','line_number':401,'multiline':False]['text':' been signaled earlier with kPrimaryAbort or kCommitQuorumSatisfied. Or, it's also','line_number':402,'multiline':False]['text':' possible the node got stepped down and received kOplogCommit/koplogAbort or got','line_number':403,'multiline':False]['text':' kRollbackAbort. So, it's ok to skip signaling.','line_number':404,'multiline':False]['text':' If the signal action has been set, it should only be because a concurrent operation','line_number':419,'multiline':False]['text':' already aborted the index build.','line_number':420,'multiline':False]['text':' It's possible that the index build thread has not reached the point where it can be','line_number':436,'multiline':False]['text':' committed yet.','line_number':437,'multiline':False]['text':' If the node is secondary, and awaiting a primary abort, the transition is invalid, and the','line_number':441,'multiline':False]['text':' node should crash.','line_number':442,'multiline':False]['text':' If the future wait were uninterruptible, then shutdown could hang. If the','line_number':451,'multiline':False]['text':' IndexBuildsCoordinator thread gets interrupted on shutdown, the oplog applier will hang','line_number':452,'multiline':False]['text':' waiting for the promise applying the commitIndexBuild oplog entry.','line_number':453,'multiline':False]['text':' Retry until the current promise result is consumed by the index builder thread and','line_number':456,'multiline':False]['text':' a new empty promise got created by the indexBuildscoordinator thread.','line_number':457,'multiline':False]['text':' Promise can be set only once.','line_number':465,'multiline':False]['text':' We can't skip signaling here if a signal is already set because the previous commit or','line_number':466,'multiline':False]['text':' abort signal might have been sent to handle for primary case.','line_number':467,'multiline':False]['text':' It is not possible for the index build to be in kExternalAbort state, as the collection','line_number':476,'multiline':False]['text':' MODE_X lock is held and there cannot be concurrent external aborters.','line_number':477,'multiline':False]['text':' Wait until the build is done setting up. This indicates that all required state is','line_number':484,'multiline':False]['text':' initialized to attempt an abort.','line_number':485,'multiline':False]['text':' Wait until an earlier self-abort finishes. The kAwaitPrimaryAbort state must be allowed, in','line_number':493,'multiline':False]['text':' case the voteAbortIndexBuild command ends up in a loopback or 'abortIndexBuild' is being','line_number':494,'multiline':False]['text':' applied. We retry here instead of returning kAlreadyAborted to ensure that by the time the','line_number':495,'multiline':False]['text':' external aborter receives TryAbortResult::kAlreadyAborted, the build is actually aborted and','line_number':496,'multiline':False]['text':' not in the process of aborting.','line_number':497,'multiline':False]['text':' Returns if a concurrent operation already aborted the index build.','line_number':506,'multiline':False]['text':' Index build coordinator already received a signal to commit or abort. So, it's ok','line_number':515,'multiline':False]['text':' to return and wait for the index build to complete if we are trying to signal','line_number':516,'multiline':False]['text':' 'kPrimaryAbort'. The index build coordinator will not perform the signaled action','line_number':517,'multiline':False]['text':' (i.e, will not commit or abort the index build) only when the node steps down.','line_number':518,'multiline':False]['text':' When the node steps down, the caller of this function, dropIndexes/createIndexes','line_number':519,'multiline':False]['text':' command (user operation) will also get interrupted. So, we no longer need to','line_number':520,'multiline':False]['text':' abort the index build on step down.','line_number':521,'multiline':False]['text':' Indicate if the index build is already being committed or aborted.','line_number':524,'multiline':False]['text':' Retry until the current promise result is consumed by the index builder thread','line_number':532,'multiline':False]['text':' and a new empty promise got created by the indexBuildscoordinator thread. Or,','line_number':533,'multiline':False]['text':' until the index build got torn down after index build commit.','line_number':534,'multiline':False]['text':' Set the state on replState. Once set, the calling thread must complete the abort process.','line_number':540,'multiline':False]['text':' Aside from setting the tenantMigrationAbortStatus, tenant migration aborts are identical to','line_number':552,'multiline':False]['text':' primary aborts.','line_number':553,'multiline':False]['text':' Interrupt the builder thread so that it can no longer acquire locks or make progress.','line_number':556,'multiline':False]['text':' It is possible that the index build thread may have completed its operation and removed','line_number':557,'multiline':False]['text':' itself from the ServiceContext. This may happen in the case of an explicit db.killOp()','line_number':558,'multiline':False]['text':' operation or during shutdown.','line_number':559,'multiline':False]['text':' During normal operation, the abort logic, initiated through external means such as','line_number':560,'multiline':False]['text':' dropIndexes or internally through an indexing error, should have set the state in','line_number':561,'multiline':False]['text':' ReplIndexBuildState so that this code would not be reachable as it is no longer necessary','line_number':562,'multiline':False]['text':' to interrupt the builder thread here.','line_number':563,'multiline':False]['text':' Set the signal. Because we have already interrupted the index build, it will not observe','line_number':570,'multiline':False]['text':' this signal. We do this so that other observers do not also try to abort the index build.','line_number':571,'multiline':False]['text':' If the build is setting up, it is not yet abortable. If the index build has already','line_number':582,'multiline':False]['text':' passed a point of no return, interrupting will not be productive. If the index build is','line_number':583,'multiline':False]['text':' already in the process of aborting, it cannot be aborted again.','line_number':584,'multiline':False]['text':' skipCheck ','line_number':594,'multiline':True]['text':' timestamp ','line_number':595,'multiline':True]['text':' The index builder thread is responsible for cleaning up, as indicated by the','line_number':605,'multiline':False]['text':' kFailureCleanUp state.','line_number':606,'multiline':False]['text':' We have to lock the mutex in order to read the committed/aborted state.','line_number':672,'multiline':False]['text':' This allows listIndexes callers to identify how to kill the index build.','line_number':723,'multiline':False]['text':' Previously, users have to locate the index build in the currentOp command output','line_number':724,'multiline':False]['text':' for this information.','line_number':725,'multiline':False]['text':' We're likely at the initial stages of a new logical initial sync attempt, and we','line_number':740,'multiline':False]['text':' haven't yet replicated the FCV from the sync source. Skip the index build state','line_number':741,'multiline':False]['text':' transition checks because they rely on the FCV.','line_number':742,'multiline':False]['text':' set the signal','line_number':757,'multiline':False]['text':' Cancel the callback, as we are checking if it is valid, this should work even if it is a','line_number':759,'multiline':False]['text':' loopback command.','line_number':760,'multiline':False]['text':' namespace mongo','line_number':764,'multiline':False]