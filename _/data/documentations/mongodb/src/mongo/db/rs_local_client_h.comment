['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Implements the support for "read your own write" when run on a node of a replica set. Can be used
 * in the scenarios where causal consistency is not available yet.
 ','line_number':55,'multiline':True]['text':'*
     * Runs the specified command returns the BSON command response plus parsed out Status of this
     * response and write concern error (if present).
     ','line_number':68,'multiline':True]['text':'*
     * Warning: This method exhausts the cursor and pulls all data into memory.
     * Do not use other than for very small (i.e., admin or metadata) collections.
     ','line_number':76,'multiline':True]['text':'*
     * Checks if an OpTime was set on the current Client (ie if the current operation performed a
     * write) and if so updates _lastOpTime to the OpTime from the write that was just performed.
     * The 'previousOpTimeOnClient' parameter is the optime that *was* the optime on this client
     * before we ran this command through this RSLocalClient. By the time this method is called,
     * if the optime set on the Client is different than 'previousOpTimeOnClient' then that means
     * the command just run did a write and we should update _lastOpTime to capture the optime of
     * the write we just did.  If the current optime on the client is the same as
     * 'previousOpTimeOnClient' then the command we just ran didn't do a write, and we should leave
     * _lastOpTime alone.
     ','line_number':96,'multiline':True]['text':' Guards _lastOpTime below.','line_number':112,'multiline':False]['text':' Stores the optime that was generated by the last operation to perform a write that was run','line_number':115,'multiline':False]['text':' through _runCommand.  Used in _exhaustiveFindOnConfig for waiting for that optime to be','line_number':116,'multiline':False]['text':' committed so that readConcern majority reads will read the writes that were performed without','line_number':117,'multiline':False]['text':' a w:majority write concern.','line_number':118,'multiline':False]['text':' namespace mongo','line_number':122,'multiline':False]