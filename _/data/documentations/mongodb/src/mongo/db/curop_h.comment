['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':53,'multiline':False]['text':' lifespan is different than CurOp because of recursives with DBDirectClient ','line_number':101,'multiline':True]['text':'*
     * Holds counters for execution statistics that can be accumulated by one or more operations.
     * They're accumulated as we go for a single operation, but are also extracted and stored
     * externally if they need to be accumulated across multiple operations (which have multiple
     * CurOps), including for cursors and multi-statement transactions.
     ','line_number':104,'multiline':True]['text':'*
         * Adds all the fields of another AdditiveMetrics object together with the fields of this
         * AdditiveMetrics instance.
         ','line_number':123,'multiline':True]['text':'*
         * Resets all members to the default state.
         ','line_number':129,'multiline':True]['text':'*
         * Returns true if the AdditiveMetrics object we are comparing has the same field values as
         * this AdditiveMetrics instance.
         ','line_number':134,'multiline':True]['text':'*
         * Increments writeConflicts by n.
         ','line_number':140,'multiline':True]['text':'*
         * Increments temporarilyUnavailableErrors by n.
         ','line_number':145,'multiline':True]['text':'*
         * Increments keysInserted by n.
         ','line_number':150,'multiline':True]['text':'*
         * Increments keysDeleted by n.
         ','line_number':155,'multiline':True]['text':'*
         * Increments nreturned by n.
         ','line_number':160,'multiline':True]['text':'*
         * Increments nBatches by 1.
         ','line_number':165,'multiline':True]['text':'*
         * Increments ninserted by n.
         ','line_number':170,'multiline':True]['text':'*
         * Increments nUpserted by n.
         ','line_number':175,'multiline':True]['text':'*
         * Increments prepareReadConflicts by n.
         ','line_number':180,'multiline':True]['text':'*
         * Increments executionTime by n.
         ','line_number':185,'multiline':True]['text':'*
         * Generates a string showing all non-empty fields. For every non-empty field field1,
         * field2, ..., with corresponding values value1, value2, ..., we will output a string in
         * the format: "<field1>:<value1> <field2>:<value2> ...".
         ','line_number':190,'multiline':True]['text':' Number of records that match the query.','line_number':203,'multiline':False]['text':' Number of records returned so far.','line_number':205,'multiline':False]['text':' Number of batches returned so far.','line_number':207,'multiline':False]['text':' Number of records written (no no-ops).','line_number':209,'multiline':False]['text':' Number of index keys inserted.','line_number':215,'multiline':False]['text':' Number of index keys removed.','line_number':217,'multiline':False]['text':' The following fields are atomic because they are reported by CurrentOp. This is an','line_number':220,'multiline':False]['text':' exception to the prescription that OpDebug only be used by the owning thread because','line_number':221,'multiline':False]['text':' these metrics are tracked over the course of a transaction by SingleTransactionStats,','line_number':222,'multiline':False]['text':' which is built on OpDebug.','line_number':223,'multiline':False]['text':' Number of read conflicts caused by a prepared transaction.','line_number':225,'multiline':False]['text':' Amount of time spent executing a query.','line_number':230,'multiline':False]['text':'*
     * Appends information about the current operation to "builder"
     *
     * @param curop reference to the CurOp that owns this OpDebug
     * @param lockStats lockStats object containing locking information about the operation
     ','line_number':243,'multiline':True]['text':'*
     * Copies relevant plan summary metrics to this OpDebug instance.
     ','line_number':258,'multiline':True]['text':'*
     * The resulting object has zeros omitted. As is typical in this file.
     ','line_number':263,'multiline':True]['text':'*
     * Make object from $search stats with non-populated values omitted.
     ','line_number':268,'multiline':True]['text':'*
     * Gets the type of the namespace on which the current operation operates.
     ','line_number':273,'multiline':True]['text':'*
     * Accumulate resolved views.
     ','line_number':278,'multiline':True]['text':'*
     * Get or append the array with resolved views' info.
     ','line_number':284,'multiline':True]['text':' -------------------','line_number':290,'multiline':False]['text':' basic options','line_number':292,'multiline':False]['text':' _networkOp represents the network-level op code: OP_QUERY, OP_GET_MORE, OP_MSG, etc.','line_number':293,'multiline':False]['text':' only set this through setNetworkOp_inlock() to keep synced','line_number':294,'multiline':False]['text':' _logicalOp is the logical operation type, ie 'dbQuery' regardless of whether this is an','line_number':295,'multiline':False]['text':' OP_QUERY find, a find command using OP_QUERY, or a find command using OP_MSG.','line_number':296,'multiline':False]['text':' Similarly, the return value will be dbGetMore for both OP_GET_MORE and getMore command.','line_number':297,'multiline':False]['text':' only set this through setNetworkOp_inlock()','line_number':298,'multiline':False]['text':' detailed options','line_number':301,'multiline':False]['text':' For search using mongot.','line_number':305,'multiline':False]['text':' true if the query plan involves an in-memory sort','line_number':311,'multiline':False]['text':' true if the given query used disk','line_number':313,'multiline':False]['text':' The total number of spills to disk from sort stages','line_number':314,'multiline':False]['text':' The amount of data we've sorted in bytes','line_number':315,'multiline':False]['text':' The number of keys that we've sorted.','line_number':316,'multiline':False]['text':' True if the plan came from the multi-planner (not from the plan cache and not a query with a','line_number':318,'multiline':False]['text':' single solution).','line_number':319,'multiline':False]['text':' True if a replan was triggered during the execution of this operation.','line_number':323,'multiline':False]['text':' true if the cursor has been closed at end a find/getMore operation','line_number':327,'multiline':False]['text':' Owned here.','line_number':329,'multiline':False]['text':' The hash of the PlanCache key for the query being run. This may change depending on what','line_number':331,'multiline':False]['text':' indexes are present.','line_number':332,'multiline':False]['text':' The hash of the query's "stable" key. This represents the query's shape.','line_number':334,'multiline':False]['text':' The QueryStatsInfo struct was created to bundle all the queryStats related fields of CurOp &
     * OpDebug together (SERVER-83280).
     *
     * ClusterClientCursorImpl and ClientCursor also contain _queryStatsKey and _queryStatsKeyHash
     * members but NOT a wasRateLimited member. Variable names & accesses would be more consistent
     * across the code if ClusterClientCursorImpl and ClientCursor each also had a QueryStatsInfo
     * struct, but we considered and rejected two different potential implementations of this:
     *  - Option 1:
     *    Declare a QueryStatsInfo struct in each .h file. Every struct would have key and keyHash
     *    fields, and a wasRateLimited field would be added only to CurOp. But, it seemed confusing
     *    to have slightly different structs with the same name declared three different times.
     *  - Option 2:
     *    Create a query_stats_info.h that declares QueryStatsInfo--identical to the version defined
     *    in this file. CurOp/OpDebug, ClientCursor, and ClusterClientCursorImpl would then all
     *    have their own QueryStatsInfo instances, potentially as a unique_ptr or boost::optional. A
     *    benefit to this would be the ability to to just move the entire QueryStatsInfo struct from
     *    Op to the Cursor, instead of copying it over field by field (the current method). But:
     *      - The current code moves ownership of the key, but copies the keyHash. So, for workflows
     *        that require multiple cursors, like sharding, one cursor would own the key, but all
     *        cursors would have copies of the keyHash. The problem with trying to move around the
     *        struct in its entirety is that access to the *entire* struct would be lost on the
     *        move, meaning there's no way to retain the keyHash (that doesn't largely nullify the
     *        benefits of having the struct).
     *      - It seemed odd to have ClientCursor and ClusterClientCursorImpl using the struct but
     *        never needing the wasRateLimited field.
     ','line_number':337,'multiline':True]['text':' Note that the only case when the three fields of the below struct are null, none, and false','line_number':364,'multiline':False]['text':' is if the query stats feature flag is turned off.','line_number':365,'multiline':False]['text':' Uniquely identifies one query stats entry.','line_number':367,'multiline':False]['text':' nullptr if `wasRateLimited` is true.','line_number':368,'multiline':False]['text':' A cached value of `absl::HashOf(key)`.','line_number':370,'multiline':False]['text':' Always populated if `key` is non-null. boost::none if `wasRateLimited` is true.','line_number':371,'multiline':False]['text':' True if the request was rate limited and stats should not be collected.','line_number':373,'multiline':False]['text':' The query framework that this operation used. Will be unknown for non query operations.','line_number':379,'multiline':False]['text':' Tracks the amount of indexed loop joins in a pushed down lookup stage.','line_number':382,'multiline':False]['text':' Tracks the amount of nested loop joins in a pushed down lookup stage.','line_number':385,'multiline':False]['text':' Tracks the amount of hash lookups in a pushed down lookup stage.','line_number':388,'multiline':False]['text':' Tracks the amount of spills by hash lookup in a pushed down lookup stage.','line_number':391,'multiline':False]['text':' Details of any error (whether from an exception or a command returning failure).','line_number':394,'multiline':False]['text':' Amount of time spent planning the query. Begins after parsing and ends','line_number':397,'multiline':False]['text':' after optimizations.','line_number':398,'multiline':False]['text':' Cost computed by the cost-based optimizer.','line_number':401,'multiline':False]['text':' Cardinality computed by the cost-based optimizer.','line_number':403,'multiline':False]['text':' Amount of CPU time used by this thread. Will remain -1 if this platform does not support','line_number':406,'multiline':False]['text':' this feature.','line_number':407,'multiline':False]['text':' Shard targeting info.','line_number':412,'multiline':False]['text':' Stores the duration of time spent blocked on prepare conflicts.','line_number':415,'multiline':False]['text':' Total time spent looking up database entry in the local catalog cache, including eventual','line_number':418,'multiline':False]['text':' refreshes.','line_number':419,'multiline':False]['text':' Total time spent looking up collection entry in the local catalog cache, including eventual','line_number':422,'multiline':False]['text':' refreshes.','line_number':423,'multiline':False]['text':' Total time spent looking up index entries in the local cache, including eventual refreshes.','line_number':426,'multiline':False]['text':' Stores the duration of time spent waiting for the shard to refresh the database and wait for','line_number':429,'multiline':False]['text':' the database critical section.','line_number':430,'multiline':False]['text':' Stores the duration of time spent waiting for the shard to refresh the collection and wait','line_number':433,'multiline':False]['text':' for the collection critical section.','line_number':434,'multiline':False]['text':' Stores the duration of time spent waiting for the specified user write concern to','line_number':437,'multiline':False]['text':' be fulfilled.','line_number':438,'multiline':False]['text':' Stores the total time an operation spends with an uncommitted oplog slot held open. Indicator','line_number':441,'multiline':False]['text':' that an operation is holding back replication by causing oplog holes to remain open for','line_number':442,'multiline':False]['text':' unusual amounts of time.','line_number':443,'multiline':False]['text':' Stores the amount of the data processed by the throttle cursors in MB/sec.','line_number':446,'multiline':False]['text':' Used to track the amount of time spent waiting for a response from remote operations.','line_number':450,'multiline':False]['text':' Stores the current operation's count of these metrics. If they are needed to be accumulated','line_number':453,'multiline':False]['text':' elsewhere, they should be extracted by another aggregator (like the ClientCursor) to ensure','line_number':454,'multiline':False]['text':' these only ever reflect just this CurOp's consumption.','line_number':455,'multiline':False]['text':' Stores storage statistics.','line_number':458,'multiline':False]['text':' Records the WC that was waited on during the operation. (The WC in opCtx can't be used','line_number':463,'multiline':False]['text':' because it's only set while the Command itself executes.)','line_number':464,'multiline':False]['text':' Whether this is an oplog getMore operation for replication oplog fetching.','line_number':467,'multiline':False]['text':' Maps namespace of a resolved view to its dependency chain and the fully unrolled pipeline. To','line_number':470,'multiline':False]['text':' make log line deterministic and easier to test, use ordered map. As we don't expect many','line_number':471,'multiline':False]['text':' resolved views per query, a hash map would unlikely provide any benefits.','line_number':472,'multiline':False]['text':'*
 * Container for data used to report information about an OperationContext.
 *
 * Every OperationContext in a server with CurOp support has a stack of CurOp
 * objects. The entry at the top of the stack is used to record timing and
 * resource statistics for the executing operation or suboperation.
 *
 * All of the accessor methods on CurOp may be called by the thread executing
 * the associated OperationContext at any time, or by other threads that have
 * locked the context's owning Client object.
 *
 * The mutator methods on CurOp whose names end _inlock may only be called by the thread
 * executing the associated OperationContext and Client, and only when that thread has also
 * locked the Client object.  All other mutators may only be called by the thread executing
 * CurOp, but do not require holding the Client lock.  The exception to this is the kill()
 * method, which is self-synchronizing.
 *
 * The OpDebug member of a CurOp, accessed via the debug() accessor should *only* be accessed
 * from the thread executing an operation, and as a result its fields may be accessed without
 * any synchronization.
 ','line_number':477,'multiline':True]['text':'*
     * Writes a report of the operation being executed by the given client to the supplied
     * BSONObjBuilder, in a format suitable for display in currentOp. Does not include a lockInfo
     * report, since this may be called in either a mongoD or mongoS context and the latter does not
     * supply lock stats. The client must be locked before calling this method.
     ','line_number':506,'multiline':True]['text':'*
     * Serializes the fields of a GenericCursor which do not appear elsewhere in the currentOp
     * output. If 'maxQuerySize' is given, truncates the cursor's originatingCommand but preserves
     * the comment.
     ','line_number':520,'multiline':True]['text':'*
     * Pushes this CurOp to the top of the given "opCtx"'s CurOp stack.
     ','line_number':528,'multiline':True]['text':'*
     * This allows the caller to set the command on the CurOp without using setCommand_inlock and
     * having to acquire the Client lock or having to leave a comment indicating why the
     * client lock isn't necessary.
     ','line_number':535,'multiline':True]['text':'*
     * Fills out CurOp and OpDebug with basic info common to all commands. We require the NetworkOp
     * in order to distinguish which protocol delivered this request, e.g. OP_QUERY or OP_MSG. This
     * is set early in the request processing backend and does not typically need to be called
     * thereafter. Locks the client as needed to apply the specified settings.
     ','line_number':544,'multiline':True]['text':'*
     * Sets metrics collected at the end of an operation onto curOp's OpDebug instance. Note that
     * this is used in tandem with OpDebug::setPlanSummaryMetrics so should not repeat any metrics
     * collected there.
     ','line_number':555,'multiline':True]['text':'*
     * Marks the operation end time, records the length of the client response if a valid response
     * exists, and then - subject to the current values of slowMs and sampleRate - logs this CurOp
     * to file under the given LogComponent. Returns 'true' if, in addition to being logged, this
     * operation should also be profiled.
     ','line_number':562,'multiline':True]['text':'*
     * The BSONObj returned may not be owned by CurOp. Callers should call getOwned() if they plan
     * to reference beyond the lifetime of this CurOp instance.
     ','line_number':578,'multiline':True]['text':'*
     * Returns an owned BSONObj representing the original command. Used only by the getMore
     * command.
     ','line_number':586,'multiline':True]['text':'*
     * Sets the type of the current network operation.
     ','line_number':597,'multiline':True]['text':'*
     * Sets the type of the current logical operation.
     ','line_number':605,'multiline':True]['text':'*
     * Marks the current operation as being a command.
     ','line_number':613,'multiline':True]['text':'*
     * Returns a structure containing data used for profiling, accessed only by a thread
     * currently executing the operation context associated with this CurOp.
     ','line_number':620,'multiline':True]['text':'*
     * Gets the name of the namespace on which the current operation operates.
     ','line_number':628,'multiline':True]['text':'*
     * Returns a non-const copy of the UserAcquisitionStats shared_ptr. The caller takes shared
     * ownership of the userAcquisitionStats.
     ','line_number':633,'multiline':True]['text':'*
     * Gets the name of the namespace on which the current operation operates.
     ','line_number':641,'multiline':True]['text':'*
     * Returns true if the elapsed time of this operation is such that it should be profiled or
     * profile level is set to 2. Uses total time if the operation is done, current elapsed time
     * otherwise.
     *
     * When a custom filter is set, we conservatively assume it would match this operation.
     ','line_number':648,'multiline':True]['text':' Profile level 2 should override any sample rate or slowms settings.','line_number':656,'multiline':False]['text':'*
     * Raises the profiling level for this operation to "dbProfileLevel" if it was previously
     * less than "dbProfileLevel".
     *
     * This belongs on OpDebug, and so does not have the _inlock suffix.
     ','line_number':669,'multiline':True]['text':'*
     * Gets the network operation type. No lock is required if called by the thread executing
     * the operation, but the lock must be held if called from another thread.
     ','line_number':681,'multiline':True]['text':'*
     * Gets the logical operation type. No lock is required if called by the thread executing
     * the operation, but the lock must be held if called from another thread.
     ','line_number':689,'multiline':True]['text':'*
     * Returns true if the current operation is known to be a command.
     ','line_number':697,'multiline':True]['text':'','line_number':704,'multiline':False]['text':' Methods for getting/setting elapsed time. Note that the observed elapsed time may be','line_number':705,'multiline':False]['text':' negative, if the system time has been reset during the course of this operation.','line_number':706,'multiline':False]['text':'','line_number':707,'multiline':False]['text':'*
     * Stops the operation latency timer from "ticking". Time spent paused is not included in the
     * latencies returned by elapsedTimeExcludingPauses().
     *
     * Illegal to call if either the CurOp has not been started, or the CurOp is already in a paused
     * state.
     ','line_number':723,'multiline':True]['text':'*
     * Starts the operation latency timer "ticking" again. Illegal to call if the CurOp has not been
     * started and then subsequently paused.
     ','line_number':736,'multiline':True]['text':'*
     * Ensures that remoteOpWait will be recorded in the OpDebug.
     *
     * This method is separate from startRemoteOpWait because operation types that do record
     * remoteOpWait, such as a getMore of a sharded aggregation, should always include the
     * remoteOpWait field even if its value is zero. An operation should call
     * ensureRecordRemoteOpWait() to declare that it wants to report remoteOpWait, and call
     * startRemoteOpWaitTimer()/stopRemoteOpWaitTimer() to measure the time.
     *
     * This timer uses the same clock source as elapsedTimeTotal().
     ','line_number':748,'multiline':True]['text':'*
     * Starts the remoteOpWait timer.
     *
     * Does nothing if ensureRecordRemoteOpWait() was not called or the current operation was not
     * marked as started.
     ','line_number':765,'multiline':True]['text':' There are some commands that send remote operations but do not mark the current operation','line_number':772,'multiline':False]['text':' as started. We do not record remote op wait time for those commands.','line_number':773,'multiline':False]['text':'*
     * Stops the remoteOpWait timer.
     *
     * Does nothing if ensureRecordRemoteOpWait() was not called or the current operation was not
     * marked as started.
     ','line_number':785,'multiline':True]['text':' There are some commands that send remote operations but do not mark the current operation','line_number':792,'multiline':False]['text':' as started. We do not record remote op wait time for those commands.','line_number':793,'multiline':False]['text':' On most systems a monotonic clock source will be used to measure time. When a','line_number':802,'multiline':False]['text':' monotonic clock is not available we fallback to using the realtime system clock. When','line_number':803,'multiline':False]['text':' used, a backward shift of the realtime system clock could lead to a negative delta.','line_number':804,'multiline':False]['text':'*
     * If this op has been marked as done(), returns the wall clock duration between being marked as
     * started with ensureStarted() and the call to done().
     *
     * Otherwise, returns the wall clock duration between the start time and now.
     *
     * If this op has not yet been started, returns 0.
     ','line_number':812,'multiline':True]['text':'*
     * Returns the total elapsed duration minus any time spent in a paused state. See
     * elapsedTimeTotal() for the definition of the total duration and pause/resumeTimer() for
     * details on pausing.
     *
     * If this op has not yet been started, returns 0.
     *
     * Illegal to call while the timer is paused.
     ','line_number':829,'multiline':True]['text':'*
    * The planningTimeMicros metric, reported in the system profiler and in queryStats, is measured
    * using the Curop instance's _tickSource. Currently, _tickSource is only paused in places where
    logical work is being done. If this were to change, and _tickSource
    were to be paused during query planning for reasons unrelated to the work of
    planning/optimization, it would break the planning time measurement below.
    *
    ','line_number':848,'multiline':True]['text':' This is an inner executor/cursor, the metrics for which don't get tracked by','line_number':857,'multiline':False]['text':' OpDebug::planningTime.','line_number':858,'multiline':False]['text':' The planningTime metric is defined as being done once PrepareExecutionHelper::prepare()','line_number':866,'multiline':False]['text':' is hit, which calls this function to stop the timer. As certain queries like $lookup','line_number':867,'multiline':False]['text':' require inner cursors/executors that will follow this same codepath, it is important to','line_number':868,'multiline':False]['text':' make sure the metric exclusively captures the time associated with the outermost cursor.','line_number':869,'multiline':False]['text':' This is done by making sure planningTime has not already been set and that start has been','line_number':870,'multiline':False]['text':' marked (as inner executors are prepared outside of the codepath that begins the planning','line_number':871,'multiline':False]['text':' timer).','line_number':872,'multiline':False]['text':'*
     * Starts the waitForWriteConcern timer.
     *
     * The timer must be ended before it can be started again.
     ','line_number':880,'multiline':True]['text':'*
     * Stops the waitForWriteConcern timer.
     *
     * Does nothing if the timer has not been started.
     ','line_number':891,'multiline':True]['text':'*
     * If the platform supports the CPU timer, and we haven't collected this operation's CPU time
     * already, then calculates this operation's CPU time and stores it on the 'OpDebug'.
     ','line_number':909,'multiline':True]['text':'*
     * 'opDescription' must be either an owned BSONObj or guaranteed to outlive the OperationContext
     * it is associated with.
     ','line_number':915,'multiline':True]['text':'*
     * Sets the original command object.
     ','line_number':921,'multiline':True]['text':'*
     * Returns whether the current operation is a read, write, or command.
     ','line_number':935,'multiline':True]['text':'*
     * Appends information about this CurOp to "builder". If "truncateOps" is true, appends a string
     * summary of any objects which exceed the threshold size. If truncateOps is false, append the
     * entire object.
     *
     * If called from a thread other than the one executing the operation associated with this
     * CurOp, it is necessary to lock the associated Client object before executing this method.
     ','line_number':940,'multiline':True]['text':'*
     * Sets the message for FailPoints used.
     ','line_number':952,'multiline':True]['text':'*
     * Sets the message for this CurOp.
     ','line_number':959,'multiline':True]['text':'*
     * Sets the message and the progress meter for this CurOp.
     *
     * Accessors and modifiers of ProgressMeter associated with the CurOp must follow the same
     * locking scheme as CurOp. It is necessary to hold the lock while this method executes.
     ','line_number':964,'multiline':True]['text':'
     * Gets the message for FailPoints used.
     ','line_number':974,'multiline':True]['text':'*
     * Gets the message for this CurOp.
     ','line_number':981,'multiline':True]['text':'*
     * Returns the number of times yielded() was called.  Callers on threads other
     * than the one executing the operation must lock the client.
     ','line_number':1001,'multiline':True]['text':'*
     * this should be used very sparingly
     * generally the Context should set this up
     * but sometimes you want to do it ahead of time
     ','line_number':1009,'multiline':True]['text':'*
     * Gets the OperationContext associated with this CurOp.
     * This must only be called after the CurOp has been pushed to an OperationContext's CurOpStack.
     ','line_number':1049,'multiline':True]['text':'*
     * Handles failpoints that check whether a command has completed or not.
     * Used for testing purposes instead of the getLog command.
     ','line_number':1058,'multiline':True]['text':' The stack containing this CurOp instance.','line_number':1066,'multiline':False]['text':' This is set when this instance is pushed to the stack.','line_number':1067,'multiline':False]['text':' The CurOp beneath this CurOp instance in its stack, if any.','line_number':1070,'multiline':False]['text':' This is set when this instance is pushed to a non-empty stack.','line_number':1071,'multiline':False]['text':' The time at which this CurOp instance was marked as started.','line_number':1076,'multiline':False]['text':' NOLINT','line_number':1077,'multiline':False]['text':' The time at which this CurOp instance was marked as done or 0 if the CurOp is not yet done.','line_number':1079,'multiline':False]['text':' NOLINT','line_number':1080,'multiline':False]['text':' This CPU timer tracks the CPU time spent for this operation. Will be nullptr on unsupported','line_number':1082,'multiline':False]['text':' platforms.','line_number':1083,'multiline':False]['text':' The time at which this CurOp instance had its timer paused, or 0 if the timer is not','line_number':1086,'multiline':False]['text':' currently paused.','line_number':1087,'multiline':False]['text':' The cumulative duration for which the timer has been paused.','line_number':1090,'multiline':False]['text':' The elapsedTimeTotal() value at which the remoteOpWait timer was started, or empty if the','line_number':1093,'multiline':False]['text':' remoteOpWait timer is not currently running.','line_number':1094,'multiline':False]['text':' _networkOp represents the network-level op code: OP_QUERY, OP_GET_MORE, OP_MSG, etc.','line_number':1097,'multiline':False]['text':' only set this through setNetworkOp_inlock() to keep synced','line_number':1098,'multiline':False]['text':' _logicalOp is the logical operation type, ie 'dbQuery' regardless of whether this is an','line_number':1099,'multiline':False]['text':' OP_QUERY find, a find command using OP_QUERY, or a find command using OP_MSG.','line_number':1100,'multiline':False]['text':' Similarly, the return value will be dbGetMore for both OP_GET_MORE and getMore command.','line_number':1101,'multiline':False]['text':' only set this through setNetworkOp_inlock()','line_number':1102,'multiline':False]['text':' 0=off, 1=slow, 2=all','line_number':1105,'multiline':False]['text':' Used by getMore to display original command.','line_number':1108,'multiline':False]['text':' Used to store FailPoint information.','line_number':1110,'multiline':False]['text':' A GenericCursor containing information about the active cursor for a getMore operation.','line_number':1114,'multiline':False]['text':' The snapshot of lock stats taken when this CurOp instance is pushed to a','line_number':1119,'multiline':False]['text':' CurOpStack.','line_number':1120,'multiline':False]['text':' These values are used to calculate the amount of time spent planning a query.','line_number':1126,'multiline':False]['text':' NOLINT','line_number':1127,'multiline':False]['text':' NOLINT','line_number':1128,'multiline':False]['text':' These values are used to calculate the amount of time spent waiting for write concern.','line_number':1130,'multiline':False]['text':' NOLINT','line_number':1131,'multiline':False]['text':' NOLINT','line_number':1132,'multiline':False]['text':' This metric is the same value as debug().waitForWriteConcernDurationMillis.','line_number':1133,'multiline':False]['text':' We cannot use std::atomic in OpDebug since it is not copy assignable, but using a non-atomic','line_number':1134,'multiline':False]['text':' allows for a data race between stopWaitForWriteConcernTimer and curop::reportState.','line_number':1135,'multiline':False]['text':' NOLINT','line_number':1136,'multiline':False]['text':' Flag to decide if diagnostic information should be omitted.','line_number':1138,'multiline':False]['text':' namespace mongo','line_number':1142,'multiline':False]