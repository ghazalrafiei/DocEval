['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * 'InsertionEvictionListener' class to use with 'LRUBudgetTracker' that will always noop.
 ','line_number':46,'multiline':True]['text':' Called when a key-value pair is being inserted. Parameters are the key-value pair and its','line_number':51,'multiline':False]['text':' estimated size.','line_number':52,'multiline':False]['text':' Called when a key-value pair is being evicted. Parameters are the key-value pair and its','line_number':56,'multiline':False]['text':' estimated size.','line_number':57,'multiline':False]['text':' Called when the cache is being cleared. Parameter is the estimated size of the key-value','line_number':61,'multiline':False]['text':' pairs in the cache before it was cleared.','line_number':62,'multiline':False]['text':'*
 * This class tracks a size of entries in 'LRUKeyValue'.
 * The size can be understood as a number of the entries, an amount of memory they occupied,
 * or any other value defined by the template parameter 'Estimator'.
 * The 'Estimator' must be deterministic and always return the same value for the same entry.
 * The 'InsertionEvictionListener' will be called on every insertion and eviction as well as when
 * the cache is cleared.
 ','line_number':66,'multiline':True]['text':' Returns true if the cache runs over budget.','line_number':100,'multiline':False]['text':'*
 * A key-value store structure with a least recently used (LRU) replacement
 * policy. The size allowed in the kv-store is controlled by 'LRUBudgetTracker'
 * set in the constructor.
 *
 * An 'InsertionEvictionListener' may optionally be specified to track the insertion and eviction of
 * each key-value pair.
 *
 * Caveat:
 * This kv-store is NOT thread safe! The client to this utility is responsible
 * for protecting concurrent access to the LRU store if used in a threaded
 * context.
 *
 * Implemented as a doubly-linked list with a hash map for quickly locating the kv-store entries.
 * The add(), get(), and remove() operations are all O(1).
 *
 * TODO: We could move this into the util/ directory and do any cleanup necessary to make it
 * fully general.
 ','line_number':120,'multiline':True]['text':' These type declarations are required by the 'Partitioned' utility.','line_number':162,'multiline':False]['text':'*
     * Add an (K, V) pair to the store, where 'key' can be used to retrieve value 'entry' from the
     * store. If 'key' already exists in the kv-store, 'entry' will simply replace what is already
     * there. If after the add() operation the kv-store exceeds its budget, then the least recently
     * used entries will be evicted until the size is again under-budget. Returns the number of
     * evicted entries.
     ','line_number':167,'multiline':True]['text':'*
     * Retrieve the iterator to the value associated with 'key' from the kv-store. Note that this
     * iterator returned is only guaranteed to be valid until the next call to any method in this
     * class. As a side effect, the retrieved entry is promoted to the most recently used.
     ','line_number':191,'multiline':True]['text':' Promote the kv-store entry to the front of the list. It is now the most recently used.','line_number':203,'multiline':False]['text':'*
     * Remove the kv-store entry keyed by 'key'.
     * Returns false if there doesn't exist such 'key', otherwise returns true.
     ','line_number':213,'multiline':True]['text':'*
     * Remove all the entries for keys for which the predicate returns true. Returns the number of
     * removed entries.
     ','line_number':229,'multiline':True]['text':'*
     * Deletes all entries in the kv-store.
     ','line_number':249,'multiline':True]['text':'*
     * Reset the kv-store with new budget tracker. Returns the number of evicted entries.
     ','line_number':258,'multiline':True]['text':'*
     * Returns true if entry is found in the kv-store.
     ','line_number':266,'multiline':True]['text':'*
     * Returns the size (current budget) of the kv-store.
     ','line_number':273,'multiline':True]['text':'*
     * TODO: The kv-store should implement its own iterator. Calling through to the underlying
     * iterator exposes the internals, and forces the caller to make a horrible type declaration.
     ','line_number':280,'multiline':True]['text':'*
     * If the kv-store is over its budget this function evicts the least recently used entries until
     * the size is again under-budget. Returns the number of evicted entries
     ','line_number':293,'multiline':True]['text':' (K, V) pairs are stored in this std::list. They are sorted in order of use, where the front','line_number':314,'multiline':False]['text':' is the most recently used and the back is the least recently used.','line_number':315,'multiline':False]['text':' Maps from a key to the corresponding std::list entry.','line_number':318,'multiline':False]['text':' namespace mongo','line_number':322,'multiline':False]