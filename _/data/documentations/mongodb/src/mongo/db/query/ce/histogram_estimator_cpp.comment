['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':55,'multiline':False]['text':'*
 * Returns the selectivity of the given type according to the array histogram type counts, and may
 * apply heuristics to adjust the count estimate for the case where the counters don't have enough
 * information for us to accurately estimate the given interval.
 ','line_number':73,'multiline':True]['text':' Include scalar type count estimate.','line_number':87,'multiline':False]['text':' In the case of booleans, we have separate true/false counters we can use.','line_number':90,'multiline':False]['text':' Note that if we are asked by the optimizer to estimate an interval whose bounds','line_number':100,'multiline':False]['text':' are arrays, this means we are trying to estimate equality on nested arrays. In','line_number':101,'multiline':False]['text':' this case, we do not want to include the "scalar" type counter for the array','line_number':102,'multiline':False]['text':' type, because this will cause us to estimate the nested array case as counting','line_number':103,'multiline':False]['text':' all arrays, regardless of whether or not they are nested.','line_number':104,'multiline':False]['text':' The predicate {$eq: null} matches both missing and null values.','line_number':108,'multiline':False]['text':' We know the total count of values for this type; however, the interval given will','line_number':114,'multiline':False]['text':' likely not include all values. We therefore heuristically apply a default','line_number':115,'multiline':False]['text':' selectivity to the count of values of that type.','line_number':116,'multiline':False]['text':' If this histogram includes an array counter for this type, add its value to the estimate.','line_number':125,'multiline':False]['text':' We have a count of all arrays that contain any booleans and we assume that','line_number':130,'multiline':False]['text':' half of them will match for true and the other half will match for false. As','line_number':131,'multiline':False]['text':' a note, we could have arrays which contain both values and match in both','line_number':132,'multiline':False]['text':' cases.','line_number':133,'multiline':False]['text':' We have an exact count of arrays that contain nulls, so we want to return it.','line_number':138,'multiline':False]['text':' We heuristically assume a default selectivity for the given tag.','line_number':143,'multiline':False]['text':'*
 * Estimates the selectivity of a given 'interval' according to one of the possible estimation
 * modes. Note that if 'histogram' is null or if the 'interval' is incompatible with histogram
 * estimation, we fall back to heuristic estimation.
 ','line_number':153,'multiline':True]['text':' No need to estimate, as we're just going to return all inputs.','line_number':163,'multiline':False]['text':' Determine how this interval will be estimated.','line_number':166,'multiline':False]['text':' This is a range predicate.','line_number':176,'multiline':False]['text':' Fall back to heuristic estimation for this interval.','line_number':193,'multiline':False]['text':' TODO SERVER-67498: We want to use a per-interval fallback which depends on','line_number':194,'multiline':False]['text':' _fallbackCE, rather than an explicit call to heuristic estimation here, in order','line_number':195,'multiline':False]['text':' to parametrize the fallback logic and allow it to be set at the time when the','line_number':196,'multiline':False]['text':' estimator is constructed. For now, we use this because we need more refactoring','line_number':197,'multiline':False]['text':' to enable this behavior.','line_number':198,'multiline':False]['text':'*
 * This transport combines chains of PathGets and PathTraverses into an MQL-like string path.
 ','line_number':208,'multiline':True]['text':'node','line_number':213,'multiline':True]['text':' args ','line_number':230,'multiline':True]['text':' namespace','line_number':240,'multiline':False]['text':' Check if this interval deals with a type that should be estimated via histograms. We may get','line_number':260,'multiline':False]['text':' an interval where one bound is histogrammable but the other is not, as in the case where we','line_number':261,'multiline':False]['text':' have an upper or lower bound which is exclusive and is the first value in the next','line_number':262,'multiline':False]['text':' type-bracket which is not histogrammable.','line_number':263,'multiline':False]['text':' If neither type is histogrammable, we may still be able to estimate this interval using type','line_number':271,'multiline':False]['text':' counts; check if this interval includes only values of one type.','line_number':272,'multiline':False]['text':'queryParameters','line_number':296,'multiline':True]['text':'bindResult','line_number':297,'multiline':True]['text':'queryParameters','line_number':306,'multiline':True]['text':'bindsResult','line_number':308,'multiline':True]['text':'refsResult','line_number':309,'multiline':True]['text':' Early out and return 0 since we don't expect to get more results.','line_number':310,'multiline':False]['text':'queryParameters','line_number':340,'multiline':True]['text':'refsResult','line_number':342,'multiline':True]['text':' Root node does not change cardinality.','line_number':343,'multiline':False]['text':'*
     * Use fallback for other ABT types.
     ','line_number':347,'multiline':True]['text':'node','line_number':352,'multiline':True]['text':'*
     * This struct is used to track an intermediate representation of the intervals in the
     * requirements map. In particular, grouping intervals along each path in the map allows us to
     * determine which paths should be estimated as $elemMatches without relying on a particular
     * order of entries in the requirements map.
     ','line_number':365,'multiline':True]['text':'*
     * Estimate the selectivities of a PartialSchemaRequirements conjunction. It is assumed that the
     * conjuncts are all PartialSchemaEntries. The entire conjunction must be estimated at the same
     * time because some paths may have multiple requirements which should be considered together.
     ','line_number':381,'multiline':True]['text':' Initial first pass through the requirements map to extract information about each path.','line_number':389,'multiline':False]['text':' Ignore perf-only requirements.','line_number':397,'multiline':False]['text':' Check if we have already seen this path.','line_number':406,'multiline':False]['text':' We should estimate this path's intervals using $elemMatch','line_number':411,'multiline':False]['text':' semantics. Don't push back the interval for estimation; instead,','line_number':412,'multiline':False]['text':' we use it to change how we estimate other intervals along this','line_number':413,'multiline':False]['text':' path.','line_number':414,'multiline':False]['text':' We will need to estimate this interval.','line_number':417,'multiline':False]['text':' Get histogram from statistics if it exists, or null if not.','line_number':423,'multiline':False]['text':' Add this path to the map. If this is not a 'PathArr' interval, add it to','line_number':426,'multiline':False]['text':' the vector of intervals we will be estimating.','line_number':427,'multiline':False]['text':' If there is a single 'PathArr' interval for this field, we should estimate this','line_number':442,'multiline':False]['text':' as the selectivity of array values.','line_number':443,'multiline':False]['text':' This is a special interval indicating that we expect to use $elemMatch semantics when','line_number':471,'multiline':False]['text':' estimating the current path.','line_number':472,'multiline':False]['text':' namespace mongo::optimizer::ce','line_number':494,'multiline':False]