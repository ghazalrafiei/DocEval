['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Represents the "key" used in the PlanCache mapping from query shape -> query plan.
 ','line_number':52,'multiline':True]['text':'*
 * A PlanCacheIndexTree is the meaty component of the data
 * stored in SolutionCacheData. It is a tree structure with
 * index tags that indicates to the access planner which indices
 * it should try to use.
 *
 * How a PlanCacheIndexTree is created:
 *   The query planner tags a match expression with indices. It
 *   then uses the tagged tree to create a PlanCacheIndexTree,
 *   using QueryPlanner::cacheDataFromTaggedTree. The PlanCacheIndexTree
 *   is isomorphic to the tagged match expression, and has matching
 *   index tags.
 *
 * How a PlanCacheIndexTree is used:
 *   When the query planner is planning from the cache, it uses
 *   the PlanCacheIndexTree retrieved from the cache in order to
 *   recreate index assignments. Specifically, a raw MatchExpression
 *   is tagged according to the index tags in the PlanCacheIndexTree.
 *   This is done by QueryPlanner::tagAccordingToCache.
 ','line_number':108,'multiline':True]['text':'*
     * An OrPushdown is the cached version of an OrPushdownTag::Destination. It indicates that this
     * node is a predicate that can be used inside of a sibling indexed OR, to tighten index bounds
     * or satisfy the first field in the index.
     ','line_number':129,'multiline':True]['text':' Add size of each element in 'route' vector.','line_number':136,'multiline':False]['text':' Subtract static size of 'identifier' since it is already included in','line_number':138,'multiline':False]['text':' 'sizeof(*this)'.','line_number':139,'multiline':False]['text':' Add size of the object.','line_number':141,'multiline':False]['text':'*
     * Clone 'ie' and set 'this->entry' to be the clone.
     ','line_number':152,'multiline':True]['text':'*
     * Make a deep copy.
     ','line_number':157,'multiline':True]['text':'*
     * For debugging.
     ','line_number':162,'multiline':True]['text':' Recursively add size of each element in 'children' vector.','line_number':168,'multiline':False]['text':' Add size of each element in 'orPushdowns' vector.','line_number':173,'multiline':False]['text':' Add size of 'entry' if present.','line_number':178,'multiline':False]['text':' Add size of the object.','line_number':180,'multiline':False]['text':' Owned here.','line_number':186,'multiline':False]['text':' The value for this member is taken from the IndexTag of the corresponding match expression','line_number':191,'multiline':False]['text':' and is used to ensure that bounds are correctly intersected and/or compounded when a query is','line_number':192,'multiline':False]['text':' planned from the plan cache.','line_number':193,'multiline':False]['text':'*
 * Data stored inside a QuerySolution which can subsequently be used to create a cache entry. When
 * this data is retrieved from the cache, it is sufficient to reconstruct the original
 * QuerySolution.
 ','line_number':199,'multiline':True]['text':' For debugging.','line_number':213,'multiline':False]['text':' If 'wholeIXSoln' is false, then 'tree' can be used to tag an isomorphic match expression.','line_number':220,'multiline':False]['text':' If 'wholeIXSoln' is true, then 'tree' is used to store the relevant IndexEntry.','line_number':221,'multiline':False]['text':' If 'collscanSoln' is true, then 'tree' should be NULL.','line_number':222,'multiline':False]['text':' Indicates that the plan should use','line_number':226,'multiline':False]['text':' the index as a proxy for a collection','line_number':227,'multiline':False]['text':' scan (e.g. using index to provide sort).','line_number':228,'multiline':False]['text':' The cached plan is a collection scan.','line_number':231,'multiline':False]['text':' Build the solution by using 'tree'','line_number':234,'multiline':False]['text':' to tag the match expression.','line_number':235,'multiline':False]['text':' The direction of the index scan used as','line_number':239,'multiline':False]['text':' a proxy for a collection scan. Used only','line_number':240,'multiline':False]['text':' for WHOLE_IXSCAN_SOLN.','line_number':241,'multiline':False]['text':' True if index filter was applied.','line_number':244,'multiline':False]['text':' Hash of the QuerySolution that led to this cache data.','line_number':247,'multiline':False]['text':'*
     * This estimator function is called when an entry is added or removed to LRU cache in order to
     * make sure the total plan cache size does not exceed the maximum size.
     ','line_number':256,'multiline':True]['text':'*
 * We don't want to cache every possible query. This function encapsulates the criteria for what
 * makes a canonical query suitable for inclusion in the cache.
 ','line_number':273,'multiline':True]['text':' namespace mongo','line_number':278,'multiline':False]