['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This struct tracks the components of a find command which are important for the find query shape.
 * It attempts to only track those which are _unique_ to a find command - common elements should go
 * on some super class.
 *
 * Data elements which are shapified like 'filter' are stored in their shapified form. By default
 * and in most cases this will be the representative query shape form so that it can be re-parsed,
 * but as a convenience for serializing it is also supported to construct and serialize this with
 * other options.
 ','line_number':38,'multiline':True]['text':'*
     * Appends using the SerializationOptions given in the constructor.
     ','line_number':55,'multiline':True]['text':' This anonymous struct represents the presence of the member variables as C++ bit fields.','line_number':80,'multiline':False]['text':' In doing so, each of these boolean values takes up 1 bit instead of 1 byte.','line_number':81,'multiline':False]['text':' We save a copy of the options used when constructed so we know how to properly append things','line_number':89,'multiline':False]['text':' like limit and skip - either a 1 or "?number". We could have the caller pass the options','line_number':90,'multiline':False]['text':' again during 'appendTo()', but this introduces a risk that the options provided are different','line_number':91,'multiline':False]['text':' than the ones we used to compute 'filter' and the other components.','line_number':92,'multiline':False]['text':'*
     * Assembles a parseable FindCommandRequest representing this shape - some of the pieces are
     * stored right here in the shape, others are in parent classes.
     ','line_number':103,'multiline':True]['text':' namespace mongo::query_shape','line_number':123,'multiline':False]