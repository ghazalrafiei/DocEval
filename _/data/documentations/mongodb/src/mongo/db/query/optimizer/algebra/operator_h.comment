['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Concrete storage for 'S' items of type 'T'. This class is an alias for a static array, useful in
 * a tree representation to store a node's children.
 ','line_number':43,'multiline':True]['text':'*
 * Stub for nodes with no children.
 ','line_number':56,'multiline':True]['text':' Forward declaration to allow friend declaration.','line_number':62,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' namespace detail','line_number':67,'multiline':False]['text':'*
 * Nodes which have a fixed arity (number of children) should derive from this class. The 'Slot'
 * determines the generic type to hold for each child.
 ','line_number':69,'multiline':True]['text':'','line_number':78,'multiline':False]['text':'*
     * Helper function to compare 2 nodes children with each other. Returns true if all children
     * with matching positions are equal and false otherwise.
     ','line_number':97,'multiline':True]['text':'*
 * Nodes which have dynamic arity with an optional minimum number of children.
 ','line_number':111,'multiline':True]['text':'*
 * Semantic transport interface.
 ','line_number':133,'multiline':True]['text':'*
 * Determines the type of the first case of a given PolyValue.
 *
 * For example, given PolyValue<Leaf, BinaryNode>, the concrete type would be Leaf.
 ','line_number':172,'multiline':True]['text':' Implements 'deduced_t'.','line_number':180,'multiline':False]['text':'*
 * Determines the return type of the D::transport() handlers.
 *
 * Specifically, checks the return type of whichever transport() overload handles the first case
 * of the PolyValue. We assume this first case has zero children.
 *
 * 'T' is the type being visited: PolyValue, or PolyValue::reference_type, or a (possibly const)
 * reference to either of those. When 'withSlot' is true, transport() overloads expect this to
 * be forwarded as the first argument.
 *
 * 'Args...' is a pack of types of any extra arguments the transport() overloads are expecting,
 * forwarded from the top-level algebra::transport call.
 ','line_number':195,'multiline':True]['text':'*
 * Helper for unpacking the children of an op.
 *
 * Calls the callback with:
 *   - the vector of dynamic children, if it's a dynamic-arity op.
 *   - the static children as separate arguments.
 ','line_number':221,'multiline':True]['text':' N is either `PolyValue<Ts...>&` or `const PolyValue<Ts...>&` i.e. reference','line_number':230,'multiline':False]['text':' T is either `A&` or `const A&` where A is one of Ts','line_number':231,'multiline':False]['text':'*
 * Helper for unpacking child-results from a vector.
 *
 * Calls the callback with:
 *   - the vector of dynamic child-results, if 'is_dynamic'.
 *   - the static child-results as separate arguments.
 ','line_number':243,'multiline':True]['text':' In left-to-right traversal order the dynamic children come first, so they','line_number':256,'multiline':False]['text':' were pushed earlier. In both cases the static results are at the end.','line_number':257,'multiline':False]['text':' The dynamic results are immediately before the static results.','line_number':260,'multiline':False]['text':'*
 * Allows navigating / iterating a tree of PolyValue / Operator nodes.
 *
 * Holds references to the 'current()' node being visited and all of its ancestors.
 * Therefore, the caller must not mutate any of those ancestors. It's safe to mutate 'current()',
 * but mutating any node above the current would invalidate some of those references.
 *
 * 'Tree' is the value type of the root node that the caller has. It could be:
 *   - PolyValue
 *   - const PolyValue
 *   - PolyValue::reference_type
 *   - const PolyValue::reference_type
 *
 * 'Ref' is the type of references that are returned on each iteration,
 * and are stored on the stack internally. It could be:
 *   - PolyValue&
 *   - const PolyValue&
 *   - PolyValue::reference_type
 *   - const PolyValue::reference_type
 * It's important not to use a type like 'reference_type&', because the reference_type it points to
 * would necessarily be temporary, because an operator tree doesn't store reference_type.
 ','line_number':273,'multiline':True]['text':'','line_number':296,'multiline':False]['text':' Represents one-past-the-end.','line_number':299,'multiline':False]['text':' Uses 'tree' as the root.','line_number':301,'multiline':False]['text':' True if the cursor is one-past-the-end.','line_number':305,'multiline':False]['text':' True if we are visiting the current node for the first time, on the way down.','line_number':310,'multiline':False]['text':' False if we are visiting it for the second and last time, on the way up.','line_number':311,'multiline':False]['text':' 'remove_const_t' here because shallow const does not affect the function signature, and','line_number':316,'multiline':False]['text':' clang-tidy complains.','line_number':317,'multiline':False]['text':' Try entering first child; otherwise leave current node.','line_number':324,'multiline':False]['text':' Try entering next sibling; otherwise leave parent node.','line_number':335,'multiline':False]['text':' NOTE visit() cannot return a reference, because it's declared 'auto visit(...)'.','line_number':339,'multiline':False]['text':' Consider using decltype(auto) there, like std::visit does.','line_number':340,'multiline':False]['text':' Work around it by putting everything inside the lambda.','line_number':341,'multiline':False]['text':' '_entering' is still false.','line_number':350,'multiline':False]['text':' Get the 'i'th child, where 'i' is in the range [0, get_total_arity).','line_number':366,'multiline':False]['text':'','line_number':367,'multiline':False]['text':' If there are any dynamic children, then they are ordered before static children, just like','line_number':368,'multiline':False]['text':' the constructor of OpDynamicArity. So get_child(op, 0) is always the first dynamic child if','line_number':369,'multiline':False]['text':' there is one.','line_number':370,'multiline':False]['text':'','line_number':371,'multiline':False]['text':' 'remove_const_t' here because shallow const does not affect the function signature, and','line_number':372,'multiline':False]['text':' clang-tidy complains.','line_number':373,'multiline':False]['text':' Dynamic and static children.','line_number':378,'multiline':False]['text':' Only static children.','line_number':386,'multiline':False]['text':' 'index' is the position of 'node' within its parent.','line_number':394,'multiline':False]['text':' If 'node' is the root, then 'index' is 0.','line_number':395,'multiline':False]['text':' 'parentArity' is the number of children the parent of 'node' has.','line_number':397,'multiline':False]['text':' If 'node' is the root, then 'parentArity' is 1.','line_number':398,'multiline':False]['text':' An Entry is only valid as long as 'index < parentArity'.','line_number':399,'multiline':False]['text':' Points to an ancestor of the current() node, or the current node itself.','line_number':401,'multiline':False]['text':' '_stack.back().node' is the current node and '_stack[0].node' is the root.','line_number':404,'multiline':False]['text':' When iteration is done, we represent past-the-end by an empty _stack.','line_number':405,'multiline':False]['text':' '_entering=true' means we are visiting a node before we have visited its children.','line_number':407,'multiline':False]['text':' '_entering=false' means we are "leaving" it: visiting it after its children.','line_number':408,'multiline':False]['text':' namespace detail','line_number':428,'multiline':False]['text':'*
 * Walker for the Operator* types. Accepts a domain 'D' of 'walk' callback overloads.
 *
 * The caller may optionally supply 'withSlot' to include a reference to base PolyValue as a first
 * argument to the walk callbacks.
 ','line_number':430,'multiline':True]['text':' N is either `PolyValue<Ts...>&` or `const PolyValue<Ts...>&` i.e. reference','line_number':471,'multiline':False]['text':' T is either `A&` or `const A&` where A is one of Ts','line_number':472,'multiline':False]['text':'*
 * Post-order traversal over the tree given by 'node', with domain D of 'transport' callbacks for
 * each node type. The domain may optionally contain 'prepare' method overloads to pre-visit a node
 * before traversing its children. The traversal is guaranteed to use depth-first, left-to-right
 * order.
 *
 * This method also allows propagating results from the traversal implicitly via the return type of
 * the methods in D. For instance, to return an integer after traversal and a node which has two
 * children, the signature would look something like this:
 *
 *      int transport(const NodeType&, int childResult0, int childResult1)
 *
 * See 'algebra_test.cpp' for more examples.
 ','line_number':492,'multiline':True]['text':' If it's a void transport we don't need the results stack.','line_number':514,'multiline':False]['text':' Use boost vector to avoid std::vector<bool> special case.','line_number':516,'multiline':False]['text':' Pass the domain through lambda arguments, because capturing it results in a compile','line_number':523,'multiline':False]['text':' error (which each compiler may or may not detect: at time of writing clang and msvc','line_number':524,'multiline':False]['text':' detect it and gcc does not).','line_number':525,'multiline':False]['text':'','line_number':526,'multiline':False]['text':' When a constexpr if evaluates to false, it "discards" the body, but "the discarded','line_number':527,'multiline':False]['text':' statement cannot be ill-formed for every possible specialization". Presumably this','line_number':528,'multiline':False]['text':' rule is intended to catch mistakes early, when the template is defined.','line_number':529,'multiline':False]['text':'','line_number':530,'multiline':False]['text':' If the 'domain' type has no prepare() methods, and we capture it, then','line_number':531,'multiline':False]['text':' 'domain.prepare(/* ... */)' looks like a mistake according to this rule. Any','line_number':532,'multiline':False]['text':' instantiation of the lambda makes this call ill-formed.','line_number':533,'multiline':False]['text':'','line_number':534,'multiline':False]['text':' Passing the 'd' as an argument means the validity of 'd.prepare()' depends on how','line_number':535,'multiline':False]['text':' the lambda is instantiated, so we no longer violate this rule.','line_number':536,'multiline':False]['text':'domain','line_number':538,'multiline':True]['text':' Each overload of prepare() is optional, so check whether this','line_number':539,'multiline':False]['text':' particular overload is implemented.','line_number':540,'multiline':False]['text':' prepare() does not take child-results because they haven't been','line_number':546,'multiline':False]['text':' computed yet. For consistency it doesn't take the children,','line_number':547,'multiline':False]['text':' either.','line_number':548,'multiline':False]['text':' Pass the node's children, instead of child results.','line_number':567,'multiline':False]['text':' Unpack child results, and call transport() to get a new combined result.','line_number':587,'multiline':False]['text':' Replace child results with combined result.','line_number':607,'multiline':False]['text':'*
 * Visits 'node' by invoking the appropriate 'walk' overload in domain D. The 'walk' methods should
 * accept the node as the first argument and its children as subsequent arguments with generic type
 * N.
 *
 * Note that this method does not actually traverse the tree given in 'node'; the caller is
 * responsible for manually walking.
 ','line_number':622,'multiline':True]['text':' namespace algebra','line_number':635,'multiline':False]['text':' namespace mongo::optimizer','line_number':636,'multiline':False]