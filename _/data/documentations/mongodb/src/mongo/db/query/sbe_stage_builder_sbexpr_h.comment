['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':41,'multiline':False]['text':'*
 * Associate an expression with a signature representing all the possible types that the value
 * evalutated at runtime by the corresponding VM code can assume.
 ','line_number':63,'multiline':True]['text':' Collect the type information of the slots declared in the provided stage output.','line_number':75,'multiline':False]['text':' Return whether the declared outputs contain a block value.','line_number':78,'multiline':False]['text':' Run constant folding on the provided ABT tree and return its type signature. If the type','line_number':81,'multiline':False]['text':' information for the visible slots is available in the slotInfo argument, it is used to perform a','line_number':82,'multiline':False]['text':' more precise type checking optimization. On return, the abt argument points to the modified tree.','line_number':83,'multiline':False]['text':' Optimize (by modifying it in place via a call to constantFold) and convert the provided ABT tree','line_number':88,'multiline':False]['text':' into an equivalent typed EExpression tree. The type information for the visible slots provided in','line_number':89,'multiline':False]['text':' the slotInfo argument is forwarded to the constantFold operation.','line_number':90,'multiline':False]['text':'*
 * The SbVar class is used to represent variables in the SBE stage builder. "SbVar" is short for
 * "stage builder variable". A given SbVar can represent either be a "slot variable" or a "local
 * variable".
 *
 * An SbVar can be constructed from an EVariable or ProjectionName, and likewise an SbVar can be
 * converted to EVariable or ProjectionName.
 ','line_number':95,'multiline':True]['text':'*
 * The SbExpr class is used to represent expressions in the SBE stage builder. "SbExpr" is short
 * for "stage builder expression".
 *
 * At any given time, an SbExpr object can be in one of 4 states:
 *  1) Null - The SbExpr doesn't hold anything.
 *  2) Slot - The SbExpr holds a slot variable.
 *  3) ABT - The SbExpr holds an ABT that is not known to be a slot variable.
 *  4) Expr - The SbExpr holds an EExpression that is not known to be a slot variable.
 *
 * 'e.isNull()' returns true if 'e' is in state 1. 'e.hasSlot()' returns true if 'e' is in state 2.
 * 'e.hasABT()' returns true if 'e' is in state 2 or state 3.
 ','line_number':139,'multiline':True]['text':'*
     * Extract the expression on top of the stack as an SBE EExpression node. If the expression is
     * stored as an ABT node, it is lowered into an SBE expression, using the provided map to
     * convert variable names into slot ids.
     ','line_number':308,'multiline':True]['text':'*
     * Extract the expression on top of the stack as an ABT node. Throws an exception if the
     * expression is stored as an EExpression.
     ','line_number':315,'multiline':True]['text':' The bool type as the first option is used to represent the empty storage.','line_number':326,'multiline':False]['text':'*
 * "SbStage" is short for "stage builder stage". SbStage is an alias for a unique pointer type.
 ','line_number':330,'multiline':True]['text':'*
 * In the past, "SbExpr" used to be named "EvalExpr". For now we have this type alias so that code
 * that refers to "EvalExpr" still works.
 *
 * TODO SERVER-80366: Remove this type alias when it's no longer needed.
 ','line_number':335,'multiline':True]['text':' namespace mongo::stage_builder','line_number':343,'multiline':False]