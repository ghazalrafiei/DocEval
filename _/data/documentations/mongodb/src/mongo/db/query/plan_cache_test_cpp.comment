['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This file contains tests for mongo/db/query/plan_cache.h
 ','line_number':30,'multiline':True]['text':'*
     * Test functions for shouldCacheQuery.
     *
     * Use these functions to assert which categories of canonicalized queries are suitable for
     * inclusion in the plan cache.
     ','line_number':110,'multiline':True]['text':'*
 * Helper which constructs a $** IndexEntry and returns it along with an owned ProjectionExecutor.
 * The latter simulates the ProjectionExecutor which, during normal operation, is owned and
 * maintained by the $** index's IndexAccessMethod, and is required because the plan cache will
 * obtain unowned pointers to it.
 ','line_number':157,'multiline':True]['text':' multikey','line_number':169,'multiline':False]['text':' sparse','line_number':172,'multiline':False]['text':' unique','line_number':173,'multiline':False]['text':'','line_number':182,'multiline':False]['text':' Tests for CachedSolution.','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':'*
 * Utility function to create a PlanRankingDecision.
 ','line_number':186,'multiline':True]['text':'*
 * Cacheable queries.
 *
 * These queries will be added to the cache with run-time statistics and can be managed with the
 * cache DB commands.
 ','line_number':213,'multiline':True]['text':'*
 * Non-cacheable queries.
 *
 * These queries will be sent through the planning process everytime.
 ','line_number':230,'multiline':True]['text':'*
 * Collection scan.
 *
 * This should normally be handled by the IDHack runner.
 ','line_number':236,'multiline':True]['text':'*
 * Hint.
 *
 * A hinted query implies strong user preference for a particular index.
 * Therefore, not much point in caching.
 ','line_number':246,'multiline':True]['text':'*
 * Min queries are a specialized case of hinted queries.
 ','line_number':258,'multiline':True]['text':'*
 * Max queries are non-cacheable for the same reasons as min queries.
 ','line_number':267,'multiline':True]['text':'*
 * $geoWithin queries with legacy coordinates are cacheable as long as the planner is able to come
 * up with a cacheable solution.
 ','line_number':276,'multiline':True]['text':'*
 * $geoWithin queries with GeoJSON coordinates are supported by the index bounds builder.
 ','line_number':287,'multiline':True]['text':'*
 * $geoWithin queries with both legacy and GeoJSON coordinates are cacheable.
 ','line_number':298,'multiline':True]['text':'*
 * $geoIntersects queries are always cacheable because they support GeoJSON coordinates only.
 ','line_number':310,'multiline':True]['text':'*
 * $geoNear queries are cacheable because we are able to distinguish between flat and spherical
 * queries.
 ','line_number':321,'multiline':True]['text':'*
 * Explain queries are not-cacheable because of allPlans cannot be accurately generated from stale
 * cached stats in the plan cache for non-winning plans.
 ','line_number':332,'multiline':True]['text':' min, max','line_number':344,'multiline':False]['text':' explain','line_number':345,'multiline':False]['text':' Set the global flag for disabling active entries.','line_number':374,'multiline':False]['text':' After add, the planCache should have an _active_ entry.','line_number':394,'multiline':False]['text':' Call deactivate(). It should be a noop.','line_number':397,'multiline':False]['text':' The entry should still be active.','line_number':400,'multiline':False]['text':' remove() the entry.','line_number':403,'multiline':False]['text':' Use a tiny cache size.','line_number':410,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':419,'multiline':False]['text':' Add a cache entry for another shape.','line_number':422,'multiline':False]['text':' Access the cached solution for the {a: 1} shape. Now the entry for {b: 1} will be the least','line_number':429,'multiline':False]['text':' recently used.','line_number':430,'multiline':False]['text':' Insert another entry. Since the cache size is 2, we expect the {b: 1} entry to be ejected.','line_number':433,'multiline':False]['text':' Check that {b: 1} is gone, but {a: 1} and {c: 1} both still have entries.','line_number':439,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':462,'multiline':False]['text':' remove() the entry.','line_number':465,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':488,'multiline':False]['text':' Clear the plan cache. The inactive entry should now be removed.','line_number':491,'multiline':False]['text':' Check if key is in cache before and after set().','line_number':505,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':515,'multiline':False]['text':' Calling set() again, with a solution that had a lower works value should create an active','line_number':520,'multiline':False]['text':' entry.','line_number':521,'multiline':False]['text':' Clear the plan cache. The active entry should now be removed.','line_number':531,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':554,'multiline':False]['text':' Calling set() again, with a solution that had a higher works value. This should cause the','line_number':563,'multiline':False]['text':' works on the original entry to be increased.','line_number':564,'multiline':False]['text':' The entry should still be inactive. Its works should double though.','line_number':572,'multiline':False]['text':' Calling set() again, with a solution that had a higher works value. This should cause the','line_number':581,'multiline':False]['text':' works on the original entry to be increased.','line_number':582,'multiline':False]['text':' The entry should still be inactive. Its works should have doubled again.','line_number':590,'multiline':False]['text':' Calling set() again, with a solution that has a lower works value than what's currently in','line_number':599,'multiline':False]['text':' the cache.','line_number':600,'multiline':False]['text':' The solution just run should now be in an active cache entry, with a works','line_number':608,'multiline':False]['text':' equal to the number of works the solution took.','line_number':609,'multiline':False]['text':' Clear the plan cache. The active entry should now be removed.','line_number':623,'multiline':False]['text':' Will use a very small growth coefficient.','line_number':630,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':649,'multiline':False]['text':' Calling set() again, with a solution that had a higher works value. This should cause the','line_number':658,'multiline':False]['text':' works on the original entry to be increased. In this case, since nWorks is 3,','line_number':659,'multiline':False]['text':' multiplying by the value 1.10 will give a value of 3 (static_cast<size_t>(1.1 * 3) == 3).','line_number':660,'multiline':False]['text':' We check that the works value is increased 1 instead.','line_number':661,'multiline':False]['text':' The entry should still be inactive. Its works should increase by 1.','line_number':670,'multiline':False]['text':' Clear the plan cache. The inactive entry should now be removed.','line_number':677,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':700,'multiline':False]['text':' Call set() again, with a solution that has a lower works value. This will result in an','line_number':709,'multiline':False]['text':' active entry being created.','line_number':710,'multiline':False]['text':' Now call set() again, but with a solution that has a higher works value. This should be','line_number':725,'multiline':False]['text':' a noop.','line_number':726,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':757,'multiline':False]['text':' Call set() again, with a solution that has a lower works value. This will result in an','line_number':765,'multiline':False]['text':' active entry being created.','line_number':766,'multiline':False]['text':' Now call set() again, with a solution that has a lower works value. The current active entry','line_number':781,'multiline':False]['text':' should be overwritten.','line_number':782,'multiline':False]['text':' After add, the planCache should have an inactive entry.','line_number':813,'multiline':False]['text':' Call set() again, with a solution that has a lower works value. This will result in an','line_number':821,'multiline':False]['text':' active entry being created.','line_number':822,'multiline':False]['text':' Be sure the entry has the same works value.','line_number':838,'multiline':False]['text':' Create a cache entry with 5 works.','line_number':848,'multiline':False]['text':' Create a second cache entry with 3 works.','line_number':862,'multiline':False]['text':' Verify that the cache entries have been created.','line_number':876,'multiline':False]['text':' Define a serialization function which just serializes the number of works.','line_number':879,'multiline':False]['text':' Define a matcher which matches if the number of works exceeds 4.','line_number':885,'multiline':False]['text':' Verify the output of getMatchingStats().','line_number':891,'multiline':False]['text':' cacheKeyFilterFunc ','line_number':893,'multiline':True]['text':'*
 * Each test in the CachePlanSelectionTest suite goes through
 * the following flow:
 *
 * 1) Run QueryPlanner::plan on the query, with specified indices
 * available. This simulates the case in which we failed to plan from
 * the plan cache, and fell back on selecting a plan ourselves. The
 * enumerator will run, and cache data will be stashed into each solution
 * that it generates.
 *
 * 2) Use firstMatchingSolution to select one of the mult-planned solutions generated by
 * QueryPlanner::plan. This simulates the multi plan runner picking the "best solution".
 *
 * 3) The cache data stashed inside the "best solution" is used to
 * make a CachedSolution which looks exactly like the data structure that
 * would be returned from the cache. This simulates a plan cache hit.
 *
 * 4) Call QueryPlanner::planFromCache, passing it the CachedSolution.
 * This exercises the code which is able to map from a CachedSolution to
 * a full-blown QuerySolution. Finally, assert that the query solution
 * recovered from the cache is identical to the original "best solution".
 ','line_number':898,'multiline':True]['text':'','line_number':979,'multiline':False]['text':' Execute planner.','line_number':980,'multiline':False]['text':'','line_number':981,'multiline':False]['text':' Clean up any previous state from a call to runQueryFull or runQueryAsCommand.','line_number':1038,'multiline':False]['text':' Clean up any previous state from a call to runQueryFull or runQueryAsCommand.','line_number':1069,'multiline':False]['text':'','line_number':1084,'multiline':False]['text':' Solution introspection.','line_number':1085,'multiline':False]['text':'','line_number':1086,'multiline':False]['text':'*
     * Returns number of generated solutions matching JSON.
     ','line_number':1094,'multiline':True]['text':'*
     * Verifies that the solution tree represented in json by 'solnJson' is
     * one of the solutions generated by QueryPlanner.
     *
     * The number of expected matches, 'numMatches', could be greater than
     * 1 if solutions differ only by the pattern of index tags on a filter.
     ','line_number':1114,'multiline':True]['text':'*
     * Plan 'query' from the cache with sort order 'sort', projection 'proj', and collation
     * 'collation'. A mock cache entry is created using the cacheData stored inside the
     * QuerySolution 'soln'.
     ','line_number':1133,'multiline':True]['text':' Create a CachedSolution the long way..','line_number':1158,'multiline':False]['text':' QuerySolution -> PlanCacheEntry -> CachedSolution','line_number':1159,'multiline':False]['text':' planCacheCommandKey ','line_number':1170,'multiline':True]['text':' isActive  ','line_number':1172,'multiline':True]['text':' works ','line_number':1174,'multiline':True]['text':'*
     * @param solnJson -- a json representation of a query solution.
     *
     * Returns the first solution matching 'solnJson', or fails if
     * no match is found.
     ','line_number':1183,'multiline':True]['text':'*
     * Assert that the QuerySolution 'trueSoln' matches the JSON-based representation
     * of the solution in 'solnJson'.
     *
     * Relies on solutionMatches() -- see query_planner_test_lib.h
     ','line_number':1212,'multiline':True]['text':'*
     * Overloaded so that it is not necessary to specificy sort and project.
     ','line_number':1230,'multiline':True]['text':'*
     * First, the solution matching 'solnJson' is retrieved from the vector
     * of solutions generated by QueryPlanner::plan. This solution is
     * then passed into planQueryFromCache(). Asserts that the solution
     * generated by QueryPlanner::planFromCache matches 'solnJson'.
     *
     * Must be called after calling one of the runQuery* methods.
     *
     * Together, 'query', 'sort', 'proj', and 'collation' should specify the query which was
     * previously run using one of the runQuery* methods.
     ','line_number':1237,'multiline':True]['text':'*
     * Check that the solution will not be cached. The planner will store
     * cache data inside non-cachable solutions, but will not do so for
     * non-cachable solutions. Therefore, we just have to check that
     * cache data is NULL.
     ','line_number':1258,'multiline':True]['text':'','line_number':1281,'multiline':False]['text':' Equality','line_number':1282,'multiline':False]['text':'','line_number':1283,'multiline':False]['text':'','line_number':1301,'multiline':False]['text':' Geo','line_number':1302,'multiline':False]['text':'','line_number':1303,'multiline':False]['text':' Regression test for SERVER-24320. Tests that the PlanCacheIndexTree has the same sort order as','line_number':1383,'multiline':False]['text':' the MatchExpression used to generate the plan cache key.','line_number':1384,'multiline':False]['text':' $** index','line_number':1400,'multiline':False]['text':' Query with fields in a different order, so that index entry expansion results in the list of','line_number':1421,'multiline':False]['text':' indexes being in a different order. Should still yield the same plans.','line_number':1422,'multiline':False]['text':'','line_number':1428,'multiline':False]['text':' tree operations','line_number':1429,'multiline':False]['text':'','line_number':1430,'multiline':False]['text':'','line_number':1479,'multiline':False]['text':' Sort orders','line_number':1480,'multiline':False]['text':'','line_number':1481,'multiline':False]['text':' SERVER-1205.','line_number':1483,'multiline':False]['text':' SERVER-1205 as well.','line_number':1501,'multiline':False]['text':' Disabled: SERVER-10801.','line_number':1518,'multiline':False]['text':'
TEST_F(CachePlanSelectionTest, SortOnGeoQuery) {
    addIndex(BSON("timestamp" << -1 << "position" << "2dsphere"), "timestamp_-1_position_2dsphere");
    BSONObj query = fromjson("{position: {$geoWithin: {$geometry: {type: \"Polygon\", "
                             "coordinates: [[[1, 1], [1, 90], [180, 90], "
                             "[180, 1], [1, 1]]]}}}}");
    BSONObj sort = fromjson("{timestamp: -1}");
    runQuerySortProj(query, sort, BSONObj());

    assertPlanCacheRecoversSolution(query, sort, BSONObj(),
        "{fetch: {node: {ixscan: {pattern: {timestamp: -1, position: '2dsphere'}}}}}");
}
','line_number':1519,'multiline':True]['text':' SERVER-9257','line_number':1533,'multiline':False]['text':'','line_number':1561,'multiline':False]['text':' Caching collection scans.','line_number':1562,'multiline':False]['text':'','line_number':1563,'multiline':False]['text':'','line_number':1595,'multiline':False]['text':' Caching plans that use multikey indexes.','line_number':1596,'multiline':False]['text':'','line_number':1597,'multiline':False]['text':' Enable a hash-based index intersection plan to be generated because we are scanning a','line_number':1633,'multiline':False]['text':' non-point range on the "a" field.','line_number':1634,'multiline':False]['text':' Enable a hash-based index intersection plan to be generated because we are scanning a','line_number':1674,'multiline':False]['text':' non-point range on the "a.c" field.','line_number':1675,'multiline':False]['text':'','line_number':1697,'multiline':False]['text':' Check queries that, at least for now, are not cached.','line_number':1698,'multiline':False]['text':'','line_number':1699,'multiline':False]['text':'','line_number':1742,'multiline':False]['text':' Queries using '2d' indices are not cached.','line_number':1743,'multiline':False]['text':'','line_number':1744,'multiline':False]['text':' Polygon','line_number':1752,'multiline':False]['text':' Center','line_number':1757,'multiline':False]['text':' Centersphere','line_number':1762,'multiline':False]['text':' Within box.','line_number':1767,'multiline':False]['text':'','line_number':1790,'multiline':False]['text':' Collation.','line_number':1791,'multiline':False]['text':'','line_number':1792,'multiline':False]['text':' Verify that the plan cache size increases after adding new entry to cache.','line_number':1857,'multiline':False]['text':' Verify that trying to set the same entry won't change the plan cache size.','line_number':1869,'multiline':False]['text':' Verify that the plan cache size increases after updating the same entry with more solutions.','line_number':1881,'multiline':False]['text':' Verify that the plan cache size decreases after updating the same entry with fewer solutions.','line_number':1892,'multiline':False]['text':' Verify that adding multiple entries will increasing the cache size.','line_number':1903,'multiline':False]['text':' Update the field name in the query string so that plan cache creates a new entry.','line_number':1907,'multiline':False]['text':' Verify that removing multiple entries will decreasing the cache size.','line_number':1922,'multiline':False]['text':' Update the field name in the query to match the previously created plan cache entry key.','line_number':1924,'multiline':False]['text':' Verify that size is reset to the size when there is only entry.','line_number':1931,'multiline':False]['text':' Verify that trying to remove a non-existing key won't change the plan cache size.','line_number':1934,'multiline':False]['text':' Verify that the plan cache size goes back to original size when the entry is removed.','line_number':1940,'multiline':False]['text':' Add entries until plan cache is full and verify that the size keeps increasing.','line_number':1955,'multiline':False]['text':' Update the field name in the query string so that plan cache creates a new entry.','line_number':1958,'multiline':False]['text':' Verify that adding entry of same size as evicted entry wouldn't change the plan cache size.','line_number':1973,'multiline':False]['text':' Verify that adding entry with query bigger than the evicted entry's key should change the','line_number':1991,'multiline':False]['text':' plan cache size.','line_number':1992,'multiline':False]['text':' Verify that adding entry with query solutions larger than the evicted entry's query solutions','line_number':2008,'multiline':False]['text':' should increase the plan cache size.','line_number':2009,'multiline':False]['text':' Verify that adding entry with query solutions smaller than the evicted entry's query','line_number':2025,'multiline':False]['text':' solutions should decrease the plan cache size.','line_number':2026,'multiline':False]['text':' clear() should reset the size.','line_number':2041,'multiline':False]['text':' Verify that adding entries to both plan caches will keep increasing the cache size.','line_number':2054,'multiline':False]['text':' Update the field name in the query string so that plan cache creates a new entry.','line_number':2057,'multiline':False]['text':' Verify that removing entries from one plan caches will keep decreasing the cache size.','line_number':2083,'multiline':False]['text':' Update the field name in the query to match the previously created plan cache entry key.','line_number':2085,'multiline':False]['text':' Verify for scoped PlanCache object.','line_number':2093,'multiline':False]['text':' Verify that size is reset to 'sizeBeforeScopedPlanCache' after the destructor of 'planCache'','line_number':2109,'multiline':False]['text':' is called.','line_number':2110,'multiline':False]['text':' Clear 'planCache2' to remove all entries.','line_number':2113,'multiline':False]['text':' Verify that size is reset to the original size after removing all entries.','line_number':2118,'multiline':False]['text':'*
 * Tests specifically for SBE plan cache.
 ','line_number':2138,'multiline':True]['text':'*
     * Checks if plan cache size calculation returns expected result.
     ','line_number':2162,'multiline':True]['text':' Create canonical query.','line_number':2169,'multiline':False]['text':' The static size of the key structure.','line_number':2175,'multiline':False]['text':' The actual key representation is encoded as a string.','line_number':2178,'multiline':False]['text':' The tests are setup for a single collection.','line_number':2181,'multiline':False]['text':' namespace','line_number':2244,'multiline':False]