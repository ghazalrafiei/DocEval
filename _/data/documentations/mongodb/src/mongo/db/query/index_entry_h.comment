['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A CoreIndexInfo is a representation of an index in the catalog with parsed information which is
 * used for updating indexability discriminators. Its lifetime is not tied to the underlying
 * collection. It is a subset of IndexEntry and is missing fields that are expensive or unavailable.
 ','line_number':63,'multiline':True]['text':' If a projection executor exists, we always expect a $** index','line_number':86,'multiline':False]['text':'*
     * This struct is used to uniquely identify an index. The index "Identifier" has two
     * components: catalog name, and "disambiguator". The catalog name is just the name of the
     * index in the catalog. The disambiguator is used by the planner when multiple IndexEntries
     * may refer to the same underlying index in the catalog. This can only happen with $**
     * indices. Otherwise, the disambiguator should be empty.
     *
     * Has the same comparison and equality semantics as std::pair<string, string>.
     *
     ','line_number':93,'multiline':True]['text':' The name of the index in the catalog.','line_number':132,'multiline':False]['text':' A string used for disambiguating multiple IndexEntries with the same catalogName (such','line_number':135,'multiline':False]['text':' as in the case with a wildcard index).','line_number':136,'multiline':False]['text':' What type of index is this? (What access method can we use on the index described by the','line_number':144,'multiline':False]['text':' keyPattern?)','line_number':145,'multiline':False]['text':' Null if this index orders strings according to the simple binary compare. If non-null,','line_number':150,'multiline':False]['text':' represents the collator used to generate index keys for indexed strings.','line_number':151,'multiline':False]['text':' For $** indexes, a pointer to the projection executor owned by the index access method. Null','line_number':154,'multiline':False]['text':' unless this IndexEntry represents a wildcard or column storeindex, in which case this is','line_number':155,'multiline':False]['text':' always non-null.','line_number':156,'multiline':False]['text':'*
 * An IndexEntry is a representation of an index in the catalog with parsed information which is
 * helpful for query planning. Its lifetime is not tied to the underlying collection. In contrast
 * to CoreIndexInfo, it includes information such as 'multikeyPaths' which can require resources to
 * compute (i.e. for wildcard indexes, this requires reading the index) and so may not always be
 * available.
 ','line_number':160,'multiline':True]['text':' The caller must not supply multikey metadata in two different formats.','line_number':190,'multiline':False]['text':' An IndexEntry should never have both formats of multikey metadata simultaneously.','line_number':201,'multiline':False]['text':'*
     * Returns true if 'indexedField' has any multikey components. For example, returns true if this
     * index has a multikey component "a", and 'indexedField' is "a.b". Illegal to call unless
     * 'indexedField' is present in this index's key pattern.
     *
     * For indexes created on older versions we may not have path-level multikey information. In
     * these cases we only have a single boolean to track whether any path in the index is multikey.
     * If this is the case we defensively return true for any path.
     ','line_number':205,'multiline':True]['text':' Indexes are logically equal when names are equal.','line_number':217,'multiline':False]['text':' For each element in 'multikeyPaths' add the 'length of the vector * size of the','line_number':225,'multiline':False]['text':' vector element'.','line_number':226,'multiline':False]['text':' Calculate the size of each std::set in 'multiKeyPaths'.','line_number':230,'multiline':False]['text':' Subtract static size of 'identifier' since it is already included in','line_number':238,'multiline':False]['text':' 'sizeof(*this)'.','line_number':239,'multiline':False]['text':' Add the runtime BSONObj size of 'keyPattern'.','line_number':241,'multiline':False]['text':' The BSON size of the 'infoObj' is purposefully excluded since its ownership is shared','line_number':243,'multiline':False]['text':' with the index catalog.','line_number':244,'multiline':False]['text':' Add size of the object.','line_number':245,'multiline':False]['text':' If non-empty, 'multikeyPaths' is a vector with size equal to the number of elements in the','line_number':253,'multiline':False]['text':' index key pattern. Each element in the vector is an ordered set of positions (starting at 0)','line_number':254,'multiline':False]['text':' into the corresponding indexed field that represent what prefixes of the indexed field cause','line_number':255,'multiline':False]['text':' the index to be multikey.','line_number':256,'multiline':False]['text':'','line_number':257,'multiline':False]['text':' An IndexEntry may either represent multikey metadata as a fixed-size MultikeyPaths vector, or','line_number':258,'multiline':False]['text':' as an arbitrarily large set of field refs, but not both. That is, either 'multikeyPaths' or','line_number':259,'multiline':False]['text':' 'multikeyPathSet' must be empty.','line_number':260,'multiline':False]['text':' A set of multikey paths. Used instead of 'multikeyPaths' when there could be arbitrarily many','line_number':263,'multiline':False]['text':' multikey paths associated with this index entry.','line_number':264,'multiline':False]['text':'','line_number':265,'multiline':False]['text':' An IndexEntry may either represent multikey metadata as a fixed-size MultikeyPaths vector, or','line_number':266,'multiline':False]['text':' as an arbitrarily large set of field refs, but not both. That is, either 'multikeyPaths' or','line_number':267,'multiline':False]['text':' 'multikeyPathSet' must be empty.','line_number':268,'multiline':False]['text':' Geo indices have extra parameters.  We need those available to plan correctly.','line_number':271,'multiline':False]['text':' Position of the replaced wildcard index field in the keyPattern, applied to Wildcard Indexes','line_number':274,'multiline':False]['text':' only.','line_number':275,'multiline':False]['text':'*
 * Represents a columnar index.
 ','line_number':279,'multiline':True]['text':' namespace mongo','line_number':314,'multiline':False]