['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'','line_number':51,'multiline':False]['text':' Equality','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' Test that when a $expr predicate is ANDed with an index-eligible predicate, an imprecise','line_number':94,'multiline':False]['text':' $_internalExpr predicate is pushed into the IXSCAN bounds, to filter out results before fetching.','line_number':95,'multiline':False]['text':' multikey ','line_number':98,'multiline':True]['text':' 'b' is multikey.','line_number':113,'multiline':False]['text':' 'c' is multikey.','line_number':131,'multiline':False]['text':' A 'fetch' is required because we're not willing to push the {b: {$gt: 0}} predicate into','line_number':172,'multiline':False]['text':' bounds without a predicate on the leading field.','line_number':173,'multiline':False]['text':' 'b' is multikey.','line_number':180,'multiline':False]['text':' 'b' is multikey.','line_number':196,'multiline':False]['text':' 'b' not used in query.','line_number':200,'multiline':False]['text':' $eq can use a hashed index because it looks for values of type regex;','line_number':227,'multiline':False]['text':' it doesn't evaluate the regex itself.','line_number':228,'multiline':False]['text':'','line_number':259,'multiline':False]['text':' <','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':'','line_number':273,'multiline':False]['text':' <=','line_number':274,'multiline':False]['text':'','line_number':275,'multiline':False]['text':'','line_number':289,'multiline':False]['text':' >','line_number':290,'multiline':False]['text':'','line_number':291,'multiline':False]['text':'','line_number':305,'multiline':False]['text':' >=','line_number':306,'multiline':False]['text':'','line_number':307,'multiline':False]['text':'','line_number':321,'multiline':False]['text':' Mod','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':'','line_number':337,'multiline':False]['text':' Exists','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' multikey','line_number':382,'multiline':False]['text':' sparse','line_number':383,'multiline':False]['text':' multikey','line_number':397,'multiline':False]['text':' sparse','line_number':398,'multiline':False]['text':' multikey','line_number':410,'multiline':False]['text':' sparse','line_number':411,'multiline':False]['text':' "a.b.c" being multikey will prevent us from using the index since $elemMatch doesn't do','line_number':424,'multiline':False]['text':' implicit array traversal.','line_number':425,'multiline':False]['text':' filterExpr','line_number':436,'multiline':False]['text':' This ends up being a double negation, which we currently don't index.','line_number':499,'multiline':False]['text':' This ends up being a double negation, which we currently don't index.','line_number':532,'multiline':False]['text':'','line_number':558,'multiline':False]['text':' skip and limit','line_number':559,'multiline':False]['text':'','line_number':560,'multiline':False]['text':' When a plan includes a fetch with no predicate, the skip should execute first, so we avoid','line_number':606,'multiline':False]['text':' fetching a document that we will always discard. When the fetch does have a predicate (as in','line_number':607,'multiline':False]['text':' this case), however, that optimization would be invalid; we need to fetch the document and','line_number':608,'multiline':False]['text':' evaluate the filter to determine if the document should count towards the number of skipped','line_number':609,'multiline':False]['text':' documents.','line_number':610,'multiline':False]['text':'','line_number':665,'multiline':False]['text':' Basic sort','line_number':666,'multiline':False]['text':'','line_number':667,'multiline':False]['text':' SERVER-14070','line_number':751,'multiline':False]['text':'','line_number':764,'multiline':False]['text':' Sort with limit and/or skip','line_number':765,'multiline':False]['text':'','line_number':766,'multiline':False]['text':' Negative limit indicates hard limit - see query_request_helper.cpp','line_number':769,'multiline':False]['text':' If only skip is provided, do not limit sort.','line_number':780,'multiline':False]['text':' Limit in sort node should be adjusted by skip count','line_number':790,'multiline':False]['text':' Push project behind sort even when there is a skip between them.','line_number':797,'multiline':False]['text':'','line_number':814,'multiline':False]['text':' Sort elimination','line_number':815,'multiline':False]['text':'','line_number':816,'multiline':False]['text':' query, sort, proj','line_number':820,'multiline':False]['text':' SERVER-13611: test that sort elimination still works if there are','line_number':844,'multiline':False]['text':' trailing fields in the index.','line_number':845,'multiline':False]['text':' Sort elimination with trailing fields where the sort direction is descending.','line_number':859,'multiline':False]['text':'','line_number':874,'multiline':False]['text':' Regex','line_number':875,'multiline':False]['text':'','line_number':876,'multiline':False]['text':' true means multikey','line_number':1019,'multiline':False]['text':' true means multikey','line_number':1031,'multiline':False]['text':'','line_number':1051,'multiline':False]['text':' Negation','line_number':1052,'multiline':False]['text':'','line_number':1053,'multiline':False]['text':' Negated regexes don't use the index.','line_number':1135,'multiline':False]['text':' Negated mods don't use the index','line_number':1144,'multiline':False]['text':' Negated $type doesn't use the index','line_number':1153,'multiline':False]['text':' Negated $elemMatch value won't use the index','line_number':1162,'multiline':False]['text':' Negated $elemMatch object won't use the index','line_number':1171,'multiline':False]['text':' Negated $elemMatch object won't use the index','line_number':1180,'multiline':False]['text':' Negated $eq: <Array> won't use the index.','line_number':1189,'multiline':False]['text':' If we negate a $in and any of the members of the $in equalities','line_number':1197,'multiline':False]['text':' is an array, we don't use the index.','line_number':1198,'multiline':False]['text':' If there is a negation that can't use the index,','line_number':1254,'multiline':False]['text':' ANDed with a predicate that can use the index, then','line_number':1255,'multiline':False]['text':' we can still use the index for the latter predicate.','line_number':1256,'multiline':False]['text':' false means not multikey, true means sparse','line_number':1269,'multiline':False]['text':' false means not multikey, true means sparse','line_number':1278,'multiline':False]['text':' true means multikey','line_number':1377,'multiline':False]['text':' In general, a negated $nin can make use of an index.','line_number':1454,'multiline':False]['text':' 'true' means multikey.','line_number':1456,'multiline':False]['text':' But it can't if the $nin contains a regex because regex bounds can't','line_number':1469,'multiline':False]['text':' be complemented.','line_number':1470,'multiline':False]['text':' 'true' means multikey.','line_number':1472,'multiline':False]['text':' Or if it contains a null, because null is "equal" to undefined, and undefined can represent an','line_number':1480,'multiline':False]['text':' empty array. Therefore negating the bounds [undefined, null], would lead to the query missing','line_number':1481,'multiline':False]['text':' values for empty array.','line_number':1482,'multiline':False]['text':' 'true' means multikey.','line_number':1484,'multiline':False]['text':' namespace','line_number':1571,'multiline':False]['text':' namespace mongo','line_number':1572,'multiline':False]