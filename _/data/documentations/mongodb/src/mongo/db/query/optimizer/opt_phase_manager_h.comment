['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' ConstEval performs the following rewrites: constant folding, inlining, and dead code        \
     * elimination.                                                                                \
     * PathFusion implements path laws, for example shortcutting field assignment and reads, and   \
     * other path optimizations.                                                                   \
     * We switch between applying ConstEval and PathFusion for as long as they change the query,   \
     * as they can enable new rewrites in each other. These are both done in-place rather than     \
     * creating plan alternatives                                                                  \
     ','line_number':63,'multiline':True]['text':' Memo phases below perform Cascades-style optimization. Reorder and transform nodes. Convert \
     * Filter and Eval nodes to SargableNodes, and possibly merge them.','line_number':74,'multiline':True]['text':' Performs Local-global and rewrites to enable index intersection. If there is an             \
     * implementation phase, it runs integrated with the top-down optimization. If there is no     \
     * implementation phase, it runs standalone.','line_number':77,'multiline':True]['text':' Implementation and enforcement rules. ','line_number':81,'multiline':True]['text':' Lowers paths to expressions. Not to be confused with SBENodeLowering, which lowers ABT      \
     * nodes and expressions to an SBE plan. ','line_number':84,'multiline':True]['text':' Final round of constant folding, identical to the first ConstEval stage. ','line_number':87,'multiline':True]['text':' Simplified constant folding for sampling estimator. ','line_number':89,'multiline':True]['text':' DEBUGGING ONLY: Normalize projection names to ensure assertable plan. ','line_number':92,'multiline':True]['text':'*
 * This class drives the optimization process, wrapping together different optimization phases.
 * First the transport rewrites are applied such as constant folding and redundant expression
 * elimination. Second the logical and physical reordering rewrites are applied using the memo.
 * Third the final transport rewrites are applied.
 * Phases may be skipped by specifying a subset of the phases to run in the phaseSet argument.
 ','line_number':98,'multiline':True]['text':'*
     * Helper struct to configure which phases & rewrites the optimizer should run.
     ','line_number':109,'multiline':True]['text':' Factories for common configurations.','line_number':117,'multiline':False]['text':' We only allow moving.','line_number':136,'multiline':False]['text':'other','line_number':137,'multiline':True]['text':'other','line_number':138,'multiline':True]['text':'other','line_number':139,'multiline':True]['text':'other','line_number':140,'multiline':True]['text':'*
     * Note: this method is primarily used for testing.
     * Optimization modifies the input argument to return the best plan. If there is an optimization
     * failure (including no plans or more than one plan found), program will tassert.
     ','line_number':142,'multiline':True]['text':'*
     * Note: this method is primarily used for testing.
     * Same as above, but we also return the associated NodeToGroupPropsMap for the best plan.
     ','line_number':149,'multiline':True]['text':'*
     * Similar to optimize, but returns a vector of optimized plans. The vector can be empty if we
     * failed to find a plan, or contain more than one entry if we also requested the rejected plans
     * for the implementation phase.
     ','line_number':155,'multiline':True]['text':'*
     * Run two structural phases until mutual fixpoint.
     * We assume we can construct from the types by initializing with env.
     ','line_number':186,'multiline':True]['text':'*
     * Stores the set of phases and logical rewrites that the optimizer will run.
     ','line_number':213,'multiline':True]['text':'*
     * Final state of the memo after physical rewrites are complete.
     ','line_number':224,'multiline':True]['text':'*
     * Logical properties derivation implementation.
     ','line_number':229,'multiline':True]['text':'*
     * Cardinality estimation implementation to be used during the exploraton phase..
     ','line_number':234,'multiline':True]['text':'*
     * Cardinality estimation implementation to be used during the substitution phase.
     *
     * The substitution phase typically doesn't care about CE, because it doesn't generate/compare
     * alternatives. Since some CE implementations are expensive (sampling), we let the caller pass
     * a different one for this phase.
     ','line_number':239,'multiline':True]['text':'*
     * Cost derivation implementation.
     ','line_number':248,'multiline':True]['text':'*
     * Path ABT node to index bounds converter implementation.
     ','line_number':253,'multiline':True]['text':'*
     * Constant fold an expression.
     ','line_number':258,'multiline':True]['text':'*
     * Root physical node if we have performed physical rewrites.
     ','line_number':263,'multiline':True]['text':'*
     * Best post-memo exploration phase plan (set if '_supportExplain' is set and if we have
     * performed memo rewrites).
     ','line_number':268,'multiline':True]['text':'*
     * Used to optimize update and delete statements. If set will include indexing requirement with
     * seed physical properties.
     ','line_number':274,'multiline':True]['text':'*
     * RID projection names we have generated for each scanDef. Used for physical rewriting.
     ','line_number':280,'multiline':True]['text':' We don't own this.','line_number':285,'multiline':False]['text':' Map from parameter ID to constant for the query we are optimizing. This is used by the CE','line_number':288,'multiline':False]['text':' module to estimate selectivities of query parameters.','line_number':289,'multiline':False]['text':' namespace mongo::optimizer','line_number':293,'multiline':False]