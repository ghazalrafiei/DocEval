['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Smaller containers sort first. For equal sets we perform lexicographical comparison.
 * Custom comparator is supplied.
 ','line_number':50,'multiline':True]['text':'*
 * Used to compare strings and strong string aliases.
 ','line_number':74,'multiline':True]['text':'*
 * Helper class used to compare ABTs.
 ','line_number':82,'multiline':True]['text':' If the types are the same, route to method which compares them.','line_number':90,'multiline':False]['text':' When types are different, sort based on tags.','line_number':94,'multiline':False]['text':' Sort constant intervals first.','line_number':332,'multiline':False]['text':' By lower bound expression.','line_number':339,'multiline':False]['text':' By high bound expression.','line_number':345,'multiline':False]['text':' Sort first by inclusive lower bounds.','line_number':351,'multiline':False]['text':' Then by inclusive high bounds.','line_number':358,'multiline':False]['text':' If the types are the same, route to method which compares them.','line_number':374,'multiline':False]['text':' When types are different, sort based on tags.','line_number':378,'multiline':False]['text':' If the types are the same, route to method which compares them.','line_number':413,'multiline':False]['text':' When types are different, sort based on tags.','line_number':417,'multiline':False]['text':'*
 * Returns true if the given ABT is NaN, otherwise returns false.
 ','line_number':447,'multiline':True]['text':' Only perform NaN check if the ABT is a Constant.','line_number':451,'multiline':False]['text':' Returns true if the given ABT represent a query parameter, otherwise returns false.','line_number':460,'multiline':False]['text':' Given an ABT representing a query parameter, return the type tag of the parameter.','line_number':469,'multiline':False]['text':' See defintion of 'kParameterFunctionName' for details about representation of query','line_number':471,'multiline':False]['text':' parameters in ABT.','line_number':472,'multiline':False]['text':'*
 * Compare a numeric, non-NaN FunctionCall[getParam] node to NaN. NaN will always be smaller.
 ','line_number':477,'multiline':True]['text':' Compare two type tags for the purposes of constant evaluation of FunctionCall[getParam]','line_number':496,'multiline':False]['text':' expressions which are guarenteed to evaluate to the specified SBE type.','line_number':497,'multiline':False]['text':' This function returns kIncomparable if the given type tags are of the same canonical BSON type.','line_number':498,'multiline':False]['text':' This is becuase we cannot determine anything about two expressions that are of the same type.','line_number':499,'multiline':False]['text':' If the two tags are of different canonical BSON types, this function will compare them according','line_number':500,'multiline':False]['text':' to the specified operation. For example, in the BSON order, integers are always less than','line_number':501,'multiline':False]['text':' strings.','line_number':502,'multiline':False]['text':' For comparisons between the Constant NaN and a FunctionCall[getParam] node of a different','line_number':503,'multiline':False]['text':' canonical type, cmpTags will handle constant folding because NaN falls under the numeric type','line_number':504,'multiline':False]['text':' bucket.','line_number':505,'multiline':False]['text':' If the lhs and rhs have the same type, return incomparable since we have no information about','line_number':510,'multiline':False]['text':' their values.','line_number':511,'multiline':False]['text':' By this point, there is no difference betwen Lt/Lte and Gt/Gte since we know the types','line_number':515,'multiline':False]['text':' are different.','line_number':516,'multiline':False]['text':' namespace','line_number':531,'multiline':False]['text':' If the subtrees are equal, we can conclude that their result is equal because we','line_number':535,'multiline':False]['text':' have only pure functions.','line_number':536,'multiline':False]['text':' We have two constants which are not equal.','line_number':539,'multiline':False]['text':' We are comparing FunctionCall[getParam] with a NaN Constant - they will never be equal.','line_number':542,'multiline':False]['text':' namespace mongo::optimizer','line_number':647,'multiline':False]