['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Default format values for date-times, e.g. for $dateToString aggregations.
 ','line_number':62,'multiline':True]['text':'*
 * A set of standard measures of time used to express a length of time interval.
 ','line_number':68,'multiline':True]['text':' A quarter of a year.','line_number':73,'multiline':False]['text':'*
 * Day of a week.
 ','line_number':83,'multiline':True]['text':'*
 * A TimeZone object represents one way of formatting/reading dates to compute things like the day
 * of the week or the hour of a given date. Different TimeZone objects may report different answers
 * for the hour, minute, or second of a date, even when given the same date.
 ','line_number':98,'multiline':True]['text':'*
     * A struct with member variables describing the different parts of the date.
     ','line_number':106,'multiline':True]['text':'*
     * A struct with member variables describing the different parts of the ISO8601 date.
     ','line_number':121,'multiline':True]['text':'*
     * A custom-deleter which destructs a timelib_time* when it goes out of scope.
     ','line_number':136,'multiline':True]['text':'*
     * Returns a Date_t populated with the argument values for the current timezone.
     ','line_number':148,'multiline':True]['text':'*
     * Returns a Date_t populated with the argument values for the current timezone.
     ','line_number':159,'multiline':True]['text':'*
     * Returns a struct with members for each piece of the date.
     ','line_number':169,'multiline':True]['text':'*
     * Returns a struct with members for each piece of the ISO8601 date.
     ','line_number':174,'multiline':True]['text':'*
     * Returns the year according to the ISO 8601 standard. For example, Dec 31, 2014 is considered
     * part of 2014 by the ISO standard.
     ','line_number':179,'multiline':True]['text':'*
     * Returns whether this is the zone representing UTC.
     ','line_number':185,'multiline':True]['text':'*
     * Returns whether this is a zone representing a UTC offset, like "+04:00".
     ','line_number':192,'multiline':True]['text':'*
     * Returns whether this is a zone representing an Olson time zone, like "Europe/London".
     ','line_number':199,'multiline':True]['text':'*
     * Returns the weekday number, ranging from 1 (for Sunday) to 7 (for Saturday).
     ','line_number':206,'multiline':True]['text':'*
     * Returns the weekday number in ISO 8601 format, ranging from 1 (for Monday) to 7 (for Sunday).
     ','line_number':211,'multiline':True]['text':'*
     * Returns the day of the year, ranging from 1 to 366.
     ','line_number':216,'multiline':True]['text':'*
     * Returns the day of the month, ranging from 1 to 31.
     ','line_number':221,'multiline':True]['text':'*
     * Returns the week number for a date as a number between 0 (the partial week that precedes the
     * first Sunday of the year) and 53.
     ','line_number':226,'multiline':True]['text':'*
     * Returns the week number in ISO 8601 format, ranging from 1 to 53. Week numbers start at 1
     * with the week (Monday through Sunday) that contains the year’s first Thursday.
     ','line_number':232,'multiline':True]['text':'*
     * Returns the number of seconds offset from UTC.
     ','line_number':238,'multiline':True]['text':'*
     * Returns the full textual name of the month.
     ','line_number':243,'multiline':True]['text':'*
     * Returns the full textual name of the month.
     ','line_number':248,'multiline':True]['text':'*
     * Adjusts 'timelibTime' according to this time zone definition.
     ','line_number':253,'multiline':True]['text':'*
     * Converts a date object to a string according to 'format'. 'format' can be any string literal,
     * containing 0 or more format specifiers like %Y (year) or %d (day of month). Callers must pass
     * a valid format string for 'format', i.e. one that has already been passed to
     * validateFormat(). May return a Status indicating that the date value is an unprintable range.
     ','line_number':258,'multiline':True]['text':'*
     * Like formatDate, except outputs to an output stream like a std::ostream or a StringBuilder.
     ','line_number':266,'multiline':True]['text':' next character is format modifier','line_number':278,'multiline':False]['text':' checked in validateFormat','line_number':279,'multiline':False]['text':' Escaped literal %','line_number':282,'multiline':False]['text':' Year','line_number':285,'multiline':False]['text':' Month','line_number':291,'multiline':False]['text':' Day of month','line_number':295,'multiline':False]['text':' Hour','line_number':299,'multiline':False]['text':' Minute','line_number':303,'multiline':False]['text':' Second','line_number':307,'multiline':False]['text':' Millisecond','line_number':311,'multiline':False]['text':' Full name of month','line_number':316,'multiline':False]['text':' Three letter name of month','line_number':321,'multiline':False]['text':' Day of year','line_number':326,'multiline':False]['text':' Day of week','line_number':330,'multiline':False]['text':' Week','line_number':334,'multiline':False]['text':' Iso year of week','line_number':338,'multiline':False]['text':' Iso week','line_number':342,'multiline':False]['text':' Iso day of week','line_number':346,'multiline':False]['text':' UTC offset as ±hhmm.','line_number':351,'multiline':False]['text':' sign','line_number':354,'multiline':False]['text':' hh','line_number':356,'multiline':False]['text':' mm','line_number':360,'multiline':False]['text':' UTC offset in minutes.','line_number':364,'multiline':False]['text':' Should never happen as format is pre-validated','line_number':368,'multiline':False]['text':'*
     * Verifies that any '%' is followed by a valid format character, and that 'format' string
     * ends with an even number of '%' symbols.
     ','line_number':375,'multiline':True]['text':'* Returns the human readable string represenation of this time zone. ','line_number':393,'multiline':True]['text':'*
     * Only works with 1 <= spaces <= 4 and 0 <= number <= 9999. If spaces is less than the digit
     * count of number we simply insert the number without padding.
     ','line_number':397,'multiline':True]['text':' null if this TimeZone represents the default UTC time zone, or a UTC-offset time zone','line_number':438,'multiline':False]['text':' represents the UTC offset in seconds if _tzInfo is null and it is not 0','line_number':441,'multiline':False]['text':'*
 * A C++ interface wrapping the third-party timelib library. A single instance of this class can be
 * accessed via the global service context.
 ','line_number':445,'multiline':True]['text':'*
     * A custom-deleter which deletes 'timeZoneDatabase' if it is not the builtin time zone
     * database, which has static lifetime and should not be freed.
     ','line_number':454,'multiline':True]['text':'*
     * A custom-deleter which destructs a timelib_error_container* when it goes out of scope.
     ','line_number':463,'multiline':True]['text':'*
     * Returns the TimeZoneDatabase object associated with the specified service context or nullptr
     * if none exists.
     ','line_number':471,'multiline':True]['text':'*
     * Sets the TimeZoneDatabase object associated with the specified service context.
     ','line_number':477,'multiline':True]['text':'*
     * Constructs a Date_t from a string description of a date, with an optional format specifier
     * string.
     *
     * 'dateString' may contain time zone information if the information is simply an offset from
     * UTC, in which case the returned Date_t will be adjusted accordingly.
     *
     * The supported format specifiers for the 'format' string are listed in
     * kDateFromStringFormatMap.
     *
     * Throws a AssertionException if any of the following occur:
     *  * The string cannot be parsed into a date.
     *  * The string specifies a time zone that is not simply an offset from UTC, like
     *    in the string "July 4, 2017 America/New_York".
     *  * 'tz' is provided, but 'dateString' specifies a timezone, like 'Z' in the
     *    string '2017-07-04T00:00:00Z'.
     *  * 'tz' is provided, but 'dateString' specifies an offset from UTC, like '-0400'
     *    in the string '2017-07-04 -0400'.
     *  * The string does not match the 'format' specifier.
     ','line_number':483,'multiline':True]['text':'*
     * Returns a TimeZone object representing the UTC time zone.
     ','line_number':507,'multiline':True]['text':'*
     * Returns a boolean based on if 'timeZoneId' represents a valid timezone.
     ','line_number':512,'multiline':True]['text':'*
     * Returns a TimeZone object representing the zone given by 'timeZoneId', or throws an exception
     * if it is not a recognized time zone.
     ','line_number':517,'multiline':True]['text':'*
     * Creates a TimeZoneDatabase object with time zone data loaded from timelib's built-in timezone
     * rules.
     ','line_number':523,'multiline':True]['text':'*
     * Creates a TimeZoneDatabase object using time zone rules given by 'timeZoneDatabase'.
     ','line_number':529,'multiline':True]['text':'*
     * Populates '_timeZones' with parsed time zone rules for each timezone specified by
     * 'timeZoneDatabase'.
     ','line_number':541,'multiline':True]['text':'*
     * Tries to find a UTC offset in 'offsetSpec' in an ISO8601 format (±HH, ±HHMM, or ±HH:MM) and
     * returns it as an offset to UTC in seconds.
     ','line_number':547,'multiline':True]['text':' A map from the time zone name to the struct describing the timezone. These are pre-populated','line_number':553,'multiline':False]['text':' at startup to avoid reading the source files repeatedly.','line_number':554,'multiline':False]['text':' The timelib structure which provides timezone information.','line_number':557,'multiline':False]['text':' The list of pre-load _timelib_tzinfo objects.','line_number':560,'multiline':False]['text':'*
 * Parses a string representation of an enumerator of TimeUnit type 'unitName' into a value of type
 * TimeUnit. Throws an exception with error code ErrorCodes::FailedToParse when passed an invalid
 * name.
 ','line_number':564,'multiline':True]['text':'*
 * Returns true if 'unitName' is a valid time unit, meaning that it can be parsed by the
 * 'parseTimeUnit()' function into one of the units represented by the 'TimeUnit' enum. Otherwise
 * returns 'false'.
 ','line_number':571,'multiline':True]['text':'*
 * Inverse of parseTimeUnit.
 ','line_number':578,'multiline':True]['text':'*
 * Parses a string 'dayOfWeek' to a DayOfWeek value. Supported day of week representations are
 * case-insensitive full words or three letter abbreviations - for example, sunday, Sun. Throws an
 * exception with error code ErrorCodes::FailedToParse when passed an invalid value.
 ','line_number':583,'multiline':True]['text':'*
 * Returns true if 'dayOfWeek' is a valid representation of a day of a week, meaning that it can be
 * parsed by the 'parseDayOfWeek()' function into one of the days represented by the 'DayOfWeek'
 * enum. Otherwise returns 'false'.
 ','line_number':590,'multiline':True]['text':'*
 * A custom-deleter which destructs a timelib_rel_time* when it goes out of scope.
 ','line_number':597,'multiline':True]['text':'*
 * Creates and sets a timelib_rel_time structure representing a time interval
 * of 'amount' number of time 'units'.
 ','line_number':605,'multiline':True]['text':'*
 * Determines the number of upper boundaries of time intervals crossed when moving from time instant
 * 'startDate' to time instant 'endDate' in time zone 'timezone'. The time intervals are of length
 * equal to one 'unit' and aligned so that the lower/upper bound is located in time axis at instant
 * n*'unit', where n is an integer.
 *
 * If 'endDate' < 'startDate', then the returned number of crossed boundaries is negative.
 *
 * For 'unit' values 'hour' and smaller, when there is a transition from Daylight Saving Time to
 * standard time the function behaves as if standard time intervals overlap Daylight Saving Time
 * intervals. When there is a transition from standard time to Daylight Saving Time the function
 * behaves as if the last interval in standard time is longer by one hour.
 *
 * An example: if startDate=2011-01-31T00:00:00 (in 'timezone'), endDate=2011-02-01T00:00:00 (in
 * 'timezone'), unit='month', then the function returns 1, since a month boundary at
 * 2011-02-01T00:00:00 was crossed.
 *
 * The function operates in the Gregorian calendar. The function does not account for leap seconds.
 * For time instants before year 1583 the proleptic Gregorian calendar is used.
 *
 * startDate - starting time instant in UTC time zone.
 * endDate - ending time instant in UTC time zone.
 * unit - length of time intervals.
 * timezone - determines the timezone used for counting the boundaries as well as Daylight Saving
 * Time rules.
 * startOfWeek - the first day of a week used, to determine week boundaries when 'unit' is
 * TimeUnit::week. Otherwise, this parameter is ignored.
 ','line_number':612,'multiline':True]['text':'*
 * Add time interval to a date. The interval duration is given in 'amount' number of 'units'.
 * The amount can be a negative number in which case the interval is subtracted from the date.
 * The result date is always in UTC.
 *
 * startDate - starting time instant
 * unit - length of time intervals, defined in the TimeUnit enumeration
 * amount - the amount of time units to be added
 * timezone - the timezone in which the start date is interpreted
 ','line_number':646,'multiline':True]['text':'*
 * Convert (approximately) a TimeUnit to a number of seconds. This function acts as a wrapper around
 * 'timeUnitTypicalMilliseconds'.
 ','line_number':658,'multiline':True]['text':'*
 * Convert (approximately) a TimeUnit to a number of milliseconds.
 *
 * The answer is approximate because TimeUnit represents an amount of calendar time:
 * for example, some calendar days are 23 or 25 hours long due to daylight savings time.
 * This function assumes everything is "typical": days are 24 hours, minutes are 60 seconds.
 *
 * For some callers, it is an error to call this function with units larger than 'week', since those
 * TimeUnits are too variable to accurately estimate. It is the responsibility of the caller to
 * validate the input to this function.
 ','line_number':664,'multiline':True]['text':'*
 * Returns the lower bound of a bin the 'date' falls into in the time axis, or, in other words,
 * truncates the 'date' value. Bins are (1) uniformly spaced (in time unit sense); (2) do not
 * overlap; (3) bin size is 'binSize' 'unit''s; (4) defined in a timezone specified by 'timezone';
 * (5) one bin has a lower bound at 2000-01-01T00:00:00.000 (also called a reference point) in the
 * specified timezone, except for "week" time unit when the given 'startOfWeek' does not coincide
 * with the first of January, 2000. For weeks [exception to (5)] the bin is aligned to the earliest
 * first day of the week after the first of January, 2000.
 *
 * binSize - must be larger than 0.
 * timezone - determines boundaries of the bins as well as Daylight Saving Time rules.
 * startOfWeek - the first day of a week used to determine week boundaries when 'unit' is
 * TimeUnit::week. Otherwise, this parameter is ignored.
 ','line_number':678,'multiline':True]['text':' namespace mongo','line_number':697,'multiline':False]