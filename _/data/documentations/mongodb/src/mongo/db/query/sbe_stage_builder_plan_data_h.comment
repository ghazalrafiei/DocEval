['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The ParameterizedIndexScanSlots struct is used by SlotBasedStageBuilder while building the index
 * scan stage to return the slots that are registered in the runtime environment and will be
 * populated based on the index bounds.
 ','line_number':47,'multiline':True]['text':' Holds the low and high key for the single interval index scan algorithm.','line_number':53,'multiline':False]['text':' Holds the slots for the generic index scan algorithm.','line_number':59,'multiline':False]['text':' Holds the value whether the generic or optimized index scan should be used.','line_number':61,'multiline':False]['text':' Holds the value of the IndexBounds used for the generic index scan algorithm.','line_number':64,'multiline':False]['text':' Holds the value of an array of low and high keys for each interval.','line_number':67,'multiline':False]['text':' In the case that the parameterized plan will always consist of a single interval index scan,','line_number':71,'multiline':False]['text':' this holds the SingleInterval struct. Otherwise, holds the necessary slots for a fully','line_number':72,'multiline':False]['text':' generic parameterized index scan plan.','line_number':73,'multiline':False]['text':' Holds the slots for the clustered collection scan bounds.','line_number':77,'multiline':False]['text':' Holds the min and max record for the bounds of a clustered collection scan.','line_number':79,'multiline':False]['text':'*
 * IndexBoundsEvaluationInfo struct contains Interval Evaluation Trees (IETs) and additional data
 * structures required to restore index bounds from IETs and bind them to generic index scan
 * algorithm.
 ','line_number':86,'multiline':True]['text':'*
 * This class holds the RuntimeEnvironment and CompileCtx for an SBE plan. The RuntimeEnvironment
 * owns various SlotAccessors which are accessed when the SBE plan is executed. The CompileCtx is
 * used when the SBE plan needs to be "prepared" (via the prepare() method).
 ','line_number':100,'multiline':True]['text':'*
 * This struct used to hold all of a PlanStageData's immutable data.
 ','line_number':179,'multiline':True]['text':' This holds the output slots produced by SBE plan (resultSlot, recordIdSlot, etc).','line_number':183,'multiline':False]['text':' Various flags copied from the CollectionScanNode. If the plan generated by the query planner','line_number':188,'multiline':False]['text':' did not have a CollectionScanNode, then each of these flags is initialized to its respective','line_number':189,'multiline':False]['text':' default value.','line_number':190,'multiline':False]['text':' Scan direction if this plan has a collection scan: 1 means forward; -1 means reverse.','line_number':195,'multiline':False]['text':' True iff this plan does an SBE clustered collection scan.','line_number':198,'multiline':False]['text':' Iff 'doSbeClusteredCollectionScan', this holds the cluster key field name.','line_number':201,'multiline':False]['text':' Iff 'doSbeClusteredCollectionScan', this holds the clustered collection's native collator,','line_number':204,'multiline':False]['text':' needed to compute scan bounds.','line_number':205,'multiline':False]['text':' If the query has been auto-parameterized, then the mapping from input parameter id to the','line_number':208,'multiline':False]['text':' id of a slot in the runtime environment is maintained here. This mapping is established','line_number':209,'multiline':False]['text':' during stage building and stored in the cache. When a cached plan is used for a','line_number':210,'multiline':False]['text':' subsequent query, this mapping is used to set the new constant value associated with each','line_number':211,'multiline':False]['text':' input parameter id in the runtime environment.','line_number':212,'multiline':False]['text':'','line_number':213,'multiline':False]['text':' For example, imagine an auto-parameterized query {a: <p1>, b: <p2>} is present in the SBE','line_number':214,'multiline':False]['text':' plan cache. Also present in the cache is this mapping:','line_number':215,'multiline':False]['text':'    p1 -> s3','line_number':216,'multiline':False]['text':'    p2 -> s4','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' A new query {a: 5, b: 6} runs. Using this mapping, we set a value of 5 in s3 and 6 in s4.','line_number':219,'multiline':False]['text':' This Variable-to-SlotId map stores all Variables that were translated into corresponding','line_number':222,'multiline':False]['text':' SBE Slots. The slots are registered in the 'RuntimeEnvironment'.','line_number':223,'multiline':False]['text':' Stores variables that are not global/part of the runtime environment, but are temporarily','line_number':226,'multiline':False]['text':' injected when translating a specific expression. This is useful if we're translating an MQL','line_number':227,'multiline':False]['text':' expression as part of translating some larger entity (e.g. a match expression).','line_number':228,'multiline':False]['text':' Stores auxiliary data to restore index bounds for a cached auto-parameterized SBE plan','line_number':232,'multiline':False]['text':' for every index used by the plan.','line_number':233,'multiline':False]['text':' Stores data to restore collection scan bounds for a cached auto-parameterized SBE plan for','line_number':236,'multiline':False]['text':' every clustered collection scan used by the plan.','line_number':237,'multiline':False]['text':' Stores all namespaces involved in the build side of a hash join plan. Needed to check if','line_number':240,'multiline':False]['text':' the plan should be evicted as the size of the foreign namespace changes.','line_number':241,'multiline':False]['text':' Stores CollatorInterface to be used for this plan. Raw pointer may be stored inside data','line_number':244,'multiline':False]['text':' structures, so it must be kept stable.','line_number':245,'multiline':False]['text':' Shared pointers to InListDatas used by this SBE plan.','line_number':248,'multiline':False]['text':' Shared pointers (and a map) to the additonal collators used by this SBE plan.','line_number':251,'multiline':False]['text':'*
     * For commands that return multiple cursors, this value will contain the type of cursor.
     * Default to a regular result cursor.
     ','line_number':254,'multiline':True]['text':'*
 * Some auxiliary data returned by a 'SlotBasedStageBuilder' along with a PlanStage tree root, which
 * is needed to execute the PlanStage tree.
 ','line_number':261,'multiline':True]['text':' This field holds the RuntimeEnvironment and the CompileCtx.','line_number':301,'multiline':False]['text':' This field holds all of the immutable data that needs to accompany an SBE PlanStage tree.','line_number':304,'multiline':False]['text':' If this execution tree was built as a result of replanning of the cached plan, this string','line_number':307,'multiline':False]['text':' will include the reason for replanning.','line_number':308,'multiline':False]['text':' If this candidate plan has completed the trial run early by achieving one of the trial run','line_number':311,'multiline':False]['text':' metrics, the stats are cached in here.','line_number':312,'multiline':False]['text':' Stores plan cache entry information used as debug information or for "explain" purpose. Note','line_number':315,'multiline':False]['text':' that 'debugInfo' is present only if this PlanStageData is recovered from the plan cache.','line_number':316,'multiline':False]['text':' Shared pointers to InListDatas used by this SBE plan.','line_number':319,'multiline':False]['text':' Hash set of the InListData pointers in 'inLists'.','line_number':322,'multiline':False]['text':' namespace mongo::stage_builder','line_number':326,'multiline':False]