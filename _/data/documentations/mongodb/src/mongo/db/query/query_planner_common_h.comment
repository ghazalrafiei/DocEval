['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Methods used by several parts of the planning process.
 ','line_number':51,'multiline':True]['text':'*
     * Does the tree rooted at 'root' have a node with matchType 'type'?
     *
     * If 'out' is not NULL, sets 'out' to the first node of type 'type' encountered.
     ','line_number':56,'multiline':True]['text':'*
     * Returns a count of 'type' nodes in expression tree.
     ','line_number':79,'multiline':True]['text':'*
     * Assumes the provided BSONObj is of the form {field1: -+1, ..., field2: -+1}
     * Returns a BSONObj with the values negated.
     ','line_number':93,'multiline':True]['text':'*
     * Traverses the tree rooted at 'node'. Tests scan directions recursively to see if they are
     * equal to the given direction argument. Returns true if they are and false otherwise.
     ','line_number':107,'multiline':True]['text':'*
     * Traverses the tree rooted at 'node'.  For every STAGE_IXSCAN encountered, reverse
     * the scan direction and index bounds, unless reverseCollScans equals true, in which case
     * STAGE_COLLSCAN is reversed as well.
     ','line_number':113,'multiline':True]['text':'*
     * Extracts all field names for the sortKey meta-projection and stores them in the returned
     * array. Returns an empty array if there were no sortKey meta-projection specified in the
     * given projection 'proj'. For example, given a projection {a:1, b: {$meta: "sortKey"},
     * c: {$meta: "sortKey"}}, the returned vector will contain two elements ["b", "c"].
     ','line_number':120,'multiline':True]['text':'*
     * Determine whether this query has a sort that can be provided by the collection's clustering
     * index, if so, which direction the scan should be. If the collection is not clustered, or the
     * sort cannot be provided, returns 'boost::none'.
     ','line_number':134,'multiline':True]['text':' namespace mongo','line_number':143,'multiline':False]