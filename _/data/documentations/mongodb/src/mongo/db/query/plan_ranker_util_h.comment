['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Forward declarations.','line_number':37,'multiline':False]['text':' namespace mongo::sbe::plan_ranker','line_number':41,'multiline':False]['text':'*
 * A factory function to create a plan scorer for a plan stage stats tree.
 ','line_number':44,'multiline':True]['text':'*
 * Takes a vector of pairs holding (score, planIndex).
 * Returns an iterator pointing to the first non-tying plan, or the end of the vector.
 ','line_number':49,'multiline':True]['text':'*
 * Holds information about tie breaking heuristic bonuses. It is used to update candidate plan score
 * and log the bonuses.
 ','line_number':60,'multiline':True]['text':'*
 * Apply docs examined tie breaking heuristic and return bonuses in 'scores' list. 'candidates' and
 * 'scores' are synchronized, with the i-th score from 'scores' corresponding to the i-th
 * 'candidate.'
 ','line_number':78,'multiline':True]['text':' The vector tiedPlans holds the number of documents and the plan's index.','line_number':90,'multiline':False]['text':' Sort top plans by least documents examined, and allocate a bonus to each of the top plans.','line_number':98,'multiline':False]['text':'*
 * Apply best index prefix tie breaking heuristic and return bonuses in 'scores' list. 'candidates'
 * and 'scores' are synchronized, with the i-th score from 'scores' corresponding to the i-th
 * 'candidate.'
 ','line_number':108,'multiline':True]['text':'*
 * Apply tie-breaking hearistics and update candidate plan scores.
 ','line_number':134,'multiline':True]['text':' Initialize 'scores' list. 'candidates' and 'scores' are synchronized, with the i-th score','line_number':146,'multiline':False]['text':' from 'scores' corresponding to the i-th 'candidate.'','line_number':147,'multiline':False]['text':' isPlanTied ','line_number':151,'multiline':True]['text':' score ','line_number':152,'multiline':True]['text':' Log tie breaking bonuses.','line_number':161,'multiline':False]['text':'*
 * Returns a PlanRankingDecision which has the ranking and the information about the ranking
 * process with status OK if everything worked. 'candidateOrder' within the PlanRankingDecision
 * holds indices into candidates ordered by score (winner in first element).
 *
 * Returns an error if there was an issue with plan ranking (e.g. there was no viable plan).
 ','line_number':173,'multiline':True]['text':' A plan that hits EOF is automatically scored above','line_number':184,'multiline':False]['text':' its peers. If multiple plans hit EOF during the same','line_number':185,'multiline':False]['text':' set of round-robin calls to work(), then all such plans','line_number':186,'multiline':False]['text':' receive the bonus.','line_number':187,'multiline':False]['text':' Get stat trees from each plan.','line_number':190,'multiline':False]['text':' includeDebugInfo ','line_number':196,'multiline':True]['text':' Holds (score, candidateIndex).','line_number':200,'multiline':False]['text':' Used to derive scores and candidate ordering.','line_number':201,'multiline':False]['text':' Compute score for each tree.  Record the best.','line_number':206,'multiline':False]['text':' Collect some information about documents examined for tie breaking later.','line_number':249,'multiline':False]['text':' If there isn't a viable plan we should error.','line_number':259,'multiline':False]['text':' Sort (scores, candidateIndex). Get best child and populate candidate ordering.','line_number':265,'multiline':False]['text':' Just compare score in lhs.first and rhs.first;','line_number':269,'multiline':False]['text':' Ignore candidate array index in lhs.second and rhs.second.','line_number':270,'multiline':False]['text':' Apply tie-breaking heuristics.','line_number':274,'multiline':False]['text':' Re-sort the candidates.','line_number':278,'multiline':False]['text':' For SBE, we need to store a serialized winning plan within the ranking decision to be','line_number':287,'multiline':False]['text':' able to included it into the explain output for a cached plan stats, since we cannot','line_number':288,'multiline':False]['text':' reconstruct it from a PlanStageStats tree.','line_number':289,'multiline':False]['text':' Get the winning candidate's index to get the correct winning plan.','line_number':291,'multiline':False]['text':' Update results in 'why'','line_number':306,'multiline':False]['text':' Stats and scores in 'why' are sorted in descending order by score.','line_number':307,'multiline':False]['text':' namespace mongo::plan_ranker','line_number':324,'multiline':False]