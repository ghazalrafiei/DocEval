['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':58,'multiline':False]['text':'*
 * Enum desribing mode in which projection for the field must be evaluated.
 ','line_number':62,'multiline':True]['text':' Include field in output object with no modification.','line_number':66,'multiline':False]['text':' Exclude field from output object.','line_number':68,'multiline':False]['text':' Set field value with an SbExpr.','line_number':70,'multiline':False]['text':' Invoke a lambda passing in the field, then set field to the lambda's return value.','line_number':72,'multiline':False]['text':' Call makeBsonObj() passing in the field, then set field to makeBsonObj()'s return value.','line_number':74,'multiline':False]['text':'*
 * A 'ProjectEval' contains an EvalMode ('mode') and an SbExpr ('expr'). If 'mode' is equal
 * to 'EvalMode::EvaluateField' then 'expr' will be non-null, otherwise 'expr' will be null.
 ','line_number':78,'multiline':True]['text':'*
 * Stores the necessary context needed while visiting each node in the projection tree.
 ','line_number':98,'multiline':True]['text':'*
     * Represents current projection level. Created each time visitor encounters path projection.
     ','line_number':102,'multiline':True]['text':' Vector containing operations for the current level. There are 5 types of operations','line_number':108,'multiline':False]['text':' (see EvalMode enum for details).','line_number':109,'multiline':False]['text':' Whether or not any subtree of this level has a computed field.','line_number':112,'multiline':False]['text':'*
 * This function takes a flag indicating if we're dealing with an inclusion or exclusion projection
 * ('isInclusion') and two parallel vectors: a vector of field names ('fieldNames') and a vector of
 * ProjectEvals ('evals').
 *
 * This function processes its inputs and returns a tuple containing a vector field names, a vector
 * of Actions, and a vector of SbExprs.
 *
 * The output tuple is intended for to be used with MakeObjSpec and the makeBsonObj() VM function.
 ','line_number':205,'multiline':True]['text':' Ensure that there is eval for each of the field names.','line_number':219,'multiline':False]['text':'*
 * If a subtree of the projection contains 1 or more value args (i.e. computed fields), then
 * the projection should always be applied even if the values aren't objects. Example:
 *   projection: {a: {b: "x"}}
 *   document: {a: [1,2,3]}
 *   result: {a: [{b: "x"}, {b: "x"}, {b: "x"}]}
 *
 * If this subtree doesn't contain any value args and we're performing an inclusion projection,
 * then anything that's not an object should get filtered out. Example:
 *   projection: {a: {b: 1}}
 *   document: {a: [1, {b: 2}, 3]}
 *   result: {a: [{b: 2}]}
 *
 * If this subtree doesn't contain any value args and we're performing an exclusion projection,
 * then anything that's not an object should be preserved as-is.
 ','line_number':289,'multiline':True]['text':' We've finished extracting what we need from the child level, so pop if off the stack.','line_number':332,'multiline':False]['text':' If the child's 'hasValueArgs' flag was set, then propagate it to the parent level.','line_number':335,'multiline':False]['text':' If 'isInclusion' is false and 'fields' is empty for the current sub-tree, check if we','line_number':338,'multiline':False]['text':' can simply return the input.','line_number':339,'multiline':False]['text':' If this isn't the last level, then we can just push a Keep and return.','line_number':342,'multiline':False]['text':' If this is the last level, check if we have an input ('inputExpr') and check','line_number':346,'multiline':False]['text':' if 'ctx.inputPlan' contains any assigns or drops.','line_number':347,'multiline':False]['text':' If we have an input and 'ctx.inputPlan' does not contain any assigns or','line_number':353,'multiline':False]['text':' drops, then we can return without calling setResult(). The done() method','line_number':354,'multiline':False]['text':' will take care of returning the input.','line_number':355,'multiline':False]['text':' Generate a MakeObjSpec for the current nested level.','line_number':364,'multiline':False]['text':' For the last level, create a 'makeBsonObj(..)' expression to generate the output object.','line_number':378,'multiline':False]['text':' If this field is a top-level drop, then we pass Nothing for the input field.','line_number':406,'multiline':False]['text':' (possibly dotted) paths to project to','line_number':420,'multiline':False]['text':' SlotIds w/ values for 'paths'','line_number':421,'multiline':False]['text':' SlotId of result doc to project into','line_number':422,'multiline':False]['text':' We should not encounter 'Slice' here. If the original projection contained','line_number':449,'multiline':False]['text':' one or more $slice ops, the caller should have detected this and replaced','line_number':450,'multiline':False]['text':' each 'Slice' node with a 'Keep' node before calling this function.','line_number':451,'multiline':False]['text':' When a projection contains $slice ops, this function is called after evaluateProjection()','line_number':471,'multiline':False]['text':' to deal with evaluating the $slice ops.','line_number':472,'multiline':False]['text':' We want to keep the entire input document as-is except for applying the $slice ops, so','line_number':482,'multiline':False]['text':' we use the 'kExclusion' projection type.','line_number':483,'multiline':False]['text':' inputPlan ','line_number':487,'multiline':True]['text':' slots ','line_number':488,'multiline':True]['text':' 'nodes' should only contain $slice operators.','line_number':498,'multiline':False]['text':' When handling $slice, we only go 1 level in depth (unlike other projection operators','line_number':517,'multiline':False]['text':' which have unlimited depth for the traversal).','line_number':518,'multiline':False]['text':' namespace','line_number':528,'multiline':False]['text':' Do a DFS on the projection AST and populate 'paths' and 'nodes'.','line_number':536,'multiline':False]['text':' Check for 'Slice' operators. If 'nodes' doesn't have any $slice operators, we just','line_number':551,'multiline':False]['text':' return the expression generated by evaluateProjection(). If 'tree' contains one or','line_number':552,'multiline':False]['text':' more $slice operators, then after evaluateProjection() returns we need to apply a','line_number':553,'multiline':False]['text':' "post-projection transform" to evaluate the $slice ops. (This mirrors the classic','line_number':554,'multiline':False]['text':' engine's implementation of $slice, see the 'ExpressionInternalFindSlice' class for','line_number':555,'multiline':False]['text':' details.)','line_number':556,'multiline':False]['text':' If 'node' is not a Slice, move it to the 'newNodes' vector.','line_number':568,'multiline':False]['text':' If 'node' is a Slice, move it to the 'sliceNodes' vector. If this is an','line_number':572,'multiline':False]['text':' inclusion projection, then we also need to add a 'Keep' node to 'newNodes' so','line_number':573,'multiline':False]['text':' that the first pass doesn't drop 'path'.','line_number':574,'multiline':False]['text':' If this is an inclusion projection or if 'nodes' is not empty, call evaluateProjection().','line_number':590,'multiline':False]['text':' If 'sliceNodes' is not empty, then we need to call evaluateSliceOps() to evaluate the','line_number':596,'multiline':False]['text':' $slice ops.','line_number':597,'multiline':False]['text':' Do a DFS on the projection AST and populate 'paths' and 'nodes'.','line_number':613,'multiline':False]['text':' Check for 'Slice' operators. If 'nodes' doesn't have any $slice operators, we just','line_number':634,'multiline':False]['text':' return the expression generated by evaluateProjection(). If 'tree' contains one or','line_number':635,'multiline':False]['text':' more $slice operators, then after evaluateProjection() returns we need to apply a','line_number':636,'multiline':False]['text':' "post-projection transform" to evaluate the $slice ops. (This mirrors the classic','line_number':637,'multiline':False]['text':' engine's implementation of $slice, see the 'ExpressionInternalFindSlice' class for','line_number':638,'multiline':False]['text':' details.)','line_number':639,'multiline':False]['text':' If 'node' is not a Slice, move it to the 'newNodes' vector.','line_number':651,'multiline':False]['text':' If 'node' is a Slice, move it to the 'sliceNodes' vector. If this is an','line_number':655,'multiline':False]['text':' inclusion projection, then we also need to add a 'Keep' node to 'newNodes' so','line_number':656,'multiline':False]['text':' that the first pass doesn't drop 'path'.','line_number':657,'multiline':False]['text':' If 'sliceNodes' is not empty, then we need to call evaluateSliceOps() to evaluate the','line_number':679,'multiline':False]['text':' $slice ops.','line_number':680,'multiline':False]['text':' namespace mongo::stage_builder','line_number':688,'multiline':False]