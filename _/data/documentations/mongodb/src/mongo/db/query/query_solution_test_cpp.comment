['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Output stream operator for FieldAvailability values is required by ASSERT_ macros in tests.
 ','line_number':64,'multiline':True]['text':'*
 * Output stream operator for ProvidedSortSet instances is required by ASSERT_ macros in tests.
 ','line_number':81,'multiline':True]['text':'*
 * Equality operator for ProvidedSortSet instances is required by ASSERT_EQ macros in tests.
 * This operator uses 'BSONObj::woCompare()' method for comparing base sort patterns.
 ','line_number':88,'multiline':True]['text':'*
 * Non-equality operator for ProvidedSortSet instances is required by ASSERT_NE macros in tests.
 * This operator uses 'BSONObj::woCompare()' method for comparing base sort patterns.
 ','line_number':97,'multiline':True]['text':' namespace mongo','line_number':105,'multiline':False]['text':'*
 * Make a minimal IndexEntry from just a key pattern. A dummy name will be added.
 ','line_number':110,'multiline':True]['text':'*
 * Make a minimal IndexEntry from just a key pattern and a collation. A dummy name will be added.
 ','line_number':129,'multiline':True]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':158,'multiline':False]['text':' Min: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':159,'multiline':False]['text':' Max: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':160,'multiline':False]['text':' Expected sort orders','line_number':169,'multiline':False]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':183,'multiline':False]['text':' Min: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':184,'multiline':False]['text':' Max: {a: 2, b: 2, c: 2, d: 2, e: 2}','line_number':185,'multiline':False]['text':' Expected sort orders','line_number':194,'multiline':False]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':206,'multiline':False]['text':' Min: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':207,'multiline':False]['text':' Max: {a: 1, b: 1, c: 2, d: 2, e: 2}','line_number':208,'multiline':False]['text':' Expected sort orders','line_number':217,'multiline':False]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':233,'multiline':False]['text':' Intervals: a: [1,1], b: [1,1], c: [1,1], d: [1,1], e: [1,1]','line_number':234,'multiline':False]['text':' Expected internal state of 'ProvidedSortSet'.','line_number':266,'multiline':False]['text':' Expected sort orders.','line_number':269,'multiline':False]['text':' Verify that the order of equality fields is irrelvant.','line_number':282,'multiline':False]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':291,'multiline':False]['text':' Intervals: a: [1,2], b: [1,2], c: [1,2], d: [1,2], e: [1,2]','line_number':292,'multiline':False]['text':' Expected sort orders','line_number':329,'multiline':False]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':341,'multiline':False]['text':' Intervals: a: [1,1], b: [1,1], c: [1,2], d: [1,2], e: [1,2]','line_number':342,'multiline':False]['text':' Expected sort orders','line_number':377,'multiline':False]['text':' Index: {a: 1}','line_number':637,'multiline':False]['text':' Bounds: [MINKEY, MAXKEY]','line_number':638,'multiline':False]['text':' Index: {a: 1, b: 1, c: 1, d: 1, e: 1}','line_number':675,'multiline':False]['text':' Intervals: a: [1,1], b: ['p','p'], c: [1,2], d: [MinKey, MaxKey], e: [1,2]','line_number':676,'multiline':False]['text':' Expected sort orders','line_number':717,'multiline':False]['text':' Index: {a : 1}','line_number':727,'multiline':False]['text':' Bounds: [{}, {}]','line_number':728,'multiline':False]['text':' Index: {a : 1}','line_number':746,'multiline':False]['text':' Bounds: [[], []]','line_number':747,'multiline':False]['text':' Expected sort orders','line_number':787,'multiline':False]['text':' Add metadata indicating that "b" is multikey.','line_number':986,'multiline':False]['text':' Add metadata indicating that "b.c" is multikey.','line_number':1000,'multiline':False]['text':' Index: {a: 1, b: 1, 'c.z': 1, d: 1, e: 1}','line_number':1034,'multiline':False]['text':' Intervals: a: [1,1], b: [1,1], 'c.z': [1,1], d: [1, 1], e: [1,2]','line_number':1035,'multiline':False]['text':' Multikeys: ['b', 'c.z']','line_number':1036,'multiline':False]['text':' Add metadata indicating that 'b', 'c.z' is multikey.','line_number':1044,'multiline':False]['text':' Cannot provide sorts that include a multikey field.','line_number':1057,'multiline':False]['text':' Add metadata indicating that "c.z" is multikey.','line_number':1092,'multiline':False]['text':' Construct a QuerySolution consisting of a root node with two children.','line_number':1137,'multiline':False]['text':' Before being added to the QuerySolution, all the nodes should have a nodeId of zero, which','line_number':1144,'multiline':False]['text':' means that an id has not yet been assigned.','line_number':1145,'multiline':False]['text':' Since ids are assigned according to a post-order traversal, the root node should have id 3,','line_number':1154,'multiline':False]['text':' the left child should have id 1, and the right child should have id 2.','line_number':1155,'multiline':False]['text':' Simple EqLookupNode with IndexScan subtree.','line_number':1189,'multiline':False]['text':' idxEntry ','line_number':1202,'multiline':True]['text':' shouldProduceBson ','line_number':1203,'multiline':True]['text':' Expected empty sort order, as the EqLookupNode order inferrence is not supported yet.','line_number':1211,'multiline':False]['text':' A EqLookupNode with IndexScan subtree, where local field "b" is overwritten.','line_number':1220,'multiline':False]['text':' This affects the field availability and sort order.','line_number':1221,'multiline':False]['text':' idxEntry ','line_number':1237,'multiline':True]['text':' shouldProduceBson ','line_number':1238,'multiline':True]['text':' Expected empty sort order, as the EqLookupNode order inferrence is not supported yet.','line_number':1243,'multiline':False]['text':' idxEntry ','line_number':1316,'multiline':True]['text':' shouldProduceBson ','line_number':1317,'multiline':True]['text':' The output vector should only contain 'foreignColl'.','line_number':1323,'multiline':False]['text':' idxEntry ','line_number':1340,'multiline':True]['text':' shouldProduceBson ','line_number':1341,'multiline':True]['text':' idxEntry ','line_number':1360,'multiline':True]['text':' shouldProduceBson ','line_number':1361,'multiline':True]['text':' There should be no secondary namespaces as 'mainNss' is ignored in','line_number':1367,'multiline':False]['text':' 'getAllSecondaryNamespaces'.','line_number':1368,'multiline':False]['text':' idxEntry ','line_number':1385,'multiline':True]['text':' shouldProduceBson ','line_number':1386,'multiline':True]['text':' idxEntry ','line_number':1395,'multiline':True]['text':' shouldProduceBson ','line_number':1396,'multiline':True]['text':' The foreign collections are unique, so our output vector should contain both of them. Note','line_number':1401,'multiline':False]['text':' that because 'getAllSecondaryNamespaces' uses a set internally, these namespaces are','line_number':1402,'multiline':False]['text':' expected to be in sorted order in the output vector.','line_number':1403,'multiline':False]['text':' idxEntry ','line_number':1419,'multiline':True]['text':' shouldProduceBson ','line_number':1420,'multiline':True]['text':' idxEntry ','line_number':1429,'multiline':True]['text':' shouldProduceBson ','line_number':1430,'multiline':True]['text':' Both nodes reference the same foreign collection. Therefore, our output vector should contain','line_number':1435,'multiline':False]['text':' a single copy of that namespace.','line_number':1436,'multiline':False]['text':' We use its 'limit' value to assert the first one was retrieved below hence cannot be equals','line_number':1480,'multiline':False]['text':' 8 is the value we assign to the first limit node','line_number':1490,'multiline':False]['text':' namespace','line_number':1493,'multiline':False]