['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':45,'multiline':False]['text':' Converts a date to a number of seconds, being careful to round appropriately for negative numbers','line_number':72,'multiline':False]['text':' of seconds.','line_number':73,'multiline':False]['text':' We want the division below to truncate toward -inf rather than 0','line_number':75,'multiline':False]['text':' eg Dec 31, 1969 23:59:58.001 should be -2 seconds rather than -1','line_number':76,'multiline':False]['text':' This is needed to get the correct values from coerceToTM','line_number':77,'multiline':False]['text':' This is implementaiton defined.','line_number':78,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' Format specifier map when parsing a date from a string with a required format.','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' Format specifier map when converting a date to a string.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' Verifies that any '%' is followed by a valid format character as indicated by 'allowedFormats',','line_number':128,'multiline':False]['text':' and that the 'format' string ends with an even number of '%' symbols.','line_number':129,'multiline':False]['text':' next character must be format modifier','line_number':138,'multiline':False]['text':' namespace','line_number':169,'multiline':False]['text':' Without a format, timelib will attempt to parse a string as best as it can, accepting a','line_number':259,'multiline':False]['text':' variety of formats.','line_number':260,'multiline':False]['text':' Format specifiers must be prefixed by '%'.','line_number':269,'multiline':False]['text':' If the parsed string has a warning or error, throw an error.','line_number':283,'multiline':False]['text':' We need to override the error message for unknown time zone identifiers, as we never','line_number':293,'multiline':False]['text':' make them available. We also change the error code to signal this is a different','line_number':294,'multiline':False]['text':' error than a normal parse error.','line_number':295,'multiline':False]['text':' If the time portion is fully missing, initialize to 0. This allows for the '%Y-%m-%d' format','line_number':313,'multiline':False]['text':' to be passed too.','line_number':314,'multiline':False]['text':' Do nothing, as this indicates there is no associated time zone information.','line_number':332,'multiline':False]['text':' should technically not be possible to reach','line_number':346,'multiline':False]['text':' Needs to start with either '+' or '-'.','line_number':362,'multiline':False]['text':' ±HH','line_number':366,'multiline':False]['text':' ±HHMM','line_number':376,'multiline':False]['text':' ±HH:MM','line_number':388,'multiline':False]['text':' Check for a possible UTC offset','line_number':416,'multiline':False]['text':' Add 1000 since dates before 1970 would have negative milliseconds.','line_number':504,'multiline':False]['text':' Add 1000 since dates before 1970 would have negative milliseconds.','line_number':525,'multiline':False]['text':' timelib_day_of_week() returns a number in the range [0,6], we want [1,7], so add one.','line_number':564,'multiline':False]['text':' may be negative','line_number':571,'multiline':False]['text':' must be positive','line_number':572,'multiline':False]['text':' Return the zero based index of the week of the next sunday, equal to the one based index','line_number':574,'multiline':False]['text':' of the week of the previous sunday, which is to be returned.','line_number':575,'multiline':False]['text':' timelib_day_of_year() returns a number in the range [0,365], we want [1,366], so add one.','line_number':583,'multiline':False]['text':' A mapping from months to full string representations of the month.','line_number':629,'multiline':False]['text':' A mapping from months to three letter string representations of the month.','line_number':645,'multiline':False]['text':'*
 * A Date with only year, month and day of month components.
 ','line_number':731,'multiline':True]['text':' January = 1.','line_number':742,'multiline':False]['text':'*
 * Determines a number of leap years in a year range (leap year reference point; 'year'].
 ','line_number':746,'multiline':True]['text':' Count a number of leap years that happened since the reference point, where a leap year is','line_number':750,'multiline':False]['text':' when year%4==0, excluding years when year%100==0, except when year%400==0.','line_number':751,'multiline':False]['text':'*
 * Sums the number of days in the Gregorian calendar in years: 'startYear',
 * 'startYear'+1, .., 'endYear'-1. 'startYear' and 'endYear' are expected to be from the range
 * (-1000'000'000; +1000'000'000).
 ','line_number':757,'multiline':True]['text':'*
 * Determines a correction needed in number of hours when calculating passed hours between two time
 * instants 'startInstant' and 'endInstant' due to different UTC offsets.
 ','line_number':767,'multiline':True]['text':'*
 * Determines a correction needed in number of minutes when calculating passed minutes between two
 * time instants 'startInstant' and 'endInstant' due to different UTC offsets.
 ','line_number':775,'multiline':True]['text':'*
 * Determines a correction needed in number of seconds when calculating passed seconds between two
 * time instants 'startInstant' and 'endInstant' due to different UTC offsets.
 ','line_number':784,'multiline':True]['text':'*
 * Determines which quarter month 'month' belongs to. 'month' value range is 1..12. Returns a number
 * of a quarter, where 0 corresponds to the first quarter.
 ','line_number':796,'multiline':True]['text':'*
 * Determines which day of the week time instant 'timeInstant' is in given that the week starts on
 * day 'startOfWeek'. Returns 0 for the first day, and 6 - for the last.
 ','line_number':817,'multiline':True]['text':' We use 'timelib_iso_day_of_week()' since it returns value 1 for Monday.','line_number':822,'multiline':False]['text':'*
 * Determines a number of weeks between time instant 'startInstant' and 'endInstant' when the first
 * day of the week is 'startOfWeek'.
 ','line_number':828,'multiline':True]['text':' A mapping from a string expression of TimeUnit to TimeUnit.','line_number':867,'multiline':False]['text':' A mapping from string representations of a day of a week to DayOfWeek.','line_number':880,'multiline':False]['text':' namespace','line_number':898,'multiline':False]['text':' Translate the time instants to the given timezone.','line_number':909,'multiline':False]['text':' Perform case-insensitive lookup.','line_number':971,'multiline':False]['text':' Perform case-insensitive lookup.','line_number':980,'multiline':False]['text':'*
 * A helper function that adds an amount of months to a month given by 'year' and 'month'.
 * The amount can be a negative number. Returns the new month as a [year, month] pair.
 ','line_number':1031,'multiline':True]['text':'*
 * A helper function that computes the number of days to add to get an equivalent result as from
 * adding an 'amount' number of 'unit's in two use cases:
 * In case the date is in UTC, a last day adjustment is needed if the day is greater than 28th.
 * In case the date is in a timezone different from UTC, the time interval is always converted into
 * a number of days to produce correct result in this timezone. This may also include a last day
 * adjustment.
 *
 * The last day adjustment computation makes sure that the day in the result date is not greater
 * than the last valid day in the respective month. Example: 2020-10-31 + 1 month -> day adjustment
 * is needed since there is no 31st of November. The function computes adjusted time interval of 30
 * days. For dates in UTC and day smaller than 29th, the function returns boost::none.
 *
 * tm: start date of the operation
 * unit: the time unit
 * amount: the amount of time units to be added
 * returns optional intervalInDays : adjusted time interval in number of days if adjustment is
 * needed
 ','line_number':1050,'multiline':True]['text':'*
 * Determines a distance of 'value' to the lower bound of a bin 'value' falls into. It assumes that
 * there is a set of bins with following bounds .., [-'binSize', 0), [0, 'binSize'), ['binSize',
 * 2*'binSize'), ..
 *
 * binSize - bin size. Must be greater than 0.
 ','line_number':1093,'multiline':True]['text':'*
 * An optimized version of date truncation algorithm that works with bins in milliseconds, seconds,
 * minutes and hours.
 ','line_number':1109,'multiline':True]['text':'*
 * The same as 'truncateDate(Date_t, TimeUnit, unsigned long long binSize, const TimeZone&,
 * DayOfWeek)', but additionally accepts a reference point 'referencePoint', that is expected to be
 * aligned to the given time unit.
 *
 * referencePoint - a reference point for bins. It is a pair of two different representations -
 * milliseconds since Unix epoch and date component based to avoid the cost of converting from one
 * representation to another.
 ','line_number':1141,'multiline':True]['text':' This is a limit up to which dateAdd() can properly handle.','line_number':1178,'multiline':False]['text':' Determine a distance of the lower bound of a bin 'date' falls into from the reference','line_number':1206,'multiline':False]['text':' point.','line_number':1207,'multiline':False]['text':' Determine the lower bound of a bin the 'date' falls into.','line_number':1215,'multiline':False]['text':'*
 * Returns the default reference point used in $dateTrunc computation that is tied to 'timezone'. It
 * must be aligned to time unit 'unit'. This function returns a pair of representations of the
 * reference point.
 ','line_number':1221,'multiline':True]['text':' We use a more resource efficient way than 'TimeZone::createFromDateParts()' to get reference','line_number':1229,'multiline':False]['text':' point value in 'timezone'.','line_number':1230,'multiline':False]['text':' 2000-01-01T00:00:00.000Z','line_number':1231,'multiline':False]['text':' Find the nearest to 'referencePoint' first day of the week that is in the future.','line_number':1240,'multiline':False]['text':' 2000-01-01 is Saturday.','line_number':1242,'multiline':False]['text':' If the reference point was an arbitrary value, we would need to use 'dateAdd()' function','line_number':1248,'multiline':False]['text':' to correctly add a number of days to account for Daylight Saving Time (DST) transitions','line_number':1249,'multiline':False]['text':' that may happen between the initial reference point and the resulting date (DST has a','line_number':1250,'multiline':False]['text':' different offset from UTC than Standard Time). However, since the reference point is the','line_number':1251,'multiline':False]['text':' first of January, 2000 and Daylight Saving Time transitions did not happen in the first','line_number':1252,'multiline':False]['text':' half of January in year 2000, it is correct to just add a number of milliseconds in','line_number':1253,'multiline':False]['text':' 'daysToAdjustBy' days.','line_number':1254,'multiline':False]['text':'*
 * Determines if function 'dateAdd()' parameter 'amount' and 'unit' values are valid - the
 * amount roughly fits the range of Date_t type.
 ','line_number':1261,'multiline':True]['text':' minimum number of days per year','line_number':1268,'multiline':True]['text':' namespace','line_number':1299,'multiline':False]['text':' Check that 'amount' value is within an acceptable range. If the value is within acceptable','line_number':1306,'multiline':False]['text':' range, then the addition algorithm is expected to not overflow. The final determination if','line_number':1307,'multiline':False]['text':' the result can be represented as Date_t is done after the addition result is computed.','line_number':1308,'multiline':False]['text':' Check if an adjustment for the last day of month is necessary.','line_number':1318,'multiline':False]['text':' For time units of day or larger perform the computation in the local timezone. This','line_number':1328,'multiline':False]['text':' keeps the values of hour, minute, second, and millisecond components from the input date','line_number':1329,'multiline':False]['text':' the same in the result date regardless of transitions from DST to Standard Time and vice','line_number':1330,'multiline':False]['text':' versa that may happen between the input date and the result.','line_number':1331,'multiline':False]['text':' For time units of hour or smaller and a timezone different from UTC perform the','line_number':1336,'multiline':False]['text':' computation in UTC. In this case we don't want to apply the DST correction to the return','line_number':1337,'multiline':False]['text':' date, which would happen by default if we used the timelib_add() function with local','line_number':1338,'multiline':False]['text':' time. For example:','line_number':1339,'multiline':False]['text':'    {$dateAdd: { startDate: ISODate("2020-11-01T05:50:02Z"),','line_number':1340,'multiline':False]['text':'     unit: "hour", amount: 1, timezone: "America/New_York"}}','line_number':1341,'multiline':False]['text':' returns ISODate("2020-11-01T07:50:02Z") when we call timelib_add(localTime ...)','line_number':1342,'multiline':False]['text':' and ISODate("2020-11-01T06:50:02Z") when we call timelib_add(utcTime ...).','line_number':1343,'multiline':False]['text':' Determine a reference point aligned to the natural boundaries of time unit 'unit'.','line_number':1410,'multiline':False]['text':' namespace mongo','line_number':1414,'multiline':False]