['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':39,'multiline':False]['text':' Build an expression to extract the shard key from the document based on the shard key','line_number':302,'multiline':False]['text':' pattern. To do this, we iterate over the shard key pattern parts and build nested 'getField'','line_number':303,'multiline':False]['text':' expressions. This will handle single-element paths, and dotted paths for each shard key part.','line_number':304,'multiline':False]['text':' If this is a hashed shard key then compute the hash value.','line_number':322,'multiline':False]['text':' In debug builds or when we explicitly set the query knob, we artificially force frequent','line_number':345,'multiline':False]['text':' spilling. This makes sure that our tests exercise the spilling algorithm and the associated','line_number':346,'multiline':False]['text':' logic for merging partial aggregates which otherwise would require large data sizes to','line_number':347,'multiline':False]['text':' exercise.','line_number':348,'multiline':False]['text':' optimized close ','line_number':355,'multiline':True]['text':' participateInTrialRunTracking ','line_number':360,'multiline':True]['text':' The value passed in must be an array.','line_number':414,'multiline':False]['text':' Make an EConstant expression for the array.','line_number':417,'multiline':False]['text':' Build the unwind/project/limit/coscan subtree.','line_number':420,'multiline':False]['text':' We don't need an index slot but must to provide it.','line_number':430,'multiline':False]['text':' Don't preserve null and empty arrays.','line_number':431,'multiline':False]['text':' Return the UnwindStage and its output slot. The UnwindStage can be used as an input','line_number':435,'multiline':False]['text':' to other PlanStages.','line_number':436,'multiline':False]['text':' Generate a mock scan with a single output slot.','line_number':450,'multiline':False]['text':' Create a ProjectStage that will read the data from 'scanStage' and split it up','line_number':453,'multiline':False]['text':' across multiple output slots.','line_number':454,'multiline':False]['text':'*
 * Callback function that logs a message and uasserts if it detects a corrupt index key. An index
 * key is considered corrupt if it has no corresponding Record.
 ','line_number':487,'multiline':True]['text':' Having a recordId but no record is only an issue when we are not ignoring prepare conflicts.','line_number':497,'multiline':False]['text':' If we have a recordId but no corresponding record, this means that said record has been','line_number':508,'multiline':False]['text':' deleted. This can occur during yield, in which case the snapshot id would be incremented.','line_number':509,'multiline':False]['text':' If, on the other hand, the current snapshot id matches that of the recordId, this','line_number':510,'multiline':False]['text':' indicates an error as no yield could have taken place.','line_number':511,'multiline':False]['text':'*
 * Callback function that returns true if a given index key is valid, false otherwise. An index key
 * is valid if either the snapshot id of the underlying index scan matches the current snapshot id,
 * or that the index keys are still part of the underlying index.
 ','line_number':565,'multiline':True]['text':' The index consistency check is only performed when 'snapshotIdAccessor' is set.','line_number':577,'multiline':False]['text':' If 'entryMap' doesn't contain an entry for 'indexIdent', create one.','line_number':610,'multiline':False]['text':' Throw an error if we can't get the IndexDescriptor or the IndexCatalogEntry','line_number':616,'multiline':False]['text':' (or if the index is dropped).','line_number':617,'multiline':False]['text':' There's no need to compute the prefixes of the indexed fields that cause the','line_number':639,'multiline':False]['text':' index to be multikey when ensuring the keyData is still valid.','line_number':640,'multiline':False]['text':' It is assumed that we are generating a fetch loop join over the main collection. If we are','line_number':676,'multiline':False]['text':' generating a fetch over a secondary collection, it is the responsibility of a parent node','line_number':677,'multiline':False]['text':' in the QSN tree to indicate which collection we are fetching over.','line_number':678,'multiline':False]['text':' Scan the collection in the range [seekRecordIdSlot, Inf).','line_number':683,'multiline':False]['text':' oplogTsSlot ','line_number':691,'multiline':True]['text':' minRecordIdSlot ','line_number':695,'multiline':True]['text':' maxRecordIdSlot ','line_number':696,'multiline':True]['text':' forward ','line_number':697,'multiline':True]['text':' yieldPolicy ','line_number':698,'multiline':True]['text':' Get the recordIdSlot from the outer side (e.g., IXSCAN) and feed it to the inner side,','line_number':702,'multiline':False]['text':' limiting the result set to 1 row.','line_number':703,'multiline':False]['text':' predicate ','line_number':710,'multiline':True]['text':'*
 * Given a key pattern and an array of slots of equal size, builds a SlotTreeNode representing the
 * mapping between key pattern component and slot.
 *
 * Note that this will "short circuit" in cases where the index key pattern contains two components
 * where one is a subpath of the other. For example with the key pattern {a:1, a.b: 1}, the "a.b"
 * component will not be represented in the output tree. For the purpose of rehydrating index keys,
 * this is fine (and actually preferable).
 ','line_number':714,'multiline':True]['text':'*
 * Given a root SlotTreeNode, this function will construct an SBE expression for producing a partial
 * object from an index key.
 *
 * Example: Given the key pattern {a.b: 1, x: 1, a.c: 1} and the index key {"": 1, "": 2, "": 3},
 * the SBE expression returned by this function would produce the object {a: {b: 1, c: 3}, x: 2}.
 ','line_number':734,'multiline':True]['text':' The reason this is in an else branch is that in the case where we have an index key','line_number':751,'multiline':False]['text':' like {a.b: ..., a: ...}, we've already made the logic for reconstructing the 'a'','line_number':752,'multiline':False]['text':' portion, so the 'a.b' subtree can be skipped.','line_number':753,'multiline':False]['text':'*
 * Given a stage, and index key pattern a corresponding array of slot IDs, this function
 * add a ProjectStage to the tree which rehydrates the index key and stores the result in
 * 'resultSlot.'
 ','line_number':761,'multiline':True]['text':' For inclusion projections, if we encounter "{_id: 0}" we ignore it. Likewise, for','line_number':793,'multiline':False]['text':' exclusion projections, if we encounter "{_id: 1}" we ignore it. ("_id" is the only','line_number':794,'multiline':False]['text':' field that gets special treatment by the projection parser, so it's the only field','line_number':795,'multiline':False]['text':' where this check is necessary.)','line_number':796,'multiline':False]['text':' namespace','line_number':828,'multiline':False]['text':' 'outputSlots' will match the order of 'fields'. Bail out early if 'fields' is empty.','line_number':850,'multiline':False]['text':' Handle the case where 'fields' contains only top-level fields.','line_number':856,'multiline':False]['text':' Handle the case where 'fields' contains at least one dotted path. We begin by creating a','line_number':881,'multiline':False]['text':' path tree from 'fields'.','line_number':882,'multiline':False]['text':' If 'slots' is not null, then we perform a DFS traversal over the path tree to get it set up.','line_number':898,'multiline':False]['text':' Look for a kField slot that corresponds to node's path.','line_number':905,'multiline':False]['text':' We found a kField slot. Assign it to 'node->value' and mark 'node' as "visited",','line_number':907,'multiline':False]['text':' and add 'node' to 'roots'.','line_number':908,'multiline':False]['text':' When 'node' hasn't been visited and it's not in 'fieldNodesSet' and when all of','line_number':914,'multiline':False]['text':' node's children have already been visited, mark 'node' as having been "visited".','line_number':915,'multiline':False]['text':' (The specific value we assign to 'node->value' doesn't actually matter.)','line_number':916,'multiline':False]['text':' For each node in 'roots' we perform a DFS traversal, taking care to avoid visiting nodes','line_number':929,'multiline':False]['text':' that are marked as having been "visited" already during the previous phase.','line_number':930,'multiline':False]['text':' If node->value is initialized, that means that 'node' and its descendants','line_number':934,'multiline':False]['text':' have already been visited.','line_number':935,'multiline':False]['text':' visitRootNode is false, so we should be guaranteed that that there are at least','line_number':939,'multiline':False]['text':' two entries in the DfsState: an entry for 'node' and an entry for node's parent.','line_number':940,'multiline':False]['text':' If 'fieldNodesSet.count(node)' is false and 'node' doesn't have multiple','line_number':960,'multiline':False]['text':' children that need to be visited, then we don't need to project value to','line_number':961,'multiline':False]['text':' a slot. Store 'getExprvalue' into 'node->value' and return.','line_number':962,'multiline':False]['text':' We need to project 'getFieldExpr' to a slot.','line_number':967,'multiline':False]['text':' Grow 'stackOfProjects' if needed so that 'stackOfProjects[depth]' is valid.','line_number':970,'multiline':False]['text':' Add the projection to the appropriate level of 'stackOfProjects'.','line_number':974,'multiline':False]['text':' Increment the depth while we visit node's descendents.','line_number':977,'multiline':False]['text':' If 'node->value' holds a slot, that means the previsit phase incremented 'depth'.','line_number':983,'multiline':False]['text':' Now that we are done visiting node's descendents, we decrement 'depth'.','line_number':984,'multiline':False]['text':' Generate a ProjectStage for each level of 'stackOfProjects'.','line_number':991,'multiline':False]['text':' Loop over 'paths' / 'nodes'.','line_number':1010,'multiline':False]['text':' Loop over '_fields'.','line_number':1142,'multiline':False]['text':' Loop over 'other._fields' and only visit fields that are not present in '_fields'.','line_number':1153,'multiline':False]['text':' Update '_defaultEffect' as appropriate.','line_number':1167,'multiline':False]['text':' Loop over '_fields'.','line_number':1178,'multiline':False]['text':' Loop over 'child._fields' and only visit fields that are not present in '_fields'.','line_number':1190,'multiline':False]['text':' Loop over '_fields'.','line_number':1222,'multiline':False]['text':' Loop over 'other._fields' and only visit fields that are not present in '_fields'.','line_number':1233,'multiline':False]['text':' For inclusion projections, we make a list of the top-level fields referenced by the','line_number':1350,'multiline':False]['text':' projection and make a closed FieldSet.','line_number':1351,'multiline':False]['text':' For exclusion projections, we build a list of the top-level fields that are dropped by this','line_number':1356,'multiline':False]['text':' projection, and then we use that list to make an open FieldSet that represents the set of','line_number':1357,'multiline':False]['text':' fields _not_ dropped by this projection.','line_number':1358,'multiline':False]['text':' namespace mongo::stage_builder','line_number':1406,'multiline':False]