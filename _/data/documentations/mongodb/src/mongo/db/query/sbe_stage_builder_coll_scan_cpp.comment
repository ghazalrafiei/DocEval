['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * If 'shouldTrackLatestOplogTimestamp' is true, then returns a vector holding the name of the oplog
 * 'ts' field along with another vector holding a SlotId to map this field to, as well as the
 * standalone value of the same SlotId (the latter is returned purely for convenience purposes).
 ','line_number':77,'multiline':True]['text':' Forward, non-tailable scans from the oplog need to wait until all oplog entries','line_number':92,'multiline':False]['text':' before the read begins to be visible. This isn't needed for reverse scans because','line_number':93,'multiline':False]['text':' we only hide oplog entries from forward scans, and it isn't necessary for tailing','line_number':94,'multiline':False]['text':' cursors because they ignore EOF and will eventually see all writes. Forward,','line_number':95,'multiline':False]['text':' non-tailable scans are the only case where a meaningful EOF will be seen that','line_number':96,'multiline':False]['text':' might not include writes that finished before the read started. This also must be','line_number':97,'multiline':False]['text':' done before we create the cursor as that is when we establish the endpoint for','line_number':98,'multiline':False]['text':' the cursor. Also call abandonSnapshot to make sure that we are using a fresh','line_number':99,'multiline':False]['text':' storage engine snapshot while waiting. Otherwise, we will end up reading from the','line_number':100,'multiline':False]['text':' snapshot where the oplog entries are not yet visible even after the wait.','line_number':101,'multiline':False]['text':'*
 * Checks whether a callback function should be created for a ScanStage and returns it, if so. The
 * logic in the provided callback will be executed when the ScanStage is opened (but not reopened).
 ','line_number':106,'multiline':True]['text':' If the scan should be started after the provided resume RecordId, we will construct a nested-loop','line_number':122,'multiline':False]['text':' join sub-tree to project out the resume RecordId and feed it into the inner side (scan). We will','line_number':123,'multiline':False]['text':' also construct a union sub-tree as an outer side of the loop join to implement the check that the','line_number':124,'multiline':False]['text':' record we're trying to reposition the scan exists.','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':'      nlj [] [seekRecordIdSlot]','line_number':127,'multiline':False]['text':'         left','line_number':128,'multiline':False]['text':'            limit 1','line_number':129,'multiline':False]['text':'            union [seekRecordIdSlot]','line_number':130,'multiline':False]['text':'               [seekSlot]','line_number':131,'multiline':False]['text':'                  nlj','line_number':132,'multiline':False]['text':'                     left','line_number':133,'multiline':False]['text':'                        project seekSlot = <seekRecordIdExpression>','line_number':134,'multiline':False]['text':'                        limit 1','line_number':135,'multiline':False]['text':'                        coscan','line_number':136,'multiline':False]['text':'                     right','line_number':137,'multiline':False]['text':'                        seek seekSlot ...','line_number':138,'multiline':False]['text':'               [unusedSlot]','line_number':139,'multiline':False]['text':'                  project unusedSlot = efail(KeyNotFound)','line_number':140,'multiline':False]['text':'                  limit 1','line_number':141,'multiline':False]['text':'                  coscan','line_number':142,'multiline':False]['text':'          right','line_number':143,'multiline':False]['text':'            skip 1','line_number':144,'multiline':False]['text':'            <inputStage>','line_number':145,'multiline':False]['text':' Project out the RecordId we want to resume from as 'seekSlot'.','line_number':159,'multiline':False]['text':' Construct a 'seek' branch of the 'union'. If we're succeeded to reposition the cursor,','line_number':168,'multiline':False]['text':' the branch will output the 'seekSlot' to start the real scan from, otherwise it will','line_number':169,'multiline':False]['text':' produce EOF.','line_number':170,'multiline':False]['text':' recordSlot ','line_number':174,'multiline':True]['text':' recordIdSlot','line_number':175,'multiline':True]['text':' snapshotIdSlot ','line_number':176,'multiline':True]['text':' indexIdentSlot ','line_number':177,'multiline':True]['text':' indexKeySlot ','line_number':178,'multiline':True]['text':' keyPatternSlot ','line_number':179,'multiline':True]['text':' oplogTsSlot ','line_number':180,'multiline':True]['text':' minRecordIdSlot ','line_number':184,'multiline':True]['text':' maxRecordIdSlot ','line_number':185,'multiline':True]['text':' Construct a 'fail' branch of the union. The 'unusedSlot' is needed as each union branch must','line_number':195,'multiline':False]['text':' have the same number of slots, and we use just one in the 'seek' branch above. This branch','line_number':196,'multiline':False]['text':' will only be executed if the 'seek' branch produces EOF, which can only happen if the seek','line_number':197,'multiline':False]['text':' did not find the resume record of a tailable cursor or the record id specified in','line_number':198,'multiline':False]['text':' $_resumeAfter.','line_number':199,'multiline':False]['text':' Construct a union stage from the 'seek' and 'fail' branches. Note that this stage will ever','line_number':216,'multiline':False]['text':' produce a single call to getNext() due to a 'limit 1' sitting on top of it.','line_number':217,'multiline':False]['text':' Construct the final loop join. Note that for the resume branch of a tailable cursor case we','line_number':224,'multiline':False]['text':' use the 'seek' stage as an inner branch, since we need to produce all records starting from','line_number':225,'multiline':False]['text':' the supplied position. For a resume token case we also inject a 'skip 1' stage on top of the','line_number':226,'multiline':False]['text':' inner branch, as we need to start _after_ the resume RecordId. In both cases we inject a','line_number':227,'multiline':False]['text':' 'limit 1' stage on top of the outer branch, as it should produce just a single seek recordId.','line_number':228,'multiline':False]['text':'*
 * Creates a collection scan sub-tree optimized for clustered collection scans. Should only be
 * called on clustered collections. We can build an optimized scan when any of the following
 * scenarios apply:
 *
 * 1. 'csn->minRecord' and/or 'csn->maxRecord' exist.
 *    1.1 CollectionScanParams::FORWARD scan:
 *        a. If 'csn->minRecord' is present, the collection scan will seek directly to the RecordId
 *           of a record as close to this lower bound as possible without going higher.
 *        b. If 'csn->maxRecord' is present, the collection scan will stop and return EOF the first
 *           time it fetches a document greater than this upper bound.
 *    1.2 CollectionScanParams::BACKWARD scan:
 *        a. If 'csn->maxRecord' is present, the collection scan will seek directly to the RecordId
 *           of a record as close to this upper bound as possible without going lower.
 *        b. If 'csn->minRecord' is present, the collection scan will stop and return EOF the first
 *           time it fetches a document less than this lower bound.
 * 2. The user request specified a $_resumeAfter RecordId from which to begin the scan AND the scan
 *    is forward AND neither 'csn->minRecord' nor 'csn->maxRecord' exist.
 *    2a. The scan will continue with the next RecordId after $_resumeAfter.
 ','line_number':241,'multiline':True]['text':' The minRecord and maxRecord optimizations are not compatible with resumeAfterRecordId.','line_number':275,'multiline':False]['text':' 'stopApplyingFilterAfterFirstMatch' is only for oplog scans; this method doesn't do them.','line_number':277,'multiline':False]['text':' Iff this is a resume or fetch, set 'seekRecordIdSlot' and 'seekRecordIdExpression' to the','line_number':285,'multiline':False]['text':' RecordId resume point of the scan. If we're building a collection scan for a resume branch of','line_number':286,'multiline':False]['text':' a special union sub-tree implementing a tailable cursor scan, we can use the already existing','line_number':287,'multiline':False]['text':' 'resumeRecordIdSlot' directly as the 'seekRecordIdSlot' to access the recordId to resume the','line_number':288,'multiline':False]['text':' scan from. Otherwise we must create a slot for it.','line_number':289,'multiline':False]['text':' lambda end and call','line_number':300,'multiline':False]['text':' Create minRecordId and/or maxRecordId slots as needed.','line_number':302,'multiline':False]['text':' Create the ScanStage.','line_number':318,'multiline':False]['text':' snapshotIdSlot ','line_number':330,'multiline':True]['text':' indexIdentSlot ','line_number':331,'multiline':True]['text':' indexKeySlot ','line_number':332,'multiline':True]['text':' keyPatternSlot ','line_number':333,'multiline':True]['text':' oplogTsSlot ','line_number':334,'multiline':True]['text':' do not std::move - used later','line_number':335,'multiline':False]['text':' do not std::move - used later','line_number':336,'multiline':False]['text':' lowPriority default ','line_number':344,'multiline':True]['text':' useRandomCursor default ','line_number':345,'multiline':True]['text':' participateInTrialRunTracking default ','line_number':346,'multiline':True]['text':' Iff this is a resume or fetch, build the subtree to start the scan from the seekRecordId.','line_number':350,'multiline':False]['text':' When the start and/or end scan bounds are from an expression, ScanStage::getNext() treats','line_number':363,'multiline':False]['text':' them both as inclusive, and 'csn->filter' will enforce any exclusions. If the bound(s) came','line_number':364,'multiline':False]['text':' from the "min" (always inclusive) and/or "max" (always exclusive) keywords, there may be no','line_number':365,'multiline':False]['text':' filter, so ScanStage->getNext() must directly enforce the bounds. min's inclusivity matches','line_number':366,'multiline':False]['text':' getNext()'s default behavior, but max's exclusivity does not and thus is enforced by the','line_number':367,'multiline':False]['text':' includeScanEndRecordId argument to the ScanStage constructor above.','line_number':368,'multiline':False]['text':' generateClusteredCollScan','line_number':384,'multiline':False]['text':'*
 * Generates a generic collection scan sub-tree.
 *  - If a resume token has been provided, the scan will start from a RecordId contained within this
 *    token.
 *  - Else if 'isResumingTailableScan' is true, the scan will start from a RecordId contained in
 *    slot "resumeRecordId".
 *  - Otherwise the scan will start from the beginning of the collection.
 ','line_number':386,'multiline':True]['text':' If the filter predicate doesn't need the whole document, then we take all the top-level','line_number':410,'multiline':False]['text':' fields referenced by the filter predicate and we add them to 'fields'.','line_number':411,'multiline':False]['text':' See if we need to project out an oplog latest timestamp.','line_number':434,'multiline':False]['text':' snapshotIdSlot ','line_number':445,'multiline':True]['text':' indexIdentSlot ','line_number':446,'multiline':True]['text':' indexKeySlot ','line_number':447,'multiline':True]['text':' keyPatternSlot ','line_number':448,'multiline':True]['text':' minRecordIdSlot ','line_number':453,'multiline':True]['text':' maxRecordIdSlot ','line_number':454,'multiline':True]['text':' resumeAfterRecordId  ','line_number':470,'multiline':True]['text':' 'stopApplyingFilterAfterFirstMatch' is only for oplog scans; this method doesn't do them.','line_number':481,'multiline':False]['text':' generateGenericCollScan','line_number':495,'multiline':False]['text':' namespace','line_number':497,'multiline':False]['text':' namespace mongo::stage_builder','line_number':515,'multiline':False]