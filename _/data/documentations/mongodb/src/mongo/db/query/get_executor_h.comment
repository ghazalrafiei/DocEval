['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Make an ExpressionContext to be used for non-aggregate commands. The result of this can be passed
 * into any of the getExecutor* functions.
 *
 * Note that the getExecutor* functions may change the collation on the returned ExpressionContext
 * if the collection has a default collation and no collation was specifically requested
 * ('requestCollation' is empty).
 ','line_number':82,'multiline':True]['text':'*
 * Filter indexes retrieved from index catalog by
 * allowed indices in query settings.
 * Used by getExecutor().
 * This function is public to facilitate testing.
 ','line_number':93,'multiline':True]['text':'*
 * Fills out information about secondary collections held by 'collections' in 'plannerParams'.
 ','line_number':102,'multiline':True]['text':'*
 * Fill out the provided 'plannerParams' for the 'canonicalQuery' operating on the collection
 * 'collection'.
 ','line_number':110,'multiline':True]['text':'*
 * Overload of the above function that does two things:
 * - Calls the single collection overload of 'fillOutPlannerParams' on the main collection held
 * by 'collections'
 * - Calls 'fillOutSecondaryCollectionsInformation' to store information about the set of
 * secondary collections held by 'collections' on 'plannerParams'.
 ','line_number':118,'multiline':True]['text':'*
 * Return whether or not any component of the path 'path' is multikey given an index key pattern
 * and multikeypaths. If no multikey metdata is available for the index, and the index is marked
 * multikey, conservatively assumes that a component of 'path' _is_ multikey. The 'isMultikey'
 * property of an index is false for indexes that definitely have no multikey paths.
 ','line_number':130,'multiline':True]['text':'*
 * Converts the catalog metadata for an index into an IndexEntry, which is a format that is meant to
 * be consumed by the query planner. This function can perform index reads and should not be called
 * unless access to the storage engine is permitted.
 *
 * When 'canonicalQuery' is not null, only multikey metadata paths that intersect with the query
 * field set will be retrieved for a multikey wildcard index. Otherwise all multikey metadata paths
 * will be retrieved.
 ','line_number':141,'multiline':True]['text':'*
 * Converts the catalog metadata for an index into an ColumnIndexEntry, which is a format that is
 * meant to be consumed by the query planner. This function can perform index reads and should not
 * be called unless access to the storage engine is permitted.
 ','line_number':155,'multiline':True]['text':'*
 * Determines whether or not to wait for oplog visibility for a query. This is only used for
 * collection scans on the oplog.
 ','line_number':164,'multiline':True]['text':'*
 * Get a plan executor for a query.
 *
 * If the query is valid and an executor could be created, returns a StatusWith with the
 * PlanExecutor.
 *
 * If the query cannot be executed, returns a Status indicating why.
 *
 * If the caller provides a 'extractAndAttachPipelineStages' function and the query is eligible for
 * pushdown into the find layer this function will be invoked to extract pipeline stages and
 * attach them to the provided 'CanonicalQuery'. This function should capture the Pipeline that
 * stages should be extracted from. If the boolean 'attachOnly' argument is true, it will only find
 * and attach the applicable stages to the query. If it is false, it will remove the extracted
 * stages from the pipeline.
 *
 * Note that the first overload takes a 'MultipleCollectionAccessor' and can construct a
 * PlanExecutor over multiple collections, while the second overload takes a single 'CollectionPtr'
 * and can only construct a PlanExecutor over a single collection.
 ','line_number':172,'multiline':True]['text':'*
 * Get a plan executor for a .find() operation. The executor will have a 'YIELD_AUTO' yield policy
 * unless a false value for 'permitYield' or being part of a multi-document transaction forces it to
 * have a 'NO_INTERRUPT' yield policy.
 *
 * If the query is valid and an executor could be created, returns a StatusWith with the
 * PlanExecutor.
 *
 * If the query cannot be executed, returns a Status indicating why.
 *
 * If the caller provides a 'extractAndAttachPipelineStages' function and the query is eligible for
 * pushdown into the find layer this function will be invoked to extract pipeline stages and
 * attach them to the provided 'CanonicalQuery'. This function should capture the Pipeline that
 * stages should be extracted from. If the boolean 'attachOnly' argument is true, it will only find
 * and attach the applicable stages to the query. If it is false, it will remove the extracted
 * stages from the pipeline.
 *
 * Note that the first overload takes a 'MultipleCollectionAccessor' and can construct a
 * PlanExecutor over multiple collections, while the second overload takes a single
 * 'CollectionPtr' and can only construct a PlanExecutor over a single collection.
 ','line_number':207,'multiline':True]['text':'*
 * If possible, turn the provided QuerySolution into a QuerySolution that uses a DistinctNode
 * to provide results for the distinct command.
 *
 * When 'strictDistinctOnly' is false, any resulting QuerySolution will limit the number of
 * documents that need to be examined to compute the results of a distinct command, but it may not
 * guarantee that there are no duplicate values for the distinct field.
 *
 * If the provided solution could be mutated successfully, returns true, otherwise returns
 * false.
 ','line_number':251,'multiline':True]['text':'*
 * Attempts to get an executor that uses a DISTINCT_SCAN, intended for either a "distinct" command
 * or an aggregation pipeline that uses a $group stage with distinct-like semantics. If a
 * DISTINCT_SCAN cannot be created for the given arguments, returns
 * ErrorCodes::NoQueryExecutionPlans.
 *
 * Specify the QueryPlannerParams::STRICT_DISTINCT_ONLY flag in the 'plannerOptions' argument to
 * ensure that any resulting plan _guarantees_ it will return exactly one document per value of the
 * distinct field. For example, a DISTINCT_SCAN over index {a: 1, b: 1} will return documents that
 * are equal on both the 'a' and 'b' fields, meaning that there might be duplicated values of 'b' if
 * the corresponding values of 'a' are distinct. The distinct('b') command can reduce this set
 * further to only return distinct values of 'b', but {$group: {_id: '$b'}} doesn't do the further
 * reduction and instead would set the STRICT_DISTINCT_ONLY flag to prevent choosing a DISTINCT_SCAN
 * over the {a: 1, b: 1} index.
 *
 * Providing QueryPlannerParams::STRICT_DISTINCT_ONLY also implies that the resulting plan will not
 * "unwind" arrays. That is, it will not return separate values for each element in an array. For
 * example, in a collection with documents {a: [10, 11]}, {a: 12}, the distinct('a') command
 * should return "unwound" values 10, 11, and 12, but {$group: {_id: '$a'}} needs to see the
 * documents for the original [10, 11] and 12 values. Thus, the latter would use the
 * STRICT_DISTINCT_ONLY option to preserve the arrays.
 ','line_number':266,'multiline':True]['text':'
 * Get a PlanExecutor for a query executing as part of a count command.
 *
 * Count doesn't care about actually examining its results; it just wants to walk through them.
 * As such, with certain covered queries, we can skip the overhead of fetching etc. when
 * executing a count.
 ','line_number':294,'multiline':True]['text':'*
 * Get a PlanExecutor for a delete operation. 'parsedDelete' describes the query predicate
 * and delete flags like 'isMulti'. The caller must hold the appropriate MODE_X or MODE_IX
 * locks, and must not release these locks until after the returned PlanExecutor is deleted.
 *
 * 'opDebug' Optional argument. When not null, will be used to record operation statistics.
 *
 * If the delete operation is executed in explain mode, the 'verbosity' parameter should be
 * set to the requested verbosity level, or boost::none otherwise.
 *
 * The returned PlanExecutor will used the YieldPolicy returned by parsedDelete->yieldPolicy().
 *
 * Does not take ownership of its arguments.
 *
 * If the query is valid and an executor could be created, returns a StatusWith with the
 * PlanExecutor.
 *
 * If the query cannot be executed, returns a Status indicating why.
 ','line_number':308,'multiline':True]['text':'*
 * Get a PlanExecutor for an update operation. 'parsedUpdate' describes the query predicate
 * and update modifiers. The caller must hold the appropriate MODE_X or MODE_IX locks prior
 * to calling this function, and must not release these locks until after the returned
 * PlanExecutor is deleted.
 *
 * 'opDebug' Optional argument. When not null, will be used to record operation statistics.
 *
 * If the delete operation is executed in explain mode, the 'verbosity' parameter should be
 * set to the requested verbosity level, or boost::none otherwise.
 *
 * The returned PlanExecutor will used the YieldPolicy returned by parsedUpdate->yieldPolicy().
 *
 * Does not take ownership of its arguments.
 *
 * If the query is valid and an executor could be created, returns a StatusWith with the
 * PlanExecutor.
 *
 * If the query cannot be executed, returns a Status indicating why.
 ','line_number':333,'multiline':True]['text':'*
 * Direction of collection scan plan executor returned by makeCollectionScanPlanExecutor() below.
 ','line_number':359,'multiline':True]['text':' namespace mongo','line_number':374,'multiline':False]