['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':40,'multiline':False]['text':'*
 * Represents the granularity at which a field is available in a query solution node. Note that the
 * order of the fields represents increasing availability.
 ','line_number':91,'multiline':True]['text':' The field is not provided.','line_number':96,'multiline':False]['text':' The field is provided as a hash of raw data instead of the raw data itself. For example, this','line_number':99,'multiline':False]['text':' can happen when the field is a hashed field in an index.','line_number':100,'multiline':False]['text':' The field is available as ICU encoded string and can be used to do sorting but it does not','line_number':103,'multiline':False]['text':' provide the actual value.','line_number':104,'multiline':False]['text':' The field is completely provided.','line_number':107,'multiline':False]['text':'*
 * Represents the set of sort orders satisfied by the data returned from a particular
 * QuerySolutionNode.
 ','line_number':113,'multiline':True]['text':'*
     * Returns true if the 'input' sort order is provided.
     *
     * Note: This function is sensitive to direction, i.e, if a pattern {a: 1} is provided, {a: -1}
     * may not be provided.
     ','line_number':125,'multiline':True]['text':' last element ','line_number':143,'multiline':True]['text':' The base sort order that is used as a reference to generate all possible sort orders. It is','line_number':150,'multiline':False]['text':' also implied that all the prefixes of '_baseSortPattern' are provided.','line_number':151,'multiline':False]['text':' Object to hold set of fields on which there is an equality predicate in the 'query' and','line_number':154,'multiline':False]['text':' doesn't contribute to the sort order. Note that this doesn't include multiKey fields or','line_number':155,'multiline':False]['text':' collations fields since they can contribute to the sort order.','line_number':156,'multiline':False]['text':'*
 * An empty ProvidedSortSet that can be used in QSNs that have no children and don't derive from
 * QuerySolutionNodeWithSortSet.
 ','line_number':164,'multiline':True]['text':'*
 * This is an abstract representation of a query plan.  It can be transcribed into a tree of
 * PlanStages, which can then be handed to a PlanRunner for execution.
 ','line_number':170,'multiline':True]['text':'*
     * Constructs a QuerySolutionNode with a single child.
     ','line_number':177,'multiline':True]['text':'*
     * Return a std::string representation of this node and any children.
     ','line_number':186,'multiline':True]['text':'*
     * What stage should this node be transcribed to?  See stage_types.h.
     ','line_number':191,'multiline':True]['text':'*
     * Internal function called by toString()
     *
     * TODO: Consider outputting into a BSONObj or builder thereof.
     ','line_number':196,'multiline':True]['text':'','line_number':203,'multiline':False]['text':' Computed properties','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':'*
     * Must be called before any properties are examined.
     ','line_number':207,'multiline':True]['text':'*
     * If true, one of these are true:
     *          1. All outputs are already fetched, or
     *          2. There is a stage in place that makes a FETCH stage unnecessary.
     *
     * If false, a fetch needs to be placed above the root in order to provide results.
     *
     * Usage: To determine if every possible result that might reach the root
     * will be fully-fetched or not.  We don't want any surplus fetches.
     ','line_number':216,'multiline':True]['text':'*
     * Returns the granularity at which the tree rooted at this node provides data with the field
     * name 'field'. This data can come from any of the types of the WSM.
     *
     * Usage: If an index-only plan has all the fields we're interested in, we don't
     * have to fetch to show results with those fields.
     ','line_number':228,'multiline':True]['text':'*
     * Syntatic sugar on top of getFieldAvailability(). Returns true if the 'field' is fully
     * provided and false otherwise.
     ','line_number':237,'multiline':True]['text':'*
     * Returns true if the tree rooted at this node provides data that is sorted by its location on
     * disk.
     *
     * Usage: If all the children of an STAGE_AND_HASH have this property, we can compute the AND
     * faster by replacing the STAGE_AND_HASH with STAGE_AND_SORTED.
     ','line_number':245,'multiline':True]['text':'*
     * Returns a 'ProvidedSortSet' object which can be used to determine the possible sort orders of
     * the data returned from this node.
     *
     * Usage:
     * 1. If our plan gives us a sort order, we don't have to add a sort stage.
     * 2. If all the children of an OR have the same sort order, we can maintain that
     *    sort order with a STAGE_SORT_MERGE instead of STAGE_OR.
     ','line_number':254,'multiline':True]['text':'*
     * Make a deep copy.
     ','line_number':265,'multiline':True]['text':'*
     * Adds a vector of query solution nodes to the list of children of this node.
     ','line_number':270,'multiline':True]['text':'*
     * True, if this node, or any of it's children is of the given 'type'.
     ','line_number':293,'multiline':True]['text':'*
     * True, if this node, and all of it's children are eligible to be cached.
     ','line_number':298,'multiline':True]['text':'*
     * True, if later stages won't need more metadata from input. The return value should be aligned
     * with corresponding DocumentSource's DepsTracker::State, true for EXHAUSTIVE_META or
     * EXHAUSTIVE_ALL.
     ','line_number':303,'multiline':True]['text':'*
     * Returns the id associated with this node. Each node in a 'QuerySolution' tree is assigned a
     * unique identifier, which are assigned as sequential positive integers starting from 1.  An id
     * of 0 means that no id was explicitly assigned during construction of the QuerySolution.
     *
     * The identifiers are unique within the tree, but not across trees.
     ','line_number':312,'multiline':True]['text':' If a stage has a non-NULL filter all values outputted from that stage must pass that','line_number':342,'multiline':False]['text':' filter.','line_number':343,'multiline':False]['text':'*
     * Returns a pair consisting of:
     *  - First node of the specified type found by pre-order traversal. If node was not found, this
     *    pair element is nullptr.
     *  - Total number of nodes with the specified type in tree.
     ','line_number':348,'multiline':True]['text':'*
     * Formatting helper used by toString().
     ','line_number':357,'multiline':True]['text':'*
     * Every solution node has properties and this adds the debug info for the
     * properties.
     ','line_number':362,'multiline':True]['text':'*
     * Copy base query solution data from 'this' to 'other'.
     ','line_number':368,'multiline':True]['text':' Allows the QuerySolution constructor to set '_nodeId'.','line_number':383,'multiline':False]['text':'*
     * This constructor is only useful for QuerySolutionNodes with a single child.
     ','line_number':395,'multiline':True]['text':'*
 * A QuerySolution must be entirely self-contained and own everything inside of it.
 *
 * A tree of stages may be built from a QuerySolution.  The QuerySolution must outlive the tree
 * of stages.
 ','line_number':413,'multiline':True]['text':'*
     * Return true if this solution tree contains a node of the given 'type'.
     ','line_number':423,'multiline':True]['text':'*
     * Return true if all nodes in the solution tree can be cached.
     ','line_number':430,'multiline':True]['text':'*
     * Output a human-readable std::string representing the plan.
     ','line_number':437,'multiline':True]['text':'*
     * Extends the solution's tree by attaching it to the tree rooted at 'extensionRoot'. The
     * extension tree must contain exactly one 'SentinelNode' node that denotes the attachment
     * point. The sentinel node will be replaces with the '_root' node.
     ','line_number':459,'multiline':True]['text':'*
     * Assigns the QuerySolutionNode rooted at 'root' to this QuerySolution. Also assigns a unique
     * identifying integer to each node in the tree, which can subsequently be displayed in debug
     * output (e.g. explain).
     ','line_number':466,'multiline':True]['text':'*
     * Extracts the root of the QuerySolutionNode rooted at `_root`.
     ','line_number':473,'multiline':True]['text':'*
     * Returns a vector containing all of the secondary namespaces referenced by this tree, except
     * for 'mainNss'. This vector is used to track which secondary namespaces we should acquire
     * locks for. Note that the namespaces are returned in sorted order.
     ','line_number':478,'multiline':True]['text':' There are two known scenarios in which a query solution might potentially block:','line_number':489,'multiline':False]['text':'','line_number':490,'multiline':False]['text':' Sort stage:','line_number':491,'multiline':False]['text':' If the solution has a sort stage, the sort wasn't provided by an index, so we might want','line_number':492,'multiline':False]['text':' to scan an index to provide that sort in a non-blocking fashion.','line_number':493,'multiline':False]['text':'','line_number':494,'multiline':False]['text':' Hashed AND stage:','line_number':495,'multiline':False]['text':' The hashed AND stage buffers data from multiple index scans and could block. In that case,','line_number':496,'multiline':False]['text':' we would want to fall back on an alternate non-blocking solution.','line_number':497,'multiline':False]['text':' Runner executing this solution might be interested in knowing','line_number':500,'multiline':False]['text':' if the planning process for this solution was based on filtered indices.','line_number':501,'multiline':False]['text':' Owned here. Used by the plan cache.','line_number':504,'multiline':False]['text':' Score calculated by PlanRanker. Only present if there are multiple candidate plans.','line_number':509,'multiline':False]['text':'*
     * Returns a pair consisting of:
     *  - First node of the specified type found by pre-order traversal. If node was not found, this
     *    pair element is nullptr.
     *  - Total number of nodes with the specified type in tree.
     ','line_number':512,'multiline':True]['text':' It's possible this is overly conservative. By definition','line_number':549,'multiline':False]['text':' a collection scan is sorted by its record ids, so if','line_number':550,'multiline':False]['text':' we're scanning forward this might be true. However,','line_number':551,'multiline':False]['text':' in practice this is only important for choosing between','line_number':552,'multiline':False]['text':' hash and merge for index intersection.','line_number':553,'multiline':False]['text':' Tells whether this scan will be performed as a clustered collection scan in SBE.','line_number':557,'multiline':False]['text':' Tells whether this scan will be performed as a clustered collection scan in classic.','line_number':562,'multiline':False]['text':' For a collscan plan, the QuerySolutionNode::filter attribute will have the values from','line_number':574,'multiline':False]['text':' the query rather than be parameterized. So including the filter in the hash would create','line_number':575,'multiline':False]['text':' inconsistent hashes.','line_number':576,'multiline':False]['text':' Name of the namespace.','line_number':582,'multiline':False]['text':' If present, this parameter sets the start point of a forward scan or the end point of a','line_number':585,'multiline':False]['text':' reverse scan.','line_number':586,'multiline':False]['text':' If present, this parameter sets the start point of a reverse scan or the end point of a','line_number':589,'multiline':False]['text':' forward scan.','line_number':590,'multiline':False]['text':' If present, this parameter denotes the clustering info on the collection','line_number':593,'multiline':False]['text':' Are the query and collection using the same collation?','line_number':596,'multiline':False]['text':' Or are the bounds excluding situations where collation matters?','line_number':597,'multiline':False]['text':' If true, the collection scan will return a token that can be used to resume the scan.','line_number':600,'multiline':False]['text':' If present, the collection scan will seek to the exact RecordId, or return KeyNotFound if it','line_number':603,'multiline':False]['text':' does not exist. Must only be set on forward collection scans.','line_number':604,'multiline':False]['text':' This field cannot be used in conjunction with 'minRecord' or 'maxRecord'.','line_number':605,'multiline':False]['text':' Should we make a tailable cursor?','line_number':608,'multiline':False]['text':' Should we keep track of the timestamp of the latest oplog or change collection entry we've','line_number':611,'multiline':False]['text':' seen? This information is needed to merge cursors from the oplog in order of operation time','line_number':612,'multiline':False]['text':' when reading the oplog across a sharded cluster.','line_number':613,'multiline':False]['text':' Assert that the specified timestamp has not fallen off the oplog or change collection.','line_number':616,'multiline':False]['text':' Scan direction: 1 means forward; -1 means reverse.','line_number':619,'multiline':False]['text':' Tells whether the collection is clustered (which includes oplog collections).','line_number':622,'multiline':False]['text':' Tells whether the collection is an oplog.','line_number':625,'multiline':False]['text':' By default, includes the minRecord and maxRecord when present.','line_number':628,'multiline':False]['text':' Whether or not to wait for oplog visibility on oplog collection scans.','line_number':632,'multiline':False]['text':' Once the first matching document is found, assume that all documents after it must match.','line_number':635,'multiline':False]['text':' This is useful for oplog queries where we know we will see records ordered by the ts field.','line_number':636,'multiline':False]['text':' Whether the collection scan should have low storage admission priority.','line_number':639,'multiline':False]['text':' The fields we need to output. Dot separated path names.','line_number':689,'multiline':False]['text':' The fields which are referenced by any and all filters - either in 'filtersByPath' or','line_number':692,'multiline':False]['text':' 'postAssemblyFilter'.','line_number':693,'multiline':False]['text':' A cached copy of the union of the above two field sets which we expect to be frequently asked','line_number':696,'multiline':False]['text':' for.','line_number':697,'multiline':False]['text':' A column scan can apply a filter to the columns directly while scanning, or to a document','line_number':700,'multiline':False]['text':' assembled from the scanned columns.','line_number':701,'multiline':False]['text':' Filters to apply to a column directly while scanning. Maps the path to the filter for that','line_number':703,'multiline':False]['text':' column. Empty if there are none.','line_number':704,'multiline':False]['text':' An optional filter to apply after assembling a document from all scanned columns. For','line_number':707,'multiline':False]['text':' example: {$or: [{a: 2}, {b: 2}]}.','line_number':708,'multiline':False]['text':' If set to true, we can include extra fields rather than project them out because projection','line_number':711,'multiline':False]['text':' happens anyway in a later stage (such a group stage).','line_number':712,'multiline':False]['text':'*
 * A VirtualScanNode is similar to a collection or an index scan except that it doesn't depend on an
 * underlying storage implementation. It can be used to represent a virtual
 * collection or an index scan in memory by using a backing vector of BSONArray.
 ','line_number':716,'multiline':True]['text':' A representation of a collection's documents. Here we use a BSONArray so metadata like a','line_number':752,'multiline':False]['text':' RecordId can be stored alongside of the main document payload. The format of the data in','line_number':753,'multiline':False]['text':' BSONArray is entirely up to a client of this node, but if this node is to be used for','line_number':754,'multiline':False]['text':' consumption downstream by stage builder implementations it must conform to the format','line_number':755,'multiline':False]['text':' expected by those stage builders. That expected contract depends on the hasRecordId flag. If','line_number':756,'multiline':False]['text':' the hasRecordId flag is 'false' the BSONArray will have a single element that is a BSONObj','line_number':757,'multiline':False]['text':' representation of a document being produced from this node. If 'hasRecordId' is true, then','line_number':758,'multiline':False]['text':' each BSONArray in docs will carry a RecordId in the zeroth position of the array and a','line_number':759,'multiline':False]['text':' BSONObj in the first position of the array.','line_number':760,'multiline':False]['text':' Indicates whether the scan is mimicking a collection scan or index scan.','line_number':763,'multiline':False]['text':' A flag to indicate the format of the BSONArray document payload in the above vector, docs. If','line_number':766,'multiline':False]['text':' hasRecordId is set to true, then both a RecordId and a BSONObj document are stored in that','line_number':767,'multiline':False]['text':' order for every BSONArray in docs. Otherwise, the RecordId is omitted and the BSONArray will','line_number':768,'multiline':False]['text':' only carry a BSONObj document.','line_number':769,'multiline':False]['text':' Set when 'scanType' is 'kIxscan'.','line_number':772,'multiline':False]['text':' Even if our children are sorted by their diskloc or other fields, we don't maintain','line_number':830,'multiline':False]['text':' any order on the output.','line_number':831,'multiline':False]['text':'*
     * This function checks if the given field has string bounds. This is needed to check if we need
     * to do some special handling in the case of collations.
     ','line_number':911,'multiline':True]['text':'*
     * This function extracts a list of field names from 'indexKeyPattern' whose corresponding index
     * bounds in 'bounds' can contain strings.  This is the case if there are intervals containing
     * String, Object, or Array values.
     ','line_number':923,'multiline':True]['text':' If there's a 'returnKey' projection we add key metadata.','line_number':945,'multiline':False]['text':' The set of paths in the index key pattern which have at least one multikey path component, or','line_number':954,'multiline':False]['text':' empty if the index either is not multikey or does not have path-level multikeyness metadata.','line_number':955,'multiline':False]['text':'','line_number':956,'multiline':False]['text':' The correct set of paths is computed and stored here by computeProperties().','line_number':957,'multiline':False]['text':'*
     * A vector of Interval Evaluation Trees (IETs) with the same ordering as the index key pattern.
     ','line_number':960,'multiline':True]['text':'*
 * MatchNode is used for $match aggregation stages that are pushed down to SBE.
 ','line_number':997,'multiline':True]['text':'*
     * Data from the match node is considered fetched iff the child provides fetched data.
     ','line_number':1010,'multiline':True]['text':'*
 * UnwindNode is used for $unwind aggregation stages that are pushed down to SBE.
 ','line_number':1033,'multiline':True]['text':'*
     * Data from the unwind node is considered fetched iff the child provides fetched data.
     ','line_number':1050,'multiline':True]['text':' Path in the document to the field to unwind.','line_number':1072,'multiline':False]['text':' Iff true, then if the path is null, missing, or an empty array, unwind outputs the document.','line_number':1075,'multiline':False]['text':' Optional output path in which to return the array index unwound to this output doc.','line_number':1078,'multiline':False]['text':' struct UnwindNode','line_number':1080,'multiline':False]['text':'*
 * ReplaceRootNode is used for $replaceRoot aggregation stages that are pushed down to SBE.
 ','line_number':1082,'multiline':True]['text':'*
     * Data from the replaceRoot node is considered fetched iff the child provides fetched data.
     ','line_number':1094,'multiline':True]['text':'*
 * We have a few implementations of the projection functionality. They are chosen by constructing
 * a type derived from this abstract struct. The most general implementation 'ProjectionNodeDefault'
 * is much slower than the fast-path implementations. We only really have all the information
 * available to choose a projection implementation at planning time.
 ','line_number':1119,'multiline':True]['text':'*
     * Data from the projection node is considered fetch iff the child provides fetched data.
     ','line_number':1137,'multiline':True]['text':' If we were to construct a plan where the input to the project stage was a hashed value,','line_number':1145,'multiline':False]['text':' and that field was retained exactly, then we would mistakenly return 'kFullyProvided'.','line_number':1146,'multiline':False]['text':' The important point here is that we are careful to construct plans where we fetch before','line_number':1147,'multiline':False]['text':' projecting if there is hashed data, collation keys, etc. So this situation does not','line_number':1148,'multiline':False]['text':' arise.','line_number':1149,'multiline':False]['text':' Projections destroy the RecordId.  By returning true here, this kind of implies that a','line_number':1155,'multiline':False]['text':' fetch could still be done upstream.','line_number':1156,'multiline':False]['text':'','line_number':1157,'multiline':False]['text':' Perhaps this should be false to not imply that there *is* a RecordId?  Kind of a','line_number':1158,'multiline':False]['text':' corner case.','line_number':1159,'multiline':False]['text':'*
     * Identify projectionImplementation type as a string.
     ','line_number':1167,'multiline':True]['text':' The full query tree. Needed when we have positional operators. Owned in the CanonicalQuery,','line_number':1172,'multiline':False]['text':' not here, so here this is a native pointer, not a std_unique, to avoid having to clone it.','line_number':1173,'multiline':False]['text':'*
 * This is the most general implementation of the projection functionality. It handles every case.
 ','line_number':1179,'multiline':True]['text':'*
 * This is a fast-path for when the projection is fully covered by one index.
 ','line_number':1196,'multiline':True]['text':' This is the key pattern of the index supplying our covered data. We can pre-compute which','line_number':1217,'multiline':False]['text':' fields to include and cache that data for later if we know we only have one index.','line_number':1218,'multiline':False]['text':'*
 * This is a fast-path for when the projection only has inclusions on non-dotted fields.
 ','line_number':1222,'multiline':True]['text':' The user-supplied sort pattern.','line_number':1264,'multiline':False]['text':' Sum of both limit and skip count in the parsed query.','line_number':1298,'multiline':False]['text':' The maximum number of bytes of memory we're willing to use during execution of the sort. If','line_number':1303,'multiline':False]['text':' this limit is exceeded and we're not allowed to spill to disk, the query will fail at','line_number':1304,'multiline':False]['text':' execution time. Otherwise, the data will be spilled to disk.','line_number':1305,'multiline':False]['text':'*
 * Represents sort algorithm that can handle any kind of input data.
 ','line_number':1315,'multiline':True]['text':'*
 * Represents a special, optimized sort algorithm that is only correct if:
 *  - The input data is fetched.
 *  - The input data has no metadata attached.
 *  - The record id can be discarded.
 ','line_number':1332,'multiline':True]['text':' Not owned here','line_number':1434,'multiline':False]['text':' Not owned here','line_number':1466,'multiline':False]['text':'','line_number':1475,'multiline':False]['text':' Internal nodes used to provide functionality','line_number':1476,'multiline':False]['text':'','line_number':1477,'multiline':False]['text':'*
 * If we're answering a query on a sharded cluster, docs must be checked against the shard key
 * to ensure that we don't return data that shouldn't be there.  This must be done prior to
 * projection, and in fact should be done as early as possible to avoid propagating stale data
 * through the pipeline.
 ','line_number':1479,'multiline':True]['text':'*
 * Distinct queries only want one value for a given field.  We run an index scan but
 * *always* skip over the current key to the next key.
 ','line_number':1510,'multiline':True]['text':' This stage is created "on top" of normal planning and as such the properties','line_number':1524,'multiline':False]['text':' below don't really matter.','line_number':1525,'multiline':False]['text':' The distinct scan can return collation keys, but we can still consider the field fully','line_number':1530,'multiline':False]['text':' provided. This is because the logic around when the index bounds might incorporate','line_number':1531,'multiline':False]['text':' collation keys does not rely on 'getFieldAvailability()'. As a future improvement, we','line_number':1532,'multiline':False]['text':' could look into using 'getFieldAvailabilty()' for collation covering analysis.','line_number':1533,'multiline':False]['text':' We are distinct-ing over the 'fieldNo'-th field of 'index.keyPattern'.','line_number':1550,'multiline':False]['text':'*
 * Some count queries reduce to counting how many keys are between two entries in a Btree.
 ','line_number':1555,'multiline':True]['text':'*
     * A vector of Interval Evaluation Trees (IETs) with the same ordering as the index key pattern.
     ','line_number':1588,'multiline':True]['text':' Text's return is LOC_AND_OBJ so it's fetched and has all fields.','line_number':1639,'multiline':False]['text':' The number of fields in the prefix of the text index. For example, if the key pattern is','line_number':1655,'multiline':False]['text':'','line_number':1656,'multiline':False]['text':'   { a: 1, b: 1, _fts: "text", _ftsx: 1, c: 1 }','line_number':1657,'multiline':False]['text':'','line_number':1658,'multiline':False]['text':' then the number of prefix fields is 2, because of "a" and "b".','line_number':1659,'multiline':False]['text':' "Prefix" fields of a text index can handle equality predicates.  We group them with the','line_number':1662,'multiline':False]['text':' text node while creating the text leaf node and convert them into a BSONObj index prefix','line_number':1663,'multiline':False]['text':' when we finish the text leaf node.','line_number':1664,'multiline':False]['text':' True, if we need to compute text scores.','line_number':1667,'multiline':False]['text':' Use the DepsTracker to extract the fields that the 'groupByExpression' and accumulator','line_number':1682,'multiline':False]['text':' expressions depend on.','line_number':1683,'multiline':False]['text':' All fields are available, but none of them map to original document.','line_number':1706,'multiline':False]['text':' Carries the fields this GroupNode depends on. Namely, 'requiredFields' contains the union of','line_number':1727,'multiline':False]['text':' the fields in the 'groupByExpressions' and the fields in the input Expressions of the','line_number':1728,'multiline':False]['text':' 'accumulators'.','line_number':1729,'multiline':False]['text':' If set to true, generated SBE plan will produce result as BSON object. If false,','line_number':1734,'multiline':False]['text':' 'sbe::Object' is produced instead.','line_number':1735,'multiline':False]['text':'*
 * Represents a lookup from a foreign collection by equality match on foreign and local fields.
 * Performs left outer join between the child (local) collection and other (foreign) collection.
 * Each local document will have a field with array of all matched documents in foreign collection.
 * Matching is performed using equality operator on specified fields in local and foreign documents.
 *
 * Only direct lookup from foreign collection is supported. Foreign collection is represented
 * by direct name rather than QuerySolutionNode.
 ','line_number':1739,'multiline':True]['text':'*
     * Enum describing the possible algorithms that can be used to execute a pushed down $lookup.
     ','line_number':1749,'multiline':True]['text':' Execute the join by storing entries from the foreign collection in a hash table.','line_number':1753,'multiline':False]['text':' Execute the join by doing an index lookup in the foreign collection.','line_number':1756,'multiline':False]['text':' Execute the join by iterating over the foreign collection for each local key.','line_number':1759,'multiline':False]['text':' Create a plan for a non existent foreign collection.','line_number':1762,'multiline':False]['text':' This field is available, but isn't mapped to the original document.','line_number':1810,'multiline':False]['text':' Right now, we conservatively return kEmptySet. A future optimization could theoretically','line_number':1822,'multiline':False]['text':' take the "joinField" into account when deciding whether this provides a sort or not.','line_number':1823,'multiline':False]['text':'*
     * The foreign (inner) collection namespace string.
     ','line_number':1829,'multiline':True]['text':'*
     * The local (outer) join field.
     ','line_number':1834,'multiline':True]['text':'*
     * The foreign (inner) join field.
     ','line_number':1839,'multiline':True]['text':'*
     * The "as" field for the output field that will be added to local (outer) document.
     * The field stores the array of all matched foreign (inner) documents.
     * If the field already exists in the local (outer) document, the field will be overwritten.
     ','line_number':1844,'multiline':True]['text':'*
     * The algorithm that will be used to execute this 'EqLookupNode'. Defaults to nested loop join
     * as it's applicable independent of collection sizes or the availability of indexes.
     ','line_number':1851,'multiline':True]['text':'*
     * The index to be used if we can answer the join predicate with an index on the foreign
     * collection. Set to 'boost::none' by default and if a non-indexed strategy is chosen.
     ','line_number':1857,'multiline':True]['text':'*
     * If set to true, generated SBE plan will produce result as BSON object. If false,
     * 'sbe::Object' is produced instead.
     ','line_number':1863,'multiline':True]['text':'*
     * True for $searchMeta, False for $search query.
     ','line_number':1937,'multiline':True]['text':'*
     * This will populate the docsRequested field of the cursorOptions document sent as part of the
     * command to mongot in the case where the query has an extractable limit that can guide the
     * number of documents that mongot returns to mongod.
     ','line_number':1944,'multiline':True]['text':'*
 * Represents a node to unpack time-series buckets into measurements. Currently we only support
 * unpacking buckets with a statically known set of fields in SBE.
 ','line_number':1956,'multiline':True]['text':' The 'bucketSpec' has a statically known set of fields which include the computed meta','line_number':1990,'multiline':False]['text':' projections and so, are fully provided.','line_number':1991,'multiline':False]['text':' TODO SERVER-79700: Return the sort set which should be translated from the child's sort set.','line_number':2002,'multiline':False]['text':' namespace mongo','line_number':2084,'multiline':False]