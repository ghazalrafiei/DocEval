['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':40,'multiline':False]['text':' namespace log_detail','line_number':141,'multiline':False]['text':'*
 * Attempts to apply the index tags from 'branchCacheData' to 'orChild'. If the index assignments
 * cannot be applied, return the error from the process. Otherwise the tags are applied and success
 * is returned.
 ','line_number':144,'multiline':True]['text':' We want a well-formed *indexed* solution.','line_number':152,'multiline':False]['text':' For example, we don't cache things for 2d indices.','line_number':154,'multiline':False]['text':' Add the index assignments to our original query.','line_number':166,'multiline':False]['text':'*
 * Returns whether the hint matches the given index. When hinting by index name, 'hintObj' takes the
 * shape of {$hint: <indexName>}. When hinting by key pattern, 'hintObj' represents the actual key
 * pattern (eg: {_id: 1}).
 ','line_number':179,'multiline':True]['text':' An index name is provided by the hint.','line_number':191,'multiline':False]['text':' An index spec is provided by the hint.','line_number':195,'multiline':False]['text':'*
 * Returns whether the hintedIndex matches the cluster key.
 ','line_number':199,'multiline':True]['text':' The collection isn't clustered.','line_number':205,'multiline':False]['text':' The clusteredIndex's name should always be filled in with a default value when not','line_number':211,'multiline':False]['text':' specified upon creation.','line_number':212,'multiline':False]['text':'*
 * Returns whether the hintedIndex matches the columnstore index.
 ','line_number':220,'multiline':True]['text':'*
 * Returns the dependencies for the CanonicalQuery, split by those needed to answer the filter,
 * and those needed for "everything else", e.g. project, sort and shard filter.
 ','line_number':228,'multiline':True]['text':' filter ','line_number':232,'multiline':True]['text':' other ','line_number':232,'multiline':True]['text':' If this is a count, we won't have required projections, but may still need to output the','line_number':247,'multiline':False]['text':' shard filter.','line_number':248,'multiline':False]['text':' There's no known way a sort would depend on the whole document, and we already verified','line_number':258,'multiline':False]['text':' that the projection doesn't depend on the whole document.','line_number':259,'multiline':False]['text':'*
 * Determines whether a column scan should be used given information about the query and collection.
 * We are specifically interested in whether a column scan is likely to perform better than a
 * collection scan. Column scan should be used if the following conditions are met:
 *
 * (|referenced fields| < maxNumFields) &&
 * (|filtered fields| >= minNumColumnFilters ||
 *     uncompressedCollectionSize >= minCollectionSize ||
 *     avgDocSize >= minAvgDocSize)
 *
 * In words: we will use column scan if the query is reading fewer than the max number of fields,
 * and at least one of the following is true: we are pushing down filters on a large number of
 * fields, the collection does not fit in memory, or the average document size is large.
 *
 * All of the thresholds listed (referenced fields, column filters, collection size, and average
 * document size) can be adjusted via query knobs.
 ','line_number':264,'multiline':True]['text':' Check that we are reading fewer than the max number of fields allowed for column scan.','line_number':284,'multiline':False]['text':' We have enough column filters to make column scan worth it, regardless of the','line_number':297,'multiline':False]['text':' collection/document size.','line_number':298,'multiline':False]['text':' Check if the entire uncompressed collection is greater than our min collection size','line_number':305,'multiline':False]['text':' threshold, or if it can fit in memory if the min size is unspecified.','line_number':306,'multiline':False]['text':' If there is no threshold specified (== -1), use available memory size.','line_number':309,'multiline':False]['text':' The collection is larger than memory/the configured threshold - use column scan.','line_number':314,'multiline':False]['text':' If we got here, the query/collection doesn't meet any of our other thresholds. Check if the','line_number':318,'multiline':False]['text':' average document size is greater than our threshold for using column scan.','line_number':319,'multiline':False]['text':' If the number of fields is equal to the number of fields preserved, then the projection','line_number':383,'multiline':False]['text':' covers the query.','line_number':384,'multiline':False]['text':'*
 * A helper function that returns the number of column store indexes that cover the query,
 * as well as an arbitary, valid column store index for the column scan.
 ','line_number':388,'multiline':True]['text':'*
 * Attempts to build a plan using a column store index. Returns a non-OK status if it can't build
 * one with the code and message indicating the problem - or a QuerySolution if it can.
 ','line_number':405,'multiline':True]['text':' TODO SERVER-66284 Would like to enable a plan when hinted, even if we need the whole','line_number':422,'multiline':False]['text':' document. Something like COLUMN_SCAN -> FETCH.','line_number':423,'multiline':False]['text':' The query needs a path and a parent or ancestor path. For example, the query needs to','line_number':428,'multiline':False]['text':' access both "a" and "a.b". This is a heuristic, but generally we would not expect this to','line_number':429,'multiline':False]['text':' benefit from the column store index. This kind of dependency pattern is probably an','line_number':430,'multiline':False]['text':' indication that the parent/ancestor path will be an object or array of objects, which','line_number':431,'multiline':False]['text':' will require us to fall back to the rowstore and remove any benefit of using the index.','line_number':432,'multiline':False]['text':' Ensures that hinted index is eligible for the column scan.','line_number':444,'multiline':False]['text':' Check that union of the dependency fields can be successfully projected by at least one','line_number':450,'multiline':False]['text':' column store index.','line_number':451,'multiline':False]['text':' If not columnar index can support the projection, we will not use column scan.','line_number':455,'multiline':False]['text':' We have a hint, or collection stats and dependencies that indicate a column scan is','line_number':480,'multiline':False]['text':' likely better than a collection scan. Build it and return it.','line_number':481,'multiline':False]['text':' Since the residual predicate must be applied after the column scan, we need to include','line_number':483,'multiline':False]['text':' the dependencies among the output fields.','line_number':484,'multiline':False]['text':' We assume we are subplanning the children of an OR expression and therefore should expect one','line_number':523,'multiline':False]['text':' child per node. However, we have to recur down to the child leaf node to check if we can','line_number':524,'multiline':False]['text':' perform a clustered collection scan.','line_number':525,'multiline':False]['text':' Find the leaf node of the solution node.','line_number':528,'multiline':False]['text':'*
 * Creates a query solution node for $search plans that are being pushed down into SBE.
 ','line_number':539,'multiline':True]['text':' (Ignore FCV check): FCV checking is unnecessary because SBE execution is local to a given','line_number':554,'multiline':False]['text':' node.','line_number':555,'multiline':False]['text':' Apply shard filter if needed.','line_number':569,'multiline':False]['text':' namespace','line_number':575,'multiline':False]['text':' Copied verbatim from db/index.h','line_number':581,'multiline':False]['text':'_id index must have form exactly {_id : 1} or {_id : -1}.','line_number':585,'multiline':False]['text':' Allows an index of form {_id : "hashed"} to exist but','line_number':586,'multiline':False]['text':' do not consider it to be the primary _id index','line_number':587,'multiline':False]['text':' The expression (x & (x - 1)) yields x with the lowest bit cleared.  Then the','line_number':611,'multiline':False]['text':' exclusive-or of the result with the original yields the lowest bit by itself.','line_number':612,'multiline':False]['text':' Every element up to this point has matched so the KP matches','line_number':676,'multiline':False]['text':' If only one iterator is done, it's not a match.','line_number':681,'multiline':False]['text':' Field names must match and be in the same order.','line_number':686,'multiline':False]['text':' If the index collation doesn't match the query collation, and the min/max obj has a','line_number':693,'multiline':False]['text':' boundary value that needs to respect the collation, then the index is not compatible.','line_number':694,'multiline':False]['text':' Wildcard indexes should have been filtered out by the time this is called.','line_number':704,'multiline':False]['text':'*
 * "Finishes" the min object for the $min query option by filling in an empty object with
 * MinKey/MaxKey and stripping field names. Also translates keys according to the collation, if
 * necessary.
 *
 * In the case that 'minObj' is empty, we "finish" it by filling in either MinKey or MaxKey
 * instead. Choosing whether to use MinKey or MaxKey is done by comparing against 'maxObj'.
 * For instance, suppose 'minObj' is empty, 'maxObj' is { a: 3 }, and the key pattern is
 * { a: -1 }. According to the key pattern ordering, { a: 3 } < MinKey. This means that the
 * proper resulting bounds are
 *
 *   start: { '': MaxKey }, end: { '': 3 }
 *
 * as opposed to
 *
 *   start: { '': MinKey }, end: { '': 3 }
 *
 * Suppose instead that the key pattern is { a: 1 }, with the same 'minObj' and 'maxObj'
 * (that is, an empty object and { a: 3 } respectively). In this case, { a: 3 } > MinKey,
 * which means that we use range [{'': MinKey}, {'': 3}]. The proper 'minObj' in this case is
 * MinKey, whereas in the previous example it was MaxKey.
 *
 * If 'minObj' is non-empty, then all we do is strip its field names (because index keys always
 * have empty field names).
 ','line_number':720,'multiline':True]['text':'*
 * "Finishes" the max object for the $max query option by filling in an empty object with
 * MinKey/MaxKey and stripping field names. Also translates keys according to the collation, if
 * necessary.
 *
 * See comment for finishMinObj() for why we need both 'minObj' and 'maxObj'.
 ','line_number':763,'multiline':True]['text':'*
 * Determine the direction of the scan needed for the query. Defaults to 1 unless this is a
 * clustered collection and we have a sort that can be provided by the clustered index.
 ','line_number':788,'multiline':True]['text':' Return EOF solution for trivially false expressions.','line_number':807,'multiline':False]['text':' Unless the query is against Oplog (change streams) or change collections (serverless','line_number':808,'multiline':False]['text':' change streams) because in such cases we still need the scan to happen to advance the','line_number':809,'multiline':False]['text':' visibility timestamp and resume token.','line_number':810,'multiline':False]['text':' Make sure not to cache solutions which use '2d' indices.','line_number':856,'multiline':False]['text':' A 2d index that doesn't wrap on one query may wrap on another, so we have to','line_number':857,'multiline':False]['text':' check that the index is OK with the predicate. The only thing we have to do','line_number':858,'multiline':False]['text':' this for is 2d.  For now it's easier to move ahead if we don't cache 2d.','line_number':859,'multiline':False]['text':'','line_number':860,'multiline':False]['text':' TODO: revisit with a post-cached-index-assignment compatibility check','line_number':861,'multiline':False]['text':' static','line_number':910,'multiline':False]['text':' We're tagging the tree here, so it shouldn't have','line_number':921,'multiline':False]['text':' any tags hanging off yet.','line_number':922,'multiline':False]['text':' Continue the depth-first tree traversal.','line_number':933,'multiline':False]['text':' A query not suitable for caching should not have made its way into the cache.','line_number':984,'multiline':False]['text':' Look up winning solution in cached solution's array.','line_number':987,'multiline':False]['text':' The solution can be constructed by a scan over the entire index.','line_number':991,'multiline':False]['text':' The cached solution is a collection scan. We don't cache collscans','line_number':1001,'multiline':False]['text':' with tailable==true, hence the false below.','line_number':1002,'multiline':False]['text':' SolutionCacheData::USE_TAGS_SOLN == cacheData->solnType','line_number':1012,'multiline':False]['text':' If we're here then this is neither the whole index scan or collection scan','line_number':1013,'multiline':False]['text':' cases, and we proceed by using the PlanCacheIndexTree to tag the query tree.','line_number':1014,'multiline':False]['text':' Create a copy of the expression tree.  We use cachedSoln to annotate this with indices.','line_number':1016,'multiline':False]['text':' We will not cache queries with 'hint'.','line_number':1027,'multiline':False]['text':' indexHinted ','line_number':1029,'multiline':True]['text':' Map from index name to index number.','line_number':1031,'multiline':False]['text':' Be sure the key was not already in the map.','line_number':1036,'multiline':False]['text':' The MatchExpression tree is in canonical order. We must order the nodes for access','line_number':1050,'multiline':False]['text':' planning.','line_number':1051,'multiline':False]['text':' Use the cached index assignments to build solnRoot.','line_number':1056,'multiline':False]['text':'*
 * For some reason this type is hard to construct inline and keep the compiler happy. Convenience
 * helper to do so since we do it a couple times.
 ','line_number':1080,'multiline':True]['text':' The hint can be {$natural: +/-1}. If this happens, output a collscan. We expect any','line_number':1112,'multiline':False]['text':' $natural sort to have been normalized to a $natural hint upstream. Additionally, if','line_number':1113,'multiline':False]['text':' the hint matches the collection's cluster key, we also output a collscan utilizing','line_number':1114,'multiline':False]['text':' the cluster key.','line_number':1115,'multiline':False]['text':' Perform validation specific to $natural.','line_number':1117,'multiline':False]['text':' Perform validation specific to hinting on a cluster key.','line_number':1133,'multiline':False]['text':' Check if the query collator is compatible with the collection collator for the','line_number':1139,'multiline':False]['text':' provided min and max values.','line_number':1140,'multiline':False]['text':' If the query requests a tailable cursor, the only solution is a collscan + filter with','line_number':1186,'multiline':False]['text':' tailable set on the collscan.','line_number':1187,'multiline':False]['text':' Hints require us to only consider the hinted index. If index filters in the query settings','line_number':1197,'multiline':False]['text':' were used to override the allowed indices for planning, we should not use the hinted index','line_number':1198,'multiline':False]['text':' requested in the query.','line_number':1199,'multiline':False]['text':' If we have a hint, check if it matches any "special" index before proceeding.','line_number':1208,'multiline':False]['text':' Hint matches - either build the plan or fail.','line_number':1217,'multiline':False]['text':' Either the list of indices passed in by the caller, or the list of indices filtered','line_number':1228,'multiline':False]['text':' according to the hint. This list is later expanded in order to allow the planner to','line_number':1229,'multiline':False]['text':' handle wildcard indexes.','line_number':1230,'multiline':False]['text':' Will hold a copy of the index entry chosen by the hint.','line_number':1233,'multiline':False]['text':' Figure out what fields we care about.','line_number':1255,'multiline':False]['text':' Relevant indices should only ever exceed a size of 1 when there is a hint in the case','line_number':1271,'multiline':False]['text':' of','line_number':1272,'multiline':False]['text':' $** index.','line_number':1273,'multiline':False]['text':' Deal with the .min() and .max() query options.  If either exist we can only use an index','line_number':1281,'multiline':False]['text':' that matches the object inside.','line_number':1282,'multiline':False]['text':' Be sure that index expansion didn't do anything. As wildcard indexes are banned for','line_number':1301,'multiline':False]['text':' min/max, we expect to find a single hinted index entry.','line_number':1302,'multiline':False]['text':' In order to be fully compatible, the min has to be less than the max according to the','line_number':1306,'multiline':False]['text':' index key pattern ordering. The first step in verifying this is "finish" the min and','line_number':1307,'multiline':False]['text':' max by replacing empty objects and stripping field names.','line_number':1308,'multiline':False]['text':' Now we have the final min and max. This index is only relevant for the min/max query','line_number':1312,'multiline':False]['text':' if min < max.','line_number':1313,'multiline':False]['text':' Figure out how useful each index is to each predicate.','line_number':1340,'multiline':False]['text':' Unless we have GEO_NEAR, TEXT, or a projection, we may be able to apply an optimization','line_number':1346,'multiline':False]['text':' in which we strip unnecessary index assignments.','line_number':1347,'multiline':False]['text':'','line_number':1348,'multiline':False]['text':' Disallowed with projection because assignment to a non-unique index can allow the plan','line_number':1349,'multiline':False]['text':' to be covered.','line_number':1350,'multiline':False]['text':'','line_number':1351,'multiline':False]['text':' TEXT and GEO_NEAR are special because they require the use of a text/geo index in order','line_number':1352,'multiline':False]['text':' to be evaluated correctly. Stripping these "mandatory assignments" is therefore invalid.','line_number':1353,'multiline':False]['text':' query.getPrimaryMatchExpression() is now annotated with RelevantTag(s).','line_number':1362,'multiline':False]['text':' If there is a GEO_NEAR it must have an index it can use directly.','line_number':1368,'multiline':False]['text':' No index for GEO_NEAR?  No query.','line_number':1372,'multiline':False]['text':' Don't leave tags on query tree.','line_number':1376,'multiline':False]['text':' Likewise, if there is a TEXT it must have an index it can use directly.','line_number':1388,'multiline':False]['text':' Exactly one text index required for TEXT.  We need to check this explicitly because','line_number':1394,'multiline':False]['text':' the text stage can't be built if no text index exists or there is an ambiguity as to','line_number':1395,'multiline':False]['text':' which one to use.','line_number':1396,'multiline':False]['text':' Don't leave tags on query tree.','line_number':1404,'multiline':False]['text':' Error if the text node is tagged with zero indices.','line_number':1410,'multiline':False]['text':' Don't leave tags on query tree.','line_number':1412,'multiline':False]['text':' At this point, we know that there is only one text index and that the TEXT node is','line_number':1419,'multiline':False]['text':' assigned to it.','line_number':1420,'multiline':False]['text':' If we have any relevant indices, we try to create indexed plans.','line_number':1431,'multiline':False]['text':' The enumerator spits out trees tagged with IndexTag(s).','line_number':1433,'multiline':False]['text':' Store the plan cache index tree before calling prepareForAccessingPlanning(), so','line_number':1452,'multiline':False]['text':' that the PlanCacheIndexTree has the same sort as the MatchExpression used to','line_number':1453,'multiline':False]['text':' generate the plan cache key.','line_number':1454,'multiline':False]['text':' We have already cached the tree in canonical order, so now we can order the nodes','line_number':1467,'multiline':False]['text':' for access planning.','line_number':1468,'multiline':False]['text':' This can fail if enumeration makes a mistake.','line_number':1471,'multiline':False]['text':' Don't leave tags on query tree.','line_number':1496,'multiline':False]['text':' Produce legible error message for failed OR planning with a TEXT child.','line_number':1501,'multiline':False]['text':' TODO: support collection scan for non-TEXT children of OR.','line_number':1502,'multiline':False]['text':' An index was hinted. If there are any solutions, they use the hinted index.  If not, we','line_number':1515,'multiline':False]['text':' scan the entire index to provide results and output that as our plan.  This is the','line_number':1516,'multiline':False]['text':' desired behavior when an index is hinted that is not relevant to the query. In the case','line_number':1517,'multiline':False]['text':' that','line_number':1518,'multiline':False]['text':' $** index is hinted, we do not want this behavior.','line_number':1519,'multiline':False]['text':' Return hinted index solution if found.','line_number':1530,'multiline':False]['text':' If a sort order is requested, there may be an index that provides it, even if that','line_number':1539,'multiline':False]['text':' index is not over any predicates in the query.','line_number':1540,'multiline':False]['text':'','line_number':1541,'multiline':False]['text':' See if we have a sort provided from an index already.','line_number':1546,'multiline':False]['text':' This is implied by the presence of a non-blocking solution.','line_number':1547,'multiline':False]['text':' Only a regular index or the non-hashed prefix of a compound hashed index can','line_number':1560,'multiline':False]['text':' be used to provide a sort. In addition, the index needs to be a non-sparse','line_number':1561,'multiline':False]['text':' index.','line_number':1562,'multiline':False]['text':'','line_number':1563,'multiline':False]['text':' TODO: Sparse indexes can't normally provide a sort, because non-indexed','line_number':1564,'multiline':False]['text':' documents could potentially be missing from the result set.  However, if the','line_number':1565,'multiline':False]['text':' query predicate can be used to guarantee that all documents to be returned','line_number':1566,'multiline':False]['text':' are indexed, then the index should be able to provide the sort.','line_number':1567,'multiline':False]['text':'','line_number':1568,'multiline':False]['text':' For example:','line_number':1569,'multiline':False]['text':' - Sparse index {a: 1, b: 1} should be able to provide a sort for','line_number':1570,'multiline':False]['text':'   find({b: 1}).sort({a: 1}).  SERVER-13908.','line_number':1571,'multiline':False]['text':' - Index {a: 1, b: "2dsphere"} (which is "geo-sparse", if','line_number':1572,'multiline':False]['text':'   2dsphereIndexVersion=2) should be able to provide a sort for','line_number':1573,'multiline':False]['text':'   find({b: GEO}).sort({a:1}).  SERVER-10801.','line_number':1574,'multiline':False]['text':' If the index collation differs from the query collation, the index should not','line_number':1582,'multiline':False]['text':' be used to provide a sort, because strings will be ordered incorrectly.','line_number':1583,'multiline':False]['text':' Partial indexes can only be used to provide a sort only if the query','line_number':1588,'multiline':False]['text':' predicate is compatible.','line_number':1589,'multiline':False]['text':' If a projection exists, there may be an index that allows for a covered plan, even if','line_number':1635,'multiline':False]['text':' none were considered earlier.','line_number':1636,'multiline':False]['text':' Check whether we're eligible to use the columnar index, assuming no other indexes can be','line_number':1668,'multiline':False]['text':' used.','line_number':1669,'multiline':False]['text':' Create a $search QuerySolution if we are performing a $search.','line_number':1680,'multiline':False]['text':' The caller can explicitly ask for a collscan.','line_number':1693,'multiline':False]['text':' No indexed plans?  We must provide a collscan if possible or else we can't run the query.','line_number':1696,'multiline':False]['text':' geoNear and text queries *require* an index.','line_number':1705,'multiline':False]['text':' Also, if a hint is specified it indicates that we MUST use it.','line_number':1706,'multiline':False]['text':' We consider collection scan in the following cases:','line_number':1725,'multiline':False]['text':' 1. collScanRequested - specifically requested by caller.','line_number':1726,'multiline':False]['text':' 2. collScanRequired - there are no other possible plans, so we fallback to full scan.','line_number':1727,'multiline':False]['text':' 3. collscanIsBounded - collection is clustered and clustered index is used.','line_number':1728,'multiline':False]['text':' 4. clusteredScanDirection - collection is clustered and sort, provided by clustered','line_number':1729,'multiline':False]['text':' index, is used','line_number':1730,'multiline':False]['text':' QueryPlanner::plan','line_number':1748,'multiline':False]['text':'*
 * If 'query.cqPipeline()' is non-empty, it contains a prefix of the aggregation pipeline that can
 * be pushed down to SBE. For now, we plan this separately here and attach the agg portion of the
 * plan to the solution(s) via the extendWith() call near the end.
 ','line_number':1750,'multiline':True]['text':' shouldProduceBson ','line_number':1777,'multiline':True]['text':' shouldProduceBson ','line_number':1800,'multiline':True]['text':' 'projectionStage' pushdown pushes both $project and $addFields to SBE, as the latter is','line_number':1805,'multiline':False]['text':' implemented as a variant of the former.','line_number':1806,'multiline':False]['text':' child ','line_number':1816,'multiline':True]['text':' fieldPath ','line_number':1817,'multiline':True]['text':' Parameterize the pushed-down match expression if there is not already a reason not','line_number':1832,'multiline':False]['text':' to.','line_number':1833,'multiline':False]['text':' Avoid plan cache flooding by not fully parameterized plans.','line_number':1845,'multiline':False]['text':' In the $search case, we create the $search query solution node in QueryPlanner::Plan','line_number':1884,'multiline':False]['text':' instead of here. The empty branch here assures that we don't hit the tassert below','line_number':1885,'multiline':False]['text':' and continue in creating the query plan.','line_number':1886,'multiline':False]['text':' QueryPlanner::extendWithAggPipeline','line_number':1926,'multiline':False]['text':' We can get the index tags we need out of the cache.','line_number':1939,'multiline':False]['text':' Check if 'soln' is a CLUSTERED_IXSCAN. This branch won't be tagged, and 'tagStatus'','line_number':1950,'multiline':False]['text':' will return 'NoQueryExecutionPlans'. However, this plan can be executed by the OR','line_number':1951,'multiline':False]['text':' stage.','line_number':1952,'multiline':False]['text':' N solutions, rank them.','line_number':1962,'multiline':False]['text':' Check that we have good cache data. For example, we don't cache things','line_number':1974,'multiline':False]['text':' for 2d indices.','line_number':1975,'multiline':False]['text':' The cached plan might be an indexed solution or a clustered collection scan.','line_number':1983,'multiline':False]['text':' If the cached plan is not a clustered collection scan, add the index assignments to','line_number':1998,'multiline':False]['text':' the original query.','line_number':1999,'multiline':False]['text':' Must do this before using the planner functionality.','line_number':2012,'multiline':False]['text':' Use the cached index assignments to build solnRoot. Takes ownership of '_orExpression'.','line_number':2015,'multiline':False]['text':' Be sure the key was not already in the map.','line_number':2060,'multiline':False]['text':' We need a place to shove the results from planning this branch.','line_number':2066,'multiline':False]['text':' Turn the i-th child into its own query.','line_number':2071,'multiline':False]['text':' Plan the i-th child. We might be able to find a plan for the i-th child in the plan','line_number':2084,'multiline':False]['text':' cache. If there's no cached plan, then we generate and rank plans using the MPS.','line_number':2085,'multiline':False]['text':' Populate branchResult->cachedData if an active cachedData entry exists.','line_number':2087,'multiline':False]['text':' No CachedSolution found. We'll have to plan from scratch.','line_number':2096,'multiline':False]['text':' We don't set NO_TABLE_SCAN because peeking at the cache data will keep us from','line_number':2099,'multiline':False]['text':' considering any plan that's a collscan.','line_number':2100,'multiline':False]['text':' namespace mongo','line_number':2118,'multiline':False]