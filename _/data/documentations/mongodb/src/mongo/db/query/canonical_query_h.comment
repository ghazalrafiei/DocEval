['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' A type that encodes the notion of query shape suitable for use with the plan cache. Encodes','line_number':84,'multiline':False]['text':' the query's match, projection, sort, etc. potentially with some constants removed or replaced','line_number':85,'multiline':False]['text':' with parameter markers.','line_number':86,'multiline':False]['text':' A second encoding of query shape similar to 'QueryShapeString' above, except designed to work','line_number':89,'multiline':False]['text':' with index filters and the 'planCacheClear' command. A caller can encode a query into an','line_number':90,'multiline':False]['text':' 'PlanCacheCommandKey' in order to look for for matching index filters that should apply to','line_number':91,'multiline':False]['text':' the query, or plan cache entries to which the 'planCacheClear' command should be applied.','line_number':92,'multiline':False]['text':'*
     * Deprecated factory method for creating CanonicalQuery.
     ','line_number':97,'multiline':True]['text':'*
     * Used for creating sub-queries from an existing CanonicalQuery, only for use by
     * 'makeForSubplanner()'.
     ','line_number':102,'multiline':True]['text':'*
     * Construct a 'CanonicalQuery' for a subquery of the given query. This function should only be
     * invoked by the subplanner. 'baseQuery' must contain a MatchExpression with rooted $or. This
     * function returns a 'CanonicalQuery' housing a copy of the i'th child of the root.
     ','line_number':108,'multiline':True]['text':'*
     * Returns true if "query" describes an exact-match query on _id.
     ','line_number':116,'multiline':True]['text':'*
     * Perform validation checks on the normalized 'root' which could not be checked before
     * normalization - those should happen in parsed_find_command::isValid().
     ','line_number':121,'multiline':True]['text':'','line_number':132,'multiline':False]['text':' Accessors for the query','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':'*
     * Returns the projection, or nullptr if none.
     ','line_number':145,'multiline':True]['text':'*
     * Returns a bitset indicating what metadata has been requested in the query.
     ','line_number':168,'multiline':True]['text':'*
     * Allows callers to request metadata in addition to that needed as part of the query.
     ','line_number':175,'multiline':True]['text':'*
     * Compute the "shape" of this query by encoding the match, projection and sort, and stripping
     * out the appropriate values. Note that different types of PlanCache use different encoding
     * approaches.
     ','line_number':182,'multiline':True]['text':'*
     * Similar to 'encodeKey()' above, but intended for use with plan cache commands rather than
     * the plan cache itself.
     ','line_number':189,'multiline':True]['text':'*
     * Sets this CanonicalQuery's collator, and sets the collator on this CanonicalQuery's match
     * expression tree.
     *
     * This setter can be used to override the collator that was created from the query request
     * during CanonicalQuery construction.
     ','line_number':195,'multiline':True]['text':' Debugging','line_number':204,'multiline':False]['text':'*
     * Returns true if the query is a count-like query, i.e. has no dependencies on inputs (see
     * DepsTracker::hasNoRequirements()). These queries can be served without accessing the source
     * documents (e.g. {$group: {_id: null, c: {$min: 42}}}) in which case we might be able to avoid
     * scanning the collection and instead use COUNT_SCAN or other optimizations.
     *
     * Note that this applies to the find/non-pipeline portion of the query. If the count-like group
     * is pushed down, later execution stages cannot be treated like a count. In other words, a
     * query with a pushed-down group may be considered a count at the data access layer but not
     * above the canonical query.
     ','line_number':297,'multiline':True]['text':'*
     * Called to indicate the query execution plan should not be cached for SBE. See comments on the
     * '_isUncacheableSbe' member for more details.
     ','line_number':312,'multiline':True]['text':'*
     * Check if the query execution plan should not be cached for SBE. See comments on the
     * '_isUncacheableSbe' member for more details.
     ','line_number':320,'multiline':True]['text':' Tests whether a 'matchExpr' from this query should be parameterized for the SBE plan cache.','line_number':328,'multiline':False]['text':' There is no reason to do so if the execution plan will not be cached.','line_number':329,'multiline':False]['text':'*
     * Add parameters for match expressions that were pushed down via '_cqPipeline'.
     ','line_number':332,'multiline':True]['text':' Return true if the cqPipeline starts with $search or $searchMeta.','line_number':344,'multiline':False]['text':' The match expression at the base of the query tree.','line_number':361,'multiline':False]['text':' A query can include a post-processing pipeline here. Logically it is applied after all the','line_number':368,'multiline':False]['text':' other operations (filter, sort, project, skip, limit).','line_number':369,'multiline':False]['text':' True iff '_cqPipeline' contains all aggregation pipeline stages in the query. When','line_number':372,'multiline':False]['text':' '_containsEntirePipeline' is false, the output of '_cqPipeline' may need to be processed by','line_number':373,'multiline':False]['text':' further 'DocumentSource' stages.','line_number':374,'multiline':False]['text':' Keeps track of what metadata has been explicitly requested.','line_number':377,'multiline':False]['text':' Determines whether the classic engine must be used.','line_number':382,'multiline':False]['text':' True if this query can be executed by the SBE.','line_number':385,'multiline':False]['text':' If true, indicates that we should use CQF if this query is eligible (see the','line_number':388,'multiline':False]['text':' isEligibleForBonsai() function for eligiblitly requirements).','line_number':389,'multiline':False]['text':' If false, indicates that we shouldn't use CQF even if this query is eligible. This is used to','line_number':390,'multiline':False]['text':' prevent hybrid classic and CQF plans in the following cases:','line_number':391,'multiline':False]['text':' 1. A pipeline that is not eligible for CQF but has an eligible prefix pushed down to find.','line_number':392,'multiline':False]['text':' 2. A subpipeline pushed down to find as part of a $lookup or $graphLookup.','line_number':393,'multiline':False]['text':' The default value of false ensures that only codepaths (find command) which opt-in are able','line_number':394,'multiline':False]['text':' to use CQF.','line_number':395,'multiline':False]['text':' True if this query must produce a RecordId output in addition to the BSON objects that','line_number':398,'multiline':False]['text':' constitute the result set of the query. Any generated query solution must not discard record','line_number':399,'multiline':False]['text':' ids, even if the optimizer detects that they are not going to be consumed downstream.','line_number':400,'multiline':False]['text':' Tells whether plan caching is disabled.','line_number':403,'multiline':False]['text':' A map from assigned InputParamId's to parameterised MatchExpression's.','line_number':406,'multiline':False]['text':' This limits the number of MatchExpression parameters we create for the CanonicalQuery before','line_number':409,'multiline':False]['text':' stopping. (We actually stop at this + 1.) A value of boost::none means unlimited.','line_number':410,'multiline':False]['text':' "True" for queries that after doing a scan of an index can produce an empty document and','line_number':413,'multiline':False]['text':' still be correct. For example, this applies to queries like [{$match: {x: 42}}, {$count:','line_number':414,'multiline':False]['text':' "c"}] in presence of index on "x". The stage that follows the index scan doesn't have to be','line_number':415,'multiline':False]['text':' $count but it must have no dependencies on the fields from the prior stages. Note, that','line_number':416,'multiline':False]['text':' [{$match: {x: 42}}, {$group: {_id: "$y"}}, {$count: "c"}]] is _not_ "count like" because','line_number':417,'multiline':False]['text':' the first $group stage needs to access field "y" and this access cannot be incorporated into','line_number':418,'multiline':False]['text':' the index scan.','line_number':419,'multiline':False]['text':' If true, indicates that we should not cache this plan in the SBE plan cache. This gets set to','line_number':422,'multiline':False]['text':' true if a MatchExpression was not parameterized because it contains a large number of','line_number':423,'multiline':False]['text':' predicates (usally > 512). This flag can be reused for additional do-not-cache conditions in','line_number':424,'multiline':False]['text':' the future.','line_number':425,'multiline':False]['text':' namespace mongo','line_number':431,'multiline':False]