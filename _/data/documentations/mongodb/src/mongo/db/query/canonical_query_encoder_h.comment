['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Delimiters for canonical query portion of cache key encoding.','line_number':40,'multiline':False]['text':' A generic delimiter to separate encoded portions of the plan cache key. For example, used to','line_number':47,'multiline':False]['text':' separate the encoding of the collection, project, sort, flags, and pipeline sections. The','line_number':48,'multiline':False]['text':' delimiter must be included unconditionally even if the corresponding section of the encoded key','line_number':49,'multiline':False]['text':' will be empty.','line_number':50,'multiline':False]['text':' These special bytes are used in the encoding of auto-parameterized match expressions in the SBE','line_number':53,'multiline':False]['text':' plan cache key.','line_number':54,'multiline':False]['text':' Precedes the id number of a parameter marker.','line_number':56,'multiline':False]['text':' Precedes the encoding of a constant when that constant has not been auto-paramterized. The','line_number':58,'multiline':False]['text':' constant is typically encoded as a BSON type byte followed by a BSON value (without the','line_number':59,'multiline':False]['text':' BSONElement's field name).','line_number':60,'multiline':False]['text':' Precedes a byte which encodes the bounds tightness associated with a predicate. The structure of','line_number':62,'multiline':False]['text':' the plan (i.e. presence of filters) is affected by bounds tightness. Therefore, if different','line_number':63,'multiline':False]['text':' parameter values can result in different tightnesses, this must be explicitly encoded into the','line_number':64,'multiline':False]['text':' plan cache key.','line_number':65,'multiline':False]['text':' Delimiters for the discriminator portion of the cache key encoding.','line_number':68,'multiline':False]['text':'*
 * Returns true if the query predicate involves a negation of an EQ, LTE, or GTE comparison to
 * 'null'.
 ','line_number':74,'multiline':True]['text':'*
 * Encode the given CanonicalQuery into a string representation which represents the shape of the
 * query specifically for the classic plan cache. This is done by encoding the match, projection and
 * sort and stripping the values from the match. Two queries with the same shape may not necessarily
 * be able to use the same plan, so the plan cache has to add information to discriminate between
 * queries with the same shape.
 ','line_number':82,'multiline':True]['text':'*
 * Encode the given CanonicalQuery into a string representation which represents the shape of the
 * query for SBE plans. This is done by encoding the match, projection, sort and the FindCommand.
 * Two queries with the same shape may not necessarily be able to use the same plan, so the
 * plan cache has to add information to discriminate between queries with the same shape.
 ','line_number':91,'multiline':True]['text':'*
 * Encode the given CanonicalQuery into a string representation which represents the shape of the
 * query for matching the query used with plan cache commands (planCacheClear, planCacheClearFilter,
 * planCacheListFilters, and planCacheSetFilter). This is done by encoding the match, projection,
 * sort and user-specified collation.
 ','line_number':99,'multiline':True]['text':'*
 * Returns a hash of the given key (produced from either a QueryShapeString or a PlanCacheKey).
 ','line_number':107,'multiline':True]['text':' namespace canonical_query_encoder','line_number':111,'multiline':False]['text':' namespace mongo','line_number':112,'multiline':False]