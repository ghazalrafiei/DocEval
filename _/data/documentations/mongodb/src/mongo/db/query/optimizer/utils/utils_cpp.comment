['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':39,'multiline':False]['text':' Seek nodes are created with a Limit of 1, so the CE will be 1.','line_number':71,'multiline':False]['text':' Use EvaluationNodes to get the projections needed to perform shard filtering. Note that','line_number':73,'multiline':False]['text':' the appropriate top-level projection is used as the input.','line_number':74,'multiline':False]['text':' The caller ensures that the top level path element of each component of the shard key is','line_number':79,'multiline':False]['text':' pushed down as a projection produced by the PhysicalScan/Seek.','line_number':80,'multiline':False]['text':' If the path is dotted, get the needed information','line_number':83,'multiline':False]['text':' Make the FunctionCall and FilterNode.','line_number':100,'multiline':False]['text':'eqPredsOnly','line_number':139,'multiline':True]['text':'hasProperInterval','line_number':140,'multiline':True]['text':'satisfiedPartialIndexes','line_number':141,'multiline':True]['text':'*
 * Used to track references originating from a set of properties.
 ','line_number':146,'multiline':True]['text':' Propagate collation requirement on rid only to left side.','line_number':193,'multiline':False]['text':' Left and right projections must complement and form prefix and suffix.','line_number':197,'multiline':False]['text':'validSplit','line_number':214,'multiline':True]['text':'*
 * Helper class that builds PartialSchemaRequirements property from an EvalFilter or an EvalPath.
 ','line_number':223,'multiline':True]['text':'*
     * Handle EvalPath and EvalFilter nodes.
     ','line_number':233,'multiline':True]['text':' In a (Eval <path> <input>) expression, we expect the <path> to result only in a path and','line_number':237,'multiline':False]['text':' intervals: no input binding or output binding. The input binding comes from <input>, and','line_number':238,'multiline':False]['text':' we don't expect <input> to have any predicates or output bindings.','line_number':239,'multiline':False]['text':' Every Atom in pathResult has an unknown input binding.','line_number':248,'multiline':False]['text':' Fill it in with 'inputVar'.','line_number':249,'multiline':False]['text':' 'pathResult' was translated as if it appeared in EvalFilter; we can't use it.','line_number':271,'multiline':False]['text':' 'pathResult' was translated as if it appeared in EvalPath; we can't use it.','line_number':282,'multiline':False]['text':' Neither side is sargable.','line_number':293,'multiline':False]['text':' If one side is sargable but not both, we can keep just the sargable side.','line_number':297,'multiline':False]['text':' This is a looser predicate than the original (because X >= (X AND Y)), so','line_number':298,'multiline':False]['text':' keep the original.','line_number':299,'multiline':False]['text':'scanProjName','line_number':323,'multiline':True]['text':'multikeynessTrie','line_number':324,'multiline':True]['text':'constFold','line_number':327,'multiline':True]['text':'pathToInterval','line_number':328,'multiline':True]['text':' From this point on we only handle additive composition.','line_number':335,'multiline':False]['text':' Check if the left and right requirements are all or none perf-only.','line_number':337,'multiline':False]['text':'ctx','line_number':341,'multiline':True]['text':' Additive composition should only have predicates; no projections.','line_number':343,'multiline':False]['text':' For now allow only predicates with the same perf-only flag.','line_number':355,'multiline':False]['text':' Handle a general disjunction.','line_number':363,'multiline':False]['text':' If either argument is an over-approximation, then so is the result.','line_number':367,'multiline':False]['text':'*
     * Given two predicates, form their disjunction if we can represent the result as a conjunction
     * of predicates on the same field. Otherwise return an empty optional.
     *
     * When this function returns a nonempty optional, it may modify or move from the arguments.
     * When it returns boost::none the arguments are unchanged.
     *
     * TODO SERVER-74879: Generalize boolean minimization.
     * Instead of handling these special cases, construct a disjunction and then simplify; and
     * remove this function.
     ','line_number':373,'multiline':True]['text':' Do all reqs from both sides use the same key?','line_number':397,'multiline':False]['text':' All reqs from both sides use the same key (input binding + path).','line_number':404,'multiline':False]['text':' Each side is a conjunction, and we're taking a disjunction.','line_number':406,'multiline':False]['text':' Use the fact that OR distributes over AND to build a new conjunction:','line_number':407,'multiline':False]['text':'     (a & b) | (x & y) == (a | x) & (a | y) & (b | x) & (b | y)','line_number':408,'multiline':False]['text':'intersect','line_number':421,'multiline':True]['text':' We already asserted that there are no projections.','line_number':424,'multiline':False]['text':' If either argument is an over-approximation, then so is the result.','line_number':434,'multiline':False]['text':' Left and right don't all use the same key.','line_number':440,'multiline':False]['text':' Left and right don't all use the same key, but they both have exactly 1 entry.','line_number':445,'multiline':False]['text':' In other words, leftKey != rightKey.','line_number':446,'multiline':False]['text':' Here we can combine if paths differ only by a Traverse element and both intervals','line_number':448,'multiline':False]['text':' are the same, with array bounds. For example:','line_number':449,'multiline':False]['text':'      Left:   Id,          [[1, 2, 3], [1, 2, 3]]','line_number':450,'multiline':False]['text':'      Right:  Traverse Id  [[1, 2, 3], [1, 2, 3]]','line_number':451,'multiline':False]['text':' We can then combine into:','line_number':452,'multiline':False]['text':'    Traverse Id:           [[1, 2, 3], [1, 2, 3]] OR [1, 1]','line_number':453,'multiline':False]['text':' We also need to retain the original filter.','line_number':454,'multiline':False]['text':' For now only supporting equalities.','line_number':470,'multiline':False]['text':' Create new interval which uses the first element of the array, or "undefined" if the','line_number':485,'multiline':False]['text':' interval is the empty array.','line_number':486,'multiline':False]['text':'inclusive','line_number':492,'multiline':True]['text':'inclusive','line_number':492,'multiline':True]['text':' If leftPath = Id and rightPath = Traverse Id, union the intervals, and introduce a','line_number':499,'multiline':False]['text':' perf-only requirement.','line_number':500,'multiline':False]['text':'intersect','line_number':503,'multiline':True]['text':'isPerfOnly','line_number':505,'multiline':True]['text':' If leftPath = Traverse Id and rightPath = Id, union the intervals, and introduce a','line_number':511,'multiline':False]['text':' perf-only requirement.','line_number':512,'multiline':False]['text':'intersect','line_number':515,'multiline':True]['text':'isPerfOnly','line_number':517,'multiline':True]['text':'isMultiplicative','line_number':533,'multiline':True]['text':' In order to create null bound, we need to query for Nothing or Null.','line_number':552,'multiline':False]['text':'inclusive','line_number':555,'multiline':True]['text':'inclusive','line_number':555,'multiline':True]['text':'boundProjectionName','line_number':558,'multiline':True]['text':'isPerfOnly','line_number':560,'multiline':True]['text':'isMultiplicative','line_number':563,'multiline':True]['text':'*
     * Prepend a Get or Traverse to each Atom in the argument reqMap.
     *
     * 'n' specifies a single node to prepend. The child of 'n' is ignored. For example
     * if 'n' is 'Get [a] Get [b] Id' then this function prepends 'Get [a]' to 'inputResult'.
     *
     * Only considers atoms with an empty input binding. Atoms with a nonempty input binding are
     * ignored.
     ','line_number':567,'multiline':True]['text':' Updated key path to be now rooted at n, with existing key path','line_number':589,'multiline':False]['text':' as child.','line_number':590,'multiline':False]['text':' More than one requirement means we may have a conjunction inside a traverse.','line_number':610,'multiline':False]['text':' We can change it to a traverse inside a conjunction, but that's an','line_number':611,'multiline':False]['text':' over-approximation, so we have to keep the original predicate.','line_number':612,'multiline':False]['text':' Note that we could improve this by pushing traverse through disjunction without loss','line_number':615,'multiline':False]['text':' of precision. 'Traverse (ComposeA X Y) == ComposeA (Traverse X) (Traverse Y)' because','line_number':616,'multiline':False]['text':' Traverse is a disjunction over array elements, so it's ok to re-associate the','line_number':617,'multiline':False]['text':' disjunctions.','line_number':618,'multiline':False]['text':'*
     * Convert to PathCompare EqMember to partial schema requirements if possible.
     ','line_number':624,'multiline':True]['text':' Union the single intervals together. If we have PathCompare [EqMember] Const [[1, 2, 3]]','line_number':639,'multiline':False]['text':' we create [1, 1] U [2, 2] U [3, 3].','line_number':640,'multiline':False]['text':' The intervals are added so that they form a DNF from single-predicate conjunctions that','line_number':641,'multiline':False]['text':' are children of a top-level disjunction. The creation of the interval DNF doesn't reuse','line_number':642,'multiline':False]['text':' combineIntervalsDNF() because this function would end up adding its first argument to','line_number':643,'multiline':False]['text':' itself for each new bound, thus creating N*(N+1)/2 duplicates.','line_number':644,'multiline':False]['text':'inclusive','line_number':653,'multiline':True]['text':'inclusive','line_number':654,'multiline':True]['text':'boundProjectionName','line_number':661,'multiline':True]['text':'isPerfOnly','line_number':663,'multiline':True]['text':' TODO handle other comparisons?','line_number':703,'multiline':False]['text':'boundProjectionName','line_number':711,'multiline':True]['text':'isPerfOnly','line_number':713,'multiline':True]['text':'boundProjectionName','line_number':719,'multiline':True]['text':'isPerfOnly','line_number':721,'multiline':True]['text':' Cannot create bounds with just NULL.','line_number':726,'multiline':False]['text':' We allow expressions to participate in bounds.','line_number':735,'multiline':False]['text':' If we have a path converter, attempt to convert directly into bounds.','line_number':740,'multiline':False]['text':'boundProjectionName','line_number':744,'multiline':True]['text':'isPerfOnly','line_number':746,'multiline':True]['text':' General case. Reject conversion.','line_number':750,'multiline':False]['text':' We need to determine either path or interval (or both).','line_number':776,'multiline':False]['text':' If we over-approximate, we need to switch all requirements to perf-only.','line_number':787,'multiline':False]['text':'isPerfOnly','line_number':792,'multiline':True]['text':'*
 * Attempt to simplify the intervals of a requirement using constant folding. Also check if they are
 * unsatisfiable because they encode a test for array on a non-multikey path.
 ','line_number':799,'multiline':True]['text':' Intervals are unsatisfiable.','line_number':823,'multiline':False]['text':' We have array predicate on non-multikey path: convert to unsatisfiable','line_number':833,'multiline':False]['text':' intervals.','line_number':834,'multiline':False]['text':' Simplify paths by eliminating unnecessary Traverse elements.','line_number':871,'multiline':False]['text':' At this point we have simplified the path in newKey.','line_number':884,'multiline':False]['text':'intersect','line_number':893,'multiline':True]['text':' Ensure that Traverse-less keys appear only once: we can move the conjunction','line_number':895,'multiline':False]['text':' into the intervals and simplify. For traversing keys, check if interval is','line_number':896,'multiline':False]['text':' subsumed in the other and if so, then combine.','line_number':897,'multiline':False]['text':' We cannot combine multikey paths where one interval does not subsume the','line_number':901,'multiline':False]['text':' other.','line_number':902,'multiline':False]['text':' The existing name wins (stays in 'reqMap'). We tell the caller that','line_number':910,'multiline':False]['text':' the name "boundProjName" is available under "resultBoundProjName".','line_number':911,'multiline':False]['text':' We have an empty disjunction -> trivially false.','line_number':933,'multiline':False]['text':' We can use set intersection to calculate set containment:','line_number':942,'multiline':False]['text':'   lhs <= rhs  iff  (lhs ^ rhs) == lhs','line_number':943,'multiline':False]['text':' However, we're assuming that 'rhs' has no projections.','line_number':945,'multiline':False]['text':' If it did have projections, the result (lhs ^ rhs) would have projections','line_number':946,'multiline':False]['text':' and wouldn't match 'lhs'.','line_number':947,'multiline':False]['text':'scanProjName','line_number':959,'multiline':True]['text':'multikeynessTrie','line_number':960,'multiline':True]['text':'constFold','line_number':963,'multiline':True]['text':'pathToInterval','line_number':964,'multiline':True]['text':'*
 * Try to compute the intersection of an existing PartialSchemaRequirements object and a new
 * key/requirement pair.
 *
 * Returns false on "failure", which means the result was not representable. This happens if there
 * is a def-use dependency that combining into one PartialSchemaRequirements would break.
 *
 * The implementation works as follows:
 *     1. If the path of the new requirement already exists, we add it to the existing requirements.
 *     2. If the path does not exist, and does not refer to an existing entry, we add it.
 *     3. If we have an entry which binds the variable which the requirement uses.
 *        Append the paths (to rephrase the new requirement in terms of bindings
 *        visible in the input of the existing requirements) and retry. We will either
 *        add a new requirement or combine with an existing one.
 ','line_number':972,'multiline':True]['text':' Map used to speed up finding entries which bind a given projection.','line_number':999,'multiline':False]['text':' The new key is referring to a projection the existing requirement','line_number':1020,'multiline':False]['text':' binds.','line_number':1021,'multiline':False]['text':' Continue around the loop.','line_number':1036,'multiline':False]['text':' First index of entries added from the source tree. Before that are the entries from the','line_number':1055,'multiline':False]['text':' target tree.','line_number':1056,'multiline':False]['text':' Set to false if we discover we cannot represent the result.','line_number':1058,'multiline':False]['text':'*
 * Pad compound interval with supplied simple interval.
 ','line_number':1127,'multiline':True]['text':'*
 * Pad compound interval with unconstrained simple interval.
 ','line_number':1140,'multiline':True]['text':'*
 * Attempts to extend the compound interval corresponding to the last equality prefix to encode the
 * supplied required interval. If the equality prefix cannot be extended we begin a new equality
 * prefix and instead it instead. In the return value we indicate if we have exceeded the maximum
 * number of allowed equality prefixes.
 ','line_number':1150,'multiline':True]['text':' Should exit after at most one iteration.','line_number':1166,'multiline':False]['text':' Pad old prefix with open intervals to the end.','line_number':1169,'multiline':False]['text':' Too many equality prefixes.','line_number':1174,'multiline':False]['text':' Begin new equality prefix.','line_number':1177,'multiline':False]['text':' Pad new prefix with index fields processed so far.','line_number':1180,'multiline':False]['text':' Obtain existing bound projection or get a temporary one for the','line_number':1182,'multiline':False]['text':' previous fields.','line_number':1183,'multiline':False]['text':' Create point bounds using the projections.','line_number':1188,'multiline':False]['text':'inclusive','line_number':1189,'multiline':True]['text':' Add open interval for the first equality prefix.','line_number':1215,'multiline':False]['text':' For each component of the index,','line_number':1218,'multiline':False]['text':' Too many equality prefixes. Attempt to satisfy remaining predicates as','line_number':1240,'multiline':False]['text':' residual.','line_number':1241,'multiline':False]['text':' Pad remaining index key as "unbound".','line_number':1243,'multiline':False]['text':' Need to constrain at least one field per prefix.','line_number':1249,'multiline':False]['text':' Include bounds projection into index spec.','line_number':1260,'multiline':False]['text':' We cannot constrain the current index field.','line_number':1281,'multiline':False]['text':' Compute residual predicates from unsatisfied partial schema keys.','line_number':1287,'multiline':False]['text':' We need to cover all predicates with index scans.','line_number':1306,'multiline':False]['text':' Only regular requirements are added to residual predicates.','line_number':1311,'multiline':False]['text':' We have found at least one entry which we cannot satisfy. We can only encode as','line_number':1327,'multiline':False]['text':' residual predicates which use as input value obtained from an index field. If the','line_number':1328,'multiline':False]['text':' predicate refers to a field not in the index, then we cannot satisfy here. Presumably','line_number':1329,'multiline':False]['text':' the predicate would be moved to the seek side in a prior logical rewrite which would','line_number':1330,'multiline':False]['text':' split the original sargable nodes into two.','line_number':1331,'multiline':False]['text':' Could not satisfy all query requirements. Note at this point may contain entries which','line_number':1337,'multiline':False]['text':' can actually be satisfied but were not attempted to be satisfied as we exited the','line_number':1338,'multiline':False]['text':' residual predicate loop on the first failure.','line_number':1339,'multiline':False]['text':' Need to encode at least one query requirement in the index bounds. Also, if an','line_number':1347,'multiline':False]['text':' unbound index is part of a multi-index plan, discard it as it could be more expensive','line_number':1348,'multiline':False]['text':' than a single collection scan.','line_number':1349,'multiline':False]['text':' A candidate index is one that can directly satisfy the SargableNode, without using','line_number':1380,'multiline':False]['text':' any other indexes. Typically a disjunction would require unioning two different indexes,','line_number':1381,'multiline':False]['text':' so we bail out if there's a nontrivial disjunction here.','line_number':1382,'multiline':False]['text':' Contains one instance for each unmatched key.','line_number':1387,'multiline':False]['text':' Tree of containing the current set of index paths. Used to check if we can encode a query','line_number':1390,'multiline':False]['text':' predicate into index bounds or as residual. For example, if we have a query with two multikey','line_number':1391,'multiline':False]['text':' paths which share a multikey component: Get "a" Traverse Get "b" Traverse Id and Get "a"','line_number':1392,'multiline':False]['text':' Traverse Get "c" Traverse Id we would not admit both to be satisfied via an index scan. By','line_number':1393,'multiline':False]['text':' contrast, if they shared a non-multikey component (Get "a" only) or they did not share any','line_number':1394,'multiline':False]['text':' component (e.g. Get "a" Traverse Get "b" Id and Get "c" Traverse Get "d" Id) then the two','line_number':1395,'multiline':False]['text':' paths may be satisfied via the same index scan.','line_number':1396,'multiline':False]['text':' Flag which is set if visitor identifies a case which prohibits index usage.','line_number':1399,'multiline':False]['text':' Perf only do not need to be necessarily satisfied.','line_number':1407,'multiline':False]['text':' We cannot satisfy two or more non-multikey path instances using an index.','line_number':1412,'multiline':False]['text':' We cannot use indexes to return values for fields if we have an interval with','line_number':1420,'multiline':False]['text':' null bounds.','line_number':1421,'multiline':False]['text':' All the traverse elements of the key must have single depth.','line_number':1428,'multiline':False]['text':' Ignore perf only requirements.','line_number':1491,'multiline':False]['text':' We are not sitting right above a ScanNode.','line_number':1495,'multiline':False]['text':' Extract a new requirements path with removed simple paths.','line_number':1504,'multiline':False]['text':' For example if we have a key Get "a" Traverse Compare = 0 we','line_number':1505,'multiline':False]['text':' leave only Traverse Compare 0.','line_number':1506,'multiline':False]['text':'isPerfOnly','line_number':1518,'multiline':True]['text':'boundProjectionName','line_number':1524,'multiline':True]['text':'isPerfOnly','line_number':1526,'multiline':True]['text':' Move other conditions into the residual map.','line_number':1539,'multiline':False]['text':'*
 * Transport that checks if we have a primitive interval which may contain null.
 ','line_number':1561,'multiline':True]['text':'*
 * Identifies all Eq or EqMember nodes in the childResults. If there is more than one,
 * they are consolidated into one larger EqMember node with a new array containing
 * all of the individual node's value.
 ','line_number':1593,'multiline':True]['text':' This is unreachable since the PSR is assumed to be in DNF form when converted','line_number':1610,'multiline':False]['text':' to a filter node. This means that any EqMember from translation would have','line_number':1611,'multiline':False]['text':' first been decomposed into individual EQ predicates under a disjunction.','line_number':1612,'multiline':False]['text':' Copy this node's value into the new eqMembersArray.','line_number':1616,'multiline':False]['text':' Add a node to the newResults with the combined Eq/EqMember values under one EqMember; if','line_number':1631,'multiline':False]['text':' there is only one value, add an Eq node with that value.','line_number':1632,'multiline':False]['text':' Construct a balanced multiplicative composition tree.','line_number':1699,'multiline':False]['text':' Consolidate Eq and EqMember disjunctions, then construct a balanced additive','line_number':1706,'multiline':False]['text':' composition tree.','line_number':1707,'multiline':False]['text':'*
     * Convenience for looking up the singular interval that corresponds to either PathArr or
     * PathObj.
     ','line_number':1719,'multiline':True]['text':'*
 * Build the EvalFilter and EvalPath expressions corresponding to the given requirement and path.
 *
 * Semantically the EvalPath comes first: the EvalFilter may assume the EvalPath is bound to
 * req.getBoundProjectionName().
 ','line_number':1740,'multiline':True]['text':' If there is a single Conjunction, build a sequence of FilterNode (one for each conjunct).','line_number':1804,'multiline':False]['text':' Compute CE for the node implementing the current','line_number':1811,'multiline':False]['text':' PartialSchemaRequirement.','line_number':1812,'multiline':False]['text':' For multiple Conjunctions, build a top-level Or expression representing the composition.','line_number':1827,'multiline':False]['text':' Collect the estimated costs of each child under a conjunction. Assume it is','line_number':1878,'multiline':False]['text':' more expensive to deliver a bound projection than to just filter.','line_number':1879,'multiline':False]['text':' The entries may not have CE values, in which case there is no way to sort them.','line_number':1905,'multiline':False]['text':' "move" data out of map to avoid potential copies.','line_number':1976,'multiline':False]['text':' Wrap given node in projection renames using evaluation nodes.','line_number':1979,'multiline':False]['text':' Remove unused residual requirements.','line_number':1991,'multiline':False]['text':' We pass the child as a non-const ref so we can std::move out of it. Even though','line_number':1998,'multiline':False]['text':' `residualReqs` is used later on in this function we reassign `result` to it below, so','line_number':1999,'multiline':False]['text':' we're not using after a move.','line_number':2000,'multiline':False]['text':' We do not use the output binding, but we still want to','line_number':2022,'multiline':False]['text':' filter.','line_number':2023,'multiline':False]['text':'boundProjectionName','line_number':2030,'multiline':True]['text':' Remove unused projections from the field projection map.','line_number':2046,'multiline':False]['text':' Use a union node to restrict the rid projection name coming from the right child in order','line_number':2173,'multiline':False]['text':' to ensure we do not have the same rid from both children. This node is optimized away','line_number':2174,'multiline':False]['text':' during lowering.','line_number':2175,'multiline':False]['text':' Use a union node to restrict the rid projection name coming from the right child in order','line_number':2218,'multiline':False]['text':' to ensure we do not have the same rid from both children. This node is optimized away','line_number':2219,'multiline':False]['text':' during lowering.','line_number':2220,'multiline':False]['text':'*
 * Generates a distinct scan plan. This is a type of index scan which iterates over the distinct
 * (unique) values in a particular index range. The basic outline of the plan is the following:
 *
 *     SpoolProducer (<spoolId>, <outerProjNames>)
 *     Union (<outerProjNames>)
 *         Limit 1
 *         IxScan(<outerFPM>, <outerInterval>, reverse)
 *
 *         NLJ (correlated = <innerProjNames>)
 *             SpoolConsumer (<spoolId>, <innerProjNames>)
 *
 *             Limit 1
 *             IxScan(<outerProjNames>, <innerInterval>, reverse)
 *
 *  For a particular index, we generate a spooling plan (see corresponding spool producer and
 * consumer nodes), which first seeds the iteration with the base case represented by the outer
 * index scan and associated parameters. Then we iterate in the recursive case where we re-open the
 * inner index scan on every new combination of values we receive from the spool.
 ','line_number':2239,'multiline':True]['text':' Advance to the next unique key.','line_number':2279,'multiline':False]['text':' Inner correlated join.','line_number':2286,'multiline':False]['text':' Outer index scan node.','line_number':2295,'multiline':False]['text':' Limit to one result to seed the distinct scan.','line_number':2300,'multiline':False]['text':'*
 * This transport is responsible for encoding a set of equality prefixes into a physical plan. Each
 * equality prefix represents a subset of predicates to be evaluated using a particular index
 * (referenced by "indexDefName"). The combined set of predicates is structured into equality
 * prefixes such that each prefix begins with a (possibly empty) prefix of equality (point)
 * predicates on the respective index fields from the start, followed by at most one inequality
 * predicate, followed by a (possibly empty) suffix of unbound fields. We encode a given equality
 * prefix by using a combination of distinct scan (for the initial equality prefixes) or a regular
 * index scans (for the last equality prefix). On a high level, we iterate over the distinct
 * combinations of index field values referred to by the equality prefix using a combination of
 * spool producer and consumer nodes. Each unique combination of index field values is then passed
 * onto the next equality prefix which uses it to constrain its own distinct scan, or in the case of
 * the last equality prefix, the final index scan. For a given equality prefix, there is an
 * associated compound interval expression on the referenced fields. The compound interval is a
 * boolean expression consisting of conjunctions and disjunctions, which on a high-level are encoded
 * as index intersection and index union.
 *
 * A few examples:
 *   1. Compound index on {a, b}. Predicates a = 1 and b > 2, translating into one equality prefix
 * with a compound interval ({1, 2}, {1, MaxKey}). The resulting plan is a simple index scan:
 *
 *     IxScan(({1, 2}, {1, MaxKey})).
 *
 *   2. Compound index on {a, b}. Predicates (a = 1 or a = 3) and b > 2. We have one equality prefix
 * with a compound interval ({1, 2}, {1, MaxKey}) U ({3, 2}, {3, MaxKey}). We encode the plan as:
 *
 *   Union
 *       IxScan({1, 2}, {1, MaxKey})
 *       IxScan({3, 2}, {3, MaxKey})
 *
 *   3. Compound index on {a, b}. Predicates a > 1 and b > 2. We now have two equality prefixes. The
 * first equality prefix answered using the distinct scan sub-plan generated to produce distinct
 * values for "a" in the range (1, MaxKey]. The distinct value stream is correlated and made
 * available to the inner index scan which satisfies "b > 2".
 *
 *   NLJ (correlated = a)
 *       DistinctScan(a, (1, MaxKey])
 *       IxScan(({a, 2}, {a, MaxKey}))
 *
 *  Observe the first part of the plan (the outer side of the first correlated join) iterates over
 * the distinct values of the field "a" using a combination of spooling and inner index scan with a
 * variable bound on the current value of "a". The last index scan effectively
 * receives a stream of unique values of "a" and delivers values which also satisfy b > 2.
 *
 *  4. Compound index on {a, b}. Predicates a in [1, 2], b in [3, 4]. We have two equality prefix
 * and we generate the following plan.
 *
 *  Union
 *      NLJ (correlated = a)
 *          DistinctScan(a, [1, 1])
 *          Union
 *              IxScan([{a, 3}, {a, 3}])
 *              IxScan([{a, 4}, {a, 4}])
 *      NLJ (correlated = a)
 *          DistinctScan(a, [2, 2])
 *          Union
 *             IxScan([{a, 3}, {a, 3}])
 *             IxScan([{a, 4}, {a, 4}])
 ','line_number':2318,'multiline':True]['text':' Collect estimates for predicates satisfied with the current equality prefix.','line_number':2406,'multiline':False]['text':' TODO: rationalize cardinality estimates: estimate number of unique groups.','line_number':2407,'multiline':False]['text':' Update interval with current correlations.','line_number':2437,'multiline':False]['text':' If this is the last equality prefix, use the input field projection map.','line_number':2445,'multiline':False]['text':' Set of correlated projections for next equality prefix.','line_number':2455,'multiline':False]['text':' Inner and outer auxiliary projections used to set-up the inner index scan parameters to','line_number':2458,'multiline':False]['text':' support the spool-based distinct scan.','line_number':2459,'multiline':False]['text':' Interval and projection map of the inner index scan.','line_number':2462,'multiline':False]['text':'inclusive','line_number':2469,'multiline':True]['text':'inclusive','line_number':2473,'multiline':True]['text':' Restrict next fpm to not require fields up to "nextStartPos". It should require','line_number':2483,'multiline':False]['text':' fields only from the next equality prefixes.','line_number':2484,'multiline':False]['text':' Generate the combined set of correlated projections from the previous and current','line_number':2487,'multiline':False]['text':' equality prefixes.','line_number':2488,'multiline':False]['text':' The predicates referring to correlated projections from the previous prefixes','line_number':2493,'multiline':False]['text':' are converted to equalities over the distinct set of values.','line_number':2494,'multiline':False]['text':'inclusive','line_number':2495,'multiline':True]['text':' Use the correlated projections of the current prefix as outer projections.','line_number':2497,'multiline':False]['text':' For each of the outer projections, generate a set of corresponding inner','line_number':2501,'multiline':False]['text':' projections to use for the spool consumer and bounds for the inner index scan.','line_number':2502,'multiline':False]['text':'inclusive','line_number':2506,'multiline':True]['text':' Pad the remaining fields in the inner interval.','line_number':2512,'multiline':False]['text':' Recursively generate a plan to encode the intervals of the subsequent prefixes.','line_number':2517,'multiline':False]['text':' Here we are assuming that children in each conjunction and disjunction contribute','line_number':2562,'multiline':False]['text':' equally and independently to the parent's selectivity.','line_number':2563,'multiline':False]['text':' TODO: consider estimates per individual interval.','line_number':2564,'multiline':False]['text':' For projections we require, introduce temporary projections to allow us to union or','line_number':2583,'multiline':False]['text':' intersect. Also update the current correlations.','line_number':2584,'multiline':False]['text':'isConjunction','line_number':2603,'multiline':True]['text':' If we're lowering a disjunction and only have equality intervals, use a SortedMerge','line_number':2629,'multiline':False]['text':' instead of a Union because the child streams will be sorted. Only applies when','line_number':2630,'multiline':False]['text':' sorting on RID only.','line_number':2631,'multiline':False]['text':' The input projections names we will be combining from both sides.','line_number':2639,'multiline':False]['text':' Projection names which will be the result of the combination (intersect or union).','line_number':2641,'multiline':False]['text':' Agg expressions used to combine the unioned projections.','line_number':2643,'multiline':False]['text':' Not relevant for cost.','line_number':2665,'multiline':False]['text':' Prevent rid projection from leaking out if we do not require it, and also auxiliary','line_number':2702,'multiline':False]['text':' left and right side projections.','line_number':2703,'multiline':False]['text':'isIntersect','line_number':2712,'multiline':True]['text':'isConjunction','line_number':2716,'multiline':True]['text':'isIntersect','line_number':2721,'multiline':True]['text':' Equality-prefix and related.','line_number':2735,'multiline':False]['text':' Stack which is used to support carrying and updating parameters across Conjunction and','line_number':2746,'multiline':False]['text':' Disjunction nodes.','line_number':2747,'multiline':False]['text':' Compute if this node has any proper (not fully open) intervals.','line_number':2788,'multiline':False]['text':'node','line_number':2797,'multiline':True]['text':'args','line_number':2797,'multiline':True]['text':' namespace mongo::optimizer','line_number':2814,'multiline':False]