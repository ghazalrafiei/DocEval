['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This struct holds information on BinData blobs with a specific payloadId within a $and
 * conjunction. For a two-sided range to be valid, there must be exactly two blobs where:
 *  1. One blob is a full payload.
 *  2. One blob is a stub.
 *  3. One blob is present under each endpoint operator that was specified when the blobs were
 *     generated client-side. This is to ensure that the syntax of the query an the encrypted
 *     semantics match.
 *
 * If any of these conditions are violated, a validation error is sent back to the
 * client so that users can re-generate the encrypted range payload for their query.
 ','line_number':117,'multiline':True]['text':'*
     * Mark a specific payload as having been seen under a given operator for this validator. If a
     * payload is valid, this function should be called exactly twice for every struct instance,
     * once under a $gt or $gte and once under a $lt or $lte.
     ','line_number':156,'multiline':True]['text':' If there is no secondOp in this payload then it should be treated as a','line_number':210,'multiline':False]['text':' one-sided range that should be validated on its own.','line_number':211,'multiline':False]['text':' At this point, we know that the payload is one side of a two-sided range.','line_number':216,'multiline':False]['text':' Create a new validator for this payloadId if it's the first time it's seen.','line_number':218,'multiline':False]['text':' Update the validator with information from this payload.','line_number':226,'multiline':False]['text':' Keep track of a map from payloadId to the validator struct.','line_number':231,'multiline':False]['text':' Skip any comparison operators over non-encrypted data.','line_number':244,'multiline':False]['text':' Make sure to recursively handle other children in case there are further nestings','line_number':254,'multiline':False]['text':' of $not, $nor, $or or $and.','line_number':255,'multiline':False]['text':' Once the entire operand list of the $and is traversed, make sure that all the','line_number':261,'multiline':False]['text':' two-sided ranges had fully valid payloads.','line_number':262,'multiline':False]['text':' namespace','line_number':269,'multiline':False]['text':' Gets the first constant value from a comparison. All enrypted range predicates will have one','line_number':322,'multiline':False]['text':' fieldpath and one constant value. If no constant is found, returns none. If both are values, then','line_number':323,'multiline':False]['text':' this is not an encrypted predicate, but that case is handled by the caller.','line_number':324,'multiline':False]['text':' Once the entire operand list of the $and is traversed, make sure that all the','line_number':384,'multiline':False]['text':' two-sided ranges had fully valid payloads.','line_number':385,'multiline':False]['text':' namespace','line_number':392,'multiline':False]['text':' namespace fle','line_number':417,'multiline':False]['text':' namespace mongo','line_number':418,'multiline':False]