['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' TODO: This doesn't seem right -- it looks like we're sorting on the frequency,','line_number':77,'multiline':False]['text':'       not the difference between buckets','line_number':78,'multiline':False]['text':'*
 * Helper for getting the input for constructing an array histogram for an array estimator using the
 * values in an array. For each value in `arrayElements`, update the min, max, and unique value
 * vectors. These will be used to generate the corresponding histograms for array values.
 ','line_number':109,'multiline':True]['text':' Emit values for arrayMin and arrayMax histograms.','line_number':125,'multiline':False]['text':' Emit values for arrayUnique histogram.','line_number':142,'multiline':False]['text':' Helper which calculates the the area between two neighboring values, given the frequency of the','line_number':156,'multiline':False]['text':' former value. This function truncates areas which are infinite to the largest possible double as','line_number':157,'multiline':False]['text':' we use infinity as a sentinel value to denote the transition between type brackets. This is','line_number':158,'multiline':False]['text':' because we want to prioritize splitting type brackets into separate buckets over splitting values','line_number':159,'multiline':False]['text':' in the same type bracket that are infinitely far apart, so we avoid returning infinity here.','line_number':160,'multiline':False]['text':' namespace','line_number':175,'multiline':False]['text':' Aggregate the values in a sorted dataset into a frequency distribution.','line_number':187,'multiline':False]['text':' Calculate the area for all values in the data distribution.','line_number':208,'multiline':False]['text':' The current minimum and maximum areas of the values of a type class.','line_number':209,'multiline':False]['text':' If maxArea is 0.0, this is because this value is the only value of its type bracket.','line_number':218,'multiline':False]['text':' Because we want to force it to be a bucket, set maxArea to inifinte.','line_number':219,'multiline':False]['text':' Make sure we insert bucket boundaries between different types, and also make sure','line_number':229,'multiline':False]['text':' first value is picked for a boundary.','line_number':230,'multiline':False]['text':' Make sure last value is picked as a histogram bucket boundary.','line_number':238,'multiline':False]['text':' If maxArea is 0.0, it is because the last value is the only value in a type class. We need to','line_number':240,'multiline':False]['text':' give it an infinite area so we allocate a bucket for it.','line_number':241,'multiline':False]['text':' Compute normalized areas.','line_number':247,'multiline':False]['text':' We ensure above that the area for the current type bracket is never 0.','line_number':250,'multiline':False]['text':' Iterate over all values in the current type bracket.','line_number':252,'multiline':False]['text':' Note: 'endIdx' is an inclusive index into result._freq.','line_number':253,'multiline':False]['text':' We want to set type boundaries to have infinite normalized area to force them to','line_number':256,'multiline':False]['text':' be picked as buckets. We want them to be picked before the entry with the highest','line_number':257,'multiline':False]['text':' area for a type which has normalized area 1.0.','line_number':258,'multiline':False]['text':' std::cout << "Distribution sorted by value:\n"','line_number':266,'multiline':False]['text':'           << printDistribution(result, result._freq.size()) << "\n"','line_number':267,'multiline':False]['text':'           << std::flush;','line_number':268,'multiline':False]['text':' At the very least, we must have one bucket for the first value in the distribution and one','line_number':279,'multiline':False]['text':' bucket for every type class (except when the first type bracket has a single value, in which','line_number':280,'multiline':False]['text':' case we the number of buckets can equal the number of types).','line_number':281,'multiline':False]['text':' For example, {0, 1, 2, "foo", "bar"} needs buckets with values: 0, 2, and "bar".','line_number':282,'multiline':False]['text':' Create histogram buckets out of the top-K bucket values.','line_number':299,'multiline':False]['text':' Compute per-bucket statistics.','line_number':307,'multiline':False]['text':' Add a histogram bucket.','line_number':317,'multiline':False]['text':' Values that will be used as inputs to histogram generation code.','line_number':332,'multiline':False]['text':' Type counters.','line_number':338,'multiline':False]['text':' Value counters.','line_number':342,'multiline':False]['text':' Tracks whether we should use the scalar constructor.','line_number':348,'multiline':False]['text':' Increment type counters.','line_number':355,'multiline':False]['text':' If we have an array, we can construct min, max, and unique histograms from its','line_number':364,'multiline':False]['text':' elements, provided that they are histogrammable.','line_number':365,'multiline':False]['text':' We only count types once per occurrence per array for histogram CE.','line_number':375,'multiline':False]['text':' If the elements of this array are not histogrammable, then we can only update','line_number':382,'multiline':False]['text':' the array type counters; we cannot add this value to the histogram.','line_number':383,'multiline':False]['text':' Do not add NaNs to array elements.','line_number':393,'multiline':False]['text':' Increment array type tag counts.','line_number':401,'multiline':False]['text':' If we have a boolean, we also have counters for true and false values we should','line_number':412,'multiline':False]['text':' increment here.','line_number':413,'multiline':False]['text':' If we have a non-histogrammable type, we can only increment the type counters for it;','line_number':421,'multiline':False]['text':' we cannot build a scalar histogram on it.','line_number':422,'multiline':False]['text':' We count NaNs separately, check for NaN here.','line_number':431,'multiline':False]['text':' Assume non-arrays are scalars. Emit values for the scalar histogram.','line_number':434,'multiline':False]['text':' Lambda helper to construct histogram from an unsorted value vector.','line_number':439,'multiline':False]['text':' If we don't have array elements, we don't include array fields in the final histogram.','line_number':446,'multiline':False]['text':' namespace mongo::stats','line_number':468,'multiline':False]