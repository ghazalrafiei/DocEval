['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Helper function that uses linear interpolation to estimate the cardinality and NDV for a value
 * that falls inside of a histogram bucket.
 ','line_number':78,'multiline':True]['text':' Check if the estimate is at the point of type brackets switch. If the current bucket is the','line_number':94,'multiline':False]['text':' first bucket of a new type bracket and the value is of another type, estimate cardinality','line_number':95,'multiline':False]['text':' from the current bucket as 0.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' For example, let bound 1 = 1000, bound 2 = "abc". The value 100000000 falls in bucket 2, the','line_number':98,'multiline':False]['text':' first bucket for strings, but should not get cardinality/ ndv fraction from it.','line_number':99,'multiline':False]['text':' Estimate for equality frequency inside of the bucket.','line_number':108,'multiline':False]['text':' If the value is minimal for its type, and the operation is $lt or $lte return cardinality up','line_number':115,'multiline':False]['text':' to the previous bucket.','line_number':116,'multiline':False]['text':'isMin','line_number':117,'multiline':True]['text':' For $lt and $lte operations use linear interpolation to take a fraction of the bucket','line_number':123,'multiline':False]['text':' cardinality and NDV if there is a preceeding bucket with bound of the same type. Use half of','line_number':124,'multiline':False]['text':' the bucket estimates otherwise.','line_number':125,'multiline':False]['text':' Subtract from the estimate the cardinality and ndv corresponding to the equality','line_number':142,'multiline':False]['text':' operation, if they are larger than the ratio taken from this bucket.','line_number':143,'multiline':False]['text':' Continue.','line_number':164,'multiline':False]['text':' Value beyond the largest endpoint.','line_number':184,'multiline':False]['text':'*
 * Estimates equality to the given tag/value using histograms.
 ','line_number':228,'multiline':True]['text':' There is a case where we estimate an interval (l, u) that falls entirely in a bucket. In this','line_number':260,'multiline':False]['text':' case, we estimate it as: card(<u) - card(<=l) = card(<=u) - card(=u) - card(<=l)','line_number':261,'multiline':False]['text':' where our estimate for equality within the bucket, card(=u) = rangeFreq/ndv, is larger than','line_number':262,'multiline':False]['text':' card(<=high) - card(<=low).','line_number':263,'multiline':False]['text':' This is problematic, because we will obtain a negative value for 'est'. For now, we solve','line_number':264,'multiline':False]['text':' this by clamping this result to a minimum of 0.0.','line_number':265,'multiline':False]['text':'*
 * Compute an estimate for range query on array data with formula:
 * Card(ArrayMin(a < valHigh)) - Card(ArrayMax(a < valLow))
 ','line_number':269,'multiline':True]['text':' Define lower bound. ','line_number':293,'multiline':True]['text':' Define upper bound. ','line_number':297,'multiline':True]['text':' Helper lambda to shorten code for legibility.','line_number':307,'multiline':False]['text':' Range query on array data.','line_number':316,'multiline':False]['text':' $elemMatch query on array data.','line_number':327,'multiline':False]['text':' namespace mongo::optimizer::ce','line_number':398,'multiline':False]