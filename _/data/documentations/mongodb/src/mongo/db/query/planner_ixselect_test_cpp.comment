['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This file contains tests for mongo/db/query/planner_ixselect.cpp
 ','line_number':30,'multiline':True]['text':' IWYU pragma: no_include "boost/container/detail/flat_tree.hpp"','line_number':44,'multiline':False]['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':48,'multiline':False]['text':' IWYU pragma: keep','line_number':74,'multiline':False]['text':'*
 * Utility function to create MatchExpression
 ','line_number':86,'multiline':True]['text':'*
 * Utility function to join elements in iterator range with comma
 ','line_number':110,'multiline':True]['text':'*
 * Test function for getFields()
 * Parses query string to obtain MatchExpression which is passed together with prefix
 * to QueryPlannerIXSelect::getFields()
 * Results are compared with expected fields (parsed from expectedFieldsStr)
 ','line_number':127,'multiline':True]['text':' Verify results','line_number':142,'multiline':False]['text':' First, check that results contain a superset of expected fields.','line_number':143,'multiline':False]['text':' Next, confirm that results do not contain any unexpected fields.','line_number':155,'multiline':False]['text':'*
 * Basic test cases for getFields()
 * Includes logical operators
 ','line_number':166,'multiline':True]['text':' Arguments to test function: query, prefix, comma-delimited list of expected fields','line_number':171,'multiline':False]['text':'*
 * Array test cases for getFields
 ','line_number':180,'multiline':True]['text':'*
 * Negation test cases for getFields()
 * $ne, $nin, $nor
 ','line_number':188,'multiline':True]['text':'*
 * Array negation test cases for getFields
 ','line_number':199,'multiline':True]['text':' sparse supported ','line_number':208,'multiline':True]['text':' sparse supported ','line_number':209,'multiline':True]['text':' sparse supported ','line_number':210,'multiline':True]['text':'*
 * Performs a pre-order traversal of expression tree. Validates
 * that all tagged nodes contain an instance of RelevantTag.
 * Finds all indices included in RelevantTags, and returns them in the 'indices' out-parameter.
 ','line_number':213,'multiline':True]['text':'*
 * Make a minimal IndexEntry from just a key pattern. A dummy name will be added.
 ','line_number':245,'multiline':True]['text':'*
 * Parses a MatchExpression from query string and passes that along with prefix, collator, and
 * indices to rateIndices. Verifies results against list of expected paths and expected indices. In
 * future, we may expand this test function to validate which indices are assigned to which node.
 ','line_number':264,'multiline':True]['text':' Parse and rate query. Some of the nodes in the rated tree','line_number':275,'multiline':False]['text':' will be tagged after the rating process.','line_number':276,'multiline':False]['text':' Retrieve a list of paths and a set of indices embedded in','line_number':282,'multiline':False]['text':' tagged nodes.','line_number':283,'multiline':False]['text':' Compare the expected indices with the actual indices.','line_number':288,'multiline':False]['text':' Compare with expected list of paths.','line_number':298,'multiline':False]['text':' First verify number of paths retrieved.','line_number':299,'multiline':False]['text':' Next, check that value and order of each element match between the two lists.','line_number':310,'multiline':False]['text':'*
 * Calls testRateIndices with an empty set of indices and a null collation, so we only test which
 * nodes are tagged.
 ','line_number':326,'multiline':True]['text':' Currently, we tag every indexable node even when no compatible','line_number':333,'multiline':False]['text':' index is available. Hence, it is fine to pass an empty vector of','line_number':334,'multiline':False]['text':' indices to rateIndices().','line_number':335,'multiline':False]['text':'*
 * Basic test cases for rateIndices().
 * Includes logical operators.
 ','line_number':341,'multiline':True]['text':' Test arguments: query, prefix, comma-delimited list of expected paths','line_number':346,'multiline':False]['text':'*
 * Array test cases for rateIndices().
 ','line_number':355,'multiline':True]['text':'*
 * Negation test cases for rateIndices().
 ','line_number':363,'multiline':True]['text':'*
 * Array negation test cases for rateIndices().
 ','line_number':373,'multiline':True]['text':'*
 * $not within $elemMatch should not attempt to use a sparse index for $exists:false.
 ','line_number':381,'multiline':True]['text':'*
 * $in with a null value within $elemMatch can use a sparse index.
 ','line_number':398,'multiline':True]['text':'*
 * $geo queries within $elemMatch should not use a normal B-tree index.
 ','line_number':411,'multiline':True]['text':'*
 * $eq with a null value within $elemMatch can use a sparse index.
 ','line_number':428,'multiline':True]['text':'*
 * $elemMatch with multiple children will not use an index if any child is incompatible.
 ','line_number':441,'multiline':True]['text':'*
 * If the collator is null, we select the relevant index with a null collator.
 ','line_number':458,'multiline':True]['text':'*
 * If the collator is not null, we do not select the relevant index with a null collator.
 ','line_number':468,'multiline':True]['text':'*
 * If the collator is null, we do not select the relevant index with a non-null collator.
 ','line_number':479,'multiline':True]['text':'*
 * If the collator is non-null, we select the relevant index with an equal collator.
 ','line_number':492,'multiline':True]['text':'*
 * If the collator is non-null, we do not select the relevant index with an unequal collator.
 ','line_number':506,'multiline':True]['text':'*
 * If no string comparison is done, unequal collators are allowed.
 ','line_number':520,'multiline':True]['text':'*
 * $gt string comparison requires matching collator.
 ','line_number':580,'multiline':True]['text':'*
 * $gt string comparison requires matching collator.
 ','line_number':594,'multiline':True]['text':'*
 * $gt array comparison requires matching collator.
 ','line_number':607,'multiline':True]['text':'*
 * $gt array comparison requires matching collator.
 ','line_number':621,'multiline':True]['text':'*
 * $gt object comparison requires matching collator.
 ','line_number':634,'multiline':True]['text':'*
 * $gt object comparison requires matching collator.
 ','line_number':648,'multiline':True]['text':'*
 * $gte string comparison requires matching collator.
 ','line_number':661,'multiline':True]['text':'*
 * $gte string comparison requires matching collator.
 ','line_number':675,'multiline':True]['text':'*
 * $lt string comparison requires matching collator.
 ','line_number':688,'multiline':True]['text':'*
 * $lt string comparison requires matching collator.
 ','line_number':702,'multiline':True]['text':'*
 * $lte string comparison requires matching collator.
 ','line_number':715,'multiline':True]['text':'*
 * $lte string comparison requires matching collator.
 ','line_number':729,'multiline':True]['text':'*
 * If no string comparison is done in an 'in' expression, unequal collators are allowed.
 ','line_number':742,'multiline':True]['text':'*
 * If string comparison is done in an 'in' expression, matching collators are required.
 ','line_number':756,'multiline':True]['text':'*
 * If string comparison is done in an 'in' expression, matching collators are required.
 ','line_number':770,'multiline':True]['text':'*
 * If no string comparison is done in a 'not' expression, unequal collators are allowed.
 ','line_number':783,'multiline':True]['text':'*
 * If string comparison is done in a 'not' expression, matching collators are required.
 ','line_number':797,'multiline':True]['text':'*
 * If string comparison is done in a 'not' expression, matching collators are required.
 ','line_number':811,'multiline':True]['text':'*
 * If no string comparison is done in an elemMatch value, unequal collators are allowed.
 ','line_number':824,'multiline':True]['text':'*
 * If string comparison is done in an elemMatch value, matching collators are required.
 ','line_number':838,'multiline':True]['text':'*
 * If string comparison is done in an elemMatch value, matching collators are required.
 ','line_number':853,'multiline':True]['text':'*
 * If no string comparison is done in an 'in' in a 'not', unequal collators are allowed.
 ','line_number':867,'multiline':True]['text':'*
 * If string comparison is done in an 'in' in a 'not', matching collators are required.
 ','line_number':881,'multiline':True]['text':'*
 * If string comparison is done in an 'in' in a 'not', matching collators are required.
 ','line_number':895,'multiline':True]['text':'*
 * If no string comparison is done in a 'nin', unequal collators are allowed.
 ','line_number':908,'multiline':True]['text':'*
 * If string comparison is done in a 'nin', matching collators are required.
 ','line_number':922,'multiline':True]['text':'*
 * If string comparison is done in a 'nin', matching collators are required.
 ','line_number':936,'multiline':True]['text':'*
 * If string comparison is done in an 'or', matching collators are required.
 ','line_number':949,'multiline':True]['text':'*
 * If string comparison is done in an 'or', matching collators are required.
 ','line_number':963,'multiline':True]['text':'*
 * If string comparison is done in an 'and', matching collators are required.
 ','line_number':976,'multiline':True]['text':'*
 * If string comparison is done in an 'and', matching collators are required.
 ','line_number':990,'multiline':True]['text':'*
 * If string comparison is done in an 'all', matching collators are required.
 ','line_number':1003,'multiline':True]['text':'*
 * If string comparison is done in an 'all', matching collators are required.
 ','line_number':1017,'multiline':True]['text':'*
 * If string comparison is done in an elemMatch object, matching collators are required.
 ','line_number':1030,'multiline':True]['text':'*
 * If string comparison is done in an elemMatch object, matching collators are required.
 ','line_number':1045,'multiline':True]['text':'*
 * If no string comparison is done in a query containing $mod, unequal collators are allowed.
 ','line_number':1059,'multiline':True]['text':'*
 * If no string comparison is done in a query containing $exists, unequal collators are allowed.
 ','line_number':1073,'multiline':True]['text':'*
 * If no string comparison is done in a query containing $type, unequal collators are allowed.
 ','line_number':1087,'multiline':True]['text':' Helper which constructs an IndexEntry and returns it along with an owned ProjectionExecutor,','line_number':1105,'multiline':False]['text':' which is non-null if the requested entry represents a wildcard index and null otherwise. When','line_number':1106,'multiline':False]['text':' non-null, it simulates the ProjectionExecutor that is owned by the $** IndexAccessMethod.','line_number':1107,'multiline':False]['text':'
 * Will compare 'keyPatterns' with 'entries'. As part of comparing, it will sort both of them.
 ','line_number':1364,'multiline':True]['text':' Case where no fields are specified.','line_number':1391,'multiline':False]['text':' A $** index entry is only multikey if it has a non-empty 'multikeyPathSet'. No such','line_number':1497,'multiline':False]['text':' multikey path set has been supplied by this test.','line_number':1498,'multiline':False]['text':' Wildcard indices are always sparse.','line_number':1504,'multiline':False]['text':' Wildcard indexes are never unique.','line_number':1507,'multiline':False]['text':' The function will not traverse a node's children.','line_number':1661,'multiline':False]['text':' When in an elemMatch, a comparison to null implies literal null, so it is always supported.','line_number':1681,'multiline':False]['text':' The function will not traverse a node's children.','line_number':1691,'multiline':False]['text':' namespace','line_number':1701,'multiline':False]