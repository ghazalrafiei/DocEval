['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' output from enumerator to query planner','line_number':45,'multiline':False]['text':'*
     * Assigns a leaf expression to the leading field of index 'i' where combining bounds with other
     * leaf expressions is known to be safe.
     ','line_number':50,'multiline':True]['text':'*
     * Assigns a leaf expresssion to position 'p' of index 'i' where whether it is safe to combine
     * bounds with other leaf expressions is defined by 'canCombineBounds_'.
     ','line_number':56,'multiline':True]['text':' What index should we try to use for this leaf?','line_number':78,'multiline':False]['text':' What position are we in the index?  (Compound.)','line_number':81,'multiline':False]['text':' The plan enumerator can assign multiple predicates to the same position of a multikey index','line_number':84,'multiline':False]['text':' when generating a self-intersection index assignment in enumerateAndIntersect().','line_number':85,'multiline':False]['text':' 'canCombineBounds' gives the access planner enough information to know when it is safe to','line_number':86,'multiline':False]['text':' intersect the bounds for multiple leaf expressions on the 'pos' field of 'index' and when it','line_number':87,'multiline':False]['text':' isn't. The plan enumerator should never generate an index assignment where it isn't safe to','line_number':88,'multiline':False]['text':' compound the bounds for multiple leaf expressions on the index.','line_number':89,'multiline':False]['text':' used internally','line_number':93,'multiline':False]['text':' We don't know the full path from a node unless we keep notes as we traverse from the','line_number':101,'multiline':False]['text':' root.  We do this once and store it.','line_number':102,'multiline':False]['text':' TODO: Do a FieldRef / StringData pass.','line_number':103,'multiline':False]['text':' TODO: We might want this inside of the MatchExpression.','line_number':104,'multiline':False]['text':' Points to the innermost containing $elemMatch. If this tag is','line_number':107,'multiline':False]['text':' attached to an expression not contained in an $elemMatch, then','line_number':108,'multiline':False]['text':' 'elemMatchExpr' is NULL. Not owned here.','line_number':109,'multiline':False]['text':' If not contained inside an elemMatch, 'pathPrefix' contains the','line_number':112,'multiline':False]['text':' part of 'path' prior to the first dot. For example, if 'path' is','line_number':113,'multiline':False]['text':' "a.b.c", then 'pathPrefix' is "a". If 'path' is just "a", then','line_number':114,'multiline':False]['text':' 'pathPrefix' is also "a".','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' If tagging a predicate contained in an $elemMatch, 'pathPrefix'','line_number':117,'multiline':False]['text':' holds the prefix of the path *inside* the $elemMatch. If this','line_number':118,'multiline':False]['text':' tags predicate {a: {$elemMatch: {"b.c": {$gt: 1}}}}, then','line_number':119,'multiline':False]['text':' 'pathPrefix' is "b".','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':' Used by the plan enumerator to make sure that we never','line_number':122,'multiline':False]['text':' compound two predicates sharing a path prefix.','line_number':123,'multiline':False]['text':'*
 * An OrPushdownTag indicates that this node is a predicate that can be used inside of a sibling
 * indexed OR.
 ','line_number':150,'multiline':True]['text':'*
     * A destination to which this predicate should be pushed down, consisting of a route through
     * the sibling indexed OR, and the tag the predicate should receive after it is pushed down.
     ','line_number':156,'multiline':True]['text':'*
         * The route along which the predicate should be pushed down. This starts at the
         * indexed OR sibling of the predicate. Each value in 'route' is the index of a child in
         * an indexed OR.
         * For example, if the MatchExpression tree is:
         *         AND
         *        /    \
         *   {a: 5}    OR
         *           /    \
         *         AND    {e: 9}
         *       /     \
         *    {b: 6}   OR
         *           /    \
         *       {c: 7}  {d: 8}
         * and the predicate is {a: 5}, then the path {0, 1} means {a: 5} should be
         * AND-combined with {d: 8}.
         ','line_number':182,'multiline':True]['text':' The TagData that the predicate should be tagged with after it is pushed down.','line_number':201,'multiline':False]['text':'*
     *  Releases ownership of the destinations.
     ','line_number':237,'multiline':True]['text':' The index tag the predicate should receive at its current position in the tree.','line_number':261,'multiline':False]['text':'
 * Reorders the nodes according to their tags as needed for access planning. 'tree' should be a
 * tagged MatchExpression tree in canonical order.
 ','line_number':265,'multiline':True]['text':' namespace mongo','line_number':271,'multiline':False]