['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This failpoint is also accessed by the SBE executor so we define it outside of an anonymous','line_number':92,'multiline':False]['text':' namespace.','line_number':93,'multiline':False]['text':'*
 * Constructs a PlanYieldPolicy based on 'policy'.
 ','line_number':98,'multiline':True]['text':' namespace','line_number':125,'multiline':False]['text':' If we don't yet have a namespace string, then initialize it from either 'collection' or','line_number':153,'multiline':False]['text':' '_cq'.','line_number':154,'multiline':False]['text':' There's no point in yielding if the collection doesn't exist.','line_number':166,'multiline':False]['text':' If this PlanExecutor is executing a COLLSCAN, keep a pointer directly to the COLLSCAN','line_number':199,'multiline':False]['text':' stage. This is used for change streams in order to keep the the latest oplog timestamp','line_number':200,'multiline':False]['text':' and post batch resume token up to date as the oplog scan progresses.','line_number':201,'multiline':False]['text':' First check if we need to do subplanning.','line_number':210,'multiline':False]['text':' If we didn't have to do subplanning, we might still have to do regular','line_number':217,'multiline':False]['text':' multi plan selection...','line_number':218,'multiline':False]['text':' ...or, we might have to run a plan from the cache for a trial period, falling back on','line_number':225,'multiline':False]['text':' regular planning if the cached plan performs poorly.','line_number':226,'multiline':False]['text':' Finally, we might have an explicit TrialPhase. This specifies exactly two candidate','line_number':233,'multiline':False]['text':' plans, one of which is to be evaluated. If it fails the trial, then the backup plan is','line_number':234,'multiline':False]['text':' adopted.','line_number':235,'multiline':False]['text':' Either we chose a plan, or no plan selection was required. In both cases,','line_number':242,'multiline':False]['text':' our work has been successfully completed.','line_number':243,'multiline':False]['text':' Return a reference to an empty static array. This array will never contain any elements','line_number':264,'multiline':False]['text':' because a PlanExecutorImpl is only capable of executing against a single namespace. As','line_number':265,'multiline':False]['text':' such, it will never lock more than one namespace.','line_number':266,'multiline':False]['text':' Handles retries by calling restoreStateWithoutRetrying() in a loop.','line_number':295,'multiline':False]['text':' We're reattaching for a getMore now.  Reset the yield timer in order to prevent from','line_number':328,'multiline':False]['text':' yielding again right away.','line_number':329,'multiline':False]['text':' The below are incremented on every WriteConflict or TemporarilyUnavailable error accordingly,','line_number':379,'multiline':False]['text':' and reset to 0 on any successful call to _root->work.','line_number':380,'multiline':False]['text':' Capped insert data; declared outside the loop so we hold a shared pointer to the capped','line_number':384,'multiline':False]['text':' insert notifier the entire time we are in the loop.  Holding a shared pointer to the','line_number':385,'multiline':False]['text':' capped insert notifier is necessary for the notifierVersion to advance.','line_number':386,'multiline':False]['text':' We always construct the insert_listener::Notifier for awaitData cursors.','line_number':389,'multiline':False]['text':' These are the conditions which can cause us to yield:','line_number':393,'multiline':False]['text':'   1) The yield policy's timer elapsed, or','line_number':394,'multiline':False]['text':'   2) some stage requested a yield, or','line_number':395,'multiline':False]['text':'   3) we need to yield and retry due to a WriteConflictException.','line_number':396,'multiline':False]['text':' In all cases, the actual yielding happens here.','line_number':397,'multiline':False]['text':' If we yielded because we encountered a sharding critical section, wait for the','line_number':400,'multiline':False]['text':' critical section to end before continuing. By waiting for the critical section to be','line_number':401,'multiline':False]['text':' exited we avoid busy spinning immediately and encountering the same critical section','line_number':402,'multiline':False]['text':' again. It is important that this wait happens after having released the lock','line_number':403,'multiline':False]['text':' hierarchy -- otherwise deadlocks could happen, or the very least, locks would be','line_number':404,'multiline':False]['text':' unnecessarily held while waiting.','line_number':405,'multiline':False]['text':' TODO: currently snapshot ids are only associated with documents, and','line_number':437,'multiline':False]['text':' not with index keys.','line_number':438,'multiline':False]['text':' transfer the metadata from the WSM to Document.','line_number':456,'multiline':False]['text':' This result didn't have the data the caller wanted, try again.','line_number':471,'multiline':False]['text':' We're yielding because of a WriteConflictException.','line_number':494,'multiline':False]['text':' Yield next time through the loop.','line_number':507,'multiline':False]['text':' Fall through to yield check at end of large conditional.','line_number':511,'multiline':False]['text':' The !notifier check is necessary because shouldWaitForInserts can return 'true' when','line_number':525,'multiline':False]['text':' shouldListenForInserts returned 'false' (above) in the case of a deadline becoming','line_number':526,'multiline':False]['text':' "unexpired" due to the system clock going backwards.','line_number':527,'multiline':False]['text':' There may be more results, keep going.','line_number':535,'multiline':False]['text':' If killed multiple times, only retain the first status.','line_number':548,'multiline':False]['text':' Did we update at least one obj? ','line_number':591,'multiline':True]['text':' Is this a $mod update? ','line_number':592,'multiline':True]['text':' number of modified docs, no no-ops ','line_number':593,'multiline':True]['text':' # of docs matched/updated, even no-ops ','line_number':594,'multiline':True]['text':' If we're updating a non-existent collection, then the delete plan may have an EOF as the','line_number':599,'multiline':False]['text':' root stage.','line_number':600,'multiline':False]['text':' If the collection exists, then we expect the root of the plan tree to either be an update','line_number':606,'multiline':False]['text':' stage, or (for findAndModify) a projection stage wrapping an update / TS_MODIFY stage.','line_number':607,'multiline':False]['text':' Did we update at least one obj? ','line_number':632,'multiline':True]['text':' Is this a $mod update? ','line_number':633,'multiline':True]['text':' number of modified docs, no no-ops ','line_number':634,'multiline':True]['text':' # of docs matched/updated, even no-ops ','line_number':635,'multiline':True]['text':' objInserted ','line_number':636,'multiline':True]['text':' If we're deleting from a non-existent collection, then the delete plan may have an EOF as','line_number':655,'multiline':False]['text':' the root stage.','line_number':656,'multiline':False]['text':' If the collection exists, the delete plan may either have a delete stage at the root, or','line_number':661,'multiline':False]['text':' (for findAndModify) a projection stage wrapping a delete / TS_MODIFY stage.','line_number':662,'multiline':False]['text':' If we're deleting on a non-existent collection, then the delete plan may have an EOF as the','line_number':700,'multiline':False]['text':' root stage.','line_number':701,'multiline':False]['text':' If the collection exists, we expect the root of the plan tree to be a batched delete stage.','line_number':708,'multiline':False]['text':' Note: findAndModify is incompatible with the batched delete stage so no need to handle','line_number':709,'multiline':False]['text':' projection stage wrapping.','line_number':710,'multiline':False]['text':' If this PlanExecutor is simply unspooling queued data, then there is no need to acquire','line_number':743,'multiline':False]['text':' locks.','line_number':744,'multiline':False]['text':' namespace mongo','line_number':766,'multiline':False]