['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This failpoint is defined by the classic executor but is also accessed here.','line_number':79,'multiline':False]['text':' The PlanExecutor keeps an extra reference to the last object pulled out of the PlanStage','line_number':135,'multiline':False]['text':' tree. This is because we want to ensure that the caller of PlanExecutor::getNext() does','line_number':136,'multiline':False]['text':' not free the object and leave a dangling pointer in the PlanStage tree.','line_number':137,'multiline':False]['text':' Callers are allowed to disable yielding for this plan by passing a null yield policy.','line_number':141,'multiline':False]['text':' Clear any formerly registered plans and register '_root' to yield. This is needed because','line_number':143,'multiline':False]['text':' multiple candidate plans may have been registered during runtime planning, before the','line_number':144,'multiline':False]['text':' PlanExecutor was created. All but one candidate plan ('_root') have since been discarded.','line_number':145,'multiline':False]['text':' If we're not in explain mode, there is no need to keep rejected candidate plans around.','line_number':152,'multiline':False]['text':' Keep only rejected candidate plans.','line_number':155,'multiline':False]['text':' NOT relinquishing cursor ','line_number':185,'multiline':True]['text':' Put the RU into 'kCommit' mode so that subsequent calls to abandonSnapshot() keep','line_number':187,'multiline':False]['text':' cursors positioned. This ensures that no pointers into memory owned by the storage','line_number':188,'multiline':False]['text':' engine held by the SBE PlanStage tree become invalid while the executor is in a saved','line_number':189,'multiline':False]['text':' state.','line_number':190,'multiline':False]['text':' Discard the slots as we won't access them before subsequent PlanExecutorSBE::getNext()','line_number':194,'multiline':False]['text':' method call.','line_number':195,'multiline':False]['text':' NOT relinquishing cursor ','line_number':219,'multiline':True]['text':' Put the RU back into 'kAbort' mode. Since the executor is now in a restored state, calls','line_number':221,'multiline':False]['text':' to doAbandonSnapshot() only happen if the query has failed and the executor will not be','line_number':222,'multiline':False]['text':' used again. In this case, we do not rely on the guarantees provided by 'kCommit' mode.','line_number':223,'multiline':False]['text':' relinquish cursor ','line_number':226,'multiline':True]['text':' If killed multiple times, only retain the first status.','line_number':244,'multiline':False]['text':' If we had stashed elements and consumed them all, but the PlanStage is also','line_number':323,'multiline':False]['text':' already exhausted, we can return EOF straight away. Otherwise, proceed with','line_number':324,'multiline':False]['text':' fetching the next document.','line_number':325,'multiline':False]['text':' Capped insert data; declared outside the loop so we hold a shared pointer to the capped','line_number':333,'multiline':False]['text':' insert notifier the entire time we are in the loop. Holding a shared pointer to the capped','line_number':334,'multiline':False]['text':' insert notifier is necessary for the notifierVersion to advance.','line_number':335,'multiline':False]['text':' The !notifier check is necessary because shouldWaitForInserts can return 'true' when','line_number':387,'multiline':False]['text':' shouldListenForInserts returned 'false' (above) in the case of a deadline becoming','line_number':388,'multiline':False]['text':' "unexpired" due to the system clock going backwards.','line_number':389,'multiline':False]['text':' There may be more results, keep going.','line_number':396,'multiline':False]['text':' This basically means that the 'Document' is just a wrapper around BSON','line_number':411,'multiline':False]['text':' returned by the plan. In this case, 'out' must own it.','line_number':412,'multiline':False]['text':' 'Document' was created from 'sbe::Object' and there is no backing BSON for','line_number':416,'multiline':False]['text':' it.','line_number':417,'multiline':False]['text':' Explicitly instantiate the only 2 types supported by 'PlanExecutorSBE::getNextImpl'.','line_number':426,'multiline':False]['text':' namespace','line_number':604,'multiline':False]['text':' The query is supposed to return an object.','line_number':791,'multiline':False]['text':' NOTE: We intentionally do not expose overload for the 'Document' type. The only interface to get','line_number':829,'multiline':False]['text':' result from plan in 'Document' type is to call 'PlanExecutorSBE::getNextDocument()'.','line_number':830,'multiline':False]['text':' Sending an empty MetaDataAccessor because we currently only deal with search related','line_number':837,'multiline':False]['text':' metadata, and search query won't reach here.','line_number':838,'multiline':False]['text':' namespace mongo','line_number':841,'multiline':False]