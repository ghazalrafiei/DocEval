['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Returns true if an ICU collator compares 'lessThan' as smaller than 'greaterThan'. Verifies that','line_number':86,'multiline':False]['text':' the comparison is correct using the compare() function directly and using comparison keys.','line_number':87,'multiline':False]['text':' Returns true if an ICU collator compares 'left' and 'right' as equal. Verifies that','line_number':93,'multiline':False]['text':' the comparison is correct using the compare() function directly and using comparison keys.','line_number':94,'multiline':False]['text':' Returns true if an ICU collator compares 'left' and 'right' as non-equal. Verifies that','line_number':100,'multiline':False]['text':' the comparison is correct using the compare() function directly and using comparison keys.','line_number':101,'multiline':False]['text':' Both one-byte sequences are invalid.','line_number':425,'multiline':False]['text':' U+0823 ("samaritan vowel sign a") with last byte missing.','line_number':434,'multiline':False]['text':' Impossible byte compared against U+0823 ("samaritan vowel sign a") with last byte missing.','line_number':439,'multiline':False]['text':' U+002F is the ASCII character "/", which should usually be represented as \x2F. The','line_number':444,'multiline':False]['text':' representation \xC0\xAF is an unnecessary two-byte encoding of this codepoint.','line_number':445,'multiline':False]['text':' The two-byte sequence \xC0\x80 decodes to U+0000, which should instead be encoded using a','line_number':450,'multiline':False]['text':' single null byte.','line_number':451,'multiline':False]['text':' U+D800','line_number':456,'multiline':False]['text':' U+DBFF','line_number':458,'multiline':False]['text':' U+DFFF','line_number':460,'multiline':False]['text':' U+D800, U+DC00','line_number':462,'multiline':False]['text':' U+DB80, U+DFFF','line_number':464,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla").','line_number':469,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla") with an unexpected continuation byte.','line_number':471,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla") followed by the replacement character, U+FFFD.','line_number':473,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla").','line_number':491,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla") with two unexpected continuation bytes.','line_number':493,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla") followed by two replacement characters.','line_number':495,'multiline':False]['text':' First possible valid one-byte code point, U+0000.','line_number':504,'multiline':False]['text':' First possible valid two-byte code point, U+0080.','line_number':506,'multiline':False]['text':' First possible valid three-byte code point, U+0800.','line_number':508,'multiline':False]['text':' First possible valid four-byte code point, U+00010000.','line_number':510,'multiline':False]['text':' Last possible valid one-byte code point, U+007F.','line_number':515,'multiline':False]['text':' Last possible valid two-byte code point, U+07FF.','line_number':517,'multiline':False]['text':' Last possible valid three-byte code point, U+FFFF.','line_number':519,'multiline':False]['text':' Largest valid code point, U+0010FFFF.','line_number':521,'multiline':False]['text':' Largest valid code point is U+0010FFFF; U+001FFFFF is higher, and is the last possible valid','line_number':526,'multiline':False]['text':' four byte sequence.','line_number':527,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), follwed by invalid byte \xEF, followed by','line_number':532,'multiline':False]['text':' U+0145 ("latin capital letter n with cedilla").','line_number':533,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), follwed by unexpected continuation byte \x80,','line_number':535,'multiline':False]['text':' followed by U+0145 ("latin capital letter n with cedilla").','line_number':536,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), followed by the replacement character, followed','line_number':538,'multiline':False]['text':' by U+0145 ("latin capital letter n with cedilla").','line_number':539,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), followed by U+0146 ("latin small letter n','line_number':548,'multiline':False]['text':' with cedilla").','line_number':549,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), followed by U+0145 ("latin capital letter n','line_number':551,'multiline':False]['text':' with cedilla").','line_number':552,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), follwed by unexpected continuation byte \x80,','line_number':555,'multiline':False]['text':' followed by U+0146 ("latin small letter n with cedilla").','line_number':556,'multiline':False]['text':' U+0123 ("latin small letter g with cedilla"), follwed by invalid byte \xEF, followed by','line_number':558,'multiline':False]['text':' U+0145 ("latin capital letter n with cedilla").','line_number':559,'multiline':False]['text':' Invalid strings are always greater than valid strings, since the replacement character (which','line_number':565,'multiline':False]['text':' replaces the invalid byte) compares greater than U+0145 and U+0146.','line_number':566,'multiline':False]['text':' namespace','line_number':601,'multiline':False]