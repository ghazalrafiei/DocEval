['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * An ordered list of intervals for one field.
 ','line_number':51,'multiline':True]['text':' Must be ordered according to the index order.','line_number':58,'multiline':False]['text':'*
     * Generates a debug string for an interval. If 'hasNonSimpleCollation' is true, then string
     * bounds are hex-encoded.
     ','line_number':64,'multiline':True]['text':'*
     * Complements the OIL. Used by the index bounds builder in order
     * to create index bounds for $not predicates.
     *
     * Assumes the OIL is increasing, and therefore must be called prior to
     * alignBounds(...).
     *
     * Example:
     *   The complement of [3, 6), [8, 10] is [MinKey, 3), [6, 8), (20, MaxKey],
     *   where this OIL has direction==1.
     ','line_number':70,'multiline':True]['text':'*
     * Return a clone of this OIL, that is reversed.
     ','line_number':88,'multiline':True]['text':'*
     * Returns true if this OIL represents a single [MinKey, MaxKey] bound.
     ','line_number':95,'multiline':True]['text':'*
     * Returns true if this OIL represents a single [MaxKey, MinKey] bound.
     ','line_number':100,'multiline':True]['text':'*
     * Returns true if this OIL represents a point predicate: [N, N].
     *
     * These predicates are interesting because if you have an index on {a:1, b:1},
     * and a point predicate on 'a', then the index provides a sort on {b: 1}.
     ','line_number':105,'multiline':True]['text':'*
     * Returns true if this OIL contains only point intervals (such as [N, N]).
     ','line_number':113,'multiline':True]['text':'*
 * Tied to an index.  Permissible values for all fields in the index.  Requires the index to
 * interpret.  Previously known as FieldRangeVector.
 ','line_number':126,'multiline':True]['text':' For each indexed field, the values that the field is allowed to take on.','line_number':133,'multiline':False]['text':' Debugging check.','line_number':136,'multiline':False]['text':' We must have as many fields the key pattern does.','line_number':137,'multiline':False]['text':' The fields must be oriented in the direction we'd encounter them given the indexing','line_number':138,'multiline':False]['text':' direction (the value of the field in keyPattern) and index traversal direction provided','line_number':139,'multiline':False]['text':' by 'direction'.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' An example: [7, 20]','line_number':142,'multiline':False]['text':' We can traverse this forward if indexed ascending','line_number':143,'multiline':False]['text':' We can traverse this backwards if indexed descending.','line_number':144,'multiline':False]['text':' Methods below used for debugging purpose only. Do not use outside testing code.','line_number':147,'multiline':False]['text':'*
     * Generates a debug string displaying the index bounds. If 'hasNonSimpleCollation' is true,
     * then string bounds are hex-encoded.
     ','line_number':152,'multiline':True]['text':'*
     * Returns if the start key should be included in the bounds specified by the given
     * BoundInclusion.
     ','line_number':161,'multiline':True]['text':'*
     * Returns if the end key should be included in the bounds specified by the given
     * BoundInclusion.
     ','line_number':167,'multiline':True]['text':'*
     * Returns a BoundInclusion given two booleans of whether to included the start key and the end
     * key.
     ','line_number':173,'multiline':True]['text':'*
     * Reverse the BoundInclusion.
     ','line_number':180,'multiline':True]['text':'*
     * BSON format for explain. The format is an array of strings for each field.
     * Each string represents an interval. The strings use "[" and "]" if the interval
     * bounds are inclusive, and "(" / ")" if exclusive.
     *
     * Ex.
     *  {a: ["[1, 1]", "(3, 10)"], b: ["[Infinity, 10)"] }
     *
     * If the index bounds are associated with a collation ('hasNonSimpleCollation'), then we will
     * hex-encode the collation keys.
     ','line_number':186,'multiline':True]['text':'*
     * Return a copy of the index bounds, but with each of the OILs going in the ascending
     * direction.
     ','line_number':199,'multiline':True]['text':'*
     * Return a copy of the index bounds that has each OIL going in the direction opposite to its
     * direction in this IndexBounds.
     ','line_number':205,'multiline':True]['text':'*
     * Returns whether these index bounds represent being unbounded.
     ','line_number':211,'multiline':True]['text':' TODO: we use this for max/min scan.  Consider migrating that.','line_number':222,'multiline':False]['text':' namespace sbe::size_estimator','line_number':232,'multiline':False]['text':'*
 * A helper used by IndexScan to navigate an index.
 ','line_number':234,'multiline':True]['text':'*
     * keyPattern is the index that we're iterating over.
     * bounds are the bounds we're allowed to iterate over.
     * direction is the direction we're moving over the index, 1 or -1.
     *
     * Bounds not owned by us.
     ','line_number':239,'multiline':True]['text':'*
     * Get the IndexSeekPoint that we should with.
     *
     * Returns false if there are no possible index entries that match the bounds. In this case
     * there is no valid start point to seek to so out will not be filled out and the caller
     * should emit no results.
     ','line_number':249,'multiline':True]['text':'*
     * The states of a key from an index scan.  See checkKey below.
     ','line_number':258,'multiline':True]['text':'*
     * Is 'key' a valid key?  Note that this differs from checkKey, which assumes that it
     * receives keys in sorted order.
     ','line_number':267,'multiline':True]['text':'*
     * This function checks if the key is within the bounds we're iterating over and updates any
     * internal state required to efficiently determine if the key is within our bounds.
     *
     * Possible outcomes:
     *
     * 1. The key is in our bounds.  Returns VALID.  Caller can use the data associated with the
     * key.
     *
     * 2. The key is not in our bounds but has not exceeded the maximum value in our bounds.
     * Returns MUST_ADVANCE.  Caller must advance to the query provided in the out parameters
     * and call checkKey again.
     *
     * 3. The key is past our bounds.  Returns DONE.  No further keys will satisfy the bounds
     * and the caller should stop.
     *
     * keyEltsToUse, movePastKeyElts, out, and incOut must all be non-NULL.
     * out and incOut must already be resized to have as many elements as the key has fields.
     *
     * In parameters:
     * currentKey is the index key.
     *
     * Out parameter only valid if we return MUST_ADVANCE.
     ','line_number':273,'multiline':True]['text':'*
     * Relative position of a key to an interval.
     * Exposed for testing only.
     ','line_number':299,'multiline':True]['text':'*
     * If 'elt' is in any interval, return WITHIN and set 'newIntervalIndex' to the index of the
     * interval in the ordered interval list.
     *
     * If 'elt' is not in any interval but could be advanced to be in one, return BEHIND and set
     * 'newIntervalIndex' to the index of the interval that 'elt' could be advanced to.
     *
     * If 'elt' cannot be advanced to any interval, return AHEAD.
     *
     * Exposed for testing only.
     *
     * TODO(efficiency): Start search from a given index.
     ','line_number':309,'multiline':True]['text':'*
     * Find the first field in the key that isn't within the interval we think it is.  Returns
     * false if every field is in the interval we think it is.  Returns true and populates out
     * parameters if a field isn't in the interval we think it is.
     *
     * Out parameters set if we return true:
     * 'where' is the leftmost field that isn't in the interval we think it is.
     * 'what' is the orientation of the field with respect to that interval.
     ','line_number':328,'multiline':True]['text':'*
     * Returns true if it's possible to advance any of the first 'fieldsToCheck' fields of the
     * index key and still be within valid index bounds.
     *
     * keyValues are the elements of the index key in order.
     ','line_number':341,'multiline':True]['text':' The actual bounds.  Must outlive this object.  Not owned by us.','line_number':349,'multiline':False]['text':' For each field, which interval are we currently in?','line_number':352,'multiline':False]['text':' Direction of scan * direction of indexing.','line_number':355,'multiline':False]['text':' namespace mongo','line_number':363,'multiline':False]