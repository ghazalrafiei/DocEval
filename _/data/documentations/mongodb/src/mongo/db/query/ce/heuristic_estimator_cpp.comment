['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':47,'multiline':False]['text':'*
 * Heuristic selectivity estimation for EvalFilter nodes. Used for estimating cardinalities of
 * FilterNodes. The estimate is computed by traversing the tree bottom-up, applying default
 * selectivity functions to atomic predicates (comparisons), and combining child selectivities of
 * disjunctions and conjunctions via simple addition and multiplication.
 ','line_number':57,'multiline':True]['text':'*
     * Helper class for holding values passed from child to parent nodes when traversing the tree.
     ','line_number':65,'multiline':True]['text':' Each item represents a field in a dotted path.','line_number':69,'multiline':False]['text':' Collected while traversing a path expression.','line_number':70,'multiline':False]['text':' Used for deciding whether a conjunction of comparisons is an interval or not.','line_number':71,'multiline':False]['text':' When handling a PathComposeM, we need to access its child comparisons which might be','line_number':73,'multiline':False]['text':' hidden under path expressions.','line_number':74,'multiline':False]['text':' The selectivity estimate.','line_number':76,'multiline':False]['text':'node','line_number':80,'multiline':True]['text':'inputCard','line_number':81,'multiline':True]['text':'inputResult','line_number':83,'multiline':True]['text':'inputCard','line_number':88,'multiline':True]['text':'inputCard','line_number':95,'multiline':True]['text':'childResult','line_number':102,'multiline':True]['text':' Note that the result will be ignored if this operation is part of an interval.','line_number':103,'multiline':False]['text':'inputCard','line_number':123,'multiline':True]['text':'inputCard','line_number':133,'multiline':True]['text':'inputCard','line_number':139,'multiline':True]['text':'inputCard','line_number':145,'multiline':True]['text':' If we see negation (-) in a UnaryOp, we ignore it for CE purposes.','line_number':152,'multiline':False]['text':'node','line_number':159,'multiline':True]['text':'inputCard','line_number':160,'multiline':True]['text':' We have a $exists predicate on this path. Constant[false] represents {$exists:','line_number':170,'multiline':False]['text':' true} whereas Constant[true] represents {$exists: false} here. Note that','line_number':171,'multiline':False]['text':' Constant[true] usually comes from NotPushdown which push down a higher negation','line_number':172,'multiline':False]['text':' through PathDefault.','line_number':173,'multiline':False]['text':'node','line_number':182,'multiline':True]['text':' We sum the selectivities and subtract the overlapping part so that it's only counted','line_number':198,'multiline':False]['text':' once.','line_number':199,'multiline':False]['text':'bindResult','line_number':206,'multiline':True]['text':' Default cardinality estimate.','line_number':207,'multiline':False]['text':'bindResult','line_number':213,'multiline':True]['text':'exprResult','line_number':223,'multiline':True]['text':' Early out and return 0 since we don't expect to get more results.','line_number':225,'multiline':False]['text':' Trivially true filter.','line_number':229,'multiline':False]['text':' Trivially false filter.','line_number':233,'multiline':False]['text':'exprResult','line_number':243,'multiline':True]['text':' Evaluations do not change cardinality.','line_number':244,'multiline':False]['text':'bindsResult','line_number':250,'multiline':True]['text':'refsResult','line_number':251,'multiline':True]['text':' Early out and return 0 since we don't expect to get more results.','line_number':252,'multiline':False]['text':'leftChildResult','line_number':278,'multiline':True]['text':'rightChildResult','line_number':279,'multiline':True]['text':' CE for the group should already be derived via the underlying Filter or Evaluation','line_number':280,'multiline':False]['text':' logical nodes.','line_number':281,'multiline':False]['text':'leftChildResult','line_number':286,'multiline':True]['text':'rightChildResult','line_number':287,'multiline':True]['text':'bindResult','line_number':288,'multiline':True]['text':'refsResult','line_number':289,'multiline':True]['text':' CE for the group should already be derived via the underlying Filter or Evaluation','line_number':290,'multiline':False]['text':' logical nodes.','line_number':291,'multiline':False]['text':'exprResult','line_number':298,'multiline':True]['text':'bindResult','line_number':312,'multiline':True]['text':'refsResult','line_number':313,'multiline':True]['text':' Combine the CE of each child.','line_number':314,'multiline':False]['text':'bindAggResult','line_number':324,'multiline':True]['text':'refsAggResult','line_number':325,'multiline':True]['text':'bindGbResult','line_number':326,'multiline':True]['text':'refsGbResult','line_number':327,'multiline':True]['text':' TODO: estimate number of groups.','line_number':328,'multiline':False]['text':' Global and Local selectivity should multiply to Complete selectivity.','line_number':333,'multiline':False]['text':'bindResult','line_number':346,'multiline':True]['text':'refsResult','line_number':347,'multiline':True]['text':'refsResult','line_number':351,'multiline':True]['text':' Collations do not change cardinality.','line_number':352,'multiline':False]['text':'refsResult','line_number':366,'multiline':True]['text':' Exchanges do not change cardinality.','line_number':367,'multiline':False]['text':'refsResult','line_number':371,'multiline':True]['text':' Root node does not change cardinality.','line_number':372,'multiline':False]['text':'*
     * Other ABT types.
     ','line_number':376,'multiline':True]['text':'node','line_number':380,'multiline':True]['text':' We don't own this.','line_number':396,'multiline':False]['text':'logicalProps','line_number':403,'multiline':True]['text':'queryParameters','line_number':404,'multiline':True]['text':' namespace mongo::optimizer::ce','line_number':409,'multiline':False]