['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Query execution helper. Runs the argument function 'f'. If 'f' throws an exception other than
 * 'WriteConflictException' or 'TemporarilyUnavailableException', then these exceptions escape
 * this function. In contrast 'WriteConflictException' or 'TemporarilyUnavailableException' are
 * caught, the given 'yieldHandler' is run, and the helper returns PlanStage::NEED_YIELD.
 *
 * In a multi-document transaction, it rethrows a TemporarilyUnavailableException as a
 * WriteConflictException.
 ','line_number':69,'multiline':True]['text':' Surface error on primaries.','line_number':102,'multiline':False]['text':' If an operation succeeds on primary, it should always be retried on secondaries.','line_number':106,'multiline':False]['text':' Secondaries always retry TemporarilyUnavailableExceptions and WriteConflictExceptions','line_number':107,'multiline':False]['text':' indefinitely, the only difference being the rate of retry. We prefer retrying faster, by','line_number':108,'multiline':False]['text':' converting to WriteConflictException, to avoid stalling replication longer than','line_number':109,'multiline':False]['text':' necessary.','line_number':110,'multiline':False]['text':'*
     * Callers should obtain PlanExecutorImpl instances uses the 'plan_executor_factory' methods, in
     * order to avoid depending directly on this concrete implementation of the PlanExecutor
     * interface.
     ','line_number':125,'multiline':True]['text':'*
     * Same as restoreState() but without the logic to retry if a WriteConflictException is thrown.
     *
     * This is only public for PlanYieldPolicy. DO NOT CALL ANYWHERE ELSE.
     ','line_number':174,'multiline':True]['text':'*
     * Return a pointer to this executor's MultiPlanStage, or nullptr if it does not have one.
     ','line_number':181,'multiline':True]['text':'*
     *  Executes the underlying PlanStage tree until it indicates EOF. Throws an exception if the
     *  plan results in an error.
     *
     *  Useful for cases where the caller wishes to execute the plan and extract stats from it (e.g.
     *  the result of a count or update) rather than returning a set of resulting documents.
     ','line_number':200,'multiline':True]['text':'*
     * Called on construction in order to ensure that when callers receive a new instance of a
     * 'PlanExecutorImpl', plan selection has already been completed.
     *
     * If the tree contains plan selection stages, such as MultiPlanStage or SubplanStage,
     * this calls into their underlying plan selection facilities. Otherwise, does nothing.
     *
     * If a YIELD_AUTO policy is set then locks are yielded during plan selection.
     *
     * Returns a non-OK status if query planning fails. In particular, this function returns
     * ErrorCodes::QueryPlanKilled if plan execution cannot proceed due to a concurrent write or
     * catalog operation.
     ','line_number':209,'multiline':True]['text':' The OperationContext that we're executing within. This can be updated if necessary by using','line_number':226,'multiline':False]['text':' detachFromOperationContext() and reattachToOperationContext().','line_number':227,'multiline':False]['text':' Note, this can be null. Some queries don't need a CanonicalQuery for planning. For example,','line_number':230,'multiline':False]['text':' aggregation queries create a PlanExecutor with no CanonicalQuery.','line_number':231,'multiline':False]['text':' When '_cq' is not null, this will point to the same ExpressionContext that is in the '_cq'','line_number':234,'multiline':False]['text':' object. Note that this pointer can also be null when '_cq' is null. For example a "list','line_number':235,'multiline':False]['text':' collections" query does not need a CanonicalQuery or ExpressionContext.','line_number':236,'multiline':False]['text':' If _killStatus has a non-OK value, then we have been killed and the value represents the','line_number':244,'multiline':False]['text':' reason for the kill.','line_number':245,'multiline':False]['text':' Whether the executor must return owned BSON.','line_number':248,'multiline':False]['text':' What namespace are we operating over?','line_number':251,'multiline':False]['text':' This is used to handle automatic yielding when allowed by the YieldPolicy. Never nullptr.','line_number':254,'multiline':False]['text':' A stash of results generated by this plan that the user of the PlanExecutor didn't want','line_number':257,'multiline':False]['text':' to consume yet. We empty the queue before retrieving further results from the plan','line_number':258,'multiline':False]['text':' stages.','line_number':259,'multiline':False]['text':' The output document that is used by getNext BSON API. This allows us to avoid constantly','line_number':262,'multiline':False]['text':' allocating and freeing DocumentStorage.','line_number':263,'multiline':False]['text':' A pointer either to a CollectionScan stage, if present in the execution tree, or nullptr','line_number':268,'multiline':False]['text':' otherwise. We cache it to avoid the need to traverse the execution tree in runtime when the','line_number':269,'multiline':False]['text':' executor is requested to return the oplog tracking info. Since this info is provided by','line_number':270,'multiline':False]['text':' either of these stages, the executor will simply delegate the request to the cached stage.','line_number':271,'multiline':False]['text':' namespace mongo','line_number':275,'multiline':False]