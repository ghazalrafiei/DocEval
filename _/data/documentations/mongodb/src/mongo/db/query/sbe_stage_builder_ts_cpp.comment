['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' The set of fields specified in a bucket spec contains the fields that should be available after','line_number':64,'multiline':False]['text':' bucket-level processing _and_ unpacking of this bucket is done. This means that it includes the','line_number':65,'multiline':False]['text':' fields that are computed from the 'metaField' before unpacking but these fields don't correspond','line_number':66,'multiline':False]['text':' to any cell paths, even if they have the same names, and we must exclude them from the cell path','line_number':67,'multiline':False]['text':' requirements. Note, that the 'metaField' itself is never included into the bucket spec's','line_number':68,'multiline':False]['text':' fieldSet, its usage is tracked by 'unpackNode->includeMeta' instead.','line_number':69,'multiline':False]['text':' For each path requested by the query we generate a 'topLevelPath' version, which is','line_number':77,'multiline':False]['text':' just the value of the top level field, with no traversal.','line_number':78,'multiline':False]['text':' The event filter must work on top of "traversed" version of the data, which, when accessed,','line_number':84,'multiline':False]['text':' has array elements flattened.','line_number':85,'multiline':False]['text':' Check that the collected path doesn't start from a metadata field, and that it's one','line_number':91,'multiline':False]['text':' of the fields that the query uses.','line_number':92,'multiline':False]['text':' If there are no required paths, the parent is expecting the unpacking to produce the same','line_number':109,'multiline':False]['text':' number of results as there are events in the bucket but it doesn't care about the result's','line_number':110,'multiline':False]['text':' shape. For example, this comes up with "count-like" queries that for some reason failed to','line_number':111,'multiline':False]['text':' optimize unpacking away completely. Ideally, we would check the bucket's count and produce','line_number':112,'multiline':False]['text':' that many empty objects, but the block stages aren't setup to do this easily so we will','line_number':113,'multiline':False]['text':' instead unpack the known-to-always-exist 'timeField' from the bucket without adding it to the','line_number':114,'multiline':False]['text':' outputs.','line_number':115,'multiline':False]['text':' TODO SERVER-80243: Remove this function once the stage builder is stable.','line_number':144,'multiline':False]['text':' namespace','line_number':154,'multiline':False]['text':' For this stage we output the 'topLevelSlots' (i.e. kField) and NOT the 'traversedSlots' (i.e.','line_number':158,'multiline':False]['text':' kFilterCellField).','line_number':159,'multiline':False]['text':' Adds the BlockToRowStage.','line_number':176,'multiline':False]['text':' Remove all the slots that should not be propagated.','line_number':187,'multiline':False]['text':' After the BlockToRow stage, the block fields are now scalar values, in a different slot.','line_number':192,'multiline':False]['text':' Prepare a temporary object to expose the block variables as scalar types.','line_number':209,'multiline':False]['text':' We consider constant expressions as compatible with block processing.','line_number':221,'multiline':False]['text':' If we have an active bitmap, let the vectorizer know.','line_number':229,'multiline':False]['text':' Run the conversion from ABT to EExpression without the information about the type','line_number':240,'multiline':False]['text':' of the slots, as they are now block variables that are not supported by the type','line_number':241,'multiline':False]['text':' checker. Report just the type of the root expression as reported by the','line_number':242,'multiline':False]['text':' vectorizer.','line_number':243,'multiline':False]['text':' Setup the request for the child stage that should place the bucket to be unpacked into the','line_number':257,'multiline':False]['text':' kResult slot.','line_number':258,'multiline':False]['text':' Computing fields from 'meta' should have been pushed below unpacking as projection stages','line_number':260,'multiline':False]['text':' over the buckets collection, so the child stage must be able to publish the slots.','line_number':261,'multiline':False]['text':' We have no way to know whether the child stages would produce the 'meta' field at the bucket','line_number':266,'multiline':False]['text':' level (e.g. they would, if there is a filter on 'meta'), but if we need the field after','line_number':267,'multiline':False]['text':' unpacking we might as well request it from the child rather than populate it ourselves.','line_number':268,'multiline':False]['text':' Build the child tree.','line_number':274,'multiline':False]['text':' We'll publish to the 'outputs' all slots, produced by the tree built in this function, even','line_number':277,'multiline':False]['text':' if they are not requested explicitly by the parent stage. There is no harm in over-','line_number':278,'multiline':False]['text':' publishing but it's convenient to use unified 'outputs' while building the tree.','line_number':279,'multiline':False]['text':' The set of the fields visible to the parent stage is ultimately defined by the 'unpackNode'.','line_number':280,'multiline':False]['text':' However, the parent stage might requests field that are not published (e.g. field "b" in','line_number':281,'multiline':False]['text':' pipeline like [{$project: {c: 1}},{$replaceRoot: {newRoot: {z: "$b"}}}]). We'll have to deal','line_number':282,'multiline':False]['text':' with this if we are not producing a 'kResult' (see later in this function).','line_number':283,'multiline':False]['text':' Propagate the 'meta' and fields computed from 'meta' into the 'outputs'.','line_number':286,'multiline':False]['text':' The 'TsBucketToCellBlockStage' and 'BlockToRowStage' together transform a single bucket into','line_number':299,'multiline':False]['text':' a sequence of "rows" with fields, extracted from the bucket's data. The stages between these','line_number':300,'multiline':False]['text':' two do block processing over the cells.','line_number':301,'multiline':False]['text':' metaField slot','line_number':315,'multiline':True]['text':' Declare the top level fields produced as block values.','line_number':320,'multiline':False]['text':' Declare the traversed fields which can be used for evaluating $match.','line_number':334,'multiline':False]['text':' It's possible for the event filter to be applied on fields that aren't being unpacked (the','line_number':351,'multiline':False]['text':' simplest case of such pipeline: [{$project: {x: 1}},{$match: {y: 42}}]). We'll stub out the','line_number':352,'multiline':False]['text':' non-produced fields with the 'Nothing' slot.','line_number':353,'multiline':False]['text':'rootSlot','line_number':369,'multiline':True]['text':' The expression is a scalar constant, it must be a boolean value.','line_number':374,'multiline':False]['text':' We successfully created an expression working on the block values and','line_number':389,'multiline':False]['text':' returning a block of boolean values; attach it to a project stage and use','line_number':390,'multiline':False]['text':' the result as the bitmap for the BlockToRow stage.','line_number':391,'multiline':False]['text':' Add a filter stage that pulls new data if there isn't at least one 'true' value','line_number':400,'multiline':False]['text':' in the produced bitmap.','line_number':401,'multiline':False]['text':' Reset the variable so that the filter is not generated as a stage in the','line_number':414,'multiline':False]['text':' scalar section of the pipeline.','line_number':415,'multiline':False]['text':' Insert a BlockToRow stage and let the rest of the pipeline work on scalar values if:','line_number':421,'multiline':False]['text':' - we have a filter that we could not vectorize','line_number':422,'multiline':False]['text':' - we are supposed to return a BSON result','line_number':423,'multiline':False]['text':' - the caller doesn't support working on block values','line_number':424,'multiline':False]['text':' Add filter stage(s) for the per-event filter.','line_number':429,'multiline':False]['text':' rootSlot ','line_number':432,'multiline':True]['text':' If the parent wants us to materialize kResult, create an object with all published fields.','line_number':440,'multiline':False]['text':' The outputs could contain the time field even when not requested, remove it.','line_number':445,'multiline':False]['text':' objSlot','line_number':464,'multiline':False]['text':' rootSlot','line_number':465,'multiline':False]['text':' fieldBehavior','line_number':466,'multiline':False]['text':' fields','line_number':467,'multiline':False]['text':' projectFields','line_number':468,'multiline':False]['text':' projectVars','line_number':469,'multiline':False]['text':' forceNewObject','line_number':470,'multiline':False]['text':' returnOldObject','line_number':471,'multiline':False]['text':' As we are not producing a result record, we must fulfill all reqs in a way that would be','line_number':474,'multiline':False]['text':' equivalent to fetching the same fields from 'kResult', that is, we'll map the fields to','line_number':475,'multiline':False]['text':' the environtment's 'Nothing' slot.','line_number':476,'multiline':False]['text':' namespace mongo::stage_builder','line_number':486,'multiline':False]