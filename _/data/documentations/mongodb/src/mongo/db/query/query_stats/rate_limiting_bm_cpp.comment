['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Local testing determined that these parameter values drove the most lock contention, which is','line_number':47,'multiline':False]['text':' what we want to capture in this benchmark.','line_number':48,'multiline':False]['text':' Rate limit some fraction of the overall work for a request with a sliding window.','line_number':54,'multiline':False]['text':' Represent a request that bypasses the rate limiter.','line_number':63,'multiline':False]['text':' Represent a request without the rate limited work.','line_number':70,'multiline':False]['text':' Benchmark sliding window rate limiting.','line_number':76,'multiline':False]['text':' The rate limiter needs a clock source passed in.','line_number':78,'multiline':False]['text':' Initialize the rate limiter only on the first thread to start up.','line_number':82,'multiline':False]['text':' Run the benchmark.','line_number':89,'multiline':False]['text':' Clean up the rate limiter when the benchmark is done.','line_number':94,'multiline':False]['text':' "Control" benchmark that does not rate limit requests. In other words, the extra work is always','line_number':101,'multiline':False]['text':' done for every request. This benchmark can be thought of as the "goal" performance for the peak,','line_number':102,'multiline':False]['text':' or the highest rate limit in BM_SlidingWindow, to compare against.','line_number':103,'multiline':False]['text':' Another control benchmark, where the extra work is never done for any request. This can be','line_number':109,'multiline':False]['text':' thought of as the goal performance for when rate limit equals 0.','line_number':110,'multiline':False]['text':' Google microbenchmarks report time T (in nanoseconds) spent per operation. But at Mongo we are','line_number':117,'multiline':False]['text':' interested in total opereations performed per second. The former can easily be converted to the','line_number':118,'multiline':False]['text':' latter by diving 10^6 by T. Use this benchmark to determine the natural throughput of the','line_number':119,'multiline':False]['text':' operation. This can be compared to the rate limited benchmarks (BM_SlidingWindow) to determine','line_number':120,'multiline':False]['text':' the overhead of rate limiting. Looking at the percentage change in throughput between the control','line_number':121,'multiline':False]['text':' benchmarks and the rate limited benchmark, will indicate how much overhead is due to lock','line_number':122,'multiline':False]['text':' contention.','line_number':123,'multiline':False]['text':' Local testing has confirmed that the higher the rate limit, the worse the throughput. This makes','line_number':128,'multiline':False]['text':' sense as putting a higher upper bound on number of requests allowed in a given time period, means','line_number':129,'multiline':False]['text':' longer wait times for the lock.','line_number':130,'multiline':False]['text':' namespace','line_number':143,'multiline':False]['text':' namespace mongo','line_number':144,'multiline':False]