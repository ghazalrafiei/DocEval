['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A leaf in the tree. Just contains data - in this case a double.
 ','line_number':54,'multiline':True]['text':'*
 * An inner node in the tree with exactly two children.
 ','line_number':64,'multiline':True]['text':'*
 * An inner node in the tree with any number of children, zero or greater.
 ','line_number':72,'multiline':True]['text':'*
 * An inner node in the tree with 2 or more nodes.
 ','line_number':80,'multiline':True]['text':'*
     * Notice the required number of nodes are given as separate arguments from the vector.
     ','line_number':85,'multiline':True]['text':'*
 * A visitor of the tree with methods to visit each kind of node.
 *
 * This is a very basic visitor to just demonstrate the transport() API - all it does is sum up
 * doubles in the leaf nodes of the tree.
 *
 * Notice that each kind of node did not need to fill out some boilerplate "visit()" method or
 * anything like that. The PolyValue templating magic took care of all the boilerplate for us, and
 * the operator classes (e.g. OpFixedArity) exposes the tree structure and children.
 ','line_number':92,'multiline':True]['text':'*
 * A visitor of the tree with methods to visit each kind of node. This visitor also takes a
 * reference to the Tree itself. Unused here, this reference can be used to mutate or replace the
 * node itself while the walking takes place.
 ','line_number':121,'multiline':True]['text':' Notice the template parameter true or false matches whether the walker expects to have a','line_number':152,'multiline':False]['text':' Tree& parameter first in the transport implementations.','line_number':153,'multiline':False]['text':' This 'true' template means we expect the 'Tree&' argument to come first in all the','line_number':156,'multiline':False]['text':' 'transport()' implementations.','line_number':157,'multiline':False]['text':'*
 * Prove out that the walking/visiting can hit the variadic NaryNode.
 ','line_number':173,'multiline':True]['text':'*
 * A visitor of the tree like those above but which takes const references so is forbidden from
 * modifying the tree or nodes.
 *
 * This visitor creates a copy of the tree but with the values at the leaves doubled.
 ','line_number':208,'multiline':True]['text':' Add all the same walkers with the optional 'tree' argument. Note this is also const.','line_number':233,'multiline':False]['text':' Test that we can create a copy of a tree and walk with a const transporter to provide extra','line_number':254,'multiline':False]['text':' proof that it's actually a deep copy.','line_number':255,'multiline':False]['text':' Notice 'simple' is const.','line_number':259,'multiline':False]['text':' Do the same test but walk with the tree reference (pass 'true' to transport).','line_number':272,'multiline':False]['text':' Notice 'simple' is const.','line_number':274,'multiline':False]['text':'*
 * A walker which accumulates all nodes into a std::set to demonstrate which nodes are visited.
 *
 * The order of the visitation is not guaranteed, except that we visit "bottom-up" so leaves must
 * happen before parents. This much must be true since the API to visit a node depends on the
 * results of its children being pre-computed.
 ','line_number':288,'multiline':True]['text':' 'visistedChild0' and 'visitedChild1' represent the accumulated results of their visited','line_number':304,'multiline':False]['text':' numbers. Here we just merge the two.','line_number':305,'multiline':False]['text':'*
 * Here we see a test which walks all the various types of nodes at once, and in this case
 * accumulates into a std::set any visited leaves.
 ','line_number':356,'multiline':True]['text':'*
 * A walker which accepts an extra 'multiplier' argument to each transport call.
 ','line_number':398,'multiline':True]['text':' No need to apply multiplier here, would be applied in the children already.','line_number':408,'multiline':False]['text':'*
 * A simple walker which trackes whether it has seen a zero. While the task is simple, this walker
 * demosntrates:
 *  - A walker with state attached ('iHaveSeenAZero'). Note it could be done without tracking state
 *    also.
 *  - The capability of 'transport' to return void.
 *  - You can add a templated 'transport()' to avoid needing to fill in each and every instantiation
 * for the PolyValue.
 ','line_number':434,'multiline':True]['text':'*
     * Template to handle all other cases - we don't care or need to do anything here, so we knock
     * out all the other required implementations at once with this template.
     ','line_number':453,'multiline':True]['text':'*
 * A walker demonstrating the 'prepare()' API which tracks the depth and weights things deeper in
 * the tree at factors of 10 higher. So the top level is worth 1x, second level 10x, third level
 * 100x, etc.
 ','line_number':483,'multiline':True]['text':' Noop. Just here to prevent from yet another 10x multiplication if we were to fall into','line_number':497,'multiline':False]['text':' the generic 'prepare()'.','line_number':498,'multiline':False]['text':'*
     * 'prepare()' is called as we descend the tree before we walk/visit the children.
     ','line_number':501,'multiline':True]['text':'
    demoTree
    1x level:     root
                 / | \
    10x level:  4  3  binary
                       / \
    100x level:       2   nary
                            \
    1000x level:             1
    ','line_number':535,'multiline':True]['text':' To get postorder, only pay attention when we're leaving a node.','line_number':590,'multiline':False]['text':' To get preorder, only pay attention when we're entering a node.','line_number':618,'multiline':False]['text':' A TreeCursor can walk:','line_number':635,'multiline':False]['text':' - PolyValue','line_number':636,'multiline':False]['text':' - const PolyValue','line_number':637,'multiline':False]['text':' - PolyValue::reference_type','line_number':638,'multiline':False]['text':' - const PolyValue::reference_type','line_number':639,'multiline':False]['text':' PolyValue lvalue','line_number':641,'multiline':False]['text':' const PolyValue lvalue','line_number':653,'multiline':False]['text':' reference_type lvalue','line_number':665,'multiline':False]['text':' const reference_type lvalue','line_number':678,'multiline':False]['text':' Because shallow const does not affect a function's signature, and current() returns','line_number':683,'multiline':False]['text':' Tree::reference_type by value, it can't communicate the const-ness back to the caller.','line_number':684,'multiline':False]['text':' reference_type rvalue','line_number':693,'multiline':False]['text':' const reference_type rvalue','line_number':705,'multiline':False]['text':' Note, we get a non-const 'reference_type' here, because 'tree.ref()' returns a non-const','line_number':709,'multiline':False]['text':' reference type. This is a flaw in the const correctness of reference_type. We could fix','line_number':710,'multiline':False]['text':' this by either:','line_number':711,'multiline':False]['text':' - having distinct types for 'reference_type' and 'const_reference_type', analogous to','line_number':712,'multiline':False]['text':'   std::vector::iterator vs const_iterator.','line_number':713,'multiline':False]['text':' - turning 'reference_type' into a read-only view, by removing any methods that provide','line_number':714,'multiline':False]['text':'   write access to the underlying node.','line_number':715,'multiline':False]['text':' namespace','line_number':726,'multiline':False]['text':' namespace mongo::optimizer::algebra','line_number':727,'multiline':False]