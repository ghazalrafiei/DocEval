['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'costModel','line_number':95,'multiline':True]['text':'Not multikey','line_number':108,'multiline':True]['text':' Contradiction: empty interval.','line_number':150,'multiline':False]['text':' Contradiction: one conjunct non-empty, one conjunct empty.','line_number':159,'multiline':False]['text':' Contradiction: both conjuncts empty, whole disjunct empty.','line_number':173,'multiline':False]['text':' Contradiction.','line_number':184,'multiline':False]['text':'isMultiKey','line_number':201,'multiline':True]['text':' Note those are queries below are contradictions.','line_number':203,'multiline':False]['text':' (max(v1, v2), +inf) U [v2 >= v1 ? MaxKey : v1, max(v1, v2)]','line_number':248,'multiline':False]['text':' Make sure repeated intersection does not change the result.','line_number':261,'multiline':False]['text':' [v1, v3] ^ [v2, v4] -> [max(v1, v2), min(v3, v4)]','line_number':274,'multiline':False]['text':' Make sure repeated intersection does not change the result.','line_number':280,'multiline':False]['text':' Make sure repeated intersection does not change the result.','line_number':309,'multiline':False]['text':' Make sure repeated intersection does not change the result.','line_number':347,'multiline':False]['text':' Purposely put out of order so they'll get sorted during normalization.','line_number':440,'multiline':False]['text':' Purposely put out of order so they'll get sorted during normalization.','line_number':458,'multiline':False]['text':'
 * Bitset with extra flags to indicate whether MinKey and MaxKey are included.
 * The first two bits are MinKey and MaxKey, the rest represent integers [0, N).
 ','line_number':475,'multiline':True]['text':'
 * Calculates the extended bitset of a given interval in any form (not just DNF).
 ','line_number':523,'multiline':True]['text':'
 * Replaces variables with their value in the given varMap.
 ','line_number':583,'multiline':True]['text':'n','line_number':598,'multiline':True]['text':'node','line_number':598,'multiline':True]['text':'
 * Create two random intervals composed of constants and test intersection/union on them.
 ','line_number':651,'multiline':True]['text':' This function can be passed as a substitute for the real constant folding function, to test','line_number':675,'multiline':False]['text':' that our simplification methods work when we cannot constant fold anything.','line_number':676,'multiline':False]['text':' No-op.','line_number':678,'multiline':False]['text':' Test intersection.','line_number':681,'multiline':False]['text':' Since we are testing with constants, we should have at most one interval as long','line_number':692,'multiline':False]['text':' as we use real constant folding.','line_number':693,'multiline':False]['text':' If we didn't use the real constant folding function, we have to constant fold','line_number':696,'multiline':False]['text':' now, because our bounds will have If's.','line_number':697,'multiline':False]['text':' Test union.','line_number':707,'multiline':False]['text':' If we didn't use the real constant folding function, we have to constant fold','line_number':717,'multiline':False]['text':' now, because our bounds will have If's.','line_number':718,'multiline':False]['text':' Generates a random integer bound. If isLow is true, lower values are more likely. If isLow is','line_number':729,'multiline':False]['text':' false, higher values are more likely.','line_number':730,'multiline':False]['text':' This is a trick to create a skewed distribution on [0, N). Say N=3,','line_number':733,'multiline':False]['text':' potential values of r = 0 1 2 3 4 5 6 7 8','line_number':734,'multiline':False]['text':' (int) sqrt(r)         = 0 1 1 1 2 2 2 2 2','line_number':735,'multiline':False]['text':' The higher the number is (as long as its <N), the more likely it is to occur.','line_number':736,'multiline':False]['text':' We can return one of: N constants, or 8 variables.','line_number':747,'multiline':False]['text':' Generate values for the eight variables we have.','line_number':766,'multiline':False]['text':' minkey=0, maxkey=1, anything else is a constant','line_number':771,'multiline':False]['text':' Create three intervals.','line_number':785,'multiline':False]['text':' Intersect with multiple intervals.','line_number':788,'multiline':False]['text':' Union two intervals of any kind. It is necessary to specifically test unionTwoIntervals,','line_number':813,'multiline':False]['text':' because it is intended to work with variables and constants. Testing with unionDNFIntervals','line_number':814,'multiline':False]['text':' only tests constants.','line_number':815,'multiline':False]['text':' Union with multiple intervals.','line_number':841,'multiline':False]['text':' Test a mix of unions and intersections.','line_number':868,'multiline':False]['text':' Number of bits held in the bitset. This include MinKey and MaxKey, so it must be at least two.','line_number':899,'multiline':False]['text':' Number of permutations is bitsetSize^4 * 2^4 * 2','line_number':904,'multiline':False]['text':' The first term is needed because we generate four bounds to intersect two intervals. The','line_number':905,'multiline':False]['text':' second term is for the inclusivity of the four bounds. The third term is to determine if we','line_number':906,'multiline':False]['text':' test with real constant folding or a no-op constant folding function.','line_number':907,'multiline':False]['text':'*
     * Test for interval intersection. Generate intervals with constants in the
     * range of [0, N), with random inclusion/exclusion of the endpoints. Intersect the intervals
     * and verify against ground truth.
     ','line_number':910,'multiline':True]['text':'*
     * Generate random intervals with a mix of variables and constants, and test that they intersect
     * and union correctly.
     ','line_number':943,'multiline':True]['text':' NOLINT','line_number':1014,'multiline':False]['text':' NOLINT (test auto-update)','line_number':1015,'multiline':False]['text':' Observe negation: below deMorgan applies.','line_number':1024,'multiline':False]['text':' NOLINT','line_number':1035,'multiline':False]['text':' NOLINT (test auto-update)','line_number':1036,'multiline':False]['text':' NOLINT (test auto-update)','line_number':1049,'multiline':False]['text':' NOLINT (test auto-update)','line_number':1055,'multiline':False]['text':' Equality intervals are never empty.','line_number':1066,'multiline':False]['text':' With equal endpoints, where one or both is exclusive, the interval is empty.','line_number':1072,'multiline':False]['text':' However, we only detect equal constants, not equal expressions in general,','line_number':1085,'multiline':False]['text':' so we fail to detect that these intervals are empty.','line_number':1086,'multiline':False]['text':' When the bounds are inside-out, the interval is empty, regardless of inclusivity.','line_number':1091,'multiline':False]['text':' With an unknown endpoints, we usually can't prove the interval is empty.','line_number':1098,'multiline':False]['text':' An exception is Lt MinKey or Gt MaxKey. These are empty regardless of the other bound.','line_number':1102,'multiline':False]['text':' But this is only valid when it's an exclusive bound. MinKey and MaxKey are normal values that','line_number':1105,'multiline':False]['text':' can appear in a collection or query.','line_number':1106,'multiline':False]['text':' Intervals that go from minKey to maxKey are never empty, regardless of inclusivity.','line_number':1110,'multiline':False]['text':' namespace','line_number':1201,'multiline':False]['text':' namespace mongo::optimizer','line_number':1202,'multiline':False]