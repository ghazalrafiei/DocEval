['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' We'll pre-declare all of these strings so that we can avoid the allocations when we reference','line_number':62,'multiline':False]['text':' them later.','line_number':63,'multiline':False]['text':'*
 * A default redaction strategy that generates easy to check results for testing purposes.
 ','line_number':117,'multiline':True]['text':' Avoid ending in a parenthesis since the results will occur in a raw string where the )"','line_number':121,'multiline':False]['text':' sequence will accidentally terminate the string.','line_number':122,'multiline':False]['text':'*
 * Computes a debug string meant to represent "any value of type t", where "t" is the type of the
 * provided argument. For example "?number" for any number (int, double, etc.).
 ','line_number':126,'multiline':True]['text':' This is tightly coupled with 'canonicalizeBSONType' and therefore also with','line_number':131,'multiline':False]['text':' sorting/comparison semantics.','line_number':132,'multiline':False]['text':' This case should only happen if we have an array within an array.','line_number':150,'multiline':False]['text':'*
 * Returns an arbitrary value of the same type as the one given. For any number, this will be the
 * number 1. For any boolean this will be true.
 * TODO if you need a different value to make sure it will parse, you should not use this API.
 ','line_number':179,'multiline':True]['text':' This is tightly coupled with 'canonicalizeBSONType' and therefore also with','line_number':185,'multiline':False]['text':' sorting/comparison semantics.','line_number':186,'multiline':False]['text':' This case should only happen if we have an array within an array.','line_number':204,'multiline':False]['text':'*
 * A struct representing the sub-type information for an array.
 ','line_number':233,'multiline':True]['text':'*
     * Whether the values of an array are all the same BSON type or not (mixed).
     ','line_number':237,'multiline':True]['text':'*
 * Scans 'arrayOfValues' to see if all values are of the same type or not. Returns this info in a
 * struct - see the struct definition for how it is represented.
 *
 * Templated algorithm to handle both iterators of BSONElements or iterators of Values.
 * 'getTypeCallback' is provided to abstract away the different '.type()' vs '.getType()' APIs.
 ','line_number':258,'multiline':True]['text':' Iterating the array as .Obj(), as if it were a BSONObj (with field names '0', '1', etc.)','line_number':293,'multiline':False]['text':' is faster than converting the whole thing to an array which would force a copy.','line_number':294,'multiline':False]['text':' We don't care which types, we'll use a number and a string as the canonical','line_number':323,'multiline':False]['text':' mixed type array regardless. This is to ensure we don't get 2^N possibilities','line_number':324,'multiline':False]['text':' for mixed type scenarios - we wish to collapse all "mixed type" arrays to one','line_number':325,'multiline':False]['text':' canonical mix. The choice of int and string is mostly arbitrary - hopefully','line_number':326,'multiline':False]['text':' somewhat comprehensible at a glance.','line_number':327,'multiline':False]['text':' Iterating the array as .Obj(), as if it were a BSONObj (with field names '0', '1', etc.)','line_number':337,'multiline':False]['text':' is faster than converting the whole thing to an array which would force a copy.','line_number':338,'multiline':False]['text':' This case is more complicated and callers should use a more generic helper.','line_number':368,'multiline':False]['text':' namespace','line_number':407,'multiline':False]['text':' Overloads for BSONElem and Value.','line_number':426,'multiline':False]['text':' Overloads for BSONElem and Value.','line_number':434,'multiline':False]['text':' The first two cases are particularly performance sensitive. We could answer everything here','line_number':448,'multiline':False]['text':' with the code inside the 'kToDebugTypeString' branch, but there are some relatively easy ways','line_number':449,'multiline':False]['text':' to accomplish the first two policy cases (in the common cases), so we'll special case those','line_number':450,'multiline':False]['text':' in order to avoid constructing a temporary Value.','line_number':451,'multiline':False]['text':' If it's an array we'll default to the slow but general codepath below.','line_number':461,'multiline':False]['text':' Performance isn't as sensitive here.','line_number':465,'multiline':False]['text':' namespace mongo','line_number':523,'multiline':False]