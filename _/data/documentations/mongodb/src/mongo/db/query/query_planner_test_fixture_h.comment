['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Clean up any previous state from a call to runQuery*()
     ','line_number':68,'multiline':True]['text':'','line_number':73,'multiline':False]['text':' Build up test.','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':'','line_number':102,'multiline':False]['text':' Execute planner.','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' Same as runQuery* functions except we expect a failed status from the planning stage.','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':'*
     * The other runQuery* methods run the query as through it is an OP_QUERY style find. This
     * version goes through find command parsing, and will be planned like a find command.
     ','line_number':189,'multiline':True]['text':'','line_number':197,'multiline':False]['text':' Introspect solutions.','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':'*
     * Will use a relaxed bounds check for the remaining assert* calls. Subsequent calls to assert*
     * will check only that the bounds provided in the "expected" solution are a subset of those
     * generated by the planner (rather than checking for equality). Useful for testing queries
     * which use geo indexes and produce complex bounds.
     ','line_number':207,'multiline':True]['text':'*
     * Checks number solutions. Generates assertion message
     * containing solution dump if applicable.
     ','line_number':218,'multiline':True]['text':'*
     * Verifies that the solution tree represented in json by 'solnJson' is
     * one of the solutions generated by QueryPlanner.
     *
     * The number of expected matches, 'numMatches', could be greater than
     * 1 if solutions differ only by the pattern of index tags on a filter.
     ','line_number':226,'multiline':True]['text':'*
     * Given a vector of string-based solution tree representations 'solnStrs',
     * verifies that the query planner generated exactly one of these solutions.
     ','line_number':235,'multiline':True]['text':'*
     * Check that the only solution available is an ascending collection scan.
     ','line_number':241,'multiline':True]['text':'*
     * Check that query planning failed with NoQueryExecutionPlans.
     ','line_number':246,'multiline':True]['text':'*
     * Helper function to parse a MatchExpression.
     *
     * If the caller wants a collator to be used with the match expression, pass an expression
     * context owning that collator as the second argument. The expression context passed must
     * outlive the returned match expression.
     *
     * If no ExpressionContext is passed a default-constructed ExpressionContextForTest will be
     * used.
     ','line_number':251,'multiline':True]['text':'','line_number':272,'multiline':False]['text':' Data members.','line_number':273,'multiline':False]['text':'','line_number':274,'multiline':False]['text':' Value used for the sbeCompatible flag in the CanonicalQuery objects created by the','line_number':288,'multiline':False]['text':' test.','line_number':289,'multiline':False]['text':' Value used for the forceGenerateRecordId flag in the CanonicalQuery objects created by the','line_number':291,'multiline':False]['text':' test.','line_number':292,'multiline':False]['text':' Value used for the 'isCountLike' flag in the CanonicalQuery objects created by the test.','line_number':294,'multiline':False]['text':' namespace mongo','line_number':298,'multiline':False]