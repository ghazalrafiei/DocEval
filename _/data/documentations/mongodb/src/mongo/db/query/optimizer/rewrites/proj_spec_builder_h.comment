['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Builder to assist in the construction of FieldActions.
 *
 * Just like a FieldAction, it represents a function from value (or Nothing) to value (or Nothing).
 * Also like FieldAction it does not distinguish between Keep and Drop, so you also need to know
 * a FieldListScope to disambiguate.
 *
 * However, in the case of LambdaArg and ValueArg, it does not track the index of the argument it
 * points to, but rather it may keep a pointer to a node in the ABT tree used to generate it. This
 * allows us to avoid materializing and lowering the arguments we will need for the final "makeObj"
 * primitive until we have completely constructed the MakeObjSpec. This is useful if, for example,
 * we can eliminate some ValueArgs on different sides of a composition. It also allows us to defer
 * lowering any part of the tree until we know exactly which subtrees need to be lowered (if any).
 ','line_number':41,'multiline':True]['text':' MakeObj constructor.','line_number':57,'multiline':False]['text':' ValueArg/LambdaArg constructor.','line_number':61,'multiline':False]['text':' KeepDrop constructor.','line_number':64,'multiline':False]['text':' No copies.','line_number':72,'multiline':False]['text':' Helper used for combining two builders during path composition translation. This is called','line_number':75,'multiline':False]['text':' when we have a PathComposeM of two paths. It applies path composition rules','line_number':76,'multiline':False]['text':' to try to combine the behavior encoded by the left (this) side/FieldActionBuilder followed by','line_number':77,'multiline':False]['text':' the right','line_number':78,'multiline':False]['text':' ('other') side/FieldActionBuilder into a single FieldActionBuilder. If it is successful, it','line_number':79,'multiline':False]['text':' returns true and modifies 'this' into the equivalent behavior. Otherwise, it returns false/','line_number':80,'multiline':False]['text':' nothing is modified.','line_number':81,'multiline':False]['text':' Builder method that generates the final FieldAction and populates 'args' with its '_path' if','line_number':102,'multiline':False]['text':' necessary. Note that we also need to know the scope in order to generate Keep{} or Drop{} as','line_number':103,'multiline':False]['text':' appropriate.','line_number':104,'multiline':False]['text':'*
 * Builder to assist in the construction of a MakeObjSpec.
 ','line_number':113,'multiline':True]['text':' Orphaned FieldAction builder which needs to be assigned a path in order to become a valid','line_number':119,'multiline':False]['text':' builder.','line_number':120,'multiline':False]['text':' Enum describing what to do when the input type is not an object.','line_number':129,'multiline':False]['text':' Enum describing what to do upon encountering fields not listed in '_namedFields'.','line_number':132,'multiline':False]['text':' Vector describing what to do with each field.','line_number':135,'multiline':False]['text':' Defaults to 0 unless we see a traverse; only applies for 'MakeObj' FieldActions.','line_number':138,'multiline':False]['text':' This corresponds to the absence of a 'Traverse' on the current path.','line_number':139,'multiline':False]['text':' Creates a blank builder with only behaviors set. Note that this yields a valid MakeObjSpec.','line_number':149,'multiline':False]['text':' Creates a FieldAction with no field/behaviors specified yet that needs a path.','line_number':154,'multiline':False]['text':' KeepDrop constructor: used to construct simple inclusion/exclusion projections.','line_number':157,'multiline':False]['text':' No copies.','line_number':167,'multiline':False]['text':' Helper to combine this builder with another when translating a PathComposeM. It encodes the','line_number':182,'multiline':False]['text':' semantics of first applying the left branch of the composition (represented as 'this'','line_number':183,'multiline':False]['text':' builder) to the input, followed by the right branch (represented as the 'other' builder).','line_number':184,'multiline':False]['text':' This follows the path composition laws, returning false if we cannot encode this composition','line_number':185,'multiline':False]['text':' directly in MakeObjSpec. If successful, it returns true and modifies the 'this' builder to','line_number':186,'multiline':False]['text':' encode the MakeObjSpec equivalent of the entire PathComposeM.','line_number':187,'multiline':False]['text':' Used to determine if we should avoid placing a make obj primitive because lowering and','line_number':194,'multiline':False]['text':' const-folding would simplify this expression.','line_number':195,'multiline':False]['text':' Builder method generating final MakeObjSpec. May only be called if isValid() evaluates to','line_number':212,'multiline':False]['text':' true. May recursively call build() on nested builders, and will populate 'argStack' with','line_number':213,'multiline':False]['text':' arguments that _fieldActionBuilders reference.','line_number':214,'multiline':False]['text':' namespace mongo::optimizer','line_number':220,'multiline':False]