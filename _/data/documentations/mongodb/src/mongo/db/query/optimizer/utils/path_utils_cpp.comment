['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Helper function to count the size of a nested conjunction.','line_number':58,'multiline':False]['text':' When maxDepth = 1, a conjunctive path is not decomposed into a sequence of FilterNodes.','line_number':86,'multiline':False]['text':' In this case the path is attached directly to a single FilterNode.','line_number':87,'multiline':False]['text':' Remove the path composition and insert separate filter nodes.','line_number':101,'multiline':False]['text':'*
 * Removes Traverse nodes from a single path, using MultikeynessTrie which tells us
 * which child paths are never applied to an array.
 ','line_number':122,'multiline':True]['text':'skippedParentTraverse','line_number':128,'multiline':True]['text':' No simplifications apply here.','line_number':129,'multiline':False]['text':'skippedParentTraverse','line_number':138,'multiline':True]['text':' This path is never applied to an array: we can remove any number of Traverse nodes,','line_number':149,'multiline':False]['text':' of any maxDepth.','line_number':150,'multiline':False]['text':' The parent can't have been a Traverse that we skipped, because we would have','line_number':152,'multiline':False]['text':' removed it, because !trie.isMultiKey.','line_number':153,'multiline':False]['text':'skippedParentTraverse','line_number':155,'multiline':True]['text':' This path is possibly multikey, so we can't remove any Traverse nodes.','line_number':158,'multiline':False]['text':' But each edge in the trie represents a 'Traverse [1] Get [a]', so we can','line_number':159,'multiline':False]['text':' skip a single Traverse [1] node.','line_number':160,'multiline':False]['text':'skippedParentTraverse','line_number':161,'multiline':True]['text':' We have no information about multikeyness of the child path.','line_number':163,'multiline':False]['text':' Look for PathLambda Lambda [tmp] UnaryOp [Not] EvalFilter <path> Variable [tmp],','line_number':172,'multiline':False]['text':' and simplify <path>.  This works because 'tmp' is the same variable name in both places,','line_number':173,'multiline':False]['text':' so <path> is applied to the same input as the PathLambda. (And the 'trie' tells us','line_number':174,'multiline':False]['text':' which parts of that input are not arrays.)','line_number':175,'multiline':False]['text':' In the future we may want to generalize this to skip over other expressions besides Not,','line_number':177,'multiline':False]['text':' as long as the Lambda and EvalFilter are connected by a variable.','line_number':178,'multiline':False]['text':'skippedParentTraverse','line_number':187,'multiline':True]['text':'node','line_number':205,'multiline':True]['text':' Don't optimize a node we don't recognize.','line_number':206,'multiline':False]['text':' Some other cases to consider:','line_number':209,'multiline':False]['text':' - Remove PathArr for non-multikey paths.','line_number':210,'multiline':False]['text':' - Descend into disjunction.','line_number':211,'multiline':False]['text':' - Descend into PathLambda and simplify expressions, especially Not and EvalFilter.','line_number':212,'multiline':False]['text':'skippedParentTraverse','line_number':217,'multiline':True]['text':'*
     * 'n' - The complete index path being compared to, can be modified if needed.
     * 'node' - Same as 'n' but cast to a specific type by the caller in order to invoke the
     *   correct operator.
     * 'other' - The query path, of which the index may satisfy a prefix.
     ','line_number':227,'multiline':True]['text':' If a query path has a Traverse, but the index path doesn't, the query can','line_number':238,'multiline':False]['text':' still be evaluated by this index. Skip the Traverse node, and continue matching.','line_number':239,'multiline':False]['text':' This works because we know the Traverse will never be applied to an array,','line_number':240,'multiline':False]['text':' so 'Traverse [anything] p == p'.','line_number':241,'multiline':False]['text':'n','line_number':267,'multiline':True]['text':'node','line_number':267,'multiline':True]['text':'*
 * Check if an index path contains a Traverse element.
 ','line_number':277,'multiline':True]['text':'n','line_number':284,'multiline':True]['text':'node','line_number':284,'multiline':True]['text':'childResult','line_number':284,'multiline':True]['text':'n','line_number':288,'multiline':True]['text':'node','line_number':288,'multiline':True]['text':'n','line_number':292,'multiline':True]['text':'node','line_number':292,'multiline':True]['text':'n','line_number':297,'multiline':True]['text':'node','line_number':297,'multiline':True]['text':'*
 * Checks if a path ends in a Traverse + PathId.
 ','line_number':311,'multiline':True]['text':'node','line_number':320,'multiline':True]['text':'node','line_number':324,'multiline':True]['text':' args ','line_number':329,'multiline':True]['text':'*
 * Checks if all the Traverse elements of an index path have single depth.
 ','line_number':339,'multiline':True]['text':'node','line_number':347,'multiline':True]['text':'node','line_number':350,'multiline':True]['text':'node','line_number':354,'multiline':True]['text':' namespace mongo::optimizer','line_number':367,'multiline':False]