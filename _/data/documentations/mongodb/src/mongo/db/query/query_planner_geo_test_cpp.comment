['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' 2d can answer: within poly, within center, within centersphere, within box.','line_number':54,'multiline':False]['text':' And it can use an index (or not) for each of them.  As such, 2 solns expected.','line_number':55,'multiline':False]['text':' Polygon','line_number':59,'multiline':False]['text':' Center','line_number':65,'multiline':False]['text':' Centersphere','line_number':71,'multiline':False]['text':' Within box.','line_number':77,'multiline':False]['text':' TODO: test that we *don't* annotate for things we shouldn't.','line_number':83,'multiline':False]['text':' This query will generate complex bounds, so we relax the checks to make the test readable.','line_number':111,'multiline':False]['text':' Ignored since complex','line_number':118,'multiline':False]['text':' true means multikey','line_number':124,'multiline':False]['text':' 2dsphere can do: within+geometry, intersects+geometry','line_number':141,'multiline':False]['text':' TODO: test that we *don't* annotate for things we shouldn't.','line_number':157,'multiline':False]['text':' 2dsphere can do: within+geometry, intersects+geometry','line_number':161,'multiline':False]['text':' true means multikey','line_number':162,'multiline':False]['text':' TODO: test that we *don't* annotate for things we shouldn't.','line_number':179,'multiline':False]['text':' Can only do near + old point.','line_number':183,'multiline':False]['text':' Can do nearSphere + old point, near + new point.','line_number':192,'multiline':False]['text':' Can do nearSphere + old point, near + new point.','line_number':212,'multiline':False]['text':' true means multikey','line_number':213,'multiline':False]['text':' SERVER-14723','line_number':347,'multiline':False]['text':' SERVER-3984, $or 2d index','line_number':365,'multiline':False]['text':' SERVER-3984, $or 2d index','line_number':382,'multiline':False]['text':' SERVER-3984, $or 2dsphere index','line_number':395,'multiline':False]['text':' SERVER-3984, $or 2dsphere index','line_number':412,'multiline':False]['text':' true means multikey','line_number':414,'multiline':False]['text':' Bounds of the two 2d geo predicates are combined into','line_number':443,'multiline':False]['text':' a single index scan.','line_number':444,'multiline':False]['text':' GEO_NEAR must use the index, and GEO predicate becomes a filter.','line_number':455,'multiline':False]['text':' GEO_NEAR must use the index, and GEO predicate becomes a filter.','line_number':469,'multiline':False]['text':' Bounds of the two 2dsphere geo predicates are combined into','line_number':487,'multiline':False]['text':' a single index scan.','line_number':488,'multiline':False]['text':' true means multikey','line_number':493,'multiline':False]['text':' GEO_NEAR must use the index, and GEO predicate becomes a filter.','line_number':517,'multiline':False]['text':' true means multikey','line_number':523,'multiline':False]['text':' GEO_NEAR must use the index, and GEO predicate becomes a filter.','line_number':533,'multiline':False]['text':' true means multikey','line_number':555,'multiline':False]['text':' true means multikey','line_number':571,'multiline':False]['text':' true means multikey','line_number':586,'multiline':False]['text':' true means multikey','line_number':602,'multiline':False]['text':' true means multikey','line_number':625,'multiline':False]['text':' true means multikey','line_number':642,'multiline':False]['text':' true means multikey','line_number':659,'multiline':False]['text':' true means multikey','line_number':678,'multiline':False]['text':' SERVER-9257','line_number':691,'multiline':False]['text':' SERVER-9257','line_number':706,'multiline':False]['text':' true means multikey','line_number':708,'multiline':False]['text':' Test that a 2dsphere index can satisfy a whole index scan solution if the query has a GEO','line_number':724,'multiline':False]['text':' predicate on at least one of the indexed geo fields.','line_number':725,'multiline':False]['text':' Currently fails.  Tracked by SERVER-10801.','line_number':726,'multiline':False]['text':'
TEST_F(QueryPlannerTest, SortOnGeoQuery) {
    addIndex(BSON("timestamp" << -1 << "position" << "2dsphere"));
    BSONObj query = fromjson("{position: {$geoWithin: {$geometry: {type: \"Polygon\", coordinates:
    [[[1, 1], [1, 90], [180, 90], [180, 1], [1, 1]]]}}}}"); BSONObj sort = fromjson("{timestamp:
    -1}");
    runQuerySortProj(query, sort, BSONObj());

    ASSERT_EQUALS(getNumSolutions(), 2U);
    assertSolutionExists("{sort: {pattern: {timestamp: -1}, limit: 0, "
                            "node: {cscan: {dir: 1}}}}");
    assertSolutionExists("{fetch: {node: {ixscan: {pattern: {timestamp: -1, position:
    '2dsphere'}}}}}"); }

TEST_F(QueryPlannerTest, SortOnGeoQueryMultikey) {
    // true means multikey
    addIndex(BSON("timestamp" << -1 << "position" << "2dsphere"), true);
    BSONObj query = fromjson("{position: {$geoWithin: {$geometry: {type: \"Polygon\", "
        "coordinates: [[[1, 1], [1, 90], [180, 90], [180, 1], [1, 1]]]}}}}");
    BSONObj sort = fromjson("{timestamp: -1}");
    runQuerySortProj(query, sort, BSONObj());

    ASSERT_EQUALS(getNumSolutions(), 2U);
    assertSolutionExists("{sort: {pattern: {timestamp: -1}, limit: 0, "
                            "node: {cscan: {dir: 1}}}}");
    assertSolutionExists("{fetch: {node: {ixscan: {pattern: "
                            "{timestamp: -1, position: '2dsphere'}}}}}");
}
','line_number':727,'multiline':True]['text':'','line_number':758,'multiline':False]['text':' Sort','line_number':759,'multiline':False]['text':'','line_number':760,'multiline':False]['text':'','line_number':818,'multiline':False]['text':' Negation','line_number':819,'multiline':False]['text':'','line_number':820,'multiline':False]['text':'','line_number':822,'multiline':False]['text':' 2D geo negation','line_number':823,'multiline':False]['text':' The filter b != 1 is embedded in the geoNear2d node.','line_number':824,'multiline':False]['text':' Can only do near + old point.','line_number':825,'multiline':False]['text':'','line_number':826,'multiline':False]['text':'','line_number':835,'multiline':False]['text':' 2DSphere geo negation','line_number':836,'multiline':False]['text':' Filter is embedded in a separate fetch node.','line_number':837,'multiline':False]['text':'','line_number':838,'multiline':False]['text':' Can do nearSphere + old point, near + new point.','line_number':840,'multiline':False]['text':'','line_number':863,'multiline':False]['text':' 2DSphere geo negation','line_number':864,'multiline':False]['text':' Filter is embedded in a separate fetch node.','line_number':865,'multiline':False]['text':'','line_number':866,'multiline':False]['text':' Can do nearSphere + old point, near + new point.','line_number':868,'multiline':False]['text':' true means multikey','line_number':869,'multiline':False]['text':'','line_number':893,'multiline':False]['text':' Tests for intersecting and compounding bounds on multikey 2dsphere indexes when path-level','line_number':894,'multiline':False]['text':' multikey information is available.','line_number':895,'multiline':False]['text':'','line_number':896,'multiline':False]['text':'','line_number':1311,'multiline':False]['text':' 2dsphere V2 sparse indices, SERVER-9639','line_number':1312,'multiline':False]['text':'','line_number':1313,'multiline':False]['text':' A fixture to help run tests for multiple 2dsphere index versions.','line_number':1315,'multiline':False]['text':' For each 2dsphere index version in 'versions', verifies the planner returns','line_number':1318,'multiline':False]['text':' 'errorCode' for 'predicate' given 'keyPatterns'.','line_number':1319,'multiline':False]['text':' For each 2dsphere index version in 'versions', verifies the planner generates','line_number':1335,'multiline':False]['text':' 'expectedSolutions' for 'predicate' given 'keyPatterns'.','line_number':1336,'multiline':False]['text':' For each 2dsphere index version in 'versions', verifies the planner generates','line_number':1356,'multiline':False]['text':' 'numExpectedSolutions' for 'predicate' given 'keyPattern'.','line_number':1357,'multiline':False]['text':' Basic usage of a sparse 2dsphere index.  V1 ignores the sparse field.  We can use any prefix','line_number':1375,'multiline':False]['text':' of the index as every document is indexed.','line_number':1376,'multiline':False]['text':' V2 and V3 are "geo sparse" and remove the nonGeo assignment.  Can't use the index prefix here as','line_number':1388,'multiline':False]['text':' it's a V2 index and we have no geo pred.','line_number':1389,'multiline':False]['text':' We can use the index here as we have a geo pred.','line_number':1400,'multiline':False]['text':' V2 and V3 are geo-sparse and the planner removes the nonGeo assignment when there's no geo pred.','line_number':1411,'multiline':False]['text':' Non-geo preds can only use a collscan.','line_number':1419,'multiline':False]['text':' One geo pred so we can use the index.','line_number':1426,'multiline':False]['text':' Two geo preds, so we can use the index still.','line_number':1433,'multiline':False]['text':' Only a COLLSCAN is possible, but COLLSCANs are prohibited above.','line_number':1595,'multiline':False]['text':' Normally $_internalExpr would be accompanied by a $expr expression. In this case we omit','line_number':1664,'multiline':False]['text':' that, since we're just trying to ensure that the filter on 'b' can get pushed into the','line_number':1665,'multiline':False]['text':' geoNear2d stage.','line_number':1666,'multiline':False]['text':' This query will generate complex bounds, so we relax the checks to make the test readable.','line_number':1721,'multiline':False]['text':' This query will generate complex bounds, so we relax the checks to make the test readable.','line_number':1752,'multiline':False]['text':' Complex, so leaving empty.','line_number':1759,'multiline':False]['text':' This query will generate complex bounds, so we relax the checks to make the test readable.','line_number':1774,'multiline':False]['text':' Complex, so leaving empty.','line_number':1782,'multiline':False]['text':' This query will generate complex bounds, so we relax the checks to make the test readable.','line_number':1796,'multiline':False]['text':' Complex, so leaving empty.','line_number':1804,'multiline':False]['text':' This query should not produce bounds.','line_number':1814,'multiline':False]['text':' namespace','line_number':1838,'multiline':False]