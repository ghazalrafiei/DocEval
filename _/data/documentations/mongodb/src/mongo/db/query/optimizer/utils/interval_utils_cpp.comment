['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':47,'multiline':False]['text':' Returns true if the interval can be proven to be empty. If no conclusion can be made, or the','line_number':69,'multiline':False]['text':' interval is provably not empty, returns false.','line_number':70,'multiline':False]['text':' Can't make any conclusions about the comparison between the bounds. We don't know for sure','line_number':80,'multiline':False]['text':' that it's empty.','line_number':81,'multiline':False]['text':' If lower bound greater than upper bound, or the bounds are equal but the interval is','line_number':87,'multiline':False]['text':' not completely inclusive, we have an empty interval.','line_number':88,'multiline':False]['text':'
     * If we have two intervals, we can convert [a, b] U [c, d] to:
     * overlap_indicator = a < d && c < b && int1NonEmpty && int2NonEmpty
     * [overlap_indicator ? min(a, c) : a, overlap_indicator ? max(b, d) : b]
     * U [c, overlap_indicator ? -inf : d]
     * If the intervals overlap, they become [min(a,c), max(b,d)] U [c, -inf]
     * If they do not overlap, then we have the original intervals [a, b] U [c, d]
     ','line_number':95,'multiline':True]['text':'
     * We'll be adding auxiliary intervals to deal with open/closed bounds. If we have an
     * interval [a, b), and add an auxiliary interval to account for the inclusivity of `a`,
     * we only want this aux interval to simplify to [a, a] if a < b. If a >= b, then we
     * have something like [2,1) = empty set, or [1, 1) which is also the empty set. If the
     * original interval is the empty set, we want the aux interval to be empty as well.
     * Therefore we use have the indicators below to tell us if the intervals are non-empty.
     * If both bounds are inclusive, we allow equality (since [1, 1] is non-empty).
     * Otherwise we only use less-than (since (1, 1] is empty).
     ','line_number':118,'multiline':True]['text':'
     * Whether or not these intervals overlap is dependent on the inclusivity of
     * the bounds. For example, [2, 3] U [3, 4] does overlap, while [2, 3) U (3, 4] does
     * not.
     * The intervals overlap if a < d && c < b, with the actual comparison instead being LTE if
     * either bound is inclusive.
     * For another example, we consider [2, 3) U [3, 4] to "overlap" because they can be
     * combined into one contiguous interval, even though they have no points in common.
     ','line_number':131,'multiline':True]['text':' Add the primary intervals.','line_number':149,'multiline':False]['text':' Take a constant non-empty auxiliary interval, and look for its corresponding primary','line_number':165,'multiline':False]['text':' interval to merge with.','line_number':166,'multiline':False]['text':' We need this case, for when we have something like [1,1] U [2,3). Our primary intervals','line_number':180,'multiline':False]['text':' would be [1,1) U [2,3). These would be unioned with an aux interval. However the primary','line_number':181,'multiline':False]['text':' interval corresponding with the aux one would be removed, since [1,1) is empty. Then when','line_number':182,'multiline':False]['text':' this function is called, we won't find the primary interval it belongs with, so instead','line_number':183,'multiline':False]['text':' of merging we add it to the primary intervals.','line_number':184,'multiline':False]['text':' Analyze an aux interval for const-ness or emptiness, and add it to our result.','line_number':188,'multiline':False]['text':' Find the primary interval and merge with it.','line_number':194,'multiline':False]['text':' It's still a variable interval after const folding, so we can't merge it with','line_number':197,'multiline':False]['text':' a primary. Instead just add it to the result.','line_number':198,'multiline':False]['text':' If it's empty ignore it.','line_number':202,'multiline':False]['text':' If `a` and `c` agree on inclusivity, then the primary interval will have the same','line_number':205,'multiline':False]['text':' inclusivity. If they disagree, we make the primary interval exclusive, and add an aux','line_number':206,'multiline':False]['text':' interval.','line_number':207,'multiline':False]['text':' Add aux interval.','line_number':209,'multiline':False]['text':' The aux interval should be [a,a] if','line_number':211,'multiline':False]['text':' int1NonEmpty && (!overlap_indicator || a <= c)','line_number':212,'multiline':False]['text':' We only want the aux interval to be non-empty if the interval it originated from is','line_number':213,'multiline':False]['text':' non-empty and the bound it corresponds to ("a" in this case) wins, OR the intervals','line_number':214,'multiline':False]['text':' end up not overlapping. Example for the non-overlapping case might be [1,2] U (3,4]','line_number':215,'multiline':False]['text':' -> (1,2] U (3,4] U aux so we need 1 to still be inclusive, by making the aux a','line_number':216,'multiline':False]['text':' non-empty point [1,1].','line_number':217,'multiline':False]['text':' The aux interval should be [c,c] if','line_number':227,'multiline':False]['text':' int2NonEmpty && (!overlap_indicator || c <= a)','line_number':228,'multiline':False]['text':' Add aux interval.','line_number':240,'multiline':False]['text':' The interval should be [b,b] if','line_number':242,'multiline':False]['text':' int1NonEmpty && (!overlap_indicator || b >= d)','line_number':243,'multiline':False]['text':' The aux interval should be [d,d] if','line_number':253,'multiline':False]['text':' int2NonEmpty && (!overlap_indicator || d >= b)','line_number':254,'multiline':False]['text':' Since our input intervals are sorted, constDisjIntervals will be sorted as well.','line_number':274,'multiline':False]['text':' We've found a constant disjunct.','line_number':285,'multiline':False]['text':' The bound is not constant, so we won't simplify.','line_number':288,'multiline':False]['text':' Remove empty intervals.','line_number':293,'multiline':False]['text':' For as long as it can, it1 will eat the interval in front of it. When it can't eat anymore,','line_number':302,'multiline':False]['text':' advance it1.','line_number':303,'multiline':False]['text':' They were not merged.','line_number':309,'multiline':False]['text':' They were merged, delete the it2 interval.','line_number':312,'multiline':False]['text':' This check happens after simplification in case the simplifying reveals a fully open interval','line_number':318,'multiline':False]['text':' to us. For example, (-inf, 5) U (3, inf) would become (-inf, inf).','line_number':319,'multiline':False]['text':' Add our simplified constant disjuncts to the final result.','line_number':326,'multiline':False]['text':' If we have an empty result, .finish() will return boost::none.','line_number':331,'multiline':False]['text':' Intervals are the same. Leave target unchanged.','line_number':339,'multiline':False]['text':' Intersecting with fully open interval is redundant.','line_number':344,'multiline':False]['text':' Unioning with fully open interval results in a fully-open interval.','line_number':345,'multiline':False]['text':' Intersecting with fully open interval is redundant.','line_number':353,'multiline':False]['text':' Unioning with fully open interval results in a fully-open interval.','line_number':354,'multiline':False]['text':' Integrate both compound bounds.','line_number':370,'multiline':False]['text':' Intersection is analogous to polynomial multiplication. Using '.' to denote intersection','line_number':372,'multiline':False]['text':' and '+' to denote union. (a.b + c.d) . (e+f) = a.b.e + c.d.e + a.b.f + c.d.f','line_number':373,'multiline':False]['text':' TODO: in certain cases we can simplify further. For example if we only have scalars, we','line_number':374,'multiline':False]['text':' can simplify (-inf, 10) ^ (5, +inf) to (5, 10), but this does not work with arrays.','line_number':375,'multiline':False]['text':' TODO: handle case with targetConjunct  fully open','line_number':380,'multiline':False]['text':' TODO: handle case with targetConjunct half-open and sourceConjunct equality.','line_number':381,'multiline':False]['text':' TODO: handle case with both targetConjunct and sourceConjunct equalities','line_number':382,'multiline':False]['text':' (different consts).','line_number':383,'multiline':False]['text':' Unioning is analogous to polynomial addition.','line_number':392,'multiline':False]['text':' (a.b + c.d) + (e+f) = a.b + c.d + e + f','line_number':393,'multiline':False]['text':' Handle trivial cases of intersection.','line_number':411,'multiline':False]['text':' In the simplest case our bound is (max(low1, low2), min(high1, high2)) if none of the bounds','line_number':429,'multiline':False]['text':' are inclusive.','line_number':430,'multiline':False]['text':'   Low bound is greater than high bound.','line_number':434,'multiline':False]['text':' We form a "main" result interval which is closed on any side with "agreement" between the two','line_number':443,'multiline':False]['text':' intervals. For example [low1, high1] ^ [low2, high2) -> [max(low1, low2), min(high1, high2))','line_number':444,'multiline':False]['text':' Point interval.','line_number':451,'multiline':False]['text':' Fully open on both sides.','line_number':455,'multiline':False]['text':' Inclusion matches on both sides.','line_number':460,'multiline':False]['text':' At this point we have intervals without inclusion agreement, for example','line_number':464,'multiline':False]['text':' [low1, high1) ^ (low2, high2]. We have the primary interval which in this case is the open','line_number':465,'multiline':False]['text':' (max(low1, low2), min(high1, high2)). Then we add an extra closed interval for each side with','line_number':466,'multiline':False]['text':' disagreement. For example for the lower sides we add: [indicator ? low1 : MaxKey, low1]. This','line_number':467,'multiline':False]['text':' is a closed interval which would reduce to [low1, low1] if low1 > low2 and the intervals','line_number':468,'multiline':False]['text':' intersect and are non-empty. If low2 >= low1 the interval reduces to an empty one,','line_number':469,'multiline':False]['text':' [MaxKey, low1], which will return no results from an index scan. We do not know that in','line_number':470,'multiline':False]['text':' general if we do not have constants (we cannot fold).','line_number':471,'multiline':False]['text':'','line_number':472,'multiline':False]['text':' If we can fold the aux interval, we combine the aux interval into the primary one, which','line_number':473,'multiline':False]['text':' would yield [low1, min(high1, high2)) if we can prove that low1 > low2. Then we create a','line_number':474,'multiline':False]['text':' similar auxiliary interval for the right side if there is disagreement on the inclusion.','line_number':475,'multiline':False]['text':' We'll attempt to fold both intervals. Should we conclude definitively that they are','line_number':476,'multiline':False]['text':' point intervals, we update the inclusion of the main interval for the respective side.','line_number':477,'multiline':False]['text':' We can determine the two bounds are equal.','line_number':486,'multiline':False]['text':'inclusive','line_number':487,'multiline':True]['text':' We cannot determine statically how the two bounds compare.','line_number':492,'multiline':False]['text':'
     * An auxiliary interval should resolve to a non-empty interval if the original intervals we're
     * intersecting overlap and produce something non-empty. Below we create an overlap indicator,
     * which tells us if the intervals overlap.
     *
     * For intersection, the pair [1,2) and [2, 3] does not overlap, while [1,2] and [2, 3] does. So
     * we need to adjust our comparisons depending on if the bounds are both inclusive or not.
     ','line_number':497,'multiline':True]['text':'
     * Our final overlap indicator is as follows (using < or <= depending on inclusiveness)
     * (low1,high1) ^ (low2,high2) overlap if:
     * low2 < low1 < high2 || low2 < high1 < high2 || low1 < low2 < high1 || low1 < high2 < high1
     * As long as both intervals are non-empty.
     *
     * This covers the four cases:
     *      1. int1 intersects int2 from below, ex: (1,3) ^ (2,4)
     *      2. int1 intersects int2 from above, ex: (2,4) ^ (1,3)
     *      3. int1 is a subset of int2, ex: (2,3) ^ (1,4)
     *      4. int2 is a subset of int1, ex: (1,4) ^ (2,3)
     ','line_number':509,'multiline':True]['text':'
     * It's possible our aux indicators could be simplified. For example, a more concise indicator
     * for [low1, high1] ^ (low2, high2] might be int1_nonempty && (int2 contains low1). This
     * condition implies the intervals are non-empty and overlap, meaning the intersection is
     * non-empty. It also implies that low1 > low2, meaning the inclusive bound wins.
     ','line_number':546,'multiline':True]['text':' Our aux interval should be non-empty if overlap_indicator && (incBound > nonIncBound)','line_number':556,'multiline':False]['text':' Our aux interval should be non-empty if overlap_indicator && (incBound < nonIncBound)','line_number':571,'multiline':False]['text':'  We add the main interval to the result as long as it is a valid point interval, or','line_number':583,'multiline':False]['text':'  the bounds are not equal.','line_number':584,'multiline':False]['text':' Deduplicate via sort + unique.','line_number':605,'multiline':False]['text':' The intersection is empty, there is no need to process the remaining','line_number':640,'multiline':False]['text':' conjuncts','line_number':641,'multiline':False]['text':' The whole conjunct is false (empty interval), skip it.','line_number':649,'multiline':False]['text':' We will remove duplicate conjuncts here.','line_number':653,'multiline':False]['text':' If we have an empty result, .finish() will return boost::none.','line_number':658,'multiline':False]['text':' Empty interval.','line_number':667,'multiline':False]['text':' We do not have an equality prefix. Reject.','line_number':692,'multiline':False]['text':' For the low bound, if we are inclusive and not reversed, then we append MinKey key in','line_number':729,'multiline':False]['text':' order to include all the values for the previously constrained fields. For example,','line_number':730,'multiline':False]['text':' for a compound index on (a, b) if we constrain a >= 1 then we need to construct a','line_number':731,'multiline':False]['text':' compound bound [{1, MinKey}, ...). Conversely on the upper side if we are inclusive','line_number':732,'multiline':False]['text':' we need to append a MaxKey in order to include the previously constrained values. If','line_number':733,'multiline':False]['text':' we are not inclusive, then we do not want to include any of the values for the','line_number':734,'multiline':False]['text':' previously constrained fields, and thus append MaxKey for the lower side. On the same','line_number':735,'multiline':False]['text':' compound index (a, b), we encode the condition a > 1 as {(1, MaxKey), ...}.','line_number':736,'multiline':False]['text':' Conversely of the upper side we append MinKey. If we are reversing, the lower and','line_number':737,'multiline':False]['text':' upper bounds effectively switch sides, and we append MinKey where we would have','line_number':738,'multiline':False]['text':' appended MaxKey, and vice versa.','line_number':739,'multiline':False]['text':'*
 * Transport which updates an interval to be in a normal form. Children of each conjunction and
 * disjunction node are consistently ordered. We order the Atoms first by low bound, then by high
 * bound.
 ','line_number':759,'multiline':True]['text':' Noop.','line_number':767,'multiline':False]['text':' If there is a traverse node, we assume that the key is already multikey.','line_number':819,'multiline':False]['text':' If the traverse node is single level, and its immediate parent isn't another traverse','line_number':821,'multiline':False]['text':' node, then we can check the next node.','line_number':822,'multiline':False]['text':'seenParentTraverse','line_number':824,'multiline':True]['text':' The multikeynessTrie contains metadata only on consecutively nested fields.','line_number':827,'multiline':False]['text':' e.g., {a: [[ {b: [5]} ]]} the multikeyness trie would *correctly* respond that path','line_number':828,'multiline':False]['text':' "Get [a] Traverse [1] Get [b] Id" is non-multikey.','line_number':829,'multiline':False]['text':' Traverse [1] flattens only one level of nesting, and field "b" is nested in two levels.','line_number':830,'multiline':False]['text':'','line_number':831,'multiline':False]['text':' Currently, if the traverse node is multi level (Traverse [N], N > 1), or we have multiple','line_number':832,'multiline':False]['text':' subsequent traverse nodes, we assume that the path is multikey.','line_number':833,'multiline':False]['text':' We have no information about multikeyness of the child path, i.e., it is multikey.','line_number':835,'multiline':False]['text':' If there is no trie node for the PathGet field, then the field is multikey.','line_number':843,'multiline':False]['text':'seenParentTraverse','line_number':849,'multiline':True]['text':' Check whether the requirement interval is a requirement for an array.','line_number':866,'multiline':False]['text':' Create a single requirement interval for an array.','line_number':868,'multiline':False]['text':' Intersect the single requirement for an array with the input interval requirements.','line_number':871,'multiline':False]['text':' This will update in-place 'arrayIntervalDNF', which depending on the intervals, will','line_number':872,'multiline':False]['text':' result to either a subset of a single requirement for an array or an empty set.','line_number':873,'multiline':False]['text':'intersect','line_number':874,'multiline':True]['text':' Comparing the result of the intersection with the array requirement will return','line_number':876,'multiline':False]['text':' true only if the input requirements contain a subset of array requirement.','line_number':877,'multiline':False]['text':' Lower bound is strictly larger than null, or equal to null but not inclusive.','line_number':900,'multiline':False]['text':' Upper bound is strictly smaller than null, or equal to null but not inclusive.','line_number':907,'multiline':False]['text':'*
 * Transport that replaces the intervals containing nulls in-place in order to preserve the DNF/CNF
 * structure. If 'excludeNull' is true, the interval is updated to (null, HighBound] (i.e.
 * intersecting {>Const [null]}). Otherwise, it is updated to [LowBound, null] (i.e. intersecting
 * {<=Const [null]}).
 ','line_number':914,'multiline':True]['text':'inclusive','line_number':930,'multiline':True]['text':'inclusive','line_number':933,'multiline':True]['text':' Requires all the intervals to be constant and does not have a high bound with null','line_number':956,'multiline':False]['text':' inclusively. Having a low bound with null is acceptable because it's beneficial to split','line_number':957,'multiline':False]['text':' [null, HighBound] into [null, null] and (null, HighBound].','line_number':958,'multiline':False]['text':' excludeNull ','line_number':968,'multiline':True]['text':' excludeNull ','line_number':969,'multiline':True]['text':' namespace mongo::optimizer','line_number':974,'multiline':False]