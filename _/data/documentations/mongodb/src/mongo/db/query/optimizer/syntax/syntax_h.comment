['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This is the core typedef that represents an abstract binding tree (ABT). The templated types
 * represent all possible instances for a given ABT operator, each deriving from an Operator class
 * that indicates the number of children nodes.
 *
 * NOTE: If the set of possible types in an ABT changes, please update the corresponding gdb
 * pretty printer.
 ','line_number':43,'multiline':True]['text':' expressions','line_number':52,'multiline':False]['text':' path elements','line_number':64,'multiline':False]['text':' nodes','line_number':78,'multiline':False]['text':' utilities','line_number':106,'multiline':False]['text':'*
 * ABT operators which have a fixed arity.
 ','line_number':109,'multiline':True]['text':'*
 * ABT operators which have a dynamic arity with an optional known minimum.
 ','line_number':115,'multiline':True]['text':'*
 * This is a special inert ABT node. It is used by rewriters to preserve structural properties of
 * nodes during in-place rewriting.
 ','line_number':147,'multiline':True]['text':'*
 * This is a helper structure that represents Node internal references. Some relational nodes
 * implicitly reference named projections from its children.
 *
 * Canonical examples are: GROUP BY "a", ORDER BY "b", etc.
 *
 * We want to capture these references. The rule of ABTs says that the ONLY way to reference a named
 * entity is through the Variable class. The uniformity of the approach makes life much easier for
 * the optimizer developers.
 * On the other hand using Variables everywhere makes writing code more verbose, hence this helper.
 ','line_number':158,'multiline':True]['text':'*
     * Construct Variable objects out of provided vector of strings.
     ','line_number':173,'multiline':True]['text':' Construct actual Variable objects from names and make them the children of this object.','line_number':177,'multiline':False]['text':'*
     * Alternatively, construct references out of provided ABTs. This may be useful when the
     * internal references are more complex then a simple string. We may consider e.g. GROUP BY
     * (a+b).
     ','line_number':183,'multiline':True]['text':'*
 * This class represents a unified way of binding identifiers (strings) to expressions. Every ABT
 * node that introduces a new identifier must use this binder (i.e. all relational nodes adding new
 * projections).
 ','line_number':199,'multiline':True]['text':' namespace mongo::optimizer','line_number':236,'multiline':False]