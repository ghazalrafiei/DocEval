['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':32,'multiline':False]['text':' IWYU pragma: keep','line_number':52,'multiline':False]['text':' Allow for re-optimization under the higher cost limit.','line_number':109,'multiline':False]['text':'*
 * MemoIntegrator adds a logical plan to a Memo, by putting each node (stage) in the appropriate
 * group, and returning the group ID where the root node can be found.
 *
 * It works recursively: to add a node to a Memo, first add each child, and replace each child with
 * a MemoLogicalDelegator that refers to the group where that child was put.
 *
 * After stubbing out the children it relies on 'Memo::addNode' to ensure that if a syntactically
 * equal node is already in some group, we reuse it.
 ','line_number':149,'multiline':True]['text':' This is a transient structure. We do not allow copying or moving.','line_number':172,'multiline':False]['text':'other','line_number':173,'multiline':True]['text':'other','line_number':174,'multiline':True]['text':'other','line_number':175,'multiline':True]['text':'other','line_number':176,'multiline':True]['text':'*
     * Nodes
     ','line_number':178,'multiline':True]['text':'binder','line_number':185,'multiline':True]['text':'binder','line_number':192,'multiline':True]['text':'binder','line_number':210,'multiline':True]['text':'binder','line_number':218,'multiline':True]['text':'binder','line_number':226,'multiline':True]['text':'references','line_number':227,'multiline':True]['text':'binder','line_number':244,'multiline':True]['text':'refs','line_number':245,'multiline':True]['text':'filter','line_number':254,'multiline':True]['text':'binder','line_number':262,'multiline':True]['text':'refs','line_number':263,'multiline':True]['text':'binderAgg','line_number':271,'multiline':True]['text':'refsAgg','line_number':272,'multiline':True]['text':'binderGb','line_number':273,'multiline':True]['text':'refsGb','line_number':274,'multiline':True]['text':'binder','line_number':282,'multiline':True]['text':'refs','line_number':283,'multiline':True]['text':'refs','line_number':291,'multiline':True]['text':'refs','line_number':306,'multiline':True]['text':'refs','line_number':314,'multiline':True]['text':'*
     * Other ABT types.
     ','line_number':318,'multiline':True]['text':'n','line_number':322,'multiline':True]['text':'node','line_number':323,'multiline':True]['text':'env','line_number':324,'multiline':True]['text':'computeLastRefs','line_number':332,'multiline':True]['text':' Contains several resources required for calling Memo::addNode.','line_number':395,'multiline':False]['text':' The memo to be updated.','line_number':397,'multiline':False]['text':' An out param, for reporting nodes we insert to the memo.','line_number':399,'multiline':False]['text':' Each [node, groupId] entry means force the given node to go into the given group.','line_number':402,'multiline':False]['text':' This is only used for the root node passed in to Memo::integrate(), so there should be','line_number':403,'multiline':False]['text':' at most 1 entry.','line_number':404,'multiline':False]['text':' Rewrite rule that triggered this node to be created.','line_number':407,'multiline':False]['text':' Returns true if n is a sargable node with exactly one predicate on _id.','line_number':469,'multiline':False]['text':' If inserted into a new group, derive logical properties, and cardinality estimation','line_number':499,'multiline':False]['text':' for the new group.','line_number':500,'multiline':False]['text':' Cache estimation for each individual requirement. We may be attempting to individually','line_number':528,'multiline':False]['text':' estimate the same requirement in a different group.','line_number':529,'multiline':False]['text':'ctx','line_number':532,'multiline':True]['text':' Already estimated. Retrieve from cache.','line_number':536,'multiline':False]['text':' Invalid tree: node is its own child.','line_number':578,'multiline':False]['text':' Only for debugging.','line_number':590,'multiline':False]['text':' Current node is not in the memo. Insert unchanged.','line_number':596,'multiline':False]['text':' If inserted into an existing group, verify we deliver all expected projections.','line_number':615,'multiline':False]['text':' TODO: possibly verify cardinality estimation','line_number':622,'multiline':False]['text':' namespace mongo::optimizer::cascades','line_number':729,'multiline':False]