['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' The logging facility enforces the rule that logging should not be done in a header file. Since','line_number':53,'multiline':False]['text':' template classes and functions below must be defined in the header file and since they use the','line_number':54,'multiline':False]['text':' logging facility, we have to define the helper functions below to perform the actual logging','line_number':55,'multiline':False]['text':' operation from template code.','line_number':56,'multiline':False]['text':' namespace log_detail','line_number':62,'multiline':False]['text':'*
 * QueryPlanner's job is to provide an entry point to the query planning and optimization
 * process.
 ','line_number':67,'multiline':True]['text':'*
     * Holds the result of subqueries planning for rooted $or queries.
     ','line_number':73,'multiline':True]['text':'*
         * A class used internally in order to keep track of the results of planning
         * a particular $or branch.
         ','line_number':77,'multiline':True]['text':' A parsed version of one branch of the $or.','line_number':82,'multiline':False]['text':' If there is cache data available, then we store it here rather than generating','line_number':85,'multiline':False]['text':' a set of alternate plans for the branch. The index tags from the cache data','line_number':86,'multiline':False]['text':' can be applied directly to the parent $or MatchExpression when generating the','line_number':87,'multiline':False]['text':' composite solution.','line_number':88,'multiline':False]['text':' Query solutions resulting from planning the $or branch.','line_number':91,'multiline':False]['text':' The copy of the query that we will annotate with tags and use to construct the composite','line_number':95,'multiline':False]['text':' solution. Must be a rooted $or query, or a contained $or that has been rewritten to a','line_number':96,'multiline':False]['text':' rooted $or.','line_number':97,'multiline':False]['text':' Holds a list of the results from planning each branch.','line_number':100,'multiline':False]['text':' We need this to extract cache-friendly index data from the index assignments.','line_number':103,'multiline':False]['text':'*
     * Returns the list of possible query solutions for the provided 'query' for multi-planning.
     * Uses the indices and other data in 'params' to determine the set of available plans.
     ','line_number':112,'multiline':True]['text':'*
     * Generates and returns a query solution, given data retrieved from the plan cache.
     *
     * @param query -- query for which we are generating a plan
     * @param params -- planning parameters
     * @param cachedSoln -- the CachedSolution retrieved from the plan cache.
     ','line_number':119,'multiline':True]['text':'*
     * Plan each branch of the rooted $or query independently, and return the resulting
     * lists of query solutions in 'SubqueriesPlanningResult'.
     *
     * The 'createPlanCacheKey' callback is used to create a plan cache key of the specified
     * 'KeyType' for each of the branches to look up the plan in the 'planCache'.
     ','line_number':131,'multiline':True]['text':'*
     * Generates and returns the index tag tree that will be inserted into the plan cache. This data
     * gets stashed inside a QuerySolution until it can be inserted into the cache proper.
     *
     * @param taggedTree -- a MatchExpression with index tags that has been
     *   produced by the enumerator.
     * @param relevantIndices -- a list of the index entries used to tag
     *   the tree (i.e. index numbers in the tags refer to entries in this vector)
     ','line_number':146,'multiline':True]['text':'*
     * @param filter -- an untagged MatchExpression
     * @param indexTree -- a tree structure retrieved from the
     *   cache with index tags that indicates how 'filter' should
     *   be tagged.
     * @param indexMap -- needed in order to put the proper index
     *   numbers inside the index tags
     *
     * On success, 'filter' is mutated so that it has all the
     * index tags needed in order for the access planner to recreate
     * the cached plan.
     *
     * On failure, the tag state attached to the nodes of 'filter'
     * is invalid. Planning from the cache should be aborted.
     *
     * Does not take ownership of either filter or indexTree.
     ','line_number':158,'multiline':True]['text':'*
     * Uses the query planning results from QueryPlanner::planSubqueries() and the multi planner
     * callback to select the best plan for each branch.
     *
     * On success, returns a composite solution obtained by planning each $or branch independently.
     ','line_number':179,'multiline':True]['text':' namespace mongo','line_number':193,'multiline':False]