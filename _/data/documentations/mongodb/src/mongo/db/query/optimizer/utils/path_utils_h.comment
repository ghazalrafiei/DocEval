['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':43,'multiline':False]['text':'*
 * If the input expression is a constant or a variable, or it is an EvalFilter/Path which has an
 * identity path and input which itself is constant or variable, then return a pointer to the deepst
 * simple expression.
 ','line_number':51,'multiline':True]['text':'*
 * Returns a vector all paths nested under conjunctions (PathComposeM) in the given path.
 * For example, PathComposeM(PathComposeM(Foo, Bar), Baz) returns [Foo, Bar, Baz].
 * If the given path is not a conjunction, returns a vector with the given path.
 ','line_number':68,'multiline':True]['text':'*
 * Like collectComposed() but bounded by a maximum number of composed paths.
 * If the given path has more PathComposeM;s than specified by maxDepth, then return a vector
 * with the given path. Otherwise, returns the result of collectComposed().
 *
 * This is useful for preventing the optimizer from unintentionally creating a very deep tree which
 * causes stack-overflow on a recursive traversal.
 ','line_number':75,'multiline':True]['text':'*
 * De-compose a path and an input to an EvalFilter into sequence of Filter nodes. If we have a path
 * with a prefix of PathGet's followed by a series of nested PathComposeM, then split into two or
 * more filter nodes at the composition and retain the prefix for each. The result is a tree of
 * chained filter nodes. We return an empty result if we have less than "minDepth" sub-tress which
 * are composed. If "minDepth" = 1, then we are guaranteed to return a result, which will consist of
 * a single Filter node.
 *
 * If the number of compositions exceeds "maxDepth" then we return the a single FilterNode
 * consisting of an EvalFilter over the original path and input.
 ','line_number':85,'multiline':True]['text':'*
 * Returns true if the path represented by 'node' is of the form PathGet "field" PathId
 ','line_number':100,'multiline':True]['text':'*
 * Creates a balanced tree of composition elements over the input vector which it modifies in place.
 * In the end at most one element remains in the vector.
 ','line_number':118,'multiline':True]['text':'
 * This class uses a visitor to convert an ABT representing a path (e.g. "a" or "a.b") into a
 * string representation of the path. The ABT supplied to PathStringify::stringify should only
 * contain the node types EvalPath, PathGet, PathTraverse, and PathIdentity. Otherwise, the visitor
 * will tassert.
 ','line_number':132,'multiline':True]['text':' Append without a leading dot for the first path component.','line_number':146,'multiline':False]['text':' no-op','line_number':155,'multiline':False]['text':'*
 * Appends a path to another path. Performs the append at PathIdentity elements.
 ','line_number':179,'multiline':True]['text':'n','line_number':191,'multiline':True]['text':'node','line_number':191,'multiline':True]['text':' noop','line_number':192,'multiline':False]['text':'*
     * Concatenate 'prefix' and 'suffix' by modifying 'prefix' in place.
     ','line_number':195,'multiline':True]['text':'*
     * Return the concatenation of 'prefix' and 'suffix'.
     ','line_number':203,'multiline':True]['text':'*
 * Given a path and a MultikeynessTrie describing the path's input,
 * removes any Traverse nodes that we know will never encounter an array.
 *
 * Returns true if any changes were made to the ABT.
 ','line_number':215,'multiline':True]['text':'*
 * Fuses an index path and a query path to determine a residual path to apply over the index
 * results. Checks if one index path is a prefix of another. Considers only Get, Traverse, and Id.
 * Return the suffix that doesn't match.
 ','line_number':223,'multiline':True]['text':'*
 * Check if a path contains a Traverse element.
 ','line_number':235,'multiline':True]['text':'*
 * This helper checks to see if we have a PathTraverse + PathId at the end of the path.
 ','line_number':240,'multiline':True]['text':'*
 * This helper checks if a path contains valid Traverse elements.
 ','line_number':245,'multiline':True]['text':' namespace mongo::optimizer','line_number':250,'multiline':False]