['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' CollectionAcquisitions are always yieldable.','line_number':68,'multiline':False]['text':' We may have a null opCtx in testing.','line_number':75,'multiline':False]['text':' Multi-document transactions cannot yield locks or snapshots. We convert to a non-yielding','line_number':79,'multiline':False]['text':' interruptible plan.','line_number':80,'multiline':False]['text':' If the state of our locks held is not yieldable at all, we will assume this is an internal','line_number':87,'multiline':False]['text':' operation that will not yield.','line_number':88,'multiline':False]['text':' After we finish yielding (or in any early return), call resetTimer() to prevent yielding','line_number':128,'multiline':False]['text':' again right away. We delay the resetTimer() call so that the clock doesn't start ticking','line_number':129,'multiline':False]['text':' until after we return from the yield.','line_number':130,'multiline':False]['text':' Saving and restoring can modify '_yieldable', so we make a copy before we start.','line_number':136,'multiline':False]['text':' All data pointed to by cursors must remain valid across the yield. Setting this','line_number':143,'multiline':False]['text':' flag for the duration of yield will force any calls to abandonSnapshot() to','line_number':144,'multiline':False]['text':' commit the transaction, rather than abort it, in order to leave the cursors','line_number':145,'multiline':False]['text':' valid.','line_number':146,'multiline':False]['text':' This yield policy doesn't release locks, but it does relinquish our storage','line_number':158,'multiline':False]['text':' snapshot.','line_number':159,'multiline':False]['text':' Retry the yielding process.','line_number':183,'multiline':False]['text':' Errors other than write conflicts don't get retried, and should instead result in','line_number':185,'multiline':False]['text':' the PlanExecutor dying. We propagate all such errors as status codes.','line_number':186,'multiline':False]['text':' Things have to happen here in a specific order:','line_number':197,'multiline':False]['text':'   * Release 'yieldable'.','line_number':198,'multiline':False]['text':'   * Abandon the current storage engine snapshot.','line_number':199,'multiline':False]['text':'   * Check for interrupt if the yield policy requires.','line_number':200,'multiline':False]['text':'   * Release lock manager locks.','line_number':201,'multiline':False]['text':'   * Reacquire lock manager locks.','line_number':202,'multiline':False]['text':'   * Restore 'yieldable'.','line_number':203,'multiline':False]['text':' If we are here, the caller has guaranteed locks are not recursively held. This is a top level','line_number':206,'multiline':False]['text':' operation and we can safely clear the 'yieldable' state before unlocking and then','line_number':207,'multiline':False]['text':' re-establish it after re-locking.','line_number':208,'multiline':False]['text':' Release any storage engine resources. This requires holding a global lock to correctly','line_number':211,'multiline':False]['text':' synchronize with states such as shutdown and rollback.','line_number':212,'multiline':False]['text':' Check for interrupt before releasing locks. This avoids the complexities of having to','line_number':215,'multiline':False]['text':' re-acquire locks to clean up when we are interrupted. This is the main interrupt check during','line_number':216,'multiline':False]['text':' query execution. Yield points and interrupt points are one and the same.','line_number':217,'multiline':False]['text':' throws','line_number':219,'multiline':False]['text':' A yield has occurred, but there still may not be a 'yieldable' if the PlanExecutor','line_number':236,'multiline':False]['text':' has a 'locks internally' lock policy.','line_number':237,'multiline':False]['text':' Yieldable restore may set a new read source if necessary.','line_number':238,'multiline':False]['text':' Things have to happen here in a specific order:','line_number':244,'multiline':False]['text':'   * Abandon the current storage engine snapshot.','line_number':245,'multiline':False]['text':'   * Check for interrupt if the yield policy requires.','line_number':246,'multiline':False]['text':'   * Yield the acquired TransactionResources','line_number':247,'multiline':False]['text':'   * Restore the yielded TransactionResources','line_number':248,'multiline':False]['text':' Release any storage engine resources. This requires holding a global lock to correctly','line_number':251,'multiline':False]['text':' synchronize with states such as shutdown and rollback.','line_number':252,'multiline':False]['text':' Check for interrupt before releasing locks. This avoids the complexities of having to','line_number':255,'multiline':False]['text':' re-acquire locks to clean up when we are interrupted. This is the main interrupt check during','line_number':256,'multiline':False]['text':' query execution. Yield points and interrupt points are one and the same.','line_number':257,'multiline':False]['text':' throws','line_number':259,'multiline':False]['text':' namespace mongo','line_number':278,'multiline':False]