['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace log_detail','line_number':125,'multiline':False]['text':'*
 * A plan scorer for the classic plan stage tree. Defines the plan productivity as a number
 * of intermediate results returned, or advanced, by the root stage, divided by the "unit of works"
 * which the plan performed. Each call to work(...) counts as one unit.
 ','line_number':128,'multiline':True]['text':'*
 * Return true if the nodes have the same type and the same number of children.
 ','line_number':171,'multiline':True]['text':'*
 * Returns true if the value can serve as a type lower bound for the purposes of type bracketing.
 * The function is designed to work with the 'interesting' for index prefix heuristic types only:
 * Number, String, Date, Timestamp, Boolean, Object, Array, ObjectId. For other types it may return
 * false positive results. The code of the function is based on index bounds build logic from
 * 'index_bounds_builder.cpp'.
 ','line_number':188,'multiline':True]['text':' Lower bound value for numbers.','line_number':201,'multiline':False]['text':' Lower bound value for strings.','line_number':205,'multiline':False]['text':' Lower bound value for dates.','line_number':208,'multiline':False]['text':' Lower bound value for timestamps.','line_number':211,'multiline':False]['text':' Lower bound value for ObjectID.','line_number':214,'multiline':False]['text':' Lower bound value for Object and Array.','line_number':218,'multiline':False]['text':' Boolean bounds are considered always open since they are non-selective.','line_number':224,'multiline':False]['text':'*
 * Returns true if the value can serve as a type upper bound for the purposes of type bracketing.
 * The function is designed to work with the 'interesting' for index prefix heuristic types only:
 * Number, String, Date, Timestamp, Boolean, Object, Array, ObjectId. For other types it may return
 * false positive results. The code of the function is based on index bounds build logic from
 * 'index_bounds_builder.cpp'.
 ','line_number':238,'multiline':True]['text':' Upper bound value for numbers.','line_number':251,'multiline':False]['text':' A string value cannot be an upper bound value.','line_number':254,'multiline':False]['text':' Upper bound value for Date.','line_number':257,'multiline':False]['text':' Upper bound value for Timestamp.','line_number':260,'multiline':False]['text':' Upper bound value for ObjectID.','line_number':263,'multiline':False]['text':' Upper bound value for String.','line_number':266,'multiline':False]['text':' Upper bound value for Object.','line_number':269,'multiline':False]['text':' Upper bound value for Array.','line_number':272,'multiline':False]['text':' Boolean bounds are considered always open since they are non-selective.','line_number':277,'multiline':False]['text':'*
 * The function tries to detect if the interval is closed on both ends. Can return false
 * positive results for the types not mentioned in the comment to 'isMinMaxValue' function.
 ','line_number':291,'multiline':True]['text':' If the bound types are different the interval is considered to be open.','line_number':296,'multiline':False]['text':' Point intervals, empty intervals, and null intervals have no direction.','line_number':302,'multiline':False]['text':'*
 * Returns true if this OIL contains only closed intervals.
 ','line_number':316,'multiline':True]['text':'*
 * Calculates score for the given index bounds. The score reflects the following rules:
 * - IndexBounds that has longest single point interval prefix wins,
 * - if winner is not defined on the previous step then IndexBounds with the longest point
 * interval prefix wins,
 * - if winner is not defined on the previous step then IndexBounds with the longest closed
 * interval prefix wins,
 * - if winner is not defined, then IndexBounds with longest interval prefix wins
 * - if winner is not defined, them IndexBounds with shortest index key pattern wins.
 ','line_number':329,'multiline':True]['text':' Skip the $** index virtual field, as it's not part of the actual index key.','line_number':347,'multiline':False]['text':' Stop scoring index bounds as soon as we see an all-values interval.','line_number':352,'multiline':False]['text':' We pack calculated stats into one value to make their comparison simplier. For every','line_number':372,'multiline':False]['text':' prefix length we allocate 12 bits (4096 values) which is more then enough since an index','line_number':373,'multiline':False]['text':' can have no more than 32 fields (see "MongoDB Limits and Thresholds" reference).','line_number':374,'multiline':False]['text':' 'indexKeyLength' is treated differently because, unlike others, we prefer shorter index','line_number':375,'multiline':False]['text':' key prefix length (see the comment to the function for details).','line_number':376,'multiline':False]['text':'*
 * Calculates scores for the given IndexBounds and add 1 to every winner's resultScores. i-th
 * position in resultScores corresponds to i-th field in IndexBound.
 ','line_number':384,'multiline':True]['text':' namespace','line_number':405,'multiline':False]['text':' Compatible nodes have the same number of children, see comment to 'areNodesCompatible'','line_number':429,'multiline':False]['text':' function.','line_number':430,'multiline':False]['text':' namespace mongo::plan_ranker','line_number':462,'multiline':False]