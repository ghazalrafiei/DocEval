['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':30,'multiline':False]['text':' The string predicate can use index {a: 1}, since the collators match. The non-string','line_number':100,'multiline':False]['text':' comparison can use index {b: 1}, even though the collators don't match.','line_number':101,'multiline':False]['text':' Since the index has a collation, the regex must be applied after fetching the documents','line_number':236,'multiline':False]['text':' (INEXACT_FETCH tightness).','line_number':237,'multiline':False]['text':' This test verifies that an in-memory sort stage is added and sort provided by an index is not','line_number':623,'multiline':False]['text':' used when the collection has a compound index with a non-simple collation and we issue a','line_number':624,'multiline':False]['text':' non-collatable point-query on the prefix of the index key together with a sort on a suffix of the','line_number':625,'multiline':False]['text':' index key. This is a test for SERVER-48993.','line_number':626,'multiline':False]['text':' No explicit collation on the query. This will implicitly use the simple collation since the','line_number':632,'multiline':False]['text':' collection does not have a default collation.','line_number':633,'multiline':False]['text':' A query with an explicit simple collation.','line_number':645,'multiline':False]['text':' This test verifies that an in-memory sort stage is added and sort provided by an index is not','line_number':659,'multiline':False]['text':' used when the collection has a compound index with a non-specified collation and we issue a','line_number':660,'multiline':False]['text':' non-collatable point-query on the prefix of the index key together with a sort on the suffix and','line_number':661,'multiline':False]['text':' an explicit non-simple collation. This is a test for SERVER-48993.','line_number':662,'multiline':False]['text':' This test verifies that an in-memory sort stage is added and sort provided by indexes is not used','line_number':677,'multiline':False]['text':' when the collection has a compound index with a non-simple collation and we issue a','line_number':678,'multiline':False]['text':' non-collatable point-query on the prefix of the index key together with a sort on the suffix and','line_number':679,'multiline':False]['text':' an explicit non-simple collation that differs from the index collation. This is a test for','line_number':680,'multiline':False]['text':' SERVER-48993.','line_number':681,'multiline':False]['text':' This test verifies that a sort is provided by an index when the collection has a compound index','line_number':699,'multiline':False]['text':' with a non-simple collation and we issue a query with a different non-simple collation is a','line_number':700,'multiline':False]['text':' non-collatable point-query on the prefix, a non-collatable range-query on the suffix, and a sort','line_number':701,'multiline':False]['text':' on the suffix key. This is a test for SERVER-48993.','line_number':702,'multiline':False]['text':' This test verifies that an in-memory sort stage is added when the collection has a compound index','line_number':721,'multiline':False]['text':' with a non-simple collation and we issue a query with a different non-simple collation is a','line_number':722,'multiline':False]['text':' non-collatable point-query on the prefix, a collatable range-query on the suffix, and a sort on','line_number':723,'multiline':False]['text':' the suffix key. This is a test for SERVER-48993.','line_number':724,'multiline':False]['text':' This test verifies that a SORT_MERGE stage is added when the collection has a compound index with','line_number':743,'multiline':False]['text':' a non-simple collation and we issue a query with a different non-simple collation is a','line_number':744,'multiline':False]['text':' non-collatable multi-point query on the prefix, a non-collatable range-query on the suffix, and a','line_number':745,'multiline':False]['text':' sort on the suffix key.This is a test for SERVER-48993.','line_number':746,'multiline':False]['text':'*
 * This test confirms that we place a fetch stage after the IDXScan in the case where both query
 * and index have the same non-simple collation. To handle this scenario without this fetch would
 * require a mechanism to ensure we don't attempt to encode for collation an already encoded index
 * key entry when generating the sort key.
 ','line_number':766,'multiline':True]['text':' Test that a clustered collection scan can drop elements from the filter if the underlying','line_number':800,'multiline':False]['text':' scan can apply equivalent filtering using min/max record id.','line_number':801,'multiline':False]['text':' Test that a clustered collection scan can drop elements from the filter if the underlying','line_number':812,'multiline':False]['text':' scan can apply equivalent filtering using min/max record id, but will retain any','line_number':813,'multiline':False]['text':' other filter terms which _cannot_ be so represented as limits on the record id.','line_number':814,'multiline':False]['text':' Test that a clustered collection scan will NOT drop elements from the filter','line_number':826,'multiline':False]['text':' if collation differs between the clustered collection and the query.','line_number':827,'multiline':False]['text':' Test that a clustered collection scan will NOT drop elements from the filter','line_number':841,'multiline':False]['text':' if collation differs between the clustered collection and the query, _even_ if','line_number':842,'multiline':False]['text':' the parameters to the query are not affected by collation (e.g., numbers).','line_number':843,'multiline':False]['text':' For a single specific query, the filter _could_ be simplified, but it would not','line_number':845,'multiline':False]['text':' be correct to allow that query to be cached, as a later reuse may use','line_number':846,'multiline':False]['text':' values which _are_ affected.','line_number':847,'multiline':False]['text':' namespace','line_number':860,'multiline':False]