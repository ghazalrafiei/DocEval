['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Called once the execution plan has been fully saved, all locks have been relinquished, and
     * the storage engine snapshot has been abandoned.
     ','line_number':59,'multiline':True]['text':'*
     * Called if the PlanYieldPolicy observes a WriteConflictException while attempting to restore
     * an execution plan.
     ','line_number':65,'multiline':True]['text':'*
     * If the yield policy is INTERRUPT_ONLY, this is called prior to checking for interrupt.
     ','line_number':71,'multiline':True]['text':' Any call to getNext() may yield. In particular, the executor may die on any call to','line_number':80,'multiline':False]['text':' getNext() due to a required index or collection becoming invalid during yield. If this','line_number':81,'multiline':False]['text':' occurs, getNext() will produce an error during yield recovery and will return FAILURE.','line_number':82,'multiline':False]['text':' Additionally, this will handle all WriteConflictExceptions that occur while processing','line_number':83,'multiline':False]['text':' the query.  With this yield policy, it is possible for getNext() to return FAILURE with','line_number':84,'multiline':False]['text':' locks released, if the operation is killed while yielding.','line_number':85,'multiline':False]['text':' This will handle WriteConflictExceptions that occur while processing the query, but will','line_number':88,'multiline':False]['text':' not yield locks. abandonSnapshot() will be called if a WriteConflictException occurs so','line_number':89,'multiline':False]['text':' callers must be prepared to get a new snapshot. The caller must hold their locks','line_number':90,'multiline':False]['text':' continuously from construction to destruction. Callers which do not want auto-yielding,','line_number':91,'multiline':False]['text':' but may release their locks during query execution must use the YIELD_MANUAL policy.','line_number':92,'multiline':False]['text':' Use this policy if you want to disable auto-yielding, but will release locks while using','line_number':95,'multiline':False]['text':' the PlanExecutor. Any WriteConflictExceptions will be raised to the caller of getNext().','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' With this policy, an explicit call must be made to saveState() before releasing locks,','line_number':98,'multiline':False]['text':' and an explicit call to restoreState() must be made after reacquiring locks.','line_number':99,'multiline':False]['text':' restoreState() will throw if the PlanExecutor is now invalid due to a catalog operation','line_number':100,'multiline':False]['text':' (e.g. collection drop) during yield.','line_number':101,'multiline':False]['text':' Will not yield locks or storage engine resources, either because the caller intends to','line_number':104,'multiline':False]['text':' hold the lock continuously for the lifetime of this PlanExecutor, or because this','line_number':105,'multiline':False]['text':' PlanExecutor doesn't logically belong to a Collection, and so does not need to be','line_number':106,'multiline':False]['text':' locked during execution. For example, this yield policy is used for PlanExecutors','line_number':107,'multiline':False]['text':' which unspool queued metadata ("virtual collection scans") for listCollections and','line_number':108,'multiline':False]['text':' listIndexes.','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' Will still check for interrupt.','line_number':111,'multiline':False]['text':' Used for testing, this yield policy will cause the PlanExecutor to time out on the first','line_number':114,'multiline':False]['text':' yield, returning FAILURE with an error object encoding a ErrorCodes::ExceededTimeLimit','line_number':115,'multiline':False]['text':' message.','line_number':116,'multiline':False]['text':' Used for testing, this yield policy will cause the PlanExecutor to be marked as killed on','line_number':119,'multiline':False]['text':' the first yield, returning FAILURE with an error object encoding a','line_number':120,'multiline':False]['text':' ErrorCodes::QueryPlanKilled message.','line_number':121,'multiline':False]['text':'*
     * Returns the policy that this operation should use, accounting for any special circumstances,
     * and otherwise the desired policy. Should always be used when constructing a PlanYieldPolicy.
     ','line_number':180,'multiline':True]['text':'*
     * Constructs a PlanYieldPolicy of the given 'policy' type. This class uses an ElapsedTracker
     * to keep track of elapsed time, which is initialized from the parameters 'cs',
     * 'yieldIterations' and 'yieldPeriod'.
     *
     * If provided, the given 'yieldable' is released and restored by the 'PlanYieldPolicy' (in
     * addition to releasing/restoring locks and the storage engine snapshot). The provided 'policy'
     * will be overridden depending on the nature of this operation. For example, multi-document
     * transactions will always downgrade to INTERRUPT_ONLY, and operations with recursively held
     * locks will downgrade to INTERRUPT_ONLY.
     ','line_number':188,'multiline':True]['text':'*
     * Periodically returns true to indicate that it is time to check for interrupt (in the case of
     * YIELD_AUTO and INTERRUPT_ONLY) or release locks or storage engine state (in the case of
     * auto-yielding plans).
     ','line_number':209,'multiline':True]['text':'*
     * Resets the yield timer so that we wait for a while before yielding/interrupting again.
     ','line_number':216,'multiline':True]['text':'*
     * Used to cause a plan executor to check for interrupt (in the case of YIELD_AUTO and
     * INTERRUPT_ONLY) or release locks or storage engine state (in the case of auto-yielding
     * plans). The PlanExecutor must *not* be in saved state. Handles calls to save/restore state
     * internally.
     *
     * Returns Status::OK() if the executor was restored successfully and is still alive. Returns
     * ErrorCodes::QueryPlanKilled if the executor got killed during yield, and
     * ErrorCodes::ExceededTimeLimit if the operation has exceeded the time limit.
     *
     * Calls 'whileYieldingFn' after relinquishing locks and before reacquiring the locks that have
     * been relinquished.
     ','line_number':221,'multiline':True]['text':'*
     * All calls to shouldYieldOrInterrupt() will return true until the next call to
     * yieldOrInterrupt(). This must only be called for auto-yielding plans, to force a yield. It
     * cannot be used to force an interrupt for INTERRUPT_ONLY plans.
     ','line_number':237,'multiline':True]['text':'*
     * Returns true if there is a possibility that a collection lock will be yielded at some point
     * during this PlanExecutor's lifetime.
     ','line_number':247,'multiline':True]['text':'*
     * Returns true if this yield policy performs automatic yielding. Note 'yielding' here refers to
     * either releasing storage engine resources via abandonSnapshot() OR yielding LockManager
     * locks.
     ','line_number':267,'multiline':True]['text':'*
     * Functions to be implemented by derived classes which save and restore query execution state.
     * Concrete implementations may be aware of the details of how to save and restore state for
     * specific query execution engines.
     ','line_number':301,'multiline':True]['text':'*
     * TODO SERVER-59620: Remove this.
     *
     * Indicates whether we should use the feature-flag-guarded behavior for
     * keeping data pinned across yields.
     ','line_number':309,'multiline':True]['text':'*
     * Relinquishes and reacquires lock manager locks and catalog state. Also responsible for
     * checking interrupt during yield and calling 'abandonSnapshot()' to relinquish the query's
     * storage engine snapshot.
     ','line_number':319,'multiline':True]['text':' namespace mongo','line_number':338,'multiline':False]