['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Struct containing basic stats about a collection useful for query planning.
 ','line_number':42,'multiline':True]['text':' The number of records in the collection.','line_number':46,'multiline':False]['text':' The approximate size of the collection in bytes.','line_number':49,'multiline':False]['text':' The allocated storage size in bytes.','line_number':52,'multiline':False]['text':' Whether this is a timeseries collection. This is sometimes used in planning decisions.','line_number':55,'multiline':False]['text':'*
 * Struct containing information about secondary collections (such as the 'from' collection in
 * $lookup) useful for query planning.
 ','line_number':59,'multiline':True]['text':' This holds information about the internal traversal preference used for time series. If we choose','line_number':71,'multiline':False]['text':' an index that involves fields we're interested in, we prefer a specific direction to avoid a','line_number':72,'multiline':False]['text':' blocking sort.','line_number':73,'multiline':False]['text':' If we end up with an index that provides {sortPattern}, we prefer to scan it in direction','line_number':75,'multiline':False]['text':' {direction}.','line_number':76,'multiline':False]['text':' Cluster key for the collection this query accesses (for time-series it's control.min.time).','line_number':79,'multiline':False]['text':' If a collection scan is chosen, this will be compared against the sortPattern to see if we','line_number':80,'multiline':False]['text':' can satisfy the traversal preference.','line_number':81,'multiline':False]['text':' You probably want to set this.','line_number':95,'multiline':False]['text':' Set this if you don't want a table scan.','line_number':98,'multiline':False]['text':' See http://docs.mongodb.org/manual/reference/parameters/','line_number':99,'multiline':False]['text':' Set this if you *always* want a collscan outputted, even if there's an ixscan.  This','line_number':102,'multiline':False]['text':' makes ranking less accurate, especially in the presence of blocking stages.','line_number':103,'multiline':False]['text':' Set this if you're running on a sharded cluster.  We'll add a "drop all docs that','line_number':106,'multiline':False]['text':' shouldn't be on this shard" stage before projection.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' In order to set this, you must check OperationShardingState::isComingFromRouter() in the','line_number':109,'multiline':False]['text':' same lock that you use to build the query executor. You must also wrap the PlanExecutor','line_number':110,'multiline':False]['text':' in a ClientCursor within the same lock.','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' See the comment on ShardFilterStage for details.','line_number':113,'multiline':False]['text':' Set this if you want to turn on index intersection.','line_number':116,'multiline':False]['text':' Set this to generate covered whole IXSCAN plans.','line_number':119,'multiline':False]['text':' Set this to track the most recent timestamp seen by this cursor while scanning the','line_number':122,'multiline':False]['text':' oplog or change collection.','line_number':123,'multiline':False]['text':' Set this so that collection scans on the oplog wait for visibility before reading.','line_number':126,'multiline':False]['text':' Set this so that tryGetExecutorDistinct() will only use a plan that _guarantees_ it will','line_number':129,'multiline':False]['text':' return exactly one document per value of the distinct field. See the comments above the','line_number':130,'multiline':False]['text':' declaration of tryGetExecutorDistinct() for more detail.','line_number':131,'multiline':False]['text':' Set this on an oplog scan to uassert that the oplog has not already rolled over the','line_number':134,'multiline':False]['text':' minimum 'ts' timestamp specified in the query.','line_number':135,'multiline':False]['text':' Instruct the plan enumerator to enumerate contained $ors in a special order. $or','line_number':138,'multiline':False]['text':' enumeration can generate an exponential number of plans, and is therefore limited at some','line_number':139,'multiline':False]['text':' arbitrary cutoff controlled by a parameter. When this limit is hit, the order of','line_number':140,'multiline':False]['text':' enumeration is important. For example, a query like the following has a "contained $or"','line_number':141,'multiline':False]['text':' (within an $and):','line_number':142,'multiline':False]['text':' {a: 1, $or: [{b: 1, c: 1}, {b: 2, c: 2}]}','line_number':143,'multiline':False]['text':' For this query if there are indexes a_b={a: 1, b: 1} and a_c={a: 1, c: 1}, the normal','line_number':144,'multiline':False]['text':' enumeration order would output assignments [a_b, a_b], [a_c, a_b], [a_b, a_c], then [a_c,','line_number':145,'multiline':False]['text':' a_c]. This flag will instruct the enumerator to instead prefer a different order. It's','line_number':146,'multiline':False]['text':' hard to summarize, but perhaps the phrases "lockstep enumeration", "simultaneous','line_number':147,'multiline':False]['text':' advancement", or "parallel iteration" will help the reader. The effect is to give earlier','line_number':148,'multiline':False]['text':' enumeration to plans which use the same index of alternative across all branches. In this','line_number':149,'multiline':False]['text':' order, we would get assignments [a_b, a_b], [a_c, a_c], [a_c, a_b], then [a_b, a_c]. This','line_number':150,'multiline':False]['text':' is thought to be helpful in general, but particularly in cases where all children of the','line_number':151,'multiline':False]['text':' $or use the same fields and have the same indexes available, as in this example.','line_number':152,'multiline':False]['text':' Ensure that any plan generated returns data that is "owned." That is, all BSONObjs are','line_number':155,'multiline':False]['text':' in an "owned" state and are not pointing to data that belongs to the storage engine.','line_number':156,'multiline':False]['text':' When generating column scan queries, splits match expressions so that the filters can be','line_number':159,'multiline':False]['text':' applied per-column. This is off by default, since the execution side doesn't support it','line_number':160,'multiline':False]['text':' yet.','line_number':161,'multiline':False]['text':' See Options enum above.','line_number':165,'multiline':False]['text':' What indices are available for planning?','line_number':168,'multiline':False]['text':' Columnar indexes available.','line_number':171,'multiline':False]['text':' Basic collection stats for the main collection.','line_number':174,'multiline':False]['text':' What's our shard key?  If INCLUDE_SHARD_FILTER is set we will create a shard filtering','line_number':177,'multiline':False]['text':' stage.  If we know the shard key, we can perform covering analysis instead of always','line_number':178,'multiline':False]['text':' forcing a fetch.','line_number':179,'multiline':False]['text':' Were index filters applied to indices?','line_number':182,'multiline':False]['text':' Were query settings applied?','line_number':185,'multiline':False]['text':' What's the max number of indexed solutions we want to output?  It's expensive to compare','line_number':188,'multiline':False]['text':' plans via the MultiPlanStage, and the set of possible plans is very large for certain','line_number':189,'multiline':False]['text':' index+query combinations.','line_number':190,'multiline':False]['text':' Specifies the clusteredIndex information necessary to utilize the cluster key in bounded','line_number':193,'multiline':False]['text':' collection scans and other query operations.','line_number':194,'multiline':False]['text':' Specifies the collator information necessary to utilize the cluster key in bounded','line_number':197,'multiline':False]['text':' collection scans and other query operations.','line_number':198,'multiline':False]['text':' List of information about any secondary collections that can be executed against.','line_number':201,'multiline':False]['text':' Size of available memory in bytes.','line_number':206,'multiline':False]['text':' namespace mongo','line_number':210,'multiline':False]