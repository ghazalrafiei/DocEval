['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':36,'multiline':False]['text':' The lexical environment for the expression being traversed. A variable reference takes the','line_number':162,'multiline':False]['text':' form "$$variable_name" in MQL's concrete syntax and gets transformed into a numeric','line_number':163,'multiline':False]['text':' identifier (Variables::Id) in the AST. During this translation, we directly translate any','line_number':164,'multiline':False]['text':' such variable to an SBE frame id using this mapping.','line_number':165,'multiline':False]['text':'*
 * For the given MatchExpression 'expr', generates a path traversal SBE plan stage sub-tree
 * implementing the comparison expression.
 ','line_number':172,'multiline':True]['text':' Generate an expression to read a sub-field at the current nested level.','line_number':189,'multiline':False]['text':' For the last level, we can just return the field slot without the need for a','line_number':196,'multiline':False]['text':' traverse stage.','line_number':197,'multiline':False]['text':' Generate nested traversal.','line_number':201,'multiline':False]['text':' Generate the traverse stage for the current nested level.','line_number':212,'multiline':False]['text':' When we know for sure that 'inputExpr' will be a document and _not_ an array (such as','line_number':226,'multiline':False]['text':' when accessing a field on the root document), we can generate a simpler expression.','line_number':227,'multiline':False]['text':' The general case: the value in the 'inputExpr' may be an array that will require','line_number':232,'multiline':False]['text':' traversal.','line_number':233,'multiline':False]['text':'*
 * Generates an EExpression that converts the input to upper or lower case.
 ','line_number':251,'multiline':True]['text':'*
 * Generate an EExpression representing a Regex function result upon null argument(s) depending on
 * the type of the function: $regexMatch - false, $regexFind - null, $RegexFindAll - [].
 ','line_number':286,'multiline':True]['text':' This visitor fires after each variable definition in a $let expression. The top of the','line_number':505,'multiline':False]['text':' _context's expression stack will be an expression defining the variable initializer. We','line_number':506,'multiline':False]['text':' use a separate frame stack ('varsFrameStack') to keep track of which variable we are','line_number':507,'multiline':False]['text':' visiting, so we can appropriately bind the initializer.','line_number':508,'multiline':False]['text':' Second, we bind this variables AST-level name (with type Variable::Id) to the frame that','line_number':517,'multiline':False]['text':' will be used for compilation and execution. Once this "stage builder" finishes, these','line_number':518,'multiline':False]['text':' Variable::Id bindings will no longer be relevant.','line_number':519,'multiline':False]['text':' Build a linear tree for a small number of children so that we can pre-validate all','line_number':697,'multiline':False]['text':' arguments.','line_number':698,'multiline':False]['text':' Return a zero constant if the expression has no operand children.','line_number':761,'multiline':False]['text':' Count the number of dates among children of this $add while verifying the types','line_number':777,'multiline':False]['text':' so that we can later check that we have at most one date.','line_number':778,'multiline':False]['text':' At this point 'binds' vector contains arguments of $add expression in the reversed','line_number':791,'multiline':False]['text':' order. We need to reverse it back to perform summation in the right order below.','line_number':792,'multiline':False]['text':' Summation in different order can lead to different result because of accumulated','line_number':793,'multiline':False]['text':' precision errors from floating point types.','line_number':794,'multiline':False]['text':' Create an expression to invoke the built-in function.','line_number':913,'multiline':False]['text':' Create validation checks when builtin returns nothing','line_number':918,'multiline':False]['text':' Create an expression to invoke the built-in function.','line_number':941,'multiline':False]['text':' Create validation checks when builtin returns nothing','line_number':946,'multiline':False]['text':' Build an expression which evaluates the size of a BSON document and validates the input','line_number':966,'multiline':False]['text':' argument.','line_number':967,'multiline':False]['text':' 1. If the argument is null or empty, return null.','line_number':968,'multiline':False]['text':' 2. Else, if the argument is a BSON document, return its size.','line_number':969,'multiline':False]['text':' 3. Else, raise an error.','line_number':970,'multiline':False]['text':' Since $coerceToBool is internal-only and there are not yet any input expressions that','line_number':999,'multiline':False]['text':' generate an ExpressionCoerceToBool expression, we will leave it as unreachable for now.','line_number':1000,'multiline':False]['text':' We use the "cmp3w" primitive for every comparison, because it "type brackets" its','line_number':1030,'multiline':False]['text':' comparisons (for example, a number will always compare as less than a string). The','line_number':1031,'multiline':False]['text':' other comparison primitives are designed for comparing values of the same type.','line_number':1032,'multiline':False]['text':' If either operand evaluates to "Nothing", then the entire operation expressed by','line_number':1040,'multiline':False]['text':' 'cmp' will also evaluate to "Nothing". MQL comparisons, however, treat "Nothing" as','line_number':1041,'multiline':False]['text':' if it is a value that is less than everything other than MinKey. (Notably, two','line_number':1042,'multiline':False]['text':' expressions that evaluate to "Nothing" are considered equal to each other.) We also','line_number':1043,'multiline':False]['text':' need to explicitly check for 'bsonUndefined' type because it is considered equal to','line_number':1044,'multiline':False]['text':' "Nothing" according to MQL semantics.','line_number':1045,'multiline':False]['text':' Concatenation of no strings is an empty string.','line_number':1070,'multiline':False]['text':' ABT can bind a single variable at a time, so create a new frame for each','line_number':1078,'multiline':False]['text':' argument.','line_number':1079,'multiline':False]['text':' If there are no children, return an empty array.','line_number':1120,'multiline':False]['text':' An auxiliary boolean variable to hold a value of a common subexpression 'unit'=="week"','line_number':1184,'multiline':False]['text':' (string).','line_number':1185,'multiline':False]['text':' Get child expressions.','line_number':1195,'multiline':False]['text':'  Set parameters for an invocation of built-in "dateDiff" function.','line_number':1209,'multiline':False]['text':' Parameter "startOfWeek" - if the time unit is the week, then pass value of parameter','line_number':1217,'multiline':False]['text':' "startOfWeek" of "$dateDiff" expression, otherwise pass a valid default value, since','line_number':1218,'multiline':False]['text':' "dateDiff" built-in function does not accept non-string type values for this','line_number':1219,'multiline':False]['text':' parameter.','line_number':1220,'multiline':False]['text':' Set bindings for the frame.','line_number':1225,'multiline':False]['text':' Create an expression to invoke built-in "dateDiff" function.','line_number':1243,'multiline':False]['text':' Create expressions to check that each argument to "dateDiff" function exists, is not','line_number':1247,'multiline':False]['text':' null, and is of the correct type.','line_number':1248,'multiline':False]['text':' Return null if any of the parameters is either null or missing.','line_number':1251,'multiline':False]['text':' "timezone" parameter validation.','line_number':1264,'multiline':False]['text':' "startDate" parameter validation.','line_number':1274,'multiline':False]['text':' "endDate" parameter validation.','line_number':1278,'multiline':False]['text':' "unit" parameter validation.','line_number':1282,'multiline':False]['text':' "startOfWeek" parameter validation.','line_number':1291,'multiline':False]['text':' If 'timeUnit' value is equal to "week" then validate "startOfWeek" parameter.','line_number':1293,'multiline':False]['text':' Get child expressions.','line_number':1326,'multiline':False]['text':' Set parameters for an invocation of built-in "dateFromString" function.','line_number':1347,'multiline':False]['text':' Set bindings for the frame.','line_number':1350,'multiline':False]['text':' Create an expression to invoke built-in "dateFromString" function.','line_number':1373,'multiline':False]['text':' Create expressions to check that each argument to "dateFromString" function exists, is','line_number':1379,'multiline':False]['text':' not null, and is of the correct type.','line_number':1380,'multiline':False]['text':' Return onNull if dateString is null or missing.','line_number':1383,'multiline':False]['text':' Create an expression to return Nothing if specified, or raise a conversion failure.','line_number':1387,'multiline':False]['text':' As long as onError is specified, a Nothing return will always be filled with onError.','line_number':1388,'multiline':False]['text':' Return null if timezone is specified as either null or missing.','line_number':1399,'multiline':False]['text':' validate "format" parameter only if it has been specified.','line_number':1409,'multiline':False]['text':' We don't want to error on null.','line_number':1416,'multiline':False]['text':' This should be unreachable. The validation function above will uassert on an','line_number':1431,'multiline':False]['text':' invalid format string and then return true. It returns false on non-string','line_number':1432,'multiline':False]['text':' input, but we already check for non-string format above.','line_number':1433,'multiline':False]['text':' "timezone" parameter validation.','line_number':1438,'multiline':False]['text':' We don't want to error on null.','line_number':1443,'multiline':False]['text':' If onError is specified, a Nothing return means that either dateString is not a string,','line_number':1473,'multiline':False]['text':' or the builtin dateFromStringNoThrow caught an error. We return onError in either case.','line_number':1474,'multiline':False]['text':' This expression can carry null children depending on the set of fields provided,','line_number':1490,'multiline':False]['text':' to compute a date from parts so we only need to pop if a child exists.','line_number':1491,'multiline':False]['text':' Build a chain of nested bounds checks for each date part that is provided in the','line_number':1558,'multiline':False]['text':' expression. We elide the checks in the case that default values are used. These bound','line_number':1559,'multiline':False]['text':' checks are then used by folding over pairs of ite tests and else branches to implement','line_number':1560,'multiline':False]['text':' short-circuiting in the case that checks fail. To emulate the control flow of MQL for','line_number':1561,'multiline':False]['text':' this expression we interleave type conversion checks with time component bound checks.','line_number':1562,'multiline':False]['text':' Constructs an expression that does a bound check of var over a closed interval [lower,','line_number':1566,'multiline':False]['text':' upper].','line_number':1567,'multiline':False]['text':' Here we want to validate each field that is provided as input to the agg expression. To','line_number':1590,'multiline':False]['text':' do this we implement the following checks:','line_number':1591,'multiline':False]['text':' 1) Check if the value in a given slot null or missing.','line_number':1592,'multiline':False]['text':' 2) Check if the value in a given slot is an integral int64.','line_number':1593,'multiline':False]['text':' Build two vectors on the fly to elide bound and conversion for defaulted values.','line_number':1625,'multiline':False]['text':' checks for lower and upper bounds of date fields.','line_number':1627,'multiline':False]['text':' Operands is for the outer let bindings.','line_number':1629,'multiline':False]['text':' The regular year/month/day case.','line_number':1650,'multiline':False]['text':' MQL doesn't place bound restrictions on the second field, because seconds carry over','line_number':1690,'multiline':False]['text':' to minutes and can be large ints such as 71,841,012 or even unix epochs.','line_number':1691,'multiline':False]['text':' MQL doesn't enforce bound restrictions on millisecond fields because milliseconds','line_number':1698,'multiline':False]['text':' carry over to seconds.','line_number':1699,'multiline':False]['text':' Validate that eTimezone is a string.','line_number':1706,'multiline':False]['text':' Make a disjunction of null checks for each date part by over this vector. These checks','line_number':1719,'multiline':False]['text':' are necessary after the initial conversion computation because we need have the outer let','line_number':1720,'multiline':False]['text':' binding evaluate to null if any field is null.','line_number':1721,'multiline':False]['text':' Invocation of the datePartsWeekYear and dateParts functions depend on a TimeZoneDatabase','line_number':1734,'multiline':False]['text':' for datetime computation. This global object is registered as an unowned value in the','line_number':1735,'multiline':False]['text':' runtime environment so we pass the corresponding slot to the datePartsWeekYear and','line_number':1736,'multiline':False]['text':' dateParts functions as a variable.','line_number':1737,'multiline':False]['text':' This final ite expression allows short-circuting of the null field case. If the nullish,','line_number':1760,'multiline':False]['text':' checks pass, then we check the bounds of each field and invoke the builtins if all checks','line_number':1761,'multiline':False]['text':' pass.','line_number':1762,'multiline':False]['text':' Initialize arguments with values from stack or default values.','line_number':1804,'multiline':False]['text':' Determine whether to call dateToParts or isoDateToParts.','line_number':1824,'multiline':False]['text':' Check that each argument exists, is not null, and is the correct type.','line_number':1832,'multiline':False]['text':' Get child expressions.','line_number':1870,'multiline':False]['text':' assumes UTC until disproven','line_number':1881,'multiline':False]['text':' Local bind to hold the date expression result','line_number':1892,'multiline':False]['text':' Create expressions to check that each argument to "dateToString" function exists, is not','line_number':1896,'multiline':False]['text':' null, and is of the correct type.','line_number':1897,'multiline':False]['text':' Return onNull if date is null or missing.','line_number':1899,'multiline':False]['text':' Return null if format or timezone is null or missing.','line_number':1902,'multiline':False]['text':' "date" parameter validation.','line_number':1906,'multiline':False]['text':' "timezone" parameter validation.','line_number':1910,'multiline':False]['text':' If the query did not specify a format string and a non-UTC timezone was','line_number':1915,'multiline':False]['text':' specified, the default format should not use a 'Z' suffix.','line_number':1916,'multiline':False]['text':' We don't want to error on null.','line_number':1922,'multiline':False]['text':' "format" parameter validation.','line_number':1941,'multiline':False]['text':' We don't want to return an error on null.','line_number':1946,'multiline':False]['text':' Set parameters for an invocation of built-in "dateToString" function.','line_number':1963,'multiline':False]['text':' Create an expression to invoke built-in "dateToString" function.','line_number':1970,'multiline':False]['text':' Get child expressions.','line_number':1995,'multiline':False]['text':' Local bind to hold the date expression result','line_number':2015,'multiline':False]['text':' Set parameters for an invocation of built-in "dateTrunc" function.','line_number':2019,'multiline':False]['text':' Create an expression to invoke built-in "dateTrunc" function.','line_number':2028,'multiline':False]['text':' Local bind to hold the unitIsWeek common subexpression','line_number':2034,'multiline':False]['text':' Create expressions to check that each argument to "dateTrunc" function exists, is not','line_number':2039,'multiline':False]['text':' null, and is of the correct type.','line_number':2040,'multiline':False]['text':' Return null if any of the parameters is either null or missing.','line_number':2043,'multiline':False]['text':' "timezone" parameter validation.','line_number':2054,'multiline':False]['text':' "date" parameter validation.','line_number':2074,'multiline':False]['text':' "unit" parameter validation.','line_number':2078,'multiline':False]['text':' "binSize" parameter validation.','line_number':2099,'multiline':False]['text':' "startOfWeek" parameter validation.','line_number':2141,'multiline':False]['text':' If 'timeUnit' value is equal to "week" then validate "startOfWeek" parameter.','line_number':2154,'multiline':False]['text':' Set inputExpr to refer to the root document.','line_number':2244,'multiline':False]['text':' Check if we already have a slot containing an expression corresponding','line_number':2249,'multiline':False]['text':' to 'expr'.','line_number':2250,'multiline':False]['text':' Obtain a slot for the top-level field referred to by 'expr', if one','line_number':2257,'multiline':False]['text':' exists.','line_number':2258,'multiline':False]['text':' For the field paths that begin with "$$REMOVE", we always produce Nothing,','line_number':2263,'multiline':False]['text':' so no traversal is necessary.','line_number':2264,'multiline':False]['text':' A solo variable reference (e.g.: "$$ROOT" or "$$myvar") that doesn't need any','line_number':2294,'multiline':False]['text':' traversal.','line_number':2295,'multiline':False]['text':' Dereference a dotted path, which may contain arrays requiring implicit traversal.','line_number':2304,'multiline':False]['text':' The evaluated result of the $let is the evaluated result of its "in" field, which is','line_number':2372,'multiline':False]['text':' already on top of the stack. The "infix" visitor has already popped the variable','line_number':2373,'multiline':False]['text':' initializers off the expression stack.','line_number':2374,'multiline':False]['text':' We should have bound all the variables from this $let expression.','line_number':2377,'multiline':False]['text':' Pop the lexical frame for this $let and remove all its bindings, which are now out of','line_number':2390,'multiline':False]['text':' scope.','line_number':2391,'multiline':False]['text':' Note: In MQL, $ln on a NumberDecimal NaN historically evaluates to a NumberDouble','line_number':2406,'multiline':False]['text':' NaN.','line_number':2407,'multiline':False]['text':' Note: In MQL, $log10 on a NumberDecimal NaN historically evaluates to a NumberDouble','line_number':2432,'multiline':False]['text':' NaN.','line_number':2433,'multiline':False]['text':' Return multiplicative identity if the $multiply expression has no operands.','line_number':2570,'multiline':False]['text':' At this point 'binds' vector contains arguments of $multiply expression in the reversed','line_number':2597,'multiline':False]['text':' order. We need to reverse it back to perform multiplication in the right order below.','line_number':2598,'multiline':False]['text':' Multiplication in different order can lead to different result because of accumulated','line_number':2599,'multiline':False]['text':' precision errors from floating point types.','line_number':2600,'multiline':False]['text':' The expression argument for 'newObj' must be a sequence of a field name constant','line_number':2635,'multiline':False]['text':' expression and an expression for the value. So, we need 2 * childExprs.size() elements in','line_number':2636,'multiline':False]['text':' the expressions vector.','line_number':2637,'multiline':False]['text':' We iterate over child expressions in reverse, because they will be popped from stack in','line_number':2641,'multiline':False]['text':' reverse order.','line_number':2642,'multiline':False]['text':' Lastly we need to reverse it to get the correct order of arguments.','line_number':2648,'multiline':False]['text':' Create an expression to invoke built-in "pow" function','line_number':2681,'multiline':False]['text':' Local bind to hold the result of the built-in "pow" function','line_number':2683,'multiline':False]['text':' Return the result or check for issues if result is empty (Nothing)','line_number':2687,'multiline':False]['text':' Check if find string is empty, and if so return the the concatenation of the replacement','line_number':2826,'multiline':False]['text':' string and the input string, otherwise replace the first occurrence of the find string.','line_number':2827,'multiline':False]['text':' Order here is important because we want to preserve the precedence of failures in MQL.','line_number':2852,'multiline':False]['text':' In order to maintain MQL semantics, first check both the string expression','line_number':3002,'multiline':False]['text':' (first agument), and delimiter string (second argument) for null, undefined, or','line_number':3003,'multiline':False]['text':' missing, and if either is nullish make the entire expression return null. Only','line_number':3004,'multiline':False]['text':' then make further validity checks against the input. Fail if the delimiter is an','line_number':3005,'multiline':False]['text':' empty string. Return [""] if the string expression is an empty string.','line_number':3006,'multiline':False]['text':' 'chars' is not null','line_number':3145,'multiline':False]['text':'
           Trim Functionality (invariant that 'input' has been provided, otherwise would've failed
           at parse time)

           if ('input' is nullish) {
                -> return null
           }
           else if ('input' is not a string) {
                ->  fail with error code 5156302
           }
           else if ('chars' is provided and nullish) {
                -> return null
           }
           else if ('chars' is provided but is not a string) {
                ->  fail with error code 5156303
           }
           else {
                -> make an ABT function for the correct $trim variant with 'input' and 'chars'
                   parameters
           }
        ','line_number':3165,'multiline':True]['text':'*
     * Shared logic for $round and $trunc expressions
     ','line_number':3446,'multiline':True]['text':' We always need to validate the number parameter, since it will always exist.','line_number':3462,'multiline':False]['text':' Only add these cases if we have a "place" argument.','line_number':3468,'multiline':False]['text':' "place" argument defaults to 0.','line_number':3485,'multiline':False]['text':'*
     * Shared logic for $and, $or. Converts each child into an EExpression that evaluates to Boolean
     * true or false, based on MQL rules for $and and $or branches, and then chains the branches
     * together using binary and/or EExpressions so that the result has MQL's short-circuit
     * semantics.
     ','line_number':3496,'multiline':True]['text':' Empty $and and $or always evaluate to their logical operator's identity value:','line_number':3507,'multiline':False]['text':' true and false, respectively.','line_number':3508,'multiline':False]['text':'*
     * Handle $switch and $cond, which have different syntax but are structurally identical in the
     * AST.
     ','line_number':3525,'multiline':True]['text':' The default case is always the last child in the ExpressionSwitch. If it is unspecified','line_number':3530,'multiline':False]['text':' in the user's query, it is a nullptr. In ExpressionCond, the last child is the "else"','line_number':3531,'multiline':False]['text':' branch, and it is guaranteed not to be nullptr.','line_number':3532,'multiline':False]['text':' Local bind to hold the date expression result','line_number':3564,'multiline':False]['text':' Set parameters for an invocation of the built-in function.','line_number':3570,'multiline':False]['text':' Create expressions to check that each argument to the function exists, is not','line_number':3574,'multiline':False]['text':' null, and is of the correct type.','line_number':3575,'multiline':False]['text':' Return null if any of the parameters is either null or missing.','line_number':3578,'multiline':False]['text':' "timezone" parameter validation.','line_number':3582,'multiline':False]['text':' Create an expression to invoke the built-in function.','line_number':3617,'multiline':False]['text':' "date" parameter validation.','line_number':3624,'multiline':False]['text':'*
     * Creates a CaseValuePair such that an exception is thrown if a value of the parameter denoted
     * by variable 'dateRef' is of a type that is not coercible to a date.
     *
     * dateRef - a variable corresponding to the parameter.
     * errorCode - error code of the type mismatch error.
     * expressionName - a name of an expression the parameter belongs to.
     * parameterName - a name of the parameter corresponding to variable 'dateRef'.
     ','line_number':3641,'multiline':True]['text':'*
     * Creates a CaseValuePair such that Null value is returned if a value of variable denoted by
     * 'variable' is null or missing.
     ','line_number':3673,'multiline':True]['text':'*
     * Creates a boolean expression to check if 'variable' is equal to string 'string'.
     ','line_number':3689,'multiline':True]['text':'*
     * Shared expression building logic for trignometric expressions to make sure the operand
     * is numeric and is not null.
     ','line_number':3710,'multiline':True]['text':'*
     * Shared expression building logic for binary trigonometric expressions to make sure the
     * operands are numeric and are not null.
     ','line_number':3731,'multiline':True]['text':'*
     * Shared expression building logic for trignometric expressions with bounds for the valid
     * values of the argument.
     ','line_number':3770,'multiline':True]['text':'
     * Generates an EExpression that returns an index for $indexOfBytes or $indexOfCP.
     ','line_number':3812,'multiline':True]['text':' Get arguments from stack.','line_number':3828,'multiline':False]['text':' Add string and substring operands.','line_number':3857,'multiline':False]['text':' Add start index operand.','line_number':3860,'multiline':False]['text':' Add end index operand.','line_number':3880,'multiline':False]['text':' Check if string or substring are null or missing before calling indexOfFunction.','line_number':3900,'multiline':False]['text':' Build local binding tree.','line_number':3918,'multiline':False]['text':'*
     * Generic logic for building set expressions: setUnion, setIntersection, etc.
     ','line_number':3936,'multiline':True]['text':' Reverse the args array to preserve the original order of the arguments, since some set','line_number':3975,'multiline':False]['text':' operations, such as $setDifference, are not commutative.','line_number':3976,'multiline':False]['text':'*
     * Shared expression building logic for regex expressions.
     ','line_number':4023,'multiline':True]['text':' Pattern is null, just generate null result.','line_number':4070,'multiline':False]['text':' Create the compiled Regex from constant pattern and options.','line_number':4074,'multiline':False]['text':' 'patternArgument' contains the following expression:','line_number':4080,'multiline':False]['text':'','line_number':4081,'multiline':False]['text':' if isString(pattern) {','line_number':4082,'multiline':False]['text':'     if hasNullBytes(pattern) {','line_number':4083,'multiline':False]['text':'         fail('pattern cannot have null bytes in it')','line_number':4084,'multiline':False]['text':'     } else {','line_number':4085,'multiline':False]['text':'         pattern','line_number':4086,'multiline':False]['text':'     }','line_number':4087,'multiline':False]['text':' } else if isBsonRegex(pattern) {','line_number':4088,'multiline':False]['text':'     getRegexPattern(pattern)','line_number':4089,'multiline':False]['text':' } else {','line_number':4090,'multiline':False]['text':'     fail('pattern must be either string or BSON RegEx')','line_number':4091,'multiline':False]['text':' }','line_number':4092,'multiline':False]['text':' If no options are passed to the expression, try to extract them from the','line_number':4108,'multiline':False]['text':' pattern.','line_number':4109,'multiline':False]['text':' If there are options passed to the expression, we construct local bind with','line_number':4124,'multiline':False]['text':' options argument because it needs to be validated even when pattern is null.','line_number':4125,'multiline':False]['text':' The code below generates the following expression:','line_number':4128,'multiline':False]['text':'','line_number':4129,'multiline':False]['text':' let stringOptions =','line_number':4130,'multiline':False]['text':'     if isString(options) {','line_number':4131,'multiline':False]['text':'         if hasNullBytes(options) {','line_number':4132,'multiline':False]['text':'             fail('options cannot have null bytes in it')','line_number':4133,'multiline':False]['text':'         } else {','line_number':4134,'multiline':False]['text':'             options','line_number':4135,'multiline':False]['text':'         }','line_number':4136,'multiline':False]['text':'     } else if isNull(options) {','line_number':4137,'multiline':False]['text':'         ''','line_number':4138,'multiline':False]['text':'     } else {','line_number':4139,'multiline':False]['text':'         fail('options must be either string or null')','line_number':4140,'multiline':False]['text':'     }','line_number':4141,'multiline':False]['text':' in','line_number':4142,'multiline':False]['text':'     if isBsonRegex(pattern) {','line_number':4143,'multiline':False]['text':'         let bsonOptions = getRegexFlags(pattern)','line_number':4144,'multiline':False]['text':'         in','line_number':4145,'multiline':False]['text':'             if stringOptions == "" {','line_number':4146,'multiline':False]['text':'                 bsonOptions','line_number':4147,'multiline':False]['text':'             } else if bsonOptions == "" {','line_number':4148,'multiline':False]['text':'                 stringOptions','line_number':4149,'multiline':False]['text':'             } else {','line_number':4150,'multiline':False]['text':'                 fail('multiple options specified')','line_number':4151,'multiline':False]['text':'             }','line_number':4152,'multiline':False]['text':'     } else {','line_number':4153,'multiline':False]['text':'         stringOptions','line_number':4154,'multiline':False]['text':'     }','line_number':4155,'multiline':False]['text':'*
     * Generic logic for building $dateAdd and $dateSubtract expressions.
     ','line_number':4226,'multiline':True]['text':' We're guaranteed to not fire this assertion by implementing a mechanism in the upper','line_number':4332,'multiline':False]['text':' layer which directs the query to the classic engine when an unsupported expression','line_number':4333,'multiline':False]['text':' appears.','line_number':4334,'multiline':False]['text':' namespace','line_number':4345,'multiline':False]['text':' namespace mongo::stage_builder','line_number':4361,'multiline':False]