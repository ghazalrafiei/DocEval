['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Utility function to generate an appropriate projection spec builder for a PathKeep or PathDrop
 * node.
 ','line_number':47,'multiline':True]['text':'*
 * Utility function to generate an appropriate projection spec builder for a Path component that can
 * only be represented via a PathLambda.
 ','line_number':62,'multiline':True]['text':' isLambda ','line_number':67,'multiline':True]['text':'*
 * Utility function to generate an appropriate projection spec builder for a PathConstant node.
 ','line_number':70,'multiline':True]['text':' isLambda ','line_number':74,'multiline':True]['text':'*
 * Transport that visits a path bottom-up and tries to construct an appropriate MakeObjSpec builder
 ','line_number':77,'multiline':True]['text':' Returns the input if it is not an object; preserves the input (and its fields!)','line_number':120,'multiline':False]['text':' otherwise.','line_number':121,'multiline':False]['text':' Returns 'Nothing' if input is not an object; preserves the input (and its fields!)','line_number':127,'multiline':False]['text':' otherwise.','line_number':128,'multiline':False]['text':' We should copy fields not present in 'drop.getNames()'.','line_number':134,'multiline':False]['text':' We should eliminate fields not present in 'keep.getNames()'.','line_number':139,'multiline':False]['text':' We don't want to generate a lambda here; instead, we just want the constant expression.','line_number':146,'multiline':False]['text':' Infinite depth traversal is represented as boost::none in MakeObjSpec, but other','line_number':162,'multiline':False]['text':' depths are equivalent. We add consecutive traverse depths together.','line_number':163,'multiline':False]['text':' Note that if we have consecutive traverses and either of them is infinite, we want to','line_number':166,'multiline':False]['text':' set the traversal depth to be unlimited.','line_number':167,'multiline':False]['text':' This case could happen if we have something like Field "a" Traverse [n] Const c; the','line_number':171,'multiline':False]['text':' inner path would result in an orphaned ValueArg, but MakeObjSpec does not do','line_number':172,'multiline':False]['text':' traversals on anything other than MakeObj, so we should fallback to lowering here.','line_number':173,'multiline':False]['text':' PathField semantics say:','line_number':190,'multiline':False]['text':'  1. If input is an object, set the specified field to the result of the inner path','line_number':191,'multiline':False]['text':'  evaluated on its input, and return the object. This means we want to preserve','line_number':192,'multiline':False]['text':'  existing fields ('kOpen').','line_number':193,'multiline':False]['text':'  2. Otherwise, PathField either creates an object, sets the path applied to the input','line_number':194,'multiline':False]['text':'  in that object, and returns the object, or returns nothing if the inner path yields','line_number':195,'multiline':False]['text':'  nothing. We should determine the new path behavior on the child's, unless it is not set,','line_number':196,'multiline':False]['text':'  in which case we should set it to kNewObj by default.','line_number':197,'multiline':False]['text':' This means the child of this path generated an orphaned 'FieldAction',','line_number':201,'multiline':False]['text':' and did not know what its path should be. Assign it to the current field, and set the','line_number':202,'multiline':False]['text':' non-object input behavior to 'kNewObj'.','line_number':203,'multiline':False]['text':' The child generated a completed builder for MakeObjSpec. The path should be set to a','line_number':207,'multiline':False]['text':' sub-object specified by the child.','line_number':208,'multiline':False]['text':' If the inner path has one of the 'Nothing'-preserving behaviors 'kReturnInput' or','line_number':210,'multiline':False]['text':' 'kReturnNothing', we should set the parent behavior to 'kReturnInput'. Otherwise, we','line_number':211,'multiline':False]['text':' want to propagate 'kNewObj' up to the root spec.','line_number':212,'multiline':False]['text':' Note that this sets the 'FieldListScope' to kOpen.','line_number':221,'multiline':False]['text':' First, check for the case where we have the toObj path Obj * Default {}.','line_number':232,'multiline':False]['text':' We can convert this into a blank ProjSpecBuilder with the appropriate behaviors set, i.e.','line_number':233,'multiline':False]['text':' kNewObj (return the input if it is an object, else create a new object).','line_number':234,'multiline':False]['text':' We need to bail out and lower the entire composition to a LambdaArg, hoping that','line_number':247,'multiline':False]['text':' higher up in the path, this lambda can be used in a MakeObjSpec (or eliminated).','line_number':248,'multiline':False]['text':' This step may fail; if so, we will not have altered the input ABT.','line_number':268,'multiline':False]['text':' We may also fallback to lowering if we drop a trivial makeObjSpec (equivalent to a','line_number':271,'multiline':False]['text':' PathId).','line_number':272,'multiline':False]['text':' We were able to construct a MakeObjSpec; we can go ahead with lowering to a makeObj','line_number':276,'multiline':False]['text':' function call. To do this, we need to populate the arguments to the function.','line_number':277,'multiline':False]['text':' The third argument will be the boolean "false".','line_number':281,'multiline':False]['text':' The original input to the EvalPath will be the second argument, corresponding to the','line_number':284,'multiline':False]['text':' "root" document.','line_number':285,'multiline':False]['text':' The generated MakeObjSpec* will be the first argument.','line_number':288,'multiline':False]['text':' namespace','line_number':296,'multiline':False]['text':' namespace mongo::optimizer','line_number':302,'multiline':False]