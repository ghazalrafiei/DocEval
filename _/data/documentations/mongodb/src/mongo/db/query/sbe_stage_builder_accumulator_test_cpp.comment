['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':36,'multiline':False]['text':' IWYU pragma: no_include "format.h"','line_number':50,'multiline':False]['text':' $group may end up being incompatible with SBE after optimize(). We call 'optimize()' to','line_number':105,'multiline':False]['text':' reveal such cases.','line_number':106,'multiline':False]['text':' Constructs a QuerySolution consisting of a GroupNode on top of a VirtualScanNode.','line_number':150,'multiline':False]['text':'hasRecordId','line_number':152,'multiline':True]['text':'doingMerge','line_number':157,'multiline':True]['text':'shouldProduceBson','line_number':158,'multiline':True]['text':' Makes a QuerySolution from the root group node.','line_number':160,'multiline':False]['text':' Makes a QuerySolution for GroupNode over VirtualScanNode.','line_number':168,'multiline':False]['text':' Translates the QuerySolution tree to a sbe::PlanStage tree.','line_number':172,'multiline':False]['text':'hasRecordId','line_number':174,'multiline':True]['text':'*
     * $addToSet doesn't guarantee any particular order of the accumulated values. To make the
     * result checking deterministic, we convert the array of the expected values and the actual
     * values into arraySets and compare the sets.
     *
     * Note: Currently, the order agnostic comparison only works for arraySets with
     * non-pointer-based accumulated values.
     ','line_number':214,'multiline':True]['text':' Create ArraySet Value from the expectedResult.','line_number':228,'multiline':False]['text':' Run the accumulator.','line_number':235,'multiline':False]['text':' Extract the accumulated ArraySet from the result and compare it to the expected.','line_number':241,'multiline':False]['text':' When we parse and optimize the 'groupSpec' to build a DocumentSourceGroup, those','line_number':279,'multiline':False]['text':' accumulation expressions or '_id' expression that are not supported by SBE will flip the','line_number':280,'multiline':False]['text':' 'sbeCompatible()' flag in the 'groupStage' to false.','line_number':281,'multiline':False]['text':' When we parse and optimize the groupSpec to build the DocumentSourceGroup, those','line_number':294,'multiline':False]['text':' AccumulationExpressions or _id expression that are not supported by SBE will flip the','line_number':295,'multiline':False]['text':' sbeGroupCompatible flag in the expCtx to false.','line_number':296,'multiline':False]['text':'inputDocs','line_number':298,'multiline':True]['text':' We try to figure out the expected sbeGroupCompatible value here. The','line_number':300,'multiline':False]['text':' sbeGroupCompatible flag should be false if any accumulator being tested does not have','line_number':301,'multiline':False]['text':' a registered SBE accumulator builder function.','line_number':302,'multiline':False]['text':' Tries to translate the QuerySolution tree to a sbe::PlanStage tree.','line_number':305,'multiline':False]['text':'hasRecordId','line_number':307,'multiline':True]['text':' The accumulator or the _id expression is unsupported in SBE, so we expect that','line_number':310,'multiline':False]['text':' the sbeCompatible flag should be false.','line_number':311,'multiline':False]['text':' Document id with a special field name such as "_id".','line_number':420,'multiline':False]['text':' 'Nothing' is converted to 'Null' when there's only one field and both {_id: Nothing} / {_id:','line_number':421,'multiline':False]['text':' null} becomes {_id: null}.','line_number':422,'multiline':False]['text':' Duplicated field expressions.','line_number':435,'multiline':False]['text':' When there are multiple fields, 'Nothing' is not converted to 'Null' and {_id: Nothing, b:','line_number':436,'multiline':False]['text':' Nothing} becomes {}.','line_number':437,'multiline':False]['text':' A missing field for a group-by key must generate an _id document without such field when','line_number':445,'multiline':False]['text':' there are multiple fields. {a: Nothing, c: Nothing} becomes {}.','line_number':446,'multiline':False]['text':' A missing field for a group-by key must generate an _id document without such field when','line_number':454,'multiline':False]['text':' there are multiple fields. {a: Nothing, b: 1} becomes {b: 1}.','line_number':455,'multiline':False]['text':' 'Nothing' is converted to 'Null' when there's only one field and both {dc: Nothing} becomes','line_number':477,'multiline':False]['text':' {_id: null}.','line_number':478,'multiline':False]['text':' An accumulator skipping the final step after multiple $avg.','line_number':509,'multiline':False]['text':' _id: null is returned if the group-by field is missing.','line_number':519,'multiline':False]['text':' One _id: null document is returned when there exist null and a value is missing for the _id','line_number':527,'multiline':False]['text':' field path.','line_number':528,'multiline':False]['text':' The collator doesn't affect comparison of numbers but until SERVER-61868 just providing a','line_number':642,'multiline':False]['text':' collator used to trigger a different codepath, so let's throw it in for a good measure.','line_number':643,'multiline':False]['text':' The collator doesn't affect comparison of numbers but until SERVER-61868 just providing a','line_number':739,'multiline':False]['text':' collator used to trigger a different codepath, so let's throw it in for a good measure.','line_number':740,'multiline':False]['text':' We need -10LL to cast MIN_INT to a long long. This simulates upconversion when int overflows.','line_number':1010,'multiline':False]['text':' NaN is a numeric value, so the average of NaN is NaN and not null.','line_number':1164,'multiline':False]['text':' Notice, that $sum in the following two cases returns zero, but $avg is undefined and should','line_number':1185,'multiline':False]['text':' return null.','line_number':1186,'multiline':False]['text':'3 + Nothing','line_number':1350,'multiline':True]['text':' TODO (SERVER-51541): Uncomment the following two test cases when $object supported is','line_number':2087,'multiline':False]['text':' added to SBE.','line_number':2088,'multiline':False]['text':' R"(_id: null, agg: {$_internalJsReduce: {data: {k: "$word", v: "$val"}, eval: "null"}})",','line_number':2089,'multiline':False]['text':'','line_number':2090,'multiline':False]['text':' R"(_id: null, agg: {$accumulator: {init: "a", accumulate: "b", accumulateArgs:','line_number':2091,'multiline':False]['text':' ["$copies"], merge: "c", lang: "js"}})",','line_number':2092,'multiline':False]['text':' All supported case.','line_number':2103,'multiline':False]['text':' Mix of supported/unsupported accumulators.','line_number':2105,'multiline':False]['text':' No accumulator case','line_number':2108,'multiline':False]['text':'*
 * A test fixture designed to test that the expressions generated to combine partial aggregates
 * that have been spilled to disk work correctly. We use 'EExpressionTestFixture' rather than
 * something like 'SbeStageBuilderTestFixture' so that the expressions can be tested in isolation,
 * without actually requiring a hash agg stage or without actually spilling any data to disk.
 ','line_number':2140,'multiline':True]['text':'*
     * Convenience method for producing bytecode which combines partial aggregates for the given
     * 'AccumulationStatement'.
     *
     * Requires that accumulation statement results in a single aggregate with one input and one
     * output. Furthermore, cannot be used when the test case involves a non-simple collation.
     ','line_number':2164,'multiline':True]['text':'*
     * Verifies that executing the bytecode ('code') for combining partial aggregates for $group
     * spilling produces the 'expected' outputs given 'inputs'.
     *
     * The inputs and expected outputs are expressed as BSON arrays as a convenience to the caller,
     * and should have the same length. The bytecode is executed over each element of 'inputs'
     * one-by-one, with the result stored into a slot holding the aggregate value. At each step,
     * this function asserts that the current aggregate value is equal to the matching element in
     * 'expected'.
     *
     * The string "MISSING" can be used as a sentinel in either 'inputs' or 'outputs' in order to
     * represent the Nothing value (since nothingness cannot literally be stored in a BSON array).
     ','line_number':2181,'multiline':True]['text':'*
     * Verifies that executing the bytecode ('code') for combining partial aggregates for $group
     * spilling produces the 'expectedVal' outputs given 'inputsVal'. Assumes ownership of both
     * 'expectedVal' and 'inputsVal'.
     *
     * Identical to the overload above, except the inputs and expected outputs are provided as SBE
     * arrays rather than BSON arrays. This is useful if the caller needs to construct input and
     * output ways in a special way that cannot be achieved by trivial conversion from BSON.
     ','line_number':2202,'multiline':True]['text':' Make sure we are starting from a clean state.','line_number':2216,'multiline':False]['text':' Aggregate the inputs one-by-one, and at each step validate that the resulting accumulator','line_number':2226,'multiline':False]['text':' state is as expected.','line_number':2227,'multiline':False]['text':' Feed in the input value, treating "MISSING" as a special sentinel to indicate the','line_number':2233,'multiline':False]['text':' Nothing value.','line_number':2234,'multiline':False]['text':' Validate that the output value equals the expected value, and then put the output','line_number':2245,'multiline':False]['text':' value into the slot that holds the accumulation state.','line_number':2246,'multiline':False]['text':' The test failed, but dump the actual and expected values to the logs for ease of','line_number':2256,'multiline':False]['text':' debugging.','line_number':2257,'multiline':False]['text':'*
     * A helper for converting a sequence of accumulator states for $push or $addToSet into the
     * corresponding SBE value.
     ','line_number':2282,'multiline':True]['text':' Each partial aggregate is a two-element array whose first element is the partial','line_number':2309,'multiline':False]['text':' $push result (itself an array) and whose second element is the size.','line_number':2310,'multiline':False]['text':'*
     * Given the name of an SBE agg function ('aggFuncName') and an array of values expressed as a
     * BSON array, aggregates the values inside the array and returns the resulting SBE value.
     ','line_number':2340,'multiline':True]['text':' Make sure we are starting from a clean state.','line_number':2346,'multiline':False]['text':' Construct an expression which calls the given agg function, aggregating the values in','line_number':2350,'multiline':False]['text':' '_inputSlotId'.','line_number':2351,'multiline':False]['text':' Find the first element by skipping the length.','line_number':2356,'multiline':False]['text':' Convert the BSON value to an SBE value and put it inside the input slot.','line_number':2362,'multiline':False]['text':' Run the agg function, and put the result in the slot holding the aggregate value.','line_number':2366,'multiline':False]['text':'*
     * Returns an SBE array which contains a sequence of partial aggregate values. Useful for
     * constructing a sequence of partial aggregates when those partial aggregates are not trivial
     * to describe using BSON. The input to this function is a BSON array of BSON arrays; each of
     * the inner arrays is aggregated using the given 'aggFuncName' in order to produce the output
     * SBE array.
     *
     * As an example, suppose the agg function is a simple sum. Given the input
     *
     *   [[8, 1, 5], [6], [2,3]]
     *
     * the output will be the SBE array [14, 6, 5].
     ','line_number':2376,'multiline':True]['text':' Accessor and corresponding slot id that holds the input to the agg expression. Each time we','line_number':2522,'multiline':False]['text':' "turn the crank" this will hold the next partial aggregate to be aggregated into','line_number':2523,'multiline':False]['text':' '_aggAccessor'.','line_number':2524,'multiline':False]['text':' The accessor which holds the final output resulting from combining all partial outputs. We','line_number':2528,'multiline':False]['text':' check that the intermediate value is as expected after every turn of the crank.','line_number':2529,'multiline':False]['text':' Test that Nothing values are treated as expected.','line_number':2548,'multiline':False]['text':' The strings in reverse have the opposite ordering as compared to forwards.','line_number':2569,'multiline':False]['text':' Test that Nothing values are treated as expected.','line_number':2587,'multiline':False]['text':' The strings in reverse have the opposite ordering as compared to forwards.','line_number':2608,'multiline':False]['text':' When the first value is missing, the resulting value is a literal null.','line_number':2626,'multiline':False]['text':' If we inject a very large size, we expect the accumulator to throw. This cap prevents the','line_number':2662,'multiline':False]['text':' accumulator from consuming too much memory.','line_number':2663,'multiline':False]['text':' Each SBE value is 8 bytes and its tag is 1 byte. So we expect each unique element's size to','line_number':2689,'multiline':False]['text':' be calculated as 9 bytes. The sizes from the partial aggregates end up getting ignored, and','line_number':2690,'multiline':False]['text':' the total size is recalculated, since we cannot predict the size of the set union in advance.','line_number':2691,'multiline':False]['text':' These strings end up as big strings copied out of the BSON array, so the size accounts for','line_number':2726,'multiline':False]['text':' the value itself, the type tag, the 4-byte size of the string, and the string itself.','line_number':2727,'multiline':False]['text':' $sum:1 is a simple count of the incoming documents, and therefore does not require the','line_number':2783,'multiline':False]['text':' DoubleDouble summation algorithm. In order to combine partial counts, we use a simple','line_number':2784,'multiline':False]['text':' summation.','line_number':2785,'multiline':False]['text':' A field path expression is needed so that the merging expression is constructed to combine','line_number':2798,'multiline':False]['text':' DoubleDouble summations rather than doing a simple sum. The actual field name "foo" is','line_number':2799,'multiline':False]['text':' irrelevant because the values are fed into the merging expression by the test fixture.','line_number':2800,'multiline':False]['text':' A field path expression is needed so that the merging expression is constructed to combine','line_number':2821,'multiline':False]['text':' DoubleDouble summations rather than doing a simple sum. The actual field name "foo" is','line_number':2822,'multiline':False]['text':' irrelevant because the values are fed into the merging expression by the test fixture.','line_number':2823,'multiline':False]['text':' A field path expression is needed so that the merging expression is constructed to combine','line_number':2843,'multiline':False]['text':' DoubleDouble summations rather than doing a simple sum. The actual field name "foo" is','line_number':2844,'multiline':False]['text':' irrelevant because the values are fed into the merging expression by the test fixture.','line_number':2845,'multiline':False]['text':' Large 64-bit ints can't be represented precisely as doubles. This test demonstrates that when','line_number':2854,'multiline':False]['text':' summing such large longs, the sum is returned as a long and no precision is lost.','line_number':2855,'multiline':False]['text':' A field path expression is needed so that the merging expression is constructed to combine','line_number':2865,'multiline':False]['text':' DoubleDouble summations rather than doing a simple sum. The actual field name "foo" is','line_number':2866,'multiline':False]['text':' irrelevant because the values are fed into the merging expression by the test fixture.','line_number':2867,'multiline':False]['text':' Feed the result back into the input accessor. We finalize the resulting aggregate in order','line_number':2874,'multiline':False]['text':' to make sure that the resulting sum is mathematically correct.','line_number':2875,'multiline':False]['text':' We expect $avg to result in two separate agg expressions: one for computing the sum and the','line_number':2889,'multiline':False]['text':' other for computing the count. Both agg expressions read from the same input slot.','line_number':2890,'multiline':False]['text':' Compile the first expression and make sure it can combine DoubleDouble summations as','line_number':2895,'multiline':False]['text':' expected.','line_number':2896,'multiline':False]['text':' Now compile the second expression and make sure it computes a simple sum.','line_number':2911,'multiline':False]['text':' Feed the result back into the input accessor.','line_number':2934,'multiline':False]['text':' Feed the result back into the input accessor.','line_number':2960,'multiline':False]['text':' namespace mongo','line_number':3102,'multiline':False]