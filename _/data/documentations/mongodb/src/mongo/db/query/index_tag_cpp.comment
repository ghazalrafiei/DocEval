['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':35,'multiline':False]['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':38,'multiline':False]['text':' Compares 'lhs' for 'rhs', using the tag-based ordering expected by the access planner. Returns a','line_number':54,'multiline':False]['text':' negative number if 'lhs' is smaller than 'rhs', 0 if they are equal, and 1 if 'lhs' is larger.','line_number':55,'multiline':False]['text':' First, order on indices.','line_number':65,'multiline':False]['text':' This relies on kNoIndex being larger than every other possible index.','line_number':67,'multiline':False]['text':' Next, order geo and text predicates which MUST use an index before all others. We're not sure','line_number':71,'multiline':False]['text':' if this is strictly necessary for correctness, but putting these all together and first may','line_number':72,'multiline':False]['text':' help determine earlier if there is an index that must be used.','line_number':73,'multiline':False]['text':' Next, order so that if there's a GEO_NEAR it's first.','line_number':75,'multiline':False]['text':' Ditto text.','line_number':82,'multiline':False]['text':' Next, order so that the first field of a compound index appears first.','line_number':90,'multiline':False]['text':' Next, order on fields.','line_number':95,'multiline':False]['text':' Next, order on expression type.','line_number':101,'multiline':False]['text':' The 'lhs' and 'rhs' are equal. Break ties by comparing child nodes.','line_number':106,'multiline':False]['text':' If all else is equal, sort whichever node has fewer children first.','line_number':115,'multiline':False]['text':' Sorts the tree using its IndexTag(s). Nodes that use the same index will sort so that they are','line_number':123,'multiline':False]['text':' adjacent to one another.','line_number':124,'multiline':False]['text':'*
 * Attaches 'node' to 'target'. If 'target' is an AND, adds 'node' as a child of 'target'.
 * Otherwise, creates an AND that is a child of 'targetParent' at position 'targetPosition', and
 * adds 'target' and 'node' as its children. Tags 'node' with 'tagData'. If 'node' appears as a key
 * in 'pathsToUpdate', then we set the new path onto the clone.
 ','line_number':136,'multiline':True]['text':' Partitions destinations according to the first element of the destination's route. Trims the','line_number':178,'multiline':False]['text':' first element off of each destination's route.','line_number':179,'multiline':False]['text':'*
 * Finds the node within 'tree' that is an indexed OR, if one exists. It also returns the subpath in
 * which the indexed OR lives.
 ','line_number':192,'multiline':True]['text':' Pushes down 'node' along the routes in 'target' specified in 'destinations'. Each value in the','line_number':212,'multiline':False]['text':' route is the index of a child in an indexed OR. Returns true if 'node' is moved to every indexed','line_number':213,'multiline':False]['text':' descendant of 'target'.','line_number':214,'multiline':False]['text':' This child was not specified by any route in 'destinations'.','line_number':227,'multiline':False]['text':' There should only be one destination if we have reached the end of a route.','line_number':233,'multiline':False]['text':' Otherwise, we started with duplicate routes.','line_number':234,'multiline':False]['text':' We have reached the position at which to attach 'node'.','line_number':237,'multiline':False]['text':' This child was specified by a non-trivial route in destinations, so we recur.','line_number':246,'multiline':False]['text':'fieldRef','line_number':259,'multiline':True]['text':'*
 * Populates 'out' with all descendants of 'node' that have OrPushdownTags, assuming the initial
 * input is an ELEM_MATCH_OBJECT. The "currentPath" argument is the combined path traversed so far.
 * Additionally, we populate a map to keep track of paths to update afterward during cloning.
 ','line_number':267,'multiline':True]['text':' Do not do extra pushdown of OR inside $elemmatch.','line_number':283,'multiline':False]['text':' Make sure that we remove the common prefix between the "destination" OR and the','line_number':286,'multiline':False]['text':' current expression, as it may be contained within the same $elemmatch.','line_number':287,'multiline':False]['text':' The immediate child of NOT may be tagged, but there should be no tags deeper than this.','line_number':305,'multiline':False]['text':' Make sure that we remove the common prefix between the "destination" OR and the','line_number':309,'multiline':False]['text':' current expression, as it may be contained within the same $elemmatch.','line_number':310,'multiline':False]['text':'*
 * Attempts to push the given node down into the 'indexedOr' subtree. Returns true if the predicate
 * can subsequently be trimmed from the MatchExpression tree, false otherwise. Also supplied is a
 * map to optionally update the path of the 'node' being pushed down.
 ','line_number':326,'multiline':True]['text':' If the node is a negation, then its child is the predicate node that may be tagged.','line_number':334,'multiline':False]['text':' If the predicate node is not tagged for pushdown, return false immediately.','line_number':337,'multiline':False]['text':' Predicate node is tagged for pushdown. Extract its route through the $or and its index tag.','line_number':343,'multiline':False]['text':' Attempt to push the node into the indexedOr, then re-set its tag to the indexTag.','line_number':349,'multiline':False]['text':' Return true if we can trim the predicate. We could trim the node even if it had an index tag','line_number':353,'multiline':False]['text':' for this position, but that could make the index tagging of the tree wrong.','line_number':354,'multiline':False]['text':' Finds all the nodes in the tree with OrPushdownTags and copies them to the Destinations specified','line_number':358,'multiline':False]['text':' in the OrPushdownTag, tagging them with the TagData in the Destination. Removes the node from its','line_number':359,'multiline':False]['text':' current location if possible.','line_number':360,'multiline':False]['text':'fieldRef','line_number':367,'multiline':True]['text':' For ELEM_MATCH_OBJECT, we push down all tagged descendants. However, we cannot','line_number':373,'multiline':False]['text':' trim any of these predicates, since the $elemMatch filter must be applied in its','line_number':374,'multiline':False]['text':' entirety.','line_number':375,'multiline':False]['text':'currentPath','line_number':380,'multiline':True]['text':'pathsToUpdate','line_number':388,'multiline':True]['text':' The indexed $or can completely satisfy the child predicate, so we trim it.','line_number':389,'multiline':False]['text':' namespace','line_number':401,'multiline':False]['text':' namespace mongo','line_number':410,'multiline':False]