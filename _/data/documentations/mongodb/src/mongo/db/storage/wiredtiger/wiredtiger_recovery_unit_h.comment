['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * It's expected a consumer would want to call the constructor that simply takes a
     * `WiredTigerSessionCache`. That constructor accesses the `WiredTigerKVEngine` to find the
     * `WiredTigerOplogManager`. However, unit tests construct `WiredTigerRecoveryUnits` with a
     * `WiredTigerSessionCache` that do not have a valid `WiredTigerKVEngine`. This constructor is
     * expected to only be useful in those cases.
     ','line_number':73,'multiline':True]['text':' Do not allow a session to use readOnce and regular cursors at the same time.','line_number':149,'multiline':False]['text':' ---- WT STUFF','line_number':166,'multiline':False]['text':'*
     * Returns a session without starting a new WT txn on the session. Will not close any already
     * running session.
     ','line_number':170,'multiline':True]['text':'*
     * This function must be called when a write operation is performed on the active transaction
     * for the first time.
     *
     * Must be reset when the active transaction is either committed or rolled back.
     ','line_number':183,'multiline':True]['text':'*
     * Starts a transaction at the current all_durable timestamp.
     * Returns the timestamp the transaction was started at.
     ','line_number':217,'multiline':True]['text':'*
     * Starts a transaction at the no-overlap timestamp. Returns the timestamp the transaction
     * was started at.
     ','line_number':223,'multiline':True]['text':'*
     * Starts a transaction at the lastApplied timestamp stored in '_readAtTimestamp'. Sets
     * '_readAtTimestamp' to the actual timestamp used by the storage engine in case rounding
     * occured.
     ','line_number':229,'multiline':True]['text':'*
     * Returns the timestamp at which the current transaction is reading.
     ','line_number':236,'multiline':True]['text':'*
     * Keeps track of constraint violations on multi timestamp transactions. If a transaction sets
     * multiple timestamps, the first timestamp must be set prior to any writes. Vice-versa, if a
     * transaction writes a document before setting a timestamp, it must not set multiple
     * timestamps.
     ','line_number':241,'multiline':True]['text':' not owned','line_number':249,'multiline':False]['text':' not owned','line_number':250,'multiline':False]['text':' Helpers used to keep track of multi timestamp constraint violations on the transaction.','line_number':254,'multiline':False]['text':' Specifies which external source to use when setting read timestamps on transactions.','line_number':262,'multiline':False]['text':' Commits are assumed ordered.  Unordered commits are assumed to always need to reserve a','line_number':265,'multiline':False]['text':' new optime, and thus always call oplogDiskLocRegister() on the record store.','line_number':266,'multiline':False]['text':' When 'true', data read from disk should not be kept in the storage engine cache.','line_number':269,'multiline':False]['text':' The behavior of handling prepare conflicts.','line_number':274,'multiline':False]['text':' Dictates whether to round up prepare and commit timestamp of a prepared transaction.','line_number':276,'multiline':False]['text':' The guaranteed 'no holes' point in the oplog. Forward cursor oplog reads can only read up to','line_number':286,'multiline':False]['text':' this timestamp if they want to avoid missing any entries in the oplog that may not yet have','line_number':287,'multiline':False]['text':' committed ('holes'). @see WiredTigerOplogManager::getOplogReadTimestamp','line_number':288,'multiline':False]['text':' namespace mongo','line_number':298,'multiline':False]