['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Represents a single item in an index. An index item simply consists of a key
 * and a disk location.
 ','line_number':61,'multiline':True]['text':'*
     * Given an index key 'dehyratedKey' with no field names, returns a new BSONObj representing the
     * index key after adding field names according to 'keyPattern'.
     ','line_number':66,'multiline':True]['text':'*
 * Represents KeyString struct containing a key_string::Value and its RecordId
 ','line_number':106,'multiline':True]['text':'*
 * Describes a query that can be compared against an IndexKeyEntry in a way that allows
 * expressing exclusiveness on a prefix of the key. This is mostly used to express a location to
 * seek to in an index that may not be representable as a valid key.
 *
 * If 'firstExclusive' is negative, the "key" used for comparison is the concatenation of the first
 * 'prefixLen' elements of 'keyPrefix' followed by the last 'keySuffix.size() - prefixLen' elements
 * of 'keySuffix'.
 *
 * The comparison is exclusive if 'firstExclusive' is non-negative, and any portion of the key after
 * that index will be omitted. The value of 'firstExclusive' must be at least 'prefixLen' - 1.
 *
 * e.g.
 *
 *  Suppose that
 *
 *      keyPrefix = { "" : 1, "" : 2 }
 *      prefixLen = 1
 *      keySuffix = [ IGNORED, { "" : 5 }, { "" : 9 } ]
 *      firstExclusive = 1
 *
 *      ==> key is { "" : 1, "" : 5 }
 *          with the comparison being done exclusively
 *
 *  Suppose that
 *
 *      keyPrefix = { "" : 1, "" : 2 }
 *      prefixLen = 1
 *      keySuffix = IGNORED
 *      firstExclusive = 0
 *
 *      ==> represented key is { "" : 1 }
 *          with the comparison being done exclusively
 *
 *  Suppose that
 *
 *      keyPrefix = { "" : 1, "" : 2 }
 *      prefixLen = 1
 *      keySuffix = [ IGNORED, { "" : 5 }, { "" : 9 } ]
 *      firstExclusive = -1
 *
 *      ==> key is { "" : 1, "" : 5, "" : 9 }
 *          with the comparison being done inclusively
 ','line_number':128,'multiline':True]['text':'*
     * Use this many fields in 'keyPrefix'.
     ','line_number':175,'multiline':True]['text':'*
     * Elements starting at index 'prefixLen' are logically appended to the prefix.
     * The elements before index 'prefixLen' should be ignored.
     ','line_number':180,'multiline':True]['text':'*
     * If non-negative, then the comparison will be exclusive and any elements after index
     * 'firstExclusive' are ignored. Otherwise all elements are considered and the comparison will
     * be inclusive.
     ','line_number':186,'multiline':True]['text':'*
 * Compares two different IndexKeyEntry instances. The existence of compound indexes necessitates
 * some complicated logic. This is meant to support the comparisons of IndexKeyEntries (that are
 * stored in an index) with IndexSeekPoints to support fine-grained control over whether the ranges
 * of various keys comprising a compound index are inclusive or exclusive.
 ','line_number':194,'multiline':True]['text':'*
     * Compares two IndexKeyEntries and returns -1 if lhs < rhs, 1 if lhs > rhs, and 0
     * otherwise.
     *
     * IndexKeyEntries are compared lexicographically field by field in the BSONObj, followed by
     * the RecordId.
     ','line_number':206,'multiline':True]['text':'*
     * Encodes the SeekPoint into a KeyString object suitable to pass in to seek().
     *
     * A KeyString is used for seeking an iterator to a position in a sorted index. The difference
     * between a query KeyString and the KeyStrings inserted into indexes is that a query KeyString
     * can have an exclusive discriminator, which forces the key to compare less than or greater to
     * a matching key in the index. This means that the first matching key is not returned, but
     * rather the one immediately after. The meaning of "after" depends on the cursor directory,
     * isForward.
     *
     * If a field is marked as exclusive, then comparisons stop after that field and return
     * either higher or lower, even if that field compares equal. If firstExclusive is non-negative,
     * then the field at the corresponding index is marked as exclusive and any subsequent fields
     * are ignored.
     *
     * Returned objects are for use in lookups only and should never be inserted into the
     * database, as their format may change. The only reason this is the same type as the
     * entries in an index is to support storage engines that require comparators that take
     * arguments of the same type.
     ','line_number':215,'multiline':True]['text':'*
     * Encodes the BSON Key into a KeyString object to pass in to SortedDataInterface::seek().
     *
     * `isForward` and `inclusive` together decide which discriminator we will put into the
     * KeyString. This logic is closely related to how WiredTiger uses its API
     * (search_near/prev/next) to do the seek. Other storage engines' SortedDataInterface should use
     * the discriminator to deduce the `inclusive` and the use their own ways to seek to the right
     * position.
     *
     * 1. When isForward == true, inclusive == true, bsonKey will be encoded with kExclusiveBefore
     * (which is less than bsonKey). WT's search_near() could land either on the previous key or
     * bsonKey. WT will selectively call next() if it's on the previous key.
     *
     * 2. When isForward == true, inclusive == false, bsonKey will be encoded with kExclusiveAfter
     * (which is greater than bsonKey). WT's search_near() could land either on bsonKey or the next
     * key. WT will selectively call next() if it's on bsonKey.
     *
     * 3. When isForward == false, inclusive == true, bsonKey will be encoded with kExclusiveAfter
     * (which is greater than bsonKey). WT's search_near() could land either on bsonKey or the next
     * key. WT will selectively call prev() if it's on the next key.
     *
     * 4. When isForward == false, inclusive == false, bsonKey will be encoded with kExclusiveBefore
     * (which is less than bsonKey). WT's search_near() could land either on the previous key or the
     * bsonKey. WT will selectively call prev() if it's on bsonKey.
     ','line_number':240,'multiline':True]['text':'*
     * Encodes the BSON Key into a KeyString object to pass in to SortedDataInterface::seek()
     * or SortedDataInterface::setEndPosition().
     *
     * This funcition is similar to IndexEntryComparison::makeKeyStringFromBSONKeyForSeek()
     * but allows you to pick your own key_string::Discriminator based on wether or not the
     * resulting KeyString is for the start key or end key of a seek.
     ','line_number':271,'multiline':True]['text':' Ordering is used in comparison() to compare BSONElements','line_number':285,'multiline':False]['text':' struct IndexEntryComparison','line_number':288,'multiline':False]['text':'*
 * Returns the formatted error status about the duplicate key.
 ','line_number':290,'multiline':True]['text':' namespace mongo','line_number':317,'multiline':False]