['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':33,'multiline':False]['text':' Arbitrary. Using the storageGlobalParams.journalCommitIntervalMs default, which used to','line_number':66,'multiline':False]['text':' dynamically control the visibility thread's delay back when the visibility thread also flushed','line_number':67,'multiline':False]['text':' the journal.','line_number':68,'multiline':False]['text':' Prime the oplog read timestamp.','line_number':74,'multiline':False]['text':' false = reverse cursor ','line_number':76,'multiline':True]['text':' Although the oplog may have holes, using the top of the oplog should be safe. In the','line_number':79,'multiline':False]['text':' event of a secondary crashing, replication recovery will truncate the oplog, resetting','line_number':80,'multiline':False]['text':' visibility to the truncate point. In the event of a primary crashing, it will perform','line_number':81,'multiline':False]['text':' rollback before servicing oplog reads.','line_number':82,'multiline':False]['text':' Avoid setting oplog visibility to 0. That means "everything is visible".','line_number':90,'multiline':False]['text':' Use max Timestamp to disable oplog visibility in standalone mode. The read timestamp may','line_number':93,'multiline':False]['text':' be interpreted as signed so we need to use signed int64_t max to make sure it is always','line_number':94,'multiline':False]['text':' larger than any user 'ts' field.','line_number':95,'multiline':False]['text':' Need to obtain the mutex before starting the thread, as otherwise it may race ahead','line_number':99,'multiline':False]['text':' see _shuttingDown as true and quit prematurely.','line_number':100,'multiline':False]['text':' This is called from two places; on clean shutdown and when the record store for the','line_number':112,'multiline':False]['text':' oplog is destroyed. We will perform the actual shutdown on the first call and the','line_number':113,'multiline':False]['text':' second call will be a no-op. Calling this on clean shutdown is necessary because the','line_number':114,'multiline':False]['text':' oplog manager makes calls into WiredTiger to retrieve the all durable timestamp. Lock','line_number':115,'multiline':False]['text':' Free Reads introduced shared collections which can offset when their respective','line_number':116,'multiline':False]['text':' destructors run. This created a scenario where the oplog manager visibility loop can','line_number':117,'multiline':False]['text':' be executed after the storage engine has shutdown.','line_number':118,'multiline':False]['text':' In between when we checked '_isRunning' above and when we acquired the mutex, it's','line_number':126,'multiline':False]['text':' possible another thread modified '_isRunning', so check it again.','line_number':127,'multiline':False]['text':' In order to reliably detect rollback situations, we need to fetch the latestVisibleTimestamp','line_number':154,'multiline':False]['text':' prior to querying the end of the oplog.','line_number':155,'multiline':False]['text':' Use a reverse oplog cursor that is not subject to the oplog visibility rules to see the','line_number':158,'multiline':False]['text':' latest oplog entry timestamp. Then we will wait for that timestamp to become visible.','line_number':159,'multiline':False]['text':'','line_number':160,'multiline':False]['text':' select a reverse cursor ','line_number':162,'multiline':True]['text':' Close transaction before we wait.','line_number':171,'multiline':False]['text':' Prevent any scheduled oplog visibility updates from being delayed for batching and blocking','line_number':176,'multiline':False]['text':' this wait excessively.','line_number':177,'multiline':False]['text':' Out of order writes to the oplog always call triggerOplogVisibilityUpdate() on commit to','line_number':182,'multiline':False]['text':' prompt the OplogVisibilityThread to run and update the oplog visibility. We simply need to','line_number':183,'multiline':False]['text':' wait until all of the writes behind and including 'waitingFor' commit so there are no oplog','line_number':184,'multiline':False]['text':' holes.','line_number':185,'multiline':False]['text':' We cannot wait for a write that no longer exists, so we are finished.','line_number':197,'multiline':False]['text':' TODO(SERVER-74657): Please revisit if this thread could be made killable.','line_number':219,'multiline':False]['text':' This thread updates the oplog read timestamp, the timestamp used to read from the oplog with','line_number':225,'multiline':False]['text':' forward cursors. The timestamp is used to hide oplog entries that might be committed but have','line_number':226,'multiline':False]['text':' uncommitted entries behind them. This prevents cursors from seeing 'holes' in the oplog and','line_number':227,'multiline':False]['text':' consequently missing data that was not there yet when scanning went passed up to a later','line_number':228,'multiline':False]['text':' timestamp.','line_number':229,'multiline':False]['text':' If we are not shutting down and nobody is actively waiting for the oplog to become','line_number':237,'multiline':False]['text':' visible, delay a bit to batch more requests into one update and reduce system load.','line_number':238,'multiline':False]['text':' Check once a millisecond, up to the delay deadline, whether the delay should be','line_number':247,'multiline':False]['text':' preempted because of waiting callers or shutdown.','line_number':248,'multiline':False]['text':' Fetch the all_durable timestamp from the storage engine, which is guaranteed not to have','line_number':270,'multiline':False]['text':' any holes behind it in-memory.','line_number':271,'multiline':False]['text':' The newTimestamp may actually go backward during secondary batch application,','line_number':274,'multiline':False]['text':' where we commit data file changes separately from oplog changes, so ignore','line_number':275,'multiline':False]['text':' a non-incrementing timestamp.','line_number':276,'multiline':False]['text':' Publish the new timestamp value. Avoid going backward.','line_number':285,'multiline':False]['text':' Wake up any awaitData cursors and tell them more data might be visible now.','line_number':292,'multiline':False]['text':'','line_number':293,'multiline':False]['text':' We normally notify waiters on capped collection inserts/updates, but oplog entries will','line_number':294,'multiline':False]['text':' not become visible immediately upon insert, so we notify waiters here as well, when new','line_number':295,'multiline':False]['text':' oplog entries actually become visible to cursors.','line_number':296,'multiline':False]['text':' namespace mongo','line_number':319,'multiline':False]