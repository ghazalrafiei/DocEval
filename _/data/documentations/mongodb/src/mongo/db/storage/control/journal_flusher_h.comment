['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A periodic and signalable thread that flushes data to disk. Constructor parameter will dictate
 * whether to periodically flush or only on signal.
 *
 * This thread is helpful for two reasons:
 *  - Periodically flushing data to disk may protect users doing writes with {j: false} from losing
 *    a great deal of their data across a server crash.
 *  - Asynchronously grouping data flush requests reduces the total number of flushes executed,
 *    reducing i/o load on the system and improving write performance. This thread groups both the
 *    periodic flushes and immediate flush requests from the rest of the system.
 *
 * And incidentally helpful for another reason:
 *  - waitUntilDurable() calls update the replication JournalListener, so more frequent calls may be
 *    helpful to unblock replication related operations more quickly.
 ','line_number':49,'multiline':True]['text':'*
     * Setting 'disablePeriodicFlushes' to true will cause the JournalFlusher thread to only execute
     * a data flush upon explicit request: flushes will no longer be executed periodically in
     * addition. This is useful for storage engines that do not want frequent durability updates,
     * like engines without a journal where the cost of durability is high (using checkpoints
     * instead).
     ','line_number':66,'multiline':True]['text':'deleteSelf','line_number':74,'multiline':True]['text':'*
     * Runs data flushes every 'storageGlobalParams.journalCommitIntervalMs' millis (unless
     * '_disablePeriodicFlushes' is set) or immediately if  waitForJournalFlush() is called.
     ','line_number':84,'multiline':True]['text':'*
     * Signals the thread to quit and then waits until it does. The given 'reason' is returned to
     * any operations that were waiting for the journal to flush.
     ','line_number':90,'multiline':True]['text':'*
     * Signals the thread to pause and then waits until it does.
     * Callers of waitForJournalFlush() will continue to be blocked while the journal flusher is
     * paused.
     ','line_number':96,'multiline':True]['text':'*
     * Signals the thread to resume from a pause.
     ','line_number':103,'multiline':True]['text':'*
     * Signals an immediate journal flush and waits for it to complete before returning.
     *
     * Retries internally on InterruptedDueToReplStateChange errors.
     * Will throw ErrorCodes::isShutdownError errors.
     *
     * Warning: Timestamped writes are not guaranteed to be persisted when this function is called
     * in parallel with replication rollback due to concurrent recoverToStableTimestamp(). But
     * untimestamped writes will be retained.
     ','line_number':108,'multiline':True]['text':'*
     * Interrupts the journal flusher thread via its operation context with an
     * InterruptedDueToReplStateChange error.
     ','line_number':120,'multiline':True]['text':' Journal flusher internal states.','line_number':127,'multiline':False]['text':'*
     * Signals an immediate journal flush and waits for it to complete before returning.
     *
     * Will throw ErrorCodes::isShutdownError if the flusher thread is being stopped.
     * Will throw InterruptedDueToReplStateChange if a flusher round is interrupted by stepdown.
     ','line_number':134,'multiline':True]['text':' Serializes setting/resetting _uniqueCtx and marking _uniqueCtx killed.','line_number':142,'multiline':False]['text':' Saves a reference to the flusher thread's operation context so it can be interrupted if the','line_number':145,'multiline':False]['text':' flusher is active.','line_number':146,'multiline':False]['text':' Protects the state below.','line_number':149,'multiline':False]['text':' Signaled to wake up the thread, if the thread is waiting or paused. The thread will check','line_number':152,'multiline':False]['text':' whether _flushJournalNow, _needToPause, or _shuttingDown is set and flush, pause, or stop','line_number':153,'multiline':False]['text':' accordingly.','line_number':154,'multiline':False]['text':' Facilitates waiting for journal flusher state change after waking up the journal flusher','line_number':157,'multiline':False]['text':' thread.','line_number':158,'multiline':False]['text':' New callers get a future from nextSharedPromise. The JournalFlusher thread will swap that to','line_number':167,'multiline':False]['text':' currentSharedPromise at the start of every round of flushing, and reset nextSharedPromise','line_number':168,'multiline':False]['text':' with a new shared promise.','line_number':169,'multiline':False]['text':' Controls whether to ignore the 'storageGlobalParams.journalCommitIntervalMs' setting. If set,','line_number':175,'multiline':False]['text':' data flushes will only be executed upon explicit request, no longer periodically in addition','line_number':176,'multiline':False]['text':' to upon request.','line_number':177,'multiline':False]['text':' namespace mongo','line_number':181,'multiline':False]