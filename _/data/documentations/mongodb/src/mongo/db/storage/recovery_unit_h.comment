['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The PrepareConflictBehavior specifies how operations should behave when encountering prepare
 * conflicts.
 ','line_number':56,'multiline':True]['text':'*
     * When prepare conflicts are encountered, block until the conflict is resolved.
     ','line_number':61,'multiline':True]['text':'*
     * Ignore prepare conflicts when they are encountered.
     *
     * When a prepared update is encountered, the previous version of a record will be returned.
     * This behavior can result in reading different versions of a record within the same snapshot
     * if the prepared update is committed during that snapshot. For this reason, operations that
     * ignore prepared updates may only perform reads. This is to prevent updating a record based on
     * an older version of itself, because a write conflict will not be generated in this scenario.
     ','line_number':66,'multiline':True]['text':'*
     * Ignore prepare conflicts when they are encountered, and allow operations to perform writes,
     * an exception to the rule of kIgnoreConflicts.
     *
     * This should only be used in cases where this is known to be impossible to perform writes
     * based on other prepared updates.
     ','line_number':77,'multiline':True]['text':'*
 * DataCorruptionDetectionMode determines how we handle the discovery of evidence of data
 * corruption.
 ','line_number':87,'multiline':True]['text':'*
     * Always throw a DataCorruptionDetected error when evidence of data corruption is detected.
     ','line_number':92,'multiline':True]['text':'*
     * When evidence of data corruption is decected, log an entry to the health log and the server
     * logs, but do not throw an error. Continue attempting to return results.
     ','line_number':96,'multiline':True]['text':'*
 * A RecoveryUnit is responsible for ensuring that data is persisted.
 * All on-disk information must be mutated through this interface.
 ','line_number':103,'multiline':True]['text':'*
     * A Snapshot is a decorable type whose lifetime is tied to the the lifetime of a snapshot
     * within the RecoveryUnit. Snapshots hold no storage engine state and are to be used for
     * snapshot ID comparison on a single RecoveryUnit and to support decorated types that should be
     * destructed when the storage snapshot is invalidated.
     *
     * Classes that decorate a Snapshot are constructed before a new storage snapshot is established
     * and destructed after the storage engine snapshot has been released.
     ','line_number':112,'multiline':True]['text':'*
     * Returns the current snapshot on this RecoveryUnit. Will be destructed and re-constructed when
     * the storage engine snapshot is closed via calls to abandonSnapshot, commitUnitOfWork, or
     * abortUnitOfWork.
     *
     * Note that the RecoveryUnit does not make any guarantees that this reference remains valid
     * except for the lifetime of the Snapshot.
     ','line_number':137,'multiline':True]['text':' Behavior for abandonSnapshot().','line_number':147,'multiline':False]['text':' default','line_number':149,'multiline':False]['text':' Specifies the level of suppression of untimestamped writes errors.','line_number':153,'multiline':False]['text':' Suppress errors throughout one write unit of work.','line_number':155,'multiline':False]['text':' Suppress errors throughout the lifetime of the RecoveryUnit.','line_number':156,'multiline':False]['text':' Enforce untimestamped writes errors (this is the default).','line_number':157,'multiline':False]['text':'*
     * Marks the beginning of a unit of work. Each call must be matched with exactly one call to
     * either commitUnitOfWork or abortUnitOfWork.
     *
     * When called with readOnly=true, no unit of work is started. Calling commitUnitOfWork or
     * abortUnitOfWork will invariant.
     *
     * Should be called through WriteUnitOfWork rather than directly.
     ','line_number':164,'multiline':True]['text':'*
     * Marks the end of a unit of work and commits all changes registered by calls to onCommit or
     * registerChange, in order. Must be matched by exactly one preceding call to beginUnitOfWork.
     *
     * Should be called through WriteUnitOfWork rather than directly.
     ','line_number':175,'multiline':True]['text':'*
     * Marks the end of a unit of work and rolls back all changes registered by calls to onRollback
     * or registerChange, in reverse order. Must be matched by exactly one preceding call to
     * beginUnitOfWork.
     *
     * Should be called through WriteUnitOfWork rather than directly.
     ','line_number':183,'multiline':True]['text':'*
     * Cleans up any state set for this unit of work.
     *
     * Should be called through WriteUnitOfWork rather than directly.
     ','line_number':192,'multiline':True]['text':'*
     * Transitions the active unit of work to the "prepared" state. Must be called after
     * beginUnitOfWork and before calling either abortUnitOfWork or commitUnitOfWork. Must be
     * overridden by storage engines that support prepared transactions.
     *
     * Must be preceded by a call to beginUnitOfWork and  setPrepareTimestamp, in that order.
     *
     * This cannot be called after setTimestamp or setCommitTimestamp.
     ','line_number':199,'multiline':True]['text':'*
     * Sets the behavior of handling conflicts that are encountered due to prepared transactions, if
     * supported by this storage engine. See PrepareConflictBehavior.
     ','line_number':213,'multiline':True]['text':'*
     * Returns the behavior of handling conflicts that are encountered due to prepared transactions.
     * Defaults to kEnforce if prepared transactions are not supported by this storage engine.
     ','line_number':219,'multiline':True]['text':'*
     * Dictates whether to round up prepare and commit timestamp of a prepared transaction. If set
     * to true, the prepare timestamp will be rounded up to the oldest timestamp if found to be
     * earlier; and the commit timestamp will be rounded up to the prepare timestamp if found to
     * be earlier.
     *
     * This must be called before a transaction begins, and defaults to false. On transaction close,
     * we reset the value to its default.
     *
     ','line_number':227,'multiline':True]['text':'*
     * Waits until all commits that happened before this call are durable in the journal. Returns
     * true, unless the storage engine cannot guarantee durability, which should never happen when
     * the engine is non-ephemeral. This cannot be called from inside a unit of work, and should
     * fail if it is. This method invariants if the caller holds any locks, except for repair.
     *
     * Can throw write interruption errors from the JournalListener.
     ','line_number':239,'multiline':True]['text':'*
     * Unlike `waitUntilDurable`, this method takes a stable checkpoint, making durable any writes
     * on unjournaled tables that are behind the current stable timestamp. If the storage engine
     * is starting from an "unstable" checkpoint or 'stableCheckpoint'=false, this method call will
     * turn into an unstable checkpoint.
     *
     * This must not be called by a system taking user writes until after a stable timestamp is
     * passed to the storage engine.
     ','line_number':249,'multiline':True]['text':'*
     * If there is an open transaction, it is closed. If the current AbandonSnapshotMode is
     * 'kAbort', the transaction is aborted. If the mode is 'kCommit' the transaction is committed,
     * and all data currently pointed to by cursors remains pinned until the cursors are
     * repositioned.

     * On return no transaction is active. It is a programming error to call this inside of a
     * WriteUnitOfWork, even if the AbandonSnapshotMode is 'kCommit'.
     ','line_number':262,'multiline':True]['text':'*
     * Sets the OperationContext that currently owns this RecoveryUnit. Should only be called by the
     * OperationContext.
     ','line_number':280,'multiline':True]['text':'*
     * Informs the RecoveryUnit that a snapshot will be needed soon, if one was not already
     * established. This specifically allows the storage engine to preallocate any required
     * transaction resources while minimizing the critical section between generating a new
     * timestamp and setting it using setTimestamp.
     ','line_number':286,'multiline':True]['text':'*
     * Returns whether or not a majority commmitted snapshot is available. If no snapshot has yet
     * been marked as Majority Committed, returns a status with error code
     * ReadConcernMajorityNotAvailableYet. After this returns successfully, at any point where
     * implementations attempt to acquire committed snapshot, if there are none available due to a
     * call to SnapshotManager::clearCommittedSnapshot(), a AssertionException with the same code
     * should be thrown.
     *
     * StorageEngines that don't support a SnapshotManager should use the default
     * implementation.
     ','line_number':294,'multiline':True]['text':'*
     * Returns the Timestamp being used by this recovery unit or boost::none if not reading from
     * a point in time. Any point in time returned will reflect one of the following:
     *  - when using ReadSource::kProvided, the timestamp provided.
     *  - when using ReadSource::kNoOverlap, the timestamp chosen by the storage engine.
     *  - when using ReadSource::kAllDurableSnapshot, the timestamp chosen using the storage
     * engine's all_durable timestamp.
     *  - when using ReadSource::kLastAppplied, the last applied timestamp. Can return boost::none
     * if no timestamp has been established.
     *  - when using ReadSource::kMajorityCommitted, the majority committed timestamp chosen by the
     * storage engine after a transaction has been opened.
     *
     * This may passively start a storage engine transaction to establish a read timestamp.
     ','line_number':310,'multiline':True]['text':'*
     * Gets the local SnapshotId.
     *
     * It is only valid to compare SnapshotIds generated by a single RecoveryUnit.
     *
     * This is unrelated to Timestamp which must be globally comparable.
     ','line_number':328,'multiline':True]['text':'*
     * Sets a timestamp to assign to future writes in a transaction.
     * All subsequent writes will be assigned this timestamp.
     * If setTimestamp() is called again, specifying a new timestamp, future writes will use this
     * new timestamp but past writes remain with their originally assigned timestamps.
     * Writes that occur before any setTimestamp() is called will be assigned the timestamp
     * specified in the last setTimestamp() call in the transaction, at commit time.
     *
     * setTimestamp() will fail if a commit timestamp is set using setCommitTimestamp() and not
     * yet cleared with clearCommitTimestamp(). setTimestamp() will also fail if a prepareTimestamp
     * has been set.
     ','line_number':339,'multiline':True]['text':'*
     * Returns true if a commit timestamp has been assigned to writes in this transaction.
     * Otherwise, returns false.
     ','line_number':355,'multiline':True]['text':'*
     * Sets a timestamp that will be assigned to all future writes on this RecoveryUnit until
     * clearCommitTimestamp() is called. This must be called either outside of a WUOW or on a
     * prepared transaction after setPrepareTimestamp() is called. setTimestamp() must not be called
     * while a commit timestamp is set.
     ','line_number':363,'multiline':True]['text':'*
     * Sets a timestamp that decides when all the future writes on this RecoveryUnit will be
     * durable.
     ','line_number':371,'multiline':True]['text':'*
     * Clears the commit timestamp that was set by setCommitTimestamp(). This must be called outside
     * of a WUOW. This must be called when a commit timestamp is set.
     ','line_number':377,'multiline':True]['text':'*
     * Returns the commit timestamp. Can be called at any time.
     ','line_number':383,'multiline':True]['text':'*
     * Returns the durable timestamp.
     ','line_number':390,'multiline':True]['text':'*
     * Sets a prepare timestamp for the current transaction. A subsequent call to
     * prepareUnitOfWork() is expected and required.
     * This cannot be called after setTimestamp or setCommitTimestamp.
     * This must be called inside a WUOW and may only be called once.
     ','line_number':397,'multiline':True]['text':'*
     * Returns the prepare timestamp for the current transaction.
     * Must be called after setPrepareTimestamp(), and cannot be called after setTimestamp() or
     * setCommitTimestamp(). This must be called inside a WUOW.
     ','line_number':408,'multiline':True]['text':'*
     * MongoDB must update documents with non-decreasing timestamp values. A storage engine is
     * allowed to assert when this contract is violated. An untimestamped write is a subset of these
     * violations, which may be necessary in limited circumstances. This API can be called before a
     * WriteUnitOfWork begins and will suppress this subset of errors until the WriteUnitOfWork is
     * committed or rolled-back.
     ','line_number':418,'multiline':True]['text':'*
     * Suppresses untimestamped write errors over the lifetime of a RecoveryUnit.
     *
     * NOTE: we should be extremely intentional with suppressing untimestamped errors. In most
     * cases we should enforce untimestamped write errors.
     ','line_number':427,'multiline':True]['text':'*
     * Computes the storage level statistics accrued since the last call to this function, or
     * since the recovery unit was instantiated. Should be called at the end of each operation.
     ','line_number':435,'multiline':True]['text':'*
     * The ReadSource indicates which external or provided timestamp to read from for future
     * transactions.
     ','line_number':443,'multiline':True]['text':'*
         * Read without a timestamp. This is the default.
         ','line_number':448,'multiline':True]['text':'*
         * Read from the majority all-committed timestamp.
         ','line_number':452,'multiline':True]['text':'*
         * Read from the latest timestamp where no future transactions will commit at or before.
         ','line_number':456,'multiline':True]['text':'*
         * Read from the lastApplied timestamp.
         ','line_number':460,'multiline':True]['text':'*
         * Read from the all_durable timestamp. New transactions will always read from the same
         * timestamp and never advance.
         ','line_number':464,'multiline':True]['text':'*
         * Read from the timestamp provided to setTimestampReadSource.
         ','line_number':469,'multiline':True]['text':'*
         * Read from the latest checkpoint.
         ','line_number':473,'multiline':True]['text':'*
     * Sets which timestamp to use for read transactions. If 'provided' is supplied, only kProvided
     * is an acceptable input.
     *
     * Must be called in one of the following cases:
     * - a transaction is not active
     * - no read source has been set yet
     * - the read source provided is the same as the existing read source
     ','line_number':499,'multiline':True]['text':'*
     * Pinning informs callers not to change the ReadSource on this RecoveryUnit. Callers are
     * expected to first check isReadSourcePinned before attempting to change the ReadSource. An
     * error may occur otherwise.
     * See also `PinReadSourceBlock` for a RAII-style solution.
     ','line_number':520,'multiline':True]['text':'*
     * Sets whether this operation intends to perform reads that do not need to keep data in the
     * storage engine cache. This can be useful for operations that do large, one-time scans of
     * data, and will attempt to keep higher-priority data from being evicted from the cache. This
     * may not be called in an active transaction.
     ','line_number':532,'multiline':True]['text':'*
     * Indicates whether the RecoveryUnit has an open snapshot. A snapshot can be opened inside or
     * outside of a WriteUnitOfWork.
     ','line_number':544,'multiline':True]['text':'*
     * When called, the WriteUnitOfWork ignores the multi timestamp constraint for the remainder of
     * the WriteUnitOfWork, where if within a WriteUnitOfWork multiple timestamps are set, the first
     * timestamp must be set prior to any writes.
     *
     * Must be reset when the WriteUnitOfWork is either committed or rolled back.
     ','line_number':552,'multiline':True]['text':'*
     * Registers a callback to be called prior to a WriteUnitOfWork committing the storage
     * transaction. This callback may throw a WriteConflictException which will abort the
     * transaction.
     ','line_number':561,'multiline':True]['text':'*
     * A Change is an action that is registerChange()'d while a WriteUnitOfWork exists. The
     * change is either rollback()'d or commit()'d when the WriteUnitOfWork goes out of scope.
     *
     * Neither rollback() nor commit() may fail or throw exceptions. Acquiring locks or blocking
     * operations should not be performed in these handlers, as it may lead to deadlocks.
     * LockManager locks are still held due to 2PL.
     *
     * Change implementors are responsible for handling their own synchronization, and must be aware
     * that rollback() and commit() may be called out of line and after the WriteUnitOfWork have
     * been freed. Pointers or references to stack variables should not be bound to the definitions
     * of rollback() or commit(). Each registered change will be committed or rolled back once.
     *
     * commit() handlers are passed the timestamp at which the transaction is committed. If the
     * transaction is not committed at a particular timestamp, or if the storage engine does not
     * support timestamps, then boost::none will be supplied for this parameter.
     *
     * The OperationContext provided in commit() and rollback() handlers is the current
     * OperationContext and may not be the same as when the Change was registered on the
     * RecoveryUnit. See above for usage restrictions.
     ','line_number':570,'multiline':True]['text':'*
     * The commitUnitOfWork() method calls the commit() method of each registered change in order of
     * registration. The endUnitOfWork() method calls the rollback() method of each registered
     * Change in reverse order of registration. Either will unregister and delete the changes.
     *
     * The registerChange() method may only be called when a WriteUnitOfWork is active, and
     * may not be called during commit or rollback.
     ','line_number':599,'multiline':True]['text':'*
     * Registers a change with the given rollback and commit functions.
     *
     * Be careful about the lifetimes of all variables captured by the callback!
     ','line_number':609,'multiline':True]['text':'*
     * Like registerChange() above but should only be used to make new state visible in the
     * in-memory catalog. Change registered with this function will commit before the commit
     * changes registered with registerChange and rollback will run after the rollback changes
     * registered with registerChange. Only one change of this kind should be registered at a given
     * time to ensure catalog updates are atomic, however multiple callbacks are allowed for testing
     * purposes.
     *
     * This separation ensures that regular Changes can observe changes to catalog visibility.
     ','line_number':635,'multiline':True]['text':'*
     * Like registerChange() above but should only be used to push idents for two phase drop to the
     * reaper. This currently needs to happen before a drop is made visible in the catalog to avoid
     * a window where a reader would observe the drop in the catalog but not be able to find the
     * ident in the reaper.
     *
     * TODO SERVER-77959: Remove this.
     ','line_number':647,'multiline':True]['text':'*
     * Registers a callback to be called if the current WriteUnitOfWork rolls back.
     *
     * Be careful about the lifetimes of all variables captured by the callback!

     * Do not capture OperationContext in this callback because it is not guaranteed to be the same
     * OperationContext to roll-back this unit of work. Use the OperationContext provided by the
     * callback instead.
     ','line_number':657,'multiline':True]['text':'*
     * Registers a callback to be called if the current WriteUnitOfWork commits.
     *
     * Be careful about the lifetimes of all variables captured by the callback!
     *
     * Do not capture OperationContext in this callback because it is not guaranteed to be the same
     * OperationContext to commit this unit of work. Use the OperationContext provided by the
     * callback instead.
     ','line_number':683,'multiline':True]['text':'*
     * Registers a callback to be called if the current WriteUnitOfWork commits for two phase drop.
     *
     * Should only be used for adding drop pending idents to the reaper!
     *
     * TODO SERVER-77959: Remove this.
     ','line_number':709,'multiline':True]['text':'*
     * State transitions:
     *
     *   /------------------------> Inactive <-----------------------------\
     *   |                             |                                   |
     *   |                             |                                   |
     *   |              /--------------+--------------\                    |
     *   |              |                             |                    | abandonSnapshot()
     *   |              |                             |                    |
     *   |   beginUOW() |                             | _txnOpen()         |
     *   |              |                             |                    |
     *   |              V                             V                    |
     *   |    InactiveInUnitOfWork          ActiveNotInUnitOfWork ---------/
     *   |              |                             |
     *   |              |                             |
     *   |   _txnOpen() |                             | beginUOW()
     *   |              |                             |
     *   |              \--------------+--------------/
     *   |                             |
     *   |                             |
     *   |                             V
     *   |                           Active
     *   |                             |
     *   |                             |
     *   |              /--------------+--------------\
     *   |              |                             |
     *   |              |                             |
     *   |   abortUOW() |                             | commitUOW()
     *   |              |                             |
     *   |              V                             V
     *   |          Aborting                      Committing
     *   |              |                             |
     *   |              |                             |
     *   |              |                             |
     *   \--------------+-----------------------------/
     *
     ','line_number':736,'multiline':True]['text':'*
     * Exposed for debugging purposes.
     ','line_number':800,'multiline':True]['text':'*
     * Returns true if this is an instance of RecoveryUnitNoop.
     ','line_number':823,'multiline':True]['text':'*
     * Sets a maximum timeout that the storage engine will block an operation when the cache is
     * under pressure.
     * If not set (default 0) then the storage engine will block indefinitely.
     ','line_number':830,'multiline':True]['text':'*
     * Returns the current state.
     ','line_number':840,'multiline':True]['text':'*
     * Transitions to new state.
     *
     * Invokes openSnapshot() for all registered snapshot changes when transitioning to kActive or
     * kActiveNotInUnitOfWork from an inactive state.
     ','line_number':847,'multiline':True]['text':'*
     * Returns true if active.
     ','line_number':855,'multiline':True]['text':'*
     * Returns true if currently managed by a WriteUnitOfWork.
     ','line_number':862,'multiline':True]['text':'*
     * Returns true if currently running commit or rollback handlers
     ','line_number':869,'multiline':True]['text':'*
     * Executes all registered commit handlers and clears all registered changes
     ','line_number':876,'multiline':True]['text':'*
     * Executes all registered rollback handlers and clears all registered changes
     ','line_number':881,'multiline':True]['text':' Sets the snapshot associated with this RecoveryUnit to a new globally unique id number.','line_number':893,'multiline':False]['text':' The Snapshot is always initialized by the RecoveryUnit constructor. We use an optional to','line_number':909,'multiline':False]['text':' simplify destructing and re-constructing the Snapshot in-place.','line_number':910,'multiline':False]['text':'*
 * RAII-style class to manage pinning and unpinning the readSource.
 ','line_number':917,'multiline':True]['text':'*
 * RAII-style class to override the oplog visible timestamp of the WiredTigerRecoveryUnit while it's
 * in scope.
 ','line_number':938,'multiline':True]['text':' namespace mongo','line_number':964,'multiline':False]