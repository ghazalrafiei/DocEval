['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':39,'multiline':False]['text':' New record stores use this by default.','line_number':134,'multiline':False]['text':' We previously weren't accounting for WiredTiger key size when it was an int64_t, thus we','line_number':160,'multiline':False]['text':' return 0 in those cases. With the clustering capabilities we now support potentially large','line_number':161,'multiline':False]['text':' keys as they are byte arrays, thus having to take it into account for the read/write metrics.','line_number':162,'multiline':False]['text':' TODO SERVER-73111: Remove the dependency on CollectionCatalog','line_number':171,'multiline':False]['text':' namespace','line_number':174,'multiline':False]['text':' The minimum oplog truncate marker size should be BSONObjMaxInternalSize.','line_number':193,'multiline':False]['text':' IDL does not support unsigned long long types.','line_number':197,'multiline':False]['text':' We need to read the whole oplog, override the recoveryUnit's oplogVisibleTimestamp.','line_number':211,'multiline':False]['text':' Compute the number and associated sizes of the records from markers that are either fully','line_number':285,'multiline':False]['text':' or partially truncated.','line_number':286,'multiline':False]['text':' Remove the markers corresponding to the records that were deleted.','line_number':296,'multiline':False]['text':' Account for any remaining records from a partially truncated marker in the marker','line_number':300,'multiline':False]['text':' currently being filled.','line_number':301,'multiline':False]['text':' Wait until kill() is called or there are too many collection markers.','line_number':311,'multiline':False]['text':' check that oplog truncate markers is at capacity','line_number':337,'multiline':False]['text':' The pinned oplog is inside the earliest marker, so we cannot remove the marker range.','line_number':344,'multiline':False]['text':' If we are not checking for time, then yes, there is a truncate marker to be reaped','line_number':352,'multiline':False]['text':' because oplog is at capacity.','line_number':353,'multiline':False]['text':' IDL does not support unsigned long long types.','line_number':370,'multiline':False]['text':' Notify the reclaimer thread as there might be an opportunity to recover space.','line_number':380,'multiline':False]['text':' Return error on first unrecognized field.','line_number':394,'multiline':False]['text':' On destruction, we must always handle freeing the underlying raw WT_CURSOR pointer.','line_number':416,'multiline':False]['text':' Shutdown does not wait for any threads running queries to be interrupted and exit.','line_number':419,'multiline':False]['text':' In addition, the RandomCursor destructor doesn't hold any global lock so we need to','line_number':420,'multiline':False]['text':' check if the server is shutting down to avoid calling into the storage engine, whose','line_number':421,'multiline':False]['text':' connection may have already been closed.','line_number':422,'multiline':False]['text':' This can happen if you try to open a cursor on the oplog table and a verify is','line_number':477,'multiline':False]['text':' currently running on it.','line_number':478,'multiline':False]['text':' static','line_number':517,'multiline':False]['text':' Separate out a prefix and suffix in the default string. User configuration will','line_number':527,'multiline':False]['text':' override values in the prefix, but not values in the suffix.','line_number':528,'multiline':False]['text':' Setting this larger than 10m can hurt latencies and throughput degradation if this','line_number':531,'multiline':False]['text':' is the oplog.  See SERVER-16247','line_number':532,'multiline':False]['text':' Choose a higher split percent, since most usage is append only. Allow some space','line_number':534,'multiline':False]['text':' for workloads where updates increase the size of documents.','line_number':535,'multiline':False]['text':' Time-series collections use zstd compression by default.','line_number':546,'multiline':False]['text':' All other collections use the globally configured default.','line_number':549,'multiline':False]['text':' force file for oplog','line_number':567,'multiline':False]['text':' Tune down to 10m.  See SERVER-16247','line_number':569,'multiline':False]['text':' WARNING: No user-specified config can appear below this line. These options are required','line_number':573,'multiline':False]['text':' for correct behavior of the server.','line_number':574,'multiline':False]['text':' A clustered collection requires both CollectionOptions.clusteredIndex and','line_number':576,'multiline':False]['text':' KeyFormat::String. For a clustered record store that is not associated with a clustered','line_number':577,'multiline':False]['text':' collection KeyFormat::String is sufficient.','line_number':578,'multiline':False]['text':' If the RecordId format is a String, assume a byte array key format.','line_number':584,'multiline':False]['text':' All other collections use an int64_t as their table keys.','line_number':587,'multiline':False]['text':' Record store metadata','line_number':592,'multiline':False]['text':' This is a clustered record store. Its WiredTiger table requires key_format='u' for','line_number':630,'multiline':False]['text':' correct operation.','line_number':631,'multiline':False]['text':' The oplog always needs to be marked for size adjustment since it is journaled and also','line_number':669,'multiline':False]['text':' may change during replication recovery (if truncated).','line_number':670,'multiline':False]['text':' If no SizeStorer is in use, start counting at zero. In practice, this will only ever be the','line_number':675,'multiline':False]['text':' case for temporary RecordStores (those not associated with any collection) and in unit','line_number':676,'multiline':False]['text':' tests. Persistent size information is not required in either case. If a RecordStore needs','line_number':677,'multiline':False]['text':' persistent size information, we require it to use a SizeStorer.','line_number':678,'multiline':False]['text':' Delete oplog visibility manager on KV engine.','line_number':699,'multiline':False]['text':'shuttingDown=','line_number':700,'multiline':True]['text':'forward=','line_number':711,'multiline':True]['text':' We found no records in this collection; however, there may actually be documents present','line_number':713,'multiline':False]['text':' if writes to this collection were not included in the stable checkpoint the last time','line_number':714,'multiline':False]['text':' this node shut down. We set the data size and the record count to zero, but will adjust','line_number':715,'multiline':False]['text':' these if writes are played during startup recovery.','line_number':716,'multiline':False]['text':' Alternatively, this may be a collection we are creating during replication recovery.','line_number':717,'multiline':False]['text':' In that case the collection will be given a new ident and a new SizeStorer entry. The','line_number':718,'multiline':False]['text':' collection size from before we recovered to stable timestamp is not associated with this','line_number':719,'multiline':False]['text':' record store and so we must keep track of the count throughout recovery.','line_number':720,'multiline':False]['text':'','line_number':721,'multiline':False]['text':' We mark a RecordStore as needing size adjustment iff its size is accurate at the current','line_number':722,'multiline':False]['text':' time but not as of the top of the oplog.','line_number':723,'multiline':False]['text':' If the server was started in read-only mode, skip calculating the oplog truncate markers. The','line_number':744,'multiline':False]['text':' OplogCapMaintainerThread does not get started in this instance.','line_number':745,'multiline':False]['text':' Many things assume an empty capped collection still takes up space.','line_number':801,'multiline':False]['text':' Retrieve the value from a positioned cursor.','line_number':814,'multiline':False]['text':' This optimized findRecord implementation does not apply oplog visibility rules. Use the','line_number':825,'multiline':False]['text':' base class implementation which uses a cursor that guarantees the proper semantics.','line_number':826,'multiline':False]['text':' SERVER-48453: Initialize the next record id counter before deleting. This ensures we won't','line_number':856,'multiline':False]['text':' reuse record ids, which can be problematic for the _mdb_catalog.','line_number':857,'multiline':False]['text':' Create another reference to the oplog truncate markers while holding a lock on the collection','line_number':893,'multiline':False]['text':' to prevent it from being destructed.','line_number':894,'multiline':False]['text':' Release any locks before waiting on the condition variable. It is illegal to access any','line_number':900,'multiline':False]['text':' methods or members of this record store after this line because it could be deleted.','line_number':901,'multiline':False]['text':' The top-level locks were freed, so also release any potential low-level (storage engine)','line_number':904,'multiline':False]['text':' locks that might be held.','line_number':905,'multiline':False]['text':' Wait for an oplog deletion request, or for this record store to have been destroyed.','line_number':909,'multiline':False]['text':' Reacquire the locks that were released.','line_number':912,'multiline':False]['text':' The first record in the oplog should be within the truncate range.','line_number':947,'multiline':False]['text':' It is necessary that there exists a record after the truncate marker but before or','line_number':960,'multiline':False]['text':' including the mayTruncateUpTo point.  Since the mayTruncateUpTo point may fall','line_number':961,'multiline':False]['text':' between records, the truncate marker check is not sufficient.','line_number':962,'multiline':False]['text':' Check 'cmp' to determine if we landed on the requested record. While it is often the','line_number':970,'multiline':False]['text':' case that truncate markers represent a perfect partitioning of the oplog, it's not','line_number':971,'multiline':False]['text':' guaranteed.  The truncation method is lenient to overlapping truncate markers. See','line_number':972,'multiline':False]['text':' SERVER-56590 for details.  If we landed land on a higher record (cmp > 0), we likely','line_number':973,'multiline':False]['text':' truncated a duplicate truncate marker in a previous iteration. In this case we can','line_number':974,'multiline':False]['text':' skip the check for oplog entries after the truncate marker we are truncating. If we','line_number':975,'multiline':False]['text':' landed on a prior record, then we have records that are not in truncation range of','line_number':976,'multiline':False]['text':' any truncate marker. This will have been logged as a warning, above.','line_number':977,'multiline':False]['text':' After checking whether or not we should truncate, reposition the cursor back to the','line_number':1000,'multiline':False]['text':' current truncate marker's lastRecord.','line_number':1001,'multiline':False]['text':' Remove the truncate marker after a successful truncation.','line_number':1009,'multiline':False]['text':' Stash the truncate point for next time to cleanly skip over tombstones, etc.','line_number':1012,'multiline':False]['text':' Non-clustered record stores will extract the RecordId key for the oplog and generate','line_number':1055,'multiline':False]['text':' unique int64_t RecordIds if RecordIds are not set.','line_number':1056,'multiline':False]['text':' In the normal write paths, a timestamp is always set. It is only in unusual cases','line_number':1064,'multiline':False]['text':' like inserting the oplog seed document where the caller does not provide a','line_number':1065,'multiline':False]['text':' timestamp.','line_number':1066,'multiline':False]['text':' Double-check that the 'ts' field in the oplog entry matches the assigned','line_number':1073,'multiline':False]['text':' timestamp, if it was provided.','line_number':1074,'multiline':False]['text':' Some RecordStores, like TemporaryRecordStores, may want to set their own','line_number':1087,'multiline':False]['text':' RecordIds.','line_number':1088,'multiline':False]['text':' Setting this transaction to be unordered will trigger a journal flush. Because these','line_number':1107,'multiline':False]['text':' are direct writes into the oplog, the machinery to trigger a journal flush is','line_number':1108,'multiline':False]['text':' bypassed. A followup oplog read will require a fres value to make progress.','line_number':1109,'multiline':False]['text':' Increment metrics for each insert separately, as opposed to outside of the loop. The API','line_number':1151,'multiline':False]['text':' requires that each record be accounted for separately.','line_number':1152,'multiline':False]['text':' This shouldn't happen in normal cases, but this is needed because some tests do','line_number':1167,'multiline':False]['text':' not add wall clock times. Note that, with this addition, it's possible that the','line_number':1168,'multiline':False]['text':' oplog may grow larger than expected if --oplogMinRetentionHours is set.','line_number':1169,'multiline':False]['text':' Using this function inside a UOW is not supported because the main reason to call it is to','line_number':1195,'multiline':False]['text':' synchronize to the last op before waiting for write concern, so it makes little sense to do','line_number':1196,'multiline':False]['text':' so in a UOW. This also ensures we do not return uncommited entries.','line_number':1197,'multiline':False]['text':' getSession will open a txn if there was no txn active.','line_number':1203,'multiline':False]['text':' In case the RU was inactive, leave it in that state.','line_number':1208,'multiline':False]['text':' Using relaxed loads is fine here. The returned timestamp can be from a deleted oplog entry by','line_number':1235,'multiline':False]['text':' the time we return from the method. Additionally we perform initialisation that uses strong','line_number':1236,'multiline':False]['text':' memory ordering so initialisation will only work if we've actually never initialised the','line_number':1237,'multiline':False]['text':' timestamp.','line_number':1238,'multiline':False]['text':' Check if we should modify rather than doing a full update.  Look for deltas for documents','line_number':1302,'multiline':False]['text':' larger than 1KB, up to 16 changes representing up to 10% of the data.','line_number':1303,'multiline':False]['text':'','line_number':1304,'multiline':False]['text':' Skip modify for logged tables: don't trust WiredTiger's recovery with operations that are not','line_number':1305,'multiline':False]['text':' idempotent.','line_number':1306,'multiline':False]['text':' Don't perform a range-based for loop because there may be fewer calculated entries','line_number':1329,'multiline':False]['text':' than the reserved maximum.','line_number':1330,'multiline':False]['text':' Account for both the amount of old data we are overwriting (size) and new data we','line_number':1332,'multiline':False]['text':' are inserting (data.size).','line_number':1333,'multiline':False]['text':' Account for both the amount of old data we are overwriting (size) and new data we are','line_number':1384,'multiline':False]['text':' inserting (data.size).','line_number':1385,'multiline':False]['text':' The test harness calls us with empty damage vectors which WiredTiger doesn't allow.','line_number':1397,'multiline':False]['text':' Printing the record metadata requires a new session. We cannot open other cursors when there','line_number':1422,'multiline':False]['text':' are open history store cursors in the session.','line_number':1423,'multiline':False]['text':' Per the version cursor API:','line_number':1426,'multiline':False]['text':' - A version cursor can only be called with the read timestamp as the oldest timestamp.','line_number':1427,'multiline':False]['text':' - If there is no oldest timestamp, the version cursor can only be called with a read','line_number':1428,'multiline':False]['text':'   timestamp of 1.','line_number':1429,'multiline':False]['text':' Open a version cursor. This is a debug cursor that enables iteration through the history of','line_number':1435,'multiline':False]['text':' values for a given record.','line_number':1436,'multiline':False]['text':' Save all relevant timestamps that we just printed.','line_number':1481,'multiline':False]['text':' Empty collections don't have anything to truncate.','line_number':1508,'multiline':False]['text':' Empty collections don't have anything to truncate.','line_number':1534,'multiline':False]['text':' Make sure to reset the cursor since we have to replace it with what the user provided us.','line_number':1539,'multiline':False]['text':' Set a pointer on the WT_SESSION to the opCtx, so that WT::compact can use a callback to','line_number':1577,'multiline':False]['text':' check for interrupts.','line_number':1578,'multiline':False]['text':' Type can be "lsm" or "file"','line_number':1703,'multiline':False]['text':' Make sure that callers do not hold an active snapshot so it will be able to see the oplog','line_number':1712,'multiline':False]['text':' entries it waited for afterwards.','line_number':1713,'multiline':False]['text':' We're correcting the size as of now, future writes should be tracked.','line_number':1732,'multiline':False]['text':' If we have a WiredTigerSizeStorer, but our size info is not currently cached, add it.','line_number':1739,'multiline':False]['text':' Clustered record stores do not automatically generate int64 RecordIds. RecordIds are instead','line_number':1745,'multiline':False]['text':' constructed as binary strings, KeyFormat::String, from the user-defined cluster key.','line_number':1746,'multiline':False]['text':' In the normal case, this will already be initialized, so use a weak load. Since this value','line_number':1749,'multiline':False]['text':' will only change from 0 to a positive integer, the only risk is reading an outdated value, 0,','line_number':1750,'multiline':False]['text':' and having to take the mutex.','line_number':1751,'multiline':False]['text':' Only one thread needs to do this.','line_number':1756,'multiline':False]['text':' During startup recovery, the collectionAlwaysNeedsSizeAdjustment flag is not set by default','line_number':1762,'multiline':False]['text':' for the sake of efficiency. However, if we reach this point, we may need to set it in order','line_number':1763,'multiline':False]['text':' to ensure that capped deletes can occur on documents inserted earlier in startup recovery.','line_number':1764,'multiline':False]['text':' Find the largest RecordId in the table and add 1 to generate our next RecordId. The','line_number':1771,'multiline':False]['text':' largest_key API returns the largest key in the table regardless of visibility. This ensures','line_number':1772,'multiline':False]['text':' we don't re-use RecordIds that are not visible.','line_number':1773,'multiline':False]['text':' Need to start at 1 so we are always higher than RecordId::minLong(). This will be the case if','line_number':1775,'multiline':False]['text':' the table is empty, and returned RecordId is null.','line_number':1776,'multiline':False]['text':' Initialize the highest seen RecordId in a session without a read timestamp because that is','line_number':1782,'multiline':False]['text':' required by the largest_key API.','line_number':1783,'multiline':False]['text':' We must limit the amount of time spent blocked on cache eviction to avoid a deadlock with','line_number':1788,'multiline':False]['text':' ourselves. The calling operation may have a session open that has written a large amount','line_number':1789,'multiline':False]['text':' of data, and by creating a new session, we are preventing WT from being able to roll back','line_number':1790,'multiline':False]['text':' that transaction to free up cache space. If we do block on cache eviction here, we must','line_number':1791,'multiline':False]['text':' consider that the other session owned by this thread may be the one that needs to be','line_number':1792,'multiline':False]['text':' rolled back. If this does time out, we will receive a WT_ROLLBACK and throw an error.','line_number':1793,'multiline':False]['text':' Force the caller to rollback its transaction if we can't make progess with eviction.','line_number':1800,'multiline':False]['text':' TODO (SERVER-63620): Convert this to a different error code that is distinguishable from','line_number':1801,'multiline':False]['text':' a true write conflict.','line_number':1802,'multiline':False]['text':' Empty table.','line_number':1824,'multiline':False]['text':' Clustered record stores do not automatically generate int64 RecordIds. RecordIds are instead','line_number':1838,'multiline':False]['text':' constructed as binary strings, KeyFormat::String, from the user-defined cluster key.','line_number':1839,'multiline':False]['text':' If there's nothing to increment/decrement this will be a no-op. Avoid all the other','line_number':1850,'multiline':False]['text':' checks and early return.','line_number':1851,'multiline':False]['text':' Flush the updated number of records to disk immediately.','line_number':1890,'multiline':False]['text':' Flush the updated data size to disk immediately.','line_number':1903,'multiline':False]['text':' If not deleting the record located at 'end', then advance the cursor to the first record','line_number':1931,'multiline':False]['text':' that is being deleted.','line_number':1932,'multiline':False]['text':' No records to delete.','line_number':1935,'multiline':False]['text':' Compute the number and associated sizes of the records to delete.','line_number':1943,'multiline':False]['text':' Truncate the collection starting from the record located at 'firstRemovedId' to the end of','line_number':1954,'multiline':False]['text':' the collection.','line_number':1955,'multiline':False]['text':' Immediately rewind visibility to our truncation point, to prevent new','line_number':1970,'multiline':False]['text':' transactions from appearing.','line_number':1971,'multiline':False]['text':' If majority read concern is disabled, the oldest timestamp can be ahead of 'truncTs'.','line_number':1976,'multiline':False]['text':' In that case, we must set the oldest timestamp along with the commit timestamp.','line_number':1977,'multiline':False]['text':' Otherwise, the commit timestamp will be set behind the oldest timestamp, which is','line_number':1978,'multiline':False]['text':' illegal.','line_number':1979,'multiline':False]['text':' This labels the current transaction with a timestamp.','line_number':2004,'multiline':False]['text':' This is required for oplog visibility to work correctly, as WiredTiger uses the','line_number':2005,'multiline':False]['text':' transaction list to determine where there are holes in the oplog.','line_number':2006,'multiline':False]['text':' This handles non-primary (secondary) state behavior; we simply set the oplog visiblity read','line_number':2010,'multiline':False]['text':' timestamp here, as there cannot be visible holes prior to the opTime passed in.','line_number':2011,'multiline':False]['text':' Inserts and updates usually notify waiters on commit, but the oplog collection has special','line_number':2014,'multiline':False]['text':' visibility rules and waiters must be notified whenever the oplog read timestamp is forwarded.','line_number':2015,'multiline':False]['text':' Cursor Base:','line_number':2021,'multiline':False]['text':' Ensure an active transaction is open. While WiredTiger supports using cursors on a session','line_number':2046,'multiline':False]['text':' without an active transaction (i.e. an implicit transaction), that would bypass configuration','line_number':2047,'multiline':False]['text':' options we pass when we explicitly start transactions in the RecoveryUnit.','line_number':2048,'multiline':False]['text':' Nothing after the next line can throw WCEs.','line_number':2055,'multiline':False]['text':' Note that an unpositioned (or eof) WT_CURSOR returns the first/last entry in the','line_number':2056,'multiline':False]['text':' table when you call next/prev.','line_number':2057,'multiline':False]['text':' If we're using a read timestamp and we're a reverse cursor positioned outside of that bound,','line_number':2073,'multiline':False]['text':' walk backwards until we find a suitable record. This is exercised when doing a reverse','line_number':2074,'multiline':False]['text':' natural order collection scan.','line_number':2075,'multiline':False]['text':' Crash when testing diagnostics are enabled and not explicitly uasserting on','line_number':2139,'multiline':False]['text':' out-of-order keys.','line_number':2140,'multiline':False]['text':' uassert with 'DataCorruptionDetected' after logging.','line_number':2147,'multiline':False]['text':' Ensure an active transaction is open. While WiredTiger supports using cursors on a session','line_number':2177,'multiline':False]['text':' without an active transaction (i.e. an implicit transaction), that would bypass configuration','line_number':2178,'multiline':False]['text':' options we pass when we explicitly start transactions in the RecoveryUnit.','line_number':2179,'multiline':False]['text':' Nothing after the next line can throw WCEs.','line_number':2186,'multiline':False]['text':' Oplog queries must manually implement read_timestamp visibility.','line_number':2211,'multiline':False]['text':' Additionally, forward scanning oplog cursors must not see past holes.','line_number':2217,'multiline':False]['text':' Per the requirement of the API, return the lower (for forward) or higher (for reverse)','line_number':2244,'multiline':False]['text':' record.','line_number':2245,'multiline':False]['text':' If the curId is higher than the read timestamp, it must be for backward search. Per the','line_number':2254,'multiline':False]['text':' requirement of the API, the largest smaller than the oplog read timestamp should be','line_number':2255,'multiline':False]['text':' returned.','line_number':2256,'multiline':False]['text':' If we tried to return an earlier record but we found the end (for forward) or beginning (for','line_number':2263,'multiline':False]['text':' reverse), go back to our original location so that we have something to return.','line_number':2264,'multiline':False]['text':' After we've positioned to the first document to return, apply visibility rules again.','line_number':2278,'multiline':False]['text':' The oplog does not use the capped snapshot mechanism, so it should be impossible for both to','line_number':2313,'multiline':False]['text':' exist at once.','line_number':2314,'multiline':False]['text':' One cannot pass a read_timestamp of 0 to WT, but a "0" is commonly understood as','line_number':2333,'multiline':False]['text':' every time is visible.','line_number':2334,'multiline':False]['text':' We can't enforce that the caller has initialized the capped snapshot before entering this','line_number':2338,'multiline':False]['text':' function because we need to know, for example, what locks are held. So we expect higher','line_number':2339,'multiline':False]['text':' layers to do so.','line_number':2340,'multiline':False]['text':' This will ensure an active session exists, so any restored cursors will bind to it','line_number':2358,'multiline':False]['text':' If we've hit EOF, then this iterator is done and need not be restored.','line_number':2363,'multiline':False]['text':' Use a bounded cursor to avoid unnecessarily traversing deleted records while repositioning','line_number':2375,'multiline':False]['text':' the cursor. This is particularly useful in capped collections when we're making a lot of','line_number':2376,'multiline':False]['text':' deletes and the cursor traverses many deleted records to reposition itself.','line_number':2377,'multiline':False]['text':' Capped read collscans do not tolerate cursor repositioning.','line_number':2392,'multiline':False]['text':' By contrast, write collscans on a clustered collection like TTL deletion','line_number':2393,'multiline':False]['text':' tolerate cursor repositioning like normal collections.','line_number':2394,'multiline':False]['text':' Landed right where we left off.','line_number':2402,'multiline':False]['text':' The cursor has been repositioned as it was sitting on a document that has been','line_number':2405,'multiline':False]['text':' removed by capped collection deletion. It is important that we error out in this case','line_number':2406,'multiline':False]['text':' so that consumers don't silently get 'holes' when scanning capped collections.','line_number':2407,'multiline':False]['text':' We don't make this guarantee for normal collections or for write operations like','line_number':2408,'multiline':False]['text':' capped TTL deletion so it is ok to skip ahead in that case.','line_number':2409,'multiline':False]['text':' We landed after where we were. Return our new location on the next call to next().','line_number':2415,'multiline':False]['text':' Check that the cursor hasn't landed before _lastReturnedId','line_number':2420,'multiline':False]['text':' _cursor recreated in restore() to avoid risk of WT_ROLLBACK issues.','line_number':2436,'multiline':False]['text':' Standard Implementations:','line_number':2439,'multiline':False]['text':' namespace mongo','line_number':2511,'multiline':False]