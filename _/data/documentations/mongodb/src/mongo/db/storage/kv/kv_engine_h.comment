['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * During the startup process, the storage engine is one of the first components to be started
     * up and fully initialized. But that fully initialized storage engine may not be recognized as
     * the end for the remaining storage startup tasks that still need to be performed.
     *
     * For example, after the storage engine has been fully initialized, we need to access it in
     * order to set up all of the collections and indexes based on the metadata, or perform some
     * corrective measures on the data files, etc.
     *
     * When all of the storage startup tasks are completed as a whole, then this function is called
     * by the external force managing the startup process.
     ','line_number':57,'multiline':True]['text':'*
     * Requesting multiple copies for the same ns/ident is a rules violation; Calling on a
     * non-created ident is invalid and may crash.
     *
     * Trying to access this record store in the future will retreive the pointer from the
     * collection object, and therefore this function can only be called once per namespace.
     *
     * @param ident Will be created if it does not already exist.
     ','line_number':73,'multiline':True]['text':'*
     * Opens an existing ident as a temporary record store. Must be used for record stores created
     * with `makeTemporaryRecordStore`. Using `getRecordStore` would cause the record store to use
     * the same settings as a regular collection, and would differ in behaviour as when it was
     * originally created with `makeTemporaryRecordStore`.
     ','line_number':87,'multiline':True]['text':'*
     * The create and drop methods on KVEngine are not transactional. Transactional semantics
     * are provided by the StorageEngine code that calls these. For example, drop will be
     * called if a create is rolled back. A higher-level drop operation will only propagate to a
     * drop call on the KVEngine once the WUOW commits. Therefore drops will never be rolled
     * back and it is safe to immediately reclaim storage.
     ','line_number':109,'multiline':True]['text':'*
     * RecordStores initially created with `makeTemporaryRecordStore` must be opened with
     * `getTemporaryRecordStore`.
     ','line_number':122,'multiline':True]['text':'*
     * Similar to createRecordStore but this imports from an existing table with the provided ident
     * instead of creating a new one.
     ','line_number':130,'multiline':True]['text':'*
     * Similar to createSortedDataInterface but this imports from an existing table with the
     * provided ident instead of creating a new one.
     ','line_number':152,'multiline':True]['text':'*
     * Repair an ident. Returns Status::OK if repair did not modify data. Returns a non-fatal status
     * of DataModifiedByRepair if a repair operation succeeded, but may have modified data.
     ','line_number':167,'multiline':True]['text':'*
     * Removes any knowledge of the ident from the storage engines metadata which includes removing
     * the underlying files belonging to the ident. If the storage engine is unable to process the
     * removal immediately, we enqueue it to be removed at a later time. If a callback is specified,
     * it will be run upon the drop if this function returns an OK status.
     ','line_number':173,'multiline':True]['text':'*
     * Removes any knowledge of the ident from the storage engines metadata without removing the
     * underlying files belonging to the ident.
     ','line_number':183,'multiline':True]['text':'*
     * Attempts to locate and recover a file that is "orphaned" from the storage engine's metadata,
     * but may still exist on disk if this is a durable storage engine. Returns DataModifiedByRepair
     * if a new record store was successfully created and Status::OK() if no data was modified.
     *
     * This may return an error if the storage engine attempted to recover the file and failed.
     *
     * This recovery process makes no guarantees about the integrity of data recovered or even that
     * it still exists when recovered.
     ','line_number':189,'multiline':True]['text':'*
     * See StorageEngine::flushAllFiles for details
     ','line_number':215,'multiline':True]['text':'*
     * See StorageEngine::beginBackup for details
     ','line_number':220,'multiline':True]['text':'*
     * See StorageEngine::endBackup for details
     ','line_number':228,'multiline':True]['text':'*
     * Returns whether the KVEngine supports checkpoints.
     ','line_number':256,'multiline':True]['text':'*
     * Returns true if the KVEngine is ephemeral -- that is, it is NOT persistent and all data is
     * lost after shutdown. Otherwise, returns false.
     ','line_number':274,'multiline':True]['text':'*
     * This must not change over the lifetime of the engine.
     ','line_number':280,'multiline':True]['text':'*
     * Returns true if storage engine supports --directoryperdb.
     * See:
     *     http://docs.mongodb.org/manual/reference/program/mongod/#cmdoption--directoryperdb
     ','line_number':287,'multiline':True]['text':'*
     * This method will be called before there is a clean shutdown.  Storage engines should
     * override this method if they have clean-up to do that is different from unclean shutdown.
     * MongoDB will not call into the storage subsystem after calling this function.
     *
     * There is intentionally no uncleanShutdown().
     ','line_number':298,'multiline':True]['text':'*
     * Return the SnapshotManager for this KVEngine or NULL if not supported.
     *
     * Pointer remains owned by the StorageEngine, not the caller.
     ','line_number':307,'multiline':True]['text':'*
     * Sets a new JournalListener, which is used to alert the rest of the
     * system about journaled write progress.
     ','line_number':316,'multiline':True]['text':'*
     * See `StorageEngine::setStableTimestamp`
     ','line_number':322,'multiline':True]['text':'*
     * See `StorageEngine::setInitialDataTimestamp`
     ','line_number':327,'multiline':True]['text':'*
     * See `StorageEngine::getInitialDataTimestamp`
     ','line_number':332,'multiline':True]['text':'*
     * See `StorageEngine::setOldestTimestampFromStable`
     ','line_number':339,'multiline':True]['text':'*
     * See `StorageEngine::setOldestActiveTransactionTimestampCallback`
     ','line_number':344,'multiline':True]['text':'*
     * See `StorageEngine::setOldestTimestamp`
     ','line_number':350,'multiline':True]['text':'*
     * See `StorageEngine::supportsRecoverToStableTimestamp`
     ','line_number':355,'multiline':True]['text':'*
     * See `StorageEngine::supportsRecoveryTimestamp`
     ','line_number':362,'multiline':True]['text':'*
     * See `StorageEngine::recoverToStableTimestamp`
     ','line_number':369,'multiline':True]['text':'*
     * See `StorageEngine::getRecoveryTimestamp`
     ','line_number':376,'multiline':True]['text':'*
     * See `StorageEngine::getLastStableRecoveryTimestamp`
     ','line_number':383,'multiline':True]['text':'*
     * See `StorageEngine::getAllDurableTimestamp`
     ','line_number':390,'multiline':True]['text':'*
     * See `StorageEngine::getOplogNeededForCrashRecovery`
     ','line_number':395,'multiline':True]['text':'*
     * See `StorageEngine::supportsReadConcernSnapshot`
     ','line_number':400,'multiline':True]['text':'*
     * See `StorageEngine::supportsOplogTruncateMarkers`
     ','line_number':411,'multiline':True]['text':'*
     * Methods to access the storage engine's timestamps.
     ','line_number':418,'multiline':True]['text':'*
     * See `StorageEngine::setPinnedOplogTimestamp`
     ','line_number':444,'multiline':True]['text':'*
     * See `StorageEngine::dump`
     ','line_number':449,'multiline':True]['text':'*
     * Instructs the KVEngine to (re-)configure any internal logging
     * capabilities. Returns Status::OK() if the logging subsystem was successfully
     * configured (or if defaulting to the virtual implementation).
     ','line_number':454,'multiline':True]['text':'*
     * Returns the 'KeyFormat' tied to 'ident'.
     ','line_number':467,'multiline':True]['text':'*
     * Returns the cache size in MB.
     ','line_number':474,'multiline':True]['text':'*
     * Returns the input storage engine options, sanitized to remove options that may not apply to
     * this node, such as encryption. Might be called for both collection and index options. See
     * SERVER-68122.
     *
     * TODO SERVER-81069: Remove this since it's intrinsically tied to encryption options only.
     ','line_number':481,'multiline':True]['text':'*
     * See StorageEngine::autoCompact for details
     ','line_number':493,'multiline':True]['text':'*
     * The destructor will never be called from mongod, but may be called from tests.
     * Engines may assume that this will only be called in the case of clean shutdown, even if
     * cleanShutdown() hasn't been called.
     ','line_number':502,'multiline':True]['text':' namespace mongo','line_number':509,'multiline':False]