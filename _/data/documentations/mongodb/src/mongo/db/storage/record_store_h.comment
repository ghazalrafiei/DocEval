['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The data items stored in a RecordStore.
 ','line_number':75,'multiline':True]['text':'*
 * Retrieves Records from a RecordStore.
 *
 * A cursor is constructed with a direction flag with the following effects:
 *      - The direction that next() moves.
 *      - If a restore cannot return to the saved position, cursors will be positioned on the
 *        closest position *after* the query in the direction of the scan.
 *
 * A cursor is tied to a transaction, such as the OperationContext or a WriteUnitOfWork
 * inside that context. Any cursor acquired inside a transaction is invalid outside
 * of that transaction, instead use the save and restore methods to reestablish the cursor.
 *
 * Any method other than the save method may throw WriteConflictException. If that happens, the
 * cursor may not be used again until it has been saved and successfully restored. If next() or
 * restore() throw a WCE the cursor's position will be the same as before the call (strong exception
 * guarantee). All other methods leave the cursor in a valid state but with an unspecified position
 * (basic exception guarantee). If any exception other than WCE is thrown, the cursor must be
 * destroyed, which is guaranteed not to leak any resources.
 *
 * Any returned unowned BSON is only valid until the next call to any method on this
 * interface.
 *
 * Implementations may override any default implementation if they can provide a more
 * efficient implementation.
 *
 * Any interface that performs writes must validate that we are not in 'readOnly' mode.
 *
 * Storage engines only need to implement the derived SeekableRecordCursor, but may choose
 * to implement this simpler interface for cursors used for repair or random traversal.
 *
 * IMPORTANT NOTE FOR DOCUMENT-LOCKING ENGINES: If you implement capped collections with a
 * "visibility" system such that documents that exist in your snapshot but were inserted after
 * the last uncommitted document are hidden, you must follow the following rules:
 *   - next() on forward cursors must never return invisible documents.
 *   - If next() on a forward cursor hits an invisible document, it should behave as if it hit
 *     the end of the collection.
 *   - Reverse cursors must ignore the visibility filter. That means that they initially return the
 *     newest committed record in the collection and may skip over uncommitted records.
 *   - SeekableRecordCursor::seekExact() must ignore the visibility filter and return the requested
 *     document even if it is supposed to be invisible.
 * TODO SERVER-18934 Handle this above the storage engine layer so storage engines don't have to
 * deal with capped visibility.
 ','line_number':83,'multiline':True]['text':'*
     * Moves forward and returns the new data or boost::none if there is no more data.
     * Continues returning boost::none once it reaches EOF unlike stl iterators.
     * Returns records in RecordId order.
     ','line_number':130,'multiline':True]['text':'','line_number':137,'multiline':False]['text':' Saving and restoring state','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':'*
     * Prepares for state changes in underlying data in a way that allows the cursor's
     * current position to be restored.
     *
     * It is safe to call save multiple times in a row.
     * No other method (excluding destructor) may be called until successfully restored.
     ','line_number':141,'multiline':True]['text':'*
     * Recovers from potential state changes in underlying data.
     *
     * Returns false if it is invalid to continue using this Cursor. This usually means that
     * capped deletes have caught up to the position of this Cursor and continuing could
     * result in missed data. Note that Cursors, unlike iterators can continue to iterate past the
     * "end".
     *
     * If the former position no longer exists, but it is safe to continue iterating, the
     * following call to next() will return the next closest position in the direction of the
     * scan, if any.
     *
     * This handles restoring after either save() or SeekableRecordCursor::saveUnpositioned().
     *
     * 'tolerateCappedRepositioning' allows repositioning a capped cursor, which is useful for
     * range writes.
     ','line_number':150,'multiline':True]['text':'*
     * Detaches from the OperationContext. Releases storage-engine resources, unless
     * setSaveStorageCursorOnDetachFromOperationContext() has been set to true.
     ','line_number':169,'multiline':True]['text':'*
     * Reattaches to the OperationContext and reacquires any storage-engine state if necessary.
     *
     * It is only legal to call this in the "detached" state. On return, the cursor may still be a
     * "saved" state if there was a prior call to save(). In this case, callers must still call
     * restore() to use this object.
     ','line_number':175,'multiline':True]['text':'*
     * Toggles behavior on whether to give up the underlying storage cursor (and any record pointed
     * to by it) on detachFromOperationContext(). This supports the query layer retaining valid and
     * positioned cursors across commands.
     ','line_number':184,'multiline':True]['text':'*
 * Adds explicit seeking of records. This functionality is separated out from RecordCursor, because
 * some cursors are not required to support seeking. All storage engines must support detecting the
 * existence of Records.
 ','line_number':192,'multiline':True]['text':'*
     * Seeks to a Record with the provided id.
     *
     * If an exact match can't be found, boost::none will be returned and the resulting position
     * of the cursor is unspecified.
     ','line_number':199,'multiline':True]['text':'*
     * Positions this cursor near 'start' or an adjacent record if 'start' does not exist. If there
     * is not an exact match, the cursor is positioned on the directionally previous Record. If no
     * earlier record exists, the cursor is positioned on the directionally following record.
     * Returns boost::none if the RecordStore is empty.
     *
     * For forward cursors, returns the Record with the highest RecordId less than or equal to
     * 'start'. If no such record exists, positions on the next highest RecordId after 'start'.
     *
     * For reverse cursors, returns the Record with the lowest RecordId greater than or equal to
     * 'start'. If no such record exists, positions on the next lowest RecordId before 'start'.
     ','line_number':207,'multiline':True]['text':'*
     * Prepares for state changes in underlying data without necessarily saving the current
     * state.
     *
     * The cursor's position when restored is unspecified. Caller is expected to seek rather
     * than call next() following the restore.
     *
     * It is safe to call saveUnpositioned multiple times in a row.
     * No other method (excluding destructor) may be called until successfully restored.
     ','line_number':221,'multiline':True]['text':'*
 * Queries with the awaitData option use this notifier object to wait for more data to be
 * inserted into the capped collection.
 ','line_number':241,'multiline':True]['text':'*
     * Wakes up all threads waiting.
     ','line_number':247,'multiline':True]['text':'*
     * Waits until 'deadline', or until notifyAll() is called to indicate that new
     * data is available in the capped collection.
     *
     * NOTE: Waiting threads can be signaled by calling kill or notify* methods.
     ','line_number':252,'multiline':True]['text':'*
     * Returns the version for use as an additional wake condition when used above.
     ','line_number':260,'multiline':True]['text':'*
     * Cancels the notifier if the collection is dropped/invalidated, and wakes all waiting.
     ','line_number':265,'multiline':True]['text':'*
     * Returns true if no new insert notification will occur.
     ','line_number':270,'multiline':True]['text':' Signalled when a successful insert is made into a capped collection.','line_number':276,'multiline':False]['text':' Mutex used with '_notifier'. Protects access to '_version'.','line_number':279,'multiline':False]['text':' A counter, incremented on insertion of new data into the capped collection.','line_number':282,'multiline':False]['text':'','line_number':283,'multiline':False]['text':' The condition which '_cappedNewDataNotifier' is being notified of is an increment of this','line_number':284,'multiline':False]['text':' counter. Access to this counter is synchronized with '_mutex'.','line_number':285,'multiline':False]['text':' True once the notifier is dead.','line_number':288,'multiline':False]['text':'*
 * An abstraction used for storing documents in a collection or entries in an index.
 *
 * In storage engines implementing the KVEngine, record stores are also used for implementing
 * catalogs.
 *
 * Many methods take an OperationContext parameter. This contains the RecoveryUnit, with
 * all RecordStore specific transaction information, as well as the LockState. Methods that take
 * an OperationContext may throw a WriteConflictException.
 *
 * This class must be thread-safe. In addition, for storage engines implementing the KVEngine some
 * methods must be thread safe, see DurableCatalog.
 ','line_number':292,'multiline':True]['text':' META','line_number':313,'multiline':False]['text':' name of the RecordStore implementation','line_number':315,'multiline':False]['text':'*
     * Get the namespace this RecordStore is associated with.
     ','line_number':338,'multiline':True]['text':'*
     * The key format for this RecordStore's RecordIds.
     *
     * Clustered collections may use the String format, however most
     * RecordStores use Long. RecordStores with the String format require callers to provide
     * RecordIds and will not generate them automatically.
     ','line_number':343,'multiline':True]['text':'*
     * The dataSize is an approximation of the sum of the sizes (in bytes) of the
     * documents or entries in the recordStore.
     ','line_number':352,'multiline':True]['text':'*
     * Total number of records in the RecordStore. You may need to cache it, so this call
     * takes constant time, as it is called often.
     ','line_number':358,'multiline':True]['text':'*
     * Storage engines can manage oplog truncation internally as opposed to having higher layers
     * manage it for them.
     ','line_number':364,'multiline':True]['text':'*
     * Get a pointer to a capped insert notifier object. The caller can wait on this object
     * until it is notified of a new insert into the capped collection.
     *
     * It is invalid to call this method unless the owning collection is capped.
     ','line_number':372,'multiline':True]['text':'*
     * Uses the reference counter of the capped insert notifier shared pointer to decide whether
     * anyone is waiting in order to optimise notifications on a potentially hot path. It is
     * acceptable for this function to return 'true' even if there are no more waiters, but the
     * inverse is not allowed.
     ','line_number':382,'multiline':True]['text':'*
     * If the record store is capped and there are listeners waiting for notifications for capped
     * inserts, notifies them.
     ','line_number':390,'multiline':True]['text':'*
     * @param extraInfo - optional more debug info
     * @param level - optional, level of debug info to put in (higher is more)
     * @return total estimate size (in bytes) on stable storage
     ','line_number':396,'multiline':True]['text':'*
     * @return file bytes available for reuse
     * A return value of zero can mean either no bytes are available, or that the real value is
     * unknown.
     ','line_number':405,'multiline':True]['text':' CRUD related','line_number':414,'multiline':False]['text':'*
     * Get the RecordData at loc, which must exist.
     *
     * If unowned data is returned, it is only valid until either of these happens:
     *  - The record is modified
     *  - The snapshot from which it was obtained is abandoned
     *  - The lock on the collection is released
     *
     * In general, prefer findRecord or RecordCursor::seekExact since they can tell you if a record
     * has been removed.
     ','line_number':416,'multiline':True]['text':'*
     * @param out - If the record exists, the contents of this are set.
     * @return true iff there is a Record for loc
     *
     * If unowned data is returned, it is valid until the next modification of this Record or
     * the lock on this collection is released.
     *
     * In general prefer RecordCursor::seekExact since it can avoid copying data in more
     * storageEngines.
     ','line_number':435,'multiline':True]['text':' Unowned data expires when cursor goes out of scope.','line_number':451,'multiline':False]['text':'*
     * Inserts the specified records into this RecordStore by copying the passed-in record data and
     * updates 'inOutRecords' to contain the ids of the inserted records.
     ','line_number':458,'multiline':True]['text':'*
     * A thin wrapper around insertRecords() to simplify handling of single document inserts.
     ','line_number':466,'multiline':True]['text':' Record stores with the Long key format accept a null RecordId, as the storage engine will','line_number':473,'multiline':False]['text':' generate one.','line_number':474,'multiline':False]['text':'*
     * A thin wrapper around insertRecords() to simplify handling of single document inserts.
     * If RecordId is null, the storage engine will generate one and return it.
     ','line_number':479,'multiline':True]['text':'*
     * Updates the record with id 'recordId', replacing its contents with those described by
     * 'data' and 'len'.
     ','line_number':495,'multiline':True]['text':'*
     * @return Returns 'false' if this record store does not implement
     * 'updatewithDamages'. If this method returns false, 'updateWithDamages' must not be
     * called, and all updates must be routed through 'updateRecord' above. This allows the
     * update framework to avoid doing the work of damage tracking if the underlying record
     * store cannot utilize that information.
     ','line_number':504,'multiline':True]['text':'*
     * Updates the record positioned at 'loc' in-place using the deltas described by 'damages'. The
     * 'damages' vector describes contiguous ranges of 'damageSource' from which to copy and apply
     * byte-level changes to the data. Behavior is undefined for calling this on a non-existant loc.
     *
     * @return the updated version of the record. If unowned data is returned, then it is valid
     * until the next modification of this Record or the lock on the collection has been released.
     ','line_number':513,'multiline':True]['text':'*
     * Prints any storage engine provided metadata for the record with 'recordId'.
     *
     * If provided, saves any valid timestamps (startTs, startDurableTs, stopTs, stopDurableTs)
     * related to this record in 'recordTimestamps'.
     ','line_number':527,'multiline':True]['text':'*
     * Returns a new cursor over this record store.
     *
     * The cursor is logically positioned before the first (or last if !forward) Record in the
     * collection so that Record will be returned on the first call to next(). Implementations
     * are allowed to lazily seek to the first Record when next() is called rather than doing
     * it on construction.
     ','line_number':537,'multiline':True]['text':'*
     * Constructs a cursor over a record store that returns documents in a randomized order, and
     * allows storage engines to provide a more efficient way of random sampling of a record store
     * than MongoDB's default sampling methods, which is used when this method returns {}.
     *
     * This method may be implemented using a pseudo-random walk over B-trees or a similar approach.
     * Different cursors should return documents in a different order. Random cursors may return
     * the same document more than once and, as a result, may return more documents than exist in
     * the record store. Implementations should avoid obvious biases toward older, newer, larger
     * smaller or other specific classes of documents.
     ','line_number':548,'multiline':True]['text':' higher level','line_number':563,'multiline':False]['text':'*
     * Removes all Records.
     ','line_number':565,'multiline':True]['text':'*
     * Removes all Records in the range [minRecordId, maxRecordId] inclusive of both. The hint*
     * arguments serve as a hint to the record store of how much data will be truncated. This is
     * necessary for some implementations to avoid reading the data between the two RecordIds in
     * order to update numRecords and dataSize correctly. Implementations are free to ignore the
     * hints if they have a way of obtaining the correct values without the help of external
     * callers.
     ','line_number':570,'multiline':True]['text':'*
     * Truncate documents newer than the document at 'end' from the capped
     * collection.  The collection cannot be completely emptied using this
     * function.  An assertion will be thrown if that is attempted.
     * @param inclusive - Truncate 'end' as well iff true
     ','line_number':584,'multiline':True]['text':'*
     * does this RecordStore support the compact operation?
     *
     * If you return true, you must provide implementations of all compact methods.
     ','line_number':597,'multiline':True]['text':'*
     * If compact() supports online compaction.
     *
     * Only called if compactSupported() returns true.
     ','line_number':606,'multiline':True]['text':'*
     * Attempt to reduce the storage space used by this RecordStore. If the freeSpaceTargetMB is
     * provided, compaction will only proceed if the free storage space available is greater than
     * the provided value.
     *
     * Only called if compactSupported() returns true.
     ','line_number':615,'multiline':True]['text':'*
     * Performs record store specific validation to ensure consistency of underlying data
     * structures. If corruption is found, details of the errors will be in the results parameter.
     ','line_number':624,'multiline':True]['text':'*
     * @param scaleSize - amount by which to scale size metrics
     * Appends any numeric custom stats from the RecordStore or other unique stats, it should
     * avoid any expensive calls
     ','line_number':630,'multiline':True]['text':'*
     * @param scaleSize - amount by which to scale size metrics
     * Appends all custom stats from the RecordStore or other unique stats, it can be more
     * expensive than RecordStore::appendNumericCustomStats
     ','line_number':640,'multiline':True]['text':'*
     * When we write to an oplog, we call this so that that the storage engine can manage the
     * visibility of oplog entries to ensure they are ordered.
     *
     * Since this is called inside of a WriteUnitOfWork while holding a std::mutex, it is
     * illegal to acquire any LockManager locks inside of this function.
     *
     * If `orderedCommit` is true, the storage engine can assume the input `opTime` has become
     * visible in the oplog. Otherwise the storage engine must continue to maintain its own
     * visibility management. Calls with `orderedCommit` true will not be concurrent with calls of
     * `orderedCommit` false.
     ','line_number':651,'multiline':True]['text':'*
     * Waits for all writes that completed before this call to be visible to forward scans.
     * See the comment on RecordCursor for more details about the visibility rules.
     *
     * It is only legal to call this on an oplog. It is illegal to call this inside a
     * WriteUnitOfWork.
     ','line_number':667,'multiline':True]['text':'*
     * Returns the largest RecordId in the RecordStore, regardless of visibility rules. If the store
     * is empty, returns a null RecordId.
     *
     * May throw WriteConflictException in certain cache-stuck scenarios even if the operation isn't
     * part of a WriteUnitOfWork.
     ','line_number':676,'multiline':True]['text':'*
     * Reserve a range of contiguous RecordIds. Returns the first valid RecordId in the range. Must
     * only be called on a RecordStore with KeyFormat::Long.
     ','line_number':685,'multiline':True]['text':'*
     * Called after a repair operation is run with the recomputed numRecords and dataSize.
     ','line_number':693,'multiline':True]['text':'*
     * Storage engines can choose whether to support changing the oplog size online.
     ','line_number':700,'multiline':True]['text':'*
     * Returns false if the oplog was dropped while waiting for a deletion request.
     * This should only be called if StorageEngine::supportsOplogTruncateMarkers() is true.
     * Storage engines supporting oplog truncate markers must implement this function.
     ','line_number':708,'multiline':True]['text':'*
     * This should only be called if StorageEngine::supportsOplogTruncateMarkers() is true.
     * Storage engines supporting oplog truncate markers must implement this function.
     ','line_number':717,'multiline':True]['text':'*
     * This should only be called if StorageEngine::supportsOplogTruncateMarkers() is true.
     * Storage engines supporting oplog truncate markers must implement this function.
     * Populates `builder` with various statistics pertaining to oplog truncate markers and oplog
     * truncation.
     ','line_number':725,'multiline':True]['text':'*
     * If supported, this method returns the timestamp value for the latest storage engine committed
     * oplog document. Note that this method should not be called within a UnitOfWork.
     *
     * If there is an active transaction, that transaction is used and its snapshot determines
     * visibility. Otherwise, a new transaction will be created and destroyed to service this call.
     *
     * Unsupported RecordStores return the OplogOperationUnsupported error code.
     ','line_number':735,'multiline':True]['text':'*
     * If supported, this method returns the timestamp value for the earliest storage engine
     * committed oplog document.
     *
     * Unsupported RecordStores return the OplogOperationUnsupported error code.
     ','line_number':750,'multiline':True]['text':' Functions derived classes need to override to implement this interface. Any write needs to be','line_number':763,'multiline':False]['text':' first checked so we are not in read only mode in this base class and then redirected to the','line_number':764,'multiline':False]['text':' derived class if allowed to perform the write.','line_number':765,'multiline':False]['text':' namespace mongo','line_number':809,'multiline':False]