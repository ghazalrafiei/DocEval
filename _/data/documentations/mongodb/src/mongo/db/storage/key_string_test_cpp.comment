['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':32,'multiline':False]['text':' IWYU pragma: keep','line_number':51,'multiline':False]['text':' Validate size of the key in key_string::Builder.','line_number':82,'multiline':False]['text':' Validate size of the key in key_string::Value.','line_number':92,'multiline':False]['text':' Pick an arbitrary large number.','line_number':128,'multiline':False]['text':' Case 4: plus 1 signal byte + 4 size bytes.','line_number':134,'multiline':False]['text':' Case 2','line_number':139,'multiline':False]['text':' Case 3: plus 1 size byte.','line_number':142,'multiline':False]['text':' This test is derived from a fuzzer suite and triggers interesting code paths and recursion','line_number':150,'multiline':False]['text':' patterns, so including it here specifically.','line_number':151,'multiline':False]['text':' The typeBits should be all zeros, so numOfBitsUsedForType is set to 0 for','line_number':192,'multiline':False]['text':' passing the test although it technically uses 1 bit.','line_number':193,'multiline':False]['text':' The typeBits should be all zeros, so numOfBitsUsedForType is set to 0 for','line_number':206,'multiline':False]['text':' passing the test although it technically uses 2 bits.','line_number':207,'multiline':False]['text':' TypeBits should still be in short encoding format.','line_number':265,'multiline':False]['text':' Construct a KeyString with more than the limit of 32 elements in a compound index key. Encode','line_number':270,'multiline':False]['text':' 33 kBoolTrue ('o') values.','line_number':271,'multiline':False]['text':' Note that this KeyString encoding is legal, but it may not be legally stored in an index.','line_number':272,'multiline':False]['text':' No exceptions should be thrown.','line_number':279,'multiline':False]['text':' Construct a KeyString with 32 elements in a compound index key followed by an end byte.','line_number':286,'multiline':False]['text':' Encode 32 kBoolTrue ('o') values and an end byte, 0x4.','line_number':287,'multiline':False]['text':' No exceptions should be thrown.','line_number':294,'multiline':False]['text':' Construct a KeyString where \x3c defines the type kStringLike then embedded with null','line_number':301,'multiline':False]['text':' characters and followed by \x00.','line_number':302,'multiline':False]['text':' No exceptions should be thrown.','line_number':307,'multiline':False]['text':' Construct an illegal KeyString encoding with excessively nested BSON arrays '80' (P).','line_number':315,'multiline':False]['text':' Construct an illegal BSON object with excessive nesting.','line_number':323,'multiline':False]['text':' This BSON object should not be valid.','line_number':328,'multiline':False]['text':' Construct a KeyString from the invalid BSON, and confirm that it fails to convert back to','line_number':332,'multiline':False]['text':' BSON.','line_number':333,'multiline':False]['text':' just one test like this for utter sanity','line_number':394,'multiline':False]['text':' kNumericPositive1ByteInt','line_number':408,'multiline':False]['text':' (5 << 1) | 1','line_number':409,'multiline':False]['text':' fractional bytes of double','line_number':410,'multiline':False]['text':' kEnd','line_number':411,'multiline':False]['text':' kNumericPositive1ByteInt','line_number':412,'multiline':False]['text':' (5 << 1) | 1','line_number':413,'multiline':False]['text':' fractional bytes','line_number':414,'multiline':False]['text':' kEnd','line_number':415,'multiline':False]['text':' last byte (kEnd) doesn't get flipped','line_number':424,'multiline':False]['text':' Zeros','line_number':542,'multiline':False]['text':' Special numbers','line_number':549,'multiline':False]['text':' Decimal representations of whole double numbers','line_number':554,'multiline':False]['text':' -2**63','line_number':560,'multiline':False]['text':' 1.875 * 2**112','line_number':561,'multiline':False]['text':' Decimal representations of fractional double numbers','line_number':563,'multiline':False]['text':' Decimal representations of whole int64 non-double numbers','line_number':568,'multiline':False]['text':' 20!','line_number':569,'multiline':False]['text':' 2**53 + 1','line_number':570,'multiline':False]['text':' Decimals in int64_t range without decimal or integer representation','line_number':574,'multiline':False]['text':' Decimal representations of small double numbers','line_number':581,'multiline':False]['text':' -2**(-48)','line_number':584,'multiline':False]['text':' Decimal representations of small decimals not representable as double','line_number':588,'multiline':False]['text':' Large decimals','line_number':591,'multiline':False]['text':' -2**10000','line_number':594,'multiline':False]['text':' Tiny, tiny decimals','line_number':596,'multiline':False]['text':' 2**(-10000)','line_number':598,'multiline':False]['text':' Decimal inside sub-doc','line_number':602,'multiline':False]['text':' Test that KeyStringBuilder is releasable into a Value type that is comparable. Once','line_number':607,'multiline':False]['text':' released, it is reusable once reset.','line_number':608,'multiline':False]['text':' Test that Value is moveable.','line_number':618,'multiline':False]['text':' Test that Value is copyable.','line_number':623,'multiline':False]['text':' Test that KeyStringBuilder is reusable once reset.','line_number':636,'multiline':False]['text':' Test that KeyStringGetValueCopyTest creates a copy.','line_number':655,'multiline':False]['text':' Assert that a copy was actually made and they don't share a buffer.','line_number':662,'multiline':False]['text':' Test that appendBsonElement works.','line_number':670,'multiline':False]['text':' Test that ordering works.','line_number':708,'multiline':False]['text':' Confirm that the buffers are different, indicating that the data is stored inverted in the','line_number':718,'multiline':False]['text':' second.','line_number':719,'multiline':False]['text':' test that when passed in a Discriminator it gets added.','line_number':724,'multiline':False]['text':' Test that an illegally encoded double throws an error.','line_number':738,'multiline':False]['text':' kNumericPositive7ByteInt','line_number':740,'multiline':False]['text':' Encode a 1 bit at the lowest end to indicate that this number has a fractional part.','line_number':742,'multiline':False]['text':' Then add the value 1 << 53 left-shifted by 1. 1 << 53 is too large to have been encoded','line_number':743,'multiline':False]['text':' as a  double, and will cause the call to toBsonSafe to fail.','line_number':744,'multiline':False]['text':' ((1 << 53) << 1) + 1','line_number':745,'multiline':False]['text':' Encode a Decimal positive infinity in a V1 keystring.','line_number':758,'multiline':False]['text':' Construct V0 type bits that indicate a NumberDecimal has been encoded.','line_number':762,'multiline':False]['text':' The conversion to BSON will fail because Decimal positive infinity cannot be encoded with V0','line_number':766,'multiline':False]['text':' type bits.','line_number':767,'multiline':False]['text':' Tests that key_string::Builders do not use an excessive amount of memory for small key','line_number':775,'multiline':False]['text':' generation. These upper bounds were the calculated sizes of each type at the time this','line_number':776,'multiline':False]['text':' test was written.','line_number':777,'multiline':False]['text':' Use a small block size to ensure we do not use more. Additionally, the minimum allocation','line_number':785,'multiline':False]['text':' size is 64.','line_number':786,'multiline':False]['text':' Test the dynamic memory usage reported to the sorter.','line_number':796,'multiline':False]['text':' This is safe because we are operating on a copy of the value and it is not shared elsewhere.','line_number':811,'multiline':False]['text':' We should still be using the initially-allocated size.','line_number':813,'multiline':False]['text':' For values created with the pooledBuilder, it is invalid to call memUsageForSorter(). Instead','line_number':816,'multiline':False]['text':' we look at the mem usage of the builder itself.','line_number':817,'multiline':False]['text':' Intentially not released, but the data should be discarded correctly.','line_number':826,'multiline':False]['text':' Avoid negating signed integral minima','line_number':851,'multiline':False]['text':' These are used to test strings that include NUL bytes.','line_number':992,'multiline':False]['text':' Something that needs multiple bytes of typeBits','line_number':1054,'multiline':False]['text':' Something with exceptional typeBits for Decimal','line_number':1057,'multiline':False]['text':'','line_number':1064,'multiline':False]['text':' Interesting numeric cases','line_number':1065,'multiline':False]['text':'','line_number':1066,'multiline':False]['text':' All powers of two in this range can be represented exactly as doubles.','line_number':1101,'multiline':False]['text':' is dNum - 0.5 representable?','line_number':1116,'multiline':False]['text':' is dNum + 0.5 representable?','line_number':1123,'multiline':False]['text':' Numbers around +/- numeric_limits<long long>::max() which can't be represented','line_number':1153,'multiline':False]['text':' precisely as a double.','line_number':1154,'multiline':False]['text':' 2**63','line_number':1156,'multiline':False]['text':' 2**63 - epsilon','line_number':1157,'multiline':False]['text':' Numbers around numeric_limits<long long>::min() which can be represented precisely as','line_number':1171,'multiline':False]['text':' a double, but not as a positive long long.','line_number':1172,'multiline':False]['text':' -2**63 - epsilon','line_number':1174,'multiline':False]['text':' 2**63','line_number':1175,'multiline':False]['text':' -2**63 + epsilon','line_number':1176,'multiline':False]['text':' Numbers that are hard to round to between binary and decimal.','line_number':1185,'multiline':False]['text':' Decimals closest to the double representation of 0.1.','line_number':1188,'multiline':False]['text':' Decimals that failed at some point during testing.','line_number':1192,'multiline':False]['text':' Numbers close to numerical underflow/overflow for double.','line_number':1199,'multiline':False]['text':' Non-finite values. Note: can't roundtrip negative NaNs, so not testing here.','line_number':1213,'multiline':False]['text':' Tricky double precision number for binary/decimal conversion: very close to a decimal','line_number':1219,'multiline':False]['text':' Since key_string::Builders are compared using memcmp we can assume it provides a total','line_number':1231,'multiline':False]['text':' ordering','line_number':1232,'multiline':False]['text':' such','line_number':1233,'multiline':False]['text':' that there won't be cases where (a < b && b < c && !(a < c)). This test still needs to ensure','line_number':1234,'multiline':False]['text':' that it provides the *correct* total ordering.','line_number':1235,'multiline':False]['text':' We should be sorted...','line_number':1266,'multiline':False]['text':' Test the query encodings using kLess and kGreater','line_number':1274,'multiline':False]['text':' To be used by perf test for seeding, so that the entire test is repeatable in case of error.','line_number':1293,'multiline':False]['text':' Replace by the reported number to repeat test execution.','line_number':1295,'multiline':False]['text':' namespace','line_number':1316,'multiline':False]['text':' namespace','line_number':1324,'multiline':False]['text':' Test encoding / decoding of single RecordIds','line_number':1335,'multiline':False]['text':' namespace','line_number':1387,'multiline':False]['text':' kStringLike CType + StringData terminator + RecordId len','line_number':1391,'multiline':False]['text':' Max 1-byte encoded string size is 127B: 1B CType + ridStr + string terminator','line_number':1402,'multiline':False]['text':' kStringLike CType + StringData terminator + RecordId len','line_number':1414,'multiline':False]['text':' Min 2-byte encoded string size is 128B: 1B CType + ridStr + string terminator','line_number':1416,'multiline':False]['text':' 1 byte with continuation bit','line_number':1421,'multiline':False]['text':' 1 byte with continuation bit','line_number':1430,'multiline':False]['text':' Max 2-byte encoded string size is 16383B: 1B CType + ridStr + string terminator','line_number':1435,'multiline':False]['text':' 1 byte with continuation bit','line_number':1440,'multiline':False]['text':' kStringLike CType + StringData terminator + RecordId len','line_number':1447,'multiline':False]['text':' Min 3-byte encoded string size is 16384B: 1B CType + ridStr + string terminator','line_number':1449,'multiline':False]['text':' 2 bytes with continuation bit','line_number':1454,'multiline':False]['text':' Max 3-byte encoded string size is 2097151B: 1B CType + ridStr + string terminator','line_number':1459,'multiline':False]['text':' 2 bytes with continuation bit','line_number':1464,'multiline':False]['text':' kStringLike CType + StringData terminator + RecordId len','line_number':1471,'multiline':False]['text':' Min 4-byte encoded string size is 2097152B: 1B CType + ridStr + string terminator','line_number':1473,'multiline':False]['text':' 3 bytes with continuation bit','line_number':1478,'multiline':False]['text':' Support up to RecordId::kBigStrMaxSize','line_number':1483,'multiline':False]['text':' CType + string terminator ','line_number':1484,'multiline':True]['text':' 3 bytes with continuation bit','line_number':1488,'multiline':False]['text':' kStringLike CType + StringData terminator + RecordId len','line_number':1495,'multiline':False]['text':' kStringLike CType + string terminator + discriminator','line_number':1497,'multiline':False]['text':' 1 0x80 cont byte','line_number':1518,'multiline':False]['text':' Select only a small subset of elements, as the combination is quadratic.','line_number':1544,'multiline':False]['text':' We want to select two subsets independently, so all combinations will get tested eventually.','line_number':1545,'multiline':False]['text':' kMaxPermElements is the desired number of elements to pass to testPermutation.','line_number':1546,'multiline':False]['text':' double','line_number':1606,'multiline':False]['text':' TODO use hex floats to force distinct NaNs','line_number':1615,'multiline':False]['text':' Since we only output a single NaN, we can only do ROUNDTRIP testing for nan1.','line_number':1619,'multiline':False]['text':' Since we only output a single NaN, we can only do ROUNDTRIP testing for nan1.','line_number':1641,'multiline':False]['text':' Test encoding / decoding of single RecordIds','line_number':1662,'multiline':False]['text':' Test concatenating RecordIds like in a unique index.','line_number':1699,'multiline':False]['text':' uses all bytes','line_number':1701,'multiline':False]['text':' uses some extra bytes','line_number':1703,'multiline':False]['text':' uses no extra bytes','line_number':1705,'multiline':False]['text':' forward scan','line_number':1711,'multiline':False]['text':' kInt/kDouble needs two bits ','line_number':1744,'multiline':True]['text':' kInt uses 00 ','line_number':1750,'multiline':True]['text':' kDouble uses 10 ','line_number':1752,'multiline':True]['text':' Case 1&2','line_number':1763,'multiline':False]['text':' Case 2: Since we use kDouble, TypeBits="01010101" when n=1. The size','line_number':1764,'multiline':False]['text':' is thus 1.','line_number':1765,'multiline':False]['text':' Case 3','line_number':1768,'multiline':False]['text':' Case 4','line_number':1771,'multiline':False]['text':' Also test TypeBits::fromBuffer()','line_number':1778,'multiline':False]['text':' CType::kStringLike','line_number':1806,'multiline':False]['text':' Non-null terminated','line_number':1807,'multiline':False]['text':' CType::kNumericPositive1ByteInt','line_number':1815,'multiline':False]['text':' Encoded integer part, least significant bit indicates there's a fractional part.','line_number':1816,'multiline':False]['text':' Since the integer part is 1 byte, the next 7 bytes are expected to be the fractional','line_number':1817,'multiline':False]['text':' part and are needed to prevent the BufReader from overflowing.','line_number':1818,'multiline':False]['text':' Overwrite the 1st byte to 0, corrupting the exponent. This is meant to reproduce','line_number':1836,'multiline':False]['text':' SERVER-34767.','line_number':1837,'multiline':False]['text':' Select a random byte to change, except for the first byte as it will likely become an','line_number':1893,'multiline':False]['text':' invalid CType and not test anything interesting.','line_number':1894,'multiline':False]['text':' Ditto for the type bits buffer.','line_number':1899,'multiline':False]['text':' Build the new TypeBits.','line_number':1904,'multiline':False]['text':' The expectation is that the randomized buffer is likely an invalid','line_number':1911,'multiline':False]['text':' key_string::Builder,','line_number':1912,'multiline':False]['text':' however attempting to decode it should fail gracefully.','line_number':1913,'multiline':False]['text':' Retest with descending.','line_number':1916,'multiline':False]['text':' The expectation is that the randomized buffer is likely an invalid','line_number':1921,'multiline':False]['text':' key_string::Builder,','line_number':1922,'multiline':False]['text':' however attempting to decode it should fail gracefully.','line_number':1923,'multiline':False]['text':'*
 * Evaluates ROUNDTRIP on all items in Numbers a sufficient number of times to take at least
 * kMinPerfMicros microseconds. Logs the elapsed time per ROUNDTRIP evaluation.
 ','line_number':1933,'multiline':True]['text':' Ensure at least 16 iterations are done and at least 50 milliseconds is timed','line_number':1940,'multiline':False]['text':' Measure the number of loops','line_number':1942,'multiline':False]['text':' Assuming there are sufficient invariants in the to/from key_string::Builder','line_number':1947,'multiline':False]['text':' methods','line_number':1948,'multiline':False]['text':' that calls will not be optimized away.','line_number':1949,'multiline':False]['text':' namespace','line_number':1973,'multiline':False]['text':' Exponential distribution, so skewed towards smaller integers.','line_number':1976,'multiline':False]['text':' In addition to serve as a data ponit for performance, this test also generates many decimal','line_number':2071,'multiline':False]['text':' values close to binary floating point numbers, so edge cases around 15-digit approximations','line_number':2072,'multiline':False]['text':' get extra randomized coverage over time.','line_number':2073,'multiline':False]['text':' CType::kStringLike','line_number':2091,'multiline':False]['text':' Non-null terminated','line_number':2092,'multiline':False]['text':' The following tests run last because they take a very long time.','line_number':2098,'multiline':False]['text':' In general NaNs don't roundtrip as we only store a single NaN, see the NaNs','line_number':2117,'multiline':False]['text':' test.','line_number':2118,'multiline':False]['text':' Avoid negating signed integral minima','line_number':2174,'multiline':False]