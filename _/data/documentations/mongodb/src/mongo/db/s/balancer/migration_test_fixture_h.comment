['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Returns the mock targeter for the specified shard. Useful to use like so
     *
     *     shardTargeterMock(opCtx, shardId)->setFindHostReturnValue(shardHost);
     *
     * Then calls to RemoteCommandTargeterMock::findHost will return HostAndPort "shardHost" for
     * Shard "shardId".
     *
     * Scheduling a command requires a shard host target. The command will be caught by the mock
     * network, but sending the command requires finding the shard's host.
     ','line_number':70,'multiline':True]['text':'*
     * Setup the config.shards collection to contain the given shards.
     * Additionally set up dummy hosts for the targeted shards
     ','line_number':84,'multiline':True]['text':' Requests chunks to be relocated requires running commands on each shard to','line_number':91,'multiline':False]['text':' get shard statistics. Set up dummy hosts for the source shards.','line_number':92,'multiline':False]['text':'*
     * Inserts a document into the config.collections collection to indicate that "collName" is
     * sharded with version "version". The shard key pattern defaults to "_id".
     ','line_number':99,'multiline':True]['text':'*
     * Inserts a document into the config.chunks collection so that the chunk defined by the
     * parameters exists. Returns a ChunkType defined by the parameters.
     ','line_number':109,'multiline':True]['text':'*
     * Inserts a document into the config.tags collection so that the zone defined by the
     * parameters exists.
     ','line_number':119,'multiline':True]['text':'*
     * Removes all document in the config.tags for the collection.
     ','line_number':125,'multiline':True]['text':'*
     * Removes all document in the config.chunks for the collection.
     ','line_number':130,'multiline':True]['text':'*
     * Returns the ShardId by its HostAndPort
     ','line_number':135,'multiline':True]['text':' Random static initialization order can result in X constructor running before Y constructor','line_number':140,'multiline':False]['text':' if X and Y are defined in different source files. Defining variables here to enforce order.','line_number':141,'multiline':False]['text':' namespace mongo','line_number':164,'multiline':False]