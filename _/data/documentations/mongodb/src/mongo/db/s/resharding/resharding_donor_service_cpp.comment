['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Do a no-op write and use the OpTime as the minFetchTimestamp','line_number':138,'multiline':False]['text':'*
 * Returns whether it is possible for the donor to be in 'state' when resharding will indefinitely
 * abort.
 ','line_number':167,'multiline':True]['text':' Regardless of whether resharding will abort or commit, the donor will eventually reach state','line_number':172,'multiline':False]['text':' kDone.','line_number':173,'multiline':False]['text':' Additionally, if the donor is in state kError, it is guaranteed that the coordinator will','line_number':174,'multiline':False]['text':' eventually begin the abort process.','line_number':175,'multiline':False]['text':'*
 * Fulfills the promise if it is not already. Otherwise, does nothing.
 ','line_number':179,'multiline':True]['text':' upsert ','line_number':219,'multiline':True]['text':' scheduleAsyncRefresh ','line_number':239,'multiline':True]['text':' namespace','line_number':243,'multiline':False]['text':' It is illegal to transition into kError if the state is in or has already','line_number':341,'multiline':False]['text':' surpassed kBlockingWrites.','line_number':342,'multiline':False]['text':' Intentionally swallow the error - by transitioning to kError, the donor','line_number':346,'multiline':False]['text':' effectively recovers from encountering the error and should continue','line_number':347,'multiline':False]['text':' running in the future chain.','line_number':348,'multiline':False]['text':' The donor is done with all local transitions until the coordinator makes its','line_number':366,'multiline':False]['text':' decision.','line_number':367,'multiline':False]['text':' If a failover occured after the donor transitioned to done locally, but before','line_number':415,'multiline':False]['text':' it notified the coordinator, it will already be in state done here. Otherwise,','line_number':416,'multiline':False]['text':' it must be in blocking-writes before transitioning to done.','line_number':417,'multiline':False]['text':' Unblock the RecoverRefreshThread as quickly as possible when aborting.','line_number':424,'multiline':False]['text':' If aborted, the donor must be allowed to transition to done from any state.','line_number':434,'multiline':False]['text':' Destroy metrics early so it's lifetime will not be tied to the lifetime of this state','line_number':478,'multiline':False]['text':' machine. This is because we have future callbacks copy shared pointers to this state machine','line_number':479,'multiline':False]['text':' that causes it to live longer than expected and potentially overlap with a newer instance','line_number':480,'multiline':False]['text':' when stepping up.','line_number':481,'multiline':False]['text':' If the stepdownToken was triggered, it takes priority in order to make sure that','line_number':485,'multiline':False]['text':' the promise is set with an error that can be retried with. If it ran into an','line_number':486,'multiline':False]['text':' unrecoverable error, it would have fasserted earlier.','line_number':487,'multiline':False]['text':' Propagate any errors from the donor stepping down.','line_number':521,'multiline':False]['text':' Propagate any errors from the donor failing to notify the coordinator.','line_number':526,'multiline':False]['text':' The shared_ptr stored in the PrimaryOnlyService's map for the ReshardingDonorService','line_number':545,'multiline':False]['text':' Instance is removed when the donor state document tied to the instance is deleted. It is','line_number':546,'multiline':False]['text':' necessary to use shared_from_this() to extend the lifetime so the all earlier code can','line_number':547,'multiline':False]['text':' safely finish executing.','line_number':548,'multiline':False]['text':' On stepdown or shutdown, the _scopedExecutor may have already been shut down.','line_number':552,'multiline':False]['text':' Everything in this function runs on the instance's cleanup executor, and will','line_number':553,'multiline':False]['text':' execute regardless of any work on _scopedExecutor ever running.','line_number':554,'multiline':False]['text':' The invariants won't hold if an unrecoverable error is encountered before the donor','line_number':612,'multiline':False]['text':' makes enough progress to transition to kDonatingInitialData and then a failover','line_number':613,'multiline':False]['text':' occurs.','line_number':614,'multiline':False]['text':' Recipient shards expect to read from the donor shard's existing sharded collection and the','line_number':639,'multiline':False]['text':' config.cache.chunks collection of the temporary resharding collection using','line_number':640,'multiline':False]['text':' {atClusterTime: <fetchTimestamp>}. Refreshing the temporary resharding collection on the','line_number':641,'multiline':False]['text':' donor shards causes them to create the config.cache.chunks collection. Without this refresh,','line_number':642,'multiline':False]['text':' the {atClusterTime: <fetchTimestamp>} read on the config.cache.chunks namespace would fail','line_number':643,'multiline':False]['text':' with a SnapshotUnavailable error response.','line_number':644,'multiline':False]['text':' Allow bypassing user write blocking. The check has already been performed on the','line_number':873,'multiline':False]['text':' db-primary shard's ReshardCollectionCoordinator.','line_number':874,'multiline':False]['text':' Allow bypassing user write blocking. The check has already been performed on the','line_number':879,'multiline':False]['text':' db-primary shard's ReshardCollectionCoordinator.','line_number':880,'multiline':False]['text':' For logging purposes.','line_number':904,'multiline':False]['text':'*
 * Returns a query filter of the form
 * {
 *     _id: <reshardingUUID>,
 *     donorShards: {$elemMatch: {
 *         id: <this donor's ShardId>,
 *         "mutableState.state: {$in: [ <list of valid current states> ]},
 *     }},
 * }
 ','line_number':938,'multiline':True]['text':' The donor only updates the coordinator when it transitions to states which the coordinator','line_number':950,'multiline':False]['text':' depends on for its own transitions. The table maps the donor states which could be updated on','line_number':951,'multiline':False]['text':' the coordinator to the only states the donor could have already persisted to the current','line_number':952,'multiline':False]['text':' coordinator document in order for its transition to the newState to be valid.','line_number':953,'multiline':False]['text':' The network isn't perfectly reliable so it is possible for update commands sent by','line_number':970,'multiline':False]['text':' _updateCoordinator() to be received out of order by the coordinator. To overcome this','line_number':971,'multiline':False]['text':' behavior, the donor shard includes the list of valid current states as part of the','line_number':972,'multiline':False]['text':' update to transition to the next state. This way, the update from a delayed message','line_number':973,'multiline':False]['text':' won't match the document if it or any later state transitions have already occurred.','line_number':974,'multiline':False]['text':' justOne ','line_number':1111,'multiline':True]['text':' onReshardingFieldsChanges() missed canceling _abortSource because _initAbortSource()','line_number':1126,'multiline':False]['text':' hadn't been called yet. We used an error status stored in','line_number':1127,'multiline':False]['text':' _coordinatorHasDecisionPersisted as an indication that an abort had been received.','line_number':1128,'multiline':False]['text':' Canceling _abortSource immediately allows callers to use the returned abortToken as a','line_number':1129,'multiline':False]['text':' definitive means of checking whether the operation has been aborted.','line_number':1130,'multiline':False]['text':' run() hasn't been called, notify the operation should be aborted by setting an','line_number':1145,'multiline':False]['text':' error. Abort can be retried, so only set error if future is not ready.','line_number':1146,'multiline':False]['text':' namespace mongo','line_number':1161,'multiline':False]