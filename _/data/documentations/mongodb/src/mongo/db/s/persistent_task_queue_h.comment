['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' A BlockingTaskQueue is a FIFO container for elements that implements our IDL serialization','line_number':64,'multiline':False]['text':' interface. The concurrency model that is supported is multiple producer/single-consumer. This is','line_number':65,'multiline':False]['text':' because of the relationship between the peek and pop calls.','line_number':66,'multiline':False]['text':' Enqueue the passed in element to the end of the queue and return a unique id that','line_number':79,'multiline':False]['text':' represents this item.','line_number':80,'multiline':False]['text':' Remove the first element from the queue. This can only be called after a','line_number':83,'multiline':False]['text':' successful call to peek().','line_number':84,'multiline':False]['text':' Returns the first element of the queue. It will block if the queue is empty. It','line_number':87,'multiline':False]['text':' will only be unblocked by a call to push or a call to interrupt.','line_number':88,'multiline':False]['text':' This will mark the queue as closed. Any currently blocked peek() operation will','line_number':91,'multiline':False]['text':' be unblocked and will throw an exception indicating that it was closed. Any','line_number':92,'multiline':False]['text':' subsequent calls to push, pop or peek will throw an Interrupted exception.','line_number':93,'multiline':False]['text':' PersistentTaskQueue is an implementation of the BlockingTaskQueue interface that supports the','line_number':100,'multiline':False]['text':' persistence of its internal storage making it durable across instantiations.','line_number':101,'multiline':False]['text':' namespace mongo','line_number':261,'multiline':False]