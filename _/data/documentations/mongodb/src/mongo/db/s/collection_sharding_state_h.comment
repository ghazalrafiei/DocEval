['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Each shard node process (primary or secondary) has one instance of this object for each
 * collection residing on that shard. It sits on the second level of the hierarchy of the Shard Role
 * runtime-authoritative caches (along with DatabaseShardingState) and represents the shard's
 * knowledge of that collection's shard version and the set of chunks that it owns, as well as
 * functions for tracking this state.
 *
 * This is the only interface that non-sharding consumers should be interfacing with.
 *
 * On shard servers, the implementation used is CollectionShardingRuntime.
 *
 * On embedded or non-shard servers, the implementation used is CollectionShardingStateStandalone,
 * which is a mostly empty implementation.
 *
 * The CollectionShardingStateFactory class below is used to instantiate the correct subclass of
 * CollectionShardingState at runtime.
 *
 * SYNCHRONISATION: In order to obtain an instance of this object, the caller must have some lock on
 * the respective collection. Different functions require different lock levels though, so be sure
 * to check the function-level comments for details.
 ','line_number':51,'multiline':True]['text':'*
     * Obtains the sharding state for the specified collection, along with a resource lock
     * protecting it from concurrent modifications, which will be held util the object goes out of
     * scope.
     ','line_number':80,'multiline':True]['text':' Constructor without the ResourceLock.','line_number':104,'multiline':False]['text':' Important: Only for use in non-shard servers!','line_number':105,'multiline':False]['text':'*
     * Returns the names of the collections that have a CollectionShardingState.
     ','line_number':119,'multiline':True]['text':'*
     * Reports all collections which have filtering information associated.
     ','line_number':124,'multiline':True]['text':'*
     * Returns the namespace to which this CSS corresponds.
     ','line_number':129,'multiline':True]['text':'*
     * If the shard currently doesn't know whether the collection is sharded or not, it will throw a
     * StaleConfig error.
     *
     * If the request doesn't have a shard version all collections will be treated as UNSHARDED.
     *
     * The returned object *is not safe* to access after the collection lock has been dropped.
     ','line_number':134,'multiline':True]['text':'*
     * This method must be called with an OperationShardingState, which specifies an expected shard
     * version for the collection and it will invariant otherwise.
     *
     * If the shard currently doesn't know whether the collection is sharded or not, or if the
     * expected shard version doesn't match with the one in the OperationShardingState, it will
     * throw a StaleConfig error.
     *
     * If the operation context contains an 'atClusterTime', the returned filtering object will be
     * tied to a specific point in time. Otherwise, it will reference the latest cluster time
     * available.
     *
     * If 'kDisallowOrphanCleanup' is passed as 'OrphanCleanupPolicy', the range deleter won't
     * delete any orphan chunk associated with this ScopedCollectionFilter until the object is
     * destroyed. The intended users of this mode are read operations, which need to yield the
     * collection lock, but still perform filtering.
     *
     * The 'supportNonVersionedOperations' parameter states whether this function should consider
     * operations that don't have a shard version.
     * If the request doesn't have a shard version:
     *    - this function will invariant if !supportNonVersionedOperations (default value)
     *    - the collection will be treated as UNSHARDED otherwise.
     *
     * Use 'getCollectionDescription' for other cases, like obtaining information about
     * sharding-related properties of the collection are necessary that won't change under
     * collection IX/IS lock (e.g., isSharded or the shard key).
     *
     * The returned object *is safe* to access even after the collection lock has been dropped.
     ','line_number':147,'multiline':True]['text':'*
     * Gets the shard's index version.
     ','line_number':187,'multiline':True]['text':'*
     * Gets the shard's index cache.
     *
     ','line_number':193,'multiline':True]['text':'*
     * Checks whether the shard version in the operation context is compatible with the shard
     * version of the collection and if not, throws StaleConfig error populated with the received
     * and wanted versions.
     *
     * If the request is not versioned all collections will be treated as UNSHARDED.
     ','line_number':200,'multiline':True]['text':'*
     * Appends information about the shard version of the collection.
     ','line_number':212,'multiline':True]['text':'*
 * Singleton factory to instantiate CollectionShardingState objects specific to the type of instance
 * which is running.
 ','line_number':218,'multiline':True]['text':'*
     * Must be called prior to destruction to wait for any ongoing work to complete.
     ','line_number':233,'multiline':True]['text':'*
     * Called by the CollectionShardingState::acquire method once per newly cached namespace. It is
     * invoked under a mutex and must not acquire any locks or do blocking work.
     *
     * Implementations must be thread-safe when called from multiple threads.
     ','line_number':238,'multiline':True]['text':' The service context which owns this factory','line_number':250,'multiline':False]['text':' namespace mongo','line_number':254,'multiline':False]