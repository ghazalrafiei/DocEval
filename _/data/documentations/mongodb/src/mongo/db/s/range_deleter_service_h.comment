['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
     * In memory representation of registered range deletion tasks. To each non-pending range
     * deletion task corresponds a registered task on the service.
     ','line_number':77,'multiline':True]['text':' Marked ready once the range deletion has been fully processed','line_number':112,'multiline':False]['text':'
     * Internal comparator to sort ranges in _rangeDeletionTasks's sets.
     *
     * NB: it ONLY makes sense to use this on ranges that are comparable, meaning
     * the ones based on the same key pattern (aka the ones belonging to the same
     * sharded collection).
     ','line_number':118,'multiline':True]['text':'
     * Class enclosing a thread continuously processing "ready" range deletions, meaning tasks
     * that are allowed to be processed (already drained ongoing queries and already waited for
     * `orphanCleanupDelaySecs`).
     ','line_number':132,'multiline':True]['text':'
         * Interrupt ongoing range deletions
         ','line_number':142,'multiline':True]['text':'
         * Schedule a range deletion at the end of the queue
         ','line_number':147,'multiline':True]['text':'
         * Return true if this processor have been shutted down
         ','line_number':153,'multiline':True]['text':'
         * Remove a range deletion from the head of the queue. Supposed to be called only once a
         * range deletion successfully finishes.
         ','line_number':158,'multiline':True]['text':'
         * Code executed by the internal thread
         ','line_number':164,'multiline':True]['text':'
         * Condition variable notified when:
         * - The component has been initialized (the operation context has been instantiated)
         * - The instance is shutting down (the operation context has been marked killed)
         * - A new range deletion is scheduled (the queue size has increased by one)
         ','line_number':176,'multiline':True]['text':' Queue containing scheduled range deletions ','line_number':184,'multiline':True]['text':' Pointer to the (one and only) operation context used by the thread ','line_number':187,'multiline':True]['text':' Thread consuming the range deletions queue ','line_number':190,'multiline':True]['text':' Keeping track of per-collection registered range deletion tasks','line_number':194,'multiline':False]['text':' Mono-threaded executor processing range deletion tasks','line_number':198,'multiline':False]['text':' Future markes as ready when the state changes to "up"','line_number':205,'multiline':False]['text':' Operation context used for initialization','line_number':207,'multiline':False]['text':' Acquire mutex only if service is up (for "user" operation) ','line_number':210,'multiline':True]['text':' Unconditionally acquire mutex (for internal operations) ','line_number':217,'multiline':True]['text':' Protecting the access to all class members (DO NOT USE DIRECTLY: rely on','line_number':223,'multiline':False]['text':' `_acquireMutexUnconditionally` and `_acquireMutexFailIfServiceNotUp`)','line_number':224,'multiline':False]['text':'
     * Register a task on the range deleter service.
     * Returns a future that will be marked ready once the range deletion will be completed.
     *
     * In case of trying to register an already existing task, the original future will be returned.
     *
     * A task can be registered only if the service is up (except for tasks resubmitted on step-up).
     *
     * When a task is registered as `pending`, it can be unblocked by calling again the same method
     * with `pending=false`.
     ','line_number':228,'multiline':True]['text':'
     * Deregister a task from the range deleter service.
     ','line_number':245,'multiline':True]['text':'
     * Returns the number of registered range deletion tasks for a collection
     ','line_number':250,'multiline':True]['text':'
     * Returns a future marked as ready when all overlapping range deletion tasks complete.
     *
     * NB: in case an overlapping range deletion task is registered AFTER invoking this method,
     * it will not be taken into account. Handling this scenario is responsibility of the caller.
     * ','line_number':255,'multiline':True]['text':' ReplicaSetAwareServiceShardSvr implemented methods ','line_number':264,'multiline':True]['text':'
     * Returns the RangeDeleterService state with the following schema:
     *     {collectionUUIDA: [{min: x, max: y}, {min: w, max: z}....], collectionUUIDB: ......}
     ','line_number':275,'multiline':True]['text':'
     * Returns the total number of range deletion tasks registered on the service.
     ','line_number':281,'multiline':True]['text':' Returns a shared semi-future marked as ready once the service is initialized ','line_number':286,'multiline':True]['text':' Join all threads and executor and reset the in memory state of the service
     * Used for onStartUpBegin and on onShutdown
     ','line_number':294,'multiline':True]['text':' Asynchronously register range deletions on the service. To be called on on step-up ','line_number':299,'multiline':True]['text':' Called by shutdown/stepdown hooks to interrupt the service ','line_number':302,'multiline':True]['text':' ReplicaSetAwareServiceShardSvr "empty implemented" methods ','line_number':305,'multiline':True]['text':'*
 * Scoped lock to synchronize with the execution of range deletions.
 * The range-deleter acquires a scoped lock in IX mode while orphans are being deleted.
 * As long as this scoped lock is acquired in MODE_X, no range deletion will be running.
 ','line_number':312,'multiline':True]['text':' namespace mongo','line_number':327,'multiline':False]