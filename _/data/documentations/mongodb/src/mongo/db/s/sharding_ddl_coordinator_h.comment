['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Whether this coordinator is allowed to start when user write blocking is enabled, even if the
     * writeBlockingBypass flag is not set. Coordinators that don't affect user data shall always be
     * allowed to run even when user write blocking is enabled.
     ','line_number':92,'multiline':True]['text':'
     * Returns a future that will be completed when the construction of this coordinator instance
     * is completed.
     *
     * In particular the returned future will be ready only after this coordinator succesfully
     * aquires the required locks.
     ','line_number':101,'multiline':True]['text':'
     * Returns a future that will be ready when all the work associated with this coordinator
     * isntances will be completed.
     *
     * In particular the returned future will be ready after this coordinator will succesfully
     * release all the aquired locks.
     ','line_number':112,'multiline':True]['text':'*
     * Returns a set of basic coordinator attributes to be used for logging.
     ','line_number':155,'multiline':True]['text':'*
     * Returns the set of attributes to be used for coordinator logging. Implementations must be
     * sure to return a DynamicAttributes object that starts with the attributes returned by
     * getBasicCoordinatorAttrs().
     ','line_number':160,'multiline':True]['text':'
     * Performs a noop write on all shards and the configsvr using the sessionId and txnNumber
     * specified in 'osi'.
     ','line_number':168,'multiline':True]['text':'
     * Specify if the coordinator must indefinitely be retried in case of exceptions. It is always
     * expected for a coordinator to make progress after performing intermediate operations that
     * can't be rollbacked.
     ','line_number':177,'multiline':True]['text':'
     * Specify if the given error will be retried by the ddl coordinator infrastructure.
     ','line_number':186,'multiline':True]['text':' True only when executing the coordinator for the first time (meaning it's not a','line_number':202,'multiline':False]['text':' retry after a retryable error nor a recovered instance from a previous primary)','line_number':203,'multiline':False]['text':' A Locker object works attached to an opCtx and it's destroyed once the opCtx gets out of','line_number':245,'multiline':False]['text':' scope. However, we must keep alive a unique Locker object during the whole','line_number':246,'multiline':False]['text':' ShardingDDLCoordinator life to preserve the lock state among all the executor tasks.','line_number':247,'multiline':False]['text':'
           * Force a deserialisation + serialisation of the initialStateDoc to ensure that
           * _initialState is a full deep copy of the received parameter.
           ','line_number':271,'multiline':True]['text':' Append static info','line_number':294,'multiline':False]['text':' Append dynamic fields from the state doc','line_number':303,'multiline':False]['text':' Bucket namespace is only present in case the collection is a sharded timeseries','line_number':307,'multiline':False]['text':' Create command description','line_number':314,'multiline':False]['text':' Do not execute this phase if we already reached a subsequent one.','line_number':353,'multiline':False]['text':' Persist the new phase if this is the first time we are executing it.','line_number':357,'multiline':False]['text':' A series of step-up and step-down events can cause a node to try and insert the','line_number':414,'multiline':False]['text':' document when it has already been persisted locally, but we must still wait for','line_number':415,'multiline':False]['text':' majority commit.','line_number':416,'multiline':False]['text':'*
     * Advances and persists the `txnNumber` to ensure causality between requests, then returns the
     * updated operation session information (OSI).
     ','line_number':444,'multiline':True]['text':'*
     * Persists the abort reason and throws it as an exception. This causes the coordinator to fail,
     * and triggers the cleanup future chain since there is a the persisted reason.
     ','line_number':459,'multiline':True]['text':' lazily acquire Logical Session ID and a txn number','line_number':485,'multiline':False]['text':' namespace mongo','line_number':525,'multiline':False]