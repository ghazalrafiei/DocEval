['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * State machine, which implements the two-phase commit protocol for a specific transaction,
 * identified by lsid + txnNumber + txnRetryCounter.
 *
 * The lifetime of a coordinator starts with a construction and ends with the `onCompletion()`
 * future getting signaled. It is illegal to destroy a coordinator without waiting for
 * `onCompletion()`.
 ','line_number':62,'multiline':True]['text':'*
     * The two-phase commit steps.
     ','line_number':75,'multiline':True]['text':'*
     * Instantiates a new TransactionCoordinator for the specified lsid + txnNumber +
     * txnRetryCounter and gives it a 'scheduler' to use for any asynchronous tasks it spawns.
     *
     * If the 'coordinateCommitDeadline' parameter is specified, a timed task will be scheduled to
     * cause the coordinator to be put in a cancelled state, if runCommit is not eventually
     * received.
     ','line_number':90,'multiline':True]['text':'*
     * The first time this is called, it asynchronously begins the two-phase commit process for the
     * transaction that this coordinator is responsible for.
     *
     * Subsequent calls will not re-run the commit process.
     ','line_number':107,'multiline':True]['text':'*
     * To be used to continue coordinating a transaction on step up.
     ','line_number':115,'multiline':True]['text':'*
     * Gets a Future that will contain the decision that the coordinator reaches. Note that this
     * will never be signaled unless runCommit has been called.
     ','line_number':120,'multiline':True]['text':'*
     * Gets a Future that will contain the decision that the coordinator reaches. Note that this
     * will never be signaled unless runCommit has been called.
     ','line_number':126,'multiline':True]['text':'*
     * Returns a future which can be listened on for when all the asynchronous activity spawned by
     * this coordinator has completed. It will always eventually be set and once set it is safe to
     * dispose of the TransactionCoordinator object.
     ','line_number':132,'multiline':True]['text':'*
     * If runCommit has not yet been called, this will transition this coordinator object to
     * the 'done' state, effectively making it impossible for two-phase commit to be run for this
     * coordinator.
     *
     * Called when a transaction with a higher transaction number is received on this session or
     * when the transaction coordinator service is shutting down.
     ','line_number':139,'multiline':True]['text':'*
     * Returns the TransactionCoordinatorMetricsObserver for this TransactionCoordinator.
     ','line_number':153,'multiline':True]['text':'*
     * Helper for handling errors that occur during either phase of commit coordination.
     ','line_number':170,'multiline':True]['text':'*
     * Logs the diagnostic string for a commit coordination.
     ','line_number':175,'multiline':True]['text':' Shortcut to the service context under which this coordinator runs','line_number':180,'multiline':False]['text':' The lsid + txnNumber + txnRetryCounter that this coordinator is coordinating.','line_number':183,'multiline':False]['text':' Scheduler and context wrapping all asynchronous work dispatched by this coordinator','line_number':187,'multiline':False]['text':' Scheduler used for the persist participants + prepare part of the 2PC sequence and','line_number':190,'multiline':False]['text':' interrupted separately from the rest of the chain in order to allow the clean-up tasks','line_number':191,'multiline':False]['text':' (running on _scheduler to still be able to execute).','line_number':192,'multiline':False]['text':' Protects the state below','line_number':195,'multiline':False]['text':' Tracks which step of the 2PC coordination is currently (or was most recently) executing','line_number':198,'multiline':False]['text':' Promise/future pair which will be signaled when the coordinator has completed','line_number':201,'multiline':False]['text':' The state below gets populated sequentially as the coordinator advances through the 2 phase','line_number':205,'multiline':False]['text':' commit stages. Each of these fields is set only once for the lifetime of a coordinator and','line_number':206,'multiline':False]['text':' after that never changes.','line_number':207,'multiline':False]['text':'','line_number':208,'multiline':False]['text':' If the coordinator is canceled before commit is requested, none of these fiends will be set','line_number':209,'multiline':False]['text':' Set when the coordinator has been asked to coordinate commit','line_number':211,'multiline':False]['text':' Set when the coordinator has heard back from all the participants and reached a decision, but','line_number':215,'multiline':False]['text':' hasn't yet persisted it','line_number':216,'multiline':False]['text':' Set when the coordinator has heard back from all the participants and reached a commit','line_number':219,'multiline':False]['text':' decision.','line_number':220,'multiline':False]['text':' Set when the coordinator has durably persisted `_decision` to the `config.coordinators`','line_number':223,'multiline':False]['text':' collection','line_number':224,'multiline':False]['text':' Set when the coordinator has received acks from all participants that they have successfully','line_number':228,'multiline':False]['text':' committed or aborted the transaction..','line_number':229,'multiline':False]['text':' Set when the coordinator has finished all work and the object can be deleted.','line_number':232,'multiline':False]['text':' Store as unique_ptr to avoid a circular dependency between the TransactionCoordinator and','line_number':235,'multiline':False]['text':' the TransactionCoordinatorMetricsObserver.','line_number':236,'multiline':False]['text':' The deadline for the TransactionCoordinator to reach a decision','line_number':239,'multiline':False]['text':' The cancellation token for WaitForMajority.','line_number':242,'multiline':False]['text':' namespace mongo','line_number':246,'multiline':False]