['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Fulfills the promise if it isn't already fulfilled. Does nothing otherwise.
 *
 * This function is not thread-safe and must not be called concurrently with the promise being
 * fulfilled by another thread.
 ','line_number':79,'multiline':True]['text':'*
 * Fulfills the promise with an error if it isn't already fulfilled. Does nothing otherwise.
 *
 * This function is not thread-safe and must not be called concurrently with the promise being
 * fulfilled by another thread.
 ','line_number':91,'multiline':True]['text':' namespace','line_number':103,'multiline':False]['text':' The recipient fetches oplog entries from the donor starting from the largest _id','line_number':157,'multiline':False]['text':' value in the oplog buffer. Otherwise, it starts at minFetchTimestamp, which','line_number':158,'multiline':False]['text':' corresponds to {clusterTime: minFetchTimestamp, ts: minFetchTimestamp} as a resume','line_number':159,'multiline':False]['text':' token value.','line_number':160,'multiline':False]['text':' We may transiently use 2 threads per reader while passing things around within the task','line_number':191,'multiline':False]['text':' executor.  Each writer uses a dedicated thread, plus 1 thread for waiting on the rest.','line_number':192,'multiline':False]['text':' The recipient applies oplog entries from the donor starting from the progress value','line_number':247,'multiline':False]['text':' in progress_applier. Otherwise, it starts at minFetchTimestamp, which corresponds to','line_number':248,'multiline':False]['text':' {clusterTime: minFetchTimestamp, ts: minFetchTimestamp} as a resume token value.','line_number':249,'multiline':False]['text':' Calling _runOplogAppliers() won't actually immediately start performing oplog application.','line_number':360,'multiline':False]['text':' Only after the _startOplogApplication promise is fulfilled will oplog application begin.','line_number':361,'multiline':False]['text':' We must additionally wait for fulfillCloningDoneFuture to become ready to ensure their','line_number':365,'multiline':False]['text':' corresponding promises aren't being fulfilled while the .onCompletion() is running.','line_number':366,'multiline':False]['text':' Fulfilling the _strictlyConsistent promise must be the very last thing in the future','line_number':382,'multiline':False]['text':' chain because RecipientStateMachine, along with its ReshardingDataReplication member,','line_number':383,'multiline':False]['text':' may be destructed immediately afterwards.','line_number':384,'multiline':False]['text':' ReshardingTxnCloners must complete before the recipient transitions to kApplying to avoid','line_number':433,'multiline':False]['text':' errors caused by donor shards unpinning their minFetchTimestamp.','line_number':434,'multiline':False]['text':' We must wait for the RecipientStateMachine to transition to kApplying before starting to','line_number':462,'multiline':False]['text':' apply any oplog entries.','line_number':463,'multiline':False]['text':' Use the same collation for the stash collections as the temporary resharding collection','line_number':498,'multiline':False]['text':' (which is also the same as the collation for the collection being resharded).','line_number':499,'multiline':False]['text':' namespace mongo','line_number':554,'multiline':False]