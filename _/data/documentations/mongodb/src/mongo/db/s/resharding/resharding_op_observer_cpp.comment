['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' A user can manually create a 'db.system.resharding.' collection that isn't guaranteed to be','line_number':109,'multiline':False]['text':' sharded outside of running reshardCollection.','line_number':110,'multiline':False]['text':' We recalculate the pin by looking at all documents inside the resharding donor','line_number':123,'multiline':False]['text':' collection. The caller may or may not be in a transaction. If the caller is in a transaction,','line_number':124,'multiline':False]['text':' we intentionally read any uncommitted writes it has made.','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' If there are concurrent transactions updating different keys in the donor collection, there','line_number':127,'multiline':False]['text':' can be write skew resulting in the wrong pin, including leaking a resource. We enforce the','line_number':128,'multiline':False]['text':' collection is held in exclusive mode to prevent this. However an exception to this is oplog','line_number':129,'multiline':False]['text':' application, which already serializes these writes.','line_number':130,'multiline':False]['text':' If the RecoveryUnit already had an open snapshot, keep the snapshot open. Otherwise abandon','line_number':136,'multiline':False]['text':' the snapshot when exitting the function.','line_number':137,'multiline':False]['text':' The pin has failed, but we're in standalone mode. Ignore the error.','line_number':177,'multiline':False]['text':' If we're a primary, the pin can fail and the error should bubble up and fail','line_number':183,'multiline':False]['text':' resharding.','line_number':184,'multiline':False]['text':' The pin timestamp can be earlier than the oplog entry being processed. Thus','line_number':187,'multiline':False]['text':' the oldest timestamp can race ahead of the pin request. It's not ideal this','line_number':188,'multiline':False]['text':' node cannot participate in donating documents for the cloning phase, but this','line_number':189,'multiline':False]['text':' is the most robust path forward. Ignore this case.','line_number':190,'multiline':False]['text':' For recovery cases we also ignore the error. The expected scenario is the pin','line_number':195,'multiline':False]['text':' request is no longer needed, but the write to delete the pin was rolled','line_number':196,'multiline':False]['text':' back. The write to delete the pin won't be issued until the collection','line_number':197,'multiline':False]['text':' cloning phase of resharding is majority committed. Thus there should be no','line_number':198,'multiline':False]['text':' consequence to observing this error. Ignore this case.','line_number':199,'multiline':False]['text':' namespace','line_number':207,'multiline':False]['text':' If a document is inserted into the resharding donor collection with a','line_number':227,'multiline':False]['text':' `minFetchTimestamp`, we assume the document was inserted as part of initial sync and do','line_number':228,'multiline':False]['text':' nothing to pin history.','line_number':229,'multiline':False]['text':' This is a no-op if either replication is not enabled or this node is a secondary','line_number':233,'multiline':False]['text':' Primaries and secondaries should execute pinning logic when observing changes to the','line_number':248,'multiline':False]['text':' donor resharding document.','line_number':249,'multiline':False]['text':' This is a no-op if either replication is not enabled or this node is a secondary','line_number':253,'multiline':False]['text':' It is possible that the ReshardingCoordinatorService is still being rebuilt.','line_number':266,'multiline':False]['text':' We must defer calling ReshardingCoordinator::lookup() until after our storage','line_number':267,'multiline':False]['text':' transaction has committed to ensure we aren't holding open an oplog hole and','line_number':268,'multiline':False]['text':' preventing replication from making progress while we wait.','line_number':269,'multiline':False]['text':' namespace mongo','line_number':302,'multiline':False]