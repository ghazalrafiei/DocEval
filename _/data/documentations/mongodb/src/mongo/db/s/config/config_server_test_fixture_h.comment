['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Takes two arrays of BSON objects and asserts that they contain the same documents
 ','line_number':75,'multiline':True]['text':'*
 * Provides config-specific functionality in addition to the mock storage engine and mock network
 * provided by ShardingMongodTestFixture.
 ','line_number':97,'multiline':True]['text':'*
     * Insert a document to this config server to the specified namespace.
     ','line_number':111,'multiline':True]['text':'*
     * Updates a document to this config server to the specified namespace.
     ','line_number':118,'multiline':True]['text':'*
     * Deletes a document to this config server to the specified namespace.
     ','line_number':127,'multiline':True]['text':'*
     * Reads a single document from a collection living on the config server.
     ','line_number':135,'multiline':True]['text':'*
     * Reads a single document from a collection living on the config server and parses it into the
     * specified type.
     * Note: T must be a valid IDL type or any type that provides a static parse() method as defined
     * for IDL types.
     ','line_number':142,'multiline':True]['text':'*
     * Setup the config.shards collection to contain the given shards.
     ','line_number':160,'multiline':True]['text':'*
     * Retrieves the shard document from the config server.
     * Returns {ErrorCodes::ShardNotFound} if the given shard does not exists.
     ','line_number':165,'multiline':True]['text':'*
     * Setup the config.chunks collection to contain the given chunks.
     ','line_number':171,'multiline':True]['text':'*
     * Retrieves the chunk document <uuid, minKey> from the config server.
     * This is the recommended way to get a chunk document.
     ','line_number':178,'multiline':True]['text':'*
     * Retrieves the chunk document <minKey> from the config server.
     * This function assumes that there is just one chunk document associated to minKey. This can
     * lead to some problems in scenarios where there are two or more collections that are splitted
     * in the same way.
     ','line_number':188,'multiline':True]['text':'*
     * Returns the collection placement version.
     ','line_number':199,'multiline':True]['text':'*
     * Inserts a document for the database into the config.databases collection.
     ','line_number':205,'multiline':True]['text':'*
     * Returns the indexes definitions defined on a given collection.
     ','line_number':213,'multiline':True]['text':'*
     * Returns the stored raw pointer to the addShard TaskExecutor's NetworkInterface.
     ','line_number':218,'multiline':True]['text':'*
     * Returns the stored raw pointer to the addShard TaskExecutor.
     ','line_number':223,'multiline':True]['text':'*
     * Same as ShardingMongodTestFixture::onCommand but run against _addShardNetworkTestEnv.
     ','line_number':228,'multiline':True]['text':'*
     * Returns all the keys in admin.system.keys
     ','line_number':233,'multiline':True]['text':'*
     * Sets this node up and initialized the collections and indexes in the config db.
     ','line_number':238,'multiline':True]['text':' Since these are currently private members of the real ShardingCatalogManager, we store a raw','line_number':253,'multiline':False]['text':' pointer to them here.','line_number':254,'multiline':False]['text':' Allows for processing tasks through the NetworkInterfaceMock/ThreadPoolMock subsystem.','line_number':258,'multiline':False]['text':' namespace mongo','line_number':262,'multiline':False]