['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * See the comments for CollectionShardingState for more information on how this class fits in the
 * sharding architecture.
 ','line_number':72,'multiline':True]['text':'*
     * Obtains the sharding runtime for the specified collection, along with a resource lock in
     * shared mode protecting it from concurrent modifications, which will be held until the object
     * goes out of scope.
     ','line_number':84,'multiline':True]['text':'*
     * Obtains the sharding runtime for the specified collection, along with a resource lock in
     * exclusive mode protecting it from concurrent modifications, which will be held until the
     * object goes out of scope.
     ','line_number':108,'multiline':True]['text':'*
     * Returns boost::none if the description for the collection is not known yet. Otherwise
     * returns the most recently refreshed from the config server metadata.
     *
     * This method do not check for the shard version that the operation requires and should only
     * be used for cases such as checking whether a particular config server update has taken
     * effect.
     ','line_number':174,'multiline':True]['text':'*
     * Updates the collection's filtering metadata based on changes received from the config server
     * and also resolves the pending receives map in case some of these pending receives have
     * committed on the config server or have been abandoned by the donor shard.
     *
     * This method must be called with an exclusive collection lock and it does not acquire any
     * locks itself.
     ','line_number':184,'multiline':True]['text':'*
     * Marks the collection's filtering metadata as UNKNOWN, meaning that all attempts to check for
     * shard version match will fail with StaleConfig errors in order to trigger an update.
     *
     * Interrupts any ongoing shard metadata refresh.
     *
     * It is safe to call this method with only an intent lock on the collection (as opposed to
     * setFilteringMetadata which requires exclusive).
     ','line_number':194,'multiline':True]['text':'*
     * Calls to clearFilteringMetadata + clears the _metadataManager object.
     ','line_number':205,'multiline':True]['text':'*
     * Methods to control the collection's critical section. Methods listed below must be called
     * with both the collection lock and CSRLock held in exclusive mode.
     *
     * In these methods, the CSRLock ensures concurrent access to the critical section.
     *
     * Entering into the Critical Section interrupts any ongoing filtering metadata refresh.
     ','line_number':210,'multiline':True]['text':'*
     * It transitions the critical section back to the catch up phase.
     ','line_number':221,'multiline':True]['text':'*
     * Method to control the collection's critical section. Methods listed below must be called with
     * both the collection lock and CSR acquired in exclusive mode.
     ','line_number':226,'multiline':True]['text':'*
     * Same semantics than 'exitCriticalSection' but without doing error-checking. Only meant to be
     * used when recovering the critical sections in the RecoverableCriticalSectionService.
     ','line_number':232,'multiline':True]['text':'*
     * If the collection is currently in a critical section, returns the critical section signal to
     * be waited on. Otherwise, returns nullptr.
     ','line_number':238,'multiline':True]['text':'*
     * Waits for all ranges deletion tasks with UUID 'collectionUuid' overlapping range
     * 'orphanRange' to be processed, even if the collection does not exist in the storage catalog.
     * It will block until the minimum of the operation context's timeout deadline or 'deadline' is
     * reached.
     ','line_number':245,'multiline':True]['text':'*
     * Returns a future marked as ready when all the ongoing queries retaining the range complete
     ','line_number':257,'multiline':True]['text':'*
     * Initializes the placement version recover/refresh shared semifuture for other threads to wait
     * on it.
     *
     * To invoke this method, the criticalSectionSignal must not be hold by a different thread.
     ','line_number':267,'multiline':True]['text':'*
     * If there an ongoing placement version recover/refresh, it returns the shared semifuture to be
     * waited on. Otherwise, returns boost::none.
     ','line_number':276,'multiline':True]['text':'*
     * Resets the placement version recover/refresh shared semifuture to boost::none.
     ','line_number':283,'multiline':True]['text':'*
     * Add a new index to the shard-role index info under a lock.
     ','line_number':288,'multiline':True]['text':'*
     * Removes an index from the shard-role index info under a lock.
     ','line_number':295,'multiline':True]['text':'*
     * Clears the shard-role index info and set the collectionIndexes to boost::none.
     ','line_number':302,'multiline':True]['text':'*
     * Clears all the indexes and set the new indexes and index version.
     ','line_number':307,'multiline':True]['text':' Tracks ongoing placement version recover/refresh.','line_number':321,'multiline':False]['text':' Cancellation source to cancel the ongoing recover/refresh placement version.','line_number':324,'multiline':False]['text':'*
     * Returns the latest version of collection metadata with filtering configured for
     * atClusterTime if specified.
     ','line_number':328,'multiline':True]['text':'*
     * Returns the latest version of collection metadata with filtering configured for
     * atClusterTime if specified. Throws StaleConfigInfo if the shard version attached to the
     * operation context does not match the shard version on the active metadata object.
     ','line_number':335,'multiline':True]['text':'*
     * Auxiliary function used to implement the different flavours of clearFilteringMetadata.
     ','line_number':347,'multiline':True]['text':'*
     * This function cleans up some state associated with the current sharded metadata before it's
     * replaced by the new metadata.
     ','line_number':352,'multiline':True]['text':'*
     * This function throws an StaleConfigInfo exception if the critical section is held.
     ','line_number':358,'multiline':True]['text':' The service context under which this instance runs','line_number':363,'multiline':False]['text':' Namespace this state belongs to.','line_number':366,'multiline':False]['text':' Tracks the migration critical section state for this collection.','line_number':369,'multiline':False]['text':' Protects state around the metadata manager below','line_number':372,'multiline':False]['text':' Track status of filtering metadata for a specific collection','line_number':376,'multiline':False]['text':' metadata is not known to this node','line_number':378,'multiline':False]['text':' no metadata found in the sharding catalog','line_number':379,'multiline':False]['text':' metadata for this collection is registered in the sharding catalog','line_number':380,'multiline':False]['text':' If the collection state is known and is untracked, this will be nullptr.','line_number':383,'multiline':False]['text':'','line_number':384,'multiline':False]['text':' If the collection state is known and is tracked, this will point to the metadata','line_number':385,'multiline':False]['text':' associated with this collection.','line_number':386,'multiline':False]['text':'','line_number':387,'multiline':False]['text':' If the collection state is unknown:','line_number':388,'multiline':False]['text':' - If the metadata had never been set yet, this will be nullptr.','line_number':389,'multiline':False]['text':' - If the collection state was known and was sharded, this contains the metadata that','line_number':390,'multiline':False]['text':' were known for the collection before the last invocation of clearFilteringMetadata().','line_number':391,'multiline':False]['text':'','line_number':392,'multiline':False]['text':' The following matrix enumerates the valid (Y) and invalid (X) scenarios.','line_number':393,'multiline':False]['text':'                          __________________________________','line_number':394,'multiline':False]['text':'                         | _metadataType (collection state) |','line_number':395,'multiline':False]['text':'                         |__________________________________|','line_number':396,'multiline':False]['text':'                         | UNKNOWN | UNTRACKED |  TRACKED   |','line_number':397,'multiline':False]['text':'  _______________________|_________|___________|____________|','line_number':398,'multiline':False]['text':' |_metadataManager unset |    Y    |     Y     |     X      |','line_number':399,'multiline':False]['text':' |_______________________|_________|___________|____________|','line_number':400,'multiline':False]['text':' |_metadataManager set   |    Y    |     X     |     Y      |','line_number':401,'multiline':False]['text':' |_______________________|_________|___________|____________|','line_number':402,'multiline':False]['text':' Used for testing to check the number of times a new MetadataManager has been installed.','line_number':405,'multiline':False]['text':' Tracks ongoing placement version recover/refresh. Eventually set to the semifuture to wait on','line_number':408,'multiline':False]['text':' and a CancellationSource to cancel it','line_number':409,'multiline':False]['text':' Contains the global indexes for the collection. This will be boost::none if no global indexes','line_number':412,'multiline':False]['text':' have ever been created for the collection.','line_number':413,'multiline':False]['text':'*
 * RAII-style class, which obtains a reference to the critical section for the specified collection.
 *
 *
 * Placement version recovery/refresh procedures always wait for the critical section to be released
 * in order to serialise with concurrent moveChunk/shardCollection commit operations.
 *
 * Entering the critical section doesn't serialise with concurrent recovery/refresh, because
 * causally such refreshes would have happened *before* the critical section was entered.
 ','line_number':417,'multiline':True]['text':'*
     * Enters the commit phase of the critical section and blocks reads.
     ','line_number':435,'multiline':True]['text':' namespace mongo','line_number':447,'multiline':False]