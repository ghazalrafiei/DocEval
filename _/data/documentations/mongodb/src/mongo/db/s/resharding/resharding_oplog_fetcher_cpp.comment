['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' explain ','line_number':114,'multiline':True]['text':' fromMongos ','line_number':115,'multiline':True]['text':' needsMerge ','line_number':116,'multiline':True]['text':' allowDiskUse ','line_number':117,'multiline':True]['text':' bypassDocumentValidation ','line_number':118,'multiline':True]['text':' isMapReduceCommand ','line_number':119,'multiline':True]['text':' runtimeConstants ','line_number':121,'multiline':True]['text':' collator ','line_number':122,'multiline':True]['text':' collUUID ','line_number':125,'multiline':True]['text':' namespace','line_number':127,'multiline':False]['text':' `lastSeen` is the _id of the document ReshardingDonorOplogIterator::getNextBatch() has last','line_number':159,'multiline':False]['text':' read from the oplog buffer collection.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' `_startAt` is updated after each insert into the oplog buffer collection by','line_number':162,'multiline':False]['text':' ReshardingOplogFetcher to reflect the newer resume point if a new aggregation request was','line_number':163,'multiline':False]['text':' being issued. It is also updated with the latest oplog timestamp from donor's cursor response','line_number':164,'multiline':False]['text':' after we finish inserting the entire batch.','line_number':165,'multiline':False]['text':' `lastSeen < _startAt` means there's at least one document which has been inserted by','line_number':168,'multiline':False]['text':' ReshardingOplogFetcher and hasn't been returned by','line_number':169,'multiline':False]['text':' ReshardingDonorOplogIterator::getNextBatch(). The caller has no reason to wait until yet','line_number':170,'multiline':False]['text':' another document has been inserted before reading from the oplog buffer collection.','line_number':171,'multiline':False]['text':' `lastSeen == _startAt` means the last document inserted by ReshardingOplogFetcher has already','line_number':175,'multiline':False]['text':' been returned by ReshardingDonorOplogIterator::getNextBatch() and so','line_number':176,'multiline':False]['text':' ReshardingDonorOplogIterator would want to wait until ReshardingOplogFetcher does another','line_number':177,'multiline':False]['text':' insert.','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' `lastSeen > _startAt` isn't expected to happen in practice because','line_number':180,'multiline':False]['text':' ReshardingDonorOplogIterator only uses _id's from documents that it actually read from the','line_number':181,'multiline':False]['text':' oplog buffer collection for `lastSeen`, but would also mean the caller wants to wait.','line_number':182,'multiline':False]['text':' TODO(SERVER-74658): Please revisit if this thread could be made killable.','line_number':219,'multiline':False]['text':' Wait a little before re-running the aggregation pipeline on the donor's oplog. The','line_number':228,'multiline':False]['text':' 1-second value was chosen to match the default awaitData timeout that would have been','line_number':229,'multiline':False]['text':' used if the aggregation cursor was TailableModeEnum::kTailableAndAwaitData.','line_number':230,'multiline':False]['text':' Create the destination collection if necessary.','line_number':294,'multiline':False]['text':' This oplog-like collection will benefit from clustering by _id to reduce storage overhead','line_number':307,'multiline':False]['text':' and improve _id query efficiency.','line_number':308,'multiline':False]['text':' We specify {afterClusterTime: <highest _id.clusterTime>, level: "majority"} as the read','line_number':329,'multiline':False]['text':' concern to guarantee the postBatchResumeToken when the batch is empty is non-decreasing.','line_number':330,'multiline':False]['text':' The ReshardingOplogFetcher depends on inserting documents in increasing _id order,','line_number':331,'multiline':False]['text':' including for the synthetic no-op oplog entries generated from the postBatchResumeToken.','line_number':332,'multiline':False]['text':' Note that the oplog entries are *not* being copied with a tailable cursor.','line_number':368,'multiline':False]['text':' Shard::runAggregation() will instead return upon hitting the end of the donor's oplog.','line_number':369,'multiline':False]['text':' TODO(SERVER-74658): Please revisit if this thread could be made killable.','line_number':388,'multiline':False]['text':' Noting some possible optimizations:','line_number':394,'multiline':False]['text':'','line_number':395,'multiline':False]['text':' * Batch more inserts into larger storage transactions.','line_number':396,'multiline':False]['text':' * Parallize writing documents across multiple threads.','line_number':397,'multiline':False]['text':' * Doing either of the above while still using the underlying message buffer of bson','line_number':398,'multiline':False]['text':'   objects.','line_number':399,'multiline':False]['text':' Insert a noop entry with the latest oplog timestamp from the donor's cursor','line_number':441,'multiline':False]['text':' response. This will allow the fetcher to resume reading from the last oplog entry','line_number':442,'multiline':False]['text':' it fetched even if that entry is for a different collection, making resuming less','line_number':443,'multiline':False]['text':' wasteful.','line_number':444,'multiline':False]['text':' Also include synthetic oplog in the fetched count so it can match up with the','line_number':465,'multiline':False]['text':' total oplog applied count in the end.','line_number':466,'multiline':False]['text':' It's possible that the donor shard has not generated new oplog entries since','line_number':478,'multiline':False]['text':' the previous getMore. In this case the latest oplog timestamp the donor','line_number':479,'multiline':False]['text':' returns will be the same, so it's safe to ignore this error.','line_number':480,'multiline':False]['text':' namespace mongo','line_number':494,'multiline':False]