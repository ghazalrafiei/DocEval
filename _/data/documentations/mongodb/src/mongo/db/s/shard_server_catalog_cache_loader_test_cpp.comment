['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Returns five chunks using collectionPlacementVersion as a starting version, and
     * shardKeyPattern 'kKeyPattern'.
     ','line_number':85,'multiline':True]['text':'*
     * Returns five chunks using collectionPlacementVersion as a starting version, and
     * shardKeyPattern 'kKeyPattern2'.
     ','line_number':91,'multiline':True]['text':'*
     * Returns a chunk update diff GTE 'collectionPlacementVersion' for the chunks created by
     * makeFiveChunks above.
     ','line_number':97,'multiline':True]['text':'*
     * Returns a routing table applying 'threeUpdatedChunks' (the result of
     * makeThreeUpdatedChunksDiff) to 'originalFiveChunks' (the result of makeFiveChunks).
     ','line_number':103,'multiline':True]['text':'*
     * This helper makes a CollectionType with the current _maxCollPlacementVersion.
     ','line_number':110,'multiline':True]['text':'*
     * Sets up the _shardLoader with the results of makeFiveChunks().
     ','line_number':116,'multiline':True]['text':' Create mock remote and real shard loader, retaining a pointer to the mock remote loader so','line_number':135,'multiline':False]['text':' that unit tests can manipulate it to return certain responses.','line_number':136,'multiline':False]['text':' Set the shard loader to primary mode, and set it for testing.','line_number':141,'multiline':False]['text':' The diff query is for GTE a known version, so prepend the previous newest chunk, which is','line_number':217,'multiline':False]['text':' unmodified by this change and so should be found. Note: it is important for testing that the','line_number':218,'multiline':False]['text':' previous highest versioned chunk is unmodified. Otherwise the shard loader's results are','line_number':219,'multiline':False]['text':' dependent on a race between persistence and retrieving data because it combines enqueued and','line_number':220,'multiline':False]['text':' persisted results without applying modifications.','line_number':221,'multiline':False]['text':' Make chunk updates','line_number':231,'multiline':False]['text':' Sorted by ascending chunk version, not range! Note, threeUpdatedChunksDiff already includes','line_number':256,'multiline':False]['text':' the last originalFiveChunks chunk because the diff query is GTE.','line_number':257,'multiline':False]['text':' Return a NamespaceNotFound error that means the collection doesn't exist.','line_number':302,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':314,'multiline':False]['text':' Then return a NamespaceNotFound error, which means the collection must have been dropped,','line_number':318,'multiline':False]['text':' clearing the chunk metadata.','line_number':319,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':332,'multiline':False]['text':' Then set up the remote loader to return a single document we've already seen -- indicates','line_number':336,'multiline':False]['text':' there's nothing new.','line_number':337,'multiline':False]['text':' Check that refreshing from the latest version returned a single document matching that','line_number':345,'multiline':False]['text':' version.','line_number':346,'multiline':False]['text':' Same as the above unit test, PrimaryLoadFromShardedAndFindNoDiff, but caller requests complete','line_number':353,'multiline':False]['text':' routing table, rather than diff from a known version.','line_number':354,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':356,'multiline':False]['text':' Then set up the remote loader to return a single document we've already seen -- indicates','line_number':360,'multiline':False]['text':' there's nothing new.','line_number':361,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':378,'multiline':False]['text':' Then refresh again and find updated chunks.','line_number':382,'multiline':False]['text':' Check that the diff was returned successfull.','line_number':390,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':404,'multiline':False]['text':' First cause a remote refresh to find the updated chunks. Then wait for persistence, so that','line_number':408,'multiline':False]['text':' we ensure that nothing is enqueued and the next getChunksSince call will return a predictable','line_number':409,'multiline':False]['text':' number of chunk documents: the result of applying the enqueued update diff.','line_number':410,'multiline':False]['text':' Wait for persistence of update','line_number':417,'multiline':False]['text':' Set up the remote loader to return a single document we've already seen, indicating no change','line_number':420,'multiline':False]['text':' occurred.','line_number':421,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':444,'multiline':False]['text':' Then refresh again and find that the collection has been dropped and recreated.','line_number':448,'multiline':False]['text':' First set up the shard chunk loader as sharded.','line_number':471,'multiline':False]['text':' Then refresh again and retrieve chunks from the config server that have mixed epoches, like','line_number':475,'multiline':False]['text':' as if the chunks read yielded around a drop and recreate of the collection.','line_number':476,'multiline':False]['text':' Now make sure the newly recreated collection is cleanly loaded. We cannot ensure a','line_number':491,'multiline':False]['text':' non-variable response until the loader has remotely retrieved the new metadata and applied','line_number':492,'multiline':False]['text':' them to the persisted store. So first do a reload and ignore the results. Then call again,','line_number':493,'multiline':False]['text':' this time checking the results.','line_number':494,'multiline':False]['text':' Wait for persistence of update.','line_number':501,'multiline':False]['text':' Put some metadata in the persisted cache (config.cache.chunks.*)','line_number':573,'multiline':False]['text':' Pause the thread processing the pending updates on metadata','line_number':578,'multiline':False]['text':' Put a first task in the list of pending updates on metadata (in-memory)','line_number':581,'multiline':False]['text':' Bump the shard's term','line_number':585,'multiline':False]['text':' Putting a second task causes a verification of the contiguous versions in the list pending','line_number':588,'multiline':False]['text':' updates on metadata','line_number':589,'multiline':False]['text':'*
 * Refine shard key currently only changes the epoch and does not change the major/minor versions
 * in the chunks. This test simulates a stepDown in the middle of making changes to the
 * config.cache collections by the ShardServerCatalogCacheLoader after a refine shard key and makes
 * sure that the shard will be able to reach the valid state on config.cache on the next refresh.
 ','line_number':594,'multiline':True]['text':' Initialize the cache and wait for it to be flushed to disk.','line_number':601,'multiline':False]['text':' Do a refresh, that simulates the metadata after a refineCollectionShardKey (new','line_number':605,'multiline':False]['text':' epoch/timestamp and chunks with refined bounds). Wait for it to be flushed.','line_number':606,'multiline':False]['text':' "Rollback" the persisted metadata as if only the update to config.cache.collections had','line_number':617,'multiline':False]['text':' happened, but not the update on config.cache.chunks.<nss>','line_number':618,'multiline':False]['text':' Refresh again and expect the SSCCL to be able to recover and return the correct collection','line_number':631,'multiline':False]['text':' and chunks metadata (i.e. post-refine).','line_number':632,'multiline':False]['text':' namespace','line_number':661,'multiline':False]['text':' namespace mongo','line_number':662,'multiline':False]