['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' A mock TransactionHistoryIterator to support DSReshardingIterateTransaction.','line_number':106,'multiline':False]['text':' We should never reach here unless the txn chain has fallen off the oplog.','line_number':157,'multiline':False]['text':'*
 * Mock interface to allow specifiying mock results for the lookup pipeline.
 ','line_number':167,'multiline':True]['text':' fromMigrate ','line_number':298,'multiline':True]['text':' checkExistenceForDiffInsert','line_number':299,'multiline':False]['text':' version ','line_number':300,'multiline':True]['text':' o ','line_number':301,'multiline':True]['text':' o2 ','line_number':302,'multiline':True]['text':' upsert ','line_number':304,'multiline':True]['text':' date ','line_number':305,'multiline':True]['text':' statementIds ','line_number':306,'multiline':True]['text':' prevWriteOpTime ','line_number':307,'multiline':True]['text':' preImage ','line_number':308,'multiline':True]['text':' postImage ','line_number':309,'multiline':True]['text':' destinedRecipient ','line_number':310,'multiline':True]['text':' idField ','line_number':311,'multiline':True]['text':' needsRetryImage ','line_number':312,'multiline':True]['text':' insertNotifier ','line_number':347,'multiline':True]['text':' Mock lookup collection document source.','line_number':349,'multiline':False]['text':' Mock non-lookup collection document source.','line_number':353,'multiline':False]['text':'***********************************************************************************
     * These set of helper function generate pre-made oplogs with the following timestamps:
     *
     * deletePreImage: ts(7, 35)
     * updatePostImage: ts(10, 15)
     * insert: ts(25, 345)
     * update: ts(30, 16)
     * delete: ts(66, 86)
     ','line_number':361,'multiline':True]['text':' Set up the oplog collection state for $lookup and $graphLookup calls.','line_number':420,'multiline':False]['text':' Use a constant value so unittests can store oplog entries as extended json strings in code.','line_number':437,'multiline':False]['text':' Also referenced via strings in code.','line_number':440,'multiline':False]['text':'*
 * Test with 3 oplog: insert -> update -> delete, then resume from point after insert.
 ','line_number':469,'multiline':True]['text':'*
 * Test with 3 oplog: insert -> update -> delete, then resume from point after insert.
 ','line_number':494,'multiline':True]['text':' Use the test to also exercise the stages for resuming. The timestamp passed in is','line_number':590,'multiline':False]['text':' excluded from the results.','line_number':591,'multiline':False]['text':' The insert oplog entry is excluded, we first expect the update oplog entry.','line_number':613,'multiline':False]['text':' Create a prepared transaction with three inserts. The pipeline matches on `destinedRecipient:','line_number':630,'multiline':False]['text':' shard1`, which targets two of the inserts.','line_number':631,'multiline':False]['text':' Set up the oplog collection state for $lookup and $graphLookup calls.','line_number':684,'multiline':False]['text':' This is can be changed to process a prefix of the pipeline for debugging.','line_number':696,'multiline':False]['text':' Set up the initial input into the pipeline.','line_number':706,'multiline':False]['text':' The first document should be `prepare: true` and contain two inserts.','line_number':709,'multiline':False]['text':' We should not see the `commitTransaction` entry, since DSReshardingIterateTransaction','line_number':725,'multiline':False]['text':' swallows it.','line_number':726,'multiline':False]['text':' We should not observe the 'commitTransaction' entry, since DSReshardingIterateTransaction','line_number':894,'multiline':False]['text':' swallows it.','line_number':895,'multiline':False]['text':' This test verifies that we don't return oplog entries that are not destined for the specified','line_number':899,'multiline':False]['text':' recipient shard. The test has an oplog that only has entries that stay on the source shard','line_number':900,'multiline':False]['text':' causing the pipeline to exclude the entire transaction.','line_number':901,'multiline':False]['text':' We don't see any results since there are no events for the requested destinedRecipient in the','line_number':957,'multiline':False]['text':' 'applyOps' and we swallow the 'commitTransaction' event internally.','line_number':958,'multiline':False]['text':' We only get back 1 out of 3 entries in the second 'applyOps' because only one of them matches','line_number':1147,'multiline':False]['text':' both the correct UUID and the expected destinedRecipient.','line_number':1148,'multiline':False]['text':' We do not expect any further results because we swallow the 'commitTransaction' internally.','line_number':1153,'multiline':False]['text':' This case can only happen if a primary locally commits the transaction, but fails before the','line_number':1357,'multiline':False]['text':' commit txn is replicated. A new node will step up, and then it will see the in-progress entry +','line_number':1358,'multiline':False]['text':' txn state, and then abort it. This means the new primary will have a a partialTxn applyOps entry','line_number':1359,'multiline':False]['text':' + and abortTransaction oplog entry.','line_number':1360,'multiline':False]['text':' Tests that find and modify oplog with image lookup gets converted to the old style oplog pairs','line_number':1480,'multiline':False]['text':' with no-op pre/post image oplog.','line_number':1481,'multiline':False]['text':' fromMigrate ','line_number':1511,'multiline':True]['text':' checkExistenceForDiffInsert','line_number':1512,'multiline':False]['text':' version ','line_number':1513,'multiline':True]['text':' o1 ','line_number':1514,'multiline':True]['text':' o2 ','line_number':1515,'multiline':True]['text':' upsert ','line_number':1517,'multiline':True]['text':' date ','line_number':1518,'multiline':True]['text':' statementIds ','line_number':1519,'multiline':True]['text':' prevWrite ','line_number':1520,'multiline':True]['text':' preImage ','line_number':1521,'multiline':True]['text':' postImage ','line_number':1522,'multiline':True]['text':' Register a dummy uuid just to not make test crash. The stub for findSingleDoc ignores','line_number':1533,'multiline':False]['text':' the UUID so it doesn't matter what the value here is.','line_number':1534,'multiline':False]['text':' applyOps with 'needsRetryImage'.','line_number':1591,'multiline':False]['text':' Register a dummy uuid just to not make test crash. The stub for findSingleDoc ignores','line_number':1635,'multiline':False]['text':' the UUID so it doesn't matter what the value here is.','line_number':1636,'multiline':False]['text':' Create a pipeline and verify that it outputs the doc for the forged noop oplog entry','line_number':1648,'multiline':False]['text':' immediately before the downcoverted doc for the applyOps with the 'needsRetryImage' field.','line_number':1649,'multiline':False]['text':' Create another pipeline and start fetching from after the doc for the pre-image, and verify','line_number':1705,'multiline':False]['text':' that the pipeline does not re-output the applyOps doc that comes before the pre-image doc.','line_number':1706,'multiline':False]['text':' namespace','line_number':1723,'multiline':False]['text':' namespace mongo','line_number':1724,'multiline':False]