['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * ConfigsvrCoordinators are POS instances that run on the configsvr and represent cluster
 * operations that are driven by the configsvr. ConfigsvrCoordinator implements common framework for
 * such operations. Concrete operations extend ConfigsvrCoordinator and implement their specific
 * bussiness logic on '_runImpl'
 ','line_number':61,'multiline':True]['text':'*
     * Persists the given StateDoc in memory and sets `_doc` to the new value.
     * Note: We assume only one thread make writes on `_doc` (which is the executor thread) while
     * multiple threads can read it.
     ','line_number':116,'multiline':True]['text':'*
     * Updates _doc according to the given function and persists it in memory.
     * Note: We assume only one thread make writes on _doc (which is the executor thread) while
     * multiple threads can read it.
     ','line_number':134,'multiline':True]['text':'*
     * Evaluates `_doc` under the `_docMutex` locking to protect the reads from concurrent writes.
     * Note: `_doc` needs to be accessed through this method when the calling thread is other than
     * the main coordinator thread. The reason is that writes are only done from the main
     * coordinator thread.
     ','line_number':154,'multiline':True]['text':'*
     * Gets a new session if necessary and updates `_doc`.
     ','line_number':167,'multiline':True]['text':' Do not execute this phase if we already reached a subsequent one.','line_number':197,'multiline':False]['text':' Persist the new phase if this is the first time we are executing it.','line_number':201,'multiline':False]['text':' A series of step-up and step-down events can cause a node to try and insert the','line_number':229,'multiline':False]['text':' document when it has already been persisted locally, but we must still wait for','line_number':230,'multiline':False]['text':' majority commit.','line_number':231,'multiline':False]['text':' namespace mongo','line_number':249,'multiline':False]