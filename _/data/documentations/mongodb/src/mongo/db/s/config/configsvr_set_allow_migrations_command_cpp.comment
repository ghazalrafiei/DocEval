['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' If we have a session checked out, we need to yield it, considering we'll be doing a network','line_number':61,'multiline':False]['text':' operation that may block.','line_number':62,'multiline':False]['text':' Trigger a refresh on every shard. We send this to every shard and not just shards that own','line_number':69,'multiline':False]['text':' chunks for the collection because the set of shards owning chunks is updated before the','line_number':70,'multiline':False]['text':' critical section is released during chunk migrations. If the last chunk is moved off of a','line_number':71,'multiline':False]['text':' shard and this flush is not sent to that donor, stopMigrations will not wait for the critical','line_number':72,'multiline':False]['text':' section to finish on that shard (SERVER-73984).','line_number':73,'multiline':False]['text':' Use ACR to have a thread holding the session while we do the metadata updates so','line_number':103,'multiline':False]['text':' we can serialize concurrent requests to setAllowMigrations (i.e. a stepdown','line_number':104,'multiline':False]['text':' happens and the new primary sends a setAllowMigrations with the same sessionId).','line_number':105,'multiline':False]['text':' We could think about weakening the serialization guarantee in the future because','line_number':106,'multiline':False]['text':' the replay protection comes from the oplog write with a specific txnNumber. Using','line_number':107,'multiline':False]['text':' ACR also prevents having deadlocks with the shutdown thread because the','line_number':108,'multiline':False]['text':' cancellation of the new operation context is linked to the parent one.','line_number':109,'multiline':False]['text':' Set the operation context read concern level to local for reads into the config','line_number':123,'multiline':False]['text':' database.','line_number':124,'multiline':False]['text':' Since we no write happened on this txnNumber, we need to make a dummy write to','line_number':138,'multiline':False]['text':' protect against older requests with old txnNumbers.','line_number':139,'multiline':False]['text':' upsert ','line_number':145,'multiline':True]['text':' multi ','line_number':146,'multiline':True]['text':' Internal command (server to server).','line_number':169,'multiline':False]['text':' namespace','line_number':192,'multiline':False]['text':' namespace mongo','line_number':193,'multiline':False]