['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The balancer is a background task that tries to keep the number of chunks across all
 * servers of the cluster even.
 *
 * The balancer does act continuously but in "rounds". At a given round, it would decide if
 * there is an imbalance by checking the difference in chunks between the most and least
 * loaded shards. It would issue a request for a chunk migration per round, if it found so.
 ','line_number':67,'multiline':True]['text':'*
     * Provide access to the Balancer decoration on ServiceContext.
     ','line_number':80,'multiline':True]['text':'*
     * Invoked when the config server primary enters the 'PRIMARY' state and is invoked while the
     * caller is holding the global X lock. Kicks off the main balancer thread (which will in turn
     * instantiate a secondary worker and the CommandsScheduler) and returns immediately.
     * Auto-balancing (if enabled) should commence shortly, and manual migrations will be processed
     * and run.
     *
     * Must only be called if the balancer thread set is in the Terminated state (i.e., just
     * constructed or joinTermination() has been called before).
     * Any code in this call must not try to acquire any locks or to wait on operations, which
     * acquire locks.
     ','line_number':89,'multiline':True]['text':'*
     * Invoked when this node which is currently serving as a 'PRIMARY' steps down and is invoked
     * while the global X lock is held. Requests to the hierarchy of balancer threads to leave and
     * returns immediately without waiting for them to terminate. (Once the termination is complete,
     * manual migrations will be rejected).
     *
     * This method might be called multiple times in succession, which is what happens as a result
     * of incomplete transition to primary so it is resilient to that.
     *
     * The joinTermination() method must be called afterwards in order to wait for the main
     * balancer thread to terminate and to allow initiateBalancer to be called again.
     ','line_number':103,'multiline':True]['text':'*
     * Invoked when a node on its way to becoming a primary finishes draining and is about to
     * acquire the global X lock in order to allow writes. Waits for the hierarchy of balancer
     * threads to terminate and primes the balancer so that initiateBalancer can be called.
     *
     * This must not be called while holding any locks!
     ','line_number':117,'multiline':True]['text':'*
     * Potentially blocking method, which will return immediately if the balancer is not running a
     * balancer round and will block until the current round completes otherwise. If the operation
     * context's deadline is exceeded, it will throw an ExceededTimeLimit exception.
     ','line_number':126,'multiline':True]['text':'*
     * Blocking call, which requests the balancer to move a range to the specified location
     * in accordance with the active balancer policy. An error will be returned if the attempt to
     * move fails for any reason.
     *
     * NOTE: This call disregards the balancer enabled/disabled status and will proceed with the
     *       move regardless.
     ','line_number':133,'multiline':True]['text':'*
     * Appends the runtime state of the balancer instance to the specified builder.
     ','line_number':146,'multiline':True]['text':'*
     * Informs the balancer that a setting that affects it changed.
     ','line_number':151,'multiline':True]['text':'*
     * Informs the balancer that the user has requested defragmentation to be stopped on a
     * collection.
     ','line_number':156,'multiline':True]['text':'*
     * Returns if a given collection is draining due to a removed shard, has chunks on an invalid
     * zone or the number of chunks is imbalanced across the cluster
     ','line_number':162,'multiline':True]['text':'*
     * Possible runtime states of the set of threads instantiated by the balancer.
     * The diagram below depicts the allowed transitions.
     * Terminated --> Running --> Terminating
     *    ^            /          /
     *    |           /          /
     *     \---------------------
     ','line_number':172,'multiline':True]['text':' There is no worker thread instantiated by the balancer','line_number':181,'multiline':False]['text':' The balancer is initiliasing its worker threads (or they are all already active)','line_number':183,'multiline':False]['text':' A request to terminate all the balancer worker threads is ongoing','line_number':185,'multiline':False]['text':'*
     * ReplicaSetAwareService entry points.
     ','line_number':189,'multiline':True]['text':'*
     * The main balancer loop, which runs in a separate thread.
     ','line_number':205,'multiline':True]['text':'*
     * The secondary balancer loop, which performs merges and splits.
     ','line_number':210,'multiline':True]['text':'*
     * Checks whether the balancer is going through a termination sequence of its threads.
     ','line_number':215,'multiline':True]['text':'*
     * Signals the beginning and end of a balancing round.
     ','line_number':220,'multiline':True]['text':'*
     * Blocks the caller for the specified timeout or until the balancer condition variable is
     * signaled, whichever comes first.
     ','line_number':226,'multiline':True]['text':'*
     * Returns true if all the servers listed in configdb as being shards are reachable and are
     * distinct processes (no hostname mixup).
     ','line_number':232,'multiline':True]['text':'*
     * Iterates through all chunks in all collections, except for the sessions collection, splitting
     * any chunks that straddle zone boundaries.
     ','line_number':238,'multiline':True]['text':'*
     * Schedules migrations for the specified set of chunks and returns how many chunks were
     * successfully processed.
     ','line_number':244,'multiline':True]['text':'*
     * To be invoked on completion of an action requested to by an ActionStream policy to
     * update the policy state (which will generate follow-up actions based on the received
     * outcome).
     ','line_number':254,'multiline':True]['text':' Protects the state below','line_number':263,'multiline':False]['text':' Indicates the current state of the worker threads instantiated by the balancer','line_number':266,'multiline':False]['text':' (_thread, _actionStreamConsumerThread and _commandScheduler)','line_number':267,'multiline':False]['text':' The main balancer threads','line_number':270,'multiline':False]['text':' The operation context of the main balancer thread. This value may only be available in the','line_number':275,'multiline':False]['text':' kRunning state and is used to force interrupt of any blocking calls made by the balancer','line_number':276,'multiline':False]['text':' thread.','line_number':277,'multiline':False]['text':' Indicates whether the balancer is currently executing a balancer round','line_number':284,'multiline':False]['text':' Counts the number of balancing rounds performed since the balancer thread was first activated','line_number':287,'multiline':False]['text':' Condition variable, which is signalled every time the above runtime state of the balancer','line_number':290,'multiline':False]['text':' changes (in particular, state/balancer round and number of balancer rounds).','line_number':291,'multiline':False]['text':' Number of moved chunks in last round','line_number':296,'multiline':False]['text':' Source for cluster statistics. Depends on the source of randomness above so it should be','line_number':299,'multiline':False]['text':' created after it and destroyed before it.','line_number':300,'multiline':False]['text':' Balancer policy. Depends on the cluster statistics instance and source of randomness above so','line_number':303,'multiline':False]['text':' it should be created after them and destroyed before them.','line_number':304,'multiline':False]['text':' namespace mongo','line_number':316,'multiline':False]