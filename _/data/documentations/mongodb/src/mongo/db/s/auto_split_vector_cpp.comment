['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * BSON arrays are serialized as BSON objects with the index of each element as a string key: for
 * example, the array ["a","b","c"] is going to be serialized as {"0":"a","1":"b","2":"c"}. The
 * minimum size for a BSON object is `BSONObj::kMinBSONLength`.
 *
 * Given that the `vector<BSONObj>` returned by `autoSplitVector` can't be greater than 16MB when
 * serialized, pessimistically assume that each key occupies the highest possible number of bytes.
 ','line_number':69,'multiline':True]['text':'
 * Takes the given min/max BSON objects that are a prefix of the shardKey and return two new BSON
 * object extended to cover the entire shardKey. See KeyPattern::extendRangeBound documentation for
 * some examples.
 ','line_number':86,'multiline':True]['text':' Extend min to get (min, MinKey, MinKey, ....)','line_number':96,'multiline':False]['text':' upperInclusive ','line_number':97,'multiline':True]['text':' if max not specified, make it (MaxKey, Maxkey, MaxKey...)','line_number':100,'multiline':False]['text':' upperInclusive ','line_number':101,'multiline':True]['text':' otherwise make it (max,MinKey,MinKey...) so that bound is non-inclusive','line_number':103,'multiline':False]['text':' upperInclusive','line_number':104,'multiline':True]['text':'
 * Reshuffle fields according to the shard key pattern.
 ','line_number':110,'multiline':True]['text':' Note: It is correct to hydrate the indexKey 'key' with 'keyPattern', because the index key','line_number':114,'multiline':False]['text':' pattern is a prefix of 'keyPattern'.','line_number':115,'multiline':False]['text':' namespace','line_number':120,'multiline':False]['text':' True if the split points vector becomes too big','line_number':135,'multiline':False]['text':' Contains each key appearing multiple times and estimated to be able to fill-in a chunk alone','line_number':139,'multiline':False]['text':' Get the size estimate for this namespace','line_number':149,'multiline':False]['text':' Return empty vector if current estimated data size is less than max chunk size','line_number':153,'multiline':False]['text':' Allow multiKey based on the invariant that shard keys must be single-valued. Therefore,','line_number':158,'multiline':False]['text':' any multi-key index prefixed by shard key cannot be multikey over the shard key fields.','line_number':159,'multiline':False]['text':'requireSingleKey=','line_number':163,'multiline':True]['text':' Setup the index scanner that will be used to find the split points','line_number':185,'multiline':False]['text':' Get first key belonging to the chunk','line_number':191,'multiline':False]['text':' Range is empty','line_number':196,'multiline':False]['text':' Compare the first and last document belonging to the range; if they have the same shard','line_number':201,'multiline':False]['text':' key value, no split point can be found.','line_number':202,'multiline':False]['text':' Range is empty','line_number':216,'multiline':False]['text':' Use the average document size and number of documents to find the approximate number of','line_number':241,'multiline':False]['text':' keys each chunk should contain','line_number':242,'multiline':False]['text':' Split at max chunk size','line_number':245,'multiline':False]['text':' Last key seen during the index scan','line_number':248,'multiline':False]['text':' firstKeyInOriginalChunk has already been scanned','line_number':249,'multiline':False]['text':' Approximate size in bytes of the split points array','line_number':250,'multiline':False]['text':' Lambda to check whether the split points vector would exceed BSONObjMaxUserSize in case','line_number':252,'multiline':False]['text':' of additional split key of the specified size.','line_number':253,'multiline':False]['text':' Reference to last split point that needs to be checked in order to avoid adding duplicate','line_number':258,'multiline':False]['text':' split points. Initialized to the min of the first chunk being split.','line_number':259,'multiline':False]['text':' To measure time elapsed while searching split points','line_number':263,'multiline':False]['text':' Traverse the index and add the maxDocsPerChunk-th key to the result vector','line_number':265,'multiline':False]['text':' Do not add again the same split point in case of frequent shard key.','line_number':283,'multiline':False]['text':' Keep trying until finding at least one split point that isn't above','line_number':292,'multiline':False]['text':' the max object user size. Very improbable corner case: the shard key','line_number':293,'multiline':False]['text':' size for the chosen split point is exactly 16MB.','line_number':294,'multiline':False]['text':' If the user has specified a limit, calculate the first `limit + 1` split','line_number':307,'multiline':False]['text':' points (avoid creating small chunks)','line_number':308,'multiline':False]['text':' Avoid creating small chunks by fairly recalculating the last split points if the last','line_number':316,'multiline':False]['text':' chunk would be too small (containing less than `80% maxDocsPerChunk` documents).','line_number':317,'multiline':False]['text':' Eventually recalculate the last split points (at most `kMaxSplitPointsToReposition`).','line_number':320,'multiline':False]['text':' Equivalent to: (nSplitPointsToReposition * maxDocsPerChunk + numScannedKeys) divided','line_number':325,'multiline':False]['text':' by the number of reshuffled chunks (nSplitPointsToReposition + 1).','line_number':326,'multiline':False]['text':' If the surplus is not too much, simply keep a bigger last chunk.','line_number':331,'multiline':False]['text':' The surplus is considered enough if repositioning the split points would imply','line_number':332,'multiline':False]['text':' generating chunks with a number of documents lower than `67% maxDocsPerChunk`.','line_number':333,'multiline':False]['text':' Fairly recalculate the last `nSplitPointsToReposition` split points.','line_number':336,'multiline':False]['text':' Don't add again the same split point in case of frequent shard key.','line_number':387,'multiline':False]['text':' Emit a warning for each frequent key','line_number':406,'multiline':False]['text':' namespace mongo','line_number':430,'multiline':False]