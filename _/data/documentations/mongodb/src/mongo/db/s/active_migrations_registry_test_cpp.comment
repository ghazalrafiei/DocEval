['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':30,'multiline':False]['text':' Need to signal the registered migration so the destructor doesn't invariant','line_number':93,'multiline':False]['text':' Need to signal the registered migration so the destructor doesn't invariant','line_number':108,'multiline':False]['text':' Registry thread.','line_number':160,'multiline':False]['text':' 2. Lock the registry so that starting to donate will block.','line_number':162,'multiline':False]['text':' 3. Signal the donate thread that the donate is ready to be started.','line_number':169,'multiline':False]['text':' 4. Wait for the donate thread to start blocking because the registry is locked.','line_number':172,'multiline':False]['text':' 9. Unlock the registry to signal the donate thread.','line_number':175,'multiline':False]['text':' Donate thread.','line_number':179,'multiline':False]['text':' 7. This is called when the donate is blocking. We let the test method know','line_number':186,'multiline':False]['text':' that we're blocked on the donate so that it can tell the registry thread to unlock','line_number':187,'multiline':False]['text':' the registry.','line_number':188,'multiline':False]['text':' 5. This is woken up by the registry thread.','line_number':192,'multiline':False]['text':' 6. Now that we're woken up by the registry thread, let's attempt to start to donate.','line_number':195,'multiline':False]['text':' This will block and call the lambda set on the baton above.','line_number':196,'multiline':False]['text':' 10. Destroy the ScopedDonateChunk and return.','line_number':205,'multiline':False]['text':' 1. Wait for the donate thread to start blocking.','line_number':208,'multiline':False]['text':' 8. Tell the registry thread to unlock the registry. That will signal the donate thread to','line_number':211,'multiline':False]['text':' continue.','line_number':212,'multiline':False]['text':' 11. The donate thread has returned and this future is set.','line_number':215,'multiline':False]['text':' Registry thread.','line_number':224,'multiline':False]['text':' 2. Lock the registry so that starting to receive will block.','line_number':226,'multiline':False]['text':' 3. Signal the receive thread that the receive is ready to be started.','line_number':233,'multiline':False]['text':' 4. Wait for the receive thread to start blocking because the registry is locked.','line_number':236,'multiline':False]['text':' 9. Unlock the registry to signal the receive thread.','line_number':239,'multiline':False]['text':' Receive thread.','line_number':243,'multiline':False]['text':' 7. This is called when the receive is blocking. We let the test method know','line_number':250,'multiline':False]['text':' that we're blocked on the receive so that it can tell the registry thread to unlock','line_number':251,'multiline':False]['text':' the registry.','line_number':252,'multiline':False]['text':' 5. This is woken up by the registry thread.','line_number':256,'multiline':False]['text':' 6. Now that we're woken up by the registry thread, let's attempt to start to receive.','line_number':259,'multiline':False]['text':' This will block and call the lambda set on the baton above.','line_number':260,'multiline':False]['text':' 10. Destroy the ScopedReceiveChunk and return.','line_number':270,'multiline':False]['text':' 1. Wait for the receive thread to start blocking.','line_number':273,'multiline':False]['text':' 8. Tell the registry thread to unlock the registry. That will signal the receive thread to','line_number':276,'multiline':False]['text':' continue.','line_number':277,'multiline':False]['text':' 11. The receive thread has returned and this future is set.','line_number':280,'multiline':False]['text':' This test validates that the ActiveMigrationsRegistry lock will block while there is a donation','line_number':284,'multiline':False]['text':' in progress. The test will fail if any of the futures are not signalled indicating that some part','line_number':285,'multiline':False]['text':' of the sequence is not working correctly.','line_number':286,'multiline':False]['text':' Migration thread.','line_number':292,'multiline':False]['text':' 2. Start a migration so that the registry lock will block when acquired.','line_number':294,'multiline':False]['text':' 3. Signal the registry locking thread that the registry is ready to be locked.','line_number':301,'multiline':False]['text':' 4. Wait for the registry thread to start blocking because there is an active donate.','line_number':304,'multiline':False]['text':' 9. Destroy the ScopedDonateChunk to signal the registy lock.','line_number':309,'multiline':False]['text':' Registry locking thread.','line_number':312,'multiline':False]['text':' 7. This is called when the registry lock is blocking. We let the test method know','line_number':320,'multiline':False]['text':' that we're blocked on the registry lock so that it tell the migration thread to let','line_number':321,'multiline':False]['text':' the donate operation complete.','line_number':322,'multiline':False]['text':' 5. This is woken up by the migration thread.','line_number':326,'multiline':False]['text':' 6. Now that we're woken up by the migration thread, let's attempt to lock the registry.','line_number':329,'multiline':False]['text':' This will block and call the lambda set on the baton above.','line_number':330,'multiline':False]['text':' 10. Unlock the registry and return.','line_number':333,'multiline':False]['text':' 1. Wait for registry lock to be acquired.','line_number':337,'multiline':False]['text':' 8. Let the donate operation complete so that the ScopedDonateChunk is destroyed. That will','line_number':340,'multiline':False]['text':' signal the registry lock.','line_number':341,'multiline':False]['text':' 11. The registy locking thread has returned and this future is set.','line_number':344,'multiline':False]['text':' This test validates that the ActiveMigrationsRegistry lock will block while there is a receive','line_number':348,'multiline':False]['text':' in progress. The test will fail if any of the futures are not signalled indicating that some part','line_number':349,'multiline':False]['text':' of the sequence is not working correctly.','line_number':350,'multiline':False]['text':' Migration thread.','line_number':356,'multiline':False]['text':' 2. Start a migration so that the registry lock will block when acquired.','line_number':358,'multiline':False]['text':' 3. Signal the registry locking thread that the registry is ready to be locked.','line_number':367,'multiline':False]['text':' 4. Wait for the registry thread to start blocking because there is an active receive.','line_number':370,'multiline':False]['text':' 9. Destroy the scopedReceiveChunk to signal the registy lock.','line_number':373,'multiline':False]['text':' Registry locking thread.','line_number':376,'multiline':False]['text':' 7. This is called when the registry lock is blocking. We let the test method know','line_number':384,'multiline':False]['text':' that we're blocked on the registry lock so that it tell the migration thread to let','line_number':385,'multiline':False]['text':' the receive operation complete.','line_number':386,'multiline':False]['text':' 5. This is woken up by the migration thread.','line_number':390,'multiline':False]['text':' 6. Now that we're woken up by the migration thread, let's attempt to lock the registry.','line_number':393,'multiline':False]['text':' This will block and call the lambda set on the baton above.','line_number':394,'multiline':False]['text':' 10. Unlock the registry and return.','line_number':397,'multiline':False]['text':' 1. Wait for registry lock to be acquired.','line_number':401,'multiline':False]['text':' 8. Let the receive operation complete so that the scopedReceiveChunk is destroyed. That will','line_number':404,'multiline':False]['text':' signal the registry lock.','line_number':405,'multiline':False]['text':' 11. The registy locking thread has returned and this future is set.','line_number':408,'multiline':False]['text':' namespace','line_number':412,'multiline':False]['text':' namespace mongo','line_number':413,'multiline':False]