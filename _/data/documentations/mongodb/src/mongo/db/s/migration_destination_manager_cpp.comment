['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]['text':' Note: Even though we're setting UNSET here,','line_number':149,'multiline':False]['text':' kMajority implies JOURNAL if journaling is','line_number':150,'multiline':False]['text':' supported by mongod and','line_number':151,'multiline':False]['text':' writeConcernMajorityJournalDefault is set to true','line_number':152,'multiline':False]['text':' in the ReplSetConfig.','line_number':153,'multiline':False]['text':' autocommit ','line_number':169,'multiline':True]['text':' startTransaction ','line_number':170,'multiline':True]['text':' Yields the checked out session before running the given function. If the function runs without','line_number':178,'multiline':False]['text':' throwing, will reacquire the session and verify it is still valid to proceed with the migration.','line_number':179,'multiline':False]['text':' The below code can throw, so it cannot run in a scope guard.','line_number':188,'multiline':False]['text':' Same as runWithoutSession above but takes a void function.','line_number':195,'multiline':False]['text':' The below code can throw, so it cannot run in a scope guard.','line_number':204,'multiline':False]['text':'*
 * Returns a human-readabale name of the migration manager's state.
 ','line_number':209,'multiline':True]['text':'*
 * Checks if an upsert of a remote document will override a local document with the same _id but in
 * a different range on this shard. Must be in WriteContext to avoid races and DBHelper errors.
 *
 * TODO: Could optimize this check out if sharding on _id.
 ','line_number':248,'multiline':True]['text':'*
 * Returns true if the majority of the nodes and the nodes corresponding to the given writeConcern
 * (if not empty) have applied till the specified lastOp.
 ','line_number':269,'multiline':True]['text':' Enforce the user specified write concern after "majority" so it covers the union of the 2','line_number':288,'multiline':False]['text':' write concerns in case the user's write concern is stronger than majority','line_number':289,'multiline':False]['text':'*
 * Create the migration clone request BSON object to send to the source shard.
 *
 * 'sessionId' unique identifier for this migration.
 ','line_number':305,'multiline':True]['text':'*
 * Create the migration transfer mods request BSON object to send to the source shard.
 *
 * 'sessionId' unique identifier for this migration.
 ','line_number':318,'multiline':True]['text':' Early return, this shard already contains chunks, so there is no need for consolidate.','line_number':359,'multiline':False]['text':' Enabling / disabling these fail points pauses / resumes MigrateStatus::_go(), the thread which','line_number':380,'multiline':False]['text':' receives a chunk migration from the donor.','line_number':381,'multiline':False]['text':' namespace','line_number':395,'multiline':False]['text':' Ignoring this error because this is an optional parameter and we catch timeout','line_number':470,'multiline':False]['text':' exceptions later.','line_number':471,'multiline':False]['text':' TODO: If we are here, the migrate thread must have completed, otherwise _active above','line_number':569,'multiline':False]['text':' would be false, so this would never block. There is no better place with the current','line_number':570,'multiline':False]['text':' implementation where to join the thread.','line_number':571,'multiline':False]['text':' (Ignore FCV check): This feature flag doesn't have any upgrade/downgrade concerns.','line_number':579,'multiline':False]['text':' skipToCritSecTaken ','line_number':621,'multiline':True]['text':' This scope ensures that the guard is destroyed','line_number':688,'multiline':False]['text':' This check is necessary because the consumer thread uses killOp to propagate errors to the','line_number':690,'multiline':False]['text':' producer thread (this thread)','line_number':691,'multiline':False]['text':' The donor may have started the commit while the recipient is still busy processing','line_number':730,'multiline':False]['text':' the last batch of mods sent in the catch up phase. Allow some time for synching up.','line_number':731,'multiline':False]['text':' In STEADY state we must have active migration','line_number':753,'multiline':False]['text':' This check guards against the (unusual) situation where the current donor shard has stalled,','line_number':756,'multiline':False]['text':' during which the recipient shard crashed or timed out, and then began serving as a recipient','line_number':757,'multiline':False]['text':' or donor for another migration.','line_number':758,'multiline':False]['text':' Assigning a timeout slightly higher than the one used for network requests to the config','line_number':770,'multiline':False]['text':' server. Enough time to retry at least once in case of network failures (SERVER-51397).','line_number':771,'multiline':False]['text':' No need to hold _mutex from here on. Release it because the lines below will acquire','line_number':804,'multiline':False]['text':' other locks and holding the mutex could lead to deadlocks.','line_number':805,'multiline':False]['text':' This node may have stepped down and interrupted the migrateThread, which reset','line_number':809,'multiline':False]['text':' _sessionId. But the critical section may not have been released so it will be','line_number':810,'multiline':False]['text':' recovered by the new primary.','line_number':811,'multiline':False]['text':' Ensure the command's wait for writeConcern will until the recovery document is','line_number':816,'multiline':False]['text':' deleted.','line_number':817,'multiline':False]['text':' Fulfill the promise to let the migrateThread release the critical section.','line_number':828,'multiline':False]['text':' Wait for the migrateThread to finish','line_number':837,'multiline':False]['text':' Get the collection indexes and options from the donor shard.','line_number':862,'multiline':False]['text':' Do not hold any locks while issuing remote calls.','line_number':864,'multiline':False]['text':' Get indexes by calling listIndexes against the donor.','line_number':876,'multiline':False]['text':' The 'clustered' index is implicitly created upon clustered collection creation.','line_number':885,'multiline':False]['text':' Get collection options by calling listCollections against the from shard.','line_number':921,'multiline':False]['text':' The entire options include both the settable options under the 'options' field in the','line_number':939,'multiline':False]['text':' listCollections response, and the UUID under the 'info' field.','line_number':940,'multiline':False]['text':' Only attempt to drop a collection's indexes if we have valid metadata and the collection','line_number':975,'multiline':False]['text':' is sharded','line_number':976,'multiline':False]['text':' Determine which indexes exist on the local collection that don't exist on the donor's','line_number':987,'multiline':False]['text':' collection.','line_number':988,'multiline':False]['text':' If the local index doesn't exist on the donor and isn't the _id index, drop it.','line_number':1001,'multiline':False]['text':' 1. Create the collection (if it doesn't already exist) and create any indexes we are','line_number':1022,'multiline':False]['text':' missing (auto-heal indexes).','line_number':1023,'multiline':False]['text':' Checks that the collection's UUID matches the donor's.','line_number':1025,'multiline':False]['text':' Check if there are missing indexes on the recipient shard from the donor.','line_number':1055,'multiline':False]['text':' If it is the first migration, do not consider in-progress index builds. Otherwise,','line_number':1056,'multiline':False]['text':' consider in-progress index builds as ready. Then, if there are missing indexes and the','line_number':1057,'multiline':False]['text':' collection is not empty, fail the migration. On the other hand, if the collection is','line_number':1058,'multiline':False]['text':' empty, wait for index builds to finish if it is the first migration.','line_number':1059,'multiline':False]['text':' Only allow indexes to be copied if the collection does not have any documents.','line_number':1067,'multiline':False]['text':' If it is the first migration, mark waitForInProgressIndexBuildCompletion as true','line_number':1075,'multiline':False]['text':' to wait for index builds to be finished after releasing the locks.','line_number':1076,'multiline':False]['text':' Before taking the exclusive database lock for cloning the remaining indexes, wait for','line_number':1095,'multiline':False]['text':' index builds to finish if it is the first migration.','line_number':1096,'multiline':False]['text':' Take the exclusive database lock if the collection does not exist or indexes are missing','line_number':1108,'multiline':False]['text':' (needs auto-heal).','line_number':1109,'multiline':False]['text':' We do not have a collection by this name. Create it with the donor's options.','line_number':1128,'multiline':False]['text':' forceCSRAsUnknownAfterCollectionCreation ','line_number':1130,'multiline':True]['text':' No need to run any recovery.','line_number':1179,'multiline':False]['text':' The outer OperationContext is used to hold the session checked out for the','line_number':1184,'multiline':False]['text':' duration of the recipient's side of the migration. This guarantees that if the','line_number':1185,'multiline':False]['text':' donor shard has failed over, then the new donor primary cannot bump the','line_number':1186,'multiline':False]['text':' txnNumber on this session while this node is still executing the recipient side','line_number':1187,'multiline':False]['text':' (which is important because otherwise, this node may create orphans after the','line_number':1188,'multiline':False]['text':' range deletion task on this node has been processed). The recipient will periodically','line_number':1189,'multiline':False]['text':' yield this session, but will verify the txnNumber has not changed before continuing,','line_number':1190,'multiline':False]['text':' preserving the guarantee that orphans cannot be created after the txnNumber is','line_number':1191,'multiline':False]['text':' advanced.','line_number':1192,'multiline':False]['text':' autocommit ','line_number':1205,'multiline':True]['text':' startTransaction ','line_number':1206,'multiline':True]['text':' Run recovery if needed.','line_number':1212,'multiline':False]['text':' If we reached this point without having set _canReleaseCriticalSectionPromise we must be on','line_number':1226,'multiline':False]['text':' an error path. Just set the promise with error because it is illegal to leave it unset on','line_number':1227,'multiline':False]['text':' destruction.','line_number':1228,'multiline':False]['text':' Set the error message to MoveTimingHelper just before it is destroyed. The destructor','line_number':1252,'multiline':False]['text':' sends that message (among other things) to the ShardingLogging.','line_number':1253,'multiline':False]['text':' steps ','line_number':1261,'multiline':True]['text':' 1. Ensure any data which might have been left orphaned in the range being moved has been','line_number':1298,'multiline':False]['text':' deleted.','line_number':1299,'multiline':False]['text':' If the filtering metadata was cleared while the range deletion task was ongoing, then','line_number':1340,'multiline':False]['text':' 'waitForClean' would return immediately even though there really is an ongoing range','line_number':1341,'multiline':False]['text':' deletion task. For that case, we loop again until there is no conflicting task in','line_number':1342,'multiline':False]['text':' config.rangeDeletions','line_number':1343,'multiline':False]['text':' 2. Create the parent collection and its indexes, if needed.','line_number':1351,'multiline':False]['text':' The conventional usage of retryable writes is to assign statement id's to all of','line_number':1352,'multiline':False]['text':' the writes done as part of the data copying so that _recvChunkStart is','line_number':1353,'multiline':False]['text':' conceptually a retryable write batch. However, we are using an alternate approach to do','line_number':1354,'multiline':False]['text':' those writes under an AlternativeClientRegion because 1) threading the statement id's','line_number':1355,'multiline':False]['text':' through to all the places where they are needed would make this code more complex, and 2)','line_number':1356,'multiline':False]['text':' some of the operations, like creating the collection or building indexes, are not','line_number':1357,'multiline':False]['text':' currently supported in retryable writes.','line_number':1358,'multiline':False]['text':' Enable write blocking bypass to allow migrations to create the collection and indexes','line_number':1370,'multiline':False]['text':' even when user writes are blocked.','line_number':1371,'multiline':False]['text':' Get the global indexes and install them.','line_number':1378,'multiline':False]['text':' 3. Insert a pending range deletion task for the incoming range.','line_number':1390,'multiline':False]['text':' It is illegal to wait for write concern with a session checked out, so persist the','line_number':1402,'multiline':False]['text':' range deletion task with an immediately satsifiable write concern and then wait for','line_number':1403,'multiline':False]['text':' majority after yielding the session.','line_number':1404,'multiline':False]['text':' 4. Initial bulk clone','line_number':1434,'multiline':False]['text':' no lock needed, only the migrate thread looks.','line_number':1439,'multiline':False]['text':' Destructor of MigrationBatchFetcher is non-trivial. Therefore,','line_number':1442,'multiline':False]['text':' this scope has semantic significance.','line_number':1443,'multiline':False]['text':' 5. Do bulk of mods','line_number':1475,'multiline':False]['text':' There are no more pending modifications to be applied. End the catchup phase','line_number':1497,'multiline':False]['text':' Pause to wait for replication. This will prevent us from going into critical section','line_number':1551,'multiline':False]['text':' until we're ready.','line_number':1552,'multiline':False]['text':' 6. Wait for commit','line_number':1582,'multiline':False]['text':' Make sure we do at least one transfer after recv'ing the commit message. If we','line_number':1591,'multiline':False]['text':' aren't sure that at least one transfer happens *after* our state changes to','line_number':1592,'multiline':False]['text':' COMMIT_START, there could be mods still on the FROM shard that got logged','line_number':1593,'multiline':False]['text':' *after* our _transferMods but *before* the critical section.','line_number':1594,'multiline':False]['text':' We know we're finished when:','line_number':1625,'multiline':False]['text':' 1) The from side has told us that it has locked writes (COMMIT_START)','line_number':1626,'multiline':False]['text':' 2) We've checked at least one more time for un-transmitted mods','line_number':1627,'multiline':False]['text':' Only sleep if we aren't committing','line_number':1636,'multiline':False]['text':' Persist the migration recipient recovery document so that in case of failover, the','line_number':1663,'multiline':False]['text':' new primary will resume the MigrationDestinationManager and retake the critical','line_number':1664,'multiline':False]['text':' section.','line_number':1665,'multiline':False]['text':' Enter critical section. Ensure it has been majority commited before _recvChunkCommit','line_number':1674,'multiline':False]['text':' returns success to the donor, so that if the recipient steps down, the critical','line_number':1675,'multiline':False]['text':' section is kept taken while the donor commits the migration.','line_number':1676,'multiline':False]['text':' Make sure we don't overwrite a FAIL or ABORT state.','line_number':1689,'multiline':False]['text':' Wait until signaled to exit the critical section and then release it.','line_number':1744,'multiline':False]['text':' Deleted documents','line_number':1761,'multiline':False]['text':' Do not apply delete if doc does not belong to the chunk being migrated','line_number':1780,'multiline':False]['text':' justOne ','line_number':1795,'multiline':True]['text':' god ','line_number':1796,'multiline':True]['text':' fromMigrate ','line_number':1797,'multiline':True]['text':' Inserted or updated documents','line_number':1805,'multiline':False]['text':' do not apply insert/update if doc does not belong to the chunk being migrated','line_number':1824,'multiline':False]['text':' Exception will abort migration cleanly','line_number':1835,'multiline':False]['text':' We are in write lock here, so sure we aren't killing','line_number':1846,'multiline':False]['text':' Wait until the migrate thread is signaled to release the critical section','line_number':1898,'multiline':False]['text':' Refresh the filtering metadata','line_number':1905,'multiline':False]['text':' Release the critical section','line_number':1930,'multiline':False]['text':' Wait for the updates to the catalog cache to be written to disk before removing the','line_number':1946,'multiline':False]['text':' recovery document. This ensures that on case of stepdown, the new primary will know of a','line_number':1947,'multiline':False]['text':' placement version inclusive of the migration. NOTE: We rely on the','line_number':1948,'multiline':False]['text':' deleteMigrationRecipientRecoveryDocument call below to wait for the CatalogCache on-disk','line_number':1949,'multiline':False]['text':' persistence to be majority committed.','line_number':1950,'multiline':False]['text':' Delete the recovery document','line_number':1953,'multiline':False]['text':' Cancel any migrateThread work.','line_number':1967,'multiline':False]['text':' Wait for the migrateThread to finish.','line_number':1975,'multiline':False]['text':' namespace mongo','line_number':1981,'multiline':False]