['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The collection metadata has metadata information about a collection, in particular the
 * sharding information. It's main goal in life is to be capable of answering if a certain
 * document belongs to it or not. (In some scenarios such as chunk migration, a given
 * document is in a shard but cannot be accessed.)
 *
 * To build a collection from config data, please check the MetadataLoader. The methods
 * here allow building a new incarnation of a collection's metadata based on an existing
 * one (e.g, we're splitting in a given collection.).
 *
 * This class's chunk mapping is immutable once constructed.
 ','line_number':56,'multiline':True]['text':'*
     * Instantiates a metadata object, which represents an unsharded collection. This 'isSharded'
     * for this object will return false and it is illegal to use it for filtering.
     ','line_number':70,'multiline':True]['text':'*
     * The main way to construct CollectionMetadata is through MetadataLoader or clone() methods.
     *
     * "thisShardId" is the shard identity of this shard for purposes of answering questions like
     * "does this key belong to this shard"?
     ','line_number':76,'multiline':True]['text':'*
     * Returns whether this metadata object represents a sharded or unsharded collection.
     ','line_number':84,'multiline':True]['text':'*
     * Returns whether this metadata object represents an unsplittable collection.
     ','line_number':91,'multiline':True]['text':'*
     * Returns the resharding key if the coordinator state is such that the recipient is tailing
     * the donor's oplog.
     ','line_number':104,'multiline':True]['text':'*
     * Throws an exception if resharding fields currently exist in the collection metadata.
     ','line_number':110,'multiline':True]['text':'*
     * Returns the current shard's placement version for the collection or UNSHARDED if it is not
     * sharded.
     *
     * Will throw ShardInvalidatedForTargeting if _thisShardId is marked as stale by
     * the CollectionMetadata's current chunk manager.
     ','line_number':115,'multiline':True]['text':'*
     * Returns the current shard's latest placement timestamp or Timestamp(0, 0) if it is not
     * sharded. This value indicates the commit time of the latest placement change that this shard
     * participated in and is used to answer the question of "did any chunks move since some
     * timestamp".
     *
     * Will throw ShardInvalidatedForTargeting if _thisShardId is marked as stale by
     * the CollectionMetadata's current chunk manager.
     ','line_number':126,'multiline':True]['text':'*
     * Returns the current shard's placement version for the collection or UNSHARDED if it is not
     * sharded.
     *
     * Will not throw an exception if _thisShardId is marked as stale by the CollectionMetadata's
     * current chunk manager. Only use this function when logging the returned ChunkVersion. If the
     * caller must execute logic based on the returned ChunkVersion, use getShardPlacementVersion()
     * instead.
     ','line_number':139,'multiline':True]['text':'*
     * Returns the current collection placement version or UNSHARDED if it is not sharded.
     ','line_number':153,'multiline':True]['text':'*
     * Obtains the shard id with which this collection metadata is configured.
     ','line_number':160,'multiline':True]['text':'*
     * Returns true if 'key' contains exactly the same fields as the shard key pattern.
     ','line_number':173,'multiline':True]['text':'*
     * Returns just the shard key fields, if the collection is sharded, and the _id field, from
     * `doc`. Does not alter any field values (e.g. by hashing); values are copied verbatim.
     ','line_number':205,'multiline':True]['text':'*
     * Static version of the function above. Only use this for internal sharding operations where
     * shard key pattern is fixed and cannot change.
     ','line_number':211,'multiline':True]['text':'*
     * String output of the collection and shard placement versions.
     ','line_number':217,'multiline':True]['text':'','line_number':222,'multiline':False]['text':' Methods used for orphan filtering and general introspection of the chunks owned by the shard','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':'*
     * Returns true if the document with the given key belongs to this chunkset. If the key is empty
     * returns false. If key is not a valid shard key, the behaviour is undefined.
     ','line_number':231,'multiline':True]['text':'*
     * Given a key 'lookupKey' in the shard key range, get the next chunk which overlaps or is
     * greater than this key.  Returns true if a chunk exists, false otherwise.
     *
     * Passing a key that is not a valid shard key for this range results in undefined behavior.
     ','line_number':240,'multiline':True]['text':'*
     * Returns true if the argument range overlaps any chunk.
     ','line_number':248,'multiline':True]['text':'*
     * Returns true if this shard has any chunks for the collection.
     ','line_number':256,'multiline':True]['text':'*
     * Given a key in the shard key range, get the next range which overlaps or is greater than
     * this key.
     *
     * This allows us to do the following to iterate over all orphan ranges:
     *
     * ChunkRange range;
     * BSONObj lookupKey = metadata->getMinKey();
     * boost::optional<ChunkRange> range;
     * while((range = metadata->getNextOrphanRange(receiveMap, lookupKey))) {
     *     lookupKey = range->maxKey;
     * }
     *
     * @param lookupKey passing a key that does not belong to this metadata is undefined.
     * @param receiveMap is an extra set of chunks not considered orphaned.
     *
     * @return orphanRange the output range. Note that the NS is not set.
     ','line_number':261,'multiline':True]['text':'*
     * Returns all the chunks which are contained on this shard.
     ','line_number':282,'multiline':True]['text':'*
     * BSON output of the chunks metadata into a BSONArray
     ','line_number':287,'multiline':True]['text':' The full routing table for the collection or boost::none if the collection is not sharded','line_number':308,'multiline':False]['text':' The identity of this shard, for the purpose of answering "key belongs to me" queries. If the','line_number':311,'multiline':False]['text':' collection is not sharded (_cm is boost::none), then this value will be empty.','line_number':312,'multiline':False]['text':' namespace mongo','line_number':316,'multiline':False]