['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Service to manage DDL locks.
 ','line_number':49,'multiline':True]['text':'*
     * ScopedBaseDDLLock will hold a DDL lock for the given resource without performing any check.
     ','line_number':54,'multiline':True]['text':' Attributes','line_number':99,'multiline':False]['text':' Timeout value, which specifies that if the lock is not available immediately, no attempt','line_number':110,'multiline':False]['text':' should be made to wait for it to become free.','line_number':111,'multiline':False]['text':' RAII-style class to acquire a DDL lock on the given database','line_number':114,'multiline':False]['text':'*
         * Constructs a ScopedDatabaseDDLLock object
         *
         * @db      Database to lock.
         * @reason 	Reason for which the lock is being acquired (e.g. 'createCollection').
         * @mode    Lock mode.
         *
         * Throws:
         *     ErrorCodes::LockBusy in case the timeout is reached.
         *     ErrorCodes::LockTimeout when not being on kPrimaryAndRecovered state and the internal
         *            timeout is reached.
         *     ErrorCategory::Interruption in case the operation context is interrupted.
         *     ErrorCodes::IllegalOperation in case of not being on the db primary shard.
         *
         * It's caller's responsibility to ensure this lock is acquired only on primary node of
         * replica set and released on step-down.
         ','line_number':117,'multiline':True]['text':' RAII-style class to acquire a DDL lock on the given collection. The database DDL lock will','line_number':143,'multiline':False]['text':' also be implicitly acquired in the corresponding intent mode.','line_number':144,'multiline':False]['text':'*
         * Constructs a ScopedCollectionDDLLock object
         *
         * @ns      Collection to lock.
         * @reason 	Reason for which the lock is being acquired (e.g. 'createCollection').
         * @mode    Lock mode.
         *
         * Throws:
         *     ErrorCodes::LockBusy in case the timeout is reached.
         *     ErrorCodes::LockTimeout when not being on kPrimaryAndRecovered state and the internal
         *            timeout is reached.
         *     ErrorCategory::Interruption in case the operation context is interrupted.
         *     ErrorCodes::IllegalOperation in case of not being on the db primary shard.
         *
         * It's caller's responsibility to ensure this lock is acquired only on primary node of
         * replica set and released on step-down.
         ','line_number':147,'multiline':True]['text':' Make sure _dbLock is instantiated before _collLock to don't break the hierarchy locking','line_number':170,'multiline':False]['text':' acquisition order','line_number':171,'multiline':False]['text':'*
     * Retrieves the DDLLockManager singleton.
     ','line_number':179,'multiline':True]['text':'*
         * When the node become secondary the state is set to kPaused and all the lock acquisitions
         * will be blocked except if the request comes from a DDLCoordinator.
         ','line_number':199,'multiline':True]['text':'*
         * After the node became primary and the ShardingDDLCoordinatorService already re-acquired
         * all the previously acquired DDL locks for ongoing DDL coordinators the state transition
         * to kPrimaryAndRecovered and the lock acquisitions are unblocked.
         ','line_number':205,'multiline':True]['text':' Stores how many holders either are trying to acquire or are holding a specific resource at','line_number':230,'multiline':False]['text':' that moment.','line_number':231,'multiline':False]['text':'*
     * Register/Unregister a resourceName into the ResourceCatalog for debuggability purposes.
     ','line_number':234,'multiline':True]['text':' namespace mongo','line_number':248,'multiline':False]