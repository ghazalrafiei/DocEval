['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace resharding','line_number':120,'multiline':False]['text':'*
 * Construct to encapsulate cancellation tokens and related semantics on the ReshardingCoordinator.
 ','line_number':158,'multiline':True]['text':'*
     * Returns whether the any token has been canceled.
     ','line_number':170,'multiline':True]['text':'*
     * Returns whether the abort token has been canceled, indicating that the resharding operation
     * was explicitly aborted by an external user.
     ','line_number':177,'multiline':True]['text':'*
     * Returns whether the stepdownToken has been canceled, indicating that the shard's underlying
     * replica set node is stepping down or shutting down.
     ','line_number':185,'multiline':True]['text':'*
     * Cancels the source created by this class, in order to indicate to holders of the abortToken
     * that the resharding operation has been aborted.
     ','line_number':193,'multiline':True]['text':' The token passed in by the PrimaryOnlyService runner that is canceled when this shard's','line_number':226,'multiline':False]['text':' underlying replica set node is stepping down or shutting down.','line_number':227,'multiline':False]['text':' The source created by inheriting from the stepdown token.','line_number':230,'multiline':False]['text':' The token to wait on in cases where a user wants to wait on either a resharding operation','line_number':233,'multiline':False]['text':' being aborted or the replica set node stepping/shutting down.','line_number':234,'multiline':False]['text':' The source created by inheriting from the abort token.','line_number':237,'multiline':False]['text':' Provides the means to cancel the commit monitor (e.g., due to receiving the commit command).','line_number':238,'multiline':False]['text':' A source created by inheriting from the stepdown token.','line_number':241,'multiline':False]['text':' Provides the means to cancel the quiesce period.','line_number':242,'multiline':False]['text':' The service implemented its own conflict check before this method was added.','line_number':268,'multiline':False]['text':'*
     * Tries to abort all active reshardCollection operations. Note that this doesn't differentiate
     * between operations interrupted due to stepdown or abort. Callers who wish to confirm that
     * the abort successfully went through should follow up with an inspection on the resharding
     * coordinator docs to ensure that they are empty.
     *
     * This call skips quiesce periods for all aborted coordinators.
     ','line_number':281,'multiline':True]['text':'*
     * Attempts to cancel the underlying resharding operation using the abort token.
     * If 'skipQuiescePeriod' is set, will also skip the quiesce period used to allow retries.
     ','line_number':313,'multiline':True]['text':'*
     * Replace in-memory representation of the CoordinatorDoc
     ','line_number':319,'multiline':True]['text':'*
     * Returns a Future that will be resolved when all work associated with this Instance has
     * completed running.
     ','line_number':329,'multiline':True]['text':'*
     * Returns a Future that will be resolved when the service has written the coordinator doc to
     * storage
     ','line_number':337,'multiline':True]['text':'*
     * Returns a Future that will be resolved when the service has finished its quiesce period
     * and deleted the coordinator document.
     ','line_number':345,'multiline':True]['text':'*
     * This coordinator will not enter the critical section until this member
     * function is called at least once. There are two ways this is called:
     *
     * - Metrics-based heuristics will automatically call this at a strategic
     *   time chosen to minimize the critical section's time window.
     *
     * - The "commitReshardCollection" command is an elaborate wrapper for this
     *   function, providing a shortcut to make the critical section happen
     *   sooner, even if it takes longer to complete.
     ','line_number':357,'multiline':True]['text':'*
     * Construct the initial chunks splits and write down the initial coordinator state to storage.
     ','line_number':380,'multiline':True]['text':'*
     * Runs resharding up through preparing to persist the decision.
     ','line_number':386,'multiline':True]['text':'*
     * Runs resharding through persisting the decision until cleanup.
     ','line_number':392,'multiline':True]['text':'*
     * Inform all of the donors and recipients of this resharding operation to begin.
     ','line_number':399,'multiline':True]['text':'*
     * Runs abort cleanup logic when only the coordinator is aware of the resharding operation.
     *
     * Only safe to call if an unrecoverable error is encountered before the coordinator completes
     * its transition to kPreparingToDonate.
     ','line_number':405,'multiline':True]['text':'
     * Runs abort cleanup logic when both the coordinator and participants are aware of the
     * resharding operation.
     *
     * Only safe to call if the coordinator progressed past kInitializing before encountering an
     * unrecoverable error.
     ','line_number':414,'multiline':True]['text':'*
     * Checks if the new shard key is same as the existing one in order to return early and avoid
     * redundant work.
     ','line_number':424,'multiline':True]['text':'*
     * Runs resharding operation to completion from _initializeCoordinator().
     ','line_number':431,'multiline':True]['text':'*
     * Keep the instance in a quiesced state in order to handle retries.
     ','line_number':437,'multiline':True]['text':'*
     * Does the following writes:
     * 1. Inserts the coordinator document into config.reshardingOperations
     * 2. Adds reshardingFields to the config.collections entry for the original collection
     *
     * Transitions to 'kInitializing'.
     ','line_number':443,'multiline':True]['text':'*
     * Calculates the participant shards and target chunks under the new shard key, then does the
     * following writes:
     * 1. Updates the coordinator state to 'kPreparingToDonate'.
     * 2. Updates reshardingFields to reflect the state change on the original collection entry.
     * 3. Inserts an entry into config.collections for the temporary collection
     * 4. Inserts entries into config.chunks for ranges based on the new shard key
     * 5. Upserts entries into config.tags for any zones associated with the new shard key
     *
     * Transitions to 'kPreparingToDonate'.
     ','line_number':452,'multiline':True]['text':'*
     * Waits on _reshardingCoordinatorObserver to notify that all donors have picked a
     * minFetchTimestamp and are ready to donate. Transitions to 'kCloning'.
     ','line_number':465,'multiline':True]['text':'*
     * Starts a new coordinator commit monitor to periodically query recipient shards for the
     * remaining operation time, and engage the critical section as soon as the remaining time falls
     * below a configurable threshold (i.e., `remainingReshardingOperationTimeThresholdMillis`).
     ','line_number':472,'multiline':True]['text':'*
     * Waits on _reshardingCoordinatorObserver to notify that all recipients have finished
     * cloning. Transitions to 'kApplying'.
     ','line_number':479,'multiline':True]['text':'*
     * Waits on _reshardingCoordinatorObserver to notify that all recipients have finished
     * applying oplog entries. Transitions to 'kBlockingWrites'.
     ','line_number':486,'multiline':True]['text':'*
     * Waits on _reshardingCoordinatorObserver to notify that all recipients have entered
     * strict-consistency.
     ','line_number':493,'multiline':True]['text':'*
     * Does the following writes:
     * 1. Updates the config.collections entry for the new sharded collection
     * 2. Updates config.chunks entries for the new sharded collection
     *
     * Transitions to 'kCommitting'.
     ','line_number':500,'multiline':True]['text':'*
     * Sends a _shardsvrNotifyShardingEvent commands to the primary shard of the resharded
     * collection to trigger the generation of the related internal op entry.
     ','line_number':509,'multiline':True]['text':'*
     * Waits on _reshardingCoordinatorObserver to notify that:
     * 1. All recipient shards have renamed the temporary collection to the original collection
     *    namespace or have finished aborting, and
     * 2. All donor shards that were not also recipient shards have dropped the original
     *    collection or have finished aborting.
     *
     * Transitions to 'kDone'.
     ','line_number':516,'multiline':True]['text':'*
     * Updates the entry for this resharding operation in config.reshardingOperations and the
     * catalog entries for the original and temporary namespaces in config.collections.
     ','line_number':528,'multiline':True]['text':'*
     * Updates the entry for this resharding operation in config.reshardingOperations to the
     * quiesced state, or removes it if quiesce isn't being done.  Removes the resharding fields
     * from the catalog entries.
     ','line_number':539,'multiline':True]['text':'*
     * Sends the command to the specified participants asynchronously.
     ','line_number':547,'multiline':True]['text':'*
     * Sends '_flushRoutingTableCacheUpdatesWithWriteConcern' to ensure donor state machine creation
     * by the time the refresh completes.
     ','line_number':561,'multiline':True]['text':'*
     * Sends '_flushRoutingTableCacheUpdatesWithWriteConcern' to ensure recipient state machine
     * creation by the time the refresh completes.
     ','line_number':568,'multiline':True]['text':'*
     * Sends '_flushReshardingStateChange' to all recipient shards.
     *
     * When the coordinator is in a state before 'kCommitting', refreshes the temporary
     * namespace. When the coordinator is in a state at or after 'kCommitting', refreshes the
     * original namespace.
     ','line_number':575,'multiline':True]['text':'*
     * Sends '_flushReshardingStateChange' for the original namespace to all donor shards.
     ','line_number':584,'multiline':True]['text':'*
     * Sends '_shardsvrCommitReshardCollection' to all participant shards.
     ','line_number':589,'multiline':True]['text':'*
     * Sends '_shardsvrAbortReshardCollection' to all participant shards.
     ','line_number':595,'multiline':True]['text':'*
     * Best effort attempt to update the chunk imbalance metrics.
     ','line_number':601,'multiline':True]['text':'*
     * When called with Status::OK(), the coordinator will eventually enter the critical section.
     *
     * When called with an error Status, the coordinator will never enter the critical section.
     ','line_number':606,'multiline':True]['text':' Waits for majority replication of the latest opTime unless token is cancelled.','line_number':613,'multiline':False]['text':'*
     * Print a log containing the information of this resharding operation.
     ','line_number':616,'multiline':True]['text':' The unique key for a given resharding operation. InstanceID is an alias for BSONObj. The','line_number':621,'multiline':False]['text':' value of this is the UUID that will be used as the collection UUID for the new sharded','line_number':622,'multiline':False]['text':' collection. The object looks like: {_id: 'reshardingUUID'}','line_number':623,'multiline':False]['text':' The primary-only service instance corresponding to the coordinator instance. Not owned.','line_number':626,'multiline':False]['text':' The in-memory representation of the immutable portion of the document in','line_number':633,'multiline':False]['text':' config.reshardingOperations.','line_number':634,'multiline':False]['text':' Observes writes that indicate state changes for this resharding operation and notifies','line_number':637,'multiline':False]['text':' 'this' when all donors/recipients have entered some state so that 'this' can transition','line_number':638,'multiline':False]['text':' states.','line_number':639,'multiline':False]['text':' The updated coordinator state document.','line_number':642,'multiline':False]['text':' Holds the cancellation tokens relevant to the ReshardingCoordinator.','line_number':645,'multiline':False]['text':' ThreadPool used by CancelableOperationContext.','line_number':648,'multiline':False]['text':' CancelableOperationContext must have a thread that is always available to it to mark its','line_number':649,'multiline':False]['text':' opCtx as killed when the cancelToken has been cancelled.','line_number':650,'multiline':False]['text':'*
     * Must be locked while the `_canEnterCritical` promise is being fulfilled.
     ','line_number':654,'multiline':True]['text':'*
     * Must be locked while the _abortCalled is being set to true.
     ','line_number':660,'multiline':True]['text':'*
     * Coordinator does not enter the critical section until this is fulfilled.
     * Can be set by "commitReshardCollection" command or by metrics determining
     * that it's okay to proceed.
     ','line_number':667,'multiline':True]['text':' Promise that is fulfilled when coordinator doc has been written.','line_number':674,'multiline':False]['text':' Promise that is fulfilled when the chain of work kicked off by run() has completed.','line_number':677,'multiline':False]['text':' Promise that is fulfilled when the quiesce period is finished','line_number':680,'multiline':False]['text':' Callback handle for scheduled work to handle critical section timeout.','line_number':683,'multiline':False]['text':' Used to catch the case when an abort() is called but the cancellation source (_ctHolder) has','line_number':691,'multiline':False]['text':' not been initialized.','line_number':692,'multiline':False]['text':' If we recovered a completed resharding coordinator (quiesced) on failover, the','line_number':699,'multiline':False]['text':' resharding status when it actually ran.','line_number':700,'multiline':False]['text':' namespace mongo','line_number':704,'multiline':False]