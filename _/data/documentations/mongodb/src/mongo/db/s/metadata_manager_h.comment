['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':36,'multiline':False]['text':'*
 * Contains filtering metadata for a sharded collection.
 ','line_number':60,'multiline':True]['text':'*
     * Increments the usage counter of the active metadata and returns an RAII object, which
     * corresponds to it.
     *
     * Holding a reference on a particular instance of the metadata means that orphan cleanup is not
     * allowed to run and delete chunks which are covered by that metadata. When the returned
     * ScopedCollectionDescription goes out of scope, the reference counter on the metadata will be
     * decremented and if it reaches to zero, orphan cleanup may proceed.
     ','line_number':73,'multiline':True]['text':'*
     * Returns the placement version of the active metadata object.
     ','line_number':85,'multiline':True]['text':'*
     * Returns the UUID of the collection tracked by this MetadataManager object.
     ','line_number':94,'multiline':True]['text':'*
     * Returns the number of CollectionMetadata objects being maintained on behalf of running
     * queries.  The actual number may vary after it returns, so this is really only useful for unit
     * tests.
     ','line_number':101,'multiline':True]['text':'*
     * Returns the number of metadata objects that have been set to boost::none in
     * _retireExpiredMetadata(). The actual number may vary after it returns, so this is really only
     * useful for unit tests.
     ','line_number':108,'multiline':True]['text':'*
     * Returns a future marked as ready when all the ongoing queries retaining the range complete
     ','line_number':117,'multiline':True]['text':' Management of the _metadata list is implemented in RangePreserver','line_number':123,'multiline':False]['text':'*
     * Represents an instance of what the filtering metadata for this collection was at a particular
     * point in time along with a counter of how many queries are still using it.
     ','line_number':126,'multiline':True]['text':'*
         * Promise that will be signaled when this object is destroyed.
         *
         * In the case where this CollectionMetadataTracker may refer to orphaned documents for one
         * or more ranges, the corresponding futures from this promise are used as barriers to
         * prevent range deletion tasks for those ranges from proceeding until this object is
         * destroyed, to guarantee that ranges aren't deleted while active queries can still access
         * them.
         ','line_number':144,'multiline':True]['text':'*
     * Retires any metadata that has fallen out of use, potentially allowing range deletions to
     * proceed which were waiting for active queries using these metadata objects to complete.
     ','line_number':158,'multiline':True]['text':'*
     * Pushes current set of chunks, if any, to _metadataInUse, replaces it with newMetadata.
     ','line_number':164,'multiline':True]['text':'*
     * Finds the most-recently pushed metadata that depends on `range`, or nullptr if none. The
     * result is usable until the lock is released.
     ','line_number':169,'multiline':True]['text':' ServiceContext from which to obtain instances of global support objects','line_number':175,'multiline':False]['text':' Namespace for which this manager object applies','line_number':178,'multiline':False]['text':' The UUID for the collection tracked by this manager object.','line_number':181,'multiline':False]['text':' Mutex to protect the state below','line_number':184,'multiline':False]['text':' Contains a list of collection metadata for the same collection uuid, ordered in','line_number':187,'multiline':False]['text':' chronological order based on the refreshes that occurred. The entry at _metadata.back() is','line_number':188,'multiline':False]['text':' the most recent metadata and is what is returned to new queries. The rest are previously','line_number':189,'multiline':False]['text':' active collection metadata instances still in use by active server operations or cursors.','line_number':190,'multiline':False]['text':' namespace mongo','line_number':194,'multiline':False]