['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Sets up this fixture as a mongod with a storage engine, OpObserver, and as a member of a replica
 * set.
 *
 * Additionally, provides an interface for initializing sharding components, mimicking the process
 * by which a real config or shard server does sharding initialization. Provides a set of default
 * components (including a NetworkInterface/TaskExecutor subsystem backed by the NetworkTestEnv),
 * but allows subclasses to replace any component with its real implementation, a mock, or nullptr.
 *
 * The ordering of the base classes here matter because both ShardingTestFixtureCommon and
 * ServiceContextMongoDTest inherit from ServiceContextTest, which overrides the global service
 * context.
 ','line_number':53,'multiline':True]['text':' Set a catalog cache to be used when initializing the Grid. Must be called before','line_number':75,'multiline':False]['text':' initializeGlobalShardingStateForMongodForTest() in order to take effect.','line_number':76,'multiline':False]['text':'*
     * Initializes sharding components according to the cluster role in
     * serverGlobalParams.clusterRole and puts the components on the Grid, mimicking the
     * initialization done by an actual config or shard mongod server.
     *
     * It is illegal to call this if serverGlobalParams.clusterRole is not ClusterRole::ShardServer
     * or ClusterRole::ConfigServer.
     ','line_number':79,'multiline':True]['text':' Syntactic sugar for getting sharding components off the Grid, if they have been initialized.','line_number':89,'multiline':False]['text':'*
     * Shuts down the TaskExecutorPool and remembers that it has been shut down, so that it is not
     * shut down again on tearDown.
     *
     * Not safe to call from multiple threads.
     ','line_number':98,'multiline':True]['text':' Methods for creating and returning sharding components. Some of these methods have been','line_number':108,'multiline':False]['text':' implemented to return the real implementation of the component as the default, while others','line_number':109,'multiline':False]['text':' return a mock or nullptr. Subclasses can override any of these methods to create and','line_number':110,'multiline':False]['text':' initialize a real implementation, a mock, or nullptr, as needed.','line_number':111,'multiline':False]['text':' Warning: If a component takes ownership of another component for which a real or mock is','line_number':113,'multiline':False]['text':' being used, the component must also be real or mock implementation, so that it can actually','line_number':114,'multiline':False]['text':' take the ownership.','line_number':115,'multiline':False]['text':'*
     * Base class returns ReplicationCoordinatorMock.
     ','line_number':117,'multiline':True]['text':'*
     * Base class returns a real implementation of ShardRegistry.
     ','line_number':123,'multiline':True]['text':'*
     * Base class returns nullptr.
     ','line_number':128,'multiline':True]['text':'*
     * Base class returns nullptr.
     ','line_number':133,'multiline':True]['text':'*
     * Base class returns CatalogCache created from the CatalogCacheLoader set on the
     * ServiceContext.
     ','line_number':138,'multiline':True]['text':'*
     * Setups the op observer listeners depending on cluster role.
     ','line_number':144,'multiline':True]['text':'*
     * Base class returns a TaskExecutorPool with a fixed TaskExecutor and a set of arbitrary
     * executors containing one TaskExecutor, each backed by a NetworkInterfaceMock/ThreadPoolMock
     * subsytem.
     ','line_number':150,'multiline':True]['text':' Records if a component has been shut down, so that it is only shut down once.','line_number':163,'multiline':False]['text':' Whether the test fixture should set a committed snapshot during setup so that tests can','line_number':166,'multiline':False]['text':' perform majority reads without doing any writes.','line_number':167,'multiline':False]['text':' namespace mongo','line_number':171,'multiline':False]