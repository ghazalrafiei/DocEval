['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Use the provided shardIds from presetReshardedChunks to construct the','line_number':109,'multiline':False]['text':' recipient list.','line_number':110,'multiline':False]['text':' Create two chunks, one on each shard with the given namespace and epoch','line_number':458,'multiline':False]['text':' Returns the chunk for the donor shard.','line_number':469,'multiline':False]['text':' Only the chunk corresponding to shard0000 is stored as a donor in the coordinator state','line_number':477,'multiline':False]['text':' document constructed.','line_number':478,'multiline':False]['text':' Advance the term and last applied opTime. We retain the timestamp component of the','line_number':488,'multiline':False]['text':' current last applied opTime to avoid log messages from','line_number':489,'multiline':False]['text':' ReplClientInfo::setLastOpToSystemLastOpTime() about the opTime having moved backwards.','line_number':490,'multiline':False]['text':' Some opCtx can be created via AlternativeClientRegion and not tied to any resharding','line_number':506,'multiline':False]['text':' cancellation token, so we also need to simulate the repl step down killOp thread.','line_number':507,'multiline':False]['text':' Resharding coordinator doc changes are run under WithTransaction, which uses','line_number':538,'multiline':False]['text':' AlternativeSessionRegion.','line_number':539,'multiline':False]['text':' PauseDuringStateTransitions relies on updates to the coordinator state document on disk to','line_number':712,'multiline':False]['text':' decide when to unpause. kInitializing is the initial state written to disk (i.e. not an','line_number':713,'multiline':False]['text':' update), but we still want to verify correct behavior if the transaction to transition to','line_number':714,'multiline':False]['text':' kInitializing fails, so call failNextTransaction() before calling','line_number':715,'multiline':False]['text':' runReshardingToCompletion().','line_number':716,'multiline':False]['text':' Ensure that promises are not fulfilled on the new coordinator.','line_number':773,'multiline':False]['text':'*
 * Test stepping down right when coordinator doc is being updated. Causing the change to be
 * rolled back and redo the work again on step up.
 ','line_number':786,'multiline':True]['text':' Skip kInitializing, as we don't write that state transition to storage.','line_number':792,'multiline':False]['text':' Pretend that the recipients are already ready to commit.','line_number':844,'multiline':False]['text':' We have to fake this again as the effects are not persistent.','line_number':871,'multiline':False]['text':' 'done' state is never written to storage so don't wait for it.','line_number':876,'multiline':False]['text':' Join the coordinator if it has not yet been cleaned up.','line_number':883,'multiline':False]['text':' config.chunks should have been moved to the new UUID','line_number':891,'multiline':False]['text':' config.collections should not have the document with the old UUID.','line_number':903,'multiline':False]['text':' Check that reshardCollection keeps allowMigrations setting intact.','line_number':948,'multiline':False]['text':' Asserts that a resharding op with same namespace and same shard key fails with','line_number':969,'multiline':False]['text':' ReshardingCoordinatorServiceConflictingOperationInProgress','line_number':970,'multiline':False]['text':' Asserts that a resharding op with different namespace and different shard key fails with','line_number':983,'multiline':False]['text':' ConflictingOperationInProgress.','line_number':984,'multiline':False]['text':' Asserts that a resharding op with same namespace and different shard key fails with','line_number':996,'multiline':False]['text':' ConflictingOperationInProgress.','line_number':997,'multiline':False]['text':' namespace','line_number':1023,'multiline':False]['text':' namespace mongo','line_number':1024,'multiline':False]