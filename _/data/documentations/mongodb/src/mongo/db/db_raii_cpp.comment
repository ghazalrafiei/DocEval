['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Performs some checks to determine whether the operation is compatible with a lock-free read.
 * Multi-doc transactions are not supported, nor are operations holding an exclusive lock.
 ','line_number':91,'multiline':True]['text':' Lock-free reads are not supported in multi-document transactions.','line_number':96,'multiline':False]['text':' Lock-free reads are not supported when performing a write.','line_number':97,'multiline':False]['text':' Lock-free reads are not supported if a storage txn is already open w/o the lock-free reads','line_number':98,'multiline':False]['text':' operation flag set.','line_number':99,'multiline':False]['text':'*
 * Performs validation of special locking requirements for certain namespaces.
 ','line_number':105,'multiline':True]['text':' In most cases we expect modifications for system.views to upgrade MODE_IX to MODE_X before','line_number':111,'multiline':False]['text':' taking the lock. One exception is a query by UUID of system.views in a transaction. Usual','line_number':112,'multiline':False]['text':' queries of system.views (by name, not UUID) within a transaction are rejected. However, if','line_number':113,'multiline':False]['text':' the query is by UUID we can't determine whether the namespace is actually system.views until','line_number':114,'multiline':False]['text':' we take the lock here. So we have this one last assertion.','line_number':115,'multiline':False]['text':'*
 * Returns true if 'nss' is a view. False if the view doesn't exist.
 ','line_number':121,'multiline':True]['text':'*
 * Returns true if 'nss' is sharded. False otherwise.
 ','line_number':130,'multiline':True]['text':'*
 * Resolves all NamespaceStringOrUUIDs in the input vector by using the input catalog to call
 * CollectionCatalog::resolveSecondaryNamespacesOrUUIDs.
 *
 * If any of the input NamespaceStringOrUUIDs is found to correspond to a view, or to a sharded
 * collection, returns boost::none.
 *
 * Otherwise, returns a vector of NamespaceStrings that the input NamespaceStringOrUUIDs resolved
 * to.
 ','line_number':155,'multiline':True]['text':'
 * Establish a capped snapshot if necessary on the provided namespace.
 ','line_number':188,'multiline':True]['text':' At this point, we know all secondary namespaces map to the same collections/views,','line_number':214,'multiline':False]['text':' because the catalog has not changed.','line_number':215,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' It's still possible that some collection has become sharded since before opening the','line_number':217,'multiline':False]['text':' snapshot, in which case we would need to retry and acquire a new snapshot, so we must','line_number':218,'multiline':False]['text':' check for that as well.','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':' If some secondary namespace was already a view or sharded (i.e.','line_number':221,'multiline':False]['text':' resolvedSecondaryNamespaces is boost::none), then we don't care whether any namespaces','line_number':222,'multiline':False]['text':' are newly sharded, so this will be false.','line_number':223,'multiline':False]['text':' If no secondary namespace has become sharded since opening a snapshot, we have found a','line_number':229,'multiline':False]['text':' consistent catalog and snapshot and can stop retrying.','line_number':230,'multiline':False]['text':' Readers that use afterClusterTime have already waited at a higher level for the','line_number':244,'multiline':False]['text':' all_durable time to advance to a specified optime, and they assume the read timestamp','line_number':245,'multiline':False]['text':' of the operation is at least that waited-for timestamp. For kNoOverlap, which is','line_number':246,'multiline':False]['text':' the minimum of lastApplied and all_durable, this invariant ensures that','line_number':247,'multiline':False]['text':' afterClusterTime reads do not choose a read timestamp older than the one requested.','line_number':248,'multiline':False]['text':' This assertion protects operations from reading inconsistent data on secondaries when','line_number':255,'multiline':False]['text':' using the default ReadSource of kNoTimestamp.','line_number':256,'multiline':False]['text':' Reading at lastApplied on secondaries is the safest behavior and is enabled for all user','line_number':258,'multiline':False]['text':' and DBDirectClient reads using 'local' and 'available' readConcerns. If an internal','line_number':259,'multiline':False]['text':' operation wishes to read without a timestamp during a batch, a ShouldNotConflict can','line_number':260,'multiline':False]['text':' suppress this fatal assertion with the following considerations:','line_number':261,'multiline':False]['text':' * The operation is not reading replicated data in a replication state where batch','line_number':262,'multiline':False]['text':'   application is active OR','line_number':263,'multiline':False]['text':' * Reading inconsistent, out-of-order data is either inconsequential or required by','line_number':264,'multiline':False]['text':'   the operation.','line_number':265,'multiline':False]['text':' If the caller is reading without a timestamp, then there is a possibility that this reader','line_number':267,'multiline':False]['text':' may unintentionally see inconsistent data during a batch. However there are a couple','line_number':268,'multiline':False]['text':' exceptions to this:','line_number':269,'multiline':False]['text':' * If we are not enforcing contraints, then we are ourselves within batch application or some','line_number':270,'multiline':False]['text':'   similar state where this is expected','line_number':271,'multiline':False]['text':' * Certain namespaces are applied serially in oplog application, and therefore can be safely','line_number':272,'multiline':False]['text':'   read without a timestamp','line_number':273,'multiline':False]['text':' namespace','line_number':282,'multiline':False]['text':' Deduplicate all namespaces for Top reporting on destruct.','line_number':294,'multiline':False]['text':' Update stats for each namespace.','line_number':318,'multiline':False]['text':' Acquire the collection locks. If there's only one lock, then it can simply be taken. If','line_number':342,'multiline':False]['text':' there are many, however, the locks must be taken in _ascending_ ResourceId order to avoid','line_number':343,'multiline':False]['text':' deadlocks across threads.','line_number':344,'multiline':False]['text':' Wait for a configured amount of time after acquiring locks if the failpoint is enabled','line_number':362,'multiline':False]['text':' On secondaries, we have to guarantee we read at a consistent state, so we must read at the','line_number':370,'multiline':False]['text':' lastApplied timestamp, which is set after each complete batch.','line_number':371,'multiline':False]['text':' Once we have our locks, check whether or not we should override the ReadSource that was','line_number':373,'multiline':False]['text':' set before acquiring locks.','line_number':374,'multiline':False]['text':' Update readSource in case it was updated.','line_number':377,'multiline':False]['text':' Check that the collections are all safe to use. First acquire collection from our catalog','line_number':381,'multiline':False]['text':' compatible with the specified 'readTimestamp'. Creates and places a compatible PIT collection','line_number':382,'multiline':False]['text':' reference in the 'catalog' if needed and the collection exists at that PIT.','line_number':383,'multiline':False]['text':' Validate primary collection.','line_number':387,'multiline':False]['text':' Check secondary collections and verify they are valid for use.','line_number':390,'multiline':False]['text':' Check that none of the namespaces are views or sharded collections, which are not','line_number':392,'multiline':False]['text':' supported for secondary namespaces.','line_number':393,'multiline':False]['text':' Ensure that the readTimestamp is compatible with the latest Collection instances or','line_number':399,'multiline':False]['text':' create PIT instances in the 'catalog' (if the collections existed at that PIT).','line_number':400,'multiline':False]['text':' Fetch and store the sharding collection description data needed for use during the','line_number':415,'multiline':False]['text':' operation. The shardVersion will be checked later if the shard filtering metadata is','line_number':416,'multiline':False]['text':' fetched, ensuring both that the collection description info used here and the routing','line_number':417,'multiline':False]['text':' table are consistent with the read request's shardVersion.','line_number':418,'multiline':False]['text':'','line_number':419,'multiline':False]['text':' Note: sharding versioning for an operation has no concept of multiple collections.','line_number':420,'multiline':False]['text':' No Collection found, try and lookup view.','line_number':445,'multiline':False]['text':' We only need to look up a view if an expected collection UUID was not provided. If this','line_number':450,'multiline':False]['text':' namespace were a view, the collection UUID mismatch check would have failed above.','line_number':451,'multiline':False]['text':' wantedVersion ','line_number':466,'multiline':True]['text':' There is neither a collection nor a view for the namespace, so if we reached to this point','line_number':477,'multiline':False]['text':' there are the following possibilities depending on the received shard version:','line_number':478,'multiline':False]['text':'   1. ShardVersion::UNSHARDED: The request comes from a router and the operation entails the','line_number':479,'multiline':False]['text':'      implicit creation of an unsharded collection. We can continue.','line_number':480,'multiline':False]['text':'   2. ChunkVersion::IGNORED: The request comes from a router that broadcasted the same to all','line_number':481,'multiline':False]['text':'      shards, but this shard doesn't own any chunks for the collection. We can continue.','line_number':482,'multiline':False]['text':'   3. boost::none: The request comes from client directly connected to the shard. We can','line_number':483,'multiline':False]['text':'      continue.','line_number':484,'multiline':False]['text':'   4. Any other value: The request comes from a stale router on a collection or a view which','line_number':485,'multiline':False]['text':'      was deleted time ago (or the user manually deleted it from from underneath of sharding).','line_number':486,'multiline':False]['text':'      We return a stale config error so that the router recovers.','line_number':487,'multiline':False]['text':' wantedVersion ','line_number':491,'multiline':True]['text':'*
 * Used as a return value for the following function.
 ','line_number':516,'multiline':True]['text':'*
 * This function is responsible for acquiring an in-memory version of the CollectionCatalog and
 * opening a snapshot such that the data contained in the in-memory CollectionCatalog matches the
 * data in the durable catalog in that snapshot.
 *
 * It is used by readers who do not have any collection locks (a.k.a lock-free readers), and so
 * there may be ongoing DDL operations concurrent with this function being called. This means we
 * must take care to handle cases where the state of the catalog changes during the course of
 * execution of this function.
 *
 * The high-level algorithm here is:
 *  * Get the latest version of the catalog
 *  * Open a snapshot
 *  * Get the latest version of the catalog and check if it changed since opening the snapshot. If
 *    it did, we need to retry, because that means that the version of the durable catalog that
 *    would be read from the snapshot would be different from the in-memory CollectionCatalog.
 *
 * Note that it is still possible for the version of the CollectionCatalog obtained to be
 * different from the durable catalog if there's a DDL operation pending commit at precisely the
 * right time. This is okay because the CollectionCatalog tracks DDL entries pending commit and
 * lock-free readers will check this state for the namespace they care about before deciding whether
 * to use an entry from the CollectionCatalog or whether to read catalog information directly from
 * the durable catalog instead.
 *
 * Also note that this retry algorithm is only necessary for readers who are not reading with a
 * timestamp. Readers at points in time in the past (e.g. readers with the kProvided ReadSource)
 * always will read directly from the durable catalog, and so it is not important for the in-memory
 * CollectionCatalog to match the durable catalog for these readers. In the future, we may want to
 * consider separating the code paths for timestamped and untimestamped writes, but for now, both
 * cases flow through this same function.
 *
 * We also check for replication state changes before and after opening a snapshot, since the
 * replication state determines the whether readers without a timestamp must read from the storage
 * engine without a timestamp or whether they should read at the last applied timestamp. If the
 * replication state changes, the opened snapshot is abandoned and the process is retried.
 ','line_number':526,'multiline':True]['text':' Loop until we get a consistent catalog and snapshot or throw an exception.','line_number':569,'multiline':False]['text':' The read source used can change depending on replication state, so we must fetch the repl','line_number':571,'multiline':False]['text':' state beforehand, to compare with afterwards.','line_number':572,'multiline':False]['text':' When a query yields it releases its snapshot, and any point-in-time instantiated','line_number':577,'multiline':False]['text':' collections stored on the snapshot decoration are destructed. At the start of a query,','line_number':578,'multiline':False]['text':' collections are fetched using a namespace. However, when a query is restoring from','line_number':579,'multiline':False]['text':' yield it attempts to fetch collections by UUID. It's possible for a UUID to no longer','line_number':580,'multiline':False]['text':' resolve to a namespace in the latest collection catalog if that collection was dropped','line_number':581,'multiline':False]['text':' while the query was yielding. This doesn't conclude that the collection is inaccessible','line_number':582,'multiline':False]['text':' at an earlier point-in-time as the data files may still be on disk. This namespace is','line_number':583,'multiline':False]['text':' used to determine if the read source needs to be changed and we only do this if the','line_number':584,'multiline':False]['text':' original read source is kNoTimestamp or kLastApplied. If it's neither of the two we can','line_number':585,'multiline':False]['text':' safely continue.','line_number':586,'multiline':False]['text':' The UUID cannot be resolved to a namespace in the latest catalog, but we allow the','line_number':593,'multiline':False]['text':' call to continue which eventually calls','line_number':594,'multiline':False]['text':' CollectionCatalog::establishConsistentCollection() which will read from the durable','line_number':595,'multiline':False]['text':' catalog to create a new collection instance if it exists in the snapshot. This allows','line_number':596,'multiline':False]['text':' query yields, which use UUID, to restore where the collection is committed to the','line_number':597,'multiline':False]['text':' storage engine but not yet committed into the local catalog.','line_number':598,'multiline':False]['text':' This may modify the read source on the recovery unit for opCtx if the current read source','line_number':603,'multiline':False]['text':' is either kNoTimestamp or kLastApplied.','line_number':604,'multiline':False]['text':' If the collection requires capped snapshots (i.e. it is unreplicated, capped, not the','line_number':613,'multiline':False]['text':' oplog, and not clustered), establish a capped snapshot. This must happen before opening','line_number':614,'multiline':False]['text':' the storage snapshot to ensure a reader using tailable cursors would not miss any writes.','line_number':615,'multiline':False]['text':' See comments in getCollectionFromCatalog for why it is safe to establish the capped','line_number':616,'multiline':False]['text':' snapshot here, on the Collection object in the latest version of the catalog, even if','line_number':617,'multiline':False]['text':' openCollection is eventually called to construct a Collection object from the durable','line_number':618,'multiline':False]['text':' catalog.','line_number':619,'multiline':False]['text':'*
 * Helper function to acquire a consistent catalog and storage snapshot without holding the RSTL or
 * collection locks.
 *
 * Should only be used to setup lock-free reads in a global/db context. Not safe to use for reading
 * on collections.
 *
 * Pass in boost::none as dbName to setup for a global context
 ','line_number':655,'multiline':True]['text':' AutoGetCollectionForReadBase can choose a read source based on the current replication','line_number':668,'multiline':False]['text':' state. Therefore we must fetch the repl state beforehand, to compare with afterwards.','line_number':669,'multiline':False]['text':' Check that the sharding database version matches our read.','line_number':674,'multiline':False]['text':' Check that the sharding database version matches our read.','line_number':676,'multiline':False]['text':' We must open a storage snapshot consistent with the fetched in-memory Catalog instance.','line_number':680,'multiline':False]['text':' The Catalog instance and replication state after opening a snapshot will be compared with','line_number':681,'multiline':False]['text':' the previously acquired state. If either does not match, then this loop will retry lock','line_number':682,'multiline':False]['text':' acquisition and read source selection until there is a match.','line_number':683,'multiline':False]['text':' Verify that the catalog has not changed while we opened the storage snapshot. If the','line_number':686,'multiline':False]['text':' catalog is unchanged, then the requested Collection is also guaranteed to be the same.','line_number':687,'multiline':False]['text':' Returns a collection reference compatible with the specified 'readTimestamp'. Creates and','line_number':733,'multiline':False]['text':' places a compatible PIT collection reference in the 'catalog' if needed and the collection','line_number':734,'multiline':False]['text':' exists at that PIT.','line_number':735,'multiline':False]['text':' Note: This call to resolveNamespaceStringOrUUID must happen after getCollectionFromCatalog','line_number':737,'multiline':False]['text':' above, since getCollectionFromCatalog may call openCollection, which could change the result','line_number':738,'multiline':False]['text':' of namespace resolution.','line_number':739,'multiline':False]['text':'allowReadSourceChange=','line_number':777,'multiline':True]['text':' If we setup using UUID and the resolved namespace is pointing to an unreplicated','line_number':782,'multiline':False]['text':' namespace (or the oplog), then we should retry the setup after resetting the read source','line_number':783,'multiline':False]['text':' here using the resolved namespace. This only needs to be done once.','line_number':784,'multiline':False]['text':' namespace','line_number':801,'multiline':False]['text':' Calls to CollectionCatalog::resolveNamespaceStringOrUUID (called from','line_number':818,'multiline':False]['text':' acquireCatalogStateForNamespace) will result in a NamespaceNotFound error if the','line_number':819,'multiline':False]['text':' collection corresponding to the UUID passed as a parameter no longer exists. This can','line_number':820,'multiline':False]['text':' happen if this collection was dropped while the query was yielding.','line_number':821,'multiline':False]['text':'','line_number':822,'multiline':False]['text':' In this case, the query subsystem expects that this CollectionPtr::RestoreFn will','line_number':823,'multiline':False]['text':' result in a nullptr, so NamespaceNotFound errors are converted to nullptr here.','line_number':824,'multiline':False]['text':' This has to come before LFRBlock.','line_number':832,'multiline':False]['text':' Supported lock-free reads should only ever have an open storage snapshot prior to','line_number':844,'multiline':False]['text':' calling this helper if it is a nested lock-free operation. The storage snapshot and','line_number':845,'multiline':False]['text':' in-memory state used across lock=free reads must be consistent.','line_number':846,'multiline':False]['text':' If this instance is nested and lock-free, then we do not want to adjust any setting, but','line_number':857,'multiline':False]['text':' we do need to set up the Collection reference.','line_number':858,'multiline':False]['text':' Nested operations should never yield as we don't yield when the global lock is held','line_number':875,'multiline':False]['text':' recursively. But this is not known when we create the Query plan for this sub operation.','line_number':876,'multiline':False]['text':' Pretend that we are yieldable but don't allow yield to actually be called.','line_number':877,'multiline':False]['text':' Initialize _statsTracker here only if we are acquiring by nss. In the by-uuid case we need','line_number':969,'multiline':False]['text':' to first resolve the uuid to nss, so we defer the construction of _statsTracker.','line_number':970,'multiline':False]['text':' We disable the expectedUUID option as we must check it after all the shard versioning','line_number':981,'multiline':False]['text':' checks.','line_number':982,'multiline':False]['text':' For acquisitions by uuid, construct _statsTracker after having resolved the uuid to a','line_number':986,'multiline':False]['text':' nss (i.e. after having constructed _autoCollForRead).','line_number':987,'multiline':False]['text':' getMore is special and should be handled elsewhere','line_number':1025,'multiline':False]['text':' update & delete check shard version as part of the write executor','line_number':1026,'multiline':False]['text':' path, so no need to check them here as well','line_number':1027,'multiline':False]['text':'dbName','line_number':1103,'multiline':True]['text':' If in an interrupt, don't record any stats.','line_number':1130,'multiline':False]['text':' It is possible to have no lock after saving the lock state and being interrupted while','line_number':1131,'multiline':False]['text':' waiting to restore.','line_number':1132,'multiline':False]['text':' Use IX locks for multi-statement transactions; otherwise, use IS locks.','line_number':1152,'multiline':False]['text':' Pre-images and change collection tables prune old content using untimestamped truncates. A','line_number':1171,'multiline':False]['text':' read establishing a snapshot at a point in time (PIT) may see data inconsistent with that','line_number':1172,'multiline':False]['text':' PIT: data that should have been present at that PIT will be missing if it was truncated,','line_number':1173,'multiline':False]['text':' since a non-truncated operation effectively overwrites history.','line_number':1174,'multiline':False]['text':' Ban snapshot reads on capped collections.','line_number':1185,'multiline':False]['text':' Disallow snapshot reads and causal consistent majority reads on config.transactions','line_number':1190,'multiline':False]['text':' outside of transactions to avoid running the collection at a point-in-time in the middle','line_number':1191,'multiline':False]['text':' of a secondary batch. Such reads are unsafe because config.transactions updates are','line_number':1192,'multiline':False]['text':' coalesced on secondaries. Majority reads without an afterClusterTime is allowed because','line_number':1193,'multiline':False]['text':' they are allowed to return arbitrarily stale data. We allow kNoTimestamp and kLastApplied','line_number':1194,'multiline':False]['text':' reads because they must be from internal readers given the snapshot/majority readConcern','line_number':1195,'multiline':False]['text':' (e.g. for session checkout).','line_number':1196,'multiline':False]['text':' namespace mongo','line_number':1210,'multiline':False]