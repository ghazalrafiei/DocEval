['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Converts 'batch' into a vector of UpdateOpEntries.
 ','line_number':78,'multiline':True]['text':'*
 * Creates a merge strategy which uses update semantics to perform a merge operation.
 ','line_number':99,'multiline':True]['text':'*
 * Creates a merge strategy which uses update semantics to perform a merge operation and ensures
 * that each document in the batch has a matching document in the 'ns' collection (note that a
 * matching document may not be modified as a result of an update operation, yet it still will be
 * counted as matching). If at least one document doesn't have a match, this strategy returns an
 * error.
 ','line_number':118,'multiline':True]['text':'*
 * Creates a merge strategy which uses insert semantics to perform a merge operation.
 ','line_number':146,'multiline':True]['text':' The batch stores replacement style updates, but for this "insert" style of $merge we'd','line_number':158,'multiline':False]['text':' like to just insert the new document without attempting any sort of replacement.','line_number':159,'multiline':False]['text':'*
 * Creates a batched object transformation function which wraps 'obj' into the given 'updateOp'
 * operator.
 ','line_number':170,'multiline':True]['text':'*
 * Extracts the fields of $merge 'on' from 'doc' and returns the key as a BSONObj. Throws if any
 * field of the 'on' extracted from 'doc' is nullish or an array.
 ','line_number':181,'multiline':True]['text':' namespace','line_number':203,'multiline':False]['text':'*
 * Returns a map that contains descriptors for all supported merge strategies for the $merge stage.
 * Each descriptor is constant and stateless and thus, can be shared by all $merge stages. A
 * descriptor is accessed using a pair of whenMatched/whenNotMatched merge modes, which defines the
 * semantics of the merge operation. When a $merge stage is created, a merge descriptor is selected
 * from this map based on the requested merge modes, and then passed to the $merge stage
 * constructor.
 ','line_number':205,'multiline':True]['text':' Rather than defining this map as a global object, we'll wrap the static map into a function','line_number':214,'multiline':False]['text':' to prevent static initialization order fiasco which may happen since ActionType instances','line_number':215,'multiline':False]['text':' are also defined as global objects and there is no way to tell the linker which objects must','line_number':216,'multiline':False]['text':' be initialized first. By wrapping the map into a function we can guarantee that it won't be','line_number':217,'multiline':False]['text':' initialized until the first use, which is when the program already started and all global','line_number':218,'multiline':False]['text':' variables had been initialized.','line_number':219,'multiline':False]['text':' whenMatched: replace, whenNotMatched: insert','line_number':221,'multiline':False]['text':' whenMatched: replace, whenNotMatched: fail','line_number':229,'multiline':False]['text':' whenMatched: replace, whenNotMatched: discard','line_number':237,'multiline':False]['text':' whenMatched: merge, whenNotMatched: insert','line_number':245,'multiline':False]['text':' whenMatched: merge, whenNotMatched: fail','line_number':253,'multiline':False]['text':' whenMatched: merge, whenNotMatched: discard','line_number':261,'multiline':False]['text':' whenMatched: keepExisting, whenNotMatched: insert','line_number':269,'multiline':False]['text':' whenMatched: [pipeline], whenNotMatched: insert','line_number':277,'multiline':False]['text':' whenMatched: [pipeline], whenNotMatched: fail','line_number':285,'multiline':False]['text':' whenMatched: [pipeline], whenNotMatched: discard','line_number':293,'multiline':False]['text':' whenMatched: fail, whenNotMatched: insert','line_number':301,'multiline':False]['text':' Generate an _id if the uniqueKey includes _id but the document doesn't have one.','line_number':341,'multiline':False]['text':' namespace mongo','line_number':375,'multiline':False]