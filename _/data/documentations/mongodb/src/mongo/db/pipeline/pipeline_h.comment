['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Enabling the disablePipelineOptimization fail point will stop the aggregate command from
 * attempting to optimize the pipeline or the pipeline stages. Neither DocumentSource::optimizeAt()
 * nor DocumentSource::optimize() will be attempted.
 ','line_number':84,'multiline':True]['text':'*
 * A Pipeline object represents a list of DocumentSources and is responsible for optimizing the
 * pipeline.
 ','line_number':101,'multiline':True]['text':'*
     * A SplitState specifies whether the pipeline is currently unsplit, split for the shards, or
     * split for merging.
     ','line_number':109,'multiline':True]['text':'*
     * The list of default supported match expression features.
     ','line_number':115,'multiline':True]['text':'*
     * The match expression features allowed when running a pipeline with $geoNear.
     ','line_number':124,'multiline':True]['text':'*
     * Parses a Pipeline from a vector of BSONObjs then invokes the optional 'validator' callback
     * with a reference to the newly created Pipeline. If no validator callback is given, this
     * method assumes that we're parsing a top-level pipeline. Throws an exception if it failed to
     * parse or if any exception occurs in the validator. The returned pipeline is not optimized,
     * but the caller may convert it to an optimized pipeline by calling optimizePipeline().
     *
     * It is illegal to create a pipeline using an ExpressionContext which contains a collation that
     * will not be used during execution of the pipeline. Doing so may cause comparisons made during
     * parse-time to return the wrong results.
     ','line_number':134,'multiline':True]['text':'*
     * Parses sub-pipelines from a $facet aggregation. Like parse(), but skips top-level
     * validators.
     ','line_number':150,'multiline':True]['text':'*
     * Like parse, but takes a BSONElement instead of a vector of objects. 'arrElem' must be an
     * array of objects.
     ','line_number':159,'multiline':True]['text':'*
     * Creates a Pipeline from an existing SourceContainer.
     *
     * Returns a non-OK status if any stage is in an invalid position. For example, if an $out stage
     * is present but is not the last stage.
     ','line_number':168,'multiline':True]['text':'*
     * Returns true if the provided aggregation command has an $out or $merge stage.
     ','line_number':177,'multiline':True]['text':'*
     * Parses a Pipeline from a vector of BSONObjs representing DocumentSources. The state of the
     * returned pipeline will depend upon the supplied MakePipelineOptions:
     * - The boolean opts.optimize determines whether the pipeline will be optimized.
     * - If opts.attachCursorSource is false, the pipeline will be returned without attempting to
     * add an initial cursor source.
     ','line_number':182,'multiline':True]['text':'*
     * Creates a Pipeline from an AggregateCommandRequest. This preserves any aggregation options
     * set on the aggRequest. The state of the returned pipeline will depend upon the supplied
     * MakePipelineOptions:
     * - The boolean opts.optimize determines whether the pipeline will be optimized.
     *
     * This function requires opts.attachCursorSource to be true.
     * This function throws if parsing the pipeline set on aggRequest failed.
     ','line_number':194,'multiline':True]['text':'*
     * Optimize the given pipeline after the stage that 'itr' points to.
     *
     * Returns a valid iterator that points to the new "end of the pipeline": i.e., the stage that
     * comes after 'itr' in the newly optimized pipeline.
     ','line_number':209,'multiline':True]['text':'*
     * Applies optimizeAt() to all stages in the given pipeline after the stage that 'itr' points
     * to.
     *
     * Returns a valid iterator that points to the new "end of the pipeline": i.e., the stage that
     * comes after 'itr' in the newly optimized pipeline.
     ','line_number':218,'multiline':True]['text':'*
     * Callers can optionally specify 'newExpCtx' to construct the deep clone with it. This will be
     * used to construct all the cloned DocumentSources as well.
     ','line_number':234,'multiline':True]['text':'*
     * Sets the OperationContext of 'pCtx' to nullptr and calls 'detachFromOperationContext()' on
     * all underlying DocumentSources.
     ','line_number':245,'multiline':True]['text':'*
     * Sets the OperationContext of 'pCtx' to 'opCtx', and reattaches all underlying DocumentSources
     * to 'opCtx'.
     ','line_number':251,'multiline':True]['text':'*
     * Recursively validate the operation contexts associated with this pipeline. Return true if
     * all document sources and subpipelines point to the given operation context.
     ','line_number':257,'multiline':True]['text':'*
     * Releases any resources held by this pipeline such as PlanExecutors or in-memory structures.
     * Must be called before deleting a Pipeline.
     *
     * There are multiple cleanup scenarios:
     *  - This Pipeline will only ever use one OperationContext. In this case the PipelineDeleter
     *    will automatically call dispose() before deleting the Pipeline, and the owner need not
     *    call dispose().
     *  - This Pipeline may use multiple OperationContexts over its lifetime. In this case it
     *    is the owner's responsibility to call dispose() with a valid OperationContext before
     *    deleting the Pipeline.
     ','line_number':263,'multiline':True]['text':'*
     * Checks to see if disk is ever used within the pipeline.
     ','line_number':281,'multiline':True]['text':'*
     * Communicates to the pipeline which part of a split pipeline it is when the pipeline has been
     * split in two.
     ','line_number':286,'multiline':True]['text':'*
     * If the pipeline starts with a stage which is or includes a query predicate (e.g. a $match),
     * returns a BSON object representing that query. Otherwise, returns an empty BSON object.
     ','line_number':294,'multiline':True]['text':'*
     * Returns 'true' if the pipeline must merge on the primary shard.
     ','line_number':300,'multiline':True]['text':'*
     * Returns a specific ShardId that should be merger for this pipeline or boost::none if it is
     * not needed.
     ','line_number':305,'multiline':True]['text':'*
     * Returns 'true' if the pipeline must merge on mongoS.
     ','line_number':311,'multiline':True]['text':'*
     * Returns 'true' if any stage in the pipeline must run on a shard.
     ','line_number':316,'multiline':True]['text':'*
     * Returns 'true' if any stage in the pipeline requires being run on all hosts within targeted
     * shards.
     ','line_number':321,'multiline':True]['text':'*
     * Returns Status::OK() if the pipeline can run on mongoS, but is not obliged to; that is, it
     * can run either on mongoS or on a shard.
     ','line_number':327,'multiline':True]['text':'*
     * Returns true if this pipeline must only run on mongoS. Can be called on unsplit or merge
     * pipelines, but not on the shards part of a split pipeline.
     ','line_number':333,'multiline':True]['text':'*
     * Modifies the pipeline, optimizing it by combining and swapping stages.
     ','line_number':339,'multiline':True]['text':'*
     * Modifies the container, optimizing it by combining and swapping stages.
     ','line_number':344,'multiline':True]['text':'*
     * Returns any other collections involved in the pipeline in addition to the collection the
     * aggregation is run on. All namespaces returned are the names of collections, after views have
     * been resolved.
     ','line_number':349,'multiline':True]['text':'*
     * Helpers to serialize a pipeline.
     ','line_number':356,'multiline':True]['text':' The initial source is special since it varies between mongos and mongod.','line_number':367,'multiline':False]['text':'*
     * Returns the next result from the pipeline, or boost::none if there are no more results.
     ','line_number':372,'multiline':True]['text':'*
     * Write the pipeline's operators to a std::vector<Value>, providing the level of detail
     * specified by 'verbosity'.
     ','line_number':377,'multiline':True]['text':'*
     * Returns the dependencies needed by this pipeline. 'unavailableMetadata' should reflect what
     * metadata is not present on documents that are input to the front of the pipeline. If
     * 'unavailableMetadata' is specified, this method will throw if any of the dependencies
     * reference unavailable metadata.
     ','line_number':384,'multiline':True]['text':'*
     * Populate 'refs' with the variables referred to by this pipeline, including user and system
     * variables but excluding $$ROOT. Note that field path references are not considered variables.
     ','line_number':392,'multiline':True]['text':'*
     * Returns the dependencies needed by the SourceContainer. 'unavailableMetadata' should reflect
     * what metadata is not present on documents that are input to the front of the pipeline. If
     * 'unavailableMetadata' is specified, this method will throw if any of the dependencies
     * reference unavailable metadata.
     ','line_number':398,'multiline':True]['text':'*
     * Stitch together the source pointers by calling setSource() for each source in 'container'.
     * This function must be called any time the order of stages within the container changes, e.g.
     * in optimizeContainer().
     ','line_number':417,'multiline':True]['text':'*
     * Removes and returns the first stage of the pipeline. Returns nullptr if the pipeline is
     * empty.
     ','line_number':424,'multiline':True]['text':'*
     * Returns a pointer to the first stage of the pipeline, or a nullptr if the pipeline is empty.
     ','line_number':430,'multiline':True]['text':'*
     * Removes and returns the last stage of the pipeline. Returns nullptr if the pipeline is empty.
     ','line_number':435,'multiline':True]['text':'*
     * Adds the given stage to the end of the pipeline.
     ','line_number':440,'multiline':True]['text':'*
     * Removes and returns the first stage of the pipeline if its name is 'targetStageName'.
     * Returns nullptr if there is no first stage with that name.
     ','line_number':445,'multiline':True]['text':'*
     * Removes and returns the first stage of the pipeline if its name is 'targetStageName' and the
     * given 'predicate' function, if present, returns 'true' when called with a pointer to the
     * stage. Returns nullptr if there is no first stage which meets these criteria.
     ','line_number':451,'multiline':True]['text':'*
     * Appends another pipeline to the existing pipeline.
     * NOTE: The other pipeline will be destroyed.
     ','line_number':459,'multiline':True]['text':'*
     * Performs common validation for top-level or facet pipelines. Throws if the pipeline is
     * invalid.
     *
     * Includes checking for illegal stage positioning. For example, $out must be at the end, while
     * a $match stage with a text query must be at the start. Note that this method accepts an
     * initial source as the first stage, which is illegal for $facet pipelines.
     ','line_number':465,'multiline':True]['text':'*
     * PipelineD is a "sister" class that has additional functionality for the Pipeline. It exists
     * because of linkage requirements. Pipeline needs to function in mongod and mongos. PipelineD
     * contains extra functionality required in mongod, and which can't appear in mongos because the
     * required symbols are unavailable for linking there. Consider PipelineD to be an extension of
     * this class for mongod only.
     ','line_number':475,'multiline':True]['text':'*
     * For commands that return multiple pipelines, this value will contain the type of pipeline.
     * This can be populated to the cursor so consumers do not have to depend on order or guess
     * which pipeline is which. Default to a regular result pipeline.
     ','line_number':484,'multiline':True]['text':'*
     * Get a string representation of the pipeline type.
     ','line_number':491,'multiline':True]['text':'*
     * Helper for public methods that parse pipelines from vectors of different types.
     ','line_number':507,'multiline':True]['text':'*
     * Stitch together the source pointers by calling setSource() for each source in '_sources'.
     * This function must be called any time the order of stages within the pipeline changes, e.g.
     * in optimizePipeline().
     ','line_number':518,'multiline':True]['text':'*
     * Asserts whether operation contexts associated with this pipeline are consistent across
     * sources.
     ','line_number':525,'multiline':True]['text':'*
 * This class will ensure a Pipeline is disposed before it is deleted.
 ','line_number':538,'multiline':True]['text':'*
     * Constructs an empty deleter. Useful for creating a
     * unique_ptr<Pipeline, PipelineDeleter> without populating it.
     ','line_number':543,'multiline':True]['text':'*
     * If an owner of a std::unique_ptr<PlanExecutor, PlanExecutor::Deleter> wants to assume
     * responsibility for calling PlanExecutor::dispose(), they can call dismissDisposal(). If
     * dismissed, a PipelineDeleter will not call dispose() when deleting the PlanExecutor.
     ','line_number':551,'multiline':True]['text':'*
     * Calls dispose() on 'pipeline', unless this PipelineDeleter has been dismissed.
     ','line_number':560,'multiline':True]['text':' It is illegal to call this method on a default-constructed PipelineDeleter.','line_number':564,'multiline':False]['text':'*
 * A 'ServiceContext' decorator that by default does nothing but can be set to generate a
 * complimentary, metadata pipeline to the one passed in.
 ','line_number':578,'multiline':True]['text':' namespace mongo','line_number':589,'multiline':False]