['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/multi_index/detail/bidir_node_iterator.hpp"','line_number':38,'multiline':False]['text':' IWYU pragma: no_include "boost/multi_index/detail/hash_index_iterator.hpp"','line_number':39,'multiline':False]['text':' IWYU pragma: no_include "boost/multi_index/detail/index_node_base.hpp"','line_number':40,'multiline':False]['text':'*
 * A least-recently-used cache from key to a vector of values. It does not implement any default
 * size limit, but includes the ability to evict down to both a specific number of elements, and
 * down to a specific amount of memory. Memory usage includes only the size of the elements in the
 * cache at the time of insertion, not the overhead incurred by the data structures in use.
 ','line_number':67,'multiline':True]['text':' This includes the size of both key and the documents.','line_number':79,'multiline':False]['text':' boost::multi_index_container provides a system for implementing a cache. Here, we create','line_number':83,'multiline':False]['text':' a container of 'Cached', that is both sequenced, and has a unique index on the 'Cached::key'.','line_number':84,'multiline':False]['text':' From this, we are able to evict the least-recently-used member, and maintain key uniqueness.','line_number':85,'multiline':False]['text':'*
     * Constructs the underlying cache data structure in such a way that respects the
     * ValueComparator. This requires instantiating the multi_index_container with comparison and
     * hasher functions obtained from the comparator.
     ','line_number':93,'multiline':True]['text':'*
     * Insert "value" into the set with key "key". If "key" is already present in the cache, move it
     * to the middle of the cache. Otherwise, insert a new key in the middle of the cache.
     *
     * Note: In this case, "middle" refers to the sequence of the cache, where "first" is the item
     * most recently used, and "last" is the item least recently used.
     *
     * We insert and update in the middle because when a key is updated, we can't assume that it's
     * important to keep in the cache (i.e., that we should put it at the front), but it's also
     * likely we don't want to evict it (i.e., we want to make sure it isn't at the back).
     ','line_number':105,'multiline':True]['text':' Get an iterator to the middle of the container.','line_number':117,'multiline':False]['text':' Find the cache entry, or create one if it doesn't exist yet.','line_number':124,'multiline':False]['text':' We did not insert due to a duplicate key. Update the cached doc, moving it to the','line_number':129,'multiline':False]['text':' middle of the cache.','line_number':130,'multiline':False]['text':' Add the doc to the cache entry.','line_number':134,'multiline':False]['text':'*
     * Evict the least-recently-used item.
     ','line_number':142,'multiline':True]['text':'*
     * Evicts from the cache until there are 'num' items remaining.
     ','line_number':160,'multiline':True]['text':'*
     * Returns the number of elements in the cache.
     ','line_number':169,'multiline':True]['text':'*
     * Evict items in LRU order until the cache's size is less than or equal to "maximum".
     ','line_number':176,'multiline':True]['text':'*
     * Clear the cache, resetting the memory usage.
     ','line_number':185,'multiline':True]['text':'*
     * Retrieve the vector of values with key "key". Returns nullptr if not found.
     ','line_number':193,'multiline':True]['text':' namespace mongo','line_number':217,'multiline':False]