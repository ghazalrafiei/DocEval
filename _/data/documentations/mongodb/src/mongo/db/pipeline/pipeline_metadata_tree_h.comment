['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':36,'multiline':False]['text':'*
 * A simple representation of an Aggregation Pipeline and functions for building it.
 * PipelineMetadataTree has no default contents and reflects only the shape of stages. Each stage
 * can be occupied by a a specified type in order to have the tree carry any form of arbitrary
 * metadata. A PipelineMetadataTree is intended to be zipped along with another representation of a
 * pipeline in order to supplement the other representation's metadata.
 ','line_number':56,'multiline':True]['text':'*
 * An alternate representation of a stage in an Aggregation Pipeline which contains handles to all
 * stages it depends on, forming a tree. Each Stage tracks a specific piece of metadata of type 'T'.
 * Since Stage forms a tree rather than a DAG, there are no handles from $facet component pipelines
 * to their owning $facet stage but there exist pointers from any $facet stage to its component
 * pipelines.
 ','line_number':65,'multiline':True]['text':'*
     * Construct an individual Stage from its components.
     ','line_number':74,'multiline':True]['text':'*
     * Specification of the move constructor intentionally inhibits compiler generation of a copy
     * constructor. This is intentional since accidental copies could be deterimental for
     * performance. This constructor is correctly formed only if the contents type 'T' also has a
     * defined or defaulted move constructor. The correct definition of this constructor is
     * essential for invoking 'makeTree'.
     ','line_number':84,'multiline':True]['text':'*
     * The move assignment operator is subject to the same conditions as the move constructor.
     ','line_number':93,'multiline':True]['text':'*
     * A comparison operator is correctly defined if the type 'T' has a defined comparison operator.
     * This is optional.
     ','line_number':98,'multiline':True]['text':'*
     * The child occuring directly before this stage in the pipeline. This is empty for the first
     * Stage in any pipeline or sub-pipeline.
     ','line_number':111,'multiline':True]['text':'*
     * Additional children are the ends of sub-pipelines that feed into this stage. This vector is
     * non-empty only for stages which operate on one or more sub-pipelines such as $facet.
     ','line_number':117,'multiline':True]['text':'*
 * Following convention, the nested detail namespace should be treated as private and not accessed
 * directly.
 ','line_number':135,'multiline':True]['text':'*
 * Produces additional children to be included in a given Stage if it has sub-pipelines. Included
 * are off-the-end contents that would be generated for those sub-pipelines if they had one
 * additional Stage. A map 'initialStageContents' is provided in order to populate sub-pipelines
 * that, in a graph model, never source from the current pipeline but only feed into it. For
 * example, the initial stage contents are used to seed the contents of $lookup sub-pipelines. The
 * current Stage's contents are provided to copy and populate sub-pipelines that source from the
 * current pipeline and feed back into it through a successive edge. For example, $facet
 * sub-pipelines are populated using a copy of the current Stage's contents.
 ','line_number':146,'multiline':True]['text':'*
 * Produces a stage and returns a function to determine the contents for the next Stage. Given are
 * an optional reference to a previous stage which is disengaged at the start of a pipeline or sub-
 * pipeline. Also given is 'reshapeContents', a function to produce the content of the current
 * stage. The current DocumentSource to build a corresponding Stage for is given through 'source'.
 * If there is no previous Stage, the entry from the 'initialStageContents' matching the current
 * namespace is used to populate the new Stage. If the entry is missing, an exception is thrown.
 ','line_number':185,'multiline':True]['text':' namespace detail','line_number':257,'multiline':False]['text':'*
 * Builds a Stage from a Pipeline. Initial contents for the first pipline stage must be provided. A
 * function 'propagator' is neccesary to determine how to build the contents of all further stages.
 * A stage will receive the built contents from its directly preceding stage. Initial contents must
 * be placed in 'initialStageContents'. Any expressive lookup pipelines require an additional
 * initial content element in this queue.
 *
 * The arguments to propagator will be actualized with the following:
 * 'T&' - In general, the contents from the previous stage, initial stages of the main pipeline and
 * $lookup pipelines receive an element off the queue 'initialStageContents'. $facet receives a copy
 * of its parent's contents.
 * 'std::vector<T>&' - Completed contents from sub-pipelines. $facet's additional children and
 * expressive $lookup's final contents will be manifested in here. Note that these will be
 * "off-the-end", that is constructed from the final stage of a sub-pipeline and not actually
 * contained in that pipeline. This vector is empty for most stages which have only one child.
 * 'DocumentSource&' - the current stage of the 'pipeline' a Stage object is being built for.
 *
 * Returns the final Stage<T> of the pipeline along with the final off-the-end metadata T from
 * calling the 'propagator' function on the last source.
 ','line_number':259,'multiline':True]['text':' For empty pipelines, there's no Stage<T> to return and the output schema is the same as the','line_number':284,'multiline':False]['text':' input schema.','line_number':285,'multiline':False]['text':'*
 * Walk a PipelineMetadataTree along with a Pipeline. Passes each Stage and its corresponding
 * DocumentSource to 'zipper' two-by-two.
 ','line_number':297,'multiline':True]['text':' namespace mongo::pipeline_metadata_tree','line_number':309,'multiline':False]