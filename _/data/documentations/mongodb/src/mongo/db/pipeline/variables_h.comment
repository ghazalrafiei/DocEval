['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The state used as input and working space for Expressions.
 ','line_number':60,'multiline':True]['text':' Each unique variable is assigned a unique id of this type. Negative ids are reserved for','line_number':65,'multiline':False]['text':' system variables and non-negative ids are allocated for user variables.','line_number':66,'multiline':False]['text':'*
     * Generate runtime constants using the current local and cluster times.
     ','line_number':69,'multiline':True]['text':'*
     * Generates Variables::Id and keeps track of the number of Ids handed out. Each successive Id
     * generated by an instance of this class must be greater than all preceding Ids.
     ','line_number':74,'multiline':True]['text':'*
     * Returns 'true' if any of the 'vars' appear in the passed 'ids' set.
     ','line_number':96,'multiline':True]['text':' Ids for builtin variables.','line_number':107,'multiline':False]['text':' Map from builtin var name to reserved id number.','line_number':117,'multiline':False]['text':'*
     * Sets the value of a user-defined variable. Illegal to use with the reserved builtin variables
     * defined above.
     ','line_number':122,'multiline':True]['text':'*
     * Same as 'setValue' but marks 'value' as being constant. It is illegal to change a value that
     * has been marked constant.
     ','line_number':128,'multiline':True]['text':'*
     * Same as 'setValue' but is only allowed on reserved, builtin, variables. Should not be used
     * when setting from user input.
     ','line_number':134,'multiline':True]['text':'*
     * Gets the value of a user-defined or system variable. If the 'id' provided represents the
     * special ROOT variable, then we return 'root' in Value form.
     ','line_number':140,'multiline':True]['text':'*
     * Gets the value of a user-defined or system variable. Skips user-facing checks and does not
     * return the Document for ROOT.
     ','line_number':146,'multiline':True]['text':'*
     * Gets the value of a user-defined variable. Should only be called when we know 'id' represents
     * a user-defined variable.
     ','line_number':154,'multiline':True]['text':'*
     * Returns whether a constant value for 'id' has been defined using setConstantValue().
     ','line_number':160,'multiline':True]['text':'*
     * Returns Document() for non-document values, but otherwise identical to getValue(). If the
     * 'id' provided represents the special ROOT variable, then we return 'root'.
     ','line_number':168,'multiline':True]['text':'*
     * Set the runtime constants. It is a programming error to call this more than once.
     ','line_number':178,'multiline':True]['text':'*
     * Set the runtime constants using the current local and cluster times.
     ','line_number':183,'multiline':True]['text':'*
     * Seed let parameters with the given BSONObj.
     ','line_number':188,'multiline':True]['text':'*
     * Copies this Variables and 'vps' to the Variables and VariablesParseState objects in 'expCtx'.
     * The VariablesParseState's 'idGenerator' in 'expCtx' is replaced with the pointer to the
     * 'idGenerator' in the new copy of the Variables instance.
     *
     * Making such a copy is a way to ensure that variables visible to a new "scope" (a subpipeline)
     * end up with lexical scoping and do not leak into the execution of the parent pipeline at
     * runtime.
     ','line_number':199,'multiline':True]['text':'*
     * Return true if the passed-in variable ID belongs to a builtin variable.
     ','line_number':221,'multiline':True]['text':'*
     * Define the value of the $$USER_ROLES variable.
     ','line_number':228,'multiline':True]['text':'*
 * This class represents the Variables that are defined in an Expression tree.
 *
 * All copies from a given instance share enough information to ensure unique Ids are assigned
 * and to propagate back to the original instance enough information to correctly construct a
 * Variables instance.
 ','line_number':249,'multiline':True]['text':'*
     * Assigns a named variable a unique Id. This differs from all other variables, even
     * others with the same name.
     *
     * The special variables ROOT and CURRENT are always implicitly defined with CURRENT
     * equivalent to ROOT. If CURRENT is explicitly defined by a call to this function, it
     * breaks that equivalence.
     *
     * NOTE: Name validation is responsibility of caller.
     ','line_number':261,'multiline':True]['text':'*
     * Returns true if there are any variables defined in this scope.
     ','line_number':273,'multiline':True]['text':'*
     * Returns the current Id for a variable. uasserts if the variable isn't defined.
     ','line_number':280,'multiline':True]['text':'*
     * Returns the set of variable IDs defined at this scope.
     ','line_number':285,'multiline':True]['text':'*
     * Serializes a map from name to values of defined variables.
     ','line_number':290,'multiline':True]['text':'*
     * Splits defined variables into runtime constants and "the rest" as a transitional tool while
     * we phase out using LegacyRuntimeConstants.
     ','line_number':295,'multiline':True]['text':'*
     * Return a copy of this VariablesParseState. Will replace the copy's '_idGenerator' pointer
     * with 'idGenerator'.
     ','line_number':302,'multiline':True]['text':' Not owned here.','line_number':313,'multiline':False]['text':' namespace mongo','line_number':319,'multiline':False]