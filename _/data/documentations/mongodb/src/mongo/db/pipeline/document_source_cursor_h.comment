['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Constructs and returns Documents from the BSONObj objects produced by a supplied PlanExecutor.
 ','line_number':70,'multiline':True]['text':'*
     * Indicates whether or not this is a count-like operation. If the operation is count-like, then
     * the cursor can produce empty documents since the subsequent stages need only the count of
     * these documents (not the actual data).
     ','line_number':77,'multiline':True]['text':'*
     * Indicates whether we are tracking resume information from an oplog query (e.g. for
     * change streams), from a non-oplog query (natural order scan using recordId information)
     * or neither.
     ','line_number':84,'multiline':True]['text':'*
     * Create a document source based on a passed-in PlanExecutor. 'exec' must be a yielding
     * PlanExecutor, and must be registered with the associated collection's CursorManager.
     *
     * If 'cursorType' is 'kEmptyDocuments', then we inform the $cursor stage that this is a count
     * scenario -- the dependency set is fully known and is empty. In this case, the newly created
     * $cursor stage can return a sequence of empty documents for the caller to count.
     ','line_number':91,'multiline':True]['text':'*
     * Returns a postBatchResumeToken compatible with resharding oplog sync, if available.
     * Otherwise, returns an empty object.
     ','line_number':136,'multiline':True]['text':' Feel free to add any useful information here. For now this has not been useful for','line_number':167,'multiline':False]['text':' debugging so is left empty.','line_number':168,'multiline':False]['text':' The assumption is that dependency analysis and non-correlated prefix analysis happens','line_number':173,'multiline':False]['text':' before a $cursor is attached to a pipeline.','line_number':174,'multiline':False]['text':'*
     * Disposes of '_exec' if it hasn't been disposed already. This involves taking a collection
     * lock.
     ','line_number':189,'multiline':True]['text':'*
     * If '_shouldProduceEmptyDocs' is false, this function hook is called on each 'obj' returned by
     * '_exec' when loading a batch and returns a Document to be added to '_currentBatch'.
     *
     * The default implementation is the identity function.
     ','line_number':195,'multiline':True]['text':'*
     * A $cursor stage loads documents from the underlying PlanExecutor in batches. An object of
     * this class represents one such batch. Acts like a queue into which documents can be queued
     * and dequeued in FIFO order.
     ','line_number':206,'multiline':True]['text':'*
         * Adds a new document to the batch.
         * The resume token is used to track the resume token for this document for non-oplog
         * queries.
         ','line_number':215,'multiline':True]['text':'*
         * Removes the first document from the batch.
         ','line_number':222,'multiline':True]['text':'*
         * Returns the approximate memory footprint of this batch, measured in bytes. Even after
         * documents are dequeued from the batch, continues to indicate the batch's peak memory
         * footprint. Resets to zero once the final document in the batch is dequeued.
         ','line_number':231,'multiline':True]['text':'*
         * Illegal to call unless the CursorType is 'kRegular'.
         ','line_number':240,'multiline':True]['text':'*
         * Returns the number of documents currently in the batch.
         ','line_number':253,'multiline':True]['text':' If 'kEmptyDocuments', then dependency analysis has indicated that all we need to execute','line_number':261,'multiline':False]['text':' the query is a count of the incoming documents.','line_number':262,'multiline':False]['text':' Used only if '_type' is 'kRegular'. A deque of the documents comprising the batch.','line_number':265,'multiline':False]['text':' Used only if '_type' is 'kRegular' and this is a resumable query for a non-oplog','line_number':268,'multiline':False]['text':' collection','line_number':269,'multiline':False]['text':' Used only if '_type' is 'kEmptyDocuments'. In this case, we don't need to keep the','line_number':272,'multiline':False]['text':' documents themselves, only a count of the number of documents in the batch.','line_number':273,'multiline':False]['text':' The approximate memory footprint of the batch in bytes. Always kept at zero when '_type'','line_number':276,'multiline':False]['text':' is 'kEmptyDocuments'.','line_number':277,'multiline':False]['text':'*
     * Acquires the appropriate locks, then destroys and de-registers '_exec'. '_exec' must be
     * non-null.
     ','line_number':281,'multiline':True]['text':'*
     * Reads a batch of data from '_exec'. Subclasses can specify custom behavior to be performed on
     * each document by overloading transformBSONObjToDocument().
     ','line_number':287,'multiline':True]['text':'*
     * If we are tailing the oplog, this method updates the cached timestamp to that of the latest
     * document returned, or the latest timestamp observed in the oplog if we have no more results.
     ','line_number':295,'multiline':True]['text':'*
     * If we are tracking resume tokens for non-oplog scans, this method updates our cached resume
     * token.
     ','line_number':301,'multiline':True]['text':'*
     * Initialize the exponential growth batch size which allows for batching a small number of
     * documents when no $limit is pushed down into underlying executor. This approach can offer a
     * performance benefit when only a limited amount of data is required. However, small batching
     * may necessitate multiple yields in a potentially fast query, that's why we avoid to do so
     * when $limit is pushed down. Note that we still maintain a separate size limit in bytes
     * controlled by 'internalDocumentSourceCursorBatchSizeBytes' parameter.
     ','line_number':307,'multiline':True]['text':' Batches results returned from the underlying PlanExecutor.','line_number':317,'multiline':False]['text':' The underlying query plan which feeds this pipeline. Must be destroyed while holding the','line_number':320,'multiline':False]['text':' collection lock.','line_number':321,'multiline':False]['text':' Status of the underlying executor, _exec. Used for explain queries if _exec produces an','line_number':324,'multiline':False]['text':' error. Since _exec may not finish running (if there is a limit, for example), we store OK as','line_number':325,'multiline':False]['text':' the default.','line_number':326,'multiline':False]['text':' Used only for explain() queries. Stores the stats of the winning plan when a plan was','line_number':331,'multiline':False]['text':' selected by the multi-planner. When the query is executed (with exec->executePlan()), it will','line_number':332,'multiline':False]['text':' wipe out its own copy of the winning plan's statistics, so they need to be saved here.','line_number':333,'multiline':False]['text':' Whether we are tracking the latest observed oplog timestamp, the resume token from the','line_number':336,'multiline':False]['text':' (non-oplog) scan, or neither.','line_number':337,'multiline':False]['text':' If we are tracking the latest observed oplog time, this is the latest timestamp seen in the','line_number':340,'multiline':False]['text':' oplog. Otherwise, this is a null timestamp.','line_number':341,'multiline':False]['text':' If we are tracking a non-oplog resume token, the resume token for the last document we','line_number':344,'multiline':False]['text':' returned, or the current resume token at EOF.','line_number':345,'multiline':False]['text':' Specific stats for $cursor stage.','line_number':348,'multiline':False]['text':' The size of each batch, grows exponentially. 0 means unlimited.','line_number':353,'multiline':False]['text':' The size limit in bytes of each batch.','line_number':355,'multiline':False]['text':' namespace mongo','line_number':359,'multiline':False]