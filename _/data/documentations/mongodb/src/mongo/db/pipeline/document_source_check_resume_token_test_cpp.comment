['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Every entry we push into the oplog should have both 'ts' and 'ns' fields.','line_number':144,'multiline':False]['text':' Events should always be added in ascending ts order.','line_number':147,'multiline':False]['text':' Fill out remaining required fields in the oplog entry.','line_number':151,'multiline':False]['text':' Must remove _id since the oplog expects either no _id or an OID.','line_number':157,'multiline':False]['text':' Convert to owned BSON and create corresponding Records.','line_number':159,'multiline':False]['text':' We retain the owned record queue here because cursors may be destroyed and recreated.','line_number':177,'multiline':False]['text':' These are no-op structures which are required by the CollectionScan.','line_number':181,'multiline':False]['text':'*
 * Acts as an initial source for the change stream pipeline, taking the place of DSOplogMatch. This
 * class maintains its own queue of documents added by each test, but also pushes each doc into an
 * underlying ChangeStreamOplogCollectionMock. When doGetNext() is called, it retrieves the next
 * document by pulling it from the mocked oplog collection via a CollectionScan, in order to test
 * the latter's changestream-specific functionality. The reason this class keeps its own queue in
 * addition to the ChangeStreamOplogCollectionMock is twofold:
 *
 *   - The _id must be stripped from each document before it can be added to the mocked oplog, since
 *     the _id field of the test document is a resume token but oplog entries are only permitted to
 *     have OID _ids. We therefore have to restore the _id field of the document pulled from the
 *     CollectionScan before passing it into the pipeline.
 *
 *   - The concept of GetNextResult::ReturnStatus::kPauseExecution does not exist in CollectionScan;
 *     NEED_TIME is somewhat analogous but cannot be artificially induced. For tests which exercise
 *     kPauseExecution, these events are stored only in the DocumentSourceChangeStreamMock queue
 *     with no corresponding entry in the ChangeStreamOplogCollectionMock queue.
 ','line_number':186,'multiline':True]['text':' We should never push an explicit EOF onto the queue.','line_number':225,'multiline':False]['text':' If there is a document supplied, add it to the mock collection.','line_number':227,'multiline':False]['text':' Both documents and pauses are stored in the DSMock queue.','line_number':231,'multiline':False]['text':' If this is the first call to doGetNext, we must create the COLLSCAN.','line_number':245,'multiline':False]['text':' If the next result is a pause, return it and don't collscan.','line_number':251,'multiline':False]['text':' Otherwise, retrieve the document via the CollectionScan stage.','line_number':256,'multiline':False]['text':' We need to restore the _id field which was removed when we added this','line_number':263,'multiline':False]['text':' entry into the oplog. This is like a stripped-down DSCSTransform stage.','line_number':264,'multiline':False]['text':'*
     * Pushes a document with a resume token corresponding to the given ResumeTokenData into the
     * mock queue. This document will have an ns field that matches the test namespace, and will
     * appear in the change stream pipeline if its timestamp is at or after the resume timestamp.
     ','line_number':300,'multiline':True]['text':'*
     * Pushes a document with a resume token corresponding to the given timestamp, version,
     * txnOpIndex, docKey, and namespace into the mock queue.
     ','line_number':311,'multiline':True]['text':'*
     * Pushes a document with a resume token corresponding to the given timestamp, version,
     * txnOpIndex, docKey, and namespace into the mock queue.
     ','line_number':320,'multiline':True]['text':'*
     * Pushes a document with a resume token corresponding to the given timestamp, _id string, and
     * namespace into the mock queue.
     ','line_number':327,'multiline':True]['text':'*
     * Pushes a document that does not match the test namespace into the mock oplog. This will be
     * examined by the oplog CollectionScan but will not produce an event in the pipeline.
     ','line_number':335,'multiline':True]['text':'*
     * Pushes a pause in execution into the pipeline queue.
     ','line_number':343,'multiline':True]['text':'*
     * Convenience method to create the class under test with a given ResumeTokenData.
     ','line_number':350,'multiline':True]['text':'*
     * Convenience method to create the class under test with a given timestamp, docKey, and
     * namespace.
     ','line_number':365,'multiline':True]['text':'*
     * Convenience method to create the class under test with a given timestamp, docKey, and
     * namespace.
     ','line_number':379,'multiline':True]['text':'*
     * Convenience method to create the class under test with a given timestamp, _id string, and
     * namespace.
     ','line_number':390,'multiline':True]['text':'*
     * This method is required to avoid a static initialization fiasco resulting from calling
     * UUID::gen() in file or class static scope.
     ','line_number':399,'multiline':True]['text':' We should not see the resume token.','line_number':436,'multiline':False]['text':' We see the pause we inserted, but not the resume token.','line_number':447,'multiline':False]['text':' Pause added explicitly.','line_number':461,'multiline':False]['text':' The document after the resume token should be the first.','line_number':463,'multiline':False]['text':' The first timestamp in the oplog precedes the resume token, and the second matches it...','line_number':494,'multiline':False]['text':' ... but there's no entry in the oplog that matches the full token.','line_number':501,'multiline':False]['text':' Add an entry into the oplog with the same timestamp but a lower documentKey. We swallow it','line_number':513,'multiline':False]['text':' but don't throw - we haven't surpassed the token yet and still may see it in the next doc.','line_number':514,'multiline':False]['text':' We must not see the following document.','line_number':541,'multiline':False]['text':' Verify that the relaxed _id check only applies if _id is the sole field present in the','line_number':561,'multiline':False]['text':' client's resume token, even if all the fields that are present match the first doc. We set','line_number':562,'multiline':False]['text':' 'inMongos' since this is only applicable when DSCSEnsureResumeTokenPresent is running on','line_number':563,'multiline':False]['text':' mongoS.','line_number':564,'multiline':False]['text':' Verify that a resume token whose documentKey is not a valid object will neither succeed nor','line_number':579,'multiline':False]['text':' cause an invariant when we perform the relaxed eventIdentifier._id check when running in a','line_number':580,'multiline':False]['text':' sharded context.','line_number':581,'multiline':False]['text':' Verify that a resume token whose documentKey omits the _id field will neither succeed nor','line_number':595,'multiline':False]['text':' cause an invariant when we perform the relaxed eventIdentifier._id, even when compared','line_number':596,'multiline':False]['text':' against an artificial stream token whose _id is also missing.','line_number':597,'multiline':False]['text':' On a sharded cluster, the documents observed by the pipeline during a resume attempt may have','line_number':614,'multiline':False]['text':' the same clusterTime if they come from different shards. If this is a whole-db or','line_number':615,'multiline':False]['text':' cluster-wide changeStream, then their UUIDs may legitimately differ. As long as the UUID of','line_number':616,'multiline':False]['text':' the current document sorts before the client's resume token, we should continue to examine','line_number':617,'multiline':False]['text':' the next document in the stream.','line_number':618,'multiline':False]['text':' Create an ordered array of 2 UUIDs.','line_number':622,'multiline':False]['text':' Create the resume token using the higher-sorting UUID.','line_number':629,'multiline':False]['text':' Add two documents which have the same clusterTime but a lower UUID. One of the documents has','line_number':633,'multiline':False]['text':' a lower docKey than the resume token, the other has a higher docKey; this demonstrates that','line_number':634,'multiline':False]['text':' the UUID is the discriminating factor.','line_number':635,'multiline':False]['text':' Add a third document that matches the resume token.','line_number':639,'multiline':False]['text':' Add a fourth document with the same timestamp and UUID whose docKey sorts after the token.','line_number':642,'multiline':False]['text':' We should skip the first two docs, swallow the resume token, and return the fourth doc.','line_number':646,'multiline':False]['text':' Create an ordered array of 2 UUIDs.','line_number':660,'multiline':False]['text':' Create the resume token using the lower-sorting UUID.','line_number':667,'multiline':False]['text':' Add a document which has the same clusterTime and a lower docKey but a higher UUID, followed','line_number':671,'multiline':False]['text':' by a document which matches the resume token. This is not possible in practice, but it serves','line_number':672,'multiline':False]['text':' to demonstrate that the resume attempt fails even when the resume token is present.','line_number':673,'multiline':False]['text':' Create an array of 2 UUIDs. The first represents the UUID of the namespace before it was','line_number':685,'multiline':False]['text':' dropped. The second is the UUID of the collection after it is recreated.','line_number':686,'multiline':False]['text':' This behaviour is only relevant when DSEnsureResumeTokenPresent is running on mongoS.','line_number':689,'multiline':False]['text':' Create a resume token representing an 'invalidate' event, and use it to seed the stage. A','line_number':692,'multiline':False]['text':' resume token with {fromInvalidate:true} can only be used with startAfter, to start a new','line_number':693,'multiline':False]['text':' stream after the old stream is invalidated.','line_number':694,'multiline':False]['text':' txnOpIndex ','line_number':698,'multiline':True]['text':' Add three documents which each have the invalidate resume token. We expect to see this in the','line_number':704,'multiline':False]['text':' event that we are starting after an invalidate and the invalidating event occurred on several','line_number':705,'multiline':False]['text':' shards at the same clusterTime.','line_number':706,'multiline':False]['text':' Add a document representing an insert which recreated the collection after it was dropped.','line_number':711,'multiline':False]['text':' DSEnsureResumeTokenPresent should confirm that the invalidate event is present, swallow it','line_number':715,'multiline':False]['text':' and the next two invalidates, and return the insert event after the collection drop.','line_number':716,'multiline':False]['text':' This behaviour is only relevant when DSEnsureResumeTokenPresent is running on mongoS.','line_number':728,'multiline':False]['text':' Create an ordered array of of 2 UUIDs.','line_number':731,'multiline':False]['text':' Create a resume token representing an 'invalidate' event, and use it to seed the stage. A','line_number':735,'multiline':False]['text':' resume token with {fromInvalidate:true} can only be used with startAfter, to start a new','line_number':736,'multiline':False]['text':' stream after the old stream is invalidated.','line_number':737,'multiline':False]['text':' txnOpIndex ','line_number':741,'multiline':True]['text':' Create a second invalidate token with the same clusterTime but a different UUID.','line_number':747,'multiline':False]['text':' Add three documents which each have the invalidate resume token. We expect to see this in the','line_number':751,'multiline':False]['text':' event that we are starting after an invalidate and the invalidating event occurred on several','line_number':752,'multiline':False]['text':' shards at the same clusterTime.','line_number':753,'multiline':False]['text':' Add a fourth document which has the unrelated invalidate at the same clusterTime.','line_number':758,'multiline':False]['text':' DSEnsureResumeTokenPresent should confirm that the invalidate event is present, swallow it','line_number':761,'multiline':False]['text':' and the next two invalidates, but decline to swallow the unrelated invalidate.','line_number':762,'multiline':False]['text':' Create an ordered array of 3 UUIDs.','line_number':773,'multiline':False]['text':' Add two documents which have the same clusterTime and version but a lower applyOps index. One','line_number':781,'multiline':False]['text':' of the documents has a lower uuid than the resume token, the other has a higher uuid; this','line_number':782,'multiline':False]['text':' demonstrates that the applyOps index is the discriminating factor.','line_number':783,'multiline':False]['text':' Add a third document that matches the resume token.','line_number':787,'multiline':False]['text':' Add a fourth document with the same timestamp and version whose applyOps sorts after the','line_number':790,'multiline':False]['text':' resume token.','line_number':791,'multiline':False]['text':' We should skip the first two docs, swallow the resume token, and return the fourth doc.','line_number':795,'multiline':False]['text':'*
 * We should _error_ on the no-document case, because that means the resume token was not found.
 ','line_number':804,'multiline':True]['text':' We should see the resume token.','line_number':821,'multiline':False]['text':' We should see the resume token.','line_number':836,'multiline':False]['text':' As with other tailable cursors, starting a change stream on an empty capped collection will','line_number':846,'multiline':False]['text':' cause the cursor to immediately and permanently EOF. This should never happen in practice,','line_number':847,'multiline':False]['text':' since a replset member can only accept requests while in PRIMARY, SECONDARY or RECOVERING','line_number':848,'multiline':False]['text':' states, and there must be at least one entry in the oplog in order to reach those states.','line_number':849,'multiline':False]['text':' Confirm that there are two documents queued in the mock oplog.','line_number':948,'multiline':False]['text':' Confirm that only the first document was read before the assertion was thrown.','line_number':952,'multiline':False]['text':' Set up the DSCSCheckResumability to check for an exact event ResumeToken.','line_number':1012,'multiline':False]['text':' Add 2 events at the same clusterTime as the resume token but whose docKey sort before it.','line_number':1016,'multiline':False]['text':' Add the resume token, plus one further event whose docKey sorts after the token.','line_number':1019,'multiline':False]['text':' The first event we see should be the resume token...','line_number':1023,'multiline':False]['text':' ... then the post-token event, and then finally EOF.','line_number':1028,'multiline':False]['text':' Set up the DSCSCheckResumability to check for an exact event ResumeToken.','line_number':1041,'multiline':False]['text':' Add 2 events at the same clusterTime as the resume token but whose docKey sort before it.','line_number':1045,'multiline':False]['text':' Add one further event whose docKey sorts after the token.','line_number':1048,'multiline':False]['text':' The first event we see should be the post-token event, followed by EOF.','line_number':1051,'multiline':False]['text':' namespace','line_number':1061,'multiline':False]['text':' namespace mongo','line_number':1062,'multiline':False]