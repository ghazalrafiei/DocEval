['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A class for the $merge aggregation stage to handle all supported merge modes. Each instance of
 * this class must be initialized (via a constructor) with a 'MergeDescriptor', which defines a
 * a particular merge strategy for a pair of 'whenMatched' and 'whenNotMatched' merge  modes.
 ','line_number':86,'multiline':True]['text':'*
     * A "lite parsed" $merge stage to disallow passthrough from mongos even if the source
     * collection is unsharded. This ensures that the unique index verification happens once on
     * mongos and can be bypassed on the shards.
     ','line_number':97,'multiline':True]['text':' Merge the result from the sub-pipeline into the $merge specific read concern result','line_number':127,'multiline':False]['text':' to preserve the $merge errors over the internal pipeline errors.','line_number':128,'multiline':False]['text':'*
         * We must know the aggregation's collation when parsing a $merge in order to correctly
         * verify that the target namespace guarantees the uniqueness of the 'mergeOnFields'.
         ','line_number':136,'multiline':True]['text':'*
     * Creates a new $merge stage from the given arguments.
     ','line_number':169,'multiline':True]['text':'*
     * Parses a $merge stage from the user-supplied BSON.
     ','line_number':182,'multiline':True]['text':' This implies that the stage will soon start to write, so it's safe to verify the target','line_number':193,'multiline':False]['text':' collection placement version. This is done here instead of parse time since it requires','line_number':194,'multiline':False]['text':' that locks are not held.','line_number':195,'multiline':False]['text':' If mongos has sent us a target placement version, we need to be sure we are prepared','line_number':198,'multiline':False]['text':' to act as a router which is at least as recent as that mongos.','line_number':199,'multiline':False]['text':' Although $merge is not allowed in sub-pipelines and this method is used for correlation','line_number':206,'multiline':False]['text':' analysis, the method is generic enough to be used in the future for other purposes.','line_number':207,'multiline':False]['text':'*
     * Builds a new $merge stage which will merge all documents into 'outputNs'. If
     * 'collectionPlacementVersion' is provided then processing will stop with an error if the
     * collection's epoch changes during the course of execution. This is used as a mechanism to
     * prevent the shard key from changing.
     ','line_number':221,'multiline':True]['text':' Holds the fields used for uniquely identifying documents. There must exist a unique index','line_number':242,'multiline':False]['text':' with this key pattern. Default is "_id" for unsharded collections, and "_id" plus the shard','line_number':243,'multiline':False]['text':' key for sharded collections.','line_number':244,'multiline':False]['text':' True if '_mergeOnFields' contains the _id. We store this as a separate boolean to avoid','line_number':247,'multiline':False]['text':' repeated lookups into the set.','line_number':248,'multiline':False]['text':' namespace mongo','line_number':254,'multiline':False]