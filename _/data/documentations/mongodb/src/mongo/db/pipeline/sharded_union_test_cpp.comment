['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]['text':' Use this new name to register these tests under their own unit test suite.','line_number':99,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':103,'multiline':False]['text':' Now schedule the response with the expected result.','line_number':130,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':142,'multiline':False]['text':' Expect one result from each host.','line_number':157,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':190,'multiline':False]['text':' Mock out one error response, then expect a refresh of the sharding catalog for that','line_number':213,'multiline':False]['text':' namespace, then mock out a successful response.','line_number':214,'multiline':False]['text':' Mock the expected config server queries.','line_number':228,'multiline':False]['text':' That error should be retried, but only the one on that shard.','line_number':256,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':268,'multiline':False]['text':' With the $match at the front of the sub-pipeline, we should be able to target the request to','line_number':300,'multiline':False]['text':' just shard 1.  Mock out an error response from that shard, then expect a refresh of the','line_number':301,'multiline':False]['text':' sharding catalog for that namespace.','line_number':302,'multiline':False]['text':' Mock the expected config server queries. Update the distribution as if a chunk [0, 10] was','line_number':318,'multiline':False]['text':' created and moved to the first shard.','line_number':319,'multiline':False]['text':' That error should be retried, this time two shards.','line_number':351,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':369,'multiline':False]['text':' Mock out an error response from both shards, then expect a refresh of the sharding catalog','line_number':400,'multiline':False]['text':' for that namespace, then mock out a successful response.','line_number':401,'multiline':False]['text':' Mock the expected config server queries. Update the distribution so that all chunks are on','line_number':426,'multiline':False]['text':' the same shard.','line_number':427,'multiline':False]['text':' That error should be retried, this time targetting only one shard.','line_number':444,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':457,'multiline':False]['text':' Mock out the view namespace as emtpy for now - this is what it would be when parsing in a','line_number':463,'multiline':False]['text':' sharded cluster - only later would we learn the actual view definition.','line_number':464,'multiline':False]['text':' Mock the expected config server queries.','line_number':487,'multiline':False]['text':' Mock out the sharded view error responses from both shards.','line_number':515,'multiline':False]['text':' Prevent the $match from being pushed into the shards','line_number':517,'multiline':False]['text':' where it would not execute in this mocked environment.','line_number':518,'multiline':False]['text':' That error should be incorporated, then we should target both shards. The results should be','line_number':530,'multiline':False]['text':' de-duplicated in the merging part of the pipeline which performs the second half of the','line_number':531,'multiline':False]['text':' $group, then the document which doesn't match the final $match should be filtered out.','line_number':532,'multiline':False]['text':' Sharded by {_id: 1}, [MinKey, 0) on shard "0", [0, MaxKey) on shard "1".','line_number':552,'multiline':False]['text':' namespace','line_number':604,'multiline':False]['text':' namespace mongo','line_number':605,'multiline':False]