['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':37,'multiline':False]['text':'*
 * Registers a GranularityRounder with the name 'name' and initializer key 'key'. When a
 * granularity specification with name 'name' is found, 'rounder' will be called to construct a
 * GranularityRounder for that granularity.
 *
 * Use this macro directly if you want 'name' and 'key' to be different. For example, this might be
 * the case if 'name' is not a valid name for a C++ symbol (e.g. foo-bar). Otherwise, use
 * REGISTER_GRANULARITY_ROUNDER instead.
 *
 * As an example, if you are adding a rounding granularity called foo-bar you would add this line:
 * REGISTER_GRANULARITY_ROUNDER_GENERAL("foo-bar", foo_bar, GranularityRounderFooBar::create);
 ','line_number':46,'multiline':True]['text':'*
 * Registers a GranularityRounder to have the name 'key'. When a granularity specification with name
 * 'key' is found, 'rounder' will be called to construct a GranularityRounder for that
 * granularity.
 *
 * As an example, if you are adding a rounding granularity called foo you would add this line:
 * REGISTER_GRANULARITY_ROUNDER(foo, GranularityRounderFoo::create);
 ','line_number':63,'multiline':True]['text':'*
 * This class provides a way to round a value up or down according to a specific rounding
 * granularity.
 ','line_number':74,'multiline':True]['text':'*
     * Registers a GranularityRounder with a parsing function so that when a granularity
     * with the given name is encountered, it will call 'rounder' to construct the appropriate
     * GranularityRounder.
     *
     * DO NOT call this method directly. Instead, use the REGISTER_GRANULARITY_ROUNDER or
     * REGISTER_GRANULARITY_ROUNDER_GENERAL macro defined in this file.
     ','line_number':83,'multiline':True]['text':'*
     * Retrieves the GranularityRounder for the granularity given by 'granularity', and raises an
     * error if there is no such granularity registered.
     ','line_number':93,'multiline':True]['text':'*
     * Rounds up 'value' to the first value greater than 'value' in the granularity series. If
     * 'value' is already in the granularity series, then it will be rounded up to the next value in
     * the series.
     ','line_number':100,'multiline':True]['text':'*
     * Rounds down 'value' to the first value less than 'value' in the granularity series. If
     * 'value' is already in the granularity series, then it will be rounded down to the previous
     * value in the series.
     ','line_number':107,'multiline':True]['text':'*
     * Returns the name of the granularity series that the GranularityRounder is using for rounding.
     ','line_number':114,'multiline':True]['text':'*
 * This class provides a way to round a value up or down according to a preferred number series.
 *
 * The series that this class aims to support are specified here:
 * https://en.wikipedia.org/wiki/Preferred_number
 ','line_number':130,'multiline':True]['text':'*
     * Returns a Granularity rounder that rounds according to the series represented by
     * 'baseSeries'. This method requires that baseSeries has at least 2 numbers and is in sorted
     * order.
     ','line_number':138,'multiline':True]['text':'*
     * Returns a vector that represents the preferred number series that this
     * GranularityRounderPreferredNumbers is using for rounding.
     ','line_number':152,'multiline':True]['text':' '_baseSeries' is the preferred number series that is used for rounding. A preferred numbers','line_number':163,'multiline':False]['text':' series is infinite, but we represent it with a finite vector of numbers. When rounding, we','line_number':164,'multiline':False]['text':' scale the numbers in '_baseSeries' by a power of 10 until the number we are rounding falls','line_number':165,'multiline':False]['text':' into the range spanned by the scaled '_baseSeries'.','line_number':166,'multiline':False]['text':'*
 * This class provides a way to round a value up or down to a power of two.
 ','line_number':171,'multiline':True]['text':'  namespace mongo','line_number':188,'multiline':False]