['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace','line_number':67,'multiline':False]['text':' Returns ResumeStatus::kFoundToken if the document retrieved from the resumed pipeline satisfies','line_number':69,'multiline':False]['text':' the client's resume token, ResumeStatus::kCheckNextDoc if it is older than the client's token,','line_number':70,'multiline':False]['text':' and ResumeToken::kSurpassedToken if it is more recent than the client's resume token, indicating','line_number':71,'multiline':False]['text':' that we will never see the token. Return ResumeStatus::kNeedsSplit if we have found the event','line_number':72,'multiline':False]['text':' that produced the resume token, but it was split in the original stream.','line_number':73,'multiline':False]['text':' Parse the stream doc into comprehensible ResumeTokenData.','line_number':77,'multiline':False]['text':' We start the resume with a $gte query on the timestamp, so we never expect it to be lower','line_number':81,'multiline':False]['text':' than our resume token's timestamp.','line_number':82,'multiline':False]['text':' If the clusterTime differs from the client's token, this stream cannot be resumed.','line_number':85,'multiline':False]['text':' If the tokenType exceeds the client token's type, then we have passed the resume token point.','line_number':90,'multiline':False]['text':' This can happen if the client resumes from a synthetic 'high water mark' token from another','line_number':91,'multiline':False]['text':' shard which happens to have the same clusterTime as an actual change on this shard.','line_number':92,'multiline':False]['text':' If the document's 'txnIndex' sorts before that of the client token, we must keep looking.','line_number':99,'multiline':False]['text':' This could happen if the client provided a txnOpIndex of 0, yet the 0th document in the','line_number':103,'multiline':False]['text':' applyOps was irrelevant (meaning it was an operation on a collection or DB not being','line_number':104,'multiline':False]['text':' watched). Signal that we have read beyond the resume token.','line_number':105,'multiline':False]['text':' If 'fromInvalidate' exceeds the client's token value, then we have passed the resume point.','line_number':109,'multiline':False]['text':' It is acceptable for the stream UUID to differ from the client's, if this is a whole-database','line_number':115,'multiline':False]['text':' or cluster-wide stream and we are comparing operations from different shards at the same','line_number':116,'multiline':False]['text':' clusterTime. If the stream UUID sorts after the client's, however, then the stream is not','line_number':117,'multiline':False]['text':' resumable; we are past the point in the stream where the token should have appeared.','line_number':118,'multiline':False]['text':' If the eventIdentifier matches exactly, then we have found the resume point. However, this','line_number':125,'multiline':False]['text':' event may have been split by the original stream; we must check the value of the resume','line_number':126,'multiline':False]['text':' token's fragmentNum field to determine the correct return status.','line_number':127,'multiline':False]['text':' At this point, we know that the tokens differ only by eventIdentifier. The status we return','line_number':141,'multiline':False]['text':' will depend on whether the stream token is logically before or after the client token. If the','line_number':142,'multiline':False]['text':' latter, then we will never see the resume token and the stream cannot be resumed.','line_number':143,'multiline':False]['text':' The underlying oplog scan will throw OplogQueryMinTsMissing if the minTs in the change','line_number':184,'multiline':False]['text':' stream filter has fallen off the oplog. Catch this and throw a more explanatory error.','line_number':185,'multiline':False]['text':' If we hit EOF, return it immediately.','line_number':199,'multiline':False]['text':' Determine whether the current event sorts before, equal to or after the resume token.','line_number':204,'multiline':False]['text':' If the result was kCheckNextDoc, we are resumable but must swallow this event.','line_number':210,'multiline':False]['text':' If the result was kNeedsSplit, we found a resume token which matches the client's','line_number':213,'multiline':False]['text':' except for the splitNum attribute. Allow this document to pass through so that','line_number':214,'multiline':False]['text':' the split stage can regenerate the original fragments and their resume tokens.','line_number':215,'multiline':False]['text':' In this case the resume token wasn't found; it may be on another shard. However,','line_number':218,'multiline':False]['text':' since the oplog scan did not throw, we know that we are resumable. Fall through','line_number':219,'multiline':False]['text':' into the following case and return the document.','line_number':220,'multiline':False]['text':' We found the actual token! Return the doc so DSEnsureResumeTokenPresent sees it.','line_number':223,'multiline':False]['text':' namespace mongo','line_number':247,'multiline':False]