['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This class represents a $group stage generically - could be a streaming or hash based group.
 *
 * It contains some common execution code between the two algorithms, such as:
 *  - Handling spilling to disk.
 *  - Computing the group key
 *  - Accumulating values in a hash table and populating output documents.
 ','line_number':71,'multiline':True]['text':'*
     * Returns a map with the fieldPath and expression of the _id field for $group.
     * If _id is a single expression, such as {_id: "$field"}, the function will return {_id:
     * "$field"}.
     * If _id is a nested expression, such as  {_id: {c: "$field"}}, the function will
     * return {_id.c: "$field"}}.
     * Both maps are the same length, even though the original '_id' fields are different.
     ','line_number':90,'multiline':True]['text':'*
     * Can be used to change or swap out individual _id fields, but should not be used
     * once execution has begun.
     ','line_number':102,'multiline':True]['text':'*
     * Returns all the AccumulationStatements.
     ','line_number':108,'multiline':True]['text':'*
     * Similar to above, but can be used to change or swap out individual accumulated fields.
     * Should not be used once execution has begun.
     ','line_number':113,'multiline':True]['text':'*
     * Returns the expression to use to determine the group id of each document.
     ','line_number':136,'multiline':True]['text':'*
     * Returns true if this $group stage represents a 'global' $group which is merging together
     * results from earlier partial groups.
     ','line_number':141,'multiline':True]['text':'*
     * Returns true if this $group stage used disk during execution and false otherwise.
     ','line_number':153,'multiline':True]['text':'*
     * Returns maximum allowed memory footprint.
     ','line_number':160,'multiline':True]['text':'*
     * Returns a vector of the _id field names. If the id field is a single expression, this will
     * return an empty vector.
     ','line_number':167,'multiline':True]['text':'*
     * Returns a vector of the expressions in the _id field. If the id field is a single expression,
     * this will return a vector with one element.
     ','line_number':175,'multiline':True]['text':'*
     * When possible, creates a document transformer that transforms the first document in a group
     * into one of the output documents of the $group stage. This is possible when we are grouping
     * on a single field and all accumulators are $first (or there are no accumluators).
     *
     * It is sometimes possible to use a DISTINCT_SCAN to scan the first document of each group,
     * in which case this transformation can replace the actual $group stage in the pipeline
     * (SERVER-9507).
     ','line_number':186,'multiline':True]['text':' True if this $group can be pushed down to SBE.','line_number':198,'multiline':False]['text':'*
     * Returns true if 'dottedPath' is one of the group keys present in '_idExpressions'.
     ','line_number':225,'multiline':True]['text':' namespace mongo','line_number':233,'multiline':False]