['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Return the minimum or maximum value for the "class" of values represented by the input
 * constant. Used to support type bracketing. Takes into account both the type tag and value of
 * the input constant.
 * Return format is <min/max value, bool inclusive>
 ','line_number':94,'multiline':True]['text':' namespace','line_number':108,'multiline':False]['text':'isValueElemMatch','line_number':162,'multiline':True]['text':'isValueElemMatch','line_number':167,'multiline':True]['text':' If we have an EvalFilter, just return the path.','line_number':193,'multiline':False]['text':' $in with an empty equalities list matches nothing; replace with constant false.','line_number':225,'multiline':False]['text':' Do not insert a traverse if within an $elemMatch; traversal will be handled by the','line_number':272,'multiline':False]['text':' $elemMatch expression itself.','line_number':273,'multiline':False]['text':' When the path we are comparing is a path to an array, the comparison is','line_number':275,'multiline':False]['text':' considered true if it evaluates to true for the array itself or for any of the','line_number':276,'multiline':False]['text':' arrayâ€™s elements. 'result' evaluates comparison on the array elements, and','line_number':277,'multiline':False]['text':' 'arraysOnly' evaluates the comparison on the array itself.','line_number':278,'multiline':False]['text':' Ignored. Translate to "true".','line_number':304,'multiline':False]['text':' Ignored. Translate to "true".','line_number':309,'multiline':False]['text':' Ignored. Translate to "true".','line_number':314,'multiline':False]['text':' Ignored. Translate to "true".','line_number':319,'multiline':False]['text':' Ignored. Translate to "true".','line_number':324,'multiline':False]['text':' If this $not expression is a child of an $elemMatch, then we need to use a PathLambda to','line_number':431,'multiline':False]['text':' ensure that the value stream (variable) corresponding to the inner path element is passed','line_number':432,'multiline':False]['text':' into the inner EvalFilter.','line_number':433,'multiline':False]['text':'','line_number':434,'multiline':False]['text':' Examples:','line_number':435,'multiline':False]['text':' find({"a.b": {$not: {$eq: 1}}}): The input into the not expression are documents from the','line_number':436,'multiline':False]['text':' Scan. The EvalFilter expression will encapsulate the "a.b" path traversal.','line_number':437,'multiline':False]['text':'','line_number':438,'multiline':False]['text':' find({"a": {$elemMatch: {b: {$not: {$eq: 1}}}}}): The outer EvalFilter expression','line_number':439,'multiline':False]['text':' encapsulates the "a" path traversal. However, we need the input to the not expression to','line_number':440,'multiline':False]['text':' be the value of the "b" field, rather than those of "a". We use the PathLambda expression','line_number':441,'multiline':False]['text':' to achieve this.','line_number':442,'multiline':False]['text':' If we are testing against array type, insert a comparison against the','line_number':521,'multiline':False]['text':' non-traversed path (the array itself if we have one).','line_number':522,'multiline':False]['text':' Returns true if at least one sub-objects matches the condition.','line_number':548,'multiline':False]['text':' Make sure we consider only objects or arrays as elements of the array.','line_number':560,'multiline':False]['text':' Make sure we consider only arrays fields on the path.','line_number':565,'multiline':False]['text':'isMin','line_number':603,'multiline':True]['text':' Handle null and missing semantics','line_number':609,'multiline':False]['text':' find({a: {$lt: MaxKey()}}) matches {a: null} and {b: 1}','line_number':610,'multiline':False]['text':' find({a: {$lte: null}}) matches {a: null} and {b: 1})','line_number':611,'multiline':False]['text':'isMin','line_number':621,'multiline':True]['text':' Handle null and missing semantics','line_number':627,'multiline':False]['text':' find({a: {$gt: MinKey()}}) matches {a: null} and {b: 1}','line_number':628,'multiline':False]['text':' find({a: {$gte: null}}) matches {a: null} and {b: 1})','line_number':629,'multiline':False]['text':' Handle null and missing semantics. Matching against null also implies','line_number':639,'multiline':False]['text':' matching against missing.','line_number':640,'multiline':False]['text':' The behavior of PathTraverse when it encounters an array is to apply its subpath','line_number':657,'multiline':False]['text':' to every element of the array and not the array itself. When we do a comparison','line_number':658,'multiline':False]['text':' to an array, or an inequality comparison to minKey/maxKey, we need to ensure','line_number':659,'multiline':False]['text':' that these comparisons happen to every element of the array and the array itself.','line_number':660,'multiline':False]['text':'','line_number':661,'multiline':False]['text':' For example:','line_number':662,'multiline':False]['text':' find({a: [1]})','line_number':663,'multiline':False]['text':'   matches {a: [1]} and {a: [[1]]}','line_number':664,'multiline':False]['text':' find({a: {$gt: MinKey()}})','line_number':665,'multiline':False]['text':'   matches {a: []} and {a: [MinKey()]}','line_number':666,'multiline':False]['text':'   but not {a: MinKey()}','line_number':667,'multiline':False]['text':' Construct a balanced composition tree.','line_number':696,'multiline':False]['text':'*
     * Returns whether the currently visiting expression should consider the path it's operating on
     * and build the appropriate ABT. This can return false for expressions within an $elemMatch
     * that operate against each value in an array (aka "elemMatch value").
     ','line_number':706,'multiline':True]['text':' The only case where any expression, including $elemMatch, should ignore it's path is if','line_number':712,'multiline':False]['text':' it's directly under a value $elemMatch. The 'elemMatchStack' includes 'expr' if it's an','line_number':713,'multiline':False]['text':' $elemMatch, so we need to look back an extra element.','line_number':714,'multiline':False]['text':' If we are parsing a partial index filter, we don't allow agg expressions.','line_number':723,'multiline':False]['text':' We don't own this','line_number':726,'multiline':False]['text':'assertExprSort','line_number':735,'multiline':True]['text':'assertPathSort','line_number':736,'multiline':True]['text':'inVisitor','line_number':742,'multiline':True]['text':' namespace mongo::optimizer','line_number':747,'multiline':False]