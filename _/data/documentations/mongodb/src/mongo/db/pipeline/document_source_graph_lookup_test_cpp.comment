['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This provides access to getExpCtx(), but we'll use a different name for this test suite.','line_number':69,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' Evaluation.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':'*
 * A MongoProcessInterface use for testing that supports making pipelines with an initial
 * DocumentSourceMock source.
 ','line_number':76,'multiline':True]['text':' Implement this method should any test cases require setting aggregate command options via','line_number':103,'multiline':False]['text':' 'aggRequest'.','line_number':104,'multiline':False]['text':' Tests that $graphLookup with special 'from' syntax from: {db: local, coll:','line_number':112,'multiline':False]['text':' system.tenantMigration.oplogView} can be round tripped.','line_number':113,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' Serialize the $graphLookup stage and confirm contents.','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':' $graphLookup : {from : {db: <>, coll: <>}} syntax doesn't work for a namespace that isn't','line_number':156,'multiline':False]['text':' local.system.tenantMigration.oplogView.','line_number':157,'multiline':False]['text':' $graphLookup : {from : {db: <>, coll: <>}} syntax fails when "db" is local but "coll" is','line_number':175,'multiline':False]['text':' not "system.tenantMigration.oplogView".','line_number':176,'multiline':False]['text':' $lookup : {from : {db: <>, coll: <>}} syntax doesn't work for a namespace when "coll" is','line_number':194,'multiline':False]['text':' "system.tenantMigration.oplogView" but "db" is not "local".','line_number':195,'multiline':False]['text':' Since 'to0from1' and 'to0from2' have the same _id, we should end up only exploring the path','line_number':356,'multiline':False]['text':' through one of them.','line_number':357,'multiline':False]['text':' If 'to0from1' was returned, then we should see 'to1' and nothing else.','line_number':359,'multiline':False]['text':' If 'to0from2' was returned, then we should see 'to2' and nothing else.','line_number':366,'multiline':False]['text':' We expect {startPoint: 0, results: [{_id: "a", to: 0, from: 1}, {_id: "b", to: 1}]}, but the','line_number':414,'multiline':False]['text':' 'results' array can be in any order. So we use arrayContains to assert it has the right','line_number':415,'multiline':False]['text':' contents.','line_number':416,'multiline':False]['text':' Set up the $graphLookup stage','line_number':450,'multiline':False]['text':' Assert it has the expected results. Note the results can be in either order.','line_number':488,'multiline':False]['text':' The 'startWith' expression evaluates to false, so we expect the 'results' array to contain','line_number':615,'multiline':False]['text':' just one document.','line_number':616,'multiline':False]['text':' Make the following graph:
     *   ,> 1 .
     *  /      \
     * 0 -> 2 --+-> 4
     *  \      /
     *   `> 3 '
     ','line_number':632,'multiline':True]['text':' GetNextResults are only constructable from an rvalue reference to a Document, so we have to','line_number':645,'multiline':False]['text':' explicitly copy.','line_number':646,'multiline':False]['text':' Make the following graph:','line_number':700,'multiline':False]['text':'','line_number':701,'multiline':False]['text':' [0, 0] -> [1, 1]','line_number':702,'multiline':False]['text':'  |','line_number':703,'multiline':False]['text':'  v','line_number':704,'multiline':False]['text':' [2, 2]','line_number':705,'multiline':False]['text':'','line_number':706,'multiline':False]['text':' (unconnected)','line_number':707,'multiline':False]['text':' [1, 2]','line_number':708,'multiline':False]['text':' If the connectFromField were doubly expanded, we would query for connectToValues with an','line_number':710,'multiline':False]['text':' expression like {$in: [1, 2]} instead of {$in: [[1, 1], [2, 2]]}, the former of which would','line_number':711,'multiline':False]['text':' also include [1, 2].','line_number':712,'multiline':False]['text':' Note the extra array.','line_number':717,'multiline':False]['text':' GetNextResults are only constructable from an rvalue reference to a Document, so we have to','line_number':722,'multiline':False]['text':' explicitly copy.','line_number':723,'multiline':False]['text':' Create a DocumentSourceGraphLookUp and verify that the counter increases by the expected','line_number':768,'multiline':False]['text':' amount.','line_number':769,'multiline':False]['text':' Copy the DocumentSourceGraphLookUp and verify that the counter doesn't increase.','line_number':787,'multiline':False]['text':' $graphLookup against internal databases should not cause the counter to get incremented.','line_number':796,'multiline':False]['text':' NOLINT','line_number':824,'multiline':False]['text':' NOLINT','line_number':869,'multiline':False]['text':' NOLINT','line_number':905,'multiline':False]['text':' NOLINT','line_number':917,'multiline':False]['text':' The result must match NamespaceString::kTenantMigrationOplogView, which means parse()','line_number':982,'multiline':False]['text':' will fail an assertion if nss contains any tenantId.','line_number':983,'multiline':False]['text':' namespace','line_number':1057,'multiline':False]['text':' namespace mongo','line_number':1058,'multiline':False]