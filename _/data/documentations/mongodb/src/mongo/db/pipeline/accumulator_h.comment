['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':40,'multiline':False]['text':'*
 * This enum indicates which documents an accumulator needs to see in order to compute its output.
 ','line_number':61,'multiline':True]['text':' AccumulatorState needs to see all documents in a group.','line_number':65,'multiline':False]['text':' AccumulatorState only needs to see one document in a group, and when there is a sort order,','line_number':68,'multiline':False]['text':' that document must be the first document.','line_number':69,'multiline':False]['text':' AccumulatorState only needs to see one document in a group, and when there is a sort order,','line_number':72,'multiline':False]['text':' that document must be the last document.','line_number':73,'multiline':False]['text':'* Marks the beginning of a new group. The input is the result of evaluating
     *  AccumulatorExpression::initializer, which can read from the group key.
     ','line_number':85,'multiline':True]['text':'* Process input and update internal state.
     *  merging should be true when processing outputs from getValue(true).
     ','line_number':90,'multiline':True]['text':'*
     * Finish processing all the pending operations, and clean up memory. Some accumulators
     * ($accumulator for example) might do a batch processing in order to improve performace. In
     * those cases, the memory consumption could spike up. Calling this function can help flush
     * those batch.
     ','line_number':97,'multiline':True]['text':'* Marks the end of the evaluate() phase and return accumulated result.
     *  toBeMerged should be true when the outputs will be merged by process().
     ','line_number':105,'multiline':True]['text':'/ The name of the op as used in a serialization of the pipeline.','line_number':110,'multiline':False]['text':'/ Reset this accumulator to a fresh state, ready for a new call to startNewGroup.','line_number':117,'multiline':False]['text':'/ True if the accumulator needs input, false otherwise.','line_number':120,'multiline':False]['text':'*
     * Serializes this accumulator to a valid MQL accumulation statement that would be legal
     * inside a $group.
     *
     * The parameter expression represents the input to any accumulator created by the
     * serialized accumulation statement.
     *
     * When executing on a sharded cluster, the result of this function will be sent to each
     * individual shard.
     *
     * This implementation assumes the accumulator has the simple syntax { <name>: <argument> },
     * such as { $sum: <argument> }. This syntax has no room for an initializer. Subclasses with a
     * more elaborate syntax such should override this method.
     ','line_number':133,'multiline':True]['text':'/ Update subclass's internal state based on input','line_number':162,'multiline':False]['text':'/ subclasses are expected to update this as necessary','line_number':169,'multiline':False]['text':'/ Member which tracks if this accumulator requires any more input values to compute its final','line_number':172,'multiline':False]['text':'/ result. In general, most accumulators require all input values, however, some accumulators','line_number':173,'multiline':False]['text':'/ can ignore input values under certain conditions. For example, $first can set this to','line_number':174,'multiline':False]['text':'/ 'false' after it sees one value.','line_number':175,'multiline':False]['text':'*
     * Creates a new $addToSet accumulator. If no memory limit is given, defaults to the value of
     * the server parameter 'internalQueryMaxAddToSetBytes'.
     ','line_number':190,'multiline':True]['text':' Can't this be an int?','line_number':263,'multiline':False]['text':' Used to "scale" comparison.','line_number':327,'multiline':False]['text':'*
     * Creates a new $push accumulator. If no memory limit is given, defaults to the value of the
     * server parameter 'internalQueryMaxPushBytes'.
     ','line_number':383,'multiline':True]['text':'*
     * The total of all values is partitioned between those that are decimals, and those that are
     * not decimals, so the decimal total needs to add the non-decimal.
     ','line_number':417,'multiline':True]['text':' Running sum of squares of delta from mean. Named to match algorithm.','line_number':442,'multiline':False]['text':' namespace mongo','line_number':515,'multiline':False]