['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]['text':' Must be constructed with the mutex held. 'yielder' may be null if there are no resources','line_number':70,'multiline':False]['text':' which need to be yielded while waiting.','line_number':71,'multiline':False]['text':' Acquire the operation-wide resources, then the mutex.','line_number':80,'multiline':False]['text':'*
     * Releases ownership of the lock to the caller. May only be called when the mutex is held
     * (after a call to unlock(), for example).
     ','line_number':93,'multiline':True]['text':' We will manually detach and reattach when iterating '_pipeline', we expect it to start in the','line_number':161,'multiline':False]['text':' detached state.','line_number':162,'multiline':False]['text':' Build the key.','line_number':175,'multiline':False]['text':' If the ids are not specified than we generate a simple sequence 0,1,2,3,...','line_number':229,'multiline':False]['text':' Validate that the ids are dense (no hole) and in the range [0,nConsumers)','line_number':234,'multiline':False]['text':' See if the loading is blocked on this consumer and if so unblock it.','line_number':289,'multiline':False]['text':' Grab a lock.','line_number':298,'multiline':False]['text':' Guard against some of the trickiness we do with moving the lock to/from the','line_number':302,'multiline':False]['text':' MutexAndResourceLock.','line_number':303,'multiline':False]['text':' Execute only in case we have not encountered an error.','line_number':305,'multiline':False]['text':' Check if we have a document.','line_number':311,'multiline':False]['text':' There is not any document so try to load more from the source.','line_number':319,'multiline':False]['text':' This consumer won the race and will fill the buffers.','line_number':325,'multiline':False]['text':' This will return when some exchange buffer is full and we cannot make any forward','line_number':330,'multiline':False]['text':' progress anymore.','line_number':331,'multiline':False]['text':' The return value is an index of a full consumer buffer.','line_number':332,'multiline':False]['text':' The loading cannot continue until the consumer with the full buffer consumes some','line_number':343,'multiline':False]['text':' documents.','line_number':344,'multiline':False]['text':' Wake up everybody and try to make some progress.','line_number':347,'multiline':False]['text':' We have to wake up all other blocked threads so they can detect the error and','line_number':352,'multiline':False]['text':' fail too. They can be woken up only after _errorInLoadNextBatch has been set.','line_number':353,'multiline':False]['text':' Some other consumer is already loading the buffers. There is nothing else we can do','line_number':359,'multiline':False]['text':' but wait.','line_number':360,'multiline':False]['text':' We have a document and we will deliver it to a consumer(s) based on the policy.','line_number':372,'multiline':False]['text':' The document is sent to all consumers.','line_number':376,'multiline':False]['text':' By default the Document is shallow copied. However, the broadcasted document','line_number':378,'multiline':False]['text':' can be used by multiple threads (consumers) and the Document is not thread','line_number':379,'multiline':False]['text':' safe. Hence we have to clone the Document.','line_number':380,'multiline':False]['text':' TODO send the high watermark here.','line_number':399,'multiline':False]['text':' We have reached the end so send EOS to all consumers.','line_number':411,'multiline':False]['text':' Build the key.','line_number':420,'multiline':False]['text':' By definition we send documents with missing fields to the consumer 0.','line_number':426,'multiline':False]['text':' Binary search for the consumer id.','line_number':444,'multiline':False]['text':' If _errorInLoadNextBatch status is not OK then an exception was thrown. In that case the','line_number':464,'multiline':False]['text':' throwing thread will do the dispose.','line_number':465,'multiline':False]['text':' If the buffer is disposed then we simply ignore any appends.','line_number':492,'multiline':False]['text':' The buffer is full.','line_number':502,'multiline':False]['text':' namespace mongo','line_number':506,'multiline':False]