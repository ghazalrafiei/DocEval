['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' This provides access to getExpCtx(), but we'll use a different name for this test suite.','line_number':85,'multiline':False]['text':' For tests which need to run in a replica set context.','line_number':92,'multiline':False]['text':' Will establish a feature compatibility version.','line_number':96,'multiline':False]['text':' Ensure that we are primary.','line_number':105,'multiline':False]['text':' A 'let' variable defined in a $lookup stage is expected to be available to all sub-pipelines. For','line_number':118,'multiline':False]['text':' sub-pipelines below the immediate one, they are passed to via ExpressionContext. This test','line_number':119,'multiline':False]['text':' confirms that variables defined in the ExpressionContext are captured by the $lookup stage.','line_number':120,'multiline':False]['text':' Verify that attempting to create a $lookup pipeline containing a $changeStream stage fails.','line_number':292,'multiline':False]['text':' Verify that attempting to create a sub-$lookup pipeline containing a $changeStream stage','line_number':309,'multiline':False]['text':' fails at parse time, even if the outer pipeline does not have a $changeStream stage.','line_number':310,'multiline':False]['text':' Empty variable name.','line_number':419,'multiline':False]['text':'','line_number':478,'multiline':False]['text':' Serialize the $lookup stage and confirm contents.','line_number':479,'multiline':False]['text':'','line_number':480,'multiline':False]['text':' The fields are in no guaranteed order, so we can't perform a simple Document comparison.','line_number':486,'multiline':False]['text':'','line_number':505,'multiline':False]['text':' Create a new $lookup stage from the serialization. Serialize the new stage and confirm that','line_number':506,'multiline':False]['text':' it is equivalent to the original serialization.','line_number':507,'multiline':False]['text':'','line_number':508,'multiline':False]['text':'','line_number':542,'multiline':False]['text':' Serialize the $lookup stage and confirm contents.','line_number':543,'multiline':False]['text':'','line_number':544,'multiline':False]['text':' The fields are in no guaranteed order, so we can't perform a simple Document comparison.','line_number':550,'multiline':False]['text':'','line_number':571,'multiline':False]['text':' Create a new $lookup stage from the serialization. Serialize the new stage and confirm that','line_number':572,'multiline':False]['text':' it is equivalent to the original serialization.','line_number':573,'multiline':False]['text':'','line_number':574,'multiline':False]['text':' Tests that $lookup with special 'from' syntax from: {db: config, coll: cache.chunks.*} can','line_number':585,'multiline':False]['text':' be round tripped.','line_number':586,'multiline':False]['text':'','line_number':606,'multiline':False]['text':' Serialize the $lookup stage and confirm contents.','line_number':607,'multiline':False]['text':'','line_number':608,'multiline':False]['text':' Tests that $lookup with 'let' and special 'from' syntax from: {db: config, coll: cache.chunks.*}','line_number':624,'multiline':False]['text':' can be round tripped.','line_number':625,'multiline':False]['text':'','line_number':646,'multiline':False]['text':' Serialize the $lookup stage and confirm contents.','line_number':647,'multiline':False]['text':'','line_number':648,'multiline':False]['text':' Tests that $lookup with 'collation' can be round tripped.','line_number':665,'multiline':False]['text':'','line_number':694,'multiline':False]['text':' Serialize the $lookup stage and confirm contents.','line_number':695,'multiline':False]['text':'','line_number':696,'multiline':False]['text':' Tests that $lookup with '$documents' can be round tripped.','line_number':713,'multiline':False]['text':'','line_number':732,'multiline':False]['text':' Serialize the $lookup stage and confirm contents.','line_number':733,'multiline':False]['text':'','line_number':734,'multiline':False]['text':' Ensure the $documents desugared to $queue properly.','line_number':741,'multiline':False]['text':' $lookup : {from : {db: <>, coll: <>}} syntax doesn't work for a namespace that isn't','line_number':760,'multiline':False]['text':' config.cache.chunks*.','line_number':761,'multiline':False]['text':' $lookup : {from : {db: <>, coll: <>}} syntax doesn't work for a namespace when "coll" is','line_number':778,'multiline':False]['text':' "cache.chunks.*" but "db" is not "config".','line_number':779,'multiline':False]['text':' $lookup : {from : {db: <>, coll: <>}} syntax fails when "db" is config but "coll" is','line_number':796,'multiline':False]['text':' not "cache.chunks.*".','line_number':797,'multiline':False]['text':' Tests that $lookup distributedPlanLogic() is boost::none, allowing for the stage to run on each','line_number':814,'multiline':False]['text':' shard, when it reads from config.cache.chunks.* namespaces using from: {db: <> , coll: <> }','line_number':815,'multiline':False]['text':' syntax.','line_number':816,'multiline':False]['text':' Tests $lookup distributedPlanLogic() is prohibited from executing on the shardsStage for standard','line_number':841,'multiline':False]['text':' $lookup with from: <string> syntax.','line_number':842,'multiline':False]['text':'','line_number':898,'multiline':False]['text':' Execution tests.','line_number':899,'multiline':False]['text':'','line_number':900,'multiline':False]['text':'*
 * A mock MongoProcessInterface which allows mocking a foreign pipeline. If
 * 'removeLeadingQueryStages' is true then any $match, $sort or $project fields at the start of the
 * pipeline will be removed, simulating the pipeline changes which occur when
 * PipelineD::prepareCursorSource absorbs stages into the PlanExecutor.
 ','line_number':902,'multiline':True]['text':' Implement this method should any test cases require setting aggregate command options via','line_number':946,'multiline':False]['text':' 'aggRequest'.','line_number':947,'multiline':False]['text':' Mock the input of a foreign namespace, pausing every other result.','line_number':963,'multiline':False]['text':' Mock out the foreign collection.','line_number':971,'multiline':False]['text':' Set up the $lookup stage.','line_number':977,'multiline':False]['text':' Mock out the foreign collection.','line_number':1012,'multiline':False]['text':' Mock its input, pausing every other result.','line_number':1018,'multiline':False]['text':' Set up the $lookup stage.','line_number':1026,'multiline':False]['text':' Set up the $lookup stage.','line_number':1067,'multiline':False]['text':' Set up the $lookup stage.','line_number':1089,'multiline':False]['text':' In the $facet stage here, the correlated $match stage comes after a $group stage which','line_number':1155,'multiline':False]['text':' returns EXHAUSTIVE_ALL for its dependencies. Verify that we continue enumerating the $facet','line_number':1156,'multiline':False]['text':' pipeline's variable dependencies after this point, so that the $facet stage is correctly','line_number':1157,'multiline':False]['text':' identified as correlated and the cache is placed before it in the $lookup pipeline.','line_number':1158,'multiline':False]['text':' Note that the second $match stage should be moved up to before the $group stage, since $group','line_number':1172,'multiline':False]['text':' should swap with $match when filtering on $_id.','line_number':1173,'multiline':False]['text':' This pipeline includes a $match stage that itself includes a $expr expression.','line_number':1198,'multiline':False]['text':' The first source is our mock data source, and the second should be the $match expression.','line_number':1214,'multiline':False]['text':' Ensure that the '$$var' in the embedded expression got optimized to ExpressionConstant.','line_number':1218,'multiline':False]['text':' The $project stage defines a local variable with the same name as the $lookup 'let' variable.','line_number':1236,'multiline':False]['text':' Verify that the $project is identified as non-correlated and the cache is placed after it.','line_number':1237,'multiline':False]['text':' Create a $lookup stage whose pipeline contains nested $lookups. The third-level $lookup','line_number':1273,'multiline':False]['text':' refers to a 'let' variable defined in the top-level $lookup. Verify that the second-level','line_number':1274,'multiline':False]['text':' $lookup is correctly identified as a correlated stage and the cache is placed before it.','line_number':1275,'multiline':False]['text':' The nested $lookup stage defines a 'let' variable with the same name as the top-level 'let'.','line_number':1312,'multiline':False]['text':' Verify the nested $lookup is identified as non-correlated and the cache is placed after it.','line_number':1313,'multiline':False]['text':' Prepare the mocked local source.','line_number':1392,'multiline':False]['text':' Confirm that the empty 'kBuilding' cache is placed just before the correlated $addFields.','line_number':1398,'multiline':False]['text':' Verify the first result (non-cached) from the $lookup, for local document {_id: 0}.','line_number':1409,'multiline':False]['text':' Preview the subpipeline that will be used to process the second local document {_id: 1}. The','line_number':1417,'multiline':False]['text':' sub-pipeline cache has been built on the first iteration, and is now serving in place of the','line_number':1418,'multiline':False]['text':' mocked foreign input source and the non-correlated stages at the start of the pipeline.','line_number':1419,'multiline':False]['text':' Verify that the rest of the results are correctly constructed from the cache.','line_number':1429,'multiline':False]['text':' Ensure the cache is abandoned after the first iteration by setting its max size to 0.','line_number':1457,'multiline':False]['text':' Prepare the mocked local and foreign sources.','line_number':1470,'multiline':False]['text':' Confirm that the empty 'kBuilding' cache is placed just before the correlated $addFields.','line_number':1476,'multiline':False]['text':' Get the first result from the stage, for local document {_id: 0}.','line_number':1487,'multiline':False]['text':' Preview the subpipeline that will be used to process the second local document {_id: 1}. The','line_number':1493,'multiline':False]['text':' sub-pipeline cache exceeded its max size on the first iteration, was abandoned, and is now','line_number':1494,'multiline':False]['text':' absent from the pipeline.','line_number':1495,'multiline':False]['text':' Verify that the second document is constructed correctly without the cache.','line_number':1505,'multiline':False]['text':' Create a DocumentSourceLookUp and verify that the counter increases by the expected','line_number':1549,'multiline':False]['text':' amount.','line_number':1550,'multiline':False]['text':' Copy the DocumentSourceLookUp and verify that the counter doesn't increase.','line_number':1563,'multiline':False]['text':' $lookup against internal databases should not cause the counter to get incremented.','line_number':1572,'multiline':False]['text':' NOLINT','line_number':1600,'multiline':False]['text':' The result must match one of several system const NamespaceStrings, which means parse()','line_number':1700,'multiline':False]['text':' will fail an assertion if nss contains any tenantId.','line_number':1701,'multiline':False]['text':' namespace','line_number':1779,'multiline':False]['text':' namespace mongo','line_number':1780,'multiline':False]