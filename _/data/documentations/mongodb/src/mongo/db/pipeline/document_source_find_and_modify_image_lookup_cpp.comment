['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':31,'multiline':False]['text':'*
 * Fetches the pre- or post-image entry for the given 'findAndModify' oplog entry or for the given
 * inner op in the given 'applyOps' oplog entry from the findAndModify image collection, and returns
 * a forged noop oplog entry containing the image. Returns none if no matching image entry is not
 * found.
 ','line_number':82,'multiline':True]['text':' Extract the UUID from the collection information. We should always have a valid uuid here.','line_number':99,'multiline':False]['text':' If no image document with the corresponding 'sessionId' is found, we skip forging the','line_number':110,'multiline':False]['text':' no-op and rely on the retryable write mechanism to catch that no pre- or post- image','line_number':111,'multiline':False]['text':' exists.','line_number':112,'multiline':False]['text':' In our snapshot, fetch the current transaction number for a session. If that','line_number':124,'multiline':False]['text':' transaction number doesn't match what's found on the image lookup, it implies that','line_number':125,'multiline':False]['text':' the image is not the correct version for this oplog entry. We will not forge a noop','line_number':126,'multiline':False]['text':' from it.','line_number':127,'multiline':False]['text':' Forge a no-op image entry to be returned.','line_number':138,'multiline':False]['text':' Set the opTime to be the findAndModify timestamp - 1. We guarantee that there will be no','line_number':149,'multiline':False]['text':' collisions because we always reserve an extra oplog slot when writing the retryable','line_number':150,'multiline':False]['text':' findAndModify entry on the primary.','line_number':151,'multiline':False]['text':' namespace','line_number':156,'multiline':False]['text':' Return the stashed downconverted document. This indicates that the previous document','line_number':245,'multiline':False]['text':' returned was a forged noop image document.','line_number':246,'multiline':False]['text':' If '_includeCommitTransactionTimestamp' is true, strip any commit transaction timestamp field','line_number':262,'multiline':False]['text':' from the inputDoc to avoid hitting an unknown field error when parsing the inputDoc into an','line_number':263,'multiline':False]['text':' oplog entry below. Store the commit timestamp so it can be attached to the forged image doc','line_number':264,'multiline':False]['text':' later, if there is one.','line_number':265,'multiline':False]['text':' This oplog entry cannot have a retry image.','line_number':291,'multiline':False]['text':' Strip the needsRetryImage field if set, even if we don't forge a noop image oplog entry','line_number':296,'multiline':False]['text':' to ensure we don't erroneously generate config.image_collection entries on the recipient','line_number':297,'multiline':False]['text':' for tenant migrations.','line_number':298,'multiline':False]['text':' This is an applyOps oplog entry for a retryable internal transaction. Unpack its','line_number':321,'multiline':False]['text':' operations to see if it has a retry image. Only one findAndModify operation is','line_number':322,'multiline':False]['text':' allowed in a given retryable transaction.','line_number':323,'multiline':False]['text':' Downcovert the document for this applyOps oplog entry by downcoverting this','line_number':342,'multiline':False]['text':' operation. We strip the needsRetryImage field, even if we don't forge a noop image','line_number':343,'multiline':False]['text':' oplog entry to ensure we don't erroneously generate config.image_collection entries','line_number':344,'multiline':False]['text':' on the recipient for tenant migrations.','line_number':345,'multiline':False]['text':' namespace mongo','line_number':384,'multiline':False]