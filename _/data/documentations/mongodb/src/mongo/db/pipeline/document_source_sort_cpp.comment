['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Offset in millis','line_number':77,'multiline':False]['text':' Convert from millis to seconds.','line_number':86,'multiline':False]['text':' Convert from millis to seconds.','line_number':102,'multiline':False]['text':' compare(x, y) op 0 means x op y, for any comparator 'op'.','line_number':109,'multiline':False]['text':' compare(x, y) op 0 means x op y, for any comparator 'op'.','line_number':119,'multiline':False]['text':' namespace','line_number':136,'multiline':False]['text':' The SortKeyGenerator expects the expressions to be serialized in order to detect a sort','line_number':147,'multiline':False]['text':' by a metadata field.','line_number':148,'multiline':False]['text':' No partition key means everything is in the same partition.','line_number':215,'multiline':False]['text':' No previous partition means there is no constraint.','line_number':223,'multiline':False]['text':' Next is in the same partition.','line_number':227,'multiline':False]['text':' Next is in a new partition: pretend we don't have a next document.','line_number':230,'multiline':False]['text':' If the _timeSorter is exhausted but we have more input, it must be because we just','line_number':238,'multiline':False]['text':' finished a partition. Restart the _timeSorter to make it ready for the next partition.','line_number':239,'multiline':False]['text':' Only pull input as necessary to get _timeSorter to have a result.','line_number':246,'multiline':False]['text':' We've reached the end of the current partition. Tell _timeSorter there will','line_number':253,'multiline':False]['text':' be no more input. In response, its state will never be kWait again unless we','line_number':254,'multiline':False]['text':' restart it, so we can proceed to drain all the documents currently held by','line_number':255,'multiline':False]['text':' the sorter.','line_number':256,'multiline':False]['text':' {$_internalBoundedSort: {sortKey, bound}}','line_number':309,'multiline':False]['text':' one Value for $sort and maybe a Value for $limit','line_number':337,'multiline':False]['text':' Do not absorb a limit, or combine with other sort stages.','line_number':381,'multiline':False]['text':' Since $sort is not guaranteed to be stable, we can blindly remove the first $sort only when','line_number':397,'multiline':False]['text':' there's no limit on the current sort.','line_number':398,'multiline':False]['text':' If there's a limit between two adjacent sorts with the same key pattern it's safe to','line_number':406,'multiline':False]['text':' merge the two sorts and take the minimum of the limits.','line_number':407,'multiline':False]['text':' When coalescing subsequent $sort stages, the existing/lower limit is retained in','line_number':410,'multiline':False]['text':' 'setLimit'.','line_number':411,'multiline':False]['text':' It's impossible for $sort or the find command's sort to refer to a variable.','line_number':430,'multiline':False]['text':' Empty sort pattern is not allowed for the bounded sort.','line_number':515,'multiline':False]['text':' convert to millis','line_number':541,'multiline':False]['text':' We always need to extract the sort key if we've reached this point. If the query system had','line_number':618,'multiline':False]['text':' already computed the sort key we'd have split the pipeline there, would be merging presorted','line_number':619,'multiline':False]['text':' documents, and wouldn't use this method.','line_number':620,'multiline':False]['text':' If this sort stage is part of a merged pipeline, make sure that each Document's sort key','line_number':641,'multiline':False]['text':' gets saved with its metadata.','line_number':642,'multiline':False]['text':' If this sort stage is part of a merged pipeline, make sure that each Document's sort key','line_number':658,'multiline':False]['text':' gets saved with its metadata.','line_number':659,'multiline':False]['text':' This is an interesting special case. If there are no further stages which require merging the','line_number':689,'multiline':False]['text':' streams into one, a $sort should not require it. This is only the case because the sort order','line_number':690,'multiline':False]['text':' doesn't matter for a pipeline ending with a write stage. We may encounter it here as an','line_number':691,'multiline':False]['text':' intermediate stage before a final $group with a $sort, which would make sense. Should we','line_number':692,'multiline':False]['text':' extend our analysis to detect if an exchange is appropriate in a general pipeline, a $sort','line_number':693,'multiline':False]['text':' would generally require merging the streams before producing output.','line_number':694,'multiline':False]['text':'*
 * Generates a new file name on each call using a static, atomic and monotonically increasing
 * number.
 *
 * Each user of the Sorter must implement this function to ensure that all temporary files that the
 * Sorter instances produce are uniquely identified using a unique file name extension with separate
 * atomic variable. This is necessary because the sorter.cpp code is separately included in multiple
 * places, rather than compiled in one place and linked, and so cannot provide a globally unique ID.
 ','line_number':699,'multiline':True]['text':' namespace','line_number':712,'multiline':False]['text':' namespace mongo','line_number':713,'multiline':False]