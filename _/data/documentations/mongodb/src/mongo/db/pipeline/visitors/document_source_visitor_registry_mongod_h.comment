['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Register 'visit()' functions for all mongod DocumentSources for the visitor specified as the
 * template parameter in the DocumentSource visitor regsitry in the given ServiceContext. Using this
 * function helps provide compile-time safety that ensures visitor implementors have provided an
 * implementation for all DocumentSoures. This function is intended to be used in the following
 * manner:
 *
 * // Define visit functions for all DocumentSources
 * void visit(FooVisitorCtx* ctx, const DocumentSourceMatch& match) { ... }
 * ...
 *
 * const ServiceContext::ConstructorActionRegisterer fooRegisterer{
 *   "FooRegisterer", [](ServiceContext* service) {
 *       registerMongodVisitor<FooVisitorCtx>(service);
 *   }};
 ','line_number':99,'multiline':True]['text':' These document sources are defined in the 'query_exec' library, so having','line_number':119,'multiline':False]['text':' them here causes a circular dependency. We should ideally factor them out','line_number':120,'multiline':False]['text':' into their own library (or as part of libpipeline) but this requires a','line_number':121,'multiline':False]['text':' large refactor of the 'query_exec' library.','line_number':122,'multiline':False]['text':' It should be safe to ignore these for now as the only user of the visitor','line_number':123,'multiline':False]['text':' is CQF, which won't encounter these DocumentSources.','line_number':124,'multiline':False]['text':' DocumentSourceCursor,','line_number':125,'multiline':False]['text':' DocumentSourceGeoNearCursor,','line_number':126,'multiline':False]['text':'*
 * See 'registerMongodVisitor'. This function has the same semantics except for the DocumentSources
 * defined in the 's/sharding_runtime_d' module.
 ','line_number':183,'multiline':True]['text':' namespace mongo','line_number':197,'multiline':False]