['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' mean ','line_number':96,'multiline':True]['text':' sigma ','line_number':96,'multiline':True]['text':' namespace','line_number':107,'multiline':False]['text':'*
 * Tests performance of aggregation expression
 *   {"$arrayElemAt": ["$array", 0]}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 ','line_number':119,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$arrayElemAt": ["$array", -1]}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 ','line_number':133,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$filter": {"input": "$array", "cond": {"$gte": ["$$this", "A"]}}}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 * No entries will pass the filter as the entries are strings, not numbers. ("Filter0" indicates
 * 0 entries will pass the filter.)
 ','line_number':147,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$filter": {"input": "$array", "cond": {"$gte": ["$$this", "0"]}}}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 * All ten entries will pass the filter and be returned in the result array. ("Filter10" indicates
 * 10 entries will pass the filter.)
 ','line_number':167,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$in": ["0", "$array"]}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 ','line_number':187,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$in": ["9", "$array"]}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 ','line_number':202,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$in": ["A", "$array"]}
 * against document
 *   {"_id": ObjectId(...), "array": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
 ','line_number':217,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$eq": ["1", "$value"]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':232,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$gte": ["1", "$value"]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':245,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$lte": ["1", "$value"]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':258,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$ne": ["1", "$value"]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':271,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$cond": [{$eq: ["1", "$value"]}, "1", "0"]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':284,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$ifNull": ["$value", "0"]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':299,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$ifNull": ["$value", "0"]}
 * against document
 *   {"_id": ObjectId(...), "value": null}
 ','line_number':312,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$switch": {
 *      "branches": [
 *         {"case": {"$eq": ["$value", "1"]}, "then": 0},
 *         {"case": {"$eq": ["$value", "0"]}, "then": 1},
 *       ],
 *       "default": -1
 *     }
 *   }
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 * The first case (position 0) will execute.
 ','line_number':325,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$switch": {
 *      "branches": [
 *         {"case": {"$eq": ["$value", "0"]}, "then": 0},
 *         {"case": {"$eq": ["$value", "1"]}, "then": 1},
 *       ],
 *       "default": -1
 *     }
 *   }
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 * The second case (position 1) will execute.
 ','line_number':353,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$switch": {
 *      "branches": [
 *         {"case": {"$eq": ["$value", "0"]}, "then": 0},
 *         {"case": {"$eq": ["$value", "2"]}, "then": 1},
 *       ],
 *       "default": -1
 *     }
 *   }
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 * The default case will execute.
 ','line_number':381,'multiline':True]['text':' 1918-01-01','line_number':410,'multiline':True]['text':' 2218-01-01','line_number':411,'multiline':True]['text':'timezone','line_number':413,'multiline':True]['text':'startOfWeek','line_number':414,'multiline':True]['text':' 2018-11-17','line_number':419,'multiline':True]['text':' 2020-11-17','line_number':420,'multiline':True]['text':'timezone','line_number':422,'multiline':True]['text':'startOfWeek','line_number':423,'multiline':True]['text':' 2018-11-17','line_number':429,'multiline':True]['text':' 2020-11-17','line_number':430,'multiline':True]['text':'startOfWeek','line_number':433,'multiline':True]['text':' 2218-01-01','line_number':438,'multiline':True]['text':'2120-11-17','line_number':439,'multiline':True]['text':'timezone','line_number':441,'multiline':True]['text':'startOfWeek','line_number':442,'multiline':True]['text':' timezone ','line_number':451,'multiline':True]['text':' timezone ','line_number':459,'multiline':True]['text':' timezone ','line_number':467,'multiline':True]['text':' timezone ','line_number':475,'multiline':True]['text':' year 2021','line_number':498,'multiline':True]['text':' startOfWeek ','line_number':502,'multiline':True]['text':' year 2021','line_number':507,'multiline':True]['text':' startOfWeek ','line_number':511,'multiline':True]['text':' year 2021','line_number':517,'multiline':True]['text':' startOfWeek ','line_number':521,'multiline':True]['text':' year 2100','line_number':527,'multiline':True]['text':' startOfWeek ','line_number':531,'multiline':True]['text':' year 2100','line_number':537,'multiline':True]['text':' startOfWeek ','line_number':541,'multiline':True]['text':' year 2100','line_number':547,'multiline':True]['text':' startOfWeek ','line_number':551,'multiline':True]['text':' year 2030','line_number':557,'multiline':True]['text':' startOfWeek ','line_number':561,'multiline':True]['text':' year 2030','line_number':567,'multiline':True]['text':' startOfWeek ','line_number':571,'multiline':True]['text':' year 2020','line_number':577,'multiline':True]['text':' startOfWeek ','line_number':581,'multiline':True]['text':' year 2020','line_number':587,'multiline':True]['text':' startOfWeek ','line_number':591,'multiline':True]['text':' year 2100','line_number':597,'multiline':True]['text':' startOfWeek ','line_number':601,'multiline':True]['text':' year 2030','line_number':607,'multiline':True]['text':' year 2030','line_number':613,'multiline':True]['text':' year 2020','line_number':621,'multiline':True]['text':' year 2100','line_number':629,'multiline':True]['text':' year 2030','line_number':637,'multiline':True]['text':' year 2020','line_number':645,'multiline':True]['text':'*
 * Tests performance of $getField expression.
 ','line_number':1020,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$and": [{"$eq": ["$value0", "1"]}, {"$eq": ["$value1", "0"]}]}
 * against document
 *   {"_id": ObjectId(...), "value0": "0", "value1": "1"}
 * This returns false on the first condition (position 0).
 ','line_number':1053,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$and": [{"$eq": ["$value0", "0"]}, {"$eq": ["$value1", "2"]}]}
 * against document
 *   {"_id": ObjectId(...), "value0": "0", "value1": "1"}
 * This returns false on the second condition (position 1).
 ','line_number':1070,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$and": [{"$eq": ["$value0", "0"]}, {"$eq": ["$value1", "1"]}]}
 * against document
 *   {"_id": ObjectId(...), "value0": "0", "value1": "1"}
 * This returns true as both conditions are met.
 ','line_number':1087,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$or": [{"$eq": ["$value", "1"]}, {"$eq": ["$value", "0"]}]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 * This returns true on the first condition (position 0).
 ','line_number':1104,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$or": [{"$eq": ["$value", "0"]}, {"$eq": ["$value", "1"]}]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 * This returns true on the second condition (position 1).
 ','line_number':1120,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$or": [{"$eq": ["$value", "0"]}, {"$eq": ["$value", "2"]}]}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 * This returns false as neither condition is met.
 ','line_number':1136,'multiline':True]['text':' The following two functions test different syntax for equivalent expressions:','line_number':1156,'multiline':False]['text':' $unsetField is an alias for $setField with $$REMOVE.','line_number':1157,'multiline':False]['text':'*
 * Tests performance of $set* expressions.
 ','line_number':1174,'multiline':True]['text':' the combination of base and any value up to exponent in the same idx create result that fits','line_number':1417,'multiline':False]['text':' always in int32_t or in an int64_t','line_number':1418,'multiline':False]['text':'*
 * Tests performance of aggregation expression
 *   {"$const": "1"}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':1458,'multiline':True]['text':'*
 * Tests performance of aggregation expression
 *   {"$literal": "1"}
 * against document
 *   {"_id": ObjectId(...), "value": "1"}
 ','line_number':1471,'multiline':True]['text':' Build a $dateDiff expression.','line_number':1529,'multiline':False]['text':' Build a $dateTrunc expression.','line_number':1552,'multiline':False]['text':'*
 * Tests performance of $percentile expression against a single array field of specified size.
 ','line_number':1657,'multiline':True]['text':'*
 * Tests performance of $strLenBytes expression against a single string field.
 ','line_number':1672,'multiline':True]['text':'*
 * Tests performance of $trim expression against a single string field.
 ','line_number':1682,'multiline':True]['text':'*
 * Tests performance of $trunc expression against a single field.
 ','line_number':1693,'multiline':True]['text':' namespace mongo','line_number':1703,'multiline':False]