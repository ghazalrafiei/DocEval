['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':48,'multiline':False]['text':' namespace mongo','line_number':88,'multiline':False]['text':'*
 * We store featureFlag in the parserMap, so that it can be checked at runtime to correctly
 * enable/disable the parser.
 ','line_number':97,'multiline':True]['text':'*
 * A window-function expression describes how to compute a single output value in a
 * $setWindowFields stage. For example, in
 *
 *     {$setWindowFields: {
 *         output: {
 *             totalCost: {$sum: "$price"},
 *             numItems: {$count: {}},
 *         }
 *     }}
 *
 * the two window-function expressions are {$sum: "$price"} and {$count: {}}.
 *
 * Because this class is part of a syntax tree, it does not hold any execution state:
 * instead it lets you create new instances of a window-function state.
 ','line_number':135,'multiline':True]['text':'*
     * Parses a single window-function expression. One of the BSONObj's keys is the function
     * name, and the other (optional) key is 'window': for example, the whole BSONObj might be
     * {$sum: "$x"} or {$sum: "$x", window: {documents: [2,3]}}.
     *
     * 'sortBy' is from the sortBy argument of $setWindowFields. Some window functions require
     * a sort spec, or require a one-field sort spec; they use this argument to enforce those
     * requirements.
     *
     * If the window function accepts bounds, parse() parses them, from the window field. For window
     * functions like $rank, which don't accept bounds, parse() is responsible for throwing a parse
     * error, just like other unexpected arguments.
     ','line_number':154,'multiline':True]['text':'*
     * A Parser has the same signature as parse(). The BSONObj is the whole expression, as
     * described above, because some parsers need to switch on the function name.
     ','line_number':171,'multiline':True]['text':'*
     * Is this a function that the parser knows about?
     ','line_number':188,'multiline':True]['text':'*
     * Optimizes the input expression using its own optimize() method.
     ','line_number':195,'multiline':True]['text':'*
     * Some window functions do not accept bounds in their syntax ($rank).
     * In these cases, this field is ignored.
     ','line_number':260,'multiline':True]['text':' 'obj' is something like '{$func: <args>, window: {...}}'','line_number':274,'multiline':False]['text':'*
 * Similar to ExpressionFromAccumulator except only an expression argument is allowed.
 ','line_number':320,'multiline':True]['text':' 'obj' is something like '{$func: <expressionArg>}'','line_number':337,'multiline':False]['text':' These expressions have variable lower bounds, but the functions themselves will handle','line_number':339,'multiline':False]['text':' the specifics of what documents to count. All documents preceding current must be','line_number':340,'multiline':False]['text':' seen by the function.','line_number':341,'multiline':False]['text':' 'obj' is something like '{$func: <args>, window: {...}}'','line_number':396,'multiline':False]['text':' 'obj' is something like '{$func: <args>}'','line_number':462,'multiline':False]['text':' Rank based accumulators are always unbounded to current.','line_number':465,'multiline':False]['text':' Rank based accumulators use the sort by expression as the input.','line_number':480,'multiline':False]['text':' Alpha must be between zero and one (exclusive), so choose a legal representative','line_number':578,'multiline':False]['text':' value if applicable.','line_number':579,'multiline':False]['text':' These larger time units vary so much, it doesn't make sense to define a','line_number':651,'multiline':False]['text':' fixed conversion from milliseconds.','line_number':652,'multiline':False]['text':' Only these time units are allowed.','line_number':657,'multiline':False]['text':' {','line_number':701,'multiline':False]['text':'   $derivative: {','line_number':702,'multiline':False]['text':'     input: <expr>,','line_number':703,'multiline':False]['text':'     unit: <string>, // optional','line_number':704,'multiline':False]['text':'   }','line_number':705,'multiline':False]['text':'   window: {...} // optional','line_number':706,'multiline':False]['text':' }','line_number':707,'multiline':False]['text':' The default window bounds are [unbounded, unbounded], which may be a surprising default','line_number':746,'multiline':False]['text':' for $derivative.','line_number':747,'multiline':False]['text':' {','line_number':779,'multiline':False]['text':'   $integral: {','line_number':780,'multiline':False]['text':'     input: <expr>,','line_number':781,'multiline':False]['text':'     unit: <string>, // optional','line_number':782,'multiline':False]['text':'   }','line_number':783,'multiline':False]['text':'   window: {...} // optional','line_number':784,'multiline':False]['text':' }','line_number':785,'multiline':False]['text':'','line_number':786,'multiline':False]['text':'*
 * Describes a window function expression that accepts 'n' as a parameter. Templated by
 * 'WindowFunctionN', which corresponds to the 'WindowFunctionState' removable type associated
 * with this expression. It is also templated by 'AccumulatorNType' which is the AccumulatorState
 * associated with this expression.
 ','line_number':982,'multiline':True]['text':' TODO SERVER-59327 make these members private','line_number':1034,'multiline':False]['text':' namespace mongo::window_function','line_number':1072,'multiline':False]