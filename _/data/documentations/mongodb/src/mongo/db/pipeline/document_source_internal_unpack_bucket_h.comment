['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Use 'serializeToArray' above.
     ','line_number':106,'multiline':True]['text':' The user cannot specify multiple $unpackBucket stages in the pipeline.','line_number':133,'multiline':False]['text':'*
     * See ../query/timeseries/README.md for a description of all the rewrites implemented in this
     * function. The README.md should be maintained in sync with this function. Please update the
     * README accordingly.
     ','line_number':168,'multiline':True]['text':'
     * Given a $project produced by 'extractOrBuildProjectToInternalize()', attempt to internalize
     * its top-level fields by updating the state of '_bucketUnpacker'.
     ','line_number':176,'multiline':True]['text':'*
     * Given a SourceContainer and an iterator pointing to $_internalUnpackBucket, extracts or
     * builds a $project that can be entirely internalized according to the below rules. Returns the
     * $project and a bool indicating its type (true for inclusion, false for exclusion).
     *    1. If there is an inclusion projection immediately after $_internalUnpackBucket which can
     *       be internalized, it will be removed from the pipeline and returned.
     *    2. Otherwise, if there is a finite dependency set for the rest of the pipeline, an
     *       inclusion $project representing it and containing only root-level fields will be
     *       returned. An inclusion $project will be returned here even if there is a viable
     *       exclusion $project next in the pipeline.
     *    3. Otherwise, if there is an exclusion projection immediately after $_internalUnpackBucket
     *       which can be internalized, it will be removed from the pipeline and returned.
     *    3. Otherwise, an empty BSONObj will be returned.
     ','line_number':182,'multiline':True]['text':'*
     * Convenience wrapper around BucketSpec::createPredicatesOnBucketLevelField().
     ','line_number':199,'multiline':True]['text':'*
     * Attempts to split 'match' into two stages, where the first is dependent only on the metaField
     * and the second is the remainder, so that applying them in sequence is equivalent to applying
     * 'match' once. Will return two intrusive_ptrs to new $match stages. Either pointer may be
     * null. If the first is non-null, it will have the metaField renamed from the user defined name
     * to 'kBucketMetaFieldName'.
     ','line_number':205,'multiline':True]['text':'*
     * Sets the sample size to 'n' and the maximum number of measurements in a bucket to be
     * 'bucketMaxCount'. Calling this method implicitly changes the behavior from having the stage
     * unpack every bucket in a collection to sampling buckets to generate a uniform random sample
     * of size 'n'.
     ','line_number':215,'multiline':True]['text':'*
     * If the stage after $_internalUnpackBucket is $project, $addFields, or $set, try to extract
     * from it computed meta projections and push them pass the current stage. Return true if the
     * next stage was removed as a result of the optimization.
     ','line_number':238,'multiline':True]['text':'*
     * If 'src' represents an exclusion $project, attempts to extract the parts of 'src' that are
     * only on the metaField. Returns a BSONObj representing the extracted project and a bool
     * indicating whether all of 'src' was extracted. In the extracted $project, the metaField is
     * renamed from the user defined name to 'kBucketMetaFieldName'.
     ','line_number':246,'multiline':True]['text':'*
     * Helper method which checks if we can avoid unpacking if we have a group stage with
     * min/max/count aggregates. If the rewrite is possible, 'container' is modified, bool in the
     * return pair is set to 'true' and the iterator is set to point to the new group.
     ','line_number':254,'multiline':True]['text':'*
     * Helper method which checks if we can replace DocumentSourceGroup with
     * DocumentSourceStreamingGroup. Returns true if the optimization is performed.
     ','line_number':262,'multiline':True]['text':'*
     * If the current aggregation is a lastpoint-type query (ie. with a $sort on meta and time
     * fields, and a $group with a meta _id and only $first or $last accumulators) we can rewrite
     * it to avoid unpacking all buckets.
     *
     * Ex: user aggregation of
     * [{_internalUnpackBucket: {...}},
     *  {$sort: {myMeta.a: 1, myTime: -1}},
     *  {$group: {_id: "$myMeta.a", otherFields: {$first: {$otherFields}}}}]
     *
     * will be rewritten into:
     * [{$sort: {meta.a: 1, 'control.max.myTime': -1, 'control.min.myTime': -1}},
     *  {$group: {_id: "$meta.a": 1, control: {$first: "$control"}, meta: {$first: "$meta"},
     *    data: {$first: "$data"}}},
     *  {$_internalUnpackBucket: {...}},
     *  {$sort: {myMeta.a: 1, myTime: -1}},
     *  {$group: {_id: "$myMeta.a", otherFields: {$first: {$otherFields}}}}]
     *
     * Note that the first $group includes all fields so we can avoid fetching the bucket twice.
     ','line_number':269,'multiline':True]['text':' Parses given 'eventFilterBson' to set '_eventFilter' and determines its dependencies','line_number':315,'multiline':False]['text':' and SBE compatibility.','line_number':316,'multiline':False]['text':' If buckets contained a mixed type schema along some path, we have to push down special','line_number':319,'multiline':False]['text':' predicates in order to ensure correctness.','line_number':320,'multiline':False]['text':' This is true if 'bucketRoundingSeconds' and 'bucketMaxSpanSeconds' are set, equal, and','line_number':323,'multiline':False]['text':' unchanged. Then we can push down certain $match and $group queries.','line_number':324,'multiline':False]['text':' If any bucket contains dates outside the range of 1970-2038, we are unable to rely on','line_number':327,'multiline':False]['text':' the _id index, as _id is truncates to 32 bits','line_number':328,'multiline':False]['text':' It's beneficial to do as much filtering at the bucket level as possible to avoid unpacking','line_number':337,'multiline':False]['text':' buckets that wouldn't contribute to the results anyway. There is a generic mechanism that','line_number':338,'multiline':False]['text':' allows to swap $match stages with this one (see 'getModifiedPaths()'). It lets us split out','line_number':339,'multiline':False]['text':' and push down a filter on the metaField "as is". The remaining filters might cause creation','line_number':340,'multiline':False]['text':' of additional bucket-level filters (see 'createPredicatesOnBucketLevelField()') that are','line_number':341,'multiline':False]['text':' inserted before this stage while the original filter is incorporated into this stage as','line_number':342,'multiline':False]['text':' '_eventFilter' (to be applied to each unpacked document) and/or '_wholeBucketFilter' for the','line_number':343,'multiline':False]['text':' cases when _all_ events in a bucket would match so that the filter is evaluated only once','line_number':344,'multiline':False]['text':' rather than on all events from the bucket (currently, we only do this for the 'timeField').','line_number':345,'multiline':False]['text':' If after unpacking there are no stages referencing any fields (e.g. $count), unpack directly','line_number':352,'multiline':False]['text':' to BSON so that data doesn't need to be materialized to Document.','line_number':353,'multiline':False]['text':' Caches the SBE-compatibility status result of this stage.','line_number':361,'multiline':False]['text':' namespace mongo','line_number':365,'multiline':False]