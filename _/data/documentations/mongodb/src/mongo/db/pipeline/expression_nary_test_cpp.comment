['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':47,'multiline':False]['text':' IWYU pragma: keep','line_number':58,'multiline':False]['text':'* A dummy child of ExpressionNary used for testing. ','line_number':73,'multiline':True]['text':' Just put all the values in a list.','line_number':77,'multiline':False]['text':' By default, this is not associative/commutative so the results will change if','line_number':78,'multiline':False]['text':' instantiated as commutative or associative and operations are reordered.','line_number':79,'multiline':False]['text':'* Convert BSONObj to a BSONObj with our $const wrappings. ','line_number':121,'multiline':True]['text':' arrays within arrays are treated as constant values by the real','line_number':129,'multiline':False]['text':' parser','line_number':130,'multiline':False]['text':'* Convert Expression to BSON. ','line_number':142,'multiline':True]['text':' ------------------------- NaryExpression -------------------------- ','line_number':188,'multiline':True]['text':' Verify that the internal operands are optimized','line_number':291,'multiline':False]['text':' Verify that if all the operands are constants, the expression is replaced','line_number':300,'multiline':False]['text':' by a constant value equivalent to the expression applied to the operands.','line_number':301,'multiline':False]['text':' Verify that the optimization of grouping constant and non-constant operands','line_number':311,'multiline':False]['text':' and then applying the expression to the constant operands to reduce them to','line_number':312,'multiline':False]['text':' one constant operand is only applied if the expression is associative and','line_number':313,'multiline':False]['text':' commutative.','line_number':314,'multiline':False]['text':' Test that if there is an expression of the same type in a non-commutative nor associative','line_number':457,'multiline':False]['text':' expression, the inner expression is not expanded.','line_number':458,'multiline':False]['text':' {"$testable" : [ { "$testable" : [ 100, "$path1"] }, 99, "$path2"] } is optimized to:','line_number':459,'multiline':False]['text':' {"$testable" : [ { "$testable" : [ 100, "$path1"] }, 99, "$path2"] }','line_number':460,'multiline':False]['text':' Test that if there is an expression of the same type as the first operand','line_number':481,'multiline':False]['text':' in a non-commutative but associative expression, the inner expression is expanded.','line_number':482,'multiline':False]['text':' Also, there shouldn't be any grouping of the operands.','line_number':483,'multiline':False]['text':' {"$testable" : [ { "$testable" : [ 100, "$path1"] }, 99, "$path2"] } is optimized to:','line_number':484,'multiline':False]['text':' {"$testable" : [ 100, "$path1", 99, "$path2"] }','line_number':485,'multiline':False]['text':' Test that if there is an expression of the same type as the first operand','line_number':507,'multiline':False]['text':' in a non-commutative but associative expression, the inner expression is expanded.','line_number':508,'multiline':False]['text':' Partial collapsing optimization should be applied to the operands.','line_number':509,'multiline':False]['text':' {"$testable" : [ { "$testable" : [ 100, "$path1", 101] }, 99, "$path2"] } is optimized to:','line_number':510,'multiline':False]['text':' {"$testable" : [ 100, "$path1", [101, 99], "$path2"] }','line_number':511,'multiline':False]['text':' Test that if there is an expression of the same type as the first operand','line_number':534,'multiline':False]['text':' in a non-commutative but left-associative expression, the inner expression is not expanded.','line_number':535,'multiline':False]['text':' Test that if there is an expression of the same type in the middle of the operands','line_number':557,'multiline':False]['text':' in a non-commutative but associative expression, the inner expression is expanded.','line_number':558,'multiline':False]['text':' Partial collapsing optimization should not be applied to the operands.','line_number':559,'multiline':False]['text':' {"$testable" : [ 200, "$path3", { "$testable" : [ 100, "$path1"] }, 99, "$path2"] } is','line_number':560,'multiline':False]['text':' optimized to: {"$testable" : [ 200, "$path3", 100, "$path1", 99, "$path2"] }','line_number':561,'multiline':False]['text':' Test that if there is an expression of the same type in the middle of the operands','line_number':586,'multiline':False]['text':' in a non-commutative but associative expression, the inner expression is expanded.','line_number':587,'multiline':False]['text':' Partial collapsing optimization should be applied to the operands.','line_number':588,'multiline':False]['text':' {"$testable" : [ 200, "$path3", 201 { "$testable" : [ 100, "$path1", 101] }, 99, "$path2"] } is','line_number':589,'multiline':False]['text':' optimized to: {"$testable" : [ 200, "$path3", [201, 100], "$path1", [101, 99], "$path2"] }','line_number':590,'multiline':False]['text':' Test that if there is an expression of the same type in the back of the operands in a','line_number':616,'multiline':False]['text':' non-commutative but associative expression, the inner expression is expanded.','line_number':617,'multiline':False]['text':' Partial collapsing optimization should not be applied to the operands.','line_number':618,'multiline':False]['text':' {"$testable" : [ 200, "$path3", { "$testable" : [ 100, "$path1"] }] } is','line_number':619,'multiline':False]['text':' optimized to: {"$testable" : [ 200, "$path3", 100, "$path1"] }','line_number':620,'multiline':False]['text':' Test that if there is an expression of the same type in the back of the operands in a','line_number':642,'multiline':False]['text':' non-commutative but associative expression, the inner expression is expanded.','line_number':643,'multiline':False]['text':' Partial collapsing optimization should be applied to the operands.','line_number':644,'multiline':False]['text':' {"$testable" : [ 200, "$path3", 201, { "$testable" : [ 100, "$path1", 101] }] } is','line_number':645,'multiline':False]['text':' optimized to: {"$testable" : [ 200, "$path3", [201, 100], "$path1", 101] }','line_number':646,'multiline':False]['text':' Test that if there are two consecutive inner expressions of the same type in a non-commutative','line_number':669,'multiline':False]['text':' but associative expression, both expressions are correctly flattened.','line_number':670,'multiline':False]['text':' Partial collapsing optimization should not be applied to the operands.','line_number':671,'multiline':False]['text':' {"$testable" : [ { "$testable" : [ 100, "$path1"] }, { "$testable" : [ 200, "$path2"] }] } is','line_number':672,'multiline':False]['text':' optimized to: {"$testable" : [ 100, "$path1", 200, "$path2"] }','line_number':673,'multiline':False]['text':' Test that if there are two consecutive inner expressions of the same type in a non-commutative','line_number':698,'multiline':False]['text':' but associative expression, both expressions are correctly flattened.','line_number':699,'multiline':False]['text':' Partial collapsing optimization should be applied to the operands.','line_number':700,'multiline':False]['text':' {"$testable" : [ { "$testable" : [ 100, "$path1", 101] }, { "$testable" : [ 200, "$path2"] }] }','line_number':701,'multiline':False]['text':' is optimized to: {"$testable" : [ 100, "$path1", [ 101, 200], "$path2"] }','line_number':702,'multiline':False]['text':' Test that inner expressions are correctly flattened and constant operands re-arranged and','line_number':727,'multiline':False]['text':' collapsed when using a commutative and associative expression.','line_number':728,'multiline':False]['text':' {"$testable" : [ 200, "$path3", 201, { "$testable" : [ 100, "$path1", 101] }, 99, "$path2"] } is','line_number':729,'multiline':False]['text':' optimized to: {"$testable" : [ "$path3", "$path1", "$path2", [200, 201, [ 100, 101], 99] ] }','line_number':730,'multiline':False]['text':' ------------------------- ExpressionTrunc -------------------------- ','line_number':759,'multiline':True]['text':' Outside the range of long longs (there isn't enough precision for decimals in this range, so','line_number':820,'multiline':False]['text':' should just preserve the number).','line_number':821,'multiline':False]['text':' ------------------------- ExpressionSqrt -------------------------- ','line_number':924,'multiline':True]['text':' ------------------------- ExpressionExp -------------------------- ','line_number':969,'multiline':True]['text':' ------------------------- ExpressionCeil -------------------------- ','line_number':1010,'multiline':True]['text':' Outside the range of long longs (there isn't enough precision for decimals in this range, so','line_number':1042,'multiline':False]['text':' ceil should just preserve the number).','line_number':1043,'multiline':False]['text':' ------------------------- ExpressionFloor -------------------------- ','line_number':1068,'multiline':True]['text':' Outside the range of long longs (there isn't enough precision for decimals in this range, so','line_number':1100,'multiline':False]['text':' floor should just preserve the number).','line_number':1101,'multiline':False]['text':' ------------------------- ExpressionRound -------------------------- ','line_number':1126,'multiline':True]['text':' Outside the range of long longs (there isn't enough precision for decimals in this range, so','line_number':1185,'multiline':False]['text':' should just preserve the number).','line_number':1186,'multiline':False]['text':' ------------------------- ExpressionBinarySize -------------------------- ','line_number':1294,'multiline':True]['text':' ------------------------- ExpressionFirst -------------------------- ','line_number':1324,'multiline':True]['text':' ------------------------- ExpressionLast -------------------------- ','line_number':1359,'multiline':True]['text':' ------------------------- ExpressionTsSecond -------------------------- ','line_number':1394,'multiline':True]['text':' ------------------------- ExpressionTsIncrement -------------------------- ','line_number':1422,'multiline':True]['text':' anonymous namespace','line_number':1450,'multiline':False]['text':' namespace ExpressionTests','line_number':1451,'multiline':False]