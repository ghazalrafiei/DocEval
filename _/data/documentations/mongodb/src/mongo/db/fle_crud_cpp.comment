['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Update the OpTime for the reply to current OpTime','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' The OpTime in the reply reflects the OpTime of when the request was run, not when it was','line_number':158,'multiline':False]['text':' committed. The Transaction API propagates the OpTime from the commit transaction onto the','line_number':159,'multiline':False]['text':' current thread so grab it from TLS and change the OpTime on the reply.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' Prioritize the fields in c over the fields in let in case of duplicates','line_number':192,'multiline':False]['text':' namespace','line_number':283,'multiline':False]['text':'*
 * Make an expression context from a batch command request and a specific operation. Templated out
 * to work with update and delete.
 ','line_number':299,'multiline':True]['text':'*
 * We mark commands as "CrudProcessed" to ensure the various commands recognize them as QE related
 * to ensure they are filtered out.
 ','line_number':324,'multiline':True]['text':' We need to set an empty BSON object here for the schema.','line_number':332,'multiline':False]['text':' namespace','line_number':338,'multiline':False]['text':'*
 * Checks that all encrypted payloads correspond to an encrypted field,
 * and that the encryption keyId used was appropriate for that field.
 ','line_number':342,'multiline':True]['text':' The function that handles the transaction may outlive this function so we need to use','line_number':390,'multiline':False]['text':' shared_ptrs since it runs on another thread','line_number':391,'multiline':False]['text':' If we have write errors but no unexpected internal errors, then we reach here','line_number':424,'multiline':False]['text':' If we have write errors, we need to return a failed status to ensure the txn client','line_number':425,'multiline':False]['text':' does not try to commit the transaction.','line_number':426,'multiline':False]['text':' This is an optimization for single-document unencrypted inserts.','line_number':457,'multiline':False]['text':' FLETransactionAbort is used for control flow so it means we have a valid','line_number':474,'multiline':False]['text':' InsertCommandReply with write errors so we should return that.','line_number':475,'multiline':False]['text':' If the request is ordered (inserts are ordered by default) we will return','line_number':481,'multiline':False]['text':' early.','line_number':482,'multiline':False]['text':' If the request is ordered (inserts are ordered by default) we will return','line_number':489,'multiline':False]['text':' early.','line_number':490,'multiline':False]['text':' `ownedRequest` is OpMsgRequest type which will parse the tenantId from ValidatedTenantId.','line_number':535,'multiline':False]['text':' Before parsing we should ensure that validatedTenancyScope is set in order not to lose','line_number':536,'multiline':False]['text':' the tenantId after the parsing.','line_number':537,'multiline':False]['text':' The function that handles the transaction may outlive this function so we need to use','line_number':546,'multiline':False]['text':' shared_ptrs','line_number':547,'multiline':False]['text':' If we have write errors but no unexpected internal errors, then we reach here','line_number':572,'multiline':False]['text':' If we have write errors, we need to return a failed status to ensure the txn client','line_number':573,'multiline':False]['text':' does not try to commit the transaction.','line_number':574,'multiline':False]['text':' FLETransactionAbort is used for control flow so it means we have a valid','line_number':585,'multiline':False]['text':' InsertCommandReply with write errors so we should return that.','line_number':586,'multiline':False]['text':' pipeline - is agg specific, delta is oplog, transform is internal (timeseries)','line_number':614,'multiline':False]['text':' The function that handles the transaction may outlive this function so we need to use','line_number':627,'multiline':False]['text':' shared_ptrs','line_number':628,'multiline':False]['text':' If we have write errors but no unexpected internal errors, then we reach here','line_number':665,'multiline':False]['text':' If we have write errors, we need to return a failed status to ensure the txn client','line_number':666,'multiline':False]['text':' does not try to commit the transaction.','line_number':667,'multiline':False]['text':' FLETransactionAbort is used for control flow so it means we have a valid','line_number':678,'multiline':False]['text':' InsertCommandReply with write errors so we should return that.','line_number':679,'multiline':False]['text':'*
 * Extracts update payloads from a {findAndModify: nss, ...} request,
 * and proxies to `validateInsertUpdatePayload()`.
 ','line_number':813,'multiline':True]['text':' Is this a delete?','line_number':818,'multiline':False]['text':' User can only specify either remove = true or update != {}','line_number':821,'multiline':False]['text':' pipeline - is agg specific, delta is oplog, transform is internal (timeseries)','line_number':834,'multiline':False]['text':' namespace','line_number':861,'multiline':False]['text':' The function that handles the transaction may outlive this function so we need to use','line_number':879,'multiline':False]['text':' shared_ptrs','line_number':880,'multiline':False]['text':'*
 * Update is the most complicated FLE operation.
 * It is basically an insert followed by a delete, sort of.
 *
 * 1. Process the update for any encrypted fields like insert, update the ESC and get new counters
 * 2. Extend the update $push new tags into the document
 * 3. Run the update with findAndModify to get the pre-image
 * 4. Run a find to get the post-image update with the id from the pre-image
 * -- Fail if we cannot find the new document. This could happen if they updated _id.
 * 5. Find the removed fields
 * 6. Remove the stale tags from the original document with a new push
 ','line_number':1009,'multiline':True]['text':' Step 1 ----','line_number':1039,'multiline':False]['text':' Step 2 ----','line_number':1064,'multiline':False]['text':' Step 2 ----','line_number':1079,'multiline':False]['text':' Step 3 ----','line_number':1087,'multiline':False]['text':' if there is no preimage, then we did not update any documents, we are done','line_number':1099,'multiline':False]['text':' If this is a retried write, we are done','line_number':1103,'multiline':False]['text':' If there are errors, we are done','line_number':1108,'multiline':False]['text':' Validate that the original document does not contain values with on-disk version','line_number':1113,'multiline':False]['text':' incompatible with the current protocol version.','line_number':1114,'multiline':False]['text':' Step 4 ----','line_number':1117,'multiline':False]['text':' Fail if we could not find the new document','line_number':1124,'multiline':False]['text':' Step 5 ----','line_number':1127,'multiline':False]['text':' Check the user did not remove/destroy the __safeContent__ array. If there are no','line_number':1132,'multiline':False]['text':' indexed fields, then there will not be a safeContent array in the document.','line_number':1133,'multiline':False]['text':' Step 6 ----','line_number':1137,'multiline':False]['text':' GarbageCollect steps:','line_number':1138,'multiline':False]['text':'  1. Gather the tags from the metadata block(s) of each removed field. These are stale tags.','line_number':1139,'multiline':False]['text':'  2. Generate the update command that pulls the stale tags from __safeContent__','line_number':1140,'multiline':False]['text':'  3. Perform the update','line_number':1141,'multiline':False]['text':' ignore ','line_number':1156,'multiline':True]['text':' See processUpdate for algorithm overview','line_number':1284,'multiline':False]['text':' Step 0 ----','line_number':1307,'multiline':False]['text':' Rewrite filter','line_number':1308,'multiline':False]['text':' Make sure not to inherit the command's writeConcern, this should be set at the transaction','line_number':1321,'multiline':False]['text':' level.','line_number':1322,'multiline':False]['text':' Step 1 ----','line_number':1325,'multiline':False]['text':' If we have an update object, we have to process for ESC','line_number':1326,'multiline':False]['text':' Step 2 ----','line_number':1344,'multiline':False]['text':' Step 2 ----','line_number':1356,'multiline':False]['text':' Step 3 ----','line_number':1364,'multiline':False]['text':' if there is no preimage, then we did not update or delete any documents, we are done','line_number':1374,'multiline':False]['text':' If this is a retried write, we are done','line_number':1378,'multiline':False]['text':' Step 4 ----','line_number':1383,'multiline':False]['text':' Is this a delete? If so, there's no need to GarbageCollect.','line_number':1390,'multiline':False]['text':' Validate that the original document does not contain values with on-disk version','line_number':1395,'multiline':False]['text':' incompatible with the current protocol version.','line_number':1396,'multiline':False]['text':' Fail if we could not find the new document','line_number':1401,'multiline':False]['text':' Step 5 ----','line_number':1404,'multiline':False]['text':' Check the user did not remove/destroy the __safeContent__ array. If there are no','line_number':1409,'multiline':False]['text':' indexed fields, then there will not be a safeContent array in the document.','line_number':1410,'multiline':False]['text':' Step 6 ----','line_number':1414,'multiline':False]['text':' GarbageCollect steps:','line_number':1415,'multiline':False]['text':'  1. Gather the tags from the metadata block(s) of each removed field. These are stale tags.','line_number':1416,'multiline':False]['text':'  2. Generate the update command that pulls the stale tags from __safeContent__','line_number':1417,'multiline':False]['text':'  3. Perform the update','line_number':1418,'multiline':False]['text':' There is no findAndModify parsing in mongos so we need to first parse to decide if it is for','line_number':1473,'multiline':False]['text':' FLE2','line_number':1474,'multiline':False]['text':' FLE2 Mongos CRUD operations loopback through MongoS with EncryptionInformation as','line_number':1487,'multiline':False]['text':' findAndModify so query can do any necessary transformations. But on the nested call, CRUD','line_number':1488,'multiline':False]['text':' does not need to do any more work.','line_number':1489,'multiline':False]['text':' Throws on error','line_number':1526,'multiline':False]['text':' We only expect one document in the state collection considering that _id is a unique','line_number':1532,'multiline':False]['text':' index','line_number':1533,'multiline':False]['text':' Since count() does not work in a transaction, call count() by bypassing the transaction api','line_number':1542,'multiline':False]['text':' Allow the thread to be killable. If interrupted, the call to runCommand will fail with the','line_number':1543,'multiline':False]['text':' interruption.','line_number':1544,'multiline':False]['text':' We only support a single delete','line_number':1660,'multiline':False]['text':' We only support a single update','line_number':1725,'multiline':False]['text':' WriteConcern is set at the transaction level so strip it out','line_number':1820,'multiline':False]['text':' Throws on error','line_number':1842,'multiline':False]['text':' Pop off the current op context so we can get a fresh set of read concern settings','line_number':1886,'multiline':False]['text':' Allow the thread to be killable. If interrupted, the call to runCommand will fail with the','line_number':1887,'multiline':False]['text':' interruption.','line_number':1888,'multiline':False]['text':' We need to instruct the request object (via serialization context passed in when constructing','line_number':1899,'multiline':False]['text':' getCountsCmd) that we do not ALSO prefix the $db field when serialize() is later called since','line_number':1900,'multiline':False]['text':' we will already be setting the $tenant field below.  Providing both a tenant prefix and a','line_number':1901,'multiline':False]['text':' $tenant field is unsupported and can lead to namespace errors.','line_number':1902,'multiline':False]['text':' namespace mongo','line_number':1928,'multiline':False]