['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Hangs the 'SetChangeStreamStateCoordinator' before calling the','line_number':65,'multiline':False]['text':' 'ChangeStreamStateCommandProcessor'.','line_number':66,'multiline':False]['text':'*
 * Waits until the oplog entry has been majority committed.
 ','line_number':74,'multiline':True]['text':'*
 * A helper that inspect the the 'SetChangeStreamStateCoordinatorDocument' state document and
 * processes the provided change stream command accordingly.
 ','line_number':85,'multiline':True]['text':'*
     * Retrieves the tenant id and processes the change stream command.
     ','line_number':94,'multiline':True]['text':' A tenant's change collection and the pre-images collection are always associated with a','line_number':101,'multiline':False]['text':' tenant id.','line_number':102,'multiline':False]['text':'*
     * Enables the change stream in the serverless by creating the change collection and the
     * pre-image collection.
     ','line_number':114,'multiline':True]['text':' Wait until the create requests are majority committed.','line_number':125,'multiline':False]['text':'*
     * Disables the change stream in the serverless by dropping the change collection and the
     * pre-image collection.
     ','line_number':129,'multiline':True]['text':' Wait until the drop requests are majority committed.','line_number':139,'multiline':False]['text':' namespace','line_number':146,'multiline':False]['text':' Tenant id must always be present.','line_number':160,'multiline':False]['text':' The '_id' field of the state document corresponds to the tenant id and hence if we are here','line_number':173,'multiline':False]['text':' then the current and the new request belongs to the same tenant. Reject the new request if it','line_number':174,'multiline':False]['text':' is not identical to the previous one.','line_number':175,'multiline':False]['text':' A series of retries, step-up and step-down events can cause a node to try and insert','line_number':192,'multiline':False]['text':' the document when it has already been persisted locally, but we must still wait for','line_number':193,'multiline':False]['text':' majority commit.','line_number':194,'multiline':False]['text':' Dispatch the state document to be processed.','line_number':201,'multiline':False]['text':' namespace mongo','line_number':254,'multiline':False]