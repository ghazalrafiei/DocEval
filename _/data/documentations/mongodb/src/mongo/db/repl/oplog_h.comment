['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Set the "lsid", "txnNumber", "stmtId", "prevOpTime" fields of the oplogEntry based on the given
 * oplogLink for retryable writes (i.e. when stmtIds.front() != kUninitializedStmtId).
 *
 * If the given oplogLink.prevOpTime is a null OpTime, both the oplogLink.prevOpTime and the
 * "prevOpTime" field of the oplogEntry will be set to the TransactionParticipant's lastWriteOpTime.
 ','line_number':109,'multiline':True]['text':'*
 * Create a new capped collection for the oplog if it doesn't yet exist.
 * If the collection already exists (and isReplSet is false),
 * set the 'last' Timestamp from the last entry of the oplog collection (side effect!)
 ','line_number':121,'multiline':True]['text':'
 * Shortcut for above function using oplogCollectionName = _oplogCollectionName,
 ','line_number':130,'multiline':True]['text':'*
 * Returns the optime of the oplog entry written to the oplog.
 * Returns a null optime if oplog was not modified.
 ','line_number':135,'multiline':True]['text':'*
 * Low level oplog function used by logOp() and similar functions to append
 * storage engine records to the oplog collection.
 *
 * This function has to be called within the scope of a WriteUnitOfWork with
 * a valid CollectionPtr reference to the oplog.
 *
 * @param records a vector of oplog records to be written. Records hold references
 * to unowned BSONObj data.
 * @param timestamps a vector of respective Timestamp objects for each oplog record.
 * @param oplogCollection collection to be written to.
 * @param finalOpTime the OpTime of the last oplog record.
 * @param wallTime the wall clock time of the last oplog record.
 * @param isAbortIndexBuild for tenant migration use only.
 ','line_number':141,'multiline':True]['text':' Flush out the cached pointer to the oplog.','line_number':165,'multiline':False]['text':'*
 * Establish the cached pointer to the local oplog.
 ','line_number':168,'multiline':True]['text':'*
 * Use 'oplog' as the new cached pointer to the local oplog.
 *
 * Called by catalog::openCatalog() to re-establish the oplog collection pointer while holding onto
 * the global lock in exclusive mode.
 ','line_number':173,'multiline':True]['text':'*
 * This class represents the different modes of oplog application that are used within the
 * replication system. Oplog application semantics may differ depending on the mode.
 *
 * It also includes functions to serialize/deserialize the oplog application mode.
 ','line_number':183,'multiline':True]['text':' This only being used in 'applyOps' command when sent by client.','line_number':192,'multiline':False]['text':' Used during the oplog application phase of the initial sync process.','line_number':200,'multiline':False]['text':' Used when we are applying oplog operations to recover the database state following an','line_number':203,'multiline':False]['text':' clean/unclean shutdown, or when we are recovering from the oplog after we rollback to a','line_number':204,'multiline':False]['text':' checkpoint.','line_number':205,'multiline':False]['text':' If recovering from a unstable stable checkpoint.','line_number':206,'multiline':False]['text':' If recovering from a stable checkpoint.~','line_number':208,'multiline':False]['text':' Used when a secondary node is applying oplog operations from the primary during steady','line_number':211,'multiline':False]['text':' state replication.','line_number':212,'multiline':False]['text':' Used when we are applying operations as part of a direct client invocation of the','line_number':215,'multiline':False]['text':' 'applyOps' command.','line_number':216,'multiline':False]['text':' Server will crash on oplog application failure during recovery from stable checkpoint in the','line_number':228,'multiline':False]['text':' test environment.','line_number':229,'multiline':False]['text':'*
 * Logs an oplog constraint violation and writes an entry into the health log.
 ','line_number':240,'multiline':True]['text':'*
 * Used for applying from an oplog entry or grouped inserts.
 * @param opOrGroupedInserts a single oplog entry or grouped inserts to be applied.
 * @param alwaysUpsert convert some updates to upserts for idempotency reasons
 * @param mode specifies what oplog application mode we are in
 * @param incrementOpsAppliedStats is called whenever an op is applied.
 * Returns failure status if the op was an update that could not be applied.
 ','line_number':250,'multiline':True]['text':'*
 * Take a command op and apply it locally
 * Used for applying from an oplog and for applyOps command.
 * Returns failure status if the op that could not be applied.
 ','line_number':266,'multiline':True]['text':'*
 * Initializes the global Timestamp with the value from the timestamp of the last oplog entry.
 ','line_number':275,'multiline':True]['text':'*
 * Sets the global Timestamp to be 'newTime'.
 ','line_number':280,'multiline':True]['text':'*
 * Signal any waiting AwaitData queries on the oplog that there is new data or metadata available.
 ','line_number':285,'multiline':True]['text':'*
 * Creates a new index in the given namespace.
 ','line_number':290,'multiline':True]['text':'*
 * Allocates optimes for new entries in the oplog.  Returns a vector of OplogSlots, which
 * contain the new optimes along with their terms.
 ','line_number':298,'multiline':True]['text':' namespace repl','line_number':330,'multiline':False]['text':' namespace mongo','line_number':331,'multiline':False]