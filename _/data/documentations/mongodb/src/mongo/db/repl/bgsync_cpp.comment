['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':34,'multiline':False]['text':' The number of times a node attempted to choose a node to sync from among the available sync','line_number':103,'multiline':False]['text':' source options. This occurs if we re-evaluate our sync source, receive an error from the source,','line_number':104,'multiline':False]['text':' or step down.','line_number':105,'multiline':False]['text':' The number of times a node kept it's original sync source after re-evaluating if its current sync','line_number':108,'multiline':False]['text':' source was optimal.','line_number':109,'multiline':False]['text':' The number of times a node chose a new sync source after re-evaluating if its current sync source','line_number':112,'multiline':False]['text':' was optimal.','line_number':113,'multiline':False]['text':' The number of times a node could not find a sync source when choosing a node to sync from among','line_number':116,'multiline':False]['text':' the available options.','line_number':117,'multiline':False]['text':'*
 * Extends DataReplicatorExternalStateImpl to be member state aware.
 ','line_number':120,'multiline':True]['text':' Drop the last batch of message following a change of replica set due to a shard split.','line_number':157,'multiline':False]['text':' SERVER-9808 Avoid Fortify complaint about implicit signed->unsigned conversion','line_number':182,'multiline':False]['text':' namespace','line_number':185,'multiline':False]['text':' Failpoint which causes rollback to hang before starting.','line_number':187,'multiline':False]['text':' Failpoint to override the time to sleep before retrying sync source selection.','line_number':190,'multiline':False]['text':' Failpoint which causes rollback to hang after completing.','line_number':193,'multiline':False]['text':' If we happen to be waiting for sync source data, stop.','line_number':215,'multiline':False]['text':' sleep a bit to keep from hammering this thread with temp. errors.','line_number':267,'multiline':False]['text':' redact(std::exception&) doesn't work','line_number':269,'multiline':False]['text':' No need to reset optimes here because we are shutting down.','line_number':273,'multiline':False]['text':' This wait keeps us from spinning.  We will re-check the condition in _produce(), so if','line_number':279,'multiline':False]['text':' the state changes after we release the lock, the behavior is still correct.','line_number':280,'multiline':False]['text':' We need to wait until initial sync has started.','line_number':291,'multiline':False]['text':' we want to start when we're no longer primary','line_number':296,'multiline':False]['text':' start() also loads _lastOpTimeFetched, which we know is set from the "if"','line_number':297,'multiline':False]['text':' This log output is used in js tests so please leave it.','line_number':309,'multiline':False]['text':' this oplog reader does not do a handshake because we don't want the server it's syncing','line_number':317,'multiline':False]['text':' from to track how far it has synced','line_number':318,'multiline':False]['text':' then we're initial syncing and we're still waiting for this to be set','line_number':326,'multiline':False]['text':' if there is no one to sync from','line_number':329,'multiline':False]['text':' find a target to sync from the last optime fetched','line_number':340,'multiline':False]['text':' It is possible for _syncSourceSelectionDataChanged to become true between when we release','line_number':359,'multiline':False]['text':' the lock at the end of this block and when the syncSourceResolver retrieves the relevant','line_number':360,'multiline':False]['text':' heartbeat data, which means if we don't get a sync source we won't sleep even though we','line_number':361,'multiline':False]['text':' used the relevant data.  But that's OK because we'll only spin once.','line_number':362,'multiline':False]['text':' This may deadlock if called inside the mutex because SyncSourceResolver::startup() calls','line_number':365,'multiline':False]['text':' ReplicationCoordinator::chooseNewSyncSource(). ReplicationCoordinatorImpl's mutex has to','line_number':366,'multiline':False]['text':' acquired before BackgroundSync's.','line_number':367,'multiline':False]['text':' It is safe to call startup() outside the mutex on this instance of SyncSourceResolver because','line_number':368,'multiline':False]['text':' we do not destroy this instance outside of this function which is only called from a single','line_number':369,'multiline':False]['text':' thread.','line_number':370,'multiline':False]['text':' All (accessible) sync sources are too far ahead of us.','line_number':385,'multiline':False]['text':' We had already marked ourselves too stale.','line_number':401,'multiline':False]['text':' Need to take the RSTL in mode X to transition out of SECONDARY.','line_number':405,'multiline':False]['text':' Activate maintenance mode and transition to RECOVERING.','line_number':415,'multiline':False]['text':' Do not mark ourselves too stale on errors so we can try again next time.','line_number':420,'multiline':False]['text':' Do not mark ourselves too stale on errors so we can try again next time.','line_number':430,'multiline':False]['text':' If our sync source has not changed, it is likely caused by our heartbeat data map being','line_number':441,'multiline':False]['text':' out of date. In that case we sleep for up to 1 second to reduce the amount we spin','line_number':442,'multiline':False]['text':' waiting for our map to update.  If we are notified of heartbeat data change, we will','line_number':443,'multiline':False]['text':' interrupt the wait early.','line_number':444,'multiline':False]['text':' No sync source found.','line_number':470,'multiline':False]['text':' If we find a good sync source after having gone too stale, disable maintenance mode so we can','line_number':480,'multiline':False]['text':' transition to SECONDARY.','line_number':481,'multiline':False]['text':' "lastFetched" not used. Already set in _enqueueDocuments.','line_number':504,'multiline':False]['text':' If the syncSourceResp rbid is uninitialized, syncSourceRBID will be set to the','line_number':515,'multiline':False]['text':' rbid obtained in the oplog fetcher.','line_number':516,'multiline':False]['text':' The construction of OplogFetcher has to be outside bgsync mutex, because it calls','line_number':521,'multiline':False]['text':' replication coordinator.','line_number':522,'multiline':False]['text':' If the background sync is stopped after the fetcher is started, we need to','line_number':566,'multiline':False]['text':' re-evaluate our sync source and oplog common point.','line_number':567,'multiline':False]['text':' This is bad because it means that our source','line_number':578,'multiline':False]['text':' has not returned oplog entries in ascending ts order, and they need to be.','line_number':579,'multiline':False]['text':' Do not denylist the server here, it will be denylisted when we try to reuse it,','line_number':583,'multiline':False]['text':' if it can't return a matching oplog start from the last fetch oplog ts field.','line_number':584,'multiline':False]['text':' If this is the first batch of operations returned from the query, "toApplyDocumentCount" will','line_number':633,'multiline':False]['text':' be one fewer than "networkDocumentCount" because the first document (which was applied','line_number':634,'multiline':False]['text':' previously) is skipped.','line_number':635,'multiline':False]['text':' Nothing to do.','line_number':637,'multiline':False]['text':' Wait for enough space.','line_number':642,'multiline':False]['text':' Don't add more to the buffer if we are in shutdown. Continue holding the lock until we','line_number':646,'multiline':False]['text':' are done to prevent going into shutdown.','line_number':647,'multiline':False]['text':' Buffer docs for later application.','line_number':653,'multiline':False]['text':' Update last fetched info.','line_number':656,'multiline':False]['text':' Check some things periodically (whenever we run out of items in the current cursor batch).','line_number':664,'multiline':False]['text':' On a very low latency network, if we don't wait a little, we'll be','line_number':667,'multiline':False]['text':' getting ops to write almost one at a time.  This will both be expensive','line_number':668,'multiline':False]['text':' for the upstream server as well as potentially defeating our parallel','line_number':669,'multiline':False]['text':' application of batches on the secondary.','line_number':670,'multiline':False]['text':'','line_number':671,'multiline':False]['text':' The inference here is basically if the batch is really small, we are "caught up".','line_number':672,'multiline':False]['text':' Ensure future transactions read without a timestamp.','line_number':695,'multiline':False]['text':' Rollback is a synchronous operation that uses the task executor and may not be','line_number':699,'multiline':False]['text':' executed inside the fetcher callback.','line_number':700,'multiline':False]['text':' TODO: change this to call into the Applier directly to block until the applier is','line_number':713,'multiline':False]['text':' drained.','line_number':714,'multiline':False]['text':'','line_number':715,'multiline':False]['text':' Wait till all buffered oplog entries have drained and been applied.','line_number':716,'multiline':False]['text':' This log output is used in js tests so please leave it.','line_number':733,'multiline':False]['text':' Because oplog visibility is updated asynchronously, wait until all uncommitted oplog entries','line_number':758,'multiline':False]['text':' are visible before potentially truncating the oplog.','line_number':759,'multiline':False]['text':' Reset the producer to clear the sync source and the last optime fetched.','line_number':773,'multiline':False]['text':' Start the producer only if it was already running, because a concurrent stepUp could have','line_number':777,'multiline':False]['text':' caused rollback to fail, so we avoid restarting the producer if we have become primary.','line_number':778,'multiline':False]['text':' If we happen to be waiting for sync source data, stop.','line_number':874,'multiline':False]['text':' Ensure future transactions read without a timestamp.','line_number':901,'multiline':False]['text':' Double check the state after acquiring the mutex.','line_number':908,'multiline':False]['text':' If a node steps down during drain mode, then the buffer may not be empty at the beginning','line_number':912,'multiline':False]['text':' of secondary state.','line_number':913,'multiline':False]['text':' When a node steps down during drain mode, the last fetched optime would be newer than','line_number':919,'multiline':False]['text':' the last applied.','line_number':920,'multiline':False]['text':' Reload the last applied optime from disk if it has been changed.','line_number':929,'multiline':False]['text':' This can happen when we are to do an initial sync.','line_number':947,'multiline':False]['text':' Check if we have been stopped.','line_number':968,'multiline':False]['text':' Check current sync source.','line_number':974,'multiline':False]['text':' Let producer run if it's already running.','line_number':998,'multiline':False]['text':' namespace repl','line_number':1011,'multiline':False]['text':' namespace mongo','line_number':1012,'multiline':False]