['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':64,'multiline':False]['text':'*
 * The first oplog entry is a no-op with this message in its "msg" field.
 ','line_number':71,'multiline':True]['text':'*
 * A parsed DurableReplOperation along with information about the operation that should only exist
 * in-memory.
 *
 * ReplOperation should always be used over DurableReplOperation when passing around ReplOperations
 * in server code.
 ','line_number':76,'multiline':True]['text':'*
     * The way the change stream pre-images are recorded upon update/replace/delete operation.
     ','line_number':86,'multiline':True]['text':' The pre-image is not recorded.','line_number':90,'multiline':False]['text':' The pre-image is recorded in the change stream pre-images collection.','line_number':93,'multiline':False]['text':'*
     * Returns the change stream pre-images recording mode applied for this operation.
     ','line_number':150,'multiline':True]['text':'*
     * Sets the change stream pre-images recording mode to apply for this operation.
     ','line_number':157,'multiline':True]['text':'*
     * Returns true if the change stream pre-image is recorded in the change stream pre-images
     * collection for this operation.
     ','line_number':164,'multiline':True]['text':'*
     * Returns true if the operation is in a retryable internal transaction and pre-image must be
     * recorded for the operation.
     ','line_number':173,'multiline':True]['text':'*
     * Sets whether the operation is in a retryable internal transaction and pre-image must be
     * recorded for the operation.
     ','line_number':181,'multiline':True]['text':'*
     * Sets the statement ids for this ReplOperation to 'stmtIds' if it does not contain any
     * kUninitializedStmtId (i.e. placeholder statement id).
     ','line_number':189,'multiline':True]['text':'*
     * This function overrides the base class setTid() function for the sole purpose of satisfying
     * the FCV checks.  Once these are deprecated, we should remove this overridden function
     * entirely.
     ','line_number':209,'multiline':True]['text':'*
     * Exports pre/post image information, if present, for writing to the image collection.
     *
     * Exported information includes both the image document and a flag to indicate if this
     * is for a pre or post image.
     * Does not fill in 'timestamp' - this will be filled in by OpObserverImpl after we have
     * written the corresponding applyOps oplog entry.
     *
     * Accepts an output parameter that for the image information that we expect
     * to be an uninitialized optional value. This output parameter may be set by a previous
     * call to this function. In this case, if this ReplOperation has an image, this will
     * result in an exception thrown.
     ','line_number':216,'multiline':True]['text':' Stores the post image _id + shard key values.','line_number':237,'multiline':False]['text':' Used for storing the pre-image and post-image for the operation in-memory regardless of where','line_number':240,'multiline':False]['text':' the images should be persisted.','line_number':241,'multiline':False]['text':' Change stream pre-image recording mode applied to this operation.','line_number':245,'multiline':False]['text':' Whether a pre-image must be recorded for this operation since it is in a retryable internal','line_number':249,'multiline':False]['text':' transaction.','line_number':250,'multiline':False]['text':'*
 * Mutable class used on primary to build up oplog entries progressively.
 ','line_number':254,'multiline':True]['text':' Current oplog version, should be the value of the v field in all oplog entries.','line_number':259,'multiline':False]['text':' Helpers to generate ReplOperation.','line_number':262,'multiline':False]['text':' Returns a MutableOplogEntry that is intended to be equivalent to a ReplOperation.','line_number':275,'multiline':False]['text':' Importantly, this MutableOplogEntry is not serializable to BSON because','line_number':276,'multiline':False]['text':' it does not include a WallClockTime. This MutableOplogEntry is intended for','line_number':277,'multiline':False]['text':' construction before logOperation() which will insert a WallClockTime.','line_number':278,'multiline':False]['text':' Test code that needs a BSONObj can convert this using something like','line_number':279,'multiline':False]['text':' MutableOplogEntry::toReplOperation().','line_number':280,'multiline':False]['text':'*
     * Sets the OpTime of the oplog entry.
     ','line_number':381,'multiline':True]['text':'*
     * Returns the OpTime of the oplog entry.
     ','line_number':386,'multiline':True]['text':'*
     * Same as setFromMigrate but only set when it is true.
     ','line_number':399,'multiline':True]['text':'*
     * ReplOperation and MutableOplogEntry mostly hold the same data,
     * but lack a common ancestor in C++. Due to the details of IDL,
     * there is no generated C++ link between the two hierarchies.
     *
     * The primary difference between the two types is the OpTime
     * stored in OplogEntryBase that is absent in DurableReplOperation.
     *
     * This type conversion is useful in contexts when the two type
     * hierarchies should be interchangeable, like with internal tx's.
     * See: logMutableOplogEntry() in op_observer_impl.cpp.
     *
     * OplogEntryBase<>-------DurableReplOperation
     *        ^                       ^
     *        |                       |
     * MutableOplogEntry       ReplOperation
     *        ^
     *        |
     * DurableOplogEntry
     ','line_number':407,'multiline':True]['text':'*
 * A parsed oplog entry that privately inherits from the MutableOplogEntry.
 * This class is immutable. All setters are hidden.
 ','line_number':430,'multiline':True]['text':' Make field names accessible.','line_number':436,'multiline':False]['text':' Make serialize() and getters accessible.','line_number':465,'multiline':False]['text':' Make helper functions accessible.','line_number':495,'multiline':False]['text':' Get the in-memory size in bytes of a ReplOperation.','line_number':527,'multiline':False]['text':' DEPRECATED: This constructor can throw. Use static parse method instead.','line_number':552,'multiline':False]['text':'*
     * Returns if the oplog entry is for a command operation.
     ','line_number':557,'multiline':True]['text':'*
     * Returns if the oplog entry is part of a transaction that has not yet been prepared or
     * committed.  The actual "prepare" or "commit" oplog entries do not have a "partialTxn" field
     * and so this method will always return false for them.
     ','line_number':562,'multiline':True]['text':'*
     * Returns whether if the oplog entry is the last applyOps in a multiple-entry transaction.
     ','line_number':574,'multiline':True]['text':'*
     * Returns if this is a prepared 'commitTransaction' oplog entry.
     ','line_number':579,'multiline':True]['text':'*
     * Returns if this is a prepared 'abortTransaction' oplog entry.
     ','line_number':586,'multiline':True]['text':' Normally an 'abortTransaction' oplog entry represents an aborted prepared transaction.','line_number':590,'multiline':False]['text':' However during stepup, if the secondary sees that it didn't replicate the full oplog','line_number':591,'multiline':False]['text':' chain of a large unprepared transcation, it will abort this transaction and write an','line_number':592,'multiline':False]['text':' 'abortTransaction' oplog entry, even though it is an unprepared transcation. In this','line_number':593,'multiline':False]['text':' case, the entry will have a null prevOpTime.','line_number':594,'multiline':False]['text':'*
     * Returns if this is a prepared 'commitTransaction' or 'abortTransaction' oplog entry.
     ','line_number':602,'multiline':True]['text':'*
     * Returns if this is a prepared transaction command oplog entry, i.e. prepareTransaction,
     * commitTransaction or abortTransaction.
     ','line_number':609,'multiline':True]['text':'*
     * Returns whether the oplog entry represents an applyOps which is a self-contained atomic
     * operation, or the last applyOps of an unprepared transaction, as opposed to part of a
     * prepared transaction or a non-final applyOps in a transaction.
     ','line_number':617,'multiline':True]['text':'*
     * Returns whether the oplog entry represents a single oplog entry transaction.
     ','line_number':627,'multiline':True]['text':'*
     * Returns whether the oplog entry represents an applyOps with a command inside. This is only
     * for transactions with only one oplog entry.
     ','line_number':632,'multiline':True]['text':'*
     * Returns true if the oplog entry is for a CRUD operation.
     ','line_number':638,'multiline':True]['text':'*
     * Returns true if the oplog entry is for a global index CRUD operation.
     ','line_number':644,'multiline':True]['text':'*
     * Returns true if the oplog entry is for an Update or Delete operation.
     ','line_number':650,'multiline':True]['text':'*
     * Returns true if the oplog entry is for a command related to indexes.
     * i.e createIndexes, dropIndexes, startIndexBuild, commitIndexBuild, abortIndexBuild.
     ','line_number':655,'multiline':True]['text':'*
     * Returns if the operation should be prepared. Must be called on an 'applyOps' entry.
     ','line_number':661,'multiline':True]['text':'*
     * Returns the _id of the document being modified. Must be called on CRUD ops.
     ','line_number':666,'multiline':True]['text':'*
     * Returns the document representing the operation to apply. This is the 'o' field for all
     * operations, including updates. For updates this is not guaranteed to include the _id or the
     * shard key.
     ','line_number':671,'multiline':True]['text':'*
     * Returns an object containing the _id of the target document for a CRUD operation. In a
     * sharded cluster this object also contains the shard key. This object may contain more fields
     * in the target document than the _id and shard key.
     * For insert/delete operations, this will be the document in the 'o' field.
     * For update operations, this will be the document in the 'o2' field.
     * Should not be called for non-CRUD operations.
     ','line_number':678,'multiline':True]['text':'*
     * Returns the type of command of the oplog entry. If it is not a command, returns kNotCommand.
     ','line_number':688,'multiline':True]['text':'*
     * Returns the size of the original document used to create this DurableOplogEntry.
     ','line_number':693,'multiline':True]['text':'*
     * Returns the original document used to create this DurableOplogEntry.
     ','line_number':698,'multiline':True]['text':'*
     * Serializes the oplog entry to a string.
     ','line_number':705,'multiline':True]['text':' Owned.','line_number':715,'multiline':False]['text':'*
 * Data structure that holds a DurableOplogEntry and other different run time state variables.
 ','line_number':721,'multiline':True]['text':'*
     * Note: will only parse fields included in DurableOplogEntry.
     ','line_number':771,'multiline':True]['text':'*
     * Returns the BSON representation for diagnostic purposes. To get a BSON meant for storing to
     * the oplog collection, use getEntry().toBSON() instead.
     ','line_number':781,'multiline':True]['text':' Wrapper methods for DurableOplogEntry','line_number':787,'multiline':False]['text':'*
     * Returns whether this oplog entry contains a DDL operation. Used to determine whether to
     * log the entry.
     ','line_number':827,'multiline':True]['text':'*
     * Returns an index of this operation in the "applyOps" entry, if the operation is packed in the
     * "applyOps" entry. Otherwise returns 0.
     ','line_number':833,'multiline':True]['text':'*
     * Returns a timestamp of the "applyOps" entry, if this operation is packed in the "applyOps"
     * entry. Otherwise returns boost::none.
     ','line_number':841,'multiline':True]['text':'*
     * Returns wall clock time of the "applyOps" entry, if this operation is packed in the
     * "applyOps" entry. Otherwise returns boost::none.
     ','line_number':849,'multiline':True]['text':'*
     * Returns a timestamp to use for recording of a change stream pre-image in the change stream
     * pre-images collection. Returns a timestamp of the "applyOps" entry, if this operation is
     * packed in the "applyOps" entry. Otherwise returns a timestamp of this oplog entry.
     ','line_number':857,'multiline':True]['text':'*
     * Returns a wall clock time to use for recording of a change stream pre-image in the change
     * stream pre-images collection. Returns a wall clock time of the "applyOps" entry, if this
     * operation is packed in the "applyOps" entry. Otherwise returns a wall clock time of this
     * oplog entry.
     ','line_number':864,'multiline':True]['text':'*
     * Overrides the needsRetryImage value from DurableOplogEntry with boost::none
     ','line_number':872,'multiline':True]['text':'*
     * Returns the retry image setting from the original DurableOplogEntry, unless it
     * has been suppressed
     ','line_number':877,'multiline':True]['text':' An index of this oplog entry in the associated "applyOps" oplog entry when this entry is','line_number':898,'multiline':False]['text':' extracted from an "applyOps" oplog entry. Otherwise, the index value must be 0.','line_number':899,'multiline':False]['text':' A timestamp of the associated "applyOps" oplog entry when this oplog entry is extracted from','line_number':902,'multiline':False]['text':' an "applyOps" oplog entry.','line_number':903,'multiline':False]['text':' Wall clock time of the associated "applyOps" oplog entry when this oplog entry is extracted','line_number':906,'multiline':False]['text':' from an "applyOps" oplog entry.','line_number':907,'multiline':False]['text':' We allow this to be suppressed during secondary oplog application.','line_number':912,'multiline':False]['text':' namespace repl','line_number':927,'multiline':False]['text':' namespace mongo','line_number':928,'multiline':False]