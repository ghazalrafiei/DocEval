['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Returns a reference to a vector containing all of the BSONObjs deleted from the namespace
     * represented by 'uuid', or kEmptyVector if that namespace wasn't found in '_uuidToObjsMap'.
     ','line_number':138,'multiline':True]['text':'*
     * Saves documents that would be deleted in '_uuidToObjsMap', rather than writing them out to a
     * file.
     ','line_number':151,'multiline':True]['text':'*
 * Unit test for rollback implementation introduced in 3.6.
 ','line_number':182,'multiline':True]['text':'*
     * Implementation of RollbackImpl::Listener used by this class.
     ','line_number':187,'multiline':True]['text':'*
     * Creates a new mock collection with name 'nss' via the StorageInterface and associates 'uuid'
     * with the new collection in the CollectionCatalog. There must not already exist a collection
     * with
     * name 'nss'.
     ','line_number':199,'multiline':True]['text':' Create a new collection in the storage interface.','line_number':208,'multiline':False]['text':' Initialize a mock collection.','line_number':215,'multiline':False]['text':'*
     * Creates an oplog entry that represents the insertion of 'doc' into the namespace 'nss' with
     * UUID 'uuid', and inserts the document into the storage interface.
     *
     * Unless 'time' is explicitly given, this insert is timestamped with an arbitrary time that
     * monotonically increases with each successive call to this function.
     ','line_number':219,'multiline':True]['text':'*
     * Creates an oplog entry that represents the insertion of 'doc' into the namespace 'nss' with
     * UUID 'uuid', and inserts the document into the storage interface.
     *
     * Unless 'time' is explicitly given, this insert is timestamped with an arbitrary time that
     * monotonically increases with each successive call to this function.
     ','line_number':236,'multiline':True]['text':'*
     * Creates an oplog entry that represents updating an object matched by 'query' to be 'newDoc'
     * in the namespace 'nss, with UUID 'uuid'. It also inserts 'newDoc' into the storage interface.
     * This update is timestamped with the provided 'optime' or an arbitrary time that
     * monotonically increases with each successive call, if none is provided.
     ','line_number':252,'multiline':True]['text':'*
     * Creates an oplog entry that represents deleting an object with _id 'id' in the namespace
     * 'nss' with UUID 'uuid'. This function also removes that document from the storage interface.
     * This delete is timestamped with the provided 'optime' or an arbitrary time that
     * monotonically increases with each successive call, if none is provided.
     ','line_number':270,'multiline':True]['text':'*
     * Sets up a test for an unprepared transaction that is comprised of multiple
     * applyOps oplog entries.
     * Returns entries appended to the oplog.
     ','line_number':288,'multiline':True]['text':'*
 * Helper functions to make simple oplog entries with timestamps and terms.
 ','line_number':428,'multiline':True]['text':'*
 * Helper functions to make simple oplog entries with timestamps, terms, and wall clock
 * times.
 ','line_number':443,'multiline':True]['text':'*
 * Helper functions to make pairs of oplog entries and recordIds for the OplogInterfaceMock used
 * to mock out the local and remote oplogs.
 ','line_number':457,'multiline':True]['text':'*
 * Helper to create a noop entry that represents a migrated retryable write or transaction oplog
 * entry.
 ','line_number':474,'multiline':True]['text':'*
 * Helper to create a transaction command oplog entry.
 ','line_number':507,'multiline':True]['text':'*
 * Asserts that the documents in the oplog have the given timestamps.
 ','line_number':528,'multiline':True]['text':' Make sure we transitioned back to SECONDARY state.','line_number':565,'multiline':False]['text':' Make sure we transitioned back to SECONDARY state.','line_number':574,'multiline':False]['text':' Make sure we transitioned back to SECONDARY state.','line_number':584,'multiline':False]['text':' We use the difference of wall clock times between the top of the oplog and the first op after','line_number':590,'multiline':False]['text':' the common point to calculate the rollback time limit.','line_number':591,'multiline':False]['text':' The default limit is 1 day, so we make the difference be just under a day.','line_number':594,'multiline':False]['text':' Run rollback.','line_number':603,'multiline':False]['text':' The default limit is 1 day, so we make the difference be 2 days. The rollback should still','line_number':610,'multiline':False]['text':' succeed since we calculate the difference of wall clock times between the top of the oplog','line_number':611,'multiline':False]['text':' and the first op after the common point which are both the same operation in this case.','line_number':612,'multiline':False]['text':' Run rollback.','line_number':620,'multiline':False]['text':' Run rollback in a separate thread so the locking threads can check for interrupt.','line_number':646,'multiline':False]['text':' Do nothing.','line_number':655,'multiline':False]['text':' We assume that an interrupted opCtx would release its locks.','line_number':659,'multiline':False]['text':' We calculate the roll back time limit by comparing the difference between the top of the','line_number':675,'multiline':False]['text':' oplog and the first oplog entry after the commit point. The default limit is 1 day, so we','line_number':676,'multiline':False]['text':' make the difference be 2 days.','line_number':677,'multiline':False]['text':' Run rollback.','line_number':687,'multiline':False]['text':' Make sure rollback failed with an UnrecoverableRollbackError.','line_number':690,'multiline':False]['text':' runRollback has not been called yet.','line_number':717,'multiline':False]['text':' Verify that resetLastOptimesFromOplog is called towards the end of runRollback.','line_number':735,'multiline':False]['text':' Get the initial rollback id.','line_number':746,'multiline':False]['text':' Run rollback.','line_number':749,'multiline':False]['text':' Check that the rollback id was incremented.','line_number':752,'multiline':False]['text':' Check the current timestamp.','line_number':769,'multiline':False]['text':' Run rollback.','line_number':773,'multiline':False]['text':' Set the stable timestamp ahead to see that the current timestamp and the stable timestamp','line_number':776,'multiline':False]['text':' we recovered to don't change.','line_number':777,'multiline':False]['text':' Make sure "recover to timestamp" occurred by checking that the current timestamp was set back','line_number':781,'multiline':False]['text':' to the stable timestamp.','line_number':782,'multiline':False]['text':' Make it so that the 'recoverToStableTimestamp' method will fail.','line_number':805,'multiline':False]['text':' Check the current timestamp.','line_number':810,'multiline':False]['text':' Run rollback. It should fassert.','line_number':814,'multiline':False]['text':' Delete the rollback id collection.','line_number':824,'multiline':False]['text':' Run rollback.','line_number':833,'multiline':False]['text':' Check that a bad status was returned since incrementing the rollback id should have','line_number':836,'multiline':False]['text':' failed.','line_number':837,'multiline':False]['text':' Make sure we transitioned back to SECONDARY state.','line_number':840,'multiline':False]['text':' Don't set the truncate after point if we fail early.','line_number':843,'multiline':False]['text':' Run rollback.','line_number':858,'multiline':False]['text':' Make sure oplog recovery was executed.','line_number':861,'multiline':False]['text':' Called before aborting prepared transactions. We request the shutdown here.','line_number':876,'multiline':False]['text':' Called after reconstructing prepared transactions.','line_number':882,'multiline':False]['text':' Shutting down is still allowed but it must occur after that window.','line_number':888,'multiline':False]['text':' Called before aborting prepared transactions.','line_number':906,'multiline':False]['text':' Called after reconstructing prepared transactions. We should not be getting here.','line_number':916,'multiline':False]['text':' We expect to crash when we hit the exception.','line_number':921,'multiline':False]['text':' Insert another document so the collection count is 2.','line_number':936,'multiline':False]['text':' Run rollback.','line_number':957,'multiline':False]['text':' Make sure we transitioned back to SECONDARY state.','line_number':965,'multiline':False]['text':' Clear truncate after point after truncation.','line_number':991,'multiline':False]['text':' Dummy rollback ops.','line_number':1040,'multiline':False]['text':' Insert a document into the collection.','line_number':1223,'multiline':False]['text':' Rename the original collection.','line_number':1228,'multiline':False]['text':' Create a new collection with the old name.','line_number':1238,'multiline':False]['text':' Insert a different document into the new collection.','line_number':1243,'multiline':False]['text':' Create the collection, but as a drop-pending collection.','line_number':1266,'multiline':False]['text':' Insert documents into the collection. We'll write them out even though the collection is','line_number':1275,'multiline':False]['text':' later dropped.','line_number':1276,'multiline':False]['text':' Create an oplog entry for the collection drop.','line_number':1284,'multiline':False]['text':' Create the collection and make an oplog entry for the creation event.','line_number':1310,'multiline':False]['text':' Insert documents into the collection.','line_number':1320,'multiline':False]['text':' Drop the collection (immediately; not a two-phase drop), so that the namespace can no longer','line_number':1358,'multiline':False]['text':' be found. We enforce that the storage interface drops the collection immediately with an','line_number':1359,'multiline':False]['text':' unreplicated writes block, since unreplicated collection drops are not two-phase.','line_number':1360,'multiline':False]['text':' Test that we read the collection count from drop entries.','line_number':1448,'multiline':False]['text':' Initialize the collection with one document inserted outside a transaction.','line_number':1532,'multiline':False]['text':' The final collection count after rolling back the transaction, which has one entry before the','line_number':1533,'multiline':False]['text':' stable timestamp, should be 1.','line_number':1534,'multiline':False]['text':' Common field values for applyOps oplog entries.','line_number':1541,'multiline':False]['text':' Start an unprepared transaction with an applyOps oplog entry with the "partialTxn" field','line_number':1548,'multiline':False]['text':' set to true.','line_number':1549,'multiline':False]['text':' applyOps oplog entries cannot have an inner "ts", "t" or "wall" field.','line_number':1553,'multiline':False]['text':' opTime','line_number':1559,'multiline':False]['text':' opType','line_number':1560,'multiline':False]['text':' nss','line_number':1561,'multiline':False]['text':' uuid','line_number':1562,'multiline':False]['text':' fromMigrate','line_number':1563,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':1564,'multiline':False]['text':' version','line_number':1565,'multiline':False]['text':' oField','line_number':1566,'multiline':False]['text':' o2Field','line_number':1567,'multiline':False]['text':' sessionInfo','line_number':1568,'multiline':False]['text':' isUpsert','line_number':1569,'multiline':False]['text':' wallClockTime','line_number':1570,'multiline':False]['text':' statementIds','line_number':1571,'multiline':False]['text':' prevWriteOpTimeInTransaction','line_number':1572,'multiline':False]['text':' preImageOpTime','line_number':1573,'multiline':False]['text':' postImageOpTime','line_number':1574,'multiline':False]['text':' ShardId of resharding recipient','line_number':1575,'multiline':False]['text':' _id','line_number':1576,'multiline':False]['text':' needsRetryImage','line_number':1577,'multiline':False]['text':' Complete the unprepared transaction with an implicit commit oplog entry.','line_number':1581,'multiline':False]['text':' When rolling back the implicit commit operation, we should be traversing, in reverse, the','line_number':1582,'multiline':False]['text':' chain of applyOps oplog entries for this transaction.','line_number':1583,'multiline':False]['text':' applyOps oplog entries cannot have an inner "ts", "t" or "wall" field.','line_number':1587,'multiline':False]['text':' opTime','line_number':1594,'multiline':False]['text':' opType','line_number':1595,'multiline':False]['text':' nss','line_number':1596,'multiline':False]['text':' uuid','line_number':1597,'multiline':False]['text':' fromMigrate','line_number':1598,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':1599,'multiline':False]['text':' version','line_number':1600,'multiline':False]['text':' oField','line_number':1601,'multiline':False]['text':' o2Field','line_number':1602,'multiline':False]['text':' sessionInfo','line_number':1603,'multiline':False]['text':' isUpsert','line_number':1604,'multiline':False]['text':' wallClockTime','line_number':1605,'multiline':False]['text':' statementIds','line_number':1606,'multiline':False]['text':' prevWriteOpTimeInTransaction','line_number':1607,'multiline':False]['text':' preImageOpTime','line_number':1608,'multiline':False]['text':' postImageOpTime','line_number':1609,'multiline':False]['text':' ShardId of resharding recipient','line_number':1610,'multiline':False]['text':' _id','line_number':1611,'multiline':False]['text':' needsRetryImage','line_number':1612,'multiline':False]['text':' Make the non-transaction CRUD oplog entry the common point and use its timestamp for the','line_number':1626,'multiline':False]['text':' stable timestamp.','line_number':1627,'multiline':False]['text':' The entire applyOps chain occurs after the common point.','line_number':1633,'multiline':False]['text':' Make the starting applyOps oplog entry the common point and use its timestamp for the stable','line_number':1641,'multiline':False]['text':' timestamp.','line_number':1642,'multiline':False]['text':' Create retryable write oplog entry before 'stableTimestamp'.','line_number':1673,'multiline':False]['text':' Create no-op retryable write entry before 'stableTimestamp'.','line_number':1684,'multiline':False]['text':' stmtId ','line_number':1691,'multiline':True]['text':' wallClockMillis ','line_number':1692,'multiline':True]['text':' isRetryableWrite ','line_number':1693,'multiline':True]['text':' Create transactions entry after 'stableTimestamp'. Transactions entries are of 'command' op','line_number':1695,'multiline':False]['text':' type.','line_number':1696,'multiline':False]['text':' Create retryable write oplog entry after 'stableTimestamp'.','line_number':1700,'multiline':False]['text':' 'prevOpTime' points to 'oplogEntryBeforeStableTs'.','line_number':1705,'multiline':False]['text':' Create no-op retryable write entry after 'stableTimestamp'.','line_number':1710,'multiline':False]['text':' stmtId ','line_number':1716,'multiline':True]['text':' wallClockMillis ','line_number':1717,'multiline':True]['text':' isRetryableWrite ','line_number':1718,'multiline':True]['text':' Create transactions entry after 'stableTimestamp'. Transactions entries are of 'command' op','line_number':1720,'multiline':False]['text':' type.','line_number':1721,'multiline':False]['text':' The 'config.transactions' table is currently empty.','line_number':1734,'multiline':False]['text':' Doing a rollback should upsert two entries into the 'config.transactions' table.','line_number':1737,'multiline':False]['text':' New sessions entry should match the session information retrieved from the retryable writes','line_number':1743,'multiline':False]['text':' oplog entry from before the 'stableTimestamp'.','line_number':1744,'multiline':False]['text':' New sessions entry should match the session information retrieved from the noop retryable','line_number':1756,'multiline':False]['text':' writes oplog entry from before the 'stableTimestamp'.','line_number':1757,'multiline':False]['text':' 'lsid3' does not get restored because it is not a retryable writes entry.','line_number':1765,'multiline':False]['text':' Create oplog entry after 'stableTimestamp'.','line_number':1788,'multiline':False]['text':' 'prevOpTime' points to an opTime not found in the oplog. This can happen in practice','line_number':1794,'multiline':False]['text':' due to the 'OplogCapMaintainerThread' truncating entries from before the 'stableTimestamp'.','line_number':1795,'multiline':False]['text':' Create no-op entry after 'stableTimestamp'.','line_number':1800,'multiline':False]['text':' 'prevOpTime' point sto an opTime not found in the oplog.','line_number':1801,'multiline':False]['text':' txnNum ','line_number':1805,'multiline':True]['text':' stmtId ','line_number':1807,'multiline':True]['text':' wallClockMillis ','line_number':1808,'multiline':True]['text':'isRetryableWrite ','line_number':1809,'multiline':True]['text':' The 'config.transactions' table is currently empty.','line_number':1816,'multiline':False]['text':' Doing a rollback should upsert two entries into the 'config.transactions' table.','line_number':1819,'multiline':False]['text':' New sessions entry should match the session information retrieved from the retryable writes','line_number':1825,'multiline':False]['text':' oplog entry from after the 'stableTimestamp'.','line_number':1826,'multiline':False]['text':' New sessions entry should match the session information retrieved from the retryable writes','line_number':1837,'multiline':False]['text':' no-op oplog entry from after the 'stableTimestamp'.','line_number':1838,'multiline':False]['text':' Create oplog entry before 'stableTimestamp'.','line_number':1865,'multiline':False]['text':' Create no-op entry before 'stableTimestamp'.','line_number':1875,'multiline':False]['text':' stmtId','line_number':1881,'multiline':True]['text':' wallClockMillis ','line_number':1882,'multiline':True]['text':' isRetryableWrite ','line_number':1883,'multiline':True]['text':' Create migrated no-op transactions entry before 'stableTimestamp'.','line_number':1885,'multiline':False]['text':' stmtId ','line_number':1892,'multiline':True]['text':' wallClockMillis ','line_number':1893,'multiline':True]['text':' isRetryableWrite ','line_number':1894,'multiline':True]['text':' Create regular non-retryable write oplog entry after 'stableTimestamp'.','line_number':1896,'multiline':False]['text':' Create migrated no-op transactions entry after 'stableTimestamp'.','line_number':1899,'multiline':False]['text':' stmtId ','line_number':1905,'multiline':True]['text':' wallClockMillis ','line_number':1906,'multiline':True]['text':' isRetryableWrite ','line_number':1907,'multiline':True]['text':' The 'config.transactions' table is currently empty.','line_number':1917,'multiline':False]['text':' Doing a rollback should not restore any entries into the 'config.transactions' table.','line_number':1920,'multiline':False]['text':' No upserts were made to the 'config.transactions' table.','line_number':1923,'multiline':False]['text':'*
 * Fixture to help test that rollback records the correct information in its RollbackObserverInfo
 * struct.
 ','line_number':1927,'multiline':True]['text':'*
     * Simulates the rollback of a given sequence of operations. Returns the status of the rollback
     * process.
     ','line_number':1933,'multiline':True]['text':' Run the rollback.','line_number':1952,'multiline':False]['text':' 'emptycapped' is not supported in rollback.','line_number':2186,'multiline':False]['text':' Add one sub-op.','line_number':2201,'multiline':False]['text':' Create the applyOps command object.','line_number':2209,'multiline':False]['text':' Add a few different sub-ops from different namespaces to make sure they all get recorded.','line_number':2228,'multiline':False]['text':' Create the applyOps command object.','line_number':2249,'multiline':False]['text':' Make the argument to the 'applyOps' command an object instead of an array. This should cause','line_number':2267,'multiline':False]['text':' rollback to fail, since applyOps expects an array of ops.','line_number':2268,'multiline':False]['text':' Create a command of an unknown type.','line_number':2319,'multiline':False]['text':' Run the rollback and make sure the correct session id was recorded.','line_number':2345,'multiline':False]['text':' namespace','line_number':2544,'multiline':False]['text':' namespace repl','line_number':2545,'multiline':False]['text':' namespace mongo','line_number':2546,'multiline':False]