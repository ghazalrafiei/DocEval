['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * run() catches all database exceptions and stores them in _status, to simplify error
     * handling in the caller above.  It returns its own _status if that is not OK, otherwise
     * the shared sync status.
     ','line_number':75,'multiline':True]['text':'*
     * Executes the run() method asychronously on the given taskExecutor when the event is
     * signalled, returning the result as a Future.
     *
     * If the executor is valid, the Future is guaranteed to not be ready until the event is
     * signalled.  If the executor is not valid (e.g. shutting down), the future will be
     * ready immediately after the call and the EventHandle will be invalid.
     ','line_number':82,'multiline':True]['text':'*
     * For unit testing, allow stopping after any given stage.
     ','line_number':93,'multiline':True]['text':' The _clonerName must be initialized before _mutex, as _clonerName is used to generate the','line_number':99,'multiline':False]['text':' name of the _mutex.','line_number':100,'multiline':False]['text':' Continue to next stage.','line_number':105,'multiline':False]['text':' Skip all remaining stages including postStage.','line_number':107,'multiline':False]['text':' A ClonerStage is a retryable chunk of work usually based around a network operation.','line_number':111,'multiline':False]['text':' The run() method does the work and, if an error occurs, throws an exception.  The','line_number':112,'multiline':False]['text':' isTransientError() method determines whether the exception is retryable or not; usually','line_number':113,'multiline':False]['text':' network errors will be retryable and other errors will not.  If the error is retryable,','line_number':114,'multiline':False]['text':' the BaseCloner framework will attempt to reconnect the client and run the stage again.  If','line_number':115,'multiline':False]['text':' it is not, the exception will be propagated up and fail the sync attempt entirely.','line_number':116,'multiline':False]['text':'*
         * Returns true if the Status represents an error which should be retried.
         ','line_number':123,'multiline':True]['text':'*
         * Returns true if the sync source validity should be checked before retrying.
         * This includes checking the sync source member state, checking the rollback ID,
         * and checking the sync source initial sync ID.
         * This method is provided because early stages which connect and collect
         * the initial sync ID must complete successfully before checking sync source validity.
         ','line_number':130,'multiline':True]['text':' The standard ClonerStage just refers back to a Cloner member function to do the work,','line_number':149,'multiline':False]['text':' for syntactic convenience.','line_number':150,'multiline':False]['text':'*
     * Examine the failpoint data and return true if it's for this cloner.  The base method
     * checks the "cloner" field against getClonerName() and should be called by overrides.
     ','line_number':208,'multiline':True]['text':'*
     * If the status of the sync process is OK, mark it failed.  Also set the local status.
     ','line_number':214,'multiline':True]['text':'*
     * Takes the sync status lock and checks the sync status.
     * Used to make sure failpoints exit on process shutdown.
     ','line_number':219,'multiline':True]['text':'*
     * A stage may, but is not required, to call this when we should clear the retrying state
     * because the operation has at least partially succeeded.  If the stage does not call this,
     * the retrying state is cleared upon successful completion of the entire stage.
     *
     * Left blank here but may be overriden.
     ','line_number':225,'multiline':True]['text':'*
     * Called every time the base cloner receives an error from a stage. Use this to
     * execute any cloner-specific logic such as evaluating retry eligibility, running
     * checks on the sync source, etc.
     *
     * Left blank here but may be overriden.
     ','line_number':234,'multiline':True]['text':'*
     * Supports pausing at certain stages for a fuzzer test framework.
     *
     * Left blank but may be overriden.
     ','line_number':243,'multiline':True]['text':'*
     * Provides part of a log message for the sync process describing the namespace the
     * cloner is operating on.  It must start with the database name, followed by the
     * string ' db: { ', followed by the stage name, followed by ': ' and the collection UUID
     * if known.
     *
     * Left blank but may be overriden.
     ','line_number':250,'multiline':True]['text':'*
     * Must override this to specify the log component for messages in this class.
     ','line_number':262,'multiline':True]['text':'*
     * Code to be run before and after the stages respectively.  This code is not subject to the
     * retry logic used in the cloner stages.
     ','line_number':270,'multiline':True]['text':' All member variables are labeled with one of the following codes indicating the','line_number':283,'multiline':False]['text':' synchronization rules for accessing them.','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':286,'multiline':False]['text':' (S)  Self-synchronizing; access according to classes own rules','line_number':287,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex','line_number':288,'multiline':False]['text':' (X)  Access only allowed from the main flow of control called from run() or constructor.','line_number':289,'multiline':False]['text':' (S)','line_number':290,'multiline':False]['text':' (X)','line_number':291,'multiline':False]['text':' (X)','line_number':292,'multiline':False]['text':' (X)','line_number':293,'multiline':False]['text':' (R)','line_number':294,'multiline':False]['text':' _active indicates this cloner is being run, and is used only for status reporting and','line_number':296,'multiline':False]['text':' invariant checking.','line_number':297,'multiline':False]['text':' (M)','line_number':298,'multiline':False]['text':' (M)','line_number':299,'multiline':False]['text':' _startedAsync indicates the cloner is being run on some executor using runOnExecutorEvent(),','line_number':300,'multiline':False]['text':' and is used only for invariant checking.','line_number':301,'multiline':False]['text':' (M)','line_number':302,'multiline':False]['text':' _promise corresponds to the Future returned by runOnExecutorEvent().  When not running','line_number':303,'multiline':False]['text':' asynchronously, this is a null promise.','line_number':304,'multiline':False]['text':' (S)','line_number':305,'multiline':False]['text':' _stopAfterStage is used for unit testing and causes the cloner to exit after a given','line_number':306,'multiline':False]['text':' stage.','line_number':307,'multiline':False]['text':' (X)','line_number':308,'multiline':False]['text':' namespace repl','line_number':311,'multiline':False]['text':' namespace mongo','line_number':312,'multiline':False]