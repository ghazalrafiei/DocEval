['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':36,'multiline':False]['text':' namespace detail','line_number':94,'multiline':False]['text':' State is kNotStarted on construction, kRunning after WaitForMajorityService::startup() has','line_number':107,'multiline':False]['text':' been called, and kShutdown after WaitForMajorityService::shutdown() has been called. It is','line_number':108,'multiline':False]['text':' illegal to call WaitForMajorityService::waitUntilMajority before calling startup.','line_number':109,'multiline':False]['text':'*
     * Internal representation of an individual request to wait on some particular optime.
     ','line_number':111,'multiline':True]['text':'*
     * Periodically checks the list of opTimes to wait for majority committed.
     ','line_number':123,'multiline':True]['text':' The pool of threads available to wait on opTimes and cancel existing requests.','line_number':132,'multiline':False]['text':' This future is completed when the service has finished all of its work and is ready for','line_number':135,'multiline':False]['text':' shutdown.','line_number':136,'multiline':False]['text':' Manages the Client responsible for the thread that waits on opTimes.','line_number':139,'multiline':False]['text':' Manages the Client responsible for the thread that cancels existing requests to wait on','line_number':142,'multiline':False]['text':' opTimes.','line_number':143,'multiline':False]['text':' This mutex synchronizes access to the members declared below.','line_number':146,'multiline':False]['text':' Contains an ordered list of opTimes to wait to be majority comitted.','line_number':149,'multiline':False]['text':' Contains the last opTime that the background thread was able to successfully wait to be','line_number':152,'multiline':False]['text':' majority comitted.','line_number':153,'multiline':False]['text':' Use for signalling new opTime requests being queued.','line_number':156,'multiline':False]['text':'*
 * Provides a facility for asynchronously waiting a local opTime to be majority committed.
 ','line_number':175,'multiline':True]['text':'*
     * Sets up the background thread pool responsible for waiting for opTimes to be majority
     * committed.
     ','line_number':185,'multiline':True]['text':'*
     * Blocking method, which shuts down and joins the background thread.
     ','line_number':191,'multiline':True]['text':'*
     * Enqueue a request to wait for the given opTime to be majority committed.
     ','line_number':196,'multiline':True]['text':'*
     * Enqueue a request to wait for the given opTime to be majority committed on this primary.
     * Returns a PrimarySteppedDown error if the primary steps down while waiting or if this is
     * a secondary.
     ','line_number':201,'multiline':True]['text':' namespace mongo','line_number':214,'multiline':False]