['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Type of function to schedule file system tasks with the executor.
     *
     * Used for testing only.
     ','line_number':86,'multiline':True]['text':'*
     * Constructor for TenantFileCloner.
     *
     * remoteFileName: Path of file to copy on remote system.
     * remoteFileSize: Size of remote file in bytes, used for progress messages and stats only.
     * relativePath: Path of file relative to dbpath on the remote system, as a
     *               boost::filesystem::path generic path.
     ','line_number':94,'multiline':True]['text':'*
     * Waits for any file system work to finish or fail.
     ','line_number':115,'multiline':True]['text':' Sync source validity is assured by the backup ID not existing if the sync source','line_number':140,'multiline':False]['text':' is restarted or otherwise becomes invalid.','line_number':141,'multiline':False]['text':' Our cursor was killed on the sync source.','line_number':153,'multiline':False]['text':' We do not have a fuzzer for tenant backup file cloner.','line_number':163,'multiline':False]['text':'*
     * The preStage sets the begin time in _stats and makes sure the destination file
     * can be created.
     ','line_number':167,'multiline':True]['text':'*
     * The postStage sets the end time in _stats.
     ','line_number':173,'multiline':True]['text':'*
     * Stage function that executes a query to retrieve the file data.  For each
     * batch returned by the upstream node, handleNextBatch will be called with the data.  This
     * stage will finish when the entire query is finished or failed.
     ','line_number':178,'multiline':True]['text':'*
     * Put all results from a query batch into a buffer, and schedule it to be written to disk.
     ','line_number':185,'multiline':True]['text':'*
     * Called whenever there is a new batch of documents ready from the DBClientConnection.
     *
     * Each document returned will be inserted via the storage interfaceRequest storage
     * interface.
     ','line_number':190,'multiline':True]['text':'*
     * Sends an (aggregation) query command to the source. That query command with be parameterized
     * based on copy progress.
     ','line_number':198,'multiline':True]['text':'*
     * Convenience call to get the file offset under a lock.
     ','line_number':204,'multiline':True]['text':' All member variables are labeled with one of the following codes indicating the','line_number':209,'multiline':False]['text':' synchronization rules for accessing them.','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':212,'multiline':False]['text':' (S)  Self-synchronizing; access according to class's own rules.','line_number':213,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex (defined in base class).','line_number':214,'multiline':False]['text':' (X)  Access only allowed from the main flow of control called from run() or constructor.','line_number':215,'multiline':False]['text':' (R)','line_number':216,'multiline':False]['text':' (R)','line_number':217,'multiline':False]['text':' (R)','line_number':218,'multiline':False]['text':' (R)','line_number':219,'multiline':False]['text':' (M)','line_number':220,'multiline':False]['text':' (X)','line_number':221,'multiline':False]['text':' (R)','line_number':223,'multiline':False]['text':' (M)','line_number':225,'multiline':False]['text':' File offset we will request from the remote side in the next query.','line_number':226,'multiline':False]['text':' (M)','line_number':227,'multiline':False]['text':' (X)','line_number':228,'multiline':False]['text':' Data read from source to insert.','line_number':230,'multiline':False]['text':' (M)','line_number':231,'multiline':False]['text':' Putting _fsWorkTaskRunner last ensures anything the database work threads depend on','line_number':232,'multiline':False]['text':' like _dataToWrite, is destroyed after those threads exit.','line_number':233,'multiline':False]['text':' (R)','line_number':234,'multiline':False]['text':'  Function for scheduling filesystem work using the executor.','line_number':235,'multiline':False]['text':' (R)','line_number':236,'multiline':False]['text':' (X) progress meter for this instance.','line_number':238,'multiline':False]['text':' namespace mongo::repl','line_number':244,'multiline':False]