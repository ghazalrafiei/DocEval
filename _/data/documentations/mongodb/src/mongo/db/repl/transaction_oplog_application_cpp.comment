['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' If enabled, causes _applyPrepareTransaction to hang before preparing the transaction participant.','line_number':102,'multiline':False]['text':' Failpoint that will cause reconstructPreparedTransactions to return early.','line_number':105,'multiline':False]['text':' Failpoint that causes apply prepare transaction oplog entry's ops to fail with write','line_number':108,'multiline':False]['text':' conflict error.','line_number':109,'multiline':False]['text':' Given a vector of OplogEntry pointers, copy and return a vector of OplogEntry's.','line_number':114,'multiline':False]['text':' Returns all the committed statement IDs from the transaction operations if the transaction is','line_number':126,'multiline':False]['text':' a retryable internal transcation.','line_number':127,'multiline':False]['text':' The template type 'Operation' is expected to be either 'OplogEntry'','line_number':131,'multiline':False]['text':' or 'OplogEntry*', so these functions are used to convert it to the','line_number':132,'multiline':False]['text':' latter regardless of which one is the instantiated','line_number':133,'multiline':False]['text':' Only retryable internal transactions need to deal with statement IDs.','line_number':143,'multiline':False]['text':' Apply the oplog entries for a prepare or a prepared commit during recovery/initial sync.','line_number':156,'multiline':False]['text':' Apply each the operations via repl::applyOperation.','line_number':164,'multiline':False]['text':' Presently, it is not allowed to run a prepared transaction with a command inside.','line_number':172,'multiline':False]['text':' TODO(SERVER-46105)','line_number':173,'multiline':False]['text':'alwaysUpsert','line_number':197,'multiline':True]['text':' Retriable error.','line_number':205,'multiline':False]['text':' Ignore NamespaceNotFound errors if we are in initial sync or recovering mode.','line_number':208,'multiline':False]['text':' During recovery we reconsutuct prepared transactions at the end after applying all','line_number':209,'multiline':False]['text':' the oplogs, so 'NamespaceNotFound' error shouldn't be hit whether it is a stable or','line_number':210,'multiline':False]['text':' unstable recovery. However we have some scenarios when this error should be skipped:','line_number':211,'multiline':False]['text':'  1- This code path can be called while applying commit oplog during unstable recovery','line_number':212,'multiline':False]['text':'     when 'startupRecoveryForRestore' is set.','line_number':213,'multiline':False]['text':'  2- During selective backup:','line_number':214,'multiline':False]['text':'     - During restore when 'recoverFromOplogAsStandalone' is set which is usually be','line_number':215,'multiline':False]['text':'       done in a stable recovery mode.','line_number':216,'multiline':False]['text':'     - After the restore finished as the standalone node started with the flag','line_number':217,'multiline':False]['text':'       'takeUnstableCheckpointOnShutdown' so after restarting the node as a replica','line_number':218,'multiline':False]['text':'       set member it will go through unstable recovery.','line_number':219,'multiline':False]['text':'*
 * Helper that will read the entire sequence of oplog entries for the transaction and apply each of
 * them.
 *
 * Currently used for oplog application of a commitTransaction oplog entry during recovery and
 * rollback.
 ','line_number':251,'multiline':True]['text':' We might replay a prepared transaction behind oldest timestamp.','line_number':274,'multiline':False]['text':' If the transaction was empty then we have no locks, ensure at least Global','line_number':281,'multiline':False]['text':' IX.','line_number':282,'multiline':False]['text':' Calls setCommitTimestamp() to set commit timestamp of the transaction and','line_number':287,'multiline':False]['text':' clears the commit timestamp in the recovery unit when tsBlock goes out of the','line_number':288,'multiline':False]['text':' scope. It is necessary that we clear the commit timestamp because there can','line_number':289,'multiline':False]['text':' be another transaction in the same recovery unit calling setTimestamp().','line_number':290,'multiline':False]['text':'*
 * This is the part of applyCommitTransaction which is common to both split and non-split commit
 * ops in secondary oplog application mode.
 ','line_number':299,'multiline':True]['text':' This opCtx can be used to apply later operations in the batch, clean up before reusing.','line_number':317,'multiline':False]['text':' The write on transaction table may be applied concurrently, so refreshing state','line_number':323,'multiline':False]['text':' from disk may read that write, causing starting a new transaction on an existing','line_number':324,'multiline':False]['text':' txnNumber. Thus, we start a new transaction without refreshing state from disk.','line_number':325,'multiline':False]['text':'*
 * This is the part of applyAbortTransaction which is common to both split and non-split abort
 * ops in secondary oplog application mode.
 ','line_number':337,'multiline':True]['text':' This opCtx can be used to apply later operations in the batch, clean up before reusing.','line_number':354,'multiline':False]['text':' The write on transaction table may be applied concurrently, so refreshing state','line_number':360,'multiline':False]['text':' from disk may read that write, causing starting a new transaction on an existing','line_number':361,'multiline':False]['text':' txnNumber. Thus, we start a new transaction without refreshing state from disk.','line_number':362,'multiline':False]['text':' namespace','line_number':373,'multiline':False]['text':' Initial sync should never apply 'commitTransaction' since it unpacks committed','line_number':389,'multiline':False]['text':' transactions onto various applier threads.','line_number':390,'multiline':False]['text':' Return error if run via applyOps command.','line_number':394,'multiline':False]['text':' Checkout the session and apply non-split or top-level commit op.','line_number':401,'multiline':False]['text':' Checkout the session and apply split commit op.','line_number':408,'multiline':False]['text':' We don't put transactions into the prepare state until the end of recovery,','line_number':429,'multiline':False]['text':' so there is no transaction to abort.','line_number':430,'multiline':False]['text':' We don't put transactions into the prepare state until the end of initial sync,','line_number':434,'multiline':False]['text':' so there is no transaction to abort.','line_number':435,'multiline':False]['text':' Return error if run via applyOps command.','line_number':439,'multiline':False]['text':' Checkout the session and apply non-split or top-level abort op.','line_number':446,'multiline':False]['text':' Checkout the session and apply split abort op.','line_number':453,'multiline':False]['text':' Ensure future transactions read without a timestamp.','line_number':473,'multiline':False]['text':' The cachedOps are the ops for this transaction that are from the same oplog application batch','line_number':479,'multiline':False]['text':' as the commit or prepare, those which have not necessarily been written to the oplog.  These','line_number':480,'multiline':False]['text':' ops are in order of increasing timestamp.','line_number':481,'multiline':False]['text':' The lastEntryWrittenToOplogOpTime is the OpTime of the latest entry for this','line_number':484,'multiline':False]['text':' transaction which is expected to be present in the oplog.  It is the entry','line_number':485,'multiline':False]['text':' before the first cachedOp, unless there are no cachedOps in which case it is','line_number':486,'multiline':False]['text':' the entry before the commit or prepare.','line_number':487,'multiline':False]['text':' If we started with a prepared commit, we want to forget about that operation','line_number':493,'multiline':False]['text':' and move onto the prepare.','line_number':494,'multiline':False]['text':' A prepared-commit must be in its own batch and thus have no cached ops.','line_number':497,'multiline':False]['text':' The non-DurableReplOperation fields of the extracted transaction operations','line_number':504,'multiline':False]['text':' will match those of the lastEntryInTxn. For a prepared commit, this will','line_number':505,'multiline':False]['text':' include the commit oplog entry's 'ts' field, which is what we want.','line_number':506,'multiline':False]['text':' First retrieve and transform the ops from the oplog, which will be retrieved','line_number':509,'multiline':False]['text':' in reverse order.','line_number':510,'multiline':False]['text':' Because BSONArrays do not have fast way of determining size without','line_number':517,'multiline':False]['text':' iterating through them, and we also have no way of knowing how many oplog','line_number':518,'multiline':False]['text':' entries are in a transaction without iterating, reversing each applyOps','line_number':519,'multiline':False]['text':' and then reversing the whole array is about as good as we can do to get','line_number':520,'multiline':False]['text':' the entire thing in chronological order.  Fortunately STL arrays of BSON','line_number':521,'multiline':False]['text':' objects should be fast to reverse (just pointer copies).','line_number':522,'multiline':False]['text':' Next retrieve and transform the ops from the current batch, which are in','line_number':527,'multiline':False]['text':' increasing timestamp order.','line_number':528,'multiline':False]['text':' Reconstruct the operations from the prepare or unprepared commit oplog entry.','line_number':535,'multiline':False]['text':' It is safe to assume that any commands inside `ops` are real commands to be','line_number':538,'multiline':False]['text':' applied, as opposed to auxiliary commands such as "commit" and "abort".','line_number':539,'multiline':False]['text':'checkForCommands','line_number':556,'multiline':True]['text':'checkForCommands','line_number':565,'multiline':True]['text':'*
 * This is the part of applyPrepareTransaction which is common to steady state, initial
 * sync and recovery oplog application.
 *
 * Note: when this is called to apply a split prepared transaction, the txnOps here represents
 * a subset of all the ops in the transaction, but when being called by a top-level prepared
 * transaction, it's just an empty array. Future changes that depend on transaction operations
 * should be careful about the differences.
 ','line_number':569,'multiline':True]['text':' Block application of prepare oplog entries on secondaries when a concurrent','line_number':586,'multiline':False]['text':' background index build is running. This will prevent hybrid index builds from','line_number':587,'multiline':False]['text':' corrupting an index on secondary nodes if a prepared transaction becomes prepared','line_number':588,'multiline':False]['text':' during a build but commits after the index build commits. When two-phase index','line_number':589,'multiline':False]['text':' builds are in use, this is both unnecessary and unsafe. Due to locking, we can','line_number':590,'multiline':False]['text':' guarantee that a transaction prepared on a primary during an index build will','line_number':591,'multiline':False]['text':' always commit before that index build completes. Because two-phase index builds','line_number':592,'multiline':False]['text':' replicate start and commit oplog entries, it will never be possible to replicate','line_number':593,'multiline':False]['text':' a prepared transaction, commit an index build, then commit the transaction, the','line_number':594,'multiline':False]['text':' bug described above. This blocking behavior can also introduce a deadlock with','line_number':595,'multiline':False]['text':' two-phase index builds on a secondary if a prepared transaction blocks on an','line_number':596,'multiline':False]['text':' index build, but the index build can't re-acquire its X lock because of the','line_number':597,'multiline':False]['text':' transaction.','line_number':598,'multiline':False]['text':' This opCtx can be used to apply later operations in the batch, clean up before','line_number':626,'multiline':False]['text':' reusing.','line_number':627,'multiline':False]['text':' The write on transaction table may be applied concurrently, so refreshing','line_number':635,'multiline':False]['text':' state from disk may read that write, causing starting a new transaction','line_number':636,'multiline':False]['text':' on an existing txnNumber. Thus, we start a new transaction without','line_number':637,'multiline':False]['text':' refreshing state from disk.','line_number':638,'multiline':False]['text':' We reset the recovery unit on retries, so make sure that we set the','line_number':644,'multiline':False]['text':' necessary states.','line_number':645,'multiline':False]['text':' When querying indexes, we return the record matching the key if it exists,','line_number':647,'multiline':False]['text':' or an adjacent document. This means that it is possible for us to hit a','line_number':648,'multiline':False]['text':' prepare conflict if we query for an incomplete key and an adjacent key is','line_number':649,'multiline':False]['text':' prepared. We ignore prepare conflicts on recovering nodes because they may','line_number':650,'multiline':False]['text':' may encounter prepare conflicts that did not occur on the primary.','line_number':651,'multiline':False]['text':' We might replay a prepared transaction behind oldest timestamp.','line_number':654,'multiline':False]['text':' Release WUOW, transaction lock resources and abort storage transaction','line_number':660,'multiline':False]['text':' so that the writeConflictRetry loop will be able to retry applying the','line_number':661,'multiline':False]['text':' transactional ops on WCE error.','line_number':662,'multiline':False]['text':' Abort transaction and invalidate the session it is associated with.','line_number':664,'multiline':False]['text':' Starts the WUOW.','line_number':669,'multiline':False]['text':' Set this in case the application of any ops needs to use the prepare timestamp','line_number':672,'multiline':False]['text':' of this transaction. It should be cleared automatically when the txn finishes.','line_number':673,'multiline':False]['text':' Add committed statement IDs if this is a retryable internal transaction.','line_number':681,'multiline':False]['text':' They are used when this node becomes primary to avoid re-executing','line_number':682,'multiline':False]['text':' committed txn statements.','line_number':683,'multiline':False]['text':' Prepare transaction success.','line_number':709,'multiline':False]['text':'*
 * Apply a prepared transaction when we are reconstructing prepared transactions.
 ','line_number':717,'multiline':True]['text':' The operations here are reconstructed at their prepare time. However, that time','line_number':725,'multiline':False]['text':' will be ignored because there is an outer write unit of work during their','line_number':726,'multiline':False]['text':' application. The prepare time of the transaction is set explicitly below.','line_number':727,'multiline':False]['text':' Checks out the session, applies the operations and prepares the transaction.','line_number':730,'multiline':False]['text':' namespace','line_number':734,'multiline':False]['text':'*
 * Make sure that if we are in replication recovery, we don't apply the prepare
 * transaction oplog entry until we either see a commit transaction oplog entry or are
 * at the very end of recovery. Otherwise, only apply the prepare transaction oplog
 * entry if we are a secondary. We shouldn't get here for initial sync and applyOps
 * should error.
 ','line_number':736,'multiline':True]['text':' Don't apply the operations from the prepared transaction until either we','line_number':759,'multiline':False]['text':' see a commit transaction oplog entry during recovery or are at the end of','line_number':760,'multiline':False]['text':' recovery.','line_number':761,'multiline':False]['text':' Initial sync should never apply 'prepareTransaction' since it unpacks','line_number':765,'multiline':False]['text':' committed transactions onto various applier threads at commit time.','line_number':766,'multiline':False]['text':' Return error if run via applyOps command.','line_number':770,'multiline':False]['text':' Not possible for secondary when applying prepare oplog entries.','line_number':777,'multiline':False]['text':' Checkout the session and apply split prepare op.','line_number':781,'multiline':False]['text':' Checkout the session and apply top-level prepare op.','line_number':792,'multiline':False]['text':' For a top-level transaction, the actual transaction operations should've','line_number':796,'multiline':False]['text':' already been applied by its split transactions. So here we just pass it','line_number':797,'multiline':False]['text':' an empty array of transaction operations. However if this is a retryable','line_number':798,'multiline':False]['text':' internal transaction, we need to pass the committed statement IDs.','line_number':799,'multiline':False]['text':' Ensure future transactions read without a timestamp.','line_number':821,'multiline':False]['text':' Iterate over each entry in the transactions table that has a prepared','line_number':831,'multiline':False]['text':' transaction.','line_number':832,'multiline':False]['text':' Get the prepareTransaction oplog entry corresponding to this transactions','line_number':840,'multiline':False]['text':' table entry.','line_number':841,'multiline':False]['text':' Make a new opCtx so that we can set the lsid when applying the prepare','line_number':849,'multiline':False]['text':' transaction oplog entry.','line_number':850,'multiline':False]['text':' Ignore interruptions while reconstructing prepared transactions, so that we do not','line_number':858,'multiline':False]['text':' fassert and crash due to interruptions inside this call.','line_number':859,'multiline':False]['text':' namespace mongo','line_number':865,'multiline':False]