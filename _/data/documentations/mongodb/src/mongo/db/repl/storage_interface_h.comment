['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Storage interface used by the replication system to interact with storage.
 * This interface provides separation of concerns and a place for mocking out test
 * interactions.
 *
 * The grouping of functionality includes general collection helpers, and more specific replication
 * concepts:
 *      * Create Collection and Oplog
 *      * Drop database and all user databases
 *      * Drop a collection
 *      * Insert documents into a collection
 ','line_number':69,'multiline':True]['text':' Operation Context binding.','line_number':86,'multiline':False]['text':' Constructor and Destructor.','line_number':92,'multiline':False]['text':'*
     * Rollback ID is an increasing counter of how many rollbacks have occurred on this server. It
     * is initialized with a value of 1, and should increase by exactly 1 every time a rollback
     * occurs.
     ','line_number':96,'multiline':True]['text':'*
     * Return the current value of the rollback ID.
     ','line_number':102,'multiline':True]['text':'*
     * Initialize the rollback ID to 1. Returns the value of the initialized rollback ID if
     * successful.
     ','line_number':107,'multiline':True]['text':'*
     * Increments the current rollback ID. Returns the new value of the rollback ID if successful.
     ','line_number':113,'multiline':True]['text':' Collection creation and population for initial sync.','line_number':119,'multiline':False]['text':'*
     * Creates a collection with the provided indexes.
     *
     * Assumes that no database locks have been acquired prior to calling this function.
     ','line_number':120,'multiline':True]['text':'*
     * Inserts a document with a timestamp into a collection.
     *
     * NOTE: If the collection doesn't exist, it will not be created, and instead
     * an error is returned.
     ','line_number':131,'multiline':True]['text':'*
     * Inserts the given documents, with associated timestamps and statement id's, into the
     * collection.
     * It is an error to call this function with an empty set of documents.
     *
     * NOTE: We have some limitations with this function if the caller plans to use it for
     * replicated collection writes and 'docs' size greater than 1.
     * 1) It will violate multi-timestamp constraints (See SERVER-48771).
     * 2) It doesn't have batch size throttling logic so there are possibilities that we might cause
     * stress on storage engine by trying to insert a big chunk of data in a single WUOW.
     *    - Another side effect of writing a big chunk is that writers will hold RSTL lock for a
     * long time, causing state transition (like step down) to get blocked.
     *
     * So, it's recommended to use write_ops_exec::performInserts() for replicated collection
     * writes.
     ','line_number':142,'multiline':True]['text':'*
     * Creates the initial oplog, errors if it exists.
     ','line_number':162,'multiline':True]['text':'*
     * Returns the configured maximum size of the oplog.
     *
     * Implementations are allowed to be "fuzzy" and delete documents when the actual size is
     * slightly above or below this, so callers should not rely on its exact value.
     ','line_number':167,'multiline':True]['text':'*
     * Creates a collection.
     ','line_number':175,'multiline':True]['text':'*
     * Creates all the specified non-_id indexes on a given collection, which must be empty.
     * Note: This function assumes the give collection is a committed collection, so it takes
     * an exclusive collection lock on that collection.
     ','line_number':184,'multiline':True]['text':'*
     * Drops a collection.
     ','line_number':194,'multiline':True]['text':'*
     * Truncates a collection.
     ','line_number':199,'multiline':True]['text':'*
     * Renames a collection from the "fromNS" to the "toNS". Fails if the new collection already
     * exists.
     ','line_number':204,'multiline':True]['text':'*
     * Sets the given index on the given namespace as multikey with the given paths. Does the
     * write at the provided timestamp.
     ','line_number':213,'multiline':True]['text':'*
     * Drops all databases except "local".
     ','line_number':224,'multiline':True]['text':'*
     * Finds at most "limit" documents returned by a collection or index scan on the collection in
     * the requested direction.
     * The documents returned will be copied and buffered. No cursors on the underlying collection
     * will be kept open once this function returns.
     * If "indexName" is boost::none, a collection scan is used to locate the document.
     * Index scan options:
     *     If "startKey" is not empty, the index scan will start from the given key (instead of
     *     MinKey/MaxKey).
     *     Set "boundInclusion" to BoundInclusion::kIncludeStartKeyOnly to include "startKey" in
     *     the index scan results. Set to BoundInclusion::kIncludeEndKeyOnly to return the key
     *     immediately following "startKey" from the index.
     ','line_number':229,'multiline':True]['text':'*
     * Deletes at most "limit" documents returned by a collection or index scan on the collection in
     * the requested direction. Returns deleted documents on success.
     * The documents returned will be copied and buffered. No cursors on the underlying collection
     * will be kept open once this function returns.
     * If "indexName" is null, a collection scan is used to locate the document.
     ','line_number':254,'multiline':True]['text':'*
     * Finds a singleton document in a collection. Returns 'CollectionIsEmpty' if the collection
     * is empty or 'TooManyMatchingDocuments' if it is not a singleton collection.
     ','line_number':269,'multiline':True]['text':'*
     * Updates a singleton document in a collection. Upserts the document if it does not exist. If
     * the document is upserted and no '_id' is provided, one will be generated.
     * If the collection has more than 1 document, the update will only be performed on the first
     * one found. The upsert is performed at the given timestamp.
     * Returns 'NamespaceNotFound' if the collection does not exist. This does not implicitly
     * create the collection so that the caller can create the collection with any collection
     * options they want (ex: capped, temp, collation, etc.).
     ','line_number':276,'multiline':True]['text':'*
     * Updates a singleton document in a collection. Never upsert.
     *
     * If the collection has more than 1 document, the update will only be performed on the first
     * one found. The update is performed at the given timestamp.
     * Returns 'NamespaceNotFound' if the collection does not exist. This does not implicitly
     * create the collection so that the caller can create the collection with any collection
     * options they want (ex: capped, temp, collation, etc.).
     ','line_number':289,'multiline':True]['text':'*
     * Finds a single document in the collection referenced by the specified _id.
     *
     * Not supported on collections with a default collation.
     ','line_number':303,'multiline':True]['text':'*
     * Deletes a single document in the collection referenced by the specified _id.
     * Returns deleted document on success.
     *
     * Not supported on collections with a default collation.
     ','line_number':312,'multiline':True]['text':'*
     * Updates a single document in the collection referenced by the specified _id.
     * The document is located by looking up "idKey" in the id index.
     * "update" represents the replacement document or list of requested modifications to be applied
     * to the document.
     * If the document is not found, a new document will be created with the requested modifications
     * applied.
     ','line_number':322,'multiline':True]['text':'*
     * Removes all documents that match the "filter" from a collection.
     * "filter" specifies the deletion criteria using query operators. Pass in an empty document to
     * delete all documents in a collection.
     ','line_number':335,'multiline':True]['text':'*
     * Searches for an oplog entry with a timestamp <= 'timestamp'. Returns boost::none if no
     * matches are found.
     ','line_number':344,'multiline':True]['text':'*
     * Calls findOplogEntryLessThanOrEqualToTimestamp with endless WriteConflictException retries.
     * Other errors get thrown. Concurrent oplog reads with the validate cmd on the same collection
     * may throw WCEs. Obeys opCtx interrupts.
     *
     * Call this function instead of findOplogEntryLessThanOrEqualToTimestamp if the caller cannot
     * fail, say for correctness.
     ','line_number':351,'multiline':True]['text':'*
     * Fetches the oldest oplog entry's timestamp.
     ','line_number':362,'multiline':True]['text':'*
     * Fetches the latest oplog entry's timestamp. Bypasses the oplog visibility rules.
     ','line_number':367,'multiline':True]['text':'*
     * Returns the sum of the sizes of documents in the collection in bytes.
     ','line_number':375,'multiline':True]['text':'*
     * Returns the number of documents in the collection.
     ','line_number':380,'multiline':True]['text':'*
     * Sets the number of documents in the collection. This function does NOT also update the
     * data size of the collection.
     ','line_number':386,'multiline':True]['text':'*
     * Returns the UUID of the collection specified by nss, if such a UUID exists.
     ','line_number':394,'multiline':True]['text':'*
     * Sets the highest timestamp at which the storage engine is allowed to take a checkpoint. This
     * timestamp must not decrease unless force=true is set, in which case we force the stable
     * timestamp, the oldest timestamp, and the commit timestamp backward. Additionally when
     * force=true is set, the all durable timestamp will be set to the stable timestamp.
     ','line_number':400,'multiline':True]['text':'*
     * Tells the storage engine the timestamp of the data at startup. This is necessary because
     * timestamps are not persisted in the storage layer.
     ','line_number':410,'multiline':True]['text':'*
     * Reverts the state of all database data to the last stable timestamp.
     *
     * The "local" database is exempt and none of its state should be reverted except for
     * "local.replset.minvalid" which should be reverted to the last stable timestamp.
     *
     * The 'stable' timestamp is set by calling StorageInterface::setStableTimestamp.
     *
     * Returns the stable timestamp to which it reverted the data.
     ','line_number':416,'multiline':True]['text':'*
     * Returns whether the storage engine supports "recover to stable timestamp".
     ','line_number':428,'multiline':True]['text':'*
     * Returns whether the storage engine can provide a recovery timestamp.
     ','line_number':433,'multiline':True]['text':'*
     * Responsible for initializing independent processes for replication that manage
     * and interact with the storage layer.
     *
     * Initializes the OplogCapMaintainerThread to control deletion of oplog truncate markers.
     ','line_number':438,'multiline':True]['text':'*
     * Returns the stable timestamp that the storage engine recovered to on startup. If the
     * recovery point was not stable, returns "none".
     ','line_number':446,'multiline':True]['text':'*
     * Waits for oplog writes to be visible in the oplog.
     * This function is used to ensure tests do not fail due to initial sync receiving an empty
     * batch.
     *
     * primaryOnly: If this node is not primary, do nothing.
     ','line_number':452,'multiline':True]['text':'*
     * Returns the all_durable timestamp. All transactions with timestamps earlier than the
     * all_durable timestamp are committed.
     *
     * The all_durable timestamp only includes non-prepared transactions that have been given a
     * commit_timestamp and prepared transactions that have been given a durable_timestamp.
     * Previously, the deprecated all_committed timestamp would also include prepared transactions
     * that were prepared but not committed which could make the stable timestamp briefly jump back.
     ','line_number':462,'multiline':True]['text':'*
     * Registers a timestamp with the storage engine so that it can enforce oplog visiblity rules.
     * orderedCommit - specifies whether the timestamp provided is ordered w.r.t. commits; that is,
     * all commits with older timestamps have already occurred, and any commits with newer
     * timestamps have not yet occurred.
     ','line_number':473,'multiline':True]['text':'*
     * Returns a timestamp that is guaranteed to exist on storage engine recovery to a stable
     * timestamp. This indicates when the storage engine can safely rollback to stable; and for
     * durable engines, it is also the guaranteed minimum stable recovery point on server restart
     * after crash or shutdown.
     *
     * Returns `Timestamp::min()` if no stable recovery timestamp has yet been established.
     * Replication recoverable rollback may not succeed before establishment, and restart will
     * require resync. Returns boost::none if `supportsRecoverToStableTimestamp` returns false.
     ','line_number':483,'multiline':True]['text':'*
     * Returns the read timestamp of the recovery unit of the given operation context.
     ','line_number':496,'multiline':True]['text':'*
     * Prevents oplog history at 'pinnedTimestamp' and later from being truncated. Setting
     * Timestamp::max() effectively nullifies the pin because no oplog truncation will be stopped by
     * it.
     ','line_number':501,'multiline':True]['text':' namespace repl','line_number':510,'multiline':False]['text':' namespace mongo','line_number':511,'multiline':False]