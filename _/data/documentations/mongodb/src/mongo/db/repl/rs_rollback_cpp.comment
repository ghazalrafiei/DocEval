['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':36,'multiline':False]['text':' Since this is only used for tests, going with the simple impl that reuses operator< which is','line_number':158,'multiline':False]['text':' used in the real code.','line_number':159,'multiline':False]['text':' See if there are any indexes to create for this collection.','line_number':185,'multiline':False]['text':' There are no indexes to create for this collection UUID, so there are no index creation','line_number':188,'multiline':False]['text':' operations to remove.','line_number':189,'multiline':False]['text':' This is the set of all indexes to create for the given collection UUID. Keep a reference so','line_number':200,'multiline':False]['text':' we can modify the original object.','line_number':201,'multiline':False]['text':' If this index was not previously added to the set of indexes that need to be created for this','line_number':204,'multiline':False]['text':' collection, then we do nothing.','line_number':205,'multiline':False]['text':' This index was previously added to the set of indexes to create for this collection, so we','line_number':216,'multiline':False]['text':' remove it from that set.','line_number':217,'multiline':False]['text':' If there are now no remaining indexes to create for this collection, remove it from','line_number':225,'multiline':False]['text':' the set of collections that we need to create indexes for.','line_number':226,'multiline':False]['text':' Records the collection that needs to be removed from the drop-pending collections','line_number':236,'multiline':False]['text':' list in the DropPendingCollectionReaper.','line_number':237,'multiline':False]['text':' Records the collection drop as a rename from the drop pending','line_number':240,'multiline':False]['text':' namespace to its namespace before it was dropped.','line_number':241,'multiline':False]['text':' We do not need to check if there is already an entry in collectionsToRename','line_number':246,'multiline':False]['text':' for this collection because it is not possible that a renameCollection occurs','line_number':247,'multiline':False]['text':' on the same collection after it has been dropped. Thus, we know that this','line_number':248,'multiline':False]['text':' will be the first RenameCollectionInfo entry for this collection and do not','line_number':249,'multiline':False]['text':' need to change the renameFrom entry to account for multiple renames.','line_number':250,'multiline':False]['text':' The namespace of the collection that was dropped is the same namespace','line_number':268,'multiline':False]['text':' that we are trying to rename the collection to.','line_number':269,'multiline':False]['text':' Records the information necessary for undoing the dropTarget.','line_number':273,'multiline':False]['text':' Checks that the oplog entry is smaller than 512 MB. We do not roll back if the','line_number':285,'multiline':False]['text':' oplog entry is larger than 512 MB.','line_number':286,'multiline':False]['text':' If required fields are not present in the BSONObj for an applyOps entry, create these fields','line_number':291,'multiline':False]['text':' and populate them with dummy values before parsing ourObj as an oplog entry.','line_number':292,'multiline':False]['text':' Parse the oplog entry.','line_number':307,'multiline':False]['text':' Extract the op's collection namespace and UUID.','line_number':317,'multiline':False]['text':' If the operation being rolled back has a txnNumber, then the corresponding entry in the','line_number':335,'multiline':False]['text':' session transaction table needs to be refetched.','line_number':336,'multiline':False]['text':' If this is a transaction which did not commit, we need do nothing more than','line_number':362,'multiline':False]['text':' rollback the transaction table entry.  If it did commit, we will have rolled it','line_number':363,'multiline':False]['text':' back when we rolled back the commit.','line_number':364,'multiline':False]['text':' The first element of the object is the name of the command','line_number':371,'multiline':False]['text':' and the collection it is acting on, e.x. {renameCollection: "test.x"}.','line_number':372,'multiline':False]['text':' Drop the collection created for global index.','line_number':377,'multiline':False]['text':' Example create collection oplog entry','line_number':379,'multiline':False]['text':' {','line_number':380,'multiline':False]['text':'     ts: ...,','line_number':381,'multiline':False]['text':'     h: ...,','line_number':382,'multiline':False]['text':'     op: "c",','line_number':383,'multiline':False]['text':'     ns: "foo.$cmd",','line_number':384,'multiline':False]['text':'     ui: BinData(...),','line_number':385,'multiline':False]['text':'     o: {','line_number':386,'multiline':False]['text':'            create: "abc", ...','line_number':387,'multiline':False]['text':'        }','line_number':388,'multiline':False]['text':'     ...','line_number':389,'multiline':False]['text':' }','line_number':390,'multiline':False]['text':' Example drop collection oplog entry','line_number':397,'multiline':False]['text':' {','line_number':398,'multiline':False]['text':'     ts: ...,','line_number':399,'multiline':False]['text':'     h: ...,','line_number':400,'multiline':False]['text':'     op: "c",','line_number':401,'multiline':False]['text':'     ns: "foo.$cmd",','line_number':402,'multiline':False]['text':'     ui: BinData(...),','line_number':403,'multiline':False]['text':'     o: {','line_number':404,'multiline':False]['text':'            drop: "abc"','line_number':405,'multiline':False]['text':'        }','line_number':406,'multiline':False]['text':'     ...','line_number':407,'multiline':False]['text':' }','line_number':408,'multiline':False]['text':' Registers the collection to be removed from the drop pending collection','line_number':414,'multiline':False]['text':' reaper and to be renamed from its drop pending namespace to original namespace.','line_number':415,'multiline':False]['text':' Example drop indexes objects','line_number':421,'multiline':False]['text':'     o: {','line_number':422,'multiline':False]['text':'            dropIndexes: "x",','line_number':423,'multiline':False]['text':'            index: "x_1"','line_number':424,'multiline':False]['text':'        }','line_number':425,'multiline':False]['text':'     o2:{','line_number':426,'multiline':False]['text':'            v: 2,','line_number':427,'multiline':False]['text':'            key: { x: 1 },','line_number':428,'multiline':False]['text':'            name: "x_1",','line_number':429,'multiline':False]['text':'            ns: "foo.x"','line_number':430,'multiline':False]['text':'        }','line_number':431,'multiline':False]['text':' Inserts the index name and the index spec of the index to be created into the map','line_number':445,'multiline':False]['text':' of index name and index specs that need to be created for the given collection.','line_number':446,'multiline':False]['text':'','line_number':447,'multiline':False]['text':' If this dropped index was a two-phase index build, we add it to the list to','line_number':448,'multiline':False]['text':' build in the foreground, without the IndexBuildsCoordinator, since we have no','line_number':449,'multiline':False]['text':' knowledge of the original build UUID information. If no start or commit oplog','line_number':450,'multiline':False]['text':' entries are rolled-back, this forces the index build to complete before rollback','line_number':451,'multiline':False]['text':' finishes.','line_number':452,'multiline':False]['text':'','line_number':453,'multiline':False]['text':' If we find by processing earlier oplog entries that the commit or abort','line_number':454,'multiline':False]['text':' entries are also rolled-back, we will instead rebuild the index with the','line_number':455,'multiline':False]['text':' Coordinator so it can wait for a replicated commit or abort.','line_number':456,'multiline':False]['text':' Example create indexes obj','line_number':463,'multiline':False]['text':' o:{','line_number':464,'multiline':False]['text':'       createIndex: x,','line_number':465,'multiline':False]['text':'       v: 2,','line_number':466,'multiline':False]['text':'       key: { x: 1 },','line_number':467,'multiline':False]['text':'       name: "x_1",','line_number':468,'multiline':False]['text':'   }','line_number':469,'multiline':False]['text':' Checks if a drop was previously done on this index. If so, we remove it from the','line_number':482,'multiline':False]['text':' indexesToCreate because a dropIndex and createIndex operation on the same','line_number':483,'multiline':False]['text':' collection for the same index cancel each other out. We do not record the','line_number':484,'multiline':False]['text':' createIndexes command in the fixUpInfo struct since applying both of these','line_number':485,'multiline':False]['text':' commands will lead to the same final state as not applying either of the','line_number':486,'multiline':False]['text':' commands. We only cancel out in the direction of [create] -> [drop] indexes','line_number':487,'multiline':False]['text':' because it is possible that in the [drop] -> [create] direction, when we create','line_number':488,'multiline':False]['text':' an index with the same name it may have a different index spec from that index','line_number':489,'multiline':False]['text':' that was previously dropped.','line_number':490,'multiline':False]['text':' Inserts the index name to be dropped into the set of indexes that','line_number':495,'multiline':False]['text':' need to be dropped for the collection. Any errors dropping the index are ignored','line_number':496,'multiline':False]['text':' if it does not exist.','line_number':497,'multiline':False]['text':' If the index build has been committed or aborted, and the commit or abort','line_number':513,'multiline':False]['text':' oplog entry has also been rolled back, the index build will have been added','line_number':514,'multiline':False]['text':' to the set to be restarted. An index build may also be in the set to be restarted','line_number':515,'multiline':False]['text':' if it was in-progress and stopped before rollback.','line_number':516,'multiline':False]['text':' Remove it, and then add it to the set to be dropped. If the index has already','line_number':517,'multiline':False]['text':' been dropped by abort, then this is a no-op.','line_number':518,'multiline':False]['text':' If the index build was committed or aborted, we must mark the index as','line_number':531,'multiline':False]['text':' needing to be dropped. Add each index to drop by name individually.','line_number':532,'multiline':False]['text':' Intentionally allow this index build to be added to both 'indexesToDrop' and','line_number':536,'multiline':False]['text':' 'unfinishedIndexesToDrop', since we can not tell at this point if it is','line_number':537,'multiline':False]['text':' finished or not.','line_number':538,'multiline':False]['text':' If the index build was not committed or aborted, the index build is','line_number':541,'multiline':False]['text':' unfinished in the catalog will need to be dropped before any other collection','line_number':542,'multiline':False]['text':' operations.','line_number':543,'multiline':False]['text':' If a dropIndexes oplog entry was already rolled-back, the index build needs to','line_number':592,'multiline':False]['text':' be restarted, but not committed. If the index is in the set to be created, then','line_number':593,'multiline':False]['text':' its drop was rolled-back and it should be removed.','line_number':594,'multiline':False]['text':' Add the index build to be restarted.','line_number':603,'multiline':False]['text':' Example rename collection obj','line_number':627,'multiline':False]['text':' o:{','line_number':628,'multiline':False]['text':'        renameCollection: "foo.x",','line_number':629,'multiline':False]['text':'        to: "foo.y",','line_number':630,'multiline':False]['text':'        stayTemp: false,','line_number':631,'multiline':False]['text':'        dropTarget: BinData(...),','line_number':632,'multiline':False]['text':'   }','line_number':633,'multiline':False]['text':' dropTarget will be false if no collection is dropped during the rename.','line_number':635,'multiline':False]['text':' The ui field will contain the UUID of the new collection that is created.','line_number':636,'multiline':False]['text':' Checks if dropTarget is present. If it has a UUID value, we need to','line_number':648,'multiline':False]['text':' make sure to un-drop the collection that was dropped in the process','line_number':649,'multiline':False]['text':' of renaming.','line_number':650,'multiline':False]['text':' Checks if this collection has been renamed before within the same database.','line_number':665,'multiline':False]['text':' If it has been, update the renameFrom field of the RenameCollectionInfo','line_number':666,'multiline':False]['text':' that we will use to create the oplog entry necessary to rename the','line_number':667,'multiline':False]['text':' collection back to its original state.','line_number':668,'multiline':False]['text':' Because of the stayTemp field, we add any collections that have been renamed','line_number':675,'multiline':False]['text':' to collectionsToResyncMetadata to ensure that the collection is properly set','line_number':676,'multiline':False]['text':' as either a temporary or permanent collection.','line_number':677,'multiline':False]['text':' Example drop database oplog entry','line_number':683,'multiline':False]['text':' {','line_number':684,'multiline':False]['text':'     ts: ...,','line_number':685,'multiline':False]['text':'     h: ...,','line_number':686,'multiline':False]['text':'     op: "c",','line_number':687,'multiline':False]['text':'     ns: "foo.$cmd",','line_number':688,'multiline':False]['text':'     o:{','line_number':689,'multiline':False]['text':'            "dropDatabase": 1','line_number':690,'multiline':False]['text':'        }','line_number':691,'multiline':False]['text':'     ...','line_number':692,'multiline':False]['text':' }','line_number':693,'multiline':False]['text':' Since we wait for all internal collection drops to be committed before recording','line_number':695,'multiline':False]['text':' a 'dropDatabase' oplog entry, this will always create an empty database.','line_number':696,'multiline':False]['text':' Creating an empty database doesn't mean anything, so we do nothing.','line_number':697,'multiline':False]['text':' Example collMod obj','line_number':702,'multiline':False]['text':' o:{','line_number':703,'multiline':False]['text':'       collMod : "x",','line_number':704,'multiline':False]['text':'       validationLevel : "off",','line_number':705,'multiline':False]['text':'       index: {','line_number':706,'multiline':False]['text':'                  name: "indexName_1",','line_number':707,'multiline':False]['text':'                  expireAfterSeconds: 600','line_number':708,'multiline':False]['text':'              }','line_number':709,'multiline':False]['text':'    }','line_number':710,'multiline':False]['text':' Skips the command name. The first field in the obj will be the','line_number':714,'multiline':False]['text':' command name.','line_number':715,'multiline':False]['text':' Some collMod fields cannot be rolled back, such as the index field.','line_number':723,'multiline':False]['text':' Example Apply Ops oplog entry','line_number':731,'multiline':False]['text':'{','line_number':732,'multiline':False]['text':'    op : "c",','line_number':733,'multiline':False]['text':'    ns : admin.$cmd,','line_number':734,'multiline':False]['text':'    o : {','line_number':735,'multiline':False]['text':'             applyOps : [ {','line_number':736,'multiline':False]['text':'                            op : "u", // must be idempotent!','line_number':737,'multiline':False]['text':'                            ns : "test.x",','line_number':738,'multiline':False]['text':'                            ui : BinData(...),','line_number':739,'multiline':False]['text':'                            o2 : {','line_number':740,'multiline':False]['text':'                                _id : 1','line_number':741,'multiline':False]['text':'                            },','line_number':742,'multiline':False]['text':'                            o : {','line_number':743,'multiline':False]['text':'                                _id : 2','line_number':744,'multiline':False]['text':'                            }','line_number':745,'multiline':False]['text':'                        }]','line_number':746,'multiline':False]['text':'         }','line_number':747,'multiline':False]['text':' }','line_number':748,'multiline':False]['text':' Additionally, for transactions, applyOps entries may be linked by their','line_number':749,'multiline':False]['text':' previousTransactionOpTimes.  For those, we need to walk the chain and get to','line_number':750,'multiline':False]['text':' all the entries.  We don't worry about the order that we walk the entries.','line_number':751,'multiline':False]['text':' In applyOps, the object contains an array of different oplog entries, we','line_number':776,'multiline':False]['text':' call','line_number':777,'multiline':False]['text':' updateFixUpInfoFromLocalOplogEntry here in order to record the','line_number':778,'multiline':False]['text':' information','line_number':779,'multiline':False]['text':' needed for rollback that is contained within the applyOps, creating a','line_number':780,'multiline':False]['text':' nested','line_number':781,'multiline':False]['text':' call.','line_number':782,'multiline':False]['text':' If we can't get the full transaction history, we can't roll back;','line_number':795,'multiline':False]['text':' If we are inserting/updating/deleting a document in the oplog entry, we will update','line_number':816,'multiline':False]['text':' the doc._id field when we actually insert the docID into the docsToRefetch set.','line_number':817,'multiline':False]['text':'*
 * This must be called before making any changes to our local data and after fetching any
 * information from the upstream node. If any information is fetched from the upstream node after we
 * have written locally, the function must be called again.
 ','line_number':835,'multiline':True]['text':' It is important that the steps are performed in order to avoid racing with upstream','line_number':844,'multiline':False]['text':' rollbacks.','line_number':845,'multiline':False]['text':' 1. Gets the last doc in their oplog.','line_number':846,'multiline':False]['text':' 2. Gets their RBID and fail if it has changed.','line_number':847,'multiline':False]['text':' 3. Sets our minValid to the previously fetched OpTime of the top of their oplog.','line_number':848,'multiline':False]['text':' Our source rolled back so the data we received is not necessarily consistent.','line_number':854,'multiline':False]['text':' We have items we are writing that aren't from a point-in-time. Thus, it is best not to come','line_number':858,'multiline':False]['text':' online until we get to that point in freshness. In other words, we do not transition from','line_number':859,'multiline':False]['text':' RECOVERING state to SECONDARY state until we have reached the minValid oplog entry.','line_number':860,'multiline':False]['text':' This method is only used with storage engines that do not support recover to stable','line_number':865,'multiline':False]['text':' timestamp. As a result, the timestamp on the 'appliedThrough' update does not matter.','line_number':866,'multiline':False]['text':' This log output is used in jstests so please leave it.','line_number':873,'multiline':False]['text':' It is an error to shutdown while enabled.','line_number':878,'multiline':False]['text':'*
 * Drops an index from the collection based on its name by removing it from the indexCatalog of the
 * collection.
 ','line_number':886,'multiline':True]['text':'*
 * Rolls back all createIndexes operations for the collection by dropping the
 * created indexes.
 ','line_number':928,'multiline':True]['text':' If we cannot find the collection, we skip over dropping the index.','line_number':940,'multiline':False]['text':' If we cannot find the index catalog, we skip over dropping the index.','line_number':950,'multiline':False]['text':'*
 * Rolls back all the dropIndexes operations for the collection by re-creating
 * the indexes that were dropped.
 ','line_number':983,'multiline':True]['text':' If we cannot find the collection, we skip over dropping the index.','line_number':997,'multiline':False]['text':'*
 * Drops the given collection from the database.
 ','line_number':1028,'multiline':True]['text':' Performs a collection scan and writes all documents in the collection to disk','line_number':1043,'multiline':False]['text':' in order to keep an archive of items that were rolled back.','line_number':1044,'multiline':False]['text':' As we're holding a strong MODE_X lock we disallow yielding the lock.','line_number':1045,'multiline':False]['text':' We permanently drop the collection rather than 2-phase drop the collection here. By not','line_number':1078,'multiline':False]['text':' passing in an opTime to dropCollectionEvenIfSystem() the collection is immediately dropped.','line_number':1079,'multiline':False]['text':'*
 * Renames a collection out of the way when another collection during rollback
 * is attempting to use the same namespace.
 ','line_number':1084,'multiline':True]['text':' Finds the UUID of the collection that we are renaming out of the way.','line_number':1090,'multiline':False]['text':' The generated unique collection name is only guaranteed to exist if the database is','line_number':1095,'multiline':False]['text':' exclusively locked.','line_number':1096,'multiline':False]['text':' Creates the oplog entry to temporarily rename the collection that is','line_number':1099,'multiline':False]['text':' preventing the renameCollection command from rolling back to a unique','line_number':1100,'multiline':False]['text':' namespace.','line_number':1101,'multiline':False]['text':' Renaming the collection that was clashing with the attempted rename','line_number':1123,'multiline':False]['text':' operation to a different collection name.','line_number':1124,'multiline':False]['text':'*
 * Rolls back a renameCollection operation on the given collection.
 ','line_number':1138,'multiline':True]['text':' If we try to roll back a collection to a collection name that currently exists','line_number':1157,'multiline':False]['text':' because another collection was renamed or created with the same collection name,','line_number':1158,'multiline':False]['text':' we temporarily rename the conflicting collection.','line_number':1159,'multiline':False]['text':' Retrying to renameCollection command again now that the conflicting','line_number':1164,'multiline':False]['text':' collection has been renamed out of the way.','line_number':1165,'multiline':False]['text':'*
 * This function uses the FixUpInfo struct to undo all of the operations that occurred after the
 * common point on the rolling back node, checking the rollback ID and updating minValid as
 * necessary. This includes refetching, updating, and deleting individual documents, resyncing
 * collection data and metadata, and dropping and creating collections and indexes. Truncates the
 * oplog and triggers necessary in-memory refreshes before returning.
 ','line_number':1193,'multiline':True]['text':' UUID -> doc id -> doc','line_number':1207,'multiline':False]['text':' Fetches all the goodVersions of each document from the current sync source.','line_number':1210,'multiline':False]['text':' This is checked when we insert to the set.','line_number':1216,'multiline':False]['text':' TODO : Slow. Lots of round trips.','line_number':1237,'multiline':False]['text':' To prevent inconsistencies in the transactions collection, rollback fails if the UUID','line_number':1246,'multiline':False]['text':' of the collection is different on the sync source than on the node rolling back,','line_number':1247,'multiline':False]['text':' forcing an initial sync. This is detected if the returned namespace for a refetch of','line_number':1248,'multiline':False]['text':' a transaction table document is not "config.transactions," which implies a rename or','line_number':1249,'multiline':False]['text':' drop of the collection occured on either node.','line_number':1250,'multiline':False]['text':' Checks that the total amount of data that needs to be refetched is at most','line_number':1263,'multiline':False]['text':' 300 MB. We do not roll back more than 300 MB of documents in order to','line_number':1264,'multiline':False]['text':' prevent out of memory errors from too much data being stored. See SERVER-23392.','line_number':1265,'multiline':False]['text':' Note good might be empty, indicating we should delete it.','line_number':1270,'multiline':False]['text':' If the collection turned into a view, we might get an error trying to','line_number':1274,'multiline':False]['text':' refetch documents, but these errors should be ignored, as we'll be creating','line_number':1275,'multiline':False]['text':' the view during oplog replay.','line_number':1276,'multiline':False]['text':' Collection may be dropped on the sync source, in which case it will be dropped during','line_number':1277,'multiline':False]['text':' oplog replay. So it is safe to ignore NamespaceNotFound errors while trying to','line_number':1278,'multiline':False]['text':' refetch documents.','line_number':1279,'multiline':False]['text':' Rolls back createIndexes commands by dropping the indexes that were created. It is','line_number':1304,'multiline':False]['text':' necessary to roll back createIndexes commands before dropIndexes commands because','line_number':1305,'multiline':False]['text':' it is possible that we previously dropped an index with the same name but a different','line_number':1306,'multiline':False]['text':' index spec. If we attempt to re-create an index that has the same name as an existing','line_number':1307,'multiline':False]['text':' index, the operation will fail. Thus, we roll back createIndexes commands first in','line_number':1308,'multiline':False]['text':' order to ensure that no collisions will occur when we re-create previously dropped','line_number':1309,'multiline':False]['text':' indexes.','line_number':1310,'multiline':False]['text':' We drop indexes before renaming collections so that if a collection name gets longer,','line_number':1311,'multiline':False]['text':' any indexes with names that are now too long will already be dropped.','line_number':1312,'multiline':False]['text':' Drop any unfinished indexes. These are indexes where the startIndexBuild oplog entry was','line_number':1322,'multiline':False]['text':' rolled-back, but the unfinished index still exists in the catalog. Drop these before any','line_number':1323,'multiline':False]['text':' collection drops, because one of the preconditions of dropping a collection is that there are','line_number':1324,'multiline':False]['text':' no unfinished indxes.','line_number':1325,'multiline':False]['text':' Drops collections before updating individual documents. We drop these collections before','line_number':1336,'multiline':False]['text':' rolling back any other commands to prevent namespace collisions that may occur','line_number':1337,'multiline':False]['text':' when undoing renameCollection operations.','line_number':1338,'multiline':False]['text':' Checks that if the collection is going to be dropped, all commands that','line_number':1341,'multiline':False]['text':' were done on the collection to be dropped were removed during the function','line_number':1342,'multiline':False]['text':' call to removeRedundantOperations().','line_number':1343,'multiline':False]['text':' Do not attempt to acquire the database lock with an empty namespace. We should survive','line_number':1354,'multiline':False]['text':' an attempt to drop a non-existent collection.','line_number':1355,'multiline':False]['text':' Rolling back renameCollection commands.','line_number':1376,'multiline':False]['text':' Roll back any drop-pending collections. This must be done first so that the collection','line_number':1392,'multiline':False]['text':' exists when we attempt to resync its metadata or insert documents into it.','line_number':1393,'multiline':False]['text':' Full collection data and metadata resync.','line_number':1406,'multiline':False]['text':' Retrieves collections from the sync source in order to obtain the collection','line_number':1409,'multiline':False]['text':' flags needed to roll back collMod operations. We roll back collMod operations','line_number':1410,'multiline':False]['text':' after create/renameCollection/drop commands in order to ensure that the','line_number':1411,'multiline':False]['text':' collections that we want to change actually exist. For example, if a collMod','line_number':1412,'multiline':False]['text':' occurs and then the collection is dropped. If we do not first re-create the','line_number':1413,'multiline':False]['text':' collection, we will not be able to retrieve the collection's catalog entries.','line_number':1414,'multiline':False]['text':' The collection was dropped by the sync source so we can't correctly change it','line_number':1434,'multiline':False]['text':' here. If we get to the roll-forward phase, we will drop it then. If the drop','line_number':1435,'multiline':False]['text':' is rolled back upstream and we restart, we expect to still have the','line_number':1436,'multiline':False]['text':' collection.','line_number':1437,'multiline':False]['text':' Updates the collection flags.','line_number':1449,'multiline':False]['text':' Use default options.','line_number':1467,'multiline':False]['text':' Set collection to whatever temp status is on the sync source.','line_number':1472,'multiline':False]['text':' Set any document validation options. We update the validator fields without','line_number':1475,'multiline':False]['text':' parsing/validation, since we fetched the options object directly from the sync','line_number':1476,'multiline':False]['text':' source, and we should set our validation options to match it exactly.','line_number':1477,'multiline':False]['text':' Since we read from the sync source to retrieve the metadata of the','line_number':1498,'multiline':False]['text':' collection, we must check if the sync source rolled back as well as update','line_number':1499,'multiline':False]['text':' minValid if necessary.','line_number':1500,'multiline':False]['text':' Rolls back dropIndexes commands by re-creating the indexes that were dropped.','line_number':1505,'multiline':False]['text':' Keeps an archive of items rolled back if the collection has not been dropped','line_number':1528,'multiline':False]['text':' while rolling back createCollection operations.','line_number':1529,'multiline':False]['text':' { _id : ... }','line_number':1562,'multiline':False]['text':' TODO: Lots of overhead in context. This can be faster.','line_number':1565,'multiline':False]['text':' Adds the doc to our rollback file if the collection was not dropped while','line_number':1577,'multiline':False]['text':' rolling back createCollection operations. Does not log an error when','line_number':1578,'multiline':False]['text':' undoing an insert on a no longer existing collection. It is likely that','line_number':1579,'multiline':False]['text':' the collection was dropped as part of rolling back a createCollection','line_number':1580,'multiline':False]['text':' command and the document no longer exists.','line_number':1581,'multiline':False]['text':' If the document could not be found on the primary, deletes the document.','line_number':1613,'multiline':False]['text':' TODO 1.6 : can't delete from a capped collection. Need to handle that','line_number':1614,'multiline':False]['text':' here.','line_number':1615,'multiline':False]['text':' Can't delete from a capped collection - so we truncate instead.','line_number':1620,'multiline':False]['text':' if this item must go, so must all successors.','line_number':1621,'multiline':False]['text':' TODO: IIRC cappedTruncateAfter does not handle completely','line_number':1624,'multiline':False]['text':' empty. This will be slow if there is no _id index in','line_number':1625,'multiline':False]['text':' the collection.','line_number':1626,'multiline':False]['text':' Would be faster but requires index:','line_number':1637,'multiline':False]['text':' RecordId loc = Helpers::findById(nsd, pattern);','line_number':1638,'multiline':False]['text':' hack: need to just make cappedTruncate do this...','line_number':1651,'multiline':False]['text':' Replicated capped collections have many ways to become','line_number':1668,'multiline':False]['text':' inconsistent. We rely on age-out to make these problems go away','line_number':1669,'multiline':False]['text':' eventually.','line_number':1670,'multiline':False]['text':'includeFieldName','line_number':1677,'multiline':True]['text':' justOne','line_number':1684,'multiline':False]['text':' god','line_number':1685,'multiline':False]['text':' TODO faster...','line_number':1696,'multiline':False]['text':' Cleans up the oplog.','line_number':1730,'multiline':False]['text':' The oplog collection doesn't have indexes and therefore can take full advantage of the','line_number':1746,'multiline':False]['text':' truncation mechanism that the underlying storage engine offers. Because of this, here we','line_number':1747,'multiline':False]['text':' invoke the record store's truncation logic directly without specifying a per-document','line_number':1748,'multiline':False]['text':' callback.','line_number':1749,'multiline':False]['text':'','line_number':1750,'multiline':False]['text':' TODO: fatal error if this throws?','line_number':1751,'multiline':False]['text':' inclusive ','line_number':1755,'multiline':True]['text':' aboutToDelete callback ','line_number':1756,'multiline':True]['text':' If necessary, clear the memory of existing sessions.','line_number':1766,'multiline':False]['text':' Force the default read/write concern cache to reload on next access in case the defaults','line_number':1776,'multiline':False]['text':' document was rolled back.','line_number':1777,'multiline':False]['text':' Reload the lastAppliedOpTime and lastDurableOpTime value in the replcoord and the','line_number':1780,'multiline':False]['text':' lastApplied value in bgsync to reflect our new last op. The rollback common point does','line_number':1781,'multiline':False]['text':' not necessarily represent a consistent database state. For example, on a secondary, we may','line_number':1782,'multiline':False]['text':' have rolled back to an optime that fell in the middle of an oplog application batch. We make','line_number':1783,'multiline':False]['text':' the database consistent again after rollback by applying ops forward until we reach','line_number':1784,'multiline':False]['text':' 'minValid'.','line_number':1785,'multiline':False]['text':' Find the UUID of the transactions collection. An OperationContext is required because the','line_number':1805,'multiline':False]['text':' UUID is not known at compile time, so the SessionCatalog needs to load the collection.','line_number':1806,'multiline':False]['text':' Populate the initial list of index builds to restart with the builds that were stopped due to','line_number':1810,'multiline':False]['text':' rollback. They may need to be restarted if no associated oplog entries are rolled-back, or','line_number':1811,'multiline':False]['text':' they may be made redundant by a rolled-back startIndexBuild oplog entry.','line_number':1812,'multiline':False]['text':' Calls syncRollBackLocalOperations to run updateFixUpInfoFromLocalOplogEntry','line_number':1822,'multiline':False]['text':' on each oplog entry up until the common point.','line_number':1823,'multiline':False]['text':' This failpoint is used for testing the invariant below.','line_number':1854,'multiline':False]['text':' Rollback common point should be >= the replication commit point.','line_number':1862,'multiline':False]['text':' Rollback common point should be >= the committed snapshot optime.','line_number':1866,'multiline':False]['text':' It is always safe to increment the rollback ID first, even if we fail to complete','line_number':1871,'multiline':False]['text':' the rollback.','line_number':1872,'multiline':False]['text':' This log output is used in js tests so please leave it.','line_number':1892,'multiline':False]['text':' It is an error to shutdown while enabled.','line_number':1897,'multiline':False]['text':' namespace','line_number':1905,'multiline':False]['text':' Set state to ROLLBACK while we are in this function. This prevents serving reads, even from','line_number':1941,'multiline':False]['text':' the oplog. This can fail if we are elected PRIMARY, in which case we better not do any','line_number':1942,'multiline':False]['text':' rolling back. If we successfully enter ROLLBACK we will only exit this function fatally or','line_number':1943,'multiline':False]['text':' after transitioning to RECOVERING. We always transition to RECOVERING regardless of success','line_number':1944,'multiline':False]['text':' or (recoverable) failure since we may be in an inconsistent state. If rollback failed before','line_number':1945,'multiline':False]['text':' writing anything, the Replication Coordinator will quickly take us to SECONDARY since we are','line_number':1946,'multiline':False]['text':' still at our original MinValid, which is fine because we may choose a sync source that','line_number':1947,'multiline':False]['text':' doesn't require rollback. If it failed after we wrote to MinValid, then we will pick a sync','line_number':1948,'multiline':False]['text':' source that will cause us to roll back to the same common point, which is fine. If we','line_number':1949,'multiline':False]['text':' succeeded, we will be consistent as soon as we apply up to/through MinValid and the','line_number':1950,'multiline':False]['text':' Replication Coordinator will make us SECONDARY then.','line_number':1951,'multiline':False]['text':' Stop index builds before rollback. These will be restarted at the completion of rollback.','line_number':1967,'multiline':False]['text':' Aborts only when syncRollback detects we are in a unrecoverable state.','line_number':1986,'multiline':False]['text':' WARNING: these statuses sometimes have location codes which are lost with uassertStatusOK','line_number':1987,'multiline':False]['text':' so we need to check here first.','line_number':1988,'multiline':False]['text':' In other cases, we log the message contained in the error status and retry later.','line_number':1995,'multiline':False]['text':' UnrecoverableRollbackError should only come from a returned status which is handled','line_number':1998,'multiline':False]['text':' above.','line_number':1999,'multiline':False]['text':' If we encounter an error during rollback, but we stopped index builds beforehand, we','line_number':2009,'multiline':False]['text':' will be unable to successfully perform any more rollback attempts. The knowledge of these','line_number':2010,'multiline':False]['text':' stopped index builds gets lost after the first attempt.','line_number':2011,'multiline':False]['text':' Sleep a bit to allow upstream node to coalesce, if that was the cause of the failure. If','line_number':2018,'multiline':False]['text':' we failed in a way that will keep failing, but wasn't flagged as a fatal failure, this','line_number':2019,'multiline':False]['text':' will also prevent us from hot-looping and putting too much load on upstream nodes.','line_number':2020,'multiline':False]['text':' 5 seconds was chosen as a completely arbitrary amount of time.','line_number':2021,'multiline':False]['text':' At this point we are about to leave rollback.  Before we do, wait for any writes done','line_number':2026,'multiline':False]['text':' as part of rollback to be durable, and then do any necessary checks that we didn't','line_number':2027,'multiline':False]['text':' wind up rolling back something illegal.  We must wait for the rollback to be durable','line_number':2028,'multiline':False]['text':' so that if we wind up shutting down uncleanly in response to something we rolled back','line_number':2029,'multiline':False]['text':' we know that we won't wind up right back in the same situation when we start back up','line_number':2030,'multiline':False]['text':' because the rollback wasn't durable.','line_number':2031,'multiline':False]['text':' If we detected that we rolled back the shardIdentity document as part of this rollback','line_number':2034,'multiline':False]['text':' then we must shut down to clear the in-memory ShardingState associated with the','line_number':2035,'multiline':False]['text':' shardIdentity document.','line_number':2036,'multiline':False]['text':' namespace repl','line_number':2056,'multiline':False]['text':' namespace mongo','line_number':2057,'multiline':False]