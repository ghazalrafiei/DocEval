['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Sets up and tears down the test environment for `TopologyVersionObserver`
 ','line_number':69,'multiline':True]['text':' Wait for observer to initialize its cache. Due to the unpredictable nature of thread','line_number':117,'multiline':False]['text':' scheduling, do not change the following to a fixed-wait.','line_number':118,'multiline':False]['text':' Force an election to advance topology version','line_number':151,'multiline':False]['text':' Wait for the observer to update its cache','line_number':156,'multiline':False]['text':' The client should not go out-of-scope as it is attached to the observer thread.','line_number':189,'multiline':False]['text':' Set the failpoint here so that if there is no opCtx we catch the next one.','line_number':204,'multiline':False]['text':' Kill the operation waiting on the `isMaster` future to make it throw','line_number':207,'multiline':False]['text':' If we weren't able to kill, then block until there is an opCtx again.','line_number':209,'multiline':False]['text':' Try again to kill now that we've waited for the failpoint.','line_number':212,'multiline':False]['text':' Observer thread must handle the exception and fetch the most recent IMR','line_number':217,'multiline':False]['text':' Start out as a secondary to transition to quiesce mode easily.','line_number':224,'multiline':False]['text':' Set a failpoint so we can observe the background thread shutting down.','line_number':230,'multiline':False]['text':' Enter quiesce mode in the replication coordinator to make shutdown errors come from','line_number':234,'multiline':False]['text':' awaitHelloResponseFuture()/getHelloResponseFuture().','line_number':235,'multiline':False]['text':' Wait for the background thread to fully shutdown.','line_number':248,'multiline':False]['text':' In quiescence, the observer should be shutdown and have nothing in cache.','line_number':251,'multiline':False]['text':' Keeps the failpoint enabled until it receives a signal from themain thread.','line_number':282,'multiline':False]['text':' Wait for blocker thread to enable thefailpoint','line_number':285,'multiline':False]['text':' Unblock the blocker thread so that it can join','line_number':294,'multiline':False]['text':' namespace','line_number':300,'multiline':False]['text':' namespace repl','line_number':301,'multiline':False]['text':' namespace mongo','line_number':302,'multiline':False]