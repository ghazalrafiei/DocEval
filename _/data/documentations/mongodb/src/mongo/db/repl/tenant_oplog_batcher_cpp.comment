['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Fetched for the sake of retryable commitTransaction, don't need to apply.','line_number':93,'multiline':False]['text':' All applyOps entries are expanded and the expansions put in the batch expansion array.','line_number':96,'multiline':False]['text':' The original applyOps is kept in the batch ops array.','line_number':97,'multiline':False]['text':' This applies to multi-document transactions.','line_number':98,'multiline':False]['text':' Since 'extractOperationsTo' adds the operations to 'curExpansion' in chronological','line_number':105,'multiline':False]['text':' order, but we traverse the oplog chain in reverse chronological order, we need to','line_number':106,'multiline':False]['text':' reverse each set of operations from each 'applyOps', including the one in 'op', then','line_number':107,'multiline':False]['text':' reverse the whole thing to get all the operations in chronological order.','line_number':108,'multiline':False]['text':' We skip all this reversing in the common case of only one oplog entry.','line_number':109,'multiline':False]['text':' This reverses results in the operations from this applyOps, so they are stored in','line_number':116,'multiline':False]['text':' reverse chronological order.  Since we are traversing the chain in reverse order,','line_number':117,'multiline':False]['text':' the whole array will end up in reverse order when we are done.','line_number':118,'multiline':False]['text':' Almost all the time, this oplog entry will be the previous one in the batch.  However,','line_number':134,'multiline':False]['text':' it may fall on a batch boundary or in unusual cases there may be oplog entries in','line_number':135,'multiline':False]['text':' between.  In these cases we add the image directly before the oplog entry it refers to.','line_number':136,'multiline':False]['text':' This is consistent with what shard migration does.  The oplog applier will ignore','line_number':137,'multiline':False]['text':' image entries which are not directly followed by the entry referring to them.','line_number':138,'multiline':False]['text':' If we don't find the pre/post image in the buffer, it means that the pre/post','line_number':147,'multiline':False]['text':' image has an optime less than the startFetchingDonorOpTime and was never','line_number':148,'multiline':False]['text':' fetched. This implies that there was a newer transaction number started in','line_number':149,'multiline':False]['text':' the same session on the donor when the retryable write pre-fetch stage tried','line_number':150,'multiline':False]['text':' to fetch oplog entries with optime less than the startFetchingDonorOpTime. In','line_number':151,'multiline':False]['text':' that case, we don't need to support retrying the current findAndModify.','line_number':152,'multiline':False]['text':' Therefore, use a dummy pre/post image.','line_number':153,'multiline':False]['text':' This is just to get the op off the buffer; it's been peeked at and queued for application','line_number':168,'multiline':False]['text':' already.','line_number':169,'multiline':False]['text':' If we failed to get an op off the buffer, this means that shutdown() was called between the','line_number':170,'multiline':False]['text':' consumer's calls to peek() and consume(). shutdown() cleared the buffer so there is nothing','line_number':171,'multiline':False]['text':' for us to consume here. Since our postcondition is already met, it is safe to return','line_number':172,'multiline':False]['text':' successfully.','line_number':173,'multiline':False]['text':' See the comment of OplogBatcher::_getBatchActionForEntry() for details. The conditions','line_number':179,'multiline':False]['text':' here are similar to the kProcessIndividually case in that function.','line_number':180,'multiline':False]['text':' We are guaranteed this loop will return at least one operation, because waitForData','line_number':208,'multiline':False]['text':' returned true above.','line_number':209,'multiline':False]['text':' We end the batch before the entry that must be processed individually.  Since','line_number':219,'multiline':False]['text':' we've only "peeked" it, it will be the first thing on the buffer for the next','line_number':220,'multiline':False]['text':' batch.','line_number':221,'multiline':False]['text':' Batch is done; no more operations fit.','line_number':228,'multiline':False]['text':' Using makeReadyFutureWith here allows capturing exceptions.','line_number':266,'multiline':False]['text':' Fulfilling 'taskCompletionPromise' and resetting '_batchRequested' have to be done in','line_number':271,'multiline':False]['text':' a single critical section to avoid failure due to "Cannot ask for already-requested','line_number':272,'multiline':False]['text':' oplog fetcher batch".','line_number':273,'multiline':False]['text':' If the batch fails to schedule, ensure we get a valid error code instead of a broken promise.','line_number':281,'multiline':False]['text':' Doing a 'seekToTimestamp' will not set the '_lastPoppedKey' on its own if a document','line_number':313,'multiline':False]['text':' with '_resumeBatchingTs' exists in the buffer collection. We do a 'tryPop' here to set','line_number':314,'multiline':False]['text':' '_lastPoppedKey' to equal '_resumeBatchingTs'.','line_number':315,'multiline':False]['text':' If _batchRequested was true, we handle the _transitionToComplete when it becomes false.','line_number':333,'multiline':False]['text':' namespace repl','line_number':336,'multiline':False]['text':' namespace mongo','line_number':337,'multiline':False]