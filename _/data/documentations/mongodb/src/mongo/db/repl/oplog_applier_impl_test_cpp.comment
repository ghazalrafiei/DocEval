['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':37,'multiline':False]['text':' Even though the collection doesn't exist, this is handled in the actual application function,','line_number':261,'multiline':False]['text':' which in the case of this test just ignores such errors. This tests mostly that we don't','line_number':262,'multiline':False]['text':' implicitly create the collection.','line_number':263,'multiline':False]['text':' Even though the collection doesn't exist, this is handled in the actual application function,','line_number':275,'multiline':False]['text':' which in the case of this test just ignores such errors. This tests mostly that we don't','line_number':276,'multiline':False]['text':' implicitly create the collection.','line_number':277,'multiline':False]['text':' With steady state constraints enabled, attempting to delete from a missing collection is an','line_number':296,'multiline':False]['text':' error.','line_number':297,'multiline':False]['text':' Setup the pre-images collection.','line_number':339,'multiline':False]['text':' tenantId ','line_number':341,'multiline':True]['text':' Test that the collection to lock is determined by the UUID and not the 'ns' field.','line_number':416,'multiline':False]['text':' Test that the collection to lock is determined by the UUID and not the 'ns' field.','line_number':430,'multiline':False]['text':' Setup the pre-images collection.','line_number':462,'multiline':False]['text':' tenantId ','line_number':464,'multiline':True]['text':' Make sure the document to be deleted exists.','line_number':470,'multiline':False]['text':' Test that the collection to lock is determined by the UUID and not the 'ns' field.','line_number':473,'multiline':False]['text':' Setup the pre-images collection.','line_number':481,'multiline':False]['text':' tenantId ','line_number':483,'multiline':True]['text':' Create the collection.','line_number':485,'multiline':False]['text':' Generate test cases.','line_number':499,'multiline':False]['text':' Make sure the document to be modified exists.','line_number':524,'multiline':False]['text':' Make an oplog entry.','line_number':527,'multiline':False]['text':' Apply the oplog entry.','line_number':546,'multiline':False]['text':' Load pre-image and cleanup the state.','line_number':550,'multiline':False]['text':' Check if pre-image was recorded.','line_number':567,'multiline':False]['text':' Verify that the pre-image document is correct.','line_number':571,'multiline':False]['text':' Target this callback to only work with nssTenant2','line_number':695,'multiline':False]['text':' This fails silently so we won't see any indication of a collision, but we can also assert','line_number':717,'multiline':False]['text':' that the opObserver event above won't be called in the event of a collision.','line_number':718,'multiline':False]['text':' rename should not occur across tenants','line_number':738,'multiline':False]['text':' createCollection uses an actual opTime, so we must generate an actually opTime in the future.','line_number':748,'multiline':False]['text':' rename should not occur across tenants','line_number':768,'multiline':False]['text':' createCollection uses an actual opTime, so we must generate an actually opTime in the future.','line_number':778,'multiline':False]['text':' rename should not occur across tenants','line_number':799,'multiline':False]['text':' createCollection uses an actual opTime, so we must generate an actually opTime in the future.','line_number':813,'multiline':False]['text':' optime','line_number':836,'multiline':False]['text':' opType','line_number':837,'multiline':False]['text':' namespace','line_number':838,'multiline':False]['text':' uuid','line_number':839,'multiline':False]['text':' fromMigrate','line_number':840,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':841,'multiline':False]['text':' version','line_number':842,'multiline':False]['text':' o','line_number':843,'multiline':False]['text':' o2','line_number':844,'multiline':False]['text':' sessionInfo','line_number':845,'multiline':False]['text':' upsert','line_number':846,'multiline':False]['text':' wall clock time','line_number':847,'multiline':False]['text':' statement ids','line_number':848,'multiline':False]['text':' optime of previous write within same transaction','line_number':849,'multiline':False]['text':' pre-image optime','line_number':850,'multiline':False]['text':' post-image optime','line_number':851,'multiline':False]['text':' ShardId of resharding recipient','line_number':852,'multiline':False]['text':' _id','line_number':853,'multiline':False]['text':' needsRetryImage','line_number':854,'multiline':False]['text':' Make an oplog entry to invalidate the pre image.','line_number':893,'multiline':False]['text':' Apply the oplog entry.','line_number':896,'multiline':False]['text':' isDataConsistent ','line_number':903,'multiline':True]['text':' Tests we correctly handle the case in SERVER-79033 where we attempt to invalidate the image','line_number':916,'multiline':False]['text':' collection entry for a given lsid but we have already written an invalidate entry with a later','line_number':917,'multiline':False]['text':' timestamp.','line_number':918,'multiline':False]['text':' Make an oplog entry to invalidate the pre image.','line_number':958,'multiline':False]['text':' Apply the first oplog entry which should lead us to write an invalidate entry.','line_number':961,'multiline':False]['text':' isDataConsistent ','line_number':968,'multiline':True]['text':' Confirm that we wrote an invalidate entry.','line_number':971,'multiline':False]['text':' Create and attempt to apply another entry that will also lead us to try to insert an','line_number':982,'multiline':False]['text':' invalidate document, but with an earlier timestamp than the first one. If we don't switch to','line_number':983,'multiline':False]['text':' upsert:false on retry, then we will hang indefinitely here due to repeated write conflicts,','line_number':984,'multiline':False]['text':' as we will never observe the existing document due to its timestamp being later than ours.','line_number':985,'multiline':False]['text':' isDataConsistent ','line_number':995,'multiline':True]['text':' The image collection entgry should be unchanged.','line_number':999,'multiline':False]['text':' IdempotencyTest keeps nss state, update with tid','line_number':1016,'multiline':False]['text':' IdempotencyTest keeps nss state, update with tid of the created nss','line_number':1060,'multiline':False]['text':' We should not be able to reach this','line_number':1069,'multiline':False]['text':' A NamespaceNotFound error is absorbed by the applier, but we can still determine the','line_number':1083,'multiline':False]['text':' op_observer callback was never called','line_number':1084,'multiline':False]['text':'*
 * Test only subclass of OplogApplierImpl that does not apply oplog entries, but tracks ops.
 ','line_number':1090,'multiline':True]['text':' Synchronize reads and writes to 'operationsApplied'.','line_number':1109,'multiline':False]['text':' executor','line_number':1129,'multiline':False]['text':' oplogBuffer','line_number':1130,'multiline':False]['text':' executor','line_number':1154,'multiline':False]['text':' oplogBuffer','line_number':1155,'multiline':False]['text':' "isForCappedCollection" is not parsed from raw oplog entry document.','line_number':1169,'multiline':False]['text':' Collection should be created after applyOplogEntryOrGroupedInserts() processes operation.','line_number':1212,'multiline':False]['text':' executor','line_number':1235,'multiline':False]['text':' oplogBuffer','line_number':1236,'multiline':False]['text':' We expect a total of two derived ops - one for each distinct 'txnNumber'.','line_number':1249,'multiline':False]['text':' Setup the pre-images collection.','line_number':1310,'multiline':False]['text':' this allows us to set deleteArgs.deletedDoc needed by the onDeleteFn validation function in','line_number':1319,'multiline':False]['text':' _testApplyOplogEntryOrGroupedInsertsCrudOperation below','line_number':1320,'multiline':False]['text':' Check that the doc actually got deleted.','line_number':1330,'multiline':False]['text':' Steady state constraints are required for secondaries in order to avoid turning an insert into an','line_number':1360,'multiline':False]['text':' upsert and masking duplicateKey errors.','line_number':1361,'multiline':False]['text':' Only insert on tenant1, such that we will cause a duplicate key error on one tenant but not','line_number':1378,'multiline':False]['text':' the other.','line_number':1379,'multiline':False]['text':' Check that the doc exists in its new updated form.','line_number':1410,'multiline':False]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1454,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done first.','line_number':1455,'multiline':False]['text':' o2 ','line_number':1477,'multiline':True]['text':' fromMigrate','line_number':1478,'multiline':True]['text':' executor','line_number':1493,'multiline':False]['text':' oplogBuffer','line_number':1494,'multiline':False]['text':' We should have deleted the config.image_collection entry.','line_number':1504,'multiline':False]['text':' The doc update should have gone through.','line_number':1507,'multiline':False]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1519,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done first.','line_number':1520,'multiline':False]['text':' o2 ','line_number':1537,'multiline':True]['text':' fromMigrate','line_number':1538,'multiline':True]['text':' executor','line_number':1553,'multiline':False]['text':' oplogBuffer','line_number':1554,'multiline':False]['text':' We should have deleted the config.image_collection entry.','line_number':1564,'multiline':False]['text':' The doc update should have gone through.','line_number':1567,'multiline':False]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1579,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done later.','line_number':1580,'multiline':False]['text':' o2 ','line_number':1602,'multiline':True]['text':' fromMigrate','line_number':1603,'multiline':True]['text':' executor','line_number':1618,'multiline':False]['text':' oplogBuffer','line_number':1619,'multiline':False]['text':' We should have only the pre-image in the config.image_collection entry.','line_number':1633,'multiline':False]['text':' The doc update should have gone through.','line_number':1637,'multiline':False]['text':' let helper generate parentLsid ','line_number':1645,'multiline':True]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1652,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done first.','line_number':1653,'multiline':False]['text':' no stmt id at outer level ','line_number':1683,'multiline':True]['text':' prevOpTime ','line_number':1684,'multiline':True]['text':' executor','line_number':1697,'multiline':False]['text':' oplogBuffer','line_number':1698,'multiline':False]['text':' We should have deleted the config.image_collection entry.','line_number':1708,'multiline':False]['text':' The doc update should have gone through.','line_number':1711,'multiline':False]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1723,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done later.','line_number':1724,'multiline':False]['text':' no stmt id at outer level ','line_number':1754,'multiline':True]['text':' prevOpTime ','line_number':1755,'multiline':True]['text':' executor','line_number':1768,'multiline':False]['text':' oplogBuffer','line_number':1769,'multiline':False]['text':' We should have only the pre-image in the config.image_collection entry.','line_number':1783,'multiline':False]['text':' The doc update should have gone through.','line_number':1787,'multiline':False]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1799,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done first.','line_number':1800,'multiline':False]['text':' o2 ','line_number':1822,'multiline':True]['text':' fromMigrate','line_number':1823,'multiline':True]['text':' executor','line_number':1841,'multiline':False]['text':' oplogBuffer','line_number':1842,'multiline':False]['text':' We should have deleted the config.image_collection entry.','line_number':1852,'multiline':False]['text':' The doc update should have gone through.','line_number':1855,'multiline':False]['text':' The namespace names here are significant.  We do a sort by namespace when we apply these','line_number':1867,'multiline':False]['text':' operations, which ensures the config.image_collection writes will be done later.','line_number':1868,'multiline':False]['text':' o2 ','line_number':1890,'multiline':True]['text':' fromMigrate','line_number':1891,'multiline':True]['text':' executor','line_number':1909,'multiline':False]['text':' oplogBuffer','line_number':1910,'multiline':False]['text':' We should have only the pre-image in the config.image_collection entry.','line_number':1924,'multiline':False]['text':' The doc update should have gone through.','line_number':1928,'multiline':False]['text':' Storing the inserted documents in a sorted data structure to make checking','line_number':1995,'multiline':False]['text':' for valid results easier. The inserts will be performed by different threads','line_number':1996,'multiline':False]['text':' and there's no guarantee of the order.','line_number':1997,'multiline':False]['text':' executor','line_number':2050,'multiline':False]['text':' oplogBuffer','line_number':2051,'multiline':False]['text':' Apply a batch with only the first operation.  This should result in the first oplog entry','line_number':2059,'multiline':False]['text':' being put in the oplog and updating the transaction table, but not actually being applied','line_number':2060,'multiline':False]['text':' because they are part of a pending transaction.','line_number':2061,'multiline':False]['text':' Apply a batch with only the second operation.  This should result in the second oplog entry','line_number':2075,'multiline':False]['text':' being put in the oplog, but with no effect because the operation is part of a pending','line_number':2076,'multiline':False]['text':' transaction.','line_number':2077,'multiline':False]['text':' The transaction table should not have been updated for partialTxn operations that are not the','line_number':2083,'multiline':False]['text':' first in a transaction.','line_number':2084,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the commit being put in the','line_number':2092,'multiline':False]['text':' oplog, and the two previous entries being applied.','line_number':2093,'multiline':False]['text':' Skipping writes to oplog proves we're testing the code path which does not rely on reading','line_number':2108,'multiline':False]['text':' the oplog.','line_number':2109,'multiline':False]['text':' executor','line_number':2112,'multiline':False]['text':' oplogBuffer','line_number':2113,'multiline':False]['text':' Apply both inserts and the commit in a single batch.  We expect no oplog entries to','line_number':2121,'multiline':False]['text':' be inserted (because we've set skipWritesToOplog), and both entries to be committed.','line_number':2122,'multiline':False]['text':' Tests an unprepared transaction with ops both in the batch with the commit and prior','line_number':2136,'multiline':False]['text':' batches.','line_number':2137,'multiline':False]['text':' Populate transaction with 4 linked inserts, one in nss2 and the others in nss1.','line_number':2138,'multiline':False]['text':' executor','line_number':2170,'multiline':False]['text':' oplogBuffer','line_number':2171,'multiline':False]['text':' Insert the first entry in its own batch.  This should result in the oplog entry being written','line_number':2179,'multiline':False]['text':' but the entry should not be applied as it is part of a pending transaction.','line_number':2180,'multiline':False]['text':' Insert the rest of the entries, including the commit.  These entries should be added to the','line_number':2193,'multiline':False]['text':' oplog, and all the entries including the first should be applied.','line_number':2194,'multiline':False]['text':' Check that we inserted the expected documents','line_number':2207,'multiline':False]['text':' Tests that two transactions on the same session ID in the same batch both','line_number':2216,'multiline':False]['text':' apply correctly.','line_number':2217,'multiline':False]['text':' executor','line_number':2290,'multiline':False]['text':' oplogBuffer','line_number':2291,'multiline':False]['text':' Note the insert counter so we can check it later.  It is necessary to use opCounters as','line_number':2299,'multiline':False]['text':' inserts are idempotent so we will not detect duplicate inserts just by checking inserts in','line_number':2300,'multiline':False]['text':' the opObserver.','line_number':2301,'multiline':False]['text':' Insert all the oplog entries in one batch.  All inserts should be executed, in order, exactly','line_number':2303,'multiline':False]['text':' once.','line_number':2304,'multiline':False]['text':' Check docs in nss1.','line_number':2318,'multiline':False]['text':' Storing the documents in a sorted data structure to make checking for valid','line_number':2353,'multiline':False]['text':' results easier. The inserts will be performed by different threads and','line_number':2354,'multiline':False]['text':' there's no guarantee of the order.','line_number':2355,'multiline':False]['text':' Storing the inserted documents in a sorted data structure to make checking','line_number':2368,'multiline':False]['text':' for valid results easier. The inserts will be performed by different threads','line_number':2369,'multiline':False]['text':' and there's no guarantee of the order.','line_number':2370,'multiline':False]['text':' Tests an unprepared transaction with ops both in the batch with the commit and prior','line_number':2408,'multiline':False]['text':' batches. Populate transaction with 2 linked entries - a create collection and an insert.','line_number':2409,'multiline':False]['text':' executor','line_number':2448,'multiline':False]['text':' oplogBuffer','line_number':2449,'multiline':False]['text':' Insert the first entry in its own batch.  This should result in the oplog entry being written','line_number':2457,'multiline':False]['text':' but the entry should not be applied as it is part of a pending transaction.','line_number':2458,'multiline':False]['text':' Insert the rest of the entries, including the commit.  These entries should be added to the','line_number':2463,'multiline':False]['text':' oplog, and all the entries including the first should be applied.','line_number':2464,'multiline':False]['text':' Check that we applied the expected documents','line_number':2469,'multiline':False]['text':' Tests an unprepared transaction with ops both in the batch with the commit and prior','line_number':2479,'multiline':False]['text':' batches. Populate transaction with 2 linked entries - a create collection and an insert.','line_number':2480,'multiline':False]['text':' executor','line_number':2518,'multiline':False]['text':' oplogBuffer','line_number':2519,'multiline':False]['text':' Insert the first entry in its own batch.  This should result in the oplog entry being written','line_number':2527,'multiline':False]['text':' but the entry should not be applied as it is part of a pending transaction.','line_number':2528,'multiline':False]['text':' Insert the rest of the entries, including the commit.  These entries should be added to the','line_number':2533,'multiline':False]['text':' oplog, and all the entries including the first should be applied.','line_number':2534,'multiline':False]['text':' Check that we applied the expected documents','line_number':2539,'multiline':False]['text':' executor','line_number':2620,'multiline':False]['text':' oplogBuffer','line_number':2621,'multiline':False]['text':' Apply a batch with the insert operations.  This should result in the oplog entries','line_number':2629,'multiline':False]['text':' being put in the oplog and updating the transaction table, but not actually being applied','line_number':2630,'multiline':False]['text':' because they are part of a pending transaction.','line_number':2631,'multiline':False]['text':' Apply a batch with only the prepare.  This should result in the prepare being put in the','line_number':2647,'multiline':False]['text':' oplog, and the two previous entries being applied (but in a transaction) along with the','line_number':2648,'multiline':False]['text':' nested insert in the prepare oplog entry.','line_number':2649,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the commit being put in the','line_number':2664,'multiline':False]['text':' oplog, and the three previous entries being committed.','line_number':2665,'multiline':False]['text':' executor','line_number':2683,'multiline':False]['text':' oplogBuffer','line_number':2684,'multiline':False]['text':' Apply a batch with the insert operations.  This should result in the oplog entries','line_number':2692,'multiline':False]['text':' being put in the oplog and updating the transaction table, but not actually being applied','line_number':2693,'multiline':False]['text':' because they are part of a pending transaction.','line_number':2694,'multiline':False]['text':' Apply a batch with only the prepare.  This should result in the prepare being put in the','line_number':2705,'multiline':False]['text':' oplog, and the two previous entries being applied (but in a transaction) along with the','line_number':2706,'multiline':False]['text':' nested insert in the prepare oplog entry.','line_number':2707,'multiline':False]['text':' Apply a batch with only the abort.  This should result in the abort being put in the','line_number':2718,'multiline':False]['text':' oplog and the transaction table being updated accordingly.','line_number':2719,'multiline':False]['text':' executor','line_number':2737,'multiline':False]['text':' oplogBuffer','line_number':2738,'multiline':False]['text':' Apply a batch with the insert operations.  This should result in the oplog entries','line_number':2745,'multiline':False]['text':' being put in the oplog and updating the transaction table, but not actually being applied','line_number':2746,'multiline':False]['text':' because they are part of a pending transaction.','line_number':2747,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should result in the prepare being put in','line_number':2763,'multiline':False]['text':' the oplog, but, since this is initial sync, nothing else.','line_number':2764,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the commit being put in the','line_number':2779,'multiline':False]['text':' oplog, and the three previous entries being applied.','line_number':2780,'multiline':False]['text':' For recovery, the oplog must contain the operations before starting.','line_number':2796,'multiline':False]['text':' Ignore docs inserted into oplog in setup.','line_number':2805,'multiline':False]['text':' executor','line_number':2810,'multiline':False]['text':' oplogBuffer','line_number':2811,'multiline':False]['text':' Apply a batch with the insert operations.  This should have no effect, because this is','line_number':2819,'multiline':False]['text':' recovery.','line_number':2820,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should have no effect, since this is','line_number':2834,'multiline':False]['text':' recovery.','line_number':2835,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the the three previous entries','line_number':2849,'multiline':False]['text':' being applied.','line_number':2850,'multiline':False]['text':' executor','line_number':2868,'multiline':False]['text':' oplogBuffer','line_number':2869,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should result in the prepare being put in','line_number':2878,'multiline':False]['text':' the oplog, and the nested insert being applied (but in a transaction).','line_number':2879,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the commit being put in the','line_number':2893,'multiline':False]['text':' oplog, and prepared insert being committed.','line_number':2894,'multiline':False]['text':' executor','line_number':2912,'multiline':False]['text':' oplogBuffer','line_number':2913,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should result in the prepare being put in','line_number':2931,'multiline':False]['text':' the oplog, and the nested insert being applied (but in a transaction).','line_number':2932,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the commit being put in the','line_number':2946,'multiline':False]['text':' oplog, and prepared insert being committed.','line_number':2947,'multiline':False]['text':' executor','line_number':2965,'multiline':False]['text':' oplogBuffer','line_number':2966,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should result in the prepare being put in','line_number':2975,'multiline':False]['text':' the oplog, and the nested insert being applied (but in a transaction).','line_number':2976,'multiline':False]['text':' Apply a batch with only the abort.  This should result in the abort being put in the','line_number':2987,'multiline':False]['text':' oplog and the transaction table being updated accordingly.','line_number':2988,'multiline':False]['text':' executor','line_number':3007,'multiline':False]['text':' oplogBuffer','line_number':3008,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should result in the prepare being put in','line_number':3018,'multiline':False]['text':' the oplog, but, since this is initial sync, nothing else.','line_number':3019,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the commit being put in the','line_number':3034,'multiline':False]['text':' oplog, and the previous entry being applied.','line_number':3035,'multiline':False]['text':' For recovery, the oplog must contain the operations before starting.','line_number':3052,'multiline':False]['text':' Ignore docs inserted into oplog in setup.','line_number':3060,'multiline':False]['text':' executor','line_number':3065,'multiline':False]['text':' oplogBuffer','line_number':3066,'multiline':False]['text':' Apply a batch with only the prepare applyOps. This should have no effect, since this is','line_number':3076,'multiline':False]['text':' recovery.','line_number':3077,'multiline':False]['text':' Apply a batch with only the commit.  This should result in the previous entry being','line_number':3091,'multiline':False]['text':' applied.','line_number':3092,'multiline':False]['text':' Storing the deleted documents in a sorted data structure to make checking','line_number':3181,'multiline':False]['text':' for valid results easier. The delete will be performed by different threads','line_number':3182,'multiline':False]['text':' and there's no guarantee of the order.','line_number':3183,'multiline':False]['text':' executor','line_number':3206,'multiline':False]['text':' oplogBuffer','line_number':3207,'multiline':False]['text':' Apply a batch with multiple prepares and regular CRUD ops.','line_number':3215,'multiline':False]['text':' Apply a batch with only the commit for the first prepare.','line_number':3237,'multiline':False]['text':' Apply a batch with only the abort for the second prepare.','line_number':3259,'multiline':False]['text':' Set the state as secondary as we are going to apply createIndexes oplog entry.','line_number':3295,'multiline':False]['text':' Set the state as secondary as we are going to apply createIndexes oplog entry.','line_number':3321,'multiline':False]['text':' Delete operation without _id in 'o' field.','line_number':3438,'multiline':False]['text':' Each element in 'docsInserted' is a grouped insert operation.','line_number':3524,'multiline':False]['text':' Check grouped insert operations in namespace "nss1".','line_number':3537,'multiline':False]['text':' Check grouped insert operations in namespace "nss2".','line_number':3543,'multiline':False]['text':' Generate operations to apply:','line_number':3561,'multiline':False]['text':' {create}, {insert_1}, {insert_2}, .. {insert_(limit)}, {insert_(limit+1)}','line_number':3562,'multiline':False]['text':' Each element in 'docsInserted' is a grouped insert operation.','line_number':3572,'multiline':False]['text':' applyOplogBatchPerWorker should combine operations as follows:','line_number':3581,'multiline':False]['text':' {create}, {grouped_insert}, {insert_(limit+1)}','line_number':3582,'multiline':False]['text':' Ignore {create} since we are only tracking inserts.','line_number':3583,'multiline':False]['text':' (limit + 1)-th insert operations should not be included in group of first (limit) inserts.','line_number':3593,'multiline':False]['text':' Create an 'insert' oplog operation of an approximate size in bytes. The '_id' of the oplog entry','line_number':3599,'multiline':False]['text':' and its optime in seconds are given by the 'id' argument.','line_number':3600,'multiline':False]['text':' Create a sequence of insert ops that are too large to fit in one group.','line_number':3614,'multiline':False]['text':' Leave some room for other oplog fields.','line_number':3617,'multiline':False]['text':' Create the insert ops.','line_number':3619,'multiline':False]['text':' Each element in 'docsInserted' is a grouped insert operation.','line_number':3630,'multiline':False]['text':' Apply the ops.','line_number':3637,'multiline':False]['text':' Applied ops should be as follows:','line_number':3640,'multiline':False]['text':' [ {create}, INSERT_GROUP{insert 1, insert 2, insert 3}, {insert 4} ]','line_number':3641,'multiline':False]['text':' Ignore {create} since we are only tracking inserts.','line_number':3642,'multiline':False]['text':' Make sure the insert group was created correctly.','line_number':3645,'multiline':False]['text':' Check that the last op was applied individually.','line_number':3652,'multiline':False]['text':' Create an insert op that exceeds the maximum batch size by itself.','line_number':3666,'multiline':False]['text':' Each element in 'docsInserted' is a grouped insert operation.','line_number':3672,'multiline':False]['text':' Apply the ops.','line_number':3679,'multiline':False]['text':' Applied ops should be as follows:','line_number':3682,'multiline':False]['text':' [ {create}, {large insert} {small insert} ]','line_number':3683,'multiline':False]['text':' Ignore {create} since we are only tracking inserts.','line_number':3684,'multiline':False]['text':' Create a sequence of 3 'insert' ops that can't be grouped because they are from different','line_number':3704,'multiline':False]['text':' namespaces.','line_number':3705,'multiline':False]['text':' Each element in 'docsInserted' is a grouped insert operation.','line_number':3715,'multiline':False]['text':' Apply the ops.','line_number':3722,'multiline':False]['text':' Applied ops should be as follows i.e. no insert grouping:','line_number':3725,'multiline':False]['text':' [{insert 1}, {insert 2}, {insert 3}]','line_number':3726,'multiline':False]['text':' Generate operations to apply:','line_number':3746,'multiline':False]['text':' {create}, {insert_1}, {insert_2}, .. {insert_(limit)}, {insert_(limit+1)}','line_number':3747,'multiline':False]['text':' Each element in 'docsInserted' is a grouped insert operation.','line_number':3757,'multiline':False]['text':' Reject grouped insert operations.','line_number':3762,'multiline':False]['text':' On failing to apply the grouped insert operation, applyOplogBatchPerWorker should','line_number':3772,'multiline':False]['text':' apply the operations as given in "operationsToApply": {create}, {insert_1}, {insert_2}, ..','line_number':3773,'multiline':False]['text':' {insert_(limit)}, {insert_(limit+1)} Ignore {create} since we are only tracking inserts.','line_number':3774,'multiline':False]['text':' Ensure that applyOplogBatchPerWorker does not attempt to group remaining operations','line_number':3784,'multiline':False]['text':' in first failed grouped insert operation.','line_number':3785,'multiline':False]['text':' Since the document was missing when we cloned data from the sync source, the collection','line_number':3809,'multiline':False]['text':' referenced by the failed operation should not be automatically created.','line_number':3810,'multiline':False]['text':' 'badNss' collection should not be implicitly created while attempting to create an index.','line_number':3879,'multiline':False]['text':' We don't drop and re-create the collection since we don't have ways','line_number':4141,'multiline':False]['text':' to wait until second-phase drop to completely finish.','line_number':4142,'multiline':False]['text':' Create data collection','line_number':4161,'multiline':False]['text':' Create "system.views" collection','line_number':4163,'multiline':False]['text':' Choose `system.profile` so the storage engine doesn't expect the drop to be timestamped.','line_number':4255,'multiline':False]['text':' Choose `system.profile` so the storage engine doesn't expect the drop to be timestamped.','line_number':4266,'multiline':False]['text':' This duration is greater than "slowMS", so the op would be considered slow.','line_number':4277,'multiline':False]['text':' We are inserting into an existing collection.','line_number':4280,'multiline':False]['text':' This duration is greater than "slowMS", so the op would be considered slow.','line_number':4301,'multiline':False]['text':' We are trying to insert into a non-existing database.','line_number':4304,'multiline':False]['text':' Use a builder for easier escaping. We expect the operation to *not* be logged','line_number':4313,'multiline':False]['text':' even thought it was slow, since we couldn't apply it successfully.','line_number':4314,'multiline':False]['text':' This duration is below "slowMS", so the op would *not* be considered slow.','line_number':4323,'multiline':False]['text':' We are inserting into an existing collection.','line_number':4326,'multiline':False]['text':' Use a builder for easier escaping. We expect the operation to *not* be logged,','line_number':4335,'multiline':False]['text':' since it wasn't slow to apply.','line_number':4336,'multiline':False]['text':' This fixture sets up some replication, but notably omits installing an','line_number':4349,'multiline':False]['text':' OpObserverImpl. This state causes collection creation to timestamp catalog writes, but','line_number':4350,'multiline':False]['text':' secondary index creation does not. We use an UnreplicatedWritesBlock to avoid','line_number':4351,'multiline':False]['text':' timestamping any of the catalog setup.','line_number':4352,'multiline':False]['text':'*
     * Creates an OplogEntry with given parameters and preset defaults for this test suite.
     ','line_number':4363,'multiline':True]['text':' optime','line_number':4374,'multiline':False]['text':' opType','line_number':4375,'multiline':False]['text':' namespace','line_number':4376,'multiline':False]['text':' uuid','line_number':4377,'multiline':False]['text':' fromMigrate','line_number':4378,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':4379,'multiline':False]['text':' version','line_number':4380,'multiline':False]['text':' o','line_number':4381,'multiline':False]['text':' o2','line_number':4382,'multiline':False]['text':' sessionInfo','line_number':4383,'multiline':False]['text':' false','line_number':4384,'multiline':False]['text':' wall clock time','line_number':4385,'multiline':False]['text':' statement ids','line_number':4386,'multiline':False]['text':' optime of previous write within same transaction','line_number':4387,'multiline':False]['text':' pre-image optime','line_number':4388,'multiline':False]['text':' post-image optime','line_number':4389,'multiline':False]['text':' ShardId of resharding recipient','line_number':4390,'multiline':False]['text':' _id','line_number':4391,'multiline':False]['text':' needsRetryImage','line_number':4392,'multiline':False]['text':'*
     * Creates an OplogEntry with given parameters and preset defaults for this test suite.
     ','line_number':4395,'multiline':True]['text':' optime','line_number':4406,'multiline':False]['text':' opType','line_number':4407,'multiline':False]['text':' namespace','line_number':4408,'multiline':False]['text':' uuid','line_number':4409,'multiline':False]['text':' fromMigrate','line_number':4410,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':4411,'multiline':False]['text':' version','line_number':4412,'multiline':False]['text':' o','line_number':4413,'multiline':False]['text':' o2','line_number':4414,'multiline':False]['text':' sessionInfo','line_number':4415,'multiline':False]['text':' false','line_number':4416,'multiline':False]['text':' wall clock time','line_number':4417,'multiline':False]['text':' statement ids','line_number':4418,'multiline':False]['text':' optime of previous write within same transaction','line_number':4419,'multiline':False]['text':' pre-image optime','line_number':4420,'multiline':False]['text':' post-image optime','line_number':4421,'multiline':False]['text':' ShardId of resharding recipient','line_number':4422,'multiline':False]['text':' _id','line_number':4423,'multiline':False]['text':' needsRetryImage','line_number':4424,'multiline':False]['text':' executor','line_number':4472,'multiline':False]['text':' oplogBuffer','line_number':4473,'multiline':False]['text':' executor','line_number':4512,'multiline':False]['text':' oplogBuffer','line_number':4513,'multiline':False]['text':' executor','line_number':4566,'multiline':False]['text':' oplogBuffer','line_number':4567,'multiline':False]['text':' executor','line_number':4609,'multiline':False]['text':' oplogBuffer','line_number':4610,'multiline':False]['text':' executor','line_number':4673,'multiline':False]['text':' oplogBuffer','line_number':4674,'multiline':False]['text':' executor','line_number':4743,'multiline':False]['text':' oplogBuffer','line_number':4744,'multiline':False]['text':' Entries with a session id and a txnNumber update the transaction table.','line_number':4787,'multiline':False]['text':' For entries with the same session, the entry with a larger txnNumber is saved.','line_number':4792,'multiline':False]['text':' For entries with the same session and txnNumber, the later optime is saved.','line_number':4799,'multiline':False]['text':' Entries with a session id but no txnNumber do not lead to updates.','line_number':4806,'multiline':False]['text':' executor','line_number':4816,'multiline':False]['text':' oplogBuffer','line_number':4817,'multiline':False]['text':' The txnNum and optime of the only write were saved.','line_number':4829,'multiline':False]['text':' The txnNum and optime of the write with the larger txnNum were saved.','line_number':4841,'multiline':False]['text':' The txnNum and optime of the write with the later optime were saved.','line_number':4853,'multiline':False]['text':' There is no entry for the write with no txnNumber.','line_number':4865,'multiline':False]['text':' executor','line_number':4899,'multiline':False]['text':' oplogBuffer','line_number':4900,'multiline':False]['text':' executor','line_number':4931,'multiline':False]['text':' oplogBuffer','line_number':4932,'multiline':False]['text':' executor','line_number':4965,'multiline':False]['text':' oplogBuffer','line_number':4966,'multiline':False]['text':' Create a BSON "emptycapped" command.','line_number':4983,'multiline':False]['text':' Create an "emptycapped" oplog entry.','line_number':4986,'multiline':False]['text':' Ensure that NamespaceNotFound is acceptable.','line_number':4989,'multiline':False]['text':' Create a BSON "emptycapped" command.','line_number':5023,'multiline':False]['text':' Create a "emptycapped" oplog entry.','line_number':5026,'multiline':False]['text':' Ensure that NamespaceNotFound is "acceptable" but counted.','line_number':5029,'multiline':False]['text':' Create a BSON "emptycapped" command.','line_number':5045,'multiline':False]['text':' Create a "emptyCapped" oplog entry.','line_number':5048,'multiline':False]['text':' Ensure that NamespaceNotFound is returned.','line_number':5051,'multiline':False]['text':' Document used by transaction idempotency tests.','line_number':5057,'multiline':False]['text':' Manually insert one of the documents so that the data will partially reflect the transaction','line_number':5099,'multiline':False]['text':' when the commitTransaction oplog entry is applied during initial sync.','line_number':5100,'multiline':False]['text':' Manually insert one of the documents so that the data will partially reflect the transaction','line_number':5165,'multiline':False]['text':' when the commitTransaction oplog entry is applied during initial sync.','line_number':5166,'multiline':False]['text':' Document should not be visible yet.','line_number':5235,'multiline':False]['text':' Document should not be visible yet.','line_number':5264,'multiline':False]['text':' The second transaction (with a different transaction number) in the same session.','line_number':5311,'multiline':False]['text':' This also tests that we clear the partialTxnList for the session after applying the commit of','line_number':5320,'multiline':False]['text':' the first transaction. Otherwise, saving operations from the second transaction to the same','line_number':5321,'multiline':False]['text':' partialTxnList as the first transaction will trigger an invariant because of the mismatching','line_number':5322,'multiline':False]['text':' transaction numbers.','line_number':5323,'multiline':False]['text':' The transaction table should only contain the second transaction of the session.','line_number':5326,'multiline':False]['text':' The second transaction (with a different transaction number) in the same session.','line_number':5349,'multiline':False]['text':' This also tests that we clear the partialTxnList for the session after applying the abort of','line_number':5358,'multiline':False]['text':' the first transaction. Otherwise, saving operations from the second transaction to the same','line_number':5359,'multiline':False]['text':' partialTxnList as the first transaction will trigger an invariant because of the mismatching','line_number':5360,'multiline':False]['text':' transaction numbers.','line_number':5361,'multiline':False]['text':' The transaction table should only contain the second transaction of the session.','line_number':5364,'multiline':False]['text':' Manually insert the first document so that the data will partially reflect the transaction','line_number':5391,'multiline':False]['text':' when the commitTransaction oplog entry is applied during initial sync. This simulates the','line_number':5392,'multiline':False]['text':' case where the transaction committed on the sync source at a point during the initial sync,','line_number':5393,'multiline':False]['text':' such that we cloned 'doc' but missed 'doc2'.','line_number':5394,'multiline':False]['text':' Document should not be visible yet.','line_number':5440,'multiline':False]['text':' It is possible to have an empty prepare oplog entry.','line_number':5449,'multiline':False]['text':' The second transaction (with a different transaction number) in the same session.','line_number':5507,'multiline':False]['text':' This also tests that we clear the partialTxnList for the session after applying the commit of','line_number':5516,'multiline':False]['text':' the first prepared transaction. Otherwise, saving operations from the second transaction to','line_number':5517,'multiline':False]['text':' the same partialTxnList as the first transaction will trigger an invariant because of the','line_number':5518,'multiline':False]['text':' mismatching transaction numbers.','line_number':5519,'multiline':False]['text':' The transaction table should only contain the second transaction of the session.','line_number':5522,'multiline':False]['text':' Manually insert the first document so that the data will partially reflect the transaction','line_number':5549,'multiline':False]['text':' when the commitTransaction oplog entry is applied during initial sync. This simulates the','line_number':5550,'multiline':False]['text':' case where the transaction committed on the sync source at a point during the initial sync,','line_number':5551,'multiline':False]['text':' such that we cloned 'doc' but missed 'doc2'.','line_number':5552,'multiline':False]['text':' Instead of creating a collection, we generate an arbitrary UUID to use for the operations','line_number':5630,'multiline':False]['text':' below. This simulates the case where, during initial sync, a document D was inserted into a','line_number':5631,'multiline':False]['text':' collection C on the sync source and then collection C was dropped, after we started fetching','line_number':5632,'multiline':False]['text':' oplog entries but before we started collection cloning. In this case, we would not clone','line_number':5633,'multiline':False]['text':' collection C, but when we try to apply the insertion of document D after collection cloning','line_number':5634,'multiline':False]['text':' has finished, the collection would not exist since we never created it. It is acceptable to','line_number':5635,'multiline':False]['text':' ignore the NamespaceNotFound error in this case since we know the collection will be dropped','line_number':5636,'multiline':False]['text':' later on.','line_number':5637,'multiline':False]['text':' The op should have thrown a NamespaceNotFound error, which should have been ignored, so the','line_number':5650,'multiline':False]['text':' operation has no effect.','line_number':5651,'multiline':False]['text':' Instead of creating a collection, we generate an arbitrary UUID to use for the operations','line_number':5658,'multiline':False]['text':' below. This simulates the case where, during initial sync, a document D was inserted into a','line_number':5659,'multiline':False]['text':' collection C on the sync source and then collection C was dropped, after we started fetching','line_number':5660,'multiline':False]['text':' oplog entries but before we started collection cloning. In this case, we would not clone','line_number':5661,'multiline':False]['text':' collection C, but when we try to apply the insertion of document D after collection cloning','line_number':5662,'multiline':False]['text':' has finished, the collection would not exist since we never created it. It is acceptable to','line_number':5663,'multiline':False]['text':' ignore the NamespaceNotFound error in this case since we know the collection will be dropped','line_number':5664,'multiline':False]['text':' later on.','line_number':5665,'multiline':False]['text':' The op should have thrown a NamespaceNotFound error, which should have been ignored, so the','line_number':5678,'multiline':False]['text':' operation has no effect.','line_number':5679,'multiline':False]['text':' executor','line_number':5704,'multiline':False]['text':' oplogBuffer','line_number':5705,'multiline':False]['text':' Scale the test by the number of writer threads, so it does not start failing if maxThreads','line_number':5790,'multiline':False]['text':' changes.','line_number':5791,'multiline':False]['text':' Verify the config.transactions collection got one entry for each prepared transaction.','line_number':5819,'multiline':False]['text':' Verify each top-level transaction has a corresponding prepare entry in the writerVectors.','line_number':5823,'multiline':False]['text':' Verify each writer has been assigned operations for both prepared transactions.','line_number':5827,'multiline':False]['text':' Test that applying a commitTransaction or abortTransaction entry in the next batch will','line_number':5846,'multiline':False]['text':' correctly split the entry and add them into those writer vectors that previously got','line_number':5847,'multiline':False]['text':' assigned the prepare entry.','line_number':5848,'multiline':False]['text':' Verify the config.transactions collection got one entry for each commit/abort op.','line_number':5860,'multiline':False]['text':' Verify each top-level transaction has a corresponding commit entry in the writerVectors.','line_number':5864,'multiline':False]['text':' Verify each writer has been assigned a split commit and abort op.','line_number':5868,'multiline':False]['text':' Verify the config.transactions collection got an entry for the empty prepared transaction.','line_number':5902,'multiline':False]['text':' Verify each top-level transaction has a corresponding prepare entry in the writerVectors.','line_number':5906,'multiline':False]['text':' Verify exactly one writer has been assigned operation for the empty prepared transaction.','line_number':5910,'multiline':False]['text':' Test that applying a commitTransaction in the next batch will correctly split the entry','line_number':5926,'multiline':False]['text':' and add it into those writer vectors that previously got assigned the prepare entry.','line_number':5927,'multiline':False]['text':' Verify the config.transactions collection got an entry for the commit op.','line_number':5937,'multiline':False]['text':' Verify each top-level transaction has a corresponding commit entry in the writerVectors.','line_number':5941,'multiline':False]['text':' Verify exactly one writer has been assigned a split commit op.','line_number':5945,'multiline':False]['text':' executor','line_number':5973,'multiline':False]['text':' oplogBuffer','line_number':5974,'multiline':False]['text':' optime','line_number':6023,'multiline':False]['text':' op type','line_number':6024,'multiline':False]['text':' namespace','line_number':6025,'multiline':False]['text':' o','line_number':6026,'multiline':False]['text':' o2','line_number':6027,'multiline':False]['text':' session info','line_number':6028,'multiline':False]['text':' wall clock time','line_number':6029,'multiline':False]['text':' Regardless of the UUID, if the docKey is the same, the writer should be the same.','line_number':6052,'multiline':False]['text':' We expect the two operations to be in the same writer vector. Only one of the writers should','line_number':6070,'multiline':False]['text':' contain operations.','line_number':6071,'multiline':False]['text':' An oplog entry','line_number':6076,'multiline':False]['text':' Scale the test by the number of writer threads, so it does not start failing if maxThreads','line_number':6085,'multiline':False]['text':' changes.','line_number':6086,'multiline':False]['text':' Verify each writer has been assigned some operations.','line_number':6109,'multiline':False]['text':' CRUD ops + 1 config.transactions entry.','line_number':6113,'multiline':False]['text':' Scale the test by the number of writer threads, so it does not start failing if maxThreads','line_number':6117,'multiline':False]['text':' changes.','line_number':6118,'multiline':False]['text':' Verify each writer has been assigned some operations.','line_number':6139,'multiline':False]['text':' CRUD ops + 1 config.transactions entry.','line_number':6143,'multiline':False]['text':' namespace','line_number':6146,'multiline':False]['text':' namespace repl','line_number':6147,'multiline':False]['text':' namespace mongo','line_number':6148,'multiline':False]