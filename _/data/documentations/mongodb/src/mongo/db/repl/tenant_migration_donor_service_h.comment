['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Sends an abort to all tenant migration instances on this donor.
     ','line_number':103,'multiline':True]['text':'*
         * Report TenantMigrationDonorService Instances in currentOp().
         ','line_number':128,'multiline':True]['text':'*
         * Returns the latest durable migration state, or boost::none if no state document has been
         * inserted yet. The state document exists once getInitialStateDocumentDurableFuture() is
         * resolved.
         ','line_number':137,'multiline':True]['text':'*
         * Returns a Future that will be resolved once the initial state document has been inserted.
         ','line_number':144,'multiline':True]['text':'*
         * Returns a Future that will be resolved when the instance has been durably marked garbage
         * collectable.
         ','line_number':151,'multiline':True]['text':'*
         * Returns a Future that will be resolved when an abort or commit decision has been reached.
         ','line_number':159,'multiline':True]['text':'*
         * Kicks off work for the donorAbortMigration command.
         ','line_number':166,'multiline':True]['text':'*
         * Kicks off the work for the donorForgetMigration command.
         ','line_number':171,'multiline':True]['text':'*
         * Fetches all key documents from the recipient's admin.system.keys collection, stores
         * them in config.external_validation_keys, and refreshes the keys cache.
         ','line_number':197,'multiline':True]['text':'*
         * Inserts the state document to _stateDocumentsNS and returns the opTime for the insert
         * oplog entry.
         ','line_number':240,'multiline':True]['text':'*
         * Updates the state document to have the given state. Then, persists the updated document
         * by reserving an oplog slot beforehand and using its timestamp as the blockTimestamp or
         * commitOrAbortTimestamp depending on the state. Returns the opTime for the update oplog
         * entry.
         ','line_number':247,'multiline':True]['text':'*
         * Deletes the state document. Does not return the opTime for the delete, since it's not
         * necessary to wait for this delete to be majority committed (this is the last step in the
         * chain, and if the delete rolls back, the new primary will re-do the delete).
         ','line_number':258,'multiline':True]['text':'*
         * Sets the "expireAt" time for the state document to be garbage collected, and returns the
         * the opTime for the write.
         ','line_number':266,'multiline':True]['text':'*
         * Waits for given opTime to be majority committed.
         ','line_number':273,'multiline':True]['text':'*
         * Sends the recipientSyncData command to the recipient replica set.
         ','line_number':281,'multiline':True]['text':'*
         * Sends the recipientForgetMigration command to the recipient replica set.
         ','line_number':289,'multiline':True]['text':'*
         * Validate if the value of _tenantIds is correct for the given _protocol.
         ','line_number':303,'multiline':True]['text':'
         * Initializes _abortMigrationSource and returns a token from it. The source will be
         * immediately canceled if an abort has already been requested.
         ','line_number':308,'multiline':True]['text':' This data is provided in the initial state doc and never changes.  We keep copies to','line_number':321,'multiline':False]['text':' avoid having to obtain the mutex to access them.','line_number':322,'multiline':False]['text':' Weak pointer to the Fetcher used for fetching admin.system.keys documents from the','line_number':330,'multiline':False]['text':' recipient. It is only not null when the instance is actively fetching the documents.','line_number':331,'multiline':False]['text':' Protects the durable state, state document, abort requested boolean, and the promises','line_number':336,'multiline':False]['text':' below.','line_number':337,'multiline':False]['text':' The latest majority-committed migration state.','line_number':340,'multiline':False]['text':' Promise that is resolved when the donor has majority-committed the write to insert the','line_number':343,'multiline':False]['text':' donor state doc for the migration.','line_number':344,'multiline':False]['text':' Promise that is resolved when the donor receives the donorForgetMigration command.','line_number':347,'multiline':False]['text':' Promise that is resolved when the instance has been durably marked garbage collectable.','line_number':350,'multiline':False]['text':' Promise that is resolved when the donor has majority-committed the write to commit or','line_number':353,'multiline':False]['text':' abort.','line_number':354,'multiline':False]['text':' Set to true when a request to cancel the migration has been processed, e.g. after','line_number':357,'multiline':False]['text':' executing the donorAbortMigration command.','line_number':358,'multiline':False]['text':' Used for logical interrupts that require aborting the migration but not unconditionally','line_number':361,'multiline':False]['text':' interrupting the instance, e.g. receiving donorAbortMigration. Initialized in','line_number':362,'multiline':False]['text':' _initAbortMigrationSource().','line_number':363,'multiline':False]['text':' namespace mongo','line_number':379,'multiline':False]