['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':30,'multiline':False]['text':' Helper class to wrap Timestamp as an OpTime with term 1.','line_number':118,'multiline':False]['text':'*
 * Helper that kills an operation, taking the necessary locks.
 ','line_number':140,'multiline':True]['text':' Primary begins stepping down due to new term, but cannot finish.','line_number':176,'multiline':False]['text':' Test that "isWritablePrimary" is immediately false, although "secondary" is not yet true.','line_number':183,'multiline':False]['text':'useLegacyResponseFields','line_number':188,'multiline':True]['text':' Starting uninitialized, show that we can perform the initiate behavior.','line_number':318,'multiline':False]['text':' Show that initiate fails after it has already succeeded.','line_number':331,'multiline':False]['text':' Still in repl set mode, even after failed reinitiate.','line_number':343,'multiline':False]['text':' Starting uninitialized, show that we can perform the initiate behavior.','line_number':355,'multiline':False]['text':' Having failed to initiate once, show that we can now initiate.','line_number':384,'multiline':False]['text':' pass in settings to avoid having a replSet','line_number':622,'multiline':False]['text':' check status NoReplicationEnabled and empty result','line_number':627,'multiline':False]['text':' check status NoReplicationEnabled and result mentions configsrv','line_number':642,'multiline':False]['text':' check status NotYetInitialized and result mentions rs.initiate','line_number':655,'multiline':False]['text':' check status OK and result is empty','line_number':671,'multiline':False]['text':' Because we didn't set ReplSettings.replSet, it will think we're a standalone so','line_number':688,'multiline':False]['text':' awaitReplication will always work.','line_number':689,'multiline':False]['text':' Waiting for 0 nodes always works','line_number':714,'multiline':False]['text':' Node should fail to awaitReplication when not primary.','line_number':718,'multiline':False]['text':' Waiting for 0 nodes always works','line_number':741,'multiline':False]['text':' Become primary.','line_number':745,'multiline':False]['text':' 1 node waiting for time 1','line_number':791,'multiline':False]['text':' 2 nodes waiting for time1','line_number':800,'multiline':False]['text':' Applied is not durable and will not satisfy WriteConcern with SyncMode JOURNAL.','line_number':804,'multiline':False]['text':' 2 nodes waiting for time2','line_number':812,'multiline':False]['text':' 3 nodes waiting for time2','line_number':824,'multiline':False]['text':' 1 node waiting for time 1','line_number':866,'multiline':False]['text':' 2 nodes waiting for time1','line_number':875,'multiline':False]['text':' 2 nodes waiting for time2','line_number':883,'multiline':False]['text':' 3 nodes waiting for time2','line_number':895,'multiline':False]['text':' Test invalid write concern','line_number':928,'multiline':False]['text':' Set up valid write concerns for the rest of the test','line_number':993,'multiline':False]['text':' Nothing satisfied','line_number':1008,'multiline':False]['text':' Majority satisfied but not either custom mode','line_number':1020,'multiline':False]['text':' All modes satisfied','line_number':1033,'multiline':False]['text':' multiDC satisfied but not majority or multiRack','line_number':1044,'multiline':False]['text':'*
 * Used to wait for replication in a separate thread without blocking execution of the test.
 * To use, set the optime and write concern to be passed to awaitReplication and then call
 * start(), which will spawn a thread that calls awaitReplication.  No calls may be made
 * on the ReplicationAwaiter instance between calling start and getResult().  After returning
 * from getResult(), you can call reset() to allow the awaiter to be reused for another
 * awaitReplication call.
 ','line_number':1059,'multiline':True]['text':' may block','line_number':1089,'multiline':False]['text':' 2 nodes waiting for time1','line_number':1152,'multiline':False]['text':' 2 nodes waiting for time2','line_number':1163,'multiline':False]['text':' 3 nodes waiting for time2','line_number':1173,'multiline':False]['text':' 2 nodes waiting for time2','line_number':1371,'multiline':False]['text':' 2 nodes waiting for time2','line_number':1417,'multiline':False]['text':' start nodes in a lagged state','line_number':1469,'multiline':False]['text':' catch them up to time2','line_number':1473,'multiline':False]['text':' Test that a thread blocked in awaitReplication will be woken up and return PrimarySteppedDown','line_number':1483,'multiline':False]['text':' (a NotPrimaryError) if the node steps down while it is waiting.','line_number':1484,'multiline':False]['text':' 2 nodes waiting for time2','line_number':1513,'multiline':False]['text':' Tests that a thread blocked in awaitReplication can be killed by a killOp operation','line_number':1527,'multiline':False]['text':' 2 nodes waiting for time2','line_number':1553,'multiline':False]['text':' Makes it so enough secondaries are caught up that a stepdown command can succeed.','line_number':1618,'multiline':False]['text':' Secondaries not caught up yet.','line_number':1697,'multiline':False]['text':' Catch up the secondaries using only replSetUpdatePosition.','line_number':1704,'multiline':False]['text':' Make sure wall times are propagated through processReplSetUpdatePosition','line_number':1732,'multiline':False]['text':' No election has taken place yet.','line_number':1764,'multiline':False]['text':' Check that the electionId is set properly after the election.','line_number':1777,'multiline':False]['text':' Check that the electionId is again properly set after the new election.','line_number':1796,'multiline':False]['text':' lower term, no change','line_number':1832,'multiline':False]['text':' same term, no change','line_number':1837,'multiline':False]['text':' Check that the numStepDownsCausedByHigherTerm election metric is 0 to start with.','line_number':1842,'multiline':False]['text':' higher term, step down and change term','line_number':1847,'multiline':False]['text':' Check that the numStepDownsCausedByHigherTerm election metric has been incremented.','line_number':1853,'multiline':False]['text':' Prevent _stepDownFinish() from running and becoming secondary by blocking in this','line_number':1884,'multiline':False]['text':' exclusive task.','line_number':1885,'multiline':False]['text':' Check that the numStepDownsCausedByHigherTerm election metric has been incremented.','line_number':1895,'multiline':False]['text':' Although term 3 can trigger stepdown, a stepdown has already been scheduled,','line_number':1903,'multiline':False]['text':' so no other stepdown can be scheduled again. Term 3 will be remembered and','line_number':1904,'multiline':False]['text':' installed once stepdown finishes.','line_number':1905,'multiline':False]['text':' Check that the numStepDownsCausedByHigherTerm election metric has not been incremented a','line_number':1908,'multiline':False]['text':' second time.','line_number':1909,'multiline':False]['text':' Unblock the tasks for updateTerm and _stepDownFinish.','line_number':1913,'multiline':False]['text':' Wait stepdown to finish and term 3 to be installed.','line_number':1916,'multiline':False]['text':' Now update term to trigger a stepdown.','line_number':1948,'multiline':False]['text':' Set 'firstOpTimeOfMyTerm' to have term 1, so that the node will see that the noop entry has','line_number':1954,'multiline':False]['text':' the correct term at the end of signalDrainComplete.','line_number':1955,'multiline':False]['text':' Now signal that replication applier is finished draining its buffer.','line_number':1957,'multiline':False]['text':' Now wait for stepdown to complete','line_number':1960,'multiline':False]['text':' By now, the node should have left drain mode.','line_number':1963,'multiline':False]['text':' ASSERT_EQUALS(2, getReplCoord()->getTerm()); // SERVER-28290','line_number':1967,'multiline':False]['text':' Secondaries not caught up yet.','line_number':1979,'multiline':False]['text':' Step down where the secondary actually has to catch up before the stepDown can succeed.','line_number':1986,'multiline':False]['text':' The node has not been able to step down yet.','line_number':1989,'multiline':False]['text':' Catch up one of the secondaries using only replSetUpdatePosition.','line_number':1992,'multiline':False]['text':' Verify that stepDown completes successfully.','line_number':2018,'multiline':False]['text':' Secondaries not caught up yet.','line_number':2032,'multiline':False]['text':' We can't take writes yet since we're still in drain mode.','line_number':2043,'multiline':False]['text':' Step down where the secondary actually has to catch up before the stepDown can succeed.','line_number':2048,'multiline':False]['text':' Interrupt the ongoing stepdown command so that the stepdown attempt will fail.','line_number':2051,'multiline':False]['text':' Ensure that the stepdown command failed.','line_number':2057,'multiline':False]['text':' Which code is returned is racy.','line_number':2060,'multiline':False]['text':' Ensure that the failed stepdown attempt didn't make us able to take writes since we're still','line_number':2066,'multiline':False]['text':' in drain mode.','line_number':2067,'multiline':False]['text':' Now complete drain mode and ensure that we become capable of taking writes.','line_number':2073,'multiline':False]['text':' No secondaries are caught up yet.','line_number':2111,'multiline':False]['text':' Step down where the secondary actually has to catch up before the stepDown can succeed.','line_number':2118,'multiline':False]['text':' The node has not been able to step down yet.','line_number':2121,'multiline':False]['text':' Use replSetUpdatePosition to catch up the first secondary, which is not electable.','line_number':2124,'multiline':False]['text':' This will yield a majority at the primary's opTime, so the waiter will be woken up,','line_number':2125,'multiline':False]['text':' but stepDown will not be able to complete.','line_number':2126,'multiline':False]['text':' The primary has still not been able to finish stepping down.','line_number':2152,'multiline':False]['text':' Now catch up the other secondary. This will wake up the waiter again, but this time','line_number':2155,'multiline':False]['text':' there is an electable node, so stepDown will complete.','line_number':2156,'multiline':False]['text':' Verify that stepDown completes successfully.','line_number':2182,'multiline':False]['text':' All nodes are caught up','line_number':2191,'multiline':False]['text':' Set up this test so that all nodes are caught up. This is necessary to exclude the false','line_number':2208,'multiline':False]['text':' positive case where stepDown returns "ExceededTimeLimit", but not because it could not','line_number':2209,'multiline':False]['text':' acquire the lock, but because it could not satisfy all stepdown conditions on time.','line_number':2210,'multiline':False]['text':' Make sure stepDown cannot grab the RSTL in mode X. We need to use a different','line_number':2221,'multiline':False]['text':' locker to test this, or otherwise stepDown will be granted the lock automatically.','line_number':2222,'multiline':False]['text':' Step Down Test for a 5-node replica set ','line_number':2240,'multiline':True]['text':'
     * Simulate a round of heartbeat requests from the primary by manually setting
     * the heartbeat response messages from each node. 'numNodesCaughtUp' will
     * determine how many nodes return an optime that is up to date with the
     * primary's optime. Sets electability of all caught up nodes to 'caughtUpAreElectable'
     ','line_number':2243,'multiline':True]['text':' Only process heartbeat requests.','line_number':2265,'multiline':False]['text':' Catch up 'numNodesCaughtUp' nodes out of 5.','line_number':2277,'multiline':False]['text':' All nodes are caught up','line_number':2321,'multiline':False]['text':' Make sure less than a majority are caught up (i.e. 2 out of 5) We catch up one secondary','line_number':2335,'multiline':False]['text':' since the primary counts as one towards majority','line_number':2336,'multiline':False]['text':' All nodes are caught up','line_number':2358,'multiline':False]['text':' Make sure a majority are caught up (i.e. 3 out of 5). We catch up two secondaries since','line_number':2372,'multiline':False]['text':' the primary counts as one towards majority','line_number':2373,'multiline':False]['text':' So we can safely inspect the topology coordinator','line_number':2383,'multiline':False]['text':' This test checks if a primary is chosen even if there are two simultaneous elections','line_number':2390,'multiline':False]['text':' happening because of election timeout and step-down timeout in a single node replica set.','line_number':2391,'multiline':False]['text':' Stepdown command with "force=true" resets the election timer to election timeout (10 seconds','line_number':2407,'multiline':False]['text':' later) and allows the node to resume primary after stepdown timeout (also 10 seconds).','line_number':2408,'multiline':False]['text':' Now run time forward and make sure that the node becomes primary again when stepdown timeout','line_number':2414,'multiline':False]['text':' and election timeout occurs at the same time.','line_number':2415,'multiline':False]['text':' We cancel and rescheduled election timeout after syncing a batch from our sync source, if our','line_number':2424,'multiline':False]['text':' sync source reports a primaryIndex in its OplogQueryMetadata. The batch's','line_number':2425,'multiline':False]['text':' ReplSetMetadata.isPrimary field is ignored.','line_number':2426,'multiline':False]['text':' Advance clock time so we know whether the election timeout was rescheduled.','line_number':2447,'multiline':False]['text':' isPrimary ','line_number':2453,'multiline':True]['text':' If currentPrimaryIndex is -1, don't reschedule.','line_number':2455,'multiline':False]['text':' currentPrimaryIndex ','line_number':2458,'multiline':True]['text':' If currentPrimaryIndex is NOT -1, reschedule.','line_number':2462,'multiline':False]['text':' currentPrimaryIndex ','line_number':2465,'multiline':True]['text':' Since we advanced the clock, the new election timeout is after the old one.','line_number':2467,'multiline':False]['text':' currentPrimaryIndex ','line_number':2492,'multiline':True]['text':' isPrimary ','line_number':2494,'multiline':True]['text':' Test that ReplicationCoordinator will correctly stop enqueuing messages from the donor and','line_number':2506,'multiline':False]['text':' change sync source when started in serverless mode and the replicaSetId changes.','line_number':2507,'multiline':False]['text':' currentPrimaryIndex ','line_number':2532,'multiline':True]['text':' isPrimary ','line_number':2534,'multiline':True]['text':' Continue syncing when the node is in the replica set and the replicaSetId is the same.','line_number':2536,'multiline':False]['text':' Enqueue final message but stop syncing when the replicaSetId is the same but the node is not','line_number':2541,'multiline':False]['text':' in the replica set anymore.','line_number':2542,'multiline':False]['text':' Discard messages and stop syncing when the node is not in the replica set anymore and the','line_number':2547,'multiline':False]['text':' replicaSetId has changed. This case occurs after a successfull shard split.','line_number':2548,'multiline':False]['text':' isPrimary ','line_number':2550,'multiline':True]['text':' Become Secondary.','line_number':2570,'multiline':False]['text':' Freeze the node for 20 seconds.','line_number':2577,'multiline':False]['text':' Now run time forward and unfreeze the node after 15 seconds.','line_number':2583,'multiline':False]['text':' Wait for single node election to happen.','line_number':2592,'multiline':False]['text':' Check that the numFreezeTimeoutsCalled and the numFreezeTimeoutsSuccessful election metrics','line_number':2600,'multiline':False]['text':' have been incremented, and that none of the metrics that track the number of elections called','line_number':2601,'multiline':False]['text':' or successful for other reasons has been incremented.','line_number':2602,'multiline':False]['text':' Check that the numElectionTimeoutsCalled and the numElectionTimeoutsSuccessful election','line_number':2629,'multiline':False]['text':' metrics have been incremented, and that none of the metrics that track the number of','line_number':2630,'multiline':False]['text':' elections called or successful for other reasons has been incremented.','line_number':2631,'multiline':False]['text':' Must do this before inspecting the topocoord','line_number':2646,'multiline':False]['text':' Now run time forward and make sure that the node becomes primary again when the stepdown','line_number':2652,'multiline':False]['text':' period ends.','line_number':2653,'multiline':False]['text':' Check that the numFreezeTimeoutsCalled and the numFreezeTimeoutsSuccessful election metrics','line_number':2660,'multiline':False]['text':' have been incremented, and that none of the metrics that track the number of elections called','line_number':2661,'multiline':False]['text':' or successful for other reasons has been incremented. When a stepdown timeout expires in a','line_number':2662,'multiline':False]['text':' single node replica set, an election is called for the same reason as is used when a freeze','line_number':2663,'multiline':False]['text':' timeout expires.','line_number':2664,'multiline':False]['text':' Must do this before inspecting the topocoord','line_number':2693,'multiline':False]['text':' Go into maintenance mode.','line_number':2699,'multiline':False]['text':' Now run time forward and make sure that the node goes into RECOVERING again when the stepdown','line_number':2706,'multiline':False]['text':' period ends.','line_number':2707,'multiline':False]['text':' No secondary is caught up','line_number':2719,'multiline':False]['text':' Try to stepDown but time out because no secondaries are caught up.','line_number':2730,'multiline':False]['text':' Now use "force" to force it to step down even though no one is caught up','line_number':2737,'multiline':False]['text':' No secondary is caught up','line_number':2757,'multiline':False]['text':' Step down where the secondary actually has to catch up before the stepDown can succeed.','line_number':2768,'multiline':False]['text':' No secondary is caught up','line_number':2782,'multiline':False]['text':' Step down where the secondary actually has to catch up before the stepDown can succeed.','line_number':2791,'multiline':False]['text':' Advance the clock by two seconds to allow for a round of heartbeats to be sent. The','line_number':2794,'multiline':False]['text':' secondary will not appear to be caught up.','line_number':2795,'multiline':False]['text':' No secondary is caught up','line_number':2830,'multiline':False]['text':' stepDown where the secondary actually has to catch up before the stepDown can succeed.','line_number':2841,'multiline':False]['text':' No secondary is caught up','line_number':2852,'multiline':False]['text':' Step down where the secondary actually has to catch up before the stepDown can succeed.','line_number':2863,'multiline':False]['text':' We should still be primary at this point','line_number':2866,'multiline':False]['text':' Now while the first stepdown request is waiting for secondaries to catch up, attempt','line_number':2869,'multiline':False]['text':' another stepdown request and ensure it fails.','line_number':2870,'multiline':False]['text':' Now ensure that the original stepdown command can still succeed.','line_number':2876,'multiline':False]['text':' Test that if a stepdown command is blocked waiting for secondaries to catch up when an','line_number':2883,'multiline':False]['text':' unconditional stepdown happens, the stepdown command fails.','line_number':2884,'multiline':False]['text':' No secondary is caught up','line_number':2889,'multiline':False]['text':' Start a stepdown command that needs to wait for secondaries to catch up.','line_number':2900,'multiline':False]['text':' We should still be primary at this point','line_number':2903,'multiline':False]['text':' Now while the first stepdown request is waiting for secondaries to catch up, force an','line_number':2906,'multiline':False]['text':' unconditional stepdown.','line_number':2907,'multiline':False]['text':' Ensure that the stepdown command failed.','line_number':2912,'multiline':False]['text':' Test that if a stepdown command is blocked waiting for secondaries to catch up when an','line_number':2916,'multiline':False]['text':' unconditional stepdown happens, and then is interrupted, we step back up.','line_number':2917,'multiline':False]['text':' No secondary is caught up','line_number':2922,'multiline':False]['text':' Start a stepdown command that needs to wait for secondaries to catch up.','line_number':2933,'multiline':False]['text':' We should still be primary at this point','line_number':2936,'multiline':False]['text':' We should not indicate that we are a writable primary, nor that we are secondary.','line_number':2939,'multiline':False]['text':' Interrupt the ongoing stepdown command.','line_number':2945,'multiline':False]['text':' Ensure that the stepdown command failed.','line_number':2951,'multiline':False]['text':' We should now report that we are a writable primary.','line_number':2955,'multiline':False]['text':' This is the important check, that we stepped back up when aborting the stepdown command','line_number':2960,'multiline':False]['text':' attempt.','line_number':2961,'multiline':False]['text':' Test that if a stepdown command is blocked waiting for secondaries to catch up when an','line_number':2966,'multiline':False]['text':' unconditional stepdown happens, and then is interrupted, we stay stepped down, even though','line_number':2967,'multiline':False]['text':' normally if we were just interrupted we would step back up.','line_number':2968,'multiline':False]['text':' No secondary is caught up','line_number':2973,'multiline':False]['text':' Start a stepdown command that needs to wait for secondaries to catch up.','line_number':2984,'multiline':False]['text':' We should still be primary at this point','line_number':2987,'multiline':False]['text':' We should not indicate that we are a writable primary, nor that we are secondary.','line_number':2990,'multiline':False]['text':' Interrupt the ongoing stepdown command.','line_number':2997,'multiline':False]['text':' Now while the first stepdown request is waiting for secondaries to catch up, force an','line_number':3003,'multiline':False]['text':' unconditional stepdown.','line_number':3004,'multiline':False]['text':' Ensure that the stepdown command failed.','line_number':3008,'multiline':False]['text':' Which code is returned is racy.','line_number':3011,'multiline':False]['text':' We should still be indicating that we are not a writable primary.','line_number':3016,'multiline':False]['text':' This is the important check, that we didn't accidentally step back up when aborting the','line_number':3020,'multiline':False]['text':' stepdown command attempt.','line_number':3021,'multiline':False]['text':' isReplSet() returns true if the set name was supplied.','line_number':3033,'multiline':False]['text':' Check that the proper BSON is generated for the replSetUpdatePositionCommand','line_number':3073,'multiline':False]['text':' Make sure we saw all 4 nodes','line_number':3121,'multiline':False]['text':' Can't unset maintenance mode if it was never set to begin with.','line_number':3143,'multiline':False]['text':' valid set','line_number':3168,'multiline':False]['text':' We must take the RSTL in mode X before transitioning to RS_ROLLBACK.','line_number':3172,'multiline':False]['text':' If we go into rollback while in maintenance mode, our state changes to RS_ROLLBACK.','line_number':3175,'multiline':False]['text':' When we go back to SECONDARY, we still observe RECOVERING because of maintenance mode.','line_number':3179,'multiline':False]['text':' Can set multiple times','line_number':3203,'multiline':False]['text':' Need to unset the number of times you set.','line_number':3207,'multiline':False]['text':' third one fails b/c we only set two times.','line_number':3211,'multiline':False]['text':' Unsetting maintenance mode changes our state to secondary if maintenance mode was','line_number':3213,'multiline':False]['text':' the only thing keeping us out of it.','line_number':3214,'multiline':False]['text':' We must take the RSTL in mode X before transitioning to RS_ROLLBACK.','line_number':3234,'multiline':False]['text':' From rollback, entering and exiting maintenance mode doesn't change perceived','line_number':3238,'multiline':False]['text':' state.','line_number':3239,'multiline':False]['text':' Rollback is sticky even if entered while in maintenance mode.','line_number':3247,'multiline':False]['text':' Can't modify maintenance mode when PRIMARY','line_number':3275,'multiline':False]['text':' Step down from primary.','line_number':3284,'multiline':False]['text':' TODO this election shouldn't have to happen.','line_number':3311,'multiline':False]['text':' Step down from primary.','line_number':3317,'multiline':False]['text':' Can't modify maintenance mode when running for election (before and after dry run).','line_number':3323,'multiline':False]['text':' We must take the RSTL in mode X before transitioning to RS_ROLLBACK.','line_number':3350,'multiline':False]['text':' This cancels the actual election.','line_number':3353,'multiline':False]['text':' We do not need to respond to any pending network operations because setFollowerMode() will','line_number':3354,'multiline':False]['text':' cancel the vote requester.','line_number':3355,'multiline':False]['text':' Ensure updating applied does not affect the results for getHostsWritten durably.','line_number':3385,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':3455,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':3456,'multiline':False]['text':' Assert that on timeout, the returned HelloResponse contains the same TopologyVersion.','line_number':3461,'multiline':False]['text':' Set the network clock to the timeout deadline of awaitHelloResponse.','line_number':3466,'multiline':False]['text':' Get the HelloResponse for a request that contains a different process ID. This','line_number':3492,'multiline':False]['text':' should return immediately in all cases instead of waiting for a topology change.','line_number':3493,'multiline':False]['text':' Test receiving a TopologyVersion with a different process ID but the same counter.','line_number':3497,'multiline':False]['text':' Increment the counter of topologyVersionWithDifferentProcessId.','line_number':3507,'multiline':False]['text':' Test receiving a TopologyVersion with a different process ID and a greater counter.','line_number':3513,'multiline':False]['text':' Update the TopologyVersion in the TopologyCoordinator.','line_number':3539,'multiline':False]['text':' Get the HelloResponse for a request that contains a stale TopologyVersion. This should','line_number':3544,'multiline':False]['text':' return immediately instead of blocking and waiting for a topology change.','line_number':3545,'multiline':False]['text':' We should fail immediately if trying to build an HelloResponse for a request with a','line_number':3573,'multiline':False]['text':' greater TopologyVersion.','line_number':3574,'multiline':False]['text':' Become primary.','line_number':3594,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':3610,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':3611,'multiline':False]['text':' A topology change should increment the TopologyVersion counter.','line_number':3615,'multiline':False]['text':' We expect the server to increment the TopologyVersion and respond to waiting hellos once','line_number':3624,'multiline':False]['text':' we disable writes on the node that is stepping down from primary. At this time, the','line_number':3625,'multiline':False]['text':' 'isWritablePrimary' response field will be false but the node will have yet to transition','line_number':3626,'multiline':False]['text':' to secondary.','line_number':3627,'multiline':False]['text':' The server TopologyVersion will increment a second time once the old primary has','line_number':3632,'multiline':False]['text':' completed its transition to secondary. A hello request with','line_number':3633,'multiline':False]['text':' 'topologyVersionAfterDisablingWrites' should get a response immediately since that','line_number':3634,'multiline':False]['text':' TopologyVersion is now stale.','line_number':3635,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before triggering a stepdown.','line_number':3648,'multiline':False]['text':' A topology change should cause the server to respond to the waiting HelloResponse.','line_number':3650,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before entering quiesce mode.','line_number':3684,'multiline':False]['text':' Check that the cached topologyVersion counter was updated correctly.','line_number':3689,'multiline':False]['text':' Ensure that waiting for a topology change timed out before entering quiesce mode.','line_number':3730,'multiline':False]['text':' Advance the clock so that pauseWhileSet() will wake up.','line_number':3735,'multiline':False]['text':' Use a novel error code to test this functionality.','line_number':3762,'multiline':False]['text':' Observe that the counter has been incremented.','line_number':3787,'multiline':False]['text':' Advance the clock so that pauseWhileSet() will wake up.','line_number':3792,'multiline':False]['text':' Make sure we still decremented the counter.','line_number':3801,'multiline':False]['text':' Check that the cached topologyVersion counter was updated correctly.','line_number':3820,'multiline':False]['text':' Stale topology version','line_number':3828,'multiline':False]['text':' Current topology version','line_number':3834,'multiline':False]['text':' Different process ID','line_number':3841,'multiline':False]['text':' No topology version','line_number':3851,'multiline':False]['text':' Check that status includes an extraErrorInfo class. Since we did not advance the clock, we','line_number':3857,'multiline':False]['text':' should still have the full quiesceTime as our remaining quiesceTime.','line_number':3858,'multiline':False]['text':' Check that the cached topologyVersion counter was updated correctly.','line_number':3885,'multiline':False]['text':' Advance the clock halfway to the quiesce deadline.','line_number':3895,'multiline':False]['text':' Check that status includes an extraErrorInfo class. Since we advanced the clock halfway to','line_number':3899,'multiline':False]['text':' the quiesce deadline, we should have half of the total quiesceTime left, 500 ms.','line_number':3900,'multiline':False]['text':' Do not enter quiesce mode in state RS_STARTUP.','line_number':3915,'multiline':False]['text':' Do not enter quiesce mode in state RS_STARTUP2.','line_number':3930,'multiline':False]['text':' Become primary.','line_number':3934,'multiline':False]['text':' Do not enter quiesce mode in state RS_PRIMARY.','line_number':3941,'multiline':False]['text':' Enter quiesce mode. Test that we increment the topology version.','line_number':3960,'multiline':False]['text':' Remove the node.','line_number':3967,'multiline':False]['text':' Wait for the node to be removed. Test that we increment the topology version.','line_number':3993,'multiline':False]['text':' Test hello requests.','line_number':4001,'multiline':False]['text':' Stale topology version','line_number':4007,'multiline':False]['text':' Current topology version','line_number':4013,'multiline':False]['text':' Different process ID','line_number':4019,'multiline':False]['text':' No topology version','line_number':4029,'multiline':False]['text':' Become primary.','line_number':4058,'multiline':False]['text':' When no horizon is specified, the hello response uses the default horizon.','line_number':4067,'multiline':False]['text':' The hello response respects the requested horizon.','line_number':4085,'multiline':False]['text':' Become primary.','line_number':4119,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':4134,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':4135,'multiline':False]['text':' Ensure that the hello request is waiting before doing a reconfig.','line_number':4144,'multiline':False]['text':' Use force to bypass the oplog commitment check, which we're not worried about testing here.','line_number':4148,'multiline':False]['text':' Do a reconfig that changes the SplitHorizon and also adds a third node. This should respond','line_number':4150,'multiline':False]['text':' to all waiting hello requests with an error.','line_number':4151,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before initiating.','line_number':4242,'multiline':False]['text':' A request with a future TopologyVersion should error.','line_number':4266,'multiline':False]['text':' A request with a stale TopologyVersion should return immediately with the current server','line_number':4275,'multiline':False]['text':' TopologyVersion.','line_number':4276,'multiline':False]['text':' A request with a different processId should return immediately with the server processId.','line_number':4288,'multiline':False]['text':' A request with a future TopologyVersion but different processId should still return','line_number':4302,'multiline':False]['text':' immediately.','line_number':4303,'multiline':False]['text':' Send a non-awaitable hello.','line_number':4329,'multiline':False]['text':' Ensure that the hello request has started waiting before initiating.','line_number':4347,'multiline':False]['text':' Call replSetInitiate with no horizon configured. This should return an error to the hello','line_number':4350,'multiline':False]['text':' request that is currently waiting on a horizonParam that doesn't exit in the config.','line_number':4351,'multiline':False]['text':' Call replSetInitiate with a horizon configured.','line_number':4399,'multiline':False]['text':' Become primary.','line_number':4433,'multiline':False]['text':' Set the network clock to the timeout deadline of awaitHelloResponse.','line_number':4460,'multiline':False]['text':' Do a reconfig that removes the configured horizon.','line_number':4471,'multiline':False]['text':' Sending a hello request with a removed horizon should return the default horizon.','line_number':4487,'multiline':False]['text':' Set the network clock to the timeout deadline of awaitHelloResponse.','line_number':4501,'multiline':False]['text':' Become primary.','line_number':4520,'multiline':False]['text':' Define a new horizon to be configured later.','line_number':4531,'multiline':False]['text':' The hello response should use the default horizon since no horizon has been','line_number':4537,'multiline':False]['text':' configured.','line_number':4538,'multiline':False]['text':' Set the network clock to the timeout deadline of awaitHelloResponse.','line_number':4550,'multiline':False]['text':' Do a reconfig that adds a new horizon.','line_number':4561,'multiline':False]['text':' The hello response should now use the newly configured horizon.','line_number':4582,'multiline':False]['text':' Set the network clock to the timeout deadline of awaitHelloResponse.','line_number':4595,'multiline':False]['text':' Receive a config that excludes node1 and with node2 having a configured horizon.','line_number':4627,'multiline':False]['text':' node1 no longer exists in the replica set config.','line_number':4647,'multiline':False]['text':' Non-awaitable hello requests should return immediately.','line_number':4657,'multiline':False]['text':' A request with a future TopologyVersion should error.','line_number':4663,'multiline':False]['text':' A request with a stale TopologyVersion should return immediately.','line_number':4672,'multiline':False]['text':' A request with a different processId should return immediately with the server processId.','line_number':4683,'multiline':False]['text':' A request with a future TopologyVersion but different processId should still return','line_number':4697,'multiline':False]['text':' immediately.','line_number':4698,'multiline':False]['text':' A request with an equal TopologyVersion should wait and timeout once the deadline is reached.','line_number':4711,'multiline':False]['text':' Sending a hello request on a removed node should wait.','line_number':4714,'multiline':False]['text':' Set the network clock to a time before the deadline of the hello request. The request','line_number':4727,'multiline':False]['text':' should still be waiting.','line_number':4728,'multiline':False]['text':' Set the network clock to the deadline.','line_number':4733,'multiline':False]['text':' The hello response should indicate that the node does not have a valid replica set','line_number':4768,'multiline':False]['text':' config.','line_number':4769,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before triggering a reconfig.','line_number':4779,'multiline':False]['text':' Receive a config that excludes node1 and with node2 having a configured horizon.','line_number':4789,'multiline':False]['text':' node1 no longer exists in the replica set config.','line_number':4809,'multiline':False]['text':' Wait for the node to be readded to the set. This should return an error.','line_number':4818,'multiline':False]['text':' Add node1 back into the replica set and configure a new horizon.','line_number':4829,'multiline':False]['text':' Sending a hello on the rejoined node should return the appropriate horizon view.','line_number':4856,'multiline':False]['text':' Set the network clock to the timeout deadline of awaitHelloResponse.','line_number':4868,'multiline':False]['text':' Become primary.','line_number':4889,'multiline':False]['text':' Wait for a hello with deadline past the election timeout.','line_number':4896,'multiline':False]['text':' A topology change should increment the TopologyVersion counter.','line_number':4904,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':4912,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':4913,'multiline':False]['text':' We expect two topology changes, one when we attempt to obtain the RSTL (when we report','line_number':4915,'multiline':False]['text':' ourselves as a non-writable primary), and one when we succeed in stepping down.','line_number':4916,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before triggering an election timeout.','line_number':4939,'multiline':False]['text':' Primary steps down after not receiving a response within the election timeout.','line_number':4942,'multiline':False]['text':' The config does not have a "term" field, so step-up will not increment the config term','line_number':4950,'multiline':False]['text':' via reconfig. As a result, step-up only triggers two topology changes.','line_number':4951,'multiline':False]['text':' Become secondary.','line_number':4964,'multiline':False]['text':' A topology change should increment the TopologyVersion counter.','line_number':4975,'multiline':False]['text':' Calling hello without a TopologyVersion field should return immediately.','line_number':4979,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':4990,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':4991,'multiline':False]['text':' We expect the server to increment the TopologyVersion and respond to waiting hellos','line_number':5000,'multiline':False]['text':' once an election is won even if we have yet to signal drain completion.','line_number':5001,'multiline':False]['text':' The server TopologyVersion will increment again once we exit drain mode.','line_number':5008,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before finishing the election.','line_number':5024,'multiline':False]['text':' The config has a "term" field, so step-up will increment the config term','line_number':5041,'multiline':False]['text':' via reconfig. As a result, step-up triggers three topology changes.','line_number':5042,'multiline':False]['text':' Become secondary.','line_number':5055,'multiline':False]['text':' A topology change should increment the TopologyVersion counter.','line_number':5066,'multiline':False]['text':' Calling hello without a TopologyVersion field should return immediately.','line_number':5070,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':5084,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':5085,'multiline':False]['text':' We expect the server to increment the TopologyVersion and respond to waiting hellos','line_number':5094,'multiline':False]['text':' once an election is won even if we have yet to signal drain completion.','line_number':5095,'multiline':False]['text':' The server TopologyVersion will increment once we finish reconfig.','line_number':5102,'multiline':False]['text':' The server TopologyVersion will increment again once we exit drain mode.','line_number':5117,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before finishing the election.','line_number':5133,'multiline':False]['text':'useLegacyResponseFields','line_number':5156,'multiline':True]['text':' TODO(spencer): test that response includes current primary when there is one.','line_number':5200,'multiline':False]['text':' Must not report ourselves as a writable primary while we're in shutdown.','line_number':5284,'multiline':False]['text':' shutdownTimeElapsedBuilder ','line_number':5297,'multiline':True]['text':' receive updatePosition containing ourself, should not process the update for self','line_number':5338,'multiline':False]['text':' receive updatePosition with a different config version, 3','line_number':5382,'multiline':False]['text':' receive updatePosition with nonexistent member id','line_number':5433,'multiline':False]['text':' receive a good update position','line_number':5485,'multiline':False]['text':' Become primary.','line_number':5553,'multiline':False]['text':' A topology change should increment the TopologyVersion counter.','line_number':5565,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':5573,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':5574,'multiline':False]['text':' Ensure the HelloResponse contains the newly added node.','line_number':5582,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before triggering a reconfig.','line_number':5588,'multiline':False]['text':' Do a reconfig to add a third node to the replica set. A reconfig should cause the server to','line_number':5591,'multiline':False]['text':' respond to the waiting HelloResponse.','line_number':5592,'multiline':False]['text':' force ','line_number':5595,'multiline':True]['text':' Turn off readconcern majority support, and snapshots.','line_number':5617,'multiline':False]['text':' 3 nodes waiting for time','line_number':5628,'multiline':False]['text':' reconfig','line_number':5645,'multiline':False]['text':' satisfy write concern','line_number':5653,'multiline':False]['text':' Become secondary.','line_number':5705,'multiline':False]['text':' A topology change should increment the TopologyVersion counter.','line_number':5716,'multiline':False]['text':' awaitHelloResponse blocks and waits on a future when the request TopologyVersion equals','line_number':5724,'multiline':False]['text':' the current TopologyVersion of the server.','line_number':5725,'multiline':False]['text':' Ensure the HelloResponse no longer contains the removed node.','line_number':5733,'multiline':False]['text':' Ensure that awaitHelloResponse() is called before triggering a reconfig.','line_number':5740,'multiline':False]['text':' Do a reconfig to remove a node from the replica set. A reconfig should cause the server to','line_number':5743,'multiline':False]['text':' respond to the waiting hello request.','line_number':5744,'multiline':False]['text':' force ','line_number':5747,'multiline':True]['text':' 3 nodes waiting for time','line_number':5777,'multiline':False]['text':' reconfig to fewer nodes','line_number':5787,'multiline':False]['text':' force ','line_number':5790,'multiline':True]['text':' writeconcern feasability should be reevaluated and an error should be returned','line_number':5797,'multiline':False]['text':' Turn off readconcern majority support, and snapshots.','line_number':5825,'multiline':False]['text':' majority nodes waiting for time','line_number':5842,'multiline':False]['text':' demonstrate that majority cannot currently be satisfied','line_number':5854,'multiline':False]['text':' reconfig to three nodes','line_number':5863,'multiline':False]['text':' force ','line_number':5866,'multiline':True]['text':' writeconcern feasability should be reevaluated and be satisfied','line_number':5872,'multiline':False]['text':' Test that we can satisfy majority write concern can only be','line_number':5880,'multiline':False]['text':' satisfied by voting data-bearing members.','line_number':5881,'multiline':False]['text':' this member does not vote and as a result should not count towards write concern','line_number':5924,'multiline':False]['text':' Test that the commit level advances properly.','line_number':5937,'multiline':False]['text':' Set a new, later OpTime.','line_number':5978,'multiline':False]['text':' Reached majority of voting nodes with newTime.','line_number':5988,'multiline':False]['text':'*
 * Tests to ensure that ReplicationCoordinator correctly calculates and updates the stable
 * optime.
 ','line_number':5995,'multiline':True]['text':'*
     * Test that 'setMyLastAppliedOpTime' sets the stable timestamp properly for the storage engine.
     ','line_number':6003,'multiline':True]['text':' Advance the commit point so it's higher than all the others.','line_number':6028,'multiline':False]['text':' Check that the stable timestamp is not updated if the all durable timestamp is behind.','line_number':6032,'multiline':False]['text':' Check that the stable timestamp is updated for the storage engine when we set the applied','line_number':6039,'multiline':False]['text':' optime.','line_number':6040,'multiline':False]['text':' Check that timestamp cleanup occurs.','line_number':6045,'multiline':False]['text':'*
     * Test that 'advanceCommitPoint' sets the stable optime for the storage engine.
     ','line_number':6053,'multiline':True]['text':' Add three stable optime candidates.','line_number':6078,'multiline':False]['text':' Set a commit point and check the stable optime.','line_number':6083,'multiline':False]['text':' Check that the stable timestamp is not updated if the all durable timestamp is behind.','line_number':6090,'multiline':False]['text':' Check that the stable timestamp is updated when we advance the commit point.','line_number':6099,'multiline':False]['text':' TODO(dannenberg): revisit these after talking with mathias (redundant with other set?)','line_number':6226,'multiline':False]['text':' Not guaranteed to be scheduled after waitUntil blocks...','line_number':6326,'multiline':False]['text':' Not guaranteed to be scheduled after waitUntil blocks...','line_number':6352,'multiline':False]['text':' A valid majority read concern level should return immediately.','line_number':6374,'multiline':False]['text':' Ensure that we do not process ReplSetMetadata when ConfigVersions do not match.','line_number':6381,'multiline':False]['text':' lower configVersion','line_number':6397,'multiline':False]['text':' term should advance','line_number':6407,'multiline':False]['text':' higher configVersion','line_number':6410,'multiline':False]['text':' term should advance','line_number':6420,'multiline':False]['text':' Ensure that LastCommittedOpTime updates when a newer OpTime comes in via ReplSetMetadata,','line_number':6425,'multiline':False]['text':' but not if the OpTime is older than the current LastCommittedOpTime.','line_number':6426,'multiline':False]['text':' higher OpTime, should change','line_number':6452,'multiline':False]['text':' lower OpTime, should not change','line_number':6458,'multiline':False]['text':' Ensure that the term is updated if and only if the term is greater than our current term.','line_number':6466,'multiline':False]['text':' Ensure that currentPrimaryIndex is never altered by ReplSetMetadata.','line_number':6467,'multiline':False]['text':' Higher term, should change.','line_number':6487,'multiline':False]['text':' Lower term, should not change.','line_number':6500,'multiline':False]['text':' Same term, should not change.','line_number':6513,'multiline':False]['text':' Metadata docs include isPrimary: true, but we do NOT update currentPrimaryIndex.','line_number':6524,'multiline':False]['text':' Ensure that the metadata is processed if it is contained in a heartbeat response.','line_number':6531,'multiline':False]['text':' Higher term - should update term but not last committed optime.','line_number':6551,'multiline':False]['text':' The commit point can be set to lastApplied, even though lastApplied is in a lower term.','line_number':6606,'multiline':False]['text':' pass dummy Date_t to avoid advanceCommitPoint invariant','line_number':6633,'multiline':False]['text':' Ensure that the metadata is processed if it is contained in a heartbeat response.','line_number':6669,'multiline':False]['text':' Higher term - should update term and lastCommittedOpTime since arbiters learn of the','line_number':6689,'multiline':False]['text':' commit point via heartbeats.','line_number':6690,'multiline':False]['text':' Black hole heartbeat request scheduled after transitioning to SECONDARY.','line_number':6746,'multiline':False]['text':' Advance simulator clock to some time before the first scheduled election.','line_number':6757,'multiline':False]['text':' We must take the RSTL in mode X before transitioning to RS_ROLLBACK.','line_number':6787,'multiline':False]['text':' Respond to node1's heartbeat command with a config that excludes node1.','line_number':6849,'multiline':False]['text':' Respond to node1's heartbeat command to indicate that node2 is PRIMARY.','line_number':6905,'multiline':False]['text':' Heartbeat response is scheduled with a delay so that we can be sure that','line_number':6914,'multiline':False]['text':' the election was rescheduled due to the heartbeat response.','line_number':6915,'multiline':False]['text':' Disable randomized election timeouts so that we know exactly when an election will be','line_number':6939,'multiline':False]['text':' scheduled.','line_number':6940,'multiline':False]['text':' Respond to node1's heartbeat command to indicate that node2 is PRIMARY.','line_number':6958,'multiline':False]['text':' Heartbeat response is scheduled with a delay so that we can be sure that','line_number':6964,'multiline':False]['text':' the election was rescheduled due to the heartbeat response.','line_number':6965,'multiline':False]['text':' Respond to node1's heartbeat command to indicate that node2 is PRIMARY.','line_number':7006,'multiline':False]['text':' Heartbeat response is scheduled with a delay so that we can be sure that','line_number':7009,'multiline':False]['text':' the election was rescheduled due to the heartbeat response.','line_number':7010,'multiline':False]['text':' Election timeout should remain unchanged.','line_number':7018,'multiline':False]['text':' Log all the election messages.','line_number':7023,'multiline':False]['text':' heartbeatTimeoutSecs is made large so we can advance the clock without worrying about','line_number':7027,'multiline':False]['text':' additional heartbeats.','line_number':7028,'multiline':False]['text':' Setting mode to secondary should schedule the election timeout.','line_number':7041,'multiline':False]['text':' Scheduling again should produce the "rescheduled", not the "scheduled", message .','line_number':7048,'multiline':False]['text':' Black hole heartbeat request scheduled after transitioning to SECONDARY.','line_number':7056,'multiline':False]['text':' Advance simulator clock to some time after the first scheduled election.','line_number':7067,'multiline':False]['text':' The election should have scheduled (not rescheduled) another timeout.','line_number':7078,'multiline':False]['text':' We should not see this reschedule because it should be at log level 5.','line_number':7090,'multiline':False]['text':' We should see this reschedule at level 4 because it has been over 1 sec since we logged','line_number':7101,'multiline':False]['text':' at level 4.','line_number':7102,'multiline':False]['text':' Since in pv1, oplog entries are ordered by non-decreasing','line_number':7203,'multiline':False]['text':' term and strictly increasing timestamp, it leads to invariant failure.','line_number':7204,'multiline':False]['text':' Since in pv1, oplog entries are ordered by non-decreasing','line_number':7225,'multiline':False]['text':' term and strictly increasing timestamp, it leads to invariant failure.','line_number':7226,'multiline':False]['text':' Since in pv1, oplog entries are ordered by non-decreasing','line_number':7247,'multiline':False]['text':' term and strictly increasing timestamp, it leads to invariant failure.','line_number':7248,'multiline':False]['text':' Since in pv1, oplog entries are ordered by non-decreasing','line_number':7269,'multiline':False]['text':' term and strictly increasing timestamp, it leads to invariant failure.','line_number':7270,'multiline':False]['text':' Check that we have two entries in our UpdatePosition (us and node 1).','line_number':7296,'multiline':False]['text':' Advance the clock far enough to cause the other node to be marked as DOWN.','line_number':7314,'multiline':False]['text':' Check there is one entry in our UpdatePosition, since we shouldn't forward for a','line_number':7326,'multiline':False]['text':' DOWN node.','line_number':7327,'multiline':False]['text':' Set last committed optime via metadata. Pass dummy Date_t to avoid advanceCommitPoint','line_number':7369,'multiline':False]['text':' invariant.','line_number':7370,'multiline':False]['text':' Pass dummy Date_t to avoid advanceCommitPoint invariant.','line_number':7380,'multiline':False]['text':' Receive notification that every node is up.','line_number':7421,'multiline':False]['text':' Become PRIMARY.','line_number':7461,'multiline':False]['text':' Keep two nodes alive via UpdatePosition.','line_number':7464,'multiline':False]['text':' Confirm that the node remains PRIMARY after the other two nodes are marked DOWN.','line_number':7491,'multiline':False]['text':' Keep the same two nodes alive via v1 heartbeat.','line_number':7496,'multiline':False]['text':' Confirm that the node remains PRIMARY after the timeout from the UpdatePosition expires.','line_number':7509,'multiline':False]['text':' Keep one node alive via two methods (UpdatePosition and requestHeartbeat).','line_number':7521,'multiline':False]['text':' Confirm that the node relinquishes PRIMARY after only one node is left UP.','line_number':7543,'multiline':False]['text':' Single node cluster - this node should start election on setFollowerMode() completion.','line_number':7574,'multiline':False]['text':' Successful dry run election increases term.','line_number':7577,'multiline':False]['text':' Zero timeout is fine.','line_number':7592,'multiline':False]['text':' Make sure it can be interrupted.','line_number':7599,'multiline':False]['text':' This is not a dry-run election so the last vote should include the new term and candidate.','line_number':7732,'multiline':False]['text':' This is a dry-run election so the last vote should not be updated with the new term and','line_number':7775,'multiline':False]['text':' candidate.','line_number':7776,'multiline':False]['text':' Set up a 2-node replica set config.','line_number':7782,'multiline':False]['text':' Get our current term, as primary.','line_number':7799,'multiline':False]['text':' term of new candidate.','line_number':7809,'multiline':False]['text':' Simulate a failure to write the 'last vote' document. The specific error code isn't','line_number':7814,'multiline':False]['text':' important.','line_number':7815,'multiline':False]['text':' Make sure the vote request fails. If an error is returned, the filled out response is','line_number':7819,'multiline':False]['text':' invalid, so we do not check its contents.','line_number':7820,'multiline':False]['text':' The last vote doc should store the vote of the first election, not the one we failed to cast','line_number':7826,'multiline':False]['text':' our vote in.','line_number':7827,'multiline':False]['text':' Set up a 2-node replica set config.','line_number':7833,'multiline':False]['text':' Get our current term, as primary.','line_number':7850,'multiline':False]['text':' term of new candidate.','line_number':7860,'multiline':False]['text':' A 1-node set. This node is not a member.','line_number':7875,'multiline':False]['text':' Vote was not recorded.','line_number':7899,'multiline':False]['text':' Set up a 5-node replica set config.','line_number':7905,'multiline':False]['text':' Quorum contains a node which is not part of the replica set config.','line_number':7956,'multiline':False]['text':' Quorum contains two nodes from same data center.','line_number':7981,'multiline':False]['text':' Quorum contains two nodes from different data center.','line_number':8007,'multiline':False]['text':' Quorum contains majority of voting data bearing nodes.','line_number':8033,'multiline':False]['text':' Quorum contains all voting data bearing nodes.','line_number':8059,'multiline':False]['text':' Quorum contains all data bearing nodes.','line_number':8087,'multiline':False]['text':' Quorum contains arbiter.','line_number':8116,'multiline':False]['text':' Set up a 2-node replica set config.','line_number':8145,'multiline':False]['text':' Invalid candidateIndex values.','line_number':8164,'multiline':False]['text':' Set up a three-node replica set with chainingAllowed set to true.','line_number':8183,'multiline':False]['text':' Set the primary's ping to be longer than the other secondary's ping.','line_number':8213,'multiline':False]['text':' We must send two heartbeats per node, so that we satisfy the 2N requirement before choosing a','line_number':8217,'multiline':False]['text':' new sync source.','line_number':8218,'multiline':False]['text':' targetIndex ','line_number':8222,'multiline':True]['text':' targetIndex ','line_number':8225,'multiline':True]['text':' We expect to sync from the closest node, since our read preference should be set to','line_number':8228,'multiline':False]['text':' ReadPreference::Nearest.','line_number':8229,'multiline':False]['text':' Set up a three-node replica set with chainingAllowed set to false.','line_number':8234,'multiline':False]['text':' Set the primary's ping to be longer than the other secondary's ping.','line_number':8264,'multiline':False]['text':' We must send two heartbeats per node, so that we satisfy the 2N requirement before choosing a','line_number':8268,'multiline':False]['text':' new sync source.','line_number':8269,'multiline':False]['text':' targetIndex ','line_number':8273,'multiline':True]['text':' targetIndex ','line_number':8276,'multiline':True]['text':' We expect to sync from the primary even though it is farther away, since our read preference','line_number':8279,'multiline':False]['text':' should be set to ReadPreference::PrimaryOnly.','line_number':8280,'multiline':False]['text':' Set up a three-node replica set with chainingAllowed set to true.','line_number':8285,'multiline':False]['text':' Get elected primary.','line_number':8303,'multiline':False]['text':' We must send two heartbeats per node, so that we satisfy the 2N requirement before choosing a','line_number':8327,'multiline':False]['text':' new sync source.','line_number':8328,'multiline':False]['text':' targetIndex ','line_number':8331,'multiline':True]['text':' targetIndex ','line_number':8333,'multiline':True]['text':' We expect to sync from the closest node, since our read preference should be set to','line_number':8336,'multiline':False]['text':' ReadPreference::Nearest.','line_number':8337,'multiline':False]['text':' Node 1 is ahead, nodes 2 and 3 a bit behind.','line_number':8362,'multiline':False]['text':' Node 3 should not have a durable optime/walltime as they are an arbiter.','line_number':8363,'multiline':False]['text':' Receive updates on behalf of nodes 2 and 3 from node 2.','line_number':8374,'multiline':False]['text':' Node 3 will be reported as caught up both in lastApplied and lastDurable, but we','line_number':8375,'multiline':False]['text':' must ignore the lastDurable part as null is the only valid value for arbiters.','line_number':8376,'multiline':False]['text':' Make sure node 2 is fully caught up but node 3 has null durable optime/walltime.','line_number':8401,'multiline':False]['text':' Node 1 is ahead, nodes 2 is a bit behind.','line_number':8448,'multiline':False]['text':' Node 2 should not have a durable optime/walltime as they are an arbiter.','line_number':8449,'multiline':False]['text':' targetIndex ','line_number':8469,'multiline':True]['text':' ping ','line_number':8469,'multiline':True]['text':' TODO(schwerin): Unit test election id updating','line_number':8520,'multiline':False]['text':' namespace','line_number':8521,'multiline':False]['text':' namespace repl','line_number':8522,'multiline':False]['text':' namespace mongo','line_number':8523,'multiline':False]