['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Replica set aware service that runs both on the primary and secondaries. It orchestrates the
 * copying of data files from donor, import those files, and notifies the primary when the import is
 * successful.
 ','line_number':59,'multiline':True]['text':' Explicit State enum ordering defined here because we rely on comparison','line_number':80,'multiline':False]['text':' operators for state checking in various TenantFileImporterService methods.','line_number':81,'multiline':False]['text':'*
     * Begins the process of copying and importing files for a given migration.
     ','line_number':109,'multiline':True]['text':'*
     * Called for each file to be copied for a given migration.
     ','line_number':114,'multiline':True]['text':'*
     * Called after all files have been copied for a given migration.
     ','line_number':119,'multiline':True]['text':'*
     * Interrupts an in-progress migration with the provided migration id.
     ','line_number':124,'multiline':True]['text':'*
     * Resets the interrupted migration for the given migrationId by calling
     * _resetMigrationHandle(). See _resetMigrationHandle() for detailed comments.
     *
     * Throws an exception if called before the migration is interrupted.
     ','line_number':129,'multiline':True]['text':'*
     * Causes any in-progress migration be interrupted.
     ','line_number':137,'multiline':True]['text':'*
     * Returns a Future that will be resolved when the collection import task completes for the
     * given migration id. Return boost::none if no active migration matches the provided migration
     * id.
     ','line_number':142,'multiline':True]['text':'*
     * Checks if there is an active migration with the given migration ID.
     ','line_number':149,'multiline':True]['text':'*
     * Returns the migration stats for the given migrationId.
     * If no migrationId is provided, it returns the stats of an ongoing migration, if any.
     ','line_number':154,'multiline':True]['text':' Prevents a new migration from starting up during or after shutdown.','line_number':166,'multiline':False]['text':'*
     * Set the function used to create a donor client connection. Used for testing.
     ','line_number':194,'multiline':True]['text':'*
     * Returns the migrationId.
     ','line_number':201,'multiline':True]['text':'*
     * Returns the migration state.
     ','line_number':208,'multiline':True]['text':'*
     * A worker function that waits for ImporterEvents and handles cloning and importing files.
     ','line_number':216,'multiline':True]['text':'*
     * Performs file copying from the donor for the specified filename in the given metadataDoc.
     ','line_number':221,'multiline':True]['text':'*
     * Waits until the majority committed StartMigrationTimestamp is successfully checkpointed.
     *
     * Note: Refer to the calling site for more information on its significance.
     ','line_number':231,'multiline':True]['text':'*
     * Runs rollback to stable on the cloned files associated with the given migration id,
     * and then import the stable cloned files into the main WT instance.
     ','line_number':238,'multiline':True]['text':'*
     * Called to inform the primary that we have finished copying and importing all files.
     ','line_number':244,'multiline':True]['text':'*
     * Called internally by interrupt and interruptAll to interrupt a running file cloning and
     * import operations.
     ','line_number':249,'multiline':True]['text':'*
     * This blocking call waits for the worker threads to finish the execution, and then releases
     * the resources held by MigrationHandle for the given migrationId (if provided) or for the
     * current ongoing migration.
     *
     * Throws an exception if called before the migration is interrupted.
     ','line_number':255,'multiline':True]['text':'
     * Transitions the migration associated with the given migrationId to the specified target
     * state. If dryRun is set to 'true', the function performs a dry run of the state transition
     * without actually changing the state. Throws an exception for an invalid state transition.
     *
     * Returns the current migration state before the state transition.
     ','line_number':264,'multiline':True]['text':' Represents a handle for managing the migration process. It holds various resources and','line_number':294,'multiline':False]['text':' information required for cloning files and importing them.','line_number':295,'multiline':False]['text':' Shard merge migration Id.','line_number':299,'multiline':False]['text':' Optime at which the recipient state machine document for this migration is initialized.','line_number':302,'multiline':False]['text':' Queue to process ImporterEvents.','line_number':305,'multiline':False]['text':' ThreadPool used by TenantFileCloner to do storage write operations.','line_number':308,'multiline':False]['text':' Shared between the importer service and TenantFileCloners','line_number':311,'multiline':False]['text':' Indicates if collection import for this migration has begun.','line_number':314,'multiline':False]['text':' Promise fulfilled upon completion of collection import for this migration.','line_number':317,'multiline':False]['text':' Worker thread to orchestrate the cloning, importing and notifying the primary steps.','line_number':320,'multiline':False]['text':' State of the associated migration.','line_number':323,'multiline':False]['text':' Tracks the Statistics of the associated migration.','line_number':326,'multiline':False]['text':' Pointers below are not owned by this struct. The method that sets these','line_number':329,'multiline':False]['text':' pointers must manage their lifecycle and ensure proper pointer reset to prevent','line_number':330,'multiline':False]['text':' invalid memory access by other methods when reading the pointer value.','line_number':331,'multiline':False]['text':' Donor DBClientConnection for file cloning.','line_number':333,'multiline':False]['text':' OperationContext associated with the migration.','line_number':336,'multiline':False]['text':' Pointer to the current TenantFileCloner of the associated migration; used for statistics','line_number':339,'multiline':False]['text':' purpose.','line_number':340,'multiline':False]['text':' All member variables are labeled with one of the following codes indicating the','line_number':346,'multiline':False]['text':' synchronization rules for accessing them.','line_number':347,'multiline':False]['text':'','line_number':348,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':349,'multiline':False]['text':' (S)  Self-synchronizing; access according to class's own rules.','line_number':350,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex.','line_number':351,'multiline':False]['text':' (W)  Synchronization required only for writes.','line_number':352,'multiline':False]['text':' (I)  Independently synchronized, see member variable comment.','line_number':353,'multiline':False]['text':' Set to true when the shutdown procedure is initiated.','line_number':355,'multiline':False]['text':' (M)','line_number':356,'multiline':False]['text':' (M)','line_number':358,'multiline':False]['text':' Used to create a new DBClientConnection to the donor.','line_number':360,'multiline':False]['text':' (W)','line_number':361,'multiline':False]['text':' Condition variable to block concurrent reset operations.','line_number':363,'multiline':False]['text':' (M)','line_number':364,'multiline':False]['text':' Flag indicating whether a reset is currently in progress.','line_number':365,'multiline':False]['text':' (M)','line_number':366,'multiline':False]['text':' namespace mongo::repl','line_number':368,'multiline':False]