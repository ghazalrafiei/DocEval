['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Validation function to ensure we connect only to primary or secondary nodes.
     *
     * Because the cloner connection is separate from the usual inter-node connection pool and
     * did not have the 'hangUpOnStepDown:false' flag set in the initial "hello" request, we
     * will always disconnect if the sync source transitions to a state other than PRIMARY
     * or SECONDARY.  It will not disconnect on a PRIMARY to SECONDARY or SECONDARY to PRIMARY
     * transition because we no longer do that (the flag name is anachronistic).  After
     * disconnecting, this validation function will prevent us from reconnecting until the node
     * re-enters PRIMARY or SECONDARY state.
     *
     * The reason this is necessary is that in 4.2, commands which read metadata (listDatabases,
     * listCollections, listIndexes) succeed while the sync source is in RECOVERING or ROLLBACK.
     * In those states, this metadata may be out of date compared to the end of the oplog. So
     * we could for instance do a listCollections on a database while in RECOVERING, and miss an
     * entire collection that was recently added.  Then before we read any data (which would cause
     * a failure) the node could finish recovery, and we could end up missing an entire collection.
     * If the only data added to that collection was within the recovery period, the initial sync
     * would succeed and we would have an inconsistent node.  If other data was added we would
     * invariant during oplog application with a NamespaceNotFound error.
     ','line_number':92,'multiline':True]['text':'*
     * Stage function that makes a connection to the sync source.
     ','line_number':115,'multiline':True]['text':'*
     * Stage function that gets the wire version and initial sync ID.
     ','line_number':120,'multiline':True]['text':'*
     * Stage function that retrieves database information from the sync source.
     ','line_number':125,'multiline':True]['text':'*
     *
     * The postStage creates and runs the individual DatabaseCloners on each database found on
     * the sync source.
     ','line_number':130,'multiline':True]['text':' All member variables are labeled with one of the following codes indicating the','line_number':143,'multiline':False]['text':' synchronization rules for accessing them.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':146,'multiline':False]['text':' (S)  Self-synchronizing; access according to classes own rules.','line_number':147,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex (defined in base class).','line_number':148,'multiline':False]['text':' (X)  Access only allowed from the main flow of control called from run() or constructor.','line_number':149,'multiline':False]['text':' (MX) Write access with mutex from main flow of control, read access with mutex from other','line_number':150,'multiline':False]['text':'      threads, read access allowed from main flow without mutex.','line_number':151,'multiline':False]['text':' (R)','line_number':152,'multiline':False]['text':' (R)','line_number':153,'multiline':False]['text':' (R)','line_number':154,'multiline':False]['text':' (X)','line_number':155,'multiline':False]['text':' (MX)','line_number':156,'multiline':False]['text':' (MX)','line_number':157,'multiline':False]['text':' namespace repl','line_number':160,'multiline':False]['text':' namespace mongo','line_number':161,'multiline':False]