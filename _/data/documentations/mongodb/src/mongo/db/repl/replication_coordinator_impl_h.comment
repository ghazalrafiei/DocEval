['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace executor','line_number':124,'multiline':False]['text':' namespace rpc','line_number':129,'multiline':False]['text':' ================== Members of public ReplicationCoordinator API ===================','line_number':158,'multiline':False]['text':'*
     * Get current term from topology coordinator
     ','line_number':405,'multiline':True]['text':' Returns the ServiceContext where this instance runs.','line_number':410,'multiline':False]['text':' ==================== Private API ===================','line_number':485,'multiline':False]['text':' Called by AutoGetRstlForStepUpStepDown before taking RSTL when making stepdown transitions','line_number':486,'multiline':False]['text':' Called by AutoGetRstlForStepUpStepDown before releasing RSTL when making stepdown','line_number':489,'multiline':False]['text':' transitions.  Also called in case of failure to acquire RSTL.  There will be one call to this','line_number':490,'multiline':False]['text':' method for each call to autoGetRSTLEnterStepDown.','line_number':491,'multiline':False]['text':' ================== Test support API ===================','line_number':494,'multiline':False]['text':'*
     * If called after startReplication(), blocks until all asynchronous
     * activities associated with replication start-up complete.
     ','line_number':496,'multiline':True]['text':'*
     * Gets the replica set configuration in use by the node.
     ','line_number':502,'multiline':True]['text':'*
     * Returns scheduled time of election timeout callback.
     * Returns Date_t() if callback is not scheduled.
     ','line_number':507,'multiline':True]['text':'
     * Return a randomized offset amount that is scaled in proportion to the size of the
     * _electionTimeoutPeriod.
     ','line_number':513,'multiline':True]['text':'*
     * Returns the scheduled time of the priority takeover callback. If a priority
     * takeover has not been scheduled, returns boost::none.
     ','line_number':519,'multiline':True]['text':'*
     * Returns the scheduled time of the catchup takeover callback. If a catchup
     * takeover has not been scheduled, returns boost::none.
     ','line_number':525,'multiline':True]['text':'*
     * Returns the catchup takeover CallbackHandle.
     ','line_number':531,'multiline':True]['text':'*
     * Simple wrappers around _setLastOptimeForMember to make it easier to test.
     ','line_number':536,'multiline':True]['text':'*
     * Simple test wrappers that expose private methods.
     ','line_number':548,'multiline':True]['text':'*
     * Non-blocking version of updateTerm.
     * Returns event handle that we can use to wait for the operation to complete.
     * When the operation is complete (waitForEvent() returns), 'updateResult' will be set
     * to a status telling if the term increased or a stepdown was triggered.
     ','line_number':555,'multiline':True]['text':'*
     * If called after ElectionState::start(), blocks until all asynchronous
     * activities associated with election complete.
     ','line_number':564,'multiline':True]['text':'*
     * If called after ElectionState::start(), blocks until all asynchronous
     * activities associated with election dry run complete, including writing
     * last vote and scheduling the real election.
     ','line_number':570,'multiline':True]['text':'*
     * Waits until a stepdown attempt has begun. Callers should ensure that the stepdown attempt
     * won't fully complete before this method is called, or this method may never return.
     ','line_number':577,'multiline':True]['text':'*
     * Cancels all future processing work of the VoteRequester and sets the election state to
     * kCanceled.
     ','line_number':583,'multiline':True]['text':'*
     * Implementation of an interface used to synchronize changes to custom write concern tags in
     * the config and custom default write concern settings.
     * See base class fore more information.
     ','line_number':589,'multiline':True]['text':'','line_number':630,'multiline':False]['text':' All member variables are labeled with one of the following codes indicating the','line_number':631,'multiline':False]['text':' synchronization rules for accessing them.','line_number':632,'multiline':False]['text':'','line_number':633,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':634,'multiline':False]['text':' (S)  Self-synchronizing; access in any way from any context.','line_number':635,'multiline':False]['text':' (PS) Pointer is read-only in concurrent operation, item pointed to is self-synchronizing;','line_number':636,'multiline':False]['text':'      Access in any context.','line_number':637,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex','line_number':638,'multiline':False]['text':' (I)  Independently synchronized, see member variable comment.','line_number':639,'multiline':False]['text':' The number of config write concern tag changes currently underway.','line_number':641,'multiline':False]['text':' (M)','line_number':642,'multiline':False]['text':' The number of default write concern changes currently underway.','line_number':644,'multiline':False]['text':' (M)','line_number':645,'multiline':False]['text':' Used to synchronize access to the above variables.','line_number':647,'multiline':False]['text':' (S)','line_number':649,'multiline':False]['text':'*
     * Returns a pointer to the WriteConcernTagChanges used by this instance.
     ','line_number':652,'multiline':True]['text':'*
     * Configuration states for a replica set node.
     *
     * Transition diagram:
     *
     * PreStart ------------------> ReplicationDisabled
     *    |
     *    |
     *    v
     * StartingUp -------> Uninitialized <------> Initiating
     *         \                     ^               |
     *          -------              |               |
     *                 |             |               |
     *                 v             v               |
     * Reconfig <---> Steady <----> HBReconfig       |
     *                    ^                          /
     *                    |                         /
     *                     \                       /
     *                      -----------------------
     ','line_number':673,'multiline':True]['text':'*
     * Type describing actions to take after a change to the MemberState _memberState.
     ','line_number':704,'multiline':True]['text':' This object acquires RSTL in X mode to perform state transition to (step up)/from (step down)','line_number':715,'multiline':False]['text':' primary. In order to acquire RSTL, it also starts "RstlKillOpthread" which kills conflicting','line_number':716,'multiline':False]['text':' operations (user/system) and aborts stashed running transactions.','line_number':717,'multiline':False]['text':' Disallows copying.','line_number':728,'multiline':False]['text':'
         * Releases RSTL lock.
         ','line_number':732,'multiline':True]['text':'
         * Reacquires RSTL lock.
         ','line_number':737,'multiline':True]['text':'
         * Returns _userOpsKilled value.
         ','line_number':742,'multiline':True]['text':'
         * Increments _userOpsKilled by val.
         ','line_number':747,'multiline':True]['text':'
         * Returns _userOpsRunning value.
         ','line_number':752,'multiline':True]['text':'
         * Increments _userOpsRunning by val.
         ','line_number':757,'multiline':True]['text':'
         * Returns the step up/step down opCtx.
         ','line_number':762,'multiline':True]['text':'*
         * It will spawn a new thread killOpThread to kill operations that conflict with state
         * transitions (step up and step down).
         ','line_number':768,'multiline':True]['text':'*
         * On state transition, we need to kill all write operations and all transactional
         * operations, so that unprepared and prepared transactions can release or yield their
         * locks. The required ordering between step up/step down steps are:
         * 1) Enqueue RSTL in X mode.
         * 2) Kill all conflicting operations.
         *       - Write operation that takes global lock in IX and X mode.
         *       - Read operations that takes global lock in S mode.
         *       - Operations(read/write) that are blocked on prepare conflict.
         * 3) Abort unprepared transactions.
         * 4) Repeat step 2) and 3) until the step up/step down thread can acquire RSTL.
         * 5) Yield locks of all prepared transactions. This applies only to step down as on
         * secondary we currently yield locks for prepared transactions.
         *
         * Since prepared transactions don't hold RSTL, step 1) to step 3) make sure all
         * running transactions that may hold RSTL finish, get killed or yield their locks,
         * so that we can acquire RSTL at step 4). Holding the locks of prepared transactions
         * until step 5) guarantees if any conflict operations (e.g. DDL operations) failed
         * to be killed for any reason, we will get a deadlock instead of a silent data corruption.
         *
         * Loops continuously to kill all conflicting operations. And, aborts all stashed (inactive)
         * transactions.
         * Terminates once killSignaled is set true.
         ','line_number':774,'multiline':True]['text':'
         * Signals killOpThread to stop killing operations.
         ','line_number':800,'multiline':True]['text':' not owned.','line_number':805,'multiline':False]['text':' step up/step down opCtx.','line_number':806,'multiline':False]['text':' not owned.','line_number':807,'multiline':False]['text':' This field is optional because we need to start killOpThread to kill operations after','line_number':808,'multiline':False]['text':' RSTL enqueue.','line_number':809,'multiline':False]['text':' Thread that will run killOpThreadFn().','line_number':811,'multiline':False]['text':' Tracks number of operations killed on step up / step down.','line_number':813,'multiline':False]['text':' Tracks number of operations left running on step up / step down.','line_number':815,'multiline':False]['text':' Protects killSignaled and stopKillingOps cond. variable.','line_number':817,'multiline':False]['text':' Signals thread about the change of killSignaled value.','line_number':819,'multiline':False]['text':' Once this is set to true, the killOpThreadFn method will terminate.','line_number':821,'multiline':False]['text':' The state transition that is in progress. Should never be set to rollback within this','line_number':823,'multiline':False]['text':' class.','line_number':824,'multiline':False]['text':' Adds waiter into the list.','line_number':839,'multiline':False]['text':' Adds a waiter into the list and returns the future of the waiter's promise.','line_number':841,'multiline':False]['text':' Returns whether waiter is found and removed.','line_number':844,'multiline':False]['text':' Signals all waiters whose opTime is <= the given opTime (if any) that satisfy the','line_number':846,'multiline':False]['text':' condition in func.','line_number':847,'multiline':False]['text':' Signals all waiters from the list and fulfills promises with OK status.','line_number':850,'multiline':False]['text':' Signals all waiters from the list and fulfills promises with Error status.','line_number':852,'multiline':False]['text':' Waiters sorted by OpTime.','line_number':856,'multiline':False]['text':' The state and logic of primary catchup.','line_number':867,'multiline':False]['text':'','line_number':868,'multiline':False]['text':' When start() is called, CatchupState will schedule the timeout callback. When we get','line_number':869,'multiline':False]['text':' responses of the latest heartbeats from all nodes, the _targetOpTime is set.','line_number':870,'multiline':False]['text':' The primary exits catchup mode when any of the following happens.','line_number':871,'multiline':False]['text':'   1) My last applied optime reaches the target optime, if we've received a heartbeat from all','line_number':872,'multiline':False]['text':'      nodes.','line_number':873,'multiline':False]['text':'   2) Catchup timeout expires.','line_number':874,'multiline':False]['text':'   3) Primary steps down.','line_number':875,'multiline':False]['text':'   4) The primary has to roll back to catch up.','line_number':876,'multiline':False]['text':'   5) The primary is too stale to catch up.','line_number':877,'multiline':False]['text':'','line_number':878,'multiline':False]['text':' On abort, the state resets the pointer to itself in ReplCoordImpl. In other words, the','line_number':879,'multiline':False]['text':' life cycle of the state object aligns with the conceptual state.','line_number':880,'multiline':False]['text':' In shutdown, the timeout callback will be canceled by the executor and the state is safe to','line_number':881,'multiline':False]['text':' destroy.','line_number':882,'multiline':False]['text':'','line_number':883,'multiline':False]['text':' Any function of the state must be called while holding _mutex.','line_number':884,'multiline':False]['text':' start() can only be called once.','line_number':888,'multiline':False]['text':' Reset the state itself to destruct the state.','line_number':890,'multiline':False]['text':' Heartbeat calls this function to update the target optime.','line_number':892,'multiline':False]['text':' Increment the counter for the number of ops applied during catchup.','line_number':894,'multiline':False]['text':' Not owned.','line_number':898,'multiline':False]['text':' Callback handle used to cancel a scheduled catchup timeout callback.','line_number':899,'multiline':False]['text':' Target optime to reach after which we can exit catchup mode.','line_number':901,'multiline':False]['text':' Handle to a Waiter that waits for the _targetOpTime.','line_number':903,'multiline':False]['text':' Counter for the number of ops applied during catchup.','line_number':905,'multiline':False]['text':'*
         * Begins an attempt to elect this node.
         * Called after an incoming heartbeat changes this node's view of the set such that it
         * believes it can be elected PRIMARY.
         * For proper concurrency, start methods must be called while holding _mutex.
         *
         * For V1 (raft) style elections the election path is:
         *      _processDryRunResult() (may skip)
         *      _startRealElection()
         *      _writeLastVoteForMyElection()
         *      _requestVotesForRealElection()
         *      _onVoteRequestComplete()
         ','line_number':916,'multiline':True]['text':' Returns the election finished event.','line_number':931,'multiline':False]['text':' Returns the election dry run finished event.','line_number':934,'multiline':False]['text':' Notifies the VoteRequester to cancel further processing. Sets the election state to','line_number':937,'multiline':False]['text':' canceled.','line_number':938,'multiline':False]['text':'*
         * Returns the election result from the VoteRequester.
         ','line_number':945,'multiline':True]['text':'*
         * Starts the VoteRequester and requests votes from known members of the replica set.
         ','line_number':950,'multiline':True]['text':'*
         * Starts VoteRequester to run the real election when last vote write has completed.
         ','line_number':956,'multiline':True]['text':'*
         * Callback called when the dryRun VoteRequester has completed; checks the results and
         * decides whether to conduct a proper election.
         * "originalTerm" was the term during which the dry run began, if the term has since
         * changed, do not run for election.
         ','line_number':963,'multiline':True]['text':'*
         * Begins executing a real election. This is called either a successful dry run, or when the
         * dry run was skipped (which may be specified for a ReplSetStepUp).
         ','line_number':971,'multiline':True]['text':'*
         * Writes the last vote in persistent storage after completing dry run successfully.
         * This job will be scheduled to run in DB worker threads.
         ','line_number':979,'multiline':True]['text':'*
         * Callback called when the VoteRequester has completed; checks the results and
         * decides whether to change state to primary and alert other nodes of our primary-ness.
         * "originalTerm" was the term during which the election began, if the term has since
         * changed, do not step up as primary.
         ','line_number':987,'multiline':True]['text':' Not owned.','line_number':995,'multiline':False]['text':' The VoteRequester used to start and gather results from the election voting process.','line_number':997,'multiline':False]['text':' Flag that indicates whether the election has been canceled.','line_number':999,'multiline':False]['text':' Event that the election code will signal when the in-progress election completes.','line_number':1001,'multiline':False]['text':' Event that the election code will signal when the in-progress election dry run completes,','line_number':1004,'multiline':False]['text':' which includes writing the last vote and scheduling the real election.','line_number':1005,'multiline':False]['text':' Pointer to the TopologyCoordinator owned by ReplicationCoordinator.','line_number':1008,'multiline':False]['text':' Pointer to the executor owned by ReplicationCoordinator.','line_number':1011,'multiline':False]['text':' Inner class to manage the concurrency of _canAcceptNonLocalWrites and _canServeNonLocalReads.','line_number':1015,'multiline':False]['text':' Asserts ReplicationStateTransitionLock is held in mode X.','line_number':1021,'multiline':False]['text':' For early errors.','line_number':1025,'multiline':False]['text':' Asserts ReplicationStateTransitionLock is held in an intent or exclusive mode.','line_number':1027,'multiline':False]['text':' Asserts ReplicationStateTransitionLock is held in an intent or exclusive mode.','line_number':1032,'multiline':False]['text':' Asserts ReplicationStateTransitionLock is held in mode X.','line_number':1035,'multiline':False]['text':' Flag that indicates whether writes to databases other than "local" are allowed.  Used to','line_number':1041,'multiline':False]['text':' answer canAcceptWritesForDatabase() and canAcceptWritesFor() questions. In order to read','line_number':1042,'multiline':False]['text':' it, must have either the RSTL or the replication coordinator mutex. To set it, must have','line_number':1043,'multiline':False]['text':' both the RSTL in mode X and the replication coordinator mutex.','line_number':1044,'multiline':False]['text':' Always true for standalone nodes.','line_number':1045,'multiline':False]['text':' Flag that indicates whether reads from databases other than "local" are allowed. Unlike','line_number':1048,'multiline':False]['text':' _canAcceptNonLocalWrites, above, this question is about admission control on secondaries.','line_number':1049,'multiline':False]['text':' Accidentally providing the prior value for a limited period of time is acceptable, except','line_number':1050,'multiline':False]['text':' during rollback. In order to read it, must have the RSTL. To set it when transitioning','line_number':1051,'multiline':False]['text':' into RS_ROLLBACK, must have the RSTL in mode X. Otherwise, no lock or mutex is necessary','line_number':1052,'multiline':False]['text':' to set it.','line_number':1053,'multiline':False]['text':'*
     * Returns a new WriteConcernOptions based on "wc" but with UNSET syncMode reset to JOURNAL or
     * NONE based on our rsConfig.
     ','line_number':1059,'multiline':True]['text':'*
     * Returns the _writeConcernMajorityJournalDefault of our current _rsConfig.
     ','line_number':1066,'multiline':True]['text':'*
     * Returns the write concerns used by oplog commitment check and config replication check.
     ','line_number':1071,'multiline':True]['text':'*
     * Returns the OpTime of the current committed snapshot, if one exists.
     ','line_number':1077,'multiline':True]['text':'*
     *  Verifies that ReadConcernArgs match node's readConcern.
     ','line_number':1082,'multiline':True]['text':'*
     * Helper to update our saved config, cancel any pending heartbeats, and kick off sending
     * new heartbeats based on the new config.
     *
     * Returns an action to be performed after unlocking _mutex, via
     * _performPostMemberStateUpdateAction.
     ','line_number':1087,'multiline':True]['text':'*
     * Helper to wake waiters in _replicationWaiterList waiting for opTime <= the opTime passed in
     * (or all waiters if opTime passed in is boost::none) that are doneWaitingForReplication.
     ','line_number':1099,'multiline':True]['text':'*
     * Scheduled to cause the ReplicationCoordinator to reconsider any state that might
     * need to change as a result of time passing - for instance becoming PRIMARY when a single
     * node replica set member's stepDown period ends.
     ','line_number':1105,'multiline':True]['text':'*
     * Chooses a candidate for election handoff and sends a ReplSetStepUp command to it.
     ','line_number':1112,'multiline':True]['text':'*
     * Helper method for awaitReplication to register a waiter in _replicationWaiterList with the
     * given opTime and writeConcern. Called while holding _mutex.
     ','line_number':1117,'multiline':True]['text':'*
     * Returns an object with all of the information this node knows about the replica set's
     * progress.
     ','line_number':1125,'multiline':True]['text':'*
     * Returns true if the given writeConcern is satisfied up to "optime" or is unsatisfiable.
     *
     * If the writeConcern is 'majority', also waits for _currentCommittedSnapshot to be newer than
     * minSnapshot.
     ','line_number':1131,'multiline':True]['text':'*
     *  Returns whether or not "members" list contains at least 'numNodes'.
     ','line_number':1140,'multiline':True]['text':'*
     * Returns whether or not "members" list matches the tagPattern.
     ','line_number':1147,'multiline':True]['text':'*
     * Helper method for updating our tracking of the last optime applied by a given node.
     * This is only valid to call on replica sets.
     * "configVersion" will be populated with our config version if it and the configVersion
     * of "args" differ.
     *
     * If either applied or durable optime has changed, returns the later of the two (even if
     * that's not the one which changed).  Otherwise returns a null optime.
     ','line_number':1171,'multiline':True]['text':'*
     * Helper for processReplSetUpdatePosition, companion to _setLastOptimeForMember above.  Updates
     * replication coordinator state and notifies waiters after remote optime updates.  Must be
     * called within the same critical section as _setLastOptimeForMember.
     ','line_number':1183,'multiline':True]['text':'*
     * This function will report our position externally (like upstream) if necessary.
     *
     * Takes in a unique lock, that must already be locked, on _mutex.
     *
     * Lock will be released after this method finishes.
     ','line_number':1190,'multiline':True]['text':'*
     * Helpers to set the last written, applied and durable OpTime.
     ','line_number':1199,'multiline':True]['text':'*
     * Schedules a heartbeat using this node's "replSetName" to be sent to "target" at "when".
     ','line_number':1212,'multiline':True]['text':'*
     * Processes each heartbeat response using this node's "replSetName".
     *
     * Schedules additional heartbeats, triggers elections and step downs, etc.
     ','line_number':1219,'multiline':True]['text':'
     * Return a randomized offset amount that is scaled in proportion to the size of the
     * _electionTimeoutPeriod. Used to add randomization to an election timeout.
     ','line_number':1234,'multiline':True]['text':'
     * Return the upper bound of the offset amount returned by _getRandomizedElectionOffset
     * This is actually off by one, that is, the election offset is in the half-open range
     * [0, electionOffsetUpperBound)
     ','line_number':1240,'multiline':True]['text':'*
     * Starts a heartbeat for each member in the current config.  Called while holding _mutex.
     ','line_number':1247,'multiline':True]['text':'*
     * Cancels all heartbeats.  Called while holding replCoord _mutex.
     ','line_number':1252,'multiline':True]['text':'*
     * Cancels all heartbeats that have been scheduled but not yet sent out, then reschedules them
     * at the current time immediately using this node's "replSetName". Called while holding
     * replCoord _mutex.
     ','line_number':1257,'multiline':True]['text':'*
     * Asynchronously sends a heartbeat to "target" using this node's "replSetName".
     *
     * Scheduled by _scheduleHeartbeatToTarget_inlock.
     ','line_number':1264,'multiline':True]['text':'*
     * Helper method for setting this node to a specific follower mode.
     *
     * Note: The opCtx may be null, but must be non-null if the new state is RS_ROLLBACK.
     ','line_number':1276,'multiline':True]['text':'*
     * Starts loading the replication configuration from local storage, and if it is valid,
     * schedules a callback (of _finishLoadLocalConfig) to set it as the current replica set
     * config (sets _rsConfig and _thisMembersConfigIndex).
     * Returns true if it finishes loading the local config, which most likely means there
     * was no local config at all or it was invalid in some way, and false if there was a valid
     * config detected but more work is needed to set it as the local config (which will be
     * handled by the callback to _finishLoadLocalConfig).
     *
     * Increments the rollback ID if the the server was shut down uncleanly.
     ','line_number':1283,'multiline':True]['text':'*
     * Callback that finishes the work started in _startLoadLocalConfig and sets _rsConfigState
     * to kConfigSteady, so that we can begin processing heartbeats and reconfigs.
     ','line_number':1297,'multiline':True]['text':'*
     * Start replicating data, and does an initial sync if needed first.
     ','line_number':1306,'multiline':True]['text':'*
     * Start initial sync.
     ','line_number':1311,'multiline':True]['text':'*
     * Function to be called on completion of initial sync.
     ','line_number':1319,'multiline':True]['text':'*
     * Finishes the work of processReplSetInitiate() in the event of a successful quorum check.
     ','line_number':1324,'multiline':True]['text':'*
     * Finishes the work of processReplSetReconfig, in the event of
     * a successful quorum check.
     ','line_number':1331,'multiline':True]['text':'*
     * Changes _rsConfigState to newState, and notify any waiters.
     ','line_number':1340,'multiline':True]['text':'*
     * Returns the string representation of the config state.
     ','line_number':1345,'multiline':True]['text':'*
     * Returns true if the horizon mappings between the oldConfig and newConfig are different.
     ','line_number':1350,'multiline':True]['text':'*
     * Fulfills the promises that are waited on by awaitable hello requests. This increments the
     * server TopologyVersion.
     ','line_number':1360,'multiline':True]['text':'*
     * Update _canAcceptNonLocalWrites based on _topCoord->canAcceptWrites().
     ','line_number':1366,'multiline':True]['text':'*
     * Updates the cached value, _memberState, to match _topCoord's reported
     * member state, from getMemberState().
     *
     * Returns an enum indicating what action to take after releasing _mutex, if any.
     * Call performPostMemberStateUpdateAction on the return value after releasing
     * _mutex.
     ','line_number':1371,'multiline':True]['text':'*
     * Performs a post member-state update action.  Do not call while holding _mutex.
     ','line_number':1381,'multiline':True]['text':'*
     * Update state after winning an election.
     ','line_number':1386,'multiline':True]['text':'*
     * Helper to select appropriate sync source after transitioning from a follower state.
     ','line_number':1391,'multiline':True]['text':'*
     * Removes 'host' from the sync source denylist. If 'host' isn't found, it's simply
     * ignored and no error is thrown.
     *
     * Must be scheduled as a callback.
     ','line_number':1396,'multiline':True]['text':'*
     * Schedules stepdown to run with the global exclusive lock.
     ','line_number':1405,'multiline':True]['text':'*
     * kill all conflicting operations that are blocked either on prepare conflict or have taken
     * global lock not in MODE_IS. The conflicting operations can be either user or system
     * operations marked as killable.
     ','line_number':1410,'multiline':True]['text':'*
     * Completes a step-down of the current node.  Must be run with a global
     * shared or global exclusive lock.
     * Signals 'finishedEvent' on successful completion.
     ','line_number':1418,'multiline':True]['text':'*
     * Returns true if I am primary in the current configuration but not electable or removed in the
     * new config.
     ','line_number':1426,'multiline':True]['text':'*
     * Schedules a replica set config change.
     ','line_number':1434,'multiline':True]['text':'*
     * Accepts a ReplSetConfig and resolves it either to itself, or the embedded shard split
     * recipient config if it's present and self is a shard split recipient. Returns a tuple of the
     * resolved config and a boolean indicating whether a recipient config was found.
     ','line_number':1439,'multiline':True]['text':'*
     * Method to write a configuration transmitted via heartbeat message to stable storage.
     ','line_number':1446,'multiline':True]['text':'*
     * Conclusion actions of a heartbeat-triggered reconfiguration.
     ','line_number':1453,'multiline':True]['text':'*
     * Calculates the time (in millis) left in quiesce mode and converts the value to int64.
     ','line_number':1461,'multiline':True]['text':'*
     * Fills a HelloResponse with the appropriate replication related fields. horizonString
     * should be passed in if hasValidConfig is true.
     ','line_number':1466,'multiline':True]['text':'*
     * Creates a semi-future for HelloResponse. horizonString should be passed in if and only if
     * the server is a valid member of the config.
     ','line_number':1474,'multiline':True]['text':'*
     * Returns the horizon string by parsing horizonParams if the node is a valid member of the
     * replica set. Otherwise, return boost::none.
     ','line_number':1484,'multiline':True]['text':'*
     * Utility method that schedules or performs actions specified by a HeartbeatResponseAction
     * returned by a TopologyCoordinator::processHeartbeatResponse(V1) call with the given
     * value of "responseStatus".
     *
     * Requires "lock" to own _mutex, and returns the same unique_lock.
     ','line_number':1491,'multiline':True]['text':'*
     * Updates the last committed OpTime to be 'committedOpTime' if it is more recent than the
     * current last committed OpTime. We ignore 'committedOpTime' if it has a different term than
     * our lastApplied, unless 'fromSyncSource'=true, which guarantees we are on the same branch of
     * history as 'committedOpTime', so we update our commit point to min(committedOpTime,
     * lastApplied).
     * Also updates corresponding wall clock time.
     * The 'forInitiate' flag is used to force-advance our commit point during the execuction
     * of the replSetInitiate command.
     ','line_number':1503,'multiline':True]['text':'*
     * Scan the memberData and determine the highest last applied or last
     * durable optime present on a majority of servers; set _lastCommittedOpTime to this
     * new entry.
     *
     * Whether the last applied or last durable op time is used depends on whether
     * the config getWriteConcernMajorityShouldJournal is set.
     ','line_number':1518,'multiline':True]['text':'* Terms only increase, so if an incoming term is less than or equal to our
     * current term (_termShadow), there is no need to take the mutex and call _updateTerm_inlock.
     * Since _termShadow may be lagged, this may return true when the term does not need to be
     * updated, which is harmless because _updateTerm_inlock will do nothing in that case.
     ','line_number':1528,'multiline':True]['text':'*
     * Callback that attempts to set the current term in topology coordinator and
     * relinquishes primary if the term actually changes and we are primary.
     * *updateTermResult will be the result of the update term attempt.
     * Returns the finish event if it does not finish in this function, for example,
     * due to stepdown, otherwise the returned EventHandle is invalid.
     ','line_number':1535,'multiline':True]['text':'*
     * Callback that processes the ReplSetMetadata returned from a command run against another
     * replica set member and so long as the config version in the metadata matches the replica set
     * config version this node currently has, updates the current term.
     *
     * This does NOT update this node's notion of the commit point.
     *
     * Returns the finish event which is invalid if the process has already finished.
     ','line_number':1545,'multiline':True]['text':'*
     * Blesses a snapshot to be used for new committed reads.
     *
     * Returns true if the value was updated to `newCommittedSnapshot`.
     ','line_number':1556,'multiline':True]['text':'*
     * A helper method that returns the current stable optime based on the current commit point.
     ','line_number':1563,'multiline':True]['text':'*
     * Calculates and sets the value of the 'stable' replication optime for the storage engine.
     ','line_number':1568,'multiline':True]['text':'*
     * Clears the current committed snapshot.
     ','line_number':1573,'multiline':True]['text':'*
     * Bottom half of _scheduleNextLivenessUpdate.
     * Must be called with _mutex held.
     * If reschedule is true, will recompute the liveness update even if a timeout is
     * already pending.
     ','line_number':1578,'multiline':True]['text':'*
     * Callback which marks downed nodes as down, triggers a stepdown if a majority of nodes are no
     * longer visible, and reschedules itself.
     ','line_number':1586,'multiline':True]['text':'*
     * If "updatedMemberId" is the current _earliestMemberId, calls _scheduleNextLivenessUpdate to
     * schedule a new one.
     * Returns immediately otherwise.
     ','line_number':1592,'multiline':True]['text':'*
     * Cancels all outstanding _priorityTakeover callbacks.
     ','line_number':1599,'multiline':True]['text':'*
     * Cancels all outstanding _catchupTakeover callbacks.
     ','line_number':1604,'multiline':True]['text':'*
     * Cancels the current _handleElectionTimeout callback and reschedules a new callback.
     * Returns immediately otherwise.
     ','line_number':1609,'multiline':True]['text':'*
     * Callback which starts an election if this node is electable and using protocolVersion 1.
     ','line_number':1615,'multiline':True]['text':'*
     * Schedules work to be run no sooner than 'when' and returns handle to callback.
     * If work cannot be scheduled due to shutdown, returns empty handle.
     * All other non-shutdown scheduling failures will abort the process.
     * Does not run 'work' if callback is canceled.
     ','line_number':1621,'multiline':True]['text':'*
     * Creates an event.
     * Returns invalid event handle if the executor is shutting down.
     * Otherwise aborts on non-shutdown error.
     ','line_number':1629,'multiline':True]['text':'*
     * Wrap a function into executor callback.
     * If the callback is cancelled, the given function won't run.
     ','line_number':1636,'multiline':True]['text':'*
     * Finish catch-up mode and start drain mode.
     ','line_number':1642,'multiline':True]['text':'*
     * Enter drain mode which does not result in a primary stepup. Returns a future which becomes
     * ready when the oplog buffers have completed draining.
     ','line_number':1647,'multiline':True]['text':'*
     * Waits for the config state to leave kConfigStartingUp, which indicates that start() has
     * finished.
     ','line_number':1653,'multiline':True]['text':'*
     * Cancels the running election, if any, and returns an event that will be signaled when the
     * canceled election completes. If there is no running election, returns an invalid event
     * handle.
     ','line_number':1659,'multiline':True]['text':'*
     * Waits until the lastApplied opTime is at least the 'targetOpTime'.
     ','line_number':1666,'multiline':True]['text':'*
     * Waits until the optime of the current node is at least the opTime specified in 'readConcern'.
     * Supports local and majority readConcern.
     ','line_number':1673,'multiline':True]['text':' TODO: remove when SERVER-29729 is done','line_number':1677,'multiline':False]['text':'*
     * Waits until the deadline or until the optime of the current node is at least the clusterTime
     * specified in 'readConcern'. Supports local and majority readConcern.
     * If maxTimeMS and deadline are both specified, it waits for min(maxTimeMS, deadline).
     ','line_number':1681,'multiline':True]['text':'*
     * Initializes a horizon name to promise mapping. Each awaitable hello request will block on
     * the promise mapped to by the horizon name determined from this map. This map should be
     * cleared and reinitialized after any reconfig that will change the SplitHorizon.
     ','line_number':1690,'multiline':True]['text':'*
     * Returns a pseudorandom number no less than 0 and less than limit (which must be positive).
     ','line_number':1697,'multiline':True]['text':'*
     * This is called by a primary when they become aware that a node has completed initial sync.
     * That primary initiates a reconfig to remove the 'newlyAdded' for that node, if it was set.
     ','line_number':1702,'multiline':True]['text':'*
     * Sets the implicit default write concern on startup.
     ','line_number':1710,'multiline':True]['text':'
     * Calculates and returns the read preference for the node.
     ','line_number':1715,'multiline':True]['text':'
     * Performs the replica set reconfig procedure. Certain consensus safety checks are omitted when
     * either 'force' or 'skipSafetyChecks' are true.
     ','line_number':1720,'multiline':True]['text':'*
     * This validation should be called on shard startup, it fasserts if the defaultWriteConcern
     * on the shard is set to w:1 and CWWC is not set.
     ','line_number':1729,'multiline':True]['text':'*
     * Checks whether the node can currently accept replicated writes. This method is unsafe and
     * is for internal use only as its result is only accurate while holding the RSTL.
     ','line_number':1735,'multiline':True]['text':'*
     * Checks whether the collection indicated by nsOrUUID is replicated.
     ','line_number':1741,'multiline':True]['text':'','line_number':1746,'multiline':False]['text':' All member variables are labeled with one of the following codes indicating the','line_number':1747,'multiline':False]['text':' synchronization rules for accessing them.','line_number':1748,'multiline':False]['text':'','line_number':1749,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':1750,'multiline':False]['text':' (S)  Self-synchronizing; access in any way from any context.','line_number':1751,'multiline':False]['text':' (PS) Pointer is read-only in concurrent operation, item pointed to is self-synchronizing;','line_number':1752,'multiline':False]['text':'      Access in any context.','line_number':1753,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex','line_number':1754,'multiline':False]['text':' (I)  Independently synchronized, see member variable comment.','line_number':1755,'multiline':False]['text':' Protects member data of this ReplicationCoordinator.','line_number':1757,'multiline':False]['text':' (S)','line_number':1758,'multiline':False]['text':' Handles to actively queued heartbeats.','line_number':1760,'multiline':False]['text':' (M)','line_number':1761,'multiline':False]['text':' When this node does not know itself to be a member of a config, it adds','line_number':1763,'multiline':False]['text':' every host that sends it a heartbeat request to this set, and also starts','line_number':1764,'multiline':False]['text':' sending heartbeat requests to that host.  This set is cleared whenever','line_number':1765,'multiline':False]['text':' a node discovers that it is a member of a config.','line_number':1766,'multiline':False]['text':' (M)','line_number':1767,'multiline':False]['text':' Back pointer to the ServiceContext that has started the instance.','line_number':1769,'multiline':False]['text':' (S)','line_number':1770,'multiline':False]['text':' Parsed command line arguments related to replication.','line_number':1772,'multiline':False]['text':' (R)','line_number':1773,'multiline':False]['text':' Pointer to the TopologyCoordinator owned by this ReplicationCoordinator.','line_number':1775,'multiline':False]['text':' (M)','line_number':1776,'multiline':False]['text':' Executor that drives the topology coordinator.','line_number':1778,'multiline':False]['text':' (S)','line_number':1779,'multiline':False]['text':' Pointer to the ReplicationCoordinatorExternalState owned by this ReplicationCoordinator.','line_number':1781,'multiline':False]['text':' (PS)','line_number':1782,'multiline':False]['text':' list of information about clients waiting on replication or lastDurable opTime.','line_number':1784,'multiline':False]['text':' Waiters in this list are checked and notified on remote nodes' opTime updates and self's','line_number':1785,'multiline':False]['text':' lastDurable opTime updates. We do not check this list on self's lastApplied opTime updates to','line_number':1786,'multiline':False]['text':' avoid checking all waiters in the list on every write.','line_number':1787,'multiline':False]['text':' (M)','line_number':1788,'multiline':False]['text':' list of information about clients waiting for a particular lastApplied opTime.','line_number':1790,'multiline':False]['text':' Waiters in this list are checked and notified on self's lastApplied opTime updates.','line_number':1791,'multiline':False]['text':' (M)','line_number':1792,'multiline':False]['text':' Maps a horizon name to the promise waited on by awaitable hello requests when the node','line_number':1794,'multiline':False]['text':' has an initialized replica set config and is an active member of the replica set.','line_number':1795,'multiline':False]['text':' (M)','line_number':1797,'multiline':False]['text':' Maps a requested SNI to the promise waited on by awaitable hello requests when the node','line_number':1799,'multiline':False]['text':' has an unitialized replica set config or is removed. An empty SNI will map to a promise on','line_number':1800,'multiline':False]['text':' the default horizon.','line_number':1801,'multiline':False]['text':' (M)','line_number':1802,'multiline':False]['text':' Set to true when we are in the process of shutting down replication.','line_number':1804,'multiline':False]['text':' (M)','line_number':1805,'multiline':False]['text':' The term of the last election that resulted in this node becoming primary.','line_number':1807,'multiline':False]['text':' (S)','line_number':1808,'multiline':False]['text':' Used to signal threads waiting for changes to _memberState.','line_number':1810,'multiline':False]['text':' (M)','line_number':1811,'multiline':False]['text':' Current ReplicaSet state.','line_number':1813,'multiline':False]['text':' (M)','line_number':1814,'multiline':False]['text':' (M)','line_number':1816,'multiline':False]['text':' Used to signal threads waiting for changes to _rsConfigState.','line_number':1818,'multiline':False]['text':' (M)','line_number':1819,'multiline':False]['text':' Represents the configuration state of the coordinator, which controls how and when','line_number':1821,'multiline':False]['text':' _rsConfig may change.  See the state transition diagram in the type definition of','line_number':1822,'multiline':False]['text':' ConfigState for details.','line_number':1823,'multiline':False]['text':' (M)','line_number':1824,'multiline':False]['text':' The current ReplicaSet configuration object, including the information about tag groups','line_number':1826,'multiline':False]['text':' that is used to satisfy write concern requests with named gle modes.','line_number':1827,'multiline':False]['text':' (M)','line_number':1828,'multiline':False]['text':' This member's index position in the current config.','line_number':1830,'multiline':False]['text':' (M)','line_number':1831,'multiline':False]['text':' Whether we slept last time we attempted an election but possibly tied with other nodes.','line_number':1833,'multiline':False]['text':' (M)','line_number':1834,'multiline':False]['text':' Used to manage the concurrency around _canAcceptNonLocalWrites and _canServeNonLocalReads.','line_number':1836,'multiline':False]['text':' (S)','line_number':1837,'multiline':False]['text':' ReplicationProcess used to hold information related to the replication and application of','line_number':1839,'multiline':False]['text':' operations from the sync source.','line_number':1840,'multiline':False]['text':' (PS)','line_number':1841,'multiline':False]['text':' Storage interface used by initial syncer.','line_number':1843,'multiline':False]['text':' (PS)','line_number':1844,'multiline':False]['text':' InitialSyncer used for initial sync.','line_number':1845,'multiline':False]['text':' (I) pointer set under mutex, copied by callers.','line_number':1847,'multiline':False]['text':' The non-null OpTime used for committed reads, if there is one.','line_number':1849,'multiline':False]['text':' When engaged, this must be <= _lastCommittedOpTime.','line_number':1850,'multiline':False]['text':' (M)','line_number':1851,'multiline':False]['text':' Captured committedSnapshotOptime after reconfig','line_number':1853,'multiline':False]['text':' (M)','line_number':1854,'multiline':False]['text':' Used to signal threads that are waiting for a new value of _currentCommittedSnapshot.','line_number':1856,'multiline':False]['text':' (M)','line_number':1857,'multiline':False]['text':' Callback Handle used to cancel a scheduled LivenessTimeout callback.','line_number':1859,'multiline':False]['text':' (S)','line_number':1860,'multiline':False]['text':' Used to manage scheduling and canceling election timeouts.','line_number':1862,'multiline':False]['text':' (M)','line_number':1863,'multiline':False]['text':' Callback Handle used to cancel a scheduled PriorityTakeover callback.','line_number':1865,'multiline':False]['text':' (M)','line_number':1866,'multiline':False]['text':' Priority takeover callback will not run before this time.','line_number':1868,'multiline':False]['text':' If this date is Date_t(), the callback is either unscheduled or canceled.','line_number':1869,'multiline':False]['text':' Used for testing only.','line_number':1870,'multiline':False]['text':' (M)','line_number':1871,'multiline':False]['text':' Callback Handle used to cancel a scheduled CatchupTakeover callback.','line_number':1873,'multiline':False]['text':' (M)','line_number':1874,'multiline':False]['text':' Catchup takeover callback will not run before this time.','line_number':1876,'multiline':False]['text':' If this date is Date_t(), the callback is either unscheduled or canceled.','line_number':1877,'multiline':False]['text':' Used for testing only.','line_number':1878,'multiline':False]['text':' (M)','line_number':1879,'multiline':False]['text':' Callback handle used by _waitForStartUpComplete() to block until configuration','line_number':1881,'multiline':False]['text':' is loaded and external state threads have been started (unless this node is an arbiter).','line_number':1882,'multiline':False]['text':' (M)','line_number':1883,'multiline':False]['text':' The id of the earliest member, for which the handleLivenessTimeout callback has been','line_number':1885,'multiline':False]['text':' scheduled.  We need this so that we don't needlessly cancel and reschedule the callback on','line_number':1886,'multiline':False]['text':' every liveness update.','line_number':1887,'multiline':False]['text':' (M)','line_number':1888,'multiline':False]['text':' Cached copy of the current config protocol version.','line_number':1890,'multiline':False]['text':' (S)','line_number':1891,'multiline':False]['text':' Source of random numbers used in setting election timeouts, etc.','line_number':1893,'multiline':False]['text':' (M)','line_number':1894,'multiline':False]['text':' The catchup state including all catchup logic. The presence of a non-null pointer indicates','line_number':1896,'multiline':False]['text':' that the node is currently in catchup mode.','line_number':1897,'multiline':False]['text':' (X)','line_number':1898,'multiline':False]['text':' The election state that includes logic to start and return information from the election','line_number':1900,'multiline':False]['text':' voting process.','line_number':1901,'multiline':False]['text':' (M)','line_number':1902,'multiline':False]['text':' Atomic-synchronized copy of Topology Coordinator's _term, for use by the public getTerm()','line_number':1904,'multiline':False]['text':' function.','line_number':1905,'multiline':False]['text':' This variable must be written immediately after _term, and thus its value can lag.','line_number':1906,'multiline':False]['text':' Reading this value does not require the replication coordinator mutex to be locked.','line_number':1907,'multiline':False]['text':' (S)','line_number':1908,'multiline':False]['text':' When we decide to step down due to hearing about a higher term, we remember the term we heard','line_number':1910,'multiline':False]['text':' here so we can update our term to match as part of finishing stepdown.','line_number':1911,'multiline':False]['text':' (M)','line_number':1912,'multiline':False]['text':' If we're in stepdown code and therefore should claim we don't allow','line_number':1916,'multiline':False]['text':' writes.  This is a counter rather than a flag because there are scenarios where multiple','line_number':1917,'multiline':False]['text':' stepdowns are attempted at once.','line_number':1918,'multiline':False]['text':' If we're in terminal shutdown.  If true, we'll refuse to vote in elections.','line_number':1921,'multiline':False]['text':' (M)','line_number':1922,'multiline':False]['text':' If we're in quiesce mode.  If true, we'll respond to hello requests with ok:0.','line_number':1924,'multiline':False]['text':' (M)','line_number':1925,'multiline':False]['text':' The deadline until which quiesce mode will last.','line_number':1927,'multiline':False]['text':' (M)','line_number':1928,'multiline':False]['text':' The cached value of the 'counter' field in the server's TopologyVersion.','line_number':1930,'multiline':False]['text':' (S)','line_number':1931,'multiline':False]['text':' This should be set during sharding initialization except on config shard.','line_number':1933,'multiline':False]['text':' Construct used to synchronize default write concern changes with config write concern','line_number':1938,'multiline':False]['text':' changes.','line_number':1939,'multiline':False]['text':' An optional promise created when entering drain mode for shard split.','line_number':1942,'multiline':False]['text':' (M)','line_number':1943,'multiline':False]['text':' Pointer to the SplitPrepareSessionManager owned by this ReplicationCoordinator.','line_number':1945,'multiline':False]['text':' (S)','line_number':1946,'multiline':False]['text':' namespace repl','line_number':1949,'multiline':False]['text':' namespace mongo','line_number':1950,'multiline':False]