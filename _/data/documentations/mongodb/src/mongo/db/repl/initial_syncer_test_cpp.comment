['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Insertion operator for InitialSyncer::State. Formats initial syncer state for output stream.
 ','line_number':126,'multiline':True]['text':' namespace repl','line_number':143,'multiline':False]['text':' namespace mongo','line_number':144,'multiline':False]['text':'*
     * clear/reset state
     ','line_number':192,'multiline':True]['text':' SyncSourceSelector','line_number':205,'multiline':False]['text':'*
     * Schedules and processes a successful response to the network request sent by InitialSyncer's
     * last oplog entry fetcher. Also validates the find command arguments in the request.
     ','line_number':275,'multiline':True]['text':'*
     * Schedules and processes a successful response to the network request sent by InitialSyncer's
     * feature compatibility version fetcher. Includes the 'docs' provided in the response.
     ','line_number':281,'multiline':True]['text':'*
     * Schedules and processes a successful response to the network request sent by InitialSyncer's
     * feature compatibility version fetcher. Always includes a valid fCV=last-lts document in
     * the response.
     ','line_number':287,'multiline':True]['text':' protects _storageInterfaceWorkDone.','line_number':331,'multiline':False]['text':' Get collection info from map.','line_number':384,'multiline':False]['text':' Required by CollectionCloner::listIndexesStage() and IndexBuildsCoordinator.','line_number':418,'multiline':False]['text':' Default behavior for all tests using this mock.','line_number':425,'multiline':False]['text':' Usually we're just skipping the cloners in this test, so we provide an empty list','line_number':432,'multiline':False]['text':' of databases.','line_number':433,'multiline':False]['text':' When creating InitialSyncer, we wrap _onCompletion so that we can override the','line_number':503,'multiline':False]['text':' InitialSyncer's callback behavior post-construction.','line_number':504,'multiline':False]['text':' See InitialSyncerTransitionsToCompleteWhenFinishCallbackThrowsException.','line_number':505,'multiline':False]['text':'*
     * Note: An empty cmdName will skip validation.
     ','line_number':546,'multiline':True]['text':'*
 * Generates a replSetGetRBID response.
 ','line_number':622,'multiline':True]['text':'*
 * Generates a cursor response for a Fetcher to consume.
 ','line_number':629,'multiline':True]['text':'*
 * Generates a listDatabases response for an AllDatabaseCloner to consume.
 ','line_number':660,'multiline':True]['text':'*
 * Generates oplog entries with the given number used for the timestamp.
 ','line_number':676,'multiline':True]['text':' Insert an arbitrary command name so that the oplog entry is valid.','line_number':684,'multiline':False]['text':' optime','line_number':688,'multiline':False]['text':' op type','line_number':689,'multiline':False]['text':' namespace','line_number':690,'multiline':False]['text':' uuid','line_number':691,'multiline':False]['text':' fromMigrate','line_number':692,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':693,'multiline':False]['text':' version','line_number':694,'multiline':False]['text':' o','line_number':695,'multiline':False]['text':' o2','line_number':696,'multiline':False]['text':' sessionInfo','line_number':697,'multiline':False]['text':' upsert','line_number':698,'multiline':False]['text':' wall clock time','line_number':699,'multiline':False]['text':' statement ids','line_number':700,'multiline':False]['text':' optime of previous write within same transaction','line_number':701,'multiline':False]['text':' pre-image optime','line_number':702,'multiline':False]['text':' post-image optime','line_number':703,'multiline':False]['text':' ShardId of resharding recipient','line_number':704,'multiline':False]['text':' _id','line_number':705,'multiline':False]['text':' needsRetryImage','line_number':706,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':737,'multiline':False]['text':' Null task executor in external state.','line_number':765,'multiline':False]['text':' Null callback function.','line_number':779,'multiline':False]['text':' SyncSourceSelector returns an invalid sync source so InitialSyncer is stuck waiting for','line_number':815,'multiline':False]['text':' another sync source in 'Options::syncSourceRetryWait' ms.','line_number':816,'multiline':False]['text':' Cannot startup initial syncer again since it's in the Complete state.','line_number':828,'multiline':False]['text':' Initial syncer is inactive when it's in the Complete state.','line_number':837,'multiline':False]['text':' Initial sync flag should not be set before starting.','line_number':845,'multiline':False]['text':' Initial sync flag should be set.','line_number':851,'multiline':False]['text':' Set initial data timestamp forward first.','line_number':859,'multiline':False]['text':' This will cancel the _startInitialSyncAttemptCallback() task scheduled by startup().','line_number':879,'multiline':False]['text':' Depending on which InitialSyncer stage (_chooseSyncSource or _rollbackCheckerResetCallback)','line_number':882,'multiline':False]['text':' was interrupted by shutdown(), we may have to request the network interface to deliver','line_number':883,'multiline':False]['text':' cancellation signals to the InitialSyncer callbacks in for InitialSyncer to run to','line_number':884,'multiline':False]['text':' completion.','line_number':885,'multiline':False]['text':' Override chooseNewSyncSource() result in SyncSourceSelectorMock before calling startup()','line_number':898,'multiline':False]['text':' because InitialSyncer will look for a valid sync source immediately after startup.','line_number':899,'multiline':False]['text':' Run first sync source selection attempt.','line_number':904,'multiline':False]['text':' InitialSyncer will not drop user databases while looking for a valid sync source.','line_number':907,'multiline':False]['text':' First sync source selection attempt failed. Update SyncSourceSelectorMock to return valid','line_number':910,'multiline':False]['text':' sync source next time chooseNewSyncSource() is called.','line_number':911,'multiline':False]['text':' Advance clock until the next sync source selection attempt.','line_number':914,'multiline':False]['text':' DataReplictor drops user databases after obtaining a valid sync source.','line_number':917,'multiline':False]['text':'*
 * Advances executor clock so that InitialSyncer exhausts all 'chooseSyncSourceMaxAttempts' (server
 * parameter numInitialSyncConnectAttempts) sync source selection attempts.
 * If SyncSourceSelectorMock keeps returning an invalid sync source, InitialSyncer will retry every
 * '_options.syncSourceRetryWait' ms up to a maximum of 'chooseSyncSourceMaxAttempts' attempts.
 ','line_number':923,'multiline':True]['text':' Override chooseNewSyncSource() result in SyncSourceSelectorMock before calling startup()','line_number':940,'multiline':False]['text':' because InitialSyncer will look for a valid sync source immediately after startup.','line_number':941,'multiline':False]['text':' Confirms that InitialSyncer keeps retrying initial sync.','line_number':953,'multiline':False]['text':' Make every initial sync attempt fail early by having the sync source selector always return an','line_number':954,'multiline':False]['text':' invalid sync source.','line_number':955,'multiline':False]['text':' Check number of failed attempts in stats.','line_number':976,'multiline':False]['text':' Set the last optime to an arbitrary nonzero value. Also set last wall time to an arbitrary','line_number':994,'multiline':False]['text':' non-minimum value.','line_number':995,'multiline':False]['text':' Start initial sync.','line_number':999,'multiline':False]['text':' Simulate a failed initial sync attempt','line_number':1005,'multiline':False]['text':' Make sure the initial sync attempt reset optimes.','line_number':1011,'multiline':False]['text':' This will cancel the _chooseSyncSourceCallback() task scheduled at getNet()->now() +','line_number':1032,'multiline':False]['text':' '_options.syncSourceRetryWait'.','line_number':1033,'multiline':False]['text':' Advance clock so that we run all but the last sync source callback.','line_number':1069,'multiline':False]['text':' Last choose sync source attempt should now be scheduled. Advance clock so we fail last','line_number':1073,'multiline':False]['text':' choose sync source attempt which cause the next initial sync attempt to be scheduled.','line_number':1074,'multiline':False]['text':' This test verifies that the initial syncer will still transition to a complete state even if','line_number':1086,'multiline':False]['text':' the completion callback function throws an exception.','line_number':1087,'multiline':False]['text':' Depending on which InitialSyncer stage (_chooseSyncSource or _rollbackCheckerResetCallback)','line_number':1148,'multiline':False]['text':' was interrupted by shutdown(), we may have to request the network interface to deliver','line_number':1149,'multiline':False]['text':' cancellation signals to the InitialSyncer callbacks in for InitialSyncer to run to','line_number':1150,'multiline':False]['text':' completion.','line_number':1151,'multiline':False]['text':' InitialSyncer should reset 'InitialSyncer::_onCompletion' after running callback function','line_number':1158,'multiline':False]['text':' for the last time before becoming inactive.','line_number':1159,'multiline':False]['text':' This ensures that we release resources associated with 'InitialSyncer::_onCompletion'.','line_number':1160,'multiline':False]['text':' We are not interested in proceeding beyond the dropUserDB stage so we inject a failure','line_number':1165,'multiline':False]['text':' after setting '_storageInterfaceWorkDone.droppedUserDBs' to true.','line_number':1166,'multiline':False]['text':' Simulate an exception thrown at the dropReplicatedDatabases stage and test that the initial','line_number':1188,'multiline':False]['text':' syncer handles exceptions correctly.','line_number':1189,'multiline':False]['text':' replSetGetRBID is the first remote command to be scheduled by the initial syncer after','line_number':1215,'multiline':False]['text':' creating the oplog collection.','line_number':1216,'multiline':False]['text':' The rollback id request is sent immediately after oplog truncation. We shut the task executor','line_number':1239,'multiline':False]['text':' down before returning from truncate() to make the scheduleRemoteCommand() call for','line_number':1240,'multiline':False]['text':' replSetGetRBID fail.','line_number':1241,'multiline':False]['text':' Since we need to request the NetworkInterfaceMock to deliver the cancellation event,','line_number':1287,'multiline':False]['text':' the InitialSyncer has to be in a pre-completion state (ie. ShuttingDown).','line_number':1288,'multiline':False]['text':' We reject the 'find' command on the oplog and save the request for inspection at the end of','line_number':1324,'multiline':False]['text':' this test case.','line_number':1325,'multiline':False]['text':' Base rollback ID.','line_number':1343,'multiline':False]['text':' Base rollback ID.','line_number':1367,'multiline':False]['text':' Base rollback ID.','line_number':1393,'multiline':False]['text':' We reject the 'find' command for the begin fetching optime and save the request for','line_number':1409,'multiline':False]['text':' inspection at the end of this test case.','line_number':1410,'multiline':False]['text':' Base rollback ID.','line_number':1429,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1433,'multiline':False]['text':' Base rollback ID.','line_number':1456,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1460,'multiline':False]['text':' Base rollback ID.','line_number':1485,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1488,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1491,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1492,'multiline':False]['text':' We reject the 'find' command on the oplog and save the request for inspection at the end of','line_number':1508,'multiline':False]['text':' this test case.','line_number':1509,'multiline':False]['text':' Base rollback ID.','line_number':1520,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1523,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1534,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1535,'multiline':False]['text':' Base rollback ID.','line_number':1563,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1566,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1569,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1570,'multiline':False]['text':' Base rollback ID.','line_number':1598,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1601,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1604,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1605,'multiline':False]['text':' Base rollback ID.','line_number':1633,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1636,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1639,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1640,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1646,'multiline':False]['text':' Base rollback ID.','line_number':1665,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1668,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1671,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1672,'multiline':False]['text':' Last oplog entry first attempt - retriable error.','line_number':1678,'multiline':False]['text':' InitialSyncer stays active because it resends the find request for the last oplog entry.','line_number':1683,'multiline':False]['text':' Last oplog entry second attempt.','line_number':1686,'multiline':False]['text':' Base rollback ID.','line_number':1702,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1705,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1708,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1709,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1715,'multiline':False]['text':' OpTimeAndWallTime now uses the IDL parser, so the status code returned is from','line_number':1721,'multiline':False]['text':' IDLParserContext','line_number':1722,'multiline':False]['text':' Base rollback ID.','line_number':1740,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1743,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1746,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1747,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1752,'multiline':False]['text':' Feature Compatibility Version.','line_number':1755,'multiline':False]['text':' We reject the first find command that is on the fCV collection.','line_number':1767,'multiline':False]['text':' Base rollback ID.','line_number':1785,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1788,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1791,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1792,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1797,'multiline':False]['text':' This is to demonstrate the unit testing mock framework. The logic is the same as the following','line_number':1808,'multiline':False]['text':' test.','line_number':1809,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':1810,'multiline':False]['text':' This is what we want to test.','line_number':1824,'multiline':False]['text':' Start the real work.','line_number':1832,'multiline':False]['text':' Run mock.','line_number':1835,'multiline':False]['text':' Base rollback ID.','line_number':1853,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1856,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1859,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1860,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1865,'multiline':False]['text':' Base rollback ID.','line_number':1891,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1894,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1897,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1898,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1903,'multiline':False]['text':' Base rollback ID.','line_number':1926,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1929,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1932,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1933,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1939,'multiline':False]['text':' FCV first attempt - retriable error.','line_number':1942,'multiline':False]['text':' InitialSyncer stays active because it resends the find request for the fCV.','line_number':1947,'multiline':False]['text':' FCV second attempt.','line_number':1950,'multiline':False]['text':' Base rollback ID.','line_number':1966,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':1969,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':1972,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':1973,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':1979,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':1997,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':2008,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':2017,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':2025,'multiline':False]['text':' Base rollback ID.','line_number':2042,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2045,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2048,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2049,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2055,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':2059,'multiline':False]['text':' We shut it down so we do not have to finish initial sync. If the fCV fetcher got an error,','line_number':2064,'multiline':False]['text':' we would return that.','line_number':2065,'multiline':False]['text':' This is to demonstrate the unit testing mock framework. The logic is the same as the following','line_number':2073,'multiline':False]['text':' test.','line_number':2074,'multiline':False]['text':' Only respond to oplog queries twice to block the initial syncer on getting stopTimestamp.','line_number':2087,'multiline':False]['text':' This is what we want to test.','line_number':2095,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':2096,'multiline':False]['text':' Start the real work.','line_number':2112,'multiline':False]['text':' Simulate response to OplogFetcher so it has enough operations to reach end timestamp.','line_number':2117,'multiline':False]['text':' Simulate a network error response that restarts the OplogFetcher.','line_number':2119,'multiline':False]['text':' Base rollback ID.','line_number':2158,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2161,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2164,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2165,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2171,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2175,'multiline':False]['text':' Feature Compatibility Version.','line_number':2178,'multiline':False]['text':' Simulate response to OplogFetcher so it has enough operations to reach end timestamp.','line_number':2181,'multiline':False]['text':' Simulate a network error response that restarts the OplogFetcher.','line_number':2184,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2189,'multiline':False]['text':' _multiApplierCallback() will cancel the _getNextApplierBatchCallback() task after setting','line_number':2198,'multiline':False]['text':' the completion status.','line_number':2199,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':2200,'multiline':False]['text':' _oplogFetcherCallback().','line_number':2201,'multiline':False]['text':' Keep the cloner from finishing so end-of-clone-stage network events don't interfere.','line_number':2219,'multiline':False]['text':' Base rollback ID.','line_number':2222,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2225,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2228,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2229,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2235,'multiline':False]['text':' Feature Compatibility Version.','line_number':2240,'multiline':False]['text':' Simulate an error response to the OplogFetcher.','line_number':2243,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':2254,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':2255,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':2256,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':2258,'multiline':False]['text':' Base rollback ID.','line_number':2275,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2278,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2281,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2282,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2288,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2297,'multiline':False]['text':' Feature Compatibility Version.','line_number':2300,'multiline':False]['text':' Simulate cursor closing on sync source.','line_number':2303,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2307,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':2310,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':2326,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':2327,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':2328,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':2330,'multiline':False]['text':' Base rollback ID.','line_number':2347,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2350,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2353,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2354,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2360,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2364,'multiline':False]['text':' Feature Compatibility Version.','line_number':2367,'multiline':False]['text':' Simulate cursor closing on sync source.','line_number':2370,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2377,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':2380,'multiline':False]['text':' Base rollback ID.','line_number':2406,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2409,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2412,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2413,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2419,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2423,'multiline':False]['text':' Feature Compatibility Version.','line_number':2426,'multiline':False]['text':' Simulate cursor closing on sync source.','line_number':2429,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2436,'multiline':False]['text':' Return an oplog entry with an optime that is more recent than what the completed','line_number':2437,'multiline':False]['text':' OplogFetcher has read from the sync source.','line_number':2438,'multiline':False]['text':' Make the initial listDatabases reply an error.','line_number':2451,'multiline':False]['text':' Base rollback ID.','line_number':2462,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2465,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2468,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2469,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2475,'multiline':False]['text':' Feature Compatibility Version.','line_number':2478,'multiline':False]['text':' Base rollback ID.','line_number':2497,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2500,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2503,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2504,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2510,'multiline':False]['text':' Feature Compatibility Version.','line_number':2513,'multiline':False]['text':' Make the third last oplog entry fetcher command fail. Allow all other requests to be','line_number':2529,'multiline':False]['text':' scheduled.','line_number':2530,'multiline':False]['text':' Base rollback ID.','line_number':2556,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2559,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2562,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2563,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2569,'multiline':False]['text':' Feature Compatibility Version.','line_number':2572,'multiline':False]['text':' Base rollback ID.','line_number':2592,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2595,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2598,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2599,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2605,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2609,'multiline':False]['text':' Feature Compatibility Version.','line_number':2612,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2616,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':2626,'multiline':False]['text':' setting the completion status.','line_number':2627,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':2628,'multiline':False]['text':' _oplogFetcherCallback().','line_number':2629,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':2638,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':2639,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':2640,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':2642,'multiline':False]['text':' Base rollback ID.','line_number':2659,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2662,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2665,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2666,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2672,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2676,'multiline':False]['text':' Feature Compatibility Version.','line_number':2679,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2683,'multiline':False]['text':' Advance the clock but not enough to terminate.','line_number':2693,'multiline':False]['text':' Retry fetch of oplog entry associated with the stopTimestamp.','line_number':2696,'multiline':False]['text':' Advance the clock but not enough to terminate.','line_number':2706,'multiline':False]['text':' Second retry succeeds.','line_number':2709,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':2713,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':2718,'multiline':False]['text':' setting the completion status.','line_number':2719,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':2720,'multiline':False]['text':' _oplogFetcherCallback().','line_number':2721,'multiline':False]['text':' Base rollback ID.','line_number':2741,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2744,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2747,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2748,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2754,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2758,'multiline':False]['text':' Feature Compatibility Version.','line_number':2761,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2765,'multiline':False]['text':' Advance the clock enough to terminate.  We reduce allowable retry period rather than','line_number':2775,'multiline':False]['text':' advancing the clock because we don't want OplogFetcher (which uses the same clock and has','line_number':2776,'multiline':False]['text':' a 30-second timeout in the network layer) to fail instead.','line_number':2777,'multiline':False]['text':' Retry fetch of oplog entry associated with the stopTimestamp.','line_number':2781,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':2791,'multiline':False]['text':' setting the completion status.','line_number':2792,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':2793,'multiline':False]['text':' _oplogFetcherCallback().','line_number':2794,'multiline':False]['text':' Base rollback ID.','line_number':2814,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2817,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2820,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2821,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2827,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2831,'multiline':False]['text':' Feature Compatibility Version.','line_number':2834,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2838,'multiline':False]['text':' Base rollback ID.','line_number':2865,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2868,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2871,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2872,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2878,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2882,'multiline':False]['text':' Feature Compatibility Version.','line_number':2885,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2889,'multiline':False]['text':' Blackhole this request which will be canceled when oplog fetcher fails.','line_number':2890,'multiline':False]['text':' Make OplogFetcher fail.','line_number':2897,'multiline':False]['text':' _oplogFetcherCallback() will shut down the '_lastOplogEntryFetcher' after setting the','line_number':2901,'multiline':False]['text':' completion status.','line_number':2902,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':2903,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData().','line_number':2904,'multiline':False]['text':' Base rollback ID.','line_number':2926,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2929,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2932,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2933,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2939,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2943,'multiline':False]['text':' Feature Compatibility Version.','line_number':2946,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':2950,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':2955,'multiline':False]['text':' setting the completion status.','line_number':2956,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':2957,'multiline':False]['text':' _oplogFetcherCallback().','line_number':2958,'multiline':False]['text':' Base rollback ID.','line_number':2978,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':2981,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':2984,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':2985,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':2991,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':2995,'multiline':False]['text':' Feature Compatibility Version.','line_number':2998,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3002,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':3005,'multiline':False]['text':' setting the completion status.','line_number':3006,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3007,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3008,'multiline':False]['text':' Base rollback ID.','line_number':3045,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3048,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3051,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3052,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3058,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3062,'multiline':False]['text':' Feature Compatibility Version.','line_number':3065,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3069,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':3072,'multiline':False]['text':' setting the completion status.','line_number':3073,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3074,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3075,'multiline':False]['text':' Base rollback ID.','line_number':3115,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3118,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3121,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3122,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3128,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3132,'multiline':False]['text':' Feature Compatibility Version.','line_number':3135,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3139,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':3142,'multiline':False]['text':' setting the completion status.','line_number':3143,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3144,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3145,'multiline':False]['text':' Make the second replSetGetRBID command fail. Allow all other requests to be scheduled.','line_number':3161,'multiline':False]['text':' Base rollback ID.','line_number':3185,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3188,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3191,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3192,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3198,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3202,'multiline':False]['text':' Feature Compatibility Version.','line_number':3205,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3209,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':3212,'multiline':False]['text':' setting the completion status.','line_number':3213,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3214,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3215,'multiline':False]['text':' Base rollback ID.','line_number':3237,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3240,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3243,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3244,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3250,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3254,'multiline':False]['text':' Feature Compatibility Version.','line_number':3257,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3261,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3264,'multiline':False]['text':' _rollbackCheckerCheckForRollbackCallback() will shut down the OplogFetcher after setting','line_number':3271,'multiline':False]['text':' the completion status.','line_number':3272,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3273,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3274,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':3283,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':3284,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':3285,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':3287,'multiline':False]['text':' Base rollback ID.','line_number':3305,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3308,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3311,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3312,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3318,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3322,'multiline':False]['text':' Feature Compatibility Version.','line_number':3325,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3329,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3332,'multiline':False]['text':' Advance the clock, but not enough to terminate.','line_number':3338,'multiline':False]['text':' Last rollback checker replSetGetRBID command retry.','line_number':3341,'multiline':False]['text':' Last rollback checker replSetGetRBID command second retry.','line_number':3348,'multiline':False]['text':' Deliver cancellation to OplogFetcher.','line_number':3353,'multiline':False]['text':' Base rollback ID.','line_number':3374,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3377,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3380,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3381,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3387,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3391,'multiline':False]['text':' Feature Compatibility Version.','line_number':3394,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3398,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3401,'multiline':False]['text':' Advance the clock enough to terminate.  We reduce allowable retry period rather than','line_number':3407,'multiline':False]['text':' advancing the clock because we don't want OplogFetcher (which uses the same clock and has','line_number':3408,'multiline':False]['text':' a 30-second timeout in the network layer) to fail instead.','line_number':3409,'multiline':False]['text':' Last rollback checker replSetGetRBID command retry.','line_number':3413,'multiline':False]['text':' Deliver cancellation to OplogFetcher.','line_number':3420,'multiline':False]['text':' Base rollback ID.','line_number':3440,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3443,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3446,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3447,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3453,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3457,'multiline':False]['text':' Feature Compatibility Version.','line_number':3460,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3464,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3467,'multiline':False]['text':' _rollbackCheckerCheckForRollbackCallback() will shut down the OplogFetcher after setting','line_number':3472,'multiline':False]['text':' the completion status.','line_number':3473,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3474,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3475,'multiline':False]['text':' Base rollback ID.','line_number':3498,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3501,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3504,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3505,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3511,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3515,'multiline':False]['text':' Feature Compatibility Version.','line_number':3518,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3522,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3525,'multiline':False]['text':' Make OplogFetcher fail.','line_number':3531,'multiline':False]['text':' _oplogFetcherCallback() will shut down the last rollback checker after setting the','line_number':3535,'multiline':False]['text':' completion status.','line_number':3536,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3537,'multiline':False]['text':' _rollbackCheckerCheckForRollbackCallback().','line_number':3538,'multiline':False]['text':' Base rollback ID.','line_number':3560,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3563,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3566,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3567,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3573,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3577,'multiline':False]['text':' Feature Compatibility Version.','line_number':3580,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3584,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3587,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':3599,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':3600,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':3601,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':3603,'multiline':False]['text':' Base rollback ID.','line_number':3624,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3627,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3630,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3631,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3637,'multiline':False]['text':' Instead of fast forwarding to AllDatabaseCloner completion by returning an empty list of','line_number':3640,'multiline':False]['text':' database names, we'll simulate copying a single database with a single collection on the','line_number':3641,'multiline':False]['text':' sync source.  We must do this setup before responding to the FCV, to avoid a race.','line_number':3642,'multiline':False]['text':' Set up data for "a"','line_number':3647,'multiline':False]['text':' listCollections for "a"','line_number':3651,'multiline':False]['text':' cursorId ','line_number':3655,'multiline':True]['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':3663,'multiline':False]['text':' metrics.','line_number':3664,'multiline':False]['text':' count:a','line_number':3667,'multiline':False]['text':' listIndexes:a','line_number':3670,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3682,'multiline':False]['text':' Feature Compatibility Version.','line_number':3685,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3689,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':3692,'multiline':False]['text':' Deliver cancellation to OplogFetcher.','line_number':3698,'multiline':False]['text':' Base rollback ID.','line_number':3723,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3726,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3729,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3730,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3736,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3740,'multiline':False]['text':' Feature Compatibility Version.','line_number':3743,'multiline':False]['text':' The cloners start right after the FCV is received. The oplog entry fetcher associated','line_number':3747,'multiline':False]['text':' with the stopTimestamp will not start until the cloners are done, so wait for them.','line_number':3748,'multiline':False]['text':' Before processing scheduled last oplog entry fetcher response, set flag in','line_number':3751,'multiline':False]['text':' TaskExecutorMock so that InitialSyncer will fail to schedule','line_number':3752,'multiline':False]['text':' _getNextApplierBatchCallback().','line_number':3753,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3758,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':3761,'multiline':False]['text':' setting the completion status.','line_number':3762,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3763,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3764,'multiline':False]['text':' Base rollback ID.','line_number':3786,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3789,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3792,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3793,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3799,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3803,'multiline':False]['text':' Feature Compatibility Version.','line_number':3806,'multiline':False]['text':' Before processing scheduled last oplog entry fetcher response, set flag in','line_number':3810,'multiline':False]['text':' TaskExecutorMock so that InitialSyncer will fail to schedule second','line_number':3811,'multiline':False]['text':' _getNextApplierBatchCallback() at (now + options.getApplierBatchCallbackRetryWait).','line_number':3812,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3817,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':3820,'multiline':False]['text':' setting the completion status.','line_number':3821,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3822,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3823,'multiline':False]['text':' Base rollback ID.','line_number':3845,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3848,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3851,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3852,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3858,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3862,'multiline':False]['text':' Feature Compatibility Version.','line_number':3865,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3869,'multiline':False]['text':' Since we black holed OplogFetcher's find request, _getNextApplierBatch_inlock() will','line_number':3872,'multiline':False]['text':' not return any operations for us to apply, leading to _getNextApplierBatchCallback()','line_number':3873,'multiline':False]['text':' rescheduling itself at new->now() + _options.getApplierBatchCallbackRetryWait.','line_number':3874,'multiline':False]['text':' _getNextApplierBatch_inlock() returns BadValue when it gets an oplog entry with an unexpected','line_number':3893,'multiline':False]['text':' version (not OplogEntry::kOplogVersion).','line_number':3894,'multiline':False]['text':' Base rollback ID.','line_number':3904,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3907,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3910,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3911,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3917,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3921,'multiline':False]['text':' Feature Compatibility Version.','line_number':3924,'multiline':False]['text':' Simulate an OplogFetcher batch with bad oplog entries that will be added to the oplog','line_number':3927,'multiline':False]['text':' buffer and processed by _getNextApplierBatch_inlock().','line_number':3928,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':3932,'multiline':False]['text':' _getNextApplierBatchCallback() will shut down the OplogFetcher after setting the','line_number':3935,'multiline':False]['text':' completion status.','line_number':3936,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':3937,'multiline':False]['text':' _oplogFetcherCallback().','line_number':3938,'multiline':False]['text':' _getNextApplierBatch_inlock() returns BadValue when it gets an oplog entry with an unexpected','line_number':3957,'multiline':False]['text':' version (not OplogEntry::kOplogVersion).','line_number':3958,'multiline':False]['text':' Enable 'rsSyncApplyStop' so that _getNextApplierBatch_inlock() returns an empty batch of','line_number':3963,'multiline':False]['text':' operations instead of a batch containing an oplog entry with a bad version.','line_number':3964,'multiline':False]['text':' Base rollback ID.','line_number':3974,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':3977,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':3980,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':3981,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':3987,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':3990,'multiline':False]['text':' Feature Compatibility Version.','line_number':3993,'multiline':False]['text':' Simulate an OplogFetcher batch with bad oplog entries that will be added to the oplog','line_number':3996,'multiline':False]['text':' buffer and processed by _getNextApplierBatch_inlock().','line_number':3997,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4001,'multiline':False]['text':' Since the 'rsSyncApplyStop' fail point is enabled, InitialSyncer will get an empty','line_number':4004,'multiline':False]['text':' batch of operations from _getNextApplierBatch_inlock() even though the oplog buffer','line_number':4005,'multiline':False]['text':' is not empty.','line_number':4006,'multiline':False]['text':' If the fail point is not working, the initial sync status will be set to BadValue (due to the','line_number':4009,'multiline':False]['text':' bad oplog entry in the oplog buffer) and shutdown() will not be able to overwrite this status','line_number':4010,'multiline':False]['text':' with CallbackCanceled.','line_number':4011,'multiline':False]['text':' Otherwise, shutdown() will cancel both the OplogFetcher and the scheduled','line_number':4012,'multiline':False]['text':' _getNextApplierBatchCallback() task. The final initial sync status will be CallbackCanceled.','line_number':4013,'multiline':False]['text':' Base rollback ID.','line_number':4035,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4038,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':4041,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4042,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4048,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':4052,'multiline':False]['text':' Feature Compatibility Version.','line_number':4055,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4059,'multiline':False]['text':' _getNextApplierBatchCallback() should have rescheduled itself.','line_number':4062,'multiline':False]['text':' We'll insert some operations in the oplog buffer so that we'll attempt to schedule','line_number':4063,'multiline':False]['text':' MultiApplier next time _getNextApplierBatchCallback() runs.','line_number':4064,'multiline':False]['text':' Make MultiApplier::startup() fail.','line_number':4067,'multiline':False]['text':' Advance clock until _getNextApplierBatchCallback() runs.','line_number':4072,'multiline':False]['text':' _getNextApplierBatchCallback() will shut down the OplogFetcher after setting the','line_number':4076,'multiline':False]['text':' completion status.','line_number':4077,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':4078,'multiline':False]['text':' _oplogFetcherCallback().','line_number':4079,'multiline':False]['text':' Base rollback ID.','line_number':4103,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4106,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':4109,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4110,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4116,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':4120,'multiline':False]['text':' Feature Compatibility Version.','line_number':4124,'multiline':False]['text':' Simulate an OplogFetcher batch that has enough operations to trigger MultiApplier.','line_number':4127,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4131,'multiline':False]['text':' _multiApplierCallback() will shut down the OplogFetcher after setting the completion','line_number':4134,'multiline':False]['text':' status.','line_number':4135,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':4136,'multiline':False]['text':' _oplogFetcherCallback().','line_number':4137,'multiline':False]['text':' Base rollback ID.','line_number':4157,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4160,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':4163,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4164,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4170,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':4174,'multiline':False]['text':' Feature Compatibility Version.','line_number':4177,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4181,'multiline':False]['text':' Send error to _oplogFetcherCallback().','line_number':4184,'multiline':False]['text':' _oplogFetcherCallback() will cancel the _getNextApplierBatchCallback() task after setting','line_number':4188,'multiline':False]['text':' the completion status.','line_number':4189,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':4190,'multiline':False]['text':' _oplogFetcherCallback().','line_number':4191,'multiline':False]['text':' Base rollback ID.','line_number':4213,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4216,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':4219,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4220,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4226,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':4230,'multiline':False]['text':' Feature Compatibility Version.','line_number':4233,'multiline':False]['text':' Simulate an OplogFetcher batch that has enough operations to reach end timestamp.','line_number':4236,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4241,'multiline':False]['text':' _multiApplierCallback() will cancel the _getNextApplierBatchCallback() task after setting','line_number':4248,'multiline':False]['text':' the completion status.','line_number':4249,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':4250,'multiline':False]['text':' _oplogFetcherCallback().','line_number':4251,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':4271,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':4272,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':4273,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':4275,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':4287,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':4288,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':4289,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':4291,'multiline':False]['text':' To make InitialSyncer apply multiple batches, we make the third and last operation a command','line_number':4304,'multiline':False]['text':' so that it will go into a separate batch from the second operation. First operation is the','line_number':4305,'multiline':False]['text':' last fetched entry before data cloning and is not applied.','line_number':4306,'multiline':False]['text':' Base rollback ID.','line_number':4314,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4317,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':4320,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4321,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4327,'multiline':False]['text':' Instead of fast forwarding to AllDatabaseCloner completion by returning an empty list of','line_number':4330,'multiline':False]['text':' database names, we'll simulate copying a single database with a single collection on the','line_number':4331,'multiline':False]['text':' sync source.  We must do this setup before responding to the FCV, to avoid a race.','line_number':4332,'multiline':False]['text':' Set up data for "a"','line_number':4338,'multiline':False]['text':' listCollections for "a"','line_number':4342,'multiline':False]['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':4354,'multiline':False]['text':' metrics.','line_number':4355,'multiline':False]['text':' count:a','line_number':4358,'multiline':False]['text':' listIndexes:a','line_number':4361,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':4373,'multiline':False]['text':' Feature Compatibility Version.','line_number':4376,'multiline':False]['text':' Simulate an OplogFetcher batch that has enough operations to reach end timestamp.','line_number':4379,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4384,'multiline':False]['text':' Last rollback ID.','line_number':4387,'multiline':False]['text':' _multiApplierCallback() will cancel the _getNextApplierBatchCallback() task after setting','line_number':4392,'multiline':False]['text':' the completion status.','line_number':4393,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':4394,'multiline':False]['text':' _oplogFetcherCallback().','line_number':4395,'multiline':False]['text':' This fail point makes chooseSyncSourceCallback fail with an InvalidSyncSource error.','line_number':4410,'multiline':False]['text':' Keep the cloner from finishing so end-of-clone-stage network events don't interfere.','line_number':4433,'multiline':False]['text':' Base rollback ID.','line_number':4436,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4439,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':4442,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4443,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4449,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':4453,'multiline':False]['text':' Feature Compatibility Version.','line_number':4456,'multiline':False]['text':' Simulate a batch to the OplogFetcher.','line_number':4459,'multiline':False]['text':' Ensure that OplogFetcher fails with an OplogOutOfOrder error by simulating a','line_number':4462,'multiline':False]['text':' subsequent batch to the OplogFetcher with oplog entries containing the following','line_number':4463,'multiline':False]['text':' timestamps (most recently processed oplog entry has a timestamp of 1):','line_number':4464,'multiline':False]['text':' (last=1), 5, 4','line_number':4465,'multiline':False]['text':' Set the network clock to the current date to make sure we are not starting up','line_number':4487,'multiline':False]['text':' initial sync at the UNIX epoch time.','line_number':4488,'multiline':False]['text':' Use a big enough data size to explicitly test the case where','line_number':4493,'multiline':False]['text':' (initialSyncElapsedMillis / approxTotalBytesCopied) is less than 1.','line_number':4494,'multiline':False]['text':' Hang after all docs have been cloned in collection 'a.a'.','line_number':4502,'multiline':False]['text':' Keep the cloner from finishing so end-of-clone-stage network events don't interfere.','line_number':4509,'multiline':False]['text':' Base rollback ID.','line_number':4514,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4519,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request,','line_number':4522,'multiline':False]['text':' which will cause the beginFetchingTimestamp to be set to the','line_number':4523,'multiline':False]['text':' defaultBeginFetchingTimestamp.','line_number':4524,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4530,'multiline':False]['text':' Feature Compatibility Version.','line_number':4533,'multiline':False]['text':' Set up the successful cloner run.','line_number':4537,'multiline':False]['text':' listDatabases: a, b','line_number':4538,'multiline':False]['text':' We do not populate database 'b' with data as we don't actually complete initial sync in','line_number':4539,'multiline':False]['text':' this test.','line_number':4540,'multiline':False]['text':' The AllDatabaseCloner post stage calls dbStats to record initial sync progress','line_number':4543,'multiline':False]['text':' metrics. This will be used to calculate both the data size of "a" and "b".','line_number':4544,'multiline':False]['text':' Set up data for "a"','line_number':4547,'multiline':False]['text':' listCollections for "a"','line_number':4553,'multiline':False]['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':4565,'multiline':False]['text':' metrics.','line_number':4566,'multiline':False]['text':' count:a','line_number':4570,'multiline':False]['text':' listIndexes:a','line_number':4573,'multiline':False]['text':' Release the 'hangBeforeCloningFailPoint' to continue the cloning phase.','line_number':4583,'multiline':False]['text':' Wait for the server to have reached the end of cloning collection 'a.a'. The size of this','line_number':4586,'multiline':False]['text':' collection is expected to equal 'dbSize'.','line_number':4587,'multiline':False]['text':' Each of the two databases to be cloned have a size of 'dbSize'.','line_number':4603,'multiline':False]['text':' Deliver cancellation signal to callbacks.','line_number':4617,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':4623,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':4624,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':4625,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':4627,'multiline':False]['text':' Skip clearing initial sync progress so that we can check initialSyncStatus fields after','line_number':4634,'multiline':False]['text':' initial sync is complete.','line_number':4635,'multiline':False]['text':' Play first 2 responses to ensure initial syncer has started the oplog fetcher.','line_number':4652,'multiline':False]['text':' Base rollback ID.','line_number':4656,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4659,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which','line_number':4662,'multiline':False]['text':' will cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4663,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4669,'multiline':False]['text':' Feature Compatibility Version.','line_number':4672,'multiline':False]['text':' Deliver cancellation to OplogFetcher','line_number':4675,'multiline':False]['text':' Inject the listDatabases failure.','line_number':4700,'multiline':False]['text':' Wait for OplogFetcher to shutdown to ensure that the second attempt of initial sync has','line_number':4708,'multiline':False]['text':' started.','line_number':4709,'multiline':False]['text':' Play the first 2 responses of the successful round of responses to ensure that the','line_number':4718,'multiline':False]['text':' initial syncer starts the oplog fetcher.','line_number':4719,'multiline':False]['text':' Base rollback ID.','line_number':4726,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':4731,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which','line_number':4734,'multiline':False]['text':' will cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':4735,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':4741,'multiline':False]['text':' Feature Compatibility Version.','line_number':4744,'multiline':False]['text':' Set up the successful cloner run.','line_number':4785,'multiline':False]['text':' listDatabases: a','line_number':4786,'multiline':False]['text':' The AllDatabaseCloner post stage calls dbStats to record initial sync progress metrics.','line_number':4790,'multiline':False]['text':' Set up data for "a"','line_number':4793,'multiline':False]['text':' listCollections for "a"','line_number':4799,'multiline':False]['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':4811,'multiline':False]['text':' metrics.','line_number':4812,'multiline':False]['text':' count:a','line_number':4816,'multiline':False]['text':' listIndexes:a','line_number':4819,'multiline':False]['text':' Play all but last of the successful round of responses.','line_number':4830,'multiline':False]['text':' Release failpoint to let cloners finish.','line_number':4840,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':4847,'multiline':False]['text':' Send oplog entry with timestamp 7. InitialSyncer will update this end timestamp after','line_number':4848,'multiline':False]['text':' applying the first batch.','line_number':4849,'multiline':False]['text':' Expected applied ops to be a superset of this range: Timestamp(2,1) ... Timestamp(7,1).','line_number':4867,'multiline':False]['text':' Play last successful response.','line_number':4904,'multiline':False]['text':' Advance the clock by 10 seconds','line_number':4908,'multiline':False]['text':' Last rollback ID.','line_number':4911,'multiline':False]['text':' _multiApplierCallback() will cancel the _getNextApplierBatchCallback() task after setting','line_number':4917,'multiline':False]['text':' the completion status.','line_number':4918,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':4919,'multiline':False]['text':' _oplogFetcherCallback().','line_number':4920,'multiline':False]['text':' We should have elapsed 10 secs (from advancing the clock) + 1ms (initialSyncRetry wait time).','line_number':4941,'multiline':False]['text':' Expected applied ops to be a superset of this range: Timestamp(2,1) ... Timestamp(7,1).','line_number':4950,'multiline':False]['text':' Advance the clock by 100 seconds','line_number':4982,'multiline':False]['text':' Check the initial sync progress again to make sure the duration timer has stopped on finish.','line_number':4986,'multiline':False]['text':' Skip reconstructing prepared transactions at the end of initial sync because','line_number':4993,'multiline':False]['text':' InitialSyncerTest does not construct ServiceEntryPoint and this causes a segmentation fault','line_number':4994,'multiline':False]['text':' when reconstructPreparedTransactions uses DBDirectClient to call into ServiceEntryPoint.','line_number':4995,'multiline':False]['text':' Skip recovering tenant migration access blockers for the same reason as the above.','line_number':4997,'multiline':False]['text':' Skip clearing initial sync progress so that we can check initialSyncStatus fields after','line_number':5004,'multiline':False]['text':' initial sync is complete.','line_number':5005,'multiline':False]['text':' Base rollback ID.','line_number':5018,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':5021,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which will','line_number':5024,'multiline':False]['text':' cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':5025,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':5031,'multiline':False]['text':' Ensure second lastOplogFetch doesn't happen until we're ready for it.','line_number':5035,'multiline':False]['text':' Feature Compatibility Version.','line_number':5038,'multiline':False]['text':' Oplog entry associated with the stopTimestamp.','line_number':5042,'multiline':False]['text':' Advance the clock but not enough to terminate.','line_number':5060,'multiline':False]['text':' Retry fetch of oplog entry associated with the stopTimestamp.','line_number':5063,'multiline':False]['text':' Advance the clock but not enough to terminate.','line_number':5080,'multiline':False]['text':' Second retry succeeds.','line_number':5083,'multiline':False]['text':' Last rollback checker replSetGetRBID command.','line_number':5093,'multiline':False]['text':' _lastOplogEntryFetcherCallbackAfterCloningData() will shut down the OplogFetcher after','line_number':5098,'multiline':False]['text':' setting the completion status.','line_number':5099,'multiline':False]['text':' We call runReadyNetworkOperations() again to deliver the cancellation status to','line_number':5100,'multiline':False]['text':' _oplogFetcherCallback().','line_number':5101,'multiline':False]['text':' Base rollback ID.','line_number':5146,'multiline':False]['text':' Oplog entry associated with the defaultBeginFetchingTimestamp.','line_number':5149,'multiline':False]['text':' Send an empty optime as the response to the beginFetchingOptime find request, which','line_number':5152,'multiline':False]['text':' will cause the beginFetchingTimestamp to be set to the defaultBeginFetchingTimestamp.','line_number':5153,'multiline':False]['text':' Oplog entry associated with the beginApplyingTimestamp.','line_number':5159,'multiline':False]['text':' Set up the cloner data.  This must be done before providing the FCV to avoid races.','line_number':5162,'multiline':False]['text':' listDatabases','line_number':5163,'multiline':False]['text':' listCollections for "a"','line_number':5168,'multiline':False]['text':' listCollections data has to be broken up or it will trigger BSONObjTooLarge','line_number':5169,'multiline':False]['text':' spuriously. We want it to be triggered for the stats, not the listCollections.','line_number':5170,'multiline':False]['text':' The collection cloner pre-stage makes a remote call to collStats to store in-progress','line_number':5193,'multiline':False]['text':' metrics.','line_number':5194,'multiline':False]['text':' All document counts are 0.','line_number':5197,'multiline':False]['text':' listIndexes for all collections.','line_number':5200,'multiline':False]['text':' Feature Compatibility Version.','line_number':5211,'multiline':False]['text':' Simulate a batch to OplogFetcher.','line_number':5214,'multiline':False]['text':' Wait to reach the CollectionCloner, when stats should be populated;','line_number':5218,'multiline':False]['text':' This returns a valid document because we omit the cloner stats when they do not fit in a','line_number':5221,'multiline':False]['text':' BSON document.','line_number':5222,'multiline':False]['text':' Initial sync will attempt to log stats again at shutdown in a callback, where it should','line_number':5227,'multiline':False]['text':' not terminate because we now return a valid stats document.','line_number':5228,'multiline':False]['text':' Deliver cancellation signal to callbacks.','line_number':5232,'multiline':False]['text':' namespace','line_number':5238,'multiline':False]