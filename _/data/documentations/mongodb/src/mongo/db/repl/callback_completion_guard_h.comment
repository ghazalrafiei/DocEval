['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * RAII type that stores the result of callbacks written using the executor::TaskExecutor framework.
 * Only the first result passed to setResultAndCancelRemainingWork_inlock() is saved.
 * Calls '_onCompletion' on destruction with result.
 * We use an invariant to ensure that a result has been provided by the caller at destruction.
 ','line_number':42,'multiline':True]['text':'*
     * Function to cancel remaining work in caller after setting '_result'.
     * This function must be called while holding a lock on the caller's mutex.
     ','line_number':51,'multiline':True]['text':'*
     * Callback function to pass result to caller at destruction.
     ','line_number':57,'multiline':True]['text':'*
     * Constructor for this completion guard.
     * 'cancelRemainingWorkInLock' is called after setting the result to cancel any outstanding
     * work in the caller. 'cancelRemainingWorkInLock' must be called while holding a lock on the
     * caller's mutex.
     * 'onCompletion' is called with the result at destruction.
     ','line_number':62,'multiline':True]['text':'*
     * Invokes '_onCompletion' with the result.
     * Aborts if:
     *     result is not set; or
     *     '_onCompletion' throws an exception.
     ','line_number':72,'multiline':True]['text':'*
     * Sets result if called for the first time.
     * Cancels remaining work in caller.
     * Requires either a unique_lock or lock_guard to be passed in to ensure that we call
     * _cancelRemainingWork_inlock()) while we have a lock on the callers's mutex.
     ','line_number':80,'multiline':True]['text':'*
     * Once we verified that we have the caller's lock, this function is called by both
     * versions of setResultAndCancelRemainingWork_inlock() to set the result and cancel any
     * remaining work in the caller.
     ','line_number':92,'multiline':True]['text':' Called at most once after setting '_result'.','line_number':99,'multiline':False]['text':' Called at destruction with '_result'.','line_number':102,'multiline':False]['text':' _result is guarded by the mutex of the caller instance that owns this guard object.','line_number':105,'multiline':False]['text':' _onCompletion() must be called outside the caller's lock to avoid a deadlock.','line_number':119,'multiline':False]['text':' If '_onCompletion' throws an exception, the exception will be logged (by the terminate hook)','line_number':120,'multiline':False]['text':' and the program will abort.','line_number':121,'multiline':False]['text':' This is called at most once.','line_number':146,'multiline':False]['text':' namespace repl','line_number':150,'multiline':False]['text':' namespace mongo','line_number':151,'multiline':False]