['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':30,'multiline':False]['text':' There is a safe race condition in WaitForMajorityService where','line_number':80,'multiline':False]['text':' _periodicallyWaitForMajority can grab the mutex after the request has been marked as','line_number':81,'multiline':False]['text':' processed, but before it is removed from the queue. In this case, _isTestReady will','line_number':82,'multiline':False]['text':' flip without actually progressing through an OpTime, so we do the additional OpTime','line_number':83,'multiline':False]['text':' check.','line_number':84,'multiline':False]['text':' Note the code for read and the code for write is the same except the part we stub out for','line_number':186,'multiline':False]['text':' unit tests, so there is no gain in duplicating every unit test for read and for write.  We','line_number':187,'multiline':False]['text':' have just this one as a basic check of the shim.  The mock repl coordinator does not wait','line_number':188,'multiline':False]['text':' for read concern or for the majority snapshot to advance, so the only wait is for there','line_number':189,'multiline':False]['text':' to be a snapshot available.','line_number':190,'multiline':False]['text':' Setting the committed snapshot allows read concern to continue.','line_number':199,'multiline':False]['text':' Wait until the background thread picks up the queued opTime.','line_number':230,'multiline':False]['text':' The 2nd request has an earlier time, so it will interrupt 'laterOpTime' and skip the line.','line_number':233,'multiline':False]['text':' Wait for background thread to finish transitioning from waiting on laterOpTime to','line_number':237,'multiline':False]['text':' earlierOpTime.','line_number':238,'multiline':False]['text':' The future should now become ready without having to wait for any opTime.','line_number':353,'multiline':False]['text':' Wait until the background thread picks up the initial request. Otherwise, there is a race','line_number':366,'multiline':False]['text':' between the cancellation callback removing the initial request and the background thread','line_number':367,'multiline':False]['text':' waiting on it.','line_number':368,'multiline':False]['text':' The future should now become ready without having to wait for any opTime.','line_number':371,'multiline':False]['text':' The future should now become ready without having to wait for any opTime.','line_number':391,'multiline':False]['text':' Wait until the background thread picks up the queued opTime.','line_number':404,'multiline':False]['text':' Wait for background thread to finish transitioning from waiting on t1 to smallerOpTime.','line_number':408,'multiline':False]['text':' The future should now become ready without having to wait for any opTime.','line_number':413,'multiline':False]['text':' namespace','line_number':451,'multiline':False]['text':' namespace mongo','line_number':452,'multiline':False]