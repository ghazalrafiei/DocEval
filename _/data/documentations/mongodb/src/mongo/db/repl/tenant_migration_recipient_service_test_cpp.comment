['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':35,'multiline':False]['text':' IWYU pragma: keep','line_number':55,'multiline':False]['text':' optime','line_number':132,'multiline':False]['text':' opType','line_number':133,'multiline':False]['text':' namespace','line_number':134,'multiline':False]['text':' uuid','line_number':135,'multiline':False]['text':' fromMigrate','line_number':136,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':137,'multiline':False]['text':' version','line_number':138,'multiline':False]['text':' o','line_number':139,'multiline':False]['text':' o2','line_number':140,'multiline':False]['text':' sessionInfo','line_number':141,'multiline':False]['text':' upsert','line_number':142,'multiline':False]['text':' wall clock time','line_number':143,'multiline':False]['text':' statement ids','line_number':144,'multiline':False]['text':' optime of previous write within same transaction','line_number':145,'multiline':False]['text':' pre-image optime','line_number':146,'multiline':False]['text':' post-image optime','line_number':147,'multiline':False]['text':' ShardId of resharding recipient','line_number':148,'multiline':False]['text':' _id','line_number':149,'multiline':False]['text':' needsRetryImage','line_number':150,'multiline':False]['text':'*
 * Generates a listDatabases response for an TenantAllDatabaseCloner to consume.
 ','line_number':171,'multiline':True]['text':' Set the operation time as if the remote mock server received the','line_number':184,'multiline':False]['text':' 'listDatabases' cmd with '$replData' set to true.','line_number':185,'multiline':False]['text':' namespace','line_number':201,'multiline':False]['text':' Fake replSet just for creating consistent URI for monitor','line_number':219,'multiline':False]['text':' hasPrimary ','line_number':220,'multiline':True]['text':' dollarPrefixHosts ','line_number':220,'multiline':True]['text':' Automatically mark the state doc garbage collectable after data sync completion.','line_number':227,'multiline':False]['text':' Need real (non-mock) storage for the oplog buffer.','line_number':247,'multiline':False]['text':' The DropPendingCollectionReaper is required to drop the oplog buffer collection.','line_number':250,'multiline':False]['text':' Set up OpObserver so that repl::logOp() will store the oplog entry's optime in','line_number':256,'multiline':False]['text':' ReplClientInfo.','line_number':257,'multiline':False]['text':' MockReplicaSet uses custom connection string which does not support auth.','line_number':277,'multiline':False]['text':' Set the sslMode to allowSSL to avoid validation error.','line_number':281,'multiline':False]['text':' Skipped unless tested explicitly, as we will not receive an FCV document from the donor','line_number':283,'multiline':False]['text':' in these unittests without (unsightly) intervention.','line_number':284,'multiline':False]['text':' Skip fetching retryable writes, as we will test this logic entirely in integration','line_number':288,'multiline':False]['text':' tests.','line_number':289,'multiline':False]['text':' Skip fetching committed transactions, as we will test this logic entirely in integration','line_number':294,'multiline':False]['text':' tests.','line_number':295,'multiline':False]['text':' Unset the sslMode.','line_number':305,'multiline':False]['text':' Clearing the connection pool is necessary when doing tests which use the','line_number':315,'multiline':False]['text':' ReplicaSetMonitor.  See src/mongo/dbtests/mock/mock_replica_set.h for details.','line_number':316,'multiline':False]['text':' Advance term','line_number':332,'multiline':False]['text':'filter','line_number':380,'multiline':True]['text':' The MockRemoteDBService does not actually implement the database, so to make our','line_number':388,'multiline':False]['text':' find work correctly we must make sure there's only one document to find.','line_number':389,'multiline':False]['text':' namespace ','line_number':395,'multiline':True]['text':' uuid ','line_number':396,'multiline':True]['text':' o ','line_number':397,'multiline':True]['text':' o2 ','line_number':398,'multiline':True]['text':' Accessors to class private members','line_number':404,'multiline':False]['text':'*
     * Advance the time by millis on both clock source mocks.
     ','line_number':438,'multiline':True]['text':'*
     * Assumes that the times on both clock source mocks is the same.
     ','line_number':445,'multiline':True]['text':'
     * Populates the migration state document to simulate a recipient service restart where cloning
     * has already finished. This requires the oplog buffer to contain an oplog entry with the
     * optime to resume from. Otherwise, oplog application will fail when the OplogBatcher seeks
     * to the resume timestamp.
     ','line_number':452,'multiline':True]['text':'*
     * Sets the FCV on the donor so that it can respond to FCV requests appropriately.
     * (Generic FCV reference): This FCV reference should exist across LTS binary versions.
     ','line_number':469,'multiline':True]['text':' Create and start the instance.','line_number':523,'multiline':False]['text':' Wait for task completion.','line_number':530,'multiline':False]['text':' Create and start the instance.','line_number':548,'multiline':False]['text':' Should be able to see the instance task failure error.','line_number':555,'multiline':False]['text':' Should also fail to mark the state doc garbage collectable if we have failed to persist the','line_number':558,'multiline':False]['text':' state doc at the first place.','line_number':559,'multiline':False]['text':' hasPrimary ','line_number':572,'multiline':True]['text':' dollarPrefixHosts ','line_number':572,'multiline':True]['text':' Create and start the instance.','line_number':584,'multiline':False]['text':' Both clients should be populated.','line_number':594,'multiline':False]['text':' Clients should be distinct.','line_number':598,'multiline':False]['text':' Clients should be connected to primary.','line_number':601,'multiline':False]['text':' Wait for task completion.','line_number':610,'multiline':False]['text':' hasPrimary ','line_number':623,'multiline':True]['text':' dollarPrefixHosts ','line_number':623,'multiline':True]['text':' Create and start the instance.','line_number':635,'multiline':False]['text':' Both clients should be populated.','line_number':645,'multiline':False]['text':' Clients should be distinct.','line_number':649,'multiline':False]['text':' Clients should be connected to secondary.','line_number':652,'multiline':False]['text':' Wait for task completion.','line_number':661,'multiline':False]['text':' Hang the migration before attempting to connect to clients.','line_number':687,'multiline':False]['text':' Create and start the instance.','line_number':694,'multiline':False]['text':' Mark the primary as excluded.','line_number':702,'multiline':False]['text':' Neither client should be populated.','line_number':712,'multiline':False]['text':' Wait for task completion failure.','line_number':718,'multiline':False]['text':' Hang the migration before attempting to connect to clients.','line_number':745,'multiline':False]['text':' Create and start the instance.','line_number':753,'multiline':False]['text':' Mark the primary as excluded.','line_number':761,'multiline':False]['text':' Advance the clock past excludeTime.','line_number':767,'multiline':False]['text':' Both clients should be populated.','line_number':775,'multiline':False]['text':' Clients should be distinct.','line_number':779,'multiline':False]['text':' Clients should be connected to primary.','line_number':782,'multiline':False]['text':' Wait for task completion.','line_number':791,'multiline':False]['text':' Hang the migration before attempting to connect to clients.','line_number':817,'multiline':False]['text':' Create and start the instance.','line_number':825,'multiline':False]['text':' Mark all hosts as excluded.','line_number':833,'multiline':False]['text':' Neither client should be populated.','line_number':845,'multiline':False]['text':' Wait for task completion failure.','line_number':851,'multiline':False]['text':' Hang the migration before attempting to connect to clients.','line_number':878,'multiline':False]['text':' Create and start the instance.','line_number':886,'multiline':False]['text':' Mark the primary as excluded.','line_number':894,'multiline':False]['text':' Both clients should be populated.','line_number':905,'multiline':False]['text':' Clients should be distinct.','line_number':909,'multiline':False]['text':' Clients should be connected to secondary.','line_number':912,'multiline':False]['text':' Wait for task completion.','line_number':921,'multiline':False]['text':' Hang the migration before attempting to connect to clients.','line_number':947,'multiline':False]['text':' Create and start the instance.','line_number':955,'multiline':False]['text':' Mark the primary as excluded.','line_number':963,'multiline':False]['text':' Advance the clock past excludeTime.','line_number':969,'multiline':False]['text':' Both clients should be populated.','line_number':977,'multiline':False]['text':' Clients should be distinct.','line_number':981,'multiline':False]['text':' Clients should be connected to primary.','line_number':984,'multiline':False]['text':' Wait for task completion.','line_number':993,'multiline':False]['text':' Hang the migration before attempting to connect to clients.','line_number':1019,'multiline':False]['text':' Create and start the instance.','line_number':1026,'multiline':False]['text':' Shutdown one secondary and mark the other secondary as excluded.','line_number':1034,'multiline':False]['text':' Neither client should be populated.','line_number':1047,'multiline':False]['text':' Wait for task completion failure.','line_number':1053,'multiline':False]['text':' hasPrimary ','line_number':1068,'multiline':True]['text':' dollarPrefixHosts ','line_number':1068,'multiline':True]['text':' Hang the migration before attempting to connect to clients.','line_number':1080,'multiline':False]['text':' Create and start the instance.','line_number':1088,'multiline':False]['text':' Shutdown one secondary and mark the other secondary as excluded.','line_number':1096,'multiline':False]['text':' Both clients should be populated.','line_number':1109,'multiline':False]['text':' Clients should be distinct.','line_number':1113,'multiline':False]['text':' Clients should be connected to the primary.','line_number':1116,'multiline':False]['text':' Wait for task completion.','line_number':1125,'multiline':False]['text':' Insert the remote majority optime into the oplogs of the first two hosts.','line_number':1141,'multiline':False]['text':' hasPrimary ','line_number':1142,'multiline':True]['text':' dollarPrefixHosts ','line_number':1142,'multiline':True]['text':' Create and start the instance.','line_number':1160,'multiline':False]['text':' Both clients should be populated.','line_number':1171,'multiline':False]['text':' Clients should be distinct.','line_number':1175,'multiline':False]['text':' Clients should be connected to donor node at index 2.','line_number':1178,'multiline':False]['text':' Insert the remote majority optime into the oplogs of the first two hosts.','line_number':1199,'multiline':False]['text':' hasPrimary ','line_number':1200,'multiline':True]['text':' dollarPrefixHosts ','line_number':1200,'multiline':True]['text':' Create and start the instance.','line_number':1217,'multiline':False]['text':' Both clients should be populated.','line_number':1228,'multiline':False]['text':' Clients should be distinct.','line_number':1232,'multiline':False]['text':' Clients should be connected to donor node at index 2.','line_number':1235,'multiline':False]['text':' Since we were using primaryPreferred read preference, we should have tried hosts[0]','line_number':1242,'multiline':False]['text':' and had it rejected.','line_number':1243,'multiline':False]['text':' hasPrimary ','line_number':1262,'multiline':True]['text':' dollarPrefixHosts ','line_number':1262,'multiline':True]['text':' Primary is unavailable.','line_number':1266,'multiline':False]['text':' Create and start the instance.','line_number':1278,'multiline':False]['text':' Both clients should be populated.','line_number':1288,'multiline':False]['text':' Clients should be distinct.','line_number':1292,'multiline':False]['text':' Clients should be connected to secondary.','line_number':1295,'multiline':False]['text':' Wait for task completion.','line_number':1304,'multiline':False]['text':' Create and start the instance.','line_number':1322,'multiline':False]['text':' Create and start the instance.','line_number':1344,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':1354,'multiline':False]['text':' hasPrimary ','line_number':1360,'multiline':True]['text':' dollarPrefixHosts ','line_number':1360,'multiline':True]['text':' Create and start the instance.','line_number':1372,'multiline':False]['text':' Wait for task completion.','line_number':1378,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':1389,'multiline':False]['text':' hasPrimary ','line_number':1397,'multiline':True]['text':' dollarPrefixHosts ','line_number':1397,'multiline':True]['text':' Create and start the instance.','line_number':1415,'multiline':False]['text':' Wait for task completion.','line_number':1421,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':1433,'multiline':False]['text':' hasPrimary ','line_number':1438,'multiline':True]['text':' dollarPrefixHosts ','line_number':1438,'multiline':True]['text':' Create and start the instance.  Fail to populate the remote oplog mock.','line_number':1449,'multiline':False]['text':' Wait for task completion.','line_number':1455,'multiline':False]['text':' Even though we failed, the memory state should still match the on-disk state.','line_number':1459,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':1465,'multiline':False]['text':' hasPrimary ','line_number':1474,'multiline':True]['text':' dollarPrefixHosts ','line_number':1474,'multiline':True]['text':' Create and start the instance.','line_number':1490,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':1500,'multiline':False]['text':' Wait for task completion.','line_number':1507,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':1514,'multiline':False]['text':' hasPrimary ','line_number':1525,'multiline':True]['text':' dollarPrefixHosts ','line_number':1525,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':1529,'multiline':False]['text':' This failpoint will stop us just before the cloner starts.','line_number':1547,'multiline':False]['text':' Create and start the instance.','line_number':1551,'multiline':False]['text':' since the listDatabase would return empty, cloner will not make any new writes. So,','line_number':1559,'multiline':False]['text':' it's safe to assume the  donor opime at clone completion point will be the','line_number':1560,'multiline':False]['text':' optime at which migration start optimes got persisted.','line_number':1561,'multiline':False]['text':' Wait for task completion.','line_number':1577,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':1583,'multiline':False]['text':' hasPrimary ','line_number':1589,'multiline':True]['text':' dollarPrefixHosts ','line_number':1589,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':1601,'multiline':False]['text':' Create and start the instance.','line_number':1611,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':1626,'multiline':False]['text':' Kill it.','line_number':1631,'multiline':False]['text':' Wait for task completion failure.','line_number':1634,'multiline':False]['text':' hasPrimary ','line_number':1645,'multiline':True]['text':' dollarPrefixHosts ','line_number':1645,'multiline':True]['text':' We skip cloning here as a way to simulate that the recipient service has detected an existing','line_number':1658,'multiline':False]['text':' migration on startup and will resume oplog fetching from the appropriate optime.','line_number':1659,'multiline':False]['text':' Hang after creating the oplog buffer collection but before starting the oplog fetcher.','line_number':1663,'multiline':False]['text':' Create and start the instance.','line_number':1675,'multiline':False]['text':' o2 ','line_number':1696,'multiline':True]['text':' Continue the recipient service to hang after starting the oplog applier.','line_number':1703,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':1713,'multiline':False]['text':' The oplog fetcher should have started fetching from resumeOpTime.','line_number':1717,'multiline':False]['text':' Feed the oplog fetcher the last doc required for us to be considered consistent.','line_number':1723,'multiline':False]['text':' o2 ','line_number':1730,'multiline':True]['text':' Stop the oplog applier.','line_number':1740,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':1742,'multiline':False]['text':' the actual result is not critical.','line_number':1743,'multiline':False]['text':' hasPrimary ','line_number':1755,'multiline':True]['text':' dollarPrefixHosts ','line_number':1755,'multiline':True]['text':' We skip cloning here as a way to simulate that the recipient service has detected an existing','line_number':1768,'multiline':False]['text':' migration on startup and will attempt to resume oplog fetching from the appropriate optime.','line_number':1769,'multiline':False]['text':' clonerFinishedRecipientOpTime ','line_number':1771,'multiline':True]['text':' dataConsistentStopDonorOpTime ','line_number':1772,'multiline':True]['text':' startApplyingDonorOpTime ','line_number':1773,'multiline':True]['text':' startFetchingDonorOpTime ','line_number':1774,'multiline':True]['text':' Hang after creating the oplog buffer collection but before starting the oplog fetcher.','line_number':1779,'multiline':False]['text':' Create and start the instance.','line_number':1788,'multiline':False]['text':' There are no documents in the oplog buffer to resume fetching from.','line_number':1797,'multiline':False]['text':' Continue and hang before starting the oplog applier.','line_number':1801,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':1811,'multiline':False]['text':' The oplog fetcher should have started fetching from 'startFetchingOpTime'. Since no document','line_number':1815,'multiline':False]['text':' was found in the oplog buffer, we should have set the 'StartingPoint' to 'kEnqueueFirstDoc'.','line_number':1816,'multiline':False]['text':' Feed the oplog fetcher the last doc required for the recipient to be considered consistent.','line_number':1821,'multiline':False]['text':' o2 ','line_number':1828,'multiline':True]['text':' o2 ','line_number':1834,'multiline':True]['text':' Allow the service to continue.','line_number':1840,'multiline':False]['text':' Stop the oplog applier.','line_number':1848,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':1850,'multiline':False]['text':' the actual result is not critical.','line_number':1851,'multiline':False]['text':' Recipient opTimes','line_number':1858,'multiline':False]['text':' Donor opTimes','line_number':1860,'multiline':False]['text':' hasPrimary ','line_number':1865,'multiline':True]['text':' dollarPrefixHosts ','line_number':1865,'multiline':True]['text':' We skip cloning here as a way to simulate that the recipient service has detected an existing','line_number':1878,'multiline':False]['text':' migration on startup and will attempt to resume oplog fetching from the appropriate optime.','line_number':1879,'multiline':False]['text':' cloneFinishedRecipientOpTime ','line_number':1881,'multiline':True]['text':' dataConsistentStopDonorOpTime ','line_number':1882,'multiline':True]['text':' startApplyingDonorOpTime ','line_number':1883,'multiline':True]['text':' startFetchingDonorOpTime ','line_number':1884,'multiline':True]['text':' Hang before reading oplog.','line_number':1889,'multiline':False]['text':' Hang before starting the oplog applier.','line_number':1897,'multiline':False]['text':' Create and start the instance.','line_number':1907,'multiline':False]['text':' Create and insert two tenant migration no-op entries into the oplog. The oplog applier should','line_number':1913,'multiline':False]['text':' resume from the no-op entry with the most recent donor opTime.','line_number':1914,'multiline':False]['text':' o2 ','line_number':1921,'multiline':True]['text':' o2 ','line_number':1929,'multiline':True]['text':' o2 ','line_number':1966,'multiline':True]['text':' Feed the oplog fetcher the last doc required for the recipient to be considered consistent.','line_number':1967,'multiline':False]['text':' Allow the service to continue.','line_number':1971,'multiline':False]['text':' The oplog applier should have started batching and applying at the donor opTime equal to','line_number':1979,'multiline':False]['text':' 'resumeOpTime'.','line_number':1980,'multiline':False]['text':' Stop the oplog applier.','line_number':1985,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':1987,'multiline':False]['text':' the actual result is not critical.','line_number':1988,'multiline':False]['text':' Donor opTimes','line_number':1996,'multiline':False]['text':' hasPrimary ','line_number':2000,'multiline':True]['text':' dollarPrefixHosts ','line_number':2000,'multiline':True]['text':' We skip cloning here as a way to simulate that the recipient service has detected an existing','line_number':2013,'multiline':False]['text':' migration on startup and will attempt to resume oplog fetching from the appropriate optime.','line_number':2014,'multiline':False]['text':' cloneFinishedRecipientOpTime
                                                                 ','line_number':2016,'multiline':True]['text':' dataConsistentStopDonorOpTime ','line_number':2019,'multiline':True]['text':' startApplyingDonorOpTime ','line_number':2020,'multiline':True]['text':' startFetchingDonorOpTime ','line_number':2021,'multiline':True]['text':' Hang before creating the oplog applier.','line_number':2026,'multiline':False]['text':' Hang after starting the oplog applier.','line_number':2033,'multiline':False]['text':' Create and start the instance.','line_number':2043,'multiline':False]['text':' Create and insert the following into the oplog:','line_number':2050,'multiline':False]['text':' - (1) An oplog entry with opTime earlier than 'cloneFinishedRecipientOpTime'.','line_number':2051,'multiline':False]['text':' - (2) An oplog entry with opTime greater than 'cloneFinishedRecipientOpTime'.','line_number':2052,'multiline':False]['text':' - (3) A no-op oplog entry with an inner donor oplog entry as the 'o2' field. The donor opTime','line_number':2053,'multiline':False]['text':'       is less than the 'startApplyingDonorOpTime'. We will resume batching from this','line_number':2054,'multiline':False]['text':'       timestamp.','line_number':2055,'multiline':False]['text':' - (4) A no-op oplog entry with an inner oplog entry as the 'o2' field but no','line_number':2056,'multiline':False]['text':'       'fromTenantMigrate' field. This oplog entry does not satisfy the conditions','line_number':2057,'multiline':False]['text':'       for the oplog applier to resume applying from so we default to apply from','line_number':2058,'multiline':False]['text':'       'startDonorApplyingOpTime'.','line_number':2059,'multiline':False]['text':' o2 ','line_number':2069,'multiline':True]['text':' o2 ','line_number':2080,'multiline':True]['text':' (1)','line_number':2088,'multiline':False]['text':' o2 ','line_number':2095,'multiline':True]['text':' (2)','line_number':2097,'multiline':False]['text':' o2 ','line_number':2104,'multiline':True]['text':' (3)','line_number':2106,'multiline':False]['text':' (4)','line_number':2112,'multiline':False]['text':' migrationUUID ','line_number':2117,'multiline':True]['text':' Move on to the next failpoint to hang after starting the oplog applier.','line_number':2128,'multiline':False]['text':' o2 ','line_number':2138,'multiline':True]['text':' Feed the oplog fetcher the last doc required for the recipient to be considered consistent.','line_number':2141,'multiline':False]['text':' Allow the service to continue.','line_number':2145,'multiline':False]['text':' Resume batching from the first migration no-op oplog entry. In this test, this is before','line_number':2154,'multiline':False]['text':' the 'startApplyingDonorOpTime'.','line_number':2155,'multiline':False]['text':' The oplog applier starts applying from the donor opTime equal to 'beginApplyingOpTime'.','line_number':2157,'multiline':False]['text':' Stop the oplog applier.','line_number':2160,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':2162,'multiline':False]['text':' the actual result is not critical.','line_number':2163,'multiline':False]['text':' Donor opTimes','line_number':2170,'multiline':False]['text':' hasPrimary ','line_number':2174,'multiline':True]['text':' dollarPrefixHosts ','line_number':2174,'multiline':True]['text':' We skip cloning here as a way to simulate that the recipient service has detected an existing','line_number':2187,'multiline':False]['text':' migration on startup and will attempt to resume oplog fetching from the appropriate optime.','line_number':2188,'multiline':False]['text':' cloneFinishedRecipientOpTime
                                                                 ','line_number':2190,'multiline':True]['text':' dataConsistentStopDonorOpTime ','line_number':2193,'multiline':True]['text':' startApplyingDonorOpTime ','line_number':2194,'multiline':True]['text':' startFetchingDonorOpTime ','line_number':2195,'multiline':True]['text':' Hang before starting the oplog applier.','line_number':2200,'multiline':False]['text':' Create and start the instance.','line_number':2210,'multiline':False]['text':' Create and insert the following into the oplog:','line_number':2217,'multiline':False]['text':' - (1) An oplog entry with opTime earlier than 'cloneFinishedRecipientOpTime'.','line_number':2218,'multiline':False]['text':' - (2) An oplog entry with opTime greater than 'cloneFinishedRecipientOpTime'.','line_number':2219,'multiline':False]['text':' - (3) A no-op oplog entry with an inner oplog entry as the 'o2' field but no','line_number':2220,'multiline':False]['text':'       'fromTenantMigrate' field. This oplog entry does not satisfy the conditions','line_number':2221,'multiline':False]['text':'       for the oplog applier to resume applying from so we default to applying and','line_number':2222,'multiline':False]['text':'       batching from the start of the buffer collection.','line_number':2223,'multiline':False]['text':' o2 ','line_number':2233,'multiline':True]['text':' (1)','line_number':2241,'multiline':False]['text':' o2 ','line_number':2248,'multiline':True]['text':' (2)','line_number':2250,'multiline':False]['text':' o2 ','line_number':2257,'multiline':True]['text':' (3)','line_number':2259,'multiline':False]['text':' migrationUUID ','line_number':2265,'multiline':True]['text':' o2 ','line_number':2285,'multiline':True]['text':' Feed the oplog fetcher the last doc required for the recipient to be considered consistent.','line_number':2288,'multiline':False]['text':' Allow the service to continue.','line_number':2292,'multiline':False]['text':' There is no oplog entry to resume batching from, so we treat it as if we are resuming','line_number':2301,'multiline':False]['text':' oplog application from the start. The 'resumeBatchingTs' will be a null timestamp.','line_number':2302,'multiline':False]['text':' The oplog applier starts applying from the donor opTime equal to 'beginApplyingOpTime'.','line_number':2304,'multiline':False]['text':' Stop the oplog applier.','line_number':2307,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':2309,'multiline':False]['text':' the actual result is not critical.','line_number':2310,'multiline':False]['text':' hasPrimary ','line_number':2321,'multiline':True]['text':' dollarPrefixHosts ','line_number':2321,'multiline':True]['text':' We skip cloning here as a way to simulate that the recipient service has detected an existing','line_number':2334,'multiline':False]['text':' migration on startup and will resume oplog fetching from the appropriate optime.','line_number':2335,'multiline':False]['text':' Hang after creating the oplog buffer collection but before starting the oplog fetcher.','line_number':2342,'multiline':False]['text':' Create and start the instance.','line_number':2354,'multiline':False]['text':' Insert the first document with 'startFetchingOpTime' into the oplog buffer. The fetcher','line_number':2363,'multiline':False]['text':' should know to skip this document on service restart.','line_number':2364,'multiline':False]['text':' o2 ','line_number':2373,'multiline':True]['text':' o2 ','line_number':2385,'multiline':True]['text':' Continue the recipient service to hang before starting the oplog applier.','line_number':2386,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':2396,'multiline':False]['text':' The oplog fetcher should have started fetching from 'startFetchingOpTime'. However, the','line_number':2400,'multiline':False]['text':' fetcher should skip the first doc from being fetched since it already exists in the buffer.','line_number':2401,'multiline':False]['text':' Feed the oplog fetcher the last doc required for us to be considered consistent.','line_number':2405,'multiline':False]['text':' Allow the service to continue.','line_number':2409,'multiline':False]['text':' Stop the oplog applier.','line_number':2417,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':2419,'multiline':False]['text':' the actual result is not critical.','line_number':2420,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':2426,'multiline':False]['text':' hasPrimary ','line_number':2433,'multiline':True]['text':' dollarPrefixHosts ','line_number':2433,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':2445,'multiline':False]['text':' Use this failpoint to avoid races between the test thread accessing the oplogFetcher and','line_number':2454,'multiline':False]['text':' the migration instance freeing the oplogFetcher on errors.','line_number':2455,'multiline':False]['text':' Create and start the instance.','line_number':2459,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':2473,'multiline':False]['text':' Send an oplog entry not from our tenant, which should cause the oplog applier to assert.','line_number':2478,'multiline':False]['text':' o2 ','line_number':2486,'multiline':True]['text':' Wait for task completion failure.','line_number':2491,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':2497,'multiline':False]['text':' hasPrimary ','line_number':2503,'multiline':True]['text':' dollarPrefixHosts ','line_number':2503,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':2515,'multiline':False]['text':' Create and start the instance.','line_number':2525,'multiline':False]['text':' The oplog fetcher should exist and be running.','line_number':2539,'multiline':False]['text':' Stop the oplog applier.','line_number':2544,'multiline':False]['text':' Wait for task completion.  Since we're using a test function to cancel the applier,','line_number':2547,'multiline':False]['text':' the actual result is not critical.','line_number':2548,'multiline':False]['text':' hasPrimary ','line_number':2558,'multiline':True]['text':'dollarPrefixHosts ','line_number':2558,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':2570,'multiline':False]['text':' Hang the recipient service after starting the oplog fetcher.','line_number':2576,'multiline':False]['text':' Create and start the instance.','line_number':2588,'multiline':False]['text':' Wait for the oplog fetcher to start.','line_number':2595,'multiline':False]['text':' Feed the oplog fetcher a resume token.','line_number':2598,'multiline':False]['text':' namespace ','line_number':2604,'multiline':True]['text':' uuid ','line_number':2605,'multiline':True]['text':' o ','line_number':2606,'multiline':True]['text':' o2 ','line_number':2607,'multiline':True]['text':' namespace ','line_number':2615,'multiline':True]['text':' uuid ','line_number':2616,'multiline':True]['text':' o ','line_number':2617,'multiline':True]['text':' o2 ','line_number':2618,'multiline':True]['text':' Receive an empty batch.','line_number':2621,'multiline':False]['text':' Let the recipient service complete.','line_number':2654,'multiline':False]['text':' Wait for task completion.','line_number':2657,'multiline':False]['text':' hasPrimary ','line_number':2664,'multiline':True]['text':' dollarPrefixHosts ','line_number':2664,'multiline':True]['text':' The task is interrupted before it start the chain.','line_number':2682,'multiline':False]['text':' Test that receiving recipientForgetMigration command after that should result in the same','line_number':2685,'multiline':False]['text':' error.','line_number':2686,'multiline':False]['text':' We should fail to mark the state doc garbage collectable.','line_number':2694,'multiline':False]['text':' hasPrimary ','line_number':2703,'multiline':True]['text':' dollarPrefixHosts ','line_number':2703,'multiline':True]['text':' We should fail to mark the state doc garbage collectable if we have failed to initialize and','line_number':2722,'multiline':False]['text':' persist the state doc at the first place.','line_number':2723,'multiline':False]['text':' The test fixture forgets the migration automatically, disable the failpoint for this test so','line_number':2729,'multiline':False]['text':' the migration continues to wait for the recipientForgetMigration command after persisting the','line_number':2730,'multiline':False]['text':' state doc.','line_number':2731,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':2734,'multiline':False]['text':' hasPrimary ','line_number':2740,'multiline':True]['text':' dollarPrefixHosts ','line_number':2740,'multiline':True]['text':' Test that onReceiveRecipientForgetMigration waits until the state doc is initialized.','line_number':2762,'multiline':False]['text':' Advance time past deadline.','line_number':2764,'multiline':False]['text':' Hang the chain after persisting the state doc.','line_number':2772,'multiline':False]['text':' Unblock the task chain so the state doc can be persisted.','line_number':2778,'multiline':False]['text':' Make a new opCtx as the old one has expired due to timeout errors.','line_number':2781,'multiline':False]['text':' Test that onReceiveRecipientForgetMigration goes through now that the state doc has been','line_number':2785,'multiline':False]['text':' persisted.','line_number':2786,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':2823,'multiline':False]['text':' hasPrimary ','line_number':2829,'multiline':True]['text':' dollarPrefixHosts ','line_number':2829,'multiline':True]['text':' Create and start the instance.','line_number':2842,'multiline':False]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':2852,'multiline':False]['text':' The test fixture forgets the migration automatically, disable the failpoint for this test so','line_number':2879,'multiline':False]['text':' the migration continues to wait for the recipientForgetMigration command after reaching data','line_number':2880,'multiline':False]['text':' consistent state.','line_number':2881,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':2891,'multiline':False]['text':' hasPrimary ','line_number':2898,'multiline':True]['text':' dollarPrefixHosts ','line_number':2898,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':2911,'multiline':False]['text':' Create and start the instance.','line_number':2921,'multiline':False]['text':' Test receiving duplicating recipientForgetMigration requests.','line_number':2947,'multiline':False]['text':' Continue after data being consistent.','line_number':2951,'multiline':False]['text':' The data sync should have completed.','line_number':2954,'multiline':False]['text':' The test fixture forgets the migration automatically, disable the failpoint for this test so','line_number':2979,'multiline':False]['text':' the migration continues to wait for the recipientForgetMigration command after getting an','line_number':2980,'multiline':False]['text':' error from the migration.','line_number':2981,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':2985,'multiline':False]['text':' hasPrimary ','line_number':2992,'multiline':True]['text':' dollarPrefixHosts ','line_number':2992,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':3005,'multiline':False]['text':' Create and start the instance.','line_number':3015,'multiline':False]['text':' The data sync should have completed.','line_number':3041,'multiline':False]['text':' The instance should still be running and waiting for the recipientForgetMigration command.','line_number':3044,'multiline':False]['text':' The test fixture forgets the migration automatically, disable the failpoint for this test so','line_number':3068,'multiline':False]['text':' the migration continues to wait for the recipientForgetMigration command after getting an','line_number':3069,'multiline':False]['text':' error from the migration.','line_number':3070,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3077,'multiline':False]['text':' hasPrimary ','line_number':3080,'multiline':True]['text':' dollarPrefixHosts ','line_number':3080,'multiline':True]['text':' Create and start the instance.','line_number':3092,'multiline':False]['text':' The data sync should have completed.','line_number':3099,'multiline':False]['text':' Fail marking the state doc garbage collectable with a different error code, simulating a','line_number':3102,'multiline':False]['text':' stepDown.','line_number':3103,'multiline':False]['text':' The instance should still be running and waiting for the recipientForgetMigration command.','line_number':3107,'multiline':False]['text':' Check that it fails to mark the state doc garbage collectable.','line_number':3110,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3132,'multiline':False]['text':' hasPrimary ','line_number':3136,'multiline':True]['text':' dollarPrefixHosts ','line_number':3136,'multiline':True]['text':' Create and start the instance.','line_number':3148,'multiline':False]['text':' Wait for task completion.','line_number':3154,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3169,'multiline':False]['text':' hasPrimary ','line_number':3174,'multiline':True]['text':' dollarPrefixHosts ','line_number':3174,'multiline':True]['text':' Add an FCV value as if it was from a previous attempt.','line_number':3186,'multiline':False]['text':' Create and start the instance.','line_number':3190,'multiline':False]['text':' Wait for task completion.','line_number':3196,'multiline':False]['text':' The FCV should match so we should exit with the failpoint code rather than an error.','line_number':3197,'multiline':False]['text':' hasPrimary ','line_number':3213,'multiline':True]['text':' dollarPrefixHosts ','line_number':3213,'multiline':True]['text':' Add an FCV value as if it was from a previous attempt, making sure we set a different','line_number':3225,'multiline':False]['text':' version from the one we currently have.','line_number':3226,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':3227,'multiline':False]['text':' Create and start the instance.','line_number':3230,'multiline':False]['text':' Wait for task completion failure.','line_number':3236,'multiline':False]['text':' The FCV should differ so we expect to exit with an error.','line_number':3237,'multiline':False]['text':' Tests skip this check by default but we are specifically testing it here.','line_number':3247,'multiline':False]['text':' Set to allow the donor to respond to FCV requests.','line_number':3251,'multiline':False]['text':' hasPrimary ','line_number':3260,'multiline':True]['text':' dollarPrefixHosts ','line_number':3260,'multiline':True]['text':' Create and start the instance.','line_number':3272,'multiline':False]['text':' Set the donor FCV to be different from 'latest'.','line_number':3278,'multiline':False]['text':' (Generic FCV reference): This FCV reference should exist across LTS binary versions.','line_number':3279,'multiline':False]['text':' Wait for task completion failure.','line_number':3284,'multiline':False]['text':' The FCVs should differ so we expect to exit with an error.','line_number':3285,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3292,'multiline':False]['text':' hasPrimary ','line_number':3298,'multiline':True]['text':' dollarPrefixHosts ','line_number':3298,'multiline':True]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':3310,'multiline':False]['text':' Create and start the instance.','line_number':3320,'multiline':False]['text':' Simulate recipient receiving a donor timestamp.','line_number':3330,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3355,'multiline':False]['text':' hasPrimary ','line_number':3361,'multiline':True]['text':' dollarPrefixHosts ','line_number':3361,'multiline':True]['text':' Create and start the instance.','line_number':3373,'multiline':False]['text':' Create and start the instance.','line_number':3378,'multiline':False]['text':' Kill the oplog fetcher with a retriable error and wait for the migration to retry.','line_number':3392,'multiline':False]['text':' Skip the cloners in this test, so we provide an empty list of databases.','line_number':3397,'multiline':False]['text':' Wait for task completion.','line_number':3404,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3422,'multiline':False]['text':' hasPrimary ','line_number':3428,'multiline':True]['text':' dollarPrefixHosts ','line_number':3428,'multiline':True]['text':' Create and start the instance.','line_number':3440,'multiline':False]['text':' Create and start the instance.','line_number':3445,'multiline':False]['text':' Kill the oplog fetcher with a non-retriable error.','line_number':3459,'multiline':False]['text':' Wait for task completion failure.','line_number':3465,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3484,'multiline':False]['text':' hasPrimary ','line_number':3490,'multiline':True]['text':' dollarPrefixHosts ','line_number':3490,'multiline':True]['text':' Create and start the instance.','line_number':3502,'multiline':False]['text':' Create and start the instance.','line_number':3507,'multiline':False]['text':' Interrupt the task with 'skipWaitingForForgetMigration' = true.','line_number':3522,'multiline':False]['text':' Wait for task completion failure.','line_number':3527,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3546,'multiline':False]['text':' hasPrimary ','line_number':3552,'multiline':True]['text':' dollarPrefixHosts ','line_number':3552,'multiline':True]['text':' Create and start the instance.','line_number':3564,'multiline':False]['text':' Create and start the instance.','line_number':3569,'multiline':False]['text':' Hang the migration before it attempts to retry.','line_number':3582,'multiline':False]['text':' Make oplog fetcher to fail with a retryable error which will interrupt the migration.','line_number':3588,'multiline':False]['text':' After the migration is interrupted successfully, signal migration that we received','line_number':3596,'multiline':False]['text':' recipientForgetMigration command. And, that should make the migration not to retry','line_number':3597,'multiline':False]['text':' on retryable error.','line_number':3598,'multiline':False]['text':' Wait for task completion failure.','line_number':3603,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3621,'multiline':False]['text':' hasPrimary ','line_number':3628,'multiline':True]['text':' dollarPrefixHosts ','line_number':3628,'multiline':True]['text':' Create and start the instance.','line_number':3640,'multiline':False]['text':' Create and start the instance.','line_number':3645,'multiline':False]['text':' Have the cloner fail on a retriable error (from the point of view of the recipient service).','line_number':3656,'multiline':False]['text':' Let cloner run successfully on retry.','line_number':3673,'multiline':False]['text':' Wait for task completion.','line_number':3678,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3697,'multiline':False]['text':' hasPrimary ','line_number':3704,'multiline':True]['text':' dollarPrefixHosts ','line_number':3704,'multiline':True]['text':' Create and start the instance.','line_number':3716,'multiline':False]['text':' Create and start the instance.','line_number':3721,'multiline':False]['text':' Have the cloner fail on a non-retriable error.','line_number':3733,'multiline':False]['text':' Wait for task completion.','line_number':3743,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3754,'multiline':False]['text':' hasPrimary ','line_number':3759,'multiline':True]['text':' dollarPrefixHosts ','line_number':3759,'multiline':True]['text':' Starting a migration where the state is not 'kUninitialized' indicates that we are attempting','line_number':3769,'multiline':False]['text':' to restart from recipient failover.','line_number':3770,'multiline':False]['text':' Create and start the instance, which ensures that the rebuild has completed and the tenant','line_number':3782,'multiline':False]['text':' recipient collection and indexes have been created.','line_number':3783,'multiline':False]['text':' Hang before deleting the state doc so that we can check the state doc was persisted.','line_number':3804,'multiline':False]['text':' hasPrimary ','line_number':3810,'multiline':True]['text':' dollarPrefixHosts ','line_number':3810,'multiline':True]['text':' Starting a migration where the state is not 'kUninitialized' indicates that we are restarting','line_number':3821,'multiline':False]['text':' from failover.','line_number':3822,'multiline':False]['text':' Set the 'expireAt' field to indicate the migration is garbage collectable.','line_number':3824,'multiline':False]['text':' Create and start the instance, which ensures that the rebuild has completed and the tenant','line_number':3837,'multiline':False]['text':' recipient collection and indexes have been created.','line_number':3838,'multiline':False]['text':' Create and start the instance.','line_number':3886,'multiline':False]['text':' When reaching this step it means we have passed the logic to mark external keys for garbage','line_number':3892,'multiline':False]['text':' collection.','line_number':3893,'multiline':False]['text':' We never reached that logic therefore the time entered should remain the same.','line_number':3897,'multiline':False]['text':' Wait for task completion.','line_number':3901,'multiline':False]['text':' Create and start the instance, which ensures that the rebuild has completed and the tenant','line_number':3935,'multiline':False]['text':' recipient collection and indexes have been created.','line_number':3936,'multiline':False]['text':' Insert a state doc to simulate running a migration with an existing state doc NOT marked for','line_number':3944,'multiline':False]['text':' garbage collection.','line_number':3945,'multiline':False]['text':' Starting a migration where the state is not 'kUninitialized' indicates that we are restarting','line_number':3955,'multiline':False]['text':' from failover.','line_number':3956,'multiline':False]['text':' Set the 'expireAt' field to indicate the migration is garbage collectable.','line_number':3958,'multiline':False]['text':' Insert existing state document for the same tenant but different migration id.','line_number':3961,'multiline':False]['text':' Create the tenant access blockers for the stateDoc with the associated tenantId and','line_number':3965,'multiline':False]['text':' migrationId.','line_number':3966,'multiline':False]['text':' We block and wait right before the service deletes the previous state document.','line_number':3974,'multiline':False]['text':' Delete state doc while we are expecting to delete it ourselves.','line_number':3977,'multiline':False]['text':' Successfully deletes the old state document before the service deletes it itself.','line_number':3982,'multiline':False]['text':' Wait for task completion. We should not get an error since the state doc was already deleted.','line_number':3987,'multiline':False]['text':' Create and start the instance, which ensures that the rebuild has completed and the tenant','line_number':4016,'multiline':False]['text':' recipient collection and indexes have been created.','line_number':4017,'multiline':False]['text':' Insert a state doc to simulate running a migration with an existing state doc NOT marked for','line_number':4025,'multiline':False]['text':' garbage collection.','line_number':4026,'multiline':False]['text':' Starting a migration where the state is not 'kUninitialized' indicates that we are restarting','line_number':4036,'multiline':False]['text':' from failover.','line_number':4037,'multiline':False]['text':' Insert existing state document for the same tenant but different migration id','line_number':4040,'multiline':False]['text':' Create the tenant access blockers for the stateDoc with the associated tenantId and','line_number':4044,'multiline':False]['text':' migrationId.','line_number':4045,'multiline':False]['text':' Since the previous state doc did not have expireAt set we will assert with','line_number':4053,'multiline':False]['text':' ConflictingOperationInProgress.','line_number':4054,'multiline':False]['text':' namespace repl','line_number':4062,'multiline':False]['text':' namespace mongo','line_number':4063,'multiline':False]