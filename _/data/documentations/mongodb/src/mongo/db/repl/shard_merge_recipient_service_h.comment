['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * ShardMergeRecipientService is a primary only service which orchestrates the
 * data migration on the recipient side for shard merge protocol.
 ','line_number':95,'multiline':True]['text':' Disallows copying.','line_number':100,'multiline':False]['text':'*
     * Interrupts all shard merge recipient service instances.
     ','line_number':123,'multiline':True]['text':'*
         * Unconditional migration interrupt called on node's stepdown/shutdown event.
         * Make the instance to not wait for `recipientForgetMigration` command.
         ','line_number':137,'multiline':True]['text':'*
         * Conditional migration interrupt called on fcv change or due to oplog fetcher error.
         * Make the instance to wait for `recipientForgetMigration` command.
         ','line_number':143,'multiline':True]['text':'*
         * Interrupts the migration for garbage collection.
         ','line_number':149,'multiline':True]['text':'*
         * Returns a Future that will be resolved when migration is completed.
         ','line_number':155,'multiline':True]['text':'*
         * Returns a Future that will be resolved when the instance has been durably marked garbage
         * collectable.
         ','line_number':162,'multiline':True]['text':'*
         *  Returns the instance id.
         ','line_number':170,'multiline':True]['text':'*
         * Returns the instance state document.
         ','line_number':175,'multiline':True]['text':'*
         * Blocks the thread until the migration reaches consistent state in an interruptible
         * mode.
         *
         * Returns the donor OpTime at which the migration reached consistent state. Throws
         * exception on error.
         ','line_number':186,'multiline':True]['text':'*
         * Blocks the thread until the tenant oplog applier applied data past the
         * 'returnAfterReachingTimestamp' in an interruptible mode. If the recipient's logical clock
         * has not yet reached the 'returnAfterReachingTimestamp', advances the recipient's logical
         * clock to 'returnAfterReachingTimestamp'. Finally, stores the
         * 'returnAfterReachingTimestamp' as 'rejectReadsBeforeTimestamp' in the state
         * document and waits for the write to be replicated to every node (i.e. wait for
         * 'rejectReadsBeforeTimestamp' to be set on the TenantMigrationRecipientAccessBlocker of
         * every node) to guarantee that no reads will be incorrectly accepted.
         ','line_number':195,'multiline':True]['text':'*
         * Called when a replica set member (self, or a secondary) finishes importing donated files.
         ','line_number':208,'multiline':True]['text':'*
         * Set the oplog creator functor, to allow use of a mock oplog fetcher.
         ','line_number':213,'multiline':True]['text':'*
         * Stops the oplog applier without going through recipientForgetMigration.
         ','line_number':221,'multiline':True]['text':'*
         * Suppresses selecting 'host' as the donor sync source, until 'until'.
         ','line_number':229,'multiline':True]['text':'*
         * Only used for testing. Allows setting a custom task executor for backup cursor fetcher.
         ','line_number':244,'multiline':True]['text':'*
         * Transitions the instance state to 'kStarted' if the state is uninitialized.
         ','line_number':257,'multiline':True]['text':'*
         * Execute steps which are necessary to start a migration, such as, establishing donor
         * client connection, setting up internal state, get donor cluster keys, etc.
         ','line_number':262,'multiline':True]['text':'*
         * Sets up internal state to begin migration.
         ','line_number':268,'multiline':True]['text':'*
         * Start migration only if the following FCV checks passes:
         * a) Not in middle of FCV upgrading/downgrading.
         * b) Donor and recipient FCV matches.
         ','line_number':273,'multiline':True]['text':'*
         * Helper to run FCV sanity checks at the start of migration.
         ','line_number':280,'multiline':True]['text':'*
         * Waits for all data bearing nodes to complete import.
         ','line_number':285,'multiline':True]['text':'*
         * Tells whether the migration is committed or aborted.
         ','line_number':290,'multiline':True]['text':'*
         * Waits for recipientForgetMigartion command for migration decision and then, mark external
         * keys doc and instance state doc as garbage collectable.
         ','line_number':295,'multiline':True]['text':'*
         * Durably persists the migration decision in the state doc.
         ','line_number':302,'multiline':True]['text':'
         * Drops ephemeral collections used for migrations after migration decision is durably
         * persisted.
         ','line_number':307,'multiline':True]['text':'*
         * Sets the `expireAt` field at the state doc.
         ','line_number':313,'multiline':True]['text':'*
         * Deletes the state document. Does not return the opTime for the delete, since it's not
         * necessary to wait for this delete to be majority committed (this is one of the last steps
         * in the chain, and if the delete rolls back, the new primary will re-do the delete).
         ','line_number':318,'multiline':True]['text':'*
         * Creates a client, connects it to the donor and uses the default
         * authentication mode (KeyFile Authentication). Throws a user assertion on failure.
         ','line_number':328,'multiline':True]['text':'*
         * Creates and connects both the oplog fetcher client and the client used for other
         * operations.
         ','line_number':335,'multiline':True]['text':'*
         * Fetches all key documents from the donor's admin.system.keys collection, stores them in
         * config.external_validation_keys, and refreshes the keys cache.
         ','line_number':341,'multiline':True]['text':'*
         * Opens a backup cursor on the donor primary and fetches the
         * list of donor files to be cloned.
         ','line_number':347,'multiline':True]['text':'*
         * Keeps the donor backup cursor alive.
         ','line_number':354,'multiline':True]['text':'*
         * Kills the backup cursor opened on donor, if any.
         *
         ','line_number':359,'multiline':True]['text':'*
         * Gets the backup cursor metadata info.
         ','line_number':365,'multiline':True]['text':'*
         * Get the oldest active multi-statement transaction optime by reading
         * config.transactions collection at given ReadTimestamp (i.e, equal to
         * startApplyingDonorOpTime) snapshot.
         ','line_number':370,'multiline':True]['text':'*
         * Retrieves the start/fetch optimes from the donor and updates the in-memory/on-disk states
         * accordingly.
         ','line_number':377,'multiline':True]['text':'*
         * Pushes documents from oplog fetcher to oplog buffer.
         *
         * Returns a status even though it always returns OK, to conform the interface OplogFetcher
         * expects for the EnqueueDocumentsFn.
         ','line_number':383,'multiline':True]['text':'*
         * Creates the oplog buffer that will be populated by donor oplog entries from the retryable
         * writes fetching stage and oplog fetching stage.
         ','line_number':393,'multiline':True]['text':'*
         * Runs an aggregation that gets the entire oplog chain for every retryable write entry in
         * `config.transactions`. Only returns oplog entries in the chain where
         * `ts` < `startFetchingOpTime.ts` and adds them to the oplog buffer.
         ','line_number':399,'multiline':True]['text':'*
         * Migrates committed transactions entries into 'config.transactions'.
         ','line_number':406,'multiline':True]['text':'*
         * Opens and returns a cursor for all entries with 'lastWriteOpTime' <=
         * 'startApplyingDonorOpTime' and state 'committed'.
         ','line_number':411,'multiline':True]['text':'*
         * Creates an aggregation pipeline to fetch transaction entries with 'lastWriteOpTime' <
         * 'startFetchingDonorOpTime' and 'state: committed'.
         ','line_number':417,'multiline':True]['text':'*
         * Processes a committed transaction entry from the donor. Updates the recipient's
         * 'config.transactions' collection with the entry and writes a no-op entry for the
         * recipient secondaries to replicate the entry.
         ','line_number':423,'multiline':True]['text':'*
         * Starts the oplog buffer only if the node is primary. Otherwise, throw error.
         ','line_number':430,'multiline':True]['text':'*
         * Starts the tenant oplog fetcher.
         ','line_number':435,'multiline':True]['text':'*
         * Called when the oplog fetcher finishes. Usually the oplog fetcher finishes only when
         * cancelled or on error.
         ','line_number':440,'multiline':True]['text':'*
         * Starts the tenant oplog applier.
         ','line_number':446,'multiline':True]['text':'*
         * Waits for tenant oplog applier to stop.
         ','line_number':451,'multiline':True]['text':'*
         * Advances the majority commit timestamp to be >= donor's backup cursor checkpoint
         * timestamp(CkptTs) by:
         * 1. Advancing the clusterTime to CkptTs.
         * 2. Writing a no-op oplog entry with ts > CkptTs
         * 3. Waiting for the majority commit timestamp to be the time of the no-op write.
         *
         * Notes: This method should be called before transitioning the instance state to
         * 'kLearnedFilenames' which causes donor collections to get imported. Current import rule
         * is that the import table's checkpoint timestamp can't be later than the recipient's
         * stable timestamp. Due to the fact, we don't have a mechanism to wait until a specific
         * stable timestamp on a given node or set of nodes in the replica set and the majority
         * commit point and stable timestamp aren't atomically updated, advancing the majority
         * commit point on the recipient before import collection stage is a best-effort attempt to
         * prevent import retry attempts on import timestamp rule violation.
         ','line_number':456,'multiline':True]['text':'*
         * Returns a future that will be fulfilled when the tenant migration reaches consistent
         * state.
         ','line_number':475,'multiline':True]['text':'*
         * Transitions the instance state to 'kLearnedFilenames' after learning all filenames to be
         * imported.
         ','line_number':481,'multiline':True]['text':'*
         * Durably persist that migration has reached consistent state and signal waiters.
         ','line_number':487,'multiline':True]['text':'*
         * Gets the migration interrupt status. Answers may change after this call as it reads the
         * interrupt status without holding mutex lock. It's the caller's responsibility to decide
         * if they need to hold mutex lock or not before calling the method.
         ','line_number':493,'multiline':True]['text':'*
         * Cancels all remaining work in the migration.
         ','line_number':500,'multiline':True]['text':'*
         * Performs some cleanup work on migration completion, like, shutting down the components or
         * fulfilling any instance promises.
         ','line_number':505,'multiline':True]['text':'*
         * Suppresses selecting 'host' as the donor sync source, until 'until'.
         ','line_number':511,'multiline':True]['text':'*
         * Returns a vector of currently excluded donor hosts. Also removes hosts from the list of
         * excluded donor nodes, if the exclude duration has expired.
         ','line_number':516,'multiline':True]['text':'*
         * Makes the failpoint stop or hang the migration based on failpoint data "action" field.
         * If "action" is "hang" and 'opCtx' is not null, the failpoint will be interruptible.
         ','line_number':522,'multiline':True]['text':'*
         * Updates the shard merge recipient state doc and waits for that change to be
         * propagated to a majority.
         ','line_number':528,'multiline':True]['text':'*
         * Updates the shard merge recipient state doc. Throws error if it fails to
         * update.
         ','line_number':534,'multiline':True]['text':'*
         * Returns the majority OpTime on the donor node that 'client' is connected to.
         ','line_number':540,'multiline':True]['text':' All member variables are labeled with one of the following codes indicating the','line_number':547,'multiline':False]['text':' synchronization rules for accessing them.','line_number':548,'multiline':False]['text':'','line_number':549,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':550,'multiline':False]['text':' (S)  Self-synchronizing; access according to class's own rules.','line_number':551,'multiline':False]['text':' (M)  Reads and writes guarded by _mutex.','line_number':552,'multiline':False]['text':' (W)  Synchronization required only for writes.','line_number':553,'multiline':False]['text':' (R) (not owned)','line_number':556,'multiline':False]['text':' (M)','line_number':557,'multiline':False]['text':' (M)','line_number':558,'multiline':False]['text':' (M)','line_number':559,'multiline':False]['text':' This data is provided in the initial state doc and never changes.  We keep copies to','line_number':561,'multiline':False]['text':' avoid having to obtain the mutex to access them.','line_number':562,'multiline':False]['text':' (R)','line_number':563,'multiline':False]['text':' (R)','line_number':564,'multiline':False]['text':' (R)','line_number':565,'multiline':False]['text':' (R)','line_number':566,'multiline':False]['text':' (R)','line_number':567,'multiline':False]['text':' (M)','line_number':569,'multiline':False]['text':' Members of the donor replica set that we have excluded as a potential sync source for','line_number':571,'multiline':False]['text':' some period of time.','line_number':572,'multiline':False]['text':' (M)','line_number':573,'multiline':False]['text':' The '_client' will be used for other operations such as fetching','line_number':575,'multiline':False]['text':' optimes while the '_oplogFetcherClient' will be reserved for the oplog fetcher only.','line_number':576,'multiline':False]['text':' Because the oplog fetcher uses exhaust, we need a dedicated connection for oplog fetcher.','line_number':577,'multiline':False]['text':'','line_number':578,'multiline':False]['text':' Follow DBClientCursor synchonization rules.','line_number':579,'multiline':False]['text':' (S)','line_number':580,'multiline':False]['text':' (S)','line_number':581,'multiline':False]['text':' (M)','line_number':583,'multiline':False]['text':' (X)','line_number':584,'multiline':False]['text':' (M)','line_number':585,'multiline':False]['text':' (M)','line_number':588,'multiline':False]['text':' (M)','line_number':589,'multiline':False]['text':' (M)','line_number':590,'multiline':False]['text':' (M)','line_number':591,'multiline':False]['text':' (M)','line_number':592,'multiline':False]['text':' Writer pool to do storage write operation. Used by tenant collection cloner and by','line_number':594,'multiline':False]['text':' tenant oplog applier.','line_number':595,'multiline':False]['text':'(M)','line_number':596,'multiline':False]['text':' Data shared by cloners. Follow TenantMigrationSharedData synchronization rules.','line_number':597,'multiline':False]['text':' (S)','line_number':598,'multiline':False]['text':' Promise that is resolved when all voting data-bearing recipient nodes have successfully','line_number':600,'multiline':False]['text':' imported all donor files.','line_number':601,'multiline':False]['text':' (W)','line_number':602,'multiline':False]['text':' Whether we are waiting for members to import donor files.','line_number':603,'multiline':False]['text':' Which members have imported all donor files.','line_number':605,'multiline':False]['text':' Promise that is resolved when the migration reached consistent point.','line_number':608,'multiline':False]['text':' (W)','line_number':609,'multiline':False]['text':' Promise that is resolved when migration is completed.','line_number':610,'multiline':False]['text':' (W)','line_number':611,'multiline':False]['text':' Promise that is resolved when the recipientForgetMigration command is received or on','line_number':612,'multiline':False]['text':' stepDown/shutDown with errors.','line_number':613,'multiline':False]['text':' (W)','line_number':614,'multiline':False]['text':' Promise that is resolved when the instance has been durably marked garbage collectable.','line_number':615,'multiline':False]['text':' (W)','line_number':616,'multiline':False]['text':' Promise that is resolved with when the instance is interrupted, and holds interrupt error','line_number':617,'multiline':False]['text':' status.','line_number':618,'multiline':False]['text':' (M)','line_number':619,'multiline':False]['text':' Waiters are notified when 'tenantOplogApplier' is valid on restart.','line_number':621,'multiline':False]['text':' (M)','line_number':622,'multiline':False]['text':' Waiters are notified when 'tenantOplogApplier' is ready to use.','line_number':623,'multiline':False]['text':' (M)','line_number':624,'multiline':False]['text':' Indicates whether 'tenantOplogApplier' is ready to use or not.','line_number':625,'multiline':False]['text':' (M)','line_number':626,'multiline':False]['text':'*
     *  Creates the state document collection.
     ','line_number':630,'multiline':True]['text':' namespace repl','line_number':638,'multiline':False]['text':' namespace mongo','line_number':639,'multiline':False]