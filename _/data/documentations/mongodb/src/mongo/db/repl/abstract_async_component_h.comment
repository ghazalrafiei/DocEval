['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This class represents an abstract base class for replication components that run asynchronously
 * using the executor::TaskExecutor framework. It defines the startup/shutdown semantics with the
 * added guarantee that components can be run at most once.
 *
 * The _state variable in this class is protected by the concrete class's mutex (returned by
 * _getMutex()).
 ','line_number':50,'multiline':True]['text':'*
     * Returns true if this component is currently running or in the process of shutting down.
     ','line_number':67,'multiline':True]['text':'*
     * Starts the component. If the transition from PreStart to Running is allowed, this invokes
     * _doStartup_inlock() defined in the concrete class. If _doStartup_inlock() fails, this
     * component will transition to Complete and any restarts after this will be disallowed.
     ','line_number':72,'multiline':True]['text':'*
     * Signals this component to begin shutting down. If the transition from Running to ShuttingDown
     * is allowed, this invokes _doShutdown_inlock() defined in the concrete class.
     * Transition directly from PreStart to Complete if not started yet.
     ','line_number':79,'multiline':True]['text':'*
     * Blocks until inactive.
     ','line_number':86,'multiline':True]['text':'*
     * State transitions:
     * PreStart --> Running --> ShuttingDown --> Complete
     * It is possible to skip intermediate states. For example, calling shutdown() when the
     * component has not started will transition from PreStart directly to Complete.
     ','line_number':91,'multiline':True]['text':'*
     * Returns current component state.
     * For testing only.
     ','line_number':99,'multiline':True]['text':'*
     * Returns task executor.
     ','line_number':106,'multiline':True]['text':'*
     * Returns the name of the component passed in at construction.
     ','line_number':111,'multiline':True]['text':'*
     * Returns true if this component is currently running or in the process of shutting down.
     ','line_number':116,'multiline':True]['text':'*
     * Returns true if this component has received a shutdown request ('_state' is ShuttingDown).
     ','line_number':121,'multiline':True]['text':'*
     * Transitions this component to complete and notifies any waiters on '_stateCondition'.
     * May be called at most once.
     ','line_number':127,'multiline':True]['text':'*
     * Checks the given status (or embedded status inside the callback args) and current component
     * shutdown state. If the given status is not OK or if we are shutting down, returns a new error
     * status that should be passed to _finishCallback. The reason in the new error status will
     * include 'message'.
     * Otherwise, returns Status::OK().
     ','line_number':134,'multiline':True]['text':'*
     * Schedules work to be run by the task executor.
     * Saves handle if work was successfully scheduled.
     * Returns scheduleWork status (without the handle).
     ','line_number':149,'multiline':True]['text':'*
     * Cancels task executor callback handle if not null.
     ','line_number':162,'multiline':True]['text':'*
     * Starts up a component, owned by us, and checks our shutdown state at the same time. If the
     * component's startup() fails, resets the unique_ptr holding 'component' and return the error
     * from startup().
     ','line_number':167,'multiline':True]['text':'*
     * Shuts down a component, owned by us, if not null.
     ','line_number':177,'multiline':True]['text':'*
     * Invoked by startup() to run startup procedure after a successful transition from PreStart to
     * Running.
     * Invoked at most once by AbstractAsyncComponent.
     *
     * If _doStartup_inlock() fails, startup() will transition this component from Running to
     * Complete. Subsequent startup() attempts will return an IllegalOperation error.
     *
     * If _doStartup_inlock() succeeds, the component stays in Running (or ShuttingDown if
     * shutdown() is called) until the component has finished its processing (transtion to
     * Complete).
     *
     * It is the responsibility of the implementation to transition the component state to Complete
     * by calling _transitionToComplete_inlock() once the component has finished its processing.
     ','line_number':186,'multiline':True]['text':'*
     * Runs shutdown procedure after a successful transition from Running to ShuttingDown.
     * Invoked at most once by AbstractAsyncComponent.
     * May not throw exceptions.
     ','line_number':203,'multiline':True]['text':'*
     * Function invoked before join() without holding the component's mutex.
     ','line_number':210,'multiline':True]['text':'*
     * Returns mutex to guard this component's state variable.
     ','line_number':215,'multiline':True]['text':' All member variables are labeled with one of the following codes indicating the','line_number':221,'multiline':False]['text':' synchronization rules for accessing them.','line_number':222,'multiline':False]['text':'','line_number':223,'multiline':False]['text':' (R)  Read-only in concurrent operation; no synchronization required.','line_number':224,'multiline':False]['text':' (S)  Self-synchronizing; access in any way from any context.','line_number':225,'multiline':False]['text':' (M)  Reads and writes guarded by mutex returned by _getMutex().','line_number':226,'multiline':False]['text':' Task executor used to schedule tasks and remote commands.','line_number':228,'multiline':False]['text':' (R)','line_number':229,'multiline':False]['text':' Component name used in error messages generated by startup().','line_number':231,'multiline':False]['text':' (R)','line_number':232,'multiline':False]['text':' Current component state. See comments for State enum class for details.','line_number':234,'multiline':False]['text':' Protected by mutex in concrete class returned in _getMutex().','line_number':235,'multiline':False]['text':' (M)','line_number':236,'multiline':False]['text':' Used by _transitionToComplete_inlock() to signal changes in '_state'.','line_number':238,'multiline':False]['text':' (S)','line_number':239,'multiline':False]['text':'*
 * Insertion operator for AbstractAsyncComponent::State. Formats state for output stream.
 * For testing only.
 ','line_number':242,'multiline':True]['text':' Save name of 'component' before resetting unique_ptr.','line_number':253,'multiline':False]['text':' namespace repl','line_number':290,'multiline':False]['text':' namespace mongo','line_number':291,'multiline':False]