['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace','line_number':130,'multiline':False]['text':' This write is not replicated.','line_number':169,'multiline':False]['text':' This is safe because this is only called during rollback, and you can not have two','line_number':182,'multiline':False]['text':' rollbacks at once.','line_number':183,'multiline':False]['text':' If we would go over the integer limit, reset the Rollback ID to 1.','line_number':189,'multiline':False]['text':' Since the Rollback ID is in a singleton collection, we can fix the _id field.','line_number':202,'multiline':False]['text':' We wait until durable so that we are sure the Rollback ID is updated before rollback ends.','line_number':208,'multiline':False]['text':' This thread is killable since it is only used by initial sync which does not','line_number':254,'multiline':False]['text':' interact with repl state changes.','line_number':255,'multiline':False]['text':' DocumentValidationSettings::kDisableInternalValidation is currently inert.','line_number':257,'multiline':False]['text':' But, it's logically ok to disable internal validation as this function gets called','line_number':258,'multiline':False]['text':' only during initial sync.','line_number':259,'multiline':False]['text':' Retry if WCE.','line_number':265,'multiline':False]['text':' Get locks and create the collection.','line_number':269,'multiline':False]['text':' Create the collection.','line_number':278,'multiline':False]['text':' Build empty capped indexes.  Capped indexes cannot be built by the MultiIndexBlock','line_number':285,'multiline':False]['text':' because the cap might delete documents off the back while we are inserting them into','line_number':286,'multiline':False]['text':' the front.','line_number':287,'multiline':False]['text':' Instantiate the CollectionBulkLoader here so that it acquires the same MODE_X lock we've','line_number':312,'multiline':False]['text':' used in this scope. The BulkLoader will manage an AutoGet of its own to control the','line_number':313,'multiline':False]['text':' lifetime of the lock. This is safe to do as we're in the initial sync phase and the node','line_number':314,'multiline':False]['text':' isn't yet available to users.','line_number':315,'multiline':False]['text':'*
 * Returns const CollectionPtr& from database RAII object.
 * Returns NamespaceNotFound if the database or collection does not exist.
 ','line_number':344,'multiline':True]['text':' Simplify locking rules for oplog collection.','line_number':371,'multiline':False]['text':' namespace','line_number':400,'multiline':False]['text':' This is needed since dropDatabase can't be rolled back.','line_number':436,'multiline':False]['text':' This is safe be replaced by "invariant(db);dropDatabase(opCtx, db);" once','line_number':437,'multiline':False]['text':' fixed.','line_number':438,'multiline':False]['text':' Check if there already exist a Collection/view on the given namespace 'nss'. The','line_number':483,'multiline':False]['text':' answer may change at any point after this call as we make this call without holding','line_number':484,'multiline':False]['text':' the collection lock. But, it is fine as we properly handle while registering the','line_number':485,'multiline':False]['text':' uncommitted collection with CollectionCatalog. This check is just here to prevent it','line_number':486,'multiline':False]['text':' from being created in the common case.','line_number':487,'multiline':False]['text':' This commit call can throw if a view already exists while registering the','line_number':498,'multiline':False]['text':' collection.','line_number':499,'multiline':False]['text':' Use IndexBuildsCoordinator::createIndexesOnEmptyCollection() rather than','line_number':522,'multiline':False]['text':' IndexCatalog::createIndexOnEmptyCollection() as the former generates','line_number':523,'multiline':False]['text':' 'createIndexes' oplog entry for replicated writes.','line_number':524,'multiline':False]['text':' fromMigrate ','line_number':526,'multiline':True]['text':' Database does not exist - nothing to do.','line_number':542,'multiline':False]['text':'*
 * Returns DeleteStageParams for deleteOne with fetch.
 ','line_number':662,'multiline':True]['text':'*
 * Shared implementation between findDocuments, deleteDocuments, and _findOrDeleteById.
 * _findOrDeleteById is used by findById, and deleteById.
 ','line_number':672,'multiline':True]['text':' We need to explicitly use this in a few places to help the type inference.  Use a','line_number':691,'multiline':False]['text':' shorthand.','line_number':692,'multiline':False]['text':' Use collection scan.','line_number':724,'multiline':False]['text':' resumeAfterId ','line_number':783,'multiline':True]['text':' Use index scan.','line_number':797,'multiline':False]['text':' namespace','line_number':895,'multiline':False]['text':' Collection scan.','line_number':939,'multiline':False]['text':' Start at the beginning of the collection.','line_number':941,'multiline':False]['text':' Ask for 2 documents to ensure it's a singleton.','line_number':943,'multiline':False]['text':'*
 * Checks _id key passed to upsertById and returns a query document for UpdateRequest.
 ','line_number':975,'multiline':True]['text':' With the ID hack, only simple _id queries are allowed. Otherwise, UpdateStage will fail with','line_number':981,'multiline':False]['text':' a fatal assertion.','line_number':982,'multiline':False]['text':' We only want to update one document for performance.','line_number':995,'multiline':False]['text':' ParsedUpdate needs to be inside the write conflict retry loop because it may create a','line_number':1013,'multiline':False]['text':' CanonicalQuery whose ownership will be transferred to the plan executor in','line_number':1014,'multiline':False]['text':' getExecutorUpdate().','line_number':1015,'multiline':False]['text':' verbosity ','line_number':1029,'multiline':True]['text':' The update result is ignored.','line_number':1036,'multiline':False]['text':' namespace','line_number':1048,'multiline':False]['text':' Validate and construct an _id query for UpdateResult.','line_number':1054,'multiline':False]['text':' The _id key will be passed directly to IDHackStage.','line_number':1055,'multiline':False]['text':' We can create an UpdateRequest now that the collection's namespace has been resolved, in','line_number':1075,'multiline':False]['text':' the event it was specified as a UUID.','line_number':1076,'multiline':False]['text':' This follows from using an exact _id query.','line_number':1083,'multiline':False]['text':' ParsedUpdate needs to be inside the write conflict retry loop because it contains','line_number':1087,'multiline':False]['text':' the UpdateDriver whose state may be modified while we are applying the update.','line_number':1088,'multiline':False]['text':' We're using the ID hack to perform the update so we have to disallow collections','line_number':1095,'multiline':False]['text':' without an _id index.','line_number':1096,'multiline':False]['text':' The update result is ignored.','line_number':1113,'multiline':False]['text':' This disables the isLegalClientSystemNS() check in getExecutorDelete() which is used to','line_number':1158,'multiline':False]['text':' disallow client deletes from unrecognized system collections.','line_number':1159,'multiline':False]['text':' ParsedDelete needs to be inside the write conflict retry loop because it may create a','line_number':1175,'multiline':False]['text':' CanonicalQuery whose ownership will be transferred to the plan executor in','line_number':1176,'multiline':False]['text':' getExecutorDelete().','line_number':1177,'multiline':False]['text':' verbosity ','line_number':1185,'multiline':True]['text':' The count of deleted documents is ignored.','line_number':1192,'multiline':False]['text':' A record id in the oplog collection is equivalent to the document's timestamp field.','line_number':1211,'multiline':False]['text':' Iterate the collection in reverse until the desiredRecordId, or one less than, is found.','line_number':1214,'multiline':False]['text':' Oplog reads are specially done under only MODE_IS global locks, without database or','line_number':1232,'multiline':False]['text':' collection level intent locks. Therefore, reads can run concurrently with validate cmds that','line_number':1233,'multiline':False]['text':' take collection MODE_X locks. Validate with {full:true} set calls WT::verify on the','line_number':1234,'multiline':False]['text':' collection, which causes concurrent readers to hit WT EBUSY errors that MongoDB converts','line_number':1235,'multiline':False]['text':' into WriteConflictException errors.','line_number':1236,'multiline':False]['text':'','line_number':1237,'multiline':False]['text':' Consequently, this code must be resilient to WCE errors and retry until the validate cmd','line_number':1238,'multiline':False]['text':' finishes. The greater operation using this helper cannot simply fail because it would cause','line_number':1239,'multiline':False]['text':' correctness errors.','line_number':1240,'multiline':False]['text':' This will log a message about the conflict initially and then every 5 seconds, with','line_number':1247,'multiline':False]['text':' the current rather arbitrary settings.','line_number':1248,'multiline':False]['text':' Sleep a bit so we do not keep hammering the system with retries while the validate','line_number':1258,'multiline':False]['text':' cmd finishes.','line_number':1259,'multiline':False]['text':' If the storage engine does not support getEarliestOplogTimestamp(), then fall back to higher','line_number':1271,'multiline':False]['text':' level (above the storage engine) logic to fetch the earliest oplog entry timestamp.','line_number':1272,'multiline':False]['text':' Reset the snapshot so that it is ensured to see the latest oplog entries.','line_number':1274,'multiline':False]['text':' The oplog can be empty when an initial syncing node crashes before the oplog application','line_number':1290,'multiline':False]['text':' phase.','line_number':1291,'multiline':False]['text':' If the storage engine does not support getLatestOplogTimestamp, then fall back to higher','line_number':1309,'multiline':False]['text':' level (above the storage engine) logic to fetch the latest oplog entry timestamp.','line_number':1310,'multiline':False]['text':' Reset the snapshot so that it is ensured to see the latest oplog entries.','line_number':1312,'multiline':False]['text':' Helpers::getLast will bypass the oplog visibility rules by doing a backwards collection','line_number':1315,'multiline':False]['text':' scan.','line_number':1316,'multiline':False]['text':' We cannot fix the data size correctly, so we just get the current cached value and keep it','line_number':1375,'multiline':False]['text':' the same.','line_number':1376,'multiline':False]['text':' Hold the stable timestamp back if this failpoint is enabled.','line_number':1401,'multiline':False]['text':' Pass an InterruptedDueToReplStateChange error to async callers waiting on the JournalFlusher','line_number':1433,'multiline':False]['text':' thread for durability.','line_number':1434,'multiline':False]['text':'forRestart=','line_number':1436,'multiline':True]['text':' Dump storage engine contents (including transaction information) before fatally','line_number':1440,'multiline':False]['text':' asserting.','line_number':1441,'multiline':False]['text':' The storage engine may support the use of OplogTruncateMarkers to more finely control','line_number':1461,'multiline':False]['text':' oplog history deletion, in which case we need to start the thread to','line_number':1462,'multiline':False]['text':' periodically execute deletion via oplog truncate markers. OplogTruncateMarkers are a','line_number':1463,'multiline':False]['text':' replacement for capped collection deletion of the oplog collection history.','line_number':1464,'multiline':False]['text':' Waiting for oplog writes to be visible in the oplog does not use any storage engine resources','line_number':1478,'multiline':False]['text':' and must not wait for ticket acquisition to avoid deadlocks with updating oplog visibility.','line_number':1479,'multiline':False]['text':' Setting the oplog visibility does not use any storage engine resources and must skip ticket','line_number':1496,'multiline':False]['text':' acquisition to avoid deadlocks with updating oplog visibility.','line_number':1497,'multiline':False]['text':' namespace repl','line_number':1536,'multiline':False]['text':' namespace mongo','line_number':1537,'multiline':False]