['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':35,'multiline':False]['text':' Pass a dummy OplogFetcherRestartDecision to the base OplogFetcher.','line_number':60,'multiline':False]['text':' Pass a dummy EnqueueDocumentsFn to the base OplogFetcher.','line_number':63,'multiline':False]['text':' Pass a dummy OnShutdownCallbackFn to the base OplogFetcher.','line_number':65,'multiline':False]['text':' Set _first to false after receiving the first batch.','line_number':100,'multiline':False]['text':' Shutdown the OplogFetcher with error if documents fail to validate.','line_number':103,'multiline':False]['text':' Enqueue documents in a separate thread with a different client than the test thread. This','line_number':114,'multiline':False]['text':' is to avoid interfering the thread local client in the test thread.','line_number':115,'multiline':False]['text':' Wait until the enqueue finishes.','line_number':121,'multiline':False]['text':' Shutdown the OplogFetcher with error if enqueue fails.','line_number':124,'multiline':False]['text':' Update lastFetched to the last oplog entry enqueued.','line_number':131,'multiline':False]['text':' Shutdown the OplogFetcher successfully if the sync source closes the oplog tailing cursor.','line_number':143,'multiline':False]['text':' Shutdown the OplogFetcher with error if it cannot restart.','line_number':152,'multiline':False]['text':' Noop if the OplogFetcher is not active or is already shutting down.','line_number':161,'multiline':False]['text':' Fulfill the finish promise so _finishCallback is called.','line_number':166,'multiline':False]['text':' Create a thread that waits on the _finishPromise and call _finishCallback once with the','line_number':187,'multiline':False]['text':' finish status. This is to synchronize the OplogFetcher shutdown between the test thread and','line_number':188,'multiline':False]['text':' the OplogFetcher's owner. For example, the OplogFetcher could be shut down by the test thread','line_number':189,'multiline':False]['text':' by simulating an error response while the owner of the OplogFetcher (e.g. InitialSyncer) is','line_number':190,'multiline':False]['text':' also trying to shut it down via shutdown() and _doShutdown_inlock(). Thus, by having','line_number':191,'multiline':False]['text':' _waitForFinishThread as the only place that calls _finishCallback, we can make sure that','line_number':192,'multiline':False]['text':' _finishCallback is called only once (outside of the mutex) on shutdown.','line_number':193,'multiline':False]['text':' Wait for the finish signal and call _finishCallback once.','line_number':200,'multiline':False]['text':' Fulfill the finish promise so _finishCallback is called (outside of the mutex).','line_number':207,'multiline':False]['text':' Call _onShutdownCallbackFn outside of the mutex.','line_number':226,'multiline':False]['text':' Release any resources that might be held by the '_onShutdownCallbackFn' function object.','line_number':234,'multiline':False]['text':' The function object will be destroyed outside the lock since the temporary variable','line_number':235,'multiline':False]['text':' 'onShutdownCallbackFn' is declared before 'lock'.','line_number':236,'multiline':False]['text':' Release any resources held by the OplogFetcherRestartDecision.','line_number':240,'multiline':False]['text':' namespace repl','line_number':244,'multiline':False]['text':' namespace mongo','line_number':245,'multiline':False]