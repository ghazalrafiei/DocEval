['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * OpTime encompasses a Timestamp (which itself is composed of two 32-bit integers, which can
 * represent a time_t and a counter), and a 64-bit Term number.  OpTime can be used to
 * label every op in an oplog with a unique identifier.
 ','line_number':55,'multiline':True]['text':' The term of an OpTime generated by old protocol version.','line_number':66,'multiline':False]['text':' The initial term after the first time upgrading from protocol version 0.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' This is also the initial term for nodes that were recently started up but have not','line_number':71,'multiline':False]['text':' yet joined the cluster, all in protocol version 1.','line_number':72,'multiline':False]['text':'*
     * Returns maximum OpTime value.
     ','line_number':75,'multiline':True]['text':' Default OpTime, also the smallest one.','line_number':80,'multiline':False]['text':'*
     * Serializes the contents of this optime to the specified builder in the form:
     *      subObjName : { ts: <timestamp>, t: <term> }
     ','line_number':96,'multiline':True]['text':'*
     * Parses OpTime from a document in the form:
     *     { ts: <timestamp>, t: <term> }
     *
     * Throws an exception on error.
     ','line_number':105,'multiline':True]['text':' Returns true when this OpTime is not yet initialized.','line_number':115,'multiline':False]['text':'*
     * Functor compatible with std::hash for std::unordered_{map,set}
     * Only use it when you know two optimes are not distinguished only by term.
     * Warning: The hash function is subject to change. Do not use in cases where hashes need
     *          to be consistent across versions.
     ','line_number':120,'multiline':True]['text':' Only compare timestamp if either of the two OpTimes is generated by old protocol,','line_number':133,'multiline':False]['text':' so that (Timestamp(), 0) == (Timestamp(), -1)','line_number':134,'multiline':False]['text':' Compare term first, then the timestamps.','line_number':138,'multiline':False]['text':' Since the term will be reset to 0 after upgrade protocol version -> downgrade','line_number':142,'multiline':False]['text':' -> upgrade again, comparison of arbitrary OpTimes may not be safe. However it's safe','line_number':143,'multiline':False]['text':' to compare OpTimes generated in same or successive replset configs.','line_number':144,'multiline':False]['text':' Upgrade / downgrade process will make sure the last oplog entries on all nodes are from','line_number':145,'multiline':False]['text':' the same protocol version to avoid problematic scenarios.','line_number':146,'multiline':False]['text':' Only compare timestamp if either of the two OpTimes is generated by old protocol.','line_number':148,'multiline':False]['text':' Compare term first, then the timestamps.','line_number':152,'multiline':False]['text':'*
     * Parses OpTime and WallTime from a document.
     ','line_number':189,'multiline':True]['text':'*
     * Parses OpTime and WallTime from a document.
     * Throws an exception on error.
     ','line_number':194,'multiline':True]['text':' Wall clock time ordering should not matter for calculations of the commit point.','line_number':208,'multiline':False]['text':' namespace repl','line_number':216,'multiline':False]['text':'*
 * Support BSONObjBuilder and BSONArrayBuilder "stream" API.
 ','line_number':218,'multiline':True]['text':' namespace mongo','line_number':224,'multiline':False]