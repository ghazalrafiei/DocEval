['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Reads the MinValid document from disk.
     * Returns boost::none if not present.
     ','line_number':103,'multiline':True]['text':'*
     * Updates the MinValid document according to the provided update spec. The collection must
     * exist, see `createInternalCollections`. If the document does not exist, it is upserted.
     *
     * This fasserts on failure.
     ','line_number':109,'multiline':True]['text':'*
     * Reads the OplogTruncateAfterPoint document from disk.
     * Returns boost::none if not present.
     ','line_number':117,'multiline':True]['text':'*
     * Updates the oplogTruncateAfterPoint with 'timestamp'. Callers should use this codepath when
     * expecting write interruption errors.
     ','line_number':124,'multiline':True]['text':'*
     * Upserts the OplogTruncateAfterPoint document according to the provided update spec. The
     * collection must already exist. See `createInternalCollections`.
     ','line_number':130,'multiline':True]['text':' Protects modifying and reading _isPrimary below.','line_number':142,'multiline':False]['text':' Tracks whether or not the node is primary. Avoids potential deadlocks taking the replication','line_number':146,'multiline':False]['text':' coordinator's mutex to check replication state. Also remains false for standalones that do','line_number':147,'multiline':False]['text':' not use timestamps.','line_number':148,'multiline':False]['text':' Locks around fetching the 'all_durable' timestamp from the storage engine and updating the','line_number':151,'multiline':False]['text':' oplogTruncateAfterPoint. This prevents the oplogTruncateAfterPoint from going backwards in','line_number':152,'multiline':False]['text':' time in case of multiple callers to refreshOplogTruncateAfterPointIfPrimary.','line_number':153,'multiline':False]['text':' In-memory cache of the of the oplog entry LTE to the oplogTruncateAfterPoint timestamp.','line_number':157,'multiline':False]['text':' Eventually matches the oplogTruncateAfterPoint timestamp when parallel writes finish. Avoids','line_number':158,'multiline':False]['text':' repeatedly writing the same oplogTruncateAfterPoint timestamp to disk, which creates noise in','line_number':159,'multiline':False]['text':' a silent system. Only set in state PRIMARY.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' Reset whenever setOplogTruncateAfterPoint() manually resets the truncate point: this could','line_number':162,'multiline':False]['text':' push the durable truncate point forwards or backwards in time, reflecting changes in the','line_number':163,'multiline':False]['text':' oplog. The truncate point is manually set in non-PRIMARY states.','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':' Note: these values lack their own specific concurrency control, instead depending on the','line_number':166,'multiline':False]['text':' serialization that exists in setting the oplog truncate after point.','line_number':167,'multiline':False]['text':' Cached initialSyncId from last initial sync. Will only be set on startup or initial sync.','line_number':171,'multiline':False]['text':' namespace repl','line_number':175,'multiline':False]['text':' namespace mongo','line_number':176,'multiline':False]