['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Forward declarations.','line_number':61,'multiline':False]['text':'*
 * Converts OplogEntriesEnum or DbCheckValidationModeEnum into string for health log.
 ','line_number':70,'multiline':True]['text':'*
 * Logs an entry into 'local.system.healthLog'.
 *
 * The parameters nss and collectionUUID are boost::optional because they are not present in
 * DbCheckOplogStartStop health log entries. DbCheckOplogStartStop entries will use boost::none
 * for both nss and collectionUUID.
 ','line_number':76,'multiline':True]['text':'*
 * Logs an error into 'local.system.healthLog'.
 ','line_number':91,'multiline':True]['text':'*
 * Get a HealthLogEntry for a dbCheck batch.
 ','line_number':111,'multiline':True]['text':'*
 * DbCheckAcquisition is a helper class to acquire locks and set RecoveryUnit state for the dbCheck
 * operation.
 ','line_number':135,'multiline':True]['text':'*
 * Hashing collections or indexes.
 *
 * Provides MD5-based hashing of ranges of documents.  Note that this class does *not* provide
 * synchronization: clients must, for example, lock the database to ensure that named collections
 * exist, and hold at least a MODE_IS lock before asking a `DbCheckHasher` to retrieve any
 * documents.
 ','line_number':159,'multiline':True]['text':'*
     * Create a new DbCheckHasher hashing documents or index keys within the given limits.
     *
     * The check will end when any of the specified limits are reached.  Must be called on a
     * collection with an _id index; otherwise a DBException with code ErrorCodes::IndexNotFound
     * will be thrown.
     *
     * @param collection The collection to hash from.
     * @param start The first key to hash (exclusive).
     * @param end The last key to hash (inclusive).
     * @param maxCount The maximum number of documents or index keys to hash.
     * @param maxBytes The maximum number of bytes to hash.
     ','line_number':169,'multiline':True]['text':'*
     * Hashes all documents up to the deadline.
     ','line_number':194,'multiline':True]['text':'*
     * Hash index keys between first and last inclusive.
     ','line_number':201,'multiline':True]['text':'*
     * Checks if a document has missing index keys by finding the index keys that should be
     * generated for each document and checking that they actually exist in the index.
     ','line_number':209,'multiline':True]['text':'*
     * Returns the total hash of all items seen so far.
     ','line_number':218,'multiline':True]['text':'*
     * Gets the last key this hasher has hashed.
     *
     * Again, not the same as the `end` passed in; this is MinKey if no items have been hashed.
     ','line_number':223,'multiline':True]['text':'*
     * Checks if we can hash `obj` without going over our limits.
     ','line_number':239,'multiline':True]['text':' Represents the max number of docs or keys seen, which varies based on the validation mode:','line_number':253,'multiline':False]['text':'  - "dataConsistency": _countDocsSeen <= _maxCount','line_number':254,'multiline':False]['text':'  - "dataConsistencyAndMissingIndexKeysCheck": (_countDocsSeen + _countKeysSeen) <= _maxCount','line_number':255,'multiline':False]['text':'  - "extraIndexKeysCheck": _countKeysSeen <= _maxCount','line_number':256,'multiline':False]['text':'*
 * Performs the dbCheck oplog command.
 *
 * Returns a `Status` to match the type used for oplog command hooks, but in fact always handles
 * errors (primarily by writing to the health log), so always returns `Status::OK`.
 ','line_number':273,'multiline':True]['text':' namespace repl','line_number':282,'multiline':False]['text':' namespace mongo','line_number':283,'multiline':False]