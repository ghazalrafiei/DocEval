['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * Some utilities for dealing with the expected/found documents in health log entries.
 ','line_number':85,'multiline':True]['text':'*
 * Get whether the expected and found objects match, plus an expected/found object to report to the
 * health log.
 ','line_number':97,'multiline':True]['text':'*
 * An overload for boost::optionals, which omits boost::none fields.
 ','line_number':113,'multiline':True]['text':' namespace','line_number':138,'multiline':False]['text':'*
 * Returns corresponding string for enums.
 ','line_number':140,'multiline':True]['text':'*
 * Fills in the timestamp and scope, which are always the same for dbCheck's entries.
 ','line_number':170,'multiline':True]['text':'*
 * Get an error message if the check fails.
 ','line_number':198,'multiline':True]['text':'*
 * Get a HealthLogEntry for a dbCheck batch.
 ','line_number':237,'multiline':True]['text':' We relax inconsistency checks for some collections to a simple warning in some cases.','line_number':279,'multiline':False]['text':' preimages and change collections may be using untimestamped truncates on each node','line_number':280,'multiline':False]['text':' independently and can easily be inconsistent. In addition, by design','line_number':281,'multiline':False]['text':' the image_collection can skip a write during steady-state replication, and the','line_number':282,'multiline':False]['text':' preimages collection can be inconsistent during logical initial sync, all of which is','line_number':283,'multiline':False]['text':' harmless.','line_number':284,'multiline':False]['text':' dbCheck writes to the oplog, so we need to take an IX global lock.','line_number':330,'multiline':False]['text':' Set all of the RecoveryUnit parameters before the colleciton acquisition, which opens a','line_number':332,'multiline':False]['text':' storage snapshot.','line_number':333,'multiline':False]['text':' We don't want detected data corruption to prevent us from finishing our scan. Locations','line_number':336,'multiline':False]['text':' where we throw these errors should already be writing to the health log anyway.','line_number':337,'multiline':False]['text':' We don't need to write to the collection, so we use acquireCollectionMaybeLockFree with a','line_number':340,'multiline':False]['text':' read acquisition request.','line_number':341,'multiline':False]['text':' Get the MD5 hasher set up.','line_number':371,'multiline':False]['text':' Get the _id index.','line_number':378,'multiline':False]['text':' Set up a simple index scan on that.','line_number':382,'multiline':False]['text':' Fetch relevant indexes if we are doing missing index keys check.','line_number':408,'multiline':False]['text':' hashForExtraIndexKeysCheck must only be called if the hasher was created with indexName.','line_number':436,'multiline':False]['text':' We should have already checked for if the index exists at this timestamp.','line_number':439,'multiline':False]['text':'inclusive','line_number':453,'multiline':True]['text':' Iterate through index table.','line_number':455,'multiline':False]['text':' Append the keystring to the hash without the recordId at end.','line_number':466,'multiline':False]['text':' If we got to the end of the index batch without seeing any keys, set the last key to MaxKey.','line_number':488,'multiline':False]['text':' The index is partial and the document does not match the index filter expression, so','line_number':512,'multiline':False]['text':' skip checking this index.','line_number':513,'multiline':False]['text':' TODO (SERVER-83074): Enable special indexes in dbcheck.','line_number':517,'multiline':False]['text':' TODO (SERVER-81074): Add additional testing on multikey metadata.','line_number':533,'multiline':False]['text':' Set keyStrings to the expected index keys for currentObj.','line_number':537,'multiline':False]['text':' TODO: SERVER-79866 increment _bytesSeen by appropriate amount','line_number':553,'multiline':False]['text':' _bytesSeen += key.getSize();','line_number':554,'multiline':False]['text':' seekForKeyString returns the closest key string if the exact keystring does not','line_number':556,'multiline':False]['text':' exist.','line_number':557,'multiline':False]['text':' Dbcheck will access every index for each document, and we aim for the count to','line_number':559,'multiline':False]['text':' represent the storage accesses. Therefore, we increment the number of keys seen.','line_number':560,'multiline':False]['text':' TODO (SERVER-80960): Handle the old keystring format without appended RecordId','line_number':569,'multiline':False]['text':' if this is a unique index.','line_number':570,'multiline':False]['text':' Iterate through the _id index and obtain the object ID and record ID pair. If the _id index','line_number':595,'multiline':False]['text':' key entry is corrupt, getNext() will throw an exception and we will fail the batch.','line_number':596,'multiline':False]['text':' If we cannot find the record in the record store, continue onto the next recordId.','line_number':617,'multiline':False]['text':' The inconsistency will be caught when we compare hashes.','line_number':618,'multiline':False]['text':' We validate the record data before parsing it into a BSONObj, as parsing it into a','line_number':622,'multiline':False]['text':' BSONObj may hide some of the corruption.','line_number':623,'multiline':False]['text':' If there was a BSON error from kFull/kExtended modes (that is not caught by','line_number':647,'multiline':False]['text':' kDefault), the error code would be NonConformantBSON. We log a warning','line_number':648,'multiline':False]['text':' instead because the kExtended/kFull modes were recently added, so users may','line_number':649,'multiline':False]['text':' have non-conformant documents that exist before the checks.','line_number':650,'multiline':False]['text':' If this would put us over a limit, stop here.','line_number':670,'multiline':False]['text':' Conduct missing index keys check.','line_number':678,'multiline':False]['text':' Update `last` every time. currentObjId was a BSONObj obtained from the _id index scan','line_number':696,'multiline':False]['text':' with 1 field in the form {"": _id}. We rehydrate it to add the field names back.','line_number':697,'multiline':False]['text':'','line_number':698,'multiline':False]['text':' We use the _id value obtained from the _id index walk so that we can store our last seen','line_number':699,'multiline':False]['text':' _id and proceed with dbCheck even if the previous record had corruption in its _id','line_number':700,'multiline':False]['text':' field.','line_number':701,'multiline':False]['text':' If we got to the end of the collection, set the last key to MaxKey.','line_number':714,'multiline':False]['text':' Make sure we hash at least one document.','line_number':750,'multiline':False]['text':' Check that this won't push us over our byte limit','line_number':755,'multiline':False]['text':' or our count limit.','line_number':760,'multiline':False]['text':' Cumulative number of batches processed. Can wrap around; it's not guaranteed to be in lockstep','line_number':769,'multiline':False]['text':' with other replica set members.','line_number':770,'multiline':False]['text':' TODO(SERVER-78399): Remove 'batchesProcessed'.','line_number':771,'multiline':False]['text':' Set up the hasher,','line_number':779,'multiline':False]['text':' Disable throttling for secondaries.','line_number':781,'multiline':False]['text':' We must ignore prepare conflicts on secondaries. Primaries will block on prepare','line_number':789,'multiline':False]['text':' conflicts, which guarantees that the range we scan does not have any prepared','line_number':790,'multiline':False]['text':' updates. Secondaries can encounter prepared updates in normal operation if a document','line_number':791,'multiline':False]['text':' is prepared after it has been scanned on the primary, and before the dbCheck oplog','line_number':792,'multiline':False]['text':' entry is replicated.','line_number':793,'multiline':False]['text':' TODO SERVER-78399: Clean up handling minKey/maxKey once feature flag is removed.','line_number':812,'multiline':False]['text':' If the dbcheck oplog entry doesn't contain batchStart, convert minKey to a BSONObj to','line_number':813,'multiline':False]['text':' be used as batchStart.','line_number':814,'multiline':False]['text':' TODO SERVER-78399: Clean up this check once feature flag is removed.','line_number':829,'multiline':False]['text':' Rebuild first and last keystrings from their BSON format.','line_number':872,'multiline':False]['text':' TODO(SERVER-78399): Remove 'batchesProcessed' logic and expect that','line_number':942,'multiline':False]['text':' 'getLogBatchToHealthLog' from the enry always exists.','line_number':943,'multiline':False]['text':' On debug builds, health-log every batch result; on release builds, health-log','line_number':951,'multiline':False]['text':' every N batches according to the primary.','line_number':952,'multiline':False]['text':' In case of an error, report it to the health log,','line_number':956,'multiline':False]['text':' namespace','line_number':970,'multiline':False]['text':'
 * The corresponding command run during command application.
 ','line_number':974,'multiline':True]['text':'apiStrict','line_number':986,'multiline':True]['text':' TODO SERVER-61963.','line_number':993,'multiline':False]['text':'nss','line_number':1000,'multiline':True]['text':'collectionUUID','line_number':1001,'multiline':True]['text':'data','line_number':1006,'multiline':True]['text':' namespace repl','line_number':1022,'multiline':False]['text':' namespace mongo','line_number':1023,'multiline':False]