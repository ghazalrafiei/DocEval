['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Stores a batch of oplog entries for oplog application.
 ','line_number':60,'multiline':True]['text':'*
     * A batch with this set indicates that the upstream stages of the pipeline are shutdown and
     * no more batches will be coming.
     *
     * This can only happen with empty batches.
     ','line_number':91,'multiline':True]['text':'*
     * Passes the term when the buffer is exhausted to a higher level in case the node has stepped
     * down and then stepped up again. See its caller for more context.
     ','line_number':105,'multiline':True]['text':'*
     * Leaves this object in an unspecified state. Only assignment and destruction are valid.
     ','line_number':117,'multiline':True]['text':'*
 * Consumes batches of oplog entries from the OplogBuffer to give to the oplog applier, freeing
 * up space for more operations to be fetched from a sync source and allocated onto the OplogBuffer.
 ','line_number':130,'multiline':True]['text':'*
     * Controls what can popped from the oplog buffer into a single batch of operations that can be
     * applied using OplogApplier::applyOplogBatch().
     ','line_number':139,'multiline':True]['text':' If provided, the batch will not include any operations with timestamps after this point.','line_number':148,'multiline':False]['text':' This is intended for implementing secondaryDelaySecs, so it should be some number of','line_number':149,'multiline':False]['text':' seconds before now.','line_number':150,'multiline':False]['text':' If non-null, the batch will include operations with timestamps either','line_number':153,'multiline':False]['text':' before-and-including this point or after it, not both.','line_number':154,'multiline':False]['text':'*
     * Constructs an OplogBatcher
     ','line_number':158,'multiline':True]['text':'*
     * Returns the batch of oplog entries and clears _ops so the batcher can store a new batch.
     ','line_number':165,'multiline':True]['text':'*
     * Starts up a thread to continuously pull from the OplogBuffer into the OplogBatcher's oplog
     * batch.
     ','line_number':170,'multiline':True]['text':'*
     * Shuts down the thread that pulls from the OplogBuffer to the oplog batch.
     ','line_number':176,'multiline':True]['text':'*
     * Returns a new batch of ops to apply.
     * A batch may consist of:
     *     at most "BatchLimits::ops" OplogEntries
     *     at most "BatchLimits::bytes" worth of OplogEntries
     *     only OplogEntries from before the "BatchLimits::secondaryDelaySecsLatestTimestamp" point
     *     a single command OplogEntry (excluding applyOps, which are grouped with CRUD ops)
     *
     * If waitToFillBatch is non-zero and any data is available, waits for more data up to that many
     * milliseconds from the start of the batch when the batch is not full.  The wait is
     * interruptible but aside from ending the wait, interrupts will be ignored to avoid losing
     * data. (that is, on interrupt, data already in the batch is returned immediately)
     ','line_number':181,'multiline':True]['text':'*
     * Returns the number of logical operations represented by an oplog entry.
     * This is usually one but may be greater than one in certain cases, such as in a
     * commitTransaction command.
     ','line_number':199,'multiline':True]['text':'*
     * Returns how we should batch an oplog entry: grouping with the current batch, starting a new
     * new batch, or processing it individually in its own batch.
     ','line_number':217,'multiline':True]['text':'*
     * If secondaryDelaySecs is enabled, this function calculates the most recent timestamp of any
     * oplog entries that can be be returned in a batch.
     ','line_number':223,'multiline':True]['text':'*
     * Pops the operation at the front of the OplogBuffer.
     ','line_number':229,'multiline':True]['text':'*
     * The latest batch of oplog entries ready for the applier.
     ','line_number':242,'multiline':True]['text':'*
 * Returns maximum number of operations in each batch that can be applied using
 * applyOplogBatch().
 ','line_number':250,'multiline':True]['text':'*
 * Calculates batch limit size (in bytes) using the maximum capped collection size of the oplog
 * size.  Must not be called from within a WriteUnitOfWork.
 * Batches are limited to 10% of the oplog.
 ','line_number':256,'multiline':True]['text':' namespace repl','line_number':263,'multiline':False]['text':' namespace mongo','line_number':264,'multiline':False]