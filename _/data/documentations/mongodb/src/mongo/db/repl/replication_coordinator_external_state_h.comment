['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This class represents the interface the ReplicationCoordinator uses to interact with the
 * rest of the system.  All functionality of the ReplicationCoordinatorImpl that would introduce
 * dependencies on large sections of the server code and thus break the unit testability of
 * ReplicationCoordinatorImpl should be moved here.
 ','line_number':60,'multiline':True]['text':'*
     * Starts the journal listener, and snapshot threads
     *
     * NOTE: Only starts threads if they are not already started,
     ','line_number':75,'multiline':True]['text':'*
     * Returns true if an incomplete initial sync is detected.
     ','line_number':82,'multiline':True]['text':'*
     * Starts steady state sync for replica set member.
     ','line_number':87,'multiline':True]['text':'*
     * Performs any necessary external state specific shutdown tasks, such as cleaning up
     * the threads it started.
     ','line_number':93,'multiline':True]['text':'*
     * Returns task executor for scheduling tasks to be run asynchronously.
     ','line_number':99,'multiline':True]['text':'*
     * Returns shared db worker thread pool for collection cloning.
     ','line_number':105,'multiline':True]['text':'*
     * Creates the oplog, writes the first entry and stores the replica set config document.
     ','line_number':110,'multiline':True]['text':'*
     * Called when a node on way to becoming a primary is ready to leave drain mode. It is called
     * outside of the global X lock and the replication coordinator mutex.
     *
     * Throws on errors.
     ','line_number':115,'multiline':True]['text':'*
     * Called as part of the process of transitioning to primary and run with the global X lock and
     * the replication coordinator mutex acquired, so no majoirty writes are allowed while in this
     * state. See the call site in ReplicationCoordinatorImpl for details about when and how it is
     * called.
     *
     * Among other things, this writes a message about our transition to primary to the oplog and
     * returns the optime of that message.
     *
     * Throws on errors.
     ','line_number':123,'multiline':True]['text':'*
     * Simple wrapper around SyncSourceFeedback::forwardSecondaryProgress.  Signals to the
     * SyncSourceFeedback thread that it needs to wake up and send a replSetUpdatePosition
     * command upstream.
     ','line_number':136,'multiline':True]['text':'*
     * Returns true if "host" is one of the network identities of this node.
     ','line_number':143,'multiline':True]['text':'*
     * Returns true if "host" is one of the network identities of this node, without actually
     * going out to the network and checking.
     ','line_number':148,'multiline':True]['text':'*
     * Returns true if "host" is one of the network identities of this node, without
     * checking the fast path first.
     ','line_number':154,'multiline':True]['text':'*
     * Gets the replica set config document from local storage, or returns an error.
     ','line_number':162,'multiline':True]['text':'*
     * Stores the replica set config document in local storage and writes a no-op in the oplog, or
     * returns an error.
     ','line_number':167,'multiline':True]['text':'*
     * Replaces the replica set config document in local storage, or returns an error.
     *','line_number':175,'multiline':True]['text':'*
     * Creates the collection for "lastVote" documents and initializes it, or returns an error.
     ','line_number':180,'multiline':True]['text':'*
     * Gets the replica set lastVote document from local storage, or returns an error.
     ','line_number':185,'multiline':True]['text':'*
     * Stores the replica set lastVote document in local storage, or returns an error.
     ','line_number':190,'multiline':True]['text':'*
     * Sets the global opTime to be 'newTime'.
     ','line_number':196,'multiline':True]['text':'*
     * Gets the global opTime timestamp, i.e. the latest cluster time.
     ','line_number':201,'multiline':True]['text':'*
     * Checks if the oplog exists.
     ','line_number':206,'multiline':True]['text':'*
     * Gets the last optime, and corresponding wall clock time, of an operation performed on this
     * host, from stable storage.
     ','line_number':211,'multiline':True]['text':'*
     * Returns the HostAndPort of the remote client connected to us that initiated the operation
     * represented by "opCtx".
     ','line_number':217,'multiline':True]['text':'*
     * Closes all connections in the given TransportLayer except those marked with the
     * keepOpen property, which should just be connections used for heartbeating.
     * This is used during stepdown, and transition out of primary.
     ','line_number':223,'multiline':True]['text':'*
     * Called after this node has stepped down. This includes stepDowns caused by rollback or node
     * removal, so this function must also be able to handle those situations.
     ','line_number':230,'multiline':True]['text':'*
     * Notifies the bgsync and syncSourceFeedback threads to choose a new sync source.
     ','line_number':236,'multiline':True]['text':'*
     * Notifies the bgsync to stop fetching data.
     ','line_number':241,'multiline':True]['text':'*
     * Start bgsync's producer if it's stopped.
     ','line_number':246,'multiline':True]['text':'*
     * Notify interested parties that member data for other nodes has changed.
     ','line_number':251,'multiline':True]['text':'*
     * True if we have discovered that no sync source's oplog overlaps with ours.
     ','line_number':256,'multiline':True]['text':'*
     * Clears the "committed" snapshot.
     ','line_number':261,'multiline':True]['text':'*
     * Updates the committed snapshot to the newCommitPoint, and deletes older snapshots.
     *
     * It is illegal to call with a newCommitPoint that does not name an existing snapshot.
     ','line_number':266,'multiline':True]['text':'*
     * Updates the lastApplied snapshot to a consistent point for secondary reads.
     *
     * It is illegal to call with a non-existent optime.
     ','line_number':273,'multiline':True]['text':'*
     * Returns whether or not the SnapshotThread is active.
     ','line_number':280,'multiline':True]['text':'*
     * Notifies listeners of a change in the commit level.
     ','line_number':285,'multiline':True]['text':'*
     * Returns earliest drop optime of drop pending collections.
     * Returns boost::none if there are no drop pending collections.
     ','line_number':290,'multiline':True]['text':'*
     * Returns multiplier to apply to election timeout to obtain upper bound
     * on randomized offset.
     ','line_number':296,'multiline':True]['text':'*
     * Returns true if the current storage engine supports snapshot read concern.
     ','line_number':303,'multiline':True]['text':'*
     * Returns maximum number of times that the oplog fetcher will consecutively restart the oplog
     * tailing query on non-cancellation errors during steady state replication.
     ','line_number':308,'multiline':True]['text':'*
     * Returns maximum number of times that the oplog fetcher will consecutively restart the oplog
     * tailing query on non-cancellation errors during initial sync.
     ','line_number':314,'multiline':True]['text':'
     * Creates noop writer instance. Setting the _noopWriter member is not protected by a guard,
     * hence it must be called before multi-threaded operations start.
     ','line_number':320,'multiline':True]['text':'
     * Starts periodic noop writes to oplog.
     ','line_number':326,'multiline':True]['text':'
     * Stops periodic noop writes to oplog.
     ','line_number':331,'multiline':True]['text':'*
     * Returns whether cluster-wide write concern is set on config server or not.
     *
     * Assert will be raised if running a command on the config server failed.
     ','line_number':336,'multiline':True]['text':'*
     * Used to check if the server is a shardServer and has been added to a sharded cluster via
     * addShard.
     ','line_number':343,'multiline':True]['text':'*
     * Returns the JournalListener used by storage to inform replication of durability.
     ','line_number':349,'multiline':True]['text':' namespace repl','line_number':355,'multiline':False]['text':' namespace mongo','line_number':356,'multiline':False]