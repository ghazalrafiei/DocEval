['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Every OperationContext is expected to have a unique OperationId within the scope of its
 * ServiceContext. Generally speaking, OperationId is used for forming maps of OperationContexts and
 * directing metaoperations like killop.
 ','line_number':42,'multiline':True]['text':'*
 * Facility for clients to uniquely identify their operations in the scope of a `ServiceContext`.
 * All public APIs are thread-safe. The first OperationId issued by the OperationIdManager will
 * always be 0.
 ','line_number':49,'multiline':True]['text':' Supports up to 4,194,304 clients for 32-bit id types.','line_number':56,'multiline':False]['text':' Maximum # of clients = MAX_VALUE(OperationId) / leaseSize','line_number':57,'multiline':False]['text':'*
     * Issues the next OperationId from the client's lease. May acquire a lock on client's
     * `ServiceContext` if the client has exhausted it's lease.
     ','line_number':66,'multiline':True]['text':'*
     * Finds the client that holds the lease containing the OperationId -- the id itself will not
     * necessarily be in the map, but the leaseStart that contains the id will be.
     ','line_number':72,'multiline':True]['text':' For testing purposes only, we can change the lease size to test behavior when we run out of','line_number':78,'multiline':False]['text':' leases to issue. Other than for testing purposes, leaseSize can be considered a private','line_number':79,'multiline':False]['text':' implementation detail, and should not be modified.','line_number':80,'multiline':False]['text':' This lock is acquired when destroying `ClientState`, which is a decoration on `Client`.','line_number':87,'multiline':False]['text':' If defined via `MONGO_MAKE_LATCH`, acquiring the lock may result in calling into','line_number':88,'multiline':False]['text':' `LatchAnalyzer`, which is also defined as a `Client` decoration. This could result in','line_number':89,'multiline':False]['text':' user-after-free accesses if the instance of `LatchAnalyzer` is destroyed before','line_number':90,'multiline':False]['text':' `ClientState`. Thus, we should define this as a raw mutex.','line_number':91,'multiline':False]['text':' NOLINT','line_number':92,'multiline':False]['text':' namespace mongo','line_number':100,'multiline':False]