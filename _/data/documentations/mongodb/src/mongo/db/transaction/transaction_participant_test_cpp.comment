['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':33,'multiline':False]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':34,'multiline':False]['text':'*
 * Creates an OplogEntry with given parameters and preset defaults for this test suite.
 ','line_number':139,'multiline':True]['text':' optime','line_number':150,'multiline':False]['text':' opType','line_number':151,'multiline':False]['text':' namespace','line_number':152,'multiline':False]['text':' uuid','line_number':153,'multiline':False]['text':' fromMigrate','line_number':154,'multiline':False]['text':' checkExistenceForDiffInsert','line_number':155,'multiline':False]['text':' version','line_number':156,'multiline':False]['text':' o','line_number':157,'multiline':False]['text':' o2','line_number':158,'multiline':False]['text':' sessionInfo','line_number':159,'multiline':False]['text':' upsert','line_number':160,'multiline':False]['text':' wall clock time','line_number':161,'multiline':False]['text':' statement ids','line_number':162,'multiline':False]['text':' optime of previous write within same transaction','line_number':163,'multiline':False]['text':' pre-image optime','line_number':164,'multiline':False]['text':' post-image optime','line_number':165,'multiline':False]['text':' ShardId of resharding recipient','line_number':166,'multiline':False]['text':' _id','line_number':167,'multiline':False]['text':' needsRetryImage','line_number':168,'multiline':False]['text':'*
     * TransactionPartipant calls onTransactionPrepare() within a side transaction. The boundaries
     * of this side transaction may be defined within OpObserverImpl or TransactionParticipant. To
     * verify the transaction lifecycle outside any side transaction boundaries, we override
     * postTransactionPrepare() instead of onTransactionPrepare().
     *
     * Note that OpObserverImpl is not registered with the OpObserverRegistry in TxtParticipantTest
     * setup. Only a small handful of tests explicitly register OpObserverImpl and these tests do
     * no override the callback `postTransactionPrepareFn`.
     ','line_number':173,'multiline':True]['text':' The 'commitTimestamp' must be cleared before we write the oplog entry.','line_number':273,'multiline':False]['text':' If the oplog is not disabled for this namespace, then we need to reserve an op time for the','line_number':300,'multiline':False]['text':' drop.','line_number':301,'multiline':False]['text':'*
 * When this class is in scope, makes the system behave as if we're in a DBDirectClient.
 ','line_number':308,'multiline':True]['text':' Set up a collection so that TransactionParticipant::prepareTransaction() can safely','line_number':354,'multiline':False]['text':' access it.','line_number':355,'multiline':False]['text':' Normally, committing a transaction is supposed to usassert if the corresponding prepare','line_number':371,'multiline':False]['text':' has not been majority committed. We excempt our unit tests from this expectation.','line_number':372,'multiline':False]['text':' Clear all sessions to free up any stashed resources.','line_number':381,'multiline':False]['text':' Create a new client (e.g. for migration) and opCtx.','line_number':396,'multiline':False]['text':' autocommit ','line_number':411,'multiline':True]['text':' startTransaction ','line_number':412,'multiline':True]['text':' Prepared writes as part of a split session must be done with an','line_number':421,'multiline':False]['text':' `UnreplicatedWritesBlock`. This is how we mimic oplog application.','line_number':422,'multiline':False]['text':' Prepared writes as part of a split session must be done with an','line_number':442,'multiline':False]['text':' `UnreplicatedWritesBlock`. This is how we mimic oplog application.','line_number':443,'multiline':False]['text':' namespace','line_number':507,'multiline':False]['text':' Test that transaction lock acquisition times out in `maxTransactionLockRequestTimeoutMillis`','line_number':509,'multiline':False]['text':' milliseconds.','line_number':510,'multiline':False]['text':'*
     * Make a new Session, Client, OperationContext and transaction and then attempt to take the
     * same database exclusive lock, which should conflict because the other transaction already
     * took it.
     ','line_number':526,'multiline':True]['text':' Limit the scope of the new opCtx to make sure that it gets destroyed before','line_number':540,'multiline':False]['text':' new client is destroyed.','line_number':541,'multiline':False]['text':' autocommit ','line_number':551,'multiline':True]['text':' startTransaction ','line_number':551,'multiline':True]['text':' A non-conflicting lock acquisition should work just fine.','line_number':565,'multiline':False]['text':' Restore the original client so that teardown works.','line_number':573,'multiline':False]['text':' Perform initial unstash which sets up a WriteUnitOfWork.','line_number':594,'multiline':False]['text':' Stash resources. The original Locker and RecoveryUnit now belong to the stash.','line_number':602,'multiline':False]['text':' Unset the read concern on the OperationContext. This is needed to unstash.','line_number':608,'multiline':False]['text':' Unstash the stashed resources. This restores the original Locker and RecoveryUnit to the','line_number':611,'multiline':False]['text':' OperationContext.','line_number':612,'multiline':False]['text':' Commit the transaction. This allows us to release locks.','line_number':618,'multiline':False]['text':' Must specify startTransaction=true and autocommit=false to start a transaction.','line_number':623,'multiline':False]['text':' Cannot try to start a transaction that already started.','line_number':628,'multiline':False]['text':' autocommit ','line_number':631,'multiline':True]['text':' startTransaction ','line_number':632,'multiline':True]['text':' We must have stashed transaction resources to do a second operation on the transaction.','line_number':641,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':643,'multiline':False]['text':' Omitting 'autocommit' after the first statement of a transaction should throw an error.','line_number':648,'multiline':False]['text':' autocommit ','line_number':651,'multiline':True]['text':' startTransaction ','line_number':651,'multiline':True]['text':' Including autocommit=false should succeed.','line_number':655,'multiline':False]['text':' autocommit ','line_number':658,'multiline':True]['text':' startTransaction ','line_number':659,'multiline':True]['text':' Passing 'autocommit=true' is not allowed and should crash.','line_number':666,'multiline':False]['text':' autocommit ','line_number':669,'multiline':True]['text':' startTransaction ','line_number':670,'multiline':True]['text':' Passing 'startTransaction=false' is not allowed and should crash.','line_number':677,'multiline':False]['text':' autocommit ','line_number':679,'multiline':True]['text':' startTransaction ','line_number':679,'multiline':True]['text':' We must have stashed transaction resources to re-open the transaction.','line_number':686,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':693,'multiline':False]['text':' Check the transaction operations before re-opening the transaction.','line_number':697,'multiline':False]['text':' Re-opening the same transaction should have no effect.','line_number':701,'multiline':False]['text':' autocommit ','line_number':704,'multiline':True]['text':' startTransaction ','line_number':705,'multiline':True]['text':' The transaction machinery cannot store an empty locker.','line_number':720,'multiline':False]['text':' This test makes sure the commit machinery works even when no operations are done on the','line_number':728,'multiline':False]['text':' transaction.','line_number':729,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':735,'multiline':False]['text':' This test makes sure the commit machinery works even when no operations are done on the','line_number':743,'multiline':False]['text':' transaction.','line_number':744,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':750,'multiline':False]['text':' Create a temporary collection so that we can write to it.','line_number':783,'multiline':False]['text':' Set up a transaction on the temp collection','line_number':797,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':818,'multiline':False]['text':' The recovery unit is reset on commit.','line_number':838,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':853,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':874,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':891,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':905,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':920,'multiline':False]['text':' This test makes sure the abort machinery works even when no operations are done on the','line_number':930,'multiline':False]['text':' transaction.','line_number':931,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':937,'multiline':False]['text':' This test makes sure the abort machinery works even when no operations are done on the','line_number':944,'multiline':False]['text':' transaction.','line_number':945,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':951,'multiline':False]['text':' Prepare the transaction.','line_number':962,'multiline':False]['text':' The commit should throw, since the operation was killed.','line_number':968,'multiline':False]['text':' Check the session back in.','line_number':974,'multiline':False]['text':' The transaction state should have been unaffected.','line_number':978,'multiline':False]['text':' Check out the session and continue the transaction.','line_number':986,'multiline':False]['text':' autocommit ','line_number':992,'multiline':True]['text':' startTransaction ','line_number':993,'multiline':True]['text':' Now try to commit the transaction again, with a fresh operation context.','line_number':999,'multiline':False]['text':' Prepare the transaction.','line_number':1008,'multiline':False]['text':' The abort should throw, since the operation was killed.','line_number':1014,'multiline':False]['text':' Check the session back in.','line_number':1020,'multiline':False]['text':' The transaction state should have been unaffected.','line_number':1024,'multiline':False]['text':' Check out the session and continue the transaction.','line_number':1032,'multiline':False]['text':' autocommit ','line_number':1038,'multiline':True]['text':' startTransaction ','line_number':1039,'multiline':True]['text':' Now try to commit the transaction again, with a fresh operation context.','line_number':1045,'multiline':False]['text':' Rollback changes are executed in reverse order.','line_number':1059,'multiline':False]['text':' Verify we can take the Client lock during the rollback of the stashed transaction.','line_number':1068,'multiline':False]['text':' Simulate the locking of an insert.','line_number':1102,'multiline':False]['text':' Simulate a secondary style lock stashing such that the locks are yielded.','line_number':1112,'multiline':False]['text':' Enable fail point.','line_number':1120,'multiline':False]['text':' Above unstash attempt fail should leave the txnResourceStash unchanged.','line_number':1127,'multiline':False]['text':' Disable fail point.','line_number':1130,'multiline':False]['text':' Should be successfully able to perform lock restore.','line_number':1133,'multiline':False]['text':' Commit the transaction to release the locks.','line_number':1137,'multiline':False]['text':' Test that we can acquire the RSTL in mode X, and then immediately release it so the test can','line_number':1149,'multiline':False]['text':' complete successfully.','line_number':1150,'multiline':False]['text':' Test that we can acquire the RSTL in mode X, and then immediately release it so the test can','line_number':1170,'multiline':False]['text':' complete successfully.','line_number':1171,'multiline':False]['text':' Insert an in-progress transaction document.','line_number':1198,'multiline':False]['text':' onStepUp() relies on the storage interface to create the config.transactions table.','line_number':1202,'multiline':False]['text':' The test fixture set up sets an LSID on this opCtx, which we do not want here.','line_number':1205,'multiline':False]['text':' onStepUp() must not leave aborted transactions' metadata attached to the operation','line_number':1207,'multiline':False]['text':' context.','line_number':1208,'multiline':False]['text':' onStepUp() must not leave aborted transactions' metadata attached to the operation','line_number':1212,'multiline':False]['text':' context.','line_number':1213,'multiline':False]['text':' Simulate the locking of an insert.','line_number':1265,'multiline':False]['text':' Test that we can acquire the RSTL in mode X, and then immediately release it so the test can','line_number':1310,'multiline':False]['text':' complete successfully.','line_number':1311,'multiline':False]['text':' Simulate the locking of an insert.','line_number':1333,'multiline':False]['text':' Test that we can acquire the RSTL in mode X, and then immediately release it so the test can','line_number':1380,'multiline':False]['text':' complete successfully.','line_number':1381,'multiline':False]['text':' Simulate the abort at entry point.','line_number':1404,'multiline':False]['text':' Check out a session, start the transaction and check it in.','line_number':1410,'multiline':False]['text':' Check out the session again for a new operation.','line_number':1413,'multiline':False]['text':' autocommit ','line_number':1420,'multiline':True]['text':' startTransaction ','line_number':1421,'multiline':True]['text':' Include 'autocommit=false' for transactions.','line_number':1434,'multiline':False]['text':' autocommit ','line_number':1437,'multiline':True]['text':' startTransaction ','line_number':1438,'multiline':True]['text':' Omit the 'autocommit' field for retryable writes.','line_number':1451,'multiline':False]['text':' autocommit ','line_number':1454,'multiline':True]['text':' startTransaction ','line_number':1455,'multiline':True]['text':' Will start the transaction.','line_number':1461,'multiline':False]['text':' Technically, the transaction should have been aborted on stepdown anyway, but it','line_number':1469,'multiline':False]['text':' doesn't hurt to have this kind of coverage.','line_number':1470,'multiline':False]['text':' autocommit ','line_number':1473,'multiline':True]['text':' startTransaction ','line_number':1474,'multiline':True]['text':' Will start the transaction.','line_number':1480,'multiline':False]['text':' Will start the transaction.','line_number':1501,'multiline':False]['text':' autocommit ','line_number':1512,'multiline':True]['text':' startTransaction ','line_number':1513,'multiline':True]['text':' Check that prepareTimestamp gets set.','line_number':1534,'multiline':False]['text':' Try to start a new transaction while there is already a prepared transaction on the','line_number':1542,'multiline':False]['text':' session. This should fail with a PreparedTransactionInProgress error.','line_number':1543,'multiline':False]['text':' autocommit ','line_number':1556,'multiline':True]['text':' startTransaction ','line_number':1557,'multiline':True]['text':' autocommit ','line_number':1592,'multiline':True]['text':' startTransaction ','line_number':1593,'multiline':True]['text':' Tests that a transaction aborts if it becomes too large based on the server parameter','line_number':1598,'multiline':False]['text':' 'transactionLimitBytes'.','line_number':1599,'multiline':False]['text':' Set a limit of 2.5 MB','line_number':1608,'multiline':False]['text':' Two 1MB operations should succeed; three 1MB operations should fail.','line_number':1611,'multiline':False]['text':' Set a limit of 2.5 MB','line_number':1634,'multiline':False]['text':' Two 1MB operations should succeed; three 1MB operations should fail.','line_number':1637,'multiline':False]['text':' Set the readConcern on the OperationContext.','line_number':1662,'multiline':False]['text':' Perform initial unstash, which sets up a WriteUnitOfWork.','line_number':1671,'multiline':False]['text':' Make it look like we're in a DBDirectClient running a nested operation.','line_number':1679,'multiline':False]['text':' The stash was a noop, so the locker, RecoveryUnit, and WriteUnitOfWork on the','line_number':1683,'multiline':False]['text':' OperationContext are unaffected.','line_number':1684,'multiline':False]['text':' Verify that API parameters on the opCtx were updated correctly.','line_number':1708,'multiline':False]['text':' Reset the API parameters on the opCtx to the default values.','line_number':1716,'multiline':False]['text':' Verify that 'getAPIParameters()' will return the stashed API parameters.','line_number':1719,'multiline':False]['text':' Create collections','line_number':1737,'multiline':False]['text':'*
 * Test fixture for testing behavior that depends on a server's cluster role.
 *
 * Each test case relies on the txnNumber on the operation context, which cannot be changed, so
 * define tests for behavior shared by config and shard servers as methods here and call them in the
 * fixtures for config and shard servers defined below.
 ','line_number':1768,'multiline':True]['text':' autocommit ','line_number':1873,'multiline':True]['text':' startTransaction ','line_number':1874,'multiline':True]['text':'*
 * Test fixture for a transaction participant running on a shard server.
 ','line_number':1887,'multiline':True]['text':'*
 * Test fixture for a transaction participant running on a config server.
 ','line_number':1953,'multiline':True]['text':' Prepare a transaction on secondary.','line_number':2047,'multiline':False]['text':' Simulate a transaction on secondary.','line_number':2052,'multiline':False]['text':' Simulate the locking of an insert.','line_number':2057,'multiline':False]['text':' Secondary yields locks for prepared transactions.','line_number':2066,'multiline':False]['text':' Step-up will restore the locks of prepared transactions.','line_number':2070,'multiline':False]['text':' onStepUp() relies on the storage interface to create the config.transactions table.','line_number':2073,'multiline':False]['text':'*
 * Test fixture for transactions metrics.
 ','line_number':2086,'multiline':True]['text':' Ensure that the tick source is not initialized to zero.','line_number':2097,'multiline':False]['text':'*
     * Returns the mock tick source.
     ','line_number':2101,'multiline':True]['text':' Tests that the total transactions started counter is incremented by 1 when a new transaction','line_number':2115,'multiline':False]['text':' is started.','line_number':2116,'multiline':False]['text':' Assert that the committed counter is incremented by 1.','line_number':2142,'multiline':False]['text':' Assert that the aborted counter is incremented by 1.','line_number':2174,'multiline':False]['text':' Tests that starting a transaction increments the open transactions counter by 1.','line_number':2270,'multiline':False]['text':' Tests that stashing the transaction resources does not affect the open transactions counter.','line_number':2277,'multiline':False]['text':' Tests that aborting a transaction decrements the open transactions counter by 1.','line_number':2283,'multiline':False]['text':' Tests that starting a transaction increments the open transactions counter by 1.','line_number':2292,'multiline':False]['text':' Tests that stashing the transaction resources does not affect the open transactions counter.','line_number':2299,'multiline':False]['text':' Tests that committing a transaction decrements the open transactions counter by 1.','line_number':2307,'multiline':False]['text':' Starting the transaction should put it into an inactive state.','line_number':2318,'multiline':False]['text':' Tests that the first unstash increments the active counter and decrements the inactive','line_number':2323,'multiline':False]['text':' counter.','line_number':2324,'multiline':False]['text':' Tests that stashing the transaction resources decrements active counter and increments','line_number':2331,'multiline':False]['text':' inactive counter.','line_number':2332,'multiline':False]['text':' Tests that the second unstash increments the active counter and decrements the inactive','line_number':2339,'multiline':False]['text':' counter.','line_number':2340,'multiline':False]['text':' Tests that committing a transaction decrements the active counter only.','line_number':2346,'multiline':False]['text':' Starting the transaction should put it into an inactive state.','line_number':2358,'multiline':False]['text':' Tests that the first unstash increments the active counter and decrements the inactive','line_number':2363,'multiline':False]['text':' counter.','line_number':2364,'multiline':False]['text':' Tests that stashing the transaction resources decrements active counter and increments','line_number':2371,'multiline':False]['text':' inactive counter.','line_number':2372,'multiline':False]['text':' Tests that aborting a stashed transaction decrements the inactive counter only.','line_number':2379,'multiline':False]['text':' Starting the transaction should put it into an inactive state.','line_number':2391,'multiline':False]['text':' Tests that the first unstash increments the active counter and decrements the inactive','line_number':2396,'multiline':False]['text':' counter.','line_number':2397,'multiline':False]['text':' Tests that aborting a stashed transaction decrements the active counter only.','line_number':2404,'multiline':False]['text':' Tests that unstashing a transaction puts it into an active state.','line_number':2421,'multiline':False]['text':' Tests that the first stash decrements the active counter and increments the inactive counter.','line_number':2433,'multiline':False]['text':' Tests that unstashing increments the active counter and decrements the inactive counter.','line_number':2440,'multiline':False]['text':' Tests that committing decrements the active counter only.','line_number':2447,'multiline':False]['text':' Tests that unstashing a transaction increments the active counter only.','line_number':2468,'multiline':False]['text':' Tests that stashing a prepared transaction decrements the active counter and increments the','line_number':2476,'multiline':False]['text':' inactive counter.','line_number':2477,'multiline':False]['text':' Tests that aborting a stashed prepared transaction decrements the inactive counter only.','line_number':2484,'multiline':False]['text':' The first transaction statement checks out the session and begins the transaction but returns','line_number':2506,'multiline':False]['text':' before unstashTransactionResources().','line_number':2507,'multiline':False]['text':' The transaction is now inactive.','line_number':2510,'multiline':False]['text':' The second transaction statement continues the transaction. Since there are no stashed','line_number':2516,'multiline':False]['text':' transaction resources, it is not safe to continue the transaction, so the transaction is','line_number':2517,'multiline':False]['text':' aborted.','line_number':2518,'multiline':False]['text':' The transaction is now aborted.','line_number':2527,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2540,'multiline':False]['text':' Advance the clock.','line_number':2543,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2558,'multiline':False]['text':' Advance the clock.','line_number':2561,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':2564,'multiline':False]['text':' Advance the clock.','line_number':2582,'multiline':False]['text':' Advance the clock.','line_number':2598,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':2601,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2617,'multiline':False]['text':' The transaction's duration should have increased.','line_number':2622,'multiline':False]['text':' Commit the transaction and check duration.','line_number':2629,'multiline':False]['text':' The transaction committed, so the duration shouldn't have increased even if more time passed.','line_number':2635,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2649,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':2652,'multiline':False]['text':' The prepared transaction's duration should have increased.','line_number':2656,'multiline':False]['text':' Commit the prepared transaction and check the prepared duration.','line_number':2663,'multiline':False]['text':' The prepared transaction committed, so the prepared duration shouldn't have increased even if','line_number':2669,'multiline':False]['text':' more time passed.','line_number':2670,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2683,'multiline':False]['text':' The transaction's duration should have increased.','line_number':2688,'multiline':False]['text':' Abort the transaction and check duration.','line_number':2695,'multiline':False]['text':' The transaction aborted, so the duration shouldn't have increased even if more time passed.','line_number':2701,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2715,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':2718,'multiline':False]['text':' The prepared transaction's duration should have increased.','line_number':2722,'multiline':False]['text':' Abort the prepared transaction and check the prepared duration.','line_number':2729,'multiline':False]['text':' The prepared transaction aborted, so the prepared duration shouldn't have increased even if','line_number':2735,'multiline':False]['text':' more time passed.','line_number':2736,'multiline':False]['text':' Time active should be zero.','line_number':2749,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2756,'multiline':False]['text':' Advance clock during inactive period.','line_number':2760,'multiline':False]['text':' Time active should have increased only during active period.','line_number':2763,'multiline':False]['text':' Advance clock during inactive period.','line_number':2772,'multiline':False]['text':' Time active should have increased again.','line_number':2775,'multiline':False]['text':' Start a new transaction.','line_number':2780,'multiline':False]['text':' autocommit ','line_number':2783,'multiline':True]['text':' startTransaction ','line_number':2783,'multiline':True]['text':' Time active should be zero for a new transaction.','line_number':2785,'multiline':False]['text':' Time active should be zero.','line_number':2797,'multiline':False]['text':' Time active should have increased.','line_number':2806,'multiline':False]['text':' The transaction is not active after abort, so time active should not have increased.','line_number':2813,'multiline':False]['text':' Time active should be zero.','line_number':2825,'multiline':False]['text':' Advance clock during inactive period.','line_number':2830,'multiline':False]['text':' Time active should still be zero.','line_number':2835,'multiline':False]['text':' Time active should be zero.','line_number':2847,'multiline':False]['text':' Time active should have increased.','line_number':2854,'multiline':False]['text':' Time active should have increased again.','line_number':2861,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2866,'multiline':False]['text':' The transaction is no longer active, so time active should have stopped increasing.','line_number':2872,'multiline':False]['text':' Time active should be zero.','line_number':2884,'multiline':False]['text':' Time active should have increased.','line_number':2892,'multiline':False]['text':' Time active should have increased again.','line_number':2899,'multiline':False]['text':' The transaction is no longer active, so time active should have stopped increasing.','line_number':2908,'multiline':False]['text':' Initialize field values for both AdditiveMetrics objects.','line_number':2918,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2944,'multiline':False]['text':' Initialize field values for both AdditiveMetrics objects.','line_number':2956,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':2986,'multiline':False]['text':' Initialize field values for both AdditiveMetrics objects.','line_number':2998,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':3024,'multiline':False]['text':' Time inactive should have increased.','line_number':3038,'multiline':False]['text':' Time inactive should have increased again.','line_number':3044,'multiline':False]['text':' The transaction is currently active, so time inactive should not have increased.','line_number':3054,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':3059,'multiline':False]['text':' The transaction is inactive again, so time inactive should have increased.','line_number':3065,'multiline':False]['text':' Time inactive should be greater than or equal to zero.','line_number':3077,'multiline':False]['text':' Time inactive should have increased.','line_number':3084,'multiline':False]['text':' The transaction has aborted, so time inactive should not have increased.','line_number':3098,'multiline':False]['text':' Time inactive should be greater than or equal to zero.','line_number':3110,'multiline':False]['text':' Time inactive should have increased.','line_number':3117,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':3123,'multiline':False]['text':' The transaction has committed, so time inactive should not have increased.','line_number':3129,'multiline':False]['text':' Create a ClientMetadata object and set it.','line_number':3147,'multiline':False]['text':' Perform initial unstash which sets up a WriteUnitOfWork.','line_number':3169,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':3175,'multiline':False]['text':' Stash resources. The original Locker and RecoveryUnit now belong to the stash.','line_number':3180,'multiline':False]['text':' Verify that the Session's report of its own stashed state aligns with our expectations.','line_number':3184,'multiline':False]['text':' For the following time metrics, we are only verifying that the transaction sub-document is','line_number':3214,'multiline':False]['text':' being constructed correctly with proper types because we have other tests to verify that the','line_number':3215,'multiline':False]['text':' values are being tracked correctly.','line_number':3216,'multiline':False]['text':' Unset the read concern on the OperationContext. This is needed to unstash.','line_number':3221,'multiline':False]['text':' Unstash the stashed resources. This restores the original Locker and RecoveryUnit to the','line_number':3224,'multiline':False]['text':' OperationContext.','line_number':3225,'multiline':False]['text':' With the resources unstashed, verify that the Session reports an empty stashed state.','line_number':3229,'multiline':False]['text':' Commit the transaction. This allows us to release locks.','line_number':3232,'multiline':False]['text':' Perform initial unstash which sets up a WriteUnitOfWork.','line_number':3255,'multiline':False]['text':' Prepare transaction and extend duration in the prepared state.','line_number':3261,'multiline':False]['text':' Verify that the Session's report of its own unstashed state aligns with our expectations.','line_number':3266,'multiline':False]['text':' For the following time metrics, we are only verifying that the transaction sub-document is','line_number':3287,'multiline':False]['text':' being constructed correctly with proper types because we have other tests to verify that','line_number':3288,'multiline':False]['text':' the values are being tracked correctly.','line_number':3289,'multiline':False]['text':' Stash resources. The original Locker and RecoveryUnit now belong to the stash.','line_number':3294,'multiline':False]['text':' With the resources stashed, verify that the Session reports an empty unstashed state.','line_number':3298,'multiline':False]['text':' autocommit ','line_number':3320,'multiline':True]['text':' startTransaction ','line_number':3321,'multiline':True]['text':' Build a BSONObj containing the details which we expect to see reported when we invoke','line_number':3324,'multiline':False]['text':' reportUnstashedState. For a retryable write, we should only include the txnNumber.','line_number':3325,'multiline':False]['text':' Verify that the Session's report of its own unstashed state aligns with our expectations.','line_number':3333,'multiline':False]['text':' autocommit ','line_number':3354,'multiline':True]['text':' startTransaction ','line_number':3355,'multiline':True]['text':' 'getAPIParameters()' should return the API parameters decorating opCtx if we are in a','line_number':3361,'multiline':False]['text':' retryable write.','line_number':3362,'multiline':False]['text':' Stash secondAPIParameters.','line_number':3368,'multiline':False]['text':' 'getAPIParameters()' should still return API parameters, even if there are stashed API','line_number':3375,'multiline':False]['text':' parameters in TxnResources.','line_number':3376,'multiline':False]['text':'
 * Constructs a ClientMetadata BSONObj with the given application name.
 ','line_number':3385,'multiline':True]['text':' namespace','line_number':3400,'multiline':False]['text':' Create a ClientMetadata object and set it.','line_number':3403,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':3411,'multiline':False]['text':' LastClientInfo should have been set.','line_number':3415,'multiline':False]['text':' Create another ClientMetadata object.','line_number':3422,'multiline':False]['text':' LastClientInfo's clientMetadata should have been updated to the new ClientMetadata object.','line_number':3430,'multiline':False]['text':' Create a ClientMetadata object and set it.','line_number':3437,'multiline':False]['text':' The transaction machinery cannot store an empty locker.','line_number':3445,'multiline':False]['text':' LastClientInfo should have been set.','line_number':3449,'multiline':False]['text':' Create a ClientMetadata object and set it.','line_number':3458,'multiline':False]['text':' LastClientInfo should have been set.','line_number':3468,'multiline':False]['text':'
 * Sets up the additive metrics for Transactions Metrics test.
 ','line_number':3476,'multiline':True]['text':'
 * Builds expected parameters info string.
 ','line_number':3492,'multiline':True]['text':'
 * Builds expected single transaction stats info string.
 ','line_number':3517,'multiline':True]['text':'
 * Builds the time active and time inactive info string.
 ','line_number':3528,'multiline':True]['text':' Add time active micros to string.','line_number':3535,'multiline':False]['text':' Add time inactive micros to string.','line_number':3541,'multiline':False]['text':'
 * Builds the total prepared duration info string.
 ','line_number':3548,'multiline':True]['text':'
 * Builds the entire expected transaction info string and returns it.
 ','line_number':3561,'multiline':True]['text':' Calling transactionInfoForLog to get the actual transaction info string.','line_number':3573,'multiline':False]['text':' Building expected transaction info string.','line_number':3576,'multiline':False]['text':' autocommit must be false for a multi statement transaction, so','line_number':3578,'multiline':False]['text':' getTransactionInfoForLogForTest should theoretically always print false. In certain unit','line_number':3579,'multiline':False]['text':' tests, we compare its output to the output generated in this function.','line_number':3580,'multiline':False]['text':'','line_number':3581,'multiline':False]['text':' Since we clear the state of a transaction on abort, if getTransactionInfoForLogForTest is','line_number':3582,'multiline':False]['text':' called after a transaction is already aborted, it will encounter boost::none for the','line_number':3583,'multiline':False]['text':' autocommit value. In that case, it will print out true.','line_number':3584,'multiline':False]['text':'','line_number':3585,'multiline':False]['text':' In cases where we call getTransactionInfoForLogForTest after aborting a transaction','line_number':3586,'multiline':False]['text':' and check if the output matches this function's output, we must explicitly set autocommitVal','line_number':3587,'multiline':False]['text':' to true.','line_number':3588,'multiline':False]['text':' Puts all the substrings together into one expected info string. The expected info string will','line_number':3614,'multiline':False]['text':' look something like this:','line_number':3615,'multiline':False]['text':' parameters:{ lsid: { id: UUID("f825288c-100e-49a1-9fd7-b95c108049e6"), uid: BinData(0,','line_number':3616,'multiline':False]['text':' E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855) }, txnNumber: 1,','line_number':3617,'multiline':False]['text':' autocommit: false }, readTimestamp:Timestamp(0, 0), keysExamined:1 docsExamined:1 nMatched:1','line_number':3618,'multiline':False]['text':' nModified:1 ninserted:1 ndeleted:1 keysInserted:1 keysDeleted:1','line_number':3619,'multiline':False]['text':' prepareReadConflicts:1 writeConflicts:1 terminationCause:committed timeActiveMicros:3','line_number':3620,'multiline':False]['text':' timeInactiveMicros:2 numYields:0 locks:{ Global: { acquireCount: { r: 6, w: 4 } }, Database:','line_number':3621,'multiline':False]['text':' { acquireCount: { r: 1, w: 1, W: 2 } }, Collection: { acquireCount: { R: 1 } }, oplog: {','line_number':3622,'multiline':False]['text':' acquireCount: { W: 1 } } } wasPrepared:1 totalPreparedDurationMicros:10','line_number':3623,'multiline':False]['text':' prepareOpTime:<OpTime> 0ms','line_number':3624,'multiline':False]['text':'
 * Builds expected parameters info BSON.
 ','line_number':3656,'multiline':True]['text':'
 * Builds expected single transaction stats info string.
 ','line_number':3675,'multiline':True]['text':'
 * Builds the time active and time inactive info BSON.
 ','line_number':3691,'multiline':True]['text':' Add time active micros to string.','line_number':3698,'multiline':False]['text':' Add time inactive micros to string.','line_number':3704,'multiline':False]['text':'
 * Builds the total prepared duration info BSON.
 ','line_number':3711,'multiline':True]['text':'
 * Builds the entire expected transaction info BSON and returns it.
 *
 * Must be kept in sync with TransactionParticipant::Participant::_transactionInfoForLog.
 ','line_number':3724,'multiline':True]['text':' Calling transactionInfoForLog to get the actual transaction info string.','line_number':3738,'multiline':False]['text':' Building expected transaction info string.','line_number':3741,'multiline':False]['text':' autocommit must be false for a multi statement transaction, so','line_number':3743,'multiline':False]['text':' getTransactionInfoForLogForTest should theoretically always print false. In certain unit','line_number':3744,'multiline':False]['text':' tests, we compare its output to the output generated in this function.','line_number':3745,'multiline':False]['text':'','line_number':3746,'multiline':False]['text':' Since we clear the state of a transaction on abort, if getTransactionInfoForLogForTest is','line_number':3747,'multiline':False]['text':' called after a transaction is already aborted, it will encounter boost::none for the','line_number':3748,'multiline':False]['text':' autocommit value. In that case, it will print out true.','line_number':3749,'multiline':False]['text':'','line_number':3750,'multiline':False]['text':' In cases where we call getTransactionInfoForLogForTest after aborting a transaction','line_number':3751,'multiline':False]['text':' and check if the output matches this function's output, we must explicitly set autocommitVal','line_number':3752,'multiline':False]['text':' to true.','line_number':3753,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':3802,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':3848,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':3869,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':3896,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':3943,'multiline':False]['text':' Prepare the transaction and extend the duration in the prepared state.','line_number':3963,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':4040,'multiline':False]['text':' serverGlobalParams may have been modified prior to this test, so we set them back to','line_number':4056,'multiline':False]['text':' their default values.','line_number':4057,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':4097,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4107,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':4145,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4157,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':4204,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4217,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':4266,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4278,'multiline':False]['text':' Initialize SingleTransactionStats AdditiveMetrics objects.','line_number':4330,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4349,'multiline':False]['text':' Set the sample rate to 0 to never log this transaction.','line_number':4373,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4379,'multiline':False]['text':' Test that the transaction is not logged.','line_number':4391,'multiline':False]['text':' Set a high slow operation threshold to avoid the transaction being logged as slow.','line_number':4403,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4407,'multiline':False]['text':' Set verbosity level of transaction components to info.','line_number':4413,'multiline':False]['text':' Test that the transaction is not logged.','line_number':4423,'multiline':False]['text':' Set verbosity level of transaction components to debug.','line_number':4432,'multiline':False]['text':' Set a high slow operation threshold to avoid the transaction being logged as slow.','line_number':4441,'multiline':False]['text':' Reset the global parameters to their original values after this test exits.','line_number':4445,'multiline':False]['text':' Test that the transaction is still logged.','line_number':4455,'multiline':False]['text':' Perform an insert as a part of a transaction so that we have a transaction operation.','line_number':4472,'multiline':False]['text':' Make sure the state of txnParticipant is populated correctly after a prepared transaction.','line_number':4484,'multiline':False]['text':' After calling abortTransaction and invalidate, the state of txnParticipant should be','line_number':4496,'multiline':False]['text':' invalidated.','line_number':4497,'multiline':False]['text':' If _prepareOptime was not set and was null, then commitPreparedTransaction would falsely','line_number':4519,'multiline':False]['text':' succeed everytime. We set the commitTimestamp to be less than the prepareTimestamp to make','line_number':4520,'multiline':False]['text':' sure this is not the case.','line_number':4521,'multiline':False]['text':' Simulate committing a prepared transaction on a secondary.','line_number':4534,'multiline':False]['text':' Simulate committing a prepared transaction on a secondary.','line_number':4559,'multiline':False]['text':' This test is intended to mimic the behavior in applyAbortTransaction from','line_number':4596,'multiline':False]['text':' transaction_oplog_application.cpp. This is to ensure that when secondaries see an abort oplog','line_number':4597,'multiline':False]['text':' entry for a non-existent transaction, the state of the transaction is set to aborted.','line_number':4598,'multiline':False]['text':' Simulate aborting a transaction on a secondary.','line_number':4600,'multiline':False]['text':' MongoDOperationContextSessionWithoutRefresh will begin a new transaction with txnNumber','line_number':4606,'multiline':False]['text':' unconditionally since the participant's _activeTxnNumber is kUninitializedTxnNumber at time','line_number':4607,'multiline':False]['text':' of session checkout.','line_number':4608,'multiline':False]['text':' Start a retryable write.','line_number':4634,'multiline':False]['text':' autocommit ','line_number':4637,'multiline':True]['text':' startTransaction ','line_number':4638,'multiline':True]['text':' Start a transaction.','line_number':4648,'multiline':False]['text':' autocommit ','line_number':4650,'multiline':True]['text':' startTransaction ','line_number':4650,'multiline':True]['text':' Start a transaction.','line_number':4664,'multiline':False]['text':' autocommit ','line_number':4666,'multiline':True]['text':' startTransaction ','line_number':4666,'multiline':True]['text':' Simulate an insert.','line_number':4672,'multiline':False]['text':' Start a transaction.','line_number':4685,'multiline':False]['text':' autocommit ','line_number':4687,'multiline':True]['text':' startTransaction ','line_number':4687,'multiline':True]['text':' Add a newer transaction, then an older one, to test that order doesn't matter.','line_number':4747,'multiline':False]['text':' Block getOldestActiveTimestamp() by locking the config database.','line_number':4758,'multiline':False]['text':' autocommit ','line_number':4774,'multiline':True]['text':' startTransaction ','line_number':4774,'multiline':True]['text':' Once the promise has been fulfilled, new callers of onExitPrepare should immediately be','line_number':4788,'multiline':False]['text':' ready.','line_number':4789,'multiline':False]['text':' abortTransaction is retryable, but does not cause the completion promise to be set again.','line_number':4792,'multiline':False]['text':' autocommit ','line_number':4802,'multiline':True]['text':' startTransaction ','line_number':4802,'multiline':True]['text':' Once the promise has been fulfilled, new callers of onExitPrepare should immediately be','line_number':4819,'multiline':False]['text':' ready.','line_number':4820,'multiline':False]['text':' autocommit ','line_number':4830,'multiline':True]['text':' startTransaction ','line_number':4831,'multiline':True]['text':' autocommit ','line_number':4840,'multiline':True]['text':' startTransaction ','line_number':4841,'multiline':True]['text':' autocommit ','line_number':4850,'multiline':True]['text':' startTransaction ','line_number':4851,'multiline':True]['text':' autocommit ','line_number':4864,'multiline':True]['text':' startTransaction ','line_number':4865,'multiline':True]['text':' autocommit ','line_number':4876,'multiline':True]['text':' startTransaction ','line_number':4877,'multiline':True]['text':' autocommit ','line_number':4891,'multiline':True]['text':' startTransaction ','line_number':4892,'multiline':True]['text':' txnRetryCounter ','line_number':4902,'multiline':True]['text':' autocommit ','line_number':4909,'multiline':True]['text':' startTransaction ','line_number':4910,'multiline':True]['text':' autocommit ','line_number':4928,'multiline':True]['text':' startTransaction ','line_number':4929,'multiline':True]['text':' autocommit ','line_number':4946,'multiline':True]['text':' startTransaction ','line_number':4947,'multiline':True]['text':' autocommit ','line_number':4968,'multiline':True]['text':' startTransaction ','line_number':4969,'multiline':True]['text':' autocommit ','line_number':4988,'multiline':True]['text':' startTransaction ','line_number':4989,'multiline':True]['text':' autocommit ','line_number':5003,'multiline':True]['text':' startTransaction ','line_number':5004,'multiline':True]['text':' autocommit ','line_number':5008,'multiline':True]['text':' startTransaction ','line_number':5009,'multiline':True]['text':' autocommit ','line_number':5015,'multiline':True]['text':' startTransaction ','line_number':5016,'multiline':True]['text':' autocommit ','line_number':5036,'multiline':True]['text':' startTransaction ','line_number':5037,'multiline':True]['text':' autocommit ','line_number':5052,'multiline':True]['text':' startTransaction ','line_number':5053,'multiline':True]['text':' autocommit ','line_number':5067,'multiline':True]['text':' startTransaction ','line_number':5068,'multiline':True]['text':' autocommit ','line_number':5075,'multiline':True]['text':' startTransaction ','line_number':5076,'multiline':True]['text':' autocommit ','line_number':5082,'multiline':True]['text':' startTransaction ','line_number':5083,'multiline':True]['text':' autocommit ','line_number':5102,'multiline':True]['text':' startTransaction ','line_number':5103,'multiline':True]['text':' The first conflicting transaction should abort the active one.','line_number':5122,'multiline':False]['text':' autocommit ','line_number':5134,'multiline':True]['text':' startTransaction ','line_number':5134,'multiline':True]['text':' Continuing the interrupted transaction should throw without aborting the new active','line_number':5140,'multiline':False]['text':' transaction.','line_number':5141,'multiline':False]['text':' startNewTxn ','line_number':5143,'multiline':True]['text':' A second conflicting transaction should throw and not abort the active one.','line_number':5148,'multiline':False]['text':' autocommit ','line_number':5159,'multiline':True]['text':' startTransaction ','line_number':5159,'multiline':True]['text':' Verify the first conflicting txn is still open.','line_number':5164,'multiline':False]['text':' autocommit ','line_number':5174,'multiline':True]['text':' startTransaction ','line_number':5174,'multiline':True]['text':'','line_number':5192,'multiline':False]['text':' The first conflicting retryable write should abort a conflicting retryable transaction.','line_number':5193,'multiline':False]['text':'','line_number':5194,'multiline':False]['text':' Shouldn't throw.','line_number':5199,'multiline':False]['text':' autocommit ','line_number':5205,'multiline':True]['text':' startTransaction ','line_number':5206,'multiline':True]['text':' Continuing the interrupted transaction should throw because it was aborted. Note this does','line_number':5209,'multiline':False]['text':' not throw RetryableTransactionInProgress because the retryable write that aborted the','line_number':5210,'multiline':False]['text':' transaction completed.','line_number':5211,'multiline':False]['text':' startNewTxn ','line_number':5213,'multiline':True]['text':'','line_number':5220,'multiline':False]['text':' The second conflicting retryable write should throw and not abort a conflicting retryable','line_number':5221,'multiline':False]['text':' transaction.','line_number':5222,'multiline':False]['text':'','line_number':5223,'multiline':False]['text':' autocommit ','line_number':5241,'multiline':True]['text':' startTransaction ','line_number':5242,'multiline':True]['text':' startNewTxn ','line_number':5248,'multiline':True]['text':' autocommit ','line_number':5251,'multiline':True]['text':' startTransaction ','line_number':5251,'multiline':True]['text':' The first conflicting transaction should abort the active one.','line_number':5269,'multiline':False]['text':' autocommit ','line_number':5281,'multiline':True]['text':' startTransaction ','line_number':5281,'multiline':True]['text':' A second conflicting transaction should throw and not abort the active one.','line_number':5287,'multiline':False]['text':' autocommit ','line_number':5298,'multiline':True]['text':' startTransaction ','line_number':5298,'multiline':True]['text':' Advance the txnNumber and verify the first new conflicting transaction does not throw','line_number':5303,'multiline':False]['text':' RetryableTransactionInProgress.','line_number':5304,'multiline':False]['text':' autocommit ','line_number':5318,'multiline':True]['text':' startTransaction ','line_number':5318,'multiline':True]['text':' autocommit ','line_number':5333,'multiline':True]['text':' startTransaction ','line_number':5333,'multiline':True]['text':' A second conflicting transaction should still throw and not abort the active one.','line_number':5337,'multiline':False]['text':' autocommit ','line_number':5349,'multiline':True]['text':' startTransaction ','line_number':5349,'multiline':True]['text':' Advance the txnNumber and verify the first new conflicting transaction does not throw','line_number':5367,'multiline':False]['text':' RetryableTransactionInProgress.','line_number':5368,'multiline':False]['text':' autocommit ','line_number':5383,'multiline':True]['text':' startTransaction ','line_number':5383,'multiline':True]['text':' Advance the txnNumber and verify the first new conflicting transaction does not throw','line_number':5400,'multiline':False]['text':' RetryableTransactionInProgress.','line_number':5401,'multiline':False]['text':' autocommit ','line_number':5414,'multiline':True]['text':' startTransaction ','line_number':5415,'multiline':True]['text':' Advance the txnNumber and verify the first new conflicting transaction does not throw','line_number':5431,'multiline':False]['text':' RetryableTransactionInProgress.','line_number':5432,'multiline':False]['text':' autocommit ','line_number':5446,'multiline':True]['text':' startTransaction ','line_number':5447,'multiline':True]['text':' Start a prepared child transaction.','line_number':5456,'multiline':False]['text':' Advance the txnNumber and verify the first new conflicting transaction and retryable write','line_number':5468,'multiline':False]['text':' throws RetryableTransactionInProgress.','line_number':5469,'multiline':False]['text':' autocommit ','line_number':5484,'multiline':True]['text':' startTransaction ','line_number':5484,'multiline':True]['text':' autocommit ','line_number':5498,'multiline':True]['text':' startTransaction ','line_number':5499,'multiline':True]['text':' After the transaction leaves prepare a conflicting internal transaction can still abort an','line_number':5504,'multiline':False]['text':' active transaction.','line_number':5505,'multiline':False]['text':' startNewTxn ','line_number':5508,'multiline':True]['text':' autocommit ','line_number':5511,'multiline':True]['text':' startTransaction ','line_number':5511,'multiline':True]['text':' autocommit ','line_number':5525,'multiline':True]['text':' startTransaction ','line_number':5525,'multiline':True]['text':' autocommit ','line_number':5540,'multiline':True]['text':' startTransaction ','line_number':5540,'multiline':True]['text':' autocommit ','line_number':5558,'multiline':True]['text':' startTransaction ','line_number':5559,'multiline':True]['text':' autocommit ','line_number':5591,'multiline':True]['text':' startTransaction ','line_number':5591,'multiline':True]['text':' autocommit ','line_number':5624,'multiline':True]['text':' startTransaction ','line_number':5625,'multiline':True]['text':' autocommit ','line_number':5644,'multiline':True]['text':' startTransaction ','line_number':5645,'multiline':True]['text':' autocommit ','line_number':5662,'multiline':True]['text':' startTransaction ','line_number':5663,'multiline':True]['text':' Insert.','line_number':5796,'multiline':False]['text':' Update that does not modify "parentLsid".','line_number':5803,'multiline':False]['text':' Updates that try to modify "parentLsid".','line_number':5810,'multiline':False]['text':' Insert.','line_number':5851,'multiline':False]['text':' Update that does not set/modify "parentLsid".','line_number':5858,'multiline':False]['text':' Update that tries to set "parentLsid".','line_number':5865,'multiline':False]['text':' We swap in a new opCtx in order to set a new active txnRetryCounter for this test.','line_number':5878,'multiline':False]['text':' autocommit ','line_number':5895,'multiline':True]['text':' startTransaction ','line_number':5896,'multiline':True]['text':' We need to unstash and stash transaction resources so that we can continue the transaction in','line_number':5898,'multiline':False]['text':' the following statements.','line_number':5899,'multiline':False]['text':' autocommit ','line_number':5905,'multiline':True]['text':' startTransaction ','line_number':5906,'multiline':True]['text':' autocommit ','line_number':5923,'multiline':True]['text':' startTransaction ','line_number':5923,'multiline':True]['text':' autocommit ','line_number':5939,'multiline':True]['text':' startTransaction ','line_number':5940,'multiline':True]['text':' autocommit ','line_number':5966,'multiline':True]['text':' startTransaction ','line_number':5967,'multiline':True]['text':' autocommit ','line_number':5983,'multiline':True]['text':' startTransaction ','line_number':5984,'multiline':True]['text':' autocommit ','line_number':6010,'multiline':True]['text':' startTransaction ','line_number':6010,'multiline':True]['text':' Invalidate the TransactionParticipant allow the txnNumber to be reused.','line_number':6011,'multiline':False]['text':' autocommit ','line_number':6028,'multiline':True]['text':' startTransaction ','line_number':6029,'multiline':True]['text':' autocommit ','line_number':6056,'multiline':True]['text':' startTransaction ','line_number':6057,'multiline':True]['text':' Invalidate the TransactionParticipant allow the txnNumber to be reused.','line_number':6058,'multiline':False]['text':' autocommit ','line_number':6075,'multiline':True]['text':' startTransaction ','line_number':6076,'multiline':True]['text':'*
 * RAII type for operating at a timestamp. Will remove any timestamping when the object destructs.
 ','line_number':6088,'multiline':True]['text':' This test simulates:','line_number':6114,'multiline':False]['text':' 1) Preparing a transaction with multiple logical sessions as a secondary.','line_number':6115,'multiline':False]['text':' 2) Aborting the prepared transaction as a primary.','line_number':6116,'multiline':False]['text':'','line_number':6117,'multiline':False]['text':' This test asserts that:','line_number':6118,'multiline':False]['text':' A) The prepares done by both sessions are done with the same timestamp.','line_number':6119,'multiline':False]['text':' B) Aborting the transaction results in the split transaction participants being in the','line_number':6120,'multiline':False]['text':'    aborted state.','line_number':6121,'multiline':False]['text':' C) The split session entries in the `config.transactions` table are not left in the prepared','line_number':6122,'multiline':False]['text':'    state. It is legal for the documents to not exist and it's legal for them to be aborted.','line_number':6123,'multiline':False]['text':'','line_number':6124,'multiline':False]['text':' First we set up infrastructure such that we can simulate oplog application.','line_number':6125,'multiline':False]['text':' Initiate the term from 0 to 1 for familiarity.','line_number':6136,'multiline':False]['text':' Bump the logical clock for easier visual cues.','line_number':6139,'multiline':False]['text':' Assign the variables that represent the "real", client-facing logical session.','line_number':6144,'multiline':False]['text':' TxnResources start in the "stashed" state.','line_number':6148,'multiline':False]['text':' Hold the collection lock/datastructure such that it can be released prior to rollback.','line_number':6151,'multiline':False]['text':' We split our user session into 2 split sessions.','line_number':6155,'multiline':False]['text':' Insert an `_id: 1` document.','line_number':6161,'multiline':False]['text':' Insert an `_id: 2` document.','line_number':6171,'multiline':False]['text':' Mimic the methods to call for a secondary performing a split prepare. Those are called inside','line_number':6181,'multiline':False]['text':' `UnreplicatedWritesBlock` and explicitly pass in the prepare OpTime.','line_number':6182,'multiline':False]['text':' Normally this would also be called on a secondary under a `UnreplicatedWritesBlock`. However','line_number':6194,'multiline':False]['text':' we must change the `config.transactions` state for this logical session. In production, that','line_number':6195,'multiline':False]['text':' transaction table write would come via a synthetic oplog entry.','line_number':6196,'multiline':False]['text':' Assert for each split session that they are:','line_number':6199,'multiline':False]['text':' 1) Prepared at the expected prepare timestamp.','line_number':6200,'multiline':False]['text':' 2) Have an active recovery unit.','line_number':6201,'multiline':False]['text':' 3) The recovery unit has the expected prepare timestamp.','line_number':6202,'multiline':False]['text':' Aborting a transaction destroys the split session objects. Store the LSIDs for a post-abort','line_number':6215,'multiline':False]['text':' transaction table lookup.','line_number':6216,'multiline':False]['text':' The `findOne` helpers invariant by default if no result is found.','line_number':6221,'multiline':False]['text':' To claim we rolled back all of the split prepared recovery units, we check that:','line_number':6224,'multiline':False]['text':' 1) A read cannot see the document. If it can, the split transaction was committed.','line_number':6225,'multiline':False]['text':' 2) A write does not generate a write conflict. If it does, the split transaction was left','line_number':6226,'multiline':False]['text':'    open.','line_number':6227,'multiline':False]['text':' Assert that the TxnParticipant for the split sessions are in the "aborted prepared','line_number':6247,'multiline':False]['text':' transaction" state.','line_number':6248,'multiline':False]['text':' Assert that the user config.transaction document is in the aborted state.','line_number':6269,'multiline':False]['text':' Rather than testing the implementation, we'll assert on the weakest necessary state. A split','line_number':6273,'multiline':False]['text':' `config.transactions` document may or may not exist. If it exists, it must not* be in the','line_number':6274,'multiline':False]['text':' "prepared" state.','line_number':6275,'multiline':False]['text':' This test simulates:','line_number':6289,'multiline':False]['text':' 1) Preparing a transaction with multiple logical sessions as a secondary.','line_number':6290,'multiline':False]['text':' 2) Committing the transaction as a primary.','line_number':6291,'multiline':False]['text':' 3) Rolling back the commit.','line_number':6292,'multiline':False]['text':'','line_number':6293,'multiline':False]['text':' This test asserts that:','line_number':6294,'multiline':False]['text':' A) The writes done by both sessions are committed with the same "visible" timestamp.','line_number':6295,'multiline':False]['text':' B) The writes done by both sessions rollback, due to having a "durable" timestamp that's','line_number':6296,'multiline':False]['text':'    ahead of the stable timestamp.','line_number':6297,'multiline':False]['text':' C) The `config.transactions` table is not aware that the split sessions were part of a','line_number':6298,'multiline':False]['text':'    prepared transaction. One example of why this invariant is important is because','line_number':6299,'multiline':False]['text':'    reconstructing prepared transactions finds all `config.transactions` entries in the','line_number':6300,'multiline':False]['text':'    prepared state. We must ensure any prepared transaction is only reconstructed once.','line_number':6301,'multiline':False]['text':'','line_number':6302,'multiline':False]['text':' First we set up infrastructure such that we can simulate oplog application, primary behaviors','line_number':6303,'multiline':False]['text':' and `rollbackToStable`.','line_number':6304,'multiline':False]['text':' Initiate the term from 0 to 1 for familiarity.','line_number':6315,'multiline':False]['text':' Bump the logical clock for easier visual cues.','line_number':6318,'multiline':False]['text':' Assign the variables that represent the "real", client-facing logical session.','line_number':6324,'multiline':False]['text':' TxnResources start in the "stashed" state.','line_number':6328,'multiline':False]['text':' Hold the collection lock/data structure such that it can be released prior to rollback.','line_number':6331,'multiline':False]['text':' We split our user session into 2 split sessions.','line_number':6335,'multiline':False]['text':' Insert an `_id: 1` document.','line_number':6341,'multiline':False]['text':' Insert an `_id: 2` document.','line_number':6351,'multiline':False]['text':' Update `2` to increment its `value` to 2. This must be done in the same split session as the','line_number':6361,'multiline':False]['text':' insert.','line_number':6362,'multiline':False]['text':' Mimic the methods to call for a secondary performing a split prepare. Those are called inside','line_number':6371,'multiline':False]['text':' `UnreplicatedWritesBlock` and explicitly pass in the prepare OpTime.','line_number':6372,'multiline':False]['text':' Normally this would also be called on a secondary under a `UnreplicatedWritesBlock`. However','line_number':6384,'multiline':False]['text':' we must change the `config.transactions` state for this logical session. In production, that','line_number':6385,'multiline':False]['text':' transaction table write would come via a synthetic oplog entry.','line_number':6386,'multiline':False]['text':' Prepared transactions are dictated a commit/visible from the transaction coordinator. However','line_number':6389,'multiline':False]['text':' the commit function will assign a "durable" timestamp derived from the system clock. This is','line_number':6390,'multiline':False]['text':' the code path of a primary.','line_number':6391,'multiline':False]['text':' Committing a transaction as a primary does not allow direct control on the oplog/durable','line_number':6394,'multiline':False]['text':' timestamp being allocated. We want to observe that we correctly set a durable timestamp when','line_number':6395,'multiline':False]['text':' a primary commits a split prepare. Ultimately we'll observe that by seeing the transaction','line_number':6396,'multiline':False]['text':' rollback on a call to `rollbackToStable`. We can coerce the durable timestamp by bumping the','line_number':6397,'multiline':False]['text':' logical clock. Worth noting, the test is reading from the system clock which is expected to','line_number':6398,'multiline':False]['text':' choose a value for the transaction's durable timestamp that is much much larger than','line_number':6399,'multiline':False]['text':' `chosenStableTimestamp`. We only bump the clock here in the very unexpected case that the','line_number':6400,'multiline':False]['text':' system clock is within few hundred seconds of the epoch.','line_number':6401,'multiline':False]['text':' Committing a transaction destroys the split session objects. Store the LSIDs for a post-abort','line_number':6405,'multiline':False]['text':' transaction table lookup.','line_number':6406,'multiline':False]['text':' The `findOne` helpers will invariant by default if no result is found.','line_number':6412,'multiline':False]['text':' Print out reads at the interesting times prior to asserting for diagnostics.','line_number':6414,'multiline':False]['text':' Reading at the prepare timestamp should not see anything.','line_number':6426,'multiline':False]['text':' Reading at the visible/commit timestamp should see the inserted and updated documents.','line_number':6441,'multiline':False]['text':' We also assert that the user transaction record is in the committed state.','line_number':6455,'multiline':False]['text':' The user config.transactions document must exist and must be in the "committed" state.','line_number':6458,'multiline':False]['text':' Rather than testing the implementation, we'll assert on the weakest necessary state. A','line_number':6467,'multiline':False]['text':' split `config.transactions` document may or may not exist. If it exists, it must be','line_number':6468,'multiline':False]['text':' in the "committed" state.','line_number':6469,'multiline':False]['text':' Unlock the collection and check in the session to release locks.','line_number':6482,'multiline':False]['text':' Rollback such that the commit oplog entry and the effects of the transaction are rolled','line_number':6486,'multiline':False]['text':' back. Unset some of the multi-doc transaction state because it's illegal to request the','line_number':6487,'multiline':False]['text':' global lock in strong mode when the operation context has been part of a multi-doc','line_number':6488,'multiline':False]['text':' transaction.','line_number':6489,'multiline':False]['text':' Again, display read values for diagnostics.','line_number':6501,'multiline':False]['text':' Now when we read at the commit/visible timestamp, the documents must not exist.','line_number':6514,'multiline':False]['text':' We also assert that the user transaction record is in the prepared state. The split sessions','line_number':6527,'multiline':False]['text':' are not.','line_number':6528,'multiline':False]['text':' The user `config.transactions` document must be in the "prepared" state.','line_number':6531,'multiline':False]['text':' Rather than testing the implementation, we'll assert on the weakest necessary state. A split','line_number':6540,'multiline':False]['text':' `config.transactions` document may or may not exist. If it exists, it must not* be in the','line_number':6541,'multiline':False]['text':' "prepared" state.','line_number':6542,'multiline':False]['text':' Add a parent session with one retryable child.','line_number':6565,'multiline':False]['text':' Start a higher txnNumber client transaction and verify the child was erased.','line_number':6579,'multiline':False]['text':' Add a parent session with one retryable child.','line_number':6593,'multiline':False]['text':' Start a higher txnNumber retryable write and verify the child was erased.','line_number':6607,'multiline':False]['text':' Add a parent session with one retryable child.','line_number':6621,'multiline':False]['text':' Start a higher txnNumber retryable transaction and verify the child was erased.','line_number':6635,'multiline':False]['text':' Add a parent session with two retryable children and one non-retryable child.','line_number':6654,'multiline':False]['text':' Add entries for unrelated sessions to verify they aren't affected.','line_number':6671,'multiline':False]['text':' Check out with a higher txnNumber and verify we don't reap until a transaction has begun on','line_number':6693,'multiline':False]['text':' it.','line_number':6694,'multiline':False]['text':' Does not call beginOrContinue.','line_number':6700,'multiline':False]['text':' Does not call beginOrContinue.','line_number':6706,'multiline':False]['text':' beginOrContinue fails because no startTransaction=true.','line_number':6715,'multiline':False]['text':' Non-retryable child sessions shouldn't affect retryable sessions.','line_number':6728,'multiline':False]['text':' No sessions should have been reaped.','line_number':6732,'multiline':False]['text':' Call beginOrContinue for a higher txnNumber and verify we do erase old sessions for the','line_number':6742,'multiline':False]['text':' active session.','line_number':6743,'multiline':False]['text':' The two retryable children for parentLsid should have been reaped.','line_number':6747,'multiline':False]['text':' Add a parent session with two retryable children.','line_number':6762,'multiline':False]['text':' Start a higher txnNumber retryable transaction and verify the child was erased.','line_number':6792,'multiline':False]['text':' Add a parent session with one retryable child.','line_number':6808,'multiline':False]['text':' Check out a higher txnNumber retryable transaction but do not start it and verify it does not','line_number':6822,'multiline':False]['text':' reap and is not reaped.','line_number':6823,'multiline':False]['text':' Still less than in higherUnusedRetryableChildLsid.','line_number':6840,'multiline':False]['text':' Add a parent session with two retryable children.','line_number':6853,'multiline':False]['text':' Kill one retryable child and verify no sessions in its SRI can be reaped until it has been','line_number':6872,'multiline':False]['text':' checked out by its killer.','line_number':6873,'multiline':False]['text':' Kill after checking out the session because we can't check out the session again','line_number':6886,'multiline':False]['text':' after a kill without checking out with the killToken first.','line_number':6887,'multiline':False]['text':' Check out for kill the killed retryable session and now both retryable sessions can be','line_number':6896,'multiline':False]['text':' reaped.','line_number':6897,'multiline':False]['text':' A new client txnNumber must be seen to trigger the reaping, so the sessions shouldn't have','line_number':6902,'multiline':False]['text':' been reaped upon releasing the killed session.','line_number':6903,'multiline':False]['text':' Add a parent session with one retryable child.','line_number':6922,'multiline':False]['text':' Start a higher txnNumber client transaction and verify the child was erased.','line_number':6936,'multiline':False]['text':' Check out the child again to verify this doesn't crash.','line_number':6945,'multiline':False]['text':' autocommit ','line_number':6983,'multiline':True]['text':' startTransaction ','line_number':6984,'multiline':True]['text':' Add a parent session with two retryable children.','line_number':6993,'multiline':False]['text':' Use one retryable session with a TransactionParticipant and verify this blocks the router','line_number':7012,'multiline':False]['text':' role from reaping it.','line_number':7013,'multiline':False]['text':' Start a higher txnNumber client transaction in the router role and verify the child used with','line_number':7017,'multiline':False]['text':' TransactionParticipant was not erased but the other one was.','line_number':7018,'multiline':False]['text':' Verify the participant role can reap the child.','line_number':7028,'multiline':False]['text':' Sanity check that higher txnNumbers are reaped correctly and eager reaping only applies to','line_number':7040,'multiline':False]['text':' parent and children sessions in the same "family."','line_number':7041,'multiline':False]['text':' The unrelated sessions still exist and the superseded child was reaped.','line_number':7060,'multiline':False]['text':' namespace','line_number':7069,'multiline':False]['text':' namespace mongo','line_number':7070,'multiline':False]