['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace','line_number':115,'multiline':False]['text':' Callers should always provide a yielder when using the API with a session checked out,','line_number':138,'multiline':False]['text':' otherwise commands run by the API won't be able to check out that session.','line_number':139,'multiline':False]['text':' Pre transaction processing, which must happen inline because it uses the caller's opCtx.','line_number':145,'multiline':False]['text':' Post transaction processing, which must also happen inline.','line_number':161,'multiline':False]['text':' Schedule cleanup on an out of line executor so it runs even if the transaction was','line_number':167,'multiline':False]['text':' cancelled. Attempt to wait for cleanup so it appears synchronous for most callers, but','line_number':168,'multiline':False]['text':' allow interruptions so we return immediately if the opCtx has been cancelled.','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':' Also schedule after getting the transaction's operation time so the best effort abort','line_number':171,'multiline':False]['text':' can't unnecessarily advance it.','line_number':172,'multiline':False]['text':' The caller was interrupted during the transaction, so if the transaction failed,','line_number':189,'multiline':False]['text':' return the caller's interruption code instead. The transaction uses a','line_number':190,'multiline':False]['text':' CancelableOperationContext inherited from the caller's opCtx, but that type can only','line_number':191,'multiline':False]['text':' kill with an Interrupted error, so this is meant as a workaround to preserve the','line_number':192,'multiline':False]['text':' presumably more meaningful error the caller was interrupted with.','line_number':193,'multiline':False]['text':' DynamicAttributes doesn't allow rvalues, so make some local variables.','line_number':318,'multiline':False]['text':' Commit retries should be handled within _runCommitWithRetries().','line_number':351,'multiline':False]['text':' Safe to inline because the continuation only holds state.','line_number':358,'multiline':False]['text':' Commit succeeded so return to the caller.','line_number':396,'multiline':False]['text':' Sets the appropriate options on the given client and operation context for running internal','line_number':451,'multiline':False]['text':' commands.','line_number':452,'multiline':False]['text':' Note that _token is only cancelled once the caller of the transaction no longer cares about','line_number':476,'multiline':False]['text':' its result, so CancelableOperationContexts only being interrupted by ErrorCodes::Interrupted','line_number':477,'multiline':False]['text':' shouldn't impact any upstream retry logic.','line_number':478,'multiline':False]['text':' NOTE: The API uses this method to run commit and abort, so be careful about adding','line_number':491,'multiline':False]['text':' new logic here to ensure it cannot interfere with error handling for either command.','line_number':492,'multiline':False]['text':' Use tap and tapError instead of tapAll since tapAll is not move-only type friendly','line_number':578,'multiline':False]['text':' BulkWrite can only execute on admin DB.','line_number':590,'multiline':False]['text':' TODO (SERVER-80794): Support iterating through the cursor for internal transactions.','line_number':599,'multiline':False]['text':' Use tap and tapError instead of tapAll since tapAll is not move-only type friendly','line_number':627,'multiline':False]['text':' If we've fetched all the documents, we can return the response vector','line_number':654,'multiline':False]['text':' wrapped in an OK status.','line_number':655,'multiline':False]['text':' We keep the state of cursorResponse to be able to check the','line_number':669,'multiline':False]['text':' cursorId in the next iteration.','line_number':670,'multiline':False]['text':' We stop execution if there is either no more documents to fetch or there was','line_number':679,'multiline':False]['text':' an error upon fetching more documents.','line_number':680,'multiline':False]['text':' It's fine to use an uncancelable token here because the getMore commands in the','line_number':683,'multiline':False]['text':' AsyncTry will inherit the real token.','line_number':684,'multiline':False]['text':' Allows retrying commit.','line_number':749,'multiline':False]['text':' Allows best effort abort to clean up after giving up.','line_number':751,'multiline':False]['text':' Only transition if we aren't already retrying commit.','line_number':757,'multiline':False]['text':' Don't commit if we're nested in a client's transaction.','line_number':762,'multiline':False]['text':' Per the drivers transaction spec, retrying commitTransaction uses majority write','line_number':775,'multiline':False]['text':' concern to avoid double applying a transaction due to a transient NoSuchTransaction','line_number':776,'multiline':False]['text':' error response.','line_number':777,'multiline':False]['text':' Safe to inline because the continuation only holds state.','line_number':789,'multiline':False]['text':' Safe to inline because the continuation only holds state.','line_number':799,'multiline':False]['text':' Allow overriding the number of retries so unit tests can exhaust them faster.','line_number':806,'multiline':False]['text':' If the local node is shutting down all retries would fail and if the node has failed over,','line_number':812,'multiline':False]['text':' retries could eventually succeed on the new primary, but we want to prevent that since','line_number':813,'multiline':False]['text':' whatever command that ran the internal transaction will fail with this error and may be','line_number':814,'multiline':False]['text':' retried itself.','line_number':815,'multiline':False]['text':' True if the transaction is running entirely against the local node, e.g. a single replica set','line_number':827,'multiline':False]['text':' transaction on a mongod. False for remote transactions from a mongod or all transactions from a','line_number':828,'multiline':False]['text':' mongos.','line_number':829,'multiline':False]['text':' Errors aborting are always ignored.','line_number':838,'multiline':False]['text':' If we're nested in another transaction, let the outer most client decide on errors.','line_number':851,'multiline':False]['text':' If we're running locally, some errors mean we should not retry, like a failover or shutdown.','line_number':855,'multiline':False]['text':' If the op has a deadline, retry until it is reached regardless of the number of attempts.','line_number':860,'multiline':False]['text':' The transient transaction error label is always returned in command responses, even for','line_number':866,'multiline':False]['text':' internal clients, so we use it to decide when to retry the transaction instead of inspecting','line_number':867,'multiline':False]['text':' error codes. The only exception is when a network error was received before commit, handled','line_number':868,'multiline':False]['text':' below.','line_number':869,'multiline':False]['text':' A network error before commit is a transient transaction error, so we can retry the','line_number':877,'multiline':False]['text':' entire transaction. If there is a network error after a commit is sent, we can retry','line_number':878,'multiline':False]['text':' the commit command to either recommit if the operation failed or get the result of','line_number':879,'multiline':False]['text':' the successful commit.','line_number':880,'multiline':False]['text':' The retryable write error label is not returned to internal clients, so we cannot rely on','line_number':894,'multiline':False]['text':' it and instead use error categories to decide when to retry commit, which is treated as a','line_number':895,'multiline':False]['text':' retryable write, per the drivers specification.','line_number':896,'multiline':False]['text':' Safe to inline because the continuation only holds state.','line_number':916,'multiline':False]['text':' Statement ids are meaningful in a transaction spawned on behalf of a retryable write, so','line_number':924,'multiline':False]['text':' every write in the transaction should explicitly specify an id. Either a positive number,','line_number':925,'multiline':False]['text':' which indicates retry history should be saved for the command, or kUninitializedStmtId','line_number':926,'multiline':False]['text':' (aka -1), which indicates retry history should not be saved. If statement ids are not','line_number':927,'multiline':False]['text':' explicitly sent, implicit ids may be inferred, which could lead to bugs if different','line_number':928,'multiline':False]['text':' commands have the same ids inferred.','line_number':929,'multiline':False]['text':' Append the new recalculated maxTimeMS','line_number':953,'multiline':False]['text':' If the transaction API caller had API parameters, we should forward them in all requests.','line_number':963,'multiline':False]['text':' Advance txnNumber.','line_number':995,'multiline':False]['text':' The outermost client handles retries, so we should never reach here.','line_number':1001,'multiline':False]['text':' Only cleanup if we've sent at least one command.','line_number':1015,'multiline':False]['text':' Use an uncancelable token when cleaning up so we can still do so after the transaction','line_number':1027,'multiline':False]['text':' was cancelled. Note callers will never wait for an operation using this token.','line_number':1028,'multiline':False]['text':' The API does not forward shard or database versions from the caller's opCtx, so spawned','line_number':1063,'multiline':False]['text':' commands would not obey sharding protocols, like the migration critical section, so it','line_number':1064,'multiline':False]['text':' cannot currently be used in an operation with shard versions. This does not apply in the','line_number':1065,'multiline':False]['text':' cluster commands configuration because those commands will attach appropriate shard','line_number':1066,'multiline':False]['text':' versions.','line_number':1067,'multiline':False]['text':' Extract session options and infer execution context from client's opCtx.','line_number':1076,'multiline':False]['text':' startTransaction ','line_number':1088,'multiline':True]['text':' startTransaction ','line_number':1097,'multiline':True]['text':' txnNumber ','line_number':1102,'multiline':True]['text':' startTransaction ','line_number':1103,'multiline':True]['text':' Note that we don't want to include startTransaction or any first transaction command','line_number':1106,'multiline':False]['text':' fields because we assume that if we're in a client transaction the component tracking','line_number':1107,'multiline':False]['text':' transactions on the process must have already been started (e.g. TransactionRouter or','line_number':1108,'multiline':False]['text':' TransactionParticipant), so when the API sends commands for this transacion that','line_number':1109,'multiline':False]['text':' component will attach the correct fields if targeting new participants. This assumes this','line_number':1110,'multiline':False]['text':' case always uses a client that runs commands against the local process service entry','line_number':1111,'multiline':False]['text':' point, which we verify with this invariant.','line_number':1112,'multiline':False]['text':' startTransaction ','line_number':1121,'multiline':True]['text':' Skip directly to the started state since we assume the client already started this','line_number':1124,'multiline':False]['text':' transaction.','line_number':1125,'multiline':False]['text':' Extract non-session options. Strip provenance so it can be correctly inferred for the','line_number':1130,'multiline':False]['text':' generated commands as if it came from an external client.','line_number':1131,'multiline':False]['text':' namespace details','line_number':1165,'multiline':False]['text':' namespace txn_api','line_number':1166,'multiline':False]['text':' namespace mongo','line_number':1167,'multiline':False]