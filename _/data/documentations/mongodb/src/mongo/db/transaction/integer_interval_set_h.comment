['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This is a data structure for keeping track of sets of integers.  Specifically, it is
 * intended to handle efficient addition and membership testing of large "almost contiguous"
 * sets of integers.  An ordinary set or a bitmap gets unwieldy doing that and the performance
 * drops quickly with mere hundreds of points.
 *
 * The way it works is it's a red/black tree (like std::set) holding closed integer intervals
 * rather than points.  The key is the high end of the range (this is convenient because of
 * the way lower_bound works).  When we add a point we search for a lower_bound in the tree;
 * the range we get back will contain the point if it is already in the tree.  Otherwise we
 * add the point by extending the current range at the low end, extending the previous range
 * at the high end, coalescing the two ranges, or adding a new single-value range.
 *
 * This is similar to the way boost::interval_set works with discrete closed intervals, but
 * boost::interval_set is much more flexible and much less performant (it is worse than
 * using std::sets with individual points).
 *
 * This data structure could be made more general e.g. by creating operations to just test for
 * membership, by allowing custom allocators, allowing inserting, erasing, and/or testing for ranges
 * rather than just points, etc.  If you do that please move it to a more general part of the
 * codebase (e.g. mongo/util).
 *
 ','line_number':30,'multiline':True]['text':'*
     * Copy constructor.
     ','line_number':69,'multiline':True]['text':'*
     * Copy assignment operator.
     ','line_number':76,'multiline':True]['text':'*
     * Destructor. Note that destroying a boost:intrusive::set does not free its elements,
     * so the default destructor is not sufficient.
     ','line_number':87,'multiline':True]['text':'*
     * Returns true if the interval set is empty.
     ','line_number':95,'multiline':True]['text':'*
     * Returns the number of intervals in the set.
     ','line_number':102,'multiline':True]['text':'*
     * Resets the interval set to empty.
     ','line_number':109,'multiline':True]['text':'*
     * Returns an iterator to the first interval.
     * Note since all iterators are const, there's no separate overload for const vs non-const.
     ','line_number':116,'multiline':True]['text':'*
     * Returns a past-the-end iterator.
     ','line_number':124,'multiline':True]['text':'*
     * Insert a single integer into the set.
     *
     * Like the STL containers, returns an iterator indicating where the element is, and
     * a boolean indicating whether it was inserted (true) or already there (false).
     ','line_number':131,'multiline':True]['text':' loc points to smallest element with 'interval.second' >= value. If the value is in the','line_number':139,'multiline':False]['text':' set, it will be in this interval.','line_number':140,'multiline':False]['text':' The value is in this interval.','line_number':142,'multiline':False]['text':' loc == end or (loc->second >= loc->first > value).','line_number':145,'multiline':False]['text':' loc == begin or prev(loc)->first <= prev(loc)->second < value (by definition of','line_number':146,'multiline':False]['text':' lower bound).','line_number':147,'multiline':False]['text':' So there are four alternatives if loc and prev(loc) both exist.','line_number':148,'multiline':False]['text':' value == loc->first - 1 == prev(loc)->second + 1 <-- coalesce prev(loc) with loc.','line_number':149,'multiline':False]['text':' value == loc->first - 1 > prev(loc)->second + 1 <- extend loc','line_number':150,'multiline':False]['text':' value == prev(loc)->second + 1 < loc->first - 1 <- extend prev(loc)','line_number':151,'multiline':False]['text':' value > prev(loc)->second + 1 && value < loc->first - 1 <-- new item.','line_number':152,'multiline':False]['text':' Set bit 0 of selector to 1 if value should be part of 'loc'.','line_number':154,'multiline':False]['text':' Set bit 1 of selector to 1 if value should be part of 'prev'','line_number':156,'multiline':False]['text':' At the end of this switch, 'loc' must be an iterator pointing to the range containing','line_number':158,'multiline':False]['text':' 'value'.','line_number':159,'multiline':False]['text':' value does not merge with an existing interval.','line_number':162,'multiline':False]['text':' value merges with 'loc', but not 'prev'','line_number':166,'multiline':False]['text':' value merges with 'prev', but not 'loc'','line_number':170,'multiline':False]['text':' Note this changes the node's key.  But it is safe because it does not change','line_number':171,'multiline':False]['text':' the relative ordering of the key with respect to other keys.  Allowing','line_number':172,'multiline':False]['text':' in-place changing of keys is why boost::intrusive is used.','line_number':173,'multiline':False]['text':' prev and loc merge.','line_number':178,'multiline':False]['text':'*
     * Remove the value from the interval set, splitting as necessary.
     * Returns the number of values removed (always 0 or 1), to match the STL erase interface.
     ','line_number':188,'multiline':True]['text':' loc points to smallest element with 'interval.second' >= value. If the value is in the','line_number':194,'multiline':False]['text':' set, it will be in this interval.','line_number':195,'multiline':False]['text':' The value is not in the set.','line_number':197,'multiline':False]['text':' Bit 0 of selector indicates whether we're erasing from the start of the range.','line_number':200,'multiline':False]['text':' Bit 1 of selector indicates whether we're erasing from the end of the range.','line_number':202,'multiline':False]['text':' Splitting the range. Add the new range, then shorten the existing range.','line_number':206,'multiline':False]['text':' (It is valid to do it in this order because boost::intrusive iterators','line_number':207,'multiline':False]['text':' aren't invalidated by inserts)','line_number':208,'multiline':False]['text':' Erasing from the start of the range.','line_number':213,'multiline':False]['text':' Erasing from the end of the range.','line_number':217,'multiline':False]['text':' Erasing a single-element range','line_number':221,'multiline':False]['text':' The value was in the set and has been erased.','line_number':227,'multiline':False]['text':' The set_base_hook<> is boost::intrusive::set boilerplate which provides the red-black tree','line_number':232,'multiline':False]['text':' color and node pointers, and some methods to manipulate them (used internally by boost).','line_number':233,'multiline':False]['text':' {first, second} corresponds to [low, high]','line_number':240,'multiline':False]['text':' This class is used to tell boost::intrusive::set to treat the second element of the interval','line_number':243,'multiline':False]['text':' as the key to the set's map-like interface.','line_number':244,'multiline':False]['text':' This typedef is boilerplate for boost::intrusive::set which tells boost the type of the','line_number':246,'multiline':False]['text':' key.','line_number':247,'multiline':False]['text':' This typedef defines a boost::intrusive::set with nodes of the type NodeType and providing a','line_number':255,'multiline':False]['text':' map-like interface with a key defined by the type HighIsKey.','line_number':256,'multiline':False]['text':' Creates a new node containing the range given.  This is here to keep the memory','line_number':260,'multiline':False]['text':' allocation and freeing all in one place.','line_number':261,'multiline':False]['text':' Makes a copy of NodeType objects; used to implement the copy constructor/operator','line_number':266,'multiline':False]['text':' using boost::intrusive clone_from.','line_number':267,'multiline':False]['text':' Disposes of NodeType objects, used as the Disposer argument to erase_and_dispose,','line_number':272,'multiline':False]['text':' clear_and_dispose, and clone_from.','line_number':273,'multiline':False]['text':'*
     * The STL-style iterator for this map.
     * Users may not change intervals through the iterator, since doing so could violate
     * set ordering invariants, the invariant that (first <= last), and the invariant that
     * the intervals are in a "minimal representation" -- no intervals overlap, even at a point.
     ','line_number':281,'multiline':True]['text':' This is the prefix operator++ (i.e. "++iter")','line_number':300,'multiline':False]['text':' This is the postfix operator++ (i.e. "iter++")','line_number':306,'multiline':False]['text':' This is the prefix operator-- (i.e. "--iter")','line_number':313,'multiline':False]['text':' This is the postfix operator-- (i.e. "--iter")','line_number':319,'multiline':False]['text':' namespace mongo','line_number':337,'multiline':False]