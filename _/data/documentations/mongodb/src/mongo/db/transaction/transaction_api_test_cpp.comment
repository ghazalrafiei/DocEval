['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':30,'multiline':False]['text':' IWYU pragma: keep','line_number':48,'multiline':False]['text':' Only hang abort commands.','line_number':199,'multiline':False]['text':' Tests that expect to hang an abort must use the barrier to synchronize since the','line_number':204,'multiline':False]['text':' abort runs on a different thread.','line_number':205,'multiline':False]['text':' Some tests reuse responses so return the last returned response when empty.','line_number':219,'multiline':False]['text':' Wake up any waiting threads.','line_number':299,'multiline':False]['text':' namespace txn_api::details','line_number':320,'multiline':False]['text':' TODO SERVER-64017: Make these consistent with the unified terms for internal sessions.','line_number':330,'multiline':False]['text':' Assumes all fields are set in the given APIParameters.','line_number':365,'multiline':False]['text':' If we didn't expect an explicit read concern, the startTransaction request should still','line_number':403,'multiline':False]['text':' send the implicit default read concern.','line_number':404,'multiline':False]['text':' Use a thread pool with one max thread to verify the API can run truly asynchronously on','line_number':430,'multiline':False]['text':' its executor.','line_number':431,'multiline':False]['text':' resourceYielder ','line_number':454,'multiline':True]['text':' The bulk of the API tests are for the non-local transaction cases, so set router role by','line_number':458,'multiline':False]['text':' default.','line_number':459,'multiline':False]['text':' Guarantee any tasks spawned by the API have finished and the thread pool threads are','line_number':508,'multiline':False]['text':' synchronized with the main test thread so any shared pointers held by them will be reset,','line_number':509,'multiline':False]['text':' which should guarantee sessions are pooled deterministically.','line_number':510,'multiline':False]['text':' Reset _txnWithRetries so it returns and reacquires the same session from the session','line_number':513,'multiline':False]['text':' pool. This ensures that we can predictably monitor txnNumber's value.','line_number':514,'multiline':False]['text':' startTransaction ','line_number':535,'multiline':True]['text':' readConcern ','line_number':536,'multiline':True]['text':' Verify the mocked response was returned.','line_number':620,'multiline':False]['text':' txnNumber ','line_number':622,'multiline':True]['text':' startTransaction ','line_number':622,'multiline':True]['text':' Verify the mocked response was returned.','line_number':634,'multiline':False]['text':' txnNumber ','line_number':636,'multiline':True]['text':' startTransaction ','line_number':637,'multiline':True]['text':' The commit response.','line_number':641,'multiline':False]['text':' txnNumber ','line_number':650,'multiline':True]['text':' startTransaction ','line_number':651,'multiline':True]['text':' readConcern ','line_number':652,'multiline':True]['text':' writeConcern ','line_number':653,'multiline':True]['text':' Verify the mocked response was returned.','line_number':680,'multiline':False]['text':' txnNumber ','line_number':682,'multiline':True]['text':' startTransaction ','line_number':683,'multiline':True]['text':' Verify the mocked response was returned.','line_number':695,'multiline':False]['text':' txnNumber ','line_number':697,'multiline':True]['text':' startTransaction ','line_number':698,'multiline':True]['text':' Throw a transient error to verify we attach API params on retries as well.','line_number':702,'multiline':False]['text':' The commit response.','line_number':705,'multiline':False]['text':' txnNumber ','line_number':714,'multiline':True]['text':' startTransaction ','line_number':715,'multiline':True]['text':' readConcern ','line_number':716,'multiline':True]['text':' writeConcern ','line_number':717,'multiline':True]['text':' resetTxnWithRetries() function releases and reacquires the txn, so lastTxnNumber is','line_number':736,'multiline':False]['text':' incremented.','line_number':737,'multiline':False]['text':' No write concern on requests prior to commit/abort.','line_number':745,'multiline':False]['text':' Verify the mocked response was returned.','line_number':754,'multiline':False]['text':' Each attempt releases and reacquires the session from the session pool,','line_number':756,'multiline':False]['text':' incrementing the txnNumber.','line_number':757,'multiline':False]['text':' txnNumber ','line_number':759,'multiline':True]['text':' startTransaction ','line_number':760,'multiline':True]['text':' Verify the mocked response was returned.','line_number':773,'multiline':False]['text':' Each attempt returns and reacquires the session from the session pool,','line_number':775,'multiline':False]['text':' incrementing the txnNumber.','line_number':776,'multiline':False]['text':' txnNumber ','line_number':778,'multiline':True]['text':' startTransaction ','line_number':779,'multiline':True]['text':' Throw a transient error to verify the retries behavior.','line_number':783,'multiline':False]['text':' The commit response.','line_number':786,'multiline':False]['text':' Each attempt returns and reacquires the session from the session pool, incrementing the','line_number':795,'multiline':False]['text':' txnNumber.','line_number':796,'multiline':False]['text':' txnNumber ','line_number':798,'multiline':True]['text':' startTransaction ','line_number':799,'multiline':True]['text':' readConcern ','line_number':800,'multiline':True]['text':' resetTxnWithRetries() function releases and reacquires the txn, so lastTxnNumber is','line_number':821,'multiline':False]['text':' incremented.','line_number':822,'multiline':False]['text':' Verify the mocked response was returned.','line_number':836,'multiline':False]['text':' Best effort abort response.','line_number':839,'multiline':False]['text':' Wait for the final best effort abort to complete.','line_number':846,'multiline':False]['text':' txnNumber ','line_number':847,'multiline':True]['text':' resetTxnWithRetries() function releases and reacquires the txn, so lastTxnNumber is','line_number':862,'multiline':False]['text':' incremented.','line_number':863,'multiline':False]['text':' Verify the mocked response was returned.','line_number':879,'multiline':False]['text':' Each attempt returns and reacquires the session from the session pool,','line_number':881,'multiline':False]['text':' incrementing the txnNumber.','line_number':882,'multiline':False]['text':' txnNumber ','line_number':884,'multiline':True]['text':' startTransaction ','line_number':885,'multiline':True]['text':' Subsequent requests shouldn't have a read concern.','line_number':890,'multiline':False]['text':' Verify the mocked response was returned.','line_number':899,'multiline':False]['text':' Each attempt returns and reacquires the session from the session pool,','line_number':901,'multiline':False]['text':' incrementing the txnNumber.','line_number':902,'multiline':False]['text':' txnNumber ','line_number':904,'multiline':True]['text':' startTransaction ','line_number':905,'multiline':True]['text':' Throw a transient error to verify the retry will still use the read concern.','line_number':909,'multiline':False]['text':' The commit response.','line_number':912,'multiline':False]['text':' Each attempt returns and reacquires the session from the session pool, incrementing the','line_number':921,'multiline':False]['text':' txnNumber.','line_number':922,'multiline':False]['text':' txnNumber ','line_number':924,'multiline':True]['text':' startTransaction ','line_number':925,'multiline':True]['text':' readConcern ','line_number':926,'multiline':True]['text':' writeConcern ','line_number':927,'multiline':True]['text':' Verify the mocked response was returned.','line_number':945,'multiline':False]['text':' The best effort abort response, the client should ignore this.','line_number':947,'multiline':False]['text':' Wait for the final best effort abort to complete.','line_number':955,'multiline':False]['text':' txnNumber ','line_number':956,'multiline':True]['text':' The abort response, the client should not receive this.','line_number':962,'multiline':False]['text':' Would wait for the best effort abort if it was scheduled.','line_number':970,'multiline':False]['text':' The commit response, the client should not receive this.','line_number':979,'multiline':False]['text':' Would wait for the best effort abort if it was scheduled.','line_number':987,'multiline':False]['text':' Verify an abort was sent in between retries.','line_number':999,'multiline':False]['text':' txnNumber ','line_number':1000,'multiline':True]['text':' The commit or implicit abort response.','line_number':1013,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1022,'multiline':False]['text':' txnNumber ','line_number':1024,'multiline':True]['text':' startTransaction ','line_number':1025,'multiline':True]['text':' txnNumber ','line_number':1040,'multiline':True]['text':' startTransaction ','line_number':1041,'multiline':True]['text':' readConcern ','line_number':1042,'multiline':True]['text':' writeConcern ','line_number':1043,'multiline':True]['text':' Verify an abort was sent in between retries.','line_number':1053,'multiline':False]['text':' txnNumber ','line_number':1054,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1067,'multiline':False]['text':' txnNumber ','line_number':1069,'multiline':True]['text':' startTransaction ','line_number':1070,'multiline':True]['text':' The commit or implicit abort response.','line_number':1073,'multiline':False]['text':' txnNumber ','line_number':1089,'multiline':True]['text':' startTransaction ','line_number':1090,'multiline':True]['text':' readConcern ','line_number':1091,'multiline':True]['text':' writeConcern ','line_number':1092,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1110,'multiline':False]['text':' txnNumber ','line_number':1112,'multiline':True]['text':' startTransaction ','line_number':1112,'multiline':True]['text':' The commit response.','line_number':1115,'multiline':False]['text':' txnNumber ','line_number':1133,'multiline':True]['text':' startTransaction ','line_number':1134,'multiline':True]['text':' readConcern ','line_number':1135,'multiline':True]['text':' writeConcern ','line_number':1136,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1153,'multiline':False]['text':' txnNumber ','line_number':1155,'multiline':True]['text':' startTransaction ','line_number':1155,'multiline':True]['text':' The commit response.','line_number':1158,'multiline':False]['text':' txnNumber ','line_number':1176,'multiline':True]['text':' startTransaction ','line_number':1177,'multiline':True]['text':' readConcern ','line_number':1178,'multiline':True]['text':' writeConcern ','line_number':1179,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1198,'multiline':False]['text':' txnNumber ','line_number':1200,'multiline':True]['text':' startTransaction ','line_number':1201,'multiline':True]['text':' Set commit response. Initial commit response is kNoSuchTransaction so the transaction','line_number':1204,'multiline':False]['text':' retries.','line_number':1205,'multiline':False]['text':' txnNumber ','line_number':1223,'multiline':True]['text':' startTransaction ','line_number':1224,'multiline':True]['text':' readConcern ','line_number':1225,'multiline':True]['text':' writeConcern ','line_number':1226,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1244,'multiline':False]['text':' txnNumber ','line_number':1246,'multiline':True]['text':' startTransaction ','line_number':1246,'multiline':True]['text':' The commit response.','line_number':1249,'multiline':False]['text':' txnNumber ','line_number':1266,'multiline':True]['text':' startTransaction ','line_number':1267,'multiline':True]['text':' readConcern ','line_number':1268,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1285,'multiline':False]['text':' txnNumber ','line_number':1287,'multiline':True]['text':' startTransaction ','line_number':1287,'multiline':True]['text':' The commit response.','line_number':1290,'multiline':False]['text':' Best effort abort response.','line_number':1293,'multiline':False]['text':' txnNumber ','line_number':1308,'multiline':True]['text':' startTransaction ','line_number':1309,'multiline':True]['text':' readConcern ','line_number':1310,'multiline':True]['text':' writeConcern ','line_number':1311,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1328,'multiline':False]['text':' txnNumber ','line_number':1330,'multiline':True]['text':' startTransaction ','line_number':1330,'multiline':True]['text':' The commit responses.','line_number':1333,'multiline':False]['text':' txnNumber ','line_number':1348,'multiline':True]['text':' startTransaction ','line_number':1349,'multiline':True]['text':' readConcern ','line_number':1350,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1369,'multiline':False]['text':' txnNumber ','line_number':1371,'multiline':True]['text':' startTransaction ','line_number':1371,'multiline':True]['text':' The commit responses.','line_number':1374,'multiline':False]['text':' txnNumber ','line_number':1390,'multiline':True]['text':' startTransaction ','line_number':1391,'multiline':True]['text':' readConcern ','line_number':1392,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1413,'multiline':False]['text':' txnNumber ','line_number':1415,'multiline':True]['text':' startTransaction ','line_number':1416,'multiline':True]['text':' Set commit response. Initial commit response is a transient txn error so the','line_number':1419,'multiline':False]['text':' transaction retries.','line_number':1420,'multiline':False]['text':' txnNumber ','line_number':1439,'multiline':True]['text':' startTransaction ','line_number':1440,'multiline':True]['text':' readConcern ','line_number':1441,'multiline':True]['text':' writeConcern ','line_number':1442,'multiline':True]['text':' The commit response.','line_number':1480,'multiline':False]['text':' Best effort abort response.','line_number':1484,'multiline':False]['text':' The commit response.','line_number':1506,'multiline':False]['text':' Best effort abort response.','line_number':1509,'multiline':False]['text':' Yield before starting and corresponding unyield.','line_number':1532,'multiline':False]['text':' Yield before starting but no unyield because yield failed.','line_number':1553,'multiline':False]['text':' Yield before starting and corresponding unyield.','line_number':1574,'multiline':False]['text':' The transaction should fail with the error the transaction failed with instead of the','line_number':1600,'multiline':False]['text':' ResourceYielder error.','line_number':1601,'multiline':False]['text':' Yield before starting and corresponding unyield.','line_number':1603,'multiline':False]['text':' Hang commit so we know the transaction obeys the cancellation, otherwise the test would hang.','line_number':1618,'multiline':False]['text':' The transaction should fail with the error the caller was interrupted with.','line_number':1638,'multiline':False]['text':' Fail the transaction to verify the caller interruption error is returned instead.','line_number':1668,'multiline':False]['text':' The transaction should fail with the error the caller was interrupted with.','line_number':1674,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1698,'multiline':False]['text':' txnNumber ','line_number':1700,'multiline':True]['text':' startTransaction ','line_number':1701,'multiline':True]['text':' Trigger transient error retry to verify the same session is used by the retry.','line_number':1708,'multiline':False]['text':' Commit response.','line_number':1712,'multiline':False]['text':' txnNumber ','line_number':1721,'multiline':True]['text':' startTransaction ','line_number':1722,'multiline':True]['text':' readConcern ','line_number':1723,'multiline':True]['text':' writeConcern ','line_number':1724,'multiline':True]['text':' Retryable transactions must include stmtIds for','line_number':1750,'multiline':False]['text':' retryable write commands.','line_number':1751,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1754,'multiline':False]['text':' txnNumber ','line_number':1756,'multiline':True]['text':' startTransaction ','line_number':1757,'multiline':True]['text':' Verify a non-retryable write command does not need to include stmtIds.','line_number':1763,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1771,'multiline':False]['text':' Verify the alternate format for stmtIds is allowed.','line_number':1773,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1782,'multiline':False]['text':' Trigger transient error retry to verify the same session is used by the retry.','line_number':1786,'multiline':False]['text':' Commit response.','line_number':1790,'multiline':False]['text':' txnNumber ','line_number':1799,'multiline':True]['text':' startTransaction ','line_number':1800,'multiline':True]['text':' readConcern ','line_number':1801,'multiline':True]['text':' writeConcern ','line_number':1802,'multiline':True]['text':' Verify the mocked response was returned.','line_number':1851,'multiline':False]['text':' startTransaction ','line_number':1854,'multiline':True]['text':' No commit should have been sent.','line_number':1863,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1892,'multiline':False]['text':' startTransaction ','line_number':1895,'multiline':True]['text':' readConcern ','line_number':1896,'multiline':True]['text':' writeConcern ','line_number':1897,'multiline':True]['text':' No commit should have been sent.','line_number':1906,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1927,'multiline':False]['text':' startTransaction ','line_number':1930,'multiline':True]['text':' Trigger mock error retry to verify the API does not best effort abort.','line_number':1934,'multiline':False]['text':' The error should have been propagated.','line_number':1939,'multiline':False]['text':' No best effort abort should have been sent.','line_number':1942,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1963,'multiline':False]['text':' startTransaction ','line_number':1966,'multiline':True]['text':' Trigger transient error retry to verify the API does not retry.','line_number':1970,'multiline':False]['text':' The transient error should have been propagated.','line_number':1975,'multiline':False]['text':' No best effort abort should have been sent.','line_number':1978,'multiline':False]['text':' Verify the mocked response was returned.','line_number':1995,'multiline':False]['text':' txnNumber ','line_number':1997,'multiline':True]['text':' startTransaction ','line_number':1997,'multiline':True]['text':' The commit response.','line_number':2000,'multiline':False]['text':' txnNumber ','line_number':2012,'multiline':True]['text':' startTransaction ','line_number':2013,'multiline':True]['text':' readConcern ','line_number':2014,'multiline':True]['text':'','line_number':2026,'multiline':False]['text':' Mock command responses.','line_number':2027,'multiline':False]['text':'','line_number':2028,'multiline':False]['text':' Insert response.','line_number':2030,'multiline':False]['text':' The commit responses. First three attempts fail transiently and the fourth succeeds.','line_number':2032,'multiline':False]['text':' Verify the mocked response was returned.','line_number':2048,'multiline':False]['text':'','line_number':2055,'multiline':False]['text':' Verify the commit requests used the correct write concerns.','line_number':2056,'multiline':False]['text':'','line_number':2057,'multiline':False]['text':' Skip i = 0, which is the intial attempt's insert.','line_number':2062,'multiline':False]['text':' txnNumber ','line_number':2065,'multiline':True]['text':' startTransaction ','line_number':2066,'multiline':True]['text':' readConcern ','line_number':2067,'multiline':True]['text':' First commit attempt uses the client's WC, retries use majority.','line_number':2068,'multiline':False]['text':'','line_number':2082,'multiline':False]['text':' Mock command responses.','line_number':2083,'multiline':False]['text':'','line_number':2084,'multiline':False]['text':' First attempt.','line_number':2086,'multiline':False]['text':' The commit responses. First attempt fails transiently and the second should trigger a','line_number':2088,'multiline':False]['text':' transient transaction retry.','line_number':2089,'multiline':False]['text':' Second attempt after transient transaction error.','line_number':2093,'multiline':False]['text':' Verify the mocked response was returned.','line_number':2107,'multiline':False]['text':'','line_number':2114,'multiline':False]['text':' Verify the commit requests used the correct write concerns.','line_number':2115,'multiline':False]['text':'','line_number':2116,'multiline':False]['text':' Skip i = 0, which is the intial attempt's insert.','line_number':2121,'multiline':False]['text':' txnNumber ','line_number':2124,'multiline':True]['text':' startTransaction ','line_number':2125,'multiline':True]['text':' readConcern ','line_number':2126,'multiline':True]['text':' First commit attempt uses the client's WC, retry uses majority.','line_number':2127,'multiline':False]['text':' Skip i = 3, which is the second attempt's insert.','line_number':2133,'multiline':False]['text':' txnNumber ','line_number':2136,'multiline':True]['text':' startTransaction ','line_number':2137,'multiline':True]['text':' readConcern ','line_number':2138,'multiline':True]['text':' First commit attempt uses the client's WC, retry uses majority.','line_number':2139,'multiline':False]['text':' Check that we only ran the find command and no follow up getMores.','line_number':2176,'multiline':False]['text':' Check that getMore was run.','line_number':2209,'multiline':False]['text':' Check that we only ran the find command and no follow up getMores.','line_number':2234,'multiline':False]['text':' Check that getMore was run.','line_number':2261,'multiline':False]['text':' Command response used for insert below and eventually abortTransaction.','line_number':2276,'multiline':False]['text':' The transient error should have been propagated.','line_number':2288,'multiline':False]['text':' We get 4 due to the initial try and then 3 follow up retries because','line_number':2291,'multiline':False]['text':' overrideTransactionApiMaxRetriesToThree sets the max retry attempts to 3.','line_number':2292,'multiline':False]['text':' Wait for the final best effort abort to complete.','line_number':2295,'multiline':False]['text':' txnNumber ','line_number':2296,'multiline':True]['text':' If we are able to successfully finish this test, then we know that we have limited our','line_number':2303,'multiline':False]['text':' retries.','line_number':2304,'multiline':False]['text':' Verify the mocked response was returned.','line_number':2315,'multiline':False]['text':' txnNumber ','line_number':2317,'multiline':True]['text':' startTransaction ','line_number':2317,'multiline':True]['text':' The commit response.','line_number':2320,'multiline':False]['text':' The transient error should have been propagated.','line_number':2326,'multiline':False]['text':' Retrying commitTransaction uses majority write concern.','line_number':2330,'multiline':False]['text':' txnNumber ','line_number':2332,'multiline':True]['text':' startTransaction ','line_number':2333,'multiline':True]['text':' readConcern ','line_number':2334,'multiline':True]['text':' writeConcern ','line_number':2335,'multiline':True]['text':' 1 day.','line_number':2346,'multiline':False]['text':' 23 hours.','line_number':2347,'multiline':False]['text':' txnNumber will be incremented upon the release of a session.','line_number':2351,'multiline':False]['text':' Verify the mocked response was returned.','line_number':2367,'multiline':False]['text':' txnNumber ','line_number':2369,'multiline':True]['text':' startTransaction ','line_number':2370,'multiline':True]['text':' readConcern ','line_number':2371,'multiline':True]['text':' writeConcern ','line_number':2372,'multiline':True]['text':' maxTimeMS ','line_number':2373,'multiline':True]['text':' Throw a transient error more times than the overriden retry limit to verify the limit','line_number':2376,'multiline':False]['text':' is disabled when a deadline is set.','line_number':2377,'multiline':False]['text':' The commit response.','line_number':2382,'multiline':False]['text':' txnNumber ','line_number':2391,'multiline':True]['text':' startTransaction ','line_number':2392,'multiline':True]['text':' readConcern ','line_number':2393,'multiline':True]['text':' writeConcern ','line_number':2394,'multiline':True]['text':' maxTimeMS ','line_number':2395,'multiline':True]['text':' Should not throw.','line_number':2416,'multiline':False]['text':' Only throw once to verify the API gives up right away.','line_number':2474,'multiline':False]['text':' The commit response.','line_number':2478,'multiline':False]['text':' The API should have returned without trying to abort.','line_number':2485,'multiline':False]['text':' Verify the fatal for local logic doesn't apply to all transient or retriable errors.','line_number':2499,'multiline':False]['text':' The commit response.','line_number':2525,'multiline':False]['text':' The API should have returned without trying to abort.','line_number':2535,'multiline':False]['text':' Verify the fatal for local logic doesn't apply to all transient or retriable errors.','line_number':2549,'multiline':False]['text':' The commit response.','line_number':2575,'multiline':False]['text':' The API should have returned without trying to abort.','line_number':2588,'multiline':False]['text':' Verify the fatal for local logic doesn't apply to all transient or retriable errors.','line_number':2602,'multiline':False]['text':' Start the transaction with an insert.','line_number':2607,'multiline':False]['text':' Hang the best effort abort that will be triggered after giving up on the transaction.','line_number':2610,'multiline':False]['text':' Interrupting the caller's opCtx prevents waiting for the best effort abort.','line_number':2623,'multiline':False]['text':' The API isn't guaranteed to return the thrown error or an interruption error, but either way','line_number':2628,'multiline':False]['text':' it should return a non-ok status.','line_number':2629,'multiline':False]['text':' The abort should get hung and not have been processed yet.','line_number':2632,'multiline':False]['text':' Unblock the abort and verify it eventually runs.','line_number':2637,'multiline':False]['text':' txnNumber ','line_number':2640,'multiline':True]['text':' Use an executor with higher max threads so a best effort abort could actually run','line_number':2644,'multiline':False]['text':' concurrently within the API. Otherwise the API would always wait for the best effort abort','line_number':2645,'multiline':False]['text':' even if the wait wasn't explicit.','line_number':2646,'multiline':False]['text':' resourceYielder ','line_number':2655,'multiline':True]['text':' Start the transaction with an insert.','line_number':2657,'multiline':False]['text':' Hang the best effort abort that will be triggered before retrying after we throw an error.','line_number':2660,'multiline':False]['text':' Throw a non-transient error once to trigger a best effort abort with no retry.','line_number':2674,'multiline':False]['text':' The future should time out since it's blocked waiting for the best effort abort to finish.','line_number':2682,'multiline':False]['text':' The abort should get hung and not have been processed yet.','line_number':2685,'multiline':False]['text':' Allow the abort to finish and it should unblock the API.','line_number':2690,'multiline':False]['text':' After the abort finishes, the API should not have retried.','line_number':2694,'multiline':False]['text':' txnNumber ','line_number':2695,'multiline':True]['text':' Wait for tasks so destructors run on the main test thread.','line_number':2697,'multiline':False]['text':' Use an executor with higher max threads so a best effort abort could actually run','line_number':2703,'multiline':False]['text':' concurrently within the API. Otherwise the API would always wait for the best effort abort','line_number':2704,'multiline':False]['text':' even if the wait wasn't explicit.','line_number':2705,'multiline':False]['text':' resourceYielder ','line_number':2714,'multiline':True]['text':' Start the transaction with an insert.','line_number':2716,'multiline':False]['text':' Hang the best effort abort that will be triggered before retrying after we throw an error.','line_number':2719,'multiline':False]['text':' Second attempt's insert and successful commit response.','line_number':2723,'multiline':False]['text':' Throw a transient error once to trigger a best effort abort then retry.','line_number':2738,'multiline':False]['text':' The future should time out since it's blocked waiting for the best effort abort to finish.','line_number':2747,'multiline':False]['text':' The abort should get hung and not have been processed yet.','line_number':2750,'multiline':False]['text':' Allow the abort to finish and it should unblock the API.','line_number':2755,'multiline':False]['text':' After the abort finishes, the API should retry and successfully commit.','line_number':2759,'multiline':False]['text':' txnNumber ','line_number':2762,'multiline':True]['text':' startTransaction ','line_number':2763,'multiline':True]['text':' readConcern ','line_number':2764,'multiline':True]['text':' writeConcern ','line_number':2765,'multiline':True]['text':' Wait for tasks so destructors run on the main test thread.','line_number':2768,'multiline':False]['text':' namespace','line_number':2773,'multiline':False]['text':' namespace mongo','line_number':2774,'multiline':False]