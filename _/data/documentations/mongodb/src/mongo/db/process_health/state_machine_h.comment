['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Note: this class provides no internal synchronization. If used in a multithreaded context callers','line_number':49,'multiline':False]['text':' must provide their own concurrency control.','line_number':50,'multiline':False]['text':' handlers accept oldState, newState, and input message as parameters.','line_number':58,'multiline':False]['text':' Should not throw exceptions.','line_number':59,'multiline':False]['text':' State machine accepts InputMessage and optionally transitions to state in the return value','line_number':62,'multiline':False]['text':' Transitions the state machine into the initial state.','line_number':103,'multiline':False]['text':' Can only be called once.','line_number':104,'multiline':False]['text':' Define a valid transition.','line_number':117,'multiline':False]['text':' Must be called prior to starting the state machine.','line_number':118,'multiline':False]['text':' Define valid transitions.','line_number':126,'multiline':False]['text':' Must be called prior to starting the state machine.','line_number':127,'multiline':False]['text':' Accept message m, transition the state machine, and return the resulting state.','line_number':136,'multiline':False]['text':' Upon the transition to the new state the state machine will call any registered hooks.','line_number':137,'multiline':False]['text':'','line_number':138,'multiline':False]['text':' In order to avoid deadlock while calling this function, authors should ensure','line_number':139,'multiline':False]['text':' that:','line_number':140,'multiline':False]['text':'	1. A recursive call only occurs from the current thread; or','line_number':141,'multiline':False]['text':'	2. For any hooks run as a result of accepting this message, no blocking calls are made','line_number':142,'multiline':False]['text':' involving shared resources with another thread that may call this function.','line_number':143,'multiline':False]['text':' Return the current state.','line_number':157,'multiline':False]['text':' Allows registering multiple callbacks through chained calls to enter/exit.','line_number':165,'multiline':False]['text':' Defines the transition function for each state and maintains the list of callbacks','line_number':174,'multiline':False]['text':' used when a state is entered or exited.','line_number':175,'multiline':False]['text':' Accepts input message m when state machine is in state _state. Optionally, the','line_number':182,'multiline':False]['text':' state machine transitions to the state specified in the return value. Entry and exit','line_number':183,'multiline':False]['text':' hooks will not fire if this method returns boost::none.','line_number':184,'multiline':False]['text':' The state this handler is defined for','line_number':187,'multiline':False]['text':' The state we are handling','line_number':215,'multiline':False]['text':' Callbacks are called inline when we enter/exit _state','line_number':218,'multiline':False]['text':' in production, an illegal transition is a noop','line_number':286,'multiline':False]['text':' switch to new state','line_number':290,'multiline':False]['text':' fire exit hooks for previous state','line_number':293,'multiline':False]['text':' fire entry hooks for new state','line_number':296,'multiline':False]['text':' namespace process_health','line_number':330,'multiline':False]['text':' namespace mongo','line_number':331,'multiline':False]