['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Parameters used for constructing a ClientCursor. Makes an owned copy of 'originatingCommandObj'
 * to be used across getMores.
 *
 * ClientCursors cannot be constructed in isolation, but rather must be constructed and managed
 * using a CursorManager. See cursor_manager.h for more details.
 ','line_number':81,'multiline':True]['text':'*
 * A ClientCursor is the server-side state associated with a particular cursor id. A cursor id is a
 * handle that we return to the client for queries which require results to be returned in multiple
 * batches. The client can manage the server-side cursor state by passing the cursor id back to the
 * server for certain supported operations.
 *
 * For instance, a client can retrieve the next batch of results from the cursor by issuing a
 * getMore on this cursor id. It can also request that server-side resources be freed by issuing a
 * killCursors on a particular cursor id. This is useful if the client wishes to abandon the cursor
 * without retrieving all results.
 *
 * ClientCursors cannot exist in isolation and must be created, accessed, and destroyed via a
 * CursorManager. See cursor_manager.h for more details. Unless the ClientCursor is marked by the
 * caller as "no timeout", it will be automatically destroyed by its cursor manager after a period
 * of inactivity.
 ','line_number':134,'multiline':True]['text':'*
     * Returns a pointer to the underlying query plan executor. All cursors manage a PlanExecutor,
     * so this method never returns a null pointer.
     ','line_number':191,'multiline':True]['text':'*
     * Returns the original command object which created this cursor.
     ','line_number':215,'multiline':True]['text':'*
     * Returns the privileges required to run a getMore against this cursor. This is the same as the
     * set of privileges which would have been required to create the cursor in the first place.
     ','line_number':222,'multiline':True]['text':'*
     * Increments the cursor's tracked number of query results returned so far by 'n'.
     ','line_number':231,'multiline':True]['text':'*
     * Returns the number of batches returned by this cursor so far.
     ','line_number':245,'multiline':True]['text':'*
     * Increments the number of batches returned so far by one.
     ','line_number':252,'multiline':True]['text':'*
     * Returns a generic cursor containing diagnostics about this cursor.
     * The caller must either have this cursor pinned or hold a mutex from the cursor manager.
     ','line_number':275,'multiline':True]['text':'*
     * Returns the amount of time execution time available to this cursor. Only valid at the
     * beginning of a getMore request, and only really for use by the maxTime tracking code.
     *
     * Microseconds::max() == infinity, values less than 1 mean no time left.
     ','line_number':281,'multiline':True]['text':'*
     * Sets the amount of execution time available to this cursor. This is only called when an
     * operation that uses a cursor is finishing, to update its remaining time.
     *
     * Microseconds::max() == infinity, values less than 1 mean no time left.
     ','line_number':291,'multiline':True]['text':'*
     * Returns the commit point at the time the last batch was returned.
     ','line_number':301,'multiline':True]['text':'*
     * Sets the commit point at the time the last batch was returned.
     ','line_number':308,'multiline':True]['text':'*
     * Returns true if a client has requested that this cursor can be killed.
     ','line_number':331,'multiline':True]['text':'*
     * Sets 'killPending' flag of this client cursor. This indicates to the cursor that a client
     * has requested that it be killed while it was pinned, and it can proactively clean up its
     * resources upon unpinning.
     ','line_number':338,'multiline':True]['text':'*
     * Returns true if operations with this cursor should be omitted from diagnostic sources such as
     * currentOp and the profiler.
     ','line_number':347,'multiline':True]['text':' Releases the stashed TransactionResources to the caller.','line_number':355,'multiline':False]['text':'*
     * Since the client cursor destructor is private, this is needed for using client cursors with
     * smart pointers.
     ','line_number':368,'multiline':True]['text':'*
     * Constructs a ClientCursor. Since cursors must come into being registered and pinned, this is
     * private. See cursor_manager.h for more details.
     ','line_number':378,'multiline':True]['text':'*
     * Destroys a ClientCursor. This is private, since only the CursorManager or the ClientCursorPin
     * is allowed to destroy a cursor.
     *
     * Cursors must be unpinned and deregistered from the CursorManager before they can be
     * destroyed.
     ','line_number':387,'multiline':True]['text':'*
     * Disposes this ClientCursor's PlanExecutor. Must be called before deleting a ClientCursor to
     * ensure it has a chance to clean up any resources it is using. Can be called multiple times.
     * It is an error to call any other method after calling dispose(). If 'now' is specified,
     * will track cursor lifespan metrics.
     ','line_number':396,'multiline':True]['text':' The ID of the ClientCursor. A value of 0 is used to mean that no cursor id has been assigned.','line_number':408,'multiline':False]['text':' Threads may read from this field even if they don't have the cursor pinned, as long as they','line_number':411,'multiline':False]['text':' have the correct partition of the CursorManager locked (just like _authenticatedUsers).','line_number':412,'multiline':False]['text':' The authenticated user when this cursor was created. Threads may read from this','line_number':415,'multiline':False]['text':' field (using the getter) even if they don't have the cursor pinned as long as they hold the','line_number':416,'multiline':False]['text':' correct partition's lock in the CursorManager. They must hold the lock to prevent the cursor','line_number':417,'multiline':False]['text':' from being freed by another thread during the read.','line_number':418,'multiline':False]['text':' A logical session id for this cursor, if it is running inside of a session.','line_number':421,'multiline':False]['text':' A transaction number for this cursor, if it was provided in the originating command.','line_number':424,'multiline':False]['text':' Tracks whether dispose() has been called, to make sure it happens before destruction. It is','line_number':432,'multiline':False]['text':' an error to use a ClientCursor once it has been disposed.','line_number':433,'multiline':False]['text':' Holds an owned copy of the command specification received from the client.','line_number':436,'multiline':False]['text':' The privileges required for the _originatingCommand.','line_number':439,'multiline':False]['text':' Unused maxTime budget for this cursor.','line_number':446,'multiline':False]['text':' Stashed recovery unit. Maintains valid and positioned cursors across commands, so that data','line_number':449,'multiline':False]['text':' pointers remain valid and safe to access. May be nullptr. This field MUST come before','line_number':450,'multiline':False]['text':' '_exec' as we cannot destroy the recovery unit until the plan executor and its resources','line_number':451,'multiline':False]['text':' (cursors) have been destroyed.','line_number':452,'multiline':False]['text':' The transaction resources used throughout executions. This contains the yielded version of','line_number':455,'multiline':False]['text':' all collection/view acquisitions so that in a getMore call we can restore the acquisitions.','line_number':456,'multiline':False]['text':' Will only be set if the underlying plan executor uses shard role acquisitions.','line_number':457,'multiline':False]['text':' The underlying query execution machinery. Must be non-null.','line_number':460,'multiline':False]['text':' While a cursor is being used by a client, it is marked as "pinned" by setting','line_number':463,'multiline':False]['text':' _operationUsingCursor to the current OperationContext.','line_number':464,'multiline':False]['text':'','line_number':465,'multiline':False]['text':' Cursors always come into existence in a pinned state ('_operationUsingCursor' must be','line_number':466,'multiline':False]['text':' non-null at construction).','line_number':467,'multiline':False]['text':'','line_number':468,'multiline':False]['text':' To write to this field one of the following must be true:','line_number':469,'multiline':False]['text':' 1) You have a lock on the appropriate partition in CursorManager and the cursor is unpinned','line_number':470,'multiline':False]['text':' (the field is null).','line_number':471,'multiline':False]['text':' 2) The cursor has already been deregistered from the CursorManager. In this case, nobody else','line_number':472,'multiline':False]['text':' will try to pin the cursor.','line_number':473,'multiline':False]['text':'','line_number':474,'multiline':False]['text':' To read this field one of the following must be true:','line_number':475,'multiline':False]['text':' 1) You have a lock on the appropriate partition in CursorManager.','line_number':476,'multiline':False]['text':' 2) You know you have the cursor pinned.','line_number':477,'multiline':False]['text':' A string with the plan summary of the cursor's query.','line_number':483,'multiline':False]['text':' Commit point at the time the last batch was returned. This is only used by internal exhaust','line_number':486,'multiline':False]['text':' oplog fetching.','line_number':487,'multiline':False]['text':' Passed along from the original query so that it can be logged if necessary in getMore','line_number':490,'multiline':False]['text':' requests.','line_number':491,'multiline':False]['text':' If boost::none, query stats should not be collected for this cursor.','line_number':495,'multiline':False]['text':' Metrics that are accumulated over the lifetime of the cursor, incremented with each getMore.','line_number':497,'multiline':False]['text':' Useful for diagnostics like queryStats.','line_number':498,'multiline':False]['text':' The Key used by query stats to generate the query stats store key.','line_number':500,'multiline':False]['text':' Flag to decide if diagnostic information should be omitted.','line_number':503,'multiline':False]['text':' The client OperationKey associated with this cursor.','line_number':506,'multiline':False]['text':' Flag indicating that a client has requested to kill the cursor.','line_number':509,'multiline':False]['text':' The execution time collected from the initial operation prior to any getMore requests.','line_number':512,'multiline':False]['text':'*
 * ClientCursorPin is an RAII class which must be used in order to access a cursor. On
 * construction, the ClientCursorPin marks its cursor as in use, which is called "pinning" the
 * cursor. On destruction, the ClientCursorPin marks its cursor as no longer in use, which is
 * called "unpinning" the cursor. Pinning is used to prevent multiple concurrent uses of the same
 * cursor--- pinned cursors cannot be deleted or timed out and cannot be used concurrently by other
 * operations such as getMore. They can however, be marked as interrupted and instructed to destroy
 * themselves through killCursors.
 *
 * A pin is obtained using the CursorManager. See cursor_manager.h for more details.
 *
 * A pin extends the lifetime of a ClientCursor object until the pin's release. Pinned ClientCursor
 * objects cannot not be killed due to inactivity, and cannot be immediately erased by user kill
 * requests (though they can be marked as interrupted).
 *
 * Example usage:
 * {
 *     StatusWith<ClientCursorPin> pin = cursorManager->pinCursor(opCtx, cursorid);
 *     if (!pin.isOK()) {
 *         // No cursor with id 'cursorid' exists, or it was killed while inactive. Handle the error
 *         here.
 *         return pin.getStatus();
 *     }
 *
 *     ClientCursor* cursor = pin.getValue().getCursor();
 *     // Use cursor. Pin automatically released on block exit.
 *
 *     // Use the PlanExecutor associated with the cursor.
 *     auto next = cursor->planExecutor()->getNext();
 *
 * }
 *
 * Callers need not hold any lock manager locks in order to obtain or release a client cursor pin.
 * However, in order to use the ClientCursor itself, locks may need to be acquired. Whether locks
 * are needed to use the ClientCursor can be determined by consulting the ClientCursor's lock
 * policy.
 ','line_number':516,'multiline':True]['text':'*
     * Moves 'other' into 'this'. The 'other' pin must have a pinned cursor. Moving an empty pin
     * into 'this' is illegal.
     ','line_number':558,'multiline':True]['text':'*
     * Moves 'other' into 'this'. 'other' must have a pinned cursor and 'this' must have no pinned
     * cursor.
     ','line_number':564,'multiline':True]['text':'*
     * Calls release().
     ','line_number':570,'multiline':True]['text':'*
     * Releases the pin without deleting the underlying cursor. Turns into a no-op if release() or
     * deleteUnderlying() have already been called on this pin.
     ','line_number':575,'multiline':True]['text':'*
     * Deletes the underlying cursor.  Cannot be called if release() or deleteUnderlying() have
     * already been called on this pin.
     ','line_number':581,'multiline':True]['text':'*
     * Returns a pointer to the pinned cursor.
     ','line_number':587,'multiline':True]['text':'
     * Unstashes resources in the cursor onto the operation context using the cursor. This _must_
     * be called before using the plan executor associated with the cursor.
     ','line_number':596,'multiline':True]['text':'*
     * Inverse of above: Transfers resources which need the same lifetime as the cursor from the
     * operation context to the cursor itself.
     ','line_number':602,'multiline':True]['text':' A pinned cursor takes ownership of storage resources (storage-level cursors owned by the','line_number':617,'multiline':False]['text':' PlanExecutor) without lock-manager locks. Such an operation must ensure interruptibility when','line_number':618,'multiline':False]['text':' later acquiring a lock in order to avoid deadlocking with replication rollback at the storage','line_number':619,'multiline':False]['text':' engine level. Rollback signals interrupt to active readers, acquires a global X lock and then','line_number':620,'multiline':False]['text':' waits for all storage cursors to be closed in order to proceed; while a pinned cursor','line_number':621,'multiline':False]['text':' operation holds storage-level cursors and then may try to acquire a lock.','line_number':622,'multiline':False]['text':'','line_number':623,'multiline':False]['text':' An operation holding a pinned cursor must never have an UninterruptibleLockGuard on the stack','line_number':624,'multiline':False]['text':' that causes lock acquisition to hang without checking for interrupt. This','line_number':625,'multiline':False]['text':' InterruptibleLockGuard ensures that operations holding a ClientCursorPin will eventually','line_number':626,'multiline':False]['text':' observe and obey interrupt signals in the locking layer.','line_number':627,'multiline':False]['text':'*
 * Records certain metrics for the current operation on OpDebug and aggregates those metrics for
 * query stats use. If a cursor pin is provided, metrics are aggregated on the cursor; otherwise,
 * metrics are written directly to the query stats store.
 * NOTE: Metrics are taken from opDebug.additiveMetrics, so CurOp::setEndOfOpMetrics must be called
 * *prior* to calling these.
 *
 * Currently, query stats are only collected for find and aggregate requests (and their subsequent
 * getMore requests), so these should only be called from those request paths.
 ','line_number':636,'multiline':True]['text':' namespace mongo','line_number':648,'multiline':False]