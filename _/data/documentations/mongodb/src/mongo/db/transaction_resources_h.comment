['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Pretends that the collection is unsharded. Acquisitions with this PlacementConcern will have','line_number':62,'multiline':False]['text':' always have UNSHARDED description and filter, even if they are sharded. Only for use in','line_number':63,'multiline':False]['text':' internal code paths that require it. Possible data loss if used incorrectly!','line_number':64,'multiline':False]['text':'*
         * Special PlacementConcern which mimics direct connection to a shard, causing the
         * acquisition to bypass any sharding checks and acquire just the local catalog portion. Any
         * sharding service values, such as the description or the filter are not allowed to be used
         * (will invariant).
         *
         * Note the *with potential data loss* in the name, which indicates that it allows the
         * caller to operate on a collection which is not even on the local shard, thus if used
         * incorrectly can lead to data loss.
         ','line_number':68,'multiline':True]['text':' TODO SERVER-77213: This should mostly go away once the Locker resides inside','line_number':112,'multiline':False]['text':' TransactionResources and the underlying locks point to it instead of the opCtx.','line_number':113,'multiline':False]['text':' The number containing at which acquireCollection call this acquisition was built. All','line_number':164,'multiline':False]['text':' acquisitions created on the same call to acquireCollection will share the same number and','line_number':165,'multiline':False]['text':' contain shared_ptrs to the Global/DB/Lock-free locks shared amongst them.','line_number':166,'multiline':False]['text':' Only for lock-free acquisitions. Otherwise the','line_number':175,'multiline':False]['text':' global lock is held by 'dbLock'.','line_number':176,'multiline':False]['text':' Indicates whether this acquisition has been invalidated after a ScopedLocalCatalogWriteFence','line_number':185,'multiline':False]['text':' was unable to restore it on rollback.','line_number':186,'multiline':False]['text':' Maintains a reference count to how many references there are to this acquisition by the','line_number':189,'multiline':False]['text':' CollectionAcquisition class.','line_number':190,'multiline':False]['text':' Maintains a reference count to how many references there are to this acquisition by the','line_number':202,'multiline':False]['text':' ViewAcquisition class.','line_number':203,'multiline':False]['text':'*
 * This class is a container for all the collection resources which are currently acquired by a
 * given operation. Operations consist of one or more transactions, which "acquire" and "release"
 * collections within their lifetime.
 *
 * Transactions start either explicitly (through the construction of a WUOW) or implicitly, from the
 * moment the first collection is acquired. They last until the last collection snapshot is released
 * or the WriteUnitOfWork commits (whichever is longer).
 *
 * Because of the above definition, within a transaction, acquisitions are always 2-phase, meaning
 * that acquiring a collection and then releasing it will defer the release until the transaction
 * actually commits. The boundaries of the transaction are considered to be the WUOW. If there is no
 * WUOW, the transaction ends when the snapshot is released.
 *
 * There are three steps associated with each acquisition:
 *
 *  - Locking: Acquiring the necessary lock manager locks in order to ensure stability of the
 * snapshot for the duration of the acquisition.
 *  - Snapshotting: Taking a consistent snapshot across all the "services" associated with the
 * collection (shard filter, storage catalog, data snapshot).
 *  - Resource reservation: This is service-specific and indicates setting the necessary state so
 * that the snapshot is consistent for the duration of the acquisition. Example of resource
 * acquisition is the RangePreserver, which blocks orphan cleanups.
 *
 * Acquiring a collection performs all three steps: locking, resource reservation and snapshotting.
 *
 * Releasing a collection performs the inverse of acquisition, freeing locks, reservations and the
 * snapshot, such that a new acquire may see newer state (if the readConcern of the transaction
 * permits it).
 *
 * Yielding *all* transaction resources only frees locks and the snapshot, but it keeps the resource
 * reservations.
 *
 * Restoring *all* transaction resources only performs locking and snapshotting (in accordance with
 * the read concern of the operation).
 ','line_number':207,'multiline':True]['text':'*
     * Asserts that this transaction context is not holding any collection acquisitions (i.e., it is
     * pristine). Used for invarianting in places where we do not expect an existing snapshot to
     * have been acquired because the caller expects to operate on latest.
     ','line_number':267,'multiline':True]['text':'*
     * Transaction resources can only be in one of 4 states:
     * - EMPTY: This state is equivalent to a brand new constructed transaction resources which have
     *   never received an acquisition.
     * - ACTIVE: There is at least one acquisition in use and the resources have not been yielded.
     * - YIELDED: The resources are either yielded or in the process of reacquisition after a yield.
     * - STASHED: The resources have been stashed for subsequent getMore operations.
     * - FAILED: The reacquisition after a yield failed, we cannot perform any new acquisitions and
     *   the operation must release all acquisitions. The operation must effectively cancel the
     *   current operation.
     *
     * The set of valid transitions are:
     * - EMPTY <-> ACTIVE <-> YIELDED
     * - EMPTY <-> ACTIVE <-> STASHED
     * - STASHED -> FAILED -> EMPTY
     * - YIELDED -> FAILED -> EMPTY
     ','line_number':274,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////////////////','line_number':295,'multiline':False]['text':' Global resources (cover all collections for the operation)','line_number':296,'multiline':False]['text':' The read concern with which the transaction runs. All acquisitions must match that read','line_number':298,'multiline':False]['text':' concern.','line_number':299,'multiline':False]['text':' Set of locks acquired by the operation or nullptr if yielded.','line_number':302,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////','line_number':305,'multiline':False]['text':' Per-collection resources','line_number':306,'multiline':False]['text':' Set of all collections which are currently acquired','line_number':308,'multiline':False]['text':' Reference counters used for controlling how many references there are to the','line_number':312,'multiline':False]['text':' TransactionResources object.','line_number':313,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////////////////','line_number':317,'multiline':False]['text':' Yield/restore logic','line_number':318,'multiline':False]['text':' If this value is set, indicates that yield has been performed on the owning','line_number':320,'multiline':False]['text':' TransactionResources resources and the yielded state is contained in the structure below.','line_number':321,'multiline':False]['text':' The number of times we have called acquireCollection* on these TransactionResources. The','line_number':327,'multiline':False]['text':' number is used to identify acquisitions that share the same global/db locks.','line_number':328,'multiline':False]['text':' namespace shard_role_details','line_number':336,'multiline':False]['text':' namespace mongo','line_number':337,'multiline':False]