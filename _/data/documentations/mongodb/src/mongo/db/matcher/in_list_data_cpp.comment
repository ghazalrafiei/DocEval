['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' '_arr' might contain regexs. In this context, we ignore any regexes that we might','line_number':104,'multiline':False]['text':' encounter.','line_number':105,'multiline':False]['text':' We define a lambda to process the elements, and we invoke the lambda with the appropriate','line_number':163,'multiline':False]['text':' iterators.','line_number':164,'multiline':False]['text':' If 'e' is an array, update 'hasEmptyArray' and 'hasNonEmptyArray'.','line_number':203,'multiline':False]['text':' If 'e' is an object, update 'hasEmptyObject' and 'hasNonEmptyObject'.','line_number':207,'multiline':False]['text':' If 'prevElem' is greater than 'e', then we know the elements are not','line_number':218,'multiline':False]['text':' sorted. Also, because the elements are not sorted, when this loop ends','line_number':219,'multiline':False]['text':' we won't have enough information to determine whether the elements are','line_number':220,'multiline':False]['text':' unique.','line_number':221,'multiline':False]['text':' If 'prevElem' equals 'e', then we know the elements contain duplicates.','line_number':226,'multiline':False]['text':' If 'typeMask' contains any numeric type, update 'typeMask' to contain all numeric types.','line_number':250,'multiline':False]['text':' If 'typeMask' contains any string-like type (string or symbol), update 'typeMask' to contain','line_number':258,'multiline':False]['text':' all string-like types.','line_number':259,'multiline':False]['text':' We defer on actually sorting and deduping '_elements'. Record what we've observed so far.','line_number':265,'multiline':False]['text':' If 'arr' is defined, then save 'arr' and 'elements' into '_arr' and '_elements'','line_number':271,'multiline':False]['text':' respectively and clear '_oldBackingArr' and '_originalElements'.','line_number':272,'multiline':False]['text':' If 'arr' is not defined, save the old value of '_arr' into '_oldBackingArr' if needed,','line_number':278,'multiline':False]['text':' save 'elements' into '_elements', and clear '_arr' and '_originalElements'.','line_number':279,'multiline':False]['text':' Mark the elements as being initialized.','line_number':290,'multiline':False]['text':' Save type info fields.','line_number':293,'multiline':False]['text':' Update '_sbeTagMask' and '_hashSetSbeTagMask'.','line_number':301,'multiline':False]['text':' If 'tag' is eligible to use the hash, set the corresponding bit in','line_number':325,'multiline':False]['text':' '_hashSetSbeTagMask'.','line_number':326,'multiline':False]['text':' Save a copy of the original '_elements' vector before sorting and de-duping.','line_number':346,'multiline':False]['text':' Set '_collator'.','line_number':364,'multiline':False]['text':' If setElements() hasn't been called yet or if 'coll' matches the old collator, then there','line_number':368,'multiline':False]['text':' is no more work to do and we can return early.','line_number':369,'multiline':False]['text':' If _elements contains at least one collatable type, then we call setElementsImpl() with the','line_number':375,'multiline':False]['text':' same BSON array to force '_elements' to be re-built and sorted using the new collation.','line_number':376,'multiline':False]['text':' '_arr' may contain Regexes. These Regexes are not part of the equalities list and in','line_number':383,'multiline':False]['text':' this context we just want to ignore them, so we set 'errorOnRegex' to false.','line_number':384,'multiline':False]['text':' If setElements() hasn't been called yet or if isBSONOwned() is true, then there's nothing','line_number':401,'multiline':False]['text':' to do.','line_number':402,'multiline':False]['text':' Get a pointer to the old BSON buffer.','line_number':408,'multiline':False]['text':' Copy _arr's BSON data into a new owned buffer.','line_number':411,'multiline':False]['text':' Update each BSONElement in '_elements' to refer to the new buffer.','line_number':415,'multiline':False]['text':' Serialize the original list of elements into an owned BSONArray.','line_number':421,'multiline':False]['text':' Call setElementsImpl() and pass in the owned BSONArray.','line_number':429,'multiline':False]['text':' Use lower_bound() / upper_bound() to find the first element that must be inside the','line_number':465,'multiline':False]['text':' "search range" that should be used when the contains() method performs a binary search.','line_number':466,'multiline':False]['text':' namespace mongo','line_number':476,'multiline':False]