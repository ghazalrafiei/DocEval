['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Controls how the element path interacts with leaf arrays, e.g. how we will handle the path
     * "a.b" when "b" is an array.
     ','line_number':48,'multiline':True]['text':' Matches against the elements of arrays at the end of the path (in addition to the array','line_number':53,'multiline':False]['text':' as a whole).','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' For example, for the path "f" and document {f: [1, 2]}, causes the path iterator to','line_number':56,'multiline':False]['text':' return 1, 2, and [1, 2].','line_number':57,'multiline':False]['text':' Does not traverse arrays at the end of the path. For the path "f" and document {f: [1,','line_number':60,'multiline':False]['text':' 2]}, the path iterator returns only the entire array [1, 2].','line_number':61,'multiline':False]['text':' Matches against the elements of arrays at the end of the path. The same as kTraverse, but','line_number':64,'multiline':False]['text':' does not match the array as a whole.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' For example, for the path "f" and document {f: [1, 2]}, causes the path iterator to','line_number':67,'multiline':False]['text':' return 1 and 2.','line_number':68,'multiline':False]['text':'*
     * Controls how the element path interacts with non-leaf arrays, e.g. how we will handle the
     * path "a.b" when "a" is an array.
     ','line_number':72,'multiline':True]['text':' Path traversal spans non-leaf arrays.','line_number':77,'multiline':False]['text':' Path traversal stops at non-leaf array boundaries. The path iterator will return no','line_number':80,'multiline':False]['text':' elements.','line_number':81,'multiline':False]['text':' Path traversal stops at non-leaf array boundaries. The path iterator will return the','line_number':84,'multiline':False]['text':' array element.','line_number':85,'multiline':False]['text':'*
     * Resets this ElementPath to 'newPath'. Note that this method will make a copy of 'newPath'
     * such that there's no lifetime requirements for the string which 'newPath' points into.
     ','line_number':96,'multiline':True]['text':' ---------------------------------------------------------------','line_number':161,'multiline':False]['text':'*
     * Constructs an iterator over 'elementToIterate', where the desired element(s) is/are at the
     * end of the suffix of 'path' starting at 'suffixIndex'. For example, constructing a
     * BSONElementIterator with path="a.b.c", suffixIndex=1, and 'elementToIterate' as the
     * subdocument located at 'a' within the object {a: {b: [{c: 1}, {c: 2}]}} would iterate over
     * the elements of {b: [{c: 1}, {c: 2}]} at the end of the path 'b.c'. 'elementToIterate' does
     * not need to be of type Object, so it would also be valid to construct a BSONElementIterator
     * with path="a.b" and 'elementToIterate' as the array within 'a.b'.
     ','line_number':203,'multiline':True]['text':'*
     * Constructs an iterator over 'objectToIterate', where the desired element(s) is/are at the end
     * of 'path'.
     ','line_number':214,'multiline':True]['text':'*
     * Helper for more().  Recurs on _subCursor (which traverses the remainder of a path through
     * subdocuments of an array).
     ','line_number':229,'multiline':True]['text':'*
     * Sets _traversalStart and _traversalStartIndex by traversing 'elementToIterate' along the
     * suffix of '_path' starting at 'suffixIndex'.
     ','line_number':235,'multiline':True]['text':' The element where we begin our iteration. This is either:','line_number':243,'multiline':False]['text':' -- The element at the end of _path.','line_number':244,'multiline':False]['text':' -- The first array element encountered along _path.','line_number':245,'multiline':False]['text':' -- EOO, if _path does not exist in the object/element we are exploring.','line_number':246,'multiline':False]['text':' This index of _traversalStart in _path, or 0 if _traversalStart is EOO.','line_number':249,'multiline':False]['text':' Pointer to optional. The optional is used for a convenient API to re-use the memory between','line_number':279,'multiline':False]['text':' instances. Need to wrap with pointer to break cycle when we recursively contain member to','line_number':280,'multiline':False]['text':' self.','line_number':281,'multiline':False]['text':' namespace mongo','line_number':297,'multiline':False]