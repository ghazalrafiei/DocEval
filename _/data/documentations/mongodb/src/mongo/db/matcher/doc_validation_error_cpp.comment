['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':44,'multiline':False]['text':' Fail point which simulates an internal error for testing.','line_number':105,'multiline':False]['text':'*
 * Enumerated type which describes whether an error should be described normally or in an
 * inverted sense when in a negated context. More precisely, when a MatchExpression fails to match a
 * document, the generated error will refer to failure unless the MatchExpression is nested
 * within another MatchExpression that expresses a logical negation, in which case the generated
 * error will refer to success.
 ','line_number':108,'multiline':True]['text':'*
 * A set of parameters specific to a given frame. Used to allow a parent node to pass parameters to
 * control how its child node should behave when it gets visited.
 ','line_number':117,'multiline':True]['text':' Tracks the current subdocument that an error should be generated over.','line_number':124,'multiline':False]['text':' Tracks whether the generated error should be described normally or in an inverted context.','line_number':126,'multiline':False]['text':'*
 * A struct which tracks error generation information for some node within the tree.
 ','line_number':130,'multiline':True]['text':'*
     * Enumerated type which describes runtime information about a node participating in error
     * generation.
     ','line_number':134,'multiline':True]['text':' This node contributes to error generation.','line_number':139,'multiline':False]['text':' Neither this node nor do any of its children contribute to error generation at all.','line_number':141,'multiline':False]['text':' This node contributes to error generation, but it needs more information about its child','line_number':143,'multiline':False]['text':' nodes when generating an error. For instance, when generating an error for an AND in a','line_number':144,'multiline':False]['text':' normal context, we need to discern which of its clauses failed.','line_number':145,'multiline':False]['text':' This node contributes to error generation, but its next child will not contribute to','line_number':147,'multiline':False]['text':' error output. If a node maintains this state across all visits to its children, then none','line_number':148,'multiline':False]['text':' of its children will contribute to the error output.','line_number':149,'multiline':False]['text':' BSONBuilders which construct the generated error.','line_number':156,'multiline':False]['text':' Tracks the index of the current child expression.','line_number':159,'multiline':False]['text':' Tracks runtime information about how the current node should generate an error.','line_number':161,'multiline':False]['text':' Tracks whether the array of 'consideredValues' was truncated for this frame.','line_number':163,'multiline':False]['text':' Tracks the current frame's parameters.','line_number':165,'multiline':False]['text':'*
 * A struct which tracks context during error generation.
 ','line_number':171,'multiline':True]['text':'*
     * Utilities which add/remove ValidationErrorFrames from 'frames'.
     ','line_number':187,'multiline':True]['text':' Clear the last error that was generated.','line_number':191,'multiline':False]['text':' If this is the first frame, then we know that we've failed validation, so we must be','line_number':194,'multiline':False]['text':' generating an error.','line_number':195,'multiline':False]['text':' Record and clear any input given by the parent frame.','line_number':204,'multiline':False]['text':' If we've determined at runtime or at parse time that this node shouldn't contribute to','line_number':210,'multiline':False]['text':' error generation, then push a frame indicating that this node should not produce an','line_number':211,'multiline':False]['text':' error and return.','line_number':212,'multiline':False]['text':' If our parent needs more information, call 'matchesBSON()' to determine whether 'expr'','line_number':220,'multiline':False]['text':' will contribute to error output.','line_number':221,'multiline':False]['text':' If 'matchesBSON()' throws, generate an error which explains the exception.','line_number':225,'multiline':False]['text':'*
     * Utilities which return members of the current ValidationContextFrame.
     ','line_number':244,'multiline':True]['text':' If a node has RuntimeState::kNoError, then its runtime state value should never be','line_number':270,'multiline':False]['text':' modified since the node should never contribute to error generation.','line_number':271,'multiline':False]['text':'*
     * Configures the current frame to have a 'childInput', that is, the set of parameters that any
     * child expression will accept as input.
     ','line_number':276,'multiline':True]['text':'*
     * Verify that the size of 'builder' combined with that of 'item' are of valid size before
     * appending the latter to the former; throws a BSONObjectTooLarge error otherwise.
     ','line_number':298,'multiline':True]['text':'*
     * Appends the latest complete error to 'builder'.
     ','line_number':342,'multiline':True]['text':'*
     * Appends the latest complete error to 'builder'. This should only be called by nodes which
     * construct an array as part of their error.
     ','line_number':356,'multiline':True]['text':' The '$_internalSchemaAllowedProperties' match expression represents','line_number':365,'multiline':False]['text':' two JSONSchema keywords: 'additionalProperties' and','line_number':366,'multiline':False]['text':' 'patternProperties'. As such, if both keywords produce an error,','line_number':367,'multiline':False]['text':' their errors will be packaged into an array which the parent','line_number':368,'multiline':False]['text':' expression must absorb when constructing its array of error details.','line_number':369,'multiline':False]['text':'*
     * Returns the latest complete error generated as an object. Should only be called when the
     * caller expects an object.
     ','line_number':380,'multiline':True]['text':'*
     * Returns whether 'expr' will produce an array as an error.
     ','line_number':392,'multiline':True]['text':'*
     * Finishes error for 'expr' by stashing its generated error if it made one and popping the
     * frame that it created.
     ','line_number':408,'multiline':True]['text':'*
     * Sets 'inversion' to the opposite of its current value.
     ','line_number':423,'multiline':True]['text':'*
     * Returns whether 'expr' should generate an error.
     ','line_number':431,'multiline':True]['text':' Frames which construct the generated error. Each frame corresponds to the information needed','line_number':439,'multiline':False]['text':' to generate an error for one node. As such, each node must call 'pushNewFrame' as part of','line_number':440,'multiline':False]['text':' its pre-visit and 'popFrame' as part of its post-visit.','line_number':441,'multiline':False]['text':' Tracks the most recently completed error. The error can be one of several types:','line_number':443,'multiline':False]['text':' - std::monostate indicates that no error was produced.','line_number':444,'multiline':False]['text':' - Nodes can return their error as a std::string if they do not need to generate error','line_number':445,'multiline':False]['text':' details as a structured BSONObj. For example, consider the schema {required: [a,b,c]}. Each','line_number':446,'multiline':False]['text':' property in the 'required' array is represented as its own ExistsMatchExpression and will','line_number':447,'multiline':False]['text':' simply report its path if it is missing from the document which failed to match.','line_number':448,'multiline':False]['text':' - BSONArray indicates multiple errors produced by an expression which does not correspond','line_number':449,'multiline':False]['text':' to a user-facing operator. For example, consider the subschema {minimum: 2, multipleOf: 2}.','line_number':450,'multiline':False]['text':' Both schema operators can fail and produce errors, but the schema that they belong to','line_number':451,'multiline':False]['text':' doesn't correspond to an operator that the user specified. As such, the errors are stored','line_number':452,'multiline':False]['text':' in an array and passed to the parent expression.','line_number':453,'multiline':False]['text':' - Finally, BSONObj indicates the most common case of an error: a detailed object which','line_number':454,'multiline':False]['text':' describes the reasons for failure. The final error will be of this type.','line_number':455,'multiline':False]['text':' Document which failed to match against the collection's validator.','line_number':458,'multiline':False]['text':' Tracks whether the generated error should omit appending 'specifiedAs' and','line_number':460,'multiline':False]['text':' 'consideredValues' to avoid generating an error larger than the maximum BSONObj size.','line_number':461,'multiline':False]['text':' Tracks an optional input to child frames which require custom parameters from their parent','line_number':463,'multiline':False]['text':' frame.','line_number':464,'multiline':False]['text':' The maximum allowed size for a doc validation error.','line_number':466,'multiline':False]['text':' Tracks the maximum number of values that will be reported in the 'consideredValues' array','line_number':468,'multiline':False]['text':' for leaf operators.','line_number':469,'multiline':False]['text':'*
 * Builds a BSON object from a BSON element 'element' using the same name placeholder as the
 * JSON Schema match expressions.
 ','line_number':473,'multiline':True]['text':'*
 * Append the error generated by one of 'expr's children to the current array builder of 'expr'
 * if said child generated an error.
 ','line_number':485,'multiline':True]['text':' Only provide the indexes of non-matching clauses for certain named operators in the','line_number':494,'multiline':False]['text':' user's query.','line_number':495,'multiline':False]['text':'*
 * Enumerated type to encode JSON Schema array keyword "items" and "additionalItems", and their
 * variants.
 ','line_number':514,'multiline':True]['text':' 'items': {schema}','line_number':519,'multiline':False]['text':' 'additionalItems': false','line_number':520,'multiline':False]['text':' 'additionalItems': {schema}','line_number':521,'multiline':False]['text':'*
 * Decodes the JSON Schema "items"/"additionalItems" keyword type from an error annotation of
 * expression 'expr'.
 ','line_number':524,'multiline':True]['text':'*
 * Returns the set of additional properties from 'doc'. A property is said to be additional if
 * it is not contained in any of the properties of 'expr', nor does it match any of the regular
 * expressions in expr's patternProperties.
 ','line_number':547,'multiline':True]['text':'*
 * Sets the necessary state to generate an error for a child expression of an
 * 'InternalSchemaAllowedPropertiesMatchExpression'.
 ','line_number':576,'multiline':True]['text':'*
 * Returns the element corresponding to the first property from 'additionalProperties' whose
 * value in 'doc' fails to match against 'filter', if such an element exists. Returns EOO otherwise.
 ','line_number':585,'multiline':True]['text':'*
 * Finds a pattern property failure and returns the failing element (if one exists) and EOO
 * otherwise. A pattern property failure corresponds to the first element in a document whose field
 * name matches against a pattern, but fails to match against the corresponding filter.
 ','line_number':601,'multiline':True]['text':' Before walking the tree corresponding to the subschema of a single child expression of','line_number':609,'multiline':False]['text':' 'patternProperties', we must first determine whether there exists a property which matches','line_number':610,'multiline':False]['text':' the corresponding regular expression which also fails to match against the subschema.','line_number':611,'multiline':False]['text':'*
 * Generates an error for a child expression of the 'patternProperties' keyword, that is, for a
 * property whose name matched one of the regexes of 'expr', but failed to match against the
 * corresponding subschema.
 ','line_number':624,'multiline':True]['text':' Generate an error for the previous regular expression. The previous regex is indexed by','line_number':631,'multiline':False]['text':' the current child index minus one since the child expression is offset by one to account','line_number':632,'multiline':False]['text':' for the expression which represents the 'additionalProperties' keyword.','line_number':633,'multiline':False]['text':' Only generate an error if we found a regex which matches a property that failed to match','line_number':639,'multiline':False]['text':' against the corresponding sub-schema.','line_number':640,'multiline':False]['text':' Only generate an error if 'additionalProperties' is non empty, that is, there exists at','line_number':654,'multiline':False]['text':' least one additional property within the current subdocument tracked by 'ctx'.','line_number':655,'multiline':False]['text':'*
 * Generates an error for the schema {additionalProperties: <subschema>}. This function can only
 * be called if there is at least one property in the current subdocument tracked by 'ctx' which
 * failed to match 'subschema'.
 ','line_number':664,'multiline':True]['text':'*
 * Handle error generation for either an 'additionalProperties: <schema>' keyword or the child of a
 * 'patternProperties' keyword.
 ','line_number':683,'multiline':True]['text':' Because 'InternalSchemaAllowedPropertiesMatchExpression' represents both the','line_number':691,'multiline':False]['text':' 'additionalProperties' and the 'patternProperties' keywords, we must determine which','line_number':692,'multiline':False]['text':' keyword we are generating an error for. In particular, the first child will always be','line_number':693,'multiline':False]['text':' the expression corresponding to the 'additionalProperties' keyword, while each','line_number':694,'multiline':False]['text':' subsequent child will be a single component of the 'patternProperties' keyword.','line_number':695,'multiline':False]['text':' We handle the {'additionalProperties': <schema>} case here after we've walked the','line_number':697,'multiline':False]['text':' tree corresponding to the additionalProperties keyword.','line_number':698,'multiline':False]['text':'*
 * Visitor which is primarily responsible for error generation.
 ','line_number':708,'multiline':True]['text':' $all is treated as a leaf operator.','line_number':722,'multiline':False]['text':' $and only gets annotated as an "items" only for JSON Schema keyword "items" set to an','line_number':728,'multiline':False]['text':' array of subschemas.','line_number':729,'multiline':False]['text':' An AND needs its children to call 'matches' in a normal context to discern which','line_number':733,'multiline':False]['text':' clauses failed.','line_number':734,'multiline':False]['text':' If this is the root of a $jsonSchema and we're in an inverted context, do not attempt','line_number':738,'multiline':False]['text':' to provide a detailed error.','line_number':739,'multiline':False]['text':' Only generate an error if this node is tagged with an MQL operator name. The','line_number':772,'multiline':False]['text':' '_propertyExists' tag indicates that this node is implementing a JSONSchema feature.','line_number':773,'multiline':False]['text':' Append the result of $expr's aggregation expression evaluation.','line_number':788,'multiline':False]['text':' It is the responsibility of 'expr' to discern which child expression(s) failed to','line_number':876,'multiline':False]['text':' match against which elements of the current document since 'expr' has knowledge of the','line_number':877,'multiline':False]['text':' set of defined properties along with the any regex/filter pairs defined by','line_number':878,'multiline':False]['text':' 'patternProperties'. We assume that the next child expression will be ignored until','line_number':879,'multiline':False]['text':' proven otherwise.','line_number':880,'multiline':False]['text':' The first child expression of 'expr' always corresponds to the 'additionalProperties'','line_number':886,'multiline':False]['text':' keyword.','line_number':887,'multiline':False]['text':' We discern whether we are dealing with 'additionalProperties: false' or','line_number':890,'multiline':False]['text':' 'additionalProperties: <schema>' by inspecting the annotation on 'expr'.','line_number':891,'multiline':False]['text':' Only generate an error in the boolean case if the 'additionalProperties' expression','line_number':895,'multiline':False]['text':' evaluates to false.','line_number':896,'multiline':False]['text':' In the case of an additionalProperties keyword which takes a schema argument,','line_number':901,'multiline':False]['text':' identify the first additional property which violates the subschema, if such a','line_number':902,'multiline':False]['text':' property exists.','line_number':903,'multiline':False]['text':' This node will never generate an error in the inverted case.','line_number':913,'multiline':False]['text':' Only generate an error in the normal case since if the value exists and it is','line_number':923,'multiline':False]['text':' encrypted, in the inverted case, this node's sibling expression will generate an','line_number':924,'multiline':False]['text':' appropriate error.','line_number':925,'multiline':False]['text':' Since 'expr' represents a conditional expression corresponding to a single','line_number':969,'multiline':False]['text':' $jsonSchema dependency whose else branch always evaluates to 'true', 'expr' can only','line_number':970,'multiline':False]['text':' fail if its 'condition' expression evaluates to true and its then branch evaluates to','line_number':971,'multiline':False]['text':' false. Therefore, if 'condition' evaluates to false, we conclude that this node will','line_number':972,'multiline':False]['text':' not contribute to error generation.','line_number':973,'multiline':False]['text':' isJsonSchemaKeyword ','line_number':994,'multiline':True]['text':' Get an element of an array.','line_number':999,'multiline':False]['text':' Attribute should be present and be an array, since it has been ensured by handling of','line_number':1004,'multiline':False]['text':' AndMatchExpression with error annotation "items".','line_number':1005,'multiline':False]['text':' If array is shorter than the index the match expression applies to, then document','line_number':1009,'multiline':False]['text':' validation should not fail.','line_number':1010,'multiline':False]['text':' Append information about array element to the error.','line_number':1013,'multiline':False]['text':' Build a document corresponding to the array element for the child expression to','line_number':1018,'multiline':False]['text':' operate on.','line_number':1019,'multiline':False]['text':' This node should never be responsible for generating an error directly.','line_number':1043,'multiline':False]['text':' As part of pushing a new frame onto the stack, the runtime state may be set to','line_number':1046,'multiline':False]['text':' 'kNoError' if 'expr' matches the current document.','line_number':1047,'multiline':False]['text':' Only attempt to find a subdocument if this node failed to match.','line_number':1050,'multiline':False]['text':' If we do not find an object at expr's path, then the subtree rooted at this node will','line_number':1058,'multiline':False]['text':' not contribute to error generation as there will either be an explicit','line_number':1059,'multiline':False]['text':' ExistsMatchExpression which will explain a missing path error or an explicit','line_number':1060,'multiline':False]['text':' InternalSchemaTypeExpression that will explain a type did not match error.','line_number':1061,'multiline':False]['text':' This expression should match exactly one object; if there are any more elements, then','line_number':1069,'multiline':False]['text':' ignore the subtree.','line_number':1070,'multiline':False]['text':' isJsonSchemaKeyword ','line_number':1081,'multiline':True]['text':' If 'oneOf' has more than one matching subschema, then the generated error should','line_number':1106,'multiline':False]['text':' be in terms of the subschemas which matched, not the ones which failed to match.','line_number':1107,'multiline':False]['text':' We only report the matching schema reason in an inverted context, so there is','line_number':1119,'multiline':False]['text':' no need for a reason string in the normal case.','line_number':1120,'multiline':False]['text':' A NOR needs its children to call 'matches' in a normal context to discern which','line_number':1145,'multiline':False]['text':' clauses matched.','line_number':1146,'multiline':False]['text':' If this is a $jsonSchema not, then expr's children will not contribute to the error','line_number':1155,'multiline':False]['text':' output.','line_number':1156,'multiline':False]['text':' The jsonSchema keyword 'enum' is treated as a leaf operator.','line_number':1164,'multiline':False]['text':' isJsonSchemaKeyword ','line_number':1169,'multiline':True]['text':' An OR needs its children to call 'matches' in an inverted context to discern which','line_number':1172,'multiline':False]['text':' clauses matched.','line_number':1173,'multiline':False]['text':' Although $type predicate can match an array field, we are only interested in implicitly','line_number':1205,'multiline':False]['text':' traversed array elements as considered values since, when we have predicate "{$type:','line_number':1206,'multiline':False]['text':' 'array'}" and a field is an array, that is a match. Therefore we use','line_number':1207,'multiline':False]['text':' LeafArrayBehavior::kTraverseOmitArray as the traversal behavior.','line_number':1208,'multiline':False]['text':' Set of utilities responsible for appending various fields to build a descriptive error.','line_number':1219,'multiline':False]['text':' Only append the operator name if 'annotation' has one.','line_number':1222,'multiline':False]['text':' An underscore-prefixed tag describes an internal entity, not an MQL operator.','line_number':1224,'multiline':False]['text':' Omit 'specifiedAs' if we are generating a truncated error.','line_number':1230,'multiline':False]['text':' Since this function can append values that are proportional to the size of the','line_number':1234,'multiline':False]['text':' original validator expression, verify that the current builders do not exceed the','line_number':1235,'multiline':False]['text':' maximum allowed validation error size.','line_number':1236,'multiline':False]['text':'*
     * Returns an enumeration of values of a field at path 'fieldPath' in the current document as an
     * array if the path is present. A return value of empty array means that the path was present,
     * but the value associated with that path was the empty array. If the path is not present, then
     * returns 'boost::none'. 'leafArrayBehavior' determines how the values are enumerated when the
     * leaf value of the path is an array.
     ','line_number':1246,'multiline':True]['text':' Empty path means that the match is against the root document.','line_number':1255,'multiline':False]['text':' Indicate that 'consideredValues' has been truncated if there are non eoo elements left','line_number':1272,'multiline':False]['text':' in 'valueIterator'.','line_number':1273,'multiline':False]['text':' When the iterator 'valueIterator' returns no values, there are two possible cases: either','line_number':1281,'multiline':False]['text':' the path does not exist, or the path exists and contains an empty array. In this case we','line_number':1282,'multiline':False]['text':' perform a check for field existence to disambiguate those two cases.','line_number':1283,'multiline':False]['text':'*
     * Returns a value at path 'path' in the current document, or an empty (End-Of-Object type)
     * element if the value is not present. Illegal to call if, due to implicit array traversal,
     * 'path' would result in multiple elements.
     ','line_number':1290,'multiline':True]['text':' We expect only 1 item.','line_number':1300,'multiline':False]['text':'*
     * Appends a missing field error if 'arr' does not contain a value.
     ','line_number':1307,'multiline':True]['text':'*
     * Appends a type mismatch error if no elements in 'arr' have one of the expected types.
     ','line_number':1317,'multiline':True]['text':' The field is not present.','line_number':1323,'multiline':False]['text':' there's already a reason for failure','line_number':1327,'multiline':False]['text':' this operator accepts all types','line_number':1330,'multiline':False]['text':' an element has one of the expected types','line_number':1334,'multiline':False]['text':'*
     * Given 'normalReason' and 'invertedReason' strings, appends the reason for failure to the
     * current object builder tracked by 'ctx'.
     ','line_number':1350,'multiline':True]['text':' there's already a reason for failure','line_number':1362,'multiline':False]['text':'*
     * Appends values of 'arr' array to the current object builder if 'arr' contains a value.
     ','line_number':1374,'multiline':True]['text':' Return if there is no field or if we are generating a truncated error.','line_number':1378,'multiline':False]['text':'*
     * Appends types of values of 'arr' array to the current object builder if 'arr' contains a
     * value.
     ','line_number':1395,'multiline':True]['text':' The field is not present or the array is empty.','line_number':1401,'multiline':False]['text':'*
     * Returns 'true' if a field exists at path 'fieldPath' in the current document.
     ','line_number':1415,'multiline':True]['text':' Use kTraverse to return at least one','line_number':1420,'multiline':False]['text':' item if the field exists.','line_number':1421,'multiline':False]['text':'*
     * Given a pointer to a PathMatchExpression 'expr', appends details to the current
     * BSONObjBuilder tracked by '_context' describing why the document failed to match against
     * 'expr'. In particular:
     * - Appends "reason: field was missing" if expr's path is missing from the document.
     * - Appends "reason: type did not match" along with 'expectedTypes' and 'consideredTypes' if
     * none of the values at expr's path match any of the types specified in 'expectedTypes'.
     * - Appends the specified 'reason' along with 'consideredValue' if the 'path' in the
     * document resolves to a single value.
     * - Appends the specified 'reason' along with 'consideredValues' if the 'path' in the
     * document resolves to an array of values that is implicitly traversed by 'expr'.
     ','line_number':1427,'multiline':True]['text':' If this is a jsonSchema keyword, we must verify that expr's path exists and the','line_number':1448,'multiline':False]['text':' value of the path matches the expected type. Otherwise, this node will not be','line_number':1449,'multiline':False]['text':' responsible for an error; either the parent of expr will not match, or another','line_number':1450,'multiline':False]['text':' node in the tree will generate an appropriate error.','line_number':1451,'multiline':False]['text':' Determine whether 'expr' represents a jsonSchema minimum/maximum keyword.','line_number':1469,'multiline':False]['text':' isJsonSchemaKeyword ','line_number':1482,'multiline':True]['text':'*
     * Examines the values in 'valuesArray' and the value at the path of 'expr' in the current
     * document and appends a type error if a valid geometry is not found.
     ','line_number':1494,'multiline':True]['text':' If the path of 'expr' is missing and this is a jsonSchema keyword, then this node','line_number':1539,'multiline':False]['text':' should not generate an error.','line_number':1540,'multiline':False]['text':'*
     * Generates a document validation error for a bit test expression 'expr'.
     ','line_number':1553,'multiline':True]['text':'*
     * Performs the setup necessary to generate an error for 'expr'.
     ','line_number':1567,'multiline':True]['text':' Only append the operator name if it will produce an object error corresponding to','line_number':1576,'multiline':False]['text':' a user-facing operator.','line_number':1577,'multiline':False]['text':' Append the keyword specification when 'expr' corresponds to the 'required' keyword.','line_number':1581,'multiline':False]['text':'*
     * Utility to generate an error for logical operators which are treated like leaves for the
     * purposes of error reporting.
     ','line_number':1589,'multiline':True]['text':' $all with no children should not translate to an 'AndMatchExpression' and 'enum'','line_number':1599,'multiline':False]['text':' must have non-zero children.','line_number':1600,'multiline':False]['text':' If this is a jsonSchema keyword and the value doesn't exist, then this node will','line_number':1606,'multiline':False]['text':' not generate an error.','line_number':1607,'multiline':False]['text':'*
     * For an AlwaysBooleanMatchExpression, we simply output the error information obtained at
     * parse time.
     ','line_number':1618,'multiline':True]['text':' An AlwaysBooleanMatchExpression can only contribute to error generation when the','line_number':1625,'multiline':False]['text':' inversion matches the value of the 'expr'. More precisely, it is only possible','line_number':1626,'multiline':False]['text':' to generate an error for 'expr' if it evaluates to false in a normal context or','line_number':1627,'multiline':False]['text':' if it evaluates to true an inverted context.','line_number':1628,'multiline':False]['text':' isJsonSchemaKeyword ','line_number':1650,'multiline':True]['text':'*
     * Determines if a validation error should be generated for a JsonSchema keyword MatchExpression
     * 'expr' given the current document validation context. Returns the element 'expr' applies
     * over if the found element matches one of the 'expectedTypes'. By returning a non-empty
     * element, this indicates that 'expr' should generate an error. Returns End-Of-Object (EOO)
     * value otherwise, which indicates that 'expr' should not generate an error.
     ','line_number':1653,'multiline':True]['text':' Inverted errors are not supported.','line_number':1666,'multiline':False]['text':' Determine what value does 'expr' expression apply over.','line_number':1670,'multiline':False]['text':' If attribute value is either not present or does not match the types in 'expectedTypes',','line_number':1675,'multiline':False]['text':' do not generate an error, since related match expressions do that instead. There are 4','line_number':1676,'multiline':False]['text':' cases of how a keyword can be defined in combination with 'required' and 'type' keywords','line_number':1677,'multiline':False]['text':' (in the explanation below parameter 'expr' corresponds to '(keyword match expression)'):','line_number':1678,'multiline':False]['text':'','line_number':1679,'multiline':False]['text':' 1) 'required' is not present, {type: <expectedTypes>} is not present. In this case the','line_number':1680,'multiline':False]['text':' expression tree corresponds to ((keyword match expression) OR NOT (matches type)) OR','line_number':1681,'multiline':False]['text':' (NOT (attribute exists)). This tree can fail to match only if the attribute is present','line_number':1682,'multiline':False]['text':' and matches a type in 'expectedTypes'.','line_number':1683,'multiline':False]['text':'','line_number':1684,'multiline':False]['text':' 2) 'required' is not present, {type: <expectedTypes>} is present. In this case the','line_number':1685,'multiline':False]['text':' expression tree corresponds to ((keyword match expression) AND (matches type)) OR (NOT','line_number':1686,'multiline':False]['text':' (attribute exists)). If the input is an element of a non-matching type, then both','line_number':1687,'multiline':False]['text':' (keyword match expression) and (matches type) expressions fail to match and are asked','line_number':1688,'multiline':False]['text':' to contribute to the validation error. We expect only (matches type) expression, not a','line_number':1689,'multiline':False]['text':' (keyword match expression), to report a type mismatch, since otherwise the error would','line_number':1690,'multiline':False]['text':' contain redundant elements.','line_number':1691,'multiline':False]['text':'','line_number':1692,'multiline':False]['text':' 3) 'required' is present, {type: <expectedTypes>} is not present. In this case the','line_number':1693,'multiline':False]['text':' expression tree corresponds to ((keyword match expression) OR NOT (matches type)) AND','line_number':1694,'multiline':False]['text':' (attribute exists). This tree can fail to match if the attribute is present and','line_number':1695,'multiline':False]['text':' matches a type, and fails to match when the attribute is not present. In the latter','line_number':1696,'multiline':False]['text':' case, the expression part ((keyword match expression) OR NOT (matches type)) matches and','line_number':1697,'multiline':False]['text':' (keyword match expression) is not asked to contribute to the error.','line_number':1698,'multiline':False]['text':'','line_number':1699,'multiline':False]['text':' 4) 'required' is present, {type: <expectedTypes>} is present. In this case the expression','line_number':1700,'multiline':False]['text':' tree corresponds to ((keyword match expression) AND (matches type)) AND (attribute','line_number':1701,'multiline':False]['text':' exists). This tree can fail to match if the attribute is present and matches a type,','line_number':1702,'multiline':False]['text':' or if the attribute is not present or does not match a type. In the case when the','line_number':1703,'multiline':False]['text':' attribute is not present all parts of the expression fail to match and are asked to','line_number':1704,'multiline':False]['text':' contribute to the error, but we expect only (attribute exists) expression to contribute,','line_number':1705,'multiline':False]['text':' since otherwise  the error would contain redundant elements.','line_number':1706,'multiline':False]['text':'*
     * Generates an error for JSON Schema "minItems"/"maxItems" keyword match expression 'expr'.
     ','line_number':1711,'multiline':True]['text':'*
     * Generates an error for JSON Schema "additionalItems" keyword set to 'false'.
     ','line_number':1732,'multiline':True]['text':'*
     * Generates an error for JSON Schema "items" keyword set to an array of subschemas that is used
     * to validate elements of the array.
     ','line_number':1749,'multiline':True]['text':' Determine if we need to generate an error using a child of the "$and" expression, which','line_number':1756,'multiline':False]['text':' must be of InternalSchemaMatchArrayIndexMatchExpression type, since "$and" does not have','line_number':1757,'multiline':False]['text':' a path associated with it.','line_number':1758,'multiline':False]['text':' If 'expr' does not have any children then we have 'items':[] case and we don't need to','line_number':1760,'multiline':False]['text':' generate an error.','line_number':1761,'multiline':False]['text':' Since the "items" keyword set to an array of subschemas logically behaves as "$and",','line_number':1771,'multiline':False]['text':' it needs its children to call 'matches' to discern which clauses failed.','line_number':1772,'multiline':False]['text':' Force children match expressions to not generate any errors.','line_number':1775,'multiline':False]['text':'*
     * Adds elements starting from index 'startIndex' from array 'array' to the current object as
     * "additionalItems" attribute.
     ','line_number':1780,'multiline':True]['text':' Skip first 'startIndex' elements.','line_number':1787,'multiline':False]['text':' Add remaining array elements as "additionalItems" attribute.','line_number':1790,'multiline':False]['text':'*
     * Generates an error for JSON Schema array keyword set to a single schema value that is used
     * to validate elements of the array.
     ','line_number':1799,'multiline':True]['text':' Disable error generation by the child expression of 'expr'.','line_number':1821,'multiline':False]['text':'*
 * Visitor which maintains state for tree MatchExpressions in between visiting each child.
 ','line_number':1840,'multiline':True]['text':' Reset the state before determining if the next child should produce an error.','line_number':1879,'multiline':False]['text':' Examine the next patternSchema to determine whether the next clause of','line_number':1882,'multiline':False]['text':' 'patternProperties' should generate an error. Since the current index corresponds to','line_number':1883,'multiline':False]['text':' one plus the number of patternProperties clauses visited so far, it also represents','line_number':1884,'multiline':False]['text':' the next 'patternProperties' clause.','line_number':1885,'multiline':False]['text':' Only check for child errors when we're in a normal context, that is, when none of expr's','line_number':1917,'multiline':False]['text':' subschemas matched, as opposed to the inverted context, where more than one subschema','line_number':1918,'multiline':False]['text':' matched.','line_number':1919,'multiline':False]['text':'*
     * Generates an error for a single $jsonSchema dependency represented by 'expr'.
     ','line_number':1952,'multiline':True]['text':' When generating an error for 'InternalSchemaCondMatchExpression', that is, a single','line_number':1959,'multiline':False]['text':' jsonSchema dependency, we can only generate an error for the 'then' branch (expr's child','line_number':1960,'multiline':False]['text':' at index 1). This is because the only way that a jsonSchema dependency can fail is if','line_number':1961,'multiline':False]['text':' expr's condition (expr's child at index 0) evaluates to true and the 'then' branch','line_number':1962,'multiline':False]['text':' evaluates to false. Additionally, the else branch (expr's child at index 2) is never','line_number':1963,'multiline':False]['text':' considered because it always evaluates to true and detailed inverted errors in the','line_number':1964,'multiline':False]['text':' context of $jsonSchema are not supported.','line_number':1965,'multiline':False]['text':' In the case of a schema dependency (i.e. {dependencies: {a: {<subschema>}}}),','line_number':1971,'multiline':False]['text':' we simply append the subschema's generated failure.','line_number':1972,'multiline':False]['text':' In the case of a property dependency (i.e. {dependencies: {a:','line_number':1975,'multiline':False]['text':' [<set of dependant properties>]}}), we append an array of missing properties.','line_number':1976,'multiline':False]['text':'*
 * Visitor which finalizes the generated error for the current MatchExpression.
 ','line_number':1988,'multiline':True]['text':' Clean up the frame for this node if we're finishing the error for an $all, an inverted','line_number':2003,'multiline':False]['text':' $jsonSchema, or this node shouldn't generate an error.','line_number':2004,'multiline':False]['text':' Specify a different details string based on the tag in expr's annotation where','line_number':2009,'multiline':False]['text':' the first entry is the details string in the normal case and the second is the string','line_number':2010,'multiline':False]['text':' for the inverted case.','line_number':2011,'multiline':False]['text':' If this node reports a path as its error, set 'latestCompleteError' appropriately.','line_number':2056,'multiline':False]['text':' Only build a 'patternProperties' error if any were produced.','line_number':2110,'multiline':False]['text':' If generating an error, append the error details.','line_number':2150,'multiline':False]['text':' In the inverted case, we treat 'oneOf' as a leaf.','line_number':2189,'multiline':False]['text':' In the case of a $jsonSchema "not", we do not report any error details','line_number':2212,'multiline':False]['text':' explaining why the subschema did match.','line_number':2213,'multiline':False]['text':' Clean up the frame for this node if we're finishing the error for an 'enum' or this node','line_number':2221,'multiline':False]['text':' shouldn't generate an error.','line_number':2222,'multiline':False]['text':' Specify a different details string based on the tag in expr's annotation where the first','line_number':2227,'multiline':False]['text':' entry is the details string in the normal case and the second is the string for the','line_number':2228,'multiline':False]['text':' inverted case.','line_number':2229,'multiline':False]['text':' If this node represents a 'properties' keyword or an individual property schema (denoted','line_number':2270,'multiline':False]['text':' by '_property') and the current array builder has no elements, then this node will not','line_number':2271,'multiline':False]['text':' contribute to the error output. As an example, consider the document {} against the','line_number':2272,'multiline':False]['text':' following schema: {required: ['a'], properties: {'a': {minimum: 2, type: 'int'}}}.','line_number':2273,'multiline':False]['text':' Though the AND representing 'properties' will fail and as such, is expected to construct','line_number':2274,'multiline':False]['text':' an error, its children will not contribute to the generated error. As such, we','line_number':2275,'multiline':False]['text':' retroactively mark an AND representing a 'properties' keyword or an individual','line_number':2276,'multiline':False]['text':' 'property' as 'RuntimeState::kNoError' if no error details were produced.','line_number':2277,'multiline':False]['text':' Append the result of the current array builder to the current object builder under the','line_number':2283,'multiline':False]['text':' field name 'detailsString' unless this node produces an array (i.e. in the case of a','line_number':2284,'multiline':False]['text':' subschema).','line_number':2285,'multiline':False]['text':'*
 * Verifies that each node in the tree rooted at 'validatorExpr' has an error annotation.
 ','line_number':2296,'multiline':True]['text':'*
 * Appends the object id of 'doc' to 'builder' under the 'failingDocumentId' field.
 ','line_number':2311,'multiline':True]['text':'*
 * Returns true if 'generatedError' is of valid depth; false otherwise.
 ','line_number':2320,'multiline':True]['text':' Implemented iteratively to avoid creating too many stack frames.','line_number':2325,'multiline':False]['text':'*
 * Generates a document validation error using match expression 'validatorExpr' for document
 * 'doc'.
 ','line_number':2343,'multiline':True]['text':' Throw if 'docValidationInternalErrorFailPoint' is enabled.','line_number':2352,'multiline':False]['text':' Verify that all nodes have error annotations.','line_number':2362,'multiline':False]['text':' There should be no frames when error generation is complete as the finished error will be','line_number':2368,'multiline':False]['text':' stored in 'context'.','line_number':2369,'multiline':False]['text':' Add document id to the error object.','line_number':2374,'multiline':False]['text':' Record whether the generated error was truncated.','line_number':2378,'multiline':False]['text':' Add errors from match expressions.','line_number':2381,'multiline':False]['text':' Verify that the generated error is of valid depth.','line_number':2385,'multiline':False]['text':' namespace','line_number':2395,'multiline':False]['text':' Attempt twice to generate a detailed document validation error before reporting to the user','line_number':2416,'multiline':False]['text':' that the generated error grew too large.','line_number':2417,'multiline':False]['text':' Try again, but this time omit details such as 'consideredValues' or 'specifiedAs'','line_number':2429,'multiline':False]['text':' that are proportional to the size of the validator expression or the failed document.','line_number':2430,'multiline':False]['text':' If we've reached here, both attempts failed to generate a sufficiently small error. Return','line_number':2443,'multiline':False]['text':' an error indicating as much to the user.','line_number':2444,'multiline':False]['text':' namespace mongo::doc_validation_error','line_number':2451,'multiline':False]