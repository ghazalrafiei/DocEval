['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A PathMatchExpression is an expression that acts on a field path with syntax
 * like "path.to.something": {$operator: ...}. Many such expressions are leaves in
 * the AST, such as $gt, $mod, $exists, and so on. But expressions that are not
 * leaves, such as $_internalSchemaObjectMatch, may also match against a field
 * path.
 ','line_number':37,'multiline':True]['text':'*
     * Gets the path that the expression applies to. Note that this returns an empty string for
     * empty path as well as no path cases. optPath() should be preferred in order to
     * distinguish between the two.
     ','line_number':72,'multiline':True]['text':'*
     * Gets the path that the expression applies to. If the expression does not apply to a specific
     * path, returns boost::none.
     ','line_number':85,'multiline':True]['text':'*
     * Resets the path for this expression. Note that this method will make a copy of 'path' such
     * that there's no lifetime requirements for the string which 'path' points into.
     ','line_number':93,'multiline':True]['text':'*
     * Finds an applicable rename from 'renameList' (if one exists) and applies it to the expression
     * path. Each pair in 'renameList' specifies a path prefix that should be renamed (as the first
     * element) and the path components that should replace the renamed prefix (as the second
     * element).
     *
     * Returns whether renames will always succeed if any rename is applicable. See
     * wouldRenameSucceed() for more details.
     *
     * TODO SERVER-74298 As soon as we implement SERVER-74298, the return value might not be
     * necessary any more.
     ','line_number':102,'multiline':True]['text':'*
     * Returns a pair of bool and boost::optional<StringData>.
     *
     * - The bool indicates whether renames will always succeed if any rename is applicable. No
     *   applicable renames is considered as a successful rename and returns true with the second
     *   element of the pair is boost::none. This function can return false when a renamed path
     *   component descends into an $elemMatch or an object literal. For examples,
     *
     *   expr = {x: {$eq: {y: 3}}} and renames = {{"x.y", "a.b"}}. We should be able to rename 'x'
     *   and 'y' to 'a' and 'b' respectively but due to the current limitation of the algorithm, we
     *   cannot rename such match expressions.
     *
     *   Another similar example is expr = {x: {$elemMatch: {$eq: {y: 3}}}} and renames = {{"x.y",
     *   "a.b"}}.

     * - The boost::optional<StringData> is the rewritten path iff one rename is applicable. The
     *   rewritten path is the path after applying the only applicable rename in 'renameList'. If no
     *   rename is applicable, the rewritten path is boost::none.
     *
     * TODO SERVER-74298 As soon as we implement SERVER-74298, this separate function may not be
     * necessary any more and can be combined into applyRenames().
     ','line_number':128,'multiline':True]['text':' Get the 'pathTail' by chopping off the 'prefixToRename' path components from the','line_number':166,'multiline':False]['text':' beginning of the 'pathFieldRef' path.','line_number':167,'multiline':False]['text':' Replace the chopped off components with the component names resulting from the','line_number':170,'multiline':False]['text':' rename.','line_number':171,'multiline':False]['text':' TODO SERVER-74298 Implement renaming by each path component instead of returning','line_number':176,'multiline':False]['text':' the pair of 'false' and boost::none. We can traverse subexpressions with the','line_number':177,'multiline':False]['text':' remaining path suffix of 'prefixToRename' to see if we can rename each path','line_number':178,'multiline':False]['text':' component. Any subexpression would succeed with 'rewrittenPath' then this path','line_number':179,'multiline':False]['text':' component can be renamed. For example, assuming that 'pathFieldRef' == "a.b" and','line_number':180,'multiline':False]['text':' 'prefixToRename' == "a.b.c", we can recurse down to the subexpression with path','line_number':181,'multiline':False]['text':' "c" to see if we can rename it. If we can, we can rename this path too.','line_number':182,'multiline':False]['text':' There should never be multiple applicable renames.','line_number':187,'multiline':False]['text':' There is an applicable rename. Modify the path of this expression to use the new','line_number':190,'multiline':False]['text':' name.','line_number':191,'multiline':False]['text':'*
     * Constructs a BSONObj that represents the right-hand-side of a PathMatchExpression. Used for
     * serialization of PathMatchExpression in cases where we do not want to serialize the path in
     * line with the expression. For example {x: {$not: {$eq: 1}}}, where $eq is the
     * PathMatchExpression.
     *
     * Serialization options should be respected for any descendent expressions. Eg, if the
     * 'literalPolicy' option is 'kToDebugTypeString', then any literal argument (like the number 1
     * in the example above), should be "shapified" (e.g. "?number"). 'literal' here is in contrast
     * to another expression, if that is possible syntactically.
     ','line_number':210,'multiline':True]['text':' ElementPath holds a FieldRef, which owns the underlying path string.','line_number':233,'multiline':False]['text':' May be boost::none if this MatchExpression does not apply to a specific path.','line_number':234,'multiline':False]['text':' namespace mongo','line_number':237,'multiline':False]