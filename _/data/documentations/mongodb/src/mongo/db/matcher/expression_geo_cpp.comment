['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'','line_number':59,'multiline':False]['text':' GeoExpression','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' Put simple constructors here for unique_ptr.','line_number':63,'multiline':False]['text':' "within" / "geoWithin" / "geoIntersects"','line_number':69,'multiline':False]['text':' eoo() or unknown query predicate.','line_number':82,'multiline':False]['text':' Parse geometry after predicates.','line_number':87,'multiline':False]['text':' $geoWithin doesn't accept multiple shapes.','line_number':96,'multiline':False]['text':' Deprecated "$uniqueDocs" field','line_number':103,'multiline':False]['text':' The element must be a geo specifier. "$box", "$center", "$geometry", etc.','line_number':106,'multiline':False]['text':' Initialize geoContainer and parse BSON object','line_number':122,'multiline':False]['text':' Why do we only deal with $within {polygon}?','line_number':127,'multiline':False]['text':' 1. Finding things within a point is silly and only valid','line_number':128,'multiline':False]['text':' for points and degenerate lines/polys.','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':' 2. Finding points within a line is easy but that's called intersect.','line_number':131,'multiline':False]['text':' Finding lines within a line is kind of tricky given what S2 gives us.','line_number':132,'multiline':False]['text':' Doing line-within-line is a valid yet unsupported feature,','line_number':133,'multiline':False]['text':' though I wonder if we want to preserve orientation for lines or','line_number':134,'multiline':False]['text':' allow (a,b),(c,d) to be within (c,d),(a,b).  Anyway, punt on','line_number':135,'multiline':False]['text':' this for now.','line_number':136,'multiline':False]['text':' Big polygon with strict winding order is represented as an S2Loop in SPHERE CRS.','line_number':142,'multiline':False]['text':' So converting the query to SPHERE CRS makes things easier than projecting all the data','line_number':143,'multiline':False]['text':' into STRICT_SPHERE CRS.','line_number':144,'multiline':False]['text':' $geoIntersect queries are hardcoded to *always* be in SPHERE CRS','line_number':152,'multiline':False]['text':' TODO: This is probably bad semantics, should not do this','line_number':153,'multiline':False]['text':'','line_number':166,'multiline':False]['text':' GeoNearExpression','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':' First, try legacy near, e.g.:','line_number':188,'multiline':False]['text':' t.find({ loc : { $nearSphere: [0,0], $minDistance: 1, $maxDistance: 3 }})','line_number':189,'multiline':False]['text':' t.find({ loc : { $nearSphere: [0,0] }})','line_number':190,'multiline':False]['text':' t.find({ loc : { $near : [0, 0, 1] } });','line_number':191,'multiline':False]['text':' t.find({ loc : { $near: { someGeoJSONPoint}})','line_number':192,'multiline':False]['text':' t.find({ loc : { $geoNear: { someGeoJSONPoint}})','line_number':193,'multiline':False]['text':' In a query document, $near queries can have no non-geo sibling parameters.','line_number':222,'multiline':False]['text':' Just one arg. to $geoNear.','line_number':239,'multiline':False]['text':' Parse "new" near:','line_number':247,'multiline':False]['text':' t.find({"geo" : {"$near" : {"$geometry": pointA, $minDistance: 1, $maxDistance: 3}}})','line_number':248,'multiline':False]['text':' t.find({"geo" : {"$geoNear" : {"$geometry": pointA, $minDistance: 1, $maxDistance: 3}}})','line_number':249,'multiline':False]['text':' Returns true if 'x' is a valid numeric value, that is, a non-negative finite number.','line_number':259,'multiline':False]['text':' Iterate over the argument.','line_number':264,'multiline':False]['text':' Return an error if a bad argument was passed inside the query document.','line_number':303,'multiline':False]['text':' Clear out any half-baked data.','line_number':322,'multiline':False]['text':' ...and try parsing new format.','line_number':326,'multiline':False]['text':' Fixup the near query for anonoyances caused by $nearSphere','line_number':333,'multiline':False]['text':' The user-provided point can be flat for a spherical query - needs to be projectable','line_number':335,'multiline':False]['text':' GeoJSON points imply wrapping queries','line_number':342,'multiline':False]['text':' Project the point to a spherical CRS now that we've got the settings we need','line_number':345,'multiline':False]['text':' We need to manually project here since we aren't using GeometryContainer','line_number':346,'multiline':False]['text':'','line_number':356,'multiline':False]['text':' GeoMatchExpression and GeoNearMatchExpression','line_number':357,'multiline':False]['text':'','line_number':358,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' Geo queries we don't need an index to answer: geoWithin and geoIntersects','line_number':361,'multiline':False]['text':'','line_number':362,'multiline':False]['text':'*
 * Takes ownership of the passed-in GeoExpression.
 ','line_number':364,'multiline':True]['text':'*
 * Takes shared ownership of the passed-in GeoExpression.
 ','line_number':376,'multiline':True]['text':' Never match big polygon','line_number':404,'multiline':False]['text':' Project this geometry into the CRS of the larger geometry.','line_number':408,'multiline':False]['text':' In the case of index validation, we are projecting the geometry of the query','line_number':410,'multiline':False]['text':' into the CRS of the index to confirm that the index region convers/includes','line_number':411,'multiline':False]['text':' the region described by the predicate.','line_number':412,'multiline':False]['text':' Never match big polygon','line_number':433,'multiline':False]['text':' Project this geometry into the CRS of the larger geometry.','line_number':437,'multiline':False]['text':' In the case of index validation, we are projecting the geometry of the query','line_number':439,'multiline':False]['text':' into the CRS of the index to confirm that the index region convers/includes','line_number':440,'multiline':False]['text':' the region described by the predicate.','line_number':441,'multiline':False]['text':'','line_number':491,'multiline':False]['text':' Parse-only geo expressions: geoNear (formerly known as near).','line_number':492,'multiline':False]['text':'','line_number':493,'multiline':False]['text':' namespace mongo','line_number':546,'multiline':False]