['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Makes a conjunction of the given predicates
 ','line_number':71,'multiline':True]['text':'*
 * Makes a disjunction of the given predicates.
 *
 * - The result is non-null; it may be an OrMatchExpression with zero children.
 * - Any trivially-false arguments are omitted.
 * - If only one argument is nontrivial, returns that argument rather than adding an extra
 *   OrMatchExpression around it.
 ','line_number':80,'multiline':True]['text':'*
 * Base class for comparison-like match expression nodes. This includes both the comparison nodes in
 * the match language ($eq, $gt, $gte, $lt, and $lte), as well as internal comparison nodes like
 * $_internalExprEq.
 ','line_number':140,'multiline':True]['text':'*
     * Returns the name of this MatchExpression.
     ','line_number':189,'multiline':True]['text':'*
     * Replaces the RHS element of this expression. The caller is responsible for ensuring that the
     * BSONObj backing 'elem' outlives this MatchExpression.
     ','line_number':198,'multiline':True]['text':' TODO SERVER-50629: Ensure that the _backingBSON is consistent with the new element.','line_number':203,'multiline':False]['text':'*
     * 'collator' must outlive the ComparisonMatchExpression and any clones made of it.
     ','line_number':220,'multiline':True]['text':' BSON which holds the data referenced by _rhs.','line_number':227,'multiline':False]['text':' Collator used to compare elements. By default, simple binary comparison will be used.','line_number':231,'multiline':False]['text':'*
 * EQ, LTE, LT, GT, GTE subclass from ComparisonMatchExpression.
 ','line_number':244,'multiline':True]['text':'*
     * Returns true if the MatchExpression is a ComparisonMatchExpression.
     ','line_number':249,'multiline':True]['text':'*
     * Returns true if the MatchExpression is a ComparisonMatchExpression.
     ','line_number':265,'multiline':True]['text':'*
 * query operator: $in
 ','line_number':718,'multiline':True]['text':'*
     * 'collator' must outlive the InMatchExpression and any clones made of it.
     ','line_number':742,'multiline':True]['text':'*
     * Sets the equalities to 'bsonArray'. If 'bool(fn)' is true, then 'fn' will be invoked
     * for each element in 'bsonArray'. If 'fn' returns a non-OK Status for any element, this
     * function will immediately break and return that Status. If 'bool(fn)' is false, then
     * 'fn' is ignored.
     *
     * This function will throw an error if any value in 'bsonArray' is Undefined. Any Regex
     * values in 'bsonArray' will get passed to 'fn()' (assuming that 'bool(fn)' is true) but
     * otherwise will be ignored.
     ','line_number':763,'multiline':True]['text':'*
     * Sets the equalities to 'bsonArray'. This function will throw an error if any value in
     * 'bsonArray' is Regex or Undefined.
     ','line_number':780,'multiline':True]['text':'*
     * Sets the equalities to 'equalities'. This function will throw an error if any value in
     * 'equalities' is Regex or Undefined.
     ','line_number':789,'multiline':True]['text':' If '_equalities' has been prepared then it can't be modified, so make a mutable copy','line_number':854,'multiline':False]['text':' and then update '_equalities' to point to the copy.','line_number':855,'multiline':False]['text':' A helper to serialize to something like {$in: "?array<?number>"} or similar, depending on','line_number':863,'multiline':False]['text':' 'opts' and whether we have a mixed-type $in or not.','line_number':864,'multiline':False]['text':' List of equalities (excluding regexes).','line_number':867,'multiline':False]['text':' Container of regex elements this object owns.','line_number':870,'multiline':False]['text':'*
 * Bit test query operators include $bitsAllSet, $bitsAllClear, $bitsAnySet, and $bitsAnyClear.
 ','line_number':876,'multiline':True]['text':'*
     * Construct with either bit positions, a 64-bit numeric bitmask, or a char array
     * bitmask.
     ','line_number':881,'multiline':True]['text':'*
     * Performs bit test using bit positions on 'eValue' and returns whether or not the bit test
     * passes.
     ','line_number':947,'multiline':True]['text':'*
     * Performs bit test using bit positions on 'eBinary' with length (in bytes) 'eBinaryLen' and
     * returns whether or not the bit test passes.
     ','line_number':953,'multiline':True]['text':'*
     * Helper function for performBitTest(...).
     *
     * needFurtherBitTests() determines if the result of a bit-test ('isBitSet') is enough
     * information to skip the rest of the bit tests.
     *','line_number':959,'multiline':True]['text':' Vector of bit positions to test, with bit position 0 being the least significant bit.','line_number':967,'multiline':False]['text':' Used to perform bit tests against BinData.','line_number':968,'multiline':False]['text':' Used to perform bit tests against numbers using a single bitwise operation.','line_number':971,'multiline':False]['text':' When this expression is parameterized, we require two parameter markers, not one: a parameter','line_number':974,'multiline':False]['text':' marker for the vector of bit positions and a second for the bitmask. The runtime plan','line_number':975,'multiline':False]['text':' needs both values so that it can operate against either BinData or numerical inputs.','line_number':976,'multiline':False]['text':' namespace mongo','line_number':1160,'multiline':False]