['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Verify that the ComparisonMatchExpression constructor prohibits creating a match expression','line_number':75,'multiline':False]['text':' with an Undefined type.','line_number':76,'multiline':False]['text':' An unbounded range query does not match a subset of documents of a point query.','line_number':283,'multiline':False]['text':' Cannot be a subset if comparing different field names.','line_number':289,'multiline':False]['text':' TODO SERVER-24674: isSubsetOf should return true after exploring nested objects.','line_number':750,'multiline':False]['text':' This is a descriptive test to ensure that until renames are implemented for these expressions,','line_number':922,'multiline':False]['text':' matches on these expressions cannot be swapped with other stages.','line_number':923,'multiline':False]['text':' Category: kOther.','line_number':926,'multiline':False]['text':' Both of these should be true once renames are implemented.','line_number':938,'multiline':False]['text':' No overlap cases.','line_number':954,'multiline':False]['text':' Overlap cases','line_number':965,'multiline':False]['text':' No empty paths.','line_number':973,'multiline':False]['text':' Empty paths.','line_number':977,'multiline':False]['text':' Mixed.','line_number':985,'multiline':False]['text':' Assumes that this match expression follows {$project: {x: "$a.b"}} and the path 'x' is a','line_number':1208,'multiline':False]['text':' modified one.','line_number':1209,'multiline':False]['text':' Assumes that this match expression follows {$project: {x: {y: {"$a.b"}}}} and the path','line_number':1213,'multiline':False]['text':' 'x.y' is a modified one.','line_number':1214,'multiline':False]['text':' Assumes that this match expression follows {$project: {x: {y: {z: {"$a.b"}}}}} and the','line_number':1218,'multiline':False]['text':' path 'x.y.z' is a modified one.','line_number':1219,'multiline':False]['text':' The 'x' is a modified path by $project and the match expression is dependent on 'x' and','line_number':1230,'multiline':False]['text':' not splittable.','line_number':1231,'multiline':False]['text':' Assumes that this match expression follows {$project: {x: {$map: {input: "$a", as:','line_number':1243,'multiline':False]['text':' "iter", in: {y: "$$iter.b"}}}}}','line_number':1244,'multiline':False]['text':' The 'x' is a modified dependency by $project and the match expression is dependent on 'x' and','line_number':1252,'multiline':False]['text':' not splittable.','line_number':1253,'multiline':False]['text':' Assumes that this match expression follows {$project: {x: {$map: {input: "$a", as: "i", in:','line_number':1264,'multiline':False]['text':' {y: "$$i.b"}}}}}','line_number':1265,'multiline':False]['text':' Here empty 'fields' means that the previous stage is a simple rename. Due to the limitation','line_number':1273,'multiline':False]['text':' of the current renaming algorithm, 'x' and 'y' are not renamed into 'a' and 'b' respectively','line_number':1274,'multiline':False]['text':' which is classified as "attempted but failed to" rename. In such a case,','line_number':1275,'multiline':False]['text':' splitMatchExpressionBy() returns the original match expression as 'residualExpr'.','line_number':1276,'multiline':False]['text':'','line_number':1277,'multiline':False]['text':' TODO SERVER-74298 Implement renaming by each path component for sub-classes of','line_number':1278,'multiline':False]['text':' PathMatchExpression so that such match expressions can be split out.','line_number':1279,'multiline':False]['text':'fields','line_number':1281,'multiline':True]['text':'renames','line_number':1281,'multiline':True]['text':' Assumes that this match expression follows {$project: {x: {$map: {input: "$a", as: "i", in:','line_number':1292,'multiline':False]['text':' {y: "$$i.b"}}}}} which is a simple rename.','line_number':1293,'multiline':False]['text':' Here empty 'fields' means that the previous stage is a simple rename. Due to the limitation','line_number':1301,'multiline':False]['text':' of the current renaming algorithm, 'x' and 'y' are not renamed into 'a' and 'b' respectively','line_number':1302,'multiline':False]['text':' which is classified as "attempted but failed to" rename. In such a case,','line_number':1303,'multiline':False]['text':' splitMatchExpressionBy() returns the original match expression as 'residualExpr'.','line_number':1304,'multiline':False]['text':'','line_number':1305,'multiline':False]['text':' TODO SERVER-74298 Implement renaming by each path component for sub-classes of','line_number':1306,'multiline':False]['text':' PathMatchExpression so that such match expressions can be split out.','line_number':1307,'multiline':False]['text':'fields','line_number':1309,'multiline':True]['text':'renames','line_number':1309,'multiline':True]['text':' Assumes that this match expression follows {$project: {a: "$x"}}} which is a simple','line_number':1321,'multiline':False]['text':' rename.','line_number':1322,'multiline':False]['text':' Assumes that this match expression follows {$project: {a: {b: {"$x"}}}} which is a simple','line_number':1326,'multiline':False]['text':' rename.','line_number':1327,'multiline':False]['text':' Assumes that this match expression follows {$project: {a: {b: {c: {"$x"}}}}} which is a','line_number':1331,'multiline':False]['text':' simple rename.','line_number':1332,'multiline':False]['text':' Assumes that this match expression follows {$project: {x: "$a.b"}}.','line_number':1418,'multiline':False]['text':' The 'x' is a modified path by $project and the match expression is dependent on 'x' and not','line_number':1425,'multiline':False]['text':' splittable.','line_number':1426,'multiline':False]['text':' Designed to reproduce SERVER-32690.','line_number':1543,'multiline':False]['text':' We should not push down a $match with a $rand expression.','line_number':1575,'multiline':False]['text':' This is equivalent to 'randExpr'.','line_number':1578,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1598,'multiline':False]['text':' renamed to "meta".','line_number':1599,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1614,'multiline':False]['text':' renamed to "meta". The expression for the non-meta field "b" remains.','line_number':1615,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1629,'multiline':False]['text':' renamed to "meta". We have a residual expression too in this test case.','line_number':1630,'multiline':False]['text':' Verifies that $jsonSchema 'type' is supported by splitMatchExpressionBy().','line_number':1642,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1646,'multiline':False]['text':' renamed to "meta".','line_number':1647,'multiline':False]['text':' Verifies that $jsonSchema 'bsonType' is supported by splitMatchExpressionBy().','line_number':1668,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1672,'multiline':False]['text':' renamed to "meta".','line_number':1673,'multiline':False]['text':' Verifies that $jsonSchema 'enum' is supported by splitMatchExpressionBy().','line_number':1691,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1695,'multiline':False]['text':' renamed to "meta".','line_number':1696,'multiline':False]['text':' Verifies that $jsonSchema 'minimum' and 'maximum' are supported by splitMatchExpressionBy().','line_number':1717,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1722,'multiline':False]['text':' renamed to "meta".','line_number':1723,'multiline':False]['text':' Verifies that $jsonSchema 'minLength' and 'maxLength' are supported by splitMatchExpressionBy().','line_number':1759,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1764,'multiline':False]['text':' renamed to "meta".','line_number':1765,'multiline':False]['text':' Verifies that $jsonSchema 'multipleOf' is supported by splitMatchExpressionBy().','line_number':1801,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1805,'multiline':False]['text':' renamed to "meta".','line_number':1806,'multiline':False]['text':' Verifies that $jsonSchema 'pattern' is supported by splitMatchExpressionBy().','line_number':1834,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1841,'multiline':False]['text':' renamed to "meta".','line_number':1842,'multiline':False]['text':' 'splitOutExpr' must be same as the expression after renaming 'a' to 'meta'.','line_number':1847,'multiline':False]['text':' Verifies that $jsonSchema 'uniqueItems' is supported by splitMatchExpressionBy().','line_number':1857,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1861,'multiline':False]['text':' renamed to "meta".','line_number':1862,'multiline':False]['text':' Verifies that $jsonSchema 'minItems' and 'maxItems' is supported by splitMatchExpressionBy().','line_number':1890,'multiline':False]['text':' $jsonSchema expression will be split out by the meta field "a" and the meta field "a" will be','line_number':1895,'multiline':False]['text':' renamed to "meta".','line_number':1896,'multiline':False]['text':' Future work.','line_number':2139,'multiline':False]['text':' Would match missing values, not safe for a columnar index.','line_number':2147,'multiline':False]['text':' Future work.','line_number':2155,'multiline':False]['text':' Test equality predicates that are safe to split (in contrast to next test).','line_number':2163,'multiline':False]['text':' Comparison against Min- and MaxKey cannot be pushed down.','line_number':2229,'multiline':False]['text':' We should be able to do dotted path version though, as a potential workaround.','line_number':2298,'multiline':False]['text':' Tests that comparisons (like $lt and $gte) have the same splitting rules as equality.','line_number':2314,'multiline':False]['text':' While equality to [] or {} is OK, inequality is not so obvious. Left as future work.','line_number':2380,'multiline':False]['text':' Tests that comparisons which only match values of a certain type are allowed.','line_number':2432,'multiline':False]['text':' $in constraints are similar to equality. Most of them should work, exceptions broken out in the','line_number':2484,'multiline':False]['text':' next test.','line_number':2485,'multiline':False]['text':' We can't support compound types, just like for equality.','line_number':2574,'multiline':False]['text':' Don't care about the order of terms in AND.','line_number':2679,'multiline':False]['text':' Don't care about the order of terms in AND.','line_number':2708,'multiline':False]['text':' {$ne: null} is the same as {$not: {$eq: null}} and while it could be evaluated against','line_number':2749,'multiline':False]['text':' the index, because {$eq: null} isn't supported for push down, we don't push down its','line_number':2750,'multiline':False]['text':' negation either, but {$ne: 2} should be lowered.','line_number':2751,'multiline':False]['text':' $not on multiple paths should only be lowered if there are supported predicates on the','line_number':2760,'multiline':False]['text':' same path with them','line_number':2761,'multiline':False]['text':' Stress the path combination logic with some prefixes and suffixes to be sure.','line_number':2796,'multiline':False]['text':' Won't bother asserting on the details here - done above.','line_number':2835,'multiline':False]['text':' namespace mongo','line_number':2991,'multiline':False]