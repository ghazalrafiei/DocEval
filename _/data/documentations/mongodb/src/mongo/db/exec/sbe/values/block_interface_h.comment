['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Deblocked tags and values for a ValueBlock.
 *
 * Note: Deblocked values are read-only and must not be modified.
 ','line_number':43,'multiline':True]['text':' 'tags' and 'vals' point to an array of 'count' elements respectively.','line_number':49,'multiline':False]['text':'*
 * Tokens representing unique values in a block and indexes that represent the location of these
 * values in the original block.
 ','line_number':64,'multiline':True]['text':'*
 * Interface for accessing a sequence of SBE Values independent of their backing storage.
 *
 * Currently we only support getting all of the deblocked values via 'extract()' but PM-3168 will
 * extend the interface to allow for other operations to be applied which may run directly on the
 * underlying format or take advantage of precomputed summaries.
 *
 * In general no functions on a ValueBlock should be considered thread-safe, regardless of
 * constness.
 ','line_number':129,'multiline':True]['text':' When copy-constructing a ValueBlock, if o's deblocked storage is owned then we will copy it.','line_number':142,'multiline':False]['text':' If o's deblocked storage is not owned, then it's not permissible for this block to copy it','line_number':143,'multiline':False]['text':' (because the deblocked storage contains views of SBE values whose lifetimes are not managed','line_number':144,'multiline':False]['text':' this ValueBlock), so we ignore it.','line_number':145,'multiline':False]['text':'*
     * Returns the unowned deblocked values. The return value is only valid as long as the block
     * remains alive. The returned values must be dense, meaning that there are always same
     * number of values as the count() of this block. The 'DeblockedTagVals.count' must always be
     * equal to this block's count().
     ','line_number':157,'multiline':True]['text':'*
     * Returns a copy of this block.
     ','line_number':167,'multiline':True]['text':'*
     * Returns the number of values in this block in O(1) time, otherwise returns boost::none.
     ','line_number':172,'multiline':True]['text':'*
     * Returns the minimum value in the block in O(1) time, otherwise returns Nothing value.
     ','line_number':177,'multiline':True]['text':'*
     * Returns the maximum value in the block in O(1) time, otherwise returns Nothing value.
     ','line_number':184,'multiline':True]['text':'*
     * Returns true if every value in the block is guaranteed to be non-nothing, false otherwise. If
     * this can't be determined in O(1) time, return boost::none.
     ','line_number':191,'multiline':True]['text':'*
     * Allows the caller to cast this to a specific block type. Should only be used for SBE-native
     * block types (not types representing external storage).
     ','line_number':199,'multiline':True]['text':'*
 * A block that is a run of repeated values.
 ','line_number':222,'multiline':True]['text':' Always owned.','line_number':293,'multiline':False]['text':' To lazily extract the values, we need to remember the number of values which is supposed','line_number':297,'multiline':False]['text':' to exist in this block.','line_number':298,'multiline':False]['text':' All values are owned.','line_number':388,'multiline':False]['text':' True if all values are non-nothing.','line_number':392,'multiline':False]['text':' HomogeneousBlock's can only store shallow values so we don't need to call copyValue on each','line_number':402,'multiline':False]['text':' Value in o._vals.','line_number':403,'multiline':False]['text':' The !std::is_same<T,T> is always false and will trigger a compile failure if this','line_number':420,'multiline':False]['text':' branch is taken. If this branch is not taken, it will get discarded.','line_number':421,'multiline':False]['text':' The !std::is_same<T,T> is always false and will trigger a compile failure if this','line_number':431,'multiline':False]['text':' branch is taken. If this branch is not taken, it will get discarded.','line_number':432,'multiline':False]['text':' The constructor that takes in a vector of the corresponding C++ should be used in favor of','line_number':437,'multiline':False]['text':' vector of Value's constructor if possible.','line_number':438,'multiline':False]['text':' The !std::is_same<T,T> is always false and will trigger a compile failure if this','line_number':447,'multiline':False]['text':' branch is taken. If this branch is not taken, it will get discarded.','line_number':448,'multiline':False]['text':' getVector should be used in favor of this function if possible.','line_number':488,'multiline':False]['text':' Fast path for dense case.','line_number':494,'multiline':False]['text':' Present values are stored contiguously and missing values are stored in a separate','line_number':536,'multiline':False]['text':' bitset, with 1 indicating present and 0 indicating missing.','line_number':537,'multiline':False]['text':' namespace mongo::sbe::value','line_number':547,'multiline':False]