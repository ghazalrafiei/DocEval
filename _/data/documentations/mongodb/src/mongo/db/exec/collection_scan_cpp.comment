['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace','line_number':85,'multiline':False]['text':' Explain reports the direction of the collection scan.','line_number':98,'multiline':False]['text':' The 'minRecord' and 'maxRecord' parameters are used for a special optimization that','line_number':104,'multiline':False]['text':' applies only to forwards scans of the oplog and scans on clustered collections.','line_number':105,'multiline':False]['text':' A collection must be clustered if the bounds aren't both included by default.','line_number':116,'multiline':False]['text':' The filter is applied after the ScanBoundInclusion is considered.','line_number':123,'multiline':False]['text':' The 'resumeAfterRecordId' parameter is used for resumable collection scans, which we','line_number':150,'multiline':False]['text':' only support in the forward direction.','line_number':151,'multiline':False]['text':' Forward, non-tailable scans from the oplog need to wait until all oplog','line_number':182,'multiline':False]['text':' entries before the read begins to be visible. This isn't needed for reverse','line_number':183,'multiline':False]['text':' scans because we only hide oplog entries from forward scans, and it isn't','line_number':184,'multiline':False]['text':' necessary for tailing cursors because they ignore EOF and will eventually see','line_number':185,'multiline':False]['text':' all writes. Forward, non-tailable scans are the only case where a meaningful','line_number':186,'multiline':False]['text':' EOF will be seen that might not include writes that finished before the read','line_number':187,'multiline':False]['text':' started. This also must be done before we create the cursor as that is when','line_number':188,'multiline':False]['text':' we establish the endpoint for the cursor. Also call abandonSnapshot to make','line_number':189,'multiline':False]['text':' sure that we are using a fresh storage engine snapshot while waiting.','line_number':190,'multiline':False]['text':' Otherwise, we will end up reading from the snapshot where the oplog entries','line_number':191,'multiline':False]['text':' are not yet visible even after the wait.','line_number':192,'multiline':False]['text':' Seek to where we were last time. If it no longer exists, mark us as dead','line_number':203,'multiline':False]['text':' since we want to signal an error rather than silently dropping data from the','line_number':204,'multiline':False]['text':' stream.','line_number':205,'multiline':False]['text':'','line_number':206,'multiline':False]['text':' Note that we want to return the record *after* this one since we have already','line_number':207,'multiline':False]['text':' returned this one. This is possible in the tailing case. Notably, tailing is','line_number':208,'multiline':False]['text':' the only time we'd need to create a cursor after already getting a record out','line_number':209,'multiline':False]['text':' of it and updating our _lastSeenId.','line_number':210,'multiline':False]['text':' Seek to where we are trying to resume the scan from. Signal a KeyNotFound','line_number':222,'multiline':False]['text':' error if the record no longer exists or if the recordId is null.','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':' Note that we want to return the record *after* this one since we have already','line_number':225,'multiline':False]['text':' returned this one prior to the resume.','line_number':226,'multiline':False]['text':' Seek to the approximate start location.','line_number':241,'multiline':False]['text':' Seek to the approximate start location (at the end).','line_number':247,'multiline':False]['text':' yieldHandler','line_number':258,'multiline':False]['text':' Leave us in a state to try again next time.','line_number':259,'multiline':False]['text':' We hit EOF. If we are tailable and have already seen data, leave us in a state to pick up','line_number':270,'multiline':False]['text':' where we left off on the next call to work(). Otherwise, the EOF is permanent.','line_number':271,'multiline':False]['text':' For change collections, advance '_latestOplogEntryTimestamp' to the current snapshot','line_number':278,'multiline':False]['text':' timestamp, i.e. the latest available timestamp in the global oplog.','line_number':279,'multiline':False]['text':' Since this method is only ever called when iterating a change collection, the following check','line_number':305,'multiline':False]['text':' effectively disables optime advancement in Serverless, for reasons outlined in SERVER-76288.','line_number':306,'multiline':False]['text':' TODO SERVER-76309: re-enable optime advancement to support sharding in Serverless.','line_number':307,'multiline':False]['text':' If we don't have a read timestamp, we take no action here.','line_number':314,'multiline':False]['text':' Otherwise, verify that it is equal to or greater than the last recorded timestamp, and','line_number':319,'multiline':False]['text':' advance it accordingly.','line_number':320,'multiline':False]['text':' If the first entry we see in the oplog is the replset initialization, then it doesn't matter','line_number':348,'multiline':False]['text':' if its timestamp is later than the timestamp that should not have fallen off the oplog; no','line_number':349,'multiline':False]['text':' events earlier can have fallen off this oplog.','line_number':350,'multiline':False]['text':' NOTE: A change collection can be created at any moment as such it might not have replset','line_number':351,'multiline':False]['text':' initialization message, as such this case is not fully applicable for the change collection.','line_number':352,'multiline':False]['text':' Verify that the timestamp of the first observed oplog entry is earlier than or equal to','line_number':357,'multiline':False]['text':' timestamp that should not have fallen off the oplog.','line_number':358,'multiline':False]['text':' We don't need to check this assertion again after we've confirmed the first oplog event.','line_number':367,'multiline':False]['text':' Return a resume token compatible with resumable initial sync.','line_number':372,'multiline':False]['text':' Return a resume token compatible with resharding oplog sync.','line_number':386,'multiline':False]['text':' A forward scan ends with the maxRecord when it is specified.','line_number':409,'multiline':False]['text':' A backward scan ends with the minRecord when it is specified.','line_number':418,'multiline':False]['text':' A forward scan begins with the minRecord when it is specified.','line_number':431,'multiline':False]['text':' A backward scan begins with the maxRecord when specified.','line_number':440,'multiline':False]['text':' namespace','line_number':449,'multiline':False]['text':' The 'minRecord' and 'maxRecord' bounds are always inclusive, even if the query predicate is','line_number':456,'multiline':False]['text':' an exclusive inequality like $gt or $lt. In such cases, we rely on '_filter' to either','line_number':457,'multiline':False]['text':' exclude or include the endpoints as required by the user's query.','line_number':458,'multiline':False]['text':' For clustered collections, seekNear() is allowed to return a record prior to the','line_number':465,'multiline':False]['text':' requested minRecord for a forward scan or after the requested maxRecord for a reverse','line_number':466,'multiline':False]['text':' scan. Ensure that we do not return a record out of the requested range. Require that the','line_number':467,'multiline':False]['text':' caller advance our cursor until it is positioned within the correct range.','line_number':468,'multiline':False]['text':'','line_number':469,'multiline':False]['text':' In the future, we could change seekNear() to always return a record after minRecord in the','line_number':470,'multiline':False]['text':' direction of the scan. However, tailable scans depend on the current behavior in order to','line_number':471,'multiline':False]['text':' mark their position for resuming the tailable scan later on.','line_number':472,'multiline':False]['text':' If this collection scan serves a read operation on a capped collection, only restore the','line_number':505,'multiline':False]['text':' cursor if it can be repositioned exactly where it was, so that consumers don't silently','line_number':506,'multiline':False]['text':' get 'holes' when scanning capped collections. If this collection scan serves a write','line_number':507,'multiline':False]['text':' operation on a capped collection like a clustered TTL deletion, exempt this operation','line_number':508,'multiline':False]['text':' from the guarantees above.','line_number':509,'multiline':False]['text':' Add a BSON representation of the filter to the stats tree, if there is one.','line_number':538,'multiline':False]['text':' namespace mongo','line_number':552,'multiline':False]