['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'','line_number':61,'multiline':False]['text':' Manually construct some basic examples of columnar-encoded data.','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' Write 0 as an int32.','line_number':66,'multiline':False]['text':' Write 5000 as an int634 (represented in 2 bytes).','line_number':69,'multiline':False]['text':' Little-endian write.','line_number':71,'multiline':False]['text':' Write a strange message.','line_number':73,'multiline':False]['text':' includeEndingNull ','line_number':76,'multiline':True]['text':' Little-endian write.','line_number':80,'multiline':False]['text':'*
 * Exhaustively test columnar value conversion. The test begins with reference BSON values, which
 * get converted to
 *   1. columnar format, via the 'column_keygen::appendElementToCell' function;
 *   2. SBE value pairs, via a 'SplitCellView' iterator; and finally
 *   3. BSON, via the 'bson::appendValueToBsonObj' function.
 * The test expects the final BSON to exactly match the original BSON. The 'SplitCellView'
 * conversion step is the primary target for this test.
 ','line_number':130,'multiline':True]['text':'','line_number':140,'multiline':False]['text':' Set up the reference data.','line_number':141,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' Manually-counted length ','line_number':182,'multiline':True]['text':'','line_number':192,'multiline':False]['text':' Convert the values in 'referenceBson' to columnar format.','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' As an auxillary check, we use a checksum to verify that the columnar version of the reference','line_number':201,'multiline':False]['text':' data has the exact same bytes every time. The columnar format is stored on disk, so it should','line_number':202,'multiline':False]['text':' never change.','line_number':203,'multiline':False]['text':'','line_number':204,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' Create a 'SplitCellView' that will convert all of the columnar data into SBE value pairs.','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]['text':' We iterate through the reference values via two cursors: 'referenceIt' for the BSONElement','line_number':221,'multiline':False]['text':' reference values and 'cellCursor' for the same values that have been translated to SBE value','line_number':222,'multiline':False]['text':' representations.','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' This [tag, val] pair stores the value that was translated from columnar format.','line_number':237,'multiline':False]['text':' Convert the translated columnar format back to BSON.','line_number':241,'multiline':False]['text':' The result should be bit-for-bit the same as the original reference BSON.','line_number':246,'multiline':False]['text':'*
 * A cell encoded for a columnar index can contain embedded BSON elements. We construct all possible
 * types of BSON elements and append them to a test cell.
 ','line_number':252,'multiline':True]['text':'','line_number':257,'multiline':False]['text':' The test data consists of a reference BSON object that has each test element. Each of these','line_number':258,'multiline':False]['text':' elements has a corresponding check in the 'testComparisons' list. The comparisons are stored','line_number':259,'multiline':False]['text':' this way so that each check appears next to the BSONElement it will be testing.','line_number':260,'multiline':False]['text':'','line_number':261,'multiline':False]['text':' Manually counted length ','line_number':289,'multiline':True]['text':'','line_number':375,'multiline':False]['text':' Copy the test BSONElements into the simulated columnar cell.','line_number':376,'multiline':False]['text':'','line_number':377,'multiline':False]['text':'','line_number':386,'multiline':False]['text':' Test the 'ColumnStoreEncoder' by using it to iterate through the columnar values and','line_number':387,'multiline':False]['text':' validating the translated outputs their respective comparison functions.','line_number':388,'multiline':False]['text':'','line_number':389,'multiline':False]['text':' namespace mongo::sbe','line_number':403,'multiline':False]