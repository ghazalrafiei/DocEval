['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This class represents the metadata that the query execution engine can associate with a
 * particular intermediate result (either index key or document) passing between execution stages.
 *
 * Since most documents do not have metadata, this class can be left in an uninitialized state, in
 * which case no memory is allocated to hold the metadata. The operator bool() overload can be used
 * to determine whether or not a DocumentMetadataFields object is uninitialized (and thus has no
 * metadata).
 *
 * Calling any of the setters is legal on an uninitialized object, and will cause the
 * DocumentMetadataFields to transition to an initialized state.
 *
 * A DocumentMetadataFields is copy constructible, copy assignable, move constructible, and move
 * assignable.
 ','line_number':49,'multiline':True]['text':' Start from 1 so that these values can be stored in a bitset.','line_number':67,'multiline':False]['text':' New fields must be added before the kNumFields sentinel.','line_number':84,'multiline':False]['text':'*
     * Reads serialized metadata out of 'buf', and uses it to populate 'out'. Expects 'buf' to have
     * been written to by a previous call to serializeForSorter(). It is illegal to pass a null
     * pointer for 'out'.
     ','line_number':88,'multiline':True]['text':'*
     * Converts a Value representing an in-memory sort key to a BSONArray representing a serialized
     * sort key. If 'isSingleElementKey' is true, returns a BSONArray with 'value' as its only
     * element. Otherwise, converts 'value' (which is expected to be an Array) to a BSONArray. Any
     * Value elements whose value is "missing" get converted to BSONNull.
     ','line_number':95,'multiline':True]['text':'*
     * Converts a BSONObj representing a serialized sort key into a Value, which we use for
     * in-memory comparisons. BSONObj {'': 1, '': [2, 3]} becomes Value [1, [2, 3]].
     ','line_number':103,'multiline':True]['text':'*
     * Given a metadata type, return a (debug) string representation.
     ','line_number':109,'multiline':True]['text':'*
     * Constructs a new DocumentMetadataFields in an uninitialized state.
     ','line_number':114,'multiline':True]['text':'*
     * For all metadata fields that 'other' has but 'this' does not have, copies these fields from
     * 'other' to 'this'.
     ','line_number':125,'multiline':True]['text':'*
     * Copies all metadata fields that are present in 'other' from 'other' to 'this', overwriting
     * values already present in 'this'.
     *
     * This differs slightly from the copy assignment operator. Copy-assignment will cause 'this' to
     * equal 'other' exactly. This operation, on the other hand, leaves the metadata fields from
     * 'this' which are not present in 'other' unmodified.
     ','line_number':131,'multiline':True]['text':'*
     * Returns an estimate in bytes of the size of the underlying metadata, which is held at a
     * distance by this object. The size of this object is not incorporated in the estimate.
     ','line_number':141,'multiline':True]['text':'*
     * Returns true if this object is in an initialized state and may hold metadata.
     ','line_number':147,'multiline':True]['text':'*
     * Sets the 'modified' flag to the given value. Necessary for implementing a lazy load
     * optimization for the contained mutable 'DocumentMetadataFields' instance inside the
     * 'Document' class.
     ','line_number':379,'multiline':True]['text':' A simple data struct housing all possible metadata fields.','line_number':397,'multiline':False]['text':' True when the sort key corresponds to a single-element sort pattern, meaning that','line_number':401,'multiline':False]['text':' comparisons should treat the sort key value as a single element, even if it is an array.','line_number':402,'multiline':False]['text':' Only relevant when 'kSortKey' is set.','line_number':403,'multiline':False]['text':' Null until the first setter is called, at which point a MetadataHolder struct is allocated.','line_number':423,'multiline':False]['text':' This flag is set to true anytime a 'DocumentMetadataFields' instance is modified. It is used','line_number':426,'multiline':False]['text':' to optimize document conversion to BSON with metadata; i.e. if there are no modifications we','line_number':427,'multiline':False]['text':' can directly return the underlying BSON.','line_number':428,'multiline':False]['text':' Prints the metadata's name to the given stream.','line_number':434,'multiline':False]['text':' namespace mongo','line_number':437,'multiline':False]