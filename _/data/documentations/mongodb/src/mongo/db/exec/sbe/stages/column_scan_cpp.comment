['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' If this stage has not been prepared, then yield recovery is a no-op.','line_number':198,'multiline':False]['text':' We're being opened after 'close()'. We need to re-acquire '_coll' in this case and','line_number':281,'multiline':False]['text':' make some validity checks (the collection has not been dropped, renamed, etc.).','line_number':282,'multiline':False]['text':' forward ','line_number':290,'multiline':True]['text':' The dense _recordId column is only needed if there are no filters and no dense field is','line_number':308,'multiline':False]['text':' being scanned already for the query.','line_number':309,'multiline':False]['text':'includeInOutput','line_number':314,'multiline':True]['text':' If a top-level path doesn't exist, it just doesn't exist. It can't exist in some places','line_number':333,'multiline':False]['text':' within a document but not others. No further inspection is necessary.','line_number':334,'multiline':False]['text':' We've already read the parent in, so skip it.','line_number':340,'multiline':False]['text':' Create the parent path cursor if necessary.','line_number':344,'multiline':False]['text':' First we try to emplace a nullptr, so that we avoid creating the cursor when we don't have','line_number':346,'multiline':False]['text':' to.','line_number':347,'multiline':False]['text':' If we inserted a new entry, replace the null with an actual cursor.','line_number':350,'multiline':False]['text':' includeInOutput ','line_number':363,'multiline':True]['text':' We need this cell's parent too.','line_number':373,'multiline':False]['text':' The result of the filter predicate will be the same regardless of sparseness or sub objects,','line_number':383,'multiline':False]['text':' therefore we don't look at the parents and don't consult the row store. The filter expression for','line_number':384,'multiline':False]['text':' each path should incorporate cell traversal of the cell passed to it.','line_number':385,'multiline':False]['text':' Initialize 'targetRecordId' from the filtered cursor we are currently iterating.','line_number':398,'multiline':False]['text':' Have exhausted one of the columns.','line_number':403,'multiline':False]['text':' The loop will terminate because when 'matchedSinceAdvance' is reset the 'targetRecordId'','line_number':409,'multiline':False]['text':' is guaranteed to advance. It will do no more than N 'next()' calls across all cursors,','line_number':410,'multiline':False]['text':' where N is the number of records (might do fewer, if for some columns there are missing','line_number':411,'multiline':False]['text':' values). The number of seeks and filter checks depends on the selectivity of the filters.','line_number':412,'multiline':False]['text':' Avoid seeking into the column that we started with.','line_number':416,'multiline':False]['text':' The column skipped ahead - have to restart at this new record ID.','line_number':426,'multiline':False]['text':' Advance the column until find a match and restart at this new record ID.','line_number':432,'multiline':False]['text':' Ensure that _all_ cursors have caugth up with the filtered record ID. Some of the cursors','line_number':448,'multiline':False]['text':' might skip ahead, which would mean the column is missing a value for this 'recordId'.','line_number':449,'multiline':False]['text':' The cursor of the dense _recordId column cannot be ahead of any other (there are no','line_number':462,'multiline':False]['text':' filters on it to move it forward arbitrarily), so it's always at the minimum.','line_number':463,'multiline':False]['text':'*
 * When called for the first time, initializes all the column cursors to the beginning of their
 * respective columns. On subsequent calls, if path filters are present, forwards all cursors to
 * their next filter match. If no filters are present, cursors are stepped forward passed the
 * current _rowId, if necessary: there may be gaps in columns, putting one cursor far ahead of the
 * others in past cursor advancement.
 *
 * Returns the lowest RowId across cursors if there are no filtered paths; otherwise the RowId of
 * the current cursors' position where all filters match.
 ','line_number':481,'multiline':True]['text':' Nudge forward the "active" filtered cursor. The remaining ones will be synchronized','line_number':512,'multiline':False]['text':' by 'findNextRecordIdForFilteredColumns()'.','line_number':513,'multiline':False]['text':' no filtered paths ','line_number':518,'multiline':True]['text':' In absence of filters all cursors iterate forward on their own. Some of the cursors might','line_number':520,'multiline':False]['text':' be ahead of the current '_rowId' because there are gaps in their columns: don't move them,','line_number':521,'multiline':False]['text':' unless they are at '_rowId' and therefore their values have been consumed.','line_number':522,'multiline':False]['text':' While at it, compute the new min row ID.','line_number':523,'multiline':False]['text':' this column has been exhausted','line_number':539,'multiline':False]['text':' We are about to call next() on a storage cursor so do not bother saving our internal','line_number':557,'multiline':False]['text':' state in case it yields as the state will be completely overwritten after the next()','line_number':558,'multiline':False]['text':' call.','line_number':559,'multiline':False]['text':' When we are scanning the row store, we let the column cursors fall behind, so on exiting','line_number':576,'multiline':False]['text':' from the scan mode, they must be reset to the current _rowId, before they can advance to','line_number':577,'multiline':False]['text':' the next.','line_number':578,'multiline':False]['text':' reset ','line_number':579,'multiline':True]['text':' Attempt to reconstruct the object from the index. If we cannot do this, we'll fetch the','line_number':585,'multiline':False]['text':' corresponding record from the row store and will enter the row store scanning mode for','line_number':586,'multiline':False]['text':' the next few records.','line_number':587,'multiline':False]['text':' Must read in the parent information first.','line_number':615,'multiline':False]['text':' Enter the row store scanning mode for the next few reads.','line_number':629,'multiline':False]['text':' It's possible that we are reading a long range of records that cannot be served from','line_number':634,'multiline':False]['text':' the index. We could add more state tracking to keep scanning the row store even when','line_number':635,'multiline':False]['text':' doing the checkpoint at the end of a batch, but we don't think it's helpful because','line_number':636,'multiline':False]['text':' the hit of adjusting the column cursors and attempting to reconstruct the object is','line_number':637,'multiline':False]['text':' likely much bigger than seek() vs next() on the row store.','line_number':638,'multiline':False]['text':' If we're collecting execution stats during multi-planning and reached the end of the','line_number':660,'multiline':False]['text':' trial period because we've performed enough physical reads, bail out from the trial','line_number':661,'multiline':False]['text':' run by raising a special exception to signal a runtime planner that this candidate','line_number':662,'multiline':False]['text':' plan has completed its trial run early. Note that a trial period is executed only','line_number':663,'multiline':False]['text':' once per a PlanStage tree, and once completed never run again on the same tree.','line_number':664,'multiline':False]['text':' Print out paths.','line_number':762,'multiline':False]['text':' Print out output paths.','line_number':773,'multiline':False]['text':' Print out per-path filters.','line_number':789,'multiline':False]['text':' Print out rowStoreExpression as [rowStoreSlot, rowStoreExpression]','line_number':803,'multiline':False]['text':' namespace sbe','line_number':829,'multiline':False]['text':' namespace mongo','line_number':830,'multiline':False]