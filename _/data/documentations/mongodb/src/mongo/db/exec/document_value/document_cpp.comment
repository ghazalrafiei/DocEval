['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Assert that a given field path does not exceed the length limit.
 ','line_number':55,'multiline':True]['text':' The path continues "past" a scalar, and therefore does not exist.','line_number':86,'multiline':False]['text':' namespace','line_number':89,'multiline':False]['text':' First construct the ValueElement in the document storage.','line_number':118,'multiline':False]['text':' The storage may have reallocated memory so update out pointers.','line_number':121,'multiline':False]['text':' If we strip the metadata see if a field name matches the known list. All metadata fields','line_number':143,'multiline':False]['text':' start with '$' so optimize for a quick bailout.','line_number':144,'multiline':False]['text':' Check if the field is in the cache and if so then check if it has been deleted (i.e. the','line_number':149,'multiline':False]['text':' val.missing() is true).','line_number':150,'multiline':False]['text':' We have found the value in the BSON so it was not in fact inserted.','line_number':154,'multiline':False]['text':' This is subtle. The field is coming from the underlying BSON but it is not in the','line_number':161,'multiline':False]['text':' cache. We set the _it pointer to nullptr here so if anybody asks for its value (by','line_number':162,'multiline':False]['text':' dereferencing the iterator) the get() method will call constructInCache().','line_number':163,'multiline':False]['text':' We don't want to construct the object here as in many cases caller simply loop over','line_number':164,'multiline':False]['text':' the iterator without dereferencing.','line_number':165,'multiline':False]['text':' get size calculation out of the way if needed','line_number':179,'multiline':False]['text':' hash lookup','line_number':181,'multiline':False]['text':' possible collision','line_number':192,'multiline':False]['text':' linear scan','line_number':195,'multiline':False]['text':' if we got here, there's no such field','line_number':203,'multiline':False]['text':' if we got here, there's no such field','line_number':221,'multiline':False]['text':' This is the only place in the code that we bring a field from the backing BSON into the','line_number':233,'multiline':False]['text':' cache. From this point out, we will not use the backing BSON for this element. Hence,','line_number':234,'multiline':False]['text':' we account for using these many bytes of the backing BSON to be handled in the cache.','line_number':235,'multiline':False]['text':' these are the same for everyone','line_number':248,'multiline':False]['text':' Make room for new field (and padding at end for alignment)','line_number':252,'multiline':False]['text':' Append structure of a ValueElement','line_number':258,'multiline':False]['text':' must be after alloc since it changes _cache','line_number':259,'multiline':False]['text':' Padding for alignment handled above','line_number':268,'multiline':False]['text':' Make sure next field starts where we expect it','line_number':271,'multiline':False]['text':' adds all fields to hash table (including the one we just added)','line_number':279,'multiline':False]['text':' Call after adding field to _fields and increasing _numFields','line_number':288,'multiline':False]['text':' collision: walk links and add new to end','line_number':298,'multiline':False]['text':' make new bucket count big enough','line_number':309,'multiline':False]['text':' only allocate power-of-two sized space > 128 bytes','line_number':313,'multiline':False]['text':' This just copies the elements','line_number':325,'multiline':False]['text':' if we were hashing, deal with the hash table','line_number':329,'multiline':False]['text':' no rehash needed so just slide table down to new position','line_number':333,'multiline':False]['text':' Using expectedFields+1 to allow space for long field names','line_number':348,'multiline':False]['text':' Make a copy of the buffer with the fields.','line_number':362,'multiline':False]['text':' It is very important that the positions of each field are the same after cloning.','line_number':363,'multiline':False]['text':' Tell values that they have been memcpyed (updates ref counts)','line_number':375,'multiline':False]['text':' If we don't have a buffer, these fields should still be in their initial state.','line_number':380,'multiline':False]['text':' explicit destructor call','line_number':401,'multiline':False]['text':' Clean cache.','line_number':412,'multiline':False]['text':' explicit destructor call','line_number':414,'multiline':False]['text':' Clean metadata.','line_number':422,'multiline':False]['text':' Iterate raw bson if possible. This avoids caching all of the values in a doc that might get','line_number':429,'multiline':False]['text':' thrown away.','line_number':430,'multiline':False]['text':' If the sort key has exactly one field, we say it is a "single element key."','line_number':468,'multiline':False]['text':' The path extends beyond a scalar, so it does not exist.','line_number':702,'multiline':False]['text':' If the storage is the same (shared between the documents) then the documents must be','line_number':766,'multiline':False]['text':' equal.','line_number':767,'multiline':False]['text':' documents are the same length','line_number':776,'multiline':False]['text':' left document is shorter','line_number':778,'multiline':False]['text':' right document is shorter','line_number':782,'multiline':False]['text':' For compatibility with BSONObj::woCompare() consider the canonical type of values','line_number':787,'multiline':False]['text':' before considerting their names.','line_number':788,'multiline':False]['text':' field names are unequal','line_number':798,'multiline':False]['text':' fields are unequal','line_number':802,'multiline':False]['text':'NUL byte','line_number':830,'multiline':True]['text':' namespace mongo','line_number':849,'multiline':False]