['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This stage outputs its mainChild, and possibly it's backup child
 * and also updates the cache.
 *
 * Preconditions: Valid RecordId.
 *
 * Owns the query solutions and PlanStage roots for all candidate plans.
 ','line_number':58,'multiline':True]['text':'*
     * Takes no ownership.
     *
     * If 'shouldCache' is true, writes a cache entry for the winning plan to the plan cache
     * when possible. If 'shouldCache' is false, the plan cache will never be written.
     ','line_number':68,'multiline':True]['text':'*
     * Adds a new candidate plan to be considered for selection by the MultiPlanStage trial period.
     ','line_number':93,'multiline':True]['text':'*
     * Runs all plans added by addPlan, ranks them, and picks a best.
     * All further calls to work(...) will return results from the best plan.
     *
     * If 'yieldPolicy' is non-NULL, then all locks may be yielded in between round-robin
     * works of the candidate plans. By default, 'yieldPolicy' is NULL and no yielding will
     * take place.
     *
     * Returns a non-OK status if query planning fails. In particular, this function returns
     * ErrorCodes::QueryPlanKilled if the query plan was killed during a yield.
     ','line_number':100,'multiline':True]['text':'* Return true if a best plan has been chosen  ','line_number':113,'multiline':True]['text':'* Return the index of the best plan chosen, or boost::none if there is no such plan. ','line_number':116,'multiline':True]['text':'*
     * Returns the QuerySolution for the best plan, or NULL if no best plan.
     *
     * The MultiPlanStage retains ownership of the winning QuerySolution and returns an
     * unowned pointer.
     ','line_number':119,'multiline':True]['text':'*
     * Returns the QuerySolution for the best plan, or NULL if no best plan.
     *
     * The MultiPlanStage does not retain ownership of the winning QuerySolution and returns
     * a unique pointer.
     ','line_number':127,'multiline':True]['text':'*
     * Returns true if a backup plan was picked.
     * This is the case when the best plan has a blocking stage.
     * Exposed for testing.
     ','line_number':135,'multiline':True]['text':'','line_number':142,'multiline':False]['text':' Used by explain.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':'','line_number':154,'multiline':False]['text':' Have all our candidate plans do something.','line_number':155,'multiline':False]['text':' If all our candidate plans fail, *objOut will contain','line_number':156,'multiline':False]['text':' information on the failure.','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':'*
     * Calls work on each child plan in a round-robin fashion. We stop when any plan hits EOF
     * or returns 'numResults' results.
     *
     * Returns true if we need to keep working the plans and false otherwise.
     ','line_number':160,'multiline':True]['text':'*
     * Checks whether we need to perform either a timing-based yield or a yield for a document
     * fetch. If so, then uses 'yieldPolicy' to actually perform the yield.
     *
     * Throws an exception if yield recovery fails.
     ','line_number':168,'multiline':True]['text':'*
     * Deletes all children, except for best and backup plans.
     *
     * This is necessary to release any resources that rejected plans might have.
     * For example, if multi-update can be done by scanning several indexes,
     * it will be slowed down by rejected index scans because of index cursors
     * that need to be reopeneed after every update.
     ','line_number':176,'multiline':True]['text':' Describes the cases in which we should write an entry for the winning plan to the plan cache.','line_number':191,'multiline':False]['text':' The query that we're trying to figure out the best solution to.','line_number':194,'multiline':False]['text':' not owned here','line_number':195,'multiline':False]['text':' Candidate plans. Each candidate includes a child PlanStage tree and QuerySolution. Ownership','line_number':198,'multiline':False]['text':' of all QuerySolutions is retained here, and will *not* be tranferred to the PlanExecutor that','line_number':199,'multiline':False]['text':' wraps this stage. Ownership of the PlanStages will be in PlanStage::_children which maps','line_number':200,'multiline':False]['text':' one-to-one with _candidates.','line_number':201,'multiline':False]['text':' Rejected plans in saved and detached state.','line_number':204,'multiline':False]['text':' index into _candidates, of the winner of the plan competition','line_number':207,'multiline':False]['text':' uses -1 / kNoSuchPlan when best plan is not (yet) known','line_number':208,'multiline':False]['text':' index into _candidates, of the backup plan for sort','line_number':211,'multiline':False]['text':' uses -1 / kNoSuchPlan when best plan is not (yet) known','line_number':212,'multiline':False]['text':' Count of the number of candidate plans that have failed during the trial period. The','line_number':215,'multiline':False]['text':' multi-planner swallows resource exhaustion errors (QueryExceededMemoryLimitNoDiskUseAllowed).','line_number':216,'multiline':False]['text':' This means that if one candidate involves a blocking sort, and the other does not, the entire','line_number':217,'multiline':False]['text':' query will not fail if the blocking sort hits the limit on its allowed memory footprint.','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':' Arbitrary error codes are not swallowed by the multi-planner, since it is not know whether it','line_number':220,'multiline':False]['text':' is safe for the query to continue executing.','line_number':221,'multiline':False]['text':' Stats','line_number':224,'multiline':False]['text':' namespace mongo','line_number':228,'multiline':False]