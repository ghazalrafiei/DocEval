['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Merges the outputs of N branches, each of which is sorted. The output is also sorted.
 *
 * Each branch has a pointer to a "stream" which must implement a getNext() method like so:
 *
 * class MyStream {
 * public:
 *     PlanState getNext() { ... }
 * };
 *
 * A stream may be a PlanStage but it does not have to be.
 ','line_number':37,'multiline':True]['text':' This branch was removed in the last call to getNext() on the stage.','line_number':84,'multiline':False]['text':' Guaranteed not to be not null.','line_number':117,'multiline':False]['text':' Switched output.','line_number':131,'multiline':False]['text':' Branches are owned here.','line_number':134,'multiline':False]['text':' Heap for maintaining order.','line_number':137,'multiline':False]['text':' Indicates the last branch which we popped from. At the beginning of a getNext() call, this','line_number':140,'multiline':False]['text':' branch will _not_ be in the heap and must be reinserted. This is done to avoid calling','line_number':141,'multiline':False]['text':' getNext() on the branch whose value is being returned, which would require an extra copy of','line_number':142,'multiline':False]['text':' the output value.','line_number':143,'multiline':False]['text':' Because this comparator is used with std::priority_queue, which is a max heap,','line_number':150,'multiline':False]['text':' return _true_ when left > right.','line_number':151,'multiline':False]['text':' namespace mongo::sbe','line_number':174,'multiline':False]