['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This file contains tests for mongo/db/exec/sort.cpp
 ','line_number':30,'multiline':True]['text':'*
     * Test function to verify sort stage. SortStageDefault will be initialized using 'patternStr',
     * 'collator', and 'limit;.
     *
     * 'inputStr' represents the input data set in a BSONObj.
     *     {input: [doc1, doc2, doc3, ...]}
     *
     * 'expectedStr; represents the expected sorted data set.
     *     {output: [docA, docB, docC, ...]}
     ','line_number':83,'multiline':True]['text':' WorkingSet is not owned by stages','line_number':98,'multiline':False]['text':' so it's fine to declare','line_number':99,'multiline':False]['text':' QueuedDataStage will be owned by SortStageDefault.','line_number':105,'multiline':False]['text':' Insert obj from input array into working set.','line_number':116,'multiline':False]['text':' addSortKeyMetadata','line_number':134,'multiline':False]['text':' Keep working sort stage until data is available.','line_number':140,'multiline':False]['text':' QueuedDataStage's state should be EOF when sort is ready to advance.','line_number':145,'multiline':False]['text':' While there's data to be retrieved, state should be equal to ADVANCED.','line_number':148,'multiline':False]['text':' Insert documents into BSON document in this format:','line_number':149,'multiline':False]['text':'     {output: [docA, docB, docC, ...]}','line_number':150,'multiline':False]['text':' Sort stage should be EOF after data is retrieved.','line_number':162,'multiline':False]['text':' Finally, we get to compare the sorted results against what we expect.','line_number':166,'multiline':False]['text':' Even though we have the original string representation of the expected output,','line_number':170,'multiline':False]['text':' we invoke BSONObj::toString() to get a format consistent with outputObj.','line_number':171,'multiline':False]['text':' QueuedDataStage will be owned by SortStageDefault.','line_number':189,'multiline':False]['text':' addSortKeyMetadata','line_number':199,'multiline':False]['text':' Check initial EOF state.','line_number':202,'multiline':False]['text':' First call to work() sorts data in vector.','line_number':205,'multiline':False]['text':' Finally we hit EOF.','line_number':210,'multiline':False]['text':'','line_number':217,'multiline':False]['text':' Limit values','line_number':218,'multiline':False]['text':' The server interprets limit values from the user as follows:','line_number':219,'multiline':False]['text':'     0: no limit on query results. This is passed along unchanged to the sort stage.','line_number':220,'multiline':False]['text':'     >0: soft limit. Also unchanged in sort stage.','line_number':221,'multiline':False]['text':'     <0: hard limit. Absolute value is stored in parsed query and passed to sort stage.','line_number':222,'multiline':False]['text':' The sort stage treats both soft and hard limits in the same manner','line_number':223,'multiline':False]['text':'','line_number':225,'multiline':False]['text':' Sort without limit','line_number':226,'multiline':False]['text':' Implementation should keep all items fetched from child.','line_number':227,'multiline':False]['text':'','line_number':228,'multiline':False]['text':'','line_number':254,'multiline':False]['text':' Sorting with limit > 1','line_number':255,'multiline':False]['text':' Implementation should retain top N items','line_number':256,'multiline':False]['text':' and discard the rest.','line_number':257,'multiline':False]['text':'','line_number':258,'multiline':False]['text':'','line_number':270,'multiline':False]['text':' Sorting with limit > size of data set','line_number':271,'multiline':False]['text':' Implementation should retain top N items','line_number':272,'multiline':False]['text':' and discard the rest.','line_number':273,'multiline':False]['text':'','line_number':274,'multiline':False]['text':'','line_number':292,'multiline':False]['text':' Sorting with limit 1','line_number':293,'multiline':False]['text':' Implementation should optimize this into a running maximum.','line_number':294,'multiline':False]['text':'','line_number':295,'multiline':False]['text':' namespace','line_number':322,'multiline':False]