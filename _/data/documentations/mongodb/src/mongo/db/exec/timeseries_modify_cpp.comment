['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' These three properties are only used for the queryPlanner explain and will not change while','line_number':114,'multiline':False]['text':' executing this stage.','line_number':115,'multiline':False]['text':' Finishes tracking the newly inserted buckets in the main bucket catalog as direct','line_number':148,'multiline':False]['text':' writes when the whole update operation is done.','line_number':149,'multiline':False]['text':' Merges the execution stats of the side bucket catalog to the main one.','line_number':155,'multiline':False]['text':' If we have matched any records and this is a singleton write, we can return as long as we','line_number':163,'multiline':False]['text':' don't have a bucket to retry.','line_number':164,'multiline':False]['text':' Determine which documents to update based on which ones are actually being changed.','line_number':223,'multiline':False]['text':' Timeseries updates are never in place, because we execute them as a delete of the old','line_number':227,'multiline':False]['text':' measurement plus an insert of the modified one.','line_number':228,'multiline':False]['text':' We want to block shard key updates if the user requested an update directly to a shard,','line_number':231,'multiline':False]['text':' when shard key fields should be immutable.','line_number':232,'multiline':False]['text':' If there was a matched field, obtain it.','line_number':247,'multiline':False]['text':' We have to re-apply the filter to get the matched element.','line_number':251,'multiline':False]['text':' The document wasn't modified, write it back to the original bucket unchanged.','line_number':270,'multiline':False]['text':' We do not allow modifying either the current shard key value or new shard key value (if','line_number':281,'multiline':False]['text':' resharding) without specifying the full current shard key in the query.','line_number':282,'multiline':False]['text':' If the query is a simple equality match on _id, then '_params.canonicalQuery' will be null.','line_number':283,'multiline':False]['text':' But if we are here, we already know that the shard key is not _id, since we have an assertion','line_number':284,'multiline':False]['text':' earlier for requests that try to modify the immutable _id field. So it is safe to uassert if','line_number':285,'multiline':False]['text':' '_params.canonicalQuery' is null OR if the query does not include equality matches on all','line_number':286,'multiline':False]['text':' shard key fields.','line_number':287,'multiline':False]['text':' We do not allow updates to the shard key when 'multi' is true.','line_number':290,'multiline':False]['text':' With the introduction of PM-1632, we allow updating a document shard key without providing a','line_number':295,'multiline':False]['text':' full shard key if the update is executed in a retryable write or transaction. PM-1632 uses an','line_number':296,'multiline':False]['text':' internal transaction to execute these updates, so to make sure that we can only update the','line_number':297,'multiline':False]['text':' document shard key in a retryable write or transaction, mongos only sets','line_number':298,'multiline':False]['text':' $_allowShardKeyUpdatesWithoutFullShardKeyInQuery to true if the client executed write was a','line_number':299,'multiline':False]['text':' retryable write or in a transaction.','line_number':300,'multiline':False]['text':' If this node is a replica set primary node, an attempted update to the shard key value','line_number':309,'multiline':False]['text':' must either be a retryable write or inside a transaction. An update without a transaction','line_number':310,'multiline':False]['text':' number is legal if gFeatureFlagUpdateDocumentShardKeyUsingTransactionApi is enabled','line_number':311,'multiline':False]['text':' because mongos will be able to start an internal transaction to handle the','line_number':312,'multiline':False]['text':' wouldChangeOwningShard error thrown below. If this node is a replica set secondary node,','line_number':313,'multiline':False]['text':' we can skip validation.','line_number':314,'multiline':False]['text':' If this node is a replica set primary node, an attempted update to the shard key value','line_number':334,'multiline':False]['text':' must either be a retryable write or inside a transaction. An update without a transaction','line_number':335,'multiline':False]['text':' number is legal if gFeatureFlagUpdateDocumentShardKeyUsingTransactionApi is enabled','line_number':336,'multiline':False]['text':' because mongos will be able to start an internal transaction to handle the','line_number':337,'multiline':False]['text':' wouldChangeOwningShard error thrown below. If this node is a replica set secondary node,','line_number':338,'multiline':False]['text':' we can skip validation.','line_number':339,'multiline':False]['text':' If the shard key fields remain unchanged by this update we can skip the rest of the checks.','line_number':361,'multiline':False]['text':' Using BSONObj::binaryEqual() still allows a missing shard key field to be filled in with an','line_number':362,'multiline':False]['text':' explicit null value.','line_number':363,'multiline':False]['text':' Assert that the updated doc has no arrays or array descendants for the shard key fields.','line_number':370,'multiline':False]['text':' At this point we already asserted that the complete shardKey have been specified in the','line_number':375,'multiline':False]['text':' query, this implies that mongos is not doing a broadcast update and that it attached a','line_number':376,'multiline':False]['text':' shardVersion to the command. Thus it is safe to call getOwnershipFilter','line_number':377,'multiline':False]['text':' If the shard key of an orphan document is allowed to change, and the document is allowed to','line_number':381,'multiline':False]['text':' become owned by the shard, the global uniqueness assumption for _id values would be violated.','line_number':382,'multiline':False]['text':' We send the 'oldMeasurement' instead of the old bucket document to leverage timeseries','line_number':386,'multiline':False]['text':' deleteOne because the delete can run inside an internal transaction.','line_number':387,'multiline':False]['text':' We send the 'oldMeasurement' instead of the old bucket document to leverage timeseries','line_number':424,'multiline':False]['text':' deleteOne because the delete can run inside an internal transaction.','line_number':425,'multiline':False]['text':' It is possible that both the existing and new shard keys are being updated, so we do not want','line_number':446,'multiline':False]['text':' to short-circuit checking whether either is being modified.','line_number':447,'multiline':False]['text':' No measurements needed to be updated or deleted from the bucket document.','line_number':461,'multiline':False]['text':' If this is a delete, we will be deleting all matched measurements. If this is an update, we','line_number':468,'multiline':False]['text':' may not need to modify all measurements, since some may be no-op updates.','line_number':469,'multiline':False]['text':' Checks for shard key value changes. We will fail the command if it's a multi-update, so only','line_number':473,'multiline':False]['text':' performing the check needed for a single-update.','line_number':474,'multiline':False]['text':' If asked to return the old or new measurement and the write was successful, we should','line_number':487,'multiline':False]['text':' save the measurement so that we can return it later.','line_number':488,'multiline':False]['text':' If we are returning the new measurement, then we must have modified at least one','line_number':493,'multiline':False]['text':' measurement. If we did not, then we should return the old measurement instead.','line_number':494,'multiline':False]['text':' After applying the updates, no measurements needed to be updated in the bucket document. This','line_number':503,'multiline':False]['text':' case is still considered a successful write.','line_number':504,'multiline':False]['text':' We don't actually write anything if we are in explain mode but we still need to update the','line_number':509,'multiline':False]['text':' stats and let the caller think as if the write succeeded if there's any modified measurement.','line_number':510,'multiline':False]['text':' yieldHandler','line_number':524,'multiline':False]['text':' We need to retry the bucket, so we should not free the current bucket.','line_number':525,'multiline':False]['text':' yieldHandler','line_number':560,'multiline':False]['text':' We need to retry the bucket, so we should not free the current bucket.','line_number':561,'multiline':False]['text':' If the placement version is IGNORED and we encountered a critical section, then','line_number':571,'multiline':False]['text':' yield, wait for the critical section to finish and then we'll resume the write','line_number':572,'multiline':False]['text':' from the point we had left. We do this to prevent large multi-writes from','line_number':573,'multiline':False]['text':' repeatedly failing due to StaleConfig and exhausting the mongos retry attempts.','line_number':574,'multiline':False]['text':' We need to retry the bucket, so we should not free the current bucket.','line_number':576,'multiline':False]['text':' As restoreState may restore (recreate) cursors, cursors are tied to the transaction in which','line_number':585,'multiline':False]['text':' they are created, and a WriteUnitOfWork is a transaction, make sure to restore the state','line_number':586,'multiline':False]['text':' outside of the WriteUnitOfWork.','line_number':587,'multiline':False]['text':' yieldHandler','line_number':595,'multiline':False]['text':' Note we don't need to retry anything in this case since the write already was committed.','line_number':596,'multiline':False]['text':' However, we still need to return the affected measurement (if it was requested). We don't','line_number':597,'multiline':False]['text':' need to rely on the storage engine to return the affected document since we already have','line_number':598,'multiline':False]['text':' it in memory.','line_number':599,'multiline':False]['text':' noop ','line_number':600,'multiline':True]['text':' If this stage is already exhausted it won't use its children stages anymore and therefore','line_number':604,'multiline':False]['text':' it's okay if we failed to restore them. Avoid requesting a yield to the plan executor.','line_number':605,'multiline':False]['text':' Restoring from yield could fail due to a sharding placement change. Throwing a','line_number':606,'multiline':False]['text':' StaleConfig error is undesirable after an "update one" operation has already performed a','line_number':607,'multiline':False]['text':' write because the router would retry.','line_number':608,'multiline':False]['text':'','line_number':609,'multiline':False]['text':' If this plan is part of a larger encompassing WUOW it would be illegal to skip returning','line_number':610,'multiline':False]['text':' NEED_YIELD, so we don't skip it. In this case, such as multi-doc transactions, this is','line_number':611,'multiline':False]['text':' okay as the PlanExecutor is not allowed to auto-yield.','line_number':612,'multiline':False]['text':' If we are in explain mode, we do not need to check if the bucket is orphaned since we're not','line_number':623,'multiline':False]['text':' writing to bucket. If we are migrating a bucket, we also do not need to check if the bucket','line_number':624,'multiline':False]['text':' is not writable and just return it.','line_number':625,'multiline':False]['text':' Retry the write if we're in the sharding','line_number':635,'multiline':False]['text':' critical section.','line_number':636,'multiline':False]['text':' We may not have an up-to-date bucket for this RecordId. Fetch it and ensure that it still','line_number':653,'multiline':False]['text':' exists and matches our bucket-level predicate if it is not believed to be up-to-date.','line_number':654,'multiline':False]['text':' yieldHandler','line_number':666,'multiline':False]['text':' There was a problem trying to detect if the document still exists, so retry.','line_number':667,'multiline':False]['text':' The measurement does not have record id.','line_number':694,'multiline':False]['text':' We want to free this member when we return because we either have an owned copy of the bucket','line_number':718,'multiline':False]['text':' for normal write and write to orphan cases, or we skip the bucket.','line_number':719,'multiline':False]['text':' Determine if we are writing to an orphaned bucket - such writes should be excluded from','line_number':725,'multiline':False]['text':' user-visible change stream events. This will be achieved later by setting 'fromMigrate' flag','line_number':726,'multiline':False]['text':' when calling performAtomicWrites().','line_number':727,'multiline':False]['text':' Unpack the bucket and determine which measurements match the residual predicate.','line_number':737,'multiline':False]['text':' Closed buckets should have been filtered out by the bucket predicate.','line_number':740,'multiline':False]['text':' We should stop matching measurements once we hit the limit of one in the non-multi case.','line_number':749,'multiline':False]['text':' If the write was successful and if asked to return the old or new measurement, then','line_number':773,'multiline':False]['text':' 'measurementToReturn' must have been filled out and we can return it immediately.','line_number':774,'multiline':False]['text':' namespace mongo','line_number':802,'multiline':False]