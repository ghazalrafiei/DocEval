['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/container/detail/std_fwd.hpp"','line_number':35,'multiline':False]['text':' IWYU pragma: no_include "boost/predef/hardware/simd/x86.h"','line_number':36,'multiline':False]['text':' IWYU pragma: no_include "boost/predef/hardware/simd/x86/versions.h"','line_number':37,'multiline':False]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':38,'multiline':False]['text':' IWYU pragma: no_include "emmintrin.h"','line_number':39,'multiline':False]['text':' IWYU pragma: keep','line_number':60,'multiline':False]['text':'*
 * Forward declarations.
 ','line_number':81,'multiline':True]['text':' namespace KeyString','line_number':88,'multiline':False]['text':'*
 * Trivially copyable variation on a tuple theme. This allow us to return tuples through registers.
 ','line_number':99,'multiline':True]['text':'*
 * Type dispatch tags.
 *
 * There are two kinds of SBE types: native types and extended types. In the enum below, native
 * types are listed first followed by extended types, with 'EndOfNativeTypeTags' marking the
 * boundary between the two.
 *
 * The 'sbe_values' module take a link-time dependency on the implementations for native types but
 * not for extended types.
 *
 * Extended types cannot be used with value::compareValue() or value::hashValue(). Also, for any
 * SBE type 'tag', if 'value::tagToType(tag) != EOO' is true then 'tag' must be a native type.
 * Likewise, if 'tag' is an extended type then 'value::tagToType(tag) == EOO' must be true.
 ','line_number':132,'multiline':True]['text':' The value does not exist, aka Nothing in the Maybe monad.','line_number':147,'multiline':False]['text':' Numerical data types.','line_number':150,'multiline':False]['text':' Date data types.','line_number':155,'multiline':False]['text':' Pointer to sort key component vector. This type is always owned within a SortSpec,','line_number':166,'multiline':False]['text':' and is never created, copied, or destroyed by SBE.','line_number':167,'multiline':False]['text':' Pointer to a struct with data necessary to read values from a columnstore index cell. The','line_number':170,'multiline':False]['text':' values of this type are fully owned by the column_scan stage and are never created, cloned or','line_number':171,'multiline':False]['text':' destroyed by SBE.','line_number':172,'multiline':False]['text':' Special marker','line_number':175,'multiline':False]['text':' Heap values','line_number':178,'multiline':False]['text':' Raw bson values.','line_number':190,'multiline':False]['text':' The bson prefix signifies the fact that this type can only come from BSON (either from disk','line_number':197,'multiline':False]['text':' or from user over the wire). It is never created or manipulated by SBE.','line_number':198,'multiline':False]['text':' Local lambda value','line_number':205,'multiline':False]['text':' key_string::Value','line_number':208,'multiline':False]['text':' Pointer to a timezone database object.','line_number':211,'multiline':False]['text':' Pointer to a timezone object','line_number':214,'multiline':False]['text':' Pointer to a collator interface object.','line_number':217,'multiline':False]['text':' Pointer to a ValueBlock object.','line_number':220,'multiline':False]['text':' Pointer to a CellBlock object.','line_number':223,'multiline':False]['text':' Special marker','line_number':226,'multiline':False]['text':' Pointer to a compiled PCRE regular expression object.','line_number':229,'multiline':False]['text':' Pointer to a compiled JS function with scope.','line_number':232,'multiline':False]['text':' Pointer to a ShardFilterer for shard filtering.','line_number':235,'multiline':False]['text':' Pointer to an fts::FTSMatcher object for full text search.','line_number':238,'multiline':False]['text':' Pointer to a SortSpec object.','line_number':241,'multiline':False]['text':' Pointer to a MakeObjSpec object.','line_number':244,'multiline':False]['text':' Pointer to an IndexBounds object.','line_number':247,'multiline':False]['text':' Pointer to an InListData object.','line_number':250,'multiline':False]['text':' Special marker, must be last.','line_number':253,'multiline':False]['text':'*
 * This function takes an SBE TypeTag, looks up the corresponding BSONType t, and then returns a
 * bitmask representation of a set of BSONTypes that contains only BSONType t.
 *
 * For details on how sets of BSONTypes are represented as bitmasks, see mongo::getBSONTypeMask().
 ','line_number':322,'multiline':True]['text':'*
 * The runtime value. It is a simple 64 bit integer.
 ','line_number':333,'multiline':True]['text':'*
 * Sort direction of ordered sequence.
 ','line_number':338,'multiline':True]['text':'*
 * Forward declarations.
 ','line_number':343,'multiline':True]['text':'*
 * Releases memory allocated for the value. If the value does not have any memory allocated for it,
 * does nothing.
 *
 * NOTE: This function is intentionally marked as 'noexcept' and must not throw. It is used in the
 *       destructors of several classes to implement RAII concept for values.
 ','line_number':347,'multiline':True]['text':' No action is needed to release "shallow" values.','line_number':364,'multiline':False]['text':'*
 * Overloads for writing values and tags to stream.
 ','line_number':368,'multiline':True]['text':'*
 * Functions for writing values and tags to a std::string.
 ','line_number':376,'multiline':True]['text':' production function','line_number':379,'multiline':False]['text':' debugging function','line_number':380,'multiline':False]['text':' debugging function','line_number':381,'multiline':False]['text':'*
 * Three ways value comparison (aka spaceship operator).
 ','line_number':383,'multiline':True]['text':'*
 * A simple hash combination.
 ','line_number':396,'multiline':True]['text':'*
 * RAII guard.
 ','line_number':407,'multiline':True]['text':' NOLINT(readability-avoid-const-params-in-decls)','line_number':457,'multiline':False]['text':' Callers must not try to store a pointer to a Decimal128 object in an sbe::value::Value. Any','line_number':462,'multiline':False]['text':' Value with the NumberDecimal TypeTag actually stores a pointer to a NumberDecimal as it would','line_number':463,'multiline':False]['text':' be represented in a BSONElement: a pair of network-ordered (little-endian) uint64_t values.','line_number':464,'multiline':False]['text':' These bytes are _not_ guaranteed to be the same as the bytes in a Decimal128_t object.','line_number':465,'multiline':False]['text':'','line_number':466,'multiline':False]['text':' To get a NumberDecimal value, either call makeCopyDecimal() or store the value in BSON and','line_number':467,'multiline':False]['text':' use sbe::bson::convertFrom().','line_number':468,'multiline':False]['text':' Casting from pointer to integer value is OK.','line_number':473,'multiline':False]['text':' make_signed_t<bool> is not defined, so we handle the bool type separately here.','line_number':476,'multiline':False]['text':' Native integer types are converted to Value using static_cast with sign extension.','line_number':479,'multiline':False]['text':' NOLINT(readability-avoid-const-params-in-decls)','line_number':489,'multiline':False]['text':' Casting from integer value to pointer is OK.','line_number':494,'multiline':False]['text':' Values are converted to native integer types using static_cast. If sizeof(T) is less','line_number':498,'multiline':False]['text':' than sizeof(Value), the upper bits of 'in' are discarded.','line_number':499,'multiline':False]['text':'*
 * Defines hash value for <TypeTags, Value> pair. To be used in associative containers.
 ','line_number':513,'multiline':True]['text':'*
 * Defines equivalence of two <TypeTags, Value> pairs. To be used in associative containers.
 ','line_number':531,'multiline':True]['text':'*
 * Defines less or greater, depending on the template instantiation, of two <TypeTags, Value> pairs.
 * To be used in associative containers.
 ','line_number':558,'multiline':True]['text':'*
 * 'DeepEqualityHashSet' is a wrapper around 'absl::flat_hash_set' that provides a "truly" deep
 * equality comparison function between its instances. The equality operator in the underlying
 * 'absl::flat_hash_set' type doesn't use the provided equality functor. Instead, it relies on the
 * default comparison function for the key type, which is not preferrable in our usage scenarios.
 * This is the main reason for having the 'DeepEqualityHashSet' wrapper type.
 ','line_number':585,'multiline':True]['text':' The equality check in the 'absl::flat_hash_set' type doesn't use the provided','line_number':673,'multiline':False]['text':' equality functor. Instead, it relies on the default comparison function for the key','line_number':674,'multiline':False]['text':' type, which is not preferrable in our usage scenarios. This is the main reason for','line_number':675,'multiline':False]['text':' having the 'DeepEqualityHashSet' wrapper type.','line_number':676,'multiline':False]['text':'*
 * 'DeepEqualityHashMap' is a wrapper around 'absl::flat_hash_map' that provides a "truly" deep
 * equality comparison function between its instances. The equality operator in the underlying
 * 'absl::flat_hash_map' type doesn't use the provided equality functor. Instead, it relies on the
 * default comparison function for the key type, which is not preferrable in our usage scenarios.
 * This is the main reason for having the 'DeepEqualityHashMap' wrapper type.
 ','line_number':694,'multiline':True]['text':' The equality check in the 'absl::flat_hash_map' type doesn't use the provided','line_number':783,'multiline':False]['text':' equality functor. Instead, it relies on the default comparison function for the key','line_number':784,'multiline':False]['text':' type, which is not preferrable in our usage scenarios. This is the main reason for','line_number':785,'multiline':False]['text':' having the 'DeepEqualityHashMap' wrapper type.','line_number':786,'multiline':False]['text':'*
 * This is the SBE representation of objects/documents. It is a relatively simple structure of
 * vectors of field names, type tags, and values.
 ','line_number':809,'multiline':True]['text':' Reserve space in all vectors, they are the same size. We arbitrarily picked _typeTags','line_number':817,'multiline':False]['text':' to determine the size.','line_number':818,'multiline':False]['text':' Reserve space in all vectors, they are the same size. We arbitrarily picked _typeTags','line_number':837,'multiline':False]['text':' to determine the size.','line_number':838,'multiline':False]['text':' Reserve double capacity.','line_number':840,'multiline':False]['text':' Note: we are not concerned about the overflow in the operation below, as the size','line_number':841,'multiline':False]['text':' of 'Value' is 8 bytes. Consequently, the maximum capacity ever is 2^64/8 = 2^61.','line_number':842,'multiline':False]['text':' We can freely shift 2^61 << 1 without any overflow.','line_number':843,'multiline':False]['text':' Note: the case of '_typeTags.capacity() == 1' is handled inside 'reserve' itself.','line_number':844,'multiline':False]['text':' The in-place update of objects is allowed only in very limited set of contexts (e.g. when','line_number':884,'multiline':False]['text':' objects are used in an accumulator slot). The owner of the object must guarantee that no','line_number':885,'multiline':False]['text':' other component can observe the value being updated.','line_number':886,'multiline':False]['text':' Normalize to at least 1.','line_number':896,'multiline':False]['text':'*
 * This is the SBE representation of arrays. It is similar to Object without the field names.
 ','line_number':909,'multiline':True]['text':' The in-place update of arrays is allowed only in very limited set of contexts (e.g. when','line_number':980,'multiline':False]['text':' arrays are used in an accumulator slot). The owner of the array must guarantee that no other','line_number':981,'multiline':False]['text':' component can observe the value being updated.','line_number':982,'multiline':False]['text':' Normalize to at least 1.','line_number':991,'multiline':False]['text':'*
 * This is a set of unique values with the same interface as Array.
 ','line_number':1009,'multiline':True]['text':'*
     * Adds the given SBE value to the set if an equal value is not already present. Assumes
     * ownership of the given value.
     *
     * Returns true if the value was newly inserted, otherwise returns false to indicate that an
     * equal value was already present in the set.
     ','line_number':1039,'multiline':True]['text':' Normalize to at least 1.','line_number':1064,'multiline':False]['text':'*
 * This is the SBE representation of multiset. It is similar to ArraySet but each value can be
 * stored multiple times.
 ','line_number':1077,'multiline':True]['text':' NOLINT','line_number':1084,'multiline':False]['text':'*
     * Adds the given SBE value to the multiset. Assumes ownership of the given value.
     ','line_number':1108,'multiline':True]['text':'*
     * Removes an element val from the multiset. Returns false if it was not possible to remove the
     * element.
     ','line_number':1123,'multiline':True]['text':' Remove Nothing is always succesful since ArrayMultiset ignores those elements.','line_number':1128,'multiline':False]['text':' We cannot remove an element that is not present.','line_number':1133,'multiline':False]['text':'*
 * This is SBE representation of std::multimap
 ','line_number':1189,'multiline':True]['text':' Remove the entry corresponding to the provided key. In case of multiple equivalent keys, the','line_number':1228,'multiline':False]['text':' first entry in the order of insertion will be removed','line_number':1229,'multiline':False]['text':'*
 * A vector of values representing a sort key. The values are NOT owned by this object.
 ','line_number':1264,'multiline':True]['text':'*
 * getRawStringView() returns a char* or const char* that points to the first character of a given
 * string (or a null terminator byte if the string is empty). Where possible, getStringView() should
 * be preferred over getRawStringView().
 ','line_number':1281,'multiline':True]['text':'*
 * getStringLength() returns the number of characters in a string (excluding the null terminator).
 ','line_number':1304,'multiline':True]['text':' This path turned out to be very hot in our benchmarks, so we avoid calling 'strlen()' and','line_number':1309,'multiline':False]['text':' use an alternative approach to compute string length.','line_number':1310,'multiline':False]['text':' NOTE: Small string value always contains exactly one zero byte, marking the end of the','line_number':1311,'multiline':False]['text':' string. Bytes after this zero byte can have arbitrary value.','line_number':1312,'multiline':False]['text':' If SSE2 instruction set is available, we use SIMD instructions. There are several steps:','line_number':1314,'multiline':False]['text':'  (1) _mm_cvtsi64_si128(val) - Copy string value into the 128-bit register','line_number':1315,'multiline':False]['text':'  (2) _mm_cmpeq_epi8 - Make each zero byte equal to 0xFF. Other bytes become zero','line_number':1316,'multiline':False]['text':'  (3) _mm_movemask_epi8 - Copy most significant bit of each byte into int','line_number':1317,'multiline':False]['text':'  (4) countTrailingZerosNonZeroInt - Get the position of the first trailing bit set','line_number':1318,'multiline':False]['text':' If SSE2 is not available, we use bit magic.','line_number':1323,'multiline':False]['text':' This is based on a trick from following link, which describes how to make an expression','line_number':1326,'multiline':False]['text':' which results in '0' when ALL bytes are non-zero, and results in zero when ANY byte is','line_number':1327,'multiline':False]['text':' zero. Instead of casting this result to bool, we count how many complete 0 bytes there','line_number':1328,'multiline':False]['text':' are in 'ret'. This tells us the length of the string.','line_number':1329,'multiline':False]['text':' https://graphics.stanford.edu/~seander/bithacks.html#ZeroInWord','line_number':1330,'multiline':False]['text':' At the end of this, ret will store a value where  each byte which was all 0's is now','line_number':1332,'multiline':False]['text':' 10000000 and any byte that was anything non zero is now 0.','line_number':1333,'multiline':False]['text':' (1) compute (val & magic). This clears the highest bit in each byte.','line_number':1335,'multiline':False]['text':' (2) add magic to the above expression. The result is that, from overflow,','line_number':1338,'multiline':False]['text':' the high bit will be set if any bit was set in 'v' other than the high bit.','line_number':1339,'multiline':False]['text':' (3) OR this result with v. This ensures that if the high bit in 'v' was set','line_number':1341,'multiline':False]['text':' then the high bit in our result will be set.','line_number':1342,'multiline':False]['text':' (4) OR with magic. This will set any low bits which were not already set. At this point','line_number':1344,'multiline':False]['text':' each byte is either all ones or 01111111.','line_number':1345,'multiline':False]['text':' When we invert this, each byte will either be','line_number':1348,'multiline':False]['text':' all zeros (previously non zero) or 10000000 (previously 0).','line_number':1349,'multiline':False]['text':' So all we have to do is count how many complete 0 bytes there are from one end.','line_number':1352,'multiline':False]['text':'
 * Using MONGO_COMPILER_ALWAYS_INLINE on a free function does not always play well between
 * compilers because some require the 'inline' keyword be used while others prohibit it. To get
 * around this, we wrap the custom strlen() function in a struct.
 ','line_number':1370,'multiline':True]['text':' Often calling the shared library strlen() function is more expensive than a small loop','line_number':1376,'multiline':False]['text':' for small strings.','line_number':1377,'multiline':False]['text':'*
 * getStringView() should be preferred over getRawStringView() where possible.
 ','line_number':1386,'multiline':True]['text':'*
 * Same as 'getBsonBinDataSize()' except when the BinData has the 'ByteArrayDeprecated' subtype,
 * in which case it returns the size of the payload, rather than the size of the entire BinData.
 *
 * The BSON spec originally stipulated that BinData values with the "binary" subtype (named
 * 'ByteArrayDeprecated' here) should structure their contents so that the first four bytes store
 * the length of the payload, which occupies the remaining bytes. That subtype is now deprecated,
 * but there are some callers that remain aware of it and operate on the payload rather than the
 * whole BinData byte array. Most callers, however, should use the regular 'getBSONBinDataSize()'
 * and 'getBSONBinData()' and remain oblivious to the BinData subtype.
 *
 * Note that this payload size is computed by subtracting the size of the length bytes from the
 * overall size of BinData. Even though this function supports the deprecated subtype, it still
 * ignores the payload length value.
 ','line_number':1416,'multiline':True]['text':'*
 * Same as 'getBsonBinData()' except when the BinData has the 'ByteArrayDeprecated' subtype, in
 * which case it returns a pointer to the payload, rather than a pointer to the beginning of the
 * BinData.
 *
 * See the 'getBSONBinDataSizeCompat()' documentation for an explanation of the
 * 'ByteArrayDeprecated' subtype.
 ','line_number':1440,'multiline':True]['text':'*
 * Callers must check that canUseSmallString() returns true before calling this function.
 * makeNewString() should be preferred over makeSmallString() where possible.
 ','line_number':1480,'multiline':True]['text':'*
 * Pattern and flags of Regex are stored in BSON as two C strings written one after another.
 *
 *   <pattern> <NULL> <flags> <NULL>
 ','line_number':1682,'multiline':True]['text':' Add one to account for the NULL byte after 'pattern'.','line_number':1690,'multiline':False]['text':' Add 2 * sizeof(char) to account for the NULL bytes after 'pattern' and 'flags'.','line_number':1695,'multiline':False]['text':'*
 * The BsonDBPointer class is used to represent the DBRef BSON type. DBRefs consist of a namespace
 * string ('ns') and a document ID ('id'). The namespace string ('ns') can either just specify a
 * collection name (ex. "c"), or it can specify both a database name and a collection name separated
 * by a dot (ex. "db.c").
 *
 * In BSON, a DBRef is encoded as a bsonString ('ns') followed by an ObjectId ('id').
 ','line_number':1719,'multiline':True]['text':' Add sizeof(char) to account for the NULL byte after 'ns'.','line_number':1735,'multiline':False]['text':'*
 * The BsonCodeWScope class is used to represent the CodeWScope BSON type.
 *
 * In BSON, a CodeWScope is encoded as a little-endian 32-bit integer ('numBytes'), followed by a
 * bsonString ('code'), followed by a bsonObject ('scope').
 ','line_number':1753,'multiline':True]['text':'*
 * Returns a poison value that should never be encountered in production.
 * Used by asserts/invariants to invalidate values that should never be accessed.
 ','line_number':1806,'multiline':True]['text':' Owned BSON memory is managed through a UniqueBuffer for compatibility','line_number':1849,'multiline':False]['text':' with the BSONObj/BSONArray class.','line_number':1850,'multiline':False]['text':'*
 * Implicit conversion from any type to a boolean value.
 ','line_number':1902,'multiline':True]['text':'*
 * Convert a numeric value to double, with potential precision loss.
 ','line_number':1939,'multiline':True]['text':'*
 * Implicit conversions of numerical types.
 ','line_number':1965,'multiline':True]['text':'*
 * Performs a lossless numeric conversion from a value to a destination type denoted by the target
 * TypeTag. In the case that a conversion is lossy, we return Nothing.
 ','line_number':1999,'multiline':True]['text':' Object','line_number':2091,'multiline':False]['text':' bsonObject','line_number':2095,'multiline':False]['text':'*
 * Holds a view of an array-like type (e.g. TypeTags::Array or TypeTags::bsonArray), and provides an
 * iterface to iterate over the values that are the elements of the array.
 *
 * This is a general purpose iterator. If you need to do a simple walk over the entire array in one
 * go, not saving the place across function calls etc, prefer walkArray().
 ','line_number':2100,'multiline':True]['text':' Array','line_number':2168,'multiline':False]['text':' ArraySet','line_number':2172,'multiline':False]['text':' ArrayMultiSet','line_number':2176,'multiline':False]['text':' bsonArray','line_number':2180,'multiline':False]['text':'*
 * Copies the content of the input array into an ArraySet. If the input has duplicate elements, they
 * will be removed.
 ','line_number':2186,'multiline':True]['text':' namespace value','line_number':2193,'multiline':False]['text':' namespace sbe','line_number':2194,'multiline':False]['text':' namespace mongo','line_number':2195,'multiline':False]