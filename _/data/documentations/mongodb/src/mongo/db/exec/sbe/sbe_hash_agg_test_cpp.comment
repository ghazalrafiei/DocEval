['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This file contains tests for sbe::HashAggStage.
 ','line_number':30,'multiline':True]['text':' Generate a mock scan from 'input' with a single output slot.','line_number':153,'multiline':False]['text':' Get all the results produced.','line_number':160,'multiline':False]['text':' Sort results for stable compare, since the counts could come out in any order.','line_number':164,'multiline':False]['text':' Sort 'resultContents' in descending order.','line_number':172,'multiline':False]['text':' Build a HashAggStage that exercises the collMin() and collMax() aggregate functions.','line_number':216,'multiline':False]['text':' allowDiskUse ','line_number':241,'multiline':True]['text':' mergingExprs ','line_number':242,'multiline':True]['text':' Build a HashAggStage that exercises the collAddToSet() aggregate function.','line_number':288,'multiline':False]['text':' allowDiskUse ','line_number':300,'multiline':True]['text':' mergingExprs ','line_number':301,'multiline':True]['text':' Generate a mock scan from 'input' with a single output slot.','line_number':307,'multiline':False]['text':' Call the 'makeStage' callback to create the PlanStage that we want to test, passing in','line_number':311,'multiline':False]['text':' the mock scan subtree and its output slot.','line_number':312,'multiline':False]['text':' Prepare the tree and get the SlotAccessor for the output slot.','line_number':315,'multiline':False]['text':' Get all the results produced by the PlanStage we want to test.','line_number':319,'multiline':False]['text':' Retrieve the first element from the results array.','line_number':323,'multiline':False]['text':' Convert the element into an ArraySet 'as' (with no collation).','line_number':328,'multiline':False]['text':' Assert that 'as' and 'expected' are the same size and contain the same values.','line_number':333,'multiline':False]['text':' Assert that the results array does not contain more than one element.','line_number':345,'multiline':False]['text':' Collator groups the values as: ["A", "a", "a"], ["B", "b"], ["c"].','line_number':358,'multiline':False]['text':' No Collator groups the values as: ["a", "a"], ["A"], ["B"], ["b"], ["c"].','line_number':365,'multiline':False]['text':' Create a seek slot we will use to peek into the hash table.','line_number':373,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':378,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':386,'multiline':False]['text':' allowDiskUse ','line_number':401,'multiline':True]['text':' mergingExprs ','line_number':402,'multiline':True]['text':' Let's start with '5' as our seek value.','line_number':408,'multiline':False]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':411,'multiline':False]['text':' There are '2' occurences of '5' in the input.','line_number':417,'multiline':False]['text':' Reposition to '6'.','line_number':421,'multiline':False]['text':' There are '3' occurences of '6' in the input.','line_number':426,'multiline':False]['text':' Reposition to '7'.','line_number':430,'multiline':False]['text':' There are '4' occurences of '7' in the input.','line_number':435,'multiline':False]['text':' We shouldn't spill to disk if memory is plentiful (which by default it is), even if we are','line_number':443,'multiline':False]['text':' allowed to.','line_number':444,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':448,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':453,'multiline':False]['text':' Seek slot','line_number':465,'multiline':False]['text':' allowDiskUse ','line_number':468,'multiline':True]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':473,'multiline':False]['text':' Read in all of the results.','line_number':476,'multiline':False]['text':' Check that the results match the expected.','line_number':484,'multiline':False]['text':' 2 of "5"s','line_number':486,'multiline':False]['text':' 3 of "6"s','line_number':487,'multiline':False]['text':' 4 of "7"s','line_number':488,'multiline':False]['text':' Check that the spilling behavior matches the expected.','line_number':490,'multiline':False]['text':' We estimate the size of result row like {int64, int64} at 50B. Set the memory threshold to','line_number':500,'multiline':False]['text':' 64B so that exactly one row fits in memory.','line_number':501,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':512,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':517,'multiline':False]['text':' Seek slot','line_number':529,'multiline':False]['text':' allowDiskUse ','line_number':532,'multiline':True]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':537,'multiline':False]['text':' Read in all of the results.','line_number':540,'multiline':False]['text':' Check that the results match the expected.','line_number':548,'multiline':False]['text':' 2 of "5"s','line_number':550,'multiline':False]['text':' 3 of "6"s','line_number':551,'multiline':False]['text':' 4 of "7"s','line_number':552,'multiline':False]['text':' Check that the spilling behavior matches the expected.','line_number':554,'multiline':False]['text':' Memory usage is estimated only every two rows at the most frequent. Also, we only start','line_number':557,'multiline':False]['text':' spilling after estimating that the memory budget is exceeded. These two factors result in','line_number':558,'multiline':False]['text':' fewer expected spills than there are input records, even though only one record fits in','line_number':559,'multiline':False]['text':' memory at a time.','line_number':560,'multiline':False]['text':' The input has one run of two consecutive values, so we expect to spill as many records as','line_number':562,'multiline':False]['text':' there are input values minus one.','line_number':563,'multiline':False]['text':' We estimate the size of result row like {int64, int64} at 50B. Set the memory threshold to','line_number':570,'multiline':False]['text':' 64B so that exactly one row fits in memory and spill would be required. At the same time, set','line_number':571,'multiline':False]['text':' the memory check bounds to exceed the number of processed records so the checks are never run','line_number':572,'multiline':False]['text':' and the need to spill is never discovered.','line_number':573,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':591,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':596,'multiline':False]['text':' Seek slot','line_number':608,'multiline':False]['text':' allowDiskUse ','line_number':611,'multiline':True]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':616,'multiline':False]['text':' Read in all of the results.','line_number':619,'multiline':False]['text':' Check that the results match the expected.','line_number':627,'multiline':False]['text':' 2 of "5"s','line_number':629,'multiline':False]['text':' 3 of "6"s','line_number':630,'multiline':False]['text':' 4 of "7"s','line_number':631,'multiline':False]['text':' Check that it did not spill.','line_number':633,'multiline':False]['text':' We estimate the size of result row like {double, int64} at 50B. Set the memory threshold to','line_number':643,'multiline':False]['text':' 64B so that exactly one row fits in memory.','line_number':644,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':655,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':660,'multiline':False]['text':' Seek slot','line_number':672,'multiline':False]['text':' allowDiskUse ','line_number':675,'multiline':True]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':680,'multiline':False]['text':' Read in all of the results.','line_number':683,'multiline':False]['text':' Check that the results match the expected.','line_number':691,'multiline':False]['text':' 2 of "5.0"s','line_number':693,'multiline':False]['text':' 3 of "6.0"s','line_number':694,'multiline':False]['text':' 4 of "7.0"s','line_number':695,'multiline':False]['text':' Check that the spilling behavior matches the expected.','line_number':697,'multiline':False]['text':' Memory usage is estimated only every two rows at the most frequent. Also, we only start','line_number':700,'multiline':False]['text':' spilling after estimating that the memory budget is exceeded. These two factors result in','line_number':701,'multiline':False]['text':' fewer expected spills than there are input records, even though only one record fits in','line_number':702,'multiline':False]['text':' memory at a time.','line_number':703,'multiline':False]['text':' The input has one run of two consecutive values, so we expect to spill as many records as','line_number':705,'multiline':False]['text':' there are input values minus one.','line_number':706,'multiline':False]['text':' Build a HashAggStage, with an empty group by slot and compute a simple count.','line_number':727,'multiline':False]['text':' Seek slot','line_number':739,'multiline':False]['text':' allowDiskUse ','line_number':742,'multiline':True]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':747,'multiline':False]['text':' Read in all of the results.','line_number':750,'multiline':False]['text':' Check that the results match the expected.','line_number':758,'multiline':False]['text':' Check that the spilling behavior matches the expected.','line_number':762,'multiline':False]['text':' We estimate the size of result row like {double, int64} at 59B. Set the memory threshold to','line_number':772,'multiline':False]['text':' 128B so that two rows fit in memory.','line_number':773,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':784,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':789,'multiline':False]['text':' Seek slot','line_number':806,'multiline':False]['text':' allowDiskUse ','line_number':809,'multiline':True]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':817,'multiline':False]['text':' Read in all of the results.','line_number':820,'multiline':False]['text':'count','line_number':821,'multiline':True]['text':'sum','line_number':821,'multiline':True]['text':' Check that the results match the expected.','line_number':835,'multiline':False]['text':' 2 of "5"s','line_number':837,'multiline':False]['text':' 3 of "6"s','line_number':838,'multiline':False]['text':' 4 of "7"s','line_number':839,'multiline':False]['text':' Check that the spilling behavior matches the expected.','line_number':841,'multiline':False]['text':' The input has one run of two consecutive values, so we expect to spill as many records as','line_number':845,'multiline':False]['text':' there are input values minus one.','line_number':846,'multiline':False]['text':' Set available memory to zero so all aggregated rows have to be spilled.','line_number':853,'multiline':False]['text':' Build a scan of the [5,6,7,5,6,7,6,7,7] input array.','line_number':864,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':869,'multiline':False]['text':' Seek slot','line_number':886,'multiline':False]['text':' allowDiskUse=true','line_number':889,'multiline':False]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':897,'multiline':False]['text':' Read in all of the results.','line_number':900,'multiline':False]['text':'count','line_number':901,'multiline':True]['text':'sum','line_number':901,'multiline':True]['text':' Check that the results match the expected.','line_number':915,'multiline':False]['text':' 2 of "5"s','line_number':917,'multiline':False]['text':' 3 of "6"s','line_number':918,'multiline':False]['text':' 4 of "7"s','line_number':919,'multiline':False]['text':' Check that the spilling behavior matches the expected.','line_number':921,'multiline':False]['text':' We expect each incoming value to result in a spill of a single record.','line_number':924,'multiline':False]['text':' Changing the query knobs to always re-estimate the hash table size in HashAgg and spill when','line_number':932,'multiline':False]['text':' estimated size is >= 128. This should spilt the number of ints between the hash table and','line_number':933,'multiline':False]['text':' the record store somewhat evenly.','line_number':934,'multiline':False]['text':' Build an array with sums over 100 congruence groups.','line_number':946,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a sum for each group.','line_number':961,'multiline':False]['text':' Seek slot','line_number':969,'multiline':False]['text':' allowDiskUse=true','line_number':972,'multiline':False]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':977,'multiline':False]['text':' Build a scan of a few record ids.','line_number':996,'multiline':False]['text':' Build a HashAggStage, group by the scanSlot and compute a simple count.','line_number':1006,'multiline':False]['text':' Seek slot','line_number':1018,'multiline':False]['text':' allowDiskUse=true','line_number':1021,'multiline':False]['text':' Prepare the tree and get the 'SlotAccessor' for the output slot.','line_number':1026,'multiline':False]['text':' Read in all of the results.','line_number':1029,'multiline':False]['text':'id','line_number':1030,'multiline':True]['text':'count','line_number':1030,'multiline':True]['text':' Assert that the results are as expected.','line_number':1044,'multiline':False]['text':' namespace mongo::sbe','line_number':1053,'multiline':False]