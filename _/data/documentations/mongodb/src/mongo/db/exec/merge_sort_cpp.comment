['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' static','line_number':52,'multiline':False]['text':' We have to call work(...) on every child before we can pick a min.','line_number':68,'multiline':False]['text':' If we have no more results to return, and we have no more children that we can call','line_number':73,'multiline':False]['text':' work(...) on to get results, we're done.','line_number':74,'multiline':False]['text':' We have some child that we don't have a result from.  Each child must have a result','line_number':84,'multiline':False]['text':' in order to pick the minimum result among all our children.  Work a child.','line_number':85,'multiline':False]['text':' If we're deduping...','line_number':93,'multiline':False]['text':' Can't dedup data unless there's a RecordId.  We go ahead and use its','line_number':96,'multiline':False]['text':' result.','line_number':97,'multiline':False]['text':' ...and there's a RecordId and and we've seen the RecordId before','line_number':101,'multiline':False]['text':' ...drop it.','line_number':103,'multiline':False]['text':' Otherwise, note that we've seen it.','line_number':108,'multiline':False]['text':' We're going to use the result from the child, so we remove it from','line_number':110,'multiline':False]['text':' the queue of children without a result.','line_number':111,'multiline':False]['text':' Not deduping.  We use any result we get from the child.  Remove the child','line_number':116,'multiline':False]['text':' from the queue of things without a result.','line_number':117,'multiline':False]['text':' Store the result in our list.','line_number':121,'multiline':False]['text':' Ensure that the BSONObj underlying the WorkingSetMember is owned in case we yield.','line_number':125,'multiline':False]['text':' Insert the result (indirectly) into our priority queue.','line_number':129,'multiline':False]['text':' There are no more results possible from this child.  Don't bother with it','line_number':134,'multiline':False]['text':' anymore.','line_number':135,'multiline':False]['text':' If we're here, for each non-EOF child, we have a valid WSID.','line_number':146,'multiline':False]['text':' Get the 'min' WSID.  _merging is a priority queue so its top is the smallest.','line_number':149,'multiline':False]['text':' Since we're returning the WSID that came from top->stage, we need to work(...) it again','line_number':153,'multiline':False]['text':' to get a new result.','line_number':154,'multiline':False]['text':' Save the ID that we're returning and remove the returned result from our data.','line_number':157,'multiline':False]['text':' Return the min.','line_number':161,'multiline':False]['text':' Is lhs less than rhs?  Note that priority_queue is a max heap by default so we invert','line_number':167,'multiline':False]['text':' the return from the expected value.','line_number':168,'multiline':False]['text':' Determine if the left-hand side sort key part comes from an index key.','line_number':182,'multiline':False]['text':' Determine if the right-hand side sort key part comes from an index key.','line_number':188,'multiline':False]['text':' A collator to use for comparing the sort keys. We need a collator when values of both','line_number':191,'multiline':False]['text':' operands are supplied from a document and the query is collated. Otherwise bit-wise','line_number':192,'multiline':False]['text':' comparison should be used.','line_number':193,'multiline':False]['text':' A backing storage for a collation-encoded key part','line_number':195,'multiline':False]['text':' (according to collator '_collator') of one of the','line_number':196,'multiline':False]['text':' operands - either 'lhsElt' or 'rhsElt'.','line_number':197,'multiline':False]['text':' Either the query has no collation or both sort key parts come directly from index','line_number':200,'multiline':False]['text':' keys. If the query has no collation, then the query planner should have guaranteed','line_number':201,'multiline':False]['text':' that we don't need to perform any collation-aware comparisons here. If both sort key','line_number':202,'multiline':False]['text':' parts come from index keys, we may need to respect a collation but the index keys are','line_number':203,'multiline':False]['text':' already collation-encoded, therefore we don't need to perform a collation-aware','line_number':204,'multiline':False]['text':' comparison here.','line_number':205,'multiline':False]['text':' Both sort key parts were extracted from fetched documents. These parts are not','line_number':207,'multiline':False]['text':' collation-encoded, so we will need to perform a collation-aware comparison.','line_number':208,'multiline':False]['text':' One of the sort key parts was extracted from fetched documents. Encode that part','line_number':211,'multiline':False]['text':' using the query's collation.','line_number':212,'multiline':False]['text':' Encode the sort key part only if it contains some value.','line_number':215,'multiline':False]['text':' false means don't compare field name.','line_number':222,'multiline':False]['text':' A comparator for use with sort is required to model a strict weak ordering, so','line_number':232,'multiline':False]['text':' to satisfy irreflexivity we must return 'false' for elements that we consider','line_number':233,'multiline':False]['text':' equivalent under the pattern.','line_number':234,'multiline':False]['text':' namespace mongo','line_number':263,'multiline':False]