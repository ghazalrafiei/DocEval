['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Try to convert to a variable if possible.
 ','line_number':59,'multiline':True]['text':'*
 * Construct a parameter descriptor from a variable.
 ','line_number':70,'multiline':True]['text':' If an expression is not a simple variable then we must generate code for it.','line_number':86,'multiline':False]['text':'*
 * Set of functions that allocate one or two labels, constructs code using 'f', and cleans up the
 * labels before returning the constructed code. These functions should be used when working with
 * labels in order to guarantee that the generated labels are destroyed _before_ returning the
 * generated code.
 ','line_number':94,'multiline':True]['text':' ctx.root is optional. If root stage is not specified, then resolve the variable using','line_number':171,'multiline':False]['text':' default context rules.','line_number':172,'multiline':False]['text':'
 * Given a vector of clauses named [lhs1,...,lhsN-1, rhs], and a boolean isDisjunctive to indicate
 * whether we are ANDing or ORing the clauses, we output the appropriate short circuiting
 * CodeFragment. For AND (conjunctive) we compile them as following byte code:
 * @true1:    lhs1
 *            jumpNothing @end
 *            jumpFalse @false
 * ...
 * @trueN-1:  lhsN-1
 *            jumpNothing @end
 *            jumpFalse @false
 * @trueN:    rhs
 *            jmp @end
 * @false:    push false
 * @end:
 *
 * For OR (disjunctive) we compile them as:
 * @false1:   lhs1
 *            jumpNothing @end
 *            jumpTrue @true
 * ...
 * @falseN-1: lhsN-1
 *            jumpNothing @end
 *            jumpTrue @true
 * @tfalseN:  rhs
 *            jmp @end
 * @true:     push true
 * @end:
 ','line_number':213,'multiline':True]['text':' Build code fragment for all but the last clause, which is used for the final result','line_number':246,'multiline':False]['text':' branch.','line_number':247,'multiline':False]['text':' Build code fragment for final clause.','line_number':265,'multiline':False]['text':' Build code fragment for the short-circuited result.','line_number':269,'multiline':False]['text':' Only one of `finalClause` or `resultBranch` will execute, so the stack size adjustment','line_number':275,'multiline':False]['text':' should only be made one time here, rather than one adjustment for each CodeFragment.','line_number':276,'multiline':False]['text':'isDisjunction','line_number':290,'multiline':True]['text':'isDisjunction','line_number':293,'multiline':True]['text':' Special cases: rhs is trivial to evaluate -> avoid a jump','line_number':295,'multiline':False]['text':'
         *            lhs
         *            jumpNotNothing end
         * @nothing:  pop
         *            rhs
         * @end:
         ','line_number':312,'multiline':True]['text':' Sometimes called the "Elvis operator"...','line_number':428,'multiline':False]['text':'*
 * The arity test function. It returns true if the number of arguments is correct.
 ','line_number':543,'multiline':True]['text':'*
 * The arity test function that trivially accepts any number of arguments.
 ','line_number':548,'multiline':True]['text':'*
 * The builtin function description.
 ','line_number':555,'multiline':True]['text':'*
 * The map of recognized builtin functions.
 ','line_number':564,'multiline':True]['text':'*
 * The code generation function.
 ','line_number':966,'multiline':True]['text':'*
 * The function description.
 ','line_number':972,'multiline':True]['text':' Jump around the body.','line_number':1070,'multiline':False]['text':' Remember the position and append the body.','line_number':1073,'multiline':False]['text':' Append the traverseP call.','line_number':1077,'multiline':False]['text':' Jump around the body.','line_number':1098,'multiline':False]['text':' Remember the position and append the body.','line_number':1101,'multiline':False]['text':' Append the traverseF call.','line_number':1105,'multiline':False]['text':' Jump around the body.','line_number':1126,'multiline':False]['text':' Remember the position and append the body.','line_number':1129,'multiline':False]['text':' Append the traverseCellValues call.','line_number':1133,'multiline':False]['text':' Jump around the body.','line_number':1152,'multiline':False]['text':' Remember the position and append the body.','line_number':1155,'multiline':False]['text':' Append the traverseCellTypes call.','line_number':1159,'multiline':False]['text':'*
 * The map of functions that resolve directly to instructions.
 ','line_number':1171,'multiline':True]['text':' namespace','line_number':1213,'multiline':False]['text':' Optimize well known set of functions with constant arguments and generate their','line_number':1224,'multiline':False]['text':' specialized variants.','line_number':1225,'multiline':False]['text':' The validation for the arguments has been omitted here because the constants','line_number':1238,'multiline':False]['text':' have already been validated in the stage builder.','line_number':1239,'multiline':False]['text':'
     * Compile if-then-else into following bytecode:
     *            cond
     *            jumpNothing @end
     *            jumpTrue @then
     * @else:     elseBranch
     *            jump @end
     * @then:     thenBranch
     * @end:
     ','line_number':1345,'multiline':True]['text':' Compile the condition','line_number':1356,'multiline':False]['text':' Compile the jumps','line_number':1359,'multiline':False]['text':' Compile else-branch','line_number':1363,'multiline':False]['text':' Compile then-branch','line_number':1367,'multiline':False]['text':' Combine the branches','line_number':1372,'multiline':False]['text':' Print the condition.','line_number':1384,'multiline':False]['text':' Print thenBranch.','line_number':1389,'multiline':False]['text':' Print elseBranch.','line_number':1394,'multiline':False]['text':' Declare the frame at the top of the stack, where the local variable values will reside.','line_number':1419,'multiline':False]['text':' Generate bytecode for local variables and the 'in' expression. The 'in' expression is in the','line_number':1422,'multiline':False]['text':' last position of _nodes.','line_number':1423,'multiline':False]['text':' After the execution we have to cleanup the stack; i.e. local variables go out of scope.','line_number':1428,'multiline':False]['text':' However, note that the top of the stack holds the overall result (i.e. the 'in' expression)','line_number':1429,'multiline':False]['text':' and it cannot be destroyed. So we 'bubble' it down with a series of swap/pop instructions.','line_number':1430,'multiline':False]['text':' Local variables are no longer accessible after this point so remove the frame.','line_number':1436,'multiline':False]['text':' Compile the body first so we know its size.','line_number':1480,'multiline':False]['text':' Declare the frame containing lambda variable.','line_number':1484,'multiline':False]['text':' The variable is expected to be already on the stack so declare the frame just below the','line_number':1485,'multiline':False]['text':' current top of the stack.','line_number':1486,'multiline':False]['text':' Make sure the stack is sufficiently large.','line_number':1489,'multiline':False]['text':' Lambda parameter is no longer accessible after this point so remove the frame.','line_number':1495,'multiline':False]['text':' Verify that 'body' does not refer to local variables defined outside of 'body'.','line_number':1498,'multiline':False]['text':' Jump around the body.','line_number':1510,'multiline':False]['text':' Remember the position and append the body.','line_number':1513,'multiline':False]['text':' Push the lambda value on the stack','line_number':1517,'multiline':False]['text':' namespace sbe','line_number':1629,'multiline':False]['text':' namespace mongo','line_number':1630,'multiline':False]