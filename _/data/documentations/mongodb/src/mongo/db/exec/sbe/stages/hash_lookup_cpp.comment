['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':30,'multiline':False]['text':' Stash the collator because we need it when spilling strings to the record store.','line_number':117,'multiline':False]['text':' Use a switch accessor to feed the buffered value from the '_buffer' or the value spilled','line_number':149,'multiline':False]['text':' to '_recordStoreBuf'.','line_number':150,'multiline':False]['text':' '_outInnerProjectAccessors' has been preallocated, so it's element pointers will be','line_number':155,'multiline':False]['text':' stable.','line_number':156,'multiline':False]['text':' Some compilers do not allow to capture local bindings by lambda functions (the one','line_number':165,'multiline':False]['text':' is used implicitly in tassert below), so we need a local variable to construct an','line_number':166,'multiline':False]['text':' error message.','line_number':167,'multiline':False]['text':' Construct accessors for the agg state to be returned.','line_number':171,'multiline':False]['text':' '_outResultAggAccessors' has been preallocated, so it's element pointers will be stable.','line_number':174,'multiline':False]['text':' Set '_compileInnerAgg' to make only '_outInnerProjectAccessorMap' visible when compiling','line_number':177,'multiline':False]['text':' the expression.','line_number':178,'multiline':False]['text':' Reset the memory threshold if the knob changes between re-open calls.','line_number':236,'multiline':False]['text':' Erase but don't change its reference. Otherwise it will invalidate the slot accessors.','line_number':246,'multiline':False]['text':' Adds a new key-value entry. Will attempt to move or copy from key accessor when needed.','line_number':269,'multiline':False]['text':' array case each elem in array we put each element into ht.','line_number':270,'multiline':False]['text':' Check to see if key is already in memory. If not, we will emplace a new key or spill to disk.','line_number':274,'multiline':False]['text':' If the key and one 'size_t' index fit into the '_ht' without reaching the memory limit','line_number':277,'multiline':False]['text':' and we haven't spilled yet emplace into '_ht'. Otherwise, we will always spill the key to','line_number':278,'multiline':False]['text':' the record store. The additional guard !hasSpilledHtToDisk() ensures that a key that is','line_number':279,'multiline':False]['text':' evicted from '_ht' never ends in '_ht' again.','line_number':280,'multiline':False]['text':' We have to insert an owned key, attempt a move, but force copy if necessary when we','line_number':286,'multiline':False]['text':' haven't spilled to the '_recordStore' yet.','line_number':287,'multiline':False]['text':' Write record to rs.','line_number':297,'multiline':False]['text':' The key is already present in '_ht' so the memory will only grow by one size_t. If we','line_number':307,'multiline':False]['text':' reach the memory limit, the key/value in '_ht' will be evicted from memory and spilled to','line_number':308,'multiline':False]['text':' '_recordStoreHt' along with the new index.','line_number':309,'multiline':False]['text':' Evict the hash table value.','line_number':323,'multiline':False]['text':' Add size of record ID + size of buffer.','line_number':363,'multiline':False]['text':' Insert the inner side into the hash table.','line_number':414,'multiline':False]['text':' Copy all projected values.','line_number':418,'multiline':False]['text':' This where we put the value in here. This can grow need to spill.','line_number':425,'multiline':False]['text':' Point iterator to a row to accumulate.','line_number':453,'multiline':False]['text':' Point the _outInnerProjectAccessors to the accessor for the value from','line_number':457,'multiline':False]['text':' '_recordStoreBuf' since we need to read a spilled value.','line_number':458,'multiline':False]['text':' We must shift the '_bufferIt' index by one when using it as a RecordId because a','line_number':461,'multiline':False]['text':' RecordId of 0 is invalid.','line_number':462,'multiline':False]['text':' number of indices','line_number':486,'multiline':False]['text':' Add the size of key (which comprises of the memory usage for the key + its type bits),','line_number':498,'multiline':False]['text':' as well as the size of one integer to store the length of indices vector in the value.','line_number':499,'multiline':False]['text':' Add the size of indices vector used in the hash-table value to the accounting.','line_number':503,'multiline':False]['text':' 'BufBuilder' writes numbers in little endian format, so must read them using the same.','line_number':514,'multiline':False]['text':' As we're updating these records, we'd remove the old size from the accounting. The new','line_number':542,'multiline':False]['text':' size is added back to the accounting in the call to 'writeIndicesToRecordStore' below.','line_number':543,'multiline':False]['text':' Clear the result accumulators.','line_number':557,'multiline':False]['text':' We are using sorted set, so that fetching by index is monotonic.','line_number':563,'multiline':False]['text':' It also provides a deterministic execution, that is unrelated to a hash function','line_number':564,'multiline':False]['text':' chosen. This way of constructing union is not optimal in the worst case O(INPUT *','line_number':565,'multiline':False]['text':' log INPUT), where INPUT is total count of input indices to union. This could be','line_number':566,'multiline':False]['text':' improved to O(OUTPUT * log OUTPUT), by using hash set and sorting later. Hovewer','line_number':567,'multiline':False]['text':' its not obvious which approach will be acutally better in real world scenarios.','line_number':568,'multiline':False]['text':' The key wasn't in memory and we have spilled to a '_recordStoreHt', fetch it','line_number':578,'multiline':False]['text':' if it exists.','line_number':579,'multiline':False]['text':' Need to make sure we have spilled by checking if the '_recordStoreHt' is','line_number':598,'multiline':False]['text':' non-nullptr if we don't find the '_probeKey' in the '_ht'. Otherwise, the empty','line_number':599,'multiline':False]['text':' foreign side edge case won't fallthrough and we may hit this block and try to','line_number':600,'multiline':False]['text':' read from a non-existent '_recordStoreHt'.','line_number':601,'multiline':False]['text':' Spilling stats.','line_number':636,'multiline':False]['text':' namespace sbe','line_number':707,'multiline':False]['text':' namespace mongo','line_number':708,'multiline':False]