['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':45,'multiline':False]['text':' IWYU pragma: keep','line_number':61,'multiline':False]['text':' We cannot use a random cursor if we are seeking or requesting a reverse scan.','line_number':113,'multiline':False]['text':' Oplog scans only: cache a pointer to the "ts" field accessor for fast access.','line_number':153,'multiline':False]['text':' TODO: SERVER-72054','line_number':234,'multiline':False]['text':' RecordId are currently (incorrectly) accessed after EOF, therefore we must treat them','line_number':235,'multiline':False]['text':' as always accessible rather than invalidate them when slots are disabled. We should','line_number':236,'multiline':False]['text':' use slotsAccessible() instead of true, once the bug is fixed.','line_number':237,'multiline':False]['text':' If this stage has not been prepared, then yield recovery is a no-op.','line_number':267,'multiline':False]['text':' We cannot check for capped position lost here, as it requires us to reposition the','line_number':284,'multiline':False]['text':' cursor, which would free the underlying value and break the contract of','line_number':285,'multiline':False]['text':' restoreState(fullSave=false). So we defer the capped collection position lost check','line_number':286,'multiline':False]['text':' to the following getNext() call by setting this flag.','line_number':287,'multiline':False]['text':'','line_number':288,'multiline':False]['text':' The intention in this codepath is to retain a valid and positioned cursor across','line_number':289,'multiline':False]['text':' query yields / getMore commands. However, it is safe to reposition the cursor in','line_number':290,'multiline':False]['text':' getNext() and we must reset the cursor for capped collections in order to check for','line_number':291,'multiline':False]['text':' CappedPositionLost errors.','line_number':292,'multiline':False]['text':' Reuse existing cursor if possible in the reOpen case (i.e. when we will do a seek).','line_number':379,'multiline':False]['text':' Fast-path for handling the case where 'reOpen' is true.','line_number':411,'multiline':False]['text':' If we reach here, 'reOpen' is false. That means this stage is either being opened for the','line_number':418,'multiline':False]['text':' first time ever, or this stage is being opened for the first time after calling close().','line_number':419,'multiline':False]['text':' We need to re-acquire '_coll' in this case and make some validity checks (the collection has','line_number':423,'multiline':False]['text':' not been dropped, renamed, etc).','line_number':424,'multiline':False]['text':' A clustered collection scan may have an end bound we have already passed.','line_number':440,'multiline':False]['text':' We are about to call next() on a storage cursor so do not bother saving our internal state in','line_number':451,'multiline':False]['text':' case it yields as the state will be completely overwritten after the next() call.','line_number':452,'multiline':False]['text':' This call to checkForInterrupt() may result in a call to save() or restore() on the entire','line_number':455,'multiline':False]['text':' PlanStage tree if a yield occurs. It's important that we call checkForInterrupt() before','line_number':456,'multiline':False]['text':' checking '_needsToCheckCappedPositionLost' since a call to restoreState() may set','line_number':457,'multiline':False]['text':' '_needsToCheckCappedPositionLost'.','line_number':458,'multiline':False]['text':' do not tolerate capped position lost ','line_number':463,'multiline':True]['text':' Optimized so the most common case has as short a codepath as possible. Info on bounds edge','line_number':471,'multiline':False]['text':' enforcement:','line_number':472,'multiline':False]['text':'   o '_seekRecordIdAccessor' existence means this is doing a single-record fetch or resuming a','line_number':473,'multiline':False]['text':'     prior paused scan and must do seekExact() to that recordId. In the fetch case this is the','line_number':474,'multiline':False]['text':'     record to be returned. In the resume case it is the last one returned before the pause,','line_number':475,'multiline':False]['text':'     and if it no longer exists the scan will fail because it doesn't know where to resume','line_number':476,'multiline':False]['text':'     from. If it is present, the code below expects us to leave the cursor on that record to','line_number':477,'multiline':False]['text':'     do some checks, and there will be a FilterStage above the scan to filter out this record.','line_number':478,'multiline':False]['text':'   o '_minRecordIdAccessor' and/or '_maxRecordIdAccessor' mean we are doing a bounded scan on','line_number':479,'multiline':False]['text':'     a clustered collection, and we will do a seekNear() to the start bound on the first call.','line_number':480,'multiline':False]['text':'     - If the bound(s) came in via an expression, we are to assume both bounds are inclusive.','line_number':481,'multiline':False]['text':'       A FilterStage above this stage will exist to filter out any that are really exclusive.','line_number':482,'multiline':False]['text':'     - If the bound(s) came in via the "min" and/or "max" keywords, this stage must enforce','line_number':483,'multiline':False]['text':'       them directly as there may be no FilterStage above it. In this case the start bound is','line_number':484,'multiline':False]['text':'       always inclusive, so the logic is unchanged, but the end bound is always exclusive, so','line_number':485,'multiline':False]['text':'       we use '_excludeScanEndRecordId' to indicate this for scan termination.','line_number':486,'multiline':False]['text':'     - Since there may not be a FilterStage for a bounded scan, we need to skip the first','line_number':487,'multiline':False]['text':'       record here if the seekNear() positioned on a recordId before the target range.','line_number':488,'multiline':False]['text':' fetch or scan resume','line_number':504,'multiline':False]['text':' Attempting to resume from a null record ID gives a null '_seekRecordId'.','line_number':506,'multiline':False]['text':' seekNear() may land on the record just before the start bound.','line_number':517,'multiline':False]['text':' Additionally, the range may be exclusive of the start record.','line_number':518,'multiline':False]['text':' Keep advancing until the first record equal to _minRecordId','line_number':519,'multiline':False]['text':' or, if exclusive, the first record "after" it.','line_number':520,'multiline':False]['text':' Performance optimization: random cursors don't care about '_firstGetNext' so we do not','line_number':532,'multiline':False]['text':' need to set it to false here.','line_number':533,'multiline':False]['text':' Only check the index key for corruption if this getNext() call did seekExact(), as that','line_number':537,'multiline':False]['text':' expects the '_seekRecordId' to be found, but it was not.','line_number':538,'multiline':False]['text':' Indicate that the last recordId seen is null once EOF is hit.','line_number':549,'multiline':False]['text':' Return EOF if the index key is found to be inconsistent.','line_number':558,'multiline':False]['text':' If we're only looking for 1 field, then it's more efficient to forgo the hashtable','line_number':602,'multiline':False]['text':' and just use equality comparison.','line_number':603,'multiline':False]['text':' If we're looking for 2 or more fields, it's more efficient to use the hashtable.','line_number':618,'multiline':False]['text':' No need to scan any further so bail out early.','line_number':632,'multiline':False]['text':' Oplog scans only: if _oplogTsAccessor is set, the value of the "ts" field, if','line_number':641,'multiline':False]['text':' it exists in the document, will be copied to this slot for use by the clustered scan','line_number':642,'multiline':False]['text':' EOF filter above this stage and/or because the query asked for the latest "ts" value.','line_number':643,'multiline':False]['text':' If we're collecting execution stats during multi-planning and reached the end of the','line_number':655,'multiline':False]['text':' trial period because we've performed enough physical reads, bail out from the trial run','line_number':656,'multiline':False]['text':' by raising a special exception to signal a runtime planner that this candidate plan has','line_number':657,'multiline':False]['text':' completed its trial run early. Note that a trial period is executed only once per a','line_number':658,'multiline':False]['text':' PlanStage tree, and once completed never run again on the same tree.','line_number':659,'multiline':False]['text':' TODO: SERVER-72054','line_number':961,'multiline':False]['text':' RecordId are currently (incorrectly) accessed after EOF, therefore','line_number':962,'multiline':False]['text':' we must treat them as always accessible ratther invalidate them when slots are','line_number':963,'multiline':False]['text':' disabled. We should use slotsAccessible() instead of true, once the bug is fixed.','line_number':964,'multiline':False]['text':' If this stage has not been prepared, then yield recovery is a no-op.','line_number':989,'multiline':False]['text':' we're being opened after 'close()'. we need to re-acquire '_coll' in this case and','line_number':1041,'multiline':False]['text':' make some validity checks (the collection has not been dropped, renamed, etc.).','line_number':1042,'multiline':False]['text':' We are about to call next() on a storage cursor so do not bother saving our internal state in','line_number':1103,'multiline':False]['text':' case it yields as the state will be completely overwritten after the next() call.','line_number':1104,'multiline':False]['text':' Loop until we have a valid result or we return EOF.','line_number':1115,'multiline':False]['text':' Return EOF if the index key is found to be inconsistent.','line_number':1142,'multiline':False]['text':' No need to scan any further so bail out early.','line_number':1184,'multiline':False]['text':' namespace sbe','line_number':1281,'multiline':False]['text':' namespace mongo','line_number':1282,'multiline':False]