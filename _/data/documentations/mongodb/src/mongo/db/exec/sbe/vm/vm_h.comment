['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':52,'multiline':False]['text':' This is where Mongo differs from SQL.','line_number':164,'multiline':False]['text':' Special string comparison semantics do not apply to strings nested inside the','line_number':233,'multiline':False]['text':' CodeWScope scope object, so we do not pass through the string comparator.','line_number':234,'multiline':False]['text':' namespace','line_number':282,'multiline':False]['text':'*
 * Enumeration of built-in VM instructions. These are implemented in vm.cpp ByteCode::runInternal.
 *
 * See also enum class Builtin for built-in functions, like 'addToArray', that are implemented as
 * C++ rather than VM instructions.
 ','line_number':284,'multiline':True]['text':' 3 way comparison (spaceship) with bson woCompare semantics.','line_number':321,'multiline':False]['text':' collation-aware comparison instructions','line_number':324,'multiline':False]['text':' traverse projection paths','line_number':340,'multiline':False]['text':' traverse filter paths','line_number':342,'multiline':False]['text':' Iterates over values in column index cells. Skips values from nested arrays.','line_number':344,'multiline':False]['text':' Iterates the column index cell and returns values representing the types of cell's','line_number':346,'multiline':False]['text':' content, including arrays and nested objects. Skips contents of nested arrays.','line_number':347,'multiline':False]['text':' add or overwrite a field in a document','line_number':349,'multiline':False]['text':' number of elements','line_number':350,'multiline':False]['text':' offset is calculated from the end of instruction','line_number':381,'multiline':False]['text':' used only by simple local lambdas','line_number':386,'multiline':False]['text':' Applies a lambda to each element in a block, returning a new','line_number':393,'multiline':False]['text':' block.','line_number':394,'multiline':False]['text':' this is just a marker used to calculate number of instructions','line_number':396,'multiline':False]['text':'*
     * An instruction parameter descriptor. Values (instruction arguments) live on the VM stack and
     * the descriptor tells where to find it. The position on the stack is expressed as an offset
     * from the top of stack.
     * Optionally, an instruction can "consume" the value by popping the stack. All non-named
     * temporaries are popped after the use. Naturally, only the top of stack (offset 0) can be
     * popped. We do not support an arbitrary erasure from the middle of stack.
     ','line_number':409,'multiline':True]['text':' Get the size in bytes of an instruction parameter encoded in byte code.','line_number':422,'multiline':False]['text':' Make sure that values in this arrays are always in-sync with the enum.','line_number':460,'multiline':False]['text':'*
 * Enumeration of SBE VM built-in functions. These are dispatched by ByteCode::dispatchBuiltin() in
 * vm.cpp. An enum value 'foo' refers to a C++ implementing function named builtinFoo().
 *
 * See also struct Instruction for "functions" like 'setField' that are implemented as single VM
 * instructions.
 *
 * Builtins which can fit into one byte and have small arity are encoded using a special instruction
 * tag, functionSmall.
 ','line_number':638,'multiline':True]['text':' replace first occurrence of a specified substring with a diffferent substring','line_number':652,'multiline':False]['text':' create a new array from the top 'arity' values on the stack','line_number':665,'multiline':False]['text':' create a new object from 'arity' alternating field names and values on the stack','line_number':668,'multiline':False]['text':' KeyString to string','line_number':669,'multiline':False]['text':' new KeyString','line_number':670,'multiline':False]['text':' new KeyString (with collation)','line_number':671,'multiline':False]['text':' absolute value','line_number':672,'multiline':False]['text':' agg function to append to an array','line_number':681,'multiline':False]['text':' agg function to append to an array, fails when the array reaches specified','line_number':682,'multiline':False]['text':' size','line_number':683,'multiline':False]['text':' agg function to merge BSON documents','line_number':684,'multiline':False]['text':' agg function to append to a set','line_number':685,'multiline':False]['text':' agg function to append to a set, fails when the set reaches specified size','line_number':686,'multiline':False]['text':' agg function to append to a set (with collation)','line_number':687,'multiline':False]['text':' agg function to append to a set (with collation), fails when the set','line_number':688,'multiline':False]['text':' reaches specified size','line_number':689,'multiline':False]['text':' Special double summation.','line_number':691,'multiline':False]['text':' A variant of the standard sum aggregate function which maintains a DoubleDouble as the','line_number':693,'multiline':False]['text':' accumulator's underlying state.','line_number':694,'multiline':False]['text':' Converts a DoubleDouble sum into a single numeric scalar for use once the summation is','line_number':696,'multiline':False]['text':' complete.','line_number':697,'multiline':False]['text':' Converts a partial sum into a format suitable for serialization over the wire to the merging','line_number':699,'multiline':False]['text':' node. The merging node expects the internal state of the DoubleDouble summation to be','line_number':700,'multiline':False]['text':' serialized in a particular format.','line_number':701,'multiline':False]['text':' An agg function which can be used to sum a sequence of DoubleDouble inputs, producing the','line_number':703,'multiline':False]['text':' resulting total as a DoubleDouble.','line_number':704,'multiline':False]['text':' Implements Welford's online algorithm for computing sample or population standard deviation','line_number':707,'multiline':False]['text':' in a single pass.','line_number':708,'multiline':False]['text':' Combines standard deviations that have been partially computed on a subset of the data','line_number':710,'multiline':False]['text':' using Welford's online algorithm.','line_number':711,'multiline':False]['text':' test bitwise mask & value is zero','line_number':716,'multiline':False]['text':' test bitwise mask & value is mask','line_number':717,'multiline':False]['text':' test BinData with a bit position list','line_number':718,'multiline':False]['text':' implements $bsonSize','line_number':719,'multiline':False]['text':' Agg function to concatenate arrays, failing when the accumulator reaches a specified size.','line_number':731,'multiline':False]['text':' Agg functions to compute the set union of two arrays (no size cap).','line_number':734,'multiline':False]['text':' Agg functions to compute the set union of two arrays (with a size cap).','line_number':737,'multiline':False]['text':' compile <pattern, options> into value::pcreRegex','line_number':776,'multiline':False]['text':' helper functions for computation of sort keys','line_number':801,'multiline':False]['text':' helper functions for computation of sort keys','line_number':802,'multiline':False]['text':' Additional one-byte builtins go here.','line_number':895,'multiline':False]['text':' Start of 2 byte builtins.','line_number':897,'multiline':False]['text':'*
 * This enum defines indices into an 'Array' that store state for $AccumulatorN expressions.
 *
 * The array contains five elements:
 * - The element at index `kInternalArr` is the array that holds the values.
 * - The element at index `kStartIdx` is the logical start index in the internal array. This is
 *   used for emulating queue behaviour.
 * - The element at index `kMaxSize` is the maximum number entries the data structure holds.
 * - The element at index `kMemUsage` holds the current memory usage
 * - The element at index `kMemLimit` holds the max memory limit allowed
 * - The element at index `kIsGroupAccum` specifices if the accumulator belongs to group-by stage
 ','line_number':928,'multiline':True]['text':'*
 * Less than comparison based on a sort pattern.
 ','line_number':950,'multiline':True]['text':'*
 * Greater than comparison based on a sort pattern.
 ','line_number':967,'multiline':True]['text':'*
 * Comparison based on the key of a pair of elements.
 ','line_number':984,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that returns the partial sum result when 'needsMerge'
 * is requested.
 *
 * See 'builtinDoubleDoubleSumFinalize()' for more details.
 ','line_number':1013,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that accumulates $stdDevPop and $stdDevSamp results.
 *
 * The array contains 3 elements:
 * - The element at index `kCount` keeps track of the total number of values processd
 * - The elements at index `kRunningMean` keeps track of the mean of all the values that have been
 * processed.
 * - The elements at index `kRunningM2` keeps track of running M2 value (defined within:
 * https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm)
 * for all the values that have been processed.
 *
 * See 'aggStdDevImpl()'/'aggStdDev()'/'stdDevPopFinalize() / stdDevSampFinalize()' for more
 * details.
 ','line_number':1021,'multiline':True]['text':' This is actually not an index but represents the number of elements stored','line_number':1039,'multiline':False]['text':'*
 * This enum defines indices into an 'Array' that store state for rank expressions.
 *
 * The array contains three elements:
 * - The element at index `kLastValue` is the last value.
 * - The element at index `kLastValueIsNothing` is true if the last value is nothing.
 * - The element at index `kLastRank` is the rank of the last value.
 * - The element at index `kSameRankCount` is how many values are of the same rank as the last
 * value.
 ','line_number':1043,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that returns the result of accumulators that track the
 * size of accumulated values, such as 'addToArrayCapped' and 'addToSetCapped'.
 ','line_number':1055,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that stores the state for $expMovingAvg accumulator
 ','line_number':1061,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that stores the state for $sum window function
 * accumulator. Index `kSumAcc` stores the accumulator state of aggDoubleDoubleSum. Rest of the
 * indices store respective count of values encountered.
 ','line_number':1066,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that stores the state for $integral accumulator
 * Element at `kInputQueue` stores the queue of input values
 * Element at `kSortByQueue` stores the queue of sortBy values
 * Element at `kIntegral` stores the integral over the current window
 * Element at `kNanCount` stores the count of NaN values encountered
 * Element at `kunitMillis` stores the date unit (Null if not valid)
 * Element at `kIsNonRemovable` stores whether it belongs to a non-removable window
 ','line_number':1081,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that stores the state for $derivative accumulator
 * Element at `kInputQueue` stores the queue of input values
 * Element at `kSortByQueue` stores the queue of sortBy values
 * Element at `kunitMillis` stores the date unit (Null if not valid)
 ','line_number':1100,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that stores the state for a queue backed by a
 * circular array
 * Element at `kArray` stores the underlying array thats holds the elements. This should be
 * initialized to a non-zero size initially.
 * Element at `kStartIdx` stores the start position of the queue
 * Element at `kQueueSize` stores the size of the queue
 * The empty values in the array are filled with Null
 ','line_number':1108,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that store state for the removable
 * $covarianceSamp/$covariancePop expressions.
 ','line_number':1119,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that store state for the removable
 * $stdDevSamp/$stdDevPop expressions.
 ','line_number':1125,'multiline':True]['text':'*
 * This enum defines indices into an `Array` that store state for $linearFill
 * X, Y refers to sortby field and input field respectively
 * At any time, (X1, Y1) and (X2, Y2) defines two end-points with non-null input values
 * with zero or more null input values in between. Count stores the number of values left
 * till (X2, Y2). Initially it is equal to number of values between (X1, Y1) and (X2, Y2),
 * exclusive of first and inclusive of latter. It is decremented after each finalize call,
 * till this segment is exhausted and after which we find next segement(new (X2, Y2)
 * while (X1, Y1) is set to previous (X2, Y2))
 ','line_number':1131,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that store state for $firstN/$lastN
 * window functions
 ','line_number':1143,'multiline':True]['text':'*
 * This enum defines indices into an 'Array' that store state for $minN/$maxN/$topN/$bottomN
 * window functions.
 * Element at `kValues` stores the accmulator data structure with the elements
 * Element at `kN` stores an integer with the number of values minN/maxN should return
 * Element at `kMemUsage`stores the size of the multiset in bytes
 * Element at `kMemLimit`stores the maximum allowed size of the multiset in bytes
 ','line_number':1149,'multiline':True]['text':' Used when either `lhs` or `rhs` will run, but not both. This method will adjust the stack','line_number':1182,'multiline':False]['text':' size once in this call, rather than twice (once for each CodeFragment). The CodeFragments','line_number':1183,'multiline':False]['text':' must have the same stack size for us to know how to adjust the stack at compile time.','line_number':1184,'multiline':False]['text':' For printing from an interactive debugger.','line_number':1291,'multiline':False]['text':' Declares and defines a local variable frame at the current depth.','line_number':1294,'multiline':False]['text':' Local frame declaration is used to resolve the stack offsets of local variable access.','line_number':1295,'multiline':False]['text':' All references local variables must have matching frame declaration. The','line_number':1296,'multiline':False]['text':' variable reference and frame declaration is allowed to happen in any order.','line_number':1297,'multiline':False]['text':' Declares and defines a local variable frame at the current stack depth modifies by the given','line_number':1300,'multiline':False]['text':' offset.','line_number':1301,'multiline':False]['text':' Removes the frame from scope. The frame must have no outstanding fixups.','line_number':1304,'multiline':False]['text':' That is: must be declared or never referenced.','line_number':1305,'multiline':False]['text':' Returns whether the are any frames currently in scope.','line_number':1308,'multiline':False]['text':' Associates the current code position with a label.','line_number':1311,'multiline':False]['text':' Removes the label from scope. The label must have no outstanding fixups.','line_number':1314,'multiline':False]['text':' That is: must be associated with code position or never referenced.','line_number':1315,'multiline':False]['text':' Adjusts all the stack offsets in the outstanding fixups by the provided delta as follows: for','line_number':1321,'multiline':False]['text':' a given 'stackOffsetDelta' of frames in this CodeFragment:','line_number':1322,'multiline':False]['text':'   1. Adds this delta to the 'stackPosition' of all frames having a defined stack position.','line_number':1323,'multiline':False]['text':'   2. Adds this delta to all uses of frame stack posn's in code (located at 'fixupOffset's).','line_number':1324,'multiline':False]['text':' The net effect is to change the stack offsets of all frames with defined stack positions and','line_number':1325,'multiline':False]['text':' all code references to frame offsets in this CodeFragment by 'stackOffsetDelta'.','line_number':1326,'multiline':False]['text':' Stores the fixup information for stack frames.','line_number':1329,'multiline':False]['text':' fixupOffsets - byte offsets in the code where the stack depth of the frame was used and need','line_number':1330,'multiline':False]['text':'   fixup.','line_number':1331,'multiline':False]['text':' stackPosition - stack depth in elements of where the frame was declared, or kPositionNotSet','line_number':1332,'multiline':False]['text':'   if not known yet.','line_number':1333,'multiline':False]['text':' Stores the fixup information for labels.','line_number':1341,'multiline':False]['text':' fixupOffsets - offsets in the code where the label was used and need fixup.','line_number':1342,'multiline':False]['text':' definitionOffset - offset in the code where label was defined.','line_number':1343,'multiline':False]['text':' Convert a variable index to a stack offset.','line_number':1368,'multiline':False]['text':' Returns the frame with ID 'frameId' if it already exists, else creates and returns it.','line_number':1373,'multiline':False]['text':' For a given 'frame' in this CodeFragment, subtracts the frame's 'stackPosition' from all the','line_number':1376,'multiline':False]['text':' refs to this frame in code (located at 'fixupOffset's). This is done once the true stack','line_number':1377,'multiline':False]['text':' position of the frame is known, so code refs point to the correct location in the frame.','line_number':1378,'multiline':False]['text':' The sequence of byte code instructions this CodeFragment represents.','line_number':1384,'multiline':False]['text':' A collection of frame information for local variables.','line_number':1387,'multiline':False]['text':' Variables can be declared or referenced out of order and at the time of variable reference','line_number':1388,'multiline':False]['text':' it may not be known the relative stack offset of variable declaration w.r.t to its use.','line_number':1389,'multiline':False]['text':' This tracks both declaration info (stack depth) and use info (code offset).','line_number':1390,'multiline':False]['text':' When code is concatenated the offsets are adjusted if needed and when declaration stack depth','line_number':1391,'multiline':False]['text':' becomes known all fixups are resolved.','line_number':1392,'multiline':False]['text':' A collection of label information for labels that are currently in scope.','line_number':1395,'multiline':False]['text':' Labels can be defined or referenced out of order and at at time of label reference (e.g:','line_number':1396,'multiline':False]['text':' jumps or lambda creation), the exact relative offset may not be yet known.','line_number':1397,'multiline':False]['text':' This tracks both label definition (code offset where label is defined) and use info for jumps','line_number':1398,'multiline':False]['text':' or lambdas (code offset). When code is concatenated the offsets are adjusted, if needed, and','line_number':1399,'multiline':False]['text':' when label definition offset becomes known all fixups are resolved.','line_number':1400,'multiline':False]['text':' Delta number of '_argStack' entries effect of this CodeFragment; may be negative.','line_number':1403,'multiline':False]['text':' Maximum absolute number of entries in '_argStack' from this CodeFragment.','line_number':1406,'multiline':False]['text':' The number of bytes per stack entry.','line_number':1411,'multiline':False]['text':'*
     * Run a usually Boolean check against the tag of the item on top of the stack and add its
     * result to the stack as a TypeTags::Boolean value. However, if the stack item to be checked
     * itself has a tag of TagTypes::Nothing, this instead pushes a result of TagTypes::Nothing.
     ','line_number':1443,'multiline':True]['text':' This is an implementation of the following algorithm:','line_number':1559,'multiline':False]['text':' https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm','line_number':1560,'multiline':False]['text':'*
     * produceBsonObject() takes a MakeObjSpec ('spec'), a root value ('rootTag' and 'rootVal'),
     * and 0 or more "computed" values as inputs, it builds an output BSON object based on the
     * instructions provided by 'spec' and based on the contents of 'root' and the computed input
     * values, and then it returns the output object. (Note the computed input values are not
     * directly passed in as C++ parameters -- instead the computed input values are passed via
     * the VM's stack.)
     ','line_number':1764,'multiline':True]['text':' Invoke the produceBsonObject() lambda with the appropriate iterator type. For','line_number':1782,'multiline':False]['text':' SBE objects, we use ObjectCursor. For all other types, we use BsonObjCursor.','line_number':1783,'multiline':False]['text':'*
     * This struct is used by traverseAndProduceBsonObj() to hold args that stay the same across
     * each level of recursion. Also, by making use of this struct, on most common platforms we
     * will be able to pass all of traverseAndProduceBsonObj()'s args via CPU registers (rather
     * than passing them via the native stack).
     ','line_number':1811,'multiline':True]['text':' The template parameter is false for a regular DoubleDouble summation and true if merging','line_number':1882,'multiline':False]['text':' partially computed DoubleDouble sums.','line_number':1883,'multiline':False]['text':' The template parameter is false for a regular std dev and true if merging partially computed','line_number':1891,'multiline':False]['text':' standard devations.','line_number':1892,'multiline':False]['text':' Block builtins','line_number':2118,'multiline':False]['text':'*
     * Dispatcher for calls to VM built-in C++ functions enumerated by enum class Builtin.
     ','line_number':2154,'multiline':True]['text':' The top entry in '_argStack', or one element before the stack when empty.','line_number':2280,'multiline':False]['text':' The byte following '_argStack's current memory block.','line_number':2283,'multiline':False]['text':' Expression execution stack of (owned, tag, value) tuples each of 'sizeOfElement' bytes.','line_number':2286,'multiline':False]['text':' Invoke the lambda.','line_number':2296,'multiline':False]['text':' Move the result off the stack, make sure it's owned, and return it.','line_number':2299,'multiline':False]['text':' There are five instantiations of the templated produceBsonObject() method, one for each','line_number':2344,'multiline':False]['text':' type of MakeObj input cursor.','line_number':2345,'multiline':False]['text':' namespace vm','line_number':2378,'multiline':False]['text':' namespace sbe','line_number':2379,'multiline':False]['text':' namespace mongo','line_number':2380,'multiline':False]