['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Performs a multi-key hash lookup, that is a combination of left join and wind operations.
 * Rows from 'inner' and 'outer' sides can be associated with multiple keys. 'inner' and 'outer'
 * rows are considered matching, if they match on at least one of the associated keys. The result of
 * a lookup is each 'outer' paired paired with an array containing all matched 'inner' rows for that
 * 'outer' row. If no 'inner' rows match, Nothing value will be used instead of array.
 *
 * All rows from the 'inner' side are used to construct a hash table. Each 'inner' row can be
 * associated with multiple hash table entries. To avoid space amplification, each 'inner' row is
 * given a unique sequential id and the hash table maps keys to ids rather than rows themselves.
 *
 * This is a binding reflector for the 'inner' side; since the data is materialized in a hash
 * table, stages higher in the tree cannot see any slots lower in the tree on the  'inner' side.
 * This is _not_ the case for the 'outer' side, since it can stream data as it probes the hash
 * table. This stage preserves all slots and order of the 'outer' side.
 *
 * The 'outerCond' specifies the slot that contains match keys for the 'outer' row. If the
 * 'outerCond' slot contains an array, the array items will be used as match keys, otherwise the
 * slot value itself will be used a single match key.
 *
 * The 'innerCond' specifies the slot that contains match keys for the 'inner' row. If the
 * 'innerCond' slot contains an array, the array items will be used as match keys, otherwise the
 * slot value itself will be used as a single match key.
 *
 * The 'innerProjects' specifies the slots that contains the projected values of the 'inner' row.
 * These values will be buffered and made visible to 'innerAggs' expressions.
 *
 * The 'innerAggs' specifies an aggregate expressions SlotMap that will be used to compute the
 * aggregation results for each outer row. Those slots are accessible outside of this stage.
 *
 * An optional 'collatorSlot' can be provided to make the match predicate use a special definition
 * for string equality. For example, this can be used to perform a case-insensitive matching on
 * string values.
 *
 * Debug string representation:
 *
 *   hash_lookup [slot_1 = expr_1, ..., slot_n = expr_n] collatorSlot?
 *     outer outerCond outerStage
 *     inner innerCond [innerProjects] innerStage
 ','line_number':64,'multiline':True]['text':' HashLookupStage::getNext() only guarantees that outer child's getNext() was called. Thus,','line_number':131,'multiline':False]['text':' it is safe to propagate disableSlotAccess to the outer child, but not to the inner child.','line_number':132,'multiline':False]['text':' NOLINT','line_number':140,'multiline':False]['text':' Spilling helpers.','line_number':154,'multiline':False]['text':'*
     * Constructs a RecordId for a value index. It must be shifted by 1 since a valid RecordId
     * with the value 0 is invalid.
     ','line_number':177,'multiline':True]['text':'*
     * Normalizes a string if _collatorSlot is pouplated and returns a third parameter to let the
     * caller know if it should own the tag and value.
     ','line_number':198,'multiline':True]['text':' The accessor for the '_ht' agg value.','line_number':231,'multiline':False]['text':' Accessor for the buffered value stored in the '_recordStore' when data is spilled to','line_number':234,'multiline':False]['text':' disk.','line_number':235,'multiline':False]['text':' Accessor for collator. Only set if collatorSlot provided during construction.','line_number':240,'multiline':False]['text':' Key used to probe inside the hash table.','line_number':243,'multiline':False]['text':' Result aggregate row;','line_number':246,'multiline':False]['text':' Memory tracking and spilling to disk.','line_number':258,'multiline':False]['text':' This counter tracks an exact size for the '_ht' and an approximate size for the buffered','line_number':263,'multiline':False]['text':' rows in '_buffer'.','line_number':264,'multiline':False]['text':' namespace mongo::sbe','line_number':272,'multiline':False]