['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'* An internal class that represents the position of a field in a document.
 *
 *  This is a low-level class that you usually don't need to worry about.
 *
 *  The main use of this class for clients is to allow refetching or
 *  setting a field without looking it up again. It has a default
 *  constructor that represents a field not being in a document. It also
 *  has a method 'bool found()' that tells you if a field was found.
 *
 *  For more details see document_internal.h
 ','line_number':71,'multiline':True]['text':'* A Document is similar to a BSONObj but with a different in-memory representation.
 *
 *  A Document can be treated as a const std::map<std::string, const Value> that is
 *  very cheap to copy and is Assignable.  Therefore, it is acceptable to
 *  pass and return by Value. Note that the data in a Document is
 *  immutable, but you can replace a Document instance with assignment.
 *
 *  See Also: Value class in Value.h
 ','line_number':84,'multiline':True]['text':'*
     * Operator overloads for relops return a DeferredComparison which can subsequently be evaluated
     * by a DocumentComparator.
     ','line_number':95,'multiline':True]['text':'/ Empty Document (does no allocation)','line_number':132,'multiline':False]['text':'/ Defaulted copy and move constructors.','line_number':135,'multiline':False]['text':'/ Create a new Document deep-converted from the given BSONObj.','line_number':139,'multiline':False]['text':'*
     * Create a new document from key, value pairs. Enables constructing a document using this
     * syntax:
     * auto document = Document{{"hello", "world"}, {"number": 1}};
     ','line_number':142,'multiline':True]['text':'/ Defaulted copy and move assignment operators.','line_number':154,'multiline':False]['text':'*
     * Look up a field by key name. Returns Value() if no such field. O(1).
     *
     * Note that this method does *not* traverse nested documents and arrays, use getNestedField()
     * instead.
     ','line_number':158,'multiline':True]['text':'/ Look up a field by Position. See positionOf and getNestedField.','line_number':173,'multiline':False]['text':'*
     * Returns the Value stored at the location given by 'path', or Value() if no such path exists.
     * If 'positions' is non-null, it will be filled with a path suitable to pass to
     * MutableDocument::setNestedField().
     ','line_number':178,'multiline':True]['text':'*
     * Returns field at given path as either BSONElement or Value, depending on how it is
     * stored. If an array is encountered in the middle of the path the TraversesArrayTag is
     * returned.
     *
     * It is possible, however, for the returned BSONElement/Value to be an array if the given path
     * ends with an array. For example, the document {a: {b:[1,2]}} and the path "a.b" will return
     * a BSONElement or Value for the array [1, 2].
     *
     * If the field is not found, std::monostate is returned.
     ','line_number':185,'multiline':True]['text':' Number of fields in this document. Exp. runtime O(n).','line_number':200,'multiline':False]['text':'/ True if this document has no fields.','line_number':205,'multiline':False]['text':'/ Create a new FieldIterator that can be used to examine the Document's fields in order.','line_number':210,'multiline':False]['text':'/ Convenience type for dealing with fields. Used by FieldIterator.','line_number':213,'multiline':False]['text':'*
     * Get the approximate size of the Document, plus its underlying storage and sub-values. Returns
     * size in bytes. The return value of this function is snapshotted. All subsequent calls of this
     * method will return the same value.
     *
     * Note: Some memory may be shared with other Documents or between fields within a single
     * Document so this can overestimate usage.
     *
     * Note: the value returned by this function includes the size of the metadata associated with
     * the document.
     ','line_number':216,'multiline':True]['text':'*
     * Same as 'getApproximateSize()', but this method re-computes the size on every call.
     ','line_number':229,'multiline':True]['text':'*
     * Return the approximate amount of space used by metadata.
     ','line_number':234,'multiline':True]['text':'*
     * Compare two documents. Most callers should prefer using DocumentComparator instead. See
     * document_comparator.h for details.
     *
     *  BSON document field order is significant, so this just goes through
     *  the fields in order.  The comparison is done in roughly the same way
     *  as strings are compared, but comparing one field at a time instead
     *  of one character at a time.
     *
     *  Pass a non-null StringDataComparator if special string comparison semantics are
     *  required. If the comparator is null, then a simple binary compare is used for strings. This
     *  comparator is only used for string *values*; field names are always compared using simple
     *  binary compare.
     *
     *  Note: This does not consider metadata when comparing documents.
     *
     *  @returns an integer less than zero, zero, or an integer greater than
     *           zero, depending on whether lhs < rhs, lhs == rhs, or lhs > rhs
     *  Warning: may return values other than -1, 0, or 1
     ','line_number':241,'multiline':True]['text':'*
     * Returns a cache-only copy of the document with no backing bson.
     ','line_number':271,'multiline':True]['text':'* Calculate a hash value.
     *
     * Meant to be used to create composite hashes suitable for
     * hashed container classes such as unordered_map.
     ','line_number':278,'multiline':True]['text':'*
     * Returns true, if this document is trivially convertible to BSON, meaning the underlying
     * storage is already in BSON format and there are no damages.
     ','line_number':285,'multiline':True]['text':'*
     * Returns true, if this document is trivially convertible to BSON with metadata, meaning the
     * underlying storage is already in BSON format and there are no damages.
     ','line_number':293,'multiline':True]['text':'*
     * Serializes this document to the BSONObj under construction in 'builder'. Metadata is not
     * included. Throws a AssertionException if 'recursionLevel' exceeds the maximum allowable
     * depth.
     ','line_number':301,'multiline':True]['text':'*
     * Serializes this document iff the conversion is "trivial," meaning that the underlying storage
     * is already in BSON format and there are no damages. No conversion is necessary; this function
     * just returns the already existing BSON.
     *
     * When the trivial conversion is not possible, this function returns boost::none.
     ','line_number':319,'multiline':True]['text':'*
     * Like the 'toBson()' method, but includes metadata as top-level fields.
     ','line_number':328,'multiline':True]['text':'*
     * Like Document(BSONObj) but treats top-level fields with special names as metadata.
     * Special field names are available as static constants on this class with names starting
     * with metaField.
     ','line_number':344,'multiline':True]['text':' Support BSONObjBuilder and BSONArrayBuilder "stream" API','line_number':351,'multiline':False]['text':'* Return the abstract Position of a field, suitable to pass to operator[] or getField().
     *  This can potentially save time if you need to refer to a field multiple times.
     ','line_number':354,'multiline':True]['text':'* Clone a document.
     *
     *  This should only be called by MutableDocument and tests
     *
     *  The new document shares all the fields' values with the original.
     *  This is not a deep copy.  Only the fields on the top-level document
     *  are cloned.
     ','line_number':361,'multiline':True]['text':'*
     * Returns a const reference to an object housing the metadata fields associated with this
     * WorkingSetMember.
     ','line_number':373,'multiline':True]['text':'/ members for Sorter','line_number':381,'multiline':False]['text':' unused','line_number':382,'multiline':False]['text':'*
     * Returns the amount of memory used by this 'Document' instance when serialized, e.g. when
     * serialized as BSON for returning to a client or when serialized for spilling to disk. This
     * can differ substantially from 'getApproximateSize()' due to the fact that not all portions of
     * the backing BSON may appear in the serialized version of the document.
     ','line_number':386,'multiline':True]['text':'*
     * Returns a document that owns the underlying BSONObj.
     ','line_number':394,'multiline':True]['text':'*
     * Needed to satisfy the Sorter interface. This method throws an assertion.
     ','line_number':400,'multiline':True]['text':'*
     * Returns true if the underlying BSONObj is owned.
     ','line_number':407,'multiline':True]['text':'*
     * Returns true if the document has been modified (i.e. it differs from the underlying BSONObj).
     ','line_number':414,'multiline':True]['text':'/ only for testing','line_number':425,'multiline':False]['text':'','line_number':449,'multiline':False]['text':' Comparison API.','line_number':450,'multiline':False]['text':'','line_number':451,'multiline':False]['text':' Document instances can be compared either using Document::compare() or via operator overloads.','line_number':452,'multiline':False]['text':' Most callers should prefer operator overloads. Note that the operator overloads return a','line_number':453,'multiline':False]['text':' DeferredComparison, which must be subsequently evaluated by a DocumentComparator. See','line_number':454,'multiline':False]['text':' document_comparator.h for details.','line_number':455,'multiline':False]['text':'','line_number':456,'multiline':False]['text':'* This class is returned by MutableDocument to allow you to modify its values.
 *  You are not allowed to hold variables of this type (enforced by the type system).
 ','line_number':482,'multiline':True]['text':'* These are designed to allow things like mutDoc["a"]["b"]["c"] = Value(10);
     *  It is safe to use even on nonexistent fields.
     ','line_number':495,'multiline':True]['text':'/ can only be constructed or copied by self and friends','line_number':511,'multiline':False]['text':'/ Used by MutableDocument(MutableValue)','line_number':515,'multiline':False]['text':' If the current value isn't an object we replace it with a Object-typed Value.','line_number':518,'multiline':False]['text':' Note that we can't just use Document() here because that is a NULL pointer and','line_number':519,'multiline':False]['text':' Value doesn't refcount NULL pointers. This led to a memory leak (SERVER-10554)','line_number':520,'multiline':False]['text':' because MutableDocument::newStorage() would set a non-NULL pointer into the Value','line_number':521,'multiline':False]['text':' without setting the refCounter bit. While allocating a DocumentStorage here could','line_number':522,'multiline':False]['text':' result in an allocation where none is needed, in practice this is only called','line_number':523,'multiline':False]['text':' when we are about to add a field to the sub-document so this just changes where','line_number':524,'multiline':False]['text':' the allocation is done.','line_number':525,'multiline':False]['text':' not assignable with another MutableValue','line_number':532,'multiline':False]['text':'* MutableDocument is a Document builder that supports both adding and updating fields.
 *
 *  This class fills a similar role to BSONObjBuilder, but allows you to
 *  change existing fields and more easily write to sub-Documents.
 *
 *  To preserve the immutability of Documents, MutableDocument will
 *  shallow-clone its storage on write (COW) if it is shared with any other
 *  Documents.
 ','line_number':537,'multiline':True]['text':'* Create a new empty Document.
     *
     *  @param expectedFields a hint at what the number of fields will be, if known.
     *         this can be used to increase memory allocation efficiency. There is
     *         no impact on correctness if this field over or under estimates.
     *
     *  TODO: find some way to convey field-name sizes to make even more efficient
     ','line_number':551,'multiline':True]['text':'/ No copy of data yet. Copy-on-write. See storage()','line_number':562,'multiline':False]['text':'* Replace the current base Document with the argument
     *
     *  All Positions from the passed in Document are valid and refer to the
     *  same field in this MutableDocument.
     ','line_number':572,'multiline':True]['text':'*
     * Replace the current base Document with the BSON object. Setting 'bsonHasMetadata' to true
     * signals that the BSON object contains metadata fields.
     ','line_number':581,'multiline':True]['text':'* Add the given field to the Document.
     *
     *  BSON documents' fields are ordered; the new Field will be
     *  appended to the current list of fields.
     *
     *  Unlike getField/setField, addField does not look for a field with the
     *  same name and therefore cannot be used to update fields.
     *
     *  It is an error to add a field that has the same name as another field.
     *
     *  TODO: This is currently allowed but getField only gets first field.
     *        Decide what level of support is needed for duplicate fields.
     *        If duplicates are not allowed, consider removing this method.
     ','line_number':589,'multiline':True]['text':'* Update field by key. If there is no field with that key, add one.
     *
     *  If the new value is missing(), the field is logically removed.
     ','line_number':617,'multiline':True]['text':'/ Update field by Position. Must already be a valid Position.','line_number':637,'multiline':False]['text':'/ Logically remove a field. Note that memory usage does not decrease.','line_number':651,'multiline':False]['text':'* Gets/Sets a nested field given a path.
     *
     *  All fields along path are created as empty Documents if they don't exist or are any other
     * type. Does *not* traverse nested arrays when evaluating a nested path, instead returning
     * Value() if the dotted field points to a nested object within an array.
     ','line_number':659,'multiline':True]['text':'/ Takes positions vector from Document::getNestedField. All fields in path must exist.','line_number':673,'multiline':False]['text':'*
     * Copies all metadata from source if it has any.
     * Note: does not clear metadata from this.
     ','line_number':682,'multiline':True]['text':'*
     * Returns a non-const reference to an object housing the metadata fields associated with this
     * WorkingSetMember.
     ','line_number':690,'multiline':True]['text':'*
     * Clears all metadata fields inside this Document, and returns a structure containing that
     * extracted metadata to the caller. The metadata can then be attached to a new Document or to
     * another data structure that houses metadata.
     ','line_number':698,'multiline':True]['text':'*
     * Transfers metadata fields to this Document. By pairs of calls to releaseMetadata() and
     * setMetadata(), callers can cheaply transfer metadata between Documents.
     ','line_number':707,'multiline':True]['text':'* Convert to a read-only document and release reference.
     *
     *  Call this to indicate that you are done with this Document and will
     *  not be making further changes from this MutableDocument.
     *
     *  TODO: there are some optimizations that may make sense at freeze time.
     ','line_number':715,'multiline':True]['text':' This essentially moves _storage into a new Document by way of temp.','line_number':724,'multiline':False]['text':'inc_ref_count=','line_number':726,'multiline':True]['text':'/ Used to simplify the common pattern of creating a value of the document.','line_number':732,'multiline':False]['text':'* Borrow a readable reference to this Document.
     *
     *  Note that unlike freeze(), this indicates intention to continue
     *  modifying this document. The returned Document will not observe
     *  future changes to this MutableDocument.
     *
     *  Note that the computed snapshotted approximate size of the Document
     *  is not preserved across calls.
     ','line_number':737,'multiline':True]['text':'*
     * Returns true if the underlying BSONObj is owned.
     ','line_number':755,'multiline':True]['text':'*
     * Takes the ownership of the underlying BSONObj if it is not owned.
     ','line_number':762,'multiline':True]['text':' for access to next constructor','line_number':770,'multiline':False]['text':' This is split into 3 functions to speed up the fast-path','line_number':779,'multiline':False]['text':' This function exists to ensure this is safe','line_number':787,'multiline':False]['text':' recursive helpers for same-named public methods','line_number':799,'multiline':False]['text':' this should only be called by storage methods and peek/freeze/resetsnapshottedApproximateSize','line_number':803,'multiline':False]['text':' These are both const to prevent modifications bypassing storage() method.','line_number':816,'multiline':False]['text':' They always point to NULL or an object with dynamic type DocumentStorage.','line_number':817,'multiline':False]['text':' Only used in constructors and destructor','line_number':818,'multiline':False]['text':' references either above member or genericRCPtr in a Value','line_number':819,'multiline':False]['text':'/ This is the public iterator over a document','line_number':822,'multiline':False]['text':'/ Ask if there are more fields to return.','line_number':827,'multiline':False]['text':'/ Get next item and advance iterator','line_number':832,'multiline':False]['text':'*
     * Returns the name of the field the iterator currently points to, without advancing.
     ','line_number':841,'multiline':True]['text':'*
     * Advance the iterator without accessing the current Value.
     ','line_number':849,'multiline':True]['text':' We'll hang on to the original document to ensure we keep its storage alive','line_number':857,'multiline':False]['text':'/ Macro to create Document literals. Syntax is the same as the BSON("name" << 123) macro.','line_number':862,'multiline':False]['text':'* Macro to create Array-typed Value literals.
 *  Syntax is the same as the BSON_ARRAY(123 << "foo") macro.
 ','line_number':865,'multiline':True]['text':' These classes are only for the implementation of the DOC and DOC_ARRAY macros.','line_number':871,'multiline':False]['text':' They should not be used for any other reason.','line_number':872,'multiline':False]['text':' The stream alternates between DocumentStream taking a fieldname','line_number':874,'multiline':False]['text':' and ValueStream taking a Value.','line_number':875,'multiline':False]['text':'/ support anything directly supported by a value constructor','line_number':885,'multiline':False]['text':'/ support anything directly supported by a value constructor','line_number':919,'multiline':False]['text':' ======================= INLINED IMPLEMENTATIONS ========================== ','line_number':937,'multiline':True]['text':' namespace mongo','line_number':949,'multiline':False]