['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' The first byte is a flag to tell us whether the ArraySet had a collation prior to','line_number':144,'multiline':False]['text':' serialization.','line_number':145,'multiline':False]['text':' The first byte is a flag to tell us whether the ArrayMultiSet had a collation prior','line_number':162,'multiline':False]['text':' to serialization.','line_number':163,'multiline':False]['text':' If an ArraySet or an ArrayMultiSet has a collation, we serialize a byte which acts as a flag','line_number':276,'multiline':False]['text':' as to whether the set should be created with a collation upon deserialization. Also, we','line_number':277,'multiline':False]['text':' assume that the caller which does deserialization will have the context about what','line_number':278,'multiline':False]['text':' the collation is, and therefore we can save space by not serializing the full','line_number':279,'multiline':False]['text':' description of the collation.','line_number':280,'multiline':False]['text':' Small strings cannot contain null bytes, so it is safe to serialize them as plain','line_number':327,'multiline':False]['text':' C-strings with a null terminator.','line_number':328,'multiline':False]['text':' includeEndingNull ','line_number':329,'multiline':True]['text':' includeEndingNull ','line_number':337,'multiline':True]['text':' includeEndingNull ','line_number':361,'multiline':True]['text':' includeEndingNull ','line_number':414,'multiline':True]['text':' includeEndingNull ','line_number':415,'multiline':True]['text':' includeEndingNull ','line_number':421,'multiline':True]['text':' includeEndingNull ','line_number':427,'multiline':True]['text':' includeEndingNull ','line_number':434,'multiline':True]['text':' Small strings cannot contain null bytes, so it is safe to serialize them as plain','line_number':511,'multiline':False]['text':' C-strings with a null terminator.','line_number':512,'multiline':False]['text':' TODO SERVER-61629: convert this to serialize the 'arr' directly instead of','line_number':539,'multiline':False]['text':' constructing a BSONArray.','line_number':540,'multiline':False]['text':' TODO SERVER-61629: convert this to serialize the 'obj' directly instead of','line_number':548,'multiline':False]['text':' constructing a BSONObj.','line_number':549,'multiline':False]['text':' inverted ','line_number':690,'multiline':True]['text':' These are shallow types.','line_number':703,'multiline':False]['text':' There are deep types.','line_number':718,'multiline':False]['text':' The 32-bit 'length' at the beginning of a BinData does _not_ account for the','line_number':788,'multiline':False]['text':' 'length' field itself or the 'subtype' field, so we account for that here.','line_number':789,'multiline':False]['text':' CodeWScope's 'length' field accounts for the full length of the CodeWScope','line_number':812,'multiline':False]['text':' including the 'length' field itself.','line_number':813,'multiline':False]['text':' This type points to a block of memory that it doesn't own, so we don't acccount','line_number':817,'multiline':False]['text':' for the size of this block of memory here.','line_number':818,'multiline':False]['text':' The timezone obj stores an offset counter, and a pointer to a timelib struct','line_number':821,'multiline':False]['text':' which it doesn't own, so we don't need to account for the timelib obj.','line_number':822,'multiline':False]['text':' This type points to a block of memory that it doesn't own, so we don't acccount','line_number':827,'multiline':False]['text':' for the size of this block of memory here.','line_number':828,'multiline':False]['text':' This check is needed to ensure that 'std::vector<MaterializedRow>' uses move constructor of','line_number':864,'multiline':False]['text':' 'MaterializedRow' during reallocation. This way, values inside 'MaterializedRow' are not copied','line_number':865,'multiline':False]['text':' during reallocation and references to them remain valid.','line_number':866,'multiline':False]['text':' namespace mongo::sbe::value','line_number':872,'multiline':False]