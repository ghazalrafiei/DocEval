['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Helper for ExpressionPow to determine wither base^exp can be represented in a 64 bit int.
 *
 *'base' and 'exp' are both integers. Assumes 'exp' is in the range [0, 63].
 ','line_number':62,'multiline':True]['text':' Array indices correspond to exponents 0 through 63. The values in each index are the min','line_number':75,'multiline':False]['text':' and max bases, respectively, that can be raised to that exponent without overflowing a','line_number':76,'multiline':False]['text':' 64-bit int. For max bases, this was computed by solving for b in','line_number':77,'multiline':False]['text':' b = (2^63-1)^(1/exp) for exp = [0, 63] and truncating b. To calculate min bases, for even','line_number':78,'multiline':False]['text':' exps the equation  used was b = (2^63-1)^(1/exp), and for odd exps the equation used was','line_number':79,'multiline':False]['text':' b = (-2^63)^(1/exp). Since the magnitude of long min is greater than long max, the','line_number':80,'multiline':False]['text':' magnitude of some of the min bases raised to odd exps is greater than the corresponding','line_number':81,'multiline':False]['text':' max bases raised to the same exponents.','line_number':82,'multiline':False]['text':' 0','line_number':85,'multiline':False]['text':' 10','line_number':95,'multiline':False]['text':' 20','line_number':105,'multiline':False]['text':' 30','line_number':115,'multiline':False]['text':' 40','line_number':125,'multiline':False]['text':' 50','line_number':135,'multiline':False]['text':' 60','line_number':145,'multiline':False]['text':' Structures defining trigonometric functions computation.','line_number':158,'multiline':False]['text':'*
 * Template for generic trigonometric function. The type in the template is a structure defining the
 * computation of the respective trigonometric function.
 ','line_number':291,'multiline':True]['text':' namespace','line_number':327,'multiline':False]['text':' We don't need to use 'ValueGuard' for decimal because we've already allocated enough storage','line_number':351,'multiline':False]['text':' and Array::push_back() is guaranteed to not throw.','line_number':352,'multiline':False]['text':' namespace','line_number':382,'multiline':False]['text':' Only uses tag information from the kNonDecimalTotalTag element.','line_number':397,'multiline':False]['text':' Only uses values from the kNonDecimalTotalSum/kNonDecimalTotalAddend elements.','line_number':402,'multiline':False]['text':' We're guaranteed to always have a valid nonDecimalTotal value.','line_number':409,'multiline':False]['text':' We haven't seen any decimal value so far.','line_number':414,'multiline':False]['text':' We have seen a decimal for the first time and start storing the total sum','line_number':417,'multiline':False]['text':' of decimal values into 'kDecimalTotal' element and the total sum of non-decimal','line_number':418,'multiline':False]['text':' values into 'kNonDecimalXXX' elements.','line_number':419,'multiline':False]['text':' We've seen a decimal value. We've already started storing the total sum of decimal values','line_number':430,'multiline':False]['text':' into 'kDecimalTotal' element and the total sum of non-decimal values into','line_number':431,'multiline':False]['text':' 'kNonDecimalXXX' elements.','line_number':432,'multiline':False]['text':' First aggregate the non-decimal sum, then the non-decimal addend. Both should be doubles.','line_number':467,'multiline':False]['text':' There is a special case when the 'sum' is infinite and the 'addend' is NaN. This DoubleDouble','line_number':474,'multiline':False]['text':' value represents infinity, not NaN. Therefore, we avoid incorporating the NaN 'addend' value','line_number':475,'multiline':False]['text':' into the sum.','line_number':476,'multiline':False]['text':' Determine the widest non-decimal type that we've seen so far, and set the accumulator state','line_number':482,'multiline':False]['text':' accordingly. We do this after computing the sums, since 'aggDoubleDoubleSumImpl()' will','line_number':483,'multiline':False]['text':' set the widest type to 'NumberDouble' when we call it above.','line_number':484,'multiline':False]['text':' If there's a decimal128 sum as part of the incoming DoubleDouble sum, incorporate it into the','line_number':494,'multiline':False]['text':' accumulator.','line_number':495,'multiline':False]['text':' We're guaranteed to always have a valid nonDecimalTotal value.','line_number':524,'multiline':False]['text':' We've not seen any decimal value.','line_number':529,'multiline':False]['text':' Sum doesn't fit a NumberLong, so return a NumberDouble instead.','line_number':547,'multiline':False]['text':' We've seen a decimal value.','line_number':557,'multiline':False]['text':' Within our query execution engine, $stdDevPop and $stdDevSamp do not maintain the precision','line_number':590,'multiline':False]['text':' of decimal types and converts all values to double. We do this here by converting','line_number':591,'multiline':False]['text':' NumberDecimal to Decimal128 and then extract a double value from it.','line_number':592,'multiline':False]['text':' If the incoming partial aggregate has a count of zero, then it represents the partial','line_number':640,'multiline':False]['text':' standard deviation of no data points. This means that it can be safely ignored, and we return','line_number':641,'multiline':False]['text':' the accumulator as is.','line_number':642,'multiline':False]['text':' We've already handled the case where 'newCount' is zero above. This means that 'totalCount'','line_number':668,'multiline':False]['text':' must be positive, and prevents us from ever dividing by zero in the subsequent calculation.','line_number':669,'multiline':False]['text':' If oldCount is zero, we should avoid needless calcuations, because they may damage floating','line_number':671,'multiline':False]['text':' point precision.','line_number':672,'multiline':False]['text':' Absolute value of the minimum int64_t value does not fit in any integer type.','line_number':872,'multiline':False]['text':' Ceil on integer values is the identity function.','line_number':912,'multiline':False]['text':' Floor on integer values is the identity function.','line_number':939,'multiline':False]['text':' Logarithms are only defined on the domain of positive numbers and NaN. NaN is a','line_number':979,'multiline':False]['text':' legal input to ln(), returning NaN.','line_number':980,'multiline':False]['text':' Note: NaN is a legal input to log(), returning NaN.','line_number':983,'multiline':False]['text':' Logarithms are only defined on the domain of positive numbers and NaN. NaN is a','line_number':1021,'multiline':False]['text':' legal input to log10(), returning NaN.','line_number':1022,'multiline':False]['text':' Sqrt is only defined in the domain of non-negative numbers and NaN. NaN is a','line_number':1062,'multiline':False]['text':' legal input to sqrt(), returning NaN.','line_number':1063,'multiline':False]['text':' Note: NaN is a legal input to sqrt(), returning NaN.','line_number':1066,'multiline':False]['text':' pow supports only numeric values','line_number':1099,'multiline':False]['text':' If either argument is a double, return a double.','line_number':1116,'multiline':False]['text':' If both values are int and the res fits in int then return int, otherwise return long','line_number':1134,'multiline':False]['text':' should be an int since all arguments were int and it fits','line_number':1144,'multiline':False]['text':' Avoid doing repeated multiplication or using std::pow if the base is -1, 0, or 1.','line_number':1152,'multiline':False]['text':' 0^0 = 1.','line_number':1155,'multiline':False]['text':' 0^x where x > 0 is 0.','line_number':1158,'multiline':False]['text':' We should have checked earlier that 0 to a negative power is banned.','line_number':1162,'multiline':False]['text':' 1^x = 1.','line_number':1165,'multiline':False]['text':' ... -1^-4 = -1^-2 = -1^0 = -1^2 = -1^4 = -1^6 ... = 1','line_number':1168,'multiline':False]['text':' ... -1^-3 = -1^-1 = -1^1 = -1^3 = -1^5 = -1^7 ... = -1','line_number':1169,'multiline':False]['text':' If the base is not 0, 1, or -1 and the exponent is too large, or negative,','line_number':1172,'multiline':False]['text':' the result cannot be represented as a long.','line_number':1173,'multiline':False]['text':' It's still possible that the result cannot be represented as a long. If that's the case,','line_number':1179,'multiline':False]['text':' return a double.','line_number':1180,'multiline':False]['text':' Use repeated multiplication, since pow() casts args to doubles which could result in','line_number':1188,'multiline':False]['text':' loss of precision if arguments are very large.','line_number':1189,'multiline':False]['text':' 'exp' is now guaranteed to be even.','line_number':1198,'multiline':False]['text':' namespace vm','line_number':1383,'multiline':False]['text':' namespace sbe','line_number':1384,'multiline':False]['text':' namespace mongo','line_number':1385,'multiline':False]