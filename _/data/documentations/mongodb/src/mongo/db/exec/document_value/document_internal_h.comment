['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'* Helper class to make the position in a document abstract
 *  Warning: This is NOT guaranteed to be the ordered position.
 *           eg. the first field may not be at Position(0)
 ','line_number':42,'multiline':True]['text':' This represents "not found" similar to std::string::npos','line_number':48,'multiline':False]['text':' For debugging and ASSERT_EQUALS in tests.','line_number':61,'multiline':False]['text':'* This is how values are stored in the DocumentStorage buffer
 *  Internal class. Consumers shouldn't care about this.
 ','line_number':77,'multiline':True]['text':' The value does not exist in the underlying BSON.','line_number':86,'multiline':False]['text':' The value has the image in the underlying BSON.','line_number':88,'multiline':False]['text':' The value has been opportunistically inserted into the cache without checking the BSON.','line_number':90,'multiline':False]['text':' Position of next field with same hashBucket','line_number':95,'multiline':False]['text':' doesn't include '\0'','line_number':96,'multiline':False]['text':' See the possible kinds above for comments','line_number':97,'multiline':False]['text':' pointer to start of name (use nameSD instead)','line_number':98,'multiline':False]['text':' helpers for doing pointer arithmetic with this class','line_number':113,'multiline':False]['text':' Round number or pointer up to N-byte boundary. No change if already aligned.','line_number':127,'multiline':False]['text':' must be power of 2 and <= 16 (malloc alignment)','line_number':130,'multiline':False]['text':' Can't use c++ cast because of conversion between intmax_t and both ints and pointers','line_number':131,'multiline':False]['text':' this class should never be constructed','line_number':136,'multiline':False]['text':' or destructed','line_number':137,'multiline':False]['text':' Real size is sizeof(ValueElement) + nameLen','line_number':139,'multiline':False]['text':'*
 * This is an internal class for Document. See FieldIterator for the public version.
 *
 * We iterate the fields in 2 phases.
 * In the first phase we walk the underlying bson and consult the cache to see if the current
 * element has been modified. If the element has been deleted then we skip it, if it has been
 * updated then we return the updated value from the cache.
 * If it is not in the cache at all then the element has not been requested at all (i.e. nobody
 * called getField with the current field name). At this point we could construct the Value in cache
 * but we don't do it as not all iterator users actually inspect the values (e.g. size() just counts
 * # of elements, it does not care about the values at all).
 * This walk over the underlying bson makes the _it to 'jump around'.
 *
 * In the second phase (once we exhaust the bson) we walk the cache and return the inserted values
 * as they were not present in the original bson.
 *
 * We do this 'complicated' dance in order to guarantee the original ordering of fields.
 ','line_number':146,'multiline':True]['text':' DocumentStorage::iterator() and iteratorCacheOnly() are easier to use','line_number':166,'multiline':False]['text':'*
     * Get the field name that the iterator currently points to without bringing anything into
     * cache.
     ','line_number':181,'multiline':True]['text':'* Construct a new ValueElement in the storage cache. The value is coming from the current
     *  BSONElement pointed to by _bsonIt.
     ','line_number':214,'multiline':True]['text':'*
 * Type that bundles the hashed field name along with the actual string so that hashing can be done
 * outside of inserts and lookups and re-used across calls.
 ','line_number':276,'multiline':True]['text':'*
 * Hasher to support heterogeneous lookup for StringData and string-like elements.
 ','line_number':323,'multiline':True]['text':' This using directive activates heterogeneous lookup in the hash table','line_number':327,'multiline':False]['text':' Use the default absl string hasher.','line_number':331,'multiline':False]['text':'/ Storage class used by both Document and MutableDocument','line_number':352,'multiline':False]['text':'*
     * Construct a storage from the BSON. The BSON is lazily processed as fields are requested from
     * the document. If we know that the BSON contains metadata fields we can set the
     * 'bsonHasMetadata' flag to true.
     ','line_number':357,'multiline':True]['text':'*
     * Returns a cache-only copy of the document with no backing bson.
     ','line_number':380,'multiline':True]['text':' The function adds up all iterator counts. Exp. runtime is O(N).','line_number':389,'multiline':False]['text':' can't use _numFields because it includes removed Fields','line_number':391,'multiline':False]['text':'/ Returns the position of the next field to be inserted','line_number':398,'multiline':False]['text':' When looking up a field check the cache only.','line_number':404,'multiline':False]['text':' Look up in a cache and when not found search the unrelying BSON.','line_number':406,'multiline':False]['text':'/ Returns the position of the named field or Position()','line_number':410,'multiline':False]['text':' Document uses these','line_number':414,'multiline':False]['text':' MutableDocument uses these','line_number':434,'multiline':False]['text':'*
     * Given a field name either return a Value if the field resides in the cache, or a BSONElement
     * if the field resides in the backing BSON.
     ','line_number':449,'multiline':True]['text':' Field not found. Return EOO Value.','line_number':465,'multiline':False]['text':'/ Adds a new field with missing Value at the end of the document','line_number':469,'multiline':False]['text':'* Preallocates space for fields. Use this to attempt to prevent buffer growth.
     *  This is only valid to call before anything is added to the document.
     ','line_number':473,'multiline':True]['text':'/ This returns values from the cache and underlying BSON.','line_number':478,'multiline':False]['text':'/ This returns values from the cache only.','line_number':483,'multiline':False]['text':'/ Shallow copy of this. Caller owns memory.','line_number':488,'multiline':False]['text':'*
     * Returns the size of backing BSON object minus the size of BSON fields that are already
     * brought into the cache.
     ','line_number':499,'multiline':True]['text':' An empty BSON can be a special case, it can be treated 'owned'. We save on memory','line_number':516,'multiline':False]['text':' allocation when constructing an empty Document.','line_number':517,'multiline':False]['text':'*
     * Compute the space allocated for the metadata fields. Will account for space allocated for
     * unused metadata fields as well.
     ','line_number':525,'multiline':True]['text':'*
     * Copies all metadata from source if it has any.
     * Note: does not clear metadata from this.
     ','line_number':531,'multiline':True]['text':' If the underlying BSON object is shared and the source does not have metadata then','line_number':536,'multiline':False]['text':' nothing needs to be copied. If the metadata is in the BSON then they are the same in','line_number':537,'multiline':False]['text':' this and source.','line_number':538,'multiline':False]['text':'*
     * Returns a const reference to an object housing the metadata fields associated with this
     * WorkingSetMember.
     ','line_number':546,'multiline':True]['text':'*
     * Returns a non-const reference to an object housing the metadata fields associated with this
     * WorkingSetMember.
     ','line_number':557,'multiline':True]['text':'/ Same as lastElement->next() or firstElement() if empty.','line_number':584,'multiline':False]['text':'/ Returns the position of the named field in the cache or Position()','line_number':641,'multiline':False]['text':'/ Allocates space in _cache. Copies existing data if there is any.','line_number':645,'multiline':False]['text':'/ Call after adding field to _cache and increasing _numFields','line_number':648,'multiline':False]['text':' assumes _hashTabMask is (power of two) - 1','line_number':652,'multiline':False]['text':'/ rehash on buffer growth if load-factor > .5 (attempt to keep lf < 1 when full)','line_number':660,'multiline':False]['text':'/ Initialize empty hash table','line_number':665,'multiline':False]['text':'/ Adds all fields to the hash table','line_number':675,'multiline':False]['text':' must be power of 2','line_number':685,'multiline':False]['text':' don't hash fields for docs smaller than this','line_number':686,'multiline':False]['text':' set to 1 to always hash','line_number':687,'multiline':False]['text':' _cache layout:','line_number':690,'multiline':False]['text':' -------------------------------------------------------------------------------','line_number':691,'multiline':False]['text':' | ValueElement1 Name1 | ValueElement2 Name2 | ... FREE SPACE ... | Hash Table |','line_number':692,'multiline':False]['text':' -------------------------------------------------------------------------------','line_number':693,'multiline':False]['text':'  ^ _cache and _firstElement point here                           ^','line_number':694,'multiline':False]['text':'                                _cacheEnd and _hashTab point here ^','line_number':695,'multiline':False]['text':'','line_number':696,'multiline':False]['text':'','line_number':697,'multiline':False]['text':' When the buffer grows, the hash table moves to the new end.','line_number':698,'multiline':False]['text':' pointer to "end" of _cache element space and start of hash table (same position)','line_number':705,'multiline':False]['text':' table lazily initialized once _numFields == HASH_TAB_MIN','line_number':707,'multiline':False]['text':' position where next field would start','line_number':710,'multiline':False]['text':' this includes removed fields','line_number':711,'multiline':False]['text':' equal to hashTabBuckets()-1 but used more often','line_number':712,'multiline':False]['text':' This field determines the number of bytes from `_bson` that is put into the cache.','line_number':716,'multiline':False]['text':' It helps with determining a more accurate size of a modified `DocumentStorage` instance to be','line_number':717,'multiline':False]['text':' stored on disk, as the on-disk representation of a `DocumentStorage` does not contain the','line_number':718,'multiline':False]['text':' whole backing BSON, but only the portion of backing BSON that's not already in the cache.','line_number':719,'multiline':False]['text':' Tracks whether or not the metadata has been lazy-loaded from the backing '_bson' object. If','line_number':722,'multiline':False]['text':' so, then no attempt will be made to load the metadata again, even if the metadata has been','line_number':723,'multiline':False]['text':' released by a call to 'releaseMetadata()'.','line_number':724,'multiline':False]['text':' True if this storage was constructed from BSON with metadata. Serializing this object using','line_number':729,'multiline':False]['text':' the 'toBson()' method will omit (strip) the metadata fields.','line_number':730,'multiline':False]['text':' This flag is set to true anytime the storage returns a mutable field. It is used to optimize','line_number':733,'multiline':False]['text':' a conversion to BSON; i.e. if there are not any modifications we can directly return _bson.','line_number':734,'multiline':False]['text':' Defined in document.cpp','line_number':739,'multiline':False]['text':' namespace mongo','line_number':744,'multiline':False]