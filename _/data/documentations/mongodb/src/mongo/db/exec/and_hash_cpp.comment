['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Upper limit for buffered data.','line_number':47,'multiline':False]['text':' Stage execution will fail once size of all buffered data exceeds this threshold.','line_number':48,'multiline':False]['text':' namespace','line_number':51,'multiline':False]['text':' static','line_number':60,'multiline':False]['text':' This is empty before calling work() and not-empty after.','line_number':88,'multiline':False]['text':' Either we're busy hashing children, in which case we're not done yet.','line_number':93,'multiline':False]['text':' Or we're streaming in results from the last child.','line_number':98,'multiline':False]['text':' If there's nothing to probe against, we're EOF.','line_number':100,'multiline':False]['text':' Otherwise, we're done when the last child is done.','line_number':105,'multiline':False]['text':' Fast-path for one of our children being EOF immediately.  We work each child a few times.','line_number':116,'multiline':False]['text':' If it hits EOF, the AND cannot output anything.  If it produces a result, we stash that','line_number':117,'multiline':False]['text':' result in _lookAheadResults.','line_number':118,'multiline':False]['text':' INVALID_ID means that the child didn't produce a valid result.','line_number':120,'multiline':False]['text':' We specifically are not using .resize(size, value) here because C++11 builds don't','line_number':122,'multiline':False]['text':' seem to resolve WorkingSet::INVALID_ID during linking.','line_number':123,'multiline':False]['text':' Work each child some number of times until it's either EOF or produces','line_number':129,'multiline':False]['text':' a result.  If it's EOF this whole stage will be EOF.  If it produces a','line_number':130,'multiline':False]['text':' result we cache it for later.','line_number':131,'multiline':False]['text':' Cache the result in _lookAheadResults[i].','line_number':135,'multiline':False]['text':' A child went right to EOF.  Bail out.','line_number':139,'multiline':False]['text':' Ensure that the BSONObj underlying the WorkingSetMember is owned in case we','line_number':144,'multiline':False]['text':' yield.','line_number':145,'multiline':False]['text':' Stop looking at this child.','line_number':147,'multiline':False]['text':' We ignore NEED_TIME. TODO: what do we want to do if we get NEED_YIELD here?','line_number':149,'multiline':False]['text':' We did a bunch of work above, return NEED_TIME to be fair.','line_number':153,'multiline':False]['text':' An AND is either reading the first child into the hash table, probing against the hash','line_number':157,'multiline':False]['text':' table with subsequent children, or checking the last child's results to see if they're','line_number':158,'multiline':False]['text':' in the hash table.','line_number':159,'multiline':False]['text':' We read the first child into our hash table.','line_number':161,'multiline':False]['text':' Check memory usage of previously hashed results.','line_number':163,'multiline':False]['text':' We don't hash our last child.  Instead, we probe the table created from the','line_number':177,'multiline':False]['text':' previous children, returning results in the order of the last child.','line_number':178,'multiline':False]['text':' Fall through to below.','line_number':179,'multiline':False]['text':' Returning results.  We read from the last child and return the results that are in our','line_number':183,'multiline':False]['text':' hash map.','line_number':184,'multiline':False]['text':' We should be EOF if we're not hashing results and the dataMap is empty.','line_number':186,'multiline':False]['text':' We probe _dataMap with the last child.','line_number':189,'multiline':False]['text':' Get the next result for the (_children.size() - 1)-th child.','line_number':192,'multiline':False]['text':' We know that we've ADVANCED.  See if the WSM is in our table.','line_number':198,'multiline':False]['text':' The child must give us a WorkingSetMember with a record id, since we intersect index keys','line_number':201,'multiline':False]['text':' based on the record id. The planner ensures that the child stage can never produce an WSM','line_number':202,'multiline':False]['text':' with no record id.','line_number':203,'multiline':False]['text':' Child's output wasn't in every previous child.  Throw it out.','line_number':208,'multiline':False]['text':' Child's output was in every previous child.  Merge any key data in','line_number':212,'multiline':False]['text':' the child's output and free the child's just-outputted WSM.','line_number':213,'multiline':False]['text':' The child must give us a WorkingSetMember with a record id, since we intersect index keys','line_number':244,'multiline':False]['text':' based on the record id. The planner ensures that the child stage can never produce an WSM','line_number':245,'multiline':False]['text':' with no record id.','line_number':246,'multiline':False]['text':' Didn't insert because we already had this RecordId inside the map. This should only','line_number':250,'multiline':False]['text':' happen if we're seeing a newer copy of the same doc in a more recent snapshot.','line_number':251,'multiline':False]['text':' Throw out the newer copy of the doc.','line_number':252,'multiline':False]['text':' Ensure that the BSONObj underlying the WorkingSetMember is owned in case we yield.','line_number':257,'multiline':False]['text':' Update memory stats.','line_number':260,'multiline':False]['text':' Done reading child 0.','line_number':265,'multiline':False]['text':' If our first child was empty, don't scan any others, no possible results.','line_number':268,'multiline':False]['text':' The child must give us a WorkingSetMember with a record id, since we intersect index keys','line_number':295,'multiline':False]['text':' based on the record id. The planner ensures that the child stage can never produce an','line_number':296,'multiline':False]['text':' WSM with no record id.','line_number':297,'multiline':False]['text':' Ignore.  It's not in any previous child.','line_number':301,'multiline':False]['text':' We have a hit.  Copy data into the WSM we already have.','line_number':303,'multiline':False]['text':' Update memory stats.','line_number':311,'multiline':False]['text':' Finished with a child.','line_number':317,'multiline':False]['text':' Keep elements of _dataMap that are in _seenMap.','line_number':320,'multiline':False]['text':' Update memory stats.','line_number':327,'multiline':False]['text':' _dataMap is now the intersection of the first _currentChild nodes.','line_number':342,'multiline':False]['text':' If we have nothing to AND with after finishing any child, stop.','line_number':344,'multiline':False]['text':' We've finished scanning all children.  Return results with the next call to work().','line_number':350,'multiline':False]['text':' namespace mongo','line_number':384,'multiline':False]