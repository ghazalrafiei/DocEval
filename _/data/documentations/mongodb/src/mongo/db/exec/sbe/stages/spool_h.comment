['text':'*
 *    Copyright (C) 2020-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This is a Spool PlanStage which retains a copy of all data it reads from its child in a shared
 * 'SpoolBuffer', and can later return this data without having to call its child to produce it
 * again.
 *
 * This spool operates in an 'Eager' producer mode. On the call to 'open()' it will read and store
 * the entire input from its child into the buffer. On the 'getNext' call it will return data from
 * the buffer.
 *
 * This producer spool can be connected with multiple consumer spools via a shared 'SpoolBuffer'.
 * This stage will be responsible for populating the buffer, while consumers will read from the
 * buffer once its populated, each using its own read pointer.
 *
 * Debug string representation:
 *
 *   espool spoolId [<vals>] childStage
 ','line_number':57,'multiline':True]['text':'*
 * This is a Spool PlanStage which retains a copy of all data it reads from its child in a shared
 * 'SpoolBuffer', and can later return this data without having to call its child to produce it
 * again.
 *
 * This spool operates in a 'Lazy' producer mode. In contrast to the 'Eager' producer spool, on the
 * call to 'open()' it will _not_ read and populate the buffer. Instead, on the call to 'getNext'
 * it will read and store the input into the buffer, and immediately return it to the caller stage.
 *
 * This producer spool can be connected with multiple consumer spools via a shared 'SpoolBuffer'.
 * This stage will be responsible for populating the buffer in a lazy fashion as described above,
 * while consumers will read from the buffer (possibly while it's still being populated), each using
 * its own read pointer.
 *
 * This spool can be parameterized with an optional predicate which can be used to filter the input
 * and store only portion of input data into the buffer. Filtered out input data is passed through
 * without being stored into the buffer.
 *
 * Debug string representation:
 *
 *   lspool spoolId [<vals>] { predicate }? childStage
 ','line_number':105,'multiline':True]['text':'*
 * This is Spool PlanStage which operates in read-only mode. It doesn't populate its 'SpoolBuffer'
 * with the input data (and as such, it doesn't have an input PlanStage) but reads and returns data
 * from a shared 'SpoolBuffer' that is populated by another producer spool stage.
 *
 * This consumer PlanStage can operate as a Stack Spool, in conjunction with a 'Lazy' producer
 * spool. In this mode the consumer spool on each call to 'getNext' first deletes the input from
 * buffer, remembered on the previous call to 'getNext', and then moves the read pointer to the last
 * element in the buffer and returns it.
 *
 * Since in 'Stack' mode this spool always returns the last input from the buffer, it does not read
 * data in the same order as they were added. It will always return the last added input. For
 * example, the lazy spool can add values [1,2,3], then the stack consumer spool will read and
 * delete 3, then another two values can be added to the buffer [1,2,4,5], then the consumer spool
 * will read and delete 5, and so on.
 *
 * Debug string representations:
 *
 *   cspool spoolId [<vals>]
 *   sspool spoolId [<vals>]
 ','line_number':169,'multiline':True]['text':' namespace mongo::sbe','line_number':320,'multiline':False]