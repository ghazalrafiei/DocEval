['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "boost/intrusive/detail/iterator.hpp"','line_number':33,'multiline':False]['text':'*
 * A FieldRefSet holds a number of unique FieldRefs - a set of dotted paths into a document.
 *
 * The FieldRefSet provides helpful functions for efficiently finding conflicts between field
 * ref paths - field ref paths conflict if they are equal to each other or if one is a prefix.
 * To maintain a FieldRefSet of non-conflicting paths, always use the insert method which
 * returns conflicting FieldRefs.
 *
 * FieldRefSets do not own the FieldRef paths they contain.
 ','line_number':48,'multiline':True]['text':'* Returns 'true' if the set is empty ','line_number':78,'multiline':True]['text':'*
     * Returns true if the path does not already exist in the set, false otherwise.
     *
     * Note that *no* conflict resolution occurs - any path can be inserted into a set.
     ','line_number':95,'multiline':True]['text':'*
     * Returns true if the field 'toInsert' was added to the set without conflicts.
     *
     * Otherwise, returns false and fills '*conflict' with the field 'toInsert' clashed with.
     *
     * There is no ownership transfer of 'toInsert'. The caller is responsible for
     * maintaining it alive for as long as the FieldRefSet is so. By the same token
     * 'conflict' can only be referred to while the FieldRefSet can.
     ','line_number':104,'multiline':True]['text':'*
     * Returns true if the field 'toInsert' was added to the set without conflicts.
     ','line_number':115,'multiline':True]['text':'*
     * Fills the set with the supplied FieldRef pointers.
     *
     * Note that *no* conflict resolution occurs here.
     ','line_number':120,'multiline':True]['text':'*
     * Fills the set with the supplied FieldRefs. Does not take ownership of the managed pointers.
     *
     * Note that *no* conflict resolution occurs here.
     ','line_number':127,'multiline':True]['text':'*
     * Replace any existing conflicting FieldRef with the shortest (closest to root) one.
     ','line_number':134,'multiline':True]['text':'*
     * Find all inserted fields which conflict with the FieldRef 'toCheck' by the semantics
     * of 'insert', and add those fields to the 'conflicts' set.
     *
     * Return true if conflicts were found.
     ','line_number':139,'multiline':True]['text':'*
     * A debug/log-able string
     ','line_number':155,'multiline':True]['text':' A set of field_ref pointers, none of which is owned here.','line_number':161,'multiline':False]['text':'*
 * A wrapper class for FieldRefSet which owns the storage of the underlying FieldRef objects.
 ','line_number':165,'multiline':True]['text':'*
     * Inserts the given FieldRef into the set. In the case of a conflict with an existing element,
     * only the shortest path is kept in the set.
     ','line_number':170,'multiline':True]['text':' Holds the storage for FieldRef's inserted into the set. This may become out of sync with','line_number':201,'multiline':False]['text':' '_fieldRefSet' since we don't attempt to remove conflicts from the backing set, which can','line_number':202,'multiline':False]['text':' leave '_ownedFieldRefs' holding storage for a superset of the field refs that are actually','line_number':203,'multiline':False]['text':' contained in '_fieldRefSet'.','line_number':204,'multiline':False]['text':' namespace mongo','line_number':209,'multiline':False]