['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Helper used to determine whether or not a given oplog entry should be used to create a change','line_number':107,'multiline':False]['text':' collection entry.','line_number':108,'multiline':False]['text':' Avoid writing entry with empty 'ns' field, for eg. 'periodic noop' entry.','line_number':112,'multiline':False]['text':' The oplog entry might be a drop command on the change collection. Check if','line_number':119,'multiline':False]['text':' the drop request is for the already deleted change collection, as such do not','line_number':120,'multiline':False]['text':' attempt to write to the change collection if that is the case. This scenario','line_number':121,'multiline':False]['text':' is possible because 'WriteUnitOfWork' will stage the changes and while','line_number':122,'multiline':False]['text':' committing the staged 'CollectionImpl::insertDocuments' change the collection','line_number':123,'multiline':False]['text':' object might have already been deleted.','line_number':124,'multiline':False]['text':' Do not write the change collection's own 'create' oplog entry. This is','line_number':129,'multiline':False]['text':' because the secondaries will not be able to capture this oplog entry and as','line_number':130,'multiline':False]['text':' such, will result in inconsistent state of the change collection in the','line_number':131,'multiline':False]['text':' primary and the secondary.','line_number':132,'multiline':False]['text':' The oplog entry might be a batch delete command on a change collection, avoid','line_number':141,'multiline':False]['text':' inserting such oplog entries back to the change collection.','line_number':142,'multiline':False]['text':' The oplog entry might be a single delete command on a change collection, avoid','line_number':160,'multiline':False]['text':' inserting such oplog entries back to the change collection.','line_number':161,'multiline':False]['text':'*
 * Creates a Document object from the supplied oplog entry, performs necessary modifications to it
 * and then returns it as a BSON object. Can return boost::none if the entry should be skipped.
 ','line_number':171,'multiline':True]['text':' Skip CRUD writes on user DBs from Tenant Migrations. Instead, extract that nested 'o2' from','line_number':185,'multiline':False]['text':' the corresponding noop write to ensure that change events for user DB writes that took place','line_number':186,'multiline':False]['text':' during a Tenant Migration are on the Donor timeline.','line_number':187,'multiline':False]['text':' (Ignore FCV check): This feature flag is potentially backported to previous version of the','line_number':222,'multiline':False]['text':' server. We can't rely on the FCV version to see whether it's enabled or not.','line_number':223,'multiline':False]['text':'*
 * Truncate ranges must be consistent data - no record within a truncate range should be written
 * after the truncate. Otherwise, the data viewed by an open change stream could be corrupted,
 * only seeing part of the range post truncate. The node can either be a secondary or primary at
 * this point. Restrictions must be in place to ensure consistent ranges in both scenarios.
 *      - Primaries can't truncate past the 'allDurable' Timestamp. 'allDurable'
 *      guarantees out-of-order writes on the primary don't leave oplog holes.
 *
 *      - Secondaries can't truncate past the 'lastApplied' timestamp. Within an oplog batch,
 *      entries are applied out of order, thus truncate markers may be created before the entire
 *      batch is finished.
 *      The 'allDurable' Timestamp is not sufficient given it is computed from within WT, which
 *      won't always know there are entries with opTime < 'allDurable' which have yet to enter
 *      the storage engine during secondary oplog application.
 *
 * Returns the maximum 'ts' a change collection document is allowed to have in order to be safely
 * truncated.
 *','line_number':228,'multiline':True]['text':' namespace','line_number':252,'multiline':False]['text':'*
 * Locks respective change collections, writes insert statements to respective change collections
 * based on tenant ids.
 ','line_number':254,'multiline':True]['text':'*
     * Adds the insert statement for the provided tenant that will be written to the change
     * collection when the 'write()' method is called.
     ','line_number':270,'multiline':True]['text':'*
     * Acquires locks to change collections of all tenants referred to by added insert statements.
     ','line_number':281,'multiline':True]['text':'*
     * Writes the batch of insert statements for each change collection. If a DuplicateKey error is
     * encountered, the write is skipped and the remaining inserts are attempted individually. Bails
     * out further writes if any other type of failure is encountered in writing to any change
     * collection.
     *
     * Locks should be acquired before calling this method by calling 'acquireLocks()'.
     ','line_number':294,'multiline':True]['text':' The change collection does not exist for a particular tenant because either the','line_number':309,'multiline':False]['text':' change collection is not enabled or is in the process of enablement. Ignore this','line_number':310,'multiline':False]['text':' insert for now.','line_number':311,'multiline':False]['text':' Writes to the change collection should not be replicated.','line_number':316,'multiline':False]['text':' To avoid creating a lot of unnecessary calls to','line_number':319,'multiline':False]['text':' CollectionTruncateMarkers::updateCurrentMarkerAfterInsertOnCommit we aggregate all','line_number':320,'multiline':False]['text':' the results and make a singular call. This requires storing the highest','line_number':321,'multiline':False]['text':' RecordId/WallTime seen from the insert statements.','line_number':322,'multiline':False]['text':'*
             * For a serverless shard merge, we clone all change collection entries from the donor
             * and then fetch/apply retryable writes that took place before the migration. As a
             * result, we can end up in a situation where a change collection entry already exists.
             * If we encounter a DuplicateKey error and the entry is identical to the existing one,
             * we can safely skip and continue.
             ','line_number':327,'multiline':True]['text':' Continue to the next insert statement as we've ommitted the current one.','line_number':346,'multiline':False]['text':' Right now we assume that the tenant change collection is clustered and','line_number':357,'multiline':False]['text':' reconstruct the RecordId used in the KV store. Ideally we want the write path to','line_number':358,'multiline':False]['text':' return the record ids used for the insert but as it isn't available we','line_number':359,'multiline':False]['text':' reconstruct the key here.','line_number':360,'multiline':False]['text':' We update the TruncateMarkers instance if it exists. Creation is performed','line_number':384,'multiline':False]['text':' asynchronously by the remover thread.','line_number':385,'multiline':False]['text':'*
     * Field 'insertStatements' contains insert statements to be written to the tenant's change
     * collection associated with 'tenantChangeCollection' field.
     ','line_number':398,'multiline':True]['text':' Parse the oplog entry to fetch the tenant id from 'tid' field. The oplog entry will not','line_number':410,'multiline':False]['text':' written to the change collection if 'tid' field is missing.','line_number':411,'multiline':False]['text':' Mode required to access change collections.','line_number':424,'multiline':False]['text':' A mapping from a tenant id to insert statements and the change collection of the tenant.','line_number':427,'multiline':False]['text':' An operation context to use while performing all operations in this class.','line_number':431,'multiline':False]['text':' An OpDebug to use while performing all operations in this class.','line_number':434,'multiline':False]['text':' Indicates if locks have been acquired.','line_number':437,'multiline':False]['text':' This method must be called within a 'WriteUnitOfWork'. The caller must be responsible for','line_number':450,'multiline':False]['text':' commiting the unit of work.','line_number':451,'multiline':False]['text':' Transform oplog entries to change collections entries and group them by tenant id.','line_number':457,'multiline':False]['text':' The initial seed oplog insertion is not timestamped as such the 'oplogSlot' is not','line_number':462,'multiline':False]['text':' initialized. The corresponding change collection insertion will not be timestamped.','line_number':463,'multiline':False]['text':' Make the change collection clustered by '_id'. The '_id' field will have the same value as','line_number':526,'multiline':False]['text':' the 'ts' field of the oplog.','line_number':527,'multiline':False]['text':' We get the UUID now in order to remove the collection from the map later. We can't get the','line_number':546,'multiline':False]['text':' UUID once the collection has been dropped.','line_number':547,'multiline':False]['text':' Won't update the truncate markers map so no need to get the UUID.','line_number':550,'multiline':False]['text':' Remove the collection from the TruncateMarkers map. As we are dropping the collection','line_number':572,'multiline':False]['text':' there's no need to keep it for the remover. Data will be deleted anyways.','line_number':573,'multiline':False]['text':' This method must be called within a 'WriteUnitOfWork'. The caller must be responsible for','line_number':584,'multiline':False]['text':' commiting the unit of work.','line_number':585,'multiline':False]['text':'opDebug','line_number':590,'multiline':True]['text':' Create an insert statement that should be written at the timestamp 'ts' for a particular','line_number':598,'multiline':False]['text':' tenant.','line_number':599,'multiline':False]['text':' Write documents to change collections and throw exception in case of any failure.','line_number':608,'multiline':False]['text':' minRecord ','line_number':662,'multiline':True]['text':' shouldReturnEofOnFilterMismatch ','line_number':667,'multiline':True]['text':' As we are using collection scans this means we aren't using truncate markers. Clear the','line_number':679,'multiline':False]['text':' map since they will not get updated anyways. The markers will get recreated if the','line_number':680,'multiline':False]['text':' feature flag is turned on again.','line_number':681,'multiline':False]['text':' It is expected that a collection drop can kill a query plan while deleting an old','line_number':686,'multiline':False]['text':' document, so ignore this error.','line_number':687,'multiline':False]['text':' Leftover bytes contains the difference between the amount of bytes we had for the','line_number':710,'multiline':False]['text':' markers and the latest collection size/count. This is susceptible to a race','line_number':711,'multiline':False]['text':' condition, but metrics are already assumed to be approximate. Ignoring this issue is','line_number':712,'multiline':False]['text':' a valid strategy here.','line_number':713,'multiline':False]['text':' Update the truncate markers with the last collection entry's RecordId and wall time.','line_number':725,'multiline':False]['text':' This is necessary for correct marker expiration. Otherwise the highest seen points','line_number':726,'multiline':False]['text':' would be null. Nothing would expire since we have to maintain the last entry in the','line_number':727,'multiline':False]['text':' change collection and null RecordId < any initialised RecordId. This would only get','line_number':728,'multiline':False]['text':' fixed once an entry has been inserted, initialising the data points.','line_number':729,'multiline':False]['text':'*
 * Given a 'tenantId', establishes the collection UUID for the tenant's change collection, and the
 * associated truncate markers in 'truncateMap'. Returns a tuple with a NamespaceStringOrUUID
 * containing the collection UUID, and the shared_ptr to ChangeCollectionTruncateMarkers. The caller
 * must use the returned UUID to perform a collection acquisition to ensure the collection is still
 * the same, and that it is correct to truncate based on the returned
 * ChangeCollectionTruncateMarkers.
 ','line_number':757,'multiline':True]['text':' No marker means it's a new collection, or we've just performed startup.','line_number':780,'multiline':False]['text':' Initialize the TruncateMarkers instance.','line_number':781,'multiline':False]['text':' namespace','line_number':800,'multiline':False]['text':' The truncate marker contains part of a data range not yet consistent','line_number':811,'multiline':False]['text':' (i.e. there could be oplog holes or partially applied ranges of the oplog in the','line_number':812,'multiline':False]['text':' range).','line_number':813,'multiline':False]['text':' Truncate from the beginning of the collection, this will','line_number':828,'multiline':False]['text':' cover cases where some leftover documents are present.','line_number':829,'multiline':False]['text':' Initialize truncate markers if necessary, and fetch collection UUID. After this point, we','line_number':864,'multiline':False]['text':' must use UUID to acquire the collection to ensure it has not been recreated.','line_number':865,'multiline':False]['text':' Only log a warning if the collection is dropped after the initial check.','line_number':869,'multiline':False]['text':' Even if the collection is concurrently dropped, we hold a shared_ptr to truncateMarkers,','line_number':872,'multiline':False]['text':' and the object remains valid. After attempting to acquire by UUID, and verifying the','line_number':873,'multiline':False]['text':' collection does no longer exist, we'll just exit.','line_number':874,'multiline':False]['text':' We now create a partial marker that will shift the last entry to the next marker if','line_number':877,'multiline':False]['text':' it's present there. This will allow us to expire all entries up to the last one.','line_number':878,'multiline':False]['text':' Second pass to remove the potentially new partial marker.','line_number':881,'multiline':False]['text':' Do nothing. We'll just return the numRecordsDeleted up to the point where the collection','line_number':884,'multiline':False]['text':' was dropped.','line_number':885,'multiline':False]['text':' namespace mongo','line_number':902,'multiline':False]