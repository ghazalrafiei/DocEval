['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * WatchdogDeathCallback is used by the watchdog component to terminate the process. It is expected
 * to bypass MongoDB's normal shutdown process. It should not make any syscalls other then to
 * exit/terminate the process.
 *
 * It is pluggable for testing purposes.
 ','line_number':50,'multiline':True]['text':'*
 * The OS specific implementation of WatchdogDeathCallback that kills the process.
 ','line_number':59,'multiline':True]['text':'*
 * WatchdogCheck represents a health check that the watchdog will run periodically to ensure the
 * machine, and process are healthy.
 *
 * It is pluggable for testing purposes.
 ','line_number':64,'multiline':True]['text':'*
     * Runs a health check against the local machine.
     *
     * Note: It should throw exceptions on unexpected errors. Exceptions will result in a call to
     * WatchdogDeathCallback.
     ','line_number':74,'multiline':True]['text':'*
     * Returns a description for the watchdog check to log to the log file.
     ','line_number':82,'multiline':True]['text':'*
 * Do a health check for a given directory. This health check is done by reading, and writing to a
 * file with direct I/O.
 ','line_number':88,'multiline':True]['text':'*
 * Runs a callback on a periodic basis. The specified time period is the time delay between
 * invocations.
 *
 * Example:
 * - callback
 * - sleep(period)
 * - callback
 ','line_number':108,'multiline':True]['text':'*
     * Starts the periodic thread.
     ','line_number':122,'multiline':True]['text':'*
     * Updates the period the thread runs its task.
     *
     * Period changes take affect immediately.
     ','line_number':127,'multiline':True]['text':'*
     * Shutdown the periodic thread. After it is shutdown, it cannot be started.
     ','line_number':134,'multiline':True]['text':'*
     * Do one iteration of work.
     ','line_number':140,'multiline':True]['text':'*
     * Provides an opportunity for derived classes to initialize state.
     *
     * This method is called at two different times:
     * 1. First time a thread is started.
     * 2. When a thread goes from disabled to enabled. Specifically, a user calls setPeriod(-1)
     *    followed by setPeriod(> 0).
     *
     ','line_number':145,'multiline':True]['text':'*
     * Main thread loop
     ','line_number':157,'multiline':True]['text':'*
     * Private enum to track state.
     *
     *   +----------------------------------------------------------------+
     *   |                                                                v
     * +-------------+     +----------+     +--------------------+     +-------+
     * | kNotStarted | --> | kStarted | --> | kShutdownRequested | --> | kDone |
     * +-------------+     +----------+     +--------------------+     +-------+
     ','line_number':163,'multiline':True]['text':'*
         * Initial state. Either start() or shutdown() can be called next.
         ','line_number':173,'multiline':True]['text':'*
         * start() has been called. shutdown() should be called next.
         ','line_number':178,'multiline':True]['text':'*
         * shutdown() has been called, and the thread is in progress of shutting down.
         ','line_number':183,'multiline':True]['text':'*
         * PeriodicThread has been shutdown.
         ','line_number':188,'multiline':True]['text':' State of PeriodicThread','line_number':194,'multiline':False]['text':' Thread period','line_number':197,'multiline':False]['text':' if true, then call run() otherwise just let the thread idle,','line_number':200,'multiline':False]['text':' Name of thread for logging purposes','line_number':203,'multiline':False]['text':' The thread','line_number':206,'multiline':False]['text':' Lock to protect _state and control _thread','line_number':209,'multiline':False]['text':'*
 * Periodic background thread to run watchdog checks.
 ','line_number':214,'multiline':True]['text':'*
     * Returns the current generation number of the checks.
     *
     * Incremented after each check is run.
     ','line_number':221,'multiline':True]['text':' Vector of checks to run','line_number':233,'multiline':False]['text':' A counter that is incremented for each watchdog check completed, and monitored to ensure it','line_number':236,'multiline':False]['text':' does not remain at the same value for too long.','line_number':237,'multiline':False]['text':'*
 * Periodic background thread to ensure watchdog checks run periodically.
 ','line_number':241,'multiline':True]['text':'*
     * Returns the current generation number of the monitor.
     *
     * Incremented after each round of monitoring is run.
     ','line_number':250,'multiline':True]['text':' Callback function to call when watchdog gets stuck','line_number':262,'multiline':False]['text':' Watchdog check thread to query','line_number':265,'multiline':False]['text':' A counter that is incremented for each watchdog monitor run is completed.','line_number':268,'multiline':False]['text':' The last seen _checkGeneration value','line_number':271,'multiline':False]['text':'*
 * WatchdogMonitor
 *
 * The Watchdog is a pair of dedicated threads that try to figure out if a process is hung
 * and terminate if it is. The worst case scenario in a distributed system is a process that appears
 * to work but does not actually work.
 *
 * The watchdog is not designed to detect all the different ways the process is hung. It's goal is
 * to detect if the storage system is stuck, and to terminate the process if it is stuck.
 *
 * Threads:
 * WatchdogCheck - runs file system checks
 * WatchdogMonitor - verifies that WatchdogCheck continue to make timely progress. If WatchdogCheck
 *                   fails to make process, WatchdogMonitor calls a callback. The callback is not
 *                   expected to do any I/O and minimize the system calls it makes.
 ','line_number':276,'multiline':True]['text':'*
     * Create the watchdog with specified period.
     *
     * checkPeriod - how often to run the checks
     * monitorPeriod - how often to run the monitor, must be >= checkPeriod
     ','line_number':294,'multiline':True]['text':'*
     * Starts the watchdog threads.
     ','line_number':305,'multiline':True]['text':'*
     * Updates the watchdog monitor period. The goal is to detect a failure in the time of the
     * period.
     *
     * Does nothing if watchdog is not started. If watchdog was started, it changes the monitor
     * period, but not the check period.
     *
     * Accepts Milliseconds for testing purposes while the setParameter only works with seconds.
     ','line_number':310,'multiline':True]['text':'*
     * Shutdown the watchdog.
     ','line_number':321,'multiline':True]['text':'*
     * Returns the current generation number of the checks.
     *
     * Incremented after each round of checks is run.
     ','line_number':326,'multiline':True]['text':'*
     * Returns the current generation number of the checks.
     *
     * Incremented after each round of checks is run.
     ','line_number':333,'multiline':True]['text':'*
     * Private enum to track state.
     *
     *   +----------------------------------------------------------------+
     *   |                                                                v
     * +-------------+     +----------+     +--------------------+     +-------+
     * | kNotStarted | --> | kStarted | --> | kShutdownRequested | --> | kDone |
     * +-------------+     +----------+     +--------------------+     +-------+
     ','line_number':341,'multiline':True]['text':'*
         * Initial state. Either start() or shutdown() can be called next.
         ','line_number':351,'multiline':True]['text':'*
         * start() has been called. shutdown() should be called next.
         ','line_number':356,'multiline':True]['text':'*
         * shutdown() has been called, and the background threads are in progress of shutting down.
         ','line_number':361,'multiline':True]['text':'*
         * Watchdog has been shutdown.
         ','line_number':366,'multiline':True]['text':' Lock to protect _state and control _thread','line_number':372,'multiline':False]['text':' State of watchdog','line_number':375,'multiline':False]['text':' Fixed period for running the checks.','line_number':378,'multiline':False]['text':' WatchdogCheck Thread - runs checks','line_number':381,'multiline':False]['text':' WatchdogMonitor Thread - watches _watchdogCheckThread','line_number':384,'multiline':False]['text':' namespace mongo','line_number':388,'multiline':False]