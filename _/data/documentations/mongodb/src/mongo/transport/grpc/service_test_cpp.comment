['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
     * Provides the client-side implementation for a gRPC client. `runTestWithBothMethods` will
     * invoke this callback and provide it with its arguments.
     ','line_number':73,'multiline':True]['text':'*
     * Runs a test twice: once for each method provided by CommandService.
     *
     * On each run of the test, this creates a new CommandService instance that uses the provided
     * handler, starts a new server instance, and then spawns a client thread that constructs a stub
     * towards the server and runs `callback`. The client may use the provided factory to make new
     * streams based on the method (e.g., unauthenticated) being tested.
     ','line_number':80,'multiline':True]['text':'*
     * Fixture used to test the error codes returned to the client as the result of metadata
     * validation. Each test provides its own logic for initializing the client context, and
     * compares the returned gRPC status code against an expected value.
     ','line_number':112,'multiline':True]['text':' The server should always respond with the cluster's max wire version, regardless','line_number':127,'multiline':False]['text':' of whether metadata validation failed. The one exception is for authentication','line_number':128,'multiline':False]['text':' failures.','line_number':129,'multiline':False]['text':'*
     * Verifies the number and the severity of logs, concerning client-metadata, that are emitted in
     * response to accepting gRPC streams on the server side.
     ','line_number':138,'multiline':True]['text':' Temporarily maximize verbosity for networking logs.','line_number':150,'multiline':False]['text':'*
     * Creates a stream against each command stream method, and then uses the provided callback to
     * terminate the stream. The goal is to verify the termination status (and potentially the
     * reason) that is visible to the client-side of the stream.
     ','line_number':179,'multiline':True]['text':' Initialize the termination notification for this run.','line_number':200,'multiline':False]['text':' We should be able to read messages sent before the RPC was cancelled.','line_number':209,'multiline':False]['text':' Continues to serve the echo commands until the stream is terminated.','line_number':241,'multiline':False]['text':' The MongoDB gRPC Protocol doesn't specify how an invalid metadata document should be handled,','line_number':334,'multiline':False]['text':' and since invalid metadata doesn't affect the server's ability to execute the operation, it','line_number':335,'multiline':False]['text':' was decided the server should just continue with the command and log a warning rather than','line_number':336,'multiline':False]['text':' returning an error in such cases.','line_number':337,'multiline':False]['text':' nStreamsToCreate','line_number':368,'multiline':False]['text':' nExpectedLogLines','line_number':369,'multiline':False]['text':' nStreamsToCreate','line_number':379,'multiline':False]['text':' nExpectedLogLines','line_number':380,'multiline':False]['text':' nStreamsToCreate','line_number':390,'multiline':False]['text':' nExpectedLogLines','line_number':391,'multiline':False]['text':' Continue to receive client messages until the stream is terminated.','line_number':404,'multiline':False]['text':' Don't use Auth ','line_number':495,'multiline':True]['text':' Use Auth ','line_number':503,'multiline':True]['text':' Use Auth ','line_number':512,'multiline':True]['text':' Don't use Auth ','line_number':520,'multiline':True]['text':' Continues to serve the echo commands until the stream is terminated.','line_number':559,'multiline':False]['text':' Initialize the notification for this run.','line_number':624,'multiline':False]['text':' The source buffer is out of scope, but the serialized gRPC ByteBuffer should still be','line_number':679,'multiline':False]['text':' valid.','line_number':680,'multiline':False]['text':' namespace','line_number':738,'multiline':False]['text':' namespace mongo::transport::grpc','line_number':739,'multiline':False]