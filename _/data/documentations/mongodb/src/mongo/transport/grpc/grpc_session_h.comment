['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Captures the common semantics for ingress and egress gRPC sessions.
 ','line_number':61,'multiline':True]['text':'*
     * Returns the unique identifier used for the underlying gRPC stream.
     ','line_number':74,'multiline':True]['text':'*
     * Cancels the RPC associated with the underlying gRPC stream and updates the termination status
     * of the session to include the provided reason.
     *
     * In-progress reads and writes to this session will be interrupted, and future reads and writes
     * will fail with an error.
     *
     * If this session is already terminated, this has no effect.
     *
     * The provided reason MUST be a cancellation error.
     ','line_number':85,'multiline':True]['text':' Need to update terminationStatus before cancelling so that when the RPC caller/handler is','line_number':98,'multiline':False]['text':' interrupted, it will be guaranteed to have access to the reason for cancellation.','line_number':99,'multiline':False]['text':'*
     * Mark the session as gracefully terminated.
     *
     * In-progress reads and writes to this session will not be interrupted, but future ones will
     * fail with an error.
     *
     * If this session is already terminated, this has no effect.
     ','line_number':105,'multiline':True]['text':'*
     * Returns the reason for which this stream was terminated, if any. "Termination" includes
     * cancellation events (e.g. network interruption, explicit cancellation, or
     * exceeding the deadline) as well as graceful closing of the session via end().
     *
     * Remains unset until termination.
     ','line_number':133,'multiline':True]['text':' If the RPC was cancelled, return a status reflecting that, including in the case where','line_number':142,'multiline':False]['text':' the RPC was cancelled after the session was already locally ended (i.e. after the','line_number':143,'multiline':False]['text':' termination status was set to OK).','line_number':144,'multiline':False]['text':'*
     * The following inspects the logical state of the underlying stream: the session is considered
     * not connected when the user has terminated the session (either with or without an error) or
     * if the RPC had been cancelled (either remotely/externally or locally).
     ','line_number':156,'multiline':True]['text':'*
     * For ingress sessions, we do not distinguish between load-balanced and non-load-balanced
     * streams. Egress sessions never originate from load-balancers.
     ','line_number':165,'multiline':True]['text':'*
     * Runs the provided callback when destroying the session.
     * Not synchronized, thus not safe to call once the session is visible to other threads.
     ','line_number':177,'multiline':True]['text':'*
     * The following APIs are not implemented for both ingress and egress gRPC sessions.
     ','line_number':185,'multiline':True]['text':' No uint64_t BSON type','line_number':219,'multiline':False]['text':'*
     * Sets the termination status if it hasn't been set already.
     * Returns whether the termination status was updated or not.
     ','line_number':235,'multiline':True]['text':'*
 * Represents an ingress gRPC session (the server side of the stream).
 *
 * Calling sinkMessage() or sourceMessage() is only allowed from the thread that owns the underlying
 * gRPC stream. This is necessary to ensure accessing _ctx and _stream does not result in
 * use-after-free.
 ','line_number':265,'multiline':True]['text':'*
     * Mark the session as logically terminated with the provided status. In-progress reads and
     * writes to this session will not be interrupted, but future attempts to read or write to this
     * session will fail.
     *
     * This has no effect if the stream is already terminated.
     ','line_number':300,'multiline':True]['text':'*
     * The client-provided authentication token, if any.
     *
     * This will only return a value if the underlying stream was created via
     * AuthenticatedCommandStream. Any authentication token provided by the client to
     * UnauthenticatedCommandStream will be ignored.
     ','line_number':311,'multiline':True]['text':'*
     * Retrieve the ClientMetadata, if any.
     * The first time this method is called, the metadata document will be decoded and parsed, which
     * can be expensive. It will be cached for future invocations.
     *
     * Throws an exception if the client provided improperly formatted metadata.
     ','line_number':322,'multiline':True]['text':' _stream is only valid while the RPC handler is still running. It should not be','line_number':364,'multiline':False]['text':' accessed after the stream has been terminated.','line_number':365,'multiline':False]['text':'*
 * Represents the client side of a gRPC stream.
 ','line_number':374,'multiline':True]['text':'*
     * Holds the state shared between multiple instances of egress session.
     * This state is currently limited to the cluster's maxWireVersion.
     * No alignment is needed as the shared state is not expected to be modified frequently.
     ','line_number':379,'multiline':True]['text':'*
     * Get this session's current idea of what the cluster's maxWireVersion is.
     *
     * The initial value for this is the first wire version that included gRPC support.
     ','line_number':411,'multiline':True]['text':'*
     * Indicates to the server side that the client will not be sending any further messages, then
     * blocks until all messages from the server have been read and the server has returned a final
     * status. Once a status has been received, this session's termination status is updated
     * accordingly.
     *
     * Returns the termination status.
     *
     * This method should only be called once.
     * This method should be used instead of end() in most cases, since it retrieves the server's
     * return status for the RPC.
     ','line_number':420,'multiline':True]['text':' There is no way of determining this client-side outside of finish().','line_number':443,'multiline':False]['text':' The cluster's wire version is communicated via the initial metadata, so only need to','line_number':448,'multiline':False]['text':' check it after reading the first message.','line_number':449,'multiline':False]['text':' The following tries to avoid modifying the cache-line that holds the','line_number':479,'multiline':False]['text':' `clusterMaxWireVersion` when possible. Considering this code-path runs once for each','line_number':480,'multiline':False]['text':' outgoing stream, and the cluster maxWireVersion is not expected to change frequently,','line_number':481,'multiline':False]['text':' this avoids unnecessary cache evictions and is considered a performance optimization.','line_number':482,'multiline':False]['text':' namespace mongo::transport::grpc','line_number':506,'multiline':False]