['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'* Some diagnostic data that we will want to log about a Client after its death. ','line_number':56,'multiline':True]['text':' Limit maximum sessions to `net.maxIncomingConnections`/`--maxConns`','line_number':75,'multiline':False]['text':' On non-windows, this is automatically capped to 80% of the current system rlimit.','line_number':76,'multiline':False]['text':' If we asked for more connections than supported, inform the user.','line_number':98,'multiline':False]['text':' namespace','line_number':107,'multiline':False]['text':'*
 * Container implementation for currently active sessions.
 * Structurally this behaves like an STL map<Client*, SessionWorkflow*>
 * with additional machinery to manage concurrency.
 ','line_number':109,'multiline':True]['text':'* A proxy object providing properly synchronized Sessions accessors. ','line_number':124,'multiline':True]['text':'* Run `f(workflow)` for each `SessionWorkflow& workflow`, in an unspecified order. ','line_number':129,'multiline':True]['text':'*
         * Waits for Sessions to drain, possibly unlocking and relocking its
         * Mutex. SyncToken holds exclusive access to a Sessions object before
         * and after this function call, but not during.
         ','line_number':137,'multiline':True]['text':'* Returns a proxy object providing synchronized mutable access to the Sessions object. ','line_number':185,'multiline':True]['text':'/< notified on `_byClient` changes.','line_number':199,'multiline':False]['text':'/< Kept in sync with `_byClient.size()`','line_number':200,'multiline':False]['text':'/< Increases with each `insert` call.','line_number':201,'multiline':False]['text':'/< guarded by `_mutex`','line_number':202,'multiline':False]['text':' Helper for single observer constructor.','line_number':208,'multiline':False]['text':' std::initializer_list uses copy semantics, so we can't just call the vector version with:','line_number':209,'multiline':False]['text':' `{std::make_unique<MyObserver>()}`.','line_number':210,'multiline':False]['text':' Instead, construct with an empty array then push our singular one in.','line_number':211,'multiline':False]['text':' Serverless clusters don't support sharding, so they should only ever use','line_number':237,'multiline':False]['text':' the Shard service and associated ServiceEntryPoint.','line_number':238,'multiline':False]['text':' Since startSession() is guaranteed to be accessed only by a single listener thread,','line_number':256,'multiline':False]['text':' an atomic increment is not necessary here.','line_number':257,'multiline':False]['text':' When running under address sanitizer, we get false positive leaks due to disorder around','line_number':302,'multiline':False]['text':' the lifecycle of a connection and request. When we are running under ASAN, we try a lot','line_number':303,'multiline':False]['text':' harder to dry up the server from active connections before going on to really shut down.','line_number':304,'multiline':False]['text':' In non-sanitizer builds, a feature flag can enable a true shutdown anyway. We use the','line_number':305,'multiline':False]['text':' flag to identify these shutdown problems in testing.','line_number':306,'multiline':False]['text':' Issue a terminate to all sessions, then wait for them to drain.','line_number':320,'multiline':False]['text':' If there are undrained sessions after the deadline, shutdown continues.','line_number':321,'multiline':False]['text':' namespace mongo::transport','line_number':382,'multiline':False]