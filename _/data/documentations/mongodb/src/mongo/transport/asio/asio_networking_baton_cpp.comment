['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * RAII type that wraps up an `eventfd` and reading/writing to it.
 * We don't use the counter portion and only use the file descriptor (i.e., `fd`) to notify and
 * interrupt the client thread blocked polling (see `AsioNetworkingBaton::run`).
 ','line_number':63,'multiline':True]['text':' If we have activity on the `eventfd`, pull the count out.','line_number':88,'multiline':False]['text':' On error, -1 is returned and `errno` is set','line_number':101,'multiline':False]['text':'*
 * This is only used by `run_until()` and `waitUntil()`, and provides a unique timer id. This unique
 * id is supplied by `ReactorTimer`, and used by the baton for internal bookkeeping.
 ','line_number':127,'multiline':True]['text':' namespace','line_number':142,'multiline':False]['text':' Run the task inline if the baton is detached.','line_number':153,'multiline':False]['text':' Set up a timer on the baton with the specified deadline. This synthetic timer is used by','line_number':171,'multiline':False]['text':' `_poll()`, which is called through `run()`, to enforce a deadline for the blocking `::poll`.','line_number':172,'multiline':False]['text':' If the future is ready, our timer interrupted `run()`, in which case we timed out.','line_number':178,'multiline':False]['text':' On the way out, fulfill promises and run scheduled jobs without holding the lock.','line_number':189,'multiline':False]['text':' If anything was scheduled, run it now and skip polling and processing timers.','line_number':214,'multiline':False]['text':' Fire expired timers','line_number':220,'multiline':False]['text':' The timer could exist already, and we need to assert that it's canceled if so.','line_number':283,'multiline':False]['text':' The timer must not already be in _pendingTimers - cancellations of pending timers','line_number':287,'multiline':False]['text':' are processed immediately, inline, so if the timer is there, this is a duplicate.','line_number':288,'multiline':False]['text':' _safeExecute moving the timer from _pendingTimers to _timers.','line_number':292,'multiline':False]['text':' The timer may have been canceled out of _pendingTimers','line_number':295,'multiline':False]['text':' The timer may exist in _timers in the canceled state. We need to process its','line_number':300,'multiline':False]['text':' cancellation right now so we can put the new copy in its place.','line_number':301,'multiline':False]['text':' Expiration, Timer pair','line_number':311,'multiline':False]['text':' Make the timer active by putting it into _timers and _timersById','line_number':315,'multiline':False]['text':' If the session is still pending, cancel it immediately, inline.','line_number':330,'multiline':False]['text':' If the session isn't in _pendingSessions or _sessions, it's unknown to the baton.','line_number':342,'multiline':False]['text':' If the session is in _sessions and has already had its cancellation requested, return','line_number':346,'multiline':False]['text':' false and take no further action. The cancellation will be processed by a scheduled job.','line_number':347,'multiline':False]['text':' Mark the session canceled so we handle subsequent requests to cancel this session correctly.','line_number':351,'multiline':False]['text':' The session is active. Remove it and fulfill the promise out-of-line.','line_number':354,'multiline':False]['text':' The session may have been removed already elsewhere, and it may have even been added','line_number':357,'multiline':False]['text':' back to the baton. So we may find it's absent or no longer canceled.','line_number':358,'multiline':False]['text':' If the timer is pending, cancel it immediately, inline.','line_number':381,'multiline':False]['text':' If a cancellation was already requested, rely on the existing scheduled job to remove it','line_number':394,'multiline':False]['text':' rather than scheduling a new one.','line_number':395,'multiline':False]['text':' The timer is active. Remove it and fulfill the promise out-of-line.','line_number':402,'multiline':False]['text':' The timer may have already been canceled and removed elsewhere.','line_number':405,'multiline':False]['text':' If we're detached, no job can safely execute.','line_number':427,'multiline':False]['text':' If we have a timer, then use it to enforce a timeout for polling.','line_number':443,'multiline':False]['text':' Don't poll if we have already passed the deadline.','line_number':448,'multiline':False]['text':' The clock source and `::poll` may track time differently, so use the clock source to','line_number':454,'multiline':False]['text':' enforce the timeout.','line_number':455,'multiline':False]['text':' There's a pending notification and there are no sessions. We should just return','line_number':461,'multiline':False]['text':' rather than calling poll().','line_number':462,'multiline':False]['text':' Stores of kNone can use relaxed memory order because the notifying thread only needs','line_number':464,'multiline':False]['text':' to see the write of kNone; unrelated writes can safely be reordered around it.','line_number':465,'multiline':False]['text':' Both consumes a notification (if-any) and mark us as no-longer in poll.','line_number':491,'multiline':False]['text':' Don't wait if there is a notification pending.','line_number':501,'multiline':False]['text':' Polling was timed out or interrupted.','line_number':515,'multiline':False]['text':' Consume the notification on the `eventfd` object if there is any.','line_number':518,'multiline':False]['text':' The session could exist in _sessions, and we need to assert that it's canceled if so.','line_number':552,'multiline':False]['text':' The session must not already be in _pendingSessions - cancellations of pending sessions','line_number':557,'multiline':False]['text':' are processed immediately, inline, so if the session is there, this is a duplicate.','line_number':558,'multiline':False]['text':' _safeExecute moving the session from _pendingSessions to _sessions.','line_number':562,'multiline':False]['text':' The session may have been canceled out of _pendingSessions','line_number':566,'multiline':False]['text':' The session may exist in _sessions in the canceled state. We need to process its','line_number':570,'multiline':False]['text':' cancellation right now so we can put the new copy in its place.','line_number':571,'multiline':False]['text':' Pending sessions cannot remain in the baton in the canceled state','line_number':580,'multiline':False]['text':' namespace transport','line_number':645,'multiline':False]['text':' namespace mongo','line_number':646,'multiline':False]