['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * AsioTransportLayer Baton implementation for linux.
 *
 * We implement our networking reactor on top of poll + eventfd for wakeups
 ','line_number':53,'multiline':True]['text':' Overrides for `OutOfLineExecutor`','line_number':70,'multiline':False]['text':' Overrides for `Waitable` and `Notifyable`','line_number':73,'multiline':False]['text':' Overrides for `Baton`','line_number':80,'multiline':False]['text':' Overrides for `NetworkingBaton`','line_number':83,'multiline':False]['text':'*
     * Cancellations are not necessarily processed in order. For example, consider:
     * Baton someBaton;
     * someBaton.addSession(S1); someBaton.addSession(S2);
     * someBaton.cancelSession(S1); someBaton.cancelSession(S2);
     * The continuation for `S1` may run before or after that of `S2`. Continuations for
     * timers behave similarly with respect to cancellation.
     ','line_number':90,'multiline':True]['text':' Stores the unique identifier for the timer, provided by `ReactorTimer`.','line_number':110,'multiline':False]['text':' Events to consider while polling for this session (e.g., `POLLIN`).','line_number':117,'multiline':False]['text':'
     * Internally, `AsioNetworkingBaton` thinks in terms of synchronized units of work. This is
     * because a baton effectively represents a green thread with the potential to add or remove
     * work (i.e., jobs) at any time. Thus, scheduled jobs must release their lock before executing
     * any task external to the baton (e.g., `OutOfLineExecutor::Task`, `TransportSession:promise`,
     * and `ReactorTimer::promise`).
     ','line_number':125,'multiline':True]['text':'*
     * Invokes a job with exclusive access to the baton's internals.
     *
     * If the baton is currently polling (i.e., `_inPoll` is `true`), the polling thread owns the
     * baton, so we schedule the job and notify the polling thread to wake up and run the job.
     *
     * Otherwise, take exclusive access and run the job on the current thread.
     *
     * Note that `_safeExecute()` will throw if the baton has been detached.
     *
     * Also note that the job may not run inline, and may get scheduled to run by the baton, so it
     * should never throw.
     ','line_number':134,'multiline':True]['text':'*
     * Blocks polling on the registered sessions until one of the following happens:
     * - `notify()` is called, either directly or through other methods (e.g., `schedule()`).
     * - One of the timers scheduled on this baton times out.
     * - There is an event for at least one of the registered sessions (e.g., data is available).
     * Returns two lists of promises that must be fulfilled as the result of polling - the first
     * must be fulfilled successfully and the second must be fulfilled with a cancellation error.
     ','line_number':149,'multiline':True]['text':'*
     * We use `_notificationState` to send a notification without going through the eventfd
     * where possible. If we're in the middle of polling, we must use the eventfd so as
     * to wake up the polling thread. Otherwise, we just transition to the `kNotificationPending`
     * state, which is seen in the next call to `_poll()`.
     *
     * In `notify()`, a thread sending a notification can cause a transition from any state to
     * `kNotificationPending`. Graphically:
     *
     * kNone ----1----> kNotificationPending <----2---- kInPoll
     * (1) The polling thread is not blocked in `::poll()` - don't call `notify()`
     * (2) The polling thread may be blocked in `::poll()` - call `notify()`
     *
     * In `_poll()`, the polling thread transitions to `kInPoll` (from any other state) before
     * calling `::poll()`, and transitions to `kNone` after `::poll()` returns.
     * There is also a fast path from `kNotificationPending` to `kNone` when a notification is
     * pending and there are no sessions to poll on.
     *
     * +-------+ -----2-----> +---------+            +----------------------+
     * | kNone |              | kInPoll | <----3---- | kNotificationPending |
     * +-------+ <----1------ +---------+            +----------------------+
     *    ^                                               |
     *    +---------------------4-------------------------+
     *
     * (1) Return from `::poll()`
     * (2) Start polling with no notification pending - use blocking call to `::poll()`
     * (3) Start polling with a pending notification - use non-blocking call to `::poll()`
     * (4) Start polling with a pending notification and no active sessions - skip `::poll()`
     *
     * Notice that only notifying threads transition to `kNotificationPending` and only the polling
     * thread transitions out of `kNotificationPending`. This gives the polling thread exclusive
     * ownership over `_notificationState` in that state (i.e., no one else will write to it).
     ','line_number':170,'multiline':True]['text':'*
     * Stores the sessions we need to poll on.
     * `_pendingSessions` stores sessions that have been added, but due to an ongoing poll, haven't
     * been added to `_sessions` yet. The baton only starts polling on a session once it gets
     * added to `_sessions`.
     ','line_number':206,'multiline':True]['text':'*
     * We use three structures to maintain timers:
     * - `_timers` keeps a sorted list of timers according to their expiration date.
     * - `_timersById` allows using the unique timer id to find and cancel a timer in constant time.
     * - `_pendingTimers` keeps a map from timer id to (timer, expiration) pairs that haven't
     *   been added to the other two members yet due to an ongoing `_poll`.
     * Timers that are in `_pendingTimers` won't fire upon expiration until they are added to
     * `_timers` and `_timersById`.
     ','line_number':215,'multiline':True]['text':' Tasks scheduled for deferred execution.','line_number':228,'multiline':False]['text':'
     * We hold the following values at the object level to save on allocations when a baton is
     * waited on many times over the course of its lifetime:
     * `_pollSet`: the poll set for `::poll`.
     * `_pollSessions`: maps members of `_pollSet` to their corresponding session in `_sessions`.
     ','line_number':231,'multiline':True]['text':' namespace transport','line_number':243,'multiline':False]['text':' namespace mongo','line_number':244,'multiline':False]