['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Provides common functionality between AsyncAsioSession and SyncAsioSession.
 *
 * NOTE: This functionality is currently provided by inheritance, but composition might be a
 * preferred approach after more refactoring.
 ','line_number':46,'multiline':True]['text':'*
     * If the socket is disconnected while any of these options are being set, this constructor
     * may throw, but it is guaranteed to throw a mongo DBException.
     ','line_number':54,'multiline':True]['text':'* Constructs a SSL socket required to initiate SSL handshake for egress connections. ','line_number':124,'multiline':True]['text':'*
     * Provides the means to track and cancel async I/O operations scheduled through `Session`.
     * Any I/O operation goes through the following steps:
     * - `start()`: changes the state from `kNotStarted` to `kRunning`.
     * - Before scheduling the async operation, checks for cancellation through `isCanceled()`.
     * - `complete()`: clears the state, and prepares the session for future operations.
     *
     * This class is thread-safe.
     ','line_number':137,'multiline':True]['text':'*
         * Instructs an active operation to cancel (if there is any). Otherwise, it does nothing.
         * Cancellation is non-blocking and `cancel()` doesn't block for completion of ongoing
         * operations.
         ','line_number':162,'multiline':True]['text':'*
         * State transition diagram:
         * -+-> [kNotStarted] --> [kRunning] --> [kCanceled]
         *  |                          |              |
         *  +--------------------------+--------------+
         ','line_number':173,'multiline':True]['text':'*
     * moreToSend checks the ssl socket after an opportunisticWrite.  If there are still bytes to
     * send, we manually send them off the underlying socket.  Then we hook that up with a future
     * that gets us back to sending from the ssl side.
     *
     * There are two variants because we call opportunisticWrite on generic sockets and ssl sockets.
     * The generic socket impl never has more to send (because it doesn't have an inner socket it
     * needs to keep sending).
     ','line_number':197,'multiline':True]['text':'*
     * Called from read() to send an HTTP response back to a client that's trying to use HTTP
     * over a native MongoDB port. This returns a Future<Message> to match its only caller, but it
     * always contains an error, so it could really return Future<Anything>
     ','line_number':242,'multiline':True]['text':'*
     * Synchronizes construction of _sslSocket in maybeHandshakeSSLForIngress and access of
     * _sslSocket during shutdown in end(). Without synchronization, end() can operate on _socket
     * while its ownership is being passed to _sslSocket.
     * TODO (SERVER-83933) Remove this mutex after SSL handshake logic is moved to occur before
     * concurrent accesses can occur.
     ','line_number':278,'multiline':True]['text':'*
     * Strictly orders the start and cancellation of asynchronous operations:
     * - Holding the mutex while starting asynchronous operations (e.g., adding the session to the
     *   networking baton) ensures cancellation either happens before or after scheduling of the
     *   operation.
     * - Holding the mutex while canceling asynchronous operations guarantees no operation can start
     *   while cancellation is in progress.
     *
     * Opportunistic read and write are implemented as recursive future continuations, so we may
     * recursively acquire the mutex when the future is readied inline.
     ','line_number':295,'multiline':True]['text':' NOLINT','line_number':306,'multiline':False]['text':'*
 * This is an AsioSession which is intended to only use the `asyncSourceMessage`,
 * `asyncSinkMessage`, and `asyncWaitForData` subset of the Session's read/write/wait interface.
 * Usage of non async counterparts of these functions causes an invariant to be triggered.
 *
 * NOTE: Longer-term the intention of the split between Sync and Async implementations is to firstly
 * have two cleaner implementations instead of one implementation that supports both modes of
 * operation, and secondly to reduce the size of the read/write/wait Session interface into a
 * generic future-returning interface, where the readiness of those futures depends on the
 * implementing subclass. At the moment, the distinction between the classes is limited to which
 * functions are allowed to be called.
 ','line_number':309,'multiline':True]['text':'*
 * This is an AsioSession which is intended to only use the `sourceMessage`, `sinkMessage`, and
 * `waitForData` subset of the Session's read/write/wait interface. Usage of async counterparts of
 * these functions causes an invariant to be triggered.
 *
 * NOTE: See AsyncAsioSession's note explaining the current state and purpose of the separation.
 ','line_number':334,'multiline':True]['text':' namespace mongo::transport','line_number':354,'multiline':False]