['text':'*
 *    Copyright (C) 2021-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace','line_number':105,'multiline':False]['text':' Inbound connection, query socket for remote.','line_number':127,'multiline':False]['text':' Outbound connection, get remote from resolved endpoint.','line_number':130,'multiline':False]['text':' Necessary for TCP_FASTOPEN where the remote isn't connected yet.','line_number':131,'multiline':False]['text':'keep the buffer alive','line_number':216,'multiline':True]['text':' If we have a baton, it was for networking, and it owned our session, then we're done.','line_number':235,'multiline':False]['text':' socket.is_open() only returns whether the socket is a valid file descriptor and','line_number':248,'multiline':False]['text':' if we haven't marked this socket as closed already.','line_number':249,'multiline':False]['text':' Change boost::none (which means no timeout) into a zero value for the socket option,','line_number':333,'multiline':False]['text':' which also means no timeout.','line_number':334,'multiline':False]['text':' Socket timeouts currently only effect synchronous calls, so make sure the caller isn't','line_number':358,'multiline':False]['text':' expecting a socket timeout when they do an async operation.','line_number':359,'multiline':False]['text':' There may not be any endpoints if this connection is directly','line_number':397,'multiline':False]['text':' from the proxy itself or the information isn't available.','line_number':398,'multiline':False]['text':' `opportunisticRead` expects to run as part of an asynchronous operation. We start the','line_number':407,'multiline':False]['text':' operation below and make sure to mark it as completed, regardless of the completion','line_number':408,'multiline':False]['text':' status of the future continuation returned by `opportunisticRead`.','line_number':409,'multiline':False]['text':' Drain the read buffer.','line_number':413,'multiline':False]['text':' This probably isn't a real case since all (current) messages have bodies.','line_number':452,'multiline':False]['text':' We do some trickery in asio (see moreToSend), which appears to work well on linux,','line_number':510,'multiline':False]['text':' but fails on other platforms.','line_number':511,'multiline':False]['text':' Opportunistic writes are broken for async egress SSL (switching between blocking','line_number':515,'multiline':False]['text':' and non-blocking mode corrupts the TLS exchange).','line_number':516,'multiline':False]['text':' MONGO_CONFIG_SSL','line_number':523,'multiline':False]['text':' retry syscall EINTR','line_number':546,'multiline':False]['text':' retry syscall EINTR','line_number':554,'multiline':False]['text':' asio::read is a loop internally, so some of buffers may have been read into already.','line_number':559,'multiline':False]['text':' So we need to adjust the buffers passed into async_read to be offset by size, if','line_number':560,'multiline':False]['text':' size is > 0.','line_number':561,'multiline':False]['text':' If the baton has detached, it will cancel its polling. We catch that','line_number':576,'multiline':False]['text':' error here and return Status::OK so that we invoke','line_number':577,'multiline':False]['text':' opportunisticRead() again and switch to asio::async_read() below.','line_number':578,'multiline':False]['text':' retry syscall EINTR','line_number':612,'multiline':False]['text':' retry syscall EINTR','line_number':619,'multiline':False]['text':' asio::write is a loop internally, so some of buffers may have been read into already.','line_number':625,'multiline':False]['text':' So we need to adjust the buffers passed into async_write to be offset by size, if','line_number':626,'multiline':False]['text':' size is > 0.','line_number':627,'multiline':False]['text':' If the baton has detached, it will cancel its polling. We catch that','line_number':646,'multiline':False]['text':' error here and return Status::OK so that we invoke','line_number':647,'multiline':False]['text':' opportunisticWrite() again and switch to asio::async_write() below.','line_number':648,'multiline':False]['text':' This logic was taken from the old mongo/util/net/sock.cpp.','line_number':675,'multiline':False]['text':'','line_number':676,'multiline':False]['text':' It lets us run both TLS and unencrypted mongo over the same port.','line_number':677,'multiline':False]['text':'','line_number':678,'multiline':False]['text':' The first message received from the client should have the responseTo field of the wire','line_number':679,'multiline':False]['text':' protocol message needs to be 0 or -1. Otherwise the connection is either sending','line_number':680,'multiline':False]['text':' garbage or a TLS Hello packet which will be caught by the TLS handshake.','line_number':681,'multiline':False]['text':' MONGO_CONFIG_SSL','line_number':757,'multiline':False]['text':' namespace mongo::transport','line_number':798,'multiline':False]