['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':35,'multiline':False]['text':'* X-Macro defining the mocked event names and their function signatures ','line_number':109,'multiline':True]['text':' Session functions ','line_number':111,'multiline':True]['text':' ServiceEntryPoint functions ','line_number':115,'multiline':True]['text':'','line_number':118,'multiline':True]['text':'*
 * Events generated by SessionWorkflow via virtual function calls to mock
 * objects. They are a means to observe and indirectly manipulate
 * SessionWorkflow's behavior to reproduce test scenarios.
 *
 * They are named for the mock object and function that emits them.
 ','line_number':120,'multiline':True]['text':'*
 * Trait that maps the Event enum to a function type.
 * Captures and analyzes the function type of each mocked Event.
 * We'll use these to enable type erasure in the framework.
 ','line_number':141,'multiline':True]['text':'*
 * Fixture that mocks interactions with a `SessionWorkflow`.
 ','line_number':229,'multiline':True]['text':'* Waits for the current Session and SessionWorkflow to end. ','line_number':261,'multiline':True]['text':'* Launches a SessionWorkflow for the current session. ','line_number':266,'multiline':True]['text':'*
     * Installs an arbitrary one-shot mock handler callback for the next event.
     * The next incoming mock event will invoke this callback and destroy it.
     ','line_number':281,'multiline':True]['text':'*
     * Wrapper around `injectMockResponse`. Installs a handler for the `expected`
     * mock event, that will return the specified `result`.
     * Returns a `Future` that is fulfilled when that mock event occurs.
     ','line_number':290,'multiline':True]['text':' The async variants will just run the same callback on `_threadPool`.','line_number':345,'multiline':False]['text':' Born in the connected state.','line_number':361,'multiline':False]['text':'*
     * Called by all mock functions to notify the main thread and get a value with which to respond.
     * The mock function call is identified by an `event`.  If there isn't already an expectation,
     * the mock object will wait for one to be injected via a call to `injectMockResponse`.
     ','line_number':426,'multiline':True]['text':'* Repro of one formerly troublesome scenario generated by the StepRunner test below. ','line_number':475,'multiline':True]['text':' One more-to-come command, yields an empty response per wire protocol','line_number':478,'multiline':False]['text':' Another message from session, this time a normal RPC.','line_number':481,'multiline':False]['text':' Client disconnects while we're waiting for their next command.','line_number':485,'multiline':False]['text':'*
 * Check the behavior of an interrupted "getMore" exhaust command.
 * SessionWorkflow looks specifically for the "getMore" command name to trigger
 * this cleanup.
 ','line_number':491,'multiline':True]['text':' Produce the condition of having an active `getMore` exhaust command.','line_number':518,'multiline':False]['text':' Test thread waits on this to ensure the callback is run by the ServiceEntryPoint (and','line_number':524,'multiline':False]['text':' therefore popped) before another callback is pushed.','line_number':525,'multiline':False]['text':' Simulate a client disconnect during handleRequest. The cleanup of','line_number':528,'multiline':False]['text':' exhaust resources happens when the session disconnects. After the simulated','line_number':529,'multiline':False]['text':' client disconnect, expect the SessionWorkflow to issue a fire-and-forget "killCursors".','line_number':530,'multiline':False]['text':' Simulate the opCtx being marked as killed due to client disconnect.','line_number':534,'multiline':False]['text':' Because they're fire-and-forget commands, we will only observe `handleRequest`','line_number':549,'multiline':False]['text':' calls to the SEP for the cleanup "killCursors", and the next thing to happen','line_number':550,'multiline':False]['text':' will be the end of the session.','line_number':551,'multiline':False]['text':'*
     * Concisely encode the ways this test might respond to mock events.
     * The OK Result contents depend on which Event it's responding to.
     ','line_number':558,'multiline':True]['text':' OK result for a basic (request and response) command. ','line_number':563,'multiline':True]['text':' OK result for a exhuast command. ','line_number':564,'multiline':True]['text':' OK result for a fire-and-forget command. ','line_number':565,'multiline':True]['text':'','line_number':566,'multiline':True]['text':' External termination via the ServiceEntryPoint. ','line_number':567,'multiline':True]['text':' Socket disconnection by peer. ','line_number':568,'multiline':True]['text':' Unspecified network failure (host unreachable). ','line_number':569,'multiline':True]['text':' System shutdown. ','line_number':570,'multiline':True]['text':' An arbitrary miscellaneous error. ','line_number':571,'multiline':True]['text':'*
     * Given a list of steps, performs a series of tests exercising that list.
     *
     * The `run()` function performs a set of variations on the steps, failing
     * further and further along the way, with different errors tried at each
     * step.
     *
     * It first sets a baseline by running all the steps without injecting
     * failure. Then it checks each failure condition for each step in the
     * sequence. For example, if we have steps[NS] and failure conditions
     * fails[NF], it will run these pseudocode trials:
     *
     *   // First, no errors.
     *   { steps[0](OK); steps[1](OK); ... steps[NS-1](OK); }
     *
     *   // Inject each kind of failure at steps[0].
     *   { steps[0](fails[0]); }
     *   { steps[0](fails[1]); }
     *   ... and so on for fails[NF].
     *
     *   // Now let steps[0] succeed, but inject each kind of failure at steps[1].
     *   { steps[0](OK); steps[1](fails[0]); }
     *   { steps[0](OK); steps[1](fails[1]); }
     *   ... and so on for fails[NF].
     *
     *   // And so on the NS steps....
     ','line_number':583,'multiline':True]['text':'* The set of failures is hardcoded. ','line_number':612,'multiline':True]['text':'* Encodes a response to `event` by taking `action`. ','line_number':619,'multiline':True]['text':' The final step is assumed to have `errDisconnect` as an action,','line_number':625,'multiline':False]['text':' yielding an implied `kEnd` step.','line_number':626,'multiline':False]['text':'*
         * Run all of the trials specified by the constructor.
         ','line_number':632,'multiline':True]['text':' Incrementally push forward the step where we fail.','line_number':639,'multiline':False]['text':'*
         * Returns a new steps sequence, formed by copying the specified `q`, and
         * modifying the copy to be terminated with a `fail` at the `failAt` index.
         ','line_number':648,'multiline':True]['text':' The scenario generator will try to inject an error status into','line_number':677,'multiline':False]['text':' functions That don't report errors, so that injected Status must be ignored.','line_number':678,'multiline':False]['text':' Has a side effect of simulating a ServiceEntryPoint shutdown','line_number':694,'multiline':False]['text':' before responding with a shutdown error.','line_number':695,'multiline':False]['text':' The event table is expanded to generate the cases of a switch,','line_number':758,'multiline':False]['text':' effectively transforming the runtime value `t.event` into a','line_number':759,'multiline':False]['text':' template parameter. The `sig` is unused in the expansion.','line_number':760,'multiline':False]['text':'* Start a new session, run the `steps` sequence, and join the session. ','line_number':771,'multiline':True]['text':' namespace','line_number':833,'multiline':False]['text':' namespace mongo::transport','line_number':834,'multiline':False]