['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':50,'multiline':False]['text':'* Applies X(id) for each SplitId ','line_number':103,'multiline':True]['text':'','line_number':112,'multiline':True]['text':'*
 * Applies X(id, startSplit, endSplit) for each IntervalId.
 *
 * This table defines the intervals of a per-command `SessionWorkflow` loop
 * iteration as reported to a `SplitTimer`. The splits are time points, and the
 * `intervals` are durations between notable pairs of them.
 *
 *  [started]
 *  |   [yieldedBeforeReceive]
 *  |   |   [receivedWork]
 *  |   |   |   [processedWork]
 *  |   |   |   |   [sentResponse]
 *  |   |   |   |   |   [yieldedAfterSend]
 *  |   |   |   |   |   |   [done]
 *  |<--------------------->| total
 *  |<->|   |   |   |   |   | yieldBeforeReceive
 *  |   |<->|   |   |   |   | receiveWork
 *  |   |   |<------------->| active
 *  |   |   |<->|   |   |   | processWork
 *  |   |   |   |<->|   |   | sendResponse
 *  |   |   |   |   |<->|   | yieldAfterSend
 *  |   |   |   |   |   |<->| finalize
 ','line_number':114,'multiline':True]['text':'','line_number':145,'multiline':True]['text':'* Trait for the count of the elements in a packed enum. ','line_number':152,'multiline':True]['text':' TODO(SERVER-63883): Remove when re-introducing real metrics.','line_number':288,'multiline':False]['text':' namespace metrics_detail','line_number':302,'multiline':False]['text':'*
 * Given a request and its already generated response, checks for exhaust flags. If exhaust is
 * allowed, produces the subsequent request message, and modifies the response message to indicate
 * it is part of an exhaust stream. Returns the subsequent request message, which is known as a
 * 'synthetic' exhaust request. Returns an empty optional if exhaust is not allowed.
 ','line_number':304,'multiline':True]['text':' The command provided a new BSONObj for the next invocation.','line_number':319,'multiline':False]['text':' Reuse the previous invocation for the next invocation.','line_number':324,'multiline':False]['text':' The id of the response is used as the request id of this 'synthetic' request. Re-checksum','line_number':329,'multiline':False]['text':' if needed.','line_number':330,'multiline':False]['text':' Indicate that the response is part of an exhaust stream (unless the 'doNotSetMoreToCome'','line_number':339,'multiline':False]['text':' failpoint is set). Re-checksum if needed.','line_number':340,'multiline':False]['text':'*
 * If `in` encodes a "getMore" command, make a best-effort attempt to kill its
 * cursor. Returns true if such an attempt was successful. If the killCursors request
 * fails here for any reasons, it will still be cleaned up once the cursor times
 * out.
 ','line_number':351,'multiline':True]['text':' Counts the # of responses to completed operations that we were unable to send back to the client.','line_number':381,'multiline':False]['text':' namespace','line_number':383,'multiline':False]['text':'
     * Terminates the associated transport Session, regardless of tags.
     *
     * This will not block on the session terminating cleaning itself up, it returns immediately.
     ','line_number':403,'multiline':True]['text':'
     * Terminates the associated transport Session if the connection tags in the client don't match
     * the supplied tags.  If the connection tags indicate a pending state, before any tags have
     * been set, it will not be terminated.
     *
     * This will not block on the session terminating cleaning itself up, it returns immediately.
     ','line_number':410,'multiline':True]['text':' Allows switching the executor between iterations of the workflow.','line_number':429,'multiline':False]['text':'* Alias: refers to this Impl, but holds a ref to the enclosing workflow. ','line_number':464,'multiline':True]['text':'*
     * Returns a callback that's just like `cb`, but runs under the `_clientStrand`.
     * The wrapper binds a `shared_from_this` so `cb` doesn't need its own copy
     * of that anchoring shared pointer.
     ','line_number':469,'multiline':True]['text':'* Returns a Future for the next WorkItem. ','line_number':484,'multiline':True]['text':' Already have one ready.','line_number':488,'multiline':False]['text':' Yield here to avoid pinning the CPU. Give other threads some CPU','line_number':490,'multiline':False]['text':' time to avoid a spiky latency distribution (BF-27452). Even if','line_number':491,'multiline':False]['text':' this client can run continuously and receive another command','line_number':492,'multiline':False]['text':' without blocking, we yield anyway. We WANT context switching, and','line_number':493,'multiline':False]['text':' we're trying deliberately to make it happen, to reduce long tail','line_number':494,'multiline':False]['text':' latency.','line_number':495,'multiline':False]['text':'* Receives a message from the session and creates a new WorkItem from it. ','line_number':501,'multiline':True]['text':'* Sends work to the ServiceEntryPoint, obtaining a future for its completion. ','line_number':504,'multiline':True]['text':'* Handles the completed response from dispatched work. ','line_number':507,'multiline':True]['text':'* Writes the completed work response to the Session. ','line_number':510,'multiline':True]['text':'
     * Releases all the resources associated with the exhaust request.
     * When the session is closing, the most recently synthesized exhaust
     * `WorkItem` may refer to a cursor that we won't need anymore, so we can
     * try to kill it early as an optimization.
     ','line_number':517,'multiline':True]['text':'*
     * Notify the task runner that this would be a good time to yield. It might
     * not actually yield, depending on implementation and on overall system
     * state.
     *
     * Yielding at certain points in a command's processing pipeline has been
     * considered to be beneficial to performance.
     ','line_number':525,'multiline':True]['text':'*< created by exhaust responses ','line_number':546,'multiline':True]['text':'*
     * If the incoming message has the exhaust flag set, then we bypass the normal RPC
     * behavior. We will sink the response to the network, but we also synthesize a new
     * request, as if we sourced a new message from the network. This new request is
     * sent to the database once again to be processed. This cycle repeats as long as
     * the command indicates the exhaust stream should continue.
     ','line_number':606,'multiline':True]['text':' Our session may have been closed internally.','line_number':655,'multiline':False]['text':' Pass sourced Message to handler to generate response.','line_number':712,'multiline':False]['text':' opCtx must be delisted here so that the operation cannot show up in currentOp results after','line_number':720,'multiline':False]['text':' the response reaches the client. We are assuming that the operation has already been killed','line_number':721,'multiline':False]['text':' once we are accepting the response here, so delisting is sufficient. Destruction of the','line_number':722,'multiline':False]['text':' already killed opCtx is postponed for later (i.e., after completion of the future-chain) to','line_number':723,'multiline':False]['text':' mitigate its performance impact on the critical path of execution.','line_number':724,'multiline':False]['text':' Note that destroying futures after execution, rather that postponing the destruction','line_number':725,'multiline':False]['text':' until completion of the future-chain, would expose the cost of destroying opCtx to','line_number':726,'multiline':False]['text':' the critical path and result in serious performance implications.','line_number':727,'multiline':False]['text':' Format our response, if we have one','line_number':729,'multiline':False]['text':' Update the header for the response message.','line_number':736,'multiline':False]['text':' If the incoming message has the exhaust flag set, then bypass the normal RPC','line_number':742,'multiline':False]['text':' behavior. Sink the response to the network, but also synthesize a new','line_number':743,'multiline':False]['text':' request, as if a new message was sourced from the network. This new request is','line_number':744,'multiline':False]['text':' sent to the database once again to be processed. This cycle repeats as long as','line_number':745,'multiline':False]['text':' the dbresponses continue to indicate the exhaust stream should continue.','line_number':746,'multiline':False]['text':'* Returns a Future representing the completion of one loop iteration. ','line_number':768,'multiline':True]['text':' If terminateIfTagsDontMatch gets called when we still are 'pending' where no tags have been','line_number':826,'multiline':False]['text':' set, then skip the termination check.','line_number':827,'multiline':False]['text':' Make sure we clean up and delist the operation in the case we error between creating','line_number':847,'multiline':False]['text':' the opCtx and getting a response back for the work item. This is required in the case','line_number':848,'multiline':False]['text':' that we need to create a new opCtx to kill existing exhaust resources.','line_number':849,'multiline':False]['text':' namespace mongo::transport','line_number':879,'multiline':False]