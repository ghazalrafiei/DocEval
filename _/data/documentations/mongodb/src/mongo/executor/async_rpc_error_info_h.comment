['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Contains generic reply fields that can be part of any command response, separated based on
 * whether fields are part of the stable API. The generic reply fields are generated from
 * '../idl/generic_args_with_types.idl'.
 ','line_number':57,'multiline':True]['text':'*
 * Contains information to augment the 'RemoteCommandExecutionError' error code. In particular, this
 * class holds the provenance and data of the underlying error(s).
 ','line_number':71,'multiline':True]['text':'*
     * Nested class used to describe remote errors.
     ','line_number':77,'multiline':True]['text':' The BSON received over-the-wire that encodes the remote','line_number':82,'multiline':False]['text':' error is stored and used to construct this in-memory representation.','line_number':83,'multiline':False]['text':' The buffer backing the default empty BSONObj has static duration so it is effectively','line_number':91,'multiline':False]['text':' owned.','line_number':92,'multiline':False]['text':' Required member of every ErrorExtraInfo.','line_number':147,'multiline':False]['text':' Unused and marked unreachable - the RemoteCommandExecutionError is InternalOnly and should','line_number':150,'multiline':False]['text':' never be encoded in a BSONObj / received or sent over-the-wire.','line_number':151,'multiline':False]['text':'*
     * Construct the relevant extra info from the RemoteCommandResponse provided by the TaskExecutor
     * used to invoke the remote command.
     ','line_number':154,'multiline':True]['text':'*
     * Construct the relevant extra info from an error status - used if a remote command invokation
     * attempt fails before it reaches the TaskExecutor level.
     ','line_number':172,'multiline':True]['text':' Unused and marked unreachable - the RemoteCommandExecutionError is InternalOnly and should','line_number':205,'multiline':False]['text':' never be encoded in a BSONObj / received or sent over-the-wire.','line_number':206,'multiline':False]['text':'*
 * Note! Treats *all* possible RPC failures, including writeConcern and write errors,
 * as errors!
 *
 * Converts a RemoteCommandExecutionError from the async_rpc::sendCommand API
 * into the highest-priority 'underlying error' responsible for the RPC error.
 * The priority-ordering is as follows:
 *   (1) If there was an error on the local node (i.e. the sender) that caused
 *       the failure, that error is returned.
 *   (2) If we received an {ok: 0} response from the remote node, that error
 *       is returned.
 *   (3) If we received an {ok: 1} response from the remote node, but a write
 *       concern error, the write concern error is returned.
 *   (4) If we received an {ok: 1} response from the remote node, and no write
 *       concern error, but write error[s], the first write error is returned.
 ','line_number':217,'multiline':True]['text':'*
 * Converts a RemoteCommandExecutionError from the async_rpc::sendCommand API
 * into the highest-priority 'underlying error' responsible for the RPC error,
 * ignoring write errors returned from the remote. This means:
 *   (1) If there was an error on the local node that caused the failure,
 *       that error is returned.
 *   (2) If we received an {ok: 0} response from the remote node, that error
 *       is returned.
 *   (3) If we received an {ok: 1} response from the remote node, but a write
 *       concern error, the write concern error is returned.
 ','line_number':235,'multiline':True]['text':'*
 * Converts a RemoteCommandExecutionError from the async_rpc::sendCommand API
 * into the highest-priority 'underlying error' responsible for the RPC error,
 * ignoring and writeConcern and/or write errors returned from the remote. This
 * means:
 *   (1) If there was an error on the local node that caused the failure,
 *       that error is returned.
 *   (2) If we received an {ok: 0} response from the remote node, that error
 *       is returned.
 *   (3) Otherwise, we received an {ok: 1} response from the remote node,
 *       and therefore Status::OK is returned.
 ','line_number':248,'multiline':True]['text':' namespace async_rpc','line_number':261,'multiline':False]['text':' namespace mongo','line_number':262,'multiline':False]