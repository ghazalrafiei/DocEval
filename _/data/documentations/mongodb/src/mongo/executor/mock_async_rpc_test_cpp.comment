['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This test fixture is used to test the functionality of the mocks, rather than test any facilities
 * or usage of the AsyncRPCRunner implementation.
 ','line_number':56,'multiline':True]['text':' A simple test showing that an arbitrary mock result can be set for a command scheduled through','line_number':114,'multiline':False]['text':' the AsyncRPCRunner.','line_number':115,'multiline':False]['text':' Ensure the targetAttempted/used portions of the error is populated correctly.','line_number':158,'multiline':False]['text':' Ensure we fail to parse the reply due to the unknown fields.','line_number':164,'multiline':False]['text':' The error returned by our API should always be RemoteCommandExecutionError.','line_number':175,'multiline':False]['text':' Make sure we can extract the extra error info.','line_number':177,'multiline':False]['text':' Make sure the extra info indicates the error was local, and that the','line_number':180,'multiline':False]['text':' local error (which is just a Status) is the one we provided.','line_number':181,'multiline':False]['text':' Ensure the targetAttempted portion of the error is populated correctly.','line_number':184,'multiline':False]['text':' OperationKey not provided, so internally created OperationKey must be extracted to make','line_number':232,'multiline':False]['text':' this assertion valid','line_number':233,'multiline':False]['text':' A simple test showing that we can asynchronously register an expectation','line_number':278,'multiline':False]['text':' that a request will eventually be scheduled with the mock before a request','line_number':279,'multiline':False]['text':' actually arrives. Then, once the request is scheduled, we are asynchronously','line_number':280,'multiline':False]['text':' notified of the request and can schedule a response to it.','line_number':281,'multiline':False]['text':' We expect that some code will use the runner to send a hello','line_number':283,'multiline':False]['text':' to localhost on "testdb".','line_number':284,'multiline':False]['text':' Register our expectation and ensure it isn't yet met.','line_number':290,'multiline':False]['text':' Allow a request to be scheduled on the mock.','line_number':298,'multiline':False]['text':' Now, our expectation should be met, and the response to it provided.','line_number':301,'multiline':False]['text':' We expect that some code will use the runner to send a hello','line_number':309,'multiline':False]['text':' to localhost on "testdb".','line_number':310,'multiline':False]['text':' Allow a request to be scheduled on the mock.','line_number':321,'multiline':False]['text':' Now, our expectation should be met, and the response to it provided.','line_number':324,'multiline':False]['text':' Ensure the targetAttempted portion of the error is populated correctly.','line_number':331,'multiline':False]['text':' We expect that some code will use the runner to send a hello','line_number':345,'multiline':False]['text':' to localhost on "testdb".','line_number':346,'multiline':False]['text':' Allow a request to be scheduled on the mock.','line_number':356,'multiline':False]['text':' Now, our expectation should be met, and the response to it provided.','line_number':359,'multiline':False]['text':' Ensure the targetAttempted portion of the error is populated correctly.','line_number':367,'multiline':False]['text':' We expect that some code will use the runner to send a hello','line_number':375,'multiline':False]['text':' to localhost on "testdb".','line_number':376,'multiline':False]['text':' Register our expectation and ensure it isn't yet met.','line_number':383,'multiline':False]['text':' Allow a request to be scheduled on the mock.','line_number':402,'multiline':False]['text':' Now, our first expectation should be met.','line_number':406,'multiline':False]['text':' Advance the network clock to simulate the delay between retries so the second expectation','line_number':409,'multiline':False]['text':' will be met.','line_number':410,'multiline':False]['text':' The second expectation should be met.','line_number':417,'multiline':False]['text':' A more complicated test that registers several expectations, and then','line_number':424,'multiline':False]['text':' schedules the requests that match them and their responses out-of-order.','line_number':425,'multiline':False]['text':' Demonstrates how we can register expectations on the mock for events in an','line_number':426,'multiline':False]['text':' unordered way.','line_number':427,'multiline':False]['text':' Create three expectations','line_number':443,'multiline':False]['text':' Send requests corresponding to expectations `e3` and `e2`, but not as`e1`.','line_number':456,'multiline':False]['text':' Make sure the correct responses were sent.','line_number':462,'multiline':False]['text':' Now, send a request matching `e1` as well.','line_number':471,'multiline':False]['text':' Note that unexpected requests are BSON-convertable and can be printed as extended JSON.','line_number':492,'multiline':False]['text':' For example, if you wanted to fail the test if any unexpected requests were found, and','line_number':493,'multiline':False]['text':' print out the first such offending request, you could simply do:','line_number':494,'multiline':False]['text':' ASSERT(!getMockRunner().hadUnexpectedRequests())','line_number':495,'multiline':False]['text':'      << "but found: " << optional_io::Extension{getMockRunner().getFirstUnexpectedRequest()};','line_number':496,'multiline':False]['text':' (This is a live example, feel free to uncomment and try it).','line_number':497,'multiline':False]['text':' Note that unmet expectations all have string names and can be printed.','line_number':515,'multiline':False]['text':' For example, if you wanted to fail the test if any unmet expectations were found, and','line_number':516,'multiline':False]['text':' print out the first such offending expectation , you could simply do:','line_number':517,'multiline':False]['text':' ASSERT(!getMockRunner().hasUnmetExpectations())','line_number':518,'multiline':False]['text':'      << optional_io::Extension{getMockRunner().getFirstUnmetExpectation()};','line_number':519,'multiline':False]['text':' (This is a live example, feel free to uncomment and try it).','line_number':520,'multiline':False]['text':' namespace','line_number':522,'multiline':False]['text':' namespace mongo::async_rpc','line_number':523,'multiline':False]