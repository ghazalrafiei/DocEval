['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':30,'multiline':False]['text':' We first expect sink message to be called and to see the hello','line_number':116,'multiline':False]['text':' Now we expect source message to be called and provide the response','line_number':123,'multiline':False]['text':' Test we can schedule multiple RPC on the executor, and that they then','line_number':135,'multiline':False]['text':' run serially over the same transport session.','line_number':136,'multiline':False]['text':' Schedule two RPCs','line_number':141,'multiline':False]['text':' We first expect sink message to be called and to see the i'th request','line_number':156,'multiline':False]['text':' (All i requests should appear on our same mocked session).','line_number':157,'multiline':False]['text':' Now we expect source message to be called and provide the response','line_number':167,'multiline':False]['text':' I'th command should be completed:','line_number':173,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' Schedule two RPCs','line_number':184,'multiline':False]['text':' Fail the first request','line_number':209,'multiline':False]['text':' Second command should still be able to succeed:','line_number':219,'multiline':False]['text':' Schedule two RPCs','line_number':246,'multiline':False]['text':' first command runs OK','line_number':257,'multiline':False]['text':' Second command should invariant once the PCTE attempts to run it, because it has a different','line_number':270,'multiline':False]['text':' remote target.','line_number':271,'multiline':False]['text':' Should never be fulfilled.','line_number':272,'multiline':False]['text':' Schedule a command.','line_number':283,'multiline':False]['text':' Schedule some work','line_number':314,'multiline':False]['text':' We haven't done any RPCs, so we shouldn't have touched any of the stream counters.','line_number':336,'multiline':False]['text':' We have compelted an RPC successfully using the leased stream:','line_number':362,'multiline':False]['text':' We haven't done any RPCs, so we shouldn't have touched any of the stream counters.','line_number':372,'multiline':False]['text':' Schedule two RPCs','line_number':378,'multiline':False]['text':' Fail the first request','line_number':404,'multiline':False]['text':' The second should be cancelled automatically by shutdown.','line_number':410,'multiline':False]['text':' We failed.','line_number':414,'multiline':False]['text':'*
 * We want to test the following sequence:
 *  (1) A command is scheduled.
 *  (2) The command fails due to a network error.
 *  (3) The command is notified of the failure (its onResponse callback is invoked).
 *
 *  We want to ensure that the stream used by PCTE is destroyed _before_ the command is
 *  notified of the failure. This allows the underlying NetworkInterface to
 *  observe the failure on the initial stream & correctly update internally before it might
 *  be asked to provide another stream to i.e. retry the command.
 ','line_number':421,'multiline':True]['text':' Ensure the stream was destroyed before we are notified of the command completing.','line_number':442,'multiline':False]['text':' Fail the first request','line_number':459,'multiline':False]['text':' Ensure we ran the completion callback.','line_number':463,'multiline':False]['text':' namespace','line_number':470,'multiline':False]['text':' namespace mongo::executor','line_number':471,'multiline':False]