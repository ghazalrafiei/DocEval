['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':31,'multiline':False]['text':' On mongos, there is no sleep command, so just check that the command failed with','line_number':103,'multiline':False]['text':' a "Command not found" error code','line_number':104,'multiline':False]['text':' Hook that intentionally never finishes','line_number':134,'multiline':False]['text':' Test that we time out a command if the connection hook hangs.','line_number':164,'multiline':False]['text':'*
     *  Since mongos's have no ping command, we effectively skip this test by returning
     *  ExceededTimeLimit above. (That ErrorCode is used heavily in repl and sharding code.)
     *  If we return NetworkInterfaceExceededTimeLimit, it will make the ConnectionPool
     *  attempt to reform the connection, which can lead to an accepted but unfortunate
     *  race between TLConnection::setup and TLTypeFactory::shutdown.
     *  We assert here that the error code we get is in the error class of timeouts,
     *  which covers both NetworkInterfaceExceededTimeLimit and ExceededTimeLimit.
     ','line_number':168,'multiline':True]['text':' NetworkInterfaceIntegrationFixture::tearDown() shuts down the NetworkInterface. We always','line_number':216,'multiline':False]['text':' need to do it even if we have additional tearDown tasks.','line_number':217,'multiline':False]['text':'*
     * Returns true if the given command is still running.
     ','line_number':265,'multiline':True]['text':'*
     * Repeatedly runs currentOp to check if the given command is running, and blocks until
     * the command starts running or the wait timeout is reached. Asserts that the command
     * is running after the wait and returns the number times of currentOp is run.
     ','line_number':274,'multiline':True]['text':'*
     * Repeatedly runs currentOp to check if the given command is running, and blocks until
     * the command finishes running or the wait timeout is reached. Asserts that the command
     * is no longer running after the wait and returns the number times of currentOp is run.
     ','line_number':291,'multiline':True]['text':' This is just a sanity check, this action should have no effect.','line_number':369,'multiline':False]['text':' Kick off our operation','line_number':378,'multiline':False]['text':' Wait for op to complete, assert that it was canceled.','line_number':392,'multiline':False]['text':' Enable blockConnection for "echo".','line_number':401,'multiline':False]['text':' Disable blockConnection.','line_number':413,'multiline':False]['text':' Kick off an "echo" operation, which should block until cancelCommand causes','line_number':428,'multiline':False]['text':' the operation to be killed.','line_number':429,'multiline':False]['text':' opCtx ','line_number':431,'multiline':True]['text':' Wait for the "echo" operation to start.','line_number':433,'multiline':False]['text':' Run cancelCommand to kill the above operation.','line_number':436,'multiline':False]['text':' Wait for the command to return, assert that it was canceled.','line_number':442,'multiline':False]['text':' Wait for the operation to be killed on the remote host.','line_number':447,'multiline':False]['text':' We have one canceled operation (echo), and two other succeeded operations','line_number':450,'multiline':False]['text':' on top of the currentOp operations (configureFailPoint and _killOperations).','line_number':451,'multiline':False]['text':' Enable blockConnection for "echo" and "_killOperations".','line_number':456,'multiline':False]['text':' Disable blockConnection.','line_number':470,'multiline':False]['text':' Kick off a blocking "echo" operation.','line_number':485,'multiline':False]['text':' opCtx ','line_number':487,'multiline':True]['text':' Wait for the "echo" operation to start.','line_number':489,'multiline':False]['text':' Run cancelCommand to kill the above operation. _killOperations is expected to block and','line_number':492,'multiline':False]['text':' time out, and to be canceled by the command timer.','line_number':493,'multiline':False]['text':' Wait for _killOperations for 'echo' to time out.','line_number':501,'multiline':False]['text':' Wait for the command to return, assert that it was canceled.','line_number':507,'multiline':False]['text':' We have one canceled operation (echo), one timedout operation (_killOperations),','line_number':512,'multiline':False]['text':' and one succeeded operation on top of the currentOp operations (configureFailPoint).','line_number':513,'multiline':False]['text':' Kick off our operation','line_number':521,'multiline':False]['text':' Wait for op to complete, assert that it was canceled.','line_number':535,'multiline':False]['text':' Wait for op to complete, assert that it was canceled.','line_number':547,'multiline':False]['text':' Wait for one of the connection attempts to fail with a `ConnectionError`.','line_number':563,'multiline':False]['text':' Connection dropped during finishRefresh, so the dropped connection still','line_number':573,'multiline':False]['text':' counts toward the refreshed counter.','line_number':574,'multiline':False]['text':' Kick off operation','line_number':579,'multiline':False]['text':' mongos doesn't implement the ping command, so ignore the response there, otherwise','line_number':588,'multiline':False]['text':' check that we've timed out.','line_number':589,'multiline':False]['text':' Kick off operation','line_number':599,'multiline':False]['text':' The time returned in result.elapsed is measured from when the command started, which happens','line_number':615,'multiline':False]['text':' in runCommand. The delay between setting the deadline on opCtx and starting the command can','line_number':616,'multiline':False]['text':' be long enough that the assertion about opCtxDeadline fails.','line_number':617,'multiline':False]['text':' mongos doesn't implement the ping command, so ignore the response there, otherwise','line_number':624,'multiline':False]['text':' check that we've timed out.','line_number':625,'multiline':False]['text':' check that the request timeout uses the smaller of the operation context deadline and','line_number':633,'multiline':False]['text':' the timeout specified in the request constructor.','line_number':634,'multiline':False]['text':' Kick off operation','line_number':642,'multiline':False]['text':' The time returned in result.elapsed is measured from when the command started, which happens','line_number':658,'multiline':False]['text':' in runCommand. The delay between setting the deadline on opCtx and starting the command can','line_number':659,'multiline':False]['text':' be long enough that the assertion about opCtxDeadline fails.','line_number':660,'multiline':False]['text':' mongos doesn't implement the ping command, so ignore the response there, otherwise','line_number':667,'multiline':False]['text':' check that we've timed out.','line_number':668,'multiline':False]['text':' check that the request timeout uses the smaller of the operation context deadline and','line_number':676,'multiline':False]['text':' the timeout specified in the request constructor.','line_number':677,'multiline':False]['text':' opCtx ','line_number':688,'multiline':True]['text':' This opmsg request expect the following reply, which is generated below','line_number':697,'multiline':False]['text':' { echo: { echo: 1, foo: "bar", clientOperationKey: uuid, $db: "admin" }, ok: 1.0 }','line_number':698,'multiline':False]['text':' Run fireAndForget commands and verify that we get status OK responses.','line_number':726,'multiline':False]['text':' opCtx ','line_number':735,'multiline':True]['text':' Run a non-fireAndForget command and verify that we get a CommandFailed response.','line_number':746,'multiline':False]['text':' The echo command below uses hedging so after a response is returned, we will issue','line_number':757,'multiline':False]['text':' a _killOperations command to kill the pending operation. As a result, the number of','line_number':758,'multiline':False]['text':' successful commands can sometimes be 2 (echo and _killOperations) instead 1 when the','line_number':759,'multiline':False]['text':' num ops assertion below runs.','line_number':760,'multiline':False]['text':' set a first alarm, to execute after "expiration"','line_number':793,'multiline':False]['text':' assert that it executed after "expiration"','line_number':811,'multiline':False]['text':' Only internal clients can run hedged operations.','line_number':854,'multiline':False]['text':' Let the first node in the list of servers proceed with running the command by','line_number':885,'multiline':False]['text':' killing the blocked `echo` operation. This results in the completion of the','line_number':886,'multiline':False]['text':' operation and cancels all pending hedged operations.','line_number':887,'multiline':False]['text':' Must kill (and unblock) the remote operations blocked behind the `failCommand`','line_number':945,'multiline':False]['text':' fail-point (if still running) before disabling it, otherwise it will hang forever.','line_number':946,'multiline':False]['text':' Only internal clients can run hedged operations.','line_number':965,'multiline':False]['text':' Cancel the hedged operation after it is scheduled on all targets and before completion.','line_number':1002,'multiline':False]['text':' We should send `_killOperations` to all targets that have already acquired a connection','line_number':1003,'multiline':False]['text':' and might have started/completed running the operation.','line_number':1004,'multiline':False]['text':' Waits until the hedged operation is scheduled on all targets, then cancels all pending','line_number':1009,'multiline':False]['text':' operations after the first scheduled operation completes. We should send','line_number':1010,'multiline':False]['text':' `_killOperations` to all targets except for the one used to fulfill the final promise','line_number':1011,'multiline':False]['text':' (i.e. complete the operation).','line_number':1012,'multiline':False]['text':' Verify that the "hello" reply has the expected internalClient data.','line_number':1021,'multiline':False]['text':' Verify that the ping op is counted as a success.','line_number':1032,'multiline':False]['text':' Verify that the "hello" reply has the expected internalClient data.','line_number':1044,'multiline':False]['text':' Verify that the ping op is counted as a success.','line_number':1046,'multiline':False]['text':' set to true once '_responseOutcomeCount' has been updated. Used to indicate that a new','line_number':1071,'multiline':False]['text':' response has been sent.','line_number':1072,'multiline':False]['text':' counter of how many successful and failed responses were received.','line_number':1075,'multiline':False]['text':' called when a server sends a new isMaster exhaust response. Updates _responseOutcomeCount','line_number':1081,'multiline':False]['text':' and _replyUpdated.','line_number':1082,'multiline':False]['text':' The server sends a response either when a topology change occurs or when it has not sent','line_number':1111,'multiline':False]['text':' a response in 'maxAwaitTimeMS'. In this case we expect a response every 'maxAwaitTimeMS'','line_number':1112,'multiline':False]['text':' = 1000 (set in the isMaster cmd above)','line_number':1113,'multiline':False]['text':' The first response should be successful','line_number':1117,'multiline':False]['text':' The second response should also be successful','line_number':1126,'multiline':False]['text':' The command was cancelled so the 'fail' counter should be incremented','line_number':1137,'multiline':False]['text':' Both assetCommandOK and makeTestCommand target the first host in the connection string, so we','line_number':1143,'multiline':False]['text':' are guaranteed that the failpoint is set on the same host that we run the exhaust command on.','line_number':1144,'multiline':False]['text':' The response should be marked as failed','line_number':1179,'multiline':False]['text':' Enable failpoint to make sure tearDown is blocked','line_number':1220,'multiline':False]['text':' Wait for the completion of the command','line_number':1225,'multiline':False]['text':' Arbitrary delay between spawning the tearDown thread and checking futures','line_number':1233,'multiline':False]['text':' to increase the chance of failures if tearDown doesn't wait for','line_number':1234,'multiline':False]['text':' in-progress commands.','line_number':1235,'multiline':False]['text':' This opmsg request expect the following reply, which is generated below','line_number':1270,'multiline':False]['text':' { echo: { echo: 1, foo: "bar", $db: "admin" }, ok: 1.0 }','line_number':1271,'multiline':False]['text':' namespace','line_number':1293,'multiline':False]['text':' namespace executor','line_number':1294,'multiline':False]['text':' namespace mongo','line_number':1295,'multiline':False]