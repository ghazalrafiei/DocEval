['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':40,'multiline':False]['text':' IWYU pragma: keep','line_number':51,'multiline':False]['text':'*
 * Invokes `f()`, and returns true if it succeeds.
 * Otherwise, we log the exception with a `hint` string and handle the error.
 * The exception handling has two possibilities, controlled by the server parameter
 * `suppressNetworkInterfaceTransportLayerExceptions`.
 * The old behavior is to simply rethrow the exception, which will crash the process.
 * The new behavior is to invoke `eh(err)` and return false. This gives the caller a way
 * to provide a route to propagate the exception as a Status (perhaps filling a promise
 * with it) and carry on.
 ','line_number':115,'multiline':True]['text':' new server parameter protected behavior','line_number':135,'multiline':False]['text':' old behavior','line_number':137,'multiline':False]['text':' namespace','line_number':152,'multiline':False]['text':'*
 * SynchronizedCounters is synchronized bucket of event counts for commands
 ','line_number':154,'multiline':True]['text':' Increment the count of commands that received a valid response','line_number':168,'multiline':False]['text':' Increment the count of commands that experienced a local timeout','line_number':171,'multiline':False]['text':' Note that these commands do not count as "failed".','line_number':172,'multiline':False]['text':' Increment the count of commands that were canceled locally','line_number':175,'multiline':False]['text':' Increment the count of commands that received an unrecoverable response','line_number':178,'multiline':False]['text':' Increment the count of commands that experienced a network failure','line_number':181,'multiline':False]['text':'*
     * Increment the count of commands sent over the network
     ','line_number':186,'multiline':True]['text':' Even if you have a service context, it may not have a transport layer (mostly for unittests).','line_number':220,'multiline':False]['text':' Because we quick exit on shutdown, these invariants are usually checked only in ASAN builds','line_number':259,'multiline':False]['text':' and integration/unit tests.','line_number':260,'multiline':False]['text':' This returns when the reactor is stopped in shutdown()','line_number':301,'multiline':False]['text':' Note that the pool will shutdown again when the ConnectionPool dtor runs','line_number':304,'multiline':False]['text':' This prevents new timers from being set, calls all cancels via the factory registry, and','line_number':305,'multiline':False]['text':' destructs all connections for all existing pools.','line_number':306,'multiline':False]['text':' Close out all remaining tasks in the reactor now that they've all been canceled.','line_number':309,'multiline':False]['text':' Cancel any remaining commands. Any attempt to register new commands will throw.','line_number':344,'multiline':False]['text':' Stop the reactor/thread first so that nothing runs on a partially dtor'd pool.','line_number':363,'multiline':False]['text':' waitForWork should only be used by network-mocking code and should not be reachable in the','line_number':377,'multiline':False]['text':' NetworkInterfaceTL.','line_number':378,'multiline':False]['text':' waitForWorkUntil should only be used by network-mocking code and should not be reachable in','line_number':383,'multiline':False]['text':' the NetworkInterfaceTL.','line_number':384,'multiline':False]['text':' This is a no-op in the NetworkInterfaceTL since the waitForWork API is unreachable here.','line_number':388,'multiline':False]['text':' TODO This check is because we set up NetworkInterfaces in MONGO_INITIALIZERS and then expect','line_number':392,'multiline':False]['text':' this method to work before the NI is started.','line_number':393,'multiline':False]['text':' If command promise was canceled or timed out, wrap the error in a RCRsp','line_number':427,'multiline':False]['text':' swRequest is either populated from the success path or the value returning','line_number':432,'multiline':False]['text':' onError above. swRequest.isOK() should not be possible.','line_number':433,'multiline':False]['text':' At this point, the command has either been sent and returned an RCRsp or','line_number':436,'multiline':False]['text':' has received a local interruption that was wrapped in a RCRsp.','line_number':437,'multiline':False]['text':' If we're in shutdown, we can't add a new command.','line_number':446,'multiline':False]['text':' Sleep to make sure the elapsed wait time for connection timeout is > 1 millisecond.','line_number':472,'multiline':False]['text':' TODO reform with SERVER-41459','line_number':501,'multiline':False]['text':' If we didn't cross the command finishLine first, the promise is already fulfilled','line_number':508,'multiline':False]['text':' The command has resolved one way or another.','line_number':548,'multiline':False]['text':' Increment our counters for the integration test','line_number':552,'multiline':False]['text':' We've finished, we're not in progress anymore','line_number':557,'multiline':False]['text':' Kill operations for requests that we didn't use to fulfill the promise.','line_number':565,'multiline':False]['text':' We cancel after we issue _killOperations because, if we cancel before, existing','line_number':570,'multiline':False]['text':' RequestStates may finish and destruct to quickly.','line_number':571,'multiline':False]['text':' If we have a client, cancel it','line_number':595,'multiline':False]['text':' When our command finishes, run onFinish out of line.','line_number':647,'multiline':False]['text':' Run the callback on the baton if it exists and is not shut down, and run on the reactor','line_number':649,'multiline':False]['text':' otherwise.','line_number':650,'multiline':False]['text':' The TransportLayer has, for historical reasons returned','line_number':658,'multiline':False]['text':' SocketException for network errors, but sharding assumes','line_number':659,'multiline':False]['text':' HostUnreachable on network errors.','line_number':660,'multiline':False]['text':' Attempt to get a connection to every target host','line_number':688,'multiline':False]['text':' If connection future is ready or requests should be sent in order, send the request','line_number':693,'multiline':False]['text':' immediately.','line_number':694,'multiline':False]['text':' Otherwise, schedule the request.','line_number':700,'multiline':False]['text':' For hedged operations, we send `_killOperations` out-of-band, and the following may','line_number':779,'multiline':False]['text':' close the connection (used to send the original command) before it receives the','line_number':780,'multiline':False]['text':' response from the `_killOperations`.','line_number':781,'multiline':False]['text':' Send `_killOperation` out of band to all targets with initialized requests (i.e., those who','line_number':794,'multiline':False]['text':' acquired a connection), regardless of their state so long as they are not used to fulfill the','line_number':795,'multiline':False]['text':' operation. The following will hold indices for targets in the initial remote command request.','line_number':796,'multiline':False]['text':' This request is used to fulfill the promise.','line_number':807,'multiline':False]['text':' Sleep to make sure the elapsed wait time for connection timeout is > 1 millisecond.','line_number':827,'multiline':False]['text':' Our connection wasn't any good','line_number':837,'multiline':False]['text':' If we still have connections outstanding, we don't need to fail the promise.','line_number':844,'multiline':False]['text':' If a request has been sent, we shouldn't fail the promise.','line_number':849,'multiline':False]['text':' If we've finished, obviously we don't need to fail the promise.','line_number':854,'multiline':False]['text':' We're the last one, set the promise if it hasn't already been set via cancel or timeout','line_number':859,'multiline':False]['text':' Increment the number of conns we were able to resolve.','line_number':899,'multiline':False]['text':' Our command has already been satisfied or we have already sent out all','line_number':904,'multiline':False]['text':' the requests.','line_number':905,'multiline':False]['text':' Set conn/weakConn+request under the lock so they will always be observed during cancel.','line_number':915,'multiline':False]['text':' records target's index in `requestOnAny.target`.','line_number':947,'multiline':False]['text':' We have a connection and the command hasn't already been attempted','line_number':978,'multiline':False]['text':' An attempt to avoid sending a request after its command has been canceled or already executed','line_number':985,'multiline':False]['text':' using another connection. Just a best effort to mitigate unnecessary resource consumption if','line_number':986,'multiline':False]['text':' possible, and allow deterministic cancellation of requests in testing.','line_number':987,'multiline':False]['text':' Convert the RemoteCommandResponse to a RemoteCommandOnAnyResponse and wrap any error','line_number':1009,'multiline':False]['text':' The RCRq ran successfully, wrap the result with the host in question','line_number':1013,'multiline':False]['text':' The RCRq failed, wrap the error into a RCRsp with the host and duration','line_number':1017,'multiline':False]['text':'','line_number':1021,'multiline':False]['text':' Switch to the baton/reactor.','line_number':1022,'multiline':False]['text':' If we're in shutdown, we can't add a new command.','line_number':1095,'multiline':False]['text':' If the command failed, we will call 'onReply' as a part of the future chain paired with','line_number':1154,'multiline':False]['text':' the promise. This is to be sure that all error paths will run 'onReply' only once upon','line_number':1155,'multiline':False]['text':' future completion.','line_number':1156,'multiline':False]['text':' The moreToCome bit should *not* be set if the command failed','line_number':1158,'multiline':False]['text':' Reset the stopwatch to measure the correct duration for the following reply','line_number':1170,'multiline':False]['text':' Attempt to get a connection to every target host','line_number':1215,'multiline':False]['text':' For every connection future we didn't have immediately ready, schedule','line_number':1224,'multiline':False]['text':' If we didn't cross the command finishLine first, the promise is already fulfilled','line_number':1251,'multiline':False]['text':' Make a request state for _killOperations.','line_number':1279,'multiline':False]['text':' Send the _killOperations request.','line_number':1304,'multiline':False]['text':' Pessimistically check if we're in shutdown and save some work','line_number':1329,'multiline':False]['text':' Check that we've won any possible race with _shutdownAllAlarms();','line_number':1350,'multiline':False]['text':' If a user has already scheduled an alarm with a handle, make sure they intentionally','line_number':1354,'multiline':False]['text':' override it by canceling and setting a new one.','line_number':1355,'multiline':False]['text':' Prevent any more alarms from registering','line_number':1401,'multiline':False]['text':' Since the lock is released before canceling the timer, this thread can win the race with','line_number':1418,'multiline':False]['text':' cancelAlarm(). Thus if status is CallbackCanceled, then this alarm is already removed from','line_number':1419,'multiline':False]['text':' _inProgressAlarms.','line_number':1420,'multiline':False]['text':' No alarms get processed in shutdown','line_number':1426,'multiline':False]['text':' transport::Reactor timers do not involve spurious wake ups, however, this check is nearly','line_number':1430,'multiline':False]['text':' free and allows us to be resilient to a world where timers impls do have spurious wake ups.','line_number':1431,'multiline':False]['text':' Erase the AlarmState from the map.','line_number':1446,'multiline':False]['text':' A not OK status here means the timer experienced a system error.','line_number':1462,'multiline':False]['text':' It is not reasonable to complete the promise on a reactor thread because there is likely no','line_number':1463,'multiline':False]['text':' properly functioning reactor.','line_number':1464,'multiline':False]['text':' Fulfill the promise on a reactor thread','line_number':1470,'multiline':False]['text':' namespace executor','line_number':1515,'multiline':False]['text':' namespace mongo','line_number':1516,'multiline':False]