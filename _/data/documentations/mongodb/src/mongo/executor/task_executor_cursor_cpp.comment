['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' namespace','line_number':59,'multiline':False]['text':' NOLINT','line_number':98,'multiline':False]['text':' NOLINT','line_number':100,'multiline':False]['text':' Copy the status of the batch.','line_number':107,'multiline':False]['text':' Get owned copy of the vars.','line_number':112,'multiline':False]['text':' Other is no longer responsible for this cursor id.','line_number':119,'multiline':False]['text':' Other no longer owns the state for the in progress command (if there is any).','line_number':122,'multiline':False]['text':' The initial find to establish the cursor has to be canceled to avoid leaking cursors.','line_number':129,'multiline':False]['text':' Once the cursor is established, killing the cursor will interrupt any ongoing','line_number':130,'multiline':False]['text':' `getMore` operation.','line_number':131,'multiline':False]['text':' Additionally, in pinned mode, we should cancel any in-progress RPC if there is one,','line_number':132,'multiline':False]['text':' even at the cost of churning the connection, because it's the only way to interrupt','line_number':133,'multiline':False]['text':' the ongoing operation.','line_number':134,'multiline':False]['text':' We deliberately ignore failures to kill the cursor. This "best effort" is acceptable','line_number':143,'multiline':False]['text':' because some timeout mechanism on the remote host can be expected to reap it later.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' That timeout mechanism could be the default cursor timeout, or the logical session','line_number':146,'multiline':False]['text':' timeout if an lsid is used.','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' In non-pinned mode, killing the cursor also interrupts any ongoing getMore operations on','line_number':149,'multiline':False]['text':' this cursor. Avoid canceling the remote command through its callback handle as that may','line_number':150,'multiline':False]['text':' close the underlying connection.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' In pinned mode, we must await completion of the killCursors to safely reuse the pinned','line_number':153,'multiline':False]['text':' connection. This requires allocating an executor thread (from `_underlyingExecutor`) upon','line_number':154,'multiline':False]['text':' completion of the killCursors command to shutdown and destroy the pinned executor. This','line_number':155,'multiline':False]['text':' is necessary as joining an executor from its own threads results in a deadlock.','line_number':156,'multiline':False]['text':' Returning from this callback will destroy the pinned executor on','line_number':170,'multiline':False]['text':' underlying if this is the last TaskExecutorCursor using that pinned executor.','line_number':171,'multiline':False]['text':' It's possible the executor is already shutdown and rejects work. If so, run the callback','line_number':179,'multiline':False]['text':' inline.','line_number':180,'multiline':False]['text':' We really only care about populating the cursor "first batch" fields, but at some point we'll','line_number':212,'multiline':False]['text':' have to do all of the work done by this function anyway. This would have been called by','line_number':213,'multiline':False]['text':' getNext() the first time it was called.','line_number':214,'multiline':False]['text':' we pull this every time for updated client metadata','line_number':220,'multiline':False]['text':' If this was our first batch.','line_number':255,'multiline':False]['text':' 'vars' and type are only included in the first batch.','line_number':259,'multiline':False]['text':' If the previous response contained a cursorId and pre-fetching is enabled, schedule the','line_number':268,'multiline':False]['text':' getMore.','line_number':269,'multiline':False]['text':' The previous response must have returned an open cursor ID.','line_number':276,'multiline':False]['text':' There cannot be an existing in-flight request.','line_number':278,'multiline':False]['text':' Prefetching must be disabled to use the augmenting functionality.','line_number':284,'multiline':False]['text':' If we don't have an in-flight request, schedule one. This will occur when the','line_number':296,'multiline':False]['text':' 'preFetchNextBatch' option is false.','line_number':297,'multiline':False]['text':' There should be an in-flight request at this point, either sent asyncronously when we','line_number':303,'multiline':False]['text':' processed the previous response or just scheduled.','line_number':304,'multiline':False]['text':' pull out of the pipe before setting cursor id so we don't spoil this object if we're opCtx','line_number':310,'multiline':False]['text':' interrupted','line_number':311,'multiline':False]['text':' If we had a cursor id, set it to kClosedCursorId so that we don't attempt to kill the cursor','line_number':326,'multiline':False]['text':' if there was an error.','line_number':327,'multiline':False]['text':' if we've received a response from our last request (initial or getmore), our remote operation','line_number':332,'multiline':False]['text':' is done.','line_number':333,'multiline':False]['text':' Parse into a vector in case the remote sent back multiple cursors.','line_number':336,'multiline':False]['text':' If we have more responses, build them into cursors then hold them until a caller accesses','line_number':342,'multiline':False]['text':' them. Skip the first response, we used it to populate this cursor.','line_number':343,'multiline':False]['text':' Ensure we update the RCR we give to each 'child cursor' with the current opCtx.','line_number':344,'multiline':False]['text':' In the case that pinConnection is true, we need to ensure that additional cursors also','line_number':348,'multiline':False]['text':' pin their connection to the same socket as the original cursor.','line_number':349,'multiline':False]['text':' namespace executor','line_number':362,'multiline':False]['text':' namespace mongo','line_number':363,'multiline':False]