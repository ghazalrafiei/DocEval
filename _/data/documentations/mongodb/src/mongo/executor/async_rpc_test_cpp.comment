['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'
 * Mock a successful network response to hello command.
 ','line_number':102,'multiline':True]['text':'
 * Test URI overload version of 'sendCommand'.
 ','line_number':129,'multiline':True]['text':'
 * Test ConnectionString overload version of 'sendCommand'.
 ','line_number':157,'multiline':True]['text':'
 * Verify that generic command arguments are correctly serialized into the BSON builder of a
 * command, and that generic reply fields are correctly parsed from the network response.
 ','line_number':187,'multiline':True]['text':' Populate structs for generic arguments to be passed along when the command is converted','line_number':197,'multiline':False]['text':' to BSON.','line_number':198,'multiline':False]['text':' Populate structs for generic reply fields that are expected to be parsed from the','line_number':206,'multiline':False]['text':' response object.','line_number':207,'multiline':False]['text':' Confirm that the generic arguments are present in the BSON command object.','line_number':233,'multiline':False]['text':' Append generic reply fields to the reply object.','line_number':238,'multiline':False]['text':'
 * Tests that 'sendCommand' will appropriately retry multiple times under the conditions defined by
 * the retry policy.
 ','line_number':255,'multiline':True]['text':' Define a retry policy that simply decides to always retry a command three additional times.','line_number':264,'multiline':False]['text':' Schedule 1 request as the initial attempt, and then three following retries to satisfy the','line_number':284,'multiline':False]['text':' condition for the runner to stop retrying.','line_number':285,'multiline':False]['text':'
 * Tests that 'sendCommand' will appropriately retry multiple times under the conditions defined by
 * the retry policy, with a dynmically changing wait-time between retries.
 ','line_number':296,'multiline':True]['text':' Define a retry policy that simply decides to always retry a command three additional times.','line_number':305,'multiline':False]['text':' Schedule 1 response to the initial attempt, and then two for the following retries.','line_number':327,'multiline':False]['text':' Advance the clock appropriately based on each retry delay.','line_number':328,'multiline':False]['text':' Schedule a response to the final retry. No need to advance clock since no more','line_number':332,'multiline':False]['text':' retries should be attemped after this third one.','line_number':333,'multiline':False]['text':'
 * Tests that 'sendCommand' will not retry when the retry policy indicates accordingly.
 ','line_number':343,'multiline':True]['text':' The error returned by our API should always be RemoteCommandExecutionError','line_number':369,'multiline':False]['text':'
 * Mock error on local host side.
 ','line_number':374,'multiline':True]['text':' The error returned by our API should always be RemoteCommandExecutionError','line_number':395,'multiline':False]['text':' Make sure we can extract the extra error info','line_number':397,'multiline':False]['text':' Make sure the extra info indicates the error was local, and that the','line_number':400,'multiline':False]['text':' local error (which is just a Status) has the correct code.','line_number':401,'multiline':False]['text':'
 * Mock error on remote host.
 ','line_number':406,'multiline':True]['text':' No write concern or write errors expected','line_number':435,'multiline':False]['text':'
 * Test that remote errors with generic reply fields are properly parsed.
 ','line_number':440,'multiline':True]['text':' No write concern or write errors expected','line_number':480,'multiline':False]['text':' Check generic reply fields.','line_number':484,'multiline':False]['text':' The BSON documents in this cursor response are created here.','line_number':507,'multiline':False]['text':' When async_rpc::sendCommand parses the response, it participates','line_number':508,'multiline':False]['text':' in ownership of the underlying data, so it will participate in','line_number':509,'multiline':False]['text':' owning the data in the cursor response.','line_number':510,'multiline':False]['text':'
 * Mock write concern error on remote host.
 ','line_number':520,'multiline':True]['text':' No top-level command or write errors expected','line_number':555,'multiline':False]['text':'
 * Mock write error on remote host.
 ','line_number':560,'multiline':True]['text':' No top-level command or write errors expected','line_number':598,'multiline':False]['text':' Ensure that the RCR correctly returns RemoteCommandExecutionError when the executor','line_number':603,'multiline':False]['text':' is shutdown mid-remote-invocation, and that the executor shutdown error is contained','line_number':604,'multiline':False]['text':' in the error's ExtraInfo.','line_number':605,'multiline':False]['text':' The error returned by our API should always be RemoteCommandExecutionError','line_number':616,'multiline':False]['text':' Make sure we can extract the extra error info','line_number':618,'multiline':False]['text':' Make sure the extra info indicates the error was local, and that the','line_number':621,'multiline':False]['text':' local error (which is just a Status) has the correct code.','line_number':622,'multiline':False]['text':' This thread will respond to the request we sent via sendCommand above.','line_number':642,'multiline':False]['text':' Wait on the opCtx until networkResponder has observed the network request.','line_number':651,'multiline':False]['text':' While we block on the opCtx, the current thread should run jobs scheduled','line_number':652,'multiline':False]['text':' on the baton, including enqueuing the network request via `sendCommand` above.','line_number':653,'multiline':False]['text':' Wait on the opCtx again to allow the current thread, via the baton, to propogate','line_number':657,'multiline':False]['text':' the network response up into the resultFuture.','line_number':658,'multiline':False]['text':'
 * Basic Targeter that returns the host that invoked it.
 ','line_number':665,'multiline':True]['text':'
 * Basic Targeter that wraps a single HostAndPort.
 ','line_number':677,'multiline':True]['text':'
 * Basic RetryPolicy that never retries.
 ','line_number':689,'multiline':True]['text':' Check that AsyncRPCErrorInfo::serialize() works safely (when converting a','line_number':715,'multiline':False]['text':' Status to string), instead of crashing the server.','line_number':716,'multiline':False]['text':' Check that AsyncRPCErrorInfo::parse() safely creates a dummy ErrorExtraInfo','line_number':724,'multiline':False]['text':' (when a Status is constructed), instead of crashing the server.','line_number':725,'multiline':False]['text':'*
 * When the targeter returns an error, ensure we rewrite it correctly.
 ','line_number':735,'multiline':True]['text':' The error returned by our API should always be RemoteCommandExecutionError','line_number':749,'multiline':False]['text':' Make sure we can extract the extra error info','line_number':751,'multiline':False]['text':' Make sure the extra info indicates the error was local, and that the','line_number':754,'multiline':False]['text':' local error (which is just a Status) has the correct code.','line_number':755,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':800,'multiline':False]['text':' The BSON documents in this cursor response are created here.','line_number':818,'multiline':False]['text':' When async_rpc::sendCommand parses the response, it participates','line_number':819,'multiline':False]['text':' in ownership of the underlying data, so it will participate in','line_number':820,'multiline':False]['text':' owning the data in the cursor response.','line_number':821,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':834,'multiline':False]['text':' Set up the transaction metadata.','line_number':840,'multiline':False]['text':' The BSON documents in this cursor response are created here.','line_number':858,'multiline':False]['text':' When async_rpc::sendCommand parses the response, it participates','line_number':859,'multiline':False]['text':' in ownership of the underlying data, so it will participate in','line_number':860,'multiline':False]['text':' owning the data in the cursor response.','line_number':861,'multiline':False]['text':' // Issue a follow-up find command in the same transaction.','line_number':870,'multiline':False]['text':' We test side-effects of calling `processParticipantResponse` with different values for `readOnly`','line_number':894,'multiline':False]['text':' in the response to ensure it is being invoked correctly by the sendTxnCommand wrapper.','line_number':895,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':900,'multiline':False]['text':' Set up the transaction metadata.','line_number':906,'multiline':False]['text':' There should be no recovery shard to start with.','line_number':917,'multiline':False]['text':' Set "readOnly: true" in the reply.','line_number':921,'multiline':False]['text':' First statement was read-only. If processed correctly by the router, we shouldn't have set a','line_number':930,'multiline':False]['text':' recovery shard.','line_number':931,'multiline':False]['text':' // Issue a follow-up find command in the same transaction.','line_number':934,'multiline':False]['text':' Set "readOnly: false" in this response. If processed correctly by the router, we _will_ set a','line_number':943,'multiline':False]['text':' recovery shard.','line_number':944,'multiline':False]['text':' We should have set a recovery shard, if `TxnRouter::processParticipantResponse` was invoked','line_number':954,'multiline':False]['text':' correctly.','line_number':955,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':963,'multiline':False]['text':' Set up the transaction metadata.','line_number':969,'multiline':False]['text':' There should be no recovery shard to start with.','line_number':980,'multiline':False]['text':' Set "readOnly: false" in the reply.','line_number':984,'multiline':False]['text':' Because the router ignores error-responses that aren't "ErrorCodes::WouldChangeOwningShard",','line_number':989,'multiline':False]['text':' expect no change to the TransactionRouter state.','line_number':990,'multiline':False]['text':' // Issue a follow-up find command in the same transaction.','line_number':994,'multiline':False]['text':' Use WouldChangeOwningShard error this time.','line_number':1003,'multiline':False]['text':' We should have set a recovery shard, if `TxnRouter::processParticipantResponse` was invoked','line_number':1015,'multiline':False]['text':' correctly.','line_number':1016,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':1025,'multiline':False]['text':' Set up the transaction metadata.','line_number':1031,'multiline':False]['text':' Populate structs for generic arguments to be passed along when the command is converted','line_number':1040,'multiline':False]['text':' to BSON. This is simply to test that generic args are passed properly and they should not','line_number':1041,'multiline':False]['text':' contribute to any other behaviors of this test.','line_number':1042,'multiline':False]['text':' Confirm that the generic arguments are present in the BSON command object.','line_number':1070,'multiline':False]['text':' The BSON documents in this cursor response are created here.','line_number':1074,'multiline':False]['text':' When async_rpc::sendCommand parses the response, it participates','line_number':1075,'multiline':False]['text':' in ownership of the underlying data, so it will participate in','line_number':1076,'multiline':False]['text':' owning the data in the cursor response.','line_number':1077,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':1091,'multiline':False]['text':' Set up the transaction metadata.','line_number':1097,'multiline':False]['text':' Use a mock ShardIdTargeter to avoid calling into the ShardRegistry to get a target shard.','line_number':1128,'multiline':False]['text':' Set up the transaction metadata.','line_number':1134,'multiline':False]['text':' Set OperationKey via AsyncRPCOptions.','line_number':1285,'multiline':False]['text':'*
 * Checks that if cancellation occurs after TaskExecutor receives a network response, the
 * cancellation fails and the network response fulfills the final response.
 ','line_number':1296,'multiline':True]['text':' Will pause processing response after network interface.','line_number':1316,'multiline':False]['text':' Cancel after network response received in the TaskExecutor.','line_number':1324,'multiline':False]['text':' Canceling after network response received does not change the final response and','line_number':1329,'multiline':False]['text':' does not send killOperation.','line_number':1330,'multiline':False]['text':'*
 * Tests that targeter->onRemoteCommandError is called for errors attributed to a remote
 * host.
 ','line_number':1337,'multiline':True]['text':' Check for call to onRemoteCommandError.','line_number':1368,'multiline':False]['text':' Run another command, but this time, simulate a local error and check that targeter does','line_number':1372,'multiline':False]['text':' not update with the testHost.','line_number':1373,'multiline':False]['text':' onRemoteCommandError not called, error not from remote host.','line_number':1381,'multiline':False]['text':' namespace','line_number':1386,'multiline':False]['text':' namespace async_rpc','line_number':1387,'multiline':False]['text':' namespace mongo','line_number':1388,'multiline':False]