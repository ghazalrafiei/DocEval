['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * A few overloads of `idlPreparsedValue` are built into IDL. See
 * `preparsedValue` below. They are placed into a tiny private
 * namespace which defines no types to isolate them.
 ','line_number':93,'multiline':True]['text':'*
 * This is the fallback for `idlPreparsedValue`. It value-initializes a `T`
 * with a forwarded argument list in the usual way.
 ','line_number':100,'multiline':True]['text':'*
 * The value -1 is a conspicuous "uninitialized" value for integers.
 * The integral type `bool` is exempt from this convention, however.
 ','line_number':109,'multiline':True]['text':'*
 * Define a default Feature Compatibility Version enum value for use in parsed
 * ServerGlobalParams.
 * TODO(SERVER-50101): Remove 'FeatureCompatibility::Version' once IDL supports
 * a command cpp_type of C++ enum.
 ','line_number':118,'multiline':True]['text':' namespace preparsed_value_adl_barrier','line_number':128,'multiline':False]['text':'*
 * Constructs an instance of `T(args...)` for use in idl parsing. The way the
 * IDL generator currently writes C++ parse functions, it makes an instance of
 * a field of type `T` and then mutates it. `preparsedValue<T>()` is used to
 * construct those objects. This convention allows an extension hook whereby a
 * type can select a custom initializer for such pre-parsed objects,
 * particularly for types that shouldn't have a public default constructor.
 *
 * The extension hook is implemented via ADL on the name `idlPreparsedValue`.
 *
 * `idlPreparsedValue` takes a `type_identity<T>` and then some forwarded
 * constructor arguments optionally (the IDL generator doesn't currently
 * provide any such arguments but could conceivably do so in the future). A
 * type `T` is deduced from this `type_identity<T>` argument.
 *
 * There are other ways to implement this extension mechanism, but this
 * phrasing allows argument-dependent lookup to search the namespaces
 * associated with `T`, since `T` is a template parameter of the
 * `type_identity<T>` argument.
 ','line_number':130,'multiline':True]['text':'*
 * HasMembers tracks the presence of required fields in debug mode, and is a noop class in
 * production builds.
 ','line_number':160,'multiline':True]['text':'* Support routines for IDL-generated comparison operators ','line_number':189,'multiline':True]['text':'* fallback case ','line_number':221,'multiline':True]['text':'* Disengaged optionals precede engaged optionals. ','line_number':248,'multiline':True]['text':' namespace relop','line_number':260,'multiline':False]['text':' namespace idl','line_number':262,'multiline':False]['text':'*
 * IDLParserContext manages the current parser context for parsing BSON documents.
 *
 * The class stores the path to the current document to enable it provide more useful error
 * messages. The path is a dot delimited list of field names which is useful for nested struct
 * parsing.
 *
 * This class is responsible for throwing all error messages the IDL generated parsers throw,
 * and provide utility methods like checking a BSON type or set of BSON types.
 ','line_number':264,'multiline':True]['text':'*
     * String constants for well-known IDL fields.
     ','line_number':286,'multiline':True]['text':'*
     * Check that BSON element is a given type or whether the field should be skipped.
     *
     * Returns true if the BSON element is the correct type.
     * Return false if the BSON element is Null or Undefined and the field's value should not be
     * processed.
     * Throws an exception if the BSON element's type is wrong.
     ','line_number':322,'multiline':True]['text':'*
     * Check that BSON element is a bin data type, and has the specified bin data subtype, or
     * whether the field should be skipped.
     *
     * Returns true if the BSON element is the correct type.
     * Return false if the BSON element is Null or Undefined and the field's value should not be
     * processed.
     * Throws an exception if the BSON element's type is wrong.
     ','line_number':338,'multiline':True]['text':'*
     * Check that BSON element is one of a given type or whether the field should be skipped.
     *
     * Returns true if the BSON element is one of the types.
     * Return false if the BSON element is Null or Undefined and the field's value should not be
     * processed.
     * Throws an exception if the BSON element's type is wrong.
     ','line_number':355,'multiline':True]['text':'*
     * Throw an error message about the BSONElement being a duplicate field.
     ','line_number':365,'multiline':True]['text':'*
     * Throw an error message about the BSONElement being a duplicate field.
     ','line_number':370,'multiline':True]['text':'*
     * Throw an error message about the required field missing from the document.
     ','line_number':375,'multiline':True]['text':'*
     * Throw an error message about an unknown field in a document.
     ','line_number':380,'multiline':True]['text':'*
     * Throw an error message about the array field name not being the next number in the sequence.
     ','line_number':385,'multiline':True]['text':'*
     * Throw an error message about an unrecognized enum value.
     ','line_number':391,'multiline':True]['text':'*
     * Throw an error about a field having the wrong type.
     ','line_number':397,'multiline':True]['text':'*
     * Throw an 'APIStrictError' if the user command has 'apiStrict' field as true.
     ','line_number':403,'multiline':True]['text':'*
     * Check that the collection name in 'element' is valid. Throws an exception if not valid.
     * Returns the collection name otherwise.
     ','line_number':420,'multiline':True]['text':'*
     * Check that the collection name or UUID in 'element' is valid. Throws an exception if not
     * valid. Returns either the collection name or UUID otherwise.
     ','line_number':427,'multiline':True]['text':'*
     * Take all the well known command generic arguments from commandPassthroughFields, but ignore
     * fields that are already part of the command and append the rest to builder.
     ','line_number':434,'multiline':True]['text':'*
     * See comment on getElementPath below.
     ','line_number':447,'multiline':True]['text':'*
     * Return a dot seperated path to the specified field. For instance, if the code is parsing a
     * grandchild field that has an error, this will return "grandparent.parent.child".
     ','line_number':452,'multiline':True]['text':'*
     * See comment on checkAndAssertType.
     ','line_number':458,'multiline':True]['text':'*
     * See comment on checkAndAssertBinDataType.
     ','line_number':463,'multiline':True]['text':' Modifies serialization behavior to match request format, only accessed by IDL generated code','line_number':482,'multiline':False]['text':' Name of the current field that is being parsed.','line_number':485,'multiline':False]['text':' Whether the 'apiStrict' parameter is set in the user request.','line_number':488,'multiline':False]['text':' Pointer to a parent parser context.','line_number':493,'multiline':False]['text':' This provides a singly linked list of parent pointers, and use to produce a full path to a','line_number':494,'multiline':False]['text':' field with an error.','line_number':495,'multiline':False]['text':'*
 * Throw an error when BSON validation fails during parse.
 ','line_number':499,'multiline':True]['text':'*
 * Throw an error when a user calls a setter and it fails the comparison.
 ','line_number':509,'multiline':True]['text':'*
 * Transform a vector of input type to a vector of output type.
 *
 * Used by the IDL generated code to transform between vectors of view, and non-view types.
 ','line_number':520,'multiline':True]['text':'*
 * IMPORTANT: The method should not be modified, as API version input/output guarantees could
 * break because of it.
 ','line_number':530,'multiline':True]['text':'*
 * IMPORTANT: The method should not be modified, as API version input/output guarantees could
 * break because of it.
 ','line_number':536,'multiline':True]['text':'*
 * IMPORTANT: The method should not be modified, as API version input/output guarantees could
 * break because of it.
 ','line_number':542,'multiline':True]['text':'*
 * IMPORTANT: The method should not be modified, as API version input/output guarantees could
 * break because of it.
 ','line_number':548,'multiline':True]['text':'*
 * Generated enums specialize this with their element count.
 ','line_number':554,'multiline':True]['text':' namespace mongo','line_number':560,'multiline':False]