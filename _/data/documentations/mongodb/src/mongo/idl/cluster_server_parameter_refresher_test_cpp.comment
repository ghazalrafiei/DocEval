['text':'*
 *    Copyright (C) 2023-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Set up failpoints and get their initial times entered.','line_number':63,'multiline':False]['text':' Since there should be no active job at this point, we expect thread 1 to create the','line_number':70,'multiline':False]['text':' promise, run _refreshParameters, and block on the failpoint.','line_number':71,'multiline':False]['text':' Wait for thread 1 to reach the blocking failpoint. Note that each time we enter the','line_number':77,'multiline':False]['text':' blocking failpoint, we increment timesEntered by 2, because we first check for shouldFail','line_number':78,'multiline':False]['text':' and then call pauseWhileSet.','line_number':79,'multiline':False]['text':' Toggle the countPromiseWaiters failpoint to get the times entered. This count should not','line_number':83,'multiline':False]['text':' have changed from the initial count as we have no futures waiting on the promise yet.','line_number':84,'multiline':False]['text':' Threads 2 and 3 should both see that there is an active promise and take out a future on','line_number':89,'multiline':False]['text':' it, not entering _refreshParameters themselves.','line_number':90,'multiline':False]['text':' Allow both new threads to hit the future wait before unblocking the first thread','line_number':100,'multiline':False]['text':' We expect that neither of threads 2 and 3 entered _refreshParameters, so neither should','line_number':104,'multiline':False]['text':' have hit the blocking failpoint; assert its count is the same as before.','line_number':105,'multiline':False]['text':' The first thread should now finish, setting the job to ready and notifying threads 2 and','line_number':109,'multiline':False]['text':' 3, which should finish.','line_number':110,'multiline':False]['text':' Interlace testing of the OK and failure cases to ensure that we are never getting a stale','line_number':121,'multiline':False]['text':' status.','line_number':122,'multiline':False]['text':' Note that status comparison only cares about error code.','line_number':127,'multiline':False]['text':' namespace','line_number':133,'multiline':False]['text':' namespace mongo','line_number':134,'multiline':False]