['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':30,'multiline':False]['text':' Use an alternative client region, because we call refreshParameters both from the internal','line_number':104,'multiline':False]['text':' refresher process and from getClusterParameter.','line_number':105,'multiline':False]['text':' Allow this client to be killable. If interrupted, the exception will be caught and handled in','line_number':106,'multiline':False]['text':' refreshParameters.','line_number':107,'multiline':False]['text':' Note that we get the list of tenants outside of the transaction. This should be okay, as if','line_number':118,'multiline':False]['text':' we miss out on some new tenants created between this call and the transaction, we are just','line_number':119,'multiline':False]['text':' getting slightly old data. Importantly, different tenants' cluster parameters don't interact','line_number':120,'multiline':False]['text':' with each other, so we don't need a consistent snapshot of cluster parameters across all','line_number':121,'multiline':False]['text':' tenants, just a consistent snapshot per tenant.','line_number':122,'multiline':False]['text':' Fetch one tenant, then call doFetchTenants for the rest of the tenants within','line_number':143,'multiline':False]['text':' then() recursively.','line_number':144,'multiline':False]['text':' We don't specify a filter as we want all documents.','line_number':156,'multiline':False]['text':' We need to commit w/ writeConcern = majority for readConcern = snapshot to work.','line_number':185,'multiline':False]['text':' namespace','line_number':197,'multiline':False]['text':' We expect the future to never be ready here, because we complete the promise and then','line_number':229,'multiline':False]['text':' delete it under a lock, meaning new futures taken out on the current promise under a lock','line_number':230,'multiline':False]['text':' are always on active promises. If the future is ready here, the below logic will still','line_number':231,'multiline':False]['text':' work, but this is unexpected.','line_number':232,'multiline':False]['text':' Wait for the job to finish and return its result with getNoThrow.','line_number':241,'multiline':False]['text':' No active job; make a new promise and run the job ourselves.','line_number':245,'multiline':False]['text':' Run _refreshParameters unlocked to allow new futures to be gotten from our promise.','line_number':250,'multiline':False]['text':' Complete the promise and detach it from the object, allowing a new job to be created the','line_number':258,'multiline':False]['text':' next time refreshParameters is run. Note that the futures of this promise hold references to','line_number':259,'multiline':False]['text':' it which will still be valid after we detach it from the object.','line_number':260,'multiline':False]['text':' Set each in-memory cluster parameter that was returned in the response.','line_number':292,'multiline':False]['text':' Use canBeEnabled because if we previously temporarily disabled the parameter,','line_number':312,'multiline':False]['text':' isEnabled will be false','line_number':313,'multiline':False]['text':' Parameter is newly disabled on cluster','line_number':315,'multiline':False]['text':' permanent ','line_number':318,'multiline':True]['text':' Parameter is newly enabled on cluster','line_number':321,'multiline':False]['text':' Reset the local parameter to its default value.','line_number':335,'multiline':False]['text':' Set the local parameter to the pulled value.','line_number':338,'multiline':False]['text':' On mongos, this should always be true after FCV initialization','line_number':385,'multiline':False]['text':' (Generic FCV reference):','line_number':387,'multiline':False]['text':' TODO(SERVER-74659): Please revisit if this periodic job could be made killable.','line_number':397,'multiline':False]['text':'isKillableByStepdown','line_number':398,'multiline':True]['text':' Make sure the invalidator is moved to the service context by the time we call start()','line_number':402,'multiline':False]['text':' Make sure that we finish the possibly running transaction and don't start any more.','line_number':421,'multiline':False]['text':' namespace mongo','line_number':428,'multiline':False]