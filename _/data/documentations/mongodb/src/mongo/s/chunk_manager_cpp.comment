['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':38,'multiline':False]['text':' This function processes the passed in chunks by removing the older versions of any overlapping','line_number':94,'multiline':False]['text':' chunks. The resulting chunks must be ordered by the maximum bound and not have any','line_number':95,'multiline':False]['text':' overlapping chunks. In order to process the original set of chunks correctly which may have','line_number':96,'multiline':False]['text':' chunks from older versions of the map that overlap, this algorithm would need to sort by','line_number':97,'multiline':False]['text':' ascending minimum bounds before processing it. However, since we want to take advantage of the','line_number':98,'multiline':False]['text':' precomputed KeyString representations of the maximum bounds, this function implements the same','line_number':99,'multiline':False]['text':' algorithm by reverse sorting the chunks by the maximum before processing but then must','line_number':100,'multiline':False]['text':' reverse the resulting collection before it is returned.','line_number':101,'multiline':False]['text':' namespace','line_number':137,'multiline':False]['text':' upper_bound() will miss the last chunkVector if shardKey is actually the MaxKey,','line_number':152,'multiline':False]['text':' thus we need to check explicitly if shardKey is contained in the last chunk.','line_number':153,'multiline':False]['text':'isMaxInclusive','line_number':164,'multiline':True]['text':' Check lower bound is consistent','line_number':190,'multiline':False]['text':' Check upper bound is consistent','line_number':199,'multiline':False]['text':' Vector will be placed at the head of the map,','line_number':218,'multiline':False]['text':' thus there is not previous vector we could merge with','line_number':219,'multiline':False]['text':' Fill initial part of merged vector with a copy of old vector (prevVectorPtr)','line_number':231,'multiline':False]['text':' Note that the old vector is potentially shared with previous ChunkMap instances,','line_number':232,'multiline':False]['text':' thus we copy rather than moving elements to maintain its integrity.','line_number':233,'multiline':False]['text':' Fill the rest of merged vector with the small updated vector','line_number':236,'multiline':False]['text':'
 * Split the given chunk vector into pieces not bigger than _maxChunkVectorSize
 * and add them to the chunkVector map.
 *
 * When chunks can't be divided equally among all generated pieces,
 * this algorithm guarantee that the size difference between all pieces will be minimal and that
 * smaller pieces will be placed at the end.
 ','line_number':245,'multiline':True]['text':' Version for this chunk shard got updated','line_number':308,'multiline':False]['text':' We just created a new entry in the _placementVersions map with','line_number':315,'multiline':False]['text':' latest version and lastest valid after','line_number':316,'multiline':False]['text':' _placementVersions map already contained an entry for this chunk shard','line_number':319,'multiline':False]['text':' Update version for this shard','line_number':321,'multiline':False]['text':' Update validAfter for this shard','line_number':327,'multiline':False]['text':' Update version for the entire collection','line_number':333,'multiline':False]['text':' No updates, just clone the original map','line_number':345,'multiline':False]['text':' Discard chunk from oldVector','line_number':359,'multiline':False]['text':' Since we are discarding the old chunk rather than committing,','line_number':361,'multiline':False]['text':' we do not update `lastCommitedIsNew` flag.','line_number':362,'multiline':False]['text':' no more updates','line_number':398,'multiline':False]['text':' No more old chunks','line_number':403,'multiline':False]['text':' We have both update and old chunk to peak from','line_number':411,'multiline':False]['text':' If they overlaps we discard the old chunk otherwise we process the one with smaller key','line_number':412,'multiline':False]['text':' discard ','line_number':414,'multiline':True]['text':' Ranges do not overlap so we yield the chunk with smaller max key','line_number':417,'multiline':False]['text':' Skip first vectors that were not affected by this update since we don't need to modify them','line_number':430,'multiline':False]['text':' Prepare newVector used as destination of merge sort algorithm','line_number':436,'multiline':False]['text':' Iterate until we drained all updates and old vectors','line_number':443,'multiline':False]['text':' Keep processing chunks until we reach the end of the current old vector','line_number':447,'multiline':False]['text':' Only updates left','line_number':450,'multiline':False]['text':' Allocate space only for the remaining updates','line_number':456,'multiline':False]['text':' drained all chunks from old vector in use,','line_number':463,'multiline':False]['text':' remove old vector from the new map since we are going to replace it.','line_number':464,'multiline':False]['text':' Advance the map iterator to the next old vector to update','line_number':467,'multiline':False]['text':' No more old vector to process','line_number':470,'multiline':False]['text':' No more updates skip all remaining vectors','line_number':475,'multiline':False]['text':' New vector is too small, keep accumulating next oldVector','line_number':480,'multiline':False]['text':' next update doesn't overlap with current old vector so we need to jump','line_number':484,'multiline':False]['text':' forward to the first overlapping old vector.','line_number':485,'multiline':False]['text':' This is an optimization to skip vectors that are not affected by any updates.','line_number':486,'multiline':False]['text':' Commit chunks accumulated in new vector if','line_number':493,'multiline':False]['text':'  - We are skipping next old vector, thus next old chunk is not adjacent to last','line_number':494,'multiline':False]['text':'    committed chunk','line_number':495,'multiline':False]['text':'  - We already reached maxChunkSize and next update is not adjacent to last','line_number':496,'multiline':False]['text':'    committed chunk','line_number':497,'multiline':False]['text':' Update references to oldVector','line_number':508,'multiline':False]['text':' Reserve space for next chunks,','line_number':511,'multiline':False]['text':' we cannot know before traversing the next old vector how many chunks will be','line_number':512,'multiline':False]['text':' added to the new vector, thus this reservation is just best effort.','line_number':513,'multiline':False]['text':' Only updates left, allocate space only for the remaining updates','line_number':516,'multiline':False]['text':' We must assume that if the field is specified as "hashed" in the shard key pattern,','line_number':678,'multiline':False]['text':' then the hash value could have come from a collatable type.','line_number':679,'multiline':False]['text':' If we want to skip the check in the special case where the _id field is hashed and','line_number':685,'multiline':False]['text':' used as the shard key, set bypassIsFieldHashedCheck. This assumes that a request with','line_number':686,'multiline':False]['text':' a query that contains an _id field can target a specific shard.','line_number':687,'multiline':False]['text':' If our range is [MinKey, MaxKey], we can simply return all shard ids right away. However,','line_number':726,'multiline':False]['text':' this optimization does not apply when we are reading from a snapshot because','line_number':727,'multiline':False]['text':' _placementVersions contains shards with chunks and is built based on the last refresh.','line_number':728,'multiline':False]['text':' Therefore, it is possible for _placementVersions to have fewer entries if a shard no longer','line_number':729,'multiline':False]['text':' owns chunks when it used to at _clusterTime.','line_number':730,'multiline':False]['text':' No need to iterate through the rest of the ranges, because we already know we need to use','line_number':745,'multiline':False]['text':' all shards. However, this optimization does not apply when we are reading from a snapshot','line_number':746,'multiline':False]['text':' because _placementVersions contains shards with chunks and is built based on the last','line_number':747,'multiline':False]['text':' refresh. Therefore, it is possible for _placementVersions to have fewer entries if a','line_number':748,'multiline':False]['text':' shard no longer owns chunks when it used to at _clusterTime.','line_number':749,'multiline':False]['text':' Shards without explicitly tracked placement versions (meaning they have no chunks) always','line_number':835,'multiline':False]['text':' have a version of (epoch, timestamp, 0, 0)','line_number':836,'multiline':False]['text':' Note that any new parameters added to RoutingTableHistory::makeUpdated() must also be added to','line_number':899,'multiline':False]['text':' ShardServerCatalogCacheLoader::_getLoaderMetadata() and copied into the persisted metadata when','line_number':900,'multiline':False]['text':' it may overlap with the enqueued metadata.','line_number':901,'multiline':False]['text':' Only update the same collection.','line_number':912,'multiline':False]['text':' Values created on two sides of a forced refresh sequence number are always','line_number':963,'multiline':False]['text':' considered different','line_number':964,'multiline':False]['text':' Only default constructed values have _forcedRefreshSequenceNum == 0 and','line_number':966,'multiline':False]['text':' they are always equal','line_number':967,'multiline':False]['text':' Relying on the boost::optional<ChunkVersion>::operator== comparison','line_number':969,'multiline':False]['text':' Values created on two sides of a forced refresh sequence number are always','line_number':975,'multiline':False]['text':' considered different','line_number':976,'multiline':False]['text':' Values created on two sides of a forced refresh sequence number are always','line_number':978,'multiline':False]['text':' considered different','line_number':979,'multiline':False]['text':' Only default constructed values have _forcedRefreshSequenceNum == 0 and','line_number':981,'multiline':False]['text':' they are always equal','line_number':982,'multiline':False]['text':' One side is not initialised, but the other','line_number':985,'multiline':False]['text':' is, which can only happen if one side is','line_number':986,'multiline':False]['text':' ForForcedRefresh and the other is made from','line_number':987,'multiline':False]['text':' makeComparableChunkVersion. In this case, use','line_number':988,'multiline':False]['text':' the _epochDisambiguatingSequenceNum to see','line_number':989,'multiline':False]['text':' which one is more recent.','line_number':990,'multiline':False]['text':' Both sides are not initialised, which can','line_number':993,'multiline':False]['text':' only happen if both were created from','line_number':994,'multiline':False]['text':' ForForcedRefresh. In this case, use the','line_number':995,'multiline':False]['text':' _epochDisambiguatingSequenceNum to see which','line_number':996,'multiline':False]['text':' one is more recent.','line_number':997,'multiline':False]['text':' TODO (SERVER-51070): Can only happen if the destination is the config server','line_number':1044,'multiline':False]['text':' TODO (SERVER-51070): Can only happen if the destination is the config server','line_number':1047,'multiline':False]['text':' namespace mongo','line_number':1067,'multiline':False]