['text':'*
 *    Copyright (C) 2022-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "ext/alloc_traits.h"','line_number':38,'multiline':False]['text':'*
 * The class IndexKeysObjectsGenerator is used to generate the index keys objects for the provided
 * document 'docObj' and the index descriptor 'indexDescriptor'. This class determines the index
 * type from the 'indexDescriptor', generates the corresponding key strings and then convert those
 * key strings to the index keys objects. An index keys object is of the following form:
 * {<field_name>: <index key>, ...}, which maps a field name to an index key.
 ','line_number':93,'multiline':True]['text':' Validate the key pattern to ensure that the field ordering is ascending.','line_number':109,'multiline':False]['text':' Set the collator interface if the index descriptor has a collation.','line_number':118,'multiline':False]['text':'*
     * Returns the generated index keys objects for the provided index type. The returned value
     * 'Value' is an array of 'BSONObj' the contains the generated keys objects.
     ','line_number':132,'multiline':True]['text':' Generate the key strings based on the index type.','line_number':139,'multiline':False]['text':'*
     * Generates the key string for the 'btree' index type and adds them to the 'keyStrings'.
     ','line_number':177,'multiline':True]['text':'*
     * Generates the key strings for the 'hashed' index type and adds them to the 'keyStrings'.
     ','line_number':199,'multiline':True]['text':'
     * Generates the key strings for the '2d' index type and adds them to the 'keyStrings'.
     ','line_number':224,'multiline':True]['text':'
     * Generates the key strings for the '2dsphere' and the '2dsphere_bucket' index types and adds
     * them to the 'keyStrings'.
     ','line_number':243,'multiline':True]['text':'*
     * Generates the key strings for the 'text' index type and adds them to the 'keyStrings'.
     ','line_number':268,'multiline':True]['text':'*
     * Generates the key string for the 'wildcard' index type and adds them to the 'keyStrings'.
     ','line_number':285,'multiline':True]['text':'*
     * Returns a 'Value' that is a vector of 'BSONObj' that contains the index keys documents.
     ','line_number':303,'multiline':True]['text':' This helper accepts the key string 'keyString' and returns a 'BSONObj' that maps a field','line_number':307,'multiline':False]['text':' names to its index key.','line_number':308,'multiline':False]['text':'','line_number':314,'multiline':False]['text':' A wild card key string is of the following format:','line_number':315,'multiline':False]['text':' {'': <field name>, '': <key value>}.','line_number':316,'multiline':False]['text':' The 'keyStringObj' itself contains the field name and the key. As such build a','line_number':317,'multiline':False]['text':' new 'BSONObj' that directly maps a field name and its index key.','line_number':318,'multiline':False]['text':'','line_number':319,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' For all other index types, each 'BSONElement' field of the 'keyStringObj' has a','line_number':341,'multiline':False]['text':' one-to-one mapping with the elements of the '_fieldNames'. This one-to-one','line_number':342,'multiline':False]['text':' property is utilized to builds a new 'BSONObj' that has keys from 'fieldNames'','line_number':343,'multiline':False]['text':' and values from key string 'BSONElement'.','line_number':344,'multiline':False]['text':'','line_number':345,'multiline':False]['text':' Iterate through each key string and get a new 'BSONObj' that has field names and','line_number':361,'multiline':False]['text':' corresponding keys embedded to it.','line_number':362,'multiline':False]['text':' An existing expression context.','line_number':374,'multiline':False]['text':' The document for which the key strings should be generated.','line_number':377,'multiline':False]['text':' The index descriptor to be used for generating the key strings.','line_number':380,'multiline':False]['text':' Field names derived from the key pattern of the index descriptor.','line_number':383,'multiline':False]['text':' The collator interface initialized from the index descriptor.','line_number':386,'multiline':False]['text':' The key string version to be used for generating the key strings.','line_number':389,'multiline':False]['text':' The ordering to be used for generating the key strings.','line_number':392,'multiline':False]['text':' namespace','line_number':396,'multiline':False]['text':' TODO SERVER-71519: Add support for handling stale exception from mongos with','line_number':399,'multiline':False]['text':' enableFinerGrainedCatalogCacheRefresh.','line_number':400,'multiline':False]['text':' Retrieve the values from the incoming document.','line_number':410,'multiline':False]['text':' Get the 'chunkManager' from the catalog cache.','line_number':418,'multiline':False]['text':' Setting 'allowLocks' to true when evaluating on mongod, as otherwise an invariant is thrown.','line_number':425,'multiline':False]['text':' We can safely set it to true as there is no risk of deadlock, because the code still throws','line_number':426,'multiline':False]['text':' when a refresh would actually need to take place.','line_number':427,'multiline':False]['text':' allowLocks ','line_number':429,'multiline':True]['text':' Invalidate catalog cache if the chunk manager version is stale.','line_number':431,'multiline':False]['text':' wanted ','line_number':434,'multiline':True]['text':' Retrieve the shard id for the given shard key value.','line_number':442,'multiline':False]['text':' The 'spec' is always treated as a constant so do not call '_spec->serialize()' which would','line_number':509,'multiline':False]['text':' wrap the value in an unnecessary '$const' object.','line_number':510,'multiline':False]['text':' Parse and validate the index spec and then create the index descriptor object from it.','line_number':523,'multiline':False]['text':' namespace mongo','line_number':539,'multiline':False]