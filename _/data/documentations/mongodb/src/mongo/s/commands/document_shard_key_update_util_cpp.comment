['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Calls into the command execution stack to run the given command. Will blindly uassert on any
 * error returned by a command. If the original update was sent with {upsert: false}, returns
 * whether or not we deleted the original doc and inserted the new one sucessfully. If the original
 * update was sent with {upsert: true}, returns whether or not we inserted the new doc successfully.
 ','line_number':68,'multiline':True]['text':' nss ','line_number':84,'multiline':True]['text':' If shouldUpsert is true, this means the original command specified {upsert: true} and did not','line_number':88,'multiline':False]['text':' match any docs, so we should not match any when doing this delete. If shouldUpsert is false','line_number':89,'multiline':False]['text':' and we do not delete any document, this is essentially equivalent to not matching a doc and','line_number':90,'multiline':False]['text':' we should not insert.','line_number':91,'multiline':False]['text':'*
 * Creates the delete op that will be used to delete the pre-image document. Will also attach the
 * original document _id retrieved from 'updatePreImage'.
 ','line_number':122,'multiline':True]['text':'*
 * Creates the insert op that will be used to insert the new document with the post-update image.
 ','line_number':139,'multiline':True]['text':' We need to set an empty BSON object here for the schema.','line_number':151,'multiline':False]['text':'  namespace','line_number':158,'multiline':False]['text':' Delete the original document and insert the new one','line_number':169,'multiline':False]['text':' If the operation was an upsert, record the _id of the new document.','line_number':173,'multiline':False]['text':' For timeseries collections, the 'userPostImage' is returned back','line_number':175,'multiline':False]['text':' through WouldChangeOwningShardInfo from the old shard as well and it should','line_number':176,'multiline':False]['text':' be returned to the user instead of the post-image.','line_number':177,'multiline':False]['text':' Set the opCtx read concern to local.','line_number':211,'multiline':False]['text':' Start transaction and re-run the original update command.','line_number':215,'multiline':False]['text':' Re-run the original command to see if WouldChangeOwningShard still applies.','line_number':218,'multiline':False]['text':' If we do not get WouldChangeOwningShard when re-running the update, the document has been','line_number':220,'multiline':False]['text':' modified or deleted concurrently and we do not need to delete it and insert a new one.','line_number':221,'multiline':False]['text':' Note that a transaction cannot span a chunk migration or resharding, thus if we find here','line_number':222,'multiline':False]['text':' that the update generates a WCOS error that is guaranteed to be true for the rest of the','line_number':223,'multiline':False]['text':' transaction lifetime, i.e. the document will not move due to data placement changes.','line_number':224,'multiline':False]['text':' If the operation was an upsert, record the _id of the new document.','line_number':230,'multiline':False]['text':' For timeseries collections, the 'userPostImage' is returned back through','line_number':232,'multiline':False]['text':' WouldChangeOwningShardInfo from the old shard as well and it should be returned to','line_number':233,'multiline':False]['text':' the user instead of the post-image.','line_number':234,'multiline':False]['text':' Commit the transaction.','line_number':243,'multiline':False]['text':' Process a WriteConcernError, if one occurred.','line_number':246,'multiline':False]['text':' Record the exception in the command response.','line_number':258,'multiline':False]['text':' Set the error status to the status of the failed command and abort the transaction.','line_number':261,'multiline':False]['text':' If the WouldChangeOwningShard error happens for a timeseries collection, the pre-image is','line_number':279,'multiline':False]['text':' a measurement to be deleted and so the delete command should be sent to the timeseries view.','line_number':280,'multiline':False]['text':' If the WouldChangeOwningShard error happens for a timeseries collection, the pre-image is','line_number':324,'multiline':False]['text':' a measurement to be deleted and so the delete command should be sent to the timeseries view.','line_number':325,'multiline':False]['text':' Retry history for this delete isn't necessary, but it can be part of a retryable transaction,','line_number':332,'multiline':False]['text':' so send it with the uninitialized sentinel statement id to opt out of storing history.','line_number':333,'multiline':False]['text':' If shouldUpsert is true, this means the original command specified {upsert:','line_number':340,'multiline':False]['text':' true} and did not match any docs, so we should not match any when doing','line_number':341,'multiline':False]['text':' this delete. If shouldUpsert is false and we do not delete any document,','line_number':342,'multiline':False]['text':' this is essentially equivalent to not matching a doc and we should not','line_number':343,'multiline':False]['text':' insert.','line_number':344,'multiline':False]['text':' Same as for the insert, retry history isn't necessary so opt out with a sentinel','line_number':365,'multiline':False]['text':' stmtId.','line_number':366,'multiline':False]['text':' We failed to delete a document and were not configured to upsert, so the insert','line_number':381,'multiline':False]['text':' was never sent. Propagate that failure by returning false.','line_number':382,'multiline':False]['text':' namespace documentShardKeyUpdateUtil','line_number':388,'multiline':False]['text':' namespace mongo','line_number':389,'multiline':False]