['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Abstracts reads of the sharding catalog metadata.
 *
 * All implementations of this interface should go directly to the persistent backing store
 * and should avoid doing any caching of their own. The caching is delegated to a parallel
 * read-only view of the catalog, which is maintained by a higher level code.
 *
 * TODO: For now this also includes some methods that write the sharding catalog metadata.  Those
 * should eventually all be moved to ShardingCatalogManager as catalog manipulation operations
 * move to be run on the config server primary.
 ','line_number':94,'multiline':True]['text':' Constant to use for configuration data majority writes','line_number':110,'multiline':False]['text':' Constant to use for configuration data local writes','line_number':113,'multiline':False]['text':' Identifier for the "initialization metadata" documents of config.placementHistory','line_number':116,'multiline':False]['text':'*
     * Retrieves the metadata for a given database, if it exists.
     *
     * @param dbName name of the database (case sensitive)
     *
     * Returns Status::OK along with the database information and the OpTime of the config server
     * which the database information was based upon. Otherwise, returns an error code indicating
     * the failure. These are some of the known failures:
     *  - NamespaceNotFound - database does not exist
     ','line_number':127,'multiline':True]['text':'*
     * Retrieves all databases in a cluster.
     *
     * Returns a !OK status if an error occurs.
     ','line_number':141,'multiline':True]['text':'*
     * Retrieves the metadata for a given collection, if it exists.
     *
     * @param nss fully qualified name of the collection (case sensitive)
     *
     * Returns Status::OK along with the collection information and the OpTime of the config server
     * which the collection information was based upon. Otherwise, returns an error code indicating
     * the failure. These are some of the known failures:
     *  - NamespaceNotFound - collection does not exist
     ','line_number':149,'multiline':True]['text':'*
     * Retrieves all collections under a specified database (or in the system) which are sharded. If
     * the dbName parameter is empty, returns all sharded collections.
     *
     * @param sort Fields to use for sorting the results. If empty, no sorting is performed.
     ','line_number':169,'multiline':True]['text':'*
     * Retrieves all collections under a specified database (or in the system). If the dbName
     * parameter is empty, returns all collections.
     *
     * @param sort Fields to use for sorting the results. If empty, no sorting is performed.
     ','line_number':181,'multiline':True]['text':'*
     * Returns the set of collections for the specified database, which have been marked as sharded.
     * Goes directly to the config server's metadata, without checking the local cache so it should
     * not be used in frequently called code paths.
     *
     * Throws exception on errors.
     ','line_number':193,'multiline':True]['text':'*
     * Returns the set of collections tracked for the specified database, regardless of being
     * sharded or not. Goes directly to the config server's metadata, without checking the local
     * cache so it should not be used in frequently called code paths.
     *
     * Throws exception on errors.
     ','line_number':206,'multiline':True]['text':'*
     * Returns the set of collections for the specified database, which have been marked as
     * unsplittable. Goes directly to the config server's metadata, without checking the local cache
     * so it should not be used in frequently called code paths.
     *
     * Throws exception on errors.
     ','line_number':219,'multiline':True]['text':'*
     * Returns the set of collections for the specified database, which have been marked as
     * unsplittable excluding those whose data shard is in the list of shards to ignore. Goes
     * directly to the config server's metadata, without checking the local cache so it should not
     * be used in frequently called code paths.
     *
     * Throws exception on errors.
     ','line_number':232,'multiline':True]['text':'*
     * Retrieves all databases for a shard.
     *
     * Returns a !OK status if an error occurs.
     ','line_number':246,'multiline':True]['text':'*
     * Gets the requested number of chunks (of type ChunkType) that satisfy a query.
     *
     * @param filter The query to filter out the results.
     * @param sort Fields to use for sorting the results. Pass empty BSON object for no sort.
     * @param limit The number of chunk entries to return. Pass boost::none for no limit.
     * @param optime an out parameter that will contain the opTime of the config server.
     *      Can be null. Note that chunks can be fetched in multiple batches and each batch
     *      can have a unique opTime. This opTime will be the one from the last batch.
     * @param epoch epoch associated to the collection, needed to build the chunks.
     * @param timestamp timestamp associated to the collection, needed to build the chunks.
     * @param readConcern The readConcern to use while querying for chunks.

     *
     * Returns a vector of ChunkTypes, or a !OK status if an error occurs.
     ','line_number':254,'multiline':True]['text':'*
     * Retrieves the collection metadata and its chunks metadata. If the collection epoch matches
     * the one specified in sinceVersion, then it only returns chunks with 'lastmod' gte than
     * sinceVersion; otherwise it returns all of its chunks.
     ','line_number':281,'multiline':True]['text':'*
     * Retrieves the collection metadata and its global index metadata. This function will return
     * all of the global idexes for a collection.
     ','line_number':292,'multiline':True]['text':'*
     * Retrieves all zones defined for the specified collection. The returned vector is sorted based
     * on the min key of the zones.
     *
     * Returns a !OK status if an error occurs.
     ','line_number':301,'multiline':True]['text':'*
     * Retrieves all namespaces that have zones associated with a database.
     ','line_number':310,'multiline':True]['text':'*
     * Retrieves the list of shards in this sharded cluster. If `excludeDraining` is set to `false`
     * (default), it retrieves all shards. Otherwise, it retrieves only shards that are not
     * draining.
     * Returns a !OK status if an error occurs.
     ','line_number':316,'multiline':True]['text':'*
     * Runs a user management command on the config servers. Do not use for general write command
     * execution.
     *
     * @param commandName: name of command
     * @param dbname: database for which the user management command is invoked
     * @param cmdObj: command obj
     * @param result: contains data returned from config servers
     * Returns true on success.
     ','line_number':327,'multiline':True]['text':'*
     * Runs a user management related read-only command on a config server.
     ','line_number':343,'multiline':True]['text':'*
     * Reads global sharding settings from the confing.settings collection. The key parameter is
     * used as the _id of the respective setting document.
     *
     * NOTE: This method should generally not be used directly and instead the respective
     * configuration class should be used (e.g. BalancerConfiguration).
     *
     * Returns ErrorCodes::NoMatchingDocument if no such key exists or the BSON content of the
     * setting otherwise.
     ','line_number':351,'multiline':True]['text':'*
     * Returns the contents of the config.version document - containing the current cluster schema
     * version as well as the clusterID.
     ','line_number':363,'multiline':True]['text':'*
     * Returns internal keys for the given purpose and have an expiresAt value greater than
     * newerThanThis.
     ','line_number':370,'multiline':True]['text':'*
     * Returns all external (i.e. validation-only) keys for the given purpose.
     ','line_number':380,'multiline':True]['text':'*
     * Directly inserts a document in the specified namespace on the config server. The document
     * must have an _id index. Must only be used for insertions in the 'config' database.
     *
     * NOTE: Should not be used in new code outside the ShardingCatalogManager.
     ','line_number':386,'multiline':True]['text':'*
     * Updates a single document in the specified namespace on the config server. Must only be used
     * for updates to the 'config' database.
     *
     * This method retries the operation on NotPrimary or network errors, so it should only be used
     * with modifications which are idempotent.
     *
     * Returns non-OK status if the command failed to run for some reason. If the command was
     * successful, returns true if a document was actually modified (that is, it did not exist and
     * was upserted or it existed and any of the fields changed) and false otherwise (basically
     * returns whether the update command's response update.n value is > 0).
     *
     * NOTE: Should not be used in new code outside the ShardingCatalogManager.
     ','line_number':397,'multiline':True]['text':'*
     * Overload version of updateConfigDocument with the extra parameter 'maxTimeMs' for setting a
     * custom timeout duration. Setting 'maxTimeMs' to Milliseconds::max() will entirely remove
     * maxTimeMs from the command object sent over the wire.
     ','line_number':418,'multiline':True]['text':'*
     * Removes documents matching a particular query predicate from the specified namespace on the
     * config server. Must only be used for deletions from the 'config' database.
     *
     * NOTE: Should not be used in new code outside the ShardingCatalogManager.
     ','line_number':431,'multiline':True]['text':'*
     * Returns shard-placement information for collection named 'collName' at the requested point in
     * time 'clusterTime'.
     * - When an exact response may be computed, this will be composed by the shards hosting data of
     *   collName + the primary shard of the parent db.
     * - Otherwise, an approximated response is generated based on a past snapshot of config.shards.
     * References to shards that aren't currently part of the cluster may be included in the
     * response.
     ','line_number':443,'multiline':True]['text':'*
     * Returns shard-placement information for database named 'dbName' at the requested point in
     * time 'clusterTime'.
     * When no exact response may be computed, an approximated one is generated based on a past
     * snapshot of config.shards.
     * References to shards that aren't currently part of the cluster may be included in the
     * response.
     ','line_number':455,'multiline':True]['text':'*
     * Returns shard-placement information for the whole cluster at the requested point in time
     * 'clusterTime'.
     * When no exact response may be computed, an approximated one is generated based on a past
     * snapshot of config.shards.
     * References to shards that aren't currently part of the cluster may be included in the
     * response.
     ','line_number':466,'multiline':True]['text':'*
     * Queries config.placementHistory to retrieve placement metadata on the requested namespace at
     * a specific point in time. When no namespace is specified, placement metadata on the whole
     * cluster will be returned. This function is meant to be exclusively invoked by config server
     * nodes.
     *
     * TODO (SERVER-73029): convert to private method of ShardingCatalogClientImpl
     ','line_number':477,'multiline':True]['text':' namespace mongo','line_number':505,'multiline':False]