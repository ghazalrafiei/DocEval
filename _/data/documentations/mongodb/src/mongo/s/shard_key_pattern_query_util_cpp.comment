['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Maximum number of intervals produced by $in queries','line_number':90,'multiline':False]['text':' e.g. FETCH -> IXSCAN','line_number':102,'multiline':False]['text':' children.size() > 1, assert it's OR / SORT_MERGE.','line_number':106,'multiline':False]['text':' Unexpected node. We should never reach here.','line_number':108,'multiline':False]['text':' We'd like to know this error in testing.','line_number':112,'multiline':False]['text':' Bail out with all shards in production, since this isn't a fatal error.','line_number':114,'multiline':False]['text':' The first branch under OR','line_number':121,'multiline':False]['text':' Got unexpected node in query solution tree','line_number':124,'multiline':False]['text':' Got unexpected node in query solution tree','line_number':132,'multiline':False]['text':' Any arrays found get immediately returned. We are equipped up the call stack to specifically','line_number':155,'multiline':False]['text':' deal with array values.','line_number':156,'multiline':False]['text':' namespace','line_number':176,'multiline':False]['text':' Extract equalities from query.','line_number':221,'multiline':False]['text':' TODO: Build the path set initially?','line_number':223,'multiline':False]['text':' We only care about extracting the full key pattern paths - if they don't exist (or are','line_number':226,'multiline':False]['text':' conflicting), we don't contain the shard key.','line_number':227,'multiline':False]['text':' NOTE: Failure to extract equality matches just means we return no shard key - it's not','line_number':230,'multiline':False]['text':' an error we propagate','line_number':231,'multiline':False]['text':' Extract key from equalities','line_number':235,'multiline':False]['text':' NOTE: The method below is equivalent to constructing a BSONObj and running','line_number':236,'multiline':False]['text':' extractShardKeyFromDoc, but doesn't require creating the doc.','line_number':237,'multiline':False]['text':' Iterate the parsed paths to avoid re-parsing','line_number':240,'multiline':False]['text':' NOTE: The equal element may *not* have the same field name as the path - nested $and,','line_number':256,'multiline':False]['text':' $eq, for example','line_number':257,'multiline':False]['text':' If any field is unsatisfied, return empty bound list.','line_number':271,'multiline':False]['text':' To construct our bounds we will generate intervals based on bounds for the first field, then','line_number':278,'multiline':False]['text':' compound intervals based on constraints for the first 2 fields, then compound intervals for','line_number':279,'multiline':False]['text':' the first 3 fields, etc.','line_number':280,'multiline':False]['text':'','line_number':281,'multiline':False]['text':' As we loop through the fields, we start generating new intervals that will later get extended','line_number':282,'multiline':False]['text':' in another iteration of the loop. We define these partially constructed intervals using pairs','line_number':283,'multiline':False]['text':' of BSONObjBuilders (shared_ptrs, since after one iteration of the loop they still must exist','line_number':284,'multiline':False]['text':' outside their scope).','line_number':285,'multiline':False]['text':' Until equalityOnly is false, we are just dealing with equality (no range or $in queries).','line_number':292,'multiline':False]['text':' Get the relevant intervals for this field, but we may have to transform the list of','line_number':300,'multiline':False]['text':' what's relevant according to the expression for this field','line_number':301,'multiline':False]['text':' This field is only a single point-interval','line_number':307,'multiline':False]['text':' This clause is the first to generate more than a single point. We only execute','line_number':313,'multiline':False]['text':' this clause once. After that, we simplify the bound extensions to prevent','line_number':314,'multiline':False]['text':' combinatorial explosion.','line_number':315,'multiline':False]['text':' If we've already generated a range or multiple point-intervals just extend what we've','line_number':342,'multiline':False]['text':' generated with min/max bounds for this field','line_number':343,'multiline':False]['text':' $text is not allowed in planning since we don't have text index on mongos.','line_number':360,'multiline':False]['text':' TODO: Treat $text query as a no-op in planning on mongos. So with shard key {a: 1},','line_number':361,'multiline':False]['text':'       the query { a: 2, $text: { ... } } will only target to {a: 2}.','line_number':362,'multiline':False]['text':' [minKey, maxKey]','line_number':366,'multiline':False]['text':' Similarly, ignore GEO_NEAR queries in planning, since we do not have geo indexes on mongos.','line_number':370,'multiline':False]['text':' If the GEO_NEAR predicate is a child of AND, remove the GEO_NEAR and continue building','line_number':373,'multiline':False]['text':' bounds. Currently a CanonicalQuery can have at most one GEO_NEAR expression, and only at','line_number':374,'multiline':False]['text':' the top-level, so this check is sufficient.','line_number':375,'multiline':False]['text':' Consider shard key as an index','line_number':397,'multiline':False]['text':' Use query framework to generate index bounds','line_number':402,'multiline':False]['text':' Must use "shard key" index','line_number':404,'multiline':False]['text':' The shard key index cannot be multikey.','line_number':409,'multiline':False]['text':' Empty multikey paths, since the shard key index cannot be multikey.','line_number':411,'multiline':False]['text':' Empty multikey path set, since the shard key index cannot be multikey.','line_number':413,'multiline':False]['text':' sparse ','line_number':415,'multiline':True]['text':' unique ','line_number':416,'multiline':True]['text':' filterExpr ','line_number':418,'multiline':True]['text':' collator ','line_number':420,'multiline':True]['text':' projExec ','line_number':421,'multiline':True]['text':' Pick any solution that has non-trivial IndexBounds. bounds.size() == 0 represents a','line_number':428,'multiline':False]['text':' trivial IndexBounds where none of the fields' values are bounded.','line_number':429,'multiline':False]['text':' We cannot plan the query without collection scan, so target to all shards.','line_number':438,'multiline':False]['text':' [minKey, maxKey]','line_number':440,'multiline':False]['text':' Fast path for targeting equalities on the shard key.','line_number':491,'multiline':False]['text':' The query uses multiple shards','line_number':504,'multiline':False]['text':' Transforms query into bounds for each field in the shard key','line_number':508,'multiline':False]['text':' for example :','line_number':509,'multiline':False]['text':'   Key { a: 1, b: 1 },','line_number':510,'multiline':False]['text':'   Query { a : { $gte : 1, $lt : 2 },','line_number':511,'multiline':False]['text':'            b : { $gte : 3, $lt : 4 } }','line_number':512,'multiline':False]['text':'   => Bounds { a : [1, 2), b : [3, 4) }','line_number':513,'multiline':False]['text':' Transforms bounds for each shard key field into full shard key ranges','line_number':516,'multiline':False]['text':' for example :','line_number':517,'multiline':False]['text':'   Key { a : 1, b : 1 }','line_number':518,'multiline':False]['text':'   Bounds { a : [1, 2), b : [3, 4) }','line_number':519,'multiline':False]['text':'   => Ranges { a : 1, b : 3 } => { a : 2, b : 4 }','line_number':520,'multiline':False]['text':' Once we know we need to visit all shards no need to keep looping.','line_number':529,'multiline':False]['text':' However, this optimization does not apply when we are reading from a snapshot','line_number':530,'multiline':False]['text':' because _shardPlacementVersions contains shards with chunks and is built based on the','line_number':531,'multiline':False]['text':' last refresh. Therefore, it is possible for _shardPlacementVersions to have fewer entries','line_number':532,'multiline':False]['text':' if a shard no longer owns chunks when it used to at _clusterTime.','line_number':533,'multiline':False]['text':' SERVER-4914 Some clients of getShardIdsForQuery() assume at least one shard will be returned.','line_number':539,'multiline':False]['text':' For now, we satisfy that assumption by adding a shard with no matches rather than returning','line_number':540,'multiline':False]['text':' an empty set of shards.','line_number':541,'multiline':False]['text':' namespace mongo','line_number':570,'multiline':False]