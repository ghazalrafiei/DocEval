['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' TODO SERVER-39704: Remove this fail point once the router can safely retry within a transaction','line_number':98,'multiline':False]['text':' on stale version and snapshot errors.','line_number':99,'multiline':False]['text':' Commands that are idempotent in a transaction context and can be blindly retried in the middle of','line_number':107,'multiline':False]['text':' a transaction. Writing aggregates (e.g. with a $out or $merge) is disallowed in a transaction, so','line_number':108,'multiline':False]['text':' aggregates must be read operations. Note: aggregate and find do have the side-effect of creating','line_number':109,'multiline':False]['text':' cursors, but any established during an unsuccessful attempt are best-effort killed.','line_number':110,'multiline':False]['text':' Returns if a transaction's commit result is unknown based on the given statuses. A result is','line_number':114,'multiline':False]['text':' considered unknown if it would be given the "UnknownTransactionCommitResult" as defined by the','line_number':115,'multiline':False]['text':' driver transactions specification or fails with one of the errors for invalid write concern that','line_number':116,'multiline':False]['text':' are specifically not given the "UnknownTransactionCommitResult" label. Additionally,','line_number':117,'multiline':False]['text':' TransactionTooOld is considered unknown because a command that fails with it could not have done','line_number':118,'multiline':False]['text':' meaningful work.','line_number':119,'multiline':False]['text':'','line_number':120,'multiline':False]['text':' The "UnknownTransactionCommitResult" specification:','line_number':121,'multiline':False]['text':' https://github.com/mongodb/specifications/blob/master/source/transactions/transactions.rst#unknowntransactioncommitresult.','line_number':122,'multiline':False]['text':' Assemble requests.','line_number':139,'multiline':False]['text':' Send the requests.','line_number':149,'multiline':False]['text':' Receive the responses.','line_number':160,'multiline':False]['text':' If any shard returned an error, return the error immediately.','line_number':167,'multiline':False]['text':' If any participant had a writeConcern error, return the participant's writeConcern','line_number':173,'multiline':False]['text':' error immediately.','line_number':174,'multiline':False]['text':' If all the responses were ok, return the last response.','line_number':181,'multiline':False]['text':' Helper to convert the CommitType enum into a human readable string for diagnostics.','line_number':185,'multiline':False]['text':'*
 * Sets the given logical time as the atClusterTime for the transaction to be the greater of
 * the given time and the user's afterClusterTime, if one was provided.
 ','line_number':218,'multiline':True]['text':' If the user passed afterClusterTime, the chosen time must be greater than or equal to it.','line_number':228,'multiline':False]['text':'*
 * Returns the readConcern setting from the cmdObj. If a BSONObjBuilder is provided, it will
 * append the original fields from the cmdObj except for the readConcern field.
 ','line_number':252,'multiline':True]['text':' namespace','line_number':279,'multiline':False]['text':' This transaction router is not yet initialized.','line_number':322,'multiline':False]['text':' Append relevant client metadata for transactions with inactive sessions. For those with','line_number':326,'multiline':False]['text':' active sessions, these fields will already be in the output.','line_number':327,'multiline':False]['text':' Append current transaction info.','line_number':348,'multiline':False]['text':' We don't know the participants if we're recovering the commit.','line_number':395,'multiline':False]['text':' The first command sent to a participant must start a transaction, unless it is a transaction','line_number':460,'multiline':False]['text':' command, which don't support the options that start transactions, i.e. startTransaction and','line_number':461,'multiline':False]['text':' readConcern. Otherwise the command must not have a read concern.','line_number':462,'multiline':False]['text':' Strip the command of its read concern if it should not have one.','line_number':468,'multiline':False]['text':' Do not process the transaction metadata after commit or abort have been initiated,','line_number':537,'multiline':False]['text':' since a participant's state is partially reset on commit and abort.','line_number':538,'multiline':False]['text':' WouldChangeOwningShard errors don't abort their transaction and the responses containing them','line_number':543,'multiline':False]['text':' include transaction metadata, so we treat them as successful responses.','line_number':544,'multiline':False]['text':' The shard reported readOnly:false on this statement.','line_number':581,'multiline':False]['text':' Don't update participant stats during recovery since the participant list isn't','line_number':616,'multiline':False]['text':' known.','line_number':617,'multiline':False]['text':' Don't update participant stats during recovery since the participant list isn't known.','line_number':684,'multiline':False]['text':' The first participant is chosen as the coordinator.','line_number':714,'multiline':False]['text':' abortTransaction is sent with "local" write concern (w: 1), so there's no need to check for a','line_number':780,'multiline':False]['text':' write concern error.','line_number':781,'multiline':False]['text':' If there was a stale shard or db routing error and the transaction is retryable then we don't','line_number':798,'multiline':False]['text':' send abort to any participant to prevent a race between the aborts and the commands retried','line_number':799,'multiline':False]['text':' Send abort to each pending participant. This resets their transaction state and','line_number':801,'multiline':False]['text':' guarantees no transactions will be left open if the retry does not re-target any of these','line_number':802,'multiline':False]['text':' shards.','line_number':803,'multiline':False]['text':' Verify each abort succeeded or failed with NoSuchTransaction, which may happen if the','line_number':817,'multiline':False]['text':' transaction was already implicitly aborted on the shard.','line_number':818,'multiline':False]['text':' Remove each aborted participant from the participant list. Remove after sending abort, so','line_number':823,'multiline':False]['text':' they are not added back to the participant list by the transaction tracking inside the ARS.','line_number':824,'multiline':False]['text':' If the participant being removed was chosen as the recovery shard, reset the recovery','line_number':826,'multiline':False]['text':' shard. This is safe because this participant is a pending participant, meaning it','line_number':827,'multiline':False]['text':' cannot have been returned in the recoveryToken on an earlier statement.','line_number':828,'multiline':False]['text':' If there are no more participants, also clear the coordinator id because a new one must be','line_number':837,'multiline':False]['text':' chosen by the retry.','line_number':838,'multiline':False]['text':' If participants were created by an earlier command, the coordinator must be one of them.','line_number':845,'multiline':False]['text':' We can always retry on the first overall statement because all targeted participants must','line_number':853,'multiline':False]['text':' be pending, so the retry will restart the local transaction on each one, overwriting any','line_number':854,'multiline':False]['text':' effects from the first attempt.','line_number':855,'multiline':False]['text':' Only idempotent operations can be retried if the error came from a later statement','line_number':860,'multiline':False]['text':' because non-pending participants targeted by the statement may receive the same statement','line_number':861,'multiline':False]['text':' id more than once, and currently statement ids are not tracked by participants so the','line_number':862,'multiline':False]['text':' operation would be applied each time.','line_number':863,'multiline':False]['text':'','line_number':864,'multiline':False]['text':' Note that the retry will fail if any non-pending participants returned a stale version','line_number':865,'multiline':False]['text':' error during the latest statement, because the error will abort their local transactions','line_number':866,'multiline':False]['text':' but the router's retry will expect them to be in-progress.','line_number':867,'multiline':False]['text':' Remove participants created during the current statement so they are sent the correct options','line_number':889,'multiline':False]['text':' if they are targeted again by the retry.','line_number':890,'multiline':False]['text':' The router can always retry on a view resolution error.','line_number':896,'multiline':False]['text':' Requests against views are always routed to the primary shard for its database, but the retry','line_number':906,'multiline':False]['text':' on the resolved namespace does not have to re-target the primary, so pending participants','line_number':907,'multiline':False]['text':' should be cleared.','line_number':908,'multiline':False]['text':' The transaction must be restarted on all participants because a new read timestamp will be','line_number':937,'multiline':False]['text':' selected, so clear all pending participants. Snapshot errors are only retryable on the first','line_number':938,'multiline':False]['text':' client statement, so all participants should be cleared, including the coordinator.','line_number':939,'multiline':False]['text':' Reset the global snapshot timestamp so the retry will select a new one.','line_number':944,'multiline':False]['text':' Don't increment latestStmtId if no shards have been targeted, since that implies no','line_number':999,'multiline':False]['text':' statements would have been executed inside this transaction at this point. This can','line_number':1000,'multiline':False]['text':' occur when an internal transaction is invoked within a client's transaction that','line_number':1001,'multiline':False]['text':' hasn't executed any statements yet.','line_number':1002,'multiline':False]['text':' If the first action seen by the router for this transaction is to commit, that','line_number':1045,'multiline':False]['text':' means that the client is attempting to recover a commit decision.','line_number':1046,'multiline':False]['text':' This transaction is older than the transaction currently in progress, so throw an error.','line_number':1067,'multiline':False]['text':' This is the same transaction as the one in progress.','line_number':1075,'multiline':False]['text':' This is a newer transaction.','line_number':1087,'multiline':False]['text':' Validate that the transaction number hasn't changed while we were yielded. This is guaranteed','line_number':1114,'multiline':False]['text':' by the activeYields check when beginning a new transaction.','line_number':1115,'multiline':False]['text':' Don't update stats if we don't know the result of the transaction. The client may choose','line_number':1190,'multiline':False]['text':' to retry commit, which will update stats if the result is determined.','line_number':1191,'multiline':False]['text':'','line_number':1192,'multiline':False]['text':' Note that we also don't end the transaction if _commitTransaction() throws, which it','line_number':1193,'multiline':False]['text':' should only do on failure to send a request, in which case the commit result is unknown.','line_number':1194,'multiline':False]['text':' Note that write concern errors are never considered a fatal commit error because they','line_number':1201,'multiline':False]['text':' should be retryable, so it is fine to only pass the top-level status.','line_number':1202,'multiline':False]['text':' The participants list can be empty if a transaction was began on mongos, but it never','line_number':1228,'multiline':False]['text':' ended up targeting any hosts. Such cases are legal for example if a find is issued','line_number':1229,'multiline':False]['text':' against a non-existent database.','line_number':1230,'multiline':False]['text':' For a retried single write shard commit, fall back to the recovery token protocol to','line_number':1297,'multiline':False]['text':' guarantee returning the correct outcome. The client should have provided a recovery','line_number':1298,'multiline':False]['text':' token, but it isn't necessary since the write shard must be the recovery shard, so we','line_number':1299,'multiline':False]['text':' can use a synthetic token instead.','line_number':1300,'multiline':False]['text':' Rethrow the write concern error as a command error since the transaction's effects','line_number':1319,'multiline':False]['text':' can't be durable as we haven't started commit on the write shard.','line_number':1320,'multiline':False]['text':' Returns if the opCtx has yielded its session and failed to unyield it, which may happen during','line_number':1352,'multiline':False]['text':' methods that send network requests at global shutdown when running on a mongod.','line_number':1353,'multiline':False]['text':' Update stats on scope exit so the transaction is considered "active" while waiting on abort','line_number':1365,'multiline':False]['text':' responses.','line_number':1366,'multiline':False]['text':' It's unsafe to continue without the session checked out. This should only happen at','line_number':1369,'multiline':False]['text':' global shutdown, so it's acceptable to skip updating stats.','line_number':1370,'multiline':False]['text':' The router has yet to send any commands to a remote shard for this transaction.','line_number':1376,'multiline':False]['text':' Return the same error that would have been returned by a shard.','line_number':1377,'multiline':False]['text':' If any shard returned an error, return the error immediately.','line_number':1411,'multiline':False]['text':' If any participant had a writeConcern error, return the participant's writeConcern','line_number':1417,'multiline':False]['text':' error immediately.','line_number':1418,'multiline':False]['text':' If all the responses were ok, return the last response.','line_number':1425,'multiline':False]['text':' Update stats on scope exit so the transaction is considered "active" while waiting on abort','line_number':1447,'multiline':False]['text':' responses.','line_number':1448,'multiline':False]['text':' It's unsafe to continue without the session checked out. This should only happen at','line_number':1451,'multiline':False]['text':' global shutdown, so it's acceptable to skip updating stats.','line_number':1452,'multiline':False]['text':' Ignore the responses.','line_number':1481,'multiline':False]['text':' Ignore any exceptions.','line_number':1495,'multiline':False]['text':' The recovery shard is chosen on the first statement that did a write (transactions that only','line_number':1508,'multiline':False]['text':' did reads do not need to be recovered; they can just be retried).','line_number':1509,'multiline':False]['text':' TODO SERVER-37115: Parse statement ids from the client and remember the statement id','line_number':1548,'multiline':False]['text':' of the command that started the transaction, if one was included.','line_number':1549,'multiline':False]['text':' Since DynamicAttributes (attrs) binds by reference, it is important that the lifetime of this','line_number':1645,'multiline':False]['text':' variable lasts until the LOGV2 call at the end of this function.','line_number':1646,'multiline':False]['text':' We don't know the participants if we're recovering the commit.','line_number':1654,'multiline':False]['text':' Total duration of the transaction. Logged at the end of the line for consistency with','line_number':1694,'multiline':False]['text':' slow command logging.','line_number':1695,'multiline':False]['text':' If commit was started but an end time wasn't set, then we don't know the commit result','line_number':1704,'multiline':False]['text':' and can't consider the transaction over until the client retries commit and definitively','line_number':1705,'multiline':False]['text':' learns the result. Note that this behavior may lead to no logging in some cases, but','line_number':1706,'multiline':False]['text':' should avoid logging an incorrect decision.','line_number':1707,'multiline':False]['text':' Implicit abort may execute multiple times if a misbehaving client keeps sending statements','line_number':1711,'multiline':False]['text':' for a txnNumber after receiving an error, so only remember the first abort cause.','line_number':1712,'multiline':False]['text':' A behaving client should never try to commit after attempting to abort, so we can consider','line_number':1722,'multiline':False]['text':' the transaction terminated as soon as explicit abort is observed.','line_number':1723,'multiline':False]['text':' Note this code means the abort was from a user abortTransaction command.','line_number':1725,'multiline':False]['text':' If the commit failed with a command error that can't be retried on, the transaction shouldn't','line_number':1747,'multiline':False]['text':' be able to eventually commit, so it can be considered over from the router's perspective.','line_number':1748,'multiline':False]['text':' If the transaction was already ended, don't end it again.','line_number':1770,'multiline':False]['text':' In some error contexts, the transaction may not have been started yet, so try setting the','line_number':1780,'multiline':False]['text':' transaction's timing stats to active before ending it below. This is a no-op for already','line_number':1781,'multiline':False]['text':' active transactions.','line_number':1782,'multiline':False]['text':' We can retry on the first operation of stale config or db routing version error if there was','line_number':1813,'multiline':False]['text':' only one participant in the transaction because there would only be one request sent, and at','line_number':1814,'multiline':False]['text':' this point that request has finished so there can't be any outstanding requests that would','line_number':1815,'multiline':False]['text':' race with a retry','line_number':1816,'multiline':False]['text':' If the transaction hasn't ended, return how long it has been running for.','line_number':1825,'multiline':False]['text':' If the transaction hasn't ended, return how long commit has been running for.','line_number':1836,'multiline':False]['text':' The transaction is currently active, so return the active time so far plus the time since','line_number':1848,'multiline':False]['text':' the transaction became active.','line_number':1849,'multiline':False]['text':' If there was an in-progress transaction, clean up its stats. This may happen if a transaction','line_number':1866,'multiline':False]['text':' is overriden by a higher txnNumber or its session is reaped.','line_number':1867,'multiline':False]['text':' A transaction was started but not ended, so clean up the appropriate stats for it.','line_number':1869,'multiline':False]['text':' A transaction can't become active if it has already ended or is already active.','line_number':1884,'multiline':False]['text':' If the transaction is becoming active for the first time, also set the transaction's','line_number':1890,'multiline':False]['text':' start time.','line_number':1891,'multiline':False]['text':' The transaction was already open, so it must have been inactive.','line_number':1898,'multiline':False]['text':' If the transaction is already over or the router has already been stashed, the relevant','line_number':1909,'multiline':False]['text':' stats should have been updated earlier. In certain error scenarios, it's possible for a','line_number':1910,'multiline':False]['text':' transaction to be stashed twice in a row.','line_number':1911,'multiline':False]['text':' We only know the participant list if we're not recovering a decision.','line_number':1936,'multiline':False]['text':' Transaction level atClusterTime is not tracked in the readConcern object.','line_number':1979,'multiline':False]['text':' Note: getLevel returns 'local' even not set so we need to check explicitly.','line_number':1986,'multiline':False]['text':' We should have already chosen the higher time when setDefaultAtClusterTime was','line_number':1999,'multiline':False]['text':' called.','line_number':2000,'multiline':False]['text':' atClusterTime takes precedent over afterClusterTime since specifying both is','line_number':2037,'multiline':False]['text':' illegal. Do nothing here since we have already set atClusterTime earlier.','line_number':2038,'multiline':False]['text':' We already set this earlier.','line_number':2041,'multiline':False]['text':' We should have already chosen the higher time when setDefaultAtClusterTime was','line_number':2043,'multiline':False]['text':' called.','line_number':2044,'multiline':False]['text':' We already set this earlier.','line_number':2066,'multiline':False]['text':' namespace mongo','line_number':2114,'multiline':False]