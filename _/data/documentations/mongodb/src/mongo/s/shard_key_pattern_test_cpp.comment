['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'','line_number':181,'multiline':False]['text':' Single field ShardKeyPatterns','line_number':182,'multiline':False]['text':'','line_number':183,'multiline':False]['text':' BSONObjIterator breaks this for now','line_number':211,'multiline':False]['text':' ASSERT_EQUALS(docKey(pattern, BSON("a" << 10 << "a" << 20)), BSONObj());','line_number':212,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' Compound ShardKeyPatterns','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' Ordering','line_number':243,'multiline':False]['text':'','line_number':248,'multiline':False]['text':' Nested ShardKeyPatterns','line_number':249,'multiline':False]['text':'','line_number':250,'multiline':False]['text':'','line_number':272,'multiline':False]['text':' Deeply nested ShardKeyPatterns','line_number':273,'multiline':False]['text':'','line_number':274,'multiline':False]['text':' 'a.0.1', 'a.0' here should be considered as a different field. Arrays are allowed for non','line_number':302,'multiline':False]['text':' shard key fields. Note that for all these input objects extractShardKeyFromDoc() should','line_number':303,'multiline':False]['text':' return 'null' since we consider the shard key to be missing in the input object.','line_number':304,'multiline':False]['text':'','line_number':316,'multiline':False]['text':' Hashed ShardKeyPattern','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':'','line_number':346,'multiline':False]['text':' Single field ShardKeyPatterns','line_number':347,'multiline':False]['text':'','line_number':348,'multiline':False]['text':' Doc key extraction shouldn't work with query','line_number':359,'multiline':False]['text':' $eq/$or/$and/$all','line_number':362,'multiline':False]['text':' Regex can't be extracted from query','line_number':374,'multiline':False]['text':'','line_number':383,'multiline':False]['text':' Compound ShardKeyPatterns','line_number':384,'multiline':False]['text':'','line_number':385,'multiline':False]['text':' $eq/$or/$and/$all','line_number':405,'multiline':False]['text':' Ordering','line_number':415,'multiline':False]['text':'','line_number':420,'multiline':False]['text':' Nested ShardKeyPatterns','line_number':421,'multiline':False]['text':'','line_number':422,'multiline':False]['text':' Nested $eq is actually a document element','line_number':438,'multiline':False]['text':'','line_number':451,'multiline':False]['text':' Deeply nested ShardKeyPatterns','line_number':452,'multiline':False]['text':'','line_number':453,'multiline':False]['text':' Arrays at any nesting level means we can't extract a shard key','line_number':460,'multiline':False]['text':' Arrays at any nesting level means we can't extract a shard key','line_number':480,'multiline':False]['text':' Missing fields.','line_number':487,'multiline':False]['text':'','line_number':494,'multiline':False]['text':' Hashed ShardKeyPattern','line_number':495,'multiline':False]['text':'','line_number':496,'multiline':False]['text':' Hashed works basically the same as non-hashed, but applies the hash function at the end','line_number':503,'multiline':False]['text':'','line_number':514,'multiline':False]['text':'','line_number':543,'multiline':False]['text':' Single field ShardKeyPatterns','line_number':544,'multiline':False]['text':'','line_number':545,'multiline':False]['text':'','line_number':561,'multiline':False]['text':' Compound ShardKeyPatterns','line_number':562,'multiline':False]['text':'','line_number':563,'multiline':False]['text':'','line_number':580,'multiline':False]['text':' Nested ShardKeyPatterns','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':'','line_number':593,'multiline':False]['text':' Hashed ShardKeyPatterns','line_number':594,'multiline':False]['text':'','line_number':595,'multiline':False]['text':' If the index provides array value for a field('a.0.1') we should return an empty object.','line_number':642,'multiline':False]['text':' The shard key requires 'p.q.0' field from the index but the index cannot provide it. In this','line_number':697,'multiline':False]['text':' case we cannot extract full shard key and hence we hit an invariant.','line_number':698,'multiline':False]['text':' A shard key field cannot have array values. When we encounter array value from an index, we','line_number':711,'multiline':False]['text':' return an empty object.','line_number':712,'multiline':False]['text':' The shard key needs raw value of 'c.d' but the index can only provide hashed values. There is','line_number':768,'multiline':False]['text':' no way to re-construct the raw value from the hashed value. So we hit an invariant.','line_number':769,'multiline':False]['text':' 'a.firstIndex' and 'c.thirdIndex' are provided by both the indexes. For both fields we could','line_number':818,'multiline':False]['text':' the index value that provides non-hashed value.','line_number':819,'multiline':False]['text':' NumberOfFields','line_number':949,'multiline':False]['text':' NumberOfFields_PositionOfHash','line_number':954,'multiline':False]['text':' same pattern, always true','line_number':971,'multiline':False]['text':' different number of fields, same values','line_number':982,'multiline':False]['text':' different number of fields, different values','line_number':991,'multiline':False]['text':' { a : 1 } is not extended by { a : "hashed" } and viceversa','line_number':992,'multiline':False]['text':' { a : 1, b : 1 } is not extended by { a : 1, b : "hashed" } and viceversa','line_number':996,'multiline':False]['text':' { a : 1 } is extended by { a : 1, b : "hashed" } but not viceversa','line_number':1000,'multiline':False]['text':' { a : 1, b : 1 } is extended by { a : 1, b : 1, c : "hashed" } but not viceversa','line_number':1004,'multiline':False]['text':' { a : 1, b : 1, c : 1 } is not extended by { a : 1, b : 1, c : "hashed" } and viceversa','line_number':1008,'multiline':False]['text':' { a: "hashed", b : 1 } is not extended by { a : 1, b : 1, c : "hashed" } and viceversa','line_number':1012,'multiline':False]['text':' { a : "hashed", b : 1 } is extended by { a : "hashed", b : 1, c : "1" } but not viceversa','line_number':1016,'multiline':False]['text':' { a : 1, b : "hashed " } is extended by { a : 1, b : "hashed", c : "1" } but not viceversa','line_number':1020,'multiline':False]['text':' namespace','line_number':1025,'multiline':False]['text':' namespace mongo','line_number':1026,'multiline':False]