['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' If a write error was encountered, append it to the output buffer first.','line_number':145,'multiline':False]['text':' Pass the results from the remote shard into our command response.','line_number':150,'multiline':False]['text':' If we cannot merge on mongoS, establish the merge cursor on a shard. Perform the merging','line_number':185,'multiline':False]['text':' command on random shard, unless the pipeline dictates that it needs to be run on a specific','line_number':186,'multiline':False]['text':' shard for the database.','line_number':187,'multiline':False]['text':' If the user didn't specify a collation already, make sure there's a collation attached to','line_number':211,'multiline':False]['text':' the merge command, since the merging shard may not have the collection metadata.','line_number':212,'multiline':False]['text':' Don't include a readConcern since we can only include read concerns on the _first_','line_number':221,'multiline':False]['text':' command sent to a participant per transaction. Assuming the merging shard is a','line_number':222,'multiline':False]['text':' participant, it will already have received another 'aggregate' command earlier which','line_number':223,'multiline':False]['text':' contained a readConcern.','line_number':224,'multiline':False]['text':' Attach the IGNORED chunk version to the command. On the shard, this will skip the actual','line_number':228,'multiline':False]['text':' version check but will nonetheless mark the operation as versioned.','line_number':229,'multiline':False]['text':' Attach the read and write concerns if needed, and return the final command object.','line_number':236,'multiline':False]['text':' appendRC ','line_number':238,'multiline':True]['text':' appendWC ','line_number':239,'multiline':True]['text':' We should never be in a situation where we call this function on a non-merge pipeline.','line_number':252,'multiline':False]['text':' First, check whether we can merge on the mongoS. If the merge pipeline MUST run on mongoS,','line_number':273,'multiline':False]['text':' then ignore the internalQueryProhibitMergingOnMongoS parameter.','line_number':274,'multiline':False]['text':' If we are not merging on mongoS, then this is not a $changeStream aggregation, and we','line_number':285,'multiline':False]['text':' therefore must have a valid routing table.','line_number':286,'multiline':False]['text':' Dispatch $mergeCursors to the chosen shard, store the resulting cursor, and return.','line_number':310,'multiline':False]['text':' If the mergingShard returned an error and did not accept ownership it is our responsibility','line_number':326,'multiline':False]['text':' to kill the cursors.','line_number':327,'multiline':False]['text':' If we didn't get an error from the merging shard, ownership for the shard cursors has been','line_number':330,'multiline':False]['text':' transferred to the merging shard. Dismiss the ownership in the current merging pipeline such','line_number':331,'multiline':False]['text':' that when it goes out of scope it does not attempt to kill the cursors.','line_number':332,'multiline':False]['text':' A batch size of 0 is legal for the initial aggregate, but not valid for getMores, the batch','line_number':362,'multiline':False]['text':' size we pass here is used for getMores, so do not specify a batch size if the initial request','line_number':363,'multiline':False]['text':' had a batch size of 0.','line_number':364,'multiline':False]['text':' This exception is thrown when a $changeStream stage encounters an event','line_number':387,'multiline':False]['text':' that invalidates the cursor. We should close the cursor and return without','line_number':388,'multiline':False]['text':' error.','line_number':389,'multiline':False]['text':' This exception is thrown when a change-stream cursor is invalidated. Set the PBRT','line_number':393,'multiline':False]['text':' to the resume token of the invalidating event, and mark the cursor response as','line_number':394,'multiline':False]['text':' invalidated. We always expect to have ExtraInfo for this error code.','line_number':395,'multiline':False]['text':' Check whether we have exhausted the pipeline's results.','line_number':405,'multiline':False]['text':' We reached end-of-stream. If the cursor is not tailable, then we mark it as','line_number':407,'multiline':False]['text':' exhausted. If it is tailable, usually we keep it open (i.e. "NotExhausted") even when','line_number':408,'multiline':False]['text':' we reach end-of-stream. However, if all the remote cursors are exhausted, there is no','line_number':409,'multiline':False]['text':' hope of returning data and thus we need to close the mongos cursor as well.','line_number':410,'multiline':False]['text':' If this result will fit into the current batch, add it. Otherwise, stash it in the cursor','line_number':417,'multiline':False]['text':' to be returned on the next getMore.','line_number':418,'multiline':False]['text':' Set the postBatchResumeToken. For non-$changeStream aggregations, this will be empty.','line_number':427,'multiline':False]['text':' For empty batches, or in the case where the final result was added to the batch rather than','line_number':432,'multiline':False]['text':' being stashed, we update the PBRT here to ensure that it is the most recent available.','line_number':433,'multiline':False]['text':' Fill out the aggregation metrics in CurOp, and record queryStats metrics, before detaching','line_number':442,'multiline':False]['text':' the cursor from its opCtx.','line_number':443,'multiline':False]['text':' For all consumers construct a request with appropriate cursor ids and send to shards.','line_number':494,'multiline':False]['text':' Pick this consumer's cursors from producers.','line_number':501,'multiline':False]['text':' Create a pipeline for a consumer and add the merging stage.','line_number':509,'multiline':False]['text':' exchangeSpec ','line_number':524,'multiline':True]['text':' needsMerge ','line_number':525,'multiline':True]['text':' explain ','line_number':526,'multiline':True]['text':' do not allow partial results ','line_number':536,'multiline':True]['text':' Convert remote cursors into a vector of "owned" cursors.','line_number':538,'multiline':False]['text':' The merging pipeline is just a union of the results from each of the shards involved on the','line_number':545,'multiline':False]['text':' consumer side of the exchange.','line_number':546,'multiline':False]['text':' Relinquish ownership of the consumer pipelines' cursors. These cursors are now set up to be','line_number':552,'multiline':False]['text':' merged by a set of $mergeCursors pipelines that we just dispatched to the shards above. Now','line_number':553,'multiline':False]['text':' that we've established those pipelines on the shards, we are no longer responsible for','line_number':554,'multiline':False]['text':' ensuring they are cleaned up. If there was a problem establishing the cursors then','line_number':555,'multiline':False]['text':' establishCursors() would have thrown and mongos would kill all the consumer cursors itself.','line_number':556,'multiline':False]['text':' We expect the pipeline to be fully executable at this point, so if the pipeline was all skips','line_number':575,'multiline':False]['text':' and limits we expect it to start with a $mergeCursors stage.','line_number':576,'multiline':False]['text':' Replace the pipeline with RouterExecStages.','line_number':579,'multiline':False]['text':' We previously checked that everything was a $mergeCursors, $skip, or $limit. We','line_number':590,'multiline':False]['text':' already popped off the $mergeCursors, so everything else should be a $skip or a','line_number':591,'multiline':False]['text':' $limit.','line_number':592,'multiline':False]['text':' We are executing the pipeline without using an actual Pipeline, so we need to strip out any','line_number':596,'multiline':False]['text':' Document metadata ourselves.','line_number':597,'multiline':False]['text':'*
 * Contacts the primary shard for the collection default collation.
 ','line_number':605,'multiline':True]['text':' Collection or collection info does not exist; return an empty collation object.','line_number':615,'multiline':False]['text':' We inspect 'info' to infer the collection default collation.','line_number':622,'multiline':False]['text':' namespace','line_number':653,'multiline':False]['text':' We can optimize this Pipeline to avoid going through any DocumentSources at all and thus','line_number':659,'multiline':False]['text':' skip the expensive BSON->Document->BSON conversion.','line_number':660,'multiline':False]['text':' pipeline ','line_number':674,'multiline':True]['text':' If we don't have a routing table and there is a $documents stage, we must run on','line_number':686,'multiline':False]['text':' mongos.','line_number':687,'multiline':False]['text':' We should never receive a pipeline which cannot run on mongoS.','line_number':700,'multiline':False]['text':' Verify that the first stage can produce input for the remainder of the pipeline.','line_number':706,'multiline':False]['text':' Register the new mongoS cursor, and retrieve the initial batch of results.','line_number':713,'multiline':False]['text':' We don't need to storePossibleCursor or propagate writeConcern errors; a pipeline with','line_number':717,'multiline':False]['text':' writing stages like $out can never run on mongoS. Filter the command response and return','line_number':718,'multiline':False]['text':' immediately.','line_number':719,'multiline':False]['text':' If not, split the pipeline as necessary and dispatch to the relevant shards.','line_number':734,'multiline':False]['text':' Check for valid usage of SEARCH_META. We wait until after we've dispatched pipelines to the','line_number':743,'multiline':False]['text':' shards in the event that we need to resolve any views.','line_number':744,'multiline':False]['text':' TODO PM-1966: We can resume doing this at parse time once views are tracked in the catalog.','line_number':745,'multiline':False]['text':' If the operation is an explain, then we verify that it succeeded on all targeted','line_number':762,'multiline':False]['text':' shards, write the results to the output builder, and return immediately.','line_number':763,'multiline':False]['text':' If this isn't an explain, then we must have established cursors on at least one','line_number':769,'multiline':False]['text':' shard.','line_number':770,'multiline':False]['text':' If we sent the entire pipeline to a single shard, store the remote cursor and return.','line_number':773,'multiline':False]['text':' If we have the exchange spec then dispatch all consumers.','line_number':788,'multiline':False]['text':' If we reach here, we have a merge pipeline to dispatch.','line_number':796,'multiline':False]['text':' If this is a collectionless aggregation or if the user specified an explicit collation,','line_number':813,'multiline':False]['text':' we immediately return the user-defined collation if one exists, or an empty BSONObj','line_number':814,'multiline':False]['text':' otherwise.','line_number':815,'multiline':False]['text':' If the target collection is untracked, we will contact the primary shard to discover this','line_number':820,'multiline':False]['text':' information if it is necessary for pipeline parsing. Otherwise, we infer the collation once','line_number':821,'multiline':False]['text':' the command is executed on the primary shard.','line_number':822,'multiline':False]['text':' Return the default collator if one exists, otherwise return the simple collation.','line_number':829,'multiline':False]['text':' By using an initial batchSize of zero all of the events will get returned through','line_number':850,'multiline':False]['text':' the getMore path and have metadata stripped out.','line_number':851,'multiline':False]['text':' Format the command for the shard. This wraps the command as an explain if necessary, and','line_number':854,'multiline':False]['text':' rewrites the result into a format safe to forward to shards.','line_number':855,'multiline':False]['text':' pipeline ','line_number':857,'multiline':True]['text':' If this was an explain, then we get back an explain result object rather than a cursor.','line_number':892,'multiline':False]['text':' routerSort ','line_number':905,'multiline':True]['text':' First append the properly constructed writeConcernError. It will then be skipped','line_number':908,'multiline':False]['text':' in appendElementsUnique.','line_number':909,'multiline':False]['text':' namespace cluster_aggregation_planner','line_number':919,'multiline':False]['text':' namespace mongo','line_number':920,'multiline':False]