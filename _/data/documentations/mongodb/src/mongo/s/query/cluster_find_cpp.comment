['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Given the FindCommandRequest 'findCommand' being executed by mongos, returns a copy of the query
 * which is suitable for forwarding to the targeted hosts.
 ','line_number':147,'multiline':True]['text':' If there is a limit, we forward the sum of the limit and the skip.','line_number':153,'multiline':False]['text':' If there is a sort other than $natural, we send a sortKey meta-projection to the remote node.','line_number':168,'multiline':False]['text':' Even if the client sends us singleBatch=true, we may need to retrieve','line_number':191,'multiline':False]['text':' multiple batches from a shard in order to return the single requested batch to the client.','line_number':192,'multiline':False]['text':' Therefore, we must always send singleBatch=false to the shards.','line_number':193,'multiline':False]['text':' Any expansion of the 'showRecordId' flag should have already happened on mongos.','line_number':196,'multiline':False]['text':' Forwards the FindCommandRequest as is to a single shard so that limit and skip can','line_number':214,'multiline':False]['text':' be applied on mongod.','line_number':215,'multiline':False]['text':' If mongos selected atClusterTime or received it from client, transmit it to shard.','line_number':221,'multiline':False]['text':' Replace the 'letParams' expressions with their values.','line_number':225,'multiline':False]['text':' ExpressionContext may contain query settings that were looked up in QuerySettingsManager.','line_number':239,'multiline':False]['text':' Propagate it to the shards.','line_number':240,'multiline':False]['text':'*
 * Constructs the shard requests (ShardId, BSONObj) pairs for the find command by attaching the
 * shardVersion, txnNumber and sampleId if necessary.
 ','line_number':248,'multiline':True]['text':' Choose the shard to sample the query on if needed.','line_number':261,'multiline':False]['text':' Helper methods for appending additional attributes to the shard command.','line_number':266,'multiline':False]['text':' Constructs the shard request by appending additional attributes to the serialized','line_number':287,'multiline':False]['text':' 'findCommandToForward'.','line_number':288,'multiline':False]['text':' Get the set of shards on which we will run the query.','line_number':336,'multiline':False]['text':' Construct the query and parameters. Defer setting skip and limit here until','line_number':340,'multiline':False]['text':' we determine if the query is targeting multi-shards or a single shard below.','line_number':341,'multiline':False]['text':' This is the batchSize passed to each subsequent getMore command issued by the cursor. We','line_number':361,'multiline':False]['text':' usually use the batchSize associated with the initial find, but as it is illegal to send a','line_number':362,'multiline':False]['text':' getMore with a batchSize of 0, we set it to use the default batchSize logic.','line_number':363,'multiline':False]['text':' $natural sort is actually a hint to use a collection scan, and shouldn't be treated like a','line_number':368,'multiline':False]['text':' sort on mongos. Including a $natural anywhere in the sort spec results in the whole sort','line_number':369,'multiline':False]['text':' being considered a hint to use a collection scan.','line_number':370,'multiline':False]['text':' We have already validated the input sort object. Serialize the raw sort spec into one','line_number':373,'multiline':False]['text':' suitable for use as the ordering specification in BSONObj::woCompare(). In particular, we','line_number':374,'multiline':False]['text':' want to eliminate sorts using expressions (like $meta) and replace them with a','line_number':375,'multiline':False]['text':' placeholder. When mongos performs a merge-sort, any $meta expressions have already been','line_number':376,'multiline':False]['text':' performed on the shards. Mongos just needs to know the length of the sort pattern and','line_number':377,'multiline':False]['text':' whether each part of the sort pattern is ascending or descending.','line_number':378,'multiline':False]['text':' There is no specified sort, and there is a GEO_NEAR node. This means we should merge sort','line_number':388,'multiline':False]['text':' by the geoNearDistance. Request the projection {$sortKey: <geoNearDistance>} from the','line_number':389,'multiline':False]['text':' shards. Indicate to the AsyncResultsMerger that it should extract the sort key','line_number':390,'multiline':False]['text':' {"$sortKey": <geoNearDistance>} and sort by the order {"$sortKey": 1}.','line_number':391,'multiline':False]['text':' Tailable cursors can't have a sort, which should have already been validated.','line_number':397,'multiline':False]['text':' Establish the cursors with a consistent shardVersion across shards.','line_number':403,'multiline':False]['text':' If we have maxTimeMS and allowPartialResults, then leave some spare time in the opCtx','line_number':405,'multiline':False]['text':' deadline so that we have time to return partial results before the opCtx is killed.','line_number':406,'multiline':False]['text':' Reserve 25% of the time budget (up to 100,000 microseconds max) for processing','line_number':409,'multiline':False]['text':' buffered partial results.','line_number':410,'multiline':False]['text':' The call to establishCursors has its own timeout mechanism that is controlled by the','line_number':420,'multiline':False]['text':' opCtx, so we don't expect runWithDeadline to throw a timeout at this level. We use','line_number':421,'multiline':False]['text':' runWithDeadline because it has the side effect of pushing a temporary (artificial)','line_number':422,'multiline':False]['text':' deadline onto the opCtx used by establishCursors.','line_number':423,'multiline':False]['text':' Construct the requests that we will use to establish cursors on the targeted','line_number':430,'multiline':False]['text':' shards, attaching the shardVersion and txnNumber, if necessary.','line_number':431,'multiline':False]['text':' We received CollectionUUIDMismatch but it does not contain the actual namespace, and','line_number':440,'multiline':False]['text':' we did not attempt to establish a cursor on the primary shard.','line_number':441,'multiline':False]['text':' Determine whether the cursor we may eventually register will be single- or multi-target.','line_number':448,'multiline':False]['text':' Only set skip, limit and sort to be applied to on the router for the multi-shard case. For','line_number':453,'multiline':False]['text':' the single-shard case skip/limit as well as sorts are appled on mongod.','line_number':454,'multiline':False]['text':' Transfer the established cursors to a ClusterClientCursor.','line_number':462,'multiline':False]['text':' Retrieve enough data from the ClusterClientCursor for the first batch of results.','line_number':466,'multiline':False]['text':' MaxTimeMS is expired in the router, but some remotes may still have outsanding requests.','line_number':472,'multiline':False]['text':' Wait for all remotes to expire their requests.','line_number':473,'multiline':False]['text':' Maximum number of 1ms sleeps to wait for remote cursors to be exhausted.','line_number':475,'multiline':False]['text':' Reveal the MaxTimeMSExpired error.','line_number':485,'multiline':False]['text':' This loop will load enough results from the shards for a full first batch.  At first, these','line_number':495,'multiline':False]['text':' results come from the initial batches that were obtained when establishing cursors, but','line_number':496,'multiline':False]['text':' ClusterClientCursor::next will fetch further results if necessary.','line_number':497,'multiline':False]['text':' We reached end-of-stream. If the cursor is not tailable, then we mark it as','line_number':506,'multiline':False]['text':' exhausted. If it is tailable, usually we keep it open (i.e. "NotExhausted") even','line_number':507,'multiline':False]['text':' when we reach end-of-stream. However, if all the remote cursors are exhausted, there','line_number':508,'multiline':False]['text':' is no hope of returning data and thus we need to close the mongos cursor as well.','line_number':509,'multiline':False]['text':' If adding this object will cause us to exceed the message size limit, then we stash it','line_number':518,'multiline':False]['text':' for later.','line_number':519,'multiline':False]['text':' Add doc to the batch.','line_number':525,'multiline':False]['text':' Fill out query exec properties.','line_number':537,'multiline':False]['text':' If the caller wants to know whether the cursor returned partial results, set it here.','line_number':541,'multiline':False]['text':' Missing results can come either from the first batches or from the ccc's later batches.','line_number':543,'multiline':False]['text':' If the cursor is exhausted, then there are no more results to return and we don't need to','line_number':548,'multiline':False]['text':' allocate a cursor id.','line_number':549,'multiline':False]['text':' Register the cursor with the cursor manager for subsequent getMore's.','line_number':560,'multiline':False]['text':' Record the cursorID in CurOp.','line_number':572,'multiline':False]['text':'*
 * Populates or re-populates some state of the OperationContext from what's stored on the cursor
 * and/or what's specified on the request.
 ','line_number':582,'multiline':True]['text':' Used to return "atClusterTime" in cursor replies to clients for snapshot reads.','line_number':594,'multiline':False]['text':' If the originating command had a 'comment' field, we extract it and set it on opCtx. Note','line_number':605,'multiline':False]['text':' that if the 'getMore' command itself has a 'comment' field, we give precedence to it.','line_number':606,'multiline':False]['text':' For tailable + awaitData cursors, the request may have indicated a maximum amount of time','line_number':614,'multiline':False]['text':' to wait for new data. If not, default it to 1 second.  We track the deadline instead via','line_number':615,'multiline':False]['text':' the 'waitForInsertsDeadline' decoration.','line_number':616,'multiline':False]['text':' Be sure to do this only for non-tailable cursors.','line_number':626,'multiline':False]['text':' namespace','line_number':633,'multiline':False]['text':' If the user supplied a 'partialResultsReturned' out-parameter, default it to false here.','line_number':644,'multiline':False]['text':' We must always have a BSONObj vector into which to output our results.','line_number':649,'multiline':False]['text':' Projection on the reserved sort key field is illegal in mongos.','line_number':653,'multiline':False]['text':' Attempting to establish a resumable query through mongoS is illegal.','line_number':661,'multiline':False]['text':' Try to generate a sample id for this query here instead of inside 'runQueryWithoutRetrying()'','line_number':667,'multiline':False]['text':' since it is incorrect to generate multiple sample ids for a single query.','line_number':668,'multiline':False]['text':' Evaluate let params once: not per shard, and not per retry.','line_number':672,'multiline':False]['text':' Re-target and re-send the initial find command to the shards until we have established the','line_number':678,'multiline':False]['text':' shard version.','line_number':679,'multiline':False]['text':' If the database doesn't exist, we successfully return an empty result set without','line_number':690,'multiline':False]['text':' creating a cursor.','line_number':691,'multiline':False]['text':' Check if there are no retries remaining, so the last received error can be','line_number':702,'multiline':False]['text':' propagated to the caller.','line_number':703,'multiline':False]['text':' Mark database entry in cache as stale.','line_number':717,'multiline':False]['text':' Reset the default global read timestamp so the retry's routing table reflects the','line_number':726,'multiline':False]['text':' chunk placement after the refresh (no-op if the transaction is not running with','line_number':727,'multiline':False]['text':' snapshot read concern).','line_number':728,'multiline':False]['text':' Check if there are no retries remaining, so the last received error can be','line_number':735,'multiline':False]['text':' propagated to the caller.','line_number':736,'multiline':False]['text':' Errors other than stale metadata or from trying to reach a non existent shard','line_number':747,'multiline':False]['text':' are fatal to the operation. Network errors and replication retries happen at','line_number':748,'multiline':False]['text':' the level of the AsyncResultsMerger.','line_number':749,'multiline':False]['text':' Reset the default global read timestamp so the retry's routing table reflects the','line_number':783,'multiline':False]['text':' chunk placement after the refresh (no-op if the transaction is not running with','line_number':784,'multiline':False]['text':' snapshot read concern).','line_number':785,'multiline':False]['text':'*
 * Validates that the lsid on the OperationContext matches that on the cursor, returning it to the
 * ClusterClusterCursor manager if it does not.
 ','line_number':795,'multiline':True]['text':'*
 * Validates that the txnNumber on the OperationContext matches that on the cursor, returning it to
 * the ClusterClusterCursor manager if it does not.
 ','line_number':825,'multiline':True]['text':'*
 * Validates that the OperationSessionInfo (i.e. txnNumber and lsid) on the OperationContext match
 * that stored on the cursor. The cursor is returned to the ClusterCursorManager if it does not.
 ','line_number':855,'multiline':True]['text':' Ensure that the client still has the privileges to run the originating command.','line_number':891,'multiline':False]['text':' Set the originatingCommand object and the cursorID in CurOp.','line_number':898,'multiline':False]['text':' If the 'failGetMoreAfterCursorCheckout' failpoint is enabled, throw an exception with the','line_number':910,'multiline':False]['text':' specified 'errorCode' value, or ErrorCodes::InternalError if 'errorCode' is omitted.','line_number':911,'multiline':False]['text':' If the 'waitAfterPinningCursorBeforeGetMoreBatch' fail point is enabled, set the 'msg'','line_number':926,'multiline':False]['text':' field of this operation's CurOp to signal that we've hit this point.','line_number':927,'multiline':False]['text':' If the 'waitWithPinnedCursorDuringGetMoreBatch' fail point is enabled, set the 'msg'','line_number':948,'multiline':False]['text':' field of this operation's CurOp to signal that we've hit this point.','line_number':949,'multiline':False]['text':' This exception is thrown when a $changeStream stage encounters an event','line_number':962,'multiline':False]['text':' that invalidates the cursor. We should close the cursor and return without','line_number':963,'multiline':False]['text':' error.','line_number':964,'multiline':False]['text':' This exception is thrown when a change-stream cursor is invalidated. Set the PBRT','line_number':968,'multiline':False]['text':' to the resume token of the invalidating event, and mark the cursor response as','line_number':969,'multiline':False]['text':' invalidated. We always expect to have ExtraInfo for this error code.','line_number':970,'multiline':False]['text':' Break to return partial results rather than return a MaxTimeMSExpired error','line_number':982,'multiline':False]['text':' We reached end-of-stream. If the cursor is not tailable, then we mark it as','line_number':994,'multiline':False]['text':' exhausted. If it is tailable, usually we keep it open (i.e. "NotExhausted") even when','line_number':995,'multiline':False]['text':' we reach end-of-stream. However, if all the remote cursors are exhausted, there is no','line_number':996,'multiline':False]['text':' hope of returning data and thus we need to close the mongos cursor as well.','line_number':997,'multiline':False]['text':' As soon as we get a result, this operation no longer waits.','line_number':1011,'multiline':False]['text':' Add doc to the batch.','line_number':1014,'multiline':False]['text':' Update the postBatchResumeToken. For non-$changeStream aggregations, this will be empty.','line_number':1018,'multiline':False]['text':' If the cursor has been exhausted, we will communicate this by returning a CursorId of zero.','line_number':1022,'multiline':False]['text':' For empty batches, or in the case where the final result was added to the batch rather than','line_number':1026,'multiline':False]['text':' being stashed, we update the PBRT here to ensure that it is the most recent available.','line_number':1027,'multiline':False]['text':' Set nReturned and whether the cursor has been exhausted.','line_number':1033,'multiline':False]['text':' Upon successful completion, transfer ownership of the cursor back to the cursor manager. If','line_number':1042,'multiline':False]['text':' the cursor has been exhausted, the cursor manager will clean it up for us.','line_number':1043,'multiline':False]['text':' namespace mongo','line_number':1068,'multiline':False]