['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Layers a simpler blocking interface on top of the AsyncResultsMerger from which this
 * BlockingResultsMerger is constructed.
 ','line_number':54,'multiline':True]['text':'*
     * Blocks until the next result is available or an error is detected.
     ','line_number':65,'multiline':True]['text':'*
     * Blocks until '_arm' has been killed, which involves cleaning up any remote cursors managed
     * by this results merger.
     ','line_number':102,'multiline':True]['text':'*
     * Awaits the next result from the ARM with no time limit.
     ','line_number':109,'multiline':True]['text':'*
     * Awaits the next result from the ARM up to the time limit specified on 'opCtx'. If this is the
     * user's initial find or we have already obtained at least one result for this batch, this
     * method returns EOF immediately rather than blocking.
     ','line_number':114,'multiline':True]['text':'*
     * Returns the next event to wait upon - either a new event from the ARM, or a valid preceding
     * event which we scheduled during the previous call to next().
     ','line_number':121,'multiline':True]['text':'*
     * Call the waitFn and return the result, yielding resources while waiting if necessary.
     * 'waitFn' may not throw.
     ','line_number':127,'multiline':True]['text':' In a case where we have a tailable, awaitData cursor, a call to 'next()' will block waiting','line_number':138,'multiline':False]['text':' for an event generated by '_arm', but may time out waiting for this event to be triggered.','line_number':139,'multiline':False]['text':' While it's waiting, the time limit for the 'awaitData' piece of the cursor may have been','line_number':140,'multiline':False]['text':' exceeded. When this happens, we use '_leftoverEventFromLastTimeout' to remember the old event','line_number':141,'multiline':False]['text':' and pick back up waiting for it on the next call to 'next()'.','line_number':142,'multiline':False]['text':' Provides interface for yielding and "unyielding" resources while waiting for results from','line_number':146,'multiline':False]['text':' the network. A value of nullptr implies that no such yielding or unyielding is necessary.','line_number':147,'multiline':False]['text':' namespace mongo','line_number':151,'multiline':False]