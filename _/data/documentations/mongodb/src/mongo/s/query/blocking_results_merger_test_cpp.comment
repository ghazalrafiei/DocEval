['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: no_include "cxxabi.h"','line_number':33,'multiline':False]['text':' Set the deadline to be two seconds in the future. We always test that the deadline','line_number':79,'multiline':False]['text':' expires, so there's no racing.','line_number':80,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':93,'multiline':False]['text':' Pass kGetMoreNoResultsYet so that the BRM will block and not just','line_number':95,'multiline':False]['text':' return an empty batch immediately.','line_number':96,'multiline':False]['text':' The timeout should hit, and return EOF.','line_number':99,'multiline':False]['text':' Wait for a bit. Hopefully the other thread will be waiting for the clock to advance.','line_number':103,'multiline':False]['text':' If not, we just advance the clock now, and when the other thread gets to that point','line_number':104,'multiline':False]['text':' it will see that "now" has passed the deadline.','line_number':105,'multiline':False]['text':' Answer the getMore, so that there are no more outstanding requests.','line_number':112,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':130,'multiline':False]['text':' Schedule the response to the getMore which will return the next result and mark the cursor as','line_number':139,'multiline':False]['text':' exhausted.','line_number':140,'multiline':False]['text':' Set the deadline to be two seconds in the future. We always test that the deadline','line_number':151,'multiline':False]['text':' expires, so there's no racing.','line_number':152,'multiline':False]['text':' Will schedule a getMore. No one will send a response in time, so will return EOF.','line_number':166,'multiline':False]['text':' Wait for a bit. Hopefully the other thread will be waiting for the clock to advance.','line_number':172,'multiline':False]['text':' If not, we just advance the clock now, and when the other thread gets to that point','line_number':173,'multiline':False]['text':' it will see that "now" has passed the deadline.','line_number':174,'multiline':False]['text':' Used for synchronizing the background thread with this thread.','line_number':180,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':184,'multiline':False]['text':' Block until the main thread has responded to the getMore.','line_number':186,'multiline':False]['text':' Schedule the response to the getMore which will return the next result and mark the cursor as','line_number':194,'multiline':False]['text':' exhausted.','line_number':195,'multiline':False]['text':' Unblock the other thread, allowing it to call next() on the BlockingResultsMerger.','line_number':202,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':216,'multiline':False]['text':' Sleep to allow the blockingMerger.next() thread to started.  If the thread is not started','line_number':222,'multiline':False]['text':' even after the sleep, then it's the same test as ShouldBeInterruptibleBeforeBlockingNext.','line_number':223,'multiline':False]['text':' Now mark the OperationContext as killed from this thread.','line_number':226,'multiline':False]['text':' Wait for the merger to be interrupted.','line_number':231,'multiline':False]['text':' Now that we've seen it interrupted, kill it. We have to do this in another thread because','line_number':234,'multiline':False]['text':' killing a BlockingResultsMerger involves running a killCursors, and this main thread is in','line_number':235,'multiline':False]['text':' charge of scheduling the response to that request.','line_number':236,'multiline':False]['text':' Wait for the kill to schedule it's killCursors. It may schedule a getMore first before','line_number':239,'multiline':False]['text':' cancelling it, so wait until the pending request is actually a killCursors.','line_number':240,'multiline':False]['text':' Run the callback for the killCursors. We don't actually inspect the value so we don't have to','line_number':244,'multiline':False]['text':' schedule a response.','line_number':245,'multiline':False]['text':' Mark the OperationContext as killed from this thread.','line_number':258,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':264,'multiline':False]['text':' Wait for the merger to be interrupted.','line_number':270,'multiline':False]['text':' Kill should complete.','line_number':273,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':295,'multiline':False]['text':' Make sure that the next() call throws correctly.','line_number':297,'multiline':False]['text':' Schedule the response to the getMore which will return the next result and mark the cursor as','line_number':302,'multiline':False]['text':' exhausted.','line_number':303,'multiline':False]['text':' Issue a blocking wait for the next result asynchronously on a different thread.','line_number':331,'multiline':False]['text':' Make sure that the next() call throws correctly.','line_number':333,'multiline':False]['text':' Schedule the response to the getMore which will return the next result and mark the cursor as','line_number':338,'multiline':False]['text':' exhausted.','line_number':339,'multiline':False]['text':' namespace','line_number':349,'multiline':False]['text':' namespace mongo','line_number':350,'multiline':False]