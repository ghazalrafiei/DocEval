['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Maximum number of retries for network and replication NotPrimary errors (per host).','line_number':68,'multiline':False]['text':'*
 * Returns the sort key out of the $sortKey metadata field in 'obj'. The sort key should be
 * formatted as an array with one value per field of the sort pattern:
 *  {..., $sortKey: [<firstSortKeyComponent>, <secondSortKeyComponent>, ...], ...}
 *
 * This function returns the sort key not as an array, but as the equivalent BSONObj:
 *   {"0": <firstSortKeyComponent>, "1": <secondSortKeyComponent>}
 *
 * The return value is allowed to omit the key names, so the caller should not rely on the key names
 * being present. That is, the return value could consist of an object such as
 *   {"": <firstSortKeyComponent>, "": <secondSortKeyComponent>}
 *
 * If 'compareWholeSortKey' is true, then the value inside the $sortKey is directly interpreted as a
 * single-element sort key. For example, given the document
 *   {..., $sortKey: <value>, ...}
 * and 'compareWholeSortKey'=true, this function will return
 *   {"": <value>}
 ','line_number':71,'multiline':True]['text':'*
 * Returns an int less than 0 if 'leftSortKey' < 'rightSortKey', 0 if the two are equal, and an int
 * > 0 if 'leftSortKey' > 'rightSortKey' according to the pattern 'sortKeyPattern'.
 ','line_number':99,'multiline':True]['text':' This does not need to sort with a collator, since mongod has already mapped strings to their','line_number':104,'multiline':False]['text':' ICU comparison keys as part of the $sortKey meta projection.','line_number':105,'multiline':False]['text':' 'considerFieldNames' flag is not set.','line_number':106,'multiline':False]['text':' namespace','line_number':110,'multiline':False]['text':' This strange initialization is to work around the fact that the IDL does not currently','line_number':118,'multiline':False]['text':' support a default value for an enum. The default tailable mode should be 'kNormal', but','line_number':119,'multiline':False]['text':' since that is not supported we treat boost::none (unspecified) to mean 'kNormal'.','line_number':120,'multiline':False]['text':' A remote cannot be flagged as 'partialResultsReturned' if 'allowPartialResults' is false.','line_number':136,'multiline':False]['text':' For the first batch, cursor should never be invalidated.','line_number':139,'multiline':False]['text':' We don't check the return value of _addBatchToBuffer here; if there was an error,','line_number':145,'multiline':False]['text':' it will be stored in the remote and the first call to ready() will return true.','line_number':146,'multiline':False]['text':' If this is a change stream, then we expect to have already received PBRTs from every shard.','line_number':150,'multiline':False]['text':' If we do not have any minimum promised sort keys, this is not a change stream. Return early.','line_number':156,'multiline':False]['text':' Find the minimum promised sort key whose remote is eligible to contribute a high water mark.','line_number':160,'multiline':False]['text':' We should always be guaranteed to find an eligible remote, if this is a change stream.','line_number':167,'multiline':False]['text':' If any remote has been invalidated, we must force the batch-building code to make another','line_number':183,'multiline':False]['text':' attempt to retrieve more results. This will (correctly) throw via _assertNotInvalidated.','line_number':184,'multiline':False]['text':' For sorted tailable awaitData cursors on multiple shards, cap the getMore timeout at 1000ms.','line_number':201,'multiline':False]['text':' This is to ensure that we get a continuous stream of updates from each shard with their most','line_number':202,'multiline':False]['text':' recent optimes, which allows us to return sorted $changeStream results even if some shards','line_number':203,'multiline':False]['text':' are yet to provide a batch of data. If the timeout specified by the client is greater than','line_number':204,'multiline':False]['text':' 1000ms, then it will be enforced elsewhere.','line_number':205,'multiline':False]['text':' If we were about ready to return a boost::none because a tailable cursor reached the end of','line_number':221,'multiline':False]['text':' the batch, that should no longer apply to the next use - when we are reattached to a','line_number':222,'multiline':False]['text':' different OperationContext, it signals that the caller is ready for a new batch, and wants us','line_number':223,'multiline':False]['text':' to request a new batch from the tailable cursor.','line_number':224,'multiline':False]['text':' Create a new entry in the '_remotes' list for each new shard, and add the first cursor batch','line_number':236,'multiline':False]['text':' to its buffer. This ensures the shard's initial high water mark is respected, if it exists.','line_number':237,'multiline':False]['text':' Take the lock to guard against shard additions or disconnections.','line_number':256,'multiline':False]['text':' If 'allowPartialResults' is false, the number of participating remotes is constant.','line_number':259,'multiline':False]['text':' Otherwise, discount remotes which failed to connect or disconnected prematurely.','line_number':263,'multiline':False]['text':' At this point, the high water mark may be the resume token of the last document we returned.','line_number':271,'multiline':False]['text':' If no further results are eligible for return, we advance to the minimum promised sort key.','line_number':272,'multiline':False]['text':' If the remote associated with the minimum promised sort key is not currently eligible to','line_number':273,'multiline':False]['text':' provide a high water mark, then we do not advance even if no further results are ready.','line_number':274,'multiline':False]['text':' The high water mark is stored in sort-key format: {"": <high watermark>}. We only return','line_number':280,'multiline':False]['text':' the <high watermark> part of of the sort key, which looks like {_data: ..., _typeBits: ...}.','line_number':281,'multiline':False]['text':' We cannot return the minimum promised sort key unless all shards have reported one.','line_number':288,'multiline':False]['text':' Mark this operation as ready to return boost::none due to reaching the end of a batch of','line_number':299,'multiline':False]['text':' results from a tailable cursor.','line_number':300,'multiline':False]['text':' First check whether any of the remotes reported an error.','line_number':305,'multiline':False]['text':' Tailable non-awaitData cursors cannot have a sort.','line_number':319,'multiline':False]['text':' We should always have a minPromisedSortKey from every shard in the sorted tailable case.','line_number':340,'multiline':False]['text':' Tailable non-awaitData cursors cannot have a sort.','line_number':381,'multiline':False]['text':' Re-populate the merging queue with the next result from 'smallestRemote', if it has a','line_number':397,'multiline':False]['text':' next result.','line_number':398,'multiline':False]['text':' For sorted tailable awaitData cursors, update the high water mark to the document's sort key.','line_number':403,'multiline':False]['text':' It is illegal to call this method if there is an error received from any shard.','line_number':417,'multiline':False]['text':' The cursor is tailable and we're about to return the last buffered result. This','line_number':426,'multiline':False]['text':' means that the next value returned should be boost::none to indicate the end of','line_number':427,'multiline':False]['text':' the batch.','line_number':428,'multiline':False]['text':' Nothing from the current remote so move on to the next one.','line_number':435,'multiline':False]['text':' If mongod returned less docs than the requested batchSize then modify the next getMore','line_number':451,'multiline':False]['text':' request to fetch the remaining docs only. If the remote node has a plan with OR for top k and','line_number':452,'multiline':False]['text':' a full sort as is the case for the OP_QUERY find then this optimization will prevent','line_number':453,'multiline':False]['text':' switching to the full sort plan branch.','line_number':454,'multiline':False]['text':' Before scheduling more work, check whether the cursor has been invalidated.','line_number':512,'multiline':False]['text':' Reveal opCtx errors (such as MaxTimeMSExpired) and reflect them in the remote status.','line_number':515,'multiline':False]['text':' Schedule remote work on hosts for which we need more results.','line_number':527,'multiline':False]['text':' If this remote is not exhausted and there is no outstanding request for it, schedule','line_number':537,'multiline':False]['text':' work to retrieve the next batch.','line_number':538,'multiline':False]['text':'
 * Note: When nextEvent() is called to do retries, only the remotes with retriable errors will
 * be rescheduled because:
 *
 * 1. Other pending remotes still have callback assigned to them.
 * 2. Remotes that already has some result will have a non-empty buffer.
 * 3. Remotes that reached maximum retries will be in 'exhausted' state.
 ','line_number':548,'multiline':True]['text':' Can't schedule further network operations if the ARM is being killed.','line_number':560,'multiline':False]['text':' We can't make a new event if there's still an unsignaled one, as every event must','line_number':566,'multiline':False]['text':' eventually be signaled.','line_number':567,'multiline':False]['text':' It's possible that after we told the caller we had no ready results but before we replaced','line_number':584,'multiline':False]['text':' _currentEvent with a new event, new results became available. In this case we have to signal','line_number':585,'multiline':False]['text':' the new event right away to propagate the fact that the previous event had been signaled to','line_number':586,'multiline':False]['text':' the new event.','line_number':587,'multiline':False]['text':' If we get a non-zero cursor id that is not equal to the established cursor id, we will fail','line_number':611,'multiline':False]['text':' the operation.','line_number':612,'multiline':False]['text':' Update the cursorId; it is sent as '0' when the cursor has been exhausted on the shard.','line_number':625,'multiline':False]['text':' If the response indicates that the cursor has been invalidated, mark the corresponding','line_number':629,'multiline':False]['text':' remote as invalidated. This also signifies that the shard cursor has been closed.','line_number':630,'multiline':False]['text':' We only expect to see this for change streams.','line_number':637,'multiline':False]['text':' The postBatchResumeToken should never be empty.','line_number':642,'multiline':False]['text':' Note that the PBRT is an object of format {_data: ..., _typeBits: ...} that we must wrap','line_number':645,'multiline':False]['text':' in a sort key so that it can compare correctly with sort keys from other streams.','line_number':646,'multiline':False]['text':' Determine whether the new batch is eligible to provide a high water mark resume token.','line_number':649,'multiline':False]['text':' The most recent minimum sort key should never be smaller than the previous promised','line_number':653,'multiline':False]['text':' minimum sort key for this remote, if a previous promised minimum sort key exists.','line_number':654,'multiline':False]['text':' If the cursor is not on the "config.shards" namespace, then it is a normal shard cursor.','line_number':669,'multiline':False]['text':' These cursors are always eligible to provide a high water mark resume token.','line_number':670,'multiline':False]['text':' If we are here, the cursor is on the "config.shards" namespace. This is an internal cursor','line_number':675,'multiline':False]['text':' which monitors for the addition of new shards. There are two special cases which we must','line_number':676,'multiline':False]['text':' handle for this cursor:','line_number':677,'multiline':False]['text':'','line_number':678,'multiline':False]['text':'   - The user specified a 'startAtOperationTime' in the future. This is a problem because the','line_number':679,'multiline':False]['text':'     config cursor must always be opened at the current clusterTime, to ensure that it detects','line_number':680,'multiline':False]['text':'     all shards that are added after the change stream is dispatched. We must make sure that','line_number':681,'multiline':False]['text':'     the high water mark ignores the config cursor's minimum promised sort keys, otherwise we','line_number':682,'multiline':False]['text':'     will end up returning a token that is earlier than the start time requested by the user.','line_number':683,'multiline':False]['text':'','line_number':684,'multiline':False]['text':'   - The cursor returns a "shard added" event. All events produced by the config cursor are','line_number':685,'multiline':False]['text':'     handled and swallowed internally by the stream. We therefore do not want to allow their','line_number':686,'multiline':False]['text':'     resume tokens to be exposed to the user via the postBatchResumeToken mechanism, since','line_number':687,'multiline':False]['text':'     these token are not actually resumable. See SERVER-47810 for further details.','line_number':688,'multiline':False]['text':' If the current high water mark is ahead of the config cursor, it implies that the client has','line_number':690,'multiline':False]['text':' opened a stream with a startAtOperationTime in the future. We should hold the high water mark','line_number':691,'multiline':False]['text':' at the user-specified start time until the config server catches up to it. The config cursor','line_number':692,'multiline':False]['text':' is therefore not eligible to provide a new high water mark.','line_number':693,'multiline':False]['text':' If the config server returns an event which indicates a change in the cluster topology, it','line_number':697,'multiline':False]['text':' will be swallowed by the stream. It will not be returned to the user, and it should not be','line_number':698,'multiline':False]['text':' eligible to become the high water mark either.','line_number':699,'multiline':False]['text':' If we are here, then the only remaining reason not to mark this batch as eligible is if the','line_number':703,'multiline':False]['text':' current batch's sort key is the same as the last batch's, and the last batch was ineligible.','line_number':704,'multiline':False]['text':' Therefore, if the previous batch was eligible, this batch is as well.','line_number':705,'multiline':False]['text':' If we are here, then either the last batch we received was ineligible for one of the reasons','line_number':709,'multiline':False]['text':' outlined above, or this is the first batch we have ever received for this cursor. If this is','line_number':710,'multiline':False]['text':' the first batch, then we always mark the config cursor as ineligible so that the initial high','line_number':711,'multiline':False]['text':' water mark will be taken from one of the shards instead. If we received an ineligible batch','line_number':712,'multiline':False]['text':' last time, then the current batch is only eligible if its sort key is greater than the last.','line_number':713,'multiline':False]['text':' Got a response from remote, so indicate we are no longer waiting for one.','line_number':721,'multiline':False]['text':'  On shutdown, there is no need to process the response.','line_number':724,'multiline':False]['text':' First, wake up anyone waiting on '_currentEvent'.','line_number':726,'multiline':False]['text':' Wake up anyone waiting on '_currentEvent'.','line_number':735,'multiline':False]['text':' If this is the last callback to run then we are ready to free the ARM. We signal the','line_number':741,'multiline':False]['text':' '_killCompleteInfo', which the caller of kill() may be waiting on.','line_number':742,'multiline':False]['text':' Unreachable host errors are swallowed if the 'allowPartialResults' option is set. We','line_number':754,'multiline':False]['text':' remove the unreachable host entirely from consideration by marking it as exhausted.','line_number':755,'multiline':False]['text':'','line_number':756,'multiline':False]['text':' The ExchangePassthrough error code is an internal-only error code used specifically to','line_number':757,'multiline':False]['text':' communicate that an error has occurred, but some other thread is responsible for returning','line_number':758,'multiline':False]['text':' the error to the user. In order to avoid polluting the user's error message, we ignore such','line_number':759,'multiline':False]['text':' errors with the expectation that all outstanding cursors will be closed promptly.','line_number':760,'multiline':False]['text':' Clear the results buffer and cursor id, and set 'partialResultsReturned' if appropriate.','line_number':762,'multiline':False]['text':' Update the cursorId; it is sent as '0' when the cursor has been exhausted on the shard.','line_number':790,'multiline':False]['text':' Save the batch in the remote's buffer.','line_number':793,'multiline':False]['text':' If the cursor is tailable and we just received an empty batch, the next return value should','line_number':798,'multiline':False]['text':' be boost::none in order to indicate the end of the batch. We do not ask for the next batch if','line_number':799,'multiline':False]['text':' the cursor is tailable, as batches received from remote tailable cursors should be passed','line_number':800,'multiline':False]['text':' through to the client as-is.','line_number':801,'multiline':False]['text':' (Note: tailable cursors are only valid on unsharded collections, so the end of the batch from','line_number':802,'multiline':False]['text':' one shard means the end of the overall batch).','line_number':803,'multiline':False]['text':' If this is normal or tailable-awaitData cursor and we still don't have anything buffered','line_number':808,'multiline':False]['text':' after receiving this batch, we can schedule work to retrieve the next batch right away.','line_number':809,'multiline':False]['text':' Be careful only to do this when '_opCtx' is non-null, since it is illegal to schedule a','line_number':810,'multiline':False]['text':' remote command on a user's behalf without a non-null OperationContext.','line_number':811,'multiline':False]['text':' If there's a sort, we're expecting the remote node to have given us back a sort key.','line_number':822,'multiline':False]['text':' If we're doing a sorted merge, then we have to make sure to put this remote onto the merge','line_number':845,'multiline':False]['text':' queue.','line_number':846,'multiline':False]['text':' To prevent ourselves from signalling the event twice, we set '_currentEvent' as','line_number':855,'multiline':False]['text':' invalid after signalling it.','line_number':856,'multiline':False]['text':' The 'RemoteCommandRequest' takes the remaining time from the 'opCtx' parameter. If','line_number':888,'multiline':False]['text':' the cursor was killed due to a maxTimeMs timeout, the remaining time will be 0, and','line_number':889,'multiline':False]['text':' the remote request will not be sent. To avoid this, we remove the timeout for the','line_number':890,'multiline':False]['text':' remote 'killCursor' command.','line_number':891,'multiline':False]['text':' Send kill request; discard callback handle, if any, or failure report, if not.','line_number':894,'multiline':False]['text':' Create "_killCompleteInfo", which we will signal as soon as all of our callbacks have','line_number':918,'multiline':False]['text':' finished running.','line_number':919,'multiline':False]['text':' Signal the future right now, as there's nothing to wait for.','line_number':926,'multiline':False]['text':' Cancel all of our callbacks. Once they all complete, the event will be signaled.','line_number':931,'multiline':False]['text':'','line_number':940,'multiline':False]['text':' AsyncResultsMerger::RemoteCursorData','line_number':941,'multiline':False]['text':'','line_number':942,'multiline':False]['text':' If the 'partialResultsReturned' flag is set, the cursorId must be zero (closed).','line_number':952,'multiline':False]['text':'','line_number':968,'multiline':False]['text':' AsyncResultsMerger::MergingComparator','line_number':969,'multiline':False]['text':'','line_number':970,'multiline':False]['text':' namespace mongo','line_number':987,'multiline':False]