['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This class wraps logic for establishing cursors using a MultiStatementTransactionRequestsSender.
 ','line_number':85,'multiline':True]['text':'*
     * Make a RequestSender and thus send requests.
     ','line_number':104,'multiline':True]['text':'*
     * Wait for a single response via the RequestSender.
     ','line_number':111,'multiline':True]['text':'*
     * Wait for all responses via the RequestSender.
     ','line_number':116,'multiline':True]['text':'*
     * If any request received a non-retriable error response and partial results are not allowed,
     * cancel any requests that may have succeeded and throw the first such error encountered.
     ','line_number':125,'multiline':True]['text':'*
     * Take all cursors currently tracked by the CursorEstablsher.
     ','line_number':131,'multiline':True]['text':'*
     * Favors the status with 'CollectionUUIDMismatch' error to be saved in '_maybeFailure' to be
     * returned to caller.
     ','line_number':146,'multiline':True]['text':' Callers may provide an array of OperationKeys already included in the given requests and','line_number':157,'multiline':False]['text':' those will be used to clean up cursors on failure, otherwise one key will be generated and','line_number':158,'multiline':False]['text':' appended to all requests.','line_number':159,'multiline':False]['text':' Construct the requests','line_number':174,'multiline':False]['text':' TODO SERVER-47261 management of the opKey should move to the ARS.','line_number':177,'multiline':False]['text':' Caller provided their own keys so skip appending the default key.','line_number':180,'multiline':False]['text':' Send the requests','line_number':204,'multiline':False]['text':' Note the shardHostAndPort may not be populated if there was an error, so be sure','line_number':220,'multiline':False]['text':' to do this after parsing the cursor response to ensure the response was ok.','line_number':221,'multiline':False]['text':' Additionally, be careful not to push into 'remoteCursors' until we are sure we','line_number':222,'multiline':False]['text':' have a valid cursor, since the error handling path will attempt to clean up','line_number':223,'multiline':False]['text':' anything in 'remoteCursors'','line_number':224,'multiline':False]['text':' If we never got a valid cursor, we do not need to clean the host.','line_number':243,'multiline':False]['text':' Schedule killOperations against all cursors that were established. Make sure to','line_number':252,'multiline':False]['text':' capture arguments by value since the cleanup work may get scheduled after','line_number':253,'multiline':False]['text':' returning from this function.','line_number':254,'multiline':False]['text':' If we saw no failures, there is nothing to do.','line_number':277,'multiline':False]['text':' If we don't have any remotes to clean, throw early.','line_number':287,'multiline':False]['text':' Filter out duplicate hosts.','line_number':291,'multiline':False]['text':' Throw our failure.','line_number':300,'multiline':False]['text':' Favor 'CollectionUUIDMismatchError' that has a non empty 'actualNamespace'.','line_number':317,'multiline':False]['text':' If '_allowPartialResults' is true then swallow retriable errors, maxTimeMSExpired, and','line_number':334,'multiline':False]['text':' FailedToSatisfyReadPreference errors we might get when targeting shard replica sets.','line_number':335,'multiline':False]['text':' This exception is eligible to be swallowed. Add an entry with a cursorID of 0, an','line_number':340,'multiline':False]['text':' empty HostAndPort, and which has the 'partialResultsReturned' flag set to true.','line_number':341,'multiline':False]['text':' Do not schedule any new requests.','line_number':356,'multiline':False]['text':' We do not process the response to the killOperations request (we make a good-faith','line_number':384,'multiline':False]['text':' attempt at cleaning up the cursors, but ignore any returned errors).','line_number':385,'multiline':False]['text':'*
 * Returns a copy of 'cmdObj' with the $readPreference mode set to secondaryPreferred.
 ','line_number':400,'multiline':True]['text':' namespace','line_number':411,'multiline':False]['text':' Attach our OperationKey to a request. This will allow us to kill any outstanding','line_number':413,'multiline':False]['text':' requests in case we're interrupted or one of the remotes returns an error. Note that although','line_number':414,'multiline':False]['text':' the opCtx may have an OperationKey set on it already, do not inherit it here because we may','line_number':415,'multiline':False]['text':' target ourselves which implies the same node receiving multiple operations with the same','line_number':416,'multiline':False]['text':' opKey.','line_number':417,'multiline':False]['text':' We do not process the response to the killCursors request (we make a good-faith','line_number':453,'multiline':False]['text':' attempt at cleaning up the cursors, but ignore any returned errors).','line_number':454,'multiline':False]['text':' Get the host/port of every node in each shard.','line_number':463,'multiline':False]['text':' Operation key will allow us to kill any outstanding requests in case we're interrupted.','line_number':488,'multiline':False]['text':' Secondaries will reject aggregation commands with a default read preference (primary). The','line_number':489,'multiline':False]['text':' actual semantics of read preference don't make as much sense when broadcasting to all','line_number':490,'multiline':False]['text':' shards, but we will set read preference to 'nearest' since it does not imply preference for','line_number':491,'multiline':False]['text':' primary or secondary.','line_number':492,'multiline':False]['text':' namespace mongo','line_number':555,'multiline':False]