['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Maximum number of retries for network and replication NotPrimary errors (per host).','line_number':69,'multiline':False]['text':' namespace','line_number':74,'multiline':False]['text':' Initialize command metadata to handle the read preference.','line_number':94,'multiline':False]['text':' Kick off requests immediately.','line_number':99,'multiline':False]['text':' If we've been interrupted, the response queue should be filled with interrupted answers, go','line_number':127,'multiline':False]['text':' ahead and return one of those','line_number':128,'multiline':False]['text':' Try to pop a value from the queue','line_number':133,'multiline':False]['text':' Calculating the total wait time for remote operations relies on the CurOp's timing','line_number':140,'multiline':False]['text':' measurement facility and we can't use such facility when the current operation is marked','line_number':141,'multiline':False]['text':' as done. Some commands such as 'analyzeShardKey' command may send remote operations using','line_number':142,'multiline':False]['text':' AsyncRequestsSender even after marking the current operation done and so we need to check','line_number':143,'multiline':False]['text':' whether the current operation is still in progress.','line_number':144,'multiline':False]['text':' Only wait for the next result without popping it, so an error unyielding doesn't','line_number':149,'multiline':False]['text':' discard an already popped response.','line_number':150,'multiline':False]['text':' There should always be a response ready after the wait above.','line_number':162,'multiline':False]['text':' If we're interrupted, save that value and overwrite all outstanding requests (that we're','line_number':167,'multiline':False]['text':' not going to wait to collect)','line_number':168,'multiline':False]['text':' Make failed responses for all outstanding remotes with the interruption status and push them','line_number':172,'multiline':False]['text':' onto the response queue','line_number':173,'multiline':False]['text':' Stop servicing callbacks','line_number':180,'multiline':False]['text':' shutdown the scoped task executor','line_number':183,'multiline':False]['text':' We have to make a promise future pair because the TaskExecutor doesn't currently support a','line_number':279,'multiline':False]['text':' future returning variant of scheduleRemoteCommand','line_number':280,'multiline':False]['text':' Failures to schedule skip the retry loop','line_number':283,'multiline':False]['text':' We have to make a shared_ptr<Promise> here because scheduleRemoteCommand requires','line_number':286,'multiline':False]['text':' copyable callbacks','line_number':287,'multiline':False]['text':' If we're okay (RemoteCommandResponse, command result and write concern)-wise we're done.','line_number':312,'multiline':False]['text':' Otherwise check for retryability','line_number':313,'multiline':False]['text':' There was an error with either the response or the command.','line_number':318,'multiline':False]['text':' retry through recursion','line_number':342,'multiline':False]['text':' Status' in the response.status field that aren't retried get converted to top level','line_number':346,'multiline':False]['text':' errors','line_number':347,'multiline':False]['text':' We're not okay (on the remote), but still not going to retry','line_number':350,'multiline':False]['text':' namespace mongo','line_number':356,'multiline':False]