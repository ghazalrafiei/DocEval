['text':'*
 *    Copyright (C) 2019-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Disabling these tests since this causes jstest failures when','line_number':58,'multiline':False]['text':' running on a host with a mixed case hostname.','line_number':59,'multiline':False]['text':' TEST(ServerDescriptionTest, ShouldNormalizeAddress) {','line_number':60,'multiline':False]['text':'    ServerDescription a("foo:1234");','line_number':61,'multiline':False]['text':'    ServerDescription b("FOo:1234");','line_number':62,'multiline':False]['text':'    ASSERT_EQUALS(a.getAddress(), b.getAddress());','line_number':63,'multiline':False]['text':'}','line_number':64,'multiline':False]['text':' Note: The SDAM specification does not prescribe how to compare server descriptions with','line_number':73,'multiline':False]['text':' different addresses for equality. We choose that two descriptions are considered equal if','line_number':74,'multiline':False]['text':' their addresses are different.','line_number':75,'multiline':False]['text':' returns a set containing the elements in the given bson array with lowercase values.','line_number':226,'multiline':False]['text':' No "msg: isdbgrid", no setName, and no "isreplicaset: true".','line_number':317,'multiline':False]['text':' contains "msg: isdbgrid"','line_number':324,'multiline':False]['text':' "isWritablePrimary: true", "setName" in response','line_number':331,'multiline':False]['text':' "secondary: true", "setName" in response','line_number':338,'multiline':False]['text':' "arbiterOnly: true", "setName" in response.','line_number':345,'multiline':False]['text':' "hidden: true", "setName" in response, or not primary, secondary, nor arbiter','line_number':352,'multiline':False]['text':' "isreplicaset: true" in response.','line_number':359,'multiline':False]['text':' Simulate a non-ping monitoring response.','line_number':386,'multiline':False]['text':' Check the RTT is unchanged since the HelloOutcome does not contain an RTT.','line_number':393,'multiline':False]['text':' assert the value does not decay to zero','line_number':421,'multiline':False]['text':' Disabling these tests since this causes jstest failures when','line_number':448,'multiline':False]['text':' running on a host with a mixed case hostname.','line_number':449,'multiline':False]['text':' TEST_F(ServerDescriptionTestFixture, ShouldStoreHostNamesAsLowercase) {','line_number':450,'multiline':False]['text':'    auto response = HelloOutcome(HostAndPort("FOO:1234"), kBsonHostNames,','line_number':451,'multiline':False]['text':'    duration_cast<HelloRTT>(mongo::Milliseconds(40)));','line_number':452,'multiline':False]['text':'    auto description = ServerDescription(clockSource, response);','line_number':453,'multiline':False]['text':'','line_number':454,'multiline':False]['text':'    ASSERT_EQUALS("foo:1234", description.getAddress());','line_number':455,'multiline':False]['text':'','line_number':456,'multiline':False]['text':'    ASSERT_EQUALS(boost::to_lower_copy(std::string(kBsonHostNames.getStringField("me"))),','line_number':457,'multiline':False]['text':'                  *description.getMe());','line_number':458,'multiline':False]['text':'','line_number':459,'multiline':False]['text':'    auto expectedHosts = toHostSet(kBsonHostNames.getField("hosts").Array());','line_number':460,'multiline':False]['text':'    ASSERT_EQUALS(expectedHosts, description.getHosts());','line_number':461,'multiline':False]['text':'','line_number':462,'multiline':False]['text':'    auto expectedPassives = toHostSet(kBsonHostNames.getField("passives").Array());','line_number':463,'multiline':False]['text':'    ASSERT_EQUALS(expectedPassives, description.getPassives());','line_number':464,'multiline':False]['text':'','line_number':465,'multiline':False]['text':'    auto expectedArbiters = toHostSet(kBsonHostNames.getField("arbiters").Array());','line_number':466,'multiline':False]['text':'    ASSERT_EQUALS(expectedArbiters, description.getArbiters());','line_number':467,'multiline':False]['text':'}','line_number':468,'multiline':False]['text':'lastRtt','line_number':531,'multiline':True]['text':' namespace mongo::sdam','line_number':581,'multiline':False]