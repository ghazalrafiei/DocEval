['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':58,'multiline':False]['text':'*
 * Returns the database name portion of an ns std::string.
 ','line_number':83,'multiline':True]['text':'*
 * Returns the collection name portion of an ns std::string.
 ','line_number':88,'multiline':True]['text':'*
 * Allows callers of the internal client 'find()' API below to request an exhaust cursor.
 *
 * Such cursors use a special OP_MSG facility under the hood. When exhaust is requested, the server
 * writes the full results of the query into the socket (split into getMore batches), without
 * waiting for explicit getMore requests from the client.
 ','line_number':93,'multiline':True]['text':'*
 * Abstract class that implements the core db operations.
 ','line_number':102,'multiline':True]['text':'*
     * Reconnect if needed and allowed.
     ','line_number':125,'multiline':True]['text':'*
     * If not checked recently, checks whether the underlying socket/sockets are still valid.
     ','line_number':130,'multiline':True]['text':'*
     * Returns true if this connection is currently in a failed state.
     ','line_number':139,'multiline':True]['text':'*
     * Returns true in isPrimary param if this db is the current primary of a replica pair.
     *
     * Pass in info for more details e.g.:
     *   { "isprimary" : 1.0 , "msg" : "not paired" , "ok" : 1.0  }
     *
     * Returns true if command invoked successfully.
     ','line_number':154,'multiline':True]['text':'*
     * Returns the latest operationTime tracked on this client.
     ','line_number':175,'multiline':True]['text':'*
     * Sets a RequestMetadataWriter on this connection.
     *
     * TODO: support multiple metadata writers.
     ','line_number':182,'multiline':True]['text':'*
     * Gets the RequestMetadataWriter that is set on this connection. This may be an uninitialized
     * std::function, so it should be checked for validity with operator bool() first.
     ','line_number':189,'multiline':True]['text':'*
     * Sets a ReplyMetadataReader on this connection.
     *
     * TODO: support multiple metadata readers.
     ','line_number':195,'multiline':True]['text':'*
     * Gets the ReplyMetadataReader that is set on this connection. This may be an uninitialized
     * std::function, so it should be checked for validity with operator bool() first.
     ','line_number':202,'multiline':True]['text':'*
     * Parses command replies and runs them through the metadata reader.
     * This is virtual and non-const to allow subclasses to act on failures.
     ','line_number':208,'multiline':True]['text':'*
     * Runs the specified command request.
     ','line_number':215,'multiline':True]['text':'*
     * This shared_ptr overload is used to possibly return a shared_ptr to the replica set member
     * that the command was dispatched to. It's needed if the caller needs a lifetime for that
     * connection that extends beyond the lifetime, or subsequent calls, against the top level
     * client.
     *
     * It has this slightly insane api because:
     * + we don't want to thread enable_shared_from_this pervasively through the dbclient tree
     * + we use this from places we don't want to know about dbclient_rs (and so don't know if we'll
     *   get our own ptr back).
     * + the only caller who needs this is the shell (because other callers have more control over
     *   lifetime).
     ','line_number':220,'multiline':True]['text':'*
     * Runs the specified command request. This thin wrapper just unwraps the reply and ignores the
     * target connection from the above runCommandWithTarget().
     ','line_number':236,'multiline':True]['text':'*
     * Runs the specified command request in fire-and-forget mode and returns the connection that
     * the command was actually sent on. If the connection doesn't support OP_MSG, the request will
     * be run as a normal two-way command and the reply will be ignored after parsing.
     ','line_number':244,'multiline':True]['text':'*
     * Runs a database command. Database commands are represented as BSON objects. Common database
     * commands have prebuilt helper functions -- see below. If a helper is not available you can
     * directly call runCommand.
     *
     *  'dbName': Database name. Use "admin" for global administrative commands.
     *  'cmd': The command object to execute. For example, { hello : 1 }.
     *  'info': The result object the database returns. Typically has { ok : ..., errmsg : ... }
     *          fields set.
     *  'options': See enum QueryOptions - normally not needed to run a command.
     *
     *  Returns true if the command returned "ok".
     ','line_number':251,'multiline':True]['text':'
     * Wraps up the runCommand function avove, but returns the DBClient that actually ran the
     * command. When called against a replica set, this will return the specific replica set member
     * the command ran against.
     *
     * This is used in the shell so that cursors can send getMore through the correct connection.
     ','line_number':266,'multiline':True]['text':'*
     * See the opMsg overload comment for why this function takes a shared_ptr ostensibly to this.
     ','line_number':278,'multiline':True]['text':'*
     * Authenticates to another cluster member using appropriate authentication data.
     * Throws an exception if authentication fails.
     ','line_number':288,'multiline':True]['text':'*
     * Authenticates a user.
     *
     * The 'params' BSONObj should be initialized with some of the fields below. Which fields
     * are required depends on the mechanism, which is mandatory.
     *
     *  'mechanism': The std::string name of the sasl mechanism to use. Mandatory.
     *  'user': The std::string name of the user to authenticate. Mandatory.
     *  'db': The database target of the auth command, which identifies the location
     *        of the credential information for the user. May be "$external" if
     *        credential information is stored outside of the mongo cluster. Mandatory.
     *  'pwd': The password data.
     *  'serviceName': The GSSAPI service name to use. Defaults to "mongodb".
     *  'serviceHostname': The GSSAPI hostname to use. Defaults to the name of the remote host.
     *
     * Other fields in 'params' are silently ignored.
     * Returns normally on success, and throws on error. Throws a DBException with getCode() ==
     * ErrorCodes::AuthenticationFailed if authentication is rejected. All other exceptions are
     * tantamount to authentication failure, but may also indicate more serious problems.
     ','line_number':295,'multiline':True]['text':'*
     * Authorizes access to a particular database.
     *
     * Authentication is separate for each database on the server -- you may authenticate for any
     * number of databases on a single connection. The "admin" database is special and once
     * authenticated provides access to all databases on the server.
     ','line_number':317,'multiline':True]['text':'*
     * Logs out the connection for the given database.
     *
     * 'dbname': The database to logout from.
     * 'info': The result object for the logout command (provided for backwards compatibility with
     *         mongo shell).
     ','line_number':326,'multiline':True]['text':'*
     * Creates a new collection in the database. Normally, collection creation is automatic. You
     * would use this function if you wish to specify special options on creation.
     *
     *  If the collection already exists, no action occurs.
     *
     *  'nss': Fully qualified collection name.
     *  'size': Desired initial extent size for the collection.
     *          Must be <= 1000000000 for normal collections.
     *          For fixed size (capped) collections, this size is the total/max size of the
     *          collection.
     *  'capped': If true, this is a fixed size collection (where old data rolls out).
     *  'max': Maximum number of objects if capped (optional).
     *
     * Returns true if successful.
     ','line_number':339,'multiline':True]['text':'*
     * Deletes the specified collection.
     *
     *  'info': An optional output parameter that receives the result object the database returns
     *          from the drop command. May be null if the caller doesn't need that info.
     ','line_number':362,'multiline':True]['text':'*
     * { name : "<short collection name>",
     *   options : { }
     * }
     ','line_number':384,'multiline':True]['text':'*
     * Drops an entire database.
     ','line_number':392,'multiline':True]['text':'*
     * Lists databases available on the server.
     *
     * 'filter': A filter for the results
     * 'nameOnly': Only return the names of the databases
     * 'authorizedDatabases': Only return the databases the user is authorized on
     * 'useListDatabasesForAllTenants': Use command listDatabasesForAllTenants
     ','line_number':405,'multiline':True]['text':'*
     * Creates an index on the collection 'nss' as described by the given keys. If you wish to
     * specify options, see the more flexible overload of 'createIndex' which takes an IndexSpec
     * object. Failure to construct the index is reported by throwing a AssertionException.
     *
     *  'nss': NamespaceString on which to create the index
     *  'keys': Document describing keys and index types. You must provide at least one field and
     *          its direction.
     ','line_number':418,'multiline':True]['text':'*
     * Creates an index on the collection 'nss' as described by the given descriptor. Failure to
     * construct the index is reported by throwing a AssertionException.
     *
     *  'nss': NamespaceString on which to create the index
     *  'descriptor': Configuration object describing the index to create. The descriptor must
     *                describe at least one key and index type.
     ','line_number':433,'multiline':True]['text':'*
     * Creates indexes on the collection 'nss' as described by 'specs'.
     *
     * Failure to construct the indexes is reported by throwing an AssertionException.
     ','line_number':453,'multiline':True]['text':'*
     * Lists indexes on the collection 'nsOrUuid'.
     * Includes in-progress indexes.
     *
     * If 'includeBuildUUIDs' is true, in-progress index specs will have the following format:
     * {
     *     spec: <BSONObj>
     *     buildUUID: <UUID>
     * }
     * and ready index specs will only list the spec.
     *
     * If 'includeBuildUUIDs' is false, only the index spec will be returned without a way to
     * distinguish between ready and in-progress index specs.
     ','line_number':462,'multiline':True]['text':'*
     * Drops all indexes for the collection.
     ','line_number':487,'multiline':True]['text':'*
     * Sends the provided message, returning the server's reponse.
     *
     * 'actualServer' is set to the actual server where they call went if there was a choice (for
     * example SecondaryOk).
     ','line_number':497,'multiline':True]['text':'*
     * Used by QueryOption_Exhaust. To use that your subclass must implement this.
     ','line_number':511,'multiline':True]['text':'*
     * Issues a find command described by 'findRequest', and returns the resulting cursor.
     ','line_number':519,'multiline':True]['text':'*
     * Convenience overloads. Identical to the 'find()' overload above, but default values of
     * "primary" read preference and 'ExhaustMode::kOff' are used when not supplied by the caller.
     ','line_number':526,'multiline':True]['text':'*
     * Issues a find command described by 'findRequest' and the given read preference. Rather than
     * returning a cursor to the caller, iterates the cursor under the hood and calls the provided
     * 'callback' function against each of the documents produced by the cursor.
     ','line_number':540,'multiline':True]['text':'*
     * Issues a find command describe by 'findRequest', but augments the request to have a limit of
     * 1. It is illegal for the given 'findRequest' to have a limit already set.
     *
     * Returns the document resulting from the query, or an empty document if the query has no
     * results.
     ','line_number':557,'multiline':True]['text':'*
     * Identical to the 'findOne()' overload above, but uses a default value of "primary" for the
     * read preference.
     ','line_number':566,'multiline':True]['text':'*
     * Issues a find command against the given collection (passed in either by namespace or by UUID)
     * with the given 'filter'. Also augments the find request to have a limit of 1.
     *
     * Returns the document resulting from the query, or an empty document if the query has no
     * results.
     ','line_number':575,'multiline':True]['text':'*
     * Don't use this - called automatically by DBClientCursor for you.
     *   'cursorId': Id of cursor to retrieve.
     *   Returns an handle to a previously allocated cursor.
     *   Throws AssertionException.
     ','line_number':584,'multiline':True]['text':'*
     * Counts number of objects in collection ns that match the query criteria specified.
     * Throws UserAssertion if database returns an error.
     ','line_number':592,'multiline':True]['text':'*
     * Executes an acknowledged command to insert a vector of documents.
     ','line_number':603,'multiline':True]['text':'*
     * Executes a fire-and-forget command to insert a single document.
     ','line_number':611,'multiline':True]['text':'*
     * Executes a fire-and-forget command to insert a vector of documents.
     ','line_number':619,'multiline':True]['text':'*
     * Executes an acknowledged command to update the objects that match the query.
     ','line_number':627,'multiline':True]['text':'*
     * Executes a fire-and-forget command to update the objects that match the query.
     ','line_number':637,'multiline':True]['text':'*
     * Executes an acknowledged command to remove the objects that match the query.
     ','line_number':647,'multiline':True]['text':'*
     * Executes a fire-and-forget command to remove the objects that match the query.
     ','line_number':655,'multiline':True]['text':' This is only for DBClientCursor.','line_number':665,'multiline':False]['text':'*
     * Gets the SSL configuration of this client.
     ','line_number':669,'multiline':True]['text':'*
     * Returns true if this client was connected using transient SSL parameters. May return
     * false if this client was never connected.
     ','line_number':674,'multiline':True]['text':'*
     * Returns true if the result of a command is ok.
     ','line_number':702,'multiline':True]['text':'*
     * Returns true if the element contains a not primary error.
     ','line_number':707,'multiline':True]['text':'*
     * Controls how chatty the client is about network errors & such. See log.h.
     ','line_number':721,'multiline':True]['text':' unique connection id for this connection','line_number':727,'multiline':False]['text':'*
     * Implementation for getIndexes() and getReadyIndexes().
     ','line_number':734,'multiline':True]['text':' The operationTime associated with the last command handled by the client.','line_number':752,'multiline':False]['text':' DBClientBase','line_number':756,'multiline':False]['text':'
 * RAII-style class to set new RequestMetadataWriter and ReplyMetadataReader on DBClientConnection
 * "_conn". On object destruction, '_conn' is set back to it's old RequestsMetadataWriter and
 * ReplyMetadataReader.
 ','line_number':761,'multiline':True]['text':' not owned.','line_number':786,'multiline':False]['text':' namespace mongo','line_number':791,'multiline':False]