['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Hook for legacy MONGODB-CR support provided by shell client only ','line_number':62,'multiline':True]['text':'*
 * Names for supported authentication mechanisms.
 ','line_number':66,'multiline':True]['text':'*
 * On replication step down, should the current connection be killed or left open.
 ','line_number':85,'multiline':True]['text':'*
 * Provider of SASL credentials for internal authentication purposes.
 ','line_number':90,'multiline':True]['text':'*
     * Get the information for a given SASL mechanism.
     *
     * If there are multiple entries for a mechanism, suppots retrieval by index. Used when rotating
     * the security key.
     ','line_number':97,'multiline':True]['text':'*
 * Authenticate a user.
 *
 * Pass the default hostname for this client in through "hostname." If SSL is enabled and
 * there is a stored client subject name, pass that through the "clientSubjectName" parameter.
 * Otherwise, "clientSubjectName" will be silently ignored, pass in any string.
 *
 * The "params" BSONObj should be initialized with some of the fields below.  Which fields
 * are required depends on the mechanism, which is mandatory.
 *
 *     "mechanism": The std::string name of the sasl mechanism to use.  Mandatory.
 *     "user": The std::string name of the user to authenticate.  Mandatory.
 *     "db": The database target of the auth command, which identifies the location
 *         of the credential information for the user.  May be "$external" if
 *         credential information is stored outside of the mongo cluster.  Mandatory.
 *     "pwd": The password data.
 *     "digestPassword": Boolean, set to true if the "pwd" is undigested (default).
 *     "serviceName": The GSSAPI service name to use.  Defaults to "mongodb".
 *     "serviceHostname": The GSSAPI hostname to use.  Defaults to the name of the remote
 *          host.
 *
 * Other fields in "params" are silently ignored. A "params" object can be constructed
 * using the buildAuthParams() method.
 *
 * This function will return a future that will be filled with the final result of the
 * authentication command on success or a Status on error.
 ','line_number':108,'multiline':True]['text':'*
 * Authenticate as the __system user. All parameters are the same as authenticateClient above,
 * but the __system user's credentials will be filled in automatically.
 *
 * The "mechanismHint" parameter will force authentication with a specific mechanism
 * (e.g. SCRAM-SHA-256). If it is boost::none, then a "hello" will be called to negotiate
 * a SASL mechanism with the server.
 *
 * The "stepDownBehavior" parameter controls whether replication will kill the connection on
 * stepdown.
 *
 * Because this may retry during cluster keyfile rollover, this may call the RunCommandHook more
 * than once, but will only call the AuthCompletionHandler once.
 ','line_number':140,'multiline':True]['text':'*
 * Build a BSONObject representing parameters to be passed to authenticateClient(). Takes
 * the following fields:
 *
 *     @dbname: The database target of the auth command.
 *     @username: The std::string name of the user to authenticate.
 *     @passwordText: The std::string representing the user's password.
 *     @mechanism: The std::string authentication mechanism to be used
 ','line_number':162,'multiline':True]['text':'*
 * Run a "hello" exchange to negotiate a SASL mechanism for authentication.
 ','line_number':176,'multiline':True]['text':'*
 * Return the field name for the database containing credential information.
 ','line_number':184,'multiline':True]['text':'*
 * Return the field name for the user to authenticate.
 ','line_number':189,'multiline':True]['text':'*
 * Which type of speculative authentication was performed (if any).
 ','line_number':194,'multiline':True]['text':'*
 * Constructs a "speculativeAuthenticate" or "speculativeSaslStart" payload for an "hello" request
 * based on a given URI.
 ','line_number':203,'multiline':True]['text':'*
 * Constructs a "speculativeAuthenticate" or "speculativeSaslStart" payload for an "hello" request
 * using internal (intracluster) authentication.
 ','line_number':211,'multiline':True]['text':' namespace auth','line_number':219,'multiline':False]['text':' namespace mongo','line_number':220,'multiline':False]