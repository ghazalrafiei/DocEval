['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * The internal client's cursor representation for find or agg cursors. The cursor is iterated by
 * the caller using the 'more()' and 'next()' methods. Any necessary getMore requests are
 * constructed and issued internally.
 ','line_number':62,'multiline':True]['text':'*
     * Constructs a 'DBClientCursor' that will be opened by issuing the find command described by
     * 'findRequest'.
     ','line_number':78,'multiline':True]['text':'*
     * Constructs a 'DBClientCursor' from a pre-existing cursor id.
     ','line_number':87,'multiline':True]['text':'*
     * If true, safe to call next(). Requests more from server if necessary.
     ','line_number':100,'multiline':True]['text':'*
     * If true, there is more in our local buffers to be fetched via next(). Returns false when a
     * getMore request back to server would be required. You can use this if you want to exhaust
     * whatever data has been fetched to the client already but then perhaps stop.
     ','line_number':110,'multiline':True]['text':'*
     * Returns the next object from the cursor.
     *
     * On error at the remote server, you will get back:
     *    {$err: <std::string>
     *
     * If you do not want to handle that yourself, call 'nextSafe()'.
     ','line_number':123,'multiline':True]['text':'*
     * Restores an object previously returned by next() to the cursor.
     ','line_number':133,'multiline':True]['text':'*
     * Similar to 'next()', but throws an AssertionException on error.
     ','line_number':141,'multiline':True]['text':'*
     * Peek ahead at items buffered for future next() calls. Never requests new data from the
     * server.
     *
     * WARNING: no support for _putBack yet!
     ','line_number':146,'multiline':True]['text':'*
     * Peeks at first element. If no first element exists, returns an empty object.
     ','line_number':154,'multiline':True]['text':'*
     * peek ahead and see if an error occurred, and get the error if so.
     ','line_number':159,'multiline':True]['text':'*
     * Iterates the rest of the cursor and returns the resulting number if items.
     ','line_number':164,'multiline':True]['text':'*
     * Returns true if the cursor is no longer open on the remote node (the remote node has returned
     * a cursor id of zero).
     ','line_number':176,'multiline':True]['text':'*
     * Changes the cursor's batchSize after construction. Can change after requesting first batch.
     ','line_number':196,'multiline':True]['text':'*
     * Performs the initial query, opening the cursor.
     ','line_number':217,'multiline':True]['text':'*
     * Marks this object as dead and sends the KillCursors message to the server.
     *
     * Any errors that result from this are swallowed since this is typically performed as part of
     * cleanup and a failure to kill the cursor should not result in a failure of the operation
     * using the cursor.
     *
     * Killing an already killed or exhausted cursor does nothing, so it is safe to always call this
     * if you want to ensure that a cursor is killed.
     ','line_number':222,'multiline':True]['text':'*
     * Returns true if the connection this cursor is using has pending replies.
     *
     * If true, you should not try to use the connection for any other purpose or return it to a
     * pool.
     *
     * This can happen if an exhaust query was started but not completed.
     ','line_number':234,'multiline':True]['text':' It only makes sense to set awaitData timeout if the cursor is in tailable awaitData mode.','line_number':251,'multiline':False]['text':' Only used for tailable awaitData oplog fetching requests.','line_number':256,'multiline':False]['text':'*
     * Returns the resume token for the latest batch, it set.
     ','line_number':265,'multiline':True]['text':'*
     * Returns the operation time for the latest batch, if set.
     ','line_number':272,'multiline':True]['text':' TODO remove constructors after c++17 toolchain upgrade','line_number':281,'multiline':False]['text':'*
     * Parses and returns command replies regardless of which command protocol was used.
     * Does *not* parse replies from non-command OP_QUERY finds.
     ','line_number':299,'multiline':True]['text':' In order to fully initialize a DBClientCursor object, one must first call its constructor','line_number':316,'multiline':False]['text':' and then subsequently call DBClientCursor::init().','line_number':317,'multiline':False]['text':' 'ns' is initially the NamespaceString passed in, or the dbName if doing a find by UUID.','line_number':320,'multiline':False]['text':' After a successful 'find' command, 'ns' is updated to contain the namespace returned by that','line_number':321,'multiline':False]['text':' command.','line_number':322,'multiline':False]['text':' A description of the find command provided by the caller which is used to open the cursor.','line_number':335,'multiline':False]['text':'','line_number':336,'multiline':False]['text':' Has a value of boost::none if the caller constructed this cursor using a pre-existing cursor','line_number':337,'multiline':False]['text':' id.','line_number':338,'multiline':False]['text':' namespace mongo','line_number':351,'multiline':False]