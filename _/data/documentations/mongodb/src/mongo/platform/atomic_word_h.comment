['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * Implementation of the AtomicWord interface in terms of the C++11 Atomics.
 * Defines the operations provided by a non-incrementable AtomicWord.
 * All operations have sequentially consistent semantics unless otherwise noted.
 ','line_number':59,'multiline':True]['text':'*
     * Underlying value type.
     ','line_number':67,'multiline':True]['text':'*
     * Construct a new word, default-initialized.
     ','line_number':72,'multiline':True]['text':'*
     * Construct a new word with the given initial value.
     ','line_number':77,'multiline':True]['text':'*
     * Gets the current value of this AtomicWord.
     ','line_number':82,'multiline':True]['text':'*
     * Gets the current value of this AtomicWord using relaxed memory order.
     ','line_number':89,'multiline':True]['text':'*
     * Sets the value of this AtomicWord to "newValue".
     ','line_number':96,'multiline':True]['text':'*
     * Sets the value of this AtomicWord to "newValue" using relaxed memory order.
     ','line_number':103,'multiline':True]['text':'*
     * Atomically swaps the current value of this with "newValue".
     *
     * Returns the old value.
     ','line_number':110,'multiline':True]['text':'*
     * Atomic compare and swap.
     *
     * If this value equals the value at "expected", sets this value to "newValue".
     * Otherwise, sets the storage at "expected" to this value.
     *
     * Returns true if swap successful, false otherwise
     ','line_number':119,'multiline':True]['text':' NOTE: Subtle: compare_exchange mutates its first argument.','line_number':128,'multiline':False]['text':' At least with GCC 10, this assertion fails for small types like bool.','line_number':133,'multiline':False]['text':' NOLINT','line_number':135,'multiline':False]['text':' NOLINT','line_number':138,'multiline':False]['text':'*
 * Has the basic operations, plus some arithmetic operations.
 ','line_number':141,'multiline':True]['text':'*
     * Get the current value of this, add "increment" and store it, atomically.
     *
     * Returns the value of this before incrementing.
     ','line_number':154,'multiline':True]['text':'*
     * Like "fetchAndAdd", but with relaxed memory order. Appropriate where relative
     * order of operations doesn't matter. A stat counter, for example.
     ','line_number':163,'multiline':True]['text':'*
     * Get the current value of this, subtract "decrement" and store it, atomically.
     * Returns the value of this before decrementing.
     ','line_number':171,'multiline':True]['text':'*
     * Get the current value of this, add "increment" and store it, atomically.
     * Returns the value of this after incrementing.
     ','line_number':179,'multiline':True]['text':'*
     * Get the current value of this, subtract "decrement" and store it, atomically.
     * Returns the value of this after decrementing.
     ','line_number':187,'multiline':True]['text':'*
     * Atomically compute and store 'load() & bits'
     *
     * Returns the value of this before bitand-ing.
     ','line_number':206,'multiline':True]['text':'*
     * Atomically compute and store 'load() | bits'
     *
     * Returns the value of this before bitor-ing.
     ','line_number':215,'multiline':True]['text':'*
     * Atomically compute and store 'load() ^ bits'
     *
     * Returns the value of this before bitxor-ing.
     ','line_number':224,'multiline':True]['text':' namespace atomic_word_detail','line_number':234,'multiline':False]['text':'*
 * Instantiations of AtomicWord must be trivially copyable.
 ','line_number':236,'multiline':True]['text':' namespace mongo','line_number':245,'multiline':False]