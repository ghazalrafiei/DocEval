['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':45,'multiline':False]['text':'*
 * Wrapper class for the MongoDB Decimal128 data type. Sample usage:
 *     Decimal128 d1("+10.0");
 *     Decimal128 d2("+0.1")
 *     Decimal128 sum = d1.add(d2)
 *     std::cout << sum << std::endl;
 ','line_number':50,'multiline':True]['text':'*
     * Static constants to get Decimal128 representations of specific numbers
     * kLargestPositive -> 9999999999999999999999999999999999E6111
     * kSmallestPositive -> 1E-6176
     * kLargestNegative -> -9999999999999999999999999999999999E6111
     * kSmallestNegative -> -1E-6176
     * kLargestNegativeExponentZero -> 0E-6176
     ','line_number':59,'multiline':True]['text':' zero with exponent 0','line_number':72,'multiline':False]['text':' Biased exponent of a Decimal128 with least significant digit in the units place','line_number':85,'multiline':False]['text':' internal convention only','line_number':88,'multiline':False]['text':'*
     * This struct holds the raw data for IEEE 754-2008 data types
     ','line_number':90,'multiline':True]['text':'*
     * Indicates if constructing a Decimal128 from a double should round the double to 15 digits
     * (so the conversion will correctly round-trip decimals), or round to the full 34 digits.
     ','line_number':106,'multiline':True]['text':'*
     * The signaling flag enum determines the signaling nature of a decimal operation.
     * The values of these flags are defined in the Intel RDFP math library.
     *
     * The provided hasFlag method checks whether provided signalingFlags contains flag f.
     *
     * Example:
     *     Decimal128 dcml = Decimal128('0.1');
     *     std::uint32_t sigFlag = Decimal128::SignalingFlag::kNoFlag;
     *     double dbl = dcml.toDouble(&sigFlag);
     *     if Decimal128::hasFlag(sigFlag, SignalingFlag::kInexact)
     *         cout << "inexact decimal to double conversion!" << endl;
     ','line_number':112,'multiline':True]['text':'*
     * Returns true if a valid Decimal can be constructed from the given arguments.
     ','line_number':138,'multiline':True]['text':'*
     * Construct a 0E0 valued Decimal128.
     ','line_number':156,'multiline':True]['text':'*
     * This constructor takes in a raw decimal128 type, which consists of two
     * uint64_t's. This class performs an endian check on the system to ensure
     * that the Value.high64 represents the higher 64 bits.
     ','line_number':164,'multiline':True]['text':'*
     * Constructs a Decimal128 from parts, dealing with proper encoding of the combination field.
     * Assumes that the value will be inside the valid range of finite values. (No NaN/Inf, etc.)
     ','line_number':171,'multiline':True]['text':'*
     * This constructor takes a double and constructs a Decimal128 object given a roundMode, either
     * to full precision, or with a fixed precision of 15 decimal digits. When a double is used to
     * store a decimal floating point number, it is only correct up to 15 digits after converting
     * back to decimal, so the 15 digit rounding is used for mixed-mode operations.
     * The general idea is to quantize the direct double->dec128 conversion
     * with a quantum of 1E(-15 +/- base10 exponent equivalent of the double).
     * To do this, we find the smallest (abs value) base 10 exponent greater
     * than the double's base 2 exp and shift the quantizer's exp accordingly.
     ','line_number':185,'multiline':True]['text':'*
     * This constructor takes a string and constructs a Decimal128 object from it.
     * Inputs larger than 34 digits of precision are rounded according to the
     * specified rounding mode. The following (and variations) are all accepted:
     * "+2.02E200"
     * "2.02E+200"
     * "-202E-500"
     * "somethingE200" --> NaN
     * "200E9999999999" --> +Inf
     * "-200E9999999999" --> -Inf
     ','line_number':199,'multiline':True]['text':'*
     * This function gets the inner Value struct storing a Decimal128 value.
     ','line_number':219,'multiline':True]['text':'*
     *  Extracts the biased exponent from the combination field.
     ','line_number':226,'multiline':True]['text':' NaN or Inf','line_number':235,'multiline':False]['text':' non-canonical representation','line_number':236,'multiline':False]['text':'*
     * Returns the high 49 bits of the 113-bit binary encoded coefficient. Returns 0 for
     * non-canonical or non-finite numbers.
     ','line_number':239,'multiline':True]['text':'*
     * Returns the low 64 bits of the 113-bit binary encoded coefficient. Returns 0 for
     * non-canonical or non-finite numbers.
     ','line_number':249,'multiline':True]['text':'*
     * Returns the absolute value of this.
     ','line_number':257,'multiline':True]['text':'*
     * Returns the acos value of this.
     ','line_number':262,'multiline':True]['text':'*
     * Returns the acosh value of this.
     ','line_number':268,'multiline':True]['text':'*
     * Returns the asin value of this.
     ','line_number':275,'multiline':True]['text':'*
     * Returns the asinh value of this.
     ','line_number':281,'multiline':True]['text':'*
     * Returns the atan value of this.
     ','line_number':288,'multiline':True]['text':'*
     * Returns the atan2(this, other) rather than atan2(other,this), which
     * would produce different results.
     ','line_number':294,'multiline':True]['text':'*
     * Returns the atanh value of this.
     ','line_number':303,'multiline':True]['text':'*
     * Returns the cos value of this.
     ','line_number':310,'multiline':True]['text':'*
     * Returns the cosh value of this.
     ','line_number':316,'multiline':True]['text':'*
     * Returns the sin value of this.
     ','line_number':322,'multiline':True]['text':'*
     * Returns the sinh value of this.
     ','line_number':328,'multiline':True]['text':'*
     * Returns the tan value of this.
     ','line_number':333,'multiline':True]['text':'*
     * Returns the tanh value of this.
     ','line_number':339,'multiline':True]['text':'*
     * Returns `this` with inverted sign bit
     ','line_number':346,'multiline':True]['text':'*
     * This set of functions converts a Decimal128 to a certain integer type with a
     * given rounding mode.
     *
     * Each function is overloaded to provide an optional signalingFlags input-output parameter that
     * will be bitwise ORed with one of the following Decimal128::SignalingFlag enumerators:
     * kNoFlag, kInvalid
     *
     * Note: The signaling flags for these functions only signal
     * an invalid conversion. If inexact conversion flags are necessary, call
     * the toTypeExact version of the function defined below. This set of operations
     * (toInt, toLong) has better performance than the latter.
     ','line_number':357,'multiline':True]['text':'*
     * This set of functions converts a Decimal128 to a certain integer type with a
     * given rounding mode. The signaling flags for these functions will also signal
     * inexact computation.
     *
     * Each function is overloaded to provide an optional signalingFlags input-output parameter that
     * will be bitwise ORed with one of the following Decimal128::SignalingFlag enumerators:
     * kNoFlag, kInexact, kInvalid
     ','line_number':377,'multiline':True]['text':'*
     * These functions convert decimals to doubles and have the ability to signal
     * inexact, underflow, overflow, and invalid operation.
     *
     * Each function is overloaded to provide an optional signalingFlags input-output parameter that
     * will be bitwise ORed with one of the following Decimal128::SignalingFlag enumerators:
     * kNoFlag, kInexact, kUnderflow, kOverflow, kInvalid
     ','line_number':396,'multiline':True]['text':'*
     * This function converts a Decimal128 to a string with the following semantics:
     *
     * Suppose Decimal128 D has P significant digits and exponent Exp.
     * Define SE to be the scientific exponent of D equal to Exp + P - 1.
     *
     * Define format E as normalized scientific notation (ex: 1.0522E+16)
     * Define format F as a regular formatted number with no exponent (ex: 105.22)
     *
     * In order to improve decimal type readability,
     * if SE >= 12 or SE <= -4, use format E to display D.
     * if Exp > 0, use format E to display D because adding trailing zeros implies
     * extra, incorrect precision
     *
     * Otherwise, display using F with no exponent (add leading zeros if necessary).
     *
     * This conversion to string is roughly based on the G C99 printf specifier and
     * existing behavior for the double numeric type in MongoDB.
     ','line_number':407,'multiline':True]['text':'*
     * This set of functions check whether a Decimal128 is Zero, NaN, or +/- Inf
     ','line_number':428,'multiline':True]['text':'*
     * Return true if and only if a Decimal128 is Zero, Normal, or Subnormal (not Inf or NaN)
     ','line_number':436,'multiline':True]['text':'*
     * This set of mathematical operation functions implement the corresponding
     * IEEE 754-2008 operations on self and other.
     * The 'add' and 'multiply' methods are commutative, so a.add(b) is equivalent to b.add(a).
     * Rounding of results that require a precision greater than 34 decimal digits
     * is performed using the supplied rounding mode (defaulting to kRoundTiesToEven).
     * NaNs and infinities are handled according to the IEEE 754-2008 specification.
     *
     * Each function is overloaded to provide an optional signalingFlags input-output parameter that
     * will be bitwise ORed with one of the following Decimal128::SignalingFlag enumerators:
     * kNoFlag, kInexact, kUnderflow, kOverflow, kInvalid
     *
     * The divide operation may also set signalingFlags to kDivideByZero
     ','line_number':441,'multiline':True]['text':'*
     * This function quantizes the current decimal given a quantum reference
     ','line_number':495,'multiline':True]['text':'*
     * This function normalizes the cohort of a Decimal128 by forcing it to maximum
     * precision (34 decimal digits). This normalization is important when it is desirable
     * to force equal decimals of different representations (i.e. 5.0 and 5.00) to equal
     * decimals with the same representation (5000000000000000000000000000000000E-33).
     * Hashing equal decimals to equal hashes becomes possible with such normalization.
     ','line_number':504,'multiline':True]['text':' Normalize by adding 0E-6176 which forces a decimal to maximum precision (34 digits)','line_number':512,'multiline':False]['text':'*
     * This set of comparison operations takes a single Decimal128 and returns a boolean
     * noting the value of the comparison. These comparisons are not total ordered, but
     * comply with the IEEE 754-2008 spec. The comparison returns true if the caller
     * is <equal, notequal, greater, greaterequal, less, lessequal> the argument (other).
     ','line_number':516,'multiline':True]['text':'*
     * Returns true iff 'this' and 'other' are bitwise identical. Note that this returns false
     * even for values that may convert to identical strings, such as different NaNs or
     * non-canonical representations that represent bit-patterns never generated by any conforming
     * implementation, but should be treated as 0. Mostly for testing.
     ','line_number':529,'multiline':True]['text':'*
     * This function quantizes the current decimal given a quantum reference without normalizing its
     * arguments.
     ','line_number':562,'multiline':True]['text':' For constexpr's sake the invariant must be compiled only if !isValid().','line_number':580,'multiline':False]['text':' The absolute value of constexpr `i` as a uint64_t, avoiding warnings.','line_number':589,'multiline':False]['text':' Negation, without MSVC C4146.','line_number':595,'multiline':False]['text':' namespace literals','line_number':642,'multiline':False]['text':' namespace mongo','line_number':682,'multiline':False]