['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' IWYU pragma: keep','line_number':48,'multiline':False]['text':'*
 * An Identity encapsulates the context around a latch
 *
 * Identities are intended to be constructed rarely and utilized via constant reference or pointer.
 * Once an Identity is visible in a multithreaded context, it will be effectively constant.
 ','line_number':70,'multiline':True]['text':'*
     * Since SouceLocations usually come from macros, this function is a setter that allows
     * a SourceLocation to be paired with __VA_ARGS__ construction.
     ','line_number':85,'multiline':True]['text':'*
     * Return an optional that may contain the SourceLocation for this latch
     ','line_number':95,'multiline':True]['text':'*
     * Return an optional that may contain the HierarchicalAcquisitionLevel for this latch
     ','line_number':102,'multiline':True]['text':'*
     * Return the name for this latch
     *
     * If there was no name provided on construction, this will be latch_detail::kAnonymousName.
     ','line_number':109,'multiline':True]['text':'*
     * Return the index for this latch
     *
     * Latch indexes are assigned as Identity objects are created. Any given ordering is only valid
     * for a single process lifetime.
     ','line_number':118,'multiline':True]['text':'*
     * Append structured data describing this latch
     ','line_number':128,'multiline':True]['text':'*
 * A set of actions to happen upon notable events on a Lockable-conceptualized type
 *
 * The event handlers on this type will be invoked extremely frequently and can substantially affect
 * the efficiency and overall health of the process. As a general rule, avoid logging, disk io, and
 * networking in any DiagnosticListener functions. System functions not related to those activities
 * should be avoided as much as possible. For example, the overhead of taking an elementary stack
 * trace voa backtrace_symbols_fd(3) proved too heavyweight to be used in a DiagnosticListener.
 * Additionally, in parts of our system, Mutexes can outlive the invocation of main() and, indeed,
 * certain process global variables. DiagnosticListeners usually need to be dynamically allocated
 * and leaked.
 *
 * In short, HERE BE DRAGONS. DO NOT IMPLEMENT NON-DIAGNOSTIC FUNCTIONALITY USING THIS CLASS.
 ','line_number':146,'multiline':True]['text':'*
     * Action to do when a lock cannot be immediately acquired
     ','line_number':168,'multiline':True]['text':'*
     * Action to do when a lock was acquired without blocking
     ','line_number':173,'multiline':True]['text':'*
     * Action to do when a lock was acquired after blocking
     ','line_number':178,'multiline':True]['text':'*
     * Action to do when a lock is unlocked
     ','line_number':183,'multiline':True]['text':' Make state immortal','line_number':195,'multiline':False]['text':' Intentionally leaked!','line_number':196,'multiline':False]['text':'*
 * Creates a DiagnosticListener subclass and adds it to the triggers for certain actions.
 *
 * DiagnosticListeners can only be added and not removed. If you wish to deactivate a
 * DiagnosticListeners subclass, please provide the switch on that subclass to noop its
 * functions. It is only safe to add a DiagnosticListener during a MONGO_INITIALIZER.
 ','line_number':200,'multiline':True]['text':' Intentionally leaked!','line_number':212,'multiline':False]['text':'*
 * This class holds working data for a latchable resource
 *
 * All member data is either i) synchronized or ii) constant.
 ','line_number':217,'multiline':True]['text':'*
 * latch_details::Catalog holds a set of Data objects for use with Mutexes
 *
 * All rules for LockFreeCollection apply:
 * - Synchronization is provided internally
 * - All entries are expected to exist for the lifetime of the Catalog
 ','line_number':253,'multiline':True]['text':'*
 * Simple registration object that takes an Identity and provides access to a Data
 *
 * This object actually owns the Data object to make lifetime management simpler.
 ','line_number':268,'multiline':True]['text':'*
 * Get a Data object (Identity, Counts) for a unique type Tag (which can be a noop lambda)
 *
 * When used with a macro (or converted to have a c++20-style <typename Tag = decltype([]{})>), this
 * function provides a unique Data object per invocation context. This function also sets the
 * Identity identity to contain sourceLocation. This is explicitly intended to work with
 * preprocessor macros that generate SourceLocation objects and unique Tags.
 ','line_number':287,'multiline':True]['text':'','line_number':297,'multiline':False]['text':'','line_number':298,'multiline':False]['text':'*
 * Provide a very generic Data object for use with default-constructed Mutexes
 ','line_number':303,'multiline':True]['text':'*
 * Latch is an abstract base class that implements the Lockable concept
 *
 * This class is useful for designing function APIs that take stdx::unique_lock around an
 * ambiguously defined resource. A stdx::unique_lock<Latch> can be constructed from a Mutex.
 * A stdx::unique_lock<Latch> cannot be constructed from a stdx::unique_lock<Mutex>. Sometimes,
 * standard types are not as powerful as we would like them to be.
 ','line_number':310,'multiline':True]['text':'*
 * Mutex is a Lockable type that wraps a stdx::mutex
 *
 * This class is intended to be used wherever a stdx::mutex would previously be used. It provides
 * a generic event-listener interface for instrumenting around lock()/unlock()/try_lock().
 * Conceptually, this type is similar to most unique_lock and timed_mutex implementations.
 *
 * If you believe that you need synchronization with absolutely no additional nanosecond latency or
 * need to exist at a very core level (e.g. code living in the base folder), please excuse yourself
 * from the linter and use a stdx::mutex.
 *
 * If you believe that you need logical synchronization at a user-facing level, you may need
 * a database Lock instead. Talk to Storage Execution.
 ','line_number':331,'multiline':True]['text':' NOLINT','line_number':365,'multiline':False]['text':' namespace latch_detail','line_number':368,'multiline':False]['text':' NOLINT','line_number':374,'multiline':False]['text':' NOLINT','line_number':375,'multiline':False]['text':' namespace mongo','line_number':378,'multiline':False]['text':'*
 * Construct and register a latch_detail::Data object exactly once per call site
 ','line_number':380,'multiline':True]['text':'*
 * Construct a mongo::Mutex using the result of MONGO_GET_LATCH_DATA with all arguments forwarded
 ','line_number':387,'multiline':True]['text':' NOLINT','line_number':393,'multiline':False]