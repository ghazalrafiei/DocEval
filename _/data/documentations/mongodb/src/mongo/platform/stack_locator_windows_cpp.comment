['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':' Please see','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' http://stackoverflow.com/questions/1740888/determining-stack-space-with-visual-studio/1747499#1747499','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':' for notes on the following arcana.','line_number':43,'multiline':False]['text':' TODO: _WIN32_WINNT >= 0x0602 (windows 8 / 2012 server) may be','line_number':45,'multiline':False]['text':' able to use GetCurrentThreadStackLimits','line_number':46,'multiline':False]['text':' Put something on the stack, convieniently the variable we are','line_number':48,'multiline':False]['text':' going to write into, and ask the VM system for information','line_number':49,'multiline':False]['text':' about the memory region it inhabits, which is the committed','line_number':50,'multiline':False]['text':' part of the stack.','line_number':51,'multiline':False]['text':' Now committedMbi.AllocationBase points to the reserved stack','line_number':56,'multiline':False]['text':' memory base address (the real bottom of the stack), and','line_number':57,'multiline':False]['text':' committedMbi.BaseAddress points to base address of the','line_number':58,'multiline':False]['text':' committed region, and committedMbi.RegionSize is the size of','line_number':59,'multiline':False]['text':' the commit region. Since the stack grows downward, the top of','line_number':60,'multiline':False]['text':' the stack is at the base address for the commit region plus the','line_number':61,'multiline':False]['text':' region size.','line_number':62,'multiline':False]['text':' Now, we skip down to the bottom, where the uncommitted memory','line_number':65,'multiline':False]['text':' is, and get its size. So, we ask for the region at the','line_number':66,'multiline':False]['text':' allocation base (the real bottom of the stack), after which','line_number':67,'multiline':False]['text':' uncommitedMbi will have a BaseAddress and a RegionSize that','line_number':68,'multiline':False]['text':' describes the uncommited area. The memory should have the','line_number':69,'multiline':False]['text':' RESERVE state set.','line_number':70,'multiline':False]['text':' If the stack was created with CreateThread with dwStackSize','line_number':78,'multiline':False]['text':' non-zero and without the STACK_SIZE_PARAM_IS_A_RESERVATION','line_number':79,'multiline':False]['text':' flag, then the whole AllocationBase is our stack base, and','line_number':80,'multiline':False]['text':' there is no guard page.','line_number':81,'multiline':False]['text':' NOTE: Originally, it seemed to make sense that what you would get back','line_number':83,'multiline':False]['text':' here would be the same information as in committedMbi. After all, the whole','line_number':84,'multiline':False]['text':' stack is committed. So, querying AllocationBase should give you back','line_number':85,'multiline':False]['text':' the same region.','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' Bizzarely, that doesn't seem to be the case. Even though','line_number':88,'multiline':False]['text':' it has the same protections, state, etc., VirtualQuery seems','line_number':89,'multiline':False]['text':' to consider the stack that has been used distinct from the part','line_number':90,'multiline':False]['text':' that hasn't.','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' invariant(uncommittedMbi.BaseAddress == committedMbi.BaseAddress);','line_number':93,'multiline':False]['text':' invariant(uncommittedMbi.RegionSize == committedMbi.RegionSize);','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':' Locate the guard page, which sits bewteen the uncommitted','line_number':103,'multiline':False]['text':' region (which we know is not empty!), and the committed','line_number':104,'multiline':False]['text':' region. We can count the guard page as usable stack space,','line_number':105,'multiline':False]['text':' but it is good to find it so we can validate that we walked','line_number':106,'multiline':False]['text':' the stack correctly.','line_number':107,'multiline':False]['text':' The end of the guard page is right after the uncommitted','line_number':109,'multiline':False]['text':' area. Form a pointer into the guard page by skipping over the','line_number':110,'multiline':False]['text':' committed region.','line_number':111,'multiline':False]['text':' With that pointer in hand, get the info about the guard','line_number':115,'multiline':False]['text':' region. We really only care about its size here (and we','line_number':116,'multiline':False]['text':' validate that it has the right bits).','line_number':117,'multiline':False]['text':' The end of our stack is the allocation base for the whole stack.','line_number':126,'multiline':False]['text':' namespace mongo','line_number':130,'multiline':False]