['text':'*
 * Tests the behavior of an $merge stage which encounters an error in the middle of processing. We
 * don't guarantee any particular behavior in this scenario, but this test exists to make sure
 * nothing horrendous happens and to characterize the current behavior.
 * @tags: [
 *   # TODO SERVER-79448: Investigate why the test timeouts on TSAN variant.
 *   tsan_incompatible,
 * ]
 ','line_number':1,'multiline':True]['text':' Test with 2 very large documents that do not fit into a single batch.','line_number':21,'multiline':False]['text':' Make sure the $merge succeeds without any duplicate keys.','line_number':27,'multiline':False]['text':' Skip the combination of merge modes which will fail depending on the contents of the','line_number':29,'multiline':False]['text':' source and target collection, as this will cause the aggregation to fail.','line_number':30,'multiline':False]['text':' Create a unique index on 'a' in the output collection to create a unique key violation when','line_number':50,'multiline':False]['text':' running the $merge. The second document to be written ({_id: 1, a: 1}) will conflict with the','line_number':51,'multiline':False]['text':' existing document in the output collection. We use a unique index on a field other than _id','line_number':52,'multiline':False]['text':' because whenMatched: "replace" will not change _id when one already exists.','line_number':53,'multiline':False]['text':' Test that the writes for $merge are unordered, meaning the operation continues even if it','line_number':58,'multiline':False]['text':' encounters a duplicate key error. We don't guarantee any particular behavior in this case,','line_number':59,'multiline':False]['text':' but this test is meant to characterize the current behavior.','line_number':60,'multiline':False]['text':' Note that a $sort comes before the $merge to guarantee that {_id: 1, a: 1} will always be','line_number':69,'multiline':False]['text':' seen before {_id: 2, a: 2}. If {_id: 1, a: 1} is seen first, it gets inserted and will','line_number':70,'multiline':False]['text':' trigger a DuplicateKeyError since a's value is duplicated by {_id: 2, a: 1}. If {_id: 2, a:','line_number':71,'multiline':False]['text':' 2} is seen first, then it will make the replacement {_id: 2, a: 1} => {_id: 2, a: 2},','line_number':72,'multiline':False]['text':' preventing a duplicate key error from arising later on.','line_number':73,'multiline':False]