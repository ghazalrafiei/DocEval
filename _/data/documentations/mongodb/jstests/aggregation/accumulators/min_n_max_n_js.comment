['text':'*
 * Basic tests for the $minN/$maxN accumulators.
 ','line_number':1,'multiline':True]['text':' Basic correctness tests.','line_number':9,'multiline':False]['text':' This is max int64 which is supported as N.','line_number':14,'multiline':False]['text':' Adding 1 puts it over the edge.','line_number':15,'multiline':False]['text':' Some big number that will allow us to test big without running this testcase into next decade.','line_number':17,'multiline':False]['text':' Record the lowest/highest 'n' values.','line_number':46,'multiline':False]['text':' Always push into the arrays for the largestInt','line_number':54,'multiline':False]['text':' For the bigInt array, record the lowest/highest 'n-1' values.','line_number':58,'multiline':False]['text':' This is because we will do a bigN-1 in the actual query to properly validate the result.','line_number':59,'multiline':False]['text':' Reverse 'maxArr' results since $maxN outputs results in descending order.','line_number':71,'multiline':False]['text':' Run a minN/maxN query and compare it against the expectedResult.','line_number':79,'multiline':False]['text':' Note that the output documents are sorted by '_id' so that we can compare actual groups against','line_number':80,'multiline':False]['text':' expected groups (we cannot perform unordered comparison because order matters for $minN/$maxN).','line_number':81,'multiline':False]['text':' Basic correctness test for $minN/$maxN used in $bucketAuto. Though $bucketAuto uses','line_number':91,'multiline':False]['text':' accumulators in the same way that $group does, the test below verifies that everything','line_number':92,'multiline':False]['text':' works properly with serialization and reporting results. Note that the $project allows us','line_number':93,'multiline':False]['text':' to compare the $bucketAuto results to the expected $group results (because there are more','line_number':94,'multiline':False]['text':' buckets than groups, it will always be the case that the min value of each bucket','line_number':95,'multiline':False]['text':' corresponds to the group key).','line_number':96,'multiline':False]['text':' Using a computed projection will put the fields out of order. As such, we re-order them','line_number':111,'multiline':False]['text':' below.','line_number':112,'multiline':False]['text':' Test for regular N.','line_number':120,'multiline':False]['text':' Verify N can be as large as the largest integer.','line_number':124,'multiline':False]['text':' Verify a large value for N, but still do not return all of all values.','line_number':128,'multiline':False]['text':' Verify that we can dynamically compute 'n' based on the group key for $group.','line_number':132,'multiline':False]['text':' Verify that the 'CA' group has 10 results, while all others have only 4.','line_number':142,'multiline':False]['text':' Error cases','line_number':157,'multiline':False]['text':' Cannot reference the group key in $minN when using $bucketAuto.','line_number':159,'multiline':False]['text':' Reject non-integral/negative values of n.','line_number':172,'multiline':False]['text':' Reject invalid specifications.','line_number':206,'multiline':False]['text':' Missing arguments.','line_number':208,'multiline':False]['text':' Extra field.','line_number':221,'multiline':False]