['text':'*
 * SERVER-39788 Test that the values in the $limit and $skip stages do not overflow when the
 * pipeline is optimized and the $sort stage doesn't crash the server due to unreasonable memory
 * requirements.
 *
 * This test makes assumptions about how the explain output will be formatted, so cannot be
 * transformed to be put inside a $facet stage, in a sharded explain output or when pipeline
 * optimization is disabled.
 * @tags: [
 *   assumes_unsharded_collection,
 *   do_not_wrap_aggregations_in_facets,
 *   requires_pipeline_optimization,
 * ]
 ','line_number':1,'multiline':True]['text':' Ensure the aggregate command doesn't fail.','line_number':61,'multiline':False]['text':' Case where overflow of limit + skip prevents limit stage from being absorbed. One of the','line_number':65,'multiline':False]['text':' values == MAX_LONG, another one is 1.','line_number':66,'multiline':False]['text':' Case where limit + skip do not overflow. Limit == MAX_LONG and skip is 0. Should be able to','line_number':90,'multiline':False]['text':' absorb the limit and skip stages.','line_number':91,'multiline':False]['text':' Note that we cannot specify limit == 0, so we expect an error in this case.','line_number':92,'multiline':False]['text':' Case where limit + skip do not overflow. One value is MAX_LONG - 1 and another one is 1.','line_number':97,'multiline':False]['text':' Should be able to absorb the limit stage.','line_number':98,'multiline':False]['text':' Case where the first $limit can be pushed down, but the second overflows and thus remains in','line_number':112,'multiline':False]['text':' place.','line_number':113,'multiline':False]['text':' Case with multiple $limit and $skip stages where the second $limit ends up being the','line_number':135,'multiline':False]['text':' smallest. There is no overflow in this case.','line_number':136,'multiline':False]['text':' Case where limit + skip do not overflow. Both values are < MAX_LONG.','line_number':151,'multiline':False]['text':' Case where where overflow of limit + skip + skip prevents limit stage from being absorbed.','line_number':165,'multiline':False]['text':' One skip == MAX_LONG - 1, another one is 1. Should merge two skip stages into one and push down.','line_number':166,'multiline':False]['text':' Case where where overflow of limit + skip + skip prevents limit stage and one of the skip stages','line_number':179,'multiline':False]['text':' from being absorbed.  One skip == MAX_LONG, another one is 1. Should absorb the first skip.','line_number':180,'multiline':False]['text':' Cases where both limit and skip == MAX_LONG.','line_number':194,'multiline':False]['text':' Case where sample size is > MAX_LONG.','line_number':223,'multiline':False]['text':' Case where sample size is == MAX_LONG.','line_number':226,'multiline':False]['text':' Case where sample size is == MAX_LONG - 1.','line_number':229,'multiline':False]['text':' Case where we omit $skip stage causing overflow from the pushdown and continue to sum $skip','line_number':233,'multiline':False]['text':' stages after it.','line_number':234,'multiline':False]