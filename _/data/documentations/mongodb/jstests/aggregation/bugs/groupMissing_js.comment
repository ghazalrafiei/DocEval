['text':' $group has inconsistent behavior when differentiating between null and missing values, provided','line_number':1,'multiline':False]['text':' this test passes. Here, we check the cases where it is correct, and those where it is currently','line_number':2,'multiline':False]['text':' incorrect.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' This test issues some pipelines where it assumes an initial $sort will be absorbed and be','line_number':5,'multiline':False]['text':' covered, which will not happen if the $sort is within a $facet stage.','line_number':6,'multiline':False]['text':' @tags: [','line_number':7,'multiline':False]['text':'   do_not_wrap_aggregations_in_facets,','line_number':8,'multiline':False]['text':' ]','line_number':9,'multiline':False]['text':' Bug, see SERVER-21992.','line_number':34,'multiline':False]['text':' Bug, see SERVER-21992.','line_number':38,'multiline':False]['text':' TODO(SERVER-21992): Re-enable the following tests','line_number':43,'multiline':False]['text':' res = coll.aggregate({$group: {_id: {a: "$a"}}});','line_number':44,'multiline':False]['text':' assertArrayEq({actual: res.toArray(), expected: [{_id: {a: null}}, {_id: {}}]});','line_number':45,'multiline':False]['text':' Bug, see SERVER-23229.  Note that the presence of a sort w/index leads to a PROJECTION_COVERED.','line_number':58,'multiline':False]['text':' TODO(SERVER-23229): Re-enable the following tests','line_number':63,'multiline':False]['text':' coll.createIndex({a: 1, b: 1});','line_number':64,'multiline':False]['text':' res = coll.aggregate({$sort: {a: 1, b: 1}}, {$group: {_id: {a: "$a", b: "$b"}}});','line_number':65,'multiline':False]['text':' assertArrayEq({actual: res.toArray(), expected: [{_id: {b: 1}}, {_id: {a: null, b: 1}}]});','line_number':66,'multiline':False]['text':' Try a simpler variation of the bug SERVER-23229, without $group.','line_number':68,'multiline':False]['text':' After creating the index, the classic plan will use PROJECTION_COVERED, and the index will','line_number':78,'multiline':False]['text':' incorrectly provide a null for the missing "b" value. Bonsai does not exhibit SERVER-23229. So,','line_number':79,'multiline':False]['text':' either the new engine is used and the correct results (collScanResult) are seen, or we see the','line_number':80,'multiline':False]['text':' incorrect result, where all values of "b" are null.','line_number':81,'multiline':False]['text':' Check behavior with and without a hint.','line_number':95,'multiline':False]