['text':' Tests that an aggregation pipeline can be optimized away and the query can be answered using','line_number':1,'multiline':False]['text':' just the query layer if the pipeline has only one $cursor source, or if the pipeline can be','line_number':2,'multiline':False]['text':' collapsed into a single $cursor source pipeline. The resulting cursor in this case will look','line_number':3,'multiline':False]['text':' like what the client would have gotten from find command.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Relies on the pipeline stages to be collapsed into a single $cursor stage, so pipelines cannot be','line_number':6,'multiline':False]['text':' wrapped into a facet stage to not prevent this optimization. Also, this test is not prepared to','line_number':7,'multiline':False]['text':' handle explain output for sharded collections. The assertions made in this test are irrelevant','line_number':8,'multiline':False]['text':' for CQF, since it has no concept of a "query layer" or "aggregation layer". This test makes','line_number':9,'multiline':False]['text':' assumptions about how the explain output will be formatted, so cannot be run when pipeline','line_number':10,'multiline':False]['text':' optimization is disabled.','line_number':11,'multiline':False]['text':' @tags: [','line_number':12,'multiline':False]['text':'   assumes_unsharded_collection,','line_number':13,'multiline':False]['text':'   cqf_incompatible,','line_number':14,'multiline':False]['text':'   do_not_wrap_aggregations_in_facets,','line_number':15,'multiline':False]['text':'   requires_pipeline_optimization,','line_number':16,'multiline':False]['text':'   requires_profiling,','line_number':17,'multiline':False]['text':'   not_allowed_with_signed_security_token,','line_number':18,'multiline':False]['text':' ]','line_number':19,'multiline':False]['text':' Asserts that the give pipeline has *not* been optimized away and the request is answered','line_number':40,'multiline':False]['text':' using the aggregation module. There should be pipeline stages present in the explain output.','line_number':41,'multiline':False]['text':' The functions also asserts that a query stage passed in the 'stage' argument is present in','line_number':42,'multiline':False]['text':' the explain output. If 'expectedResult' is provided, the pipeline is executed and the','line_number':43,'multiline':False]['text':' returned result as validated agains the expected result without respecting the order of the','line_number':44,'multiline':False]['text':' documents. If 'preserveResultOrder' is 'true' - the order is respected.','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':' If 'optimizedAwayStages' is non-null, then it should contain a list of agg plan stages that','line_number':47,'multiline':False]['text':' should *not* be present in the pipeline, since their execution was pushed down into the query','line_number':48,'multiline':False]['text':' layer. The test will verify that this pushdown is reflected in explain output.','line_number':49,'multiline':False]['text':' Asserts that the give pipeline has been optimized away and the request is answered using','line_number':97,'multiline':False]['text':' just the query module. There should be no pipeline stages present in the explain output.','line_number':98,'multiline':False]['text':' The functions also asserts that a query stage passed in the 'stage' argument is present in','line_number':99,'multiline':False]['text':' the explain output. If 'expectedResult' is provided, the pipeline is executed and the','line_number':100,'multiline':False]['text':' returned result as validated agains the expected result without respecting the order of the','line_number':101,'multiline':False]['text':' documents. If 'preserveResultOrder' is 'true' - the order is respected.','line_number':102,'multiline':False]['text':' Test that getMore works with the optimized query.','line_number':141,'multiline':False]['text':' batchsize ','line_number':144,'multiline':True]['text':' Calls 'assertPushdownEnabled' if sbeEnabled is 'true'. Otherwise, it calls','line_number':149,'multiline':False]['text':' 'assertPushdownDisabled'.','line_number':150,'multiline':False]['text':' Basic pipelines.','line_number':155,'multiline':False]['text':' Test basic scenarios when a pipeline has a single $cursor stage or can be collapsed into a','line_number':157,'multiline':False]['text':' single cursor stage.','line_number':158,'multiline':False]['text':' Pipelines with a collation.','line_number':167,'multiline':False]['text':' Test a simple pipeline with a case-insensitive collation.','line_number':169,'multiline':False]['text':' Pipelines with covered queries.','line_number':179,'multiline':False]['text':' We can collapse a covered query into a single $cursor when $project and $sort are present and','line_number':181,'multiline':False]['text':' the latter is near the front of the pipeline. Skip this test in sharded modes as we cannot','line_number':182,'multiline':False]['text':' correctly handle explain output in plan analyzer helper functions.','line_number':183,'multiline':False]['text':' However, when the $project is computed, pushing it down into the find() layer would sometimes','line_number':202,'multiline':False]['text':' have the effect of reordering it before the $sort and $limit. This can cause a valid query to','line_number':203,'multiline':False]['text':' throw an error, as in SERVER-54128.','line_number':204,'multiline':False]['text':' We can collapse a $project stage if it has a complex pipeline expression.','line_number':238,'multiline':False]['text':' Pipelines which cannot be optimized away.','line_number':255,'multiline':False]['text':' We cannot optimize away a pipeline in Classic if there are stages which have no','line_number':266,'multiline':False]['text':' equivalent in the find command.','line_number':267,'multiline':False]['text':' Test that we can optimize away a pipeline with a $text search predicate.','line_number':291,'multiline':False]['text':' Test that $match, $sort, and $project all get answered by the PlanStage layer for a $text query.','line_number':295,'multiline':False]['text':' We cannot optimize away geo near queries.','line_number':303,'multiline':False]['text':' Test cases around pushdown of $limit.','line_number':311,'multiline':False]['text':' A lone $limit pipeline can be optimized away.','line_number':314,'multiline':False]['text':' $match followed by $limit can be optimized away.','line_number':320,'multiline':False]['text':' $limit followed by $match cannot be fully optimized away in Classic. The $limit is pushed','line_number':335,'multiline':False]['text':' down, but the $match is executed in the agg layer.','line_number':336,'multiline':False]['text':' $match, $project, $limit can be optimized away when the projection is covered.','line_number':344,'multiline':False]['text':' $match, $project, and $limit can be optimized away.','line_number':351,'multiline':False]['text':' $match, $project, $limit, $sort cannot be optimized away in Classic, because the $limit','line_number':372,'multiline':False]['text':' comes before the $sort.','line_number':373,'multiline':False]['text':' $match, $sort, $limit can be optimized away.','line_number':387,'multiline':False]['text':' $match, $sort, $limit, $project can be optimized away.','line_number':394,'multiline':False]['text':' $match, $sort, $project, $limit can be optimized away.','line_number':402,'multiline':False]['text':' $match, $sort, $limit, $project can be optimized away, where limits must swap and combine to','line_number':410,'multiline':False]['text':' enable pushdown.','line_number':411,'multiline':False]['text':' Test that $limit can be pushed down before a group, but it prohibits the DISTINCT_SCAN','line_number':442,'multiline':False]['text':' optimization.','line_number':443,'multiline':False]['text':' $limit after a group has no effect on our ability to produce a DISTINCT_SCAN plan.','line_number':488,'multiline':False]['text':' For $limit, $project, $limit, we can optimize away both $limit stages.','line_number':495,'multiline':False]['text':' Make sure that we end up using the smaller limit of 1.','line_number':501,'multiline':False]['text':' We can optimize away interleaved $limit and $skip after a project.','line_number':507,'multiline':False]['text':' $sort can be optimized away even if there is no index to provide the sort.','line_number':532,'multiline':False]['text':' $match, $sort, $limit can be optimized away even if there is no index to provide the sort.','line_number':541,'multiline':False]['text':' $match, $sort, $project, $limit can be optimized away.','line_number':548,'multiline':False]['text':' Test a case where there is a projection that can be covered by an index, but a blocking sort is','line_number':556,'multiline':False]['text':' still required. In this case, the entire pipeline can be optimized away.','line_number':557,'multiline':False]['text':' Test that even if we don't have a projection stage at the front of the pipeline but there is a','line_number':571,'multiline':False]['text':' finite dependency set, a projection representing this dependency set is pushed down.','line_number':572,'multiline':False]['text':' Both $group must be pushed down.','line_number':591,'multiline':False]['text':' PROJECTION_SIMPLE must be optimized away.','line_number':593,'multiline':False]['text':' At bottom, there must be a COLLSCAN.','line_number':595,'multiline':False]['text':' When $group pushdown is enabled, $group will be lowered and the PROJECTION_SIMPLE will be','line_number':613,'multiline':False]['text':' erased.','line_number':614,'multiline':False]['text':' When $group pushdown is disabled, $group will not be lowered and the PROJECTION_SIMPLE will','line_number':620,'multiline':False]['text':' be preserved.','line_number':621,'multiline':False]['text':' Similar as above, but with $addFields stage at the front of the pipeline.','line_number':629,'multiline':False]['text':' Asserts that, if SBE is enabled, we can remove a redundant projection stage before a group.','line_number':649,'multiline':False]['text':' The projection and group should both be pushed down, and we expect to optimize away the','line_number':652,'multiline':False]['text':' projection after realizing that it will not affect the output of the group.','line_number':653,'multiline':False]['text':' If group pushdown is not enabled we still expect the projection to be pushed down.','line_number':659,'multiline':False]['text':' Asserts that a projection stage is not optimized out of a pipeline with a projection and a group','line_number':668,'multiline':False]['text':' stage.','line_number':669,'multiline':False]['text':' The projection and group should both be pushed down, and we expect NOT to optimize away','line_number':672,'multiline':False]['text':' the projection.','line_number':673,'multiline':False]['text':' If group pushdown is not enabled we still expect the projection to be pushed down.','line_number':678,'multiline':False]['text':' Test that an inclusion projection is optimized away if it is redundant/unnecessary.','line_number':687,'multiline':False]['text':' Test that an inclusion projection is NOT optimized away if it is NOT redundant. This one','line_number':691,'multiline':False]['text':' fails to include a dependency of the $group and so will have an impact on the query results.','line_number':692,'multiline':False]['text':' TODO SERVER-67323 This one could be removed, but is left for future work.','line_number':695,'multiline':False]['text':' Test that an inclusion projection is NOT optimized away if group depends on the entire document.','line_number':699,'multiline':False]['text':' If the $group depends on both "path" and "path.subpath" then it will generate a $project on only','line_number':702,'multiline':False]['text':' "path" to express its dependency set. We then fail to optimize that out. As a future improvement,','line_number':703,'multiline':False]['text':' we could improve the optimizer to ensure that a projection stage is not present in the resulting','line_number':704,'multiline':False]['text':' plan.','line_number':705,'multiline':False]['text':' TODO SERVER-XYZ Assert this can be optimized out.','line_number':707,'multiline':False]['text':' assertProjectionCanBeRemovedBeforeGroup(pipeline, "PROJECTION_DEFAULT");','line_number':708,'multiline':False]['text':' assertProjectionCanBeRemovedBeforeGroup(pipeline, "PROJECTION_SIMPLE");','line_number':709,'multiline':False]['text':' Test that a computed projection at the front of the pipeline is pushed down, even if there's no','line_number':716,'multiline':False]['text':' finite dependency set.','line_number':717,'multiline':False]['text':' The projections below are not removed because they fail to include the $group's dependencies.','line_number':722,'multiline':False]['text':' Test that a computed projection at the front of the pipeline is pushed down when there's a','line_number':730,'multiline':False]['text':' finite dependency set. Additionally, the group pushdown shouldn't erase the computed','line_number':731,'multiline':False]['text':' projection.','line_number':732,'multiline':False]['text':' Test that a computed projection at the front of the pipeline is pushed down when there's a','line_number':738,'multiline':False]['text':' finite dependency set.','line_number':739,'multiline':False]['text':' We generate a projection stage from dependency analysis, even if the pipeline begins with an','line_number':748,'multiline':False]['text':' exclusion projection.','line_number':749,'multiline':False]['text':' Similar as above, but with a field 'a' presented both in the finite dependency set, and in the','line_number':769,'multiline':False]['text':' exclusion projection at the front of the pipeline.','line_number':770,'multiline':False]['text':' Test that an exclusion projection at the front of the pipeline is pushed down if there is no','line_number':790,'multiline':False]['text':' finite dependency set.','line_number':791,'multiline':False]['text':' Test that $replaceRoot can be pushed down.','line_number':796,'multiline':False]['text':' getMore cases.','line_number':819,'multiline':False]['text':' Test getMore on a collection with an optimized away pipeline.','line_number':821,'multiline':False]['text':' Test getMore on a view with an optimized away pipeline. Since views cannot be created when','line_number':839,'multiline':False]['text':' imlicit sharded collection mode is on, this test will be run only on a non-sharded','line_number':840,'multiline':False]['text':' collection.','line_number':841,'multiline':False]['text':' Test getMore puts a correct namespace into profile data for a colletion with optimized away','line_number':852,'multiline':False]['text':' pipeline. Cannot be run on mongos as profiling can be enabled only on mongod. Also profiling','line_number':853,'multiline':False]['text':' is supported on WiredTiger only.','line_number':854,'multiline':False]['text':' Should turn off profiling before dropping system.profile collection.','line_number':856,'multiline':False]['text':' Don't profile the setFCV command, which could be run during this test in the','line_number':859,'multiline':False]['text':' fcv_upgrade_downgrade_replica_sets_jscore_passthrough suite.','line_number':860,'multiline':False]['text':' Test getMore puts a correct namespace into profile data for a view with an optimized away','line_number':877,'multiline':False]['text':' pipeline.','line_number':878,'multiline':False]['text':' Don't profile the setFCV command, which could be run in the','line_number':881,'multiline':False]['text':' fcv_upgrade_downgrade_replica_sets_jscore_passthrough.','line_number':882,'multiline':False]