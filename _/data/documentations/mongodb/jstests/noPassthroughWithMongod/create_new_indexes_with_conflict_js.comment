['text':'
 * @tags: [
 *     # Uses failpoints that the mongos does not have.
 *     assumes_against_mongod_not_mongos,
 *     # Sets a failpoint on one mongod, so switching primaries would break the test.
 *     does_not_support_stepdowns,
 * ]
 ','line_number':1,'multiline':True]['text':' Test scenario where a WriteConflictException is caught during createIndexes.','line_number':17,'multiline':False]['text':' Make sure at least one execution occurs where the failpoint activates.','line_number':21,'multiline':False]['text':' Test scenario where a conflicting collection creation occurs, and createIndexes "loses" to the','line_number':32,'multiline':False]['text':' create collection.','line_number':33,'multiline':False]['text':' Since the createCollection succeeded first, the index build should proceed as if the','line_number':42,'multiline':False]['text':' collection already existed.','line_number':43,'multiline':False]['text':' Simulate a scenario where a createCollection succeeds before createIndexes can create the same','line_number':47,'multiline':False]['text':' collection.','line_number':48,'multiline':False]['text':' Make sure the new index was successfully built, either by the parallel shell or via','line_number':75,'multiline':False]['text':' createConflictingIndex. We should have the _id index and the 'the_b_1_index' index just built','line_number':76,'multiline':False]['text':' in the parallel shell.','line_number':77,'multiline':False]