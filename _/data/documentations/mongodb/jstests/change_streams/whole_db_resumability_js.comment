['text':' Basic tests for resuming a $changeStream that is open against all collections in a database.','line_number':1,'multiline':False]['text':' Do not run in whole-cluster passthrough since this test assumes that the change stream will be','line_number':2,'multiline':False]['text':' invalidated by a database drop.','line_number':3,'multiline':False]['text':' @tags: [do_not_run_in_whole_cluster_passthrough]','line_number':4,'multiline':False]['text':' Drop and recreate the collections to be used in this set of tests.','line_number':12,'multiline':False]['text':' Insert a single document to each collection and save the resume token from the first insert.','line_number':20,'multiline':False]['text':' Test resuming the change stream after the first insert should pick up the insert on the','line_number':27,'multiline':False]['text':' second collection.','line_number':28,'multiline':False]['text':' Insert a third document to the first collection and test that the change stream picks it up.','line_number':39,'multiline':False]['text':' Test resuming after the first insert again.','line_number':45,'multiline':False]['text':' Test resume after second insert.','line_number':54,'multiline':False]['text':' Rename the collection and attempt to resume from the 'rename' notification. Skip this','line_number':62,'multiline':False]['text':' test when running on a sharded collection, since these cannot be renamed.','line_number':63,'multiline':False]['text':' Insert into the renamed collection.','line_number':84,'multiline':False]['text':' Resume from the rename notification using 'resumeAfter' and verify that the change stream','line_number':87,'multiline':False]['text':' returns the next insert.','line_number':88,'multiline':False]['text':' Resume from the rename notification using 'startAfter' and verify that the change stream','line_number':99,'multiline':False]['text':' returns the next insert.','line_number':100,'multiline':False]['text':' Rename back to the original collection for reliability of the collection drops when','line_number':111,'multiline':False]['text':' dropping the database.','line_number':112,'multiline':False]['text':' Explicitly drop one collection to ensure reliability of the order of notifications from the','line_number':116,'multiline':False]['text':' dropDatabase command.','line_number':117,'multiline':False]['text':' Dropping a database should generate a 'drop' notification for each collection, a','line_number':124,'multiline':False]['text':' 'dropDatabase' notification, and finally an 'invalidate'.','line_number':125,'multiline':False]['text':' For sharded passthrough suites, we know that the last entry will be a 'dropDatabase' however','line_number':129,'multiline':False]['text':' there may be multiple collection drops in 'dropDbChanges' depending on the number of involved','line_number':130,'multiline':False]['text':' shards.','line_number':131,'multiline':False]['text':' Test resuming from the first collection drop and the second collection drop as a result of','line_number':138,'multiline':False]['text':' dropping the database.','line_number':139,'multiline':False]['text':' Recreate the test collection.','line_number':151,'multiline':False]['text':' Test resuming from the 'dropDatabase' entry using 'resumeAfter'.','line_number':154,'multiline':False]['text':' Test resuming from the 'invalidate' entry using 'resumeAfter'.','line_number':163,'multiline':False]['text':' Test resuming from the 'dropDatabase' entry using 'startAfter'.','line_number':172,'multiline':False]['text':' Test resuming from the 'invalidate' entry using 'startAfter' and verifies it picks up the','line_number':181,'multiline':False]['text':' insert after recreating the db/collection.','line_number':182,'multiline':False]