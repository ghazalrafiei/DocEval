['text':'*
 * Tests that a change stream will correctly generate endOfTransaction event for unprepared
 * transactions.
 * @tags: [
 *   uses_transactions,
 *   requires_fcv_71,
 *   requires_majority_read_concern,
 *   requires_snapshot_read,
 *   featureFlagEndOfTransactionChangeEvent,
 * ]
 ','line_number':1,'multiline':True]['text':' Create these variables before starting the transaction. In sharded passthroughs, accessing','line_number':55,'multiline':False]['text':' db[collname] may attempt to implicitly shard the collection, which is not allowed in a txn.','line_number':56,'multiline':False]['text':' First transaction only affects main collection','line_number':64,'multiline':False]['text':' Second transaction only affects other collection','line_number':70,'multiline':False]['text':' Third transaction affects both collections','line_number':76,'multiline':False]['text':' Forth transaction affects the other db','line_number':83,'multiline':False]['text':' Drop the collection. This will trigger an "invalidate" event at the end of the collection-wide','line_number':89,'multiline':False]['text':' stream.','line_number':90,'multiline':False]['text':' Define the set of changes expected for the single-collection case per the operations above.','line_number':124,'multiline':False]['text':' If we are running in a sharded passthrough, then this may have been a multi-shard transaction.','line_number':145,'multiline':False]['text':' Change streams will interleave the txn events from across the shards in (clusterTime, txnOpIndex)','line_number':146,'multiline':False]['text':' order, and so may not reflect the ordering of writes in the test. We thus verify that exactly the','line_number':147,'multiline':False]['text':' expected set of events are observed, but we relax the ordering requirements.','line_number':148,'multiline':False]