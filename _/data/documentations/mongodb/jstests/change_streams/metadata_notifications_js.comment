['text':' Tests of $changeStream notifications for metadata operations.','line_number':1,'multiline':False]['text':' Do not run in whole-cluster passthrough since this test assumes that the change stream will be','line_number':2,'multiline':False]['text':' invalidated by a database drop.','line_number':3,'multiline':False]['text':' @tags: [','line_number':4,'multiline':False]['text':'   do_not_run_in_whole_cluster_passthrough,','line_number':5,'multiline':False]['text':'   requires_fcv_63,','line_number':6,'multiline':False]['text':' ]','line_number':7,'multiline':False]['text':' Test that it is possible to open a new change stream cursor on a collection that does not','line_number':19,'multiline':False]['text':' exist.','line_number':20,'multiline':False]['text':' Asserts that resuming a change stream with 'spec' and an explicit simple collation returns','line_number':24,'multiline':False]['text':' the results specified by 'expected'.','line_number':25,'multiline':False]['text':' Cursor creation succeeds, but there are no results. We do not expect to see a notification','line_number':35,'multiline':False]['text':' for collection creation.','line_number':36,'multiline':False]['text':' We explicitly test getMore, to ensure that the getMore command for a non-existent collection','line_number':40,'multiline':False]['text':' does not return an error.','line_number':41,'multiline':False]['text':' Dropping the empty database should not generate any notification for the change stream, since','line_number':46,'multiline':False]['text':' the collection does not exist yet.','line_number':47,'multiline':False]['text':' After collection creation, we expect to see oplog entries for each subsequent operation.','line_number':53,'multiline':False]['text':' Create oplog entries of type insert, update, delete, and drop.','line_number':60,'multiline':False]['text':' We should get oplog entries of type insert, update, delete, drop, and invalidate. The cursor','line_number':66,'multiline':False]['text':' should be closed.','line_number':67,'multiline':False]['text':' Verify we can startAfter the invalidate, but no new events may be retrieved. This test','line_number':81,'multiline':False]['text':' exercises the bug described in SERVER-41196.','line_number':82,'multiline':False]['text':' Verify that we can resume a stream after a collection drop without an explicit collation.','line_number':86,'multiline':False]['text':' Recreate the collection.','line_number':93,'multiline':False]['text':' Test resuming the change stream from the collection drop using 'resumeAfter'. If running in a','line_number':97,'multiline':False]['text':' sharded passthrough suite, resuming from the drop will first return the drop from the other','line_number':98,'multiline':False]['text':' shard before returning an invalidate.','line_number':99,'multiline':False]['text':' Test resuming the change stream from the invalidate after the drop using 'resumeAfter'.','line_number':112,'multiline':False]['text':' Even after the 'invalidate' event has been filtered out, the cursor should hold the resume token','line_number':121,'multiline':False]['text':' of the 'invalidate' event.','line_number':122,'multiline':False]['text':' Test resuming the change stream from the collection drop using 'startAfter'.','line_number':131,'multiline':False]['text':' Test resuming the change stream from the 'invalidate' notification using 'startAfter'.','line_number':138,'multiline':False]['text':' Test that renaming a collection being watched generates a "rename" entry followed by an','line_number':155,'multiline':False]['text':' "invalidate". This is true if the change stream is on the source or target collection of the','line_number':156,'multiline':False]['text':' rename. Sharded collections cannot be renamed.','line_number':157,'multiline':False]['text':' Repeat the test, this time with a change stream open on the target.','line_number':175,'multiline':False]['text':' Test resuming the change stream from the collection rename using 'resumeAfter'.','line_number':193,'multiline':False]['text':' Test resuming the change stream from the invalidate after the rename using 'resumeAfter'.','line_number':199,'multiline':False]['text':' Test resuming the change stream from the rename using 'startAfter'.','line_number':208,'multiline':False]['text':' Test resuming the change stream from the invalidate after the rename using 'startAfter'.','line_number':215,'multiline':False]['text':' Repeat the test again, this time using the 'dropTarget' option with an existing target','line_number':231,'multiline':False]['text':' collection.','line_number':232,'multiline':False]['text':' dropTarget ','line_number':235,'multiline':True]['text':' Test the behavior of a change stream watching the target collection of a $out aggregation','line_number':249,'multiline':False]['text':' stage.','line_number':250,'multiline':False]['text':' Note that $out will first create a temp collection, and then rename the temp collection','line_number':253,'multiline':False]['text':' to the target. Do not explicitly check the 'ns' field.','line_number':254,'multiline':False]['text':' Test that dropping a database will first drop all of it's collections, invalidating any','line_number':261,'multiline':False]['text':' change streams on those collections.','line_number':262,'multiline':False]