['text':'*
 * Tests that an aggregate with a $changeStream stage reports the latest postBatchResumeToken. This
 * test verifies postBatchResumeToken semantics that are common to sharded and unsharded streams.
 * @tags: [uses_transactions]
 ','line_number':1,'multiline':True]['text':' Drop and recreate collections to assure a clean run.','line_number':9,'multiline':False]['text':' Helper function which swallows an assertion if we are running on a sharded cluster.','line_number':15,'multiline':False]['text':' Tracks _id of documents inserted to ensure that we do not duplicate.','line_number':22,'multiline':False]['text':' Test that postBatchResumeToken is present on an initial aggregate of batchSize: 0.','line_number':25,'multiline':False]['text':' Test that the PBRT does not advance beyond its initial value for a change stream whose','line_number':31,'multiline':False]['text':' startAtOperationTime is in the future, even as writes are made to the test collection.','line_number':32,'multiline':False]['text':' Verify that no events are returned and the PBRT does not advance or go backwards, even as','line_number':39,'multiline':False]['text':' documents are written into the collection.','line_number':40,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':42,'multiline':False]['text':' Test that postBatchResumeToken is present on empty initial aggregate batch.','line_number':48,'multiline':False]['text':' Test that postBatchResumeToken is present on empty getMore batch.','line_number':54,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':55,'multiline':False]['text':' Test that postBatchResumeToken advances with returned events. Insert one document into the','line_number':60,'multiline':False]['text':' collection and consume the resulting change stream event.','line_number':61,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':63,'multiline':False]['text':' Because the retrieved event is the most recent entry in the oplog, the PBRT should be equal to','line_number':66,'multiline':False]['text':' the resume token of the last item in the batch and greater than the initial PBRT.','line_number':67,'multiline':False]['text':' When running in a sharded passthrough, we cannot guarantee that the retrieved event was the last','line_number':70,'multiline':False]['text':' item in the oplog, and so we cannot assert that the PBRT is equal to the event's resume token.','line_number':71,'multiline':False]['text':' Now seed the collection with enough documents to fit in two batches.','line_number':75,'multiline':False]['text':' Test that the PBRT for a resumed stream is the given resume token if no result are returned.','line_number':80,'multiline':False]['text':' Test that postBatchResumeToken advances with getMore. Iterate the cursor and assert that the','line_number':87,'multiline':False]['text':' observed postBatchResumeToken advanced.','line_number':88,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':89,'multiline':False]['text':' The postBatchResumeToken is again equal to the final token in the batch, and greater than the','line_number':91,'multiline':False]['text':' PBRT from the initial response.','line_number':92,'multiline':False]['text':' When running in a sharded passthrough, we cannot guarantee that the retrieved event was the last','line_number':99,'multiline':False]['text':' item in the oplog, and so we cannot assert that the PBRT is equal to the event's resume token.','line_number':100,'multiline':False]['text':' Test that postBatchResumeToken advances with writes to an unrelated collection. First make','line_number':104,'multiline':False]['text':' sure there is nothing left in our cursor, and obtain the latest PBRT...','line_number':105,'multiline':False]['text':' ... then test that it advances on an insert to an unrelated collection.','line_number':114,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':117,'multiline':False]['text':' Insert two documents into the collection which are of the maximum BSON object size.','line_number':122,'multiline':False]['text':' Test that we return the correct postBatchResumeToken in the event that the batch hits the','line_number':131,'multiline':False]['text':' byte size limit. Despite the fact that the batchSize is 2, we should only see 1 result,','line_number':132,'multiline':False]['text':' because the second result cannot fit in the batch.','line_number':133,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':134,'multiline':False]['text':' Obtain the resume token and the PBRT from the first document.','line_number':137,'multiline':False]['text':' Now retrieve the second event and confirm that the PBRTs and resume tokens are in-order.','line_number':141,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':143,'multiline':False]['text':' Sharded collection passthroughs use prepared transactions, which require majority read concern.','line_number':151,'multiline':False]['text':' If the collection is sharded and majority read concern is disabled, skip the transaction tests.','line_number':152,'multiline':False]['text':' Test that the PBRT is correctly updated when reading events from within a transaction.','line_number':160,'multiline':False]['text':' Write 3 documents to testCollection and 1 to the unrelated collection within the transaction.','line_number':168,'multiline':False]['text':' Grab the next 2 events, which should be the first 2 events in the transaction. As of SERVER-37364','line_number':176,'multiline':False]['text':' the co-ordinator of a distributed transaction returns before all participants have acknowledged','line_number':177,'multiline':False]['text':' the decision, and so not all events may yet be majority-visible. We therefore wait until we see','line_number':178,'multiline':False]['text':' both expected events in the first set of results retrieved from the transaction.','line_number':179,'multiline':False]['text':' Start a new stream from the most recent resume token we retrieved.','line_number':182,'multiline':False]['text':' Wait until we see the first results from the stream.','line_number':185,'multiline':False]['text':' There should be two distinct events in the batch.','line_number':187,'multiline':False]['text':' The clusterTime should be the same on each, but the resume token keeps advancing.','line_number':191,'multiline':False]['text':' On a sharded cluster, the events in the txn may be spread across multiple shards. Events from','line_number':194,'multiline':False]['text':' each shard will all have the same clusterTime, but the clusterTimes may differ between shards.','line_number':195,'multiline':False]['text':' Therefore, we cannot guarantee that the clusterTime of txnEvent2 is always the same as the','line_number':196,'multiline':False]['text':' clusterTime of txnEvent1, since the events may have occurred on different shards.','line_number':197,'multiline':False]['text':' The PBRT of the first transaction batch is equal to the last document's resumeToken. We have','line_number':202,'multiline':False]['text':' more events to return from the transaction, and so the PBRT cannot have advanced any further.','line_number':203,'multiline':False]['text':' Now get the next batch. This contains the third of the four transaction operations.','line_number':207,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':209,'multiline':False]['text':' The clusterTime of this event is the same as the two events from the previous batch, but its','line_number':212,'multiline':False]['text':' resume token is greater than the previous PBRT.','line_number':213,'multiline':False]['text':' As before, we cannot guarantee that the clusterTime of txnEvent3 is always the same as that of','line_number':215,'multiline':False]['text':' txnEvent1 when running in a sharded cluster. However, the PBRT should advance in any deployment.','line_number':216,'multiline':False]['text':' Because we wrote to the unrelated collection, the final event in the transaction does not','line_number':220,'multiline':False]['text':' appear in the batch. Confirm that the postBatchResumeToken has been set correctly.','line_number':221,'multiline':False]