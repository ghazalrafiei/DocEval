['text':' Tests that a change stream will correctly unwind applyOps entries generated by a transaction, and','line_number':1,'multiline':False]['text':' that we can resume from any point within the transaction.','line_number':2,'multiline':False]['text':' @tags: [uses_transactions, requires_snapshot_read, requires_majority_read_concern]','line_number':3,'multiline':False]['text':' Record the clusterTime at the outset of the test, before any writes are performed.','line_number':22,'multiline':False]['text':' Do an insert outside of a transaction.','line_number':25,'multiline':False]['text':' Open a session, and perform two writes within a transaction.','line_number':28,'multiline':False]['text':' Create these variables before starting the transaction. In sharded passthroughs, accessing','line_number':39,'multiline':False]['text':' db[collname] may attempt to implicitly shard the collection, which is not allowed in a txn.','line_number':40,'multiline':False]['text':' Two inserts on the main test collection.','line_number':47,'multiline':False]['text':' One insert on a collection that we're not watching. This should be skipped by the','line_number':51,'multiline':False]['text':' single-collection change stream.','line_number':52,'multiline':False]['text':' One insert on a collection in a different database. This should be skipped by the single','line_number':55,'multiline':False]['text':' collection and single-db changestreams.','line_number':56,'multiline':False]['text':' Now insert another document, not part of a transaction.','line_number':62,'multiline':False]['text':' Drop the collection. This will trigger a "drop" event, which in the case of the single-collection','line_number':65,'multiline':False]['text':' stream will be followed by an "invalidate".','line_number':66,'multiline':False]['text':' Define the set of all changes expected to be generated by the operations above.','line_number':69,'multiline':False]['text':' Validate that we observe all expected changes in the stream, and replace the'expectedChanges'','line_number':126,'multiline':False]['text':' list with the changes returned by ChangeStreamTest. These will include the _id resume tokens for','line_number':127,'multiline':False]['text':' each change, so subsequent tests will be able to resume from any point.','line_number':128,'multiline':False]['text':' If we are running in a sharded passthrough, then this may have been a multi-shard txn. Change','line_number':138,'multiline':False]['text':' streams will interleave the txn events from across the shards in (clusterTime, txnOpIndex)','line_number':139,'multiline':False]['text':' order, and so may not reflect the ordering of writes in the test. The ordering of events is','line_number':140,'multiline':False]['text':' important for later tests, so if we are running on mongoS we verify that exactly the expected','line_number':141,'multiline':False]['text':' set of events are observed, and then we adopt the order in which they were returned.','line_number':142,'multiline':False]['text':' Helper function to find the first non-transaction event and the first two transaction events in','line_number':152,'multiline':False]['text':' the given list of change stream events.','line_number':153,'multiline':False]['text':' Return the array indices of each event, and the events themselves.','line_number':158,'multiline':False]['text':'','line_number':169,'multiline':False]['text':' Test behavior of single-collection change streams with apply ops.','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':' Filter out any events that aren't on the main test collection namespace.','line_number':173,'multiline':False]['text':' Verify that the stream returns the expected sequence of changes.','line_number':177,'multiline':False]['text':' Obtain the first non-transaction change and the first two in-transaction changes.','line_number':180,'multiline':False]['text':' Resume after the first non-transaction change. Be sure we see the documents from the','line_number':184,'multiline':False]['text':' transaction again.','line_number':185,'multiline':False]['text':' Resume after the first transaction change. Be sure we see the second change again.','line_number':193,'multiline':False]['text':' Try starting another change stream from the second change caused by the transaction. Verify','line_number':201,'multiline':False]['text':' that we can see the insert performed after the transaction was committed.','line_number':202,'multiline':False]['text':' A collection drop only invalidates single-collection','line_number':206,'multiline':False]['text':' change streams.','line_number':207,'multiline':False]['text':' Verify that the next event observed by the stream is an invalidate following the collection drop.','line_number':212,'multiline':False]['text':'','line_number':216,'multiline':False]['text':' Test behavior of whole-db change streams with apply ops.','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' In a sharded cluster, whole-db-or-cluster streams will see a collection drop from each shard.','line_number':220,'multiline':False]['text':' Filter out any events that aren't on the main test database.','line_number':225,'multiline':False]['text':' Obtain the first non-transaction change and the first two in-transaction changes.','line_number':228,'multiline':False]['text':' Verify that a whole-db stream can be resumed from the middle of the transaction, and that it','line_number':232,'multiline':False]['text':' will see all subsequent changes including the insert on the other collection but NOT the','line_number':233,'multiline':False]['text':' changes on the other DB.','line_number':234,'multiline':False]['text':'','line_number':242,'multiline':False]['text':' Test behavior of whole-cluster change streams with apply ops.','line_number':243,'multiline':False]['text':'','line_number':244,'multiline':False]['text':' Obtain the first non-transaction change and the first two in-transaction changes.','line_number':246,'multiline':False]['text':' Verify that a whole-cluster stream can be resumed from the middle of the transaction, and','line_number':250,'multiline':False]['text':' that it will see all subsequent changes including the insert on the other collection and the','line_number':251,'multiline':False]['text':' changes on the other DB.','line_number':252,'multiline':False]