['text':'*
 * Class that tracks the document counts in the QE state collections for every unique
 * field+value pair that exists in the encrypted data collection.
 *
 * NOTE: This tracker is only accurate if the encrypted fields being tracked all have
 * a contention factor of 0.  Also, the type of the encrypted value has to be a string.
 ','line_number':1,'multiline':True]['text':' fieldStats is a map of field names to a map of values mapped to objects
           containing stats counters. For example:
            {
                "first" : {
                    "erwin" : { nonAnchors: 2, anchors: 0, nullAnchor: false, ecoc: 2, new: true},
                    ...
                },
                ...
            }
        ','line_number':10,'multiline':True]['text':'*
     * Updates the stats after inserting a single encrypted document that contains the
     * specified field (key) and value pair.
     * Every insert of an encrypted field adds one non-anchor to the ESC and adds one
     * entry in the ECOC.
     *
     * @param {string} key the field name
     * @param {string} value the field value
     ','line_number':23,'multiline':True]['text':'*
     * Updates the stats after compacting the collection where documents
     * containing the specified encrypted fields exist.
     * For every encrypted value that has been inserted for each field that has not been
     * compacted/cleaned-up (i.e. has one or more ECOC entries), we update the stats for this
     * field+value pair by adding one ESC anchor, and clearing the counts for non-anchors & ecoc.
     *
     * This assumes that all non-anchors & ecoc entries for this value have been deleted after
     * compaction.
     *
     * @param {string} keys list of field names that were compacted
     ','line_number':46,'multiline':True]['text':'*
     * Updates the stats after cleanup of the encrypted collection where documents
     * containing the specified encrypted fields exist.
     * For every field+value pair that has been inserted but not yet compacted/cleaned-up
     * (i.e. has one or more ECOC entries), we update the stats for this field+value pair
     * by adding one ESC null anchor (if none exists yet), and clearing the
     * counts for normal anchors, non-anchors, & ecoc.
     *
     * This assumes that all non-anchors and normal anchors for this value have been deleted
     * from the ESC after cleanup. This also assumes all ECOC entries for this value have
     * been deleted post-cleanup.
     *
     * @param {string} keys list of field names that were compacted
     ','line_number':77,'multiline':True]['text':'*
     * Returns an object that contains the aggregated statistics for each
     * field specified in keys.
     *
     * @param  {string} keys list of field names that were compacted
     * @returns {Object}
     ','line_number':111,'multiline':True]['text':' # of ESC entries','line_number':120,'multiline':False]['text':' # of ESC non-anchors','line_number':121,'multiline':False]['text':' # of ESC anchors','line_number':122,'multiline':False]['text':' # of ESC null anchors','line_number':123,'multiline':False]['text':' # of ESC anchors that may be deleted in the next cleanup','line_number':124,'multiline':False]['text':' # of null anchors that may be inserted in the next cleanup','line_number':125,'multiline':False]['text':' # of ECOC entries','line_number':126,'multiline':False]['text':' # of ECOC entries that are unique','line_number':127,'multiline':False]['text':' # of new values','line_number':128,'multiline':False]['text':' anchor binary hops','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' null anchor read for lambda','line_number':157,'multiline':False]['text':' # reads to find rho','line_number':162,'multiline':False]['text':' # reads in the binary search iterations','line_number':163,'multiline':False]['text':' extra read if no anchors exist','line_number':164,'multiline':False]['text':' binary hops','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':' anchor read for lambda','line_number':168,'multiline':False]['text':' estimated # of reads to find final value of rho','line_number':170,'multiline':False]['text':' estimated # of binary search iterations','line_number':171,'multiline':False]['text':' extra read if no non-anchors exist','line_number':172,'multiline':False]['text':'*
     * Returns a lower-bound on how many ESC reads will be performed if a
     * cleanup is performed on the current encrypted collection state.
     * NOTE: call this *before* calling cleanup and before updating the tracker
     *       with updateStatsPostCleanupForFields.
     *
     * @param  {string} keys list of field names that have been added to the encrypted collection
     * @returns {int}
     ','line_number':176,'multiline':True]['text':' # of reads into in-mem delete set','line_number':189,'multiline':False]['text':' value not compacted','line_number':198,'multiline':False]['text':' null anchor read','line_number':200,'multiline':False]['text':'*
     * Returns a lower-bound on how many ESC reads will be performed if a
     * compact is performed on the current encrypted collection state.
     * NOTE: call this *before* calling compact and before updating the tracker
     *       with updateStatsPostCompactForFields.
     *
     * @param  {string} keys list of field names that have been added to the encrypted collection
     * @returns {int}
     ','line_number':208,'multiline':True]['text':' # of reads into in-mem delete set','line_number':221,'multiline':False]['text':' value not compacted','line_number':230,'multiline':False]['text':' null anchor read','line_number':232,'multiline':False]