['text':'*
 * The purpose of this test is to verify that simple CRUD operations are rolled back
 * successfully in multiversion replica sets. This test induces communication between
 * the rollback node and the sync source during rollback. This is done in order to
 * exercise rollback via refetch in the case that refetch is necessary.
 ','line_number':1,'multiline':True]['text':' Insert four documents on both nodes.','line_number':18,'multiline':False]['text':' Perform operations only on the rollback node:','line_number':26,'multiline':False]['text':'   1. Delete a document.','line_number':27,'multiline':False]['text':'   2. Update a document only on this node.','line_number':28,'multiline':False]['text':'   3. Update a document on both nodes.','line_number':29,'multiline':False]['text':' All three documents will be refetched during rollback.','line_number':30,'multiline':False]['text':' Perform operations only on the sync source:','line_number':37,'multiline':False]['text':'   1. Make a conflicting write on one of the documents the rollback node updates.','line_number':38,'multiline':False]['text':'   2. Insert a new document.','line_number':39,'multiline':False]['text':'*
 * Executes and validates rollback between a pair of nodes with the given versions.
 *
 * @param {string} testName the name of the test being run
 * @param {string} rollbackNodeVersion the desired version for the rollback node
 * @param {string} syncSourceVersion the desired version for the sync source
 *
 ','line_number':44,'multiline':True]['text':' Set up replica set.','line_number':58,'multiline':False]['text':' Set up Rollback Test.','line_number':61,'multiline':False]['text':' Perform operations that will be rolled back.','line_number':66,'multiline':False]['text':' Perform different operations only on the sync source.','line_number':70,'multiline':False]['text':' Wait for rollback to finish.','line_number':74,'multiline':False]['text':' Test rollback between latest rollback node and downgrading sync node.','line_number':81,'multiline':False]['text':' Do some operations to be rolled back.','line_number':116,'multiline':False]['text':' Restart server replication on the tiebreaker node so that we can replicate the FCV change.','line_number':127,'multiline':False]['text':' Set the failpoint so that downgrading will fail.','line_number':135,'multiline':False]['text':' Sync source's FCV should be in downgrading to lastLTS while the rollback node's FCV should be','line_number':142,'multiline':False]['text':' in latest.','line_number':143,'multiline':False]['text':' Rollback node should now have synced from the sync source and its FCV should be downgrading','line_number':153,'multiline':False]['text':' to lastLTS.','line_number':154,'multiline':False]['text':' We can upgrade immediately.','line_number':165,'multiline':False]['text':' We can finish downgrading.','line_number':172,'multiline':False]['text':' Test rollback between downgrading rollback node and lastLTS sync node.','line_number':185,'multiline':False]['text':' Execute common operations, and make the set get into downgrading to lastLTS.','line_number':210,'multiline':False]['text':' Set the failpoint so that downgrading will fail.','line_number':213,'multiline':False]['text':' Do some operations to be rolled back.','line_number':227,'multiline':False]['text':' Restart server replication on the tiebreaker node so that we can replicate the FCV change.','line_number':238,'multiline':False]['text':' Sync source's FCV should be in lastLTS while the rollback node's FCV should be in downgrading','line_number':248,'multiline':False]['text':' to lastLTS.','line_number':249,'multiline':False]['text':' Rollback node should now have synced from the sync source and its FCV should be lastLTS.','line_number':259,'multiline':False]['text':'*
 * Sets up a multiversion replica set.
 *
 * Note that, regardless of which node in the rollbackNode-syncSource pair requires
 * which version, there is only one possible way to start up such a cluster:
 *
 * 1. Start up the first two nodes with the higher of the two versions.
 * 2. Set the FCV to the lower version in order to be able to include the third node.
 * 3. Bring up the third node and add it to the set, with the lower binary version.
 * 4. This always results in a higher-version primary and a lower-version secondary,
 *    so if a test case specifies the lower version on the rollback node (i.e. the
 *    opposite setup), this function will force the current primary and secondary
 *    to switch roles.
 *
 * This function returns a replica set with the intended rollback node as the primary.
 *
 * @param {string} testName the name of the test being run
 * @param {string} rollbackNodeVersion the desired version for the rollback node
 * @param {string} syncSourceVersion the desired version for the sync source
 ','line_number':270,'multiline':True]['text':' Start up a two-node cluster first. This cluster contains two data bearing nodes, but the','line_number':303,'multiline':False]['text':' second node will be priority: 0 to ensure that it will never become primary. This, in','line_number':304,'multiline':False]['text':' addition to stopping/restarting server replication should make the node exhibit similar','line_number':305,'multiline':False]['text':' behavior to an arbiter.','line_number':306,'multiline':False]['text':' Wait for both nodes to be up.','line_number':312,'multiline':False]['text':' Set FCV to accommodate third node.','line_number':318,'multiline':False]['text':' Make sure we still have the right node as the primary.','line_number':340,'multiline':False]['text':' Also make sure the other two nodes are in their expected states.','line_number':343,'multiline':False]['text':' Some test cases require that the primary (future rollback node) is running the lower','line_number':352,'multiline':False]['text':' version, which at this point is always on the secondary, so we elect that node instead.','line_number':353,'multiline':False]['text':' Force the current secondary to become the primary.','line_number':358,'multiline':False]