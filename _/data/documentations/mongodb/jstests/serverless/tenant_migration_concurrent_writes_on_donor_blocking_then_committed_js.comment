['text':'*
 * Tests that the donor blocks writes that are executed while the migration in the blocking state,
 * then rejects the writes when the migration committed.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':'*
 * To be used to resume a migration that is paused after entering the blocking state. Waits for the
 * number of blocked reads to reach 'targetNumBlockedWrites' and unpauses the migration.
 ','line_number':38,'multiline':True]['text':'*
 * Tests that the donor blocks writes that are executed in the blocking state and rejects them after
 * the migration commits.
 ','line_number':50,'multiline':True]['text':' Run the command after the migration enters the blocking state.','line_number':67,'multiline':False]['text':' The migration should unpause and commit after the write is blocked. Verify that the write is','line_number':72,'multiline':False]['text':' rejected.','line_number':73,'multiline':False]['text':' Verify that the migration succeeded.','line_number':76,'multiline':False]['text':' retryOnRetryableErrors ','line_number':79,'multiline':True]['text':' Run test cases while the migration is blocked and then rejects after committed.','line_number':91,'multiline':False]