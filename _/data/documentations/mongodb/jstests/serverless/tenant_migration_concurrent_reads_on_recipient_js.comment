['text':'*
 * Tests that
 * - the recipient rejects all reads between when cloning is done and the rejectReadsBeforeTimestamp
 * - the recipient rejects only reads with atClusterTime <
 *   rejectReadsBeforeTimestamp after rejectReadsBeforeTimestamp is reached.
 * - if the migration aborts before the recipient sets a rejectReadsBeforeTimestamp, the recipient
 *   keeps rejecting all reads until the state doc is marked as garbage collectable.
 * - if the migration aborts after rejectReadsBeforeTimestamp is set, the recipient keeps rejecting
 *   reads with atClusterTime < rejectReadsBeforeTimestamp until the state doc is garbage collected.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   # The error code for a rejected recipient command invoked during the reject phase was changed.
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' Verify that SnapshotTooOld error is due to migration conflict not due to the read','line_number':38,'multiline':False]['text':' timestamp being older than the oldest available timestamp.','line_number':39,'multiline':False]['text':'*
 * Tests that the recipient starts rejecting all reads after cloning is done.
 ','line_number':54,'multiline':True]['text':' Wait for the write to mark cloning as done to be replicated to all nodes.','line_number':77,'multiline':False]['text':'*
 * Tests that after the recipient has reached the rejectReadsBeforeTimestamp and
 * after the migration commits, it only rejects reads with atClusterTime <
 * rejectReadsBeforeTimestamp.
 ','line_number':95,'multiline':True]['text':' Select a read timestamp < rejectReadsBeforeTimestamp.','line_number':114,'multiline':False]['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':125,'multiline':False]['text':' the oplog on all the secondaries. This is to ensure that snapshot reads on secondaries with','line_number':126,'multiline':False]['text':' unspecified atClusterTime have read timestamp >= rejectReadsBeforeTimestamp.','line_number':127,'multiline':False]['text':' Untimestamped reads are not rejected after the recipient has applied data past the','line_number':145,'multiline':False]['text':' rejectReadsBeforeTimestamp. Snapshot reads with unspecified atClusterTime should have','line_number':146,'multiline':False]['text':' read timestamp >= rejectReadsBeforeTimestamp so are also not rejected.','line_number':147,'multiline':False]['text':' Untimestamped reads are not rejected after the recipient has committed. Snapshot','line_number':163,'multiline':False]['text':' reads with unspecified atClusterTime should have read timestamp >=','line_number':164,'multiline':False]['text':' rejectReadsBeforeTimestamp so are also not rejected.','line_number':165,'multiline':False]['text':'*
 * Tests that if the migration aborts before the recipient sets the rejectReadsBeforeTimestamp, the
 * recipient keeps rejecting all reads until the state doc is marked as garbage collectable.
 ','line_number':174,'multiline':True]['text':' Force the recipient to abort the migration right before it responds to the first','line_number':189,'multiline':False]['text':' recipientSyncData (i.e. before it receives returnAfterReachingTimestamp in the second','line_number':190,'multiline':False]['text':' recipientSyncData).','line_number':191,'multiline':False]['text':' Wait for the write to mark the state doc as garbage collectable to be replicated to all','line_number':213,'multiline':False]['text':' nodes.','line_number':214,'multiline':False]['text':'*
 * Tests if the migration aborts after rejectReadsBeforeTimestamp is set, the recipient keeps
 * rejecting reads with atClusterTime < rejectReadsBeforeTimestamp until the state doc is garbage
 * collected.
 ','line_number':228,'multiline':True]['text':' Set the delay before a state doc is garbage collected to be short to speed up the test.','line_number':249,'multiline':False]['text':' Select a read timestamp < rejectReadsBeforeTimestamp.','line_number':260,'multiline':False]['text':' Force the donor to abort the migration right after the recipient responds to the second','line_number':263,'multiline':False]['text':' recipientSyncData (i.e. after it has reached the returnAfterReachingTimestamp).','line_number':264,'multiline':False]['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':271,'multiline':False]['text':' the oplog on all the secondaries. This is to ensure that snapshot reads on secondaries with','line_number':272,'multiline':False]['text':' unspecified atClusterTime have read timestamp >= rejectReadsBeforeTimestamp.','line_number':273,'multiline':False]['text':' Untimestamped reads are not rejected after the recipient has applied data past the','line_number':290,'multiline':False]['text':' rejectReadsBeforeTimestamp. Snapshot reads with unspecified atClusterTime should have','line_number':291,'multiline':False]['text':' read timestamp >= rejectReadsBeforeTimestamp so are also not rejected.','line_number':292,'multiline':False]['text':' Force the recipient to preserve all snapshot history to ensure that snapshot reads do','line_number':430,'multiline':False]['text':' not fail with SnapshotTooOld due to snapshot being unavailable.','line_number':431,'multiline':False]['text':' ShardMerge is not robust to migrating the twice in quick succession. We drop the data','line_number':438,'multiline':False]['text':' files to ensure a subsequent tenant migration will avoid trying to merge files from the','line_number':439,'multiline':False]['text':' previous migration.','line_number':440,'multiline':False]