['text':'*
 * Tests that tenant migration donor's in memory state is initialized correctly on initial sync.
 * This test randomly selects a point during the migration to add a node to the donor replica set.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_fcv_62,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' Force the migration to pause after entering a randomly selected state.','line_number':32,'multiline':False]['text':' We must wait for the migration to have finished replicating the recipient keys on the donor set','line_number':54,'multiline':False]['text':' before starting initial sync, otherwise the migration will hang while waiting for initial sync to','line_number':55,'multiline':False]['text':' complete. We wait for the keys to be replicated with 'w: all' write concern.','line_number':56,'multiline':False]['text':' Add the initial sync node and make sure that it does not step up. We must add this node before','line_number':59,'multiline':False]['text':' sending the first 'recipientSyncData' command to avoid the scenario where a new donor node is','line_number':60,'multiline':False]['text':' added in-between 'recipientSyncData' commands to the recipient, prompting a','line_number':61,'multiline':False]['text':' 'ConflictingOperationInProgress' error. We do not support reconfigs that add/removes nodes during','line_number':62,'multiline':False]['text':' a migration.','line_number':63,'multiline':False]['text':' Resume the migration. Wait randomly before resuming initial sync on the new secondary to test','line_number':70,'multiline':False]['text':' the various migration states.','line_number':71,'multiline':False]['text':' Stop replication on the node so that the TenantMigrationAccessBlocker cannot transition its state','line_number':84,'multiline':False]['text':' past what is reflected in the state doc read below.','line_number':85,'multiline':False]