['text':'*
 * Tests the retry logic for fetching committed transactions. We test the following scenarios:
 *
 * 1) Retrying after the migration has already fetched and updated its transactions entries.
 * 2) Retrying while the migration is actively updating its transactions entries.
 * 3) Retrying while the migration is updating, and the donor starts a new transaction on an
 *    existing session.
 * *
 * @tags: [
 *   incompatible_with_macos,
 *   # Shard merge is not resilient to donor restarts.
 *   incompatible_with_shard_merge,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' We expect the following fields to be overwritten by the recipient, so we can remove','line_number':61,'multiline':False]['text':' them when comparing entries between the donor and recipient.','line_number':62,'multiline':False]['text':' Hang the migration after it has fetched and updated its 'config.transactions' entries.','line_number':83,'multiline':False]['text':' Verify that the transaction was updated correctly.','line_number':97,'multiline':False]['text':' Restart the donor primary. This will cause the migration to restart.','line_number':104,'multiline':False]['text':' Let the migration restart and hang before it tries to re-fetch committed transactions.','line_number':108,'multiline':False]['text':' The recipient should indicate that the migration has restarted.','line_number':114,'multiline':False]['text':' The state doc should indicate that the migration has already updated 'config.transaction'','line_number':120,'multiline':False]['text':' entries.','line_number':121,'multiline':False]['text':' Verify that the migration completes successfully.','line_number':125,'multiline':False]['text':' Hang the recipient after it updates the first transaction entry. Have the failpoint throw','line_number':152,'multiline':False]['text':' a retriable error to avoid the potential race condition where the recipient continues','line_number':153,'multiline':False]['text':' processing transaction entries in the same batch after the failpoint is released.','line_number':154,'multiline':False]['text':' Verify that only one transaction was updated correctly.','line_number':168,'multiline':False]['text':' Restart the donor primary. This will cause the migration to restart.','line_number':172,'multiline':False]['text':' Let the migration restart and hang before it tries to re-fetch committed transactions.','line_number':176,'multiline':False]['text':' The recipient should indicate that the migration has restarted.','line_number':182,'multiline':False]['text':' Verify that the 'completedUpdatingTransactionsBeforeStartOpTime' flag is false since the','line_number':188,'multiline':False]['text':' migration was forced to restart before it fully completed fetching.','line_number':189,'multiline':False]['text':' Verify that the migration completes successfully.','line_number':193,'multiline':False]['text':' Start a session on the donor. We will run another transaction on this session later.','line_number':218,'multiline':False]['text':' Hang the recipient after it updates the first transaction entry. Have the failpoint throw','line_number':223,'multiline':False]['text':' a retriable error to avoid the potential race condition where the recipient continues','line_number':224,'multiline':False]['text':' processing transaction entries in the same batch after the failpoint is released.','line_number':225,'multiline':False]['text':' Verify that the recipient receives one of the donor transaction entries.','line_number':239,'multiline':False]['text':' Run a new transaction with the same session on the donor. This will advance its','line_number':243,'multiline':False]['text':' 'lastWriteOpTime' past the recipient's 'startFetchingDonorOpTime'.','line_number':244,'multiline':False]['text':' Note: This update should be applied via the recipient tenant oplog applier instead of the','line_number':245,'multiline':False]['text':' fetch transactions stage.','line_number':246,'multiline':False]['text':' Restart the donor primary. This will cause the migration to restart.','line_number':251,'multiline':False]['text':' Let the migration restart and hang before it tries to re-fetch committed transactions.','line_number':255,'multiline':False]['text':' The recipient should indicate that the migration has restarted.','line_number':261,'multiline':False]['text':' Verify that the 'completedUpdatingTransactionsBeforeStartOpTime' flag is false since the','line_number':267,'multiline':False]['text':' migration was forced to restart before it fully completed fetching.','line_number':268,'multiline':False]['text':' Verify that the migration completes successfully.','line_number':272,'multiline':False]