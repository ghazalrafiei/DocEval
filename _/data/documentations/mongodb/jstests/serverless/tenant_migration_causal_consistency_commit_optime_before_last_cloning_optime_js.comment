['text':'*
 * Verify that causal consistency is respected if a tenant migration commits with an earlier optime
 * timestamp than the latest optime associated with cloning on the recipient.
 *
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_shard_merge,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' Local read concern case.','line_number':32,'multiline':False]['text':' Simulate a lagged node by setting secondaryDelaySecs on one recipient secondary. Verify this','line_number':36,'multiline':False]['text':' does not prevent reading all the tenant's data after the migration commits.','line_number':37,'multiline':False]['text':' Insert tenant data to be copied. Save the operationTime to use for afterClusterTime reads','line_number':71,'multiline':False]['text':' later, simulating a client in a causally consistent session.','line_number':72,'multiline':False]['text':' Do writes on the recipient to advance its cluster time past the donor's.','line_number':83,'multiline':False]['text':' Allow the migration to complete. The cloned op should be written with a later opTime on the','line_number':90,'multiline':False]['text':' recipient than the migration commits with on the donor.','line_number':91,'multiline':False]['text':' Local reads should always see all the tenant's data, with or without afterClusterTime.','line_number':95,'multiline':False]['text':' Majority read concern case.','line_number':116,'multiline':False]['text':' Insert tenant data to be copied.','line_number':129,'multiline':False]['text':' Simulate a lagged node by disabling snapshotting on a secondary so it cannot advance its','line_number':134,'multiline':False]['text':' majority committed snapshot to include the block timestamp. Verify this prevents reading','line_number':135,'multiline':False]['text':' from it until the majority snapshot advances.','line_number':136,'multiline':False]['text':' Do writes on the recipient to advance its cluster time past the donor's and advance the','line_number':150,'multiline':False]['text':' majority committed snapshot on the non-lagged nodes.','line_number':151,'multiline':False]['text':' Allow the migration to complete. The cloned op should commit with a later opTime on the','line_number':158,'multiline':False]['text':' recipient than the migration commits with on the donor.','line_number':159,'multiline':False]['text':' Verify majority reads cannot be served on the lagged recipient secondary with or without','line_number':163,'multiline':False]['text':' afterClusterTime because its majority committed snapshot is behind the block timestamp.','line_number':164,'multiline':False]['text':' Reads on the normal secondary should succeed.','line_number':176,'multiline':False]['text':' When the snapshot is allowed to advance, verify majority reads can now be served on all','line_number':185,'multiline':False]['text':' nodes. Insert to trigger advancing the committed snapshot.','line_number':186,'multiline':False]['text':' Snapshot read concern is tested in replsets/tenant_migration_concurrent_reads_on_recipient.js','line_number':208,'multiline':False]