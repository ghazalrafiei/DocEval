['text':'*
 * Tests that the donor
 * - blocks reads with atClusterTime/afterClusterTime >= blockOpTime that are executed while the
 *   split is in the blocking state but does not block linearizable reads.
 * - does not reject reads with atClusterTime/afterClusterTime >= blockOpTime and linearizable
 *   reads after the split aborts.
 *
 * @tags: [
 *   incompatible_with_eft,
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_63
 * ]
 ','line_number':1,'multiline':True]['text':'*
 * To be used to resume a split that is paused after entering the blocking state. Waits for the
 * number of blocked reads to reach 'targetNumBlockedReads' and unpauses the split.
 ','line_number':31,'multiline':True]['text':'*
 * Tests that the donor unblocks blocked reads (reads with atClusterTime/afterClusterTime >=
 * blockingTimestamp) once the split aborts.
 ','line_number':46,'multiline':True]['text':' Linearizable reads are not blocked.','line_number':52,'multiline':False]['text':' Run the commands after the split enters the blocking state.','line_number':70,'multiline':False]['text':' Run the commands after the split enters the blocking state.','line_number':76,'multiline':False]['text':' Wait for the last oplog entry on the primary to be visible in the committed snapshot view of','line_number':80,'multiline':False]['text':' the oplog on all secondaries to ensure that snapshot reads on the secondaries with','line_number':81,'multiline':False]['text':' unspecified atClusterTime have read timestamp >= blockOpTime.','line_number':82,'multiline':False]['text':' The split should unpause and abort after the read is blocked. Verify that the read','line_number':90,'multiline':False]['text':' unblocks.','line_number':91,'multiline':False]['text':' Reads just get unblocked if the split aborts.','line_number':106,'multiline':False]