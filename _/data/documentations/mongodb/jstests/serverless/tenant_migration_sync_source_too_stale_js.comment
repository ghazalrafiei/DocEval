['text':'*
 * Tests that a migration will retry if the oplog fetcher discovers that its sync source is too
 * stale. We test this with a donor replica set that has two secondaries, 'donorSecondary' and
 * 'delayedSecondary'. We force the recipient to sync from 'donorSecondary'. Then, after the
 * recipient has set its 'startFetchingDonorOpTime', we stop replication on 'delayedSecondary' and
 * advance the OpTime on 'donorSecondary'. Next, we wait until the recipient is about to report that
 * it has reached a consistent state. At this point, it should have advanced its 'lastFetched' to be
 * ahead of 'startFetchingDonorOpTime'. After forcing the recipient to restart and sync from
 * 'delayedSecondary', it should see that it is too stale. As a result, it should retry sync source
 * selection until it finds a sync source that is no longer too stale.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   # Shard merge can only sync from primary therefore this test is not applicable.
 *   incompatible_with_shard_merge,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   # The currentOp output field 'dataSyncCompleted' was renamed to 'migrationCompleted'.
 *   requires_fcv_70,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' Allow non-timestamped reads on donor after migration completes for testing.','line_number':45,'multiline':False]['text':' Set a low value for excluding donor hosts so that the test doesn't take long to retry a sync','line_number':62,'multiline':False]['text':' source.','line_number':63,'multiline':False]['text':' Configure the recipient primary to only choose a secondary as sync source.','line_number':86,'multiline':False]['text':' Turn on the 'shardWaitInHello' failpoint. This will cause the delayed secondary to cease sending','line_number':97,'multiline':False]['text':' hello responses and the RSM should mark the node as down. This is necessary so that the','line_number':98,'multiline':False]['text':' delayed secondary is not chosen as the sync source here.','line_number':99,'multiline':False]['text':' The migration should not be complete.','line_number':111,'multiline':False]['text':' The sync source can only be 'donorSecondary'.','line_number':114,'multiline':False]['text':' Stop replicating on one of the secondaries and advance the OpTime on the other nodes in the','line_number':119,'multiline':False]['text':' donor replica set.','line_number':120,'multiline':False]['text':' Wait for 'lastFetched' to be advanced on the recipient.','line_number':125,'multiline':False]['text':' Wait for the recipient to realize that the donor sync source has been shut down and retry','line_number':140,'multiline':False]['text':' sync source selection.','line_number':141,'multiline':False]['text':' The migration should not be complete.','line_number':150,'multiline':False]['text':' Since 'donorSecondary' was shut down, the sync source can only be 'delayedSecondary'.','line_number':153,'multiline':False]['text':' Verify that the recipient eventually has to restart again, since its lastFetched is ahead of','line_number':163,'multiline':False]['text':' the last OpTime on 'delayedSecondary'.','line_number':164,'multiline':False]['text':' Let 'delayedSecondary' catch back up to the recipient's lastFetched OpTime.','line_number':171,'multiline':False]['text':' Verify that the migration eventually commits successfully.','line_number':177,'multiline':False]