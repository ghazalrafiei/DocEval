['text':'*
 * Tests that the donor retries its steps until success, or it gets an error that should lead to
 * an abort decision.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_shard_merge,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' Set the delay before a donor state doc is garbage collected to be short to speed','line_number':34,'multiline':False]['text':' up the test.','line_number':35,'multiline':False]['text':'*
 * Starts a migration from 'donorRst' and 'recipientRst', uses failCommand to force the
 * recipientSyncData command to fail with the given 'errorCode', and asserts the donor retries on
 * that error and is able to commit.
 ','line_number':69,'multiline':True]['text':' Verify that the command failed.','line_number':95,'multiline':False]['text':'*
 * Starts a migration from 'donorRst' and 'recipientRst', uses failCommand to force the
 * recipientForgetMigration command to fail with the given 'errorCode', and asserts the donor
 * retries on that error and commits.
 ','line_number':108,'multiline':True]['text':' Verify that the initial recipientForgetMigration command failed.','line_number':134,'multiline':False]['text':' Check that forgetMigration properly deletes the stateDoc and mtab from the donor primary.','line_number':139,'multiline':False]['text':' Test an error code that is in the 'Interruption' category but not in the 'isRetriable'','line_number':225,'multiline':False]['text':' category.','line_number':226,'multiline':False]['text':' Each donor state doc is updated three times throughout the lifetime of a tenant migration:','line_number':233,'multiline':False]['text':' - Set the "state" to "blocking"','line_number':234,'multiline':False]['text':' - Set the "state" to "commit"/"abort"','line_number':235,'multiline':False]['text':' - Set the "expireAt" to make the doc garbage collectable by the TTL index.','line_number':236,'multiline':False]['text':' Start up a new thread to run this migration, since the 'failCollectionInserts' failpoint will','line_number':259,'multiline':False]['text':' cause the initial 'donorStartMigration' command to loop forever without returning.','line_number':260,'multiline':False]['text':' Make the insert keep failing for some time.','line_number':264,'multiline':False]['text':' const tenantId = `${kTenantIdPrefix}RetryOnStateDocUpdateError`;','line_number':284,'multiline':False]['text':' Use a random number of skips to fail a random update to config.tenantMigrationDonors.','line_number':296,'multiline':False]['text':' Start up a new thread to run this migration, since we want to continuously send','line_number':304,'multiline':False]['text':' 'donorStartMigration' commands while the 'failCollectionUpdates' failpoint is on.','line_number':305,'multiline':False]['text':' Make the update keep failing for some time.','line_number':315,'multiline':False]['text':' The state docs will only be completed and marked as garbage collectable if the','line_number':321,'multiline':False]['text':' update succeeds.','line_number':322,'multiline':False]