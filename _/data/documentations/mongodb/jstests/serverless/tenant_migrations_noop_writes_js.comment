['text':'*
 * Verifies that nodes can trigger noop writes to satisfy cluster time reads after a tenant
 * migration.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' During "shard merge" tenant migrations, writes to internal DBs are still allowed.','line_number':25,'multiline':False]['text':' To allow after test hooks to run without errors.','line_number':81,'multiline':False]['text':'','line_number':122,'multiline':False]['text':' Run a migration, pausing after selecting a block timestamp to advance cluster time beyond it','line_number':123,'multiline':False]['text':' on the donor.','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':' Disable replication on a recipient secondary so it cannot advance its last applied opTime','line_number':132,'multiline':False]['text':' beyond the latest time on the donor from unrelated writes. The block timestamp will have','line_number':133,'multiline':False]['text':' already been replicated by this point.','line_number':134,'multiline':False]['text':' retryOnRetryableErrors ','line_number':149,'multiline':True]['text':' forgetMigration ','line_number':149,'multiline':True]['text':'','line_number':151,'multiline':False]['text':' Verify reading on the recipient with an afterClusterTime > the block timestamp','line_number':152,'multiline':False]['text':' triggers a noop write on the recipient primary. Unrelated writes on the primary may','line_number':153,'multiline':False]['text':' prevent the noop from taking effect, so we can't check the oplog. appendOplogNote isn't','line_number':154,'multiline':False]['text':' profiled so we use a fail point to detect it.','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' Commit a normal migration, but disable replication on a donor secondary before the commit so','line_number':185,'multiline':False]['text':' it will not learn the outcome.','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':' retryOnRetryableErrors ','line_number':198,'multiline':True]['text':' forgetMigration ','line_number':198,'multiline':True]['text':'','line_number':200,'multiline':False]['text':' Advance cluster time on the recipient beyond the block timestamp.','line_number':201,'multiline':False]['text':'','line_number':202,'multiline':False]['text':'','line_number':214,'multiline':False]['text':' Verify reading from a lagged donor secondary with an afterClusterTime > the block timestamp','line_number':215,'multiline':False]['text':' triggers a noop write on the donor primary. Even though reads later than the block timestamp','line_number':216,'multiline':False]['text':' are rejected and the donor is guaranteed to eventually replicate the migration decision,','line_number':217,'multiline':False]['text':' waiting for read concern is not interrupted upon learning the decision, so the noop is','line_number':218,'multiline':False]['text':' necessary to unblock tenant operations waiting for a cluster time > the block timestamp.','line_number':219,'multiline':False]['text':'','line_number':220,'multiline':False]