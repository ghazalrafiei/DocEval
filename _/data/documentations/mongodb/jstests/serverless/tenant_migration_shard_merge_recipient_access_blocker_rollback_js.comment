['text':'*
 * Tests if the recipient is rolled back well after a migration has been committed, the shard
 * merge recipient access blocker is initialized in the correct state.
 *
 * @tags: [
 *   incompatible_with_macos,
 *   incompatible_with_windows_tls,
 *   requires_majority_read_concern,
 *   requires_persistence,
 *   requires_shard_merge,
 *   serverless,
 *   requires_fcv_71,
 * ]
 ','line_number':1,'multiline':True]['text':' This test case','line_number':33,'multiline':False]['text':' 1) Completes and commits a tenant migration. Then forgets the migration (state doc marked with','line_number':34,'multiline':False]['text':'    'expireAt', but not yet deleted.)','line_number':35,'multiline':False]['text':' 2) Waits until the replica set is stable.','line_number':36,'multiline':False]['text':' 3) Rolls back the primary. This makes the primary recover its tenant migration access blockers.','line_number':37,'multiline':False]['text':' 4) Ensures that a read is possible from the primary.','line_number':38,'multiline':False]['text':' Populate the donor side with data.','line_number':54,'multiline':False]['text':' Complete and commit the migration, and then forget it as well.','line_number':66,'multiline':False]['text':' It should be possible to read from the recipient now.','line_number':73,'multiline':False]['text':' Prepare the recipient primary for rollback, by inserting non-tenant related data on it while','line_number':82,'multiline':False]['text':' replication has been halted.','line_number':83,'multiline':False]['text':' Stepping up one of the secondaries should cause the original primary to rollback.','line_number':88,'multiline':False]['text':' This test case:','line_number':106,'multiline':False]['text':' 1) Sets the replica set up such that the migration has already been committed and forgotten, and','line_number':107,'multiline':False]['text':'    the state doc has been deleted as well.','line_number':108,'multiline':False]['text':' 2) Sends a 'recipientForgetMigration' command to the recipient primary, and waits for the state','line_number':109,'multiline':False]['text':'    doc to persist.','line_number':110,'multiline':False]['text':' 3) Performs a rollback on the recipient primary, so that the access blockers are reconstructed.','line_number':111,'multiline':False]['text':' 4) Performs a read on the recipient primary.','line_number':112,'multiline':False]['text':' We will have the tenant database already on the recipient, as though the tenant migration has','line_number':128,'multiline':False]['text':' already run to completion, and the state document has been cleaned up already.','line_number':129,'multiline':False]['text':' Prevent the "expireAt" field from being populated.','line_number':134,'multiline':False]['text':' Prevent the new primary from marking the state document as garbage collectable.','line_number':136,'multiline':False]['text':' We need to handle network errors as this thread might race with rollback.','line_number':159,'multiline':False]['text':' Run a delayed/retried recipientForgetMigration command after the state doc has been deleted.','line_number':177,'multiline':False]['text':' It should be possible to read from the recipient now.','line_number':184,'multiline':False]['text':' Now perform a rollback on the recipient primary.','line_number':187,'multiline':False]['text':' Stepping up one of the secondaries should cause the original primary to rollback.','line_number':196,'multiline':False]['text':' It should be possible to read from new recipient primary.','line_number':202,'multiline':False]