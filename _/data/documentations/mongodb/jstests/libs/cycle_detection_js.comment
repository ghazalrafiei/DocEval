['text':'*
 * A class representing a directed graph.
 ','line_number':1,'multiline':True]['text':'*
     * If a cycle exists in this graph, then this function returns an array of the nodes comprising
     * the cycle. The returned array is guaranteed to contain at least two elements, where the first
     * and last elements refer to the same node.
     *
     * If a cycle doesn't exist in this graph, then this function returns an empty array.
     *
     * The algorithm implemented here for detecting whether a cycle exists in the graph is adapted
     * from the algorithm for using a depth-first search to determine whether the graph permits a
     * topological sort. Note that a topological ordering is possible if and only if the graph is
     * acyclic.
     *
     * References:
     *   - https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search
     *   - http://www.cs.cornell.edu/courses/cs2112/2012sp/lectures/lec24/lec24-12sp.html
     ','line_number':30,'multiline':True]['text':' We've already explored all neighbors of 'otherNode'. Since we are currently','line_number':67,'multiline':False]['text':' in the process of visiting 'node', it must be the case there doesn't exist a','line_number':68,'multiline':False]['text':' path from 'otherNode' to 'node'. There is therefore no cycle containing both','line_number':69,'multiline':False]['text':' 'node' and 'otherNode'.','line_number':70,'multiline':False]['text':' We're currently in the process of exploring all neighbors of 'otherNode'.','line_number':75,'multiline':False]['text':' Since we are currently in the process of visiting 'node', it must be the case','line_number':76,'multiline':False]['text':' that there exists a path from 'otherNode' to 'node'. There is therefore a','line_number':77,'multiline':False]['text':' cycle containing both 'node' and 'otherNode'.','line_number':78,'multiline':False]['text':' A cycle has been detected during the recursive call to doDepthFirstSearch().','line_number':84,'multiline':False]['text':' Unless we've already closed the loop, the (node, otherNode) edge must be part','line_number':85,'multiline':False]['text':' of it. Note that we use friendlyEqual() to match the definition of sameness','line_number':86,'multiline':False]['text':' as the mongo shell's Map type.','line_number':87,'multiline':False]['text':' We've already explored all paths from 'node' by starting from one of its','line_number':101,'multiline':False]['text':' ancestors and didn't find a cycle. There is therefore no cycle involving 'node'','line_number':102,'multiline':False]['text':' so we move onto another node.','line_number':103,'multiline':False]