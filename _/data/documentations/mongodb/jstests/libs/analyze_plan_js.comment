['text':' Contains helpers for checking, based on the explain output, properties of a','line_number':1,'multiline':False]['text':' plan. For instance, there are helpers for checking whether a plan is a collection','line_number':2,'multiline':False]['text':' scan or whether the plan is covered (index only).','line_number':3,'multiline':False]['text':'*
 * Returns query planner part of explain for every node in the explain report.
 ','line_number':8,'multiline':True]['text':'*
 * Utility to return the 'queryPlanner' section of 'explain'. The input is the root of the explain
 * output.
 *
 * This helper function can be used for any optimizer.
 ','line_number':18,'multiline':True]['text':' Sharded case.','line_number':28,'multiline':False]['text':'*
 * Extracts and returns an array of explain outputs for every shard in a sharded cluster; returns
 * the original explain output in case of a single replica set.
 ','line_number':42,'multiline':True]['text':'*
 * Returns the output from a single shard if 'explain' was obtained from an unsharded collection;
 * returns 'explain' as is otherwise.
 *
 * This helper function can be used for any optimizer.
 ','line_number':55,'multiline':True]['text':' There should only be one shard given that this function assumes that 'explain' was','line_number':65,'multiline':False]['text':' obtained from an unsharded collection.','line_number':66,'multiline':False]['text':'*
 * Returns a sub-element of the 'queryPlanner' explain output which represents a winning plan.
 * For sharded collections, this may return the top-level "winningPlan" which contains the shards.
 * To ensure getting the winning plan for a specific shard, provide as input the specific explain
 * for that shard i.e, queryPlanner.winningPlan.shards[shardNames[0]].
 *
 * This helper function can be used for any optimizer.
 ','line_number':73,'multiline':True]['text':' The 'queryPlan' format is used when the SBE engine is turned on. If this field is present,','line_number':82,'multiline':False]['text':' it will hold a serialized winning plan, otherwise it will be stored in the 'winningPlan'','line_number':83,'multiline':False]['text':' field itself.','line_number':84,'multiline':False]['text':'*
 * Returns the winning plan from the corresponding sub-node of classic/SBE explain output. Takes
 * into account that the plan may or may not have agg stages.
 *
 * This helper function can be used for any optimizer.
 ','line_number':89,'multiline':True]['text':' Pipeline stages' explain output come in two shapes:','line_number':105,'multiline':False]['text':' 1. When in single node, as a single object array','line_number':106,'multiline':False]['text':' 2. When in sharded, as an object.','line_number':107,'multiline':False]['text':'*
 * Returns an element of explain output which represents a rejected candidate plan.
 *
 * This helper function can be used for any optimizer. However, currently for the CQF optimizer,
 * rejected plans are not included in the explain output
 ','line_number':119,'multiline':True]['text':' The 'queryPlan' format is used when the SBE engine is turned on. If this field is present,','line_number':126,'multiline':False]['text':' it will hold a serialized winning plan, otherwise it will be stored in the 'rejectedPlan'','line_number':127,'multiline':False]['text':' element itself.','line_number':128,'multiline':False]['text':'*
 * Returns a sub-element of the 'cachedPlan' explain output which represents a query plan.
 *
 * This helper function can be used only with "classic" optimizer. TODO SERVER-83768: extend the
 * functionality of this helper for CQF plans.
 ','line_number':132,'multiline':True]['text':' The 'queryPlan' format is used when the SBE engine is turned on. If this field is present, it','line_number':139,'multiline':False]['text':' will hold a serialized cached plan, otherwise it will be stored in the 'cachedPlan' field','line_number':140,'multiline':False]['text':' itself.','line_number':141,'multiline':False]['text':'*
 * Given the root stage of explain's JSON representation of a query plan ('root'), returns all
 * subdocuments whose stage is 'stage'. Returns an empty array if the plan does not have the
 * requested stage. if 'stage' is 'null' returns all the stages in 'root'.
 *
 * This helper function can be used for any optimizer.
 ','line_number':145,'multiline':True]['text':'*
 * Given the root stage of explain's JSON representation of a query plan ('root'), returns a list of
 * all the stages in 'root'.
 *
 * This helper function can be used for any optimizer.
 ','line_number':223,'multiline':True]['text':'*
 * Given the root stage of explain's JSON representation of a query plan ('root'), returns the
 * subdocument with its stage as 'stage'. Returns null if the plan does not have such a stage.
 * Asserts that no more than one stage is a match.
 *
 * This helper function can be used for any optimizer.
 ','line_number':233,'multiline':True]['text':'*
 * Returns the set of rejected plans from the given replset or sharded explain output.
 *
 * This helper function can be used for any optimizer.
 ','line_number':254,'multiline':True]['text':'*
 * Given the root stage of explain's JSON representation of a query plan ('root'), returns true if
 * the query planner reports at least one rejected alternative plan, and false otherwise.
 *
 * This helper function can be used for any optimizer. Currently for CQF optimizer, this function
 * returns always true (TODO SERVER-77719: address this behavior).
 ','line_number':272,'multiline':True]['text':' TODO SERVER-77719: The existence of alternative/rejected plans will be re-evaluated','line_number':282,'multiline':False]['text':' in the future.','line_number':283,'multiline':False]['text':' This is a sharded agg explain. Recursively check whether any of the shards has rejected','line_number':298,'multiline':False]['text':' plans.','line_number':299,'multiline':False]['text':' This is an agg explain.','line_number':306,'multiline':False]['text':' This is some sort of query explain.','line_number':313,'multiline':False]['text':' SERVER-77719: Update regarding the expected behavior of the CQF optimizer. Currently','line_number':317,'multiline':False]['text':' CQF explains are empty, when the optimizer returns alternative plans, we should','line_number':318,'multiline':False]['text':' address this.','line_number':319,'multiline':False]['text':' This is an unsharded explain.','line_number':321,'multiline':False]['text':' This is a sharded explain. Each entry in the shards array contains a 'winningPlan' and','line_number':332,'multiline':False]['text':' 'rejectedPlans'.','line_number':333,'multiline':False]['text':'*
 * Returns an array of execution stages from the given replset or sharded explain output.
 *
 * This helper function can be used for any optimizer.
 ','line_number':339,'multiline':True]['text':'*
 * Returns the winningPlan.queryPlan of each shard in the explain in a list.
 *
 * This helper function can be used for any optimizer.
 ','line_number':365,'multiline':True]['text':'*
 * Returns an array of strings representing the "planSummary" values found in the input explain.
 * Assumes the given input is the root of an explain.
 *
 * The helper supports sharded and unsharded explain. It can be used with any optimizer. It returns
 * an empty list for non-CQF plans, since only CQF will attach planSummary to explain output.
 ','line_number':387,'multiline':True]['text':' Queries that use the find system have top-level queryPlanner and winningPlan fields. If it's','line_number':397,'multiline':False]['text':' a sharded query, the shards have their own winningPlan fields to look at.','line_number':398,'multiline':False]['text':' Queries that use the agg system either have a top-level stages field or a top-level shards','line_number':411,'multiline':False]['text':' field. getQueryPlanner pulls the queryPlanner out of the stages/cursor subfields.','line_number':412,'multiline':False]['text':'*
 * Given the root stage of agg explain's JSON representation of a query plan ('root'), returns all
 * subdocuments whose stage is 'stage'. This can either be an agg stage name like "$cursor" or
 * "$sort", or a query stage name like "IXSCAN" or "SORT".
 *
 * If 'useQueryPlannerSection' is set to 'true', the 'queryPlanner' section of the explain output
 * will be used to lookup the given 'stage', even if 'executionStats' section is available.
 *
 * Returns an empty array if the plan does not have the requested stage. Asserts that agg explain
 * structure matches expected format.
 *
 * This helper function can be used for any optimizer.
 ','line_number':427,'multiline':True]['text':' If execution stats are available, then use the execution stats tree. Otherwise use the','line_number':461,'multiline':False]['text':' plan info from the "queryPlanner" section.','line_number':462,'multiline':False]['text':' The shard was able to optimize away the pipeline, which means that the format of','line_number':490,'multiline':False]['text':' the explain output doesn't have the "stages" array.','line_number':491,'multiline':False]['text':' Move onto the next shard.','line_number':495,'multiline':False]['text':' If the agg pipeline was completely optimized away, then the agg explain output will be','line_number':516,'multiline':False]['text':' formatted like the explain output for a find command.','line_number':517,'multiline':False]['text':'*
 * Given the root stage of agg explain's JSON representation of a query plan ('root'), returns the
 * subdocument with its stage as 'stage'. Returns null if the plan does not have such a stage.
 * Asserts that no more than one stage is a match.
 *
 * If 'useQueryPlannerSection' is set to 'true', the 'queryPlanner' section of the explain output
 * will be used to lookup the given 'stage', even if 'executionStats' section is available.
 *
 * This helper function can be used for any optimizer.
 ','line_number':526,'multiline':True]['text':'*
 * Given the root stage of agg explain's JSON representation of a query plan ('root'), returns
 * whether the plan has a stage called 'stage'. It could have more than one to allow for sharded
 * explain plans, and it can search for a query planner stage like "FETCH" or an agg stage like
 * "$group."
 *
 * This helper function can be used for any optimizer.
 ','line_number':551,'multiline':True]['text':'*
 * Given the root stage of explain's BSON representation of a query plan ('root'),
 * returns true if the plan has a stage called 'stage'.
 *
 * Expects that the stage appears once or zero times per node. If the stage appears more than once
 * on one node's query plan, an error will be thrown.
 ','line_number':563,'multiline':True]['text':' If we are executing against a mongos, we may get more than one occurrence of the stage.','line_number':574,'multiline':False]['text':'*
 * A query is covered iff it does *not* have a FETCH stage or a COLLSCAN.
 *
 * Given the root stage of explain's BSON representation of a query plan ('root'),
 * returns true if the plan is index only. Otherwise returns false.
 *
 * This helper function can be used for any optimizer.
 ','line_number':585,'multiline':True]['text':' SERVER-77719: Ensure that the decision for using the scan lines up with CQF optimizer.','line_number':594,'multiline':False]['text':'*
 * Returns true if the BSON representation of a plan rooted at 'root' is using
 * an index scan, and false otherwise.
 *
 * This helper function can be used for any optimizer.
 ','line_number':600,'multiline':True]['text':' SERVER-77719: Ensure that the decision for using the scan lines up with CQF optimizer.','line_number':607,'multiline':False]['text':'*
 * Returns true if the plan is formed of a single EOF stage. False otherwise.
 *
 * This helper function can be used for any optimizer.
 ','line_number':611,'multiline':True]['text':'*
 * Returns true if the BSON representation of a plan rooted at 'root' is using
 * the idhack fast path, and false otherwise.
 *
 * This helper function can be used only with classic optimizer (TODO SERVER-77719: address this
 * behavior).
 ','line_number':620,'multiline':True]['text':' SERVER-77719: Ensure that the decision for using the scan lines up with CQF optimizer.','line_number':628,'multiline':False]['text':'*
 * Returns true if the BSON representation of a plan indicates that this plan was generated by the
 * fastpath logic of the Bonsai optimiser.
 ','line_number':632,'multiline':True]['text':'*
 * Returns true if the BSON representation of a plan rooted at 'root' is using
 * a collection scan, and false otherwise.
 *
 * This helper function can be used for any optimizer. This assumes that the PhysicalScan operator
 * of CQF is equivalent to COLLSCAN.
 ','line_number':640,'multiline':True]['text':'*
 * Returns true if the BSON representation of a plan rooted at 'root' is using
 * a clustered Ix scan, and false otherwise.
 *
 * This helper function can be used only for the "classic" optimizer. Note that it can be applied to
 * CQF plans, but it will always return false because there is not yet a clustered IXSCAN
 * representation in Bonsai.
 ','line_number':651,'multiline':True]['text':' SERVER-77719: Ensure that the decision for using the scan lines up with CQF optimizer.','line_number':660,'multiline':False]['text':'*
 * Returns true if the BSON representation of a plan rooted at 'root' is using the aggregation
 * framework, and false otherwise.
 *
 * This helper function can be used for any optimizer.
 ','line_number':664,'multiline':True]['text':'*
 * Returns true if the BSON representation of a plan rooted at 'root' is using just the query layer,
 * and false otherwise.
 *
 * This helper function can be used for any optimizer.
 ','line_number':680,'multiline':True]['text':'*
 * Get the "chunk skips" for a single shard. Here, "chunk skips" refer to documents excluded by the
 * shard filter.
 *
 * This helper function can be used only with the "classic" optimizer. TODO SERVER-77719: extend the
 * functionality of this helper for CQF operators
 ','line_number':696,'multiline':True]['text':' If the query plan's shard filter has a 'planNodeId' value, we search for the','line_number':712,'multiline':False]['text':' corresponding SBE filter stage and use its stats to determine how many documents were','line_number':713,'multiline':False]['text':' excluded.','line_number':714,'multiline':False]['text':' Otherwise, we assume that execution used a "classic" SHARDING_FILTER stage, which','line_number':720,'multiline':False]['text':' explicitly reports a "chunkSkips" value.','line_number':721,'multiline':False]['text':'*
 * Get the sum of "chunk skips" from all shards. Here, "chunk skips" refer to documents excluded by
 * the shard filter.
 *
 * This helper function can be used only with the "classic" optimizer. TODO SERVER-77719: extend the
 * functionality of this helper for CQF operators
 ','line_number':727,'multiline':True]['text':'*
 * Given explain output at executionStats level verbosity, for a count query, confirms that the root
 * stage is COUNT or RECORD_STORE_FAST_COUNT and that the result of the count is equal to
 * 'expectedCount'.
 *
 * This helper function can be used for any optimizer.
 ','line_number':746,'multiline':True]['text':' If passed through mongos, then the root stage should be the mongos SINGLE_SHARD stage or','line_number':756,'multiline':False]['text':' SHARD_MERGE stages, with COUNT as the root stage on each shard. If explaining directly on the','line_number':757,'multiline':False]['text':' shard, then COUNT is the root stage.','line_number':758,'multiline':False]['text':'*
 * Verifies that a given query uses an index and is covered when used in a count command.
 *
 * This helper function can be used for any optimizer.
 ','line_number':782,'multiline':True]['text':' SERVER-77719: Update regarding the expected behavior of the CQF optimizer.','line_number':789,'multiline':False]['text':' Same query as a count command should also be covered.','line_number':799,'multiline':False]['text':' SERVER-77719: Update regarding the expected behavior of the CQF optimizer.','line_number':801,'multiline':False]['text':'*
 * Runs explain() operation on 'cmdObj' and verifies that all the stages in 'expectedStages' are
 * present exactly once in the plan returned. When 'stagesNotExpected' array is passed, also
 * verifies that none of those stages are present in the explain() plan.
 *
 * This helper function can be used for any optimizer.
 ','line_number':814,'multiline':True]['text':'*
 * Utility to obtain a value from 'explainRes' using 'getValueCallback'.
 *
 * This helper function can be used for any optimizer.
 ','line_number':835,'multiline':True]['text':'*
 * Get the 'planCacheKey' from 'explainRes'.
 *
 * This helper function can be used for any optimizer.
 ','line_number':848,'multiline':True]['text':'*
 * Get the 'queryHash' from 'explainRes'.
 *
 * This helper function can be used for any optimizer.
 ','line_number':863,'multiline':True]['text':'*
 * Helper to run a explain on the given query shape and get the "planCacheKey" from the explain
 * result.
 *
 * This helper function can be used for any optimizer.
 ','line_number':875,'multiline':True]['text':'*
 * Helper to run a explain on the given pipeline and get the "planCacheKey" from the explain
 * result.
 ','line_number':889,'multiline':True]['text':'*
 * Given the winning query plan, flatten query plan tree into a list of plan stage names.
 *
 * This helper function can be used for any optimizer.
 ','line_number':899,'multiline':True]['text':'*
 * Assert that a command plan has no FETCH stage or if the stage is present, it has no filter.
 *
 * This helper function can be used only with the "classic" optimizer. TODO SERVER-77719: extend the
 * functionality of this helper for CQF operators
 ','line_number':914,'multiline':True]['text':'*
 * Assert that a find plan has a FETCH stage with expected filter and returns a specified number of
 * results.
 *
 * This helper function can be used only with the "classic" optimizer.
 ','line_number':929,'multiline':True]['text':'*
 * Recursively checks if a javascript object contains a nested property key and returns the value.
 * Note, this only recurses into other objects, array elements are ignored.
 *
 * This helper function can be used for any optimizer.
 ','line_number':953,'multiline':True]['text':'*
 * Recognizes the query engine used by the query (sbe/classic).
 *
 * This helper function can be used for any optimizer.
 ','line_number':977,'multiline':True]['text':'*
 * Asserts that a pipeline runs with the engine that is passed in as a parameter.
 *
 * This helper function can be used for any optimizer.
 ','line_number':987,'multiline':True]['text':'*
 * Returns the optimizer (name string) used to generate the explain output ("classic" or "CQF")
 *
 * This helper function can be used for any optimizer.
 ','line_number':997,'multiline':True]['text':'*
 * Returns the number of index scans in a query plan.
 *
 * This helper function can be used for any optimizer.
 ','line_number':1010,'multiline':True]['text':'*
 * Returns the number of column scans in a query plan.
 *
 * This helper function can be used for any optimizer.
 ','line_number':1022,'multiline':True]['text':' SERVER-77719: Update regarding the expected behavior of the CQF optimizer (what is the stage','line_number':1028,'multiline':False]['text':' name for CQF for a column scan).','line_number':1029,'multiline':False]['text':'
 * Returns whether a query is using a multikey index.
 *
 * This helper function can be used only for "classic" optimizer.
 ','line_number':1039,'multiline':True]['text':' SERVER-77719: Update to expected this method to allow also use with CQF optimizer.','line_number':1045,'multiline':False]