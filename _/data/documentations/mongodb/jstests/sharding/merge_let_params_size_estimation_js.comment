['text':'*
 * Test which verifies that $merge accounts for the size of let parameters and runtime constants
 * when it serializes writes to send to other nodes.
 *
 * @tags: [
 *  # The $merge in this test targets the '_id' field, and requires a unique index.
 *  expects_explicit_underscore_id_index,
 * ]
 ','line_number':1,'multiline':True]['text':' Function to run the test against a test fixture. Accepts an object that contains the following','line_number':12,'multiline':False]['text':' fields:','line_number':13,'multiline':False]['text':' - testFixture: The fixture to run the test against.','line_number':14,'multiline':False]['text':' - conn: Connection to the test fixture specified above.','line_number':15,'multiline':False]['text':' - shardLocal and shardOutput: Indicates whether the local/output collection should be sharded in','line_number':16,'multiline':False]['text':'  this test run (ignored when not running against a sharded cluster).','line_number':17,'multiline':False]['text':' When running against a sharded cluster, configure the collections according to','line_number':28,'multiline':False]['text':' 'shardLocal' and 'shardOutput'.','line_number':29,'multiline':False]['text':' Insert two large documents in both collections. By inserting the documents with the same _id','line_number':45,'multiline':False]['text':' values in both collections and splitting these documents between chunks, this will guarantee','line_number':46,'multiline':False]['text':' that we need to serialize and send update command(s) across the wire when targeting the','line_number':47,'multiline':False]['text':' output collection.','line_number':48,'multiline':False]['text':' The sizes of the different update command components are deliberately chosen to test the','line_number':55,'multiline':False]['text':' batching logic when the update is targeted to another node in the cluster. In particular, the','line_number':56,'multiline':False]['text':' update command will contain the 10MB 'outFieldValue' and we will be updating two 4MB','line_number':57,'multiline':False]['text':' documents. The 18MB total exceeds the 16MB size limit, so we expect the batching logic to','line_number':58,'multiline':False]['text':' split the two documents into separate batches of 14MB each.','line_number':59,'multiline':False]['text':' If this is a replica set, we need to target a secondary node to force writes to go over','line_number':74,'multiline':False]['text':' the wire.','line_number':75,'multiline':False]['text':' The aggregate should not fail.','line_number':82,'multiline':False]['text':' Verify that each document in the output collection contains the value of 'outField'.','line_number':85,'multiline':False]['text':' Insert four large documents in both collections. As before, this will force updates to be','line_number':96,'multiline':False]['text':' sent across the wire, but this will generate double the batches.','line_number':97,'multiline':False]['text':' The aggregate should not fail.','line_number':108,'multiline':False]['text':' Verify that each document in the output collection contains the value of 'outField'.','line_number':111,'multiline':False]['text':' If the documents and the let parameters are large enough, the $merge is expected to fail.','line_number':122,'multiline':False]['text':' TODO: SERVER-80318 Delete block','line_number':132,'multiline':False]['text':' Test against a replica set.','line_number':133,'multiline':False]['text':' Test against a sharded cluster.','line_number':144,'multiline':False]