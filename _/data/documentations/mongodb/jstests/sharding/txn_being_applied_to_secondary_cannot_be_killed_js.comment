['text':'*
 * Tests that the periodic transaction abort job cannot kill transactions being
 * applied on secondaries.
 *
 * @tags: [uses_transactions, uses_prepare_transaction, uses_multi_shard_transaction]
 ','line_number':1,'multiline':True]['text':' Set to something high enough that a slow machine shouldn't cause our','line_number':14,'multiline':False]['text':' transaction to be aborted before committing, but low enough that the test','line_number':15,'multiline':False]['text':' won't be unnecessarily slow when we wait for the periodic transaction','line_number':16,'multiline':False]['text':' abort job to run.','line_number':17,'multiline':False]['text':' Make secondaries unelectable.','line_number':21,'multiline':False]['text':' Create a sharded collection with a chunk on each shard:','line_number':31,'multiline':False]['text':' shard0: [-inf, 0)','line_number':32,'multiline':False]['text':' shard1: [0, 10)','line_number':33,'multiline':False]['text':' shard2: [10, +inf)','line_number':34,'multiline':False]['text':' These forced refreshes are not strictly necessary; they just prevent extra TXN log lines','line_number':46,'multiline':False]['text':' from the shards starting, aborting, and restarting the transaction due to needing to','line_number':47,'multiline':False]['text':' refresh after the transaction has started.','line_number':48,'multiline':False]['text':' Start a new session and start a transaction on that session.','line_number':53,'multiline':False]['text':' Insert a document onto each shard to make this a cross-shard transaction.','line_number':57,'multiline':False]['text':' Set a failpoint to make oplog application hang on one secondary after applying the','line_number':63,'multiline':False]['text':' operations in the transaction but before preparing the TransactionParticipant.','line_number':64,'multiline':False]['text':' Commit the transaction, which will execute two-phase commit.','line_number':69,'multiline':False]['text':' Use assert.soon(), because although coordinateCommitTransaction currently blocks','line_number':73,'multiline':False]['text':' until the commit process is fully complete, it will eventually be changed to only','line_number':74,'multiline':False]['text':' block until the decision is *written*, so the documents may not be visible','line_number':75,'multiline':False]['text':' immediately.','line_number':76,'multiline':False]['text':' Wait for the periodic transaction abort job to run while oplog','line_number':84,'multiline':False]['text':' application is hanging. The job should run every 30 seconds due to the','line_number':85,'multiline':False]['text':' transactionLifetimeLimitSeconds parameter being set to 30 above, so the','line_number':86,'multiline':False]['text':' likelihood of it running while sleeping 60 seconds is high. If it does','line_number':87,'multiline':False]['text':' not run, the test will trivially pass without testing the desired','line_number':88,'multiline':False]['text':' behavior, but it will not cause the test to fail.','line_number':89,'multiline':False]['text':' Allow oplog application to continue by turning off the failpoint. The','line_number':93,'multiline':False]['text':' transaction should prepare successfully and should not have been aborted','line_number':94,'multiline':False]['text':' by the transaction abort job.','line_number':95,'multiline':False]