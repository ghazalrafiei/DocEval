['text':'
This test runs a cross-shard transaction where the transaction is in the prepared state, then run
an fsyncLock which will acquire the global S lock once the prepared transaction commits.
 * @tags: [
 *   requires_sharding,
 *   requires_fsync,
 * ]
 ','line_number':1,'multiline':True]['text':' Set up a sharded collection with two chunks','line_number':19,'multiline':False]['text':' Run a cross-shard transaction that has shard0 as the coordinator. Make the TransactionCoordinator','line_number':79,'multiline':False]['text':' thread hang right before the commit decision is written (i.e. after the transaction has entered','line_number':80,'multiline':False]['text':' the "prepared" state).','line_number':81,'multiline':False]['text':' This way the txn thread holds onto the collection locks','line_number':82,'multiline':False]['text':' Wait for fsyncLockWorker threads on the shard primaries to wait for the global S lock (enqueued','line_number':91,'multiline':False]['text':' in the conflict queue).','line_number':92,'multiline':False]['text':'blocked fsyncLockWorker threads','line_number':93,'multiline':True]['text':' Unpause the TransactionCoordinator.','line_number':95,'multiline':False]['text':' fsyncLock completes, because the prepared transaction has committed.','line_number':98,'multiline':False]['text':' fsyncUnlock to allow the committed prepared transaction to return to the client. Whilst the','line_number':101,'multiline':False]['text':' transaction has committed, majority acknowledgement is still queued behind the global S lock;','line_number':102,'multiline':False]['text':' fsyncUnlock rescinds the global S lock, which in turn allows the transaction to be majority','line_number':103,'multiline':False]['text':' committed and the client to return an OK response.','line_number':104,'multiline':False]