['text':'','line_number':1,'multiline':False]['text':' Tests that serverStatus includes sharding statistics by default and the sharding statistics are','line_number':2,'multiline':False]['text':' indeed the correct values. Does not test the catalog cache portion of sharding statistics.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' @tags: [','line_number':5,'multiline':False]['text':'     uses_transactions,','line_number':6,'multiline':False]['text':' ]','line_number':7,'multiline':False]['text':' Documents inserted in this test are in the shape {_id: int} so the size is 18 bytes','line_number':18,'multiline':False]['text':' The size of each document inserted in this test is 1 byte, so the number of bytes','line_number':36,'multiline':False]['text':' deleted must be exactly `numDocs`','line_number':37,'multiline':False]['text':' TODO SERVER-xyz remove FCV check and `db` argument once v8.0 branches out','line_number':59,'multiline':False]['text':' Helper function to run moveChunk, retrying on ConflictingOperationInProgress. We need to','line_number':94,'multiline':False]['text':' retry on ConflictingOperationInProgress to handle the following case:','line_number':95,'multiline':False]['text':' 1. One test case does a moveChunk, expecting it to fail. It fails and completes on the donor','line_number':96,'multiline':False]['text':' and returns to the test, while the recipient is still lagging for some reason and has not','line_number':97,'multiline':False]['text':' completed.','line_number':98,'multiline':False]['text':' 2. In the next test case, we attempt a moveChunk involving the same chunk and shards, but the','line_number':99,'multiline':False]['text':' previous moveChunk is still in progress on the recipient shard from the previous migration,','line_number':100,'multiline':False]['text':' causing this new moveChunk to return ConflictingOperationInProgress.','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':' This is expected behavior, so we retry until success or until some other unexpected error','line_number':103,'multiline':False]['text':' occurs.','line_number':104,'multiline':False]['text':' Kick off the recursive helper function.','line_number':117,'multiline':False]['text':'*
 * Set a MODE_IS collection lock on 'collectionNs' to be held for 1 hour. This will ensure that the
 * lock will not be released before desired. The operation can be killed later to release the lock.
 *
 * 'sleepComment' adds a comment so that the operation is can be identified for waitForCommand().
 ','line_number':121,'multiline':True]['text':' Set a MODE_IS collection lock to be held for 1 hours.','line_number':129,'multiline':False]['text':' Holding this lock for 1 hour will trigger a test timeout.','line_number':130,'multiline':False]['text':' Check the number of sharded collections.','line_number':160,'multiline':False]['text':' Move chunk from shard0 to shard1 without docs.','line_number':168,'multiline':False]['text':' Insert docs and then move chunk again from shard1 to shard0.','line_number':173,'multiline':False]['text':' Check that numbers are indeed cumulative. Move chunk from shard0 to shard1.','line_number':182,'multiline':False]['text':' Move chunk from shard1 to shard0.','line_number':187,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' Tests for the count of migrations aborting from lock timeouts.','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':' Lower migrationLockAcquisitionMaxWaitMS so migrations time out more quickly.','line_number':196,'multiline':False]['text':' Counter starts at 0.','line_number':204,'multiline':False]['text':' Pause a migration before entering the critical section.','line_number':207,'multiline':False]['text':' Start a transaction and insert to the migrating chunk to block entering the critical section.','line_number':214,'multiline':False]['text':' Unpause the migration and it should time out entering the critical section.','line_number':219,'multiline':False]['text':' Clean up the transaction and verify the counter was incremented in serverStatus.','line_number':224,'multiline':False]['text':' Writes are blocked during the critical section, so insert a document into the chunk to be','line_number':229,'multiline':False]['text':' moved before the migration begins that can be read later.','line_number':230,'multiline':False]['text':' Pause a migration after entering the critical section, but before entering the commit phase.','line_number':233,'multiline':False]['text':' Use the sleep cmd to acquire the collection MODE_IS lock asynchronously so that the migration','line_number':240,'multiline':False]['text':' cannot commit.','line_number':241,'multiline':False]['text':' Wait for the sleep command to start.','line_number':247,'multiline':False]['text':' Unpause the migration and it should time out entering the commit phase.','line_number':254,'multiline':False]['text':' Kill the sleep command in order to release the collection MODE_IS lock.','line_number':259,'multiline':False]['text':' Verify the counter was incremented in serverStatus.','line_number':264,'multiline':False]['text':'','line_number':270,'multiline':False]['text':' Tests for the count of migrations aborted due to concurrent index operations.','line_number':271,'multiline':False]['text':'','line_number':272,'multiline':False]['text':' Counter starts at 0.','line_number':273,'multiline':False]['text':' Pause a migration after cloning starts.','line_number':276,'multiline':False]['text':' Run an index command.','line_number':283,'multiline':False]['text':' Unpause the migration and verify that it gets aborted.','line_number':286,'multiline':False]['text':' Pause a migration before entering the critical section.','line_number':293,'multiline':False]['text':' Run an index command.','line_number':300,'multiline':False]['text':' Unpause the migration and verify that it gets aborted.','line_number':303,'multiline':False]