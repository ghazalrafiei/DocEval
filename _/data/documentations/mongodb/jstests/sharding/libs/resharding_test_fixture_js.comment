['text':'*
 * Test fixture for resharding a sharded collection once.
 *
 * Example usage:
 *
 *      const reshardingTest = new ReshardingTest();
 *      reshardingTest.setup();
 *      const sourceCollection = reshardingTest.createShardedCollection(...);
 *      // ... Do some operations before resharding starts ...
 *      assert.commandWorked(sourceCollection.insert({_id: 0}));
 *      reshardingTest.withReshardingInBackground({...}, () => {
 *          // ... Do some operations during the resharding operation ...
 *          assert.commandWorked(sourceCollection.update({_id: 0}, {$inc: {a: 1}}));
 *      });
 *      reshardingTest.teardown();
 ','line_number':7,'multiline':True]['text':' 1 day ','line_number':29,'multiline':True]['text':' The @private JSDoc comments cause VS Code to not display the corresponding properties and','line_number':41,'multiline':False]['text':' methods in its autocomplete list. This makes it simpler for test authors to know what the','line_number':42,'multiline':False]['text':' public interface of the ReshardingTest class is.','line_number':43,'multiline':False]['text':'* @private ','line_number':45,'multiline':True]['text':'* @private ','line_number':47,'multiline':True]['text':'* @private ','line_number':49,'multiline':True]['text':'* @private ','line_number':51,'multiline':True]['text':'* @private ','line_number':54,'multiline':True]['text':'* @private ','line_number':56,'multiline':True]['text':'* @private ','line_number':58,'multiline':True]['text':'* @private ','line_number':60,'multiline':True]['text':'* @private ','line_number':62,'multiline':True]['text':'* @private ','line_number':64,'multiline':True]['text':'* @private ','line_number':72,'multiline':True]['text':' Properties set by setup().','line_number':75,'multiline':False]['text':'* @private ','line_number':76,'multiline':True]['text':' Properties set by createShardedCollection().','line_number':79,'multiline':False]['text':'* @private ','line_number':80,'multiline':True]['text':'* @private ','line_number':82,'multiline':True]['text':'* @private ','line_number':84,'multiline':True]['text':'* @private ','line_number':86,'multiline':True]['text':'* @private ','line_number':88,'multiline':True]['text':' Properties set by startReshardingInBackground() and withReshardingInBackground().','line_number':91,'multiline':False]['text':'* @private ','line_number':92,'multiline':True]['text':'* @private ','line_number':94,'multiline':True]['text':'* @private ','line_number':96,'multiline':True]['text':'* @private ','line_number':98,'multiline':True]['text':'* @private ','line_number':100,'multiline':True]['text':'* @private ','line_number':102,'multiline':True]['text':'* @private ','line_number':104,'multiline':True]['text':' Use the shard default in config shard mode since the config server will be a shard.','line_number':118,'multiline':False]['text':' Increase the likelihood that writes which aren't yet majority-committed end up','line_number':125,'multiline':False]['text':' getting rolled back.','line_number':126,'multiline':False]['text':' The server conservatively sets the minimum visible timestamp of collections created','line_number':133,'multiline':False]['text':' after the oldest_timestamp to be the stable_timestamp. Furthermore, there is no','line_number':134,'multiline':False]['text':' guarantee the oldest_timestamp will advance past the creation timestamp of the source','line_number':135,'multiline':False]['text':' sharded collection. This means that after a donor shard restarts an atClusterTime','line_number':136,'multiline':False]['text':' read at the cloneTimestamp on it would fail with SnapshotUnavailable. We enable the','line_number':137,'multiline':False]['text':' following failpoint so the minimum visible timestamp is set to the oldest_timestamp','line_number':138,'multiline':False]['text':' regardless. Note that this is safe for resharding tests to do because the source','line_number':139,'multiline':False]['text':' sharded collection is guaranteed to exist in the collection catalog at the','line_number':140,'multiline':False]['text':' cloneTimestamp and tests involving elections do not run operations which would bump','line_number':141,'multiline':False]['text':' the minimum visible timestamp (e.g. creating or dropping indexes).','line_number':142,'multiline':False]['text':' ShardingTest does not currently support deep merging of options, so merge the set','line_number':177,'multiline':False]['text':' parameters for config and replica sets here.','line_number':178,'multiline':False]['text':' We add a "-donor" or "-recipient" suffix to the shard's name when it has a singular','line_number':220,'multiline':False]['text':' role during the resharding process.','line_number':221,'multiline':False]['text':' In order to enable random failovers, initialize Random's seed if it has not already been','line_number':241,'multiline':False]['text':' done.','line_number':242,'multiline':False]['text':'* @private ','line_number':248,'multiline':True]['text':'* @private ','line_number':257,'multiline':True]['text':'* @private ','line_number':273,'multiline':True]['text':'*
     * Creates an unsharded collection with unsplittable: true
     ','line_number':286,'multiline':True]['text':'*
     * Shards a non-existing collection using the specified shard key and chunk ranges.
     *
     * @param chunks - an array of
     * {min: <shardKeyValue0>, max: <shardKeyValue1>, shard: <shardName>} objects. The chunks must
     * form a partition of the {shardKey: MinKey} --> {shardKey: MaxKey} space.
     ','line_number':311,'multiline':True]['text':' mongos won't know about the temporary resharding collection and will therefore assume the','line_number':326,'multiline':False]['text':' collection is unsharded. We configure one of the recipient shards to be the primary shard','line_number':327,'multiline':False]['text':' for the database so mongos still ends up routing operations to a shard which owns the','line_number':328,'multiline':False]['text':' temporary resharding collection.','line_number':329,'multiline':False]['text':'*
     * Reshards an existing collection using the specified new shard key and new chunk ranges.
     *
     * @param newChunks - an array of
     * {min: <shardKeyValue0>, max: <shardKeyValue1>, shard: <shardName>} objects. The chunks must
     * form a partition of the {shardKey: MinKey} --> {shardKey: MaxKey} space.
     *
     * @deprecated prefer using the withReshardingInBackground() method instead.
     ','line_number':362,'multiline':True]['text':'* @private ','line_number':376,'multiline':True]['text':' We allow the client to retry the reshardCollection a large but still finite','line_number':427,'multiline':False]['text':' number of times. This is done because the mongos would also return a','line_number':428,'multiline':False]['text':' FailedToSatisfyReadPreference error response when the primary of the shard is','line_number':429,'multiline':False]['text':' permanently down (e.g. due to a bug causing the server to crash) and it would be','line_number':430,'multiline':False]['text':' preferable to not have the test run indefinitely in that situation.','line_number':431,'multiline':False]['text':' = [10 minutes / kDefaultFindHostTimeout]','line_number':432,'multiline':False]['text':' UUIDs are passed in as strings because the UUID type cannot pass','line_number':459,'multiline':False]['text':' through the thread constructor.','line_number':460,'multiline':False]['text':'*
     * Moves an existing unsharded collection to toShard.
     *
     * @param toShard - shardId of the shard to move to.
     *
     * @param duringReshardingFn - a function which optionally accepts the temporary resharding
     * namespace string. It is only guaranteed to be called after mongos has started running the
     * reshardCollection command. Callers should use DiscoverTopology.findConnectedNodes() to
     * introspect the state of the donor or recipient shards if they need more specific
     * synchronization.
     *
     * @param expectedErrorCode - the expected response code for the reshardCollection command.
     *
     * @param postCheckConsistencyFn - a function for evaluating additional correctness
     * assertions. This function is called in the critical section, after the `reshardCollection`
     * command has shuffled data, but before the coordinator persists a decision.
     *
     * @param postDecisionPersistedFn - a function for evaluating addition assertions after
     * the decision has been persisted, but before the resharding operation finishes and returns
     * to the client.
     *
     * @param afterReshardingFn - a function that will be called after the resharding operation
     * finishes but before checking the the state post resharding. By the time afterReshardingFn
     * is called the temporary resharding collection will either have been dropped or renamed.
     ','line_number':498,'multiline':True]['text':'*
     * Unshards an existing sharded collection to toShard.
     *
     * @param toShard (Optional) - shardId of the shard to unshard to.
     *
     * @param duringReshardingFn - a function which optionally accepts the temporary resharding
     * namespace string. It is only guaranteed to be called after mongos has started running the
     * reshardCollection command. Callers should use DiscoverTopology.findConnectedNodes() to
     * introspect the state of the donor or recipient shards if they need more specific
     * synchronization.
     *
     * @param expectedErrorCode - the expected response code for the reshardCollection command.
     *
     * @param postCheckConsistencyFn - a function for evaluating additional correctness
     * assertions. This function is called in the critical section, after the `reshardCollection`
     * command has shuffled data, but before the coordinator persists a decision.
     *
     * @param postDecisionPersistedFn - a function for evaluating addition assertions after
     * the decision has been persisted, but before the resharding operation finishes and returns
     * to the client.
     *
     * @param afterReshardingFn - a function that will be called after the resharding operation
     * finishes but before checking the the state post resharding. By the time afterReshardingFn
     * is called the temporary resharding collection will either have been dropped or renamed.
     ','line_number':545,'multiline':True]['text':'*
     * Reshards an existing collection using the specified new shard key and new chunk ranges.
     *
     * @param newChunks - an array of
     * {min: <shardKeyValue0>, max: <shardKeyValue1>, shard: <shardName>} objects. The chunks must
     * form a partition of the {shardKey: MinKey} --> {shardKey: MaxKey} space.
     *
     * @param duringReshardingFn - a function which optionally accepts the temporary resharding
     * namespace string. It is only guaranteed to be called after mongos has started running the
     * reshardCollection command. Callers should use DiscoverTopology.findConnectedNodes() to
     * introspect the state of the donor or recipient shards if they need more specific
     * synchronization.
     *
     * @param expectedErrorCode - the expected response code for the reshardCollection command.
     *
     * @param postCheckConsistencyFn - a function for evaluating additional correctness
     * assertions. This function is called in the critical section, after the `reshardCollection`
     * command has shuffled data, but before the coordinator persists a decision.
     *
     * @param postDecisionPersistedFn - a function for evaluating addition assertions after
     * the decision has been persisted, but before the resharding operation finishes and returns
     * to the client.
     *
     * @param afterReshardingFn - a function that will be called after the resharding operation
     * finishes but before checking the the state post resharding. By the time afterReshardingFn
     * is called the temporary resharding collection will either have been dropped or renamed.
     ','line_number':592,'multiline':True]['text':'* @private ','line_number':644,'multiline':True]['text':'* @private ','line_number':657,'multiline':True]['text':'* @private ','line_number':670,'multiline':True]['text':'*
     * Wrapper around invoking a 0-argument function to make test failures less confusing.
     *
     * This helper attempts to disable the reshardingPauseCoordinatorBeforeBlockingWrites
     * failpoint when an exception is thrown to prevent the mongo shell from hanging (really the
     * config server) on top of having a JavaScript error.
     *
     * This helper attempts to interrupt and join the resharding thread when an exception is thrown
     * to prevent the mongo shell from aborting on top of having a JavaScript error.
     *
     * @private
     ','line_number':680,'multiline':True]['text':'*
     * This method can be called with failpoints that block the `reshardCollection` command from
     * proceeding to the next stage. This helper returns after either:
     *
     * 1) The node's waitForFailPoint returns successfully or
     * 2) The `reshardCollection` command has returned a response or
     * 3) The ReshardingCoordinator is blocked on the reshardingPauseCoordinatorBeforeCompletion
     *    failpoint and won't ever satisfy the supplied failpoint.
     *
     * The function returns true when we returned because the server reached the failpoint. The
     * function returns false when the `reshardCollection` command is no longer running.
     * Otherwise the function throws an exception.
     *
     * @private
     ','line_number':745,'multiline':True]['text':' The `waitWithTimeout` command has the server block for an interval of time.','line_number':778,'multiline':False]['text':' return true if the `reshardCollection` command is still running.','line_number':780,'multiline':False]['text':'* @private ','line_number':784,'multiline':True]['text':' The CSRS primary may have changed as a result of running the duringReshardingFn()','line_number':789,'multiline':False]['text':' callback function. The failpoints will only be triggered on the new CSRS primary so we','line_number':790,'multiline':False]['text':' detect which node that is here.','line_number':791,'multiline':False]['text':' The CSRS secondaries may be going through replication rollback which closes their','line_number':795,'multiline':False]['text':' connections to the test client. We wait for any replication rollbacks to complete and for','line_number':796,'multiline':False]['text':' the test client to have reconnected so the failpoints can be turned off on all of the','line_number':797,'multiline':False]['text':' nodes later on.','line_number':798,'multiline':False]['text':' We use the reshardingPauseCoordinatorBeforeBlockingWrites failpoint so that','line_number':805,'multiline':False]['text':' any intervening writes performed on the sharded collection (from when the','line_number':806,'multiline':False]['text':' resharding operation had started until now) are eventually applied by the','line_number':807,'multiline':False]['text':' recipient shards. We then use the','line_number':808,'multiline':False]['text':' reshardingPauseCoordinatorBeforeDecisionPersisted failpoint to wait for all of','line_number':809,'multiline':False]['text':' the recipient shards to have applied through all of the oplog entries from all of','line_number':810,'multiline':False]['text':' the donor shards.','line_number':811,'multiline':False]['text':' A resharding command that returned a failure will not hit the "Decision','line_number':818,'multiline':False]['text':' Persisted" failpoint. If the command has returned, don't require that the','line_number':819,'multiline':False]['text':' failpoint was entered. This ensures that following up by joining the','line_number':820,'multiline':False]['text':' `_reshardingThread` will succeed.','line_number':821,'multiline':False]['text':' Don't correctness check the results if the resharding command unexpectedly','line_number':827,'multiline':False]['text':' returned.','line_number':828,'multiline':False]['text':' Reaching this line implies the `_reshardingThread` has successfully exited without','line_number':866,'multiline':False]['text':' throwing an exception. Assert that we performed all expected correctness checks.','line_number':867,'multiline':False]['text':'* @private ','line_number':877,'multiline':True]['text':' The "available" read concern level won't block this find cmd behind the critical section.','line_number':879,'multiline':False]['text':' Tests for resharding are not expected to have unowned documents in the collection being','line_number':880,'multiline':False]['text':' resharded.','line_number':881,'multiline':False]['text':'* @private ','line_number':906,'multiline':True]['text':' The "available" read concern level won't perform any ownership filtering. Any documents','line_number':908,'multiline':False]['text':' which were copied by a recipient shard that are actually owned by a different recipient','line_number':909,'multiline':False]['text':' shard would appear as extra documents.','line_number':910,'multiline':False]['text':'* @private ','line_number':937,'multiline':True]['text':'* @private ','line_number':950,'multiline':True]['text':'* @private ','line_number':1069,'multiline':True]['text':'*
     * Given the shardName, steps up a secondary (chosen at random) to become the new primary of the
     * shard replica set. To force an election on the configsvr rather than a participant shard, use
     * shardName = this.configShardName;
     ','line_number':1107,'multiline':True]['text':' Once the primary is terminated/killed/stepped down, write availability is lost. Avoid','line_number':1120,'multiline':False]['text':' long periods where the replica set doesn't have write availability by trying to step','line_number':1121,'multiline':False]['text':' up secondaries until one succeeds.','line_number':1122,'multiline':False]['text':'*
     * @returns the timestamp chosen by the resharding operation for cloning.
     *
     * Should also be used in tandem with retryableWriteManager when calling this method in a
     * jstestfuzzer code for backwards compatibility, like so:
     *
     * if (reshardingTest.awaitCloneTimestampChosen !== undefined) {
     *     fetchTimestamp = reshardingTest.awaitCloneTimestampChosen();
     * } else {
     *     fetchTimestamp = retryableWriteManager.awaitFetchTimestampChosen();
     * }
     ','line_number':1183,'multiline':True]['text':'*
     * Calls and returns the value from the supplied function.
     *
     * If a network error is thrown during its execution, then this function will invoke the
     * supplied function a second time. This pattern is useful for tolerating network errors which
     * result from elections triggered by any of the stepUpNewPrimaryOnShard(),
     * killAndRestartPrimaryOnShard(), and shutdownAndRestartPrimaryOnShard() methods.
     *
     * @param fn - the function to be called.
     * @returns the return value from fn.
     ','line_number':1207,'multiline':True]