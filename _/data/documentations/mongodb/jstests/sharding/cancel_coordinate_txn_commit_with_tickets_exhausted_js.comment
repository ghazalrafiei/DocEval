['text':'*
 * The test checks that the TransactionCoordinator will not crash if the transaction is aborted when
 * attempting to commit a transaction.
 *
 * Step 1. Run and commit a transaction in order to initialize TransactionCoordinator.
 *
 * Step 2. Run `kNumWriteTickets` remove operations in parallel. So that they take up all of the
 * WiredTiger tickets.
 *
 * Step 3. Run a transaction in parallel, but do not attempt to commit it until
 * all of the remove operations have taken WiredTiger tickets.
 *
 * Step 4. Wait for the transaction to reach the `deletingCoordinatorDoc` state.
 *
 * Step 5. Turn off the `hangWithLockDuringBatchRemoveFp`
 * and join the parallel remove operations and transaction thread.
 *
 * @tags: [
 *   requires_fcv_70,
 *   uses_multi_shard_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' This test requires a fixed ticket pool size.','line_number':38,'multiline':False]['text':' Lower transactionLifetimeLimitSeconds to cause TransactionCoordinators which haven't','line_number':41,'multiline':False]['text':' yet made their commit or abort decision to time out and abort the transaction.','line_number':42,'multiline':False]['text':' The ShardServerCatalogCacheLoader thread may perform deletes in the background on the','line_number':60,'multiline':False]['text':' config.cache.chunks.test.mycoll collection. Its deletes are also eligible to be blocked by the','line_number':61,'multiline':False]['text':' hangWithLockDuringBatchRemove failpoint and will prevent a removeOperation thread from acquiring','line_number':62,'multiline':False]['text':' a WiredTiger write ticket. We wait for it to finish any delete operations by explicitly running','line_number':63,'multiline':False]['text':' the _flushRoutingTableCacheUpdates command.','line_number':64,'multiline':False]['text':' A two-phase commit transaction is first run to ensure the TransactionCoordinator has recovered','line_number':81,'multiline':False]['text':' and persisted a topology time. The transactionThread will run a second two-phase commit','line_number':82,'multiline':False]['text':' transaction using the same shard for coordinating the transaction. This ensures the','line_number':83,'multiline':False]['text':' transactionThread won't need to persist a topology time. The scenario reported in SERVER-60685','line_number':84,'multiline':False]['text':' depended on the TransactionCoordinator being interrupted while persisting the participant list','line_number':85,'multiline':False]['text':' which happens after waiting for the topology time to become durable.','line_number':86,'multiline':False]['text':' Wait for transaction coordinator document to be deleted and the transaction to be completed.','line_number':91,'multiline':False]['text':' After here all of the WiredTiger write tickets should be taken.','line_number':121,'multiline':False]