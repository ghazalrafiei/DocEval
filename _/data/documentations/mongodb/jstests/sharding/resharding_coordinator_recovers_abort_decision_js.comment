['text':'*
 * Tests that the resharding coordinator recovers its abort decision after a primary failover.
 ','line_number':1,'multiline':True]['text':' We have the recipient shard fail the _shardsvrAbortReshardCollection to synchronize around','line_number':27,'multiline':False]['text':'   (1) the resharding coordinator having persisted its abort decision locally,','line_number':28,'multiline':False]['text':'   (2) the resharding coordinator having waited for its abort decision to become majority','line_number':29,'multiline':False]['text':'       committed, and','line_number':30,'multiline':False]['text':'   (3) the resharding coordinator not yet having finished delivering the abort decision to all of','line_number':31,'multiline':False]['text':'       the participant shards.','line_number':32,'multiline':False]['text':' We pause the _configsvrReshardCollection command upon joining an existing ReshardingCoordinator','line_number':39,'multiline':False]['text':' instance on all of the config server replica set because we don't know which node will be elected','line_number':40,'multiline':False]['text':' primary from calling stepUpNewPrimaryOnShard().','line_number':41,'multiline':False]['text':' Wait until participants are aware of the resharding operation.','line_number':53,'multiline':False]['text':' Wait for the coordinator to have persisted its decision to abort the resharding operation','line_number':60,'multiline':False]['text':' as a result of the abortReshardCollection command being processed.','line_number':61,'multiline':False]['text':' Mongos automatically retries the abortReshardCollection command on retryable errors.','line_number':74,'multiline':False]['text':' We interrupt the abortReshardCollection command running on mongos to verify that the','line_number':75,'multiline':False]['text':' ReshardingCoordinator recovers the decision on its own.','line_number':76,'multiline':False]['text':' After a stepdown, the _configsvrReshardCollection command will be retried by the','line_number':95,'multiline':False]['text':' primary shard. We use the reshardCollectionJoinedExistingOperation failpoint to','line_number':96,'multiline':False]['text':' ensure the primary shard upon retrying finds the ongoing resharding operation on the','line_number':97,'multiline':False]['text':' new config server primary. It would otherwise be possible for the','line_number':98,'multiline':False]['text':' reshardingPauseCoordinatorBeforeCompletion failpoint to be released by the','line_number':99,'multiline':False]['text':' ReshardingTest fixture after this function returns, for the ongoing resharding','line_number':100,'multiline':False]['text':' operation to complete, and for the retried _configsvrReshardCollection command to','line_number':101,'multiline':False]['text':' spawn an entirely new resharding operation which won't get aborted by the test','line_number':102,'multiline':False]['text':' client.','line_number':103,'multiline':False]['text':' Wait for secondaries to recover and catchup with primary before turning off the','line_number':110,'multiline':False]['text':' failpoints as a replication roll back can disconnect the test client.','line_number':111,'multiline':False]