['text':'*
 * Verifies multi-writes in transactions are sent with shard versions to only the targeted shards.
 *
 * @tags: [
 *   requires_sharding,
 *   uses_multi_shard_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' Set up a sharded collection with 3 chunks, [min, 0), [0, 10), [10, max), one on each shard,','line_number':26,'multiline':False]['text':' with one document in each.','line_number':27,'multiline':False]['text':' Runs the given multi-write and asserts a manually inserted orphan document is not affected.','line_number':46,'multiline':False]['text':' The write is assumed to target chunks [min, 0) and [0, 10), which begin on shard0 and shard1,','line_number':47,'multiline':False]['text':' respectively.','line_number':48,'multiline':False]['text':' Using a separate router, move a chunk that will be targeted by the write to a shard','line_number':58,'multiline':False]['text':' that would not be targeted by a stale router. Put the orphan on the shard that','line_number':59,'multiline':False]['text':' previously owned the chunk to verify the multi-write obeys the shard versioning','line_number':60,'multiline':False]['text':' protocol.','line_number':61,'multiline':False]['text':' Otherwise put the orphan on a shard that should not be targeted by a fresh router to','line_number':66,'multiline':False]['text':' verify the multi-write is not broadcast to all shards.','line_number':67,'multiline':False]['text':' Start a transaction with majority read concern to ensure the orphan will be visible if','line_number':75,'multiline':False]['text':' its shard is targeted and send the multi-write.','line_number':76,'multiline':False]['text':' The write shouldn't be visible until the transaction commits.','line_number':80,'multiline':False]['text':' Commit the transaction and verify the write was successful.','line_number':87,'multiline':False]['text':' isDelete','line_number':98,'multiline':False]['text':' The orphaned document should not have been affected.','line_number':105,'multiline':False]['text':'staleRouter','line_number':122,'multiline':True]['text':' TODO: SERVER-39704 uncomment when mongos can internally retry txn on stale errors for real.','line_number':123,'multiline':False]['text':' runTest(st, session, multiUpdate, true /*staleRouter*/);','line_number':124,'multiline':False]['text':'staleRouter','line_number':127,'multiline':True]['text':' TODO: SERVER-39704 uncomment when mongos can internally retry txn on stale errors for real.','line_number':128,'multiline':False]['text':' runTest(st, session, multiUpdate, true /*staleRouter*/);','line_number':129,'multiline':False]['text':'staleRouter','line_number':134,'multiline':True]['text':' TODO: SERVER-39704 uncomment when mongos can internally retry txn on stale errors for real.','line_number':135,'multiline':False]['text':' runTest(st, session, multiDelete, true /*staleRouter*/);','line_number':136,'multiline':False]['text':'staleRouter','line_number':139,'multiline':True]['text':' TODO: SERVER-39704 uncomment when mongos can internally retry txn on stale errors for real.','line_number':140,'multiline':False]['text':' runTest(st, session, multiDelete, true /*staleRouter*/);','line_number':141,'multiline':False]