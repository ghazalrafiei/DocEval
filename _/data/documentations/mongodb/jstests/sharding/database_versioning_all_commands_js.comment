['text':'*
 * Specifies for each command whether it is expected to send a databaseVersion, and verifies that
 * the commands match the specification.
 *
 * Each command must have exactly one corresponding test defined. Each defined test case must
 * correspond to an existing command. The allowable fields for the test cases are as follows:
 *
 *      - 'run': This is the specified test case that will be executed for each command.
 *      - 'skip': Use this field to skip the execution of the test case, along with a justification.
 *      It's important to note that this field doesn't bypass command validation; it only skips the
 *      actual run.
 *      - 'explain': This field is optional and is used to test the explain command on the specified
 *      test case.
 *      - 'conditional': If you set this field to true, the test case will skip the validation that
 *      ensures all test cases match existing commands. This is useful for commands that only exist
 *      in enterprise modules, for instance.
 ','line_number':1,'multiline':True]['text':' TODO (SERVER-81967): Remove once 8.0 becomes last LTS.','line_number':34,'multiline':False]['text':' Check that required fields are present.','line_number':80,'multiline':False]['text':' Check that all present fields are of the correct type.','line_number':84,'multiline':False]['text':' Ensure all nodes know the dbVersion before the movePrimary.','line_number':118,'multiline':False]['text':' Run movePrimary through the second mongos.','line_number':126,'multiline':False]['text':' After the movePrimary, both old and new primary shards should have cleared the dbVersion.','line_number':131,'multiline':False]['text':' Run the test case's command.','line_number':136,'multiline':False]['text':' If the command participates in database versioning, all nodes should now know the new','line_number':145,'multiline':False]['text':' dbVersion:','line_number':146,'multiline':False]['text':' 1. The mongos should have sent the stale dbVersion to the old primary shard','line_number':147,'multiline':False]['text':' 2. The old primary shard should have returned StaleDbVersion and refreshed','line_number':148,'multiline':False]['text':' 3. Which should have caused the mongos to refresh and retry against the new primary shard','line_number':149,'multiline':False]['text':' 4. The new primary shard should have returned StaleDbVersion and refreshed','line_number':150,'multiline':False]['text':' 5. Which should have caused the mongos to refresh and retry again, this time succeeding.','line_number':151,'multiline':False]['text':' If the command does not participate in database versioning:','line_number':156,'multiline':False]['text':' 1. The mongos should have targeted the old primary shard but not attached a dbVersion','line_number':157,'multiline':False]['text':' 2. The old primary shard should have returned an ok response','line_number':158,'multiline':False]['text':' 3. Both old and new primary shards should have cleared the dbVersion','line_number':159,'multiline':False]['text':' Create the database by creating a collection in it.','line_number':177,'multiline':False]['text':' Ensure the router and primary shard know the dbVersion before the drop/recreate database.','line_number':189,'multiline':False]['text':' Drop and recreate the database through the second mongos. Insert the entry for the new','line_number':194,'multiline':False]['text':' database explicitly to ensure it is assigned the other shard as the primary shard.','line_number':195,'multiline':False]['text':' The only change after the drop/recreate database should be that the old primary shard should','line_number':220,'multiline':False]['text':' have cleared its dbVersion.','line_number':221,'multiline':False]['text':' Run the test case's command.','line_number':226,'multiline':False]['text':' If the command participates in database versioning all nodes should now know the new','line_number':235,'multiline':False]['text':' dbVersion:','line_number':236,'multiline':False]['text':' 1. The mongos should have sent the stale dbVersion to the old primary shard','line_number':237,'multiline':False]['text':' 2. The old primary shard should have returned StaleDbVersion and refreshed','line_number':238,'multiline':False]['text':' 3. Which should have caused the mongos to refresh and retry against the new primary shard','line_number':239,'multiline':False]['text':' 4. The new primary shard should have returned StaleDbVersion and refreshed','line_number':240,'multiline':False]['text':' 5. Which should have caused the mongos to refresh and retry again, this time succeeding.','line_number':241,'multiline':False]['text':' If the command does not participate in database versioning, none of the nodes' view of','line_number':246,'multiline':False]['text':' the dbVersion should have changed:','line_number':247,'multiline':False]['text':' 1. The mongos should have targeted the old primary shard but not attached a dbVersion','line_number':248,'multiline':False]['text':' 2. The old primary shard should have returned an ok response','line_number':249,'multiline':False]['text':' Clean up.','line_number':255,'multiline':False]['text':' TODO SERVER-68055: Extend test to work with analyze','line_number':301,'multiline':False]['text':' The command should fail while calculating the read and write distribution metrics','line_number':308,'multiline':False]['text':' since the cardinality of the shard key is less than analyzeShardKeyNumRanges which','line_number':309,'multiline':False]['text':' defaults to 100.','line_number':310,'multiline':False]['text':' TODO SERVER-52419: Run this test and remove the skip.','line_number':325,'multiline':False]['text':' run: {','line_number':326,'multiline':False]['text':'     sendsDbVersion: true,','line_number':327,'multiline':False]['text':'     runsAgainstAdminDb: true,','line_number':328,'multiline':False]['text':'     command: function(dbName, collName) {','line_number':329,'multiline':False]['text':'         return {','line_number':330,'multiline':False]['text':'             bulkWrite: 1,','line_number':331,'multiline':False]['text':'             ops: [{insert: 0, document: {_id: 1}}],','line_number':332,'multiline':False]['text':'             nsInfo: [{ns: dbName + "." + collName}]','line_number':333,'multiline':False]['text':'         };','line_number':334,'multiline':False]['text':'     },','line_number':335,'multiline':False]['text':' }','line_number':336,'multiline':False]['text':' dbStats is always broadcast to all shards','line_number':440,'multiline':False]['text':' The command should fail if there is no active index build on the collection.','line_number':736,'multiline':False]['text':' validateDBMetadata is always broadcast to all shards.','line_number':808,'multiline':False]['text':' Validate test cases for all commands.','line_number':834,'multiline':False]['text':' Ensure there is a test case for every mongos command, and that the test cases are well','line_number':836,'multiline':False]['text':' formed.','line_number':837,'multiline':False]['text':' After iterating through all the existing commands, ensure there were no additional test cases','line_number':845,'multiline':False]['text':' that did not correspond to any mongos command.','line_number':846,'multiline':False]['text':' We have defined real test cases for commands added since the last LTS version so that the','line_number':848,'multiline':False]['text':' test cases are exercised in the regular suites, but because these test cases can't run in','line_number':849,'multiline':False]['text':' the last stable suite, we skip processing them here to avoid failing the below assertion.','line_number':850,'multiline':False]['text':' We have defined "skip" test cases for commands removed since the last LTS version so the','line_number':851,'multiline':False]['text':' test case is defined in last stable suites (in which these commands still exist on the','line_number':852,'multiline':False]['text':' mongos), but these test cases won't be run in regular suites, so we skip processing them','line_number':853,'multiline':False]['text':' below as well.','line_number':854,'multiline':False]['text':' Test that commands that send databaseVersion are subjected to the databaseVersion check when','line_number':866,'multiline':False]['text':' the primary shard for the database has moved and the database no longer exists on the old','line_number':867,'multiline':False]['text':' primary shard (because the database only contained unsharded collections; this is in','line_number':868,'multiline':False]['text':' anticipation of SERVER-43925).','line_number':869,'multiline':False]['text':' Create the database by creating a collection in it.','line_number':874,'multiline':False]['text':' Test that commands that send databaseVersion are subjected to the databaseVersion check when','line_number':892,'multiline':False]['text':' the primary shard for the database has moved, but the database still exists on the old','line_number':893,'multiline':False]['text':' primary shard (because the old primary shard owns chunks for sharded collections in the','line_number':894,'multiline':False]['text':' database).','line_number':895,'multiline':False]['text':' Create a sharded collection with data on both shards so that the database does not get','line_number':901,'multiline':False]['text':' dropped on the old primary shard after movePrimary.','line_number':902,'multiline':False]['text':' Test that commands that send databaseVersion are subjected to the databaseVersion check when','line_number':931,'multiline':False]['text':' the database has been dropped and recreated with a different primary shard.','line_number':932,'multiline':False]