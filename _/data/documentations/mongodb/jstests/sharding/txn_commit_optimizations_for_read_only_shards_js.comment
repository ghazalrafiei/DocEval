['text':'*
 * Tests that the appropriate commit path (single-shard, read-only, single-write-shard, two-phase
 * commit) is taken for a variety of transaction types.
 *
 * Checks that the response formats are correct across each type for several scenarios, including
 * no failures, a participant having failed over, a participant being unable to satisfy the client's
 * writeConcern, and an invalid client writeConcern.
 *
 * @tags: [uses_transactions, uses_multi_shard_transaction]
 ','line_number':1,'multiline':True]['text':' Waits for the given log to appear a number of times in the shell's rawMongoProgramOutput.','line_number':22,'multiline':False]['text':' Loops because it is not guaranteed the program output will immediately contain all lines','line_number':23,'multiline':False]['text':' logged at an earlier wall clock time.','line_number':24,'multiline':False]['text':' Lower the transaction timeout, since this test exercises cases where the coordinator should','line_number':66,'multiline':False]['text':' time out collecting prepare votes from participants that cannot majority commit writes.','line_number':67,'multiline':False]['text':' Create shards with more than one node because we test for writeConcern majority failing.','line_number':72,'multiline':False]['text':' The name of the shards affects the ordering of which shard will be targeted first','line_number':75,'multiline':False]['text':' for broadcast operations so always use the same names for each test run.','line_number':76,'multiline':False]['text':' Create a "dummy" collection for doing noop writes to advance shard's last applied OpTimes.','line_number':92,'multiline':False]['text':' The test uses three shards with one chunk each in order to control which shards are targeted','line_number':95,'multiline':False]['text':' for each statement:','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' (-inf, 0):                   shard key = txnNumber * -1','line_number':98,'multiline':False]['text':' (0, MAX_TRANSACTIONS):       shard key = txnNumber','line_number':99,'multiline':False]['text':' (MAX_TRANSACTIONS, +inf):    shard key = txnNumber + MAX_TRANSACTIONS','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' So, if the test ever exceeds txnNumber transactions, statements that are meant to target the','line_number':102,'multiline':False]['text':' middle chunk will instead target the highest chunk. To fix this, increase MAX_TRANSACTIONS.','line_number':103,'multiline':False]['text':' Create a sharded collection with a chunk on each shard:','line_number':106,'multiline':False]['text':' Insert something into each chunk so that a multi-update actually results in a write on each','line_number':114,'multiline':False]['text':' shard (otherwise the shard may remain read-only). This also ensures all the routers and','line_number':115,'multiline':False]['text':' shards have fresh routing table caches, so they do not need to be refreshed separately.','line_number':116,'multiline':False]['text':' For each transaction type, contains the list of statements for that type.','line_number':173,'multiline':False]['text':' Commit should return ok without writeConcern error','line_number':227,'multiline':False]['text':' Participant primary steps down.','line_number':236,'multiline':False]['text':' stepDownSecs ','line_number':239,'multiline':True]['text':' Commit should return NoSuchTransaction.','line_number':248,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any','line_number':258,'multiline':False]['text':' majority writes.','line_number':259,'multiline':False]['text':' If two-phase commit is involved, rs0 will be the coordinator so we should disable','line_number':265,'multiline':False]['text':' replication on a different participant.','line_number':266,'multiline':False]['text':' Do a write on rs0 through the router outside the transaction to ensure the','line_number':270,'multiline':False]['text':' transaction will choose a read time that has not been majority committed.','line_number':271,'multiline':False]['text':' wtimeout ','line_number':276,'multiline':True]['text':' One of the participants cannot majority commit writes so the coordinator will','line_number':287,'multiline':False]['text':' timeout waiting for votes, and consequently abort the transaction with','line_number':288,'multiline':False]['text':' NoSuchTransaction error as the abort reason.','line_number':289,'multiline':False]['text':' Retry of single write shard commit triggers txn recovery, which will','line_number':295,'multiline':False]['text':' discover the transaction aborted on the first attempt.','line_number':296,'multiline':False]['text':' Router returns whatever error the first failed read commit failed with as a','line_number':302,'multiline':False]['text':' command error, even if it was a write concern error, since nothing durable','line_number':303,'multiline':False]['text':' could be written. This particular error isn't considered transient since','line_number':304,'multiline':False]['text':' WriteWriteConcernFailed is not a transient code.','line_number':305,'multiline':False]['text':' Any read shard failure should have triggered an implicit abort on all shards.','line_number':310,'multiline':False]['text':' Note the first shard already received commitTransaction but couldn't majority','line_number':311,'multiline':False]['text':' commit it, so it should have already committed the transaction.','line_number':312,'multiline':False]['text':' In this case, the router receives a write concern error from the write shard,','line_number':318,'multiline':False]['text':' which means the transaction's effects are written to at least the primary','line_number':319,'multiline':False]['text':' node, so we can return that shards write concern error with the router's','line_number':320,'multiline':False]['text':' commit response to the client.','line_number':321,'multiline':False]['text':' Commit should return ok with a writeConcernError with wtimeout.','line_number':327,'multiline':False]['text':' stopServerReplication will prevent fulfil any majority writes.','line_number':340,'multiline':False]['text':' If two-phase commit is involved, rs0 will be the coordinator so we should disable','line_number':346,'multiline':False]['text':' replication on a different participant.','line_number':347,'multiline':False]['text':' Do a write on rs0 through the router outside the transaction to ensure the','line_number':351,'multiline':False]['text':' transaction will choose a read time that has not been majority committed.','line_number':352,'multiline':False]['text':' One of the participants cannot majority commit writes so the coordinator will','line_number':361,'multiline':False]['text':' timeout waiting for votes, and consequently abort the transaction with','line_number':362,'multiline':False]['text':' NoSuchTransaction error as the abort reason.','line_number':363,'multiline':False]['text':' Both the read only and single write shard phases will use the client's write','line_number':367,'multiline':False]['text':' concern so the commit can succeed without a write concern error.','line_number':368,'multiline':False]['text':' Commit should return ok without writeConcern error.','line_number':372,'multiline':False]['text':' Client sends invalid writeConcern on commit.','line_number':386,'multiline':False]['text':' The retry triggers decision recovery which finds the transaction aborted,','line_number':393,'multiline':False]['text':' and then fails waiting for the invalid write concern.','line_number':394,'multiline':False]['text':' The invalid write concern will fail on a read only shard, which we treat as a','line_number':404,'multiline':False]['text':' command error because the commit cannot be durable on the write shard.','line_number':405,'multiline':False]['text':' Commit should return ok with writeConcernError without wtimeout.','line_number':412,'multiline':False]['text':' Run the statements.','line_number':451,'multiline':False]['text':' Run commit.','line_number':460,'multiline':False]['text':' Re-running commit should return the same response.','line_number':466,'multiline':False]