['text':'*
 * This tests tries to check that a ReplicaSetMonitor initialized with a
 * replica set seed that has none of the nodes up will be able to recover
 * once the replica set come back up.
 *
 * ReplSetMonitor is tested indirectly through mongos. This is because
 * attempting to create a connection through the Mongo constructor won't
 * work because the shell will throw an exception before the mongo shell
 * binds the variable properly to the js environment (in simple terms,
 * the connection object is never returned when it cannot connect to it).
 * Another reason for using mongos in this test is so we can use
 * connPoolStats to synchronize the test and make sure that the monitor
 * was able to refresh before proceeding to check.
 *
 * Any tests that restart a shard mongod and send sharding requests to it after restart cannot make
 * the shard use an in-memory storage engine, since the shardIdentity document will be lost after
 * restart.
 *
 * @tags: [requires_persistence]
 ','line_number':1,'multiline':True]['text':' Use a second shard so we don't shut down the config server.','line_number':25,'multiline':False]['text':' The cluster now has the shard information. Then kill the replica set so when mongos restarts','line_number':36,'multiline':False]['text':' and tries to create a ReplSetMonitor for that shard, it will not be able to connect to any of','line_number':37,'multiline':False]['text':' the seed servers.','line_number':38,'multiline':False]['text':' Don't clear the data directory so that the shardIdentity is not deleted.','line_number':39,'multiline':False]['text':' send default signal ','line_number':40,'multiline':True]['text':' don't clear data directory ','line_number':40,'multiline':True]['text':' Verify that the replSetMonitor can reach the restarted set','line_number':47,'multiline':False]