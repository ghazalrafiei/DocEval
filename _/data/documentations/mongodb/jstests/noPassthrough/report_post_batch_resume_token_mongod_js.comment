['text':'*
 * Tests mongoD-specific semantics of postBatchResumeToken for $changeStream aggregations.
 * @tags: [
 *   requires_majority_read_concern,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' Create a new single-node replica set, and ensure that it can support $changeStream.','line_number':10,'multiline':False]['text':' Tracks _id of documents inserted to ensure that we do not duplicate.','line_number':21,'multiline':False]['text':' Helper function to perform generic comparisons and dump the oplog on failure.','line_number':24,'multiline':False]['text':' Start watching the test collection in order to capture a resume token.','line_number':31,'multiline':False]['text':' Write some documents to the test collection and get the resume token from the first doc.','line_number':34,'multiline':False]['text':' Test that postBatchResumeToken is present on a non-empty initial aggregate batch.','line_number':41,'multiline':False]['text':' We don't need any results after the initial batch.','line_number':44,'multiline':False]['text':' Test that the PBRT is correctly updated when reading events from within a transaction.','line_number':53,'multiline':False]['text':' Open a stream of batchSize:2 and grab the PBRT of the initial batch.','line_number':61,'multiline':False]['text':' Write 3 documents to testCollection and 1 to the unrelated collection within the transaction.','line_number':66,'multiline':False]['text':' Grab the next 2 events, which should be the first 2 events in the transaction.','line_number':74,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':75,'multiline':False]['text':' The clusterTime should be the same on each, but the resume token keeps advancing.','line_number':78,'multiline':False]['text':' The PBRT of the first transaction batch is equal to the last document's resumeToken.','line_number':85,'multiline':False]['text':' Save this PBRT so that we can test resuming from it later on.','line_number':89,'multiline':False]['text':' Now get the next batch. This contains the third of the four transaction operations.','line_number':92,'multiline':False]['text':' Causes a getMore to be dispatched.','line_number':94,'multiline':False]['text':' The clusterTime of this event is the same as the two events from the previous batch, but its','line_number':97,'multiline':False]['text':' resume token is greater than the previous PBRT.','line_number':98,'multiline':False]['text':' Because we wrote to the unrelated collection, the final event in the transaction does not','line_number':103,'multiline':False]['text':' appear in the batch. But in this case it also does not allow our PBRT to advance beyond the','line_number':104,'multiline':False]['text':' last event in the batch, because the unrelated event is within the same transaction and','line_number':105,'multiline':False]['text':' therefore has the same clusterTime.','line_number':106,'multiline':False]['text':' Confirm that resuming from the PBRT of the first batch gives us the third transaction write.','line_number':110,'multiline':False]