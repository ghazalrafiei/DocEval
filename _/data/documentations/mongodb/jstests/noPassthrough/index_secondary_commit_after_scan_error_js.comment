['text':'*
 * When an index build on a secondary fails, we expect to receive a abortIndexBuild oplog entry from
 * the primary eventually. If we get a commitIndexBuild oplog entry instead, the secondary should
 * crash.
 * @tags: [
 *   requires_replication,
 * ]
 ','line_number':1,'multiline':True]['text':' Disallow elections on secondary.','line_number':15,'multiline':False]['text':' Make the index build fail on the secondary during the collection scan phase.','line_number':35,'multiline':False]['text':' When we unblock the index build on the primary, the index build will complete successfully.','line_number':36,'multiline':False]['text':' Wait for the index build to start on the primary.','line_number':47,'multiline':False]['text':' The index build on the secondary will fail but will wait for the abortIndexBuild oplog entry','line_number':51,'multiline':False]['text':' from the primary.','line_number':52,'multiline':False]['text':' Wait for the index build to stop.','line_number':62,'multiline':False]['text':' Wait until the secondary process exits. We don't use ReplSetTest.stop() because if the secondary','line_number':68,'multiline':False]['text':' hasn't processed the commitIndexBuild oplog entry yet, the node will get signaled to shutdown','line_number':69,'multiline':False]['text':' cleanly and return an exit code of 0.','line_number':70,'multiline':False]['text':' Secondary should crash on receiving the unexpected commitIndexBuild oplog entry.','line_number':77,'multiline':False]['text':' Check indexes on primary.','line_number':82,'multiline':False]