['text':'*
 * Tests TTL indexes with invalid values for 'expireAfterSeconds'.
 *
 * @tags: [
 *     requires_replication,
 * ]
 ','line_number':1,'multiline':True]['text':' Sync from primary only so that we have a well-defined node to check listIndexes behavior.','line_number':17,'multiline':False]['text':' Insert a document before creating the index. Index builds on empty collections skip the','line_number':27,'multiline':False]['text':' collection scan phase, which we look for using checkLog below.','line_number':28,'multiline':False]['text':' The test cases here revolve around having a TTL index in the catalog with an invalid','line_number':31,'multiline':False]['text':' 'expireAfterSeconds'. The current createIndexes behavior will reject index creation for','line_number':32,'multiline':False]['text':' invalid values of expireAfterSeconds, so we use a failpoint to disable that checking to','line_number':33,'multiline':False]['text':' simulate a value leftover from very old MongoDB versions.','line_number':34,'multiline':False]['text':' Log the contents of the catalog for debugging purposes in case of failure.','line_number':45,'multiline':False]['text':' Wait for "Skipping TTL job due to invalid index spec" log message.','line_number':49,'multiline':False]['text':' TTL index should be replicated to the secondary with an invalid 'expireAfterSeconds'.','line_number':52,'multiline':False]['text':' NaN does not equal NaN, so we have to use the isNaN function for this check.','line_number':58,'multiline':False]['text':' Confirm that TTL index is replicated with a non-zero 'expireAfterSeconds' during initial','line_number':70,'multiline':False]['text':' sync.','line_number':71,'multiline':False]['text':' This is the "disabled" value for expireAfterSeconds','line_number':85,'multiline':False]['text':' Check that listIndexes on the primary logged a "Fixing expire field from TTL index spec"','line_number':89,'multiline':False]['text':' message during the invalid 'expireAfterSeconds' conversion.','line_number':90,'multiline':False]['text':' Confirm that a node with an existing TTL index with an invalid 'expireAfterSeconds' will','line_number':93,'multiline':False]['text':' convert the duration on the TTL index from the invalid value to a large positive value when','line_number':94,'multiline':False]['text':' it becomes the primary node. When stepping down the primary, we use 'force' because there's','line_number':95,'multiline':False]['text':' no other electable node.  Subsequently, we wait for the stepped down node to become primary','line_number':96,'multiline':False]['text':' again.  To confirm that the TTL index has been fixed, we check the oplog for a collMod','line_number':97,'multiline':False]['text':' operation on the TTL index that changes the `expireAfterSeconds` field from the invalid value','line_number':98,'multiline':False]['text':' to a large positive value.','line_number':99,'multiline':False]['text':' Log the contents of the catalog for debugging purposes in case of failure.','line_number':103,'multiline':False]['text':'limit=','line_number':117,'multiline':True]['text':'limit=','line_number':123,'multiline':True]