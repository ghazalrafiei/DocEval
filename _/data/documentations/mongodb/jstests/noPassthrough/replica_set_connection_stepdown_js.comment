['text':'*
 * Tests that DBClientRS doesn't do any re-targeting on replica set member state changes until it
 * sees a "not master" error response from a command.
 * @tags: [requires_replication]
 ','line_number':1,'multiline':True]['text':' We wait for the primary to transition to the SECONDARY state to ensure we're waiting','line_number':20,'multiline':False]['text':' until after the parallel shell has started the replSetStepDown command and the server is','line_number':21,'multiline':False]['text':' paused at the failpoint. Do not attempt to reconnect to the node, since the node will be','line_number':22,'multiline':False]['text':' holding the global X lock at the failpoint.','line_number':23,'multiline':False]['text':' DBClientRS will continue to send command requests to the node it believed to be primary','line_number':36,'multiline':False]['text':' even after it stepped down so long as it hasn't closed its connection. But this may also','line_number':37,'multiline':False]['text':' throw if the ReplicaSetMonitor's backgroud refresh has already noticed that this node is','line_number':38,'multiline':False]['text':' no longer primary.','line_number':39,'multiline':False]['text':' However, once the server responds back with a "not master" error, DBClientRS will cause','line_number':43,'multiline':False]['text':' the ReplicaSetMonitor to attempt to discover the current primary, which will cause this','line_number':44,'multiline':False]['text':' to definitely throw.','line_number':45,'multiline':False]['text':' We ignore network errors because it's possible that depending on how quickly the server','line_number':59,'multiline':False]['text':' closes connections that the connection would get closed before the server has a chance to','line_number':60,'multiline':False]['text':' respond to the configureFailPoint command with ok=1.','line_number':61,'multiline':False]