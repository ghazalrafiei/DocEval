['text':' Helper functions for testing index builds.','line_number':1,'multiline':False]['text':'*
     * Starts an index build in a separate mongo shell process with given options.
     * Ensures the index build worked or failed with one of the expected failures.
     ','line_number':8,'multiline':True]['text':' If authDoc is specified, then the index build is being started on a server that has','line_number':19,'multiline':False]['text':' auth enabled. Be sure to authenticate the new shell client with the provided','line_number':20,'multiline':False]['text':' credentials.','line_number':21,'multiline':False]['text':' The default for the commit quorum parameter to Collection.createIndexes() should be','line_number':27,'multiline':False]['text':' left as undefined if 'commitQuorum' is omitted. This is because we need to','line_number':28,'multiline':False]['text':' differentiate between undefined (which uses the default in the server) and 0 which','line_number':29,'multiline':False]['text':' disables the commit quorum.','line_number':30,'multiline':False]['text':'*
     * Returns the op id for the running index build on the provided 'collectionName' and
     * 'indexName', or any index build if either is undefined. Returns -1 if there is no current
     * index build.
     * Accepts optional filter that can be used to customize the db.currentOp() query.
     ','line_number':42,'multiline':True]['text':' If no collection is provided, return any index build.','line_number':69,'multiline':False]['text':'*
     * Wait for index build to start and return its op id.
     * Accepts optional filter that can be used to customize the db.currentOp() query.
     * The filter may be necessary in situations when the index build is delegated to a thread pool
     * managed by the IndexBuildsCoordinator and it is necessary to differentiate between the
     * client connection thread and the IndexBuildsCoordinator thread actively building the index.
     ','line_number':87,'multiline':True]['text':'*
     * Wait for index build to begin its collection scan phase and return its op id.
     ','line_number':103,'multiline':True]['text':' The collection scan is the only phase of an index build that uses a progress meter.','line_number':107,'multiline':False]['text':' Since the progress meter can be detected in the db.currentOp() output, we will use this','line_number':108,'multiline':False]['text':' information to determine when we are scanning the collection during the index build.','line_number':109,'multiline':False]['text':'*
     * Wait for all index builds to stop and return its op id.
     ','line_number':116,'multiline':True]['text':'*
     * Checks the db.currentOp() output for the index build with opId.
     *
     * An optional 'onOperationFn' callback accepts an operation to perform any additional checks.
     ','line_number':125,'multiline':True]['text':'*
     * Returns true if `listIndexes` returns the '_id_' index for the collection
     ','line_number':143,'multiline':True]['text':'*
     * Runs listIndexes command on collection.
     * If 'options' is provided, these will be sent along with the command request.
     * Asserts that all the indexes on this collection fit within the first batch of results.
     * Returns a map of index specs keyed by name.
     ','line_number':161,'multiline':True]['text':' First batch contains all the indexes in the collection.','line_number':176,'multiline':False]['text':' A map of index specs keyed by index name.','line_number':179,'multiline':False]['text':' Check ready indexes.','line_number':191,'multiline':False]['text':' Check indexes that are not ready.','line_number':202,'multiline':False]['text':'*
     * Prevent subsequent index builds from running to completion.
     ','line_number':239,'multiline':True]['text':'*
     * Unblock current and subsequent index builds.
     ','line_number':247,'multiline':True]['text':'*
     * Restarts the node in standalone mode to build the index in a rolling fashion.
     ','line_number':255,'multiline':True]['text':'signal=','line_number':260,'multiline':True]['text':'opts=','line_number':260,'multiline':True]['text':'*
     * Returns a version of the given array that has been flattened into one dimension.
     ','line_number':284,'multiline':True]['text':'*
     * Generates index names based on the shape of 'indexSpecs'.
     ','line_number':291,'multiline':True]['text':'*
     * Generates the fail point data and appends it to the 'data' field of each element in
     * 'failPoints'. Returns the build UUIDs of the index builds on the given collection.
     ','line_number':305,'multiline':True]['text':' If there is only one failpoint, its data must include all build UUIDs and index names.','line_number':323,'multiline':False]['text':' Otherwise, each failpoint should only have its respective build UUID and index name(s).','line_number':324,'multiline':False]['text':'*
     * Disables the fail points specified by 'failPointsToDisable' and then waits for the fail
     * points specified by 'failPoints' to be reached.
     ','line_number':345,'multiline':True]['text':' Wait for the index builds to reach their respective failpoints.','line_number':355,'multiline':False]['text':'*
     * Runs the createIndexes command with the given index specs and corresponding index names and
     * expects it to fail with InterruptedDueToReplStateChange.
     ','line_number':383,'multiline':True]['text':'*
     * Runs createIndexFn in a parellel shell to create indexes, modifying the collection with the
     * side writes table.
     *
     * 'createIndexFn' should take three parameters: collection name, index specifications, and
     *   index names.
     *
     * 'indexNames' should follow the exact same format as 'indexSpecs'. For example, if indexSpecs
     *   is [[{a: 1}, {b: 1}], [{c: 1}]], a valid indexNames would look like
     *   [["index_1", "index_2"], ["index_3"]].
     *
     * 'sideWrites' can be an array specifying documents to be inserted into the side writes table,
     * or a function that performs any series of operations (inserts, deletes, or updates) with the
     * side writes table
     *
     * If {hangBeforeBuildingIndex: true}, returns with the hangBeforeBuildingIndex failpoint
     * enabled and the index builds hanging at this point.
     ','line_number':397,'multiline':True]['text':' Wait for the index builds to be registered so that they can be recognized using their','line_number':434,'multiline':False]['text':' build UUIDs.','line_number':435,'multiline':False]['text':' Wait for the index builds to reach the hangBeforeBuildingIndex failpoint.','line_number':445,'multiline':False]['text':' Before building the index, wait for the the last op to be committed so that establishing','line_number':462,'multiline':False]['text':' the majority read cursor does not race with step down.','line_number':463,'multiline':False]['text':'*
     * The same as createIndexesWithSideWrites() above, specialized for the case of a single index
     * to build.
     ','line_number':472,'multiline':True]['text':'*
     * Asserts that the specified index builds completed successfully.
     ','line_number':489,'multiline':True]['text':'*
     * Restarts the given node, ensuring that the index builds write their state to disk upon
     * shutdown and are completed upon startup. Returns the build UUIDs of the index builds that
     * were resumed.
     ','line_number':504,'multiline':True]['text':' Don't interrupt the index builds for shutdown until they are at the desired point.','line_number':525,'multiline':False]['text':' Wait until we hang before shutdown to ensure that we do not move the index builds','line_number':535,'multiline':False]['text':' forward before the step down process is complete.','line_number':536,'multiline':False]['text':' Move the index builds forward to the points that we want them to be interrupted','line_number':543,'multiline':False]['text':' for shutdown at.','line_number':544,'multiline':False]['text':' Disabling this failpoint will allow shutdown to continue and cause the operation','line_number':556,'multiline':False]['text':' context to be killed. This will cause the failpoint specified by failPointName','line_number':557,'multiline':False]['text':' to be interrupted and allow the index builds to be interrupted for shutdown at','line_number':558,'multiline':False]['text':' their current locations.','line_number':559,'multiline':False]['text':' Ensure that the resumable index build state was written to disk upon clean shutdown.','line_number':567,'multiline':False]['text':' Ensure that the index builds were completed upon the node starting back up.','line_number':585,'multiline':False]['text':'*
     * Makes sure that inserting into a collection outside of an index build works properly,
     * validates indexes on all nodes in the replica set, and drops the index at the end.
     ','line_number':620,'multiline':True]['text':' Ensure that the resume info contains the correct phase to resume from.','line_number':644,'multiline':False]['text':' Ensure that the resumed index build resumed the collection scan from the correct','line_number':658,'multiline':False]['text':' location.','line_number':659,'multiline':False]['text':' Ensure that the resumed index build does not perform a phase that it already','line_number':667,'multiline':False]['text':' completed before being interrupted for shutdown.','line_number':668,'multiline':False]['text':'*
     * Runs a resumable index build test on the specified namespace, starting it on the 'rst'
     * replica set and resuming it in the 'upg' replica set, which could be a different binary
     * version.
     *
     * 'indexSpecs' is a 2d array that specifies all indexes that should be built. The first
     *   dimension indicates separate calls to the createIndexes command, while the second
     *   dimension is for indexes that are built together using one call to createIndexes.
     *
     * 'failPoints' is an array of objects that contain two fields: 'name', which specifies the
     *   name of the failpoint, and exactly one of 'logIdWithBuildUUID' and 'logIdWithIndexName'.
     *   The former is used for failpoints whose log message includes the build UUID, and the
     *   latter is used for failpoints whose log message includes the index name. The array must
     *   either contain one element, in which case that one element will be applied to all index
     *   builds specified above, or it must be exactly the length of 'indexSpecs'.
     *
     * 'failPointsIteration' is an integer value used as the 'iteration' field in the failpoint
     *   data for every failpoint specified above.
     *
     * 'expectedResumePhases' is an array of strings that specify the name of the phases that each
     *   index build is expected to resume in. The array must either contain one string, in which
     *   case all index builds will be expected to resume from that phase, or it must be exactly
     *   the length of 'indexSpecs'.
     *
     * 'resumeChecks' is an array of objects that contain exactly one of 'numScannedAfterResume' and
     *   'skippedPhaseLogID'. The former is used to verify that the index build scanned the
     *   expected number of documents in the collection scan after resuming. The latter is used for
     *   phases which do not perform a collection scan after resuming, to verify that the index
     *   index build did not resume from an earlier phase than expected. The log message must
     *   contain the buildUUID attribute.
     *
     * 'sideWrites' is an array of documents inserted during the initialization phase so that they
     *   are inserted into the side writes table and processed during the drain writes phase.
     *
     * 'postIndexBuildInserts' is an array of documents inserted after the index builds have
     *   completed.
     ','line_number':682,'multiline':True]['text':'*
     *  Runs a resumable index build test on the specified namespace and replica set. See
     * `runAndUpgrade' for paremeters documentation.
     ','line_number':765,'multiline':True]['text':'*
     * Runs the resumable index build test specified by the provided failpoint information and
     * index spec on the provided replica set and namespace. This will specifically be used to test
     * that resuming an index build on the former primary works. Documents specified by sideWrites
     * will be inserted during the initialization phase so that they are inserted into the side
     * writes table and processed during the drain writes phase.
     ','line_number':794,'multiline':True]['text':' Ensure that the index build was completed upon the node starting back up.','line_number':841,'multiline':False]['text':'*
     * Runs the resumable index build test specified by the provided failpoint information and
     * index spec on the provided replica set and namespace. This will specifically be used to test
     * that resuming an index build on a secondary works. Documents specified by sideWrites will be
     * inserted during the initialization phase so that they are inserted into the side writes
     * table and processed during the drain writes phase.
     ','line_number':850,'multiline':True]['text':' If the secondary is shutdown for too long, the primary will step down until it','line_number':881,'multiline':False]['text':' can reach the secondary again. In this case, the index build will continue in the','line_number':882,'multiline':False]['text':' background.','line_number':883,'multiline':False]['text':' We should only check that the index build completes after a restart if the index build is','line_number':891,'multiline':False]['text':' not paused on the primary.','line_number':892,'multiline':False]['text':' shouldComplete ','line_number':900,'multiline':True]['text':' Ensure that the index build was completed after unpausing the primary.','line_number':905,'multiline':False]['text':'*
     * Asserts that the temporary directory for the persisted Sorter data is empty.
     ','line_number':915,'multiline':True]['text':' If the index build was interrupted for shutdown before anything was inserted into','line_number':921,'multiline':False]['text':' the Sorter, the temp directory may not exist.','line_number':922,'multiline':False]['text':' Ensure that the persisted Sorter data was cleaned up after failing to resume.','line_number':926,'multiline':False]['text':'*
     * Runs the resumable index build test specified by the provided index spec on the provided
     * replica set and namespace. This will be used to test that failing to resume an index build
     * during the setup phase will cause the index build to restart from the beginning instead.
     * The provided failpoint will be set on the node on restart to specify how resuming the index
     * build should fail. Documents specified by sideWrites will be inserted during the
     * initialization phase so that they are inserted into the side writes table and processed
     * during the drain writes phase.
     ','line_number':931,'multiline':True]['text':' shouldComplete ','line_number':966,'multiline':True]['text':' Ensure that the resumable index build failed as expected.','line_number':975,'multiline':False]['text':' Ensure that the index build was completed after it was restarted.','line_number':987,'multiline':False]['text':' If we fail while parsing, the persisted Sorter data will only be cleaned up after','line_number':1000,'multiline':False]['text':' another restart.','line_number':1001,'multiline':False]['text':' If we fail to resume due to the temp files being missing, the internal idents will','line_number':1005,'multiline':False]['text':' be cleaned up right away.','line_number':1006,'multiline':False]['text':' If we fail after parsing, any remaining internal idents will only be cleaned up','line_number':1011,'multiline':False]['text':' after another restart.','line_number':1012,'multiline':False]['text':'*
     * Runs the resumable index build test specified by the provided index spec on the provided
     * replica set and namespace. This will be used to test that shutting down the server before
     * completing an index build resumed during the setup phase will cause the index build to
     * restart from the beginning on a subsequent startup.
     * Two failpoints will be provided:
     *     - the first will be used to pause the index build after the createIndexes command.
     *     - the second will be used to pause the index build after resuming at startup.
     * Documents specified by sideWrites will be inserted during the initialization phase so that
     * they are inserted into the side writes table and processed during the drain writes phase.
     ','line_number':1017,'multiline':True]['text':' shouldComplete ','line_number':1058,'multiline':True]['text':' Ensure that the resume info contains the correct phase to resume from.','line_number':1063,'multiline':False]['text':' Ensure that the resumed index build is paused at 'failpointAfterStartup'.','line_number':1074,'multiline':False]['text':' After resuming the index build once, it should no longer be resumable if the server shuts','line_number':1077,'multiline':False]['text':' down before index build completes. Therefore, we should not see any Sorter data in the','line_number':1078,'multiline':False]['text':' temp directory.','line_number':1079,'multiline':False]['text':' Interrupting the resumed index build should make it restart from the beginning on next','line_number':1083,'multiline':False]['text':' server startup.','line_number':1084,'multiline':False]['text':' Ensure that the index build was completed after it was restarted.','line_number':1088,'multiline':False]