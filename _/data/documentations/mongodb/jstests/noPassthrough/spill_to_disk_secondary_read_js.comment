['text':'
 * Test that $group and $setWindowFields spill to the WT RecordStore on secondaries with
 * writeConcern greater than w:1.
 * @tags: [requires_replication, requires_majority_read_concern, requires_persistence]
 ','line_number':1,'multiline':True]['text':'*
 * Setup the primary and secondary collections.
 ','line_number':17,'multiline':True]['text':' We'll be using a unique 'key' field for group & lookup, but we cannot use '_id' for this,','line_number':24,'multiline':False]['text':' because '_id' is indexed and would trigger Indexed Loop Join instead of Hash Join.','line_number':25,'multiline':False]['text':' Wait for the insertion to be visible on 'secondary'.','line_number':31,'multiline':False]['text':'*
 * Test spilling of $group, when explicitly run on a secondary.
 ','line_number':35,'multiline':True]['text':' Set memory limit so low that HashAgg has to spill all records it processes.','line_number':44,'multiline':False]['text':' The pipeline is silly -- because '$key' contains unique values, it will "group" exactly','line_number':53,'multiline':False]['text':' one record into each bucket and push a single '$string' value -- but it allows us to be','line_number':54,'multiline':False]['text':' more deterministic with spilling behaviour: each input record would create a record','line_number':55,'multiline':False]['text':' inside 'HashAgg' and because of the low memory limit, all of them will have to be','line_number':56,'multiline':False]['text':' spilled. For the spilled bytes, sanity test that the number is "reasonably large".','line_number':57,'multiline':False]['text':' Sanity check that the operation fails if cannot use disk and is successful otherwise.','line_number':62,'multiline':False]['text':' the group-by key is unique','line_number':78,'multiline':False]['text':' In SBE also check the statistics for disk usage. Note: 'explain()' doesn't support the','line_number':80,'multiline':False]['text':' 'writeConcern' option so we test spilling on the secondary but without using the concern.','line_number':81,'multiline':False]['text':' We expect each record to be individually spilled, so the number of spill events and the','line_number':91,'multiline':False]['text':' number of spilled records should be equal.','line_number':92,'multiline':False]['text':'*
 * Test spilling of $lookup when explicitly run on a secondary.
 ','line_number':103,'multiline':True]['text':' Set memory limit so low that HashLookup has to spill all records it processes.','line_number':112,'multiline':False]['text':' The pipeline is silly -- because '$key' contains unique values, it will self-join each','line_number':121,'multiline':False]['text':' record with itself and nothing else -- but it allows us to be more deterministic with','line_number':122,'multiline':False]['text':' the spilling behaviour. For the spilled bytes, sanity test that the number is "reasonably','line_number':123,'multiline':False]['text':' large".','line_number':124,'multiline':False]['text':' Sanity check that the operation is successful. Note: we cannot test the operation to fail','line_number':132,'multiline':False]['text':' with 'allowDiskUse' set to "false" because that would block HashJoin and fall back to NLJ','line_number':133,'multiline':False]['text':' which doesn't spill.','line_number':134,'multiline':False]['text':' the key for self-join is unique','line_number':141,'multiline':False]['text':' In SBE also check the statistics for disk usage. Note: 'explain()' doesn't support the','line_number':143,'multiline':False]['text':' 'writeConcern' option so we test spilling on the secondary but without using the concern.','line_number':144,'multiline':False]['text':'*
 * Test spilling of $setWindowFields. We only check that the operation is successful. Main tests for
 * $setWindowFields can be found in jstests/aggregation/sources/setWindowFields/spill_to_disk.js.
 ','line_number':164,'multiline':True]['text':' Test that spilling '$setWindowFields' pipeline on a secondary works with a writeConcern','line_number':169,'multiline':False]['text':' greater than w:1.','line_number':170,'multiline':False]['text':' Create small partition.','line_number':176,'multiline':False]['text':' Create large partition.','line_number':180,'multiline':False]