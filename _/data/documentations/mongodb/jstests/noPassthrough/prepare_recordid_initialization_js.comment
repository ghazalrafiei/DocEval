['text':'*
 * This test reproduces a bug, described in SERVER-58409, where reconstructing a prepared
 * transaction during startup recovery re-uses a RecordId of a deleted document and timestamps it
 * in the past. This generates an out-of-order update chain in WiredTiger and can return wrong
 * results for some reads.
 *
 * Consider the following sequence with durable history:
 * - Set OldestTimestamp 1
 * - Insert RecordId(1) -> A at TimeStamp(10)
 * - Insert RID(2) -> B at TS(20)
 * - Delete RID(2) (B) at TS(30)
 *
 * If we were to restart and initialize the next record id, we'd start issuing new documents at
 * RID(2). Normally this is fine. Any new replicated user writes must be generated with a timestamp
 * larger than 30, so the update chain for RID(2) will remain valid.
 *
 * However, when reconstructing prepared transactions, the prepare timestamp (and thus any following
 * commit timestamp, but not the durable timestamp) may be arbitrarily old. In this example, after
 * initializing the next RID to 2, if we were to reconstruct a prepared transaction from TS(10) that
 * performs an insert on this collection, we'd get the following update chain (from oldest to
 * newest):
 *  - RID(2) => B @ TS(20) -> <tombstone> @ TS(30) -> PreparedInsert @ TS(10)
 *
 * Committing the prepared insert at a value between 10 and 30 results in wrong results/inconsistent
 * data when reading at those timestamps. For example, a reader reading before TS 30 and after TS 10
 * would not see the document at RID(2) even though it should.
 *
 * @tags: [
 *   requires_persistence,
 *   requires_replication
 * ]
 ','line_number':1,'multiline':True]['text':' Set the history window to zero to explicitly control the oldest timestamp. This is','line_number':48,'multiline':False]['text':' necessary to predictably exercise the minimum visible timestamp initialization of','line_number':49,'multiline':False]['text':' collections and indexes across a restart.','line_number':50,'multiline':False]['text':' Pin with an arbitrarily small timestamp. Let the rounding tell us where the pin ended up. The','line_number':63,'multiline':False]['text':' write to the `mdb_testing.pinned_timestamp` collection is not logged/replayed during replication','line_number':64,'multiline':False]['text':' recovery. Repinning across startup happens before replication recovery. Do a majority write for','line_number':65,'multiline':False]['text':' predictability of the test.','line_number':66,'multiline':False]['text':' RID: 2','line_number':75,'multiline':False]['text':' RID: 3','line_number':78,'multiline':False]['text':' RID: 4','line_number':80,'multiline':False]['text':' After deleting _id: 4, the highest visible RID will be 3. When reconstructing the prepared insert','line_number':83,'multiline':False]['text':' that was previously at RID 2, we should not insert at RID 4. Instead, we will determine that RID','line_number':84,'multiline':False]['text':' 4 is not visible and insert at RID 5.','line_number':85,'multiline':False]['text':' Should not re-use any RecordIds','line_number':118,'multiline':False]