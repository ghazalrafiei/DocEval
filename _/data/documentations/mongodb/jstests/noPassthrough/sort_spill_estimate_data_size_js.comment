['text':'*
 * Test that estimate of the total data size sorted when spilling to disk is reasonable.
 *
 * This test was originally designed to reproduce SERVER-53760.
 ','line_number':1,'multiline':True]['text':' To reproduce SERVER-53760, we need to create a collection with N documents, where each document','line_number':19,'multiline':False]['text':' is sizable and consists of an array field, called `data`. Then, if we pass the collection through','line_number':20,'multiline':False]['text':' a pipeline consisting of a `$unwind` (on `data`) followed by `$sort`, the documents in the output','line_number':21,'multiline':False]['text':' of `$unwind` all share the same backing BSON in the original collection. Next, if the sorter does','line_number':22,'multiline':False]['text':' not calculate the appropriate size of the document (by discarding the parts of backing BSON not','line_number':23,'multiline':False]['text':' used by each document in the output of `$unwind`), the size approximation can be way bigger than','line_number':24,'multiline':False]['text':' the actual amount, which can result in (unnecessarily) opening too many files (and even running','line_number':25,'multiline':False]['text':' out of the number of allowed open files for some operating systems). In this example, it'd be a','line_number':26,'multiline':False]['text':' factor of 100x.','line_number':27,'multiline':False]['text':' Returns the (first) value of the field named 'key' in the object 'obj' if it exists nested at any','line_number':60,'multiline':False]['text':' depth, else returns "undefined".','line_number':61,'multiline':False]['text':' function findKey','line_number':77,'multiline':False]['text':' SBE executed sbe::SortStage.','line_number':82,'multiline':False]['text':' Classic engine executed DocumentSourceSort.','line_number':85,'multiline':False]['text':' The total data size sorted is no greater than 3x the total size of all documents sorted.','line_number':90,'multiline':False]