['text':'*
 * Confirms inclusion of query, command object, planSummary, and queryFramework in currentOp() for
 * CRUD operations. This test should not be run in the parallel suite as it sets fail points.
 * @tags: [
 *    requires_replication,
 *    requires_sharding,
 * ]
 ','line_number':1,'multiline':True]['text':' This test runs manual getMores using different connections, which will not inherit the','line_number':15,'multiline':False]['text':' implicit session of the cursor establishing command.','line_number':16,'multiline':False]['text':' Set up a 2-shard cluster. Configure 'internalQueryExecYieldIterations' on both shards such','line_number':21,'multiline':False]['text':' that operations will yield on each PlanExecuter iteration.','line_number':22,'multiline':False]['text':' Obtain one mongoS connection and a second direct to the shard.','line_number':29,'multiline':False]['text':' Enable sharding on the the test database and ensure that the primary is on shard0.','line_number':36,'multiline':False]['text':' On a sharded cluster, aggregations which are dispatched to multiple shards first establish','line_number':40,'multiline':False]['text':' zero-batch cursors and only hit the failpoints on the following getMore. This helper takes a','line_number':41,'multiline':False]['text':' generic command object and creates an appropriate filter given the use-case.','line_number':42,'multiline':False]['text':' Drops and re-creates the sharded test collection.','line_number':52,'multiline':False]['text':'*
 * @param {connection} conn - The connection through which to run the test suite.
 * @params {function} currentOp - Function which takes a database object and a filter, and
 * returns an array of matching current operations. This allows us to test output for both the
 * currentOp command and the $currentOp aggregation stage.
 * @params {boolean} truncatedOps - if true, we expect operations that exceed the maximum
 * currentOp size to be truncated in the output 'command' field, and we run only a subset of
 * tests designed to exercise that scenario. If false, we expect the entire operation to be
 * returned.
 * @params {boolean} localOps - if true, we expect currentOp to return operations running on a
 * mongoS itself rather than on the shards.
 ','line_number':59,'multiline':True]['text':' If 'truncatedOps' is true, run only the subset of tests designed to validate the','line_number':87,'multiline':False]['text':' truncation behaviour. Otherwise, run the standard set of tests which assume that','line_number':88,'multiline':False]['text':' truncation will not occur.','line_number':89,'multiline':False]['text':'*
     * Captures currentOp() for a given test command/operation and confirms that namespace,
     * operation type, planSummary, and queryFramework are correct.
     *
     *  - 'testObj' - Contains test arguments.
     *  - 'testObj.test' - A function that runs the desired test op/cmd.
     *  - 'testObj.planSummary' - A string containing the expected planSummary.
     *  - 'testObj.queryFramework' - A string containing the expected queryFramework.
     *  - 'testObj.currentOpFilter' - A filter to be used to narrow currentOp() output to only the
     *  relevant operation or command.
     *  - 'testObj.command]' - The command to test against. Will look for this to be a key in the
     *  currentOp().query object.
     *  - 'testObj.operation' - The operation to test against. Will look for this to be the value
     *  of the currentOp().op field.
     *  - 'testObj.skipMongosLocalOps' - True if this test should not be run against a mongos with
     *  localOps=true.
     ','line_number':96,'multiline':True]['text':' Force queries to hang on yield to allow for currentOp capture.','line_number':120,'multiline':False]['text':' Set the test configuration in TestData for the parallel shell test.','line_number':130,'multiline':False]['text':' Wrapper function which sets DB before running the test function','line_number':134,'multiline':False]['text':' found at TestData.currentOpTest.','line_number':135,'multiline':False]['text':' Run the operation in the background.','line_number':141,'multiline':False]['text':' Augment the currentOpFilter with additional known predicates.','line_number':144,'multiline':False]['text':' Capture currentOp record for the query and confirm that the 'query', 'planSummary', and','line_number':160,'multiline':False]['text':' 'queryFramework' fields contain the content expected. We are indirectly testing the 'ns'','line_number':161,'multiline':False]['text':' field as well with the currentOp query argument.','line_number':162,'multiline':False]['text':' Allow the query to complete.','line_number':188,'multiline':False]['text':'*
     * Runs a set of tests to verify that the currentOp output appears as expected. These tests
     * assume that the 'truncateOps' parameter is false, so no command objects in the currentOp
     * output will be truncated to string.
     ','line_number':199,'multiline':True]['text':'','line_number':205,'multiline':False]['text':' Confirm currentOp content for commands defined in 'testList'.','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' Yields only take place on a mongod. Since this test depends on checking that the','line_number':288,'multiline':False]['text':' currentOp's reported 'numYields' has advanced beyond zero, this test is not','line_number':289,'multiline':False]['text':' expected to work when running against a mongos with localOps=true.','line_number':290,'multiline':False]['text':' A mapReduce which gets sent to the shards is internally translated to an','line_number':321,'multiline':False]['text':' aggregation.','line_number':322,'multiline':False]['text':'','line_number':367,'multiline':False]['text':' Confirm currentOp contains collation for find command.','line_number':368,'multiline':False]['text':'','line_number':369,'multiline':False]['text':'','line_number':385,'multiline':False]['text':' Confirm currentOp content for the $geoNear aggregation stage.','line_number':386,'multiline':False]['text':'','line_number':387,'multiline':False]['text':'','line_number':421,'multiline':False]['text':' Confirm currentOp content for getMore. This case tests command and legacy','line_number':422,'multiline':False]['text':' getMore with originating find and aggregate commands.','line_number':423,'multiline':False]['text':'','line_number':424,'multiline':False]['text':' If this is a non-localOps test running via mongoS, then the cursorID we','line_number':463,'multiline':False]['text':' obtained above is the ID of the mongoS cursor, and will not match the IDs','line_number':464,'multiline':False]['text':' of any of the individual shard cursors in the currentOp output. We','line_number':465,'multiline':False]['text':' therefore don't perform an exact match on 'command.getMore', but only','line_number':466,'multiline':False]['text':' verify that the cursor ID is non-zero.','line_number':467,'multiline':False]['text':'*
     * Runs a set of tests to verify that currentOp will serialize objects exceeding ~1000 bytes
     * to string when the 'truncateOps' parameter is set.
     ','line_number':490,'multiline':True]['text':' When the currentOp command serializes the query object as a string, individual string','line_number':498,'multiline':False]['text':' values inside it are truncated at 150 characters. To test "total length" truncation','line_number':499,'multiline':False]['text':' we need to pass multiple values, each smaller than 150 bytes.','line_number':500,'multiline':False]['text':' Verify that the currentOp command removes the comment field from the command while','line_number':517,'multiline':False]['text':' truncating the command. Command {find: <coll>, comment: <comment>, filter: {XYZ}} should','line_number':518,'multiline':False]['text':' be represented as {$truncated: "{find: <coll>, filter: {XY...", comment: <comment>}.','line_number':519,'multiline':False]['text':' We put the 'comment' field before the large 'filter' in the command object so','line_number':527,'multiline':False]['text':' that, when the object is truncated in the currentOp output, we can confirm that','line_number':528,'multiline':False]['text':' the 'comment' field has been removed from the object and promoted to a top-level','line_number':529,'multiline':False]['text':' field.','line_number':530,'multiline':False]['text':' Verify that a command without the "comment" field appears as {$truncated: <string>} when','line_number':542,'multiline':False]['text':' truncated by currentOp.','line_number':543,'multiline':False]['text':' Verify that an originatingCommand truncated by currentOp appears as { $truncated:','line_number':559,'multiline':False]['text':' <string>, comment: <string> }.','line_number':560,'multiline':False]['text':' Verify that an aggregation truncated by currentOp appears as { $truncated: <string>,','line_number':589,'multiline':False]['text':' comment: <string> } when a comment parameter is present.','line_number':590,'multiline':False]['text':' Run all tests using the $currentOp aggregation stage.','line_number':642,'multiline':False]['text':' Run tests using the currentOp command. The 'localOps' parameter is not supported.','line_number':650,'multiline':False]