['text':' Helper functions for checking transaction server status invariants that may not hold for brief','line_number':1,'multiline':False]['text':' periods of time due to non-atomic updates.','line_number':2,'multiline':False]['text':'*
 * Returns all elements in the given array that evaluate to false for the given predicate
 * function 'predFn'.
 ','line_number':4,'multiline':True]['text':'*
 * serverStatus invariant: currentActive + currentInactive = currentOpen
 ','line_number':12,'multiline':True]['text':' Stats are returned in NumberLong type. Convert to Number type so we are sure comparison','line_number':16,'multiline':False]['text':' works as expected.','line_number':17,'multiline':False]['text':'*
 * serverStatus invariant: totalCommitted + totalAborted + currentOpen = totalStarted
 ','line_number':24,'multiline':True]['text':'*
 * serverStatus invariant: all counts are non-negative
 ','line_number':35,'multiline':True]['text':'*
 * serverStatus invariant: totalPreparedThenAborted + totalPreparedThenCommitted +
 * currentPrepared = totalPrepared
 ','line_number':49,'multiline':True]['text':'*
 * Certain metrics for non-prepared transactions can be calculated by subtracting the relevant
 * total transactions metric by the relevant prepared transactions metric.
 * serverStatus invariant: unpreparedAborted + unpreparedCommitted + unpreparedOpen =
 * totalUnprepared
 ','line_number':62,'multiline':True]['text':'*
 * serverStatus invariant: totalCommitted = sum of each commit type's successful counter.
 ','line_number':81,'multiline':True]['text':'*
 * serverStatus invariant: totalAborted = sum of all abort cause counters.
 ','line_number':95,'multiline':True]['text':'*
 * Checks that the invariant described by 'predFn' holds for the given samples, with a
 * maximum error of maxErrPct.
 ','line_number':109,'multiline':True]['text':'*
 * Check invariants of transactions metrics reported in 'serverStatus' (server-wide metrics),
 * using the number of given samples.
 *
 * Inside the server, these metrics are tracked individually with atomic counters, but there
 * is no guarantee that two separate counters are updated atomically. There may be a delay
 * between the update of one counter (e.g. 'currentOpen') and another counter (e.g.
 * 'totalAborted'). This means that some invariants may not strictly hold at all times. The
 * assumption is that when these invariants are broken due to these non atomic updates, they
 * are broken for an extremely short period of time, and therefore only appear very rarely
 * when sampling the output of these metrics. We base the testing strategy below on this
 * assumption. Instead of asserting that a particular invariant holds 100% of the time, we
 * assert something slightly weaker i.e. that the invariant holds, for example, 95% percent
 * of the time. The error bounds for this test were determined somewhat empirically, but
 * they were kept very conservative. One goal of these tests is to ensure that if a change
 * was made that broke these metrics significantly, it would be picked up by these tests.
 * This test should not be sensitive to small fluctuations in metrics output.
 ','line_number':122,'multiline':True]['text':' Sample serverStatus several times, sleeping a bit in between.','line_number':141,'multiline':False]['text':' milliseconds.','line_number':146,'multiline':False]['text':' We consider an invariant failure rate of 5% within a large enough sample to be acceptable','line_number':149,'multiline':False]['text':' For example, in a batch of 100 metrics samples, we would accept <= 5 violations of a','line_number':150,'multiline':False]['text':' particular invariant.','line_number':151,'multiline':False]['text':' Check mongod specific stats.','line_number':157,'multiline':False]['text':' Check mongos specific stats.','line_number':166,'multiline':False]['text':' allCountsNonNegative() is always expected to succeed.','line_number':171,'multiline':False]