['text':'*
 * Provides wrapper functions that perform exponential backoff and allow for
 * acceptable errors to be returned from mergeChunks, moveChunk, and splitChunk
 * commands.
 *
 * Also provides functions to help perform assertions about the state of chunks.
 *
 * Intended for use by workloads testing sharding (i.e., workloads starting with 'sharded_').
 ','line_number':1,'multiline':True]['text':' exponential backoff','line_number':19,'multiline':False]['text':' milliseconds','line_number':21,'multiline':False]['text':' milliseconds','line_number':28,'multiline':False]['text':' If the command worked, exit the loop early.','line_number':37,'multiline':False]['text':' Assert command worked or acceptable error occurred.','line_number':41,'multiline':False]['text':' When an acceptable error occurs, sleep and then retry.','line_number':43,'multiline':False]['text':' Throw an exception if the command errored for any other reason.','line_number':49,'multiline':False]['text':' Using _secondaryThrottle adds coverage for additional waits for write concern on the','line_number':81,'multiline':False]['text':' recipient during cloning.','line_number':82,'multiline':False]['text':' _secondaryThrottle requires a write concern.','line_number':85,'multiline':False]['text':' The chunk migration has surely been aborted if the startCommit of the','line_number':97,'multiline':False]['text':' procedure was interrupted by a stepdown.','line_number':98,'multiline':False]['text':' The chunk migration has surely been aborted if the recipient shard didn't','line_number':101,'multiline':False]['text':' believe there was an active chunk migration.','line_number':102,'multiline':False]['text':' The chunk migration has surely been aborted if there was another active','line_number':105,'multiline':False]['text':' chunk migration on the donor.','line_number':106,'multiline':False]['text':' A stepdown may cause the collection's lock to become temporarily unreleasable','line_number':109,'multiline':False]['text':' and cause the chunk migration to timeout.  The migration may still succeed','line_number':110,'multiline':False]['text':' after the lock's lease expires.','line_number':111,'multiline':False]['text':' Take a set of connections to a shard (replica set or standalone mongod),','line_number':120,'multiline':False]['text':' or a set of connections to the config servers, and return a connection','line_number':121,'multiline':False]['text':' to any node in the set for which isWritablePrimary is true.','line_number':122,'multiline':False]['text':' 10 minutes.','line_number':124,'multiline':False]['text':' Take a set of mongos connections to a sharded cluster and return a','line_number':144,'multiline':False]['text':' random connection.','line_number':145,'multiline':False]['text':' Intended for use on mongos connections only.','line_number':153,'multiline':False]['text':' Return all shards containing documents in [lower, upper).','line_number':154,'multiline':False]['text':' As noted in SERVER-20768, doing a range query with { $lt : X },  where','line_number':160,'multiline':False]['text':' X is the _upper bound_ of a chunk,  incorrectly targets the shard whose','line_number':161,'multiline':False]['text':' _lower bound_ is X. Therefore, if upper !== MaxKey, we use a workaround','line_number':162,'multiline':False]['text':' to ensure that only the shard whose lower bound = X is targeted.','line_number':163,'multiline':False]['text':' We set a large batch size and project out all of the fields in order to greatly reduce','line_number':180,'multiline':False]['text':' the likelihood a cursor would actually be returned. This is acceptable because we're only','line_number':181,'multiline':False]['text':' interested in how many documents there were and not any of their contents. The','line_number':182,'multiline':False]['text':' network_error_and_txn_override.js override would throw an exception if we attempted to','line_number':183,'multiline':False]['text':' use the getMore command.','line_number':184,'multiline':False]['text':' Return the number of docs in [lower, upper) as seen by conn.','line_number':188,'multiline':False]['text':' Intended for use on config or mongos connections only.','line_number':195,'multiline':False]['text':' Get number of chunks containing values in [lower, upper). The upper bound on a chunk is','line_number':196,'multiline':False]['text':' exclusive, but to capture the chunk we must provide it with less than or equal to 'upper'.','line_number':197,'multiline':False]['text':' Intended for use on config or mongos connections only.','line_number':209,'multiline':False]['text':' For getting chunks containing values in [lower, upper). The upper bound on a chunk is','line_number':210,'multiline':False]['text':' exclusive, but to capture the chunk we must provide it with less than or equal to 'upper'.','line_number':211,'multiline':False]['text':' Intended for use on config or mongos connections only.','line_number':224,'multiline':False]['text':' For debug printing chunks containing values in [lower, upper). The upper bound on a chunk is','line_number':225,'multiline':False]['text':' exclusive, but to capture the chunk we must provide it with less than or equal to 'upper'.','line_number':226,'multiline':False]