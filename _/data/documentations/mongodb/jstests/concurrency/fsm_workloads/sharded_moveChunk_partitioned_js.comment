['text':'*
 * Extends sharded_base_partitioned.js.
 *
 * Exercises the concurrent moveChunk operations, but each thread operates on its own set of
 * chunks.
 *
 * @tags: [
 *  requires_sharding,
 *  assumes_balancer_off,
 * ]
 ','line_number':1,'multiline':True]['text':' number of shard key values','line_number':23,'multiline':False]['text':' Re-assign a chunk from this thread's partition to a random shard, and','line_number':25,'multiline':False]['text':' verify that each node in the cluster affected by the moveChunk operation sees','line_number':26,'multiline':False]['text':' the appropriate after-state regardless of whether the operation succeeded or failed.','line_number':27,'multiline':False]['text':' Committing a chunk migration requires acquiring the global X lock on the CSRS primary.','line_number':29,'multiline':False]['text':' This state function is unsafe to automatically run inside a multi-statement transaction','line_number':30,'multiline':False]['text':' because it'll have left an idle transaction on the CSRS primary before attempting to run','line_number':31,'multiline':False]['text':' the moveChunk command, which can lead to a hang.','line_number':32,'multiline':False]['text':' Verify that more than one shard exists in the cluster. If only one shard existed,','line_number':38,'multiline':False]['text':' there would be no way to move a chunk from one shard to another.','line_number':39,'multiline':False]['text':' Choose a random chunk in our partition to move.','line_number':45,'multiline':False]['text':' Choose a random shard to move the chunk to.','line_number':49,'multiline':False]['text':' Save the number of documents in this chunk's range found on the chunk's current shard','line_number':58,'multiline':False]['text':' (the fromShard) before the moveChunk operation. This will be used to verify that the','line_number':59,'multiline':False]['text':' number of documents in the chunk's range found on the _toShard_ after a _successful_','line_number':60,'multiline':False]['text':' moveChunk operation is the same as numDocsBefore, or that the number of documents in the','line_number':61,'multiline':False]['text':' chunk's range found on the _fromShard_ after a _failed_ moveChunk operation is the same','line_number':62,'multiline':False]['text':' as numDocsBefore.','line_number':63,'multiline':False]['text':' Choose the mongos randomly to distribute load.','line_number':64,'multiline':False]['text':' Save the number of chunks before the moveChunk operation. This will be used','line_number':68,'multiline':False]['text':' to verify that the number of chunks after the moveChunk operation remains the same.','line_number':69,'multiline':False]['text':' Randomly choose whether to wait for all documents on the fromShard','line_number':73,'multiline':False]['text':' to be deleted before the moveChunk operation returns.','line_number':74,'multiline':False]['text':' Use chunk_helper.js's moveChunk wrapper to tolerate acceptable failures','line_number':77,'multiline':False]['text':' and to use a limited number of retries with exponential backoff.','line_number':78,'multiline':False]['text':' Verify that the fromShard and toShard have the correct after-state','line_number':83,'multiline':False]['text':' (see comments below for specifics).','line_number':84,'multiline':False]['text':' If the moveChunk operation succeeded, verify that the shard the chunk','line_number':91,'multiline':False]['text':' was moved to returns all data for the chunk. If waitForDelete was true,','line_number':92,'multiline':False]['text':' also verify that the shard the chunk was moved from returns no data for the chunk.','line_number':93,'multiline':False]['text':' If the moveChunk operation failed, verify that the shard the chunk was','line_number':107,'multiline':False]['text':' originally on returns all data for the chunk, and the shard the chunk','line_number':108,'multiline':False]['text':' was supposed to be moved to returns no data for the chunk.','line_number':109,'multiline':False]['text':' Verify that all config servers have the correct after-state.','line_number':116,'multiline':False]['text':' If the moveChunk operation succeeded, verify that the config updated the chunk's shard','line_number':117,'multiline':False]['text':' with the toShard. If the operation failed, verify that the config kept the chunk's shard','line_number':118,'multiline':False]['text':' as the fromShard.','line_number':119,'multiline':False]['text':' Regardless of whether the operation succeeded or failed, verify that the number of chunks','line_number':130,'multiline':False]['text':' in our partition stayed the same.','line_number':131,'multiline':False]['text':' Verify that all mongos processes see the correct after-state on the shards and configs.','line_number':137,'multiline':False]['text':' (see comments below for specifics).','line_number':138,'multiline':False]['text':' Regardless of if the moveChunk operation succeeded or failed,','line_number':140,'multiline':False]['text':' verify that each mongos sees as many documents in the chunk's','line_number':141,'multiline':False]['text':' range after the move as there were before.','line_number':142,'multiline':False]['text':' If the moveChunk operation succeeded, verify that each mongos sees all data in the','line_number':148,'multiline':False]['text':' chunk's range on only the toShard. If the operation failed, verify that each mongos','line_number':149,'multiline':False]['text':' sees all data in the chunk's range on only the fromShard.','line_number':150,'multiline':False]['text':' If the moveChunk operation succeeded, verify that each mongos updated the chunk's','line_number':164,'multiline':False]['text':' shard metadata with the toShard. If the operation failed, verify that each mongos','line_number':165,'multiline':False]['text':' still sees the chunk's shard metadata as the fromShard.','line_number':166,'multiline':False]