['text':'*
 * Performs updates in transactions without the shard key while chunks are being moved. This
 * includes multi=true updates and multi=false updates with exact _id queries.
 *
 * @tags: [
 *  requires_sharding,
 *  assumes_balancer_off,
 *  requires_non_retryable_writes,
 *  uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' Number of documents per partition. Note that there is one chunk per partition and one','line_number':21,'multiline':False]['text':' partition per thread.','line_number':22,'multiline':False]['text':' The variables used by the random_moveChunk_base config in order to move chunks.','line_number':28,'multiline':False]['text':' Use a CountDownLatch as if it were a std::atomic<long long> shared between all of the','line_number':33,'multiline':False]['text':' threads. The collection name is suffixed with the current this.latch.getCount() value','line_number':34,'multiline':False]['text':' when concurrent CRUD operations are run against it. With every refineCollectionShardKey,','line_number':35,'multiline':False]['text':' call this.latch.countDown() and run CRUD operations against the new collection suffixed','line_number':36,'multiline':False]['text':' with this.latch.getCount(). This bypasses the need to drop and reshard the current','line_number':37,'multiline':False]['text':' collection with every refineCollectionShardKey since it cannot be achieved in an atomic','line_number':38,'multiline':False]['text':' fashion under the FSM infrastructure (meaning CRUD operations would fail).','line_number':39,'multiline':False]['text':' Because updates don't have a shard filter stage, a migration may fail if a','line_number':55,'multiline':False]['text':' broadcast update is operating on orphans from a previous migration in the range being','line_number':56,'multiline':False]['text':' migrated back in. The particular error code is replaced with a more generic one, so this','line_number':57,'multiline':False]['text':' is identified by the failed migration's error message.','line_number':58,'multiline':False]['text':' The refienCollectionCoordinator interrupt all migrations by setting `allowMigration`','line_number':63,'multiline':False]['text':' to false','line_number':64,'multiline':False]['text':' This error will occur as a result of trying to move a chunk with a pre-refine','line_number':71,'multiline':False]['text':' collection epoch.','line_number':72,'multiline':False]['text':' This error will occur if a moveChunk command has been sent with chunk boundaries','line_number':74,'multiline':False]['text':' that represent the pre-refine chunks, but the collection has already been changed','line_number':75,'multiline':False]['text':' to possess the post-refine chunk boundaries.','line_number':76,'multiline':False]['text':' There is a race that could occur where two threads run refineCollectionShardKey','line_number':91,'multiline':False]['text':' concurrently on the same collection. Since the epoch of the collection changes,','line_number':92,'multiline':False]['text':' the later thread may receive a StaleEpoch error, which is an acceptable error.','line_number':93,'multiline':False]['text':' Occasionally flush the router's cached metadata to verify the metadata for the refined','line_number':117,'multiline':False]['text':' collections can be successfully loaded.','line_number':118,'multiline':False]['text':' Proactively create and shard all possible collections suffixed with this.latch.getCount()','line_number':132,'multiline':False]['text':' that could receive CRUD operations over the course of the FSM workload. This prevents the','line_number':133,'multiline':False]['text':' race that could occur between sharding a collection and creating an index on the new','line_number':134,'multiline':False]['text':' shard key (if this step were done after every refineCollectionShardKey).','line_number':135,'multiline':False]