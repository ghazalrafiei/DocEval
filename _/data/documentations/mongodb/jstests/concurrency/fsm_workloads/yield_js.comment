['text':'*
 * yield.js
 *
 * Designed to execute queries and make them yield as much as possible while also updating and
 * removing documents that they operate on.
 ','line_number':1,'multiline':True]['text':' The explain used to build the assertion message in advanceCursor() is the only command not','line_number':9,'multiline':False]['text':' allowed in a transaction used in the query state function. With shard stepdowns, getMores','line_number':10,'multiline':False]['text':' aren't allowed outside a transaction, so if the explain runs when the suite is configured to','line_number':11,'multiline':False]['text':' run with transactions and shard stepdowns, the query state function will be retried outside a','line_number':12,'multiline':False]['text':' transaction, which fails the test. This can be avoided by not running explain with this','line_number':13,'multiline':False]['text':' configuration.','line_number':14,'multiline':False]['text':' Number of docs to insert at the beginning.','line_number':19,'multiline':False]['text':' Batch size of queries to introduce more saving and restoring of states.','line_number':21,'multiline':False]['text':' The words that can be found in the collection.','line_number':23,'multiline':False]['text':'
         * Helper function to advance a cursor, and verify that the documents that come out are
         * what we'd expect.
         ','line_number':25,'multiline':True]['text':' Keep track of the previous doc in case the verifier is trying to verify a sorted','line_number':37,'multiline':False]['text':' query.','line_number':38,'multiline':False]['text':'
         * Many subclasses will want different behavior in the update stage. To change what types
         * of updates happen, they can simply override this function to return which update doc
         * the update state should use for the update query.
         ','line_number':55,'multiline':True]['text':'
         * Update a random document from the collection.
         ','line_number':67,'multiline':True]['text':'
         * Remove a random document from the collection, then re-insert one to prevent losing
         * documents.
         ','line_number':80,'multiline':True]['text':'
         * Issue a query that will potentially yield and resume while documents are being updated.
         * Subclasses will implement this differently
         ','line_number':96,'multiline':True]['text':'
     * Visual of FSM:
     *
     *            _
     *           / \
     *           V /
     *          remove
     *          ^    ^
     *         /      \
     *        v       v
     * -->update<---->query
     *     ^ \           ^ \
     *     \_/           \_/
     *
     ','line_number':111,'multiline':True]['text':'
     * Sets up the indices, sets a failpoint and lowers some yielding parameters to encourage
     * more yielding, and inserts the documents to be used.
     ','line_number':132,'multiline':True]['text':' Lower the following parameters to force even more yields.','line_number':137,'multiline':False]['text':' Set up some data to query.','line_number':144,'multiline':False]['text':' Give each doc some word of text','line_number':148,'multiline':False]['text':'
     * Reset parameters and disable failpoint.
     ','line_number':156,'multiline':True]