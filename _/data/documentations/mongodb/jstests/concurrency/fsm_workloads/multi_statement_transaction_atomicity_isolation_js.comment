['text':'*
 * multi_statement_transaction_atomicity_isolation.js
 *
 * Inserts a handful of documents into a collection. Each thread then updates multiple documents
 * inside of a multi-statement transaction. The resulting documents are of the form
 *
 *   {_id: 0, order: [{tid: 0, iteration: 0, numUpdated: 3},
 *                    {tid: 1, iteration: 0, numUpdated: 2},
 *                    ...]}
 *
 *   {_id: 1, order: [{tid: 0, iteration: 0, numUpdated: 3},
 *                    {tid: 1, iteration: 0, numUpdated: 2},
 *                    ...]}
 *
 *   {_id: 2, order: [{tid: 0, iteration: 0, numUpdated: 3}, ...]}
 *
 * where the {tid: 0, iteration: 0, numUpdated: 3} element should occur 3 times and should always
 * come before the {tid: 1, iteration: 0, numUpdated: 2} element's 2 occurrences. In other words, we
 * track
 *
 *   (1) the relative order in which each of the transactions commit based on their position within
 *       the array, and
 *
 *   (2) the expected number of occurrences for each element in the array.
 *
 * An anomaly is detected if either
 *
 *   (a) transaction A's (tid, txnNumber, numToUpdate) element precedes transaction B's
 *       (tid, txnNumber, numToUpdate) element in one document and follows it in another. This would
 *       suggest that the database failed to detect a write-write conflict despite both transactions
 *       modifying the same document and is therefore not providing snapshot isolation.
 *
 *   (b) transaction C's (tid, txnNumber, numToUpdate) element doesn't appear numToUpdate times
 *       across a consistent snapshot of all of the documents. This would suggest that the database
 *       failed to atomically update all documents modified in a concurrent transaction.
 *
 *   (c) transaction D's (tid, txnNumber) for a given (docId, dbName, collName) doesn't match the
 *       (tid, txnNumber) for the thread with threadId == tid. This indicates that there are writes
 *       that exist in the database that were not committed.
 *
 * @tags: [uses_transactions, assumes_snapshot_transactions]
 ','line_number':1,'multiline':True]['text':' We add an edge from commitOrder[i - 1] to commitOrder[i] because it being earlier','line_number':58,'multiline':False]['text':' in the array that was $push'd to indicates that the commitOrder[i - 1]','line_number':59,'multiline':False]['text':' transaction happened before the commit[i] transaction order.','line_number':60,'multiline':False]['text':' We store 'op' both as the key and as part of the value because the mongo shell's','line_number':85,'multiline':False]['text':' Map type mangles the key and doesn't provide an API to retrieve the original','line_number':86,'multiline':False]['text':' key-value pairs.','line_number':87,'multiline':False]['text':' Check that only writes that were committed are reflected in the database. Writes that were','line_number':101,'multiline':False]['text':' committed are reflected in $config.data.updatedDocsClientHistory.','line_number':102,'multiline':False]['text':' updatedDocsServerHistory is a dictionary of {txnNum: [list of {docId, dbName, collName}]}','line_number':104,'multiline':False]['text':' that were updated by this thread (this.tid) and exist in the database.','line_number':105,'multiline':False]['text':' Pull out only those docIds and txnNums that were updated by this thread.','line_number':109,'multiline':False]['text':' Assert that any transaction written down in $config.data also exists in the database','line_number':122,'multiline':False]['text':' and that the docIds associated with this txnNum in $config.data match those docIds','line_number':123,'multiline':False]['text':' associated with this txnNum in the database.','line_number':124,'multiline':False]['text':' Overridable functions for subclasses to do more complex transactions.','line_number':136,'multiline':False]['text':' We intentionally use a smaller batch size when fetching all of the','line_number':151,'multiline':False]['text':' documents in the collection in order to stress the behavior of reading','line_number':152,'multiline':False]['text':' from the same snapshot over the course of multiple network roundtrips.','line_number':153,'multiline':False]['text':' Generate between [2, numDocs / 2] operations.','line_number':180,'multiline':False]['text':' Select 'numOps' document (without replacement) to update.','line_number':182,'multiline':False]['text':' Set causalConsistency = true to ensure that in the checkConsistency state','line_number':191,'multiline':False]['text':' function, we will be able to read our own writes that were committed as a','line_number':192,'multiline':False]['text':' part of the update state function.','line_number':193,'multiline':False]['text':' We apply the following update to each of the 'docIds' documents','line_number':213,'multiline':False]['text':' to record the number of times we expect to see the transaction','line_number':214,'multiline':False]['text':' being run in this execution of the update() state function by this','line_number':215,'multiline':False]['text':' worker thread present across all documents. Using the $push','line_number':216,'multiline':False]['text':' operator causes a transaction which commits after another','line_number':217,'multiline':False]['text':' transaction to appear later in the array.','line_number':218,'multiline':False]['text':' We do a non-transactional read on a causally consistent session so that it uses','line_number':269,'multiline':False]['text':' 'afterClusterTime' internally and is subject to prepare conflicts (in a sharded','line_number':270,'multiline':False]['text':' cluster). This is meant to expose deadlocks involving prepare conflicts outside','line_number':271,'multiline':False]['text':' of transactions.','line_number':272,'multiline':False]['text':' If the session is expected to be killed, ignore it.','line_number':281,'multiline':False]['text':'*
     * This function wraps the state functions and causes each thread to run checkConsistency()
     * before teardown.
     ','line_number':290,'multiline':True]['text':' Wrap each state in a checkConsistencyOnLastIteration() invocation.','line_number':302,'multiline':False]['text':' The default WC is majority and this workload may not be able to satisfy majority writes.','line_number':321,'multiline':False]['text':' Advance each router's cluster time to be >= the time of the writes, so the first','line_number':353,'multiline':False]['text':' global snapshots chosen by each is guaranteed to include the inserted documents.','line_number':354,'multiline':False]['text':' Unsetting CWWC is not allowed, so explicitly restore the default write concern to be','line_number':364,'multiline':False]['text':' majority by setting CWWC to {w: majority}.','line_number':365,'multiline':False]['text':' Because of the usage of 'getMore' command in this test, we may receive','line_number':393,'multiline':False]['text':' 'CursorNotFound' exception from the server, if a node was stepped down between the','line_number':394,'multiline':False]['text':' 'find' and subsequent 'getMore' command. We retry the entire transaction in this','line_number':395,'multiline':False]['text':' case.','line_number':396,'multiline':False]