['text':'*
 * Runs updateOne, deleteOne, and findAndModify without shard key against a sharded cluster while
 * concurrently refining the collection's shard key.
 *
 * @tags: [
 *  requires_fcv_71,
 *  requires_sharding,
 *  uses_transactions,
 *  assumes_balancer_off,
 * ]
 ','line_number':1,'multiline':True]['text':' Use a CountDownLatch as if it were a std::atomic<long long> shared between all of the','line_number':24,'multiline':False]['text':' threads. The collection name is suffixed with the current this.latch.getCount() value','line_number':25,'multiline':False]['text':' when concurrent CRUD operations are run against it. With every refineCollectionShardKey,','line_number':26,'multiline':False]['text':' call this.latch.countDown() and run CRUD operations against the new collection suffixed','line_number':27,'multiline':False]['text':' with this.latch.getCount(). This bypasses the need to drop and reshard the current','line_number':28,'multiline':False]['text':' collection with every refineCollectionShardKey since it cannot be achieved in an atomic','line_number':29,'multiline':False]['text':' fashion under the FSM infrastructure (meaning CRUD operations would fail).','line_number':30,'multiline':False]['text':' The variables used by the random_moveChunk_base config in order to move chunks.','line_number':38,'multiline':False]['text':' Proactively create and shard all possible collections suffixed with this.latch.getCount()','line_number':43,'multiline':False]['text':' that could receive CRUD operations over the course of the FSM workload. This prevents the','line_number':44,'multiline':False]['text':' race that could occur between sharding a collection and creating an index on the new','line_number':45,'multiline':False]['text':' shard key (if this step were done after every refineCollectionShardKey).','line_number':46,'multiline':False]['text':' Occasionally flush the router's cached metadata to verify the metadata for the refined','line_number':57,'multiline':False]['text':' collections can be successfully loaded.','line_number':58,'multiline':False]['text':' There is a race that could occur where two threads run refineCollectionShardKey','line_number':81,'multiline':False]['text':' concurrently on the same collection. Since the epoch of the collection changes,','line_number':82,'multiline':False]['text':' the later thread may receive a StaleEpoch error, which is an acceptable error.','line_number':83,'multiline':False]