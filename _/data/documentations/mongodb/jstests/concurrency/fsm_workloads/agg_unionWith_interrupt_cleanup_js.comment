['text':'*
 * Tests $unionWith stage of aggregate command concurrently with killOp. Ensures that all cursors
 * opened on behalf of the $unionWith are killed when interrupted.
 *
 * @tags: [
 *   uses_curop_agg_stage
 * ]
 ','line_number':1,'multiline':True]['text':' Here we consistenly union with the same namespace to benefit from the sharded collection','line_number':19,'multiline':False]['text':' setup that may have been done in sharded passthroughs.','line_number':20,'multiline':False]['text':' TODO SERVER-46251 use multiple namespaces.','line_number':21,'multiline':False]['text':' Use a small batch size to ensure these operations open up a cursor and use multiple','line_number':26,'multiline':False]['text':' getMores. We want to give coverage to interrupting the getMores as well.','line_number':27,'multiline':False]['text':' Keep iterating the cursor until we exhaust it or we are interrupted.','line_number':30,'multiline':False]['text':' If the interrupt happens just as the cursor is being checked back in, the cursor will','line_number':35,'multiline':False]['text':' be killed without failing the operation. When this happens, the next getMore will','line_number':36,'multiline':False]['text':' fail with CursorNotFound.','line_number':37,'multiline':False]['text':' The aggregate command could be running different sub-aggregates internally depending on','line_number':43,'multiline':False]['text':' which stage of execution it is in. So we rely on the comment to detect which operations','line_number':44,'multiline':False]['text':' are eligible to be interrupted, and interrupt those.','line_number':45,'multiline':False]['text':' Ensure that no operations, cursors, or sub-operations are left active. After','line_number':60,'multiline':False]['text':' SERVER-46255, We normally expect all operations to be cleaned up safely, but there are','line_number':61,'multiline':False]['text':' race conditions or possible network blips where the kill won't arrive as expected. We','line_number':62,'multiline':False]['text':' don't want to block the interrupt thread or the operation itself to wait around to make','line_number':63,'multiline':False]['text':' sure everything dies correctly, so we just rely on cursor timeouts or session reaps to','line_number':64,'multiline':False]['text':' cover these rare cases. Here we make sure everything is cleaned up so we avoid hogging','line_number':65,'multiline':False]['text':' resources for future tests.','line_number':66,'multiline':False]['text':' Look for any trace of state that wasn't cleaned up.','line_number':95,'multiline':False]['text':' The originating aggregation or a sub-aggregation still active.','line_number':99,'multiline':False]['text':' An idle cursor left around.','line_number':101,'multiline':False]