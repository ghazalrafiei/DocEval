['text':'*
 * Performs updates that will change a document's shard key while migrating chunks. Uses both
 * retryable writes and multi-statement transactions.
 *
 * @tags: [
 *  requires_sharding,
 *  assumes_balancer_off,
 *  uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' Number of documents per partition. Note that there is one chunk per partition and one','line_number':23,'multiline':False]['text':' partition per thread.','line_number':24,'multiline':False]['text':' The counter values associated with each owned id. Used to verify updates aren't double','line_number':27,'multiline':False]['text':' applied.','line_number':28,'multiline':False]['text':' Because updates don't have a shard filter stage, a migration may fail if a','line_number':31,'multiline':False]['text':' broadcast update is operating on orphans from a previous migration in the range being','line_number':32,'multiline':False]['text':' migrated back in. The particular error code is replaced with a more generic one, so this is','line_number':33,'multiline':False]['text':' identified by the failed migration's error message.','line_number':34,'multiline':False]['text':' This error can occur when the test updates the shard key value of a document whose','line_number':39,'multiline':False]['text':' chunk has been moved to another shard. Receiving a chunk only waits for documents','line_number':40,'multiline':False]['text':' with shard key values in that range to have been cleaned up by the range deleter.','line_number':41,'multiline':False]['text':' So, if the range deleter has not yet cleaned up that document when the chunk is','line_number':42,'multiline':False]['text':' moved back to the original shard, the moveChunk may fail as a result of a duplicate','line_number':43,'multiline':False]['text':' key error on the recipient.','line_number':44,'multiline':False]['text':' These errors below may arrive due to expected scenarios that occur with concurrent','line_number':51,'multiline':False]['text':' migrations and shard key updates. These include transient transaction errors (targeting','line_number':52,'multiline':False]['text':' issues, lock timeouts, etc) and duplicate key errors that are triggered during normal','line_number':53,'multiline':False]['text':' execution, likely due to orphan documents.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' Current server code does not retry on these errors, but the errors do not represent an','line_number':56,'multiline':False]['text':' unrecoverable state. If an update fails in one of the above-described scenarios, we assert','line_number':57,'multiline':False]['text':' that the document remains in the pre-updated state. After doing so, we may continue the','line_number':58,'multiline':False]['text':' concurrency test.','line_number':59,'multiline':False]['text':' Some return paths will strip out the TransientTransactionError label. We want to still','line_number':80,'multiline':False]['text':' filter out those errors.','line_number':81,'multiline':False]['text':' If we're running in a stepdown suite, then attempting to update the shard key may','line_number':91,'multiline':False]['text':' interact with stepdowns and transactions to cause the following errors. We only expect','line_number':92,'multiline':False]['text':' these errors in stepdown suites and not in other suites, so we surface them to the test','line_number':93,'multiline':False]['text':' runner in other scenarios.','line_number':94,'multiline':False]['text':' Failed in the document shard key path, but not with a duplicate key error','line_number':101,'multiline':False]['text':' If moveAcrossChunks is true, move the randomly generated shardKey to the other','line_number':124,'multiline':False]['text':' half of the partition, which will be on the other chunk owned by this thread.','line_number':125,'multiline':False]['text':' Op style','line_number':148,'multiline':False]['text':' This function uses a different session than the transaction wrapping logic expects.','line_number':210,'multiline':False]['text':' With internal transactions enabled, IncompleteTransactionHistory means the','line_number':245,'multiline':False]['text':' write succeeded, so we can treat this error as success.','line_number':246,'multiline':False]['text':' With the previous implementation, this could also mean the first attempt at','line_number':259,'multiline':False]['text':' handling a WCOS error failed transiently, so we have to detect whether the','line_number':260,'multiline':False]['text':' operation succeeded or failed before continuing.','line_number':261,'multiline':False]['text':' The operation succeeded, so update the in-memory counters.','line_number':265,'multiline':False]['text':' This function uses a different session than the transaction wrapping logic expects.','line_number':291,'multiline':False]['text':' With internal transactions enabled, IncompleteTransactionHistory means the','line_number':325,'multiline':False]['text':' write succeeded, so we can treat this error as success.','line_number':326,'multiline':False]['text':' With the original implementation, this error could mean the write succeeded','line_number':339,'multiline':False]['text':' or failed, so we have to detect the outcome before continuing.','line_number':340,'multiline':False]['text':' The operation succeeded, so update the in-memory counters.','line_number':344,'multiline':False]['text':' Put the write result's code on the thrown exception, if there is one, so it's in','line_number':359,'multiline':False]['text':' the expected format for any higher level error handling logic.','line_number':360,'multiline':False]['text':'*
     * The following states are enumerations of these options:
     * 1. Run a findAndModify or update command.
     * 2. Run under a multi-statement transaction or a retryable write.
     * 3. Target the update to move chunks or remain on the same chunk.
     ','line_number':374,'multiline':True]['text':'*
     * Sets up the base workload, starts a session, and gives each document assigned to this thread
     * a counter value that is tracked in-memory.
     ','line_number':423,'multiline':True]['text':' With the original update shard key implementation, retrying a retryable write that was','line_number':430,'multiline':False]['text':' converted into a distributed transaction will immediately fail with','line_number':431,'multiline':False]['text':' IncompleteTransactionHistory. In suites where that transaction may be interrupted during','line_number':432,'multiline':False]['text':' two phase commit and the test retries on this, the retry may return the error before the','line_number':433,'multiline':False]['text':' transaction has left prepare, so any subsequent non-causally consistent reads may read','line_number':434,'multiline':False]['text':' the preimage of the data in prepare. This test expects to read the documents written to','line_number':435,'multiline':False]['text':' by the update shard key transaction after this error, so use a causally consistent','line_number':436,'multiline':False]['text':' session to guarantee that in these suites.','line_number':437,'multiline':False]['text':'','line_number':438,'multiline':False]['text':' With the new implementation, IncompleteTransactionHistory is only returned after the','line_number':439,'multiline':False]['text':' shard owning the preimage document leaves prepare, and since','line_number':440,'multiline':False]['text':' coordinateCommitReturnImmediatelyAfterPersistingDecision is false in these suites, any','line_number':441,'multiline':False]['text':' subsequent reads should always read the transaction's writes on all shards without causal','line_number':442,'multiline':False]['text':' consistency, so use a non causally consistent session with internal transactions.','line_number':443,'multiline':False]['text':' Assign a default counter value to each document owned by this thread.','line_number':450,'multiline':False]['text':'*
     * Sets up the collection so each thread's partition is a single chunk, with partitionSize
     * documents within it, randomly assigning each document to a thread, ensuring at least one
     * document is given to each one.
     ','line_number':457,'multiline':True]['text':' Find the thread's partition.','line_number':466,'multiline':False]['text':' Create a chunk with boundaries matching the partition's. The low chunk's lower bound','line_number':477,'multiline':False]['text':' is minKey, so a split is not necessary.','line_number':478,'multiline':False]['text':'*
     * Asserts all documents assigned to this thread match their expected values.
     ','line_number':493,'multiline':True]