['text':'*
 * Test the following behavior for a transaction on step down.
 *  1) Active transactional operations (like read and write) are killed and the transaction is
 * aborted, but the connection not closed.
 *  2) Inactive transaction is aborted.
 * @tags: [uses_transactions]
 ','line_number':1,'multiline':True]['text':' Validate that the connection is not closed on step down.','line_number':40,'multiline':False]['text':' Wait until the primary transitioned to SECONDARY state.','line_number':48,'multiline':False]['text':' Start transaction.','line_number':72,'multiline':False]['text':' Call step down & validate data.','line_number':80,'multiline':False]['text':' Wait for transaction shell to join.','line_number':83,'multiline':False]['text':' Disable fail point.','line_number':86,'multiline':False]['text':' Do not start the transaction in parallel shell because when the parallel','line_number':113,'multiline':False]['text':' shell work is done, implicit call to "endSessions" and "abortTransaction"','line_number':114,'multiline':False]['text':' cmds are made. So, during step down we might not have any running','line_number':115,'multiline':False]['text':' Call step down & validate data.','line_number':123,'multiline':False]['text':' Even though the transaction was aborted by the stepdown, we must still update the shell's','line_number':126,'multiline':False]['text':' transaction state to aborted.','line_number':127,'multiline':False]