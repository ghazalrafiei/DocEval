['text':' Regression test to ensure that we don't crash during a getMore if the client's','line_number':1,'multiline':False]['text':' lastKnownCommittedOpTime switches from being ahead of the node's lastCommittedOpTime to behind','line_number':2,'multiline':False]['text':' while a tailable awaitData query is running. See SERVER-35239. This also tests that when the','line_number':3,'multiline':False]['text':' client's lastKnownCommittedOpTime is behind the node's lastCommittedOpTime, getMore returns early','line_number':4,'multiline':False]['text':' with an empty batch.','line_number':5,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':22,'multiline':False]['text':' Create capped collection on primary and allow it to be committed.','line_number':26,'multiline':False]['text':' Stop data replication on 3 secondaries to prevent writes being committed.','line_number':31,'multiline':False]['text':' Write data to primary.','line_number':37,'multiline':False]['text':' Start a parallel shell because we'll be enabling a failpoint that will make the thread hang.','line_number':46,'multiline':False]['text':' Create awaitData cursor and get all data written so that a following getMore will have to','line_number':57,'multiline':False]['text':' wait for more data.','line_number':58,'multiline':False]['text':' Enable failpoint.','line_number':66,'multiline':False]['text':' Call getMore on awaitData cursor with lastKnownCommittedOpTime ahead of node. This will','line_number':73,'multiline':False]['text':' hang until we've disabled the failpoint. Set awaitData timeout "maxTimeMS" to use a large','line_number':74,'multiline':False]['text':' timeout so we can test if the getMore command returns early on a stale','line_number':75,'multiline':False]['text':' lastKnownCommittedOpTime.','line_number':76,'multiline':False]['text':' Test that getMore returns early with an empty batch even though there was a new document','line_number':90,'multiline':False]['text':' inserted.','line_number':91,'multiline':False]['text':' Ensure that we've hit the failpoint before moving on.','line_number':95,'multiline':False]['text':' Restart replication on the other nodes.','line_number':99,'multiline':False]['text':' Do another write to advance the optime so that the test client's lastKnownCommittedOpTime is','line_number':105,'multiline':False]['text':' behind the node's lastCommittedOpTime once all nodes catch up.','line_number':106,'multiline':False]['text':' Wait until all nodes have committed the last op. At this point in executing the getMore,','line_number':110,'multiline':False]['text':' the node's lastCommittedOpTime should now be ahead of the client's lastKnownCommittedOpTime.','line_number':111,'multiline':False]['text':' Disable failpoint.','line_number':115,'multiline':False]