['text':'
 * Basic test of successful replica set rollback for system.views creation.
 *
 * This test sets up a 3 node set, data-bearing nodes A and B and an arbiter.
 *
 * 1. A is elected PRIMARY and inserts into "test1.coll", which is propagated to B.
 * 2. A is isolated from the rest of the set and B is elected PRIMARY.
 * 3. B creates views "test1.x" and "test2.y" (creating test[12].system.views)
 *    and collection "test3.z", which will later be undone during rollback.
 * 4. B is then isolated and A regains its connection to the arbiter.
 * 5. A inserts a document into collection "test1.x", and creates views "test2.y" and "test3.z"
 *     which B will replicate after rollback.
 * 6. B rejoins the set and goes through the rollback/recovery process.
 * 7. The contents of A and B are compared to ensure the rollback results in consistent nodes,
 *    and have the expected collections and views..
 ','line_number':1,'multiline':True]['text':' Run a command, return the result if it worked, or assert with a message otherwise.','line_number':19,'multiline':False]['text':' Like db.getCollectionNames, but allows a filter.','line_number':23,'multiline':False]['text':' Function that checks that all array elements are equal, and returns the unique element.','line_number':28,'multiline':False]['text':' Helper function for verifying database contents at the end of the test.','line_number':32,'multiline':False]['text':' Make sure we have a primary and that that primary is node A.','line_number':57,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':64,'multiline':False]['text':' Initial data for both nodes.','line_number':71,'multiline':False]['text':' Wait for initial replication.','line_number':74,'multiline':False]['text':' Isolate A and wait for B to become primary.','line_number':77,'multiline':False]['text':' Do operations on B and B alone, these will be rolled back.','line_number':82,'multiline':False]['text':' For the collection creation, first create a view with the same name, stressing rollback.','line_number':83,'multiline':False]['text':' Isolate B, bring A back into contact with the arbiter, then wait for A to become primary.','line_number':96,'multiline':False]['text':' Insert new data into A, so that B will need to rollback when it reconnects to A.','line_number':97,'multiline':False]['text':' Ensure that the arbiter recognizes nodeA as primary.','line_number':102,'multiline':False]['text':' A is now primary and will perform writes that must be copied by B after rollback.','line_number':105,'multiline':False]['text':' A is collections: test1.{coll,x}, test2.{coll,system.views}, test3.{coll,system.views}','line_number':115,'multiline':False]['text':'            views: test2.y, test3.z','line_number':116,'multiline':False]['text':' B is collections: test1.{coll,system.views}, test2.{coll,systems}, test3.{z,system.views}','line_number':117,'multiline':False]['text':'            views: test1.x, test2.y','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':' Put B back in contact with A and arbiter. A is primary, so B will rollback and catch up.','line_number':120,'multiline':False]['text':' Await steady state and ensure the two nodes have the same contents.','line_number':126,'multiline':False]['text':' Check both nodes agree with each other and with the expected set of views and collections.','line_number':130,'multiline':False]['text':' Verify data consistency between nodes.','line_number':136,'multiline':False]