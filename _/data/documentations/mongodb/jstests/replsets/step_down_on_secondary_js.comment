['text':'
 * Tests that we don't hit a 3 way deadlock when a step down thread waits for the RSTL in SECONDARY
 * state. This occurs when two stepdowns begin concurrently and both attempt to acquire the RSTL.
 *
 * This test creates a scenario where:
 * 1) Read thread acquires RSTL in MODE_IX and is blocked by a prepared txn (from secondary oplog
 *    application) due to a prepare conflict.
 * 2) Step down enqueues the RSTL in MODE_X and is blocked behind the read thread.
 * 3) Oplog applier is blocked trying to apply a 'commitTransaction' oplog entry. The commit is
 *    attempting to acquire the RSTL lock in MODE_IX but is blocked behind the step down thread.
 *
 * @tags: [uses_transactions, uses_prepare_transaction]
 ','line_number':1,'multiline':True]['text':' 24 hours','line_number':44,'multiline':False]['text':' We must specify the node in getReplSetConfigFromNode, because we do not have a writable primary.','line_number':52,'multiline':False]['text':' Wait until the primary successfully steps down via heartbeat reconfig.','line_number':65,'multiline':False]['text':' Make sure the insert gets replicated to the old primary (current secondary) so that its','line_number':85,'multiline':False]['text':' clusterTime advances before we try to do an afterClusterTime read at the time of the insert.','line_number':86,'multiline':False]['text':' Validate that the read operation got killed during step down.','line_number':121,'multiline':False]