['text':'*
 * Test calling reads with various read concerns on a prepared transaction. Snapshot, linearizable
 * and afterClusterTime reads are the only reads that should block on a prepared transaction. Reads
 * that happen as part of a write should also block on a prepared transaction.
 *
 * Also test that dbHash, which acquires a collection S lock for reads, does not block on
 * a prepared transaction on secondaries. Otherwise, it would cause deadlocks when the prepared
 * transaction reacquires locks (since locks were yielded on secondaries) at commit time. This test
 * makes sure dbHash and mapReduce do not accept a non local read concern or afterClusterTime and so
 * it is safe for the two commands to ignore prepare conflicts for reads. This test also makes sure
 * mapReduce that does writes is not allowed to run on secondaries.
 *
 * Also test that validate, which acquires collection X lock during its execution, does not block on
 * a prepared transaction on secondaries. Otherwise, it would cause deadlocks when the prepared
 * transaction reacquires locks (since locks were yielded on secondaries) at commit time. This test
 * makes sure the validate command does not accept a non local read concern or afterClusterTime and
 * that it is therefore safe to ignore prepare conflicts during its execution.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 *   # TODO (SERVER-80568): Re-enable this test in multiversion suites once it has been fixed.
 *   DISABLED_TEMPORARILY_DUE_TO_FCV_UPGRADE,
 * ]
 ','line_number':1,'multiline':True]['text':' This test completes with a prepared transaction still active, so we cannot enforce an accurate','line_number':29,'multiline':False]['text':' fast count.','line_number':30,'multiline':False]['text':' Snapshot read concern for the dbHash command is only available when enableTestCommands=true.','line_number':32,'multiline':False]['text':' To test correctly client behavior with dbHash, we set enableTestCommands=false. We modify the','line_number':33,'multiline':False]['text':' values of roleGraphInvalidationIsFatal and authenticationDatabase in order for this test to work','line_number':34,'multiline':False]['text':' on inMemory build variants.','line_number':35,'multiline':False]['text':' 1 second.','line_number':50,'multiline':False]['text':' 5 minutes.','line_number':51,'multiline':False]['text':' Turn off timestamp reaping so that clusterTimeBeforePrepare doesn't get too old.','line_number':62,'multiline':False]['text':' dbHash does not accept a non local read concern or afterClusterTime and it also sets','line_number':188,'multiline':False]['text':' ignore_prepare=true during its execution. Therefore, dbHash should never get prepare','line_number':189,'multiline':False]['text':' conflicts on secondaries. dbHash acquires collection S lock for reads and it will be','line_number':190,'multiline':False]['text':' blocked by a prepared transaction that writes to the same collection if it is run on','line_number':191,'multiline':False]['text':' primaries.','line_number':192,'multiline':False]['text':' mapReduce does not accept a non local read concern or afterClusterTime and it also sets','line_number':215,'multiline':False]['text':' ignore_prepare=true during its read phase. As mapReduce that writes is not allowed to run','line_number':216,'multiline':False]['text':' on secondaries, mapReduce should never get prepare conflicts on secondaries. mapReduce','line_number':217,'multiline':False]['text':' acquires collection S lock for reads and it will be blocked by a prepared transaction','line_number':218,'multiline':False]['text':' that writes to the same collection if it is run on primaries.','line_number':219,'multiline':False]['text':' validate does not accept a non local read concern or afterClusterTime and it also sets','line_number':241,'multiline':False]['text':' ignore_prepare=true during its execution. Therefore, validate should never get prepare','line_number':242,'multiline':False]['text':' conflicts on secondaries. validate acquires collection X lock during its execution and it','line_number':243,'multiline':False]['text':' will be blocked by a prepared transaction that writes to the same collection if it is run','line_number':244,'multiline':False]['text':' on primaries.','line_number':245,'multiline':False]['text':' Create a second session and start a new transaction to test snapshot reads.','line_number':275,'multiline':False]['text':' This makes future reads in the transaction use a read timestamp after the','line_number':279,'multiline':False]['text':' prepareTimestamp.','line_number':280,'multiline':False]['text':' Turn this failpoint off so that it doesn't impact other tests in the suite.','line_number':335,'multiline':False]