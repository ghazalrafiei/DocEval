['text':'*
 * Tests that single voting primaries can commit majority writes when they storage-commit out of
 * order. This test first inserts a document to set the last applied optime, all_durable
 * timestamp, and stable timestamp. It then spawns 'n' threads and holds them behind a barrier. Once
 * the threads are all waiting at the barrier, the threads all do a w:majority insert. We turn on a
 * fail point that will block the first thread to receive an optime from the optime generator for a
 * few seconds while the other threads get later optimes and commit their inserts.  The hung thread
 * is released after a few seconds and asserts that its write concern can be satisfied.
 ','line_number':1,'multiline':True]['text':'*
 * Waits for the provided latch to reach 0 and then does a single w:majority insert.
 ','line_number':21,'multiline':True]['text':' do nothing','line_number':28,'multiline':False]['text':' Turn on a fail point to force the first thread to receive an optime from the optime','line_number':41,'multiline':False]['text':' generator to wait a few seconds before storage-committing the insert.','line_number':42,'multiline':False]['text':' Start a bunch of threads. They will block waiting on the latch to hit 0.','line_number':49,'multiline':False]['text':' Release the threads with the latch once they are all blocked on it.','line_number':57,'multiline':False]['text':' Wait for all threads to complete and ensure they succeeded.','line_number':64,'multiline':False]