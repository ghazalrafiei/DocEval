['text':'*
 * Test that we can successfully reconstruct a prepared transaction that was prepared before the
 * stable timestamp at the end of startup recovery.
 *
 * @tags: [requires_persistence, uses_transactions, uses_prepare_transaction]
 ','line_number':1,'multiline':True]['text':' Start a session on the primary.','line_number':23,'multiline':False]['text':' Prepare the transaction on the session.','line_number':29,'multiline':False]['text':' We are creating a record size of 14MB for _id '0', just to make sure when this','line_number':31,'multiline':False]['text':' test runs with lesser wiredTiger cache size, there would be a higher possibility','line_number':32,'multiline':False]['text':' of this record being considered for eviction from in-memory tree. And, to confirm','line_number':33,'multiline':False]['text':' that we don't see problems like in SERVER-40422.','line_number':34,'multiline':False]['text':' Fastcount reflects the insert of a prepared transaction.','line_number':40,'multiline':False]['text':' Doing a majority write after preparing the transaction ensures that the stable timestamp is','line_number':44,'multiline':False]['text':' past the prepare timestamp because this write must be in the committed snapshot.','line_number':45,'multiline':False]['text':' Fastcount reflects the insert of a prepared transaction.','line_number':49,'multiline':False]['text':' Check that we have one transaction in the transactions table.','line_number':52,'multiline':False]['text':' Perform a clean shutdown and restart. And, the data restored at the storage recovery','line_number':56,'multiline':False]['text':' timestamp should not reflect the prepared transaction.','line_number':57,'multiline':False]['text':' Since the oldest timestamp is same as the stable timestamp during node's restart, this test','line_number':59,'multiline':False]['text':' will reconstruct a prepared transaction older than oldest timestamp during startup recovery.','line_number':60,'multiline':False]['text':' Make sure we cannot see the writes from the prepared transaction yet.','line_number':67,'multiline':False]['text':' Make sure there is still one transaction in the transactions table. This is because the','line_number':71,'multiline':False]['text':' entry in the transactions table is made durable when a transaction is prepared.','line_number':72,'multiline':False]['text':' Make sure we can successfully commit the recovered prepared transaction.','line_number':75,'multiline':False]['text':' The transaction on this session should have a txnNumber of 0. We explicitly set this','line_number':78,'multiline':False]['text':' since createSessionWithGivenId does not restore the current txnNumber in the shell.','line_number':79,'multiline':False]['text':' Make sure we cannot add any operations to a prepared transaction.','line_number':83,'multiline':False]['text':' Make sure that writing to a document that was updated in the prepared transaction causes','line_number':92,'multiline':False]['text':' a write conflict.','line_number':93,'multiline':False]['text':' Make sure we can see the effects of the prepared transaction.','line_number':107,'multiline':False]