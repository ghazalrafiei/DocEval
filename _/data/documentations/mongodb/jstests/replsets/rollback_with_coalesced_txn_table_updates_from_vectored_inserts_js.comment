['text':'*
 * Tests that the rollback procedure will update the 'config.transactions' table to be consistent
 * with the node data at the 'stableTimestamp', specifically in the case where multiple derived ops
 * to the 'config.transactions' table were coalesced into a single operation when performing
 * vectored inserts on the primary.
 *
 * @tags: [requires_persistence]
 ','line_number':1,'multiline':True]['text':' Set the syncdelay to 1s to speed up checkpointing.','line_number':14,'multiline':False]['text':' Set the bgSyncOplogFetcherBatchSize to 1 oplog entry to guarantee replication progress','line_number':16,'multiline':False]['text':' with the stopReplProducerOnDocument failpoint.','line_number':17,'multiline':False]['text':' Force secondaries to sync from the primary to guarantee replication progress with the','line_number':21,'multiline':False]['text':' stopReplProducerOnDocument failpoint. Also disable primary catchup because some replicated','line_number':22,'multiline':False]['text':' retryable write statements are intentionally not being made majority committed.','line_number':23,'multiline':False]['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':32,'multiline':False]['text':' Disable replication partway into the retryable write on all of the secondaries. The idea is that','line_number':39,'multiline':False]['text':' while the primary will apply all of the writes in a single storage transaction, the secondaries','line_number':40,'multiline':False]['text':' will only apply up to insertBatchMajorityCommitted oplog entries.','line_number':41,'multiline':False]['text':' Wait for the primary to have advanced its stable_timestamp.','line_number':60,'multiline':False]['text':' Make sure 'secondary1' has a 'lastApplied' optime equal to 'stmtMajorityCommitted.ts'.','line_number':75,'multiline':False]['text':' Otherwise, it can fail to win the election later.','line_number':76,'multiline':False]['text':' Step up one of the secondaries and do a write which becomes majority committed to force the','line_number':85,'multiline':False]['text':' current primary to go into rollback.','line_number':86,'multiline':False]['text':' Wait for secondary1 to be a writable primary.','line_number':91,'multiline':False]['text':' Do a write which becomes majority committed and wait for the old primary to have completed its','line_number':93,'multiline':False]['text':' rollback.','line_number':94,'multiline':False]['text':' Reconnect to the primary after it completes its rollback and step it up to be the primary again.','line_number':101,'multiline':False]['text':' Make sure we don't re-execute operations that have already been inserted by making sure we','line_number':109,'multiline':False]['text':' we don't get a 'DuplicateKeyError'.','line_number':110,'multiline':False]