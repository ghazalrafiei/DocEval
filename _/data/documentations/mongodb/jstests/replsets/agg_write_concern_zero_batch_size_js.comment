['text':' Tests that an aggregate sent with batchSize: 0 will still obey the write concern sent on the','line_number':1,'multiline':False]['text':' original request, even though the writes happen in the getMore.','line_number':2,'multiline':False]['text':' Start a replica set with two nodes: one with the default configuration and one with priority','line_number':6,'multiline':False]['text':' zero to ensure we don't have any elections.','line_number':7,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':12,'multiline':False]['text':' This test will cause commands to fail with writeConcern timeout. This normally triggers the','line_number':21,'multiline':False]['text':' hang analyzer, but we do not want to run it on expected timeouts. Thus we temporarily disable','line_number':22,'multiline':False]['text':' it.','line_number':23,'multiline':False]['text':' Start an aggregate cursor with a writing stage, but use batchSize: 0 to prevent any','line_number':30,'multiline':False]['text':' writes from happening in this command.','line_number':31,'multiline':False]['text':' Test the same thing but using the shell helpers.','line_number':46,'multiline':False]['text':' Unfortunately this is the best way we have to check that the cause of the failure was due','line_number':52,'multiline':False]['text':' to write concern. The aggregate shell helper will assert the command worked. When this','line_number':53,'multiline':False]['text':' fails (as we expect due to write concern) it will create a new error object which loses','line_number':54,'multiline':False]['text':' all structure and just preserves the information as text.','line_number':55,'multiline':False]['text':' Now test without batchSize just to be sure.','line_number':59,'multiline':False]