['text':'*
 * Test basic read committed functionality, including:
 *  - Writes with writeConcern 'majority' should be visible once the write completes.
 *  - With the only data-bearing secondary down, committed reads should not include newly inserted
 *    data.
 *  - When data-bearing node comes back up and catches up, writes should be readable.
 *
 * @tags: [requires_majority_read_concern]
 ','line_number':1,'multiline':True]['text':' Each test case includes a 'prepareCollection' method that sets up the initial state starting','line_number':17,'multiline':False]['text':' with an empty collection, a 'write' method that does some write, and two arrays,','line_number':18,'multiline':False]['text':' 'expectedBefore' and 'expectedAfter' that describe the expected contents of the collection','line_number':19,'multiline':False]['text':' before and after the write. The 'prepareCollection' and 'write' methods should leave the','line_number':20,'multiline':False]['text':' collection either empty or with a single document with _id: 1.','line_number':21,'multiline':False]['text':' No-op','line_number':24,'multiline':False]['text':' Set up a set and grab things for later.','line_number':53,'multiline':False]['text':' Get connections and collection.','line_number':71,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':77,'multiline':False]['text':' Do some sanity checks.','line_number':124,'multiline':False]['text':' Writes done with majority write concern must be immediately visible to both dirty and','line_number':129,'multiline':False]['text':' committed reads.','line_number':130,'multiline':False]['text':' Return to the initial state, then stop the secondary from applying new writes to prevent','line_number':136,'multiline':False]['text':' them from becoming committed.','line_number':137,'multiline':False]['text':' Writes done without majority write concern must be immediately visible to dirty read','line_number':142,'multiline':False]['text':' and hidden from committed reads until they have been replicated. The rules for seeing','line_number':143,'multiline':False]['text':' an oplog entry for a write are the same as for the write itself.','line_number':144,'multiline':False]['text':' Try the committed read again after sleeping to ensure it doesn't only work for','line_number':151,'multiline':False]['text':' queries immediately after the write.','line_number':152,'multiline':False]['text':' Restart oplog application on the secondary and ensure the committed view is updated.','line_number':157,'multiline':False]['text':' The secondary will be able to make the write committed soon after the primary, but there','line_number':164,'multiline':False]['text':' is no way to block until it does.','line_number':165,'multiline':False]['text':' generate useful error messages on failures.','line_number':171,'multiline':False]