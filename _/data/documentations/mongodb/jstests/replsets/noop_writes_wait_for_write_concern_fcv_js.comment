['text':'*
 * Tests that a no-op setFeatureCompatibilityVersion request still waits for write concern.
 *
 * This tests behavior on both latest and last-lts FCVs.
 * @tags: [multiversion_incompatible]
 ','line_number':1,'multiline':True]['text':' Start a two node replica set and set its FCV to the given version, then take down one','line_number':10,'multiline':False]['text':' node so majority write concern can no longer be satisfied and verify that a noop setFCV','line_number':11,'multiline':False]['text':' request times out waiting for majority write concern.','line_number':12,'multiline':False]['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':24,'multiline':False]['text':' Set the FCV to the given target version, to ensure calling setFCV below is a no-op.','line_number':28,'multiline':False]['text':' Stop one node to force commands with "majority" write concern to time out. First increase','line_number':32,'multiline':False]['text':' the election timeout to prevent the primary from stepping down before the test is over.','line_number':33,'multiline':False]['text':' Insert a document to ensure there is a last optime.','line_number':43,'multiline':False]['text':' We run the command on a different connection. If the the command were run on the same','line_number':46,'multiline':False]['text':' connection, then the client last op for the noop write would be the last op of the','line_number':47,'multiline':False]['text':' previous setFCV call. By using a fresh connection the client last op begins as null. This','line_number':48,'multiline':False]['text':' test explicitly tests that write concern for noop writes works when the client last op','line_number':49,'multiline':False]['text':' has not already been set by a duplicate operation.','line_number':50,'multiline':False]['text':' Use w:1 to verify setFCV internally waits for at least write concern majority, and use a','line_number':53,'multiline':False]['text':' small wtimeout to verify it is propagated into the internal waitForWriteConcern and will','line_number':54,'multiline':False]['text':' allow the command to timeout.','line_number':55,'multiline':False]['text':' Verify the command receives a write concern error. If we don't wait for write concern','line_number':63,'multiline':False]['text':' on noop writes then we won't get a write concern error.','line_number':64,'multiline':False]