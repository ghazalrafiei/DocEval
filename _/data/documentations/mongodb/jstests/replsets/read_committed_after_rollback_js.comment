['text':'*
 * Test read committed functionality following a following a rollback. Currently we require that all
 * snapshots be dropped during rollback, therefore committed reads will block until a new committed
 * snapshot is available.
 *
 * @tags: [requires_majority_read_concern, requires_fcv_53]
 ','line_number':1,'multiline':True]['text':' Set up a set and grab things for later.','line_number':23,'multiline':False]['text':' Note: using two arbiters to ensure that a host that can't talk to any other','line_number':36,'multiline':False]['text':' data-bearing node can still be elected. This also means that a write isn't considered','line_number':37,'multiline':False]['text':' committed until it is on all 3 data-bearing nodes, not just 2.','line_number':38,'multiline':False]['text':' Get connections.','line_number':46,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':50,'multiline':False]['text':' This is the collection that all of the tests will use.','line_number':54,'multiline':False]['text':' Set up initial state.','line_number':59,'multiline':False]['text':' Note that we can't necessarily do a committed read from newPrimaryColl and get 'old', since','line_number':65,'multiline':False]['text':' delivery of the commit level to secondaries isn't synchronized with anything','line_number':66,'multiline':False]['text':' (we would have to hammer to reliably prove that it eventually would work).','line_number':67,'multiline':False]['text':' Partition the world such that oldPrimary is still primary but can't replicate to anyone.','line_number':69,'multiline':False]['text':' newPrimary is disconnected from the arbiters first to ensure that it can't be elected.','line_number':70,'multiline':False]['text':' This write will only make it to oldPrimary and will never become committed.','line_number':75,'multiline':False]['text':' Change the partitioning so that oldPrimary is isolated, and newPrimary can be elected.','line_number':80,'multiline':False]['text':' ignore disconnect errors.','line_number':89,'multiline':False]['text':' Stop oplog fetcher on pureSecondary to ensure that writes to newPrimary won't become committed','line_number':93,'multiline':False]['text':' yet. As there isn't anything in the oplog buffer at this time, it is safe to pause the oplog','line_number':94,'multiline':False]['text':' fetcher.','line_number':95,'multiline':False]['text':' Note that we still can't do a committed read from the new primary and reliably get anything,','line_number':99,'multiline':False]['text':' since we never proved that it learned about the commit level from the old primary before','line_number':100,'multiline':False]['text':' the new primary got elected.  The new primary cannot advance the commit level until it','line_number':101,'multiline':False]['text':' commits a write in its own term.  This includes learning that a majority of nodes have','line_number':102,'multiline':False]['text':' received such a write.','line_number':103,'multiline':False]['text':' Reconnect oldPrimary to newPrimary, inducing rollback of the 'INVALID' write. This causes','line_number':106,'multiline':False]['text':' oldPrimary to clear its read majority point. oldPrimary still won't be connected to enough','line_number':107,'multiline':False]['text':' hosts to allow it to be elected, so newPrimary should stay primary for the rest of this test.','line_number':108,'multiline':False]['text':' ignore disconnect errors.','line_number':114,'multiline':False]['text':' Resume oplog fetcher on pureSecondary to allow the 'new' write to be committed. It should','line_number':119,'multiline':False]['text':' now be visible as a committed read to both oldPrimary and newPrimary.','line_number':120,'multiline':False]['text':' Do a write to the new primary so that the old primary can establish a sync source to learn','line_number':122,'multiline':False]['text':' about the new commit.','line_number':123,'multiline':False]['text':' Do another write to the new primary so that the old primary can be sure to receive the','line_number':127,'multiline':False]['text':' new committed optime.','line_number':128,'multiline':False]['text':' Verify data consistency between nodes.','line_number':133,'multiline':False]