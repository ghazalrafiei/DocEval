['text':'*
 * 1. Test that rollback can successfully recover an aborted prepared transaction that was
 * rolled-back but was in prepare between the stable timestamp and the common point.
 * 2. Test that rollback can successfully recover a committed prepared transaction that was
 * rolled-back but was in prepare before the stable timestamp.
 *
 * This test holds back the stable timestamp and starts two prepared transactions
 * before transitioning to rollback operations, where the branches of history on
 * the rollback node and sync source will diverge. This ensures that we prepare
 * the transactions in between the stable timestamp and the common point.
 *
 * After a rollback of commit/abort, we should correctly reconstruct the two prepared transactions
 * and be able to commit/abort them again.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' Create collection we're using beforehand.','line_number':29,'multiline':False]['text':' Start two different sessions on the primary.','line_number':35,'multiline':False]['text':' Save both session IDs so we can later start sessions with the same IDs and commit or','line_number':39,'multiline':False]['text':' abort a prepared transaction on them.','line_number':40,'multiline':False]['text':' Prepare a transaction on the first session whose commit will be rolled-back.','line_number':55,'multiline':False]['text':' Prevent the stable timestamp from moving beyond the following prepared transactions so','line_number':61,'multiline':False]['text':' that when we replay the oplog from the stable timestamp, we correctly recover them.','line_number':62,'multiline':False]['text':' The following transactions will be prepared before the common point, so they must be in','line_number':66,'multiline':False]['text':' prepare after rollback recovery.','line_number':67,'multiline':False]['text':' Prepare another transaction on the second session whose abort will be rolled-back.','line_number':69,'multiline':False]['text':' Check that we have two transactions in the transactions table.','line_number':75,'multiline':False]['text':' This characterizes the current behavior of fastcount, which is that the two open transaction','line_number':78,'multiline':False]['text':' count toward the value.','line_number':79,'multiline':False]['text':' The following commit and abort will be rolled back.','line_number':82,'multiline':False]['text':' The fastcount should be accurate because there are no open transactions.','line_number':87,'multiline':False]['text':' Make sure there are two transactions in the transactions table after rollback recovery.','line_number':99,'multiline':False]['text':' Make sure we can only see the first write and cannot see the writes from the prepared','line_number':102,'multiline':False]['text':' transactions or the write that was rolled back.','line_number':103,'multiline':False]['text':' This check characterizes the current behavior of fastcount after rollback. It will not be','line_number':107,'multiline':False]['text':' correct, but reflects the count at the point where both transactions are not yet committed or','line_number':108,'multiline':False]['text':' aborted (because the operations were not majority committed). The count will eventually be','line_number':109,'multiline':False]['text':' correct once the commit and abort are retried.','line_number':110,'multiline':False]['text':' Get the correct primary after the topology changes.','line_number':114,'multiline':False]['text':' Make sure we can successfully commit the first rolled back prepared transaction.','line_number':118,'multiline':False]['text':' The next transaction on this session should have a txnNumber of 0. We explicitly set this','line_number':121,'multiline':False]['text':' since createSessionWithGivenId does not restore the current txnNumber in the shell.','line_number':122,'multiline':False]['text':' Make sure we cannot add any operations to a prepared transaction.','line_number':126,'multiline':False]['text':' Make sure that writing to a document that was updated in the first prepared transaction','line_number':135,'multiline':False]['text':' causes a write conflict.','line_number':136,'multiline':False]['text':' Retry the commitTransaction command after rollback.','line_number':149,'multiline':False]['text':' Make sure we can successfully abort the second recovered prepared transaction.','line_number':157,'multiline':False]['text':' The next transaction on this session should have a txnNumber of 0. We explicitly set this','line_number':160,'multiline':False]['text':' since createSessionWithGivenId does not restore the current txnNumber in the shell.','line_number':161,'multiline':False]['text':' Make sure we cannot add any operations to a prepared transaction.','line_number':165,'multiline':False]['text':' Make sure that writing to a document that was updated in the second prepared transaction','line_number':174,'multiline':False]['text':' causes a write conflict.','line_number':175,'multiline':False]['text':' Make sure we can see the result of the committed prepared transaction and cannot see the','line_number':189,'multiline':False]['text':' write from the aborted transaction.','line_number':190,'multiline':False]