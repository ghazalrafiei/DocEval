['text':'*
 * Test oplog visibility enforcement of primaries and secondaries. This test uses a client to read
 * the oplog while there are concurrent writers. The client copies all the timestamps it sees and
 * verifies a later scan over the range returns the same values.
 ','line_number':1,'multiline':True]['text':' Cap the amount of data being inserted to avoid rolling over a 10MiB oplog. It takes','line_number':31,'multiline':False]['text':' ~70,000 "basic" ~150 byte oplog documents to fill a 10MiB oplog. Note this number is','line_number':32,'multiline':False]['text':' for each of two writer threads.','line_number':33,'multiline':False]['text':' Query with $gte to validate continuinity. Do not add this first record to the','line_number':56,'multiline':False]['text':' recorded timestamps. Its value was already added in the last cursor.','line_number':57,'multiline':False]['text':' While this method wants to capture 1000 timestamps, the cursor has a batch size','line_number':66,'multiline':False]['text':' of 100 and this loop makes 200 iterations before getting a new cursor from a','line_number':67,'multiline':False]['text':' fresh query. The goal is to exercise getMores, which use different code paths','line_number':68,'multiline':False]['text':' for establishing their oplog reader transactions.','line_number':69,'multiline':False]