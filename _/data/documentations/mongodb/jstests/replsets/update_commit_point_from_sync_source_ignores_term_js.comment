['text':'*
 * Tests that even if the sync source's lastOpCommitted is in a higher term than the node's
 * lastApplied, the node can update its own lastOpCommitted to its lastApplied.
 * @tags: [requires_majority_read_concern]
 ','line_number':1,'multiline':True]['text':' Set up a ReplSetTest where nodes only sync one oplog entry at a time.','line_number':11,'multiline':False]['text':' Ban chaining and prevent elections.','line_number':19,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':26,'multiline':False]['text':' Ensure Node E has a majority committed snapshot.','line_number':38,'multiline':False]['text':' Ensure Node B is caught up, so that it can become primary.','line_number':54,'multiline':False]['text':' Node E might sync from Node A or Node B. Ensure they both have the new commit point.','line_number':61,'multiline':False]['text':' The stopReplProducerOnDocument failpoint ensures that Node E stops replicating before','line_number':65,'multiline':False]['text':' applying the document {msg: "new primary"}, which is the first document of term 2. This','line_number':66,'multiline':False]['text':' depends on the oplog fetcher batch size being 1.','line_number':67,'multiline':False]['text':' It does not yet know that {_id: "term 1, doc 2"} is committed. Its last batch was {_id: "term','line_number':80,'multiline':False]['text':' 1, doc 2"}. The sync source's lastOpCommitted was in term 2, so Node E updated its','line_number':81,'multiline':False]['text':' lastOpCommitted to its lastApplied, which did not yet include {_id: "term 1, doc 2"}.','line_number':82,'multiline':False]