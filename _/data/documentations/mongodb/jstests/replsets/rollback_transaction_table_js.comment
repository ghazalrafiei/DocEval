['text':'*
 * Test that the transaction collection can be rolled back properly, as long as the UUID of the
 * collection has not changed between the sync source and the primary.
 *
 * 1. Initiate a 3-node replica set, with two data bearing nodes.
 * 2. Run a transaction on the primary and await replication.
 * 3. Partition the primary.
 * 4. On the partitioned primary:
 *  - Run a transaction with a higher txnNumber for the first session id.
 *  - Run a new transaction for a second session id.
 * 5. On the newly-stepped up primary:
 *  - Run a new transaction for a third session id.
 * 5. Heal the partition.
 * 6. Verify the partitioned primary's transaction collection properly rolled back:
 *  - The txnNumber for the first session id is the original value.
 *  - There is no record for the second session id.
 *  - A record for the third session id was created during oplog replay.
 ','line_number':1,'multiline':True]['text':' This test drops a collection in the config database, which is not allowed under a session. It','line_number':19,'multiline':False]['text':' also manually simulates a session, which is not compatible with implicit sessions.','line_number':20,'multiline':False]['text':' Primary flops between nodes 0 and 1.','line_number':52,'multiline':False]['text':' Arbiter to sway elections.','line_number':55,'multiline':False]['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':63,'multiline':False]['text':' Renaming or dropping the transactions collection shouldn't crash if command is not rolled','line_number':74,'multiline':False]['text':' back.','line_number':75,'multiline':False]['text':' Both data bearing nodes should have the same record for the first session id.','line_number':103,'multiline':False]['text':' Now the data bearing nodes should have different transaction table records for the first','line_number':128,'multiline':False]['text':' session id.','line_number':129,'multiline':False]['text':' Only the downstream node should have two transaction table records, one for the first and','line_number':148,'multiline':False]['text':' second session ids.','line_number':149,'multiline':False]['text':' We do not disconnect the downstream node from the arbiter node at the same time as we','line_number':157,'multiline':False]['text':' disconnect it from the upstream node. This prevents a race where the transaction using the','line_number':158,'multiline':False]['text':' second session id must finish before the downstream node steps down from being the primary.','line_number':159,'multiline':False]['text':' Now the upstream node also has two transaction table records, but for the first and third','line_number':182,'multiline':False]['text':' session ids, not the first and second.','line_number':183,'multiline':False]['text':' Gets the rollback ID of the downstream node before rollback occurs.','line_number':192,'multiline':False]['text':' Ensure that connection to the downstream node is re-established, since the connection should','line_number':203,'multiline':False]['text':' have gotten killed during the downstream node's transition to ROLLBACK state.','line_number':204,'multiline':False]['text':' Verify the record for the first lsid rolled back to its original value, the record for the','line_number':211,'multiline':False]['text':' second lsid was removed, and the record for the third lsid was created during oplog replay.','line_number':212,'multiline':False]['text':' Confirm the nodes are consistent.','line_number':229,'multiline':False]