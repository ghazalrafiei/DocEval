['text':'*
 * Test to check that the Initial Sync Test Fixture properly pauses initial sync.
 *
 * The test checks that both the collection cloning and oplog application stages of initial sync
 * pause after exactly one command is run when the test fixture's step function is called. The test
 * issues the same listDatabases and listCollections commands that collection cloning does so we
 * know all the commands that will be run on the sync source and can verify that only one is run per
 * call to step(). Similarly for oplog application, we can check the log messages to make sure that
 * the batches being applied are of the expected size and that only one batch was applied per step()
 * call.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':'*
 * Helper function to check that specific messages appeared or did not appear in the logs.
 ','line_number':21,'multiline':True]['text':'*
 * Helper function to check that specific messages appeared or did not appear in the logs. If we
 * expect the log message to appear, this will show that the node is paused after getting the
 * specified timestamp.
 ','line_number':34,'multiline':True]['text':'*
 * Helper function to check that specific messages appeared or did not appear in the logs. If
 * the command was listIndexes and we expect the message to appear, we also add the collection
 * UUID to make sure that it corresponds to the expected collection.
 ','line_number':45,'multiline':True]['text':'*
 * Helper function to check that the specific message appeared exactly once in the logs and that
 * there is no other message saying that the next batch is about to be applied. This will show
 * that oplog application is paused.
 ','line_number':62,'multiline':True]['text':' Set up Initial Sync Test.','line_number':75,'multiline':False]['text':' Each PrimaryOnlyService rebuilds its instances on stepup, and that may involve','line_number':80,'multiline':False]['text':' doing writes. So we need to disable PrimaryOnlyService rebuild to make the number','line_number':81,'multiline':False]['text':' of oplog batches check below work reliably.','line_number':82,'multiline':False]['text':' If the test fails, the initial syncing node may be left with an engaged failpoint that','line_number':95,'multiline':False]['text':' instructs it to hang. This `try` block is to guarantee we call `initialSyncTest.fail()` which','line_number':96,'multiline':False]['text':' allows the test to gracefully exit with an error.','line_number':97,'multiline':False]['text':' If we can fit exactly 9+1=10 large strings in a batch, the small overhead for each oplog','line_number':103,'multiline':False]['text':' entry means we expect only 9 oplog entries per batch.','line_number':104,'multiline':False]['text':' Prepare a transaction so that we know that step() can restart the secondary even if there is','line_number':111,'multiline':False]['text':' a prepared transaction. The prepareTimestamp will be used as the beginFetchingTimestamp and','line_number':112,'multiline':False]['text':' beginApplyingTimestamp during initial sync.','line_number':113,'multiline':False]['text':' This step call restarts the secondary and causes it to go into initial sync. It will pause','line_number':121,'multiline':False]['text':' initial sync after the node has fetched the defaultBeginFetchingTimestamp.','line_number':122,'multiline':False]['text':' Make sure that we cannot read from this node yet.','line_number':128,'multiline':False]['text':' Make sure that we see that the node got the defaultBeginFetchingTimestamp, but hasn't gotten','line_number':132,'multiline':False]['text':' the beginFetchingTimestamp yet.','line_number':133,'multiline':False]['text':' This step call will resume initial sync and pause it again after the node gets the','line_number':138,'multiline':False]['text':' beginFetchingTimestamp from its sync source.','line_number':139,'multiline':False]['text':' Make sure that we cannot read from this node yet.','line_number':142,'multiline':False]['text':' Make sure that we see that the node got the beginFetchingTimestamp, but hasn't gotten the','line_number':146,'multiline':False]['text':' beginApplyingTimestamp yet.','line_number':147,'multiline':False]['text':' This step call will resume initial sync and pause it again after the node gets the','line_number':152,'multiline':False]['text':' beginApplyingTimestamp from its sync source.','line_number':153,'multiline':False]['text':' Make sure that we cannot read from this node yet.','line_number':156,'multiline':False]['text':' Make sure that we see that the node got the beginApplyingTimestamp, but that we don't see the','line_number':160,'multiline':False]['text':' listDatabases call yet.','line_number':161,'multiline':False]['text':' This step call will resume initial sync and pause it again after the node gets the','line_number':167,'multiline':False]['text':' listDatabases result from its sync source.','line_number':168,'multiline':False]['text':' Make sure that we cannot read from this node yet.','line_number':171,'multiline':False]['text':' Make sure that we saw the listDatabases call in the log messages, but didn't see any','line_number':175,'multiline':False]['text':' listCollections or listIndexes call.','line_number':176,'multiline':False]['text':' Do same listDatabases command as CollectionCloner.','line_number':181,'multiline':False]['text':' Iterate over the databases and collections in the same order that the test fixture would so','line_number':185,'multiline':False]['text':' that we can check the log messages to make sure initial sync is paused as expected.','line_number':186,'multiline':False]['text':' We skip the local db during the collection cloning phase of initial sync.','line_number':190,'multiline':False]['text':' Do same listCollections command as CollectionCloner.','line_number':197,'multiline':False]['text':' Make sure that there is only one batch.','line_number':201,'multiline':False]['text':' For each database, CollectionCloner will first call listCollections.','line_number':206,'multiline':False]['text':' Make sure that we cannot read from this node yet.','line_number':209,'multiline':False]['text':' Make sure that we saw the listCollections call in the log messages, but didn't see a','line_number':213,'multiline':False]['text':' listIndexes call.','line_number':214,'multiline':False]['text':' For each collection, CollectionCloner will call listIndexes.','line_number':222,'multiline':False]['text':' Make sure that we cannot read from this node yet.','line_number':225,'multiline':False]['text':' Make sure that we saw the listIndexes call in the log messages, but didn't','line_number':229,'multiline':False]['text':' see a listCollections call.','line_number':230,'multiline':False]['text':' Perform large operations during collection cloning so that we will need multiple batches','line_number':236,'multiline':False]['text':' during oplog application. For simplicity, guarantee we will create only two batches during','line_number':237,'multiline':False]['text':' the oplog application phase of initial sync.','line_number':238,'multiline':False]['text':' Check that we see the expected number of batches during oplog application.','line_number':246,'multiline':False]['text':' This batch should correspond to the 'prepare' op.','line_number':248,'multiline':False]['text':' Abort transaction so that the data consistency checks in stop() can run.','line_number':258,'multiline':False]['text':' Issue a w:2 write to make sure the secondary has replicated the abortTransaction oplog entry.','line_number':261,'multiline':False]['text':' Confirm that node can be read from and that it has the inserts that were made while the node','line_number':264,'multiline':False]['text':' was in initial sync. We inserted `docsToInsertPerCollectionDuringOplogApplication` + 1','line_number':265,'multiline':False]['text':' additional document prior to the oplog application phase to each of `foo` and `bar`.','line_number':266,'multiline':False]['text':' Do data consistency checks at the end.','line_number':276,'multiline':False]