['text':'*
 * Constructs the following cycle that can lead to stalling a sharded cluster:
 * | Preparer                              | Insert                    | OplogVisibility Ts |
 * |---------------------------------------+---------------------------+--------------------|
 * | BeginTxn                              |                           |                    |
 * | Write A                               |                           |                    |
 * |                                       | BeginTxn                  |                    |
 * |                                       | Preallocates TS(10)       |                  9 |
 * | (side txn commits prepare oplog @ 11) |                           |                    |
 * | Prepare 11                            |                           |                    |
 * |                                       | Write A (PrepareConflict) |                    |
 *
 * In this scenario, the prepared transaction blocks waiting for its prepare oplog entry at
 * timestamp 11 to become majority committed. However, the prepare oplog entry cannot replicate to
 * secondaries until the oplog visibility timestamp advances to 11. The oplog visibility timestamp
 * advancing is blocked on the insert that allocated timestamps 10. The insert cannot make progress
 * because it has hit a prepare conflict. The prepare conflict this test specifically exercises is
 * for duplicate key detection on a non-_id unique index.
 *
 * @tags: [uses_transactions, uses_prepare_transaction]
 ','line_number':1,'multiline':True]['text':' Use a single node replica set for simplicity. Note that an oplog hole on a single node replica','line_number':24,'multiline':False]['text':' will block new writes from becoming majority committed.','line_number':25,'multiline':False]['text':' A secondary unique index requires cursor positioning in WT which can result in hitting a prepare','line_number':42,'multiline':False]['text':' conflict.','line_number':43,'multiline':False]['text':' Start a multi-document transaction that inserts an `a: 2` update.','line_number':46,'multiline':False]['text':' Prepare the `a: 2` update.','line_number':57,'multiline':False]['text':' In another thread, perform an insert that also attempts to touch the `a: 2` update. This insert','line_number':65,'multiline':False]['text':' will block until the above transaction commits or aborts. If the above transaction commits, this','line_number':66,'multiline':False]['text':' insert will fail with a duplicate key. If the above transaction is aborted, this insert will','line_number':67,'multiline':False]['text':' succeed.','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' This insert will open up a hole in the oplog preventing writes from becoming majority','line_number':70,'multiline':False]['text':' committed. In a properly behaving system, we will notice this resource being held while','line_number':71,'multiline':False]['text':' entering a blocking call (prepare conflict resolution) and retry the transaction (which','line_number':72,'multiline':False]['text':' releases the resource that prevents writes from becoming majority committed).','line_number':73,'multiline':False]['text':' Wait for the insert to be in the system before attempting the majority write. Technically, this','line_number':84,'multiline':False]['text':' is insufficient to prove we're properly exercising the code that detects a possible deadlock and','line_number':85,'multiline':False]['text':' releases resources. In these cases, the test succeeds because the (yet to happen) majority write','line_number':86,'multiline':False]['text':' occurs before the above thread creates a hole.','line_number':87,'multiline':False]['text':' If the system is misbehaving, this write will fail to "majority replicate". As noted above, in a','line_number':110,'multiline':False]['text':' single node replica set, an operation must be visible in the oplog before it can be considered','line_number':111,'multiline':False]['text':' majority replicated.','line_number':112,'multiline':False]['text':' We could stop the test here, but by committing the transaction we can also assert that the','line_number':119,'multiline':False]['text':' `triggerPrepareConflictThread` sees a `DuplicateKey` error.','line_number':120,'multiline':False]