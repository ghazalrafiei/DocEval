['text':'
 * This test creates a 3 node replica set. The test first sends
 * a regular linearizable read command which should succeed. Then the test
 * examines linearizable read parsing abilities by sending a linearizable
 * read command to a secondary and then to the primary with an 'afterOpTime'
 * field, both of which should fail. The test then starts to test the actual
 * functionality of linearizable reads by creating a network partition between the primary
 * and the other two nodes and then sending in a linearizable read command.
 * Finally we test whether the linearizable read command will block forever
 * by issuing a linearizable read command in another thread on the still
 * partitioned primary and then making the primary step down in the main
 * thread after finding the issued noop. The secondary thread should throw
 * an exception and exit.
 ','line_number':1,'multiline':True]['text':' The primary will step down and throw an exception, which is expected.','line_number':17,'multiline':False]['text':' 'hello' ensures that the following command fails (and returns a response rather than','line_number':20,'multiline':False]['text':' an exception) before its connection is cut because of the primary step down. Refer to','line_number':21,'multiline':False]['text':' SERVER-24574.','line_number':22,'multiline':False]['text':' Increased election timeout to avoid having the primary step down while we are','line_number':34,'multiline':False]['text':' testing linearizable functionality on an isolated primary.','line_number':35,'multiline':False]['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':46,'multiline':False]['text':' Without a sync source the heartbeat interval will be half of the election timeout, 30','line_number':50,'multiline':False]['text':' seconds. It thus will take almost 30 seconds for the secondaries to set the primary as','line_number':51,'multiline':False]['text':' their sync source and begin replicating.','line_number':52,'multiline':False]['text':' Do a write to have something to read.','line_number':54,'multiline':False]['text':' This command is sent to the primary, and the primary is fully connected so it should work.','line_number':59,'multiline':False]['text':' This fails because you cannot have a linearizable read command sent to a secondary.','line_number':64,'multiline':False]['text':' This fails because you cannot specify 'afterOpTime' for linearizable read.','line_number':71,'multiline':False]['text':' A $out aggregation is not allowed with readConcern level "linearizable".','line_number':80,'multiline':False]['text':' A $merge aggregation is not allowed with readConcern level "linearizable".','line_number':85,'multiline':False]['text':' Get last noop Optime before sending the linearizable read command','line_number':119,'multiline':False]['text':' to ensure that we are waiting for the most recent noop write.','line_number':120,'multiline':False]['text':' Sending a linearizable read implicitly replicates a noop to the secondaries. We need to find','line_number':124,'multiline':False]['text':' the most recently issued noop to ensure that we call stepdown during the recently','line_number':125,'multiline':False]['text':' issued linearizable read and not before the read (in the separate thread) has been called.','line_number':126,'multiline':False]