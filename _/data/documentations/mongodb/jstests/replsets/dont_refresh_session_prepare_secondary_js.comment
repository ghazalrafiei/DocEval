['text':'*
 * Tests session invalidation and checking out a session without refresh on a new secondary.
 *
 * Tests this by:
 * 1. Starting with a primary that is running a transaction. We will hang the primary before it
 *    checks out the session for the transaction.
 * 2. Step up another node and prepare a transaction on the same session used for the transaction on
 *    the old primary. This should cause the old primary to step down, invalidating the relevant
 *    session.
 * 3. When the old primary replicates the prepared transaction, wait so that the update to the
 *    config.transactions table for the prepared transaction happens before the node prepares the
 *    transaction. Even though the session is still invalidated, applying the prepare should check
 *    out the session without refreshing from disk.
 *
 * See SERVER-50486 for more details.
 *
 * @tags: [uses_transactions, uses_prepare_transaction]
 ','line_number':1,'multiline':True]['text':' Start a transaction on the same session as before, but with a higher transaction number.','line_number':58,'multiline':False]['text':' Wait so that the update to the config.transactions table from the newly prepared transaction','line_number':81,'multiline':False]['text':' happens before the user transaction checks out the session. Otherwise, we won't see the','line_number':82,'multiline':False]['text':' transaction state as being "Prepared" when refreshing the session from storage.','line_number':83,'multiline':False]['text':' Wait so that the user transaction checks out the session before the thread applying the','line_number':88,'multiline':False]['text':' prepareTransaction is unpaused. Otherwise, applying the prepareTransaction will make the session','line_number':89,'multiline':False]['text':' valid.','line_number':90,'multiline':False]