['text':'*
 * Tests that an initial sync that starts in the middle of a large transaction on a secondary
 * is able to complete and apply the entire transaction.
 *
 * @tags: [
 *   exclude_from_large_txns,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' We want two entries in each oplog batch, so the beginning of the transaction is not','line_number':16,'multiline':False]['text':' the end of the batch.','line_number':17,'multiline':False]['text':' We have to add and pause the initial sync node here, because we cannot re-initiate the set while','line_number':25,'multiline':False]['text':' the failpoints are held.','line_number':26,'multiline':False]['text':' The stopReplProducerOnDocument failpoint ensures that secondary stops replicating before','line_number':48,'multiline':False]['text':' accepting the last two operations in the transaction.','line_number':49,'multiline':False]['text':' This will cause us to pause batch application at a critical point, with "first in txn" and','line_number':53,'multiline':False]['text':' "next in txn" in the oplog but not applied.','line_number':54,'multiline':False]['text':' The bug we're testing for is a race.  The way we fix the race is to wait until it resolves.','line_number':77,'multiline':False]['text':' So it's very difficult to test it deterministically; if we use failpoints to force the race to','line_number':78,'multiline':False]['text':' happen, we'll just hang when the code is correct.  Instead we hold the sync source in the','line_number':79,'multiline':False]['text':' condition that causes the race until we reach the point it's about to happen, then release','line_number':80,'multiline':False]['text':' it hoping it'll fail most of the time when the bug is present.','line_number':81,'multiline':False]['text':' Make sure we got the transaction.','line_number':89,'multiline':False]