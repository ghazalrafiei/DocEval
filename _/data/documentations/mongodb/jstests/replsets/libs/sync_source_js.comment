['text':'*
 * Contains helper functions for testing sync source selection and evaluation.
 ','line_number':1,'multiline':True]['text':'*
 * Asserts that the node is allowed to sync from 'syncSource'. The node is unable to sync from
 * 'syncSource' if it will create a cycle in the topology.
 ','line_number':7,'multiline':True]['text':' If the node is already one of the sync source's upstream nodes, a cycle will be','line_number':16,'multiline':False]['text':' formed if the node syncs from syncSource. If so, we fail loudly.','line_number':17,'multiline':False]['text':' Set 'currHost' to the next upstream node.','line_number':20,'multiline':False]['text':'*
 * Forces 'node' to sync from 'syncSource' without using the 'replSetSyncFrom' command. The
 * 'forceSyncSourceCandidate' failpoint will be returned. The node will continue to sync from
 * 'syncSource' until the caller disables the failpoint.
 *
 * This function may result in a sync source cycle, even with the 'nodeAllowedToSyncFromSource'
 * check (for example, if the topology changes while the check is running). The caller of this
 * function should be defensive against this case.
 ','line_number':27,'multiline':True]['text':' Stop replication on the node, so that we can advance the optime on the sync source.','line_number':44,'multiline':False]['text':' The node will not replicate this write. This is necessary to ensure that the sync source','line_number':52,'multiline':False]['text':' is ahead of us, so that we can accept it as our sync source.','line_number':53,'multiline':False]['text':' Verify that the sync source is correct.','line_number':60,'multiline':False]['text':'*
 * Asserts that the sync source of the given node will match syncSourceName soon. Additional
 * arguments are passed to the assert.soon.
 ','line_number':67,'multiline':True]['text':'*
 * Sets a delay between every node in 'firstDataCenter' and every node in 'secondDataCenter'.
 ','line_number':85,'multiline':True]