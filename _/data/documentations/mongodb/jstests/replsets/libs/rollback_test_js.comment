['text':'*
 *
 * Wrapper around ReplSetTest for testing rollback behavior. It allows the caller to easily
 * transition between stages of a rollback without having to manually operate on the replset.
 *
 * This library exposes the following 5 sequential stages of rollback:
 * 1. RollbackTest starts in kSteadyStateOps: the replica set is in steady state replication.
 *        Operations applied will be replicated.
 * 2. kRollbackOps: operations applied during this phase will not be replicated and eventually be
 *        rolled back.
 * 3. kSyncSourceOpsBeforeRollback: apply operations on the sync source before rollback begins.
 * 4. kSyncSourceOpsDuringRollback: apply operations on the sync source after rollback has begun.
 * 5. kSteadyStateOps: (same as stage 1) with the option of waiting for the rollback to finish.
 *
 * --------------------------------------------------
 * | STATE TRANSITION            | NETWORK TOPOLOGY |
 * |-------------------------------------------------
 * |  kSteadyStateOps            |       T          |
 * |                             |     /   \        |
 * |                             |    P1 -  S       |
 * |-----------------------------|------------------|
 * |  kRollbackOps               |       T          |
 * |                             |     /            |
 * |                             |    P1    S       |
 * |-----------------------------|------------------|
 * | kSyncSourceOpsBeforeRollback|       T          |
 * |                             |         \        |
 * |                             |    P1    P2      |
 * |-----------------------------|------------------|
 * | kSyncSourceOpsDuringRollback|        T         |
 * |                             |          \       |
 * |                             |     R  -  P2     |
 * |-------------------------------------------------
 * Note: 'T' refers to tiebreaker node, 'S' refers to secondary, 'P[n]' refers to primary in
 * nth term and 'R' refers to rollback node.
 *
 * Please refer to the various `transition*` functions for more information on the behavior
 * of each stage.
 ','line_number':1,'multiline':True]['text':'*
 *
 * This fixture allows the user to optionally pass in a custom ReplSetTest
 * to be used for the test. The underlying replica set must meet the following
 * requirements:
 *      1. It must have exactly three nodes: A primary and two secondaries. One of the secondaries
 *         must be configured with priority: 0 so that it won't be elected primary. Throughout
 *         this file, this secondary will be referred to as the tiebreaker node.
 *      2. It must be running with mongobridge.
 *      3. Must initiate the replset with high election timeout to avoid unplanned elections in the
 *         rollback test.
 *
 * If the caller does not provide their own replica set, a standard three-node
 * replset will be initialized instead, with all nodes running the latest version.
 *
 * After the initial fixture setup, nodes may be added to the fixture using RollbackTest.add(),
 * provided they are non-voting nodes.  These nodes will not be checked for replication state or
 * progress until kSteadyStateOps, or if consistency checks are skipped in kSteadyStateOps, the end
 * of the test.  If voting nodes are added directly to the ReplSetTest, the results are undefined.
 *
 * @param {string} [optional] name the name of the test being run
 * @param {Object} [optional] replSet the ReplSetTest instance to adopt
 * @param {Object} [optional] nodeOptions command-line options to apply to all nodes in the replica
 *     set. Ignored if 'replSet' is provided.
 ','line_number':48,'multiline':True]['text':' Make sure we have a replica set up and running.','line_number':108,'multiline':False]['text':' Return an helper function to set a tenantId on commands if it is required.','line_number':111,'multiline':False]['text':' Majority writes in the initial phase, before transitionToRollbackOperations(), should be','line_number':135,'multiline':False]['text':' replicated to the syncSource node so they aren't lost when syncSource steps up. Ensure that','line_number':136,'multiline':False]['text':' majority writes can be acknowledged only by syncSource, not by tiebreakerNode.','line_number':137,'multiline':False]['text':'*
     * Validate and use the provided replica set.
     *
     * @param {Object} replSet the ReplSetTest instance to adopt
     ','line_number':141,'multiline':True]['text':' Make sure we have a primary.','line_number':154,'multiline':False]['text':' The default WC is majority and we must use w:1 to be able to properly test rollback.','line_number':156,'multiline':False]['text':' Extract the other two nodes and wait for them to be ready.','line_number':161,'multiline':False]['text':' Make sure chaining is disabled, so that the tiebreaker cannot be used as a sync source.','line_number':165,'multiline':False]['text':' Make sure electionTimeoutMillis is set to high value to avoid unplanned elections in','line_number':170,'multiline':False]['text':' the rollback test.','line_number':171,'multiline':False]['text':' Make sure the primary is not a priority: 0 node.','line_number':176,'multiline':False]['text':' Make sure that of the two secondaries, one is a priority: 0 node and the other is not.','line_number':180,'multiline':False]['text':' Make sync source selection faster.','line_number':189,'multiline':False]['text':' Insert a document and replicate it to all 3 nodes so that any of the nodes can sync from','line_number':199,'multiline':False]['text':' any other. If we do not do this, then due to initial sync timing and sync source','line_number':200,'multiline':False]['text':' selection all nodes may not be guaranteed to have overlapping oplogs.','line_number':201,'multiline':False]['text':' To prevent losing this document due to unclean shutdowns, we need to','line_number':203,'multiline':False]['text':' ensure the insert was replicated and written to the on-disk journal of all 3','line_number':204,'multiline':False]['text':' nodes, with the exception of ephemeral and in-memory storage engines where','line_number':205,'multiline':False]['text':' journaling isn't supported.','line_number':206,'multiline':False]['text':'*
     * We set the election timeout to 24 hours to prevent unplanned elections, but this has the
     * side-effect of causing `getMore` in replication to wait up 30 seconds prior to returning.
     *
     * The `setSmallOplogGetMoreMaxTimeMS` failpoint causes the `getMore` calls to block for a
     * maximum of 50 milliseconds.
     ','line_number':215,'multiline':True]['text':'*
     * Return an instance of ReplSetTest initialized with a standard
     * three-node replica set running with the latest version.
     *
     * Note: One of the secondaries will have a priority of 0.
     ','line_number':229,'multiline':True]['text':' Tiebreaker's replication is paused for most of the test, avoid falling off the oplog.','line_number':254,'multiline':False]['text':' Track if we've done consistency checks.','line_number':266,'multiline':False]['text':' This is an instance method primarily so it can be overridden in testing.','line_number':269,'multiline':False]['text':' We must wait for collection drops to complete so that we don't get spurious failures','line_number':275,'multiline':False]['text':' in the consistency checks.','line_number':276,'multiline':False]['text':'*
     * return whether the cluster can transition from the current State to `newState`.
     * @private
     ','line_number':300,'multiline':True]['text':' Transitioning to a disallowed State is likely a bug in the code, so we throw an','line_number':309,'multiline':False]['text':' error here instead of silently failing.','line_number':310,'multiline':False]['text':'*
     * Transition from a rollback state to a steady state. Operations applied in this phase will
     * be replicated to all nodes and should not be rolled back.
     ','line_number':350,'multiline':True]['text':' Ensure rollback completes before reconnecting tiebreaker.','line_number':356,'multiline':False]['text':'','line_number':357,'multiline':False]['text':' 1. Wait for the rollback node to be SECONDARY; this either waits for rollback to finish','line_number':358,'multiline':False]['text':' or exits early if it checks the node before it *enters* ROLLBACK.','line_number':359,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' 2. Test that RBID is properly incremented; note that it could be incremented several','line_number':361,'multiline':False]['text':' times if the node restarts before a given rollback attempt finishes.','line_number':362,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' 3. Check if the rollback node is caught up.','line_number':364,'multiline':False]['text':'','line_number':365,'multiline':False]['text':' If any conditions are unmet, retry.','line_number':366,'multiline':False]['text':'','line_number':367,'multiline':False]['text':' If {enableMajorityReadConcern:false} is set, it will use the rollbackViaRefetch','line_number':368,'multiline':False]['text':' algorithm. That can lead to unrecoverable rollbacks, particularly in unclean shutdown','line_number':369,'multiline':False]['text':' suites, as it is possible in rare cases for the sync source to lose the entry','line_number':370,'multiline':False]['text':' corresponding to the optime the rollback node chose as its minValid.','line_number':371,'multiline':False]['text':' connToCheckForUnrecoverableRollback ','line_number':380,'multiline':True]['text':' important ','line_number':385,'multiline':True]['text':' Re-throw the original exception in all other cases.','line_number':390,'multiline':False]['text':' Allow replication temporarily so the following checks succeed.','line_number':408,'multiline':False]['text':' We call transition to steady state ops after awaiting replication has finished,','line_number':414,'multiline':False]['text':' otherwise it could be confusing to see operations being replicated when we're already','line_number':415,'multiline':False]['text':' in rollback complete state.','line_number':416,'multiline':False]['text':' After the previous rollback (if any) has completed and await replication has finished,','line_number':419,'multiline':False]['text':' the replica set should be in a consistent and "fresh" state. We now prepare for the next','line_number':420,'multiline':False]['text':' rollback.','line_number':421,'multiline':False]['text':' Now that awaitReplication and checkDataConsistency are done, stop replication again so','line_number':428,'multiline':False]['text':' tiebreakerNode is never part of w: majority writes, see comment at top.','line_number':429,'multiline':False]['text':'*
     * Transition to the first stage of rollback testing, where we isolate the current primary so
     * that subsequent operations on it will eventually be rolled back.
     ','line_number':435,'multiline':True]['text':' Ensure previous operations are replicated to the secondary that will be used as the sync','line_number':442,'multiline':False]['text':' source later on. It must be up-to-date to prevent any previous operations from being','line_number':443,'multiline':False]['text':' rolled back.','line_number':444,'multiline':False]['text':' Disconnect the secondary from the tiebreaker node before we disconnect the secondary from','line_number':450,'multiline':False]['text':' the primary to ensure that the secondary will be ineligible to win an election after it','line_number':451,'multiline':False]['text':' loses contact with the primary.','line_number':452,'multiline':False]['text':' Disconnect the current primary, the rollback node, from the secondary so operations on','line_number':457,'multiline':False]['text':' it will eventually be rolled back.','line_number':458,'multiline':False]['text':' We do not disconnect the primary from the tiebreaker node so that it remains primary.','line_number':459,'multiline':False]['text':' We go through this phase every time a rollback occurs.','line_number':463,'multiline':False]['text':'*
     * Transition to the second stage of rollback testing, where we isolate the old primary and
     * elect the old secondary as the new primary. Then, operations can be performed on the new
     * primary so that that optimes diverge and previous operations on the old primary will be
     * rolled back.
     ','line_number':469,'multiline':True]['text':' Insert one document to ensure rollback will not be skipped. This needs to be journaled to','line_number':480,'multiline':False]['text':' ensure that this document is not lost due to unclean shutdowns. Ephemeral and in-memory','line_number':481,'multiline':False]['text':' storage engines are an exception because journaling isn't supported.','line_number':482,'multiline':False]['text':' We should have already disconnected the primary from the secondary during the first stage','line_number':492,'multiline':False]['text':' of rollback testing.','line_number':493,'multiline':False]['text':' The stepdown freeze period is short because the node is disconnected from','line_number':498,'multiline':False]['text':' the rest of the replica set, so it physically can't become the primary.','line_number':499,'multiline':False]['text':' Stepdown may fail if the node has already started stepping down.','line_number':505,'multiline':False]['text':' Send out an immediate round of heartbeats to elect the node more quickly.','line_number':514,'multiline':False]['text':' As a sanity check, ensure the new primary is the old secondary. The opposite scenario','line_number':519,'multiline':False]['text':' should never be possible with 2 electable nodes and the sequence of operations thus far.','line_number':520,'multiline':False]['text':' The old primary is the new secondary; the old secondary just got elected as the new','line_number':524,'multiline':False]['text':' primary, so we update the topology to reflect this change.','line_number':525,'multiline':False]['text':' To ensure rollback won't be skipped for shutdowns, wait till the no-op oplog','line_number':529,'multiline':False]['text':' entry ("new primary") written in the new term gets persisted in the disk.','line_number':530,'multiline':False]['text':' Note: rollbackShutdowns are not allowed for in-memory/ephemeral storage engines.','line_number':531,'multiline':False]['text':' The current primary, which is the old secondary, will later become the sync source.','line_number':542,'multiline':False]['text':'*
     * Transition to the third stage of rollback testing, where we reconnect the rollback node so
     * it will start rolling back.
     *
     * Note that there is no guarantee that operations performed on the sync source while in this
     * state will actually occur *during* the rollback process. They may happen before the rollback
     * is finished or after the rollback is done. We provide this state, though, as an attempt to
     * provide a way to test this behavior, even if it's non-deterministic.
     ','line_number':546,'multiline':True]['text':' Wait for expected states in case the secondary is starting up.','line_number':559,'multiline':False]['text':' signal ','line_number':586,'multiline':True]['text':' forRestart ','line_number':587,'multiline':True]['text':' restart ','line_number':640,'multiline':True]['text':' Fail-point will clear on restart so do post-start.','line_number':642,'multiline':False]['text':' Make sync source selection faster.','line_number':644,'multiline':False]['text':' Step up if the restarted node is the current primary.','line_number':648,'multiline':False]['text':' To prevent below step up from being flaky, we step down and freeze the','line_number':650,'multiline':False]['text':' current secondary to prevent starting a new election. The current secondary','line_number':651,'multiline':False]['text':' can start running election due to explicit step up by the shutting down of current','line_number':652,'multiline':False]['text':' primary if the server parameter "enableElectionHandoff" is set to true.','line_number':653,'multiline':False]['text':' As a sanity check, ensure the new primary is the current primary. This is true,','line_number':657,'multiline':False]['text':' because we have configured the replica set with high electionTimeoutMillis.','line_number':658,'multiline':False]['text':' Unfreeze the current secondary so that it can step up again. Retry on network errors','line_number':661,'multiline':False]['text':' in case the current secondary is in ROLLBACK state.','line_number':662,'multiline':False]['text':'*
     * Waits for the last oplog entry to be visible on all nodes except the tiebreaker, which has
     * replication stopped throughout the test.
     ','line_number':682,'multiline':True]['text':'*
     * Waits until the optime of the specified type reaches the primary's last applied optime.
     * Ignores the tiebreaker node, on which replication is stopped throughout the test.
     * See ReplSetTest for definition of secondaryOpTimeType.
     ','line_number':690,'multiline':True]['text':'*
     * Returns the underlying ReplSetTest in case the user needs to make adjustments to it.
     ','line_number':699,'multiline':True]['text':'*
     * Use this to control the timeout being used in the awaitSecondaryNodesForRollbackTest call
     * in transitionToSteadyStateOperations.
     * For use only in tests that expect unrecoverable rollbacks.
     ','line_number':706,'multiline':True]