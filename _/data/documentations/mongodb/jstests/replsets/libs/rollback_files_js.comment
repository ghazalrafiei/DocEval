['text':'*
 * Verifies that the rollback file for a given database path and namespace exists and contains the
 * 'expectedDocs', in any order. If there are multiple rollback files for the given collection,
 * chooses one of those files arbitrarily to read data from. Note that a rollback file is simply a
 * sequence of concatenated BSON objects, which is a format that can be read by the bsondump tool.
 ','line_number':1,'multiline':True]['text':' Check the path of the rollback directory.','line_number':10,'multiline':False]['text':' We try to handle both possible rollback file layouts here. The first layout, used by the','line_number':14,'multiline':False]['text':' older 'rollbackViaRefetch' algorithm, puts rollback files directly inside the /rollback','line_number':15,'multiline':False]['text':' directory with a naming scheme of '<db>.<collection>.<timestamp>.bson'. The newer layout,','line_number':16,'multiline':False]['text':' used by recover-to-timestamp (RTT) rollback, places them inside a','line_number':17,'multiline':False]['text':' 'rollback/<db>.<collection>' directory with a file naming scheme of','line_number':18,'multiline':False]['text':' 'removed.<timestamp>.bson'. The data formats of the files themselves should be the same in','line_number':19,'multiline':False]['text':' both cases, though. These file layouts are documented here:','line_number':20,'multiline':False]['text':' https://docs.mongodb.com/manual/core/replica-set-rollbacks/#collect-rollback-data.','line_number':21,'multiline':False]['text':' If all the objects in the rollback directory are files, not directories, then this implies','line_number':42,'multiline':False]['text':' the rollback files have been written using the rollbackViaRefetch mechanism. Otherwise, we','line_number':43,'multiline':False]['text':' assume the files are written using the RTT mechanism.','line_number':44,'multiline':False]['text':' If the rollback BSON file is encrypted, don't try to check the data contents. Checking its','line_number':56,'multiline':False]['text':' existence is sufficient.','line_number':57,'multiline':False]['text':' Parse the BSON rollback file and check for the right','line_number':63,'multiline':False]['text':' documents. The documents may be written out in an arbitrary','line_number':64,'multiline':False]['text':' order so we just check the document set.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' Users are expected to consume these files with','line_number':67,'multiline':False]['text':' bsondump. However, we use a shell builtin do do this testing so','line_number':68,'multiline':False]['text':' that we don't have a dependency on the go tools in order to','line_number':69,'multiline':False]['text':' test the server.','line_number':70,'multiline':False]