['text':'*
 * Tests that the rollback procedure will update the 'config.transactions' table to be consistent
 * with the node data at the 'stableTimestamp', specifically in the case where multiple derived ops
 * to the 'config.transactions' table were coalesced into a single operation during secondary oplog
 * application.
 * We also test that if a node crashes after oplog truncation during rollback, the update made to
 * the 'config.transactions' table is persisted on startup.
 *
 * @tags: [requires_persistence]
 ','line_number':1,'multiline':True]['text':' Set the 'syncdelay' to 1s to speed up checkpointing. Also explicitly set the batch','line_number':21,'multiline':False]['text':' size for oplog application to ensure the number of retryable write statements being','line_number':22,'multiline':False]['text':' made majority committed isn't a multiple of it.','line_number':23,'multiline':False]['text':' Set the bgSyncOplogFetcherBatchSize to 1 oplog entry to guarantee replication','line_number':25,'multiline':False]['text':' progress with the stopReplProducerOnDocument failpoint.','line_number':26,'multiline':False]['text':' Force secondaries to sync from the primary to guarantee replication progress with the','line_number':31,'multiline':False]['text':' stopReplProducerOnDocument failpoint. Also disable primary catchup because some','line_number':32,'multiline':False]['text':' replicated retryable write statements are intentionally not being made majority','line_number':33,'multiline':False]['text':' committed.','line_number':34,'multiline':False]['text':' SERVER-65971: Do a write with `lsid` to add an entry to config.transactions. This write will','line_number':45,'multiline':False]['text':' persist after rollback and be updated when the rollback code corrects for omitted writes to','line_number':46,'multiline':False]['text':' the document.','line_number':47,'multiline':False]['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':54,'multiline':False]['text':' Disable replication on all of the secondaries to manually control the replication progress.','line_number':61,'multiline':False]['text':' While replication is still entirely disabled, additionally disable replication partway into','line_number':65,'multiline':False]['text':' the retryable write on all but the first secondary. The idea is that while secondary1 will','line_number':66,'multiline':False]['text':' apply all of the oplog entries in a single batch, the other secondaries will only apply up to','line_number':67,'multiline':False]['text':' counterMajorityCommitted oplog entries.','line_number':68,'multiline':False]['text':' Wait for the secondary to have applied through the counterMajorityCommitted retryable','line_number':89,'multiline':False]['text':' write statement. We do this for each secondary individually, starting with secondary1, to','line_number':90,'multiline':False]['text':' guarantee that secondary1 will advance its stable_timestamp when learning of the other','line_number':91,'multiline':False]['text':' secondaries also having applied through counterMajorityCommitted.','line_number':92,'multiline':False]['text':' Wait for secondary1 to have advanced its stable_timestamp.','line_number':108,'multiline':False]['text':' Step up one of the other secondaries and do a write which becomes majority committed to force','line_number':121,'multiline':False]['text':' secondary1 to go into rollback.','line_number':122,'multiline':False]['text':' Wait for secondary2 to be a writable primary.','line_number':129,'multiline':False]['text':' Do a write which becomes majority committed and wait for secondary1 to complete its rollback.','line_number':132,'multiline':False]['text':' Wait for rollback to finish truncating oplog.','line_number':140,'multiline':False]['text':' Entering rollback will close connections so we expect some network errors while waiting.','line_number':141,'multiline':False]['text':' Crash the node after it performs oplog truncation.','line_number':148,'multiline':False]['text':' On startup, we expect to see the update persisted in the 'config.transactions' table.','line_number':156,'multiline':False]['text':' Lift the failpoint to let rollback complete and wait for state to change to SECONDARY.','line_number':162,'multiline':False]['text':' Reconnect to secondary1 after it completes its rollback and step it up to be the new primary.','line_number':167,'multiline':False]['text':' Test the general scenario where we perform the appropriate update to the 'config.transactions'','line_number':188,'multiline':False]['text':' table during rollback.','line_number':189,'multiline':False]['text':' Extends the test to crash the secondary in the middle of rollback right after oplog truncation.','line_number':191,'multiline':False]['text':' We assert that the update made to the 'config.transactions' table persisted on startup.','line_number':192,'multiline':False]