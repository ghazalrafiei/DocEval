['text':'*
 * Tests metrics in serverStatus related to replication.
 *
 * The test for metrics.repl.network.oplogGetMoresProcessed requires a storage engine that supports
 * document-level locking because it uses the planExecutorHangBeforeShouldWaitForInserts failpoint
 * to block oplog fetching getMores while trying to do oplog writes.
 ','line_number':1,'multiline':True]['text':'*
 * Test replication metrics
 ','line_number':16,'multiline':True]['text':' The first oplog entry may or may not make it into network.ops now that we have two','line_number':26,'multiline':False]['text':' n ops (initiate and new primary) before steady replication starts.','line_number':27,'multiline':False]['text':' Sometimes, we disconnect from our sync source and since our find is a gte query, we may','line_number':28,'multiline':False]['text':' double count an oplog entry, so we need some wiggle room for that.','line_number':29,'multiline':False]['text':' Under a two-node replica set setting, the secondary should not have received or processed any','line_number':39,'multiline':False]['text':' oplog getMore requests from the primary.','line_number':40,'multiline':False]['text':' Metrics are racy, e.g. repl.buffer.count could over- or under-reported briefly. Retry on error.','line_number':62,'multiline':False]['text':' Set a smaller periodicNoopIntervalSecs to aid sync source selection later in the test. Only','line_number':79,'multiline':False]['text':' enable periodic noop writes when we actually need it to avoid races in other metrics tests.','line_number':80,'multiline':False]['text':' Initiate the replica set with high election timeout to avoid accidental elections.','line_number':84,'multiline':False]['text':' The default WC is majority and stopServerReplication will prevent satisfying any majority writes.','line_number':93,'multiline':False]['text':' Record the base oplogGetMoresProcessed on primary and the base oplog getmores on secondary.','line_number':97,'multiline':False]['text':' The number of ops received  and the number of ops applied are not guaranteed to be the same','line_number':107,'multiline':False]['text':' during initial sync oplog application as we apply received operations only if the operation's','line_number':108,'multiline':False]['text':' optime is greater than OplogApplier::Options::beginApplyingOpTime.','line_number':109,'multiline':False]['text':' add test docs','line_number':113,'multiline':False]['text':' Test that the number of oplog getMore requested by the secondary and processed by the primary has','line_number':127,'multiline':False]['text':' increased since the start of the test.','line_number':128,'multiline':False]['text':' Test getLastError.wtime and that it only records stats for w > 1, see SERVER-9005','line_number':142,'multiline':False]['text':' Write will fail because there are only 2 nodes','line_number':162,'multiline':False]['text':' Test metrics related to writeConcern timeouts and default writeConcern.','line_number':166,'multiline':False]['text':' Set the default WC to timeout.','line_number':169,'multiline':False]['text':' Explicit timeout - increments wtimeouts.','line_number':175,'multiline':False]['text':' Default timeout - increments wtimeouts and default.wtimeouts.','line_number':181,'multiline':False]['text':' Set the default WC to unsatisfiable.','line_number':187,'multiline':False]['text':' Explicit unsatisfiable - no counters incremented.','line_number':192,'multiline':False]['text':' Default unsatisfiable - increments default.unsatisfiable.','line_number':197,'multiline':False]['text':' Set the default WC back to {w: 1, wtimeout: 0}.','line_number':202,'multiline':False]['text':' Validate counters.','line_number':206,'multiline':False]['text':' Enable periodic noops to aid sync source selection.','line_number':219,'multiline':False]['text':' Enable the setSmallOplogGetMoreMaxTimeMS failpoint on secondary so that it will start using','line_number':222,'multiline':False]['text':' a small awaitData timeout for oplog fetching after re-choosing the sync source. This is needed to','line_number':223,'multiline':False]['text':' make sync source return empty batches more frequently in order to test the metric','line_number':224,'multiline':False]['text':' numEmptyBatches.','line_number':225,'multiline':False]['text':' Wait for the secondary to sync from the primary before asserting that the secondary increments','line_number':228,'multiline':False]['text':' numTimesChoseSame. Otherwise, the secondary may go into the loop with an empty sync source, which','line_number':229,'multiline':False]['text':' will lead to the loop never exiting as the secondary always treats choosing the primary as a','line_number':230,'multiline':False]['text':' new sync source.','line_number':231,'multiline':False]['text':' timeout ','line_number':232,'multiline':True]['text':' Repeatedly restart replication and wait for the sync source to be rechosen. If the sync source','line_number':234,'multiline':False]['text':' gets set to empty between stopping and restarting replication, then the secondary won't','line_number':235,'multiline':False]['text':' increment numTimesChoseSame, so we do this in a loop.','line_number':236,'multiline':False]['text':' Do a dummy write to choose a new sync source and replicate the write to block on that.','line_number':243,'multiline':False]['text':' 5sec interval to wait for noop ','line_number':253,'multiline':True]['text':' Get the base number of empty batches after the secondary is up to date. Assert that the secondary','line_number':258,'multiline':False]['text':' eventually gets an empty batch due to awaitData timeout.','line_number':259,'multiline':False]['text':' Stop the primary so the secondary cannot choose a sync source.','line_number':269,'multiline':False]