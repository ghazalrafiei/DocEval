['text':'*
 * Tests that a multi-oplog batched multi delete operation can be rolled back.
 * @tags: [
 *   requires_fcv_71,
 *   requires_replication,
 * ]
 ','line_number':1,'multiline':True]['text':' Operations that will be present on both nodes, before the common point.','line_number':11,'multiline':False]['text':' Operations that will be performed on the rollback node past the common point.','line_number':23,'multiline':False]['text':' Check oplog entries generated for the large batched write.','line_number':32,'multiline':False]['text':' Query returns any oplog entries where the applyOps array contains an operation with a','line_number':33,'multiline':False]['text':' namespace matching the test collection namespace. Oplog entries will be returned in reverse','line_number':34,'multiline':False]['text':' timestamp order (most recent first).','line_number':35,'multiline':False]['text':' Set up Rollback Test.','line_number':49,'multiline':False]['text':' On a slow machine, the default of 5 ms for 'batchedDeletesTargetBatchTimeMS'','line_number':52,'multiline':False]['text':' may cause the batched delete stage to break up the delete operation into','line_number':53,'multiline':False]['text':' smaller batches that not allow us to test the effect of','line_number':54,'multiline':False]['text':' 'maxNumberOfBatchedOperationsInSingleOplogEntry' on','line_number':55,'multiline':False]['text':' OpObserver::onBatchedWriteCommit().','line_number':56,'multiline':False]['text':' Setting 'batchedDeletesTargetBatchTimeMS' to zero (for unlimited) ensures that','line_number':57,'multiline':False]['text':' the delete stage will alway put all the requested deletes in a single batch.','line_number':58,'multiline':False]['text':'replSet=','line_number':63,'multiline':True]['text':' Wait for rollback to finish.','line_number':77,'multiline':False]['text':' Check collection count.','line_number':82,'multiline':False]