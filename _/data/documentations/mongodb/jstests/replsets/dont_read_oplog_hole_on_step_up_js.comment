['text':'
 * Tests that we don't read an oplog hole when we step up while waiting for a tailable oplog query.
 * This test creates a configuration where one secondary, 'secondary', is syncing from a different
 * secondary, 'newPrimary', which is soon to become primary. As the new node becomes primary, the
 * other secondary oplog tailer should not observe any oplog holes.
 *
 * @tags: [
 *   multiversion_incompatible,
 * ]
 ','line_number':1,'multiline':True]['text':' The long election timeout results in a 30-second getMore, plenty of time to hit bugs.','line_number':15,'multiline':False]['text':' Initiate in two steps so that the first two nodes finish initial sync before the third begins','line_number':23,'multiline':False]['text':' its initial sync. This prevents the long getMore timeout from causing the first initial sync to','line_number':24,'multiline':False]['text':' take so much time that the second cannot succeed.','line_number':25,'multiline':False]['text':' The default WC is majority and this test can't satisfy majority writes.','line_number':28,'multiline':False]['text':' Make sure this secondary syncs only from the node bound to be the new primary.','line_number':36,'multiline':False]['text':' Wait for all 'newlyAdded' field removals to prevent auto reconfigs from interfering with the','line_number':44,'multiline':False]['text':' replSetStepUp command below.','line_number':45,'multiline':False]['text':' Make sure when the original primary syncs, it's only from the secondary; this avoids spurious log','line_number':48,'multiline':False]['text':' messages.','line_number':49,'multiline':False]['text':' Force the the secondary tailing the newPrimary to yield its getMore.','line_number':59,'multiline':False]['text':' Wait for the node to transition to primary and accept writes.','line_number':65,'multiline':False]['text':' Implicitly creates the collection.','line_number':70,'multiline':False]['text':' Give enough time for the oplog tailer to resume and observe the oplog hole. The expectation is','line_number':84,'multiline':False]['text':' that the secondary oplog tailer should not see any holes. If it does, and misses the collection','line_number':85,'multiline':False]['text':' creation oplog entry, then it will crash because it will attempt to apply the insert operation on','line_number':86,'multiline':False]['text':' a non-existent namespace. While this specific scenario produces a crash, in general this type of','line_number':87,'multiline':False]['text':' bug can introduce data corruption.','line_number':88,'multiline':False]