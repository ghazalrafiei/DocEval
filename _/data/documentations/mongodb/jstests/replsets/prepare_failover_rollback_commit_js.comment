['text':'*
 * This tests that preparing a transaction successfully will update the lastWriteOpTime on
 * secondaries so that the corresponding commitTransaction oplog entry has a correct prevOpTime.
 * The test exercises a failover right after a prepare, so that we have to commit the transaction
 * while talking to a node that was in secondary state when it was prepared. We commit that
 * transaction, then roll back that commit entry, the success of which depends on the prevOpTime
 * being set properly.
 *
 * @tags: [
 *   uses_prepare_transaction,
 *   uses_transactions,
 * ]
 ','line_number':1,'multiline':True]['text':' First create the collection for all.','line_number':26,'multiline':False]['text':' Prepare a transaction. This will be replicated to the secondary.','line_number':36,'multiline':False]['text':' Do a failover first, without rolling back any of the data from this test. We want the','line_number':39,'multiline':False]['text':' current secondary to become primary and inherit the prepared transaction.','line_number':40,'multiline':False]['text':' Now set up a rollback scenario for that new primary.','line_number':46,'multiline':False]['text':' Create a proxy session to reuse the session state of the old primary.','line_number':49,'multiline':False]['text':' Commit the transaction on this primary. We expect the commit to roll back.','line_number':53,'multiline':False]['text':' Create a proxy session to reuse the session state of the old primary.','line_number':60,'multiline':False]['text':' Commit the transaction for all to conclude the test.','line_number':64,'multiline':False]