['text':'*
 * Verify that transactions correctly abort for all possible types of write conflicts.
 *
 * BACKGROUND:
 *
 * Snapshot isolation guarantees that every transaction, conceptually, runs against its own,
 * consistent "snapshot" of the database, which reflects the effects of all previously committed
 * transactions. Every transaction performs its reads and writes against this snapshot, adjusting
 * for the effects of any writes executed inside the transaction. Snapshot isolation enforces a
 * policy for serializing writes between transactions known as the "First Updater Wins" rule.
 * Intuitively, this rule states that concurrent transactions are not allowed to write to the same
 * document. It enforces this via an optimistic concurrency control mechanism, as opposed to a
 * pessimistic one i.e. locking the document. If two concurrent transactions T1 and T2 write to the
 * same document, only the first writer will succeed. So, for example, if transaction T2 tries to
 * write to a document already written to by T1 this will cause T2's write to fail with a
 * "WriteConflict" error, and transaction T2 will be aborted.
 *
 * In MongoDB, a "write" by a transaction is any insert, update, or delete to a document. This means
 * that all of these operation types can produce write conflicts with each other as a result of
 * running in concurrent transactions. The test cases below illustrate the possible write conflict
 * types for both single and multi-document writes.
 *
 * Note that two transactions can be "concurrent" even if they don't necessarily execute on
 * different threads within the server. Transactions under snapshot isolation are defined to be
 * "concurrent" if their transactional lifetimes overlap. The lifetime of a transaction is the
 * interval [Start(T), Commit(T)], where Start(T) is the read timestamp of transaction (the
 * timestamp of the snapshot it executes against) and Commit(T) is the timestamp of the
 * transaction's commit operation. In the tests below, we use two separate sessions so we can
 * arbitrarily interleave operations between two different transactions, simulating the execution of
 * two "truly" concurrent transactions.
 *
 *  @tags: [uses_transactions]
 ','line_number':1,'multiline':True]['text':' Clean up and create test collection.','line_number':42,'multiline':False]['text':'**********************************************************************************************
 * Single document write conflicts.
 *********************************************************************************************','line_number':46,'multiline':True]['text':' the document to update.','line_number':63,'multiline':False]['text':' the document to delete.','line_number':99,'multiline':False]['text':' the document to delete/update.','line_number':119,'multiline':False]['text':' the document to delete/update.','line_number':139,'multiline':False]['text':'**********************************************************************************************
 * Multi-document and predicate based write conflicts.
 *********************************************************************************************','line_number':155,'multiline':True]['text':' the documents to update/delete.','line_number':180,'multiline':False]['text':' Predicate intersection: [{_id: 2}, {_id: 3}]','line_number':182,'multiline':False]['text':' the documents to update/delete.','line_number':201,'multiline':False]['text':' Predicate intersection: [{_id: 2}, {_id: 3}]','line_number':203,'multiline':False]['text':' the documents to update/delete.','line_number':222,'multiline':False]['text':' Predicate intersection: [{_id: 2}, {_id: 3}]','line_number':224,'multiline':False]['text':' the documents to delete.','line_number':243,'multiline':False]['text':' Predicate intersection: [{_id: 2}, {_id: 3}]','line_number':245,'multiline':False]