['text':' Tests that the killCursors command is allowed in transactions.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' @tags: [','line_number':3,'multiline':False]['text':'   # The test runs commands that are not allowed with security token: endSession, killCursors.','line_number':4,'multiline':False]['text':'   not_allowed_with_signed_security_token,','line_number':5,'multiline':False]['text':'   uses_transactions,','line_number':6,'multiline':False]['text':'   uses_parallel_shell','line_number':7,'multiline':False]['text':' ]','line_number':8,'multiline':False]['text':' Open a cursor on the collection.','line_number':46,'multiline':False]['text':' Start a drop, which will hang.','line_number':51,'multiline':False]['text':' Wait for the drop to have a pending MODE_X lock on the database.','line_number':56,'multiline':False]['text':' killCursors does not block behind the pending MODE_X lock. It is possible that due to ticket','line_number':78,'multiline':False]['text':' exhaustion we end up detecting a deadlocked state, where the drop operation is waiting for','line_number':79,'multiline':False]['text':' an X collection lock but cannot acquire it because IX locks are being held by the killCursor','line_number':80,'multiline':False]['text':' operation, in which case we fail the killCursor command. If there was an error running the','line_number':81,'multiline':False]['text':' command below we should ensure that is a TransientTransactionError with a code of LockTimeOut,','line_number':82,'multiline':False]['text':' and ensure that the transaction was successfully rolled back.','line_number':83,'multiline':False]['text':' The transaction should have implicitly been aborted.','line_number':93,'multiline':False]['text':' Once the transaction has committed, the drop can proceed.','line_number':98,'multiline':False]