['text':'*
 * Tests that new transactions on a session block behind an existing prepared transaction on the
 * session.
 *
 * @tags: [
 *   # The test runs commands that are not allowed with security token: endSession,
 *   # prepareTransaction.
 *   not_allowed_with_signed_security_token,
 *   uses_transactions,
 *   uses_prepare_transaction,
 *   uses_parallel_shell
 * ]
 ','line_number':1,'multiline':True]['text':'*
 * Launches a parallel shell to start a new transaction on the session with the given lsid. It
 * performs an insert and then commits. Assumes that there will be an already-prepared transaction
 * on the session, and blocks using a failpoint until the transaction in the parallel shell has
 * begun to block behind the prepared transaction.
 ','line_number':19,'multiline':True]['text':' Turn on failpoint that parallel shell will hit when blocked on prepare.','line_number':28,'multiline':False]['text':' Use txnNumber : 1 since the active txnNumber will be 0.','line_number':33,'multiline':False]['text':' Try to do an insert in a new transaction on the same session.  Note that we're','line_number':35,'multiline':False]['text':' manually including the lsid and stmtId instead of using the session object directly','line_number':36,'multiline':False]['text':' since there's no way to share a session with the parallel shell.','line_number':37,'multiline':False]['text':' Launch a parallel shell to start a new transaction, insert a document, and commit. These','line_number':52,'multiline':False]['text':' operations should block behind the previous prepared transaction on the session.','line_number':53,'multiline':False]['text':' Wait until parallel shell insert is blocked on prepare.','line_number':57,'multiline':False]['text':' Disable failpoint to allow the parallel shell to continue - it should still be blocked on','line_number':60,'multiline':False]['text':' prepare. This is needed in a finally block so that if something fails we're guaranteed to','line_number':61,'multiline':False]['text':' turn this failpoint off, so that it doesn't cause problems for subsequent tests.','line_number':62,'multiline':False]['text':'*
 * Common variables and setup.
 ','line_number':70,'multiline':True]['text':' Start and prepare a transaction.','line_number':89,'multiline':False]['text':' Launch a concurrent transaction which should block behind the active prepared transaction.','line_number':94,'multiline':False]['text':' Abort the original transaction - this should allow the parallel shell to continue and start a','line_number':97,'multiline':False]['text':' new transaction.','line_number':98,'multiline':False]['text':' Start and prepare a transaction.','line_number':115,'multiline':False]['text':' Launch a concurrent transaction which should block behind the active prepared transaction.','line_number':120,'multiline':False]['text':' Commit the original transaction - this should allow the parallel shell to continue and start','line_number':123,'multiline':False]['text':' a new transaction. Not using PrepareHelpers.commitTransaction because it calls','line_number':124,'multiline':False]['text':' commitTransaction twice, and the second call races with the second transaction the test','line_number':125,'multiline':False]['text':' started.','line_number':126,'multiline':False]['text':' The following command specifies txnNumber: 2 without startTransaction: true.','line_number':146,'multiline':False]