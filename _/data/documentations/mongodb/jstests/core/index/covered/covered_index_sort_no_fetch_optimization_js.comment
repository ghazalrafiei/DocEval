['text':'*
 * Confirms that blocking sorts are covered when the index contains the sort key. For example, if we
 * have an index on {a:1, b:1} and a sort on {b:1}, and a projection of only field 'b', we can sort
 * using only the existing index keys, without needing to do a fetch.
 *
 * Queries on a sharded collection can't be covered when they aren't on the shard key. The document
 * must be fetched to support the SHARDING_FILTER stage.
 * @tags: [
 *   assumes_unsharded_collection,
 * ]
 ','line_number':1,'multiline':True]['text':' Test correctness of basic covered queries. Here, the sort predicate is not the same order','line_number':46,'multiline':False]['text':' as the index order, but uses the same keys.','line_number':47,'multiline':False]['text':' Test correctness of queries where sort is not covered because not all sort keys are in the','line_number':70,'multiline':False]['text':' index.','line_number':71,'multiline':False]['text':' When the sort key is multikey, we cannot cover the sort using the index.','line_number':90,'multiline':False]['text':' Collation Tests.','line_number':102,'multiline':False]['text':' If you have an index with the same index key pattern and the same collation as the sort key,','line_number':104,'multiline':False]['text':' then no blocking sort is required.','line_number':105,'multiline':False]['text':' Note that {locale: "en_US", strength: 3} differ from the simple collation with respect to','line_number':107,'multiline':False]['text':' case ordering. "en_US" collation puts lowercase letters first, whereas the simple collation','line_number':108,'multiline':False]['text':' puts uppercase first.','line_number':109,'multiline':False]['text':' This tests the case where there is a collation, and we need to do a blocking SORT, but that','line_number':126,'multiline':False]['text':' SORT could be computed using the index keys. However, this query cannot be covered due the','line_number':127,'multiline':False]['text':' index having a non-simple collation.','line_number':128,'multiline':False]['text':' The index has the same key pattern as the sort but a different collation.','line_number':145,'multiline':False]['text':' We expect to add a fetch stage here as 'b' is not guaranteed to be in the correct order.','line_number':146,'multiline':False]['text':' The index has a collation but the query sort does not.','line_number':161,'multiline':False]['text':' We expect to add a fetch stage here as 'b' is not guaranteed to be in the correct order.','line_number':162,'multiline':False]['text':' The index has a collation but the query does not. However, our index bounds do not contain','line_number':175,'multiline':False]['text':' strings, so we can apply the no-fetch optimization.','line_number':176,'multiline':False]['text':' The index does not have a special collation, but the query asks for one. The no-fetch','line_number':187,'multiline':False]['text':' optimization will be applied in this case. The server must correctly respect the collation','line_number':188,'multiline':False]['text':' when sorting the index keys, as the index keys do not already reflect the collation.','line_number':189,'multiline':False]['text':' Test covered sort plan possible with non-multikey dotted field in sort key.','line_number':205,'multiline':False]