['text':'*
 * Test the input/output behavior of some predicates on time-series collections.
 *
 * @tags: [
 *   # This test depends on certain writes ending up in the same bucket. Stepdowns and tenant
 *   # migrations may result in writes splitting between two primaries, and thus different buckets.
 *   does_not_support_stepdowns,
 *   tenant_migration_incompatible,
 *   # We need a timeseries collection.
 *   requires_timeseries,
 * ]
 ','line_number':1,'multiline':True]['text':' Tests that we produce the same results for a given 'predicate', with and without timeseries, and','line_number':21,'multiline':False]['text':' regardless of timeseries bucketing placement.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' 1. Given two buckets, this function generates one testing scenario for every possible document in','line_number':24,'multiline':False]['text':' bucket placement option.','line_number':25,'multiline':False]['text':' 2. Then inserts the documents accordingly, leveraging metadata (meta.bucket) field.','line_number':26,'multiline':False]['text':' 3. Finally retrieves the documents according to 'predicate' and verifies that the result is the','line_number':27,'multiline':False]['text':' same as it would be without timeseries','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' Since we're generating one scenario for each possible document placement option in two buckets,','line_number':30,'multiline':False]['text':' that means we're generating 2^documents.length different scenarios. We recommend it to be < 8','line_number':31,'multiline':False]['text':' For N documents, there are 2^N ways to assign them to buckets A and B.','line_number':42,'multiline':False]['text':' The ith bit tells you how to assign documents[i].','line_number':46,'multiline':False]['text':'deep','line_number':48,'multiline':True]['text':' Test $in...','line_number':56,'multiline':False]['text':' ... with a simple list of equalities.','line_number':58,'multiline':False]['text':' ... with equalities which contain an array.','line_number':66,'multiline':False]['text':' $exists: true','line_number':78,'multiline':False]['text':' Test $or...','line_number':87,'multiline':False]['text':' ... on metric + mt.','line_number':89,'multiline':False]['text':' ... when one argument can't be pushed down.','line_number':103,'multiline':False]['text':' ... when neither argument can be pushed down.','line_number':117,'multiline':False]['text':' Test $and...','line_number':132,'multiline':False]['text':' ... on metric + mt.','line_number':134,'multiline':False]['text':' ... when one argument can't be pushed down.','line_number':148,'multiline':False]['text':' ... when neither argument can be pushed down.','line_number':162,'multiline':False]['text':' Test nested $and / $or.','line_number':177,'multiline':False]['text':' The top-level $or prevents us from splitting into 2 top-level $match stages.','line_number':179,'multiline':False]['text':' Test nested $and / $or where some leaf predicates cannot be pushed down.','line_number':207,'multiline':False]['text':' Test $exists on mt, inside $or.','line_number':236,'multiline':False]['text':' Test $in on mt, inside $or.','line_number':254,'multiline':False]['text':' Test geo predicates on mt, inside $or.','line_number':272,'multiline':False]['text':' Test $mod on mt, inside $or.','line_number':307,'multiline':False]['text':' $mod is an example of a predicate that we don't handle specially in time-series optimizations:','line_number':308,'multiline':False]['text':' it can be pushed down if and only if it's on a metadata field.','line_number':309,'multiline':False]['text':' Test $elemMatch on mt, inside $or.','line_number':327,'multiline':False]['text':' Test a standalone $elemMatch on mt.','line_number':359,'multiline':False]['text':' Test a standalone $size on mt.','line_number':371,'multiline':False]