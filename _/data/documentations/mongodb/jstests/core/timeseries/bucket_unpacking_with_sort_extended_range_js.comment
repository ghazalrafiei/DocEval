['text':'*
 * Test that sort queries work properly on dates ouside the 32 bit epoch range,
 *  [1970-01-01 00:00:00 UTC - 2038-01-29 03:13:07 UTC], when a collection scan is used.
 *
 * @tags: [
 *     # Explain of a resolved view must be executed by mongos.
 *     directly_against_shardsvrs_incompatible,
 *     # This complicates aggregation extraction.
 *     do_not_wrap_aggregations_in_facets,
 *     # Refusing to run a test that issues an aggregation command with explain because it may
 *     # return incomplete results if interrupted by a stepdown/tenant migration.
 *     does_not_support_stepdowns,
 *     tenant_migration_incompatible,
 *     # We need a timeseries collection.
 *     requires_timeseries,
 * ]
 ','line_number':1,'multiline':True]['text':' Create unindexed collection','line_number':21,'multiline':False]['text':' Create collection indexed on time','line_number':27,'multiline':False]['text':' Split and move data to create an interesting scenario: we have some data on each shard,','line_number':42,'multiline':False]['text':' but all the extended-range data is on a non-primary shard. This means view resolution is','line_number':43,'multiline':False]['text':' unaware of the extended-range data, because that happens on the primary shard.','line_number':44,'multiline':False]['text':' Our example data has documents between 2000-2003, and these dates are non-wrapping.','line_number':51,'multiline':False]['text':' So this goes on the primary shard, and everything else goes on the non-primary.','line_number':52,'multiline':False]['text':' Insert some data. We'll insert 5 buckets in each range, with values < 0,','line_number':77,'multiline':False]['text':' values between 0 and FFFFFFFF(unsigned), and values > FFFFFFFF. It turns out, however,','line_number':78,'multiline':False]['text':' that Javascript's Date doesn't handle dates beyond 2039 either, so we rely on lower dates','line_number':79,'multiline':False]['text':' to test for unexpected behavior.','line_number':80,'multiline':False]['text':' We want to choose the underflow and overflow lower bits in such a way that we','line_number':82,'multiline':False]['text':' encourage wrong results when the upper bytes are removed.','line_number':83,'multiline':False]['text':' Year before the 32 bit epoch','line_number':84,'multiline':False]['text':' Middle of the 32 bit epoch','line_number':85,'multiline':False]['text':' With a sharded collection, some shards might not have any extended-range data,','line_number':126,'multiline':False]['text':' so they might still use $_internalBoundedSort. But we know at least one','line_number':127,'multiline':False]['text':' shard has extended-range data, so we know at least one shard has to','line_number':128,'multiline':False]['text':' use a blocking sort.','line_number':129,'multiline':False]['text':' Check plan using collection scan','line_number':177,'multiline':False]['text':' Check plan using hinted collection scan','line_number':186,'multiline':False]['text':' Check plan using index scan. If we've inserted a date before 1-1-1970, we round the min','line_number':204,'multiline':False]['text':' up towards 1970, rather then down, which has the effect of increasing the control.min.t.','line_number':205,'multiline':False]['text':' This means the minimum time in the bucket is likely to be lower than indicated and thus,','line_number':206,'multiline':False]['text':' actual dates may be out of order relative to what's indicated by the bucket bounds.','line_number':207,'multiline':False]['text':' Check plan using hinted index scan','line_number':216,'multiline':False]['text':' Check plan using hinted collection scan','line_number':225,'multiline':False]['text':' The workaround in all cases is to create a reverse index on the time field, though','line_number':234,'multiline':False]['text':' it's necessary to force use of the reversed index.','line_number':235,'multiline':False]['text':' descending','line_number':250,'multiline':False]['text':' ascending','line_number':251,'multiline':False]