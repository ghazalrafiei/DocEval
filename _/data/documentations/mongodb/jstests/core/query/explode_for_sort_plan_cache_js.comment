['text':'*
 * Confirms that explode for sort plans are properly cached and recovered from the plan cache,
 * yielding correct results after the query is auto-parameterized.
 *
 * @tags: [
 *   # Since the plan cache is per-node state, this test assumes that all operations are happening
 *   # against the same mongod.
 *   assumes_read_preference_unchanged,
 *   assumes_read_concern_unchanged,
 *   does_not_support_stepdowns,
 *   # If all chunks are moved off of a shard, it can cause the plan cache to miss commands.
 *   assumes_balancer_off,
 *   assumes_unsharded_collection,
 *   requires_fcv_70,
 *   # Plan cache state is node-local and will not get migrated alongside tenant data.
 *   tenant_migration_incompatible,
 *   # Part of this test does different checks depending on the engine used.  If an implicit index
 *   # is created, the engine use depends on what index is implicitly created. E.g. if a column
 *   # index is implicitly created, the engine used may be different in that passthrough.
 *   assumes_no_implicit_index_creation,
 *   # Plan does not support repeat queries
 *   does_not_support_repeated_reads,
 * ]
 ','line_number':1,'multiline':True]['text':' Create two indexes to ensure the multi-planner kicks in and the query plan gets cached when the','line_number':36,'multiline':False]['text':' classic engine is in use.','line_number':37,'multiline':False]['text':' A helper function to look up a cache entry in the plan cache based on the given filter','line_number':45,'multiline':False]['text':' and sort specs.','line_number':46,'multiline':False]['text':' We expect exactly one matching cache entry.','line_number':52,'multiline':False]['text':' Clear plan cache to have a fresh test case.','line_number':73,'multiline':False]['text':' Run the query for the first time to create an inactive plan cache entry.','line_number':82,'multiline':False]['text':' Run the same query again to activate the cache entry.','line_number':87,'multiline':False]['text':' Run the new query and check for cache entry.','line_number':98,'multiline':False]['text':' Insert documents into the collection in a way that we can deduce query result count by the query','line_number':121,'multiline':False]['text':' parameters.','line_number':122,'multiline':False]['text':' Query with shape not like point intervals but evaluates to point intervals at runtime will not be','line_number':133,'multiline':False]['text':' optimized with exploding for sort.','line_number':134,'multiline':False]['text':' Changing the $eq predicate value should reuse the plan cache and gives correct results.','line_number':137,'multiline':False]['text':' Changing the $expr-$eq predicate value should not reuse the SBE plan cache because agg expression','line_number':146,'multiline':False]['text':' is not parameterized.','line_number':147,'multiline':False]['text':' The plan cache entry is always reused for the classic engine but never reused for the SBE','line_number':153,'multiline':False]['text':' engine.','line_number':154,'multiline':False]['text':' Rewriting the $in predicate with $or should reuse the plan cache and gives correct results.','line_number':158,'multiline':False]['text':' Changing the $or predicate value should reuse the plan cache and gives correct results, since $or','line_number':167,'multiline':False]['text':' is rewritten as $in.','line_number':168,'multiline':False]['text':' Changing the $in predicate values but not size should reuse the plan cache and gives correct','line_number':177,'multiline':False]['text':' results.','line_number':178,'multiline':False]['text':' Changing the $in predicate size should not reuse the SBE plan cache but still gives correct','line_number':187,'multiline':False]['text':' results.','line_number':188,'multiline':False]['text':' Special values in the predicate will not be parameterized hence the SBE plan cache will not be','line_number':197,'multiline':False]['text':' reused.','line_number':198,'multiline':False]['text':' Regex in $in predicate will not reuse plan cache.','line_number':216,'multiline':False]['text':' Test that an $in with as many elements as the "max scans to explode" parameter uses explode for','line_number':235,'multiline':False]['text':' sort and is parameterized correctly.','line_number':236,'multiline':False]['text':' Test that in SBE a query with explode for sort optimization will use different plan cache','line_number':245,'multiline':False]['text':' entry than the same query with too many scans to explode.','line_number':246,'multiline':False]['text':' Test that a query with more than "max scans to explode" will use the same plan cache','line_number':255,'multiline':False]['text':' entry for any number of elements in $in.','line_number':256,'multiline':False]