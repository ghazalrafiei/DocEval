['text':'*
 * Tests the behavior of projection for dotted paths, including edge cases where the path only
 * sometimes exists.
 *
 * @tags: [
 *   # We could potentially need to resume an index build in the event of a stepdown, which is not
 *   # yet implemented.
 *   does_not_support_stepdowns,
 *   # Columnstore indexes were first enabled by default on 6.3.
 *   requires_fcv_63,
 *   # Columnstore tests set server parameters to disable columnstore query planning heuristics -
 *   # server parameters are stored in-memory only so are not transferred onto the recipient.
 *   tenant_migration_incompatible,
 *   not_allowed_with_signed_security_token,
 *   requires_sbe,
 * ]
 ','line_number':1,'multiline':True]['text':' Tests that when 'projection' is applied to 'input', we get 'expectedOutput'.','line_number':29,'multiline':False]['text':' Tests that this remains true if indexes are added, or if we use aggregation instead of find.','line_number':30,'multiline':False]['text':' The basics: what happens when I include a top-level field?','line_number':58,'multiline':False]['text':' Test the basic "include a" projection. This should implicitly include the _id.','line_number':60,'multiline':False]['text':' Test some basic "normal" cases.','line_number':68,'multiline':False]['text':' Test including "a" when "a" is missing/not present.','line_number':76,'multiline':False]['text':' TODO SERVER-23229 this will return different results if there is a covering index, so here','line_number':77,'multiline':False]['text':' but not elsewhere we don't use any "interestingIndexes." Column store indexes are excepted','line_number':78,'multiline':False]['text':' since their unique storage format means they are unimpacted by SERVER-23229.','line_number':79,'multiline':False]['text':' Test a range of interesting values for "a". We expect everything to be preserved unmodified.','line_number':93,'multiline':False]['text':' Now test with the same documents but excluding the "_id" field.','line_number':115,'multiline':False]['text':' Can't use {a: "hashed"} here because it doesn't support array values.','line_number':120,'multiline':False]['text':' Could use {a: "$**"}, but it can't be hinted without a query predicate so we'll leave','line_number':121,'multiline':False]['text':' that coverage for elsewhere rather than add complexity to get a valid query predicate.','line_number':122,'multiline':False]['text':' The "basics" again.','line_number':126,'multiline':False]['text':' Missing 'a' value again.','line_number':132,'multiline':False]['text':' TODO SERVER-23229 this will return different results if there is a covering index, so here','line_number':133,'multiline':False]['text':' but not elsewhere we don't use any "interestingIndexes". Column store indexes are excepted','line_number':134,'multiline':False]['text':' since their unique storage format means they are unimpacted by SERVER-23229.','line_number':135,'multiline':False]['text':' Just a couple of the cases above to confirm the same behavior just without the _id.','line_number':149,'multiline':False]['text':' Now test one level of nesting - a single "dot" in the path.','line_number':158,'multiline':False]['text':' Test the basic "include a.b" projection. This should implicitly include the _id.','line_number':160,'multiline':False]['text':' Test some basic "normal" cases.','line_number':168,'multiline':False]['text':' Test that it excludes extra fields at the root and at the sub-document.','line_number':169,'multiline':False]['text':' Test that (at least for now) the dotted path doesn't work great here.','line_number':172,'multiline':False]['text':' Test that '_id' within a sub-document is excluded.','line_number':175,'multiline':False]['text':' Test array use case.','line_number':179,'multiline':False]['text':' Test that a missing field within an object in an array will show up as an empty object.','line_number':182,'multiline':False]['text':' Test including "a.b" when "a.b" is missing/not present.','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':' TODO SERVER-23229 this will return different results if there is a covering index, so here','line_number':188,'multiline':False]['text':' but not elsewhere we don't use any "interestingIndexes".','line_number':189,'multiline':False]['text':' If there's a covered plan we will always construct {a: {b: null}} when we don't see an "a.b"','line_number':190,'multiline':False]['text':' value, which is not always correct.','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' Interestingly, this bug disappears if the index is multikey ('a' or 'a.b' are arrays), since','line_number':193,'multiline':False]['text':' we will need to add a fetch to reconstruct the array anyway and will figure out the correct','line_number':194,'multiline':False]['text':' answer in the process.','line_number':195,'multiline':False]['text':'','line_number':196,'multiline':False]['text':' Column store indexes are excepted since their unique storage format means they are unimpacted','line_number':197,'multiline':False]['text':' by SERVER-23229.','line_number':198,'multiline':False]['text':' The "basics" again - no _id this time.','line_number':218,'multiline':False]['text':' More cases where 'a.b' doesn't exist - but with arrays this time.','line_number':230,'multiline':False]['text':' This is an interesting case: the scalars are ignored but the shadow documents are preserved.','line_number':235,'multiline':False]['text':' Further interest: the array within the array is preserved.','line_number':238,'multiline':False]['text':' But not the scalar elements of it.','line_number':240,'multiline':False]['text':' But if there's a "b" again we see that.','line_number':242,'multiline':False]['text':' Test the case where two paths in a projection go through the same parent object.','line_number':268,'multiline':False]['text':' Array cases where one or both of the paths don't exist.','line_number':289,'multiline':False]['text':' Non-array cases where one or both of the paths don't exist.','line_number':298,'multiline':False]['text':'','line_number':299,'multiline':False]['text':' TODO SERVER-23229: This will return different results if there is a covering index, so here','line_number':300,'multiline':False]['text':' but not elsewhere we don't use any "interestingIndexes" in test cases. Column store indexes','line_number':301,'multiline':False]['text':' are excepted since their unique storage format means they are unimpacted by SERVER-23229.','line_number':302,'multiline':False]['text':' Test the basic "include a.b.c" projection. We've seen the implicit '_id' behavior above so','line_number':318,'multiline':False]['text':' we'll always project _id out for these tests.','line_number':319,'multiline':False]['text':' Test some basic "normal" cases.','line_number':327,'multiline':False]['text':' Test that it excludes extra fields at the root and at the sub-document','line_number':328,'multiline':False]['text':' Test array use cases.','line_number':332,'multiline':False]['text':' 'a' is an array.','line_number':333,'multiline':False]['text':' 'a.b' is an array.','line_number':336,'multiline':False]['text':' 'a' and 'a.b' are arrays.','line_number':338,'multiline':False]['text':' 'a' and 'a.b' and 'a.b.c' are arrays.','line_number':342,'multiline':False]['text':' Test that when the path is missing we preserve the structure.','line_number':352,'multiline':False]['text':' No 'b' here.','line_number':355,'multiline':False]['text':' No 'c' anywhere','line_number':357,'multiline':False]['text':' Only some 'c's','line_number':359,'multiline':False]['text':' One more without a 'b' to prove we get trailing empty objects.','line_number':361,'multiline':False]['text':' bPrime was here ','line_number':367,'multiline':True]['text':' all cPrimes ','line_number':368,'multiline':True]['text':'cPrime was here ','line_number':369,'multiline':True]['text':' bPrime again ','line_number':370,'multiline':True]['text':' Test including "a.b.c" when "a.b.c" is missing/not present.','line_number':374,'multiline':False]['text':'','line_number':375,'multiline':False]['text':' TODO SERVER-23229 this will return different results if there is a covering index, so here','line_number':376,'multiline':False]['text':' but not elsewhere we don't use any "interestingIndexes".','line_number':377,'multiline':False]['text':' If there's a covered plan we will always construct {a: {b: {c: null}}} when we don't see an','line_number':378,'multiline':False]['text':' "a.b.c" value, which is not always correct.','line_number':379,'multiline':False]['text':'','line_number':380,'multiline':False]['text':' Interestingly, this bug disappears if the index is multikey ('a.b.c' or any parent is an','line_number':381,'multiline':False]['text':' array), since we will need to add a fetch to reconstruct the array anyway and will figure out','line_number':382,'multiline':False]['text':' the correct answer in the process.','line_number':383,'multiline':False]['text':'','line_number':384,'multiline':False]['text':' Column store indexes are excepted since their unique storage format means they are unimpacted','line_number':385,'multiline':False]['text':' by SERVER-23229.','line_number':386,'multiline':False]['text':' More cases where 'a.b.c' doesn't exist - but with arrays this time.','line_number':410,'multiline':False]['text':' The cases from above with just 'a.b' are mostly the same for 'a.b.c':','line_number':412,'multiline':False]['text':' Now some with 'a.b' existing but no 'a.b.c'.','line_number':420,'multiline':False]['text':' Now some new cases where 'a.b.c' sometimes exists.','line_number':456,'multiline':False]['text':' One array path.','line_number':457,'multiline':False]['text':' 'a' is array.','line_number':458,'multiline':False]['text':' 'b' is array.','line_number':464,'multiline':False]['text':' 'c' is array.','line_number':470,'multiline':False]['text':' Two arrays.','line_number':474,'multiline':False]['text':' 'b' and 'c' are arrays.','line_number':475,'multiline':False]['text':' 'a' and 'b' are arrays.','line_number':480,'multiline':False]['text':' 'a' and 'c' are arrays.','line_number':490,'multiline':False]['text':' Three arrays.','line_number':495,'multiline':False]['text':' Now test the exclusion semantics. This part is a lot smaller since a lot of the behaviors mirror','line_number':506,'multiline':False]['text':' inclusion projection.','line_number':507,'multiline':False]['text':' Need a new helper to exclude column store coverage, since column store indexes cannot be used','line_number':509,'multiline':False]['text':' for exclusion projections.','line_number':510,'multiline':False]['text':' Test some basic top-level flat examples.','line_number':518,'multiline':False]['text':' Test some dotted examples.','line_number':530,'multiline':False]['text':' One notable difference between inclusion and exclusion projections is that parent's scalar','line_number':536,'multiline':False]['text':' values remain untouched during an exclusion projection. The "scalar" here remains. In an','line_number':537,'multiline':False]['text':' inclusion projection, these would disappear.','line_number':538,'multiline':False]['text':' Now test the semantics of projecting a computed field. Again this is fairly similar to inclusion','line_number':566,'multiline':False]['text':' projections but with a few interesting twists.','line_number':567,'multiline':False]['text':' Test some basic top-level flat examples.','line_number':569,'multiline':False]['text':' Test some dotted examples.','line_number':581,'multiline':False]['text':' One notable difference for computed projections is that they overwrite scalars rather than','line_number':587,'multiline':False]['text':' ignoring or removing them.','line_number':588,'multiline':False]['text':' Computed projections will traverse through double arrays and preserve structure. For example,','line_number':626,'multiline':False]['text':' we preserve two brackets inside the existing 'b: [[1,2]]' and leave the empty array in 'a'','line_number':627,'multiline':False]['text':' untouched rather than replace it with {b: {c: "new value"}}.','line_number':628,'multiline':False]['text':' Test that a numeric path component never describes an array index if used in a projection. We','line_number':639,'multiline':False]['text':' have the $slice operator for that functionality.','line_number':640,'multiline':False]['text':' Test some miscellaneous properties of projections.','line_number':673,'multiline':False]['text':' Test including and excluding _id only.','line_number':675,'multiline':False]['text':' Test that you can specify nested paths with dots or as sub-objects and it'll mean the','line_number':693,'multiline':False]['text':' same thing.','line_number':694,'multiline':False]['text':' Now with an exclusion projection.','line_number':709,'multiline':False]