['text':'*
 * When doing multi-update, we need to ensure that even if a record shows up in the scan multiple
 * times, we only update it once. Note: these tests don't verify the correctness of specific update
 * operators as it's done elsewhere.
 *
 * @tags: [
 *   requires_multi_updates,
 *   requires_non_retryable_writes,
 *   # 'upsert' requires a filter that includes the shard key, which is '_id' but for 'testUpsert()'
 *   # we need to ensure that either collscan or ixscan of a specific index are used.
 *   assumes_unsharded_collection
 * ]
 ','line_number':1,'multiline':True]['text':' Insert something into the collection, as update on empty collections might be optimized.','line_number':20,'multiline':False]['text':' Make sure the index is used.','line_number':28,'multiline':False]['text':' The upserted record matches the filter but shouldn't be re-updated.','line_number':32,'multiline':False]['text':' use collscan for the filter ','line_number':40,'multiline':True]['text':' use ixscan for the filter ','line_number':41,'multiline':True]['text':' The record that cannot be updated in-place (because adding a new field) should not show up','line_number':48,'multiline':False]['text':' again during the scan.','line_number':49,'multiline':False]['text':' The update of 'key' pushes the updated record "down" the index so it will reappear in the','line_number':62,'multiline':False]['text':' index scan.','line_number':63,'multiline':False]['text':' filter','line_number':64,'multiline':False]['text':' update','line_number':65,'multiline':False]['text':' options','line_number':66,'multiline':False]