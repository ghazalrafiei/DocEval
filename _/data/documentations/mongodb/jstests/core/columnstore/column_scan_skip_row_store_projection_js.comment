['text':'*
 * Tests that the row store expression is skipped when there is an appropriate group or projection
 * above a columnscan stage.
 *
 * @tags: [
 *   # Column store indexes are still under a feature flag.
 *   featureFlagColumnstoreIndexes,
 *   # explain is not supported in transactions
 *   does_not_support_transactions,
 *   requires_pipeline_optimization,
 *   # Runs explain on an aggregate command which is only compatible with readConcern local.
 *   assumes_read_concern_unchanged,
 *   # explain will be different in a sharded collection
 *   assumes_unsharded_collection,
 *   # Columnstore tests set server parameters to disable columnstore query planning heuristics -
 *   # 1) server parameters are stored in-memory only so are not transferred onto the recipient,
 *   # 2) server parameters may not be set in stepdown passthroughs because it is a command that may
 *   #      return different values after a failover
 *   tenant_migration_incompatible,
 *   does_not_support_stepdowns,
 *   not_allowed_with_signed_security_token,
 * ]
 ','line_number':1,'multiline':True]['text':' checkAllNodes ','line_number':30,'multiline':True]['text':' Check that columnstore index is used, and we skip the row store expression appropriately.','line_number':62,'multiline':False]['text':' entirely SBE plan','line_number':65,'multiline':False]['text':' SBE + classic plan','line_number':67,'multiline':False]['text':' Check the expected number of row store reads. The reads are triggered by encountering a','line_number':82,'multiline':False]['text':' record that cannot be reconstructed from the index and come in the form of a fetch followed','line_number':83,'multiline':False]['text':' by a few records scanned from the row store. The number of scanned records fluctuates','line_number':84,'multiline':False]['text':' depending on the settings and the data patterns so the only invariant we can assert is that','line_number':85,'multiline':False]['text':' the number of combined reads from the row store is at least as the number of "bad" records.','line_number':86,'multiline':False]['text':' Check that results are identical with and without columnstore index.','line_number':96,'multiline':False]['text':' $project only.  Requires row store expression regardless of nesting under the projected path.','line_number':104,'multiline':False]['text':' $group only.','line_number':108,'multiline':False]['text':' The 4 cases below provide the same coverage but illustrate when row store fetches are needed.','line_number':109,'multiline':False]['text':' $group and $project, including _id.','line_number':131,'multiline':False]['text':' The rowStoreExpr is needed to prevent the $group from seeing b.','line_number':138,'multiline':False]['text':' Same as above, but add another $group later that would be eligible for skipping the row store','line_number':148,'multiline':False]['text':' expression.','line_number':149,'multiline':False]['text':' $group and $project, excluding _id.','line_number':161,'multiline':False]['text':' Because _id is projected out, the $group will aggregate all docs together.  The rowStoreExpr','line_number':162,'multiline':False]['text':' must not be skipped or else $group will behave incorrectly.','line_number':163,'multiline':False]['text':' $match with a filter that can be pushed down.','line_number':170,'multiline':False]['text':' $match with no group, and non-output filter that can't be pushed down.','line_number':177,'multiline':False]['text':' $match with no group, and non-output filter that can be pushed down.','line_number':183,'multiline':False]['text':' $project inclusion followed by a $addFields which can be pushed into SBE should','line_number':190,'multiline':False]['text':' require a row store expression.','line_number':191,'multiline':False]['text':' Nested paths.','line_number':198,'multiline':False]['text':' The BrowserUsageByDistinctUserQuery that motivated this ticket is an example of this.','line_number':199,'multiline':False]['text':' BrowserUsageByDistinctUserQuery from ColumnStoreIndex.yml in the genny repo.','line_number':206,'multiline':False]['text':' $addFields is not implemented in SBE, so this will have an SBE plan + an agg pipeline.','line_number':207,'multiline':False]['text':' This query does not match our documents, but the test checks for row store expression','line_number':208,'multiline':False]['text':' elimination.','line_number':209,'multiline':False]['text':' Cases that may be improved by future work:','line_number':238,'multiline':False]['text':' The limit below creates a Query Solution Node between the column scan and the group.','line_number':240,'multiline':False]['text':' Our optimization is not clever enough to see that the limit QSN is irrelevant.','line_number':241,'multiline':False]['text':' ideally this would be false','line_number':244,'multiline':False]['text':' $match with a nested path filter than can be pushed down.','line_number':248,'multiline':False]['text':' This fails to even use the column store index.  It should be able to in the future.','line_number':249,'multiline':False]