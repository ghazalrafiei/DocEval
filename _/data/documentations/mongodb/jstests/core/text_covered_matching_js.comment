['text':'','line_number':1,'multiline':False]['text':' When a $text query includes an additional predicate that can be covered with a suffix of a $text','line_number':2,'multiline':False]['text':' index, we expect the query planner to attach that predicate as a "filter" to the TEXT_OR or OR or','line_number':3,'multiline':False]['text':' IXSCAN stage, so that it can be used to filter non-matching documents without fetching them.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' SERVER-26833 changes how the text index is searched in the case when the projection does not','line_number':6,'multiline':False]['text':' include the 'textScore' meta field, so we are adding this test to ensure that we still get the','line_number':7,'multiline':False]['text':' same covered matching behavior with and without 'textScore' in the projection.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' @tags: [','line_number':10,'multiline':False]['text':'   assumes_balancer_off,','line_number':11,'multiline':False]['text':'   assumes_read_concern_local,','line_number':12,'multiline':False]['text':' ]','line_number':13,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' Test the query {$text: {$search: "hello"}, b: 1} with and without the 'textScore' in the','line_number':26,'multiline':False]['text':' output.','line_number':27,'multiline':False]['text':'','line_number':28,'multiline':False]['text':' Expected result:','line_number':30,'multiline':False]['text':'   - We examine two keys, for the two documents with "hello" in their text;','line_number':31,'multiline':False]['text':'   - we examine only one document, because covered matching rejects the index entry for','line_number':32,'multiline':False]['text':'     which b != 1;','line_number':33,'multiline':False]['text':'   - we return exactly one document.','line_number':34,'multiline':False]['text':' If we are executing against a mongos, we have more than one occurrence of IXSCAN.','line_number':49,'multiline':False]['text':' When we include the text score in the projection, we use a TEXT_OR in our query plan, which','line_number':55,'multiline':False]['text':' changes how filtering is done. We should get the same result, however.','line_number':56,'multiline':False]['text':' When we search more than one term, we perform filtering in the OR stage rather than the','line_number':76,'multiline':False]['text':' underlying IXSCANs, but we should get an equivalent result.','line_number':77,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' Test the query {$text: {$search: "hello"}, c: 1} with and without the 'textScore' in the','line_number':95,'multiline':False]['text':' output.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' Expected result:','line_number':99,'multiline':False]['text':'   - We examine two keys, for the two documents with "hello" in their text;','line_number':100,'multiline':False]['text':'   - we examine more than just the matching document, because we need to fetch documents in','line_number':101,'multiline':False]['text':'     order to examine the non-covered 'c' field;','line_number':102,'multiline':False]['text':'   - we return exactly one document.','line_number':103,'multiline':False]['text':' As before, including the text score in the projection changes how filtering occurs, but we','line_number':117,'multiline':False]['text':' still expect the same result.','line_number':118,'multiline':False]['text':'','line_number':133,'multiline':False]['text':' Test the first query again, but this time, use dotted fields to make sure they don't confuse','line_number':134,'multiline':False]['text':' the query planner:','line_number':135,'multiline':False]['text':'   {$text: {$search: "hello"}, "b.d": 1}','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' Expected result:','line_number':144,'multiline':False]['text':'   - We examine two keys, for the two documents with "hello" in their text;','line_number':145,'multiline':False]['text':'   - we examine only one document, because covered matching rejects the index entry for','line_number':146,'multiline':False]['text':'     which b != 1;','line_number':147,'multiline':False]['text':'   - we return exactly one document.','line_number':148,'multiline':False]['text':' When we include the text score in the projection, we use a TEXT_OR in our query plan, which','line_number':162,'multiline':False]['text':' changes how filtering is done. We should get the same result, however.','line_number':163,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' Test the second query again, this time with dotted fields:','line_number':180,'multiline':False]['text':'   {$text: {$search: "hello"}, "c.e": 1}','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':' Expected result:','line_number':184,'multiline':False]['text':'   - We examine two keys, for the two documents with "hello" in their text;','line_number':185,'multiline':False]['text':'   - we examine more than just the matching document, because we need to fetch documents in','line_number':186,'multiline':False]['text':'     order to examine the non-covered 'c' field;','line_number':187,'multiline':False]['text':'   - we return exactly one document.','line_number':188,'multiline':False]['text':' As before, including the text score in the projection changes how filtering occurs, but we','line_number':202,'multiline':False]['text':' still expect the same result.','line_number':203,'multiline':False]