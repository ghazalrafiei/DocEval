['text':'*
 * Test to verify that null queries can be fully covered by an index.
 * @tags: [
 *   assumes_unsharded_collection,
 *   requires_non_retryable_writes,
 *   requires_fcv_62,
 *   # This test could produce unexpected explain output if additional indexes are created.
 *   assumes_no_implicit_index_creation,
 * ]
 ','line_number':1,'multiline':True]['text':'*
 * Validates that the explain() of command 'cmdObj' has the stages in 'expectedStages'.
 *
 * The field 'expectedStages' should be specified as an object with keys matching the stages
 * expected in the explain output and values indicating how many times each stage should be expected
 * to appear in the output (useful to verify if there are two COUNT_SCANS or that there are 0
 * IX_SCANS, for example).
 *
 * The field 'isAgg' is a boolean indicating whether or not the command is an aggregation.
 ','line_number':30,'multiline':True]['text':' useQueryPlannerSection ','line_number':44,'multiline':True]['text':' TODO SERVER-77719: Implement the assertion for CQF.','line_number':51,'multiline':False]['text':'*
 * Runs find command with the given 'filter' and 'projection' and validates that the output returned
 * matches 'expectedOutput'. Also runs explain() command on the same find command and validates that
 * all the 'expectedStages' are present in the plan returned.
 ','line_number':62,'multiline':True]['text':' Compare index output with expected output.','line_number':70,'multiline':False]['text':' Validate explain.','line_number':77,'multiline':False]['text':' Verify that we get the same output as we expect without an index.','line_number':80,'multiline':False]['text':'*
 * Runs count command with the 'filter' and validates that the output returned matches
 * 'expectedOutput'. Also runs explain() command and validates that all the 'expectedStages'
 * are present in the plan returned.
 ','line_number':87,'multiline':True]['text':' Compare index output with expected output.','line_number':93,'multiline':False]['text':' Validate explain.','line_number':98,'multiline':False]['text':' Verify that we get the same output with and without an index.','line_number':101,'multiline':False]['text':'*
 * Runs an aggregation with a $count stage with the 'filter' applied to the $match stage and
 * validates that the count returned matches 'expectedCount'. Also runs explain() command on the
 * and validates that all the 'expectedStages' are present in the plan returned.
 ','line_number':107,'multiline':True]['text':' Compare index output with expected output.','line_number':119,'multiline':False]['text':' Validate explain.','line_number':125,'multiline':False]['text':' Verify that we get the same output as we expect without an index.','line_number':128,'multiline':False]['text':'*
 * Same as above, but uses a $group count.
 ','line_number':136,'multiline':True]['text':' Verify count({a: null}) can be covered by an index. In the simplest case we can use two count','line_number':158,'multiline':False]['text':' scans joined by an OR to evaluate it.','line_number':159,'multiline':False]['text':' Verify $count stage in aggregation matching {a: null} yields the same plan.','line_number':166,'multiline':False]['text':' Verify find({a: null}, {_id: 1}) can be covered by an index.','line_number':173,'multiline':False]['text':' Verify that the above queries can be covered by an index when the predicate is a $in. These are','line_number':181,'multiline':False]['text':' not supported by a COUNT_SCAN because they are not the strict null equality predicate.','line_number':182,'multiline':False]['text':' Same as above, but using a different ordering in the $in clause.','line_number':200,'multiline':False]['text':' We can cover a $in with null and an empty array predicate.','line_number':213,'multiline':False]['text':' We cannot cover a $in with null and an array predicate.','line_number':226,'multiline':False]['text':' TODO SERVER-71058: It should be possible to cover this case and the more general case of matching','line_number':227,'multiline':False]['text':' an array on a non-multikey index.','line_number':228,'multiline':False]['text':' Verify that a more complex projection that only relies on the _id field does not need a FETCH.','line_number':241,'multiline':False]['text':' Verify that a more complex projection that computes a new field based on _id but excludes the _id','line_number':250,'multiline':False]['text':' field does not require a fetch stage.','line_number':251,'multiline':False]['text':' Verify that a more complex projection that relies on any non-_id field does need a FETCH.','line_number':259,'multiline':False]['text':' Verify that an exclusion projection does need a FETCH.','line_number':272,'multiline':False]['text':' Verify find({a: null}, {_id: 1, b: 1}) is not covered by an index so we still have a FETCH stage.','line_number':280,'multiline':False]['text':' Verify find({a: null}, {a: 1}) still has a FETCH stage because the index alone cannot determine','line_number':294,'multiline':False]['text':' if the value of field a is null, undefined, or missing.','line_number':295,'multiline':False]['text':' For exclusion projects we always need a FETCH stage.','line_number':309,'multiline':False]['text':' Verify that if the index is multikey, this optimization cannot be applied when just querying for','line_number':317,'multiline':False]['text':' null values, as the index alone cannot differentiate between null and [].','line_number':318,'multiline':False]['text':' Verify that if the index is multikey and the query searches for null and empty array values, then','line_number':362,'multiline':False]['text':' the find does not require a FETCH stage, and a count can replace the IXSCAN with three','line_number':363,'multiline':False]['text':' COUNT_SCANS joined by an OR.','line_number':364,'multiline':False]['text':' Same as above, but using a different ordering in the $in clause.','line_number':382,'multiline':False]['text':' Verify that the same optimization is supported when using $or syntax.','line_number':395,'multiline':False]['text':' Same as above, but using a different ordering in the $in clauses.','line_number':413,'multiline':False]['text':' Verify that if the index is multikey and the query searches for null, empty array, and other','line_number':426,'multiline':False]['text':' values, then it does not require a FETCH, but we cannot replace the IXSCAN with COUNTs.','line_number':427,'multiline':False]['text':' Verify that if the index is multikey and the query searches for null and empty array values, we','line_number':446,'multiline':False]['text':' still fetch when projecting a field other than _id.','line_number':447,'multiline':False]['text':' Verify that if the index is multikey and compound and the query matches null and empty array','line_number':480,'multiline':False]['text':' values, then it does not require a FETCH stage and can replace the IXSCAN with COUNTs.','line_number':481,'multiline':False]['text':' Verify that if the index is multikey and compound and the query has an added compound predicate,','line_number':499,'multiline':False]['text':' then it does not require a FETCH and can replace the IXSCAN with COUNTs.','line_number':500,'multiline':False]['text':' Verify if the index is multikey and compound and the query searches for null, empty array, and','line_number':534,'multiline':False]['text':' other values, then it does not require a FETCH, but we cannot replace the IXSCAN with COUNTs.','line_number':535,'multiline':False]['text':' Same as above, but using a different ordering in the $in clauses.','line_number':553,'multiline':False]['text':' Verify if the index is multikey and compound and the query searches for null, empty array, and','line_number':566,'multiline':False]['text':' other values for multiple fields, then it does not require a FETCH but cannot replace the IXSCAN','line_number':567,'multiline':False]['text':' with COUNTs because there are multiple null intervals or because the intervals are complex.','line_number':568,'multiline':False]['text':' Verify if the index is multikey and compound, the query predicate must match null and empty array','line_number':590,'multiline':False]['text':' values for all queried fields.','line_number':591,'multiline':False]['text':' Same as above but when the index is not multikey. In this case, we can cover the query, but we','line_number':600,'multiline':False]['text':' cannot do the COUNT_SCAN optimization because there are multiple null intervals.','line_number':601,'multiline':False]['text':' Test case when query is fully covered but we still need to fetch to correctly project a field.','line_number':616,'multiline':False]['text':' Test case when query is fully covered but predicate is not a single interval.','line_number':632,'multiline':False]['text':' Note that we can't use a COUNT_SCAN here because we have a complex interval.','line_number':641,'multiline':False]['text':' Test case when counting nulls where documents are sorted in the opposite direction as the index.','line_number':687,'multiline':False]['text':' Sort by field a in the opposite direction of the index. ','line_number':693,'multiline':True]['text':' Test case when query is fully covered, predicate is not a single interval, and the index does not','line_number':697,'multiline':False]['text':' include the _id field. A find projection in this case will not be covered, but any count should','line_number':698,'multiline':False]['text':' be covered.','line_number':699,'multiline':False]['text':' Note that we can't use a COUNT_SCAN here because we have a complex interval.','line_number':708,'multiline':False]['text':' Test index intersection plan.','line_number':720,'multiline':False]['text':' Verify the case where id field is accessed along a dotted path.','line_number':737,'multiline':False]['text':' We still need a FETCH in this case because the index cannot differentiate between null and','line_number':738,'multiline':False]['text':' missing values within _id, e.g. {_id: {x: null}} vs. {_id: {}} would both be returned as','line_number':739,'multiline':False]['text':' {_id: {x: null}} by the index.','line_number':740,'multiline':False]['text':' Validate that we can use the optimization when we have regex without array elements in a $in or','line_number':768,'multiline':False]['text':' $or. See SERVER-70436 for more details.','line_number':769,'multiline':False]['text':' TODO SERVER-70998: Can apply optimization in case without regex; however, we still can't use a','line_number':784,'multiline':False]['text':' COUNT_SCAN in this case.','line_number':785,'multiline':False]['text':' Can still apply optimization when we have regex.','line_number':803,'multiline':False]['text':' Now test case with a multikey index. We can't leverage the optimization here.','line_number':821,'multiline':False]['text':' We also shouldn't cover queries on multikey indexes where $in includes an array, as we will still','line_number':842,'multiline':False]['text':' need a filter after the IXSCAN to correctly return','line_number':843,'multiline':False]['text':' Validate that when we have a dotted path, we return the correct results for null queries.','line_number':861,'multiline':False]['text':' Still need fetch if we don't have a sufficiently restrictive projection.','line_number':907,'multiline':False]['text':' Make index multikey, and test case where field b is nested in an array.','line_number':921,'multiline':False]['text':' We still need a FETCH for composite paths, because both {a: [1,2,3]} and {"a.b": null} generate','line_number':999,'multiline':False]['text':' null index keys, but the former should not match the predicate below.','line_number':1000,'multiline':False]