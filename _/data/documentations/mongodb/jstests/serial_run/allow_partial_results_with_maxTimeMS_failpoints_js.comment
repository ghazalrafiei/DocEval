['text':'*
 * SERVER-57469: Test that the 'allowPartialResults' option to find is respected when used together
 * with 'maxTimeMS' and only a subset of the shards provide data before the timeout.
 * Uses three methods to simulate MaxTimeMSExpired: failpoints, MongoBridge, and $where + sleep.
 *
 * This is in the serial_run suite because the tests using MongoBridge and $where + sleep depend on
 * certain work being completed before a maxTimeMS timeout.
 *
 *  @tags: [
 *   requires_sharding,
 *   requires_replication,
 *   requires_getmore,
 *   requires_fcv_62,
 *  ]
 ','line_number':1,'multiline':True]['text':' Set up a 2-shard single-node replicaset cluster with MongoBridge.','line_number':65,'multiline':False]['text':' Use ranged sharding with a specified fraction of the data on the second shard.','line_number':76,'multiline':False]['text':' shard key','line_number':79,'multiline':False]['text':' split point','line_number':80,'multiline':False]['text':' move the chunk to the other shard','line_number':81,'multiline':False]['text':' Insert some data.','line_number':91,'multiline':False]['text':' We will sometimes use $where expressions to inject delays in processing documents on some shards.','line_number':96,'multiline':False]['text':' Maps from shard to a snippet of JS code.  This is modified by FindWhereSleepController','line_number':97,'multiline':False]['text':' Set ampleTimeMS to at least 2000ms, plus ten times the basic query runtime.','line_number':119,'multiline':False]['text':' This timeout must provide ample time for our queries to run to completion, even on passthrough','line_number':120,'multiline':False]['text':' suites with resource contention.','line_number':121,'multiline':False]['text':' Try to fetch all the data in one batch, with ample time allowed.','line_number':125,'multiline':False]['text':' Simulate mongos timeout during first batch.','line_number':130,'multiline':False]['text':' Shards have no results yet, so we do not return partial results.','line_number':131,'multiline':False]['text':' With 'allowPartialResults: false', if mongos times out then return a timeout error.','line_number':134,'multiline':False]['text':' With 'allowPartialResults: true', if mongos times out then return a timeout error.','line_number':136,'multiline':False]['text':' Simulate mongos timeout during getMore.','line_number':141,'multiline':False]['text':' Get the first batch.  Disable MaxTimeMSExpired during the intial find.','line_number':143,'multiline':False]['text':' Stop mongos and run getMore.','line_number':155,'multiline':False]['text':' Run getmores repeatedly until we exhaust the cache on mongos.','line_number':158,'multiline':False]['text':' Eventually we should get either a MaxTimeMS error or partial results because a shard is down.','line_number':159,'multiline':False]['text':' One batch was returned so far.','line_number':160,'multiline':False]['text':' Results were cached from the first request. As long as GetMore is not called, these','line_number':169,'multiline':False]['text':' are returned even if MaxTimeMS expired on mongos.','line_number':170,'multiline':False]['text':' Run the getMore tests with two batch sizes.','line_number':183,'multiline':False]['text':' In the first case, we have (splitPoint % batchSizeForGetMore == 0) and the getMores will likely','line_number':184,'multiline':False]['text':' exhaust the live shard without requiring any data from the dead shard.  When the getMore to','line_number':185,'multiline':False]['text':' the dead shard times out, it will be the only unexhausted remote.','line_number':186,'multiline':False]['text':' In the second case, choosing (splitPoint % batchSizeForGetMore != 0) the final getMore will be','line_number':187,'multiline':False]['text':' requesting data from both shards. Data from the live shard should be returned despite the dead','line_number':188,'multiline':False]['text':' shard timing out.','line_number':189,'multiline':False]['text':' Test shard timeouts.  These are the scenario that we expect to be likely in practice.','line_number':210,'multiline':False]['text':' Test using 3 different types of simulated timeouts, giving slightly different execution paths.','line_number':211,'multiline':False]['text':' Delay messages from mongos to shard so that mongos will see it as having exceeded','line_number':235,'multiline':False]['text':' MaxTimeMS. The shard process is active and receives the request, but the response is','line_number':236,'multiline':False]['text':' lost. We delay instead of dropping messages because this lets the shard request proceed','line_number':237,'multiline':False]['text':' without connection failure and retry (which has its own driver-controlled timeout,','line_number':238,'multiline':False]['text':' typically 15s).','line_number':239,'multiline':False]['text':' Allow time for delayed messages to be flushed so that the next request is not delayed.','line_number':245,'multiline':False]['text':' Add a $where expression to find command that sleeps when processing a document on the','line_number':256,'multiline':False]['text':' shard of interest.','line_number':257,'multiline':False]['text':' Offset the slowDocId by at least the getMore batch size so that when testing getMore,','line_number':259,'multiline':False]['text':' we quickly return enough documents to serve the first batch without timing out.','line_number':260,'multiline':False]['text':' Due to the hack with sleepFailures below, this has to be the innermost parameterizing function.','line_number':283,'multiline':False]['text':' The FindWhereSleepFailureController must be set before the first "find" because that's when','line_number':289,'multiline':False]['text':' the $where clause is set.','line_number':290,'multiline':False]['text':' Get the first batch.','line_number':306,'multiline':False]['text':' We are giving this query ample time and no failures are enabled so we don't expect a timeout','line_number':308,'multiline':False]['text':' on the initial find.  However, to be safe, set failpoints to ensure that MaxTimeMS is','line_number':309,'multiline':False]['text':' ignored for the initial find, to avoid failing in cases of resource contention (BF-26792).','line_number':310,'multiline':False]['text':' FindWhereSleepController only works with getMore if docs are _id-ordered.  We use a hint','line_number':315,'multiline':False]['text':' instead of sort here because we want to avoid blocking on missing docs -- we want the','line_number':316,'multiline':False]['text':' AsyncResultsMerger to return results from the live shard while the other is failing.','line_number':317,'multiline':False]['text':' Stop a shard and run getMore.','line_number':327,'multiline':False]['text':' One batch was returned so far.','line_number':329,'multiline':False]['text':' Run getmores repeatedly until we exhaust the cache on mongos.','line_number':332,'multiline':False]['text':' Eventually we should get partial results or an error because a shard is down.','line_number':333,'multiline':False]['text':' With 'allowPartialResults: true', if a shard times out on the first batch then return','line_number':365,'multiline':False]['text':' partial results.','line_number':366,'multiline':False]['text':' With 'allowPartialResults: false', if one shard times out then return a timeout error.','line_number':377,'multiline':False]['text':' With 'allowPartialResults: false', if both shards time out then return a timeout error.','line_number':385,'multiline':False]['text':' With 'allowPartialResults: true', if both shards time out then return empty "partial" results.','line_number':393,'multiline':False]