['text':'*
 * Test that an aggregation with a $out stage obeys the maxTimeMS.
 * @tags: [
 *   requires_replication,
 *   requires_sharding,
 * ]
 ','line_number':1,'multiline':True]['text':' Picked `1000` documents to force the `$out` stage to write several batches.','line_number':13,'multiline':False]['text':'*
 * Helper for populating the collection.
 ','line_number':16,'multiline':True]['text':' A list of connections to all the nodes currently being used by the test.','line_number':25,'multiline':False]['text':'*
 * Prevents premature maxTimeMS expiration by enabling the "maxTimeNeverTimeOut" failpoint on each
 * node under test.
 ','line_number':28,'multiline':True]['text':'*
 * Given a mongod connection, run a $out aggregation against 'conn'. Set the provided failpoint on
 * the node specified by 'failPointConn' in order to hang during the aggregate. Ensure that the $out
 * maxTimeMS expires on the node specified by 'maxTimeMsConn'.
 ','line_number':39,'multiline':True]['text':' Use a short maxTimeMS so that the test completes in a reasonable amount of time. We will','line_number':46,'multiline':False]['text':' use the 'maxTimeNeverTimeOut' failpoint to ensure that the operation does not prematurely','line_number':47,'multiline':False]['text':' time out.','line_number':48,'multiline':False]['text':' Enable a failPoint so that the write will hang.','line_number':51,'multiline':False]['text':' Make sure we don't run out of time on any of the involved nodes before the failpoint is hit.','line_number':59,'multiline':False]['text':' Build the parallel shell function.','line_number':62,'multiline':False]['text':' eslint-disable ','line_number':67,'multiline':True]['text':' eslint-enable ','line_number':75,'multiline':True]['text':' The aggregation running in the parallel shell will hang on the failpoint, burning','line_number':84,'multiline':False]['text':' its time. Wait until the maxTimeMS has definitely expired.','line_number':85,'multiline':False]['text':' Now drop the failpoint, allowing the aggregation to proceed. It should hit an','line_number':88,'multiline':False]['text':' interrupt check and terminate immediately.','line_number':89,'multiline':False]['text':' Wait for the parallel shell to finish.','line_number':93,'multiline':False]['text':'*
 * Run a $out aggregate against the node specified by 'conn' with primary 'primaryConn' (these may
 * be the same node). Verify that maxTimeMS properly times out the aggregate on the node specified
 * by 'maxTimeMsConn' both while hanging on the insert/update on 'primaryConn' and while hanging on
 * the batch being built on 'conn'.
 ','line_number':97,'multiline':True]['text':' Be sure we're able to read from a cursor with a maxTimeMS set on it.','line_number':110,'multiline':False]['text':' Use a long maxTimeMS, since we expect the operation to finish.','line_number':112,'multiline':False]['text':' Force the aggregation to hang while the batch is being written.','line_number':122,'multiline':False]['text':' Force the aggregation to hang while the batch is being built.','line_number':129,'multiline':False]['text':' Run on a standalone.','line_number':134,'multiline':False]['text':' Run on the primary and the secondary of a replica set.','line_number':144,'multiline':False]['text':' Run the $out on the primary and test that the maxTimeMS times out on the primary.','line_number':154,'multiline':False]['text':' Run the $out on the secondary and test that the maxTimeMS times out on the primary.','line_number':156,'multiline':False]['text':' Run the $out on the secondary and test that the maxTimeMS times out on the secondary.','line_number':158,'multiline':False]