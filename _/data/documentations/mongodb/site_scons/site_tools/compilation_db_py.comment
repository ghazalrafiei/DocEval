['text':' Copyright 2020 MongoDB Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Permission is hereby granted, free of charge, to any person obtaining','line_number':3,'multiline':False]['text':' a copy of this software and associated documentation files (the','line_number':4,'multiline':False]['text':' "Software"), to deal in the Software without restriction, including','line_number':5,'multiline':False]['text':' without limitation the rights to use, copy, modify, merge, publish,','line_number':6,'multiline':False]['text':' distribute, sublicense, and/or sell copies of the Software, and to','line_number':7,'multiline':False]['text':' permit persons to whom the Software is furnished to do so, subject to','line_number':8,'multiline':False]['text':' the following conditions:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' The above copyright notice and this permission notice shall be included','line_number':11,'multiline':False]['text':' in all copies or substantial portions of the Software.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY','line_number':14,'multiline':False]['text':' KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE','line_number':15,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND','line_number':16,'multiline':False]['text':' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE','line_number':17,'multiline':False]['text':' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION','line_number':18,'multiline':False]['text':' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION','line_number':19,'multiline':False]['text':' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' Implements the ability for SCons to emit a compilation database for the MongoDB project. See','line_number':28,'multiline':False]['text':' http://clang.llvm.org/docs/JSONCompilationDatabase.html for details on what a compilation','line_number':29,'multiline':False]['text':' database is, and why you might want one. The only user visible entry point here is','line_number':30,'multiline':False]['text':' 'env.CompilationDatabase'. This method takes an optional 'target' to name the file that','line_number':31,'multiline':False]['text':' should hold the compilation database, otherwise, the file defaults to compile_commands.json,','line_number':32,'multiline':False]['text':' which is the name that most clang tools search for by default.','line_number':33,'multiline':False]['text':' TODO: Is there a better way to do this than this global? Right now this exists so that the','line_number':35,'multiline':False]['text':' emitter we add can record all of the things it emits, so that the scanner for the top level','line_number':36,'multiline':False]['text':' compilation database can access the complete list, and also so that the writer has easy','line_number':37,'multiline':False]['text':' access to write all of the files. But it seems clunky. How can the emitter and the scanner','line_number':38,'multiline':False]['text':' communicate more gracefully?','line_number':39,'multiline':False]['text':' Cribbed from Tool/cc.py and Tool/c++.py. It would be better if','line_number':42,'multiline':False]['text':' we could obtain this from SCons.','line_number':43,'multiline':False]['text':' We make no effort to avoid rebuilding the entries. Someday, perhaps we could and even','line_number':53,'multiline':False]['text':' integrate with the cache, but there doesn't seem to be much call for it.','line_number':54,'multiline':False]['text':' TODO: Technically, these next two lines should not be required: it should be fine to','line_number':97,'multiline':False]['text':' cache the entries. However, they don't seem to update properly. Since they are quick','line_number':98,'multiline':False]['text':' to re-generate disable caching and sidestep this problem.','line_number':99,'multiline':False]['text':' We will do some surgery on the command line. First we separate the args','line_number':127,'multiline':False]['text':' into a list, then we determine the index of the corresponding compiler','line_number':128,'multiline':False]['text':' value. Then we can extract a list of things before the compiler where are','line_number':129,'multiline':False]['text':' wrappers would be found. We extract the wrapper and put the command back','line_number':130,'multiline':False]['text':' together.','line_number':131,'multiline':False]['text':' Assumes a dictionary emitter','line_number':217,'multiline':False]