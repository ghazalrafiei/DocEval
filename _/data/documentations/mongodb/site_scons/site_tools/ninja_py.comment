['text':' Copyright 2020 MongoDB Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Permission is hereby granted, free of charge, to any person obtaining','line_number':3,'multiline':False]['text':' a copy of this software and associated documentation files (the','line_number':4,'multiline':False]['text':' "Software"), to deal in the Software without restriction, including','line_number':5,'multiline':False]['text':' without limitation the rights to use, copy, modify, merge, publish,','line_number':6,'multiline':False]['text':' distribute, sublicense, and/or sell copies of the Software, and to','line_number':7,'multiline':False]['text':' permit persons to whom the Software is furnished to do so, subject to','line_number':8,'multiline':False]['text':' the following conditions:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' The above copyright notice and this permission notice shall be included','line_number':11,'multiline':False]['text':' in all copies or substantial portions of the Software.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY','line_number':14,'multiline':False]['text':' KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE','line_number':15,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND','line_number':16,'multiline':False]['text':' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE','line_number':17,'multiline':False]['text':' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION','line_number':18,'multiline':False]['text':' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION','line_number':19,'multiline':False]['text':' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' These are the types that get_command can do something with','line_number':54,'multiline':False]['text':' implicit explicitly omitted, we translate these so they can be','line_number':94,'multiline':False]['text':' used by anything that depends on these but commonly this is','line_number':95,'multiline':False]['text':' hit with a node that will depend on all of the fake','line_number':96,'multiline':False]['text':' srcnode's that SCons will never give us a rule for leading','line_number':97,'multiline':False]['text':' to an invalid ninja file.','line_number':98,'multiline':False]['text':' On Windows mkdir "-p" is always on','line_number':100,'multiline':False]['text':' Some Nodes (e.g. Python.Value Nodes) won't have files associated. We allow these to be','line_number':196,'multiline':False]['text':' optionally skipped to enable the case where we will re-invoke SCons for things','line_number':197,'multiline':False]['text':' like TEMPLATE. Otherwise, we have no direct way to express the behavior for such','line_number':198,'multiline':False]['text':' Nodes in Ninja, so we raise a hard error','line_number':199,'multiline':False]['text':' convert node items into raw paths/aliases for ninja','line_number':214,'multiline':False]['text':' subst_list will take in either a raw list or a subst callable which generates','line_number':244,'multiline':False]['text':' a list, and return a list of CmdStringHolders which can be converted into raw strings.','line_number':245,'multiline':False]['text':' If a raw list was passed in, then scons_list will make a list of lists from the original','line_number':246,'multiline':False]['text':' values and even subst items in the list if they are substitutable. Flatten will flatten','line_number':247,'multiline':False]['text':' the list in that case, to ensure for either input we have a list of CmdStringHolders.','line_number':248,'multiline':False]['text':' Now that we have the deps in a list as CmdStringHolders, we can convert them into raw strings','line_number':251,'multiline':False]['text':' and make sure to escape the strings to handle spaces in paths. We also will sort the result','line_number':252,'multiline':False]['text':' keep the order of the list consistent.','line_number':253,'multiline':False]['text':' Occasionally a command line will expand to a','line_number':274,'multiline':False]['text':' whitespace only string (i.e. '  '). Which is not a','line_number':275,'multiline':False]['text':' valid command but does not trigger the empty command','line_number':276,'multiline':False]['text':' condition if not cmdstr. So here we trim the whitespace','line_number':277,'multiline':False]['text':' to make strings like the above become empty strings and','line_number':278,'multiline':False]['text':' so they will be skipped.','line_number':279,'multiline':False]['text':' Skip duplicate commands','line_number':284,'multiline':False]['text':' Remove all preceding and proceeding whitespace','line_number':293,'multiline':False]['text':' Skip conftest builders','line_number':305,'multiline':False]['text':' SCons has a custom FunctionAction that just makes sure the','line_number':307,'multiline':False]['text':' target isn't static. We let the commands that ninja runs do','line_number':308,'multiline':False]['text':' this check for us.','line_number':309,'multiline':False]['text':' The install builder is implemented as a function action.','line_number':311,'multiline':False]['text':' Ideally this should never happen, and we do try to filter','line_number':337,'multiline':False]['text':' Ninja builders out of being sources of ninja builders but I','line_number':338,'multiline':False]['text':' can't fix every DAG problem so we just skip ninja_builders','line_number':339,'multiline':False]['text':' if we find one','line_number':340,'multiline':False]['text':' pylint: disable=protected-access','line_number':346,'multiline':False]['text':' This is the name given by the Subst/Textfile builders. So return the','line_number':374,'multiline':False]['text':' node to indicate that SCons is required. We skip sources here because','line_number':375,'multiline':False]['text':' dependencies don't really matter when we're going to shove these to','line_number':376,'multiline':False]['text':' the bottom of ninja's DAG anyway and Textfile builders can have text','line_number':377,'multiline':False]['text':' content as their source which doesn't work as an implicit dep in','line_number':378,'multiline':False]['text':' ninja. We suppress errors on input Nodes types that we cannot handle','line_number':379,'multiline':False]['text':' since we expect that the re-invocation of SCons will handle dependency','line_number':380,'multiline':False]['text':' tracking for those Nodes and their dependents.','line_number':381,'multiline':False]['text':' No need to process the results if we only got a single result','line_number':409,'multiline':False]['text':' Make sure we didn't generate an empty cmdline','line_number':419,'multiline':False]['text':' Make sure we didn't generate an empty cmdline','line_number':444,'multiline':False]['text':' List of generated builds that will be written at a later stage','line_number':488,'multiline':False]['text':' List of targets for which we have generated a build. This','line_number':491,'multiline':False]['text':' allows us to take multiple Alias nodes as sources and to not','line_number':492,'multiline':False]['text':' fail to build if they have overlapping targets.','line_number':493,'multiline':False]['text':' SCons sets this variable to a function which knows how to do','line_number':496,'multiline':False]['text':' shell quoting on whatever platform it's run on. Here we use it','line_number':497,'multiline':False]['text':' to make the SCONS_INVOCATION variable properly quoted for things','line_number':498,'multiline':False]['text':' like CCFLAGS','line_number':499,'multiline':False]['text':' The /b option here will make sure that windows updates the mtime','line_number':503,'multiline':False]['text':' when copying the file. This allows to not need to use restat for windows','line_number':504,'multiline':False]['text':' copy commands.','line_number':505,'multiline':False]['text':' This must be set to a global default per:','line_number':522,'multiline':False]['text':' https://ninja-build.org/manual.html','line_number':523,'multiline':False]['text':'','line_number':524,'multiline':False]['text':' (The deps section)','line_number':525,'multiline':False]['text':' We add the deps processing variables to this below. We','line_number':536,'multiline':False]['text':' don't pipe these through cmd.exe on Windows because we','line_number':537,'multiline':False]['text':' use this to generate a compile_commands.json database','line_number':538,'multiline':False]['text':' which can't use the shell command as it's compile','line_number':539,'multiline':False]['text':' command.','line_number':540,'multiline':False]['text':' restat','line_number':611,'multiline':False]['text':'    if present, causes Ninja to re-stat the command's outputs','line_number':612,'multiline':False]['text':'    after execution of the command. Each output whose','line_number':613,'multiline':False]['text':'    modification time the command did not change will be','line_number':614,'multiline':False]['text':'    treated as though it had never needed to be built. This','line_number':615,'multiline':False]['text':'    may cause the output's reverse dependencies to be removed','line_number':616,'multiline':False]['text':'    from the list of pending build actions.','line_number':617,'multiline':False]['text':'','line_number':618,'multiline':False]['text':' We use restat any time we execute SCons because','line_number':619,'multiline':False]['text':' SCons calls in Ninja typically create multiple','line_number':620,'multiline':False]['text':' targets. But since SCons is doing it's own up to','line_number':621,'multiline':False]['text':' date-ness checks it may only update say one of','line_number':622,'multiline':False]['text':' them. Restat will find out which of the multiple','line_number':623,'multiline':False]['text':' build targets did actually change then only rebuild','line_number':624,'multiline':False]['text':' those targets which depend specifically on that','line_number':625,'multiline':False]['text':' output.','line_number':626,'multiline':False]['text':' Console pool restricts to 1 job running at a time,','line_number':634,'multiline':False]['text':' it additionally has some special handling about','line_number':635,'multiline':False]['text':' passing stdin, stdout, etc to process in this pool','line_number':636,'multiline':False]['text':' that we need for SCons to behave correctly when','line_number':637,'multiline':False]['text':' regenerating Ninja','line_number':638,'multiline':False]['text':' Again we restat in case Ninja thought the','line_number':640,'multiline':False]['text':' build.ninja should be regenerated but SCons knew','line_number':641,'multiline':False]['text':' better.','line_number':642,'multiline':False]['text':' Some things are unbuild-able or need not be built in Ninja','line_number':683,'multiline':False]['text':' This version is needed because it is easy to get from pip and it support compile_commands.json','line_number':725,'multiline':False]['text':' This is the command that is used to clean a target before building it,','line_number':736,'multiline':False]['text':' excluding precious targets.','line_number':737,'multiline':False]['text':' Make two sets of rules to honor scons Precious setting. The build nodes themselves','line_number':745,'multiline':False]['text':' will then reselect their rule according to the precious being set for that node.','line_number':746,'multiline':False]['text':' Do not worry about precious for commands that don't have targets (phony)','line_number':751,'multiline':False]['text':' or that will callback to scons (which maintains its own precious).','line_number':752,'multiline':False]['text':' If the user supplied an alias to determine generated sources, use that, otherwise','line_number':765,'multiline':False]['text':' determine what the generated sources are dynamically.','line_number':766,'multiline':False]['text':' First find builds which have header files in their outputs.','line_number':788,'multiline':False]['text':' Collect only the header files from the builds with them','line_number':791,'multiline':False]['text':' in their output. We do this because is_generated_source','line_number':792,'multiline':False]['text':' returns True if it finds a header in any of the outputs,','line_number':793,'multiline':False]['text':' here we need to filter so we only have the headers and','line_number':794,'multiline':False]['text':' not the other outputs.','line_number':795,'multiline':False]['text':' If we ever change the name/s of the rules that include','line_number':815,'multiline':False]['text':' compile commands (i.e. something like CC) we will need to','line_number':816,'multiline':False]['text':' update this build to reflect that complete list.','line_number':817,'multiline':False]['text':' Now for all build nodes, we want to select the precious rule or not.','line_number':842,'multiline':False]['text':' If it's not precious, we need to save all the outputs into a variable','line_number':843,'multiline':False]['text':' on that node. Later we will be removing outputs and switching them to','line_number':844,'multiline':False]['text':' phonies so that we can generate response and depfiles correctly.','line_number':845,'multiline':False]['text':' Don't make generated sources depend on each other. We','line_number':862,'multiline':False]['text':' have to check that none of the outputs are generated','line_number':863,'multiline':False]['text':' sources and none of the direct implicit dependencies are','line_number':864,'multiline':False]['text':' generated sources or else we will create a dependency','line_number':865,'multiline':False]['text':' cycle.','line_number':866,'multiline':False]['text':' Make all non-generated source targets depend on','line_number':876,'multiline':False]['text':' _generated_sources. We use order_only for generated','line_number':877,'multiline':False]['text':' sources so that we don't rebuild the world if one','line_number':878,'multiline':False]['text':' generated source was rebuilt. We just need to make','line_number':879,'multiline':False]['text':' sure that all of these sources are generated before','line_number':880,'multiline':False]['text':' other builds.','line_number':881,'multiline':False]['text':' When using a depfile Ninja can only have a single output','line_number':888,'multiline':False]['text':' but SCons will usually have emitted an output for every','line_number':889,'multiline':False]['text':' thing a command will create because it's caching is much','line_number':890,'multiline':False]['text':' more complex than Ninja's. This includes things like DWO','line_number':891,'multiline':False]['text':' files. Here we make sure that Ninja only ever sees one','line_number':892,'multiline':False]['text':' target when using a depfile. It will still have a command','line_number':893,'multiline':False]['text':' that will create all of the outputs but most targets don't','line_number':894,'multiline':False]['text':' depend direclty on DWO files and so this assumption is safe','line_number':895,'multiline':False]['text':' to make.','line_number':896,'multiline':False]['text':' Some rules like 'phony' and other builtins we don't have','line_number':899,'multiline':False]['text':' listed in self.rules so verify that we got a result','line_number':900,'multiline':False]['text':' before trying to check if it has a deps key.','line_number':901,'multiline':False]['text':'','line_number':902,'multiline':False]['text':' Anything using deps or rspfile in Ninja can only have a single','line_number':903,'multiline':False]['text':' output, but we may have a build which actually produces','line_number':904,'multiline':False]['text':' multiple outputs which other targets can depend on. Here we','line_number':905,'multiline':False]['text':' slice up the outputs so we have a single output which we will','line_number':906,'multiline':False]['text':' use for the "real" builder and multiple phony targets that','line_number':907,'multiline':False]['text':' match the file names of the remaining outputs. This way any','line_number':908,'multiline':False]['text':' build can depend on any output from any build.','line_number':909,'multiline':False]['text':'','line_number':910,'multiline':False]['text':' We assume that the first listed output is the 'key'','line_number':911,'multiline':False]['text':' output and is stably presented to us by SCons. For','line_number':912,'multiline':False]['text':' instance if -gsplit-dwarf is in play and we are','line_number':913,'multiline':False]['text':' producing foo.o and foo.dwo, we expect that outputs[0]','line_number':914,'multiline':False]['text':' from SCons will be the foo.o file and not the dwo','line_number':915,'multiline':False]['text':' file. If instead we just sorted the whole outputs array,','line_number':916,'multiline':False]['text':' we would find that the dwo file becomes the','line_number':917,'multiline':False]['text':' first_output, and this breaks, for instance, header','line_number':918,'multiline':False]['text':' dependency scanning.','line_number':919,'multiline':False]['text':' Optionally a rule can specify a depfile, and SCons can generate implicit','line_number':936,'multiline':False]['text':' dependencies into the depfile. This allows for dependencies to come and go','line_number':937,'multiline':False]['text':' without invalidating the ninja file. The depfile was created in ninja specifically','line_number':938,'multiline':False]['text':' for dealing with header files appearing and disappearing across rebuilds, but it can','line_number':939,'multiline':False]['text':' be repurposed for anything, as long as you have a way to regenerate the depfile.','line_number':940,'multiline':False]['text':' More specific info can be found here: https://ninja-build.org/manual.html#_depfile','line_number':941,'multiline':False]['text':' the tool list is stored in the rule variable, so remove any wrappers we find.','line_number':962,'multiline':False]['text':' Special handling for outputs and implicit since we need to','line_number':976,'multiline':False]['text':' aggregate not replace for each builder.','line_number':977,'multiline':False]['text':' Use pop so the key is removed and so the update','line_number':981,'multiline':False]['text':' below will not overwrite our aggregated values.','line_number':982,'multiline':False]['text':' We have to glob the SCons files here to teach the ninja file','line_number':993,'multiline':False]['text':' how to regenerate itself. We'll never see ourselves in the','line_number':994,'multiline':False]['text':' DAG walk so we can't rely on action_to_ninja_build to','line_number':995,'multiline':False]['text':' generate this rule even though SCons should know we're','line_number':996,'multiline':False]['text':' dependent on SCons files.','line_number':997,'multiline':False]['text':'','line_number':998,'multiline':False]['text':' The REGENERATE rule uses depfile, so we need to generate the depfile','line_number':999,'multiline':False]['text':' in case any of the SConscripts have changed. The depfile needs to be','line_number':1000,'multiline':False]['text':' path with in the build and the passed ninja file is an abspath, so','line_number':1001,'multiline':False]['text':' we will use SCons to give us the path within the build. Normally','line_number':1002,'multiline':False]['text':' generate_depfile should not be called like this, but instead be called','line_number':1003,'multiline':False]['text':' through the use of custom rules, and filtered out in the normal','line_number':1004,'multiline':False]['text':' list of build generation about. However, because the generate rule','line_number':1005,'multiline':False]['text':' is hardcoded here, we need to do this generate_depfile call manually.','line_number':1006,'multiline':False]['text':' This sets up a dependency edge between build.ninja.in and build.ninja','line_number':1033,'multiline':False]['text':' without actually taking any action to transform one into the other','line_number':1034,'multiline':False]['text':' because we write both files ourselves later.','line_number':1035,'multiline':False]['text':' Look in SCons's list of DEFAULT_TARGETS, find the ones that','line_number':1044,'multiline':False]['text':' we generated a ninja build rule for.','line_number':1045,'multiline':False]['text':' If we found an overlap between SCons's list of default','line_number':1050,'multiline':False]['text':' targets and the targets we created ninja builds for then use','line_number':1051,'multiline':False]['text':' those as ninja's default as well.','line_number':1052,'multiline':False]['text':' Despite being having "list" in it's name this member is not','line_number':1095,'multiline':False]['text':' actually a list. It's the pre-subst'd string of the command. We','line_number':1096,'multiline':False]['text':' use it to determine if the command we're about to generate needs','line_number':1097,'multiline':False]['text':' to use a custom Ninja rule. By default this redirects CC, CXX,','line_number':1098,'multiline':False]['text':' AR, SHLINK, and LINK commands to their respective rules but the','line_number':1099,'multiline':False]['text':' user can inject custom Ninja rules and tie them to commands by','line_number':1100,'multiline':False]['text':' using their pre-subst'd string.','line_number':1101,'multiline':False]['text':' Scan the ENV looking for any keys which do not exist in','line_number':1138,'multiline':False]['text':' os.environ or differ from it. We assume if it's a new or','line_number':1139,'multiline':False]['text':' differing key from the process environment then it's','line_number':1140,'multiline':False]['text':' important to pass down to commands in the Ninja file.','line_number':1141,'multiline':False]['text':' Ensure that the ENV values are all strings:','line_number':1151,'multiline':False]['text':' If the value is a list, then we assume it is a','line_number':1153,'multiline':False]['text':' path list, because that's a pretty common list-like','line_number':1154,'multiline':False]['text':' value to stick in an environment variable:','line_number':1155,'multiline':False]['text':' If it isn't a string or a list, then we just coerce','line_number':1159,'multiline':False]['text':' it to a string, which is the proper way to handle','line_number':1160,'multiline':False]['text':' Dir and File instances and will produce something','line_number':1161,'multiline':False]['text':' reasonable for just about everything else:','line_number':1162,'multiline':False]['text':' We address here *only* the specific case that a user might have','line_number':1168,'multiline':False]['text':' an environment variable which somehow gets included and has','line_number':1169,'multiline':False]['text':' spaces in the value. These are escapes that Ninja handles. This','line_number':1170,'multiline':False]['text':' doesn't make builds on paths with spaces (Ninja and SCons issues)','line_number':1171,'multiline':False]['text':' nor expanding response file paths with spaces (Ninja issue) work.','line_number':1172,'multiline':False]['text':' If win32 using the environment with a response file command will cause','line_number':1187,'multiline':False]['text':' ninja to fail to create the response file. Additionally since these rules','line_number':1188,'multiline':False]['text':' generally are not piping through cmd.exe /c any environment variables will','line_number':1189,'multiline':False]['text':' make CreateProcess fail to start.','line_number':1190,'multiline':False]['text':'','line_number':1191,'multiline':False]['text':' On POSIX we can still set environment variables even for compile','line_number':1192,'multiline':False]['text':' commands so we do so.','line_number':1193,'multiline':False]['text':' Add 1 so we always keep the actual tool inside of cmd','line_number':1212,'multiline':False]['text':' resolve and store any wrappers we want to remove later when we','line_number':1225,'multiline':False]['text':' are constructing the compdb entries for the compiles.','line_number':1226,'multiline':False]['text':' Actions like CommandAction have a method called process that is','line_number':1249,'multiline':False]['text':' used by SCons to generate the cmd_line they need to run. So','line_number':1250,'multiline':False]['text':' check if it's a thing like CommandAction and call it if we can.','line_number':1251,'multiline':False]['text':' Anything else works with genstring, this is most commonly hit by','line_number':1256,'multiline':False]['text':' ListActions which essentially call process on all of their','line_number':1257,'multiline':False]['text':' commands and concatenate it for us.','line_number':1258,'multiline':False]['text':' Escape dollars as necessary','line_number':1269,'multiline':False]['text':' Since this function is a rule mapping provider, it must return a list of dependencies,','line_number':1286,'multiline':False]['text':' and usually this would be the path to a tool, such as a compiler, used for this rule.','line_number':1287,'multiline':False]['text':' However this function is to generic to be able to reliably extract such deps','line_number':1288,'multiline':False]['text':' from the command, so we return a placeholder empty list. It should be noted that','line_number':1289,'multiline':False]['text':' generally this function will not be used soley and is more like a template to generate','line_number':1290,'multiline':False]['text':' the basics for a custom provider which may have more specific options for a provier','line_number':1291,'multiline':False]['text':' function for a custom NinjaRuleMapping.','line_number':1292,'multiline':False]['text':' Retrieve the repository file for all sources','line_number':1315,'multiline':False]['text':' Generate a real CommandAction','line_number':1318,'multiline':False]['text':' pylint: disable=protected-access','line_number':1320,'multiline':False]['text':' Get the dependencies for all targets','line_number':1339,'multiline':False]['text':' Now add in the other dependencies related to the command,','line_number':1342,'multiline':False]['text':' e.g. the compiler binary. The ninja rule can be user provided so','line_number':1343,'multiline':False]['text':' we must do some validation to resolve the dependency path for ninja.','line_number':1344,'multiline':False]['text':' If the tool is a node, then SCons will resolve the path later, if its not','line_number':1351,'multiline':False]['text':' a node then we assume it generated from build and make sure it is existing.','line_number':1352,'multiline':False]['text':' in some case the tool could be in the local directory and be suppled without the ext','line_number':1357,'multiline':False]['text':' such as in windows, so append the executable suffix and check.','line_number':1358,'multiline':False]['text':' Many commands will assume the binary is in the path, so','line_number':1366,'multiline':False]['text':' we accept this as a possible input from a given command.','line_number':1367,'multiline':False]['text':' Possibly these could be ignore and the build would still work, however it may not always','line_number':1375,'multiline':False]['text':' rebuild correctly, so we hard stop, and force the user to fix the issue with the provided','line_number':1376,'multiline':False]['text':' ninja rule.','line_number':1377,'multiline':False]['text':' Don't use sub_env here because we require that NINJA_POOL be set','line_number':1392,'multiline':False]['text':' on a per-builder call basis to prevent accidental strange','line_number':1393,'multiline':False]['text':' behavior like env['NINJA_POOL'] = 'console' and sub_env can be','line_number':1394,'multiline':False]['text':' the global Environment object if node.env is None.','line_number':1395,'multiline':False]['text':' Example:','line_number':1396,'multiline':False]['text':'','line_number':1397,'multiline':False]['text':' Allowed:','line_number':1398,'multiline':False]['text':'','line_number':1399,'multiline':False]['text':'     env.Command("ls", NINJA_POOL="ls_pool")','line_number':1400,'multiline':False]['text':'','line_number':1401,'multiline':False]['text':' Not allowed and ignored:','line_number':1402,'multiline':False]['text':'','line_number':1403,'multiline':False]['text':'     env["NINJA_POOL"] = "ls_pool"','line_number':1404,'multiline':False]['text':'     env.Command("ls")','line_number':1405,'multiline':False]['text':'','line_number':1406,'multiline':False]['text':' We have no COMSTR equivalent so print that we're generating','line_number':1420,'multiline':False]['text':' here.','line_number':1421,'multiline':False]['text':' pylint: disable=too-few-public-methods','line_number':1430,'multiline':False]['text':' Optimize for success, this gets called significantly more often','line_number':1582,'multiline':False]['text':' when the value is already memoized than when it's not.','line_number':1583,'multiline':False]['text':' We do not honor any env['ENV'] or env[*] variables in the','line_number':1587,'multiline':False]['text':' generated ninja ile. Ninja passes your raw shell environment','line_number':1588,'multiline':False]['text':' down to it's subprocess so the only sane option is to do the','line_number':1589,'multiline':False]['text':' same during generation. At some point, if and when we try to','line_number':1590,'multiline':False]['text':' upstream this, I'm sure a sticking point will be respecting','line_number':1591,'multiline':False]['text':' env['ENV'] variables and such but it's actually quite','line_number':1592,'multiline':False]['text':' complicated. I have a naive version but making it always work','line_number':1593,'multiline':False]['text':' with shell quoting is nigh impossible. So I've decided to','line_number':1594,'multiline':False]['text':' cross that bridge when it's absolutely required.','line_number':1595,'multiline':False]['text':' We still set self.num_jobs to num even though it's a lie. The','line_number':1603,'multiline':False]['text':' only consumer of this attribute is the Parallel Job class AND','line_number':1604,'multiline':False]['text':' the Main.py function which instantiates a Jobs class. It checks','line_number':1605,'multiline':False]['text':' if Jobs.num_jobs is equal to options.num_jobs, so if the user','line_number':1606,'multiline':False]['text':' provides -j12 but we set self.num_jobs = 1 they get an incorrect','line_number':1607,'multiline':False]['text':' warning about this version of Python not supporting parallel','line_number':1608,'multiline':False]['text':' builds. So here we lie so the Main.py will not give a false','line_number':1609,'multiline':False]['text':' warning to users.','line_number':1610,'multiline':False]['text':' This variable disables the tool when storing the SCons command in the','line_number':1636,'multiline':False]['text':' generated ninja file to ensure that the ninja tool is not loaded when','line_number':1637,'multiline':False]['text':' SCons should do actual work as a subprocess of a ninja build. The ninja','line_number':1638,'multiline':False]['text':' tool is very invasive into the internals of SCons and so should never be','line_number':1639,'multiline':False]['text':' enabled when SCons needs to build a target.','line_number':1640,'multiline':False]['text':' Add the Ninja builder.','line_number':1651,'multiline':False]['text':' TODO: API for getting the SConscripts programmatically','line_number':1664,'multiline':False]['text':' exists upstream: https://github.com/SCons/scons/issues/3625','line_number':1665,'multiline':False]['text':' This adds the required flags such that the generated compile','line_number':1676,'multiline':False]['text':' commands will create depfiles as appropriate in the Ninja file.','line_number':1677,'multiline':False]['text':' Provide a way for custom rule authors to easily access command','line_number':1685,'multiline':False]['text':' generation.','line_number':1686,'multiline':False]['text':' Expose ninja node path converstion functions to make writing','line_number':1692,'multiline':False]['text':' custom function action handlers easier.','line_number':1693,'multiline':False]['text':' Provides a way for users to handle custom FunctionActions they','line_number':1701,'multiline':False]['text':' want to translate to Ninja.','line_number':1702,'multiline':False]['text':' Provides a mechanism for inject custom Ninja rules which can','line_number':1706,'multiline':False]['text':' then be mapped using NinjaRuleMapping.','line_number':1707,'multiline':False]['text':' Provides a mechanism for inject custom Ninja pools which can','line_number':1711,'multiline':False]['text':' be used by providing the NINJA_POOL="name" as an','line_number':1712,'multiline':False]['text':' OverrideEnvironment variable in a builder call.','line_number':1713,'multiline':False]['text':' Add the ability to register custom NinjaRuleMappings for Command','line_number':1717,'multiline':False]['text':' builders. We don't store this dictionary in the env to prevent','line_number':1718,'multiline':False]['text':' accidental deletion of the CC/XXCOM mappings. You can still','line_number':1719,'multiline':False]['text':' overwrite them if you really want to but you have to explicit','line_number':1720,'multiline':False]['text':' about it this way. The reason is that if they were accidentally','line_number':1721,'multiline':False]['text':' deleted you would get a very subtly incorrect Ninja file and','line_number':1722,'multiline':False]['text':' might not catch it.','line_number':1723,'multiline':False]['text':' TODO: change LINKCOM and SHLINKCOM to handle embedding manifest exe checks','line_number':1726,'multiline':False]['text':' without relying on the SCons hacks that SCons uses by default.','line_number':1727,'multiline':False]['text':' Normally in SCons actions for the Program and *Library builders','line_number':1735,'multiline':False]['text':' will return "${*COM}" as their pre-subst'd command line. However','line_number':1736,'multiline':False]['text':' if a user in a SConscript overwrites those values via key access','line_number':1737,'multiline':False]['text':' like env["LINKCOM"] = "$( $ICERUN $)" + env["LINKCOM"] then','line_number':1738,'multiline':False]['text':' those actions no longer return the "bracketted" string and','line_number':1739,'multiline':False]['text':' instead return something that looks more expanded. So to','line_number':1740,'multiline':False]['text':' continue working even if a user has done this we map both the','line_number':1741,'multiline':False]['text':' "bracketted" and semi-expanded versions.','line_number':1742,'multiline':False]['text':' Make SCons node walk faster by preventing unnecessary work','line_number':1756,'multiline':False]['text':' Used to determine if a build generates a source file. Ninja','line_number':1759,'multiline':False]['text':' requires that all generated sources are added as order_only','line_number':1760,'multiline':False]['text':' dependencies to any builds that *might* use them.','line_number':1761,'multiline':False]['text':' There is no way to translate the ranlib list action into','line_number':1765,'multiline':False]['text':' Ninja so add the s flag and disable ranlib.','line_number':1766,'multiline':False]['text':'','line_number':1767,'multiline':False]['text':' This is equivalent to Meson.','line_number':1768,'multiline':False]['text':' https://github.com/mesonbuild/meson/blob/master/mesonbuild/linkers.py#L143','line_number':1769,'multiline':False]['text':' Disable running ranlib, since we added 's' above','line_number':1776,'multiline':False]['text':' This is the point of no return, anything after this comment','line_number':1779,'multiline':False]['text':' makes changes to SCons that are irreversible and incompatible','line_number':1780,'multiline':False]['text':' with a normal SCons build. We return early if __NINJA_NO=1 has','line_number':1781,'multiline':False]['text':' been given on the command line (i.e. by us in the generated','line_number':1782,'multiline':False]['text':' ninja file) here to prevent these modifications from happening','line_number':1783,'multiline':False]['text':' when we want SCons to do work. Everything before this was','line_number':1784,'multiline':False]['text':' necessary to setup the builder and other functions so that the','line_number':1785,'multiline':False]['text':' tool can be unconditionally used in the users's SCons files.','line_number':1786,'multiline':False]['text':' There is a target called generate-ninja which needs to be included','line_number':1791,'multiline':False]['text':' with the --ninja flag in order to generate the ninja file. Because the --ninja','line_number':1792,'multiline':False]['text':' flag is ONLY used with generate-ninja, we have combined the two by making the --ninja flag','line_number':1793,'multiline':False]['text':' implicitly build the generate-ninja target.','line_number':1794,'multiline':False]['text':' Set a known variable that other tools can query so they can','line_number':1797,'multiline':False]['text':' behave correctly during ninja generation.','line_number':1798,'multiline':False]['text':' These methods are no-op'd because they do not work during ninja','line_number':1801,'multiline':False]['text':' generation, expected to do no work, or simply fail. All of which','line_number':1802,'multiline':False]['text':' are slow in SCons. So we overwrite them with no logic.','line_number':1803,'multiline':False]['text':' We make lstat a no-op because it is only used for SONAME','line_number':1812,'multiline':False]['text':' symlinks which we're not producing.','line_number':1813,'multiline':False]['text':' This is a slow method that isn't memoized. We make it a noop','line_number':1816,'multiline':False]['text':' since during our generation we will never use the results of','line_number':1817,'multiline':False]['text':' this or change the results.','line_number':1818,'multiline':False]['text':' We overwrite stat and WhereIs with eternally memoized','line_number':1821,'multiline':False]['text':' implementations. See the docstring of ninja_stat and','line_number':1822,'multiline':False]['text':' ninja_whereis for detailed explanations.','line_number':1823,'multiline':False]['text':' Monkey patch get_csig and get_contents for some classes. It','line_number':1827,'multiline':False]['text':' slows down the build significantly and we don't need contents or','line_number':1828,'multiline':False]['text':' content signatures calculated when generating a ninja file since','line_number':1829,'multiline':False]['text':' we're not doing any SCons caching or building.','line_number':1830,'multiline':False]['text':' Ignore CHANGED_SOURCES and CHANGED_TARGETS. We don't want those','line_number':1838,'multiline':False]['text':' to have effect in a generation pass because the generator','line_number':1839,'multiline':False]['text':' shouldn't generate differently depending on the current local','line_number':1840,'multiline':False]['text':' state. Without this, when generating on Windows, if you already','line_number':1841,'multiline':False]['text':' had a foo.obj, you would omit foo.cpp from the response file. Do the same for UNCHANGED.','line_number':1842,'multiline':False]['text':' Replace false action messages with nothing.','line_number':1848,'multiline':False]['text':' This reduces unnecessary subst_list calls to add the compiler to','line_number':1851,'multiline':False]['text':' the implicit dependencies of targets. Since we encode full paths','line_number':1852,'multiline':False]['text':' in our generated commands we do not need these slow subst calls','line_number':1853,'multiline':False]['text':' as executing the command will fail if the file is not found','line_number':1854,'multiline':False]['text':' where we expect it.','line_number':1855,'multiline':False]['text':' This makes SCons more aggressively cache MD5 signatures in the','line_number':1858,'multiline':False]['text':' SConsign file.','line_number':1859,'multiline':False]['text':' The Serial job class is SIGNIFICANTLY (almost twice as) faster','line_number':1862,'multiline':False]['text':' than the Parallel job class for generating Ninja files. So we','line_number':1863,'multiline':False]['text':' monkey the Jobs constructor to only use the Serial Job class.','line_number':1864,'multiline':False]['text':' The environment variable NINJA_SYNTAX points to the','line_number':1867,'multiline':False]['text':' ninja_syntax.py module from the ninja sources found here:','line_number':1868,'multiline':False]['text':' https://github.com/ninja-build/ninja/blob/master/misc/ninja_syntax.py','line_number':1869,'multiline':False]['text':'','line_number':1870,'multiline':False]['text':' This should be vendored into the build sources and it's location','line_number':1871,'multiline':False]['text':' set in NINJA_SYNTAX. This code block loads the location from','line_number':1872,'multiline':False]['text':' that variable, gets the absolute path to the vendored file, gets','line_number':1873,'multiline':False]['text':' it's parent directory then uses importlib to import the module','line_number':1874,'multiline':False]['text':' dynamically.','line_number':1875,'multiline':False]['text':' Here we will force every builder to use an emitter which makes the ninja','line_number':1887,'multiline':False]['text':' file depend on it's target. This forces the ninja file to the bottom of','line_number':1888,'multiline':False]['text':' the DAG which is required so that we walk every target, and therefore add','line_number':1889,'multiline':False]['text':' it to the global NINJA_STATE, before we try to write the ninja file.','line_number':1890,'multiline':False]['text':' The "Alias Builder" isn't in the BUILDERS map so we have to','line_number':1896,'multiline':False]['text':' modify it directly.','line_number':1897,'multiline':False]['text':' Users can inject whatever they want into the BUILDERS','line_number':1910,'multiline':False]['text':' dictionary so if the thing doesn't have an emitter we'll','line_number':1911,'multiline':False]['text':' just ignore it.','line_number':1912,'multiline':False]['text':' Here we monkey patch the Task.execute method to not do a bunch of','line_number':1916,'multiline':False]['text':' unnecessary work. If a build is a regular builder (i.e not a conftest and','line_number':1917,'multiline':False]['text':' not our own Ninja builder) then we add it to the NINJA_STATE. Otherwise we','line_number':1918,'multiline':False]['text':' build it like normal. This skips all of the caching work that this method','line_number':1919,'multiline':False]['text':' would normally do since we aren't pulling any of these targets from the','line_number':1920,'multiline':False]['text':' cache.','line_number':1921,'multiline':False]['text':'','line_number':1922,'multiline':False]['text':' In the future we may be able to use this to actually cache the build.ninja','line_number':1923,'multiline':False]['text':' file once we have the upstream support for referencing SConscripts as File','line_number':1924,'multiline':False]['text':' nodes.','line_number':1925,'multiline':False]['text':' Make needs_execute always return true instead of determining out of','line_number':1938,'multiline':False]['text':' date-ness.','line_number':1939,'multiline':False]['text':' We will eventually need to overwrite TempFileMunge to make it','line_number':1942,'multiline':False]['text':' handle persistent tempfiles or get an upstreamed change to add','line_number':1943,'multiline':False]['text':' some configurability to it's behavior in regards to tempfiles.','line_number':1944,'multiline':False]['text':'','line_number':1945,'multiline':False]['text':' Set all three environment variables that Python's','line_number':1946,'multiline':False]['text':' tempfile.mkstemp looks at as it behaves differently on different','line_number':1947,'multiline':False]['text':' platforms and versions of Python.','line_number':1948,'multiline':False]