['text':' Copyright 2020 MongoDB Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Permission is hereby granted, free of charge, to any person obtaining','line_number':3,'multiline':False]['text':' a copy of this software and associated documentation files (the','line_number':4,'multiline':False]['text':' "Software"), to deal in the Software without restriction, including','line_number':5,'multiline':False]['text':' without limitation the rights to use, copy, modify, merge, publish,','line_number':6,'multiline':False]['text':' distribute, sublicense, and/or sell copies of the Software, and to','line_number':7,'multiline':False]['text':' permit persons to whom the Software is furnished to do so, subject to','line_number':8,'multiline':False]['text':' the following conditions:','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' The above copyright notice and this permission notice shall be included','line_number':11,'multiline':False]['text':' in all copies or substantial portions of the Software.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY','line_number':14,'multiline':False]['text':' KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE','line_number':15,'multiline':False]['text':' WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND','line_number':16,'multiline':False]['text':' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE','line_number':17,'multiline':False]['text':' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION','line_number':18,'multiline':False]['text':' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION','line_number':19,'multiline':False]['text':' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':' Safe to assume unix here because icecream only works on Unix','line_number':37,'multiline':False]['text':' Create the env, use awk to get just the tarball name and we store it in','line_number':40,'multiline':False]['text':' the shell variable $ICECC_VERSION_TMP so the subsequent mv command and','line_number':41,'multiline':False]['text':' store it in a known location. Add any files requested from the user environment.','line_number':42,'multiline':False]['text':' TODO: SERVER-57393 It would be a little more elegant if things in','line_number':45,'multiline':False]['text':' ICECC_CREATE_ENV_ADDFILES were handled as sources, because we','line_number':46,'multiline':False]['text':' would get automatic dependency tracking. However, there are some','line_number':47,'multiline':False]['text':' wrinkles around the mapped case so we have opted to leave it as','line_number':48,'multiline':False]['text':' just interpreting the env for now.','line_number':49,'multiline':False]['text':' NOTE: abspath is required by icecream because of','line_number':68,'multiline':False]['text':' this line in icecc-create-env:','line_number':69,'multiline':False]['text':' https://github.com/icecc/icecream/blob/10b9468f5bd30a0fdb058901e91e7a29f1bfbd42/client/icecc-create-env.in#L534','line_number':70,'multiline':False]['text':' which cuts out the two files based off the equals sign and','line_number':71,'multiline':False]['text':' starting slash of the second file','line_number':72,'multiline':False]['text':' Simply move our tarball to the expected locale.','line_number':78,'multiline':False]['text':' Daisy chain the commands and then let SCons Subst in the rest.','line_number':81,'multiline':False]['text':' Absoluteify, so we can derive ICERUN','line_number':87,'multiline':False]['text':' Absoluteify, for parity with ICECC','line_number':91,'multiline':False]['text':' Make CC and CXX absolute paths too. This ensures the correct paths to','line_number':103,'multiline':False]['text':' compilers get passed to icecc-create-env rather than letting it','line_number':104,'multiline':False]['text':' potentially discover something we don't expect via PATH.','line_number':105,'multiline':False]['text':' Set up defaults for configuration options','line_number':109,'multiline':False]['text':' We have a lot of things to build and run that the final user','line_number':117,'multiline':False]['text':' environment doesn't need to see or know about. Make a custom env','line_number':118,'multiline':False]['text':' that we use consistently from here to where we end up setting','line_number':119,'multiline':False]['text':' ICECREAM_RUN_ICECC in the user env.','line_number':120,'multiline':False]['text':' Use curl / wget to download the toolchain because SCons (and ninja)','line_number':129,'multiline':False]['text':' are better at running shell commands than Python functions.','line_number':130,'multiline':False]['text':'','line_number':131,'multiline':False]['text':' TODO: This all happens SCons side now. Should we just use python to','line_number':132,'multiline':False]['text':' fetch instead?','line_number':133,'multiline':False]['text':' Copy ICECC_VERSION into ICECC_VERSION_URL so that we can','line_number':146,'multiline':False]['text':' change ICECC_VERSION without perturbing the effect of','line_number':147,'multiline':False]['text':' the action.','line_number':148,'multiline':False]['text':' Convert the users selection into a File node and do some basic validation','line_number':161,'multiline':False]['text':' This is what we are going to call the file names as known to SCons on disk','line_number':169,'multiline':False]['text':' This is what we are going to call the file names as known to SCons on disk. We do the','line_number':179,'multiline':False]['text':' subst early so that we can call `replace` on the result.','line_number':180,'multiline':False]['text':' At this point, all paths above have produced a file of some sort. We now move on','line_number':198,'multiline':False]['text':' to producing our own signature for this local file.','line_number':199,'multiline':False]['text':' If the file we are planning to use is not within','line_number':207,'multiline':False]['text':' ICECREAM_TARGET_DIR then make a local copy of it that is.','line_number':208,'multiline':False]['text':' There is no point caching the copy.','line_number':218,'multiline':False]['text':' Now, we compute our own signature of the local compiler package,','line_number':221,'multiline':False]['text':' and create yet another link to the compiler package with a name','line_number':222,'multiline':False]['text':' containing our computed signature. Now we know that we can give','line_number':223,'multiline':False]['text':' this filename to icecc and it will be assured to really reflect','line_number':224,'multiline':False]['text':' the contents of the package, and not the arbitrary naming of the','line_number':225,'multiline':False]['text':' file as found on the users filesystem or from','line_number':226,'multiline':False]['text':' icecc-create-env. We put the absolute path to that filename into','line_number':227,'multiline':False]['text':' a file that we can read from.','line_number':228,'multiline':False]['text':' icecc-create-env run twice with the same input will','line_number':239,'multiline':False]['text':' create files with identical contents, and identical','line_number':240,'multiline':False]['text':' filenames, but with different hashes because it','line_number':241,'multiline':False]['text':' includes timestamps. So we compute a new hash based','line_number':242,'multiline':False]['text':' on the actual stream contents of the file by','line_number':243,'multiline':False]['text':' untarring it into shasum.','line_number':244,'multiline':False]['text':' We can't allow these to interact with the cache because the','line_number':261,'multiline':False]['text':' second action produces a file unknown to SCons. If caching were','line_number':262,'multiline':False]['text':' permitted, the other two files could be retrieved from cache but','line_number':263,'multiline':False]['text':' the file produced by the second action could not (and would not)','line_number':264,'multiline':False]['text':' be. We would end up with a broken setup.','line_number':265,'multiline':False]['text':' Create a value node that, when built, contains the result of','line_number':268,'multiline':False]['text':' reading the contents of the sha256.path file. This way we can','line_number':269,'multiline':False]['text':' pull the value out of the file and substitute it into our','line_number':270,'multiline':False]['text':' wrapper script.','line_number':271,'multiline':False]['text':' Set the values that will be interpolated into the run-icecc script.','line_number':286,'multiline':False]['text':' If necessary, we include the users desired architecture in the','line_number':289,'multiline':False]['text':' interpolated file.','line_number':290,'multiline':False]['text':' Finally, create the run-icecc wrapper script. The contents will','line_number':295,'multiline':False]['text':' re-invoke icecc with our sha256 sum named file, ensuring that we','line_number':296,'multiline':False]['text':' trust the signature to be appropriate. In a pure SCons build, we','line_number':297,'multiline':False]['text':' actually wouldn't need this Substfile, we could just set','line_number':298,'multiline':False]['text':' env['ENV]['ICECC_VERSION'] to the Value node above. But that','line_number':299,'multiline':False]['text':' won't work for Ninja builds where we can't ask for the contents','line_number':300,'multiline':False]['text':' of such a node easily. Creating a Substfile means that SCons','line_number':301,'multiline':False]['text':' will take care of generating a file that Ninja can use.','line_number':302,'multiline':False]['text':' Don't change around the suffixes','line_number':316,'multiline':False]['text':' Somewhat surprising, but even though Ninja will defer to','line_number':320,'multiline':False]['text':' SCons to invoke this, we still need ninja to be aware of it','line_number':321,'multiline':False]['text':' so that it knows to invoke SCons to produce it as part of','line_number':322,'multiline':False]['text':' TEMPLATE expansion. Since we have set NINJA_SKIP=True for','line_number':323,'multiline':False]['text':' setupEnv, we need to reverse that here.','line_number':324,'multiline':False]['text':' TODO: Without the ICECC dependency, changing ICECC doesn't cause the Substfile','line_number':337,'multiline':False]['text':' to regenerate. Why is this?','line_number':338,'multiline':False]['text':' This dependency is necessary so that we build into this','line_number':341,'multiline':False]['text':' string before we create the file.','line_number':342,'multiline':False]['text':' TODO: SERVER-50587 We need to make explicit depends here because of NINJA_SKIP. Any','line_number':345,'multiline':False]['text':' dependencies in the nodes created in setupEnv with NINJA_SKIP would have','line_number':346,'multiline':False]['text':' that dependency chain hidden from ninja, so they won't be rebuilt unless','line_number':347,'multiline':False]['text':' added as dependencies here on this node that has NINJA_SKIP=False.','line_number':348,'multiline':False]['text':' From here out, we make changes to the users `env`.','line_number':355,'multiline':False]['text':' Requires or Depends? There are trade-offs:','line_number':362,'multiline':False]['text':'','line_number':363,'multiline':False]['text':' If it is `Depends`, then enabling or disabling icecream','line_number':364,'multiline':False]['text':' will cause a global recompile. But, if you regenerate a','line_number':365,'multiline':False]['text':' new compiler package, you will get a rebuild. If it is','line_number':366,'multiline':False]['text':' `Requires`, then enabling or disabling icecream will not','line_number':367,'multiline':False]['text':' necessarily cause a global recompile (it depends if','line_number':368,'multiline':False]['text':' C[,C,XX]FLAGS get changed when you do so), but on the','line_number':369,'multiline':False]['text':' other hand if you regenerate a new compiler package you','line_number':370,'multiline':False]['text':' will *not* get a rebuild.','line_number':371,'multiline':False]['text':'','line_number':372,'multiline':False]['text':' For now, we are opting for `Requires`, because it seems','line_number':373,'multiline':False]['text':' preferable that opting in or out of icecream shouldn't','line_number':374,'multiline':False]['text':' force a rebuild.','line_number':375,'multiline':False]['text':' Cribbed from Tool/cc.py and Tool/c++.py. It would be better if','line_number':379,'multiline':False]['text':' we could obtain this from SCons.','line_number':380,'multiline':False]['text':' Check whether ccache is requested and is a valid tool.','line_number':399,'multiline':False]['text':' We aren't going to use ICECC_REMOTE_CPP because icecc','line_number':410,'multiline':False]['text':' 1.1 doesn't offer it. We disallow fallback to local','line_number':411,'multiline':False]['text':' builds because the fallback is serial execution.','line_number':412,'multiline':False]['text':' If we can, we should make Icecream do its own preprocessing','line_number':415,'multiline':False]['text':' to reduce concurrency on the local host. We should not do','line_number':416,'multiline':False]['text':' this when ccache is in use because ccache will execute','line_number':417,'multiline':False]['text':' Icecream to do its own preprocessing and then execute','line_number':418,'multiline':False]['text':' Icecream as the compiler on the preprocessed source.','line_number':419,'multiline':False]['text':' Make a generator to expand to what icecream binary to use in','line_number':425,'multiline':False]['text':' the case where we are not a conftest or a deny list source file.','line_number':426,'multiline':False]['text':' TODO: SERVER-60915 use new conftest API','line_number':428,'multiline':False]['text':' Don't want to overwrite some existing generator','line_number':441,'multiline':False]['text':' if there is an existing one, we will need to chain them','line_number':442,'multiline':False]['text':' If ccache is in play we actually want the icecc binary in the','line_number':448,'multiline':False]['text':' CCACHE_PREFIX environment variable, not on the command line, per','line_number':449,'multiline':False]['text':' the ccache documentation on compiler wrappers. Otherwise, just','line_number':450,'multiline':False]['text':' put $ICECC on the command line. We wrap it in the magic "don't','line_number':451,'multiline':False]['text':' consider this part of the build signature" sigils in the hope','line_number':452,'multiline':False]['text':' that enabling and disabling icecream won't cause rebuilds. This','line_number':453,'multiline':False]['text':' is unlikely to really work, since above we have maybe changed','line_number':454,'multiline':False]['text':' compiler flags (things like -fdirectives-only), but we still try','line_number':455,'multiline':False]['text':' to do the right thing.','line_number':456,'multiline':False]['text':'','line_number':457,'multiline':False]['text':' If the path to CCACHE_PREFIX isn't absolute, then it will','line_number':458,'multiline':False]['text':' look it up in PATH. That isn't what we want here, we make','line_number':459,'multiline':False]['text':' the path absolute.','line_number':460,'multiline':False]['text':' TODO: SERVER-60915 use new conftest API','line_number':462,'multiline':False]['text':' We wrap it in the magic "don't','line_number':478,'multiline':False]['text':' consider this part of the build signature" sigils in the hope','line_number':479,'multiline':False]['text':' that enabling and disabling icecream won't cause rebuilds. This','line_number':480,'multiline':False]['text':' is unlikely to really work, since above we have maybe changed','line_number':481,'multiline':False]['text':' compiler flags (things like -fdirectives-only), but we still try','line_number':482,'multiline':False]['text':' to do the right thing.','line_number':483,'multiline':False]['text':' Make common non-compile jobs flow through icerun so we don't','line_number':490,'multiline':False]['text':' kill the local machine. It would be nice to plumb ICERUN in via','line_number':491,'multiline':False]['text':' SPAWN or SHELL but it is too much. You end up running `icerun','line_number':492,'multiline':False]['text':' icecc ...`, and icecream doesn't handle that. We could try to','line_number':493,'multiline':False]['text':' filter and only apply icerun if icecc wasn't present but that','line_number':494,'multiline':False]['text':' seems fragile. If you find your local machine being overrun by','line_number':495,'multiline':False]['text':' jobs, figure out what sort they are and extend this part of the','line_number':496,'multiline':False]['text':' setup.','line_number':497,'multiline':False]['text':' Uncomment these to debug your icecc integration','line_number':516,'multiline':False]['text':' TODO: We should not be printing here because we don't always know the','line_number':528,'multiline':False]['text':' use case for loading this tool. It may be that the user desires','line_number':529,'multiline':False]['text':' writing this output to a log file or not even displaying it at all.','line_number':530,'multiline':False]['text':' We should instead be invoking a callback to SConstruct that it can','line_number':531,'multiline':False]['text':' interpret as needed. Or better yet, we should use some SCons logging','line_number':532,'multiline':False]['text':' and error API, if and when one should emerge.','line_number':533,'multiline':False]['text':' Absoluteify, for parity with ICECC','line_number':555,'multiline':False]['text':' consume all data','line_number':574,'multiline':False]