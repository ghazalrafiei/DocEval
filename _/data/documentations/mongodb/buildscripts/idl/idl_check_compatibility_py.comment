['text':' Copyright (C) 2021-present MongoDB, Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' This program is free software: you can redistribute it and/or modify','line_number':3,'multiline':False]['text':' it under the terms of the Server Side Public License, version 1,','line_number':4,'multiline':False]['text':' as published by MongoDB, Inc.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' This program is distributed in the hope that it will be useful,','line_number':7,'multiline':False]['text':' but WITHOUT ANY WARRANTY; without even the implied warranty of','line_number':8,'multiline':False]['text':' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the','line_number':9,'multiline':False]['text':' Server Side Public License for more details.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' You should have received a copy of the Server Side Public License','line_number':12,'multiline':False]['text':' along with this program. If not, see','line_number':13,'multiline':False]['text':' <http://www.mongodb.com/licensing/server-side-public-license>.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' As a special exception, the copyright holders give permission to link the','line_number':16,'multiline':False]['text':' code of portions of this program with the OpenSSL library under certain','line_number':17,'multiline':False]['text':' conditions as described in each individual source file and distribute','line_number':18,'multiline':False]['text':' linked combinations including the program with the OpenSSL library. You','line_number':19,'multiline':False]['text':' must comply with the Server Side Public License in all respects for','line_number':20,'multiline':False]['text':' all of the code used other than as permitted herein. If you modify file(s)','line_number':21,'multiline':False]['text':' with this exception, you may extend this exception to your version of the','line_number':22,'multiline':False]['text':' file(s), but you are not obligated to do so. If you do not wish to do so,','line_number':23,'multiline':False]['text':' delete this exception statement from your version. If you delete this','line_number':24,'multiline':False]['text':' exception statement from all source files in the program, then also delete','line_number':25,'multiline':False]['text':' it in the license file.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' This list if only used in unit-tests.','line_number':52,'multiline':False]['text':' These commands (aggregate, find, update, delete, findAndModify, explain) might contain some','line_number':100,'multiline':False]['text':' fields with type `any`. Currently, it's not possible to avoid the `any` type in those cases.','line_number':101,'multiline':False]['text':' Instead, here are the preventive measures in-place to catch unintentional breaking changes:','line_number':102,'multiline':False]['text':' 1- Added comments on top of custom serializers/deserializers (related to these fields) to','line_number':103,'multiline':False]['text':'    let the future developers know that their modifications to these methods might lead to','line_number':104,'multiline':False]['text':'    a breaking change in the API.','line_number':105,'multiline':False]['text':' 2- Added proper unit-tests to catch accidental changes to the custom serializers/deserializers','line_number':106,'multiline':False]['text':'    by over-fitting on the current implementation of these custom serializers/deserializers.','line_number':107,'multiline':False]['text':' 3- Added further checks to the current script (idl_check_compatibility.py) to check for','line_number':108,'multiline':False]['text':'    changing a custom serializer/deserializer and considering it as a potential breaking','line_number':109,'multiline':False]['text':'    change.','line_number':110,'multiline':False]['text':' Permit a parameter to move from bson serialisation type any','line_number':175,'multiline':False]['text':' to a non-any serialisation type.','line_number':176,'multiline':False]['text':' These parameters were type-checked "by hand" previously;','line_number':178,'multiline':False]['text':' enforcing this from IDL instead does not narrow the range','line_number':179,'multiline':False]['text':' of permitted values','line_number':180,'multiline':False]['text':' Permit the cpp type of a parameter to change','line_number':185,'multiline':False]['text':' maxTimeMS has been widened for consistency with','line_number':187,'multiline':False]['text':' equivalent params for other commands (aggregate)','line_number':188,'multiline':False]['text':' Do not add user visible fields already released in earlier versions.','line_number':193,'multiline':False]['text':' We generally don't allow changing a field from stable to unstable, but we permit it in special cases,','line_number':194,'multiline':False]['text':' such as when we want to avoid making internal fields part of the stable API.','line_number':195,'multiline':False]['text':' Additions to this list must be approved by the Stable API PM and code reviewed by the Query Optimization','line_number':196,'multiline':False]['text':' team.','line_number':197,'multiline':False]['text':' This list is only used in unit-tests.','line_number':199,'multiline':False]['text':' Real use cases for changing a field from 'stable' to 'unstable'.','line_number':217,'multiline':False]['text':' Once a field is part of the stable API, either by direct addition or by changing it from unstable','line_number':222,'multiline':False]['text':' to stable, it cannot removed from the stable API within this API version. Given this impact, we','line_number':223,'multiline':False]['text':' want to make sure such changes are always intentional. Therefore, the checker will throw errors','line_number':224,'multiline':False]['text':' unless the field is also added to this list below, with which the author ackhowledges they are','line_number':225,'multiline':False]['text':' aware of the above implications.','line_number':226,'multiline':False]['text':' Additions to this list must be approved by the Stable API PM and code reviewed by the Query Optimization','line_number':227,'multiline':False]['text':' team.','line_number':228,'multiline':False]['text':' This list is only used in unit-tests. These cases modify fields from unstable to stable.','line_number':230,'multiline':False]['text':' This list is only used in unit-tests. These cases add new fields as stable.','line_number':257,'multiline':False]['text':' Add real use cases for allowed new stable or unstable-to-stable fields after this line.','line_number':282,'multiline':False]['text':' Changes relative to 5.0:','line_number':283,'multiline':False]['text':' Do not add commands that were visible to users in previously released versions.','line_number':313,'multiline':False]['text':' The following commands were released behind a feature flag in 5.3 but were shelved in','line_number':315,'multiline':False]['text':' favor of getClusterParameter and setClusterParameter. Since the feature flag was not enabled','line_number':316,'multiline':False]['text':' in 5.3, they were effectively unusable and so can be safely removed from the strict API.','line_number':317,'multiline':False]['text':' Changed during 6.1 as part of removing multi-auth support.','line_number':323,'multiline':False]['text':' Do not add any command other the aggregate command or any access check that is not required','line_number':330,'multiline':False]['text':' only by an aggregation stage not present in previously released versions.','line_number':331,'multiline':False]['text':' Added in 6.3 due to the new $_analyzeShardKeyReadWriteDistribution stage.','line_number':333,'multiline':False]['text':' This list is only used in unit-tests.','line_number':337,'multiline':False]['text':' special case for optionalBool type, because it is compatible','line_number':356,'multiline':False]['text':' with bool type, but has bson_serialization_type == 'any'','line_number':357,'multiline':False]['text':' which is not supported by many checks','line_number':358,'multiline':False]['text':' Ignore imported commands as they will be processed in their own file.','line_number':411,'multiline':False]['text':' We're not ready to handle future API versions yet.','line_number':416,'multiline':False]['text':' If the old field is unstable, we only add errors related to the use of 'any' as the','line_number':488,'multiline':False]['text':' bson_serialization_type. For all other errors, we check that the old field is stable','line_number':489,'multiline':False]['text':' before adding an error.','line_number':490,'multiline':False]['text':' If bson_serialization_type switches from 'any' to non-any type.','line_number':499,'multiline':False]['text':' If bson_serialization_type switches from non-any to 'any' type.','line_number':505,'multiline':False]['text':' If 'any' is not explicitly allowed as the bson_serialization_type.','line_number':512,'multiline':False]['text':' If cpp_type is changed, it's a potential breaking change.','line_number':518,'multiline':False]['text':' If serializer is changed, it's a potential breaking change.','line_number':523,'multiline':False]['text':' If deserializer is changed, it's a potential breaking change.','line_number':530,'multiline':False]['text':' If the new type is not variant just check the single type.','line_number':538,'multiline':False]['text':' Check that new variant types are a subset of old variant types.','line_number':543,'multiline':False]['text':' Check that the old and new version of each variant type is also compatible.','line_number':547,'multiline':False]['text':' new_variant_type was not found in old_variant_types.','line_number':559,'multiline':False]['text':' If new type is variant and has a struct as a variant type, compare old and new variant_struct_types.','line_number':565,'multiline':False]['text':' Since enums can't be part of variant types, we don't explicitly check for enums.','line_number':566,'multiline':False]['text':' If the length of both variant_struct_types is 1 then we want to check the struct fields','line_number':575,'multiline':False]['text':' since an idl name change with the same field names is legal. We do not do this for','line_number':576,'multiline':False]['text':' lengths > 1 because it would be too ambiguous to tell which pair of variant','line_number':577,'multiline':False]['text':' types no longer comply with each other.','line_number':578,'multiline':False]['text':' new_variant_type was not found in old_variant_struct_types','line_number':596,'multiline':False]['text':' A reply field may not change from unstable to stable unless explicitly allowed to.','line_number':721,'multiline':False]['text':' Check that the old and new version of each chained type is also compatible.','line_number':751,'multiline':False]['text':' new chained type was not found in old chained types.','line_number':762,'multiline':False]['text':' Check that all fields in the new IDL have specified the 'stability' field.','line_number':782,'multiline':False]['text':' Check that newly added fields do not have an unallowed use of 'any' as the','line_number':787,'multiline':False]['text':' bson_serialization_type.','line_number':788,'multiline':False]['text':' If we encounter a bson_serialization_type of None, we skip checking if 'any' is used.','line_number':802,'multiline':False]['text':' If 'any' is not explicitly allowed as the bson_serialization_type.','line_number':806,'multiline':False]['text':' If the old field is unstable, we only add errors related to the use of 'any' as the','line_number':831,'multiline':False]['text':' bson_serialization_type. For all other errors, we check that the old field is stable','line_number':832,'multiline':False]['text':' before adding an error.','line_number':833,'multiline':False]['text':' If bson_serialization_type switches from 'any' to non-any type.','line_number':843,'multiline':False]['text':' If bson_serialization_type switches from non-any to 'any' type.','line_number':851,'multiline':False]['text':' If 'any' is not explicitly allowed as the bson_serialization_type.','line_number':859,'multiline':False]['text':' If cpp_type is changed, it's a potential breaking change.','line_number':865,'multiline':False]['text':' If serializer is changed, it's a potential breaking change.','line_number':873,'multiline':False]['text':' If deserializer is changed, it's a potential breaking change.','line_number':880,'multiline':False]['text':' Check that new variant types are a superset of old variant types.','line_number':898,'multiline':False]['text':' object->object_owned serialize to the same bson type. object_owned->object is','line_number':901,'multiline':False]['text':' not always safe so we only limit this special case to object->object_owned.','line_number':902,'multiline':False]['text':' Check that the old and new version of each variant type is also compatible.','line_number':905,'multiline':False]['text':' old_variant_type was not found in new_variant_types.','line_number':919,'multiline':False]['text':' If old and new types both have a struct as a variant type, compare old and new variant_struct_type.','line_number':924,'multiline':False]['text':' Since enums can't be part of variant types, we don't explicitly check for enums.','line_number':925,'multiline':False]['text':' If new_type.variant_struct_types in None then add a','line_number':934,'multiline':False]['text':' new_command_or_param_variant_type_not_superset_error for every type in','line_number':935,'multiline':False]['text':' old_type.variant_struct_types.','line_number':936,'multiline':False]['text':' If the length of both variant_struct_types is 1 then we want to check the struct fields','line_number':943,'multiline':False]['text':' since an idl name change with the same field names is legal. We do not do this for','line_number':944,'multiline':False]['text':' lengths > 1 because it would be too ambiguous to tell which pair of variant','line_number':945,'multiline':False]['text':' types no longer comply with each other.','line_number':946,'multiline':False]['text':' Item with the same name found in both old_type.variant_struct_types and','line_number':956,'multiline':False]['text':' new_type.variant_struct_types, call check_command_params_or_type_struct_fields.','line_number':957,'multiline':False]['text':' If an item in old_type.variant_struct_types was not found in','line_number':964,'multiline':False]['text':' new_type.variant_struct_types then add a new_command_or_param_variant_type_not_superset_error.','line_number':965,'multiline':False]['text':' Only add type errors if the old field is stable.','line_number':1017,'multiline':False]['text':' These parameters were added as 'stable' in previous versions but have been undocumented until','line_number':1051,'multiline':False]['text':' version 6.3. So we can go ahead and ignore their validator checks which were updated in','line_number':1052,'multiline':False]['text':' SERVER-71601.','line_number':1053,'multiline':False]['text':'','line_number':1054,'multiline':False]['text':' Do not add additional parameters to this list.','line_number':1055,'multiline':False]['text':' In SERVER-77382 we fixed the error handling of creating time-series collections by','line_number':1066,'multiline':False]['text':' adding a new validator to two 'stable' fields, but it didn't break any stable API','line_number':1067,'multiline':False]['text':' guarantees.','line_number':1068,'multiline':False]['text':' Check chained types.','line_number':1093,'multiline':False]['text':' Check that the old and new version of each chained type is also compatible.','line_number':1103,'multiline':False]['text':' old chained type was not found in new chained types.','line_number':1114,'multiline':False]['text':' We need to special-case the stmtId parameter because it was removed. However, it's not a','line_number':1122,'multiline':False]['text':' breaking change to the API because it was added and removed behind a feature flag, so it was','line_number':1123,'multiline':False]['text':' never officially released.','line_number':1124,'multiline':False]['text':' We allow collMod isTimeseriesNamespace parameter to be removed because it's implicitly','line_number':1126,'multiline':False]['text':' added from mongos and not documented in the API.','line_number':1127,'multiline':False]['text':' Check if a new field has been added to the parameters or type struct.','line_number':1146,'multiline':False]['text':' If so, it must be optional.','line_number':1147,'multiline':False]['text':' Check that all fields in the new IDL have specified the 'stability' field.','line_number':1149,'multiline':False]['text':' Check that a new field does not have an unallowed use of 'any' as the bson_serialization_type.','line_number':1174,'multiline':False]['text':' If we encounter a bson_serialization_type of None, we skip checking if 'any' is used.','line_number':1177,'multiline':False]['text':' If 'any' is not explicitly allowed as the bson_serialization_type.','line_number':1181,'multiline':False]['text':' A command param or type field may not change from unstable to stable unless explicitly allowed to.','line_number':1201,'multiline':False]['text':' If old field is unstable and new field is stable, the new field should either be optional or','line_number':1207,'multiline':False]['text':' have a default value.','line_number':1208,'multiline':False]['text':' IDL parser already checks that namespace must be one of these 4 types.','line_number':1248,'multiline':False]['text':' If old type is "namespacestring", the new namespace can be changed to any','line_number':1275,'multiline':False]['text':' of the other namespace types.','line_number':1276,'multiline':False]['text':' Otherwise, the new namespace can only be changed to "ignored".','line_number':1278,'multiline':False]['text':' If parsing old IDL files fails, it might be because the parser has been recently','line_number':1298,'multiline':False]['text':' updated to require something that isn't present in older IDL files.','line_number':1299,'multiline':False]['text':' Sort the list of privileges by the length of the action_type list, in decreasing order','line_number':1331,'multiline':False]['text':' so that two lists of privileges can be compared later.','line_number':1332,'multiline':False]['text':' Check that each new_privilege matches an old_privilege (the resource_pattern is','line_number':1369,'multiline':False]['text':' equal and the action_types are a subset of the old action_types).','line_number':1370,'multiline':False]['text':' x.privilege.agg_stage can still be None.','line_number':1388,'multiline':False]['text':' Aggregation stages are considered separate commands in the context of validating the','line_number':1404,'multiline':False]['text':' Stable API. Therefore, it is okay to skip recently added aggregation stages that are','line_number':1405,'multiline':False]['text':' are not present in the previous release.','line_number':1406,'multiline':False]['text':' pylint:disable=too-many-nested-blocks','line_number':1418,'multiline':False]['text':' Check new commands' compatibility with old ones.','line_number':1464,'multiline':False]['text':' Note, a command can be added to V1 at any time, it's ok if a','line_number':1465,'multiline':False]['text':' new command has no corresponding old command.','line_number':1466,'multiline':False]['text':' If parsing old IDL files fails, it might be because the parser has been','line_number':1480,'multiline':False]['text':' recently updated to require something that isn't present in older IDL files.','line_number':1481,'multiline':False]['text':' Ignore imported commands as they will be processed in their own file.','line_number':1485,'multiline':False]['text':' Ignore select commands that were removed after being added to the strict API.','line_number':1489,'multiline':False]['text':' Only commands that were never visible to the end-user in previous releases','line_number':1490,'multiline':False]['text':' (i.e., hidden behind a feature flag) should be allowed here.','line_number':1491,'multiline':False]['text':' We're not ready to handle future API versions yet.','line_number':1496,'multiline':False]['text':' Can't remove a command from V1','line_number':1509,'multiline':False]['text':' Check compatibility of command's parameters.','line_number':1520,'multiline':False]['text':' IDLCompatibilityContext takes in both 'old_idl_dir' and 'new_idl_dir',','line_number':1567,'multiline':False]['text':' but for generic_argument.idl, the parent directories aren't helpful for logging purposes.','line_number':1568,'multiline':False]['text':' Instead, we pass in "old generic_argument.idl" and "new generic_argument.idl"','line_number':1569,'multiline':False]['text':' to make error messages clearer.','line_number':1570,'multiline':False]