['text':' Copyright (C) 2018-present MongoDB, Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' This program is free software: you can redistribute it and/or modify','line_number':3,'multiline':False]['text':' it under the terms of the Server Side Public License, version 1,','line_number':4,'multiline':False]['text':' as published by MongoDB, Inc.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' This program is distributed in the hope that it will be useful,','line_number':7,'multiline':False]['text':' but WITHOUT ANY WARRANTY; without even the implied warranty of','line_number':8,'multiline':False]['text':' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the','line_number':9,'multiline':False]['text':' Server Side Public License for more details.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' You should have received a copy of the Server Side Public License','line_number':12,'multiline':False]['text':' along with this program. If not, see','line_number':13,'multiline':False]['text':' <http://www.mongodb.com/licensing/server-side-public-license>.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' As a special exception, the copyright holders give permission to link the','line_number':16,'multiline':False]['text':' code of portions of this program with the OpenSSL library under certain','line_number':17,'multiline':False]['text':' conditions as described in each individual source file and distribute','line_number':18,'multiline':False]['text':' linked combinations including the program with the OpenSSL library. You','line_number':19,'multiline':False]['text':' must comply with the Server Side Public License in all respects for','line_number':20,'multiline':False]['text':' all of the code used other than as permitted herein. If you modify file(s)','line_number':21,'multiline':False]['text':' with this exception, you may extend this exception to your version of the','line_number':22,'multiline':False]['text':' file(s), but you are not obligated to do so. If you do not wish to do so,','line_number':23,'multiline':False]['text':' delete this exception statement from your version. If you delete this','line_number':24,'multiline':False]['text':' exception statement from all source files in the program, then also delete','line_number':25,'multiline':False]['text':' it in the license file.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' type: (str) -> bool','line_number':44,'multiline':False]['text':' TODO (SERVER-50101): Remove 'multiversion::FeatureCompatibilityVersion' once IDL supports','line_number':51,'multiline':False]['text':' a commmand cpp_type of C++ enum.','line_number':52,'multiline':False]['text':' type: (str) -> bool','line_number':60,'multiline':False]['text':' type: (str) -> str','line_number':67,'multiline':False]['text':' type: (str) -> str','line_number':73,'multiline':False]['text':' type: (str, str) -> str','line_number':79,'multiline':False]['text':' type: (ast.Field, str) -> None','line_number':91,'multiline':False]['text':' type: () -> str','line_number':98,'multiline':False]['text':' type: () -> str','line_number':104,'multiline':False]['text':' type: () -> str','line_number':110,'multiline':False]['text':' type: () -> bool','line_number':116,'multiline':False]['text':' type: () -> bool','line_number':122,'multiline':False]['text':' type: (str) -> str','line_number':128,'multiline':False]['text':' type: (str, str) -> str','line_number':134,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':140,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':146,'multiline':False]['text':' type: () -> str','line_number':155,'multiline':False]['text':' type: () -> str','line_number':159,'multiline':False]['text':' type: () -> str','line_number':163,'multiline':False]['text':' type: () -> bool','line_number':167,'multiline':False]['text':' type: () -> bool','line_number':171,'multiline':False]['text':' type: (str) -> str','line_number':175,'multiline':False]['text':' type: (str, str) -> str','line_number':179,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':186,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':190,'multiline':False]['text':' type: (ast.Field, str, str, str) -> None','line_number':198,'multiline':False]['text':' type: () -> str','line_number':204,'multiline':False]['text':' type: () -> str','line_number':208,'multiline':False]['text':' type: () -> str','line_number':212,'multiline':False]['text':' type: () -> bool','line_number':216,'multiline':False]['text':' type: () -> bool','line_number':220,'multiline':False]['text':' type: (str) -> str','line_number':224,'multiline':False]['text':' type: (str, str) -> str','line_number':228,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':236,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':240,'multiline':False]['text':' type: (ast.Field) -> None','line_number':251,'multiline':False]['text':' type: () -> str','line_number':255,'multiline':False]['text':' type: () -> str','line_number':259,'multiline':False]['text':' type: () -> str','line_number':263,'multiline':False]['text':' type: () -> bool','line_number':267,'multiline':False]['text':' type: () -> bool','line_number':271,'multiline':False]['text':' type: (str) -> str','line_number':275,'multiline':False]['text':' type: (str, str) -> str','line_number':280,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':288,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':292,'multiline':False]['text':' type: (CppTypeBase, ast.Field, str) -> None','line_number':303,'multiline':False]['text':' type: () -> str','line_number':308,'multiline':False]['text':' type: () -> str','line_number':312,'multiline':False]['text':' type: () -> str','line_number':316,'multiline':False]['text':' type: () -> bool','line_number':320,'multiline':False]['text':' type: () -> bool','line_number':324,'multiline':False]['text':' type: (str) -> str','line_number':328,'multiline':False]['text':' type: (str, str) -> str','line_number':332,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':336,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':340,'multiline':False]['text':' type: () -> str','line_number':348,'multiline':False]['text':' type: () -> str','line_number':352,'multiline':False]['text':' type: () -> bool','line_number':356,'multiline':False]['text':' type: (str) -> str','line_number':362,'multiline':False]['text':' type: (str, str) -> str','line_number':369,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':379,'multiline':False]['text':' type: (str) -> Optional[str]','line_number':388,'multiline':False]['text':' type: () -> str','line_number':401,'multiline':False]['text':' type: () -> str','line_number':405,'multiline':False]['text':' type: () -> bool','line_number':409,'multiline':False]['text':' type: (str) -> str','line_number':415,'multiline':False]['text':' We need to convert between two different types of optional<T> and yet provide','line_number':420,'multiline':False]['text':' the ability for the user specifiy an uninitialized optional. This occurs','line_number':421,'multiline':False]['text':' for vector<mongo::StringData> and vector<std::string> paired together.','line_number':422,'multiline':False]['text':' For optionals around view types, do an explicit construction','line_number':432,'multiline':False]['text':' type: (str, str) -> str','line_number':439,'multiline':False]['text':' type: (ast.Field, str, bool) -> CppTypeBase','line_number':459,'multiline':False]['text':' type: (ast.Field) -> CppTypeBase','line_number':476,'multiline':False]['text':' type: (ast.Field) -> CppTypeBase','line_number':482,'multiline':False]['text':' type: (ast.Type) -> None','line_number':497,'multiline':False]['text':' type: (writer.IndentedTextWriter, str) -> str','line_number':503,'multiline':False]['text':' type: () -> bool','line_number':509,'multiline':False]['text':' type: (writer.IndentedTextWriter, str, bool) -> str','line_number':515,'multiline':False]['text':' type: (str, ast.Type, bool) -> str','line_number':521,'multiline':False]['text':' type: (ast.Type, str) -> None','line_number':563,'multiline':False]['text':' type: (writer.IndentedTextWriter, str) -> str','line_number':568,'multiline':False]['text':' type: () -> bool','line_number':574,'multiline':False]['text':' type: (writer.IndentedTextWriter, str, bool) -> str','line_number':578,'multiline':False]['text':' type: (writer.IndentedTextWriter, str) -> str','line_number':586,'multiline':False]['text':' Call a method like: Class::method(const BSONObj& value)','line_number':588,'multiline':False]['text':' Just pass the BSONObj through without trying to parse it.','line_number':594,'multiline':False]['text':' type: () -> bool','line_number':598,'multiline':False]['text':' type: (writer.IndentedTextWriter, str, bool) -> str','line_number':602,'multiline':False]['text':' SerializationContext is tied to tenant deserialization','line_number':605,'multiline':False]['text':' Provide options if custom shapification required.','line_number':608,'multiline':False]['text':' type: (writer.IndentedTextWriter, str) -> str','line_number':624,'multiline':False]['text':' Just pass the BSONObj through without trying to parse it.','line_number':631,'multiline':False]['text':' type: () -> bool','line_number':636,'multiline':False]['text':' type: (writer.IndentedTextWriter, str, bool) -> str','line_number':640,'multiline':False]['text':' type: (writer.IndentedTextWriter, str) -> str','line_number':652,'multiline':False]['text':' type: () -> bool','line_number':660,'multiline':False]['text':' type: (writer.IndentedTextWriter, str, bool) -> str','line_number':664,'multiline':False]['text':' For some types, we want to support custom serialization but defer most of the serialization to','line_number':680,'multiline':False]['text':' the core BSONElement class. This means that callers need to only process a string, a vector of','line_number':681,'multiline':False]['text':' bytes, or a integer, not a BSONElement or BSONObj.','line_number':682,'multiline':False]['text':' type: (ast.Type) -> Optional[BsonCppTypeBase]','line_number':684,'multiline':False]['text':' Does not support list of types','line_number':687,'multiline':False]['text':' Unsupported type','line_number':706,'multiline':False]