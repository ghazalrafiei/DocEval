['text':' Copyright (C) 2018-present MongoDB, Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' This program is free software: you can redistribute it and/or modify','line_number':3,'multiline':False]['text':' it under the terms of the Server Side Public License, version 1,','line_number':4,'multiline':False]['text':' as published by MongoDB, Inc.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' This program is distributed in the hope that it will be useful,','line_number':7,'multiline':False]['text':' but WITHOUT ANY WARRANTY; without even the implied warranty of','line_number':8,'multiline':False]['text':' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the','line_number':9,'multiline':False]['text':' Server Side Public License for more details.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' You should have received a copy of the Server Side Public License','line_number':12,'multiline':False]['text':' along with this program. If not, see','line_number':13,'multiline':False]['text':' <http://www.mongodb.com/licensing/server-side-public-license>.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' As a special exception, the copyright holders give permission to link the','line_number':16,'multiline':False]['text':' code of portions of this program with the OpenSSL library under certain','line_number':17,'multiline':False]['text':' conditions as described in each individual source file and distribute','line_number':18,'multiline':False]['text':' linked combinations including the program with the OpenSSL library. You','line_number':19,'multiline':False]['text':' must comply with the Server Side Public License in all respects for','line_number':20,'multiline':False]['text':' all of the code used other than as permitted herein. If you modify file(s)','line_number':21,'multiline':False]['text':' with this exception, you may extend this exception to your version of the','line_number':22,'multiline':False]['text':' file(s), but you are not obligated to do so. If you do not wish to do so,','line_number':23,'multiline':False]['text':' delete this exception statement from your version. If you delete this','line_number':24,'multiline':False]['text':' exception statement from all source files in the program, then also delete','line_number':25,'multiline':False]['text':' it in the license file.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' type: (errors.ParserContext, Union[syntax.Type, ast.Type], str) -> bool','line_number':44,'multiline':False]['text':' Any and Chain are only valid if they are the only bson types specified','line_number':48,'multiline':False]['text':' Validate bindata_subytpe','line_number':56,'multiline':False]['text':' type: (errors.ParserContext, Union[syntax.Type, ast.Type], str) -> bool','line_number':73,'multiline':False]['text':' Cannot mix non-scalar types into the list of types','line_number':94,'multiline':False]['text':' type: (errors.ParserContext, syntax.Type) -> None','line_number':103,'multiline':False]['text':' Validate naming restrictions','line_number':106,'multiline':False]['text':' type: (errors.ParserContext, Union[syntax.Type, ast.Type], str) -> None','line_number':114,'multiline':False]['text':' Validate cpp_type','line_number':117,'multiline':False]['text':' Do not allow StringData, use std::string instead.','line_number':118,'multiline':False]['text':' We do not support C++ char and float types for style reasons','line_number':122,'multiline':False]['text':' We do not support C++ builtin integer for style reasons','line_number':127,'multiline':False]['text':' Return early so we only throw one error for types like "signed short int"','line_number':132,'multiline':False]['text':' Check for std fixed integer types which are allowed','line_number':135,'multiline':False]['text':' Only allow 16-byte arrays since they are for MD5 and UUID','line_number':139,'multiline':False]['text':' Support vector for variable length BinData.','line_number':143,'multiline':False]['text':' Support variant for writeConcernW.','line_number':147,'multiline':False]['text':' Check for std fixed integer types which are not allowed. These are not allowed even if they','line_number':151,'multiline':False]['text':' have the "std::" prefix.','line_number':152,'multiline':False]['text':' type: (errors.ParserContext, Union[syntax.Type, ast.Type], str) -> None','line_number':163,'multiline':False]['text':' type: (errors.ParserContext, Union[syntax.Type, ast.Type], str) -> None','line_number':178,'multiline':False]['text':' Validate bson type restrictions','line_number':180,'multiline':False]['text':' For 'any', a deserializer is required but the user can try to get away with the default','line_number':188,'multiline':False]['text':' serialization for their C++ type.  An internal_only type is not associated with BSON','line_number':189,'multiline':False]['text':' and thus should not have a deserializer defined.','line_number':190,'multiline':False]['text':' Strings support custom serialization unlike other non-object scalar types','line_number':198,'multiline':False]['text':' Now, this is a list of scalar types','line_number':220,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec) -> None','line_number':229,'multiline':False]['text':' type: (errors.ParserContext, str, List[ast.Field], ast.Field) -> bool','line_number':237,'multiline':False]['text':' This is normally tested in the parser as part of duplicate detection in a map','line_number':240,'multiline':False]['text':' type: (syntax.Struct) -> str','line_number':253,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Struct, ast.Struct) -> None','line_number':259,'multiline':False]['text':' Check that unsafe_dangerous_disable_extra_field_duplicate_checks is used correctly','line_number':279,'multiline':False]['text':' Validate naming restrictions','line_number':290,'multiline':False]['text':' Merge chained types as chained fields','line_number':294,'multiline':False]['text':' Merge chained structs as a chained struct and ignored fields','line_number':305,'multiline':False]['text':' Parse the fields last so that they are serialized after chained stuff.','line_number':309,'multiline':False]['text':' Doc sequences are only supported in commands at the moment','line_number':324,'multiline':False]['text':' Verify that each field on the struct defines a query shape type on the field if and only if','line_number':335,'multiline':False]['text':' query_shape_component is defined on the struct.','line_number':336,'multiline':False]['text':' Fill out the field comparison_order property as needed','line_number':349,'multiline':False]['text':' If the user did not specify an ordering of fields, then number all fields in','line_number':351,'multiline':False]['text':' declared field.','line_number':352,'multiline':False]['text':' type: Set[int]','line_number':354,'multiline':False]['text':' type: (syntax.Struct) -> None','line_number':373,'multiline':False]['text':' Don't generate if no fields exist or it's already included in this struct','line_number':376,'multiline':False]['text':' This comes from basic_types.idl','line_number':381,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Struct) -> ast.Struct','line_number':394,'multiline':False]['text':' type: (syntax.Command) -> None','line_number':410,'multiline':False]['text':' Inject a "$db" which we can decode during command parsing','line_number':413,'multiline':False]['text':' This comes from basic_types.idl','line_number':417,'multiline':False]['text':' Commands that require namespaces do not need to have db defaulted in the constructor','line_number':421,'multiline':False]['text':' Inject "$tenant" for use by cluster administrators overriding tenant in multitenancy.','line_number':427,'multiline':False]['text':' This comes from basic_types.idl','line_number':431,'multiline':False]['text':' The $tenant field should be injected when serializing to OpMsgRequest and to','line_number':434,'multiline':False]['text':' BSONObjBuilder if it exists.','line_number':435,'multiline':False]['text':' Inject "expectPrefix" used to detect whether request contains a prefixed tenantId.','line_number':440,'multiline':False]['text':' type: (syntax.Struct) -> ast.Type','line_number':453,'multiline':False]['text':' Use Type to represent a struct-type field. (The Struct class is to generate a C++ class, not','line_number':454,'multiline':False]['text':' represent a field's type.)','line_number':455,'multiline':False]['text':' type: (errors.ParserContext, ast.Field, Union[syntax.Enum, syntax.Struct, syntax.Type]) -> None','line_number':467,'multiline':False]['text':' The signature includes Enum to match SymbolTable.resolve_field_type, but it's not allowed.','line_number':468,'multiline':False]['text':' Check that unsafe_dangerous_disable_extra_field_duplicate_checks is used correctly','line_number':478,'multiline':False]['text':' type: (errors.ParserContext, ast.Field, Union[syntax.VariantType, syntax.ArrayType]) -> None','line_number':489,'multiline':False]['text':' Validation doc_sequence types','line_number':522,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Command) -> ast.Field','line_number':527,'multiline':False]['text':' Validate naming restrictions','line_number':539,'multiline':False]['text':' Resolve the command type as a field','line_number':543,'multiline':False]['text':' Copy over only the needed information if this is a struct or a type.','line_number':558,'multiline':False]['text':' Validate merged type','line_number':572,'multiline':False]['text':' Validate merged type','line_number':575,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Command) -> ast.Field','line_number':582,'multiline':False]['text':' Resolve the command type as a field','line_number':588,'multiline':False]['text':' Resolution failed, we've recorded an error.','line_number':593,'multiline':False]['text':' type: (errors.ParserContext, common.SourceLocation, syntax.Enum, str) -> syntax.EnumValue','line_number':604,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, common.SourceLocation, str, str) -> str','line_number':617,'multiline':False]['text':' Look up the enum for "enum_name" in the symbol table','line_number':619,'multiline':False]['text':' Resolution failed, we've recorded an error.','line_number':624,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.AccessCheck) -> ast.AccessCheck','line_number':640,'multiline':False]['text':' type: (errors.ParserContext, List[ast.AccessCheck]) -> bool','line_number':685,'multiline':False]['text':' Produce pairs of resource_pattern and action type, then de-dup them','line_number':705,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Command) -> Optional[List[ast.AccessCheck]]','line_number':718,'multiline':False]['text':' List[ast.AccessCheck]','line_number':737,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Command) -> ast.Command','line_number':753,'multiline':False]['text':' Inject special fields used for command parsing','line_number':767,'multiline':False]['text':' type: (errors.ParserContext, syntax.Field) -> None','line_number':791,'multiline':False]['text':' type: (errors.ParserContext, Union[syntax.Field, ast.Field]) -> None','line_number':800,'multiline':False]['text':' type: (errors.ParserContext, syntax.VariantType, syntax.Field) -> None','line_number':807,'multiline':False]['text':' Check for duplicate BSON serialization types.','line_number':810,'multiline':False]['text':' type: (typing.Counter[str], List[str]) -> None','line_number':815,'multiline':False]['text':' Impossible: there's no IDL syntax for expressing nested variants.','line_number':820,'multiline':False]['text':' type: (errors.ParserContext, syntax.ArrayType, syntax.Field) -> None','line_number':849,'multiline':False]['text':' type: (errors.ParserContext, ast.Field) -> None','line_number':857,'multiline':False]['text':' A "chain" type should never appear as a field.','line_number':870,'multiline':False]['text':' type: (errors.ParserContext, ast.Field) -> None','line_number':876,'multiline':False]['text':' The only allowed BSON type for a doc_sequence field is "object"','line_number':883,'multiline':False]['text':' type: (str, str) -> str','line_number':890,'multiline':False]['text':' Default deserializer','line_number':892,'multiline':False]['text':' Global function','line_number':896,'multiline':False]['text':' Method is full qualified already','line_number':900,'multiline':False]['text':' Get the unqualified type name','line_number':904,'multiline':False]['text':' Method is prefixed with just the type name','line_number':907,'multiline':False]['text':' type: (syntax.Expression, bool) -> ast.Expression','line_number':915,'multiline':False]['text':' bool','line_number':928,'multiline':False]['text':' int32_t','line_number':933,'multiline':False]['text':' pylint: disable=chained-comparison','line_number':936,'multiline':False]['text':' float','line_number':942,'multiline':False]['text':' std::string','line_number':949,'multiline':False]['text':' Unable to bind expression.','line_number':958,'multiline':False]['text':' type: (errors.ParserContext, syntax.Validator) -> ast.Validator','line_number':963,'multiline':False]['text':' Parse syntax value as numeric if possible.','line_number':968,'multiline':False]['text':' This only happens if we have a non-numeric literal.','line_number':976,'multiline':False]['text':' type: (syntax.Condition, str) -> ast.Condition','line_number':987,'multiline':False]['text':' type: (syntax.Type) -> ast.Type','line_number':1010,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, syntax.Field) -> ast.Field','line_number':1036,'multiline':False]['text':' Ignore the 'unstable' field since it's deprecated by the 'stability' field and only there at parsing level','line_number':1052,'multiline':False]['text':' to provide compatibility support.','line_number':1053,'multiline':False]['text':' Validate naming restrictions','line_number':1066,'multiline':False]['text':' Doc sequences are only supported for arrays','line_number':1091,'multiline':False]['text':' Copy over only the needed information if this is a struct or a type.','line_number':1099,'multiline':False]['text':' syntax_symbol is an Array for arrays of variant.','line_number':1114,'multiline':False]['text':' Validate merged type','line_number':1128,'multiline':False]['text':' Validate merged type','line_number':1131,'multiline':False]['text':' Validation doc_sequence types','line_number':1134,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, common.SourceLocation, syntax.ChainedType) -> ast.Field','line_number':1148,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec, ast.Struct, syntax.ChainedStruct) -> None','line_number':1177,'multiline':False]['text':' chained struct cannot be strict unless it is inlined','line_number':1191,'multiline':False]['text':' Configure a field for the chained struct.','line_number':1200,'multiline':False]['text':' Merge all the fields from resolved struct into this ast struct.','line_number':1213,'multiline':False]['text':' Don't use internal fields in chained types, stick to local access only','line_number':1216,'multiline':False]['text':' For non-inlined structs, mark them as ignore','line_number':1225,'multiline':False]['text':' type: (errors.ParserContext, syntax.IDLSpec) -> ast.Global','line_number':1232,'multiline':False]['text':' Parser rule makes it impossible to have both name and register/store.','line_number':1252,'multiline':False]['text':' If no namespace has been set, default it do "mongo"','line_number':1260,'multiline':False]['text':' type: (errors.ParserContext, syntax.Enum) -> None','line_number':1267,'multiline':False]['text':' Check they are all ints','line_number':1270,'multiline':False]['text':' type: Set[int]','line_number':1271,'multiline':False]['text':' type: (errors.ParserContext, syntax.Enum) -> ast.Enum','line_number':1283,'multiline':False]['text':' type: Set[str]','line_number':1310,'multiline':False]['text':' Check the values are unique','line_number':1314,'multiline':False]['text':' type: (errors.ParserContext, ast.ServerParameter, syntax.ServerParameter) -> ast.ServerParameter','line_number':1325,'multiline':False]['text':' Fields specific to bound and unbound standard params.','line_number':1328,'multiline':False]['text':' Fields specific to specialized stroage.','line_number':1334,'multiline':False]['text':' If set_at is cluster, then set must be overridden. Otherwise, use the parsed value.','line_number':1353,'multiline':False]['text':' type: (errors.ParserContext, ast.ServerParameter, syntax.ServerParameter) -> ast.ServerParameter','line_number':1360,'multiline':False]['text':' Fields specific to specialized and unbound standard params.','line_number':1363,'multiline':False]['text':' type: (errors.ParserContext, syntax.ServerParameter) -> str','line_number':1390,'multiline':False]['text':' Readonly may not be mixed with startup or runtime','line_number':1394,'multiline':False]['text':' Cluster-wide parameters may not be mixed with startup or runtime.','line_number':1398,'multiline':False]['text':' They are implicitly runtime-only.','line_number':1399,'multiline':False]['text':' Can't happen based on above logic.','line_number':1421,'multiline':False]['text':' type: (errors.ParserContext, syntax.ServerParameter) -> ast.ServerParameter','line_number':1427,'multiline':False]['text':' type: (errors.ParserContext, syntax.FeatureFlag) -> ast.ServerParameter','line_number':1451,'multiline':False]['text':' Feature flags that default to false must not have a version','line_number':1461,'multiline':False]['text':' Feature flags that default to true and should be FCV gated are required to have a version','line_number':1466,'multiline':False]['text':' Feature flags that should not be FCV gated must not have a version','line_number':1471,'multiline':False]['text':' type: (str) -> bool','line_number':1490,'multiline':False]['text':' type: (List[str]) -> str','line_number':1496,'multiline':False]['text':' cli + ini','line_number':1515,'multiline':False]['text':' cli + yaml','line_number':1517,'multiline':False]['text':' ini + yaml','line_number':1518,'multiline':False]['text':' type: (errors.ParserContext, syntax.Global, syntax.ConfigOption) -> ast.ConfigOption','line_number':1525,'multiline':False]['text':' If the "dotted name" is usable as a "short name", mirror it by default.','line_number':1550,'multiline':False]['text':' Compose short_name/single_name into boost::program_options format.','line_number':1554,'multiline':False]['text':' Commonly repeated attributes section and source may be set in globals.','line_number':1579,'multiline':False]['text':' Parse single digit, closed range, or open range of digits.','line_number':1604,'multiline':False]['text':' Make a single number behave like a range of that number, (e.g. "2" -> "2-2").','line_number':1607,'multiline':False]['text':' type: (syntax.IDLSpec) -> ast.IDLBoundSpec','line_number':1627,'multiline':False]['text':' Check enums before structs to ensure they are valid','line_number':1638,'multiline':False]