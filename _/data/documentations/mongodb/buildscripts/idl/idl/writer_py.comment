['text':' Copyright (C) 2018-present MongoDB, Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' This program is free software: you can redistribute it and/or modify','line_number':3,'multiline':False]['text':' it under the terms of the Server Side Public License, version 1,','line_number':4,'multiline':False]['text':' as published by MongoDB, Inc.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' This program is distributed in the hope that it will be useful,','line_number':7,'multiline':False]['text':' but WITHOUT ANY WARRANTY; without even the implied warranty of','line_number':8,'multiline':False]['text':' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the','line_number':9,'multiline':False]['text':' Server Side Public License for more details.','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' You should have received a copy of the Server Side Public License','line_number':12,'multiline':False]['text':' along with this program. If not, see','line_number':13,'multiline':False]['text':' <http://www.mongodb.com/licensing/server-side-public-license>.','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' As a special exception, the copyright holders give permission to link the','line_number':16,'multiline':False]['text':' code of portions of this program with the OpenSSL library under certain','line_number':17,'multiline':False]['text':' conditions as described in each individual source file and distribute','line_number':18,'multiline':False]['text':' linked combinations including the program with the OpenSSL library. You','line_number':19,'multiline':False]['text':' must comply with the Server Side Public License in all respects for','line_number':20,'multiline':False]['text':' all of the code used other than as permitted herein. If you modify file(s)','line_number':21,'multiline':False]['text':' with this exception, you may extend this exception to your version of the','line_number':22,'multiline':False]['text':' file(s), but you are not obligated to do so. If you do not wish to do so,','line_number':23,'multiline':False]['text':' delete this exception statement from your version. If you delete this','line_number':24,'multiline':False]['text':' exception statement from all source files in the program, then also delete','line_number':25,'multiline':False]['text':' it in the license file.','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' Number of spaces to indent code','line_number':35,'multiline':False]['text':' type: (int) -> str','line_number':40,'multiline':False]['text':' type: (int, str) -> str','line_number':50,'multiline':False]['text':' type: (str) -> bool','line_number':58,'multiline':False]['text':' type: (str) -> str','line_number':69,'multiline':False]['text':' type: (str) -> str','line_number':78,'multiline':False]['text':' TODO: in the future, we may want to support full-qualified calls to static methods','line_number':80,'multiline':False]['text':' Strip the global prefix from enum functions','line_number':81,'multiline':False]['text':' type: (io.StringIO) -> None','line_number':103,'multiline':False]['text':' type: Mapping[str, str]','line_number':107,'multiline':False]['text':' type: (str) -> None','line_number':110,'multiline':False]['text':' type: () -> None','line_number':116,'multiline':False]['text':' type: () -> None','line_number':121,'multiline':False]['text':' type: (str) -> None','line_number':127,'multiline':False]['text':' type: (Mapping[str,str]) -> None','line_number':133,'multiline':False]['text':' type: () -> None','line_number':139,'multiline':False]['text':' type: (str) -> None','line_number':145,'multiline':False]['text':' type: () -> None','line_number':152,'multiline':False]['text':' type: (IndentedTextWriter, Mapping[str,str]) -> None','line_number':161,'multiline':False]['text':' type: () -> None','line_number':167,'multiline':False]['text':' type: (*str) -> None','line_number':172,'multiline':False]['text':' type: () -> None','line_number':181,'multiline':False]['text':' type: (*str) -> None','line_number':186,'multiline':False]['text':' type: () -> None','line_number':195,'multiline':False]['text':' type: () -> None','line_number':200,'multiline':False]['text':' type: (*str) -> None','line_number':205,'multiline':False]['text':' type: (IndentedTextWriter, str, str) -> None','line_number':214,'multiline':False]['text':' type: () -> None','line_number':221,'multiline':False]['text':' type: (*str) -> None','line_number':227,'multiline':False]['text':' type: (IndentedTextWriter, List[str]) -> None','line_number':237,'multiline':False]['text':' type: () -> None','line_number':243,'multiline':False]['text':' type: (*str) -> None','line_number':249,'multiline':False]['text':' type: (IndentedTextWriter, str, str) -> None','line_number':261,'multiline':False]['text':' type: () -> None','line_number':268,'multiline':False]['text':' type: (*str) -> None','line_number':273,'multiline':False]['text':' type: (MultiBlock, List[WriterBlock]) -> None','line_number':282,'multiline':False]['text':' type: () -> None','line_number':287,'multiline':False]['text':' type: (*str) -> None','line_number':293,'multiline':False]['text':' type: (List[str]) -> str','line_number':300,'multiline':False]['text':' type: (List[str], IndentedTextWriter, Callable[[str], None]) -> None','line_number':324,'multiline':False]['text':' type: (str, List[str], IndentedTextWriter, Callable[[str], None]) -> None','line_number':336,'multiline':False]['text':' No duplicate strings allowed','line_number':343,'multiline':False]['text':' Base case: one word','line_number':348,'multiline':False]['text':' Check remaining string is a string match','line_number':350,'multiline':False]['text':' If there is no trailing text, we just need to check length to validate we matched','line_number':358,'multiline':False]['text':' Optimization:','line_number':362,'multiline':False]['text':' Checking strings of length 1 or even length is efficient. Strings of 3 byte length are','line_number':363,'multiline':False]['text':' inefficient to check as they require two comparisons (1 uint16 and 1 uint8) but 4 byte','line_number':364,'multiline':False]['text':' length strings require just 1. Since we know the field name is zero terminated, we can','line_number':365,'multiline':False]['text':' just use memcmp and compare with the trailing null byte.','line_number':366,'multiline':False]['text':' Handle the case where one word is a prefix of another','line_number':376,'multiline':False]['text':' For instance, ["short", "shorter"] will eventually call this function with','line_number':377,'multiline':False]['text':' (prefix = "short", ["", "er"]) as the tuple of prefix and list of words','line_number':378,'multiline':False]['text':' Filter out empty words','line_number':385,'multiline':False]['text':' Optimization for a common prefix','line_number':388,'multiline':False]['text':' Example: ["word1", "word2"]','line_number':389,'multiline':False]['text':' Instead of generating a trie to check for letters individually (i.e. ["w", "o", "r", "d"]),','line_number':390,'multiline':False]['text':' we check for the prefix all at once ("word")','line_number':391,'multiline':False]['text':' Handle the main case for the trie','line_number':406,'multiline':False]['text':' We have a list of non-empty words with no common prefix between them, all the first letters','line_number':407,'multiline':False]['text':' are distinct','line_number':408,'multiline':False]