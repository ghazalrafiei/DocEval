['text':'*
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 ','line_number':1,'multiline':True]['text':'*
 * This struct stores an array of symbols with the size so arrays of
 * symbols are easily accessed within another array.
 ','line_number':38,'multiline':True]['text':'*
 * Clean up everything before exit.
 ','line_number':48,'multiline':True]['text':' not freeing symbol_tables ptr since that is allocated on main's stack','line_number':75,'multiline':False]['text':'*
 * Clean up an array of strings.
 * @param char* output - input arg, the string array to clean up
 * @param int lines - input arg, how many strings are in the output
 ','line_number':92,'multiline':True]['text':'*
 * Generic function for running a command and getting the output
 * as an array of strings.
 * @param char* command - input arg, the string which is the command to run
 * @param int* num_lines - ouput arg, after the command is run, the size of the return  array
 * @param int* status - ouput arg, after the command is run, the exit status of the command
 * @return char** - a pointer to an array of strings that is each line of the output
 ','line_number':110,'multiline':True]['text':'*
 * Get the ldd output, and parsing the path for the dependent library.
 * @param char* target - input arg, the binary to run ldd on
 * @param char* ld_libpath - input arg, the LD_LIBRARY_PATH to use to find libraries
 * @param int* return_size - output arg, the size of the array of strings returned
 * @return char** - the array of strings for each line of output
 ','line_number':181,'multiline':True]['text':'*
 * Get the nm of undefined symbols for the target library so we can search for
 * those missing symbols in other libraries.
 * @param char* target - input arg, the binary to run nm on
 * @param int* return_size - output arg, the size of the array of strings returned
 * @return char** - the array of strings for each line of output
 ','line_number':225,'multiline':True]['text':'*
 * Get the nm of defined symbols for the dependent library so we can search for
 * matching symbols.
 * @param char* lib - input arg, the binary to run nm on
 * @param int* return_size - output arg, the size of the array of strings returned
 * @return char** - the array of strings for each line of output
 ','line_number':262,'multiline':True]['text':' For the given target library first we will extract the libraries','line_number':313,'multiline':False]['text':' it depends on and any symbols that are undefined that should','line_number':314,'multiline':False]['text':' be defined in one of those libraries.','line_number':315,'multiline':False]['text':' Now pre-emptively collect all the symbols from all the libraries','line_number':329,'multiline':False]['text':' the target library depends on.','line_number':330,'multiline':False]['text':' Now loop through all the undefined symbols and discover the first library','line_number':341,'multiline':False]['text':' that the missing symbol is defined in. Output to target file in json format.','line_number':342,'multiline':False]['text':' delete the last comma','line_number':360,'multiline':False]