['text':'
    __ _____ _____ _____
 __|  |   __|     |   | |  JSON for Modern C++
|  |  |__   |  |  | | | |  version 3.9.1
|_____|_____|_____|_|___|  https://github.com/nlohmann/json

Licensed under the MIT License <http://opensource.org/licenses/MIT>.
SPDX-License-Identifier: MIT
Copyright (c) 2013-2019 Niels Lohmann <http://nlohmann.me>.

Permission is hereby  granted, free of charge, to any  person obtaining a copy
of this software and associated  documentation files (the "Software"), to deal
in the Software  without restriction, including without  limitation the rights
to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
','line_number':1,'multiline':True]['text':' all_of, find, for_each','line_number':37,'multiline':False]['text':' nullptr_t, ptrdiff_t, size_t','line_number':38,'multiline':False]['text':' hash, less','line_number':39,'multiline':False]['text':' initializer_list','line_number':40,'multiline':False]['text':' istream, ostream','line_number':42,'multiline':False]['text':' JSON_NO_IO','line_number':43,'multiline':False]['text':' random_access_iterator_tag','line_number':44,'multiline':False]['text':' unique_ptr','line_number':45,'multiline':False]['text':' accumulate','line_number':46,'multiline':False]['text':' string, stoi, to_string','line_number':47,'multiline':False]['text':' declval, forward, move, pair, swap','line_number':48,'multiline':False]['text':' vector','line_number':49,'multiline':False]['text':' #include <nlohmann/adl_serializer.hpp>','line_number':51,'multiline':False]['text':' #include <nlohmann/detail/conversions/from_json.hpp>','line_number':57,'multiline':False]['text':' transform','line_number':60,'multiline':False]['text':' array','line_number':61,'multiline':False]['text':' forward_list','line_number':62,'multiline':False]['text':' inserter, front_inserter, end','line_number':63,'multiline':False]['text':' map','line_number':64,'multiline':False]['text':' string','line_number':65,'multiline':False]['text':' tuple, make_tuple','line_number':66,'multiline':False]['text':' is_arithmetic, is_same, is_enum, underlying_type, is_convertible','line_number':67,'multiline':False]['text':' unordered_map','line_number':68,'multiline':False]['text':' pair, declval','line_number':69,'multiline':False]['text':' valarray','line_number':70,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':72,'multiline':False]['text':' exception','line_number':75,'multiline':False]['text':' runtime_error','line_number':76,'multiline':False]['text':' to_string','line_number':77,'multiline':False]['text':' vector','line_number':78,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':80,'multiline':False]['text':' array','line_number':83,'multiline':False]['text':' size_t','line_number':84,'multiline':False]['text':' uint8_t','line_number':85,'multiline':False]['text':' string','line_number':86,'multiline':False]['text':'/////////////////////////','line_number':92,'multiline':False]['text':' JSON type enumeration //','line_number':93,'multiline':False]['text':'/////////////////////////','line_number':94,'multiline':False]['text':'!
@brief the JSON type enumeration

This enumeration collects the different JSON types. It is internally used to
distinguish the stored values, and the functions @ref basic_json::is_null(),
@ref basic_json::is_object(), @ref basic_json::is_array(),
@ref basic_json::is_string(), @ref basic_json::is_boolean(),
@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),
@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),
@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and
@ref basic_json::is_structured() rely on it.

@note There are three enumeration entries (number_integer, number_unsigned, and
number_float), because the library distinguishes these three types for numbers:
@ref basic_json::number_unsigned_t is used for unsigned integers,
@ref basic_json::number_integer_t is used for signed integers, and
@ref basic_json::number_float_t is used for floating-point numbers or to
approximate integers which do not fit in the limits of their respective type.

@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON
value with the default value for a given type

@since version 1.0.0
','line_number':96,'multiline':True]['text':'/< null value','line_number':122,'multiline':False]['text':'/< object (unordered set of name/value pairs)','line_number':123,'multiline':False]['text':'/< array (ordered collection of values)','line_number':124,'multiline':False]['text':'/< string value','line_number':125,'multiline':False]['text':'/< boolean value','line_number':126,'multiline':False]['text':'/< number value (signed integer)','line_number':127,'multiline':False]['text':'/< number value (unsigned integer)','line_number':128,'multiline':False]['text':'/< number value (floating-point)','line_number':129,'multiline':False]['text':'/< binary array (ordered collection of bytes)','line_number':130,'multiline':False]['text':'/< discarded by the parser callback function','line_number':131,'multiline':False]['text':'!
@brief comparison operator for JSON types

Returns an ordering that is similar to Python:
- order: null < boolean < number < object < array < string < binary
- furthermore, each type is not smaller than itself
- discarded values are not comparable
- binary is represented as a b"" string in python and directly comparable to a
  string; however, making a binary array directly comparable with a string would
  be surprising behavior in a JSON file.

@since version 1.0.0
','line_number':134,'multiline':True]['text':' null ','line_number':150,'multiline':True]['text':' object ','line_number':150,'multiline':True]['text':' array ','line_number':150,'multiline':True]['text':' string ','line_number':150,'multiline':True]['text':' boolean ','line_number':151,'multiline':True]['text':' integer ','line_number':151,'multiline':True]['text':' unsigned ','line_number':151,'multiline':True]['text':' float ','line_number':151,'multiline':True]['text':' binary ','line_number':152,'multiline':True]['text':' namespace detail','line_number':160,'multiline':False]['text':' namespace nlohmann','line_number':161,'multiline':False]['text':' #include <nlohmann/detail/string_escape.hpp>','line_number':163,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':167,'multiline':False]['text':' pair','line_number':170,'multiline':False]['text':' #include <nlohmann/thirdparty/hedley/hedley.hpp>','line_number':171,'multiline':False]['text':' Hedley - https://nemequ.github.io/hedley
 * Created by Evan Nemerson <evan@nemerson.com>
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to
 * the public domain worldwide. This software is distributed without
 * any warranty.
 *
 * For details, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 * SPDX-License-Identifier: CC0-1.0
 ','line_number':174,'multiline':True]['text':' JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_ is for
   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. ','line_number':958,'multiline':True]['text':' SAL ','line_number':1296,'multiline':True]['text':' SAL ','line_number':1882,'multiline':True]['text':' SAL ','line_number':1896,'multiline':True]['text':' JSON_HEDLEY_IS_CONSTEXPR_ is for
   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. ','line_number':1922,'multiline':True]['text':' Remaining macros are deprecated. ','line_number':2169,'multiline':True]['text':' !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < X) ','line_number':2215,'multiline':True]['text':' This file contains all internal macro definitions','line_number':2218,'multiline':False]['text':' You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them','line_number':2219,'multiline':False]['text':' exclude unsupported compilers','line_number':2221,'multiline':False]['text':' C++ language standard detection','line_number':2234,'multiline':False]['text':' if the user manually specified the used c++ version this is skipped','line_number':2235,'multiline':False]['text':' fix for issue #464','line_number':2241,'multiline':False]['text':' the cpp 11 flag is always specified because it is the minimal required version','line_number':2247,'multiline':False]['text':' disable documentation warnings on clang','line_number':2251,'multiline':False]['text':' allow to disable exceptions','line_number':2257,'multiline':False]['text':' override exception macros','line_number':2271,'multiline':False]['text':' allow to override assert','line_number':2291,'multiline':False]['text':' assert','line_number':2293,'multiline':False]['text':' allow to access some private functions (needed by the test suite)','line_number':2297,'multiline':False]['text':'!
@brief macro to briefly define a mapping between an enum and JSON
@def NLOHMANN_JSON_SERIALIZE_ENUM
@since version 3.4.0
','line_number':2304,'multiline':True]['text':' Ugly macros to avoid uglier copy-paste when specializing basic_json. They','line_number':2335,'multiline':False]['text':' may be removed in the future once the class is split.','line_number':2336,'multiline':False]['text':' Macros to simplify conversion from/to types','line_number':2352,'multiline':False]['text':'!
@brief macro
@def NLOHMANN_DEFINE_TYPE_INTRUSIVE
@since version 3.9.0
','line_number':2488,'multiline':True]['text':'!
@brief macro
@def NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE
@since version 3.9.0
','line_number':2497,'multiline':True]['text':'!
@brief replace all occurrences of a substring by another string

@param[in,out] s  the string to manipulate; changed so that all
               occurrences of @a f are replaced with @a t
@param[in]     f  the substring to replace with @a t
@param[in]     t  the string to replace @a f

@pre The search string @a f must not be empty. **This precondition is
enforced with an assertion.**

@since version 2.0.0
','line_number':2522,'multiline':True]['text':' find first occurrence of f','line_number':2539,'multiline':False]['text':' make sure f was found','line_number':2540,'multiline':False]['text':' replace with t, and','line_number':2541,'multiline':False]['text':' find next occurrence of f','line_number':2542,'multiline':False]['text':'!
 * @brief string escaping as described in RFC 6901 (Sect. 4)
 * @param[in] s string to escape
 * @return    escaped string
 *
 * Note the order of escaping "~" to "~0" and "/" to "~1" is important.
 ','line_number':2546,'multiline':True]['text':'!
 * @brief string unescaping as described in RFC 6901 (Sect. 4)
 * @param[in] s string to unescape
 * @return    unescaped string
 *
 * Note the order of escaping "~1" to "/" and "~0" to "~" is important.
 ','line_number':2560,'multiline':True]['text':' namespace detail','line_number':2573,'multiline':False]['text':' namespace nlohmann','line_number':2574,'multiline':False]['text':' #include <nlohmann/detail/input/position_t.hpp>','line_number':2576,'multiline':False]['text':' size_t','line_number':2579,'multiline':False]['text':'/ struct to capture the start position of the current token','line_number':2585,'multiline':False]['text':'/ the total number of characters read','line_number':2588,'multiline':False]['text':'/ the number of characters read in the current line','line_number':2590,'multiline':False]['text':'/ the number of lines read','line_number':2592,'multiline':False]['text':'/ conversion to size_t to preserve SAX interface','line_number':2595,'multiline':False]['text':' namespace detail','line_number':2602,'multiline':False]['text':' namespace nlohmann','line_number':2603,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':2605,'multiline':False]['text':'//////////////','line_number':2612,'multiline':False]['text':' exceptions //','line_number':2613,'multiline':False]['text':'//////////////','line_number':2614,'multiline':False]['text':'!
@brief general exception of the @ref basic_json class

This class is an extension of `std::exception` objects with a member @a id for
exception ids. It is used as the base class for all exceptions thrown by the
@ref basic_json class. This class can hence be used as "wildcard" to catch
exceptions.

Subclasses:
- @ref parse_error for exceptions indicating a parse error
- @ref invalid_iterator for exceptions indicating errors with iterators
- @ref type_error for exceptions indicating executing a member function with
                  a wrong type
- @ref out_of_range for exceptions indicating access out of the defined range
- @ref other_error for exceptions indicating other library errors

@internal
@note To have nothrow-copy-constructible exceptions, we internally use
      `std::runtime_error` which can cope with arbitrary-length error messages.
      Intermediate strings are built with static functions and then passed to
      the actual constructor.
@endinternal

@liveexample{The following code shows how arbitrary library exceptions can be
caught.,exception}

@since version 3.0.0
','line_number':2616,'multiline':True]['text':'/ returns the explanatory string','line_number':2647,'multiline':False]['text':'/ the id of the exception','line_number':2653,'multiline':False]['text':' NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)','line_number':2654,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':2700,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':2701,'multiline':False]['text':'/ an exception object as storage for error messages','line_number':2722,'multiline':False]['text':'!
@brief exception indicating a parse error

This exception is thrown by the library when a parse error occurs. Parse errors
can occur during the deserialization of JSON text, CBOR, MessagePack, as well
as when using JSON Patch.

Member @a byte holds the byte index of the last read character in the input
file.

Exceptions have ids 1xx.

name / id                      | example message | description
------------------------------ | --------------- | -------------------------
json.exception.parse_error.101 | parse error at 2: unexpected end of input; expected string literal | This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member @a byte indicates the error position.
json.exception.parse_error.102 | parse error at 14: missing or wrong low surrogate | JSON uses the `\uxxxx` format to describe Unicode characters. Code points above above 0xFFFF are split into two `\uxxxx` entries ("surrogate pairs"). This error indicates that the surrogate pair is incomplete or contains an invalid code point.
json.exception.parse_error.103 | parse error: code points above 0x10FFFF are invalid | Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid.
json.exception.parse_error.104 | parse error: JSON patch must be an array of objects | [RFC 6902](https://tools.ietf.org/html/rfc6902) requires a JSON Patch document to be a JSON document that represents an array of objects.
json.exception.parse_error.105 | parse error: operation must have string member 'op' | An operation of a JSON Patch document must contain exactly one "op" member, whose value indicates the operation to perform. Its value must be one of "add", "remove", "replace", "move", "copy", or "test"; other values are errors.
json.exception.parse_error.106 | parse error: array index '01' must not begin with '0' | An array index in a JSON Pointer ([RFC 6901](https://tools.ietf.org/html/rfc6901)) may be `0` or any number without a leading `0`.
json.exception.parse_error.107 | parse error: JSON pointer must be empty or begin with '/' - was: 'foo' | A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a `/` character.
json.exception.parse_error.108 | parse error: escape character '~' must be followed with '0' or '1' | In a JSON Pointer, only `~0` and `~1` are valid escape sequences.
json.exception.parse_error.109 | parse error: array index 'one' is not a number | A JSON Pointer array index must be a number.
json.exception.parse_error.110 | parse error at 1: cannot read 2 bytes from vector | When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read.
json.exception.parse_error.112 | parse error at 1: error reading CBOR; last byte: 0xF8 | Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read.
json.exception.parse_error.113 | parse error at 2: expected a CBOR string; last byte: 0x98 | While parsing a map key, a value that is not a string has been read.
json.exception.parse_error.114 | parse error: Unsupported BSON record type 0x0F | The parsing of the corresponding BSON record type is not implemented (yet).
json.exception.parse_error.115 | parse error at byte 5: syntax error while parsing UBJSON high-precision number: invalid number text: 1A | A UBJSON high-precision number could not be parsed.

@note For an input with n bytes, 1 is the index of the first character and n+1
      is the index of the terminating null byte or the end of file. This also
      holds true when reading a byte vector (CBOR or MessagePack).

@liveexample{The following code shows how a `parse_error` exception can be
caught.,parse_error}

@sa - @ref exception for the base class of the library exceptions
@sa - @ref invalid_iterator for exceptions indicating errors with iterators
@sa - @ref type_error for exceptions indicating executing a member function with
                    a wrong type
@sa - @ref out_of_range for exceptions indicating access out of the defined range
@sa - @ref other_error for exceptions indicating other library errors

@since version 3.0.0
','line_number':2726,'multiline':True]['text':'!
    @brief create a parse error exception
    @param[in] id_       the id of the exception
    @param[in] pos       the position where the error occurred (or with
                         chars_read_total=0 if the position cannot be
                         determined)
    @param[in] what_arg  the explanatory string
    @return parse_error object
    ','line_number':2774,'multiline':True]['text':'!
    @brief byte index of the parse error

    The byte index of the last read character in the input file.

    @note For an input with n bytes, 1 is the index of the first character and
          n+1 is the index of the terminating null byte or the end of file.
          This also holds true when reading a byte vector (CBOR or MessagePack).
    ','line_number':2800,'multiline':True]['text':'!
@brief exception indicating errors with iterators

This exception is thrown if iterators passed to a library function do not match
the expected semantics.

Exceptions have ids 2xx.

name / id                           | example message | description
----------------------------------- | --------------- | -------------------------
json.exception.invalid_iterator.201 | iterators are not compatible | The iterators passed to constructor @ref basic_json(InputIT first, InputIT last) are not compatible, meaning they do not belong to the same container. Therefore, the range (@a first, @a last) is invalid.
json.exception.invalid_iterator.202 | iterator does not fit current value | In an erase or insert function, the passed iterator @a pos does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion.
json.exception.invalid_iterator.203 | iterators do not fit current value | Either iterator passed to function @ref erase(IteratorType first, IteratorType last) does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from.
json.exception.invalid_iterator.204 | iterators out of range | When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (@ref begin(), @ref end()), because this is the only way the single stored value is expressed. All other ranges are invalid.
json.exception.invalid_iterator.205 | iterator out of range | When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the @ref begin() iterator, because it is the only way to address the stored value. All other iterators are invalid.
json.exception.invalid_iterator.206 | cannot construct with iterators from null | The iterators passed to constructor @ref basic_json(InputIT first, InputIT last) belong to a JSON null value and hence to not define a valid range.
json.exception.invalid_iterator.207 | cannot use key() for non-object iterators | The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key.
json.exception.invalid_iterator.208 | cannot use operator[] for object iterators | The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.
json.exception.invalid_iterator.209 | cannot use offsets with object iterators | The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered.
json.exception.invalid_iterator.210 | iterators do not fit | The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (@a first, @a last) is invalid.
json.exception.invalid_iterator.211 | passed iterators may not belong to container | The iterator range passed to the insert function must not be a subrange of the container to insert to.
json.exception.invalid_iterator.212 | cannot compare iterators of different containers | When two iterators are compared, they must belong to the same container.
json.exception.invalid_iterator.213 | cannot compare order of object iterators | The order of object iterators cannot be compared, because JSON objects are unordered.
json.exception.invalid_iterator.214 | cannot get value | Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to @ref begin().

@liveexample{The following code shows how an `invalid_iterator` exception can be
caught.,invalid_iterator}

@sa - @ref exception for the base class of the library exceptions
@sa - @ref parse_error for exceptions indicating a parse error
@sa - @ref type_error for exceptions indicating executing a member function with
                    a wrong type
@sa - @ref out_of_range for exceptions indicating access out of the defined range
@sa - @ref other_error for exceptions indicating other library errors

@since version 3.0.0
','line_number':2822,'multiline':True]['text':'!
@brief exception indicating executing a member function with a wrong type

This exception is thrown in case of a type error; that is, a library function is
executed on a JSON value whose type does not match the expected semantics.

Exceptions have ids 3xx.

name / id                     | example message | description
----------------------------- | --------------- | -------------------------
json.exception.type_error.301 | cannot create object from initializer list | To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead.
json.exception.type_error.302 | type must be object, but is array | During implicit or explicit value conversion, the JSON type must be compatible to the target type. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types.
json.exception.type_error.303 | incompatible ReferenceType for get_ref, actual type is object | To retrieve a reference to a value stored in a @ref basic_json object with @ref get_ref, the type of the reference must match the value type. For instance, for a JSON array, the @a ReferenceType must be @ref array_t &.
json.exception.type_error.304 | cannot use at() with string | The @ref at() member functions can only be executed for certain JSON types.
json.exception.type_error.305 | cannot use operator[] with string | The @ref operator[] member functions can only be executed for certain JSON types.
json.exception.type_error.306 | cannot use value() with string | The @ref value() member functions can only be executed for certain JSON types.
json.exception.type_error.307 | cannot use erase() with string | The @ref erase() member functions can only be executed for certain JSON types.
json.exception.type_error.308 | cannot use push_back() with string | The @ref push_back() and @ref operator+= member functions can only be executed for certain JSON types.
json.exception.type_error.309 | cannot use insert() with | The @ref insert() member functions can only be executed for certain JSON types.
json.exception.type_error.310 | cannot use swap() with number | The @ref swap() member functions can only be executed for certain JSON types.
json.exception.type_error.311 | cannot use emplace_back() with string | The @ref emplace_back() member function can only be executed for certain JSON types.
json.exception.type_error.312 | cannot use update() with string | The @ref update() member functions can only be executed for certain JSON types.
json.exception.type_error.313 | invalid value to unflatten | The @ref unflatten function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value. The JSON Pointers must not overlap, because then the resulting value would not be well defined.
json.exception.type_error.314 | only objects can be unflattened | The @ref unflatten function only works for an object whose keys are JSON Pointers.
json.exception.type_error.315 | values in object must be primitive | The @ref unflatten function only works for an object whose keys are JSON Pointers and whose values are primitive.
json.exception.type_error.316 | invalid UTF-8 byte at index 10: 0x7E | The @ref dump function only works with UTF-8 encoded strings; that is, if you assign a `std::string` to a JSON value, make sure it is UTF-8 encoded. |
json.exception.type_error.317 | JSON value cannot be serialized to requested format | The dynamic type of the object cannot be represented in the requested serialization format (e.g. a raw `true` or `null` JSON object cannot be serialized to BSON) |

@liveexample{The following code shows how a `type_error` exception can be
caught.,type_error}

@sa - @ref exception for the base class of the library exceptions
@sa - @ref parse_error for exceptions indicating a parse error
@sa - @ref invalid_iterator for exceptions indicating errors with iterators
@sa - @ref out_of_range for exceptions indicating access out of the defined range
@sa - @ref other_error for exceptions indicating other library errors

@since version 3.0.0
','line_number':2875,'multiline':True]['text':'!
@brief exception indicating access out of the defined range

This exception is thrown in case a library function is called on an input
parameter that exceeds the expected range, for instance in case of array
indices or nonexisting object keys.

Exceptions have ids 4xx.

name / id                       | example message | description
------------------------------- | --------------- | -------------------------
json.exception.out_of_range.401 | array index 3 is out of range | The provided array index @a i is larger than @a size-1.
json.exception.out_of_range.402 | array index '-' (3) is out of range | The special array index `-` in a JSON Pointer never describes a valid element of the array, but the index past the end. That is, it can only be used to add elements at this position, but not to read it.
json.exception.out_of_range.403 | key 'foo' not found | The provided key was not found in the JSON object.
json.exception.out_of_range.404 | unresolved reference token 'foo' | A reference token in a JSON Pointer could not be resolved.
json.exception.out_of_range.405 | JSON pointer has no parent | The JSON Patch operations 'remove' and 'add' can not be applied to the root element of the JSON value.
json.exception.out_of_range.406 | number overflow parsing '10E1000' | A parsed number could not be stored as without changing it to NaN or INF.
json.exception.out_of_range.407 | number overflow serializing '9223372036854775808' | UBJSON and BSON only support integer numbers up to 9223372036854775807. (until version 3.8.0) |
json.exception.out_of_range.408 | excessive array size: 8658170730974374167 | The size (following `#`) of an UBJSON array or object exceeds the maximal capacity. |
json.exception.out_of_range.409 | BSON key cannot contain code point U+0000 (at byte 2) | Key identifiers to be serialized to BSON cannot contain code point U+0000, since the key is stored as zero-terminated c-string |

@liveexample{The following code shows how an `out_of_range` exception can be
caught.,out_of_range}

@sa - @ref exception for the base class of the library exceptions
@sa - @ref parse_error for exceptions indicating a parse error
@sa - @ref invalid_iterator for exceptions indicating errors with iterators
@sa - @ref type_error for exceptions indicating executing a member function with
                    a wrong type
@sa - @ref other_error for exceptions indicating other library errors

@since version 3.0.0
','line_number':2929,'multiline':True]['text':'!
@brief exception indicating other library errors

This exception is thrown in case of errors that cannot be classified with the
other exception types.

Exceptions have ids 5xx.

name / id                      | example message | description
------------------------------ | --------------- | -------------------------
json.exception.other_error.501 | unsuccessful: {"op":"test","path":"/baz", "value":"bar"} | A JSON Patch operation 'test' failed. The unsuccessful operation is also printed.

@sa - @ref exception for the base class of the library exceptions
@sa - @ref parse_error for exceptions indicating a parse error
@sa - @ref invalid_iterator for exceptions indicating errors with iterators
@sa - @ref type_error for exceptions indicating executing a member function with
                    a wrong type
@sa - @ref out_of_range for exceptions indicating access out of the defined range

@liveexample{The following code shows how an `other_error` exception can be
caught.,other_error}

@since version 3.0.0
','line_number':2977,'multiline':True]['text':' namespace detail','line_number':3015,'multiline':False]['text':' namespace nlohmann','line_number':3016,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3018,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':3020,'multiline':False]['text':' size_t','line_number':3023,'multiline':False]['text':' conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type','line_number':3024,'multiline':False]['text':' index_sequence, make_index_sequence, index_sequence_for','line_number':3025,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3027,'multiline':False]['text':' the following utilities are natively available in C++14','line_number':3040,'multiline':False]['text':' alias templates to reduce boilerplate','line_number':3048,'multiline':False]['text':' The following code is taken from https://github.com/abseil/abseil-cpp/blob/10cb35e459f5ecca5b2ff107635da0bfa41011b4/absl/utility/utility.h','line_number':3052,'multiline':False]['text':' which is part of Google Abseil (https://github.com/abseil/abseil-cpp), licensed under the Apache License 2.0.','line_number':3053,'multiline':False]['text':'// START OF CODE FROM GOOGLE ABSEIL','line_number':3055,'multiline':False]['text':' integer_sequence','line_number':3057,'multiline':False]['text':'','line_number':3058,'multiline':False]['text':' Class template representing a compile-time integer sequence. An instantiation','line_number':3059,'multiline':False]['text':' of `integer_sequence<T, Ints...>` has a sequence of integers encoded in its','line_number':3060,'multiline':False]['text':' type through its template arguments (which is a common need when','line_number':3061,'multiline':False]['text':' working with C++11 variadic templates). `absl::integer_sequence` is designed','line_number':3062,'multiline':False]['text':' to be a drop-in replacement for C++14's `std::integer_sequence`.','line_number':3063,'multiline':False]['text':'','line_number':3064,'multiline':False]['text':' Example:','line_number':3065,'multiline':False]['text':'','line_number':3066,'multiline':False]['text':'   template< class T, T... Ints >','line_number':3067,'multiline':False]['text':'   void user_function(integer_sequence<T, Ints...>);','line_number':3068,'multiline':False]['text':'','line_number':3069,'multiline':False]['text':'   int main()','line_number':3070,'multiline':False]['text':'   {','line_number':3071,'multiline':False]['text':'     // user_function's `T` will be deduced to `int` and `Ints...`','line_number':3072,'multiline':False]['text':'     // will be deduced to `0, 1, 2, 3, 4`.','line_number':3073,'multiline':False]['text':'     user_function(make_integer_sequence<int, 5>());','line_number':3074,'multiline':False]['text':'   }','line_number':3075,'multiline':False]['text':' index_sequence','line_number':3086,'multiline':False]['text':'','line_number':3087,'multiline':False]['text':' A helper template for an `integer_sequence` of `size_t`,','line_number':3088,'multiline':False]['text':' `absl::index_sequence` is designed to be a drop-in replacement for C++14's','line_number':3089,'multiline':False]['text':' `std::index_sequence`.','line_number':3090,'multiline':False]['text':' Note that SeqSize == sizeof...(Ints). It's passed explicitly for efficiency.','line_number':3100,'multiline':False]['text':' Recursion helper for 'make_integer_sequence<T, N>'.','line_number':3113,'multiline':False]['text':' 'Gen<T, N>::type' is an alias for 'integer_sequence<T, 0, 1, ... N-1>'.','line_number':3114,'multiline':False]['text':' namespace utility_internal','line_number':3128,'multiline':False]['text':' Compile-time sequences of integers','line_number':3130,'multiline':False]['text':' make_integer_sequence','line_number':3132,'multiline':False]['text':'','line_number':3133,'multiline':False]['text':' This template alias is equivalent to','line_number':3134,'multiline':False]['text':' `integer_sequence<int, 0, 1, ..., N-1>`, and is designed to be a drop-in','line_number':3135,'multiline':False]['text':' replacement for C++14's `std::make_integer_sequence`.','line_number':3136,'multiline':False]['text':' make_index_sequence','line_number':3140,'multiline':False]['text':'','line_number':3141,'multiline':False]['text':' This template alias is equivalent to `index_sequence<0, 1, ..., N-1>`,','line_number':3142,'multiline':False]['text':' and is designed to be a drop-in replacement for C++14's','line_number':3143,'multiline':False]['text':' `std::make_index_sequence`.','line_number':3144,'multiline':False]['text':' index_sequence_for','line_number':3148,'multiline':False]['text':'','line_number':3149,'multiline':False]['text':' Converts a typename pack into an index sequence of the same length, and','line_number':3150,'multiline':False]['text':' is designed to be a drop-in replacement for C++14's','line_number':3151,'multiline':False]['text':' `std::index_sequence_for()`','line_number':3152,'multiline':False]['text':'// END OF CODE FROM GOOGLE ABSEIL','line_number':3156,'multiline':False]['text':' dispatch utility (taken from ranges-v3)','line_number':3160,'multiline':False]['text':' taken from ranges-v3','line_number':3164,'multiline':False]['text':' namespace detail','line_number':3174,'multiline':False]['text':' namespace nlohmann','line_number':3175,'multiline':False]['text':' #include <nlohmann/detail/meta/identity_tag.hpp>','line_number':3177,'multiline':False]['text':' dispatching helper struct','line_number':3184,'multiline':False]['text':' namespace detail','line_number':3186,'multiline':False]['text':' namespace nlohmann','line_number':3187,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':3189,'multiline':False]['text':' numeric_limits','line_number':3192,'multiline':False]['text':' false_type, is_constructible, is_integral, is_same, true_type','line_number':3193,'multiline':False]['text':' declval','line_number':3194,'multiline':False]['text':' tuple','line_number':3195,'multiline':False]['text':' #include <nlohmann/detail/iterators/iterator_traits.hpp>','line_number':3197,'multiline':False]['text':' random_access_iterator_tag','line_number':3200,'multiline':False]['text':' #include <nlohmann/detail/meta/void_t.hpp>','line_number':3202,'multiline':False]['text':' namespace detail','line_number':3214,'multiline':False]['text':' namespace nlohmann','line_number':3215,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':3217,'multiline':False]['text':' This is required as some compilers implement std::iterator_traits in a way that','line_number':3240,'multiline':False]['text':' doesn't work with SFINAE. See https://github.com/nlohmann/json/issues/1341.','line_number':3241,'multiline':False]['text':' namespace detail','line_number':3262,'multiline':False]['text':' namespace nlohmann','line_number':3263,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':3265,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':3267,'multiline':False]['text':' #include <nlohmann/detail/meta/detected.hpp>','line_number':3269,'multiline':False]['text':' #include <nlohmann/detail/meta/void_t.hpp>','line_number':3274,'multiline':False]['text':' https://en.cppreference.com/w/cpp/experimental/is_detected','line_number':3277,'multiline':False]['text':' namespace detail','line_number':3327,'multiline':False]['text':' namespace nlohmann','line_number':3328,'multiline':False]['text':' #include <nlohmann/json_fwd.hpp>','line_number':3330,'multiline':False]['text':' int64_t, uint64_t','line_number':3334,'multiline':False]['text':' map','line_number':3335,'multiline':False]['text':' allocator','line_number':3336,'multiline':False]['text':' string','line_number':3337,'multiline':False]['text':' vector','line_number':3338,'multiline':False]['text':'!
@brief namespace for Niels Lohmann
@see https://github.com/nlohmann
@since version 1.0.0
','line_number':3340,'multiline':True]['text':'!
@brief default JSONSerializer template argument

This serializer ignores the template arguments and uses ADL
([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))
for serialization.
','line_number':3347,'multiline':True]['text':'!
@brief JSON Pointer

A JSON pointer defines a string syntax for identifying a specific value
within a JSON document. It can be used with functions `at` and
`operator[]`. Furthermore, JSON pointers are the base for JSON patches.

@sa [RFC 6901](https://tools.ietf.org/html/rfc6901)

@since version 2.0.0
','line_number':3370,'multiline':True]['text':'!
@brief default JSON class

This type is the default specialization of the @ref basic_json class which
uses the standard template types.

@since version 1.0.0
','line_number':3384,'multiline':True]['text':'!
@brief ordered JSON class

This type preserves the insertion order of object keys.

@since version 3.9.0
','line_number':3397,'multiline':True]['text':' namespace nlohmann','line_number':3406,'multiline':False]['text':' INCLUDE_NLOHMANN_JSON_FWD_HPP_','line_number':3408,'multiline':False]['text':'!
@brief detail namespace with internal helper functions

This namespace collects functions that should not be exposed,
implementations of some @ref basic_json methods, and meta-programming helpers.

@since version 2.1.0
','line_number':3413,'multiline':True]['text':'///////////','line_number':3423,'multiline':False]['text':' helpers //','line_number':3424,'multiline':False]['text':'///////////','line_number':3425,'multiline':False]['text':' Note to maintainers:','line_number':3427,'multiline':False]['text':'','line_number':3428,'multiline':False]['text':' Every trait in this file expects a non CV-qualified type.','line_number':3429,'multiline':False]['text':' The only exceptions are in the 'aliases for detected' section','line_number':3430,'multiline':False]['text':' (i.e. those of the form: decltype(T::member_function(std::declval<T>())))','line_number':3431,'multiline':False]['text':'','line_number':3432,'multiline':False]['text':' In this case, T has to be properly CV-qualified to constraint the function arguments','line_number':3433,'multiline':False]['text':' (e.g. to_json(BasicJsonType&, const T&))','line_number':3434,'multiline':False]['text':'////////////////////','line_number':3441,'multiline':False]['text':' json_ref helpers //','line_number':3442,'multiline':False]['text':'////////////////////','line_number':3443,'multiline':False]['text':'////////////////////////','line_number':3454,'multiline':False]['text':' aliases for detected //','line_number':3455,'multiline':False]['text':'////////////////////////','line_number':3456,'multiline':False]['text':' trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists','line_number':3491,'multiline':False]['text':' trait checking if j.get<T> is valid','line_number':3495,'multiline':False]['text':' use this trait instead of std::is_constructible or std::is_convertible,','line_number':3496,'multiline':False]['text':' both rely on, or make use of implicit conversions, and thus fail when T','line_number':3497,'multiline':False]['text':' has several constructors/operator= (see https://github.com/nlohmann/json/issues/958)','line_number':3498,'multiline':False]['text':' This trait checks if JSONSerializer<T>::from_json(json const&) exists','line_number':3515,'multiline':False]['text':' this overload is used for non-default-constructible user-defined-types','line_number':3516,'multiline':False]['text':' This trait checks if BasicJsonType::json_serializer<T>::to_json exists','line_number':3530,'multiline':False]['text':' Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.','line_number':3531,'multiline':False]['text':'/////////////////','line_number':3546,'multiline':False]['text':' is_ functions //','line_number':3547,'multiline':False]['text':'/////////////////','line_number':3548,'multiline':False]['text':' https://en.cppreference.com/w/cpp/types/conjunction','line_number':3550,'multiline':False]['text':' Reimplementation of is_constructible and is_default_constructible, due to them being broken for','line_number':3557,'multiline':False]['text':' std::pair and std::tuple until LWG 2367 fix (see https://cplusplus.github.io/LWG/lwg-defects.html#2367).','line_number':3558,'multiline':False]['text':' This causes compile errors in e.g. clang 3.5 or gcc 4.9.','line_number':3559,'multiline':False]['text':' The following implementation of is_complete_type is taken from','line_number':3614,'multiline':False]['text':' https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/','line_number':3615,'multiline':False]['text':' and is written by Xiang Fan who agreed to using it in this library.','line_number':3616,'multiline':False]['text':' macOS's is_constructible does not play well with nonesuch...','line_number':3636,'multiline':False]['text':' This is needed because json_reverse_iterator has a ::iterator type...','line_number':3726,'multiline':False]['text':' Therefore it is detected as a CompatibleArrayType.','line_number':3727,'multiline':False]['text':' The real fix would be to have an Iterable concept.','line_number':3728,'multiline':False]['text':' This is needed because json_reverse_iterator has a ::iterator type,','line_number':3765,'multiline':False]['text':' furthermore, std::back_insert_iterator (and other iterators) have a','line_number':3766,'multiline':False]['text':' base class `iterator`... Therefore it is detected as a','line_number':3767,'multiline':False]['text':' ConstructibleArrayType. The real fix would be to have an Iterable','line_number':3768,'multiline':False]['text':' concept.','line_number':3769,'multiline':False]['text':' is there an assert somewhere on overflows?','line_number':3795,'multiline':False]['text':' namespace detail','line_number':3832,'multiline':False]['text':' namespace nlohmann','line_number':3833,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':3835,'multiline':False]['text':' overloads for basic_json template parameters','line_number':3852,'multiline':False]['text':' forward_list doesn't have an insert method','line_number':3946,'multiline':False]['text':' valarray doesn't have an insert method','line_number':3963,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':3981,'multiline':False]['text':'unused','line_number':3991,'multiline':True]['text':'unused','line_number':3998,'multiline':True]['text':'unused','line_number':4011,'multiline':True]['text':' get<BasicJsonType>() returns *this, this won't call a from_json','line_number':4024,'multiline':False]['text':' method when value_type is BasicJsonType','line_number':4025,'multiline':False]['text':'unused','line_number':4036,'multiline':True]['text':' get<BasicJsonType>() returns *this, this won't call a from_json','line_number':4045,'multiline':False]['text':' method when value_type is BasicJsonType','line_number':4046,'multiline':False]['text':'unused','line_number':4075,'multiline':True]['text':'unused','line_number':4075,'multiline':True]['text':' overload for arithmetic types, not chosen for basic_json template arguments','line_number':4125,'multiline':False]['text':' (BooleanType, etc..); note: Is it really necessary to provide explicit','line_number':4126,'multiline':False]['text':' overloads for boolean_t etc. in case of a custom BooleanType which is not','line_number':4127,'multiline':False]['text':' an arithmetic type?','line_number':4128,'multiline':False]['text':'unused','line_number':4168,'multiline':True]['text':'unused','line_number':4174,'multiline':True]['text':'unused','line_number':4174,'multiline':True]['text':'unused','line_number':4181,'multiline':True]['text':'unused','line_number':4187,'multiline':True]['text':'unused','line_number':4187,'multiline':True]['text':'unused','line_number':4193,'multiline':True]['text':' namespace detail','line_number':4260,'multiline':False]['text':'/ namespace to hold default `from_json` function','line_number':4262,'multiline':False]['text':'/ to see why this is required:','line_number':4263,'multiline':False]['text':'/ http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html','line_number':4264,'multiline':False]['text':' NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)','line_number':4265,'multiline':False]['text':' NOLINT(misc-definitions-in-headers)','line_number':4267,'multiline':False]['text':' namespace','line_number':4268,'multiline':False]['text':' namespace nlohmann','line_number':4269,'multiline':False]['text':' #include <nlohmann/detail/conversions/to_json.hpp>','line_number':4271,'multiline':False]['text':' copy','line_number':4274,'multiline':False]['text':' begin, end','line_number':4275,'multiline':False]['text':' string','line_number':4276,'multiline':False]['text':' tuple, get','line_number':4277,'multiline':False]['text':' is_same, is_constructible, is_floating_point, is_enum, underlying_type','line_number':4278,'multiline':False]['text':' move, forward, declval, pair','line_number':4279,'multiline':False]['text':' valarray','line_number':4280,'multiline':False]['text':' vector','line_number':4281,'multiline':False]['text':' #include <nlohmann/detail/iterators/iteration_proxy.hpp>','line_number':4283,'multiline':False]['text':' size_t','line_number':4286,'multiline':False]['text':' input_iterator_tag','line_number':4287,'multiline':False]['text':' string, to_string','line_number':4288,'multiline':False]['text':' tuple_size, get, tuple_element','line_number':4289,'multiline':False]['text':' move','line_number':4290,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':4292,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':4294,'multiline':False]['text':' For ADL','line_number':4304,'multiline':False]['text':'/ the iterator','line_number':4319,'multiline':False]['text':'/ an index for arrays (used to create key names)','line_number':4321,'multiline':False]['text':'/ last stringified array index','line_number':4323,'multiline':False]['text':'/ a string representation of the array index','line_number':4325,'multiline':False]['text':'/ an empty string (to return a reference for primitive values)','line_number':4327,'multiline':False]['text':'/ dereference operator (needed for range-based for)','line_number':4335,'multiline':False]['text':'/ increment operator (needed for range-based for)','line_number':4341,'multiline':False]['text':'/ equality operator (needed for InputIterator)','line_number':4350,'multiline':False]['text':'/ inequality operator (needed for range-based for)','line_number':4356,'multiline':False]['text':'/ return key of the iterator','line_number':4362,'multiline':False]['text':' use integer array index as key','line_number':4369,'multiline':False]['text':' use key from the object','line_number':4380,'multiline':False]['text':' use an empty key for all primitive types','line_number':4384,'multiline':False]['text':'/ return value of the iterator','line_number':4390,'multiline':False]['text':'/ proxy class for the items() function','line_number':4397,'multiline':False]['text':'/ the container to iterate','line_number':4401,'multiline':False]['text':'/ construct iteration proxy from a container','line_number':4405,'multiline':False]['text':'/ return iterator begin (needed for range-based for)','line_number':4409,'multiline':False]['text':'/ return iterator end (needed for range-based for)','line_number':4415,'multiline':False]['text':' Structured Bindings Support','line_number':4421,'multiline':False]['text':' For further reference see https://blog.tartanllama.xyz/structured-bindings/','line_number':4422,'multiline':False]['text':' And see https://github.com/nlohmann/json/pull/1391','line_number':4423,'multiline':False]['text':' Structured Bindings Support','line_number':4429,'multiline':False]['text':' For further reference see https://blog.tartanllama.xyz/structured-bindings/','line_number':4430,'multiline':False]['text':' And see https://github.com/nlohmann/json/pull/1391','line_number':4431,'multiline':False]['text':' namespace detail','line_number':4437,'multiline':False]['text':' namespace nlohmann','line_number':4438,'multiline':False]['text':' The Addition to the STD Namespace is required to add','line_number':4440,'multiline':False]['text':' Structured Bindings Support to the iteration_proxy_value class','line_number':4441,'multiline':False]['text':' For further reference see https://blog.tartanllama.xyz/structured-bindings/','line_number':4442,'multiline':False]['text':' And see https://github.com/nlohmann/json/pull/1391','line_number':4443,'multiline':False]['text':' Fix: https://github.com/nlohmann/json/issues/1401','line_number':4447,'multiline':False]['text':' namespace std','line_number':4466,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':4468,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':4470,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':4472,'multiline':False]['text':'////////////////','line_number':4479,'multiline':False]['text':' constructors //','line_number':4480,'multiline':False]['text':'////////////////','line_number':4481,'multiline':False]['text':'///////////','line_number':4682,'multiline':False]['text':' to_json //','line_number':4683,'multiline':False]['text':'///////////','line_number':4684,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':4789,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':4791,'multiline':False]['text':' for https://github.com/nlohmann/json/pull/1134','line_number':4802,'multiline':False]['text':'unused','line_number':4811,'multiline':True]['text':' namespace detail','line_number':4831,'multiline':False]['text':'/ namespace to hold default `to_json` function','line_number':4833,'multiline':False]['text':'/ to see why this is required:','line_number':4834,'multiline':False]['text':'/ http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html','line_number':4835,'multiline':False]['text':' NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)','line_number':4836,'multiline':False]['text':' NOLINT(misc-definitions-in-headers)','line_number':4838,'multiline':False]['text':' namespace','line_number':4839,'multiline':False]['text':' namespace nlohmann','line_number':4840,'multiline':False]['text':' #include <nlohmann/detail/meta/identity_tag.hpp>','line_number':4842,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':4844,'multiline':False]['text':'!
    @brief convert a JSON value to any value type

    This function is usually called by the `get()` function of the
    @ref basic_json class (either explicit or via conversion operators).

    @note This function is chosen for default-constructible value types.

    @param[in] j        JSON value to read from
    @param[in,out] val  value to write to
    ','line_number':4853,'multiline':True]['text':'!
    @brief convert a JSON value to any value type

    This function is usually called by the `get()` function of the
    @ref basic_json class (either explicit or via conversion operators).

    @note This function is chosen for value types which are not default-constructible.

    @param[in] j  JSON value to read from

    @return copy of the JSON value, converted to @a ValueType
    ','line_number':4872,'multiline':True]['text':'!
    @brief convert any value type to a JSON value

    This function is usually called by the constructors of the @ref basic_json
    class.

    @param[in,out] j  JSON value to write to
    @param[in] val    value to read from
    ','line_number':4892,'multiline':True]['text':' namespace nlohmann','line_number':4909,'multiline':False]['text':' #include <nlohmann/byte_container_with_subtype.hpp>','line_number':4911,'multiline':False]['text':' uint8_t','line_number':4914,'multiline':False]['text':' tie','line_number':4915,'multiline':False]['text':' move','line_number':4916,'multiline':False]['text':'!
@brief an internal type for a backed binary type

This type extends the template parameter @a BinaryType provided to `basic_json`
with a subtype used by BSON and MessagePack. This type exists so that the user
does not have to specify a type themselves with a specific naming scheme in
order to override the binary type.

@tparam BinaryType container to store bytes (`std::vector<std::uint8_t>` by
                   default)

@since version 3.8.0
','line_number':4921,'multiline':True]['text':'/ the type of the underlying container','line_number':4938,'multiline':False]['text':'!
    @brief sets the binary subtype

    Sets the binary subtype of the value, also flags a binary JSON value as
    having a subtype, which has implications for serialization.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @sa see @ref subtype() -- return the binary subtype
    @sa see @ref clear_subtype() -- clears the binary subtype
    @sa see @ref has_subtype() -- returns whether or not the binary value has a
    subtype

    @since version 3.8.0
    ','line_number':4976,'multiline':True]['text':'!
    @brief return the binary subtype

    Returns the numerical subtype of the value if it has a subtype. If it does
    not have a subtype, this function will return size_t(-1) as a sentinel
    value.

    @return the numerical subtype of the binary value

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @sa see @ref set_subtype() -- sets the binary subtype
    @sa see @ref clear_subtype() -- clears the binary subtype
    @sa see @ref has_subtype() -- returns whether or not the binary value has a
    subtype

    @since version 3.8.0
    ','line_number':5000,'multiline':True]['text':'!
    @brief return whether the value has a subtype

    @return whether the value has a subtype

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @sa see @ref subtype() -- return the binary subtype
    @sa see @ref set_subtype() -- sets the binary subtype
    @sa see @ref clear_subtype() -- clears the binary subtype

    @since version 3.8.0
    ','line_number':5026,'multiline':True]['text':'!
    @brief clears the binary subtype

    Clears the binary subtype and flags the value as not having a subtype, which
    has implications for serialization; for instance MessagePack will prefer the
    bin family over the ext family.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @sa see @ref subtype() -- return the binary subtype
    @sa see @ref set_subtype() -- sets the binary subtype
    @sa see @ref has_subtype() -- returns whether or not the binary value has a
    subtype

    @since version 3.8.0
    ','line_number':5047,'multiline':True]['text':' namespace nlohmann','line_number':5077,'multiline':False]['text':' #include <nlohmann/detail/conversions/from_json.hpp>','line_number':5079,'multiline':False]['text':' #include <nlohmann/detail/conversions/to_json.hpp>','line_number':5081,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':5083,'multiline':False]['text':' #include <nlohmann/detail/hash.hpp>','line_number':5085,'multiline':False]['text':' uint8_t','line_number':5088,'multiline':False]['text':' size_t','line_number':5089,'multiline':False]['text':' hash','line_number':5090,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':5092,'multiline':False]['text':' boost::hash_combine','line_number':5100,'multiline':False]['text':'!
@brief hash a JSON value

The hash function tries to rely on std::hash where possible. Furthermore, the
type of the JSON value is taken into account to have different hash values for
null, 0, 0U, and false, etc.

@tparam BasicJsonType basic_json specialization
@param j JSON value to hash
@return hash value of j
','line_number':5107,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':5200,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':5201,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':5202,'multiline':False]['text':' namespace detail','line_number':5206,'multiline':False]['text':' namespace nlohmann','line_number':5207,'multiline':False]['text':' #include <nlohmann/detail/input/binary_reader.hpp>','line_number':5209,'multiline':False]['text':' generate_n','line_number':5212,'multiline':False]['text':' array','line_number':5213,'multiline':False]['text':' ldexp','line_number':5214,'multiline':False]['text':' size_t','line_number':5215,'multiline':False]['text':' uint8_t, uint16_t, uint32_t, uint64_t','line_number':5216,'multiline':False]['text':' snprintf','line_number':5217,'multiline':False]['text':' memcpy','line_number':5218,'multiline':False]['text':' back_inserter','line_number':5219,'multiline':False]['text':' numeric_limits','line_number':5220,'multiline':False]['text':' char_traits, string','line_number':5221,'multiline':False]['text':' make_pair, move','line_number':5222,'multiline':False]['text':' vector','line_number':5223,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':5225,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':5227,'multiline':False]['text':' array','line_number':5230,'multiline':False]['text':' size_t','line_number':5231,'multiline':False]['text':' strlen','line_number':5232,'multiline':False]['text':' begin, end, iterator_traits, random_access_iterator_tag, distance, next','line_number':5233,'multiline':False]['text':' shared_ptr, make_shared, addressof','line_number':5234,'multiline':False]['text':' accumulate','line_number':5235,'multiline':False]['text':' string, char_traits','line_number':5236,'multiline':False]['text':' enable_if, is_base_of, is_pointer, is_integral, remove_pointer','line_number':5237,'multiline':False]['text':' pair, declval','line_number':5238,'multiline':False]['text':'FILE *','line_number':5241,'multiline':False]['text':' istream','line_number':5242,'multiline':False]['text':' JSON_NO_IO','line_number':5243,'multiline':False]['text':' #include <nlohmann/detail/iterators/iterator_traits.hpp>','line_number':5245,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':5247,'multiline':False]['text':'/ the supported input formats','line_number':5254,'multiline':False]['text':'//////////////////','line_number':5257,'multiline':False]['text':' input adapters //','line_number':5258,'multiline':False]['text':'//////////////////','line_number':5259,'multiline':False]['text':'!
Input adapter for stdio file access. This adapter read only 1 byte and do not use any
 buffer. This adapter is a very low level adapter.
','line_number':5262,'multiline':True]['text':' make class move-only','line_number':5276,'multiline':False]['text':'/ the file pointer to read from','line_number':5289,'multiline':False]['text':'!
Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at
beginning of input. Does not support changing the underlying std::streambuf
in mid-input. Maintains underlying std::istream and std::streambuf to support
subsequent use of standard std::istream operations to process any input
characters following those used in parsing the JSON input.  Clears the
std::istream flags; any input errors (e.g., EOF) will be detected by the first
subsequent call for input from the std::istream.
','line_number':5294,'multiline':True]['text':' clear stream flags; we use underlying streambuf I/O, do not','line_number':5310,'multiline':False]['text':' maintain ifstream flags, except eof','line_number':5311,'multiline':False]['text':' delete because of pointer members','line_number':5322,'multiline':False]['text':' std::istream/std::streambuf use std::char_traits<char>::to_int_type, to','line_number':5334,'multiline':False]['text':' ensure that std::char_traits<char>::eof() and the character 0xFF do not','line_number':5335,'multiline':False]['text':' end up as the same value, eg. 0xFFFFFFFF.','line_number':5336,'multiline':False]['text':' set eof manually, as we don't use the istream interface.','line_number':5340,'multiline':False]['text':'/ the associated input stream','line_number':5349,'multiline':False]['text':' JSON_NO_IO','line_number':5353,'multiline':False]['text':' General-purpose iterator-based adapter. It might not be as fast as','line_number':5355,'multiline':False]['text':' theoretically possible for some containers, but it is extremely versatile.','line_number':5356,'multiline':False]['text':' UTF-32','line_number':5399,'multiline':False]['text':' get the current character','line_number':5414,'multiline':False]['text':' UTF-32 to UTF-8 encoding','line_number':5417,'multiline':False]['text':' unknown character','line_number':5446,'multiline':False]['text':' UTF-16','line_number':5457,'multiline':False]['text':' get the current character','line_number':5472,'multiline':False]['text':' UTF-16 to UTF-8 encoding','line_number':5475,'multiline':False]['text':' Wraps another input apdater to convert wide character types into individual bytes.','line_number':5516,'multiline':False]['text':' check if buffer needs to be filled','line_number':5528,'multiline':False]['text':' use buffer','line_number':5537,'multiline':False]['text':'/ a buffer for UTF-8 bytes','line_number':5552,'multiline':False]['text':'/ index to the utf8_codes array for the next valid byte','line_number':5555,'multiline':False]['text':'/ number of valid bytes in the utf8_codes array','line_number':5557,'multiline':False]['text':' General purpose iterator-based input','line_number':5599,'multiline':False]['text':' Convenience shorthand from container to iterator','line_number':5607,'multiline':False]['text':' Enables ADL on begin(container) and end(container)','line_number':5608,'multiline':False]['text':' Encloses the using declarations in namespace for not to leak them to outside scope','line_number':5609,'multiline':False]['text':' namespace container_input_adapter_factory_impl','line_number':5632,'multiline':False]['text':' Special cases with fast paths','line_number':5641,'multiline':False]['text':' JSON_NO_IO','line_number':5656,'multiline':False]['text':' Null-delimited strings, and the like.','line_number':5660,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':5676,'multiline':False]['text':' This class only handles inputs of input_buffer_adapter type.','line_number':5681,'multiline':False]['text':' It's required so that expressions like {ptr, len} can be implicitely casted','line_number':5682,'multiline':False]['text':' to the correct adapter.','line_number':5683,'multiline':False]['text':' NOLINT(hicpp-move-const-arg,performance-move-const-arg)','line_number':5705,'multiline':False]['text':' namespace detail','line_number':5711,'multiline':False]['text':' namespace nlohmann','line_number':5712,'multiline':False]['text':' #include <nlohmann/detail/input/json_sax.hpp>','line_number':5714,'multiline':False]['text':' string','line_number':5718,'multiline':False]['text':' move','line_number':5719,'multiline':False]['text':' vector','line_number':5720,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':5722,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':5724,'multiline':False]['text':'!
@brief SAX interface

This class describes the SAX interface used by @ref nlohmann::json::sax_parse.
Each function is called in different situations while the input is parsed. The
boolean return value informs the parser whether to continue processing the
input.
','line_number':5730,'multiline':True]['text':'!
    @brief a null value was read
    @return whether parsing should proceed
    ','line_number':5747,'multiline':True]['text':'!
    @brief a boolean value was read
    @param[in] val  boolean value
    @return whether parsing should proceed
    ','line_number':5753,'multiline':True]['text':'!
    @brief an integer number was read
    @param[in] val  integer value
    @return whether parsing should proceed
    ','line_number':5760,'multiline':True]['text':'!
    @brief an unsigned integer number was read
    @param[in] val  unsigned integer value
    @return whether parsing should proceed
    ','line_number':5767,'multiline':True]['text':'!
    @brief an floating-point number was read
    @param[in] val  floating-point value
    @param[in] s    raw token value
    @return whether parsing should proceed
    ','line_number':5774,'multiline':True]['text':'!
    @brief a string was read
    @param[in] val  string value
    @return whether parsing should proceed
    @note It is safe to move the passed string.
    ','line_number':5782,'multiline':True]['text':'!
    @brief a binary string was read
    @param[in] val  binary value
    @return whether parsing should proceed
    @note It is safe to move the passed binary.
    ','line_number':5790,'multiline':True]['text':'!
    @brief the beginning of an object was read
    @param[in] elements  number of object elements or -1 if unknown
    @return whether parsing should proceed
    @note binary formats may report the number of elements
    ','line_number':5798,'multiline':True]['text':'!
    @brief an object key was read
    @param[in] val  object key
    @return whether parsing should proceed
    @note It is safe to move the passed string.
    ','line_number':5806,'multiline':True]['text':'!
    @brief the end of an object was read
    @return whether parsing should proceed
    ','line_number':5814,'multiline':True]['text':'!
    @brief the beginning of an array was read
    @param[in] elements  number of array elements or -1 if unknown
    @return whether parsing should proceed
    @note binary formats may report the number of elements
    ','line_number':5820,'multiline':True]['text':'!
    @brief the end of an array was read
    @return whether parsing should proceed
    ','line_number':5828,'multiline':True]['text':'!
    @brief a parse error occurred
    @param[in] position    the position in the input where the error occurs
    @param[in] last_token  the last read token
    @param[in] ex          an exception object describing the error
    @return whether parsing should proceed (must return false)
    ','line_number':5834,'multiline':True]['text':'!
@brief SAX implementation to create a JSON value from SAX events

This class implements the @ref json_sax interface and processes the SAX events
to create a JSON value which makes it basically a DOM parser. The structure or
hierarchy of the JSON value is managed by the stack `ref_stack` which contains
a pointer to the respective array or object for each recursion depth.

After successful parsing, the value that is passed by reference to the
constructor contains the parsed value.

@tparam BasicJsonType  the JSON type
','line_number':5856,'multiline':True]['text':'!
    @param[in,out] r  reference to a JSON value that is manipulated while
                       parsing
    @param[in] allow_exceptions_  whether parse errors yield exceptions
    ','line_number':5879,'multiline':True]['text':' make class move-only','line_number':5888,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':5890,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':5892,'multiline':False]['text':'unused','line_number':5919,'multiline':True]['text':' add null at given key and store the reference for later','line_number':5951,'multiline':False]['text':'unused','line_number':5983,'multiline':True]['text':'unused','line_number':5983,'multiline':True]['text':'!
    @invariant If the ref stack is empty, then the passed value will be the new
               root.
    @invariant If the ref stack contains a value, then it is an array or an
               object to which we can add elements
    ','line_number':6001,'multiline':True]['text':'/ the parsed JSON value','line_number':6031,'multiline':False]['text':'/ stack to model hierarchy of values','line_number':6033,'multiline':False]['text':'/ helper to hold the reference for the next object element','line_number':6035,'multiline':False]['text':'/ whether a syntax error occurred','line_number':6037,'multiline':False]['text':'/ whether to throw exceptions in case of errors','line_number':6039,'multiline':False]['text':' make class move-only','line_number':6063,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6065,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6067,'multiline':False]['text':'unused','line_number':6094,'multiline':True]['text':' check callback for object start','line_number':6114,'multiline':False]['text':' check object limit','line_number':6121,'multiline':False]['text':' check callback for key','line_number':6134,'multiline':False]['text':' add discarded value at given key and store the reference for later','line_number':6138,'multiline':False]['text':' discard object','line_number':6153,'multiline':False]['text':' remove discarded value','line_number':6169,'multiline':False]['text':' check array limit','line_number':6191,'multiline':False]['text':' discard array','line_number':6213,'multiline':False]['text':' remove discarded value','line_number':6223,'multiline':False]['text':'unused','line_number':6233,'multiline':True]['text':'unused','line_number':6233,'multiline':True]['text':'!
    @param[in] v  value to add to the JSON value we build during parsing
    @param[in] skip_callback  whether we should skip calling the callback
               function; this is required after start_array() and
               start_object() SAX events, because otherwise we would call the
               callback function with an empty array or object, respectively.

    @invariant If the ref stack is empty, then the passed value will be the new
               root.
    @invariant If the ref stack contains a value, then it is an array or an
               object to which we can add elements

    @return pair of boolean (whether value should be kept) and pointer (to the
            passed value in the ref_stack hierarchy; nullptr if not kept)
    ','line_number':6251,'multiline':True]['text':' do not handle this value if we know it would be added to a discarded','line_number':6271,'multiline':False]['text':' container','line_number':6272,'multiline':False]['text':' create value','line_number':6278,'multiline':False]['text':' check callback','line_number':6281,'multiline':False]['text':' do not handle this value if we just learnt it shall be discarded','line_number':6284,'multiline':False]['text':' skip this value if we already decided to skip the parent','line_number':6296,'multiline':False]['text':' (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)','line_number':6297,'multiline':False]['text':' we now only expect arrays and objects','line_number':6303,'multiline':False]['text':' array','line_number':6306,'multiline':False]['text':' object','line_number':6313,'multiline':False]['text':' check if we should store an element for the current key','line_number':6315,'multiline':False]['text':'/ the parsed JSON value','line_number':6330,'multiline':False]['text':'/ stack to model hierarchy of values','line_number':6332,'multiline':False]['text':'/ stack to manage which values to keep','line_number':6334,'multiline':False]['text':'/ stack to manage which object keys to keep','line_number':6336,'multiline':False]['text':'/ helper to hold the reference for the next object element','line_number':6338,'multiline':False]['text':'/ whether a syntax error occurred','line_number':6340,'multiline':False]['text':'/ callback function','line_number':6342,'multiline':False]['text':'/ whether to throw exceptions in case of errors','line_number':6344,'multiline':False]['text':'/ a discarded value for the callback','line_number':6346,'multiline':False]['text':'unused','line_number':6365,'multiline':True]['text':'unused','line_number':6370,'multiline':True]['text':'unused','line_number':6375,'multiline':True]['text':'unused','line_number':6380,'multiline':True]['text':'unused','line_number':6380,'multiline':True]['text':'unused','line_number':6385,'multiline':True]['text':'unused','line_number':6390,'multiline':True]['text':'unused','line_number':6395,'multiline':True]['text':'unused','line_number':6400,'multiline':True]['text':'unused','line_number':6410,'multiline':True]['text':'unused','line_number':6420,'multiline':True]['text':'unused','line_number':6420,'multiline':True]['text':'unused','line_number':6420,'multiline':True]['text':' namespace detail','line_number':6425,'multiline':False]['text':' namespace nlohmann','line_number':6427,'multiline':False]['text':' #include <nlohmann/detail/input/lexer.hpp>','line_number':6429,'multiline':False]['text':' array','line_number':6432,'multiline':False]['text':' localeconv','line_number':6433,'multiline':False]['text':' size_t','line_number':6434,'multiline':False]['text':' snprintf','line_number':6435,'multiline':False]['text':' strtof, strtod, strtold, strtoll, strtoull','line_number':6436,'multiline':False]['text':' initializer_list','line_number':6437,'multiline':False]['text':' char_traits, string','line_number':6438,'multiline':False]['text':' move','line_number':6439,'multiline':False]['text':' vector','line_number':6440,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':6442,'multiline':False]['text':' #include <nlohmann/detail/input/position_t.hpp>','line_number':6444,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':6446,'multiline':False]['text':'/////////','line_number':6453,'multiline':False]['text':' lexer //','line_number':6454,'multiline':False]['text':'/////////','line_number':6455,'multiline':False]['text':'/ token types for the parser','line_number':6461,'multiline':False]['text':'/< indicating the scanner is uninitialized','line_number':6464,'multiline':False]['text':'/< the `true` literal','line_number':6465,'multiline':False]['text':'/< the `false` literal','line_number':6466,'multiline':False]['text':'/< the `null` literal','line_number':6467,'multiline':False]['text':'/< a string -- use get_string() for actual value','line_number':6468,'multiline':False]['text':'/< an unsigned integer -- use get_number_unsigned() for actual value','line_number':6469,'multiline':False]['text':'/< a signed integer -- use get_number_integer() for actual value','line_number':6470,'multiline':False]['text':'/< an floating point number -- use get_number_float() for actual value','line_number':6471,'multiline':False]['text':'/< the character for array begin `[`','line_number':6472,'multiline':False]['text':'/< the character for object begin `{`','line_number':6473,'multiline':False]['text':'/< the character for array end `]`','line_number':6474,'multiline':False]['text':'/< the character for object end `}`','line_number':6475,'multiline':False]['text':'/< the name separator `:`','line_number':6476,'multiline':False]['text':'/< the value separator `,`','line_number':6477,'multiline':False]['text':'/< indicating a parse error','line_number':6478,'multiline':False]['text':'/< indicating the end of the input buffer','line_number':6479,'multiline':False]['text':'/< a literal or the begin of a value (only for diagnostics)','line_number':6480,'multiline':False]['text':'/ return name of values of type token_type (only used for errors)','line_number':6483,'multiline':False]['text':' LCOV_EXCL_START','line_number':6522,'multiline':False]['text':' catch non-enum values','line_number':6523,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':6525,'multiline':False]['text':'!
@brief lexical analysis

This class organizes the lexical analysis during JSON deserialization.
','line_number':6529,'multiline':True]['text':' delete because of pointer members','line_number':6553,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6555,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':6557,'multiline':False]['text':'///////////////////','line_number':6561,'multiline':False]['text':' locales','line_number':6562,'multiline':False]['text':'///////////////////','line_number':6563,'multiline':False]['text':'/ return the locale-dependent decimal point','line_number':6565,'multiline':False]['text':'///////////////////','line_number':6574,'multiline':False]['text':' scan functions','line_number':6575,'multiline':False]['text':'///////////////////','line_number':6576,'multiline':False]['text':'!
    @brief get codepoint from 4 hex characters following `\u`

    For input "\u c1 c2 c3 c4" the codepoint is:
      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4
    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)

    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'
    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The
    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)
    between the ASCII value of the character and the desired integer value.

    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or
            non-hex character)
    ','line_number':6578,'multiline':True]['text':' this function only makes sense after reading `\u`','line_number':6595,'multiline':False]['text':'!
    @brief check if the next byte(s) are inside a given range

    Adds the current byte and, for each passed range, reads a new byte and
    checks if it is inside the range. If a violation was detected, set up an
    error message and return false. Otherwise, return true.

    @param[in] ranges  list of integers; interpreted as list of pairs of
                       inclusive lower and upper bound, respectively

    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
         1, 2, or 3 pairs. This precondition is enforced by an assertion.

    @return true if and only if no range violation was detected
    ','line_number':6626,'multiline':True]['text':'!
    @brief scan a string literal

    This function scans a string according to Sect. 7 of RFC 8259. While
    scanning, bytes are escaped and copied into buffer token_buffer. Then the
    function returns successfully, token_buffer is *not* null-terminated (as it
    may contain \0 bytes), and token_buffer.size() is the number of bytes in the
    string.

    @return token_type::value_string if string could be successfully scanned,
            token_type::parse_error otherwise

    @note In case of errors, variable error_message contains a textual
          description.
    ','line_number':6663,'multiline':True]['text':' reset token_buffer (ignore opening quote)','line_number':6680,'multiline':False]['text':' we entered the function by reading an open quote','line_number':6683,'multiline':False]['text':' get next character','line_number':6688,'multiline':False]['text':' end of file while parsing string','line_number':6691,'multiline':False]['text':' closing quote','line_number':6698,'multiline':False]['text':' escapes','line_number':6704,'multiline':False]['text':' quotation mark','line_number':6709,'multiline':False]['text':' reverse solidus','line_number':6713,'multiline':False]['text':' solidus','line_number':6717,'multiline':False]['text':' backspace','line_number':6721,'multiline':False]['text':' form feed','line_number':6725,'multiline':False]['text':' line feed','line_number':6729,'multiline':False]['text':' carriage return','line_number':6733,'multiline':False]['text':' tab','line_number':6737,'multiline':False]['text':' unicode escapes','line_number':6742,'multiline':False]['text':' start with codepoint1','line_number':6746,'multiline':False]['text':' check if code point is a high surrogate','line_number':6754,'multiline':False]['text':' expect next \uxxxx entry','line_number':6757,'multiline':False]['text':' check if codepoint2 is a low surrogate','line_number':6768,'multiline':False]['text':' overwrite codepoint','line_number':6771,'multiline':False]['text':' high surrogate occupies the most significant 22 bits','line_number':6773,'multiline':False]['text':' low surrogate occupies the least significant 15 bits','line_number':6775,'multiline':False]['text':' there is still the 0xD800, 0xDC00 and 0x10000 noise','line_number':6777,'multiline':False]['text':' in the result so we have to subtract with:','line_number':6778,'multiline':False]['text':' (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00','line_number':6779,'multiline':False]['text':' result of the above calculation yields a proper codepoint','line_number':6803,'multiline':False]['text':' translate codepoint into bytes','line_number':6806,'multiline':False]['text':' 1-byte characters: 0xxxxxxx (ASCII)','line_number':6809,'multiline':False]['text':' 2-byte characters: 110xxxxx 10xxxxxx','line_number':6814,'multiline':False]['text':' 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx','line_number':6820,'multiline':False]['text':' 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx','line_number':6827,'multiline':False]['text':' other characters after escape','line_number':6837,'multiline':False]['text':' invalid control characters','line_number':6846,'multiline':False]['text':' U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))','line_number':7039,'multiline':False]['text':' U+0080..U+07FF: bytes C2..DF 80..BF','line_number':7139,'multiline':False]['text':' U+0800..U+0FFF: bytes E0 A0..BF 80..BF','line_number':7178,'multiline':False]['text':' U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF','line_number':7188,'multiline':False]['text':' U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF','line_number':7189,'multiline':False]['text':' U+D000..U+D7FF: bytes ED 80..9F 80..BF','line_number':7212,'multiline':False]['text':' U+10000..U+3FFFF F0 90..BF 80..BF 80..BF','line_number':7222,'multiline':False]['text':' U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF','line_number':7232,'multiline':False]['text':' U+100000..U+10FFFF F4 80..8F 80..BF 80..BF','line_number':7244,'multiline':False]['text':' remaining bytes (80..C1 and F5..FF) are ill-formed','line_number':7254,'multiline':False]['text':'!
     * @brief scan a comment
     * @return whether comment could be scanned successfully
     ','line_number':7264,'multiline':True]['text':' single-line comments skip input until a newline or EOF is read','line_number':7272,'multiline':False]['text':' multi-line comments skip input until */ is read','line_number':7291,'multiline':False]['text':' unexpected character after reading '/'','line_number':7326,'multiline':False]['text':'!
    @brief scan a number literal

    This function scans a string according to Sect. 6 of RFC 8259.

    The function is realized with a deterministic finite state machine derived
    from the grammar described in RFC 8259. Starting in state "init", the
    input is read and used to determined the next state. Only state "done"
    accepts the number. State "error" is a trap state to model errors. In the
    table below, "anything" means any character but the ones listed before.

    state    | 0        | 1-9      | e E      | +       | -       | .        | anything
    ---------|----------|----------|----------|---------|---------|----------|-----------
    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]
    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]
    zero     | done     | done     | exponent | done    | done    | decimal1 | done
    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done
    decimal1 | decimal2 | decimal2 | [error]  | [error] | [error] | [error]  | [error]
    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done
    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]
    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]
    any2     | any2     | any2     | done     | done    | done    | done     | done

    The state machine is realized with one label per state (prefixed with
    "scan_number_") and `goto` statements between them. The state machine
    contains cycles, but any cycle can be left when EOF is read. Therefore,
    the function is guaranteed to terminate.

    During scanning, the read bytes are stored in token_buffer. This string is
    then converted to a signed integer, an unsigned integer, or a
    floating-point number.

    @return token_type::value_unsigned, token_type::value_integer, or
            token_type::value_float if number could be successfully scanned,
            token_type::parse_error otherwise

    @note The scanner is independent of the current locale. Internally, the
          locale's decimal point is used instead of `.` to work with the
          locale-dependent converters.
    ','line_number':7353,'multiline':True]['text':' lgtm [cpp/use-of-goto]','line_number':7393,'multiline':False]['text':' reset token_buffer to store the number's bytes','line_number':7395,'multiline':False]['text':' the type of the parsed number; initially set to unsigned; will be','line_number':7398,'multiline':False]['text':' changed if minus sign, decimal point or exponent is read','line_number':7399,'multiline':False]['text':' state (init): we just found out we need to scan a number','line_number':7402,'multiline':False]['text':' all other characters are rejected outside scan_number()','line_number':7431,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':7432,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':7433,'multiline':False]['text':' state: we just parsed a leading minus sign','line_number':7437,'multiline':False]['text':' state: we just parse a zero (maybe with a leading minus sign)','line_number':7469,'multiline':False]['text':' state: we just parsed a number 0-9 (maybe with a leading minus sign)','line_number':7490,'multiline':False]['text':' state: we just parsed a decimal point','line_number':7526,'multiline':False]['text':' we just parsed at least one number after a decimal point','line_number':7553,'multiline':False]['text':' we just parsed an exponent','line_number':7583,'multiline':False]['text':' we just parsed an exponent sign','line_number':7618,'multiline':False]['text':' we just parsed a number after the exponent or exponent sign','line_number':7644,'multiline':False]['text':' unget the character after the number (we only read it to know that','line_number':7667,'multiline':False]['text':' we are done scanning a number)','line_number':7668,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':7671,'multiline':False]['text':' try to parse integers first and fall back to floats','line_number':7674,'multiline':False]['text':' we checked the number format before','line_number':7679,'multiline':False]['text':' we checked the number format before','line_number':7695,'multiline':False]['text':' this code is reached if we parse a floating-point number or if an','line_number':7708,'multiline':False]['text':' integer conversion above failed','line_number':7709,'multiline':False]['text':' we checked the number format before','line_number':7712,'multiline':False]['text':'!
    @param[in] literal_text  the literal text to expect
    @param[in] length        the length of the passed literal text
    @param[in] return_type   the token type to return on success
    ','line_number':7718,'multiline':True]['text':'///////////////////','line_number':7739,'multiline':False]['text':' input management','line_number':7740,'multiline':False]['text':'///////////////////','line_number':7741,'multiline':False]['text':'/ reset token_buffer; current character is beginning of token','line_number':7743,'multiline':False]['text':'
    @brief get next character from the input

    This function provides the interface to the used input adapter. It does
    not throw in case the input reached EOF, but returns a
    `std::char_traits<char>::eof()` in that case.  Stores the scanned characters
    for use in error messages.

    @return character read from the input
    ','line_number':7751,'multiline':True]['text':' just reset the next_unget variable and work with current','line_number':7768,'multiline':False]['text':'!
    @brief unget current character (read it again on next get)

    We implement unget by setting variable next_unget to true. The input is not
    changed - we just simulate ungetting by modifying chars_read_total,
    chars_read_current_line, and token_string. The next call to get() will
    behave as if the unget character is read again.
    ','line_number':7790,'multiline':True]['text':' in case we "unget" a newline, we have to also decrement the lines_read','line_number':7804,'multiline':False]['text':'/ add a character to token_buffer','line_number':7824,'multiline':False]['text':'///////////////////','line_number':7831,'multiline':False]['text':' value getters','line_number':7832,'multiline':False]['text':'///////////////////','line_number':7833,'multiline':False]['text':'/ return integer value','line_number':7835,'multiline':False]['text':'/ return unsigned integer value','line_number':7841,'multiline':False]['text':'/ return floating-point value','line_number':7847,'multiline':False]['text':'/ return current string value (implicitly resets the token; useful only once)','line_number':7853,'multiline':False]['text':'///////////////////','line_number':7859,'multiline':False]['text':' diagnostics','line_number':7860,'multiline':False]['text':'///////////////////','line_number':7861,'multiline':False]['text':'/ return position of last read token','line_number':7863,'multiline':False]['text':'/ return the last read token (for errors only).  Will never contain EOF','line_number':7869,'multiline':False]['text':'/ (an arbitrary value that is not a valid char value, often -1), because','line_number':7870,'multiline':False]['text':'/ 255 may legitimately occur.  May contain NUL, which should be escaped.','line_number':7871,'multiline':False]['text':' escape control characters','line_number':7874,'multiline':False]['text':' escape control characters','line_number':7880,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':7882,'multiline':False]['text':' add character as is','line_number':7887,'multiline':False]['text':'/ return syntax error message','line_number':7895,'multiline':False]['text':'///////////////////','line_number':7902,'multiline':False]['text':' actual scanner','line_number':7903,'multiline':False]['text':'///////////////////','line_number':7904,'multiline':False]['text':'!
    @brief skip the UTF-8 byte order mark
    @return true iff there is no BOM or the correct BOM has been skipped
    ','line_number':7906,'multiline':True]['text':' check if we completely parse the BOM','line_number':7914,'multiline':False]['text':' the first character is not the beginning of the BOM; unget it to','line_number':7918,'multiline':False]['text':' process is later','line_number':7919,'multiline':False]['text':' initially, skip the BOM','line_number':7935,'multiline':False]['text':' read next character and ignore whitespace','line_number':7942,'multiline':False]['text':' ignore comments','line_number':7945,'multiline':False]['text':' skip following whitespace','line_number':7953,'multiline':False]['text':' structural characters','line_number':7959,'multiline':False]['text':' literals','line_number':7973,'multiline':False]['text':' string','line_number':7990,'multiline':False]['text':' number','line_number':7994,'multiline':False]['text':' end of input (the null byte is needed when parsing from','line_number':8008,'multiline':False]['text':' string literals)','line_number':8009,'multiline':False]['text':' error','line_number':8014,'multiline':False]['text':'/ input adapter','line_number':8022,'multiline':False]['text':'/ whether comments should be ignored (true) or signaled as errors (false)','line_number':8025,'multiline':False]['text':'/ the current character','line_number':8028,'multiline':False]['text':'/ whether the next get() call should just return current','line_number':8031,'multiline':False]['text':'/ the start position of the current token','line_number':8034,'multiline':False]['text':'/ raw input token string (for error messages)','line_number':8037,'multiline':False]['text':'/ buffer for variable-length tokens (numbers, strings)','line_number':8040,'multiline':False]['text':'/ a description of occurred lexer errors','line_number':8043,'multiline':False]['text':' number values','line_number':8046,'multiline':False]['text':'/ the decimal point','line_number':8051,'multiline':False]['text':' namespace detail','line_number':8054,'multiline':False]['text':' namespace nlohmann','line_number':8055,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':8057,'multiline':False]['text':' #include <nlohmann/detail/meta/is_sax.hpp>','line_number':8059,'multiline':False]['text':' size_t','line_number':8062,'multiline':False]['text':' declval','line_number':8063,'multiline':False]['text':' string','line_number':8064,'multiline':False]['text':' #include <nlohmann/detail/meta/detected.hpp>','line_number':8066,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':8068,'multiline':False]['text':' namespace detail','line_number':8209,'multiline':False]['text':' namespace nlohmann','line_number':8210,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':8212,'multiline':False]['text':'/ how to treat CBOR tags','line_number':8220,'multiline':False]['text':'/< throw a parse_error exception in case of a tag','line_number':8223,'multiline':False]['text':'/< ignore tags','line_number':8224,'multiline':False]['text':'!
@brief determine system byte order

@return true if and only if system's byte order is little endian

@note from https://stackoverflow.com/a/1001328/266378
','line_number':8227,'multiline':True]['text':'/////////////////','line_number':8240,'multiline':False]['text':' binary reader //','line_number':8241,'multiline':False]['text':'/////////////////','line_number':8242,'multiline':False]['text':'!
@brief deserialization of CBOR, MessagePack, and UBJSON values
','line_number':8244,'multiline':True]['text':'!
    @brief create a binary reader

    @param[in] adapter  input adapter to read from
    ','line_number':8260,'multiline':True]['text':' make class move-only','line_number':8270,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':8272,'multiline':False]['text':' NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)','line_number':8274,'multiline':False]['text':'!
    @param[in] format  the binary format to parse
    @param[in] sax_    a SAX event processor
    @param[in] strict  whether to expect the input to be consumed completed
    @param[in] tag_handler  how to treat CBOR tags

    @return whether parsing was successful
    ','line_number':8277,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':8312,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':8313,'multiline':False]['text':' strict mode: next byte must be EOF','line_number':8316,'multiline':False]['text':'////////','line_number':8339,'multiline':False]['text':' BSON //','line_number':8340,'multiline':False]['text':'////////','line_number':8341,'multiline':False]['text':'!
    @brief Reads in a BSON-object and passes it to the SAX-parser.
    @return whether a valid BSON-value was passed to the SAX parser
    ','line_number':8343,'multiline':True]['text':'is_array','line_number':8357,'multiline':True]['text':'!
    @brief Parses a C-style string from the BSON input.
    @param[in,out] result  A reference to the string variable where the read
                            string is to be stored.
    @return `true` if the \x00-byte indicating the end of the string was
             encountered before the EOF; false` indicates an unexpected EOF.
    ','line_number':8365,'multiline':True]['text':'!
    @brief Parses a zero-terminated string of length @a len from the BSON
           input.
    @param[in] len  The length (including the zero-byte at the end) of the
                    string to be read.
    @param[in,out] result  A reference to the string variable where the read
                            string is to be stored.
    @tparam NumberType The type of the length @a len
    @pre len >= 1
    @return `true` if the string was successfully parsed
    ','line_number':8390,'multiline':True]['text':'!
    @brief Parses a byte array input of length @a len from the BSON input.
    @param[in] len  The length of the byte array to be read.
    @param[in,out] result  A reference to the binary variable where the read
                            array is to be stored.
    @tparam NumberType The type of the length @a len
    @pre len >= 0
    @return `true` if the byte array was successfully parsed
    ','line_number':8413,'multiline':True]['text':' All BSON binary values have a subtype','line_number':8431,'multiline':False]['text':'!
    @brief Read a BSON document element of the given @a element_type.
    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
    @param[in] element_type_parse_position The position in the input stream,
               where the `element_type` was read.
    @warning Not all BSON element types are supported yet. An unsupported
             @a element_type will give rise to a parse_error.114:
             Unsupported BSON record type 0x...
    @return whether a valid BSON-object/array was passed to the SAX parser
    ','line_number':8439,'multiline':True]['text':' double','line_number':8454,'multiline':False]['text':' string','line_number':8460,'multiline':False]['text':' object','line_number':8467,'multiline':False]['text':' array','line_number':8472,'multiline':False]['text':' binary','line_number':8477,'multiline':False]['text':' boolean','line_number':8484,'multiline':False]['text':' null','line_number':8489,'multiline':False]['text':' int32','line_number':8494,'multiline':False]['text':' int64','line_number':8500,'multiline':False]['text':' anything else not supported (yet)','line_number':8506,'multiline':False]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':8509,'multiline':False]['text':'!
    @brief Read a BSON element list (as specified in the BSON-spec)

    The same binary layout is used for objects and arrays, hence it must be
    indicated with the argument @a is_array which one is expected
    (true --> array, false --> object).

    @param[in] is_array Determines if the element list being read is to be
                        treated as an object (@a is_array == false), or as an
                        array (@a is_array == true).
    @return whether a valid BSON-object/array was passed to the SAX parser
    ','line_number':8515,'multiline':True]['text':' get_bson_cstr only appends','line_number':8554,'multiline':False]['text':'!
    @brief Reads an array from the BSON input and passes it to the SAX-parser.
    @return whether a valid BSON-array was passed to the SAX parser
    ','line_number':8561,'multiline':True]['text':'is_array','line_number':8575,'multiline':True]['text':'////////','line_number':8583,'multiline':False]['text':' CBOR //','line_number':8584,'multiline':False]['text':'////////','line_number':8585,'multiline':False]['text':'!
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true) or whether the last read character should
                         be considered instead (false)
    @param[in] tag_handler how CBOR tags should be treated

    @return whether a valid CBOR value was passed to the SAX parser
    ','line_number':8587,'multiline':True]['text':' EOF','line_number':8600,'multiline':False]['text':' Integer 0x00..0x17 (0..23)','line_number':8604,'multiline':False]['text':' Unsigned integer (one-byte uint8_t follows)','line_number':8631,'multiline':False]['text':' Unsigned integer (two-byte uint16_t follows)','line_number':8637,'multiline':False]['text':' Unsigned integer (four-byte uint32_t follows)','line_number':8643,'multiline':False]['text':' Unsigned integer (eight-byte uint64_t follows)','line_number':8649,'multiline':False]['text':' Negative integer -1-0x00..-1-0x17 (-1..-24)','line_number':8655,'multiline':False]['text':' Negative integer (one-byte uint8_t follows)','line_number':8682,'multiline':False]['text':' Negative integer -1-n (two-byte uint16_t follows)','line_number':8688,'multiline':False]['text':' Negative integer -1-n (four-byte uint32_t follows)','line_number':8694,'multiline':False]['text':' Negative integer -1-n (eight-byte uint64_t follows)','line_number':8700,'multiline':False]['text':' Binary data (0x00..0x17 bytes follow)','line_number':8707,'multiline':False]['text':' Binary data (one-byte uint8_t for n follows)','line_number':8732,'multiline':False]['text':' Binary data (two-byte uint16_t for n follow)','line_number':8733,'multiline':False]['text':' Binary data (four-byte uint32_t for n follow)','line_number':8734,'multiline':False]['text':' Binary data (eight-byte uint64_t for n follow)','line_number':8735,'multiline':False]['text':' Binary data (indefinite length)','line_number':8736,'multiline':False]['text':' UTF-8 string (0x00..0x17 bytes follow)','line_number':8742,'multiline':False]['text':' UTF-8 string (one-byte uint8_t for n follows)','line_number':8767,'multiline':False]['text':' UTF-8 string (two-byte uint16_t for n follow)','line_number':8768,'multiline':False]['text':' UTF-8 string (four-byte uint32_t for n follow)','line_number':8769,'multiline':False]['text':' UTF-8 string (eight-byte uint64_t for n follow)','line_number':8770,'multiline':False]['text':' UTF-8 string (indefinite length)','line_number':8771,'multiline':False]['text':' array (0x00..0x17 data items follow)','line_number':8777,'multiline':False]['text':' array (one-byte uint8_t for n follows)','line_number':8804,'multiline':False]['text':' array (two-byte uint16_t for n follow)','line_number':8810,'multiline':False]['text':' array (four-byte uint32_t for n follow)','line_number':8816,'multiline':False]['text':' array (eight-byte uint64_t for n follow)','line_number':8822,'multiline':False]['text':' array (indefinite length)','line_number':8828,'multiline':False]['text':' map (0x00..0x17 pairs of data items follow)','line_number':8831,'multiline':False]['text':' map (one-byte uint8_t for n follows)','line_number':8858,'multiline':False]['text':' map (two-byte uint16_t for n follow)','line_number':8864,'multiline':False]['text':' map (four-byte uint32_t for n follow)','line_number':8870,'multiline':False]['text':' map (eight-byte uint64_t for n follow)','line_number':8876,'multiline':False]['text':' map (indefinite length)','line_number':8882,'multiline':False]['text':' tagged item','line_number':8885,'multiline':False]['text':' tagged item (1 bytes follow)','line_number':8900,'multiline':False]['text':' tagged item (2 bytes follow)','line_number':8901,'multiline':False]['text':' tagged item (4 bytes follow)','line_number':8902,'multiline':False]['text':' tagged item (8 bytes follow)','line_number':8903,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':8947,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':8948,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':8949,'multiline':False]['text':' false','line_number':8953,'multiline':False]['text':' true','line_number':8956,'multiline':False]['text':' null','line_number':8959,'multiline':False]['text':' Half-Precision Float (two-byte IEEE 754)','line_number':8962,'multiline':False]['text':' code from RFC 7049, Appendix D, Figure 3:','line_number':8978,'multiline':False]['text':' As half-precision floating-point numbers were only added','line_number':8979,'multiline':False]['text':' to IEEE 754 in 2008, today's programming platforms often','line_number':8980,'multiline':False]['text':' still only have limited support for them. It is very','line_number':8981,'multiline':False]['text':' easy to include at least decoding support for them even','line_number':8982,'multiline':False]['text':' without such support. An example of a small decoder for','line_number':8983,'multiline':False]['text':' half-precision floating-point numbers in the C language','line_number':8984,'multiline':False]['text':' is shown in Fig. 3.','line_number':8985,'multiline':False]['text':' Single-Precision Float (four-byte IEEE 754)','line_number':9010,'multiline':False]['text':' Double-Precision Float (eight-byte IEEE 754)','line_number':9016,'multiline':False]['text':' anything else (0xFF is handled inside the other types)','line_number':9022,'multiline':False]['text':'!
    @brief reads a CBOR string

    This function first reads starting bytes to determine the expected
    string length and then copies this number of bytes into a string.
    Additionally, CBOR's strings with indefinite lengths are supported.

    @param[out] result  created string

    @return whether string creation completed
    ','line_number':9030,'multiline':True]['text':' UTF-8 string (0x00..0x17 bytes follow)','line_number':9050,'multiline':False]['text':' UTF-8 string (one-byte uint8_t for n follows)','line_number':9079,'multiline':False]['text':' UTF-8 string (two-byte uint16_t for n follow)','line_number':9085,'multiline':False]['text':' UTF-8 string (four-byte uint32_t for n follow)','line_number':9091,'multiline':False]['text':' UTF-8 string (eight-byte uint64_t for n follow)','line_number':9097,'multiline':False]['text':' UTF-8 string (indefinite length)','line_number':9103,'multiline':False]['text':'!
    @brief reads a CBOR byte array

    This function first reads starting bytes to determine the expected
    byte array length and then copies this number of bytes into the byte array.
    Additionally, CBOR's byte arrays with indefinite lengths are supported.

    @param[out] result  created byte array

    @return whether byte array creation completed
    ','line_number':9125,'multiline':True]['text':' Binary data (0x00..0x17 bytes follow)','line_number':9145,'multiline':False]['text':' Binary data (one-byte uint8_t for n follows)','line_number':9174,'multiline':False]['text':' Binary data (two-byte uint16_t for n follow)','line_number':9181,'multiline':False]['text':' Binary data (four-byte uint32_t for n follow)','line_number':9188,'multiline':False]['text':' Binary data (eight-byte uint64_t for n follow)','line_number':9195,'multiline':False]['text':' Binary data (indefinite length)','line_number':9202,'multiline':False]['text':'!
    @param[in] len  the length of the array or std::size_t(-1) for an
                    array of indefinite size
    @param[in] tag_handler how CBOR tags should be treated
    @return whether array creation completed
    ','line_number':9224,'multiline':True]['text':'!
    @param[in] len  the length of the object or std::size_t(-1) for an
                    object of indefinite size
    @param[in] tag_handler how CBOR tags should be treated
    @return whether object creation completed
    ','line_number':9262,'multiline':True]['text':'///////////','line_number':9314,'multiline':False]['text':' MsgPack //','line_number':9315,'multiline':False]['text':'///////////','line_number':9316,'multiline':False]['text':'!
    @return whether a valid MessagePack value was passed to the SAX parser
    ','line_number':9318,'multiline':True]['text':' EOF','line_number':9325,'multiline':False]['text':' positive fixint','line_number':9329,'multiline':False]['text':' fixmap','line_number':9460,'multiline':False]['text':' fixarray','line_number':9479,'multiline':False]['text':' fixstr','line_number':9498,'multiline':False]['text':' str 8','line_number':9531,'multiline':False]['text':' str 16','line_number':9532,'multiline':False]['text':' str 32','line_number':9533,'multiline':False]['text':' nil','line_number':9539,'multiline':False]['text':' false','line_number':9542,'multiline':False]['text':' true','line_number':9545,'multiline':False]['text':' bin 8','line_number':9548,'multiline':False]['text':' bin 16','line_number':9549,'multiline':False]['text':' bin 32','line_number':9550,'multiline':False]['text':' ext 8','line_number':9551,'multiline':False]['text':' ext 16','line_number':9552,'multiline':False]['text':' ext 32','line_number':9553,'multiline':False]['text':' fixext 1','line_number':9554,'multiline':False]['text':' fixext 2','line_number':9555,'multiline':False]['text':' fixext 4','line_number':9556,'multiline':False]['text':' fixext 8','line_number':9557,'multiline':False]['text':' fixext 16','line_number':9558,'multiline':False]['text':' float 32','line_number':9564,'multiline':False]['text':' float 64','line_number':9570,'multiline':False]['text':' uint 8','line_number':9576,'multiline':False]['text':' uint 16','line_number':9582,'multiline':False]['text':' uint 32','line_number':9588,'multiline':False]['text':' uint 64','line_number':9594,'multiline':False]['text':' int 8','line_number':9600,'multiline':False]['text':' int 16','line_number':9606,'multiline':False]['text':' int 32','line_number':9612,'multiline':False]['text':' int 64','line_number':9618,'multiline':False]['text':' array 16','line_number':9624,'multiline':False]['text':' array 32','line_number':9630,'multiline':False]['text':' map 16','line_number':9636,'multiline':False]['text':' map 32','line_number':9642,'multiline':False]['text':' negative fixint','line_number':9648,'multiline':False]['text':' anything else','line_number':9683,'multiline':False]['text':'!
    @brief reads a MessagePack string

    This function first reads starting bytes to determine the expected
    string length and then copies this number of bytes into a string.

    @param[out] result  created string

    @return whether string creation completed
    ','line_number':9691,'multiline':True]['text':' fixstr','line_number':9710,'multiline':False]['text':' str 8','line_number':9747,'multiline':False]['text':' str 16','line_number':9753,'multiline':False]['text':' str 32','line_number':9759,'multiline':False]['text':'!
    @brief reads a MessagePack byte array

    This function first reads starting bytes to determine the expected
    byte array length and then copies this number of bytes into a byte array.

    @param[out] result  created byte array

    @return whether byte array creation completed
    ','line_number':9773,'multiline':True]['text':' helper function to set the subtype','line_number':9785,'multiline':False]['text':' bin 8','line_number':9794,'multiline':False]['text':' bin 16','line_number':9801,'multiline':False]['text':' bin 32','line_number':9808,'multiline':False]['text':' ext 8','line_number':9815,'multiline':False]['text':' ext 16','line_number':9825,'multiline':False]['text':' ext 32','line_number':9835,'multiline':False]['text':' fixext 1','line_number':9845,'multiline':False]['text':' fixext 2','line_number':9853,'multiline':False]['text':' fixext 4','line_number':9861,'multiline':False]['text':' fixext 8','line_number':9869,'multiline':False]['text':' fixext 16','line_number':9877,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':9885,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':9886,'multiline':False]['text':'!
    @param[in] len  the length of the array
    @return whether array creation completed
    ','line_number':9890,'multiline':True]['text':'!
    @param[in] len  the length of the object
    @return whether object creation completed
    ','line_number':9912,'multiline':True]['text':'//////////','line_number':9942,'multiline':False]['text':' UBJSON //','line_number':9943,'multiline':False]['text':'//////////','line_number':9944,'multiline':False]['text':'!
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true, default) or whether the last read
                         character should be considered instead

    @return whether a valid UBJSON value was passed to the SAX parser
    ','line_number':9946,'multiline':True]['text':'!
    @brief reads a UBJSON string

    This function is either called after reading the 'S' byte explicitly
    indicating a string, or in case of an object key where the 'S' byte can be
    left out.

    @param[out] result   created string
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true, default) or whether the last read
                         character should be considered instead

    @return whether string creation completed
    ','line_number':9958,'multiline':True]['text':' TODO(niels): may we ignore N here?','line_number':9976,'multiline':False]['text':'!
    @param[out] result  determined size
    @return whether size determination completed
    ','line_number':10022,'multiline':True]['text':' NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char','line_number':10048,'multiline':False]['text':'!
    @brief determine the type and size for a container

    In the optimized UBJSON format, a type and a size can be provided to allow
    for a more compact representation.

    @param[out] result  pair of the size and the type

    @return whether pair creation completed
    ','line_number':10093,'multiline':True]['text':' size','line_number':10105,'multiline':False]['text':' type','line_number':10106,'multiline':False]['text':' must not ignore 'N', because 'N' maybe the type','line_number':10112,'multiline':False]['text':'!
    @param prefix  the previously read or set type prefix
    @return whether value creation completed
    ','line_number':10140,'multiline':True]['text':' EOF','line_number':10148,'multiline':False]['text':' true','line_number':10151,'multiline':False]['text':' false','line_number':10153,'multiline':False]['text':' null','line_number':10156,'multiline':False]['text':' char','line_number':10206,'multiline':False]['text':' string','line_number':10222,'multiline':False]['text':' array','line_number':10228,'multiline':False]['text':' object','line_number':10231,'multiline':False]['text':' anything else','line_number':10234,'multiline':False]['text':'!
    @return whether array creation completed
    ','line_number':10242,'multiline':True]['text':'!
    @return whether object creation completed
    ','line_number':10304,'multiline':True]['text':' Note, no reader for UBJSON binary types is implemented because they do','line_number':10379,'multiline':False]['text':' not exist','line_number':10380,'multiline':False]['text':' get size of following number string','line_number':10384,'multiline':False]['text':' get number string','line_number':10392,'multiline':False]['text':' parse number string','line_number':10404,'multiline':False]['text':'/////////////////////','line_number':10431,'multiline':False]['text':' Utility functions //','line_number':10432,'multiline':False]['text':'/////////////////////','line_number':10433,'multiline':False]['text':'!
    @brief get next character from the input

    This function provides the interface to the used input adapter. It does
    not throw in case the input reached EOF, but returns a -'ve valued
    `std::char_traits<char_type>::eof()` in that case.

    @return character read from the input
    ','line_number':10435,'multiline':True]['text':'!
    @return character read from the input after ignoring all 'N' entries
    ','line_number':10450,'multiline':True]['text':'
    @brief read a number from the input

    @tparam NumberType the type of the number
    @param[in] format   the current format (for diagnostics)
    @param[out] result  number of type @a NumberType

    @return whether conversion completed

    @note This function needs to respect the system's endianess, because
          bytes in CBOR, MessagePack, and UBJSON are stored in network order
          (big endian) and therefore need reordering on little endian systems.
    ','line_number':10464,'multiline':True]['text':' step 1: read input into array with system's byte order','line_number':10480,'multiline':False]['text':' reverse byte order prior to conversion if necessary','line_number':10490,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':10497,'multiline':False]['text':' step 2: convert array into number of type T and return','line_number':10501,'multiline':False]['text':'!
    @brief create a string by reading characters from the input

    @tparam NumberType the type of the number
    @param[in] format the current format (for diagnostics)
    @param[in] len number of characters to read
    @param[out] result string created by reading @a len bytes

    @return whether string creation completed

    @note We can not reserve @a len bytes for the result, because @a len
          may be too large. Usually, @ref unexpect_eof() detects the end of
          the input before we run out of string memory.
    ','line_number':10506,'multiline':True]['text':'!
    @brief create a byte array by reading bytes from the input

    @tparam NumberType the type of the number
    @param[in] format the current format (for diagnostics)
    @param[in] len number of bytes to read
    @param[out] result byte array created by reading @a len bytes

    @return whether byte array creation completed

    @note We can not reserve @a len bytes for the result, because @a len
          may be too large. Usually, @ref unexpect_eof() detects the end of
          the input before we run out of memory.
    ','line_number':10539,'multiline':True]['text':'!
    @param[in] format   the current format (for diagnostics)
    @param[in] context  further context information (for diagnostics)
    @return whether the last read character is not EOF
    ','line_number':10572,'multiline':True]['text':'!
    @return a string representation of the last read byte
    ','line_number':10588,'multiline':True]['text':' NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':10594,'multiline':False]['text':'!
    @param[in] format   the current format
    @param[in] detail   a detailed error message
    @param[in] context  further context information
    @return a message string to use in the parse_error exceptions
    ','line_number':10598,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':10628,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':10629,'multiline':False]['text':'/ input adapter','line_number':10636,'multiline':False]['text':'/ the current character','line_number':10639,'multiline':False]['text':'/ the number of characters read','line_number':10642,'multiline':False]['text':'/ whether we can assume little endianess','line_number':10645,'multiline':False]['text':'/ the SAX parser','line_number':10648,'multiline':False]['text':' namespace detail','line_number':10651,'multiline':False]['text':' namespace nlohmann','line_number':10652,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':10654,'multiline':False]['text':' #include <nlohmann/detail/input/lexer.hpp>','line_number':10656,'multiline':False]['text':' #include <nlohmann/detail/input/parser.hpp>','line_number':10658,'multiline':False]['text':' isfinite','line_number':10661,'multiline':False]['text':' uint8_t','line_number':10662,'multiline':False]['text':' function','line_number':10663,'multiline':False]['text':' string','line_number':10664,'multiline':False]['text':' move','line_number':10665,'multiline':False]['text':' vector','line_number':10666,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':10668,'multiline':False]['text':' #include <nlohmann/detail/input/input_adapters.hpp>','line_number':10670,'multiline':False]['text':' #include <nlohmann/detail/input/json_sax.hpp>','line_number':10672,'multiline':False]['text':' #include <nlohmann/detail/input/lexer.hpp>','line_number':10674,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':10676,'multiline':False]['text':' #include <nlohmann/detail/meta/is_sax.hpp>','line_number':10678,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':10680,'multiline':False]['text':'//////////','line_number':10687,'multiline':False]['text':' parser //','line_number':10688,'multiline':False]['text':'//////////','line_number':10689,'multiline':False]['text':'/ the parser read `{` and started to process a JSON object','line_number':10693,'multiline':False]['text':'/ the parser read `}` and finished processing a JSON object','line_number':10695,'multiline':False]['text':'/ the parser read `[` and started to process a JSON array','line_number':10697,'multiline':False]['text':'/ the parser read `]` and finished processing a JSON array','line_number':10699,'multiline':False]['text':'/ the parser read a key of a value in an object','line_number':10701,'multiline':False]['text':'/ the parser finished reading a JSON value','line_number':10703,'multiline':False]['text':'depth','line_number':10709,'multiline':True]['text':'event','line_number':10709,'multiline':True]['text':'parsed','line_number':10709,'multiline':True]['text':'!
@brief syntax analysis

This class implements a recursive descent parser.
','line_number':10711,'multiline':True]['text':'/ a parser reading from an input adapter','line_number':10727,'multiline':False]['text':' read first token','line_number':10736,'multiline':False]['text':'!
    @brief public parser interface

    @param[in] strict      whether to expect the last token to be EOF
    @param[in,out] result  parsed JSON value

    @throw parse_error.101 in case of an unexpected token
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails
    ','line_number':10740,'multiline':True]['text':' in strict mode, input must be completely read','line_number':10757,'multiline':False]['text':' in case of an error, return discarded value','line_number':10766,'multiline':False]['text':' set top-level value to null if it was discarded by the callback','line_number':10773,'multiline':False]['text':' function','line_number':10774,'multiline':False]['text':' in strict mode, input must be completely read','line_number':10785,'multiline':False]['text':' in case of an error, return discarded value','line_number':10793,'multiline':False]['text':'!
    @brief public accept interface

    @param[in] strict  whether to expect the last token to be EOF
    @return whether the input is a proper JSON text
    ','line_number':10804,'multiline':True]['text':' strict mode: next byte must be EOF','line_number':10823,'multiline':False]['text':' stack to remember the hierarchy of structured values we are parsing','line_number':10839,'multiline':False]['text':' true = array; false = object','line_number':10840,'multiline':False]['text':' value to avoid a goto (see comment where set to true)','line_number':10842,'multiline':False]['text':' invariant: get_token() was called before each iteration','line_number':10849,'multiline':False]['text':' closing } -> we are done','line_number':10859,'multiline':False]['text':' parse key','line_number':10869,'multiline':False]['text':' parse separator (:)','line_number':10881,'multiline':False]['text':' remember we are now inside an object','line_number':10889,'multiline':False]['text':' parse values','line_number':10892,'multiline':False]['text':' closing ] -> we are done','line_number':10904,'multiline':False]['text':' remember we are now inside an array','line_number':10914,'multiline':False]['text':' parse values (no need to call get_token)','line_number':10917,'multiline':False]['text':' using "uninitialized" to avoid "expected" message','line_number':10996,'multiline':False]['text':' the last token was unexpected','line_number':11002,'multiline':False]['text':' we reached this line after we successfully parsed a value','line_number':11015,'multiline':False]['text':' empty stack: we reached the end of the hierarchy: done','line_number':11018,'multiline':False]['text':' array','line_number':11022,'multiline':False]['text':' comma -> next value','line_number':11024,'multiline':False]['text':' parse a new value','line_number':11027,'multiline':False]['text':' closing ]','line_number':11032,'multiline':False]['text':' We are done with this array. Before we can parse a','line_number':11040,'multiline':False]['text':' new value, we need to evaluate the new state first.','line_number':11041,'multiline':False]['text':' By setting skip_to_state_evaluation to false, we','line_number':11042,'multiline':False]['text':' are effectively jumping to the beginning of this if.','line_number':11043,'multiline':False]['text':' states.back() is false -> object','line_number':11055,'multiline':False]['text':' comma -> next value','line_number':11057,'multiline':False]['text':' parse key','line_number':11060,'multiline':False]['text':' parse separator (:)','line_number':11073,'multiline':False]['text':' parse values','line_number':11081,'multiline':False]['text':' closing }','line_number':11086,'multiline':False]['text':' We are done with this object. Before we can parse a','line_number':11094,'multiline':False]['text':' new value, we need to evaluate the new state first.','line_number':11095,'multiline':False]['text':' By setting skip_to_state_evaluation to false, we','line_number':11096,'multiline':False]['text':' are effectively jumping to the beginning of this if.','line_number':11097,'multiline':False]['text':'/ get next token from lexer','line_number':11110,'multiline':False]['text':'/ callback function','line_number':11146,'multiline':False]['text':'/ the type of the last read token','line_number':11148,'multiline':False]['text':'/ the lexer','line_number':11150,'multiline':False]['text':'/ whether to throw exceptions in case of errors','line_number':11152,'multiline':False]['text':' namespace detail','line_number':11156,'multiline':False]['text':' namespace nlohmann','line_number':11157,'multiline':False]['text':' #include <nlohmann/detail/iterators/internal_iterator.hpp>','line_number':11159,'multiline':False]['text':' #include <nlohmann/detail/iterators/primitive_iterator.hpp>','line_number':11162,'multiline':False]['text':' ptrdiff_t','line_number':11165,'multiline':False]['text':' numeric_limits','line_number':11166,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':11168,'multiline':False]['text':'
@brief an iterator for primitive JSON types

This class models an iterator for primitive JSON types (boolean, number,
string). It's only purpose is to allow the iterator/const_iterator classes
to "iterate" over primitive values. Internally, the iterator is modeled by
a `difference_type` variable. Value begin_value (`0`) models the begin,
end_value (`1`) models past the end.
','line_number':11175,'multiline':True]['text':'/ iterator as signed integer type','line_number':11192,'multiline':False]['text':'/ set iterator to a defined beginning','line_number':11201,'multiline':False]['text':'/ set iterator to a defined past the end','line_number':11207,'multiline':False]['text':'/ return whether the iterator can be dereferenced','line_number':11213,'multiline':False]['text':'/ return whether the iterator is at end','line_number':11219,'multiline':False]['text':' NOLINT(readability-const-return-type)','line_number':11253,'multiline':False]['text':' NOLINT(readability-const-return-type)','line_number':11266,'multiline':False]['text':' namespace detail','line_number':11285,'multiline':False]['text':' namespace nlohmann','line_number':11286,'multiline':False]['text':'!
@brief an iterator value

@note This structure could easily be a union, but MSVC currently does not allow
unions members with complex constructors, see https://github.com/nlohmann/json/pull/105.
','line_number':11293,'multiline':True]['text':'/ iterator for JSON objects','line_number':11301,'multiline':False]['text':'/ iterator for JSON arrays','line_number':11303,'multiline':False]['text':'/ generic iterator for all other types','line_number':11305,'multiline':False]['text':' namespace detail','line_number':11308,'multiline':False]['text':' namespace nlohmann','line_number':11309,'multiline':False]['text':' #include <nlohmann/detail/iterators/iter_impl.hpp>','line_number':11311,'multiline':False]['text':' iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next','line_number':11314,'multiline':False]['text':' conditional, is_const, remove_const','line_number':11315,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':11317,'multiline':False]['text':' #include <nlohmann/detail/iterators/internal_iterator.hpp>','line_number':11319,'multiline':False]['text':' #include <nlohmann/detail/iterators/primitive_iterator.hpp>','line_number':11321,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':11323,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':11325,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':11327,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':11329,'multiline':False]['text':' forward declare, to be able to friend it later on','line_number':11336,'multiline':False]['text':'!
@brief a template for a bidirectional iterator for the @ref basic_json class
This class implements a both iterators (iterator and const_iterator) for the
@ref basic_json class.
@note An iterator is called *initialized* when a pointer to a JSON value has
      been set (e.g., by a constructor or a copy assignment). If the iterator is
      default-constructed, it is *uninitialized* and most methods are undefined.
      **The library uses assertions to detect calls on uninitialized iterators.**
@requirement The class satisfies the following concept requirements:
-
[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
  The iterator that can be moved can be moved in both directions (i.e.
  incremented and decremented).
@since version 1.0.0, simplified in version 2.0.9, change to bidirectional
       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)
','line_number':11340,'multiline':True]['text':'/ the iterator with BasicJsonType of different const-ness','line_number':11359,'multiline':False]['text':'/ allow basic_json to access private members','line_number':11361,'multiline':False]['text':' make sure BasicJsonType is basic_json or const basic_json','line_number':11369,'multiline':False]['text':'/ The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.','line_number':11375,'multiline':False]['text':'/ The C++ Standard has never required user-defined iterators to derive from std::iterator.','line_number':11376,'multiline':False]['text':'/ A user-defined iterator should provide publicly accessible typedefs named','line_number':11377,'multiline':False]['text':'/ iterator_category, value_type, difference_type, pointer, and reference.','line_number':11378,'multiline':False]['text':'/ Note that value_type is required to be non-const, even for constant iterators.','line_number':11379,'multiline':False]['text':'/ the type of the values when the iterator is dereferenced','line_number':11382,'multiline':False]['text':'/ a type to represent differences between iterators','line_number':11384,'multiline':False]['text':'/ defines a pointer to the type iterated over (value_type)','line_number':11386,'multiline':False]['text':'/ defines a reference to the type iterated over (value_type)','line_number':11390,'multiline':False]['text':'!
    @brief constructor for a given JSON instance
    @param[in] object  pointer to a JSON object for this iterator
    @pre object != nullptr
    @post The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11401,'multiline':True]['text':'!
    @note The conventional copy constructor and copy assignment are implicitly
          defined. Combined with the following converting constructor and
          assignment, they support: (1) copy from iterator to iterator, (2)
          copy from const iterator to const iterator, and (3) conversion from
          iterator to const iterator. However conversion from const iterator
          to iterator is not defined.
    ','line_number':11433,'multiline':True]['text':'!
    @brief const copy constructor
    @param[in] other const iterator to copy from
    @note This copy constructor had to be defined explicitly to circumvent a bug
          occurring on msvc v19.0 compiler (VS 2015) debug build. For more
          information refer to: https://github.com/nlohmann/json/issues/1608
    ','line_number':11442,'multiline':True]['text':'!
    @brief converting assignment
    @param[in] other const iterator to copy from
    @return const/non-const iterator
    @note It is not checked whether @a other is initialized.
    ','line_number':11453,'multiline':True]['text':'!
    @brief converting constructor
    @param[in] other  non-const iterator to copy from
    @note It is not checked whether @a other is initialized.
    ','line_number':11469,'multiline':True]['text':'!
    @brief converting assignment
    @param[in] other  non-const iterator to copy from
    @return const/non-const iterator
    @note It is not checked whether @a other is initialized.
    ','line_number':11478,'multiline':True]['text':' NOLINT(cert-oop54-cpp)','line_number':11484,'multiline':False]['text':'!
    @brief set the iterator to the first value
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11492,'multiline':True]['text':' set to end so begin()==end() is true: null is empty','line_number':11516,'multiline':False]['text':'!
    @brief set the iterator past the last value
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11529,'multiline':True]['text':'!
    @brief return a reference to the value pointed to by the iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11560,'multiline':True]['text':'!
    @brief dereference the iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11597,'multiline':True]['text':'!
    @brief post-increment (it++)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11631,'multiline':True]['text':' NOLINT(readability-const-return-type)','line_number':11635,'multiline':False]['text':'!
    @brief pre-increment (++it)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11642,'multiline':True]['text':'!
    @brief post-decrement (it--)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11674,'multiline':True]['text':' NOLINT(readability-const-return-type)','line_number':11678,'multiline':False]['text':'!
    @brief pre-decrement (--it)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11685,'multiline':True]['text':'!
    @brief comparison: equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11717,'multiline':True]['text':' if objects are not the same, the comparison is undefined','line_number':11724,'multiline':False]['text':'!
    @brief comparison: not equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11745,'multiline':True]['text':'!
    @brief comparison: smaller
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11755,'multiline':True]['text':' if objects are not the same, the comparison is undefined','line_number':11761,'multiline':False]['text':'!
    @brief comparison: less than or equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11782,'multiline':True]['text':'!
    @brief comparison: greater than
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11791,'multiline':True]['text':'!
    @brief comparison: greater than or equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11800,'multiline':True]['text':'!
    @brief add to iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11809,'multiline':True]['text':'!
    @brief subtract from iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11838,'multiline':True]['text':'!
    @brief add to iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11847,'multiline':True]['text':'!
    @brief addition of distance and iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11858,'multiline':True]['text':'!
    @brief subtract from iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11869,'multiline':True]['text':'!
    @brief return difference
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11880,'multiline':True]['text':'!
    @brief access to successor
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11901,'multiline':True]['text':'!
    @brief return the key of an object iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11932,'multiline':True]['text':'!
    @brief return the value of an iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    ','line_number':11948,'multiline':True]['text':'/ associated JSON instance','line_number':11958,'multiline':False]['text':'/ the actual iterator of the associated instance','line_number':11960,'multiline':False]['text':' namespace detail','line_number':11963,'multiline':False]['text':' namespace nlohmann','line_number':11964,'multiline':False]['text':' #include <nlohmann/detail/iterators/iteration_proxy.hpp>','line_number':11966,'multiline':False]['text':' #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>','line_number':11968,'multiline':False]['text':' ptrdiff_t','line_number':11971,'multiline':False]['text':' reverse_iterator','line_number':11972,'multiline':False]['text':' declval','line_number':11973,'multiline':False]['text':'////////////////////','line_number':11979,'multiline':False]['text':' reverse_iterator //','line_number':11980,'multiline':False]['text':'////////////////////','line_number':11981,'multiline':False]['text':'!
@brief a template for a reverse iterator class

@tparam Base the base iterator type to reverse. Valid types are @ref
iterator (to create @ref reverse_iterator) and @ref const_iterator (to
create @ref const_reverse_iterator).

@requirement The class satisfies the following concept requirements:
-
[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
  The iterator that can be moved can be moved in both directions (i.e.
  incremented and decremented).
- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):
  It is possible to write to the pointed-to element (only if @a Base is
  @ref iterator).

@since version 1.0.0
','line_number':11983,'multiline':True]['text':'/ shortcut to the reverse iterator adapter','line_number':12006,'multiline':False]['text':'/ the reference type for the pointed-to element','line_number':12008,'multiline':False]['text':'/ create reverse iterator from iterator','line_number':12011,'multiline':False]['text':'/ create reverse iterator from base class','line_number':12015,'multiline':False]['text':'/ post-increment (it++)','line_number':12018,'multiline':False]['text':' NOLINT(readability-const-return-type)','line_number':12019,'multiline':False]['text':'/ pre-increment (++it)','line_number':12024,'multiline':False]['text':'/ post-decrement (it--)','line_number':12030,'multiline':False]['text':' NOLINT(readability-const-return-type)','line_number':12031,'multiline':False]['text':'/ pre-decrement (--it)','line_number':12036,'multiline':False]['text':'/ add to iterator','line_number':12042,'multiline':False]['text':'/ add to iterator','line_number':12048,'multiline':False]['text':'/ subtract from iterator','line_number':12054,'multiline':False]['text':'/ return difference','line_number':12060,'multiline':False]['text':'/ access to successor','line_number':12066,'multiline':False]['text':'/ return the key of an object iterator','line_number':12072,'multiline':False]['text':'/ return the value of an iterator','line_number':12079,'multiline':False]['text':' namespace detail','line_number':12086,'multiline':False]['text':' namespace nlohmann','line_number':12087,'multiline':False]['text':' #include <nlohmann/detail/iterators/primitive_iterator.hpp>','line_number':12089,'multiline':False]['text':' #include <nlohmann/detail/json_pointer.hpp>','line_number':12091,'multiline':False]['text':' all_of','line_number':12094,'multiline':False]['text':' isdigit','line_number':12095,'multiline':False]['text':' max','line_number':12096,'multiline':False]['text':' accumulate','line_number':12097,'multiline':False]['text':' string','line_number':12098,'multiline':False]['text':' move','line_number':12099,'multiline':False]['text':' vector','line_number':12100,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':12102,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':12104,'multiline':False]['text':' #include <nlohmann/detail/string_escape.hpp>','line_number':12106,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':12108,'multiline':False]['text':' allow basic_json to access private members','line_number':12116,'multiline':False]['text':'!
    @brief create JSON pointer

    Create a JSON pointer according to the syntax described in
    [Section 3 of RFC6901](https://tools.ietf.org/html/rfc6901#section-3).

    @param[in] s  string representing the JSON pointer; if omitted, the empty
                  string is assumed which references the whole JSON value

    @throw parse_error.107 if the given JSON pointer @a s is nonempty and does
                           not begin with a slash (`/`); see example below

    @throw parse_error.108 if a tilde (`~`) in the given JSON pointer @a s is
    not followed by `0` (representing `~`) or `1` (representing `/`); see
    example below

    @liveexample{The example shows the construction several valid JSON pointers
    as well as the exceptional behavior.,json_pointer}

    @since version 2.0.0
    ','line_number':12121,'multiline':True]['text':'!
    @brief return a string representation of the JSON pointer

    @invariant For each JSON pointer `ptr`, it holds:
    @code {.cpp}
    ptr == json_pointer(ptr.to_string());
    @endcode

    @return a string representation of the JSON pointer

    @liveexample{The example shows the result of `to_string`.,json_pointer__to_string}

    @since version 2.0.0
    ','line_number':12146,'multiline':True]['text':'/ @copydoc to_string()','line_number':12170,'multiline':False]['text':'!
    @brief append another JSON pointer at the end of this JSON pointer

    @param[in] ptr  JSON pointer to append
    @return JSON pointer with @a ptr appended

    @liveexample{The example shows the usage of `operator/=`.,json_pointer__operator_add}

    @complexity Linear in the length of @a ptr.

    @sa see @ref operator/=(std::string) to append a reference token
    @sa see @ref operator/=(std::size_t) to append an array index
    @sa see @ref operator/(const json_pointer&, const json_pointer&) for a binary operator

    @since version 3.6.0
    ','line_number':12176,'multiline':True]['text':'!
    @brief append an unescaped reference token at the end of this JSON pointer

    @param[in] token  reference token to append
    @return JSON pointer with @a token appended without escaping @a token

    @liveexample{The example shows the usage of `operator/=`.,json_pointer__operator_add}

    @complexity Amortized constant.

    @sa see @ref operator/=(const json_pointer&) to append a JSON pointer
    @sa see @ref operator/=(std::size_t) to append an array index
    @sa see @ref operator/(const json_pointer&, std::size_t) for a binary operator

    @since version 3.6.0
    ','line_number':12200,'multiline':True]['text':'!
    @brief append an array index at the end of this JSON pointer

    @param[in] array_idx  array index to append
    @return JSON pointer with @a array_idx appended

    @liveexample{The example shows the usage of `operator/=`.,json_pointer__operator_add}

    @complexity Amortized constant.

    @sa see @ref operator/=(const json_pointer&) to append a JSON pointer
    @sa see @ref operator/=(std::string) to append a reference token
    @sa see @ref operator/(const json_pointer&, std::string) for a binary operator

    @since version 3.6.0
    ','line_number':12222,'multiline':True]['text':'!
    @brief create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer

    @param[in] lhs  JSON pointer
    @param[in] rhs  JSON pointer
    @return a new JSON pointer with @a rhs appended to @a lhs

    @liveexample{The example shows the usage of `operator/`.,json_pointer__operator_add_binary}

    @complexity Linear in the length of @a lhs and @a rhs.

    @sa see @ref operator/=(const json_pointer&) to append a JSON pointer

    @since version 3.6.0
    ','line_number':12243,'multiline':True]['text':'!
    @brief create a new JSON pointer by appending the unescaped token at the end of the JSON pointer

    @param[in] ptr  JSON pointer
    @param[in] token  reference token
    @return a new JSON pointer with unescaped @a token appended to @a ptr

    @liveexample{The example shows the usage of `operator/`.,json_pointer__operator_add_binary}

    @complexity Linear in the length of @a ptr.

    @sa see @ref operator/=(std::string) to append a reference token

    @since version 3.6.0
    ','line_number':12264,'multiline':True]['text':' NOLINT(performance-unnecessary-value-param)','line_number':12279,'multiline':False]['text':'!
    @brief create a new JSON pointer by appending the array-index-token at the end of the JSON pointer

    @param[in] ptr  JSON pointer
    @param[in] array_idx  array index
    @return a new JSON pointer with @a array_idx appended to @a ptr

    @liveexample{The example shows the usage of `operator/`.,json_pointer__operator_add_binary}

    @complexity Linear in the length of @a ptr.

    @sa see @ref operator/=(std::size_t) to append an array index

    @since version 3.6.0
    ','line_number':12284,'multiline':True]['text':'!
    @brief returns the parent of this JSON pointer

    @return parent of this JSON pointer; in case this JSON pointer is the root,
            the root itself is returned

    @complexity Linear in the length of the JSON pointer.

    @liveexample{The example shows the result of `parent_pointer` for different
    JSON Pointers.,json_pointer__parent_pointer}

    @since version 3.6.0
    ','line_number':12304,'multiline':True]['text':'!
    @brief remove last reference token

    @pre not `empty()`

    @liveexample{The example shows the usage of `pop_back`.,json_pointer__pop_back}

    @complexity Constant.

    @throw out_of_range.405 if JSON pointer has no parent

    @since version 3.6.0
    ','line_number':12329,'multiline':True]['text':'!
    @brief return last reference token

    @pre not `empty()`
    @return last reference token

    @liveexample{The example shows the usage of `back`.,json_pointer__back}

    @complexity Constant.

    @throw out_of_range.405 if JSON pointer has no parent

    @since version 3.6.0
    ','line_number':12352,'multiline':True]['text':'!
    @brief append an unescaped token at the end of the reference pointer

    @param[in] token  token to add

    @complexity Amortized constant.

    @liveexample{The example shows the result of `push_back` for different
    JSON Pointers.,json_pointer__push_back}

    @since version 3.6.0
    ','line_number':12376,'multiline':True]['text':'/ @copydoc push_back(const std::string&)','line_number':12393,'multiline':False]['text':'!
    @brief return whether pointer points to the root document

    @return true iff the JSON pointer points to the root document

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @liveexample{The example shows the result of `empty` for different JSON
    Pointers.,json_pointer__empty}

    @since version 3.6.0
    ','line_number':12399,'multiline':True]['text':'!
    @param[in] s  reference token to be converted into an array index

    @return integer representation of @a s

    @throw parse_error.106  if an array index begins with '0'
    @throw parse_error.109  if an array index begins not with a digit
    @throw out_of_range.404 if string @a s could not be converted to an integer
    @throw out_of_range.410 if an array index exceeds size_type
    ','line_number':12419,'multiline':True]['text':' error condition (cf. RFC 6901, Sect. 4)','line_number':12433,'multiline':False]['text':' error condition (cf. RFC 6901, Sect. 4)','line_number':12439,'multiline':False]['text':' NOLINT(runtime/int)','line_number':12446,'multiline':False]['text':' check if the string was completely read','line_number':12456,'multiline':False]['text':' only triggered on special platforms (like 32bit), see also','line_number':12462,'multiline':False]['text':' https://github.com/nlohmann/json/pull/2203','line_number':12463,'multiline':False]['text':' NOLINT(runtime/int)','line_number':12464,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':12466,'multiline':False]['text':'!
    @brief create and return a reference to the pointed to value

    @complexity Linear in the number of reference tokens.

    @throw parse_error.109 if array index is not a number
    @throw type_error.313 if value cannot be unflattened
    ','line_number':12486,'multiline':True]['text':' in case no reference tokens exist, return a reference to the JSON value','line_number':12498,'multiline':False]['text':' j which will be overwritten by a primitive value','line_number':12499,'multiline':False]['text':' start a new array if reference token is 0','line_number':12508,'multiline':False]['text':' start a new object otherwise','line_number':12513,'multiline':False]['text':' create an entry in the object','line_number':12521,'multiline':False]['text':' create an entry in the array','line_number':12528,'multiline':False]['text':'
                The following code is only reached if there exists a reference
                token _and_ the current value is primitive. In this case, we have
                an error situation, because primitive values may only occur as
                single value; that is, with an empty list of reference tokens.
                ','line_number':12533,'multiline':True]['text':'!
    @brief return a reference to the pointed to value

    @note This version does not throw if a value is not present, but tries to
          create nested values instead. For instance, calling this function
          with pointer `"/this/that"` on a null value is equivalent to calling
          `operator[]("this").operator[]("that")` on that value, effectively
          changing the null value to an object.

    @param[in] ptr  a JSON value

    @return reference to the JSON value pointed to by the JSON pointer

    @complexity Linear in the length of the JSON pointer.

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':12547,'multiline':True]['text':' convert null values to arrays or objects before continuing','line_number':12570,'multiline':False]['text':' check if reference token is a number','line_number':12573,'multiline':False]['text':' change value to array for numbers or "-" or to object otherwise','line_number':12581,'multiline':False]['text':' use unchecked object access','line_number':12591,'multiline':False]['text':' explicitly treat "-" as index beyond the end','line_number':12600,'multiline':False]['text':' convert array index to number; unchecked access','line_number':12605,'multiline':False]['text':'!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':12619,'multiline':True]['text':' note: at performs range check','line_number':12633,'multiline':False]['text':' "-" always fails the range check','line_number':12642,'multiline':False]['text':' note: at performs range check','line_number':12648,'multiline':False]['text':'!
    @brief return a const reference to the pointed to value

    @param[in] ptr  a JSON value

    @return const reference to the JSON value pointed to by the JSON
    pointer

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':12661,'multiline':True]['text':' use unchecked object access','line_number':12682,'multiline':False]['text':' "-" cannot be used for const access','line_number':12691,'multiline':False]['text':' use unchecked array access','line_number':12695,'multiline':False]['text':'!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    ','line_number':12708,'multiline':True]['text':' note: at performs range check','line_number':12722,'multiline':False]['text':' "-" always fails the range check','line_number':12731,'multiline':False]['text':' note: at performs range check','line_number':12737,'multiline':False]['text':'!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    ','line_number':12750,'multiline':True]['text':' we did not find the key in the object','line_number':12764,'multiline':False]['text':' "-" always fails the range check','line_number':12776,'multiline':False]['text':' invalid char','line_number':12781,'multiline':False]['text':' first char should be between '1' and '9'','line_number':12788,'multiline':False]['text':' other char should be between '0' and '9'','line_number':12795,'multiline':False]['text':' index out of range','line_number':12804,'multiline':False]['text':' we do not expect primitive values if there is still a','line_number':12814,'multiline':False]['text':' reference token to process','line_number':12815,'multiline':False]['text':' no reference token left means we found a primitive value','line_number':12821,'multiline':False]['text':'!
    @brief split the string input to reference tokens

    @note This function is only called by the json_pointer constructor.
          All exceptions below are documented there.

    @throw parse_error.107  if the pointer is not empty or begins with '/'
    @throw parse_error.108  if character '~' is not followed by '0' or '1'
    ','line_number':12825,'multiline':True]['text':' special case: empty reference string -> no reference tokens','line_number':12838,'multiline':False]['text':' check if nonempty reference string begins with slash','line_number':12844,'multiline':False]['text':' extract the reference tokens:','line_number':12850,'multiline':False]['text':' - slash: position of the last read slash (or end of string)','line_number':12851,'multiline':False]['text':' - start: position after the previous slash','line_number':12852,'multiline':False]['text':' search for the first slash after the first character','line_number':12854,'multiline':False]['text':' set the beginning of the first reference token','line_number':12856,'multiline':False]['text':' we can stop if start == 0 (if slash == std::string::npos)','line_number':12858,'multiline':False]['text':' set the beginning of the next reference token','line_number':12860,'multiline':False]['text':' (will eventually be 0 if slash == std::string::npos)','line_number':12861,'multiline':False]['text':' find next slash','line_number':12863,'multiline':False]['text':' use the text between the beginning of the reference token','line_number':12866,'multiline':False]['text':' (start) and the last slash (slash).','line_number':12867,'multiline':False]['text':' check reference tokens are properly escaped','line_number':12870,'multiline':False]['text':' ~ must be followed by 0 or 1','line_number':12877,'multiline':False]['text':' finally, store the reference token','line_number':12886,'multiline':False]['text':'!
    @param[in] reference_string  the reference string to the current value
    @param[in] value             the value to consider
    @param[in,out] result        the result object to insert values to

    @note Empty objects or arrays are flattened to `null`.
    ','line_number':12895,'multiline':True]['text':' flatten empty array as null','line_number':12912,'multiline':False]['text':' iterate array and use index as reference string','line_number':12917,'multiline':False]['text':' flatten empty object as null','line_number':12931,'multiline':False]['text':' iterate object and use keys as reference string','line_number':12936,'multiline':False]['text':' add primitive value with its reference string','line_number':12947,'multiline':False]['text':'!
    @param[in] value  flattened JSON

    @return unflattened JSON

    @throw parse_error.109 if array index is not a number
    @throw type_error.314  if value is not an object
    @throw type_error.315  if object values are not primitive
    @throw type_error.313  if value cannot be unflattened
    ','line_number':12954,'multiline':True]['text':' iterate the JSON object values','line_number':12974,'multiline':False]['text':' assign value to reference pointed to by JSON pointer; Note that if','line_number':12982,'multiline':False]['text':' the JSON pointer is "" (i.e., points to the whole value), function','line_number':12983,'multiline':False]['text':' get_and_create returns a reference to result itself. An assignment','line_number':12984,'multiline':False]['text':' will then create a primitive value.','line_number':12985,'multiline':False]['text':'!
    @brief compares two JSON pointers for equality

    @param[in] lhs  JSON pointer to compare
    @param[in] rhs  JSON pointer to compare
    @return whether @a lhs is equal to @a rhs

    @complexity Linear in the length of the JSON pointer

    @exceptionsafety No-throw guarantee: this function never throws exceptions.
    ','line_number':12992,'multiline':True]['text':'!
    @brief compares two JSON pointers for inequality

    @param[in] lhs  JSON pointer to compare
    @param[in] rhs  JSON pointer to compare
    @return whether @a lhs is not equal @a rhs

    @complexity Linear in the length of the JSON pointer

    @exceptionsafety No-throw guarantee: this function never throws exceptions.
    ','line_number':13009,'multiline':True]['text':'/ the reference tokens','line_number':13026,'multiline':False]['text':' namespace nlohmann','line_number':13029,'multiline':False]['text':' #include <nlohmann/detail/json_ref.hpp>','line_number':13031,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':13037,'multiline':False]['text':' class should be movable only','line_number':13069,'multiline':False]['text':' namespace detail','line_number':13099,'multiline':False]['text':' namespace nlohmann','line_number':13100,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':13102,'multiline':False]['text':' #include <nlohmann/detail/string_escape.hpp>','line_number':13104,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':13106,'multiline':False]['text':' #include <nlohmann/detail/meta/type_traits.hpp>','line_number':13108,'multiline':False]['text':' #include <nlohmann/detail/output/binary_writer.hpp>','line_number':13110,'multiline':False]['text':' reverse','line_number':13113,'multiline':False]['text':' array','line_number':13114,'multiline':False]['text':' isnan, isinf','line_number':13115,'multiline':False]['text':' uint8_t, uint16_t, uint32_t, uint64_t','line_number':13116,'multiline':False]['text':' memcpy','line_number':13117,'multiline':False]['text':' numeric_limits','line_number':13118,'multiline':False]['text':' string','line_number':13119,'multiline':False]['text':' move','line_number':13120,'multiline':False]['text':' #include <nlohmann/detail/input/binary_reader.hpp>','line_number':13122,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':13124,'multiline':False]['text':' #include <nlohmann/detail/output/output_adapters.hpp>','line_number':13126,'multiline':False]['text':' copy','line_number':13129,'multiline':False]['text':' size_t','line_number':13130,'multiline':False]['text':' back_inserter','line_number':13131,'multiline':False]['text':' shared_ptr, make_shared','line_number':13132,'multiline':False]['text':' basic_string','line_number':13133,'multiline':False]['text':' vector','line_number':13134,'multiline':False]['text':' streamsize','line_number':13137,'multiline':False]['text':' basic_ostream','line_number':13138,'multiline':False]['text':' JSON_NO_IO','line_number':13139,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':13141,'multiline':False]['text':'/ abstract output adapter interface','line_number':13148,'multiline':False]['text':'/ a type to simplify interfaces','line_number':13162,'multiline':False]['text':'/ output adapter for byte vectors','line_number':13166,'multiline':False]['text':'/ output adapter for output streams','line_number':13191,'multiline':False]['text':' JSON_NO_IO','line_number':13214,'multiline':False]['text':'/ output adapter for basic_string','line_number':13216,'multiline':False]['text':' JSON_NO_IO','line_number':13250,'multiline':False]['text':' namespace detail','line_number':13263,'multiline':False]['text':' namespace nlohmann','line_number':13264,'multiline':False]['text':'/////////////////','line_number':13271,'multiline':False]['text':' binary writer //','line_number':13272,'multiline':False]['text':'/////////////////','line_number':13273,'multiline':False]['text':'!
@brief serialization to CBOR and MessagePack values
','line_number':13275,'multiline':True]['text':'!
    @brief create a binary writer

    @param[in] adapter  output adapter to write to
    ','line_number':13286,'multiline':True]['text':'!
    @param[in] j  JSON value to serialize
    @pre       j.type() == value_t::object
    ','line_number':13296,'multiline':True]['text':'!
    @param[in] j  JSON value to serialize
    ','line_number':13317,'multiline':True]['text':' CBOR does not differentiate between positive signed','line_number':13342,'multiline':False]['text':' integers and unsigned integers. Therefore, we used the','line_number':13343,'multiline':False]['text':' code from the value_t::number_unsigned case here.','line_number':13344,'multiline':False]['text':' The conversions below encode the sign in the first','line_number':13372,'multiline':False]['text':' byte, and the value is converted to a positive number.','line_number':13373,'multiline':False]['text':' NaN is 0xf97e00 in CBOR','line_number':13436,'multiline':False]['text':' Infinity is 0xf97c00, -Infinity is 0xf9fc00','line_number':13443,'multiline':False]['text':' step 1: write control byte and the string length','line_number':13457,'multiline':False]['text':' LCOV_EXCL_START','line_number':13478,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':13484,'multiline':False]['text':' step 2: write the string','line_number':13486,'multiline':False]['text':' step 1: write control byte and the array size','line_number':13495,'multiline':False]['text':' LCOV_EXCL_START','line_number':13516,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':13522,'multiline':False]['text':' step 2: write each element','line_number':13524,'multiline':False]['text':' step 1: write control byte and the binary array size','line_number':13540,'multiline':False]['text':' LCOV_EXCL_START','line_number':13561,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':13567,'multiline':False]['text':' step 2: write each element','line_number':13569,'multiline':False]['text':' step 1: write control byte and the object size','line_number':13579,'multiline':False]['text':' LCOV_EXCL_START','line_number':13600,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':13606,'multiline':False]['text':' step 2: write each element','line_number':13608,'multiline':False]['text':'!
    @param[in] j  JSON value to serialize
    ','line_number':13622,'multiline':True]['text':' nil','line_number':13629,'multiline':False]['text':' true and false','line_number':13635,'multiline':False]['text':' MessagePack does not differentiate between positive','line_number':13647,'multiline':False]['text':' signed integers and unsigned integers. Therefore, we used','line_number':13648,'multiline':False]['text':' the code from the value_t::number_unsigned case here.','line_number':13649,'multiline':False]['text':' positive fixnum','line_number':13652,'multiline':False]['text':' uint 8','line_number':13657,'multiline':False]['text':' uint 16','line_number':13663,'multiline':False]['text':' uint 32','line_number':13669,'multiline':False]['text':' uint 64','line_number':13675,'multiline':False]['text':' negative fixnum','line_number':13684,'multiline':False]['text':' int 8','line_number':13690,'multiline':False]['text':' int 16','line_number':13697,'multiline':False]['text':' int 32','line_number':13704,'multiline':False]['text':' int 64','line_number':13711,'multiline':False]['text':' positive fixnum','line_number':13723,'multiline':False]['text':' uint 8','line_number':13728,'multiline':False]['text':' uint 16','line_number':13734,'multiline':False]['text':' uint 32','line_number':13740,'multiline':False]['text':' uint 64','line_number':13746,'multiline':False]['text':' step 1: write control byte and the string length','line_number':13761,'multiline':False]['text':' fixstr','line_number':13765,'multiline':False]['text':' str 8','line_number':13770,'multiline':False]['text':' str 16','line_number':13776,'multiline':False]['text':' str 32','line_number':13782,'multiline':False]['text':' step 2: write the string','line_number':13787,'multiline':False]['text':' step 1: write control byte and the array size','line_number':13796,'multiline':False]['text':' fixarray','line_number':13800,'multiline':False]['text':' array 16','line_number':13805,'multiline':False]['text':' array 32','line_number':13811,'multiline':False]['text':' step 2: write each element','line_number':13816,'multiline':False]['text':' step 0: determine if the binary type has a set subtype to','line_number':13826,'multiline':False]['text':' determine whether or not to use the ext or fixext types','line_number':13827,'multiline':False]['text':' step 1: write control byte and the byte string length','line_number':13830,'multiline':False]['text':' fixext 1','line_number':13841,'multiline':False]['text':' fixext 2','line_number':13844,'multiline':False]['text':' fixext 4','line_number':13847,'multiline':False]['text':' fixext 8','line_number':13850,'multiline':False]['text':' fixext 16','line_number':13853,'multiline':False]['text':' ext 8','line_number':13856,'multiline':False]['text':' bin 8','line_number':13864,'multiline':False]['text':' ext 16','line_number':13877,'multiline':False]['text':' bin 16','line_number':13878,'multiline':False]['text':' ext 32','line_number':13886,'multiline':False]['text':' bin 32','line_number':13887,'multiline':False]['text':' step 1.5: if this is an ext type, write the subtype','line_number':13893,'multiline':False]['text':' step 2: write the byte string','line_number':13899,'multiline':False]['text':' step 1: write control byte and the object size','line_number':13909,'multiline':False]['text':' fixmap','line_number':13913,'multiline':False]['text':' map 16','line_number':13918,'multiline':False]['text':' map 32','line_number':13924,'multiline':False]['text':' step 2: write each element','line_number':13929,'multiline':False]['text':'!
    @param[in] j  JSON value to serialize
    @param[in] use_count   whether to use '#' prefixes (optimized format)
    @param[in] use_type    whether to use '$' prefixes (optimized format)
    @param[in] add_prefix  whether prefixes need to be used for this value
    ','line_number':13943,'multiline':True]['text':'////////','line_number':14148,'multiline':False]['text':' BSON //','line_number':14149,'multiline':False]['text':'////////','line_number':14150,'multiline':False]['text':'!
    @return The size of a BSON document entry header, including the id marker
            and the entry name size (and its null-terminator).
    ','line_number':14152,'multiline':True]['text':'id','line_number':14164,'multiline':True]['text':'zero-terminator','line_number':14164,'multiline':True]['text':'!
    @brief Writes the given @a element_type and @a name to the output adapter
    ','line_number':14167,'multiline':True]['text':' boolean','line_number':14173,'multiline':False]['text':'!
    @brief Writes a BSON element with key @a name and boolean value @a value
    ','line_number':14179,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and double value @a value
    ','line_number':14189,'multiline':True]['text':'!
    @return The size of the BSON-encoded string in @a value
    ','line_number':14199,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and string value @a value
    ','line_number':14207,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and null value
    ','line_number':14221,'multiline':True]['text':'!
    @return The size of the BSON-encoded integer @a value
    ','line_number':14229,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and integer @a value
    ','line_number':14239,'multiline':True]['text':' int32','line_number':14247,'multiline':False]['text':' int64','line_number':14252,'multiline':False]['text':'!
    @return The size of the BSON-encoded unsigned integer in @a j
    ','line_number':14257,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and unsigned @a value
    ','line_number':14267,'multiline':True]['text':' int32 ','line_number':14275,'multiline':True]['text':' int64 ','line_number':14280,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and object @a value
    ','line_number':14289,'multiline':True]['text':' object','line_number':14295,'multiline':False]['text':'!
    @return The size of the BSON-encoded array @a value
    ','line_number':14299,'multiline':True]['text':'!
    @return The size of the BSON-encoded binary array @a value
    ','line_number':14314,'multiline':True]['text':'!
    @brief Writes a BSON element with key @a name and array @a value
    ','line_number':14322,'multiline':True]['text':' array','line_number':14328,'multiline':False]['text':'!
    @brief Writes a BSON element with key @a name and binary value @a value
    ','line_number':14341,'multiline':True]['text':'!
    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name
    @return The calculated size for the BSON document entry for @a j with the given @a name.
    ','line_number':14355,'multiline':True]['text':' LCOV_EXCL_START','line_number':14392,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)','line_number':14394,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':14396,'multiline':False]['text':'!
    @brief Serializes the JSON value @a j to BSON and associates it with the
           key @a name.
    @param name The name to associate with the JSON entity @a j within the
                current BSON document
    ','line_number':14400,'multiline':True]['text':' LCOV_EXCL_START','line_number':14438,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)','line_number':14440,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':14442,'multiline':False]['text':'!
    @brief Calculates the size of the BSON serialization of the given
           JSON-object @a j.
    @param[in] value  JSON value to serialize
    @pre       value.type() == value_t::object
    ','line_number':14446,'multiline':True]['text':'!
    @param[in] value  JSON value to serialize
    @pre       value.type() == value_t::object
    ','line_number':14463,'multiline':True]['text':'////////','line_number':14479,'multiline':False]['text':' CBOR //','line_number':14480,'multiline':False]['text':'////////','line_number':14481,'multiline':False]['text':'unused','line_number':14483,'multiline':True]['text':' Single-Precision Float','line_number':14485,'multiline':False]['text':'unused','line_number':14488,'multiline':True]['text':' Double-Precision Float','line_number':14490,'multiline':False]['text':'///////////','line_number':14493,'multiline':False]['text':' MsgPack //','line_number':14494,'multiline':False]['text':'///////////','line_number':14495,'multiline':False]['text':'unused','line_number':14497,'multiline':True]['text':' float 32','line_number':14499,'multiline':False]['text':'unused','line_number':14502,'multiline':True]['text':' float 64','line_number':14504,'multiline':False]['text':'//////////','line_number':14507,'multiline':False]['text':' UBJSON //','line_number':14508,'multiline':False]['text':'//////////','line_number':14509,'multiline':False]['text':' UBJSON: write number (floating point)','line_number':14511,'multiline':False]['text':' UBJSON: write number (unsigned integer)','line_number':14524,'multiline':False]['text':' int8','line_number':14534,'multiline':False]['text':' uint8','line_number':14542,'multiline':False]['text':' int16','line_number':14550,'multiline':False]['text':' int32','line_number':14558,'multiline':False]['text':' int64','line_number':14566,'multiline':False]['text':' high-precision number','line_number':14574,'multiline':False]['text':' UBJSON: write number (signed integer)','line_number':14586,'multiline':False]['text':' int8','line_number':14597,'multiline':False]['text':' uint8','line_number':14605,'multiline':False]['text':' int16','line_number':14613,'multiline':False]['text':' int32','line_number':14621,'multiline':False]['text':' int64','line_number':14629,'multiline':False]['text':' LCOV_EXCL_START','line_number':14633,'multiline':False]['text':' high-precision number','line_number':14638,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':14648,'multiline':False]['text':'!
    @brief determine the type prefix of container values
    ','line_number':14651,'multiline':True]['text':' anything else is treated as high-precision number','line_number':14686,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':14687,'multiline':False]['text':' anything else is treated as high-precision number','line_number':14712,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':14713,'multiline':False]['text':' fallthrough','line_number':14722,'multiline':False]['text':' discarded values','line_number':14729,'multiline':False]['text':'unused','line_number':14734,'multiline':True]['text':' float 32','line_number':14736,'multiline':False]['text':'unused','line_number':14739,'multiline':True]['text':' float 64','line_number':14741,'multiline':False]['text':'/////////////////////','line_number':14744,'multiline':False]['text':' Utility functions //','line_number':14745,'multiline':False]['text':'/////////////////////','line_number':14746,'multiline':False]['text':'
    @brief write a number to output input
    @param[in] n number of type @a NumberType
    @tparam NumberType the type of the number
    @tparam OutputIsLittleEndian Set to true if output data is
                                 required to be little endian

    @note This function needs to respect the system's endianess, because bytes
          in CBOR, MessagePack, and UBJSON are stored in network order (big
          endian) and therefore need reordering on little endian systems.
    ','line_number':14748,'multiline':True]['text':' step 1: write number to array of length NumberType','line_number':14762,'multiline':False]['text':' step 2: write array to output (with possible reordering)','line_number':14766,'multiline':False]['text':' reverse byte order prior to conversion if necessary','line_number':14769,'multiline':False]['text':' The following to_char_type functions are implement the conversion','line_number':14797,'multiline':False]['text':' between uint8_t and CharType. In case CharType is not unsigned,','line_number':14798,'multiline':False]['text':' such a conversion is required to allow values greater than 128.','line_number':14799,'multiline':False]['text':' See <https://github.com/nlohmann/json/issues/1286> for a discussion.','line_number':14800,'multiline':False]['text':'/ whether we can assume little endianess','line_number':14838,'multiline':False]['text':'/ the output','line_number':14841,'multiline':False]['text':' namespace detail','line_number':14844,'multiline':False]['text':' namespace nlohmann','line_number':14845,'multiline':False]['text':' #include <nlohmann/detail/output/output_adapters.hpp>','line_number':14847,'multiline':False]['text':' #include <nlohmann/detail/output/serializer.hpp>','line_number':14849,'multiline':False]['text':' reverse, remove, fill, find, none_of','line_number':14852,'multiline':False]['text':' array','line_number':14853,'multiline':False]['text':' localeconv, lconv','line_number':14854,'multiline':False]['text':' labs, isfinite, isnan, signbit','line_number':14855,'multiline':False]['text':' size_t, ptrdiff_t','line_number':14856,'multiline':False]['text':' uint8_t','line_number':14857,'multiline':False]['text':' snprintf','line_number':14858,'multiline':False]['text':' numeric_limits','line_number':14859,'multiline':False]['text':' string, char_traits','line_number':14860,'multiline':False]['text':' is_same','line_number':14861,'multiline':False]['text':' move','line_number':14862,'multiline':False]['text':' #include <nlohmann/detail/conversions/to_chars.hpp>','line_number':14864,'multiline':False]['text':' array','line_number':14867,'multiline':False]['text':' signbit, isfinite','line_number':14868,'multiline':False]['text':' intN_t, uintN_t','line_number':14869,'multiline':False]['text':' memcpy, memmove','line_number':14870,'multiline':False]['text':' numeric_limits','line_number':14871,'multiline':False]['text':' conditional','line_number':14872,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':14874,'multiline':False]['text':'!
@brief implements the Grisu2 algorithm for binary to decimal floating-point
conversion.

This implementation is a slightly modified version of the reference
implementation which may be obtained from
http://florian.loitsch.com/publications (bench.tar.gz).

The code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.

For a detailed description of the algorithm see:

[1] Loitsch, "Printing Floating-Point Numbers Quickly and Accurately with
    Integers", Proceedings of the ACM SIGPLAN 2010 Conference on Programming
    Language Design and Implementation, PLDI 2010
[2] Burger, Dybvig, "Printing Floating-Point Numbers Quickly and Accurately",
    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language
    Design and Implementation, PLDI 1996
','line_number':14882,'multiline':True]['text':' f * 2^e','line_number':14914,'multiline':False]['text':' = q','line_number':14916,'multiline':False]['text':'!
    @brief returns x - y
    @pre x.e == y.e and x.f >= y.f
    ','line_number':14923,'multiline':True]['text':'!
    @brief returns x * y
    @note The result is rounded. (Only the upper q bits are returned.)
    ','line_number':14935,'multiline':True]['text':' Computes:','line_number':14943,'multiline':False]['text':'  f = round((x.f * y.f) / 2^q)','line_number':14944,'multiline':False]['text':'  e = x.e + y.e + q','line_number':14945,'multiline':False]['text':' Emulate the 64-bit * 64-bit multiplication:','line_number':14947,'multiline':False]['text':'','line_number':14948,'multiline':False]['text':' p = u * v','line_number':14949,'multiline':False]['text':'   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)','line_number':14950,'multiline':False]['text':'   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )','line_number':14951,'multiline':False]['text':'   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )','line_number':14952,'multiline':False]['text':'   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )','line_number':14953,'multiline':False]['text':'   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)','line_number':14954,'multiline':False]['text':'   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )','line_number':14955,'multiline':False]['text':'   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )','line_number':14956,'multiline':False]['text':'','line_number':14957,'multiline':False]['text':' (Since Q might be larger than 2^32 - 1)','line_number':14958,'multiline':False]['text':'','line_number':14959,'multiline':False]['text':'   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)','line_number':14960,'multiline':False]['text':'','line_number':14961,'multiline':False]['text':' (Q_hi + H does not overflow a 64-bit int)','line_number':14962,'multiline':False]['text':'','line_number':14963,'multiline':False]['text':'   = p_lo + 2^64 p_hi','line_number':14964,'multiline':False]['text':' The full product might now be computed as','line_number':14984,'multiline':False]['text':'','line_number':14985,'multiline':False]['text':' p_hi = p3 + p2_hi + p1_hi + (Q >> 32)','line_number':14986,'multiline':False]['text':' p_lo = p0_lo + (Q << 32)','line_number':14987,'multiline':False]['text':'','line_number':14988,'multiline':False]['text':' But in this particular case here, the full p_lo is not required.','line_number':14989,'multiline':False]['text':' Effectively we only need to add the highest bit in p_lo to p_hi (and','line_number':14990,'multiline':False]['text':' Q_hi + 1 does not overflow).','line_number':14991,'multiline':False]['text':' round, ties up','line_number':14993,'multiline':False]['text':'!
    @brief normalize x such that the significand is >= 2^(q-1)
    @pre x.f != 0
    ','line_number':15000,'multiline':True]['text':'!
    @brief normalize x such that the result has the exponent E
    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.
    ','line_number':15017,'multiline':True]['text':'!
Compute the (normalized) diyfp representing the input number 'value' and its
boundaries.

@pre value must be finite and positive
','line_number':15039,'multiline':True]['text':' Convert the IEEE representation into a diyfp.','line_number':15051,'multiline':False]['text':'','line_number':15052,'multiline':False]['text':' If v is denormal:','line_number':15053,'multiline':False]['text':'      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))','line_number':15054,'multiline':False]['text':' If v is normalized:','line_number':15055,'multiline':False]['text':'      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))','line_number':15056,'multiline':False]['text':' = p (includes the hidden bit)','line_number':15061,'multiline':False]['text':' = 2^(p-1)','line_number':15064,'multiline':False]['text':' Compute the boundaries m- and m+ of the floating-point value','line_number':15077,'multiline':False]['text':' v = f * 2^e.','line_number':15078,'multiline':False]['text':'','line_number':15079,'multiline':False]['text':' Determine v- and v+, the floating-point predecessor and successor if v,','line_number':15080,'multiline':False]['text':' respectively.','line_number':15081,'multiline':False]['text':'','line_number':15082,'multiline':False]['text':'      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)','line_number':15083,'multiline':False]['text':'         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)','line_number':15084,'multiline':False]['text':'','line_number':15085,'multiline':False]['text':'      v+ = v + 2^e','line_number':15086,'multiline':False]['text':'','line_number':15087,'multiline':False]['text':' Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_','line_number':15088,'multiline':False]['text':' between m- and m+ round to v, regardless of how the input rounding','line_number':15089,'multiline':False]['text':' algorithm breaks ties.','line_number':15090,'multiline':False]['text':'','line_number':15091,'multiline':False]['text':'      ---+-------------+-------------+-------------+-------------+---  (A)','line_number':15092,'multiline':False]['text':'         v-            m-            v             m+            v+','line_number':15093,'multiline':False]['text':'','line_number':15094,'multiline':False]['text':'      -----------------+------+------+-------------+-------------+---  (B)','line_number':15095,'multiline':False]['text':'                       v-     m-     v             m+            v+','line_number':15096,'multiline':False]['text':' (B)','line_number':15101,'multiline':False]['text':' (A)','line_number':15102,'multiline':False]['text':' Determine the normalized w+ = m+.','line_number':15104,'multiline':False]['text':' Determine w- = m- such that e_(w-) = e_(w+).','line_number':15107,'multiline':False]['text':' Given normalized diyfp w, Grisu needs to find a (normalized) cached','line_number':15113,'multiline':False]['text':' power-of-ten c, such that the exponent of the product c * w = f * 2^e lies','line_number':15114,'multiline':False]['text':' within a certain range [alpha, gamma] (Definition 3.2 from [1])','line_number':15115,'multiline':False]['text':'','line_number':15116,'multiline':False]['text':'      alpha <= e = e_c + e_w + q <= gamma','line_number':15117,'multiline':False]['text':'','line_number':15118,'multiline':False]['text':' or','line_number':15119,'multiline':False]['text':'','line_number':15120,'multiline':False]['text':'      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q','line_number':15121,'multiline':False]['text':'                          <= f_c * f_w * 2^gamma','line_number':15122,'multiline':False]['text':'','line_number':15123,'multiline':False]['text':' Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies','line_number':15124,'multiline':False]['text':'','line_number':15125,'multiline':False]['text':'      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma','line_number':15126,'multiline':False]['text':'','line_number':15127,'multiline':False]['text':' or','line_number':15128,'multiline':False]['text':'','line_number':15129,'multiline':False]['text':'      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)','line_number':15130,'multiline':False]['text':'','line_number':15131,'multiline':False]['text':' The choice of (alpha,gamma) determines the size of the table and the form of','line_number':15132,'multiline':False]['text':' the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well','line_number':15133,'multiline':False]['text':' in practice:','line_number':15134,'multiline':False]['text':'','line_number':15135,'multiline':False]['text':' The idea is to cut the number c * w = f * 2^e into two parts, which can be','line_number':15136,'multiline':False]['text':' processed independently: An integral part p1, and a fractional part p2:','line_number':15137,'multiline':False]['text':'','line_number':15138,'multiline':False]['text':'      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e','line_number':15139,'multiline':False]['text':'              = (f div 2^-e) + (f mod 2^-e) * 2^e','line_number':15140,'multiline':False]['text':'              = p1 + p2 * 2^e','line_number':15141,'multiline':False]['text':'','line_number':15142,'multiline':False]['text':' The conversion of p1 into decimal form requires a series of divisions and','line_number':15143,'multiline':False]['text':' modulos by (a power of) 10. These operations are faster for 32-bit than for','line_number':15144,'multiline':False]['text':' 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be','line_number':15145,'multiline':False]['text':' achieved by choosing','line_number':15146,'multiline':False]['text':'','line_number':15147,'multiline':False]['text':'      -e >= 32   or   e <= -32 := gamma','line_number':15148,'multiline':False]['text':'','line_number':15149,'multiline':False]['text':' In order to convert the fractional part','line_number':15150,'multiline':False]['text':'','line_number':15151,'multiline':False]['text':'      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...','line_number':15152,'multiline':False]['text':'','line_number':15153,'multiline':False]['text':' into decimal form, the fraction is repeatedly multiplied by 10 and the digits','line_number':15154,'multiline':False]['text':' d[-i] are extracted in order:','line_number':15155,'multiline':False]['text':'','line_number':15156,'multiline':False]['text':'      (10 * p2) div 2^-e = d[-1]','line_number':15157,'multiline':False]['text':'      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...','line_number':15158,'multiline':False]['text':'','line_number':15159,'multiline':False]['text':' The multiplication by 10 must not overflow. It is sufficient to choose','line_number':15160,'multiline':False]['text':'','line_number':15161,'multiline':False]['text':'      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.','line_number':15162,'multiline':False]['text':'','line_number':15163,'multiline':False]['text':' Since p2 = f mod 2^-e < 2^-e,','line_number':15164,'multiline':False]['text':'','line_number':15165,'multiline':False]['text':'      -e <= 60   or   e >= -60 := alpha','line_number':15166,'multiline':False]['text':' c = f * 2^e ~= 10^k','line_number':15171,'multiline':False]['text':'!
For a normalized diyfp w = f * 2^e, this function returns a (normalized) cached
power-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c
satisfies (Definition 3.2 from [1])

     alpha <= e_c + e + q <= gamma.
','line_number':15178,'multiline':True]['text':' Now','line_number':15187,'multiline':False]['text':'','line_number':15188,'multiline':False]['text':'      alpha <= e_c + e + q <= gamma                                    (1)','line_number':15189,'multiline':False]['text':'      ==> f_c * 2^alpha <= c * 2^e * 2^q','line_number':15190,'multiline':False]['text':'','line_number':15191,'multiline':False]['text':' and since the c's are normalized, 2^(q-1) <= f_c,','line_number':15192,'multiline':False]['text':'','line_number':15193,'multiline':False]['text':'      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)','line_number':15194,'multiline':False]['text':'      ==> 2^(alpha - e - 1) <= c','line_number':15195,'multiline':False]['text':'','line_number':15196,'multiline':False]['text':' If c were an exact power of ten, i.e. c = 10^k, one may determine k as','line_number':15197,'multiline':False]['text':'','line_number':15198,'multiline':False]['text':'      k = ceil( log_10( 2^(alpha - e - 1) ) )','line_number':15199,'multiline':False]['text':'        = ceil( (alpha - e - 1) * log_10(2) )','line_number':15200,'multiline':False]['text':'','line_number':15201,'multiline':False]['text':' From the paper:','line_number':15202,'multiline':False]['text':' "In theory the result of the procedure could be wrong since c is rounded,','line_number':15203,'multiline':False]['text':'  and the computation itself is approximated [...]. In practice, however,','line_number':15204,'multiline':False]['text':'  this simple function is sufficient."','line_number':15205,'multiline':False]['text':'','line_number':15206,'multiline':False]['text':' For IEEE double precision floating-point numbers converted into','line_number':15207,'multiline':False]['text':' normalized diyfp's w = f * 2^e, with q = 64,','line_number':15208,'multiline':False]['text':'','line_number':15209,'multiline':False]['text':'      e >= -1022      (min IEEE exponent)','line_number':15210,'multiline':False]['text':'           -52        (p - 1)','line_number':15211,'multiline':False]['text':'           -52        (p - 1, possibly normalize denormal IEEE numbers)','line_number':15212,'multiline':False]['text':'           -11        (normalize the diyfp)','line_number':15213,'multiline':False]['text':'         = -1137','line_number':15214,'multiline':False]['text':'','line_number':15215,'multiline':False]['text':' and','line_number':15216,'multiline':False]['text':'','line_number':15217,'multiline':False]['text':'      e <= +1023      (max IEEE exponent)','line_number':15218,'multiline':False]['text':'           -52        (p - 1)','line_number':15219,'multiline':False]['text':'           -11        (normalize the diyfp)','line_number':15220,'multiline':False]['text':'         = 960','line_number':15221,'multiline':False]['text':'','line_number':15222,'multiline':False]['text':' This binary exponent range [-1137,960] results in a decimal exponent','line_number':15223,'multiline':False]['text':' range [-307,324]. One does not need to store a cached power for each','line_number':15224,'multiline':False]['text':' k in this range. For each such k it suffices to find a cached power','line_number':15225,'multiline':False]['text':' such that the exponent of the product lies in [alpha,gamma].','line_number':15226,'multiline':False]['text':' This implies that the difference of the decimal exponents of adjacent','line_number':15227,'multiline':False]['text':' table entries must be less than or equal to','line_number':15228,'multiline':False]['text':'','line_number':15229,'multiline':False]['text':'      floor( (gamma - alpha) * log_10(2) ) = 8.','line_number':15230,'multiline':False]['text':'','line_number':15231,'multiline':False]['text':' (A smaller distance gamma-alpha would require a larger table.)','line_number':15232,'multiline':False]['text':' NB:','line_number':15234,'multiline':False]['text':' Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.','line_number':15235,'multiline':False]['text':' This computation gives exactly the same results for k as','line_number':15325,'multiline':False]['text':'      k = ceil((kAlpha - e - 1) * 0.30102999566398114)','line_number':15326,'multiline':False]['text':' for |e| <= 1500, but doesn't require floating-point operations.','line_number':15327,'multiline':False]['text':' NB: log_10(2) ~= 78913 / 2^18','line_number':15328,'multiline':False]['text':'!
For n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.
For n == 0, returns 1 and sets pow10 := 1.
','line_number':15345,'multiline':True]['text':' LCOV_EXCL_START','line_number':15351,'multiline':False]['text':' LCOV_EXCL_STOP','line_number':15357,'multiline':False]['text':'               <--------------------------- delta ---->','line_number':15411,'multiline':False]['text':'                                  <---- dist --------->','line_number':15412,'multiline':False]['text':' --------------[------------------+-------------------]--------------','line_number':15413,'multiline':False]['text':'               M-                 w                   M+','line_number':15414,'multiline':False]['text':'','line_number':15415,'multiline':False]['text':'                                  ten_k','line_number':15416,'multiline':False]['text':'                                <------>','line_number':15417,'multiline':False]['text':'                                       <---- rest ---->','line_number':15418,'multiline':False]['text':' --------------[------------------+----+--------------]--------------','line_number':15419,'multiline':False]['text':'                                  w    V','line_number':15420,'multiline':False]['text':'                                       = buf * 10^k','line_number':15421,'multiline':False]['text':'','line_number':15422,'multiline':False]['text':' ten_k represents a unit-in-the-last-place in the decimal representation','line_number':15423,'multiline':False]['text':' stored in buf.','line_number':15424,'multiline':False]['text':' Decrement buf by ten_k while this takes buf closer to w.','line_number':15425,'multiline':False]['text':' The tests are written in this order to avoid overflow in unsigned','line_number':15427,'multiline':False]['text':' integer arithmetic.','line_number':15428,'multiline':False]['text':'!
Generates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.
M- and M+ must be normalized and share the same exponent -60 <= e <= -32.
','line_number':15440,'multiline':True]['text':' Generates the digits (and the exponent) of a decimal floating-point','line_number':15450,'multiline':False]['text':' number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's','line_number':15451,'multiline':False]['text':' w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.','line_number':15452,'multiline':False]['text':'','line_number':15453,'multiline':False]['text':'               <--------------------------- delta ---->','line_number':15454,'multiline':False]['text':'                                  <---- dist --------->','line_number':15455,'multiline':False]['text':' --------------[------------------+-------------------]--------------','line_number':15456,'multiline':False]['text':'               M-                 w                   M+','line_number':15457,'multiline':False]['text':'','line_number':15458,'multiline':False]['text':' Grisu2 generates the digits of M+ from left to right and stops as soon as','line_number':15459,'multiline':False]['text':' V is in [M-,M+].','line_number':15460,'multiline':False]['text':' (significand of (M+ - M-), implicit exponent is e)','line_number':15465,'multiline':False]['text':' (significand of (M+ - w ), implicit exponent is e)','line_number':15466,'multiline':False]['text':' Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):','line_number':15468,'multiline':False]['text':'','line_number':15469,'multiline':False]['text':'      M+ = f * 2^e','line_number':15470,'multiline':False]['text':'         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e','line_number':15471,'multiline':False]['text':'         = ((p1        ) * 2^-e + (p2        )) * 2^e','line_number':15472,'multiline':False]['text':'         = p1 + p2 * 2^e','line_number':15473,'multiline':False]['text':' p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)','line_number':15477,'multiline':False]['text':' p2 = f mod 2^-e','line_number':15478,'multiline':False]['text':' 1)','line_number':15480,'multiline':False]['text':'','line_number':15481,'multiline':False]['text':' Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]','line_number':15482,'multiline':False]['text':'      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)','line_number':15489,'multiline':False]['text':'','line_number':15490,'multiline':False]['text':'      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))','line_number':15491,'multiline':False]['text':'         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))','line_number':15492,'multiline':False]['text':'','line_number':15493,'multiline':False]['text':'      M+ = p1                                             + p2 * 2^e','line_number':15494,'multiline':False]['text':'         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e','line_number':15495,'multiline':False]['text':'         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e','line_number':15496,'multiline':False]['text':'         = d[k-1] * 10^(k-1) + (                         rest) * 2^e','line_number':15497,'multiline':False]['text':'','line_number':15498,'multiline':False]['text':' Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)','line_number':15499,'multiline':False]['text':'','line_number':15500,'multiline':False]['text':'      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]','line_number':15501,'multiline':False]['text':'','line_number':15502,'multiline':False]['text':' but stop as soon as','line_number':15503,'multiline':False]['text':'','line_number':15504,'multiline':False]['text':'      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e','line_number':15505,'multiline':False]['text':' Invariants:','line_number':15510,'multiline':False]['text':'      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)','line_number':15511,'multiline':False]['text':'      pow10 = 10^(n-1) <= p1 < 10^n','line_number':15512,'multiline':False]['text':'','line_number':15513,'multiline':False]['text':' d = p1 div 10^(n-1)','line_number':15514,'multiline':False]['text':' r = p1 mod 10^(n-1)','line_number':15515,'multiline':False]['text':'','line_number':15516,'multiline':False]['text':'      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e','line_number':15517,'multiline':False]['text':'         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)','line_number':15518,'multiline':False]['text':'','line_number':15519,'multiline':False]['text':' buffer := buffer * 10 + d','line_number':15521,'multiline':False]['text':'','line_number':15522,'multiline':False]['text':'      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)','line_number':15523,'multiline':False]['text':'','line_number':15524,'multiline':False]['text':'','line_number':15527,'multiline':False]['text':'      M+ = buffer * 10^n + (p1 + p2 * 2^e)','line_number':15528,'multiline':False]['text':'      pow10 = 10^n','line_number':15529,'multiline':False]['text':'','line_number':15530,'multiline':False]['text':' Now check if enough digits have been generated.','line_number':15532,'multiline':False]['text':' Compute','line_number':15533,'multiline':False]['text':'','line_number':15534,'multiline':False]['text':'      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e','line_number':15535,'multiline':False]['text':'','line_number':15536,'multiline':False]['text':' Note:','line_number':15537,'multiline':False]['text':' Since rest and delta share the same exponent e, it suffices to','line_number':15538,'multiline':False]['text':' compare the significands.','line_number':15539,'multiline':False]['text':' V = buffer * 10^n, with M- <= V <= M+.','line_number':15543,'multiline':False]['text':' We may now just stop. But instead look if the buffer could be','line_number':15547,'multiline':False]['text':' decremented to bring V closer to w.','line_number':15548,'multiline':False]['text':'','line_number':15549,'multiline':False]['text':' pow10 = 10^n is now 1 ulp in the decimal representation V.','line_number':15550,'multiline':False]['text':' The rounding procedure works with diyfp's with an implicit','line_number':15551,'multiline':False]['text':' exponent of e.','line_number':15552,'multiline':False]['text':'','line_number':15553,'multiline':False]['text':'      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e','line_number':15554,'multiline':False]['text':'','line_number':15555,'multiline':False]['text':'','line_number':15563,'multiline':False]['text':'      pow10 = 10^(n-1) <= p1 < 10^n','line_number':15564,'multiline':False]['text':' Invariants restored.','line_number':15565,'multiline':False]['text':' 2)','line_number':15568,'multiline':False]['text':'','line_number':15569,'multiline':False]['text':' The digits of the integral part have been generated:','line_number':15570,'multiline':False]['text':'','line_number':15571,'multiline':False]['text':'      M+ = d[k-1]...d[1]d[0] + p2 * 2^e','line_number':15572,'multiline':False]['text':'         = buffer            + p2 * 2^e','line_number':15573,'multiline':False]['text':'','line_number':15574,'multiline':False]['text':' Now generate the digits of the fractional part p2 * 2^e.','line_number':15575,'multiline':False]['text':'','line_number':15576,'multiline':False]['text':' Note:','line_number':15577,'multiline':False]['text':' No decimal point is generated: the exponent is adjusted instead.','line_number':15578,'multiline':False]['text':'','line_number':15579,'multiline':False]['text':' p2 actually represents the fraction','line_number':15580,'multiline':False]['text':'','line_number':15581,'multiline':False]['text':'      p2 * 2^e','line_number':15582,'multiline':False]['text':'          = p2 / 2^-e','line_number':15583,'multiline':False]['text':'          = d[-1] / 10^1 + d[-2] / 10^2 + ...','line_number':15584,'multiline':False]['text':'','line_number':15585,'multiline':False]['text':' Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)','line_number':15586,'multiline':False]['text':'','line_number':15587,'multiline':False]['text':'      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m','line_number':15588,'multiline':False]['text':'                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)','line_number':15589,'multiline':False]['text':'','line_number':15590,'multiline':False]['text':' using','line_number':15591,'multiline':False]['text':'','line_number':15592,'multiline':False]['text':'      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)','line_number':15593,'multiline':False]['text':'                = (                   d) * 2^-e + (                   r)','line_number':15594,'multiline':False]['text':'','line_number':15595,'multiline':False]['text':' or','line_number':15596,'multiline':False]['text':'      10^m * p2 * 2^e = d + r * 2^e','line_number':15597,'multiline':False]['text':'','line_number':15598,'multiline':False]['text':' i.e.','line_number':15599,'multiline':False]['text':'','line_number':15600,'multiline':False]['text':'      M+ = buffer + p2 * 2^e','line_number':15601,'multiline':False]['text':'         = buffer + 10^-m * (d + r * 2^e)','line_number':15602,'multiline':False]['text':'         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e','line_number':15603,'multiline':False]['text':'','line_number':15604,'multiline':False]['text':' and stop as soon as 10^-m * r * 2^e <= delta * 2^e','line_number':15605,'multiline':False]['text':' Invariant:','line_number':15612,'multiline':False]['text':'      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e','line_number':15613,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e','line_number':15614,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e','line_number':15615,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e','line_number':15616,'multiline':False]['text':'','line_number':15617,'multiline':False]['text':' d = (10 * p2) div 2^-e','line_number':15620,'multiline':False]['text':' r = (10 * p2) mod 2^-e','line_number':15621,'multiline':False]['text':'','line_number':15622,'multiline':False]['text':'      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e','line_number':15623,'multiline':False]['text':'         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))','line_number':15624,'multiline':False]['text':'         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e','line_number':15625,'multiline':False]['text':'','line_number':15626,'multiline':False]['text':' buffer := buffer * 10 + d','line_number':15628,'multiline':False]['text':'','line_number':15629,'multiline':False]['text':'      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e','line_number':15630,'multiline':False]['text':'','line_number':15631,'multiline':False]['text':'','line_number':15634,'multiline':False]['text':'      M+ = buffer * 10^-m + 10^-m * p2 * 2^e','line_number':15635,'multiline':False]['text':' Invariant restored.','line_number':15636,'multiline':False]['text':' Check if enough digits have been generated.','line_number':15638,'multiline':False]['text':'','line_number':15639,'multiline':False]['text':'      10^-m * p2 * 2^e <= delta * 2^e','line_number':15640,'multiline':False]['text':'              p2 * 2^e <= 10^m * delta * 2^e','line_number':15641,'multiline':False]['text':'                    p2 <= 10^m * delta','line_number':15642,'multiline':False]['text':' V = buffer * 10^-m, with M- <= V <= M+.','line_number':15651,'multiline':False]['text':' 1 ulp in the decimal representation is now 10^-m.','line_number':15655,'multiline':False]['text':' Since delta and dist are now scaled by 10^m, we need to do the','line_number':15656,'multiline':False]['text':' same with ulp in order to keep the units in sync.','line_number':15657,'multiline':False]['text':'','line_number':15658,'multiline':False]['text':'      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e','line_number':15659,'multiline':False]['text':'','line_number':15660,'multiline':False]['text':' By construction this algorithm generates the shortest possible decimal','line_number':15664,'multiline':False]['text':' number (Loitsch, Theorem 6.2) which rounds back to w.','line_number':15665,'multiline':False]['text':' For an input number of precision p, at least','line_number':15666,'multiline':False]['text':'','line_number':15667,'multiline':False]['text':'      N = 1 + ceil(p * log_10(2))','line_number':15668,'multiline':False]['text':'','line_number':15669,'multiline':False]['text':' decimal digits are sufficient to identify all binary floating-point','line_number':15670,'multiline':False]['text':' numbers (Matula, "In-and-Out conversions").','line_number':15671,'multiline':False]['text':' This implies that the algorithm does not produce more than N decimal','line_number':15672,'multiline':False]['text':' digits.','line_number':15673,'multiline':False]['text':'','line_number':15674,'multiline':False]['text':'      N = 17 for p = 53 (IEEE double precision)','line_number':15675,'multiline':False]['text':'      N = 9  for p = 24 (IEEE single precision)','line_number':15676,'multiline':False]['text':'!
v = buf * 10^decimal_exponent
len is the length of the buffer (number of decimal digits)
The buffer must be large enough, i.e. >= max_digits10.
','line_number':15679,'multiline':True]['text':'  --------(-----------------------+-----------------------)--------    (A)','line_number':15691,'multiline':False]['text':'          m-                      v                       m+','line_number':15692,'multiline':False]['text':'','line_number':15693,'multiline':False]['text':'  --------------------(-----------+-----------------------)--------    (B)','line_number':15694,'multiline':False]['text':'                      m-          v                       m+','line_number':15695,'multiline':False]['text':'','line_number':15696,'multiline':False]['text':' First scale v (and m- and m+) such that the exponent is in the range','line_number':15697,'multiline':False]['text':' [alpha, gamma].','line_number':15698,'multiline':False]['text':' = c ~= 10^-k','line_number':15702,'multiline':False]['text':' The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]','line_number':15704,'multiline':False]['text':'  ----(---+---)---------------(---+---)---------------(---+---)----','line_number':15709,'multiline':False]['text':'          w-                      w                       w+','line_number':15710,'multiline':False]['text':'          = c*m-                  = c*v                   = c*m+','line_number':15711,'multiline':False]['text':'','line_number':15712,'multiline':False]['text':' diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and','line_number':15713,'multiline':False]['text':' w+ are now off by a small amount.','line_number':15714,'multiline':False]['text':' In fact:','line_number':15715,'multiline':False]['text':'','line_number':15716,'multiline':False]['text':'      w - v * 10^k < 1 ulp','line_number':15717,'multiline':False]['text':'','line_number':15718,'multiline':False]['text':' To account for this inaccuracy, add resp. subtract 1 ulp.','line_number':15719,'multiline':False]['text':'','line_number':15720,'multiline':False]['text':'  --------+---[---------------(---+---)---------------]---+--------','line_number':15721,'multiline':False]['text':'          w-  M-                  w                   M+  w+','line_number':15722,'multiline':False]['text':'','line_number':15723,'multiline':False]['text':' Now any number in [M-, M+] (bounds included) will round to w when input,','line_number':15724,'multiline':False]['text':' regardless of how the input rounding algorithm breaks ties.','line_number':15725,'multiline':False]['text':'','line_number':15726,'multiline':False]['text':' And digit_gen generates the shortest possible such number in [M-, M+].','line_number':15727,'multiline':False]['text':' Note that this does not mean that Grisu2 always generates the shortest','line_number':15728,'multiline':False]['text':' possible number in the interval (m-, m+).','line_number':15729,'multiline':False]['text':' = -(-k) = k','line_number':15733,'multiline':False]['text':'!
v = buf * 10^decimal_exponent
len is the length of the buffer (number of decimal digits)
The buffer must be large enough, i.e. >= max_digits10.
','line_number':15738,'multiline':True]['text':' If the neighbors (and boundaries) of 'value' are always computed for double-precision','line_number':15753,'multiline':False]['text':' numbers, all float's can be recovered using strtod (and strtof). However, the resulting','line_number':15754,'multiline':False]['text':' decimal representations are not exactly "short".','line_number':15755,'multiline':False]['text':'','line_number':15756,'multiline':False]['text':' The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)','line_number':15757,'multiline':False]['text':' says "value is converted to a string as if by std::sprintf in the default ("C") locale"','line_number':15758,'multiline':False]['text':' and since sprintf promotes float's to double's, I think this is exactly what 'std::to_chars'','line_number':15759,'multiline':False]['text':' does.','line_number':15760,'multiline':False]['text':' On the other hand, the documentation for 'std::to_chars' requires that "parsing the','line_number':15761,'multiline':False]['text':' representation using the corresponding std::from_chars function recovers value exactly". That','line_number':15762,'multiline':False]['text':' indicates that single precision floating-point numbers should be recovered using','line_number':15763,'multiline':False]['text':' 'std::strtof'.','line_number':15764,'multiline':False]['text':'','line_number':15765,'multiline':False]['text':' NB: If the neighbors are computed for single-precision numbers, there is a single float','line_number':15766,'multiline':False]['text':'     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision','line_number':15767,'multiline':False]['text':'     value is off by 1 ulp.','line_number':15768,'multiline':False]['text':'!
@brief appends a decimal representation of e to buf
@return a pointer to the element following the exponent.
@pre -1000 < e < 1000
','line_number':15778,'multiline':True]['text':' Always print at least two digits in the exponent.','line_number':15803,'multiline':False]['text':' This is for compatibility with printf("%g").','line_number':15804,'multiline':False]['text':'!
@brief prettify v = buf * 10^decimal_exponent

If v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point
notation. Otherwise it will be printed in exponential notation.

@pre min_exp < 0
@pre max_exp > 0
','line_number':15826,'multiline':True]['text':' v = buf * 10^(n-k)','line_number':15846,'multiline':False]['text':' k is the length of the buffer (number of decimal digits)','line_number':15847,'multiline':False]['text':' n is the position of the decimal point relative to the start of the buffer.','line_number':15848,'multiline':False]['text':' digits[000]','line_number':15852,'multiline':False]['text':' len <= max_exp + 2','line_number':15853,'multiline':False]['text':' Make it look like a floating-point number (#362, #378)','line_number':15856,'multiline':False]['text':' dig.its','line_number':15864,'multiline':False]['text':' len <= max_digits10 + 1','line_number':15865,'multiline':False]['text':' 0.[000]digits','line_number':15876,'multiline':False]['text':' len <= 2 + (-min_exp - 1) + max_digits10','line_number':15877,'multiline':False]['text':' dE+123','line_number':15888,'multiline':False]['text':' len <= 1 + 5','line_number':15889,'multiline':False]['text':' d.igitsE+123','line_number':15895,'multiline':False]['text':' len <= max_digits10 + 1 + 5','line_number':15896,'multiline':False]['text':' namespace dtoa_impl','line_number':15907,'multiline':False]['text':'!
@brief generates a decimal representation of the floating-point number value in [first, last).

The format of the resulting decimal representation is similar to printf's %g
format. Returns an iterator pointing past-the-end of the decimal representation.

@note The input number must be finite, i.e. NaN's and Inf's are not supported.
@note The buffer must be large enough.
@note The result is NOT null-terminated.
','line_number':15909,'multiline':True]['text':' maybe unused - fix warning','line_number':15924,'multiline':False]['text':' Use signbit(value) instead of (value < 0) since signbit works for -0.','line_number':15927,'multiline':False]['text':' +-0','line_number':15934,'multiline':False]['text':' Make it look like a floating-point number (#362, #378)','line_number':15937,'multiline':False]['text':' Compute v = buffer * 10^decimal_exponent.','line_number':15945,'multiline':False]['text':' The decimal digits are stored in the buffer, which needs to be interpreted','line_number':15946,'multiline':False]['text':' as an unsigned decimal integer.','line_number':15947,'multiline':False]['text':' len is the length of the buffer, i.e. the number of decimal digits.','line_number':15948,'multiline':False]['text':' Format the buffer like printf("%.*g", prec, value)','line_number':15955,'multiline':False]['text':' Use digits10 here to increase compatibility with version 2.','line_number':15957,'multiline':False]['text':' namespace detail','line_number':15967,'multiline':False]['text':' namespace nlohmann','line_number':15968,'multiline':False]['text':' #include <nlohmann/detail/exceptions.hpp>','line_number':15970,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':15972,'multiline':False]['text':' #include <nlohmann/detail/meta/cpp_future.hpp>','line_number':15974,'multiline':False]['text':' #include <nlohmann/detail/output/binary_writer.hpp>','line_number':15976,'multiline':False]['text':' #include <nlohmann/detail/output/output_adapters.hpp>','line_number':15978,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':15980,'multiline':False]['text':'/////////////////','line_number':15987,'multiline':False]['text':' serialization //','line_number':15988,'multiline':False]['text':'/////////////////','line_number':15989,'multiline':False]['text':'/ how to treat decoding errors','line_number':15991,'multiline':False]['text':'/< throw a type_error exception in case of invalid UTF-8','line_number':15994,'multiline':False]['text':'/< replace invalid UTF-8 sequences with U+FFFD','line_number':15995,'multiline':False]['text':'/< ignore invalid UTF-8 sequences','line_number':15996,'multiline':False]['text':'!
    @param[in] s  output stream to serialize to
    @param[in] ichar  indentation character to use
    @param[in] error_handler_  how to react on decoding errors
    ','line_number':16011,'multiline':True]['text':' delete because of pointer members','line_number':16027,'multiline':False]['text':'!
    @brief internal implementation of the serialization function

    This function is called by the public member function dump and organizes
    the serialization internally. The indentation level is propagated as
    additional parameter. In case of arrays and objects, the function is
    called recursively.

    - strings and object keys are escaped using `escape_string()`
    - integer numbers are converted implicitly via `operator<<`
    - floating-point numbers are converted to a string using `"%g"` format
    - binary values are serialized as objects containing the subtype and the
      byte array

    @param[in] val               value to serialize
    @param[in] pretty_print      whether the output shall be pretty-printed
    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
    in the output are escaped with `\uXXXX` sequences, and the result consists
    of ASCII characters only.
    @param[in] indent_step       the indent level
    @param[in] current_indent    the current indent level (only used internally)
    ','line_number':16034,'multiline':True]['text':' variable to hold indentation for recursive calls','line_number':16076,'multiline':False]['text':' first n-1 elements','line_number':16083,'multiline':False]['text':' last element','line_number':16095,'multiline':False]['text':' first n-1 elements','line_number':16112,'multiline':False]['text':' last element','line_number':16123,'multiline':False]['text':' variable to hold indentation for recursive calls','line_number':16149,'multiline':False]['text':' first n-1 elements','line_number':16156,'multiline':False]['text':' last element','line_number':16165,'multiline':False]['text':' first n-1 elements','line_number':16178,'multiline':False]['text':' last element','line_number':16186,'multiline':False]['text':' variable to hold indentation for recursive calls','line_number':16210,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':16320,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':16321,'multiline':False]['text':'!
    @brief dump escaped string

    Escape a string by replacing certain special characters by a sequence of an
    escape character (backslash) and another character and other control
    characters by a sequence of "\u" followed by a four-digit hex
    representation. The escaped string is written to output stream @a o.

    @param[in] s  the string to escape
    @param[in] ensure_ascii  whether to escape non-ASCII characters with
                             \uXXXX sequences

    @complexity Linear in the length of string @a s.
    ','line_number':16326,'multiline':True]['text':' number of bytes written to string_buffer','line_number':16344,'multiline':False]['text':' number of bytes written at the point of the last valid byte','line_number':16346,'multiline':False]['text':' decode found a new code point','line_number':16356,'multiline':False]['text':' backspace','line_number':16360,'multiline':False]['text':' horizontal tab','line_number':16367,'multiline':False]['text':' newline','line_number':16374,'multiline':False]['text':' formfeed','line_number':16381,'multiline':False]['text':' carriage return','line_number':16388,'multiline':False]['text':' quotation mark','line_number':16395,'multiline':False]['text':' reverse solidus','line_number':16402,'multiline':False]['text':' escape control characters (0x00..0x1F) or, if','line_number':16411,'multiline':False]['text':' ensure_ascii parameter is used, non-ASCII characters','line_number':16412,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':16417,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':16424,'multiline':False]['text':' copy byte to buffer (all previous bytes','line_number':16433,'multiline':False]['text':' been copied have in default case above)','line_number':16434,'multiline':False]['text':' write buffer and reset index; there must be 13 bytes','line_number':16441,'multiline':False]['text':' left, as this is the maximal number of bytes to be','line_number':16442,'multiline':False]['text':' written ("\uxxxx\uxxxx\0") for one code point','line_number':16443,'multiline':False]['text':' remember the byte position of this accept','line_number':16450,'multiline':False]['text':' decode found invalid UTF-8 byte','line_number':16456,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':16463,'multiline':False]['text':' in case we saw this character the first time, we','line_number':16471,'multiline':False]['text':' would like to read it again, because the byte','line_number':16472,'multiline':False]['text':' may be OK for itself, but just not OK for the','line_number':16473,'multiline':False]['text':' previous sequence','line_number':16474,'multiline':False]['text':' reset length buffer to the last accepted index;','line_number':16480,'multiline':False]['text':' thus removing/ignoring the invalid characters','line_number':16481,'multiline':False]['text':' add a replacement character','line_number':16486,'multiline':False]['text':' write buffer and reset index; there must be 13 bytes','line_number':16503,'multiline':False]['text':' left, as this is the maximal number of bytes to be','line_number':16504,'multiline':False]['text':' written ("\uxxxx\uxxxx\0") for one code point','line_number':16505,'multiline':False]['text':' continue processing the string','line_number':16517,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':16522,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':16523,'multiline':False]['text':' decode found yet incomplete multi-byte code point','line_number':16528,'multiline':False]['text':' code point will not be escaped - copy byte to buffer','line_number':16532,'multiline':False]['text':' we finished processing the string','line_number':16541,'multiline':False]['text':' write buffer','line_number':16544,'multiline':False]['text':' we finish reading, but do not accept: string was incomplete','line_number':16552,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':16558,'multiline':False]['text':' write all accepted bytes','line_number':16565,'multiline':False]['text':' write all accepted bytes','line_number':16572,'multiline':False]['text':' add a replacement character','line_number':16574,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':16586,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':16587,'multiline':False]['text':'!
    @brief count digits

    Count the number of decimal (base 10) digits for an input unsigned integer.

    @param[in] x  unsigned integer number to count its digits
    @return    number of decimal digits
    ','line_number':16593,'multiline':True]['text':'!
    @brief dump an integer

    Dump a given integer to output stream @a o. Works internally with
    @a number_buffer.

    @param[in] x  integer number (signed or unsigned) to dump
    @tparam NumberType either @a number_integer_t or @a number_unsigned_t
    ','line_number':16627,'multiline':True]['text':' special case for "0"','line_number':16659,'multiline':False]['text':' use a pointer to fill the buffer','line_number':16666,'multiline':False]['text':' NOLINT(llvm-qualified-auto,readability-qualified-auto,cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':16667,'multiline':False]['text':' see issue #755','line_number':16669,'multiline':False]['text':' account one more byte for the minus sign','line_number':16679,'multiline':False]['text':' spare 1 byte for '\0'','line_number':16688,'multiline':False]['text':' jump to the end to generate the string from backward','line_number':16691,'multiline':False]['text':' so we later avoid reversing the result','line_number':16692,'multiline':False]['text':' Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu','line_number':16695,'multiline':False]['text':' See: https://www.youtube.com/watch?v=o4-CwDo2zpg','line_number':16696,'multiline':False]['text':'!
    @brief dump a floating-point number

    Dump a given floating-point number to output stream @a o. Works internally
    with @a number_buffer.

    @param[in] x  floating-point number to dump
    ','line_number':16719,'multiline':True]['text':' NaN / inf','line_number':16729,'multiline':False]['text':' If number_float_t is an IEEE-754 single or double precision number,','line_number':16736,'multiline':False]['text':' use the Grisu2 algorithm to produce short numbers which are','line_number':16737,'multiline':False]['text':' guaranteed to round-trip, using strtof and strtod, resp.','line_number':16738,'multiline':False]['text':'','line_number':16739,'multiline':False]['text':' NB: The test below works if <long double> == <double>.','line_number':16740,'multiline':False]['text':'is_ieee_single_or_double','line_number':16748,'multiline':True]['text':'is_ieee_single_or_double','line_number':16756,'multiline':True]['text':' get number of digits for a float -> text -> float round-trip','line_number':16758,'multiline':False]['text':' the actual conversion','line_number':16761,'multiline':False]['text':' NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)','line_number':16762,'multiline':False]['text':' negative value indicates an error','line_number':16765,'multiline':False]['text':' check if buffer was large enough','line_number':16767,'multiline':False]['text':' erase thousands separator','line_number':16770,'multiline':False]['text':' convert decimal point to '.'','line_number':16780,'multiline':False]['text':' determine if need to append ".0"','line_number':16792,'multiline':False]['text':'!
    @brief check whether a string is UTF-8 encoded

    The function checks each byte of a string whether it is UTF-8 encoded. The
    result of the check is stored in the @a state parameter. The function must
    be called initially with state 0 (accept). State 1 means the string must
    be rejected, because the current byte is not allowed. If the string is
    completely processed, but the state is non-zero, the string ended
    prematurely; that is, the last byte indicated more bytes should have
    followed.

    @param[in,out] state  the state of the decoding
    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)
    @param[in] byte       next byte to decode
    @return               new state

    @note The function has been edited: a std::array is used.

    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
    ','line_number':16806,'multiline':True]['text':' 00..1F','line_number':16832,'multiline':False]['text':' 20..3F','line_number':16833,'multiline':False]['text':' 40..5F','line_number':16834,'multiline':False]['text':' 60..7F','line_number':16835,'multiline':False]['text':' 80..9F','line_number':16836,'multiline':False]['text':' A0..BF','line_number':16837,'multiline':False]['text':' C0..DF','line_number':16838,'multiline':False]['text':' E0..EF','line_number':16839,'multiline':False]['text':' F0..FF','line_number':16840,'multiline':False]['text':' s0..s0','line_number':16841,'multiline':False]['text':' s1..s2','line_number':16842,'multiline':False]['text':' s3..s4','line_number':16843,'multiline':False]['text':' s5..s6','line_number':16844,'multiline':False]['text':' s7..s8','line_number':16845,'multiline':False]['text':'
     * Overload to make the compiler happy while it is instantiating
     * dump_integer for number_unsigned_t.
     * Must never be called.
     ','line_number':16862,'multiline':True]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':16869,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':16870,'multiline':False]['text':'
     * Helper function for dump_integer
     *
     * This function takes a negative signed integer and returns its absolute
     * value as unsigned integer. The plus/minus shuffling is necessary as we can
     * not directly remove the sign of an arbitrary signed integer as the
     * absolute values of INT_MIN and INT_MAX are usually not the same. See
     * #1708 for details.
     ','line_number':16873,'multiline':True]['text':' NOLINT(misc-redundant-expression)','line_number':16884,'multiline':False]['text':'/ the output of the serializer','line_number':16889,'multiline':False]['text':'/ a (hopefully) large enough character buffer','line_number':16892,'multiline':False]['text':'/ the locale','line_number':16895,'multiline':False]['text':'/ the locale's thousand separator character','line_number':16897,'multiline':False]['text':'/ the locale's decimal point character','line_number':16899,'multiline':False]['text':'/ string buffer','line_number':16902,'multiline':False]['text':'/ the indentation character','line_number':16905,'multiline':False]['text':'/ the indentation string','line_number':16907,'multiline':False]['text':'/ error_handler how to react on decoding errors','line_number':16910,'multiline':False]['text':' namespace detail','line_number':16913,'multiline':False]['text':' namespace nlohmann','line_number':16914,'multiline':False]['text':' #include <nlohmann/detail/value_t.hpp>','line_number':16916,'multiline':False]['text':' #include <nlohmann/json_fwd.hpp>','line_number':16918,'multiline':False]['text':' #include <nlohmann/ordered_map.hpp>','line_number':16920,'multiline':False]['text':' less','line_number':16923,'multiline':False]['text':' initializer_list','line_number':16924,'multiline':False]['text':' input_iterator_tag, iterator_traits','line_number':16925,'multiline':False]['text':' allocator','line_number':16926,'multiline':False]['text':' for out_of_range','line_number':16927,'multiline':False]['text':' enable_if, is_convertible','line_number':16928,'multiline':False]['text':' pair','line_number':16929,'multiline':False]['text':' vector','line_number':16930,'multiline':False]['text':' #include <nlohmann/detail/macro_scope.hpp>','line_number':16932,'multiline':False]['text':'/ ordered_map: a minimal map-like container that preserves insertion order','line_number':16938,'multiline':False]['text':'/ for use within nlohmann::basic_json<ordered_map>','line_number':16939,'multiline':False]['text':' Explicit constructors instead of `using Container::Container`','line_number':16952,'multiline':False]['text':' otherwise older compilers choke on it (GCC <= 5.5, xcode <= 9.4)','line_number':16953,'multiline':False]['text':' Since we cannot move const Keys, re-construct them in place','line_number':17016,'multiline':False]['text':' Destroy but keep allocation','line_number':17019,'multiline':False]['text':' Since we cannot move const Keys, re-construct them in place','line_number':17033,'multiline':False]['text':' Destroy but keep allocation','line_number':17036,'multiline':False]['text':' namespace nlohmann','line_number':17111,'multiline':False]['text':'!
@brief namespace for Niels Lohmann
@see https://github.com/nlohmann
@since version 1.0.0
','line_number':17118,'multiline':True]['text':'!
@brief a class to store JSON values

@tparam ObjectType type for JSON objects (`std::map` by default; will be used
in @ref object_t)
@tparam ArrayType type for JSON arrays (`std::vector` by default; will be used
in @ref array_t)
@tparam StringType type for JSON strings and object keys (`std::string` by
default; will be used in @ref string_t)
@tparam BooleanType type for JSON booleans (`bool` by default; will be used
in @ref boolean_t)
@tparam NumberIntegerType type for JSON integer numbers (`int64_t` by
default; will be used in @ref number_integer_t)
@tparam NumberUnsignedType type for JSON unsigned integer numbers (@c
`uint64_t` by default; will be used in @ref number_unsigned_t)
@tparam NumberFloatType type for JSON floating-point numbers (`double` by
default; will be used in @ref number_float_t)
@tparam BinaryType type for packed binary data for compatibility with binary
serialization formats (`std::vector<std::uint8_t>` by default; will be used in
@ref binary_t)
@tparam AllocatorType type of the allocator to use (`std::allocator` by
default)
@tparam JSONSerializer the serializer to resolve internal calls to `to_json()`
and `from_json()` (@ref adl_serializer by default)

@requirement The class satisfies the following concept requirements:
- Basic
 - [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible):
   JSON values can be default constructed. The result will be a JSON null
   value.
 - [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible):
   A JSON value can be constructed from an rvalue argument.
 - [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible):
   A JSON value can be copy-constructed from an lvalue expression.
 - [MoveAssignable](https://en.cppreference.com/w/cpp/named_req/MoveAssignable):
   A JSON value van be assigned from an rvalue argument.
 - [CopyAssignable](https://en.cppreference.com/w/cpp/named_req/CopyAssignable):
   A JSON value can be copy-assigned from an lvalue expression.
 - [Destructible](https://en.cppreference.com/w/cpp/named_req/Destructible):
   JSON values can be destructed.
- Layout
 - [StandardLayoutType](https://en.cppreference.com/w/cpp/named_req/StandardLayoutType):
   JSON values have
   [standard layout](https://en.cppreference.com/w/cpp/language/data_members#Standard_layout):
   All non-static data members are private and standard layout types, the
   class has no virtual functions or (virtual) base classes.
- Library-wide
 - [EqualityComparable](https://en.cppreference.com/w/cpp/named_req/EqualityComparable):
   JSON values can be compared with `==`, see @ref
   operator==(const_reference,const_reference).
 - [LessThanComparable](https://en.cppreference.com/w/cpp/named_req/LessThanComparable):
   JSON values can be compared with `<`, see @ref
   operator<(const_reference,const_reference).
 - [Swappable](https://en.cppreference.com/w/cpp/named_req/Swappable):
   Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of
   other compatible types, using unqualified function call @ref swap().
 - [NullablePointer](https://en.cppreference.com/w/cpp/named_req/NullablePointer):
   JSON values can be compared against `std::nullptr_t` objects which are used
   to model the `null` value.
- Container
 - [Container](https://en.cppreference.com/w/cpp/named_req/Container):
   JSON values can be used like STL containers and provide iterator access.
 - [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer);
   JSON values can be used like STL containers and provide reverse iterator
   access.

@invariant The member variables @a m_value and @a m_type have the following
relationship:
- If `m_type == value_t::object`, then `m_value.object != nullptr`.
- If `m_type == value_t::array`, then `m_value.array != nullptr`.
- If `m_type == value_t::string`, then `m_value.string != nullptr`.
The invariants are checked by member function assert_invariant().

@internal
@note ObjectType trick from https://stackoverflow.com/a/9860911
@endinternal

@see [RFC 8259: The JavaScript Object Notation (JSON) Data Interchange
Format](https://tools.ietf.org/html/rfc8259)

@since version 1.0.0

@nosubgrouping
','line_number':17126,'multiline':True]['text':' NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)','line_number':17211,'multiline':False]['text':'/ workaround type for MSVC','line_number':17232,'multiline':False]['text':' convenience aliases for types residing in namespace detail;','line_number':17236,'multiline':False]['text':'/ JSON Pointer, see @ref nlohmann::json_pointer','line_number':17273,'multiline':False]['text':'/ how to treat decoding errors','line_number':17277,'multiline':False]['text':'/ how to treat CBOR tags','line_number':17279,'multiline':False]['text':'/ helper type for initializer lists of basic_json values','line_number':17281,'multiline':False]['text':'/ SAX interface type, see @ref nlohmann::json_sax','line_number':17285,'multiline':False]['text':'//////////////','line_number':17288,'multiline':False]['text':' exceptions //','line_number':17289,'multiline':False]['text':'//////////////','line_number':17290,'multiline':False]['text':'/ @name exceptions','line_number':17292,'multiline':False]['text':'/ Classes to implement user-defined exceptions.','line_number':17293,'multiline':False]['text':'/ @{','line_number':17294,'multiline':False]['text':'/ @copydoc detail::exception','line_number':17296,'multiline':False]['text':'/ @copydoc detail::parse_error','line_number':17298,'multiline':False]['text':'/ @copydoc detail::invalid_iterator','line_number':17300,'multiline':False]['text':'/ @copydoc detail::type_error','line_number':17302,'multiline':False]['text':'/ @copydoc detail::out_of_range','line_number':17304,'multiline':False]['text':'/ @copydoc detail::other_error','line_number':17306,'multiline':False]['text':'/ @}','line_number':17309,'multiline':False]['text':'///////////////////','line_number':17312,'multiline':False]['text':' container types //','line_number':17313,'multiline':False]['text':'///////////////////','line_number':17314,'multiline':False]['text':'/ @name container types','line_number':17316,'multiline':False]['text':'/ The canonic container types to use @ref basic_json like any other STL','line_number':17317,'multiline':False]['text':'/ container.','line_number':17318,'multiline':False]['text':'/ @{','line_number':17319,'multiline':False]['text':'/ the type of elements in a basic_json container','line_number':17321,'multiline':False]['text':'/ the type of an element reference','line_number':17324,'multiline':False]['text':'/ the type of an element const reference','line_number':17326,'multiline':False]['text':'/ a type to represent differences between iterators','line_number':17329,'multiline':False]['text':'/ a type to represent container sizes','line_number':17331,'multiline':False]['text':'/ the allocator type','line_number':17334,'multiline':False]['text':'/ the type of an element pointer','line_number':17337,'multiline':False]['text':'/ the type of an element const pointer','line_number':17339,'multiline':False]['text':'/ an iterator for a basic_json container','line_number':17342,'multiline':False]['text':'/ a const iterator for a basic_json container','line_number':17344,'multiline':False]['text':'/ a reverse iterator for a basic_json container','line_number':17346,'multiline':False]['text':'/ a const reverse iterator for a basic_json container','line_number':17348,'multiline':False]['text':'/ @}','line_number':17351,'multiline':False]['text':'!
    @brief returns the allocator associated with the container
    ','line_number':17354,'multiline':True]['text':'!
    @brief returns version information on the library

    This function returns a JSON object with information about the library,
    including the version number and information on the platform and compiler.

    @return JSON object holding version information
    key         | description
    ----------- | ---------------
    `compiler`  | Information on the used compiler. It is an object with the following keys: `c++` (the used C++ standard), `family` (the compiler family; possible values are `clang`, `icc`, `gcc`, `ilecpp`, `msvc`, `pgcpp`, `sunpro`, and `unknown`), and `version` (the compiler version).
    `copyright` | The copyright line for the library as string.
    `name`      | The name of the library as string.
    `platform`  | The used platform as string. Possible values are `win32`, `linux`, `apple`, `unix`, and `unknown`.
    `url`       | The URL of the project as string.
    `version`   | The version of the library. It is an object with the following keys: `major`, `minor`, and `patch` as defined by [Semantic Versioning](http://semver.org), and `string` (the version string).

    @liveexample{The following code shows an example output of the `meta()`
    function.,meta}

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @complexity Constant.

    @since 2.1.0
    ','line_number':17362,'multiline':True]['text':'/////////////////////////','line_number':17445,'multiline':False]['text':' JSON value data types //','line_number':17446,'multiline':False]['text':'/////////////////////////','line_number':17447,'multiline':False]['text':'/ @name JSON value data types','line_number':17449,'multiline':False]['text':'/ The data types to store a JSON value. These types are derived from','line_number':17450,'multiline':False]['text':'/ the template arguments passed to class @ref basic_json.','line_number':17451,'multiline':False]['text':'/ @{','line_number':17452,'multiline':False]['text':' Use transparent comparator if possible, combined with perfect forwarding','line_number':17455,'multiline':False]['text':' on find() and count() calls prevents unnecessary string construction.','line_number':17456,'multiline':False]['text':'!
    @brief a type for an object

    [RFC 8259](https://tools.ietf.org/html/rfc8259) describes JSON objects as follows:
    > An object is an unordered collection of zero or more name/value pairs,
    > where a name is a string and a value is a string, number, boolean, null,
    > object, or array.

    To store objects in C++, a type is defined by the template parameters
    described below.

    @tparam ObjectType  the container to store objects (e.g., `std::map` or
    `std::unordered_map`)
    @tparam StringType the type of the keys or names (e.g., `std::string`).
    The comparison function `std::less<StringType>` is used to order elements
    inside the container.
    @tparam AllocatorType the allocator to use for objects (e.g.,
    `std::allocator`)

    #### Default type

    With the default values for @a ObjectType (`std::map`), @a StringType
    (`std::string`), and @a AllocatorType (`std::allocator`), the default
    value for @a object_t is:

    @code {.cpp}
    std::map<
      std::string, // key_type
      basic_json, // value_type
      std::less<std::string>, // key_compare
      std::allocator<std::pair<const std::string, basic_json>> // allocator_type
    >
    @endcode

    #### Behavior

    The choice of @a object_t influences the behavior of the JSON class. With
    the default type, objects have the following behavior:

    - When all names are unique, objects will be interoperable in the sense
      that all software implementations receiving that object will agree on
      the name-value mappings.
    - When the names within an object are not unique, it is unspecified which
      one of the values for a given key will be chosen. For instance,
      `{"key": 2, "key": 1}` could be equal to either `{"key": 1}` or
      `{"key": 2}`.
    - Internally, name/value pairs are stored in lexicographical order of the
      names. Objects will also be serialized (see @ref dump) in this order.
      For instance, `{"b": 1, "a": 2}` and `{"a": 2, "b": 1}` will be stored
      and serialized as `{"a": 2, "b": 1}`.
    - When comparing objects, the order of the name/value pairs is irrelevant.
      This makes objects interoperable in the sense that they will not be
      affected by these differences. For instance, `{"b": 1, "a": 2}` and
      `{"a": 2, "b": 1}` will be treated as equal.

    #### Limits

    [RFC 8259](https://tools.ietf.org/html/rfc8259) specifies:
    > An implementation may set limits on the maximum depth of nesting.

    In this class, the object's limit of nesting is not explicitly constrained.
    However, a maximum depth of nesting may be introduced by the compiler or
    runtime environment. A theoretical limit can be queried by calling the
    @ref max_size function of a JSON object.

    #### Storage

    Objects are stored as pointers in a @ref basic_json type. That is, for any
    access to object values, a pointer of type `object_t*` must be
    dereferenced.

    @sa see @ref array_t -- type for an array value

    @since version 1.0.0

    @note The order name/value pairs are added to the object is *not*
    preserved by the library. Therefore, iterating an object may return
    name/value pairs in a different order than they were originally stored. In
    fact, keys will be traversed in alphabetical order as `std::map` with
    `std::less` is used by default. Please note this behavior conforms to [RFC
    8259](https://tools.ietf.org/html/rfc8259), because any order implements the
    specified "unordered" nature of JSON objects.
    ','line_number':17462,'multiline':True]['text':'!
    @brief a type for an array

    [RFC 8259](https://tools.ietf.org/html/rfc8259) describes JSON arrays as follows:
    > An array is an ordered sequence of zero or more values.

    To store objects in C++, a type is defined by the template parameters
    explained below.

    @tparam ArrayType  container type to store arrays (e.g., `std::vector` or
    `std::list`)
    @tparam AllocatorType allocator to use for arrays (e.g., `std::allocator`)

    #### Default type

    With the default values for @a ArrayType (`std::vector`) and @a
    AllocatorType (`std::allocator`), the default value for @a array_t is:

    @code {.cpp}
    std::vector<
      basic_json, // value_type
      std::allocator<basic_json> // allocator_type
    >
    @endcode

    #### Limits

    [RFC 8259](https://tools.ietf.org/html/rfc8259) specifies:
    > An implementation may set limits on the maximum depth of nesting.

    In this class, the array's limit of nesting is not explicitly constrained.
    However, a maximum depth of nesting may be introduced by the compiler or
    runtime environment. A theoretical limit can be queried by calling the
    @ref max_size function of a JSON array.

    #### Storage

    Arrays are stored as pointers in a @ref basic_json type. That is, for any
    access to array values, a pointer of type `array_t*` must be dereferenced.

    @sa see @ref object_t -- type for an object value

    @since version 1.0.0
    ','line_number':17551,'multiline':True]['text':'!
    @brief a type for a string

    [RFC 8259](https://tools.ietf.org/html/rfc8259) describes JSON strings as follows:
    > A string is a sequence of zero or more Unicode characters.

    To store objects in C++, a type is defined by the template parameter
    described below. Unicode values are split by the JSON class into
    byte-sized characters during deserialization.

    @tparam StringType  the container to store strings (e.g., `std::string`).
    Note this container is used for keys/names in objects, see @ref object_t.

    #### Default type

    With the default values for @a StringType (`std::string`), the default
    value for @a string_t is:

    @code {.cpp}
    std::string
    @endcode

    #### Encoding

    Strings are stored in UTF-8 encoding. Therefore, functions like
    `std::string::size()` or `std::string::length()` return the number of
    bytes in the string rather than the number of characters or glyphs.

    #### String comparison

    [RFC 8259](https://tools.ietf.org/html/rfc8259) states:
    > Software implementations are typically required to test names of object
    > members for equality. Implementations that transform the textual
    > representation into sequences of Unicode code units and then perform the
    > comparison numerically, code unit by code unit, are interoperable in the
    > sense that implementations will agree in all cases on equality or
    > inequality of two strings. For example, implementations that compare
    > strings with escaped characters unconverted may incorrectly find that
    > `"a\\b"` and `"a\u005Cb"` are not equal.

    This implementation is interoperable as it does compare strings code unit
    by code unit.

    #### Storage

    String values are stored as pointers in a @ref basic_json type. That is,
    for any access to string values, a pointer of type `string_t*` must be
    dereferenced.

    @since version 1.0.0
    ','line_number':17597,'multiline':True]['text':'!
    @brief a type for a boolean

    [RFC 8259](https://tools.ietf.org/html/rfc8259) implicitly describes a boolean as a
    type which differentiates the two literals `true` and `false`.

    To store objects in C++, a type is defined by the template parameter @a
    BooleanType which chooses the type to use.

    #### Default type

    With the default values for @a BooleanType (`bool`), the default value for
    @a boolean_t is:

    @code {.cpp}
    bool
    @endcode

    #### Storage

    Boolean values are stored directly inside a @ref basic_json type.

    @since version 1.0.0
    ','line_number':17650,'multiline':True]['text':'!
    @brief a type for a number (integer)

    [RFC 8259](https://tools.ietf.org/html/rfc8259) describes numbers as follows:
    > The representation of numbers is similar to that used in most
    > programming languages. A number is represented in base 10 using decimal
    > digits. It contains an integer component that may be prefixed with an
    > optional minus sign, which may be followed by a fraction part and/or an
    > exponent part. Leading zeros are not allowed. (...) Numeric values that
    > cannot be represented in the grammar below (such as Infinity and NaN)
    > are not permitted.

    This description includes both integer and floating-point numbers.
    However, C++ allows more precise storage if it is known whether the number
    is a signed integer, an unsigned integer or a floating-point number.
    Therefore, three different types, @ref number_integer_t, @ref
    number_unsigned_t and @ref number_float_t are used.

    To store integer numbers in C++, a type is defined by the template
    parameter @a NumberIntegerType which chooses the type to use.

    #### Default type

    With the default values for @a NumberIntegerType (`int64_t`), the default
    value for @a number_integer_t is:

    @code {.cpp}
    int64_t
    @endcode

    #### Default behavior

    - The restrictions about leading zeros is not enforced in C++. Instead,
      leading zeros in integer literals lead to an interpretation as octal
      number. Internally, the value will be stored as decimal number. For
      instance, the C++ integer literal `010` will be serialized to `8`.
      During deserialization, leading zeros yield an error.
    - Not-a-number (NaN) values will be serialized to `null`.

    #### Limits

    [RFC 8259](https://tools.ietf.org/html/rfc8259) specifies:
    > An implementation may set limits on the range and precision of numbers.

    When the default type is used, the maximal integer number that can be
    stored is `9223372036854775807` (INT64_MAX) and the minimal integer number
    that can be stored is `-9223372036854775808` (INT64_MIN). Integer numbers
    that are out of range will yield over/underflow when used in a
    constructor. During deserialization, too large or small integer numbers
    will be automatically be stored as @ref number_unsigned_t or @ref
    number_float_t.

    [RFC 8259](https://tools.ietf.org/html/rfc8259) further states:
    > Note that when such software is used, numbers that are integers and are
    > in the range \f$[-2^{53}+1, 2^{53}-1]\f$ are interoperable in the sense
    > that implementations will agree exactly on their numeric values.

    As this range is a subrange of the exactly supported range [INT64_MIN,
    INT64_MAX], this class's integer type is interoperable.

    #### Storage

    Integer number values are stored directly inside a @ref basic_json type.

    @sa see @ref number_float_t -- type for number values (floating-point)

    @sa see @ref number_unsigned_t -- type for number values (unsigned integer)

    @since version 1.0.0
    ','line_number':17676,'multiline':True]['text':'!
    @brief a type for a number (unsigned)

    [RFC 8259](https://tools.ietf.org/html/rfc8259) describes numbers as follows:
    > The representation of numbers is similar to that used in most
    > programming languages. A number is represented in base 10 using decimal
    > digits. It contains an integer component that may be prefixed with an
    > optional minus sign, which may be followed by a fraction part and/or an
    > exponent part. Leading zeros are not allowed. (...) Numeric values that
    > cannot be represented in the grammar below (such as Infinity and NaN)
    > are not permitted.

    This description includes both integer and floating-point numbers.
    However, C++ allows more precise storage if it is known whether the number
    is a signed integer, an unsigned integer or a floating-point number.
    Therefore, three different types, @ref number_integer_t, @ref
    number_unsigned_t and @ref number_float_t are used.

    To store unsigned integer numbers in C++, a type is defined by the
    template parameter @a NumberUnsignedType which chooses the type to use.

    #### Default type

    With the default values for @a NumberUnsignedType (`uint64_t`), the
    default value for @a number_unsigned_t is:

    @code {.cpp}
    uint64_t
    @endcode

    #### Default behavior

    - The restrictions about leading zeros is not enforced in C++. Instead,
      leading zeros in integer literals lead to an interpretation as octal
      number. Internally, the value will be stored as decimal number. For
      instance, the C++ integer literal `010` will be serialized to `8`.
      During deserialization, leading zeros yield an error.
    - Not-a-number (NaN) values will be serialized to `null`.

    #### Limits

    [RFC 8259](https://tools.ietf.org/html/rfc8259) specifies:
    > An implementation may set limits on the range and precision of numbers.

    When the default type is used, the maximal integer number that can be
    stored is `18446744073709551615` (UINT64_MAX) and the minimal integer
    number that can be stored is `0`. Integer numbers that are out of range
    will yield over/underflow when used in a constructor. During
    deserialization, too large or small integer numbers will be automatically
    be stored as @ref number_integer_t or @ref number_float_t.

    [RFC 8259](https://tools.ietf.org/html/rfc8259) further states:
    > Note that when such software is used, numbers that are integers and are
    > in the range \f$[-2^{53}+1, 2^{53}-1]\f$ are interoperable in the sense
    > that implementations will agree exactly on their numeric values.

    As this range is a subrange (when considered in conjunction with the
    number_integer_t type) of the exactly supported range [0, UINT64_MAX],
    this class's integer type is interoperable.

    #### Storage

    Integer number values are stored directly inside a @ref basic_json type.

    @sa see @ref number_float_t -- type for number values (floating-point)
    @sa see @ref number_integer_t -- type for number values (integer)

    @since version 2.0.0
    ','line_number':17748,'multiline':True]['text':'!
    @brief a type for a number (floating-point)

    [RFC 8259](https://tools.ietf.org/html/rfc8259) describes numbers as follows:
    > The representation of numbers is similar to that used in most
    > programming languages. A number is represented in base 10 using decimal
    > digits. It contains an integer component that may be prefixed with an
    > optional minus sign, which may be followed by a fraction part and/or an
    > exponent part. Leading zeros are not allowed. (...) Numeric values that
    > cannot be represented in the grammar below (such as Infinity and NaN)
    > are not permitted.

    This description includes both integer and floating-point numbers.
    However, C++ allows more precise storage if it is known whether the number
    is a signed integer, an unsigned integer or a floating-point number.
    Therefore, three different types, @ref number_integer_t, @ref
    number_unsigned_t and @ref number_float_t are used.

    To store floating-point numbers in C++, a type is defined by the template
    parameter @a NumberFloatType which chooses the type to use.

    #### Default type

    With the default values for @a NumberFloatType (`double`), the default
    value for @a number_float_t is:

    @code {.cpp}
    double
    @endcode

    #### Default behavior

    - The restrictions about leading zeros is not enforced in C++. Instead,
      leading zeros in floating-point literals will be ignored. Internally,
      the value will be stored as decimal number. For instance, the C++
      floating-point literal `01.2` will be serialized to `1.2`. During
      deserialization, leading zeros yield an error.
    - Not-a-number (NaN) values will be serialized to `null`.

    #### Limits

    [RFC 8259](https://tools.ietf.org/html/rfc8259) states:
    > This specification allows implementations to set limits on the range and
    > precision of numbers accepted. Since software that implements IEEE
    > 754-2008 binary64 (double precision) numbers is generally available and
    > widely used, good interoperability can be achieved by implementations
    > that expect no more precision or range than these provide, in the sense
    > that implementations will approximate JSON numbers within the expected
    > precision.

    This implementation does exactly follow this approach, as it uses double
    precision floating-point numbers. Note values smaller than
    `-1.79769313486232e+308` and values greater than `1.79769313486232e+308`
    will be stored as NaN internally and be serialized to `null`.

    #### Storage

    Floating-point number values are stored directly inside a @ref basic_json
    type.

    @sa see @ref number_integer_t -- type for number values (integer)

    @sa see @ref number_unsigned_t -- type for number values (unsigned integer)

    @since version 1.0.0
    ','line_number':17819,'multiline':True]['text':'!
    @brief a type for a packed binary type

    This type is a type designed to carry binary data that appears in various
    serialized formats, such as CBOR's Major Type 2, MessagePack's bin, and
    BSON's generic binary subtype. This type is NOT a part of standard JSON and
    exists solely for compatibility with these binary types. As such, it is
    simply defined as an ordered sequence of zero or more byte values.

    Additionally, as an implementation detail, the subtype of the binary data is
    carried around as a `std::uint8_t`, which is compatible with both of the
    binary data formats that use binary subtyping, (though the specific
    numbering is incompatible with each other, and it is up to the user to
    translate between them).

    [CBOR's RFC 7049](https://tools.ietf.org/html/rfc7049) describes this type
    as:
    > Major type 2: a byte string. The string's length in bytes is represented
    > following the rules for positive integers (major type 0).

    [MessagePack's documentation on the bin type
    family](https://github.com/msgpack/msgpack/blob/master/spec.md#bin-format-family)
    describes this type as:
    > Bin format family stores an byte array in 2, 3, or 5 bytes of extra bytes
    > in addition to the size of the byte array.

    [BSON's specifications](http://bsonspec.org/spec.html) describe several
    binary types; however, this type is intended to represent the generic binary
    type which has the description:
    > Generic binary subtype - This is the most commonly used binary subtype and
    > should be the 'default' for drivers and tools.

    None of these impose any limitations on the internal representation other
    than the basic unit of storage be some type of array whose parts are
    decomposable into bytes.

    The default representation of this binary format is a
    `std::vector<std::uint8_t>`, which is a very common way to represent a byte
    array in modern C++.

    #### Default type

    The default values for @a BinaryType is `std::vector<std::uint8_t>`

    #### Storage

    Binary Arrays are stored as pointers in a @ref basic_json type. That is,
    for any access to array values, a pointer of the type `binary_t*` must be
    dereferenced.

    #### Notes on subtypes

    - CBOR
       - Binary values are represented as byte strings. No subtypes are
         supported and will be ignored when CBOR is written.
    - MessagePack
       - If a subtype is given and the binary array contains exactly 1, 2, 4, 8,
         or 16 elements, the fixext family (fixext1, fixext2, fixext4, fixext8)
         is used. For other sizes, the ext family (ext8, ext16, ext32) is used.
         The subtype is then added as singed 8-bit integer.
       - If no subtype is given, the bin family (bin8, bin16, bin32) is used.
    - BSON
       - If a subtype is given, it is used and added as unsigned 8-bit integer.
       - If no subtype is given, the generic binary subtype 0x00 is used.

    @sa see @ref binary -- create a binary array

    @since version 3.8.0
    ','line_number':17887,'multiline':True]['text':'/ @}','line_number':17957,'multiline':False]['text':'/ helper for exception-safe object creation','line_number':17961,'multiline':False]['text':'//////////////////////','line_number':17979,'multiline':False]['text':' JSON value storage //','line_number':17980,'multiline':False]['text':'//////////////////////','line_number':17981,'multiline':False]['text':'!
    @brief a JSON value

    The actual storage for a JSON value of the @ref basic_json class. This
    union combines the different storage types for the JSON value types
    defined in @ref value_t.

    JSON type | value_t type    | used type
    --------- | --------------- | ------------------------
    object    | object          | pointer to @ref object_t
    array     | array           | pointer to @ref array_t
    string    | string          | pointer to @ref string_t
    boolean   | boolean         | @ref boolean_t
    number    | number_integer  | @ref number_integer_t
    number    | number_unsigned | @ref number_unsigned_t
    number    | number_float    | @ref number_float_t
    binary    | binary          | pointer to @ref binary_t
    null      | null            | *no value is stored*

    @note Variable-length types (objects, arrays, and strings) are stored as
    pointers. The size of the union should not exceed 64 bits if the default
    value types are used.

    @since version 1.0.0
    ','line_number':17984,'multiline':True]['text':'/ object (stored with pointer to save storage)','line_number':18011,'multiline':False]['text':'/ array (stored with pointer to save storage)','line_number':18013,'multiline':False]['text':'/ string (stored with pointer to save storage)','line_number':18015,'multiline':False]['text':'/ binary (stored with pointer to save storage)','line_number':18017,'multiline':False]['text':'/ boolean','line_number':18019,'multiline':False]['text':'/ number (integer)','line_number':18021,'multiline':False]['text':'/ number (unsigned integer)','line_number':18023,'multiline':False]['text':'/ number (floating-point)','line_number':18025,'multiline':False]['text':'/ default constructor (for null values)','line_number':18028,'multiline':False]['text':'/ constructor for booleans','line_number':18030,'multiline':False]['text':'/ constructor for numbers (integer)','line_number':18032,'multiline':False]['text':'/ constructor for numbers (unsigned)','line_number':18034,'multiline':False]['text':'/ constructor for numbers (floating-point)','line_number':18036,'multiline':False]['text':'/ constructor for empty values of a given type','line_number':18038,'multiline':False]['text':' silence warning, see #821','line_number':18093,'multiline':False]['text':' silence warning, see #821','line_number':18099,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':18102,'multiline':False]['text':'/ constructor for strings','line_number':18109,'multiline':False]['text':'/ constructor for rvalue strings','line_number':18115,'multiline':False]['text':'/ constructor for objects','line_number':18121,'multiline':False]['text':'/ constructor for rvalue objects','line_number':18127,'multiline':False]['text':'/ constructor for arrays','line_number':18133,'multiline':False]['text':'/ constructor for rvalue arrays','line_number':18139,'multiline':False]['text':'/ constructor for binary arrays','line_number':18145,'multiline':False]['text':'/ constructor for rvalue binary arrays','line_number':18151,'multiline':False]['text':'/ constructor for binary arrays (internal type)','line_number':18157,'multiline':False]['text':'/ constructor for rvalue binary arrays (internal type)','line_number':18163,'multiline':False]['text':' flatten the current json_value to a heap-allocated stack','line_number':18171,'multiline':False]['text':' move the top-level items to stack','line_number':18174,'multiline':False]['text':' move the last item to local variable to be processed','line_number':18191,'multiline':False]['text':' if current_item is array/object, move','line_number':18195,'multiline':False]['text':' its children to the stack to be processed later','line_number':18196,'multiline':False]['text':' it's now safe that current_item get destructed','line_number':18214,'multiline':False]['text':' since it doesn't have any children','line_number':18215,'multiline':False]['text':'!
    @brief checks the class invariants

    This function asserts the class invariants. It needs to be called at the
    end of every constructor to make sure that created objects respect the
    invariant. Furthermore, it has to be called each time the type of a JSON
    value is changed, because the invariant expresses a relationship between
    @a m_type and @a m_value.

    Furthermore, the parent relation is checked for arrays and objects: If
    @a check_parents true and the value is an array or object, then the
    container's elements must have the current value as parent.

    @param[in] check_parents  whether the parent relation should be checked.
               The value is true by default and should only be set to false
               during destruction of objects when the invariant does not
               need to hold.
    ','line_number':18261,'multiline':True]['text':' cppcheck-suppress assertWithSideEffect','line_number':18289,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':18295,'multiline':False]['text':'////////////////////////','line_number':18353,'multiline':False]['text':' JSON parser callback //','line_number':18354,'multiline':False]['text':'////////////////////////','line_number':18355,'multiline':False]['text':'!
    @brief parser event types

    The parser callback distinguishes the following events:
    - `object_start`: the parser read `{` and started to process a JSON object
    - `key`: the parser read a key of a value in an object
    - `object_end`: the parser read `}` and finished processing a JSON object
    - `array_start`: the parser read `[` and started to process a JSON array
    - `array_end`: the parser read `]` and finished processing a JSON array
    - `value`: the parser finished reading a JSON value

    @image html callback_events.png "Example when certain parse events are triggered"

    @sa see @ref parser_callback_t for more information and examples
    ','line_number':18357,'multiline':True]['text':'!
    @brief per-element parser callback type

    With a parser callback function, the result of parsing a JSON text can be
    influenced. When passed to @ref parse, it is called on certain events
    (passed as @ref parse_event_t via parameter @a event) with a set recursion
    depth @a depth and context JSON value @a parsed. The return value of the
    callback function is a boolean indicating whether the element that emitted
    the callback shall be kept or not.

    We distinguish six scenarios (determined by the event type) in which the
    callback function can be called. The following table describes the values
    of the parameters @a depth, @a event, and @a parsed.

    parameter @a event | description | parameter @a depth | parameter @a parsed
    ------------------ | ----------- | ------------------ | -------------------
    parse_event_t::object_start | the parser read `{` and started to process a JSON object | depth of the parent of the JSON object | a JSON value with type discarded
    parse_event_t::key | the parser read a key of a value in an object | depth of the currently parsed JSON object | a JSON string containing the key
    parse_event_t::object_end | the parser read `}` and finished processing a JSON object | depth of the parent of the JSON object | the parsed JSON object
    parse_event_t::array_start | the parser read `[` and started to process a JSON array | depth of the parent of the JSON array | a JSON value with type discarded
    parse_event_t::array_end | the parser read `]` and finished processing a JSON array | depth of the parent of the JSON array | the parsed JSON array
    parse_event_t::value | the parser finished reading a JSON value | depth of the value | the parsed JSON value

    @image html callback_events.png "Example when certain parse events are triggered"

    Discarding a value (i.e., returning `false`) has different effects
    depending on the context in which function was called:

    - Discarded values in structured types are skipped. That is, the parser
      will behave as if the discarded value was never read.
    - In case a value outside a structured type is skipped, it is replaced
      with `null`. This case happens if the top-level element is skipped.

    @param[in] depth  the depth of the recursion during parsing

    @param[in] event  an event of type parse_event_t indicating the context in
    the callback function has been called

    @param[in,out] parsed  the current intermediate parse result; note that
    writing to this value has no effect for parse_event_t::key events

    @return Whether the JSON value which called the function during parsing
    should be kept (`true`) or not (`false`). In the latter case, it is either
    skipped completely or replaced by an empty discarded object.

    @sa see @ref parse for examples

    @since version 1.0.0
    ','line_number':18374,'multiline':True]['text':'////////////////','line_number':18425,'multiline':False]['text':' constructors //','line_number':18426,'multiline':False]['text':'////////////////','line_number':18427,'multiline':False]['text':'/ @name constructors and destructors','line_number':18429,'multiline':False]['text':'/ Constructors of class @ref basic_json, copy/move constructor, copy','line_number':18430,'multiline':False]['text':'/ assignment, static functions creating objects, and the destructor.','line_number':18431,'multiline':False]['text':'/ @{','line_number':18432,'multiline':False]['text':'!
    @brief create an empty value with a given type

    Create an empty JSON value with a given type. The value will be default
    initialized with an empty value which depends on the type:

    Value type  | initial value
    ----------- | -------------
    null        | `null`
    boolean     | `false`
    string      | `""`
    number      | `0`
    object      | `{}`
    array       | `[]`
    binary      | empty array

    @param[in] v  the type of the value to create

    @complexity Constant.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @liveexample{The following code shows the constructor for different @ref
    value_t values,basic_json__value_t}

    @sa see @ref clear() -- restores the postcondition of this constructor

    @since version 1.0.0
    ','line_number':18434,'multiline':True]['text':'!
    @brief create a null object

    Create a `null` JSON value. It either takes a null pointer as parameter
    (explicitly creating `null`) or no parameter (implicitly creating `null`).
    The passed null pointer itself is not read -- it is only used to choose
    the right constructor.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this constructor never throws
    exceptions.

    @liveexample{The following code shows the constructor with and without a
    null pointer parameter.,basic_json__nullptr_t}

    @since version 1.0.0
    ','line_number':18470,'multiline':True]['text':'!
    @brief create a JSON value

    This is a "catch all" constructor for all compatible JSON types; that is,
    types for which a `to_json()` method exists. The constructor forwards the
    parameter @a val to that method (to `json_serializer<U>::to_json` method
    with `U = uncvref_t<CompatibleType>`, to be exact).

    Template type @a CompatibleType includes, but is not limited to, the
    following types:
    - **arrays**: @ref array_t and all kinds of compatible containers such as
      `std::vector`, `std::deque`, `std::list`, `std::forward_list`,
      `std::array`, `std::valarray`, `std::set`, `std::unordered_set`,
      `std::multiset`, and `std::unordered_multiset` with a `value_type` from
      which a @ref basic_json value can be constructed.
    - **objects**: @ref object_t and all kinds of compatible associative
      containers such as `std::map`, `std::unordered_map`, `std::multimap`,
      and `std::unordered_multimap` with a `key_type` compatible to
      @ref string_t and a `value_type` from which a @ref basic_json value can
      be constructed.
    - **strings**: @ref string_t, string literals, and all compatible string
      containers can be used.
    - **numbers**: @ref number_integer_t, @ref number_unsigned_t,
      @ref number_float_t, and all convertible number types such as `int`,
      `size_t`, `int64_t`, `float` or `double` can be used.
    - **boolean**: @ref boolean_t / `bool` can be used.
    - **binary**: @ref binary_t / `std::vector<uint8_t>` may be used,
      unfortunately because string literals cannot be distinguished from binary
      character arrays by the C++ type system, all types compatible with `const
      char*` will be directed to the string constructor instead.  This is both
      for backwards compatibility, and due to the fact that a binary type is not
      a standard JSON type.

    See the examples below.

    @tparam CompatibleType a type such that:
    - @a CompatibleType is not derived from `std::istream`,
    - @a CompatibleType is not @ref basic_json (to avoid hijacking copy/move
         constructors),
    - @a CompatibleType is not a different @ref basic_json type (i.e. with different template arguments)
    - @a CompatibleType is not a @ref basic_json nested type (e.g.,
         @ref json_pointer, @ref iterator, etc ...)
    - `json_serializer<U>` has a `to_json(basic_json_t&, CompatibleType&&)` method

    @tparam U = `uncvref_t<CompatibleType>`

    @param[in] val the value to be forwarded to the respective constructor

    @complexity Usually linear in the size of the passed @a val, also
                depending on the implementation of the called `to_json()`
                method.

    @exceptionsafety Depends on the called constructor. For types directly
    supported by the library (i.e., all types for which no `to_json()` function
    was provided), strong guarantee holds: if an exception is thrown, there are
    no changes to any JSON value.

    @liveexample{The following code shows the constructor with several
    compatible types.,basic_json__CompatibleType}

    @since version 2.1.0
    ','line_number':18494,'multiline':True]['text':' NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)','line_number':18560,'multiline':False]['text':'!
    @brief create a JSON value from an existing one

    This is a constructor for existing @ref basic_json types.
    It does not hijack copy/move constructors, since the parameter has different
    template arguments than the current ones.

    The constructor tries to convert the internal @ref m_value of the parameter.

    @tparam BasicJsonType a type such that:
    - @a BasicJsonType is a @ref basic_json type.
    - @a BasicJsonType has different template arguments than @ref basic_json_t.

    @param[in] val the @ref basic_json value to be converted.

    @complexity Usually linear in the size of the passed @a val, also
                depending on the implementation of the called `to_json()`
                method.

    @exceptionsafety Depends on the called constructor. For types directly
    supported by the library (i.e., all types for which no `to_json()` function
    was provided), strong guarantee holds: if an exception is thrown, there are
    no changes to any JSON value.

    @since version 3.2.0
    ','line_number':18569,'multiline':True]['text':' LCOV_EXCL_LINE','line_number':18641,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':18642,'multiline':False]['text':'!
    @brief create a container (array or object) from an initializer list

    Creates a JSON value of type array or object from the passed initializer
    list @a init. In case @a type_deduction is `true` (default), the type of
    the JSON value to be created is deducted from the initializer list @a init
    according to the following rules:

    1. If the list is empty, an empty JSON object value `{}` is created.
    2. If the list consists of pairs whose first element is a string, a JSON
       object value is created where the first elements of the pairs are
       treated as keys and the second elements are as values.
    3. In all other cases, an array is created.

    The rules aim to create the best fit between a C++ initializer list and
    JSON values. The rationale is as follows:

    1. The empty initializer list is written as `{}` which is exactly an empty
       JSON object.
    2. C++ has no way of describing mapped types other than to list a list of
       pairs. As JSON requires that keys must be of type string, rule 2 is the
       weakest constraint one can pose on initializer lists to interpret them
       as an object.
    3. In all other cases, the initializer list could not be interpreted as
       JSON object type, so interpreting it as JSON array type is safe.

    With the rules described above, the following JSON values cannot be
    expressed by an initializer list:

    - the empty array (`[]`): use @ref array(initializer_list_t)
      with an empty initializer list in this case
    - arrays whose elements satisfy rule 2: use @ref
      array(initializer_list_t) with the same initializer list
      in this case

    @note When used without parentheses around an empty initializer list, @ref
    basic_json() is called instead of this function, yielding the JSON null
    value.

    @param[in] init  initializer list with JSON values

    @param[in] type_deduction internal parameter; when set to `true`, the type
    of the JSON value is deducted from the initializer list @a init; when set
    to `false`, the type provided via @a manual_type is forced. This mode is
    used by the functions @ref array(initializer_list_t) and
    @ref object(initializer_list_t).

    @param[in] manual_type internal parameter; when @a type_deduction is set
    to `false`, the created JSON value will use the provided type (only @ref
    value_t::array and @ref value_t::object are valid); when @a type_deduction
    is set to `true`, this parameter has no effect

    @throw type_error.301 if @a type_deduction is `false`, @a manual_type is
    `value_t::object`, but @a init contains an element which is not a pair
    whose first element is a string. In this case, the constructor could not
    create an object. If @a type_deduction would have be `true`, an array
    would have been created. See @ref object(initializer_list_t)
    for an example.

    @complexity Linear in the size of the initializer list @a init.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @liveexample{The example below shows how JSON values are created from
    initializer lists.,basic_json__list_init_t}

    @sa see @ref array(initializer_list_t) -- create a JSON array
    value from an initializer list
    @sa see @ref object(initializer_list_t) -- create a JSON object
    value from an initializer list

    @since version 1.0.0
    ','line_number':18648,'multiline':True]['text':' check if each element is an array with two elements whose first','line_number':18726,'multiline':False]['text':' element is a string','line_number':18727,'multiline':False]['text':' adjust type if type deduction is not wanted','line_number':18734,'multiline':False]['text':' if array is wanted, do not create an object though possible','line_number':18737,'multiline':False]['text':' if object is wanted but impossible, throw an exception','line_number':18743,'multiline':False]['text':' the initializer list is a list of pairs -> create object','line_number':18752,'multiline':False]['text':' the initializer list describes an array -> create array','line_number':18766,'multiline':False]['text':'!
    @brief explicitly create a binary array (without subtype)

    Creates a JSON binary array value from a given binary container. Binary
    values are part of various binary formats, such as CBOR, MessagePack, and
    BSON. This constructor is used to create a value for serialization to those
    formats.

    @note Note, this function exists because of the difficulty in correctly
    specifying the correct template overload in the standard value ctor, as both
    JSON arrays and JSON binary arrays are backed with some form of a
    `std::vector`. Because JSON binary arrays are a non-standard extension it
    was decided that it would be best to prevent automatic initialization of a
    binary array type, for backwards compatibility and so it does not happen on
    accident.

    @param[in] init container containing bytes to use as binary type

    @return JSON binary array value

    @complexity Linear in the size of @a init.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @since version 3.8.0
    ','line_number':18775,'multiline':True]['text':'!
    @brief explicitly create a binary array (with subtype)

    Creates a JSON binary array value from a given binary container. Binary
    values are part of various binary formats, such as CBOR, MessagePack, and
    BSON. This constructor is used to create a value for serialization to those
    formats.

    @note Note, this function exists because of the difficulty in correctly
    specifying the correct template overload in the standard value ctor, as both
    JSON arrays and JSON binary arrays are backed with some form of a
    `std::vector`. Because JSON binary arrays are a non-standard extension it
    was decided that it would be best to prevent automatic initialization of a
    binary array type, for backwards compatibility and so it does not happen on
    accident.

    @param[in] init container containing bytes to use as binary type
    @param[in] subtype subtype to use in MessagePack and BSON

    @return JSON binary array value

    @complexity Linear in the size of @a init.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @since version 3.8.0
    ','line_number':18811,'multiline':True]['text':'/ @copydoc binary(const typename binary_t::container_type&)','line_number':18848,'multiline':False]['text':'/ @copydoc binary(const typename binary_t::container_type&, std::uint8_t)','line_number':18858,'multiline':False]['text':'!
    @brief explicitly create an array from an initializer list

    Creates a JSON array value from a given initializer list. That is, given a
    list of values `a, b, c`, creates the JSON value `[a, b, c]`. If the
    initializer list is empty, the empty array `[]` is created.

    @note This function is only needed to express two edge cases that cannot
    be realized with the initializer list constructor (@ref
    basic_json(initializer_list_t, bool, value_t)). These cases
    are:
    1. creating an array whose elements are all pairs whose first element is a
    string -- in this case, the initializer list constructor would create an
    object, taking the first elements as keys
    2. creating an empty array -- passing the empty initializer list to the
    initializer list constructor yields an empty object

    @param[in] init  initializer list with JSON values to create an array from
    (optional)

    @return JSON array value

    @complexity Linear in the size of @a init.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @liveexample{The following code shows an example for the `array`
    function.,array}

    @sa see @ref basic_json(initializer_list_t, bool, value_t) --
    create a JSON value from an initializer list
    @sa see @ref object(initializer_list_t) -- create a JSON object
    value from an initializer list

    @since version 1.0.0
    ','line_number':18868,'multiline':True]['text':'!
    @brief explicitly create an object from an initializer list

    Creates a JSON object value from a given initializer list. The initializer
    lists elements must be pairs, and their first elements must be strings. If
    the initializer list is empty, the empty object `{}` is created.

    @note This function is only added for symmetry reasons. In contrast to the
    related function @ref array(initializer_list_t), there are
    no cases which can only be expressed by this function. That is, any
    initializer list @a init can also be passed to the initializer list
    constructor @ref basic_json(initializer_list_t, bool, value_t).

    @param[in] init  initializer list to create an object from (optional)

    @return JSON object value

    @throw type_error.301 if @a init is not a list of pairs whose first
    elements are strings. In this case, no object can be created. When such a
    value is passed to @ref basic_json(initializer_list_t, bool, value_t),
    an array would have been created from the passed initializer list @a init.
    See example below.

    @complexity Linear in the size of @a init.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @liveexample{The following code shows an example for the `object`
    function.,object}

    @sa see @ref basic_json(initializer_list_t, bool, value_t) --
    create a JSON value from an initializer list
    @sa see @ref array(initializer_list_t) -- create a JSON array
    value from an initializer list

    @since version 1.0.0
    ','line_number':18911,'multiline':True]['text':'!
    @brief construct an array with count copies of given value

    Constructs a JSON array value by creating @a cnt copies of a passed value.
    In case @a cnt is `0`, an empty array is created.

    @param[in] cnt  the number of JSON copies of @a val to create
    @param[in] val  the JSON value to copy

    @post `std::distance(begin(),end()) == cnt` holds.

    @complexity Linear in @a cnt.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @liveexample{The following code shows examples for the @ref
    basic_json(size_type\, const basic_json&)
    constructor.,basic_json__size_type_basic_json}

    @since version 1.0.0
    ','line_number':18955,'multiline':True]['text':'!
    @brief construct a JSON container given an iterator range

    Constructs the JSON value with the contents of the range `[first, last)`.
    The semantics depends on the different types a JSON value can have:
    - In case of a null type, invalid_iterator.206 is thrown.
    - In case of other primitive types (number, boolean, or string), @a first
      must be `begin()` and @a last must be `end()`. In this case, the value is
      copied. Otherwise, invalid_iterator.204 is thrown.
    - In case of structured types (array, object), the constructor behaves as
      similar versions for `std::vector` or `std::map`; that is, a JSON array
      or object is constructed from the values in the range.

    @tparam InputIT an input iterator type (@ref iterator or @ref
    const_iterator)

    @param[in] first begin of the range to copy from (included)
    @param[in] last end of the range to copy from (excluded)

    @pre Iterators @a first and @a last must be initialized. **This
         precondition is enforced with an assertion (see warning).** If
         assertions are switched off, a violation of this precondition yields
         undefined behavior.

    @pre Range `[first, last)` is valid. Usually, this precondition cannot be
         checked efficiently. Only certain edge cases are detected; see the
         description of the exceptions below. A violation of this precondition
         yields undefined behavior.

    @warning A precondition is enforced with a runtime assertion that will
             result in calling `std::abort` if this precondition is not met.
             Assertions can be disabled by defining `NDEBUG` at compile time.
             See https://en.cppreference.com/w/cpp/error/assert for more
             information.

    @throw invalid_iterator.201 if iterators @a first and @a last are not
    compatible (i.e., do not belong to the same JSON value). In this case,
    the range `[first, last)` is undefined.
    @throw invalid_iterator.204 if iterators @a first and @a last belong to a
    primitive type (number, boolean, or string), but @a first does not point
    to the first element any more. In this case, the range `[first, last)` is
    undefined. See example code below.
    @throw invalid_iterator.206 if iterators @a first and @a last belong to a
    null value. In this case, the range `[first, last)` is undefined.

    @complexity Linear in distance between @a first and @a last.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @liveexample{The example below shows several ways to create JSON values by
    specifying a subrange with iterators.,basic_json__InputIt_InputIt}

    @since version 1.0.0
    ','line_number':18985,'multiline':True]['text':' make sure iterator fits the current value','line_number':19048,'multiline':False]['text':' copy type from first iterator','line_number':19054,'multiline':False]['text':' check if iterator range is complete for primitive values','line_number':19057,'multiline':False]['text':'/////////////////////////////////////','line_number':19139,'multiline':False]['text':' other constructors and destructor //','line_number':19140,'multiline':False]['text':'/////////////////////////////////////','line_number':19141,'multiline':False]['text':'!
    @brief copy constructor

    Creates a copy of a given JSON value.

    @param[in] other  the JSON value to copy

    @post `*this == other`

    @complexity Linear in the size of @a other.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes to any JSON value.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is linear.
    - As postcondition, it holds: `other == basic_json(other)`.

    @liveexample{The following code shows an example for the copy
    constructor.,basic_json__basic_json}

    @since version 1.0.0
    ','line_number':19148,'multiline':True]['text':' check of passed value is valid','line_number':19176,'multiline':False]['text':'!
    @brief move constructor

    Move constructor. Constructs a JSON value with the contents of the given
    value @a other using move semantics. It "steals" the resources from @a
    other and leaves it as JSON null value.

    @param[in,out] other  value to move to this object

    @post `*this` has the same value as @a other before the call.
    @post @a other is a JSON null value.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this constructor never throws
    exceptions.

    @requirement This function helps `basic_json` satisfying the
    [MoveConstructible](https://en.cppreference.com/w/cpp/named_req/MoveConstructible)
    requirements.

    @liveexample{The code below shows the move constructor explicitly called
    via std::move.,basic_json__moveconstructor}

    @since version 1.0.0
    ','line_number':19237,'multiline':True]['text':' check that passed value is valid','line_number':19267,'multiline':False]['text':' invalidate payload','line_number':19270,'multiline':False]['text':'!
    @brief copy assignment

    Copy assignment operator. Copies a JSON value via the "copy and swap"
    strategy: It is expressed in terms of the copy constructor, destructor,
    and the `swap()` member function.

    @param[in] other  value to copy from

    @complexity Linear.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is linear.

    @liveexample{The code below shows and example for the copy assignment. It
    creates a copy of value `a` which is then swapped with `b`. Finally\, the
    copy of `a` (which is the null value after the swap) is
    destroyed.,basic_json__copyassignment}

    @since version 1.0.0
    ','line_number':19278,'multiline':True]['text':' check that passed value is valid','line_number':19308,'multiline':False]['text':'!
    @brief destructor

    Destroys the JSON value and frees all allocated memory.

    @complexity Linear.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is linear.
    - All stored elements are destroyed and all memory is freed.

    @since version 1.0.0
    ','line_number':19320,'multiline':True]['text':'/ @}','line_number':19341,'multiline':False]['text':'/////////////////////','line_number':19344,'multiline':False]['text':' object inspection //','line_number':19345,'multiline':False]['text':'/////////////////////','line_number':19346,'multiline':False]['text':'/ @name object inspection','line_number':19348,'multiline':False]['text':'/ Functions to inspect the type of a JSON value.','line_number':19349,'multiline':False]['text':'/ @{','line_number':19350,'multiline':False]['text':'!
    @brief serialization

    Serialization function for JSON values. The function tries to mimic
    Python's `json.dumps()` function, and currently supports its @a indent
    and @a ensure_ascii parameters.

    @param[in] indent If indent is nonnegative, then array elements and object
    members will be pretty-printed with that indent level. An indent level of
    `0` will only insert newlines. `-1` (the default) selects the most compact
    representation.
    @param[in] indent_char The character to use for indentation if @a indent is
    greater than `0`. The default is ` ` (space).
    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
    in the output are escaped with `\uXXXX` sequences, and the result consists
    of ASCII characters only.
    @param[in] error_handler  how to react on decoding errors; there are three
    possible values: `strict` (throws and exception in case a decoding error
    occurs; default), `replace` (replace invalid UTF-8 sequences with U+FFFD),
    and `ignore` (ignore invalid UTF-8 sequences during serialization; all
    bytes are copied to the output unchanged).

    @return string containing the serialization of the JSON value

    @throw type_error.316 if a string stored inside the JSON value is not
                          UTF-8 encoded and @a error_handler is set to strict

    @note Binary values are serialized as object containing two keys:
      - "bytes": an array of bytes as integers
      - "subtype": the subtype as integer or "null" if the binary has no subtype

    @complexity Linear.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @liveexample{The following example shows the effect of different @a indent\,
    @a indent_char\, and @a ensure_ascii parameters to the result of the
    serialization.,dump}

    @see https://docs.python.org/2/library/json.html#json.dump

    @since version 1.0.0; indentation character @a indent_char, option
           @a ensure_ascii and exceptions added in version 3.0.0; error
           handlers added in version 3.4.0; serialization of binary values added
           in version 3.8.0.
    ','line_number':19352,'multiline':True]['text':'!
    @brief return the type of the JSON value (explicit)

    Return the type of the JSON value as a value from the @ref value_t
    enumeration.

    @return the type of the JSON value
            Value type                | return value
            ------------------------- | -------------------------
            null                      | value_t::null
            boolean                   | value_t::boolean
            string                    | value_t::string
            number (integer)          | value_t::number_integer
            number (unsigned integer) | value_t::number_unsigned
            number (floating-point)   | value_t::number_float
            object                    | value_t::object
            array                     | value_t::array
            binary                    | value_t::binary
            discarded                 | value_t::discarded

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `type()` for all JSON
    types.,type}

    @sa see @ref operator value_t() -- return the type of the JSON value (implicit)
    @sa see @ref type_name() -- return the type as string

    @since version 1.0.0
    ','line_number':19419,'multiline':True]['text':'!
    @brief return whether type is primitive

    This function returns true if and only if the JSON type is primitive
    (string, number, boolean, or null).

    @return `true` if type is primitive (string, number, boolean, or null),
    `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_primitive()` for all JSON
    types.,is_primitive}

    @sa see @ref is_structured() -- returns whether JSON value is structured
    @sa see @ref is_null() -- returns whether JSON value is `null`
    @sa see @ref is_string() -- returns whether JSON value is a string
    @sa see @ref is_boolean() -- returns whether JSON value is a boolean
    @sa see @ref is_number() -- returns whether JSON value is a number
    @sa see @ref is_binary() -- returns whether JSON value is a binary array

    @since version 1.0.0
    ','line_number':19457,'multiline':True]['text':'!
    @brief return whether type is structured

    This function returns true if and only if the JSON type is structured
    (array or object).

    @return `true` if type is structured (array or object), `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_structured()` for all JSON
    types.,is_structured}

    @sa see @ref is_primitive() -- returns whether value is primitive
    @sa see @ref is_array() -- returns whether value is an array
    @sa see @ref is_object() -- returns whether value is an object

    @since version 1.0.0
    ','line_number':19488,'multiline':True]['text':'!
    @brief return whether value is null

    This function returns true if and only if the JSON value is null.

    @return `true` if type is null, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_null()` for all JSON
    types.,is_null}

    @since version 1.0.0
    ','line_number':19515,'multiline':True]['text':'!
    @brief return whether value is a boolean

    This function returns true if and only if the JSON value is a boolean.

    @return `true` if type is boolean, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_boolean()` for all JSON
    types.,is_boolean}

    @since version 1.0.0
    ','line_number':19537,'multiline':True]['text':'!
    @brief return whether value is a number

    This function returns true if and only if the JSON value is a number. This
    includes both integer (signed and unsigned) and floating-point values.

    @return `true` if type is number (regardless whether integer, unsigned
    integer or floating-type), `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_number()` for all JSON
    types.,is_number}

    @sa see @ref is_number_integer() -- check if value is an integer or unsigned
    integer number
    @sa see @ref is_number_unsigned() -- check if value is an unsigned integer
    number
    @sa see @ref is_number_float() -- check if value is a floating-point number

    @since version 1.0.0
    ','line_number':19559,'multiline':True]['text':'!
    @brief return whether value is an integer number

    This function returns true if and only if the JSON value is a signed or
    unsigned integer number. This excludes floating-point values.

    @return `true` if type is an integer or unsigned integer number, `false`
    otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_number_integer()` for all
    JSON types.,is_number_integer}

    @sa see @ref is_number() -- check if value is a number
    @sa see @ref is_number_unsigned() -- check if value is an unsigned integer
    number
    @sa see @ref is_number_float() -- check if value is a floating-point number

    @since version 1.0.0
    ','line_number':19589,'multiline':True]['text':'!
    @brief return whether value is an unsigned integer number

    This function returns true if and only if the JSON value is an unsigned
    integer number. This excludes floating-point and signed integer values.

    @return `true` if type is an unsigned integer number, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_number_unsigned()` for all
    JSON types.,is_number_unsigned}

    @sa see @ref is_number() -- check if value is a number
    @sa see @ref is_number_integer() -- check if value is an integer or unsigned
    integer number
    @sa see @ref is_number_float() -- check if value is a floating-point number

    @since version 2.0.0
    ','line_number':19618,'multiline':True]['text':'!
    @brief return whether value is a floating-point number

    This function returns true if and only if the JSON value is a
    floating-point number. This excludes signed and unsigned integer values.

    @return `true` if type is a floating-point number, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_number_float()` for all
    JSON types.,is_number_float}

    @sa see @ref is_number() -- check if value is number
    @sa see @ref is_number_integer() -- check if value is an integer number
    @sa see @ref is_number_unsigned() -- check if value is an unsigned integer
    number

    @since version 1.0.0
    ','line_number':19646,'multiline':True]['text':'!
    @brief return whether value is an object

    This function returns true if and only if the JSON value is an object.

    @return `true` if type is object, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_object()` for all JSON
    types.,is_object}

    @since version 1.0.0
    ','line_number':19674,'multiline':True]['text':'!
    @brief return whether value is an array

    This function returns true if and only if the JSON value is an array.

    @return `true` if type is array, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_array()` for all JSON
    types.,is_array}

    @since version 1.0.0
    ','line_number':19696,'multiline':True]['text':'!
    @brief return whether value is a string

    This function returns true if and only if the JSON value is a string.

    @return `true` if type is string, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_string()` for all JSON
    types.,is_string}

    @since version 1.0.0
    ','line_number':19718,'multiline':True]['text':'!
    @brief return whether value is a binary array

    This function returns true if and only if the JSON value is a binary array.

    @return `true` if type is binary array, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_binary()` for all JSON
    types.,is_binary}

    @since version 3.8.0
    ','line_number':19740,'multiline':True]['text':'!
    @brief return whether value is discarded

    This function returns true if and only if the JSON value was discarded
    during parsing with a callback function (see @ref parser_callback_t).

    @note This function will always be `false` for JSON values after parsing.
    That is, discarded values can only occur during parsing, but will be
    removed when inside a structured value or replaced by null in other cases.

    @return `true` if type is discarded, `false` otherwise.

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies `is_discarded()` for all JSON
    types.,is_discarded}

    @since version 1.0.0
    ','line_number':19762,'multiline':True]['text':'!
    @brief return the type of the JSON value (implicit)

    Implicitly return the type of the JSON value as a value from the @ref
    value_t enumeration.

    @return the type of the JSON value

    @complexity Constant.

    @exceptionsafety No-throw guarantee: this member function never throws
    exceptions.

    @liveexample{The following code exemplifies the @ref value_t operator for
    all JSON types.,operator__value_t}

    @sa see @ref type() -- return the type of the JSON value (explicit)
    @sa see @ref type_name() -- return the type as string

    @since version 1.0.0
    ','line_number':19789,'multiline':True]['text':'/ @}','line_number':19815,'multiline':False]['text':'////////////////','line_number':19818,'multiline':False]['text':' value access //','line_number':19819,'multiline':False]['text':'////////////////','line_number':19820,'multiline':False]['text':'/ get a boolean (explicit)','line_number':19822,'multiline':False]['text':'unused','line_number':19823,'multiline':True]['text':'/ get a pointer to the value (object)','line_number':19833,'multiline':False]['text':'unused','line_number':19834,'multiline':True]['text':'/ get a pointer to the value (object)','line_number':19839,'multiline':False]['text':'unused','line_number':19840,'multiline':True]['text':'/ get a pointer to the value (array)','line_number':19845,'multiline':False]['text':'unused','line_number':19846,'multiline':True]['text':'/ get a pointer to the value (array)','line_number':19851,'multiline':False]['text':'unused','line_number':19852,'multiline':True]['text':'/ get a pointer to the value (string)','line_number':19857,'multiline':False]['text':'unused','line_number':19858,'multiline':True]['text':'/ get a pointer to the value (string)','line_number':19863,'multiline':False]['text':'unused','line_number':19864,'multiline':True]['text':'/ get a pointer to the value (boolean)','line_number':19869,'multiline':False]['text':'unused','line_number':19870,'multiline':True]['text':'/ get a pointer to the value (boolean)','line_number':19875,'multiline':False]['text':'unused','line_number':19876,'multiline':True]['text':'/ get a pointer to the value (integer number)','line_number':19881,'multiline':False]['text':'unused','line_number':19882,'multiline':True]['text':'/ get a pointer to the value (integer number)','line_number':19887,'multiline':False]['text':'unused','line_number':19888,'multiline':True]['text':'/ get a pointer to the value (unsigned number)','line_number':19893,'multiline':False]['text':'unused','line_number':19894,'multiline':True]['text':'/ get a pointer to the value (unsigned number)','line_number':19899,'multiline':False]['text':'unused','line_number':19900,'multiline':True]['text':'/ get a pointer to the value (floating-point number)','line_number':19905,'multiline':False]['text':'unused','line_number':19906,'multiline':True]['text':'/ get a pointer to the value (floating-point number)','line_number':19911,'multiline':False]['text':'unused','line_number':19912,'multiline':True]['text':'/ get a pointer to the value (binary)','line_number':19917,'multiline':False]['text':'unused','line_number':19918,'multiline':True]['text':'/ get a pointer to the value (binary)','line_number':19923,'multiline':False]['text':'unused','line_number':19924,'multiline':True]['text':'!
    @brief helper function to implement get_ref()

    This function helps to implement get_ref() without code duplication for
    const and non-const overloads

    @tparam ThisType will be deduced as `basic_json` or `const basic_json`

    @throw type_error.303 if ReferenceType does not match underlying value
    type of the current JSON
    ','line_number':19929,'multiline':True]['text':' delegate the call to get_ptr<>()','line_number':19943,'multiline':False]['text':'/ @name value access','line_number':19955,'multiline':False]['text':'/ Direct access to the stored value of a JSON value.','line_number':19956,'multiline':False]['text':'/ @{','line_number':19957,'multiline':False]['text':'!
    @brief get a pointer value (implicit)

    Implicit pointer access to the internally stored JSON value. No copies are
    made.

    @warning Writing data to the pointee of the result yields an undefined
    state.

    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
    @ref number_unsigned_t, or @ref number_float_t. Enforced by a static
    assertion.

    @return pointer to the internally stored JSON value if the requested
    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise

    @complexity Constant.

    @liveexample{The example below shows how pointers to internal values of a
    JSON value can be requested. Note that no type conversions are made and a
    `nullptr` is returned if the value and the requested pointer type does not
    match.,get_ptr}

    @since version 1.0.0
    ','line_number':19959,'multiline':True]['text':' delegate the call to get_impl_ptr<>()','line_number':19989,'multiline':False]['text':'!
    @brief get a pointer value (implicit)
    @copydoc get_ptr()
    ','line_number':19993,'multiline':True]['text':' delegate the call to get_impl_ptr<>() const','line_number':20002,'multiline':False]['text':'!
    @brief get a value (explicit)

    Explicit type conversion between the JSON value and a compatible value
    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
    The value is converted by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    ValueType ret;
    JSONSerializer<ValueType>::from_json(*this, ret);
    return ret;
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json,
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `void from_json(const basic_json&, ValueType&)`, and
    - @ref json_serializer<ValueType> does not have a `from_json()` method of
      the form `ValueType from_json(const basic_json&)`

    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @a ValueType

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,get__ValueType_const}

    @since version 2.1.0
    ','line_number':20007,'multiline':True]['text':'unused','line_number':20050,'multiline':True]['text':'!
    @brief get a value (explicit); special case

    Explicit type conversion between the JSON value and a compatible value
    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
    The value is converted by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    return JSONSerializer<ValueType>::from_json(*this);
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json and
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `ValueType from_json(const basic_json&)`

    @note If @ref json_serializer<ValueType> has both overloads of
    `from_json()`, this one is chosen.

    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @a ValueType

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @since version 2.1.0
    ','line_number':20058,'multiline':True]['text':'unused','line_number':20092,'multiline':True]['text':'!
    @brief get special-case overload

    This overloads converts the current @ref basic_json in a different
    @ref basic_json type

    @tparam BasicJsonType == @ref basic_json

    @return a copy of *this, converted into @a BasicJsonType

    @complexity Depending on the implementation of the called `from_json()`
                method.

    @since version 3.2.0
    ','line_number':20098,'multiline':True]['text':'unused','line_number':20117,'multiline':True]['text':'!
    @brief get special-case overload

    This overloads avoids a lot of template boilerplate, it can be seen as the
    identity method

    @tparam BasicJsonType == @ref basic_json

    @return a copy of *this

    @complexity Constant.

    @since version 2.1.0
    ','line_number':20122,'multiline':True]['text':'unused','line_number':20140,'multiline':True]['text':'!
    @brief get a pointer value (explicit)
    @copydoc get()
    ','line_number':20145,'multiline':True]['text':'unused','line_number':20153,'multiline':True]['text':' delegate the call to get_ptr','line_number':20156,'multiline':False]['text':'!
    @brief get a (pointer) value (explicit)

    Performs explicit type conversion between the JSON value and a compatible value if required.

    - If the requested type is a pointer to the internally stored JSON value that pointer is returned.
    No copies are made.

    - If the requested type is the current @ref basic_json, or a different @ref basic_json convertible
    from the current @ref basic_json.

    - Otherwise the value is converted by calling the @ref json_serializer<ValueType> `from_json()`
    method.

    @tparam ValueTypeCV the provided value type
    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @tparam ValueType if necessary

    @throw what @ref json_serializer<ValueType> `from_json()` method throws if conversion is required

    @since version 2.1.0
    ','line_number':20161,'multiline':True]['text':' we cannot static_assert on ValueTypeCV being non-const, because','line_number':20192,'multiline':False]['text':' there is support for get<const basic_json_t>(), which is why we','line_number':20193,'multiline':False]['text':' still need the uncvref','line_number':20194,'multiline':False]['text':'!
    @brief get a pointer value (explicit)

    Explicit pointer access to the internally stored JSON value. No copies are
    made.

    @warning The pointer becomes invalid if the underlying JSON object
    changes.

    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
    @ref number_unsigned_t, or @ref number_float_t.

    @return pointer to the internally stored JSON value if the requested
    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise

    @complexity Constant.

    @liveexample{The example below shows how pointers to internal values of a
    JSON value can be requested. Note that no type conversions are made and a
    `nullptr` is returned if the value and the requested pointer type does not
    match.,get__PointerType}

    @sa see @ref get_ptr() for explicit pointer-member access

    @since version 1.0.0
    ','line_number':20200,'multiline':True]['text':' delegate the call to get_ptr','line_number':20231,'multiline':False]['text':'!
    @brief get a value (explicit)

    Explicit type conversion between the JSON value and a compatible value.
    The value is filled into the input parameter by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    ValueType v;
    JSONSerializer<ValueType>::from_json(*this, v);
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json,
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `void from_json(const basic_json&, ValueType&)`, and

    @tparam ValueType the input parameter type.

    @return the input parameter, allowing chaining calls.

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,get_to}

    @since version 3.3.0
    ','line_number':20235,'multiline':True]['text':' specialization to allow to call get_to with a basic_json value','line_number':20280,'multiline':False]['text':' see https://github.com/nlohmann/json/issues/2175','line_number':20281,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':20294,'multiline':False]['text':' NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)','line_number':20297,'multiline':False]['text':'!
    @brief get a reference value (implicit)

    Implicit reference access to the internally stored JSON value. No copies
    are made.

    @warning Writing data to the referee of the result yields an undefined
    state.

    @tparam ReferenceType reference type; must be a reference to @ref array_t,
    @ref object_t, @ref string_t, @ref boolean_t, @ref number_integer_t, or
    @ref number_float_t. Enforced by static assertion.

    @return reference to the internally stored JSON value if the requested
    reference type @a ReferenceType fits to the JSON value; throws
    type_error.303 otherwise

    @throw type_error.303 in case passed type @a ReferenceType is incompatible
    with the stored JSON value; see example below

    @complexity Constant.

    @liveexample{The example shows several calls to `get_ref()`.,get_ref}

    @since version 1.1.0
    ','line_number':20305,'multiline':True]['text':' delegate call to get_ref_impl','line_number':20335,'multiline':False]['text':'!
    @brief get a reference value (implicit)
    @copydoc get_ref()
    ','line_number':20339,'multiline':True]['text':' delegate call to get_ref_impl','line_number':20348,'multiline':False]['text':'!
    @brief get a value (implicit)

    Implicit type conversion between the JSON value and a compatible value.
    The call is realized by calling @ref get() const.

    @tparam ValueType non-pointer type compatible to the JSON value, for
    instance `int` for JSON integer numbers, `bool` for JSON booleans, or
    `std::vector` types for JSON arrays. The character type of @ref string_t
    as well as an initializer list of this type is excluded to avoid
    ambiguities as these types implicitly convert to `std::string`.

    @return copy of the JSON value, converted to type @a ValueType

    @throw type_error.302 in case passed type @a ValueType is incompatible
    to the JSON value type (e.g., the JSON value is of type boolean, but a
    string is requested); see example below

    @complexity Linear in the size of the JSON value.

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,operator__ValueType}

    @since version 1.0.0
    ','line_number':20352,'multiline':True]['text':' delegate the call to get<>() const','line_number':20394,'multiline':False]['text':'!
    @return reference to the binary value

    @throw type_error.302 if the value is not binary

    @sa see @ref is_binary() to check if the value is binary

    @since version 3.8.0
    ','line_number':20398,'multiline':True]['text':'/ @copydoc get_binary()','line_number':20417,'multiline':False]['text':'/ @}','line_number':20428,'multiline':False]['text':'//////////////////','line_number':20431,'multiline':False]['text':' element access //','line_number':20432,'multiline':False]['text':'//////////////////','line_number':20433,'multiline':False]['text':'/ @name element access','line_number':20435,'multiline':False]['text':'/ Access to the JSON value.','line_number':20436,'multiline':False]['text':'/ @{','line_number':20437,'multiline':False]['text':'!
    @brief access specified array element with bounds checking

    Returns a reference to the element at specified location @a idx, with
    bounds checking.

    @param[in] idx  index of the element to access

    @return reference to the element at index @a idx

    @throw type_error.304 if the JSON value is not an array; in this case,
    calling `at` with an index makes no sense. See example below.
    @throw out_of_range.401 if the index @a idx is out of range of the array;
    that is, `idx >= size()`. See example below.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Constant.

    @since version 1.0.0

    @liveexample{The example below shows how array elements can be read and
    written using `at()`. It also demonstrates the different exceptions that
    can be thrown.,at__size_type}
    ','line_number':20439,'multiline':True]['text':' at only works for arrays','line_number':20467,'multiline':False]['text':' create better exception explanation','line_number':20476,'multiline':False]['text':'!
    @brief access specified array element with bounds checking

    Returns a const reference to the element at specified location @a idx,
    with bounds checking.

    @param[in] idx  index of the element to access

    @return const reference to the element at index @a idx

    @throw type_error.304 if the JSON value is not an array; in this case,
    calling `at` with an index makes no sense. See example below.
    @throw out_of_range.401 if the index @a idx is out of range of the array;
    that is, `idx >= size()`. See example below.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Constant.

    @since version 1.0.0

    @liveexample{The example below shows how array elements can be read using
    `at()`. It also demonstrates the different exceptions that can be thrown.,
    at__size_type_const}
    ','line_number':20486,'multiline':True]['text':' at only works for arrays','line_number':20514,'multiline':False]['text':' create better exception explanation','line_number':20523,'multiline':False]['text':'!
    @brief access specified object element with bounds checking

    Returns a reference to the element at with specified key @a key, with
    bounds checking.

    @param[in] key  key of the element to access

    @return reference to the element at key @a key

    @throw type_error.304 if the JSON value is not an object; in this case,
    calling `at` with a key makes no sense. See example below.
    @throw out_of_range.403 if the key @a key is is not stored in the object;
    that is, `find(key) == end()`. See example below.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Logarithmic in the size of the container.

    @sa see @ref operator[](const typename object_t::key_type&) for unchecked
    access by reference
    @sa see @ref value() for access by value with a default value

    @since version 1.0.0

    @liveexample{The example below shows how object elements can be read and
    written using `at()`. It also demonstrates the different exceptions that
    can be thrown.,at__object_t_key_type}
    ','line_number':20533,'multiline':True]['text':' at only works for objects','line_number':20565,'multiline':False]['text':' create better exception explanation','line_number':20574,'multiline':False]['text':'!
    @brief access specified object element with bounds checking

    Returns a const reference to the element at with specified key @a key,
    with bounds checking.

    @param[in] key  key of the element to access

    @return const reference to the element at key @a key

    @throw type_error.304 if the JSON value is not an object; in this case,
    calling `at` with a key makes no sense. See example below.
    @throw out_of_range.403 if the key @a key is is not stored in the object;
    that is, `find(key) == end()`. See example below.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Logarithmic in the size of the container.

    @sa see @ref operator[](const typename object_t::key_type&) for unchecked
    access by reference
    @sa see @ref value() for access by value with a default value

    @since version 1.0.0

    @liveexample{The example below shows how object elements can be read using
    `at()`. It also demonstrates the different exceptions that can be thrown.,
    at__object_t_key_type_const}
    ','line_number':20584,'multiline':True]['text':' at only works for objects','line_number':20616,'multiline':False]['text':' create better exception explanation','line_number':20625,'multiline':False]['text':'!
    @brief access specified array element

    Returns a reference to the element at specified location @a idx.

    @note If @a idx is beyond the range of the array (i.e., `idx >= size()`),
    then the array is silently filled up with `null` values to make `idx` a
    valid reference to the last stored element.

    @param[in] idx  index of the element to access

    @return reference to the element at index @a idx

    @throw type_error.305 if the JSON value is not an array or null; in that
    cases, using the [] operator with an index makes no sense.

    @complexity Constant if @a idx is in the range of the array. Otherwise
    linear in `idx - size()`.

    @liveexample{The example below shows how array elements can be read and
    written using `[]` operator. Note the addition of `null`
    values.,operatorarray__size_type}

    @since version 1.0.0
    ','line_number':20635,'multiline':True]['text':' implicitly convert null value to an empty array','line_number':20662,'multiline':False]['text':' operator[] only works for arrays','line_number':20670,'multiline':False]['text':' fill up array with null values if given idx is outside range','line_number':20673,'multiline':False]['text':' remember array size before resizing','line_number':20677,'multiline':False]['text':' set parent for values added above','line_number':20683,'multiline':False]['text':'!
    @brief access specified array element

    Returns a const reference to the element at specified location @a idx.

    @param[in] idx  index of the element to access

    @return const reference to the element at index @a idx

    @throw type_error.305 if the JSON value is not an array; in that case,
    using the [] operator with an index makes no sense.

    @complexity Constant.

    @liveexample{The example below shows how array elements can be read using
    the `[]` operator.,operatorarray__size_type_const}

    @since version 1.0.0
    ','line_number':20694,'multiline':True]['text':' const operator[] only works for arrays','line_number':20715,'multiline':False]['text':'!
    @brief access specified object element

    Returns a reference to the element at with specified key @a key.

    @note If @a key is not found in the object, then it is silently added to
    the object and filled with a `null` value to make `key` a valid reference.
    In case the value was `null` before, it is converted to an object.

    @param[in] key  key of the element to access

    @return reference to the element at key @a key

    @throw type_error.305 if the JSON value is not an object or null; in that
    cases, using the [] operator with a key makes no sense.

    @complexity Logarithmic in the size of the container.

    @liveexample{The example below shows how object elements can be read and
    written using the `[]` operator.,operatorarray__key_type}

    @sa see @ref at(const typename object_t::key_type&) for access by reference
    with range checking
    @sa see @ref value() for access by value with a default value

    @since version 1.0.0
    ','line_number':20724,'multiline':True]['text':' implicitly convert null value to an empty object','line_number':20753,'multiline':False]['text':' operator[] only works for objects','line_number':20761,'multiline':False]['text':'!
    @brief read-only access specified object element

    Returns a const reference to the element at with specified key @a key. No
    bounds checking is performed.

    @warning If the element with key @a key does not exist, the behavior is
    undefined.

    @param[in] key  key of the element to access

    @return const reference to the element at key @a key

    @pre The element with key @a key must exist. **This precondition is
         enforced with an assertion.**

    @throw type_error.305 if the JSON value is not an object; in that case,
    using the [] operator with a key makes no sense.

    @complexity Logarithmic in the size of the container.

    @liveexample{The example below shows how object elements can be read using
    the `[]` operator.,operatorarray__key_type_const}

    @sa see @ref at(const typename object_t::key_type&) for access by reference
    with range checking
    @sa see @ref value() for access by value with a default value

    @since version 1.0.0
    ','line_number':20770,'multiline':True]['text':' const operator[] only works for objects','line_number':20802,'multiline':False]['text':'!
    @brief access specified object element

    Returns a reference to the element at with specified key @a key.

    @note If @a key is not found in the object, then it is silently added to
    the object and filled with a `null` value to make `key` a valid reference.
    In case the value was `null` before, it is converted to an object.

    @param[in] key  key of the element to access

    @return reference to the element at key @a key

    @throw type_error.305 if the JSON value is not an object or null; in that
    cases, using the [] operator with a key makes no sense.

    @complexity Logarithmic in the size of the container.

    @liveexample{The example below shows how object elements can be read and
    written using the `[]` operator.,operatorarray__key_type}

    @sa see @ref at(const typename object_t::key_type&) for access by reference
    with range checking
    @sa see @ref value() for access by value with a default value

    @since version 1.1.0
    ','line_number':20812,'multiline':True]['text':' implicitly convert null to object','line_number':20843,'multiline':False]['text':' at only works for objects','line_number':20851,'multiline':False]['text':'!
    @brief read-only access specified object element

    Returns a const reference to the element at with specified key @a key. No
    bounds checking is performed.

    @warning If the element with key @a key does not exist, the behavior is
    undefined.

    @param[in] key  key of the element to access

    @return const reference to the element at key @a key

    @pre The element with key @a key must exist. **This precondition is
         enforced with an assertion.**

    @throw type_error.305 if the JSON value is not an object; in that case,
    using the [] operator with a key makes no sense.

    @complexity Logarithmic in the size of the container.

    @liveexample{The example below shows how object elements can be read using
    the `[]` operator.,operatorarray__key_type_const}

    @sa see @ref at(const typename object_t::key_type&) for access by reference
    with range checking
    @sa see @ref value() for access by value with a default value

    @since version 1.1.0
    ','line_number':20860,'multiline':True]['text':' at only works for objects','line_number':20894,'multiline':False]['text':'!
    @brief access specified object element with default value

    Returns either a copy of an object's element at the specified key @a key
    or a given default value if no element with key @a key exists.

    The function is basically equivalent to executing
    @code {.cpp}
    try {
        return at(key);
    } catch(out_of_range) {
        return default_value;
    }
    @endcode

    @note Unlike @ref at(const typename object_t::key_type&), this function
    does not throw if the given key @a key was not found.

    @note Unlike @ref operator[](const typename object_t::key_type& key), this
    function does not implicitly add an element to the position defined by @a
    key. This function is furthermore also applicable to const objects.

    @param[in] key  key of the element to access
    @param[in] default_value  the value to return if @a key is not found

    @tparam ValueType type compatible to JSON values, for instance `int` for
    JSON integer numbers, `bool` for JSON booleans, or `std::vector` types for
    JSON arrays. Note the type of the expected value at @a key and the default
    value @a default_value must be compatible.

    @return copy of the element at key @a key or @a default_value if @a key
    is not found

    @throw type_error.302 if @a default_value does not match the type of the
    value at @a key
    @throw type_error.306 if the JSON value is not an object; in that case,
    using `value()` with a key makes no sense.

    @complexity Logarithmic in the size of the container.

    @liveexample{The example below shows how object elements can be queried
    with a default value.,basic_json__value}

    @sa see @ref at(const typename object_t::key_type&) for access by reference
    with range checking
    @sa see @ref operator[](const typename object_t::key_type&) for unchecked
    access by reference

    @since version 1.0.0
    ','line_number':20904,'multiline':True]['text':' using std::is_convertible in a std::enable_if will fail when using explicit conversions','line_number':20954,'multiline':False]['text':' at only works for objects','line_number':20960,'multiline':False]['text':' if key is found, return value and given default value otherwise','line_number':20963,'multiline':False]['text':'!
    @brief overload for a default value of type const char*
    @copydoc basic_json::value(const typename object_t::key_type&, const ValueType&) const
    ','line_number':20976,'multiline':True]['text':'!
    @brief access specified object element via JSON Pointer with default value

    Returns either a copy of an object's element at the specified key @a key
    or a given default value if no element with key @a key exists.

    The function is basically equivalent to executing
    @code {.cpp}
    try {
        return at(ptr);
    } catch(out_of_range) {
        return default_value;
    }
    @endcode

    @note Unlike @ref at(const json_pointer&), this function does not throw
    if the given key @a key was not found.

    @param[in] ptr  a JSON pointer to the element to access
    @param[in] default_value  the value to return if @a ptr found no value

    @tparam ValueType type compatible to JSON values, for instance `int` for
    JSON integer numbers, `bool` for JSON booleans, or `std::vector` types for
    JSON arrays. Note the type of the expected value at @a key and the default
    value @a default_value must be compatible.

    @return copy of the element at key @a key or @a default_value if @a key
    is not found

    @throw type_error.302 if @a default_value does not match the type of the
    value at @a ptr
    @throw type_error.306 if the JSON value is not an object; in that case,
    using `value()` with a key makes no sense.

    @complexity Logarithmic in the size of the container.

    @liveexample{The example below shows how object elements can be queried
    with a default value.,basic_json__value_ptr}

    @sa see @ref operator[](const json_pointer&) for unchecked access by reference

    @since version 2.0.2
    ','line_number':20985,'multiline':True]['text':' at only works for objects','line_number':21032,'multiline':False]['text':' if pointer resolves a value, return it or use default value','line_number':21035,'multiline':False]['text':'!
    @brief overload for a default value of type const char*
    @copydoc basic_json::value(const json_pointer&, ValueType) const
    ','line_number':21049,'multiline':True]['text':'!
    @brief access the first element

    Returns a reference to the first element in the container. For a JSON
    container `c`, the expression `c.front()` is equivalent to `*c.begin()`.

    @return In case of a structured type (array or object), a reference to the
    first element is returned. In case of number, string, boolean, or binary
    values, a reference to the value is returned.

    @complexity Constant.

    @pre The JSON value must not be `null` (would throw `std::out_of_range`)
    or an empty array or object (undefined behavior, **guarded by
    assertions**).
    @post The JSON value remains unchanged.

    @throw invalid_iterator.214 when called on `null` value

    @liveexample{The following code shows an example for `front()`.,front}

    @sa see @ref back() -- access the last element

    @since version 1.0.0
    ','line_number':21059,'multiline':True]['text':'!
    @copydoc basic_json::front()
    ','line_number':21089,'multiline':True]['text':'!
    @brief access the last element

    Returns a reference to the last element in the container. For a JSON
    container `c`, the expression `c.back()` is equivalent to
    @code {.cpp}
    auto tmp = c.end();
    --tmp;
    return *tmp;
    @endcode

    @return In case of a structured type (array or object), a reference to the
    last element is returned. In case of number, string, boolean, or binary
    values, a reference to the value is returned.

    @complexity Constant.

    @pre The JSON value must not be `null` (would throw `std::out_of_range`)
    or an empty array or object (undefined behavior, **guarded by
    assertions**).
    @post The JSON value remains unchanged.

    @throw invalid_iterator.214 when called on a `null` value. See example
    below.

    @liveexample{The following code shows an example for `back()`.,back}

    @sa see @ref front() -- access the first element

    @since version 1.0.0
    ','line_number':21097,'multiline':True]['text':'!
    @copydoc basic_json::back()
    ','line_number':21135,'multiline':True]['text':'!
    @brief remove element given an iterator

    Removes the element specified by iterator @a pos. The iterator @a pos must
    be valid and dereferenceable. Thus the `end()` iterator (which is valid,
    but is not dereferenceable) cannot be used as a value for @a pos.

    If called on a primitive type other than `null`, the resulting JSON value
    will be `null`.

    @param[in] pos iterator to the element to remove
    @return Iterator following the last removed element. If the iterator @a
    pos refers to the last element, the `end()` iterator is returned.

    @tparam IteratorType an @ref iterator or @ref const_iterator

    @post Invalidates iterators and references at or after the point of the
    erase, including the `end()` iterator.

    @throw type_error.307 if called on a `null` value; example: `"cannot use
    erase() with null"`
    @throw invalid_iterator.202 if called on an iterator which does not belong
    to the current JSON value; example: `"iterator does not fit current
    value"`
    @throw invalid_iterator.205 if called on a primitive type with invalid
    iterator (i.e., any iterator which is not `begin()`); example: `"iterator
    out of range"`

    @complexity The complexity depends on the type:
    - objects: amortized constant
    - arrays: linear in distance between @a pos and the end of the container
    - strings and binary: linear in the length of the member
    - other types: constant

    @liveexample{The example shows the result of `erase()` for different JSON
    types.,erase__IteratorType}

    @sa see @ref erase(IteratorType, IteratorType) -- removes the elements in
    the given range
    @sa see @ref erase(const typename object_t::key_type&) -- removes the element
    from an object at the given key
    @sa see @ref erase(const size_type) -- removes the element from an array at
    the given index

    @since version 1.0.0
    ','line_number':21145,'multiline':True]['text':' make sure iterator fits the current value','line_number':21197,'multiline':False]['text':'!
    @brief remove elements given an iterator range

    Removes the element specified by the range `[first; last)`. The iterator
    @a first does not need to be dereferenceable if `first == last`: erasing
    an empty range is a no-op.

    If called on a primitive type other than `null`, the resulting JSON value
    will be `null`.

    @param[in] first iterator to the beginning of the range to remove
    @param[in] last iterator past the end of the range to remove
    @return Iterator following the last removed element. If the iterator @a
    second refers to the last element, the `end()` iterator is returned.

    @tparam IteratorType an @ref iterator or @ref const_iterator

    @post Invalidates iterators and references at or after the point of the
    erase, including the `end()` iterator.

    @throw type_error.307 if called on a `null` value; example: `"cannot use
    erase() with null"`
    @throw invalid_iterator.203 if called on iterators which does not belong
    to the current JSON value; example: `"iterators do not fit current value"`
    @throw invalid_iterator.204 if called on a primitive type with invalid
    iterators (i.e., if `first != begin()` and `last != end()`); example:
    `"iterators out of range"`

    @complexity The complexity depends on the type:
    - objects: `log(size()) + std::distance(first, last)`
    - arrays: linear in the distance between @a first and @a last, plus linear
      in the distance between @a last and end of the container
    - strings and binary: linear in the length of the member
    - other types: constant

    @liveexample{The example shows the result of `erase()` for different JSON
    types.,erase__IteratorType_IteratorType}

    @sa see @ref erase(IteratorType) -- removes the element at a given position
    @sa see @ref erase(const typename object_t::key_type&) -- removes the element
    from an object at the given key
    @sa see @ref erase(const size_type) -- removes the element from an array at
    the given index

    @since version 1.0.0
    ','line_number':21258,'multiline':True]['text':' make sure iterator fits the current value','line_number':21310,'multiline':False]['text':'!
    @brief remove element from a JSON object given a key

    Removes elements from a JSON object with the key value @a key.

    @param[in] key value of the elements to remove

    @return Number of elements removed. If @a ObjectType is the default
    `std::map` type, the return value will always be `0` (@a key was not
    found) or `1` (@a key was found).

    @post References and iterators to the erased elements are invalidated.
    Other references and iterators are not affected.

    @throw type_error.307 when called on a type other than JSON object;
    example: `"cannot use erase() with null"`

    @complexity `log(size()) + count(key)`

    @liveexample{The example shows the effect of `erase()`.,erase__key_type}

    @sa see @ref erase(IteratorType) -- removes the element at a given position
    @sa see @ref erase(IteratorType, IteratorType) -- removes the elements in
    the given range
    @sa see @ref erase(const size_type) -- removes the element from an array at
    the given index

    @since version 1.0.0
    ','line_number':21374,'multiline':True]['text':' this erase only works for objects','line_number':21405,'multiline':False]['text':'!
    @brief remove element from a JSON array given an index

    Removes element from a JSON array at the index @a idx.

    @param[in] idx index of the element to remove

    @throw type_error.307 when called on a type other than JSON object;
    example: `"cannot use erase() with null"`
    @throw out_of_range.401 when `idx >= size()`; example: `"array index 17
    is out of range"`

    @complexity Linear in distance between @a idx and the end of the container.

    @liveexample{The example shows the effect of `erase()`.,erase__size_type}

    @sa see @ref erase(IteratorType) -- removes the element at a given position
    @sa see @ref erase(IteratorType, IteratorType) -- removes the elements in
    the given range
    @sa see @ref erase(const typename object_t::key_type&) -- removes the element
    from an object at the given key

    @since version 1.0.0
    ','line_number':21414,'multiline':True]['text':' this erase only works for arrays','line_number':21440,'multiline':False]['text':'/ @}','line_number':21456,'multiline':False]['text':'//////////','line_number':21459,'multiline':False]['text':' lookup //','line_number':21460,'multiline':False]['text':'//////////','line_number':21461,'multiline':False]['text':'/ @name lookup','line_number':21463,'multiline':False]['text':'/ @{','line_number':21464,'multiline':False]['text':'!
    @brief find an element in a JSON object

    Finds an element in a JSON object with key equivalent to @a key. If the
    element is not found or the JSON value is not an object, end() is
    returned.

    @note This method always returns @ref end() when executed on a JSON type
          that is not an object.

    @param[in] key key value of the element to search for.

    @return Iterator to an element with key equivalent to @a key. If no such
    element is found or the JSON value is not an object, past-the-end (see
    @ref end()) iterator is returned.

    @complexity Logarithmic in the size of the JSON object.

    @liveexample{The example shows how `find()` is used.,find__key_type}

    @sa see @ref contains(KeyT&&) const -- checks whether a key exists

    @since version 1.0.0
    ','line_number':21466,'multiline':True]['text':'!
    @brief find an element in a JSON object
    @copydoc find(KeyT&&)
    ','line_number':21503,'multiline':True]['text':'!
    @brief returns the number of occurrences of a key in a JSON object

    Returns the number of elements with key @a key. If ObjectType is the
    default `std::map` type, the return value will always be `0` (@a key was
    not found) or `1` (@a key was found).

    @note This method always returns `0` when executed on a JSON type that is
          not an object.

    @param[in] key key value of the element to count

    @return Number of elements with key @a key. If the JSON value is not an
    object, the return value will be `0`.

    @complexity Logarithmic in the size of the JSON object.

    @liveexample{The example shows how `count()` is used.,count}

    @since version 1.0.0
    ','line_number':21520,'multiline':True]['text':' return 0 for all nonobject types','line_number':21544,'multiline':False]['text':'!
    @brief check the existence of an element in a JSON object

    Check whether an element exists in a JSON object with key equivalent to
    @a key. If the element is not found or the JSON value is not an object,
    false is returned.

    @note This method always returns false when executed on a JSON type
          that is not an object.

    @param[in] key key value to check its existence.

    @return true if an element with specified @a key exists. If no such
    element with such key is found or the JSON value is not an object,
    false is returned.

    @complexity Logarithmic in the size of the JSON object.

    @liveexample{The following code shows an example for `contains()`.,contains}

    @sa see @ref find(KeyT&&) -- returns an iterator to an object element
    @sa see @ref contains(const json_pointer&) const -- checks the existence for a JSON pointer

    @since version 3.6.0
    ','line_number':21548,'multiline':True]['text':'!
    @brief check the existence of an element in a JSON object given a JSON pointer

    Check whether the given JSON pointer @a ptr can be resolved in the current
    JSON value.

    @note This method can be executed on any JSON value type.

    @param[in] ptr JSON pointer to check its existence.

    @return true if the JSON pointer can be resolved to a stored value, false
    otherwise.

    @post If `j.contains(ptr)` returns true, it is safe to call `j[ptr]`.

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number

    @complexity Logarithmic in the size of the JSON object.

    @liveexample{The following code shows an example for `contains()`.,contains_json_pointer}

    @sa see @ref contains(KeyT &&) const -- checks the existence of a key

    @since version 3.7.0
    ','line_number':21580,'multiline':True]['text':'/ @}','line_number':21611,'multiline':False]['text':'/////////////','line_number':21614,'multiline':False]['text':' iterators //','line_number':21615,'multiline':False]['text':'/////////////','line_number':21616,'multiline':False]['text':'/ @name iterators','line_number':21618,'multiline':False]['text':'/ @{','line_number':21619,'multiline':False]['text':'!
    @brief returns an iterator to the first element

    Returns an iterator to the first element.

    @image html range-begin-end.svg "Illustration from cppreference.com"

    @return iterator to the first element

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.

    @liveexample{The following code shows an example for `begin()`.,begin}

    @sa see @ref cbegin() -- returns a const iterator to the beginning
    @sa see @ref end() -- returns an iterator to the end
    @sa see @ref cend() -- returns a const iterator to the end

    @since version 1.0.0
    ','line_number':21621,'multiline':True]['text':'!
    @copydoc basic_json::cbegin()
    ','line_number':21652,'multiline':True]['text':'!
    @brief returns a const iterator to the first element

    Returns a const iterator to the first element.

    @image html range-begin-end.svg "Illustration from cppreference.com"

    @return const iterator to the first element

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.
    - Has the semantics of `const_cast<const basic_json&>(*this).begin()`.

    @liveexample{The following code shows an example for `cbegin()`.,cbegin}

    @sa see @ref begin() -- returns an iterator to the beginning
    @sa see @ref end() -- returns an iterator to the end
    @sa see @ref cend() -- returns a const iterator to the end

    @since version 1.0.0
    ','line_number':21660,'multiline':True]['text':'!
    @brief returns an iterator to one past the last element

    Returns an iterator to one past the last element.

    @image html range-begin-end.svg "Illustration from cppreference.com"

    @return iterator one past the last element

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.

    @liveexample{The following code shows an example for `end()`.,end}

    @sa see @ref cend() -- returns a const iterator to the end
    @sa see @ref begin() -- returns an iterator to the beginning
    @sa see @ref cbegin() -- returns a const iterator to the beginning

    @since version 1.0.0
    ','line_number':21692,'multiline':True]['text':'!
    @copydoc basic_json::cend()
    ','line_number':21723,'multiline':True]['text':'!
    @brief returns a const iterator to one past the last element

    Returns a const iterator to one past the last element.

    @image html range-begin-end.svg "Illustration from cppreference.com"

    @return const iterator one past the last element

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.
    - Has the semantics of `const_cast<const basic_json&>(*this).end()`.

    @liveexample{The following code shows an example for `cend()`.,cend}

    @sa see @ref end() -- returns an iterator to the end
    @sa see @ref begin() -- returns an iterator to the beginning
    @sa see @ref cbegin() -- returns a const iterator to the beginning

    @since version 1.0.0
    ','line_number':21731,'multiline':True]['text':'!
    @brief returns an iterator to the reverse-beginning

    Returns an iterator to the reverse-beginning; that is, the last element.

    @image html range-rbegin-rend.svg "Illustration from cppreference.com"

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
    requirements:
    - The complexity is constant.
    - Has the semantics of `reverse_iterator(end())`.

    @liveexample{The following code shows an example for `rbegin()`.,rbegin}

    @sa see @ref crbegin() -- returns a const reverse iterator to the beginning
    @sa see @ref rend() -- returns a reverse iterator to the end
    @sa see @ref crend() -- returns a const reverse iterator to the end

    @since version 1.0.0
    ','line_number':21763,'multiline':True]['text':'!
    @copydoc basic_json::crbegin()
    ','line_number':21791,'multiline':True]['text':'!
    @brief returns an iterator to the reverse-end

    Returns an iterator to the reverse-end; that is, one before the first
    element.

    @image html range-rbegin-rend.svg "Illustration from cppreference.com"

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
    requirements:
    - The complexity is constant.
    - Has the semantics of `reverse_iterator(begin())`.

    @liveexample{The following code shows an example for `rend()`.,rend}

    @sa see @ref crend() -- returns a const reverse iterator to the end
    @sa see @ref rbegin() -- returns a reverse iterator to the beginning
    @sa see @ref crbegin() -- returns a const reverse iterator to the beginning

    @since version 1.0.0
    ','line_number':21799,'multiline':True]['text':'!
    @copydoc basic_json::crend()
    ','line_number':21828,'multiline':True]['text':'!
    @brief returns a const reverse iterator to the last element

    Returns a const iterator to the reverse-beginning; that is, the last
    element.

    @image html range-rbegin-rend.svg "Illustration from cppreference.com"

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
    requirements:
    - The complexity is constant.
    - Has the semantics of `const_cast<const basic_json&>(*this).rbegin()`.

    @liveexample{The following code shows an example for `crbegin()`.,crbegin}

    @sa see @ref rbegin() -- returns a reverse iterator to the beginning
    @sa see @ref rend() -- returns a reverse iterator to the end
    @sa see @ref crend() -- returns a const reverse iterator to the end

    @since version 1.0.0
    ','line_number':21836,'multiline':True]['text':'!
    @brief returns a const reverse iterator to one before the first

    Returns a const reverse iterator to the reverse-end; that is, one before
    the first element.

    @image html range-rbegin-rend.svg "Illustration from cppreference.com"

    @complexity Constant.

    @requirement This function helps `basic_json` satisfying the
    [ReversibleContainer](https://en.cppreference.com/w/cpp/named_req/ReversibleContainer)
    requirements:
    - The complexity is constant.
    - Has the semantics of `const_cast<const basic_json&>(*this).rend()`.

    @liveexample{The following code shows an example for `crend()`.,crend}

    @sa see @ref rend() -- returns a reverse iterator to the end
    @sa see @ref rbegin() -- returns a reverse iterator to the beginning
    @sa see @ref crbegin() -- returns a const reverse iterator to the beginning

    @since version 1.0.0
    ','line_number':21865,'multiline':True]['text':'!
    @brief wrapper to access iterator member functions in range-based for

    This function allows to access @ref iterator::key() and @ref
    iterator::value() during range-based for loops. In these loops, a
    reference to the JSON values is returned, so there is no access to the
    underlying iterator.

    For loop without iterator_wrapper:

    @code{cpp}
    for (auto it = j_object.begin(); it != j_object.end(); ++it)
    {
        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
    }
    @endcode

    Range-based for loop without iterator proxy:

    @code{cpp}
    for (auto it : j_object)
    {
        // "it" is of type json::reference and has no key() member
        std::cout << "value: " << it << '\n';
    }
    @endcode

    Range-based for loop with iterator proxy:

    @code{cpp}
    for (auto it : json::iterator_wrapper(j_object))
    {
        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
    }
    @endcode

    @note When iterating over an array, `key()` will return the index of the
          element as string (see example).

    @param[in] ref  reference to a JSON value
    @return iteration proxy object wrapping @a ref with an interface to use in
            range-based for loops

    @liveexample{The following code shows how the wrapper is used,iterator_wrapper}

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Constant.

    @note The name of this function is not yet final and may change in the
    future.

    @deprecated This stream operator is deprecated and will be removed in
                future 4.0.0 of the library. Please use @ref items() instead;
                that is, replace `json::iterator_wrapper(j)` with `j.items()`.
    ','line_number':21895,'multiline':True]['text':'!
    @copydoc iterator_wrapper(reference)
    ','line_number':21958,'multiline':True]['text':'!
    @brief helper to access iterator member functions in range-based for

    This function allows to access @ref iterator::key() and @ref
    iterator::value() during range-based for loops. In these loops, a
    reference to the JSON values is returned, so there is no access to the
    underlying iterator.

    For loop without `items()` function:

    @code{cpp}
    for (auto it = j_object.begin(); it != j_object.end(); ++it)
    {
        std::cout << "key: " << it.key() << ", value:" << it.value() << '\n';
    }
    @endcode

    Range-based for loop without `items()` function:

    @code{cpp}
    for (auto it : j_object)
    {
        // "it" is of type json::reference and has no key() member
        std::cout << "value: " << it << '\n';
    }
    @endcode

    Range-based for loop with `items()` function:

    @code{cpp}
    for (auto& el : j_object.items())
    {
        std::cout << "key: " << el.key() << ", value:" << el.value() << '\n';
    }
    @endcode

    The `items()` function also allows to use
    [structured bindings](https://en.cppreference.com/w/cpp/language/structured_binding)
    (C++17):

    @code{cpp}
    for (auto& [key, val] : j_object.items())
    {
        std::cout << "key: " << key << ", value:" << val << '\n';
    }
    @endcode

    @note When iterating over an array, `key()` will return the index of the
          element as string (see example). For primitive types (e.g., numbers),
          `key()` returns an empty string.

    @warning Using `items()` on temporary objects is dangerous. Make sure the
             object's lifetime exeeds the iteration. See
             <https://github.com/nlohmann/json/issues/2040> for more
             information.

    @return iteration proxy object wrapping @a ref with an interface to use in
            range-based for loops

    @liveexample{The following code shows how the function is used.,items}

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Constant.

    @since version 3.1.0, structured bindings support since 3.5.0.
    ','line_number':21967,'multiline':True]['text':'!
    @copydoc items()
    ','line_number':22040,'multiline':True]['text':'/ @}','line_number':22048,'multiline':False]['text':'////////////','line_number':22051,'multiline':False]['text':' capacity //','line_number':22052,'multiline':False]['text':'////////////','line_number':22053,'multiline':False]['text':'/ @name capacity','line_number':22055,'multiline':False]['text':'/ @{','line_number':22056,'multiline':False]['text':'!
    @brief checks whether the container is empty.

    Checks if a JSON value has no elements (i.e. whether its @ref size is `0`).

    @return The return value depends on the different types and is
            defined as follows:
            Value type  | return value
            ----------- | -------------
            null        | `true`
            boolean     | `false`
            string      | `false`
            number      | `false`
            binary      | `false`
            object      | result of function `object_t::empty()`
            array       | result of function `array_t::empty()`

    @liveexample{The following code uses `empty()` to check if a JSON
    object contains any elements.,empty}

    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
    the Container concept; that is, their `empty()` functions have constant
    complexity.

    @iterators No changes.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @note This function does not return whether a string stored as JSON value
    is empty - it returns whether the JSON container itself is empty which is
    false in the case of a string.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.
    - Has the semantics of `begin() == end()`.

    @sa see @ref size() -- returns the number of elements

    @since version 1.0.0
    ','line_number':22058,'multiline':True]['text':' null values are empty','line_number':22106,'multiline':False]['text':' delegate call to array_t::empty()','line_number':22112,'multiline':False]['text':' delegate call to object_t::empty()','line_number':22118,'multiline':False]['text':' all other types are nonempty','line_number':22124,'multiline':False]['text':'!
    @brief returns the number of elements

    Returns the number of elements in a JSON value.

    @return The return value depends on the different types and is
            defined as follows:
            Value type  | return value
            ----------- | -------------
            null        | `0`
            boolean     | `1`
            string      | `1`
            number      | `1`
            binary      | `1`
            object      | result of function object_t::size()
            array       | result of function array_t::size()

    @liveexample{The following code calls `size()` on the different value
    types.,size}

    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
    the Container concept; that is, their size() functions have constant
    complexity.

    @iterators No changes.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @note This function does not return the length of a string stored as JSON
    value - it returns the number of elements in the JSON value which is 1 in
    the case of a string.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.
    - Has the semantics of `std::distance(begin(), end())`.

    @sa see @ref empty() -- checks whether the container is empty
    @sa see @ref max_size() -- returns the maximal number of elements

    @since version 1.0.0
    ','line_number':22130,'multiline':True]['text':' null values are empty','line_number':22179,'multiline':False]['text':' delegate call to array_t::size()','line_number':22185,'multiline':False]['text':' delegate call to object_t::size()','line_number':22191,'multiline':False]['text':' all other types have size 1','line_number':22197,'multiline':False]['text':'!
    @brief returns the maximum possible number of elements

    Returns the maximum number of elements a JSON value is able to hold due to
    system or library implementation limitations, i.e. `std::distance(begin(),
    end())` for the JSON value.

    @return The return value depends on the different types and is
            defined as follows:
            Value type  | return value
            ----------- | -------------
            null        | `0` (same as `size()`)
            boolean     | `1` (same as `size()`)
            string      | `1` (same as `size()`)
            number      | `1` (same as `size()`)
            binary      | `1` (same as `size()`)
            object      | result of function `object_t::max_size()`
            array       | result of function `array_t::max_size()`

    @liveexample{The following code calls `max_size()` on the different value
    types. Note the output is implementation specific.,max_size}

    @complexity Constant, as long as @ref array_t and @ref object_t satisfy
    the Container concept; that is, their `max_size()` functions have constant
    complexity.

    @iterators No changes.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @requirement This function helps `basic_json` satisfying the
    [Container](https://en.cppreference.com/w/cpp/named_req/Container)
    requirements:
    - The complexity is constant.
    - Has the semantics of returning `b.size()` where `b` is the largest
      possible JSON value.

    @sa see @ref size() -- returns the number of elements

    @since version 1.0.0
    ','line_number':22203,'multiline':True]['text':' delegate call to array_t::max_size()','line_number':22250,'multiline':False]['text':' delegate call to object_t::max_size()','line_number':22256,'multiline':False]['text':' all other types have max_size() == size()','line_number':22262,'multiline':False]['text':'/ @}','line_number':22268,'multiline':False]['text':'/////////////','line_number':22271,'multiline':False]['text':' modifiers //','line_number':22272,'multiline':False]['text':'/////////////','line_number':22273,'multiline':False]['text':'/ @name modifiers','line_number':22275,'multiline':False]['text':'/ @{','line_number':22276,'multiline':False]['text':'!
    @brief clears the contents

    Clears the content of a JSON value and resets it to the default value as
    if @ref basic_json(value_t) would have been called with the current value
    type from @ref type():

    Value type  | initial value
    ----------- | -------------
    null        | `null`
    boolean     | `false`
    string      | `""`
    number      | `0`
    binary      | An empty byte vector
    object      | `{}`
    array       | `[]`

    @post Has the same effect as calling
    @code {.cpp}
    *this = basic_json(type());
    @endcode

    @liveexample{The example below shows the effect of `clear()` to different
    JSON types.,clear}

    @complexity Linear in the size of the JSON value.

    @iterators All iterators, pointers and references related to this container
               are invalidated.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @sa see @ref basic_json(value_t) -- constructor that creates an object with the
        same value than calling `clear()`

    @since version 1.0.0
    ','line_number':22278,'multiline':True]['text':'!
    @brief add an object to an array

    Appends the given element @a val to the end of the JSON value. If the
    function is called on a JSON null value, an empty array is created before
    appending @a val.

    @param[in] val the value to add to the JSON array

    @throw type_error.308 when called on a type other than JSON array or
    null; example: `"cannot use push_back() with number"`

    @complexity Amortized constant.

    @liveexample{The example shows how `push_back()` and `+=` can be used to
    add elements to a JSON array. Note how the `null` value was silently
    converted to a JSON array.,push_back}

    @since version 1.0.0
    ','line_number':22372,'multiline':True]['text':' push_back only works for null objects or arrays','line_number':22394,'multiline':False]['text':' transform null object into an array','line_number':22400,'multiline':False]['text':' add element to array (move semantics)','line_number':22408,'multiline':False]['text':' if val is moved from, basic_json move constructor marks it null so we do not call the destructor','line_number':22411,'multiline':False]['text':'!
    @brief add an object to an array
    @copydoc push_back(basic_json&&)
    ','line_number':22414,'multiline':True]['text':'!
    @brief add an object to an array
    @copydoc push_back(basic_json&&)
    ','line_number':22424,'multiline':True]['text':' push_back only works for null objects or arrays','line_number':22430,'multiline':False]['text':' transform null object into an array','line_number':22436,'multiline':False]['text':' add element to array','line_number':22444,'multiline':False]['text':'!
    @brief add an object to an array
    @copydoc push_back(basic_json&&)
    ','line_number':22449,'multiline':True]['text':'!
    @brief add an object to an object

    Inserts the given element @a val to the JSON object. If the function is
    called on a JSON null value, an empty object is created before inserting
    @a val.

    @param[in] val the value to add to the JSON object

    @throw type_error.308 when called on a type other than JSON object or
    null; example: `"cannot use push_back() with number"`

    @complexity Logarithmic in the size of the container, O(log(`size()`)).

    @liveexample{The example shows how `push_back()` and `+=` can be used to
    add elements to a JSON object. Note how the `null` value was silently
    converted to a JSON object.,push_back__object_t__value}

    @since version 1.0.0
    ','line_number':22459,'multiline':True]['text':' push_back only works for null objects or objects','line_number':22481,'multiline':False]['text':' transform null object into an object','line_number':22487,'multiline':False]['text':' add element to object','line_number':22495,'multiline':False]['text':'!
    @brief add an object to an object
    @copydoc push_back(const typename object_t::value_type&)
    ','line_number':22500,'multiline':True]['text':'!
    @brief add an object to an object

    This function allows to use `push_back` with an initializer list. In case

    1. the current value is an object,
    2. the initializer list @a init contains only two elements, and
    3. the first element of @a init is a string,

    @a init is converted into an object element and added using
    @ref push_back(const typename object_t::value_type&). Otherwise, @a init
    is converted to a JSON value and added using @ref push_back(basic_json&&).

    @param[in] init  an initializer list

    @complexity Linear in the size of the initializer list @a init.

    @note This function is required to resolve an ambiguous overload error,
          because pairs like `{"key", "value"}` can be both interpreted as
          `object_t::value_type` or `std::initializer_list<basic_json>`, see
          https://github.com/nlohmann/json/issues/235 for more information.

    @liveexample{The example shows how initializer lists are treated as
    objects when possible.,push_back__initializer_list}
    ','line_number':22510,'multiline':True]['text':'!
    @brief add an object to an object
    @copydoc push_back(initializer_list_t)
    ','line_number':22549,'multiline':True]['text':'!
    @brief add an object to an array

    Creates a JSON value from the passed parameters @a args to the end of the
    JSON value. If the function is called on a JSON null value, an empty array
    is created before appending the value created from @a args.

    @param[in] args arguments to forward to a constructor of @ref basic_json
    @tparam Args compatible types to create a @ref basic_json object

    @return reference to the inserted element

    @throw type_error.311 when called on a type other than JSON array or
    null; example: `"cannot use emplace_back() with number"`

    @complexity Amortized constant.

    @liveexample{The example shows how `push_back()` can be used to add
    elements to a JSON array. Note how the `null` value was silently converted
    to a JSON array.,emplace_back}

    @since version 2.0.8, returns reference since 3.7.0
    ','line_number':22559,'multiline':True]['text':' emplace_back only works for null objects or arrays','line_number':22585,'multiline':False]['text':' transform null object into an array','line_number':22591,'multiline':False]['text':' add element to array (perfect forwarding)','line_number':22599,'multiline':False]['text':'!
    @brief add an object to an object if key does not exist

    Inserts a new element into a JSON object constructed in-place with the
    given @a args if there is no element with the key in the container. If the
    function is called on a JSON null value, an empty object is created before
    appending the value created from @a args.

    @param[in] args arguments to forward to a constructor of @ref basic_json
    @tparam Args compatible types to create a @ref basic_json object

    @return a pair consisting of an iterator to the inserted element, or the
            already-existing element if no insertion happened, and a bool
            denoting whether the insertion took place.

    @throw type_error.311 when called on a type other than JSON object or
    null; example: `"cannot use emplace() with number"`

    @complexity Logarithmic in the size of the container, O(log(`size()`)).

    @liveexample{The example shows how `emplace()` can be used to add elements
    to a JSON object. Note how the `null` value was silently converted to a
    JSON object. Further note how no value is added if there was already one
    value stored with the same key.,emplace}

    @since version 2.0.8
    ','line_number':22608,'multiline':True]['text':' emplace only works for null objects or arrays','line_number':22638,'multiline':False]['text':' transform null object into an object','line_number':22644,'multiline':False]['text':' add element to array (perfect forwarding)','line_number':22652,'multiline':False]['text':' create result iterator and set iterator to the result of emplace','line_number':22656,'multiline':False]['text':' return pair of iterator and boolean','line_number':22660,'multiline':False]['text':'/ Helper for insertion of an iterator','line_number':22664,'multiline':False]['text':'/ @note: This uses std::distance to support GCC 4.8,','line_number':22665,'multiline':False]['text':'/        see https://github.com/nlohmann/json/pull/1257','line_number':22666,'multiline':False]['text':' This could have been written as:','line_number':22677,'multiline':False]['text':' result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator, cnt, val);','line_number':22678,'multiline':False]['text':' but the return value of insert is missing in GCC 4.8, so it is written this way instead.','line_number':22679,'multiline':False]['text':'!
    @brief inserts element

    Inserts element @a val before iterator @a pos.

    @param[in] pos iterator before which the content will be inserted; may be
    the end() iterator
    @param[in] val element to insert
    @return iterator pointing to the inserted @a val.

    @throw type_error.309 if called on JSON values other than arrays;
    example: `"cannot use insert() with string"`
    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
    example: `"iterator does not fit current value"`

    @complexity Constant plus linear in the distance between @a pos and end of
    the container.

    @liveexample{The example shows how `insert()` is used.,insert}

    @since version 1.0.0
    ','line_number':22684,'multiline':True]['text':' insert only works for arrays','line_number':22708,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22711,'multiline':False]['text':' insert to array and return iterator','line_number':22717,'multiline':False]['text':'!
    @brief inserts element
    @copydoc insert(const_iterator, const basic_json&)
    ','line_number':22724,'multiline':True]['text':'!
    @brief inserts elements

    Inserts @a cnt copies of @a val before iterator @a pos.

    @param[in] pos iterator before which the content will be inserted; may be
    the end() iterator
    @param[in] cnt number of copies of @a val to insert
    @param[in] val element to insert
    @return iterator pointing to the first element inserted, or @a pos if
    `cnt==0`

    @throw type_error.309 if called on JSON values other than arrays; example:
    `"cannot use insert() with string"`
    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
    example: `"iterator does not fit current value"`

    @complexity Linear in @a cnt plus linear in the distance between @a pos
    and end of the container.

    @liveexample{The example shows how `insert()` is used.,insert__count}

    @since version 1.0.0
    ','line_number':22733,'multiline':True]['text':' insert only works for arrays','line_number':22759,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22762,'multiline':False]['text':' insert to array and return iterator','line_number':22768,'multiline':False]['text':'!
    @brief inserts elements

    Inserts elements from range `[first, last)` before iterator @a pos.

    @param[in] pos iterator before which the content will be inserted; may be
    the end() iterator
    @param[in] first begin of the range of elements to insert
    @param[in] last end of the range of elements to insert

    @throw type_error.309 if called on JSON values other than arrays; example:
    `"cannot use insert() with string"`
    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
    example: `"iterator does not fit current value"`
    @throw invalid_iterator.210 if @a first and @a last do not belong to the
    same JSON value; example: `"iterators do not fit"`
    @throw invalid_iterator.211 if @a first or @a last are iterators into
    container for which insert is called; example: `"passed iterators may not
    belong to container"`

    @return iterator pointing to the first element inserted, or @a pos if
    `first==last`

    @complexity Linear in `std::distance(first, last)` plus linear in the
    distance between @a pos and end of the container.

    @liveexample{The example shows how `insert()` is used.,insert__range}

    @since version 1.0.0
    ','line_number':22775,'multiline':True]['text':' insert only works for arrays','line_number':22807,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22813,'multiline':False]['text':' check if range iterators belong to the same JSON object','line_number':22819,'multiline':False]['text':' insert to array and return iterator','line_number':22830,'multiline':False]['text':'!
    @brief inserts elements

    Inserts elements from initializer list @a ilist before iterator @a pos.

    @param[in] pos iterator before which the content will be inserted; may be
    the end() iterator
    @param[in] ilist initializer list to insert the values from

    @throw type_error.309 if called on JSON values other than arrays; example:
    `"cannot use insert() with string"`
    @throw invalid_iterator.202 if @a pos is not an iterator of *this;
    example: `"iterator does not fit current value"`

    @return iterator pointing to the first element inserted, or @a pos if
    `ilist` is empty

    @complexity Linear in `ilist.size()` plus linear in the distance between
    @a pos and end of the container.

    @liveexample{The example shows how `insert()` is used.,insert__ilist}

    @since version 1.0.0
    ','line_number':22834,'multiline':True]['text':' insert only works for arrays','line_number':22860,'multiline':False]['text':' check if iterator pos fits to this JSON value','line_number':22866,'multiline':False]['text':' insert to array and return iterator','line_number':22872,'multiline':False]['text':'!
    @brief inserts elements

    Inserts elements from range `[first, last)`.

    @param[in] first begin of the range of elements to insert
    @param[in] last end of the range of elements to insert

    @throw type_error.309 if called on JSON values other than objects; example:
    `"cannot use insert() with string"`
    @throw invalid_iterator.202 if iterator @a first or @a last does does not
    point to an object; example: `"iterators first and last must point to
    objects"`
    @throw invalid_iterator.210 if @a first and @a last do not belong to the
    same JSON value; example: `"iterators do not fit"`

    @complexity Logarithmic: `O(N*log(size() + N))`, where `N` is the number
    of elements to insert.

    @liveexample{The example shows how `insert()` is used.,insert__range_object}

    @since version 3.0.0
    ','line_number':22876,'multiline':True]['text':' insert only works for objects','line_number':22901,'multiline':False]['text':' check if range iterators belong to the same JSON object','line_number':22907,'multiline':False]['text':' passed iterators must belong to objects','line_number':22913,'multiline':False]['text':'!
    @brief updates a JSON object from another object, overwriting existing keys

    Inserts all values from JSON object @a j and overwrites existing keys.

    @param[in] j  JSON object to read values from

    @throw type_error.312 if called on JSON values other than objects; example:
    `"cannot use update() with string"`

    @complexity O(N*log(size() + N)), where N is the number of elements to
                insert.

    @liveexample{The example shows how `update()` is used.,update}

    @sa https://docs.python.org/3.6/library/stdtypes.html#dict.update

    @since version 3.0.0
    ','line_number':22922,'multiline':True]['text':' implicitly convert null value to an empty object','line_number':22943,'multiline':False]['text':'!
    @brief updates a JSON object from another object, overwriting existing keys

    Inserts all values from from range `[first, last)` and overwrites existing
    keys.

    @param[in] first begin of the range of elements to insert
    @param[in] last end of the range of elements to insert

    @throw type_error.312 if called on JSON values other than objects; example:
    `"cannot use update() with string"`
    @throw invalid_iterator.202 if iterator @a first or @a last does does not
    point to an object; example: `"iterators first and last must point to
    objects"`
    @throw invalid_iterator.210 if @a first and @a last do not belong to the
    same JSON value; example: `"iterators do not fit"`

    @complexity O(N*log(size() + N)), where N is the number of elements to
                insert.

    @liveexample{The example shows how `update()` is used__range.,update}

    @sa https://docs.python.org/3.6/library/stdtypes.html#dict.update

    @since version 3.0.0
    ','line_number':22966,'multiline':True]['text':' implicitly convert null value to an empty object','line_number':22994,'multiline':False]['text':' check if range iterators belong to the same JSON object','line_number':23007,'multiline':False]['text':' passed iterators must belong to objects','line_number':23013,'multiline':False]['text':'!
    @brief exchanges the values

    Exchanges the contents of the JSON value with those of @a other. Does not
    invoke any move, copy, or swap operations on individual elements. All
    iterators and references remain valid. The past-the-end iterator is
    invalidated.

    @param[in,out] other JSON value to exchange the contents with

    @complexity Constant.

    @liveexample{The example below shows how JSON values can be swapped with
    `swap()`.,swap__reference}

    @since version 1.0.0
    ','line_number':23026,'multiline':True]['text':'!
    @brief exchanges the values

    Exchanges the contents of the JSON value from @a left with those of @a right. Does not
    invoke any move, copy, or swap operations on individual elements. All
    iterators and references remain valid. The past-the-end iterator is
    invalidated. implemented as a friend function callable via ADL.

    @param[in,out] left JSON value to exchange the contents with
    @param[in,out] right JSON value to exchange the contents with

    @complexity Constant.

    @liveexample{The example below shows how JSON values can be swapped with
    `swap()`.,swap__reference}

    @since version 1.0.0
    ','line_number':23058,'multiline':True]['text':'!
    @brief exchanges the values

    Exchanges the contents of a JSON array with those of @a other. Does not
    invoke any move, copy, or swap operations on individual elements. All
    iterators and references remain valid. The past-the-end iterator is
    invalidated.

    @param[in,out] other array to exchange the contents with

    @throw type_error.310 when JSON value is not an array; example: `"cannot
    use swap() with string"`

    @complexity Constant.

    @liveexample{The example below shows how arrays can be swapped with
    `swap()`.,swap__array_t}

    @since version 1.0.0
    ','line_number':23086,'multiline':True]['text':' NOLINT(bugprone-exception-escape)','line_number':23106,'multiline':False]['text':' swap only works for arrays','line_number':23108,'multiline':False]['text':'!
    @brief exchanges the values

    Exchanges the contents of a JSON object with those of @a other. Does not
    invoke any move, copy, or swap operations on individual elements. All
    iterators and references remain valid. The past-the-end iterator is
    invalidated.

    @param[in,out] other object to exchange the contents with

    @throw type_error.310 when JSON value is not an object; example:
    `"cannot use swap() with string"`

    @complexity Constant.

    @liveexample{The example below shows how objects can be swapped with
    `swap()`.,swap__object_t}

    @since version 1.0.0
    ','line_number':23119,'multiline':True]['text':' NOLINT(bugprone-exception-escape)','line_number':23139,'multiline':False]['text':' swap only works for objects','line_number':23141,'multiline':False]['text':'!
    @brief exchanges the values

    Exchanges the contents of a JSON string with those of @a other. Does not
    invoke any move, copy, or swap operations on individual elements. All
    iterators and references remain valid. The past-the-end iterator is
    invalidated.

    @param[in,out] other string to exchange the contents with

    @throw type_error.310 when JSON value is not a string; example: `"cannot
    use swap() with boolean"`

    @complexity Constant.

    @liveexample{The example below shows how strings can be swapped with
    `swap()`.,swap__string_t}

    @since version 1.0.0
    ','line_number':23152,'multiline':True]['text':' NOLINT(bugprone-exception-escape)','line_number':23172,'multiline':False]['text':' swap only works for strings','line_number':23174,'multiline':False]['text':'!
    @brief exchanges the values

    Exchanges the contents of a JSON string with those of @a other. Does not
    invoke any move, copy, or swap operations on individual elements. All
    iterators and references remain valid. The past-the-end iterator is
    invalidated.

    @param[in,out] other binary to exchange the contents with

    @throw type_error.310 when JSON value is not a string; example: `"cannot
    use swap() with boolean"`

    @complexity Constant.

    @liveexample{The example below shows how strings can be swapped with
    `swap()`.,swap__binary_t}

    @since version 3.8.0
    ','line_number':23185,'multiline':True]['text':' NOLINT(bugprone-exception-escape)','line_number':23205,'multiline':False]['text':' swap only works for strings','line_number':23207,'multiline':False]['text':'/ @copydoc swap(binary_t&)','line_number':23218,'multiline':False]['text':' NOLINT(bugprone-exception-escape)','line_number':23219,'multiline':False]['text':' swap only works for strings','line_number':23221,'multiline':False]['text':'/ @}','line_number':23232,'multiline':False]['text':'////////////////////////////////////////','line_number':23235,'multiline':False]['text':' lexicographical comparison operators //','line_number':23236,'multiline':False]['text':'////////////////////////////////////////','line_number':23237,'multiline':False]['text':'/ @name lexicographical comparison operators','line_number':23239,'multiline':False]['text':'/ @{','line_number':23240,'multiline':False]['text':'!
    @brief comparison: equal

    Compares two JSON values for equality according to the following rules:
    - Two JSON values are equal if (1) they are from the same type and (2)
      their stored values are the same according to their respective
      `operator==`.
    - Integer and floating-point numbers are automatically converted before
      comparison. Note that two NaN values are always treated as unequal.
    - Two JSON null values are equal.

    @note Floating-point inside JSON values numbers are compared with
    `json::number_float_t::operator==` which is `double::operator==` by
    default. To compare floating-point while respecting an epsilon, an alternative
    [comparison function](https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39)
    could be used, for instance
    @code {.cpp}
    template<typename T, typename = typename std::enable_if<std::is_floating_point<T>::value, T>::type>
    inline bool is_same(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept
    {
        return std::abs(a - b) <= epsilon;
    }
    @endcode
    Or you can self-defined operator equal function like this:
    @code {.cpp}
    bool my_equal(const_reference lhs, const_reference rhs) {
    const auto lhs_type lhs.type();
    const auto rhs_type rhs.type();
    if (lhs_type == rhs_type) {
        switch(lhs_type)
            // self_defined case
            case value_t::number_float:
                return std::abs(lhs - rhs) <= std::numeric_limits<float>::epsilon();
            // other cases remain the same with the original
            ...
    }
    ...
    }
    @endcode

    @note NaN values never compare equal to themselves or to other NaN values.

    @param[in] lhs  first JSON value to consider
    @param[in] rhs  second JSON value to consider
    @return whether the values @a lhs and @a rhs are equal

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @complexity Linear.

    @liveexample{The example demonstrates comparing several JSON
    types.,operator__equal}

    @since version 1.0.0
    ','line_number':23242,'multiline':True]['text':'!
    @brief comparison: equal
    @copydoc operator==(const_reference, const_reference)
    ','line_number':23365,'multiline':True]['text':'!
    @brief comparison: equal
    @copydoc operator==(const_reference, const_reference)
    ','line_number':23376,'multiline':True]['text':'!
    @brief comparison: not equal

    Compares two JSON values for inequality by calculating `not (lhs == rhs)`.

    @param[in] lhs  first JSON value to consider
    @param[in] rhs  second JSON value to consider
    @return whether the values @a lhs and @a rhs are not equal

    @complexity Linear.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @liveexample{The example demonstrates comparing several JSON
    types.,operator__notequal}

    @since version 1.0.0
    ','line_number':23387,'multiline':True]['text':'!
    @brief comparison: not equal
    @copydoc operator!=(const_reference, const_reference)
    ','line_number':23410,'multiline':True]['text':'!
    @brief comparison: not equal
    @copydoc operator!=(const_reference, const_reference)
    ','line_number':23421,'multiline':True]['text':'!
    @brief comparison: less than

    Compares whether one JSON value @a lhs is less than another JSON value @a
    rhs according to the following rules:
    - If @a lhs and @a rhs have the same type, the values are compared using
      the default `<` operator.
    - Integer and floating-point numbers are automatically converted before
      comparison
    - In case @a lhs and @a rhs have different types, the values are ignored
      and the order of the types is considered, see
      @ref operator<(const value_t, const value_t).

    @param[in] lhs  first JSON value to consider
    @param[in] rhs  second JSON value to consider
    @return whether @a lhs is less than @a rhs

    @complexity Linear.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @liveexample{The example demonstrates comparing several JSON
    types.,operator__less}

    @since version 1.0.0
    ','line_number':23432,'multiline':True]['text':' note parentheses are necessary, see','line_number':23468,'multiline':False]['text':' https://github.com/nlohmann/json/issues/1530','line_number':23469,'multiline':False]['text':' We only reach this line if we cannot compare values. In that case,','line_number':23525,'multiline':False]['text':' we compare types. Note we have to call the operator explicitly,','line_number':23526,'multiline':False]['text':' because MSVC has problems otherwise.','line_number':23527,'multiline':False]['text':'!
    @brief comparison: less than
    @copydoc operator<(const_reference, const_reference)
    ','line_number':23531,'multiline':True]['text':'!
    @brief comparison: less than
    @copydoc operator<(const_reference, const_reference)
    ','line_number':23542,'multiline':True]['text':'!
    @brief comparison: less than or equal

    Compares whether one JSON value @a lhs is less than or equal to another
    JSON value by calculating `not (rhs < lhs)`.

    @param[in] lhs  first JSON value to consider
    @param[in] rhs  second JSON value to consider
    @return whether @a lhs is less than or equal to @a rhs

    @complexity Linear.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @liveexample{The example demonstrates comparing several JSON
    types.,operator__greater}

    @since version 1.0.0
    ','line_number':23553,'multiline':True]['text':'!
    @brief comparison: less than or equal
    @copydoc operator<=(const_reference, const_reference)
    ','line_number':23577,'multiline':True]['text':'!
    @brief comparison: less than or equal
    @copydoc operator<=(const_reference, const_reference)
    ','line_number':23588,'multiline':True]['text':'!
    @brief comparison: greater than

    Compares whether one JSON value @a lhs is greater than another
    JSON value by calculating `not (lhs <= rhs)`.

    @param[in] lhs  first JSON value to consider
    @param[in] rhs  second JSON value to consider
    @return whether @a lhs is greater than to @a rhs

    @complexity Linear.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @liveexample{The example demonstrates comparing several JSON
    types.,operator__lessequal}

    @since version 1.0.0
    ','line_number':23599,'multiline':True]['text':'!
    @brief comparison: greater than
    @copydoc operator>(const_reference, const_reference)
    ','line_number':23623,'multiline':True]['text':'!
    @brief comparison: greater than
    @copydoc operator>(const_reference, const_reference)
    ','line_number':23634,'multiline':True]['text':'!
    @brief comparison: greater than or equal

    Compares whether one JSON value @a lhs is greater than or equal to another
    JSON value by calculating `not (lhs < rhs)`.

    @param[in] lhs  first JSON value to consider
    @param[in] rhs  second JSON value to consider
    @return whether @a lhs is greater than or equal to @a rhs

    @complexity Linear.

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @liveexample{The example demonstrates comparing several JSON
    types.,operator__greaterequal}

    @since version 1.0.0
    ','line_number':23645,'multiline':True]['text':'!
    @brief comparison: greater than or equal
    @copydoc operator>=(const_reference, const_reference)
    ','line_number':23669,'multiline':True]['text':'!
    @brief comparison: greater than or equal
    @copydoc operator>=(const_reference, const_reference)
    ','line_number':23680,'multiline':True]['text':'/ @}','line_number':23691,'multiline':False]['text':'/////////////////','line_number':23693,'multiline':False]['text':' serialization //','line_number':23694,'multiline':False]['text':'/////////////////','line_number':23695,'multiline':False]['text':'/ @name serialization','line_number':23697,'multiline':False]['text':'/ @{','line_number':23698,'multiline':False]['text':'!
    @brief serialize to stream

    Serialize the given JSON value @a j to the output stream @a o. The JSON
    value will be serialized using the @ref dump member function.

    - The indentation of the output can be controlled with the member variable
      `width` of the output stream @a o. For instance, using the manipulator
      `std::setw(4)` on @a o sets the indentation level to `4` and the
      serialization result is the same as calling `dump(4)`.

    - The indentation character can be controlled with the member variable
      `fill` of the output stream @a o. For instance, the manipulator
      `std::setfill('\\t')` sets indentation to use a tab character rather than
      the default space character.

    @param[in,out] o  stream to serialize to
    @param[in] j  JSON value to serialize

    @return the stream @a o

    @throw type_error.316 if a string stored inside the JSON value is not
                          UTF-8 encoded

    @complexity Linear.

    @liveexample{The example below shows the serialization with different
    parameters to `width` to adjust the indentation level.,operator_serialize}

    @since version 1.0.0; indentation character added in version 3.0.0
    ','line_number':23700,'multiline':True]['text':' read width member and use it as indentation parameter if nonzero','line_number':23733,'multiline':False]['text':' reset width to 0 for subsequent calls to this stream','line_number':23737,'multiline':False]['text':' do the actual serialization','line_number':23740,'multiline':False]['text':'!
    @brief serialize to stream
    @deprecated This stream operator is deprecated and will be removed in
                future 4.0.0 of the library. Please use
                @ref operator<<(std::ostream&, const basic_json&)
                instead; that is, replace calls like `j >> o;` with `o << j;`.
    @since version 1.0.0; deprecated since version 3.0.0
    ','line_number':23746,'multiline':True]['text':' JSON_NO_IO','line_number':23759,'multiline':False]['text':'/ @}','line_number':23760,'multiline':False]['text':'///////////////////','line_number':23763,'multiline':False]['text':' deserialization //','line_number':23764,'multiline':False]['text':'///////////////////','line_number':23765,'multiline':False]['text':'/ @name deserialization','line_number':23767,'multiline':False]['text':'/ @{','line_number':23768,'multiline':False]['text':'!
    @brief deserialize from a compatible input

    @tparam InputType A compatible input, for instance
    - an std::istream object
    - a FILE pointer
    - a C-style array of characters
    - a pointer to a null-terminated string of single byte characters
    - an object obj for which begin(obj) and end(obj) produces a valid pair of
      iterators.

    @param[in] i  input to read from
    @param[in] cb  a parser callback function of type @ref parser_callback_t
    which is used to control the deserialization by filtering unwanted values
    (optional)
    @param[in] allow_exceptions  whether to throw exceptions in case of a
    parse error (optional, true by default)
    @param[in] ignore_comments  whether comments should be ignored and treated
    like whitespace (true) or yield a parse error (true); (optional, false by
    default)

    @return deserialized JSON value; in case of a parse error and
            @a allow_exceptions set to `false`, the return value will be
            value_t::discarded.

    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
    of input; expected string literal""`
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails

    @complexity Linear in the length of the input. The parser is a predictive
    LL(1) parser. The complexity can be higher if the parser callback function
    @a cb or reading from the input @a i has a super-linear complexity.

    @note A UTF-8 byte order mark is silently ignored.

    @liveexample{The example below demonstrates the `parse()` function reading
    from an array.,parse__array__parser_callback_t}

    @liveexample{The example below demonstrates the `parse()` function with
    and without callback function.,parse__string__parser_callback_t}

    @liveexample{The example below demonstrates the `parse()` function with
    and without callback function.,parse__istream__parser_callback_t}

    @liveexample{The example below demonstrates the `parse()` function reading
    from a contiguous container.,parse__contiguouscontainer__parser_callback_t}

    @since version 2.0.3 (contiguous containers); version 3.9.0 allowed to
    ignore comments.
    ','line_number':23770,'multiline':True]['text':'!
    @brief deserialize from a pair of character iterators

    The value_type of the iterator must be a integral type with size of 1, 2 or
    4 bytes, which will be interpreted respectively as UTF-8, UTF-16 and UTF-32.

    @param[in] first iterator to start of character range
    @param[in] last  iterator to end of character range
    @param[in] cb  a parser callback function of type @ref parser_callback_t
    which is used to control the deserialization by filtering unwanted values
    (optional)
    @param[in] allow_exceptions  whether to throw exceptions in case of a
    parse error (optional, true by default)
    @param[in] ignore_comments  whether comments should be ignored and treated
    like whitespace (true) or yield a parse error (true); (optional, false by
    default)

    @return deserialized JSON value; in case of a parse error and
            @a allow_exceptions set to `false`, the return value will be
            value_t::discarded.

    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
    of input; expected string literal""`
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails
    ','line_number':23833,'multiline':True]['text':'!
    @brief check if the input is valid JSON

    Unlike the @ref parse(InputType&&, const parser_callback_t,const bool)
    function, this function neither throws an exception in case of invalid JSON
    input (i.e., a parse error) nor creates diagnostic information.

    @tparam InputType A compatible input, for instance
    - an std::istream object
    - a FILE pointer
    - a C-style array of characters
    - a pointer to a null-terminated string of single byte characters
    - an object obj for which begin(obj) and end(obj) produces a valid pair of
      iterators.

    @param[in] i input to read from
    @param[in] ignore_comments  whether comments should be ignored and treated
    like whitespace (true) or yield a parse error (true); (optional, false by
    default)

    @return Whether the input read from @a i is valid JSON.

    @complexity Linear in the length of the input. The parser is a predictive
    LL(1) parser.

    @note A UTF-8 byte order mark is silently ignored.

    @liveexample{The example below demonstrates the `accept()` function reading
    from a string.,accept__string}
    ','line_number':23884,'multiline':True]['text':'!
    @brief generate SAX events

    The SAX event lister must follow the interface of @ref json_sax.

    This function reads from a compatible input. Examples are:
    - an std::istream object
    - a FILE pointer
    - a C-style array of characters
    - a pointer to a null-terminated string of single byte characters
    - an object obj for which begin(obj) and end(obj) produces a valid pair of
      iterators.

    @param[in] i  input to read from
    @param[in,out] sax  SAX event listener
    @param[in] format  the format to parse (JSON, CBOR, MessagePack, or UBJSON)
    @param[in] strict  whether the input has to be consumed completely
    @param[in] ignore_comments  whether comments should be ignored and treated
    like whitespace (true) or yield a parse error (true); (optional, false by
    default); only applies to the JSON file format.

    @return return value of the last processed SAX event

    @throw parse_error.101 if a parse error occurs; example: `""unexpected end
    of input; expected string literal""`
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails

    @complexity Linear in the length of the input. The parser is a predictive
    LL(1) parser. The complexity can be higher if the SAX consumer @a sax has
    a super-linear complexity.

    @note A UTF-8 byte order mark is silently ignored.

    @liveexample{The example below demonstrates the `sax_parse()` function
    reading from string and processing the events with a user-defined SAX
    event consumer.,sax_parse}

    @since version 3.2.0
    ','line_number':23936,'multiline':True]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':24012,'multiline':False]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':24014,'multiline':False]['text':'!
    @brief deserialize from stream
    @deprecated This stream operator is deprecated and will be removed in
                version 4.0.0 of the library. Please use
                @ref operator>>(std::istream&, basic_json&)
                instead; that is, replace calls like `j << i;` with `i >> j;`.
    @since version 1.0.0; deprecated since version 3.0.0
    ','line_number':24018,'multiline':True]['text':'!
    @brief deserialize from stream

    Deserializes an input stream to a JSON value.

    @param[in,out] i  input stream to read a serialized JSON value from
    @param[in,out] j  JSON value to write the deserialized input to

    @throw parse_error.101 in case of an unexpected token
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails

    @complexity Linear in the length of the input. The parser is a predictive
    LL(1) parser.

    @note A UTF-8 byte order mark is silently ignored.

    @liveexample{The example below shows how a JSON value is constructed by
    reading a serialization from a stream.,operator_deserialize}

    @sa parse(std::istream&, const parser_callback_t) for a variant with a
    parser callback function to filter values while parsing

    @since version 1.0.0
    ','line_number':24032,'multiline':True]['text':' JSON_NO_IO','line_number':24062,'multiline':False]['text':'/ @}','line_number':24063,'multiline':False]['text':'/////////////////////////','line_number':24065,'multiline':False]['text':' convenience functions //','line_number':24066,'multiline':False]['text':'/////////////////////////','line_number':24067,'multiline':False]['text':'!
    @brief return the type as string

    Returns the type name as string to be used in error messages - usually to
    indicate that a function was called on a wrong JSON type.

    @return a string representation of a the @a m_type member:
            Value type  | return value
            ----------- | -------------
            null        | `"null"`
            boolean     | `"boolean"`
            string      | `"string"`
            number      | `"number"` (for all number types)
            object      | `"object"`
            array       | `"array"`
            binary      | `"binary"`
            discarded   | `"discarded"`

    @exceptionsafety No-throw guarantee: this function never throws exceptions.

    @complexity Constant.

    @liveexample{The following code exemplifies `type_name()` for all JSON
    types.,type_name}

    @sa see @ref type() -- return the type of the JSON value
    @sa see @ref operator value_t() -- return the type of the JSON value (implicit)

    @since version 1.0.0, public since 2.1.0, `const char*` and `noexcept`
    since 3.0.0
    ','line_number':24069,'multiline':True]['text':'////////////////////','line_number':24128,'multiline':False]['text':' member variables //','line_number':24129,'multiline':False]['text':'////////////////////','line_number':24130,'multiline':False]['text':'/ the type of the current element','line_number':24132,'multiline':False]['text':'/ the value of the current element','line_number':24135,'multiline':False]['text':'/ a pointer to a parent value (for debugging purposes)','line_number':24139,'multiline':False]['text':'////////////////////////////////////////','line_number':24143,'multiline':False]['text':' binary serialization/deserialization //','line_number':24144,'multiline':False]['text':'////////////////////////////////////////','line_number':24145,'multiline':False]['text':'/ @name binary serialization/deserialization support','line_number':24147,'multiline':False]['text':'/ @{','line_number':24148,'multiline':False]['text':'!
    @brief create a CBOR serialization of a given JSON value

    Serializes a given JSON value @a j to a byte vector using the CBOR (Concise
    Binary Object Representation) serialization format. CBOR is a binary
    serialization format which aims to be more compact than JSON itself, yet
    more efficient to parse.

    The library uses the following mapping from JSON values types to
    CBOR types according to the CBOR specification (RFC 7049):

    JSON value type | value/range                                | CBOR type                          | first byte
    --------------- | ------------------------------------------ | ---------------------------------- | ---------------
    null            | `null`                                     | Null                               | 0xF6
    boolean         | `true`                                     | True                               | 0xF5
    boolean         | `false`                                    | False                              | 0xF4
    number_integer  | -9223372036854775808..-2147483649          | Negative integer (8 bytes follow)  | 0x3B
    number_integer  | -2147483648..-32769                        | Negative integer (4 bytes follow)  | 0x3A
    number_integer  | -32768..-129                               | Negative integer (2 bytes follow)  | 0x39
    number_integer  | -128..-25                                  | Negative integer (1 byte follow)   | 0x38
    number_integer  | -24..-1                                    | Negative integer                   | 0x20..0x37
    number_integer  | 0..23                                      | Integer                            | 0x00..0x17
    number_integer  | 24..255                                    | Unsigned integer (1 byte follow)   | 0x18
    number_integer  | 256..65535                                 | Unsigned integer (2 bytes follow)  | 0x19
    number_integer  | 65536..4294967295                          | Unsigned integer (4 bytes follow)  | 0x1A
    number_integer  | 4294967296..18446744073709551615           | Unsigned integer (8 bytes follow)  | 0x1B
    number_unsigned | 0..23                                      | Integer                            | 0x00..0x17
    number_unsigned | 24..255                                    | Unsigned integer (1 byte follow)   | 0x18
    number_unsigned | 256..65535                                 | Unsigned integer (2 bytes follow)  | 0x19
    number_unsigned | 65536..4294967295                          | Unsigned integer (4 bytes follow)  | 0x1A
    number_unsigned | 4294967296..18446744073709551615           | Unsigned integer (8 bytes follow)  | 0x1B
    number_float    | *any value representable by a float*       | Single-Precision Float             | 0xFA
    number_float    | *any value NOT representable by a float*   | Double-Precision Float             | 0xFB
    string          | *length*: 0..23                            | UTF-8 string                       | 0x60..0x77
    string          | *length*: 23..255                          | UTF-8 string (1 byte follow)       | 0x78
    string          | *length*: 256..65535                       | UTF-8 string (2 bytes follow)      | 0x79
    string          | *length*: 65536..4294967295                | UTF-8 string (4 bytes follow)      | 0x7A
    string          | *length*: 4294967296..18446744073709551615 | UTF-8 string (8 bytes follow)      | 0x7B
    array           | *size*: 0..23                              | array                              | 0x80..0x97
    array           | *size*: 23..255                            | array (1 byte follow)              | 0x98
    array           | *size*: 256..65535                         | array (2 bytes follow)             | 0x99
    array           | *size*: 65536..4294967295                  | array (4 bytes follow)             | 0x9A
    array           | *size*: 4294967296..18446744073709551615   | array (8 bytes follow)             | 0x9B
    object          | *size*: 0..23                              | map                                | 0xA0..0xB7
    object          | *size*: 23..255                            | map (1 byte follow)                | 0xB8
    object          | *size*: 256..65535                         | map (2 bytes follow)               | 0xB9
    object          | *size*: 65536..4294967295                  | map (4 bytes follow)               | 0xBA
    object          | *size*: 4294967296..18446744073709551615   | map (8 bytes follow)               | 0xBB
    binary          | *size*: 0..23                              | byte string                        | 0x40..0x57
    binary          | *size*: 23..255                            | byte string (1 byte follow)        | 0x58
    binary          | *size*: 256..65535                         | byte string (2 bytes follow)       | 0x59
    binary          | *size*: 65536..4294967295                  | byte string (4 bytes follow)       | 0x5A
    binary          | *size*: 4294967296..18446744073709551615   | byte string (8 bytes follow)       | 0x5B

    @note The mapping is **complete** in the sense that any JSON value type
          can be converted to a CBOR value.

    @note If NaN or Infinity are stored inside a JSON number, they are
          serialized properly. This behavior differs from the @ref dump()
          function which serializes NaN or Infinity to `null`.

    @note The following CBOR types are not used in the conversion:
          - UTF-8 strings terminated by "break" (0x7F)
          - arrays terminated by "break" (0x9F)
          - maps terminated by "break" (0xBF)
          - byte strings terminated by "break" (0x5F)
          - date/time (0xC0..0xC1)
          - bignum (0xC2..0xC3)
          - decimal fraction (0xC4)
          - bigfloat (0xC5)
          - expected conversions (0xD5..0xD7)
          - simple values (0xE0..0xF3, 0xF8)
          - undefined (0xF7)
          - half-precision floats (0xF9)
          - break (0xFF)

    @param[in] j  JSON value to serialize
    @return CBOR serialization as byte vector

    @complexity Linear in the size of the JSON value @a j.

    @liveexample{The example shows the serialization of a JSON value to a byte
    vector in CBOR format.,to_cbor}

    @sa http://cbor.io
    @sa see @ref from_cbor(InputType&&, const bool, const bool, const cbor_tag_handler_t) for the
        analogous deserialization
    @sa see @ref to_msgpack(const basic_json&) for the related MessagePack format
    @sa see @ref to_ubjson(const basic_json&, const bool, const bool) for the
             related UBJSON format

    @since version 2.0.9; compact representation of floating-point numbers
           since version 3.8.0
    ','line_number':24151,'multiline':True]['text':'!
    @brief create a MessagePack serialization of a given JSON value

    Serializes a given JSON value @a j to a byte vector using the MessagePack
    serialization format. MessagePack is a binary serialization format which
    aims to be more compact than JSON itself, yet more efficient to parse.

    The library uses the following mapping from JSON values types to
    MessagePack types according to the MessagePack specification:

    JSON value type | value/range                       | MessagePack type | first byte
    --------------- | --------------------------------- | ---------------- | ----------
    null            | `null`                            | nil              | 0xC0
    boolean         | `true`                            | true             | 0xC3
    boolean         | `false`                           | false            | 0xC2
    number_integer  | -9223372036854775808..-2147483649 | int64            | 0xD3
    number_integer  | -2147483648..-32769               | int32            | 0xD2
    number_integer  | -32768..-129                      | int16            | 0xD1
    number_integer  | -128..-33                         | int8             | 0xD0
    number_integer  | -32..-1                           | negative fixint  | 0xE0..0xFF
    number_integer  | 0..127                            | positive fixint  | 0x00..0x7F
    number_integer  | 128..255                          | uint 8           | 0xCC
    number_integer  | 256..65535                        | uint 16          | 0xCD
    number_integer  | 65536..4294967295                 | uint 32          | 0xCE
    number_integer  | 4294967296..18446744073709551615  | uint 64          | 0xCF
    number_unsigned | 0..127                            | positive fixint  | 0x00..0x7F
    number_unsigned | 128..255                          | uint 8           | 0xCC
    number_unsigned | 256..65535                        | uint 16          | 0xCD
    number_unsigned | 65536..4294967295                 | uint 32          | 0xCE
    number_unsigned | 4294967296..18446744073709551615  | uint 64          | 0xCF
    number_float    | *any value representable by a float*     | float 32 | 0xCA
    number_float    | *any value NOT representable by a float* | float 64 | 0xCB
    string          | *length*: 0..31                   | fixstr           | 0xA0..0xBF
    string          | *length*: 32..255                 | str 8            | 0xD9
    string          | *length*: 256..65535              | str 16           | 0xDA
    string          | *length*: 65536..4294967295       | str 32           | 0xDB
    array           | *size*: 0..15                     | fixarray         | 0x90..0x9F
    array           | *size*: 16..65535                 | array 16         | 0xDC
    array           | *size*: 65536..4294967295         | array 32         | 0xDD
    object          | *size*: 0..15                     | fix map          | 0x80..0x8F
    object          | *size*: 16..65535                 | map 16           | 0xDE
    object          | *size*: 65536..4294967295         | map 32           | 0xDF
    binary          | *size*: 0..255                    | bin 8            | 0xC4
    binary          | *size*: 256..65535                | bin 16           | 0xC5
    binary          | *size*: 65536..4294967295         | bin 32           | 0xC6

    @note The mapping is **complete** in the sense that any JSON value type
          can be converted to a MessagePack value.

    @note The following values can **not** be converted to a MessagePack value:
          - strings with more than 4294967295 bytes
          - byte strings with more than 4294967295 bytes
          - arrays with more than 4294967295 elements
          - objects with more than 4294967295 elements

    @note Any MessagePack output created @ref to_msgpack can be successfully
          parsed by @ref from_msgpack.

    @note If NaN or Infinity are stored inside a JSON number, they are
          serialized properly. This behavior differs from the @ref dump()
          function which serializes NaN or Infinity to `null`.

    @param[in] j  JSON value to serialize
    @return MessagePack serialization as byte vector

    @complexity Linear in the size of the JSON value @a j.

    @liveexample{The example shows the serialization of a JSON value to a byte
    vector in MessagePack format.,to_msgpack}

    @sa http://msgpack.org
    @sa see @ref from_msgpack for the analogous deserialization
    @sa see @ref to_cbor(const basic_json& for the related CBOR format
    @sa see @ref to_ubjson(const basic_json&, const bool, const bool) for the
             related UBJSON format

    @since version 2.0.9
    ','line_number':24262,'multiline':True]['text':'!
    @brief create a UBJSON serialization of a given JSON value

    Serializes a given JSON value @a j to a byte vector using the UBJSON
    (Universal Binary JSON) serialization format. UBJSON aims to be more compact
    than JSON itself, yet more efficient to parse.

    The library uses the following mapping from JSON values types to
    UBJSON types according to the UBJSON specification:

    JSON value type | value/range                       | UBJSON type | marker
    --------------- | --------------------------------- | ----------- | ------
    null            | `null`                            | null        | `Z`
    boolean         | `true`                            | true        | `T`
    boolean         | `false`                           | false       | `F`
    number_integer  | -9223372036854775808..-2147483649 | int64       | `L`
    number_integer  | -2147483648..-32769               | int32       | `l`
    number_integer  | -32768..-129                      | int16       | `I`
    number_integer  | -128..127                         | int8        | `i`
    number_integer  | 128..255                          | uint8       | `U`
    number_integer  | 256..32767                        | int16       | `I`
    number_integer  | 32768..2147483647                 | int32       | `l`
    number_integer  | 2147483648..9223372036854775807   | int64       | `L`
    number_unsigned | 0..127                            | int8        | `i`
    number_unsigned | 128..255                          | uint8       | `U`
    number_unsigned | 256..32767                        | int16       | `I`
    number_unsigned | 32768..2147483647                 | int32       | `l`
    number_unsigned | 2147483648..9223372036854775807   | int64       | `L`
    number_unsigned | 2147483649..18446744073709551615  | high-precision | `H`
    number_float    | *any value*                       | float64     | `D`
    string          | *with shortest length indicator*  | string      | `S`
    array           | *see notes on optimized format*   | array       | `[`
    object          | *see notes on optimized format*   | map         | `{`

    @note The mapping is **complete** in the sense that any JSON value type
          can be converted to a UBJSON value.

    @note The following values can **not** be converted to a UBJSON value:
          - strings with more than 9223372036854775807 bytes (theoretical)

    @note The following markers are not used in the conversion:
          - `Z`: no-op values are not created.
          - `C`: single-byte strings are serialized with `S` markers.

    @note Any UBJSON output created @ref to_ubjson can be successfully parsed
          by @ref from_ubjson.

    @note If NaN or Infinity are stored inside a JSON number, they are
          serialized properly. This behavior differs from the @ref dump()
          function which serializes NaN or Infinity to `null`.

    @note The optimized formats for containers are supported: Parameter
          @a use_size adds size information to the beginning of a container and
          removes the closing marker. Parameter @a use_type further checks
          whether all elements of a container have the same type and adds the
          type marker to the beginning of the container. The @a use_type
          parameter must only be used together with @a use_size = true. Note
          that @a use_size = true alone may result in larger representations -
          the benefit of this parameter is that the receiving side is
          immediately informed on the number of elements of the container.

    @note If the JSON data contains the binary type, the value stored is a list
          of integers, as suggested by the UBJSON documentation.  In particular,
          this means that serialization and the deserialization of a JSON
          containing binary values into UBJSON and back will result in a
          different JSON object.

    @param[in] j  JSON value to serialize
    @param[in] use_size  whether to add size annotations to container types
    @param[in] use_type  whether to add type annotations to container types
                         (must be combined with @a use_size = true)
    @return UBJSON serialization as byte vector

    @complexity Linear in the size of the JSON value @a j.

    @liveexample{The example shows the serialization of a JSON value to a byte
    vector in UBJSON format.,to_ubjson}

    @sa http://ubjson.org
    @sa see @ref from_ubjson(InputType&&, const bool, const bool) for the
        analogous deserialization
    @sa see @ref to_cbor(const basic_json& for the related CBOR format
    @sa see @ref to_msgpack(const basic_json&) for the related MessagePack format

    @since version 3.1.0
    ','line_number':24357,'multiline':True]['text':'!
    @brief Serializes the given JSON object `j` to BSON and returns a vector
           containing the corresponding BSON-representation.

    BSON (Binary JSON) is a binary format in which zero or more ordered key/value pairs are
    stored as a single entity (a so-called document).

    The library uses the following mapping from JSON values types to BSON types:

    JSON value type | value/range                       | BSON type   | marker
    --------------- | --------------------------------- | ----------- | ------
    null            | `null`                            | null        | 0x0A
    boolean         | `true`, `false`                   | boolean     | 0x08
    number_integer  | -9223372036854775808..-2147483649 | int64       | 0x12
    number_integer  | -2147483648..2147483647           | int32       | 0x10
    number_integer  | 2147483648..9223372036854775807   | int64       | 0x12
    number_unsigned | 0..2147483647                     | int32       | 0x10
    number_unsigned | 2147483648..9223372036854775807   | int64       | 0x12
    number_unsigned | 9223372036854775808..18446744073709551615| --   | --
    number_float    | *any value*                       | double      | 0x01
    string          | *any value*                       | string      | 0x02
    array           | *any value*                       | document    | 0x04
    object          | *any value*                       | document    | 0x03
    binary          | *any value*                       | binary      | 0x05

    @warning The mapping is **incomplete**, since only JSON-objects (and things
    contained therein) can be serialized to BSON.
    Also, integers larger than 9223372036854775807 cannot be serialized to BSON,
    and the keys may not contain U+0000, since they are serialized a
    zero-terminated c-strings.

    @throw out_of_range.407  if `j.is_number_unsigned() && j.get<std::uint64_t>() > 9223372036854775807`
    @throw out_of_range.409  if a key in `j` contains a NULL (U+0000)
    @throw type_error.317    if `!j.is_object()`

    @pre The input `j` is required to be an object: `j.is_object() == true`.

    @note Any BSON output created via @ref to_bson can be successfully parsed
          by @ref from_bson.

    @param[in] j  JSON value to serialize
    @return BSON serialization as byte vector

    @complexity Linear in the size of the JSON value @a j.

    @liveexample{The example shows the serialization of a JSON value to a byte
    vector in BSON format.,to_bson}

    @sa http://bsonspec.org/spec.html
    @sa see @ref from_bson(detail::input_adapter&&, const bool strict) for the
        analogous deserialization
    @sa see @ref to_ubjson(const basic_json&, const bool, const bool) for the
             related UBJSON format
    @sa see @ref to_cbor(const basic_json&) for the related CBOR format
    @sa see @ref to_msgpack(const basic_json&) for the related MessagePack format
    ','line_number':24465,'multiline':True]['text':'!
    @brief Serializes the given JSON object `j` to BSON and forwards the
           corresponding BSON-representation to the given output_adapter `o`.
    @param j The JSON object to convert to BSON.
    @param o The output adapter that receives the binary BSON representation.
    @pre The input `j` shall be an object: `j.is_object() == true`
    @sa see @ref to_bson(const basic_json&)
    ','line_number':24528,'multiline':True]['text':'!
    @copydoc to_bson(const basic_json&, detail::output_adapter<uint8_t>)
    ','line_number':24541,'multiline':True]['text':'!
    @brief create a JSON value from an input in CBOR format

    Deserializes a given input @a i to a JSON value using the CBOR (Concise
    Binary Object Representation) serialization format.

    The library maps CBOR types to JSON value types as follows:

    CBOR type              | JSON value type | first byte
    ---------------------- | --------------- | ----------
    Integer                | number_unsigned | 0x00..0x17
    Unsigned integer       | number_unsigned | 0x18
    Unsigned integer       | number_unsigned | 0x19
    Unsigned integer       | number_unsigned | 0x1A
    Unsigned integer       | number_unsigned | 0x1B
    Negative integer       | number_integer  | 0x20..0x37
    Negative integer       | number_integer  | 0x38
    Negative integer       | number_integer  | 0x39
    Negative integer       | number_integer  | 0x3A
    Negative integer       | number_integer  | 0x3B
    Byte string            | binary          | 0x40..0x57
    Byte string            | binary          | 0x58
    Byte string            | binary          | 0x59
    Byte string            | binary          | 0x5A
    Byte string            | binary          | 0x5B
    UTF-8 string           | string          | 0x60..0x77
    UTF-8 string           | string          | 0x78
    UTF-8 string           | string          | 0x79
    UTF-8 string           | string          | 0x7A
    UTF-8 string           | string          | 0x7B
    UTF-8 string           | string          | 0x7F
    array                  | array           | 0x80..0x97
    array                  | array           | 0x98
    array                  | array           | 0x99
    array                  | array           | 0x9A
    array                  | array           | 0x9B
    array                  | array           | 0x9F
    map                    | object          | 0xA0..0xB7
    map                    | object          | 0xB8
    map                    | object          | 0xB9
    map                    | object          | 0xBA
    map                    | object          | 0xBB
    map                    | object          | 0xBF
    False                  | `false`         | 0xF4
    True                   | `true`          | 0xF5
    Null                   | `null`          | 0xF6
    Half-Precision Float   | number_float    | 0xF9
    Single-Precision Float | number_float    | 0xFA
    Double-Precision Float | number_float    | 0xFB

    @warning The mapping is **incomplete** in the sense that not all CBOR
             types can be converted to a JSON value. The following CBOR types
             are not supported and will yield parse errors (parse_error.112):
             - date/time (0xC0..0xC1)
             - bignum (0xC2..0xC3)
             - decimal fraction (0xC4)
             - bigfloat (0xC5)
             - expected conversions (0xD5..0xD7)
             - simple values (0xE0..0xF3, 0xF8)
             - undefined (0xF7)

    @warning CBOR allows map keys of any type, whereas JSON only allows
             strings as keys in object values. Therefore, CBOR maps with keys
             other than UTF-8 strings are rejected (parse_error.113).

    @note Any CBOR output created @ref to_cbor can be successfully parsed by
          @ref from_cbor.

    @param[in] i  an input in CBOR format convertible to an input adapter
    @param[in] strict  whether to expect the input to be consumed until EOF
                       (true by default)
    @param[in] allow_exceptions  whether to throw exceptions in case of a
    parse error (optional, true by default)
    @param[in] tag_handler how to treat CBOR tags (optional, error by default)

    @return deserialized JSON value; in case of a parse error and
            @a allow_exceptions set to `false`, the return value will be
            value_t::discarded.

    @throw parse_error.110 if the given input ends prematurely or the end of
    file was not reached when @a strict was set to true
    @throw parse_error.112 if unsupported features from CBOR were
    used in the given input @a v or if the input is not valid CBOR
    @throw parse_error.113 if a string was expected as map key, but not found

    @complexity Linear in the size of the input @a i.

    @liveexample{The example shows the deserialization of a byte vector in CBOR
    format to a JSON value.,from_cbor}

    @sa http://cbor.io
    @sa see @ref to_cbor(const basic_json&) for the analogous serialization
    @sa see @ref from_msgpack(InputType&&, const bool, const bool) for the
        related MessagePack format
    @sa see @ref from_ubjson(InputType&&, const bool, const bool) for the
        related UBJSON format

    @since version 2.0.9; parameter @a start_index since 2.1.1; changed to
           consume input adapters, removed start_index parameter, and added
           @a strict parameter since 3.0.0; added @a allow_exceptions parameter
           since 3.2.0; added @a tag_handler parameter since 3.9.0.
    ','line_number':24550,'multiline':True]['text':'!
    @copydoc from_cbor(InputType&&, const bool, const bool, const cbor_tag_handler_t)
    ','line_number':24666,'multiline':True]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':24705,'multiline':False]['text':'!
    @brief create a JSON value from an input in MessagePack format

    Deserializes a given input @a i to a JSON value using the MessagePack
    serialization format.

    The library maps MessagePack types to JSON value types as follows:

    MessagePack type | JSON value type | first byte
    ---------------- | --------------- | ----------
    positive fixint  | number_unsigned | 0x00..0x7F
    fixmap           | object          | 0x80..0x8F
    fixarray         | array           | 0x90..0x9F
    fixstr           | string          | 0xA0..0xBF
    nil              | `null`          | 0xC0
    false            | `false`         | 0xC2
    true             | `true`          | 0xC3
    float 32         | number_float    | 0xCA
    float 64         | number_float    | 0xCB
    uint 8           | number_unsigned | 0xCC
    uint 16          | number_unsigned | 0xCD
    uint 32          | number_unsigned | 0xCE
    uint 64          | number_unsigned | 0xCF
    int 8            | number_integer  | 0xD0
    int 16           | number_integer  | 0xD1
    int 32           | number_integer  | 0xD2
    int 64           | number_integer  | 0xD3
    str 8            | string          | 0xD9
    str 16           | string          | 0xDA
    str 32           | string          | 0xDB
    array 16         | array           | 0xDC
    array 32         | array           | 0xDD
    map 16           | object          | 0xDE
    map 32           | object          | 0xDF
    bin 8            | binary          | 0xC4
    bin 16           | binary          | 0xC5
    bin 32           | binary          | 0xC6
    ext 8            | binary          | 0xC7
    ext 16           | binary          | 0xC8
    ext 32           | binary          | 0xC9
    fixext 1         | binary          | 0xD4
    fixext 2         | binary          | 0xD5
    fixext 4         | binary          | 0xD6
    fixext 8         | binary          | 0xD7
    fixext 16        | binary          | 0xD8
    negative fixint  | number_integer  | 0xE0-0xFF

    @note Any MessagePack output created @ref to_msgpack can be successfully
          parsed by @ref from_msgpack.

    @param[in] i  an input in MessagePack format convertible to an input
                  adapter
    @param[in] strict  whether to expect the input to be consumed until EOF
                       (true by default)
    @param[in] allow_exceptions  whether to throw exceptions in case of a
    parse error (optional, true by default)

    @return deserialized JSON value; in case of a parse error and
            @a allow_exceptions set to `false`, the return value will be
            value_t::discarded.

    @throw parse_error.110 if the given input ends prematurely or the end of
    file was not reached when @a strict was set to true
    @throw parse_error.112 if unsupported features from MessagePack were
    used in the given input @a i or if the input is not valid MessagePack
    @throw parse_error.113 if a string was expected as map key, but not found

    @complexity Linear in the size of the input @a i.

    @liveexample{The example shows the deserialization of a byte vector in
    MessagePack format to a JSON value.,from_msgpack}

    @sa http://msgpack.org
    @sa see @ref to_msgpack(const basic_json&) for the analogous serialization
    @sa see @ref from_cbor(InputType&&, const bool, const bool, const cbor_tag_handler_t) for the
        related CBOR format
    @sa see @ref from_ubjson(InputType&&, const bool, const bool) for
        the related UBJSON format
    @sa see @ref from_bson(InputType&&, const bool, const bool) for
        the related BSON format

    @since version 2.0.9; parameter @a start_index since 2.1.1; changed to
           consume input adapters, removed start_index parameter, and added
           @a strict parameter since 3.0.0; added @a allow_exceptions parameter
           since 3.2.0
    ','line_number':24710,'multiline':True]['text':'!
    @copydoc from_msgpack(InputType&&, const bool, const bool)
    ','line_number':24809,'multiline':True]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':24845,'multiline':False]['text':'!
    @brief create a JSON value from an input in UBJSON format

    Deserializes a given input @a i to a JSON value using the UBJSON (Universal
    Binary JSON) serialization format.

    The library maps UBJSON types to JSON value types as follows:

    UBJSON type | JSON value type                         | marker
    ----------- | --------------------------------------- | ------
    no-op       | *no value, next value is read*          | `N`
    null        | `null`                                  | `Z`
    false       | `false`                                 | `F`
    true        | `true`                                  | `T`
    float32     | number_float                            | `d`
    float64     | number_float                            | `D`
    uint8       | number_unsigned                         | `U`
    int8        | number_integer                          | `i`
    int16       | number_integer                          | `I`
    int32       | number_integer                          | `l`
    int64       | number_integer                          | `L`
    high-precision number | number_integer, number_unsigned, or number_float - depends on number string | 'H'
    string      | string                                  | `S`
    char        | string                                  | `C`
    array       | array (optimized values are supported)  | `[`
    object      | object (optimized values are supported) | `{`

    @note The mapping is **complete** in the sense that any UBJSON value can
          be converted to a JSON value.

    @param[in] i  an input in UBJSON format convertible to an input adapter
    @param[in] strict  whether to expect the input to be consumed until EOF
                       (true by default)
    @param[in] allow_exceptions  whether to throw exceptions in case of a
    parse error (optional, true by default)

    @return deserialized JSON value; in case of a parse error and
            @a allow_exceptions set to `false`, the return value will be
            value_t::discarded.

    @throw parse_error.110 if the given input ends prematurely or the end of
    file was not reached when @a strict was set to true
    @throw parse_error.112 if a parse error occurs
    @throw parse_error.113 if a string could not be parsed successfully

    @complexity Linear in the size of the input @a i.

    @liveexample{The example shows the deserialization of a byte vector in
    UBJSON format to a JSON value.,from_ubjson}

    @sa http://ubjson.org
    @sa see @ref to_ubjson(const basic_json&, const bool, const bool) for the
             analogous serialization
    @sa see @ref from_cbor(InputType&&, const bool, const bool, const cbor_tag_handler_t) for the
        related CBOR format
    @sa see @ref from_msgpack(InputType&&, const bool, const bool) for
        the related MessagePack format
    @sa see @ref from_bson(InputType&&, const bool, const bool) for
        the related BSON format

    @since version 3.1.0; added @a allow_exceptions parameter since 3.2.0
    ','line_number':24851,'multiline':True]['text':'!
    @copydoc from_ubjson(InputType&&, const bool, const bool)
    ','line_number':24926,'multiline':True]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':24961,'multiline':False]['text':'!
    @brief Create a JSON value from an input in BSON format

    Deserializes a given input @a i to a JSON value using the BSON (Binary JSON)
    serialization format.

    The library maps BSON record types to JSON value types as follows:

    BSON type       | BSON marker byte | JSON value type
    --------------- | ---------------- | ---------------------------
    double          | 0x01             | number_float
    string          | 0x02             | string
    document        | 0x03             | object
    array           | 0x04             | array
    binary          | 0x05             | binary
    undefined       | 0x06             | still unsupported
    ObjectId        | 0x07             | still unsupported
    boolean         | 0x08             | boolean
    UTC Date-Time   | 0x09             | still unsupported
    null            | 0x0A             | null
    Regular Expr.   | 0x0B             | still unsupported
    DB Pointer      | 0x0C             | still unsupported
    JavaScript Code | 0x0D             | still unsupported
    Symbol          | 0x0E             | still unsupported
    JavaScript Code | 0x0F             | still unsupported
    int32           | 0x10             | number_integer
    Timestamp       | 0x11             | still unsupported
    128-bit decimal float | 0x13       | still unsupported
    Max Key         | 0x7F             | still unsupported
    Min Key         | 0xFF             | still unsupported

    @warning The mapping is **incomplete**. The unsupported mappings
             are indicated in the table above.

    @param[in] i  an input in BSON format convertible to an input adapter
    @param[in] strict  whether to expect the input to be consumed until EOF
                       (true by default)
    @param[in] allow_exceptions  whether to throw exceptions in case of a
    parse error (optional, true by default)

    @return deserialized JSON value; in case of a parse error and
            @a allow_exceptions set to `false`, the return value will be
            value_t::discarded.

    @throw parse_error.114 if an unsupported BSON record type is encountered

    @complexity Linear in the size of the input @a i.

    @liveexample{The example shows the deserialization of a byte vector in
    BSON format to a JSON value.,from_bson}

    @sa http://bsonspec.org/spec.html
    @sa see @ref to_bson(const basic_json&) for the analogous serialization
    @sa see @ref from_cbor(InputType&&, const bool, const bool, const cbor_tag_handler_t) for the
        related CBOR format
    @sa see @ref from_msgpack(InputType&&, const bool, const bool) for
        the related MessagePack format
    @sa see @ref from_ubjson(InputType&&, const bool, const bool) for the
        related UBJSON format
    ','line_number':24967,'multiline':True]['text':'!
    @copydoc from_bson(InputType&&, const bool, const bool)
    ','line_number':25040,'multiline':True]['text':' NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)','line_number':25075,'multiline':False]['text':'/ @}','line_number':25079,'multiline':False]['text':'////////////////////////','line_number':25081,'multiline':False]['text':' JSON Pointer support //','line_number':25082,'multiline':False]['text':'////////////////////////','line_number':25083,'multiline':False]['text':'/ @name JSON Pointer functions','line_number':25085,'multiline':False]['text':'/ @{','line_number':25086,'multiline':False]['text':'!
    @brief access specified element via JSON Pointer

    Uses a JSON pointer to retrieve a reference to the respective JSON value.
    No bound checking is performed. Similar to @ref operator[](const typename
    object_t::key_type&), `null` values are created in arrays and objects if
    necessary.

    In particular:
    - If the JSON pointer points to an object key that does not exist, it
      is created an filled with a `null` value before a reference to it
      is returned.
    - If the JSON pointer points to an array index that does not exist, it
      is created an filled with a `null` value before a reference to it
      is returned. All indices between the current maximum and the given
      index are also filled with `null`.
    - The special value `-` is treated as a synonym for the index past the
      end.

    @param[in] ptr  a JSON pointer

    @return reference to the element pointed to by @a ptr

    @complexity Constant.

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.404  if the JSON pointer can not be resolved

    @liveexample{The behavior is shown in the example.,operatorjson_pointer}

    @since version 2.0.0
    ','line_number':25088,'multiline':True]['text':'!
    @brief access specified element via JSON Pointer

    Uses a JSON pointer to retrieve a reference to the respective JSON value.
    No bound checking is performed. The function does not change the JSON
    value; no `null` values are created. In particular, the special value
    `-` yields an exception.

    @param[in] ptr  JSON pointer to the desired element

    @return const reference to the element pointed to by @a ptr

    @complexity Constant.

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved

    @liveexample{The behavior is shown in the example.,operatorjson_pointer_const}

    @since version 2.0.0
    ','line_number':25126,'multiline':True]['text':'!
    @brief access specified element via JSON Pointer

    Returns a reference to the element at with specified JSON pointer @a ptr,
    with bounds checking.

    @param[in] ptr  JSON pointer to the desired element

    @return reference to the element pointed to by @a ptr

    @throw parse_error.106 if an array index in the passed JSON pointer @a ptr
    begins with '0'. See example below.

    @throw parse_error.109 if an array index in the passed JSON pointer @a ptr
    is not a number. See example below.

    @throw out_of_range.401 if an array index in the passed JSON pointer @a ptr
    is out of range. See example below.

    @throw out_of_range.402 if the array index '-' is used in the passed JSON
    pointer @a ptr. As `at` provides checked access (and no elements are
    implicitly inserted), the index '-' is always invalid. See example below.

    @throw out_of_range.403 if the JSON pointer describes a key of an object
    which cannot be found. See example below.

    @throw out_of_range.404 if the JSON pointer @a ptr can not be resolved.
    See example below.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Constant.

    @since version 2.0.0

    @liveexample{The behavior is shown in the example.,at_json_pointer}
    ','line_number':25154,'multiline':True]['text':'!
    @brief access specified element via JSON Pointer

    Returns a const reference to the element at with specified JSON pointer @a
    ptr, with bounds checking.

    @param[in] ptr  JSON pointer to the desired element

    @return reference to the element pointed to by @a ptr

    @throw parse_error.106 if an array index in the passed JSON pointer @a ptr
    begins with '0'. See example below.

    @throw parse_error.109 if an array index in the passed JSON pointer @a ptr
    is not a number. See example below.

    @throw out_of_range.401 if an array index in the passed JSON pointer @a ptr
    is out of range. See example below.

    @throw out_of_range.402 if the array index '-' is used in the passed JSON
    pointer @a ptr. As `at` provides checked access (and no elements are
    implicitly inserted), the index '-' is always invalid. See example below.

    @throw out_of_range.403 if the JSON pointer describes a key of an object
    which cannot be found. See example below.

    @throw out_of_range.404 if the JSON pointer @a ptr can not be resolved.
    See example below.

    @exceptionsafety Strong guarantee: if an exception is thrown, there are no
    changes in the JSON value.

    @complexity Constant.

    @since version 2.0.0

    @liveexample{The behavior is shown in the example.,at_json_pointer_const}
    ','line_number':25197,'multiline':True]['text':'!
    @brief return flattened JSON value

    The function creates a JSON object whose keys are JSON pointers (see [RFC
    6901](https://tools.ietf.org/html/rfc6901)) and whose values are all
    primitive. The original JSON value can be restored using the @ref
    unflatten() function.

    @return an object that maps JSON pointers to primitive values

    @note Empty objects and arrays are flattened to `null` and will not be
          reconstructed correctly by the @ref unflatten() function.

    @complexity Linear in the size the JSON value.

    @liveexample{The following code shows how a JSON object is flattened to an
    object whose keys consist of JSON pointers.,flatten}

    @sa see @ref unflatten() for the reverse function

    @since version 2.0.0
    ','line_number':25240,'multiline':True]['text':'!
    @brief unflatten a previously flattened JSON value

    The function restores the arbitrary nesting of a JSON value that has been
    flattened before using the @ref flatten() function. The JSON value must
    meet certain constraints:
    1. The value must be an object.
    2. The keys must be JSON pointers (see
       [RFC 6901](https://tools.ietf.org/html/rfc6901))
    3. The mapped values must be primitive JSON types.

    @return the original JSON from a flattened version

    @note Empty objects and arrays are flattened by @ref flatten() to `null`
          values and can not unflattened to their original type. Apart from
          this example, for a JSON value `j`, the following is always true:
          `j == j.flatten().unflatten()`.

    @complexity Linear in the size the JSON value.

    @throw type_error.314  if value is not an object
    @throw type_error.315  if object values are not primitive

    @liveexample{The following code shows how a flattened JSON object is
    unflattened into the original nested JSON object.,unflatten}

    @sa see @ref flatten() for the reverse function

    @since version 2.0.0
    ','line_number':25269,'multiline':True]['text':'/ @}','line_number':25304,'multiline':False]['text':'////////////////////////','line_number':25306,'multiline':False]['text':' JSON Patch functions //','line_number':25307,'multiline':False]['text':'////////////////////////','line_number':25308,'multiline':False]['text':'/ @name JSON Patch functions','line_number':25310,'multiline':False]['text':'/ @{','line_number':25311,'multiline':False]['text':'!
    @brief applies a JSON patch

    [JSON Patch](http://jsonpatch.com) defines a JSON document structure for
    expressing a sequence of operations to apply to a JSON) document. With
    this function, a JSON Patch is applied to the current JSON value by
    executing all operations from the patch.

    @param[in] json_patch  JSON patch document
    @return patched document

    @note The application of a patch is atomic: Either all operations succeed
          and the patched document is returned or an exception is thrown. In
          any case, the original value is not changed: the patch is applied
          to a copy of the value.

    @throw parse_error.104 if the JSON patch does not consist of an array of
    objects

    @throw parse_error.105 if the JSON patch is malformed (e.g., mandatory
    attributes are missing); example: `"operation add must have member path"`

    @throw out_of_range.401 if an array index is out of range.

    @throw out_of_range.403 if a JSON pointer inside the patch could not be
    resolved successfully in the current JSON value; example: `"key baz not
    found"`

    @throw out_of_range.405 if JSON pointer has no parent ("add", "remove",
    "move")

    @throw other_error.501 if "test" operation was unsuccessful

    @complexity Linear in the size of the JSON value and the length of the
    JSON patch. As usually only a fraction of the JSON value is affected by
    the patch, the complexity can usually be neglected.

    @liveexample{The following code shows how a JSON patch is applied to a
    value.,patch}

    @sa see @ref diff -- create a JSON patch by comparing two JSON values

    @sa [RFC 6902 (JSON Patch)](https://tools.ietf.org/html/rfc6902)
    @sa [RFC 6901 (JSON Pointer)](https://tools.ietf.org/html/rfc6901)

    @since version 2.0.0
    ','line_number':25313,'multiline':True]['text':' make a working copy to apply the patch to','line_number':25362,'multiline':False]['text':' the valid JSON Patch operations','line_number':25365,'multiline':False]['text':' wrapper for "add" operation; add value at ptr','line_number':25398,'multiline':False]['text':' adding to the root of the target document means replacing it','line_number':25401,'multiline':False]['text':' make sure the top element of the pointer exists','line_number':25408,'multiline':False]['text':' get reference to parent of JSON pointer ptr','line_number':25415,'multiline':False]['text':' use operator[] to add value','line_number':25425,'multiline':False]['text':' special case: append to back','line_number':25434,'multiline':False]['text':' avoid undefined behavior','line_number':25442,'multiline':False]['text':' default case: insert add offset','line_number':25446,'multiline':False]['text':' if there exists a parent it cannot be primitive','line_number':25452,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':25453,'multiline':False]['text':' NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE','line_number':25454,'multiline':False]['text':' wrapper for "remove" operation; remove value at ptr','line_number':25458,'multiline':False]['text':' get reference to parent of JSON pointer ptr','line_number':25461,'multiline':False]['text':' remove child','line_number':25466,'multiline':False]['text':' perform range check','line_number':25469,'multiline':False]['text':' note erase performs range check','line_number':25482,'multiline':False]['text':' type check: top level value must be an array','line_number':25487,'multiline':False]['text':' iterate and apply the operations','line_number':25493,'multiline':False]['text':' wrapper to get a value for an operation','line_number':25496,'multiline':False]['text':' find value','line_number':25501,'multiline':False]['text':' context-sensitive error message','line_number':25504,'multiline':False]['text':' check if desired value is present','line_number':25507,'multiline':False]['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':25510,'multiline':False]['text':' check if result is of type string','line_number':25514,'multiline':False]['text':' NOLINTNEXTLINE(performance-inefficient-string-concatenation)','line_number':25517,'multiline':False]['text':' no error: return value','line_number':25521,'multiline':False]['text':' type check: every element of the array must be an object','line_number':25525,'multiline':False]['text':' collect mandatory members','line_number':25531,'multiline':False]['text':' the "path" location must exist - use at()','line_number':25552,'multiline':False]['text':' the "from" location must exist - use at()','line_number':25562,'multiline':False]['text':' The move operation is functionally identical to a','line_number':25565,'multiline':False]['text':' "remove" operation on the "from" location, followed','line_number':25566,'multiline':False]['text':' immediately by an "add" operation at the target','line_number':25567,'multiline':False]['text':' location with the value that was just removed.','line_number':25568,'multiline':False]['text':' the "from" location must exist - use at()','line_number':25579,'multiline':False]['text':' The copy is functionally identical to an "add"','line_number':25582,'multiline':False]['text':' operation at the target location using the value','line_number':25583,'multiline':False]['text':' specified in the "from" member.','line_number':25584,'multiline':False]['text':' check if "value" matches the one at "path"','line_number':25594,'multiline':False]['text':' the "path" location must exist - use at()','line_number':25595,'multiline':False]['text':' ignore out of range errors: success remains false','line_number':25600,'multiline':False]['text':' throw an exception if test fails','line_number':25603,'multiline':False]['text':' op must be "add", "remove", "replace", "move", "copy", or','line_number':25614,'multiline':False]['text':' "test"','line_number':25615,'multiline':False]['text':'!
    @brief creates a diff as a JSON patch

    Creates a [JSON Patch](http://jsonpatch.com) so that value @a source can
    be changed into the value @a target by calling @ref patch function.

    @invariant For two JSON values @a source and @a target, the following code
    yields always `true`:
    @code {.cpp}
    source.patch(diff(source, target)) == target;
    @endcode

    @note Currently, only `remove`, `add`, and `replace` operations are
          generated.

    @param[in] source  JSON value to compare from
    @param[in] target  JSON value to compare against
    @param[in] path    helper value to create JSON pointers

    @return a JSON patch to convert the @a source to @a target

    @complexity Linear in the lengths of @a source and @a target.

    @liveexample{The following code shows how a JSON patch is created as a
    diff for two JSON values.,diff}

    @sa see @ref patch -- apply a JSON patch
    @sa see @ref merge_patch -- apply a JSON Merge Patch

    @sa [RFC 6902 (JSON Patch)](https://tools.ietf.org/html/rfc6902)

    @since version 2.0.0
    ','line_number':25624,'multiline':True]['text':' the patch','line_number':25661,'multiline':False]['text':' if the values are the same, return empty patch','line_number':25664,'multiline':False]['text':' different types: replace value','line_number':25672,'multiline':False]['text':' first pass: traverse common elements','line_number':25684,'multiline':False]['text':' recursive call to compare array values at index i','line_number':25688,'multiline':False]['text':' i now reached the end of at least one array','line_number':25694,'multiline':False]['text':' in a second pass, traverse the remaining elements','line_number':25695,'multiline':False]['text':' remove my remaining elements','line_number':25697,'multiline':False]['text':' add operations in reverse order to avoid invalid','line_number':25701,'multiline':False]['text':' indices','line_number':25702,'multiline':False]['text':' add other remaining elements','line_number':25711,'multiline':False]['text':' first pass: traverse this object's elements','line_number':25728,'multiline':False]['text':' escape the key name to be used in a JSON patch','line_number':25731,'multiline':False]['text':' recursive call to compare object values at key it','line_number':25736,'multiline':False]['text':' found a key that is not in o -> remove it','line_number':25742,'multiline':False]['text':' second pass: traverse other object's elements','line_number':25750,'multiline':False]['text':' found a key that is not in this -> add it','line_number':25755,'multiline':False]['text':' both primitive type: replace value','line_number':25770,'multiline':False]['text':'/ @}','line_number':25782,'multiline':False]['text':'//////////////////////////////','line_number':25784,'multiline':False]['text':' JSON Merge Patch functions //','line_number':25785,'multiline':False]['text':'//////////////////////////////','line_number':25786,'multiline':False]['text':'/ @name JSON Merge Patch functions','line_number':25788,'multiline':False]['text':'/ @{','line_number':25789,'multiline':False]['text':'!
    @brief applies a JSON Merge Patch

    The merge patch format is primarily intended for use with the HTTP PATCH
    method as a means of describing a set of modifications to a target
    resource's content. This function applies a merge patch to the current
    JSON value.

    The function implements the following algorithm from Section 2 of
    [RFC 7396 (JSON Merge Patch)](https://tools.ietf.org/html/rfc7396):

    ```
    define MergePatch(Target, Patch):
      if Patch is an Object:
        if Target is not an Object:
          Target = {} // Ignore the contents and set it to an empty Object
        for each Name/Value pair in Patch:
          if Value is null:
            if Name exists in Target:
              remove the Name/Value pair from Target
          else:
            Target[Name] = MergePatch(Target[Name], Value)
        return Target
      else:
        return Patch
    ```

    Thereby, `Target` is the current object; that is, the patch is applied to
    the current value.

    @param[in] apply_patch  the patch to apply

    @complexity Linear in the lengths of @a patch.

    @liveexample{The following code shows how a JSON Merge Patch is applied to
    a JSON document.,merge_patch}

    @sa see @ref patch -- apply a JSON patch
    @sa [RFC 7396 (JSON Merge Patch)](https://tools.ietf.org/html/rfc7396)

    @since version 3.0.0
    ','line_number':25791,'multiline':True]['text':'/ @}','line_number':25859,'multiline':False]['text':'!
@brief user-defined to_string function for JSON values

This function implements a user-defined to_string  for JSON objects.

@param[in] j  a JSON object
@return a std::string object
','line_number':25862,'multiline':True]['text':' namespace nlohmann','line_number':25876,'multiline':False]['text':'/////////////////////','line_number':25878,'multiline':False]['text':' nonmember support //','line_number':25879,'multiline':False]['text':'/////////////////////','line_number':25880,'multiline':False]['text':' specialization of std::swap, and std::hash','line_number':25882,'multiline':False]['text':'/ hash value for JSON objects','line_number':25886,'multiline':False]['text':'!
    @brief return a hash value for a JSON object

    @since version 1.0.0
    ','line_number':25890,'multiline':True]['text':'/ specialization for std::less<value_t>','line_number':25901,'multiline':False]['text':'/ @note: do not remove the space after '<',','line_number':25902,'multiline':False]['text':'/        see https://github.com/nlohmann/json/pull/679','line_number':25903,'multiline':False]['text':'!
    @brief compare two value_t enum values
    @since version 3.0.0
    ','line_number':25907,'multiline':True]['text':' C++20 prohibit function specialization in the std namespace.','line_number':25918,'multiline':False]['text':'!
@brief exchanges the values of two JSON objects

@since version 1.0.0
','line_number':25921,'multiline':True]['text':' NOLINT(readability-inconsistent-declaration-parameter-name)','line_number':25927,'multiline':False]['text':' NOLINT(misc-redundant-expression)','line_number':25928,'multiline':False]['text':' namespace std','line_number':25937,'multiline':False]['text':'!
@brief user-defined string literal for JSON values

This operator implements a user-defined string literal for JSON objects. It
can be used by adding `"_json"` to a string literal and returns a JSON object
if no parse error occurred.

@param[in] s  a string representation of a JSON object
@param[in] n  the length of string @a s
@return a JSON object

@since version 1.0.0
','line_number':25939,'multiline':True]['text':'!
@brief user-defined string literal for JSON pointer

This operator implements a user-defined string literal for JSON Pointers. It
can be used by adding `"_json_pointer"` to a string literal and returns a JSON pointer
object if no parse error occurred.

@param[in] s  a string representation of a JSON Pointer
@param[in] n  the length of string @a s
@return a JSON pointer object

@since version 2.0.0
','line_number':25958,'multiline':True]['text':' #include <nlohmann/detail/macro_unscope.hpp>','line_number':25977,'multiline':False]['text':' restore GCC/clang diagnostic settings','line_number':25980,'multiline':False]['text':' clean up','line_number':25985,'multiline':False]['text':' #include <nlohmann/thirdparty/hedley/hedley_undef.hpp>','line_number':26000,'multiline':False]['text':' INCLUDE_NLOHMANN_JSON_HPP_','line_number':26154,'multiline':False]