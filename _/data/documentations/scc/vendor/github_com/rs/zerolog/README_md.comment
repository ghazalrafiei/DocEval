['text':'img.shields.io/badge/godoc-reference-blue.svg?style=flat)](https://godoc.org/github.com/rs/zerolog) [![license](http://img.shields.io/badge/license-MIT-red.svg?style=flat)](https://raw.githubusercontent.com/rs/zerolog/master/LICENSE) [![Build Status](https://travis-ci.org/rs/zerolog.svg?branch=master)](https://travis-ci.org/rs/zerolog) [![Coverage](http://gocover.io/_badge/github.com/rs/zerolog)](http://gocover.io/github.com/rs/zerolog)','line_number':3,'multiline':False]['text':'godoc.org/go.uber.org/zap) library pioneered this approach. Zerolog is taking this concept to the next level with a simpler to use API and even better performance.','line_number':9,'multiline':False]['text':'github.com/rs/zerolog/wiki/Who-uses-zerolog) and add your company / project to the list.','line_number':17,'multiline':False]['text':' UNIX Time is faster and smaller than most timestamps','line_number':54,'multiline':False]['text':' Output: {"time":1516134303,"level":"debug","message":"hello world"}','line_number':60,'multiline':False]['text':' Output: {"level":"debug","Scale":"833 cents","Interval":833.09,"time":1562212768,"message":"Fibonacci is everywhere"}','line_number':90,'multiline':False]['text':' Output: {"level":"debug","Name":"Tom","time":1562212768}','line_number':91,'multiline':False]['text':' Output: {"time":1516134303,"level":"info","message":"hello world"}','line_number':114,'multiline':False]['text':' Default level for this example is info, unless debug flag is present','line_number':151,'multiline':False]['text':' Compute log output only if enabled.','line_number':161,'multiline':False]['text':' Output: {"time":1494567715,"foo":"bar"}','line_number':204,'multiline':False]['text':' Output: {"level":"error","error":"seems we have an error here","time":1609085256}','line_number':228,'multiline':False]['text':' Output: {"level":"error","stack":[{"func":"inner","line":"20","source":"errors.go"},{"func":"middle","line":"24","source":"errors.go"},{"func":"outer","line":"32","source":"errors.go"},{"func":"main","line":"15","source":"errors.go"},{"func":"main","line":"204","source":"proc.go"},{"func":"goexit","line":"1374","source":"asm_amd64.s"}],"error":"seems we have an error here","time":1609086683}','line_number':276,'multiline':False]['text':' Output: {"time":1516133263,"level":"fatal","error":"A repo man spends his life getting into tense situations","service":"myservice","message":"Cannot start myservice"}','line_number':305,'multiline':False]['text':'         exit status 1','line_number':306,'multiline':False]['text':' Output: {"level":"info","time":1494567715,"message":"hello world","foo":"bar"}','line_number':319,'multiline':False]['text':' Output: {"level":"info","time":1494567715,"message":"hello world","component":"foo"}','line_number':330,'multiline':False]['text':' Output: 3:04PM INF Hello World foo=bar','line_number':342,'multiline':False]['text':' Output: 2006-01-02T15:04:05Z07:00 | INFO  | ***Hello World**** foo:BAR','line_number':366,'multiline':False]['text':' Output: {"level":"info","time":1494567715,"foo":"bar","dict":{"bar":"baz","n":1},"message":"hello world"}','line_number':379,'multiline':False]['text':' Output: {"l":"info","t":1494567715,"m":"hello world"}','line_number':391,'multiline':False]['text':' Output: {"level": "info", "message": "hello world", "caller": "/go/src/your_project/some_file:21"}','line_number':408,'multiline':False]['text':' Output: {"level": "info", "message": "hello world", "caller": "some_file:21"}','line_number':428,'multiline':False]['text':' Output: {"time":1494567715,"level":"info","message":"will be logged every 10 messages"}','line_number':451,'multiline':False]['text':' Will let 5 debug messages per period of 1 second.','line_number':457,'multiline':False]['text':' Over 5 debug message, 1 every 100 debug messages are logged.','line_number':458,'multiline':False]['text':' Other levels are not sampled.','line_number':459,'multiline':False]['text':' Output: {"time":1494567715,"level":"debug","message":"hello world"}','line_number':469,'multiline':False]['text':' Output: {"level":"warn","severity":"warn"}','line_number':486,'multiline':False]['text':' Output: {"component":"module","level":"info","message":"hello world"}','line_number':496,'multiline':False]['text':' Output: {"foo":"bar","message":"hello world"}','line_number':511,'multiline':False]['text':' Attach the Logger to the context.Context','line_number':527,'multiline':False]['text':' Get Logger from the go Context. if it's nil, then','line_number':533,'multiline':False]['text':' `zerolog.DefaultContextLogger` is returned, if','line_number':534,'multiline':False]['text':' `DefaultContextLogger` is nil, then a disabled logger is returned.','line_number':535,'multiline':False]['text':' as per your tracing framework','line_number':551,'multiline':False]['text':' Setup the logger','line_number':556,'multiline':False]['text':' Use the Ctx function to make the context available to the hook','line_number':561,'multiline':False]['text':'github.com/justinas/alice) to install logger for better readability.','line_number':570,'multiline':False]['text':' Install the logger handler with default output on the console','line_number':581,'multiline':False]['text':' Install some provided extra handler to set some request's context fields.','line_number':584,'multiline':False]['text':' Thanks to that handler, all our logs will come with some prepopulated fields.','line_number':585,'multiline':False]['text':' Here is your final handler','line_number':600,'multiline':False]['text':' Get the logger from the request's context. You can safely assume it','line_number':602,'multiline':False]['text':' will be always there: if the handler is removed, hlog.FromRequest','line_number':603,'multiline':False]['text':' will return a no-op logger.','line_number':604,'multiline':False]['text':' Output: {"level":"info","time":"2001-02-03T04:05:06Z","role":"my-service","host":"local-hostname","req_id":"b4g0l5t6tfid6dtrapu0","user":"current user","status":"ok","message":"Something happened"}','line_number':610,'multiline':False]['text':' Output (Line 1: Console; Line 2: Stdout)','line_number':633,'multiline':False]['text':' 12:36PM INF Hello World!','line_number':634,'multiline':False]['text':' {"level":"info","time":"2019-11-07T12:36:38+03:00","message":"Hello World!"}','line_number':635,'multiline':False]['text':'cbor.io) encoding. The choice of encoding can be decided at compile time using the build tag `binary_log` as follows:','line_number':680,'multiline':False]['text':'github.com/toravir/csd/).','line_number':687,'multiline':False]['text':'github.com/cheapRoc/grpc-zerolog): Implementation of `grpclog.LoggerV2` interface using `zerolog`','line_number':691,'multiline':False]['text':'github.com/Trendyol/overlog): Implementation of `Mapped Diagnostic Context` interface using `zerolog`','line_number':692,'multiline':False]['text':'github.com/go-logr/zerologr): Implementation of `logr.LogSink` interface using `zerolog`','line_number':693,'multiline':False]['text':'hackemist.com/logbench/) for more comprehensive and up-to-date benchmarks.','line_number':697,'multiline':False]['text':'github.com/imkira/go-loggers-bench)','line_number':711,'multiline':False]['text':'github.com/uber-go/zap#performance)','line_number':712,'multiline':False]['text':' Output: {"level":"info","time":1494567715,"time":1494567715,"message":"dup"}','line_number':767,'multiline':False]['text':' Create a child logger for concurrency safety','line_number':778,'multiline':False]['text':' Add context fields, for example User-Agent from HTTP headers','line_number':781,'multiline':False]