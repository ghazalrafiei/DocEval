['text':'!/bin/bash','line_number':1,'multiline':False]['text':' make sure this script can be executed from any dir','line_number':3,'multiline':False]['text':' Race Detection','line_number':16,'multiline':False]['text':' include \n, \r\n and no line terminators','line_number':36,'multiline':False]['text':' post processing','line_number':40,'multiline':False]['text':' post processing','line_number':46,'multiline':False]['text':'# NB you need to have pyyaml installed via pip install pyyaml for this to work','line_number':67,'multiline':False]['text':'if ./scc "examples/language/" --format cloc-yaml -o .tmp_scc_yaml >/dev/null && python <<EOS','line_number':68,'multiline':False]['text':'import yaml,sys','line_number':69,'multiline':False]['text':'try:','line_number':70,'multiline':False]['text':'    with open('.tmp_scc_yaml','r') as f:','line_number':71,'multiline':False]['text':'        data = yaml.load(f.read())','line_number':72,'multiline':False]['text':'        if type(data) is dict and data.keys():','line_number':73,'multiline':False]['text':'            sys.exit(0)','line_number':74,'multiline':False]['text':'        else:','line_number':75,'multiline':False]['text':'            print('data was {}'.format(type(data)))','line_number':76,'multiline':False]['text':'except Exception as e:','line_number':77,'multiline':False]['text':'    pass','line_number':78,'multiline':False]['text':'sys.exit(1)','line_number':79,'multiline':False]['text':'EOS','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':'then','line_number':82,'multiline':False]['text':'	echo -e "${GREEN}PASSED cloc-yaml format test"','line_number':83,'multiline':False]['text':'else','line_number':84,'multiline':False]['text':'    echo -e "${RED}======================================================="','line_number':85,'multiline':False]['text':'    echo -e "${RED}FAILED Should accept --format cloc-yaml and should generate valid output"','line_number':86,'multiline':False]['text':'    echo -e "=======================================================${NC}"','line_number':87,'multiline':False]['text':'    rm -f .tmp_scc_yaml','line_number':88,'multiline':False]['text':'    exit','line_number':89,'multiline':False]['text':'fi','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':'if ./scc "examples/language/" --format cloc-yml -o .tmp_scc_yaml >/dev/null && python <<EOS','line_number':92,'multiline':False]['text':'import yaml,sys','line_number':93,'multiline':False]['text':'try:','line_number':94,'multiline':False]['text':'    with open('.tmp_scc_yaml','r') as f:','line_number':95,'multiline':False]['text':'        data = yaml.load(f.read())','line_number':96,'multiline':False]['text':'        if type(data) is dict and data.keys():','line_number':97,'multiline':False]['text':'            sys.exit(0)','line_number':98,'multiline':False]['text':'        else:','line_number':99,'multiline':False]['text':'            print('data was {}'.format(type(data)))','line_number':100,'multiline':False]['text':'except Exception as e:','line_number':101,'multiline':False]['text':'    pass','line_number':102,'multiline':False]['text':'sys.exit(1)','line_number':103,'multiline':False]['text':'EOS','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':'then','line_number':106,'multiline':False]['text':'	echo -e "${GREEN}PASSED cloc-yml format test"','line_number':107,'multiline':False]['text':'else','line_number':108,'multiline':False]['text':'    echo -e "${RED}======================================================="','line_number':109,'multiline':False]['text':'    echo -e "${RED}FAILED Should accept --format cloc-yml and should generate valid output"','line_number':110,'multiline':False]['text':'    echo -e "=======================================================${NC}"','line_number':111,'multiline':False]['text':'    rm -f .tmp_scc_yaml','line_number':112,'multiline':False]['text':'    exit','line_number':113,'multiline':False]['text':'fi','line_number':114,'multiline':False]['text':' Simple test to see if we get any concurrency issues','line_number':206,'multiline':False]['text':' Multiple directory or file arguments','line_number':229,'multiline':False]['text':' Try out duplicates','line_number':266,'multiline':False]['text':' Ensure deterministic output','line_number':280,'multiline':False]['text':' Check for multiple regex via https://github.com/andyfitzgerald','line_number':296,'multiline':False]['text':' Regression issue https://github.com/boyter/scc/issues/82','line_number':308,'multiline':False]['text':' Turn off gitignore https://github.com/boyter/scc/issues/53','line_number':320,'multiline':False]['text':' Regression issue https://github.com/boyter/scc/issues/115','line_number':333,'multiline':False]['text':' Regression issue https://github.com/boyter/scc/issues/260','line_number':344,'multiline':False]['text':' Try out specific languages','line_number':885,'multiline':False]['text':' Issue339','line_number':899,'multiline':False]['text':' Issue345 (https://github.com/boyter/scc/issues/345)','line_number':912,'multiline':False]['text':' Extra case for longer languages that are normally truncated','line_number':926,'multiline':False]