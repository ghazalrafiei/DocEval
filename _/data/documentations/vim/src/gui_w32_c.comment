['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved		by Bram Moolenaar
 *				GUI support by Robert Webb
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * Windows GUI.
 *
 * GUI support for Microsoft Windows, aka Win32.  Also for Win64.
 *
 * George V. Reilly <george@reilly.org> wrote the original Win32 GUI.
 * Robert Webb reworked it to use the existing GUI stuff and added menu,
 * scrollbars, etc.
 *
 * Note: Clipboard stuff, for cutting and pasting text to other windows, is in
 * winclip.c.	(It can also be done from the terminal version).
 *
 * TODO: Some of the function signatures ought to be updated for Win64;
 * e.g., replace LONG with LONG_PTR, etc.
 ','line_number':10,'multiline':True]['text':' values for "dead_key"','line_number':32,'multiline':False]['text':' no dead key','line_number':33,'multiline':False]['text':' dead key pressed','line_number':34,'multiline':False]['text':' wait for next key press','line_number':35,'multiline':False]['text':' skip next _OnChar()','line_number':36,'multiline':False]['text':' parse string as rendering options.','line_number':69,'multiline':False]['text':' Deprecated.  Simply ignore it.','line_number':130,'multiline':False]['text':' only checking the syntax of the value','line_number':137,'multiline':False]['text':' Enable DirectX/DirectWrite','line_number':139,'multiline':False]['text':'
 * These are new in Windows ME/XP, only defined in recent compilers.
 ','line_number':173,'multiline':True]['text':' used by dialog box routine for default title','line_number':190,'multiline':False]['text':' cproto fails on missing include files','line_number':195,'multiline':False]['text':' PROTO','line_number':204,'multiline':False]['text':' show menu hints in command line','line_number':207,'multiline':False]['text':' Some parameters for dialog boxes.  All in pixels.','line_number':210,'multiline':False]['text':' For vertical buttons','line_number':213,'multiline':False]['text':' First ID of non-button controls','line_number':223,'multiline':False]['text':'
 * Define a few things for generating prototypes.  This is just to avoid
 * syntax errors, the defines do not need to be correct.
 ','line_number':246,'multiline':True]['text':' height of the dialog font','line_number':309,'multiline':False]['text':' width of the dialog font','line_number':310,'multiline':False]['text':' bitmap used to indicate tearoff','line_number':317,'multiline':False]['text':' Flag that is set while processing a message that must not be interrupted by','line_number':320,'multiline':False]['text':' processing another message.','line_number':321,'multiline':False]['text':' call DestroyWindow() ourselves','line_number':324,'multiline':False]['text':' TRUE for find dialog, FALSE','line_number':330,'multiline':False]['text':' for find/replace dialog','line_number':331,'multiline':False]['text':' Used by dialogs to pass back strings','line_number':355,'multiline':False]['text':' This variable is set when waiting for an event, which is the only moment','line_number':359,'multiline':False]['text':' scrollbar dragging can be done directly.  It's not allowed while commands','line_number':360,'multiline':False]['text':' are executed, because it may move the cursor and that may cause unexpected','line_number':361,'multiline':False]['text':' problems (e.g., while ":s" is working).','line_number':362,'multiline':False]['text':'static INT (WINAPI *pGetWindowDpiAwarenessContext)(HWND hwnd) = NULL;','line_number':391,'multiline':False]['text':' load DirectX','line_number':431,'multiline':False]['text':' this is in os_mswin.c','line_number':451,'multiline':False]['text':' Pause == F21 (see gui_gtk_x11.c)','line_number':489,'multiline':False]['text':' winuser.h defines up to F24','line_number':493,'multiline':False]['text':' Keypad Enter','line_number':508,'multiline':False]['text':' Keys that we want to be able to use any modifier with:','line_number':522,'multiline':False]['text':' End of list marker:','line_number':529,'multiline':False]['text':' Local variables','line_number':533,'multiline':False]['text':' s_getting_focus is set when we got focus but didn't see mouse-up event yet,','line_number':536,'multiline':False]['text':' so don't reset s_button_pending.','line_number':537,'multiline':False]['text':' Timer for get char from user','line_number':543,'multiline':False]['text':' 0: no surrogate pending,','line_number':546,'multiline':False]['text':' else a high surrogate','line_number':547,'multiline':False]['text':' balloon-eval WM_NOTIFY_HANDLER','line_number':550,'multiline':False]['text':'
 * For control IME.
 *
 * These LOGFONTW used for IME.
 ','line_number':555,'multiline':True]['text':' holds LOGFONTW for 'guifontwide' if available, otherwise 'guifont'','line_number':561,'multiline':False]['text':' holds LOGFONTW for 'guifont' always.','line_number':563,'multiline':False]['text':'
 * Print out the last Windows error message
 ','line_number':576,'multiline':True]['text':'
 * Cursor blink functions.
 *
 * This is a simple state machine:
 * BLINK_NONE	not blinking at all
 * BLINK_OFF	blinking, cursor is not shown
 * BLINK_ON	blinking, cursor is shown
 ','line_number':593,'multiline':True]['text':'
    TRACE2("Got timer event, id %d, blink_timer %d\n", idEvent, blink_timer);
    ','line_number':641,'multiline':True]['text':' Eat spurious WM_TIMER messages','line_number':647,'multiline':False]['text':' Eat spurious WM_TIMER messages','line_number':675,'multiline':False]['text':'
 * Stop the cursor blinking.  Show the cursor if it wasn't shown.
 ','line_number':681,'multiline':True]['text':'
 * Start the cursor blinking.  If it was already blinking, this restarts the
 * waiting time and shows the cursor.
 ','line_number':696,'multiline':True]['text':' Only switch blinking on if none of the times is zero','line_number':705,'multiline':False]['text':'
 * Call-back routines.
 ','line_number':715,'multiline':True]['text':'
    TRACE2("Got timer event, id %d, s_wait_timer %d\n", idEvent, s_wait_timer);
    ','line_number':728,'multiline':True]['text':' Eat spurious WM_TIMER messages','line_number':734,'multiline':False]['text':'
 * Convert Unicode character "ch" to bytes in "string[slen]".
 * When "had_alt" is TRUE the ALT key was included in "ch".
 * Return the length.
 * Because the Windows API uses UTF-16, we have to deal with surrogate
 * pairs; this is where we choose to deal with them: if "ch" is a high
 * surrogate, it will be stored, and the length returned will be zero; the next
 * char_to_string call will then include the high surrogate, decoding the pair
 * of UTF-16 code units to a single Unicode code point, presuming it is the
 * matching low surrogate.
 ','line_number':750,'multiline':True]['text':' We don't guarantee ch is a low surrogate to match the high surrogate','line_number':771,'multiline':False]['text':' we already have; it should be, but if it isn't, tough luck.','line_number':772,'multiline':False]['text':' high surrogate','line_number':778,'multiline':False]['text':' We don't have the entire code point yet, only the first UTF-16 code','line_number':780,'multiline':False]['text':' unit; so just remember it and use it in the next call.','line_number':781,'multiline':False]['text':' "ch" is a UTF-16 character.  Convert it to a string of bytes.  When','line_number':791,'multiline':False]['text':' "enc_codepage" is non-zero use the standard Win32 function,','line_number':792,'multiline':False]['text':' otherwise use our own conversion function (e.g., for UTF-8).','line_number':793,'multiline':False]['text':' If we had included the ALT key into the character but now the','line_number':798,'multiline':False]['text':' upper bit is no longer set, that probably means the conversion','line_number':799,'multiline':False]['text':' failed.  Convert the original character and set the upper bit','line_number':800,'multiline':False]['text':' afterwards.','line_number':801,'multiline':False]['text':' safety check','line_number':807,'multiline':False]['text':' just in case','line_number':818,'multiline':False]['text':' Insert CSI as K_CSI.','line_number':834,'multiline':False]['text':' Windows handles Ctrl + Alt as AltGr and vice-versa. We can distinguish','line_number':853,'multiline':False]['text':' the two cases by checking whether the left or the right Alt key is','line_number':854,'multiline':False]['text':' pressed.','line_number':855,'multiline':False]['text':' Add RightALT only if it is hold alone (without Ctrl), because if AltGr','line_number':860,'multiline':False]['text':' is pressed, Windows claims that Ctrl is hold as well. That way we can','line_number':861,'multiline':False]['text':' recognize Right-ALT alone and be sure that not AltGr is hold.','line_number':862,'multiline':False]['text':' seems AltGr has both set','line_number':865,'multiline':False]['text':'
 * Key hit, add it to the input buffer.
 ','line_number':871,'multiline':True]['text':' special keys are negative','line_number':883,'multiline':False]['text':'  keep DEAD_KEY_TRANSIENT_IN_ON_CHAR value for later handling in','line_number':888,'multiline':False]['text':'  process_message()','line_number':889,'multiline':False]['text':' Some keys need adjustment when the Ctrl modifier is used.','line_number':897,'multiline':False]['text':' remove the SHIFT modifier for keys where it's already included, e.g.,','line_number':902,'multiline':False]['text':' '(' and '*'','line_number':903,'multiline':False]['text':' Unify modifiers somewhat.  No longer use ALT to set the 8th bit.','line_number':906,'multiline':False]['text':'
 * Alt-Key hit, add it to the input buffer.
 ','line_number':929,'multiline':True]['text':' Enough for multibyte character','line_number':938,'multiline':False]['text':' special keys are negative','line_number':941,'multiline':False]['text':' OK, we have a character key (given by ch) which was entered with the','line_number':945,'multiline':False]['text':' ALT key pressed. Eg, if the user presses Alt-A, then ch == 'A'. Note','line_number':946,'multiline':False]['text':' that the system distinguishes Alt-a and Alt-A (Alt-Shift-a unless','line_number':947,'multiline':False]['text':' CAPSLOCK is pressed) at this point.','line_number':948,'multiline':False]['text':' remove the SHIFT modifier for keys where it's already included, e.g.,','line_number':951,'multiline':False]['text':' '(' and '*'','line_number':952,'multiline':False]['text':' Unify modifiers somewhat.  No longer use ALT to set the 8th bit.','line_number':955,'multiline':False]['text':' Although the documentation isn't clear about it, we assume "ch" is','line_number':976,'multiline':False]['text':' a Unicode character.','line_number':977,'multiline':False]['text':' Give main window the focus: this is so the cursor isn't hollow.','line_number':1020,'multiline':False]['text':' on W95/NT4, somehow you get in here with an odd Msg','line_number':1035,'multiline':False]['text':' if you press one button while holding down the other..','line_number':1036,'multiline':False]['text':'
     * Holding down the left and right buttons simulates pushing the middle
     * button.
     ','line_number':1048,'multiline':True]['text':'
	 * Hmm, gui.c will ignore more than one button down at a time, so
	 * pretend we let go of it first.
	 ','line_number':1057,'multiline':True]['text':' TRACE("Button down at x %d, y %d\n", x, y);','line_number':1075,'multiline':False]['text':'
	 * If this is the first press (i.e. not a multiple click) don't
	 * action immediately, but store and wait for:
	 * i) button-up
	 * ii) mouse move
	 * iii) another button press
	 * before using it.
	 * This enables us to make left+right simulate middle button,
	 * without left or right being actioned first.  The side-effect is
	 * that if you click and hold the mouse without dragging, the
	 * cursor doesn't move until you release the button. In practice
	 * this is hardly a problem.
	 ','line_number':1080,'multiline':True]['text':' Delayed action for mouse down event','line_number':1114,'multiline':False]['text':'
	 * It's only a MOUSE_DRAG if one or more mouse buttons are being held
	 * down.
	 ','line_number':1121,'multiline':True]['text':'
	 * While button is down, keep grabbing mouse move events when
	 * the mouse goes outside the window
	 ','line_number':1132,'multiline':True]['text':' TRACE("  move at x %d, y %d\n", x, y);','line_number':1138,'multiline':False]['text':' TRACE("  up at x %d, y %d\n", x, y);','line_number':1144,'multiline':False]['text':'
 * Find the vimmenu_T with the given id
 ','line_number':1164,'multiline':True]['text':'
 * Handle a Find/Replace window message.
 ','line_number':1208,'multiline':True]['text':' Give main window the focus back.','line_number':1218,'multiline':False]['text':' Give main window the focus back: this is so the cursor isn't','line_number':1225,'multiline':False]['text':' hollow.','line_number':1226,'multiline':False]['text':' Give main window the focus back: this is so the cursor isn't','line_number':1233,'multiline':False]['text':' hollow.','line_number':1234,'multiline':False]['text':' Call the generic GUI function to do the actual work.','line_number':1247,'multiline':False]['text':' We sometimes get a mousemove when the mouse didn't move...','line_number':1267,'multiline':False]['text':' Handle specially, to centralise coding. We need to be sure we catch all','line_number':1275,'multiline':False]['text':' possible events which should cause us to restore the cursor (as it is a','line_number':1276,'multiline':False]['text':' shared resource, we take full responsibility for it).','line_number':1277,'multiline':False]['text':'
	 * blank out the pointer if necessary
	 ','line_number':1282,'multiline':True]['text':' show the pointer when a system-key is pressed','line_number':1289,'multiline':False]['text':' show the pointer on any mouse action','line_number':1291,'multiline':False]['text':'
	 * if the pointer is currently hidden, then we should show it.
	 ','line_number':1308,'multiline':True]['text':'
    TRACE("TextAreaWndProc: hwnd = %08x, msg = %x, wParam = %x, lParam = %x\n",
	  hwnd, uMsg, wParam, lParam);
    ','line_number':1323,'multiline':True]['text':'
 * Called when the foreground or background color has been changed.
 ','line_number':1365,'multiline':True]['text':'
 * Set the colors to their default values.
 ','line_number':1380,'multiline':True]['text':'
 * Open the GUI window which was created by a call to gui_mch_init().
 ','line_number':1392,'multiline':True]['text':' Actually open the window, if not already visible','line_number':1398,'multiline':False]['text':' (may be done already in gui_mch_set_shellsize)','line_number':1399,'multiline':False]['text':' Init replace string here, so that we keep it when re-opening the','line_number':1404,'multiline':False]['text':' dialog.','line_number':1405,'multiline':False]['text':'
 * Get the position of the top left corner of the window.
 ','line_number':1412,'multiline':True]['text':'
 * Set the position of the top left corner of the window to the given
 * coordinates.
 ','line_number':1426,'multiline':True]['text':' When side scroll bar is unshown, the size of window will change.','line_number':1464,'multiline':False]['text':' then, the text area move left or right. thus client rect should be','line_number':1465,'multiline':False]['text':' forcedly redrawn. (Yasuhiro Matsumoto)','line_number':1466,'multiline':False]['text':'
 * Scrollbar stuff:
 ','line_number':1476,'multiline':True]['text':' TODO: When the window is maximized, the size of the window stays the','line_number':1487,'multiline':False]['text':' same, thus the size of the text area changes.  On Win98 it's OK, on Win','line_number':1488,'multiline':False]['text':' NT 4.0 it's not...','line_number':1489,'multiline':False]['text':' SBAR_VERT or SBAR_HORIZ','line_number':1535,'multiline':False]['text':' Any value will do for now','line_number':1540,'multiline':False]['text':' Any value will do for now','line_number':1541,'multiline':False]['text':'
 * Find the scrollbar with the given hwnd.
 ','line_number':1546,'multiline':True]['text':'
 * Get the average character size of a font.
 ','line_number':1573,'multiline':True]['text':' GetTextMetrics() may not return the right value in tmAveCharWidth','line_number':1579,'multiline':False]['text':' for some fonts.  Do our own average computation.','line_number':1580,'multiline':False]['text':'
 * Get the character size of a font.
 ','line_number':1587,'multiline':True]['text':'
 * Update the character size in "gui" structure with the specified font.
 ','line_number':1612,'multiline':True]['text':'
 * Adjust gui.char_height (after 'linespace' was changed).
 ','line_number':1621,'multiline':True]['text':' Load the font','line_number':1636,'multiline':False]['text':'
 * Return the name of font "font" in allocated memory.
 * Don't know how to get the actual name, thus use the provided name.
 ','line_number':1682,'multiline':True]['text':'
 * Return the Pixel value (color) for the given color name.
 * Return INVALCOLOR for error.
 ','line_number':1702,'multiline':True]['text':'
     * Try to look up a system colour.
     ','line_number':1754,'multiline':True]['text':'
 * Return OK if the key with the termcap name "name" is supported.
 ','line_number':1770,'multiline':True]['text':'
 * Invert a rectangle from row r, column c, for nr rows and nc columns.
 ','line_number':1790,'multiline':True]['text':'
     * Note: InvertRect() excludes right and bottom of rectangle.
     ','line_number':1807,'multiline':True]['text':'
 * Iconify the GUI window.
 ','line_number':1817,'multiline':True]['text':'
 * Draw a cursor without focus.
 ','line_number':1826,'multiline':True]['text':'
     * Note: FrameRect() excludes right and bottom of rectangle.
     ','line_number':1840,'multiline':True]['text':'
 * Draw part of a cursor, "w" pixels wide, and "h" pixels high, using
 * color "color".
 ','line_number':1853,'multiline':True]['text':'
     * Note: FillRect() excludes right and bottom of rectangle.
     ','line_number':1865,'multiline':True]['text':' vertical line should be on the right of current point','line_number':1870,'multiline':False]['text':'
 * Generates a VK_SPACE when the internal dead_key flag is set to output the
 * dead key's nominal character and re-post the original message.
 ','line_number':1882,'multiline':True]['text':' Make Windows generate the dead key's character','line_number':1896,'multiline':False]['text':' re-generate the current character free of the dead char influence','line_number':1903,'multiline':False]['text':'
 * Wrapper for outputDeadKey_rePost_Ex which always reset dead_key value.
 ','line_number':1908,'multiline':True]['text':'
 * Process a single Windows message.
 * If one is not available we hang until one is.
 ','line_number':1917,'multiline':True]['text':' Virtual key','line_number':1925,'multiline':False]['text':' Look after OLE Automation commands','line_number':1938,'multiline':False]['text':' Message can't be ours, forward it.  Fixes problem with Ultramon','line_number':1944,'multiline':False]['text':' 3.0.4','line_number':1945,'multiline':False]['text':' was allocated in CVim::SendKeys()','line_number':1951,'multiline':False]['text':' Don't process messages used by the dialog','line_number':1958,'multiline':False]['text':'
     * Check if it's a special key that we recognise.  If not, call
     * TranslateMessage().
     ','line_number':1966,'multiline':True]['text':'
	 * Handle dead keys in special conditions in other cases we let Windows
	 * handle them and do not interfere.
	 *
	 * The dead_key flag must be reset on several occasions:
	 * - in _OnChar() (or _OnSysChar()) as any dead key was necessarily
	 *   consumed at that point (This is when we let Windows combine the
	 *   dead character on its own)
	 *
	 * - Before doing something special such as regenerating keypresses to
	 *   expel the dead character as this could trigger an infinite loop if
	 *   for some reason TranslateMessage() do not trigger a call
	 *   immediately to _OnChar() (or _OnSysChar()).
	 ','line_number':1974,'multiline':True]['text':'
	 * We are at the moment after WM_CHAR with DEAD_KEY_SKIP_ON_CHAR event
	 * was handled by _WndProc, this keypress we want to process normally
	 ','line_number':1989,'multiline':True]['text':'
	     * Expel the dead key pressed with Ctrl in a special way.
	     *
	     * After dead key was pressed with Ctrl in some cases, ESC was
	     * artificially injected and handled by _OnChar(), now we are
	     * dealing with completely new key press from the user. If we don't
	     * do anything, ToUnicode() call will interpret this vk+scan_code
	     * under influence of "dead-modifier". To prevent this we translate
	     * this message replacing current char from user with VK_SPACE,
	     * which will cause WM_CHAR with dead_key's character itself. Using
	     * DEAD_KEY_SKIP_ON_CHAR value of dead_char we force _OnChar() to
	     * ignore this one WM_CHAR event completely. Afterwards (due to
	     * usage of PostMessage), this procedure is scheduled to be called
	     * again with user char and on next entry we will clean
	     * DEAD_KEY_SKIP_ON_CHAR. We cannot use original
	     * outputDeadKey_rePost() since we do not wish to reset dead_key
	     * value.
	     ','line_number':1998,'multiline':True]['text':'dead_key2set=','line_number':2019,'multiline':True]['text':' should never happen - is there a way to make ASSERT here?','line_number':2025,'multiline':False]['text':'
	     * If a dead key was pressed and the user presses VK_SPACE,
	     * VK_BACK, or VK_ESCAPE it means that he actually wants to deal
	     * with the dead char now, so do nothing special and let Windows
	     * handle it.
	     *
	     * Note that VK_SPACE combines with the dead_key's character and
	     * only one WM_CHAR will be generated by TranslateMessage(), in
	     * the two other cases two WM_CHAR will be generated: the dead
	     * char and VK_BACK or VK_ESCAPE. That is most likely what the
	     * user expects.
	     ','line_number':2029,'multiline':True]['text':' In modes where we are not typing, dead keys should behave','line_number':2047,'multiline':False]['text':' normally','line_number':2048,'multiline':False]['text':' Check for CTRL-BREAK','line_number':2057,'multiline':False]['text':' This is an IME event or a synthetic keystroke, let Windows handle it.','line_number':2067,'multiline':False]['text':' ignore VK_SPACE when ALT key pressed: system menu','line_number':2076,'multiline':False]['text':'
		 * Behave as expected if we have a dead key and the special key
		 * is a key that would normally trigger the dead key nominal
		 * character output (such as a NUMPAD printable character or
		 * the TAB key, etc...).
		 ','line_number':2080,'multiline':True]['text':' Check for <F10>: Windows selects the menu.  When <F10> is','line_number':2095,'multiline':False]['text':' mapped we want to use the mapping instead.','line_number':2096,'multiline':False]['text':' Handle "key" as a Unicode character.','line_number':2133,'multiline':False]['text':' Not a special key.','line_number':2141,'multiline':False]['text':' Construct the state table with only a few modifiers, we don't','line_number':2149,'multiline':False]['text':' really care about the presence of Ctrl/Alt as those modifiers are','line_number':2150,'multiline':False]['text':' handled by Vim separately.','line_number':2151,'multiline':False]['text':' Alt-Gr is synthesized as Alt + Ctrl.','line_number':2157,'multiline':False]['text':' Translate the virtual key according to the current keyboard','line_number':2165,'multiline':False]['text':' layout.','line_number':2166,'multiline':False]['text':' Convert the scan-code into a sequence of zero or more unicode','line_number':2168,'multiline':False]['text':' codepoints.','line_number':2169,'multiline':False]['text':' If this is a dead key ToUnicode returns a negative value.','line_number':2170,'multiline':False]['text':' AZERTY CTRL+dead_circumflex','line_number':2183,'multiline':False]['text':' QWERTZ CTRL+dead_circumflex','line_number':2185,'multiline':False]['text':' QWERTZ CTRL+dead_two-overdots','line_number':2188,'multiline':False]['text':' post WM_CHAR='[' - which will be interpreted with CTRL','line_number':2194,'multiline':False]['text':' still hold as ESC','line_number':2195,'multiline':False]['text':' ask _OnChar() to not touch this state, wait for next key','line_number':2197,'multiline':False]['text':' press and maintain knowledge that we are "poisoned" with','line_number':2198,'multiline':False]['text':' "dead state"','line_number':2199,'multiline':False]['text':' Post the message as TranslateMessage would do.','line_number':2205,'multiline':False]['text':' added for non-MS IME (Yasuhiro Matsumoto)','line_number':2222,'multiline':False]['text':' Check for <F10>: Default effect is to select the menu.  When <F10> is','line_number':2227,'multiline':False]['text':' mapped we need to stop it here to avoid strange effects (e.g., for the','line_number':2228,'multiline':False]['text':' key-up event)','line_number':2229,'multiline':False]['text':'
 * Catch up with any queued events.  This may put keyboard input into the
 * input buffer, call resize call-backs, trigger timers etc.  If there is
 * nothing in the event queue (& no timers pending), then we return
 * immediately.
 ','line_number':2236,'multiline':True]['text':' Eat spurious WM_TIMER messages','line_number':2262,'multiline':False]['text':'
 * GUI input routine called by gui_wait_for_chars().  Waits for a character
 * from the keyboard.
 *  wtime == -1	    Wait forever.
 *  wtime == 0	    This should never happen.
 *  wtime > 0	    Wait wtime milliseconds for a character.
 * Returns OK if a character was found to be available within the given time,
 * or FAIL otherwise.
 ','line_number':2269,'multiline':True]['text':' Don't do anything while processing a (scroll) message.','line_number':2287,'multiline':False]['text':' When called with "wtime" zero, just want one msec.','line_number':2291,'multiline':False]['text':' Stop or start blinking when focus changes','line_number':2301,'multiline':False]['text':' Check channel I/O while waiting for a message.','line_number':2321,'multiline':False]['text':' TODO: The 10 msec is a compromise between laggy response','line_number':2337,'multiline':False]['text':' and consuming more CPU time.  Better would be to handle','line_number':2338,'multiline':False]['text':' channel messages when they arrive.','line_number':2339,'multiline':False]['text':' Don't use gui_mch_update() because then we will spin-lock until a','line_number':2345,'multiline':False]['text':' char arrives, instead we use GetMessage() to hang until an','line_number':2346,'multiline':False]['text':' event arrives.  No need to check for input_buf_full because we are','line_number':2347,'multiline':False]['text':' returning as soon as it contains a single char -- webb','line_number':2348,'multiline':False]['text':' Clear pending mouse button, the release event may have been','line_number':2357,'multiline':False]['text':' taken by the dialog window.  But don't do this when getting','line_number':2358,'multiline':False]['text':' focus, we need the mouse-up event then.','line_number':2359,'multiline':False]['text':' Need to recompute the waiting time.','line_number':2369,'multiline':False]['text':'
 * Clear a rectangular region of the screen from text pos (row1, col1) to
 * (row2, col2) inclusive.
 ','line_number':2379,'multiline':True]['text':'
     * Clear one extra pixel at the far right, for when bold characters have
     * spilled over to the window border.
     * Note: FillRect() excludes right and bottom of rectangle.
     ','line_number':2392,'multiline':True]['text':'
 * Clear the whole text window.
 ','line_number':2404,'multiline':True]['text':'
 * Menu stuff.
 ','line_number':2418,'multiline':True]['text':' It will be in the right place anyway','line_number':2437,'multiline':False]['text':'
 * Make menu item hidden or not hidden
 ','line_number':2441,'multiline':True]['text':'
     * This doesn't do what we want.  Hmm, just grey the menu items for now.
     ','line_number':2449,'multiline':True]['text':'
    if (hidden)
	EnableMenuItem(s_menuBar, menu->id, MF_BYCOMMAND | MF_DISABLED);
    else
	EnableMenuItem(s_menuBar, menu->id, MF_BYCOMMAND | MF_ENABLED);
    ','line_number':2452,'multiline':True]['text':'
 * This is called after setting all the menus to grey/hidden or not.
 ','line_number':2461,'multiline':True]['text':' FEAT_MENU','line_number':2469,'multiline':False]['text':'
 * Return the RGB value of a pixel as a long.
 ','line_number':2471,'multiline':True]['text':'
 * Convert pixels in X to dialog units
 ','line_number':2482,'multiline':True]['text':'
 * Convert pixels in Y to dialog units
 ','line_number':2491,'multiline':True]['text':'
 * Return the width in pixels of the given text in the given DC.
 ','line_number':2500,'multiline':True]['text':'
 * Return the width in pixels of the given text in the given DC, taking care
 * of 'encoding' to active codepage conversion.
 ','line_number':2512,'multiline':True]['text':'
 * A quick little routine that will center one window over another, handy for
 * dialog boxes.  Taken from the Win32SDK samples and modified for multiple
 * monitors.
 ','line_number':2537,'multiline':True]['text':' If Vim is minimized put the window in the middle of the screen.','line_number':2558,'multiline':False]['text':' FEAT_GUI_DIALOG','line_number':2597,'multiline':False]['text':' Enable unicode support','line_number':2608,'multiline':False]['text':' The number of bitmaps is fixed.  Exit is missing!','line_number':2617,'multiline':False]['text':' When ignoring events don't show the menu.','line_number':2650,'multiline':False]['text':' Add the string cmd into input buffer','line_number':2672,'multiline':False]['text':'
 * Show or hide the tabline.
 ','line_number':2693,'multiline':True]['text':'
 * Return TRUE when tabline is displayed.
 ','line_number':2712,'multiline':True]['text':'
 * Update the labels of the tabline.
 ','line_number':2721,'multiline':True]['text':' Enable unicode support','line_number':2737,'multiline':False]['text':' Disable redraw for tab updates to eliminate O(N^2) draws.','line_number':2743,'multiline':False]['text':' Add a label for each tab page.  They all contain the same text area.','line_number':2746,'multiline':False]['text':' Add the tab','line_number':2754,'multiline':False]['text':' Remove any old labels.','line_number':2776,'multiline':False]['text':' Re-enable redraw and redraw.','line_number':2783,'multiline':False]['text':'
 * Set the current tab to "nr".  First tab is 1.
 ','line_number':2792,'multiline':True]['text':'
 * ":simalt" command.
 ','line_number':2807,'multiline':True]['text':' for showing system menu','line_number':2821,'multiline':False]['text':' Put a NOP in the typeahead buffer so that the message will get','line_number':2828,'multiline':False]['text':' processed.','line_number':2829,'multiline':False]['text':'
 * Create the find & replace dialogs.
 * You can't have both at once: ":find" when replace is showing, destroys
 * the replace dialog first, and the other way around.
 ','line_number':2841,'multiline':True]['text':' Get the search string to use.','line_number':2854,'multiline':False]['text':' Convert the title from 'encoding' to UTF-16.','line_number':2886,'multiline':False]['text':'
 * Set visibility of the pointer.
 ','line_number':2946,'multiline':True]['text':' Unhide the mouse, we don't get move events here.','line_number':2963,'multiline':False]['text':'reserved param','line_number':2970,'multiline':False]['text':'
     * NOTE: The pop-up menu can eat the mouse up event.
     * We deal with this in normal.c.
     ','line_number':2973,'multiline':True]['text':'
 * Got a message when the system will go down.
 ','line_number':2980,'multiline':True]['text':'
 * Get this message when the user clicks on the cross in the top right corner
 * of a Windows95 window.
 ','line_number':2989,'multiline':True]['text':'
 * Get a message when the window is being destroyed.
 ','line_number':2999,'multiline':True]['text':' make sure all output has been processed','line_number':3018,'multiline':False]['text':' prevent multi-byte characters from misprinting on an invalid','line_number':3021,'multiline':False]['text':' rectangle','line_number':3022,'multiline':False]['text':' Menu bar may wrap differently now','line_number':3053,'multiline':False]['text':'
 * Get a message when the user switches back to vim
 ','line_number':3080,'multiline':True]['text':' we call gui_focus_change() in _OnSetFocus()','line_number':3089,'multiline':False]['text':' gui_focus_change((int)fActivate);','line_number':3090,'multiline':False]['text':'
 * Get current mouse coordinates in text window.
 ','line_number':3100,'multiline':True]['text':'
 * Move mouse pointer to character at (x, y).
 ','line_number':3115,'multiline':True]['text':'
     * Note: InvertRect() excludes right and bottom of rectangle.
     ','line_number':3163,'multiline':True]['text':' make sure it's displayed','line_number':3171,'multiline':False]['text':' wait for a few msec','line_number':3173,'multiline':False]['text':'
 * Check if the specified point is on-screen. (multi-monitor aware)
 ','line_number':3178,'multiline':True]['text':'
 * Check if the whole client area of the specified window is on-screen.
 *
 * Note about DirectX: Windows 10 1809 or above no longer maintains image of
 * the window portion that is off-screen.  Scrolling by DWriteContext_Scroll()
 * only works when the whole window is on-screen.
 ','line_number':3189,'multiline':True]['text':'
 * Return flags used for scrolling.
 * The SW_INVALIDATE is required when part of the window is covered or
 * off-screen. Refer to MS KB Q75236.
 ','line_number':3221,'multiline':True]['text':' Check if the window is (partly) off-screen.','line_number':3232,'multiline':False]['text':' Check if there is a window (partly) on top of us.','line_number':3236,'multiline':False]['text':'
 * On some Intel GPUs, the regions drawn just prior to ScrollWindowEx()
 * may not be scrolled out properly.
 * For gVim, when _OnScroll() is repeated, the character at the
 * previous cursor position may be left drawn after scroll.
 * The problem can be avoided by calling GetPixel() to get a pixel in
 * the region before ScrollWindowEx().
 ','line_number':3248,'multiline':True]['text':'
 * Delete the given number of lines from the given row, scrolling up any
 * text further down within the scroll region.
 ','line_number':3262,'multiline':True]['text':' This seems to be required to avoid the cursor disappearing when','line_number':3296,'multiline':False]['text':' scrolling such that the cursor ends up in the top-left character on','line_number':3297,'multiline':False]['text':' the screen...   But why?  (Webb)','line_number':3298,'multiline':False]['text':' It's probably fixed by disabling drawing the cursor while scrolling.','line_number':3299,'multiline':False]['text':' gui.cursor_is_valid = FALSE;','line_number':3300,'multiline':False]['text':'
 * Insert the given number of lines before the given row, scrolling down any
 * following text within the scroll region.
 ','line_number':3307,'multiline':True]['text':' The SW_INVALIDATE is required when part of the window is covered or','line_number':3336,'multiline':False]['text':' off-screen.  How do we avoid it when it's not needed?','line_number':3337,'multiline':False]['text':' Unload the tearoff bitmap','line_number':3361,'multiline':False]['text':' Destroy our window (if we have one).','line_number':3365,'multiline':False]['text':' ignore WM_DESTROY message now','line_number':3368,'multiline':False]['text':' make a normal font string out of the lf thing:','line_number':3395,'multiline':False]['text':'
 * Set correct LOGFONTW to IME.  Use 'guifontwide' if available, otherwise use
 * 'guifont'.
 ','line_number':3434,'multiline':True]['text':' Work around when PerMonitorV2 is not enabled in the process level.','line_number':3452,'multiline':False]['text':'
 * Handler of gui.wide_font (p_guifontwide) changed notification.
 ','line_number':3458,'multiline':True]['text':'
 * Initialise vim to use the font with the given name.
 * Return FAIL if the font could not be loaded, OK otherwise.
 ','line_number':3499,'multiline':True]['text':' Load the font','line_number':3510,'multiline':False]['text':' When setting 'guifont' to "*" replace it with the actual font name.','line_number':3538,'multiline':False]['text':'
 * Return TRUE if the GUI window is maximized, filling the whole screen.
 * Also return TRUE if the window is snapped.
 ','line_number':3575,'multiline':True]['text':' Assume the window is snapped when the sizes from two APIs differ.','line_number':3595,'multiline':False]['text':'
 * Called when the font changed while the window is maximized or GO_KEEPWINSIZE
 * is set.  Compute the new Rows and Columns.  This is like resizing the
 * window.
 ','line_number':3606,'multiline':True]['text':' Inside another window, don't use the frame and border.','line_number':3630,'multiline':False]['text':'
 * Set the window title
 ','line_number':3636,'multiline':True]['text':' Table for shape IDCs.  Keep in sync with the mshape_names[] table in','line_number':3648,'multiline':False]['text':' misc2.c!','line_number':3649,'multiline':False]['text':' arrow','line_number':3652,'multiline':False]['text':' blank','line_number':3653,'multiline':False]['text':' beam','line_number':3654,'multiline':False]['text':' updown','line_number':3655,'multiline':False]['text':' udsizing','line_number':3656,'multiline':False]['text':' leftright','line_number':3657,'multiline':False]['text':' lrsizing','line_number':3658,'multiline':False]['text':' busy','line_number':3659,'multiline':False]['text':' no','line_number':3660,'multiline':False]['text':' crosshair','line_number':3661,'multiline':False]['text':' hand1','line_number':3662,'multiline':False]['text':' hand2','line_number':3663,'multiline':False]['text':' pencil','line_number':3664,'multiline':False]['text':' question','line_number':3665,'multiline':False]['text':' right-arrow','line_number':3666,'multiline':False]['text':' up-arrow','line_number':3667,'multiline':False]['text':' last one','line_number':3668,'multiline':False]['text':' Set the position to make it redrawn with the new shape.','line_number':3689,'multiline':False]['text':'
 * Wide version of convert_filter().
 ','line_number':3699,'multiline':True]['text':'
 * Pop open a file browser and return the file selected, in allocated memory,
 * or NULL if Cancel is hit.
 *  saving  - TRUE if the file will be saved to, FALSE if it will be opened.
 *  title   - Title message for the file browser dialog.
 *  dflt    - Default name of file.
 *  ext     - Default extension to be added to files without extensions.
 *  initdir - directory in which to open the browser (NULL = current dir)
 *  filter  - Filter for matched files to choose from.
 ','line_number':3718,'multiline':True]['text':' We always use the wide function.  This means enc_to_utf16() must work,','line_number':3737,'multiline':False]['text':' otherwise it fails miserably!','line_number':3738,'multiline':False]['text':' Convert the filter to Windows format.','line_number':3766,'multiline':False]['text':' be compatible with Windows NT 4.0','line_number':3771,'multiline':False]['text':' main Vim window is owner','line_number':3788,'multiline':False]['text':' has an initial dir been specified?','line_number':3789,'multiline':False]['text':' Must have backslashes here, no matter what 'shellslash' says','line_number':3792,'multiline':False]['text':'
     * TODO: Allow selection of multiple files.  Needs another arg to this
     * function to ask for it, and need to use OFN_ALLOWMULTISELECT below.
     * Also, should we use OFN_FILEMUSTEXIST when opening?  Vim can edit on
     * files that don't exist yet, so I haven't put it in.  What about
     * OFN_PATHMUSTEXIST?
     * Don't use OFN_OVERWRITEPROMPT, Vim has its own ":confirm" dialog.
     ','line_number':3803,'multiline':True]['text':' Convert from UTF-16 to 'encoding'.','line_number':3829,'multiline':False]['text':' Give focus back to main window (when using MDI).','line_number':3834,'multiline':False]['text':' Shorten the file name if possible','line_number':3837,'multiline':False]['text':'
 * Convert the string s to the proper format for a filter string by replacing
 * the \t and \n delimiters with \0.
 * Returns the converted string in allocated memory.
 *
 * Keep in sync with convert_filterW() above!
 ','line_number':3844,'multiline':True]['text':' Add two extra NULs to make sure it's properly terminated.','line_number':3867,'multiline':False]['text':'
 * Select a directory.
 ','line_number':3874,'multiline':True]['text':' We fake this: Use a filter that doesn't select anything and a default','line_number':3880,'multiline':False]['text':' file name that won't be used.','line_number':3881,'multiline':False]['text':' FEAT_BROWSE','line_number':3885,'multiline':False]['text':' Obtain dropped position','line_number':3902,'multiline':False]['text':' code of previous call','line_number':3948,'multiline':False]['text':' Left or right scrollbar','line_number':3962,'multiline':False]['text':'
	 * Careful: need to get scrollbar info out of first (left) scrollbar
	 * for window, but keep real scrollbar too because we must pass it to
	 * gui_drag_scrollbar().
	 ','line_number':3964,'multiline':True]['text':' Bottom scrollbar','line_number':3971,'multiline':False]['text':'
		 * "pos" only gives us 16-bit data.  In case of large file,
		 * use GetScrollPos() which returns 32-bit.  Unfortunately it
		 * is not valid while the scrollbar is being dragged.
		 ','line_number':4004,'multiline':True]['text':' TRACE("Unknown scrollbar event %d\n", code);','line_number':4016,'multiline':False]['text':'
     * When moving a vertical scrollbar, move the other vertical scrollbar too.
     ','line_number':4024,'multiline':True]['text':' Don't let us be interrupted here by another message.','line_number':4035,'multiline':False]['text':' When "allow_scrollbar" is FALSE still need to remember the new','line_number':4038,'multiline':False]['text':' position, but don't actually scroll by setting "dont_scroll".','line_number':4039,'multiline':False]['text':' Some parameters for tearoff menus.  All in pixels.','line_number':4059,'multiline':False]['text':' # spaces to pad column with.','line_number':4064,'multiline':False]['text':' defined(FEAT_BEVAL_GUI)','line_number':4074,'multiline':False]['text':' Local variables:','line_number':4077,'multiline':False]['text':'
 * Use the system font for dialogs and tear-off menus.  Remove this line to
 * use DLG_FONT_NAME.
 ','line_number':4083,'multiline':True]['text':' Initial size for the dialog template.  For gui_mch_dialog() it's fixed,','line_number':4092,'multiline':False]['text':' thus there should be room for every dialog.  For tearoffs it's made bigger','line_number':4093,'multiline':False]['text':' when needed.','line_number':4094,'multiline':False]['text':'
 * stuff for dialogs, menus, tearoffs etc.
 ','line_number':4097,'multiline':True]['text':'
 * Figure out how high the menu bar is at the moment.
 ','line_number':4176,'multiline':True]['text':' If TRUE, resize window if menu height changed','line_number':4181,'multiline':False]['text':' The height of the menu cannot be determined while the window is','line_number':4198,'multiline':False]['text':' minimized.  Take the previous height if the menu is changed in that','line_number':4199,'multiline':False]['text':' state, to avoid that Vim's vertical window size accidentally','line_number':4200,'multiline':False]['text':' increases due to the unaccounted-for menu height.','line_number':4201,'multiline':False]['text':'
	 * In case 'lines' is set in _vimrc/_gvimrc window width doesn't
	 * seem to have been set yet, so menu wraps in default window
	 * width which is very narrow.  Instead just return height of a
	 * single menu item.  Will still be wrong when the menu really
	 * should wrap over more than one line.
	 ','line_number':4206,'multiline':True]['text':' FEAT_MENU','line_number':4229,'multiline':False]['text':'
 * Setup for the Intellimouse
 ','line_number':4232,'multiline':True]['text':' Safe default;','line_number':4241,'multiline':False]['text':' Safe default;','line_number':4250,'multiline':False]['text':' Get the default values for the horizontal and vertical scroll steps from','line_number':4256,'multiline':False]['text':' the system.','line_number':4257,'multiline':False]['text':'
 * Mouse scroll event handler.
 ','line_number':4262,'multiline':True]['text':' Mouse hovers over popup window, scroll it if possible.','line_number':4283,'multiline':False]['text':' Translate the scroll event into an event that Vim can process so that','line_number':4310,'multiline':False]['text':' the user has a chance to map the scrollwheel buttons.','line_number':4311,'multiline':False]['text':' The cursor position is relative to the upper-left corner of the screen.','line_number':4326,'multiline':False]['text':'
 * Get Menu Font.
 * Return OK or FAIL.
 ','line_number':4335,'multiline':True]['text':'
 * Set the GUI tabline font to the system menu font
 ','line_number':4358,'multiline':True]['text':'
     * Compute the height of the font used for the tab text
     ','line_number':4379,'multiline':True]['text':'
     * The space used by the tab border and the space between the tab label
     * and the tab border is included as 7.
     ','line_number':4391,'multiline':True]['text':'
 * Invoked when a setting was changed.
 ','line_number':4401,'multiline':True]['text':' Allow to send WM_SIZE and WM_MOVE','line_number':4442,'multiline':False]['text':'
	 * If the cursor is on the tabline, display the tab menu
	 ','line_number':4531,'multiline':True]['text':'
     * If the user double clicked the tabline, create a new tab
     ','line_number':4548,'multiline':True]['text':' If the cursor is on the GUI tabline, don't process this event','line_number':4580,'multiline':False]['text':' <VN> TODO should use system metric?','line_number':4589,'multiline':False]['text':'
		     * Mouse is over the GUI tabline. Display the
		     * tooltip for the tab under the cursor
		     *
		     * Get the cursor position within the tab control
		     ','line_number':4614,'multiline':True]['text':'
			 * Get the tab under the cursor
			 ','line_number':4626,'multiline':True]['text':' Set the maximum width, this also enables using \n for','line_number':4663,'multiline':False]['text':' line break.','line_number':4664,'multiline':False]['text':' can't show tooltip if failed','line_number':4673,'multiline':False]['text':'TRACE("DPI: %d, SIZE=(%d,%d), s_dpi: %d", dpi, size->cx, size->cy, s_dpi);','line_number':4761,'multiline':False]['text':' Calculate new approximate size.','line_number':4763,'multiline':False]['text':' Current size','line_number':4764,'multiline':False]['text':' New size','line_number':4770,'multiline':False]['text':'TRACE("New approx. SIZE=(%d,%d)", size->cx, size->cy);','line_number':4780,'multiline':False]['text':'TRACE("DPI: %d", ydpi);','line_number':4790,'multiline':False]['text':'TRACE("Suggested pos&size: %d,%d %d,%d", rc->left, rc->top,','line_number':4793,'multiline':False]['text':'		rc->right - rc->left, rc->bottom - rc->top);','line_number':4794,'multiline':False]['text':' ch_log(NULL, "WndProc: hwnd = %08x, msg = %x, wParam = %x, lParam = %x",','line_number':4820,'multiline':False]['text':' hwnd, uMsg, wParam, lParam);','line_number':4821,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_ACTIVATE,    _OnActivate);','line_number':4833,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_COMMAND,	_OnCommand);','line_number':4835,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_MOVE,	    _OnMove);','line_number':4843,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_NCACTIVATE,  _OnNCActivate);','line_number':4844,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_SYSCOMMAND,  _OnSysCommand);','line_number':4847,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_SYSKEYDOWN,  _OnAltKey);','line_number':4848,'multiline':False]['text':' HANDLE_MSG(hwnd, WM_WINDOWPOSCHANGING,	_OnWindowPosChanging);','line_number':4850,'multiline':False]['text':' System wants to go down.','line_number':4861,'multiline':False]['text':' Will exit when no changed buffers.','line_number':4862,'multiline':False]['text':' Do NOT allow system to go down.','line_number':4863,'multiline':False]['text':' system only really goes down when wParam is TRUE','line_number':4866,'multiline':False]['text':' Don't use HANDLE_MSG() for WM_CHAR, it truncates wParam to a single','line_number':4874,'multiline':False]['text':' byte while we want the UTF-16 character value.','line_number':4875,'multiline':False]['text':'
	 * if 'winaltkeys' is "no", or it's "menu" and it's not a menu
	 * shortcut key, handle like a typed ALT key, otherwise call Windows
	 * ALT key handling.
	 ','line_number':4880,'multiline':True]['text':' This used to be done only when menu is active: ALT key is used for','line_number':4902,'multiline':False]['text':' that.  But that caused problems when menu is disabled and using','line_number':4903,'multiline':False]['text':' Alt-Tab-Esc: get into a strange state where no mouse-moved events','line_number':4904,'multiline':False]['text':' are received, mouse pointer remains hidden.','line_number':4905,'multiline':False]['text':' HANDLE_MSG doesn't seem to handle this one','line_number':4915,'multiline':False]['text':' Notification for change in SystemParametersInfo()','line_number':4923,'multiline':False]['text':'
 * End of call-back routines
 ','line_number':4965,'multiline':True]['text':' parent window, if specified with -P','line_number':4969,'multiline':False]['text':' Found it.  Store the window ref. and quit searching if MDI','line_number':4982,'multiline':False]['text':' works.','line_number':4983,'multiline':False]['text':' continue searching','line_number':4989,'multiline':False]['text':'
 * Invoked for '-P "title"' argument: search for parent application to open
 * our window in.
 ','line_number':4992,'multiline':True]['text':' Can't use emsg() here, we have not finished initialisation yet.','line_number':5017,'multiline':False]['text':' Replace the executable name from vim(d).exe to gvim(d).exe.','line_number':5057,'multiline':False]['text':' Pass the command line to the new process.','line_number':5068,'multiline':False]['text':' Skip 1st argument.','line_number':5070,'multiline':False]['text':' Create a session file and pass it to the new process.','line_number':5088,'multiline':False]['text':' Set 'bg' to "light".','line_number':5097,'multiline':False]['text':' Check additional arguments to the `:gui` command.','line_number':5120,'multiline':False]['text':' Set up the new command line.','line_number':5131,'multiline':False]['text':' Spawn a new GUI process.','line_number':5138,'multiline':False]['text':'
 * Parse the GUI related command-line arguments.  Any arguments used are
 * deleted from argv, and *argc is decremented accordingly.  This is called
 * when Vim is started, whether or not the GUI has been started.
 ','line_number':5159,'multiline':True]['text':' Check for special OLE command line parameters','line_number':5170,'multiline':False]['text':' Check for a "-silent" argument first.','line_number':5173,'multiline':False]['text':' Register Vim as an OLE Automation server','line_number':5183,'multiline':False]['text':' Unregister Vim as an OLE Automation server','line_number':5196,'multiline':False]['text':' Ignore an -embedding argument. It is only relevant if the','line_number':5209,'multiline':False]['text':' application wants to treat the case when it is started manually','line_number':5210,'multiline':False]['text':' differently from the case where it is started via automation (and','line_number':5211,'multiline':False]['text':' we don't).','line_number':5212,'multiline':False]['text':' automatically exit after registering','line_number':5229,'multiline':False]['text':' stolen from gui_x11.c','line_number':5237,'multiline':False]['text':' enough?','line_number':5247,'multiline':False]['text':'pGetWindowDpiAwarenessContext = (void*)GetProcAddress(hUser32, "GetWindowDpiAwarenessContext");','line_number':5265,'multiline':False]['text':' Disable PerMonitorV2 APIs.','line_number':5288,'multiline':False]['text':'
 * Initialise the GUI.	Create all the windows, set up all the call-backs
 * etc.
 ','line_number':5296,'multiline':True]['text':' Return here if the window was already opened (happens when','line_number':5307,'multiline':False]['text':' gui_mch_dialog() is called early).','line_number':5308,'multiline':False]['text':'
     * Load the tearoff bitmap
     ','line_number':5312,'multiline':True]['text':' Windows takes care of this','line_number':5325,'multiline':False]['text':' First try using the wide version, so that we can use any title.','line_number':5334,'multiline':False]['text':' Otherwise only characters in the active codepage will work.','line_number':5335,'multiline':False]['text':' Open inside the specified parent window.','line_number':5359,'multiline':False]['text':' TODO: last argument should point to a CLIENTCREATESTRUCT','line_number':5360,'multiline':False]['text':' structure.','line_number':5361,'multiline':False]['text':' Any value will do','line_number':5369,'multiline':False]['text':' Any value will do','line_number':5370,'multiline':False]['text':' NOP','line_number':5377,'multiline':False]['text':' If the provided windowid is not valid reset it to zero, so that it','line_number':5388,'multiline':False]['text':' is ignored and we open our own window.','line_number':5389,'multiline':False]['text':' Create a window.  If win_socket_id is not zero without border and','line_number':5393,'multiline':False]['text':' titlebar, it will be reparented below.','line_number':5394,'multiline':False]['text':' Any value will do','line_number':5401,'multiline':False]['text':' Any value will do','line_number':5402,'multiline':False]['text':'TRACE("System DPI: %d, DPI: %d", pGetDpiForSystem(), s_dpi);','line_number':5419,'multiline':False]['text':' Create the text area window','line_number':5426,'multiline':False]['text':' Any value will do for now','line_number':5448,'multiline':False]['text':' Any value will do for now','line_number':5449,'multiline':False]['text':' Try loading an icon from $RUNTIMEPATH/bitmaps/vim.ico.','line_number':5457,'multiline':False]['text':' Do we need to bother with this?','line_number':5473,'multiline':False]['text':' m_fMouseAvail = pGetSystemMetricsForDpi(SM_MOUSEPRESENT, s_dpi);','line_number':5474,'multiline':False]['text':' Get background/foreground colors from the system','line_number':5476,'multiline':False]['text':' Get the colors from the "Normal" group (set in syntax.c or in a vimrc','line_number':5479,'multiline':False]['text':' file)','line_number':5480,'multiline':False]['text':'
     * Check that none of the colors are the same as the background color.
     * Then store the current values as the defaults.
     ','line_number':5483,'multiline':True]['text':' Get the colors for the highlight groups (gui_check_colors() might have','line_number':5491,'multiline':False]['text':' changed them)','line_number':5492,'multiline':False]['text':'
     * Start out by adding the configured border width into the border offset.
     ','line_number':5495,'multiline':True]['text':'
     * Set up for Intellimouse processing
     ','line_number':5500,'multiline':True]['text':'
     * compute a couple of metrics used for the dialogs
     ','line_number':5505,'multiline':True]['text':'
     * Create the toolbar
     ','line_number':5510,'multiline':True]['text':'
     * Create the tabline
     ','line_number':5516,'multiline':True]['text':'
     * Initialise the dialog box stuff
     ','line_number':5522,'multiline':True]['text':' Initialise the struct','line_number':5527,'multiline':False]['text':' set the v:windowid variable','line_number':5538,'multiline':False]['text':' Display any pending error messages','line_number':5548,'multiline':False]['text':'
 * Get the size of the screen, taking position on multiple monitors into
 * account (if supported).
 ','line_number':5554,'multiline':True]['text':' work out which monitor the window is on, and get *its* work area','line_number':5564,'multiline':False]['text':' this is the old method...','line_number':5575,'multiline':False]['text':'
 * Set the size of the window to the given width and height in pixels.
 ','line_number':5579,'multiline':True]['text':' Try to keep window completely on screen.','line_number':5596,'multiline':False]['text':' Get position of the screen work area.  This is the part that is not','line_number':5597,'multiline':False]['text':' used by the taskbar or appbars.','line_number':5598,'multiline':False]['text':' Resizing a maximized window looks very strange, unzoom it first.','line_number':5601,'multiline':False]['text':' But don't do it when still starting up, it may have been requested in','line_number':5602,'multiline':False]['text':' the shortcut.','line_number':5603,'multiline':False]['text':' Use the suggested position when in WM_DPICHANGED.','line_number':5608,'multiline':False]['text':' Use current position.','line_number':5611,'multiline':False]['text':' compute the size of the outside of the window','line_number':5614,'multiline':False]['text':' The following should take care of keeping Vim on the same monitor, no','line_number':5622,'multiline':False]['text':' matter if the secondary monitor is left or right of the primary','line_number':5623,'multiline':False]['text':' monitor.','line_number':5624,'multiline':False]['text':' If the window is going off the screen, move it on to the screen.','line_number':5628,'multiline':False]['text':' Don't adjust the position when in WM_DPICHANGED.','line_number':5629,'multiline':False]['text':'TRACE("New pos: %d,%d  New size: %d,%d",','line_number':5656,'multiline':False]['text':'	    window_rect.left, window_rect.top, win_width, win_height);','line_number':5657,'multiline':False]['text':' Menu may wrap differently now','line_number':5662,'multiline':False]['text':'
 * Set the current text font.
 ','line_number':5698,'multiline':True]['text':'
 * Set the current text foreground color.
 ','line_number':5708,'multiline':True]['text':'
 * Set the current text background color.
 ','line_number':5717,'multiline':True]['text':'
 * Set the current text special color.
 ','line_number':5726,'multiline':True]['text':'
 * Multi-byte handling, originally by Sung-Hoon Baek.
 * First static functions (no prototypes generated).
 ','line_number':5736,'multiline':True]['text':' Apparently not needed for Cygwin or MinGW.','line_number':5741,'multiline':False]['text':'
 * handle WM_IME_NOTIFY message
 ','line_number':5745,'multiline':True]['text':' Work around when PerMonitorV2 is not enabled in the process level.','line_number':5763,'multiline':False]['text':' Disable langmap','line_number':5768,'multiline':False]['text':' Unshown 'keymap' in status lines','line_number':5773,'multiline':False]['text':' Save cursor position','line_number':5776,'multiline':False]['text':' This must be called here before','line_number':5780,'multiline':False]['text':' status_redraw_curbuf(), otherwise the mode','line_number':5781,'multiline':False]['text':' message may appear in the wrong position.','line_number':5782,'multiline':False]['text':' Restore cursor position','line_number':5786,'multiline':False]['text':' Composition unfinished.','line_number':5808,'multiline':False]['text':'
 * void GetResultStr()
 *
 * This handles WM_IME_COMPOSITION with GCS_RESULTSTR flag on.
 * get complete composition string
 ','line_number':5821,'multiline':True]['text':' Input context handle.','line_number':5830,'multiline':False]['text':' Get the length of the composition string.','line_number':5838,'multiline':False]['text':' Allocate the requested buffer plus space for the NUL character.','line_number':5843,'multiline':False]['text':' Reads in the composition string.','line_number':5848,'multiline':False]['text':' For global functions we need prototypes.','line_number':5859,'multiline':False]['text':'
 * set font to IM.
 ','line_number':5862,'multiline':True]['text':'
 * Notify cursor position to IM.
 ','line_number':5877,'multiline':True]['text':' Work around when PerMonitorV2 is not enabled in the process level.','line_number':5895,'multiline':False]['text':'
 * Set IM status on ("active" is TRUE) or off ("active" is FALSE).
 ','line_number':5905,'multiline':True]['text':' if NULL imm32.dll wasn't loaded (yet)','line_number':5922,'multiline':False]['text':'
     * for Korean ime
     ','line_number':5945,'multiline':True]['text':' if we have a saved conversion status, restore it','line_number':5957,'multiline':False]['text':' save conversion status and disable korean','line_number':5965,'multiline':False]['text':'
 * Get IM status.  When IM is on, return not 0.  Else return 0.
 ','line_number':5982,'multiline':True]['text':' FEAT_MBYTE_IME','line_number':6004,'multiline':False]['text':'
 * Convert latin9 text "text[len]" to ucs-2 in "unicodebuf".
 ','line_number':6007,'multiline':True]['text':' euro','line_number':6020,'multiline':False]['text':' S hat','line_number':6021,'multiline':False]['text':' S -hat','line_number':6022,'multiline':False]['text':' Z hat','line_number':6023,'multiline':False]['text':' Z -hat','line_number':6024,'multiline':False]['text':' OE','line_number':6025,'multiline':False]['text':' oe','line_number':6026,'multiline':False]['text':' Y','line_number':6027,'multiline':False]['text':'
 * What is this for?  In the case where you are using Win98 or Win2K or later,
 * and you are using a Hebrew font (or Arabic!), Windows does you a favor and
 * reverses the string sent to the TextOut... family.  This sucks, because we
 * go to a lot of effort to do the right thing, and there doesn't seem to be a
 * way to tell Windblows not to do this!
 *
 * The short of it is that this 'RevOut' only gets called if you are running
 * one of the new, "improved" MS OSes, and only if you are running in
 * 'rightleft' mode.  It makes display take *slightly* longer, but not
 * noticeably so.
 ','line_number':6034,'multiline':True]['text':' Note: LineTo() excludes the last pixel in the line.','line_number':6081,'multiline':False]['text':'
     * Italic and bold text seems to have an extra row of pixels at the bottom
     * (below where the bottom of the character should be).  If we draw the
     * characters with a solid background, the top row of pixels in the
     * character below will be overwritten.  We can fix this by filling in the
     * background ourselves, to the correct character proportions, and then
     * writing the character in transparent mode.  Still have a problem when
     * the character is "_", which gets written on to the character below.
     * New fix: set gui.char_ascent to -1.  This shifts all characters up one
     * pixel in their slots, which fixes the problem with the bottom row of
     * pixels.	We still need this code because otherwise the top row of pixels
     * becomes a problem. - webb.
     ','line_number':6143,'multiline':True]['text':'
	 * Clear background first.
	 * Note: FillRect() excludes right and bottom of rectangle.
	 ','line_number':6164,'multiline':True]['text':' Compute the length in display cells.','line_number':6172,'multiline':False]['text':' Cache the created brush, that saves a lot of time.  We need two:','line_number':6179,'multiline':False]['text':' one for cursor background and one for the normal background.','line_number':6180,'multiline':False]['text':'
	 * When drawing block cursor, prevent inverted character spilling
	 * over character cell (can happen with bold/italic)
	 ','line_number':6205,'multiline':True]['text':' Don't give an out-of-memory message here, it would call us','line_number':6230,'multiline':False]['text':' recursively.','line_number':6231,'multiline':False]['text':'
     * We have to provide the padding argument because italic and bold versions
     * of fixed-width fonts are often one pixel or so wider than their normal
     * versions.
     * No check for DRAW_BOLD, Windows will have done it already.
     ','line_number':6238,'multiline':True]['text':' Check if there are any UTF-8 characters.  If not, use normal text','line_number':6245,'multiline':False]['text':' output to speed up output.','line_number':6246,'multiline':False]['text':' Quick hack to enable DirectWrite.  To use DirectWrite (antialias), it is','line_number':6253,'multiline':False]['text':' required that unicode drawing routine, currently.  So this forces it','line_number':6254,'multiline':False]['text':' enabled.','line_number':6255,'multiline':False]['text':' Keep n < len, to enter block for unicode.','line_number':6257,'multiline':False]['text':' Check if the Unicode buffer exists and is big enough.  Create it','line_number':6260,'multiline':False]['text':' with the same length as the multi-byte string, the number of wide','line_number':6261,'multiline':False]['text':' characters is always equal or smaller.','line_number':6262,'multiline':False]['text':' Output UTF-8 characters.  Composing characters should be','line_number':6279,'multiline':False]['text':' handled here.','line_number':6280,'multiline':False]['text':' string length in words','line_number':6282,'multiline':False]['text':' cell width of string up to composing char','line_number':6283,'multiline':False]['text':' width of current cell','line_number':6284,'multiline':False]['text':' Turn into UTF-16 encoding.','line_number':6294,'multiline':False]['text':' don't use 4 for unprintable char','line_number':6308,'multiline':False]['text':' Use unicodepdy to make characters fit as we expect, even','line_number':6314,'multiline':False]['text':' when the font uses different widths (e.g., bold character','line_number':6315,'multiline':False]['text':' is wider).','line_number':6316,'multiline':False]['text':' Add one to "cells" for italics.','line_number':6331,'multiline':False]['text':' used for underlining','line_number':6342,'multiline':False]['text':' If we want to display codepage data, and the current CP is not the','line_number':6346,'multiline':False]['text':' ANSI one, we need to go via Unicode.','line_number':6347,'multiline':False]['text':' Use unicodepdy to make characters fit as we expect, even','line_number':6359,'multiline':False]['text':' when the font uses different widths (e.g., bold character','line_number':6360,'multiline':False]['text':' is wider).','line_number':6361,'multiline':False]['text':' Windows will mess up RL text, so we have to draw it character by','line_number':6383,'multiline':False]['text':' character.  Only do this if RL is on, since it's slow.','line_number':6384,'multiline':False]['text':' Underline','line_number':6394,'multiline':False]['text':' When p_linespace is 0, overwrite the bottom row of pixels.','line_number':6397,'multiline':False]['text':' Otherwise put the line just below the character.','line_number':6398,'multiline':False]['text':' Strikethrough','line_number':6405,'multiline':False]['text':' Undercurl','line_number':6412,'multiline':False]['text':'
 * Output routines.
 ','line_number':6429,'multiline':True]['text':'
 * Flush any output to the screen
 ','line_number':6433,'multiline':True]['text':' FIXME: dirty trick: Because the gui_get_base_height() doesn't include','line_number':6465,'multiline':False]['text':' the menubar for MSwin, we subtract it from the screen height, so that','line_number':6466,'multiline':False]['text':' the window size can be made to fit on the screen.','line_number':6467,'multiline':False]['text':'
 * Add a sub menu to the menu bar.
 ','line_number':6477,'multiline':True]['text':' Fix window size if menu may have wrapped','line_number':6514,'multiline':False]['text':' Find the position of the current cursor','line_number':6542,'multiline':False]['text':'
 * Given a menu descriptor, e.g. "File.New", find it in the menu hierarchy and
 * create it as a pseudo-"tearoff menu".
 ','line_number':6562,'multiline':True]['text':' Found the menu, so tear it off.','line_number':6571,'multiline':False]['text':'
 * Add a menu item to a menu
 ','line_number':6577,'multiline':True]['text':'
 * Destroy the machine specific menu widget.
 ','line_number':6642,'multiline':True]['text':'
     * is this a toolbar button?
     ','line_number':6649,'multiline':True]['text':' This menu must not show up when rebuilding the tearoff window.','line_number':6678,'multiline':False]['text':'hackish','line_number':6690,'multiline':False]['text':' FEAT_TEAROFF','line_number':6724,'multiline':False]['text':'
 * Make a menu either grey or not grey.
 ','line_number':6726,'multiline':True]['text':'
     * is this a toolbar button?
     ','line_number':6735,'multiline':True]['text':'
	 * A tearoff button has changed state.
	 ','line_number':6754,'multiline':True]['text':' FEAT_MENU','line_number':6769,'multiline':False]['text':' define some macros used to make the dialogue creation more readable','line_number':6772,'multiline':False]['text':'
 * stuff for dialogs
 ','line_number':6778,'multiline':True]['text':'
 * The callback routine used by all the dialogs.  Very simple.  First,
 * acknowledges the INITDIALOG message so that Windows knows to do standard
 * dialog stuff (Return = default, Esc = cancel....) Second, if a button is
 * pressed, return that button's ID - IDCANCEL (2), which is the button's
 * number.
 ','line_number':6782,'multiline':True]['text':' Set focus to the dialog.  Set the default button, if specified.','line_number':6799,'multiline':False]['text':' We don't have a default, set focus on another element of the','line_number':6804,'multiline':False]['text':' dialog window, probably the icon','line_number':6805,'multiline':False]['text':' Don't end the dialog if something was selected that was','line_number':6814,'multiline':False]['text':' not a button.','line_number':6815,'multiline':False]['text':' If the edit box exists, copy the string.','line_number':6819,'multiline':False]['text':'
	 * Need to check for IDOK because if the user just hits Return to
	 * accept the default value, some reason this is what we get.
	 ','line_number':6832,'multiline':True]['text':'
 * Create a dialog dynamically from the parameter strings.
 * type		= type of dialog (question, alert, etc.)
 * title	= dialog title. may be NULL for default title.
 * message	= text to display. Dialog sizes to accommodate it.
 * buttons	= '\n' separated list of button captions, default first.
 * dfltbutton	= number of default button.
 *
 * This routine returns 1 if the first button is pressed,
 *			2 for the second, etc.
 *
 *			0 indicates Esc was pressed.
 *			-1 for unexpected error
 *
 * If stubbing out this fn, return 1.
 ','line_number':6854,'multiline':True]['text':' must match names in resource file','line_number':6871,'multiline':False]['text':' Don't output anything in silent mode ("ex -s")','line_number':6930,'multiline':False]['text':' return default option','line_number':6935,'multiline':False]['text':' allocate some memory for dialog template','line_number':6950,'multiline':False]['text':' TODO should compute this really','line_number':6951,'multiline':False]['text':'
     * make a copy of 'buttons' to fiddle with it.  compiler grizzles because
     * vim_strsave() doesn't take a const arg (why not?), so cast away the
     * const.
     ','line_number':6958,'multiline':True]['text':' Change from one-based to zero-based','line_number':6967,'multiline':False]['text':' Count buttons','line_number':6969,'multiline':False]['text':' Allocate array to hold the width of each button','line_number':6979,'multiline':False]['text':' Allocate array to hold the X position of each button','line_number':6984,'multiline':False]['text':'
     * Calculate how big the dialog must be.
     ','line_number':6989,'multiline':True]['text':' Minimum width for horizontal button','line_number':7012,'multiline':False]['text':' Maximum width of a dialog, if possible','line_number':7015,'multiline':False]['text':' We don't have a window, use the desktop area.','line_number':7020,'multiline':False]['text':' Leave some room for the taskbar.','line_number':7025,'multiline':False]['text':' Use our own window for the size, unless it's very small.','line_number':7030,'multiline':False]['text':' Set dlgwidth to width of message.','line_number':7046,'multiline':False]['text':' Copy the message into "ga", changing NL to CR-NL and inserting line','line_number':7047,'multiline':False]['text':' breaks where needed.','line_number':7048,'multiline':False]['text':' at least one line','line_number':7055,'multiline':False]['text':' Need to figure out where to break the string.  The system does it','line_number':7057,'multiline':False]['text':' at a word boundary, which would mean we can't compute the number of','line_number':7058,'multiline':False]['text':' wrapped lines.','line_number':7059,'multiline':False]['text':' Line will wrap.','line_number':7071,'multiline':False]['text':' break the line just after a space','line_number':7078,'multiline':False]['text':' roundoff space','line_number':7103,'multiline':False]['text':' Add width of icon to dlgwidth, and some space','line_number':7108,'multiline':False]['text':'
     * Check button names.  A long one will make the dialog wider.
     * When called early (-register error message) p_go isn't initialized.
     ','line_number':7115,'multiline':True]['text':' Place buttons horizontally if they fit.','line_number':7122,'multiline':False]['text':' Last button name.','line_number':7130,'multiline':False]['text':' Padding within button','line_number':7134,'multiline':False]['text':' Pad between buttons','line_number':7137,'multiline':False]['text':' Too wide to fit on the screen.','line_number':7142,'multiline':False]['text':' Stack buttons vertically.','line_number':7149,'multiline':False]['text':' Last button name.','line_number':7155,'multiline':False]['text':' Padding within button','line_number':7157,'multiline':False]['text':' Padding around button','line_number':7158,'multiline':False]['text':' Don't allow a really thin dialog!','line_number':7166,'multiline':False]['text':' start to fill in the dlgtemplate information.  addressing by WORDs','line_number':7168,'multiline':False]['text':' (lExtendedStyle)','line_number':7172,'multiline':False]['text':'save where the number of items must be stored','line_number':7173,'multiline':False]['text':' NumberOfItems(will change later)','line_number':7174,'multiline':False]['text':' x','line_number':7175,'multiline':False]['text':' y','line_number':7176,'multiline':False]['text':' cx','line_number':7177,'multiline':False]['text':' Dialog height.','line_number':7179,'multiline':False]['text':' Dialog needs to be taller if contains an edit box.','line_number':7186,'multiline':False]['text':' Restrict the size to a maximum.  Causes a scrollbar to show up.','line_number':7191,'multiline':False]['text':' Make sure scrollbar doesn't appear in the middle of the dialog','line_number':7197,'multiline':False]['text':' Menu','line_number':7203,'multiline':False]['text':' Class','line_number':7204,'multiline':False]['text':' copy the title of the dialog','line_number':7206,'multiline':False]['text':' do the font, since DS_3DLOOK doesn't work properly','line_number':7211,'multiline':False]['text':' point size','line_number':7215,'multiline':False]['text':' point size','line_number':7224,'multiline':False]['text':' Now it's X offset','line_number':7236,'multiline':False]['text':' get end of this button.','line_number':7239,'multiline':False]['text':'
	 * old NOTE:
	 * setting the BS_DEFPUSHBUTTON style doesn't work because Windows sets
	 * the focus to the first tab-able button and in so doing makes that
	 * the default!! Grrr.  Workaround: Make the default button the only
	 * one with WS_TABSTOP style. Means user can't tab between buttons, but
	 * he/she can use arrow keys.
	 *
	 * new NOTE: BS_DEFPUSHBUTTON is required to be able to select the
	 * right button when hitting <Enter>.  E.g., for the ":confirm quit"
	 * dialog.  Also needed for when the textfield is the default control.
	 * It appears to work now (perhaps not on Win95?).
	 ','line_number':7248,'multiline':True]['text':' TBK','line_number':7267,'multiline':False]['text':' TBK','line_number':7279,'multiline':False]['text':'next button','line_number':7284,'multiline':False]['text':' Vim icon','line_number':7288,'multiline':False]['text':' Dialog message','line_number':7297,'multiline':False]['text':' Edit box','line_number':7305,'multiline':False]['text':' Let the dialog_callback() function know which button to make default','line_number':7323,'multiline':False]['text':' If we have an edit box, make that the default. We also need to tell','line_number':7324,'multiline':False]['text':' dialog_callback() if this dialog contains an edit box or not. We do','line_number':7325,'multiline':False]['text':' this by setting s_textfield if it does.','line_number':7326,'multiline':False]['text':' show the dialog box modally and get a return value','line_number':7338,'multiline':False]['text':' Focus back to our window (for when MDI is used).','line_number':7351,'multiline':False]['text':' FEAT_GUI_DIALOG','line_number':7357,'multiline':False]['text':'
 * Put a simple element (basic class) onto a dialog template in memory.
 * return a pointer to where the next item should be added.
 *
 * parameters:
 *  lStyle = additional style flags
 *		(be careful, NT3.51 & Win32s will ignore the new ones)
 *  x,y = x & y positions IN DIALOG UNITS
 *  w,h = width and height IN DIALOG UNITS
 *  Id  = ID used in messages
 *  clss  = class ID, e.g 0x0080 for a button, 0x0082 for a static
 *  caption = usually text or resource name
 *
 *  TODO: use the length information noted here to enable the dialog creation
 *  routines to work out more exactly how much memory they need to alloc.
 ','line_number':7359,'multiline':True]['text':' Align to dword boundary','line_number':7389,'multiline':False]['text':' LOWORD (lExtendedStyle)','line_number':7393,'multiline':False]['text':' HIWORD (lExtendedStyle)','line_number':7394,'multiline':False]['text':'9 or 10 words in all','line_number':7399,'multiline':False]['text':'2 more here','line_number':7402,'multiline':False]['text':'strlen(caption)+1','line_number':7404,'multiline':False]['text':' advance pointer over nExtraStuff WORD   - 2 more','line_number':7407,'multiline':False]['text':' total = 15 + strlen(caption) words','line_number':7409,'multiline':False]['text':' bytes read = 2 * total','line_number':7410,'multiline':False]['text':'
 * Helper routine.  Take an input pointer, return closest pointer that is
 * aligned on a DWORD (4 byte) boundary.  Taken from the Win32SDK samples.
 ','line_number':7414,'multiline':True]['text':'
 * Helper routine.  Takes second parameter as Ansi string, copies it to first
 * parameter as wide character (16-bits / char) string, and returns integer
 * number of wide characters (words) in string (including the trailing wide
 * char NULL).  Partly taken from the Win32SDK samples.
 * If "use_enc" is TRUE, 'encoding' is used for "lpAnsiIn". If FALSE, current
 * ACP is used for "lpAnsiIn". ','line_number':7431,'multiline':True]['text':' include NUL character','line_number':7445,'multiline':False]['text':' Not a codepage, use our own conversion function.','line_number':7451,'multiline':False]['text':' Use Win32 conversion function.','line_number':7461,'multiline':False]['text':' replace tabs with spaces','line_number':7468,'multiline':False]['text':'
 * Lookup menu handle from "menu_id".
 ','line_number':7476,'multiline':True]['text':' this menu has just been deleted','line_number':7486,'multiline':False]['text':'
 * The callback function for all the modeless dialogs that make up the
 * "tearoff menus" Very simple - forward button presses (to fool Vim into
 * thinking its menus have been clicked), and go away when closed.
 ','line_number':7496,'multiline':True]['text':' May show the mouse pointer again.','line_number':7514,'multiline':False]['text':' reserved param','line_number':7534,'multiline':False]['text':'
		 * NOTE: The pop-up menu can eat the mouse up event.
		 * We deal with this in normal.c.
		 ','line_number':7537,'multiline':True]['text':' Pass on messages to the main Vim window','line_number':7544,'multiline':False]['text':'
	 * Give main window the focus back: this is so after
	 * choosing a tearoff button you can start typing again
	 * straight away.
	 ','line_number':7546,'multiline':True]['text':' When moved around, give main window the focus back.','line_number':7560,'multiline':False]['text':'
 * Computes the dialog base units based on the current dialog font.
 * We don't use the GetDialogBaseUnits() API, because we don't use the
 * (old-style) system font.
 ','line_number':7569,'multiline':True]['text':'
 * Create a pseudo-"tearoff menu" based on the child
 * items of a given menu pointer.
 ','line_number':7602,'multiline':True]['text':'
     * If this menu is already torn off, move it to the mouse position.
     ','line_number':7640,'multiline':True]['text':'
     * Create a new tearoff.
     ','line_number':7654,'multiline':True]['text':' Allocate memory to store the dialog template.  It's made bigger when','line_number':7660,'multiline':False]['text':' needed.','line_number':7661,'multiline':False]['text':' Calculate width of a single space.  Used for padding columns to the','line_number':7682,'multiline':False]['text':' right width.','line_number':7683,'multiline':False]['text':' Figure out max width of the text column, the accelerator column and the','line_number':7686,'multiline':False]['text':' optional submenu column.','line_number':7687,'multiline':False]['text':' Use "dname" here to compute the width of the visible text.','line_number':7694,'multiline':False]['text':' no accelerators','line_number':7708,'multiline':False]['text':' there is an accelerator column','line_number':7716,'multiline':False]['text':'
     * Now find the total width of our 'menu'.
     ','line_number':7721,'multiline':True]['text':' start to fill in the dlgtemplate information.  addressing by WORDs','line_number':7736,'multiline':False]['text':' save where the number of items must be stored','line_number':7744,'multiline':False]['text':' NumberOfItems(will change later)','line_number':7745,'multiline':False]['text':' x','line_number':7748,'multiline':False]['text':' x','line_number':7750,'multiline':False]['text':' y','line_number':7752,'multiline':False]['text':' y','line_number':7754,'multiline':False]['text':' cx','line_number':7755,'multiline':False]['text':' dialog height: changed later anyway','line_number':7757,'multiline':False]['text':' Menu','line_number':7758,'multiline':False]['text':' Class','line_number':7759,'multiline':False]['text':' copy the title of the dialog','line_number':7761,'multiline':False]['text':' do the font, since DS_3DLOOK doesn't work properly','line_number':7767,'multiline':False]['text':' point size','line_number':7771,'multiline':False]['text':' point size','line_number':7780,'multiline':False]['text':'
     * Loop over all the items in the menu.
     * But skip over the tearbar.
     ','line_number':7785,'multiline':True]['text':' this menu has just been deleted','line_number':7796,'multiline':False]['text':' Check if there still is plenty of room in the template.  Make it','line_number':7804,'multiline':False]['text':' larger when needed.','line_number':7805,'multiline':False]['text':' Figure out minimal length of this menu label.  Use "name" for the','line_number':7824,'multiline':False]['text':' actual text, "dname" for estimating the displayed size.  "name"','line_number':7825,'multiline':False]['text':' has "&a" for mnemonic and includes the accelerator.','line_number':7826,'multiline':False]['text':' Allocate menu label and fill it in','line_number':7855,'multiline':False]['text':' stop at TAB before actext','line_number':7861,'multiline':False]['text':' no actext, use whole name','line_number':7863,'multiline':False]['text':'
	 * BS_LEFT will just be ignored on Win32s/NT3.5x - on
	 * W95/NT4 it makes the tear-off look more like a menu.
	 ','line_number':7885,'multiline':True]['text':' show modelessly','line_number':7903,'multiline':False]['text':'
     * Reassert ourselves as the active window.  This is so that after creating
     * a tearoff, the user doesn't have to click with the mouse just to start
     * typing again!
     ','line_number':7916,'multiline':True]['text':' make sure the right buttons are enabled','line_number':7923,'multiline':False]['text':'
 * Create the toolbar, initially unpopulated.
 *  (just like the menu, there are no defaults, it's all
 *  set up through menu.vim)
 ','line_number':7931,'multiline':True]['text':'any old big number','line_number':7943,'multiline':False]['text':'number of images in initial bitmap','line_number':7944,'multiline':False]['text':' id of initial bitmap','line_number':7946,'multiline':False]['text':' initial number of buttons','line_number':7948,'multiline':False]['text':'api guide is wrong!','line_number':7949,'multiline':False]['text':' Remove transparency from the toolbar to prevent the main window','line_number':7956,'multiline':False]['text':' background colour showing through','line_number':7957,'multiline':False]['text':'TRACE("Pad: %d, %d", tbm.cxPad, tbm.cyPad);','line_number':7977,'multiline':False]['text':'TRACE("ButtonSpacing: %d, %d", tbm.cxButtonSpacing, tbm.cyButtonSpacing);','line_number':7978,'multiline':False]['text':'TRACE("button size: %d, %d", w, h);','line_number':7982,'multiline':False]['text':'DWORD s = SendMessage(s_toolbarhwnd, TB_GETBUTTONSIZE, 0, 0);','line_number':7986,'multiline':False]['text':'TRACE("actual button size: %d, %d", LOWORD(s), HIWORD(s));','line_number':7987,'multiline':False]['text':' TODO:','line_number':7989,'multiline':False]['text':' Currently, this function only updates the size of toolbar buttons.','line_number':7990,'multiline':False]['text':' It would be nice if the toolbar images are resized based on DPI.','line_number':7991,'multiline':False]['text':'
     * Check user bitmaps first, unless builtin is specified.
     ','line_number':8010,'multiline':True]['text':'
	 * If the LoadImage call failed, or the "icon=" file
	 * didn't exist or wasn't specified, try the menu name
	 ','line_number':8032,'multiline':True]['text':' i will be set to -1 if it fails','line_number':8061,'multiline':False]['text':'
 * Get tabpage_T from POINT.
 ','line_number':8088,'multiline':True]['text':' ignore if a window under cursor is not tabcontrol.','line_number':8102,'multiline':False]['text':' backup default cursor','line_number':8139,'multiline':False]['text':' Check if the mouse cursor goes over the center of','line_number':8162,'multiline':False]['text':' the next tab to prevent "flickering".','line_number':8163,'multiline':False]['text':'
 * Make the GUI window come to the foreground.
 ','line_number':8210,'multiline':True]['text':' Mask bitmap handle','line_number':8287,'multiline':False]['text':' Make hole','line_number':8335,'multiline':False]['text':' Paint sign','line_number':8339,'multiline':False]['text':' get extension','line_number':8382,'multiline':False]['text':'
 * BALLOON-EVAL IMPLEMENTATION FOR WINDOWS.
 *  Added by Sergey Khorev <sergey.khorev@gmail.com>
 *
 * The only reused thing is beval.h and get_beval_info()
 * from gui_beval.c (note it uses x and y of the BalloonEval struct
 * to get current mouse position).
 *
 * Trying to use as more Windows services as possible, and as less
 * IE version as possible :)).
 *
 * 1) Don't create ToolTip in gui_mch_create_beval_area, only initialize
 * BalloonEval struct.
 * 2) Enable/Disable simply create/kill BalloonEval Timer
 * 3) When there was enough inactivity, timer procedure posts
 * async request to debugger
 * 4) gui_mch_post_balloon (invoked from netbeans.c) creates tooltip control
 * and performs some actions to show it ASAP
 * 5) WM_NOTIFY:TTN_POP destroys created tooltip
 ','line_number':8437,'multiline':True]['text':' Don't use string resources','line_number':8479,'multiline':False]['text':' switch multiline tooltips on','line_number':8485,'multiline':False]['text':' Limit ballooneval bounding rect to CursorPos neighbourhood.','line_number':8490,'multiline':False]['text':' Make tooltip appear sooner.','line_number':8497,'multiline':False]['text':' I've performed some tests and it seems the longest possible life time','line_number':8499,'multiline':False]['text':' of tooltip is 30 seconds.','line_number':8500,'multiline':False]['text':'
     * HACK: force tooltip to appear, because it'll not appear until
     * first mouse move. D*mn M$
     * Amazingly moving (2, 2) and then (-1, -1) the mouse doesn't move.
     ','line_number':8502,'multiline':True]['text':' Pointer resting in one place long enough, it's time to show','line_number':8546,'multiline':False]['text':' the tooltip.','line_number':8547,'multiline':False]['text':' cursor is still here','line_number':8593,'multiline':False]['text':' ignored, always use s_textArea','line_number':8602,'multiline':False]['text':' partially stolen from gui_beval.c','line_number':8607,'multiline':False]['text':' it is not our tooltip','line_number':8638,'multiline':False]['text':' Before tooltip disappear','line_number':8648,'multiline':False]['text':' if you get there then we have new common controls','line_number':8656,'multiline':False]['text':' if we get here then we have new common controls','line_number':8664,'multiline':False]['text':' FEAT_BEVAL_GUI','line_number':8690,'multiline':False]['text':'
 * We have multiple signs to draw at the same location. Draw the
 * multi-sign indicator (down-arrow) instead. This is the Win32 version.
 ','line_number':8693,'multiline':True]['text':' TODO: at the moment, this is just a copy of test_gui_mouse_event.','line_number':8730,'multiline':False]['text':' But, we could instead generate actual Win32 mouse event messages,','line_number':8731,'multiline':False]['text':' ie. to make it consistent with test_gui_w32_sendevent_keyboard.','line_number':8732,'multiline':False]['text':' Note: "move" is optional, requires fewer arguments','line_number':8739,'multiline':False]['text':' the "move" argument expects row and col coordnates to be in pixels,','line_number':8752,'multiline':False]['text':' unless "cell" is specified and is TRUE.','line_number':8753,'multiline':False]['text':' calculate the middle of the character cell','line_number':8756,'multiline':False]['text':' Note: Cell coordinates are 1-based from vimscript','line_number':8757,'multiline':False]['text':' Reset the scroll values to known values.','line_number':8771,'multiline':False]['text':' XXX: Remove this when/if the scroll step is made configurable.','line_number':8772,'multiline':False]['text':' If there are modifiers in the args, and it is not a keyup event and','line_number':8810,'multiline':False]['text':' vkCode is not a modifier key, then we generate virtual modifier key','line_number':8811,'multiline':False]['text':' messages before sending the actual key message.','line_number':8812,'multiline':False]