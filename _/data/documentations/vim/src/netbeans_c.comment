['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *			Netbeans integration by David Weatherford
 *			Adopted for Win32 by Sergey Khorev
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 ','line_number':1,'multiline':True]['text':'
 * Implements client side of org.netbeans.modules.emacs editor
 * integration protocol.  Be careful!  The protocol uses offsets
 * which are *between* characters, whereas vim uses line number
 * and column number which are *on* characters.
 * See ":help netbeans-protocol" for explanation.
 *
 * The Netbeans messages are received and queued in the gui event loop, or in
 * the select loop when Vim runs in a terminal. These messages are processed
 * by netbeans_parse_messages() which is invoked in the idle loop when Vim is
 * waiting for user input. The function netbeans_parse_messages() is also
 * called from the ":sleep" command, to allow the execution of test cases that
 * may not invoke the idle loop.
 ','line_number':11,'multiline':True]['text':' typenr for "guarded" annotation','line_number':39,'multiline':False]['text':' base for "guarded" sign id's','line_number':40,'multiline':False]['text':' max length of color name in defineAnnoType','line_number':41,'multiline':False]['text':' The first implementation (working only with Netbeans) returned "1.1".  The','line_number':43,'multiline':False]['text':' protocol implemented here also supports A-A-P.','line_number':44,'multiline':False]['text':' current command number for reply','line_number':67,'multiline':False]['text':'
 * Include the debugging code if wanted.
 ','line_number':70,'multiline':True]['text':'
 * Callback invoked when the channel is closed.
 ','line_number':80,'multiline':True]['text':'
 * Close the connection and cleanup.
 * May be called when the socket was closed earlier.
 ','line_number':89,'multiline':True]['text':' Close the socket and remove the input handlers.','line_number':101,'multiline':False]['text':' remove all signs and update the screen after gutter removal','line_number':116,'multiline':False]['text':' "=fname": Read info from specified file.','line_number':142,'multiline':False]['text':' ":<host>:<addr>:<password>": get info from argument','line_number':149,'multiline':False]['text':' "": get info from file specified in environment','line_number':153,'multiline':False]['text':' ":<host>:<addr>:<password>": get info from argument','line_number':161,'multiline':False]['text':' Get the missing values from the environment.','line_number':173,'multiline':False]['text':' Move values to allocated memory.','line_number':181,'multiline':False]['text':' Use the default when a value is missing.','line_number':191,'multiline':False]['text':' success','line_number':213,'multiline':False]['text':' success, login','line_number':218,'multiline':False]['text':'
 * Obtain the NetBeans hostname, port address and password from a file.
 * Return the strings in allocated memory.
 * Return FAIL if the file could not be read, OK otherwise (no matter what it
 * contains).
 ','line_number':236,'multiline':True]['text':'
     * For Unix only accept the file when it's not accessible by others.
     * The open will then fail if we don't own the file.
     ','line_number':252,'multiline':True]['text':' Read the file. There should be one of each parameter','line_number':274,'multiline':False]['text':' strip off the trailing newline','line_number':278,'multiline':False]['text':' dummy node, header for circular queue','line_number':311,'multiline':False]['text':'
 * Queue up key commands sent from netbeans.
 * We store the string, because it may depend on the global mod_mask and
 * :nbkey doesn't have a key number.
 ','line_number':314,'multiline':True]['text':' out of memory, drop the key','line_number':326,'multiline':False]['text':' initialize circular queue','line_number':328,'multiline':False]['text':' insert node at tail of queue','line_number':334,'multiline':False]['text':'
 * Handle any queued-up NetBeans keycommands to be send.
 ','line_number':343,'multiline':True]['text':' first, unlink the node','line_number':353,'multiline':False]['text':' Now, send the keycommand.  This may cause it to be postponed again','line_number':358,'multiline':False]['text':' and change keyHead.','line_number':359,'multiline':False]['text':' Finally, dispose of the node','line_number':364,'multiline':False]['text':'
 * While there's still a command in the work queue, parse and execute it.
 ','line_number':370,'multiline':True]['text':' nothing to read','line_number':385,'multiline':False]['text':' Locate the end of the first line in the first buffer.','line_number':387,'multiline':False]['text':' Command isn't complete.  If there is no following buffer,','line_number':391,'multiline':False]['text':' return (wait for more). If there is another buffer following,','line_number':392,'multiline':False]['text':' prepend the text to that buffer and delete this one.','line_number':393,'multiline':False]['text':' There is a complete command at the start of the buffer.','line_number':399,'multiline':False]['text':' Terminate it with a NUL.  When no more text is following unlink','line_number':400,'multiline':False]['text':' the buffer.  Do this before executing, because new buffers can','line_number':401,'multiline':False]['text':' be added while busy handling the command.','line_number':402,'multiline':False]['text':' "node" is now invalid!','line_number':408,'multiline':False]['text':' Now, parse and execute the commands.  This may set nb_channel to','line_number':416,'multiline':False]['text':' NULL if the channel is closed.','line_number':417,'multiline':False]['text':' buffer finished, dispose of it','line_number':421,'multiline':False]['text':' more follows, move it to the start','line_number':424,'multiline':False]['text':'
 * Handle one NUL terminated command.
 *
 * format of a command from netbeans:
 *
 *    6:setTitle!84 "a.c"
 *
 *    bufno
 *     colon
 *      cmd
 *		!
 *		 cmdno
 *		    args
 *
 * for function calls, the ! is replaced by a /
 ','line_number':429,'multiline':True]['text':' We assume the server knows that we can safely exit!','line_number':455,'multiline':False]['text':' Disconnect before exiting, Motif hangs in a Select error','line_number':456,'multiline':False]['text':' message otherwise.','line_number':457,'multiline':False]['text':' NOTREACHED','line_number':460,'multiline':False]['text':' The IDE is breaking the connection.','line_number':470,'multiline':False]['text':' skip colon','line_number':483,'multiline':False]['text':'
	 * This happens because the ExtEd can send a command or 2 after
	 * doing a stopDocumentListen command. It doesn't harm anything
	 * so I'm disabling it except for debugging.
	 ','line_number':515,'multiline':True]['text':' size of buf_list','line_number':543,'multiline':False]['text':' nr of entries in buf_list actually in use','line_number':544,'multiline':False]['text':'
 * Free netbeans resources.
 ','line_number':559,'multiline':True]['text':' free the netbeans buffer list','line_number':569,'multiline':False]['text':' free the queued key commands','line_number':585,'multiline':False]['text':' free the queued netbeans commands','line_number':600,'multiline':False]['text':'
 * Get the Netbeans buffer number for the specified buffer.
 ','line_number':605,'multiline':True]['text':'
 * Is this a NetBeans-owned buffer?
 ','line_number':619,'multiline':True]['text':'
 * NetBeans and Vim have different undo models. In Vim, the file isn't
 * changed if changes are undone via the undo command. In NetBeans, once
 * a change has been made the file is marked as modified until saved. It
 * doesn't matter if the change was undone.
 *
 * So this function is for the corner case where Vim thinks a buffer is
 * unmodified but NetBeans thinks it IS modified.
 ','line_number':628,'multiline':True]['text':'
 * Given a Netbeans buffer number, return the netbeans buffer.
 * Returns NULL for 0 or a negative number. A 0 bufno means a
 * non-buffer related command has been sent.
 ','line_number':653,'multiline':True]['text':' find or create a buffer with the given number','line_number':661,'multiline':False]['text':' initialize','line_number':669,'multiline':False]['text':' new','line_number':673,'multiline':False]['text':' grow list','line_number':675,'multiline':False]['text':' list size overflow, bail out','line_number':686,'multiline':False]['text':' Default is to fire text changes.','line_number':702,'multiline':False]['text':'
 * Return the number of buffers that are modified.
 ','line_number':711,'multiline':True]['text':'
 * End the netbeans session.
 ','line_number':727,'multiline':True]['text':' mark as unmodified so NetBeans won't put up dialog on "killed"','line_number':745,'multiline':False]['text':' nb_send(buf, "netbeans_end");    avoid "write failed" messages','line_number':752,'multiline':False]['text':'
 * Send a message to netbeans.
 * When "fun" is NULL no error is given.
 ','line_number':758,'multiline':True]['text':'
 * Some input received from netbeans requires a response. This function
 * handles a response with no information (except the command number).
 ','line_number':770,'multiline':True]['text':' Avoid printing an annoying error message.','line_number':781,'multiline':False]['text':'
 * Send a response with text.
 * "result" must have been quoted already (using nb_quote()).
 ','line_number':790,'multiline':True]['text':'
 * Send a response with a number result code.
 ','line_number':809,'multiline':True]['text':'
 * Encode newline, ret, backslash, double quote for transmission to NetBeans.
 ','line_number':824,'multiline':True]['text':' case '\t':','line_number':843,'multiline':False]['text':'     *q++ = '\\'; *q++ = 't'; break;','line_number':844,'multiline':False]['text':'
 * Remove top level double quotes; convert backslashed chars.
 * Returns an allocated string (NULL for failure).
 * If "endp" is not NULL it is set to the character after the terminating
 * quote.
 ','line_number':860,'multiline':True]['text':' result is never longer than input','line_number':873,'multiline':False]['text':'
		 * Unbackslashed dquote marks the end, if first char was dquote.
		 ','line_number':891,'multiline':True]['text':' default: skip over illegal chars','line_number':907,'multiline':False]['text':'
 * Remove from "first" byte to "last" byte (inclusive), at line "lnum" of the
 * current buffer.  Remove to end of line when "last" is MAXCOL.
 ','line_number':923,'multiline':True]['text':' just in case','line_number':936,'multiline':False]['text':'
 * Replace the "first" line with the concatenation of the "first" and
 * the "other" line. The "other" line is not removed.
 ','line_number':950,'multiline':True]['text':'
 * Do the actual processing of a single netbeans command or function.
 * The difference between a command and function is that a function
 * gets a response (it's required) but a command does not.
 * For arguments see comment for nb_parse_cmd().
 ','line_number':974,'multiline':True]['text':' points to space before arguments or NUL','line_number':986,'multiline':False]['text':' for when a char pointer is needed','line_number':993,'multiline':False]['text':' =====================================================================','line_number':1000,'multiline':False]['text':' Return the number of buffers that are modified.','line_number':1004,'multiline':False]['text':' Return whether the buffer is modified.','line_number':1007,'multiline':False]['text':' =====================================================================','line_number':1010,'multiline':False]['text':' Note: this will exit Vim if successful.','line_number':1014,'multiline':False]['text':' We didn't exit: return the number of changed buffers.','line_number':1017,'multiline':False]['text':' =====================================================================','line_number':1019,'multiline':False]['text':' Note: nb_getbufno() may return -1.  This indicates the IDE','line_number':1025,'multiline':False]['text':' didn't assign a number to the current buffer in response to a','line_number':1026,'multiline':False]['text':' fileOpened event.','line_number':1027,'multiline':False]['text':' =====================================================================','line_number':1034,'multiline':False]['text':' If the sign isn't found linenum will be zero.','line_number':1052,'multiline':False]['text':' =====================================================================','line_number':1057,'multiline':False]['text':' =====================================================================','line_number':1074,'multiline':False]['text':' =====================================================================','line_number':1128,'multiline':False]['text':' lines to be deleted as a whole','line_number':1136,'multiline':False]['text':' delete "count" chars, starting at "off"','line_number':1165,'multiline':False]['text':' Get the position of the first byte after the deleted','line_number':1194,'multiline':False]['text':' section.  "next" is NULL when deleting to the end of the','line_number':1195,'multiline':False]['text':' file.','line_number':1196,'multiline':False]['text':' Remove part of the first line.','line_number':1199,'multiline':False]['text':' remove to the end of the first line','line_number':1206,'multiline':False]['text':' Partial line to remove includes the end of','line_number':1211,'multiline':False]['text':' line.  Join the line with the next one, have','line_number':1212,'multiline':False]['text':' the next line deleted below.','line_number':1213,'multiline':False]['text':' remove within one line','line_number':1220,'multiline':False]['text':' don't delete the first line','line_number':1223,'multiline':False]['text':' Remove part of the last line.','line_number':1226,'multiline':False]['text':' Join end of last line to start of first line; last','line_number':1233,'multiline':False]['text':' line is deleted below.','line_number':1234,'multiline':False]['text':' First line is deleted as a whole, keep the last','line_number':1238,'multiline':False]['text':' line.','line_number':1239,'multiline':False]['text':' First is partial line; last line to remove includes','line_number':1243,'multiline':False]['text':' the end of line; join first line to line following last','line_number':1244,'multiline':False]['text':' line; line following last line is deleted below.','line_number':1245,'multiline':False]['text':' Delete whole lines if there are any.','line_number':1253,'multiline':False]['text':' delete signs from the lines being deleted','line_number':1258,'multiline':False]['text':' Leave cursor at first deleted byte.','line_number':1281,'multiline':False]['text':' logically unchanged','line_number':1284,'multiline':False]['text':' =====================================================================','line_number':1292,'multiline':False]['text':' get offset','line_number':1305,'multiline':False]['text':' get text to be inserted','line_number':1310,'multiline':False]['text':'
	    nbdebug(("    CHUNK[%d]: %d bytes at offset %d\n",
		    buf->bufp->b_ml.ml_line_count, STRLEN(args), off));
	    ','line_number':1313,'multiline':True]['text':' Jump to the buffer where we insert.  After this "curbuf"','line_number':1339,'multiline':False]['text':' can be used.','line_number':1340,'multiline':False]['text':' Convert the specified character offset into a lnum/col','line_number':1344,'multiline':False]['text':' position.','line_number':1345,'multiline':False]['text':' If the given position is not found, assume we want','line_number':1356,'multiline':False]['text':' the end of the file.  See setLocAndSize HACK.','line_number':1357,'multiline':False]['text':' above empty line','line_number':1359,'multiline':False]['text':' "lnum" is the line where we insert: either append to it or','line_number':1364,'multiline':False]['text':' insert a new line above it.','line_number':1365,'multiline':False]['text':' Loop over the "\n" separated lines of the argument.','line_number':1368,'multiline':False]['text':' Incomplete line, probably truncated.  Next "insert"','line_number':1375,'multiline':False]['text':' command should append to this one.','line_number':1376,'multiline':False]['text':'
			 * We need to detect EOL style, because the commands
			 * use a character offset.
			 ','line_number':1383,'multiline':True]['text':' Insert halfway a line.','line_number':1405,'multiline':False]['text':' Append a new line.  Not that we always do this,','line_number':1418,'multiline':False]['text':' also when the text doesn't end in a "\n".','line_number':1419,'multiline':False]['text':' Adjust the marks below the inserted lines.','line_number':1431,'multiline':False]['text':'
		 * When starting with an empty buffer set the fileformat.
		 * This is just guessing...
		 ','line_number':1434,'multiline':True]['text':'
		 * XXX - GRP - Is the next line right? If I've inserted
		 * text the buffer has been updated but not written. Will
		 * netbeans guarantee to write it? Even if I do a :q! ?
		 ','line_number':1450,'multiline':True]['text':' logically unchanged','line_number':1455,'multiline':False]['text':' Undo info is invalid now...','line_number':1458,'multiline':False]['text':' or !error','line_number':1463,'multiline':False]['text':' Not a function; no reply required.','line_number':1472,'multiline':False]['text':' =====================================================================','line_number':1474,'multiline':False]['text':' Create a buffer without a name.','line_number':1477,'multiline':False]['text':' don't try to open disk file','line_number':1486,'multiline':False]['text':' =====================================================================','line_number':1496,'multiline':False]['text':' =====================================================================','line_number':1512,'multiline':False]['text':' =====================================================================','line_number':1522,'multiline':False]['text':' =====================================================================','line_number':1533,'multiline':False]['text':' NetBeans uses stopDocumentListen when it stops editing','line_number':1555,'multiline':False]['text':' a file.  It then expects the buffer in Vim to','line_number':1556,'multiline':False]['text':' disappear.','line_number':1557,'multiline':False]['text':' =====================================================================','line_number':1563,'multiline':False]['text':' =====================================================================','line_number':1575,'multiline':False]['text':' handle any postponed key commands','line_number':1590,'multiline':False]['text':' =====================================================================','line_number':1592,'multiline':False]['text':' "setBufferNumber" has the side effect of jumping to the buffer','line_number':1620,'multiline':False]['text':' (don't know why!).  Don't do that for "putBufferNumber".','line_number':1621,'multiline':False]['text':' handle any postponed key commands','line_number':1628,'multiline':False]['text':' =====================================================================','line_number':1632,'multiline':False]['text':' don't try to open disk file','line_number':1645,'multiline':False]['text':' =====================================================================','line_number':1655,'multiline':False]['text':' Edit a file: like create + setFullName + read the file.','line_number':1665,'multiline':False]['text':' =====================================================================','line_number':1678,'multiline':False]['text':' This message was commented out, probably because it can','line_number':1685,'multiline':False]['text':' happen when shutting down.','line_number':1686,'multiline':False]['text':' Side effect!!!.','line_number':1702,'multiline':False]['text':' =====================================================================','line_number':1707,'multiline':False]['text':' Bring gvim to the foreground.','line_number':1712,'multiline':False]['text':' =====================================================================','line_number':1716,'multiline':False]['text':' This message was commented out, probably because it can','line_number':1725,'multiline':False]['text':' happen when shutting down.','line_number':1726,'multiline':False]['text':' Assume NetBeans stored the file.  Reset the timestamp to','line_number':1738,'multiline':False]['text':' avoid "file changed" warnings.','line_number':1739,'multiline':False]['text':' =====================================================================','line_number':1753,'multiline':False]['text':' =====================================================================','line_number':1764,'multiline':False]['text':' =====================================================================','line_number':1774,'multiline':False]['text':' not yet','line_number':1778,'multiline':False]['text':' =====================================================================','line_number':1779,'multiline':False]['text':'
	     * Set up the Balloon Expression Evaluation area.
	     * Ignore 'ballooneval' here.
	     * The text pointer must remain valid for a while.
	     ','line_number':1786,'multiline':True]['text':' =====================================================================','line_number':1799,'multiline':False]['text':' Don't want Visual mode now.','line_number':1817,'multiline':False]['text':' gui_update_cursor(TRUE, FALSE);','line_number':1837,'multiline':False]['text':' update_curbuf(UPD_NOT_VALID);','line_number':1838,'multiline':False]['text':' scroll to show the line','line_number':1839,'multiline':False]['text':' Quit a hit-return or more prompt.','line_number':1845,'multiline':False]['text':' =====================================================================','line_number':1853,'multiline':False]['text':' This message was commented out, probably because it can','line_number':1875,'multiline':False]['text':' happen when shutting down.','line_number':1876,'multiline':False]['text':' =====================================================================','line_number':1890,'multiline':False]['text':' obsolete...','line_number':1892,'multiline':False]['text':' =====================================================================','line_number':1895,'multiline':False]['text':' Only used in version 2.1.','line_number':1899,'multiline':False]['text':' =====================================================================','line_number':1900,'multiline':False]['text':' =====================================================================','line_number':1961,'multiline':False]['text':' Get the typenr specific for this buffer and convert it to','line_number':1983,'multiline':False]['text':' the global typenumber, as used for the sign name.','line_number':1984,'multiline':False]['text':' =====================================================================','line_number':2012,'multiline':False]['text':' =====================================================================','line_number':2032,'multiline':False]['text':' =====================================================================','line_number':2039,'multiline':False]['text':'
			 * In Java Swing the offset is a position between 2
			 * characters. If col == 0 then we really want the
			 * previous line as the end.
			 ','line_number':2078,'multiline':True]['text':' set highlight for region','line_number':2092,'multiline':False]['text':' never used','line_number':2101,'multiline':False]['text':' =====================================================================','line_number':2119,'multiline':False]['text':' =====================================================================','line_number':2124,'multiline':False]['text':' =====================================================================','line_number':2134,'multiline':False]['text':'
	     * NOTE - This command is obsolete wrt NetBeans. It's left in
	     * only for historical reasons.
	     ','line_number':2138,'multiline':True]['text':' the following is taken from ex_cmds.c (do_wqall function)','line_number':2148,'multiline':False]['text':' Only write if the buffer can be written.','line_number':2151,'multiline':False]['text':' an autocommand may have deleted the buffer','line_number':2161,'multiline':False]['text':' =====================================================================','line_number':2170,'multiline':False]['text':' =====================================================================','line_number':2186,'multiline':False]['text':' =====================================================================','line_number':2191,'multiline':False]['text':' not used yet','line_number':2195,'multiline':False]['text':' =====================================================================','line_number':2196,'multiline':False]['text':' not used yet','line_number':2200,'multiline':False]['text':'
	 * Unrecognized command is ignored.
	 ','line_number':2206,'multiline':True]['text':'
     * Is this needed? I moved the netbeans_Xt_connect() later during startup
     * and it may no longer be necessary. If it's not needed then needupdate
     * and do_update can also be removed.
     ','line_number':2216,'multiline':True]['text':' Quit a hit-return or more prompt.','line_number':2228,'multiline':False]['text':'
 * If "buf" is not the current buffer try changing to a window that edits this
 * buffer.  If there is no such window then close the current buffer and set
 * the current buffer as "buf".
 ','line_number':2242,'multiline':True]['text':'
 * Process a vim colon command.
 ','line_number':2260,'multiline':True]['text':' restore the cursor position','line_number':2277,'multiline':False]['text':'
 * Parse the specialKeys argument and issue the appropriate map commands.
 ','line_number':2282,'multiline':True]['text':'
 * Initialize highlights and signs for use by netbeans  (mostly obsolete)
 ','line_number':2360,'multiline':True]['text':'
 * Convert key to netbeans name.  This uses the global "mod_mask".
 ','line_number':2378,'multiline':True]['text':' Allow ASCII characters.','line_number':2427,'multiline':False]['text':' META','line_number':2443,'multiline':False]['text':'
 * Function to be called for balloon evaluation.  Grabs the text under the
 * cursor and sends it to the debugger for evaluation.  The debugger should
 * respond with a showBalloon command when there is a useful result.
 ','line_number':2450,'multiline':True]['text':' Don't do anything when 'ballooneval' is off, messages scrolled the','line_number':2467,'multiline':False]['text':' windows up or we have no connection.','line_number':2468,'multiline':False]['text':' Send debugger request.  Only when the text is of reasonable','line_number':2475,'multiline':False]['text':' length.','line_number':2476,'multiline':False]['text':'
 * Return TRUE when the netbeans connection is active.
 ','line_number':2498,'multiline':True]['text':'
 * Tell netbeans that the window was opened, ready for commands.
 ','line_number':2507,'multiline':True]['text':' update the screen after having added the gutter','line_number':2527,'multiline':False]['text':'
 * Tell netbeans that we're exiting. This should be called right
 * before calling exit.
 ','line_number':2535,'multiline':True]['text':'
 * Tell netbeans that the window was moved or resized.
 ','line_number':2570,'multiline':True]['text':' nbdebug(("EVT: %s", buf)); happens too many times during a move','line_number':2583,'multiline':False]['text':'
 * Tell netbeans the user opened or activated a file.
 ','line_number':2588,'multiline':True]['text':' open in NetBeans','line_number':2610,'multiline':False]['text':' modified','line_number':2611,'multiline':False]['text':'
 * Tell netbeans the user opened a file.
 ','line_number':2619,'multiline':True]['text':' open in NetBeans','line_number':2646,'multiline':False]['text':' modified','line_number':2647,'multiline':False]['text':'
 * Tell netbeans that a file was deleted or wiped out.
 ','line_number':2660,'multiline':True]['text':'
 * Get a pointer to the Netbeans buffer for Vim buffer "bufp".
 * Return NULL if there is no such buffer or changes are not to be reported.
 * Otherwise store the buffer number in "*bufnop".
 ','line_number':2686,'multiline':True]['text':' changes are not reported at all','line_number':2698,'multiline':False]['text':' file is not known to NetBeans','line_number':2702,'multiline':False]['text':' changes in this buffer are not reported','line_number':2706,'multiline':False]['text':'
 * Tell netbeans the user inserted some text.
 ','line_number':2712,'multiline':True]['text':' Don't mark as modified for initial read','line_number':2738,'multiline':False]['text':' send the "insert" EVT','line_number':2742,'multiline':False]['text':' Note: this may make "txt" invalid','line_number':2746,'multiline':False]['text':'
 * Tell netbeans some bytes have been removed.
 ','line_number':2765,'multiline':True]['text':'
 * Send netbeans an unmodified command.
 ','line_number':2806,'multiline':True]['text':' This is a no-op, because NetBeans considers a buffer modified','line_number':2812,'multiline':False]['text':' even when all changes have been undone.','line_number':2813,'multiline':False]['text':'
 * Send a button release event back to netbeans. It's up to netbeans
 * to decide what to do (if anything) with this event.
 ','line_number':2816,'multiline':True]['text':' sync the cursor position','line_number':2838,'multiline':False]['text':'
 * Send a keypress event back to netbeans. This usually simulates some
 * kind of function key press. This function operates on a key code.
 * Return TRUE when the key was sent, FALSE when the command has been
 * postponed.
 ','line_number':2850,'multiline':True]['text':'
 * Send a keypress event back to netbeans. This usually simulates some
 * kind of function key press. This function operates on a key string.
 * Return TRUE when the key was sent, FALSE when the command has been
 * postponed.
 ','line_number':2866,'multiline':True]['text':' open in NetBeans','line_number':2892,'multiline':False]['text':' modified','line_number':2893,'multiline':False]['text':' sync the cursor position','line_number':2903,'multiline':False]['text':' To work on Win32 you must apply patch to ExtEditor module','line_number':2909,'multiline':False]['text':' from ExtEdCaret.java.diff - make EVT_newDotAndMark handler','line_number':2910,'multiline':False]['text':' more synchronous','line_number':2911,'multiline':False]['text':' now send keyCommand event','line_number':2913,'multiline':False]['text':' New: do both at once and include the lnum/col.','line_number':2919,'multiline':False]['text':'
 * Send a save event to netbeans.
 ','line_number':2929,'multiline':True]['text':'
 * Send remove command to netbeans (this command has been turned off).
 ','line_number':2954,'multiline':True]['text':' Don't mark as modified for initial read','line_number':2971,'multiline':False]['text':'     nb_send(buf, "netbeans_deleted_all_lines");','line_number':2977,'multiline':False]['text':'
 * See if the lines are guarded. The top and bot parameters are from
 * u_savecommon(), these are the line above the change and the line below the
 * change.
 ','line_number':2981,'multiline':True]['text':'
 * We have multiple signs to draw at the same location. Draw the
 * multi-sign indicator instead. This is the Motif version.
 ','line_number':3005,'multiline':True]['text':' FEAT_GUI_X11','line_number':3033,'multiline':False]['text':'
 * We have multiple signs to draw at the same location. Draw the
 * multi-sign indicator instead. This is the GTK/Gnome version.
 ','line_number':3036,'multiline':True]['text':' FEAT_GUI_GTK','line_number':3094,'multiline':False]['text':'
 * If the mouse is clicked in the gutter of a line with multiple
 * annotations, cycle through the set of signs.
 ','line_number':3096,'multiline':True]['text':' remove "p" from list, reinsert it at the tail of the sublist','line_number':3114,'multiline':False]['text':' now find end of sublist and insert p','line_number':3120,'multiline':False]['text':' tail now points to last entry with same lnum (except','line_number':3126,'multiline':False]['text':' that "guarded" annotations are always last)','line_number':3127,'multiline':False]['text':'
 * Add a sign of the requested type at the requested location.
 *
 * Reverse engineering:
 * Apparently an annotation is defined the first time it is used in a buffer.
 * When the same annotation is used in two buffers, the second time we do not
 * need to define a new sign name but reuse the existing one.  But since the
 * ID number used in the second buffer starts counting at one again, a mapping
 * is made from the ID specifically for the buffer to the global sign name
 * (which is a number).
 *
 * globalsignmap[]	stores the signs that have been defined globally.
 * buf->signmapused[]	maps buffer-local annotation IDs to an index in
 *			globalsignmap[].
 ','line_number':3139,'multiline':True]['text':' not found; add it to global map','line_number':3172,'multiline':False]['text':' no glyph, line highlighting only','line_number':3198,'multiline':False]['text':' one- or two-character glyph name, use as text glyph with','line_number':3201,'multiline':False]['text':' texthl','line_number':3202,'multiline':False]['text':' glyph, line highlighting','line_number':3206,'multiline':False]['text':' glyph, no line highlighting','line_number':3211,'multiline':False]['text':' first allocation','line_number':3219,'multiline':False]['text':' grow it','line_number':3224,'multiline':False]['text':' check local map; should *not* be found!','line_number':3248,'multiline':False]['text':' add to local map','line_number':3253,'multiline':False]['text':' first allocation','line_number':3256,'multiline':False]['text':' grow it','line_number':3261,'multiline':False]['text':'
 * See if we have the requested sign type in the buffer.
 ','line_number':3286,'multiline':True]['text':'
 * Compute length of buffer, don't print anything.
 ','line_number':3299,'multiline':True]['text':' Check for a CTRL-C every 100000 characters','line_number':3321,'multiline':False]['text':' Correction for when last line doesn't have an EOL.','line_number':3330,'multiline':False]['text':'
 * Convert character offset to lnum,col
 ','line_number':3337,'multiline':True]['text':'
 * Convert an argument in the form "1234" to an offset and compute the
 * lnum/col from it.  Convert an argument in the form "123/12" directly to a
 * lnum/col.
 * "argp" is advanced to after the argument.
 * Return a pointer to the position, NULL if something is wrong.
 ','line_number':3361,'multiline':True]['text':'
 * Convert (lnum,col) to byte offset in the file.
 ','line_number':3387,'multiline':True]['text':'
 * This message is printed after NetBeans opens a new file. It's
 * similar to the message readfile() uses, but since NetBeans
 * doesn't normally call readfile, we do our own.
 ','line_number':3406,'multiline':True]['text':' Now display it','line_number':3434,'multiline':False]['text':'
 * Print a message after NetBeans writes the file. This message should be
 * identical to the standard message a non-netbeans user would see when
 * writing a file.
 ','line_number':3442,'multiline':True]['text':' put fname in IObuff with quotes','line_number':3455,'multiline':False]['text':' Need to repeat the message after redrawing when:','line_number':3467,'multiline':False]['text':' - When reading from stdin (the screen will be cleared next).','line_number':3468,'multiline':False]['text':' - When restart_edit is set (otherwise there will be a delay','line_number':3469,'multiline':False]['text':'   before redrawing).','line_number':3470,'multiline':False]['text':' - When the screen was scrolled but there is no wait-return','line_number':3471,'multiline':False]['text':'   prompt.','line_number':3472,'multiline':False]['text':' add_to_input_buf((char_u *)"\f", 1);','line_number':3476,'multiline':False]['text':' defined(FEAT_NETBEANS_INTG)','line_number':3489,'multiline':False]