['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * blob.c: Blob support by Yasuhiro Matsumoto
 ','line_number':10,'multiline':True]['text':'
 * Allocate an empty blob.
 * Caller should take care of the reference count.
 ','line_number':18,'multiline':True]['text':'
 * Allocate an empty blob for a return value, with reference count set.
 * Returns OK or FAIL.
 ','line_number':32,'multiline':True]['text':'
 * Set a blob as the return value.
 ','line_number':48,'multiline':True]['text':'
 * Unreference a blob: decrement the reference count and free it when it
 * becomes zero.
 ','line_number':97,'multiline':True]['text':'
 * Get the length of data.
 ','line_number':108,'multiline':True]['text':'
 * Get byte "idx" in blob "b".
 * Caller must check that "idx" is valid.
 ','line_number':119,'multiline':True]['text':'
 * Store one byte "byte" in blob "blob" at "idx".
 * Caller must make sure that "idx" is valid.
 ','line_number':129,'multiline':True]['text':'
 * Store one byte "byte" in blob "blob" at "idx".
 * Append one byte if needed.
 ','line_number':139,'multiline':True]['text':' Allow for appending a byte.  Setting a byte beyond','line_number':148,'multiline':False]['text':' the end is an error otherwise.','line_number':149,'multiline':False]['text':'
 * Return TRUE when two blobs have exactly the same values.
 ','line_number':159,'multiline':True]['text':' empty and NULL are considered the same','line_number':171,'multiline':False]['text':'
 * Read blob from file "fd".
 * Caller has allocated a blob in "rettv".
 * Return OK or FAIL.
 ','line_number':184,'multiline':True]['text':' can't read the file, error','line_number':198,'multiline':False]['text':' The size defaults to the whole file.  If a size is given it is','line_number':202,'multiline':False]['text':' limited to not go past the end of the file.','line_number':203,'multiline':False]['text':' size may become negative, checked below','line_number':209,'multiline':False]['text':' limit the offset to not go before the start of the file','line_number':215,'multiline':False]['text':' Size defaults to reading until the end of the file.','line_number':222,'multiline':False]['text':' An empty blob is returned on error.','line_number':238,'multiline':False]['text':'
 * Write "blob" to file "fd".
 * Return OK or FAIL.
 ','line_number':246,'multiline':True]['text':'
 * Convert a blob to a readable form: "0z00112233.44556677.8899"
 ','line_number':262,'multiline':True]['text':' Store bytes in the growarray.','line_number':277,'multiline':False]['text':' append a NUL at the end','line_number':287,'multiline':False]['text':'
 * Convert a string variable, in the format of blob2string(), to a blob.
 * Return NULL when conversion failed.
 ','line_number':292,'multiline':True]['text':' text after final digit','line_number':317,'multiline':False]['text':'
 * Returns a slice of 'blob' from index 'n1' to 'n2' in 'rettv'.  The length of
 * the blob is 'len'.  Returns an empty blob if the indexes are out of range.
 ','line_number':327,'multiline':True]['text':'
 * Return the byte value in 'blob' at index 'idx' in 'rettv'.  If the index is
 * too big or negative that is an error.  The length of the blob is 'len'.
 ','line_number':382,'multiline':True]['text':' The resulting variable is a byte value.','line_number':393,'multiline':False]['text':' If the index is too big or negative that is an error.','line_number':394,'multiline':False]['text':'
 * Check if "n1"- is a valid index for a blobl with length "bloblen".
 ','line_number':432,'multiline':True]['text':'
 * Check if "n1"-"n2" is a valid range for a blob with length "bloblen".
 ','line_number':447,'multiline':True]['text':'
 * Set bytes "n1" to "n2" (inclusive) in "dest" to the value of "src".
 * Caller must make sure "src" is a blob.
 * Returns FAIL if the number of bytes does not match.
 ','line_number':462,'multiline':True]['text':'
 * "add(blob, item)" function
 ','line_number':484,'multiline':True]['text':'
 * "remove({blob}, {idx} [, {end}])" function
 ','line_number':512,'multiline':True]['text':' count from the end','line_number':536,'multiline':False]['text':' Remove one item, return its value.','line_number':545,'multiline':False]['text':' Remove range of items, return blob with values.','line_number':553,'multiline':False]['text':' count from the end','line_number':558,'multiline':False]['text':'
 * Implementation of map() and filter() for a Blob.  Apply "expr" to every
 * number in Blob "blob_arg" and return the result in "rettv".
 ','line_number':586,'multiline':True]['text':' set_vim_var_nr() doesn't set the type','line_number':625,'multiline':False]['text':' Create one funccall_T for all eval_expr_typval() calls.','line_number':632,'multiline':False]['text':'
 * "insert(blob, {item} [, {idx}])" function
 ','line_number':672,'multiline':True]['text':' type error; errmsg already given','line_number':699,'multiline':False]['text':'
 * Implementation of reduce() for Blob "argvars[0]" using the function "expr"
 * starting with the optional initial value "argvars[2]" and return the result
 * in "rettv".
 ','line_number':725,'multiline':True]['text':'
 * "reverse({blob})" function
 ','line_number':780,'multiline':True]['text':'
 * blob2list() function
 ','line_number':798,'multiline':True]['text':'
 * list2blob() function
 ','line_number':820,'multiline':True]['text':' defined(FEAT_EVAL)','line_number':860,'multiline':False]