['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *			Photon GUI support by Julian Kinraid
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 *
 *
 * Clipboard support is in os_qnx.c
 * PhAttach() is called in os_qnx.c:qnx_init()
 ','line_number':1,'multiline':True]['text':' cproto fails on missing include files','line_number':16,'multiline':False]['text':' Used when generating prototypes.','line_number':24,'multiline':False]['text':' Some defines for gui_mch_mousehide()','line_number':41,'multiline':False]['text':' Optional support for using a PtPanelGroup widget, needs work','line_number':45,'multiline':False]['text':' Size of the bevel','line_number':55,'multiline':False]['text':' handle cursor blinking','line_number':61,'multiline':False]['text':' used in gui_mch_wait_for_chars','line_number':62,'multiline':False]['text':' Has the timeout occurred?','line_number':63,'multiline':False]['text':'
 * This is set inside the mouse callback for a right mouse
 * button click, and used for the popup menus
 ','line_number':65,'multiline':True]['text':' Try and avoid redraws while a resize is in progress','line_number':71,'multiline':False]['text':' Used for converting to/from utf-8 and other charsets','line_number':74,'multiline':False]['text':'
 * Cursor blink functions.
 *
 * This is a simple state machine:
 * BLINK_NONE	not blinking at all
 * BLINK_OFF	blinking, cursor is not shown
 * BLINK_ON	blinking, cursor is shown
 ','line_number':77,'multiline':True]['text':' Insert','line_number':162,'multiline':False]['text':' Delete','line_number':163,'multiline':False]['text':' Left','line_number':165,'multiline':False]['text':' Right','line_number':166,'multiline':False]['text':' Up','line_number':167,'multiline':False]['text':' Down','line_number':168,'multiline':False]['text':' Home','line_number':170,'multiline':False]['text':' End','line_number':171,'multiline':False]['text':' Page Up','line_number':173,'multiline':False]['text':' Page Down','line_number':174,'multiline':False]['text':' Undo','line_number':176,'multiline':False]['text':' Keys that we want to be able to use any modifier with:','line_number':178,'multiline':False]['text':' End of list marker:','line_number':186,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':191,'multiline':False]['text':' focus change of text area','line_number':203,'multiline':False]['text':' When a menu is unrealized, give focus back to vimTextArea','line_number':207,'multiline':False]['text':' Set the text for the balloon','line_number':217,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':226,'multiline':False]['text':' Override the text and position','line_number':243,'multiline':False]['text':' Don't put the balloon at the bottom,','line_number':256,'multiline':False]['text':' it gets drawn over by gfx done in the PtRaw','line_number':257,'multiline':False]['text':' Because vim treats the toolbar and menubar separately,','line_number':289,'multiline':False]['text':' and here they're lumped together into a PtToolbarGroup,','line_number':290,'multiline':False]['text':' we only need either menu_height or toolbar_height set at once','line_number':291,'multiline':False]['text':'
 * Pt_ARG_TIMER_REPEAT isn't used because the on & off times
 * are different
 ','line_number':323,'multiline':True]['text':' Just in case it's hidden and needs to be shown','line_number':371,'multiline':False]['text':' FIXME: return straight away here?','line_number':427,'multiline':False]['text':' We're a good lil photon program, aren't we? yes we are, yeess wee arrr','line_number':452,'multiline':False]['text':'
	 * Only show the menu if the Alt key is down, and the Shift & Ctrl
	 * keys aren't down, as well as the other conditions
	 ','line_number':460,'multiline':True]['text':' Fallthrough and let photon look for the hotkey','line_number':472,'multiline':False]['text':' Detect if a keypad number key has been pressed','line_number':486,'multiline':False]['text':' and change the key if Num Lock is on','line_number':487,'multiline':False]['text':' FIXME: For now, just map the key to an ascii value','line_number':491,'multiline':False]['text':' (see <photon/PkKeyDef.h>)','line_number':492,'multiline':False]['text':' Is this not a special key?','line_number':510,'multiline':False]['text':' FIXME: is this the right thing to do?','line_number':545,'multiline':False]['text':' Check if the key interrupts.','line_number':599,'multiline':False]['text':' Turn CSI into K_CSI.','line_number':614,'multiline':False]['text':'
     * Coordinates need to be relative to the base window,
     * not relative to the vimTextArea widget
     ','line_number':642,'multiline':True]['text':'
     * FIXME More than one button may be involved, but for
     * now just deal with one
     ','line_number':662,'multiline':True]['text':' Need the absolute coordinates for the popup menu','line_number':672,'multiline':False]['text':' Catch a real release (not phantom or other releases','line_number':680,'multiline':False]['text':' Vim doesn't use button repeats','line_number':688,'multiline':False]['text':' Don't do anything if it is one of the phantom mouse release events','line_number':693,'multiline':False]['text':'
 * Handle a focus change of the PtRaw widget
 ','line_number':705,'multiline':True]['text':'
     * This causes some weird problems, with drawing being done from
     * within this raw drawing function (rather than just simple clearing
     * and text drawing done by gui_redraw)
     *
     * The main problem is when PhBlit is used, and the cursor appearing
     * in places where it shouldn't
     ','line_number':741,'multiline':True]['text':' Redraw individual damage regions','line_number':756,'multiline':False]['text':' Redraw the rectangle that covers all the damaged regions','line_number':770,'multiline':False]['text':'
 * This is used for pulldown/popup menus and also toolbar buttons
 ','line_number':798,'multiline':True]['text':'
 * Stop focus from disappearing into the menubar...
 ','line_number':812,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////','line_number':835,'multiline':False]['text':'
 * TODO: Set a clipping rect?
 ','line_number':840,'multiline':True]['text':' find the last "(" in the panel title and see if the buffer','line_number':905,'multiline':False]['text':' number in the title matches the one we're looking for','line_number':906,'multiline':False]['text':'
 * Used for the tabs for PtPanelGroup
 ','line_number':965,'multiline':True]['text':' Look for '(' digits ')'','line_number':975,'multiline':False]['text':' If there is only 1 panel, we just use the temporary place holder','line_number':1017,'multiline':False]['text':' Copy all the titles except the one we're removing','line_number':1024,'multiline':False]['text':'
 * When a buffer item is deleted from the buffer menu
 ','line_number':1049,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1083,'multiline':False]['text':' Default encoding is latin1','line_number':1088,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1111,'multiline':False]['text':' Arbitrary values','line_number':1125,'multiline':False]['text':' Get a translation so we can convert from ISO Latin-1 to UTF','line_number':1132,'multiline':False]['text':' The +2 is for the 1 pixel dark line on each side','line_number':1135,'multiline':False]['text':' Handle close events ourselves','line_number':1138,'multiline':False]['text':' Put in a temporary place holder title','line_number':1157,'multiline':False]['text':' Turn off all edge decorations','line_number':1167,'multiline':False]['text':' Size for the text area is set in gui_mch_set_text_area_pos','line_number':1181,'multiline':False]['text':'
     * Using focus render also causes the whole widget to be redrawn
     * whenever it changes focus, which is very annoying :p
     ','line_number':1186,'multiline':True]['text':' TODO: use PtAddEventHandlers instead?','line_number':1201,'multiline':False]['text':' Not using Ph_EV_BUT_REPEAT because vim wouldn't use it anyway','line_number':1202,'multiline':False]['text':'
     * Now that the text area widget has been created, set up the colours,
     * which will call PtSetResource from gui_mch_new_colors
     ','line_number':1213,'multiline':True]['text':'
     * Create the two timers, not as accurate as using the kernel timer
     * functions, but good enough
     ','line_number':1218,'multiline':True]['text':'
     * Size for the toolbar is fetched in gui_mch_show_toolbar, after
     * the buttons have been added and the toolbar has resized it's height
     * for the buttons to fit
     ','line_number':1279,'multiline':True]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1331,'multiline':False]['text':' events','line_number':1332,'multiline':False]['text':'
 * When no events are available, photon will call this function, working is
 * set to FALSE, and the gui_mch_update loop will exit.
 ','line_number':1334,'multiline':True]['text':'
 * Put up a file requester.
 * Returns the selected name in allocated memory, or NULL for Cancel.
 * saving,	    select file to write
 * title	    title for the window
 * default_name	    default name (well duh!)
 * ext		    not used (extension added)
 * initdir	    initial directory, NULL for current dir
 * filter	    not used (file name filter)
 ','line_number':1378,'multiline':True]['text':' Don't need Pt_FSR_CONFIRM_EXISTING, vim will ask anyway','line_number':1410,'multiline':False]['text':' combine the directory and filename into a single path','line_number':1415,'multiline':False]['text':' TODO: add a filter?','line_number':1435,'multiline':False]['text':' FIXME: the vertical option in guioptions is blatantly ignored','line_number':1518,'multiline':False]['text':' FIXME: so is the type','line_number':1519,'multiline':False]['text':' There is one less separator than buttons, so bump up the button count','line_number':1526,'multiline':False]['text':' Count string length and number of separators','line_number':1529,'multiline':False]['text':'
	 * Convert DLG_BUTTON_SEP into NUL's and fill in
	 * button_array with the pointer to each NUL terminated string
	 ','line_number':1546,'multiline':True]['text':' Writing the dialog ourselves lets us add extra features, like','line_number':1572,'multiline':False]['text':' trapping the escape key and returning 0 to vim','line_number':1573,'multiline':False]['text':' This is just to give the dialog the close button.','line_number':1615,'multiline':False]['text':' We check for the Escape key ourselves and return 0','line_number':1616,'multiline':False]['text':' Open dialog, block the vim window and wait for the dialog to close','line_number':1628,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1645,'multiline':False]['text':' window size/position/state','line_number':1646,'multiline':False]['text':'
 * Return the amount of screen space that hasn't been allocated (such as
 * by the shelf).
 ','line_number':1689,'multiline':True]['text':'
 * Bring the Vim window to the foreground.
 ','line_number':1718,'multiline':True]['text':' Not sure what to do with the icon text, set balloon text somehow?','line_number':1741,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1744,'multiline':False]['text':' Scrollbar','line_number':1745,'multiline':False]['text':' TODO: Calculate the padding for adjust scrollbar position when the','line_number':1770,'multiline':False]['text':' Window is maximized.','line_number':1771,'multiline':False]['text':' TODO: Calculate the padding for adjust scrollbar position when the','line_number':1778,'multiline':False]['text':' Window is maximized.','line_number':1779,'multiline':False]['text':'    int	    anchor_flags = 0;','line_number':1787,'multiline':False]['text':'
     * Stop the scrollbar from being realized when the parent
     * is realized, so it can be explicitly realized by vim.
     *
     * Also, don't let the scrollbar get focus
     ','line_number':1790,'multiline':True]['text':' Don't need this anchoring for the scrollbars','line_number':1800,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1846,'multiline':False]['text':' Mouse functions','line_number':1847,'multiline':False]['text':' The last set mouse pointer shape is remembered, to be used when it goes','line_number':1850,'multiline':False]['text':' from hidden to not hidden.','line_number':1851,'multiline':False]['text':' Table for shape IDs.  Keep in sync with the mshape_names[] table in','line_number':1854,'multiline':False]['text':' misc2.c!','line_number':1855,'multiline':False]['text':' arrow','line_number':1858,'multiline':False]['text':' blank','line_number':1859,'multiline':False]['text':' beam','line_number':1860,'multiline':False]['text':' updown','line_number':1861,'multiline':False]['text':' udsizing','line_number':1862,'multiline':False]['text':' leftright','line_number':1863,'multiline':False]['text':' lrsizing','line_number':1864,'multiline':False]['text':' busy','line_number':1865,'multiline':False]['text':' no','line_number':1866,'multiline':False]['text':' crosshair','line_number':1867,'multiline':False]['text':' hand1','line_number':1868,'multiline':False]['text':' hand2','line_number':1869,'multiline':False]['text':' pencil','line_number':1870,'multiline':False]['text':' question','line_number':1871,'multiline':False]['text':' right-arrow','line_number':1872,'multiline':False]['text':' up-arrow','line_number':1873,'multiline':False]['text':' last one','line_number':1874,'multiline':False]['text':' FIXME: does this return the correct position,','line_number':1928,'multiline':False]['text':' with respect to the border?','line_number':1929,'multiline':False]['text':' Add the border offset?','line_number':1943,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':1947,'multiline':False]['text':' Colours','line_number':1948,'multiline':False]['text':'
 * Return the RGB value of a pixel as a long.
 ','line_number':1950,'multiline':True]['text':' Don't bother changing the cursor colour','line_number':1963,'multiline':False]['text':'
     * If there isn't enough difference between the background colour and
     * the mouse pointer colour then change the mouse pointer colour
     ','line_number':1966,'multiline':True]['text':' not a great algorithm...','line_number':1976,'multiline':False]['text':'
 * This should be split out into a separate file,
 * every port does basically the same thing.
 *
 * This is the gui_w32.c version (i think..)
 * Return INVALCOLOR when failed.
 ','line_number':1992,'multiline':True]['text':' FIXME: This has an off by one pixel problem','line_number':2037,'multiline':False]['text':' Use a static buffer to avoid large amounts of de/allocations','line_number':2170,'multiline':False]['text':' FIXME: try and only calculate these values once...','line_number':2193,'multiline':False]['text':' PgSetUserClip(NULL) causes the scrollbar to not redraw...','line_number':2198,'multiline':False]['text':' XXX: DrawTextArea doesn't work with phditto','line_number':2207,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':2218,'multiline':False]['text':' Cursor','line_number':2219,'multiline':False]['text':' FIXME: Double width characters','line_number':2226,'multiline':False]['text':' Only turn on the timer on if none of the times are zero','line_number':2278,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':2299,'multiline':False]['text':' miscellaneous functions','line_number':2300,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':2349,'multiline':False]['text':' Menu','line_number':2350,'multiline':False]['text':' The label widget will free the image/palette/etc. for us when','line_number':2398,'multiline':False]['text':' it's destroyed','line_number':2399,'multiline':False]['text':'
 * This returns either a builtin icon image, an external image or NULL
 * if it can't find either.  The caller can't and doesn't need to try and
 * free() the returned image, and it can't store the image pointer.
 * (When setting the Pt_ARG_LABEL_IMAGE resource, the contents of the
 * PhImage_t are copied, and the original PhImage_t aren't needed anymore).
 ','line_number':2409,'multiline':True]['text':' TODO: use gui_find_iconfile()','line_number':2425,'multiline':False]['text':' TODO: Restrict loading to just .png? Search for any format?','line_number':2428,'multiline':False]['text':' Nothing','line_number':2459,'multiline':False]['text':'
 * Change the position of a menu button in the parent
 ','line_number':2462,'multiline':True]['text':' Iterate through the list of widgets in traverse, until','line_number':2473,'multiline':False]['text':' we find the position we want to insert our widget into','line_number':2474,'multiline':False]['text':' TODO: traverse from front to back, possible speedup?','line_number':2475,'multiline':False]['text':' Insert the widget before the current traverse widget','line_number':2484,'multiline':False]['text':'
 * the index is ignored because it's not useful for our purposes
 ','line_number':2493,'multiline':True]['text':' Create the menu button','line_number':2517,'multiline':False]['text':' Create the actual menu','line_number':2534,'multiline':False]['text':' Redraw menubar here instead of gui_mch_draw_menubar','line_number':2555,'multiline':False]['text':' Update toolbar if it's open','line_number':2625,'multiline':False]['text':' TODO: [un]realize the widget?','line_number':2711,'multiline':False]['text':' The only time a redraw is needed is when a menu button','line_number':2717,'multiline':False]['text':' is added to the menubar, and that is detected and the bar','line_number':2718,'multiline':False]['text':' redrawn in gui_mch_add_menu_item','line_number':2719,'multiline':False]['text':' No tearoffs yet','line_number':2732,'multiline':False]['text':'//////////////////////////////////////////////////////////////////////////','line_number':2748,'multiline':False]['text':' Fonts','line_number':2749,'multiline':False]['text':' Check whether the resulting font has the font flags and size that','line_number':2756,'multiline':False]['text':' was asked for','line_number':2757,'multiline':False]['text':' Enforce some limits on the font used','line_number':2771,'multiline':False]['text':' Make sure font size matches, and that the font style','line_number':2786,'multiline':False]['text':' at least has the bits we're checking for','line_number':2787,'multiline':False]['text':'
 * Split up the vim font name
 *
 * vim_font is in the form of
 * <name>:s<height>:a:b:i
 *
 * a = antialias
 * b = bold
 * i = italic
 *
 ','line_number':2797,'multiline':True]['text':' Restrict the size to some vague limits','line_number':2840,'multiline':False]['text':' Default font','line_number':2870,'multiline':False]['text':' This extent was brought to you by the letter 'g'','line_number':2913,'multiline':False]['text':'
 * Adjust gui.char_height (after 'linespace' was changed).
 ','line_number':2924,'multiline':True]['text':'
 * Return the name of font "font" in allocated memory.
 * Don't know how to get the actual name, thus use the provided name.
 ','line_number':2965,'multiline':True]