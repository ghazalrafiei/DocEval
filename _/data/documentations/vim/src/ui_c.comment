['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * ui.c: functions that handle the user interface.
 * 1. Keyboard input stuff, and a bit of windowing stuff.  These are called
 *    before the machine specific stuff (mch_*) so that we can call the GUI
 *    stuff instead if the GUI is running.
 * 2. Input buffer stuff.
 ','line_number':10,'multiline':True]['text':' Don't output anything in silent mode ("ex -s") unless 'verbose' set','line_number':37,'multiline':False]['text':' Convert characters from 'encoding' to 'termencoding'.','line_number':45,'multiline':False]['text':'
 * When executing an external program, there may be some typed characters that
 * are not consumed by it.  Give them back to ui_inchar() and they are stored
 * here for the next call.
 ','line_number':67,'multiline':True]['text':' offset for next char to use when ta_str != NULL','line_number':73,'multiline':False]['text':' length of ta_str when it's not NULL','line_number':74,'multiline':False]['text':'
 * ui_inchar(): low level input function.
 * Get characters from the keyboard.
 * Return the number of characters that are available.
 * If "wtime" == 0 do not wait for characters.
 * If "wtime" == -1 wait forever for characters.
 * If "wtime" > 0 wait "wtime" milliseconds for a character.
 *
 * "tb_change_cnt" is the value of typebuf.tb_change_cnt if "buf" points into
 * it.  When typebuf.tb_change_cnt changes (e.g., when a message is received
 * from a remote client) "buf" can no longer be used.  "tb_change_cnt" is NULL
 * otherwise.
 ','line_number':103,'multiline':True]['text':' don't use "time", MIPS cannot handle it','line_number':120,'multiline':False]['text':'
     * Use the typeahead if there is any.
     ','line_number':126,'multiline':True]['text':' Don't wait for character input when the window hasn't been opened yet.','line_number':149,'multiline':False]['text':' Do try reading, this works when redirecting stdin from a file.','line_number':150,'multiline':False]['text':' Must return something, otherwise we'll loop forever.  If we run into','line_number':151,'multiline':False]['text':' this very often we probably got stuck, exit Vim.','line_number':152,'multiline':False]['text':' If we are going to wait for some time or block...','line_number':170,'multiline':False]['text':' ... allow signals to kill us.','line_number':173,'multiline':False]['text':' ... there is no need for CTRL-C to interrupt something, don't let','line_number':176,'multiline':False]['text':' it set got_int when it was mapped.','line_number':177,'multiline':False]['text':'
     * Here we call gui_inchar() or mch_inchar(), the GUI or machine-dependent
     * input function.  The functionality they implement is like this:
     *
     * while (not timed out)
     * {
     *    handle-resize;
     *    parse-queued-messages;
     *    if (waited for 'updatetime')
     *       trigger-cursorhold;
     *    ui_wait_for_chars_or_timer()
     *    if (character available)
     *      break;
     * }
     *
     * ui_wait_for_chars_or_timer() does:
     *
     * while (not timed out)
     * {
     *     if (any-timer-triggered)
     *	      invoke-timer-callback;
     *     wait-for-character();
     *     if (character available)
     *	      break;
     * }
     *
     * wait-for-character() does:
     * while (not timed out)
     * {
     *     Wait for event;
     *     if (something on channel)
     *	      read/write channel;
     *	   else if (resized)
     *	      handle_resize();
     *	   else if (system event)
     *	      deal-with-system-event;
     *	   else if (character available)
     *	      break;
     * }
     *
     ','line_number':182,'multiline':True]['text':' block SIGHUP et al.','line_number':236,'multiline':False]['text':'
 * Common code for mch_inchar() and gui_inchar(): Wait for a while or
 * indefinitely until characters are available, dealing with timers and
 * messages on channels.
 *
 * "buf" may be NULL if the available characters are not to be returned, only
 * check if they are available.
 *
 * Return the number of characters that are available.
 * If "wtime" == 0 do not wait for characters.
 * If "wtime" == n wait a short time for characters.
 * If "wtime" == -1 wait forever for characters.
 ','line_number':252,'multiline':True]['text':' don't use "time", MIPS cannot handle it','line_number':269,'multiline':False]['text':' repeat until we got a character or waited long enough','line_number':286,'multiline':False]['text':' Check if window changed size while we were busy, perhaps the ":set','line_number':289,'multiline':False]['text':' columns=99" command was used.','line_number':290,'multiline':False]['text':' Only process messages when waiting.','line_number':295,'multiline':False]['text':' If input was put directly in typeahead buffer bail out here.','line_number':299,'multiline':False]['text':' blocking and already waited for p_ut','line_number':305,'multiline':False]['text':' going to block after p_ut','line_number':312,'multiline':False]['text':' If the waiting time is now zero or less, we timed out.  However,','line_number':319,'multiline':False]['text':' loop at least once to check for characters and events.  Matters','line_number':320,'multiline':False]['text':' when "wtime" is zero.','line_number':321,'multiline':False]['text':' no character available within "wtime"','line_number':325,'multiline':False]['text':' No character available within 'updatetime'.','line_number':328,'multiline':False]['text':' Put K_CURSORHOLD in the input buffer or return it.','line_number':333,'multiline':False]['text':' There is no character available within 'updatetime' seconds:','line_number':352,'multiline':False]['text':' flush all the swap files to disk.  Also done when','line_number':353,'multiline':False]['text':' interrupted by SIGWINCH.','line_number':354,'multiline':False]['text':' Checking if a job ended requires polling.  Do this at least','line_number':363,'multiline':False]['text':' every 100 msec.','line_number':364,'multiline':False]['text':' If there is readahead then parse_queued_messages() timed out and','line_number':368,'multiline':False]['text':' we should call it again soon.','line_number':369,'multiline':False]['text':' The 'balloonexpr' may indirectly invoke a callback while waiting','line_number':376,'multiline':False]['text':' for a character, need to check often.','line_number':377,'multiline':False]['text':' Wait for a character to be typed or another event, such as the winch','line_number':381,'multiline':False]['text':' signal or an event on the monitored file descriptors.','line_number':382,'multiline':False]['text':' If input was put directly in typeahead buffer bail out here.','line_number':386,'multiline':False]['text':' We might have something to return now.','line_number':390,'multiline':False]['text':' "buf" is NULL, we were just waiting, not actually getting','line_number':392,'multiline':False]['text':' input.','line_number':393,'multiline':False]['text':' Timed out or interrupted with no character available.','line_number':401,'multiline':False]['text':' estimate the elapsed time','line_number':404,'multiline':False]['text':' no character available, but something to be done, keep going','line_number':417,'multiline':False]['text':' no character available or interrupted, return zero','line_number':420,'multiline':False]['text':'
 * Wait for a timer to fire or "wait_func" to return non-zero.
 * Returns OK when something was read.
 * Returns FAIL when it timed out or was interrupted.
 ','line_number':428,'multiline':True]['text':' When waiting very briefly don't trigger timers.','line_number':447,'multiline':False]['text':' Trigger timers and then get the time in wtime until the next one is','line_number':453,'multiline':False]['text':' due.  Wait up to that time.','line_number':454,'multiline':False]['text':' timer may have used feedkeys()','line_number':458,'multiline':False]['text':' There is a pending job or channel, should return soon in order','line_number':480,'multiline':False]['text':' to handle them ASAP.  Do check for input briefly.','line_number':481,'multiline':False]['text':' Nothing available, but need to return so that side effects get','line_number':495,'multiline':False]['text':' handled, such as handling a message on a channel.','line_number':496,'multiline':False]['text':'
 * Return non-zero if a character is available.
 ','line_number':505,'multiline':True]['text':'
 * Delay for the given number of milliseconds.	If ignoreinput is FALSE then we
 * cancel the delay if a key is hit.
 ','line_number':529,'multiline':True]['text':'
 * If the machine has job control, use it to suspend the program,
 * otherwise fake it by starting a new shell.
 * When running the GUI iconify the window.
 ','line_number':551,'multiline':True]['text':'
 * When the OS can't really suspend, call this function to start a shell.
 * This is never called in the GUI.
 ','line_number':570,'multiline':True]['text':'
 * Try to get the current Vim shell size.  Put the result in Rows and Columns.
 * Use the new sizes as defaults for 'columns' and 'lines'.
 * Return OK when size could be determined, FAIL otherwise.
 ','line_number':587,'multiline':True]['text':' adjust the default for 'lines' and 'columns'','line_number':606,'multiline':False]['text':'
 * Set the size of the Vim shell according to Rows and Columns, if possible.
 * The gui_set_shellsize() or mch_set_shellsize() function will try to set the
 * new size.  If this is not possible, it will adjust Rows and Columns.
 ','line_number':615,'multiline':True]['text':' set by the user','line_number':622,'multiline':False]['text':'
 * Called when Rows and/or Columns changed.  Adjust scroll region and mouse
 * region.
 ','line_number':632,'multiline':True]['text':'
 * Get the window position in pixels, if possible.
 * Return FAIL when not possible.
 ','line_number':655,'multiline':True]['text':'
 * When "force" is true also check when the terminal is not in raw mode.
 * This is useful to read input on channels.
 ','line_number':684,'multiline':True]['text':' We could be called recursively if stderr is redirected, calling','line_number':694,'multiline':False]['text':' fill_input_buf() calls settmode() when stdin isn't a tty.  settmode()','line_number':695,'multiline':False]['text':' calls vgetorpeek() which calls ui_breakcheck() again.','line_number':696,'multiline':False]['text':' We do not want gui_resize_shell() to redraw the screen here.','line_number':701,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////////','line_number':719,'multiline':False]['text':' Functions that handle the input buffer.','line_number':720,'multiline':False]['text':' This is used for any GUI version, and the unix terminal version.','line_number':721,'multiline':False]['text':'','line_number':722,'multiline':False]['text':' For Unix, the input characters are buffered to be able to check for a','line_number':723,'multiline':False]['text':' CTRL-C.  This should be done with signals, but I don't know how to do that','line_number':724,'multiline':False]['text':' in a portable way for a tty in RAW mode.','line_number':725,'multiline':False]['text':'','line_number':726,'multiline':False]['text':' For the client-server code in the console the received keys are put in the','line_number':727,'multiline':False]['text':' input buffer.','line_number':728,'multiline':False]['text':'
 * Internal typeahead buffer.  Includes extra space for long key code
 * descriptions which would otherwise overflow.  The buffer is considered full
 * when only this extra space (or part of it) remains.
 ','line_number':732,'multiline':True]['text':'
    * NetBeans stuffs debugger commands into the input buffer.
    * This requires a larger buffer...
    * (Madsen) Go with this for remote input as well ...
    ','line_number':738,'multiline':True]['text':' number of chars in inbuf[]','line_number':749,'multiline':False]['text':'
 * vim_is_input_buf_full(), vim_is_input_buf_empty(), add_to_input_buf(), and
 * trash_input_buf() are functions for manipulating the input buffer.  These
 * are used by the gui_* calls when a GUI is used to handle keyboard input.
 ','line_number':751,'multiline':True]['text':'
 * Return the current contents of the input buffer and make it empty.
 * The returned pointer must be passed to set_input_buf() later.
 ','line_number':785,'multiline':True]['text':' We use a growarray to store the data pointer and the length.','line_number':794,'multiline':False]['text':' Add one to avoid a zero size.','line_number':798,'multiline':False]['text':'
 * Restore the input buffer with a pointer returned from get_input_buf().
 * The allocated memory is freed, this only works once!
 * When "overwrite" is FALSE input typed later is kept.
 ','line_number':808,'multiline':True]['text':'
 * Add the given bytes to the input buffer
 * Special keys start with CSI.  A real CSI must have been translated to
 * CSI KS_EXTRA KE_CSI.  K_SPECIAL doesn't require translation.
 ','line_number':839,'multiline':True]['text':' Shouldn't ever happen!','line_number':848,'multiline':False]['text':'
 * Add "str[len]" to the input buffer while escaping CSI bytes.
 ','line_number':854,'multiline':True]['text':' Turn CSI into K_CSI.','line_number':868,'multiline':False]['text':'
 * Remove everything from the input buffer.  Called when ^C is found.
 ','line_number':876,'multiline':True]['text':'
 * Read as much data from the input buffer as possible up to maxlen, and store
 * it in buf.
 ','line_number':885,'multiline':True]['text':' if the buffer is empty, fill it','line_number':892,'multiline':False]['text':' check "maxlen" to avoid clang warning','line_number':898,'multiline':False]['text':' unconverted rest of previous read','line_number':911,'multiline':False]['text':' Don't use the GUI input when the window hasn't been opened yet.','line_number':919,'multiline':False]['text':' We get here from ui_inchar() when we should try reading from stdin.','line_number':920,'multiline':False]['text':'
     * Fill_input_buf() is only called when we really need a character.
     * If we can't get any, but there is some in the buffer, just return.
     * If we can't get any, and there isn't any in the buffer, we give up and
     * exit Vim.
     ','line_number':932,'multiline':True]['text':' Use remainder of previous call, starts with an invalid character','line_number':940,'multiline':False]['text':' that may become valid when reading more.','line_number':941,'multiline':False]['text':' to avoid gcc warning','line_number':959,'multiline':False]['text':'
	 * If reading stdin results in an error, continue reading stderr.
	 * This helps when using "foo | xargs vim".
	 ','line_number':979,'multiline':True]['text':' We probably set the wrong file descriptor to raw mode.  Switch','line_number':987,'multiline':False]['text':' back to cooked mode, use another descriptor and set the mode to','line_number':988,'multiline':False]['text':' what it was.','line_number':989,'multiline':False]['text':' Use stderr for stdin, also works for shell commands.','line_number':992,'multiline':False]['text':' read from stderr instead of stdin','line_number':996,'multiline':False]['text':' Interrupted, pretend a CTRL-C was typed.','line_number':1009,'multiline':False]['text':'
	 * May perform conversion on the input characters.
	 * Include the unconverted rest of the previous call.
	 * If there is an incomplete char at the end it is kept for the next
	 * time, reading more bytes should make conversion possible.
	 * Don't do this in the unlikely event that the input buffer is too
	 * small ("rest" still contains more bytes).
	 ','line_number':1015,'multiline':True]['text':' If a CTRL-C was typed, remove it from the buffer and set','line_number':1032,'multiline':False]['text':' got_int.  Also recognize CTRL-C with modifyOtherKeys set, lower','line_number':1033,'multiline':False]['text':' and upper case, in two forms.','line_number':1034,'multiline':False]['text':' If terminal key protocols are in use, we expect to receive','line_number':1035,'multiline':False]['text':' Ctrl_C as an escape sequence, ignore a raw Ctrl_C as this could','line_number':1036,'multiline':False]['text':' be paste data.','line_number':1037,'multiline':False]['text':' remove everything typed before the CTRL-C','line_number':1049,'multiline':False]['text':' UNIX || VMS || MACOS_X','line_number':1058,'multiline':False]['text':' USE_INPUT_BUF','line_number':1060,'multiline':False]['text':'
 * Exit because of an input read error.
 ','line_number':1062,'multiline':True]['text':' Normal way to exit for "ex -s"','line_number':1068,'multiline':False]['text':'
 * May update the shape of the cursor.
 ','line_number':1075,'multiline':True]['text':'
 * Check bounds for column number
 ','line_number':1104,'multiline':True]['text':'
 * Check bounds for row number
 ','line_number':1117,'multiline':True]['text':'
 * Return length of line "lnum" in screen cells for horizontal scrolling.
 ','line_number':1130,'multiline':True]['text':' don't count the last character','line_number':1144,'multiline':False]['text':'
 * Find the longest visible line number.  This is used for horizontal
 * scrolling.  If this is not possible (or not desired, by setting 'h' in
 * "guioptions") then the current line number is returned.
 ','line_number':1151,'multiline':True]['text':' Calculate maximum for horizontal scrollbar.  Check for reasonable','line_number':1161,'multiline':False]['text':' line numbers, topline and botline can be invalid when displaying is','line_number':1162,'multiline':False]['text':' postponed.','line_number':1163,'multiline':False]['text':' Use maximum of all visible lines.  Remember the lnum of the','line_number':1176,'multiline':False]['text':' longest line, closest to the cursor line.  Used when scrolling','line_number':1177,'multiline':False]['text':' below.','line_number':1178,'multiline':False]['text':' Use cursor line only.','line_number':1193,'multiline':False]['text':'
 * Called when focus changed.  Used for the GUI or for systems where this can
 * be done in the console (Win32).
 ','line_number':1199,'multiline':True]['text':' TRUE if focus gained.','line_number':1205,'multiline':False]['text':' When activated: Check if any file was modified outside of Vim.','line_number':1210,'multiline':False]['text':' Only do this when not done within the last two seconds (could get','line_number':1211,'multiline':False]['text':' several events in a row).','line_number':1212,'multiline':False]['text':'
     * Fire the focus gained/lost autocommand.
     ','line_number':1229,'multiline':True]['text':' File may have been changed from 'readonly' to 'noreadonly'','line_number':1238,'multiline':False]['text':'
 * Save current Input Method status to specified place.
 ','line_number':1244,'multiline':True]['text':' Don't save when 'imdisable' is set or "xic" is NULL, IM is always','line_number':1250,'multiline':False]['text':' disabled then (but might start later).','line_number':1251,'multiline':False]['text':' Also don't save when inside a mapping, vgetc_im_active has not been set','line_number':1252,'multiline':False]['text':' then.','line_number':1253,'multiline':False]['text':' And don't save when the keys were stuffed (e.g., for a "." command).','line_number':1254,'multiline':False]['text':' And don't save when the GUI is running but our window doesn't have','line_number':1255,'multiline':False]['text':' input focus (e.g., when a find dialog is open).','line_number':1256,'multiline':False]['text':' Do save when IM is on, or IM is off and saved status is on.','line_number':1266,'multiline':False]