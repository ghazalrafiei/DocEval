['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * evalfunc.c: Builtin functions
 ','line_number':10,'multiline':True]['text':'
 * Functions that check the argument type of a builtin function.
 * Each function returns FAIL and gives an error message if the type is wrong.
 ','line_number':192,'multiline':True]['text':' Context passed to an arg_ function.','line_number':197,'multiline':False]['text':' actual argument count','line_number':199,'multiline':False]['text':' list of argument types','line_number':200,'multiline':False]['text':' current argument index (first arg is zero)','line_number':201,'multiline':False]['text':' A function to check one argument type.  The first argument is the type to','line_number':205,'multiline':False]['text':' check.  If needed, other argument types can be obtained with the context.','line_number':206,'multiline':False]['text':' E.g. if "arg_idx" is 1, then (type - 1) is the first argument type.','line_number':207,'multiline':False]['text':'
 * Call need_type() to check an argument type.
 ','line_number':210,'multiline':True]['text':'
 * Call need_type() to check an argument type and that it is modifiable
 ','line_number':224,'multiline':True]['text':'
 * Give an error if "type" is a constant.
 ','line_number':240,'multiline':True]['text':'
 * Check "type" is a float or a number.
 ','line_number':256,'multiline':True]['text':'
 * Check "type" is a number.
 ','line_number':270,'multiline':True]['text':'
 * Check "type" is an object.
 ','line_number':279,'multiline':True]['text':'
 * Check "type" is a dict of 'any'.
 ','line_number':292,'multiline':True]['text':'
 * Check "type" is a list of 'any'.
 ','line_number':301,'multiline':True]['text':'
 * Check "type" is a list of 'any' and modifiable
 ','line_number':310,'multiline':True]['text':'
 * Check "type" is a list of numbers.
 ','line_number':322,'multiline':True]['text':'
 * Check "type" is a list of strings.
 ','line_number':331,'multiline':True]['text':'
 * Check "type" is a string.
 ','line_number':340,'multiline':True]['text':'
 * Check "type" is a blob
 ','line_number':349,'multiline':True]['text':'
 * Check "type" is a bool or number 0 or 1.
 ','line_number':358,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a blob.
 ','line_number':367,'multiline':True]['text':'
 * Check "type" is a modifiable list of 'any' or a blob.
 ','line_number':381,'multiline':True]['text':'
 * Check "type" is a string or a number
 ','line_number':395,'multiline':True]['text':'
 * Check "type" is a buffer (string or a number)
 ','line_number':409,'multiline':True]['text':'
 * Check "type" is a buffer or a dict of any
 ','line_number':423,'multiline':True]['text':'
 * Check "type" is a line (string or a number)
 ','line_number':438,'multiline':True]['text':'
 * Check "type" is a string or a list of strings.
 ','line_number':452,'multiline':True]['text':'
 * Check "type" is a string or a list of 'any'
 ','line_number':474,'multiline':True]['text':'
 * Check "type" is a string or a dict of 'any'
 ','line_number':488,'multiline':True]['text':'
 * Check "type" is a string or a blob
 ','line_number':502,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a dict of 'any'.
 ','line_number':516,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a dict of 'any'.  And modifiable.
 ','line_number':530,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a dict of 'any' or a blob.
 * Also check if "type" is modifiable.
 ','line_number':544,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a dict of 'any' or a blob or a string.
 ','line_number':563,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a dict of 'any' or a blob or a string.
 * Also check the value is modifiable.
 ','line_number':579,'multiline':True]['text':'
 * Check second argument of map() or filter().
 ','line_number':594,'multiline':True]['text':' Use the declared type if possible, so that an error is given if','line_number':607,'multiline':False]['text':' a declared list changes type, but not if a constant list changes','line_number':608,'multiline':False]['text':' type.','line_number':609,'multiline':False]['text':' check the argument types at runtime','line_number':632,'multiline':False]['text':'
 * Check second argument of filter(): func must return a bool.
 ','line_number':669,'multiline':True]['text':'
 * Check second argument of map(), the function.
 ','line_number':686,'multiline':True]['text':'
 * Check second argument of sort() and uniq(), the "how" argument.
 ','line_number':703,'multiline':True]['text':'
 * Check an expression argument, can be a string, funcref or partial.
 * Also accept a bool, a constant resulting from compiling a string argument.
 * Also accept a number, one and zero are accepted.
 ','line_number':741,'multiline':True]['text':'
 * Check varargs' "type" are class.
 ','line_number':760,'multiline':True]['text':'
 * Check "type" is a list of 'any' or a blob or a string.
 ','line_number':780,'multiline':True]['text':'
 * Check "type" is a modifiable list of 'any' or a blob or a string.
 ','line_number':795,'multiline':True]['text':'
 * Check "type" is a job.
 ','line_number':806,'multiline':True]['text':'
 * Check "type" is a channel or a job.
 ','line_number':815,'multiline':True]['text':'
 * Check "type" can be used as the type_decl of the previous argument.
 * Must not be used for the first argcheck_T entry.
 ','line_number':829,'multiline':True]['text':'
 * Check "type" is the same basic type as the previous argument, checks list or
 * dict vs other type, but not member type.
 * Must not be used for the first argcheck_T entry.
 ','line_number':841,'multiline':True]['text':'
 * Check "type" is an item of the list or blob of the previous arg.
 * Must not be used for the first argcheck_T entry.
 ','line_number':856,'multiline':True]['text':' probably VAR_ANY, can't check','line_number':871,'multiline':False]['text':'
 * Check "type" is a string or a number or a list
 ','line_number':877,'multiline':True]['text':'
 * Check "type" is a dict of 'any' or a string
 ','line_number':892,'multiline':True]['text':'
 * Check "type" which is the third argument of extend() (number or string or
 * any)
 ','line_number':906,'multiline':True]['text':'
 * Check "type" which is the first argument of get() (blob or list or dict or
 * funcref)
 ','line_number':922,'multiline':True]['text':'
 * Check "type" which is the first argument of len() (number or string or
 * blob or list or dict)
 ','line_number':941,'multiline':True]['text':'
 * Check "type" which is the second argument of remove() (number or string or
 * any)
 ','line_number':960,'multiline':True]['text':'
 * Check "type" which is the first argument of repeat() (string or number or
 * list or any)
 ','line_number':976,'multiline':True]['text':'
 * Check "type" which is the first argument of slice() (list or blob or string
 * or any)
 ','line_number':994,'multiline':True]['text':'
 * Check "type" which is the first argument of count() (string or list or dict
 * or any)
 ','line_number':1011,'multiline':True]['text':'
 * Check "type" which is the first argument of cursor() (number or string or
 * list or any)
 ','line_number':1029,'multiline':True]['text':'
 * Lists of functions that check the argument types of a builtin function.
 ','line_number':1046,'multiline':True]['text':' Function specific argument types (not covered by the above) ','line_number':1139,'multiline':True]['text':' Can be used by functions called through "f_retfunc" to create new types.','line_number':1188,'multiline':False]['text':'
 * Functions that return the return type of a builtin function.
 * Note that "argtypes" is NULL if "argcount" is zero.
 ','line_number':1191,'multiline':True]['text':' if the second argument has a different current type then the current','line_number':1428,'multiline':False]['text':' type is "any"','line_number':1429,'multiline':False]['text':' for map(): returns first argument but item type may differ','line_number':1453,'multiline':False]['text':' for getline()','line_number':1470,'multiline':False]['text':' for finddir()','line_number':1481,'multiline':False]['text':' Depending on the count would be a string or a list of strings.','line_number':1489,'multiline':False]['text':' for values(): list of member of first argument','line_number':1492,'multiline':False]['text':'
 * Used for getqflist(): returns list if there is no argument, dict if there is
 * one.
 ','line_number':1516,'multiline':True]['text':'
 * Used for getloclist(): returns list if there is one argument, dict if there
 * are two.
 ','line_number':1531,'multiline':True]['text':' argv() returns list of strings','line_number':1551,'multiline':False]['text':' argv(0) returns a string, but argv(-1] returns a list','line_number':1558,'multiline':False]['text':' Assume that if the third argument is passed it's non-zero','line_number':1593,'multiline':False]['text':' Assume that if the second argument is passed it's non-zero','line_number':1607,'multiline':False]['text':' Assume that if the fourth argument is passed it's non-zero','line_number':1621,'multiline':False]['text':'
 * Array with names and number of arguments of all internal functions
 * MUST BE KEPT SORTED IN strcmp() ORDER FOR BINARY SEARCH!
 *
 * The function may be varargs. In that case
 *	- f_max_argc == VARGS
 *	- f_argcheck must be NULL terminated. Last non-null argument
 *	  should check all the remaining args.
 *	  NOTE: if varargs, there can only be one NULL in f_argcheck array.
 ','line_number':1627,'multiline':True]['text':' function name','line_number':1639,'multiline':False]['text':' minimal number of arguments','line_number':1640,'multiline':False]['text':' maximal number of arguments','line_number':1641,'multiline':False]['text':' for method: FEARG_ values','line_number':1642,'multiline':False]['text':' list of functions to check argument types','line_number':1643,'multiline':False]['text':' return type function','line_number':1646,'multiline':False]['text':' implementation of function','line_number':1648,'multiline':False]['text':' Set f_max_argc to VARGS for varargs.','line_number':1651,'multiline':False]['text':' values for f_argtype; zero means it cannot be used as a method','line_number':1654,'multiline':False]['text':' base is the first argument','line_number':1655,'multiline':False]['text':' base is the second argument','line_number':1656,'multiline':False]['text':' base is the third argument','line_number':1657,'multiline':False]['text':' base is the fourth argument','line_number':1658,'multiline':False]['text':' obsolete','line_number':1790,'multiline':False]['text':' obsolete','line_number':1792,'multiline':False]['text':' obsolete','line_number':1794,'multiline':False]['text':' obsolete','line_number':1960,'multiline':False]['text':' obsolete','line_number':2126,'multiline':False]['text':' obsolete','line_number':2128,'multiline':False]['text':' obsolete','line_number':2214,'multiline':False]['text':'
 * Function given to ExpandGeneric() to obtain the list of internal
 * or user defined function names.
 ','line_number':2916,'multiline':True]['text':' Skip if the function doesn't have an implementation (feature not','line_number':2941,'multiline':False]['text':' implemented).','line_number':2942,'multiline':False]['text':'
 * Function given to ExpandGeneric() to obtain the list of internal or
 * user defined variable or function names.
 ','line_number':2955,'multiline':True]['text':'
 * Find internal function "name" in table "global_functions".
 * Return index, or -1 if not found or "implemented" is TRUE and the function
 * is not implemented.
 ','line_number':2976,'multiline':True]['text':' Find the function name in the table. Binary search.','line_number':2991,'multiline':False]['text':'
 * Find internal function "name" in table "global_functions".
 * Return index, or -1 if not found or the function is not implemented.
 ','line_number':3008,'multiline':True]['text':'
 * Check the argument types for builtin function "idx".
 * Uses the list of types on the type stack: "types".
 * Return FAIL and gives an error message when a type is wrong.
 ','line_number':3036,'multiline':True]['text':'
 * Get the argument count for function "idx".
 * "argcount" is the total argument count, "min_argcount" the non-optional
 * argument count.
 ','line_number':3076,'multiline':True]['text':'
 * Call the "f_retfunc" function to obtain the return type of function "idx".
 * "decl_type" is set to the declared type.
 * "argtypes" is the list of argument types or NULL when there are no
 * arguments.
 * "argcount" may be less than the actual count when only getting the type.
 ','line_number':3088,'multiline':True]['text':'
 * Return TRUE if "idx" is for the map() function.
 ','line_number':3114,'multiline':True]['text':'
 * Check the argument count to use for internal function "idx".
 * Returns -1 for failure, 0 if no method base accepted, 1 if method base is
 * first argument, 2 if method base is second argument, etc.  9 if method base
 * is last argument.
 ','line_number':3123,'multiline':True]['text':'
 * Invoke a method for base->method().
 ','line_number':3180,'multiline':True]['text':' base value goes second','line_number':3209,'multiline':False]['text':' base value goes third','line_number':3220,'multiline':False]['text':' base value goes fourth','line_number':3232,'multiline':False]['text':' FEARG_1: base value goes first','line_number':3242,'multiline':False]['text':'
 * Return TRUE for a non-zero Number and a non-empty String.
 ','line_number':3253,'multiline':True]['text':'
 * "and(expr, expr)" function
 ','line_number':3268,'multiline':True]['text':'
 * "balloon_show()" function
 ','line_number':3283,'multiline':True]['text':' empty list removes the balloon','line_number':3318,'multiline':False]['text':' empty string removes the balloon','line_number':3331,'multiline':False]['text':' Skip the first and last item, they are always empty.','line_number':3353,'multiline':False]['text':'
 * Get the buffer from "arg" and give an error and return NULL if it is not
 * valid.
 ','line_number':3364,'multiline':True]['text':'
 * "byte2line(byte)" function
 ','line_number':3381,'multiline':True]['text':' boff gets -1 on type error','line_number':3395,'multiline':False]['text':'
 * "call(func, arglist [, dict])" function
 ','line_number':3404,'multiline':True]['text':' type error, empty name or null function','line_number':3437,'multiline':False]['text':' Turn "import.Func" into "scriptname#Func".','line_number':3450,'multiline':False]['text':'
 * "changenr()" function
 ','line_number':3472,'multiline':True]['text':'
 * "char2nr(string)" function
 ','line_number':3481,'multiline':True]['text':'
 * Get the current cursor column and store it in 'rettv'. If 'charcol' is TRUE,
 * returns the character index of the column. Otherwise, returns the byte index
 * of the column.
 ','line_number':3508,'multiline':True]['text':' use the window specified in the second argument','line_number':3530,'multiline':False]['text':' '> can be MAXCOL, get the length of the line then','line_number':3548,'multiline':False]['text':' col(".") when the cursor is on the NUL at the end of the line','line_number':3557,'multiline':False]['text':' because of "coladd" can be seen as an extra column.','line_number':3558,'multiline':False]['text':'
 * "charcol()" function
 ','line_number':3580,'multiline':True]['text':'
 * "col(string)" function
 ','line_number':3606,'multiline':True]['text':'
 * "confirm(message, buttons[, default [, type]])" function
 ','line_number':3615,'multiline':True]['text':'
 * "copy()" function
 ','line_number':3680,'multiline':True]['text':'
 * Set the cursor position.
 * If "charcol" is TRUE, then use the column number as a character offset.
 * Otherwise use the column number as a byte offset.
 ','line_number':3689,'multiline':True]['text':' type error; errmsg already given','line_number':3750,'multiline':False]['text':' Make sure the cursor is in a valid position.','line_number':3757,'multiline':False]['text':' Correct cursor for multi-byte character.','line_number':3759,'multiline':False]['text':'
 * "cursor(lnum, col)" function, or
 * "cursor(list)"
 *
 * Moves the cursor to the specified line and column.
 * Returns 0 when the position could be set, -1 otherwise.
 ','line_number':3767,'multiline':True]['text':'
 * "debugbreak()" function
 ','line_number':3781,'multiline':True]['text':'
 * "deepcopy()" function
 ','line_number':3810,'multiline':True]['text':'
 * "did_filetype()" function
 ','line_number':3827,'multiline':True]['text':'
 * "echoraw({expr})" function
 ','line_number':3836,'multiline':True]['text':'
 * "empty({expr})" function
 ','line_number':3855,'multiline':True]['text':'
 * "environ()" function
 ','line_number':3933,'multiline':True]['text':' out of memory','line_number':3974,'multiline':False]['text':'
 * "err_teapot()" function
 ','line_number':3988,'multiline':True]['text':'
 * "escape({string}, {chars})" function
 ','line_number':4015,'multiline':True]['text':'
 * "eval()" function
 ','line_number':4033,'multiline':True]['text':'
 * "eventhandler()" function
 ','line_number':4061,'multiline':True]['text':'
 * Append "value[value_len]" to the execute() output.
 ','line_number':4072,'multiline':True]['text':' Append the entire string','line_number':4081,'multiline':False]['text':' Append only "value_len" characters','line_number':4083,'multiline':False]['text':'
 * Get next line from a string containing NL separated lines.
 * Called by do_cmdline() to get the next line.
 * Returns an allocated string, or NULL when at the end of the string.
 ','line_number':4093,'multiline':True]['text':'
 * Execute a series of Ex commands in 'str'
 ','line_number':4125,'multiline':True]['text':'
 * Get next line from a list.
 * Called by do_cmdline() to get the next line.
 * Returns allocated string, or NULL for end of function.
 ','line_number':4136,'multiline':True]['text':'
 * "execute()" function
 ','line_number':4160,'multiline':True]['text':' empty list, no commands, empty output','line_number':4185,'multiline':False]['text':' prevent leading spaces','line_number':4230,'multiline':False]['text':' For "legacy call execute('cmd')" and "vim9cmd execute('cmd')" apply the','line_number':4232,'multiline':False]['text':' command modifiers to "cmd".','line_number':4233,'multiline':False]['text':' Need to append a NUL to the result.','line_number':4249,'multiline':False]['text':' "silent reg" or "silent echo x" leaves msg_col somewhere in the line.','line_number':4269,'multiline':False]['text':' When not working silently: put it in column zero.  A following','line_number':4271,'multiline':False]['text':' "echon" will overwrite the message, unavoidably.','line_number':4272,'multiline':False]['text':' When working silently: Put it back where it was, since nothing','line_number':4275,'multiline':False]['text':' should have been written.','line_number':4276,'multiline':False]['text':'
 * "execute()" function
 ','line_number':4280,'multiline':True]['text':'
 * "exists()" function
 ','line_number':4294,'multiline':True]['text':' environment variable','line_number':4307,'multiline':False]['text':' first try "normal" environment variables (fast)','line_number':4309,'multiline':False]['text':' try expanding things like $VIM and ${HOME}','line_number':4314,'multiline':False]['text':' option','line_number':4321,'multiline':False]['text':' trailing garbage','line_number':4325,'multiline':False]['text':' internal or user defined function','line_number':4327,'multiline':False]['text':' internal function only','line_number':4331,'multiline':False]['text':' internal variable','line_number':4346,'multiline':False]['text':'
 * "expand()" function
 ','line_number':4360,'multiline':True]['text':' avoid using 'completeslash' here','line_number':4384,'multiline':False]['text':' When the optional second argument is non-zero, don't remove matches','line_number':4418,'multiline':False]['text':' for 'wildignore' and don't put matches for 'suffixes' at the end.','line_number':4419,'multiline':False]['text':'
 * "expandcmd()" function
 * Expand all the special characters in a command string.
 ','line_number':4448,'multiline':True]['text':'
 * "feedkeys()" function
 ','line_number':4491,'multiline':True]['text':' This is not allowed in the sandbox.  If the commands would still be','line_number':4507,'multiline':False]['text':' executed in the sandbox it would be OK, but it probably happens later,','line_number':4508,'multiline':False]['text':' when "sandbox" is no longer set.','line_number':4509,'multiline':False]['text':' if a CTRL-C was typed, set got_int, similar to what','line_number':4554,'multiline':False]['text':' happens in fill_input_buf()','line_number':4555,'multiline':False]['text':' Need to escape K_SPECIAL and CSI before putting the string in','line_number':4566,'multiline':False]['text':' the typeahead buffer.','line_number':4567,'multiline':False]['text':' Avoid a 1 second delay when the keys start Insert mode.','line_number':4591,'multiline':False]['text':'
 * "fnameescape({string})" function
 ','line_number':4623,'multiline':True]['text':'
 * "foreground()" function
 ','line_number':4637,'multiline':True]['text':'
 * "function()" function
 * "funcref()" function
 ','line_number':4655,'multiline':True]['text':' function(MyFunc, [arg], dict)','line_number':4678,'multiline':False]['text':' function(dict.MyFunc, [arg])','line_number':4684,'multiline':False]['text':' function('MyFunc', [arg], dict)','line_number':4690,'multiline':False]['text':' Don't check an autoload name for existence here.','line_number':4713,'multiline':False]['text':' Expand s: and <SID> into <SNR>nr_, so that the function can','line_number':4725,'multiline':False]['text':' also be called from another script. Using trans_function_name()','line_number':4726,'multiline':False]['text':' would also work, but some plugins depend on the name being','line_number':4727,'multiline':False]['text':' printable text.','line_number':4728,'multiline':False]['text':' function(name, [args], dict)','line_number':4739,'multiline':False]['text':' function(name, dict)','line_number':4744,'multiline':False]['text':' function(name, [args])','line_number':4747,'multiline':False]['text':' result is a VAR_PARTIAL','line_number':4782,'multiline':False]['text':' For "function(dict.func, [], dict)" and "func" is a partial','line_number':4816,'multiline':False]['text':' use "dict".  That is backwards compatible.','line_number':4817,'multiline':False]['text':' The dict is bound explicitly, pt_auto is FALSE.','line_number':4820,'multiline':False]['text':' If the dict was bound automatically the result is also','line_number':4826,'multiline':False]['text':' bound automatically.','line_number':4827,'multiline':False]['text':' result is a VAR_FUNC','line_number':4867,'multiline':False]['text':'
 * "funcref()" function
 ','line_number':4877,'multiline':True]['text':'
 * "function()" function
 ','line_number':4886,'multiline':True]['text':'
 * "garbagecollect()" function
 ','line_number':4895,'multiline':True]['text':' This is postponed until we are back at the toplevel, because we may be','line_number':4904,'multiline':False]['text':' using Lists and Dicts internally.  E.g.: ":echo [garbagecollect()]".','line_number':4905,'multiline':False]['text':'
 * "get()" function
 ','line_number':4912,'multiline':True]['text':' use <SNR> instead of the byte code','line_number':4995,'multiline':False]['text':' When {what} == "dict" and pt->pt_dict == NULL, evaluate the','line_number':5020,'multiline':False]['text':' third argument','line_number':5021,'multiline':False]['text':'
 * "getchangelist()" function
 ','line_number':5038,'multiline':True]['text':'
     * The current window change list index tracks only the position for the
     * current buffer. For other buffers use the stored index for the current
     * window, or, if that's not available, the change list length.
     ','line_number':5072,'multiline':True]['text':' Do not change "curswant", as it is unexpected that a get','line_number':5165,'multiline':False]['text':' function has a side effect.','line_number':5166,'multiline':False]['text':'
 * "getcharpos()" function
 ','line_number':5180,'multiline':True]['text':'
 * "getcharsearch()" function
 ','line_number':5192,'multiline':True]['text':'
 * "getenv()" function
 ','line_number':5208,'multiline':True]['text':'
 * "getfontname()" function
 ','line_number':5233,'multiline':True]['text':' Get the "Normal" font.  Either the name saved by','line_number':5253,'multiline':False]['text':' hl_set_font_name() or from the font ID.','line_number':5254,'multiline':False]['text':' don't use font dialog','line_number':5261,'multiline':False]['text':' Invalid font name, return empty string.','line_number':5265,'multiline':False]['text':'
 * "getjumplist()" function
 ','line_number':5274,'multiline':True]['text':'
 * "getpid()" function
 ','line_number':5328,'multiline':True]['text':'
 * "getcurpos()" function
 ','line_number':5337,'multiline':True]['text':'
 * "getpos(string)" function
 ','line_number':5358,'multiline':True]['text':'
 * Common between getreg(), getreginfo() and getregtype(): get the register
 * name from the first argument.
 * Returns zero on error.
 ','line_number':5370,'multiline':True]['text':' type error; errmsg already given','line_number':5388,'multiline':False]['text':' Default to v:register','line_number':5392,'multiline':False]['text':'
 * "getreg()" function
 ','line_number':5398,'multiline':True]['text':'
 * "getregtype()" function
 ','line_number':5450,'multiline':True]['text':' on error return an empty string','line_number':5460,'multiline':False]['text':'
 * "gettagstack()" function
 ','line_number':5485,'multiline':True]['text':' default is current window','line_number':5491,'multiline':False]['text':'
 * "gettext()" function
 ','line_number':5509,'multiline':True]['text':' for VIM_VERSION_ defines','line_number':5522,'multiline':False]['text':'
 * "has()" function
 ','line_number':5525,'multiline':True]['text':' Mac OS X (and, once, Mac OS Classic)','line_number':5583,'multiline':False]['text':' Mac OS X','line_number':5590,'multiline':False]['text':' Mac OS X, with the darwin feature','line_number':5597,'multiline':False]['text':' synonym for macunix','line_number':5604,'multiline':False]['text':' always present, of course!','line_number':5868,'multiline':False]['text':' graduated feature','line_number':5869,'multiline':False]['text':' always with FEAT_EVAL, since 7.4.2120 with closure','line_number':6011,'multiline':False]['text':' graduated feature','line_number':6375,'multiline':False]['text':' was accidentally included in 5.4','line_number':6448,'multiline':False]['text':' for backward compatibility','line_number':6526,'multiline':False]['text':' same #ifdef as used for ex_tearoff().','line_number':6569,'multiline':False]['text':' features also in has_list[] but sometimes enabled at runtime','line_number':6593,'multiline':False]['text':' intentionally empty','line_number':6598,'multiline':False]['text':' features not in has_list[]','line_number':6667,'multiline':False]['text':' This works for patch-8.1.2, patch-9.0.3, patch-10.0.4, etc.','line_number':6680,'multiline':False]['text':' Not for patch-9.10.5.','line_number':6681,'multiline':False]['text':' Expect "patch-9.9.01234".','line_number':6688,'multiline':False]['text':' gui_mch_browse() works when GUI is running','line_number':6730,'multiline':False]['text':' return whether feature could ever be enabled','line_number':6778,'multiline':False]['text':' return whether feature is enabled','line_number':6781,'multiline':False]['text':'
 * Return TRUE if "feature" can change later.
 * Also when checking for the feature has side effects, such as loading a DLL.
 ','line_number':6785,'multiline':True]['text':' this can only change on Unix where the ":gui" command could be','line_number':6800,'multiline':False]['text':' used.','line_number':6801,'multiline':False]['text':' once "starting" is zero it will stay that way','line_number':6840,'multiline':False]['text':'
 * "haslocaldir()" function
 ','line_number':6849,'multiline':True]['text':' Check for window-local and tab-local directories','line_number':6866,'multiline':False]['text':'
 * "highlightID(name)" function
 ','line_number':6875,'multiline':True]['text':'
 * "highlight_exists()" function
 ','line_number':6887,'multiline':True]['text':'
 * "hostname()" function
 ','line_number':6899,'multiline':True]['text':'
 * "index()" function
 ','line_number':6912,'multiline':True]['text':' Start at specified item.  Use the cached index that list_find()','line_number':6983,'multiline':False]['text':' sets, so that a negative number also works.','line_number':6984,'multiline':False]['text':'
 * Evaluate 'expr' with the v:key and v:val arguments and return the result.
 * The expression is expected to return a boolean value.  The caller should set
 * the VV_KEY and VV_VAL vim variables before calling this function.
 ','line_number':7001,'multiline':True]['text':'
 * Evaluate 'expr' for each byte in the Blob 'b' starting with the byte at
 * 'startidx' and return the index of the byte where 'expr' is TRUE.  Returns
 * -1 if 'expr' doesn't evaluate to TRUE for any of the bytes.
 ','line_number':7027,'multiline':True]['text':' negative index: index from the last byte','line_number':7042,'multiline':False]['text':'
 * Evaluate 'expr' for each item in the List 'l' starting with the item at
 * 'startidx' and return the index of the item where 'expr' is TRUE.  Returns
 * -1 if 'expr' doesn't evaluate to TRUE for any of the items.
 ','line_number':7063,'multiline':True]['text':' Start at specified item.  Use the cached index that list_find()','line_number':7084,'multiline':False]['text':' sets, so that a negative number also works.','line_number':7085,'multiline':False]['text':'
 * "indexof()" function
 ','line_number':7108,'multiline':True]['text':' We reset "did_emsg" to be able to detect whether an error occurred','line_number':7137,'multiline':False]['text':' during evaluation of the expression.','line_number':7138,'multiline':False]['text':'
 * "input()" function
 *     Also handles inputsecret() when inputsecret is set.
 ','line_number':7156,'multiline':True]['text':'
 * "inputdialog()" function
 ','line_number':7166,'multiline':True]['text':' Use a GUI dialog if the GUI is running and 'c' is not in 'guioptions'','line_number':7173,'multiline':False]['text':'
 * "inputlist()" function
 ','line_number':7214,'multiline':True]['text':' While starting up, there is no place to enter text. When running tests','line_number':7226,'multiline':False]['text':' with --not-a-term we assume feedkeys() will be used.','line_number':7227,'multiline':False]['text':' for when 'cmdheight' > 1','line_number':7241,'multiline':False]['text':' avoid more prompt','line_number':7242,'multiline':False]['text':' Ask for choice.','line_number':7254,'multiline':False]['text':'
 * "inputrestore()" function
 ','line_number':7264,'multiline':True]['text':' default return is zero == OK','line_number':7275,'multiline':False]['text':' Failed','line_number':7280,'multiline':False]['text':'
 * "inputsave()" function
 ','line_number':7284,'multiline':True]['text':' Add an entry to the stack of typeahead storage.','line_number':7290,'multiline':False]['text':' default return is zero == OK','line_number':7296,'multiline':False]['text':' Failed','line_number':7299,'multiline':False]['text':'
 * "inputsecret()" function
 ','line_number':7302,'multiline':True]['text':'
 * "interrupt()" function
 ','line_number':7320,'multiline':True]['text':'
 * "invert(expr)" function
 ','line_number':7329,'multiline':True]['text':'
 * Free resources in lval_root allocated by fill_exec_lval_root().
 ','line_number':7341,'multiline':True]['text':'
 * This is used if executing in a method, the argument string is a
 * variable/item expr/reference. It may start with a potential class/object
 * variable.
 *
 * Adjust "root" as needed; lr_tv may be changed or freed.
 *
 * Always returns OK.
 * Free resources and return FAIL if the root should not be used. Otherwise OK.
 ','line_number':7354,'multiline':True]['text':' Check if lr_tv is the name of an object/class reference: name start with','line_number':7369,'multiline':False]['text':' "this" or name is class variable. Clear lr_tv if neither.','line_number':7370,'multiline':False]['text':' not object member, try class member','line_number':7377,'multiline':False]['text':' Explicitly check if the name is a class member.','line_number':7379,'multiline':False]['text':' If it's not then do nothing.','line_number':7380,'multiline':False]['text':' A class variable, replace lr_tv with it','line_number':7387,'multiline':False]['text':' Not a member variable','line_number':7396,'multiline':False]['text':' If FAIL, then must free_lval_root(root);','line_number':7398,'multiline':False]['text':'
 * "islocked()" function
 ','line_number':7402,'multiline':True]['text':' fully initialized in fill_exec_lval_root','line_number':7422,'multiline':False]['text':' Set up lval_root if executing in a method.','line_number':7425,'multiline':False]['text':' Almost always produces a valid lval_root since lr_cl_exec is used','line_number':7428,'multiline':False]['text':' for access verification, lr_tv may be set to NULL.','line_number':7429,'multiline':False]['text':' Consider a variable locked when:','line_number':7455,'multiline':False]['text':' 1. the variable itself is locked','line_number':7456,'multiline':False]['text':' 2. the value of the variable is locked.','line_number':7457,'multiline':False]['text':' 3. the List or Dict value is locked.','line_number':7458,'multiline':False]['text':' List item.','line_number':7488,'multiline':False]['text':' Dictionary item.','line_number':7491,'multiline':False]['text':'
 * "keytrans()" function
 ','line_number':7501,'multiline':True]['text':' Need to escape K_SPECIAL and CSI for mb_unescape().','line_number':7513,'multiline':False]['text':'
 * "last_buffer_nr()" function.
 ','line_number':7519,'multiline':True]['text':'
 * "len()" function
 ','line_number':7535,'multiline':True]['text':' The first two args must be strings, otherwise it's meaningless','line_number':7599,'multiline':False]['text':'
 * "libcall()" function
 ','line_number':7626,'multiline':True]['text':'
 * "libcallnr()" function
 ','line_number':7635,'multiline':True]['text':'
 * "line(string, [winid])" function
 ','line_number':7644,'multiline':True]['text':' use window specified in the second argument','line_number':7665,'multiline':False]['text':' use current window','line_number':7679,'multiline':False]['text':'
 * "line2byte(lnum)" function
 ','line_number':7687,'multiline':True]['text':'
 * "luaeval()" function
 ','line_number':7712,'multiline':True]['text':' matchend()','line_number':7734,'multiline':False]['text':' match()','line_number':7735,'multiline':False]['text':' matchstr()','line_number':7736,'multiline':False]['text':' matchlist()','line_number':7737,'multiline':False]['text':' matchstrpos()','line_number':7738,'multiline':False]['text':' Make 'cpoptions' empty, the 'l' flag should not be used here.','line_number':7761,'multiline':False]['text':' type MATCH_LIST: return empty list when there are no matches.','line_number':7768,'multiline':False]['text':' type MATCH_POS: return ["", -1, -1, -1]','line_number':7769,'multiline':False]['text':' use the cached index','line_number':7830,'multiline':False]['text':' When "count" argument is there ignore matches before "start",','line_number':7838,'multiline':False]['text':' otherwise skip part of the string.  Differs when pattern is "^"','line_number':7839,'multiline':False]['text':' or "\<".','line_number':7840,'multiline':False]['text':' Advance to just after the match.','line_number':7883,'multiline':False]['text':' return list with matched string and submatches','line_number':7925,'multiline':False]['text':' return matched string','line_number':7943,'multiline':False]['text':' matchstrpos() without a list: drop the second item.','line_number':7968,'multiline':False]['text':'
 * "match()" function
 ','line_number':7975,'multiline':True]['text':'
 * "matchend()" function
 ','line_number':7984,'multiline':True]['text':'
 * "matchlist()" function
 ','line_number':7993,'multiline':True]['text':'
 * "matchstr()" function
 ','line_number':8002,'multiline':True]['text':'
 * "matchstrpos()" function
 ','line_number':8011,'multiline':True]['text':' type error; errmsg already given','line_number':8053,'multiline':False]['text':' type error; errmsg already given','line_number':8061,'multiline':False]['text':' type error; errmsg already given','line_number':8087,'multiline':False]['text':'
 * "max()" function
 ','line_number':8105,'multiline':True]['text':'
 * "min()" function
 ','line_number':8114,'multiline':True]['text':'
 * "mzeval()" function
 ','line_number':8124,'multiline':True]['text':'
 * "nextnonblank()" function
 ','line_number':8157,'multiline':True]['text':'
 * "nr2char()" function
 ','line_number':8181,'multiline':True]['text':'
 * "or(expr, expr)" function
 ','line_number':8214,'multiline':True]['text':'
 * "perleval()" function
 ','line_number':8230,'multiline':True]['text':'
 * "prevnonblank()" function
 ','line_number':8247,'multiline':True]['text':' This dummy va_list is here because:','line_number':8267,'multiline':False]['text':' - passing a NULL pointer doesn't work when va_list isn't a pointer','line_number':8268,'multiline':False]['text':' - locally in the function results in a "used before set" warning','line_number':8269,'multiline':False]['text':' - using va_start() to initialize it gives "function with fixed args" error','line_number':8270,'multiline':False]['text':'
 * "printf()" function
 ','line_number':8273,'multiline':True]['text':' Get the required length, allocate the buffer and do it for real.','line_number':8291,'multiline':False]['text':'
 * "pum_getpos()" function
 ','line_number':8308,'multiline':True]['text':'
 * "pumvisible()" function
 ','line_number':8319,'multiline':True]['text':'
 * "py3eval()" function
 ','line_number':8330,'multiline':True]['text':'
 * "pyeval()" function
 ','line_number':8354,'multiline':True]['text':'
 * "pyxeval()" function
 ','line_number':8378,'multiline':True]['text':' FAIL or OK once tried','line_number':8426,'multiline':False]['text':' Attempt reading /dev/urandom.','line_number':8445,'multiline':False]['text':' Reading /dev/urandom doesn't work, fall back to:','line_number':8465,'multiline':False]['text':' - randombytes_random()','line_number':8466,'multiline':False]['text':' - reltime() or time()','line_number':8467,'multiline':False]['text':' - XOR with process ID','line_number':8468,'multiline':False]['text':'
 * "rand()" function
 ','line_number':8507,'multiline':True]['text':' When no argument is given use the global seed list.','line_number':8524,'multiline':False]['text':' Initialize the global seed list.','line_number':8527,'multiline':False]['text':'
 * "srand()" function
 ','line_number':8578,'multiline':True]['text':'
 * "range()" function
 ','line_number':8615,'multiline':True]['text':' type error; errmsg already given','line_number':8650,'multiline':False]['text':' Create a non-materialized list.  This is much more efficient and','line_number':8664,'multiline':False]['text':' works with ":for".  If used otherwise CHECK_LIST_MATERIALIZE() must','line_number':8665,'multiline':False]['text':' be called.','line_number':8666,'multiline':False]['text':'
 * Materialize "list".
 * Do not call directly, use CHECK_LIST_MATERIALIZE()
 ','line_number':8677,'multiline':True]['text':'
 * "getreginfo()" function
 ','line_number':8703,'multiline':True]['text':'
 * "reg_executing()" function
 ','line_number':8775,'multiline':True]['text':'
 * "reg_recording()" function
 ','line_number':8784,'multiline':True]['text':'
 * "rename({from}, {to})" function
 ','line_number':8793,'multiline':True]['text':'
 * "repeat()" function
 ','line_number':8814,'multiline':True]['text':' No need to copy since all bytes are already zero','line_number':8864,'multiline':False]['text':' don't move cursor','line_number':8894,'multiline':False]['text':' repeat to find outer pair','line_number':8895,'multiline':False]['text':' return matchcount','line_number':8896,'multiline':False]['text':' set previous context mark','line_number':8897,'multiline':False]['text':' accept match at start position','line_number':8898,'multiline':False]['text':' return nr of matching sub-pattern','line_number':8899,'multiline':False]['text':' leave cursor at end of match','line_number':8900,'multiline':False]['text':' start at cursor column','line_number':8901,'multiline':False]['text':'
 * Get flags for a search function.
 * Possibly sets "p_ws".
 * Returns BACKWARD, FORWARD or zero (for an error).
 ','line_number':8903,'multiline':True]['text':' type error; errmsg already given','line_number':8921,'multiline':False]['text':'
 * Shared by search() and searchpos() functions.
 ','line_number':8957,'multiline':True]['text':' default: FAIL','line_number':8969,'multiline':False]['text':' may set p_ws','line_number':8990,'multiline':False]['text':' Optional arguments: line number to stop searching, timeout and skip.','line_number':9001,'multiline':False]['text':'
     * This function does not accept SP_REPEAT and SP_RETCOUNT flags.
     * Check to make sure only those flags are set.
     * Also, Only the SP_NOMOVE or the SP_SETPCMARK flag can be set. Both
     * flags cannot be set. Check for that condition also.
     ','line_number':9018,'multiline':True]['text':' Repeat until {skip} returns FALSE.','line_number':9039,'multiline':False]['text':' finding the first match again means there is no match where {skip}','line_number':9044,'multiline':False]['text':' evaluates to zero.','line_number':9045,'multiline':False]['text':' didn't find it or no skip argument','line_number':9050,'multiline':False]['text':' If the skip expression matches, ignore this match.','line_number':9055,'multiline':False]['text':' Evaluating {skip} caused an error, break here.','line_number':9067,'multiline':False]['text':' clear the start flag to avoid getting stuck here','line_number':9075,'multiline':False]['text':' Store the match cursor position','line_number':9090,'multiline':False]['text':' "/$" will put the cursor after the end of the line, may need to','line_number':9094,'multiline':False]['text':' correct that here','line_number':9095,'multiline':False]['text':' If 'n' flag is used: restore cursor position.','line_number':9099,'multiline':False]['text':'
 * "rubyeval()" function
 ','line_number':9111,'multiline':True]['text':'
 * "screenattr()" function
 ','line_number':9128,'multiline':True]['text':'
 * "screenchar()" function
 ','line_number':9153,'multiline':True]['text':'
 * "screenchars()" function
 ','line_number':9181,'multiline':True]['text':'
 * "screencol()" function
 *
 * First column is 1 to be consistent with virtcol().
 ','line_number':9219,'multiline':True]['text':'
 * "screenrow()" function
 ','line_number':9230,'multiline':True]['text':'
 * "screenstring()" function
 ','line_number':9239,'multiline':True]['text':'
 * "search()" function
 ','line_number':9266,'multiline':True]['text':'
 * "searchdecl()" function
 ','line_number':9277,'multiline':True]['text':' default: FAIL','line_number':9288,'multiline':False]['text':'
 * Used by searchpair() and searchpairpos()
 ','line_number':9309,'multiline':True]['text':' default: FAIL','line_number':9322,'multiline':False]['text':' Get the three pattern arguments: start, middle, end. Will result in an','line_number':9338,'multiline':False]['text':' error if not a valid argument.','line_number':9339,'multiline':False]['text':' type error','line_number':9344,'multiline':False]['text':' Handle the optional fourth argument: flags','line_number':9346,'multiline':False]['text':' may set p_ws','line_number':9347,'multiline':False]['text':' Don't accept SP_END or SP_SUBPAT.','line_number':9351,'multiline':False]['text':' Only one of the SP_NOMOVE or SP_SETPCMARK flags can be set.','line_number':9352,'multiline':False]['text':' Using 'r' implies 'W', otherwise it doesn't work.','line_number':9360,'multiline':False]['text':' Optional fifth argument: skip expression','line_number':9364,'multiline':False]['text':' Type is checked later.','line_number':9370,'multiline':False]['text':'
 * "searchpair()" function
 ','line_number':9404,'multiline':True]['text':'
 * "searchpairpos()" function
 ','line_number':9413,'multiline':True]['text':'
 * Search for a start/middle/end thing.
 * Used by searchpair(), see its documentation for the details.
 * Returns 0 or -1 for no match,
 ','line_number':9436,'multiline':True]['text':' start pattern','line_number':9443,'multiline':False]['text':' middle pattern','line_number':9444,'multiline':False]['text':' end pattern','line_number':9445,'multiline':False]['text':' BACKWARD or FORWARD','line_number':9446,'multiline':False]['text':' skip expression','line_number':9447,'multiline':False]['text':' SP_SETPCMARK and other SP_ values','line_number':9448,'multiline':False]['text':' stop at this line if not zero','line_number':9450,'multiline':False]['text':' stop after this many msec','line_number':9451,'multiline':False]['text':' Make 'cpoptions' empty, the 'l' flag should not be used here.','line_number':9468,'multiline':False]['text':' Make two search patterns: start/end (pat2, for in nested pairs) and','line_number':9472,'multiline':False]['text':' start/middle/end (pat3, for the top pair).','line_number':9473,'multiline':False]['text':' didn't find it or found the first match again: FAIL','line_number':9508,'multiline':False]['text':' Found the same position again.  Can happen with a pattern that','line_number':9515,'multiline':False]['text':' has "\zs" at the end and searching backwards.  Advance one','line_number':9516,'multiline':False]['text':' character and try again.','line_number':9517,'multiline':False]['text':' clear the start flag to avoid getting stuck here','line_number':9525,'multiline':False]['text':' If the skip pattern matches, ignore this match.','line_number':9528,'multiline':False]['text':' Evaluating {skip} caused an error, break here.','line_number':9538,'multiline':False]['text':' Found end when searching backwards or start when searching','line_number':9549,'multiline':False]['text':' forward: nested pair.','line_number':9550,'multiline':False]['text':' nested, don't search for middle','line_number':9552,'multiline':False]['text':' Found end when searching forward or start when searching','line_number':9556,'multiline':False]['text':' backward: end of (nested) pair; or found middle in outer pair.','line_number':9557,'multiline':False]['text':' outer level, search for middle','line_number':9559,'multiline':False]['text':' Found the match: return matchcount or line number.','line_number':9564,'multiline':False]['text':' search for next unmatched','line_number':9574,'multiline':False]['text':' Store the match cursor position','line_number':9580,'multiline':False]['text':' If 'n' flag is used or search failed: restore cursor position.','line_number':9585,'multiline':False]['text':' Darn, evaluating the {skip} expression changed the value.','line_number':9600,'multiline':False]['text':' If it's still empty it was changed and restored, need to restore in','line_number':9601,'multiline':False]['text':' the complicated way.','line_number':9602,'multiline':False]['text':'
 * "searchpos()" function
 ','line_number':9611,'multiline':True]['text':'
 * Set the cursor or mark position.
 * If "charpos" is TRUE, then use the column number as a character offset.
 * Otherwise use the column number as a byte offset.
 ','line_number':9639,'multiline':True]['text':' set cursor; "fnum" is ignored','line_number':9670,'multiline':False]['text':' set mark','line_number':9682,'multiline':False]['text':'
 * "setcharpos()" function
 ','line_number':9689,'multiline':True]['text':'
 * "setcursorcharpos" function
 ','line_number':9736,'multiline':True]['text':'
 * "setenv()" function
 ','line_number':9745,'multiline':True]['text':' setting an environment variable may be dangerous, e.g. you could','line_number':9758,'multiline':False]['text':' setenv GCONV_PATH=/tmp and then have iconv() unexpectedly call','line_number':9759,'multiline':False]['text':' a shell command using some shared library:','line_number':9760,'multiline':False]['text':'
 * "setfperm({fname}, {mode})" function
 ','line_number':9772,'multiline':True]['text':'
 * "setpos()" function
 ','line_number':9814,'multiline':True]['text':'
 * Translate a register type string to the yank type and block length
 ','line_number':9823,'multiline':True]['text':' character-wise selection','line_number':9832,'multiline':False]['text':' line-wise selection','line_number':9835,'multiline':False]['text':' block-wise selection','line_number':9838,'multiline':False]['text':'
 * "setreg()" function
 ','line_number':9854,'multiline':True]['text':' FAIL is default','line_number':9882,'multiline':False]['text':' type error; errmsg already given','line_number':9885,'multiline':False]['text':' Empty dict, clear the register (like setreg(0, []))','line_number':9902,'multiline':False]['text':' type error','line_number':9949,'multiline':False]['text':' append','line_number':9953,'multiline':False]['text':' If the list is NULL handle like an empty list.','line_number':9972,'multiline':False]['text':' First half: use for pointers to result lines; second half: use for','line_number':9975,'multiline':False]['text':' pointers to allocated copies.','line_number':9976,'multiline':False]['text':' Need to make a copy, next tv_get_string_buf_chk() will','line_number':9994,'multiline':False]['text':' overwrite the string.','line_number':9995,'multiline':False]['text':'
 * "settagstack()" function
 ','line_number':10027,'multiline':True]['text':' first argument: window number or id','line_number':10045,'multiline':False]['text':' second argument: dict with items to set in the tag stack','line_number':10050,'multiline':False]['text':' third argument: action - 'a' for append and 'r' for replace.','line_number':10057,'multiline':False]['text':' default is to replace the stack.','line_number':10058,'multiline':False]['text':'
 * "sha256({string})" function
 ','line_number':10084,'multiline':True]['text':' FEAT_CRYPT','line_number':10100,'multiline':False]['text':'
 * "shellescape({string})" function
 ','line_number':10102,'multiline':True]['text':'
 * shiftwidth() function
 ','line_number':10121,'multiline':True]['text':' type error; errmsg already given','line_number':10138,'multiline':False]['text':'
 * "soundfold({word})" function
 ','line_number':10148,'multiline':True]['text':'
 * "spellbadword()" function
 ','line_number':10168,'multiline':True]['text':' Find the start and length of the badly spelled word.','line_number':10208,'multiline':False]['text':' Check the argument for spelling.','line_number':10223,'multiline':False]['text':'
 * "spellsuggest()" function
 ','line_number':10250,'multiline':True]['text':' Make 'cpoptions' empty, the 'l' flag should not be used here.','line_number':10355,'multiline':False]['text':' empty item at the end','line_number':10383,'multiline':False]['text':' Advance to just after the match.','line_number':10399,'multiline':False]['text':' Don't get stuck at the same match.','line_number':10403,'multiline':False]['text':'
 * "submatch()" function
 ','line_number':10415,'multiline':True]['text':'
 * "substitute()" function
 ','line_number':10455,'multiline':True]['text':'
 * "swapfilelist()" function
 ','line_number':10497,'multiline':True]['text':'
 * "swapinfo(swap_filename)" function
 ','line_number':10508,'multiline':True]['text':'
 * "swapname(expr)" function
 ','line_number':10521,'multiline':True]['text':'
 * "synID(lnum, col, trans)" function
 ','line_number':10542,'multiline':True]['text':' -1 on type error','line_number':10561,'multiline':False]['text':' -1 on type error','line_number':10562,'multiline':False]['text':'
 * "synIDattr(id, what [, mode])" function
 ','line_number':10573,'multiline':True]['text':' replace invalid with current','line_number':10600,'multiline':False]['text':' bg[#]','line_number':10618,'multiline':False]['text':' bold','line_number':10620,'multiline':False]['text':' fg[#] or font','line_number':10624,'multiline':False]['text':' inverse','line_number':10629,'multiline':False]['text':' italic','line_number':10631,'multiline':False]['text':' nocombine','line_number':10636,'multiline':False]['text':' name','line_number':10638,'multiline':False]['text':' reverse','line_number':10642,'multiline':False]['text':' sp[#]','line_number':10647,'multiline':False]['text':' strikeout','line_number':10649,'multiline':False]['text':' standout','line_number':10653,'multiline':False]['text':' underline','line_number':10661,'multiline':False]['text':' undercurl','line_number':10664,'multiline':False]['text':' underdashed','line_number':10667,'multiline':False]['text':' underdouble','line_number':10670,'multiline':False]['text':' underdotted','line_number':10673,'multiline':False]['text':' ul','line_number':10677,'multiline':False]['text':'
 * "synIDtrans(id)" function
 ','line_number':10689,'multiline':True]['text':'
 * "synconcealed(lnum, col)" function
 ','line_number':10712,'multiline':True]['text':' -1 on type error','line_number':10735,'multiline':False]['text':' -1 on type error','line_number':10736,'multiline':False]['text':' get the conceal character','line_number':10749,'multiline':False]['text':' -1 to auto-determine strlen','line_number':10768,'multiline':False]['text':'
 * "synstack(lnum, col)" function
 ','line_number':10775,'multiline':True]['text':' -1 on type error','line_number':10796,'multiline':False]['text':' -1 on type error','line_number':10797,'multiline':False]['text':'
 * "tabpagebuflist()" function
 ','line_number':10816,'multiline':True]['text':'
 * "tagfiles()" function
 ','line_number':10845,'multiline':True]['text':'
 * "taglist()" function
 ','line_number':10869,'multiline':True]['text':'
 * "type(expr)" function
 ','line_number':10895,'multiline':True]['text':'
 * "virtcol({expr}, [, {list} [, {winid}]])" function
 ','line_number':10931,'multiline':True]['text':' use the window specified in the third argument','line_number':10956,'multiline':False]['text':' Limit the column to a valid value, getvvcol() doesn't check.','line_number':10973,'multiline':False]['text':'
 * "visualmode()" function
 ','line_number':11005,'multiline':True]['text':' A non-zero number or non-empty string argument: reset mode.','line_number':11021,'multiline':False]['text':'
 * "wildmenumode()" function
 ','line_number':11026,'multiline':True]['text':'
 * "windowsversion()" function
 ','line_number':11036,'multiline':True]['text':'
 * "wordcount()" function
 ','line_number':11046,'multiline':True]['text':'
 * "xor(expr, expr)" function
 ','line_number':11057,'multiline':True]['text':' FEAT_EVAL','line_number':11072,'multiline':False]