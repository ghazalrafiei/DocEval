['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * viminfo.c: viminfo related functions
 ','line_number':10,'multiline':True]['text':'
 * Structure used for reading from the viminfo file.
 ','line_number':17,'multiline':True]['text':' text of the current line','line_number':22,'multiline':False]['text':' file descriptor','line_number':23,'multiline':False]['text':' encoding conversion','line_number':24,'multiline':False]['text':' viminfo version detected or -1','line_number':25,'multiline':False]['text':' lines starting with |','line_number':26,'multiline':False]['text':' free later when not NULL','line_number':39,'multiline':False]['text':' length of bv_string','line_number':40,'multiline':False]['text':' bv_string was allocated','line_number':41,'multiline':False]['text':'
 * Find the parameter represented by the given character (eg ''', ':', '"', or
 * '/') in the 'viminfo' option and return a pointer to the string after it.
 * Return NULL if the parameter is not specified in the string.
 ','line_number':48,'multiline':True]['text':' 'n' is always the last one','line_number':62,'multiline':False]['text':' skip until next ','','line_number':64,'multiline':False]['text':' hit the end without finding parameter','line_number':65,'multiline':False]['text':'
 * Find the parameter represented by the given character (eg ', :, ", or /),
 * and return its associated value in the 'viminfo' string.
 * Only works for number parameters, not for 'r' or 'n'.
 * If the parameter is not specified in the string or there is no following
 * number, return -1.
 ','line_number':71,'multiline':True]['text':'
 * Get the viminfo file name to use.
 * If "file" is given and not empty, use it (has already been expanded by
 * cmdline functions).
 * Otherwise use "-i file_name", value from 'viminfo' or the default, and
 * expand environment variables.
 * Returns an allocated string.  NULL when out of memory.
 ','line_number':89,'multiline':True]['text':' Use $VIM only if $HOME is the default "C:/".','line_number':111,'multiline':False]['text':' don't use $VIM when not available.','line_number':119,'multiline':False]['text':' $VIM was expanded','line_number':121,'multiline':False]['text':'
 * write string to viminfo file
 * - replace CTRL-V with CTRL-V CTRL-V
 * - replace '\n'   with CTRL-V 'n'
 * - add a '\n' at the end
 *
 * For a long line:
 * - write " CTRL-V <length> \n " in first line
 * - write " < <string> \n "	  in second line
 ','line_number':136,'multiline':True]['text':' If the string will be too long, write its length and put it in the next','line_number':160,'multiline':False]['text':' line.  Take into account that some room is needed for what comes before','line_number':161,'multiline':False]['text':' the string (e.g., variable name).  Add something to the length for the','line_number':162,'multiline':False]['text':' '<', NL and trailing NUL.','line_number':163,'multiline':False]['text':'
 * Write a string in quotes that barline_parse() can read back.
 * Breaks the line in less than LSIZE pieces when needed.
 * Returns remaining characters in the line.
 ','line_number':180,'multiline':True]['text':' Count the number of characters produced, including quotes.','line_number':192,'multiline':False]['text':' Leave enough space for another continuation.','line_number':232,'multiline':False]['text':'
 * Check string read from viminfo file.
 * Remove '\n' at the end of the line.
 * - replace CTRL-V CTRL-V with CTRL-V
 * - replace CTRL-V 'n'    with '\n'
 *
 * Check for a long line as written by viminfo_writestring().
 *
 * Return the string in allocated memory (NULL when out of memory).
 ','line_number':240,'multiline':True]['text':' offset for virp->vir_line','line_number':253,'multiline':False]['text':' convert the string','line_number':254,'multiline':False]['text':' Invalid length, line too long, out of memory?  Skip next line.','line_number':267,'multiline':False]['text':' Skip the leading '<'','line_number':272,'multiline':False]['text':' Change CTRL-V CTRL-V to CTRL-V and CTRL-V n to \n in-place.','line_number':282,'multiline':False]['text':'
 * Read a line from the viminfo file.
 * Returns TRUE for end-of-file;
 ','line_number':312,'multiline':True]['text':' Handle long line and escaped characters.','line_number':334,'multiline':False]['text':' don't read in if there are files on the command-line or if writing:','line_number':337,'multiline':False]['text':' Format is: <fname> Tab <lnum> Tab <col>.','line_number':341,'multiline':False]['text':' Watch out for a Tab in the file name, work from the end.','line_number':342,'multiline':False]['text':' Expand "~/" in the file name at "line + 1" to a full path.','line_number':358,'multiline':False]['text':' Then try shortening it by comparing with the current directory','line_number':359,'multiline':False]['text':' just in case...','line_number':364,'multiline':False]['text':'
 * Return TRUE if "name" is on removable media (depending on 'viminfo').
 ','line_number':376,'multiline':True]['text':' Without a number -1 is returned: do all buffers.','line_number':419,'multiline':False]['text':' Allocate room for the file name, lnum and col.','line_number':422,'multiline':False]['text':'
 * Buffers for history read from a viminfo file.  Only valid while reading.
 ','line_number':453,'multiline':True]['text':'
 * Translate a history type number to the associated character.
 ','line_number':462,'multiline':True]['text':' use '?' instead of '/'','line_number':468,'multiline':False]['text':'
 * Prepare for reading the history from the viminfo file.
 * This allocates history arrays to store the read history lines.
 ','line_number':484,'multiline':True]['text':' Count the number of empty spaces in the history list.  Entries read','line_number':507,'multiline':False]['text':' from viminfo previously are also considered empty.  If there are','line_number':508,'multiline':False]['text':' more spaces available than we request, then fill them up.','line_number':509,'multiline':False]['text':'
 * Accept a line from the viminfo, store it in the history array when it's
 * new.
 ','line_number':527,'multiline':True]['text':' Need to re-allocate to append the separator byte.','line_number':553,'multiline':False]['text':' Search entry: Move the separator from the first','line_number':561,'multiline':False]['text':' column to after the NUL.','line_number':562,'multiline':False]['text':' Not a search entry: No separator in the viminfo','line_number':568,'multiline':False]['text':' file, add a NUL separator.','line_number':569,'multiline':False]['text':'
 * Accept a new style history line from the viminfo, store it in the history
 * array when it's new.
 ','line_number':584,'multiline':True]['text':' Check the format:','line_number':599,'multiline':False]['text':' |{bartype},{histtype},{timestamp},{separator},"text"','line_number':600,'multiline':False]['text':' If lines were written by an older Vim we need to avoid','line_number':627,'multiline':False]['text':' getting duplicates. See if the entry already exists.','line_number':628,'multiline':False]['text':' Need to re-allocate to append the separator byte.','line_number':642,'multiline':False]['text':' for picky compilers','line_number':647,'multiline':False]['text':' Put the separator after the NUL.','line_number':654,'multiline':False]['text':'
 * Concatenate history lines from viminfo after the lines typed in this Vim.
 ','line_number':664,'multiline':True]['text':'
 * Merge history lines from viminfo and lines typed in this Vim based on the
 * timestamp;
 ','line_number':727,'multiline':True]['text':' Make one long list with all entries.','line_number':744,'multiline':False]['text':' Sort the list on timestamp.','line_number':761,'multiline':False]['text':' Keep the newest ones.','line_number':764,'multiline':False]['text':' Free what is not kept.','line_number':779,'multiline':False]['text':'
 * Finish reading history lines from viminfo.  Not used when writing viminfo.
 ','line_number':789,'multiline':True]['text':'
 * Write history to viminfo file in "fp".
 * When "merge" is TRUE merge history lines with a previously read viminfo
 * file, data is in viminfo_history[].
 * When "merge" is FALSE just write all history lines.  Used for ":wviminfo!".
 ','line_number':813,'multiline':True]['text':' Use default','line_number':840,'multiline':False]['text':' Merge typed and viminfo history:','line_number':851,'multiline':False]['text':' round 1: history of typed commands.','line_number':852,'multiline':False]['text':' round 2: history from recently read viminfo.','line_number':853,'multiline':False]['text':' start at newest entry, somewhere in the list','line_number':857,'multiline':False]['text':' start at newest entry, first in the list','line_number':860,'multiline':False]['text':' empty list','line_number':863,'multiline':False]['text':' For the search history: put the separator in the','line_number':892,'multiline':False]['text':' second column; use a space if there isn't one.','line_number':893,'multiline':False]['text':' New style history with a bar line. Format:','line_number':904,'multiline':False]['text':' |{bartype},{histtype},{timestamp},{separator},"text"','line_number':905,'multiline':False]['text':' Decrement index, loop around and stop when back at','line_number':918,'multiline':False]['text':' the start.','line_number':919,'multiline':False]['text':' Increment index. Stop at the end in the while.','line_number':927,'multiline':False]['text':' Skip over continuation lines until seeing a useful line.','line_number':953,'multiline':False]['text':'
 * Parse a viminfo line starting with '|'.
 * Add each decoded value to "values".
 * Returns TRUE if the next line is to be read after using the parsed values.
 ','line_number':965,'multiline':True]['text':' Need to read a continuation line.  Put strings in allocated','line_number':992,'multiline':False]['text':' memory, because virp->vir_line is overwritten.','line_number':993,'multiline':False]['text':' String value was split into lines that are each shorter','line_number':1015,'multiline':False]['text':' than LSIZE:','line_number':1016,'multiline':False]['text':'     |{bartype},>{length of "{text}{text2}"}','line_number':1017,'multiline':False]['text':'     |<"{text1}','line_number':1018,'multiline':False]['text':'     |<{text2}",{value}','line_number':1019,'multiline':False]['text':' Length includes the quotes.','line_number':1020,'multiline':False]['text':' File was truncated or garbled. Read another line if','line_number':1033,'multiline':False]['text':' this one starts with '|'.','line_number':1034,'multiline':False]['text':' Get length of text, excluding |< and NL chars.','line_number':1038,'multiline':False]['text':' more values follow after the string','line_number':1046,'multiline':False]['text':' Line ending in ">" continues in the next line:','line_number':1058,'multiline':False]['text':'     |{bartype},{lots of values},>','line_number':1059,'multiline':False]['text':'     |<{value},{value}','line_number':1060,'multiline':False]['text':' File was truncated or garbled. Read another line if','line_number':1064,'multiline':False]['text':' this one starts with '|'.','line_number':1065,'multiline':False]['text':' Unescape special characters in-place.','line_number':1082,'multiline':False]['text':' syntax error, drop the value','line_number':1087,'multiline':False]['text':' the converted string is stored in bv_string and','line_number':1111,'multiline':False]['text':' freed later, also need to free "buf" later','line_number':1112,'multiline':False]['text':' Need to copy in allocated memory if the string wasn't allocated','line_number':1119,'multiline':False]['text':' above and we did allocate before, thus vir_line may change.','line_number':1120,'multiline':False]['text':' values following a long string','line_number':1130,'multiline':False]['text':' "vim -i NONE" does not read or write a viminfo file','line_number':1156,'multiline':False]['text':'
 * Report an error for reading a viminfo file.
 * Count the number of errors.	When there are more than 10, return TRUE.
 ','line_number':1160,'multiline':True]['text':'
 * Compare the 'encoding' value in the viminfo file with the current value of
 * 'encoding'.  If different and the 'c' flag is in 'viminfo', setup for
 * conversion of text with iconv() in viminfo_readstring().
 ','line_number':1181,'multiline':True]['text':' remove trailing newline','line_number':1197,'multiline':False]['text':'
 * Restore global vars that start with a capital from the viminfo file
 ','line_number':1210,'multiline':True]['text':' isolate the variable name','line_number':1226,'multiline':False]['text':' Failed to parse back the dict or list, use it as a','line_number':1259,'multiline':False]['text':' string.','line_number':1260,'multiline':False]['text':' Failed to parse back the blob, use it as a string.','line_number':1274,'multiline':False]['text':' when in a function use global variables','line_number':1284,'multiline':False]['text':'
 * Write global vars that start with a capital to the viminfo file
 ','line_number':1301,'multiline':True]['text':' has a circular reference, can't turn the','line_number':1344,'multiline':False]['text':' value into a string','line_number':1345,'multiline':False]['text':' has a circular reference, can't turn the','line_number':1358,'multiline':False]['text':' value into a string','line_number':1359,'multiline':False]['text':' backwards compat.','line_number':1364,'multiline':False]['text':' do not use "v:true" but "1"','line_number':1384,'multiline':False]['text':' FEAT_EVAL','line_number':1399,'multiline':False]['text':'
 * Functions relating to reading/writing the search pattern from viminfo
 ','line_number':1421,'multiline':True]['text':' Old line types:','line_number':1442,'multiline':False]['text':' "/pat", "&pat": search/subst. pat','line_number':1443,'multiline':False]['text':' "~/pat", "~&pat": last used search/subst. pat','line_number':1444,'multiline':False]['text':' New line types:','line_number':1445,'multiline':False]['text':' "~h", "~H": hlsearch highlighting off/on','line_number':1446,'multiline':False]['text':' "~<magic><smartcase><line><end><off><last><which>pat"','line_number':1447,'multiline':False]['text':' <magic>: 'm' off, 'M' on','line_number':1448,'multiline':False]['text':' <smartcase>: 's' off, 'S' on','line_number':1449,'multiline':False]['text':' <line>: 'L' line offset, 'l' char offset','line_number':1450,'multiline':False]['text':' <end>: 'E' from end, 'e' from start','line_number':1451,'multiline':False]['text':' <off>: decimal, offset','line_number':1452,'multiline':False]['text':' <last>: '~' last used pattern','line_number':1453,'multiline':False]['text':' <which>: '/' search pat, '&' subst. pat','line_number':1454,'multiline':False]['text':' new line type','line_number':1456,'multiline':False]['text':' magic on','line_number':1458,'multiline':False]['text':' use this pattern for last-used pattern','line_number':1469,'multiline':False]['text':' ~h: 'hlsearch' highlighting off','line_number':1479,'multiline':False]['text':' ~H: 'hlsearch' highlighting on','line_number':1481,'multiline':False]['text':' file to write to','line_number':1511,'multiline':False]['text':' spats[] index','line_number':1512,'multiline':False]['text':' search pat','line_number':1513,'multiline':False]['text':' dir char','line_number':1514,'multiline':False]['text':' off.dir is not stored, it's reset to forward','line_number':1521,'multiline':False]['text':' magic','line_number':1523,'multiline':False]['text':' smartcase','line_number':1524,'multiline':False]['text':' line offset','line_number':1525,'multiline':False]['text':' offset from end','line_number':1526,'multiline':False]['text':' offset','line_number':1527,'multiline':False]['text':' last used pat','line_number':1528,'multiline':False]['text':'
 * Functions relating to reading/writing registers from viminfo
 ','line_number':1547,'multiline':True]['text':'
 * Prepare for reading viminfo registers when writing viminfo later.
 ','line_number':1556,'multiline':True]['text':' init to shut up compiler','line_number':1595,'multiline':False]['text':' init to shut up compiler','line_number':1596,'multiline':False]['text':' We only get here (hopefully) if line[0] == '"'','line_number':1599,'multiline':False]['text':' If the line starts with "" this is the y_previous register.','line_number':1602,'multiline':False]['text':' too many errors, pretend end-of-file','line_number':1612,'multiline':False]['text':' "x@: register x used for @@','line_number':1622,'multiline':False]['text':' Optimized for registers containing <= 100 lines','line_number':1628,'multiline':False]['text':' Build the new register in array[].','line_number':1631,'multiline':False]['text':' y_array is kept as-is until done.','line_number':1632,'multiline':False]['text':' The "do_it" flag is reset when something is wrong, in which case','line_number':1633,'multiline':False]['text':' array[] needs to be freed.','line_number':1634,'multiline':False]['text':' get the block width; if it's missing we get a zero, which is OK','line_number':1645,'multiline':False]['text':' error, don't store the result','line_number':1675,'multiline':False]['text':' free y_array[]','line_number':1682,'multiline':False]['text':' Move the lines from array[] to y_array[].','line_number':1697,'multiline':False]['text':' Free array[] if it was filled.','line_number':1710,'multiline':False]['text':'
 * Accept a new style register line from the viminfo, store it when it's new.
 ','line_number':1719,'multiline':True]['text':' Check the format:','line_number':1736,'multiline':False]['text':' |{bartype},{flags},{name},{type},','line_number':1737,'multiline':False]['text':'      {linecount},{width},{timestamp},"line1","line2"','line_number':1738,'multiline':False]['text':' Reading viminfo for merging and writing.  Store the register','line_number':1762,'multiline':False]['text':' content, don't update the current registers.','line_number':1763,'multiline':False]['text':' Do not overwrite unless forced or the timestamp is newer.','line_number':1768,'multiline':False]['text':' ensure object state is consistent','line_number':1798,'multiline':False]['text':' Get '<' value, use old '"' value if '<' is not found.','line_number':1833,'multiline':False]['text':' Skip '*'/'+' register, we don't want them back next time','line_number':1846,'multiline':False]['text':' Neither do we want the '~' register','line_number':1851,'multiline':False]['text':' When reading viminfo for merging and writing: Use the register from','line_number':1855,'multiline':False]['text':' viminfo if it's newer.','line_number':1856,'multiline':False]['text':' Skip empty registers.','line_number':1867,'multiline':False]['text':' Skip register if there is more text than the maximum size.','line_number':1876,'multiline':False]['text':' If max_num_lines < 0, then we save ALL the lines in the register','line_number':1908,'multiline':False]['text':' New style with a bar line. Format:','line_number':1921,'multiline':False]['text':' |{bartype},{flags},{name},{type},','line_number':1922,'multiline':False]['text':'      {linecount},{width},{timestamp},"line1","line2"','line_number':1923,'multiline':False]['text':' flags: REG_PREVIOUS - register is y_previous','line_number':1924,'multiline':False]['text':'	      REG_EXEC - used for @@','line_number':1925,'multiline':False]['text':' 11 chars for type/flags/name/type, 3 * 20 for numbers','line_number':1933,'multiline':False]['text':'
 * Functions relating to reading/writing marks from viminfo
 ','line_number':1947,'multiline':True]['text':' Write the last used timestamp as the lnum of the non-existing mark '*'.','line_number':1972,'multiline':False]['text':' Older Vims will ignore it and/or copy it.','line_number':1973,'multiline':False]['text':' changelist positions are stored oldest first','line_number':1981,'multiline':False]['text':' skip duplicates','line_number':1984,'multiline':False]['text':'
 * Return TRUE if marks for "buf" should not be written.
 ','line_number':1993,'multiline':True]['text':'
 * Write all the named marks for all buffers.
 * When "buflist" is not NULL fill it with the buffers for which marks are to
 * be written.
 ','line_number':2002,'multiline':True]['text':' Set b_last_cursor for the all buffers that have a window.','line_number':2016,'multiline':False]['text':' Only write something if buffer has been loaded and at least one','line_number':2023,'multiline':False]['text':' mark is set.','line_number':2024,'multiline':False]['text':' not set','line_number':2061,'multiline':False]['text':' there is a buffer','line_number':2064,'multiline':False]['text':' use name from .viminfo','line_number':2067,'multiline':False]['text':' Barline: |{bartype},{name},{lnum},{col},{timestamp},{filename}','line_number':2074,'multiline':False]['text':' size up to filename: 8 + 3 * 20','line_number':2075,'multiline':False]['text':' Write the filemarks 'A - 'Z','line_number':2103,'multiline':False]['text':' Find a mark that is the same file and position as the cursor.','line_number':2114,'multiline':False]['text':' That one, or else the last one is deleted.','line_number':2115,'multiline':False]['text':' Move '0 to '1, '1 to '2, etc. until the matching one or '9','line_number':2116,'multiline':False]['text':' Set the '0 mark to current cursor position.','line_number':2117,'multiline':False]['text':' Write the filemarks '0 - '9.  Newest (highest timestamp) first.','line_number':2139,'multiline':False]['text':' skip duplicate','line_number':2165,'multiline':False]['text':' Write the jumplist with -'','line_number':2170,'multiline':False]['text':' add current cursor position','line_number':2172,'multiline':False]['text':'
 * Compare functions for qsort() below, that compares b_last_used.
 ','line_number':2199,'multiline':True]['text':'
 * Handle marks in the viminfo file:
 * fp_out != NULL: copy marks, in time order with buffers in "buflist".
 * fp_out == NULL && (flags & VIF_WANT_MARKS): read marks for curbuf
 * fp_out == NULL && (flags & VIF_ONLY_CURBUF): bail out after curbuf marks
 * fp_out == NULL && (flags & VIF_GET_OLDFILES | VIF_FORCEIT): fill v:oldfiles
 ','line_number':2213,'multiline':True]['text':' Sort the list of buffers on b_last_used.','line_number':2251,'multiline':False]['text':' too many errors, return now','line_number':2274,'multiline':False]['text':' Skip this dud line','line_number':2277,'multiline':False]['text':' Handle long line and translate escaped characters.','line_number':2280,'multiline':False]['text':' Find file name, set str to start.','line_number':2281,'multiline':False]['text':' Ignore leading and trailing white space.','line_number':2282,'multiline':False]['text':' If fp_out == NULL, load marks for current buffer.','line_number':2299,'multiline':False]['text':' If fp_out != NULL, copy marks for buffers not in buflist.','line_number':2300,'multiline':False]['text':' only need to do this once','line_number':2306,'multiline':False]['text':' fp_out != NULL','line_number':2312,'multiline':False]['text':' This is slow if there are many buffers!!','line_number':2314,'multiline':False]['text':' Copy marks if the buffer has not been loaded.','line_number':2323,'multiline':False]['text':' Read the next line.  If it has the "*" mark compare the','line_number':2330,'multiline':False]['text':' time stamps.  Write entries from "buflist" that are','line_number':2331,'multiline':False]['text':' newer.','line_number':2332,'multiline':False]['text':' No timestamp, must be written by an older Vim.','line_number':2357,'multiline':False]['text':' Assume all remaining buffers are older than','line_number':2358,'multiline':False]['text':' ours.','line_number':2359,'multiline':False]['text':' changelist positions are stored oldest','line_number':2407,'multiline':False]['text':' first','line_number':2408,'multiline':False]['text':' list is full, remove oldest entry','line_number':2410,'multiline':False]['text':' Using the line number for the last-used','line_number':2420,'multiline':False]['text':' timestamp.','line_number':2421,'multiline':False]['text':' Write any remaining entries from buflist.','line_number':2448,'multiline':False]['text':'
 * Read marks for the current buffer from the viminfo file, when we support
 * buffer marks and the buffer has a name.
 ','line_number':2459,'multiline':True]['text':' Always set b_marks_read; needed when 'viminfo' is changed to include','line_number':2470,'multiline':False]['text':' the ' parameter after opening a buffer.','line_number':2471,'multiline':False]['text':' We only get here if line[0] == '\'' or '-'.','line_number':2483,'multiline':False]['text':' Illegal mark names are ignored (for future expansion).','line_number':2484,'multiline':False]['text':' If the jumplist isn't full insert fmark as oldest entry','line_number':2493,'multiline':False]['text':'
 * Prepare for reading viminfo marks when writing viminfo later.
 ','line_number':2529,'multiline':True]['text':'
 * Accept a new style mark line from the viminfo, store it when it's new.
 ','line_number':2559,'multiline':True]['text':' Check the format:','line_number':2572,'multiline':False]['text':' |{bartype},{name},{lnum},{col},{timestamp},{filename}','line_number':2573,'multiline':False]['text':' If we have a timestamp insert it in the right place.','line_number':2603,'multiline':False]['text':' idx cannot be zero now','line_number':2612,'multiline':False]['text':' insert as the oldest entry','line_number':2614,'multiline':False]['text':' insert as oldest entry','line_number':2618,'multiline':False]['text':' Drop the oldest entry.','line_number':2627,'multiline':False]['text':' Move newer entries forward.','line_number':2635,'multiline':False]['text':' Do not use the name from the viminfo file, insert in time','line_number':2661,'multiline':False]['text':' order.','line_number':2662,'multiline':False]['text':' All existing entries are newer.','line_number':2667,'multiline':False]['text':' The format is: |{bartype},{value},...','line_number':2717,'multiline':False]['text':' For a very long string:','line_number':2718,'multiline':False]['text':'     |{bartype},>{length of "{text}{text2}"}','line_number':2719,'multiline':False]['text':'     |<{text1}','line_number':2720,'multiline':False]['text':'     |<{text2},{value}','line_number':2721,'multiline':False]['text':' For a long line not using a string','line_number':2722,'multiline':False]['text':'     |{bartype},{lots of values},>','line_number':2723,'multiline':False]['text':'     |<{value},{value}','line_number':2724,'multiline':False]['text':' Continuation line of an unrecognized item.','line_number':2727,'multiline':False]['text':' Only use the version when it comes before the encoding.','line_number':2738,'multiline':False]['text':' If it comes later it was copied by a Vim version that','line_number':2739,'multiline':False]['text':' doesn't understand the version.','line_number':2740,'multiline':False]['text':' copy unrecognized line (for future use)','line_number':2766,'multiline':False]['text':'
 * read_viminfo_up_to_marks() -- Only called from do_viminfo().  Reads in the
 * first part of the viminfo file which contains everything but the marks that
 * are local to a file.  Returns TRUE when end-of-file is reached. -- webb
 ','line_number':2785,'multiline':True]['text':' Characters reserved for future expansion, ignored now','line_number':2807,'multiline':False]['text':' "+40 /path/dir file", for running vim without args','line_number':2808,'multiline':False]['text':' to be defined','line_number':2809,'multiline':False]['text':' long line - ignored','line_number':2810,'multiline':False]['text':' A comment or empty line.','line_number':2811,'multiline':False]['text':' "*encoding=value"','line_number':2822,'multiline':False]['text':' global variable','line_number':2826,'multiline':False]['text':' entry for buffer list','line_number':2833,'multiline':False]['text':' When registers are in bar lines skip the old style register','line_number':2837,'multiline':False]['text':' lines.','line_number':2838,'multiline':False]['text':' Search string','line_number':2847,'multiline':False]['text':' Substitute search string','line_number':2848,'multiline':False]['text':' Last search string, followed by '/' or '&'','line_number':2849,'multiline':False]['text':' When history is in bar lines skip the old style history','line_number':2859,'multiline':False]['text':' lines.','line_number':2860,'multiline':False]['text':' When file marks are in bar lines skip the old style lines.','line_number':2868,'multiline':False]['text':' Finish reading history items.','line_number':2884,'multiline':False]['text':' Change file names to buffer numbers for fmarks.','line_number':2888,'multiline':False]['text':'
 * do_viminfo() -- Should only be called from read_viminfo() & write_viminfo().
 ','line_number':2895,'multiline':True]['text':' Registers and marks are read and kept separate from what','line_number':2920,'multiline':False]['text':' this Vim is using.  They are merged when writing.','line_number':2921,'multiline':False]['text':' Skip info, find start of marks','line_number':2931,'multiline':False]['text':' Write the info:','line_number':2942,'multiline':False]['text':'
 * read_viminfo() -- Read the viminfo file.  Registers etc. which are already
 * set are not over-written unless "flags" includes VIF_FORCEIT. -- webb
 ','line_number':2980,'multiline':True]['text':' file name or NULL to use default name','line_number':2986,'multiline':False]['text':' VIF_WANT_INFO et al.','line_number':2987,'multiline':False]['text':' mch_stat() of existing viminfo file','line_number':2991,'multiline':False]['text':' get file name in allocated buffer','line_number':2996,'multiline':False]['text':'
 * Write the viminfo file.  The old one is read in first so that effectively a
 * merge of current info and old info is done.  This allows multiple vims to
 * run simultaneously, without losing any marks etc.
 * If "forceit" is TRUE, then the old file is not read in, and only internal
 * info is written to the file.
 ','line_number':3029,'multiline':True]['text':' input viminfo file, if any','line_number':3040,'multiline':False]['text':' output viminfo file','line_number':3041,'multiline':False]['text':' name of temp viminfo file','line_number':3042,'multiline':False]['text':' mch_stat() of potential new file','line_number':3043,'multiline':False]['text':' mch_stat() of existing viminfo file','line_number':3044,'multiline':False]['text':' use 8.3 file name','line_number':3049,'multiline':False]['text':' may set to default if NULL','line_number':3058,'multiline':False]['text':' if it does exist, but we can't read it, don't try writing','line_number':3067,'multiline':False]['text':' Create the new .viminfo non-accessible for others, because it may','line_number':3071,'multiline':False]['text':' contain text from non-accessible documents. It is up to the user to','line_number':3072,'multiline':False]['text':' widen access (e.g. to a group). This may also fail if there is a','line_number':3073,'multiline':False]['text':' race condition, then just give up.','line_number':3074,'multiline':False]['text':' There is an existing viminfo file.  Create a temporary file to','line_number':3083,'multiline':False]['text':' write the new viminfo into, in the same directory as the','line_number':3084,'multiline':False]['text':' existing viminfo file, which will be renamed once all writing is','line_number':3085,'multiline':False]['text':' successful.','line_number':3086,'multiline':False]['text':' For Unix we check the owner of the file.  It's not very nice','line_number':3090,'multiline':False]['text':' to overwrite a user's viminfo file after a "su root", with a','line_number':3091,'multiline':False]['text':' viminfo file that the user can't read.','line_number':3092,'multiline':False]['text':' avoid a wait_return() for this message, it's annoying','line_number':3104,'multiline':False]['text':' Get the file attributes of the existing viminfo file.','line_number':3111,'multiline':False]['text':' Make tempname, find one that does not exist yet.','line_number':3115,'multiline':False]['text':' Beware of a race condition: If someone logs out and all Vim','line_number':3116,'multiline':False]['text':' instances exit at the same time a temp file might be created between','line_number':3117,'multiline':False]['text':' stat() and open().  Use mch_open() with O_EXCL to avoid that.','line_number':3118,'multiline':False]['text':' May try twice: Once normal and once with shortname set, just in','line_number':3119,'multiline':False]['text':' case somebody puts his viminfo file in an 8.3 filesystem.','line_number':3120,'multiline':False]['text':' out of memory','line_number':3139,'multiline':False]['text':' Try a series of names.  Change one character, just before','line_number':3142,'multiline':False]['text':' the extension.  This should also work for an 8.3','line_number':3143,'multiline':False]['text':' file name, when after adding the extension it still is','line_number':3144,'multiline':False]['text':' the same file as the original.','line_number':3145,'multiline':False]['text':' empty file name?','line_number':3147,'multiline':False]['text':' Check if tempfile already exists.  Never overwrite an','line_number':3151,'multiline':False]['text':' existing file!','line_number':3152,'multiline':False]['text':' Check if tempfile is same as original file.  May happen','line_number':3156,'multiline':False]['text':' when modname() gave the same file back.  E.g.  silly','line_number':3157,'multiline':False]['text':' link, or file name-length reached.  Try again with','line_number':3158,'multiline':False]['text':' shortname set.','line_number':3159,'multiline':False]['text':' Try creating the file exclusively.  This may fail if','line_number':3171,'multiline':False]['text':' another Vim tries to do it at the same time.','line_number':3172,'multiline':False]['text':' fdopen() fails for some reason','line_number':3174,'multiline':False]['text':' Use mch_open() to be able to use O_NOFOLLOW and set file','line_number':3181,'multiline':False]['text':' protection:','line_number':3182,'multiline':False]['text':' Unix: same as original file, but strip s-bit.  Reset','line_number':3183,'multiline':False]['text':' umask to avoid it getting in the way.','line_number':3184,'multiline':False]['text':' Others: r&w for user only.','line_number':3185,'multiline':False]['text':' Avoid trying lots of names while the problem is lack','line_number':3200,'multiline':False]['text':' of permission, only retry if the file already','line_number':3201,'multiline':False]['text':' exists.','line_number':3202,'multiline':False]['text':' VMS','line_number':3209,'multiline':False]['text':' Assume file exists, try again with another name.','line_number':3214,'multiline':False]['text':' They all exist?  Must be something wrong! Don't write','line_number':3217,'multiline':False]['text':' the viminfo file then.','line_number':3218,'multiline':False]['text':' continue if shortname was set','line_number':3228,'multiline':False]['text':' Make sure the original owner can read/write the tempfile and','line_number':3236,'multiline':False]['text':' otherwise preserve permissions, making sure the group matches.','line_number':3237,'multiline':False]['text':' Changing the owner might fail, in which case the','line_number':3241,'multiline':False]['text':' file will now be owned by the current user, oh well.','line_number':3242,'multiline':False]['text':' can't set the group to what it should be, remove','line_number':3246,'multiline':False]['text':' group permissions','line_number':3247,'multiline':False]['text':' can't stat the file, set conservative permissions','line_number':3251,'multiline':False]['text':' Check if the new viminfo file can be written to.','line_number':3257,'multiline':False]['text':' In case of an error keep the original viminfo file.  Otherwise','line_number':3284,'multiline':False]['text':' rename the newly written file.  Give an error if that fails.','line_number':3285,'multiline':False]['text':' If the viminfo file was hidden then also hide the new file.','line_number':3294,'multiline':False]['text':'
 * ":rviminfo" and ":wviminfo".
 ','line_number':3308,'multiline':True]['text':' FEAT_VIMINFO','line_number':3331,'multiline':False]