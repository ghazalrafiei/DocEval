['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * edit.c: functions for Insert mode
 ','line_number':10,'multiline':True]['text':' Set when doing something for completion that may call edit() recursively,','line_number':21,'multiline':False]['text':' which is not allowed.','line_number':22,'multiline':False]['text':' length of line when insert started','line_number':77,'multiline':False]['text':' vcol for first inserted blank','line_number':78,'multiline':False]['text':' set Insstart_orig to Insstart','line_number':79,'multiline':False]['text':' the text of the previous insert,','line_number':81,'multiline':False]['text':' K_SPECIAL and CSI are escaped','line_number':82,'multiline':False]['text':' nr of chars in front of previous insert','line_number':83,'multiline':False]['text':' nr of chars in front of current insert','line_number':84,'multiline':False]['text':' "restart_edit" when calling edit()','line_number':85,'multiline':False]['text':' may do cindenting on this line','line_number':87,'multiline':False]['text':' reverse insert mode on','line_number':90,'multiline':False]['text':' how much to skip after edit','line_number':91,'multiline':False]['text':' was the last char 'legal'?','line_number':92,'multiline':False]['text':' start column of revins session','line_number':93,'multiline':False]['text':' call u_save() before inserting a','line_number':96,'multiline':False]['text':' char.  Set when edit() is called.','line_number':97,'multiline':False]['text':' after that arrow_used is used.','line_number':98,'multiline':False]['text':' CTRL-G U prevents syncing undo for','line_number':100,'multiline':False]['text':' the next left/right cursor key','line_number':101,'multiline':False]['text':'
 * edit(): Start inserting text.
 *
 * "cmdchar" can be:
 * 'i'	normal insert command
 * 'a'	normal append command
 * K_PS bracketed paste
 * 'R'	replace command
 * 'r'	"r<CR>" command: insert one <CR>.  Note: count can be > 1, for redo,
 *	but still only one <CR> is inserted.  The <Esc> is not used for redo.
 * 'g'	"gI" command.
 * 'V'	"gR" command for Virtual Replace mode.
 * 'v'	"gr" command for single character Virtual Replace mode.
 *
 * This function is not called recursively.  For CTRL-O commands, it returns
 * and lets the caller handle the Normal-mode command.
 *
 * Return TRUE if a CTRL-O command caused the return (insert mode pending).
 ','line_number':103,'multiline':True]['text':' if set, insert at start of line','line_number':125,'multiline':False]['text':' previous char was backspace','line_number':134,'multiline':False]['text':' line is empty before insert','line_number':135,'multiline':False]['text':' topline before insertion','line_number':136,'multiline':False]['text':' just inserted a space','line_number':140,'multiline':False]['text':' don't move cursor on return','line_number':142,'multiline':False]['text':' Remember whether editing was restarted after CTRL-O.','line_number':150,'multiline':False]['text':' sleep before redrawing, needed for "CTRL-O :" that results in an','line_number':153,'multiline':False]['text':' error message','line_number':154,'multiline':False]['text':' set Insstart_orig to Insstart','line_number':157,'multiline':False]['text':' Don't allow inserting in the sandbox.','line_number':161,'multiline':False]['text':' Don't allow changes in the buffer while editing the cmdline.  The','line_number':168,'multiline':False]['text':' caller of getcmdline() may get confused.','line_number':169,'multiline':False]['text':' Don't allow recursive insert mode when busy with completion.','line_number':170,'multiline':False]['text':' clear stuff for CTRL-X mode','line_number':176,'multiline':False]['text':'
     * Trigger InsertEnter autocommands.  Do not do this for "r<CR>" or "grx".
     ','line_number':178,'multiline':True]['text':' clear v:char','line_number':193,'multiline':False]['text':' Check for changed highlighting, e.g. for ModeMsg.','line_number':197,'multiline':False]['text':' Make sure the cursor didn't move.  Do call check_cursor_col() in','line_number':201,'multiline':False]['text':' case the text was modified.  Since Insert mode was not started yet','line_number':202,'multiline':False]['text':' a call to check_cursor_col() may move the cursor, especially with','line_number':203,'multiline':False]['text':' the "A" command, thus set State to avoid that. Also check that the','line_number':204,'multiline':False]['text':' line number is still valid (lines may have been deleted).','line_number':205,'multiline':False]['text':' Do not restore if v:char was set to a non-empty string.','line_number':206,'multiline':False]['text':' Check if the cursor line was concealed before changing State.','line_number':223,'multiline':False]['text':'
     * When doing a paste with the middle mouse button, Insstart is set to
     * where the paste started.
     ','line_number':228,'multiline':True]['text':' "gR" or "gr" command','line_number':251,'multiline':False]['text':' "gI" command','line_number':261,'multiline':False]['text':' "r<CR>" command','line_number':263,'multiline':False]['text':' insert only one <CR>','line_number':264,'multiline':False]['text':' Check if the cursor line needs redrawing after changing State.  If','line_number':286,'multiline':False]['text':' 'concealcursor' is "n" it needs to be redrawn without concealing.','line_number':287,'multiline':False]['text':' Need to position cursor again when on a TAB and when on a char with','line_number':291,'multiline':False]['text':' virtual text.','line_number':292,'multiline':False]['text':'
     * Enable langmap or IME, indicated by 'iminsert'.
     * Note that IME may enabled/disabled without us noticing here, thus the
     * 'iminsert' value may not reflect what is actually used.  It is updated
     * when hitting <Esc>.
     ','line_number':300,'multiline':True]['text':' there is no reverse replace mode','line_number':315,'multiline':False]['text':' Disable bracketed paste mode, we won't recognize the escape','line_number':327,'multiline':False]['text':' sequences.','line_number':328,'multiline':False]['text':' Disable modifyOtherKeys, keys with modifiers would cause exiting','line_number':331,'multiline':False]['text':' Insert mode.','line_number':332,'multiline':False]['text':'
     * Handle restarting Insert mode.
     * Don't do this for "CTRL-O ." (repeat an insert): In that case we get
     * here with something in the stuff buffer.
     ','line_number':336,'multiline':True]['text':'
	 * After a paste we consider text typed to be part of the insert for
	 * the pasted text. You can backspace over the pasted text too.
	 ','line_number':343,'multiline':True]['text':'
	 * If the cursor was after the end-of-line before the CTRL-O and it is
	 * now at the end-of-line, put it after the end-of-line (this is not
	 * correct in very rare cases).
	 * Also do this if curswant is greater than the current virtual
	 * column.  Eg after "^O$" or "^O80|".
	 ','line_number':353,'multiline':True]['text':' we are in insert mode now, don't need to start it anymore','line_number':380,'multiline':False]['text':' Need to save the line for undo before inserting the first char.','line_number':383,'multiline':False]['text':' The cursor line is not in a closed fold, unless 'insertmode' is set or','line_number':389,'multiline':False]['text':' restarting.','line_number':390,'multiline':False]['text':'
     * If 'showmode' is set, show the current (insert/replace/..) mode.
     * A warning message for changing a readonly file is given here, before
     * actually changing anything.  It's put after the mode, if any.
     ','line_number':395,'multiline':True]['text':' may show different cursor shape','line_number':408,'multiline':False]['text':' clear digraphs','line_number':411,'multiline':False]['text':'
     * Get the current length of the redo buffer, those characters have to be
     * skipped if we want to get to the inserted characters.
     ','line_number':414,'multiline':True]['text':'
     * Main loop in Insert mode: repeat until Insert mode is left.
     ','line_number':429,'multiline':True]['text':' reset on illegal motions','line_number':436,'multiline':False]['text':' don't repeat insert when arrow key used','line_number':440,'multiline':False]['text':' ":stopinsert" used or 'insertmode' reset','line_number':448,'multiline':False]['text':' set curwin->w_curswant for next K_DOWN or K_UP','line_number':453,'multiline':False]['text':' If there is no typeahead may check for timestamps (e.g., for when a','line_number':457,'multiline':False]['text':' menu invoked a shell command).','line_number':458,'multiline':False]['text':'
	 * When emsg() was called msg_scroll will have been set.
	 ','line_number':466,'multiline':True]['text':' When 'mousefocus' is set a mouse movement may have taken us to','line_number':472,'multiline':False]['text':' another window.  "need_mouse_correct" may then be set because of an','line_number':473,'multiline':False]['text':' autocommand.','line_number':474,'multiline':False]['text':' Open fold at the cursor line, according to 'foldopen'.','line_number':480,'multiline':False]['text':' Close folds where the cursor isn't, according to 'foldclose'','line_number':483,'multiline':False]['text':'
	 * If we inserted a character at the last position of the last line in
	 * the window, scroll the window one line up. This avoids an extra
	 * redraw.
	 * This is detected when the cursor column is smaller after inserting
	 * something.
	 * Don't do this when the topline changed already, it has
	 * already been adjusted (by insertchar() calling open_line())).
	 * Also don't do this when 'smoothscroll' is set, as the window should
	 * then be scrolled by screen lines.
	 ','line_number':496,'multiline':True]['text':' May need to adjust w_topline to show the cursor.','line_number':550,'multiline':False]['text':' may set must_redraw','line_number':555,'multiline':False]['text':'
	 * Redraw the display when no characters are waiting.
	 * Also shows mode, ruler and positions cursor.
	 ','line_number':557,'multiline':True]['text':' allow scrolling here','line_number':575,'multiline':False]['text':' May request the keyboard protocol state now.','line_number':577,'multiline':False]['text':'
	 * Get a character for Insert mode.  Ignore K_IGNORE and K_NOP.
	 ','line_number':580,'multiline':True]['text':' remember the previous char for CTRL-D','line_number':584,'multiline':False]['text':' After using CTRL-G U the next cursor key will not break undo.','line_number':586,'multiline':False]['text':' Got here from normal mode when bracketed paste started.','line_number':592,'multiline':False]['text':' Insert mode ended, possibly from a callback, or a timer','line_number':605,'multiline':False]['text':' must have opened a terminal window.','line_number':606,'multiline':False]['text':' Don't want K_CURSORHOLD for the second key, e.g., after CTRL-V.','line_number':616,'multiline':False]['text':' Hebrew mode mapping','line_number':621,'multiline':False]['text':' If the window was made so small that nothing shows, make it at least','line_number':624,'multiline':False]['text':' one line and one column when typing.','line_number':625,'multiline':False]['text':'
	 * Special handling of keys while the popup menu is visible or wanted
	 * and the cursor is still in the completed word.  Only when there is
	 * a match, skip this when no matches were found.
	 ','line_number':629,'multiline':True]['text':' BS: Delete one character from "compl_leader".','line_number':639,'multiline':False]['text':' When no match was selected or it was edited.','line_number':645,'multiline':False]['text':' CTRL-L: Add one character from the current match to','line_number':648,'multiline':False]['text':' "compl_leader".  Except when at the original match and','line_number':649,'multiline':False]['text':' there is nothing to add, CTRL-L works like CTRL-P then.','line_number':650,'multiline':False]['text':' A non-white character that fits in with the current','line_number':659,'multiline':False]['text':' completion: Add to "compl_leader".','line_number':660,'multiline':False]['text':' Trigger InsertCharPre.','line_number':664,'multiline':False]['text':' Pressing CTRL-Y selects the current match.  When','line_number':680,'multiline':False]['text':' ins_compl_enter_selects() is set the Enter key does the','line_number':681,'multiline':False]['text':' same.','line_number':682,'multiline':False]['text':' Prepare for or stop CTRL-X mode.  This doesn't do completion, but','line_number':693,'multiline':False]['text':' it does fix up the text when finishing completion.','line_number':694,'multiline':False]['text':' CTRL-\ CTRL-N goes to Normal mode,','line_number':699,'multiline':False]['text':' CTRL-\ CTRL-G goes to mode selected with 'insertmode',','line_number':700,'multiline':False]['text':' CTRL-\ CTRL-O is like CTRL-O but without moving the cursor.','line_number':701,'multiline':False]['text':' may need to redraw when no more chars available now','line_number':704,'multiline':False]['text':' it's something else','line_number':713,'multiline':False]['text':' cursor keeps its column','line_number':724,'multiline':False]['text':' pretend CTRL-V is last typed character','line_number':741,'multiline':False]['text':' A key name preceded by a bang means this key is not to be','line_number':747,'multiline':False]['text':' inserted.  Skip ahead to the re-indenting below.','line_number':748,'multiline':False]['text':' A key name preceded by a star means that indenting has to be','line_number':749,'multiline':False]['text':' done before inserting the key.','line_number':750,'multiline':False]['text':'
	 * If 'keymodel' contains "startsel", may start selection.  If it
	 * does, a CTRL-O and c will be stuffed, we need to get these
	 * characters.
	 ','line_number':772,'multiline':True]['text':'
	 * The big switch to handle a character in insert mode.
	 ','line_number':780,'multiline':True]['text':' End input mode','line_number':785,'multiline':False]['text':' FALLTHROUGH','line_number':788,'multiline':False]['text':' End input mode','line_number':790,'multiline':False]['text':' Close the cmdline window.','line_number':793,'multiline':False]['text':' don't stop executing autocommands et al.','line_number':795,'multiline':False]['text':' buffer changed to a non-prompt buffer, get out of','line_number':805,'multiline':False]['text':' Insert mode','line_number':806,'multiline':False]['text':' when 'insertmode' set, and not halfway a mapping, don't leave','line_number':816,'multiline':False]['text':' Insert mode','line_number':817,'multiline':False]['text':' flush all buffers','line_number':822,'multiline':False]['text':'
	     * This is the ONLY return from edit()!
	     ','line_number':830,'multiline':True]['text':' Always update o_lnum, so that a "CTRL-O ." that adds a line','line_number':833,'multiline':False]['text':' still puts the cursor back after the inserted text.','line_number':834,'multiline':False]['text':' When CTRL-C was typed got_int will be set, with the result','line_number':840,'multiline':False]['text':' that the autocommands won't be executed. When mapped got_int','line_number':841,'multiline':False]['text':' is not set, but let's keep the behavior the same.','line_number':842,'multiline':False]['text':' suspend when 'insertmode' set','line_number':851,'multiline':False]['text':' insert CTRL-Z as normal char','line_number':853,'multiline':False]['text':' may need to update cursor shape','line_number':856,'multiline':False]['text':' execute one command','line_number':860,'multiline':False]['text':' don't move the cursor left when 'virtualedit' has "onemore".','line_number':869,'multiline':False]['text':' toggle insert/replace mode','line_number':878,'multiline':False]['text':' end of Select mode mapping - ignore','line_number':883,'multiline':False]['text':' Help key works like <ESC> <Help>','line_number':886,'multiline':False]['text':' NetBeans command','line_number':895,'multiline':False]['text':' don't map the next key hits','line_number':896,'multiline':False]['text':' Insert the previously inserted text.','line_number':903,'multiline':False]['text':' For ^@ the trailing ESC will end the insert, unless there is an','line_number':906,'multiline':False]['text':' error.','line_number':907,'multiline':False]['text':' quit insert mode','line_number':910,'multiline':False]['text':' insert the contents of a register','line_number':914,'multiline':False]['text':' commands starting with CTRL-G','line_number':920,'multiline':False]['text':' switch input mode and/or langmap','line_number':924,'multiline':False]['text':' switch between languages','line_number':929,'multiline':False]['text':' Make indent one shiftwidth smaller.','line_number':936,'multiline':False]['text':' FALLTHROUGH','line_number':941,'multiline':False]['text':' Make indent one shiftwidth greater.','line_number':943,'multiline':False]['text':' delete character under the cursor','line_number':956,'multiline':False]['text':' delete character before the cursor','line_number':962,'multiline':False]['text':' delete word before the cursor','line_number':969,'multiline':False]['text':' In a prompt window CTRL-W is used for window commands.','line_number':973,'multiline':False]['text':' Use Shift-CTRL-W to delete a word.','line_number':974,'multiline':False]['text':' delete all inserted text in current line','line_number':986,'multiline':False]['text':' CTRL-X CTRL-U completes with 'completefunc'.','line_number':988,'multiline':False]['text':' mouse keys','line_number':997,'multiline':False]['text':' Default action for scroll wheel up: scroll up','line_number':1018,'multiline':False]['text':' Default action for scroll wheel down: scroll down','line_number':1022,'multiline':False]['text':' Scroll wheel left','line_number':1026,'multiline':False]['text':' Scroll wheel right','line_number':1030,'multiline':False]['text':' invoked from normal mode, bail out','line_number':1037,'multiline':False]['text':' Got K_PE without K_PS, ignore.','line_number':1041,'multiline':False]['text':' Something mapped to nothing','line_number':1051,'multiline':False]['text':' <Cmd>command<CR>','line_number':1054,'multiline':False]['text':' <ScriptCmd>command<CR>','line_number':1055,'multiline':False]['text':' Started a terminal that gets the input, exit Insert mode.','line_number':1061,'multiline':False]['text':' The command caused undo to be synced.  Need to save the','line_number':1065,'multiline':False]['text':' line for undo before inserting the next char.','line_number':1066,'multiline':False]['text':' Didn't type something for a while.','line_number':1071,'multiline':False]['text':' If CTRL-G U was used apply it to the next typed key.','line_number':1074,'multiline':False]['text':' On MS-Windows ignore <M-F4>, we get it when closing the window','line_number':1080,'multiline':False]['text':' was cancelled.','line_number':1081,'multiline':False]['text':' <Home>','line_number':1098,'multiline':False]['text':' <End>','line_number':1105,'multiline':False]['text':' <Left>','line_number':1112,'multiline':False]['text':' <S-Left>','line_number':1119,'multiline':False]['text':' <Right>','line_number':1124,'multiline':False]['text':' <S-Right>','line_number':1131,'multiline':False]['text':' <Up>','line_number':1136,'multiline':False]['text':' <S-Up>','line_number':1145,'multiline':False]['text':' <Down>','line_number':1153,'multiline':False]['text':' <S-Down>','line_number':1162,'multiline':False]['text':' drag-n-drop event','line_number':1171,'multiline':False]['text':' When not mapped, use like a normal TAB','line_number':1176,'multiline':False]['text':' FALLTHROUGH','line_number':1178,'multiline':False]['text':' TAB or Complete patterns along path','line_number':1180,'multiline':False]['text':' insert TAB as a normal char','line_number':1187,'multiline':False]['text':' <Enter>','line_number':1191,'multiline':False]['text':' FALLTHROUGH','line_number':1193,'multiline':False]['text':' In a quickfix window a <CR> jumps to the error under the','line_number':1197,'multiline':False]['text':' cursor.','line_number':1198,'multiline':False]['text':' quickfix window','line_number':1201,'multiline':False]['text':' location list window','line_number':1203,'multiline':False]['text':' Execute the command in the cmdline window.','line_number':1210,'multiline':False]['text':' buffer changed to a non-prompt buffer, get out of','line_number':1219,'multiline':False]['text':' Insert mode','line_number':1220,'multiline':False]['text':' out of memory','line_number':1226,'multiline':False]['text':' digraph or keyword completion','line_number':1231,'multiline':False]['text':' Enter CTRL-X mode','line_number':1245,'multiline':False]['text':' Tag name completion after ^X','line_number':1249,'multiline':False]['text':' File name completion after ^X','line_number':1254,'multiline':False]['text':' Spelling completion after ^X','line_number':1259,'multiline':False]['text':' Whole line completion after ^X','line_number':1265,'multiline':False]['text':' CTRL-L with 'insertmode' set: Leave Insert mode','line_number':1268,'multiline':False]['text':' FALLTHROUGH','line_number':1277,'multiline':False]['text':' Do previous/next pattern completion','line_number':1279,'multiline':False]['text':' if 'complete' is empty then plain ^P is no longer special,','line_number':1281,'multiline':False]['text':' but it is under other ^X modes','line_number':1282,'multiline':False]['text':' don't redraw folds here','line_number':1291,'multiline':False]['text':' allow smartindenting','line_number':1299,'multiline':False]['text':' copy from previous line or scroll down','line_number':1302,'multiline':False]['text':' copy from next line	   or scroll up','line_number':1303,'multiline':False]['text':' special interrupt char','line_number':1309,'multiline':False]['text':'
	     * Insert a normal character.
	     ','line_number':1314,'multiline':True]['text':' Trigger InsertCharPre.','line_number':1320,'multiline':False]['text':' Insert the new value of v:char literally.','line_number':1328,'multiline':False]['text':' If the new value is already inserted or an empty string','line_number':1343,'multiline':False]['text':' then don't insert any character.','line_number':1344,'multiline':False]['text':' Try to perform smart-indenting.','line_number':1349,'multiline':False]['text':' Insert a normal character and check for abbreviations on a','line_number':1362,'multiline':False]['text':' special character.  Let CTRL-] expand abbreviations without','line_number':1363,'multiline':False]['text':' inserting it.','line_number':1364,'multiline':False]['text':' Add ABBR_OFF for characters above 0x100, this is','line_number':1366,'multiline':False]['text':' what check_abbr() expects.','line_number':1367,'multiline':False]['text':' When inserting a character the cursor line must never be in a','line_number':1381,'multiline':False]['text':' closed fold.','line_number':1382,'multiline':False]['text':' end of switch (c)','line_number':1386,'multiline':False]['text':' If typed something may trigger CursorHoldI again.','line_number':1388,'multiline':False]['text':' but not in CTRL-X mode, a script can't restore the state','line_number':1391,'multiline':False]['text':' If the cursor was moved we didn't just insert a space','line_number':1397,'multiline':False]['text':'
	     * Indent now if a key was typed that is in 'cinkeys'.
	     ','line_number':1404,'multiline':True]['text':' re-indent the current line','line_number':1410,'multiline':False]['text':' for (;;)','line_number':1415,'multiline':False]['text':' NOTREACHED','line_number':1416,'multiline':False]['text':'
 * Redraw for Insert mode.
 * This is postponed until getting the next character to make '$' in the 'cpo'
 * option work correctly.
 * Only redraw when there are no characters available.  This speeds up
 * inserting sequences of characters (e.g., for CTRL-R).
 ','line_number':1425,'multiline':True]['text':' not busy with something','line_number':1433,'multiline':False]['text':' Trigger CursorMoved if the cursor moved.  Not when the popup menu is','line_number':1444,'multiline':False]['text':' visible, the command might delete it.','line_number':1445,'multiline':False]['text':' Need to update the screen first, to make sure syntax','line_number':1458,'multiline':False]['text':' highlighting is correct after making a change (e.g., inserting','line_number':1459,'multiline':False]['text':' a "(".  The autocommand may also require a redraw, so it's done','line_number':1460,'multiline':False]['text':' again below, unfortunately.','line_number':1461,'multiline':False]['text':' Make sure curswant is correct, an autocommand may call','line_number':1467,'multiline':False]['text':' getcurpos().','line_number':1468,'multiline':False]['text':' Trigger TextChangedI if b_changedtick_i differs.','line_number':1487,'multiline':False]['text':' Save and restore curwin and curbuf, in case the autocmd changes','line_number':1495,'multiline':False]['text':' them.','line_number':1496,'multiline':False]['text':' see ins_apply_autocmds()','line_number':1501,'multiline':False]['text':' Trigger TextChangedP if b_changedtick_pum differs. When the popupmenu','line_number':1506,'multiline':False]['text':' closes TextChangedI will need to trigger for backwards compatibility,','line_number':1507,'multiline':False]['text':' thus use different b_last_changedtick* variables.','line_number':1508,'multiline':False]['text':' Save and restore curwin and curbuf, in case the autocmd changes','line_number':1516,'multiline':False]['text':' them.','line_number':1517,'multiline':False]['text':' see ins_apply_autocmds()','line_number':1522,'multiline':False]['text':' Trigger SafeState if nothing is pending.','line_number':1530,'multiline':False]['text':' clear cmdline and show mode','line_number':1552,'multiline':False]['text':' may remove error message now','line_number':1555,'multiline':False]['text':'
 * Handle a CTRL-V or CTRL-Q typed in Insert mode.
 ','line_number':1558,'multiline':True]['text':' may need to redraw when no more chars available now','line_number':1567,'multiline':False]['text':' CTRL-V','line_number':1575,'multiline':False]['text':' Do not change any modifyOtherKeys ESC sequence to a normal key for','line_number':1579,'multiline':False]['text':' CTRL-SHIFT-V.','line_number':1580,'multiline':False]['text':' when the line fits in 'columns' the '^' is at the start of the next','line_number':1583,'multiline':False]['text':' line and will not removed by the redraw','line_number':1584,'multiline':False]['text':'
 * After getting an ESC or CSI for a literal key: If the typeahead buffer
 * contains a modifyOtherKeys sequence then decode it and return the result.
 * Otherwise return "c".
 * Note that this doesn't wait for characters, they must be in the typeahead
 * buffer already.
 ','line_number':1595,'multiline':True]['text':' Recognize:','line_number':1611,'multiline':False]['text':' form 0: {lead}{key};{modifier}u','line_number':1612,'multiline':False]['text':' form 1: {lead}27;{modifier};{key}~','line_number':1613,'multiline':False]['text':' Match, consume the code.','line_number':1636,'multiline':False]['text':'
 * Put a character directly onto the screen.  It's not stored in a buffer.
 * Used while handling CTRL-K, CTRL-V, etc. in Insert mode.
 ','line_number':1652,'multiline':True]['text':' pc_bytes was not set','line_number':1657,'multiline':False]['text':' right half of double-wide char','line_number':1658,'multiline':False]['text':' left half of double-wide char','line_number':1659,'multiline':False]['text':' pc_bytes was filled','line_number':1660,'multiline':False]['text':' saved bytes','line_number':1661,'multiline':False]['text':' just in case w_topline isn't valid','line_number':1674,'multiline':False]['text':' save the character to be able to put it back','line_number':1707,'multiline':False]['text':'
 * Set the insert start position for when using a prompt buffer.
 ','line_number':1717,'multiline':True]['text':'
 * Undo the previous edit_putchar().
 ','line_number':1732,'multiline':True]['text':'
 * Called when "$" is in 'cpoptions': display a '$' at the end of the changed
 * text.  Only works when cursor is in the line that changes.
 ','line_number':1749,'multiline':True]['text':' If on the last byte of a multi-byte move to the first byte.','line_number':1769,'multiline':False]['text':' recompute w_wrow and w_wcol','line_number':1773,'multiline':False]['text':'
 * Call this function before moving the cursor from the normal insert position
 * in insert mode.
 ','line_number':1782,'multiline':True]['text':'
 * Truncate the space at the end of a line.  This is to be used only in an
 * insert mode.  It handles fixing the replace stack for MODE_REPLACE and
 * MODE_VREPLACE modes.
 ','line_number':1796,'multiline':True]['text':' find start of trailing white space','line_number':1806,'multiline':False]['text':' remove a NUL from the replace stack','line_number':1810,'multiline':False]['text':'
 * Backspace the cursor until the given column.  Handles MODE_REPLACE and
 * MODE_VREPLACE modes correctly.  May also be used when not in insert mode at
 * all.  Will attempt not to go before "col" even when there is a composing
 * character.
 ','line_number':1815,'multiline':True]['text':'
 * Like del_char(), but make sure not to go before column "limit_col".
 * Only matters when there are composing characters.
 * Return TRUE when something was deleted.
 ','line_number':1834,'multiline':True]['text':' Make sure the cursor is at the start of a character, but','line_number':1846,'multiline':False]['text':' skip forward again when going too far back because of a','line_number':1847,'multiline':False]['text':' composing character.','line_number':1848,'multiline':False]['text':' end of line','line_number':1854,'multiline':False]['text':'
 * Next character is interpreted literally.
 * A one, two or three digit decimal number is interpreted as its byte value.
 * If one or two digits are entered, the next character is given to vungetc().
 * For Unicode a character > 255 may be returned.
 * If "noReduceKeys" is TRUE do not change any modifyOtherKeys ESC sequence
 * into a normal key, return ESC.
 ','line_number':1867,'multiline':True]['text':'
     * In GUI there is no point inserting the internal code for a special key.
     * It is more useful to insert the string "<KEY>" instead.	This would
     * probably be useful in a text window too, but it would not be
     * vi-compatible (maybe there should be an option for it?) -- webb
     ','line_number':1889,'multiline':True]['text':' disallow scrolling here','line_number':1903,'multiline':False]['text':' don't map the next key hits','line_number':1905,'multiline':False]['text':' A character with non-Shift modifiers should not be a valid','line_number':1915,'multiline':False]['text':' character for i_CTRL-V_digit.','line_number':1916,'multiline':False]['text':' limit range to 0-255','line_number':1952,'multiline':False]['text':' hex: up to two chars','line_number':1955,'multiline':False]['text':' Unicode: up to four or eight chars','line_number':1960,'multiline':False]['text':' decimal or octal: up to three chars','line_number':1965,'multiline':False]['text':' no number entered','line_number':1968,'multiline':False]['text':' NUL is stored as NL','line_number':1970,'multiline':False]['text':' NUL is stored as NL','line_number':1982,'multiline':False]['text':' don't accept an illegal DBCS char, the NUL in the','line_number':1985,'multiline':False]['text':' second byte will cause trouble!','line_number':1986,'multiline':False]['text':' A character typed with i_CTRL-V_digit cannot have modifiers.','line_number':2000,'multiline':False]['text':' CTRL-C typed after CTRL-V is not an interrupt','line_number':2003,'multiline':False]['text':'
 * Insert character, taking care of special keys and mod_mask
 ','line_number':2007,'multiline':True]['text':' c was typed after CTRL-V','line_number':2014,'multiline':False]['text':'
     * Special function key, translate into "<Key>". Up to the last '>' is
     * inserted with ins_str(), so as not to replace characters in replace
     * mode.
     * Only use mod_mask for special keys, to avoid things like <S-Space>,
     * unless 'allow_modmask' is TRUE.
     ','line_number':2019,'multiline':True]['text':' Command-key never produces a normal key','line_number':2027,'multiline':False]['text':'
 * Special characters in this context are those that need processing other
 * than the simple insertion that can be performed here. This includes ESC
 * which terminates the insert, and CR/NL which need special processing to
 * open up a new line. This routine tries to optimize insertions performed by
 * the "redo", "undo" or "put" commands, so it needs to know when it should
 * stop and defer processing to the "normal" mechanism.
 * '0' and '^' are special, because they can be followed by CTRL-D.
 ','line_number':2050,'multiline':True]['text':'
 * "flags": INSCHAR_FORMAT - force formatting
 *	    INSCHAR_CTRLV  - char typed just after CTRL-V
 *	    INSCHAR_NO_FEX - don't use 'formatexpr'
 *
 *   NOTE: passes the flags value straight through to internal_format() which,
 *	   beside INSCHAR_FORMAT (above), is also looking for these:
 *	    INSCHAR_DO_COM   - format comments
 *	    INSCHAR_COM_LIST - format comments with num list or 2nd line indent
 ','line_number':2061,'multiline':True]['text':' character to insert or NUL','line_number':2073,'multiline':False]['text':' INSCHAR_FORMAT, etc.','line_number':2074,'multiline':False]['text':' indent for second line if >= 0','line_number':2075,'multiline':False]['text':'
     * Try to break the line in two or more pieces when:
     * - Always do this if we have been called to do formatting only.
     * - Always do this when 'formatoptions' has the 'a' flag and the line
     *   ends in white space.
     * - Otherwise:
     *	 - Don't do this if inserting a blank
     *	 - Don't do this if an existing character is being replaced, unless
     *	   we're in MODE_VREPLACE state.
     *	 - Do this if the cursor is not on the line where insert started
     *	 or - 'formatoptions' doesn't have 'l' or the line was not too long
     *	       before the insert.
     *	    - 'formatoptions' doesn't have 'b' or a blank was inserted at or
     *	      before 'textwidth'
     ','line_number':2085,'multiline':True]['text':' Format with 'formatexpr' when it's set.  Use internal formatting','line_number':2113,'multiline':False]['text':' when 'formatexpr' isn't set or it returns non-zero.','line_number':2114,'multiline':False]['text':' It may be required to save for undo again, e.g. when setline()','line_number':2124,'multiline':False]['text':' was called.','line_number':2125,'multiline':False]['text':' only formatting was wanted','line_number':2133,'multiline':False]['text':' Check whether this character should end a comment.','line_number':2136,'multiline':False]['text':' end-comment string','line_number':2140,'multiline':False]['text':'
	 * Need to remove existing (middle) comment leader and insert end
	 * comment leader.  First, check what comment leader we can find.
	 ','line_number':2144,'multiline':True]['text':' Just checking','line_number':2149,'multiline':False]['text':' Skip middle-comment string','line_number':2151,'multiline':False]['text':' find end of middle flags','line_number':2152,'multiline':False]['text':' Don't count trailing white space for middle_len','line_number':2155,'multiline':False]['text':' Find the end-comment string','line_number':2159,'multiline':False]['text':' find end of end flags','line_number':2160,'multiline':False]['text':' Skip white space before the cursor','line_number':2164,'multiline':False]['text':' Skip to before the middle leader','line_number':2170,'multiline':False]['text':' Check some expected things before we go on','line_number':2173,'multiline':False]['text':' Backspace over all the stuff we want to replace','line_number':2176,'multiline':False]['text':' Insert the end-comment string, except for the last','line_number':2179,'multiline':False]['text':' character, which will get inserted as normal later.','line_number':2180,'multiline':False]['text':'
     * If there's any pending input, grab up to INPUT_BUFLEN at once.
     * This speeds up normal text input considerably.
     * Don't do this when 'cindent' or 'indentexpr' is set, because we might
     * need to re-indent at a ':', or any other character (but not what
     * 'paste' is set)..
     * Don't do this when there an InsertCharPre autocommand is defined,
     * because we need to fire the event for every character.
     * Do the check for InsertCharPre before the call to vpeekc() because the
     * InsertCharPre autocommand could change the input buffer.
     ','line_number':2192,'multiline':True]['text':' allow scrolling here','line_number':2204,'multiline':False]['text':'
	 * Stop the string when:
	 * - no more chars available
	 * - finding a special character (command key)
	 * - buffer is full
	 * - running into the 'textwidth' boundary
	 * - need to check for abbreviation: A non-word char after a word-char
	 ','line_number':2227,'multiline':True]['text':' Hebrew mode mapping','line_number':2246,'multiline':False]['text':' clear digraphs','line_number':2254,'multiline':False]['text':' may be the start of a digraph','line_number':2255,'multiline':False]['text':'
 * Put a character in the redo buffer, for when just after a CTRL-V.
 ','line_number':2293,'multiline':True]['text':' Only digits need special treatment.  Translate them into a string of','line_number':2301,'multiline':False]['text':' three digits.','line_number':2302,'multiline':False]['text':'
 * start_arrow() is called when an arrow key is used in insert mode.
 * For undo/redo it resembles hitting the <ESC> key.
 ','line_number':2312,'multiline':True]['text':' can be NULL','line_number':2318,'multiline':False]['text':'
 * Like start_arrow() but with end_change argument.
 * Will prepare for redo of CTRL-G U if "end_change" is FALSE.
 ','line_number':2323,'multiline':True]['text':' can be NULL','line_number':2329,'multiline':False]['text':' end undoable change','line_number':2330,'multiline':False]['text':' can be NULL','line_number':2342,'multiline':False]['text':' end undoable change','line_number':2343,'multiline':False]['text':' something has been inserted','line_number':2345,'multiline':False]['text':' this means we stopped the current insert','line_number':2349,'multiline':False]['text':'
 * If we skipped highlighting word at cursor, do it now.
 * It may be skipped again, thus reset spell_redraw_lnum first.
 ','line_number':2357,'multiline':True]['text':'
 * stop_arrow() is called before a change is made in insert mode.
 * If an arrow key has been used, start a new insertion.
 * Returns FAIL if undo is impossible, shouldn't insert then.
 ','line_number':2375,'multiline':True]['text':' new insertion starts here','line_number':2385,'multiline':False]['text':' Don't update the original insert position when moved to the','line_number':2387,'multiline':False]['text':' right, except when nothing was inserted yet.','line_number':2388,'multiline':False]['text':' pretend we start an insertion','line_number':2405,'multiline':False]['text':' Always open fold at the cursor line when inserting something.','line_number':2415,'multiline':False]['text':'
 * Do a few things to stop inserting.
 * "end_insert_pos" is where insert ended.  It is NULL when we already jumped
 * to another window/buffer.
 ','line_number':2422,'multiline':True]['text':' called by ins_esc()','line_number':2430,'multiline':False]['text':' <c-\><c-o>, don't move cursor','line_number':2431,'multiline':False]['text':' abandon replace stack','line_number':2437,'multiline':False]['text':'
     * Save the inserted text for later redo with ^@ and CTRL-A.
     * Don't do it when "restart_edit" was set and nothing was inserted,
     * otherwise CTRL-O w and then <Left> will clear "last_insert".
     ','line_number':2439,'multiline':True]['text':' Auto-format now.  It may seem strange to do this when stopping an','line_number':2457,'multiline':False]['text':' insertion (or moving the cursor), but it's required when appending','line_number':2458,'multiline':False]['text':' a line and having it end in a space.  But only do it when something','line_number':2459,'multiline':False]['text':' was actually inserted, otherwise undo won't work.','line_number':2460,'multiline':False]['text':' When the cursor is at the end of the line after a space the','line_number':2465,'multiline':False]['text':' formatting will move it to the following word.  Avoid that by','line_number':2466,'multiline':False]['text':' moving the cursor onto the space.','line_number':2467,'multiline':False]['text':' If the cursor is still at the same character, also keep','line_number':2483,'multiline':False]['text':' the "coladd".','line_number':2484,'multiline':False]['text':' If a space was inserted for auto-formatting, remove it now.','line_number':2492,'multiline':False]['text':' If we just did an auto-indent, remove the white space from the end','line_number':2495,'multiline':False]['text':' of the line, and put the cursor back.','line_number':2496,'multiline':False]['text':' Do this when ESC was used or moving the cursor up/down.','line_number':2497,'multiline':False]['text':' Check for the old position still being valid, just in case the text','line_number':2498,'multiline':False]['text':' got changed unexpectedly.','line_number':2499,'multiline':False]['text':' make sure it is not past the line','line_number':2507,'multiline':False]['text':' should not happen','line_number':2516,'multiline':False]['text':' reset tpos, could have been invalidated in the loop above','line_number':2522,'multiline':False]['text':' put cursor back on the NUL','line_number':2526,'multiline':False]['text':' <C-S-Right> may have started Visual mode, adjust the position for','line_number':2529,'multiline':False]['text':' deleted characters.','line_number':2530,'multiline':False]['text':' Set '[ and '] to the inserted text.  When end_insert_pos is NULL we are','line_number':2540,'multiline':False]['text':' now in a different buffer.','line_number':2541,'multiline':False]['text':'
 * Set the last inserted text to a single character.
 * Used for the replace command.
 ','line_number':2550,'multiline':True]['text':' Use the CTRL-V only when entering a special char','line_number':2565,'multiline':False]['text':'
 * Add character "c" to buffer "s".  Escape the special meaning of K_SPECIAL
 * and CSI.  Handle multi-byte characters.
 * Returns a pointer to after the added bytes.
 ','line_number':2582,'multiline':True]['text':' Need to escape K_SPECIAL and CSI like in the typeahead buffer.','line_number':2598,'multiline':False]['text':'
 * move cursor to start of line
 * if flags & BL_WHITE	move to first non-white
 * if flags & BL_SOL	move to first non-white if startofline is set,
 *			    otherwise keep "curswant" column
 * if flags & BL_FIX	don't leave the cursor on a NUL.
 ','line_number':2619,'multiline':True]['text':'
 * oneright oneleft cursor_down cursor_up
 *
 * Move one char {right,left,down,up}.
 * Doesn't move onto the NUL past the end of the line, unless it is allowed.
 * Return OK when successful, FAIL when we hit a line of file boundary.
 ','line_number':2649,'multiline':True]['text':' Adjust for multi-wide char (excluding TAB)','line_number':2667,'multiline':False]['text':' Return OK if the cursor moved, FAIL otherwise (at window edge).','line_number':2673,'multiline':False]['text':' already at the very end','line_number':2680,'multiline':False]['text':' move "l" bytes right, but don't end up on the NUL, unless 'virtualedit'','line_number':2687,'multiline':False]['text':' contains "onemore".','line_number':2688,'multiline':False]['text':' We might get stuck on 'showbreak', skip over it.','line_number':2712,'multiline':False]['text':' getviscol() is slow, skip it when 'showbreak' is empty,','line_number':2717,'multiline':False]['text':' 'breakindent' is not set and there are no multi-byte','line_number':2718,'multiline':False]['text':' characters','line_number':2719,'multiline':False]['text':' Adjust for multi-wide char (not a TAB)','line_number':2733,'multiline':False]['text':' if the character on the left of the current cursor is a multi-byte','line_number':2751,'multiline':False]['text':' character, move to its first byte','line_number':2752,'multiline':False]['text':'
 * Move the cursor up "n" lines in window "wp".
 * Takes care of closed folds.
 ','line_number':2759,'multiline':True]['text':'
	 * Count each sequence of folded lines as one logical line.
	 ','line_number':2774,'multiline':True]['text':' go to the start of the current fold','line_number':2777,'multiline':False]['text':' move up one line','line_number':2782,'multiline':False]['text':' If we entered a fold, move to the beginning, unless in','line_number':2786,'multiline':False]['text':' Insert mode or when 'foldopen' contains "all": it will open','line_number':2787,'multiline':False]['text':' in a moment.','line_number':2788,'multiline':False]['text':' When TRUE: update topline','line_number':2805,'multiline':False]['text':' This fails if the cursor is already in the first line or the count is','line_number':2807,'multiline':False]['text':' larger than the line number and '-' is in 'cpoptions'','line_number':2808,'multiline':False]['text':' try to advance to the column we want to be at','line_number':2815,'multiline':False]['text':' make sure curwin->w_topline is valid','line_number':2819,'multiline':False]['text':'
 * Move the cursor down "n" lines in window "wp".
 * Takes care of closed folds.
 ','line_number':2824,'multiline':True]['text':' count each sequence of folded lines as one logical line','line_number':2842,'multiline':False]['text':' Move to last line of fold, will fail if it's the end-of-file.','line_number':2845,'multiline':False]['text':'
 * Cursor down a number of logical lines.
 ','line_number':2863,'multiline':True]['text':' When TRUE: update topline','line_number':2869,'multiline':False]['text':' This fails if the cursor is already in the last line or would move','line_number':2873,'multiline':False]['text':' beyond the last line and '-' is in 'cpoptions'','line_number':2874,'multiline':False]['text':' try to advance to the column we want to be at','line_number':2882,'multiline':False]['text':' make sure curwin->w_topline is valid','line_number':2886,'multiline':False]['text':'
 * Stuff the last inserted text in the read buffer.
 * Last_insert actually is a copy of the redo buffer, so we
 * first have to remove the command.
 ','line_number':2891,'multiline':True]['text':' Command character to be inserted','line_number':2898,'multiline':False]['text':' Repeat this many times','line_number':2899,'multiline':False]['text':' Don't add an ESC at the end','line_number':2900,'multiline':False]['text':' may want to stuff the command character, to start Insert mode','line_number':2914,'multiline':False]['text':' remove the ESC','line_number':2918,'multiline':False]['text':' when the last char is either "0" or "^" it will be quoted if no ESC','line_number':2920,'multiline':False]['text':' comes after it OR if it will inserted more than once and "ptr"','line_number':2921,'multiline':False]['text':' starts with ^D.	-- Acevedo','line_number':2922,'multiline':False]['text':' a trailing "0" is inserted as "<C-V>048", "^" as "<C-V>^"','line_number':2934,'multiline':False]['text':' put the ESC back','line_number':2945,'multiline':False]['text':' may want to stuff a trailing ESC, to get out of Insert mode','line_number':2947,'multiline':False]['text':'
 * Get last inserted string, and remove trailing <Esc>.
 * Returns pointer to allocated memory (must be freed) or NULL.
 ','line_number':2962,'multiline':True]['text':' remove trailing ESC','line_number':2979,'multiline':False]['text':'
 * Check the word in front of the cursor for an abbreviation.
 * Called when the non-id character "c" has been entered.
 * When an abbreviation is recognized it is removed from the text and
 * the replacement string is inserted in typebuf.tb_buf[], followed by "c".
 ','line_number':2984,'multiline':True]['text':' Don't check for abbreviation in paste mode, when disabled and just','line_number':2993,'multiline':False]['text':' after moving around with cursor keys.','line_number':2994,'multiline':False]['text':'
 * replace-stack functions
 *
 * When replacing characters, the replaced characters are remembered for each
 * new character.  This is used to re-insert the old text when backspacing.
 *
 * There is a NUL headed list of characters for each character that is
 * currently in the file after the insertion point.  When BS is used, one NUL
 * headed list is put back for the deleted character.
 *
 * For a newline, there are two NUL headed lists.  One contains the characters
 * that the NL replaced.  The extra one stores the characters after the cursor
 * that were deleted (always white space).
 *
 * Replace_offset is normally 0, in which case replace_push will add a new
 * character at the end of the stack.  If replace_offset is not 0, that many
 * characters will be left on the stack above the newly inserted character.
 ','line_number':3002,'multiline':True]['text':' next entry in replace stack','line_number':3022,'multiline':False]['text':' max. number of entries','line_number':3023,'multiline':False]['text':' character that is replaced (NUL is none)','line_number':3027,'multiline':False]['text':' nothing to do','line_number':3031,'multiline':False]['text':' out of memory','line_number':3037,'multiline':False]['text':'
 * Push a character onto the replace stack.  Handles a multi-byte character in
 * reverse byte order, so that the first byte is popped off first.
 * Return the number of bytes done (includes composing characters).
 ','line_number':3057,'multiline':True]['text':'
 * Pop one item from the replace stack.
 * return -1 if stack empty
 * return replaced character or NUL otherwise
 ','line_number':3073,'multiline':True]['text':'
 * Join the top two items on the replace stack.  This removes to "off"'th NUL
 * encountered.
 ','line_number':3086,'multiline':True]['text':' offset for which NUL to remove','line_number':3092,'multiline':False]['text':'
 * Pop bytes from the replace stack until a NUL is found, and insert them
 * before the cursor.  Can only be used in MODE_REPLACE or MODE_VREPLACE state.
 ','line_number':3106,'multiline':True]['text':' don't want MODE_REPLACE here','line_number':3116,'multiline':False]['text':'
 * Insert bytes popped from the replace stack. "cc" is the first byte.  If it
 * indicates a multi-byte char, pop the other bytes too.
 ','line_number':3125,'multiline':True]['text':' Handle composing chars.','line_number':3148,'multiline':False]['text':' stack empty','line_number':3152,'multiline':False]['text':' Not a multi-byte char, put it back.','line_number':3156,'multiline':False]['text':' Not a composing char, put it back.','line_number':3168,'multiline':False]['text':'
 * make the replace stack empty
 * (called when exiting replace mode)
 ','line_number':3177,'multiline':True]['text':'
 * Handle doing a BS for one character.
 * cc < 0: replace stack empty, just move cursor
 * cc == 0: character was inserted, delete it
 * cc > 0: character was replaced, put cc (first byte of original char) back
 * and check for more characters to be put back
 * When "limit_col" is >= 0, don't delete before this column.  Matters when
 * using composing characters, use del_char_after_col() instead of del_char().
 ','line_number':3189,'multiline':True]['text':' init to shut up GCC','line_number':3214,'multiline':False]['text':' Do not adjust text properties for individual delete and insert','line_number':3218,'multiline':False]['text':' operations, do it afterwards on the resulting text.','line_number':3219,'multiline':False]['text':' Get the number of screen cells used by the character we are','line_number':3226,'multiline':False]['text':' going to delete.','line_number':3227,'multiline':False]['text':' Get the number of screen cells used by the inserted characters','line_number':3248,'multiline':False]['text':' Delete spaces that were inserted after the cursor to keep the','line_number':3259,'multiline':False]['text':' text aligned.','line_number':3260,'multiline':False]['text':' mark the buffer as changed and prepare for displaying','line_number':3270,'multiline':False]['text':'
 * Map Hebrew keyboard when in hkmap mode.
 ','line_number':3289,'multiline':True]['text':' phonetic mapping, by Ilya Dogolazky','line_number':3295,'multiline':False]['text':'a','line_number':3301,'multiline':True]['text':'b','line_number':3301,'multiline':True]['text':'c','line_number':3301,'multiline':True]['text':'d','line_number':3302,'multiline':True]['text':'e','line_number':3302,'multiline':True]['text':'f','line_number':3302,'multiline':True]['text':'g','line_number':3303,'multiline':True]['text':'h','line_number':3303,'multiline':True]['text':'i','line_number':3303,'multiline':True]['text':'j','line_number':3304,'multiline':True]['text':'k','line_number':3304,'multiline':True]['text':'l','line_number':3304,'multiline':True]['text':'m','line_number':3305,'multiline':True]['text':'n','line_number':3305,'multiline':True]['text':'o','line_number':3305,'multiline':True]['text':'p','line_number':3306,'multiline':True]['text':'q','line_number':3306,'multiline':True]['text':'r','line_number':3306,'multiline':True]['text':'s','line_number':3307,'multiline':True]['text':'t','line_number':3307,'multiline':True]['text':'u','line_number':3307,'multiline':True]['text':'v','line_number':3308,'multiline':True]['text':'w','line_number':3308,'multiline':True]['text':'x','line_number':3308,'multiline':True]['text':'y','line_number':3309,'multiline':True]['text':'z','line_number':3309,'multiline':True]['text':' '-1'='sofit'','line_number':3313,'multiline':False]['text':' {geresh}={'}','line_number':3317,'multiline':False]['text':' \"o --> ' ' for a german keyboard','line_number':3319,'multiline':False]['text':' \"a --> ' '      -- / --','line_number':3321,'multiline':False]['text':' \"u --> ' '      -- / --','line_number':3323,'multiline':False]['text':' NOTE: islower() does not do the right thing for us on Linux so we','line_number':3324,'multiline':False]['text':' do this the same was as 5.7 and previous, so it works correctly on','line_number':3325,'multiline':False]['text':' all systems.  Specifically, the e.g. Delete and Arrow keys are','line_number':3326,'multiline':False]['text':' munged and won't work if e.g. searching for Hebrew text.','line_number':3327,'multiline':False]['text':' Hebrew letters - set offset from 'a'','line_number':3343,'multiline':False]['text':'
     * If we are going to wait for a character, show a '"'.
     ','line_number':3370,'multiline':True]['text':' may need to redraw when no more chars available now','line_number':3376,'multiline':False]['text':' disallow scrolling here','line_number':3384,'multiline':False]['text':'
     * Don't map the register name. This also prevents the mode message to be
     * deleted when ESC is hit.
     ','line_number':3387,'multiline':True]['text':' Get a third key for literal register insertion','line_number':3397,'multiline':False]['text':' Don't call u_sync() while typing the expression or giving an error','line_number':3407,'multiline':False]['text':' message for it. Only call it explicitly.','line_number':3408,'multiline':False]['text':' Sync undo when evaluating the expression calls setline() or','line_number':3416,'multiline':False]['text':' append(), so that it can be undone separately.','line_number':3417,'multiline':False]['text':' Cursor may be moved back a column.','line_number':3422,'multiline':False]['text':' Restore the Input Method.','line_number':3426,'multiline':False]['text':' remove the '"'','line_number':3434,'multiline':False]['text':' Append the command to the redo buffer.','line_number':3441,'multiline':False]['text':' remove the '"'','line_number':3452,'multiline':False]['text':' When the '=' register was used and a function was invoked that','line_number':3455,'multiline':False]['text':' did ":stopinsert" then stuff_empty() returns FALSE but we won't','line_number':3456,'multiline':False]['text':' insert anything, need to remove the '"'','line_number':3457,'multiline':False]['text':' If the inserted register is empty, we need to remove the '"'','line_number':3469,'multiline':False]['text':' Disallow starting Visual mode here, would get a weird mode.','line_number':3473,'multiline':False]['text':'
 * CTRL-G commands in Insert mode.
 ','line_number':3478,'multiline':True]['text':' Right after CTRL-X the cursor will be after the ruler.','line_number':3486,'multiline':False]['text':'
     * Don't map the second key. This also prevents the mode message to be
     * deleted when ESC is hit.
     ','line_number':3489,'multiline':True]['text':' CTRL-G k and CTRL-G <Up>: cursor up to Insstart.col','line_number':3500,'multiline':False]['text':' CTRL-G j and CTRL-G <Down>: cursor down to Insstart.col','line_number':3506,'multiline':False]['text':' CTRL-G u: start new undoable edit','line_number':3512,'multiline':False]['text':' Need to reset Insstart, esp. because a BS that joins','line_number':3516,'multiline':False]['text':' a line to the previous one must save for undo.','line_number':3517,'multiline':False]['text':' CTRL-G U: do not break undo with the next char','line_number':3522,'multiline':False]['text':' Allow one left/right cursor movement with the next char,','line_number':3524,'multiline':False]['text':' without breaking undo.','line_number':3525,'multiline':False]['text':' Esc after CTRL-G cancels it.','line_number':3530,'multiline':False]['text':' Unknown CTRL-G command, reserved for future expansion.','line_number':3533,'multiline':False]['text':'
 * CTRL-^ in Insert mode.
 ','line_number':3538,'multiline':True]['text':' ":lmap" mappings exists, Toggle use of ":lmap" mappings.','line_number':3546,'multiline':False]['text':' There are no ":lmap" mappings, toggle IM','line_number':3564,'multiline':False]['text':' may show different cursor shape or color','line_number':3581,'multiline':False]['text':' Show/unshow value of 'keymap' in status lines.','line_number':3586,'multiline':False]['text':'
 * Handle ESC in insert mode.
 * Returns TRUE when leaving insert mode, FALSE when going to repeat the
 * insert.
 ','line_number':3591,'multiline':True]['text':' don't move cursor','line_number':3600,'multiline':False]['text':' Remember if the cursor line was concealed before changing State.','line_number':3605,'multiline':False]['text':'
	 * Don't append the ESC for "r<CR>" and "grx".
	 * When 'insertmode' is set only CTRL-L stops Insert mode.  Needed for
	 * when "count" is non-zero.
	 ','line_number':3623,'multiline':True]['text':'
	 * Repeating insert may take a long time.  Check for
	 * interrupt now and then.
	 ','line_number':3631,'multiline':True]['text':' repeat what was typed','line_number':3642,'multiline':False]['text':' Vi repeats the insert without replacing characters.','line_number':3644,'multiline':False]['text':' no ESC in redo buffer','line_number':3650,'multiline':False]['text':' repeat the insert','line_number':3653,'multiline':False]['text':' When an autoindent was removed, curswant stays after the','line_number':3662,'multiline':False]['text':' indent','line_number':3663,'multiline':False]['text':' Remember the last Insert position in the '^ mark.','line_number':3667,'multiline':False]['text':'
     * The cursor should end up on the last inserted character.
     * Don't do it for CTRL-O, unless past the end of the line.
     ','line_number':3671,'multiline':True]['text':' Correct cursor for multi-byte character.','line_number':3695,'multiline':False]['text':' Disable IM to allow typing English directly for Normal mode commands.','line_number':3702,'multiline':False]['text':' When ":lmap" is enabled don't change 'iminsert' (IM can be enabled as','line_number':3703,'multiline':False]['text':' well).','line_number':3704,'multiline':False]['text':' need to position cursor again when on a TAB and when on a char with','line_number':3712,'multiline':False]['text':' virtual text.','line_number':3713,'multiline':False]['text':' may show different cursor shape','line_number':3723,'multiline':False]['text':' Re-enable bracketed paste mode.','line_number':3729,'multiline':False]['text':' Re-enable modifyOtherKeys.','line_number':3732,'multiline':False]['text':' Check if the cursor line needs redrawing after changing State.  If','line_number':3736,'multiline':False]['text':' 'concealcursor' is "i" it needs to be redrawn without concealing.','line_number':3737,'multiline':False]['text':' When recording or for CTRL-O, need to display the new mode.','line_number':3741,'multiline':False]['text':' Otherwise remove the mode message.','line_number':3742,'multiline':False]['text':' exit Insert mode','line_number':3748,'multiline':False]['text':'
 * Toggle language: hkmap and revins_on.
 * Move to end of reverse inserted text.
 ','line_number':3752,'multiline':True]['text':' be consistent!','line_number':3775,'multiline':False]['text':'
 * If 'keymodel' contains "startsel", may start selection.
 * Returns TRUE when a CTRL-O and other keys stuffed.
 ','line_number':3780,'multiline':True]['text':' FALLTHROUGH','line_number':3807,'multiline':False]['text':' Start selection right away, the cursor can move with CTRL-O when','line_number':3814,'multiline':False]['text':' beyond the end of the line.','line_number':3815,'multiline':False]['text':' Execute the key in (insert) Select mode.','line_number':3818,'multiline':False]['text':'
 * <Insert> key in Insert mode: toggle insert/replace mode.
 ','line_number':3836,'multiline':True]['text':' may show different cursor shape','line_number':3856,'multiline':False]['text':'
 * Pressed CTRL-O in Insert mode.
 ','line_number':3860,'multiline':True]['text':' cursor always keeps its column','line_number':3874,'multiline':False]['text':'
 * If the cursor is on an indent, ^T/^D insert/delete one
 * shiftwidth.	Otherwise ^T/^D behave like a "<<" or ">>".
 * Always round the indent to 'shiftwidth', this is compatible
 * with vi.  But vi only supports ^T and ^D after an
 * autoindent, we support it everywhere.
 ','line_number':3879,'multiline':True]['text':'
     * 0^D and ^^D: remove all indent.
     ','line_number':3893,'multiline':True]['text':' delete the '^' or '0'','line_number':3900,'multiline':False]['text':' In Replace mode, restore the characters that '^' or '0' replaced.','line_number':3901,'multiline':False]['text':' remember curr. indent','line_number':3905,'multiline':False]['text':' no cindenting after ^D or ^T','line_number':3916,'multiline':False]['text':' delete newline','line_number':3926,'multiline':False]['text':' only if "eol" included','line_number':3929,'multiline':False]['text':' Adjust orig_line_count in case more lines have been deleted than','line_number':3935,'multiline':False]['text':' have been added. That makes sure, that open_line() later','line_number':3936,'multiline':False]['text':' can access all buffer lines correctly','line_number':3937,'multiline':False]['text':' delete char under cursor','line_number':3943,'multiline':False]['text':'
 * Delete one character for ins_bs().
 ','line_number':3952,'multiline':True]['text':' Don't delete characters before the insert point when in','line_number':3962,'multiline':False]['text':' Replace mode','line_number':3963,'multiline':False]['text':'
 * Handle Backspace, delete-word and delete-line in Insert mode.
 * Return TRUE when backspace was actually used.
 ','line_number':3972,'multiline':True]['text':' init for GCC','line_number':3984,'multiline':False]['text':' composing characters','line_number':3990,'multiline':False]['text':'
     * can't delete anything in an empty file
     * can't backup past first character in buffer
     * can't backup past starting point unless 'backspace' > 1
     * can backup to a previous line if 'backspace' == 0
     ','line_number':3993,'multiline':True]['text':' After BS, don't auto-end comment','line_number':4025,'multiline':False]['text':' put cursor after last inserted char','line_number':4027,'multiline':False]['text':' Virtualedit:','line_number':4031,'multiline':False]['text':'	BACKSPACE_CHAR eats a virtual space','line_number':4032,'multiline':False]['text':'	BACKSPACE_WORD eats all coladd','line_number':4033,'multiline':False]['text':'	BACKSPACE_LINE eats all coladd and keeps going','line_number':4034,'multiline':False]['text':'
     * Delete newline!
     ','line_number':4050,'multiline':True]['text':'
	 * In replace mode:
	 * cc < 0: NL was inserted, delete it
	 * cc >= 0: NL was replaced, put original characters back
	 ','line_number':4068,'multiline':True]['text':' returns -1 if NL was inserted','line_number':4075,'multiline':False]['text':'
	 * In replace mode, in the line we started replacing, we only move the
	 * cursor.
	 ','line_number':4076,'multiline':True]['text':' remember current char','line_number':4089,'multiline':False]['text':' When "aw" is in 'formatoptions' we must delete the space at','line_number':4092,'multiline':False]['text':' the end of the line, otherwise the line will be broken','line_number':4093,'multiline':False]['text':' again when auto-formatting.','line_number':4094,'multiline':False]['text':'
	     * In MODE_REPLACE mode we have to put back the text that was
	     * replaced by the NL. On the replace stack is first a
	     * NUL-terminated sequence of characters that were deleted and then
	     * the characters that NL replaced.
	     ','line_number':4114,'multiline':True]['text':'
		 * Do the next ins_char() in MODE_NORMAL state, to
		 * prevent ins_char() from replacing characters and
		 * avoiding showmatch().
		 ','line_number':4122,'multiline':True]['text':'
		 * restore characters (blanks) deleted after cursor
		 ','line_number':4129,'multiline':True]['text':' restore the characters that NL replaced','line_number':4139,'multiline':False]['text':'
	 * Delete character(s) before the cursor.
	 ','line_number':4148,'multiline':True]['text':' put cursor on last inserted char','line_number':4152,'multiline':False]['text':' keep indent','line_number':4156,'multiline':False]['text':' should now fix the indent to match with the previous line','line_number':4169,'multiline':False]['text':'
	 * Handle deleting one 'shiftwidth' or 'softtabstop'.
	 ','line_number':4175,'multiline':True]['text':' Compute the virtual column where we want to be.  Since','line_number':4197,'multiline':False]['text':' 'showbreak' may get in the way, need to get the last column of','line_number':4198,'multiline':False]['text':' the previous character.','line_number':4199,'multiline':False]['text':' delete characters until we are at or before want_vcol','line_number':4222,'multiline':False]['text':' insert extra spaces until we are at want_vcol','line_number':4227,'multiline':False]['text':' Remember the first char we inserted','line_number':4230,'multiline':False]['text':' If we are now back where we started delete one character.  Can','line_number':4246,'multiline':False]['text':' happen when using 'sts' and 'linebreak'.','line_number':4247,'multiline':False]['text':'
	 * Delete up to starting point, start of line or previous word.
	 ','line_number':4252,'multiline':True]['text':' put cursor on char to be deleted','line_number':4264,'multiline':False]['text':' look multi-byte character class','line_number':4269,'multiline':False]['text':' start of word?','line_number':4276,'multiline':False]['text':' end of word?','line_number':4282,'multiline':False]['text':'
		     * If there are combining characters and 'delcombine' is set
		     * move the cursor back.  Don't back up before the base
		     * character.
		     ','line_number':4304,'multiline':True]['text':' Just a single backspace?:','line_number':4321,'multiline':False]['text':'
     * It's a little strange to put backspaces into the redo
     * buffer, but it makes auto-indent a lot easier to deal
     * with.
     ','line_number':4345,'multiline':True]['text':' If deleted before the insertion point, adjust it','line_number':4352,'multiline':False]['text':' vi behaviour: the cursor moves backward but the character that','line_number':4357,'multiline':False]['text':'		     was there remains visible','line_number':4358,'multiline':False]['text':' Vim behaviour: the cursor moves backward and the character that','line_number':4359,'multiline':False]['text':'		      was there is erased from the screen.','line_number':4360,'multiline':False]['text':' We can emulate the vi behaviour by pretending there is a dollar','line_number':4361,'multiline':False]['text':' displayed even when there isn't.','line_number':4362,'multiline':False]['text':'  --pkv Sun Jan 19 01:56:40 EST 2003','line_number':4363,'multiline':False]['text':' When deleting a char the cursor line must never be in a closed fold.','line_number':4368,'multiline':False]['text':' E.g., when 'foldmethod' is indent and deleting the first non-white','line_number':4369,'multiline':False]['text':' char before a Tab.','line_number':4370,'multiline':False]['text':'
 * Handle receiving P_PS: start paste mode.  Inserts the following text up to
 * P_PE literally.
 * When "drop" is TRUE then consume the text and drop it.
 ','line_number':4378,'multiline':True]['text':' If the end code is too long we can't detect it, read everything.','line_number':4394,'multiline':False]['text':' Also have the side effects of setting 'paste' to make it work much','line_number':4400,'multiline':False]['text':' faster.','line_number':4401,'multiline':False]['text':' When the end is not defined read everything there is.','line_number':4406,'multiline':False]['text':' When CTRL-C was encountered the typeahead will be flushed and we','line_number':4414,'multiline':False]['text':' won't get the end sequence.  Except when using ":normal".','line_number':4415,'multiline':False]['text':' Found the end of paste code.','line_number':4426,'multiline':False]['text':' add one for the NUL that is going to be appended','line_number':4438,'multiline':False]['text':' We will be leaving the current window, unless closing another tab.','line_number':4487,'multiline':False]['text':' will redraw the tabline when needed','line_number':4501,'multiline':False]['text':' end undoable change','line_number':4540,'multiline':False]['text':' Only call start_arrow() when not busy with preediting, it will','line_number':4551,'multiline':False]['text':' break undo.  K_LEFT is inserted in im_correct_cursor().','line_number':4552,'multiline':False]['text':' If exit reversed string, position is fixed','line_number':4561,'multiline':False]['text':'
     * if 'whichwrap' set for cursor in insert mode may go to
     * previous line
     ','line_number':4568,'multiline':True]['text':' always break undo when moving upwards/downwards, else undo may break','line_number':4574,'multiline':False]['text':' so we stay at the end','line_number':4578,'multiline':False]['text':' end undoable change','line_number':4626,'multiline':False]['text':' end undoable change','line_number':4648,'multiline':False]['text':' if 'whichwrap' set for cursor in insert mode, may move the','line_number':4677,'multiline':False]['text':' cursor to the next line','line_number':4678,'multiline':False]['text':' end undoable change','line_number':4695,'multiline':False]['text':' when TRUE move to Insstart.col','line_number':4717,'multiline':False]['text':' <C-PageUp>: tab page back','line_number':4753,'multiline':False]['text':' when TRUE move to Insstart.col','line_number':4774,'multiline':False]['text':' <C-PageDown>: tab page forward','line_number':4810,'multiline':False]['text':'
 * Handle TAB in Insert or Replace mode.
 * Return TRUE when the TAB needs to be inserted like a normal character.
 ','line_number':4837,'multiline':True]['text':'
     * When nothing special, insert TAB like a normal character.
     ','line_number':4857,'multiline':True]['text':' These five lines mean 'tabstop' != 'shiftwidth'','line_number':4863,'multiline':False]['text':' insert tab in indent, use 'shiftwidth'','line_number':4887,'multiline':False]['text':' use 'softtabstop' when set','line_number':4893,'multiline':False]['text':' otherwise use 'tabstop'','line_number':4896,'multiline':False]['text':' insert tab in indent, use 'shiftwidth'','line_number':4900,'multiline':False]['text':' use 'softtabstop' when set','line_number':4902,'multiline':False]['text':' otherwise use 'tabstop'','line_number':4904,'multiline':False]['text':'
     * Insert the first space with ins_char().	It will delete one char in
     * replace mode.  Insert the rest with ins_str(); it will not delete any
     * chars.  For MODE_VREPLACE state, we use ins_char() for all characters.
     ','line_number':4909,'multiline':True]['text':' no char replaced','line_number':4922,'multiline':False]['text':'
     * When 'expandtab' not set: Replace spaces by TABs where possible.
     ','line_number':4927,'multiline':True]['text':' init for GCC','line_number':4939,'multiline':False]['text':'
	 * Get the current line.  For MODE_VREPLACE state, don't make real
	 * changes yet, just work on a copy of the line.
	 ','line_number':4949,'multiline':True]['text':' When 'L' is not in 'cpoptions' a tab always takes up 'ts' spaces.','line_number':4968,'multiline':False]['text':' Find first white before the cursor','line_number':4972,'multiline':False]['text':' In Replace mode, don't change characters before the insert point.','line_number':4980,'multiline':False]['text':' compute virtual column numbers of first white and cursor','line_number':4989,'multiline':False]['text':' Use as many TABs as possible.  Beware of 'breakindent', 'showbreak'','line_number':4995,'multiline':False]['text':' and 'linebreak' adding extra virtual columns.','line_number':4996,'multiline':False]['text':' Column of first change','line_number':5007,'multiline':False]['text':' May have to adjust Insstart','line_number':5008,'multiline':False]['text':' Skip over the spaces we need.','line_number':5024,'multiline':False]['text':' Must have a char with 'showbreak' just before it.','line_number':5038,'multiline':False]['text':' Delete following spaces.','line_number':5044,'multiline':False]['text':' correct replace stack.','line_number':5074,'multiline':False]['text':'
	     * In MODE_VREPLACE state, we haven't changed anything yet.  Do it
	     * now by backspacing over the changed spacing and then inserting
	     * the new spacing.
	     ','line_number':5089,'multiline':True]['text':' Backspace from real cursor to change_col','line_number':5096,'multiline':False]['text':' Insert each char in saved_line from changed_col to','line_number':5099,'multiline':False]['text':' ptr-cursor','line_number':5100,'multiline':False]['text':'
 * Handle CR or NL in insert mode.
 * Return FAIL when out of memory or can't undo.
 ','line_number':5114,'multiline':True]['text':'
     * Strange Vi behaviour: In Replace mode, typing a NL will not delete the
     * character under the cursor.  Only push a NUL on the replace stack,
     * nothing to put back when the NL is deleted.
     ','line_number':5129,'multiline':True]['text':'
     * In MODE_VREPLACE state, a NL replaces the rest of the line, and starts
     * replacing the next line, so we push all of the characters left on the
     * line onto the replace stack.  This is not done here though, it is done
     * in open_line().
     ','line_number':5137,'multiline':True]['text':' Put cursor on NUL if on the last char and coladd is 1 (happens after','line_number':5144,'multiline':False]['text':' CTRL-O).','line_number':5145,'multiline':False]['text':' NL in reverse insert will always start in the end of','line_number':5150,'multiline':False]['text':' current line.','line_number':5151,'multiline':False]['text':' When inserting a line the cursor line must never be in a closed fold.','line_number':5163,'multiline':False]['text':'
 * Handle digraph in insert mode.
 * Returns character still to be inserted, or NUL when nothing remaining to be
 * done.
 ','line_number':5171,'multiline':True]['text':' may need to redraw when no more chars available now','line_number':5186,'multiline':False]['text':' disallow scrolling here','line_number':5195,'multiline':False]['text':' don't map the digraph chars. This also prevents the','line_number':5198,'multiline':False]['text':' mode message to be deleted when ESC is hit','line_number':5199,'multiline':False]['text':' when the line fits in 'columns' the '?' is at the start of the next','line_number':5206,'multiline':False]['text':' line and will not be removed by the redraw','line_number':5207,'multiline':False]['text':' special key','line_number':5210,'multiline':False]['text':' may need to redraw when no more chars available now','line_number':5221,'multiline':False]['text':' when the line fits in 'columns' the '?' is at the start of the','line_number':5238,'multiline':False]['text':' next line and will not be removed by a redraw','line_number':5239,'multiline':False]['text':'
 * Handle CTRL-E and CTRL-Y in Insert mode: copy char from other line.
 * Returns the char to be inserted, or NUL if none found.
 ','line_number':5254,'multiline':True]['text':' try to advance to the cursor column','line_number':5272,'multiline':False]['text':'
 * CTRL-Y or CTRL-E typed in Insert mode.
 ','line_number':5294,'multiline':True]['text':' The character must be taken literally, insert like it','line_number':5317,'multiline':False]['text':' was typed after a CTRL-V, and pretend 'textwidth'','line_number':5318,'multiline':False]['text':' wasn't set.  Digits, 'o' and 'x' are special after a','line_number':5319,'multiline':False]['text':' CTRL-V, don't use it for these.','line_number':5320,'multiline':False]['text':' CTRL-V','line_number':5322,'multiline':False]['text':' pretend CTRL-V is last character','line_number':5331,'multiline':False]['text':'
 * Get the value that w_virtcol would have when 'list' is off.
 * Unless 'cpo' contains the 'L' flag.
 ','line_number':5338,'multiline':True]['text':' check validity of cursor in current buffer','line_number':5345,'multiline':False]['text':'
 * Handle the InsertCharPre autocommand.
 * "c" is the character that was typed.
 * Return a pointer to allocated memory with the replacement string.
 * Return NULL to continue inserting "c".
 ','line_number':5357,'multiline':True]['text':' Return quickly when there is nothing to do.','line_number':5370,'multiline':False]['text':' Lock the text to avoid weird things from happening.','line_number':5382,'multiline':False]['text':' set v:char','line_number':5384,'multiline':False]['text':' Get the value of v:char.  It may be empty or more than one','line_number':5389,'multiline':False]['text':' character.  Only use it when changed, otherwise continue with the','line_number':5390,'multiline':False]['text':' original character to avoid breaking autoindent.','line_number':5391,'multiline':False]['text':' clear v:char','line_number':5396,'multiline':False]['text':' Restore the State, it may have been changed.','line_number':5399,'multiline':False]['text':'
 * Trigger "event" and take care of fixing undo.
 ','line_number':5418,'multiline':True]['text':' If u_savesub() was called then we are not prepared to start','line_number':5429,'multiline':False]['text':' a new line.  Call u_save() with no contents to fix that.','line_number':5430,'multiline':False]['text':' Except when leaving Insert mode.','line_number':5431,'multiline':False]