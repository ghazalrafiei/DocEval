['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * alloc.c: functions for memory management
 ','line_number':10,'multiline':True]['text':'*********************************************************************
 * Various routines dealing with allocation and deallocation of memory.
 ','line_number':16,'multiline':True]['text':'
 * called on exit via atexit()
 ','line_number':78,'multiline':True]['text':' MEM_PROFILE','line_number':119,'multiline':False]['text':'
 * Some memory is reserved for error messages and for being able to
 * call mf_release_all(), which needs some memory for mf_trans_add().
 ','line_number':137,'multiline':True]['text':'
 * The normal way to allocate memory.  This handles an out-of-memory situation
 * as well as possible, still returns NULL when we're completely out.
 ','line_number':144,'multiline':True]['text':'
 * alloc() with an ID for alloc_fail().
 ','line_number':155,'multiline':True]['text':'
 * Allocate memory and set all bytes to zero.
 ','line_number':169,'multiline':True]['text':'
 * Same as alloc_clear() but with allocation id for testing
 ','line_number':183,'multiline':True]['text':'
 * Allocate memory like lalloc() and set all bytes to zero.
 ','line_number':196,'multiline':True]['text':'
 * Low level memory allocation function.
 * This is used often, KEEP IT FAST!
 ','line_number':210,'multiline':True]['text':' pointer to new storage space','line_number':217,'multiline':False]['text':' don't do mf_release_all() recursive','line_number':218,'multiline':False]['text':' allocated since last avail check','line_number':221,'multiline':False]['text':' Safety check for allocating zero bytes','line_number':224,'multiline':False]['text':' Don't hide this message','line_number':227,'multiline':False]['text':' Loop when out of memory: Try to release some memfile blocks and','line_number':237,'multiline':False]['text':' if some blocks are released call malloc again.','line_number':238,'multiline':False]['text':' Handle three kinds of systems:','line_number':241,'multiline':False]['text':' 1. No check for available memory: Just return.','line_number':242,'multiline':False]['text':' 2. Slow check for available memory: call mch_avail_mem() after','line_number':243,'multiline':False]['text':'    allocating KEEP_ROOM amount of memory.','line_number':244,'multiline':False]['text':' 3. Strict check for available memory: call mch_avail_mem()','line_number':245,'multiline':False]['text':' 1. No check for available memory: Just return.','line_number':249,'multiline':False]['text':' 2. Slow check for available memory: call mch_avail_mem() after','line_number':252,'multiline':False]['text':'    allocating (KEEP_ROOM / 2) amount of memory.','line_number':253,'multiline':False]['text':' 3. check for available memory: call mch_avail_mem()','line_number':259,'multiline':False]['text':' System is low... no go!','line_number':262,'multiline':False]['text':' Remember that mf_release_all() is being called to avoid an endless','line_number':269,'multiline':False]['text':' loop, because mf_release_all() may call alloc() recursively.','line_number':270,'multiline':False]['text':' free any scrollback text','line_number':275,'multiline':False]['text':' release as many blocks as possible','line_number':276,'multiline':False]['text':'
 * lalloc() with an ID for alloc_fail().
 ','line_number':293,'multiline':True]['text':'
 * realloc() with memory profiling.
 ','line_number':309,'multiline':True]['text':'
* Avoid repeating the error message many times (they take 1 second each).
* Did_outofmem_msg is reset when a character is read.
','line_number':328,'multiline':True]['text':' Don't hide this message','line_number':338,'multiline':False]['text':' Must come first to avoid coming back here when printing the error','line_number':341,'multiline':False]['text':' message fails, e.g. when setting v:errmsg.','line_number':342,'multiline':False]['text':' Not even finished with initializations and already out of','line_number':348,'multiline':False]['text':' memory?  Then nothing is going to work, exit.','line_number':349,'multiline':False]['text':'
 * Free everything that we allocated.
 * Can be used to detect memory leaks, e.g., with ccmalloc.
 * NOTE: This is tricky!  Things are freed that functions depend on.  Don't be
 * surprised if Vim crashes...
 * Some things can't be freed, esp. things local to a library function.
 ','line_number':355,'multiline':True]['text':' When we cause a crash here it is caught and Vim tries to exit cleanly.','line_number':367,'multiline':False]['text':' Don't try freeing everything again.','line_number':368,'multiline':False]['text':' Don't want to trigger autocommands from here on.','line_number':372,'multiline':False]['text':' Close all tabs and windows.  Reset 'equalalways' to avoid redraws.','line_number':375,'multiline':False]['text':' Free all spell info.','line_number':383,'multiline':False]['text':' Clear user commands (before deleting buffers).','line_number':395,'multiline':False]['text':' When exiting from mainerr_arg_missing curbuf has not been initialized,','line_number':398,'multiline':False]['text':' and not much else.','line_number':399,'multiline':False]['text':' Clear menus.','line_number':403,'multiline':False]['text':' Clear mappings, abbreviations, breakpoints.','line_number':410,'multiline':False]['text':' Obviously named calls.','line_number':430,'multiline':False]['text':' free any scrollback text','line_number':456,'multiline':False]['text':' Free some global vars.','line_number':458,'multiline':False]['text':' Clear cmdline history.','line_number':467,'multiline':False]['text':' Close all script inputs.','line_number':478,'multiline':False]['text':' Destroy all windows.  Must come before freeing buffers.','line_number':482,'multiline':False]['text':' Free all option values.  Must come after closing windows.','line_number':485,'multiline':False]['text':' Free all buffers.  Reset 'autochdir' to avoid accessing things that','line_number':488,'multiline':False]['text':' were freed already.','line_number':489,'multiline':False]['text':' didn't work, try next one','line_number':501,'multiline':False]['text':' Clear registers.','line_number':510,'multiline':False]['text':' highlight info','line_number':519,'multiline':False]['text':' Machine-specific free.','line_number':531,'multiline':False]['text':' message history','line_number':535,'multiline':False]['text':' must be after channel_free_all() with unrefs partials','line_number':547,'multiline':False]['text':' must be after eval_clear() with unrefs jobs','line_number':551,'multiline':False]['text':' screenlines (can't display anything now!)','line_number':558,'multiline':False]['text':'
 * Copy "p[len]" into allocated memory, ignoring NUL characters.
 * Returns NULL when out of memory.
 ','line_number':587,'multiline':True]['text':'
 * Replacement for free() that ignores NULL pointers.
 * Also skip free() when exiting for sure, this helps when we caught a deadly
 * signal that was caused by a crash in free().
 * If you want to set NULL after calling this function, you should use
 * VIM_CLEAR() instead.
 ','line_number':601,'multiline':True]['text':'***********************************************************************
 * Functions for handling growing arrays.
 ','line_number':620,'multiline':True]['text':'
 * Clear an allocated growing array.
 ','line_number':624,'multiline':True]['text':'
 * Clear a growing array that contains a list of strings.
 ','line_number':634,'multiline':True]['text':'
 * Copy a growing array that contains a list of strings.
 ','line_number':649,'multiline':True]['text':'
 * Initialize a growing array.	Don't forget to set ga_itemsize and
 * ga_growsize!  Or use ga_init2().
 ','line_number':685,'multiline':True]['text':'
 * Make room in growing array "gap" for at least "n" items.
 * Return FAIL for failure, OK otherwise.
 ','line_number':705,'multiline':True]['text':'
 * Same as ga_grow() but uses an allocation id for testing.
 ','line_number':717,'multiline':True]['text':' A linear growth is very inefficient when the array grows big.  This','line_number':741,'multiline':False]['text':' is a compromise between allocating memory that won't be used and too','line_number':742,'multiline':False]['text':' many copy operations. A factor of 1.5 seems reasonable.','line_number':743,'multiline':False]['text':'
 * For a growing array that contains a list of strings: concatenate all the
 * strings with a separating "sep".
 * Returns NULL when out of memory.
 ','line_number':758,'multiline':True]['text':'
 * Make a copy of string "p" and add it to "gap".
 * When out of memory nothing changes and FAIL is returned.
 ','line_number':794,'multiline':True]['text':'
 * Add string "p" to "gap".
 * When out of memory FAIL is returned (caller may want to free "p").
 ','line_number':815,'multiline':True]['text':'
 * Concatenate a string to a growarray which contains bytes.
 * When "s" is NULL memory allocation fails does not do anything.
 * Note: Does NOT copy the NUL at the end!
 ','line_number':828,'multiline':True]['text':'
 * Concatenate 'len' bytes from string 's' to a growarray.
 * When "s" is NULL does not do anything.
 ','line_number':848,'multiline':True]['text':'
 * Append one byte to a growarray which contains bytes.
 ','line_number':864,'multiline':True]['text':'
 * Append the text in "gap" below the cursor line and clear "gap".
 ','line_number':879,'multiline':True]['text':' Remove trailing CR.','line_number':885,'multiline':False]