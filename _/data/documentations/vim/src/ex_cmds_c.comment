['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * ex_cmds.c: some functions for command line commands
 ','line_number':10,'multiline':True]['text':'
 * ":ascii" and "ga".
 ','line_number':25,'multiline':True]['text':' NUL is stored as NL','line_number':56,'multiline':False]['text':' NL is stored as CR','line_number':59,'multiline':False]['text':' Repeat for combining characters.','line_number':91,'multiline':False]['text':' This assumes every multi-byte char is printable...','line_number':95,'multiline':False]['text':' draw composing char on top of a space','line_number':104,'multiline':False]['text':'
 * ":left", ":center" and ":right": align text.
 ','line_number':130,'multiline':True]['text':' switch left and right aligning','line_number':146,'multiline':False]['text':' width is used for new indent','line_number':156,'multiline':False]['text':'
	 * if 'textwidth' set, use it
	 * else if 'wrapmargin' set, use it
	 * if invalid value, use 80
	 ','line_number':163,'multiline':True]['text':' left align','line_number':182,'multiline':False]['text':' avoid uninit warnings','line_number':186,'multiline':False]['text':' skip blank lines','line_number':190,'multiline':False]['text':' right align','line_number':197,'multiline':False]['text':'
		 * Make sure that embedded TABs don't make the text go too far
		 * to the right.
		 ','line_number':199,'multiline':True]['text':'
			     * Now try to move the line as much as possible to
			     * the right.  Stop when it moves too far.
			     ','line_number':209,'multiline':True]['text':' set indent','line_number':225,'multiline':False]['text':'
 * Get the length of the current line, excluding trailing white space.
 ','line_number':232,'multiline':True]['text':' Get the line.  If it's empty bail out early (could be the empty string','line_number':244,'multiline':False]['text':' for an unloaded buffer).','line_number':245,'multiline':False]['text':' find the first non-blank character','line_number':250,'multiline':False]['text':' find the character after the last non-blank character','line_number':253,'multiline':False]['text':' get line length on screen','line_number':259,'multiline':False]['text':' check for embedded TAB','line_number':260,'multiline':False]['text':' Buffer for two lines used during sorting.  They are allocated to','line_number':267,'multiline':False]['text':' contain the longest line being sorted.','line_number':268,'multiline':False]['text':' sort using locale','line_number':272,'multiline':False]['text':' ignore case','line_number':273,'multiline':False]['text':' sort on number','line_number':274,'multiline':False]['text':' sort on regex instead of skipping it','line_number':275,'multiline':False]['text':' sort on floating number','line_number':276,'multiline':False]['text':' flag to indicate if sorting has been interrupted','line_number':278,'multiline':False]['text':' Struct to store info to be sorted.','line_number':280,'multiline':False]['text':' line number','line_number':283,'multiline':False]['text':' starting column number','line_number':287,'multiline':False]['text':' ending column number','line_number':288,'multiline':False]['text':' value if sorting by integer','line_number':292,'multiline':False]['text':' TRUE when line contains a number','line_number':293,'multiline':False]['text':' value if sorting by float','line_number':295,'multiline':False]['text':' If the user interrupts, there's no way to stop qsort() immediately, but','line_number':314,'multiline':False]['text':' if we return 0 every time, qsort will assume it's done sorting and','line_number':315,'multiline':False]['text':' exit.','line_number':316,'multiline':False]['text':' We need to copy one line into "sortbuf1", because there is no','line_number':336,'multiline':False]['text':' guarantee that the first pointer becomes invalid when obtaining the','line_number':337,'multiline':False]['text':' second one.','line_number':338,'multiline':False]['text':' If two lines have the same value, preserve the original line order.','line_number':349,'multiline':False]['text':'
 * ":sort".
 ','line_number':355,'multiline':True]['text':' temporary character storage','line_number':371,'multiline':False]['text':' Buffer contents changed.','line_number':378,'multiline':False]['text':' Sorting one line is really quick!','line_number':380,'multiline':False]['text':' comment start','line_number':433,'multiline':False]['text':' Use last search pattern if sort pattern is empty.','line_number':446,'multiline':False]['text':' continue after the regexp','line_number':460,'multiline':False]['text':' Can only have one of 'n', 'b', 'o' and 'x'.','line_number':470,'multiline':False]['text':' From here on "sort_nr" is used as a flag for any integer number','line_number':477,'multiline':False]['text':' sorting.','line_number':478,'multiline':False]['text':'
     * Make an array with all line numbers.  This avoids having to copy all
     * the lines into allocated memory.
     * When sorting on strings "start_col_nr" is the offset in the line, for
     * numbers sorting it's the number to sort on.  This means the pattern
     * matching and number conversion only has to be done once per line.
     * Also get the longest line length for allocating "sortbuf".
     ','line_number':481,'multiline':True]['text':' Make sure vim_str2nr() doesn't read any digits past the end','line_number':514,'multiline':False]['text':' of the match, by temporarily terminating the string there','line_number':515,'multiline':False]['text':' Sorting on number: Store the number itself.','line_number':519,'multiline':False]['text':' include preceding negative sign','line_number':530,'multiline':False]['text':' line without number should sort before any number','line_number':533,'multiline':False]['text':' empty line should sort before any number','line_number':552,'multiline':False]['text':' Store the column to sort at.','line_number':562,'multiline':False]['text':' Allocate a buffer that can hold the longest line.','line_number':575,'multiline':False]['text':' Sort the array of line numbers.  Note: can't be interrupted!','line_number':583,'multiline':False]['text':' Insert the lines in the sorted order below the last one.','line_number':589,'multiline':False]['text':' If the original line number of the line being placed is not the same','line_number':595,'multiline':False]['text':' as "lnum" (accounting for offset), we know that the buffer changed.','line_number':596,'multiline':False]['text':' Copy the line into a buffer, it may become invalid in','line_number':603,'multiline':False]['text':' ml_append(). And it's needed for "unique".','line_number':604,'multiline':False]['text':' delete the original lines if appending worked','line_number':614,'multiline':False]['text':' Adjust marks for deleted (or added) lines and prepare for displaying.','line_number':621,'multiline':False]['text':'
 * :move command - move lines line1-line2 to line dest
 *
 * return FAIL for failure, OK otherwise
 ','line_number':646,'multiline':True]['text':' Num lines added before line1','line_number':656,'multiline':False]['text':' Num lines moved','line_number':657,'multiline':False]['text':' Last line in file after adding new text','line_number':658,'multiline':False]['text':' Do nothing if we are not actually moving any lines.  This will prevent','line_number':670,'multiline':False]['text':' the 'modified' flag from being set without cause.','line_number':671,'multiline':False]['text':' Move the cursor as if lines were moved (see below) to be backwards','line_number':674,'multiline':False]['text':' compatible.','line_number':675,'multiline':False]['text':'
     * First we copy the old text to its new location -- webb
     * Also copy the flag that ":global" command uses.
     ','line_number':686,'multiline':True]['text':'
     * Now we must be careful adjusting our marks so that we don't overlap our
     * mark_adjust() calls.
     *
     * We adjust the marks within the old text so that they refer to the
     * last lines of the file (temporarily), because we know no other marks
     * will be set there since these line numbers did not exist until we added
     * our new lines.
     *
     * Then we adjust the marks on lines between the old and new text positions
     * (either forwards or backwards).
     *
     * And Finally we adjust the marks we put at the end of the file back to
     * their final destination at the new text position -- webb
     ','line_number':704,'multiline':True]['text':'
     * Now we delete the original text -- webb
     ','line_number':758,'multiline':True]['text':'
     * Leave the cursor on the last of the moved lines.
     ','line_number':771,'multiline':True]['text':'
 * ":copy"
 ','line_number':793,'multiline':True]['text':'
     * there are three situations:
     * 1. destination is above line1
     * 2. destination is between line1 and line2
     * 3. destination is below line2
     *
     * n = destination (when starting)
     * curwin->w_cursor.lnum = destination (while copying)
     * line1 = start of source (while copying)
     * line2 = end of source (while copying)
     ','line_number':810,'multiline':True]['text':' need to use vim_strsave() because the line will be unlocked within','line_number':827,'multiline':False]['text':' ml_append()','line_number':828,'multiline':False]['text':' situation 2: skip already copied lines','line_number':835,'multiline':False]['text':' the previous command','line_number':853,'multiline':False]['text':'
 * Check that "prevcmd" is not NULL.  If it is NULL then give an error message
 * and return FALSE.
 ','line_number':863,'multiline':True]['text':'
 * Handle the ":!cmd" command.	Also for ":r !cmd" and ":w !cmd"
 * Bangs in the argument are replaced with the previously entered command.
 * Remember the argument.
 ','line_number':878,'multiline':True]['text':' command','line_number':891,'multiline':False]['text':' start of range','line_number':892,'multiline':False]['text':' end of range','line_number':893,'multiline':False]['text':' the new command','line_number':894,'multiline':False]['text':' need to free() newcmd','line_number':895,'multiline':False]['text':'
     * Disallow shell commands for "rvim".
     * Disallow shell commands from .exrc and .vimrc in current directory for
     * security reasons.
     ','line_number':903,'multiline':True]['text':' :!','line_number':911,'multiline':False]['text':' don't scroll here','line_number':913,'multiline':False]['text':'
     * Try to find an embedded bang, like in ":!<cmd> ! [args]"
     * ":!!" is indicated by the 'forceit' variable.
     ','line_number':918,'multiline':True]['text':' Skip leading white space to avoid a strange error with some shells.','line_number':924,'multiline':False]['text':'
	 * Scan the rest of the argument for '!', which is replaced by the
	 * previous command.  "\!" is replaced by "!" (this is vi compatible).
	 ','line_number':955,'multiline':True]['text':' Only set "prevcmd" if there is a command to run, otherwise keep te one','line_number':978,'multiline':False]['text':' we have.','line_number':979,'multiline':False]['text':' put cmd in redo buffer for ! command','line_number':988,'multiline':False]['text':' If % or # appears in the command, it must have been escaped.','line_number':993,'multiline':False]['text':' Reescape them, so that redoing them does not substitute them by the','line_number':994,'multiline':False]['text':' buffername.','line_number':995,'multiline':False]['text':'
     * Add quotes around the command, for shells that need them.
     ','line_number':1008,'multiline':True]['text':' :!','line_number':1023,'multiline':False]['text':' echo the command','line_number':1025,'multiline':False]['text':' :range!','line_number':1035,'multiline':False]['text':' Careful: This may recursively call do_bang() again! (because of','line_number':1037,'multiline':False]['text':' autocommands)','line_number':1038,'multiline':False]['text':'
 * do_filter: filter lines through a command given by the user
 *
 * We mostly use temp files and the call_shell() routine here. This would
 * normally be done using pipes on a UNIX machine, but this is more portable
 * to non-unix machines. The call_shell() routine needs to be able
 * to deal with redirection somehow, and should handle things like looking
 * at the PATH env. variable, and adding reasonable extensions to the
 * command name given by the user. All reasonable versions of call_shell()
 * do this.
 * Alternatively, if on Unix and redirecting input or output, but not both,
 * and the 'shelltemp' option isn't set, use pipes.
 * We use input redirection if do_in is TRUE.
 * We use output redirection if do_out is TRUE.
 ','line_number':1048,'multiline':True]['text':' for forced 'ff' and 'fenc'','line_number':1067,'multiline':False]['text':' no filter command','line_number':1087,'multiline':False]['text':' Temporarily disable lockmarks since that's needed to propagate changed','line_number':1090,'multiline':False]['text':' regions of the buffer for foldUpdate(), linecount, etc.','line_number':1091,'multiline':False]['text':'
     * When using temp files:
     * 1. * Form temp file names
     * 2. * Write the lines to a temp file
     * 3.   Run the filter command on the temp file
     * 4. * Read the output of the command into the buffer
     * 5. * Delete the original lines to be filtered
     * 6. * Remove the temp files
     *
     * When writing the input with a pipe or when catching the output with a
     * pipe only need to do 3.
     ','line_number':1101,'multiline':True]['text':' Console mode doesn't support filterpipe.','line_number':1120,'multiline':False]['text':' Use a pipe to fetch stdout of the command, do not use a temp file.','line_number':1125,'multiline':False]['text':' Use a pipe to write stdin of the command, do not use a temp file.','line_number':1131,'multiline':False]['text':' Use a pipe to write stdin and fetch stdout of the command, do not','line_number':1138,'multiline':False]['text':' use a temp file.','line_number':1139,'multiline':False]['text':'
 * The writing and reading of temp files will not be shown.
 * Vi also doesn't do this and the messages are not very informative.
 ','line_number':1154,'multiline':True]['text':' don't call wait_return() while busy','line_number':1158,'multiline':False]['text':' keep message from buf_write()','line_number':1162,'multiline':False]['text':' will call wait_return()','line_number':1167,'multiline':False]['text':' Create the shell command in allocated memory.','line_number':1177,'multiline':False]['text':'
     * When not redirecting the output the command can write anything to the
     * screen. If 'shellredir' is equal to ">", screen may be messed up by
     * stderr output of external command. Clear the screen later.
     * If do_in is FALSE, this could be something like ":r !cat", which may
     * also mess up the screen, clear it later.
     ','line_number':1185,'multiline':True]['text':'
     * When call_shell() fails wait_return() is called to give the user a
     * chance to read the error messages. Otherwise errors are ignored, so you
     * can see the error messages from the command that appear on stdout; use
     * 'u' to fix the text
     * Switch to cooked mode when not redirecting stdin, avoids that something
     * like ":r !cat" hangs.
     * Pass on the SHELL_DOOUT flag when the output is being redirected.
     ','line_number':1206,'multiline':True]['text':' When interrupting the shell command, it may still have produced some','line_number':1225,'multiline':False]['text':' useful output.  Reset got_int here, so that readfile() won't cancel','line_number':1226,'multiline':False]['text':' reading.','line_number':1227,'multiline':False]['text':' move all marks from old lines to new lines','line_number':1266,'multiline':False]['text':' Move marks from the lines below the new lines down by','line_number':1270,'multiline':False]['text':' the number of lines lost.','line_number':1271,'multiline':False]['text':' Move marks from the lines that will be deleted to the','line_number':1272,'multiline':False]['text':' new lines and below.','line_number':1273,'multiline':False]['text':' move marks from old lines to new lines, delete marks','line_number':1280,'multiline':False]['text':' that are in deleted lines','line_number':1281,'multiline':False]['text':'
	     * Put cursor on first filtered line for ":range!cmd".
	     * Adjust '[ and '] (set by buf_write()).
	     ','line_number':1288,'multiline':True]['text':' adjust '[','line_number':1294,'multiline':False]['text':' adjust ']','line_number':1295,'multiline':False]['text':' adjust last line','line_number':1296,'multiline':False]['text':' for next write','line_number':1297,'multiline':False]['text':'
	     * Put cursor on last new line for ":r !cmd".
	     ','line_number':1304,'multiline':True]['text':' cursor on first non-blank','line_number':1311,'multiline':False]['text':' save message to display it after redraw','line_number':1321,'multiline':False]['text':' put cursor back in same position for ":w !cmd"','line_number':1331,'multiline':False]['text':'
 * Call a shell to execute a command.
 * When "cmd" is NULL start an interactive shell.
 ','line_number':1359,'multiline':True]['text':' may be SHELL_DOOUT when output is redirected','line_number':1366,'multiline':False]['text':'
     * Disallow shell commands for "rvim".
     * Disallow shell commands from .exrc and .vimrc in current directory for
     * security reasons.
     ','line_number':1377,'multiline':True]['text':'
     * Check if ":!start" is used.  This implies not stopping termcap mode.
     ','line_number':1389,'multiline':True]['text':' Don't stop termcap mode when using a terminal window for the shell.','line_number':1396,'multiline':False]['text':'
     * For autocommands we want to get the output on the current screen, to
     * avoid having to type return below.
     ','line_number':1402,'multiline':True]['text':' put cursor at start of line','line_number':1406,'multiline':False]['text':' may shift screen one line up','line_number':1415,'multiline':False]['text':' warning message before calling the shell','line_number':1417,'multiline':False]['text':' don't want a message box here','line_number':1424,'multiline':False]['text':' This windgoto is required for when the '\n' resulted in a "delete line','line_number':1434,'multiline':False]['text':' 1" command to the terminal.','line_number':1435,'multiline':False]['text':'
     * put the message cursor at the end of the screen, avoids wait_return()
     * to overwrite the text that the external command showed
     ','line_number':1443,'multiline':True]['text':'
	 * For ":sh" there is no need to call wait_return(), just redraw.
	 * Also for the Win32 GUI (the output is in a console window).
	 * Otherwise there is probably text on the screen that the user wants
	 * to read before redrawing, so call wait_return().
	 ','line_number':1460,'multiline':True]['text':'
		 * If we switch screens when starttermcap() is called, we
		 * really want to wait for "hit return to continue".
		 ','line_number':1483,'multiline':True]['text':' see below','line_number':1491,'multiline':False]['text':' FEAT_GUI_MSWIN','line_number':1498,'multiline':False]['text':' if keep_termcap is TRUE didn't stop termcap','line_number':1500,'multiline':False]['text':' start termcap if not done by wait_return()','line_number':1501,'multiline':False]['text':'
	 * In an Amiga window redrawing is caused by asking the window size.
	 * If we got an interrupt this will not work. The chance that the
	 * window size is wrong is very small, but we need to redraw the
	 * screen.  Don't do this if ':' hit in wait_return().	THIS IS UGLY
	 * but it saves an extra redraw.
	 ','line_number':1503,'multiline':True]['text':' ':' hit in wait_return()','line_number':1511,'multiline':False]['text':' get window size','line_number':1518,'multiline':False]['text':' if got_int is TRUE, redraw needed','line_number':1520,'multiline':False]['text':' no extra redraw needed','line_number':1522,'multiline':False]['text':' display any error messages now','line_number':1527,'multiline':False]['text':'
 * Create a shell command from a command string, input redirection file and
 * output redirection file.
 * Returns an allocated string with the shell command, or NULL for failure.
 ','line_number':1553,'multiline':True]['text':' command','line_number':1560,'multiline':False]['text':' NULL or name of input file','line_number':1561,'multiline':False]['text':' NULL or name of output file','line_number':1562,'multiline':False]['text':' Account for fish's different syntax for subshells','line_number':1576,'multiline':False]['text':' "begin; " + "; end" + NUL','line_number':1579,'multiline':False]['text':' "()" + NUL','line_number':1588,'multiline':False]['text':' "& { Get-Content " + " | & " + " }"','line_number':1594,'multiline':False]['text':' " { < " + " } "','line_number':1597,'multiline':False]['text':' "  "','line_number':1600,'multiline':False]['text':' Put braces around the command (for concatenated commands) when','line_number':1619,'multiline':False]['text':' redirecting input and/or output.','line_number':1620,'multiline':False]['text':' For shells that don't understand braces around commands, at least','line_number':1636,'multiline':False]['text':' allow the use of commands in a pipe.','line_number':1637,'multiline':False]['text':' If there is a pipe, we have to put the '<' in front of it.','line_number':1657,'multiline':False]['text':' Don't do this when 'shellquote' is not empty, otherwise the','line_number':1658,'multiline':False]['text':' redirection would be inside the quotes.','line_number':1659,'multiline':False]['text':' " < " causes problems on Amiga','line_number':1666,'multiline':False]['text':' insert a space before the '|' for DOS','line_number':1673,'multiline':False]['text':'
 * Append output redirection for file "fname" to the end of string buffer
 * "buf[buflen]"
 * Works with the 'shellredir' and 'shellpipe' options.
 * The caller should make sure that there is enough room:
 *	STRLEN(opt) + STRLEN(fname) + 3
 ','line_number':1688,'multiline':True]['text':' find "%s"','line_number':1706,'multiline':False]['text':' found %s','line_number':1709,'multiline':False]['text':' skip %%','line_number':1711,'multiline':False]['text':' not really needed? Not with sh, ksh or bash','line_number':1717,'multiline':False]['text':'
 * Implementation of ":fixdel", also used by get_stty().
 *  <BS>    resulting <Del>
 *   ^?		^H
 * not ^?	^?
 ','line_number':1727,'multiline':True]['text':' Highlight line nrs','line_number':1755,'multiline':False]['text':'
 * Print a text line.  Also in silent mode ("ex -s").
 ','line_number':1760,'multiline':True]['text':' apply :filter /pat/','line_number':1768,'multiline':False]['text':' use mch_msg(), not mch_errmsg()','line_number':1774,'multiline':False]['text':' msg_start() switches it off','line_number':1779,'multiline':False]['text':' buffer changed, don't change name now','line_number':1794,'multiline':False]['text':' autocmds may abort script processing','line_number':1798,'multiline':False]['text':'
     * The name of the current buffer will be changed.
     * A new (unlisted) buffer entry needs to be made to hold the old file
     * name, which will become the alternate file name.
     * But don't set the alternate file name if the buffer didn't have a
     * name.
     ','line_number':1801,'multiline':True]['text':' Change directories when the 'acd' option is set.','line_number':1830,'multiline':False]['text':'
 * ":file[!] [fname]".
 ','line_number':1835,'multiline':True]['text':' ":0file" removes the file name.  Check for illegal uses ":3file",','line_number':1841,'multiline':False]['text':' "0file name", etc.','line_number':1842,'multiline':False]['text':' print file name if no argument or 'F' is not in 'shortmess'','line_number':1859,'multiline':False]['text':'
 * ":update".
 ','line_number':1864,'multiline':True]['text':'
 * ":write" and ":saveas".
 ','line_number':1874,'multiline':True]['text':' :saveas does not take a range, uses all lines.','line_number':1882,'multiline':False]['text':' input lines to shell command','line_number':1887,'multiline':False]['text':'
 * Write the current buffer to file "eap->arg".
 * If "eap->append" is TRUE, append to the file.
 *
 * If "*eap->arg == NUL" write to current file.
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':1906,'multiline':True]['text':' init to shut up gcc','line_number':1918,'multiline':False]['text':' check 'write' option','line_number':1928,'multiline':False]['text':'
	 * When out-of-memory, keep unexpanded file name, because we MUST be
	 * able to write the file in this situation.
	 ','line_number':1955,'multiline':True]['text':'
     * If we have a new file, put its name in the list of alternate file names.
     ','line_number':1964,'multiline':True]['text':' Overwriting a file that is loaded in another buffer is not a','line_number':1976,'multiline':False]['text':' good idea.','line_number':1977,'multiline':False]['text':'
     * Writing to the current file is not allowed in readonly mode
     * and a file name is required.
     * "nofile" and "nowrite" buffers cannot be written implicitly either.
     ','line_number':1983,'multiline':True]['text':'
	 * Not writing the whole file is only allowed with '!'.
	 ','line_number':1999,'multiline':True]['text':' buffer changed, don't change name now','line_number':2039,'multiline':False]['text':' Exchange the file names for the current and the alternate','line_number':2043,'multiline':False]['text':' buffer.  This makes it look like we are now editing the buffer','line_number':2044,'multiline':False]['text':' under the new name.  Must be done before buf_write(), because','line_number':2045,'multiline':False]['text':' if there is no file name and 'cpo' contains 'F', it will set','line_number':2046,'multiline':False]['text':' the file name.','line_number':2047,'multiline':False]['text':' buffer changed, don't write the file','line_number':2072,'multiline':False]['text':' If 'filetype' was empty try detecting it now.','line_number':2077,'multiline':False]['text':' Autocommands may have changed buffer names, esp. when','line_number':2086,'multiline':False]['text':' 'autochdir' is set.','line_number':2087,'multiline':False]['text':' After ":saveas fname" reset 'readonly'.','line_number':2096,'multiline':False]['text':' Change directories when the 'acd' option is set and the file name','line_number':2106,'multiline':False]['text':' got changed or set.','line_number':2107,'multiline':False]['text':'
 * Check if it is allowed to overwrite a file.  If b_flags has BF_NOTEDITED,
 * BF_NEW or BF_READERR, check for overwriting current file.
 * May set eap->forceit if a dialog says it's OK to overwrite.
 * Return OK if it's OK, FAIL if it is not.
 ','line_number':2120,'multiline':True]['text':' file name to be used (can differ from','line_number':2130,'multiline':False]['text':' buf->ffname)','line_number':2131,'multiline':False]['text':' full path version of fname','line_number':2132,'multiline':False]['text':' writing under other name','line_number':2133,'multiline':False]['text':'
     * Write to another file or b_flags set or not writing the whole file:
     * overwriting only allowed with '!'.
     * If "other" is FALSE and bt_nofilename(buf) is TRUE, this must be
     * writing an "acwrite" buffer to the same file as its b_ffname, and
     * buf_write() will only allow writing with BufWriteCmd autocommands,
     * so there is no need for an overwrite check.
     ','line_number':2135,'multiline':True]['text':' with UNIX it is possible to open a directory','line_number':2155,'multiline':False]['text':' For ":w! filename" check that no swap file exists for "filename".','line_number':2180,'multiline':False]['text':' We only try the first entry in 'directory', without checking if','line_number':2188,'multiline':False]['text':' it's writable.  If the "." directory is not writable the write','line_number':2189,'multiline':False]['text':' will probably fail anyway.','line_number':2190,'multiline':False]['text':' Use 'shortname' of the current buffer, since there is no buffer','line_number':2191,'multiline':False]['text':' for the written file.','line_number':2192,'multiline':False]['text':'
 * Handle ":wnext", ":wNext" and ":wprevious" commands.
 ','line_number':2243,'multiline':True]['text':'
 * ":wall", ":wqall" and ":xall": Write all changed files (and exit).
 ','line_number':2261,'multiline':True]['text':'
	     * Check if there is a reason the buffer cannot be written:
	     * 1. if the 'write' option is set
	     * 2. if there is no file name (even after browsing)
	     * 3. if the 'readonly' is set (even after a dialog)
	     * 4. if overwriting is allowed (even after a dialog)
	     ','line_number':2290,'multiline':True]['text':' ":browse wall": ask for file name if there isn't one','line_number':2303,'multiline':False]['text':' an autocommand may have deleted the buffer','line_number':2325,'multiline':False]['text':' check_overwrite() may set it','line_number':2329,'multiline':False]['text':' exit Vim','line_number':2335,'multiline':False]['text':'
 * Check the 'write' option.
 * Return TRUE and give a message when it's not set.
 ','line_number':2340,'multiline':True]['text':'
 * Check if a buffer is read-only (either 'readonly' option is set or file is
 * read-only). Ask for overruling in a dialog. Return TRUE and give an error
 * message when the buffer is readonly.
 ','line_number':2353,'multiline':True]['text':' Handle a file being readonly when the 'readonly' option is set or when','line_number':2363,'multiline':False]['text':' the file exists and permissions are read-only.','line_number':2364,'multiline':False]['text':' We will send 0777 to check_file_readonly(), as the "perm" variable is','line_number':2365,'multiline':False]['text':' important for device checks but not here.','line_number':2366,'multiline':False]['text':' Set forceit, to force the writing of a readonly file','line_number':2386,'multiline':False]['text':'
 * Try to abandon the current file and edit a new or existing file.
 * "fnum" is the number of the file, if zero use "ffname_arg"/"sfname_arg".
 * "lnum" is the line number for the cursor in the new file (if non-zero).
 *
 * Return:
 * GETFILE_ERROR for "normal" error,
 * GETFILE_NOT_WRITTEN for "not written" error,
 * GETFILE_SAME_FILE for success
 * GETFILE_OPEN_OTHER for successfully opening another file.
 ','line_number':2405,'multiline':True]['text':' make ffname full path, set sfname','line_number':2438,'multiline':False]['text':' has been allocated, free() later','line_number':2441,'multiline':False]['text':' don't wait for autowrite message','line_number':2447,'multiline':False]['text':' file has been changed','line_number':2459,'multiline':False]['text':' it's in the same file','line_number':2473,'multiline':False]['text':' opened another file','line_number':2478,'multiline':False]['text':' error encountered','line_number':2480,'multiline':False]['text':'
 * start editing a new file
 *
 *     fnum: file number; if zero use ffname/sfname
 *   ffname: the file name
 *		- full path if sfname used,
 *		- any file name if sfname is NULL
 *		- empty string to re-edit with the same file name (but may be
 *		    in a different directory)
 *		- NULL to start an empty buffer
 *   sfname: the short file name (or NULL)
 *	eap: contains the command to be executed after loading the file and
 *	     forced 'ff' and 'fenc'
 *  newlnum: if > 0: put cursor on this line number (if possible)
 *	     if ECMD_LASTL: use last position in loaded file
 *	     if ECMD_LAST: use last position in all files
 *	     if ECMD_ONE: use first line
 *    flags:
 *	   ECMD_HIDE: if TRUE don't free the current buffer
 *     ECMD_SET_HELP: set b_help flag of (new) buffer before opening file
 *	 ECMD_OLDBUF: use existing buffer if it exists
 *	ECMD_FORCEIT: ! used for Ex command
 *	 ECMD_ADDBUF: don't edit, just add to buffer list
 *	 ECMD_ALTBUF: like ECMD_ADDBUF and also set the alternate file
 *   ECMD_NOWINENTER: Do not trigger BufWinEnter
 *   oldwin: Should be "curwin" when editing a new buffer in the current
 *	     window, NULL when splitting the window first.  When not NULL info
 *	     of the previous buffer for "oldwin" is stored.
 *
 * return FAIL for failure, OK otherwise
 ','line_number':2487,'multiline':True]['text':' can be NULL!','line_number':2523,'multiline':False]['text':' TRUE if editing another file','line_number':2528,'multiline':False]['text':' TRUE if using existing buffer','line_number':2529,'multiline':False]['text':' TRUE if autocommands brought us','line_number':2530,'multiline':False]['text':' into the buffer unexpectedly','line_number':2531,'multiline':False]['text':' file is already being edited','line_number':2570,'multiline':False]['text':' nothing to do','line_number':2571,'multiline':False]['text':' No browsing supported but we do have the file explorer:','line_number':2585,'multiline':False]['text':' Edit the directory.','line_number':2586,'multiline':False]['text':' if no short name given, use ffname for short name','line_number':2600,'multiline':False]['text':' set correct case for sfname','line_number':2605,'multiline':False]['text':' there is no file name','line_number':2614,'multiline':False]['text':' re-edit with same file name','line_number':2619,'multiline':False]['text':' may expand to full path name','line_number':2624,'multiline':False]['text':'
     * If the file was changed we may not be allowed to abandon it:
     * - if we are going to re-edit the same file
     * - or if we are the only window on this file and if ECMD_HIDE is FALSE
     ','line_number':2631,'multiline':True]['text':' End Visual mode before switching to another buffer, so the text can be','line_number':2650,'multiline':False]['text':' copied into the GUI selection buffer.','line_number':2651,'multiline':False]['text':' Careful: may trigger ModeChanged() autocommand','line_number':2652,'multiline':False]['text':' Should we block autocommands here?','line_number':2654,'multiline':False]['text':' autocommands freed window :(','line_number':2657,'multiline':False]['text':' Set v:swapcommand for the SwapExists autocommands.','line_number':2668,'multiline':False]['text':'
     * If we are starting to edit another file, open a (new) buffer.
     * Otherwise we re-use the current buffer.
     ','line_number':2687,'multiline':True]['text':' Default the line number to zero to avoid that a wininfo item','line_number':2709,'multiline':False]['text':' is added for the current window.','line_number':2710,'multiline':False]['text':' Add BLN_NOCURWIN to avoid a new wininfo items are associated','line_number':2720,'multiline':False]['text':' with the current window.','line_number':2721,'multiline':False]['text':' autocommands may change curwin and curbuf','line_number':2736,'multiline':False]['text':' reusing the buffer, keep the old alternate file','line_number':2744,'multiline':False]['text':' no memfile yet','line_number':2747,'multiline':False]['text':' existing memfile','line_number':2751,'multiline':False]['text':' Check if autocommands made the buffer invalid or changed the','line_number':2756,'multiline':False]['text':' current buffer.','line_number':2757,'multiline':False]['text':' autocmds may abort script processing','line_number':2761,'multiline':False]['text':' May jump to last used line number for a loaded buffer or when asked','line_number':2766,'multiline':False]['text':' for explicitly','line_number':2767,'multiline':False]['text':'
	 * Make the (new) buffer the one used by the current window.
	 * If the old buffer becomes unused, free it if ECMD_HIDE is FALSE.
	 * If the current buffer was empty and has no file name, curbuf
	 * is returned by buflist_new(), nothing to do here.
	 ','line_number':2775,'multiline':True]['text':' BufLeave applies to the old buffer.','line_number':2786,'multiline':False]['text':'
	     * Be careful: The autocommands may delete any buffer and change
	     * the current buffer.
	     * - If the buffer we are going to edit is deleted, give up.
	     * - If the current buffer is deleted, prefer to load the new
	     *   buffer when loading a buffer is required.  This avoids
	     *   loading another buffer which then must be closed again.
	     * - If we ended up in the new buffer already, need to skip a few
	     *	 things, set auto_buf.
	     ','line_number':2789,'multiline':True]['text':' new buffer has been deleted','line_number':2807,'multiline':False]['text':' frees new_name','line_number':2808,'multiline':False]['text':' autocmds may abort script processing','line_number':2813,'multiline':False]['text':' already in new buffer','line_number':2820,'multiline':False]['text':' Set the w_closing flag to avoid that autocommands close the','line_number':2828,'multiline':False]['text':' window.  And set b_locked for the same reason.','line_number':2829,'multiline':False]['text':' Close the link to the current buffer. This will set','line_number':2836,'multiline':False]['text':' oldwin->w_buffer to NULL.','line_number':2837,'multiline':False]['text':' Autocommands may have closed the window.','line_number':2842,'multiline':False]['text':' autocmds may abort script processing','line_number':2848,'multiline':False]['text':' Be careful again, like above.','line_number':2856,'multiline':False]['text':' new buffer has been deleted','line_number':2859,'multiline':False]['text':' frees new_name','line_number':2860,'multiline':False]['text':' already in new buffer','line_number':2864,'multiline':False]['text':' close_buffer() has decremented the window count,','line_number':2866,'multiline':False]['text':' increment it again here and restore w_buffer.','line_number':2867,'multiline':False]['text':'
		     * <VN> We could instead free the synblock
		     * and re-attach to buffer, perhaps.
		     ','line_number':2877,'multiline':True]['text':' Set 'fileformat', 'binary' and 'fenc' when forced.','line_number':2889,'multiline':False]['text':' May get the window options from the last time this buffer','line_number':2897,'multiline':False]['text':' was in this window (or another window).  If not used','line_number':2898,'multiline':False]['text':' before, reset the local window options to the global','line_number':2899,'multiline':False]['text':' values.  Also restores old folding stuff.','line_number':2900,'multiline':False]['text':' !other_file','line_number':2913,'multiline':False]['text':' Don't redraw until the cursor is in the right line, otherwise','line_number':2921,'multiline':False]['text':' autocommands may cause ml_get errors.','line_number':2922,'multiline':False]['text':' Don't make a buffer listed if it's a help buffer.  Useful when','line_number':2933,'multiline':False]['text':' using CTRL-O to go back to a help file.','line_number':2934,'multiline':False]['text':' If autocommands change buffers under our fingers, forget about','line_number':2939,'multiline':False]['text':' editing the file.','line_number':2940,'multiline':False]['text':' autocmds may abort script processing','line_number':2944,'multiline':False]['text':' Since we are starting to edit a file, consider the filetype to be','line_number':2948,'multiline':False]['text':' unset.  Helps for when an autocommand changes files and expects syntax','line_number':2949,'multiline':False]['text':' highlighting to work in the other file.','line_number':2950,'multiline':False]['text':'
 * other_file	oldbuf
 *  FALSE	FALSE	    re-edit same file, buffer is re-used
 *  FALSE	TRUE	    re-edit same file, nothing changes
 *  TRUE	FALSE	    start editing new file, new buffer
 *  TRUE	TRUE	    start editing in existing buffer (nothing to do)
 ','line_number':2953,'multiline':True]['text':' re-use the buffer','line_number':2960,'multiline':False]['text':' may set b_last_cursor','line_number':2962,'multiline':False]['text':' If the buffer was used before, store the current contents so that','line_number':2975,'multiline':False]['text':' the reload can be undone.  Do not do this if the (empty) buffer is','line_number':2976,'multiline':False]['text':' being re-used for another file.','line_number':2977,'multiline':False]['text':' Sync first so that this is a separate undo-able action.','line_number':2981,'multiline':False]['text':' tell readfile() not to clear or reload undo info','line_number':2992,'multiline':False]['text':' free all things for buffer','line_number':2996,'multiline':False]['text':' If autocommands deleted the buffer we were going to re-edit, give','line_number':2998,'multiline':False]['text':' up and jump to the end.','line_number':2999,'multiline':False]['text':' frees new_name','line_number':3002,'multiline':False]['text':' If autocommands change buffers under our fingers, forget about','line_number':3007,'multiline':False]['text':' re-editing the file.  Should do the buf_clear_file(), but perhaps','line_number':3008,'multiline':False]['text':' the autocommands changed the buffer...','line_number':3009,'multiline':False]['text':' autocmds may abort script processing','line_number':3013,'multiline':False]['text':' clear '[ and '] marks','line_number':3017,'multiline':False]['text':'
 * If we get here we are sure to start editing
 ','line_number':3021,'multiline':True]['text':' Assume success now','line_number':3024,'multiline':False]['text':' If the file name was changed, reset the not-edit flag so that ":write"','line_number':3027,'multiline':False]['text':' works.','line_number':3028,'multiline':False]['text':'
     * Check if we are editing the w_arg_idx file in the argument list.
     ','line_number':3032,'multiline':True]['text':'
	 * Set cursor and init window before reading the file and executing
	 * autocommands.  This allows for the autocommands to position the
	 * cursor.
	 ','line_number':3039,'multiline':True]['text':' It's possible that all lines in the buffer changed.  Need to update','line_number':3047,'multiline':False]['text':' automatic folding for all windows where it's used.','line_number':3048,'multiline':False]['text':' Change directories when the 'acd' option is set.','line_number':3059,'multiline':False]['text':'
	 * Careful: open_buffer() and apply_autocmds() may change the current
	 * buffer and window.
	 ','line_number':3062,'multiline':True]['text':' need to read the file','line_number':3068,'multiline':False]['text':' Don't use the swap-exists dialog for a popup window, can't edit','line_number':3071,'multiline':False]['text':' the buffer.','line_number':3072,'multiline':False]['text':' set/reset 'ro' flag','line_number':3077,'multiline':False]['text':'
	     * Open the buffer and read the file.
	     ','line_number':3079,'multiline':True]['text':' Read the modelines, but only to set window-local options.  Any','line_number':3100,'multiline':False]['text':' buffer-local options have already been set and may have been','line_number':3101,'multiline':False]['text':' changed by the user.','line_number':3102,'multiline':False]['text':' If autocommands change the cursor position or topline, we should','line_number':3113,'multiline':False]['text':' keep it.  Also when it moves within a line. But not when it moves','line_number':3114,'multiline':False]['text':' to the first non-blank.','line_number':3115,'multiline':False]['text':' Even when cursor didn't move we need to recompute topline.','line_number':3130,'multiline':False]['text':' Tell the diff stuff that this buffer is new and/or needs updating.','line_number':3141,'multiline':False]['text':' Also needed when re-editing the same buffer, because unloading will','line_number':3142,'multiline':False]['text':' have removed it as a diff buffer.','line_number':3143,'multiline':False]['text':' If the window options were changed may need to set the spell language.','line_number':3152,'multiline':False]['text':' Can only do this after the buffer has been properly setup.','line_number':3153,'multiline':False]['text':' position set by autocommands','line_number':3160,'multiline':False]['text':' line number from caller or old position','line_number':3166,'multiline':False]['text':' 'sol' is off: Use last known column.','line_number':3172,'multiline':False]['text':' no line number, go to last line in Ex mode','line_number':3181,'multiline':False]['text':' Check if cursors in other windows on the same buffer are still valid','line_number':3189,'multiline':False]['text':'
     * Did not read the file, need to show some info about the file.
     * Do this after setting the cursor.
     ','line_number':3192,'multiline':True]['text':' Obey the 'O' flag in 'cpoptions': overwrite any previous file','line_number':3200,'multiline':False]['text':' message.','line_number':3201,'multiline':False]['text':' wait a bit when overwriting an error msg','line_number':3204,'multiline':False]['text':' force cursor halfway the window','line_number':3235,'multiline':False]['text':' redraw this buffer later','line_number':3239,'multiline':False]['text':' Change directories when the 'acd' option is set and we aren't already in','line_number':3246,'multiline':False]['text':' that directory (should already be done above). Expect getcwd() to be','line_number':3247,'multiline':False]['text':' faster than calling shorten_fnames() unnecessarily.','line_number':3248,'multiline':False]['text':' autoindent for first line','line_number':3296,'multiline':False]['text':'
 * ":insert" and ":append", also used by ":change"
 ','line_number':3298,'multiline':True]['text':' the ! flag toggles autoindent','line_number':3316,'multiline':False]['text':' First autoindent comes from the line we start on','line_number':3320,'multiline':False]['text':' when the buffer is empty need to delete the dummy line','line_number':3327,'multiline':False]['text':' behave like in Insert mode','line_number':3331,'multiline':False]['text':' No getline() function, use the lines that follow. This ends','line_number':3352,'multiline':False]['text':' when there is no more.','line_number':3353,'multiline':False]['text':' Set State to avoid the cursor shape to be set to MODE_INSERT','line_number':3368,'multiline':False]['text':' state when getline() returns.','line_number':3369,'multiline':False]['text':' Using ^ CTRL-D in getexmodeline() makes us repeat the indent.','line_number':3382,'multiline':False]['text':' Look for the "." after automatic indent.','line_number':3386,'multiline':False]['text':' don't use autoindent if nothing was typed.','line_number':3405,'multiline':False]['text':' there are no marks below the inserted lines','line_number':3412,'multiline':False]['text':' "start" is set to eap->line2+1 unless that position is invalid (when','line_number':3431,'multiline':False]['text':' eap->line2 pointed to the end of the buffer and nothing was appended)','line_number':3432,'multiline':False]['text':' "end" is set to lnum when something has been appended, otherwise','line_number':3433,'multiline':False]['text':' it is the same as "start"  -- Acevedo','line_number':3434,'multiline':False]['text':' don't use wait_return() now','line_number':3449,'multiline':False]['text':'
 * ":change"
 ','line_number':3453,'multiline':True]['text':' the ! flag toggles autoindent','line_number':3469,'multiline':False]['text':' nothing to delete','line_number':3475,'multiline':False]['text':' make sure the cursor is not beyond the end of the file now','line_number':3480,'multiline':False]['text':' ":append" on the line above the deleted lines.','line_number':3484,'multiline':False]['text':' Vi compatible: ":z!" uses display height, without a count uses','line_number':3500,'multiline':False]['text':' 'scroll'','line_number':3501,'multiline':False]['text':' bigness could be < 0 if atol(x) overflows.','line_number':3530,'multiline':False]['text':' the number of '-' and '+' multiplies the distance','line_number':3540,'multiline':False]['text':' '+'','line_number':3572,'multiline':False]['text':'
 * Check if the restricted flag is set.
 * If so, give an error message and return TRUE.
 * Otherwise, return FALSE.
 ','line_number':3623,'multiline':True]['text':'
 * Check if the secure flag is set (.exrc or .vimrc in current directory).
 * If so, give an error message and return TRUE.
 * Otherwise, return FALSE.
 ','line_number':3639,'multiline':True]['text':'
     * In the sandbox more things are not allowed, including the things
     * disallowed in secure mode.
     ','line_number':3654,'multiline':True]['text':' previous substitute pattern','line_number':3667,'multiline':False]['text':' call beginline() after ":g"','line_number':3668,'multiline':False]['text':'
 * Flags that are kept between calls to :substitute.
 ','line_number':3670,'multiline':True]['text':' do multiple substitutions per line','line_number':3674,'multiline':False]['text':' ask for confirmation','line_number':3675,'multiline':False]['text':' count only','line_number':3676,'multiline':False]['text':' if false, ignore errors','line_number':3677,'multiline':False]['text':' print last line with subs.','line_number':3678,'multiline':False]['text':' list last line with subs.','line_number':3679,'multiline':False]['text':' list last line with line nr','line_number':3680,'multiline':False]['text':' ignore case flag','line_number':3681,'multiline':False]['text':'
 * Skip over the "sub" part in :s/pat/sub/ where "delimiter" is the separating
 * character.
 ','line_number':3684,'multiline':True]['text':' end delimiter found','line_number':3695,'multiline':False]['text':' replace it with a NUL','line_number':3697,'multiline':False]['text':' skip escaped characters','line_number':3700,'multiline':False]['text':'
 * Perform a substitution from line eap->line1 to line eap->line2 using the
 * command pointed to by eap->arg which should be of the form:
 *
 * /pattern/substitution/{flags}
 *
 * The usual escapes are supported as described in the regexp docs.
 ','line_number':3718,'multiline':True]['text':' remember user specified 'g' flag','line_number':3737,'multiline':False]['text':' remember user specified 'c' flag','line_number':3738,'multiline':False]['text':' init for GCC','line_number':3739,'multiline':False]['text':' first changed line','line_number':3748,'multiline':False]['text':' below last changed line AFTER the','line_number':3749,'multiline':False]['text':' change','line_number':3750,'multiline':False]['text':' number of lines in match','line_number':3753,'multiline':False]['text':' allocated copy of first sub line','line_number':3754,'multiline':False]['text':' cursor in last column when done','line_number':3755,'multiline':False]['text':' use last used regexp','line_number':3775,'multiline':False]['text':' use last substitute regexp','line_number':3777,'multiline':False]['text':' new pattern and substitution','line_number':3779,'multiline':False]['text':' don't accept alphanumeric for separator','line_number':3783,'multiline':False]['text':'
	 * undocumented vi feature:
	 *  "\/sub/" and "\?sub?" use last used search pattern (almost like
	 *  //sub/r).  "\&sub&" use last substitute pattern (like //sub/).
	 ','line_number':3792,'multiline':True]['text':' use last '/' pattern','line_number':3811,'multiline':False]['text':' empty search pattern','line_number':3812,'multiline':False]['text':' remember delimiter character','line_number':3813,'multiline':False]['text':' find the end of the regexp','line_number':3815,'multiline':False]['text':' use last used regexp','line_number':3817,'multiline':False]['text':' remember delimiter character','line_number':3818,'multiline':False]['text':' remember start of search pat','line_number':3819,'multiline':False]['text':' end delimiter found','line_number':3822,'multiline':False]['text':' replace it with a NUL','line_number':3823,'multiline':False]['text':'
	 * Small incompatibility: vi sees '\n' as end of the command, but in
	 * Vim we want to use '\n' to find/substitute a NUL.
	 ','line_number':3826,'multiline':True]['text':' remember the start of the substitution','line_number':3830,'multiline':False]['text':' out of memory','line_number':3834,'multiline':False]['text':' In POSIX vi ":s/pat/%/" uses the previous subst. string.','line_number':3839,'multiline':False]['text':' there is no previous command','line_number':3843,'multiline':False]['text':' out of memory','line_number':3852,'multiline':False]['text':' out of memory','line_number':3860,'multiline':False]['text':' use previous pattern and substitution','line_number':3865,'multiline':False]['text':' there is no previous command','line_number':3867,'multiline':False]['text':' search_regcomp() will use previous pattern','line_number':3872,'multiline':False]['text':' Vi compatibility quirk: repeating with ":s" keeps the cursor in the','line_number':3875,'multiline':False]['text':' last column after using "$".','line_number':3876,'multiline':False]['text':' Recognize ":%s/\n//" and turn it into a join command, which is much','line_number':3880,'multiline':False]['text':' more efficient.','line_number':3881,'multiline':False]['text':' TODO: find a generic solution to make line-joining operations more','line_number':3882,'multiline':False]['text':' efficient, avoid allocating a string that grows in size.','line_number':3883,'multiline':False]['text':' The number of lines joined is the number of lines in the range plus','line_number':3904,'multiline':False]['text':' one.  One less when the last line is included.','line_number':3905,'multiline':False]['text':' put pattern in history','line_number':3920,'multiline':False]['text':'
     * Find trailing options.  When '&' is used, keep old options.
     ','line_number':3927,'multiline':True]['text':' ignore 'gdefault' and 'edcompatible'','line_number':3937,'multiline':False]['text':' default is global on','line_number':3945,'multiline':False]['text':'
	 * Note that 'g' and 'c' are always inverted, also when p_ed is off.
	 * 'r' is never inverted.
	 ','line_number':3960,'multiline':True]['text':' use last used regexp','line_number':3972,'multiline':False]['text':' ignore case','line_number':3986,'multiline':False]['text':' don't ignore case','line_number':3988,'multiline':False]['text':'
     * check for a trailing count
     ','line_number':4000,'multiline':True]['text':'
     * check for trailing command or garbage
     ','line_number':4027,'multiline':True]['text':' if not end-of-line or comment','line_number':4031,'multiline':False]['text':' not executing commands, only parsing','line_number':4042,'multiline':False]['text':' Substitution is not allowed in non-'modifiable' buffer','line_number':4050,'multiline':False]['text':' the 'i' or 'I' flag overrules 'ignorecase' and 'smartcase'','line_number':4064,'multiline':False]['text':'
     * If the substitute pattern starts with "\=" then it's an expression.
     * Make a copy, a recursive function may free it.
     * Otherwise, '~' in the substitute pattern is replaced with the old
     * pattern.  We do it here once to avoid it to be replaced over and over
     * again.
     ','line_number':4072,'multiline':True]['text':'
     * Check for a match on each line.
     ','line_number':4098,'multiline':True]['text':' nr of lines matched below lnum','line_number':4121,'multiline':False]['text':' do it again after joining lines','line_number':4122,'multiline':False]['text':' nr of first sub line','line_number':4124,'multiline':False]['text':'
	     * The new text is build up step by step, to avoid too much
	     * copying.  There are these pieces:
	     * sub_firstline	The old text, unmodified.
	     * copycol		Column in the old text where we started
	     *			looking for a match; from here old text still
	     *			needs to be copied to the new text.
	     * matchcol		Column number of the old text where to look
	     *			for the next match.  It's just after the
	     *			previous match or one further.
	     * prev_matchcol	Column just after the previous match (if any).
	     *			Mostly equal to matchcol, except for the first
	     *			match and after skipping an empty match.
	     * regmatch.*pos	Where the pattern matched in the old text.
	     * new_start	The new text, all that has been produced so
	     *			far.
	     * new_end		The new text, where to append new text.
	     *
	     * lnum		The line number where we found the start of
	     *			the match.  Can be below the line we searched
	     *			when there is a \n before a \zs in the
	     *			pattern.
	     * sub_firstlnum	The line number in the buffer where to look
	     *			for a match.  Can be different from "lnum"
	     *			when the pattern or substitute string contains
	     *			line breaks.
	     *
	     * Special situations:
	     * - When the substitute string contains a line break, the part up
	     *   to the line break is inserted in the text, but the copy of
	     *   the original line is kept.  "sub_firstlnum" is adjusted for
	     *   the inserted lines.
	     * - When the matched pattern contains a line break, the old line
	     *   is taken from the line at the end of the pattern.  The lines
	     *   in the match are deleted later, "sub_firstlnum" is adjusted
	     *   accordingly.
	     *
	     * The new text is built up in new_start[].  It has some extra
	     * room to avoid using alloc()/free() too often.  new_start_len is
	     * the length of the allocated memory at new_start.
	     *
	     * Make a copy of the old line, so it won't be taken away when
	     * updating the screen or handling a multi-line match.  The "old_"
	     * pointers point into this copy.
	     ','line_number':4131,'multiline':True]['text':' At first match, remember current cursor position.','line_number':4180,'multiline':False]['text':'
	     * Loop until nothing more to replace in this line.
	     * 1. Handle match with empty string.
	     * 2. If do_ask is set, ask for confirmation.
	     * 3. substitute the string.
	     * 4. if do_all is set, find next match
	     * 5. break if there isn't another match in this line
	     ','line_number':4187,'multiline':True]['text':' Advance "lnum" to the line where the match starts.  The','line_number':4197,'multiline':False]['text':' match does not start in the first line when there is a line','line_number':4198,'multiline':False]['text':' break before \zs.','line_number':4199,'multiline':False]['text':' Match might be after the last line for "\n\zs" matching at','line_number':4208,'multiline':False]['text':' the end of the last line.','line_number':4209,'multiline':False]['text':' Save the line number of the last change for the final','line_number':4223,'multiline':False]['text':' cursor position (just like Vi).','line_number':4224,'multiline':False]['text':'
		 * 1. Match empty string does not count, except for first
		 * match.  This reproduces the strange vi behaviour.
		 * This also catches endless loops.
		 ','line_number':4228,'multiline':True]['text':' We already were at the end of the line.  Don't look','line_number':4238,'multiline':False]['text':' for a match in this line again.','line_number':4239,'multiline':False]['text':' search for a match at next column','line_number':4243,'multiline':False]['text':' Normally we continue searching for a match just after the','line_number':4252,'multiline':False]['text':' previous match.','line_number':4253,'multiline':False]['text':'
		 * 2. If do_count is set only increase the counter.
		 *    If do_ask is set, ask for confirmation.
		 ','line_number':4257,'multiline':True]['text':' For a multi-line match, put matchcol at the NUL at','line_number':4263,'multiline':False]['text':' the end of the line and set nmatch to one, so that','line_number':4264,'multiline':False]['text':' we continue looking for a match on the next line.','line_number':4265,'multiline':False]['text':' Avoids that ":s/\nB\@=//gc" get stuck.','line_number':4266,'multiline':False]['text':' Skip the substitution, unless an expression is used,','line_number':4276,'multiline':False]['text':' then it is evaluated in the sandbox.','line_number':4277,'multiline':False]['text':' change State to MODE_CONFIRM, so that the mouse works','line_number':4287,'multiline':False]['text':' properly','line_number':4288,'multiline':False]['text':' disable mouse in xterm','line_number':4291,'multiline':False]['text':' When 'cpoptions' contains "u" don't sync undo when','line_number':4296,'multiline':False]['text':' asking for confirmation.','line_number':4297,'multiline':False]['text':'
		     * Loop until 'y', 'n', 'q', CTRL-E or CTRL-Y typed.
		     ','line_number':4301,'multiline':True]['text':' When ":normal" runs out of characters we get','line_number':4337,'multiline':False]['text':' an empty line.  Use "q" to get out of the','line_number':4338,'multiline':False]['text':' loop.','line_number':4339,'multiline':False]['text':' Invert the matched string.','line_number':4354,'multiline':False]['text':' Remove the inversion afterwards.','line_number':4355,'multiline':False]['text':' avoid calling update_screen() in vgetorpeek()','line_number':4359,'multiline':False]['text':' There already was a substitution, we would','line_number':4364,'multiline':False]['text':' like to show this to the user.  We cannot','line_number':4365,'multiline':False]['text':' really update the line, it would change','line_number':4366,'multiline':False]['text':' what matches.  Temporarily replace the line','line_number':4367,'multiline':False]['text':' and change it back afterwards.','line_number':4368,'multiline':False]['text':' Position the cursor relative to the','line_number':4379,'multiline':False]['text':' end of the line, the previous','line_number':4380,'multiline':False]['text':' substitute may have inserted or','line_number':4381,'multiline':False]['text':' deleted characters before the','line_number':4382,'multiline':False]['text':' cursor.','line_number':4383,'multiline':False]['text':' highlight at least one character for /^/','line_number':4398,'multiline':False]['text':' avoid a scroll-up','line_number':4412,'multiline':False]['text':' truncate msg when','line_number':4415,'multiline':False]['text':' needed','line_number':4416,'multiline':False]['text':' write message same highlighting as for','line_number':4418,'multiline':False]['text':' wait_return()','line_number':4419,'multiline':False]['text':' allow scrolling here','line_number':4429,'multiline':False]['text':' don't map this key','line_number':4431,'multiline':False]['text':' allow special keys','line_number':4432,'multiline':False]['text':' clear the question','line_number':4437,'multiline':False]['text':' don't scroll up','line_number':4438,'multiline':False]['text':' restore the line','line_number':4443,'multiline':False]['text':' no hit-return prompt','line_number':4448,'multiline':False]['text':' last: replace and then stop','line_number':4464,'multiline':False]['text':' For a multi-line match, put matchcol at the NUL at','line_number':4486,'multiline':False]['text':' the end of the line and set nmatch to one, so that','line_number':4487,'multiline':False]['text':' we continue looking for a match on the next line.','line_number':4488,'multiline':False]['text':' Avoids that ":%s/\nB\@=//gc" and ":%s/\n/,\r/gc"','line_number':4489,'multiline':False]['text':' get stuck when pressing 'n'.','line_number':4490,'multiline':False]['text':' Move the cursor to the start of the match, so that we can','line_number':4502,'multiline':False]['text':' use "\=col(".").','line_number':4503,'multiline':False]['text':'
		 * 3. substitute the string.
		 ','line_number':4506,'multiline':True]['text':' prevent accidentally changing the buffer by a function','line_number':4514,'multiline':False]['text':' Save flags for recursion.  They can change for e.g.','line_number':4518,'multiline':False]['text':' :s/^/\=execute("s#^##gn")','line_number':4519,'multiline':False]['text':' Disallow changing text or switching window in an expression.','line_number':4522,'multiline':False]['text':' Get length of substitution part, including the NUL.','line_number':4525,'multiline':False]['text':' When it fails sublen is zero.','line_number':4526,'multiline':False]['text':' If getting the substitute string caused an error, don't do','line_number':4535,'multiline':False]['text':' the replacement.','line_number':4536,'multiline':False]['text':' Don't keep flags set by a recursive call.','line_number':4537,'multiline':False]['text':' When the match included the "$" of the last line it may','line_number':4547,'multiline':False]['text':' go beyond the last line of the buffer.','line_number':4548,'multiline':False]['text':' safety check','line_number':4553,'multiline':False]['text':' Need room for:','line_number':4558,'multiline':False]['text':' - result so far in new_start (not for first sub in line)','line_number':4559,'multiline':False]['text':' - original text up to match','line_number':4560,'multiline':False]['text':' - length of substituted part','line_number':4561,'multiline':False]['text':' - original text after match','line_number':4562,'multiline':False]['text':' Adjust text properties here, since we have all information','line_number':4563,'multiline':False]['text':' needed.','line_number':4564,'multiline':False]['text':' When text properties are changed, need to save for','line_number':4574,'multiline':False]['text':' undo first, unless done already.','line_number':4575,'multiline':False]['text':' Offset for column byte number of the text property','line_number':4580,'multiline':False]['text':' in the resulting buffer afterwards.','line_number':4581,'multiline':False]['text':' Props in the first line may be shortened or deleted','line_number':4594,'multiline':False]['text':' Props in the last line may be moved or deleted','line_number':4602,'multiline':False]['text':' When text properties are changed, need to save','line_number':4605,'multiline':False]['text':' for undo first, unless done already.','line_number':4606,'multiline':False]['text':' Copy the text props of the last line, they will be','line_number':4609,'multiline':False]['text':' later appended to the changed line.','line_number':4610,'multiline':False]['text':' TODO: what when we already did this?','line_number':4615,'multiline':False]['text':' After joining the text prop columns will','line_number':4625,'multiline':False]['text':' increase.','line_number':4626,'multiline':False]['text':'
		     * Get some space for a temporary buffer to do the
		     * substitution into (and some extra space to avoid
		     * too many calls to alloc()/free()).
		     ','line_number':4647,'multiline':True]['text':'
		     * Check if the temporary buffer is long enough to do the
		     * substitution into.  If not, make it larger (with a bit
		     * extra to avoid too many calls to alloc()/free()).
		     ','line_number':4660,'multiline':True]['text':'
		 * copy the text up to the part that matched
		 ','line_number':4682,'multiline':True]['text':' Move the cursor to the start of the line, to avoid that it','line_number':4705,'multiline':False]['text':' is beyond the end of the line after the substitution.','line_number':4706,'multiline':False]['text':' For a multi-line match, make a copy of the last matched','line_number':4709,'multiline':False]['text':' line and continue in that one.','line_number':4710,'multiline':False]['text':' When going beyond the last line, stop substituting.','line_number':4716,'multiline':False]['text':' Remember next character to be copied.','line_number':4723,'multiline':False]['text':' Already hit end of the buffer, sub_firstlnum is one','line_number':4728,'multiline':False]['text':' less than what it ought to be.','line_number':4729,'multiline':False]['text':'
		 * Now the trick is to replace CTRL-M chars with a real line
		 * break.  This would make it impossible to insert a CTRL-M in
		 * the text.  The line break can be avoided by preceding the
		 * CTRL-M with a backslash.  To be able to insert a backslash,
		 * they must be doubled in the string and are halved here.
		 * That is Vi compatible.
		 ','line_number':4735,'multiline':True]['text':' remove backslash','line_number':4745,'multiline':False]['text':' When text properties are changed, need to save','line_number':4751,'multiline':False]['text':' for undo first, unless done already.','line_number':4752,'multiline':False]['text':' prepare for undo','line_number':4762,'multiline':False]['text':' truncate up to the CR','line_number':4766,'multiline':False]['text':' all line numbers increase','line_number':4781,'multiline':False]['text':' move the cursor to the new line, like Vi','line_number':4785,'multiline':False]['text':' copy the rest','line_number':4787,'multiline':False]['text':'
		 * 4. If do_all is set, find next match.
		 * Prevent endless loop with patterns that match empty
		 * strings, e.g. :s/$/pat/g or :s/[a-z]* /(&)/g.
		 * But ":s/\n/#/" is OK.
		 ','line_number':4796,'multiline':True]['text':' We already know that we did the last subst when we are at','line_number':4803,'multiline':False]['text':' the end of the line, except that a pattern like','line_number':4804,'multiline':False]['text':' "bar\|\nfoo" may match at the NUL.  "lnum" can be below','line_number':4805,'multiline':False]['text':' "line2" when there is a \zs in the pattern after a line','line_number':4806,'multiline':False]['text':' break.','line_number':4807,'multiline':False]['text':'
		 * Replace the line in the buffer when needed.  This is
		 * skipped when there are more matches.
		 * The check for nmatch_tl is needed for when multi-line
		 * matching must replace the lines before trying to do another
		 * match, otherwise "\@<=" won't work.
		 * When the match starts below where we start searching also
		 * need to replace the line first (using \zs after \n).
		 ','line_number':4817,'multiline':True]['text':'
			 * Copy the rest of the line, that didn't match.
			 * "matchcol" has to be adjusted, we use the end of
			 * the line as reference, because the substitute may
			 * have changed the number of characters.  Same for
			 * "prev_matchcol".
			 ','line_number':4835,'multiline':True]['text':'
			     * Matched lines have now been substituted and are
			     * useless, delete them.  The part after the match
			     * has been appended to new_start, we don't need
			     * it in the buffer.
			     ','line_number':4856,'multiline':True]['text':' nr of lines decreases','line_number':4872,'multiline':False]['text':' When asking, undo is saved each time, must also set','line_number':4876,'multiline':False]['text':' changed flag each time.','line_number':4877,'multiline':False]['text':' free the temp buffer','line_number':4888,'multiline':False]['text':'
		     * 5. break if there isn't another match in this line
		     ','line_number':4900,'multiline':True]['text':' If the match found didn't start where we were','line_number':4905,'multiline':False]['text':' searching, do the next search in the line where we','line_number':4906,'multiline':False]['text':' found the match.','line_number':4907,'multiline':False]['text':' for when substitute was cancelled','line_number':4919,'multiline':False]['text':' free the copy of the original line','line_number':4920,'multiline':False]['text':' Need to subtract the number of added lines from "last_line" to get','line_number':4928,'multiline':False]['text':' the line number before the change (same as adding the number of','line_number':4929,'multiline':False]['text':' deleted lines).','line_number':4930,'multiline':False]['text':' may have to free allocated copy of the line','line_number':4936,'multiline':False]['text':' ":s/pat//n" doesn't move the cursor','line_number':4942,'multiline':False]['text':' Set the '[ and '] marks.','line_number':4950,'multiline':False]['text':' when interactive leave cursor on the match','line_number':4958,'multiline':False]['text':' interrupted','line_number':4977,'multiline':False]['text':' did find something but nothing substituted','line_number':4979,'multiline':False]['text':' nothing found','line_number':4981,'multiline':False]['text':' Cursor position may require updating','line_number':4987,'multiline':False]['text':' Restore the flag values, they can be used for ":&&".','line_number':4994,'multiline':False]['text':'
 * Give message for number of substitutions.
 * Can also be used after a ":global" command.
 * Return TRUE if a message was given.
 ','line_number':4999,'multiline':True]['text':' used 'n' flag for ":s"','line_number':5006,'multiline':False]['text':'
     * Only report substitutions when:
     * - more than 'report' substitutions
     * - command was typed by user, or number of changed lines > 'report'
     * - giving messages is not disabled by 'lazyredraw'
     ','line_number':5008,'multiline':True]['text':' save message to display it after redraw','line_number':5042,'multiline':False]['text':'
 * Execute a global command of the form:
 *
 * g/pattern/X : execute X on all lines where pattern matches
 * v/pattern/X : execute X on all lines where pattern does not match
 *
 * where 'X' is an EX command
 *
 * The command character (as well as the trailing slash) is optional, and
 * is assumed to be 'p' if missing.
 *
 * This is implemented in two passes: first we scan the file for the pattern and
 * set a mark for each line that (not) matches. Secondly we execute the command
 * for each line that has a mark. This is required because after deleting
 * lines we do not know where to search for the next match.
 ','line_number':5065,'multiline':True]['text':' line number according to old situation','line_number':5084,'multiline':False]['text':' first char of cmd: 'v' or 'g'','line_number':5086,'multiline':False]['text':' command argument','line_number':5087,'multiline':False]['text':' delimiter, normally '/'','line_number':5089,'multiline':False]['text':' When nesting the command works on one line.  This allows for','line_number':5096,'multiline':False]['text':' ":g/found/v/notfound/command".','line_number':5097,'multiline':False]['text':' will increment global_busy to break out of the loop','line_number':5101,'multiline':False]['text':' ":global!" is like ":vglobal"','line_number':5106,'multiline':False]['text':' default: use last used regexp','line_number':5111,'multiline':False]['text':'
     * undocumented vi feature:
     *	"\/" and "\?": use previous search pattern.
     *		 "\&": use previous substitute pattern.
     ','line_number':5118,'multiline':True]['text':' use previous substitute pattern','line_number':5132,'multiline':False]['text':' use previous search pattern','line_number':5134,'multiline':False]['text':' get the delimiter','line_number':5149,'multiline':False]['text':' skip delimiter if there is one','line_number':5150,'multiline':False]['text':' remember start of pattern','line_number':5151,'multiline':False]['text':' end delimiter found','line_number':5153,'multiline':False]['text':' replace it with a NUL','line_number':5154,'multiline':False]['text':'
	 * pass 1: set marks for each (not) matching line
	 ','line_number':5174,'multiline':True]['text':' a match on this line?','line_number':5179,'multiline':False]['text':' re-compiling regprog failed','line_number':5183,'multiline':False]['text':'
	 * pass 2: execute the command for each line that has been marked
	 ','line_number':5192,'multiline':True]['text':' clear rest of the marks','line_number':5225,'multiline':False]['text':'
 * Execute "cmd" on lines marked with ml_setmarked().
 ','line_number':5231,'multiline':True]['text':' b_ml.ml_line_count before the command','line_number':5237,'multiline':False]['text':' remember what buffer we started in','line_number':5238,'multiline':False]['text':' line number according to old situation','line_number':5239,'multiline':False]['text':'
     * Set current position only once for a global command.
     * If global_busy is set, setpcmark() will not do anything.
     * If there is an error, global_busy will be incremented.
     ','line_number':5241,'multiline':True]['text':' When the command writes a message, don't overwrite the command.','line_number':5248,'multiline':False]['text':' cursor may be beyond the end of the line','line_number':5266,'multiline':False]['text':' the cursor may not have moved in the text but a change in a previous','line_number':5268,'multiline':False]['text':' line may move it on the screen','line_number':5269,'multiline':False]['text':' If it looks like no message was written, allow overwriting the','line_number':5272,'multiline':False]['text':' command with the report for number of changes.','line_number':5273,'multiline':False]['text':' If substitutes done, report number of substitutes, otherwise report','line_number':5277,'multiline':False]['text':' number of extra or deleted lines.','line_number':5278,'multiline':False]['text':' Don't report extra or deleted lines in the edge case where the buffer','line_number':5279,'multiline':False]['text':' we are in after execution is different from the buffer we started in.','line_number':5280,'multiline':False]['text':'
 * Get the previous substitute pattern.
 ','line_number':5286,'multiline':True]['text':'
 * Set the previous substitute pattern.  "val" must be allocated.
 ','line_number':5295,'multiline':True]['text':' FEAT_VIMINFO','line_number':5304,'multiline':False]['text':'
 * Set up for a tagpreview.
 * Makes the preview window the current window.
 * Return TRUE when it was created.
 ','line_number':5315,'multiline':True]['text':' sync undo when leaving the window','line_number':5322,'multiline':False]['text':' use popup if 'previewpopup' set','line_number':5323,'multiline':False]['text':' use other popup window','line_number':5324,'multiline':False]['text':'
     * If there is already a preview window open, use that one.
     ','line_number':5335,'multiline':True]['text':' When the popup moves or resizes it may reveal part of','line_number':5354,'multiline':False]['text':' another window.  TODO: can this be done more efficiently?','line_number':5355,'multiline':False]['text':'
     * There is no preview window open yet.  Create one.
     ','line_number':5372,'multiline':True]['text':' don't take over 'scrollbind'','line_number':5384,'multiline':False]['text':' and 'cursorbind'','line_number':5385,'multiline':False]['text':' no 'diff'','line_number':5387,'multiline':False]['text':' no 'foldcolumn'','line_number':5390,'multiline':False]['text':'
 * Make the user happy.
 ','line_number':5397,'multiline':True]['text':'
 * ":drop"
 * Opens the first argument in a window.  When there are two or more arguments
 * the argument list is redefined.
 ','line_number':5426,'multiline':True]['text':'
     * Check if the first argument is already being edited in a window.  If
     * so, jump to that window.
     * We would actually need to check all arguments, but that's complicated
     * and mostly only one file is dropped.
     * This also ignores wildcards, since it is very unlikely the user is
     * editing a file name with a wildcard character.
     ','line_number':5442,'multiline':True]['text':'
     * Expanding wildcards may result in an empty argument list.  E.g. when
     * editing "foo.pyc" and ".pyc" is in 'wildignore'.  Assume that we
     * already did an error message for this.
     ','line_number':5452,'multiline':True]['text':' ":tab drop file ...": open a tab for each argument that isn't','line_number':5462,'multiline':False]['text':' edited in a window yet.  It's like ":tab all" but without closing','line_number':5463,'multiline':False]['text':' windows or tabs.','line_number':5464,'multiline':False]['text':' ":drop file ...": Edit the first argument.  Jump to an existing','line_number':5469,'multiline':False]['text':' window if possible, edit in current window if the current buffer','line_number':5470,'multiline':False]['text':' can be abandoned, otherwise open a new window.','line_number':5471,'multiline':False]['text':' reload the file if it is newer','line_number':5484,'multiline':False]['text':'
     * Check whether the current buffer is changed. If so, we will need
     * to split the current window or data could be lost.
     * Skip the check if the 'hidden' option is set, as in this case the
     * buffer won't be lost.
     ','line_number':5493,'multiline':True]['text':' Fake a ":sfirst" or ":first" command edit the first argument.','line_number':5506,'multiline':False]['text':'
 * Skip over the pattern argument of ":vimgrep /pat/[g][j]".
 * Put the start of the pattern in "*s", unless "s" is NULL.
 * If "flags" is not NULL put the flags in it: VGR_GLOBAL, VGR_NOJUMP.
 * If "s" is not NULL terminate the pattern with a NUL.
 * Return a pointer to the char just past the pattern plus flags.
 ','line_number':5517,'multiline':True]['text':'
 * As skip_vimgrep_pat() and store the character overwritten by NUL in "cp"
 * and the pointer to it in "nulp".
 ','line_number':5530,'multiline':True]['text':' ":vimgrep pattern fname"','line_number':5541,'multiline':False]['text':' ":vimgrep /pattern/[g][j] fname"','line_number':5557,'multiline':False]['text':' Truncate the pattern.','line_number':5565,'multiline':False]['text':' Find the flags','line_number':5577,'multiline':False]['text':'
 * List v:oldfiles in a nice way.
 ','line_number':5596,'multiline':True]['text':' output one line at a time','line_number':5626,'multiline':False]['text':' Assume "got_int" was set to truncate the listing.','line_number':5631,'multiline':False]