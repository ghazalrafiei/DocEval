['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * Python extensions by Paul Moore.
 * Changes for Unix by David Leonard.
 *
 * This consists of four parts:
 * 1. Python interpreter main program
 * 2. Python output stream: writes output via [e]msg().
 * 3. Implementation of the Vim module for Python
 * 4. Utility functions for handling the interface between Vim and Python.
 ','line_number':9,'multiline':True]['text':' uncomment this if used with the debug version of python.','line_number':24,'multiline':False]['text':' Checked on 2.7.4.','line_number':25,'multiline':False]['text':' #define Py_DEBUG','line_number':26,'multiline':False]['text':' Note: most of time you can add -DPy_DEBUG to CFLAGS in place of uncommenting','line_number':27,'multiline':False]['text':' uncomment this if used with the debug version of python, but without its','line_number':28,'multiline':False]['text':' allocator','line_number':29,'multiline':False]['text':' #define Py_DEBUG_NO_PYMALLOC','line_number':30,'multiline':False]['text':' Python.h defines _POSIX_THREADS itself (if needed)','line_number':32,'multiline':False]['text':' Python's config.h defines it as well.','line_number':55,'multiline':False]['text':' pyconfig.h defines it as well.','line_number':58,'multiline':False]['text':' pyconfig.h defines it as well.','line_number':61,'multiline':False]['text':' these are NULL for Python 2','line_number':72,'multiline':False]['text':' Defined in python.h - aargh','line_number':76,'multiline':False]['text':' Clash with os_win32.h','line_number':77,'multiline':False]['text':' Perhaps leave this out for Python 2.6, which supports bytes?','line_number':79,'multiline':False]['text':' Use this to be able to generate prototypes without python being used.','line_number':86,'multiline':False]['text':' Parser flags','line_number':118,'multiline':False]['text':' Python 2.3: can invoke ":python" recursively.','line_number':124,'multiline':False]['text':' for generating prototypes','line_number':130,'multiline':False]['text':' This makes if_python.c compile without warnings against Python 2.5','line_number':152,'multiline':False]['text':' on Win32 and Win64.','line_number':153,'multiline':False]['text':'
 * Wrapper defines
 ','line_number':164,'multiline':True]['text':'
 * Pointers for dynamic link
 ','line_number':315,'multiline':True]['text':' Instance of python.dll','line_number':464,'multiline':False]['text':' Imported exception objects','line_number':466,'multiline':False]['text':'
 * Table of name to function pointer of python.
 ','line_number':489,'multiline':True]['text':'
 * Load library and get all pointers.
 * Parameter 'libname' provides name of DLL.
 * Return OK or FAIL.
 ','line_number':663,'multiline':True]['text':' Can't have Python and Python3 loaded at the same time.','line_number':676,'multiline':False]['text':' It causes a crash, because RTLD_GLOBAL is needed for','line_number':677,'multiline':False]['text':' standard C extension libraries of one or both python versions.','line_number':678,'multiline':False]['text':' Load unicode functions separately as only the ucs2 or the ucs4 functions','line_number':710,'multiline':False]['text':' will be present in the library.','line_number':711,'multiline':False]['text':'
 * If python is enabled (there is installed python on Windows system) return
 * TRUE, else FALSE.
 ','line_number':729,'multiline':True]['text':'
 * Load the standard Python exceptions - don't import the symbols from the
 * DLL, as this can cause errors (importing data symbols is not reliable).
 ','line_number':739,'multiline':True]['text':' DYNAMIC_PYTHON','line_number':770,'multiline':False]['text':'
 * Include the code shared with if_python3.c
 ','line_number':819,'multiline':True]['text':'/////////////////////////////////////////////////////','line_number':825,'multiline':False]['text':' Internal function prototypes.','line_number':826,'multiline':False]['text':'/////////////////////////////////////////////////////','line_number':831,'multiline':False]['text':' 1. Python interpreter main program.','line_number':832,'multiline':False]['text':' Python 1.4','line_number':834,'multiline':False]['text':'
 * Suspend a thread of the Python interpreter, other threads are allowed to
 * run.
 ','line_number':841,'multiline':True]['text':'
 * Restore a thread of the Python interpreter, waits for other threads to
 * block.
 ','line_number':851,'multiline':True]['text':' If a crash occurs while doing this, don't try again.','line_number':868,'multiline':False]['text':' enter python','line_number':881,'multiline':False]['text':' enter python','line_number':891,'multiline':False]['text':' The string must not change later, make a copy in static memory.','line_number':929,'multiline':False]['text':' Disable implicit 'import site', because it may cause Vim to exit','line_number':942,'multiline':False]['text':' when it can't be found.','line_number':943,'multiline':False]['text':' 'import site' explicitly.','line_number':950,'multiline':False]['text':' Initialise threads, and below save the state using','line_number':960,'multiline':False]['text':' PyEval_SaveThread.  Without the call to PyEval_SaveThread, thread','line_number':961,'multiline':False]['text':' specific state (such as the system trace hook), will be lost','line_number':962,'multiline':False]['text':' between invocations of Python code.','line_number':963,'multiline':False]['text':' Remove the element from sys.path that was added because of our','line_number':977,'multiline':False]['text':' argv[0] value in PythonMod_Init().  Previously we used an empty','line_number':978,'multiline':False]['text':' string, but depending on the OS we then get an empty entry or','line_number':979,'multiline':False]['text':' the current directory in sys.path.','line_number':980,'multiline':False]['text':' lock is created and acquired in PyEval_InitThreads() and thread','line_number':983,'multiline':False]['text':' state is created in Py_Initialize()','line_number':984,'multiline':False]['text':' there _PyGILState_NoteThreadState() also sets gilcounter to 1','line_number':985,'multiline':False]['text':' (python must have threads enabled!)','line_number':986,'multiline':False]['text':' so the following does both: unlock GIL and save thread state in TLS','line_number':987,'multiline':False]['text':' without deleting thread state','line_number':988,'multiline':False]['text':' We call PythonIO_Flush() here to print any Python errors.','line_number':1000,'multiline':False]['text':' This is OK, as it is possible to call this function even','line_number':1001,'multiline':False]['text':' if PythonIO_Init_io() has not completed successfully (it will','line_number':1002,'multiline':False]['text':' not do anything in this case).','line_number':1003,'multiline':False]['text':'
 * External interface
 ','line_number':1008,'multiline':True]['text':' leave Vim','line_number':1040,'multiline':False]['text':' Python only works properly when the LC_NUMERIC locale is "C".','line_number':1043,'multiline':False]['text':' Need to make a copy, value may change when setting new locale.','line_number':1049,'multiline':False]['text':' enter python','line_number':1058,'multiline':False]['text':' leave python','line_number':1070,'multiline':False]['text':' enter vim','line_number':1081,'multiline':False]['text':'
 * ":python"
 ','line_number':1091,'multiline':True]['text':'
 * ":pyfile"
 ','line_number':1115,'multiline':True]['text':' Have to do it like this. PyRun_SimpleFile requires you to pass a','line_number':1128,'multiline':False]['text':' stdio file pointer, but Vim and the Python DLL are compiled with','line_number':1129,'multiline':False]['text':' different options under Windows, meaning that stdio pointers aren't','line_number':1130,'multiline':False]['text':' compatible between the two. Yuk.','line_number':1131,'multiline':False]['text':'','line_number':1132,'multiline':False]['text':' Put the string "execfile('file')" into buffer. But, we need to','line_number':1133,'multiline':False]['text':' escape any backslashes or single quotes in the file name, so that','line_number':1134,'multiline':False]['text':' Python won't mangle the file name.','line_number':1135,'multiline':False]['text':' size of "execfile('"','line_number':1137,'multiline':False]['text':' If we didn't finish the file name, we hit a buffer overflow','line_number':1146,'multiline':False]['text':' Put in the terminating "')" and a null','line_number':1150,'multiline':False]['text':' Execute the file','line_number':1155,'multiline':False]['text':'/////////////////////////////////////////////////////','line_number':1174,'multiline':False]['text':' 2. Python output stream: writes output via [e]msg().','line_number':1175,'multiline':False]['text':' Implementation functions','line_number':1177,'multiline':False]['text':'/////////////////////////////////////////////////////','line_number':1193,'multiline':False]['text':' 3. Implementation of the Vim module for Python','line_number':1194,'multiline':False]['text':' Window type - Implementation functions','line_number':1196,'multiline':False]['text':' --------------------------------------','line_number':1197,'multiline':False]['text':' Buffer type - Implementation functions','line_number':1201,'multiline':False]['text':' --------------------------------------','line_number':1202,'multiline':False]['text':' Line range type - Implementation functions','line_number':1209,'multiline':False]['text':' --------------------------------------','line_number':1210,'multiline':False]['text':' Current objects type - Implementation functions','line_number':1217,'multiline':False]['text':' -----------------------------------------------','line_number':1218,'multiline':False]['text':' sq_length,    len(x)','line_number':1221,'multiline':False]['text':' BufferConcat, sq_concat, x+y','line_number':1222,'multiline':False]['text':' BufferRepeat, sq_repeat, x*n','line_number':1223,'multiline':False]['text':' sq_item,      x[i]','line_number':1224,'multiline':False]['text':' sq_slice,     x[i:j]','line_number':1225,'multiline':False]['text':' sq_ass_item,  x[i]=v','line_number':1226,'multiline':False]['text':' sq_ass_slice, x[i:j]=v','line_number':1227,'multiline':False]['text':' Buffer object - Implementation','line_number':1233,'multiline':False]['text':'////////////////','line_number':1253,'multiline':False]['text':' sq_length,    len(x)','line_number':1268,'multiline':False]['text':' RangeConcat, ','line_number':1269,'multiline':True]['text':' sq_concat,    x+y','line_number':1269,'multiline':False]['text':' RangeRepeat, ','line_number':1270,'multiline':True]['text':' sq_repeat,    x*n','line_number':1270,'multiline':False]['text':' sq_item,      x[i]','line_number':1271,'multiline':False]['text':' sq_slice,     x[i:j]','line_number':1272,'multiline':False]['text':' sq_ass_item,  x[i]=v','line_number':1273,'multiline':False]['text':' sq_ass_slice, x[i:j]=v','line_number':1274,'multiline':False]['text':' Line range object - Implementation','line_number':1282,'multiline':False]['text':'//////////////','line_number':1297,'multiline':False]['text':' TabPage object - Implementation','line_number':1317,'multiline':False]['text':' Window object - Implementation','line_number':1337,'multiline':False]['text':' Tab page list object - Definitions','line_number':1357,'multiline':False]['text':' sq_length,    len(x)','line_number':1360,'multiline':False]['text':' sq_concat,    x+y','line_number':1361,'multiline':False]['text':' sq_repeat,    x*n','line_number':1362,'multiline':False]['text':' sq_item,      x[i]','line_number':1363,'multiline':False]['text':' sq_slice,     x[i:j]','line_number':1364,'multiline':False]['text':' sq_ass_item,  x[i]=v','line_number':1365,'multiline':False]['text':' sq_ass_slice, x[i:j]=v','line_number':1366,'multiline':False]['text':' Window list object - Definitions','line_number':1374,'multiline':False]['text':' sq_length,    len(x)','line_number':1377,'multiline':False]['text':' sq_concat,    x+y','line_number':1378,'multiline':False]['text':' sq_repeat,    x*n','line_number':1379,'multiline':False]['text':' sq_item,      x[i]','line_number':1380,'multiline':False]['text':' sq_slice,     x[i:j]','line_number':1381,'multiline':False]['text':' sq_ass_item,  x[i]=v','line_number':1382,'multiline':False]['text':' sq_ass_slice, x[i:j]=v','line_number':1383,'multiline':False]['text':' External interface','line_number':1391,'multiline':False]['text':' The special value is removed from sys.path in Python_Init().','line_number':1426,'multiline':False]['text':' Set sys.argv[] to avoid a crash in warn().','line_number':1432,'multiline':False]['text':'////////////////////////////////////////////////////////////////////////','line_number':1447,'multiline':False]['text':' 4. Utility functions for handling the interface between Vim and Python.','line_number':1448,'multiline':False]['text':' Convert a Vim line into a Python string.','line_number':1450,'multiline':False]['text':' All internal newlines are replaced by null characters.','line_number':1451,'multiline':False]['text':'','line_number':1452,'multiline':False]['text':' On errors, the Python exception data is set, and NULL is returned.','line_number':1453,'multiline':False]['text':' Allocate a Python string object, with uninitialised contents. We','line_number':1461,'multiline':False]['text':' must do it this way, so that we can modify the string in place','line_number':1462,'multiline':False]['text':' later. See the Python source, Objects/stringobject.c for details.','line_number':1463,'multiline':False]['text':' Don't generate a prototype for the next function, it generates an error on','line_number':1537,'multiline':False]['text':' newer Python versions.','line_number':1538,'multiline':False]['text':' Python 1.4 ','line_number':1539,'multiline':True]['text':' Python 1.4','line_number':1546,'multiline':False]