['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * register.c: functions for managing registers
 ','line_number':10,'multiline':True]['text':'
 * Registers:
 *	0 = unnamed register, for normal yanks and puts
 *   1..9 = registers '1' to '9', for deletes
 * 10..35 = registers 'a' to 'z' ('A' to 'Z' for appending)
 *     36 = delete register '-'
 *     37 = Selection register '*'. Only if FEAT_CLIPBOARD defined
 *     38 = Clipboard register '+'. Only if FEAT_CLIPBOARD and FEAT_X11 defined
 ','line_number':16,'multiline':True]['text':' ptr to current yankreg','line_number':27,'multiline':False]['text':' TRUE when appending','line_number':28,'multiline':False]['text':' ptr to last written yankreg','line_number':29,'multiline':False]['text':'
 * Keep the last expression line here, for repeating.
 ','line_number':89,'multiline':True]['text':'
 * Get an expression for the "\"=expr1" or "CTRL-R =expr1"
 * Returns '=' when OK, NUL otherwise.
 ','line_number':95,'multiline':True]['text':' use previous line','line_number':107,'multiline':False]['text':'
 * Set the expression for the '=' register.
 * Argument must be an allocated string.
 * "eap" may be used if the next line needs to be checked when evaluating the
 * expression.
 ','line_number':114,'multiline':True]['text':'
 * Get the result of the '=' register expression.
 * Returns a pointer to allocated memory, or NULL for failure.
 ','line_number':128,'multiline':True]['text':' Make a copy of the expression, because evaluating it may cause it to be','line_number':142,'multiline':False]['text':' changed.','line_number':143,'multiline':False]['text':' When we are invoked recursively limit the evaluation to 10 levels.','line_number':148,'multiline':False]['text':' Then return the string as-is.','line_number':149,'multiline':False]['text':'
 * Get the '=' register expression itself, without evaluating it.
 ','line_number':160,'multiline':True]['text':' FEAT_EVAL','line_number':170,'multiline':False]['text':'
 * Check if 'regname' is a valid name of a yank register.
 * Note: There is no check for 0 (default register), caller should do this
 ','line_number':172,'multiline':True]['text':' if TRUE check for writable registers','line_number':179,'multiline':False]['text':'
 * Set y_current and y_append, according to the value of "regname".
 * Cannot handle the '_' register.
 * Must only be called with a valid register name!
 *
 * If regname is 0 and writing, use register 0
 * If regname is 0 and reading, use previous register
 *
 * Return TRUE when the register should be inserted literally (selection or
 * clipboard).
 ','line_number':205,'multiline':True]['text':' When selection is not available, use register 0 instead of '*'','line_number':241,'multiline':False]['text':' When clipboard is not available, use register 0 instead of '+'','line_number':247,'multiline':False]['text':' not 0-9, a-z, A-Z or '-': use register 0','line_number':258,'multiline':False]['text':' remember the register we write into for do_put()','line_number':261,'multiline':False]['text':'
 * Obtain the contents of a "normal" register. The register is made empty.
 * The returned pointer has allocated memory, use put_register() later.
 ','line_number':266,'multiline':True]['text':' make a copy, if FALSE make register empty.','line_number':273,'multiline':False]['text':' When Visual area changed, may have to update selection.  Obtain the','line_number':279,'multiline':False]['text':' selection too.','line_number':280,'multiline':False]['text':' If we run out of memory some or all of the lines are empty.','line_number':303,'multiline':False]['text':'
 * Put "reg" into register "name".  Free any previous contents and "reg".
 ','line_number':319,'multiline':True]['text':' Send text written to clipboard register to the clipboard.','line_number':331,'multiline':False]['text':'
 * return TRUE if the current yank register has type MLINE
 ','line_number':350,'multiline':True]['text':' black hole is always empty','line_number':358,'multiline':False]['text':'
 * Start or stop recording into a yank register.
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':364,'multiline':True]['text':' start recording','line_number':377,'multiline':False]['text':' registers 0-9, a-z and " are allowed','line_number':379,'multiline':False]['text':' stop recording','line_number':390,'multiline':False]['text':' Get the recorded key hits.  K_SPECIAL and CSI will be escaped, this','line_number':392,'multiline':False]['text':' needs to be removed again to put it in a register.  exec_reg then','line_number':393,'multiline':False]['text':' adds the escaping back later.','line_number':394,'multiline':False]['text':' Remove escaping for CSI and K_SPECIAL in multi-byte chars.','line_number':402,'multiline':False]['text':' We don't want to change the default register here, so save and','line_number':405,'multiline':False]['text':' restore the current register name.','line_number':406,'multiline':False]['text':'
 * Stuff string "p" into yank register "regname" as a single line (append if
 * uppercase).	"p" must have been alloced.
 *
 * return FAIL for failure, OK otherwise
 ','line_number':419,'multiline':True]['text':' check for read-only register','line_number':431,'multiline':False]['text':' black hole: don't do anything','line_number':437,'multiline':False]['text':' used to be MLINE, why?','line_number':468,'multiline':False]['text':'
 * Last executed register (@ command)
 ','line_number':476,'multiline':True]['text':'
 * When executing a register as a series of ex-commands, if the
 * line-continuation character is used for a line, then join it with one or
 * more previous lines. Note that lines are processed backwards starting from
 * the last line in the register.
 *
 * Arguments:
 *   lines - list of lines in the register
 *   idx - index of the line starting with \ or "\. Join this line with all the
 *	   immediate predecessor lines that start with a \ and the first line
 *	   that doesn't start with a \. Lines that start with a comment "\
 *	   character are ignored.
 *
 * Returns the concatenated line. The index of the line that should be
 * processed next is returned in idx.
 ','line_number':495,'multiline':True]['text':' search backwards to find the first line of this command.','line_number':524,'multiline':False]['text':' Any line not starting with \ or "\ is the start of the','line_number':525,'multiline':False]['text':' command.','line_number':526,'multiline':False]['text':' join all the lines','line_number':535,'multiline':False]['text':' Adjust the growsize to the current length to','line_number':542,'multiline':False]['text':' speed up concatenating many lines.','line_number':543,'multiline':False]['text':'
 * Execute a yank register: copy it into the stuff buffer.
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':562,'multiline':True]['text':' insert ':' before each line','line_number':570,'multiline':False]['text':' always add '\n' to end of line','line_number':571,'multiline':False]['text':' set "silent" flag in typeahead buffer','line_number':572,'multiline':False]['text':' repeat previous one','line_number':579,'multiline':False]['text':' check for valid regname','line_number':589,'multiline':False]['text':' black hole: don't stuff anything','line_number':601,'multiline':False]['text':' use last command line','line_number':605,'multiline':False]['text':' don't keep the cmdline containing @:','line_number':613,'multiline':False]['text':' Escape all control characters with a CTRL-V','line_number':615,'multiline':False]['text':' When in Visual mode "'<,'>" will be prepended to the command.','line_number':624,'multiline':False]['text':' Remove it when it's already there.','line_number':625,'multiline':False]['text':' use last inserted text','line_number':643,'multiline':False]['text':' Disallow remapping for ":@r".','line_number':660,'multiline':False]['text':' Insert lines into typeahead buffer, from last one to first one.','line_number':663,'multiline':False]['text':' insert NL between lines and after last line if type is MLINE','line_number':671,'multiline':False]['text':' Handle line-continuation for :@<register>','line_number':679,'multiline':False]['text':'
 * If "restart_edit" is not zero, put it in the typeahead buffer, so that it's
 * used only after other typeahead has been processed.
 ','line_number':710,'multiline':True]['text':'
 * Insert register contents "s" into the typeahead buffer, so that it will be
 * executed again.
 * When "esc" is TRUE it is to be taken literally: Escape CSI characters and
 * no remapping.
 ','line_number':737,'multiline':True]['text':' add ':' before the line','line_number':747,'multiline':False]['text':'
 * Insert a yank register: copy it into the Read buffer.
 * Used by CTRL-R command and middle mouse button in insert mode.
 *
 * return FAIL for failure, OK otherwise
 ','line_number':776,'multiline':True]['text':' insert literally, not as if typed','line_number':785,'multiline':False]['text':' It is possible to get into an endless loop by having CTRL-R a in','line_number':793,'multiline':False]['text':' register a and then, in insert mode, doing CTRL-R a.','line_number':794,'multiline':False]['text':' If you hit CTRL-C, the loop will be broken here.','line_number':795,'multiline':False]['text':' check for valid regname','line_number':800,'multiline':False]['text':' insert last inserted text','line_number':808,'multiline':False]['text':' name or number register','line_number':818,'multiline':False]['text':' Insert a newline between lines and after last line if','line_number':836,'multiline':False]['text':' y_type is MLINE.','line_number':837,'multiline':False]['text':'
 * If "regname" is a special register, return TRUE and store a pointer to its
 * value in "argp".
 ','line_number':847,'multiline':True]['text':' return: TRUE when value was allocated','line_number':855,'multiline':False]['text':' give error message when failing','line_number':856,'multiline':False]['text':' file name','line_number':864,'multiline':False]['text':' will give emsg if not set','line_number':866,'multiline':False]['text':' alternate file name','line_number':870,'multiline':False]['text':' may give emsg if not set','line_number':871,'multiline':False]['text':' result of expression','line_number':875,'multiline':False]['text':' last command line','line_number':881,'multiline':False]['text':' last search-pattern','line_number':887,'multiline':False]['text':' last inserted text','line_number':893,'multiline':False]['text':' Filename under cursor','line_number':900,'multiline':False]['text':' Path under cursor, expand via "path"','line_number':901,'multiline':False]['text':' word under cursor','line_number':909,'multiline':False]['text':' WORD (mnemonic All) under cursor','line_number':910,'multiline':False]['text':' Line under cursor','line_number':919,'multiline':False]['text':' black hole: always empty','line_number':927,'multiline':False]['text':'
 * Paste a yank register into the command line.
 * Only for non-special registers.
 * Used by CTRL-R command in command-line mode
 * insert_reg() can't be used here, because special characters from the
 * register contents will be interpreted as commands.
 *
 * return FAIL for failure, OK otherwise
 ','line_number':935,'multiline':True]['text':' Insert text literally instead of "as typed"','line_number':947,'multiline':False]['text':' don't add CR characters','line_number':948,'multiline':False]['text':' Insert ^M between lines and after last line if type is MLINE.','line_number':962,'multiline':False]['text':' Don't do this when "remcr" is TRUE.','line_number':963,'multiline':False]['text':' Check for CTRL-C, in case someone tries to paste a few thousand','line_number':967,'multiline':False]['text':' lines and gets bored.','line_number':968,'multiline':False]['text':'
 * Shift the delete registers: "9 is cleared, "8 becomes "9, etc.
 ','line_number':976,'multiline':True]['text':' free register nine','line_number':985,'multiline':False]['text':' set register one to empty','line_number':991,'multiline':False]['text':' yanked text contents','line_number':1015,'multiline':False]['text':' register name or empty string for unnamed operation','line_number':1021,'multiline':False]['text':' motion type: inclusive or exclusive','line_number':1026,'multiline':False]['text':' kind of operation (yank, delete, change)','line_number':1029,'multiline':False]['text':' register type','line_number':1035,'multiline':False]['text':' selection type - visual or not','line_number':1049,'multiline':False]['text':' Lock the dictionary and its keys','line_number':1052,'multiline':False]['text':' Empty the dictionary, v:event is still valid','line_number':1061,'multiline':False]['text':'
 * set all the yank registers to empty (called from main())
 ','line_number':1066,'multiline':True]['text':'
 * Free "n" lines from the current yank register.
 * Called for normal freeing and in case of error.
 ','line_number':1093,'multiline':True]['text':'
 * Yank the text between "oap->start" and "oap->end" into a yank register.
 * If we are to append (uppercase register), we first yank into a new yank
 * register and then concatenate the old and the new one (so we keep the old
 * one in case of out-of-memory).
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':1116,'multiline':True]['text':' index in y_array[]','line_number':1127,'multiline':False]['text':' copy of y_current','line_number':1128,'multiline':False]['text':' new yank register when appending','line_number':1129,'multiline':False]['text':' current line number','line_number':1131,'multiline':False]['text':' check for read-only register','line_number':1143,'multiline':False]['text':' black hole: nothing to do','line_number':1149,'multiline':False]['text':' op_delete() already set y_current','line_number':1159,'multiline':False]['text':' append to existing contents','line_number':1163,'multiline':False]['text':' free previously yanked lines','line_number':1167,'multiline':False]['text':' If the cursor was in column 1 before and after the movement, and the','line_number':1169,'multiline':False]['text':' operator is not inclusive, the yank is always linewise.','line_number':1170,'multiline':False]['text':' set the yank register type','line_number':1185,'multiline':False]['text':' Visual block mode','line_number':1202,'multiline':False]['text':' set the yank register type','line_number':1203,'multiline':False]['text':' Part of a tab selected -- but don't','line_number':1244,'multiline':False]['text':' double-count it.','line_number':1245,'multiline':False]['text':' Don't add space for double-wide','line_number':1262,'multiline':False]['text':' char; endcol will be on last byte','line_number':1263,'multiline':False]['text':' of multi-byte char.','line_number':1264,'multiline':False]['text':' Special case: inside a single char','line_number':1270,'multiline':False]['text':' NOTREACHED','line_number':1296,'multiline':False]['text':' append the new block to the old block','line_number':1300,'multiline':False]['text':' MLINE overrides MCHAR and MBLOCK','line_number':1313,'multiline':False]['text':' Concatenate the last line of the old block with the first line of','line_number':1316,'multiline':False]['text':' the new block, unless being Vi compatible.','line_number':1317,'multiline':False]['text':' Display message about yank?','line_number':1343,'multiline':False]['text':' Some versions of Vi use ">=" here, some don't...','line_number':1349,'multiline':False]['text':' redisplay now, so message is not deleted','line_number':1360,'multiline':False]['text':' Set "'[" and "']" marks.','line_number':1379,'multiline':False]['text':' If we were yanking to the '*' register, send result to clipboard.','line_number':1390,'multiline':False]['text':' If no register was specified, and "unnamed" in 'clipboard', make a copy','line_number':1391,'multiline':False]['text':' to the '*' register.','line_number':1392,'multiline':False]['text':' Copy the text from register 0 to the clipboard register.','line_number':1399,'multiline':False]['text':' If we were yanking to the '+' register, send result to selection.','line_number':1410,'multiline':False]['text':' Also copy to the '*' register, in case auto-select is off.  But not when','line_number':1411,'multiline':False]['text':' 'clipboard' has "unnamedplus" and not "unnamed"; and not when','line_number':1412,'multiline':False]['text':' deleting and both "unnamedplus" and "unnamed".','line_number':1413,'multiline':False]['text':' Copy the text from register 0 to the clipboard register.','line_number':1421,'multiline':False]['text':' free the allocated lines','line_number':1449,'multiline':False]['text':'
 * Copy a block range into a register.
 * If "exclude_trailing_space" is set, do not copy trailing whitespaces.
 ','line_number':1455,'multiline':True]['text':'
 * Make a copy of the y_current register to register "reg".
 ','line_number':1491,'multiline':True]['text':'
 * Put contents of register "regname" into the text.
 * Caller must check "regname" to be valid!
 * "flags": PUT_FIXINDENT	make indent look nice
 *	    PUT_CURSEND		leave cursor after end of new text
 *	    PUT_LINE		force linewise put (":put")
 *	    PUT_BLOCK_INNER     in block mode, do not add trailing spaces
 ','line_number':1519,'multiline':True]['text':' result for regname "=" when compiled','line_number':1530,'multiline':False]['text':' BACKWARD for 'P', FORWARD for 'p'','line_number':1531,'multiline':False]['text':' init for gcc','line_number':1538,'multiline':False]['text':' index in y_array[]','line_number':1541,'multiline':False]['text':' init for gcc','line_number':1556,'multiline':False]['text':' init for gcc','line_number':1557,'multiline':False]['text':' Adjust register name for "unnamed" in 'clipboard'.','line_number':1569,'multiline':False]['text':' default for '[ mark','line_number':1577,'multiline':False]['text':' default for '] mark','line_number':1578,'multiline':False]['text':' Using inserted text works differently, because the register includes','line_number':1580,'multiline':False]['text':' special characters (newlines, etc.).','line_number':1581,'multiline':False]['text':' Putting the text is done later, so can't really move the cursor to','line_number':1588,'multiline':False]['text':' the next character.  Use "l" to simulate it.','line_number':1589,'multiline':False]['text':' For special registers '%' (file name), '#' (alternate file name) and','line_number':1595,'multiline':False]['text':' ':' (last command line), etc. we have to create a fake yank register.','line_number':1596,'multiline':False]['text':' For compiled code "expr_result" holds the expression result.','line_number':1597,'multiline':False]['text':' Autocommands may be executed when saving lines for undo.  This might','line_number':1604,'multiline':False]['text':' make "y_array" invalid, so we start undo now to avoid that.','line_number':1605,'multiline':False]['text':' For the = register we need to split the string at NL','line_number':1615,'multiline':False]['text':' characters.','line_number':1616,'multiline':False]['text':' Loop twice: count the number of lines and save them.','line_number':1617,'multiline':False]['text':' A trailing '\n' makes the register linewise.','line_number':1633,'multiline':False]['text':' use fake one-line yank register','line_number':1651,'multiline':False]['text':' "p" or "P" in Visual mode: split the lines to put the text in','line_number':1672,'multiline':False]['text':' between.','line_number':1673,'multiline':False]['text':' Must be "p" for a Visual block, put lines below the block.','line_number':1698,'multiline':False]['text':' default for '[ mark','line_number':1702,'multiline':False]['text':' default for '] mark','line_number':1703,'multiline':False]['text':' :put command or "p" in Visual line mode.','line_number':1706,'multiline':False]['text':' Correct line number for closed fold.  Don't move the cursor yet,','line_number':1728,'multiline':False]['text':' u_save() uses it.','line_number':1729,'multiline':False]['text':' In an empty buffer the empty line is going to be replaced, include','line_number':1737,'multiline':False]['text':' it in the saved lines.','line_number':1738,'multiline':False]['text':' for mark_adjust()','line_number':1746,'multiline':False]['text':' Don't need to insert spaces when "p" on the last position of a','line_number':1761,'multiline':False]['text':' tab or "P" on the first position.','line_number':1762,'multiline':False]['text':' Block mode','line_number':1781,'multiline':False]['text':' move to start of next multi-byte character','line_number':1795,'multiline':False]['text':' add a new line','line_number':1835,'multiline':False]['text':' get the old line and advance to the position to insert at','line_number':1843,'multiline':False]['text':' Count a tab for what it's worth (if list mode not on)','line_number':1851,'multiline':False]['text':' line too short, pad with spaces','line_number':1862,'multiline':False]['text':' Only a Tab can be split into spaces.  Other','line_number':1874,'multiline':False]['text':' characters will have to be moved to after the','line_number':1875,'multiline':False]['text':' block, causing misalignment.','line_number':1876,'multiline':False]['text':' calculate number of spaces required to fill right side of','line_number':1886,'multiline':False]['text':' block','line_number':1887,'multiline':False]['text':' Insert the new text.','line_number':1902,'multiline':False]['text':' First check for multiplication overflow.','line_number':1903,'multiline':False]['text':' copy part up to cursor to new line','line_number':1917,'multiline':False]['text':' may insert some spaces before the new text','line_number':1922,'multiline':False]['text':' insert the new text','line_number':1926,'multiline':False]['text':' insert block's trailing spaces only if there's text behind','line_number':1932,'multiline':False]['text':' didn't use these spaces','line_number':1939,'multiline':False]['text':' may insert some spaces after the new text','line_number':1942,'multiline':False]['text':' move the text after the cursor to the end of the line.','line_number':1946,'multiline':False]['text':' Set '[ mark.','line_number':1958,'multiline':False]['text':' adjust '] mark','line_number':1962,'multiline':False]['text':' in Insert mode we might be after the NUL, correct for that','line_number':1975,'multiline':False]['text':' Character or Line mode','line_number':1985,'multiline':False]['text':' if type is MCHAR, FORWARD is the same as BACKWARD on the next','line_number':1988,'multiline':False]['text':' char','line_number':1989,'multiline':False]['text':' put it on the next of the multi-byte character.','line_number':1996,'multiline':False]['text':' Line mode: BACKWARD is the same as FORWARD on the previous line','line_number':2016,'multiline':False]['text':' simple case: insert into one line at a time','line_number':2021,'multiline':False]['text':' init for gcc','line_number':2024,'multiline':False]['text':' "col" is valid for the first line, in following lines','line_number':2037,'multiline':False]['text':' the virtual column needs to be used.  Matters for','line_number':2038,'multiline':False]['text':' multi-byte characters.','line_number':2039,'multiline':False]['text':' multiplication overflow','line_number':2053,'multiline':False]['text':' alloc() gave an error message','line_number':2078,'multiline':False]['text':' compute the byte offset for the last character','line_number':2088,'multiline':False]['text':' Note: this may free "newp"','line_number':2091,'multiline':False]['text':' Place cursor on last putted char.','line_number':2096,'multiline':False]['text':' make sure curwin->w_virtcol is updated','line_number':2099,'multiline':False]['text':' reset lnum to the last visual line','line_number':2108,'multiline':False]['text':' put '] at the first byte of the last character','line_number':2112,'multiline':False]['text':' For "CTRL-O p" in Insert mode, put cursor after last char','line_number':2116,'multiline':False]['text':' Insert at least one line.  When y_type is MCHAR, break the first','line_number':2127,'multiline':False]['text':' line in two.','line_number':2128,'multiline':False]['text':' Split the current line in two at the insert position.','line_number':2134,'multiline':False]['text':' First insert y_array[size - 1] in front of second line.','line_number':2135,'multiline':False]['text':' Then append y_array[0] to first line.','line_number':2136,'multiline':False]['text':' insert second line','line_number':2145,'multiline':False]['text':' copy first part of line','line_number':2154,'multiline':False]['text':' append to first line','line_number':2156,'multiline':False]['text':' Leave # lines at start','line_number':2183,'multiline':False]['text':' Ignore empty lines','line_number':2186,'multiline':False]['text':' remember how many chars were removed','line_number':2197,'multiline':False]['text':' Adjust marks.','line_number':2207,'multiline':False]['text':' note changed text for displaying and folding','line_number':2217,'multiline':False]['text':' Something invoked through changed_lines() has changed the','line_number':2227,'multiline':False]['text':' yank buffer, e.g. a GUI clipboard callback.','line_number':2228,'multiline':False]['text':' Put the '] mark on the first byte of the last inserted character.','line_number':2233,'multiline':False]['text':' Correct the length for change in indent.','line_number':2234,'multiline':False]['text':' ":put": put cursor on last inserted line','line_number':2250,'multiline':False]['text':' put cursor after inserted text','line_number':2256,'multiline':False]['text':' put cursor on first non-blank in first inserted line','line_number':2276,'multiline':False]['text':' put cursor on first inserted character','line_number':2282,'multiline':False]['text':' Make sure the cursor is not after the NUL.','line_number':2290,'multiline':False]['text':' If the cursor is past the end of the line put it at the end.','line_number':2312,'multiline':False]['text':'
 * Return the character name of the register with the given number.
 ','line_number':2316,'multiline':True]['text':'
 * Return the index of the register "" points to.
 ','line_number':2339,'multiline':True]['text':'
 * ":dis" and ":registers": Display the contents of the yank registers.
 ','line_number':2349,'multiline':True]['text':' Highlight title','line_number':2369,'multiline':False]['text':' Star register and plus register contain the same thing.','line_number':2382,'multiline':False]['text':' did not ask for this register','line_number':2386,'multiline':False]['text':' Adjust register name for "unnamed" in 'clipboard'.','line_number':2389,'multiline':False]['text':' When it's a clipboard register, fill it with the current contents','line_number':2390,'multiline':False]['text':' of the clipboard.','line_number':2391,'multiline':False]['text':' do not list register being written to, the','line_number':2409,'multiline':False]['text':' pointer can be freed','line_number':2410,'multiline':False]['text':' show one line at a time','line_number':2448,'multiline':False]['text':' display last inserted text','line_number':2454,'multiline':False]['text':' display last command line','line_number':2463,'multiline':False]['text':' display current file name','line_number':2471,'multiline':False]['text':' display alternate file name','line_number':2480,'multiline':False]['text':' display last search pattern','line_number':2494,'multiline':False]['text':' display last used expression','line_number':2504,'multiline':False]['text':'
 * display a string for do_dis()
 * truncate at end of screen line
 ','line_number':2514,'multiline':True]['text':' if TRUE, ignore trailing ESC','line_number':2521,'multiline':False]['text':'
 * Replace the contents of the '~' register with str.
 ','line_number':2543,'multiline':True]['text':'
 * Return the type of a register.
 * Used for getregtype()
 * Returns MAUTO for error.
 ','line_number':2560,'multiline':True]['text':' file name','line_number':2570,'multiline':False]['text':' alternate file name','line_number':2571,'multiline':False]['text':' expression','line_number':2572,'multiline':False]['text':' last command line','line_number':2573,'multiline':False]['text':' last search-pattern','line_number':2574,'multiline':False]['text':' last inserted text','line_number':2575,'multiline':False]['text':' Filename under cursor','line_number':2576,'multiline':False]['text':' Path under cursor, expand via "path"','line_number':2577,'multiline':False]['text':' word under cursor','line_number':2578,'multiline':False]['text':' WORD (mnemonic All) under cursor','line_number':2579,'multiline':False]['text':' black hole: always empty','line_number':2580,'multiline':False]['text':'
 * When "flags" has GREG_LIST return a list with text "s".
 * Otherwise just return "s".
 ','line_number':2603,'multiline':True]['text':'
 * Return the contents of a register as a single allocated string or as a list.
 * Used for "@r" in expressions and for getreg().
 * Returns NULL for error.
 * Flags:
 *	GREG_NO_EXPR	Do not allow expression register
 *	GREG_EXPR_SRC	For the expression register: return expression itself,
 *			not the result of its evaluation.
 *	GREG_LIST	Return a list of lines instead of a single string.
 ','line_number':2628,'multiline':True]['text':' Don't allow using an expression register inside an expression','line_number':2646,'multiline':False]['text':' "@@" is used for unnamed register','line_number':2656,'multiline':False]['text':' check for valid regname','line_number':2659,'multiline':False]['text':' Compute length of resulting string.','line_number':2698,'multiline':False]['text':' Insert a newline between lines and after last line if','line_number':2703,'multiline':False]['text':' y_type is MLINE.','line_number':2704,'multiline':False]['text':' Copy the lines of the yank register into the string.','line_number':2713,'multiline':False]['text':' Insert a NL between lines and after the last line if y_type is','line_number':2720,'multiline':False]['text':' MLINE.','line_number':2721,'multiline':False]['text':' check for valid reg name','line_number':2738,'multiline':False]['text':' Don't want to change the current (unnamed) register','line_number':2744,'multiline':False]['text':' Send text of clipboard register to the clipboard.','line_number':2761,'multiline':False]['text':' ':let @" = "val"' should change the meaning of the "" register','line_number':2765,'multiline':False]['text':'
 * Store string "str" in register "name".
 * "maxlen" is the maximum number of bytes to use, -1 for all bytes.
 * If "must_append" is TRUE, always append to the register.  Otherwise append
 * if "name" is an uppercase letter.
 * Note: "maxlen" and "must_append" don't work for the "/" register.
 * Careful: 'str' is modified, you may have to use a copy!
 * If "str" ends in '\n' or '\r', use linewise, otherwise use characterwise.
 ','line_number':2771,'multiline':True]['text':' black hole: nothing to do','line_number':2818,'multiline':False]['text':' Special case: '/' search pattern','line_number':2847,'multiline':False]['text':' black hole: nothing to do','line_number':2892,'multiline':False]['text':' FEAT_EVAL','line_number':2903,'multiline':False]['text':'
 * Put a string into a register.  When the register is not empty, the string
 * is appended.
 ','line_number':2906,'multiline':True]['text':' pointer to yank register','line_number':2912,'multiline':False]['text':' MCHAR, MLINE, MBLOCK, MAUTO','line_number':2913,'multiline':False]['text':' string to put in register','line_number':2914,'multiline':False]['text':' length of string','line_number':2915,'multiline':False]['text':' width of Visual block','line_number':2916,'multiline':False]['text':' TRUE if str is char_u **','line_number':2917,'multiline':False]['text':' MCHAR, MLINE or MBLOCK','line_number':2919,'multiline':False]['text':' number of lines added','line_number':2924,'multiline':False]['text':' extra line at the end','line_number':2925,'multiline':False]['text':' append to last line in register','line_number':2926,'multiline':False]['text':' NULL means empty register','line_number':2932,'multiline':False]['text':' Count the number of lines within the string','line_number':2942,'multiline':False]['text':' count extra newline at the end','line_number':2957,'multiline':False]['text':' uncount newline when appending first line','line_number':2962,'multiline':False]['text':' Without any lines make the register empty.','line_number':2966,'multiline':False]['text':' Allocate an array to hold the pointers to the new register lines.','line_number':2973,'multiline':False]['text':' If the register was not empty, move the existing lines to the new array.','line_number':2974,'multiline':False]['text':' out of memory','line_number':2976,'multiline':False]['text':' Find the end of each line and save it into the array.','line_number':2984,'multiline':False]['text':' find the end of the line','line_number':3005,'multiline':False]['text':' i is now length of line','line_number':3012,'multiline':False]['text':' replace NUL with newline','line_number':3037,'multiline':False]['text':' only first line is appended','line_number':3040,'multiline':False]['text':' FEAT_CLIPBOARD || FEAT_EVAL || PROTO','line_number':3053,'multiline':False]