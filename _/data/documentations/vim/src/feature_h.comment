['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved		by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 ','line_number':1,'multiline':True]['text':'
 * feature.h: Defines for optional code and preferences
 *
 * Edit this file to include/exclude parts of Vim, before compiling.
 * The only other file that may be edited is Makefile, it contains machine
 * specific options.
 *
 * To include specific options, change the "#if*" and "#endif" into comments,
 * or uncomment the "#define".
 * To exclude specific options, change the "#define" into a comment.
 ','line_number':8,'multiline':True]['text':'
 * When adding a new feature:
 * - Add a #define below.
 * - Add a message in the table above ex_version().
 * - Add a string to f_has().
 * - Add a feature to ":help feature-list" in doc/builtin.txt.
 * - Add feature to ":help +feature-list" in doc/various.txt.
 * - Add comment for the documentation of commands that use the feature.
 ','line_number':20,'multiline':True]['text':'
 * Basic choices:
 * ==============
 *
 * +tiny		no optional features enabled, not even +eval
 * +normal		a default selection of features enabled
 * +huge		all possible features enabled.
 *
 * When +normal is used, +tiny is also included.  +huge implies +normal, etc.
 ','line_number':30,'multiline':True]['text':'
 * +small is now an alias for +tiny
 ','line_number':41,'multiline':True]['text':'
 * +big is now an alias for +normal
 ','line_number':51,'multiline':True]['text':'
 * Uncomment one of these to override the default.  For unix use a configure
 * argument, see Makefile.
 ','line_number':61,'multiline':True]['text':' #define FEAT_TINY','line_number':66,'multiline':False]['text':' #define FEAT_NORMAL','line_number':67,'multiline':False]['text':' #define FEAT_HUGE','line_number':68,'multiline':False]['text':'
 * For Unix, Mac and Win32 use +huge by default.  These days CPUs are fast and
 * Memory is cheap.
 * Otherwise use +normal
 ','line_number':71,'multiline':True]['text':'
 * Each feature implies including the "smaller" ones.
 ','line_number':84,'multiline':True]['text':'
 * Optional code (see ":help +feature-list")
 * =============
 ','line_number':94,'multiline':True]['text':'
 * These features used to be optional but are now always enabled:
 * +windows		Multiple windows.  Without this there is no help
 *			window and no status lines.
 * +autocmd		Automatic commands
 * +vertsplit		Vertically split windows.
 * +cmdhist		Command line history.
 * +localmap		Mappings and abbreviations local to a buffer.
 * +visual		Visual mode
 * +visualextra		Extra features for Visual mode (mostly block operators).
 * +virtualedit		'virtualedit' option and its implementation
 * +user_commands	Allow the user to define his own commands.
 * +multi_byte		Generic multi-byte character handling.
 * +cmdline_compl	completion of mappings/abbreviations in cmdline mode.
 * +insert_expand	CTRL-N/CTRL-P/CTRL-X in insert mode.
 * +modify_fname	modifiers for file name.  E.g., "%:p:h".
 * +comments		'comments' option.
 * +title		'title' and 'icon' options
 * +jumplist		Jumplist, CTRL-O and CTRL-I commands.
 * +lispindent		lisp indenting (From Eric Fischer).
 * +cindent		C code indenting (From Eric Fischer).
 * +smartindent		smart C code indenting when the 'si' option is set.
 * +textobjects		Text objects: "vaw", "das", etc.
 * +file_in_path	"gf" and "<cfile>" commands.
 * +path_extra		up/downwards searching in 'path' and 'tags'.
 * +wildignore		'wildignore' and 'backupskip' options
 * +wildmenu		'wildmenu' option
 * +builtin_terms	all builtin termcap entries included
 * +float		Floating point variables.
 * +cmdwin		Command line window.
 * +cmdline_info	'showcmd' and 'ruler' options.
 *
 * Obsolete:
 * +tag_old_static	Old style static tags: "file:tag  file  ..".
 *			Support was removed in 8.1.1093.
 * +farsi		Farsi (Persian language) Keymap support.
 *			Removed in patch 8.1.0932
 * +footer		Motif only: Add a message area at the bottom of the
 *			main window area.
 ','line_number':99,'multiline':True]['text':'
 * Message history is fixed at 200 messages.
 ','line_number':140,'multiline':True]['text':'
 * +folding		Fold lines.
 ','line_number':145,'multiline':True]['text':'
 * +digraphs		Digraphs.
 *			In insert mode and on the command line you will be
 *			able to use digraphs. The CTRL-K command will work.
 ','line_number':152,'multiline':True]['text':'
 * +langmap		'langmap' option.  Only useful when you put your
 *			keyboard in a special language mode, e.g. for typing
 *			greek.
 ','line_number':161,'multiline':True]['text':'
 * +keymap		'keymap' option.  Allows you to map typed keys in
 *			Insert mode for a special language.
 ','line_number':170,'multiline':True]['text':' internal backtick expansion','line_number':179,'multiline':False]['text':'
 * +linebreak		'showbreak', 'breakat' and 'linebreak' options.
 *			Also 'numberwidth'.
 ','line_number':182,'multiline':True]['text':'
 * +extra_search	'hlsearch' and 'incsearch' options.
 ','line_number':190,'multiline':True]['text':'
 * +quickfix		Quickfix commands.
 ','line_number':197,'multiline':True]['text':'
 * +find_in_path	"[I" ":isearch" "^W^I", ":checkpath", etc.
 ','line_number':204,'multiline':True]['text':'
 * +rightleft		Right-to-left editing/typing support.
 *			Note that this isn't perfect, but enough users say they
 *			use it to keep supporting it.
 ','line_number':211,'multiline':True]['text':'
 * +arabic		Arabic keymap and shaping support.
 *			Requires FEAT_RIGHTLEFT
 ','line_number':220,'multiline':True]['text':'
 * +emacs_tags		When FEAT_EMACS_TAGS defined: Include support for
 *			emacs style TAGS file.
 ','line_number':233,'multiline':True]['text':'
 * +cscope		Unix only: Cscope support.
 ','line_number':241,'multiline':True]['text':'
 * +eval		Built-in script language and expression evaluation,
 *			":let", ":if", etc.
 ','line_number':248,'multiline':True]['text':'
 * +profile		Profiling for functions and scripts.
 ','line_number':260,'multiline':True]['text':'
 * +reltime		reltime() function
 ','line_number':270,'multiline':True]['text':'
 * +timers		timer_start()
 ','line_number':281,'multiline':True]['text':'
 *			Insert mode completion with 'completefunc'.
 ','line_number':288,'multiline':True]['text':'
 * +printer		":hardcopy" command
 * +postscript		Printing uses PostScript file output.
 ','line_number':295,'multiline':True]['text':'
 * +diff		Displaying diffs in a nice way.
 *			Can be enabled in autoconf already.
 ','line_number':308,'multiline':True]['text':'
 * +statusline		'statusline', 'rulerformat' and special format of
 *			'titlestring' and 'iconstring' options.
 ','line_number':316,'multiline':True]['text':'
 * +byte_offset		'%o' in 'statusline' and builtin functions line2byte()
 *			and byte2line().
 *			Note: Required for Macintosh.
 ','line_number':324,'multiline':True]['text':'
 * +viminfo		reading/writing the viminfo file. Takes about 8Kbyte
 *			of code.
 * VIMINFO_FILE		Location of user .viminfo file (should start with $).
 * VIMINFO_FILE2	Location of alternate user .viminfo file.
 ','line_number':333,'multiline':True]['text':' #define VIMINFO_FILE	"$HOME/foo/.viminfo"','line_number':341,'multiline':False]['text':' #define VIMINFO_FILE2 "~/bar/.viminfo"','line_number':342,'multiline':False]['text':'
 * +syntax		syntax highlighting.  When using this, it's a good
 *			idea to have +eval too.
 ','line_number':345,'multiline':True]['text':'
 * +conceal		'conceal' option.  Depends on syntax highlighting
 *			as this is how the concealed text is defined.
 ','line_number':353,'multiline':True]['text':'
 * +spell		spell checking
 ','line_number':361,'multiline':True]['text':'
 * +cryptv		Encryption (originally by Mohsin Ahmed <mosh@sasi.com>).
 ','line_number':368,'multiline':True]['text':'
 * libsodium - add advanced cryptography support
 ','line_number':375,'multiline':True]['text':'
 * +mksession		":mksession" command.
 *			fully depends on +eval
 ','line_number':382,'multiline':True]['text':'
 * +multi_lang		Multi language support. ":menutrans", ":language", etc.
 * +gettext		Message translations (requires +multi_lang)
 *			(only when "lang" archive unpacked)
 ','line_number':390,'multiline':True]['text':'
 * +multi_byte_ime	Win32 IME input method.  Only for far-east Windows, so
 *			IME can be used to input chars.  Not tested much!
 ','line_number':403,'multiline':True]['text':' #define FEAT_MBYTE_IME','line_number':408,'multiline':False]['text':' Use iconv() when it's available.','line_number':415,'multiline':False]['text':'
 * +xim			X Input Method.  For entering special languages like
 *			chinese and Japanese.
 *			this is for Unix and VMS only.
 ','line_number':420,'multiline':True]['text':' #define FEAT_XIM','line_number':426,'multiline':False]['text':' needed for GTK include files','line_number':430,'multiline':False]['text':' # define X_LOCALE			// for OS with incomplete locale','line_number':434,'multiline':False]['text':' support, like old linux versions.','line_number':435,'multiline':False]['text':'
 * +xfontset		X fontset support.  For outputting wide characters.
 ','line_number':438,'multiline':True]['text':' #  define FEAT_XFONTSET','line_number':445,'multiline':False]['text':'
 * +libcall		libcall() function
 ','line_number':449,'multiline':True]['text':' Using dlopen() also requires dlsym() to be available.','line_number':452,'multiline':False]['text':'
 * +menu		":menu" command
 ','line_number':461,'multiline':True]['text':'
 * popup menu in a terminal
 ','line_number':471,'multiline':True]['text':'
 * sound
 ','line_number':478,'multiline':True]['text':' There are two ways to use XPM.','line_number':488,'multiline':False]['text':'
 * +toolbar		Include code for a toolbar (for the Win32 GUI, GTK
 *			always has it).  But only if menus are enabled.
 ','line_number':494,'multiline':True]['text':'
 * GUI dark theme variant
 ','line_number':513,'multiline':True]['text':'
 * GUI tabline
 ','line_number':520,'multiline':True]['text':'
 * +browse		":browse" command.
 *			or just the ":browse" command modifier
 ','line_number':531,'multiline':True]['text':'
 * On some systems, when we compile with the GUI, we always use it.  On Mac
 * there is no terminal version, and on Windows we can't figure out how to
 * fork one off with :gui.
 ','line_number':543,'multiline':True]['text':'
 * +dialog_gui		Use GUI dialog.
 * +dialog_con		May use Console dialog.
 *			When none of these defined there is no dialog support.
 ','line_number':552,'multiline':True]['text':' need a dialog to show error messages when starting from the desktop','line_number':572,'multiline':False]['text':'
 * +termguicolors	'termguicolors' option.
 ','line_number':586,'multiline':True]['text':'
 * +vartabs		'vartabstop' and 'varsofttabstop' options.
 ','line_number':593,'multiline':True]['text':'
 * Preferences:
 * ============
 ','line_number':600,'multiline':True]['text':'
 * +writebackup		'writebackup' is default on:
 *			Use a backup file while overwriting a file.  But it's
 *			deleted again when 'backup' is not set.  Changing this
 *			is strongly discouraged: You can lose all your
 *			changes when the computer crashes while writing the
 *			file.
 *			VMS note: It does work on VMS as well, but because of
 *			version handling it does not have any purpose.
 *			Overwrite will write to the new version.
 ','line_number':605,'multiline':True]['text':'
 * +xterm_save		The t_ti and t_te entries for the builtin xterm will
 *			be set to save the screen when starting Vim and
 *			restoring it when exiting.
 ','line_number':620,'multiline':True]['text':' #define FEAT_XTERM_SAVE','line_number':625,'multiline':False]['text':'
 * DEBUG		Output a lot of debugging garbage.
 ','line_number':627,'multiline':True]['text':' #define DEBUG','line_number':630,'multiline':False]['text':'
 * STARTUPTIME		Time the startup process.  Writes a file with
 *			timestamps.
 ','line_number':632,'multiline':True]['text':'
 * MEM_PROFILE		Debugging of memory allocation and freeing.
 ','line_number':642,'multiline':True]['text':' #define MEM_PROFILE','line_number':645,'multiline':False]['text':'
 * VIMRC_FILE		Name of the .vimrc file in current dir.
 ','line_number':647,'multiline':True]['text':' #define VIMRC_FILE	".vimrc"','line_number':650,'multiline':False]['text':'
 * EXRC_FILE		Name of the .exrc file in current dir.
 ','line_number':652,'multiline':True]['text':' #define EXRC_FILE	".exrc"','line_number':655,'multiline':False]['text':'
 * GVIMRC_FILE		Name of the .gvimrc file in current dir.
 ','line_number':657,'multiline':True]['text':' #define GVIMRC_FILE	".gvimrc"','line_number':660,'multiline':False]['text':'
 * SESSION_FILE		Name of the default ":mksession" file.
 ','line_number':662,'multiline':True]['text':'
 * USR_VIMRC_FILE	Name of the user .vimrc file.
 * USR_VIMRC_FILE2	Name of alternate user .vimrc file.
 * USR_VIMRC_FILE3	Name of alternate user .vimrc file.
 ','line_number':667,'multiline':True]['text':' #define USR_VIMRC_FILE	"~/foo/.vimrc"','line_number':672,'multiline':False]['text':' #define USR_VIMRC_FILE2	"~/bar/.vimrc"','line_number':673,'multiline':False]['text':' #define USR_VIMRC_FILE3	"$VIM/.vimrc"','line_number':674,'multiline':False]['text':'
 * VIM_DEFAULTS_FILE	Name of the defaults.vim script file
 ','line_number':676,'multiline':True]['text':' #define VIM_DEFAULTS_FILE	"$VIMRUNTIME/defaults.vim"','line_number':679,'multiline':False]['text':'
 * EVIM_FILE		Name of the evim.vim script file
 ','line_number':681,'multiline':True]['text':' #define EVIM_FILE		"$VIMRUNTIME/evim.vim"','line_number':684,'multiline':False]['text':'
 * USR_EXRC_FILE	Name of the user .exrc file.
 * USR_EXRC_FILE2	Name of the alternate user .exrc file.
 ','line_number':686,'multiline':True]['text':' #define USR_EXRC_FILE	"~/foo/.exrc"','line_number':690,'multiline':False]['text':' #define USR_EXRC_FILE2	"~/bar/.exrc"','line_number':691,'multiline':False]['text':'
 * USR_GVIMRC_FILE	Name of the user .gvimrc file.
 * USR_GVIMRC_FILE2	Name of the alternate user .gvimrc file.
 ','line_number':693,'multiline':True]['text':' #define USR_GVIMRC_FILE	"~/foo/.gvimrc"','line_number':697,'multiline':False]['text':' #define USR_GVIMRC_FILE2	"~/bar/.gvimrc"','line_number':698,'multiline':False]['text':' #define USR_GVIMRC_FILE3	"$VIM/.gvimrc"','line_number':699,'multiline':False]['text':'
 * SYS_VIMRC_FILE	Name of the system-wide .vimrc file.
 ','line_number':701,'multiline':True]['text':' #define SYS_VIMRC_FILE	"/etc/vimrc"','line_number':704,'multiline':False]['text':'
 * SYS_GVIMRC_FILE	Name of the system-wide .gvimrc file.
 ','line_number':706,'multiline':True]['text':' #define SYS_GVIMRC_FILE	"/etc/gvimrc"','line_number':709,'multiline':False]['text':'
 * DFLT_HELPFILE	Name of the help file.
 ','line_number':711,'multiline':True]['text':' # define DFLT_HELPFILE	"$VIMRUNTIME/doc/help.txt.gz"','line_number':714,'multiline':False]['text':'
 * File names for:
 * FILETYPE_FILE	used for file type detection
 * FTPLUGIN_FILE	used for loading filetype plugin files
 * INDENT_FILE		used for loading indent files
 * FTOFF_FILE		used for file type detection
 * FTPLUGOF_FILE	used for loading settings files
 * INDOFF_FILE		used for loading indent files
 ','line_number':716,'multiline':True]['text':'
 * SYS_MENU_FILE	Name of the default menu.vim file.
 ','line_number':744,'multiline':True]['text':' # define SYS_MENU_FILE	"$VIMRUNTIME/menu.vim"','line_number':747,'multiline':False]['text':'
 * SYS_OPTWIN_FILE	Name of the default optwin.vim file.
 ','line_number':749,'multiline':True]['text':'
 * SYNTAX_FNAME		Name of a syntax file, where %s is the syntax name.
 ','line_number':756,'multiline':True]['text':' #define SYNTAX_FNAME	"/foo/%s.vim"','line_number':759,'multiline':False]['text':'
 * RUNTIME_DIRNAME	Generic name for the directory of the runtime files.
 ','line_number':761,'multiline':True]['text':'
 * RUNTIME_GLOBAL	Comma-separated list of directory names for global Vim
 *			runtime directories.
 *			Don't define this if the preprocessor can't handle
 *			string concatenation.
 *			Also set by "--with-global-runtime" configure argument.
 ','line_number':768,'multiline':True]['text':' #define RUNTIME_GLOBAL "/etc/vim"','line_number':775,'multiline':False]['text':'
 * RUNTIME_GLOBAL_AFTER	Comma-separated list of directory names for global Vim
 *			runtime after directories.
 *			Don't define this if the preprocessor can't handle
 *			string concatenation.
 *			Also set by "--with-global-runtime" configure argument.
 ','line_number':777,'multiline':True]['text':' #define RUNTIME_GLOBAL_AFTER "/etc/vim/after"','line_number':784,'multiline':False]['text':'
 * MODIFIED_BY		Name of who modified Vim.  Required when distributing
 *			a modified version of Vim.
 *			Also from the "--with-modified-by" configure argument.
 ','line_number':786,'multiline':True]['text':' #define MODIFIED_BY "John Doe"','line_number':791,'multiline':False]['text':'
 * Machine dependent:
 * ==================
 ','line_number':793,'multiline':True]['text':'
 * +fork		Unix only: fork() support (detected by configure)
 * +system		Use system() instead of fork/exec for starting a
 *			shell.  Doesn't work for the GUI!
 ','line_number':798,'multiline':True]['text':' #define USE_SYSTEM','line_number':803,'multiline':False]['text':'
 * +X11			Unix only.  Include code for xterm title saving and X
 *			clipboard.  Only works if HAVE_X11 is also defined.
 ','line_number':805,'multiline':True]['text':'
 * XSMP - X11 Session Management Protocol
 * It may be preferred to disable this if the GUI supports it (e.g.,
 * GNOME/KDE) and implement save-yourself etc. through that, but it may also
 * be cleaner to have all SM-aware vims do the same thing (libSM does not
 * depend upon X11).
 * If your GUI wants to support SM itself, change this ifdef.
 * I'm assuming that any X11 implementation will cope with this for now.
 ','line_number':813,'multiline':True]['text':'
 * +mouse_xterm		Unix only: Include code for xterm mouse handling.
 * +mouse_dec		idem, for Dec mouse handling.
 * +mouse_jsbterm	idem, for Jsbterm mouse handling.
 * +mouse_netterm	idem, for Netterm mouse handling.
 * (none)		MS-DOS mouse support.
 * +mouse_gpm		Unix only: Include code for Linux console mouse
 *			handling.
 * +mouse_pterm		PTerm mouse support for QNX
 * +mouse_sgr		Unix only: Include code for SGR-styled mouse.
 * +mouse_sysmouse	Unix only: Include code for FreeBSD and DragonFly
 *			console mouse handling.
 * +mouse_urxvt		Unix only: Include code for urxvt mouse handling.
 * +mouse		Any mouse support (any of the above enabled).
 *			Always included, since either FEAT_MOUSE_XTERM or
 *			DOS_MOUSE is defined.
 ','line_number':829,'multiline':True]['text':' Amiga console has no mouse support','line_number':846,'multiline':False]['text':'
 * Note: Only one of the following may be defined:
 * FEAT_MOUSE_GPM
 * FEAT_SYSMOUSE
 * FEAT_MOUSE_JSB
 * FEAT_MOUSE_PTERM
 ','line_number':862,'multiline':True]['text':'
 * +mouse_gpm/dyn   Load libgpm dynamically.
 ','line_number':871,'multiline':True]['text':' #  define DYNAMIC_GPM','line_number':875,'multiline':False]['text':' urxvt is a small variation of mouse_xterm, and shares its code','line_number':883,'multiline':False]['text':'
 * +clipboard		Clipboard support.  Always used for the GUI.
 * +xterm_clipboard	Unix only: Include code for handling the clipboard
 *			in an xterm like in the GUI.
 ','line_number':888,'multiline':True]['text':'
 * +dnd		Drag'n'drop support.  Always used for the GTK+ GUI.
 ','line_number':913,'multiline':True]['text':' include code for find/replace dialog','line_number':921,'multiline':False]['text':'
 * +clientserver	Remote control via the remote_send() function
 *			and the --remote argument
 ','line_number':930,'multiline':True]['text':'
 * +autoservername	Automatically generate a servername for clientserver
 *			when --servername is not passed on the command line.
 ','line_number':938,'multiline':True]['text':' Always enabled on MS-Windows.','line_number':944,'multiline':False]['text':' Enable here if you don't use configure.','line_number':947,'multiline':False]['text':' # define FEAT_AUTOSERVERNAME','line_number':948,'multiline':False]['text':'
 * +termresponse	send t_RV to obtain terminal response.  Used for xterm
 *			to check if mouse dragging can be used and if term
 *			codes can be obtained.
 ','line_number':952,'multiline':True]['text':'
 * cursor shape		Adjust the shape of the cursor to the mode.
 * mouse shape		Adjust the shape of the mouse pointer to the mode.
 ','line_number':961,'multiline':True]['text':' Win32 console can change cursor shape','line_number':966,'multiline':False]['text':' GUI and some consoles can change the shape of the cursor.  The code is also','line_number':977,'multiline':False]['text':' needed for the 'mouseshape' and 'concealcursor' options.','line_number':978,'multiline':False]['text':'
 * +ARP			Amiga only. Use arp.library, DOS 2.0 is not required.
 ','line_number':992,'multiline':True]['text':'
 * +ole			Win32 OLE automation: Use Makefile.ovc.
 ','line_number':1000,'multiline':True]['text':'
 * These features can only be included by using a configure argument.  See the
 * Makefile for a line to uncomment.
 * +lua			Lua interface: "--enable-luainterp"
 * +mzscheme		MzScheme interface: "--enable-mzscheme"
 * +perl		Perl interface: "--enable-perlinterp"
 * +python		Python interface: "--enable-pythoninterp"
 * +tcl			TCL interface: "--enable-tclinterp"
 * +netbeans_intg	Netbeans integration
 * +channel		Inter process communication
 * +GUI_Motif		Motif GUI
 ','line_number':1004,'multiline':True]['text':'
 * These features are automatically detected:
 * +terminfo
 * +tgetent
 ','line_number':1017,'multiline':True]['text':'
 * The Netbeans feature requires +eval.
 ','line_number':1023,'multiline':True]['text':'
 * The +channel feature requires +eval.
 ','line_number':1030,'multiline':True]['text':'
 * +terminal		":terminal" command.  Runs a terminal in a window.
 *			requires +channel
 ','line_number':1037,'multiline':True]['text':' simplify the code a bit by enabling +syntax when +terminal is enabled','line_number':1048,'multiline':False]['text':'
 * +autoshelldir	    'autoshelldir' option.
 ','line_number':1052,'multiline':True]['text':'
 * +textprop and +popupwin	Text PROPerties and POPUP windows
 ','line_number':1058,'multiline':True]['text':'
 * +message_window	use a popup for messages when 'cmdheight' is zero
 ','line_number':1065,'multiline':True]['text':' Can limit syntax highlight time to 'redrawtime'.','line_number':1073,'multiline':False]['text':'
 * +signs		Allow signs to be displayed to the left of text lines.
 *			Adds the ":sign" command.
 ','line_number':1078,'multiline':True]['text':'
 * +balloon_eval	Allow balloon expression evaluation. Used with a
 *			debugger and for tooltips.
 *			Only for GUIs where it was implemented.
 ','line_number':1091,'multiline':True]['text':' balloon eval used for toolbar tooltip','line_number':1109,'multiline':False]['text':'
 * +balloon_eval_term	Allow balloon expression evaluation in the terminal.
 ','line_number':1112,'multiline':True]['text':' Motif is X11','line_number':1125,'multiline':False]['text':' NetBeans uses menus.','line_number':1131,'multiline':False]['text':'
 * +autochdir		'autochdir' option.
 ','line_number':1137,'multiline':True]['text':'
 * +persistent_undo	'undofile', 'undodir' options, :wundo and :rundo, and
 * implementation.
 ','line_number':1144,'multiline':True]['text':'
 * +filterpipe
 ','line_number':1152,'multiline':True]['text':'
 * +vtp: Win32 virtual console.
 ','line_number':1160,'multiline':True]['text':'
 * currently Unix only: XATTR support
 ','line_number':1179,'multiline':True]