['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * vim9class.c: Vim9 script class support
 ','line_number':10,'multiline':True]['text':' When not generating protos this is included in proto.h','line_number':19,'multiline':False]['text':'
 * Call this function when a class has been created.  It will be added to the
 * list headed by "first_class".
 ','line_number':27,'multiline':True]['text':'
 * Call this function when a class has been cleared and is about to be freed.
 * It is removed from the list headed by "first_class".
 ','line_number':42,'multiline':True]['text':' update the next class to check if needed','line_number':56,'multiline':False]['text':'
 * Parse a member declaration, both object and class member.
 * Returns OK or FAIL.  When OK then "varname_end" is set to just after the
 * variable name and "type_ret" is set to the declared or detected type.
 * "init_expr" is set to the initialisation expression (allocated), if there is
 * one.  For an interface "init_expr" is NULL.
 ','line_number':61,'multiline':True]['text':' TRUE if "public" seen before "varname"','line_number':73,'multiline':False]['text':' No type specified for the member.  Set it to "any" and the correct','line_number':139,'multiline':False]['text':' type will be set when the object is instantiated.','line_number':140,'multiline':False]['text':' Free the memory pointed by expr_start.','line_number':145,'multiline':False]['text':'
 * Add a member to an object or a class.
 * Returns OK when successful, "init_expr" will be consumed then.
 * Returns FAIL otherwise, caller might need to free "init_expr".
 ','line_number':155,'multiline':True]['text':'
 * Move the class or object members found while parsing a class into the class.
 * "gap" contains the found members.
 * "parent_members" points to the members in the parent class (if any)
 * "parent_count" is the number of members in the parent class
 * "members" will be set to the newly allocated array of members and
 * "member_count" set to the number of members.
 * Returns OK or FAIL.
 ','line_number':184,'multiline':True]['text':' parent members need to be copied','line_number':208,'multiline':False]['text':' new members are moved','line_number':216,'multiline':False]['text':'
 * Convert a member index "idx" of interface "itf" to the member index of class
 * "cl" implementing that interface.
 ','line_number':223,'multiline':True]['text':' If "cl" is the interface or the class that is extended, then the method','line_number':237,'multiline':False]['text':' index can be used directly and there is no need to search for the method','line_number':238,'multiline':False]['text':' index in one of the child classes.','line_number':239,'multiline':False]['text':' The parent class methods are stored after the current class','line_number':259,'multiline':False]['text':' methods.','line_number':260,'multiline':False]['text':' A table follows the i2c for the class','line_number':270,'multiline':False]['text':' "method_offset" is 0, if method is in the current class.  If method','line_number':272,'multiline':False]['text':' is in a parent class, then it is non-zero.','line_number':273,'multiline':False]['text':'
 * Check whether a class named "extends_name" is present.  If the class is
 * valid, then "extends_clp" is set with the class pointer.
 * Returns TRUE if the class name "extends_names" is a valid class.
 ','line_number':277,'multiline':True]['text':' a interface cannot extend a class and a class cannot extend an','line_number':303,'multiline':False]['text':' interface.','line_number':304,'multiline':False]['text':'
 * Check method names in the parent class lineage to make sure the access is
 * the same for overridden methods.
 ','line_number':318,'multiline':True]['text':' When comparing the method names, ignore the access type (public','line_number':349,'multiline':False]['text':' and private methods are considered the same).','line_number':350,'multiline':False]['text':' Method access is different between the super class and','line_number':359,'multiline':False]['text':' the subclass','line_number':360,'multiline':False]['text':'
 * Check whether a object member variable in "objmembers_gap" is a duplicate of
 * a member in any of the extended parent class lineage.  Returns TRUE if there
 * are no duplicates.
 ','line_number':373,'multiline':True]['text':' Validate each member variable','line_number':389,'multiline':False]['text':' Check in all the parent classes in the lineage','line_number':397,'multiline':False]['text':' Compare against all the members in the parent class','line_number':408,'multiline':False]['text':'
 * Compare the variable type of interface variables in "objmembers_gap" against
 * the variable in any of the extended super interface lineage.  Used to
 * compare the variable types when extending interfaces.  Returns TRUE if the
 * variable types are the same.
 ','line_number':428,'multiline':True]['text':' Validate each member variable','line_number':445,'multiline':False]['text':' Check in all the parent classes in the lineage','line_number':452,'multiline':False]['text':' Compare against all the members in the parent class','line_number':463,'multiline':False]['text':' Ensure the type is matching.','line_number':472,'multiline':False]['text':'
 * When extending an abstract class, check whether all the abstract methods in
 * the parent class are implemented.  Returns TRUE if all the methods are
 * implemented.
 ','line_number':490,'multiline':True]['text':' loop == 1: check class methods','line_number':503,'multiline':False]['text':' loop == 2: check object methods','line_number':504,'multiline':False]['text':'
 * Returns TRUE if the interface variable "if_var" is present in the list of
 * variables in "cl_mt" or in the parent lineage of one of the extended classes
 * in "extends_cl".  For a class variable, 'is_class_var' is TRUE.
 ','line_number':549,'multiline':True]['text':' Ensure the access type is same','line_number':572,'multiline':False]['text':' Ensure the type is matching.','line_number':580,'multiline':False]['text':' variable type is not specified.  Use the variable type in the','line_number':583,'multiline':False]['text':' interface.','line_number':584,'multiline':False]['text':'
 * Check the variables of the interface class "ifcl" match object variables
 * ("objmembers_gap") of a class.
 * Returns TRUE if the object variables names are valid.
 ','line_number':612,'multiline':True]['text':'
 * Returns TRUE if the method signature of "if_method" and "cl_method" matches.
 ','line_number':645,'multiline':True]['text':' Ensure the type is matching.','line_number':653,'multiline':False]['text':'
 * Returns TRUE if the interface method "if_ufunc" is present in the list of
 * methods in "cl_fp" or in the parent lineage of one of the extended classes
 * in "extends_cl".  For a class method, 'is_class_method' is TRUE.
 ','line_number':663,'multiline':True]['text':' Ensure the type is matching.','line_number':682,'multiline':False]['text':'
 * Validate that a new class implements all the class/instance methods in the
 * interface "ifcl".  The new class methods are in "classfunctions_gap" and the
 * new object methods are in "objmemthods_gap".  Also validates the method
 * types.
 * Returns TRUE if all the interface class/object methods are implemented in
 * the new class.
 ','line_number':701,'multiline':True]['text':'
 * Validate all the "implements" classes when creating a new class.  The
 * classes are returned in "intf_classes".  The class functions, class members,
 * object methods and object members in the new class are in
 * "classfunctions_gap", "classmembers_gap", "objmethods_gap", and
 * "objmembers_gap" respectively.
 ','line_number':738,'multiline':True]['text':' check the variables of the interface match the members of the class','line_number':781,'multiline':False]['text':' check the functions/methods of the interface match the','line_number':785,'multiline':False]['text':' functions/methods of the class','line_number':786,'multiline':False]['text':'
 * Check no function argument name is used as a class member.
 * (Object members are always accessed with "this." prefix, so no need
 * to check them.)
 ','line_number':796,'multiline':True]['text':' loop 1: class functions, loop 2: object methods','line_number':807,'multiline':False]['text':' Check all the class member names','line_number':821,'multiline':False]['text':'
 * Returns TRUE if 'varname' is a reserved keyword name
 ','line_number':844,'multiline':True]['text':'
 * Returns TRUE if the variable "varname" is already defined either as a class
 * variable or as an object variable.
 ','line_number':861,'multiline':True]['text':' loop == 1: class variables, loop == 2: object variables','line_number':878,'multiline':False]['text':'
 * Returns TRUE if the method "name" is already defined.
 ','line_number':898,'multiline':True]['text':' loop 1: class methods, loop 2: object methods','line_number':909,'multiline':False]['text':'
 * Returns TRUE if the constructor is valid.
 ','line_number':928,'multiline':True]['text':' Constructors are not allowed in abstract classes.','line_number':934,'multiline':False]['text':' A constructor is always static, no need to define it so.','line_number':940,'multiline':False]['text':' A return type should not be specified for the new()','line_number':946,'multiline':False]['text':' constructor method.','line_number':947,'multiline':False]['text':'
 * Update the interface class lookup table for the member index on the
 * interface to the member index in the class implementing the interface.
 * And a lookup table for the object method index on the interface
 * to the object method index in the class implementing the interface.
 * This is also used for updating the lookup table for the extended class
 * hierarchy.
 ','line_number':956,'multiline':True]['text':' Table for members.','line_number':974,'multiline':False]['text':' Table for methods.','line_number':996,'multiline':False]['text':' extended class object method is not overridden by the child class.','line_number':1021,'multiline':False]['text':' Keep the method declared in one of the parent classes in the','line_number':1022,'multiline':False]['text':' lineage.','line_number':1023,'multiline':False]['text':' If "ifcl" is not the immediate parent of "cl", then search in','line_number':1026,'multiline':False]['text':' the intermediate parent classes.','line_number':1027,'multiline':False]['text':'
 * Update the member and object method lookup tables for a new class in the
 * interface class.
 * For each interface add a lookup table for the member index on the interface
 * to the member index in the new class.  And a lookup table for the object
 * method index on the interface to the object method index in the new class.
 ','line_number':1065,'multiline':True]['text':' update the lookup table for all the implemented interfaces','line_number':1075,'multiline':False]['text':' update the lookup table for this interface and all its super','line_number':1080,'multiline':False]['text':' interfaces.','line_number':1081,'multiline':False]['text':' Update the lookup table for the extended class, if any','line_number':1091,'multiline':False]['text':' Update the entire lineage of extended classes.','line_number':1097,'multiline':False]['text':'
 * Add class members to a new class.  Allocate a typval for each class member
 * and initialize it.
 ','line_number':1112,'multiline':True]['text':' Allocate a typval for each class member and initialize it.','line_number':1119,'multiline':False]['text':' If the member variable type is not yet set, then use','line_number':1137,'multiline':False]['text':' the initialization expression type.','line_number':1138,'multiline':False]['text':' TODO: proper default value','line_number':1148,'multiline':False]['text':'
 * Add a default constructor method (new()) to the class "cl".
 ','line_number':1155,'multiline':True]['text':'
 * Add the class methods and object methods to the new class "cl".
 * When extending a class "extends_cl", add the instance methods from the
 * parent class also.
 ','line_number':1212,'multiline':True]['text':' loop 1: class functions, loop 2: object methods','line_number':1224,'multiline':False]['text':' Include object methods from the parent.','line_number':1235,'multiline':False]['text':' Don't include the parent class methods.','line_number':1236,'multiline':False]['text':' Copy instance methods from the parent.','line_number':1261,'multiline':False]['text':' Can't use the same parent function, because "uf_class" is','line_number':1265,'multiline':False]['text':' different and compilation will have a different result.','line_number':1266,'multiline':False]['text':' Put them after the functions in the current class, object','line_number':1267,'multiline':False]['text':' methods may be overruled, then "super.Method()" is used to','line_number':1268,'multiline':False]['text':' find a method from the parent.','line_number':1269,'multiline':False]['text':' If the child class overrides a function from the parent','line_number':1273,'multiline':False]['text':' the signature must be equal.','line_number':1274,'multiline':False]['text':' Set the class pointer on all the functions and object methods.','line_number':1292,'multiline':False]['text':'
 * Handle ":class" and ":abstract class" up to ":endclass".
 * Handle ":interface" up to ":endinterface".
 ','line_number':1307,'multiline':True]['text':' FALSE for :interface','line_number':1314,'multiline':False]['text':' "export class" gets used when creating the class, don't use "is_export"','line_number':1358,'multiline':False]['text':' for the items inside the class.','line_number':1359,'multiline':False]['text':' TODO:','line_number':1363,'multiline':False]['text':'    generics: <Tkey, Tentry>','line_number':1364,'multiline':False]['text':' Name for "extends BaseClass"','line_number':1366,'multiline':False]['text':' Names for "implements SomeInterface"','line_number':1369,'multiline':False]['text':' TODO:','line_number':1376,'multiline':False]['text':'    specifies SomeInterface','line_number':1377,'multiline':False]['text':' list of pointers to allocated types','line_number':1465,'multiline':False]['text':' Growarray with class members declared in the class.','line_number':1468,'multiline':False]['text':' Growarray with functions declared in the class.','line_number':1472,'multiline':False]['text':' Growarray with object members declared in the class.','line_number':1476,'multiline':False]['text':' Growarray with object methods declared in the class.','line_number':1480,'multiline':False]['text':'
     * Go over the body of the class/interface until "endclass" or
     * "endinterface" is found.
     ','line_number':1484,'multiline':True]['text':' Skip empty and comment lines.','line_number':1498,'multiline':False]['text':' "abstract" not supported in an interface','line_number':1562,'multiline':False]['text':' object members (public, read access, private):','line_number':1602,'multiline':False]['text':'	"this._varname"','line_number':1603,'multiline':False]['text':'	"this.varname"','line_number':1604,'multiline':False]['text':'	"public this.varname"','line_number':1605,'multiline':False]['text':' private variables are not supported in an interface','line_number':1626,'multiline':False]['text':' constructors:','line_number':1655,'multiline':False]['text':'	  def new()','line_number':1656,'multiline':False]['text':'	  enddef','line_number':1657,'multiline':False]['text':'	  def newOther()','line_number':1658,'multiline':False]['text':'	  enddef','line_number':1659,'multiline':False]['text':' object methods and class functions:','line_number':1660,'multiline':False]['text':'	  def SomeMethod()','line_number':1661,'multiline':False]['text':'	  enddef','line_number':1662,'multiline':False]['text':'	  static def ClassFunction()','line_number':1663,'multiline':False]['text':'	  enddef','line_number':1664,'multiline':False]['text':' TODO:','line_number':1665,'multiline':False]['text':'	  def <Tval> someMethod()','line_number':1666,'multiline':False]['text':'	  enddef','line_number':1667,'multiline':False]['text':' "public" keyword is not supported when defining an object or','line_number':1675,'multiline':False]['text':' class method','line_number':1676,'multiline':False]['text':' No method name following def','line_number':1683,'multiline':False]['text':' private variables are not supported in an interface','line_number':1712,'multiline':False]['text':' Check the name isn't used already.','line_number':1725,'multiline':False]['text':' class members','line_number':1749,'multiline':False]['text':' class members (public, read access, private):','line_number':1752,'multiline':False]['text':'	"static _varname"','line_number':1753,'multiline':False]['text':'	"static varname"','line_number':1754,'multiline':False]['text':'	"public static varname"','line_number':1755,'multiline':False]['text':' class from "extends" argument','line_number':1796,'multiline':False]['text':'
     * Check a few things before defining the class.
     ','line_number':1798,'multiline':True]['text':' Check the "extends" class is valid.','line_number':1802,'multiline':False]['text':' Check the new object methods to make sure their access (public or','line_number':1807,'multiline':False]['text':' private) is the same as that in the extended class lineage.','line_number':1808,'multiline':False]['text':' Check the new class and object variables are not duplicates of the','line_number':1812,'multiline':False]['text':' variables in the extended class lineage.  If an interface is extending','line_number':1813,'multiline':False]['text':' another interface, then it can duplicate the member variables.','line_number':1814,'multiline':False]['text':' When extending an abstract class, make sure all the abstract methods in','line_number':1823,'multiline':False]['text':' the parent class are implemented.  If the current class is an abstract','line_number':1824,'multiline':False]['text':' class, then there is no need for this check.','line_number':1825,'multiline':False]['text':' Check all "implements" entries are valid.','line_number':1833,'multiline':False]['text':' Check no function argument name is used as a class member.','line_number':1842,'multiline':False]['text':' "endclass" encountered without failures: Create the class.','line_number':1850,'multiline':False]['text':' Add class and object variables to "cl".','line_number':1871,'multiline':False]['text':' Move the "implements" names into the class.','line_number':1888,'multiline':False]['text':' Add a method and member lookup table to each of the interface','line_number':1904,'multiline':False]['text':' classes.','line_number':1905,'multiline':False]['text':' Allocate a typval for each class member and initialize it.','line_number':1910,'multiline':False]['text':' The return type of new() is an object of class "cl"','line_number':1927,'multiline':False]['text':' No new() method was defined, add the default constructor.','line_number':1930,'multiline':False]['text':' Move all the functions into the created class.','line_number':1933,'multiline':False]['text':' TODO:','line_number':1946,'multiline':False]['text':' - Fill hashtab with object members and methods ?','line_number':1947,'multiline':False]['text':' Add the class to the script-local variables.','line_number':1949,'multiline':False]['text':' TODO: handle other context, e.g. in a function','line_number':1950,'multiline':False]['text':' TODO: does uf_hash need to be cleared?','line_number':1951,'multiline':False]['text':'
 * Find member "name" in class "cl", set "member_idx" to the member index and
 * return its type.
 * When "is_object" is TRUE, then look for object members.  Otherwise look for
 * class members.
 * When not found "member_idx" is set to -1 and t_any is returned.
 * Set *p_m ocmmember_T if not NULL
 ','line_number':2027,'multiline':True]['text':' not found (yet)','line_number':2046,'multiline':False]['text':'
 * Given a class or object variable index, return the variable type
 ','line_number':2060,'multiline':True]['text':'
 * Handle ":enum" up to ":endenum".
 ','line_number':2089,'multiline':True]['text':' TODO','line_number':2095,'multiline':False]['text':'
 * Type aliases (:type)
 ','line_number':2098,'multiline':True]['text':' ta->ta_type is freed in clear_type_list()','line_number':2105,'multiline':False]['text':'
 * Handle ":type".  Create an alias for a type specification.
 ','line_number':2117,'multiline':True]['text':' some text after the type','line_number':2180,'multiline':False]['text':' Create a script-local variable for the type alias.','line_number':2200,'multiline':False]['text':' When creating a type alias for a class, use the class type itself to','line_number':2212,'multiline':False]['text':' create the type alias variable.  This is needed to use the type','line_number':2213,'multiline':False]['text':' alias to invoke class methods (e.g. new()) and use class variables.','line_number':2214,'multiline':False]['text':'
 * Returns OK if a member variable named "name" is present in the class "cl".
 * Otherwise returns FAIL.  If found, the member variable typval is set in
 * "rettv".  If "is_object" is TRUE, then the object member variable table is
 * searched.  Otherwise the class member variable table is searched.
 ','line_number':2227,'multiline':True]['text':' The object only contains a pointer to the class, the member values','line_number':2258,'multiline':False]['text':' array follows right after that.','line_number':2259,'multiline':False]['text':'
 * Call an object or class method "name" in class "cl".  The method return
 * value is returned in "rettv".
 ','line_number':2274,'multiline':True]['text':' could be an object or class funcref variable','line_number':2297,'multiline':False]['text':' funcref object variable','line_number':2307,'multiline':False]['text':' funcref class variable','line_number':2313,'multiline':False]['text':' Cannot access a private method outside of a class','line_number':2321,'multiline':False]['text':' Clear the class or object after calling the function, in','line_number':2340,'multiline':False]['text':' case the refcount is one.','line_number':2341,'multiline':False]['text':' Call the user function.  Result goes into rettv;','line_number':2345,'multiline':False]['text':' Clear the previous rettv and the arguments.','line_number':2349,'multiline':False]['text':'
 * Evaluate what comes after a class:
 * - class member: SomeClass.varname
 * - class function: SomeClass.SomeMethod()
 * - class constructor: SomeClass.new()
 * - object member: someObject.varname
 * - object method: someObject.SomeMethod()
 *
 * "*arg" points to the '.'.
 * "*arg" is advanced to after the member name or method call.
 *
 * Returns FAIL or OK.
 ','line_number':2364,'multiline':True]['text':' give error messages','line_number':2382,'multiline':False]['text':' VAR_OBJECT','line_number':2401,'multiline':False]['text':' Invoke the class or object method','line_number':2418,'multiline':False]['text':' Search in the object member variable table and the class member','line_number':2423,'multiline':False]['text':' variable table.','line_number':2424,'multiline':False]['text':' could be a class method or an object method','line_number':2432,'multiline':False]['text':' Private methods are not accessible outside the class','line_number':2437,'multiline':False]['text':'
 * If "arg" points to a class or object method, return it.
 * Otherwise return NULL.
 ','line_number':2470,'multiline':True]['text':'
 * Returns the index of class variable "name" in the class "cl".
 * Returns -1, if the variable is not found.
 * If "namelen" is zero, then it is assumed that "name" is NUL terminated.
 ','line_number':2509,'multiline':True]['text':'
 * Returns a pointer to the class member variable "name" in the class "cl".
 * Returns NULL if the variable is not found.
 * The member variable index is set in "idx".
 ','line_number':2522,'multiline':True]['text':'
 * Returns a pointer to the class method "name" in class "cl".
 * Returns NULL if the method is not found.
 * The method index is set in "idx".
 ','line_number':2557,'multiline':True]['text':'
 * Returns the index of class method "name" in the class "cl".
 * Returns -1, if the method is not found.
 ','line_number':2583,'multiline':True]['text':'
 * Returns the index of object member variable "name" in the class "cl".
 * Returns -1, if the variable is not found.
 * If "namelen" is zero, then it is assumed that "name" is NUL terminated.
 ','line_number':2595,'multiline':True]['text':'
 * Returns a pointer to the object member variable "name" in the class "cl".
 * Returns NULL if the variable is not found.
 * The object member variable index is set in "idx".
 ','line_number':2608,'multiline':True]['text':'
 * Returns a pointer to the object method "name" in class "cl".
 * Returns NULL if the method is not found.
 * The object method index is set in "idx".
 ','line_number':2643,'multiline':True]['text':' Use a separate pointer to avoid that ASAN complains about','line_number':2656,'multiline':False]['text':' uf_name[] only being 4 characters.','line_number':2657,'multiline':False]['text':'
 * Returns the index of object method "name" in the class "cl".
 * Returns -1, if the method is not found.
 ','line_number':2671,'multiline':True]['text':'
 * Lookup a class or object member variable by name.  If v_type is VAR_CLASS,
 * then lookup a class member variable and if it is VAR_OBJECT, then lookup a
 * object member variable.
 *
 * Returns a pointer to the member variable structure if variable is found.
 * Otherwise returns NULL.  The member variable index is set in "*idx".
 ','line_number':2683,'multiline':True]['text':'
 * Find the class that defines the named member. Look up the hierarchy
 * starting at "cl".
 *
 * Return the class that defines the member "name", else NULL.
 * Fill in "p_m", if specified, for ocmember_T in found class.
 ','line_number':2705,'multiline':True]['text':' NOTE: if useful for something could also indirectly return vartype and idx.','line_number':2712,'multiline':False]['text':' Loop assumes if member is not defined in "cl", then it is not','line_number':2722,'multiline':False]['text':' defined in any super class; the last class where it's found is the','line_number':2723,'multiline':False]['text':' class where it is defined. Once the vartype is found, the other','line_number':2724,'multiline':False]['text':' type is no longer checked.','line_number':2725,'multiline':False]['text':' member is not in this or any super class.','line_number':2747,'multiline':False]['text':'
 * Lookup a class or object method by name.  If v_type is VAR_CLASS, then
 * lookup a class method and if it is VAR_OBJECT, then lookup a object method.
 *
 * Returns a pointer to the method structure if variable is found.
 * Otherwise returns NULL.  The method variable index is set in "*idx".
 ','line_number':2756,'multiline':True]['text':'
 * Return TRUE if current context "cctx_arg" is inside class "cl".
 * Return FALSE if not.
 ','line_number':2777,'multiline':True]['text':'
 * Make a copy of an object.
 ','line_number':2791,'multiline':True]['text':'
 * Make a copy of a class.
 ','line_number':2806,'multiline':True]['text':'
 * Free the class "cl" and its contents.
 ','line_number':2821,'multiline':True]['text':' Freeing what the class contains may recursively come back here.','line_number':2827,'multiline':False]['text':' Clear "class_name" first, if it is NULL the class does not need to','line_number':2828,'multiline':False]['text':' be freed.','line_number':2829,'multiline':False]['text':'
 * Unreference a class.  Free it when the reference count goes down to zero.
 ','line_number':2890,'multiline':True]['text':'
 * Go through the list of all classes and free items without "copyID".
 ','line_number':2900,'multiline':True]['text':' Free the class and items it contains.','line_number':2913,'multiline':False]['text':'
 * Call this function when an object has been created.  It will be added to the
 * list headed by "first_object".
 ','line_number':2934,'multiline':True]['text':'
 * Call this function when an object has been cleared and is about to be freed.
 * It is removed from the list headed by "first_object".
 ','line_number':2949,'multiline':True]['text':'
 * Free the contents of an object ignoring the reference count.
 ','line_number':2964,'multiline':True]['text':' Avoid a recursive call, it can happen if "obj" has a circular reference.','line_number':2975,'multiline':False]['text':' the member values are just after the object structure','line_number':2978,'multiline':False]['text':' Remove from the list headed by "first_object".','line_number':2992,'multiline':False]['text':'
 * Unreference an object.
 ','line_number':3009,'multiline':True]['text':'
 * Go through the list of all objects and free items without "copyID".
 ','line_number':3019,'multiline':True]['text':' Free the object contents.  Object itself will be freed later.','line_number':3031,'multiline':False]['text':'
 * Output message which takes a variable name and the class that defines it.
 * "cl" is that class where the name was found. Search "cl"'s hierarchy to
 * find the defining class.
 ','line_number':3053,'multiline':True]['text':'
 * Echo a class or object method not found message.
 ','line_number':3069,'multiline':True]['text':' If this is a class method, then give a different error','line_number':3079,'multiline':False]['text':' If this is an object method, then give a different error','line_number':3089,'multiline':False]['text':'
 * Echo a class or object member not found message.
 ','line_number':3102,'multiline':True]['text':'
 * Return TRUE when the class "cl", its base class or one of the implemented
 * interfaces matches the class "other_cl".
 ','line_number':3131,'multiline':True]['text':' Recursively check the base classes.','line_number':3141,'multiline':False]['text':' Check the implemented interfaces and the super interfaces','line_number':3146,'multiline':False]['text':' check the super interfaces','line_number':3154,'multiline':False]['text':'
 * "instanceof(object, classinfo, ...)" function
 ','line_number':3163,'multiline':True]['text':' FEAT_EVAL','line_number':3197,'multiline':False]