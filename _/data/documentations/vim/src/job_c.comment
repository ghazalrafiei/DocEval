['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 ','line_number':1,'multiline':True]['text':'
 * Implements starting jobs and controlling them.
 ','line_number':9,'multiline':True]['text':'
 * Clear a jobopt_T before using it.
 ','line_number':68,'multiline':True]['text':'
 * Free any members of a jobopt_T.
 ','line_number':90,'multiline':True]['text':'
 * Get the PART_ number from the first character of an option name.
 ','line_number':106,'multiline':True]['text':'
 * Get the option entries from the dict in "tv", parse them and put the result
 * in "opt".
 * Only accept JO_ options in "supported" and JO2_ options in "supported2".
 * If an option value is invalid return FAIL.
 ','line_number':115,'multiline':True]['text':' Must have %d and no other %.','line_number':405,'multiline':False]['text':' Allow empty string, "winpty", "conpty".','line_number':542,'multiline':False]['text':' may not get the error if the GUI didn't start','line_number':584,'multiline':False]['text':' Win32 directories don't have the concept of "executable"','line_number':651,'multiline':False]['text':' The link from the channel to the job doesn't count as a reference,','line_number':755,'multiline':False]['text':' thus don't decrement the refcount of the job.  The reference from','line_number':756,'multiline':False]['text':' the job to the channel does count the reference, decrement it and','line_number':757,'multiline':False]['text':' NULL the reference.  We don't set ch_job_killed, unreferencing the','line_number':758,'multiline':False]['text':' job doesn't mean it stops running.','line_number':759,'multiline':False]['text':'
 * Remove "job" from the list of jobs.
 ','line_number':783,'multiline':True]['text':'
 * Put "job" in a list to be freed later, when it's no longer referenced.
 ','line_number':816,'multiline':True]['text':'
 * Return TRUE if we need to check if the process of "job" has ended.
 ','line_number':855,'multiline':True]['text':'
 * Return TRUE if the channel of "job" is still useful.
 ','line_number':865,'multiline':True]['text':'
 * Return TRUE if the channel of "job" is closeable.
 ','line_number':874,'multiline':True]['text':'
 * Return TRUE if the job should not be freed yet.  Do not free the job when
 * it has not ended yet and there is a "stoponexit" flag, an exit callback
 * or when the associated channel will do something with the job output.
 ','line_number':883,'multiline':True]['text':'
 * Return TRUE when there is any running job that we care about.
 ','line_number':895,'multiline':True]['text':' Unix uses argv[] for the command, other systems use a string.','line_number':913,'multiline':False]['text':'
 * Escape one argument for an external command.
 * Returns the escaped string in allocated memory.  NULL when out of memory.
 ','line_number':919,'multiline':True]['text':' First count the number of extra bytes required.','line_number':933,'multiline':False]['text':' Allocate memory for the result and fill it.','line_number':950,'multiline':False]['text':' add terminating quote and finish with a NUL','line_number':983,'multiline':False]['text':'
 * Build a command line from a list, taking care of escaping.
 * The result is put in gap->ga_data.
 * Returns FAIL when out of memory.
 ','line_number':995,'multiline':True]['text':'
 * NOTE: Must call job_cleanup() only once right after the status of "job"
 * changed to JOB_ENDED (i.e. after job_status() returned "dead" first or
 * mch_detect_ended_job() returned non-NULL).
 * If the job is no longer used it will be removed from the list of jobs, and
 * deleted a bit later.
 ','line_number':1024,'multiline':True]['text':' Ready to cleanup the job.','line_number':1037,'multiline':False]['text':' When only channel-in is kept open, close explicitly.','line_number':1040,'multiline':False]['text':' Invoke the exit callback. Make sure the refcount is > 0.','line_number':1049,'multiline':False]['text':' Do not free the job in case the close callback of the associated channel','line_number':1066,'multiline':False]['text':' isn't invoked yet and may get information by job_info().','line_number':1067,'multiline':False]['text':' The job was already unreferenced and the associated channel was','line_number':1069,'multiline':False]['text':' detached, now that it ended it can be freed. However, a caller might','line_number':1070,'multiline':False]['text':' still use it, thus free it a bit later.','line_number':1071,'multiline':False]['text':'
 * Mark references in jobs that are still useful.
 ','line_number':1075,'multiline':True]['text':'
 * Dereference "job".  Note that after this "job" may have been freed.
 ','line_number':1095,'multiline':True]['text':' Do not free the job if there is a channel where the close callback','line_number':1104,'multiline':False]['text':' may get the job info.','line_number':1105,'multiline':False]['text':' Do not free the job when it has not ended yet and there is a','line_number':1109,'multiline':False]['text':' "stoponexit" flag or an exit callback.','line_number':1110,'multiline':False]['text':' Do remove the link to the channel, otherwise it hangs','line_number':1117,'multiline':False]['text':' around until Vim exits. See job_free() for refcount.','line_number':1118,'multiline':False]['text':' Free the channel and ordinary items it contains, but don't','line_number':1136,'multiline':False]['text':' recurse into Lists, Dictionaries etc.','line_number':1137,'multiline':False]['text':' Free the job struct itself.','line_number':1156,'multiline':False]['text':'
 * Allocate a job.  Sets the refcount to one and sets options default.
 ','line_number':1162,'multiline':True]['text':'
 * Called when Vim is exiting: kill all jobs that have the "stoponexit" flag.
 ','line_number':1210,'multiline':True]['text':'
 * Return TRUE when there is any job that has an exit callback and might exit,
 * which means job_check_ended() should be called more often.
 ','line_number':1223,'multiline':True]['text':' Only should check if the channel has been closed, if the channel is','line_number':1233,'multiline':False]['text':' open the job won't exit.','line_number':1234,'multiline':False]['text':'
 * Called once in a while: check if any jobs that seem useful have ended.
 * Returns TRUE if a job did end.
 ','line_number':1244,'multiline':True]['text':' be quick if there are no jobs to check','line_number':1254,'multiline':False]['text':' NOTE: mch_detect_ended_job() must only return a job of which the','line_number':1260,'multiline':False]['text':' status was just set to JOB_ENDED.','line_number':1261,'multiline':False]['text':' may add "job" to jobs_to_free','line_number':1267,'multiline':False]['text':' Actually free jobs that were cleaned up.','line_number':1270,'multiline':False]['text':'
 * Create a job and return it.  Implements job_start().
 * "argv_arg" is only for Unix.
 * When "argv_arg" is NULL then "argvars" is used.
 * The returned job has a refcount of one.
 * Returns NULL when out of memory.
 ','line_number':1281,'multiline':True]['text':' Default mode is NL.','line_number':1319,'multiline':False]['text':' Check that when io is "file" that there is a file name.','line_number':1329,'multiline':False]['text':' check that we can find the buffer before starting the job','line_number':1344,'multiline':False]['text':' Make a copy of argv_arg for job->jv_argv.','line_number':1383,'multiline':False]['text':' Command is a string.','line_number':1397,'multiline':False]['text':' Empty command is invalid.','line_number':1422,'multiline':False]['text':' Save the command used to start the job.','line_number':1440,'multiline':False]['text':' If the channel is reading from a buffer, write lines now.','line_number':1468,'multiline':False]['text':'
 * Get the status of "job" and invoke the exit callback when needed.
 * The returned string is not allocated.
 ','line_number':1486,'multiline':True]['text':' No need to check, dead is dead.','line_number':1496,'multiline':False]['text':'
 * Send a signal to "job".  Implements job_stop().
 * When "type" is not NULL use this for the type.
 * Otherwise use argvars[1] for the type.
 ','line_number':1509,'multiline':True]['text':' Assume that only "kill" will kill the job.','line_number':1546,'multiline':False]['text':' We don't try freeing the job, obviously the caller still has a','line_number':1550,'multiline':False]['text':' reference to it.','line_number':1551,'multiline':False]['text':' Add a new line for the prompt before invoking the callback, so that','line_number':1564,'multiline':False]['text':' text can always be inserted above the last line.','line_number':1565,'multiline':False]['text':'
 * Return TRUE when the interrupt callback was invoked.
 ','line_number':1586,'multiline':True]['text':' don't skip executing commands','line_number':1601,'multiline':False]['text':'
 * Return the effective prompt for the specified buffer.
 ','line_number':1607,'multiline':True]['text':'
 * Return the effective prompt for the current buffer.
 ','line_number':1618,'multiline':True]['text':'
 * Prepare for prompt mode: Make sure the last line has the prompt text.
 * Move the cursor to this line.
 ','line_number':1628,'multiline':True]['text':' prompt is missing, insert it or append a line with it','line_number':1642,'multiline':False]['text':' Insert always starts after the prompt, allow editing text after it.','line_number':1652,'multiline':False]['text':' Make sure the cursor is in a valid position.','line_number':1661,'multiline':False]['text':'
 * Return TRUE if the cursor is in the editable position of the prompt line.
 ','line_number':1665,'multiline':True]['text':'
 * "prompt_setcallback({buffer}, {callback})" function
 ','line_number':1675,'multiline':True]['text':'
 * "prompt_setinterrupt({buffer}, {callback})" function
 ','line_number':1704,'multiline':True]['text':'
 * "prompt_getprompt({buffer})" function
 ','line_number':1734,'multiline':True]['text':' return an empty string by default, e.g. it's not a prompt buffer','line_number':1742,'multiline':False]['text':'
 * "prompt_setprompt({buffer}, {text})" function
 ','line_number':1759,'multiline':True]['text':'
 * Get the job from the argument.
 * Returns NULL if the job is invalid.
 ','line_number':1784,'multiline':True]['text':'
 * "job_getchannel()" function
 ','line_number':1805,'multiline':True]['text':'
 * Implementation of job_info().
 ','line_number':1826,'multiline':True]['text':'
 * Implementation of job_info() to return info for all jobs.
 ','line_number':1878,'multiline':True]['text':'
 * "job_info()" function
 ','line_number':1897,'multiline':True]['text':'
 * "job_setoptions()" function
 ','line_number':1918,'multiline':True]['text':'
 * "job_start()" function
 ','line_number':1941,'multiline':True]['text':'
 * "job_status()" function
 ','line_number':1959,'multiline':True]['text':' A job that never started returns "fail".','line_number':1970,'multiline':False]['text':'
 * "job_stop()" function
 ','line_number':1986,'multiline':True]['text':'
 * Get a string with information about the job in "varp" in "buf".
 * "buf" must be at least NUMBUFLEN long.
 ','line_number':2004,'multiline':True]['text':' fall-back','line_number':2031,'multiline':False]['text':' FEAT_JOB_CHANNEL','line_number':2037,'multiline':False]