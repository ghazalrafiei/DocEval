['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * screen.c: Lower level code for displaying on the screen.
 *
 * Output to the screen (console, terminal emulator or GUI window) is minimized
 * by remembering what is already on the screen, and only updating the parts
 * that changed.
 *
 * ScreenLines[off]  Contains a copy of the whole screen, as it is currently
 *		     displayed (excluding text written by external commands).
 * ScreenAttrs[off]  Contains the associated attributes.
 * ScreenCols[off]   Contains the virtual columns in the line. -1 means not
 *		     available or before buffer text, MAXCOL means after the
 *		     end of the line.
 *
 * LineOffset[row]   Contains the offset into ScreenLines*[], ScreenAttrs[]
 *		     and ScreenCols[] for each line.
 * LineWraps[row]    Flag for each line whether it wraps to the next line.
 *
 * For double-byte characters, two consecutive bytes in ScreenLines[] can form
 * one character which occupies two display cells.
 * For UTF-8 a multi-byte character is converted to Unicode and stored in
 * ScreenLinesUC[].  ScreenLines[] contains the first byte only.  For an ASCII
 * character without composing chars ScreenLinesUC[] will be 0 and
 * ScreenLinesC[][] is not used.  When the character occupies two display
 * cells the next byte in ScreenLines[] is 0.
 * ScreenLinesC[][] contain up to 'maxcombine' composing characters
 * (drawn on top of the first character).  There is 0 after the last one used.
 * ScreenLines2[] is only used for euc-jp to store the second byte if the
 * first byte is 0x8e (single-width character).
 *
 * The screen_*() functions write to the screen and handle updating
 * ScreenLines[].
 ','line_number':10,'multiline':True]['text':'
 * The attributes that are actually active for writing to the screen.
 ','line_number':46,'multiline':True]['text':' Ugly global: overrule attribute used by screen_char()','line_number':60,'multiline':False]['text':'
 * Return TRUE if the cursor line in window "wp" may be concealed, according
 * to the 'concealcursor' option.
 ','line_number':64,'multiline':True]['text':'
 * Check if the cursor line needs to be redrawn because of 'concealcursor'.
 * To be called after changing the state, "was_concealed" is the value of
 * "conceal_cursor_line()" before the change.
 * "
 ','line_number':88,'multiline':True]['text':' Need to recompute cursor column, e.g., when starting Visual mode','line_number':103,'multiline':False]['text':' without concealing.','line_number':104,'multiline':False]['text':' When concealing now w_wcol will be computed wrong, keep the previous','line_number':107,'multiline':False]['text':' value, it will be updated in win_line().','line_number':108,'multiline':False]['text':'
 * Get 'wincolor' attribute for window "wp".  If not set and "wp" is a popup
 * window then get the "Pmenu" highlight attribute.
 ','line_number':114,'multiline':True]['text':' PmenuSel','line_number':129,'multiline':False]['text':' Pmenu','line_number':131,'multiline':False]['text':'
 * Call screen_fill() with the columns adjusted for 'rightleft' if needed.
 * Return the new offset.
 ','line_number':137,'multiline':True]['text':'
 * Clear lines near the end the window and mark the unused lines with "c1".
 * use "c2" as the filler character.
 * When "draw_margin" is TRUE then draw the sign, fold and number columns.
 ','line_number':171,'multiline':True]['text':' draw the fold column','line_number':198,'multiline':False]['text':' draw the sign column','line_number':204,'multiline':False]['text':' draw the number column','line_number':210,'multiline':False]['text':'
 * Compute the width of the foldcolumn.  Based on 'foldcolumn' and how much
 * space is available for window "wp", minus "col".
 ','line_number':237,'multiline':True]['text':'
 * Fill the foldcolumn at "p" for window "wp".
 * Only to be called when 'foldcolumn' > 0.
 * Returns the number of bytes stored in 'p'. When non-multibyte characters are
 * used for the fold column markers, this is equal to 'fdc' setting. Otherwise,
 * this will be greater than 'fdc'.
 ','line_number':253,'multiline':True]['text':' TRUE of FALSE','line_number':264,'multiline':False]['text':' current line number','line_number':265,'multiline':False]['text':' Init to all spaces.','line_number':276,'multiline':False]['text':' If the column is too narrow, we start at the lowest level that','line_number':282,'multiline':False]['text':' fits and use numbers to indicate the depth.','line_number':283,'multiline':False]['text':' rollback length and the character','line_number':313,'multiline':False]['text':' for a multibyte character, erase all the bytes','line_number':316,'multiline':False]['text':' FEAT_FOLDING','line_number':326,'multiline':False]['text':'
 * Return if the composing characters at "off_from" and "off_to" differ.
 * Only to be used when ScreenLinesUC[off_from] != 0.
 ','line_number':328,'multiline':True]['text':'
 * Check whether the given character needs redrawing:
 * - the (first byte of the) character is different
 * - the attributes are different
 * - the character is multi-byte and the next byte is different
 * - the character is two cells wide and the second cell differs.
 ','line_number':347,'multiline':True]['text':'
 * Return the index in ScreenLines[] for the current screen line.
 ','line_number':378,'multiline':True]['text':'
 * Return TRUE if this position has a higher level popup or this cell is
 * transparent in the current popup.
 ','line_number':389,'multiline':True]['text':'
 * Reset the highlighting.  Used before clearing the screen.
 ','line_number':405,'multiline':True]['text':' Use a code that will reset gui.highlight_mask in','line_number':413,'multiline':False]['text':' gui_stop_highlight().','line_number':414,'multiline':False]['text':' Use attributes that is very unlikely to appear in text.','line_number':418,'multiline':False]['text':'
 * Return TRUE if the character at "row" / "col" is under the popup menu and it
 * will be redrawn soon or it is under another popup.
 ','line_number':422,'multiline':True]['text':' Popup windows with zindex higher than POPUPMENU_ZINDEX go on top.','line_number':429,'multiline':False]['text':'
 * Move one "cooked" screen line to the screen, but only the characters that
 * have actually changed.  Handle insert/delete character.
 * "coloff" gives the first column on the screen for this line.
 * "endcol" gives the columns where valid characters are.
 * "clear_width" is the width of the window.  It's > 0 if the rest of the line
 * needs to be cleared, negative otherwise.
 * "flags" can have bits:
 * SLF_POPUP	    popup window
 * SLF_RIGHTLEFT    rightleft window:
 *    When TRUE and "clear_width" > 0, clear columns 0 to "endcol"
 *    When FALSE and "clear_width" > 0, clear columns "endcol" to "clear_width"
 ','line_number':443,'multiline':True]['text':' force update rest of the line','line_number':471,'multiline':False]['text':' bool: does character need redraw?','line_number':472,'multiline':False]['text':' For GUI when while-loop empty','line_number':474,'multiline':False]['text':' redraw_this for next character','line_number':477,'multiline':False]['text':' TRUE if character changed','line_number':479,'multiline':False]['text':' TRUE if next character changed','line_number':480,'multiline':False]['text':' 1: normal char','line_number':483,'multiline':False]['text':' 2: occupies two display cells','line_number':484,'multiline':False]['text':' Check for illegal row and col, just in case.','line_number':486,'multiline':False]['text':' Clear rest first, because it's left of the text.','line_number':504,'multiline':False]['text':' FEAT_RIGHTLEFT','line_number':523,'multiline':False]['text':' First char of a popup window may go on top of the right half of a','line_number':526,'multiline':False]['text':' double-wide character. Clear the left half to avoid it getting the popup','line_number':527,'multiline':False]['text':' window background color.','line_number':528,'multiline':False]['text':' If the next character was bold, then redraw the current character to','line_number':561,'multiline':False]['text':' remove any pixels that might have spilt over into us.  This only','line_number':562,'multiline':False]['text':' happens in the GUI.','line_number':563,'multiline':False]['text':' With MS-Windows antialiasing may also cause pixels to spill over','line_number':564,'multiline':False]['text':' from a previous character, no matter attributes, always redraw if a','line_number':565,'multiline':False]['text':' character changed.','line_number':566,'multiline':False]['text':' Do not redraw if under the popup menu.','line_number':578,'multiline':False]['text':'
	     * Special handling when 'xs' termcap flag set (hpterm):
	     * Attributes for characters are stored at the position where the
	     * cursor is when writing the highlighting code.  The
	     * start-highlighting code must be written with the cursor on the
	     * first highlighted character.  The stop-highlighting code must
	     * be written with the cursor just after the last highlighted
	     * character.
	     * Overwriting a character doesn't remove its highlighting.  Need
	     * to clear the rest of the line, and force redrawing it
	     * completely.
	     ','line_number':584,'multiline':True]['text':'
		 * Need to remove highlighting attributes here.
		 ','line_number':604,'multiline':True]['text':' clear rest of this screen line','line_number':608,'multiline':False]['text':' don't know where cursor is now','line_number':609,'multiline':False]['text':' force redraw of rest of the line','line_number':610,'multiline':False]['text':' or else next char would miss out','line_number':611,'multiline':False]['text':'
		 * If the previous character was highlighted, need to stop
		 * highlighting at this character.
		 ','line_number':613,'multiline':True]['text':' highlighting has stopped','line_number':624,'multiline':False]['text':' Check if overwriting a double-byte with a single-byte or','line_number':628,'multiline':False]['text':' the other way around requires another character to be','line_number':629,'multiline':False]['text':' redrawn.  For UTF-8 this isn't needed, because comparing','line_number':630,'multiline':False]['text':' ScreenLinesUC[] is sufficient.','line_number':631,'multiline':False]['text':' Writing a single-cell character over a double-cell','line_number':636,'multiline':False]['text':' character: need to redraw the next cell.','line_number':637,'multiline':False]['text':' Writing the second half of a double-cell character over','line_number':646,'multiline':False]['text':' a double-cell character: need to redraw the second','line_number':647,'multiline':False]['text':' cell.','line_number':648,'multiline':False]['text':' When writing a single-width character over a double-width','line_number':656,'multiline':False]['text':' character and at the end of the redrawn text, need to clear out','line_number':657,'multiline':False]['text':' the right half of the old character.','line_number':658,'multiline':False]['text':' Also required when writing the right half of a double-width','line_number':659,'multiline':False]['text':' char over the left half of an existing one.','line_number':660,'multiline':False]['text':' The bold trick makes a single column of pixels appear in the','line_number':685,'multiline':False]['text':' next character.  When a bold character is removed, the next','line_number':686,'multiline':False]['text':' character should be redrawn too.  This happens for our own GUI','line_number':687,'multiline':False]['text':' and for some xterms.','line_number':688,'multiline':False]['text':' MS-Windows antialiasing may spill over to the next character,','line_number':709,'multiline':False]['text':' redraw that one if this one changed, no matter attributes.','line_number':710,'multiline':False]['text':' For simplicity set the attributes of second half of a','line_number':716,'multiline':False]['text':' double-wide character equal to the first half.','line_number':717,'multiline':False]['text':'
		 * Don't output stop-highlight when moving the cursor, it will
		 * stop the highlighting when it should continue.
		 ','line_number':734,'multiline':True]['text':' Clear the second half of a double-wide character of which the left','line_number':755,'multiline':False]['text':' half was overwritten with a single-wide character.','line_number':756,'multiline':False]['text':' blank out the rest of the line','line_number':773,'multiline':False]['text':'
	     * In the GUI, clearing the rest of the line may leave pixels
	     * behind if the first character cleared was bold.  Some bold
	     * fonts spill over the left.  In this case we redraw the previous
	     * character too.  If we didn't skip any blanks above, then we
	     * only redraw if the character wasn't already redrawn anyway.
	     ','line_number':785,'multiline':True]['text':' for utf-8, ScreenLines[char_offset + 1] == 0 means','line_number':800,'multiline':False]['text':' that its width is 2.','line_number':801,'multiline':False]['text':' find previous character by counting from first','line_number':805,'multiline':False]['text':' column and get its width.','line_number':806,'multiline':False]['text':' no separator for popup window','line_number':841,'multiline':False]['text':' For a window that has a right neighbor, draw the separator char','line_number':845,'multiline':False]['text':' right of the window contents.  But not on top of a popup window.','line_number':846,'multiline':False]['text':'
 * Mirror text "str" for right-left displaying.
 * Only works for single-byte characters (e.g., numbers).
 ','line_number':881,'multiline':True]['text':'
 * Draw the verticap separator right of window "wp" starting with line "row".
 ','line_number':900,'multiline':True]['text':' draw the vertical separator right of this window','line_number':912,'multiline':False]['text':'
 * Return TRUE if the status line of window "wp" is connected to the status
 * line of the window right of it.  If not, then it's a vertical separator.
 * Only call if (wp->w_vsep_width != 0).
 ','line_number':919,'multiline':True]['text':'
 * Get the value to show for the language mappings, active 'keymap'.
 ','line_number':948,'multiline':True]['text':' format string containing one %s item','line_number':954,'multiline':False]['text':' buffer for the result','line_number':955,'multiline':False]['text':' length of buffer','line_number':956,'multiline':False]['text':' must be writable','line_number':970,'multiline':False]['text':'
 * Redraw the status line or ruler of window "wp".
 * When "wp" is NULL redraw the tab pages line from 'tabline'.
 ','line_number':995,'multiline':True]['text':' TRUE or FALSE','line_number':1002,'multiline':False]['text':' There is a tiny chance that this gets called recursively: When','line_number':1024,'multiline':False]['text':' redrawing a status line triggers redrawing the ruler or tabline.','line_number':1025,'multiline':False]['text':' Avoid trouble by not allowing recursion.','line_number':1026,'multiline':False]['text':' setup environment for the task at hand','line_number':1031,'multiline':False]['text':' Use 'tabline'.  Always at the first line of the screen.','line_number':1034,'multiline':False]['text':' advance past any leading group spec - implicit in ru_col','line_number':1053,'multiline':False]['text':' writing in last column may cause scrolling','line_number':1071,'multiline':False]['text':' Temporarily reset 'cursorbind', we don't want a side effect from moving','line_number':1095,'multiline':False]['text':' the cursor away and back.','line_number':1096,'multiline':False]['text':' Make a copy, because the statusline may include a function call that','line_number':1101,'multiline':False]['text':' might change the option value and free the memory.','line_number':1102,'multiline':False]['text':' Make all characters printable.','line_number':1110,'multiline':False]['text':' fill up with "fillchar"','line_number':1118,'multiline':False]['text':'
     * Draw each snippet with the specified highlighting.
     ','line_number':1127,'multiline':True]['text':' Fill the TabPageIdxs[] array for clicking in the tab pagesline.','line_number':1160,'multiline':False]['text':' FEAT_STL_OPT','line_number':1181,'multiline':False]['text':'
 * Output a single character directly to the screen and update ScreenLines.
 ','line_number':1183,'multiline':True]['text':'
 * Get a single character directly from ScreenLines into "bytes", which must
 * have a size of "MB_MAXBYTES + 1".
 * If "attrp" is not NULL, return the character's attribute in "*attrp".
 ','line_number':1201,'multiline':True]['text':' safety check','line_number':1211,'multiline':False]['text':'
 * Return TRUE if composing characters for screen posn "off" differs from
 * composing characters in "u8cc".
 * Only to be used when ScreenLinesUC[off] != 0.
 ','line_number':1236,'multiline':True]['text':'
 * Put string '*text' on the screen at position 'row' and 'col', with
 * attributes 'attr', and update ScreenLines[] and ScreenAttrs[].
 * Note: only outputs within one row, message is truncated at screen boundary!
 * Note: if ScreenLines[], row and/or col is invalid, nothing is done.
 ','line_number':1256,'multiline':True]['text':'
 * Like screen_puts(), but output "text[len]".  When "len" is -1 output up to
 * a NUL.
 ','line_number':1272,'multiline':True]['text':' previous Arabic character','line_number':1296,'multiline':False]['text':' Safety check. The check for negative row and column is to fix issue','line_number':1304,'multiline':False]['text':' #4102. TODO: find out why row/col could be negative.','line_number':1305,'multiline':False]['text':' When drawing over the right half of a double-wide char clear out the','line_number':1312,'multiline':False]['text':' left half.  Only needed in a terminal.','line_number':1313,'multiline':False]['text':' redraw the previous cell, make it empty','line_number':1329,'multiline':False]['text':' force the cell at "col" to be redrawn','line_number':1332,'multiline':False]['text':' check if this is the first byte of a multibyte','line_number':1342,'multiline':False]['text':' enc_utf8','line_number':1352,'multiline':False]['text':' Do Arabic shaping.','line_number':1361,'multiline':False]['text':' Past end of string to be displayed.','line_number':1364,'multiline':False]['text':' Only 1 cell left, but character requires 2 cells:','line_number':1385,'multiline':False]['text':' display a '>' in the last column to avoid wrapping.','line_number':1386,'multiline':False]['text':' The bold trick makes a single row of pixels appear in the next','line_number':1413,'multiline':False]['text':' character.  When a bold character is removed, the next','line_number':1414,'multiline':False]['text':' character should be redrawn too.  This happens for our own GUI','line_number':1415,'multiline':False]['text':' and for some xterms.','line_number':1416,'multiline':False]['text':' When at the end of the text and overwriting a two-cell','line_number':1437,'multiline':False]['text':' character with a one-cell character, need to clear the next','line_number':1438,'multiline':False]['text':' cell.  Also when overwriting the left half of a two-cell char','line_number':1439,'multiline':False]['text':' with the right half of a two-cell char.  Do this only once','line_number':1440,'multiline':False]['text':' (mb_off2cells() may return 2 on the right half).','line_number':1441,'multiline':False]['text':' Make sure we never leave a second byte of a double-byte behind,','line_number':1453,'multiline':False]['text':' it confuses mb_off2cells().','line_number':1454,'multiline':False]['text':' This only happens at the end, display one space next.','line_number':1510,'multiline':False]['text':' Keep the attribute from before.','line_number':1511,'multiline':False]['text':' If we detected the next character needs to be redrawn, but the text','line_number':1525,'multiline':False]['text':' doesn't extend up to there, update the character here.','line_number':1526,'multiline':False]['text':'
 * Prepare for 'hlsearch' highlighting.
 ','line_number':1537,'multiline':True]['text':' just in case it wasn't called before','line_number':1546,'multiline':False]['text':'
 * Clean up for 'hlsearch' highlighting.
 ','line_number':1551,'multiline':True]['text':' The GUI handles this internally.','line_number':1583,'multiline':False]['text':' special HL attr.','line_number':1590,'multiline':False]['text':' did ":syntax clear"','line_number':1596,'multiline':False]['text':' If FG and BG are unset, the color is undefined when','line_number':1607,'multiline':False]['text':' BOLD+INVERSE. Use Normal as the default value.','line_number':1608,'multiline':False]['text':' bold','line_number':1628,'multiline':False]['text':' If the Normal FG color has BOLD attribute and the new HL','line_number':1637,'multiline':False]['text':' has a FG color defined, clear BOLD.','line_number':1638,'multiline':False]['text':' standout','line_number':1640,'multiline':False]['text':' undercurl','line_number':1642,'multiline':False]['text':' double underline','line_number':1644,'multiline':False]['text':' dotted underline','line_number':1646,'multiline':False]['text':' dashed underline','line_number':1648,'multiline':False]['text':' underline or undercurl, etc.','line_number':1650,'multiline':False]['text':' italic','line_number':1657,'multiline':False]['text':' inverse (reverse)','line_number':1659,'multiline':False]['text':' strike','line_number':1661,'multiline':False]['text':'
     * Output the color or start string after bold etc., in case the
     * bold etc. override the color setting.
     ','line_number':1664,'multiline':True]['text':' When 'termguicolors' is set but fg or bg is unset,','line_number':1671,'multiline':False]['text':' fall back to the cterm colors.   This helps for SpellBad,','line_number':1672,'multiline':False]['text':' where the GUI uses a red undercurl.','line_number':1673,'multiline':False]['text':' output T_ME code','line_number':1724,'multiline':False]['text':' use internal GUI code','line_number':1740,'multiline':False]['text':' special HL attr.','line_number':1749,'multiline':False]['text':'
		     * Assume that t_me restores the original colors!
		     ','line_number':1755,'multiline':True]['text':' FG and BG cannot be separated in T_ME, which is not','line_number':1785,'multiline':False]['text':' efficient.','line_number':1786,'multiline':False]['text':' restore FG','line_number':1788,'multiline':False]['text':' restore BG','line_number':1790,'multiline':False]['text':' Process FG and BG at once.','line_number':1794,'multiline':False]['text':' did ":syntax clear"','line_number':1811,'multiline':False]['text':'
	     * Often all ending-codes are equal to T_ME.  Avoid outputting the
	     * same sequence several times.
	     ','line_number':1817,'multiline':True]['text':' set Normal cterm colors','line_number':1876,'multiline':False]['text':'
 * Reset the colors for a cterm.  Used when leaving Vim.
 * The machine specific code may override this again.
 ','line_number':1892,'multiline':True]['text':' set Normal cterm colors','line_number':1902,'multiline':False]['text':'
 * Put character ScreenLines["off"] on the screen at position "row" and "col",
 * using the attributes from ScreenAttrs["off"].
 ','line_number':1921,'multiline':True]['text':' Check for illegal values, just in case (could happen just after','line_number':1930,'multiline':False]['text':' resizing).','line_number':1931,'multiline':False]['text':' Outputting a character in the last cell on the screen may scroll the','line_number':1935,'multiline':False]['text':' screen up.  Only do it when the "xn" termcap property is set, otherwise','line_number':1936,'multiline':False]['text':' mark the character invalid (update it when scrolled up).','line_number':1937,'multiline':False]['text':' account for first command-line character in rightleft mode','line_number':1941,'multiline':False]['text':'
     * Stop highlighting first, so it's easier to move the cursor.
     ','line_number':1951,'multiline':True]['text':' Clear the two screen cells. If the character is actually','line_number':1978,'multiline':False]['text':' single width it won't change the second cell.','line_number':1979,'multiline':False]['text':' not sure where the cursor is after drawing the ambiguous width','line_number':1983,'multiline':False]['text':' character','line_number':1984,'multiline':False]['text':' Convert the UTF-8 character to bytes and write it.','line_number':1990,'multiline':False]['text':' double-byte character in single-width cell','line_number':1998,'multiline':False]['text':'
 * Used for enc_dbcs only: Put one double-wide character at ScreenLines["off"]
 * on the screen at position 'row' and 'col'.
 * The attributes of the first byte is used for all.  This is required to
 * output the two bytes of a double-byte character with nothing in between.
 ','line_number':2006,'multiline':True]['text':' Check for illegal values (could be wrong when screen was resized).','line_number':2015,'multiline':False]['text':' Outputting the last character on the screen may scroll the screen up.','line_number':2019,'multiline':False]['text':' Don't to it!  Mark the character invalid (update it when scrolled up)','line_number':2020,'multiline':False]['text':' Output the first byte normally (positions the cursor), then write the','line_number':2028,'multiline':False]['text':' second byte directly.','line_number':2029,'multiline':False]['text':'
 * Draw a rectangle of the screen, inverted when "invert" is TRUE.
 * This uses the contents of ScreenLines[] and doesn't change it.
 ','line_number':2035,'multiline':True]['text':' Can't use ScreenLines unless initialized','line_number':2051,'multiline':False]['text':'
 * Redraw the characters for a vertically split window.
 ','line_number':2081,'multiline':True]['text':'
 * Fill the screen from "start_row" to "end_row" (exclusive), from "start_col"
 * to "end_col" (exclusive) with character "c1" in first column followed by
 * "c2" in the other columns.  Use attributes "attr".
 ','line_number':2117,'multiline':True]['text':' safety check','line_number':2143,'multiline':False]['text':' safety check','line_number':2145,'multiline':False]['text':' nothing to do','line_number':2149,'multiline':False]['text':' it's a "normal" terminal when not in a GUI or cterm','line_number':2152,'multiline':False]['text':' When drawing over the right half of a double-wide char clear','line_number':2166,'multiline':False]['text':' out the left half.  When drawing over the left half of a','line_number':2167,'multiline':False]['text':' double wide-char clear out the right half.  Only needed in a','line_number':2168,'multiline':False]['text':' terminal.','line_number':2169,'multiline':False]['text':'
	 * Try to use delete-line termcap code, when no attributes or in a
	 * "normal" terminal, where a bold/italic space is just a
	 * space.
	 ','line_number':2175,'multiline':True]['text':'
	     * check if we really need to clear something
	     ','line_number':2189,'multiline':True]['text':' don't clear first char','line_number':2193,'multiline':False]['text':' skip blanks (used often, keep it fast!)','line_number':2199,'multiline':False]['text':' something to be cleared','line_number':2208,'multiline':False]['text':' clear rest of this screen line','line_number':2212,'multiline':False]['text':' don't know where cursor is now','line_number':2214,'multiline':False]['text':' clear chars in ScreenLines','line_number':2216,'multiline':False]['text':' the chars are cleared now','line_number':2222,'multiline':False]['text':' screen clear pending','line_number':2233,'multiline':False]['text':' Skip if under a(nother) popup.','line_number':2238,'multiline':False]['text':' The bold trick may make a single row of pixels appear in','line_number':2242,'multiline':False]['text':' the next character.  When a bold character is removed, the','line_number':2243,'multiline':False]['text':' next character should be redrawn too.  This happens for our','line_number':2244,'multiline':False]['text':' own GUI and for some xterms.','line_number':2245,'multiline':False]['text':' FEAT_GUI || defined(UNIX)','line_number':2265,'multiline':False]['text':' overwritten the command line','line_number':2292,'multiline':False]['text':' command line has been cleared','line_number':2297,'multiline':False]['text':' mode cleared or overwritten','line_number':2299,'multiline':False]['text':'
 * Check if there should be a delay.  Used before clearing or redrawing the
 * screen or the command line.
 ','line_number':2304,'multiline':True]['text':'
 * Init TabPageIdxs[] to zero: Clicking outside of tabs has no effect.
 ','line_number':2324,'multiline':True]['text':'
 * screen_valid -  allocate screen buffers if size changed
 *   If "doclear" is TRUE: clear screen if it has been resized.
 *	Returns TRUE if there is a valid screen to write to.
 *	Returns FALSE when starting up and screen not initialized yet.
 ','line_number':2336,'multiline':True]['text':' allocate screen buffers if size changed','line_number':2345,'multiline':False]['text':'
 * Resize the shell to Rows and Columns.
 * Allocate ScreenLines[] and associated items.
 *
 * There may be some time between setting Rows and Columns and (re)allocating
 * ScreenLines[].  This happens when starting up and when (manually) changing
 * the shell size.  Always use screen_Rows and screen_Columns to access items
 * in ScreenLines[].  Use Rows and Columns for positioning text etc. where the
 * final size of the shell is needed.
 ','line_number':2349,'multiline':True]['text':' avoid recursiveness','line_number':2384,'multiline':False]['text':' did outofmem message','line_number':2385,'multiline':False]['text':'
     * Allocation of the screen buffers is done only when the size changes and
     * when Rows and Columns have been set and we have started doing full
     * screen stuff.
     ','line_number':2390,'multiline':True]['text':'
     * It's possible that we produce an out-of-memory message below, which
     * will cause this function to be called again.  To break the loop, just
     * return here.
     ','line_number':2406,'multiline':True]['text':'
     * Note that the window sizes are updated before reallocating the arrays,
     * thus we must not redraw here!
     ','line_number':2415,'multiline':True]['text':' fit the windows in the new sized shell','line_number':2421,'multiline':False]['text':' be safe, put it here','line_number':2424,'multiline':False]['text':' recompute columns for shown command and ruler','line_number':2427,'multiline':False]['text':'
     * We're changing the size of the screen.
     * - Allocate new arrays for ScreenLines and ScreenAttrs.
     * - Move lines from the old arrays into the new arrays, clear extra
     *	 lines (unless the screen is going to be cleared).
     * - Free the old arrays.
     *
     * If anything fails, make ScreenLines NULL, so we don't do anything!
     * Continuing with the old ScreenLines may result in a crash, because the
     * size is wrong.
     ','line_number':2429,'multiline':True]['text':' global popup windows','line_number':2446,'multiline':False]['text':' tab-local popup windows','line_number':2449,'multiline':False]['text':' Clear ScreenCols to avoid a warning for uninitialized memory in','line_number':2467,'multiline':False]['text':' jump_to_mouse().','line_number':2468,'multiline':False]['text':' global popup windows','line_number':2496,'multiline':False]['text':' tab-local popup windows','line_number':2503,'multiline':False]['text':' guess the size','line_number':2538,'multiline':False]['text':' Remember we did this to avoid getting outofmem messages over','line_number':2541,'multiline':False]['text':' and over again.','line_number':2542,'multiline':False]['text':'
	     * If the screen is not going to be cleared, copy as much as
	     * possible from the old screen to the new one and clear the rest
	     * (used when resizing the window at the "--more--" prompt or when
	     * executing an external command, for the GUI).
	     ','line_number':2570,'multiline':True]['text':' When switching to utf-8 don't copy characters, they','line_number':2603,'multiline':False]['text':' may be invalid now.  Also when p_mco changes.','line_number':2604,'multiline':False]['text':' Use the last line of the screen for the current line.','line_number':2635,'multiline':False]['text':' NOTE: this may result in all pointers to become NULL.','line_number':2646,'multiline':False]['text':' It's important that screen_Rows and screen_Columns reflect the actual','line_number':2665,'multiline':False]['text':' size of ScreenLines[].  Set them before calling anything.','line_number':2666,'multiline':False]['text':' need to clear the screen later','line_number':2673,'multiline':False]['text':' Adjust the position of the cursor, for when executing an external','line_number':2684,'multiline':False]['text':' command.','line_number':2685,'multiline':False]['text':' Rows got smaller','line_number':2686,'multiline':False]['text':' put cursor at last row','line_number':2687,'multiline':False]['text':' Rows got bigger','line_number':2688,'multiline':False]['text':' put cursor in same place','line_number':2689,'multiline':False]['text':' Columns got smaller','line_number':2690,'multiline':False]['text':' put cursor at last column','line_number':2691,'multiline':False]['text':'
     * Do not apply autocommands more than 3 times to avoid an endless loop
     * in case applying autocommands always changes Rows or Columns.
     ','line_number':2704,'multiline':True]['text':' In rare cases, autocommands may have altered Rows or Columns,','line_number':2711,'multiline':False]['text':' jump back to check if we need to allocate the screen again.','line_number':2712,'multiline':False]['text':'
 * Clear the screen.
 * May delay if there is something the user should read.
 * Allocated the screen for resizing if needed.
 * Returns TRUE when the screen was actually cleared, FALSE if all display
 * cells were marked for updating.
 ','line_number':2739,'multiline':True]['text':' allocate screen buffers if size changed','line_number':2750,'multiline':False]['text':' clear the screen','line_number':2751,'multiline':False]['text':'
 * Do not clear the screen but mark everything for redraw.
 ','line_number':2754,'multiline':True]['text':' force setting the Normal colors','line_number':2779,'multiline':False]['text':' don't want highlighting here','line_number':2780,'multiline':False]['text':' disable selection without redrawing it','line_number':2783,'multiline':False]['text':' blank out ScreenLines','line_number':2787,'multiline':False]['text':' clear the display','line_number':2796,'multiline':False]['text':' can't clear the screen, mark all chars with invalid attributes','line_number':2803,'multiline':False]['text':' can use contents of ScreenLines now','line_number':2809,'multiline':False]['text':' redraw all regular windows','line_number':2811,'multiline':False]['text':' no need to clear again','line_number':2814,'multiline':False]['text':' compute_cmdrow() uses this','line_number':2816,'multiline':False]['text':' redraw all popup windows','line_number':2819,'multiline':False]['text':' put cursor on last line for messages','line_number':2821,'multiline':False]['text':' don't know where cursor is now','line_number':2823,'multiline':False]['text':'
 * Clear one line in ScreenLines.
 ','line_number':2830,'multiline':True]['text':'
 * Mark one line in ScreenLines invalid by setting the attributes to an
 * invalid value.
 ','line_number':2844,'multiline':True]['text':'
 * To be called when characters were sent to the terminal directly, outputting
 * test on "screen_lnum".
 ','line_number':2855,'multiline':True]['text':'
 * Copy part of a Screenline for vertically split window "wp".
 ','line_number':2865,'multiline':True]['text':'
 * Return TRUE if clearing with term string "p" would work.
 * It can't work when the string is empty or it won't set the right background.
 * Don't clear to end-of-line when there are popups, it may cause flicker.
 ','line_number':2895,'multiline':True]['text':'
 * Reset cursor position. Use whenever cursor was moved because of outputting
 * something directly to the screen (shell commands) or a terminal control
 * code.
 ','line_number':2920,'multiline':True]['text':'
 * Move the cursor to position "row","col" in the screen.
 * This tries to find the most efficient way to move, minimizing the number of
 * characters sent to the terminal.
 ','line_number':2931,'multiline':True]['text':' assume a term_windgoto() takes about 7 chars','line_number':2949,'multiline':False]['text':' assume unhighlight takes 5 chars','line_number':2950,'multiline':False]['text':' Can't use ScreenLines unless initialized','line_number':2956,'multiline':False]['text':' Check for valid position.','line_number':2962,'multiline':False]['text':' window without text lines?','line_number':2963,'multiline':False]['text':' check if no cursor movement is allowed in highlight mode','line_number':2970,'multiline':False]['text':'
     * Plan how to do the positioning:
     * 1. Use CR to move it to column 0, same row.
     * 2. Use T_LE to move it a few columns to the left.
     * 3. Use NL to move a few lines down, column 0.
     * 4. Move a few columns to the right with T_ND or by writing chars.
     *
     * Don't do this if the cursor went beyond the last column, the cursor
     * position is unknown then (some terminals wrap, some don't )
     *
     * First check if the highlighting attributes allow us to write
     * characters to move the cursor to the right.
     ','line_number':2977,'multiline':True]['text':'
	 * If the cursor is in the same row, bigger col, we can use CR
	 * or T_LE.
	 ','line_number':2992,'multiline':True]['text':' init for GCC','line_number':2996,'multiline':False]['text':' "le" is preferred over "bc", because "bc" is obsolete','line_number':3000,'multiline':False]['text':' "cursor left"','line_number':3002,'multiline':False]['text':' "backspace character (old)','line_number':3004,'multiline':False]['text':' using CR is less characters','line_number':3009,'multiline':False]['text':' CR is just one character','line_number':3013,'multiline':False]['text':' will stop highlighting','line_number':3020,'multiline':False]['text':'
	 * If the cursor is above where we want to be, we can use CR LF.
	 ','line_number':3027,'multiline':True]['text':' CR LF','line_number':3034,'multiline':False]['text':' will stop highlighting','line_number':3035,'multiline':False]['text':'
	 * If the cursor is in the same row, smaller col, just use write.
	 ','line_number':3042,'multiline':True]['text':'
	 * Check if any characters that need to be written have the
	 * correct attributes.  Also avoid UTF-8 characters.
	 ','line_number':3052,'multiline':True]['text':'
	     * Check if the attributes are correct without additionally
	     * stopping highlighting.
	     ','line_number':3061,'multiline':True]['text':'
		 * Try if it works when highlighting is stopped here.
		 ','line_number':3070,'multiline':True]['text':' different attributes, don't do it','line_number':3080,'multiline':False]['text':' Don't use an UTF-8 char for positioning, it's slow.','line_number':3084,'multiline':False]['text':'
	 * We can do it without term_windgoto()!
	 ','line_number':3094,'multiline':True]['text':'
		 * Use cursor-right if it's one character only.  Avoids
		 * removing a line of pixels from the last bold char, when
		 * using the bold trick in the GUI.
		 ','line_number':3131,'multiline':True]['text':'
 * Set cursor to its position in the current window.
 ','line_number':3178,'multiline':True]['text':'
 * Set cursor to its position in the current window.
 * When "force" is TRUE also when not redrawing.
 ','line_number':3187,'multiline':True]['text':' With 'rightleft' set and the cursor on a double-wide','line_number':3200,'multiline':False]['text':' character, position it on the leftmost column.','line_number':3201,'multiline':False]['text':'
 * Insert 'line_count' lines at 'row' in window 'wp'.
 * If 'invalid' is TRUE the wp->w_lines[].wl_lnum is invalidated.
 * If 'mayclear' is TRUE the screen will be cleared if it is faster than
 * scrolling.
 * Returns FAIL if the lines are not inserted, OK for success.
 ','line_number':3212,'multiline':True]['text':' with only a few lines it's not worth the effort','line_number':3235,'multiline':False]['text':' with the popup menu visible this might not work correctly','line_number':3239,'multiline':False]['text':'
     * If there is a next window or a status line, we first try to delete the
     * lines at the bottom to avoid messing what is after the window.
     * If this fails and there are following windows, don't do anything to
     * avoid messing up those windows, better just redraw.
     ','line_number':3250,'multiline':True]['text':'
     * if no lines deleted, blank the lines that will end up below the window
     ','line_number':3265,'multiline':True]['text':' deletion will have messed up other windows','line_number':3284,'multiline':False]['text':'
 * Delete "line_count" window lines at "row" in window "wp".
 * If "invalid" is TRUE curwin->w_lines[] is invalidated.
 * If "mayclear" is TRUE the screen will be cleared if it is faster than
 * scrolling
 * Return OK for success, FAIL if the lines are not deleted.
 ','line_number':3296,'multiline':True]['text':' for clearing lines','line_number':3310,'multiline':False]['text':'
     * If there are windows or status lines below, try to put them at the
     * correct place. If we can't do that, they have to be redrawn.
     ','line_number':3328,'multiline':True]['text':'
     * If this is the last window and there is no status line, redraw the
     * command line later.
     ','line_number':3341,'multiline':True]['text':'
 * Common code for win_ins_lines() and win_del_lines().
 * Returns OK or FAIL when the work has been done.
 * Returns MAYBE when not finished yet.
 ','line_number':3350,'multiline':True]['text':' When inserting lines would result in loss of command output, just redraw','line_number':3369,'multiline':False]['text':' the lines.','line_number':3370,'multiline':False]['text':' only a few lines left: redraw is faster','line_number':3374,'multiline':False]['text':' will set wp->w_lines_valid to 0','line_number':3378,'multiline':False]['text':' this doesn't work when there are popups visible','line_number':3383,'multiline':False]['text':' Delete all remaining lines','line_number':3388,'multiline':False]['text':'
     * When scrolling, the message on the command line should be cleared,
     * otherwise it will stay there forever.
     * Don't do this when avoiding to insert lines.
     ','line_number':3397,'multiline':True]['text':'
     * If the terminal can set a scroll region, use that.
     * Always do this in a vertically split window.  This will redraw from
     * ScreenLines[] when t_CV isn't defined.  That's faster than using
     * win_line().
     * Don't use a scroll region when we are going to redraw the text, writing
     * a character in the lower right corner of the scroll region may cause a
     * scroll-up .
     ','line_number':3405,'multiline':True]['text':' don't delete/insert on fast terminal','line_number':3429,'multiline':False]['text':'
 * window 'wp' and everything after it is messed up, mark it for redraw
 ','line_number':3435,'multiline':True]['text':'
 * The rest of the routines in this file perform screen manipulations. The
 * given operation is performed physically on the screen. The corresponding
 * change is also made to the internal screen image. In this way, the editor
 * anticipates the effect of editing changes on the appearance of the screen.
 * That way, when we call screenupdate a complete redraw isn't usually
 * necessary. Another advantage is that we can keep adding code to anticipate
 * screen changes, and in the meantime, everything still works.
 ','line_number':3450,'multiline':True]['text':'
 * types for inserting or deleting lines
 ','line_number':3460,'multiline':True]['text':'
 * insert lines on the screen and update ScreenLines[]
 * "end" is the line after the scrolled part. Normally it is Rows.
 * When scrolling region used "off" is the offset from the top for the region.
 * "row" and "end" are relative to the start of the region.
 *
 * return FAIL for failure, OK for success.
 ','line_number':3473,'multiline':True]['text':' NULL or window to use width from','line_number':3488,'multiline':False]['text':'
     * FAIL if
     * - there is no valid screen
     * - the line count is less than one
     * - the line count is more than 'ttyscroll'
     * - "end" is more than "Rows" (safety check, should not happen)
     * - redrawing for a callback and there is a modeless selection
     * - there is a popup window
     ','line_number':3499,'multiline':True]['text':'
     * There are seven ways to insert lines:
     * 0. When in a vertically split window and t_CV isn't set, redraw the
     *    characters from ScreenLines[].
     * 1. Use T_CD (clear to end of display) if it exists and the result of
     *	  the insert is just empty lines
     * 2. Use T_CAL (insert multiple lines) if it exists and T_AL is not
     *	  present or line_count > 1. It looks better if we do all the inserts
     *	  at once.
     * 3. Use T_CDL (delete multiple lines) if it exists and the result of the
     *	  insert is just empty lines and T_CE is not present or line_count >
     *	  1.
     * 4. Use T_AL (insert line) if it exists.
     * 5. Use T_CE (erase line) if it exists and the result of the insert is
     *	  just empty lines.
     * 6. Use T_DL (delete line) if it exists and the result of the insert is
     *	  just empty lines.
     * 7. Use T_SR (scroll reverse) if it exists and inserting at row 0 and
     *	  the 'da' flag is not set or we have clear line capability.
     * 8. redraw the characters from ScreenLines[].
     *
     * Careful: In a hpterm scroll reverse doesn't work as expected, it moves
     * the scrollbar for the window. It does have insert line, use that if it
     * exists.
     ','line_number':3521,'multiline':True]['text':' Avoid that lines are first cleared here and then redrawn, which','line_number':3549,'multiline':False]['text':' results in many characters updated twice.  This happens with CTRL-F','line_number':3550,'multiline':False]['text':' in a vertically split window.  With line-by-line scrolling','line_number':3551,'multiline':False]['text':' USE_REDRAW should be faster.','line_number':3552,'multiline':False]['text':'
     * For clearing the lines screen_del_lines() is used. This will also take
     * care of t_db if necessary.
     ','line_number':3574,'multiline':True]['text':'
     * If text is retained below the screen, first clear or delete as many
     * lines at the bottom of the window as are about to be inserted so that
     * the deleted lines won't later surface during a screen_del_lines.
     ','line_number':3582,'multiline':True]['text':' Remove a modeless selection when inserting lines halfway the screen','line_number':3591,'multiline':False]['text':' or not the full width of the screen.','line_number':3592,'multiline':False]['text':' Don't update the GUI cursor here, ScreenLines[] is invalid until the','line_number':3604,'multiline':False]['text':' scrolling is actually carried out.','line_number':3605,'multiline':False]['text':' cursor relative to region','line_number':3612,'multiline':False]['text':'
     * Shift LineOffset[] line_count down to reflect the inserted lines.
     * Clear the inserted lines in ScreenLines[].
     ','line_number':3617,'multiline':True]['text':' need to copy part of a line','line_number':3627,'multiline':False]['text':' redraw the characters','line_number':3666,'multiline':False]['text':' don't know where cursor is now','line_number':3672,'multiline':False]['text':' type == USE_T_SR','line_number':3684,'multiline':False]['text':' don't know where cursor is now','line_number':3686,'multiline':False]['text':'
     * With scroll-reverse and 'da' flag set we need to clear the lines that
     * have been scrolled down into the region.
     ','line_number':3690,'multiline':True]['text':' don't know where cursor is now','line_number':3700,'multiline':False]['text':' always flush after a scroll','line_number':3707,'multiline':False]['text':'
 * Delete lines on the screen and update ScreenLines[].
 * "end" is the line after the scrolled part. Normally it is Rows.
 * When scrolling region used "off" is the offset from the top for the region.
 * "row" and "end" are relative to the start of the region.
 *
 * Return OK for success, FAIL if the lines are not deleted.
 ','line_number':3712,'multiline':True]['text':' even when line_count > p_ttyscroll','line_number':3726,'multiline':False]['text':' used for clearing lines','line_number':3727,'multiline':False]['text':' NULL or window to use width from','line_number':3728,'multiline':False]['text':' result is empty until end of region','line_number':3736,'multiline':False]['text':' deleting line codes can be used','line_number':3737,'multiline':False]['text':'
     * FAIL if
     * - there is no valid screen
     * - the screen has to be redrawn completely
     * - the line count is less than one
     * - the line count is more than 'ttyscroll'
     * - "end" is more than "Rows" (safety check, should not happen)
     * - redrawing for a callback and there is a modeless selection
     ','line_number':3740,'multiline':True]['text':'
     * Check if the rest of the current region will become empty.
     ','line_number':3759,'multiline':True]['text':'
     * We can delete lines only when 'db' flag not set or when 'ce' option
     * available.
     ','line_number':3764,'multiline':True]['text':'
     * There are six ways to delete lines:
     * 0. When in a vertically split window and t_CV isn't set, redraw the
     *    characters from ScreenLines[].
     * 1. Use T_CD if it exists and the result is empty.
     * 2. Use newlines if row == 0 and count == 1 or T_CDL does not exist.
     * 3. Use T_CDL (delete multiple lines) if it exists and line_count > 1 or
     *	  none of the other ways work.
     * 4. Use T_CE (erase line) if the result is empty.
     * 5. Use T_DL (delete line) if it exists.
     * 6. redraw the characters from ScreenLines[].
     ','line_number':3770,'multiline':True]['text':' Avoid that lines are first cleared here and then redrawn, which','line_number':3784,'multiline':False]['text':' results in many characters updated twice.  This happens with CTRL-F','line_number':3785,'multiline':False]['text':' in a vertically split window.  With line-by-line scrolling','line_number':3786,'multiline':False]['text':' USE_REDRAW should be faster.','line_number':3787,'multiline':False]['text':' On the Amiga, somehow '\n' on the last line doesn't always scroll','line_number':3796,'multiline':False]['text':' up, so use delete-line command','line_number':3797,'multiline':False]['text':' Remove a modeless selection when deleting lines halfway the screen or','line_number':3815,'multiline':False]['text':' not the full width of the screen.','line_number':3816,'multiline':False]['text':' Don't update the GUI cursor here, ScreenLines[] is invalid until the','line_number':3828,'multiline':False]['text':' scrolling is actually carried out.','line_number':3829,'multiline':False]['text':' cursor relative to region','line_number':3837,'multiline':False]['text':'
     * Now shift LineOffset[] line_count up to reflect the deleted lines.
     * Clear the inserted lines in ScreenLines[].
     ','line_number':3848,'multiline':True]['text':' need to copy part of a line','line_number':3858,'multiline':False]['text':' whole width, moving the line pointers is faster','line_number':3872,'multiline':False]['text':' redraw the characters','line_number':3898,'multiline':False]['text':' delete the lines','line_number':3901,'multiline':False]['text':' don't know where cursor is now','line_number':3905,'multiline':False]['text':' don't know where cursor is now','line_number':3911,'multiline':False]['text':'
     * Deleting lines at top of the screen or scroll region: Just scroll
     * the whole screen (scroll region) up by outputting newlines on the
     * last line.
     ','line_number':3913,'multiline':True]['text':' cursor will remain on same line','line_number':3922,'multiline':False]['text':' delete a line','line_number':3931,'multiline':False]['text':' type == USE_T_CE','line_number':3933,'multiline':False]['text':' erase a line','line_number':3936,'multiline':False]['text':' don't know where cursor is now','line_number':3938,'multiline':False]['text':'
     * If the 'db' flag is set, we need to clear the lines that have been
     * scrolled up at the bottom of the region.
     ','line_number':3942,'multiline':True]['text':' erase a line','line_number':3951,'multiline':False]['text':' don't know where cursor is now','line_number':3952,'multiline':False]['text':' always flush after a scroll','line_number':3959,'multiline':False]['text':'
 * Return TRUE when postponing displaying the mode message: when not redrawing
 * or inside a mapping.
 ','line_number':3965,'multiline':True]['text':' Call char_avail() only when we are going to show something, because it','line_number':3972,'multiline':False]['text':' takes a bit of time.  redrawing() may also call char_avail().','line_number':3973,'multiline':False]['text':' show mode later','line_number':3979,'multiline':False]['text':'
 * Show the current mode and ruler.
 *
 * If clear_cmdline is TRUE, clear the rest of the cmdline.
 * If clear_cmdline is FALSE there may be a message there that needs to be
 * cleared only if a mode is shown.
 * If redraw_mode is TRUE show or clear the mode.
 * Return the length of the message (0 if no message).
 ','line_number':3985,'multiline':True]['text':' show mode later','line_number':4011,'multiline':False]['text':' wait a bit before overwriting an important message','line_number':4015,'multiline':False]['text':' if the cmdline is more than one line high, erase top lines','line_number':4018,'multiline':False]['text':' will reset clear_cmdline','line_number':4021,'multiline':False]['text':' Position on the last line in the window, column 0','line_number':4023,'multiline':False]['text':' Highlight mode','line_number':4026,'multiline':False]['text':' most of the time, it's not XIM being used','line_number':4038,'multiline':False]['text':' CTRL-X in Insert mode','line_number':4044,'multiline':False]['text':' These messages can get long, avoid a wrap in a narrow','line_number':4047,'multiline':False]['text':' window.  Prefer showing edit_submode_extra.','line_number':4048,'multiline':False]['text':' add a space in between','line_number':4064,'multiline':False]['text':' Don't concatenate separate words to avoid translation','line_number':4118,'multiline':False]['text':' problems.','line_number':4119,'multiline':False]['text':' otherwise it gets too long','line_number':4139,'multiline':False]['text':' overwrite this message','line_number':4148,'multiline':False]['text':' never ask for hit-return for this','line_number':4151,'multiline':False]['text':' Clear the whole command line.  Will reset "clear_cmdline".','line_number':4154,'multiline':False]['text':' In Visual mode the size of the selected area must be redrawn.','line_number':4162,'multiline':False]['text':' If the last window has no status line, the ruler is after the mode','line_number':4166,'multiline':False]['text':' message and must be redrawn','line_number':4167,'multiline':False]['text':'
 * Position for a mode message.
 ','line_number':4178,'multiline':True]['text':'
 * Delete mode message.  Used when ESC is typed which is expected to end
 * Insert mode (but Insert mode didn't end yet!).
 * Caller should check "mode_displayed".
 ','line_number':4188,'multiline':True]['text':'
     * Don't delete it right now, when not redrawing or inside a mapping.
     ','line_number':4196,'multiline':True]['text':' delete mode later','line_number':4200,'multiline':False]['text':'
 * Clear the mode message.
 ','line_number':4205,'multiline':True]['text':'
 * Draw the tab pages line at the top of the Vim window.
 ','line_number':4236,'multiline':True]['text':' Take care of a GUI tabline.','line_number':4273,'multiline':False]['text':' Use the 'tabline' option if it's set.','line_number':4287,'multiline':False]['text':' Get buffer name in NameBuff[]','line_number':4357,'multiline':False]['text':' Store the tab page number in TabPageIdxs[], so that','line_number':4381,'multiline':False]['text':' jump_to_mouse() knows where each one is.','line_number':4382,'multiline':False]['text':' Draw the 'showcmd' information if 'showcmdloc' == "tabline".','line_number':4394,'multiline':False]['text':' Put an "X" for closing the current tab if there are several.','line_number':4404,'multiline':False]['text':' Reset the flag here again, in case evaluating 'tabline' causes it to be','line_number':4412,'multiline':False]['text':' set.','line_number':4413,'multiline':False]['text':'
 * Get buffer name for "buf" into NameBuff[].
 * Takes care of special buffer names and translates special characters.
 ','line_number':4417,'multiline':True]['text':'
 * Get the character to use in a status line.  Get its attributes in "*attr".
 ','line_number':4431,'multiline':True]['text':'
 * Get the character to use in a separator between vertically split windows.
 * Get its attributes in "*attr".
 ','line_number':4468,'multiline':True]['text':'
 * Return TRUE if redrawing should currently be done.
 ','line_number':4482,'multiline':True]['text':'
 * Return TRUE if printing messages should currently be done.
 ','line_number':4500,'multiline':True]['text':'
 * Compute columns for ruler and shown command. 'sc_col' is also used to
 * decide what the maximum length of a message on the status line can be.
 * If there is a status line for the last window, 'sc_col' is independent
 * of 'ru_col'.
 ','line_number':4509,'multiline':True]['text':' columns needed by standard ruler','line_number':4516,'multiline':False]['text':' no last status line, adjust sc_col','line_number':4532,'multiline':False]['text':' no need for separating space','line_number':4539,'multiline':False]['text':' screen too narrow, will become a mess','line_number':4544,'multiline':False]['text':'
 * Return the width of the 'number' and 'relativenumber' column.
 * Caller may need to check if 'number' or 'relativenumber' is set.
 * Otherwise it depends on 'numberwidth' and the line count.
 ','line_number':4554,'multiline':True]['text':' cursor line shows "0"','line_number':4566,'multiline':False]['text':' cursor line shows absolute line number','line_number':4569,'multiline':False]['text':' 'numberwidth' gives the minimal width plus one','line_number':4583,'multiline':False]['text':' If 'signcolumn' is set to 'number' and there is a sign to display, then','line_number':4588,'multiline':False]['text':' the minimal width for the number column is 2.','line_number':4589,'multiline':False]['text':'
 * Return the current cursor column. This is the actual position on the
 * screen. First column is 0.
 ','line_number':4602,'multiline':True]['text':'
 * Return the current cursor row. This is the actual position on the screen.
 * First row is 0.
 ','line_number':4612,'multiline':True]['text':'
 * Calls mb_ptr2char_adv(p) and returns the character.
 * If "p" starts with "\x", "\u" or "\U" the hex or unicode value is used.
 ','line_number':4623,'multiline':True]['text':'
 * Handle setting 'listchars' or 'fillchars'.
 * "value" points to either the global or the window-local value.
 * "is_listchars" is TRUE for "listchars" and FALSE for "fillchars".
 * When "apply" is FALSE do not store the flags, only check for errors.
 * Assume monocell characters.
 * Returns error message, NULL if it's OK.
 ','line_number':4691,'multiline':True]['text':' Last occurrence of "multispace:"','line_number':4705,'multiline':False]['text':' Last occurrence of "leadmultispace:"','line_number':4706,'multiline':False]['text':' Length of lcs-multispace string','line_number':4707,'multiline':False]['text':' Length of lcs-leadmultispace string','line_number':4708,'multiline':False]['text':' local value is empty, use the global value','line_number':4718,'multiline':False]['text':' local value is empty, us the global value','line_number':4725,'multiline':False]['text':' first round: check for valid value, second round: assign values','line_number':4728,'multiline':False]['text':' After checking that the value is valid: set defaults.','line_number':4733,'multiline':False]['text':' Get length of lcs-multispace string in first round','line_number':4790,'multiline':False]['text':' lcs-multispace cannot be an empty string','line_number':4801,'multiline':False]['text':' get length of lcs-leadmultispace string in first','line_number':4825,'multiline':False]['text':' round','line_number':4826,'multiline':False]['text':' lcs-leadmultispace cannot be an empty string','line_number':4837,'multiline':False]['text':' no error','line_number':4917,'multiline':False]['text':'
 * Handle the new value of 'fillchars'.
 ','line_number':4920,'multiline':True]['text':'
 * Handle the new value of 'listchars'.
 ','line_number':4929,'multiline':True]['text':'
 * Function given to ExpandGeneric() to obtain possible arguments of the
 * 'fillchars' option.
 ','line_number':4938,'multiline':True]['text':'
 * Function given to ExpandGeneric() to obtain possible arguments of the
 * 'listchars' option.
 ','line_number':4951,'multiline':True]['text':'
 * Check all global and local values of 'listchars' and 'fillchars'.
 * Return an untranslated error messages if any of them is invalid, NULL
 * otherwise.
 ','line_number':4964,'multiline':True]