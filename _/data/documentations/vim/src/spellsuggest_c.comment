['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * spellsuggest.c: functions for spelling suggestions
 ','line_number':10,'multiline':True]['text':'
 * Use this to adjust the score after finding suggestions, based on the
 * suggested word sounding like the bad word.  This is much faster than doing
 * it for every possible suggestion.
 * Disadvantage: When "the" is typed as "hte" it sounds quite different ("@"
 * vs "ht") and goes down in the list.
 * Used when 'spellsuggest' is set to "best".
 ','line_number':18,'multiline':True]['text':'
 * Do the opposite: based on a maximum end score and a known sound score,
 * compute the maximum word score that can be used.
 ','line_number':28,'multiline':True]['text':' only used for su_badflags','line_number':34,'multiline':False]['text':' mix of upper and lower case: macaRONI','line_number':35,'multiline':False]['text':'
 * Information used when looking for suggestions.
 ','line_number':37,'multiline':True]['text':' suggestions, contains "suggest_T"','line_number':42,'multiline':False]['text':' max. number of suggestions displayed','line_number':43,'multiline':False]['text':' maximum score for adding to su_ga','line_number':44,'multiline':False]['text':' idem, for when doing soundfold words','line_number':45,'multiline':False]['text':' like su_ga, sound-folded scoring','line_number':46,'multiline':False]['text':' start of bad word in line','line_number':47,'multiline':False]['text':' length of detected bad word in line','line_number':48,'multiline':False]['text':' caps flags for bad word','line_number':49,'multiline':False]['text':' bad word truncated at su_badlen','line_number':50,'multiline':False]['text':' su_badword case-folded','line_number':51,'multiline':False]['text':' su_badword soundfolded','line_number':52,'multiline':False]['text':' table with banned words','line_number':53,'multiline':False]['text':' default language for sound folding','line_number':54,'multiline':False]['text':' One word suggestion.  Used in "si_ga".','line_number':57,'multiline':False]['text':' suggested word, allocated string','line_number':60,'multiline':False]['text':' STRLEN(st_word)','line_number':61,'multiline':False]['text':' length of replaced text','line_number':62,'multiline':False]['text':' lower is better','line_number':63,'multiline':False]['text':' used when st_score compares equal','line_number':64,'multiline':False]['text':' st_score is for soundalike','line_number':65,'multiline':False]['text':' bonus already included in score','line_number':66,'multiline':False]['text':' language used for sound folding','line_number':67,'multiline':False]['text':' TRUE if a word appears in the list of banned words.','line_number':72,'multiline':False]['text':' Number of suggestions kept when cleaning up.  We need to keep more than','line_number':75,'multiline':False]['text':' what is displayed, because when rescore_suggestions() is called the score','line_number':76,'multiline':False]['text':' may change and wrong suggestions may be removed later.','line_number':77,'multiline':False]['text':' Threshold for sorting and cleaning up suggestions.  Don't want to keep lots','line_number':80,'multiline':False]['text':' of suggestions that are not going to be displayed.','line_number':81,'multiline':False]['text':' score for various changes','line_number':84,'multiline':False]['text':' split bad word','line_number':85,'multiline':False]['text':' split bad word with NOSPLITSUGS','line_number':86,'multiline':False]['text':' slightly different case','line_number':87,'multiline':False]['text':' word is for different region','line_number':88,'multiline':False]['text':' rare word','line_number':89,'multiline':False]['text':' swap two characters','line_number':90,'multiline':False]['text':' swap two characters in three','line_number':91,'multiline':False]['text':' REP replacement','line_number':92,'multiline':False]['text':' substitute a character','line_number':93,'multiline':False]['text':' substitute a similar character','line_number':94,'multiline':False]['text':' substitute a composing character','line_number':95,'multiline':False]['text':' delete a character','line_number':96,'multiline':False]['text':' delete a duplicated character','line_number':97,'multiline':False]['text':' delete a composing character','line_number':98,'multiline':False]['text':' insert a character','line_number':99,'multiline':False]['text':' insert a duplicate character','line_number':100,'multiline':False]['text':' insert a composing character','line_number':101,'multiline':False]['text':' change non-word to word char','line_number':102,'multiline':False]['text':' suggestion from a file','line_number':104,'multiline':False]['text':' Initial maximum score: higher == slower.','line_number':105,'multiline':False]['text':' 350 allows for about three changes.','line_number':106,'multiline':False]['text':' subtracted for words seen before','line_number':108,'multiline':False]['text':' subtracted for words often seen','line_number':109,'multiline':False]['text':' subtracted for words very often seen','line_number':110,'multiline':False]['text':' word count threshold for COMMON2','line_number':111,'multiline':False]['text':' word count threshold for COMMON3','line_number':112,'multiline':False]['text':' When trying changed soundfold words it becomes slow when trying more than','line_number':114,'multiline':False]['text':' two changes.  With less than two changes it's slightly faster but we miss a','line_number':115,'multiline':False]['text':' few good suggestions.  In rare cases we need to try three of four changes.','line_number':116,'multiline':False]['text':' maximum score for first try','line_number':117,'multiline':False]['text':' maximum score for second try','line_number':118,'multiline':False]['text':' maximum score for third try','line_number':119,'multiline':False]['text':' big difference','line_number':121,'multiline':False]['text':' accept any score','line_number':122,'multiline':False]['text':' for spell_edit_score_limit()','line_number':123,'multiline':False]['text':' for spell_edit_score_limit() we need to know the minimum value of','line_number':125,'multiline':False]['text':' SCORE_ICASE, SCORE_SWAP, SCORE_DEL, SCORE_SIMILAR and SCORE_INS','line_number':126,'multiline':False]['text':'
 * For finding suggestions: At each node in the tree these states are tried:
 ','line_number':129,'multiline':True]['text':' At start of node check for NUL bytes (goodword','line_number':134,'multiline':False]['text':' ends); if badword ends there is a match, otherwise','line_number':135,'multiline':False]['text':' try splitting word.','line_number':136,'multiline':False]['text':' try without prefix','line_number':137,'multiline':False]['text':' Undo splitting.','line_number':138,'multiline':False]['text':' Past NUL bytes at start of the node.','line_number':139,'multiline':False]['text':' Use each byte of the node.','line_number':140,'multiline':False]['text':' Delete a byte from the bad word.','line_number':141,'multiline':False]['text':' Prepare for inserting bytes.','line_number':142,'multiline':False]['text':' Insert a byte in the bad word.','line_number':143,'multiline':False]['text':' Swap two bytes.','line_number':144,'multiline':False]['text':' Undo swap two characters.','line_number':145,'multiline':False]['text':' Swap two characters over three.','line_number':146,'multiline':False]['text':' Undo Swap two characters over three.','line_number':147,'multiline':False]['text':' Undo rotate three characters left','line_number':148,'multiline':False]['text':' Undo rotate three characters right','line_number':149,'multiline':False]['text':' Prepare for using REP items.','line_number':150,'multiline':False]['text':' Use matching REP items from the .aff file.','line_number':151,'multiline':False]['text':' Undo a REP item replacement.','line_number':152,'multiline':False]['text':' End of this node.','line_number':153,'multiline':False]['text':'
 * Struct to keep the state at each level in suggest_try_change().
 ','line_number':156,'multiline':True]['text':' state at this level, STATE_','line_number':161,'multiline':False]['text':' score','line_number':162,'multiline':False]['text':' index in tree array, start of node','line_number':163,'multiline':False]['text':' index in list of child nodes','line_number':164,'multiline':False]['text':' index in fword[], case-folded bad word','line_number':165,'multiline':False]['text':' ts_fidx at which bytes may be changed','line_number':166,'multiline':False]['text':' valid length of tword[]','line_number':167,'multiline':False]['text':' stack depth for end of prefix or','line_number':168,'multiline':False]['text':' PFD_PREFIXTREE or PFD_NOPREFIX','line_number':169,'multiline':False]['text':' TSF_ flags','line_number':170,'multiline':False]['text':' number of bytes in tword character','line_number':171,'multiline':False]['text':' current byte index in tword character','line_number':172,'multiline':False]['text':' DIFF_ values','line_number':173,'multiline':False]['text':' index in fword where badword char started','line_number':174,'multiline':False]['text':' length of word in "preword[]"','line_number':175,'multiline':False]['text':' index in "tword" after last split','line_number':176,'multiline':False]['text':' "ts_fidx" at word split','line_number':177,'multiline':False]['text':' nr of compound words used','line_number':178,'multiline':False]['text':' index for "compflags" where word was spit','line_number':179,'multiline':False]['text':' su_badflags saved here','line_number':180,'multiline':False]['text':' index in fword for char that was deleted,','line_number':181,'multiline':False]['text':' valid when "ts_flags" has TSF_DIDDEL','line_number':182,'multiline':False]['text':' values for ts_isdiff','line_number':185,'multiline':False]['text':' no different byte (yet)','line_number':186,'multiline':False]['text':' different byte found','line_number':187,'multiline':False]['text':' inserting character','line_number':188,'multiline':False]['text':' values for ts_flags','line_number':190,'multiline':False]['text':' already checked that prefix is OK','line_number':191,'multiline':False]['text':' tried split at this point','line_number':192,'multiline':False]['text':' did a delete, "ts_delidx" has index','line_number':193,'multiline':False]['text':' special values ts_prefixdepth','line_number':195,'multiline':False]['text':' not using prefixes','line_number':196,'multiline':False]['text':' walking through the prefix tree','line_number':197,'multiline':False]['text':' highest value that's not special','line_number':198,'multiline':False]['text':'
 * Return TRUE when the sequence of flags in "compflags" plus "flag" can
 * possibly form a valid compounded word.  This also checks the COMPOUNDRULE
 * lines if they don't contain wildcards.
 ','line_number':234,'multiline':True]['text':' If the flag doesn't appear in sl_compstartflags or sl_compallflags','line_number':246,'multiline':False]['text':' then it can't possibly compound.','line_number':247,'multiline':False]['text':' If there are no wildcards, we can check if the flags collected so far','line_number':252,'multiline':False]['text':' possibly can form a match with COMPOUNDRULE patterns.  This only','line_number':253,'multiline':False]['text':' makes sense when we have two or more words.','line_number':254,'multiline':False]['text':'
 * Adjust the score of common words.
 ','line_number':269,'multiline':True]['text':' word was split, less bonus','line_number':277,'multiline':False]['text':'
 * Like captype() but for a KEEPCAP word add ONECAP if the word starts with a
 * capital.  So that make_case_word() can turn WOrd into Word.
 * Add ALLCAP for "WOrD".
 ','line_number':304,'multiline':True]['text':' Count the number of UPPER and lower case letters.','line_number':321,'multiline':False]['text':' If there are more UPPER than lower case letters suggest an','line_number':337,'multiline':False]['text':' ALLCAP word.  Otherwise, if the first letter is UPPER then','line_number':338,'multiline':False]['text':' suggest ONECAP.  Exception: "ALl" most likely should be "All",','line_number':339,'multiline':False]['text':' require three upper case letters.','line_number':340,'multiline':False]['text':' maCARONI maCAroni','line_number':346,'multiline':False]['text':'
 * Opposite of offset2bytes().
 * "pp" points to the bytes and is advanced over it.
 * Returns the offset.
 ','line_number':352,'multiline':True]['text':' 1 byte','line_number':365,'multiline':False]['text':' 2 bytes','line_number':369,'multiline':False]['text':' 3 bytes','line_number':374,'multiline':False]['text':' 4 bytes','line_number':380,'multiline':False]['text':' values for sps_flags','line_number':392,'multiline':False]['text':' flags from 'spellsuggest'','line_number':397,'multiline':False]['text':' max nr of suggestions given','line_number':398,'multiline':False]['text':'
 * Check the 'spellsuggest' option.  Return FAIL if it's wrong.
 * Sets "sps_flags" and "sps_limit".
 ','line_number':400,'multiline':True]['text':' Note: Keep this in sync with p_sps_values.','line_number':427,'multiline':False]['text':'
 * "z=": Find badly spelled word under or after the cursor.
 * Give suggestions for the properly spelled word.
 * In Visual mode use the highlighted word as the bad word.
 * When "count" is non-zero use that suggestion.
 ','line_number':457,'multiline':True]['text':' Use the Visually selected text as the bad word.  But reject','line_number':496,'multiline':False]['text':' a multi-line selection.','line_number':497,'multiline':False]['text':' make sure we don't include the NUL at the end of the line','line_number':510,'multiline':False]['text':' Find the start of the badly spelled word.','line_number':515,'multiline':False]['text':' No bad word or it starts after the cursor: use the word under the','line_number':519,'multiline':False]['text':' cursor.','line_number':520,'multiline':False]['text':' Backup to before start of word.','line_number':524,'multiline':False]['text':' Forward to start of word.','line_number':527,'multiline':False]['text':' No word found.','line_number':531,'multiline':False]['text':' Get the word and its length.','line_number':539,'multiline':False]['text':' Figure out if the word should be capitalised.','line_number':541,'multiline':False]['text':' Make a copy of current line since autocommands may free the line.','line_number':545,'multiline':False]['text':' Get the list of suggestions.  Limit to 'lines' - 2 or the number in','line_number':550,'multiline':False]['text':' 'spellsuggest', whatever is smaller.','line_number':551,'multiline':False]['text':' When 'rightleft' is set the list is drawn right-left.','line_number':569,'multiline':False]['text':' List the suggestions.','line_number':575,'multiline':False]['text':' for when 'cmdheight' > 1','line_number':577,'multiline':False]['text':' avoid more prompt','line_number':578,'multiline':False]['text':' And now the rabbit from the high hat: Avoid showing the','line_number':584,'multiline':False]['text':' untranslated message rightleft.','line_number':585,'multiline':False]['text':' The suggested word may replace only part of the bad word, add','line_number':601,'multiline':False]['text':' the not replaced part.  But only when it's not getting too long.','line_number':602,'multiline':False]['text':' The word may replace more than "su_badlen".','line_number':618,'multiline':False]['text':' Add the score.','line_number':628,'multiline':False]['text':' Mirror the numbers, but keep the leading space.','line_number':638,'multiline':False]['text':' Ask for choice.','line_number':651,'multiline':False]['text':' avoid more prompt','line_number':655,'multiline':False]['text':' don't delay for 'smd' in normal_cmd()','line_number':656,'multiline':False]['text':' Save the from and to text for :spellrepall.','line_number':662,'multiline':False]['text':' Replacing less than "su_badlen", append the remainder to','line_number':669,'multiline':False]['text':' repl_to.','line_number':670,'multiline':False]['text':' Replacing su_badlen or more, use the whole word.','line_number':679,'multiline':False]['text':' Replace the word.','line_number':684,'multiline':False]['text':' For redo we use a change-word command.','line_number':695,'multiline':False]['text':' "p" may be freed here','line_number':702,'multiline':False]['text':'
 * Find spell suggestions for "word".  Return them in the growarray "*gap" as
 * a list of allocated strings.
 ','line_number':723,'multiline':True]['text':' maximum nr of suggestions','line_number':731,'multiline':False]['text':' 'spellcapcheck' matched','line_number':732,'multiline':False]['text':' Make room in "gap".','line_number':742,'multiline':False]['text':' The suggested word may replace only part of "word", add the not','line_number':750,'multiline':False]['text':' replaced part.','line_number':751,'multiline':False]['text':'
 * Find spell suggestions for the word at the start of "badptr".
 * Return the suggestions in "su->su_ga".
 * The maximum number of suggestions is "maxcount".
 * Note: does use info for the current window.
 * This is based on the mechanisms of Aspell, but completely reimplemented.
 ','line_number':765,'multiline':True]['text':' length of bad word or 0 if unknown','line_number':775,'multiline':False]['text':' don't include badword in suggestions','line_number':778,'multiline':False]['text':' word should start with capital','line_number':779,'multiline':False]['text':' Set the info in "*su".','line_number':795,'multiline':False]['text':' just in case','line_number':812,'multiline':False]['text':' TODO: make this work if the case-folded text is longer than the original','line_number':816,'multiline':False]['text':' text. Currently an illegal byte causes wrong pointer computations.','line_number':817,'multiline':False]['text':' get caps flags for bad word','line_number':820,'multiline':False]['text':' Find the default language for sound folding.  We simply use the first','line_number':826,'multiline':False]['text':' one in 'spelllang' that supports sound folding.  That's good for when','line_number':827,'multiline':False]['text':' using multiple files for one language, it's not that bad when mixing','line_number':828,'multiline':False]['text':' languages (e.g., "pl,en").','line_number':829,'multiline':False]['text':' Soundfold the bad word with the default sound folding, so that we don't','line_number':840,'multiline':False]['text':' have to do this many times.','line_number':841,'multiline':False]['text':' If the word is not capitalised and spell_check() doesn't consider the','line_number':846,'multiline':False]['text':' word to be bad then it might need to be capitalised.  Add a suggestion','line_number':847,'multiline':False]['text':' for that.','line_number':848,'multiline':False]['text':' Ban the bad word itself.  It may appear in another region.','line_number':857,'multiline':False]['text':' Make a copy of 'spellsuggest', because the expression may change it.','line_number':861,'multiline':False]['text':' Loop over the items in 'spellsuggest'.','line_number':867,'multiline':False]['text':' Evaluate an expression.  Skip this when called recursively,','line_number':875,'multiline':False]['text':' when using spellsuggest() in the expression.','line_number':876,'multiline':False]['text':' Use list of suggestions in a file.','line_number':886,'multiline':False]['text':' Limit the time searching for suggestions.','line_number':889,'multiline':False]['text':' Use internal method once.','line_number':893,'multiline':False]['text':' Combine the two list of suggestions.  This must be done last,','line_number':904,'multiline':False]['text':' because sorting changes the order again.','line_number':905,'multiline':False]['text':'
 * Find suggestions by evaluating expression "expr".
 ','line_number':910,'multiline':True]['text':' The work is split up in a few parts to avoid having to export','line_number':921,'multiline':False]['text':' suginfo_T.','line_number':922,'multiline':False]['text':' First evaluate the expression and get the resulting list.','line_number':923,'multiline':False]['text':' Loop over the items in the list.','line_number':927,'multiline':False]['text':' Get the word and the score from the items.','line_number':931,'multiline':False]['text':' Remove bogus suggestions, sort and truncate at "maxcount".','line_number':940,'multiline':False]['text':'
 * Find suggestions in file "fname".  Used for "file:" in 'spellsuggest'.
 ','line_number':946,'multiline':True]['text':' Open the file.','line_number':958,'multiline':False]['text':' Read it line by line.','line_number':966,'multiline':False]['text':' No Tab found, just skip the line.','line_number':973,'multiline':False]['text':' Match!  Isolate the good word, until CR or NL.','line_number':977,'multiline':False]['text':' If the suggestion doesn't have specific case duplicate the case','line_number':982,'multiline':False]['text':' of the bad word.','line_number':983,'multiline':False]['text':' Remove bogus suggestions, sort and truncate at "maxcount".','line_number':997,'multiline':False]['text':'
 * Find suggestions for the internal method indicated by "sps_flags".
 ','line_number':1002,'multiline':True]['text':' Load the .sug file(s) that are available and not done yet.','line_number':1008,'multiline':False]['text':' 1. Try special cases, such as repeating a word: "the the" -> "the".','line_number':1011,'multiline':False]['text':'','line_number':1012,'multiline':False]['text':' Set a maximum score to limit the combination of operations that is','line_number':1013,'multiline':False]['text':' tried.','line_number':1014,'multiline':False]['text':' 2. Try inserting/deleting/swapping/changing a letter, use REP entries','line_number':1017,'multiline':False]['text':'    from the .aff file and inserting a space (split the word).','line_number':1018,'multiline':False]['text':' For the resulting top-scorers compute the sound-a-like score.','line_number':1021,'multiline':False]['text':' 3. Try finding sound-a-like words.','line_number':1025,'multiline':False]['text':' Adjust the word score for the suggestions found so far for how','line_number':1029,'multiline':False]['text':' they sound like.','line_number':1030,'multiline':False]['text':' While going through the soundfold tree "su_maxscore" is the score','line_number':1033,'multiline':False]['text':' for the soundfold word, limits the changes that are being tried,','line_number':1034,'multiline':False]['text':' and "su_sfmaxscore" the rescored score, which is set by','line_number':1035,'multiline':False]['text':' cleanup_suggestions().','line_number':1036,'multiline':False]['text':' First find words with a small edit distance, because this is much','line_number':1037,'multiline':False]['text':' faster and often already finds the top-N suggestions.  If we didn't','line_number':1038,'multiline':False]['text':' find many suggestions try again with a higher edit distance.','line_number':1039,'multiline':False]['text':' "sl_sounddone" is used to avoid doing the same word twice.','line_number':1040,'multiline':False]['text':' We didn't find enough matches, try again, allowing more','line_number':1047,'multiline':False]['text':' changes to the soundfold word.','line_number':1048,'multiline':False]['text':' Still didn't find enough matches, try again, allowing even','line_number':1053,'multiline':False]['text':' more changes to the soundfold word.','line_number':1054,'multiline':False]['text':' When CTRL-C was hit while searching do show the results.  Only clear','line_number':1063,'multiline':False]['text':' got_int when using a command, not for spellsuggest().','line_number':1064,'multiline':False]['text':' Adjust the word score for how it sounds like.','line_number':1075,'multiline':False]['text':' Remove bogus suggestions, sort and truncate at "maxcount".','line_number':1078,'multiline':False]['text':'
 * Free the info put in "*su" by spell_find_suggest().
 ','line_number':1084,'multiline':True]['text':' Free the suggestions.','line_number':1092,'multiline':False]['text':' Free the banned words.','line_number':1100,'multiline':False]['text':'
 * Try finding suggestions by recognizing specific situations.
 ','line_number':1104,'multiline':True]['text':' Recognize a word that is repeated: "the the".','line_number':1115,'multiline':False]['text':' Include badflags: if the badword is onecap or allcap','line_number':1121,'multiline':False]['text':' use that for the goodword too: "The the" -> "The".','line_number':1122,'multiline':False]['text':' Give a soundalike score of 0, compute the score as if deleting one','line_number':1128,'multiline':False]['text':' character.','line_number':1129,'multiline':False]['text':'
 * Change the 0 to 1 to measure how much time is spent in each state.
 * Output is dumped in "suggestprof".
 ','line_number':1135,'multiline':True]['text':' call before changing state','line_number':1158,'multiline':False]['text':'
 * Try finding suggestions by adding/removing/swapping letters.
 ','line_number':1185,'multiline':True]['text':' copy of the bad word, case-folded','line_number':1191,'multiline':False]['text':' We make a copy of the case-folded bad word, so that we can modify it','line_number':1197,'multiline':False]['text':' to find matches (esp. REP items).  Append some more text, changing','line_number':1198,'multiline':False]['text':' chars after the bad word may help.','line_number':1199,'multiline':False]['text':' Make sure the resulting text is not longer than the original text.','line_number':1205,'multiline':False]['text':' If reloading a spell file fails it's still in the list but','line_number':1214,'multiline':False]['text':' everything has been cleared.','line_number':1215,'multiline':False]['text':' Try it for this language.  Will add possible suggestions.','line_number':1219,'multiline':False]['text':' Check the maximum score, if we go over it we won't try this change.','line_number':1230,'multiline':False]['text':'
 * Try finding suggestions by adding/removing/swapping letters.
 *
 * This uses a state machine.  At each node in the tree we try various
 * operations.  When trying if an operation works "depth" is increased and the
 * stack[] is used to store info.  This allows combinations, thus insert one
 * character, replace one and delete another.  The number of changes is
 * limited by su->su_maxscore.
 *
 * After implementing this I noticed an article by Kemal Oflazer that
 * describes something similar: "Error-tolerant Finite State Recognition with
 * Applications to Morphological Analysis and Spelling Correction" (1996).
 * The implementation in the article is simplified and requires a stack of
 * unknown depth.  The implementation here only needs a stack depth equal to
 * the length of the word.
 *
 * This is also used for the sound-folded word, "soundfold" is TRUE then.
 * The mechanism is the same, but we find a match with a sound-folded word
 * that comes from one or more original words.  Each of these words may be
 * added, this is done by add_sound_suggest().
 * Don't use:
 *	the prefix tree or the keep-case tree
 *	"su->su_badlen"
 *	anything to do with upper and lower case
 *	anything to do with word or non-word characters ("spell_iswordp()")
 *	banned words
 *	word flags (rare, region, compounding)
 *	word splitting for now
 *	"similar_chars()"
 *	use "slang->sl_repsal" instead of "lp->lp_replang->sl_rep"
 ','line_number':1234,'multiline':True]['text':' good word collected so far','line_number':1272,'multiline':False]['text':' word found with proper case;','line_number':1274,'multiline':False]['text':' concatenation of prefix compound','line_number':1275,'multiline':False]['text':' words and split word.  NUL terminated','line_number':1276,'multiline':False]['text':' when going deeper but not when coming','line_number':1277,'multiline':False]['text':' back.','line_number':1278,'multiline':False]['text':' compound flags, one for each word','line_number':1279,'multiline':False]['text':' extra bytes in fword[] from REP item','line_number':1295,'multiline':False]['text':' Stores the name of the change made at each level.','line_number':1300,'multiline':False]['text':' Go through the whole case-fold tree, try changes at each node.','line_number':1309,'multiline':False]['text':' "tword[]" contains the word collected from nodes in the tree.','line_number':1310,'multiline':False]['text':' "fword[]" the word we are trying to match with (initially the bad','line_number':1311,'multiline':False]['text':' word).','line_number':1312,'multiline':False]['text':' Going through the soundfold tree.','line_number':1320,'multiline':False]['text':' When there are postponed prefixes we need to use these first.  At','line_number':1330,'multiline':False]['text':' the end of the prefix we continue in the case-fold tree.','line_number':1331,'multiline':False]['text':' try without prefix first','line_number':1341,'multiline':False]['text':' The loop may take an indefinite amount of time. Break out after some','line_number':1352,'multiline':False]['text':' time.','line_number':1353,'multiline':False]['text':' Loop to find all suggestions.  At each round we either:','line_number':1358,'multiline':False]['text':' - For the current state try one operation, advance "ts_curi",','line_number':1359,'multiline':False]['text':'   increase "depth".','line_number':1360,'multiline':False]['text':' - When a state is done go to the next, set "ts_state".','line_number':1361,'multiline':False]['text':' - When all states are tried decrease "depth".','line_number':1362,'multiline':False]['text':' Start of node: Deal with NUL bytes, which means','line_number':1370,'multiline':False]['text':' tword[] may end here.','line_number':1371,'multiline':False]['text':' current node in the tree','line_number':1372,'multiline':False]['text':' bytes in this node','line_number':1373,'multiline':False]['text':' index of current byte','line_number':1374,'multiline':False]['text':' Skip over the NUL bytes, we use them later.','line_number':1378,'multiline':False]['text':' Always past NUL bytes now.','line_number':1383,'multiline':False]['text':' At end of a prefix or at start of prefixtree: check for','line_number':1389,'multiline':False]['text':' following word.','line_number':1390,'multiline':False]['text':' Set su->su_badflags to the caps type at this position.','line_number':1394,'multiline':False]['text':' Use the caps type until here for the prefix itself.','line_number':1395,'multiline':False]['text':' Move the prefix to preword[] with the right case','line_number':1414,'multiline':False]['text':' and make find_keepcap_word() works.','line_number':1415,'multiline':False]['text':' Past bytes in node and/or past NUL bytes.','line_number':1427,'multiline':False]['text':' End of word in tree.','line_number':1434,'multiline':False]['text':' eat one NUL byte','line_number':1435,'multiline':False]['text':' Skip words with the NOSUGGEST flag.','line_number':1439,'multiline':False]['text':' There was a prefix before the word.  Check that the prefix','line_number':1453,'multiline':False]['text':' can be used with this word.','line_number':1454,'multiline':False]['text':' Count the length of the NULs in the prefix.  If there are','line_number':1455,'multiline':False]['text':' none this must be the first try without a prefix.','line_number':1456,'multiline':False]['text':' Use the WF_RARE flag for a rare prefix.','line_number':1468,'multiline':False]['text':' Tricky: when checking for both prefix and compounding','line_number':1472,'multiline':False]['text':' we run into the prefix flag first.','line_number':1473,'multiline':False]['text':' Remember that it's OK, so that we accept the prefix','line_number':1474,'multiline':False]['text':' when arriving at a compound flag.','line_number':1475,'multiline':False]['text':' Check NEEDCOMPOUND: can't use word without compounding.  Do try','line_number':1480,'multiline':False]['text':' appending another compound word below.','line_number':1481,'multiline':False]['text':' There was a word before this word.  When there was no','line_number':1494,'multiline':False]['text':' change in this word (it was correct) add the first word','line_number':1495,'multiline':False]['text':' as a suggestion.  If this word was corrected too, we','line_number':1496,'multiline':False]['text':' need to check if a correct word follows.','line_number':1497,'multiline':False]['text':' Add the suggestion if the score isn't too bad.','line_number':1508,'multiline':False]['text':' There was a compound word before this word.  If this','line_number':1519,'multiline':False]['text':' word does not support compounding then give up','line_number':1520,'multiline':False]['text':' (splitting is tried for the word without compound','line_number':1521,'multiline':False]['text':' flag).','line_number':1522,'multiline':False]['text':' For multi-byte chars check character length against','line_number':1527,'multiline':False]['text':' COMPOUNDMIN.','line_number':1528,'multiline':False]['text':' Verify CHECKCOMPOUNDPATTERN  rules.','line_number':1541,'multiline':False]['text':' Compound is not allowed.  But it may still be','line_number':1553,'multiline':False]['text':' possible if we add another (short) word.','line_number':1554,'multiline':False]['text':' Get pointer to last char of previous word.','line_number':1558,'multiline':False]['text':' Form the word with proper case in preword.','line_number':1564,'multiline':False]['text':' If there is a word from a previous split, append.','line_number':1565,'multiline':False]['text':' For the soundfold tree don't change the case, simply append.','line_number':1566,'multiline':False]['text':' Must find the word in the keep-case tree.','line_number':1570,'multiline':False]['text':' Include badflags: If the badword is onecap or allcap','line_number':1575,'multiline':False]['text':' use that for the goodword too.  But if the badword is','line_number':1576,'multiline':False]['text':' allcap and it's only one char long use onecap.','line_number':1577,'multiline':False]['text':' When appending a compound word after a word character don't','line_number':1584,'multiline':False]['text':' use Onecap.','line_number':1585,'multiline':False]['text':' Don't use a banned word.  It may appear again as a good','line_number':1594,'multiline':False]['text':' word, thus remember it.','line_number':1595,'multiline':False]['text':' the word so far was banned but we may try compounding','line_number':1607,'multiline':False]['text':' soundfold words don't have flags','line_number':1613,'multiline':False]['text':' TODO: how about splitting in the soundfold tree?','line_number':1626,'multiline':False]['text':' The badword also ends: add suggestions.','line_number':1632,'multiline':False]['text':' print the stack of changes that brought us here','line_number':1638,'multiline':False]['text':' For soundfolded words we need to find the original','line_number':1646,'multiline':False]['text':' words, the edit distance and then add them.','line_number':1647,'multiline':False]['text':' Give a penalty when changing non-word char to word','line_number':1652,'multiline':False]['text':' char, e.g., "thes," -> "these".','line_number':1653,'multiline':False]['text':' Give a bonus to words seen before.','line_number':1664,'multiline':False]['text':' Add the suggestion if the score isn't too bad.','line_number':1670,'multiline':False]['text':' We really don't know if the word should be','line_number':1679,'multiline':False]['text':' upper or lower case, add both.','line_number':1680,'multiline':False]['text':' Try word split and/or compounding.','line_number':1698,'multiline':False]['text':' Don't split halfway a character.','line_number':1700,'multiline':False]['text':' If past the end of the bad word don't try a split.','line_number':1706,'multiline':False]['text':' Otherwise try changing the next word.  E.g., find','line_number':1707,'multiline':False]['text':' suggestions for "the the" where the second "the" is','line_number':1708,'multiline':False]['text':' different.  It's done like a split.','line_number':1709,'multiline':False]['text':' TODO: word split for soundfold words','line_number':1710,'multiline':False]['text':' Get here in several situations:','line_number':1714,'multiline':False]['text':' 1. The word in the tree ends:','line_number':1715,'multiline':False]['text':'    If the word allows compounding try that.  Otherwise try','line_number':1716,'multiline':False]['text':'    a split by inserting a space.  For both check that a','line_number':1717,'multiline':False]['text':'    valid words starts at fword[sp->ts_fidx].','line_number':1718,'multiline':False]['text':'    For NOBREAK do like compounding to be able to check if','line_number':1719,'multiline':False]['text':'    the next word is valid.','line_number':1720,'multiline':False]['text':' 2. The badword does end, but it was due to a change (e.g.,','line_number':1721,'multiline':False]['text':'    a swap).  No need to split, but do check that the','line_number':1722,'multiline':False]['text':'    following word is valid.','line_number':1723,'multiline':False]['text':' 3. The badword and the word in the tree end.  It may still','line_number':1724,'multiline':False]['text':'    be possible to compound another (short) word.','line_number':1725,'multiline':False]['text':' For NOBREAK we never try splitting, it won't make any word','line_number':1749,'multiline':False]['text':' valid.','line_number':1750,'multiline':False]['text':' If we could add a compound word, and it's also possible to','line_number':1754,'multiline':False]['text':' split at this point, do the split first and set','line_number':1755,'multiline':False]['text':' TSF_DIDSPLIT to avoid doing it again.','line_number':1756,'multiline':False]['text':' do the same NUL again','line_number':1763,'multiline':False]['text':' If we're going to split need to check that the','line_number':1773,'multiline':False]['text':' words so far are valid for compounding.  If there','line_number':1774,'multiline':False]['text':' is only one word it must not have the NEEDCOMPOUND','line_number':1775,'multiline':False]['text':' flag.','line_number':1776,'multiline':False]['text':' Give a bonus to words seen before.','line_number':1793,'multiline':False]['text':' Save things to be restored at STATE_SPLITUNDO.','line_number':1809,'multiline':False]['text':' Append a space to preword when splitting.','line_number':1817,'multiline':False]['text':' If the badword has a non-word character at this','line_number':1824,'multiline':False]['text':' position skip it.  That means replacing the','line_number':1825,'multiline':False]['text':' non-word character with a space.  Always skip a','line_number':1826,'multiline':False]['text':' character when the word ends.  But only when the','line_number':1827,'multiline':False]['text':' good word can end.','line_number':1828,'multiline':False]['text':' Copy the skipped character to preword.','line_number':1841,'multiline':False]['text':' When compounding include compound flag in','line_number':1852,'multiline':False]['text':' compflags[] (already set above).  When splitting we','line_number':1853,'multiline':False]['text':' may start compounding over again.','line_number':1854,'multiline':False]['text':' set su->su_badflags to the caps type at this','line_number':1861,'multiline':False]['text':' position','line_number':1862,'multiline':False]['text':' Restart at top of the tree.','line_number':1870,'multiline':False]['text':' If there are postponed prefixes, try these too.','line_number':1873,'multiline':False]['text':' Undo the changes done for word split or compound word.','line_number':1888,'multiline':False]['text':' Continue looking for NUL bytes.','line_number':1891,'multiline':False]['text':' In case we went into the prefix tree.','line_number':1895,'multiline':False]['text':' Past the NUL bytes in the node.','line_number':1901,'multiline':False]['text':' The badword ends, can't use STATE_PLAIN.','line_number':1905,'multiline':False]['text':' FALLTHROUGH','line_number':1912,'multiline':False]['text':' Go over all possible bytes at this node, add each to tword[]','line_number':1915,'multiline':False]['text':' and use child node.  "ts_curi" is the index.','line_number':1916,'multiline':False]['text':' Done all bytes at this node, do next state.  When still at','line_number':1920,'multiline':False]['text':' already changed bytes skip the other tricks.','line_number':1921,'multiline':False]['text':' Normal byte, go one level deeper.  If it's not equal to the','line_number':1933,'multiline':False]['text':' byte in the bad word adjust the score.  But don't even try','line_number':1934,'multiline':False]['text':' when the byte was already changed.  And don't try when we','line_number':1935,'multiline':False]['text':' just deleted this byte, accepting it is always cheaper than','line_number':1936,'multiline':False]['text':' delete + substitute.','line_number':1937,'multiline':False]['text':' Multi-byte characters are a bit complicated to','line_number':1970,'multiline':False]['text':' handle: They differ when any of the bytes differ','line_number':1971,'multiline':False]['text':' and then their length may also differ.','line_number':1972,'multiline':False]['text':' First byte.','line_number':1975,'multiline':False]['text':' When inserting trail bytes don't advance in the','line_number':1984,'multiline':False]['text':' bad word.','line_number':1985,'multiline':False]['text':' Last byte of character.','line_number':1989,'multiline':False]['text':' Correct ts_fidx for the byte length of the','line_number':1992,'multiline':False]['text':' character (we didn't check that before).','line_number':1993,'multiline':False]['text':' For changing a composing character adjust','line_number':1997,'multiline':False]['text':' the score from SCORE_SUBST to','line_number':1998,'multiline':False]['text':' SCORE_SUBCOMP.','line_number':1999,'multiline':False]['text':' For a similar character adjust score from','line_number':2011,'multiline':False]['text':' SCORE_SUBST to SCORE_SIMILAR.','line_number':2012,'multiline':False]['text':' Inserting a composing char doesn't','line_number':2031,'multiline':False]['text':' count that much.','line_number':2032,'multiline':False]['text':' If the previous character was the same,','line_number':2037,'multiline':False]['text':' thus doubling a character, give a bonus','line_number':2038,'multiline':False]['text':' to the score.  Also for the soundfold','line_number':2039,'multiline':False]['text':' tree (might seem illogical but does','line_number':2040,'multiline':False]['text':' give better scores).','line_number':2041,'multiline':False]['text':' Starting a new char, reset the length.','line_number':2049,'multiline':False]['text':' If we found a similar char adjust the score.','line_number':2055,'multiline':False]['text':' We do this after calling go_deeper() because','line_number':2056,'multiline':False]['text':' it's slow.','line_number':2057,'multiline':False]['text':' When past the first byte of a multi-byte char don't try','line_number':2070,'multiline':False]['text':' delete/insert/swap a character.','line_number':2071,'multiline':False]['text':' Try skipping one character in the bad word (delete it).','line_number':2078,'multiline':False]['text':' Deleting a vowel at the start of a word counts less, see','line_number':2083,'multiline':False]['text':' soundalike_score().','line_number':2084,'multiline':False]['text':' Remember what character we deleted, so that we can avoid','line_number':2099,'multiline':False]['text':' inserting it again.','line_number':2100,'multiline':False]['text':' Advance over the character in fword[].  Give a bonus to the','line_number':2104,'multiline':False]['text':' score if the same character is following "nn" -> "n".  It's','line_number':2105,'multiline':False]['text':' a bit illogical for soundfold tree but it does give better','line_number':2106,'multiline':False]['text':' results.','line_number':2107,'multiline':False]['text':' FALLTHROUGH','line_number':2125,'multiline':False]['text':' If we just deleted a byte then inserting won't make sense,','line_number':2130,'multiline':False]['text':' a substitute is always cheaper.','line_number':2131,'multiline':False]['text':' skip over NUL bytes','line_number':2137,'multiline':False]['text':' Only NUL bytes at this node, go to next state.','line_number':2143,'multiline':False]['text':' Found a byte to insert.','line_number':2150,'multiline':False]['text':' FALLTHROUGH','line_number':2159,'multiline':False]['text':' Insert one byte.  Repeat this for each possible byte at this','line_number':2162,'multiline':False]['text':' node.','line_number':2163,'multiline':False]['text':' Done all bytes at this node, go to next state.','line_number':2167,'multiline':False]['text':' Do one more byte at this node, but:','line_number':2173,'multiline':False]['text':' - Skip NUL bytes.','line_number':2174,'multiline':False]['text':' - Skip the byte if it's equal to the byte in the word,','line_number':2175,'multiline':False]['text':'   accepting that byte is always better.','line_number':2176,'multiline':False]['text':' break out, if we would be accessing byts buffer out of bounds','line_number':2179,'multiline':False]['text':' Inserting a vowel at the start of a word counts less,','line_number':2187,'multiline':False]['text':' see soundalike_score().','line_number':2188,'multiline':False]['text':' There are following bytes for the same character.','line_number':2210,'multiline':False]['text':' We must find all bytes before trying','line_number':2211,'multiline':False]['text':' delete/insert/swap/etc.','line_number':2212,'multiline':False]['text':' If the previous character was the same, thus doubling a','line_number':2222,'multiline':False]['text':' character, give a bonus to the score.  Also for','line_number':2223,'multiline':False]['text':' soundfold words (illogical but does give a better','line_number':2224,'multiline':False]['text':' score).','line_number':2225,'multiline':False]['text':' Swap two bytes in the bad word: "12" -> "21".','line_number':2234,'multiline':False]['text':' We change "fword" here, it's changed back afterwards at','line_number':2235,'multiline':False]['text':' STATE_UNSWAP.','line_number':2236,'multiline':False]['text':' End of word, can't swap or replace.','line_number':2241,'multiline':False]['text':' Don't swap if the first character is not a word character.','line_number':2247,'multiline':False]['text':' SWAP3 etc. also don't make sense then.','line_number':2248,'multiline':False]['text':' don't swap non-word char','line_number':2263,'multiline':False]['text':' don't swap non-word char','line_number':2272,'multiline':False]['text':' When the second character is NUL we can't swap.','line_number':2277,'multiline':False]['text':' When characters are identical, swap won't do anything.','line_number':2285,'multiline':False]['text':' Also get here if the second char is not a word character.','line_number':2286,'multiline':False]['text':' If this swap doesn't work then SWAP3 won't either.','line_number':2320,'multiline':False]['text':' Undo the STATE_SWAP swap: "21" -> "12".','line_number':2327,'multiline':False]['text':' FALLTHROUGH','line_number':2342,'multiline':False]['text':' Swap two bytes, skipping one: "123" -> "321".  We change','line_number':2345,'multiline':False]['text':' "fword" here, it's changed back afterwards at STATE_UNSWAP3.','line_number':2346,'multiline':False]['text':' don't swap non-word char','line_number':2355,'multiline':False]['text':' don't swap non-word char','line_number':2364,'multiline':False]['text':' When characters are identical: "121" then SWAP3 result is','line_number':2369,'multiline':False]['text':' identical, ROT3L result is same as SWAP: "211", ROT3L result is','line_number':2370,'multiline':False]['text':' same as SWAP on next char: "112".  Thus skip all swapping.','line_number':2371,'multiline':False]['text':' Also skip when c3 is NUL.','line_number':2372,'multiline':False]['text':' Also get here when the third character is not a word character.','line_number':2373,'multiline':False]['text':' Second character may any char: "a.b" -> "b.a"','line_number':2374,'multiline':False]['text':' Undo STATE_SWAP3: "321" -> "123"','line_number':2415,'multiline':False]['text':' Middle char is not a word char, skip the rotate.  First and','line_number':2439,'multiline':False]['text':' third char were already checked at swap and swap3.','line_number':2440,'multiline':False]['text':' Rotate three characters left: "123" -> "231".  We change','line_number':2446,'multiline':False]['text':' "fword" here, it's changed back afterwards at STATE_UNROT3L.','line_number':2447,'multiline':False]['text':' Undo ROT3L: "231" -> "123"','line_number':2488,'multiline':False]['text':' Rotate three bytes right: "123" -> "312".  We change "fword"','line_number':2507,'multiline':False]['text':' here, it's changed back afterwards at STATE_UNROT3R.','line_number':2508,'multiline':False]['text':' Undo ROT3R: "312" -> "123"','line_number':2549,'multiline':False]['text':' FALLTHROUGH','line_number':2567,'multiline':False]['text':' Check if matching with REP items from the .aff file would work.','line_number':2570,'multiline':False]['text':' Quickly skip if:','line_number':2571,'multiline':False]['text':' - there are no REP items and we are not in the soundfold trie','line_number':2572,'multiline':False]['text':' - the score is going to be too high anyway','line_number':2573,'multiline':False]['text':' - already applied a REP item or swapped here','line_number':2574,'multiline':False]['text':' Use the first byte to quickly find the first entry that may','line_number':2584,'multiline':False]['text':' match.  If the index is -1 there is none.','line_number':2585,'multiline':False]['text':' FALLTHROUGH','line_number':2600,'multiline':False]['text':' Try matching with REP items from the .aff file.  For each match','line_number':2603,'multiline':False]['text':' replace the characters and check if the resulting word is','line_number':2604,'multiline':False]['text':' valid.','line_number':2605,'multiline':False]['text':' past possible matching entries','line_number':2617,'multiline':False]['text':' Need to undo this afterwards.','line_number':2630,'multiline':False]['text':' Change the "from" to the "to" string.','line_number':2634,'multiline':False]['text':' No (more) matches.','line_number':2652,'multiline':False]['text':' Undo a REP replacement and continue with the next one.','line_number':2660,'multiline':False]['text':' Did all possible states at this level, go up one level.','line_number':2680,'multiline':False]['text':' Continue in or go back to the prefix tree.','line_number':2685,'multiline':False]['text':' Don't check for CTRL-C too often, it takes time.','line_number':2690,'multiline':False]['text':'
 * Go one level deeper in the tree.
 ','line_number':2706,'multiline':True]['text':' start just after length byte','line_number':2715,'multiline':False]['text':'
 * "fword" is a good word with case folded.  Find the matching keep-case
 * words and put it in "kword".
 * Theoretically there could be several keep-case words that result in the
 * same case-folded word, but we only find one...
 ','line_number':2719,'multiline':True]['text':' "fword" in upper-case','line_number':2728,'multiline':False]['text':' The following arrays are used at each depth in the tree.','line_number':2732,'multiline':False]['text':' array with bytes of the words','line_number':2745,'multiline':False]['text':' array with indexes','line_number':2746,'multiline':False]['text':' array is empty: "cannot happen"','line_number':2750,'multiline':False]['text':' Make an all-cap version of "fword".','line_number':2755,'multiline':False]['text':' Each character needs to be tried both case-folded and upper-case.','line_number':2758,'multiline':False]['text':' All this gets very complicated if we keep in mind that changing case','line_number':2759,'multiline':False]['text':' may change the byte length of a multi-byte character...','line_number':2760,'multiline':False]['text':' We are at the end of "fword".  If the tree allows a word to end','line_number':2771,'multiline':False]['text':' here we have found a match.','line_number':2772,'multiline':False]['text':' kword is getting too long, continue one level up','line_number':2779,'multiline':False]['text':' tried both fold-case and upper-case character, continue one','line_number':2784,'multiline':False]['text':' level up','line_number':2785,'multiline':False]['text':' round[depth] == 1: Try using the folded-case character.','line_number':2790,'multiline':False]['text':' round[depth] == 2: Try using the upper-case character.','line_number':2791,'multiline':False]['text':' Perform a binary search in the list of accepted bytes.','line_number':2812,'multiline':False]['text':' Stop if there is no matching byte.','line_number':2831,'multiline':False]['text':' Continue at the child (if there is one).','line_number':2835,'multiline':False]['text':' Found the matching char.  Copy it to "kword" and go a','line_number':2841,'multiline':False]['text':' level deeper.','line_number':2842,'multiline':False]['text':' Didn't find it: "cannot happen".','line_number':2865,'multiline':False]['text':'
 * Compute the sound-a-like score for suggestions in su->su_ga and add them to
 * su->su_sga.
 ','line_number':2869,'multiline':True]['text':' Use the sound-folding of the first language that supports it.','line_number':2887,'multiline':False]['text':' soundfold the bad word','line_number':2893,'multiline':False]['text':' Case-fold the suggested word, sound-fold it and compute the','line_number':2900,'multiline':False]['text':' sound-a-like score.','line_number':2901,'multiline':False]['text':' Add the suggestion.','line_number':2905,'multiline':False]['text':'
 * Combine the list of suggestions in su->su_ga and su->su_sga.
 * They are entwined.
 ','line_number':2923,'multiline':True]['text':' Add the alternate score to su_ga.','line_number':2942,'multiline':False]['text':' soundfold the bad word','line_number':2948,'multiline':False]['text':' Using "double" without sound folding.','line_number':2967,'multiline':False]['text':' Add the alternate score to su_sga.','line_number':2974,'multiline':False]['text':' Remove bad suggestions, sort the suggestions and truncate at "maxcount"','line_number':2987,'multiline':False]['text':' for both lists.','line_number':2988,'multiline':False]['text':' round 1: get a suggestion from su_ga','line_number':3001,'multiline':False]['text':' round 2: get a suggestion from su_sga','line_number':3002,'multiline':False]['text':' Don't add a word if it's already there.','line_number':3008,'multiline':False]['text':' Truncate the list to the number of suggestions that will be displayed.','line_number':3024,'multiline':False]['text':'
 * For the goodword in "stp" compute the soundalike score compared to the
 * badword.
 ','line_number':3035,'multiline':True]['text':' sound-folded badword','line_number':3044,'multiline':False]['text':' soundfold the bad word with more characters following','line_number':3060,'multiline':False]['text':' When joining two words the sound often changes a lot.  E.g., "t he"','line_number':3064,'multiline':False]['text':' sounds like "t h" while "the" sounds like "@".  Avoid that by','line_number':3065,'multiline':False]['text':' removing the space.  Don't do it when the good word also contains a','line_number':3066,'multiline':False]['text':' space.','line_number':3067,'multiline':False]['text':' Add part of the bad word to the good word, so that we soundfold','line_number':3079,'multiline':False]['text':' what replaces the bad word.','line_number':3080,'multiline':False]['text':' Sound-fold the word and compute the score for the difference.','line_number':3089,'multiline':False]['text':' structure used to store soundfolded words that add_sound_suggest() has','line_number':3095,'multiline':False]['text':' handled already.','line_number':3096,'multiline':False]['text':' lowest score used','line_number':3099,'multiline':False]['text':' soundfolded word, actually longer','line_number':3100,'multiline':False]['text':'
 * Prepare for calling suggest_try_soundalike().
 ','line_number':3107,'multiline':True]['text':' Do this for all languages that support sound folding and for which a','line_number':3117,'multiline':False]['text':' .sug file has been loaded.','line_number':3118,'multiline':False]['text':' prepare the hashtable used by add_sound_suggest()','line_number':3124,'multiline':False]['text':'
 * Find suggestions by comparing the word in a sound-a-like form.
 * Note: This doesn't support postponed prefixes.
 ','line_number':3129,'multiline':True]['text':' Do this for all languages that support sound folding and for which a','line_number':3141,'multiline':False]['text':' .sug file has been loaded.','line_number':3142,'multiline':False]['text':' soundfold the bad word','line_number':3149,'multiline':False]['text':' try all kinds of inserts/deletes/swaps/etc.','line_number':3152,'multiline':False]['text':' TODO: also soundfold the next words, so that we can try joining','line_number':3153,'multiline':False]['text':' and splitting','line_number':3154,'multiline':False]['text':'
 * Finish up after calling suggest_try_soundalike().
 ','line_number':3166,'multiline':True]['text':' Do this for all languages that support sound folding and for which a','line_number':3178,'multiline':False]['text':' .sug file has been loaded.','line_number':3179,'multiline':False]['text':' Free the info about handled words.','line_number':3186,'multiline':False]['text':' Clear the hashtable, it may also be used by another region.','line_number':3195,'multiline':False]['text':'
 * A match with a soundfolded word is found.  Add the good word(s) that
 * produce this soundfolded word.
 ','line_number':3202,'multiline':True]['text':' soundfold score','line_number':3210,'multiline':False]['text':' language for sound folding','line_number':3213,'multiline':False]['text':' It's very well possible that the same soundfold word is found several','line_number':3232,'multiline':False]['text':' times with different scores.  Since the following is quite slow only do','line_number':3233,'multiline':False]['text':' the words that have a better score than before.  Use a hashtable to','line_number':3234,'multiline':False]['text':' remember the words that have been done.','line_number':3235,'multiline':False]['text':' Find the word nr in the soundfold tree.','line_number':3256,'multiline':False]['text':' go over the list of good words that produce this soundfold word','line_number':3264,'multiline':False]['text':' The wordnr was stored in a minimal nr of bytes as an offset to the','line_number':3269,'multiline':False]['text':' previous wordnr.','line_number':3270,'multiline':False]['text':' Lookup the word "orgnr" one of the two tries.','line_number':3276,'multiline':False]['text':' found end of word','line_number':3283,'multiline':False]['text':' skip over the NUL bytes','line_number':3288,'multiline':False]['text':' safety check','line_number':3290,'multiline':False]['text':' One of the siblings must have the word.','line_number':3297,'multiline':False]['text':' nr of words under this byte','line_number':3300,'multiline':False]['text':' Go over the possible flags and regions.','line_number':3312,'multiline':False]['text':' Skip words with the NOSUGGEST flag','line_number':3319,'multiline':False]['text':' Must find the word in the keep-case tree.','line_number':3325,'multiline':False]['text':' Need to fix case according to "flags".','line_number':3334,'multiline':False]['text':' Add the suggestion.','line_number':3342,'multiline':False]['text':' Add the suggestion if the score isn't too bad.','line_number':3345,'multiline':False]['text':' Add a penalty for words in another region.','line_number':3352,'multiline':False]['text':' Add a small penalty for changing the first letter from','line_number':3359,'multiline':False]['text':' lower to upper case.  Helps for "tath" -> "Kath", which is','line_number':3360,'multiline':False]['text':' less common than "tath" -> "path".  Don't do it when the','line_number':3361,'multiline':False]['text':' letter is the same, that has already been counted.','line_number':3362,'multiline':False]['text':' Compute the score for the good word.  This only does letter','line_number':3372,'multiline':False]['text':' insert/delete/swap/replace.  REP items are not considered,','line_number':3373,'multiline':False]['text':' which may make the score a bit higher.','line_number':3374,'multiline':False]['text':' Use a limit for the score to make it work faster.  Use','line_number':3375,'multiline':False]['text':' MAXSCORE(), because RESCORE() will change the score.','line_number':3376,'multiline':False]['text':' If the limit is very high then the iterative method is','line_number':3377,'multiline':False]['text':' inefficient, using an array is quicker.','line_number':3378,'multiline':False]['text':' When going over the limit don't bother to do the rest.','line_number':3386,'multiline':False]['text':' Give a bonus to words seen before.','line_number':3389,'multiline':False]['text':' Add the suggestion if the score isn't too bad.','line_number':3392,'multiline':False]['text':' smsg("word %s (%d): %s (%d)", sftword, sftnr, theword, orgnr);','line_number':3400,'multiline':False]['text':'
 * Find word "word" in fold-case tree for "slang" and return the word number.
 ','line_number':3404,'multiline':True]['text':' First byte is the number of possible bytes.','line_number':3424,'multiline':False]['text':' If the first possible byte is a zero the word could end here.','line_number':3427,'multiline':False]['text':' If the word ends we found the word.  If not skip the NUL bytes.','line_number':3428,'multiline':False]['text':' Skip over the zeros, there can be several.','line_number':3435,'multiline':False]['text':' no children, word should have ended here','line_number':3442,'multiline':False]['text':' If the word ends we didn't find it.','line_number':3446,'multiline':False]['text':' Perform a binary search in the list of accepted bytes.','line_number':3450,'multiline':False]['text':' <Tab> is handled like <Space>','line_number':3451,'multiline':False]['text':' The word count is in the first idxs[] entry of the child.','line_number':3455,'multiline':False]['text':' end of the bytes, didn't find it','line_number':3458,'multiline':False]['text':' didn't find the byte','line_number':3461,'multiline':False]['text':' Continue at the child (if there is one).','line_number':3464,'multiline':False]['text':' One space in the good word may stand for several spaces in the','line_number':3468,'multiline':False]['text':' checked word.','line_number':3469,'multiline':False]['text':'
 * Return TRUE if "c1" and "c2" are similar characters according to the MAP
 * lines in the .aff file.
 ','line_number':3478,'multiline':True]['text':'
 * Add a suggestion to the list of suggestions.
 * For a suggestion that is already in the list the lowest score is remembered.
 ','line_number':3519,'multiline':True]['text':' either su_ga or su_sga','line_number':3526,'multiline':False]['text':' len of bad word replaced with "goodword"','line_number':3528,'multiline':False]['text':' value for st_had_bonus','line_number':3531,'multiline':False]['text':' language for sound folding','line_number':3532,'multiline':False]['text':' su_maxscore applies to soundfold score,','line_number':3533,'multiline':False]['text':' su_sfmaxscore to the total score.','line_number':3534,'multiline':False]['text':' len of goodword changed','line_number':3536,'multiline':False]['text':' len of bad word changed','line_number':3537,'multiline':False]['text':' Minimize "badlen" for consistency.  Avoids that changing "the the" to','line_number':3543,'multiline':False]['text':' "thee the" is added next to changing the first "the" the "thee".','line_number':3544,'multiline':False]['text':' goodword doesn't change anything; may happen for "the the" changing','line_number':3565,'multiline':False]['text':' the first "the" to itself.','line_number':3566,'multiline':False]['text':' Check if the word is already there.  Also check the length that is','line_number':3573,'multiline':False]['text':' being replaced "thes," -> "these" is a different suggestion from','line_number':3574,'multiline':False]['text':' "thes" -> "these".','line_number':3575,'multiline':False]['text':' Found it.  Remember the word with the lowest score.','line_number':3582,'multiline':False]['text':' Only one of the two had the soundalike score computed.','line_number':3592,'multiline':False]['text':' Need to do that for the other one now, otherwise the','line_number':3593,'multiline':False]['text':' scores can't be compared.  This happens because','line_number':3594,'multiline':False]['text':' suggest_try_change() doesn't compute the soundalike','line_number':3595,'multiline':False]['text':' word to keep it fast, while some special methods set','line_number':3596,'multiline':False]['text':' the soundalike score to zero.','line_number':3597,'multiline':False]['text':' Add a suggestion.','line_number':3622,'multiline':False]['text':' If we have too many suggestions now, sort the list and keep','line_number':3635,'multiline':False]['text':' the best suggestions.','line_number':3636,'multiline':False]['text':'
 * Suggestions may in fact be flagged as errors.  Esp. for banned words and
 * for split words, such as "the the".  Remove these from the list here.
 ','line_number':3650,'multiline':True]['text':' either su_ga or su_sga','line_number':3657,'multiline':False]['text':' Need to append what follows to check for "the the".','line_number':3670,'multiline':False]['text':' Remove this entry.','line_number':3679,'multiline':False]['text':'
 * Add a word to be banned.
 ','line_number':3690,'multiline':True]['text':' already present','line_number':3704,'multiline':False]['text':'
 * Recompute the score for all suggestions if sound-folding is possible.  This
 * is slow, thus only done for the final results.
 ','line_number':3711,'multiline':True]['text':'
 * Recompute the score for one suggestion if sound-folding is possible.
 ','line_number':3725,'multiline':True]['text':' Only rescore suggestions that have no sal score yet and do have a','line_number':3735,'multiline':False]['text':' language.','line_number':3736,'multiline':False]['text':'
 * Function given to qsort() to sort the suggestions on st_score.
 * First on "st_score", then "st_altscore" then alphabetically.
 ','line_number':3757,'multiline':True]['text':'
 * Cleanup the suggestions:
 * - Sort on score.
 * - Remove words that won't be displayed.
 * Returns the maximum score in the list or "maxscore" unmodified.
 ','line_number':3777,'multiline':True]['text':' nr of suggestions to keep','line_number':3787,'multiline':False]['text':' Sort the list.','line_number':3792,'multiline':False]['text':' Truncate the list to the number of suggestions that will be','line_number':3796,'multiline':False]['text':' displayed.','line_number':3797,'multiline':False]['text':'
 * Compute a score for two sound-a-like words.
 * This permits up to two inserts/deletes/swaps/etc. to keep things fast.
 * Instead of a generic loop we write out the code.  That keeps it fast by
 * avoiding checks that will not be possible.
 ','line_number':3812,'multiline':True]['text':' sound-folded good word','line_number':3820,'multiline':False]['text':' sound-folded bad word','line_number':3821,'multiline':False]['text':' Adding/inserting "*" at the start (word starts with vowel) shouldn't be','line_number':3832,'multiline':False]['text':' counted so much, vowels halfway the word aren't counted at all.','line_number':3833,'multiline':False]['text':' changing word with vowel to word without a sound','line_number':3838,'multiline':False]['text':' more than two changes','line_number':3841,'multiline':False]['text':' handle like a substitute','line_number':3849,'multiline':False]['text':' Return quickly if the lengths are too different to be fixed by two','line_number':3864,'multiline':False]['text':' changes.','line_number':3865,'multiline':False]['text':' goodsound is longest','line_number':3872,'multiline':False]['text':' badsound is longest','line_number':3877,'multiline':False]['text':' Skip over the identical part.','line_number':3881,'multiline':False]['text':' Must delete two characters from "pl".','line_number':3892,'multiline':False]['text':' first delete','line_number':3893,'multiline':False]['text':' strings must be equal after second delete','line_number':3899,'multiline':False]['text':' Failed to compare.','line_number':3903,'multiline':False]['text':' Minimal one delete from "pl" required.','line_number':3908,'multiline':False]['text':' 1: delete','line_number':3910,'multiline':False]['text':' reached the end','line_number':3915,'multiline':False]['text':' 2: delete then swap, then rest must be equal','line_number':3921,'multiline':False]['text':' 3: delete then substitute, then the rest must be equal','line_number':3926,'multiline':False]['text':' 4: first swap then delete','line_number':3930,'multiline':False]['text':' swap, skip two chars','line_number':3933,'multiline':False]['text':' delete a char and then strings must be equal','line_number':3940,'multiline':False]['text':' 5: first substitute then delete','line_number':3945,'multiline':False]['text':' substitute, skip one char','line_number':3946,'multiline':False]['text':' delete a char and then strings must be equal','line_number':3953,'multiline':False]['text':' Failed to compare.','line_number':3957,'multiline':False]['text':' Lengths are equal, thus changes must result in same length: An','line_number':3961,'multiline':False]['text':' insert is only possible in combination with a delete.','line_number':3962,'multiline':False]['text':' 1: check if for identical strings','line_number':3963,'multiline':False]['text':' 2: swap','line_number':3967,'multiline':False]['text':' swap, skip two chars','line_number':3970,'multiline':False]['text':' reached the end','line_number':3974,'multiline':False]['text':' 3: swap and swap again','line_number':3979,'multiline':False]['text':' 4: swap and substitute','line_number':3984,'multiline':False]['text':' 5: substitute','line_number':3989,'multiline':False]['text':' reached the end','line_number':3994,'multiline':False]['text':' 6: substitute and swap','line_number':4000,'multiline':False]['text':' 7: substitute and substitute','line_number':4005,'multiline':False]['text':' 8: insert then delete','line_number':4009,'multiline':False]['text':' 9: delete then insert','line_number':4020,'multiline':False]['text':' Failed to compare.','line_number':4031,'multiline':False]['text':'
 * Compute the "edit distance" to turn "badword" into "goodword".  The less
 * deletes/inserts/substitutes/swaps are required the lower the score.
 *
 * The algorithm is described by Du and Chang, 1992.
 * The implementation of the algorithm comes from Aspell editdist.cpp,
 * edit_distance().  It has been converted from C++ to C and modified to
 * support multi-byte characters.
 ','line_number':4038,'multiline':True]['text':' lengths including NUL','line_number':4054,'multiline':False]['text':' Get the characters from the multi-byte strings and put them in an','line_number':4065,'multiline':False]['text':' int array for easy access.','line_number':4066,'multiline':False]['text':' We use "cnt" as an array: CNT(badword_idx, goodword_idx).','line_number':4080,'multiline':False]['text':' out of memory','line_number':4084,'multiline':False]['text':' Use a better score when there is only a case difference.','line_number':4109,'multiline':False]['text':' For a similar character use SCORE_SIMILAR.','line_number':4114,'multiline':False]['text':'
 * Like spell_edit_score(), but with a limit on the score to make it faster.
 * May return SCORE_MAXMAX when the score is higher than "limit".
 *
 * This uses a stack for the edits still to be tried.
 * The idea comes from Aspell leditdist.cpp.  Rewritten in C and added support
 * for multi-byte characters.
 ','line_number':4164,'multiline':True]['text':' allow for over 3 * 2 edits','line_number':4179,'multiline':False]['text':' Multi-byte characters require a bit more work, use a different function','line_number':4189,'multiline':False]['text':' to avoid testing "has_mbyte" quite often.','line_number':4190,'multiline':False]['text':' The idea is to go from start to end over the words.  So long as','line_number':4194,'multiline':False]['text':' characters are equal just continue, this always gives the lowest score.','line_number':4195,'multiline':False]['text':' When there is a difference try several alternatives.  Each alternative','line_number':4196,'multiline':False]['text':' increases "score" for the edit distance.  Some of the alternatives are','line_number':4197,'multiline':False]['text':' pushed unto a stack and tried later, some are tried right away.  At the','line_number':4198,'multiline':False]['text':' end of the word the score for one alternative is known.  The lowest','line_number':4199,'multiline':False]['text':' possible score is stored in "minscore".','line_number':4200,'multiline':False]['text':' Skip over an equal part, score remains the same.','line_number':4209,'multiline':False]['text':' stop at a char that's different','line_number':4214,'multiline':False]['text':' both words end','line_number':4216,'multiline':False]['text':' do next alternative','line_number':4220,'multiline':False]['text':' goodword ends, delete badword chars','line_number':4226,'multiline':False]['text':' do next alternative','line_number':4231,'multiline':False]['text':' badword ends, insert badword chars','line_number':4235,'multiline':False]['text':' do next alternative','line_number':4240,'multiline':False]['text':' both words continue','line_number':4244,'multiline':False]['text':' If not close to the limit, perform a change.  Only try changes','line_number':4246,'multiline':False]['text':' that may lead to a lower score than "minscore".','line_number':4247,'multiline':False]['text':' round 0: try deleting a char from badword','line_number':4248,'multiline':False]['text':' round 1: try inserting a char in badword','line_number':4249,'multiline':False]['text':' Near the limit, rest of the words must match.  We','line_number':4257,'multiline':False]['text':' can check that right now, no need to push an item','line_number':4258,'multiline':False]['text':' onto the stack.','line_number':4259,'multiline':False]['text':' try deleting/inserting a character later','line_number':4275,'multiline':False]['text':' If swapping two characters makes a match then the','line_number':4286,'multiline':False]['text':' substitution is more expensive, thus there is no need to','line_number':4287,'multiline':False]['text':' try both.','line_number':4288,'multiline':False]['text':' Swap two characters, that is: skip them.','line_number':4291,'multiline':False]['text':' Substitute one character for another which is the same','line_number':4299,'multiline':False]['text':' thing as deleting a character from both goodword and badword.','line_number':4300,'multiline':False]['text':' Use a better score when there is only a case difference.','line_number':4301,'multiline':False]['text':' For a similar character use SCORE_SIMILAR.','line_number':4306,'multiline':False]['text':' Do the substitution.','line_number':4317,'multiline':False]['text':' Get here to try the next alternative, pop it from the stack.','line_number':4324,'multiline':False]['text':' stack is empty, finished','line_number':4325,'multiline':False]['text':' pop an item from the stack','line_number':4328,'multiline':False]['text':' When the score goes over "limit" it may actually be much higher.','line_number':4335,'multiline':False]['text':' Return a very large number to avoid going below the limit when giving a','line_number':4336,'multiline':False]['text':' bonus.','line_number':4337,'multiline':False]['text':'
 * Multi-byte version of spell_edit_score_limit().
 * Keep it in sync with the above!
 ','line_number':4343,'multiline':True]['text':' allow for over 3 * 2 edits','line_number':4354,'multiline':False]['text':' Get the characters from the multi-byte strings and put them in an','line_number':4367,'multiline':False]['text':' int array for easy access.','line_number':4368,'multiline':False]['text':' The idea is to go from start to end over the words.  So long as','line_number':4378,'multiline':False]['text':' characters are equal just continue, this always gives the lowest score.','line_number':4379,'multiline':False]['text':' When there is a difference try several alternatives.  Each alternative','line_number':4380,'multiline':False]['text':' increases "score" for the edit distance.  Some of the alternatives are','line_number':4381,'multiline':False]['text':' pushed unto a stack and tried later, some are tried right away.  At the','line_number':4382,'multiline':False]['text':' end of the word the score for one alternative is known.  The lowest','line_number':4383,'multiline':False]['text':' possible score is stored in "minscore".','line_number':4384,'multiline':False]['text':' Skip over an equal part, score remains the same.','line_number':4393,'multiline':False]['text':' stop at a char that's different','line_number':4399,'multiline':False]['text':' both words end','line_number':4401,'multiline':False]['text':' do next alternative','line_number':4405,'multiline':False]['text':' goodword ends, delete badword chars','line_number':4411,'multiline':False]['text':' do next alternative','line_number':4416,'multiline':False]['text':' badword ends, insert badword chars','line_number':4420,'multiline':False]['text':' do next alternative','line_number':4425,'multiline':False]['text':' both words continue','line_number':4429,'multiline':False]['text':' If not close to the limit, perform a change.  Only try changes','line_number':4431,'multiline':False]['text':' that may lead to a lower score than "minscore".','line_number':4432,'multiline':False]['text':' round 0: try deleting a char from badword','line_number':4433,'multiline':False]['text':' round 1: try inserting a char in badword','line_number':4434,'multiline':False]['text':' Near the limit, rest of the words must match.  We','line_number':4442,'multiline':False]['text':' can check that right now, no need to push an item','line_number':4443,'multiline':False]['text':' onto the stack.','line_number':4444,'multiline':False]['text':' try deleting a character from badword later','line_number':4460,'multiline':False]['text':' If swapping two characters makes a match then the','line_number':4471,'multiline':False]['text':' substitution is more expensive, thus there is no need to','line_number':4472,'multiline':False]['text':' try both.','line_number':4473,'multiline':False]['text':' Swap two characters, that is: skip them.','line_number':4476,'multiline':False]['text':' Substitute one character for another which is the same','line_number':4484,'multiline':False]['text':' thing as deleting a character from both goodword and badword.','line_number':4485,'multiline':False]['text':' Use a better score when there is only a case difference.','line_number':4486,'multiline':False]['text':' For a similar character use SCORE_SIMILAR.','line_number':4491,'multiline':False]['text':' Do the substitution.','line_number':4502,'multiline':False]['text':' Get here to try the next alternative, pop it from the stack.','line_number':4509,'multiline':False]['text':' stack is empty, finished','line_number':4510,'multiline':False]['text':' pop an item from the stack','line_number':4513,'multiline':False]['text':' When the score goes over "limit" it may actually be much higher.','line_number':4520,'multiline':False]['text':' Return a very large number to avoid going below the limit when giving a','line_number':4521,'multiline':False]['text':' bonus.','line_number':4522,'multiline':False]['text':' FEAT_SPELL','line_number':4527,'multiline':False]