['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 ','line_number':1,'multiline':True]['text':'
 * macros.h: macro definitions for often used code
 *
 * Macros should be ALL_CAPS.  An exception is for where a function is
 * replaced and an argument is not used more than once.
 ','line_number':9,'multiline':True]['text':'
 * Position comparisons
 ','line_number':16,'multiline':True]['text':'
 * VIM_ISWHITE() differs from isspace() because it doesn't include <CR> and
 * <LF> and the like.
 ','line_number':35,'multiline':True]['text':'
 * LINEEMPTY() - return TRUE if the line is empty
 ','line_number':43,'multiline':True]['text':'
 * BUFEMPTY() - return TRUE if the current buffer is empty
 ','line_number':48,'multiline':True]['text':'
 * toupper() and tolower() that use the current locale.
 * On some systems toupper()/tolower() only work on lower/uppercase
 * characters, first use islower() or isupper() then.
 * Careful: Only call TOUPPER_LOC() and TOLOWER_LOC() with a character in the
 * range 0 - 255.  toupper()/tolower() on some systems can't handle others.
 * Note: It is often better to use MB_TOLOWER() and MB_TOUPPER(), because many
 * toupper() and tolower() implementations only work for ASCII.
 ','line_number':53,'multiline':True]['text':' toupper() and tolower() for ASCII only and ignore the current locale.','line_number':75,'multiline':False]['text':'
 * MB_ISLOWER() and MB_ISUPPER() are to be used on multi-byte characters.  But
 * don't use them for negative values!
 ','line_number':79,'multiline':True]['text':' Use our own isdigit() replacement, because on MS-Windows isdigit() returns','line_number':89,'multiline':False]['text':' non-zero for superscript 1.  Also avoids that isdigit() crashes for numbers','line_number':90,'multiline':False]['text':' below 0 and above 255.','line_number':91,'multiline':False]['text':' Like isalpha() but reject non-ASCII characters.  Can't be used with a','line_number':94,'multiline':False]['text':' special key (negative value).','line_number':95,'multiline':False]['text':' Returns empty string if it is NULL.','line_number':101,'multiline':False]['text':'
 * Adjust chars in a language according to 'langmap' option.
 * NOTE that there is no noticeable overhead if 'langmap' is not set.
 * When set the overhead for characters < 256 is small.
 * Don't apply 'langmap' if the character comes from the Stuff buffer or from
 * a mapping and the langnoremap option was set.
 * The do-while is just to ignore a ';' after the macro.
 ','line_number':105,'multiline':True]['text':' nop','line_number':128,'multiline':False]['text':'
 * VIM_ISBREAK() is used very often if 'linebreak' is set, use a macro to make
 * it work fast.  Only works for single byte characters!
 ','line_number':131,'multiline':True]['text':'
 * On VMS file names are different and require a translation.
 * On the Mac open() has only two arguments.
 ','line_number':137,'multiline':True]['text':' see mch_open() comment','line_number':143,'multiline':False]['text':' VMS does not have lstat()','line_number':146,'multiline':False]['text':' Use 64-bit fstat function on MS-Windows.','line_number':153,'multiline':False]['text':' NOTE: This condition is the same as for the stat_T type.','line_number':154,'multiline':False]['text':' has its own mch_stat() function','line_number':161,'multiline':False]['text':'
 * It is possible to force some record format with:
 * #  define mch_open(n, m, p) open(vms_fixfilename(n), (m), (p)), "rat=cr", "rfm=stmlf", "mrs=0")
 * but it is not recommended, because it can destroy indexes etc.
 ','line_number':179,'multiline':True]['text':' mch_open_rw(): invoke mch_open() with third argument for user R/W.','line_number':187,'multiline':False]['text':' open in rw------- mode','line_number':188,'multiline':False]['text':' open read/write','line_number':191,'multiline':False]['text':'','line_number':201,'multiline':True]['text':' Whether to draw the vertical bar on the right side of the cell.','line_number':214,'multiline':False]['text':'
 * MB_PTR_ADV(): advance a pointer to the next character, taking care of
 * multi-byte characters if needed.
 * MB_PTR_BACK(): backup a pointer to the previous character, taking care of
 * multi-byte characters if needed.
 * MB_COPY_CHAR(f, t): copy one char from "f" to "t" and advance the pointers.
 * PTR2CHAR(): get character from pointer.
 ','line_number':218,'multiline':True]['text':' Advance multi-byte pointer, skip over composing chars.','line_number':226,'multiline':False]['text':' Advance multi-byte pointer, do not skip over composing chars.','line_number':228,'multiline':False]['text':' Backup multi-byte pointer. Only use with "p" > "s" !','line_number':230,'multiline':False]['text':' get length of multi-byte char, not including composing chars','line_number':232,'multiline':False]['text':'','line_number':244,'multiline':True]['text':' for isnan() and isinf()','line_number':264,'multiline':False]['text':'
 * In a hashtab item "hi_key" points to "di_key" in a dictitem.
 * This avoids adding a pointer to the hashtab item.
 * DI2HIKEY() converts a dictitem pointer to a hashitem key pointer.
 * HIKEY2DI() converts a hashitem key pointer to a dictitem pointer.
 * HI2DI() converts a hashitem pointer to a dictitem pointer.
 ','line_number':314,'multiline':True]['text':'
 * Flush control functions.
 ','line_number':325,'multiline':True]['text':'
 * Like vim_free(), and also set the pointer to NULL.
 ','line_number':336,'multiline':True]['text':' Whether a command index indicates a user command.','line_number':348,'multiline':False]['text':' Give an error in curwin is a popup window and evaluate to TRUE.','line_number':351,'multiline':False]['text':'','line_number':382,'multiline':True]['text':'','line_number':383,'multiline':True]['text':'','line_number':384,'multiline':True]['text':'','line_number':385,'multiline':True]['text':' Inline the condition for performance.','line_number':388,'multiline':False]['text':' Inlined version of ga_grow() with optimized condition that it fails.','line_number':395,'multiline':False]['text':' Inlined version of ga_grow() with optimized condition that it succeeds.','line_number':397,'multiline':False]['text':' Length of the array.','line_number':407,'multiline':False]['text':'
 * When using this macro "break" only breaks out of the inner loop. Use "goto"
 * to break out of the tabpage loop.
 ','line_number':426,'multiline':True]['text':' Iterate through all the signs placed in a buffer','line_number':446,'multiline':False]['text':' Iterate over all the items in a List','line_number':455,'multiline':False]['text':' Iterate over all the items in a hash table','line_number':459,'multiline':False]