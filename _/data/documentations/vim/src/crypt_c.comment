['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * crypt.c: Generic encryption support.
 ','line_number':10,'multiline':True]['text':'
 * Optional encryption support.
 * Mohsin Ahmed, mosh@sasi.com, 1998-09-24
 * Based on zip/crypt sources.
 * Refactored by David Leadbeater, 2014.
 *
 * NOTE FOR USA: Since 2000 exporting this code from the USA is allowed to
 * most countries.  There are a few exceptions, but that still should not be a
 * problem since this code was originally created in Europe and India.
 *
 * Blowfish addition originally made by Mohsin Ahmed,
 * http://www.cs.albany.edu/~mosh 2010-03-14
 * Based on blowfish by Bruce Schneier (http://www.schneier.com/blowfish.html)
 * and sha256 by Christophe Devine.
 ','line_number':16,'multiline':True]['text':' encryption name as used in 'cryptmethod'','line_number':33,'multiline':False]['text':' magic bytes stored in file header','line_number':34,'multiline':False]['text':' length of salt, or 0 when not using salt','line_number':35,'multiline':False]['text':' length of seed, or 0 when not using seed','line_number':36,'multiline':False]['text':' additional length in the header needed for storing','line_number':37,'multiline':False]['text':' custom data','line_number':38,'multiline':False]['text':' encryption/decryption can be done in-place','line_number':40,'multiline':False]['text':' whole undo file is encrypted','line_number':42,'multiline':False]['text':' Optional function pointer for a self-test.','line_number':44,'multiline':False]['text':' Function pointer for initializing encryption/decryption.','line_number':47,'multiline':False]['text':' Function pointers for encoding/decoding from one buffer into another.','line_number':50,'multiline':False]['text':' Optional, however, these or the _buffer ones should be configured.','line_number':51,'multiline':False]['text':' Function pointers for encoding and decoding, can buffer data if needed.','line_number':57,'multiline':False]['text':' Optional (however, these or the above should be configured).','line_number':58,'multiline':False]['text':' Function pointers for in-place encoding and decoding, used for','line_number':64,'multiline':False]['text':' crypt_*_inplace(). "from" and "to" arguments will be equal.','line_number':65,'multiline':False]['text':' These may be the same as decode_fn and encode_fn above, however an','line_number':66,'multiline':False]['text':' algorithm may implement them in a way that is not interchangeable with','line_number':67,'multiline':False]['text':' the crypt_(en|de)code() interface (for example because it wishes to add','line_number':68,'multiline':False]['text':' padding to files).','line_number':69,'multiline':False]['text':' This method is used for swap and undo files which have a rigid format.','line_number':70,'multiline':False]['text':' index is method_nr of cryptstate_T, CRYPT_M_*','line_number':90,'multiline':False]['text':' PK_Zip; very weak','line_number':92,'multiline':False]['text':' Blowfish/CFB + SHA-256 custom key derivation; implementation issues.','line_number':110,'multiline':False]['text':' Blowfish/CFB + SHA-256 custom key derivation; fixed.','line_number':128,'multiline':False]['text':' XChaCha20 using libsodium; implementation issues','line_number':146,'multiline':False]['text':' 16','line_number':151,'multiline':False]['text':' XChaCha20 using libsodium; stores parameters in header','line_number':167,'multiline':False]['text':' 16','line_number':172,'multiline':False]['text':' sizeof(crypto_pwhash_OPSLIMIT_INTERACTIVE + crypto_pwhash_MEMLIMIT_INTERACTIVE + crypto_pwhash_ALG_DEFAULT)','line_number':177,'multiline':False]['text':' NOTE: when adding a new method, use some random bytes for the magic key,','line_number':190,'multiline':False]['text':' to avoid that a text file is recognized as encrypted.','line_number':191,'multiline':False]['text':' 32, same as crypto_secretstream_xchacha20poly1305_KEYBYTES','line_number':198,'multiline':False]['text':'#   define HINSTANCE void*','line_number':213,'multiline':False]['text':'#   define SODIUM_PROC void*','line_number':214,'multiline':False]['text':'#   define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)','line_number':215,'multiline':False]['text':'#   define symbol_from_dll dlsym','line_number':216,'multiline':False]['text':'#   define close_dll dlclose','line_number':217,'multiline':False]['text':'#   define load_dll_error dlerror','line_number':218,'multiline':False]['text':' cannot change','line_number':344,'multiline':False]['text':'
 * Return int value for crypt method name.
 * 0 for "zip", the old method.  Also for any non-valid value.
 * 1 for "blowfish".
 * 2 for "blowfish2".
 ','line_number':347,'multiline':True]['text':'
 * Get the crypt method used for a file from "ptr[len]", the magic text at the
 * start of the file.
 * Returns -1 when no encryption used.
 ','line_number':364,'multiline':True]['text':'
 * Return TRUE if the crypt method for "method_nr" can be done in-place.
 ','line_number':389,'multiline':True]['text':'
 * Get the crypt method for buffer "buf" as a number.
 ','line_number':399,'multiline':True]['text':'
 * Returns True for Sodium Encryption.
 ','line_number':408,'multiline':True]['text':'
 * Return TRUE when the buffer uses an encryption method that encrypts the
 * whole undo file, not only the text.
 ','line_number':417,'multiline':True]['text':'
 * Get crypt method specific length of the file header in bytes.
 ','line_number':427,'multiline':True]['text':'
 * Get maximum crypt method specific length of the file header in bytes.
 ','line_number':441,'multiline':True]['text':'
 * Set the crypt method for buffer "buf" to "method_nr" using the int value as
 * returned by crypt_method_nr_from_name().
 ','line_number':461,'multiline':True]['text':'
 * If the crypt method for the current buffer has a self-test, run it and
 * return OK/FAIL.
 ','line_number':472,'multiline':True]['text':'
 * Allocate a crypt state and initialize it.
 * Return NULL for failure.
 ','line_number':486,'multiline':True]['text':'
 * Allocate a crypt state from a file header and initialize it.
 * Assumes that header contains at least the number of bytes that
 * crypt_get_header_len() returns for "method_nr".
 ','line_number':510,'multiline':True]['text':'
 * Read the crypt method specific header data from "fp".
 * Return an allocated cryptstate_T or NULL on error.
 ','line_number':540,'multiline':True]['text':'
 * Allocate a cryptstate_T for writing and initialize it with "key".
 * Allocates and fills in the header and stores it in "header", setting
 * "header_len".  The header may include salt and seed, depending on
 * cryptmethod.  Caller must free header.
 * Returns the state or NULL on failure.
 ','line_number':576,'multiline':True]['text':' TODO: Should this be crypt method specific? (Probably not worth','line_number':616,'multiline':False]['text':' it).  sha2_seed is pretty bad for large amounts of entropy, so make','line_number':617,'multiline':False]['text':' that into something which is suitable for anything.','line_number':618,'multiline':False]['text':'
 * Free the crypt state.
 ','line_number':637,'multiline':True]['text':'
 * Encode "from[len]" and store the result in a newly allocated buffer, which
 * is stored in "newptr".
 * Return number of bytes in "newptr", 0 for need more or -1 on error.
 ','line_number':658,'multiline':True]['text':' Has buffer function, pass through.','line_number':674,'multiline':False]['text':' Not buffering, just return EOF.','line_number':677,'multiline':False]['text':'
 * Decrypt "ptr[len]" and store the result in a newly allocated buffer, which
 * is stored in "newptr".
 * Return number of bytes in "newptr", 0 for need more or -1 on error.
 ','line_number':687,'multiline':True]['text':' Has buffer function, pass through.','line_number':703,'multiline':False]['text':' Not buffering, just return EOF.','line_number':707,'multiline':False]['text':'
 * Encrypting "from[len]" into "to[len]".
 ','line_number':718,'multiline':True]['text':' unused','line_number':732,'multiline':False]['text':'
 * decrypting "from[len]" into "to[len]".
 ','line_number':733,'multiline':True]['text':'
 * Simple inplace encryption, modifies "buf[len]" in place.
 ','line_number':748,'multiline':True]['text':'
 * Simple inplace decryption, modifies "buf[len]" in place.
 ','line_number':762,'multiline':True]['text':'
 * Free an allocated crypt key.  Clear the text to make sure it doesn't stay
 * in memory anywhere.
 ','line_number':776,'multiline':True]['text':'
 * Check the crypt method and give a warning if it's outdated.
 ','line_number':793,'multiline':True]['text':'
 * If the crypt method for "curbuf" does not support encrypting the swap file
 * then disable the swap file.
 ','line_number':806,'multiline':True]['text':' encryption uses padding and MAC, that does not work very well with','line_number':817,'multiline':False]['text':' swap and undo files, so disable them','line_number':818,'multiline':False]['text':' remove the swap file','line_number':819,'multiline':False]['text':'
 * Ask the user for a crypt key.
 * When "store" is TRUE, the new key is stored in the 'key' option, and the
 * 'key' option value is returned: Don't free it.
 * When "store" is FALSE, the typed key is returned in allocated memory.
 * Returns NULL on failure.
 ','line_number':833,'multiline':True]['text':' Ask for the key twice.','line_number':843,'multiline':False]['text':' do it again','line_number':869,'multiline':False]['text':' since the user typed this, no need to wait for return','line_number':885,'multiline':False]['text':'
 * Append a message to IObuff for the encryption/decryption method being used.
 ','line_number':899,'multiline':True]['text':' crypto_box_SEEDBYTES ==  crypto_secretstream_xchacha20poly1305_KEYBYTES','line_number':923,'multiline':False]['text':' 32','line_number':924,'multiline':False]['text':' For testing','line_number':945,'multiline':False]['text':' derive a key from the password','line_number':953,'multiline':False]['text':' out of memory','line_number':957,'multiline':False]['text':' "cat_add" should not be NULL, check anyway for safety','line_number':972,'multiline':False]['text':' Reading parameters from file','line_number':997,'multiline':False]['text':' derive the key from the file header','line_number':1004,'multiline':False]['text':' out of memory','line_number':1025,'multiline':False]['text':'
 * Encrypt "from[len]" into "to[len]".
 * "from" and "to" can be equal to encrypt in place.
 * Call needs to ensure that there is enough space in to (for the header)
 ','line_number':1051,'multiline':True]['text':' Currently unused','line_number':1056,'multiline':False]['text':' crypto_box_SEEDBYTES == crypto_secretstream_xchacha20poly1305_KEYBYTES','line_number':1066,'multiline':False]['text':'
 * Decrypt "from[len]" into "to[len]".
 * "from" and "to" can be equal to encrypt in place.
 ','line_number':1097,'multiline':True]['text':' Currently unused','line_number':1101,'multiline':False]['text':' crypto_box_SEEDBYTES ==  crypto_secretstream_xchacha20poly1305_KEYBYTES','line_number':1111,'multiline':False]['text':'
 * Encrypt "from[len]" into "to[len]".
 * "from" and "to" can be equal to encrypt in place.
 ','line_number':1176,'multiline':True]['text':' crypto_box_SEEDBYTES ==  crypto_secretstream_xchacha20poly1305_KEYBYTES','line_number':1189,'multiline':False]['text':'
 * Decrypt "from[len]" into "to[len]".
 * "from" and "to" can be equal to encrypt in place.
 ','line_number':1226,'multiline':True]['text':' crypto_box_SEEDBYTES ==  crypto_secretstream_xchacha20poly1305_KEYBYTES','line_number':1239,'multiline':False]['text':' FEAT_CRYPT','line_number':1405,'multiline':False]