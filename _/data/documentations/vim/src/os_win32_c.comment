['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * os_win32.c
 *
 * Used for both the console version and the Win32 GUI.  A lot of code is for
 * the console version only, so there is a lot of "#ifndef FEAT_GUI_MSWIN".
 *
 * Win32 (Windows NT and Windows 95) system-dependent routines.
 * Portions lifted from the Win32 SDK samples, the MSDOS-dependent code,
 * NetHack 3.1.3, GNU Emacs 19.30, and Vile 5.5.
 *
 * George V. Reilly <george@reilly.org> wrote most of this.
 * Roger Knobbe <rogerk@wonderware.com> did the initial port of Vim 3.0.
 ','line_number':9,'multiline':True]['text':' cproto fails on missing include files','line_number':33,'multiline':False]['text':'
 * EventFlags
 ','line_number':75,'multiline':True]['text':' Record all output and all keyboard & mouse input','line_number':86,'multiline':False]['text':' #define MCH_WRITE_DUMP','line_number':87,'multiline':False]['text':'
 * When generating prototypes for Win32 on Unix, these lines make the syntax
 * errors disappear.  They do not need to be correct.
 ','line_number':93,'multiline':True]['text':' empty','line_number':149,'multiline':False]['text':' Win32 Console handles for input and output','line_number':153,'multiline':False]['text':' Win32 Screen buffer,coordinate,console I/O information','line_number':157,'multiline':False]['text':' 0-based, but external coords are 1-based','line_number':159,'multiline':False]['text':' The attribute of the screen when the editor was started','line_number':161,'multiline':False]['text':' lightgray text on black background','line_number':162,'multiline':False]['text':' set by ctrl-break interrupt','line_number':165,'multiline':False]['text':' set when ctrl-C or ctrl-break detected','line_number':166,'multiline':False]['text':' set when forcefully exiting','line_number':167,'multiline':False]['text':' The 'input_record_buffer' is an internal dynamic fifo queue of MS-Windows','line_number':180,'multiline':False]['text':' console INPUT_RECORD events that are normally read from the console input','line_number':181,'multiline':False]['text':' buffer.  This provides an injection point for testing the low-level handling','line_number':182,'multiline':False]['text':' of INPUT_RECORDs.','line_number':183,'multiline':False]['text':' black','line_number':233,'multiline':False]['text':' white','line_number':234,'multiline':False]['text':' !FEAT_GUI_MSWIN || VIMDLL','line_number':246,'multiline':False]['text':' This flag is newly created from Windows 10','line_number':248,'multiline':False]['text':' don't fiddle with console','line_number':254,'multiline':False]['text':'
 * Get version number including build number
 ','line_number':265,'multiline':True]['text':'
 * Version of ReadConsoleInput() that works with IME.
 * Works around problems on Windows 8.
 ','line_number':320,'multiline':True]['text':' Remove duplicate event to avoid flicker.','line_number':391,'multiline':False]['text':'
 * Version of PeekConsoleInput() that works with IME.
 ','line_number':423,'multiline':True]['text':' !FEAT_GUI_MSWIN || VIMDLL','line_number':463,'multiline':False]['text':' Maximum length of $PATH is more than MAXPATHL.  8191 is often mentioned','line_number':468,'multiline':False]['text':' as the maximum length that works.  Add 1 for a NUL byte and 5 for','line_number':469,'multiline':False]['text':' "PATH=".','line_number':470,'multiline':False]['text':' store the name of the executable, may be used for $VIM','line_number':479,'multiline':False]['text':' Append our starting directory to $PATH, so that when doing','line_number':501,'multiline':False]['text':' "!xxd" it's found in our starting directory.  Needed because','line_number':502,'multiline':False]['text':' SearchPath() also looks there.','line_number':503,'multiline':False]['text':' Check if exe_path is already included in $PATH.','line_number':515,'multiline':False]['text':' Append ';' if $PATH doesn't end with it.','line_number':518,'multiline':False]['text':'
 * Unescape characters in "p" that appear in "escaped".
 ','line_number':533,'multiline':True]['text':'
 * Load library "name".
 ','line_number':552,'multiline':True]['text':' No need to load any library when registering OLE.','line_number':560,'multiline':False]['text':' NOTE: Do not use mch_dirname() and mch_chdir() here, they may call','line_number':564,'multiline':False]['text':' vimLoadLib() recursively, which causes a stack overflow.','line_number':565,'multiline':False]['text':' Change directory to where the executable is, both to make','line_number':578,'multiline':False]['text':' sure we find a .dll there and to avoid looking for a .dll','line_number':579,'multiline':False]['text':' in the current directory.','line_number':580,'multiline':False]['text':'
 * Check if the current executable file is for the GUI subsystem.
 ','line_number':588,'multiline':True]['text':'
 * Get related information about 'funcname' which is imported by 'hInst'.
 * If 'info' is 0, return the function address.
 * If 'info' is 1, return the module name which the function is imported from.
 * If 'info' is 2, hook the function with 'ptr', and return the original
 * function address.
 ','line_number':611,'multiline':True]['text':' Import Address Table','line_number':626,'multiline':False]['text':' Import Name Table','line_number':627,'multiline':False]['text':' No Import Table','line_number':640,'multiline':False]['text':'
 * Get the module handle which 'funcname' in 'hInst' is imported from.
 ','line_number':683,'multiline':True]['text':'
 * Get the address of 'funcname' which is imported by 'hInst' DLL.
 ','line_number':697,'multiline':True]['text':'
 * Hook the function named 'funcname' which is imported by 'hInst' DLL,
 * and return the original function address.
 ','line_number':706,'multiline':True]['text':'
 * Check if the specified DLL is a function forwarder.
 * If yes, return the instance of the forwarded DLL.
 * If no, return the specified DLL.
 * If error, return NULL.
 * This assumes that the DLL forwards all the function to a single DLL.
 ','line_number':718,'multiline':True]['text':' No Export Directory','line_number':747,'multiline':False]['text':' No export names.','line_number':752,'multiline':False]['text':' Check only the first entry.','line_number':754,'multiline':False]['text':' The first entry is not a function forwarder.','line_number':756,'multiline':False]['text':' The first entry is a function forwarder.','line_number':759,'multiline':False]['text':' The name is represented as "DllName.FunctionName".','line_number':760,'multiline':False]['text':' Extract DllName.','line_number':766,'multiline':False]['text':' Dummy functions','line_number':782,'multiline':False]['text':' No need to initialize twice.','line_number':819,'multiline':False]['text':' Load gettext library (libintl.dll and other names).','line_number':822,'multiline':False]['text':' The bind_textdomain_codeset() function is optional.','line_number':859,'multiline':False]['text':' _wputenv() function for the libintl.dll is optional.','line_number':866,'multiline':False]['text':' DYNAMIC_GETTEXT','line_number':934,'multiline':False]['text':' This symbol is not defined in older versions of the SDK or Visual C++','line_number':936,'multiline':False]['text':'
 * Enables or disables the specified privilege.
 ','line_number':952,'multiline':True]['text':' Suppress the deprecation warning for using GetVersionEx().','line_number':988,'multiline':False]['text':' It is needed for implementing "windowsversion()".','line_number':989,'multiline':False]['text':'
 * Set "win8_or_later" and fill in "windowsVersion" if possible.
 ','line_number':993,'multiline':True]['text':' Enable privilege for getting or setting SACLs.','line_number':1022,'multiline':False]['text':' When uChar.AsciiChar is 0, then we need to look at wVirtualKeyCode.','line_number':1039,'multiline':False]['text':' We map function keys to their ANSI terminal equivalents, as produced','line_number':1040,'multiline':False]['text':' by ANSI.SYS, for compatibility with the MS-DOS version of Vim.  Any','line_number':1041,'multiline':False]['text':' ANSI key with a value >= '\300' is nonstandard, but provided anyway','line_number':1042,'multiline':False]['text':' so that the user can have access to all SHIFT-, CTRL-, and ALT-','line_number':1043,'multiline':False]['text':' combinations of function/arrow/etc keys.','line_number':1044,'multiline':False]['text':'    Key	ANSI	alone	shift	ctrl	    alt','line_number':1056,'multiline':False]['text':' PgUp','line_number':1074,'multiline':False]['text':' PgDn','line_number':1079,'multiline':False]['text':' Backspace','line_number':1082,'multiline':False]['text':' PrtScrn','line_number':1084,'multiline':False]['text':' Most people don't have F13-F20, but what the hell...','line_number':1087,'multiline':False]['text':' keyp '+'','line_number':1097,'multiline':False]['text':' keyp '-'','line_number':1098,'multiline':False]['text':' { VK_DIVIDE,   TRUE,'N',	'N',    'N',	'N',	}, // keyp '/'','line_number':1099,'multiline':False]['text':' keyp '*'','line_number':1100,'multiline':False]['text':' Sorry, out of number space! <negri>','line_number':1111,'multiline':False]['text':'
 * The return code indicates key code size.
 ','line_number':1116,'multiline':True]['text':' check if it already has a valid unicode character.','line_number':1136,'multiline':False]['text':' Clear any pending dead keys','line_number':1142,'multiline':False]['text':'
 * Decode a KEY_EVENT into one or two keystrokes
 ','line_number':1167,'multiline':True]['text':' ignore key up events','line_number':1184,'multiline':False]['text':' ignore some keystrokes','line_number':1188,'multiline':False]['text':' modifiers','line_number':1191,'multiline':False]['text':' Alt key','line_number':1194,'multiline':False]['text':' Shift-TAB','line_number':1201,'multiline':False]['text':' (0x23 - 0x28): VK_END, VK_HOME,','line_number':1248,'multiline':False]['text':' VK_LEFT, VK_UP, VK_RIGHT, VK_DOWN','line_number':1249,'multiline':False]['text':' Pass on the ALT key as a modifier, but only when not combined','line_number':1330,'multiline':False]['text':' with CTRL (which is ALTGR).','line_number':1331,'multiline':False]['text':' Pass on SHIFT only for special keys, because we don't know when','line_number':1335,'multiline':False]['text':' it's already included with the character.','line_number':1336,'multiline':False]['text':' Pass on CTRL only for non-special keys, because we don't know','line_number':1340,'multiline':False]['text':' when it's already included with the character.  And not when','line_number':1341,'multiline':False]['text':' combined with ALT (which is ALTGR).','line_number':1342,'multiline':False]['text':' Encode the win32 console key modifiers from Vim keyboard modifiers.','line_number':1378,'multiline':False]['text':' If "modifiers" is explicitly set in the args, then we reset any','line_number':1381,'multiline':False]['text':' remembered modifier key state that may have been set from','line_number':1382,'multiline':False]['text':' earlier mod-key-down events, even if they are not yet unset by','line_number':1383,'multiline':False]['text':' earlier mod-key-up events.','line_number':1384,'multiline':False]['text':' FEAT_EVAL','line_number':1450,'multiline':False]['text':' !FEAT_GUI_MSWIN || VIMDLL','line_number':1451,'multiline':False]['text':'
 * For the GUI the mouse handling is in gui_w32.c.
 ','line_number':1454,'multiline':True]['text':' !FEAT_GUI_MSWIN || VIMDLL','line_number':1462,'multiline':False]['text':' mouse present','line_number':1463,'multiline':False]['text':' mouse enabled','line_number':1464,'multiline':False]['text':' mouse status','line_number':1465,'multiline':False]['text':' mouse x coordinate','line_number':1466,'multiline':False]['text':' mouse y coordinate','line_number':1467,'multiline':False]['text':' Original console input mode','line_number':1468,'multiline':False]['text':' Original console output mode','line_number':1469,'multiline':False]['text':'
 * Enable or disable mouse input
 ','line_number':1471,'multiline':True]['text':'
 * Called when 'balloonevalterm' changed.
 ','line_number':1505,'multiline':True]['text':'
 * Win32 console mouse scroll event handler.
 * Console version of the _OnMouseWheel() function in gui_w32.c
 *
 * This encodes the mouse scroll direction and keyboard modifiers into
 * g_nMouseClick, and the mouse position into g_xMouse and g_yMouse
 *
 * The direction of the scroll is decoded from two fields of the win32 console
 * mouse event record;
 *    1. The orientation - vertical or horizontal flag - from dwEventFlags
 *    2. The sign - positive or negative (aka delta flag) - from dwButtonState
 *
 * When scroll orientation is HORIZONTAL
 *    -  If the high word of the dwButtonState member contains a positive
 *	 value, the wheel was rotated to the right.
 *    -  Otherwise, the wheel was rotated to the left.
 * When scroll orientation is VERTICAL
 *    -  If the high word of the dwButtonState member contains a positive value,
 *       the wheel was rotated forward, away from the user.
 *    -  Otherwise, the wheel was rotated backward, toward the user.
 ','line_number':1515,'multiline':True]['text':' Mouse hovers over popup window, scroll it if possible.','line_number':1568,'multiline':False]['text':' Decode the direction into an event that Vim can process','line_number':1584,'multiline':False]['text':' Decode the win32 console key modifiers into Vim mouse modifiers.','line_number':1590,'multiline':False]['text':' MOUSE_SHIFT;','line_number':1592,'multiline':False]['text':' MOUSE_CTRL;','line_number':1594,'multiline':False]['text':' MOUSE_ALT;','line_number':1596,'multiline':False]['text':' add (bitwise or) the scroll direction and the key modifier chars','line_number':1598,'multiline':False]['text':' together.','line_number':1599,'multiline':False]['text':'
 * Decode a MOUSE_EVENT.  If it's a valid event, return MOUSE_LEFT,
 * MOUSE_MIDDLE, or MOUSE_RIGHT for a click; MOUSE_DRAG for a mouse
 * move with a button held down; and MOUSE_RELEASE after a MOUSE_DRAG
 * or a MOUSE_LEFT, _MIDDLE, or _RIGHT.  We encode the button type,
 * the number of clicks, and the Shift/Ctrl/Alt modifiers in g_nMouseClick,
 * and we return the mouse position in g_xMouse and g_yMouse.
 *
 * Every MOUSE_LEFT, _MIDDLE, or _RIGHT will be followed by zero or more
 * MOUSE_DRAGs and one MOUSE_RELEASE.  MOUSE_RELEASE will be followed only
 * by MOUSE_LEFT, _MIDDLE, or _RIGHT.
 *
 * For multiple clicks, we send, say, MOUSE_LEFT/1 click, MOUSE_RELEASE,
 * MOUSE_LEFT/2 clicks, MOUSE_RELEASE, MOUSE_LEFT/3 clicks, MOUSE_RELEASE, ....
 *
 * Windows will send us MOUSE_MOVED notifications whenever the mouse
 * moves, even if it stays within the same character cell.  We ignore
 * all MOUSE_MOVED messages if the position hasn't really changed, and
 * we ignore all MOUSE_MOVED messages where no button is held down (i.e.,
 * we're only interested in MOUSE_DRAG).
 *
 * All of this is complicated by the code that fakes MOUSE_MIDDLE on
 * 2-button mouses by pressing the left & right buttons simultaneously.
 * In practice, it's almost impossible to click both at the same time,
 * so we need to delay a little.  Also, we tend not to get MOUSE_RELEASE
 * in such cases, if the user is clicking quickly.
 ','line_number':1605,'multiline':True]['text':' number of buttons supported','line_number':1649,'multiline':False]['text':' get a spurious MOUSE_EVENT immediately after receiving focus; ignore','line_number':1667,'multiline':False]['text':' If there is an unprocessed mouse click drop this one.','line_number':1674,'multiline':False]['text':' we now should have a mouse scroll in g_nMouseClick','line_number':1682,'multiline':False]['text':' Ignore MOUSE_MOVED events if (x, y) hasn't changed.	(We get these','line_number':1691,'multiline':False]['text':' events even when the mouse moves only within a char cell.)','line_number':1692,'multiline':False]['text':' If no buttons are pressed...','line_number':1697,'multiline':False]['text':' If the last thing returned was MOUSE_RELEASE, ignore this','line_number':1702,'multiline':False]['text':' do return mouse move events when we want them','line_number':1706,'multiline':False]['text':' one or more buttons pressed','line_number':1716,'multiline':False]['text':' on a 2-button mouse, hold down left and right buttons','line_number':1718,'multiline':False]['text':' simultaneously to get MIDDLE.','line_number':1719,'multiline':False]['text':' if either left or right button only is pressed, see if the','line_number':1725,'multiline':False]['text':' next mouse event has both of them pressed','line_number':1726,'multiline':False]['text':' wait a short time for next input event','line_number':1731,'multiline':False]['text':' throw away spurious mouse move','line_number':1757,'multiline':False]['text':' are there any more mouse events in queue?','line_number':1760,'multiline':False]['text':' button pressed or released, without mouse moving','line_number':1807,'multiline':False]['text':' only pass on interesting (i.e., different) mouse events','line_number':1857,'multiline':False]['text':' Note: "move" is optional, requires fewer arguments','line_number':1891,'multiline':False]['text':' Reset the scroll values to known values.','line_number':1917,'multiline':False]['text':' XXX: Remove this when/if the scroll step is made configurable.','line_number':1918,'multiline':False]['text':' umm?  Assume Left Release?','line_number':1937,'multiline':False]['text':' KE_MOUSEDOWN;','line_number':1950,'multiline':False]['text':' KE_MOUSEUP;','line_number':1954,'multiline':False]['text':' KE_MOUSELEFT;','line_number':1958,'multiline':False]['text':' KE_MOUSERIGHT;','line_number':1962,'multiline':False]['text':' Encode the win32 console key modifiers from Vim MOUSE modifiers.','line_number':1975,'multiline':False]['text':' FEAT_EVAL','line_number':1986,'multiline':False]['text':' !FEAT_GUI_MSWIN || VIMDLL','line_number':2029,'multiline':False]['text':'
 * The 'test_mswin_event' function is for testing Vim's low-level handling of
 * user input events.  ie, this manages the encoding of INPUT_RECORD events
 * so that we have a way to test how Vim decodes INPUT_RECORD events in Windows
 * consoles.
 *
 * The 'test_mswin_event' function is based on 'test_gui_event'.  In fact, when
 * the Windows GUI is running, the arguments; 'event' and 'args', are the same.
 * So, it acts as an alias for 'test_gui_event' for the Windows GUI.
 *
 * When the Windows console is running, the arguments; 'event' and 'args', are
 * a subset of what 'test_gui_event' handles, ie, only "key" and "mouse"
 * events are encoded as INPUT_RECORD events.
 *
 * Note: INPUT_RECORDs are only used by the Windows console, not the GUI.  The
 * GUI sends MSG structs instead.
 ','line_number':2032,'multiline':True]['text':' Currently implemented event record types are; KEY_EVENT and MOUSE_EVENT','line_number':2061,'multiline':False]['text':' Potentially could also implement: FOCUS_EVENT and WINDOW_BUFFER_SIZE_EVENT','line_number':2062,'multiline':False]['text':' Maybe also:  MENU_EVENT','line_number':2063,'multiline':False]['text':' Ideally, WriteConsoleInput would be used to inject these low-level','line_number':2090,'multiline':False]['text':' events.  But, this doesn't work well in the CI test environment.  So','line_number':2091,'multiline':False]['text':' implementing an input_record_buffer instead.','line_number':2092,'multiline':False]['text':' Set flags to execute the event, ie. like feedkeys mode X.','line_number':2096,'multiline':False]['text':' Avoid a 1 second delay when the keys start Insert mode.','line_number':2100,'multiline':False]['text':' FEAT_EVAL','line_number':2110,'multiline':False]['text':'
 * Set the shape of the cursor.
 * 'thickness' can be from 1 (thin) to 99 (block)
 ','line_number':2113,'multiline':True]['text':' If 't_SI' is not set, use the default cursor styles.','line_number':2124,'multiline':False]['text':' underline','line_number':2126,'multiline':False]['text':' default','line_number':2128,'multiline':False]['text':'
     * How the cursor is drawn depends on the current mode.
     ','line_number':2154,'multiline':True]['text':' 100 doesn't work on W95','line_number':2160,'multiline':False]['text':'
 * Handle FOCUS_EVENT.
 ','line_number':2168,'multiline':True]['text':'
 * Wait until console input from keyboard or mouse is available,
 * or the time is up.
 * When "ignore_input" is TRUE even wait when input is available.
 * Return TRUE if something is available FALSE if not.
 ','line_number':2180,'multiline':True]['text':' Wait until the specified time has elapsed.','line_number':2198,'multiline':False]['text':' Wait forever.','line_number':2201,'multiline':False]['text':' We need to loop until the end of the time period, because','line_number':2204,'multiline':False]['text':' we might get multiple unusable mouse events in that time.','line_number':2205,'multiline':False]['text':' Only process messages when waiting.','line_number':2208,'multiline':False]['text':' If the specified wait time has passed, return.  Beware that','line_number':2231,'multiline':False]['text':' GetTickCount() may wrap around (overflow).','line_number':2232,'multiline':False]['text':' Don't wait for more than 11 msec to avoid dropping characters,','line_number':2241,'multiline':False]['text':' check channel while waiting for input and handle a callback from','line_number':2242,'multiline':False]['text':' 'balloonexpr'.','line_number':2243,'multiline':False]['text':' don't wait longer than 'mzquantum'','line_number':2249,'multiline':False]['text':' When waiting very briefly don't trigger timers.','line_number':2252,'multiline':False]['text':' Trigger timers and then get the time in msec until the next','line_number':2257,'multiline':False]['text':' one is due.  Wait up to that time.','line_number':2258,'multiline':False]['text':' timer may have used feedkeys().','line_number':2262,'multiline':False]['text':' Wait for either an event on the console input or a','line_number':2271,'multiline':False]['text':' message in the client-server window.','line_number':2272,'multiline':False]['text':' May have to redraw if the cursor ends up in the wrong place.','line_number':2287,'multiline':False]['text':' Only when not peeking.','line_number':2288,'multiline':False]['text':' The screen is now messed up, must redraw the command','line_number':2297,'multiline':False]['text':' line and later all the windows.','line_number':2298,'multiline':False]['text':' Windows IME sends two '\n's with only one 'ENTER'.  First:','line_number':2312,'multiline':False]['text':' wVirtualKeyCode == 13. second: wVirtualKeyCode == 0','line_number':2313,'multiline':False]['text':' Only call shell_resized() when the size actually changed to','line_number':2334,'multiline':False]['text':' avoid the screen is cleared.','line_number':2335,'multiline':False]['text':' Something might have been received while we were waiting.','line_number':2358,'multiline':False]['text':'
 * return non-zero if a character is available
 ','line_number':2366,'multiline':True]['text':'
 * Check for any pending input or messages.
 ','line_number':2380,'multiline':True]['text':'
 * Create the console input.  Used when reading stdin doesn't work.
 ','line_number':2394,'multiline':True]['text':'
 * Get a keystroke or a mouse event, use a blocking wait.
 ','line_number':2407,'multiline':True]['text':' !FEAT_GUI_MSWIN','line_number':2452,'multiline':False]['text':'
 * mch_inchar(): low-level input function.
 * Get one or more characters from the keyboard or the mouse.
 * If time == 0, do not wait for characters.
 * If time == n, wait a short time for characters.
 * If time == -1, wait forever for characters.
 * Returns the number of characters read into buf.
 ','line_number':2455,'multiline':True]['text':' Extra space for maximum three CSIs. E.g. U+1B6DB -> 0xF0 0x9B 0x9B 0x9B.','line_number':2475,'multiline':False]['text':' previously typed bytes.','line_number':2481,'multiline':False]['text':' First use any typeahead that was kept because "buf" was too small.','line_number':2489,'multiline':False]['text':' no character available','line_number':2495,'multiline':False]['text':' time == -1, wait forever','line_number':2498,'multiline':False]['text':' Allow winsize changes from now on','line_number':2500,'multiline':False]['text':'
	 * If there is no character available within 2 seconds (default)
	 * write the autoscript file to disk.  Or cause the CursorHold event
	 * to be triggered.
	 ','line_number':2502,'multiline':True]['text':'
     * Try to read as many characters as there are, until the buffer is full.
     ','line_number':2520,'multiline':True]['text':' we will get at least one key. Get more if they are available.','line_number':2524,'multiline':False]['text':' Keep looping until there is something in the typeahead buffer and more','line_number':2532,'multiline':False]['text':' to get and still room in the buffer (up to two bytes for a char and','line_number':2533,'multiline':False]['text':' three bytes for a modifier).','line_number':2534,'multiline':False]['text':' "buf" may be invalid now if a client put something in the','line_number':2540,'multiline':False]['text':' typeahead buffer and "buf" is in the typeahead buffer.','line_number':2541,'multiline':False]['text':' use K_SPECIAL instead of CSI to make mappings work','line_number':2562,'multiline':False]['text':' Pass the pointer coordinates of the mouse event in 2 bytes,','line_number':2578,'multiline':False]['text':' allowing for > 223 columns.  Both for click and scroll events.','line_number':2579,'multiline':False]['text':' This is the same as what is used for the GUI.','line_number':2580,'multiline':False]['text':' Some chars need adjustment when the Ctrl modifier is used.','line_number':2597,'multiline':False]['text':' remove the SHIFT modifier for keys where it's already included,','line_number':2602,'multiline':False]['text':' e.g., '(' and '*'','line_number':2603,'multiline':False]['text':' "buf" may be invalid now if a client put something in the','line_number':2608,'multiline':False]['text':' typeahead buffer and "buf" is in the typeahead buffer.','line_number':2609,'multiline':False]['text':' High surrogate','line_number':2633,'multiline':False]['text':' SHIFT+Insert','line_number':2674,'multiline':False]['text':' CTRL+Insert','line_number':2675,'multiline':False]['text':' SHIFT+Delete','line_number':2676,'multiline':False]['text':' CTRL+Delete','line_number':2677,'multiline':False]['text':' Use the ALT key to set the 8th bit of the character','line_number':2697,'multiline':False]['text':' when it's one byte, the 8th bit isn't set yet and not','line_number':2698,'multiline':False]['text':' using a double-byte encoding (would become a lead','line_number':2699,'multiline':False]['text':' byte).','line_number':2700,'multiline':False]['text':' Prepend modifiers to the character.','line_number':2714,'multiline':False]['text':' Move typeahead to "buf", as much as fits.','line_number':2741,'multiline':False]['text':' FEAT_GUI_MSWIN','line_number':2757,'multiline':False]['text':' FEAT_GUI_MSWIN','line_number':2759,'multiline':False]['text':' required for FindExecutable()','line_number':2764,'multiline':False]['text':'
 * Return TRUE if "name" is an executable file, FALSE if not or it doesn't exist.
 * When returning TRUE and "path" is not NULL save the path and set "*path" to
 * the allocated memory.
 * TODO: Should somehow check if it's really executable.
 ','line_number':2768,'multiline':True]['text':' The file doesn't exist or is a folder.','line_number':2779,'multiline':False]['text':' Check if the file is an AppExecLink, a special alias used by Windows','line_number':2782,'multiline':False]['text':' Store for its apps.','line_number':2783,'multiline':False]['text':' The path is already absolute.','line_number':2791,'multiline':False]['text':'
 * If "use_path" is TRUE: Return TRUE if "name" is in $PATH.
 * If "use_path" is FALSE: Return TRUE if "name" exists.
 * If "use_pathext" is TRUE search "name" with extensions in $PATHEXT.
 * When returning TRUE and "path" is not NULL save the path and set "*path" to
 * the allocated memory.
 ','line_number':2802,'multiline':True]['text':' WinNT and later can use _MAX_PATH wide characters for a pathname, which','line_number':2812,'multiline':False]['text':' means that the maximum pathname is _MAX_PATH * 3 bytes when 'enc' is','line_number':2813,'multiline':False]['text':' UTF-8.','line_number':2814,'multiline':False]['text':' safety check','line_number':2826,'multiline':False]['text':' Using the name directly when a Unix-shell like 'shell'.','line_number':2829,'multiline':False]['text':'
	     * Loop over all extensions in $PATHEXT.
	     * Check "name" ends with extension.
	     ','line_number':2844,'multiline':True]['text':' Skip empty or single ".".','line_number':2854,'multiline':False]['text':' Prepend single "." to pathext, it means no extension added.','line_number':2874,'multiline':False]['text':' Use $PATH when "use_path" is TRUE and "name" is basename.','line_number':2891,'multiline':False]['text':'
     * Walk through all entries in $PATH to check if "name" exists there and
     * is an executable file.
     ','line_number':2912,'multiline':True]['text':' Skip empty entry','line_number':2919,'multiline':False]['text':' A single "." that means current dir.','line_number':2933,'multiline':False]['text':'
	 * Loop over all extensions in $PATHEXT.
	 * Check "name" with extension added.
	 ','line_number':2944,'multiline':True]['text':' Skip empty entry','line_number':2953,'multiline':False]['text':' Not a single "." that means no extension is added.','line_number':2963,'multiline':False]['text':'
 * Bad parameter handler.
 *
 * Certain MS CRT functions will intentionally crash when passed invalid
 * parameters to highlight possible security holes.  Setting this function as
 * the bad parameter handler will prevent the crash.
 *
 * In debug builds the parameters contain CRT information that might help track
 * down the source of a problem, but in non-debug builds the arguments are all
 * NULL/0.  Debug builds will also produce assert dialogs from the CRT, it is
 * worth allowing these to make debugging of issues easier.
 ','line_number':2991,'multiline':True]['text':'
 * GUI version of mch_init().
 ','line_number':3020,'multiline':True]['text':' Silently handle invalid parameters to CRT functions','line_number':3030,'multiline':False]['text':' Let critical errors result in a failure, not in a dialog box.  Required','line_number':3033,'multiline':False]['text':' for the timestamp test to work on removed floppies.','line_number':3034,'multiline':False]['text':' we do our own CR-LF translation','line_number':3037,'multiline':False]['text':' Specify window size.  Is there a place to get the default from?','line_number':3039,'multiline':False]['text':' Look for 'vimrun'','line_number':3043,'multiline':False]['text':' First try in same directory as gvim.exe','line_number':3047,'multiline':False]['text':' Enclose path with white space in double quotes.','line_number':3054,'multiline':False]['text':' Don't give the warning for a missing vimrun.exe right now, but only','line_number':3069,'multiline':False]['text':' when vimrun was supposed to be used.  Don't bother people that do','line_number':3070,'multiline':False]['text':' not need vimrun.exe.','line_number':3071,'multiline':False]['text':'
     * If "finstr.exe" doesn't exist, use "grep -n" for 'grepprg'.
     * Otherwise the default "findstr /n" is used.
     ','line_number':3076,'multiline':True]['text':' FEAT_GUI_MSWIN','line_number':3092,'multiline':False]['text':'
 * ClearConsoleBuffer()
 * Description:
 *  Clears the entire contents of the console screen buffer, using the
 *  specified attribute.
 * Returns:
 *  TRUE on success
 ','line_number':3099,'multiline':True]['text':'
 * FitConsoleWindow()
 * Description:
 *  Checks if the console window will fit within given buffer dimensions.
 *  Also, if requested, will shrink the window to fit.
 * Returns:
 *  TRUE on success
 ','line_number':3130,'multiline':True]['text':'
     * A buffer resize will fail if the current console window does
     * not lie completely within that buffer.  To avoid this, we might
     * have to move and possibly shrink the window.
     ','line_number':3150,'multiline':True]['text':'
 * SaveConsoleBuffer()
 * Description:
 *  Saves important information about the console buffer, including the
 *  actual buffer contents.  The saved information is suitable for later
 *  restoration by RestoreConsoleBuffer().
 * Returns:
 *  TRUE if all information was saved; FALSE otherwise
 *  If FALSE, still sets cb->IsValid if buffer characteristics were saved.
 ','line_number':3191,'multiline':True]['text':' VTP uses alternate screen buffer.','line_number':3221,'multiline':False]['text':' No need to save buffer contents for restoration.','line_number':3222,'multiline':False]['text':'
     * Allocate a buffer large enough to hold the entire console screen
     * buffer.  If this ConsoleBuffer structure has already been initialized
     * with a buffer of the correct size, then just use that one.
     ','line_number':3226,'multiline':True]['text':'
     * We will now copy the console screen buffer into our buffer.
     * ReadConsoleOutput() seems to be limited as far as how much you
     * can read at a time.  Empirically, this number seems to be about
     * 12000 cells (rows * columns).  Start at position (0, 0) and copy
     * in chunks until it is all copied.  The chunks will all have the
     * same horizontal characteristics, so initialize them now.  The
     * height of each chunk will be (12000 / width).
     ','line_number':3244,'multiline':True]['text':'
	 * Read into position (0, Y) in our buffer.
	 ','line_number':3273,'multiline':True]['text':'
	 * Read the region whose top left corner is (0, Y) and whose bottom
	 * right corner is (width - 1, Y + Y_incr - 1).  This should define
	 * a region of size width by Y_incr.  Don't worry if this region is
	 * too large for the remaining buffer; it will be cropped.
	 ','line_number':3277,'multiline':True]['text':' output handle','line_number':3285,'multiline':False]['text':' our buffer','line_number':3286,'multiline':False]['text':' dimensions of our buffer','line_number':3287,'multiline':False]['text':' offset in our buffer','line_number':3288,'multiline':False]['text':' region to save','line_number':3289,'multiline':False]['text':'
 * RestoreConsoleBuffer()
 * Description:
 *  Restores important information about the console buffer, including the
 *  actual buffer contents, if desired.  The information to restore is in
 *  the same format used by SaveConsoleBuffer().
 * Returns:
 *  TRUE on success
 ','line_number':3301,'multiline':True]['text':' VTP uses alternate screen buffer.','line_number':3319,'multiline':False]['text':' No need to restore buffer contents.','line_number':3320,'multiline':False]['text':'
     * Before restoring the buffer contents, clear the current buffer, and
     * restore the cursor position and window information.  Doing this now
     * prevents old buffer contents from "flashing" onto the screen.
     ','line_number':3327,'multiline':True]['text':'
	 * No need to restore the screen buffer contents, so we're done.
	 ','line_number':3343,'multiline':True]['text':'
     * Restore the screen buffer contents.
     ','line_number':3354,'multiline':True]['text':' output handle','line_number':3364,'multiline':False]['text':' our buffer','line_number':3365,'multiline':False]['text':' dimensions of our buffer','line_number':3366,'multiline':False]['text':' offset in our buffer','line_number':3367,'multiline':False]['text':' region to restore','line_number':3368,'multiline':False]['text':' also used in os_mswin.c','line_number':3384,'multiline':False]['text':'
 * GetConsoleIcon()
 * Description:
 *  Attempts to retrieve the small icon and/or the big icon currently in
 *  use by a given window.
 * Returns:
 *  TRUE on success
 ','line_number':3390,'multiline':True]['text':'
 * SetConsoleIcon()
 * Description:
 *  Attempts to change the small icon and/or the big icon currently in
 *  use by a given window.
 * Returns:
 *  TRUE on success
 ','line_number':3416,'multiline':True]['text':'
 * SaveConsoleTitleAndIcon()
 * Description:
 *  Saves the current console window title in g_szOrigTitle, for later
 *  restoration.  Also, attempts to obtain a handle to the console window,
 *  and use it to save the small and big icons currently in use by the
 *  console window.  This is not always possible on some versions of Windows;
 *  nor is it possible when running Vim remotely using Telnet (since the
 *  console window the user sees is owned by a remote process).
 ','line_number':3442,'multiline':True]['text':' Save the original title.','line_number':3455,'multiline':False]['text':'
     * Obtain a handle to the console window using GetConsoleWindow() from
     * KERNEL32.DLL; we need to handle in order to change the window icon.
     * This function only exists on NT-based Windows, starting with Windows
     * 2000.  On older operating systems, we can't change the window icon
     * anyway.
     ','line_number':3459,'multiline':True]['text':' Save the original console window icon.','line_number':3470,'multiline':False]['text':' Extract the first icon contained in the Vim executable.','line_number':3475,'multiline':False]['text':'
 * non-GUI version of mch_init().
 ','line_number':3490,'multiline':True]['text':' Silently handle invalid parameters to CRT functions','line_number':3503,'multiline':False]['text':' Let critical errors result in a failure, not in a dialog box.  Required','line_number':3506,'multiline':False]['text':' for the timestamp test to work on removed floppies.','line_number':3507,'multiline':False]['text':' we do our own CR-LF translation','line_number':3510,'multiline':False]['text':' Obtain handles for the standard Console I/O devices','line_number':3513,'multiline':False]['text':' Save the initial console buffer for later restoration','line_number':3523,'multiline':False]['text':' Get current text attributes','line_number':3527,'multiline':False]['text':' Fg and Bg color index number at startup','line_number':3536,'multiline':False]['text':' set termcap codes to current text attributes','line_number':3540,'multiline':False]['text':'
     * Set both the small and big icons of the console window to Vim's icon.
     * Note that Vim presently only has one size of icon (32x32), but it
     * automatically gets scaled down to 16x16 when setting the small icon.
     ','line_number':3548,'multiline':True]['text':' Switch to a new alternate screen buffer.','line_number':3559,'multiline':False]['text':'
 * non-GUI version of mch_exit().
 * Shut down and exit with status `r'
 * Careful: mch_exit() may be called before mch_init()!
 ','line_number':3585,'multiline':True]['text':' remove all memfiles','line_number':3601,'multiline':False]['text':'
	 * Restore both the small and big icons of the console window to
	 * what they were at startup.  Don't do this when the window is
	 * closed, Vim would hang here.
	 ','line_number':3606,'multiline':True]['text':' !FEAT_GUI_MSWIN','line_number':3637,'multiline':False]['text':'
 * Do we have an interactive window?
 ','line_number':3673,'multiline':True]['text':' GUI always has a tty','line_number':3684,'multiline':False]['text':'
 * Set the case of the file name, if it already exists.
 * When "len" is > 0, also expand short to long filenames.
 ','line_number':3696,'multiline':True]['text':'
 * Insert user name in s[len].
 ','line_number':3734,'multiline':True]['text':' UNLEN is 256','line_number':3742,'multiline':False]['text':'
 * Insert host name in s[len].
 ','line_number':3761,'multiline':True]['text':'
 * return process ID
 ','line_number':3784,'multiline':True]['text':'
 * return TRUE if process "pid" is still running
 ','line_number':3793,'multiline':True]['text':' might not have access','line_number':3804,'multiline':False]['text':'
 * Get name of current directory into buffer 'buf' of length 'len' bytes.
 * Return OK for success, FAIL for failure.
 ','line_number':3811,'multiline':True]['text':'
     * Originally this was:
     *    return (getcwd(buf, len) != NULL ? OK : FAIL);
     * But the Win32s known bug list says that getcwd() doesn't work
     * so use the Win32 system call instead. <Negri>
     ','line_number':3822,'multiline':True]['text':' long path name is too long, fall back to short one','line_number':3839,'multiline':False]['text':'
 * Get file permissions for "name".
 * Return mode_t or -1 for error.
 ','line_number':3854,'multiline':True]['text':'
 * Set file permission for "name" to "perm".
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':3869,'multiline':True]['text':'
 * Set hidden flag for "name".
 ','line_number':3894,'multiline':True]['text':'
 * Return TRUE if file "name" exists and is hidden.
 ','line_number':3908,'multiline':True]['text':' file does not exist at all','line_number':3917,'multiline':False]['text':'
 * return TRUE if "name" is a directory
 * return FALSE if "name" is not a directory or upon error
 ','line_number':3922,'multiline':True]['text':' file does not exist at all','line_number':3932,'multiline':False]['text':'
 * return TRUE if "name" is a directory, NOT a symlink to a directory
 * return FALSE if "name" is not a directory
 * return FALSE for error
 ','line_number':3937,'multiline':True]['text':'
 * Create directory "name".
 * Return 0 on success, -1 on error.
 ','line_number':3948,'multiline':True]['text':'
 * Delete directory "name".
 * Return 0 on success, -1 on error.
 ','line_number':3966,'multiline':True]['text':'
 * Return TRUE if file "fname" has more than one link.
 ','line_number':3984,'multiline':True]['text':'
 * Return TRUE if "name" is a symbolic link (or a junction).
 ','line_number':3996,'multiline':True]['text':'
 * Return TRUE if file "fname" has more than one link or if it is a symbolic
 * link.
 ','line_number':4029,'multiline':True]['text':'
 * Get the by-handle-file-information for "fname".
 * Returns FILEINFO_OK when OK.
 * Returns FILEINFO_ENC_FAIL when enc_to_utf16() failed.
 * Returns FILEINFO_READ_FAIL when CreateFile() failed.
 * Returns FILEINFO_INFO_FAIL when GetFileInformationByHandle() failed.
 ','line_number':4041,'multiline':True]['text':' file name','line_number':4059,'multiline':False]['text':' access mode','line_number':4060,'multiline':False]['text':' share mode','line_number':4061,'multiline':False]['text':' security descriptor','line_number':4062,'multiline':False]['text':' creation disposition','line_number':4063,'multiline':False]['text':' file attributes','line_number':4064,'multiline':False]['text':' handle to template file','line_number':4065,'multiline':False]['text':'
 * get file attributes for `name'
 * -1 : error
 * else FILE_ATTRIBUTE_* defined in winnt.h
 ','line_number':4080,'multiline':True]['text':'
 * set file attributes for `name' to `attrs'
 *
 * return -1 for failure, 0 otherwise
 ','line_number':4101,'multiline':True]['text':'
 * Set archive flag for "name".
 ','line_number':4122,'multiline':True]['text':'
 * Return TRUE if file or directory "name" is writable (not readonly).
 * Strange semantics of Win32: a readonly directory is writable, but you can't
 * delete a file.  Let's say this means it is writable.
 ','line_number':4136,'multiline':True]['text':'
 * Return TRUE if "name" can be executed, FALSE if not.
 * If "use_path" is FALSE only check if "name" is executable.
 * When returning TRUE and "path" is not NULL save the path and set "*path" to
 * the allocated memory.
 ','line_number':4150,'multiline':True]['text':'
 * Check what "name" is:
 * NODE_NORMAL: file or directory (or doesn't exist)
 * NODE_WRITABLE: writable device, socket, fifo, etc.
 * NODE_OTHER: non-writable things
 ','line_number':4162,'multiline':True]['text':' We can't open a file with a name "\\.\con" or "\\.\prn" and trying to','line_number':4175,'multiline':False]['text':' read from it later will cause Vim to hang.  Thus return NODE_WRITABLE','line_number':4176,'multiline':False]['text':' here.','line_number':4177,'multiline':False]['text':' file name','line_number':4185,'multiline':False]['text':' access mode','line_number':4186,'multiline':False]['text':' share mode','line_number':4187,'multiline':False]['text':' security descriptor','line_number':4188,'multiline':False]['text':' creation disposition','line_number':4189,'multiline':False]['text':' file attributes','line_number':4190,'multiline':False]['text':' handle to template file','line_number':4191,'multiline':False]['text':'
 * Return a pointer to the ACL of file "fname" in allocated memory.
 * Return NULL if the ACL is not available for whatever reason.
 ','line_number':4216,'multiline':True]['text':' Try to retrieve the entire security descriptor.','line_number':4241,'multiline':False]['text':' Abstract filename','line_number':4243,'multiline':False]['text':' File Object','line_number':4244,'multiline':False]['text':' Ownership information.','line_number':4249,'multiline':False]['text':' Group membership.','line_number':4250,'multiline':False]['text':' Discretionary information.','line_number':4251,'multiline':False]['text':' For auditing purposes.','line_number':4252,'multiline':False]['text':' Retrieve only DACL.','line_number':4257,'multiline':False]['text':'
 * Check if "acl" contains inherited ACE.
 ','line_number':4281,'multiline':True]['text':'
 * Set the ACL of file "fname" to "acl" (unless it's NULL).
 * Errors are ignored.
 * This must only be called with "acl" equal to what mch_get_acl() returned.
 ','line_number':4303,'multiline':True]['text':' Set security flags','line_number':4323,'multiline':False]['text':' Do not inherit its parent's DACL.','line_number':4331,'multiline':False]['text':' If the DACL is inherited, Cygwin permissions would be changed.','line_number':4332,'multiline':False]['text':' Abstract filename','line_number':4340,'multiline':False]['text':' File Object','line_number':4341,'multiline':False]['text':' Ownership information.','line_number':4343,'multiline':False]['text':' Group membership.','line_number':4344,'multiline':False]['text':' Discretionary information.','line_number':4345,'multiline':False]['text':' For auditing purposes.','line_number':4346,'multiline':False]['text':' Free the memory just in case','line_number':4360,'multiline':False]['text':'
 * handler for ctrl-break, ctrl-c interrupts, and fatal events.
 ','line_number':4368,'multiline':True]['text':' ReadConsoleInput is blocking, send a key event to continue.','line_number':4388,'multiline':False]['text':' fatal events: shut down gracefully','line_number':4399,'multiline':False]['text':' output IObuff, preserve files and exit','line_number':4416,'multiline':False]['text':' not reached','line_number':4418,'multiline':False]['text':'
 * set the tty in (raw) ? "raw" : "cooked" mode
 ','line_number':4426,'multiline':True]['text':' Do not turn off the ENABLE_PROCESSED_OUTPUT flag when using','line_number':4457,'multiline':False]['text':' VTP.','line_number':4458,'multiline':False]['text':' cooked','line_number':4466,'multiline':False]['text':'
 * Get the size of the current window in `Rows' and `Columns'
 * Return OK when size could be determined, FAIL otherwise.
 ','line_number':4490,'multiline':True]['text':'
	 * For some reason, we are trying to get the screen dimensions
	 * even though we are not in termcap mode.  The 'Rows' and 'Columns'
	 * variables are really intended to mean the size of Vim screen
	 * while in termcap mode.
	 ','line_number':4505,'multiline':True]['text':'
 * Resize console buffer to 'COORD'
 ','line_number':4527,'multiline':True]['text':'
 * Resize console window size to 'srWindowRect'
 ','line_number':4551,'multiline':True]['text':'
 * Set a console window to `xSize' * `ySize'
 ','line_number':4572,'multiline':True]['text':' hold current console buffer info','line_number':4581,'multiline':False]['text':' hold the new console size','line_number':4582,'multiline':False]['text':' get the largest size we can size the console window to','line_number':4595,'multiline':False]['text':' define the new console window size and scroll position','line_number':4598,'multiline':False]['text':'
	     * Increasing number of lines/columns, do buffer first.
	     * Use the maximal size in x and y direction.
	     ','line_number':4611,'multiline':True]['text':' define the new console buffer size','line_number':4627,'multiline':False]['text':' In the new console call API, only the first time in reverse order','line_number':4631,'multiline':False]['text':' Workaround for a Windows 10 bug','line_number':4639,'multiline':False]['text':'
 * Set the console window to `Rows' * `Columns'
 ','line_number':4651,'multiline':True]['text':' Don't change window size while still starting up','line_number':4663,'multiline':False]['text':' Clamp Rows and Columns to reasonable values','line_number':4674,'multiline':False]['text':'
 * Rows and/or Columns has changed.
 ','line_number':4684,'multiline':True]['text':'
 * Called when started up, to set the winsize that was delayed.
 ','line_number':4698,'multiline':True]['text':' FEAT_GUI_MSWIN','line_number':4712,'multiline':False]['text':' Executable name','line_number':4738,'multiline':False]['text':' Command to execute','line_number':4739,'multiline':False]['text':' Process security attributes','line_number':4740,'multiline':False]['text':' Thread security attributes','line_number':4741,'multiline':False]['text':' Inherit handles','line_number':4742,'multiline':False]['text':' Creation flags','line_number':4743,'multiline':False]['text':' Environment','line_number':4744,'multiline':False]['text':' Current directory','line_number':4745,'multiline':False]['text':' Startup information','line_number':4746,'multiline':False]['text':' Process information','line_number':4747,'multiline':False]['text':'
 * Specialised version of system() for Win32 GUI mode.
 * This version proceeds as follows:
 *    1. Create a console window for use by the subprocess
 *    2. Run the subprocess (it gets the allocated console by default)
 *    3. Wait for the subprocess to terminate and get its exit code
 *    4. Prompt the user to press a key to close the console window
 ','line_number':4775,'multiline':True]['text':'
     * It's nicer to run a filter command in a minimized window.
     * Don't activate the window to keep focus on Vim.
     ','line_number':4796,'multiline':True]['text':' Now, run the command','line_number':4807,'multiline':False]['text':' Wait for the command to terminate before continuing','line_number':4812,'multiline':False]['text':' Keep updating the window while waiting for the shell to finish.','line_number':4817,'multiline':False]['text':' We start waiting for a very short time and then increase it, so','line_number':4832,'multiline':False]['text':' that we respond quickly when the process is quick, and don't','line_number':4833,'multiline':False]['text':' consume too much overhead when it's slow.','line_number':4834,'multiline':False]['text':' Get the command exit code','line_number':4842,'multiline':False]['text':' Close the handles to the subprocess, so that it goes away','line_number':4846,'multiline':False]['text':' Try to get input focus back.  Doesn't always work though.','line_number':4850,'multiline':False]['text':'
 * Thread launched by the gui to send the current buffer data to the
 * process. This way avoid to hang up vim totally if the children
 * process take a long time to process the lines.
 ','line_number':4856,'multiline':True]['text':' NL -> NUL translation','line_number':4879,'multiline':False]['text':' Finished a line, add a NL, unless this line should not have','line_number':4891,'multiline':False]['text':' one.','line_number':4892,'multiline':False]['text':' finished all the lines, close pipe','line_number':4915,'multiline':False]['text':' length for buffer, stolen from unix version','line_number':4921,'multiline':False]['text':'
 * This function read from the children's stdout and write the
 * data on screen or in the buffer accordingly.
 ','line_number':4923,'multiline':True]['text':' we query the pipe to see if there is any data to read','line_number':4940,'multiline':False]['text':' to avoid to perform a blocking read','line_number':4941,'multiline':False]['text':' pipe to query','line_number':4942,'multiline':False]['text':' optional buffer','line_number':4943,'multiline':False]['text':' buffer size','line_number':4944,'multiline':False]['text':' number of read bytes','line_number':4945,'multiline':False]['text':' available bytes total','line_number':4946,'multiline':False]['text':' byteLeft','line_number':4947,'multiline':False]['text':' We got real data in the pipe, read it','line_number':4949,'multiline':False]['text':' If we haven't read anything, there is a problem','line_number':4956,'multiline':False]['text':' Do NUL -> NL translation, append NL separated','line_number':4964,'multiline':False]['text':' lines to the current buffer.','line_number':4965,'multiline':False]['text':' Check if the last character in buffer[] is','line_number':4985,'multiline':False]['text':' incomplete, keep these bytes for the next','line_number':4986,'multiline':False]['text':' round.','line_number':4987,'multiline':False]['text':' NUL byte?','line_number':4992,'multiline':False]['text':' no complete character','line_number':4996,'multiline':False]['text':' avoid getting stuck at an illegal byte','line_number':4998,'multiline':False]['text':'
 * Version of system to use for windows NT > 5.0 (Win2K), use pipe
 * for communication and doesn't open any new window.
 ','line_number':5031,'multiline':True]['text':' reading buffer + size','line_number':5047,'multiline':False]['text':' buffer used to receive keys','line_number':5050,'multiline':False]['text':' TypeAHead','line_number':5051,'multiline':False]['text':' valid bytes in ta_buf[]','line_number':5052,'multiline':False]['text':' valid bytes in buffer[]','line_number':5058,'multiline':False]['text':' Set the bInheritHandle flag so pipe handles are inherited.','line_number':5063,'multiline':False]['text':' Ensure the read handle to the pipe for STDOUT is not inherited.','line_number':5069,'multiline':False]['text':' Create a pipe for the child process's STDIN.','line_number':5071,'multiline':False]['text':' Ensure the write handle to the pipe for STDIN is not inherited.','line_number':5073,'multiline':False]['text':' set-up our file redirection','line_number':5089,'multiline':False]['text':' Now, run the command.','line_number':5109,'multiline':False]['text':' About "Inherit handles" being TRUE: this command can be litigious,','line_number':5110,'multiline':False]['text':' handle inheritance was deactivated for pending temp file, but, if we','line_number':5111,'multiline':False]['text':' deactivate it, the pipes don't work for some reason.','line_number':5112,'multiline':False]['text':' Close our unused side of the pipes','line_number':5119,'multiline':False]['text':' security attributes','line_number':5126,'multiline':False]['text':' default stack size','line_number':5127,'multiline':False]['text':' function to be executed','line_number':5128,'multiline':False]['text':' parameter','line_number':5129,'multiline':False]['text':' creation flag, start immediately','line_number':5130,'multiline':False]['text':' we don't care about thread id','line_number':5131,'multiline':False]['text':' Keep updating the window while waiting for the shell to finish.','line_number':5136,'multiline':False]['text':' write pipe information in the window','line_number':5147,'multiline':False]['text':' Get extra characters when we don't have any.  Reset the','line_number':5167,'multiline':False]['text':' counter and timer.','line_number':5168,'multiline':False]['text':'
		     * For pipes: Check for CTRL-C: send interrupt signal to
		     * child.  Check for CTRL-D: EOF, close pipe to child.
		     ','line_number':5174,'multiline':True]['text':' Learn what exit code is expected, for','line_number':5182,'multiline':False]['text':' now put 9 as SIGKILL','line_number':5183,'multiline':False]['text':'
		     * For pipes: echo the typed characters.  For a pty this
		     * does not seem to work.
		     ','line_number':5195,'multiline':True]['text':'
		     * Write the characters to the child, unless EOF has been
		     * typed for pipes.  Write one character at a time, to
		     * avoid losing too much typeahead.  When writing buffer
		     * lines, drop the typed characters (only check for
		     * CTRL-C).
		     ','line_number':5218,'multiline':True]['text':' if we are typing in, we want to keep things reactive','line_number':5231,'multiline':False]['text':' We start waiting for a very short time and then increase it, so','line_number':5255,'multiline':False]['text':' that we respond quickly when the process is quick, and don't','line_number':5256,'multiline':False]['text':' consume too much overhead when it's slow.','line_number':5257,'multiline':False]['text':' Close the pipe','line_number':5262,'multiline':False]['text':' Get the command exit code','line_number':5269,'multiline':False]['text':' remember that the NL was missing','line_number':5277,'multiline':False]['text':' Close the handles to the subprocess, so that it goes away','line_number':5285,'multiline':False]['text':' if we can pipe and the shelltemp option is off','line_number':5295,'multiline':False]['text':' If the command starts and ends with double quotes, enclose the command','line_number':5312,'multiline':False]['text':' in parentheses.','line_number':5313,'multiline':False]['text':'
 * Use a terminal window to run a shell command in.
 ','line_number':5354,'multiline':True]['text':' SHELL_*, see vim.h','line_number':5360,'multiline':False]['text':' operator arguments','line_number':5370,'multiline':False]['text':' Find a window to make "buf" curbuf.','line_number':5405,'multiline':False]['text':' Only do this when a window was found for "buf".','line_number':5409,'multiline':False]['text':' If terminal_loop() returns OK we got a key that is handled','line_number':5415,'multiline':False]['text':' in Normal model. We don't do redrawing anyway.','line_number':5416,'multiline':False]['text':' restore curwin/curbuf and a few other things','line_number':5428,'multiline':False]['text':'
 * Either execute a command by calling the shell or start a new shell
 ','line_number':5440,'multiline':True]['text':' SHELL_*, see vim.h','line_number':5446,'multiline':False]['text':' Change the title to reflect that we are in a subshell.','line_number':5455,'multiline':False]['text':' TODO: make the terminal window work with input or output redirected.','line_number':5486,'multiline':False]['text':' Skip a leading quote and (.','line_number':5497,'multiline':False]['text':' Check the command does not begin with "start "','line_number':5501,'multiline':False]['text':' Use a terminal window to run the command in.','line_number':5505,'multiline':False]['text':'
     * Catch all deadly signals while running the external command, because a
     * CTRL-C, Ctrl-Break or illegal instruction  might otherwise kill us.
     ','line_number':5513,'multiline':True]['text':' set to normal mode','line_number':5530,'multiline':False]['text':' we use "command" or "cmd" to start the shell; slow but easy','line_number':5538,'multiline':False]['text':' Skip a leading ", ( and "(.','line_number':5543,'multiline':False]['text':' File name','line_number':5581,'multiline':False]['text':' Access flags','line_number':5582,'multiline':False]['text':' Share flags','line_number':5583,'multiline':False]['text':' Security att.','line_number':5584,'multiline':False]['text':' Open flags','line_number':5585,'multiline':False]['text':' File att.','line_number':5586,'multiline':False]['text':' Temp file','line_number':5587,'multiline':False]['text':' Remove a trailing ", ) and )" if they have a match','line_number':5592,'multiline':False]['text':' at the start of the command.','line_number':5593,'multiline':False]['text':'
	     * If creating new console, arguments are passed to the
	     * 'cmd.exe' as-is. If it's not, arguments are not treated
	     * correctly for current 'cmd.exe'. So unescape characters in
	     * shellxescape except '|' for avoiding to be treated as
	     * argument to them. Pass the arguments to sub-shell.
	     ','line_number':5607,'multiline':True]['text':' make "cmd.exe /c arguments"','line_number':5626,'multiline':False]['text':'
	     * Now, start the command as a process, so that it doesn't
	     * inherit our handles which causes unpleasant dangling swap
	     * files if we exit before the spawned process
	     ','line_number':5638,'multiline':True]['text':' Close the handle to \\.\NUL created above.','line_number':5665,'multiline':False]['text':' Close the handles to the subprocess, so that it goes away','line_number':5668,'multiline':False]['text':' Use vimrun to execute the command.  It opens a console','line_number':5711,'multiline':False]['text':' window, which can be closed without killing Vim.','line_number':5712,'multiline':False]['text':' workaround for the case that "vimrun" does not exist','line_number':5723,'multiline':False]['text':' The shell may have messed with the mode, always set it.','line_number':5738,'multiline':False]['text':' set to raw mode','line_number':5740,'multiline':False]['text':' Print the return value, unless "vimrun" was used.','line_number':5743,'multiline':False]['text':'
 * Turn the dictionary "env" into a NUL separated list that can be used as the
 * environment argument of vim_create_process().
 ','line_number':5795,'multiline':True]['text':' for last \0','line_number':5806,'multiline':False]['text':' for last \0','line_number':5845,'multiline':False]['text':' size of "VIM_SERVERNAME=" and value,','line_number':5869,'multiline':False]['text':' plus "VIM_TERMINAL=" and value,','line_number':5870,'multiline':False]['text':' plus two terminating NULs','line_number':5871,'multiline':False]['text':'
 * Create a pair of pipes.
 * Return TRUE for success, FALSE for failure.
 ','line_number':5909,'multiline':True]['text':' Create named pipe. Max size of named pipe is 65535.','line_number':5924,'multiline':False]['text':' if failing, switch the way to terminate','line_number':6096,'multiline':False]['text':' process with TerminateProcess.','line_number':6097,'multiline':False]['text':'
 * Send a (deadly) signal to "job".
 * Return FAIL if it didn't work.
 ','line_number':6230,'multiline':True]['text':' deadly signal','line_number':6241,'multiline':False]['text':'
 * Clear the data related to "job".
 ','line_number':6261,'multiline':True]['text':'
 * Start termcap mode
 ','line_number':6279,'multiline':True]['text':'
	 * We've been in termcap mode before.  Restore certain screen
	 * characteristics, including the buffer size and the window
	 * size.  Since we will be redrawing the screen, we don't need
	 * to restore the actual contents of the buffer.
	 ','line_number':6294,'multiline':True]['text':'
	 * This is our first time entering termcap mode.  Clear the console
	 * screen buffer, and resize the buffer to match the current window
	 * size.  We will use this as the size of our editing environment.
	 ','line_number':6308,'multiline':True]['text':'
 * End termcap mode
 ','line_number':6339,'multiline':True]['text':' Switch back to main screen buffer.','line_number':6368,'multiline':False]['text':'
	 * Clear anything that happens to be on the current line.
	 ','line_number':6374,'multiline':True]['text':'
	 * The following is just for aesthetics.  If we are exiting without
	 * restoring the screen, then we want to have a prompt string
	 * appear at the bottom line.  However, the command interpreter
	 * seems to always advance the cursor one line before displaying
	 * the prompt string, which causes the screen to scroll.  To
	 * counter this, move the cursor up one line before exiting.
	 ','line_number':6381,'multiline':True]['text':'
	 * Position the cursor at the leftmost column of the desired row.
	 ','line_number':6391,'multiline':True]['text':' !FEAT_GUI_MSWIN || VIMDLL','line_number':6399,'multiline':False]['text':' never used','line_number':6408,'multiline':False]['text':'
 * clear `n' chars, starting from `coord'
 ','line_number':6413,'multiline':True]['text':'
 * Clear the screen
 ','line_number':6438,'multiline':True]['text':'
 * Clear to end of display
 ','line_number':6457,'multiline':True]['text':'
 * Clear to end of line
 ','line_number':6480,'multiline':True]['text':'
 * Scroll the scroll region up by `cLines' lines
 ','line_number':6502,'multiline':True]['text':'
 * Set the scroll region
 ','line_number':6517,'multiline':True]['text':'
 * Insert `cLines' lines at the current cursor position
 ','line_number':6564,'multiline':True]['text':' Here we have to deal with a win32 console flake: If the scroll','line_number':6599,'multiline':False]['text':' region looks like abc and we scroll c to a and fill with d we get','line_number':6600,'multiline':False]['text':' cbd... if we scroll block c one line at a time to a, we get cdd...','line_number':6601,'multiline':False]['text':' vim expects cdd consistently... So we have to deal with that','line_number':6602,'multiline':False]['text':' here... (this also occurs scrolling the same way in the other','line_number':6603,'multiline':False]['text':' direction).','line_number':6604,'multiline':False]['text':'
 * Delete `cLines' lines at the current cursor position
 ','line_number':6634,'multiline':True]['text':' Here we have to deal with a win32 console flake; See insert_lines()','line_number':6670,'multiline':False]['text':' above.','line_number':6671,'multiline':False]['text':'
 * Set the cursor position to (x,y) (1-based).
 ','line_number':6703,'multiline':True]['text':' There are reports of double-width characters not displayed','line_number':6716,'multiline':False]['text':' correctly.  This workaround should fix it, similar to how it's done','line_number':6717,'multiline':False]['text':' for VTP.','line_number':6718,'multiline':False]['text':' external cursor coords are 1-based; internal are 0-based','line_number':6722,'multiline':False]['text':' Move the cursor to the left edge of the screen to prevent screen','line_number':6729,'multiline':False]['text':' destruction.  Insider build bug.  Always enabled because it's cheap','line_number':6730,'multiline':False]['text':' and avoids mistakes with recognizing the build.','line_number':6731,'multiline':False]['text':'
 * Set the current text attribute = (foreground | background)
 * See ../runtime/doc/os_win32.txt for the numbers.
 ','line_number':6742,'multiline':True]['text':'
 * restore the default text attribute (whatever we started with)
 ','line_number':6779,'multiline':True]['text':'
 * Make the text standout, by brightening it
 ','line_number':6794,'multiline':True]['text':'
 * Turn off standout mode
 ','line_number':6806,'multiline':True]['text':'
 * Set normal fg/bg color, based on T_ME.  Called when t_me has been set.
 ','line_number':6819,'multiline':True]['text':'
 * visual bell: flash the screen
 ','line_number':6851,'multiline':True]['text':' wait for 15 msec','line_number':6877,'multiline':False]['text':'
 * Make the cursor visible or invisible
 ','line_number':6888,'multiline':True]['text':'
 * Write "cbToWrite" bytes in `pchBuf' to the screen.
 * Returns the number of bytes actually written (at least one).
 ','line_number':6905,'multiline':True]['text':' cbToWrite == 1 && *pchBuf == ' ' && enc_utf8','line_number':6942,'multiline':False]['text':' When writing fails or didn't write a single character, pretend one','line_number':6972,'multiline':False]['text':' character was written, otherwise we get stuck.','line_number':6973,'multiline':False]['text':' Cursor under VTP is always in the correct position, no need to reset.','line_number':7007,'multiline':False]['text':'
 * Pointer to next if SGR (^[[n;2;*;*;*m), NULL otherwise.
 ','line_number':7051,'multiline':True]['text':'
 * Pointer to next if SGR(^[[nm)<space>ESC, NULL otherwise.
 ','line_number':7066,'multiline':True]['text':'
 * Pointer to the next if any whitespace that may follow SGR is ESC, otherwise
 * NULL.
 ','line_number':7092,'multiline':True]['text':'
 * If there is only a newline between the sequence immediately following it,
 * a pointer to the character following the newline is returned.
 * Otherwise NULL.
 ','line_number':7106,'multiline':True]['text':'
 * mch_write(): write the output buffer to the screen, translating ESC
 * sequences into calls to console output routines.
 ','line_number':7121,'multiline':True]['text':' translate ESC | sequences into faked bios calls','line_number':7143,'multiline':False]['text':' While processing a sequence, on rare occasions it seems that another','line_number':7149,'multiline':False]['text':' sequence may be inserted asynchronously.','line_number':7150,'multiline':False]['text':' \n, newline: go to the beginning of the next line or scroll','line_number':7190,'multiline':False]['text':' \r, carriage return: go to beginning of line','line_number':7208,'multiline':False]['text':' \b, backspace: move cursor one position left','line_number':7218,'multiline':False]['text':' \a, bell','line_number':7235,'multiline':False]['text':' Handling frequent optional sequences.  Output to the screen','line_number':7261,'multiline':False]['text':' takes too long, so do not output as much as possible.','line_number':7262,'multiline':False]['text':' If resetFG,FG,BG,<cr>,BG,FG are connected, the preceding','line_number':7264,'multiline':False]['text':' resetFG,FG,BG are omitted.','line_number':7265,'multiline':False]['text':' If FG,BG,BG,FG of SGR are connected, the first FG can be','line_number':7274,'multiline':False]['text':' omitted.','line_number':7275,'multiline':False]['text':' If FG,BG,FG,BG of SGR are connected, the first FG can be','line_number':7279,'multiline':False]['text':' omitted.','line_number':7280,'multiline':False]['text':' If BG,BG of SGR are connected, the first BG can be omitted.','line_number':7284,'multiline':False]['text':' If restoreFG and FG are connected, the restoreFG can be','line_number':7288,'multiline':False]['text':' omitted.','line_number':7289,'multiline':False]['text':' DECSCUSR (cursor style) sequences','line_number':7447,'multiline':False]['text':' Pass through','line_number':7449,'multiline':False]['text':' Write a single character','line_number':7456,'multiline':False]['text':' FEAT_GUI_MSWIN','line_number':7480,'multiline':False]['text':'
 * Delay for "msec" milliseconds.
 ','line_number':7483,'multiline':True]['text':' never wait for input','line_number':7492,'multiline':False]['text':' Console','line_number':7493,'multiline':False]['text':' never wait for input','line_number':7497,'multiline':False]['text':' if msec is large enough, wait by portions in p_mzq','line_number':7507,'multiline':False]['text':'
 * This version of remove is not scared by a readonly (backup) file.
 * This can also remove a symbolic link like Unix.
 * Return 0 for success, -1 for failure.
 ','line_number':7526,'multiline':True]['text':'
     * On Windows, deleting a directory's symbolic link is done by
     * RemoveDirectory(): mch_rmdir.  It seems unnatural, but it is fact.
     ','line_number':7537,'multiline':True]['text':'
 * Check for an "interrupt signal": CTRL-break or CTRL-C.
 ','line_number':7556,'multiline':True]['text':' physical RAM to leave for the OS','line_number':7575,'multiline':False]['text':'
 * How much main memory in KiB that can be used by VIM.
 ','line_number':7578,'multiline':True]['text':' Need to use GlobalMemoryStatusEx() when there is more memory than','line_number':7586,'multiline':False]['text':' what fits in 32 bits.','line_number':7587,'multiline':False]['text':' Process address space fits in physical RAM, use all of it.','line_number':7592,'multiline':False]['text':' Catch old NT box or perverse hardware setup.','line_number':7597,'multiline':False]['text':' Use physical RAM less reserve for OS + data.','line_number':7600,'multiline':False]['text':'
 * mch_wrename() works around a bug in rename (aka MoveFile) in
 * Windows 95: rename("foo.bar", "foo.bar~") will generate a
 * file whose short file name is "FOO.BAR" (its long file name will
 * be correct: "foo.bar~").  Because a file can be accessed by
 * either its SFN or its LFN, "foo.bar" has effectively been
 * renamed to "foo.bar", which is not at all what was wanted.  This
 * seems to happen only when renaming files with three-character
 * extensions by appending a suffix that does not include ".".
 * Windows NT gets it right, however, with an SFN of "FOO~1.BAR".
 *
 * There is another problem, which isn't really a bug but isn't right either:
 * When renaming "abcdef~1.txt" to "abcdef~1.txt~", the short name can be
 * "abcdef~1.txt" again.  This has been reported on Windows NT 4.0 with
 * service pack 6.  Doesn't seem to happen on Windows 98.
 *
 * Like rename(), returns 0 upon success, non-zero upon failure.
 * Should probably set errno appropriately when errors occur.
 ','line_number':7604,'multiline':True]['text':' No need to play tricks unless the file name contains a "~" as the','line_number':7632,'multiline':False]['text':' seventh character.','line_number':7633,'multiline':False]['text':' Get base path of new file name.  Undocumented feature: If pszNewFile is','line_number':7642,'multiline':False]['text':' a directory, no error is returned and pszFilePart will be NULL.','line_number':7643,'multiline':False]['text':' Get (and create) a unique temporary file name in directory of new file','line_number':7648,'multiline':False]['text':' blow the temp file away','line_number':7652,'multiline':False]['text':' rename old file to the temp file','line_number':7656,'multiline':False]['text':' now create an empty file called pszOldFile; this prevents the operating','line_number':7660,'multiline':False]['text':' system using pszOldFile as an alias (SFN) if we're renaming within the','line_number':7661,'multiline':False]['text':' same directory.  For example, we're editing a file called','line_number':7662,'multiline':False]['text':' filename.asc.txt by its SFN, filena~1.txt.  If we rename filena~1.txt','line_number':7663,'multiline':False]['text':' to filena~1.txt~ (i.e., we're making a backup while writing it), the','line_number':7664,'multiline':False]['text':' SFN for filena~1.txt~ will be filena~1.txt, by default, which will','line_number':7665,'multiline':False]['text':' cause all sorts of problems later in buf_write().  So, we create an','line_number':7666,'multiline':False]['text':' empty file called filena~1.txt and the system will have to find some','line_number':7667,'multiline':False]['text':' other SFN for filena~1.txt~, such as filena~2.txt','line_number':7668,'multiline':False]['text':' rename the temp file to the new file','line_number':7675,'multiline':False]['text':' Renaming failed.  Rename the file back to its old name, so that it','line_number':7678,'multiline':False]['text':' looks like nothing happened.','line_number':7679,'multiline':False]['text':' Seems to be left around on Novell filesystems','line_number':7684,'multiline':False]['text':' finally, remove the empty old file','line_number':7687,'multiline':False]['text':'
 * Converts the filenames to UTF-16, then call mch_wrename().
 * Like rename(), returns 0 upon success, non-zero upon failure.
 ','line_number':7695,'multiline':True]['text':'
 * Get the default shell for the current hardware platform
 ','line_number':7717,'multiline':True]['text':'
 * mch_access() extends access() to do more detailed check on network drives.
 * Returns 0 if file "n" has access rights according to "p", -1 otherwise.
 ','line_number':7726,'multiline':True]['text':' default: fail','line_number':7734,'multiline':False]['text':' Read check is performed by seeing if we can do a find file on','line_number':7747,'multiline':False]['text':' the directory for any file.','line_number':7748,'multiline':False]['text':' Trying to create a temporary file in the directory should catch','line_number':7768,'multiline':False]['text':' directories on read-only network shares.  However, in','line_number':7769,'multiline':False]['text':' directories whose ACL allows writes but denies deletes will end','line_number':7770,'multiline':False]['text':' up keeping the temporary file :-(.','line_number':7771,'multiline':False]['text':' Don't consider a file read-only if another process has opened it.','line_number':7780,'multiline':False]['text':' Trying to open the file for the required access does ACL, read-only','line_number':7783,'multiline':False]['text':' network share, and file attribute checks.','line_number':7784,'multiline':False]['text':' success','line_number':7795,'multiline':False]['text':'
 * Version of open() that may use UTF-16 file name.
 ','line_number':7801,'multiline':True]['text':'
 * Version of fopen() that uses UTF-16 file name.
 ','line_number':7819,'multiline':True]['text':' Work around an annoying assertion in the Microsoft debug CRT','line_number':7829,'multiline':False]['text':' when mode's text/binary setting doesn't match _get_fmode().','line_number':7830,'multiline':False]['text':'
 * SUB STREAM (aka info stream) handling:
 *
 * NTFS can have sub streams for each file.  The normal contents of a file is
 * stored in the main stream, and extra contents (author information, title and
 * so on) can be stored in a sub stream.  After Windows 2000, the user can
 * access and store this information in sub streams via an explorer's property
 * menu item in the right click menu.  This information in sub streams was lost
 * when copying only the main stream.  Therefore we have to copy sub streams.
 *
 * Incomplete explanation:
 *	http://msdn.microsoft.com/library/en-us/dnw2k/html/ntfs5.asp
 * More useful info and an example:
 *	http://www.sysinternals.com/ntw2k/source/misc.shtml#streams
 ','line_number':7853,'multiline':True]['text':'
 * Copy info stream data "substream".  Read from the file with BackupRead(sh)
 * and write to stream "substream" of file "to".
 * Errors are ignored.
 ','line_number':7869,'multiline':True]['text':' Copy block of bytes at a time.  Abort when something goes wrong.','line_number':7893,'multiline':False]['text':' (size_t) cast for Borland C 5.5','line_number':7896,'multiline':False]['text':'
 * Copy info streams from file "from" to file "to".
 ','line_number':7912,'multiline':True]['text':' Convert the file names to wide characters.','line_number':7929,'multiline':False]['text':' Open the file for reading.','line_number':7934,'multiline':False]['text':' Use BackupRead() to find the info streams.  Repeat until we','line_number':7939,'multiline':False]['text':' have done them all.','line_number':7940,'multiline':False]['text':' Get the header to find the length of the stream name.  If','line_number':7943,'multiline':False]['text':' the "readcount" is zero we have done all info streams.','line_number':7944,'multiline':False]['text':' We only deal with streams that have a name.  The normal','line_number':7952,'multiline':False]['text':' file data appears to be without a name, even though docs','line_number':7953,'multiline':False]['text':' suggest it is called "::$DATA".','line_number':7954,'multiline':False]['text':' Read the stream name.','line_number':7957,'multiline':False]['text':' Copy an info stream with a name ":anything:$DATA".','line_number':7963,'multiline':False]['text':' Skip "::$DATA", it has no stream name (examples suggest','line_number':7964,'multiline':False]['text':' it might be used for the normal file contents).','line_number':7965,'multiline':False]['text':' Note that BackupRead() counts bytes, but the name is in','line_number':7966,'multiline':False]['text':' wide characters.','line_number':7967,'multiline':False]['text':' Advance to the next stream.  We might try seeking too far,','line_number':7979,'multiline':False]['text':' but BackupSeek() doesn't skip over stream borders, thus','line_number':7980,'multiline':False]['text':' that's OK.','line_number':7981,'multiline':False]['text':' Clear the context.','line_number':7986,'multiline':False]['text':'
 * ntdll.dll definitions
 ','line_number':7996,'multiline':True]['text':'
 * Load ntdll.dll functions.
 ','line_number':8059,'multiline':True]['text':'
 * Copy extended attributes (EA) from file "from" to file "to".
 ','line_number':8096,'multiline':True]['text':' Convert the file names to the fully qualified object names.','line_number':8116,'multiline':False]['text':' Convert the names to wide characters.','line_number':8126,'multiline':False]['text':' Get the EA.','line_number':8132,'multiline':False]['text':' Set the EA.','line_number':8154,'multiline':False]['text':'
 * Copy file attributes from file "from" to file "to".
 * For Windows NT and later we copy info streams.
 * Always returns zero, errors are ignored.
 ','line_number':8175,'multiline':True]['text':' File streams only work on Windows NT and later.','line_number':8183,'multiline':False]['text':'
 * The command line arguments in UTF-16
 ','line_number':8190,'multiline':True]['text':' last argument in global_argv[] used','line_number':8198,'multiline':False]['text':' for the argument list.','line_number':8199,'multiline':False]['text':' indexes in global_argv[] for','line_number':8200,'multiline':False]['text':' command line arguments added to','line_number':8201,'multiline':False]['text':' the argument list','line_number':8202,'multiline':False]['text':' nr of entries in used_file_indexes','line_number':8203,'multiline':False]['text':' take file names literally','line_number':8204,'multiline':False]['text':' file name was full path','line_number':8205,'multiline':False]['text':' file name was with diff mode','line_number':8206,'multiline':False]['text':'
 * Get the command line arguments.  Unicode version.
 * Returns argc.  Zero when something fails.
 ','line_number':8210,'multiline':True]['text':' Convert each Unicode argument to UTF-8.','line_number':8234,'multiline':False]['text':' Out of memory, clear everything.','line_number':8240,'multiline':False]['text':'
 * Remember "name" is an argument that was added to the argument list.
 * This avoids that we have to re-parse the argument list when fix_arg_enc()
 * is called.
 ','line_number':8275,'multiline':True]['text':'
 * Remember the length of the argument list as it was.  If it changes then we
 * leave it alone when 'encoding' is set.
 ','line_number':8299,'multiline':True]['text':'
 * Fix the encoding of the command line arguments.  Invoked when 'encoding'
 * has been changed while starting up.  Use the UTF-16 command line arguments
 * and convert them to 'encoding'.
 ','line_number':8309,'multiline':True]['text':' Safety checks:','line_number':8322,'multiline':False]['text':' - if argument count differs between the wide and non-wide argument','line_number':8323,'multiline':False]['text':'   list, something must be wrong.','line_number':8324,'multiline':False]['text':' - the file name arguments must have been located.','line_number':8325,'multiline':False]['text':' - the length of the argument list wasn't changed by the user.','line_number':8326,'multiline':False]['text':' Remember the buffer numbers for the arguments.','line_number':8334,'multiline':False]['text':' out of memory','line_number':8337,'multiline':False]['text':' Clear the argument list.  Make room for the new arguments.','line_number':8341,'multiline':False]['text':' out of memory','line_number':8344,'multiline':False]['text':' When using diff mode may need to concatenate file name to','line_number':8355,'multiline':False]['text':' directory name.  Just like it's done in main().','line_number':8356,'multiline':False]['text':' Re-use the old buffer by renaming it.  When not using literal','line_number':8370,'multiline':False]['text':' names it's done by alist_expand() below.','line_number':8371,'multiline':False]['text':' Check backtick literal. backtick literal is already expanded in','line_number':8375,'multiline':False]['text':' main.c, so this part add str as literal.','line_number':8376,'multiline':False]['text':' Now expand wildcards in the arguments.','line_number':8390,'multiline':False]['text':' Temporarily add '(' and ')' to 'isfname'.  These are valid','line_number':8391,'multiline':False]['text':' filename characters but are excluded from 'isfname' to make','line_number':8392,'multiline':False]['text':' "gf" work on a file name in parentheses (e.g.: see vim.h).','line_number':8393,'multiline':False]['text':' Also, unset wildignore to not be influenced by this option.','line_number':8394,'multiline':False]['text':' The arguments specified in command-line should be kept even if','line_number':8395,'multiline':False]['text':' encoding options were changed.','line_number':8396,'multiline':False]['text':' Use :legacy so that it also works when in Vim9 script.','line_number':8397,'multiline':False]['text':' If wildcard expansion failed, we are editing the first file of the','line_number':8407,'multiline':False]['text':' arglist and there is no file name: Edit the first argument now.','line_number':8408,'multiline':False]['text':' Unlike Un*x systems, we can free the string for _wputenv().','line_number':8441,'multiline':False]['text':'
 * Support for 256 colors and 24-bit colors was added in Windows 10
 * version 1703 (Creators update).
 ','line_number':8447,'multiline':True]['text':'
 * Support for pseudo-console (ConPTY) was added in windows 10
 * version 1809 (October 2018 update).
 ','line_number':8453,'multiline':True]['text':'
 * ConPTY differences between versions, need different logic.
 * version 1903 (May 2019 update).
 ','line_number':8459,'multiline':True]['text':'
 * version 1909 (November 2019 update).
 ','line_number':8465,'multiline':True]['text':'
 * Stay ahead of the next update, and when it's done, fix this.
 * version ? (2020 update, temporarily use the build number of insider preview)
 ','line_number':8470,'multiline':True]['text':'
 * Confirm until this version.  Also the logic changes.
 * insider preview.
 ','line_number':8476,'multiline':True]['text':'
 * Not stable now.
 ','line_number':8482,'multiline':True]['text':' T.B.D.','line_number':8485,'multiline':False]['text':' Notes:','line_number':8486,'multiline':False]['text':' Win 10 22H2 Final is build 19045, it's conpty is widely used.','line_number':8487,'multiline':False]['text':' Strangely, 19045 is newer but is a lower build number than the 2020 insider','line_number':8488,'multiline':False]['text':' preview which had a build 19587.  And, not sure how stable that was?','line_number':8489,'multiline':False]['text':' Win Server 2022 (May 10, 2022) is build 20348, its conpty is widely used.','line_number':8490,'multiline':False]['text':' Win 11 starts from build 22000, even though the major version says 10!','line_number':8491,'multiline':False]['text':' VTP uses alternate screen buffer.','line_number':8513,'multiline':False]['text':' But, not if running in a nested terminal','line_number':8514,'multiline':False]['text':' '\033[' + SGR + 'm'','line_number':8616,'multiline':False]['text':'
 * Set the console colors to the original colors or the last set colors.
 ','line_number':8855,'multiline':True]['text':'
 * Set the console colors to the original colors.
 ','line_number':8879,'multiline':True]['text':' remove trailing \r\n','line_number':8997,'multiline':False]['text':'
 * Calls to start_timeout alternate the return value pointer between the two
 * entries in timeout_flags. If the previously active timeout is very close to
 * expiring when start_timeout() is called then a race condition means that the
 * set_flag() function may still be invoked after the previous timer is
 * deleted. Ping-ponging between the two flags prevents this causing 'fake'
 * timeouts.
 ','line_number':9009,'multiline':True]['text':'
 * Stop any active timeout.
 ','line_number':9030,'multiline':True]['text':'
 * Start the timeout timer.
 *
 * The period is defined in milliseconds.
 *
 * The return value is a pointer to a flag that is initialised to 0.  If the
 * timeout expires, the flag is set to 1. This will only return pointers to
 * static memory; i.e. any pointer returned by this function may always be
 * safely dereferenced.
 *
 * This function is not expected to fail, but if it does it still returns a
 * valid flag pointer; the flag will remain stuck at zero.
 ','line_number':9048,'multiline':True]