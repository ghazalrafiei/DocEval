['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * misc2.c: Various functions.
 ','line_number':10,'multiline':True]['text':' cached result of mch_get_user_name()','line_number':15,'multiline':False]['text':'
 * Return TRUE if in the current mode we need to use virtual.
 ','line_number':19,'multiline':True]['text':' While an operator is being executed we return "virtual_op", because','line_number':27,'multiline':False]['text':' VIsual_active has already been reset, thus we can't check for "block"','line_number':28,'multiline':False]['text':' being used.','line_number':29,'multiline':False]['text':'
 * Get the screen position of the cursor.
 ','line_number':38,'multiline':True]['text':'
 * Go to column "wcol", and add/insert white space as necessary to get the
 * cursor in that column.
 * The caller must have saved the cursor line for undo!
 ','line_number':50,'multiline':True]['text':' Virtcol is valid','line_number':64,'multiline':False]['text':'
 * Get the screen position of character col with a coladd in the cursor line.
 ','line_number':71,'multiline':True]['text':'
 * Try to advance the Cursor to the specified screen column "wantcol".
 * If virtual editing: fine tune the cursor position.
 * Note that all virtual positions off the end of a line should share
 * a curwin->w_cursor.col value (n.b. this is equal to STRLEN(line)),
 * beginning at coladd 0.
 *
 * return OK if desired column is reached, FAIL if not
 ','line_number':87,'multiline':True]['text':' Virtcol is valid when not on a TAB','line_number':105,'multiline':False]['text':'
 * Return in "pos" the position of the cursor advanced to screen column
 * "wantcol".
 * return OK if desired column is reached, FAIL if not
 ','line_number':112,'multiline':True]['text':' change the text to achieve our goal?','line_number':126,'multiline':False]['text':' change char offset for the exact column','line_number':127,'multiline':False]['text':' column to move to (can be negative)','line_number':128,'multiline':False]['text':' In case of line wrapping don't move the cursor beyond the','line_number':176,'multiline':False]['text':' right screen edge.  In Insert mode allow going just beyond','line_number':177,'multiline':False]['text':' the last character (like what happens when typing and','line_number':178,'multiline':False]['text':' reaching the right window edge).','line_number':179,'multiline':False]['text':' Count a tab for what it's worth (if list mode not on)','line_number':190,'multiline':False]['text':' do not count the columns for virtual text above','line_number':200,'multiline':False]['text':'
	 * Handle all the special cases.  The virtual_active() check
	 * is needed to ensure that a virtual position off the end of
	 * a line has the correct indexing.  The one_more comparison
	 * replaces an explicit add of one_more later on.
	 ','line_number':208,'multiline':True]['text':' Don't count the chars from 'showbreak'.','line_number':218,'multiline':False]['text':' 'virtualedit' is set: The difference between wcol and col is','line_number':229,'multiline':False]['text':' filled with spaces.','line_number':230,'multiline':False]['text':' Append spaces','line_number':234,'multiline':False]['text':' Break a tab','line_number':257,'multiline':False]['text':' negative!!','line_number':259,'multiline':False]['text':' The width of the last character is used to set coladd.','line_number':301,'multiline':False]['text':' The difference between wcol and col is used to set coladd.','line_number':314,'multiline':False]['text':' prevent from moving onto a trail byte','line_number':322,'multiline':False]['text':'
 * Increment the cursor position.  See inc() for return values.
 ','line_number':331,'multiline':True]['text':'
 * Increment the line pointer "lp" crossing line boundaries as necessary.
 * Return 1 when going to the next line.
 * Return 2 when moving forward onto a NUL at the end of the line).
 * Return -1 when at the end of file.
 * Return 0 otherwise.
 ','line_number':340,'multiline':True]['text':' when searching position may be set to end of a line','line_number':352,'multiline':False]['text':' still within line, move to next char (may be NUL)','line_number':356,'multiline':False]['text':' there is a next line','line_number':370,'multiline':False]['text':'
 * incl(lp): same as inc(), but skip the NUL at the end of non-empty lines
 ','line_number':380,'multiline':True]['text':'
 * dec(p)
 *
 * Decrement the line pointer 'p' crossing line boundaries as necessary.
 * Return 1 when crossing a line, -1 when at start of file, 0 otherwise.
 ','line_number':393,'multiline':True]['text':' past end of line','line_number':413,'multiline':False]['text':' still within line','line_number':423,'multiline':False]['text':' there is a prior line','line_number':435,'multiline':False]['text':' at start of file','line_number':444,'multiline':False]['text':'
 * decl(lp): same as dec(), but skip the NUL at the end of non-empty lines
 ','line_number':448,'multiline':True]['text':'
 * Get the line number relative to the current cursor position, i.e. the
 * difference between line number and cursor position. Only look for lines that
 * can be visible, folded lines don't count.
 ','line_number':461,'multiline':True]['text':' line number to get the result for','line_number':469,'multiline':False]['text':' if lnum and cursor are in the same fold,','line_number':482,'multiline':False]['text':' now lnum <= cursor','line_number':483,'multiline':False]['text':' if lnum and cursor are in the same fold,','line_number':494,'multiline':False]['text':' now lnum >= cursor','line_number':495,'multiline':False]['text':' else if (lnum == cursor)','line_number':501,'multiline':False]['text':'     retval = 0;','line_number':502,'multiline':False]['text':'
 * Make sure "pos.lnum" and "pos.col" are valid in "buf".
 * This allows for the col to be on the NUL byte.
 ','line_number':511,'multiline':True]['text':'
 * Make sure curwin->w_cursor.lnum is valid.
 ','line_number':533,'multiline':True]['text':' If there is a closed fold at the end of the file, put the cursor in','line_number':542,'multiline':False]['text':' its first line.  Otherwise in the last line.','line_number':543,'multiline':False]['text':'
 * Make sure curwin->w_cursor.col is valid.
 ','line_number':553,'multiline':True]['text':'
 * Make sure win->w_cursor.col is valid.
 ','line_number':562,'multiline':True]['text':' Allow cursor past end-of-line when:','line_number':578,'multiline':False]['text':' - in Insert mode or restarting Insert mode','line_number':579,'multiline':False]['text':' - in Visual mode and 'selection' isn't "old"','line_number':580,'multiline':False]['text':' - 'virtualedit' is set','line_number':581,'multiline':False]['text':' Move the cursor to the head byte.','line_number':590,'multiline':False]['text':' If virtual editing is on, we can leave the cursor on the old position,','line_number':598,'multiline':False]['text':' only we must set it to virtual.  But don't do it when at the end of the','line_number':599,'multiline':False]['text':' line.','line_number':600,'multiline':False]['text':' Make sure that coladd is not more than the char width.','line_number':609,'multiline':False]['text':' Not for the last character, coladd is then used when the cursor','line_number':610,'multiline':False]['text':' is actually after the last character.','line_number':611,'multiline':False]['text':' avoid weird number when there is a miscalculation or overflow','line_number':622,'multiline':False]['text':'
 * make sure curwin->w_cursor in on a valid character
 ','line_number':627,'multiline':True]['text':'
 * Check if VIsual position is valid, correct it if not.
 * Can be called when in Visual mode and a change has been made.
 ','line_number':637,'multiline':True]['text':'
 * Make sure curwin->w_cursor is not on the NUL at the end of the line.
 * Allow it when in Visual mode and 'selection' is not "old".
 ','line_number':662,'multiline':True]['text':'
 * Set "curwin->w_leftcol" to "leftcol".
 * Adjust the cursor position if needed.
 * Return TRUE if the cursor was moved.
 ','line_number':675,'multiline':True]['text':' Return quickly when there is no change.','line_number':685,'multiline':False]['text':' If the cursor is right or left of the screen, move it to last or first','line_number':694,'multiline':False]['text':' visible character.','line_number':695,'multiline':False]['text':' If the start of the character under the cursor is not on the screen,','line_number':708,'multiline':False]['text':' advance the cursor one more char.  If this fails (last char of the','line_number':709,'multiline':False]['text':' line) adjust the scrolling.','line_number':710,'multiline':False]['text':' there isn't another character','line_number':721,'multiline':False]['text':' adjust w_leftcol instead','line_number':723,'multiline':False]['text':'
 * Isolate one part of a string option where parts are separated with
 * "sep_chars".
 * The part is copied into "buf[maxlen]".
 * "*option" is advanced to the next part.
 * The length is returned.
 ','line_number':734,'multiline':True]['text':' skip '.' at start of option part, for 'suffixes'','line_number':751,'multiline':False]['text':'
	 * Skip backslash before a separator character and space.
	 ','line_number':756,'multiline':True]['text':' skip non-standard separator','line_number':767,'multiline':False]['text':' p points to next file name','line_number':769,'multiline':False]['text':'
 * Vim has its own isspace() function, because on some machines isspace()
 * can't handle characters above 128.
 ','line_number':787,'multiline':True]['text':'***********************************************************************
 * functions that use lookup tables for various things, generally to do with
 * special key codes.
 ','line_number':797,'multiline':True]['text':'
 * Some useful tables.
 ','line_number':802,'multiline':True]['text':' Bit-mask for particular key modifier','line_number':808,'multiline':False]['text':' Bit(s) for particular key modifier','line_number':809,'multiline':False]['text':' Single letter name of modifier','line_number':810,'multiline':False]['text':' 'A' must be the last one','line_number':823,'multiline':False]['text':' NOTE: when adding an entry, update MAX_KEY_NAME_LEN!','line_number':826,'multiline':False]['text':'
 * Shifted key terminal codes and their unshifted equivalent.
 * Don't add mouse codes here, they are handled separately!
 ','line_number':829,'multiline':True]['text':'  mod mask	    with modifier		without modifier','line_number':837,'multiline':False]['text':' begin','line_number':838,'multiline':False]['text':' cancel','line_number':839,'multiline':False]['text':' command','line_number':840,'multiline':False]['text':' copy','line_number':841,'multiline':False]['text':' create','line_number':842,'multiline':False]['text':' delete char','line_number':843,'multiline':False]['text':' delete line','line_number':844,'multiline':False]['text':' end','line_number':845,'multiline':False]['text':' end','line_number':846,'multiline':False]['text':' exit','line_number':847,'multiline':False]['text':' find','line_number':848,'multiline':False]['text':' help','line_number':849,'multiline':False]['text':' home','line_number':850,'multiline':False]['text':' home','line_number':851,'multiline':False]['text':' insert','line_number':852,'multiline':False]['text':' left arrow','line_number':853,'multiline':False]['text':' left arrow','line_number':854,'multiline':False]['text':' message','line_number':855,'multiline':False]['text':' move','line_number':856,'multiline':False]['text':' next','line_number':857,'multiline':False]['text':' options','line_number':858,'multiline':False]['text':' previous','line_number':859,'multiline':False]['text':' print','line_number':860,'multiline':False]['text':' redo','line_number':861,'multiline':False]['text':' replace','line_number':862,'multiline':False]['text':' right arr.','line_number':863,'multiline':False]['text':' right arr.','line_number':864,'multiline':False]['text':' resume','line_number':865,'multiline':False]['text':' save','line_number':866,'multiline':False]['text':' suspend','line_number':867,'multiline':False]['text':' undo','line_number':868,'multiline':False]['text':' up arrow','line_number':869,'multiline':False]['text':' down arrow','line_number':870,'multiline':False]['text':' vt100 F1','line_number':872,'multiline':False]['text':' F1','line_number':878,'multiline':False]['text':' F10','line_number':887,'multiline':False]['text':' TAB pseudo code','line_number':919,'multiline':False]['text':' Special key code or ascii value','line_number':927,'multiline':False]['text':' Name of key','line_number':928,'multiline':False]['text':' Alternative name','line_number':935,'multiline':False]['text':' Alternative name','line_number':936,'multiline':False]['text':' Alternative name','line_number':937,'multiline':False]['text':' Alternative name','line_number':939,'multiline':False]['text':' Alternative name','line_number':940,'multiline':False]['text':' Alternative name','line_number':942,'multiline':False]['text':' Alternative name','line_number':949,'multiline':False]['text':' Alternative name','line_number':1011,'multiline':False]['text':' OBSOLETE: Use','line_number':1080,'multiline':False]['text':' ScrollWheelXXX instead','line_number':1081,'multiline':False]['text':' NOTE: When adding a long name update MAX_KEY_NAME_LEN.','line_number':1101,'multiline':False]['text':'
 * Return the modifier mask bit (MOD_MASK_*) which corresponds to the given
 * modifier name ('S' for Shift, 'C' for Ctrl etc).
 ','line_number':1106,'multiline':True]['text':'
 * Check if if there is a special key code for "key" that includes the
 * modifiers specified.
 ','line_number':1122,'multiline':True]['text':' TAB is a special case','line_number':1136,'multiline':False]['text':'
 * Change <xHome> to <Home>, <xUp> to <Up>, etc.
 ','line_number':1158,'multiline':True]['text':'
 * Return a string which contains the name of the given key when the given
 * modifiers are down.
 ','line_number':1186,'multiline':True]['text':' Key that stands for a normal character.','line_number':1202,'multiline':False]['text':'
     * Translate shifted special keys into unshifted keys and set modifier.
     * Same for CTRL and ALT modifiers.
     ','line_number':1206,'multiline':True]['text':' try to find the key in the special key table','line_number':1223,'multiline':False]['text':'
     * When not a known special key, and not a printable character, try to
     * extract modifiers.
     ','line_number':1226,'multiline':True]['text':' try again, to find the un-alted key in the special key table','line_number':1238,'multiline':False]['text':' translate the modifier into a string','line_number':1248,'multiline':False]['text':' unknown special key, may output t_xx','line_number':1257,'multiline':False]['text':' Not a special key, only modifiers, output directly','line_number':1266,'multiline':False]['text':' use name of special key','line_number':1281,'multiline':False]['text':'
 * Try translating a <> name at "(*srcp)[]" to "dst[]".
 * Return the number of characters added to "dst[]", zero for no match.
 * If there is a match, "srcp" is advanced to after the <> name.
 * "dst[]" must be big enough to hold the result (up to six characters)!
 ','line_number':1296,'multiline':True]['text':' FSK_ values','line_number':1306,'multiline':False]['text':' escape K_SPECIAL bytes in the character','line_number':1307,'multiline':False]['text':' FSK_SIMPLIFY and found <C-H> or <A-x>','line_number':1308,'multiline':False]['text':'
 * Put the character sequence for "key" with "modifiers" into "dst" and return
 * the resulting length.
 * When "escape_ks" is TRUE escape K_SPECIAL bytes in the character.
 * The sequence is not NUL terminated.
 * This is how characters in a string are encoded.
 ','line_number':1320,'multiline':True]['text':' Put the appropriate modifier in a string','line_number':1332,'multiline':False]['text':'
 * Try translating a <> name at "(*srcp)[]", return the key and put modifiers
 * in "modp".
 * "srcp" is advanced to after the <> name.
 * returns 0 if there is no match.
 ','line_number':1356,'multiline':True]['text':' FSK_ values','line_number':1366,'multiline':False]['text':' found <C-H> or <A-x>','line_number':1367,'multiline':False]['text':' <*xxx>: do not simplify','line_number':1383,'multiline':False]['text':' Find end of modifier list','line_number':1386,'multiline':False]['text':' Anything accepted, like <C-?>.','line_number':1399,'multiline':False]['text':' <C-"> or <M-"> are not special in strings as " is','line_number':1400,'multiline':False]['text':' the string delimiter. With a backslash it works: <M-\">','line_number':1401,'multiline':False]['text':' skip t_xx, xx may be '-' or '>'','line_number':1410,'multiline':False]['text':' found matching '>'','line_number':1424,'multiline':False]['text':' Which modifiers are given?','line_number':1428,'multiline':False]['text':' Illegal modifier name','line_number':1436,'multiline':False]['text':'
	 * Legal modifier name.
	 ','line_number':1441,'multiline':True]['text':' <Char-123> or <Char-033> or <Char-0x33>','line_number':1449,'multiline':False]['text':' Modifier with single letter, or special key name.','line_number':1463,'multiline':False]['text':'
	     * get_special_key_code() may return NUL for invalid
	     * special key name.
	     ','line_number':1480,'multiline':True]['text':'
		 * Only use a modifier when there is no special key code that
		 * includes the modifier.
		 ','line_number':1486,'multiline':True]['text':' don't want keycode, use single byte code','line_number':1494,'multiline':False]['text':' Using the Kitty key protocol, which uses K_ESC for an','line_number':1505,'multiline':False]['text':' Esc character.  For the simplified keys use the Esc','line_number':1506,'multiline':False]['text':' character and set did_simplify, then in the','line_number':1507,'multiline':False]['text':' non-simplified keys use K_ESC.','line_number':1508,'multiline':False]['text':' Normal Key with modifier: Try to make a single byte code.','line_number':1518,'multiline':False]['text':'
 * Some keys are used with Ctrl without Shift and are still expected to be
 * mapped as if Shift was pressed:
 * CTRL-2 is CTRL-@
 * CTRL-6 is CTRL-^
 * CTRL-- is CTRL-_
 * Also, unless no_reduce_keys is set then <C-H> and <C-h> mean the same thing,
 * use "H".
 * Returns the possibly adjusted key.
 ','line_number':1533,'multiline':True]['text':' may update the no_reduce_keys flag','line_number':1552,'multiline':False]['text':' On a Belgian keyboard AltGr $ is ']', on other keyboards '$' can only be','line_number':1563,'multiline':False]['text':' obtained with Shift.  Assume that '$' without shift implies a Belgian','line_number':1564,'multiline':False]['text':' keyboard, where CTRL-$ means CTRL-].','line_number':1565,'multiline':False]['text':'
 * Some keys already have Shift included, pass them as normal keys.
 * When Ctrl is also used <C-H> and <C-S-H> are different, but <C-S-{> should
 * be <C-{>.  Same for <C-S-}> and <C-S-|>.
 * Also for <A-S-a> and <M-S-a>.
 * This includes all printable ASCII characters except a-z.
 * Digits are included because with AZERTY the Shift key is used to get them.
 ','line_number':1572,'multiline':True]['text':'
 * Try to include modifiers in the key.
 * Changes "Shift-a" to 'A', "Alt-A" to 0xc0, etc.
 * When "simplify" is FALSE don't do Ctrl and Alt.
 * When "simplify" is TRUE and Ctrl or Alt is removed from modifiers set
 * "did_simplify" when it's not NULL.
 ','line_number':1600,'multiline':True]['text':' Command-key really special, no fancynest','line_number':1613,'multiline':False]['text':' With <C-S-a> we keep the shift modifier.','line_number':1619,'multiline':False]['text':' With <S-a>, <A-S-a> and <S-A> we don't keep the shift modifier.','line_number':1620,'multiline':False]['text':' <C-H> and <C-h> mean the same thing, always use "H"','line_number':1627,'multiline':False]['text':' <C-@> is <Nul>','line_number':1636,'multiline':False]['text':' Command-key really special, no fancynest','line_number':1644,'multiline':False]['text':' avoid creating a lead byte','line_number':1648,'multiline':False]['text':' remove the META modifier','line_number':1651,'multiline':False]['text':'
 * Try to find key "c" in the special key table.
 * Return the index when found, -1 when not found.
 ','line_number':1660,'multiline':True]['text':'
 * Find the special key with the given name (the given string does not have to
 * end with NUL, the name is assumed to end before the first non-idchar).
 * If the name starts with "t_" the next two characters are interpreted as a
 * termcap name.
 * Return the key code, or 0 if not found.
 ','line_number':1677,'multiline':True]['text':'
     * If it's <t_xx> we get the code for xx from the termcap
     ','line_number':1691,'multiline':True]['text':'
 * Return the current end-of-line type: EOL_DOS, EOL_UNIX or EOL_MAC.
 ','line_number':1723,'multiline':True]['text':'
 * Like get_fileformat(), but override 'fileformat' with "p" for "++opt=val"
 * argument.
 ','line_number':1738,'multiline':True]['text':' can be NULL!','line_number':1745,'multiline':False]['text':'
 * Set the current end-of-line type to EOL_DOS, EOL_UNIX or EOL_MAC.
 * Sets both 'textmode' and 'fileformat'.
 * Note: Does _not_ set global value of 'textmode'!
 ','line_number':1765,'multiline':True]['text':' OPT_LOCAL and/or OPT_GLOBAL','line_number':1773,'multiline':False]['text':' This may cause the buffer to become (un)modified.','line_number':1796,'multiline':False]['text':' set window title later','line_number':1799,'multiline':False]['text':'
 * Return the default fileformat from 'fileformats'.
 ','line_number':1802,'multiline':True]['text':'
 * Call shell.	Calls mch_call_shell, with 'shellxquote' added.
 ','line_number':1816,'multiline':True]['text':' Don't hide the pointer while executing a shell command.','line_number':1850,'multiline':False]['text':' The external command may update a tags file, clear cached tags.','line_number':1856,'multiline':False]['text':' When 'shellxquote' is ( append ).','line_number':1876,'multiline':False]['text':' When 'shellxquote' is "( append )".','line_number':1877,'multiline':False]['text':'
	 * Check the window size, in case it changed while executing the
	 * external command.
	 ','line_number':1892,'multiline':True]['text':'
 * MODE_VISUAL, MODE_SELECT and MODE_OP_PENDING State are never set, they are
 * equal to MODE_NORMAL State with a condition.  This function returns the real
 * State.
 ','line_number':1910,'multiline':True]['text':'
 * Return TRUE if "p" points to just after a path separator.
 * Takes care of multi-byte characters.
 * "b" must point to the start of the file name
 ','line_number':1932,'multiline':True]['text':'
 * Return TRUE if file names "f1" and "f2" are in the same directory.
 * "f1" may be a short name, "f2" must be a full path.
 ','line_number':1944,'multiline':True]['text':' safety check','line_number':1955,'multiline':False]['text':'
 * Change to a file's directory.
 * Caller must call shorten_fnames()!
 * Return OK or FAIL.
 ','line_number':1970,'multiline':True]['text':' nothing to do','line_number':1988,'multiline':False]['text':'
 * Check if "name" ends in a slash and is not a directory.
 * Used for systems where stat() ignores a trailing slash on a file name.
 * The Vim code assumes a trailing slash is only ignored for a directory.
 ','line_number':2005,'multiline':True]['text':' no file name is not illegal','line_number':2014,'multiline':False]['text':' no trailing slash','line_number':2016,'multiline':False]['text':' trailing slash for a directory','line_number':2018,'multiline':False]['text':'
 * Special implementation of mch_stat() for Solaris.
 ','line_number':2022,'multiline':True]['text':' On Solaris stat() accepts "file/" as if it was "file".  Return -1 if','line_number':2028,'multiline':False]['text':' the name ends in "/" and it's not a directory.','line_number':2029,'multiline':False]['text':'
 * Handling of cursor and mouse pointer shapes in various modes.
 ','line_number':2036,'multiline':True]['text':' The values will be filled in from the 'guicursor' and 'mouseshape'','line_number':2042,'multiline':False]['text':' defaults when Vim starts.','line_number':2043,'multiline':False]['text':' Adjust the SHAPE_IDX_ defines when making changes!','line_number':2044,'multiline':False]['text':'
 * Table with names for mouse shapes.  Keep in sync with all the tables for
 * mch_set_mouse_shape()!.
 ','line_number':2065,'multiline':True]['text':' default, must be the first one','line_number':2071,'multiline':False]['text':' hidden','line_number':2072,'multiline':False]['text':'
 * Parse the 'guicursor' option ("what" is SHAPE_CURSOR) or 'mouseshape'
 * ("what" is SHAPE_MOUSE).
 * Returns error message for an illegal option, NULL otherwise.
 ','line_number':2093,'multiline':True]['text':' init for GCC','line_number':2106,'multiline':False]['text':' found "ve" flag','line_number':2111,'multiline':False]['text':'
     * First round: check for errors; second round: do it for real.
     ','line_number':2114,'multiline':True]['text':'
	 * Repeat for all comma separated parts.
	 ','line_number':2119,'multiline':True]['text':'
	     * Repeat for all mode's before the colon.
	     * For the 'a' mode, we loop to handle all the modes.
	     ','line_number':2138,'multiline':True]['text':' Find the mode.','line_number':2147,'multiline':False]['text':' Set the default, for the missing parts','line_number':2176,'multiline':False]['text':' Set the defaults, for the missing parts','line_number':2182,'multiline':False]['text':' Parse the part after the colon','line_number':2190,'multiline':False]['text':' if (what == SHAPE_MOUSE)','line_number':2219,'multiline':False]['text':'
			 * First handle the ones with a number argument.
			 ','line_number':2222,'multiline':True]['text':' "ver" or "hor"','line_number':2243,'multiline':False]['text':' must be a highlight group name then','line_number':2272,'multiline':False]['text':' last part','line_number':2275,'multiline':False]['text':' find end of part','line_number':2278,'multiline':False]['text':' "group/langmap_group"','line_number':2285,'multiline':False]['text':' if (what != SHAPE_MOUSE)','line_number':2299,'multiline':False]['text':' If the 's' flag is not given, use the 'v' cursor for 's'','line_number':2311,'multiline':False]['text':'
 * Return the index into shape_table[] for the current mode.
 * When "mouse" is TRUE, consider indexes valid for the mouse pointer.
 ','line_number':2341,'multiline':True]['text':'
 * Set the mouse shape:
 * If "shape" is -1, use shape depending on the current mode,
 * depending on the current state.
 * If "shape" is -2, only update the shape when it's CLINE or STATUS (used
 * when the mouse moves off the status or command line).
 ','line_number':2396,'multiline':True]['text':' Only works in GUI mode.','line_number':2408,'multiline':False]['text':' Postpone the updating when more is to come.  Speeds up executing of','line_number':2412,'multiline':False]['text':' mappings.','line_number':2413,'multiline':False]['text':' When ignoring the mouse don't change shape on the statusline.','line_number':2420,'multiline':False]['text':' CURSOR_SHAPE','line_number':2445,'multiline':False]['text':'
 * Mainly for tests: get the name of the current mouse shape.
 ','line_number':2448,'multiline':True]['text':'
 * Change directory to "new_dir".  Search 'cdpath' for relative directory
 * names.
 ','line_number':2467,'multiline':True]['text':'
 * Get user name from machine-specific function.
 * Returns the user name in "buf[len]".
 * Some systems are quite slow in obtaining the user name (Windows NT), thus
 * cache the result.
 * Returns OK or FAIL.
 ','line_number':2490,'multiline':True]['text':'
 * Free the memory allocated by get_user_name()
 ','line_number':2512,'multiline':True]['text':'
 * Our own qsort(), for systems that don't have it.
 * It's simple and slow.  From the K&R C book.
 ','line_number':2523,'multiline':True]['text':' Compare the elements.','line_number':2548,'multiline':False]['text':' Exchange the elements.','line_number':2553,'multiline':False]['text':'
 * The putenv() implementation below comes from the "screen" program.
 * Included with permission from Juergen Weigert.
 * See pty.c for the copyright notice.
 ','line_number':2563,'multiline':True]['text':'
 *  putenv  --	put value into environment
 *
 *  Usage:  i = putenv (string)
 *    int i;
 *    char  *string;
 *
 *  where string is of the form <name>=<value>.
 *  Putenv returns 0 normally, -1 on error (not enough core for malloc).
 *
 *  Putenv may need to add a new name into the environment, or to
 *  associate a value longer than the current value with a particular
 *  name.  So, to make life simpler, putenv() copies your entire
 *  environment into the heap (i.e. malloc()) from the stack
 *  (i.e. where it resides when your process is initiated) the first
 *  time you call it.
 *
 *  (history removed, not very interesting.  See the "screen" sources.)
 ','line_number':2569,'multiline':True]['text':' increment to add to env. size','line_number':2591,'multiline':False]['text':' current size of environment','line_number':2593,'multiline':False]['text':' the global which is your env.','line_number':2594,'multiline':False]['text':' look for a name in the env.','line_number':2596,'multiline':False]['text':' copy env. from stack to heap','line_number':2597,'multiline':False]['text':' incr. size of env.','line_number':2598,'multiline':False]['text':' first time putenv called','line_number':2607,'multiline':False]['text':' copy env. to heap','line_number':2608,'multiline':False]['text':' look for name in environment','line_number':2612,'multiline':False]['text':' name must be added','line_number':2615,'multiline':False]['text':' need new slot','line_number':2618,'multiline':False]['text':' not enough core','line_number':2623,'multiline':False]['text':' new end of env.','line_number':2625,'multiline':False]['text':' name already in env.','line_number':2628,'multiline':False]['text':' copy into env.','line_number':2633,'multiline':False]['text':'
 * Used for mch_getenv() for Mac.
 ','line_number':2705,'multiline':True]['text':' !defined(HAVE_SETENV) && !defined(HAVE_PUTENV)','line_number':2727,'multiline':False]['text':'
 * Return 0 for not writable, 1 for writable file, 2 for a dir which we have
 * rights to write into.
 ','line_number':2730,'multiline':True]['text':'
 * Read 2 bytes from "fd" and turn them into an int, MSB first.
 * Returns -1 when encountering EOF.
 ','line_number':2765,'multiline':True]['text':'
 * Read 3 bytes from "fd" and turn them into an int, MSB first.
 * Returns -1 when encountering EOF.
 ','line_number':2781,'multiline':True]['text':'
 * Read 4 bytes from "fd" and turn them into an int, MSB first.
 * Returns -1 when encountering EOF.
 ','line_number':2800,'multiline':True]['text':' Use unsigned rather than int otherwise result is undefined','line_number':2808,'multiline':False]['text':' when left-shift sets the MSB.','line_number':2809,'multiline':False]['text':'
 * Read a string of length "cnt" from "fd" into allocated memory.
 * Returns NULL when out of memory or unable to read that many bytes.
 ','line_number':2827,'multiline':True]['text':' allocate memory','line_number':2838,'multiline':False]['text':' Read the string.  Quit when running into the EOF.','line_number':2843,'multiline':False]['text':'
 * Write a number to file "fd", MSB first, in "len" bytes.
 ','line_number':2858,'multiline':True]['text':' proto is defined in vim.h','line_number':2874,'multiline':False]['text':'
 * Return time in msec since "start_tv".
 ','line_number':2876,'multiline':True]['text':'
 * Return time in msec since "start_tick".
 ','line_number':2891,'multiline':True]['text':'
 * Parse "cmd" and put the white-separated parts in "argv".
 * "argv" is an allocated array with "argc" entries and room for 4 more.
 * Returns FAIL when out of memory.
 ','line_number':2908,'multiline':True]['text':'
     * Do this loop twice:
     * 1: find number of arguments
     * 2: separate them and build argv[]
     ','line_number':2920,'multiline':True]['text':' quotes surrounding an argument and are dropped','line_number':2939,'multiline':False]['text':' First pass: skip over "\ " and "\"".','line_number':2945,'multiline':False]['text':' Second pass: Remove the backslash.','line_number':2946,'multiline':False]['text':' Account for possible multiple args in p_shcf.','line_number':2968,'multiline':False]['text':' out of memory','line_number':2981,'multiline':False]['text':'
 * Build "argv[argc]" from the string "cmd".
 * "argv[argc]" is set to NULL;
 * Return FAIL when out of memory.
 ','line_number':2988,'multiline':True]['text':' Make a copy, parsing will modify "cmd".','line_number':2999,'multiline':False]['text':'
 * Build "argv[argc]" from the list "l".
 * "argv[argc]" is set to NULL;
 * Return FAIL when out of memory.
 ','line_number':3015,'multiline':True]['text':' Pass argv[] to mch_call_shell().','line_number':3026,'multiline':False]['text':'
 * Change the behavior of vterm.
 * 0: As usual.
 * 1: Windows 10 version 1809
 *      The bug causes unstable handling of ambiguous width character.
 * 2: Windows 10 version 1903 & 1909
 *      Use the wrong result because each result is different.
 * 3: Windows 10 insider preview (current latest logic)
 ','line_number':3052,'multiline':True]