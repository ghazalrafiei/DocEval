['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * CSCOPE support for Vim added by Andy Kahn <kahn@zk3.dec.com>
 * Ported to Win32 by Sergey Khorev <sergey.khorev@gmail.com>
 *
 * The basic idea/structure of cscope for Vim was borrowed from Nvi.  There
 * might be a few lines of code that look similar to what Nvi has.
 *
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * See ":help cscope-find" for the possible queries.
 ','line_number':35,'multiline':True]['text':' if supports splitting window','line_number':44,'multiline':False]['text':' cscope db name','line_number':48,'multiline':False]['text':' path to prepend (the -P option)','line_number':49,'multiline':False]['text':' additional cscope flags/options (e.g, -p2)','line_number':50,'multiline':False]['text':' PID of the connected cscope process.','line_number':52,'multiline':False]['text':' ID of dev containing cscope db','line_number':53,'multiline':False]['text':' inode number of cscope db','line_number':54,'multiline':False]['text':' PID of the connected cscope process.','line_number':57,'multiline':False]['text':' cscope process handle','line_number':58,'multiline':False]['text':' Volume serial number, instead of st_dev','line_number':59,'multiline':False]['text':' st_ino has no meaning in the Windows','line_number':60,'multiline':False]['text':' from cscope: FILE.','line_number':65,'multiline':False]['text':' to cscope: FILE.','line_number':66,'multiline':False]['text':' number of items allocated in','line_number':109,'multiline':False]['text':' csinfo[]','line_number':110,'multiline':False]['text':' length of eap->arg, set in','line_number':112,'multiline':False]['text':' cs_lookup_cmd()','line_number':113,'multiline':False]['text':' expand ":cscope" sub-commands','line_number':139,'multiline':False]['text':' expand ":scscope" sub-commands','line_number':140,'multiline':False]['text':' expand ":cscope find" arguments','line_number':141,'multiline':False]['text':' expand ":cscope kill" arguments','line_number':142,'multiline':False]['text':'
 * Function given to ExpandGeneric() to obtain the cscope command
 * expansion.
 ','line_number':145,'multiline':True]['text':' Complete with sub-commands of ":cscope":','line_number':158,'multiline':False]['text':' add, find, help, kill, reset, show','line_number':159,'multiline':False]['text':' Complete with sub-commands of ":scscope": same sub-commands as','line_number':162,'multiline':False]['text':' ":cscope" but skip commands which don't support split windows','line_number':163,'multiline':False]['text':' Complete with query type of ":cscope find {query_type}".','line_number':176,'multiline':False]['text':' {query_type} can be letters (c, d, ... a) or numbers (0, 1,','line_number':177,'multiline':False]['text':' ..., 9) but only complete with letters, since numbers are','line_number':178,'multiline':False]['text':' redundant.','line_number':179,'multiline':False]['text':' ":cscope kill" accepts connection numbers or partial names of','line_number':186,'multiline':False]['text':' the pathname of the cscope database as argument.  Only complete','line_number':187,'multiline':False]['text':' with connection numbers. -1 can also be used to kill all','line_number':188,'multiline':False]['text':' connections.','line_number':189,'multiline':False]['text':'
 * Handle command line completion for :cscope command.
 ','line_number':207,'multiline':True]['text':' Default: expand subcommands','line_number':218,'multiline':False]['text':' (part of) subcommand already typed','line_number':227,'multiline':False]['text':' past first word','line_number':232,'multiline':False]['text':'
 * Find the command, print help if invalid, and then call the corresponding
 * command function.
 ','line_number':246,'multiline':True]['text':' whether to split window','line_number':253,'multiline':False]['text':'
 * Implementation of ":cscope" and ":lcscope"
 ','line_number':281,'multiline':True]['text':'
 * Implementation of ":scscope". Same as ex_cscope(), but splits window, too.
 ','line_number':290,'multiline':True]['text':'
 * Implementation of ":cstag"
 ','line_number':299,'multiline':True]['text':'
 * This simulates a vim_fgets(), but for cscope, returns the next line
 * from the cscope output.  should only be called from find_tags()
 *
 * returns TRUE if eof, FALSE otherwise
 ','line_number':376,'multiline':True]['text':'
 * Called only from do_tag(), when popping the tag stack.
 ','line_number':395,'multiline':True]['text':'
 * Called from do_tag().
 ','line_number':405,'multiline':True]['text':'
 * "cscope_connection([{num} , {dbpath} [, {prepend}]])" function
 *
 *		Checks for the existence of a |cscope| connection.  If no
 *		parameters are specified, then the function returns:
 *
 *		0, if cscope was not available (not compiled in), or if there
 *		are no cscope connections; or
 *		1, if there is at least one cscope connection.
 *
 *		If parameters are specified, then the value of {num}
 *		determines how existence of a cscope connection is checked:
 *
 *		{num}	Description of existence check
 *		-----	------------------------------
 *		0	Same as no parameters (e.g., "cscope_connection()").
 *		1	Ignore {prepend}, and use partial string matches for
 *			{dbpath}.
 *		2	Ignore {prepend}, and use exact string matches for
 *			{dbpath}.
 *		3	Use {prepend}, use partial string matches for both
 *			{dbpath} and {prepend}.
 *		4	Use {prepend}, use exact string matches for both
 *			{dbpath} and {prepend}.
 *
 *		Note: All string comparisons are case sensitive!
 ','line_number':415,'multiline':True]['text':'
 * PRIVATE functions
 ***************************************************************************','line_number':494,'multiline':True]['text':'
 * Add cscope database or a directory name (to look for cscope.out)
 * to the cscope connection list.
 ','line_number':498,'multiline':True]['text':'
 * The common routine to add a new cscope connection.  Called by
 * cs_add() and cs_reset().  I really don't like to do this, but this
 * routine uses a number of goto statements.
 ','line_number':526,'multiline':True]['text':' filename - may contain environment variables','line_number':533,'multiline':False]['text':' prepend path - may contain environment variables','line_number':534,'multiline':False]['text':' get the filename (arg1), expand it, and try to stat it','line_number':547,'multiline':False]['text':' get the prepend path (arg2), expand it, and try to stat it','line_number':570,'multiline':False]['text':' if filename is a directory, append the cscope database name to it','line_number':584,'multiline':False]['text':'
 * Count the number of cscope connections.
 ','line_number':673,'multiline':True]['text':' connection index','line_number':690,'multiline':False]['text':'
 * Count the number of matches for a given cscope connection.
 ','line_number':696,'multiline':True]['text':'
	 * If the database is out of date, or there's some other problem,
	 * cscope will output error messages before the number-of-lines output.
	 * Display/discard any output that doesn't match what we want.
	 * Accept "\S*cscope: X lines", also matches "mlcscope".
	 * Bail out for the "Unable to search" error.
	 ','line_number':722,'multiline':True]['text':'
 * Creates the actual cscope command query from what the user entered.
 ','line_number':758,'multiline':True]['text':' Skip white space before the pattern, except for text and pattern search,','line_number':803,'multiline':False]['text':' they may want to use the leading white space.','line_number':804,'multiline':False]['text':'
 * This piece of code was taken/adapted from nvi.  do we need to add
 * the BSD license notice?
 ','line_number':819,'multiline':True]['text':'
     * Cscope reads from to_cs[0] and writes to from_cs[1]; vi reads from
     * from_cs[0] and writes to to_cs[1].
     ','line_number':844,'multiline':True]['text':' child: run cscope.','line_number':869,'multiline':False]['text':' close unused','line_number':881,'multiline':False]['text':' MSWIN','line_number':885,'multiline':False]['text':' Create pipes to communicate with cscope','line_number':886,'multiline':False]['text':' expand the cscope exec for env var's','line_number':909,'multiline':False]['text':' MSWIN','line_number':915,'multiline':False]['text':' alloc space to hold the cscope command','line_number':921,'multiline':False]['text':' expand the prepend path for env var's','line_number':925,'multiline':False]['text':' MSWIN','line_number':932,'multiline':False]['text':' MSWIN','line_number':951,'multiline':False]['text':' run the cscope command','line_number':956,'multiline':False]['text':' terminate the -c command argument','line_number':974,'multiline':False]['text':' on Win32 we still need prog','line_number':977,'multiline':False]['text':' Change our process group to avoid cscope receiving SIGWINCH.','line_number':984,'multiline':False]['text':' NOTREACHED','line_number':999,'multiline':False]['text':' parent.','line_number':1001,'multiline':False]['text':'
	 * Save the file descriptors for later duplication, and
	 * reopen as streams.
	 ','line_number':1003,'multiline':True]['text':' close unused','line_number':1012,'multiline':False]['text':' MSWIN','line_number':1017,'multiline':False]['text':' Create a new process to run cscope and use pipes to talk with it','line_number':1018,'multiline':False]['text':' Hide child application window','line_number':1021,'multiline':False]['text':' else','line_number':1036,'multiline':False]['text':' TODO - tidy up after failure to create files on pipe handles.','line_number':1041,'multiline':False]['text':' Close handles for file descriptors inherited by the cscope process','line_number':1051,'multiline':False]['text':' !UNIX','line_number':1055,'multiline':False]['text':'
 * Query cscope using command line interface.  Parse the output and use tselect
 * to allow choices.  Like Nvi, creates a pipe to send to/from query/cscope.
 *
 * returns TRUE if we jump to a tag or abort, FALSE if not.
 ','line_number':1061,'multiline':True]['text':'
     * Let's replace the NULs written by strtok() with spaces - we need the
     * spaces to correctly display the quickfix/location list window's title.
     ','line_number':1092,'multiline':True]['text':'
 * Common code for cscope find, shared by cs_find() and ex_cstag().
 ','line_number':1105,'multiline':True]['text':' get cmd letter','line_number':1125,'multiline':False]['text':' next symbol must be + or -','line_number':1163,'multiline':False]['text':' create the actual command to send to cscope','line_number':1183,'multiline':False]['text':' Send query to all open connections, then count the total number','line_number':1195,'multiline':False]['text':' of matches so we can alloc all in one swell foop.','line_number':1196,'multiline':False]['text':' send cmd to cscope','line_number':1205,'multiline':False]['text':' fill error list','line_number':1231,'multiline':False]['text':' Use location list','line_number':1244,'multiline':False]['text':' '-' starts a new error list','line_number':1246,'multiline':False]['text':'
		     * In the location list window, use the displayed location
		     * list. Otherwise, use the location list for the window.
		     ','line_number':1261,'multiline':True]['text':' FEAT_QUICKFIX','line_number':1276,'multiline':False]['text':' read output','line_number':1281,'multiline':False]['text':'
 * Print help.
 ','line_number':1295,'multiline':True]['text':' Use %*s rather than %30s to ensure proper alignment in utf-8','line_number':1309,'multiline':False]['text':'
 * Insert a new cscope database filename into the filelist.
 ','line_number':1358,'multiline':True]['text':' enc_to_utf16() failed','line_number':1375,'multiline':False]['text':' CreateFile() failed','line_number':1376,'multiline':False]['text':' subst filename if can't get error text','line_number':1385,'multiline':False]['text':' GetFileInformationByHandle() failed','line_number':1390,'multiline':False]['text':' can be set to the index of an empty item in csinfo','line_number':1397,'multiline':False]['text':' compare pathnames first','line_number':1404,'multiline':False]['text':' test index file attributes too','line_number':1407,'multiline':False]['text':' remember first empty entry','line_number':1420,'multiline':False]['text':' First time allocation: allocate only 1 connection. It should','line_number':1428,'multiline':False]['text':' be enough for most users.  If more is needed, csinfo will be','line_number':1429,'multiline':False]['text':' reallocated.','line_number':1430,'multiline':False]['text':' Reallocate space for more connections.','line_number':1438,'multiline':False]['text':'
 * Find cscope command in command table.
 ','line_number':1496,'multiline':True]['text':' Store length of eap->arg before it gets modified by strtok().','line_number':1509,'multiline':False]['text':'
 * Nuke em.
 ','line_number':1525,'multiline':True]['text':' only single digit positive and negative integers are allowed','line_number':1540,'multiline':False]['text':' It must be part of a name.  We will try to find a match','line_number':1547,'multiline':False]['text':' within all the names in the csinfo data structure','line_number':1548,'multiline':False]['text':'
 * Actually kills a specific cscope connection.
 ','line_number':1579,'multiline':True]['text':' cscope table index','line_number':1584,'multiline':False]['text':' cscope database name','line_number':1585,'multiline':False]['text':'
 * Convert the cscope output into a ctags style entry (as might be found
 * in a ctags tags file).  there's one catch though: cscope doesn't tell you
 * the type of the tag you are looking for.  for example, in Darren Hiebert's
 * ctags (the one that comes with vim), #define's use a line number to find the
 * tag in a file while function definitions use a regexp search pattern.
 *
 * I'm going to always use the line number because cscope does something
 * quirky (and probably other things i don't know about):
 *
 *     if you have "#  define" in your source file, which is
 *     perfectly legal, cscope thinks you have "#define".  this
 *     will result in a failed regexp search. :(
 *
 * Besides, even if this particular case didn't happen, the search pattern
 * would still have to be modified to escape all the special regular expression
 * characters to comply with ctags formatting.
 ','line_number':1597,'multiline':True]['text':' vim style is ctags:','line_number':1622,'multiline':False]['text':'','line_number':1623,'multiline':False]['text':'	    <tagstr>\t<filename>\t<linenum_or_search>"\t<extra>','line_number':1624,'multiline':False]['text':'','line_number':1625,'multiline':False]['text':' but as mentioned above, we'll always use the line number and','line_number':1626,'multiline':False]['text':' put the search pattern (if one exists) as "extra"','line_number':1627,'multiline':False]['text':'','line_number':1628,'multiline':False]['text':' buf is used as part of vim's method of handling tags, and','line_number':1629,'multiline':False]['text':' (i think) vim frees it when you pop your tags and get replaced','line_number':1630,'multiline':False]['text':' by new ones on the tag stack.','line_number':1631,'multiline':False]['text':'
 * This is kind of hokey, but i don't see an easy way round this.
 *
 * Store: keep a ptr to the (malloc'd) memory of matches originally
 * generated from cs_find().  the matches are originally lines directly
 * from cscope output, but transformed to look like something out of a
 * ctags.  see cs_make_vim_style_matches for more details.
 *
 * Get: used only from cs_fgets(), this simulates a vim_fgets() to return
 * the next line from the cscope output.  it basically keeps track of which
 * lines have been "used" and returns the next one.
 *
 * Free: frees up everything and resets
 *
 * Print: prints the tags
 ','line_number':1656,'multiline':True]['text':' should not reach here','line_number':1725,'multiline':False]['text':'
 * Parse cscope output.
 ','line_number':1734,'multiline':True]['text':' If the line's too long for the buffer, discard it.','line_number':1760,'multiline':False]['text':'
     * cscope output is in the following format:
     *
     *	<filename> <context> <line number> <pattern>
     ','line_number':1769,'multiline':True]['text':' +1 to skip \0','line_number':1780,'multiline':False]['text':' --- nvi ---','line_number':1782,'multiline':False]['text':' If the file is older than the cscope database, that is,','line_number':1783,'multiline':False]['text':' the database was built since the file was last modified,','line_number':1784,'multiline':False]['text':' or there wasn't a search string, use the line number.','line_number':1785,'multiline':False]['text':'
 * Write cscope find results to file.
 ','line_number':1794,'multiline':True]['text':' for all matches','line_number':1841,'multiline':False]['text':' for all cscope connections','line_number':1845,'multiline':False]['text':'
 * Get parsed cscope output and calls cs_make_vim_style_matches to convert
 * into ctags format.
 * When there are no matches sets "*matches_p" to NULL.
 ','line_number':1850,'multiline':True]['text':' note: if vim_strsave returns NULL, then the context','line_number':1903,'multiline':False]['text':' will be "<global>", which is misleading.','line_number':1904,'multiline':False]['text':' for all matches','line_number':1910,'multiline':False]['text':' for all cscope connections','line_number':1914,'multiline':False]['text':' No matches, free the arrays and return NULL in "*matches_p".','line_number':1919,'multiline':False]['text':'
 * get the requested path components
 ','line_number':1931,'multiline':True]['text':'
 * Called from cs_manage_matches().
 ','line_number':1960,'multiline':True]['text':' Track available bufsize','line_number':1968,'multiline':False]['text':' strlen is 7','line_number':2003,'multiline':False]['text':' if we really wanted to, we could avoid this malloc and strcpy','line_number':2012,'multiline':False]['text':' by parsing matches[i] on the fly and placing stuff into buf','line_number':2013,'multiline':False]['text':' directly, but that's too much of a hassle','line_number':2014,'multiline':False]['text':' ignore ;" at the end','line_number':2028,'multiline':False]['text':' hopefully 'num' (num of matches) will be less than 10^16','line_number':2030,'multiline':False]['text':' csfmt_str = "%4d %6s  ";','line_number':2046,'multiline':False]['text':' compute the required space for the context','line_number':2053,'multiline':False]['text':' print the context only if it fits on the same line','line_number':2076,'multiline':False]['text':' only after printing extra due to strtok use','line_number':2089,'multiline':False]['text':' don't print any more matches','line_number':2097,'multiline':False]['text':' for all matches','line_number':2102,'multiline':False]['text':'
 * Read a cscope prompt (basically, skip over the ">> ").
 ','line_number':2108,'multiline':True]['text':' buffer for possible error message from cscope','line_number':2115,'multiline':False]['text':' compute maximum allowed len for Cscope error message','line_number':2122,'multiline':False]['text':' if there is room and char is printable','line_number':2129,'multiline':False]['text':' lazy buffer allocation','line_number':2132,'multiline':False]['text':' append character to the message','line_number':2136,'multiline':False]['text':' remove eprompt from buf','line_number':2142,'multiline':False]['text':' print message to user','line_number':2145,'multiline':False]['text':' send RETURN to cscope','line_number':2148,'multiline':False]['text':' clear buf','line_number':2152,'multiline':False]['text':' don't have additional information','line_number':2168,'multiline':False]['text':' didn't find the prompt','line_number':2182,'multiline':False]['text':' did find the prompt','line_number':2183,'multiline':False]['text':'
 * Used to catch and ignore SIGALRM below.
 ','line_number':2191,'multiline':True]['text':' do nothing','line_number':2197,'multiline':False]['text':'
 * Does the actual free'ing for the cs ptr with an optional flag of whether
 * or not to free the filename.  Called by cs_kill and cs_reset.
 ','line_number':2201,'multiline':True]['text':'
     * Trying to exit normally (not sure whether it is fit to UNIX cscope
     ','line_number':2208,'multiline':True]['text':' Use sigaction() to limit the waiting time to two seconds.','line_number':2225,'multiline':False]['text':' 2 sec timeout','line_number':2234,'multiline':False]['text':' Block until cscope exits or until timer expires','line_number':2236,'multiline':False]['text':' cancel pending alarm if still there and restore signal','line_number':2240,'multiline':False]['text':' Can't use sigaction(), loop for two seconds.  First yield the CPU','line_number':2246,'multiline':False]['text':' to give cscope a chance to exit quickly.','line_number':2247,'multiline':False]['text':' break unless the process is still running','line_number':2254,'multiline':False]['text':' sleep 50 ms','line_number':2255,'multiline':False]['text':'
	 * If the cscope process is still running: kill it.
	 * Safety check: If the PID would be zero here, the entire X session
	 * would be killed.  -1 and 1 are dangerous as well.
	 ','line_number':2258,'multiline':True]['text':'
		 * When using 'vim -g', vim is forked and cscope process is
		 * no longer a child process but a sibling.  So waitpid()
		 * fails with errno being ECHILD (No child processes).
		 * Don't send SIGKILL to cscope immediately but wait
		 * (polling) for it to exit normally as result of sending
		 * the "q" command, hence giving it a chance to clean up
		 * its temporary files.
		 ','line_number':2270,'multiline':True]['text':' Check whether cscope process is still alive','line_number':2284,'multiline':False]['text':' cscope process no longer exists','line_number':2287,'multiline':False]['text':' sleep 50 ms','line_number':2290,'multiline':False]['text':' !UNIX','line_number':2301,'multiline':False]['text':' Give cscope a chance to exit normally','line_number':2304,'multiline':False]['text':'
 * Calls cs_kill on all cscope connections then reinits.
 ','line_number':2327,'multiline':True]['text':' for sprintf " (#%d)"','line_number':2335,'multiline':False]['text':' malloc our db and ppath list','line_number':2340,'multiline':False]['text':' rebuild the cscope connection list','line_number':2361,'multiline':False]['text':' don't use smsg_attr() because we want to display the','line_number':2369,'multiline':False]['text':' connection number in the same line as','line_number':2370,'multiline':False]['text':' "Added cscope database..."','line_number':2371,'multiline':False]['text':'
 * Construct the full pathname to a file found in the cscope database.
 * (Prepends ppath, if there is one and if it's not already prepended,
 * otherwise just uses the name found.)
 *
 * We need to prepend the prefix because on some cscope's (e.g., the one that
 * ships with Solaris 2.6), the output never has the prefix prepended.
 * Contrast this with my development system (Digital Unix), which does.
 ','line_number':2390,'multiline':True]['text':'
     * Ppath is freed when we destroy the cscope connection.
     * Fullname is freed after cs_make_vim_style_matches, after it's been
     * copied into the tag buffer used by Vim.
     ','line_number':2406,'multiline':True]['text':' If 'cscoperelative' is set and ppath is not set, use cscope.out','line_number':2416,'multiline':False]['text':' path in path resolution.','line_number':2417,'multiline':False]['text':' Note/example: this won't work if the cscope output already starts','line_number':2428,'multiline':False]['text':' "../.." and the prefix path is also "../..".  if something like this','line_number':2429,'multiline':False]['text':' happens, you are screwed up and need to fix how you're using cscope.','line_number':2430,'multiline':False]['text':' Check for csdir to be non empty to avoid empty path concatenated to','line_number':2444,'multiline':False]['text':' cscope output.','line_number':2445,'multiline':False]['text':'
 * Show all cscope connections.
 ','line_number':2458,'multiline':True]['text':'
 * Only called when VIM exits to quit any cscope sessions.
 ','line_number':2492,'multiline':True]['text':' FEAT_CSCOPE','line_number':2506,'multiline':False]['text':'
 * "cscope_connection([{num} , {dbpath} [, {prepend}]])" function
 *
 * Checks the existence of a cscope connection.
 ','line_number':2510,'multiline':True]['text':' FEAT_EVAL','line_number':2545,'multiline':False]