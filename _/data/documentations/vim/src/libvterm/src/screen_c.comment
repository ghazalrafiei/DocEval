['text':' vim: set sw=2 :','line_number':3,'multiline':False]['text':' State of the pen at some moment in time, also used in a cell ','line_number':15,'multiline':True]['text':' After the bitfield ','line_number':18,'multiline':True]['text':' 0 to 9 ','line_number':28,'multiline':True]['text':' Extra state storage that isn't strictly pen-related ','line_number':32,'multiline':True]['text':' on a DECDWL or DECDHL line ','line_number':34,'multiline':True]['text':' on a DECDHL line (1=top 2=bottom) ','line_number':35,'multiline':True]['text':' Internal representation of a screen cell ','line_number':38,'multiline':True]['text':' start_row == -1 => no damage ','line_number':54,'multiline':True]['text':' Primary and Altscreen. buffers[1] is lazily allocated as needed ','line_number':65,'multiline':True]['text':' buffer will == buffers[0] or buffers[1], depending on altscreen ','line_number':68,'multiline':True]['text':' buffer for a single screen row used in scrollback storage callbacks ','line_number':71,'multiline':True]['text':' Always emit damage event ','line_number':113,'multiline':True]['text':' Emit damage longer than one row. Try to merge with existing damage in
     * the same row ','line_number':118,'multiline':True]['text':' Bigger than 1 line - flush existing, emit this','line_number':121,'multiline':False]['text':' None stored yet','line_number':126,'multiline':False]['text':' Merge with the stored line','line_number':131,'multiline':False]['text':' Emit the currently stored line, store a new one','line_number':139,'multiline':False]['text':' Never emit damage event ','line_number':147,'multiline':True]['text':' starts top-left corner','line_number':227,'multiline':False]['text':' full width','line_number':228,'multiline':False]['text':' not altscreen','line_number':229,'multiline':False]['text':' Avoid an infinite loop','line_number':263,'multiline':False]['text':' Only copy .fg and .bg; leave things like rv in reset state ','line_number':296,'multiline':True]['text':' Scroll region entirely contains the damage; just move it ','line_number':370,'multiline':True]['text':' There are a number of possible cases here, but lets restrict this to only
   * the common case where we might actually gain some performance by
   * optimising it. Namely, a vertical scroll that neatly cuts the damage
   * region in half.
   ','line_number':374,'multiline':True]['text':' only send a damage event on disable; because during enable there's an
     * erase that sends a damage anyway
     ','line_number':476,'multiline':True]['text':' ignore ','line_number':487,'multiline':True]['text':' How many cells are non-blank
 * Returns the position of the first blank cell in the trailing blank end ','line_number':506,'multiline':True]['text':' Find the final row of old buffer content','line_number':529,'multiline':False]['text':' Keep track of the final row that is knonw to be blank, so we know what
   * spare space we have for scrolling into
   ','line_number':541,'multiline':True]['text':' TODO: Stop if dwl or dhl ','line_number':548,'multiline':True]['text':' we'd fall off the top ','line_number':576,'multiline':True]['text':' we actually have spare rows ','line_number':577,'multiline':True]['text':' Attempt to scroll content down into the blank rows at the bottom to
       * make it fit
       ','line_number':580,'multiline':True]['text':' TODO: This could surely be done a lot faster by memcpy()'ing the entire range ','line_number':627,'multiline':True]['text':' cursor would have moved entirely off the top of the screen; lets just
     * bring it within range ','line_number':667,'multiline':True]['text':' We really expect the cursor position to be set by now ','line_number':674,'multiline':True]['text':' Unfortunately we do get here when "new_rows" is one.  We don't want
   * to crash, so until the above code is fixed let's just set the cursor. ','line_number':675,'multiline':True]['text':' fprintf(stderr, "screen_resize failed to update cursor position\n");
     * abort(); ','line_number':678,'multiline':True]['text':' Push spare lines to scrollback buffer ','line_number':687,'multiline':True]['text':' Try to backfill rows by popping scrollback buffer ','line_number':696,'multiline':True]['text':' Scroll new rows back up to the top and fill in blanks at the bottom ','line_number':739,'multiline':True]['text':' Ensure that ->sb_buffer is large enough for a new or and old row ','line_number':775,'multiline':True]['text':' We don't need a full resize of the altscreen because it isn't enabled
     * but we should at least keep the lineinfo the right size ','line_number':792,'multiline':True]['text':' TODO: Maaaaybe we can optimise this if there's no reflow happening ','line_number':815,'multiline':True]['text':' putglyph','line_number':871,'multiline':False]['text':' movecursor','line_number':872,'multiline':False]['text':' scrollrect','line_number':873,'multiline':False]['text':' moverect','line_number':874,'multiline':False]['text':' erase','line_number':875,'multiline':False]['text':' initpen','line_number':876,'multiline':False]['text':' setpenattr','line_number':877,'multiline':False]['text':' settermprop','line_number':878,'multiline':False]['text':' bell','line_number':879,'multiline':False]['text':' resize','line_number':880,'multiline':False]['text':' setlineinfo','line_number':881,'multiline':False]['text':'sb_clear','line_number':882,'multiline':False]['text':'
 * Allocate a new screen and return it.
 * Return NULL when out of memory.
 ','line_number':885,'multiline':True]['text':' Erased cell, might need a space','line_number':984,'multiline':False]['text':' Gap behind a double-width char, do nothing','line_number':987,'multiline':False]['text':' Copy internal to external representation of a screen cell ','line_number':1019,'multiline':True]['text':' Get correct cell width from cell information contained in line buffer','line_number':1051,'multiline':False]['text':' This cell is EOL if this and every cell to the right is black ','line_number':1078,'multiline':True]['text':' Removed, causes a compiler warning and isn't used','line_number':1102,'multiline':False]['text':' #undef vterm_screen_set_reflow','line_number':1103,'multiline':False]['text':' void vterm_screen_set_reflow(VTermScreen *screen, int reflow)','line_number':1104,'multiline':False]['text':' {','line_number':1105,'multiline':False]['text':'   vterm_screen_enable_reflow(screen, reflow);','line_number':1106,'multiline':False]['text':' }','line_number':1107,'multiline':False]['text':' TODO: bounds check','line_number':1197,'multiline':False]