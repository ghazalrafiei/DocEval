['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * vim9expr.c: Dealing with compiled function expressions
 ','line_number':10,'multiline':True]['text':' When not generating protos this is included in proto.h','line_number':19,'multiline':False]['text':' flag passed from compile_subscript() to compile_load_scriptvar()','line_number':24,'multiline':False]['text':'
 * Generate code for any ppconst entries.
 ','line_number':27,'multiline':True]['text':'
 * Check that the last item of "ppconst" is a bool, if there is an item.
 ','line_number':46,'multiline':True]['text':'
 * Clear ppconst constants.  Used when failing.
 ','line_number':62,'multiline':True]['text':'
 * Compile getting a member from a list/dict/string/blob.  Stack has the
 * indexable value and the index or the two indexes of a slice.
 * "keeping_dict" is used for dict[func](arg) to pass dict to func.
 ','line_number':75,'multiline':True]['text':' We can index a list, dict and blob.  If we don't know the type','line_number':88,'multiline':False]['text':' we can use the index value type.  If we still don't know use an "ANY"','line_number':89,'multiline':False]['text':' instruction.','line_number':90,'multiline':False]['text':' TODO: what about the decl type?','line_number':91,'multiline':False]['text':' If the index is a string, the variable must be a Dict.','line_number':95,'multiline':False]['text':' empty dict was used','line_number':125,'multiline':False]['text':' empty dict was used','line_number':131,'multiline':False]['text':' a copy is made so the member type is no longer declared','line_number':186,'multiline':False]['text':' a copy is made, the composite is no longer "const"','line_number':190,'multiline':False]['text':' did get a copy','line_number':195,'multiline':False]['text':' empty list was used','line_number':208,'multiline':False]['text':' empty list was used','line_number':214,'multiline':False]['text':'
 * Returns TRUE if the current function is inside the class "cl" or one of the
 * parent classes.
 ','line_number':255,'multiline':True]['text':'
 * Compile ".member" coming after an object or class.
 ','line_number':279,'multiline':True]['text':' Remove &t_super from the stack.','line_number':304,'multiline':False]['text':' The class was recognized as a script item.  We only need','line_number':315,'multiline':False]['text':' to know what class it is, drop the instruction.','line_number':316,'multiline':False]['text':' TODO: this should not give an error but be handled at runtime','line_number':325,'multiline':False]['text':' type->tt_type == VAR_OBJECT: method call','line_number':351,'multiline':False]['text':' Use a separate pointer to avoid that ASAN complains about','line_number':362,'multiline':False]['text':' uf_name[] only being 4 characters.','line_number':363,'multiline':False]['text':' could be a funcref in a member variable','line_number':374,'multiline':False]['text':' Remove the class type from the stack','line_number':383,'multiline':False]['text':' A private object method can be used only inside the class where it','line_number':396,'multiline':False]['text':' is defined or in one of the child classes.','line_number':397,'multiline':False]['text':' A private class method can be used only in the class where it is','line_number':398,'multiline':False]['text':' defined.','line_number':399,'multiline':False]['text':' Compile the arguments and call the class function or object method.','line_number':410,'multiline':False]['text':' The object method will know that the object is on the stack, just','line_number':411,'multiline':False]['text':' before the arguments.','line_number':412,'multiline':False]['text':' Could be an object method reference: "obj.Func".','line_number':444,'multiline':False]['text':' Private methods are not accessible outside the class','line_number':449,'multiline':False]['text':' Remove the object type from the stack','line_number':456,'multiline':False]['text':' load class member','line_number':465,'multiline':False]['text':' Note: type->tt_type = VAR_CLASS','line_number':470,'multiline':False]['text':' A private class variable can be accessed only in the class where','line_number':471,'multiline':False]['text':' it is defined.','line_number':472,'multiline':False]['text':' Remove the class type from the stack','line_number':481,'multiline':False]['text':' Could be a class method reference: "class.Func".','line_number':486,'multiline':False]['text':' Private methods are not accessible outside the class','line_number':491,'multiline':False]['text':' Remove the class type from the stack','line_number':498,'multiline':False]['text':'
 * Generate an instruction to load script-local variable "name", without the
 * leading "s:".
 * Also finds imported variables.
 ','line_number':509,'multiline':True]['text':' variable NUL terminated','line_number':517,'multiline':False]['text':' start of variable','line_number':518,'multiline':False]['text':' end of variable, may be NULL','line_number':519,'multiline':False]['text':' Need to lookup the member.','line_number':549,'multiline':False]['text':' isolate one name','line_number':562,'multiline':False]['text':' "import autoload './dir/script.vim'" or','line_number':571,'multiline':False]['text':' "import autoload './autoload/script.vim'" - load script first','line_number':572,'multiline':False]['text':' autoload script must be loaded later, access by the autoload','line_number':583,'multiline':False]['text':' name.  If a '(' follows it must be a function.  Otherwise we','line_number':584,'multiline':False]['text':' don't know, it can be "script.Func".','line_number':585,'multiline':False]['text':' If a '(' follows it must be a function.  Otherwise we don't','line_number':596,'multiline':False]['text':' know, it can be "script.Func".','line_number':597,'multiline':False]['text':' function call or function reference','line_number':626,'multiline':False]['text':' Can only get here if we know "name" is a script variable and not in a','line_number':640,'multiline':False]['text':' Vim9 script (variable is not in sn_var_vals): old style script.','line_number':641,'multiline':False]['text':' Reject a global non-autoload function found without the "g:" prefix.','line_number':652,'multiline':False]['text':' Need to compile any default values to get the argument types.','line_number':656,'multiline':False]['text':'
 * Compile a variable name into a load instruction.
 * "end" points to just after the name.
 * "is_expr" is TRUE when evaluating an expression, might be a funcref.
 * When "error" is FALSE do not give an error when not found.
 ','line_number':664,'multiline':True]['text':' load dictionary of namespace','line_number':690,'multiline':False]['text':' load namespaced variable','line_number':709,'multiline':False]['text':' cannot happen, just in case','line_number':751,'multiline':False]['text':' Global, Buffer-local, Window-local and Tabpage-local','line_number':757,'multiline':False]['text':' variables can be defined later, thus we don't check if it','line_number':758,'multiline':False]['text':' exists, give an error at runtime.','line_number':759,'multiline':False]['text':' super.SomeFunc() in a class function: push &t_super type, this','line_number':782,'multiline':False]['text':' is recognized in compile_subscript().','line_number':783,'multiline':False]['text':' Referencing a class variable or method without the class','line_number':823,'multiline':False]['text':' name.  A class variable or method can be referenced without','line_number':824,'multiline':False]['text':' the class name only in the class where the function is','line_number':825,'multiline':False]['text':' defined.','line_number':826,'multiline':False]['text':' "var" can be script-local even without using "s:" if it','line_number':847,'multiline':False]['text':' already exists in a Vim9 script or when it's imported.','line_number':848,'multiline':False]['text':' When evaluating an expression and the name starts with an','line_number':853,'multiline':False]['text':' uppercase letter it can be a user defined function.','line_number':854,'multiline':False]['text':' generate_funcref() will fail if the function can't be found.','line_number':855,'multiline':False]['text':'
 * Compile a string in a ISN_PUSHS instruction into an ISN_INSTR.
 * "str_offset" is the number of leading bytes to skip from the string.
 * Returns FAIL if compilation fails.
 ','line_number':879,'multiline':True]['text':' Remove the string type from the stack.','line_number':894,'multiline':False]['text':' Temporarily reset the list of instructions so that the jump labels are','line_number':897,'multiline':False]['text':' correct.','line_number':898,'multiline':False]['text':' avoid peeking a next line','line_number':903,'multiline':False]['text':' Move the generated instructions into the ISN_INSTR instruction, then','line_number':925,'multiline':False]['text':' restore the list of instructions.','line_number':926,'multiline':False]['text':'
 * Compile the argument expressions.
 * "arg" points to just after the "(" and is advanced to after the ")"
 ','line_number':938,'multiline':True]['text':' {skip} argument of searchpair() can be compiled if not empty','line_number':979,'multiline':False]['text':' {sub} argument of substitute() can be compiled if it starts','line_number':988,'multiline':False]['text':' with \=','line_number':989,'multiline':False]['text':'
 * Compile a function call:  name(arg1, arg2)
 * "arg" points to "name", "arg + varlen" to the "(".
 * "argcount_init" is 1 for "value->method()"
 * Instructions:
 *	EVAL arg1
 *	EVAL arg2
 *	BCALL / DCALL / UCALL
 ','line_number':1016,'multiline':True]['text':' We can evaluate "has('name')" at compile time.','line_number':1060,'multiline':False]['text':' We can evaluate "len('string')" at compile time.','line_number':1061,'multiline':False]['text':' We always evaluate "exists_compiled()" at compile time.','line_number':1062,'multiline':False]['text':' We handle the "skip" argument of searchpair() and searchpairpos()','line_number':1112,'multiline':False]['text':' differently.','line_number':1113,'multiline':False]['text':' builtin function','line_number':1133,'multiline':False]['text':' add() can be compiled to instructions if we know the type','line_number':1147,'multiline':False]['text':' inline "add(list, item)" so that the type can be checked','line_number':1150,'multiline':False]['text':' inline "add(blob, nr)" so that the type can be checked','line_number':1156,'multiline':False]['text':' May have the "D" or "R" flag, reserve a variable for a','line_number':1165,'multiline':False]['text':' deferred function call.','line_number':1166,'multiline':False]['text':' An argument or local variable can be a function reference, this','line_number':1181,'multiline':False]['text':' overrules a function name.','line_number':1182,'multiline':False]['text':' If we can find the function by name generate the right call.','line_number':1189,'multiline':False]['text':' Skip global functions here, a local funcref takes precedence.','line_number':1190,'multiline':False]['text':' A function name without g: prefix must be found locally.','line_number':1202,'multiline':False]['text':' Class method invocation without the class name.','line_number':1209,'multiline':False]['text':' A class method can be referenced without the class name only in','line_number':1210,'multiline':False]['text':' the class where the function is defined.','line_number':1211,'multiline':False]['text':' If the name is a variable, load it and use PCALL.','line_number':1227,'multiline':False]['text':' Not for g:Func(), we don't know if it is a variable or not.','line_number':1228,'multiline':False]['text':' Not for some#Func(), it will be loaded later.','line_number':1229,'multiline':False]['text':' If we can find a global function by name generate the right call.','line_number':1240,'multiline':False]['text':' A global function may be defined only later.  Need to figure out at','line_number':1247,'multiline':False]['text':' runtime.  Also handles a FuncRef at runtime.','line_number':1248,'multiline':False]['text':' like NAMESPACE_CHAR but with 'a' and 'l'.','line_number':1259,'multiline':False]['text':'
 * Find the end of a variable or function name.  Unlike find_name_end() this
 * does not recognize magic braces.
 * When "use_namespace" is TRUE recognize "b:", "s:", etc.
 * Return a pointer to just after the name.  Equal to "arg" if there is no
 * valid name.
 ','line_number':1262,'multiline':True]['text':' Quick check for valid starting character.','line_number':1274,'multiline':False]['text':' Include a namespace such as "s:var" and "v:var".  But "n:" is not','line_number':1279,'multiline':False]['text':' and can be used in slice "[n:]".','line_number':1280,'multiline':False]['text':'
 * Like to_name_end() but also skip over a list or dict constant.
 * Also accept "<SNR>123_Func".
 * This intentionally does not handle line continuation.
 ','line_number':1288,'multiline':True]['text':' Can be "[1, 2, 3]->Func()".','line_number':1305,'multiline':False]['text':'
 * parse a list: [expr, expr]
 * "*arg" points to the '['.
 * ppconst->pp_is_const is set if all items are a constant.
 ','line_number':1312,'multiline':True]['text':' reset when non-const encountered','line_number':1324,'multiline':False]['text':'
 * Parse a lambda: "(arg, arg) => expr"
 * "*arg" points to the '('.
 * Returns OK/FAIL when a lambda is recognized, NOTDONE if it's not a lambda.
 ','line_number':1374,'multiline':True]['text':' Get the funcref in "rettv".','line_number':1391,'multiline':False]['text':' "rettv" will now be a partial referencing the function.','line_number':1399,'multiline':False]['text':' Compile it here to get the return type.  The return type is optional,','line_number':1404,'multiline':False]['text':' when it's missing use t_unknown.  This is recognized in','line_number':1405,'multiline':False]['text':' compile_return().','line_number':1406,'multiline':False]['text':' When the outer function is compiled for profiling or debugging, the','line_number':1411,'multiline':False]['text':' lambda may be called without profiling or debugging.  Compile it here in','line_number':1412,'multiline':False]['text':' the right context.','line_number':1413,'multiline':False]['text':' if the outer function is not compiled for debugging or profiling, this','line_number':1421,'multiline':False]['text':' one might be','line_number':1422,'multiline':False]['text':' The last entry in evalarg.eval_tofree_ga is a copy of the last line and','line_number':1431,'multiline':False]['text':' "*arg" may point into it.  Point into the original line to avoid a','line_number':1432,'multiline':False]['text':' dangling pointer.','line_number':1433,'multiline':False]['text':' The return type will now be known.','line_number':1448,'multiline':False]['text':' The function reference count will be 1.  When the ISN_FUNCREF','line_number':1451,'multiline':False]['text':' instruction is deleted the reference count is decremented and the','line_number':1452,'multiline':False]['text':' function is freed.','line_number':1453,'multiline':False]['text':'
 * Get a lambda and compile it.  Uses Vim9 syntax.
 ','line_number':1461,'multiline':True]['text':' Get the funcref in "rettv".','line_number':1475,'multiline':False]['text':' currently unreachable','line_number':1480,'multiline':False]['text':' "rettv" will now be a partial referencing the function.','line_number':1482,'multiline':False]['text':' Compile it here to get the return type.  The return type is optional,','line_number':1485,'multiline':False]['text':' when it's missing use t_unknown.  This is recognized in','line_number':1486,'multiline':False]['text':' compile_return().','line_number':1487,'multiline':False]['text':' The return type will now be known.','line_number':1494,'multiline':False]['text':'
 * parse a dict: {key: val, [key]: val}
 * "*arg" points to the '{'.
 * ppconst->pp_is_const is set if all item values are a constant.
 ','line_number':1502,'multiline':True]['text':' reset when non-const encountered','line_number':1517,'multiline':False]['text':' {[expr]: value} uses an evaluated key.','line_number':1540,'multiline':False]['text':' Convert to string at compile time.','line_number':1549,'multiline':False]['text':' {"name": value},','line_number':1568,'multiline':False]['text':' {'name': value},','line_number':1569,'multiline':False]['text':' {name: value} use "name" as a literal key','line_number':1570,'multiline':False]['text':' Check for duplicate keys, if using string keys.','line_number':1578,'multiline':False]['text':' Allow for following comment, after at least one space.','line_number':1653,'multiline':False]['text':'
 * Compile "&option".
 ','line_number':1672,'multiline':True]['text':' parse the option and get the current value to get the type.','line_number':1682,'multiline':False]['text':' include the '&' in the name, eval_option() expects it.','line_number':1687,'multiline':False]['text':'
 * Compile "$VAR".
 ','line_number':1700,'multiline':True]['text':' include the '$' in the name, eval_env_var() expects it.','line_number':1719,'multiline':False]['text':'
 * Compile $"string" or $'string'.
 ','line_number':1726,'multiline':True]['text':' *arg is on the '$' character, move it to the first string character.','line_number':1739,'multiline':False]['text':' Get the string up to the matching quote or to a single '{'.','line_number':1746,'multiline':False]['text':' "arg" is advanced to either the quote or the '{'.','line_number':1747,'multiline':False]['text':' generate non-empty string or empty string if it's the only','line_number':1759,'multiline':False]['text':' one','line_number':1760,'multiline':False]['text':' don't free it now','line_number':1763,'multiline':False]['text':' found terminating quote','line_number':1771,'multiline':False]['text':' Small optimization, if there's only a single piece skip the ISN_CONCAT.','line_number':1789,'multiline':False]['text':'
 * Compile "@r".
 ','line_number':1796,'multiline':True]['text':'
 * Apply leading '!', '-' and '+' to constant "rettv".
 * When "numeric_only" is TRUE do not apply '!'.
 ','line_number':1820,'multiline':True]['text':' this works from end to start','line_number':1829,'multiline':False]['text':' only '-' has an effect, for '+' we only check the type','line_number':1835,'multiline':False]['text':' tv_get_number_chk() accepts a string, but we don't want that','line_number':1846,'multiline':False]['text':' here','line_number':1847,'multiline':False]['text':' '!' is permissive in the type.','line_number':1869,'multiline':False]['text':'
 * Recognize v: variables that are constants and set "rettv".
 ','line_number':1879,'multiline':True]['text':' "is" and "isnot"; but not a prefix of a name','line_number':1947,'multiline':False]['text':'
 * Skip over an expression, ignoring most errors.
 ','line_number':1962,'multiline':True]['text':'
 * Check that the top of the type stack has a type that can be used as a
 * condition.  Give an error and return FAIL if not.
 ','line_number':1976,'multiline':True]['text':' Number 0 and 1 are OK to use as a bool.  "any" could also be a bool.','line_number':1994,'multiline':False]['text':' This requires a runtime type check.','line_number':1995,'multiline':False]['text':'
 * Give the "white on both sides" error, taking the operator from "p[len]".
 ','line_number':2001,'multiline':True]['text':'
 * Compile code to apply '-', '+' and '!'.
 * When "numeric_only" is TRUE do not apply '!'.
 ','line_number':2013,'multiline':True]['text':' this works from end to start','line_number':2022,'multiline':False]['text':' only '-' has an effect, for '+' we only check the type','line_number':2035,'multiline':False]['text':'
 * Compile "(expression)": recursive!
 * Return FAIL/OK.
 ','line_number':2062,'multiline':True]['text':' Not enough space in ppconst, flush constants.','line_number':2080,'multiline':False]['text':'
 * Compile whatever comes after "name" or "name()".
 * Advances "*arg" only when something was recognized.
 ','line_number':2099,'multiline':True]['text':' If a following line starts with "->{", "->(" or "->X" advance to','line_number':2123,'multiline':False]['text':' that line, so that a line break before "->" is allowed.','line_number':2124,'multiline':False]['text':' Also if a following line starts with ".x".','line_number':2125,'multiline':False]['text':' Do not skip over white space to find the "(", "execute 'x' (expr)"','line_number':2141,'multiline':False]['text':' is not a function call.','line_number':2142,'multiline':False]['text':' funcref(arg)','line_number':2151,'multiline':False]['text':' something->method()','line_number':2172,'multiline':False]['text':' Apply the '!', '-' and '+' first:','line_number':2177,'multiline':False]['text':'   -1.0->func() works like (-1.0)->func()','line_number':2178,'multiline':False]['text':' No line break supported right after "->".','line_number':2184,'multiline':False]['text':' Three alternatives handled here:','line_number':2186,'multiline':False]['text':' 1. "base->name("  only a name, use compile_call()','line_number':2187,'multiline':False]['text':' 2. "base->(expr)(" evaluate "expr", then use PCALL','line_number':2188,'multiline':False]['text':' 3. "base->expr("  Same, find the end of "expr" by "("','line_number':2189,'multiline':False]['text':' alternative 1 or 3','line_number':2194,'multiline':False]['text':' alternative 1','line_number':2207,'multiline':False]['text':' Must be alternative 3, find the "(". Only works within','line_number':2214,'multiline':False]['text':' one line.','line_number':2215,'multiline':False]['text':' Funcref call:  list->(Refs[2])(arg)','line_number':2237,'multiline':False]['text':' or lambda:	  list->((arg) => expr)(arg)','line_number':2238,'multiline':False]['text':'','line_number':2239,'multiline':False]['text':' Fist compile the function expression.','line_number':2240,'multiline':False]['text':' instead of using LOADG for "import.Func" use PUSHFUNC','line_number':2252,'multiline':False]['text':' do not look in the next line','line_number':2255,'multiline':False]['text':' Compile the arguments.','line_number':2272,'multiline':False]['text':' Remember the next instruction index, where the instructions','line_number':2282,'multiline':False]['text':' for arguments are being written.','line_number':2283,'multiline':False]['text':' Move the instructions for the arguments to before the','line_number':2291,'multiline':False]['text':' instructions of the expression and move the type of the','line_number':2292,'multiline':False]['text':' expression after the argument types.  This is what ISN_PCALL','line_number':2293,'multiline':False]['text':' expects.','line_number':2294,'multiline':False]['text':' list index: list[123]','line_number':2345,'multiline':False]['text':' dict member: dict[key]','line_number':2346,'multiline':False]['text':' string index: text[123]','line_number':2347,'multiline':False]['text':' blob index: blob[123]','line_number':2348,'multiline':False]['text':' missing first index is equal to zero','line_number':2358,'multiline':False]['text':' missing second index is equal to end of string','line_number':2388,'multiline':False]['text':' dictionary member: dict.name','line_number':2418,'multiline':False]['text':' class member: SomeClass.varname','line_number':2427,'multiline':False]['text':' class method: SomeClass.SomeMethod()','line_number':2428,'multiline':False]['text':' class constructor: SomeClass.new()','line_number':2429,'multiline':False]['text':' object member: someObject.varname, this.varname','line_number':2430,'multiline':False]['text':' object method: someObject.SomeMethod(), this.SomeMethod()','line_number':2431,'multiline':False]['text':' Turn "dict.Func" into a partial for "Func" bound to "dict".','line_number':2465,'multiline':False]['text':' This needs to be done at runtime to be able to check the type.','line_number':2466,'multiline':False]['text':'
 * Compile an expression at "*arg" and add instructions to "cctx->ctx_instr".
 * "arg" is advanced until after the expression, skipping white space.
 *
 * If the value is a constant "ppconst->pp_used" will be non-zero.
 * Before instructions are generated, any values in "ppconst" will generated.
 *
 * This is the compiling equivalent of eval1(), eval2(), etc.
 ','line_number':2474,'multiline':True]['text':'
 *  number		number constant
 *  0zFFFFFFFF		Blob constant
 *  "string"		string constant
 *  'string'		literal string constant
 *  &option-name	option value
 *  @r			register contents
 *  identifier		variable value
 *  function()		function call
 *  $VAR		environment variable
 *  (expression)	nested expression
 *  [expr, expr]	List
 *  {key: val, [key]: val}   Dictionary
 *
 *  Also handle:
 *  ! in front		logical NOT
 *  - in front		unary minus
 *  + in front		unary plus (ignored)
 *  trailing (arg)	funcref/partial call
 *  trailing []		subscript in String or List
 *  trailing .name	entry in Dictionary
 *  trailing ->name()	method call
 ','line_number':2484,'multiline':True]['text':'
     * Skip '!', '-' and '+' characters.  They are handled later.
     ','line_number':2520,'multiline':True]['text':'
	 * Number constant.
	 ','line_number':2531,'multiline':True]['text':' also for blob starting with 0z','line_number':2534,'multiline':False]['text':' Apply "-" and "+" just before the number now, right to','line_number':2546,'multiline':False]['text':' left.  Matters especially when "->" follows.  Stops at','line_number':2547,'multiline':False]['text':' '!'.','line_number':2548,'multiline':False]['text':'
	 * String constant: "string".
	 ','line_number':2557,'multiline':True]['text':'
	 * Literal string constant: 'str''ing'.
	 ','line_number':2564,'multiline':True]['text':'
	 * Constant Vim variable.
	 ','line_number':2571,'multiline':True]['text':'
	 * "true" constant
	 ','line_number':2578,'multiline':True]['text':'
	 * "false" constant
	 ','line_number':2592,'multiline':True]['text':'
	 * "null" or "null_*" constant
	 ','line_number':2606,'multiline':True]['text':'
	 * List: [expr, expr]
	 ','line_number':2626,'multiline':True]['text':'
	 * Dictionary: {'key': val, 'key': val}
	 ','line_number':2634,'multiline':True]['text':'
	 * Option value: &name
	 ','line_number':2642,'multiline':True]['text':'
	 * Environment variable: $VAR.
	 * Interpolated string: $"string" or $'string'.
	 ','line_number':2650,'multiline':True]['text':'
	 * Register contents: @r.
	 ','line_number':2662,'multiline':True]['text':'
	 * nested expression: (expression).
	 * lambda: (arg, arg) => expr
	 * funcref: (arg, arg) => { statement }
	 ','line_number':2669,'multiline':True]['text':' if compile_lambda returns NOTDONE then it must be (expr)','line_number':2674,'multiline':False]['text':' A constant expression can possibly be handled compile time,','line_number':2691,'multiline':False]['text':' return the value instead of generating code.','line_number':2692,'multiline':False]['text':' "name" or "name()"','line_number':2712,'multiline':False]['text':' Handle following "[]", ".member", etc.','line_number':2735,'multiline':False]['text':' Then deal with prefixed '-', '+' and '!', if not done already.','line_number':2736,'multiline':False]['text':' apply the '!', '-' and '+' before the constant','line_number':2742,'multiline':False]['text':'
 * <type>expr9: runtime type check / conversion
 ','line_number':2753,'multiline':True]['text':' Recognize <type>','line_number':2761,'multiline':False]['text':'
 *	*	number multiplication
 *	/	number division
 *	%	number modulo
 ','line_number':2803,'multiline':True]['text':' get the first expression','line_number':2815,'multiline':False]['text':'
     * Repeat computing, until no "*", "/" or "%" is following.
     ','line_number':2819,'multiline':True]['text':' get the second expression','line_number':2841,'multiline':False]['text':' both are numbers: compute the result','line_number':2854,'multiline':False]['text':'
 *      +	number addition or list/blobl concatenation
 *      -	number subtraction
 *      ..	string concatenation
 ','line_number':2881,'multiline':True]['text':' get the first variable','line_number':2894,'multiline':False]['text':'
     * Repeat computing, until no "+", "-" or ".." is following.
     ','line_number':2898,'multiline':True]['text':' Finding "++" or "--" on the next line is a separate command.','line_number':2907,'multiline':False]['text':' But ".." is concatenation.','line_number':2908,'multiline':False]['text':' get the second expression','line_number':2926,'multiline':False]['text':' concat/subtract/add constant numbers','line_number':2940,'multiline':False]['text':' concatenate constant strings','line_number':2947,'multiline':False]['text':'
 * expr6a >> expr6b
 * expr6a << expr6b
 *
 * Produces instructions:
 *	OPNR			bitwise left or right shift
 ','line_number':2985,'multiline':True]['text':' get the first variable','line_number':3002,'multiline':False]['text':'
     * Repeat computing, until no "+", "-" or ".." is following.
     ','line_number':3006,'multiline':True]['text':' Handle a bitwise left or right shift operator','line_number':3022,'multiline':False]['text':' left operand should be a number','line_number':3027,'multiline':False]['text':' get the second variable','line_number':3055,'multiline':False]['text':' Both sides are a constant, compute the result now.','line_number':3067,'multiline':False]['text':' right operand should be a positive number','line_number':3070,'multiline':False]['text':'
 * expr5a == expr5b
 * expr5a =~ expr5b
 * expr5a != expr5b
 * expr5a !~ expr5b
 * expr5a > expr5b
 * expr5a >= expr5b
 * expr5a < expr5b
 * expr5a <= expr5b
 * expr5a is expr5b
 * expr5a isnot expr5b
 *
 * Produces instructions:
 *	EVAL expr5a		Push result of "expr5a"
 *	EVAL expr5b		Push result of "expr5b"
 *	COMPARE			one of the compare instructions
 ','line_number':3112,'multiline':True]['text':' get the first variable','line_number':3139,'multiline':False]['text':'
     * If there is a comparative operator, use it.
     ','line_number':3147,'multiline':True]['text':' Default: do not ignore case','line_number':3152,'multiline':False]['text':' extra question mark appended: ignore case','line_number':3164,'multiline':False]['text':' extra '#' appended: match case (ignored)','line_number':3170,'multiline':False]['text':' nothing appended: match case','line_number':3173,'multiline':False]['text':' get the second variable','line_number':3181,'multiline':False]['text':' Both sides are a constant, compute the result now.','line_number':3194,'multiline':False]['text':' First check for a valid combination of types, this is more','line_number':3195,'multiline':False]['text':' strict than typval_compare().','line_number':3196,'multiline':False]['text':'
 * Compile || or &&.
 ','line_number':3220,'multiline':True]['text':'
	 * Repeat until there is no following "||" or "&&"
	 ','line_number':3241,'multiline':True]['text':' Use the last ppconst if possible.','line_number':3278,'multiline':False]['text':' For "false && expr" and "true || expr" the "expr"','line_number':3287,'multiline':False]['text':' does not need to be evaluated.','line_number':3288,'multiline':False]['text':' For "true && expr" and "false || expr" only "expr"','line_number':3296,'multiline':False]['text':' needs to be evaluated.','line_number':3297,'multiline':False]['text':' Every part must evaluate to a bool.','line_number':3304,'multiline':False]['text':' eval the next expression','line_number':3327,'multiline':False]['text':' "0 || 1" results in true, "1 && 0" results in false.','line_number':3343,'multiline':False]['text':' Every part must evaluate to a bool.','line_number':3367,'multiline':False]['text':' Fill in the end label in all jumps.','line_number':3376,'multiline':False]['text':'
 * expr4a && expr4a && expr4a	    logical AND
 *
 * Produces instructions:
 *	EVAL expr4a		Push result of "expr4a"
 *	COND2BOOL		convert to bool if needed
 *	JUMP_IF_COND_FALSE end
 *	EVAL expr4b		Push result of "expr4b"
 *	JUMP_IF_COND_FALSE end
 *	EVAL expr4c		Push result of "expr4c"
 * end:
 ','line_number':3396,'multiline':True]['text':' get the first variable','line_number':3413,'multiline':False]['text':' || and && work almost the same','line_number':3417,'multiline':False]['text':'
 * expr3a || expr3b || expr3c	    logical OR
 *
 * Produces instructions:
 *	EVAL expr3a		Push result of "expr3a"
 *	COND2BOOL		convert to bool if needed
 *	JUMP_IF_COND_TRUE end
 *	EVAL expr3b		Push result of "expr3b"
 *	JUMP_IF_COND_TRUE end
 *	EVAL expr3c		Push result of "expr3c"
 * end:
 ','line_number':3421,'multiline':True]['text':' eval the first expression','line_number':3438,'multiline':False]['text':' || and && work almost the same','line_number':3442,'multiline':False]['text':'
 * Toplevel expression: expr2 ? expr1a : expr1b
 * Produces instructions:
 *	EVAL expr2		Push result of "expr2"
 *      JUMP_IF_FALSE alt	jump if false
 *      EVAL expr1a
 *      JUMP_ALWAYS end
 * alt:	EVAL expr1b
 * end:
 *
 * Toplevel expression: expr2 ?? expr1
 * Produces instructions:
 *	EVAL expr2		    Push result of "expr2"
 *      JUMP_AND_KEEP_IF_TRUE end   jump if true
 *      EVAL expr1
 * end:
 ','line_number':3446,'multiline':True]['text':' Ignore all kinds of errors when not producing code.','line_number':3470,'multiline':False]['text':' Evaluate the first expression.','line_number':3479,'multiline':False]['text':' the condition is a constant, we know whether the ? or the :','line_number':3512,'multiline':False]['text':' expression is to be evaluated.','line_number':3513,'multiline':False]['text':' "left ?? right" and "left" is truthy: produce "left"','line_number':3530,'multiline':False]['text':' evaluate the second expression; any type is accepted','line_number':3549,'multiline':False]['text':' remember the type and drop it','line_number':3561,'multiline':False]['text':' jump here from JUMP_IF_FALSE','line_number':3568,'multiline':False]['text':' Check for the ":".','line_number':3576,'multiline':False]['text':' evaluate the third expression','line_number':3596,'multiline':False]['text':' If the types differ, the result has a more generic type.','line_number':3613,'multiline':False]['text':' jump here from JUMP_ALWAYS or JUMP_AND_KEEP_IF_TRUE','line_number':3618,'multiline':False]['text':'
 * Toplevel expression.
 * Sets "is_const" (if not NULL) to indicate the value is a constant.
 * Returns OK or FAIL.
 ','line_number':3628,'multiline':True]['text':'
 * Toplevel expression.
 ','line_number':3651,'multiline':True]['text':' defined(FEAT_EVAL)','line_number':3661,'multiline':False]