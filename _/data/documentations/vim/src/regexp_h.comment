['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE
 *
 * This is NOT the original regular expression code as written by Henry
 * Spencer.  This code has been modified specifically for use with Vim, and
 * should not be used apart from compiling Vim.  If you want a good regular
 * expression library, get the original code.
 *
 * NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE
 ','line_number':1,'multiline':True]['text':'
 * The number of sub-matches is limited to 10.
 * The first one (index 0) is the whole match, referenced with "\0".
 * The second one (index 1) is the first sub-match, referenced with "\1".
 * This goes up to the tenth (index 9), referenced with "\9".
 ','line_number':16,'multiline':True]['text':'
 * In the NFA engine: how many braces are allowed.
 * TODO(RE): Use dynamic memory allocation instead of static, like here
 ','line_number':24,'multiline':True]['text':'
 * In the NFA engine: how many states are allowed
 ','line_number':30,'multiline':True]['text':' Which regexp engine to use? Needed for vim_regcomp().','line_number':36,'multiline':False]['text':' Must match with 'regexpengine'.','line_number':37,'multiline':False]['text':'
 * Structure returned by vim_regcomp() to pass on to vim_regexec().
 * This is the general structure. For the actual matcher, two specific
 * structures are used. See code below.
 ','line_number':44,'multiline':True]['text':' automatic, backtracking or nfa engine','line_number':53,'multiline':False]['text':' second argument for vim_regcomp()','line_number':54,'multiline':False]['text':' prog is being executed','line_number':55,'multiline':False]['text':'
 * Structure used by the back track matcher.
 * These fields are only to be used in regexp.c!
 * See regexp.c for an explanation.
 ','line_number':58,'multiline':True]['text':' These four members implement regprog_T','line_number':65,'multiline':False]['text':' actually longer..','line_number':79,'multiline':False]['text':'
 * Structure representing a NFA state.
 * An NFA state may have no outgoing edge, when it is a NFA_MATCH state.
 ','line_number':82,'multiline':True]['text':' 0: normal, 1: recursive','line_number':93,'multiline':False]['text':'
 * Structure used by the NFA matcher.
 ','line_number':97,'multiline':True]['text':' These three members implement regprog_T','line_number':102,'multiline':False]['text':' points into state[]','line_number':109,'multiline':False]['text':' pattern starts with ^','line_number':111,'multiline':False]['text':' char at start of pattern','line_number':112,'multiline':False]['text':' plain text to match with','line_number':113,'multiline':False]['text':' pattern contains \ze','line_number':115,'multiline':False]['text':' pattern contains \1 .. \9','line_number':116,'multiline':False]['text':' number of ()','line_number':121,'multiline':False]['text':' actually longer..','line_number':123,'multiline':False]['text':'
 * Structure to be used for single-line matching.
 * Sub-match "no" starts at "startp[no]" and ends just before "endp[no]".
 * When there is no match, the pointer is NULL.
 ','line_number':126,'multiline':True]['text':' match start without "\zs"','line_number':137,'multiline':False]['text':'
 * Structure to be used for multi-line matching.
 * Sub-match "no" starts in line "startpos[no].lnum" column "startpos[no].col"
 * and ends in line "endpos[no].lnum" just before column "endpos[no].col".
 * The line numbers are relative to the first line, thus startpos[0].lnum is
 * always 0.
 * When there is no match, the line number is -1.
 ','line_number':141,'multiline':True]['text':' match start without "\zs"','line_number':155,'multiline':False]['text':' when not zero: maximum column','line_number':157,'multiline':False]['text':'
 * Structure used to store external references: "\z\(\)" to "\z\1".
 * Use a reference count to avoid the need to copy this around.  When it goes
 * from 1 to zero the matches need to be freed.
 ','line_number':160,'multiline':True]['text':' bt_regcomp or nfa_regcomp','line_number':173,'multiline':False]['text':' bt_regfree or nfa_regfree','line_number':175,'multiline':False]['text':' bt_regexec_nl or nfa_regexec_nl','line_number':177,'multiline':False]['text':' bt_regexec_mult or nfa_regexec_mult','line_number':179,'multiline':False]['text':'char_u	*expr;','line_number':181,'multiline':False]['text':' Flags used by vim_regsub() and vim_regsub_both()','line_number':184,'multiline':False]['text':' _REGEXP_H','line_number':189,'multiline':False]