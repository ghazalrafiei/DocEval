['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved		by Bram Moolenaar
 *				GUI/Motif support by Robert Webb
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * Code for the Motif GUI.
 * Not used for GTK.
 ','line_number':10,'multiline':True]['text':'
 * XpmP.h is preferred, because it makes the signs drawn with a transparent
 * background instead of black.
 ','line_number':24,'multiline':True]['text':' Default resource values','line_number':60,'multiline':False]['text':' use the default (CDE) colors','line_number':69,'multiline':False]['text':' Window Manager Atoms','line_number':79,'multiline':False]['text':' index in wm_atoms[] for WM_DELETE_WINDOW','line_number':80,'multiline':False]['text':' index in wm_atoms[] for WM_SAVE_YOURSELF','line_number':81,'multiline':False]['text':'
 * We either draw with a fontset (when current_fontset != NULL) or with a
 * normal font (current_fontset == NULL, use gui.text_gc and gui.back_gc).
 ','line_number':84,'multiline':True]['text':'
 * Keycodes recognized by vim.
 * NOTE: when changing this, the table in gui_gtk_x11.c probably needs the
 * same change!
 ','line_number':140,'multiline':True]['text':' keysymdef.h defines up to F35','line_number':194,'multiline':False]['text':' Keypad keys:','line_number':211,'multiline':False]['text':' End of list marker:','line_number':243,'multiline':False]['text':' Resources for setting the foreground and background colors of menus','line_number':263,'multiline':False]['text':' Resources for setting the foreground and background colors of scrollbars','line_number':269,'multiline':False]['text':' Resources for setting the foreground and background colors of tooltip','line_number':275,'multiline':False]['text':'
 * X Resources:
 ','line_number':283,'multiline':True]['text':' This one may not be really needed?','line_number':458,'multiline':False]['text':' FEAT_BEVAL_GUI','line_number':468,'multiline':False]['text':' FEAT_XIM','line_number':488,'multiline':False]['text':'
 * This table holds all the X GUI command line options allowed.  This includes
 * the standard ones so that we can skip them when vim is started without the
 * GUI (but the GUI might start up later).
 * When changing this, also update doc/vim_gui.txt and the usage message!!!
 ','line_number':491,'multiline':True]['text':' We handle these options ourselves','line_number':499,'multiline':False]['text':'
 * Call-back routines.
 ','line_number':537,'multiline':True]['text':' Using an event handler for a channel that may be disconnected does','line_number':557,'multiline':False]['text':' not work, it hangs.  Instead poll for messages.','line_number':558,'multiline':False]['text':' repeat','line_number':562,'multiline':False]['text':'
     * When we do an XCopyArea(), and the window is partially obscured, we want
     * to receive an event to tell us whether it worked or not.
     ','line_number':580,'multiline':True]['text':' This is needed for when redrawing is slow.','line_number':587,'multiline':False]['text':' make sure all output has been processed','line_number':604,'multiline':False]['text':' Clear the border areas if needed','line_number':611,'multiline':False]['text':' This is needed for when redrawing is slow.','line_number':621,'multiline':False]['text':'
 * This function fills in the XRectangle object with the current x,y
 * coordinates and height, width so that an XtVaSetValues to the same shell of
 * those resources will restore the window to its former position and
 * dimensions.
 *
 * Note: This function may fail, in which case the XRectangle will be
 * unchanged.  Be sure to have the XRectangle set with the proper values for a
 * failed condition prior to calling this function.
 ','line_number':626,'multiline':True]['text':' XFree86 4.0.2 or newer: Be able to get UTF-8 characters even when','line_number':768,'multiline':False]['text':' the locale isn't utf-8.','line_number':769,'multiline':False]['text':' XFree86 4.0.2 or newer: Be able to get UTF-8 characters even','line_number':782,'multiline':False]['text':' when the locale isn't utf-8.','line_number':783,'multiline':False]['text':' Do conversion from 'termencoding' to 'encoding'.  When using','line_number':795,'multiline':False]['text':' Xutf8LookupString() it has already been done.','line_number':796,'multiline':False]['text':' guessed','line_number':803,'multiline':False]['text':' Translate CSI to K_CSI, otherwise it could be recognized as the','line_number':814,'multiline':False]['text':' start of a special key.','line_number':815,'multiline':False]['text':'
    * These keys have bogus lookup strings, and trapping them here is
    * easier than trying to XRebindKeysym() on them with every possible
    * combination of modifiers.
    ','line_number':839,'multiline':True]['text':' Otherwise Ctrl-Space doesn't work','line_number':849,'multiline':False]['text':'
     * Only on some machines ^_ requires Ctrl+Shift+minus.  For consistency,
     * allow just Ctrl+minus too.
     ','line_number':851,'multiline':True]['text':' why do we get XK_ISO_Left_Tab instead of XK_Tab for shift-tab?','line_number':859,'multiline':False]['text':' We used to apply Alt/Meta to the key here (Mod1Mask), but that is now','line_number':868,'multiline':False]['text':' done later, the same as it happens for the terminal.  Hopefully that','line_number':869,'multiline':False]['text':' works for everybody...','line_number':870,'multiline':False]['text':' Check for special keys.  Also do this when len == 1 (key has an ASCII','line_number':879,'multiline':False]['text':' value) to detect backspace, delete and keypad keys.','line_number':880,'multiline':False]['text':' Unrecognised key is ignored.','line_number':896,'multiline':False]['text':' Handle modifiers.','line_number':900,'multiline':False]['text':' Use the character before applyng CTRL.','line_number':908,'multiline':False]['text':'
     * For some keys a shift modifier is translated into another key
     * code.
     ','line_number':916,'multiline':True]['text':' Some keys need adjustment when the Ctrl modifier is used.','line_number':939,'multiline':False]['text':' Remove the SHIFT modifier for keys where it's already included,','line_number':944,'multiline':False]['text':' e.g., '(', '!' and '*'.','line_number':945,'multiline':False]['text':' Check if the key interrupts.','line_number':957,'multiline':False]['text':'
     * blank out the pointer if necessary
     ','line_number':971,'multiline':True]['text':' some compilers need a statement here','line_number':986,'multiline':False]['text':' Get the latest position, avoids lagging behind on a drag.','line_number':1011,'multiline':False]['text':'
	 * if our pointer is currently hidden, then we should show it.
	 ','line_number':1018,'multiline':True]['text':' just moving the rodent','line_number':1023,'multiline':False]['text':' moved in vimForm','line_number':1026,'multiline':False]['text':' Handle multiple clicks','line_number':1039,'multiline':False]['text':' keep in sync with gui_gtk_x11.c','line_number':1050,'multiline':False]['text':' Unknown button','line_number':1061,'multiline':False]['text':' Unknown mouse event type','line_number':1067,'multiline':False]['text':' Alt or Meta key','line_number':1080,'multiline':False]['text':'
 * End of call-back routines
 ','line_number':1086,'multiline':True]['text':'
 * Parse the GUI related command-line arguments.  Any arguments used are
 * deleted from argv, and *argc is decremented accordingly.  This is called
 * when vim is started, whether or not the GUI has been started.
 ','line_number':1090,'multiline':True]['text':'
     * Move all the entries in argv which are relevant to X into gui_argv.
     ','line_number':1101,'multiline':True]['text':' Look for argv[arg] in cmdline_options[] table','line_number':1112,'multiline':False]['text':' Remember finding "-rv" or "-reverse"','line_number':1119,'multiline':False]['text':' Found match in table, so move it into gui_argv','line_number':1128,'multiline':False]['text':' Move the options argument as well','line_number':1136,'multiline':False]['text':' don't fork() when starting GUI','line_number':1149,'multiline':False]['text':'
 * Check if the GUI can be started.  Called before gvimrc is sourced.
 * Return OK or FAIL.
 ','line_number':1171,'multiline':True]['text':' The call to XtOpenDisplay() may have set the locale from the','line_number':1189,'multiline':False]['text':' environment. Set LC_NUMERIC to "C" to make sure that strtod() uses a','line_number':1190,'multiline':False]['text':' decimal point, not a comma.','line_number':1191,'multiline':False]['text':'
 * Handle XSMP processing, de-registering the attachment upon error
 ','line_number':1209,'multiline':True]['text':'
 * Initialise the X GUI.  Create all the windows, set up all the call-backs etc.
 * Returns OK for success, FAIL when the GUI can't be started.
 ','line_number':1226,'multiline':True]['text':' Uncomment this to enable synchronous mode for debugging','line_number':1239,'multiline':False]['text':'
     * Get the application resources
     ','line_number':1246,'multiline':True]['text':'
     * Get the colors ourselves.  Using the automatic conversion doesn't
     * handle looking for approximate colors.
     ','line_number':1254,'multiline':True]['text':' Set default foreground and background colours','line_number':1267,'multiline':False]['text':' Check if reverse video needs to be applied (on Sun it's done by X)','line_number':1271,'multiline':False]['text':' Get the colors from the "Normal", "Tooltip", "Scrollbar" and "Menu"','line_number':1281,'multiline':False]['text':' group (set in syntax.c or in a vimrc file)','line_number':1282,'multiline':False]['text':'
     * Check that none of the colors are the same as the background color
     ','line_number':1285,'multiline':True]['text':'
     * Set up the GCs.	The font attributes will be set in gui_init_font().
     ','line_number':1290,'multiline':True]['text':' Now adapt the supplied(?) geometry-settings','line_number':1314,'multiline':False]['text':' Added by Kjetil Jacobsen <kjetilja@stud.cs.uit.no>','line_number':1315,'multiline':False]['text':'
	 * Set the (x,y) position of the main window only if specified in the
	 * users geometry, so we get good defaults when they don't. This needs
	 * to be done before the shell is popped up.
	 ','line_number':1328,'multiline':True]['text':'
    * Add an icon to Vim (Marcel Douben: 11 May 1998).
    ','line_number':1339,'multiline':True]['text':' Use Pixmaps, looking much nicer.','line_number':1364,'multiline':False]['text':' If you get an error message here, you still need to unpack the runtime','line_number':1366,'multiline':False]['text':' archive!','line_number':1367,'multiline':False]['text':'
     * Adjust the icon to the preferences of the actual window manager.
     ','line_number':1392,'multiline':True]['text':' accuracy isn't crucial','line_number':1418,'multiline':False]['text':' Attach listener on ICE connection','line_number':1444,'multiline':False]['text':'
 * Called when starting the GUI fails after calling gui_mch_init().
 ','line_number':1453,'multiline':True]['text':'
 * Called when the foreground or background color has been changed.
 ','line_number':1466,'multiline':True]['text':'
 * Open the GUI window which was created by a call to gui_mch_init().
 ','line_number':1496,'multiline':True]['text':' Actually open the window','line_number':1502,'multiline':False]['text':'
     * Add a callback for the Close item on the window managers menu, and the
     * save-yourself event.
     ','line_number':1509,'multiline':True]['text':'
     * Enable editres protocol (see "man editres").
     * Usually will need to add -lXmu to the linker line as well.
     ','line_number':1521,'multiline':True]['text':' This is a :gui command in a plain vim with no previous server','line_number':1532,'multiline':False]['text':'
	 * Cannot handle "widget-less" windows with XtProcessEvent() we'll
	 * have to change the "server" registration to that of the main window
	 * If we have not registered a name yet, remember the window
	 ','line_number':1538,'multiline':True]['text':' Get the colors for the highlight groups (gui_check_colors() might have','line_number':1549,'multiline':False]['text':' changed them)','line_number':1550,'multiline':False]['text':' re-init colors and fonts','line_number':1551,'multiline':False]['text':'
 * Convert the tooltip fontset name to an XFontSet.
 ','line_number':1561,'multiline':True]['text':' Failed. What to do?','line_number':1576,'multiline':False]['text':' Convert the menu font/fontset name to an XFontStruct/XFontset','line_number':1582,'multiline':False]['text':' Failed. What to do?','line_number':1596,'multiline':False]['text':' Failed. What to do?','line_number':1606,'multiline':False]['text':' Lesstif gives an error message here, and so does Solaris.  The man page','line_number':1616,'multiline':False]['text':' says that this isn't needed when exiting, so just skip it.','line_number':1617,'multiline':False]['text':'
 * Get the position of the top left corner of the window.
 ','line_number':1623,'multiline':True]['text':'
 * Set the position of the top left corner of the window to the given
 * coordinates.
 ','line_number':1640,'multiline':True]['text':'
 * Allow 10 pixels for horizontal borders, 'guiheadroom' for vertical borders.
 * Is there no way in X to find out how wide the borders really are?
 ','line_number':1680,'multiline':True]['text':'
 * Initialise vim to use the font "font_name".  If it's NULL, pick a default
 * font.
 * If "fontset" is TRUE, load the "font_name" as a fontset.
 * Return FAIL if the font could not be loaded, OK otherwise.
 ','line_number':1693,'multiline':True]['text':' A font name equal "*" is indicating, that we should activate the font','line_number':1711,'multiline':False]['text':' selection dialogue to get a new font name. So let us do it here.','line_number':1712,'multiline':False]['text':' Do not reset to default font except on GUI startup.','line_number':1717,'multiline':False]['text':' If 'guifontset' is set, VIM treats all font specifications as if','line_number':1726,'multiline':False]['text':' they were fontsets, and 'guifontset' becomes the default.','line_number':1727,'multiline':False]['text':'
	     * If none of the fonts in 'font' could be loaded, try the one set
	     * in the X resource, and finally just try using DFLT_FONT, which
	     * will hopefully always be there.
	     ','line_number':1740,'multiline':True]['text':'
     * Try to load other fonts for bold, italic, and bold-italic.
     * We should also try to work out what font to use for these when they are
     * not specified by X resources, but we don't yet.
     ','line_number':1782,'multiline':True]['text':' When not using the font specified by the resources, also don't use','line_number':1805,'multiline':False]['text':' the bold/italic fonts, otherwise setting 'guifont' will look very','line_number':1806,'multiline':False]['text':' strange.','line_number':1807,'multiline':False]['text':'
 * Get a font structure for highlighting.
 ','line_number':1832,'multiline':True]['text':' can't do this when GUI not running','line_number':1840,'multiline':False]['text':'
 * Return the name of font "font" in allocated memory.
 ','line_number':1880,'multiline':True]['text':' In this case, there's no way other than doing this.','line_number':1890,'multiline':False]['text':' In this case, try to retrieve the XLFD corresponding to 'font'->fid;','line_number':1895,'multiline':False]['text':' if failed, use 'name' unless it's NULL.','line_number':1896,'multiline':False]['text':'
 * Adjust gui.char_height (after 'linespace' was changed).
 ','line_number':1919,'multiline':True]['text':'
 * Set the current text font.
 ','line_number':1943,'multiline':True]['text':'
 * Set the current text fontset.
 * Adjust the ascent, in case it's different.
 ','line_number':1965,'multiline':True]['text':'
 * If a font is not going to be used, free its structure.
 ','line_number':1977,'multiline':True]['text':'
 * If a fontset is not going to be used, free its structure.
 ','line_number':1988,'multiline':True]['text':'
 * Load the fontset "name".
 * Return a reference to the fontset, or NOFONTSET when failing.
 ','line_number':1998,'multiline':True]['text':'
 * Check if fontset "fs" is fixed width.
 ','line_number':2045,'multiline':True]['text':' scan base font width','line_number':2070,'multiline':False]['text':' it seems ok. Good Luck!!','line_number':2095,'multiline':False]['text':' NOT USED YET','line_number':2116,'multiline':False]['text':' FEAT_XFONTSET','line_number':2136,'multiline':False]['text':'
 * Return the Pixel value (color) for the given color name.
 * Return INVALCOLOR for error.
 ','line_number':2138,'multiline':True]['text':' can't do this when GUI not running','line_number':2147,'multiline':False]['text':'
 * Return the Pixel value (color) for the given RGB values.
 * Return INVALCOLOR for error.
 ','line_number':2161,'multiline':True]['text':' Using XParseColor() is very slow, put rgb in XColor directly.','line_number':2172,'multiline':False]['text':' space enough to hold "#RRGGBB"','line_number':2174,'multiline':False]['text':'
 * Set the current text foreground color.
 ','line_number':2191,'multiline':True]['text':'
 * Set the current text background color.
 ','line_number':2204,'multiline':True]['text':'
 * Set the current text special color.
 ','line_number':2217,'multiline':True]['text':'
 * create a mouse pointer that is blank
 ','line_number':2226,'multiline':True]['text':'
 * Draw a curled line at the bottom of the character cell.
 ','line_number':2244,'multiline':True]['text':' Convert UTF-8 byte sequence to 16 bit characters for the X','line_number':2281,'multiline':False]['text':' functions.  Need a buffer for the 16 bit characters.  Keep it','line_number':2282,'multiline':False]['text':' between calls, because allocating it each time is slow.','line_number':2283,'multiline':False]['text':' show chars > 0xffff as ?','line_number':2301,'multiline':False]['text':' show chars > 0xffff as ?','line_number':2309,'multiline':False]['text':' Setup a clip rectangle to avoid spilling over in the next or','line_number':2331,'multiline':False]['text':' previous line.  This is apparently needed for some fonts which are','line_number':2332,'multiline':False]['text':' used in a fontset.','line_number':2333,'multiline':False]['text':' XmbDrawImageString has bug, don't use it for fontset.','line_number':2374,'multiline':False]['text':' Bold trick: draw the text again with a one-pixel offset.','line_number':2383,'multiline':False]['text':' Undercurl: draw curl at the bottom of the character cell.','line_number':2394,'multiline':False]['text':' Underline: draw a line at the bottom of the character cell.','line_number':2398,'multiline':False]['text':' When p_linespace is 0, overwrite the bottom row of pixels.','line_number':2403,'multiline':False]['text':' Otherwise put the line just below the character.','line_number':2404,'multiline':False]['text':'
 * Return OK if the key with the termcap name "name" is supported.
 ','line_number':2427,'multiline':True]['text':'
 * Return the text window-id and display.  Only required for X-based GUI's
 ','line_number':2442,'multiline':True]['text':' Do a visual beep by reversing the foreground and background colors','line_number':2462,'multiline':False]['text':' wait for a few msec','line_number':2467,'multiline':False]['text':'
 * Invert a rectangle from row r, column c, for nr rows and nc columns.
 ','line_number':2473,'multiline':True]['text':'
 * Iconify the GUI window.
 ','line_number':2487,'multiline':True]['text':'
 * Bring the Vim window to the foreground.
 ','line_number':2497,'multiline':True]['text':'
 * Draw a cursor without focus.
 ','line_number':2507,'multiline':True]['text':'
 * Draw part of a cursor, "w" pixels wide, and "h" pixels high, using
 * color "color".
 ','line_number':2522,'multiline':True]['text':' vertical line should be on the right of current point','line_number':2533,'multiline':False]['text':'
 * Catch up with any queued X events.  This may put keyboard input into the
 * input buffer, call resize call-backs, trigger timers etc.  If there is
 * nothing in the X event queue (& no timers pending), then we return
 * immediately.
 ','line_number':2541,'multiline':True]['text':'
 * GUI input routine called by gui_wait_for_chars().  Waits for a character
 * from the keyboard.
 *  wtime == -1	    Wait forever.
 *  wtime == 0	    This should never happen.
 *  wtime > 0	    Wait wtime milliseconds for a character.
 * Returns OK if a character was found to be available within the given time,
 * or FAIL otherwise.
 ','line_number':2563,'multiline':True]['text':'
     * Make this static, in case gui_x11_timer_cb is called after leaving
     * this function (otherwise a random value on the stack may be changed).
     ','line_number':2578,'multiline':True]['text':' If there is a channel with the keep_open flag we need to poll for input','line_number':2596,'multiline':False]['text':' on them.','line_number':2597,'multiline':False]['text':' Stop or start blinking when focus changes','line_number':2607,'multiline':False]['text':' Need to recompute the waiting time.','line_number':2624,'multiline':False]['text':'
	 * Don't use gui_mch_update() because then we will spin-lock until a
	 * char arrives, instead we use XtAppProcessEvent() to hang until an
	 * event arrives.  No need to check for input_buf_full because we are
	 * returning as soon as it contains a single char.  Note that
	 * XtAppNextEvent() may not be used because it will not return after a
	 * timer event has arrived -- webb
	 ','line_number':2629,'multiline':True]['text':'
 * Output routines.
 ','line_number':2656,'multiline':True]['text':'
 * Flush any output to the screen
 ','line_number':2660,'multiline':True]['text':'
 * Clear a rectangular region of the screen from text pos (row1, col1) to
 * (row2, col2) inclusive.
 ','line_number':2669,'multiline':True]['text':' Clear one extra pixel at the far right, for when bold characters have','line_number':2684,'multiline':False]['text':' spilled over to the next column.','line_number':2685,'multiline':False]['text':'
 * Delete the given number of lines from the given row, scrolling up any
 * text further down within the scroll region.
 ','line_number':2697,'multiline':True]['text':' Can't see the window','line_number':2705,'multiline':False]['text':' copy one extra pixel at the far right, for when bold has spilled','line_number':2707,'multiline':False]['text':' over','line_number':2708,'multiline':False]['text':'
 * Insert the given number of lines before the given row, scrolling down any
 * following text within the scroll region.
 ','line_number':2722,'multiline':True]['text':' Can't see the window','line_number':2730,'multiline':False]['text':' copy one extra pixel at the far right, for when bold has spilled','line_number':2732,'multiline':False]['text':' over','line_number':2733,'multiline':False]['text':'
 * Update the region revealed by scrolling up/down.
 ','line_number':2746,'multiline':True]['text':' Wait to check whether the scroll worked or not','line_number':2760,'multiline':False]['text':' The scroll worked.','line_number':2764,'multiline':False]['text':' This was the last expose event','line_number':2771,'multiline':False]['text':'
 * X Selection stuff, for cutting and pasting text to other windows.
 ','line_number':2777,'multiline':True]['text':'
 * Menu stuff.
 ','line_number':2807,'multiline':True]['text':'
 * Make a menu either grey or not grey.
 ','line_number':2811,'multiline':True]['text':'
 * Make menu item hidden or not hidden
 ','line_number':2831,'multiline':True]['text':'
 * This is called after setting all the menus to grey/hidden or not.
 ','line_number':2846,'multiline':True]['text':' Nothing to do in X','line_number':2852,'multiline':False]['text':' FEAT_MENU','line_number':2864,'multiline':False]['text':'
 * Function called when window closed.	Works like ":qa".
 * Should put up a requester!
 ','line_number':2868,'multiline':True]['text':'
     * Only deal with Client messages.
     ','line_number':2879,'multiline':True]['text':'
     * The WM_SAVE_YOURSELF event arrives when the window manager wants to
     * exit.  That can be cancelled though, thus Vim shouldn't exit here.
     * Just sync our swap files.
     ','line_number':2885,'multiline':True]['text':' preserve all swap files','line_number':2894,'multiline':False]['text':' Set the window's WM_COMMAND property, to let the window manager','line_number':2896,'multiline':False]['text':' know we are done saving ourselves.  We don't want to be restarted,','line_number':2897,'multiline':False]['text':' thus set argv to NULL.','line_number':2898,'multiline':False]['text':'
 * Function called when property changed. Check for incoming commands
 ','line_number':2911,'multiline':True]['text':'
 * Cursor blink functions.
 *
 * This is a simple state machine:
 * BLINK_NONE	not blinking at all
 * BLINK_OFF	blinking, cursor is not shown
 * BLINK_ON	blinking, cursor is shown
 ','line_number':2929,'multiline':True]['text':'
 * Stop the cursor blinking.  Show the cursor if it wasn't shown.
 ','line_number':2968,'multiline':True]['text':'
 * Start the cursor blinking.  If it was already blinking, this restarts the
 * waiting time and shows the cursor.
 ','line_number':3005,'multiline':True]['text':' Only switch blinking on if none of the times is zero','line_number':3014,'multiline':False]['text':'
 * Return the RGB value of a pixel as a long.
 ','line_number':3024,'multiline':True]['text':'
 * Add the callback functions.
 ','line_number':3041,'multiline':True]['text':'
     * Only install these enter/leave callbacks when 'p' in 'guioptions'.
     * Only needed for some window managers.
     ','line_number':3058,'multiline':True]['text':' get pointer moved events from scrollbar, needed for 'mousefocus'','line_number':3079,'multiline':False]['text':'
 * Get current mouse coordinates in text window.
 ','line_number':3087,'multiline':True]['text':' Signs are currently always 2 chars wide.  Hopefully the font is big enough','line_number':3127,'multiline':False]['text':' to provide room for the bitmap!','line_number':3128,'multiline':False]['text':'
     * Setup the color substitution table.
     ','line_number':3154,'multiline':True]['text':' Sign width is fixed at two columns now.','line_number':3176,'multiline':False]['text':' if (sign->width > gui.sign_width)','line_number':3177,'multiline':False]['text':'     gui.sign_width = sign->width + 8;','line_number':3178,'multiline':False]['text':' The last set mouse pointer shape is remembered, to be used when it goes','line_number':3196,'multiline':False]['text':' from hidden to not hidden.','line_number':3197,'multiline':False]['text':'
 * Use the blank mouse pointer or not.
 ','line_number':3201,'multiline':True]['text':' TRUE = use blank ptr, FALSE = use parent ptr','line_number':3206,'multiline':False]['text':' Table for shape IDs.  Keep in sync with the mshape_names[] table in','line_number':3224,'multiline':False]['text':' misc2.c!','line_number':3225,'multiline':False]['text':' arrow','line_number':3228,'multiline':False]['text':' blank','line_number':3229,'multiline':False]['text':' beam','line_number':3230,'multiline':False]['text':' updown','line_number':3231,'multiline':False]['text':' udsizing','line_number':3232,'multiline':False]['text':' leftright','line_number':3233,'multiline':False]['text':' lrsizing','line_number':3234,'multiline':False]['text':' busy','line_number':3235,'multiline':False]['text':' no','line_number':3236,'multiline':False]['text':' crosshair','line_number':3237,'multiline':False]['text':' hand1','line_number':3238,'multiline':False]['text':' hand2','line_number':3239,'multiline':False]['text':' pencil','line_number':3240,'multiline':False]['text':' question','line_number':3241,'multiline':False]['text':' right-arrow','line_number':3242,'multiline':False]['text':' up-arrow','line_number':3243,'multiline':False]['text':' last one','line_number':3244,'multiline':False]['text':' they are always even (why?)','line_number':3265,'multiline':False]['text':'
 * Set the balloon-eval used for the tooltip of a toolbar menu item.
 * The check for a non-toolbar item was added, because there is a crash when
 * passing a normal menu item here.  Can't explain that, but better avoid it.
 ','line_number':3278,'multiline':True]['text':' Always destroy and create the balloon, in case the string was','line_number':3290,'multiline':False]['text':' changed.','line_number':3291,'multiline':False]