['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * insexpand.c: functions for Insert mode completion
 ','line_number':10,'multiline':True]['text':'
 * Definitions used for CTRL-X submode.
 * Note: If you change CTRL-X submode, you must also maintain ctrl_x_msgs[] and
 * ctrl_x_mode_names[] below.
 ','line_number':16,'multiline':True]['text':' CTRL-N CTRL-P completion, default','line_number':23,'multiline':False]['text':' only used in "ctrl_x_msgs"','line_number':38,'multiline':False]['text':' for builtin function complete()','line_number':39,'multiline':False]['text':' CTRL-X typed in CTRL_X_CMDLINE','line_number':40,'multiline':False]['text':' Message for CTRL-X mode, index is ctrl_x_mode.','line_number':44,'multiline':False]['text':' CTRL_X_NORMAL, ^P/^N compl.','line_number':47,'multiline':False]['text':' CTRL_X_SCROLL: depends on state','line_number':49,'multiline':False]['text':' CTRL_X_FINISHED','line_number':55,'multiline':False]['text':' CTRL_X_EVAL doesn't use msg.','line_number':63,'multiline':False]['text':' CTRL_X_FINISHED','line_number':77,'multiline':False]['text':' CTRL_X_LOCAL_MSG only used in "ctrl_x_msgs"','line_number':84,'multiline':False]['text':'
 * Array indexes used for cp_text[].
 ','line_number':90,'multiline':True]['text':' "abbr"','line_number':93,'multiline':False]['text':' "menu"','line_number':94,'multiline':False]['text':' "kind"','line_number':95,'multiline':False]['text':' "info"','line_number':96,'multiline':False]['text':' Number of entries','line_number':97,'multiline':False]['text':'
 * Structure used to store one match for insert completion.
 ','line_number':99,'multiline':True]['text':' matched text','line_number':107,'multiline':False]['text':' text for the menu','line_number':108,'multiline':False]['text':' file containing the match, allocated when','line_number':112,'multiline':False]['text':' cp_flags has CP_FREE_FNAME','line_number':113,'multiline':False]['text':' CP_ values','line_number':114,'multiline':False]['text':' sequence number','line_number':115,'multiline':False]['text':' values for cp_flags','line_number':118,'multiline':False]['text':' the original text when the expansion begun','line_number':119,'multiline':False]['text':' cp_fname is allocated','line_number':120,'multiline':False]['text':' use CONT_S_IPOS for compl_cont_status','line_number':121,'multiline':False]['text':' ins_compl_equal() always returns TRUE','line_number':122,'multiline':False]['text':' ins_compl_equal() ignores case','line_number':123,'multiline':False]['text':' use fast_breakcheck instead of ui_breakcheck','line_number':124,'multiline':False]['text':'
 * All the current matches are stored in a list.
 * "compl_first_match" points to the start of the list.
 * "compl_curr_match" points to the currently selected entry.
 * "compl_shown_match" is different from compl_curr_match during
 * ins_compl_get_exp().
 * "compl_old_match" points to previous "compl_curr_match".
 ','line_number':126,'multiline':True]['text':' After using a cursor key <Enter> selects a match in the popup menu,','line_number':139,'multiline':False]['text':' otherwise it inserts a line break.','line_number':140,'multiline':False]['text':' When "compl_leader" is not NULL only matches that start with this string','line_number':143,'multiline':False]['text':' are used.','line_number':144,'multiline':False]['text':' put longest common string','line_number':147,'multiline':False]['text':' in compl_leader','line_number':148,'multiline':False]['text':' FALSE: select & insert','line_number':150,'multiline':False]['text':' TRUE: noinsert','line_number':151,'multiline':False]['text':' FALSE: select & insert','line_number':152,'multiline':False]['text':' TRUE: noselect','line_number':153,'multiline':False]['text':' FALSE: insert full match','line_number':154,'multiline':False]['text':' TRUE: insert longest prefix','line_number':155,'multiline':False]['text':' Selected one of the matches.  When FALSE the match was edited or using the','line_number':157,'multiline':False]['text':' longest common string.','line_number':158,'multiline':False]['text':' didn't finish finding completions.','line_number':161,'multiline':False]['text':' Set when character typed while looking for matches and it means we should','line_number':164,'multiline':False]['text':' stop looking for matches.','line_number':165,'multiline':False]['text':' don't insert match','line_number':168,'multiline':False]['text':' When the first completion is done "compl_started" is set.  When it's','line_number':170,'multiline':False]['text':' FALSE the word to be completed must be located.','line_number':171,'multiline':False]['text':' Which Ctrl-X mode are we in?','line_number':174,'multiline':False]['text':' number of completion matches','line_number':177,'multiline':False]['text':' > 1 for postponed CTRL-N','line_number':181,'multiline':False]['text':' Length in bytes of the text being completed (this is deleted to be replaced','line_number':183,'multiline':False]['text':' by the match.)','line_number':184,'multiline':False]['text':' column where the text starts','line_number':186,'multiline':False]['text':' that is being completed','line_number':187,'multiline':False]['text':' text as it was before','line_number':188,'multiline':False]['text':' completion started','line_number':189,'multiline':False]['text':' List of flags for method of completion.','line_number':193,'multiline':False]['text':' "normal" or "adding" expansion','line_number':195,'multiline':False]['text':' a ^X interrupted the current expansion','line_number':196,'multiline':False]['text':' it's set only iff N_ADDS is set','line_number':197,'multiline':False]['text':' next ^X<> will add-new or expand-current','line_number':198,'multiline':False]['text':' next ^X<> will set initial_pos?','line_number':199,'multiline':False]['text':' if so, word-wise-expansion will set SOL','line_number':200,'multiline':False]['text':' pattern includes start of line, just for','line_number':201,'multiline':False]['text':' word-wise expansion, not set for ^X^L','line_number':202,'multiline':False]['text':' for ctrl_x_mode 0, ^X^P/^X^N do a local','line_number':203,'multiline':False]['text':' expansion, (eg use complete=.)','line_number':204,'multiline':False]['text':' length of located bad word','line_number':233,'multiline':False]['text':'
 * CTRL-X pressed in Insert mode.
 ','line_number':236,'multiline':True]['text':' if the next ^X<> won't ADD nothing, then reset compl_cont_status','line_number':244,'multiline':False]['text':' We're not sure which CTRL-X mode it will be yet','line_number':249,'multiline':False]['text':' CTRL-X in CTRL-X CTRL-V mode behaves differently to make CTRL-X','line_number':256,'multiline':False]['text':' CTRL-V look like CTRL-N','line_number':257,'multiline':False]['text':'
 * Functions to check the current CTRL-X mode.
 ','line_number':263,'multiline':True]['text':'
 * Whether other than default completion has been selected.
 ','line_number':300,'multiline':True]['text':'
 * Whether CTRL-X was typed without a following character,
 * not including when in CTRL-X CTRL-V mode.
 ','line_number':309,'multiline':True]['text':'
 * Return TRUE if currently in "normal" or "adding" insert completion matches
 * state
 ','line_number':319,'multiline':True]['text':'
 * Return TRUE if the completion pattern includes start of line, just for
 * word-wise expansion.
 ','line_number':329,'multiline':True]['text':'
 * Return TRUE if ^X^P/^X^N will do a local completion (i.e. use complete=.)
 ','line_number':339,'multiline':True]['text':'
 * Clear the completion status flags
 ','line_number':348,'multiline':True]['text':'
 * Return TRUE if completion is using the forward direction matches
 ','line_number':357,'multiline':True]['text':'
 * Return TRUE if currently showing forward completion matches
 ','line_number':366,'multiline':True]['text':'
 * Return TRUE if currently showing backward completion matches
 ','line_number':375,'multiline':True]['text':'
 * Return TRUE if the 'dictionary' or 'thesaurus' option can be used.
 ','line_number':384,'multiline':True]['text':'
 * Is the character "c" a valid key to go to or keep us in CTRL-X mode?
 * This depends on the current mode.
 ','line_number':421,'multiline':True]['text':' Always allow ^R - let its results then be checked','line_number':428,'multiline':False]['text':' Accept <PageUp> and <PageDown> if the popup menu is visible.','line_number':432,'multiline':False]['text':' Not in any CTRL-X mode','line_number':438,'multiline':False]['text':'
 * Return TRUE if "match" is the original text when the completion began.
 ','line_number':485,'multiline':True]['text':'
 * Returns TRUE if "match" is the first match in the completion list.
 ','line_number':494,'multiline':True]['text':'
 * Return TRUE when character "c" is part of the item currently being
 * completed.  Used to decide whether to abandon complete mode when the menu
 * is visible.
 ','line_number':503,'multiline':True]['text':' When expanding an identifier only accept identifier chars.','line_number':512,'multiline':False]['text':' When expanding file name only accept file name chars. But not','line_number':518,'multiline':False]['text':' path separators, so that "proto/<Tab>" expands files in','line_number':519,'multiline':False]['text':' "proto", not "proto/" as a whole','line_number':520,'multiline':False]['text':' Command line and Omni completion can work with just about any','line_number':526,'multiline':False]['text':' printable character, but do stop at white space.','line_number':527,'multiline':False]['text':' For while line completion a space can be part of the line.','line_number':531,'multiline':False]['text':'
 * Get the completed text by inferring the case of the originally typed text.
 * If the result is in allocated memory "tofree" is set to it.
 ','line_number':537,'multiline':True]['text':' Wide character array.','line_number':549,'multiline':False]['text':' Allocate wide character array for the completion and fill it.','line_number':558,'multiline':False]['text':' Rule 1: Were any chars converted to lower?','line_number':570,'multiline':False]['text':' Rule 1 is satisfied.','line_number':583,'multiline':False]['text':' Rule 2: No lower case, 2nd consecutive letter converted to','line_number':591,'multiline':False]['text':' upper case.','line_number':592,'multiline':False]['text':' Rule 2 is satisfied.','line_number':604,'multiline':False]['text':' Copy the original case of the part we typed.','line_number':613,'multiline':False]['text':' Generate encoding specific output from wide character array.','line_number':627,'multiline':False]['text':' Multi-byte characters can occupy up to five bytes more than','line_number':651,'multiline':False]['text':' ASCII characters, and we also need one byte for NUL, so when','line_number':652,'multiline':False]['text':' getting to six bytes from the edge of IObuff switch to using a','line_number':653,'multiline':False]['text':' growarray.  Add the character in the next round.','line_number':654,'multiline':False]['text':'
 * This is like ins_compl_add(), but if 'ic' and 'inf' are set, then the
 * case of the originally typed text is used, and the case of the completed
 * text is inferred, ie this tries to work out what case you probably wanted
 * the rest of the word to be in -- webb
 ','line_number':678,'multiline':True]['text':' next ^X<> will set initial_pos','line_number':691,'multiline':False]['text':' count multi-byte characters','line_number':695,'multiline':False]['text':' Infer case of completed part.','line_number':704,'multiline':False]['text':' Find actual length of completion.','line_number':706,'multiline':False]['text':' Find actual length of original text.','line_number':720,'multiline':False]['text':' "char_len" may be smaller than "compl_char_len" when using','line_number':734,'multiline':False]['text':' thesaurus, only use the minimum when comparing.','line_number':735,'multiline':False]['text':'
 * Add a match to the list of matches. The arguments are:
 *     str       - text of the match to add
 *     len       - length of "str". If -1, then the length of "str" is
 *		   computed.
 *     fname     - file name to associate with this match.
 *     cptext    - list of strings to use with this match (for abbr, menu, info
 *		   and kind)
 *     user_data - user supplied data (any vim type) for this match
 *     cdir	 - match direction. If 0, use "compl_direction".
 *     flags_arg - match flags (cp_flags)
 *     adup	 - accept this match even if it is already present.
 * If "cdir" is FORWARD, then the match is added after the current match.
 * Otherwise, it is added before the current match.
 *
 * If the given string is already in the list of completions, then return
 * NOTDONE, otherwise add it to the list and return OK.  If there is an error,
 * maybe because alloc() returns NULL, then FAIL is returned.
 ','line_number':751,'multiline':True]['text':' extra text for popup menu or NULL','line_number':775,'multiline':False]['text':' "user_data" entry or NULL','line_number':776,'multiline':False]['text':' accept duplicate match','line_number':779,'multiline':False]['text':' If the same match is already present, don't add it.','line_number':794,'multiline':False]['text':' Remove any popup menu before changing the list of matches.','line_number':809,'multiline':False]['text':' Allocate a new match structure.','line_number':812,'multiline':False]['text':' Copy the values to the new match structure.','line_number':813,'multiline':False]['text':' match-fname is:','line_number':826,'multiline':False]['text':' - compl_curr_match->cp_fname if it is a string equal to fname.','line_number':827,'multiline':False]['text':' - a copy of fname, CP_FREE_FNAME is set to free later THE allocated mem.','line_number':828,'multiline':False]['text':' - NULL otherwise.	--Acevedo','line_number':829,'multiline':False]['text':' Link the new match structure after (FORWARD) or before (BACKWARD) the','line_number':857,'multiline':False]['text':' current match in the list of matches .','line_number':858,'multiline':False]['text':' BACKWARD','line_number':866,'multiline':False]['text':' if there's nothing before, it is the first match','line_number':875,'multiline':False]['text':' Find the longest common string if still doing that.','line_number':879,'multiline':False]['text':'
 * Return TRUE if "str[len]" matches with match->cp_str, considering
 * match->cp_flags.
 ','line_number':886,'multiline':True]['text':'
 * Reduce the longest common string for match "match".
 ','line_number':900,'multiline':True]['text':' First match, use it as a whole.','line_number':912,'multiline':False]['text':' When the match isn't there (to avoid matching itself) remove it','line_number':922,'multiline':False]['text':' again after redrawing.','line_number':923,'multiline':False]['text':' Reduce the text if this match differs from compl_leader.','line_number':931,'multiline':False]['text':' Leader was shortened, need to change the inserted text.','line_number':963,'multiline':False]['text':' When the match isn't there (to avoid matching itself) remove it','line_number':970,'multiline':False]['text':' again after redrawing.','line_number':971,'multiline':False]['text':'
 * Add an array of matches to the list of matches.
 * Frees matches[].
 ','line_number':979,'multiline':True]['text':' if dir was BACKWARD then honor it just once','line_number':996,'multiline':False]['text':'
 * Make the completion list cyclic.
 * Return the number of matches (excluding the original).
 ','line_number':1001,'multiline':True]['text':' Find the end of the list.','line_number':1014,'multiline':False]['text':' there's always an entry for the compl_orig_text, it doesn't count.','line_number':1016,'multiline':False]['text':'
 * Return whether there currently is a shown match.
 ','line_number':1028,'multiline':True]['text':'
 * Return whether the shown match is long enough.
 ','line_number':1038,'multiline':True]['text':'
 * Set variables that store noselect and noinsert behavior from the
 * 'completeopt' value.
 ','line_number':1048,'multiline':True]['text':' "compl_match_array" points the currently displayed list of entries in the','line_number':1067,'multiline':False]['text':' popup menu.  It is NULL when there is no popup menu.','line_number':1068,'multiline':False]['text':'
 * Update the screen and when there is any scrolling remove the popup menu.
 ','line_number':1072,'multiline':True]['text':' Update the screen later, before drawing the popup menu over it.','line_number':1084,'multiline':False]['text':'
 * Remove any popup menu.
 ','line_number':1090,'multiline':True]['text':'
 * Return TRUE if the popup menu should be displayed.
 ','line_number':1103,'multiline':True]['text':' 'completeopt' must contain "menu" or "menuone"','line_number':1109,'multiline':False]['text':' The display looks bad on a B&W display.','line_number':1113,'multiline':False]['text':'
 * Return TRUE if there are two or more matches to be shown in the popup menu.
 * One if 'completopt' contains "menuone".
 ','line_number':1123,'multiline':True]['text':' Don't display the popup menu if there are no matches or there is only','line_number':1133,'multiline':False]['text':' one (ignoring the original text).','line_number':1134,'multiline':False]['text':'
 * Allocate Dict for the completed item.
 * { word, abbr, menu, kind, info }
 ','line_number':1150,'multiline':True]['text':'
 * Trigger the CompleteChanged autocmd event. Invoked each time the Insert mode
 * completion menu is changed.
 ','line_number':1175,'multiline':True]['text':'
 * Build a popup menu to show the completion matches.
 * Returns the popup menu entry that should be selected. Returns -1 if nothing
 * should be selected.
 ','line_number':1211,'multiline':True]['text':' Need to build the popup menu list.','line_number':1227,'multiline':False]['text':' If the current match is the original text don't find the first','line_number':1249,'multiline':False]['text':' match after it, don't highlight anything.','line_number':1250,'multiline':False]['text':' This item is the shown match or this is the','line_number':1266,'multiline':False]['text':' first displayed item after the shown match.','line_number':1267,'multiline':False]['text':' Remember this displayed match for when the','line_number':1273,'multiline':False]['text':' shown match is just below it.','line_number':1274,'multiline':False]['text':' When the original text is the shown match don't set','line_number':1297,'multiline':False]['text':' compl_shown_match.','line_number':1298,'multiline':False]['text':' The shown match isn't displayed, set it to the','line_number':1304,'multiline':False]['text':' previously displayed match.','line_number':1305,'multiline':False]['text':' no displayed match at all','line_number':1313,'multiline':False]['text':'
 * Show the popup menu for the list of matches.
 * Also adjusts "compl_shown_match" to an entry that is actually displayed.
 ','line_number':1319,'multiline':True]['text':' Update the screen later, before drawing the popup menu over it.','line_number':1333,'multiline':False]['text':' Need to build the popup menu list.','line_number':1337,'multiline':False]['text':' popup menu already exists, only need to find the current item.','line_number':1341,'multiline':False]['text':' In Replace mode when a $ is displayed at the end of the line only','line_number':1355,'multiline':False]['text':' part of the screen would be updated.  We do need to redraw here.','line_number':1356,'multiline':False]['text':' Compute the screen column of the start of the completed text.','line_number':1359,'multiline':False]['text':' Use the cursor to get all wrapping and other settings right.','line_number':1360,'multiline':False]['text':' use just first element in "dict"','line_number':1372,'multiline':False]['text':' "dict" is the exact name of a file','line_number':1373,'multiline':False]['text':'
 * Add any identifiers that match the given pattern "pat" in the list of
 * dictionary files "dict_start" to the list of completions.
 ','line_number':1375,'multiline':True]['text':' DICT_FIRST and/or DICT_EXACT','line_number':1383,'multiline':False]['text':' Thesaurus completion','line_number':1384,'multiline':False]['text':' When 'dictionary' is empty and spell checking is enabled use','line_number':1398,'multiline':False]['text':' "spell".','line_number':1399,'multiline':False]['text':' so that we can goto theend','line_number':1410,'multiline':False]['text':' If 'infercase' is set, don't use 'smartcase' here','line_number':1412,'multiline':False]['text':' When invoked to match whole lines for CTRL-X CTRL-L adjust the pattern','line_number':1417,'multiline':False]['text':' to only match at the start of a line.  Otherwise just match the','line_number':1418,'multiline':False]['text':' pattern. Also need to double backslashes.','line_number':1419,'multiline':False]['text':' ignore case depends on 'ignorecase', 'smartcase' and "pat"','line_number':1446,'multiline':False]['text':' copy one dictionary file name into buf','line_number':1450,'multiline':False]['text':' Expand wildcards in the dictionary name, but do not allow','line_number':1458,'multiline':False]['text':' backticks (for security, the 'dict' option may have been set in','line_number':1459,'multiline':False]['text':' a modeline).','line_number':1460,'multiline':False]['text':' Complete from active spelling.  Skip "\<" in the pattern, we','line_number':1476,'multiline':False]['text':' don't use it as a RE.','line_number':1477,'multiline':False]['text':' avoid warning for using "files" uninit','line_number':1486,'multiline':False]['text':'
 * Add all the words in the line "*buf_arg" from the thesaurus file "fname"
 * skipping the word at 'skip_word'.  Returns OK on success.
 ','line_number':1503,'multiline':True]['text':' Add the other matches on the line','line_number':1518,'multiline':False]['text':' Find start of the next word.  Skip white','line_number':1522,'multiline':False]['text':' space and punctuation.','line_number':1523,'multiline':False]['text':' Find end of the word.','line_number':1529,'multiline':False]['text':' Japanese words may have characters in','line_number':1531,'multiline':False]['text':' different classes, only separate words','line_number':1532,'multiline':False]['text':' with single-byte non-word characters.','line_number':1533,'multiline':False]['text':' Add the word. Skip the regexp match.','line_number':1545,'multiline':False]['text':'
 * Process "count" dictionary/thesaurus "files" and add the text matching
 * "regmatch".
 ','line_number':1559,'multiline':True]['text':' open dictionary file','line_number':1580,'multiline':False]['text':' reset in msg_trunc_attr()','line_number':1583,'multiline':False]['text':' Read dictionary file line by line.','line_number':1592,'multiline':False]['text':' Check each line for a match.','line_number':1593,'multiline':False]['text':' For a thesaurus, add all the words in the line','line_number':1609,'multiline':False]['text':' if dir was BACKWARD then honor it just once','line_number':1615,'multiline':False]['text':' avoid expensive call to vim_regexec() when at end','line_number':1619,'multiline':False]['text':' of line','line_number':1620,'multiline':False]['text':'
 * Find the start of the next word.
 * Returns a pointer to the first char of the word.  Also stops at a NUL.
 ','line_number':1631,'multiline':True]['text':'
 * Find the end of the word.  Assumes it starts inside a word.
 * Returns a pointer to just after the word.
 ','line_number':1647,'multiline':True]['text':'
 * Find the end of the line, omitting CR and NL at the end.
 * Returns a pointer to just after the line.
 ','line_number':1673,'multiline':True]['text':'
 * Free the list of completions
 ','line_number':1688,'multiline':True]['text':' several entries may use the same fname, free it just once.','line_number':1712,'multiline':False]['text':'
 * Reset/clear the completion state.
 ','line_number':1727,'multiline':True]['text':' clear v:completed_item','line_number':1742,'multiline':False]['text':'
 * Return TRUE when Insert completion is active.
 ','line_number':1747,'multiline':True]['text':'
 * Selected one of the matches.  When FALSE the match was edited or using the
 * longest common string.
 ','line_number':1756,'multiline':True]['text':'
 * Initialize get longest common string.
 ','line_number':1766,'multiline':True]['text':'
 * Returns TRUE when insert completion is interrupted.
 ','line_number':1775,'multiline':True]['text':'
 * Returns TRUE if the <Enter> key selects a match in the completion popup
 * menu.
 ','line_number':1784,'multiline':True]['text':'
 * Return the column where the text starts that is being completed
 ','line_number':1794,'multiline':True]['text':'
 * Return the length in bytes of the text being completed
 ','line_number':1803,'multiline':True]['text':'
 * Delete one character before the cursor and show the subset of the matches
 * that match the word that is now before the cursor.
 * Returns the character to be used, NUL if the work is done and another char
 * to be got from the user.
 ','line_number':1812,'multiline':True]['text':' Stop completion when the whole word was deleted.  For Omni completion','line_number':1828,'multiline':False]['text':' allow the word to be deleted, we won't match everything.','line_number':1829,'multiline':False]['text':' Respect the 'backspace' option.','line_number':1830,'multiline':False]['text':' Deleted more than what was used to find matches or didn't finish','line_number':1838,'multiline':False]['text':' finding all matches: need to look for matches all over again.','line_number':1839,'multiline':False]['text':' Make sure current match is not a hidden item.','line_number':1851,'multiline':False]['text':'
 * Return TRUE when we need to find matches again, ins_compl_restart() is to
 * be called.
 ','line_number':1856,'multiline':True]['text':' Return TRUE if we didn't complete finding matches or when the','line_number':1863,'multiline':False]['text':' 'completefunc' returned "always" in the "refresh" dictionary item.','line_number':1864,'multiline':False]['text':'
 * Called after changing "compl_leader".
 * Show the popup menu with a different set of matches.
 * May also search for matches again if the previous search was interrupted.
 ','line_number':1870,'multiline':True]['text':' need to redetect bad word','line_number':1888,'multiline':False]['text':' Matches were cleared, need to search for them now.  Before drawing','line_number':1890,'multiline':False]['text':' the popup menu display the changed text before the cursor.  Set','line_number':1891,'multiline':False]['text':' "compl_restarting" to avoid that the first match is inserted.','line_number':1892,'multiline':False]['text':' Show the cursor after the match, not after the redrawn text.','line_number':1897,'multiline':False]['text':' Show the popup menu with a different set of matches.','line_number':1910,'multiline':False]['text':' Don't let Enter select the original text when there is no popup menu.','line_number':1913,'multiline':False]['text':'
 * Return the length of the completion, from the completion start column to
 * the cursor column.  Making sure it never goes below zero.
 ','line_number':1918,'multiline':True]['text':'
 * Append one character to the match leader.  May reduce the number of
 * matches.
 ','line_number':1932,'multiline':True]['text':' If we didn't complete finding matches we must search again.','line_number':1960,'multiline':False]['text':' When 'always' is set, don't reset compl_leader. While completing,','line_number':1964,'multiline':False]['text':' cursor doesn't point original position, changing compl_leader would','line_number':1965,'multiline':False]['text':' break redo.','line_number':1966,'multiline':False]['text':'
 * Setup for finding completions again without leaving CTRL-X mode.  Used when
 * BS or a key was typed while still searching for matches.
 ','line_number':1977,'multiline':True]['text':'
 * Set the first match, the original text.
 ','line_number':1991,'multiline':True]['text':' Replace the original text entry.','line_number':1999,'multiline':False]['text':' The CP_ORIGINAL_TEXT flag is either at the first item or might possibly','line_number':2000,'multiline':False]['text':' be at the last item for backward completion','line_number':2001,'multiline':False]['text':' safety check','line_number':2002,'multiline':False]['text':'
 * Append one character to the match leader.  May reduce the number of
 * matches.
 ','line_number':2023,'multiline':True]['text':' the match is too short','line_number':2036,'multiline':False]['text':' When still at the original match use the first entry that matches','line_number':2038,'multiline':False]['text':' the leader.','line_number':2039,'multiline':False]['text':'
 * Set the CTRL-X completion mode based on the key "c" typed after a CTRL-X.
 * Uses the global variables: ctrl_x_mode, edit_submode, edit_submode_pre,
 * compl_cont_mode and compl_cont_status.
 * Returns TRUE when the character is not to be inserted.
 ','line_number':2063,'multiline':True]['text':' scroll the window one line up or down','line_number':2078,'multiline':False]['text':' complete whole line','line_number':2088,'multiline':False]['text':' complete filenames','line_number':2092,'multiline':False]['text':' complete words from a dictionary','line_number':2096,'multiline':False]['text':' Register insertion without exiting CTRL-X mode','line_number':2100,'multiline':False]['text':' Simply allow ^R to happen without affecting ^X mode','line_number':2101,'multiline':False]['text':' complete words from a thesaurus','line_number':2104,'multiline':False]['text':' user defined completion','line_number':2109,'multiline':False]['text':' omni completion','line_number':2113,'multiline':False]['text':' complete spelling suggestions','line_number':2119,'multiline':False]['text':' Avoid getting the E756 error twice.','line_number':2122,'multiline':False]['text':' complete tag names','line_number':2128,'multiline':False]['text':' complete keywords from included files','line_number':2134,'multiline':False]['text':' complete definitions from included files','line_number':2138,'multiline':False]['text':' complete vim commands','line_number':2144,'multiline':False]['text':' stop completion','line_number':2148,'multiline':False]['text':' ^X^P means LOCAL expansion if nothing interrupted (eg we','line_number':2156,'multiline':False]['text':' just started ^X mode, or there were enough ^X's to cancel','line_number':2157,'multiline':False]['text':' the previous mode, say ^X^F^X^X^P or ^P^X^X^X^P, see below)','line_number':2158,'multiline':False]['text':' do normal expansion when interrupting a different mode (say','line_number':2159,'multiline':False]['text':' ^X^F^X^P or ^P^X^X^P, see below)','line_number':2160,'multiline':False]['text':' nothing changes if interrupting mode 0, (eg, the flag','line_number':2161,'multiline':False]['text':' doesn't change when going to ADDING mode  -- Acevedo','line_number':2162,'multiline':False]['text':' FALLTHROUGH','line_number':2167,'multiline':False]['text':' If we have typed at least 2 ^X's... for modes != 0, we set','line_number':2169,'multiline':False]['text':' compl_cont_status = 0 (eg, as if we had just started ^X','line_number':2170,'multiline':False]['text':' mode).','line_number':2171,'multiline':False]['text':' For mode 0, we set "compl_cont_mode" to an impossible','line_number':2172,'multiline':False]['text':' value, in both cases ^X^X can be used to restart the same','line_number':2173,'multiline':False]['text':' mode (avoiding ADDING mode).','line_number':2174,'multiline':False]['text':' Undocumented feature: In a mode != 0 ^X^P and ^X^X^P start','line_number':2175,'multiline':False]['text':' 'complete' and local ^P expansions respectively.','line_number':2176,'multiline':False]['text':' In mode 0 an extra ^X is needed since ^X^P goes to ADDING','line_number':2177,'multiline':False]['text':' mode  -- Acevedo','line_number':2178,'multiline':False]['text':'
 * Stop insert completion mode
 ','line_number':2195,'multiline':True]['text':' Get here when we have finished typing a sequence of ^N and','line_number':2204,'multiline':False]['text':' ^P or other completion characters in CTRL-X mode.  Free up','line_number':2205,'multiline':False]['text':' memory that was used, and make sure we can redo the insert.','line_number':2206,'multiline':False]['text':' If any of the original typed text has been changed, eg when','line_number':2209,'multiline':False]['text':' ignorecase is set, we must add back-spaces to the redo','line_number':2210,'multiline':False]['text':' buffer.  We add as few as necessary to delete just the part','line_number':2211,'multiline':False]['text':' of the original text that has changed.','line_number':2212,'multiline':False]['text':' When using the longest match, edited the match or used','line_number':2213,'multiline':False]['text':' CTRL-E then don't use the current match.','line_number':2214,'multiline':False]['text':' When completing whole lines: fix indent for 'cindent'.','line_number':2224,'multiline':False]['text':' Otherwise, break line if it's too long.','line_number':2225,'multiline':False]['text':' re-indent the current line','line_number':2228,'multiline':False]['text':' don't do it again','line_number':2232,'multiline':False]['text':' put the cursor on the last char, for 'tw' formatting','line_number':2239,'multiline':False]['text':' only format when something was inserted','line_number':2242,'multiline':False]['text':' If the popup menu is displayed pressing CTRL-Y means accepting','line_number':2250,'multiline':False]['text':' the selection without inserting anything.  When','line_number':2251,'multiline':False]['text':' compl_enter_selects is set the Enter key does the same.','line_number':2252,'multiline':False]['text':' CTRL-E means completion is Ended, go back to the typed text.','line_number':2258,'multiline':False]['text':' but only do this, if the Popup is still visible','line_number':2259,'multiline':False]['text':' Trigger the CompleteDonePre event to give scripts a chance to','line_number':2282,'multiline':False]['text':' act upon the completion before clearing the info, and restore','line_number':2283,'multiline':False]['text':' ctrl_x_mode, so that complete_info() can be used.','line_number':2284,'multiline':False]['text':' necessary for "noshowmode"','line_number':2292,'multiline':False]['text':' Avoid the popup menu remains displayed when leaving the','line_number':2302,'multiline':False]['text':' command line window.','line_number':2303,'multiline':False]['text':' Indent now if a key was typed that is in 'cinkeys'.','line_number':2305,'multiline':False]['text':' Trigger the CompleteDone event to give scripts a chance to act','line_number':2308,'multiline':False]['text':' upon the end of completion.','line_number':2309,'multiline':False]['text':'
 * Prepare for Insert mode completion, or stop it.
 * Called just after typing a character in Insert mode.
 * Returns TRUE when the character is not to be inserted;
 ','line_number':2315,'multiline':True]['text':' Forget any previous 'special' messages if this is actually','line_number':2326,'multiline':False]['text':' a ^X mode key - bar ^R, in which case we wait to see what it gives us.','line_number':2327,'multiline':False]['text':' Ignore end of Select mode mapping and mouse scroll/movement.','line_number':2331,'multiline':False]['text':' Ignore mouse events in a popup window','line_number':2338,'multiline':False]['text':' Ignore drag and release events, the position does not need to be in','line_number':2341,'multiline':False]['text':' the popup and it may have just closed.','line_number':2342,'multiline':False]['text':' Not starting another completion mode.','line_number':2372,'multiline':False]['text':' CTRL-X CTRL-Z should stop completion without inserting anything','line_number':2375,'multiline':False]['text':' Other CTRL-X keys first stop completion, then start another','line_number':2383,'multiline':False]['text':' completion mode.','line_number':2384,'multiline':False]['text':' Set "compl_get_longest" when finding the first matches.','line_number':2390,'multiline':False]['text':' We have just typed CTRL-X and aren't quite sure which CTRL-X mode','line_number':2400,'multiline':False]['text':' it will be yet.  Now we decide.','line_number':2401,'multiline':False]['text':' We're already in CTRL-X mode, do we stay in it?','line_number':2405,'multiline':False]['text':' Show error message from attempted keyword completion (probably','line_number':2419,'multiline':False]['text':' 'Pattern not found') until another key is hit, then go back to','line_number':2420,'multiline':False]['text':' showing what mode we are in.','line_number':2421,'multiline':False]['text':' Trigger the CompleteDone event to give scripts a chance to act','line_number':2429,'multiline':False]['text':' upon the (possibly failed) completion.','line_number':2430,'multiline':False]['text':' reset continue_* if we left expansion-mode, if we stay they'll be','line_number':2435,'multiline':False]['text':' (re)set properly in ins_complete()','line_number':2436,'multiline':False]['text':'
 * Fix the redo buffer for the completion leader replacing some of the typed
 * text.  This inserts backspaces and appends the changed text.
 * "ptr" is the known leader text or NUL.
 ','line_number':2446,'multiline':True]['text':' nothing to do','line_number':2463,'multiline':False]['text':'
 * Loops through the list of windows, loaded-buffers or non-loaded-buffers
 * (depending on flag) starting from buf and looking for a non-scanned
 * buffer (other than curbuf).	curbuf is special, if it is called with
 * buf=curbuf then it has to be the first call for a given flag/expansion.
 *
 * Returns the buffer to scan, if any, otherwise returns curbuf -- Acevedo
 ','line_number':2481,'multiline':True]['text':' just windows','line_number':2494,'multiline':False]['text':' first call for this flag/expansion or window was closed','line_number':2497,'multiline':False]['text':' 'b' (just loaded buffers), 'u' (just non-loaded buffers) or 'U'','line_number':2505,'multiline':False]['text':' (unlisted buffers)','line_number':2506,'multiline':False]['text':' When completing whole lines skip unloaded buffers.','line_number':2507,'multiline':False]['text':' 'completefunc' callback function','line_number':2521,'multiline':False]['text':' 'omnifunc' callback function','line_number':2522,'multiline':False]['text':' 'thesaurusfunc' callback function','line_number':2523,'multiline':False]['text':'
 * Copy a global callback function to a buffer local callback.
 ','line_number':2526,'multiline':True]['text':'
 * Parse the 'completefunc' option value and set the callback function.
 * Invoked when the 'completefunc' option is set. The option value can be a
 * name of a function (string), or function(<name>) or funcref(<name>) or a
 * lambda expression.
 ','line_number':2537,'multiline':True]['text':'
 * Copy the global 'completefunc' callback function to the buffer-local
 * 'completefunc' callback for "buf".
 ','line_number':2554,'multiline':True]['text':'
 * Parse the 'omnifunc' option value and set the callback function.
 * Invoked when the 'omnifunc' option is set. The option value can be a
 * name of a function (string), or function(<name>) or funcref(<name>) or a
 * lambda expression.
 ','line_number':2566,'multiline':True]['text':'
 * Copy the global 'omnifunc' callback function to the buffer-local 'omnifunc'
 * callback for "buf".
 ','line_number':2582,'multiline':True]['text':'
 * Parse the 'thesaurusfunc' option value and set the callback function.
 * Invoked when the 'thesaurusfunc' option is set. The option value can be a
 * name of a function (string), or function(<name>) or funcref(<name>) or a
 * lambda expression.
 ','line_number':2594,'multiline':True]['text':' buffer-local option set','line_number':2607,'multiline':False]['text':' global option set','line_number':2613,'multiline':False]['text':'
 * Mark the global 'completefunc' 'omnifunc' and 'thesaurusfunc' callbacks with
 * "copyID" so that they are not garbage collected.
 ','line_number':2620,'multiline':True]['text':'
 * Get the user-defined completion function name for completion "type"
 ','line_number':2636,'multiline':True]['text':'
 * Get the callback to use for insert mode completion.
 ','line_number':2655,'multiline':True]['text':' CTRL_X_THESAURUS','line_number':2665,'multiline':False]['text':'
 * Execute user defined complete function 'completefunc', 'omnifunc' or
 * 'thesaurusfunc', and get matches in "matches".
 * "type" is either CTRL_X_OMNI or CTRL_X_FUNCTION or CTRL_X_THESAURUS.
 ','line_number':2669,'multiline':True]['text':' Call 'completefunc' to obtain the list of matches.','line_number':2691,'multiline':False]['text':' Lock the text to avoid weird things from happening.  Also disallow','line_number':2699,'multiline':False]['text':' switching to another window, it should not be needed and may end up in','line_number':2700,'multiline':False]['text':' Insert mode in another buffer.','line_number':2701,'multiline':False]['text':' Call a function, which returns a list or dict.','line_number':2707,'multiline':False]['text':' FALLTHROUGH','line_number':2721,'multiline':False]['text':' TODO: Give error message?','line_number':2723,'multiline':False]['text':' restore the cursor position','line_number':2730,'multiline':False]['text':' Restore State, it might have been changed.','line_number':2744,'multiline':False]['text':' FEAT_COMPL_FUNC','line_number':2752,'multiline':False]['text':'
 * Add a match to the list of matches from a typeval_T.
 * If the given string is already in the list of completions, then return
 * NOTDONE, otherwise add it to the list and return OK.  If there is an error,
 * maybe because alloc() returns NULL, then FAIL is returned.
 * When "fast" is TRUE use fast_breakcheck() instead of ui_breakcheck().
 ','line_number':2755,'multiline':True]['text':'
 * Add completions from a list.
 ','line_number':2809,'multiline':True]['text':' Go through the List with matches and add each of them.','line_number':2818,'multiline':False]['text':' if dir was BACKWARD then honor it just once','line_number':2823,'multiline':False]['text':'
 * Add completions from a dict.
 ','line_number':2830,'multiline':True]['text':' Check for optional "refresh" item.','line_number':2839,'multiline':False]['text':' Add completions from a "words" list.','line_number':2850,'multiline':False]['text':'
 * Start completion for the complete() function.
 * "startcol" is where the matched text starts (1 is first column).
 * "list" is the list of matches.
 ','line_number':2856,'multiline':True]['text':' If already doing completions stop it.','line_number':2868,'multiline':False]['text':' compl_pattern doesn't need to be set','line_number':2880,'multiline':False]['text':' Down/Up has no real effect.','line_number':2903,'multiline':False]['text':' Lazily show the popup menu, unless we got interrupted.','line_number':2910,'multiline':False]['text':'
 * "complete()" function
 ','line_number':2917,'multiline':True]['text':' Check for undo allowed here, because if something was already inserted','line_number':2936,'multiline':False]['text':' the line was already saved for undo and this check isn't done.','line_number':2937,'multiline':False]['text':'
 * "complete_add()" function
 ','line_number':2949,'multiline':True]['text':'
 * "complete_check()" function
 ','line_number':2961,'multiline':True]['text':'
 * Return Insert completion mode name string
 ','line_number':2976,'multiline':True]['text':'
 * Assign the sequence number to all the completion matches which don't have
 * one assigned yet.
 ','line_number':2988,'multiline':True]['text':' Search backwards for the first valid (!= -1) number.','line_number':3000,'multiline':False]['text':' This should normally succeed already at the first loop','line_number':3001,'multiline':False]['text':' cycle, so it's fast!','line_number':3002,'multiline':False]['text':' go up and assign all numbers which are not assigned yet','line_number':3011,'multiline':False]['text':' BACKWARD','line_number':3017,'multiline':False]['text':' Search forwards (upwards) for the first valid (!= -1)','line_number':3019,'multiline':False]['text':' number.  This should normally succeed already at the','line_number':3020,'multiline':False]['text':' first loop cycle, so it's fast!','line_number':3021,'multiline':False]['text':' go down and assign all numbers which are not assigned yet','line_number':3030,'multiline':False]['text':' There are four cases to consider here:','line_number':3048,'multiline':False]['text':' 1) when just going forward through the menu,','line_number':3049,'multiline':False]['text':'    compl_first_match should point to the initial entry with','line_number':3050,'multiline':False]['text':'    number zero and CP_ORIGINAL_TEXT flag set','line_number':3051,'multiline':False]['text':' 2) when just going backwards,','line_number':3052,'multiline':False]['text':'    compl-first_match should point to the last entry before','line_number':3053,'multiline':False]['text':'    the entry with the CP_ORIGINAL_TEXT flag set','line_number':3054,'multiline':False]['text':' 3) when first going forwards and then backwards, e.g.','line_number':3055,'multiline':False]['text':'    pressing C-N, C-P, compl_first_match points to the','line_number':3056,'multiline':False]['text':'    last entry before the entry with the CP_ORIGINAL_TEXT','line_number':3057,'multiline':False]['text':'    flag set and next-entry moves opposite through the list','line_number':3058,'multiline':False]['text':'    compared to case 2, so pretend the direction is forward again','line_number':3059,'multiline':False]['text':' 4) when first going backwards and then forwards, e.g.','line_number':3060,'multiline':False]['text':'    pressing C-P, C-N, compl_first_match points to the','line_number':3061,'multiline':False]['text':'    first entry with the CP_ORIGINAL_TEXT','line_number':3062,'multiline':False]['text':'    flag set and next-entry moves in opposite direction through the list','line_number':3063,'multiline':False]['text':'    compared to case 1, so pretend the direction is backwards again','line_number':3064,'multiline':False]['text':'','line_number':3065,'multiline':False]['text':' But only do this when the 'noselect' option is not active!','line_number':3066,'multiline':False]['text':' Skip the element with the CP_ORIGINAL_TEXT flag at the beginning, in case of','line_number':3076,'multiline':False]['text':' forward completion, or at the end, in case of backward completion.','line_number':3077,'multiline':False]['text':' Add an empty string for backwards compatibility','line_number':3094,'multiline':False]['text':'
 * Get complete information
 ','line_number':3105,'multiline':True]['text':' TODO','line_number':3172,'multiline':False]['text':'
 * "complete_info()" function
 ','line_number':3176,'multiline':True]['text':'
 * Returns TRUE when using a user-defined function for thesaurus completion.
 ','line_number':3200,'multiline':True]['text':'
 * Return value of process_next_cpt_value()
 ','line_number':3214,'multiline':True]['text':'
 * state information used for getting the next set of insert completion
 * matches.
 ','line_number':3224,'multiline':True]['text':' copy of 'complete'','line_number':3230,'multiline':False]['text':' current entry in "e_cpt_copy"','line_number':3231,'multiline':False]['text':' buffer being scanned','line_number':3232,'multiline':False]['text':' current match position','line_number':3233,'multiline':False]['text':' previous match position','line_number':3234,'multiline':False]['text':' save first_match_pos/last_match_pos','line_number':3235,'multiline':False]['text':' first match position','line_number':3236,'multiline':False]['text':' last match position','line_number':3237,'multiline':False]['text':' found all matches of a certain type.','line_number':3238,'multiline':False]['text':' dictionary file to search','line_number':3239,'multiline':False]['text':' "dict" is an exact file name or not','line_number':3240,'multiline':False]['text':'
 * Process the next 'complete' option value in st->e_cpt.
 *
 * If successful, the arguments are set as below:
 *   st->cpt - pointer to the next option value in "st->cpt"
 *   compl_type_arg - type of insert mode completion to use
 *   st->found_all - all matches of this type are found
 *   st->ins_buf - search for completions in this buffer
 *   st->first_match_pos - position of the first completion match
 *   st->last_match_pos - position of the last completion match
 *   st->set_match_pos - TRUE if the first match position should be saved to
 *			    avoid loops after the search wraps around.
 *   st->dict - name of the dictionary or thesaurus file to search
 *   st->dict_f - flag specifying whether "dict" is an exact file name or not
 *
 * Returns INS_COMPL_CPT_OK if the next value is processed successfully.
 * Returns INS_COMPL_CPT_CONT to skip the current completion source matching
 * the "st->e_cpt" option value and process the next matching source.
 * Returns INS_COMPL_CPT_END if all the values in "st->e_cpt" are processed.
 ','line_number':3243,'multiline':True]['text':' Move the cursor back one character so that ^N can match the','line_number':3281,'multiline':False]['text':' word immediately after the cursor.','line_number':3282,'multiline':False]['text':' Move the cursor to after the last character in the','line_number':3285,'multiline':False]['text':' buffer, so that word at start of buffer is found','line_number':3286,'multiline':False]['text':' correctly.','line_number':3287,'multiline':False]['text':' Remember the first match so that the loop stops when we','line_number':3295,'multiline':False]['text':' wrap and come back there a second time.','line_number':3296,'multiline':False]['text':' Scan a buffer, but not the current one.','line_number':3303,'multiline':False]['text':' loaded buffer','line_number':3304,'multiline':False]['text':' unloaded buffer, scan like dictionary','line_number':3312,'multiline':False]['text':' reset in msg_trunc_attr()','line_number':3326,'multiline':False]['text':' reset in msg_trunc_attr()','line_number':3365,'multiline':False]['text':' in any case e_cpt is advanced to the next entry','line_number':3373,'multiline':False]['text':'
 * Get the next set of identifiers or defines matching "compl_pattern" in
 * included files.
 ','line_number':3387,'multiline':True]['text':'
 * Get the next set of words matching "compl_pattern" in dictionary or
 * thesaurus files.
 ','line_number':3403,'multiline':True]['text':'
 * Get the next set of tag names matching "compl_pattern".
 ','line_number':3425,'multiline':True]['text':' set p_ic according to p_ic, p_scs and pat for find_tags().','line_number':3435,'multiline':False]['text':' Find up to TAG_MANY matches.  Avoids that an enormous number','line_number':3439,'multiline':False]['text':' of matches is found when compl_pattern is empty','line_number':3440,'multiline':False]['text':'
 * Get the next set of filename matching "compl_pattern".
 ','line_number':3451,'multiline':True]['text':' May change home directory back to "~".','line_number':3464,'multiline':False]['text':'
 * Get the next set of command-line completions matching "compl_pattern".
 ','line_number':3489,'multiline':True]['text':'
 * Get the next set of spell suggestions matching "compl_pattern".
 ','line_number':3504,'multiline':True]['text':'
 * Return the next word or line from buffer "ins_buf" at position
 * "cur_match_pos" for completion.  The length of the match is set in "len".
 ','line_number':3522,'multiline':True]['text':' buffer being scanned','line_number':3528,'multiline':False]['text':' current match position','line_number':3529,'multiline':False]['text':' next ^X<> will set initial_pos','line_number':3531,'multiline':False]['text':' Skip if already inside a word.','line_number':3558,'multiline':False]['text':' Find start of next word.','line_number':3561,'multiline':False]['text':' Find end of this word.','line_number':3564,'multiline':False]['text':' Try next line, if any. the new word will be','line_number':3572,'multiline':False]['text':' "join" as if the normal command "J" was used.','line_number':3573,'multiline':False]['text':' IOSIZE is always greater than','line_number':3574,'multiline':False]['text':' compl_length, so the next STRNCPY always','line_number':3575,'multiline':False]['text':' works -- Acevedo','line_number':3576,'multiline':False]['text':' Find start of next word.','line_number':3580,'multiline':False]['text':' Find end of next word.','line_number':3582,'multiline':False]['text':' IObuf =~ "\k.* ", thus len >= 2','line_number':3590,'multiline':False]['text':' copy as much as possible of the new word','line_number':3599,'multiline':False]['text':'
 * Get the next set of words matching "compl_pattern" for default completion(s)
 * (normal ^P/^N and ^X^L).
 * Search for "compl_pattern" in the buffer "st->ins_buf" starting from the
 * position "st->start_pos" in the "compl_direction" direction. If
 * "st->set_match_pos" is TRUE, then set the "st->first_match_pos" and
 * "st->last_match_pos".
 * Returns OK if a new next match is found, otherwise returns FAIL.
 ','line_number':3618,'multiline':True]['text':' If 'infercase' is set, don't use 'smartcase' here','line_number':3637,'multiline':False]['text':'	Buffers other than curbuf are scanned from the beginning or the','line_number':3642,'multiline':False]['text':'	end but never from the middle, thus setting nowrapscan in this','line_number':3643,'multiline':False]['text':'	buffer is a good idea, on the other hand, we always set','line_number':3644,'multiline':False]['text':'	wrapscan for curbuf to avoid missing matches -- Acevedo,Webb','line_number':3645,'multiline':False]['text':' Don't want messages for wrapscan.','line_number':3656,'multiline':False]['text':' ctrl_x_mode_line_or_eval() || word-wise search that','line_number':3658,'multiline':False]['text':' has added a word that was at the beginning of the line','line_number':3659,'multiline':False]['text':' set "compl_started" even on fail','line_number':3670,'multiline':False]['text':' when ADDING, the text before the cursor matches, skip it','line_number':3705,'multiline':False]['text':'
 * get the next set of completion matches for "type".
 * Returns TRUE if a new match is found. Otherwise returns FALSE.
 ','line_number':3730,'multiline':True]['text':' normal ^P/^N and ^X^L','line_number':3780,'multiline':False]['text':' check if compl_curr_match has changed, (e.g. other type of','line_number':3786,'multiline':False]['text':' expansion added something)','line_number':3787,'multiline':False]['text':'
 * Get the next expansion(s), using "compl_pattern".
 * The search starts at position "ini" in curbuf and in the direction
 * compl_direction.
 * When "compl_started" is FALSE start at that position, otherwise continue
 * where we stopped searching before.
 * This may return before finding all the matches.
 * Return the total number of matches or -1 if still unknown -- Acevedo
 ','line_number':3794,'multiline':True]['text':' Make a copy of 'complete', in case the buffer is wiped out.','line_number':3826,'multiline':False]['text':' In case the buffer was wiped out.','line_number':3833,'multiline':False]['text':' remember the last current match','line_number':3835,'multiline':False]['text':' For ^N/^P loop over all the flags/windows/buffers in 'complete'.','line_number':3839,'multiline':False]['text':' For ^N/^P pick a new entry from e_cpt if compl_started is off,','line_number':3845,'multiline':False]['text':' or if found_all says this entry is done.  For ^X^L only use the','line_number':3846,'multiline':False]['text':' entries from 'complete' that look in loaded buffers.','line_number':3847,'multiline':False]['text':' If complete() was called then compl_pattern has been reset.  The','line_number':3859,'multiline':False]['text':' following won't work then, bail out.','line_number':3860,'multiline':False]['text':' get the next set of completion matches','line_number':3864,'multiline':False]['text':' break the loop for specialized modes (use 'complete' just for the','line_number':3867,'multiline':False]['text':' generic ctrl_x_mode == CTRL_X_NORMAL) or when we've found a new','line_number':3868,'multiline':False]['text':' match','line_number':3869,'multiline':False]['text':' Fill the popup menu as soon as possible.','line_number':3875,'multiline':False]['text':' Mark a buffer scanned when it has been scanned completely','line_number':3886,'multiline':False]['text':' Got to end of 'complete'','line_number':3896,'multiline':False]['text':' total of matches, unknown','line_number':3899,'multiline':False]['text':' If several matches were added (FORWARD) or the search failed and has','line_number':3906,'multiline':False]['text':' just been made cyclic then we have to move compl_curr_match to the','line_number':3907,'multiline':False]['text':' next or previous entry (if any) -- Acevedo','line_number':3908,'multiline':False]['text':'
 * Update "compl_shown_match" to the actually shown match, it may differ when
 * "compl_leader" is used to omit some of the matches.
 ','line_number':3919,'multiline':True]['text':' If we didn't find it searching forward, and compl_shows_dir is','line_number':3932,'multiline':False]['text':' backward, find the last match.','line_number':3933,'multiline':False]['text':'
 * Delete the old text being completed.
 ','line_number':3948,'multiline':True]['text':' In insert mode: Delete the typed part.','line_number':3956,'multiline':False]['text':' In replace mode: Put the old characters back, if any.','line_number':3957,'multiline':False]['text':' TODO: is this sufficient for redrawing?  Redrawing everything causes','line_number':3966,'multiline':False]['text':' flicker, thus we can't do that.','line_number':3967,'multiline':False]['text':' clear v:completed_item','line_number':3970,'multiline':False]['text':'
 * Insert the new text being completed.
 * "in_compl_func" is TRUE when called from complete_check().
 ','line_number':3975,'multiline':True]['text':' Make sure we don't go over the end of the string, this can happen with','line_number':3984,'multiline':False]['text':' illegal bytes.','line_number':3985,'multiline':False]['text':'
 * show the file name for the completion match (if any).  Truncate the file
 * name to avoid a wait for return.
 ','line_number':4003,'multiline':True]['text':' We need the tail that fits.  With double-byte encoding going','line_number':4018,'multiline':False]['text':' back from the end is very slow, thus go from the start and keep','line_number':4019,'multiline':False]['text':' the text that fits in "space" between "s" and "e".','line_number':4020,'multiline':False]['text':' don't overwrite!','line_number':4035,'multiline':False]['text':'
 * Find the next set of matches for completion. Repeat the completion "todo"
 * times.  The number of matches found is returned in 'num_matches'.
 *
 * If "allow_get_expansion" is TRUE, then ins_compl_get_exp() may be called to
 * get more completions. If it is FALSE, then do nothing when there are no more
 * completions in the given direction.
 *
 * If "advance" is TRUE, then completion will move to the first match.
 * Otherwise, the original text will be shown.
 *
 * Returns OK on success and -1 if the number of matches are unknown.
 ','line_number':4038,'multiline':True]['text':' repeat completion this many times','line_number':4054,'multiline':False]['text':' Find matches.','line_number':4099,'multiline':False]['text':' handle any pending completions','line_number':4102,'multiline':False]['text':' Remember a matching item.','line_number':4127,'multiline':False]['text':' Stop at the end of the list when we found a usable match.','line_number':4130,'multiline':False]['text':' use first usable match after wrapping around','line_number':4138,'multiline':False]['text':'
 * Fill in the next completion in the current direction.
 * If "allow_get_expansion" is TRUE, then we may call ins_compl_get_exp() to
 * get more completions.  If it is FALSE, then we just do nothing when there
 * are no more completions in a given direction.  The latter case is used when
 * we are still in the middle of finding completions, to allow browsing
 * through the ones found so far.
 * Return the total number of matches, or -1 if still unknown -- webb.
 *
 * compl_curr_match is currently being used by ins_compl_get_exp(), so we use
 * compl_shown_match here.
 *
 * Note that this function may be called recursively once only.  First with
 * "allow_get_expansion" TRUE, which calls ins_compl_get_exp(), which in turn
 * calls this function with "allow_get_expansion" FALSE.
 ','line_number':4145,'multiline':True]['text':' repeat completion this many times; should','line_number':4164,'multiline':False]['text':' be at least 1','line_number':4165,'multiline':False]['text':' Insert the newly selected match','line_number':4166,'multiline':False]['text':' called from complete_check()','line_number':4167,'multiline':False]['text':' When user complete function return -1 for findstart which is next','line_number':4175,'multiline':False]['text':' time of 'always', compl_shown_match become NULL.','line_number':4176,'multiline':False]['text':' Update "compl_shown_match" to the actually shown match','line_number':4181,'multiline':False]['text':' Delete old text to be replaced','line_number':4186,'multiline':False]['text':' When finding the longest common text we stick at the original text,','line_number':4189,'multiline':False]['text':' don't let CTRL-N or CTRL-P move to the first match.','line_number':4190,'multiline':False]['text':' When restarting the search don't insert the first match either.','line_number':4193,'multiline':False]['text':' Repeat this for when <PageUp> or <PageDown> is typed.  But don't wrap','line_number':4200,'multiline':False]['text':' around.','line_number':4201,'multiline':False]['text':' In case some completion function switched buffer, don't want to','line_number':4208,'multiline':False]['text':' insert the completion elsewhere.','line_number':4209,'multiline':False]['text':' Insert the text of the new completion, or the compl_leader.','line_number':4213,'multiline':False]['text':' may undisplay the popup menu first','line_number':4231,'multiline':False]['text':' Will display the popup menu, don't redraw yet to avoid flicker.','line_number':4235,'multiline':False]['text':' Not showing the popup menu yet, redraw to show the user what was','line_number':4238,'multiline':False]['text':' inserted.','line_number':4239,'multiline':False]['text':' display the updated popup menu','line_number':4242,'multiline':False]['text':' Show the cursor after the match, not after the redrawn text.','line_number':4247,'multiline':False]['text':' Delete old text to be replaced, since we're still searching and','line_number':4253,'multiline':False]['text':' don't want to match ourselves!','line_number':4254,'multiline':False]['text':' Enter will select a match when the match wasn't inserted and the popup','line_number':4258,'multiline':False]['text':' menu is visible.','line_number':4259,'multiline':False]['text':' Show the file name for the match (if any)','line_number':4265,'multiline':False]['text':'
 * Call this while finding completions, to check whether the user has hit a key
 * that should change the currently displayed completion, or exit completion
 * mode.  Also, when compl_pending is not zero, show a completion as soon as
 * possible. -- webb
 * "frequency" specifies out of how many calls we actually check.
 * "in_compl_func" is TRUE when called from complete_check(), don't set
 * compl_curr_match.
 ','line_number':4272,'multiline':True]['text':' Don't check when reading keys from a script, :normal or feedkeys().','line_number':4287,'multiline':False]['text':' That would break the test scripts.  But do check for keys when called','line_number':4288,'multiline':False]['text':' from complete_check().','line_number':4289,'multiline':False]['text':' Only do this at regular intervals','line_number':4293,'multiline':False]['text':' Check for a typed key.  Do use mappings, otherwise vim_is_ctrl_x_key()','line_number':4298,'multiline':False]['text':' can't do its work correctly.','line_number':4299,'multiline':False]['text':' Eat the character','line_number':4305,'multiline':False]['text':' Need to get the character to have KeyTyped set.  We'll put it','line_number':4312,'multiline':False]['text':' back with vungetc() below.  But skip K_IGNORE.','line_number':4313,'multiline':False]['text':' Don't interrupt completion when the character wasn't typed,','line_number':4317,'multiline':False]['text':' e.g., when doing @q to replay keys.','line_number':4318,'multiline':False]['text':'
 * Decide the direction of Insert mode complete from the key typed.
 * Returns BACKWARD or FORWARD.
 ','line_number':4335,'multiline':True]['text':'
 * Return TRUE for keys that are used for completion only when the popup menu
 * is visible.
 ','line_number':4348,'multiline':True]['text':'
 * Decide the number of completions to move forward.
 * Returns 1 for most keys, height of the popup menu for page-up/down keys.
 ','line_number':4360,'multiline':True]['text':' keep some context','line_number':4373,'multiline':False]['text':'
 * Return TRUE if completion with "c" should insert the match, FALSE if only
 * to change the currently selected completion.
 ','line_number':4379,'multiline':True]['text':'
 * Get the pattern, column and length for normal completion (CTRL-N CTRL-P
 * completion)
 * Sets the global variables: compl_col, compl_length and compl_pattern.
 * Uses the global variables: compl_cont_status and ctrl_x_mode
 ','line_number':4401,'multiline':True]['text':' we need up to 2 extra chars for the prefix','line_number':4431,'multiline':False]['text':' Match any word of at least two chars','line_number':4447,'multiline':False]['text':' Search the point of change class of multibyte character','line_number':4456,'multiline':False]['text':' or not a word single byte character backward.','line_number':4457,'multiline':False]['text':' Only match word with at least two chars -- webb','line_number':4481,'multiline':False]['text':' there's no need to call quote_meta,','line_number':4482,'multiline':False]['text':' alloc(7) is enough  -- Acevedo','line_number':4483,'multiline':False]['text':'
 * Get the pattern, column and length for whole line completion or for the
 * complete() function.
 * Sets the global variables: compl_col, compl_length and compl_pattern.
 ','line_number':4506,'multiline':True]['text':' cursor in indent: empty pattern','line_number':4516,'multiline':False]['text':'
 * Get the pattern, column and length for filename completion.
 * Sets the global variables: compl_col, compl_length and compl_pattern.
 ','line_number':4529,'multiline':True]['text':' Go back to just before the first filename character.','line_number':4536,'multiline':False]['text':'
 * Get the pattern, column and length for command-line completion.
 * Sets the global variables: compl_col, compl_length and compl_pattern.
 ','line_number':4559,'multiline':True]['text':' No completion possible, use an empty pattern to get a','line_number':4573,'multiline':False]['text':' "pattern not found" message.','line_number':4574,'multiline':False]['text':'
 * Get the pattern, column and length for user defined completion ('omnifunc',
 * 'completefunc' and 'thesaurusfunc')
 * Sets the global variables: compl_col, compl_length and compl_pattern.
 * Uses the global variable: spell_bad_len
 ','line_number':4583,'multiline':True]['text':' Call user defined function 'completefunc' with "a:findstart"','line_number':4595,'multiline':False]['text':' set to 1 to obtain the length of text to use for completion.','line_number':4596,'multiline':False]['text':' Call 'completefunc' or 'omnifunc' or 'thesaurusfunc' and get pattern','line_number':4605,'multiline':False]['text':' length as a string','line_number':4606,'multiline':False]['text':' restore the cursor position','line_number':4627,'multiline':False]['text':' Return value -2 means the user complete function wants to cancel the','line_number':4635,'multiline':False]['text':' complete without an error, do the same if the function did not execute','line_number':4636,'multiline':False]['text':' successfully.','line_number':4637,'multiline':False]['text':' Return value -3 does the same as -2 and leaves CTRL-X mode.','line_number':4640,'multiline':False]['text':' Reset extended parameters of completion, when starting new','line_number':4650,'multiline':False]['text':' completion.','line_number':4651,'multiline':False]['text':' Setup variables for completion.  Need to obtain "line" again,','line_number':4661,'multiline':False]['text':' it may have become invalid.','line_number':4662,'multiline':False]['text':'
 * Get the pattern, column and length for spell completion.
 * Sets the global variables: compl_col, compl_length and compl_pattern.
 * Uses the global variable: spell_bad_len
 ','line_number':4675,'multiline':True]['text':' Need to obtain "line" again, it may have become invalid.','line_number':4701,'multiline':False]['text':'
 * Get the completion pattern, column and length.
 * "startcol" - start column number of the completion pattern/text
 * "cur_col" - current cursor column
 * On return, "line_invalid" is set to TRUE, if the current line may have
 * become invalid and needs to be fetched again.
 * Returns OK on success.
 ','line_number':4713,'multiline':True]['text':' "line" may have become invalid','line_number':4747,'multiline':False]['text':' "line" may have become invalid','line_number':4753,'multiline':False]['text':'
 * Continue an interrupted completion mode search in "line".
 *
 * If this same ctrl_x_mode has been interrupted use the text from
 * "compl_startpos" to the cursor as a pattern to add a new word instead of
 * expand the one before the cursor, in word-wise if "compl_startpos" is not in
 * the same line as the cursor then fix it (the line has been split because it
 * was longer than 'tw').  if SOL is set then skip the previous pattern, a word
 * at the beginning of the line has been inserted, we'll look for that.
 ','line_number':4764,'multiline':True]['text':' it is a continued search','line_number':4777,'multiline':False]['text':' remove INTRPT','line_number':4778,'multiline':False]['text':' line (probably) wrapped, set compl_startpos to the','line_number':4784,'multiline':False]['text':' first non_blank in the line, if it is not a wordchar','line_number':4785,'multiline':False]['text':' include it to get a better pattern, but then we don't','line_number':4786,'multiline':False]['text':' want the "\\<" prefix, check it below','line_number':4787,'multiline':False]['text':' clear SOL if present','line_number':4791,'multiline':False]['text':' S_IPOS was set when we inserted a word that was at the','line_number':4795,'multiline':False]['text':' beginning of the line, which means that we'll go to SOL','line_number':4796,'multiline':False]['text':' mode but first we need to redefine compl_startpos','line_number':4797,'multiline':False]['text':' IObuff is used to add a "word from the next line" would we','line_number':4808,'multiline':False]['text':' have enough space?  just being paranoid','line_number':4809,'multiline':False]['text':'
 * start insert mode completion
 ','line_number':4827,'multiline':True]['text':' column where searched text starts','line_number':4834,'multiline':False]['text':' cursor column','line_number':4835,'multiline':False]['text':' First time we hit ^N or ^P (in a row, I mean)','line_number':4840,'multiline':False]['text':' this same ctrl-x_mode was interrupted previously. Continue the','line_number':4855,'multiline':False]['text':' completion.','line_number':4856,'multiline':False]['text':' normal expansion','line_number':4861,'multiline':False]['text':' Remove LOCAL if ctrl_x_mode != CTRL_X_NORMAL','line_number':4865,'multiline':False]['text':' Work out completion pattern and original text -- webb','line_number':4873,'multiline':False]['text':' restore did_ai, so that adding comment leader works','line_number':4878,'multiline':False]['text':' If "line" was changed while getting completion info get it again.','line_number':4882,'multiline':False]['text':' Insert a new line, keep indentation but ignore 'comments'.','line_number':4891,'multiline':False]['text':' If any of the original typed text has been changed we need to fix','line_number':4914,'multiline':False]['text':' the redo buffer.','line_number':4915,'multiline':False]['text':' Always add completion for the original text.','line_number':4918,'multiline':False]['text':' showmode might reset the internal line pointers, so it must','line_number':4931,'multiline':False]['text':' be called before line = ml_get(), or when this address is no','line_number':4932,'multiline':False]['text':' longer needed.  -- Acevedo.','line_number':4933,'multiline':False]['text':'
 * display the completion status message
 ','line_number':4943,'multiline':True]['text':' we found no match if the list has only the "compl_orig_text"-entry','line_number':4949,'multiline':False]['text':' Update completion sequence number when needed.','line_number':4979,'multiline':False]['text':' The match should always have a sequence number now, this is','line_number':4983,'multiline':False]['text':' just a safety check.','line_number':4984,'multiline':False]['text':' Space for 10 text chars. + 2x10-digit no.s = 31.','line_number':4987,'multiline':False]['text':' Translations may need more than twice that.','line_number':4988,'multiline':False]['text':' Show a message about what (completion) mode we're in.','line_number':5007,'multiline':False]['text':' necessary for "noshowmode"','line_number':5025,'multiline':False]['text':'
 * Do Insert mode completion.
 * Called when character "c" was typed, which has a meaning for completion.
 * Returns OK if completion was done, FAIL if something failed (out of mem).
 ','line_number':5030,'multiline':True]['text':' Find next match (and following matches).','line_number':5057,'multiline':False]['text':' may undisplay the popup menu','line_number':5062,'multiline':False]['text':' all matches have been found','line_number':5065,'multiline':False]['text':' Eat the ESC that vgetc() returns after a CTRL-C to avoid leaving Insert','line_number':5070,'multiline':False]['text':' mode.','line_number':5071,'multiline':False]['text':' we found no match if the list has only the "compl_orig_text"-entry','line_number':5078,'multiline':False]['text':' remove N_ADDS flag, so next ^X<> won't try to go to ADDING mode,','line_number':5081,'multiline':False]['text':' because we couldn't expand anything at first place, but if we used','line_number':5082,'multiline':False]['text':' ^P, ^N, ^X^I or ^X^D we might want to add-expand a single-char-word','line_number':5083,'multiline':False]['text':' (such as M in M'exico) if not tried already.  -- Acevedo','line_number':5084,'multiline':False]['text':' Show the popup menu, unless we got interrupted.','line_number':5100,'multiline':False]['text':'
 * Remove (if needed) and show the popup menu
 ','line_number':5110,'multiline':True]['text':' RedrawingDisabled may be set when invoked through complete().','line_number':5116,'multiline':False]['text':' If the cursor moved or the display scrolled we need to remove the pum','line_number':5120,'multiline':False]['text':' first.','line_number':5121,'multiline':False]['text':'
 * Looks in the first "len" chars. of "src" for search-metachars.
 * If dest is not NULL the chars. are copied there quoting (with
 * a backslash) the metachars, and dest would be NUL terminated.
 * Returns the length (needed) of dest
 ','line_number':5132,'multiline':True]['text':' one extra for the NUL','line_number':5141,'multiline':False]['text':' FALLTHROUGH','line_number':5152,'multiline':False]['text':' quote these only if magic is set','line_number':5154,'multiline':False]['text':' FALLTHROUGH','line_number':5156,'multiline':False]['text':' FALLTHROUGH','line_number':5160,'multiline':False]['text':' currently it's not needed.','line_number':5161,'multiline':False]['text':' Copy remaining bytes of a multibyte character.','line_number':5170,'multiline':False]['text':'
 * Called when starting CTRL_X_SPELL mode: Move backwards to a previous badly
 * spelled word, if there is one.
 ','line_number':5206,'multiline':True]