['text':' vi:set ts=8 sts=4 sw=4 noet: ','line_number':1,'multiline':True]['text':'
 * The following software is (C) 1984 Peter da Silva, the Mad Australian, in
 * the public domain. It may be re-distributed for any purpose with the
 * inclusion of this notice.
 ','line_number':2,'multiline':True]['text':' Modified by Bram Moolenaar for use with VIM - Vi Improved.','line_number':8,'multiline':False]['text':' A few bugs removed by Olaf 'Rhialto' Seibert.','line_number':9,'multiline':False]['text':' TERMLIB: Terminal independent database.','line_number':11,'multiline':False]['text':'
 * Global variables for termlib
 ','line_number':26,'multiline':True]['text':' Pointer to terminal entry, set by tgetent','line_number':30,'multiline':False]['text':' Pad character, default NULL','line_number':31,'multiline':False]['text':' Pointers to UP and BC strings from database','line_number':32,'multiline':False]['text':' Baud rate (1-16, 1=300, 16=19200), as in stty','line_number':33,'multiline':False]['text':'
 * Module: tgetent
 *
 * Purpose: Get termcap entry for <term> into buffer at <tbuf>.
 *
 * Calling conventions: char tbuf[TBUFSZ+], term=canonical name for terminal.
 *
 * Returned values: 1 = success, -1 = can't open file,
 *	    0 = can't find terminal.
 *
 * Notes:
 * - Should probably supply static buffer.
 * - Uses environment variables "TERM" and "TERMCAP". If TERM = term (that is,
 *   if the argument matches the environment) then it looks at TERMCAP.
 * - If TERMCAP begins with a slash, then it assumes this is the file to
 *   search rather than /etc/termcap.
 * - If TERMCAP does not begin with a slash, and it matches TERM, then this is
 *   used as the entry.
 * - This could be simplified considerably for non-UNIX systems.
 ','line_number':35,'multiline':True]['text':' Buffer to hold termcap entry, TBUFSZ bytes max','line_number':70,'multiline':False]['text':' Name of terminal','line_number':71,'multiline':False]['text':' Temp buffer to handle','line_number':73,'multiline':False]['text':' extended entries','line_number':74,'multiline':False]['text':' Default termcap file','line_number':75,'multiline':False]['text':' TERMCAP = name of termcap file','line_number':83,'multiline':False]['text':' Convert /usr/share/lib/termcap to usr:share/lib/termcap','line_number':87,'multiline':False]['text':' TERMCAP = termcap entry itself','line_number':94,'multiline':False]['text':' Check if TERM matches','line_number':98,'multiline':False]['text':' Rhialto','line_number':104,'multiline':False]['text':' Rhialto','line_number':125,'multiline':False]['text':' extended entry','line_number':126,'multiline':False]['text':' reset it back to the beginning','line_number':134,'multiline':False]['text':' For each possible entry','line_number':148,'multiline':False]['text':' : terminates name field','line_number':151,'multiline':False]['text':' | separates names','line_number':155,'multiline':False]['text':' Rhialto','line_number':157,'multiline':False]['text':' FOUND!','line_number':159,'multiline':False]['text':' Look for next name','line_number':164,'multiline':False]['text':'
 * Read 1 entry from TERMCAP file.
 ','line_number':171,'multiline':True]['text':' lbuf=line buffer','line_number':177,'multiline':False]['text':' read lines straight into buffer','line_number':178,'multiline':False]['text':' There's room and','line_number':180,'multiline':False]['text':' another line','line_number':181,'multiline':False]['text':' eat comments','line_number':185,'multiline':False]['text':' and whitespace','line_number':187,'multiline':False]['text':' and continuations','line_number':194,'multiline':False]['text':' no continuation, return','line_number':198,'multiline':False]['text':' ran into end of file','line_number':203,'multiline':False]['text':'
 * Module: tgetflag
 *
 * Purpose: returns flag true or false as to the existence of a given entry.
 * used with 'bs', 'am', etc...
 *
 * Calling conventions: id is the 2 character capability id.
 *
 * Returned values: 1 for success, 0 for failure.
 ','line_number':206,'multiline':True]['text':'
 * Module: tgetnum
 *
 * Purpose: get numeric value such as 'li' or 'co' from termcap.
 *
 * Calling conventions: id = 2 character id.
 *
 * Returned values: -1 for failure, else numerical value.
 ','line_number':225,'multiline':True]['text':'
 * Module: tgetstr
 *
 * Purpose: get terminal capability string from database.
 *
 * Calling conventions: id is the two character capability id.
 *	    (*buf) points into a hold buffer for the
 *	    id. the capability is copied into the buffer
 *	    and (*buf) is advanced to point to the next
 *	    free byte in the buffer.
 *
 * Returned values: 0 = no such entry, otherwise returns original
 *	    (*buf) (now a pointer to the string).
 *
 * Notes
 *	It also decodes certain escape sequences in the buffer.
 *  they should be obvious from the code:
 *	\E = escape.
 *	\n, \r, \t, \f, \b match the 'c' escapes.
 *	^x matches control-x (^@...^_).
 *	\nnn matches nnn octal.
 *	\x, where x is anything else, matches x. I differ
 *  from the standard library here, in that I allow ^: to match
 *  :.
 *
 ','line_number':247,'multiline':True]['text':' For each field','line_number':283,'multiline':False]['text':' skip empty fields','line_number':284,'multiline':False]['text':' find '=' '@' or '#'','line_number':291,'multiline':False]['text':' :xx@: entry for tc','line_number':292,'multiline':False]['text':' deleted entry','line_number':293,'multiline':False]['text':' not at end of field','line_number':295,'multiline':False]['text':' Expand escapes here','line_number':299,'multiline':False]['text':' ignore backslashes','line_number':302,'multiline':False]['text':' at end of entry','line_number':303,'multiline':False]['text':' shouldn't happen','line_number':304,'multiline':False]['text':' ESC','line_number':306,'multiline':False]['text':' \n','line_number':309,'multiline':False]['text':' \r','line_number':312,'multiline':False]['text':' \t','line_number':315,'multiline':False]['text':' \b','line_number':318,'multiline':False]['text':' \f','line_number':321,'multiline':False]['text':' \nnn','line_number':324,'multiline':False]['text':' get up to three digits','line_number':335,'multiline':False]['text':' \x, for all other x','line_number':341,'multiline':False]['text':' control characters','line_number':345,'multiline':False]['text':'
 * Module: tgoto
 *
 * Purpose: decode cm cursor motion string.
 *
 * Calling conventions: cm is cursor motion string.  line, col, are the
 * desired destination.
 *
 * Returned values: a string pointing to the decoded string, or "OOPS" if it
 * cannot be decoded.
 *
 * Notes
 *	The accepted escapes are:
 *	%d	 as in printf, 0 origin.
 *	%2, %3   like %02d, %03d in printf.
 *	%.	 like %c
 *	%+x	 adds <x> to value, then %.
 *	%>xy     if value>x, adds y. No output.
 *	%i	 increments line& col, no output.
 *	%r	 reverses order of line&col. No output.
 *	%%	 prints as a single %.
 *	%n	 exclusive or row & col with 0140.
 *	%B	 BCD, no output.
 *	%D	 reverse coding (x-2*(x%16)), no output.
 ','line_number':361,'multiline':True]['text':' cm string, from termcap','line_number':389,'multiline':False]['text':' column, x position','line_number':390,'multiline':False]['text':' line, y position','line_number':391,'multiline':False]['text':' x, y','line_number':393,'multiline':False]['text':' pointer in 'cm'','line_number':394,'multiline':False]['text':' reverse flag','line_number':395,'multiline':False]['text':' pointer in returned string','line_number':396,'multiline':False]['text':' add upline','line_number':397,'multiline':False]['text':' add backup','line_number':398,'multiline':False]['text':' Kludge, but standard','line_number':403,'multiline':False]['text':' normal char','line_number':410,'multiline':False]['text':' % escape','line_number':415,'multiline':False]['text':' decimal','line_number':418,'multiline':False]['text':' 2 digit decimal','line_number':422,'multiline':False]['text':' 3 digit decimal','line_number':426,'multiline':False]['text':' %>xy: if >x, add y','line_number':430,'multiline':False]['text':' %+c: add c','line_number':436,'multiline':False]['text':' print x/y','line_number':438,'multiline':False]['text':' these are','line_number':439,'multiline':False]['text':' chars that','line_number':440,'multiline':False]['text':' UNIX hates','line_number':441,'multiline':False]['text':' so go to next pos','line_number':444,'multiline':False]['text':' and mark UP','line_number':446,'multiline':False]['text':' or BC','line_number':448,'multiline':False]['text':' r: reverse','line_number':453,'multiline':False]['text':' increment (1-origin screen)','line_number':459,'multiline':False]['text':' %%=% literally','line_number':463,'multiline':False]['text':' magic DM2500 code','line_number':466,'multiline':False]['text':' bcd encoding','line_number':470,'multiline':False]['text':' magic Delta Data code','line_number':474,'multiline':False]['text':' Unknown escape','line_number':478,'multiline':False]['text':' add upline','line_number':484,'multiline':False]['text':' add backspace','line_number':496,'multiline':False]['text':'
 * Module: tputs
 *
 * Purpose: decode padding information
 *
 * Calling conventions: cp = string to be padded, affcnt = # of items affected
 *	(lines, characters, whatever), outc = routine to output 1 character.
 *
 * Returned values: none
 *
 * Notes
 *	cp has padding information ahead of it, in the form
 *  nnnTEXT or nnn*TEXT. nnn is the number of milliseconds to delay,
 *  and may be a decimal (nnn.mmm). If the asterisk is given, then
 *  the delay is multiplied by afcnt. The delay is produced by outputting
 *  a number of nulls (or other padding char) after printing the
 *  TEXT.
 *
 ','line_number':515,'multiline':True]['text':' string to print','line_number':543,'multiline':False]['text':' Number of lines affected','line_number':544,'multiline':False]['text':' routine to output 1 character','line_number':545,'multiline':False]['text':' 10^(#digits after decimal point)','line_number':547,'multiline':False]['text':' digits','line_number':548,'multiline':False]['text':' multiply by affected lines','line_number':563,'multiline':False]['text':' Calculate number of characters for padding counter/frac ms delay','line_number':570,'multiline':False]['text':' output string','line_number':574,'multiline':False]['text':' followed by pad characters','line_number':577,'multiline':False]['text':'
 * Module: tutil.c
 *
 * Purpose: Utility routines for TERMLIB functions.
 * Returns length of text common to s1 and s2.
 ','line_number':586,'multiline':True]['text':'
 * finds next c in s that's a member of set, returns pointer
 ','line_number':603,'multiline':True]['text':'
 * add val to buf according to format fmt
 ','line_number':623,'multiline':True]