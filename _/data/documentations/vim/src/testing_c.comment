['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * testing.c: Support for tests.
 ','line_number':10,'multiline':True]['text':'
 * Prepare "gap" for an assert error and add the sourcing position.
 ','line_number':18,'multiline':True]['text':'
 * Append "p[clen]" to "gap", escaping unprintable characters.
 * Changes NL to \n, CR to \r, etc.
 ','line_number':44,'multiline':True]['text':'
 * Append "str" to "gap", escaping unprintable characters.
 * Changes NL to \n, CR to \r, etc.
 ','line_number':82,'multiline':True]['text':'
 * Fill "gap" with information about an assert error.
 ','line_number':128,'multiline':True]['text':' When comparing dictionaries, drop the items that are equal, so that','line_number':165,'multiline':False]['text':' it's a lot easier to see what differs.','line_number':166,'multiline':False]['text':' item of exp_d not present in got_d or values differ.','line_number':192,'multiline':False]['text':' Add items only present in got_d.','line_number':205,'multiline':False]['text':' item of got_d not present in exp_d','line_number':213,'multiline':False]['text':'
 * Common for assert_true() and assert_false().
 * Return non-zero for failure.
 ','line_number':306,'multiline':True]['text':'
 * "assert_beeps(cmd)" function
 ','line_number':382,'multiline':True]['text':'
 * "assert_nobeep(cmd)" function
 ','line_number':394,'multiline':True]['text':'
 * "assert_equal(expected, actual[, msg])" function
 ','line_number':406,'multiline':True]['text':'
 * "assert_equalfile(fname-one, fname-two[, msg])" function
 ','line_number':534,'multiline':True]['text':'
 * "assert_notequal(expected, actual[, msg])" function
 ','line_number':549,'multiline':True]['text':'
 * "assert_exception(string[, msg])" function
 ','line_number':558,'multiline':True]['text':'
 * "assert_fails(cmd [, error[, msg]])" function
 ','line_number':593,'multiline':True]['text':' trylevel must be zero for a ":throw" command to be considered failed','line_number':614,'multiline':False]['text':' reset here for any errors reported below','line_number':623,'multiline':False]['text':' make a copy, an error in pattern_match() may free it','line_number':674,'multiline':False]['text':'
 * "assert_false(actual[, msg])" function
 ','line_number':776,'multiline':True]['text':'
 * "assert_inrange(lower, upper[, msg])" function
 ','line_number':835,'multiline':True]['text':'
 * "assert_match(pattern, actual[, msg])" function
 ','line_number':850,'multiline':True]['text':'
 * "assert_notmatch(pattern, actual[, msg])" function
 ','line_number':859,'multiline':True]['text':'
 * "assert_report(msg)" function
 ','line_number':868,'multiline':True]['text':'
 * "assert_true(actual[, msg])" function
 ','line_number':886,'multiline':True]['text':'
 * "test_alloc_fail(id, countdown, repeat)" function
 ','line_number':895,'multiline':True]['text':'
 * "test_autochdir()"
 ','line_number':924,'multiline':True]['text':'
 * "test_feedinput()"
 ','line_number':935,'multiline':True]['text':' this doesn't work in the console','line_number':949,'multiline':False]['text':'
 * "test_getvalue({name})" function
 ','line_number':962,'multiline':True]['text':'
 * "test_option_not_set({name})" function
 ','line_number':981,'multiline':True]['text':'
 * "test_override({name}, {val})" function
 ','line_number':997,'multiline':True]['text':' ml_get_alloc_lines is not reset by "ALL"','line_number':1064,'multiline':False]['text':'
 * "test_refcount({expr})" function
 ','line_number':1075,'multiline':True]['text':'
 * "test_garbagecollect_now()" function
 ','line_number':1146,'multiline':True]['text':' This is dangerous, any Lists and Dicts used internally may be freed','line_number':1152,'multiline':False]['text':' while still in use.','line_number':1153,'multiline':False]['text':'
 * "test_garbagecollect_soon()" function
 ','line_number':1160,'multiline':True]['text':'
 * "test_ignore_error()" function
 ','line_number':1169,'multiline':True]['text':' ignore non-string items','line_number':1304,'multiline':False]['text':' Note: "move" is optional, requires fewer arguments','line_number':1372,'multiline':False]['text':' the "move" argument expects row and col coordnates to be in pixels,','line_number':1387,'multiline':False]['text':' unless "cell" is specified and is TRUE.','line_number':1388,'multiline':False]['text':' calculate the middle of the character cell','line_number':1391,'multiline':False]['text':' Note: Cell coordinates are 1-based from vimscript','line_number':1392,'multiline':False]['text':' Reset the scroll values to known values.','line_number':1404,'multiline':False]['text':' XXX: Remove this when/if the scroll step is made configurable.','line_number':1405,'multiline':False]['text':' need to loop through normal_cmd() to handle the scroll events','line_number':1446,'multiline':False]['text':' defined(FEAT_EVAL)','line_number':1570,'multiline':False]