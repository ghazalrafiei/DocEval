['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved		by Bram Moolenaar
 *				GUI/Motif support by Robert Webb
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':' Structure containing all the GUI information','line_number':13,'multiline':False]['text':' Return values for gui_read_child_pipe','line_number':43,'multiline':False]['text':' can display the cursor','line_number':53,'multiline':False]['text':' If > 0, gui_mch_flush() is disabled.','line_number':54,'multiline':False]['text':'
 * gui_start -- Called when user wants to start the GUI.
 *
 * Careful: This function can be called recursively when there is a ":gui"
 * command in the .gvimrc file.  Only the first call should fork, not the
 * recursive call.
 ','line_number':56,'multiline':True]['text':' stop RAW mode','line_number':76,'multiline':False]['text':' needed for ":gui" in .vimrc','line_number':78,'multiline':False]['text':'
     * Quit the current process and continue in the child.
     * Makes "gvim file" disconnect from the shell it was started in.
     * Don't do this when Vim was started with "-f" or the 'f' flag is present
     * in 'guioptions'.
     * Don't do this when there is a running job, we can only get the status
     * of a child from the parent.
     ','line_number':83,'multiline':True]['text':' If there is 'f' in 'guioptions' and specify -g argument,','line_number':122,'multiline':False]['text':' gui_mch_init_check() was not called yet.','line_number':123,'multiline':False]['text':' failed to start GUI','line_number':130,'multiline':False]['text':' Back to old term settings','line_number':132,'multiline':False]['text':'','line_number':133,'multiline':False]['text':' FIXME: If we got here because a child process failed and flagged to','line_number':134,'multiline':False]['text':' the parent to resume, and X11 is enabled, this will','line_number':135,'multiline':False]['text':' hit an X11 I/O error and do a longjmp(), leaving recursive','line_number':136,'multiline':False]['text':' permanently set to 1. This is probably not as big a problem as it','line_number':137,'multiline':False]['text':' sounds, because gui_mch_init() in both gui_x11.c and gui_gtk_x11.c','line_number':138,'multiline':False]['text':' return "OK" unconditionally, so it would be very difficult to','line_number':139,'multiline':False]['text':' actually hit this case.','line_number':140,'multiline':False]['text':' restart RAW mode','line_number':142,'multiline':False]['text':' set 'title' and 'icon' again','line_number':143,'multiline':False]['text':' If the GUI started successfully, trigger the GUIEnter event, otherwise','line_number':152,'multiline':False]['text':' the GUIFailed event.','line_number':153,'multiline':False]['text':'
 * Set_termname() will call gui_init() to start the GUI.
 * Set the "starting" flag, to indicate that the GUI will start.
 *
 * We don't want to open the GUI shell until after we've read .gvimrc,
 * otherwise we don't know what font we will use, and hence we don't know
 * what size the shell should be.  So if there are errors in the .gvimrc
 * file, they will have to go to the terminal: Set full_screen to FALSE.
 * full_screen will be set to TRUE again by a successful termcapinit().
 ','line_number':162,'multiline':True]['text':' Display error messages in a dialog now.','line_number':198,'multiline':False]['text':' for waitpid()','line_number':207,'multiline':False]['text':'
 * Create a new process, by forking. In the child, start the GUI, and in
 * the parent, exit.
 *
 * If something goes wrong, this will return with gui.in_use still set
 * to FALSE, in which case the caller should continue execution without
 * the GUI.
 *
 * If the child fails to start the GUI, then the child will exit and the
 * parent will return. If the child succeeds, then the parent will exit
 * and the child will return.
 ','line_number':212,'multiline':True]['text':' pipe between parent and child','line_number':227,'multiline':False]['text':' a timer is not carried forward','line_number':234,'multiline':False]['text':' Setup a pipe between the child and the parent, so that the parent','line_number':238,'multiline':False]['text':' knows when the child has done the setsid() call and is allowed to','line_number':239,'multiline':False]['text':' exit.','line_number':240,'multiline':False]['text':' Fork error','line_number':243,'multiline':False]['text':' Parent','line_number':248,'multiline':False]['text':' Give the child some time to do the setsid(), otherwise the','line_number':250,'multiline':False]['text':' exit() may kill the child too (when starting gvim from inside a','line_number':251,'multiline':False]['text':' gvim).','line_number':252,'multiline':False]['text':' The read returns when the child closes the pipe (or when','line_number':255,'multiline':False]['text':' the child dies for some reason).','line_number':256,'multiline':False]['text':' The child failed to start the GUI, so the caller must','line_number':261,'multiline':False]['text':' continue. There may be more error information written','line_number':262,'multiline':False]['text':' to stderr by the child.','line_number':263,'multiline':False]['text':' else GUI_CHILD_OK: parent exit','line_number':276,'multiline':False]['text':' When swapping screens we may need to go to the next line, e.g.,','line_number':282,'multiline':False]['text':' after a hit-enter prompt and using ":gui".','line_number':283,'multiline':False]['text':'
	 * The parent must skip the normal exit() processing, the child
	 * will do it.  For example, GTK messes up signals when exiting.
	 ','line_number':287,'multiline':True]['text':' Child','line_number':293,'multiline':False]['text':' Call gtk_init_check() here after fork(). See gui_init_check().','line_number':296,'multiline':False]['text':'
     * Change our process group.  On some systems/shells a CTRL-C in the
     * shell where Vim was started would otherwise kill gvim!
     ','line_number':302,'multiline':True]['text':' Tell the session manager our new PID','line_number':316,'multiline':False]['text':' Try to start the GUI','line_number':320,'multiline':False]['text':' Notify the parent','line_number':323,'multiline':False]['text':' If we failed to start the GUI, exit now.','line_number':333,'multiline':False]['text':'
 * Read from a pipe assumed to be connected to the child process (this
 * function is called from the parent).
 * Return GUI_CHILD_OK if the child successfully started the GUI,
 * GUY_CHILD_FAILED if the child failed, or GUI_CHILD_IO_ERROR if there was
 * some other error.
 *
 * The file descriptor will be closed before the function returns.
 ','line_number':338,'multiline':True]['text':' GUI_MAY_FORK','line_number':365,'multiline':False]['text':'
 * Call this when vim starts up, whether or not the GUI is started
 ','line_number':367,'multiline':True]['text':' No GUI yet (maybe later)','line_number':373,'multiline':False]['text':' No GUI yet (maybe later)','line_number':374,'multiline':False]['text':'
 * Try initializing the GUI and check if it can be started.
 * Used from main() to check early if "vim -g" can start the GUI.
 * Used from gui_init() to prepare for starting the GUI.
 * Returns FAIL or OK.
 ','line_number':378,'multiline':True]['text':' so the guicursor setting works','line_number':398,'multiline':False]['text':' default: include menu','line_number':442,'multiline':False]['text':'
     * Note: Don't call gtk_init_check() before fork, it will be called after
     * the fork. When calling it before fork, it make vim hang for a while.
     * See gui_do_fork().
     * Use a simpler check if the GUI window can probably be opened.
     ','line_number':466,'multiline':True]['text':'
 * This is the call which starts the GUI.
 ','line_number':480,'multiline':True]['text':'
     * It's possible to use ":gui" in a .gvimrc file.  The first half of this
     * function will then be executed at the first call, the rest by the
     * recursive call.  This allow the shell to be opened halfway reading a
     * gvimrc file.
     ','line_number':489,'multiline':True]['text':' If can't initialize, don't try doing the rest','line_number':501,'multiline':False]['text':'
	 * Reset 'paste'.  It's useful in the terminal, but not in the GUI.  It
	 * breaks the Paste toolbar button.
	 ','line_number':509,'multiline':True]['text':' Set t_Co to the number of colors: RGB.','line_number':515,'multiline':False]['text':'
	 * Set up system-wide default menus.
	 ','line_number':518,'multiline':True]['text':'
	 * Switch on the mouse by default, unless the user changed it already.
	 * This can then be changed in the .gvimrc.
	 ','line_number':530,'multiline':True]['text':'
	 * If -U option given, use only the initializations from that file and
	 * nothing else.  Skip all initializations for "-U NONE" or "-u NORC".
	 ','line_number':538,'multiline':True]['text':'
	     * Get system wide defaults for gvim, only when file name defined.
	     ','line_number':551,'multiline':True]['text':'
	     * Try to read GUI initialization commands from the following
	     * places:
	     * - environment variable GVIMINIT
	     * - the user gvimrc file (~/.gvimrc)
	     * - the second user gvimrc file ($VIM/.gvimrc for Dos)
	     * - the third user gvimrc file ($VIM/.gvimrc for Amiga)
	     * The first that exists is used, the rest is ignored.
	     ','line_number':558,'multiline':True]['text':'
	     * Read initialization commands from ".gvimrc" in current
	     * directory.  This is only done if the 'exrc' option is set.
	     * Because of security reasons we disallow shell and write
	     * commands now, except for unix if the file is owned by the user
	     * or 'secure' option has been reset in environment of global
	     * ".gvimrc".
	     * Only do this if GVIMRC_FILE is not the same as USR_GVIMRC_FILE,
	     * USR_GVIMRC_FILE2, USR_GVIMRC_FILE3 or SYS_GVIMRC_FILE.
	     ','line_number':586,'multiline':True]['text':' if ".gvimrc" file is not owned by user, set 'secure'','line_number':602,'multiline':False]['text':' mode','line_number':603,'multiline':False]['text':' If recursive call opened the shell, return here from the first call','line_number':644,'multiline':False]['text':'
     * Create the GUI shell.
     ','line_number':648,'multiline':True]['text':' Must be set after menus have been set up','line_number':651,'multiline':False]['text':' Avoid a delay for an error message that was printed in the terminal','line_number':655,'multiline':False]['text':' where Vim was started.','line_number':656,'multiline':False]['text':'
     * Check validity of any generic resources that may have been loaded.
     ','line_number':663,'multiline':True]['text':'
     * Set up the fonts.  First use a font specified with "-fn" or "-font".
     ','line_number':669,'multiline':True]['text':' Create initial scrollbars','line_number':693,'multiline':False]['text':' Configure the desired menu and scrollbars','line_number':708,'multiline':False]['text':' All components of the GUI have been created now','line_number':711,'multiline':False]['text':' Set the shell size, adjusted for the screen size.  For GTK this only','line_number':715,'multiline':False]['text':' works after the shell has been opened, thus it is further down.','line_number':716,'multiline':False]['text':' If the window is already maximized (e.g. when --windowid is passed in),','line_number':717,'multiline':False]['text':' we want to use the system-provided dimensions by passing FALSE to','line_number':718,'multiline':False]['text':' mustset. Otherwise, we want to initialize with the default rows/columns.','line_number':719,'multiline':False]['text':' Need to set the size of the menubar after all the menus have been','line_number':730,'multiline':False]['text':' created.','line_number':731,'multiline':False]['text':'
     * Actually open the GUI shell.
     ','line_number':735,'multiline':True]['text':' Our GUI can't do bidi.','line_number':745,'multiline':False]['text':' Give GTK+ a chance to put all widget's into place.','line_number':749,'multiline':False]['text':' If there is no 'm' in 'guioptions' we need to remove the menu now.','line_number':753,'multiline':False]['text':' It was still there to make F10 work.','line_number':754,'multiline':False]['text':' Now make sure the shell fits on the screen.','line_number':764,'multiline':False]['text':' When 'lines' was set while starting up the topframe may have to be','line_number':770,'multiline':False]['text':' resized.','line_number':771,'multiline':False]['text':' Always create the Balloon Evaluation area, but disable it when','line_number':775,'multiline':False]['text':' 'ballooneval' is off.','line_number':776,'multiline':False]['text':' In the GUI modifiers are prepended to keys.','line_number':807,'multiline':False]['text':' Don't do this for MS-Windows yet, it sends CTRL-K without the','line_number':808,'multiline':False]['text':' modifier.','line_number':809,'multiline':False]['text':' When 'cmdheight' was set during startup it may not have taken','line_number':817,'multiline':False]['text':' effect yet.','line_number':818,'multiline':False]['text':' undo gui_mch_init()','line_number':827,'multiline':False]['text':' don't free the fonts, it leads to a BUS error','line_number':840,'multiline':False]['text':' richard@whitequeen.com Jul 99','line_number':841,'multiline':False]['text':'
 * Called when the GUI shell is closed by the user.  If there are no changed
 * files Vim exits, otherwise there will be a dialog to ask the user what to
 * do.
 * When this function returns, Vim should NOT exit!
 ','line_number':850,'multiline':True]['text':' Only exit when there are no changed files','line_number':864,'multiline':False]['text':' If there are changed buffers, present the user with a dialog if','line_number':872,'multiline':False]['text':' possible, otherwise give an error message.','line_number':873,'multiline':False]['text':' redraw, window may show changed buffer','line_number':879,'multiline':False]['text':'
 * Set the font.  "font_list" is a comma separated list of font names.  The
 * first font name that works is used.  If none is found, use the default
 * font.
 * If "fontset" is TRUE, the "font_list" is used as one name for the fontset.
 * Return OK when able to set the font.  When it failed FAIL is returned and
 * the fonts are unchanged.
 ','line_number':883,'multiline':True]['text':' When using a fontset, the whole list of fonts is one name.','line_number':908,'multiline':False]['text':' Isolate one comma separated font name.','line_number':915,'multiline':False]['text':' Careful!!!  The Win32 version of gui_mch_init_font(), when','line_number':918,'multiline':False]['text':' called with "*" will change p_guifont to the selected font','line_number':919,'multiline':False]['text':' name, which frees the old value.  This makes font_list','line_number':920,'multiline':False]['text':' invalid.  Thus when OK is returned here, font_list must no','line_number':921,'multiline':False]['text':' longer be used!','line_number':922,'multiline':False]['text':' If it's a Unicode font, try setting 'guifontwide' to a','line_number':926,'multiline':False]['text':' similar double-width font.','line_number':927,'multiline':False]['text':'
	 * Couldn't load any font in 'font_list', keep the current font if
	 * there is one.  If 'font_list' is empty, or if there is no current
	 * font, tell gui_mch_init_font() to try to find a font we can load.
	 ','line_number':942,'multiline':True]['text':' Set normal font as current font','line_number':953,'multiline':False]['text':'
 * Try setting 'guifontwide' to a font twice as wide as "name".
 ','line_number':968,'multiline':True]['text':' room for 2 * width and '*'','line_number':975,'multiline':False]['text':' font type: change "--" to "-*-"','line_number':987,'multiline':False]['text':' found the width','line_number':992,'multiline':False]['text':' Double the width specification.','line_number':998,'multiline':False]['text':'
 * Get the font for 'guifontwide'.
 * Return FAIL for an invalid font name.
 ','line_number':1016,'multiline':True]['text':' Can't allocate font yet, assume it's OK.','line_number':1027,'multiline':False]['text':' Will give an error message later.','line_number':1028,'multiline':False]['text':' Isolate one comma separated font name.','line_number':1034,'multiline':False]['text':' Avoid unnecessary overhead if 'guifontwide' is equal to 'guifont'.','line_number':1046,'multiline':False]['text':'
     * TODO: setup wide_bold_font, wide_ital_font and wide_boldital_font to
     * support those fonts for 'guifontwide'.
     ','line_number':1059,'multiline':True]['text':'
 * Set list of ascii characters that combined can create ligature.
 * Store them in char map for quick access from gui_gtk2_draw_string.
 ','line_number':1068,'multiline':True]['text':' check for invalid characters','line_number':1079,'multiline':False]['text':' store valid setting into ligatures_map','line_number':1087,'multiline':False]['text':'
 * Adjust the columns to undraw for when the cursor is on ligatures.
 ','line_number':1096,'multiline':True]['text':' expand before the cursor for all the chars in gui.ligatures_map','line_number':1107,'multiline':False]['text':' expand after the cursor for all the chars in gui.ligatures_map','line_number':1113,'multiline':False]['text':'
 * gui_check_pos - check if the cursor is on the screen.
 ','line_number':1129,'multiline':True]['text':'
 * Redraw the cursor if necessary or when forced.
 * Careful: The contents of ScreenLines[] must match what is on the screen,
 * otherwise this goes wrong.  May need to call out_flush() first.
 ','line_number':1143,'multiline':True]['text':' when TRUE, update even when not moved','line_number':1150,'multiline':False]['text':' clear selection under cursor','line_number':1151,'multiline':False]['text':' cursor fore-/background color','line_number':1162,'multiline':False]['text':' cursor attributes','line_number':1163,'multiline':False]['text':' Don't update the cursor when halfway busy scrolling or the screen size','line_number':1167,'multiline':False]['text':' doesn't match 'columns' and 'lines.  ScreenLines[] isn't valid then.','line_number':1168,'multiline':False]['text':' If a cursor-less sleep is ongoing, leave the cursor invisible','line_number':1181,'multiline':False]['text':' Only write to the screen after ScreenLines[] has been initialized','line_number':1194,'multiline':False]['text':' Clear the selection if we are about to write over it','line_number':1198,'multiline':False]['text':' Check that the cursor is inside the shell (resizing may have made','line_number':1201,'multiline':False]['text':' it invalid)','line_number':1202,'multiline':False]['text':'
     * How the cursor is drawn depends on the current mode.
     * When in a terminal window use the shape/color specified there.
     ','line_number':1208,'multiline':True]['text':' get the colors and attributes for the cursor.  Default is inverted','line_number':1223,'multiline':False]['text':'
     * Get the attributes for the character under the cursor.
     * When no cursor color was given, use the character color.
     ','line_number':1272,'multiline':True]['text':'
     * When we don't have window focus, draw a hollow cursor.
     ','line_number':1326,'multiline':True]['text':'
	 * Draw the text character with the cursor colors.	Use the
	 * character attributes plus the cursor attributes.
	 ','line_number':1338,'multiline':True]['text':'
	 * First draw the partial cursor, then overwrite with the text
	 * character, using a transparent background.
	 ','line_number':1351,'multiline':True]['text':' Double wide character.','line_number':1368,'multiline':False]['text':' gui.col points to the left half of the character but','line_number':1374,'multiline':False]['text':' the vertical line needs to be on the right half.','line_number':1375,'multiline':False]['text':' A double-wide horizontal line is also drawn from the','line_number':1376,'multiline':False]['text':' right half in gui_mch_draw_part_cursor().','line_number':1377,'multiline':False]['text':' doesn't seem to work for MSWindows','line_number':1389,'multiline':False]['text':'
 * Position the various GUI components (text area, menu).  The vertical
 * scrollbars are NOT handled here.  See gui_update_scrollbars().
 ','line_number':1410,'multiline':True]['text':' avoid that moving components around generates events','line_number':1422,'multiline':False]['text':'
 * Get the width of the widgets and decorations to the side of the text area.
 ','line_number':1489,'multiline':True]['text':'
 * Get the height of the widgets and decorations above and below the text area.
 ','line_number':1505,'multiline':True]['text':' We can't take the sizes properly into account until anything is','line_number':1517,'multiline':False]['text':' realized.  Therefore we recalculate all the values here just before','line_number':1518,'multiline':False]['text':' setting the size. (--mdcki)','line_number':1519,'multiline':False]['text':'
 * Should be called after the GUI shell has been resized.  Its arguments are
 * the new width and height of the shell in pixels.
 ','line_number':1541,'multiline':True]['text':' ignore when still initializing','line_number':1550,'multiline':False]['text':'
     * Can't resize the screen while it is being redrawn.  Remember the new
     * size and handle it later.
     ','line_number':1553,'multiline':True]['text':' Flush pending output before redrawing','line_number':1573,'multiline':False]['text':'
     * At the "more" and ":confirm" prompt there is no redraw, put the cursor
     * at the last line here (why does it have to be one row too low?).
     ','line_number':1582,'multiline':True]['text':' Only comparing Rows and Columns may be sufficient, but let's stay on','line_number':1589,'multiline':False]['text':' the safe side.','line_number':1590,'multiline':False]['text':' We may have been called again while redrawing the screen.','line_number':1607,'multiline':False]['text':' Need to do it all again with the latest size then.  But only if the size','line_number':1608,'multiline':False]['text':' actually changed.','line_number':1609,'multiline':False]['text':'
 * Check if gui_resize_shell() must be called.
 ','line_number':1626,'multiline':True]['text':' careful: gui_resize_shell() may postpone the resize again if we','line_number':1633,'multiline':False]['text':' were called indirectly by it','line_number':1634,'multiline':False]['text':'
 * Set the size of the Vim shell according to Rows and Columns.
 * If "fit_to_display" is TRUE then the size may be reduced to fit the window
 * on the screen.
 * When "mustset" is TRUE the size was set by the user. When FALSE a UI
 * component was added or removed (e.g., a scrollbar).
 ','line_number':1646,'multiline':True]['text':' RESIZE_HOR, RESIZE_VER','line_number':1657,'multiline':False]['text':' If not setting to a user specified size and maximized, calculate the','line_number':1677,'multiline':False]['text':' number of characters that fit in the maximized window.','line_number':1678,'multiline':False]['text':' Remember the original window position.','line_number':1690,'multiline':False]['text':' don't unmaximize if at maximum size','line_number':1721,'multiline':False]['text':' If the window size is smaller than the screen unmaximize the','line_number':1736,'multiline':False]['text':' window, otherwise resizing won't work.','line_number':1737,'multiline':False]['text':' Some window managers put the Vim window left of/above the screen.','line_number':1751,'multiline':False]['text':' Only change the position if it wasn't already negative before','line_number':1752,'multiline':False]['text':' (happens on MS-Windows with a secondary monitor).','line_number':1753,'multiline':False]['text':'
 * Called when Rows and/or Columns has changed.
 ','line_number':1764,'multiline':True]['text':'
 * Make scroll region cover whole screen.
 ','line_number':1773,'multiline':True]['text':' highlight code','line_number':1788,'multiline':False]['text':' mask','line_number':1790,'multiline':False]['text':' highlight code','line_number':1797,'multiline':False]['text':' mask','line_number':1799,'multiline':False]['text':'
 * Clear a rectangular region of the screen from text pos (row1, col1) to
 * (row2, col2) inclusive.
 ','line_number':1803,'multiline':True]['text':' Clear the selection if we are about to write over it','line_number':1814,'multiline':False]['text':' Invalidate cursor if it was in this block','line_number':1819,'multiline':False]['text':'
 * Write code to update the cursor later.  This avoids the need to flush the
 * output buffer before calling gui_update_cursor().
 ','line_number':1825,'multiline':True]['text':' force cursor update','line_number':1842,'multiline':False]['text':' #define DEBUG_GUI_WRITE','line_number':1846,'multiline':False]['text':' Clear screen','line_number':1891,'multiline':False]['text':' Move cursor','line_number':1897,'multiline':False]['text':' force cursor (shape) update','line_number':1900,'multiline':False]['text':' Set scroll region','line_number':1903,'multiline':False]['text':' Set vertical scroll region','line_number':1915,'multiline':False]['text':' Delete line','line_number':1927,'multiline':False]['text':' Delete lines','line_number':1930,'multiline':False]['text':' Insert line','line_number':1933,'multiline':False]['text':' Insert lines','line_number':1936,'multiline':False]['text':' Clear to end-of-line','line_number':1939,'multiline':False]['text':' Turn on highlighting','line_number':1943,'multiline':False]['text':' Turn off highlighting','line_number':1946,'multiline':False]['text':' flash the window (visual bell)','line_number':1949,'multiline':False]['text':' Skip the ESC','line_number':1953,'multiline':False]['text':' Ctrl character','line_number':1959,'multiline':False]['text':' NL','line_number':1968,'multiline':False]['text':' CR','line_number':1976,'multiline':False]['text':' Backspace','line_number':1980,'multiline':False]['text':' cursor-right','line_number':1985,'multiline':False]['text':' Beep','line_number':1989,'multiline':False]['text':' Other Ctrl character: shouldn't happen!','line_number':1993,'multiline':False]['text':' Skip this char','line_number':1995,'multiline':False]['text':' Postponed update of the cursor (won't work if "can_update_cursor" isn't','line_number':2019,'multiline':False]['text':' set).','line_number':2020,'multiline':False]['text':' When switching to another window the dragging must have stopped.','line_number':2024,'multiline':False]['text':' Required for GTK, dragged_sb isn't reset.','line_number':2025,'multiline':False]['text':' Update the scrollbars after clearing the screen or when switched','line_number':2029,'multiline':False]['text':' to another window.','line_number':2030,'multiline':False]['text':' Update the horizontal scrollbar always, it's difficult to check all','line_number':2031,'multiline':False]['text':' situations where it might change.','line_number':2032,'multiline':False]['text':'
     * We need to make sure this is cleared since GTK doesn't tell us when
     * the user is done dragging.
     ','line_number':2039,'multiline':True]['text':' In case vim decides to take a nap','line_number':2047,'multiline':False]['text':'
 * When ScreenLines[] is invalid, updating the cursor should not be done, it
 * produces wrong results.  Call gui_dont_update_cursor() before that code and
 * gui_can_update_cursor() afterwards.
 ','line_number':2050,'multiline':True]['text':' Undraw the cursor now, we probably can't do it after the change.','line_number':2061,'multiline':False]['text':' No need to update the cursor right now, there is always more output','line_number':2071,'multiline':False]['text':' after scrolling.','line_number':2072,'multiline':False]['text':'
 * Disable issuing gui_mch_flush().
 ','line_number':2075,'multiline':True]['text':'
 * Enable issuing gui_mch_flush().
 ','line_number':2084,'multiline':True]['text':'
 * Issue gui_mch_flush() if it is not disabled.
 ','line_number':2093,'multiline':True]['text':' Find out how many chars fit in the current line.','line_number':2119,'multiline':False]['text':' don't include following composing char','line_number':2129,'multiline':False]['text':' fill up for a double-width char that doesn't fit.','line_number':2140,'multiline':False]['text':' The cursor may wrap to the next line.','line_number':2144,'multiline':False]['text':'
 * Output one character (may be one or two display cells).
 * Caller must check for valid "off".
 * Returns FAIL or OK, just like gui_outstr_nowrap().
 ','line_number':2153,'multiline':True]['text':' Offset from start of screen','line_number':2160,'multiline':False]['text':' colors for cursor','line_number':2162,'multiline':False]['text':' colors for cursor','line_number':2163,'multiline':False]['text':' backup this many chars when using bold trick','line_number':2164,'multiline':False]['text':' Don't draw right half of a double-width UTF-8 char. "cannot happen"','line_number':2168,'multiline':False]['text':' Draw UTF-8 multi-byte character.','line_number':2173,'multiline':False]['text':' Draw non-multi-byte character or DBCS character.','line_number':2184,'multiline':False]['text':'
 * Output the string at the given screen position.  This is used in place
 * of gui_screenchar() where possible because Pango needs as much context
 * as possible to work nicely.  It's a lot faster as well.
 ','line_number':2191,'multiline':True]['text':' Offset from start of screen','line_number':2198,'multiline':False]['text':' string length in screen cells','line_number':2199,'multiline':False]['text':' colors for cursor','line_number':2201,'multiline':False]['text':' colors for cursor','line_number':2202,'multiline':False]['text':' backup this many chars when using bold trick','line_number':2203,'multiline':False]['text':' "cannot happen"?','line_number':2210,'multiline':False]['text':' not much we could do here...','line_number':2217,'multiline':False]['text':' skip second half of double-width char','line_number':2222,'multiline':False]['text':' only to aid debugging','line_number':2230,'multiline':False]['text':' not much we could do here...','line_number':2240,'multiline':False]['text':' handle double-byte single-width char','line_number':2246,'multiline':False]['text':' only to aid debugging','line_number':2253,'multiline':False]['text':' FEAT_GUI_GTK','line_number':2265,'multiline':False]['text':'
 * Output the given string at the current cursor position.  If the string is
 * too long to fit on the line, then it is truncated.
 * "flags":
 * GUI_MON_IS_CURSOR should only be used when this function is being called to
 * actually draw (an inverted) cursor.
 * GUI_MON_TRS_CURSOR is used to draw the cursor text with a transparent
 * background.
 * GUI_MON_NOCLEAR is used to avoid clearing the selection when drawing over
 * it.
 * Returns OK, unless "back" is non-zero and using the bold trick, then return
 * FAIL (the caller should start drawing "back" chars back).
 ','line_number':2267,'multiline':True]['text':' colors for cursor','line_number':2285,'multiline':False]['text':' colors for cursor','line_number':2286,'multiline':False]['text':' backup this many chars when using bold trick','line_number':2287,'multiline':False]['text':' draw spaces instead','line_number':2329,'multiline':False]['text':' right align sign icon in the number column','line_number':2342,'multiline':False]['text':' highlighting not set','line_number':2354,'multiline':False]['text':' Set the font','line_number':2364,'multiline':False]['text':'
	 * Choose correct wide_font by font.  wide_font should be set with font
	 * at same time in above block.  But it will make many "ifdef" nasty
	 * blocks.  So we do it here.
	 ','line_number':2401,'multiline':True]['text':' Set the color','line_number':2425,'multiline':False]['text':' Clear the selection if we are about to write over it','line_number':2464,'multiline':False]['text':' If there's no bold font, then fake it','line_number':2469,'multiline':False]['text':'
     * When drawing bold or italic characters the spill-over from the left
     * neighbor may be destroyed.  Let the caller backup to start redrawing
     * just after a blank.
     ','line_number':2473,'multiline':True]['text':' If there's no italic font, then fake it.','line_number':2482,'multiline':False]['text':' For GTK2, we don't need a different font for italic style.','line_number':2483,'multiline':False]['text':' Do we underline the text?','line_number':2487,'multiline':False]['text':' Do we underline the text?','line_number':2492,'multiline':False]['text':' Do we undercurl the text?','line_number':2496,'multiline':False]['text':' TODO: HL_UNDERDOUBLE, HL_UNDERDOTTED, HL_UNDERDASHED','line_number':2500,'multiline':False]['text':' Do we strikethrough the text?','line_number':2502,'multiline':False]['text':' Do we draw transparently?','line_number':2506,'multiline':False]['text':'
     * Draw the text.
     ','line_number':2510,'multiline':True]['text':' The value returned is the length in display cells','line_number':2514,'multiline':False]['text':' index of bytes to be drawn','line_number':2519,'multiline':False]['text':' cellwidth of bytes to be drawn','line_number':2520,'multiline':False]['text':' length of bytes to be drawn','line_number':2521,'multiline':False]['text':' cellwidth of current char','line_number':2522,'multiline':False]['text':' index of current char','line_number':2523,'multiline':False]['text':' current char value','line_number':2524,'multiline':False]['text':' byte length of current char','line_number':2525,'multiline':False]['text':' current char is composing','line_number':2526,'multiline':False]['text':' screen column','line_number':2527,'multiline':False]['text':' use 'guifontwide'','line_number':2528,'multiline':False]['text':' Don't separate composing chars.','line_number':2532,'multiline':False]['text':' Separate composing chars.','line_number':2534,'multiline':False]['text':' Break the string at a composing character, it has to be drawn on','line_number':2537,'multiline':False]['text':' top of the previous character.','line_number':2538,'multiline':False]['text':' count cells from non-composing chars','line_number':2546,'multiline':False]['text':' hit end of string','line_number':2560,'multiline':False]['text':' len must be wrong "cannot happen"','line_number':2561,'multiline':False]['text':' Print the string so far if it's the last character or there is','line_number':2565,'multiline':False]['text':' a composing character.','line_number':2566,'multiline':False]['text':' No fontset: At least draw char after wide char at','line_number':2572,'multiline':False]['text':' right position.','line_number':2573,'multiline':False]['text':' Adjust to not draw a character which width is changed','line_number':2596,'multiline':False]['text':' against with last one.','line_number':2597,'multiline':False]['text':' No fontset: draw a space to fill the gap after a wide char','line_number':2605,'multiline':False]['text':'','line_number':2606,'multiline':False]['text':' Draw a composing char on top of the previous char.','line_number':2616,'multiline':False]['text':' Carbon ATSUI autodraws composing char over previous char','line_number':2620,'multiline':False]['text':' The stuff below assumes "len" is the length in screen columns.','line_number':2631,'multiline':False]['text':' Get the length in display cells, this can be different from the','line_number':2639,'multiline':False]['text':' number of bytes for "euc-jp".','line_number':2640,'multiline':False]['text':' !FEAT_GUI_GTK','line_number':2644,'multiline':False]['text':' May need to invert it when it's part of the selection.','line_number':2649,'multiline':False]['text':' Invalidate the old physical cursor position if we wrote over it','line_number':2655,'multiline':False]['text':' Draw the sign on top of the spaces.','line_number':2664,'multiline':False]['text':'
 * Undraw the cursor.  This actually redraws the character at the cursor
 * position, plus some more characters when needed.
 ','line_number':2676,'multiline':True]['text':' Always redraw the character just before if there is one, because','line_number':2686,'multiline':False]['text':' with some fonts and characters there can be a one pixel overlap.','line_number':2687,'multiline':False]['text':' Cursor_is_valid is reset when the cursor is undrawn, also reset it','line_number':2697,'multiline':False]['text':' here in case it wasn't needed to undraw it.','line_number':2698,'multiline':False]['text':'
     * We may need to redraw the cursor, but don't take it upon us to change
     * its location after a scroll.
     * (maybe be more strict even and test col too?)
     * These things may be outside the update/clipping region and reality may
     * not reflect Vims internal ideas if these operations are clipped away.
     ','line_number':2718,'multiline':True]['text':'
 * Draw a rectangular block of characters, from row1 to row2 (inclusive) and
 * from col1 to col2 (inclusive).
 ','line_number':2729,'multiline':True]['text':' flags for gui_outstr_nowrap()','line_number':2739,'multiline':False]['text':' Don't try to update when ScreenLines is not valid','line_number':2749,'multiline':False]['text':' Don't try to draw outside the shell!','line_number':2753,'multiline':False]['text':' Check everything, strange values may be caused by a big border width','line_number':2754,'multiline':False]['text':' Remember where our cursor was','line_number':2760,'multiline':False]['text':' When only half of a double-wide character is in the block, include','line_number':2769,'multiline':False]['text':' the other half.','line_number':2770,'multiline':False]['text':' FIXME: how can the first character ever be zero?','line_number':2789,'multiline':False]['text':' Find how many chars back this highlighting starts, or where a space','line_number':2801,'multiline':False]['text':' is.  Needed for when the bold trick is used','line_number':2802,'multiline':False]['text':' Break it up in strings of characters with the same attributes.','line_number':2808,'multiline':False]['text':' Print UTF-8 characters individually.','line_number':2809,'multiline':False]['text':' output multi-byte character separately','line_number':2817,'multiline':False]['text':' output double-byte, single-width character separately','line_number':2827,'multiline':False]['text':' skip second half of double-width char','line_number':2839,'multiline':False]['text':' gui_screenstr() takes care of multibyte chars','line_number':2843,'multiline':False]['text':' Stop at a multi-byte Unicode character.','line_number':2850,'multiline':False]['text':' Stop at a double-byte single-width char.','line_number':2855,'multiline':False]['text':' skip second byte of double-byte char','line_number':2860,'multiline':False]['text':' Must back up to start drawing where a bold or italic word','line_number':2869,'multiline':False]['text':' starts.','line_number':2870,'multiline':False]['text':' Put the cursor back where it was','line_number':2884,'multiline':False]['text':' Scrolled out of region, just blank the lines out','line_number':2897,'multiline':False]['text':' If the cursor was in the deleted lines it's now gone.  If the','line_number':2904,'multiline':False]['text':' cursor was in the scrolled lines adjust its position.','line_number':2905,'multiline':False]['text':' Scrolled out of region, just blank the lines out','line_number':2925,'multiline':False]['text':'
 * Passed to ui_wait_for_chars_or_timer(), ignoring extra arguments.
 ','line_number':2945,'multiline':True]['text':'
 * Returns OK if a character was found to be available within the given time,
 * or FAIL otherwise.
 ','line_number':2958,'multiline':True]['text':'
 * The main GUI input routine.	Waits for a character from the keyboard.
 * "wtime" == -1    Wait forever.
 * "wtime" == 0	    Don't wait.
 * "wtime" > 0	    Wait wtime milliseconds for a character.
 *
 * Returns the number of characters read or zero when timed out or interrupted.
 * "buf" may be NULL, in which case a non-zero number is returned if characters
 * are available.
 ','line_number':2976,'multiline':True]['text':' don't use "time", MIPS cannot handle it','line_number':2990,'multiline':False]['text':' If we're going to wait a bit, update the menus and mouse shape for the','line_number':2996,'multiline':False]['text':' current State.','line_number':2997,'multiline':False]['text':' Got char, return immediately','line_number':3003,'multiline':False]['text':' Don't wait for char','line_number':3009,'multiline':False]['text':' Before waiting, flush any output to the screen.','line_number':3012,'multiline':False]['text':' Blink while waiting for a character.','line_number':3015,'multiline':False]['text':' Common function to loop until "wtime" is met, while handling timers and','line_number':3018,'multiline':False]['text':' other callbacks.','line_number':3019,'multiline':False]['text':'
 * Wait for a character from the keyboard without actually reading it.
 * Also deals with timers.
 * wtime == -1	    Wait forever.
 * wtime == 0	    Don't wait.
 * wtime > 0	    Wait wtime milliseconds for a character.
 * Returns OK if a character was found to be available within the given time,
 * or FAIL otherwise.
 ','line_number':3028,'multiline':True]['text':'
 * Equivalent of mch_inchar() for the GUI.
 ','line_number':3043,'multiline':True]['text':' milliseconds','line_number':3050,'multiline':False]['text':'
 * Fill p[4] with mouse coordinates encoded for check_termcode().
 ','line_number':3056,'multiline':True]['text':'
 * Generic mouse support function.  Add a mouse event to the input buffer with
 * the given properties.
 *  button	    --- may be any of MOUSE_LEFT, MOUSE_MIDDLE, MOUSE_RIGHT,
 *			MOUSE_X1, MOUSE_X2
 *			MOUSE_DRAG, or MOUSE_RELEASE.
 *			MOUSE_4 and MOUSE_5 are used for vertical scroll wheel,
 *			MOUSE_6 and MOUSE_7 for horizontal scroll wheel.
 *  x, y	    --- Coordinates of mouse in pixels.
 *  repeated_click  --- TRUE if this click comes only a short time after a
 *			previous click.
 *  modifiers	    --- Bit field which may be any of the following modifiers
 *			or'ed together: MOUSE_SHIFT | MOUSE_CTRL | MOUSE_ALT.
 * This function will ignore drag events where the mouse has not moved to a new
 * character.
 ','line_number':3068,'multiline':True]['text':'
     * Scrolling may happen at any time, also while a selection is present.
     ','line_number':3103,'multiline':True]['text':' Don't put events in the input queue now.','line_number':3130,'multiline':False]['text':' Don't report a mouse move unless moved to a','line_number':3135,'multiline':False]['text':' different character position.','line_number':3136,'multiline':False]['text':' Pass the pointer coordinates of the scroll event so that we','line_number':3152,'multiline':False]['text':' know which window to scroll.','line_number':3153,'multiline':False]['text':' If a clipboard selection is in progress, handle it','line_number':3179,'multiline':False]['text':' A release event may still need to be sent if the position is equal.','line_number':3184,'multiline':False]['text':' Determine which mouse settings to look for based on the current mode','line_number':3190,'multiline':False]['text':' At the more- and hit-enter prompt pass the','line_number':3209,'multiline':False]['text':' mouse event for a click on or below the','line_number':3210,'multiline':False]['text':' message line.','line_number':3211,'multiline':False]['text':'
	     * On the command line, use the clipboard selection on all lines
	     * but the command line.  But not when pasting.
	     ','line_number':3218,'multiline':True]['text':'
     * Allow clipboard selection of text on the command line in "normal"
     * modes.  Don't do this when dragging the status line, or extending a
     * Visual selection.
     ','line_number':3235,'multiline':True]['text':'
     * Use modeless selection when holding CTRL and SHIFT pressed.
     ','line_number':3251,'multiline':True]['text':'
     * In Ex mode, always use modeless selection.
     ','line_number':3257,'multiline':True]['text':'
     * If the mouse settings say to not use the mouse, use the modeless
     * selection.  But if Visual is active, assume that only the Visual area
     * will be selected.
     * Exception: On the command line, both the selection is used and a mouse
     * key is sent.
     ','line_number':3263,'multiline':True]['text':' Don't do modeless selection in Visual mode.','line_number':3272,'multiline':False]['text':'
	 * When 'mousemodel' is "popup", shift-left is translated to right.
	 * But not when also using Ctrl.
	 ','line_number':3276,'multiline':True]['text':' If the selection is done, allow the right button to extend it.','line_number':3287,'multiline':False]['text':' If the selection is cleared, allow the right button to start it','line_number':3288,'multiline':False]['text':' from the cursor position.','line_number':3289,'multiline':False]['text':' Allow the left button to start the selection','line_number':3310,'multiline':False]['text':' Always allow pasting','line_number':3317,'multiline':False]['text':' Don't put events in the input queue now.','line_number':3332,'multiline':False]['text':'
     * If we are dragging and the mouse hasn't moved far enough to be on a
     * different character, then don't send an event to vim.
     ','line_number':3338,'multiline':True]['text':' Dragging above the window, set "row" to -1 to cause a scroll.','line_number':3346,'multiline':False]['text':'
     * If topline has changed (window scrolled) since the last click, reset
     * repeated_click, because we don't want starting Visual mode when
     * clicking on a different character in the text.
     ','line_number':3351,'multiline':True]['text':' this sequence is recognized by check_termcode()','line_number':3363,'multiline':False]['text':'
	     * Handle multiple clicks.	They only count if the mouse is still
	     * pointing at the same character.
	     ','line_number':3370,'multiline':True]['text':'
     * We need to make sure this is cleared since GTK doesn't tell us when
     * the user is done dragging.
     ','line_number':3403,'multiline':True]['text':'
 * Convert x and y coordinate to column and row in text window.
 * Corrects for multi-byte character.
 * returns column in "*colp" and row as return value;
 ','line_number':3412,'multiline':True]['text':'
 * Callback function for when a menu entry has been selected.
 ','line_number':3428,'multiline':True]['text':' Don't put events in the input queue now.','line_number':3436,'multiline':False]['text':'
 * Set which components are present.
 * If "oldval" is not NULL, "oldval" is the previous value, the new value is
 * in p_go.
 ','line_number':3451,'multiline':True]['text':'
	 * Check if the menus go from grey to non-grey or vice versa.
	 ','line_number':3491,'multiline':True]['text':' make menu's have grey items, ignored here','line_number':3540,'multiline':False]['text':' Ignore options that are not supported','line_number':3553,'multiline':False]['text':' Update the GUI tab line, it may appear or disappear.  This may','line_number':3572,'multiline':False]['text':' cause the non-GUI tab line to disappear or appear.','line_number':3573,'multiline':False]['text':' We don't want a resize event change "Rows" here, save and','line_number':3577,'multiline':False]['text':' restore it.  Resizing is handled below.','line_number':3578,'multiline':False]['text':' may draw non-GUI tab line','line_number':3586,'multiline':False]['text':' The scrollbar needs to be updated when it is shown/unshown and','line_number':3592,'multiline':False]['text':' when switching tab pages.  But the size only changes when it's','line_number':3593,'multiline':False]['text':' shown/unshown.  Thus we need two places to remember whether a','line_number':3594,'multiline':False]['text':' scrollbar is there or not.','line_number':3595,'multiline':False]['text':' We don't want a resize event change "Rows" here, save and','line_number':3625,'multiline':False]['text':' restore it.  Resizing is handled below.','line_number':3626,'multiline':False]['text':' Adjust the size of the window to make the text area keep the','line_number':3660,'multiline':False]['text':' same size and to avoid that part of our window is off-screen','line_number':3661,'multiline':False]['text':' and a scrollbar can't be used, for example.','line_number':3662,'multiline':False]['text':' GTK has the annoying habit of sending us resize events when','line_number':3666,'multiline':False]['text':' changing the window size ourselves.  This mostly happens when','line_number':3667,'multiline':False]['text':' waiting for a character to arrive, quite unpredictably, and may','line_number':3668,'multiline':False]['text':' change Columns and Rows when we don't want it.  Wait for a','line_number':3669,'multiline':False]['text':' character here to avoid this effect.','line_number':3670,'multiline':False]['text':' If you remove this, please test this command for resizing','line_number':3671,'multiline':False]['text':' effects (with optional left scrollbar): ":vsp|q|vsp|q|vsp|q".','line_number':3672,'multiline':False]['text':' Don't do this while starting up though.','line_number':3673,'multiline':False]['text':' Don't change Rows when adding menu/toolbar/tabline.','line_number':3674,'multiline':False]['text':' Don't change Columns when adding vertical toolbar.','line_number':3675,'multiline':False]['text':' When the console tabline appears or disappears the window positions','line_number':3684,'multiline':False]['text':' change.','line_number':3685,'multiline':False]['text':' recompute window positions and heights','line_number':3687,'multiline':False]['text':'
 * Return TRUE if the GUI is taking care of the tabline.
 * It may still be hidden if 'showtabline' is zero.
 ','line_number':3691,'multiline':True]['text':'
 * Return TRUE if the GUI is showing the tabline.
 * This uses 'showtabline'.
 ','line_number':3701,'multiline':True]['text':'
 * Update the tabline.
 * This may display/undisplay the tabline and update the labels.
 ','line_number':3715,'multiline':True]['text':' Updating the tabline uses direct GUI commands, flush','line_number':3727,'multiline':False]['text':' outstanding instructions first. (esp. clear screen)','line_number':3728,'multiline':False]['text':' When the tabs change from hidden to shown or from shown to','line_number':3736,'multiline':False]['text':' hidden the size of the text area should remain the same.','line_number':3737,'multiline':False]['text':'
 * Get the label or tooltip for tab page "tp" into NameBuff[].
 ','line_number':3743,'multiline':True]['text':' TRUE: get tooltip','line_number':3749,'multiline':False]['text':' Use 'guitablabel' or 'guitabtooltip' if it's set.','line_number':3757,'multiline':False]['text':' It's almost as going to the tabpage, but without autocommands.','line_number':3770,'multiline':False]['text':' Can't use NameBuff directly, build_stl_str_hl() uses it.','line_number':3782,'multiline':False]['text':' Back to the original curtab.','line_number':3787,'multiline':False]['text':' If 'guitablabel'/'guitabtooltip' is not set or the result is empty then','line_number':3796,'multiline':False]['text':' use a default label.','line_number':3797,'multiline':False]['text':' Get the buffer name into NameBuff[] and shorten it.','line_number':3800,'multiline':False]['text':'
 * Send the event for clicking to select tab page "nr".
 * Returns TRUE if it was done, FALSE when skipped because we are already at
 * that tab page or the cmdline window is open.
 ','line_number':3824,'multiline':True]['text':' Don't put events in the input queue now.','line_number':3837,'multiline':False]['text':' Set it back to the current tab page.','line_number':3840,'multiline':False]['text':'
 * Send a tabline menu event
 ','line_number':3854,'multiline':True]['text':' Don't put events in the input queue now.','line_number':3862,'multiline':False]['text':' Cannot close the last tabpage.','line_number':3866,'multiline':False]['text':'
 * Scrollbar stuff:
 ','line_number':3881,'multiline':True]['text':'
 * Remove all scrollbars.  Used before switching to another tab page.
 ','line_number':3885,'multiline':True]['text':' No check for too big, but would it happen?','line_number':3912,'multiline':False]['text':'
 * Find the scrollbar with the given index.
 ','line_number':3925,'multiline':True]['text':'
 * For most systems: Put a code in the input buffer for a dragged scrollbar.
 *
 * For Win32, Macintosh and GTK+ 2:
 * Scrollbars seem to grab focus and vim doesn't read the input queue until
 * you stop dragging the scrollbar.  We get here each time the scrollbar is
 * dragged another pixel, but as far as the rest of vim goes, it thinks
 * we're just hanging in the call to DispatchMessage() in
 * process_message().  The DispatchMessage() call that hangs was passed a
 * mouse button click event in the scrollbar window. -- webb.
 *
 * Solution: Do the scrolling right here.  But only when allowed.
 * Ignore the scrollbars while executing an external command or when there
 * are still characters to be processed.
 ','line_number':3945,'multiline':True]['text':' Don't put events in the input queue now.','line_number':3979,'multiline':False]['text':' Keep the "dragged_wp" value until after the scrolling, for when the','line_number':4000,'multiline':False]['text':' mouse button is released.  GTK2 doesn't send the button-up event.','line_number':4001,'multiline':False]['text':' Vertical sbar info is kept in the first sbar (the left one)','line_number':4006,'multiline':False]['text':'
     * Check validity of value
     ','line_number':4010,'multiline':True]['text':' When not allowed to do the scrolling right now, return.','line_number':4026,'multiline':False]['text':' This also checked input_available(), but that causes the first click in','line_number':4027,'multiline':False]['text':' a scrollbar to be ignored when Vim doesn't have focus.','line_number':4028,'multiline':False]['text':' Disallow scrolling the current window when the completion popup menu is','line_number':4032,'multiline':False]['text':' visible.','line_number':4033,'multiline':False]['text':' vertical scrollbar','line_number':4046,'multiline':False]['text':' Value may have been changed for closed fold.','line_number':4076,'multiline':False]['text':' When dragging one scrollbar and there is another one at the other','line_number':4080,'multiline':False]['text':' side move the thumb of that one too.','line_number':4081,'multiline':False]['text':' update window, status and cmdline','line_number':4116,'multiline':False]['text':'
     * synchronize other windows, as necessary according to 'scrollbind'
     ','line_number':4128,'multiline':True]['text':' need to update the window right here','line_number':4140,'multiline':False]['text':'
 * Scrollbar stuff:
 ','line_number':4154,'multiline':True]['text':'
 * Called when something in the window layout has changed.
 ','line_number':4158,'multiline':True]['text':' Force all scrollbars to get updated','line_number':4175,'multiline':False]['text':' need 32 bits here','line_number':4179,'multiline':False]['text':' Update the horizontal scrollbar','line_number':4184,'multiline':False]['text':' Return straight away if there is neither a left nor right scrollbar.','line_number':4188,'multiline':False]['text':' On MS-Windows this is required anyway for scrollwheel messages.','line_number':4189,'multiline':False]['text':'
     * Don't want to update a scrollbar while we're dragging it.  But if we
     * have both a left and right scrollbar, and we drag one of them, we still
     * need to update the other one.
     ','line_number':4194,'multiline':True]['text':'
	 * If we have two scrollbars and one of them is being dragged, just
	 * copy the scrollbar position from the dragged one to the other one.
	 ','line_number':4203,'multiline':True]['text':' avoid that moving components around generates events','line_number':4216,'multiline':False]['text':' just in case','line_number':4221,'multiline':False]['text':' Skip a scrollbar that is being dragged.','line_number':4223,'multiline':False]['text':' empty buffer','line_number':4234,'multiline':False]['text':' just in case','line_number':4239,'multiline':False]['text':' just in case','line_number':4242,'multiline':False]['text':' minimal value is 0','line_number':4247,'multiline':False]['text':'
	 * Scrollbar at index 0 (the left one) contains all the information.
	 * It would be the same info for left and right so we just store it for
	 * one of them.
	 ','line_number':4250,'multiline':True]['text':'
	 * Note: no check for valid w_botline.	If it's not valid the
	 * scrollbars will be updated later anyway.
	 ','line_number':4257,'multiline':True]['text':'
	     * This can happen during changing files.  Just don't update the
	     * scrollbar for now.
	     ','line_number':4263,'multiline':True]['text':' Force update next time','line_number':4267,'multiline':False]['text':' Height, width or position of scrollbar has changed.  For','line_number':4280,'multiline':False]['text':' vertical split: curwin changed.','line_number':4281,'multiline':False]['text':' Calculate height and position in pixels','line_number':4287,'multiline':False]['text':' Height of top scrollbar includes width of top border','line_number':4308,'multiline':False]['text':' Thumb of scrollbar has moved','line_number':4330,'multiline':False]['text':' update the title, it may show the scroll position','line_number':4345,'multiline':False]['text':'
 * Enable or disable a scrollbar.
 * Check for scrollbars for vertically split windows which are not enabled
 * sometimes.
 ','line_number':4352,'multiline':True]['text':' SBAR_LEFT or SBAR_RIGHT','line_number':4360,'multiline':False]['text':' TRUE to enable scrollbar','line_number':4361,'multiline':False]['text':' Only enable scrollbars that contain the middle column of the current','line_number':4367,'multiline':False]['text':' window.','line_number':4368,'multiline':False]['text':' Scrollbars only on one side.  Don't enable scrollbars that don't','line_number':4371,'multiline':False]['text':' contain the middle column of the current window.','line_number':4372,'multiline':False]['text':' Scrollbars on both sides.  Don't enable scrollbars that neither','line_number':4378,'multiline':False]['text':' contain the middle column of the current window nor are on the far','line_number':4379,'multiline':False]['text':' side.','line_number':4380,'multiline':False]['text':'
 * Scroll a window according to the values set in the globals
 * "current_scrollbar" and "scrollbar_value".
 * Return TRUE if the cursor in the current window moved or FALSE otherwise.
 * may eventually cause a redraw using updateWindow
 ','line_number':4396,'multiline':True]['text':' Couldn't find window','line_number':4418,'multiline':False]['text':' don't redraw, LineOffset and similar are not valid!','line_number':4420,'multiline':False]['text':'
     * Compute number of lines to scroll.  If zero, nothing to do.
     ','line_number':4424,'multiline':True]['text':' Reset dragged_wp after using it.  "dragged_sb" will have been reset for','line_number':4443,'multiline':False]['text':' the mouse-up event already, but we still want it to behave like when','line_number':4444,'multiline':False]['text':' dragging.  But not the next click in an arrow.','line_number':4445,'multiline':False]['text':' fix window for 'so'','line_number':4457,'multiline':False]['text':' avoid up/down jump','line_number':4458,'multiline':False]['text':' Make sure wp->w_leftcol and wp->w_skipcol are correct.','line_number':4465,'multiline':False]['text':'
     * Don't call updateWindow() when nothing has changed (it will overwrite
     * the status line!).
     ','line_number':4471,'multiline':True]['text':' Don't set must_redraw here, it may cause the popup menu to','line_number':4490,'multiline':False]['text':' disappear when losing focus after a scrollbar drag.','line_number':4491,'multiline':False]['text':' update window, status line, and cmdline','line_number':4495,'multiline':False]['text':' May need to redraw the popup menu.','line_number':4499,'multiline':False]['text':'
 * Horizontal scrollbar stuff:
 ','line_number':4506,'multiline':True]['text':'
     * It is possible for the cursor to be invalid if we're in the middle of
     * something (like changing files).  If so, don't do anything for now.
     ','line_number':4523,'multiline':True]['text':' May move the cursor even further to the right.','line_number':4550,'multiline':False]['text':' The line number isn't scrolled, thus there is less space when','line_number':4558,'multiline':False]['text':' 'number' or 'relativenumber' is set (also for 'foldcolumn').','line_number':4559,'multiline':False]['text':' limit the value to allowable range','line_number':4568,'multiline':False]['text':'
 * Check that none of the colors are the same as the background color
 ','line_number':4594,'multiline':True]['text':'
 * Allocate a color by name.
 * Returns INVALCOLOR and gives an error message when failed.
 ','line_number':4622,'multiline':True]['text':'
 * Return the grey value of a color (range 0-255).
 ','line_number':4650,'multiline':True]['text':'
 * Option initializations that can only be done after opening the GUI window.
 ','line_number':4671,'multiline':True]['text':' Set the 'background' option according to the lightness of the','line_number':4677,'multiline':False]['text':' background color, unless the user has set it already.','line_number':4678,'multiline':False]['text':' Nothing to do if GUI hasn't started yet.','line_number':4692,'multiline':False]['text':'
 * Call this when focus has changed.
 ','line_number':4705,'multiline':True]['text':'
 * Skip this code to avoid drawing the cursor when debugging and switching
 * between the debugger window and gvim.
 ','line_number':4711,'multiline':True]['text':' Put events in the input queue only when allowed.','line_number':4723,'multiline':False]['text':' ui_focus_change() isn't called directly, because it invokes','line_number':4724,'multiline':False]['text':' autocommands and that must not happen asynchronously.','line_number':4725,'multiline':False]['text':'
 * When mouse moved: apply 'mousefocus'.
 * Also updates the mouse pointer shape.
 ','line_number':4738,'multiline':True]['text':' Get window pointer, and update mouse shape as well.','line_number':4749,'multiline':False]['text':' Only handle this when 'mousefocus' set and ...','line_number':4753,'multiline':False]['text':' not holding events','line_number':4755,'multiline':False]['text':' Normal/Visual/Insert mode','line_number':4756,'multiline':False]['text':' but not hit-return prompt','line_number':4757,'multiline':False]['text':' no scrolled message','line_number':4758,'multiline':False]['text':' not moving the pointer','line_number':4759,'multiline':False]['text':' gvim in focus','line_number':4760,'multiline':False]['text':' Don't move the mouse when it's left or right of the Vim window','line_number':4762,'multiline':False]['text':' still in the same old window, or none at all','line_number':4769,'multiline':False]['text':' Ignore position in the tab pages line.','line_number':4771,'multiline':False]['text':'
	 * Format a mouse click on status line input,
	 * ala gui_send_mouse_event(0, x, y, 0, 0);
	 * Trick: Use a column number -1, so that get_pseudo_mouse_code() will
	 * generate a K_LEFTMOUSE_NM key code.
	 ','line_number':4775,'multiline':True]['text':' abort the current operator first','line_number':4783,'multiline':False]['text':' Need to wake up the main loop','line_number':4799,'multiline':False]['text':'
 * Called when the mouse moved (but not when dragging).
 ','line_number':4806,'multiline':True]['text':' Ignore this while still starting up.','line_number':4812,'multiline':False]['text':' apply 'mousefocus' and pointer shape','line_number':4816,'multiline':False]['text':' Generate a mouse-moved event. For a <MouseMove> mapping. Or so the','line_number':4824,'multiline':False]['text':' popup can perhaps be closed, just like in the terminal.','line_number':4825,'multiline':False]['text':'
 * Get the window where the mouse pointer is on.
 * Returns NULL if not found.
 ','line_number':4829,'multiline':True]['text':' Only use the mouse when it's on the Vim window','line_number':4842,'multiline':False]['text':'
 * Called when mouse should be moved to window with focus.
 ','line_number':4849,'multiline':True]['text':' If in other than current window','line_number':4863,'multiline':False]['text':'
 * Find window where the mouse pointer "x" / "y" coordinate is in.
 * As a side effect update the shape of the mouse pointer.
 ','line_number':4870,'multiline':True]['text':' before first window','line_number':4883,'multiline':False]['text':' below status line','line_number':4896,'multiline':False]['text':'
 * ":gui" and ":gvim": Change from the terminal version to the GUI version.
 * File names may be given to redefine the args list.
 ','line_number':4910,'multiline':True]['text':'
     * Check for "-f" argument: foreground, don't fork.
     * Also don't fork when started with "gvim -f".
     * Do fork when using "gui -b".
     ','line_number':4919,'multiline':True]['text':' Clear the command.  Needed for when forking+exiting, to avoid part','line_number':4940,'multiline':False]['text':' of the argument ending up after the shell prompt.','line_number':4941,'multiline':False]['text':'
 * This is shared between Haiku, Motif, and GTK.
 ','line_number':4961,'multiline':True]['text':'
 * Callback function for do_in_runtimepath().
 ','line_number':4965,'multiline':True]['text':'
 * Find the path of bitmap "name" with extension "ext" in 'runtimepath'.
 * Return FAIL for failure and OK if buffer[MAXPATHL] contains the result.
 ','line_number':4979,'multiline':True]['text':'
 * Given the name of the "icon=" argument, try finding the bitmap file for the
 * icon.  If it is an absolute path name, use it as it is.  Otherwise append
 * "ext" and search for it in 'runtimepath'.
 * The result is put in "buffer[MAXPATHL]".  If something fails "buffer"
 * contains "name".
 ','line_number':4996,'multiline':True]['text':' avoid putting up a message box with blanks only','line_number':5031,'multiline':False]['text':' Truncate a very long message, it will go off-screen.','line_number':5035,'multiline':False]['text':'
 * Return TRUE if still starting up and there is no place to enter text.
 * For GTK and X11 we check if stderr is not a tty, which means we were
 * (probably) started from the desktop.  Also check stdin, "vim >& file" does
 * allow typing on stdin.
 ','line_number':5047,'multiline':True]['text':'
 * Update the current window and the screen.
 ','line_number':5067,'multiline':True]['text':' Trigger CursorMoved if the cursor moved.','line_number':5082,'multiline':False]['text':' may need to update the screen','line_number':5125,'multiline':False]['text':'
 * Get the text to use in a find/replace dialog.  Uses the last search pattern
 * if the argument is empty.
 * Returns an allocated string.
 ','line_number':5132,'multiline':True]['text':' return: TRUE if \< \> found','line_number':5140,'multiline':False]['text':' return: TRUE if \C found','line_number':5141,'multiline':False]['text':' Remove "\V"','line_number':5157,'multiline':False]['text':' Recognize "\c" and "\C" and remove.','line_number':5164,'multiline':False]['text':' Recognize "\<text\>" and remove.','line_number':5172,'multiline':False]['text':' Recognize "\/" or "\?" and remove.','line_number':5182,'multiline':False]['text':'
 * Handle the press of a button in the find-replace dialog.
 * Return TRUE when something was added to the input buffer.
 ','line_number':5195,'multiline':True]['text':' one of FRD_REPLACE, FRD_FINDNEXT, etc.','line_number':5201,'multiline':False]['text':' Search downwards.','line_number':5204,'multiline':False]['text':' When the screen is being updated we should not change buffers and','line_number':5214,'multiline':False]['text':' windows structures, it may cause freed memory to be used.  Also don't','line_number':5215,'multiline':False]['text':' do this recursively (pressing "Find" quickly several times).','line_number':5216,'multiline':False]['text':' refuse replace when text cannot be changed','line_number':5220,'multiline':False]['text':' escape slash and backslash','line_number':5237,'multiline':False]['text':' Escape slash and backslash.','line_number':5248,'multiline':False]['text':' Also escape tilde and ampersand if 'magic' is set.','line_number':5249,'multiline':False]['text':' Do the replacement when the text at the cursor matches.  Thus no','line_number':5261,'multiline':False]['text':' replacement is done if the cursor was moved!','line_number':5262,'multiline':False]['text':' Clear the command line to remove any old "No match"','line_number':5271,'multiline':False]['text':' error.','line_number':5272,'multiline':False]['text':' A button was pressed thus undo should be synced.','line_number':5277,'multiline':False]['text':' A button was pressed, thus undo should be synced.','line_number':5293,'multiline':False]['text':' Search for the next match.','line_number':5301,'multiline':False]['text':' Don't skip text under cursor for single replace.','line_number':5302,'multiline':False]['text':' We need to escape '?' if and only if we are searching in the up','line_number':5312,'multiline':False]['text':' direction','line_number':5313,'multiline':False]['text':' don't let an error message set msg_scroll','line_number':5320,'multiline':False]['text':' Don't want to pass did_emsg to other code, it may cause disabling','line_number':5323,'multiline':False]['text':' syntax HL if we were busy redrawing.','line_number':5324,'multiline':False]['text':' update the screen','line_number':5329,'multiline':False]['text':' overwrite any message','line_number':5330,'multiline':False]['text':' don't wait for return','line_number':5331,'multiline':False]['text':'
 * Jump to the window at specified point (x, y).
 ','line_number':5342,'multiline':True]['text':'
 * Function passed to handle_drop() for the actions to be done after the
 * argument list has been updated.
 ','line_number':5360,'multiline':True]['text':' If Shift held down, change to first file's directory.  If the first','line_number':5370,'multiline':False]['text':' item is a directory, change to that directory (and let the explorer','line_number':5371,'multiline':False]['text':' plugin show the contents).','line_number':5372,'multiline':False]['text':' Update the screen display','line_number':5390,'multiline':False]['text':'
 * Process file drop.  Mouse cursor position, key modifiers, name of files
 * and count of files are given.  Argument "fnames[count]" has full pathnames
 * of dropped files, they will be freed in this function, and caller can't use
 * fnames after call this function.
 ','line_number':5400,'multiline':True]['text':'
     * This function is called by event handlers.  Just in case we get a
     * second event before the first one is handled, ignore the second one.
     * Not sure if this can ever happen, just in case.
     ','line_number':5418,'multiline':True]['text':'
     * When the cursor is at the command line, add the file names to the
     * command line, don't edit the files.
     ','line_number':5427,'multiline':True]['text':' We don't know what command is used thus we can't be sure','line_number':5441,'multiline':False]['text':' about which characters need to be escaped.  Only escape the','line_number':5442,'multiline':False]['text':' most common ones.','line_number':5443,'multiline':False]['text':' Go to the window under mouse cursor, then shorten given "fnames" by','line_number':5459,'multiline':False]['text':' current window, because a window can have local current dir.','line_number':5460,'multiline':False]['text':' If Shift held down, remember the first item.','line_number':5464,'multiline':False]['text':' Handle the drop, :edit or :split to get to the file.  This also','line_number':5470,'multiline':False]['text':' frees fnames[].  Skip this if there is only one item, it's a','line_number':5471,'multiline':False]['text':' directory and Shift is held down.','line_number':5472,'multiline':False]['text':'
 * Check if "key" is to interrupt us.  Handles a key that has not had modifiers
 * applied yet.
 * Return the key with modifiers applied if so, NUL if not.
 ','line_number':5489,'multiline':True]['text':'
 * If the "--gui-log-file fname" argument is given write the dialog title and
 * message to a file and return TRUE.  Otherwise return FALSE.
 * When there is any problem opening the file or writing to the file this is
 * ignored, showing the dialog might get the test to get stuck.
 ','line_number':5512,'multiline':True]