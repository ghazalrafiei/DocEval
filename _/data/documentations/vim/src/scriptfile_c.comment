['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * scriptfile.c: functions for dealing with the runtime directories/files
 ','line_number':10,'multiline':True]['text':' The names of packages that once were loaded are remembered.','line_number':17,'multiline':False]['text':' last used sequence number for sourcing scripts (current_sctx.sc_seq)','line_number':21,'multiline':False]['text':'
 * Initialize the execution stack.
 ','line_number':28,'multiline':True]['text':'
 * Add an item to the execution stack.
 * Returns the new entry or NULL when out of memory.
 ','line_number':48,'multiline':True]['text':' If memory allocation fails then we'll pop more than we push, eventually','line_number':57,'multiline':False]['text':' at the top level it will be OK again.','line_number':58,'multiline':False]['text':'
 * Add a user function to the execution stack.
 ','line_number':74,'multiline':True]['text':'
 * Return TRUE if "ufunc" with "lnum" is already at the top of the exe stack.
 ','line_number':88,'multiline':True]['text':'
 * Take an item off of the execution stack and return it.
 ','line_number':106,'multiline':True]['text':'
 * Get the current value for "which" in allocated memory.
 * "which" is ESTACK_SFILE for <sfile>, ESTACK_STACK for <stack> or
 * ESTACK_SCRIPT for <script>.
 ','line_number':118,'multiline':True]['text':' expand('<sfile>') works in a function for backwards compatibility, but','line_number':144,'multiline':False]['text':' may give an unexpected result.  Disallow it in Vim 9 script.','line_number':145,'multiline':False]['text':' f_expand() silences errors but we do want this one','line_number':151,'multiline':False]['text':' If evaluated in a function or autocommand, return the path of the script','line_number':158,'multiline':False]['text':' where it is defined, at script level the current script path is returned','line_number':159,'multiline':False]['text':' instead.','line_number':160,'multiline':False]['text':' Walk the stack backwards, starting from the current frame.','line_number':163,'multiline':False]['text':' Give information about each stack entry up to the root.','line_number':182,'multiline':False]['text':' For a function we compose the call stack, as it was done in the past:','line_number':183,'multiline':False]['text':'   "function One[123]..Two[456]..Three"','line_number':184,'multiline':False]['text':' For class methods prepend "<class name>." to the function name.','line_number':217,'multiline':False]['text':' For the bottom entry of <sfile>: do not add the line number, it is used in','line_number':222,'multiline':False]['text':' <slnum>.  Also leave it out when the number is not set.','line_number':223,'multiline':False]['text':'
 * Get DIP_ flags from the [where] argument of a :runtime command.
 * "*argp" is advanced to after the [where] argument if it is found.
 ','line_number':237,'multiline':True]['text':'
 * ":runtime [where] {name}"
 ','line_number':273,'multiline':True]['text':'
 * Set the completion context for the :runtime command.
 ','line_number':288,'multiline':True]['text':' Skip to the last argument.','line_number':297,'multiline':False]['text':' When there are multiple arguments and [where] is not specified,','line_number':301,'multiline':False]['text':' use an unrelated non-zero flag to avoid expanding [where].','line_number':302,'multiline':False]['text':'
 * Find an already loaded script "name".
 * If found returns its script ID.  If not found returns -1.
 ','line_number':317,'multiline':True]['text':' We used to check inode here, but that doesn't work:','line_number':329,'multiline':False]['text':' - If a script is edited and written, it may get a different','line_number':330,'multiline':False]['text':'   inode number, even though to the user it is the same script.','line_number':331,'multiline':False]['text':' - If a script is deleted and another script is written, with a','line_number':332,'multiline':False]['text':'   different name, the inode may be re-used.','line_number':333,'multiline':False]['text':'
 * Add a new scriptitem with all items initialized.
 * When running out of memory "error" is set to FAIL.
 * Returns the script ID.
 ','line_number':341,'multiline':True]['text':' Allocate the local script variables to use for this script.','line_number':371,'multiline':False]['text':' "si" can't be NULL, check only to avoid a compiler warning','line_number':382,'multiline':False]['text':' Used to check script variable index is still valid.','line_number':384,'multiline':False]['text':' script does not exist yet, create a new scriptitem','line_number':414,'multiline':False]['text':'
 * Find the patterns in "name" in all directories in "path" and invoke
 * "callback(fname, cookie)".
 * "prefix" is prepended to each pattern in "name".
 * When "flags" has DIP_ALL: source all files, otherwise only the first one.
 * When "flags" has DIP_DIR: find directories instead of files.
 * When "flags" has DIP_ERR: give an error message if there is no match.
 *
 * Return FAIL when no file could be sourced, OK otherwise.
 ','line_number':420,'multiline':True]['text':' Avoid a requester here for a volume that doesn't exist.','line_number':452,'multiline':False]['text':' Make a copy of 'runtimepath'.  Invoking the callback may change the','line_number':456,'multiline':False]['text':' value.','line_number':457,'multiline':False]['text':' Loop over all entries in 'runtimepath'.','line_number':474,'multiline':False]['text':' Copy the path from 'runtimepath' to buf[].','line_number':480,'multiline':False]['text':' Skip after or non-after directories.','line_number':484,'multiline':False]['text':' Loop over all patterns in "name"','line_number':507,'multiline':False]['text':' Append the pattern from "name" to buf[].','line_number':511,'multiline':False]['text':' Expand wildcards, invoke the callback for each match.','line_number':522,'multiline':False]['text':'
 * Find "name" in "path".  When found, invoke the callback function for
 * it: callback(fname, "cookie")
 * When "flags" has DIP_ALL repeat for all matches, otherwise only the first
 * one is used.
 * Returns OK when at least one match found, FAIL otherwise.
 *
 * If "name" is NULL calls callback for each entry in "path". Cookie is
 * passed by reference in this case, setting it to NULL indicates that callback
 * has done its job.
 ','line_number':562,'multiline':True]['text':'
 * Just like do_in_path_and_pp(), using 'runtimepath' for "path".
 ','line_number':597,'multiline':True]['text':'
 * Source the file "name" from all directories in 'runtimepath'.
 * "name" can contain wildcards.
 * When "flags" has DIP_ALL: source all files, otherwise only the first one.
 *
 * return FAIL when no file could be sourced, OK otherwise.
 ','line_number':610,'multiline':True]['text':'
 * Just like source_runtime(), but use "path" instead of 'runtimepath'
 * and return the script ID in "ret_sid".
 ','line_number':623,'multiline':True]['text':'
 * Find "name" in 'runtimepath'. If found a new scriptitem is created for it
 * and it's script ID is returned.
 * If not found returns -1.
 ','line_number':635,'multiline':True]['text':'
 * Expand wildcards in "pat" and invoke do_source() for each match.
 ','line_number':650,'multiline':True]['text':'
 * Add the package directory to 'runtimepath'.
 ','line_number':668,'multiline':True]['text':' now we have:','line_number':700,'multiline':False]['text':' rtp/pack/name/start/name','line_number':701,'multiline':False]['text':'    p4   p3   p2    p1','line_number':702,'multiline':False]['text':'','line_number':703,'multiline':False]['text':' find the part up to "pack" in 'runtimepath'','line_number':704,'multiline':False]['text':' append pathsep in order to expand symlink','line_number':705,'multiline':False]['text':' Find "ffname" in "p_rtp", ignoring '/' vs '\' differences.','line_number':712,'multiline':False]['text':' Also stop at the first "after" directory.','line_number':713,'multiline':False]['text':' Did not find "ffname" before the first "after" directory,','line_number':730,'multiline':False]['text':' insert it before this entry.','line_number':731,'multiline':False]['text':' Insert "ffname" after this entry (and comma).','line_number':746,'multiline':False]['text':' Both "fname" and "after" not found, append at the end.','line_number':752,'multiline':False]['text':' check if rtp/pack/name/start/name/after exists','line_number':755,'multiline':False]['text':' add one for comma','line_number':758,'multiline':False]['text':' add one for comma','line_number':761,'multiline':False]['text':' add one for NUL','line_number':762,'multiline':False]['text':' We now have 'rtp' parts: {keep}{keep_after}{rest}.','line_number':766,'multiline':False]['text':' Create new_rtp, first: {keep},{fname}','line_number':767,'multiline':False]['text':' add comma before','line_number':772,'multiline':False]['text':' add comma after','line_number':776,'multiline':False]['text':' Add to new_rtp: {keep},{fname}{keep_after},{afterdir}','line_number':782,'multiline':False]['text':' Append rest: {keep},{fname}{keep_after},{afterdir}{rest}','line_number':793,'multiline':False]['text':' Append afterdir when "after" was not found:','line_number':800,'multiline':False]['text':' {keep},{fname}{rest},{afterdir}','line_number':801,'multiline':False]['text':'
 * Load scripts in "plugin" and "ftdetect" directories of the package.
 ','line_number':817,'multiline':True]['text':' If runtime/filetype.vim wasn't loaded yet, the scripts will be','line_number':842,'multiline':False]['text':' found when it loads.','line_number':843,'multiline':False]['text':' used for "cookie" of add_pack_plugin()','line_number':861,'multiline':False]['text':' directory is not yet in 'runtimepath', add it','line_number':889,'multiline':False]['text':'
 * Add all packages in the "start" directory to 'runtimepath'.
 ','line_number':898,'multiline':True]['text':'
 * Load plugins from all packages in the "start" directory.
 ','line_number':908,'multiline':True]['text':'
 * ":packloadall"
 * Find plugins in the package directories and source them.
 ','line_number':919,'multiline':True]['text':' First do a round to add all directories to 'runtimepath', then load','line_number':928,'multiline':False]['text':' the plugins. This allows for plugins to use an autoload directory','line_number':929,'multiline':False]['text':' of another plugin.','line_number':930,'multiline':False]['text':'
 * ":packadd[!] {name}"
 ','line_number':936,'multiline':True]['text':' Round 1: use "start", round 2: use "opt".','line_number':948,'multiline':False]['text':' Only look under "start" when loading packages wasn't done yet.','line_number':951,'multiline':False]['text':' The first round don't give a "not found" error, in the second round','line_number':960,'multiline':False]['text':' only when nothing was found in the first round.','line_number':961,'multiline':False]['text':'
 * Sort "gap" and remove duplicate entries.  "gap" is expected to contain a
 * list of file names in allocated memory.
 ','line_number':970,'multiline':True]['text':' empty dir used for :runtime','line_number':1015,'multiline':False]['text':' expand dir names in another round','line_number':1038,'multiline':False]['text':' Sort and remove duplicates which can happen when specifying multiple','line_number':1077,'multiline':False]['text':' directories in dirnames.','line_number':1078,'multiline':False]['text':'
 * Expand runtime file names.
 * Search from 'runtimepath':
 *   'runtimepath'/{dirnames}/{pat}.vim
 * When "flags" has DIP_START: search also from "start" of 'packpath':
 *   'packpath'/pack/ * /start/ * /{dirnames}/{pat}.vim
 * When "flags" has DIP_OPT: search also from "opt" of 'packpath':
 *   'packpath'/pack/ * /opt/ * /{dirnames}/{pat}.vim
 * "dirnames" is an array with one or more directory names.
 ','line_number':1082,'multiline':True]['text':'
 * Handle command line completion for :runtime command.
 ','line_number':1116,'multiline':True]['text':' Try to complete values for [where] argument when none was found.','line_number':1132,'multiline':False]['text':'
 * Expand loadplugin names:
 * 'packpath'/pack/ * /opt/{pat}
 ','line_number':1153,'multiline':True]['text':' Sort and remove duplicates which can happen when specifying multiple','line_number':1196,'multiline':False]['text':' directories in dirnames.','line_number':1197,'multiline':False]['text':' ++clear argument is supplied','line_number':1212,'multiline':False]['text':' if a filename is specified to :source, then a range is not allowed','line_number':1224,'multiline':False]['text':' a file name is needed to source normal mode commands','line_number':1232,'multiline':False]['text':' source ex commands from the current buffer','line_number':1235,'multiline':False]['text':' ":source!": read Normal mode commands','line_number':1239,'multiline':False]['text':' Need to execute the commands directly.  This is required at least','line_number':1240,'multiline':False]['text':' for:','line_number':1241,'multiline':False]['text':' - ":g" command busy','line_number':1242,'multiline':False]['text':' - after ":argdo", ":windo" or ":bufdo"','line_number':1243,'multiline':False]['text':' - another command follows','line_number':1244,'multiline':False]['text':' - inside a loop','line_number':1245,'multiline':False]['text':' ":source" read ex commands','line_number':1252,'multiline':False]['text':'
 * ":source {fname}"
 ','line_number':1257,'multiline':True]['text':'
 * ":options"
 ','line_number':1283,'multiline':True]['text':'
 * ":source" and associated commands.
 ','line_number':1301,'multiline':True]['text':'
 * Return the address holding the next breakpoint line for a source cookie.
 ','line_number':1306,'multiline':True]['text':'
 * Return the address holding the debug tick for a source cookie.
 ','line_number':1315,'multiline':True]['text':'
 * Return the nesting level for a source cookie.
 ','line_number':1324,'multiline':True]['text':'
 * Return the readahead line. Note that the pointer may become invalid when
 * getting the next line, if it's concatenated with the next one.
 ','line_number':1333,'multiline':True]['text':'
 * Special function to open a file without handle inheritance.
 * When possible the handle is closed on exec().
 ','line_number':1346,'multiline':True]['text':'
 * Initialization for sourcing lines from the current buffer. Reads all the
 * lines from the buffer and stores it in the cookie grow array.
 * Returns a pointer to the name ":source buffer=<n>" on success and NULL on
 * failure.
 ','line_number':1374,'multiline':True]['text':' Use ":source buffer=<num>" as the script name','line_number':1392,'multiline':False]['text':' Copy the lines from the buffer into a grow array','line_number':1400,'multiline':False]['text':'
 * Read the file "fname" and execute its lines as EX commands.
 * When "ret_sid" is not NULL and we loaded the script before, don't load it
 * again.
 *
 * The "eap" argument is used when sourcing lines from a buffer instead of a
 * file.
 *
 * If "clearvars" is TRUE, then for scripts which are loaded more than
 * once, clear all the functions and variables previously defined in that
 * script.
 *
 * This function may be called recursively!
 *
 * Return FAIL if file could not be opened, OK otherwise.
 * If a scriptitem_T was found or created "*ret_sid" is set to the SID.
 ','line_number':1421,'multiline':True]['text':' check for .vimrc and _vimrc','line_number':1441,'multiline':False]['text':' DOSO_ value','line_number':1442,'multiline':False]['text':' sourcing lines from a buffer','line_number':1475,'multiline':False]['text':' See if we loaded this script before.','line_number':1497,'multiline':False]['text':' Already loaded and no need to load again, return here.','line_number':1502,'multiline':False]['text':' Apply SourceCmd autocommands, they should get the file and source it.','line_number':1509,'multiline':False]['text':' Apply SourcePost autocommands.','line_number':1520,'multiline':False]['text':' Apply SourcePre autocommands, they may get the file.','line_number':1526,'multiline':False]['text':' Try again, replacing file name ".vimrc" by "_vimrc" or vice versa,','line_number':1539,'multiline':False]['text':' and ".exrc" by "_exrc" or vice versa.','line_number':1540,'multiline':False]['text':' The file exists.','line_number':1574,'multiline':False]['text':' - In verbose mode, give a message.','line_number':1575,'multiline':False]['text':' - For a vimrc file, may want to set 'compatible', call vimrc_found().','line_number':1576,'multiline':False]['text':' If no automatic file format: Set default to CR-NL.','line_number':1592,'multiline':False]['text':' When sourcing a range of lines from a buffer, use the buffer line','line_number':1600,'multiline':False]['text':' number.','line_number':1601,'multiline':False]['text':' Check if this script has a breakpoint.','line_number':1607,'multiline':False]['text':' "legacy" does not apply to commands in the script','line_number':1620,'multiline':False]['text':' When the ":vim9cmd" command modifier is used, source the script as a','line_number':1625,'multiline':False]['text':' Vim9 script.','line_number':1626,'multiline':False]['text':' default script version','line_number':1629,'multiline':False]['text':' entering a child now','line_number':1636,'multiline':False]['text':' Don't use local function variables, if called from a function.','line_number':1639,'multiline':False]['text':' Also starts profiling timer for nested script.','line_number':1640,'multiline':False]['text':' Reset "KeyTyped" to avoid some commands thinking they are invoked','line_number':1643,'multiline':False]['text':' interactively.  E.g. defining a function would output indent.','line_number':1644,'multiline':False]['text':' Check if this script was sourced before to find its SID.','line_number':1648,'multiline':False]['text':' Always use a new sequence number.','line_number':1649,'multiline':False]['text':' loading the same script again','line_number':1658,'multiline':False]['text':' this script was found but not loaded yet','line_number':1663,'multiline':False]['text':' Script-local variables remain but "const" can be set again.','line_number':1672,'multiline':False]['text':' In Vim9 script variables will be cleared when "vim9script"','line_number':1673,'multiline':False]['text':' is encountered without the "noclear" argument.','line_number':1674,'multiline':False]['text':' imports can be redefined once','line_number':1684,'multiline':False]['text':' reset version, "vim9script" may have been added or removed.','line_number':1690,'multiline':False]['text':' It's new, generate a new SID and initialize the scriptitem.','line_number':1698,'multiline':False]['text':' used for autocmd','line_number':1705,'multiline':False]['text':' Remember the "is_vimrc" flag for when the file is sourced again.','line_number':1709,'multiline':False]['text':' Keep the sourcing name/lnum, for recursive calls.','line_number':1713,'multiline':False]['text':' Check if we do profiling for this script.','line_number':1722,'multiline':False]['text':' Keep the sourcing name/lnum, for recursive calls.','line_number':1737,'multiline':False]['text':' no conversion','line_number':1741,'multiline':False]['text':' Read the first line so we can check for a UTF-8 BOM.','line_number':1743,'multiline':False]['text':' Found BOM; setup conversion, skip over BOM and recode the line.','line_number':1748,'multiline':False]['text':' Call do_cmdline, which will call getsourceline() to get the lines.','line_number':1760,'multiline':False]['text':' Get "si" again, "script_items" may have been reallocated.','line_number':1768,'multiline':False]['text':' After a "finish" in debug mode, need to break at first command of next','line_number':1808,'multiline':False]['text':' sourced file.','line_number':1809,'multiline':False]['text':' If "sn_save_cpo" is set that means we encountered "vim9script": restore','line_number':1817,'multiline':False]['text':' 'cpoptions', unless in the main .vimrc file.','line_number':1818,'multiline':False]['text':' Get "si" again, "script_items" may have been reallocated.','line_number':1819,'multiline':False]['text':' 'cpo' was changed in the script.  Apply the same change to the','line_number':1828,'multiline':False]['text':' saved value, if possible.','line_number':1829,'multiline':False]['text':' flag was removed, also remove it from the saved 'cpo'','line_number':1833,'multiline':False]['text':' flag was added, also add it to the saved 'cpo'','line_number':1839,'multiline':False]['text':' leaving a child now','line_number':1858,'multiline':False]['text':' If "fname_not_fixed" is a symlink then we source the linked file.','line_number':1883,'multiline':False]['text':' If the original name is in the script list we add the ID of the','line_number':1884,'multiline':False]['text':' script that was actually sourced.','line_number':1885,'multiline':False]['text':' check for .vimrc and _vimrc','line_number':1903,'multiline':False]['text':' DOSO_ value','line_number':1904,'multiline':False]['text':'
 * ":scriptnames"
 ','line_number':1913,'multiline':True]['text':' :script {scriptId}: edit the script','line_number':1923,'multiline':False]['text':' output one line at a time','line_number':1962,'multiline':False]['text':'
 * Fix slashes in the list of script names for 'shellslash'.
 ','line_number':1970,'multiline':True]['text':'
 * Get a pointer to a script name.  Used for ":verbose set".
 * Message appended to "Last set from "
 ','line_number':1984,'multiline':True]['text':' the variables themselves are cleared in evalvars_clear()','line_number':2016,'multiline':False]['text':'
 * Return a List of script-local functions defined in the script with id
 * 'sid'.
 ','line_number':2048,'multiline':True]['text':' Iterate through all the functions in the global function hash table','line_number':2064,'multiline':False]['text':' looking for functions with script ID 'sid'.','line_number':2065,'multiline':False]['text':' Add active functions with script id == 'sid'','line_number':2078,'multiline':False]['text':'
 * getscriptinfo() function
 ','line_number':2095,'multiline':True]['text':' When a script ID is specified, return information about only the','line_number':2167,'multiline':False]['text':' specified script, and add the script-local variables and functions.','line_number':2168,'multiline':False]['text':' CR-LF found','line_number':2197,'multiline':False]['text':' use a growarray to store the sourced line','line_number':2201,'multiline':False]['text':' Loop until there is a finished line (or end-of-file).','line_number':2204,'multiline':False]['text':' make room to read at least 120 (more) characters','line_number':2208,'multiline':False]['text':' all the lines are processed','line_number':2214,'multiline':False]['text':' Ignore a trailing CTRL-Z, when in Dos mode.	Only recognize the','line_number':2232,'multiline':False]['text':' CTRL-Z by its own, or after a NL.','line_number':2233,'multiline':False]['text':' If the line was longer than the buffer, read more.','line_number':2246,'multiline':False]['text':' remove trailing NL','line_number':2250,'multiline':False]['text':' replace trailing CR','line_number':2264,'multiline':False]['text':' lines like ":map xx yy^M" will have failed','line_number':2270,'multiline':False]['text':' The '\n' is escaped if there is an odd number of ^V's just','line_number':2282,'multiline':False]['text':' before it, first set "c" just before the 'V's and then check','line_number':2283,'multiline':False]['text':' len&c parities (is faster than ((len-c)%2 == 0)) -- Acevedo','line_number':2284,'multiline':False]['text':' escaped NL, read more','line_number':2287,'multiline':False]['text':' remove the NL','line_number':2293,'multiline':False]['text':' Check for ^C here now and then, so recursive :so can be broken.','line_number':2296,'multiline':False]['text':'
 * Get one full line from a sourced file.
 * Called by do_cmdline() when it's called from do_source().
 *
 * Return a pointer to the line in allocated memory.
 * Return NULL for end-of-file or some error.
 ','line_number':2308,'multiline':True]['text':' If breakpoints have been added/deleted need to check for it.','line_number':2331,'multiline':False]['text':' Set the current sourcing line number.','line_number':2343,'multiline':False]['text':' Get current line.  If there is a read-ahead line, use it, otherwise get','line_number':2346,'multiline':False]['text':' one now.  "fp" is NULL if actually using a string.','line_number':2347,'multiline':False]['text':' Only concatenate lines starting with a \ when 'cpoptions' doesn't','line_number':2363,'multiline':False]['text':' contain the 'C' flag.','line_number':2364,'multiline':False]['text':' compensate for the one line read-ahead','line_number':2370,'multiline':False]['text':' Get the next line and concatenate it when it starts with a','line_number':2373,'multiline':False]['text':' backslash. We always need to read the next line, keep it in','line_number':2374,'multiline':False]['text':' sp->nextline.','line_number':2375,'multiline':False]['text':' Also check for a comment in between continuation lines: "\ ','line_number':2376,'multiline':True]['text':' Also check for a Vim9 comment, empty line, line starting with '|',','line_number':2377,'multiline':False]['text':' but not "||".','line_number':2378,'multiline':False]['text':' Adjust the growsize to the current length to speed up','line_number':2408,'multiline':False]['text':' concatenating many lines.','line_number':2409,'multiline':False]['text':' drop a # comment or "\ comment line ','line_number':2429,'multiline':True]['text':' Convert the encoding of the script line.','line_number':2441,'multiline':False]['text':' Did we encounter a breakpoint?','line_number':2451,'multiline':False]['text':' Find next breakpoint.','line_number':2456,'multiline':False]['text':'
 * Returns TRUE if sourcing a script either from a file or a buffer.
 * Otherwise returns FALSE.
 ','line_number':2465,'multiline':True]['text':'
 * ":scriptencoding": Set encoding conversion for a sourced script.
 ','line_number':2475,'multiline':True]['text':' out of memory','line_number':2493,'multiline':False]['text':' Setup for conversion from the specified encoding to 'encoding'.','line_number':2499,'multiline':False]['text':'
 * ":scriptversion": Set Vim script version for a sourced script.
 ','line_number':2507,'multiline':True]['text':'
 * ":finish": Mark a sourced file as finished.
 ','line_number':2541,'multiline':True]['text':'
 * Mark a sourced file as finished.  Possibly makes the ":finish" pending.
 * Also called for a pending finish at the ":endtry" or after returning from
 * an extra do_cmdline().  "reanimate" is used in the latter case.
 ','line_number':2553,'multiline':True]['text':' Cleanup (and inactivate) conditionals, but stop when a try conditional','line_number':2567,'multiline':False]['text':' not in its finally clause (which then is to be executed next) is found.','line_number':2568,'multiline':False]['text':' In this case, make the ":finish" pending for execution at the ":endtry".','line_number':2569,'multiline':False]['text':' Otherwise, finish normally.','line_number':2570,'multiline':False]['text':'
 * Return TRUE when a sourced file had the ":finish" command: Don't give error
 * message for missing ":endif".
 * Return FALSE when not sourcing a file.
 ','line_number':2583,'multiline':True]['text':'
 * Find the path of a script below the "autoload" directory.
 * Returns NULL if there is no "/autoload/" in the script name.
 ','line_number':2598,'multiline':True]['text':'
 * For an autoload script "autoload/dir/script.vim" return the prefix
 * "dir#script#" in allocated memory.
 * Returns NULL if anything is wrong.
 ','line_number':2621,'multiline':True]['text':' replace all '/' with '#' and locate ".vim" at the end','line_number':2638,'multiline':False]['text':' did not find ".vim" at the end','line_number':2651,'multiline':False]['text':'
 * If in a Vim9 autoload script return "name" with the autoload prefix for the
 * script.  If successful the returned name is allocated.
 * Otherwise it returns "name" unmodified.
 ','line_number':2656,'multiline':True]['text':' skip over "<SNR>99_"','line_number':2680,'multiline':False]['text':'
 * Return the autoload script name for a function or variable name.
 * Returns NULL when out of memory.
 * Caller must make sure that "name" contains AUTOLOAD_CHAR.
 ','line_number':2694,'multiline':True]['text':' Get the script file name: replace '#' with '/', append ".vim".','line_number':2705,'multiline':False]['text':'
 * If "name" has a package name try autoloading the script for it.
 * Return TRUE if a package was loaded.
 ','line_number':2718,'multiline':True]['text':' load script again when already loaded','line_number':2725,'multiline':False]['text':' If the name starts with "<SNR>123_" then "123" is the script ID.','line_number':2733,'multiline':False]['text':' If there is no '#' after name[0] there is no package name.','line_number':2745,'multiline':False]['text':' Find the name in the list of previously loaded package names.  Skip','line_number':2754,'multiline':False]['text':' "autoload/", it's always the same.','line_number':2755,'multiline':False]['text':' was loaded already','line_number':2760,'multiline':False]['text':' Remember the name if it wasn't loaded already.','line_number':2763,'multiline':False]['text':' Try loading the package from $VIMRUNTIME/autoload/<name>.vim','line_number':2770,'multiline':False]['text':' Use "ret_sid" to avoid loading the same script again.','line_number':2771,'multiline':False]