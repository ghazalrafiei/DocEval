['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * os_amiga.c
 *
 * Amiga system-dependent routines.
 ','line_number':10,'multiline':True]['text':' Amiga has its own Window definition','line_number':20,'multiline':False]['text':' will be redefined by exec/types.h','line_number':23,'multiline':False]['text':' cproto fails on missing include files, skip them','line_number':26,'multiline':False]['text':' XXX These are included from os_amiga.h','line_number':34,'multiline':False]['text':' #include <exec/types.h>','line_number':35,'multiline':False]['text':' #include <libraries/dos.h>','line_number':36,'multiline':False]['text':' #include <libraries/dosextens.h>','line_number':37,'multiline':False]['text':' #include <proto/exec.h>','line_number':38,'multiline':False]['text':' #include <proto/dos.h>','line_number':39,'multiline':False]['text':' #include <proto/intuition.h>','line_number':40,'multiline':False]['text':' for 2.0 functions','line_number':44,'multiline':False]['text':' From version 4 of AmigaOS, several system structures must be allocated','line_number':47,'multiline':False]['text':' and freed using system functions. "struct AnchorPath" is one.','line_number':48,'multiline':False]['text':' PROTO','line_number':60,'multiline':False]['text':'
 * Set stack size to 1 MiB on NG systems. This should be enough even for
 * hungry syntax HL / plugin combinations. Leave the stack alone on OS 3
 * and below, those systems might be low on memory.
 ','line_number':62,'multiline':True]['text':'
 * At this point TRUE and FALSE are defined as 1L and 0L, but we want 1 and 0.
 ','line_number':73,'multiline':True]['text':' set if Vim opened the window','line_number':93,'multiline':False]['text':' Use autoopen for AmigaOS4, AROS and MorphOS ','line_number':95,'multiline':True]['text':' Amiga DOS 2.0x or higher','line_number':107,'multiline':False]['text':' set to TRUE if window size was set','line_number':109,'multiline':False]['text':'
 * mch_inchar(): low level input function.
 * Get a characters from the keyboard.
 * If time == 0 do not wait for characters.
 * If time == n wait a short time for characters.
 * If time == -1 wait forever for characters.
 *
 * Return number of characters read.
 ','line_number':143,'multiline':True]['text':' milliseconds','line_number':156,'multiline':False]['text':' time = 0 causes problems in DOS 1.2','line_number':165,'multiline':False]['text':' convert from milli to micro secs','line_number':167,'multiline':False]['text':' no character available','line_number':168,'multiline':False]['text':' time == -1','line_number':171,'multiline':False]['text':'
	 * If there is no character available within 2 seconds (default)
	 * write the autoscript file to disk.  Or cause the CursorHold event
	 * to be triggered.
	 ','line_number':173,'multiline':True]['text':' repeat until we got a character','line_number':191,'multiline':False]['text':' Convert from 'termencoding' to 'encoding'.','line_number':196,'multiline':False]['text':'
 * return non-zero if a character is available
 ','line_number':204,'multiline':True]['text':'
 * Return amount of memory still available in Kbyte.
 ','line_number':213,'multiline':True]['text':'
 * Waits a specified amount of time, or until input arrives if
 * flags does not have MCH_DELAY_IGNOREINPUT.
 ','line_number':226,'multiline':True]['text':' SAS declares void Delay(ULONG)','line_number':233,'multiline':False]['text':' Delay works with 20 msec intervals','line_number':241,'multiline':False]['text':'
 * We have no job control, fake it by starting a new shell.
 ','line_number':246,'multiline':True]['text':' disallow vim to be aborted','line_number':267,'multiline':False]['text':'
     * Set input and output channels, unless we have opened our own window
     ','line_number':272,'multiline':True]['text':'
	 * If Input() is not interactive, then Output() will be (because of
	 * check in mch_check_win()).  Used for "Vim -".
	 * Also check the other way around, for "Vim -h | more".
	 ','line_number':279,'multiline':True]['text':'
 * Check_win checks whether we have an interactive window.
 * If not, a new window is opened with the newcli command.
 * If we would open a window ourselves, the :sh and :! commands would not
 * work properly (Why? probably because we are then running in a background
 * CLI). This also is the best way to assure proper working in a next
 * Workbench release.
 *
 * For the -f option (foreground mode) we open our own window and disable :sh.
 * Otherwise the calling program would never know when editing is finished.
 ','line_number':309,'multiline':True]['text':' length of buffer for argument with complete path','line_number':320,'multiline':False]['text':'
 * check if we are running under DOS 2.0x or higher
 ','line_number':343,'multiline':True]['text':' if (((struct Library *)DOSBase)->lib_Version >= 37)','line_number':349,'multiline':False]['text':' without arp functions we NEED 2.0','line_number':356,'multiline':False]['text':' need arp functions for dos 1.x','line_number':362,'multiline':False]['text':' __amigaos4__ __AROS__ __MORPHOS__ ','line_number':370,'multiline':True]['text':'
     * scan argv[] for the "-f" and "-d" arguments
     ','line_number':372,'multiline':True]['text':' require using "-dev", "-d" means diff mode','line_number':387,'multiline':False]['text':'
 * If we were not started from workbench, do not have a "-d" or "-dev"
 * argument and we have been started with an interactive window, use that
 * window.
 ','line_number':396,'multiline':True]['text':'
 * When given the "-f" argument, we open our own window. We can't use the
 * newcli trick below, because the calling program (mail, rn, etc.) would not
 * know when we are finished.
 ','line_number':406,'multiline':True]['text':'
	 * Try to open a window. First try the specified device.
	 * Then try a 24 line 80 column window.
	 * If that fails, try two smaller ones.
	 ','line_number':413,'multiline':True]['text':' all three failed','line_number':426,'multiline':False]['text':'
     * Make a unique name for the temp file (which we will not delete!).
     * Use a pointer on the stack (nobody else will be using it).
     * Under AmigaOS4, this assumption might change in the future, so
     * we use a pointer to the current task instead. This should be a
     * shared structure and thus globally unique.
     ','line_number':442,'multiline':True]['text':'
     * Write the command into the file, put quotes around the arguments that
     * have a space in them.
     ','line_number':461,'multiline':True]['text':' run from workbench','line_number':465,'multiline':False]['text':' use 2.0 function','line_number':478,'multiline':False]['text':' use arp function','line_number':482,'multiline':False]['text':' skip '-d' or "-dev" option','line_number':490,'multiline':False]['text':'
 * Try to open a new cli in a window. If "-d" or "-dev" argument was given try
 * to open the specified device. Then try a 24 line 80 column window.  If that
 * fails, try two smaller ones.
 ','line_number':510,'multiline':True]['text':' all three failed','line_number':537,'multiline':False]['text':' The Execute succeeded: exit this program','line_number':543,'multiline':False]['text':' NOTREACHED','line_number':551,'multiline':False]['text':'
 * Return TRUE if the input comes from a terminal, FALSE otherwise.
 * We fake there is a window, because we can always open one!
 ','line_number':555,'multiline':True]['text':'
 * fname_case(): Set the case of the file name, if it already exists.
 *		 This will cause the file name to remain exactly the same
 *		 if the file system ignores, but preserves case.
 ','line_number':565,'multiline':True]['text':'ARGSUSED','line_number':570,'multiline':False]['text':' buffer size, ignored here','line_number':574,'multiline':False]['text':' TODO: Check if this fix applies to AmigaOS < 4 too.','line_number':584,'multiline':False]['text':' safety check','line_number':589,'multiline':False]['text':'
 * Get the FileInfoBlock for file "fname"
 * The returned structure has to be free()d.
 * Returns NULL on error.
 ','line_number':594,'multiline':True]['text':' safety check','line_number':605,'multiline':False]['text':' in case of an error the memory is freed here','line_number':618,'multiline':False]['text':'
 * set the title of our window
 * icon name is not set
 ','line_number':626,'multiline':True]['text':'
 * Restore the window/icon title.
 * which is one of:
 *  SAVE_RESTORE_TITLE  Just restore title
 *  SAVE_RESTORE_ICON   Just restore icon (which we don't have)
 *  SAVE_RESTORE_BOTH   Restore title and icon (which we don't have)
 ','line_number':637,'multiline':True]['text':' TODO: implement','line_number':666,'multiline':False]['text':'
 * Insert user name in s[len].
 ','line_number':669,'multiline':True]['text':'
 * Insert host name is s[len].
 ','line_number':688,'multiline':True]['text':'
 * return process ID
 ','line_number':701,'multiline':True]['text':' This is as close to a pid as we can come. We could use CLI numbers also,','line_number':710,'multiline':False]['text':' but then we would have two different types of process identifiers.','line_number':711,'multiline':False]['text':'
 * Get name of current directory into buffer 'buf' of length 'len' bytes.
 * Return OK for success, FAIL for failure.
 ','line_number':718,'multiline':True]['text':'
 * get absolute file name into buffer 'buf' of length 'len' bytes
 *
 * return FAIL for failure, OK otherwise
 ','line_number':728,'multiline':True]['text':' Lock the file.  If it exists, we can get the exact name.','line_number':744,'multiline':False]['text':' not a full path yet','line_number':750,'multiline':False]['text':'
	 * If the file cannot be locked (doesn't exist), try to lock the
	 * current directory and concatenate the file name.
	 ','line_number':752,'multiline':True]['text':' Concatenate the fname to the directory.  Don't add a slash','line_number':763,'multiline':False]['text':' if fname is empty, but do change "" to "/".','line_number':764,'multiline':False]['text':' something failed; use the file name','line_number':775,'multiline':False]['text':'
 * Return TRUE if "fname" does not depend on the current directory.
 ','line_number':779,'multiline':True]['text':'
 * Get the full file name from a lock. Use 2.0 function if possible, because
 * the arp function has more restrictions on the path length.
 *
 * return FAIL for failure, OK otherwise
 ','line_number':788,'multiline':True]['text':' use 2.0 function','line_number':798,'multiline':False]['text':' use arp function','line_number':802,'multiline':False]['text':'
 * get file permissions for 'name'
 * Returns -1 when it doesn't exist.
 ','line_number':807,'multiline':True]['text':'
 * set file permission for 'name' to 'perm'
 *
 * return FAIL for failure, OK otherwise
 ','line_number':826,'multiline':True]['text':' reset archived bit','line_number':834,'multiline':False]['text':'
 * Set hidden flag for "name".
 ','line_number':838,'multiline':True]['text':' can't hide a file','line_number':844,'multiline':False]['text':'
 * return FALSE if "name" is not a directory
 * return TRUE if "name" is a directory.
 * return FALSE for error.
 ','line_number':847,'multiline':True]['text':'
 * Create directory "name".
 ','line_number':871,'multiline':True]['text':'
 * Return 1 if "name" can be executed, 0 if not.
 * If "use_path" is FALSE only check if "name" is executable.
 * Return -1 if unknown.
 ','line_number':887,'multiline':True]['text':' Load file sections using elf.library or hunk.library.','line_number':897,'multiline':False]['text':' Test if file permissions allow execution.','line_number':903,'multiline':False]['text':' Search for executable in path if applicable.','line_number':916,'multiline':False]['text':' Save current working dir.','line_number':919,'multiline':False]['text':' For each entry, recur to check for executable.','line_number':923,'multiline':False]['text':' Go back to where we were.','line_number':931,'multiline':False]['text':'
 * Check what "name" is:
 * NODE_NORMAL: file or directory (or doesn't exist)
 * NODE_WRITABLE: writable device, socket, fifo, etc.
 * NODE_OTHER: non-writable things
 ','line_number':939,'multiline':True]['text':' TODO','line_number':948,'multiline':False]['text':'
 * Careful: mch_exit() may be called before mch_init()!
 ','line_number':957,'multiline':True]['text':' put terminal in 'normal' mode','line_number':965,'multiline':False]['text':' window resize events de-activated','line_number':975,'multiline':False]['text':' reset window size (CSI t CSI u)','line_number':977,'multiline':False]['text':' restore window title','line_number':982,'multiline':False]['text':' remove all memfiles','line_number':984,'multiline':False]['text':' somehow this makes :cq work!?','line_number':993,'multiline':False]['text':'
 * This is a routine for setting a given stream to raw or cooked mode on the
 * Amiga . This is useful when you are using Lattice C to produce programs
 * that want to read single characters with the "getch()" or "fgetc" call.
 *
 * Written : 18-Jun-87 By Chuck McManis.
 ','line_number':997,'multiline':True]['text':'
 * Function mch_settmode() - Convert the specified file pointer to 'raw' or
 * 'cooked' mode. This only works on TTY's.
 *
 * Raw: keeps DOS from translating keys for you, also (BIG WIN) it means
 *	getch() will return immediately rather than wait for a return. You
 *	lose editing features though.
 *
 * Cooked: This function returns the designate file pointer to its normal,
 *	wait for a <CR> mode. This is exactly like raw() except that
 *	it sends a 0 to the console to make it back into a CON: from a RAW:
 ','line_number':1007,'multiline':True]['text':'
 * Code for this routine came from the following :
 *
 * ConPackets.c -  C. Scheppner, A. Finkel, P. Lindsay	CBM
 *   DOS packet example
 *   Requires 1.2
 *
 * Found on Fish Disk 56.
 *
 * Heavely modified by mool.
 ','line_number':1031,'multiline':True]['text':'
 * Get console size in a system friendly way on AROS and MorphOS.
 * Return FAIL for failure, OK otherwise
 ','line_number':1047,'multiline':True]['text':' Save current console mode.','line_number':1060,'multiline':False]['text':' Set RAW mode.','line_number':1064,'multiline':False]['text':' Write control sequence to console.','line_number':1067,'multiline':False]['text':' Read return sequence from input.','line_number':1073,'multiline':False]['text':' Parse result and set Vim globals.','line_number':1076,'multiline':False]['text':' Restore console mode.','line_number':1079,'multiline':False]['text':' Restore console mode.','line_number':1086,'multiline':False]['text':' I/O error. Default size fallback.','line_number':1090,'multiline':False]['text':'
 * Try to get the real window size,
 * return FAIL for failure, OK otherwise
 ','line_number':1098,'multiline':True]['text':' not an amiga window','line_number':1111,'multiline':False]['text':' insure longword alignment','line_number':1114,'multiline':False]['text':'
     * Should make console aware of real window size, not the one we set.
     * Unfortunately, under DOS 2.0x this redraws the window and it
     * is rarely needed, so we skip it now, unless we changed the size.
     ','line_number':1122,'multiline':True]['text':' CSI t CSI u','line_number':1128,'multiline':False]['text':' it's not an amiga window, maybe aux device','line_number':1134,'multiline':False]['text':' terminal type should be set','line_number':1135,'multiline':False]['text':' get window size','line_number':1148,'multiline':False]['text':' cannot be an amiga window','line_number':1151,'multiline':False]['text':' Safe to pass NULL','line_number':1162,'multiline':False]['text':'
 * Try to set the real window size to Rows and Columns.
 ','line_number':1169,'multiline':True]['text':'
 * Rows and/or Columns has changed.
 ','line_number':1188,'multiline':True]['text':' Nothing to do.','line_number':1194,'multiline':False]['text':'
 * out_num - output a (big) number fast
 ','line_number':1197,'multiline':True]['text':'
 * Sendpacket.c
 *
 * An invaluable addition to your Amiga.lib file. This code sends a packet to
 * the given message port. This makes working around DOS lots easier.
 *
 * Note, I didn't write this, those wonderful folks at CBM did. I do suggest
 * however that you may wish to add it to Amiga.Lib, to do so, compile it and
 * say 'oml lib:amiga.lib -r sendpacket.o'
 ','line_number':1207,'multiline':True]['text':' #include <proto/exec.h>','line_number':1219,'multiline':False]['text':' #include <proto/dos.h>','line_number':1220,'multiline':False]['text':'
 * Function - dos_packet written by Phil Lindsay, Carolyn Scheppner, and Andy
 * Finkel. This function will send a packet of the given type to the Message
 * Port supplied.
 ','line_number':1224,'multiline':True]['text':' process identifier ... (handlers message port)','line_number':1232,'multiline':False]['text':' packet type ... (what you want handler to do)','line_number':1233,'multiline':False]['text':' single argument','line_number':1234,'multiline':False]['text':' use 2.0 function','line_number':1243,'multiline':False]['text':' use arp function','line_number':1246,'multiline':False]['text':' Allocate space for a packet, make it public and clear it','line_number':1250,'multiline':False]['text':' send packet','line_number':1264,'multiline':False]['text':' !defined(AZTEC_C) && !defined(__AROS__)','line_number':1277,'multiline':False]['text':'
 * Call shell.
 * Return error number for failure, 0 otherwise
 ','line_number':1279,'multiline':True]['text':' SHELL_*, see vim.h','line_number':1286,'multiline':False]['text':' if Vim opened a window: Executing a shell may cause crashes','line_number':1300,'multiline':False]['text':' window resize events de-activated','line_number':1306,'multiline':False]['text':' set to normal mode','line_number':1310,'multiline':False]['text':' remember current dir','line_number':1311,'multiline':False]['text':' not tested very much','line_number':1313,'multiline':False]['text':' else part is for AZTEC_C','line_number':1370,'multiline':False]['text':'
	 * separate shell name from argument
	 ','line_number':1377,'multiline':True]['text':' out of memory, use Execute','line_number':1381,'multiline':False]['text':' find start of arguments','line_number':1385,'multiline':False]['text':' AZTEC_C','line_number':1473,'multiline':False]['text':' make sure we stay in the same directory','line_number':1475,'multiline':False]['text':' The shell may have messed with the mode, always set it.','line_number':1479,'multiline':False]['text':' set to raw mode','line_number':1481,'multiline':False]['text':' window resize events activated','line_number':1485,'multiline':False]['text':'
 * check for an "interrupt signal"
 * We only react to a CTRL-C, but also clear the other break signals to avoid
 * trouble with lattice-c programs.
 ','line_number':1489,'multiline':True]['text':' this routine causes manx to use this Chk_Abort() rather than its own','line_number':1501,'multiline':False]['text':' otherwise it resets our ^C when doing any I/O (even when Enable_Abort','line_number':1502,'multiline':False]['text':' is zero).  Since we want to check for our own ^C's','line_number':1503,'multiline':False]['text':'
 * mch_expandpath() - this code does wild-card pattern matching using the arp
 *		      routines.
 *
 * "pat" has backslashes before chars that are not to be expanded.
 * Returns the number of matches found.
 *
 * This is based on WildDemo2.c (found in arp1.1 distribution).
 * That code's copyright follows:
 *	Copyright (c) 1987, Scott Ballantyne
 *	Use and abuse as you please.
 ','line_number':1523,'multiline':True]['text':' EW_* flags','line_number':1547,'multiline':False]['text':' Get our AnchorBase','line_number':1564,'multiline':False]['text':' ap_Length not supported anymore','line_number':1574,'multiline':False]['text':' allow '.' for current dir','line_number':1576,'multiline':False]['text':' allow '.' for current dir','line_number':1578,'multiline':False]['text':' hack to replace '*' by '#?'','line_number':1586,'multiline':False]['text':'
     * Loop to get all matches.
     ','line_number':1609,'multiline':True]['text':'
     * Sort the files for this pattern.
     ','line_number':1637,'multiline':True]['text':' Free the wildcard stuff','line_number':1644,'multiline':False]['text':'
 * Return TRUE if "p" has wildcards that can be expanded by mch_expandpath().
 ','line_number':1673,'multiline':True]['text':'
 * With AmigaDOS 2.0 support for reading local environment variables
 *
 * Two buffers are allocated:
 * - A big one to do the expansion into.  It is freed before returning.
 * - A small one to hold the return value.  It is kept until the next call.
 ','line_number':1710,'multiline':True]['text':' buffer to expand in','line_number':1721,'multiline':False]['text':' return value','line_number':1722,'multiline':False]['text':' allocated memory','line_number':1723,'multiline':False]['text':' if $VIM is not defined, use "vim:" instead','line_number':1748,'multiline':False]['text':'
 * Amiga version of setenv() with AmigaDOS 2.0 support.
 ','line_number':1755,'multiline':True]['text':' ARGSUSED','line_number':1758,'multiline':False]['text':' success','line_number':1768,'multiline':False]['text':' failure','line_number':1769,'multiline':False]