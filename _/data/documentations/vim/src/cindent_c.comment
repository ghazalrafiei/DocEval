['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * cindent.c: C indentation related functions
 *
 * Many of C-indenting functions originally come from Eric Fischer.
 *
 * Below "XXX" means that this function may unlock the current line.
 ','line_number':10,'multiline':True]['text':' values for the "lookfor" state','line_number':20,'multiline':False]['text':'
 * Return TRUE if the string "line" starts with a word from 'cinwords'.
 ','line_number':35,'multiline':True]['text':'
 * Skip to the end of a "string" and a 'c' character.
 * If there is no string or character, return argument unmodified.
 ','line_number':67,'multiline':True]['text':' We loop, because strings may be concatenated: "date""time".','line_number':76,'multiline':False]['text':' 'c' or '\n' or '\000'','line_number':79,'multiline':False]['text':' ' at end of line','line_number':81,'multiline':False]['text':' '\n' or '\000'','line_number':84,'multiline':False]['text':' '\000'','line_number':87,'multiline':False]['text':' check for trailing '','line_number':90,'multiline':False]['text':' start of string','line_number':96,'multiline':False]['text':' end of string','line_number':102,'multiline':False]['text':' continue for another string','line_number':106,'multiline':False]['text':' Raw string: R"[delim](...)[delim]"','line_number':110,'multiline':False]['text':' continue for another string','line_number':126,'multiline':False]['text':' no string found','line_number':129,'multiline':False]['text':' backup from NUL','line_number':132,'multiline':False]['text':'
 * Return TRUE if "line[col]" is inside a C string.
 ','line_number':136,'multiline':True]['text':'
 * Find the start of a comment, not knowing if we are in a comment right now.
 * Search starts at w_cursor.lnum and goes backwards.
 * Return NULL when not inside a comment.
 ','line_number':149,'multiline':True]['text':' XXX','line_number':155,'multiline':False]['text':' XXX','line_number':161,'multiline':False]['text':' Check if the comment start we found is inside a string.','line_number':172,'multiline':False]['text':' If it is then restrict the search to below this line and try again.','line_number':173,'multiline':False]['text':'
 * Find the start of a raw string, not knowing if we are in one right now.
 * Search starts at w_cursor.lnum and goes backwards.
 * Return NULL when not inside a raw string.
 ','line_number':186,'multiline':True]['text':' XXX','line_number':192,'multiline':False]['text':' Check if the raw string start we found is inside a string.','line_number':203,'multiline':False]['text':' If it is then restrict the search to below this line and try again.','line_number':204,'multiline':False]['text':'
 * Find the start of a comment or raw string, not knowing if we are in a
 * comment or raw string right now.
 * Search starts at w_cursor.lnum and goes backwards.
 * If is_raw is given and returns start of raw_string, sets it to true.
 * Return NULL when not inside a comment or raw string.
 * "CORS" -> Comment Or Raw String
 ','line_number':217,'multiline':True]['text':' XXX','line_number':226,'multiline':False]['text':' Need to make a copy of the static pos in findmatchlimit(),','line_number':235,'multiline':False]['text':' calling find_start_rawstring() may change it.','line_number':236,'multiline':False]['text':' If comment_pos is before rs_pos the raw string is inside the comment.','line_number':242,'multiline':False]['text':' If rs_pos is before comment_pos the comment is inside the raw string.','line_number':243,'multiline':False]['text':'
 * Return TRUE if C-indenting is on.
 ','line_number':255,'multiline':True]['text':' Find result cache for cpp_baseclass','line_number':268,'multiline':False]['text':'
 * Skip over white space and C comments within the line.
 * Also skip over Perl/shell comments if desired.
 ','line_number':274,'multiline':True]['text':' Perl/shell # comment comment continues until eol.  Require a space','line_number':287,'multiline':False]['text':' before # to avoid recognizing $#array.','line_number':288,'multiline':False]['text':' slash-slash comment continues till eol','line_number':297,'multiline':False]['text':' skip slash-star comment','line_number':304,'multiline':False]['text':'
 * Return TRUE if there is no code at *s.  White space and comments are
 * not considered code.
 ','line_number':314,'multiline':True]['text':'
 * Recognize the start of a C or C++ comment.
 ','line_number':324,'multiline':True]['text':'
 * Recognize the start of a "//" comment.
 ','line_number':333,'multiline':True]['text':'
 * Check previous lines for a "//" line comment, skipping over blank lines.
 ','line_number':342,'multiline':True]['text':' XXX','line_number':346,'multiline':False]['text':'
 * Return TRUE if "text" starts with "key:".
 ','line_number':368,'multiline':True]['text':' can be 'key': or "key":','line_number':379,'multiline':False]['text':' need at least one ID character','line_number':383,'multiline':False]['text':' "::" is not a label, it's C++','line_number':393,'multiline':False]['text':'
 * Check if string matches "label:"; move to character after ':' if true.
 * "*s" must point to the start of the label, if there is one.
 ','line_number':397,'multiline':True]['text':' need at least one ID character','line_number':404,'multiline':False]['text':' "::" is not a label, it's C++','line_number':412,'multiline':False]['text':'
 * Recognize a scope declaration label from the 'cinscopedecls' option.
 ','line_number':416,'multiline':True]['text':'
 * Recognize a preprocessor statement: Any line that starts with '#'.
 ','line_number':453,'multiline':True]['text':'
 * Return TRUE if line "*pp" at "*lnump" is a preprocessor statement or a
 * continuation line of a preprocessor statement.  Decrease "*lnump" to the
 * start and return the line in "*pp".
 * Put the amount of indent in "*amount".
 ','line_number':464,'multiline':True]['text':' accept "} else"','line_number':507,'multiline':False]['text':'
 * Recognize a line that starts with '{' or '}', or ends with ';', ',', '{' or
 * '}'.
 * Don't consider "} else" a terminated line.
 * If a line begins with an "else", only consider it terminated if no unmatched
 * opening braces follow (handle "else { foo();" correctly).
 * Return the character terminating the line (ending char's have precedence if
 * both apply in order to determine initializations).
 ','line_number':512,'multiline':True]['text':' include '{' at the end as terminator','line_number':524,'multiline':False]['text':' recognize a trailing comma','line_number':525,'multiline':False]['text':' skip over comments, "" strings and 'c'haracters','line_number':541,'multiline':False]['text':'
 * Return TRUE when "s" starts with "word" and then a non-ID character.
 ','line_number':563,'multiline':True]['text':'
 * Recognize a "default" switch label.
 ','line_number':574,'multiline':True]['text':'
 * Recognize a switch label: "case .*:" or "default:".
 ','line_number':585,'multiline':True]['text':' Allow relaxed check of case statement for JS','line_number':591,'multiline':False]['text':' skip over "::" for C++','line_number':603,'multiline':False]['text':' skip over ':'','line_number':609,'multiline':False]['text':' stop at comment','line_number':611,'multiline':False]['text':' JS etc.','line_number':614,'multiline':False]['text':' stop at string','line_number':616,'multiline':False]['text':'
 * Recognize a label: "label:".
 * Note: curwin->w_cursor must be where we are looking for the label.
 ','line_number':629,'multiline':True]['text':' XXX','line_number':634,'multiline':False]['text':' Exclude "default" from labels, since it should be indented','line_number':640,'multiline':False]['text':' like a switch label.  Same for C++ scope declarations.','line_number':641,'multiline':False]['text':' Only accept a label if the previous line is terminated or is a case','line_number':650,'multiline':False]['text':' label.','line_number':651,'multiline':False]['text':' If we're in a comment or raw string now, skip to the start of','line_number':661,'multiline':False]['text':' it.','line_number':662,'multiline':False]['text':' XXX','line_number':664,'multiline':False]['text':' ignore #defines, #if, etc.','line_number':668,'multiline':False]['text':' label at start of file???','line_number':682,'multiline':False]['text':'
 * Return TRUE if string "s" ends with the string "find", possibly followed by
 * white space and comments.  Skip strings and comments.
 * Ignore "ignore" after "find" if it's not NULL.
 ','line_number':685,'multiline':True]['text':'
 * Recognize structure initialization and enumerations:
 * "[typedef] [static|public|protected|private] enum"
 * "[typedef] [static|public|protected|private] = {"
 ','line_number':714,'multiline':True]['text':' Maximum number of lines to search back for a "namespace" line.','line_number':757,'multiline':False]['text':'
 * Recognize a "namespace" scope declaration.
 ','line_number':760,'multiline':True]['text':' skip over "inline" and "export" in any order','line_number':772,'multiline':False]['text':' found end of a name','line_number':784,'multiline':False]['text':' word character after skipping past name','line_number':795,'multiline':False]['text':' C++ 17 nested namespace','line_number':802,'multiline':False]['text':'
 * Recognize a `extern "C"` or `extern "C++"` linkage specifications.
 ','line_number':815,'multiline':True]['text':'
 * Return a pointer to the first non-empty non-comment character after a ':'.
 * Return NULL if not found.
 *	  case 234:    a = b;
 *		       ^
 ','line_number':863,'multiline':True]['text':' skip over "::" for C++','line_number':876,'multiline':False]['text':' skip over 'x'','line_number':882,'multiline':False]['text':'
 * Get indent of line "lnum", skipping a label.
 * Return 0 if there is nothing after the label.
 ','line_number':892,'multiline':True]['text':' XXX','line_number':897,'multiline':False]['text':'
 * Find indent for line "lnum", ignoring any case or jump label.
 * Also return a pointer to the text (after the label) in "pp".
 *   label:	if (asdf && asdfasdf)
 *		^
 ','line_number':915,'multiline':True]['text':' XXX','line_number':931,'multiline':False]['text':' just in case','line_number':936,'multiline':False]['text':'
 * Return the indent of the first variable name after a type in a declaration.
 *  int	    a,			indent of "a"
 *  static struct foo    b,	indent of "b"
 *  enum bla    c,		indent of "c"
 * Returns zero when it doesn't look like a declaration.
 ','line_number':950,'multiline':True]['text':'
 * Return the indent of the first non-blank after an equal sign.
 *       char *foo = "here";
 * Return zero if no (useful) equal sign found.
 * Return -1 if the line above "lnum" ends in a backslash.
 *      foo = "asdf\
 *	       asdf\
 *	       here";
 ','line_number':999,'multiline':True]['text':' ignore comments','line_number':1026,'multiline':False]['text':' nice alignment for continued strings','line_number':1038,'multiline':False]['text':'
 * Skip strings, chars and comments until at or past "trypos".
 * Return the column found.
 ','line_number':1047,'multiline':True]['text':' XXX','line_number':1076,'multiline':False]['text':' check if the ( is in a // comment','line_number':1088,'multiline':False]['text':' XXX','line_number':1095,'multiline':False]['text':' copy trypos, findmatch will change it','line_number':1104,'multiline':False]['text':' XXX','line_number':1107,'multiline':False]['text':'
 * Find the matching '(', ignoring it if it is in a comment.
 * Return NULL if no match found.
 ','line_number':1124,'multiline':True]['text':' XXX','line_number':1129,'multiline':False]['text':'
 * Set w_cursor.col to the column number of the last unmatched ')' or '{' in
 * line "l".  "l" must point to the start of the line.
 ','line_number':1134,'multiline':True]['text':' default is start of line','line_number':1145,'multiline':False]['text':' ignore parens in comments','line_number':1149,'multiline':False]['text':' ignore parens in quotes','line_number':1150,'multiline':False]['text':'
 * Recognize the basic picture of a function declaration -- it needs to
 * have an open paren somewhere and a close paren at the end of the line and
 * no semicolons anywhere.
 * When a line ends in a comma we continue looking in the next line.
 * "sp" points to a string with the line.  When looking at other lines it must
 * be restored to the line.  When it's NULL fetch lines here.
 * "first_lnum" is where we start looking.
 * "min_lnum" is the line before which we will not be looking.
 ','line_number':1167,'multiline':True]['text':' Ignore line starting with #.','line_number':1210,'multiline':False]['text':' ignore comments','line_number':1216,'multiline':False]['text':' To avoid a mistake in the following situation:','line_number':1223,'multiline':False]['text':' A::A(int a, int b)','line_number':1224,'multiline':False]['text':'     : a(0)  // <--not a function decl','line_number':1225,'multiline':False]['text':'     , b(0)','line_number':1226,'multiline':False]['text':' {...','line_number':1227,'multiline':False]['text':' ';', ' or "  before any () or no '('','line_number':1234,'multiline':False]['text':' ')' at the end: may have found a match','line_number':1240,'multiline':False]['text':' Check for the previous line not to end in a backslash:','line_number':1241,'multiline':False]['text':'       #if defined(x) && {backslash}','line_number':1242,'multiline':False]['text':'		 defined(y)','line_number':1243,'multiline':False]['text':' ',' at the end: continue looking in the next line.','line_number':1254,'multiline':False]['text':' At the end: check for ',' in the next line, for this style:','line_number':1255,'multiline':False]['text':' func(arg1','line_number':1256,'multiline':False]['text':'       , arg2)','line_number':1257,'multiline':False]['text':' Require a comma at end of the line or a comma or ')' at the','line_number':1268,'multiline':False]['text':' start of next line.','line_number':1269,'multiline':False]['text':' ignore comments','line_number':1275,'multiline':False]['text':'
 * Check if this is a "while" that should have a matching "do".
 * We only accept a "while (condition) ;", with only white space between the
 * ')' and ';'. The condition may be spread over several lines.
 ','line_number':1303,'multiline':True]['text':' XXX','line_number':1309,'multiline':False]['text':' accept "} while (cond);"','line_number':1316,'multiline':False]['text':' skip any '}', until the 'w' of the "while"','line_number':1324,'multiline':False]['text':'
 * Check whether in "p" there is an "if", "for" or "while" before "*poffset".
 * Return 0 if there is none.
 * Otherwise return !0 and update "*poffset" to point to the place where the
 * string was found.
 ','line_number':1338,'multiline':True]['text':'
 * Return TRUE if we are at the end of a do-while.
 *    do
 *       nothing;
 *    while (foo
 *	       && bar);  <-- here
 * Adjust the cursor to the line with "while".
 ','line_number':1382,'multiline':True]['text':' there must be a ';' at the end','line_number':1399,'multiline':False]['text':' Found ");" at end of the line, now check there is "while"','line_number':1411,'multiline':False]['text':' before the matching '('.  XXX','line_number':1412,'multiline':False]['text':' accept "} while (cond);"','line_number':1419,'multiline':False]['text':' Searching may have made "line" invalid, get it again.','line_number':1428,'multiline':False]['text':'
 * Find the position of a C++ base-class declaration or
 * constructor-initialization. eg:
 *
 * class MyClass :
 *	baseClass		<-- here
 * class MyClass : public baseClass,
 *	anotherBaseClass	<-- here (should probably lineup ??)
 * MyClass::MyClass(...) :
 *	baseClass(...)		<-- here (constructor-initialization)
 *
 * This is a lot of guessing.  Watch out for "cond ? func() : foo".
 ','line_number':1445,'multiline':True]['text':' input and output','line_number':1460,'multiline':False]['text':' find position','line_number':1462,'multiline':False]['text':' Use the cached result','line_number':1469,'multiline':False]['text':' skip #define FOO x ? (x) : x','line_number':1474,'multiline':False]['text':' Search for a line starting with '#', empty, ending in ';' or containing','line_number':1482,'multiline':False]['text':' '{' or '}' and start below it.  This handles the following situations:','line_number':1483,'multiline':False]['text':'	a = cond ?','line_number':1484,'multiline':False]['text':'	      func() :','line_number':1485,'multiline':False]['text':'		   asdf;','line_number':1486,'multiline':False]['text':'	func::foo()','line_number':1487,'multiline':False]['text':'	      : something','line_number':1488,'multiline':False]['text':'	{}','line_number':1489,'multiline':False]['text':'	Foo::Foo (int one, int two)','line_number':1490,'multiline':False]['text':'		: something(4),','line_number':1491,'multiline':False]['text':'		somethingelse(3)','line_number':1492,'multiline':False]['text':'	{}','line_number':1493,'multiline':False]['text':' Continue in the cursor line.','line_number':1523,'multiline':False]['text':' don't recognize "case (foo):" as a baseclass','line_number':1529,'multiline':False]['text':' skip double colon. It can't be a constructor','line_number':1543,'multiline':False]['text':' initialization any more','line_number':1544,'multiline':False]['text':' we have something found, that looks like the start of','line_number':1550,'multiline':False]['text':' cpp-base-class-declaration or constructor-initialization','line_number':1551,'multiline':False]['text':' Constructor-initialization is assumed if we come across','line_number':1579,'multiline':False]['text':' something like "):"','line_number':1580,'multiline':False]['text':' Avoid seeing '() :' after '?' as constructor init.','line_number':1586,'multiline':False]['text':' if it is not an identifier, we are wrong','line_number':1591,'multiline':False]['text':' it can't be a constructor-initialization any more','line_number':1597,'multiline':False]['text':' the first statement starts here: lineup with this one...','line_number':1600,'multiline':False]['text':' When the line ends in a comma don't align with it.','line_number':1605,'multiline':False]['text':' XXX','line_number':1631,'multiline':False]['text':'
 * Find the '{' at the start of the block we are in.
 * Return NULL if no match found.
 * Ignore a '{' that is in a comment, makes indenting the next three lines
 * work.
 ','line_number':1646,'multiline':True]['text':' foo()','line_number':1652,'multiline':False]['text':' {','line_number':1653,'multiline':False]['text':' }','line_number':1654,'multiline':False]['text':' XXX','line_number':1657,'multiline':False]['text':' copy pos_T, next findmatch will change it','line_number':1667,'multiline':False]['text':' ignore the { if it's in a // or / *  * / comment','line_number':1671,'multiline':False]['text':' XXX','line_number':1673,'multiline':False]['text':'
 * Find the matching '(', ignoring it if it is in a comment or before an
 * unmatched {.
 * Return NULL if no match found.
 ','line_number':1682,'multiline':True]['text':' XXX','line_number':1688,'multiline':False]['text':' If both an unmatched '(' and '{' is found.  Ignore the '('','line_number':1697,'multiline':False]['text':' position if the '{' is further down.','line_number':1698,'multiline':False]['text':'
 * Return ind_maxparen corrected for the difference in line number between the
 * cursor position and "startpos".  This makes sure that searching for a
 * matching paren above the cursor line doesn't find a match because of
 * looking a few lines further.
 ','line_number':1707,'multiline':True]['text':'
 * Parse 'cinoptions' and set the values in "curbuf".
 * Must be called when 'cinoptions', 'shiftwidth' and/or 'tabstop' changes.
 ','line_number':1723,'multiline':True]['text':' needed for cino-(, it will be multiplied by 2 again','line_number':1739,'multiline':False]['text':' Set the default values.','line_number':1745,'multiline':False]['text':' Spaces from a block's opening brace the prevailing indent for that','line_number':1747,'multiline':False]['text':' block should be.','line_number':1748,'multiline':False]['text':' Spaces from the edge of the line an open brace that's at the end of a','line_number':1751,'multiline':False]['text':' line is imagined to be.','line_number':1752,'multiline':False]['text':' Spaces from the prevailing indent for a line that is not preceded by','line_number':1755,'multiline':False]['text':' an opening brace.','line_number':1756,'multiline':False]['text':' Column where the first { of a function should be located }.','line_number':1759,'multiline':False]['text':' Spaces from the prevailing indent a leftmost open brace should be','line_number':1762,'multiline':False]['text':' located.','line_number':1763,'multiline':False]['text':' Spaces from the matching open brace (real location for one at the left','line_number':1766,'multiline':False]['text':' edge; imaginary location from one that ends a line) the matching close','line_number':1767,'multiline':False]['text':' brace should be located.','line_number':1768,'multiline':False]['text':' Spaces from the edge of the line an open brace sitting in the leftmost','line_number':1771,'multiline':False]['text':' column is imagined to be.','line_number':1772,'multiline':False]['text':' Spaces jump labels should be shifted to the left if N is non-negative,','line_number':1775,'multiline':False]['text':' otherwise the jump label will be put to column 1.','line_number':1776,'multiline':False]['text':' Spaces from the switch() indent a "case xx" label should be located.','line_number':1779,'multiline':False]['text':' Spaces from the "case xx:" code after a switch() should be located.','line_number':1782,'multiline':False]['text':' Lineup break at end of case in switch() with case label.','line_number':1785,'multiline':False]['text':' Spaces from the class declaration indent a scope declaration label','line_number':1788,'multiline':False]['text':' should be located.','line_number':1789,'multiline':False]['text':' Spaces from the scope declaration label code should be located.','line_number':1792,'multiline':False]['text':' Amount K&R-style parameters should be indented.','line_number':1795,'multiline':False]['text':' Amount a function type spec should be indented.','line_number':1798,'multiline':False]['text':' Amount a cpp base class declaration or constructor initialization','line_number':1801,'multiline':False]['text':' should be indented.','line_number':1802,'multiline':False]['text':' additional spaces beyond the prevailing indent a continuation line','line_number':1805,'multiline':False]['text':' should be located.','line_number':1806,'multiline':False]['text':' Spaces from the indent of the line with an unclosed parenthesis.','line_number':1809,'multiline':False]['text':' Spaces from the indent of the line with an unclosed parenthesis, which','line_number':1812,'multiline':False]['text':' itself is also unclosed.','line_number':1813,'multiline':False]['text':' Suppress ignoring spaces from the indent of a line starting with an','line_number':1816,'multiline':False]['text':' unclosed parenthesis.','line_number':1817,'multiline':False]['text':' If the opening paren is the last nonwhite character on the line, and','line_number':1820,'multiline':False]['text':' b_ind_unclosed_wrapped is nonzero, use this indent relative to the outer','line_number':1821,'multiline':False]['text':' context (for very long lines).','line_number':1822,'multiline':False]['text':' Suppress ignoring white space when lining up with the character after','line_number':1825,'multiline':False]['text':' an unclosed parenthesis.','line_number':1826,'multiline':False]['text':' Indent a closing parenthesis under the line start of the matching','line_number':1829,'multiline':False]['text':' opening parenthesis.','line_number':1830,'multiline':False]['text':' Indent a closing parenthesis under the previous line.','line_number':1833,'multiline':False]['text':' Extra indent for comments.','line_number':1836,'multiline':False]['text':' Spaces from the comment opener when there is nothing after it.','line_number':1839,'multiline':False]['text':' Boolean: if non-zero, use b_ind_in_comment even if there is something','line_number':1842,'multiline':False]['text':' after the comment opener.','line_number':1843,'multiline':False]['text':' Max lines to search for an open paren.','line_number':1846,'multiline':False]['text':' Max lines to search for an open comment.','line_number':1849,'multiline':False]['text':' Handle braces for java code.','line_number':1852,'multiline':False]['text':' Not to confuse JS object properties with labels.','line_number':1855,'multiline':False]['text':' Handle blocked cases correctly.','line_number':1858,'multiline':False]['text':' Handle C++ namespace.','line_number':1861,'multiline':False]['text':' Handle continuation lines containing conditions of if (), for () and','line_number':1864,'multiline':False]['text':' while ().','line_number':1865,'multiline':False]['text':' indentation for # comments','line_number':1868,'multiline':False]['text':' Handle C++ extern "C" or "C++"','line_number':1871,'multiline':False]['text':' Handle C #pragma directives','line_number':1874,'multiline':False]['text':' remember where the digits start','line_number':1882,'multiline':False]['text':' ".5s" means a fraction','line_number':1885,'multiline':False]['text':' "2s" means two times 'shiftwidth'','line_number':1897,'multiline':False]['text':' just "s" is one 'shiftwidth'','line_number':1900,'multiline':False]['text':' When adding an entry here, also update the default 'cinoptions' in','line_number':1914,'multiline':False]['text':' doc/indent.txt, and add explanation for it!','line_number':1915,'multiline':False]['text':' XXX','line_number':1991,'multiline':False]['text':' if we've gone outside the braces entirely,','line_number':1994,'multiline':False]['text':' we must be out of scope...','line_number':1995,'multiline':False]['text':' XXX','line_number':1996,'multiline':False]['text':' and if the brace enclosing this is further','line_number':2000,'multiline':False]['text':' back than the one enclosing the else, we're','line_number':2001,'multiline':False]['text':' out of luck too.','line_number':2002,'multiline':False]['text':' and if they're enclosed in a *deeper* brace,','line_number':2006,'multiline':False]['text':' then we can ignore it because it's in a','line_number':2007,'multiline':False]['text':' different scope...','line_number':2008,'multiline':False]['text':' if it was an "else" (that's not an "else if")','line_number':2012,'multiline':False]['text':' then we need to go back to another if, so','line_number':2013,'multiline':False]['text':' increment elselevel','line_number':2014,'multiline':False]['text':' if it was a "while" then we need to go back to','line_number':2024,'multiline':False]['text':' another "do", so increment whilelevel.  XXX','line_number':2025,'multiline':False]['text':' If it's an "if" decrement elselevel','line_number':2032,'multiline':False]['text':' When looking for an "if" ignore "while"s that','line_number':2037,'multiline':False]['text':' get in the way.','line_number':2038,'multiline':False]['text':' If it's a "do" decrement whilelevel','line_number':2043,'multiline':False]['text':' if we've used up all the elses, then','line_number':2047,'multiline':False]['text':' this must be the if that we want!','line_number':2048,'multiline':False]['text':' match the indent level of that if.','line_number':2049,'multiline':False]['text':'
 * Return the desired indent for C code.
 * Return -1 if the indent should be left alone (inside a raw string).
 ','line_number':2057,'multiline':True]['text':' '{' is in column 0','line_number':2078,'multiline':False]['text':' '{' is at start of line','line_number':2079,'multiline':False]['text':' '{' is at end of line','line_number':2080,'multiline':False]['text':' amount for continuation line','line_number':2092,'multiline':False]['text':' make a copy, value is changed below','line_number':2099,'multiline':False]['text':' remember where the cursor was when we started','line_number':2102,'multiline':False]['text':' if we are at line 1 zero indent is fine, right?','line_number':2105,'multiline':False]['text':' Get a copy of the current contents of the line.','line_number':2109,'multiline':False]['text':' This is required, because only the most recent line obtained with','line_number':2110,'multiline':False]['text':' ml_get is valid!','line_number':2111,'multiline':False]['text':' In insert mode and the cursor is on a ')' truncate the line at the','line_number':2116,'multiline':False]['text':' cursor position.  We don't want to line up with the matching '(' when','line_number':2117,'multiline':False]['text':' inserting new stuff.','line_number':2118,'multiline':False]['text':' For unknown reasons the cursor might be past the end of the line, thus','line_number':2119,'multiline':False]['text':' check for that.','line_number':2120,'multiline':False]['text':' move the cursor to the start of the line','line_number':2128,'multiline':False]['text':' XXX','line_number':2132,'multiline':False]['text':' If we are inside a raw string don't change the indent.','line_number':2134,'multiline':False]['text':' Ignore a raw string inside a comment.','line_number':2135,'multiline':False]['text':' findmatchlimit() static pos is overwritten, make a copy','line_number':2139,'multiline':False]['text':' #defines and so on go at the left when included in 'cinkeys',','line_number':2151,'multiline':False]['text':' excluding pragmas when customized in 'cinoptions'','line_number':2152,'multiline':False]['text':' Is it a non-case label?	Then that goes at the left margin too unless:','line_number':2163,'multiline':False]['text':'  - JS flag is set.','line_number':2164,'multiline':False]['text':'  - 'L' item has a positive value.','line_number':2165,'multiline':False]['text':' If we're inside a "//" comment and there is a "//" comment in a','line_number':2173,'multiline':False]['text':' previous line, lineup with that one.','line_number':2174,'multiline':False]['text':' XXX','line_number':2179,'multiline':False]['text':' There may be a statement before the comment, search from the end','line_number':2182,'multiline':False]['text':' of the line for a comment start.','line_number':2183,'multiline':False]['text':' find how indented the line beginning the comment is','line_number':2194,'multiline':False]['text':' If we're inside a comment and not looking at the start of the','line_number':2201,'multiline':False]['text':' comment, try using the 'comments' option.','line_number':2202,'multiline':False]['text':' XXX','line_number':2203,'multiline':False]['text':' start-comment string','line_number':2207,'multiline':False]['text':' middle-comment string','line_number':2208,'multiline':False]['text':' end-comment string','line_number':2209,'multiline':False]['text':' find how indented the line beginning the comment is','line_number':2215,'multiline':False]['text':' If our line starts with the middle comment string, line it','line_number':2257,'multiline':False]['text':' up with the comment opener per the 'comments' option.','line_number':2258,'multiline':False]['text':' If the start comment string matches in the previous','line_number':2265,'multiline':False]['text':' line, use the indent of that line plus offset.  If','line_number':2266,'multiline':False]['text':' the middle comment string matches in the previous','line_number':2267,'multiline':False]['text':' line, use the indent of that line.  XXX','line_number':2268,'multiline':False]['text':' If the start comment string doesn't match with the','line_number':2278,'multiline':False]['text':' start of the comment, skip this entry.  XXX','line_number':2279,'multiline':False]['text':' If our line starts with the end comment string, line it up','line_number':2293,'multiline':False]['text':' with the middle comment','line_number':2294,'multiline':False]['text':' XXX','line_number':2299,'multiline':False]['text':' If our line starts with an asterisk, line up with the','line_number':2311,'multiline':False]['text':' asterisk in the comment opener; otherwise, line up','line_number':2312,'multiline':False]['text':' with the first character of the comment text.','line_number':2313,'multiline':False]['text':' If we are more than one line away from the comment opener, take','line_number':2320,'multiline':False]['text':' the indent of the previous non-empty line.  If 'cino' has "CO"','line_number':2321,'multiline':False]['text':' and we are just below the comment opener and there are any','line_number':2322,'multiline':False]['text':' white characters after it line up with the text after it;','line_number':2323,'multiline':False]['text':' otherwise, add the amount specified by "c" in 'cino'','line_number':2324,'multiline':False]['text':' skip blank lines','line_number':2328,'multiline':False]['text':' XXX','line_number':2330,'multiline':False]['text':' use the comment opener','line_number':2333,'multiline':False]['text':' skip / and *','line_number':2338,'multiline':False]['text':' if something after it','line_number':2339,'multiline':False]['text':' Are we looking at a ']' that has a match?','line_number':2351,'multiline':False]['text':' align with the line containing the '['.','line_number':2355,'multiline':False]['text':' Are we inside parentheses or braces?  XXX','line_number':2360,'multiline':False]['text':' Both an unmatched '(' and '{' is found.  Use the one which is','line_number':2368,'multiline':False]['text':' closer to the current cursor position, set the other to NULL.','line_number':2369,'multiline':False]['text':' If the matching paren is more than one line away, use the indent of','line_number':2380,'multiline':False]['text':' a previous non-empty line that matches the same paren.','line_number':2381,'multiline':False]['text':' Line up with the start of the matching paren line.','line_number':2384,'multiline':False]['text':' XXX','line_number':2385,'multiline':False]['text':' skip comment lines','line_number':2394,'multiline':False]['text':' ignore #define, #if, etc.','line_number':2397,'multiline':False]['text':' Skip a comment or raw string.  XXX','line_number':2400,'multiline':False]['text':' XXX','line_number':2407,'multiline':False]['text':' XXX','line_number':2413,'multiline':False]['text':' Line up with line where the matching paren is. XXX','line_number':2427,'multiline':False]['text':' If the line starts with a '(' or the indent for unclosed','line_number':2428,'multiline':False]['text':' parentheses is zero, line up with the unclosed parentheses.','line_number':2429,'multiline':False]['text':' Look for the outermost opening parenthesis on this line','line_number':2437,'multiline':False]['text':' and check whether it belongs to an "if", "for" or "while".','line_number':2438,'multiline':False]['text':' Ignore a '(' in front of the line that has a match before','line_number':2469,'multiline':False]['text':' our matching '('.','line_number':2470,'multiline':False]['text':' If we're looking at a close paren, line up right there;','line_number':2490,'multiline':False]['text':' otherwise, line up with the next (non-white) character.','line_number':2491,'multiline':False]['text':' When b_ind_unclosed_wrapped is set and the matching paren is','line_number':2492,'multiline':False]['text':' the last nonwhite character of the line, use either the','line_number':2493,'multiline':False]['text':' indent of the current line or the indentation of the next','line_number':2494,'multiline':False]['text':' outer paren and add b_ind_unclosed_wrapped (for very long','line_number':2495,'multiline':False]['text':' lines).','line_number':2496,'multiline':False]['text':' look for opening unmatched paren, indent one level','line_number':2504,'multiline':False]['text':' for each additional level','line_number':2505,'multiline':False]['text':' In case of trailing space','line_number':2532,'multiline':False]['text':' Find how indented the paren is, or the character after it','line_number':2539,'multiline':False]['text':' if we did the above "if".','line_number':2540,'multiline':False]['text':' Line up with the start of the matching paren line.','line_number':2551,'multiline':False]['text':' Add b_ind_unclosed2 for each '(' before our matching one,','line_number':2562,'multiline':False]['text':' but ignore (void) before the line (ignore_paren_col).','line_number':2563,'multiline':False]['text':' Use b_ind_unclosed once, when the first '(' is not inside','line_number':2579,'multiline':False]['text':' braces','line_number':2580,'multiline':False]['text':' For a line starting with ')' use the minimum of the two','line_number':2598,'multiline':False]['text':' positions, to avoid giving it more indent than the previous','line_number':2599,'multiline':False]['text':' lines:','line_number':2600,'multiline':False]['text':'  func_long_name(		    if (x','line_number':2601,'multiline':False]['text':'	arg				    && yy','line_number':2602,'multiline':False]['text':'	)	  ^ not here	       )    ^ not here','line_number':2603,'multiline':False]['text':' add extra indent for a comment','line_number':2609,'multiline':False]['text':' We are inside braces, there is a { before this line at the position','line_number':2615,'multiline':False]['text':' stored in tryposBrace.','line_number':2616,'multiline':False]['text':' Make a copy of tryposBrace, it may point to pos_copy inside','line_number':2617,'multiline':False]['text':' find_start_brace(), which may be changed somewhere.','line_number':2618,'multiline':False]['text':' Now figure out how indented the line is in general.','line_number':2625,'multiline':False]['text':' If the brace was at the start of the line, we use that;','line_number':2626,'multiline':False]['text':' otherwise, check out the indentation of the line as','line_number':2627,'multiline':False]['text':' a whole and then add the "imaginary indent" to that.','line_number':2628,'multiline':False]['text':' That opening brace might have been on a continuation','line_number':2641,'multiline':False]['text':' line.  if so, find the start of the line.','line_number':2642,'multiline':False]['text':' Position the cursor over the rightmost paren, so that','line_number':2645,'multiline':False]['text':' matching it will take us back to the start of the line.','line_number':2646,'multiline':False]['text':' It could have been something like','line_number':2653,'multiline':False]['text':'	   case 1: if (asdf &&','line_number':2654,'multiline':False]['text':'			condition) {','line_number':2655,'multiline':False]['text':'		    }','line_number':2656,'multiline':False]['text':' For Javascript check if the line starts with "key:".','line_number':2668,'multiline':False]['text':' If we're looking at a closing brace, that's where','line_number':2672,'multiline':False]['text':' we want to be.  otherwise, add the amount of room','line_number':2673,'multiline':False]['text':' that an indent is supposed to be.','line_number':2674,'multiline':False]['text':' they may want closing braces to line up with something','line_number':2677,'multiline':False]['text':' other than the open brace.  indulge them, if so.','line_number':2678,'multiline':False]['text':' If we're looking at an "else", try to find an "if"','line_number':2683,'multiline':False]['text':' to match it with.','line_number':2684,'multiline':False]['text':' If we're looking at a "while", try to find a "do"','line_number':2685,'multiline':False]['text':' to match it with.','line_number':2686,'multiline':False]['text':' XXX','line_number':2690,'multiline':False]['text':' XXX','line_number':2697,'multiline':False]['text':' We get here if we are not on an "while-of-do" or "else" (or','line_number':2702,'multiline':False]['text':' failed to find a matching "if").','line_number':2703,'multiline':False]['text':' Search backwards for something to line up with.','line_number':2704,'multiline':False]['text':' First set amount for when we don't find anything.','line_number':2705,'multiline':False]['text':' if the '{' is  _really_ at the left margin, use the imaginary','line_number':2707,'multiline':False]['text':' location of a left-margin brace.  Otherwise, correct the','line_number':2708,'multiline':False]['text':' location for b_ind_open_extra.','line_number':2709,'multiline':False]['text':' '{' is in column 0','line_number':2711,'multiline':False]['text':' '{' is at start','line_number':2717,'multiline':False]['text':' '{' is at end of line','line_number':2724,'multiline':False]['text':' Compensate for adding b_ind_open_extra later.','line_number':2736,'multiline':False]['text':' it's a switch() label','line_number':2745,'multiline':False]['text':' find a previous switch() label','line_number':2747,'multiline':False]['text':' private:, ...','line_number':2750,'multiline':False]['text':' class decl is this block','line_number':2752,'multiline':False]['text':' break; ...','line_number':2758,'multiline':False]['text':' b_ind_level from start of block','line_number':2762,'multiline':False]['text':' Search backwards.  If we find something we recognize, line up','line_number':2768,'multiline':False]['text':' with that.','line_number':2769,'multiline':False]['text':'','line_number':2770,'multiline':False]['text':' If we're looking at an open brace, indent','line_number':2771,'multiline':False]['text':' the usual amount relative to the conditional','line_number':2772,'multiline':False]['text':' that opens the block.','line_number':2773,'multiline':False]['text':' If we went all the way back to the start of our scope, line','line_number':2780,'multiline':False]['text':' up with it.','line_number':2781,'multiline':False]['text':' We reached end of scope:','line_number':2784,'multiline':False]['text':' If looking for an enum or structure initialization','line_number':2785,'multiline':False]['text':' go further back:','line_number':2786,'multiline':False]['text':' If it is an initializer (enum xxx or xxx =), then','line_number':2787,'multiline':False]['text':' don't add ind_continuation, otherwise it is a variable','line_number':2788,'multiline':False]['text':' declaration:','line_number':2789,'multiline':False]['text':' int x,','line_number':2790,'multiline':False]['text':'     here; <-- add ind_continuation','line_number':2791,'multiline':False]['text':' nothing found (abuse curbuf->b_ind_maxparen as','line_number':2798,'multiline':False]['text':' limit) assume terminated line (i.e. a variable','line_number':2799,'multiline':False]['text':' initialization)','line_number':2800,'multiline':False]['text':' If we're in a comment or raw string now, skip to','line_number':2808,'multiline':False]['text':' the start of it.','line_number':2809,'multiline':False]['text':' Skip preprocessor directives and blank lines.','line_number':2820,'multiline':False]['text':' If we are at top level and the line looks like a','line_number':2830,'multiline':False]['text':' function declaration, we are done','line_number':2831,'multiline':False]['text':' (it's a variable declaration).','line_number':2832,'multiline':False]['text':' if the line is terminated with another ','','line_number':2836,'multiline':False]['text':' it is a continued variable initialization.','line_number':2837,'multiline':False]['text':' don't add extra indent.','line_number':2838,'multiline':False]['text':' TODO: does not work, if  a function','line_number':2839,'multiline':False]['text':' declaration is split over multiple lines:','line_number':2840,'multiline':False]['text':' cin_isfuncdecl returns FALSE then.','line_number':2841,'multiline':False]['text':' if it is an enum declaration or an assignment,','line_number':2845,'multiline':False]['text':' we are done.','line_number':2846,'multiline':False]['text':' nothing useful found','line_number':2850,'multiline':False]['text':' Skip parens and braces. Position the cursor','line_number':2857,'multiline':False]['text':' over the rightmost paren, so that matching it','line_number':2858,'multiline':False]['text':' will take us back to the start of the line.','line_number':2859,'multiline':False]['text':' XXX','line_number':2860,'multiline':False]['text':' it's a variable declaration, add indentation','line_number':2877,'multiline':False]['text':' like in','line_number':2878,'multiline':False]['text':' int a,','line_number':2879,'multiline':False]['text':'    b;','line_number':2880,'multiline':False]['text':' Looking for C++ namespace, need to look further','line_number':2909,'multiline':False]['text':' back.','line_number':2910,'multiline':False]['text':' If we're in a comment or raw string now, skip','line_number':2919,'multiline':False]['text':' to the start of it.','line_number':2920,'multiline':False]['text':' Skip preprocessor directives and blank lines.','line_number':2931,'multiline':False]['text':' Finally the actual check for "namespace".','line_number':2936,'multiline':False]['text':' If we're in a comment or raw string now, skip to the start','line_number':2957,'multiline':False]['text':' of it.  XXX','line_number':2958,'multiline':False]['text':' If this is a switch() label, may line up relative to that.','line_number':2968,'multiline':False]['text':' If this is a C++ scope declaration, do the same.','line_number':2969,'multiline':False]['text':' we are only looking for cpp base class','line_number':2973,'multiline':False]['text':' declaration/initialization any longer','line_number':2974,'multiline':False]['text':' When looking for a "do" we are not interested in','line_number':2978,'multiline':False]['text':' labels.','line_number':2979,'multiline':False]['text':'	case xx:','line_number':2983,'multiline':False]['text':'	    c = 99 +	    <- this indent plus continuation','line_number':2984,'multiline':False]['text':'->	   here;','line_number':2985,'multiline':False]['text':'	case xx:	<- line up with this case','line_number':2996,'multiline':False]['text':'	    x = 333;','line_number':2997,'multiline':False]['text':'	case yy:','line_number':2998,'multiline':False]['text':' Check that this case label is not for another','line_number':3003,'multiline':False]['text':' switch()		    XXX','line_number':3004,'multiline':False]['text':' XXX','line_number':3008,'multiline':False]['text':' XXX','line_number':3014,'multiline':False]['text':'	 case xx: if (cond)	    <- line up with this if','line_number':3016,'multiline':False]['text':'		      y = y + 1;','line_number':3017,'multiline':False]['text':' ->	  s = 99;','line_number':3018,'multiline':False]['text':'','line_number':3019,'multiline':False]['text':'	 case xx:','line_number':3020,'multiline':False]['text':'	     if (cond)		<- line up with this line','line_number':3021,'multiline':False]['text':'		 y = y + 1;','line_number':3022,'multiline':False]['text':' ->    s = 99;','line_number':3023,'multiline':False]['text':'	 case xx: x = x + 1;	    <- line up with this x','line_number':3033,'multiline':False]['text':' ->	  y = y + 1;','line_number':3034,'multiline':False]['text':'','line_number':3035,'multiline':False]['text':'	 case xx: if (cond)	    <- line up with this if','line_number':3036,'multiline':False]['text':' ->	       y = y + 1;','line_number':3037,'multiline':False]['text':' Try to get the indent of a statement before the switch','line_number':3053,'multiline':False]['text':' label.  If nothing is found, line up relative to the','line_number':3054,'multiline':False]['text':' switch label.','line_number':3055,'multiline':False]['text':'	    break;		<- may line up with this line','line_number':3056,'multiline':False]['text':'	 case xx:','line_number':3057,'multiline':False]['text':' ->   y = 1;','line_number':3058,'multiline':False]['text':' XXX','line_number':3059,'multiline':False]['text':' Looking for a switch() label or C++ scope declaration,','line_number':3067,'multiline':False]['text':' ignore other lines, skip {}-blocks.','line_number':3068,'multiline':False]['text':' Ignore jump labels with nothing after them.','line_number':3080,'multiline':False]['text':' Ignore #defines, #if, etc.','line_number':3088,'multiline':False]['text':' Ignore comment and empty lines.','line_number':3089,'multiline':False]['text':' (need to get the line again, cin_islabel() may have','line_number':3090,'multiline':False]['text':' unlocked it)','line_number':3091,'multiline':False]['text':' Are we at the start of a cpp base class declaration or','line_number':3097,'multiline':False]['text':' constructor initialization?  XXX','line_number':3098,'multiline':False]['text':' Need to find start of the declaration.','line_number':3116,'multiline':False]['text':' XXX','line_number':3122,'multiline':False]['text':' only look, whether there is a cpp base class','line_number':3129,'multiline':False]['text':' declaration or initialization before the opening brace.','line_number':3130,'multiline':False]['text':' What happens next depends on the line being terminated.','line_number':3137,'multiline':False]['text':' If terminated with a ',' only consider it terminating if','line_number':3138,'multiline':False]['text':' there is another unterminated statement behind, eg:','line_number':3139,'multiline':False]['text':'   123,','line_number':3140,'multiline':False]['text':'   sizeof','line_number':3141,'multiline':False]['text':'	  here','line_number':3142,'multiline':False]['text':' Otherwise check whether it is an enumeration or structure','line_number':3143,'multiline':False]['text':' initialisation (not indented) or a variable declaration','line_number':3144,'multiline':False]['text':' (indented).','line_number':3145,'multiline':False]['text':' only check the first line','line_number':3150,'multiline':False]['text':' For Javascript we might be inside an object:','line_number':3153,'multiline':False]['text':'   key: something,  <- align with this','line_number':3154,'multiline':False]['text':'   key: something','line_number':3155,'multiline':False]['text':' or:','line_number':3156,'multiline':False]['text':'   key: something +  <- align with this','line_number':3157,'multiline':False]['text':'       something,','line_number':3158,'multiline':False]['text':'   key: something','line_number':3159,'multiline':False]['text':' line below current line is the one that starts a','line_number':3174,'multiline':False]['text':' (possibly broken) line ending in a comma.','line_number':3175,'multiline':False]['text':' line above is start of the scope, thus current','line_number':3181,'multiline':False]['text':' line is the one that stars a (possibly broken)','line_number':3182,'multiline':False]['text':' line ending in a comma.','line_number':3183,'multiline':False]['text':' if we're in the middle of a paren thing,','line_number':3194,'multiline':False]['text':' go back to the line that starts it so','line_number':3195,'multiline':False]['text':' we can get the right prevailing indent','line_number':3196,'multiline':False]['text':'	   if ( foo &&','line_number':3197,'multiline':False]['text':'		    bar )','line_number':3198,'multiline':False]['text':' Position the cursor over the rightmost paren, so that','line_number':3200,'multiline':False]['text':' matching it will take us back to the start of the line.','line_number':3201,'multiline':False]['text':' Ignore a match before the start of the block.','line_number':3202,'multiline':False]['text':' If we are looking for ',', we also look for matching','line_number':3212,'multiline':False]['text':' braces.','line_number':3213,'multiline':False]['text':' Check if we are on a case label now.  This is','line_number':3223,'multiline':False]['text':' handled above.','line_number':3224,'multiline':False]['text':'     case xx:  if ( asdf &&','line_number':3225,'multiline':False]['text':'			asdf)','line_number':3226,'multiline':False]['text':' Skip over continuation lines to find the one to get the','line_number':3237,'multiline':False]['text':' indent from','line_number':3238,'multiline':False]['text':' char *usethis = "bla{backslash}','line_number':3239,'multiline':False]['text':'		 bla",','line_number':3240,'multiline':False]['text':'      here;','line_number':3241,'multiline':False]['text':' Get indent and pointer to text for current line,','line_number':3255,'multiline':False]['text':' ignoring any jump label.  XXX','line_number':3256,'multiline':False]['text':' If this is just above the line we are indenting, and it','line_number':3261,'multiline':False]['text':' starts with a '{', line it up with this line.','line_number':3262,'multiline':False]['text':'		while (not)','line_number':3263,'multiline':False]['text':' ->	{','line_number':3264,'multiline':False]['text':'		}','line_number':3265,'multiline':False]['text':' Only add b_ind_open_extra when the current line','line_number':3270,'multiline':False]['text':' doesn't start with a '{', which must have a match','line_number':3271,'multiline':False]['text':' in the same line (scope is the same).  Probably:','line_number':3272,'multiline':False]['text':'	{ 1, 2 },','line_number':3273,'multiline':False]['text':' ->	{ 3, 4 }','line_number':3274,'multiline':False]['text':' have to look back, whether it is a cpp base','line_number':3280,'multiline':False]['text':' class declaration or initialization','line_number':3281,'multiline':False]['text':' Check if we are after an "if", "while", etc.','line_number':3288,'multiline':False]['text':' Also allow "} else".','line_number':3289,'multiline':False]['text':' Found an unterminated line after an if (), line up','line_number':3292,'multiline':False]['text':' with the last one.','line_number':3293,'multiline':False]['text':'   if (cond)','line_number':3294,'multiline':False]['text':'	    100 +','line_number':3295,'multiline':False]['text':' ->		here;','line_number':3296,'multiline':False]['text':' If this is just above the line we are indenting, we','line_number':3307,'multiline':False]['text':' are finished.','line_number':3308,'multiline':False]['text':'	    while (not)','line_number':3309,'multiline':False]['text':' ->		here;','line_number':3310,'multiline':False]['text':' Otherwise this indent can be used when the line','line_number':3311,'multiline':False]['text':' before this is terminated.','line_number':3312,'multiline':False]['text':'	yyy;','line_number':3313,'multiline':False]['text':'	if (stat)','line_number':3314,'multiline':False]['text':'	    while (not)','line_number':3315,'multiline':False]['text':'		xxx;','line_number':3316,'multiline':False]['text':' ->	here;','line_number':3317,'multiline':False]['text':' Special trick: when expecting the while () after a','line_number':3328,'multiline':False]['text':' do, line up with the while ()','line_number':3329,'multiline':False]['text':'     do','line_number':3330,'multiline':False]['text':'	    x = 1;','line_number':3331,'multiline':False]['text':' ->  here','line_number':3332,'multiline':False]['text':' When searching for a terminated line, don't use the','line_number':3341,'multiline':False]['text':' one between the "if" and the matching "else".','line_number':3342,'multiline':False]['text':' Need to use the scope of this "else".  XXX','line_number':3343,'multiline':False]['text':' If whilelevel != 0 continue looking for a "do {".','line_number':3344,'multiline':False]['text':' If we're looking at "} else", let's make sure we','line_number':3347,'multiline':False]['text':' find the opening brace of the enclosing scope,','line_number':3348,'multiline':False]['text':' not the one from "if (condition) {".','line_number':3349,'multiline':False]['text':' If we're below an unterminated line that is not an','line_number':3361,'multiline':False]['text':' "if" or something, we may line up with this line or','line_number':3362,'multiline':False]['text':' add something for a continuation line, depending on','line_number':3363,'multiline':False]['text':' the line before this one.','line_number':3364,'multiline':False]['text':' Found two unterminated lines on a row, line up with','line_number':3367,'multiline':False]['text':' the last one.','line_number':3368,'multiline':False]['text':'   c = 99 +','line_number':3369,'multiline':False]['text':'	    100 +','line_number':3370,'multiline':False]['text':' ->	    here;','line_number':3371,'multiline':False]['text':' When line ends in a comma add extra indent','line_number':3374,'multiline':False]['text':' Found two lines ending in ',', lineup with the','line_number':3382,'multiline':False]['text':' lowest one, but check for cpp base class','line_number':3383,'multiline':False]['text':' declaration/initialization, if it is an','line_number':3384,'multiline':False]['text':' opening brace or we are looking just for','line_number':3385,'multiline':False]['text':' enumerations/initializations.','line_number':3386,'multiline':False]['text':' Ignore unterminated lines in between, but','line_number':3396,'multiline':False]['text':' reduce indent.','line_number':3397,'multiline':False]['text':' Found first unterminated line on a row, may','line_number':3403,'multiline':False]['text':' line up with this line, remember its indent','line_number':3404,'multiline':False]['text':'	    100 +','line_number':3405,'multiline':False]['text':' ->	    here;','line_number':3406,'multiline':False]['text':' If previous line ends in ',', check whether we','line_number':3415,'multiline':False]['text':' are in an initialization or enum','line_number':3416,'multiline':False]['text':' struct xxx =','line_number':3417,'multiline':False]['text':' {','line_number':3418,'multiline':False]['text':'      sizeof a,','line_number':3419,'multiline':False]['text':'      124 };','line_number':3420,'multiline':False]['text':' or a normal possible continuation line.','line_number':3421,'multiline':False]['text':' but only, of no other statement has been found','line_number':3422,'multiline':False]['text':' yet.','line_number':3423,'multiline':False]['text':' Search for a line ending in a comma','line_number':3428,'multiline':False]['text':' and line up with the line below it','line_number':3429,'multiline':False]['text':' (could be the current line).','line_number':3430,'multiline':False]['text':' some = [','line_number':3431,'multiline':False]['text':'     1,     <- line up here','line_number':3432,'multiline':False]['text':'     2,','line_number':3433,'multiline':False]['text':' some = [','line_number':3434,'multiline':False]['text':'     3 +    <- line up here','line_number':3435,'multiline':False]['text':'       4 *','line_number':3436,'multiline':False]['text':'        5,','line_number':3437,'multiline':False]['text':'     6,','line_number':3438,'multiline':False]['text':' Current line is first inside','line_number':3449,'multiline':False]['text':' [], line up with it.','line_number':3450,'multiline':False]['text':' XXX','line_number':3467,'multiline':False]['text':' Check if we are after a while (cond);','line_number':3480,'multiline':False]['text':' If so: Ignore until the matching "do".','line_number':3481,'multiline':False]['text':' XXX','line_number':3482,'multiline':False]['text':' Found an unterminated line after a while ();, line up','line_number':3484,'multiline':False]['text':' with the last one.','line_number':3485,'multiline':False]['text':'	    while (cond);','line_number':3486,'multiline':False]['text':'	    100 +		<- line up with this one','line_number':3487,'multiline':False]['text':' ->	    here;','line_number':3488,'multiline':False]['text':' XXX','line_number':3502,'multiline':False]['text':' We are after a "normal" statement.','line_number':3509,'multiline':False]['text':' If we had another statement we can stop now and use the','line_number':3510,'multiline':False]['text':' indent of that other statement.','line_number':3511,'multiline':False]['text':' Otherwise the indent of the current statement may be used,','line_number':3512,'multiline':False]['text':' search backwards for the next "normal" statement.','line_number':3513,'multiline':False]['text':' Skip single break line, if before a switch label. It','line_number':3516,'multiline':False]['text':' may be lined up with the case label.','line_number':3517,'multiline':False]['text':' Handle "do {" line.','line_number':3525,'multiline':False]['text':' XXX','line_number':3531,'multiline':False]['text':' Found a terminated line above an unterminated line. Add','line_number':3537,'multiline':False]['text':' the amount for a continuation line.','line_number':3538,'multiline':False]['text':'	 x = 1;','line_number':3539,'multiline':False]['text':'	 y = foo +','line_number':3540,'multiline':False]['text':' ->	here;','line_number':3541,'multiline':False]['text':' or','line_number':3542,'multiline':False]['text':'	 int x = 1;','line_number':3543,'multiline':False]['text':'	 int foo,','line_number':3544,'multiline':False]['text':' ->	here;','line_number':3545,'multiline':False]['text':' Found a terminated line above a terminated line or "if"','line_number':3556,'multiline':False]['text':' etc. line. Use the amount of the line below us.','line_number':3557,'multiline':False]['text':'	 x = 1;				x = 1;','line_number':3558,'multiline':False]['text':'	 if (asdf)		    y = 2;','line_number':3559,'multiline':False]['text':'	     while (asdf)	  ->here;','line_number':3560,'multiline':False]['text':'		here;','line_number':3561,'multiline':False]['text':' ->foo;','line_number':3562,'multiline':False]['text':' First line above the one we're indenting is terminated.','line_number':3569,'multiline':False]['text':' To know what needs to be done look further backward for','line_number':3570,'multiline':False]['text':' a terminated line.','line_number':3571,'multiline':False]['text':' position the cursor over the rightmost paren, so','line_number':3574,'multiline':False]['text':' that matching it will take us back to the start of','line_number':3575,'multiline':False]['text':' the line.  Helps for:','line_number':3576,'multiline':False]['text':'     func(asdr,','line_number':3577,'multiline':False]['text':'	      asdfasdf);','line_number':3578,'multiline':False]['text':'     here;','line_number':3579,'multiline':False]['text':' Check if we are on a case label now.  This is','line_number':3586,'multiline':False]['text':' handled above.','line_number':3587,'multiline':False]['text':'	   case xx:  if ( asdf &&','line_number':3588,'multiline':False]['text':'			    asdf)','line_number':3589,'multiline':False]['text':' When aligning with the case statement, don't align','line_number':3600,'multiline':False]['text':' with a statement after it.','line_number':3601,'multiline':False]['text':'  case 1: {   <-- don't use this { position','line_number':3602,'multiline':False]['text':'	stat;','line_number':3603,'multiline':False]['text':'  }','line_number':3604,'multiline':False]['text':'  case 2:','line_number':3605,'multiline':False]['text':'	stat;','line_number':3606,'multiline':False]['text':' }','line_number':3607,'multiline':False]['text':' Get indent and pointer to text for current line,','line_number':3611,'multiline':False]['text':' ignoring any jump label.','line_number':3612,'multiline':False]['text':' See remark above: "Only add b_ind_open_extra.."','line_number':3617,'multiline':False]['text':' When a terminated line starts with "else" skip to','line_number':3623,'multiline':False]['text':' the matching "if":','line_number':3624,'multiline':False]['text':'       else 3;','line_number':3625,'multiline':False]['text':'	     indent this;','line_number':3626,'multiline':False]['text':' Need to use the scope of this "else".  XXX','line_number':3627,'multiline':False]['text':' If whilelevel != 0 continue looking for a "do {".','line_number':3628,'multiline':False]['text':' If we're at the end of a block, skip to the start of','line_number':3641,'multiline':False]['text':' that block.','line_number':3642,'multiline':False]['text':' XXX','line_number':3644,'multiline':False]['text':' if not "else {" check for terminated again','line_number':3648,'multiline':False]['text':' but skip block for "} else {"','line_number':3649,'multiline':False]['text':' add extra indent for a comment','line_number':3662,'multiline':False]['text':' subtract extra left-shift for jump labels','line_number':3666,'multiline':False]['text':' ok -- we're not inside any sort of structure at all!','line_number':3673,'multiline':False]['text':'','line_number':3674,'multiline':False]['text':' This means we're at the top level, and everything should','line_number':3675,'multiline':False]['text':' basically just match where the previous line is, except','line_number':3676,'multiline':False]['text':' for the lines immediately following a function declaration,','line_number':3677,'multiline':False]['text':' which are K&R-style parameters and need to be indented.','line_number':3678,'multiline':False]['text':'','line_number':3679,'multiline':False]['text':' if our line starts with an open brace, forget about any','line_number':3680,'multiline':False]['text':' prevailing indent and make sure it looks like the start','line_number':3681,'multiline':False]['text':' of a function','line_number':3682,'multiline':False]['text':' If the NEXT line is a function declaration, the current','line_number':3690,'multiline':False]['text':' line needs to be indented as a function type spec.','line_number':3691,'multiline':False]['text':' Don't do this if the current line looks like a comment or if the','line_number':3692,'multiline':False]['text':' current line is terminated, ie. ends in ';', or if the current line','line_number':3693,'multiline':False]['text':' contains { or }: "void f(condition) {\n if (1)"','line_number':3694,'multiline':False]['text':' search backwards until we find something we recognize','line_number':3709,'multiline':False]['text':' If we're in a comment or raw string now, skip to the start','line_number':3719,'multiline':False]['text':' of it.  XXX','line_number':3720,'multiline':False]['text':' Are we at the start of a cpp base class declaration or','line_number':3728,'multiline':False]['text':' constructor initialization?  XXX','line_number':3729,'multiline':False]['text':' XXX','line_number':3738,'multiline':False]['text':' Skip preprocessor directives and blank lines.','line_number':3743,'multiline':False]['text':' If the previous line ends in ',', use one level of','line_number':3750,'multiline':False]['text':' indentation:','line_number':3751,'multiline':False]['text':' int foo,','line_number':3752,'multiline':False]['text':'     bar;','line_number':3753,'multiline':False]['text':' do this before checking for '}' in case of eg.','line_number':3754,'multiline':False]['text':' enum foobar','line_number':3755,'multiline':False]['text':' {','line_number':3756,'multiline':False]['text':'   ...','line_number':3757,'multiline':False]['text':' } foo,','line_number':3758,'multiline':False]['text':'   bar;','line_number':3759,'multiline':False]['text':' take us back to opening paren','line_number':3764,'multiline':False]['text':' For a line ending in ',' that is a continuation line go','line_number':3770,'multiline':False]['text':' back to the first line with a backslash:','line_number':3771,'multiline':False]['text':' char *foo = "bla{backslash}','line_number':3772,'multiline':False]['text':'		 bla",','line_number':3773,'multiline':False]['text':'      here;','line_number':3774,'multiline':False]['text':' XXX','line_number':3784,'multiline':False]['text':' If the line looks like a function declaration, and we're','line_number':3793,'multiline':False]['text':' not in a comment, put it the left margin.','line_number':3794,'multiline':False]['text':' XXX','line_number':3795,'multiline':False]['text':' Finding the closing '}' of a previous function.  Put','line_number':3799,'multiline':False]['text':' current line at the left margin.  For when 'cino' has "fs".','line_number':3800,'multiline':False]['text':'			    (matching {)','line_number':3804,'multiline':False]['text':' If the previous line ends on '};' (maybe followed by','line_number':3805,'multiline':False]['text':' comments) align at column 0.  For example:','line_number':3806,'multiline':False]['text':' char *string_array[] = { "foo",','line_number':3807,'multiline':False]['text':'     / * x * / "b};ar" }; / * foobar * /','line_number':3808,'multiline':False]['text':' If the previous line ends on '[' we are probably in an','line_number':3812,'multiline':False]['text':' array constant:','line_number':3813,'multiline':False]['text':' something = [','line_number':3814,'multiline':False]['text':'     234,  <- extra indent','line_number':3815,'multiline':False]['text':' Find a line only has a semicolon that belongs to a previous','line_number':3822,'multiline':False]['text':' line ending in '}', e.g. before an #endif.  Don't increase','line_number':3823,'multiline':False]['text':' indent then.','line_number':3824,'multiline':False]['text':' If the PREVIOUS line is a function declaration, the current','line_number':3843,'multiline':False]['text':' line (and the ones that follow) needs to be indented as','line_number':3844,'multiline':False]['text':' parameters.','line_number':3845,'multiline':False]['text':' If the previous line ends in ';' and the line before the','line_number':3852,'multiline':False]['text':' previous line ends in ',' or '\', ident to column zero:','line_number':3853,'multiline':False]['text':' int foo,','line_number':3854,'multiline':False]['text':'     bar;','line_number':3855,'multiline':False]['text':' indent_to_0 here;','line_number':3856,'multiline':False]['text':' Doesn't look like anything interesting -- so just','line_number':3866,'multiline':False]['text':' use the indent of this line.','line_number':3867,'multiline':False]['text':'','line_number':3868,'multiline':False]['text':' Position the cursor over the rightmost paren, so that','line_number':3869,'multiline':False]['text':' matching it will take us back to the start of the line.','line_number':3870,'multiline':False]['text':' XXX','line_number':3875,'multiline':False]['text':' add extra indent for a comment','line_number':3879,'multiline':False]['text':' add extra indent if the previous line ended in a backslash:','line_number':3883,'multiline':False]['text':'	      "asdfasdf{backslash}','line_number':3884,'multiline':False]['text':'		  here";','line_number':3885,'multiline':False]['text':'	    char *foo = "asdf{backslash}','line_number':3886,'multiline':False]['text':'			 here";','line_number':3887,'multiline':False]['text':' put the cursor back where it belongs','line_number':3906,'multiline':False]['text':'
 * return TRUE if 'cinkeys' contains the key "keytyped",
 * when == '*':	    Only if key is preceded with '*'	(indent before insert)
 * when == '!':	    Only if key is preceded with '!'	(don't insert)
 * when == ' ':	    Only if key is not preceded with '*'(indent afterwards)
 *
 * "keytyped" can have a few special values:
 * KEY_OPEN_FORW
 * KEY_OPEN_BACK
 * KEY_COMPLETE	    just finished completion.
 *
 * If line_is_empty is TRUE accept keys with '0' before them.
 ','line_number':3914,'multiline':True]['text':' Can happen with CTRL-Y and CTRL-E on a short line.','line_number':3942,'multiline':False]['text':' 'indentexpr' set: use 'indentkeys'','line_number':3947,'multiline':False]['text':' 'indentexpr' empty: use 'cinkeys'','line_number':3950,'multiline':False]['text':' Find out if we want to try a match with this key, depending on','line_number':3953,'multiline':False]['text':' 'when' and a '*' or '!' before the key.','line_number':3954,'multiline':False]['text':' If there is a '0', only accept a match if the line is empty.','line_number':3964,'multiline':False]['text':' But may still match when typing last char of a word.','line_number':3965,'multiline':False]['text':' does it look like a control character?','line_number':3976,'multiline':False]['text':' 'o' means "o" command, open forward.','line_number':3983,'multiline':False]['text':' 'O' means "O" command, open backward.','line_number':3984,'multiline':False]['text':' 'e' means to check for "else" at start of line and just before the','line_number':3998,'multiline':False]['text':' cursor.','line_number':3999,'multiline':False]['text':' ':' only causes an indent if it is at the end of a label or case','line_number':4012,'multiline':False]['text':' statement, or when it was before typing the ':' (to fix','line_number':4013,'multiline':False]['text':' class::method for C++).','line_number':4014,'multiline':False]['text':' Need to get the line again after cin_islabel().','line_number':4022,'multiline':False]['text':' Is it a key in <>, maybe?','line_number':4041,'multiline':False]['text':' make up some named keys <o>, <O>, <e>, <0>, <>>, <<>, <*>,','line_number':4046,'multiline':False]['text':' <:> and <!> so that people can re-indent on o, O, e, 0, <,','line_number':4047,'multiline':False]['text':' >, *, : and ! keys if they really really want to.','line_number':4048,'multiline':False]['text':' Is it a word: "=word"?','line_number':4062,'multiline':False]['text':' Just completed a word, check if it starts with "look".','line_number':4085,'multiline':False]['text':' search back for the start of a word.','line_number':4086,'multiline':False]['text':' TODO: multi-byte','line_number':4110,'multiline':False]['text':' "0=word": Check if there are only blanks before the','line_number':4125,'multiline':False]['text':' word.','line_number':4126,'multiline':False]['text':' ok, it's a boring generic character.','line_number':4137,'multiline':False]['text':' Skip over ", ".','line_number':4146,'multiline':False]['text':'
 * Do C or expression indenting on the current line.
 ','line_number':4152,'multiline':True]['text':'
 * "cindent(lnum)" function
 ','line_number':4167,'multiline':True]