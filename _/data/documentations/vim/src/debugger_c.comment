['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * debugger.c: Vim script debugger functions
 ','line_number':10,'multiline':True]['text':' batch mode debugging: don't save','line_number':17,'multiline':False]['text':' and restore typeahead.','line_number':18,'multiline':False]['text':' old and newval for debug expressions','line_number':23,'multiline':False]['text':' use debug_expr','line_number':25,'multiline':False]['text':'
 * do_debug(): Debug mode.
 * Repeatedly get Ex commands, until told to continue normal execution.
 ','line_number':33,'multiline':True]['text':' Can't do this when there is no terminal for input/output.','line_number':69,'multiline':False]['text':' Break as soon as possible.','line_number':72,'multiline':False]['text':' Make sure we are in raw mode and start termcap mode.  Might have side','line_number':78,'multiline':False]['text':' effects...','line_number':79,'multiline':False]['text':' don't redisplay the window','line_number':83,'multiline':False]['text':' don't wait for return','line_number':84,'multiline':False]['text':' don't use error from debugged stuff','line_number':85,'multiline':False]['text':' display commands','line_number':86,'multiline':False]['text':' display messages','line_number':87,'multiline':False]['text':' display error messages','line_number':88,'multiline':False]['text':' don't redirect debug commands','line_number':89,'multiline':False]['text':' disable  regexp timeout flag','line_number':90,'multiline':False]['text':' Repeat getting a command and executing it.','line_number':116,'multiline':False]['text':' Save the current typeahead buffer and replace it with an empty one.','line_number':122,'multiline':False]['text':' This makes sure we get input from the user here and don't interfere','line_number':123,'multiline':False]['text':' with the commands being executed.  Reset "ex_normal_busy" to avoid','line_number':124,'multiline':False]['text':' the side effects of using ":normal". Save the stuff buffer and make','line_number':125,'multiline':False]['text':' it empty. Set ignore_script to avoid reading from script input.','line_number':126,'multiline':False]['text':' don't debug any function call, e.g. from an expression mapping','line_number':137,'multiline':False]['text':' If this is a debug command, set "last_cmd".','line_number':156,'multiline':False]['text':' If not, reset "last_cmd".','line_number':157,'multiline':False]['text':' For a blank line use previous command.','line_number':158,'multiline':False]['text':' Check that the tail matches.','line_number':211,'multiline':False]['text':' Execute debug command: decide where to break next and','line_number':225,'multiline':False]['text':' return.','line_number':226,'multiline':False]['text':' Do not repeat ">interrupt" cmd, continue stepping.','line_number':248,'multiline':False]['text':' Going out reset backtrace_level','line_number':274,'multiline':False]['text':' don't debug this command','line_number':279,'multiline':False]['text':' Only print the message again when typing a command before coming back','line_number':306,'multiline':False]['text':' here.','line_number':307,'multiline':False]['text':'
 * ":debug".
 ','line_number':403,'multiline':True]['text':'
 * When debugging or a breakpoint is set on a skipped command, no debug prompt
 * is shown by do_one_cmd().  This situation is indicated by debug_skipped, and
 * debug_skipped_name is then set to the source name in the breakpoint case.  If
 * a skipped command decides itself that a debug prompt should be displayed, it
 * can do so by calling dbg_check_skipped().
 ','line_number':419,'multiline':True]['text':'
 * Go to debug mode when a breakpoint was encountered or "ex_nesting_level" is
 * at or below the break level.  But only when the line is actually
 * executed.  Return TRUE and set breakpoint_name for skipped commands that
 * decide to execute something themselves.
 * Called from do_one_cmd() before executing a command.
 ','line_number':429,'multiline':True]['text':' replace K_SNR with "<SNR>"','line_number':446,'multiline':False]['text':'
 * Go to debug mode if skipped by dbg_check_breakpoint() because eap->skip was
 * set.  Return TRUE when the debug mode is entered this time.
 ','line_number':479,'multiline':True]['text':' Save the value of got_int and reset it.  We don't want a previous','line_number':491,'multiline':False]['text':' interruption cause flushing the input buffer.','line_number':492,'multiline':False]['text':' eap->skip is TRUE','line_number':496,'multiline':False]['text':'
 * The list of breakpoints: dbg_breakp.
 * This is a grow-array of structs.
 ','line_number':504,'multiline':True]['text':' breakpoint number','line_number':510,'multiline':False]['text':' DBG_FUNC, DBG_FILE or DBG_EXPR','line_number':511,'multiline':False]['text':' function, expression or file name','line_number':512,'multiline':False]['text':' regexp program','line_number':513,'multiline':False]['text':' line number in function or file','line_number':514,'multiline':False]['text':' ! used','line_number':515,'multiline':False]['text':' last result of watchexpression','line_number':517,'multiline':False]['text':' stored nested level for expr','line_number':519,'multiline':False]['text':' nr of last defined breakpoint','line_number':525,'multiline':False]['text':' Profiling uses file and func names similar to breakpoints.','line_number':529,'multiline':False]['text':' Profiling caches results of regexp lookups for function/script name.','line_number':532,'multiline':False]['text':' cache data booleans: profiling, forceit','line_number':540,'multiline':False]['text':' actually longer','line_number':541,'multiline':False]['text':' Can enable to get some info about profile caching','line_number':556,'multiline':False]['text':' #define PROF_CACHE_LOG','line_number':557,'multiline':False]['text':'
 * Evaluate the "bp->dbg_name" expression and return the result.
 * Disables error messages.
 ','line_number':567,'multiline':True]['text':' Disable error messages, a bad expression would make Vim unusable.','line_number':576,'multiline':False]['text':'
 * Parse the arguments of ":profile", ":breakadd" or ":breakdel" and put them
 * in the entry just after the last one in dbg_breakp.  Note that "dbg_name"
 * is allocated.
 * Returns FAIL for failure.
 ','line_number':584,'multiline':True]['text':' either &dbg_breakp or &prof_ga','line_number':593,'multiline':False]['text':' Find "func" or "file".','line_number':604,'multiline':False]['text':' Find optional line number.','line_number':636,'multiline':False]['text':' Find the function or file name.  Don't accept a function name with ().','line_number':651,'multiline':False]['text':' Expand the file name in the same way as do_source().  This means','line_number':672,'multiline':False]['text':' doing it twice, so that $DIR/file gets expanded when $DIR is','line_number':673,'multiline':False]['text':' "~/dir".','line_number':674,'multiline':False]['text':'
 * ":breakadd".  Also used for ":profile".
 ','line_number':696,'multiline':True]['text':' default line number is 1','line_number':730,'multiline':False]['text':' DBG_EXPR','line_number':745,'multiline':False]['text':'
 * ":debuggreedy".
 ','line_number':753,'multiline':True]['text':'
 * Return TRUE if there is any expression breakpoint.
 ','line_number':779,'multiline':True]['text':'
 * ":breakdel" and ":profdel".
 ','line_number':788,'multiline':True]['text':' ":breakdel {nr}"','line_number':815,'multiline':False]['text':' ":breakdel {func|file|expr} [lnum] {name}"','line_number':831,'multiline':False]['text':' If all breakpoints were removed clear the array.','line_number':880,'multiline':False]['text':'
 * ":breaklist".
 ','line_number':887,'multiline':True]['text':'
 * Find a breakpoint for a function or sourced file.
 * Returns line number at which to break; zero when no matching breakpoint.
 ','line_number':919,'multiline':True]['text':' TRUE for a file, FALSE for a function','line_number':925,'multiline':False]['text':' file or function name','line_number':926,'multiline':False]['text':' after this line number','line_number':927,'multiline':False]['text':'
 * Return TRUE if profiling is on for a function or sourced file.
 * Cache the results of debuggy_find().
 * Cache is cleared whenever prof_ga.ga_len is changed.
 ','line_number':936,'multiline':True]['text':' TRUE for a file, FALSE for a function','line_number':943,'multiline':False]['text':' file or function name','line_number':944,'multiline':False]['text':' return: forceit','line_number':945,'multiline':False]['text':' use/return fname hash, may be NULL','line_number':946,'multiline':False]['text':' run debuggy_find and capture return and forceit','line_number':975,'multiline':False]['text':'
 * Common code for dbg_find_breakpoint() and has_profiling().
 ','line_number':1032,'multiline':True]['text':' TRUE for a file, FALSE for a function','line_number':1037,'multiline':False]['text':' file or function name','line_number':1038,'multiline':False]['text':' after this line number','line_number':1039,'multiline':False]['text':' either &dbg_breakp or &prof_ga','line_number':1040,'multiline':False]['text':' if not NULL: return forceit','line_number':1041,'multiline':False]['text':' Return quickly when there are no breakpoints.','line_number':1050,'multiline':False]['text':' For a script-local function remove the prefix, so that','line_number':1054,'multiline':False]['text':' "profile func Func" matches "Func" in any script.  Otherwise it's very','line_number':1055,'multiline':False]['text':' difficult to profile/debug a script-local function.  It may match a','line_number':1056,'multiline':False]['text':' function in the wrong script, but that is much better than not being','line_number':1057,'multiline':False]['text':' able to profile/debug a function in a script with unknown ID.','line_number':1058,'multiline':False]['text':' Also match a script-specific name.','line_number':1059,'multiline':False]['text':' Skip entries that are not useful or are for a line that is beyond','line_number':1073,'multiline':False]['text':' an already found breakpoint.','line_number':1074,'multiline':False]['text':' Save the value of got_int and reset it.  We don't want a','line_number':1083,'multiline':False]['text':' previous interruption cancel matching, only hitting CTRL-C','line_number':1084,'multiline':False]['text':' while matching should abort it.','line_number':1085,'multiline':False]['text':' Use "==" instead of "is" for strings, that is what we','line_number':1121,'multiline':False]['text':' always have done.','line_number':1122,'multiline':False]['text':' Need to evaluate again, typval_compare() overwrites','line_number':1133,'multiline':False]['text':' "tv".','line_number':1134,'multiline':False]['text':'
 * Called when a breakpoint was encountered.
 ','line_number':1166,'multiline':True]['text':' We need to check if this line is actually executed in do_one_cmd()','line_number':1172,'multiline':False]