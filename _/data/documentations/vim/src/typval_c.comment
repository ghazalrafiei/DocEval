['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * typval.c: functions that deal with a typval
 ','line_number':10,'multiline':True]['text':'
 * Allocate memory for a variable type-value, and make it empty (0 or NULL
 * value).
 ','line_number':18,'multiline':True]['text':'
 * Allocate memory for a variable type-value, and assign a string to it.
 * The string "s" must have been allocated, it is consumed.
 * Return NULL for out of memory, the variable otherwise.
 ','line_number':28,'multiline':True]['text':'
 * Free the memory for a variable type-value.
 ','line_number':49,'multiline':True]['text':' FALLTHROUGH','line_number':62,'multiline':False]['text':'
 * Free the memory for a variable value and set the value to NULL or 0.
 ','line_number':112,'multiline':True]['text':' FALLTHROUGH','line_number':125,'multiline':False]['text':'
 * Set the value of a variable to NULL without freeing items.
 ','line_number':188,'multiline':True]['text':' in Vim9 using a string is an error','line_number':203,'multiline':False]['text':' useful for values that must be unsigned','line_number':283,'multiline':False]['text':'
 * Get the number value of a variable.
 * If it is a String variable, uses vim_str2nr().
 * For incompatible types, return 0.
 * tv_get_number_chk() is similar to tv_get_number(), but informs the
 * caller of incompatible types: it sets *denote to TRUE if "denote"
 * is not NULL or returns -1 otherwise.
 ','line_number':290,'multiline':True]['text':' return 0L on error','line_number':303,'multiline':False]['text':'
 * Like tv_get_number() but in Vim9 script do convert a number in a string to a
 * number without giving an error.
 ','line_number':306,'multiline':True]['text':'
 * Get the boolean value of "varp".  This is like tv_get_number_chk(),
 * but in Vim9 script accepts Number (0 and 1) and Bool/Special.
 ','line_number':324,'multiline':True]['text':'
 * Get the boolean value of "varp".  This is like tv_get_number_chk(),
 * but in Vim9 script accepts Number and Bool.
 ','line_number':334,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is unknown
 ','line_number':415,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string.
 ','line_number':429,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a non-empty string.
 ','line_number':443,'multiline':True]['text':'
 * Check for an optional string argument at 'idx'
 ','line_number':459,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a number.
 ','line_number':469,'multiline':True]['text':'
 * Check for an optional number argument at 'idx'
 ','line_number':483,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a float or a number.
 ','line_number':493,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a bool.
 ','line_number':507,'multiline':True]['text':'
 * Check for an optional bool argument at 'idx'.
 * Return FAIL if the type is wrong.
 ','line_number':524,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a blob.
 ','line_number':536,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a list.
 ','line_number':550,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a non-NULL list.
 ','line_number':564,'multiline':True]['text':'
 * Check for an optional list argument at 'idx'
 ','line_number':581,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a dict.
 ','line_number':591,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a non-NULL dict.
 ','line_number':605,'multiline':True]['text':'
 * Check for an optional dict argument at 'idx'
 ','line_number':622,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a channel or a job.
 ','line_number':633,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is an optional channel or a
 * job.
 ','line_number':647,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a job.
 ','line_number':658,'multiline':True]['text':'
 * Check for an optional job argument at 'idx'.
 ','line_number':672,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is an optional channel or a
 * job.  Used without the +channel feature, thus only VAR_UNKNOWN is accepted.
 ','line_number':682,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or
 * a number.
 ','line_number':693,'multiline':True]['text':'
 * Check for an optional string or number argument at 'idx'.
 ','line_number':708,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a buffer number.
 * Buffer number can be a number or a string.
 ','line_number':718,'multiline':True]['text':'
 * Check for an optional buffer argument at 'idx'
 ','line_number':728,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a line number.
 * Line number can be a number or a string.
 ','line_number':738,'multiline':True]['text':'
 * Check for an optional line number argument at 'idx'
 ','line_number':748,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or a blob.
 ','line_number':759,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or a list.
 ','line_number':774,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string, a list or a
 * blob.
 ','line_number':788,'multiline':True]['text':'
 * Check for an optional string or list argument at 'idx'
 ','line_number':805,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or a dict.
 ','line_number':815,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or a number
 * or a list.
 ','line_number':829,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is an optional string
 * or number or a list
 ','line_number':846,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or a number
 * or a list or a blob.
 ','line_number':858,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string or a list
 * or a dict.
 ','line_number':876,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a string
 * or a function reference.
 ','line_number':893,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a list or a blob.
 ','line_number':910,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a list or dict
 ','line_number':924,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a list or dict or a
 * blob.
 ','line_number':939,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a list or dict or a
 * blob or a string.
 ','line_number':956,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is an optional buffer
 * number or a dict.
 ','line_number':974,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is an object.
 ','line_number':992,'multiline':True]['text':'
 * Returns TRUE if "tv" is a type alias for a class
 ','line_number':1006,'multiline':True]['text':'
 * Give an error and return FAIL unless "args[idx]" is a class
 * or class typealias.
 ','line_number':1016,'multiline':True]['text':'
 * Get the string value of a variable.
 * If it is a Number variable, the number is converted into a string.
 * tv_get_string() uses a single, static buffer.  YOU CAN ONLY USE IT ONCE!
 * tv_get_string_buf() uses a given buffer.
 * If the String variable has never been set, return an empty string.
 * Never returns NULL;
 * tv_get_string_chk() and tv_get_string_buf_chk() are similar, but return
 * NULL on error.
 ','line_number':1034,'multiline':True]['text':'
 * Like tv_get_string() but don't allow number to string conversion for Vim9.
 ','line_number':1052,'multiline':True]['text':'
 * Careful: This uses a single, static buffer.  YOU CAN ONLY USE IT ONCE!
 ','line_number':1073,'multiline':True]['text':'
 * Turn a typeval into a string.  Similar to tv_get_string_buf() but uses
 * string() on Dict, List, etc.
 ','line_number':1176,'multiline':True]['text':'
 * Return TRUE if typeval "tv" and its value are set to be locked (immutable).
 * Also give an error message, using "name" or _("name") when use_gettext is
 * TRUE.
 ','line_number':1201,'multiline':True]['text':'
 * Copy the values from typval_T "from" to typval_T "to".
 * When needed allocates string or increases reference count.
 * Does not make a copy of a list, blob or dict but copies the reference!
 * It is OK for "from" and "to" to point to the same item.  This is used to
 * make a copy later.
 ','line_number':1232,'multiline':True]['text':'
 * Compare "tv1" and "tv2".
 * Put the result in "tv1".  Caller should clear "tv2".
 ','line_number':1346,'multiline':True]['text':' first operand','line_number':1352,'multiline':False]['text':' second operand','line_number':1353,'multiline':False]['text':' operator','line_number':1354,'multiline':False]['text':' ignore case','line_number':1355,'multiline':False]['text':' For "is" a different type always means FALSE, for "isnot"','line_number':1363,'multiline':False]['text':' it means TRUE.','line_number':1364,'multiline':False]['text':' If one of the two variables is a float, compare as a float.','line_number':1438,'multiline':False]['text':' When using "=~" or "!~", always compare as string.','line_number':1439,'multiline':False]['text':' avoid gcc warning','line_number':1467,'multiline':False]['text':' If one of the two variables is a number, compare as a number.','line_number':1471,'multiline':False]['text':' When using "=~" or "!~", always compare as string.','line_number':1472,'multiline':False]['text':' avoid gcc warning','line_number':1498,'multiline':False]['text':'
 * Compare "tv1" to "tv2" as lists according to "type" and "ic".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1565,'multiline':True]['text':'
 * Compare v:null with another type.  Return TRUE if the value is NULL.
 ','line_number':1607,'multiline':True]['text':' TODO: null_class handling','line_number':1624,'multiline':False]['text':' case VAR_CLASS: return tv->vval.v_class == NULL;','line_number':1625,'multiline':False]['text':' although comparing null with number, float or bool is not very useful','line_number':1646,'multiline':False]['text':' we won't give an error','line_number':1647,'multiline':False]['text':'
 * Compare "tv1" to "tv2" as blobs according to "type".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1651,'multiline':True]['text':'
 * Compare "tv1" to "tv2" as classes according to "type".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1691,'multiline':True]['text':' TODO: use "type"','line_number':1704,'multiline':False]['text':'
 * Compare "tv1" to "tv2" as objects according to "type".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1709,'multiline':True]['text':'
 * Compare "tv1" to "tv2" as dictionaries according to "type" and "ic".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1762,'multiline':True]['text':'
 * Compare "tv1" to "tv2" as funcrefs according to "type" and "ic".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1803,'multiline':True]['text':' When both partials are NULL, then they are equal.','line_number':1826,'multiline':False]['text':' Otherwise they are not equal.','line_number':1827,'multiline':False]['text':' strings are considered the same if their value is','line_number':1832,'multiline':False]['text':' the same','line_number':1833,'multiline':False]['text':'
 * Compare "tv1" to "tv2" as strings according to "type" and "ic".
 * Put the result, false or true, in "res".
 * Return FAIL and give an error message when the comparison can't be done.
 ','line_number':1848,'multiline':True]['text':' Really check it is the same string, not just','line_number':1882,'multiline':False]['text':' the same value.','line_number':1883,'multiline':False]['text':' FALLTHROUGH','line_number':1887,'multiline':False]['text':' Really check it is not the same string, not','line_number':1891,'multiline':False]['text':' just a different value.','line_number':1892,'multiline':False]['text':' FALLTHROUGH','line_number':1896,'multiline':False]['text':' avoid gcc warning','line_number':1910,'multiline':False]['text':'
 * Convert any type to a string, never give an error.
 * When "quotes" is TRUE add quotes to a string.
 * Returns an allocated string.
 ','line_number':1915,'multiline':True]['text':' Make a copy if we have a value but it's not in allocated memory.','line_number':1937,'multiline':False]['text':'
 * Return TRUE if typeval "tv" is locked: Either that value is locked itself
 * or it refers to a List or Dictionary that is locked.
 ','line_number':1944,'multiline':True]['text':' ignore case','line_number':1964,'multiline':False]['text':' empty and NULL function name considered the same','line_number':1971,'multiline':False]['text':' empty dict and NULL dict is different','line_number':1988,'multiline':False]['text':' empty list and no list considered the same','line_number':1999,'multiline':False]['text':'
 * Return TRUE if "tv1" and "tv2" have the same value.
 * Compares the items just like "==" would compare them, but strings and
 * numbers are different.  Floats and numbers are also different.
 ','line_number':2012,'multiline':True]['text':' ignore case','line_number':2021,'multiline':False]['text':' TRUE when used recursively','line_number':2022,'multiline':False]['text':' catch recursive loops','line_number':2026,'multiline':False]['text':' Catch lists and dicts that have an endless loop by limiting','line_number':2030,'multiline':False]['text':' recursiveness to a limit.  We guess they are equal then.','line_number':2031,'multiline':False]['text':' A fixed limit has the problem of still taking an awful long time.','line_number':2032,'multiline':False]['text':' Reduce the limit every time running into it. That should work fine for','line_number':2033,'multiline':False]['text':' deeply linked structures that are not recursively linked and catch','line_number':2034,'multiline':False]['text':' recursiveness quickly.','line_number':2035,'multiline':False]['text':' For VAR_FUNC and VAR_PARTIAL compare the function name, bound dict and','line_number':2044,'multiline':False]['text':' arguments.','line_number':2045,'multiline':False]['text':' A class only exists once, equality is identity.','line_number':2103,'multiline':False]['text':' VAR_UNKNOWN can be the result of a invalid expression, let's say it','line_number':2125,'multiline':False]['text':' does not equal anything, not even itself.','line_number':2126,'multiline':False]['text':'
 * Get an option value.
 * "arg" points to the '&' or '+' before the option name.
 * "arg" is advanced to character after the option name.
 * Return OK or FAIL.
 ','line_number':2130,'multiline':True]['text':' when NULL, only check if option exists','line_number':2139,'multiline':False]['text':' has("+option")','line_number':2147,'multiline':False]['text':' Isolate the option name and find its value.','line_number':2151,'multiline':False]['text':' string option','line_number':2204,'multiline':False]['text':' put back for error messages','line_number':2215,'multiline':False]['text':'
 * Allocate a variable for a number constant.  Also deals with "0z" for blob.
 * Return OK or FAIL.
 ','line_number':2221,'multiline':True]['text':' We accept a float when the format matches','line_number':2237,'multiline':False]['text':' "[0-9]\+\.[0-9]\+\([eE][+-]\?[0-9]\+\)\?".  This is very','line_number':2238,'multiline':False]['text':' strict to avoid backwards compatibility problems.','line_number':2239,'multiline':False]['text':' With script version 2 and later the leading digit can be','line_number':2240,'multiline':False]['text':' omitted.','line_number':2241,'multiline':False]['text':' Don't look for a float after the "." operator, so that','line_number':2242,'multiline':False]['text':' ":let vers = 1.2.3" doesn't fail.','line_number':2243,'multiline':False]['text':' init for gcc','line_number':2293,'multiline':False]['text':' Blob constant: 0z0123456789abcdef','line_number':2295,'multiline':False]['text':' decimal, hex or octal number','line_number':2324,'multiline':False]['text':'
 * Evaluate a string constant and put the result in "rettv".
 * "*arg" points to the double quote or to after it when "interpolate" is TRUE.
 * When "interpolate" is TRUE reduce "{{" to "{", reduce "}}" to "}" and stop
 * at a single "{".
 * Return OK or FAIL.
 ','line_number':2344,'multiline':True]['text':' Find the end of the string, skipping backslashed characters.','line_number':2360,'multiline':False]['text':' A "\<x>" form occupies at least 4 characters, and produces up','line_number':2366,'multiline':False]['text':' to 9 characters (6 for the char and 3 for a modifier):','line_number':2367,'multiline':False]['text':' reserve space for 5 extra.','line_number':2368,'multiline':False]['text':' Skip to the '>' to avoid using '{' inside for string','line_number':2376,'multiline':False]['text':' interpolation.','line_number':2377,'multiline':False]['text':' leave "p" on the ">"','line_number':2381,'multiline':False]['text':' start of expression','line_number':2386,'multiline':False]['text':' single '}' is an error','line_number':2389,'multiline':False]['text':' "{{" becomes "{", "}}" becomes "}"','line_number':2394,'multiline':False]['text':' If only parsing, set *arg and return here','line_number':2404,'multiline':False]['text':' Copy the string into allocated memory, handling backslashed','line_number':2411,'multiline':False]['text':' characters.','line_number':2412,'multiline':False]['text':' hex: "\x1", "\x12"','line_number':2433,'multiline':False]['text':' Unicode: "\u0023"','line_number':2435,'multiline':False]['text':' For "\u" store the number according to','line_number':2455,'multiline':False]['text':' 'encoding'.','line_number':2456,'multiline':False]['text':' octal: "\1", "\12", "\123"','line_number':2464,'multiline':False]['text':' Special key, e.g.: "\<C-W>"','line_number':2482,'multiline':False]['text':' FALLTHROUGH','line_number':2498,'multiline':False]['text':' start of expression','line_number':2508,'multiline':False]['text':' reduce "{{" to "{" and "}}" to "}"','line_number':2510,'multiline':False]['text':'
 * Allocate a variable for a 'str''ing' constant.
 * When "interpolate" is TRUE reduce "{{" to "{" and stop at a single "{".
 * Return OK when a "rettv" was set to the string.
 * Return FAIL on error, "rettv" is not set.
 ','line_number':2523,'multiline':True]['text':' Find the end of the string, skipping ''.','line_number':2537,'multiline':False]['text':' If only parsing return after setting "*arg"','line_number':2575,'multiline':False]['text':' Copy the string into allocated memory, handling '' to ' reduction and','line_number':2582,'multiline':False]['text':' any expressions.','line_number':2583,'multiline':False]['text':'
 * Evaluate a single or double quoted string possibly containing expressions.
 * "arg" points to the '$'.  The result is put in "rettv".
 * Returns OK or FAIL.
 ','line_number':2612,'multiline':True]['text':' *arg is on the '$' character, move it to the first string character.','line_number':2628,'multiline':False]['text':' Get the string up to the matching quote or to a single '{'.','line_number':2635,'multiline':False]['text':' "arg" is advanced to either the quote or the '{'.','line_number':2636,'multiline':False]['text':' found terminating quote','line_number':2651,'multiline':False]['text':'
 * Return a string with the string representation of a variable.
 * If the memory is allocated "tofree" is set to it, otherwise NULL.
 * "numbuf" is used for a number.
 * Puts quotes around strings, so that they can be parsed back by eval().
 * May return NULL.
 ','line_number':2676,'multiline':True]['text':'
 * Get the value of an environment variable.
 * "arg" is pointing to the '$'.  It is advanced to after the name.
 * If the environment variable was not set, silently assume it is empty.
 * Return FAIL if the name is invalid.
 ','line_number':2693,'multiline':True]['text':' invalid empty name','line_number':2714,'multiline':False]['text':' first try vim_getenv(), fast for normal environment vars','line_number':2718,'multiline':False]['text':' next try expanding things like $VIM and ${HOME}','line_number':2730,'multiline':False]['text':'
 * Get the lnum from the first argument.
 * Also accepts ".", "$", etc., but that only works for the current buffer.
 * Returns -1 on error.
 ','line_number':2745,'multiline':True]['text':' no valid number, try using arg like line()','line_number':2764,'multiline':False]['text':'
 * Get the lnum from the first argument.
 * Also accepts "$", then "buf" is used.
 * Returns 0 on error.
 ','line_number':2772,'multiline':True]['text':'
 * Get buffer by number or pattern.
 ','line_number':2789,'multiline':True]['text':' If not found, try expanding the name, like done for bufexists().','line_number':2809,'multiline':False]['text':'
 * Like tv_get_buf() but give an error message is the type is wrong.
 ','line_number':2816,'multiline':True]['text':' issue errmsg for type error','line_number':2830,'multiline':False]['text':' FEAT_EVAL','line_number':2835,'multiline':False]