['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 *
 * Blowfish encryption for Vim; in Blowfish cipher feedback mode.
 * Contributed by Mohsin Ahmed, http://www.cs.albany.edu/~mosh
 * Based on http://www.schneier.com/blowfish.html by Bruce Schneier.
 *
 * There are two variants:
 * - The old one "blowfish" has a flaw which makes it much easier to crack the
 *   key.  To see this, make a text file with one line of 1000 "x" characters
 *   and write it encrypted.  Use "xxd" to inspect the bytes in the file.  You
 *   will see that a block of 8 bytes repeats 8 times.
 * - The new one "blowfish2" is better.  It uses an 8 byte CFB to avoid the
 *   repeats.
 ','line_number':1,'multiline':True]['text':' MS-Windows is always little endian','line_number':36,'multiline':False]['text':' in configure.ac AC_C_BIGENDIAN() defines WORDS_BIGENDIAN when needed','line_number':39,'multiline':False]['text':' The state of encryption, referenced by cryptstate_T.','line_number':45,'multiline':False]['text':' P-array','line_number':47,'multiline':False]['text':' S-boxes','line_number':48,'multiline':False]['text':' up to 64 bytes used','line_number':51,'multiline':False]['text':' size of cfb_buffer actually used','line_number':52,'multiline':False]['text':' Blowfish code','line_number':56,'multiline':False]['text':'
 * Initialize the crypt method using "password" as the encryption key and
 * "salt[salt_len]" as the salt.
 ','line_number':392,'multiline':True]['text':' Process the key 1001 times.','line_number':409,'multiline':False]['text':' See http://en.wikipedia.org/wiki/Key_strengthening.','line_number':410,'multiline':False]['text':' Convert the key from 64 hex chars to 32 binary chars.','line_number':415,'multiline':False]['text':' Use "key" to initialize the P-array ("pax") and S-boxes ("sbx") of','line_number':428,'multiline':False]['text':' Blowfish.','line_number':429,'multiline':False]['text':'
 * Blowfish self-test for corrupted tables or instructions.
 ','line_number':459,'multiline':True]['text':' cryptxt when big/little endian is wrong','line_number':484,'multiline':False]['text':'
 * Assert bf(password, plaintxt) is cryptxt.
 * Assert csum(pax sbx(password)) is keysum.
 ','line_number':488,'multiline':True]['text':' cryptxt','line_number':497,'multiline':False]['text':' badcryptxt','line_number':498,'multiline':False]['text':' keysum','line_number':499,'multiline':False]['text':'
 * Return FAIL when there is something wrong with blowfish encryption.
 ','line_number':503,'multiline':True]['text':' We can't simply use sizeof(UINT32_T), it would generate a compiler','line_number':518,'multiline':False]['text':' warning.','line_number':519,'multiline':False]['text':' Don't modify bf_test_data[i].plaintxt, self test is idempotent.','line_number':538,'multiline':False]['text':'
 * CFB: Cipher Feedback Mode.
 ','line_number':552,'multiline':True]['text':'
 * Initialize with seed "seed[seed_len]".
 ','line_number':556,'multiline':True]['text':'
 * Encrypt "from[len]" into "to[len]".
 * "from" and "to" can be equal to encrypt in place.
 ','line_number':593,'multiline':True]['text':'
 * Decrypt "from[len]" into "to[len]".
 ','line_number':618,'multiline':True]['text':' "blowfish" uses a 64 byte buffer, causing it to repeat 8 byte groups 8','line_number':653,'multiline':False]['text':' times.  "blowfish2" uses an 8 byte buffer to avoid repeating.','line_number':654,'multiline':False]['text':'
 * Run a test to check if the encryption works as expected.
 * Give an error and return FAIL when not.
 ','line_number':666,'multiline':True]['text':' FEAT_CRYPT','line_number':685,'multiline':False]