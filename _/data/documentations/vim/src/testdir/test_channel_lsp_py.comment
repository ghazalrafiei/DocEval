['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Server that will accept connections from a Vim channel.','line_number':3,'multiline':False]['text':' Used by test_channel.vim to test LSP functionality.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' This requires Python 2.6 or later.','line_number':6,'multiline':False]['text':' Python 3','line_number':16,'multiline':False]['text':' Python 2','line_number':19,'multiline':False]['text':' test for sending extra fields in the http header','line_number':81,'multiline':False]['text':' test for sending the hdr first and then after some delay, send the','line_number':94,'multiline':False]['text':' payload','line_number':95,'multiline':False]['text':' test for sending the http header without length','line_number':106,'multiline':False]['text':' test for sending the http header with wrong length','line_number':115,'multiline':False]['text':' test for sending the http header with negative length','line_number':124,'multiline':False]['text':' test for a simple RPC request','line_number':140,'multiline':False]['text':' test for sending a notification before replying to a request message','line_number':144,'multiline':False]['text':' sleep for some time to make sure the notification is delivered','line_number':146,'multiline':False]['text':' test for sending a non dict payload','line_number':151,'multiline':False]['text':' test for sending a large (> 64K) payload','line_number':157,'multiline':False]['text':' notification message test','line_number':168,'multiline':False]['text':' send multiple notifications','line_number':172,'multiline':False]['text':' Send a notification message to the client in the middle of processing','line_number':207,'multiline':False]['text':' a request message from the client','line_number':208,'multiline':False]['text':' Send a request message to the client in the middle of processing a','line_number':210,'multiline':False]['text':' request message from the client.','line_number':211,'multiline':False]['text':' After receiving a response from the client send the response to the','line_number':215,'multiline':False]['text':' client request.','line_number':216,'multiline':False]['text':' partial message received','line_number':260,'multiline':False]['text':' partial message received','line_number':265,'multiline':False]['text':' partial message received','line_number':271,'multiline':False]['text':' partial message received','line_number':277,'multiline':False]['text':' Remove the header','line_number':283,'multiline':False]['text':' Remove the processed message','line_number':289,'multiline':False]['text':' Write the received lines into the file for debugging','line_number':309,'multiline':False]['text':' Can receive more than one line in a response or a partial line.','line_number':313,'multiline':False]['text':' Accumulate all the received characters and process one line at','line_number':314,'multiline':False]['text':' a time.','line_number':315,'multiline':False]['text':' Write the port number in Xportnr, so that the test knows it.','line_number':323,'multiline':False]['text':' Wait half a second before opening the port to test waittime in ch_open().','line_number':329,'multiline':False]['text':' We do want to get the port number, get that first.  We cannot open the','line_number':330,'multiline':False]['text':' socket, guess a port is free.','line_number':331,'multiline':False]['text':' Each addr is a (family, type, proto, canonname, sockaddr) tuple','line_number':338,'multiline':False]['text':' Start a thread with the server.  That thread will then start a new thread','line_number':345,'multiline':False]['text':' for each connection.','line_number':346,'multiline':False]['text':' Main thread terminates, but the server continues running','line_number':352,'multiline':False]['text':' until server.shutdown() is called.','line_number':353,'multiline':False]