['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 * X command server by Flemming Madsen
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 *
 * if_xcmdsrv.c: Functions for passing commands through an X11 display.
 *
 ','line_number':1,'multiline':True]['text':'
 * This file provides procedures that implement the command server
 * functionality of Vim when in contact with an X11 server.
 *
 * Adapted from TCL/TK's send command  in tkSend.c of the tk 3.6 distribution.
 * Adapted for use in Vim by Flemming Madsen. Protocol changed to that of tk 4
 ','line_number':24,'multiline':True]['text':'
 * Copyright (c) 1989-1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Permission is hereby granted, without written agreement and without
 * license or royalty fees, to use, copy, modify, and distribute this
 * software and its documentation for any purpose, provided that the
 * above copyright notice and the following two paragraphs appear in
 * all copies of this software.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
 * OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
 * CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 ','line_number':32,'multiline':True]['text':'
 * When a result is being awaited from a sent command, one of
 * the following structures is present on a list of all outstanding
 * sent commands.  The information in the structure is used to
 * process the result when it arrives.  You're probably wondering
 * how there could ever be multiple outstanding sent commands.
 * This could happen if Vim instances invoke each other recursively.
 * It's unlikely, but possible.
 ','line_number':55,'multiline':True]['text':' Serial number expected in result.','line_number':67,'multiline':False]['text':' Result Code. 0 is OK','line_number':68,'multiline':False]['text':' String result for command (malloc'ed).','line_number':69,'multiline':False]['text':' NULL means command still pending.','line_number':70,'multiline':False]['text':' Next in list of all outstanding commands.','line_number':72,'multiline':False]['text':' NULL means end of list.','line_number':73,'multiline':False]['text':' List of all commands currently','line_number':77,'multiline':False]['text':' being waited for.','line_number':78,'multiline':False]['text':'
 * The information below is used for communication between processes
 * during "send" commands.  Each process keeps a private window, never
 * even mapped, with one property, "Comm".  When a command is sent to
 * an interpreter, the command is appended to the comm property of the
 * communication window associated with the interp's process.  Similarly,
 * when a result is returned from a sent command, it is also appended
 * to the comm property.
 *
 * Each command and each result takes the form of ASCII text.  For a
 * command, the text consists of a nul character followed by several
 * nul-terminated ASCII strings.  The first string consists of a
 * single letter:
 * "c" for an expression
 * "k" for keystrokes
 * "r" for reply
 * "n" for notification.
 * Subsequent strings have the form "option value" where the following options
 * are supported:
 *
 * -r commWindow serial
 *
 *	This option means that a response should be sent to the window
 *	whose X identifier is "commWindow" (in hex), and the response should
 *	be identified with the serial number given by "serial" (in decimal).
 *	If this option isn't specified then the send is asynchronous and
 *	no response is sent.
 *
 * -n name
 *	"Name" gives the name of the application for which the command is
 *	intended.  This option must be present.
 *
 * -E encoding
 *	Encoding name used for the text.  This is the 'encoding' of the
 *	sender.  The receiver may want to do conversion to his 'encoding'.
 *
 * -s script
 *	"Script" is the script to be executed.  This option must be
 *	present.  Taken as a series of keystrokes in a "k" command where
 *	<Key>'s are expanded
 *
 * The options may appear in any order.  The -n and -s options must be
 * present, but -r may be omitted for asynchronous RPCs.  For compatibility
 * with future releases that may add new features, there may be additional
 * options present;  as long as they start with a "-" character, they will
 * be ignored.
 *
 * A result also consists of a zero character followed by several null-
 * terminated ASCII strings.  The first string consists of the single
 * letter "r".  Subsequent strings have the form "option value" where
 * the following options are supported:
 *
 * -s serial
 *	Identifies the command for which this is the result.  It is the
 *	same as the "serial" field from the -s option in the command.  This
 *	option must be present.
 *
 * -r result
 *	"Result" is the result string for the script, which may be either
 *	a result or an error message.  If this field is omitted then it
 *	defaults to an empty string.
 *
 * -c code
 *	0: for OK. This is the default.
 *	1: for error: Result is the last error
 *
 * -i errorInfo
 * -e errorCode
 *	Not applicable for Vim
 *
 * Options may appear in any order, and only the -s option must be
 * present.  As with commands, there may be additional options besides
 * these;  unknown options are ignored.
 ','line_number':80,'multiline':True]['text':'
 * Maximum size property that can be read at one time by
 * this module:
 ','line_number':155,'multiline':True]['text':' dummy node, header for circular queue','line_number':182,'multiline':False]['text':'
 * Forward declarations for procedures defined later in this file:
 ','line_number':185,'multiline':True]['text':' Private variables for the "server" functionality','line_number':203,'multiline':False]['text':' empty GetRegProp() result','line_number':208,'multiline':False]['text':'
 * Associate an ASCII name with Vim.  Try real hard to get a unique one.
 * Returns FAIL or OK.
 ','line_number':210,'multiline':True]['text':' display to register with','line_number':216,'multiline':False]['text':' the name that will be used as a base','line_number':217,'multiline':False]['text':'
     * Make sure the name is unique, and append info about it to
     * the registry property.  It's important to lock the server
     * here to prevent conflicting changes to the registry property.
     * WARNING: Do not step through this while debugging, it will hangup the X
     * server!
     ','line_number':267,'multiline':True]['text':'
	 * The name is currently registered.  See if the commWindow
	 * associated with the name exists.  If not, or if the commWindow
	 * is *our* commWindow, then just unregister the old name (this
	 * could happen if an application dies without cleaning up the
	 * registry).
	 ','line_number':283,'multiline':True]['text':'delete=','line_number':300,'multiline':True]['text':'
 * Clean out new ID from registry and set it as comm win.
 * Change any registered window ID.
 ','line_number':325,'multiline':True]['text':' Display to register with','line_number':331,'multiline':False]['text':' Re-register to this ID','line_number':332,'multiline':False]['text':' Always call SendInit() here, to make sure commWindow is marked as a Vim','line_number':338,'multiline':False]['text':' window.','line_number':339,'multiline':False]['text':' WARNING: Do not step through this while debugging, it will hangup the X','line_number':343,'multiline':False]['text':' server!','line_number':344,'multiline':False]['text':' Reinsert name if it was already registered','line_number':349,'multiline':False]['text':'delete=','line_number':350,'multiline':True]['text':'
 * Send to an instance of Vim via the X display.
 * Returns 0 for OK, negative for an error.
 ','line_number':361,'multiline':True]['text':' Where to send.','line_number':367,'multiline':False]['text':' Where to send.','line_number':368,'multiline':False]['text':' What to send.','line_number':369,'multiline':False]['text':' Result of eval'ed expression','line_number':370,'multiline':False]['text':' Actual ID of receiving app','line_number':371,'multiline':False]['text':' Interpret as keystrokes or expr ?','line_number':372,'multiline':False]['text':' seconds to wait or zero','line_number':373,'multiline':False]['text':' Throw away everything but result','line_number':374,'multiline':False]['text':' don't complain about no server','line_number':375,'multiline':False]['text':' Running count of sent commands.','line_number':381,'multiline':False]['text':' Used to give each command a','line_number':382,'multiline':False]['text':' different serial number.','line_number':383,'multiline':False]['text':' use a default name','line_number':390,'multiline':False]['text':' Execute locally if no display or target is ourselves','line_number':399,'multiline':False]['text':'
     * Bind the server name to a communication window.
     *
     * Find any survivor with a serialno attached to the name if the
     * original registrant of the wanted name is no longer present.
     *
     * Delete any lingering names from dead editors.
     ','line_number':403,'multiline':True]['text':' Check that the window is hot','line_number':414,'multiline':False]['text':'DELETE=','line_number':420,'multiline':True]['text':'
     * Send the command to target interpreter by appending it to the
     * comm window in the communication window.
     * Length must be computed exactly!
     ','line_number':438,'multiline':True]['text':' Add a back reference to our comm window','line_number':450,'multiline':False]['text':' Add length of what "-r %x %d" resulted in, skipping the NUL.','line_number':454,'multiline':False]['text':' There is no answer for this - Keys are sent async','line_number':465,'multiline':False]['text':'
     * Register the fact that we're waiting for a command to
     * complete (this is needed by SendEventProc and by
     * AppendErrorProc to pass back the command's results).
     ','line_number':468,'multiline':True]['text':'
     * Unregister the information about the pending command
     * and return the result.
     ','line_number':482,'multiline':True]['text':'
 * Return TRUE if window "w" exists and has a "Vim" property on it.
 ','line_number':519,'multiline':True]['text':'
 * Enter a loop processing X events & polling chars until we see a result
 ','line_number':548,'multiline':True]['text':' Just look out for the answer without calling back into Vim','line_number':597,'multiline':False]['text':' Set the time every call, select() may change it to the remaining','line_number':603,'multiline':False]['text':' time.','line_number':604,'multiline':False]['text':'
 * Fetch a list of all the Vim instance names currently registered for the
 * display.
 *
 * Returns a newline separated list in allocated memory or NULL.
 ','line_number':625,'multiline':True]['text':'
     * Read the registry property.
     ','line_number':647,'multiline':True]['text':'
     * Scan all of the names out of the property.
     ','line_number':653,'multiline':True]['text':'///////////////////////////////////////////////////////////','line_number':681,'multiline':False]['text':' Reply stuff','line_number':682,'multiline':False]['text':'
 * Convert string to windowid.
 * Issue an error if the id is invalid.
 ','line_number':722,'multiline':True]['text':'
 * Send a reply string (notification) to client with id "name".
 * Return -1 if the window is invalid.
 ','line_number':738,'multiline':True]['text':' Add length of what "%x" resulted in.','line_number':765,'multiline':False]['text':'
 * Wait for replies from id (win)
 * When "timeout" is non-zero wait up to this many seconds.
 * Return 0 and the allocated string in "*str" when a reply is available.
 * Return -1 if the window becomes invalid while waiting.
 ','line_number':781,'multiline':True]['text':' Last string read.  Remove from list','line_number':814,'multiline':False]['text':'
 * Check for replies from id (win).
 * Return TRUE and a non-malloc'ed string if there is.  Else return FALSE.
 ','line_number':823,'multiline':True]['text':'
 * Initialize the communication channels for sending commands and receiving
 * results.
 ','line_number':844,'multiline':True]['text':'
     * Create the window used for communication, and set up an
     * event handler for it.
     ','line_number':853,'multiline':True]['text':' WARNING: Do not step through this while debugging, it will hangup','line_number':874,'multiline':False]['text':' the X server!','line_number':875,'multiline':False]['text':' Make window recognizable as a vim window','line_number':881,'multiline':False]['text':'
 * Given a server name, see if the name exists in the registry for a
 * particular display.
 *
 * If the given name is registered, return the ID of the window associated
 * with the name.  If the name isn't registered, then return 0.
 *
 * Side effects:
 *	If the registry property is improperly formed, then it is deleted.
 *	If "delete" is non-zero, then if the named server is found it is
 *	removed from the registry property.
 ','line_number':892,'multiline':True]['text':' Display whose registry to check.','line_number':906,'multiline':False]['text':' Name of a server.','line_number':907,'multiline':False]['text':' If non-zero, delete info about name.','line_number':908,'multiline':False]['text':' Do another search matching -999 if not found','line_number':909,'multiline':False]['text':' Return result here if a match is found','line_number':910,'multiline':False]['text':'
     * Read the registry property.
     ','line_number':917,'multiline':True]['text':'
     * Scan the property for the desired name.
     ','line_number':923,'multiline':True]['text':' Not needed, but eliminates compiler warning.','line_number':927,'multiline':False]['text':'
     * Delete the property, if that is desired (copy down the
     * remainder of the registry property to overlay the deleted
     * info, then rewrite the property).
     ','line_number':963,'multiline':True]['text':'
 * Delete any lingering occurrence of window id.  We promise that any
 * occurrence is not ours since it is not yet put into the registry (by us)
 *
 * This is necessary in the following scenario:
 * 1. There is an old windowid for an exit'ed vim in the registry
 * 2. We get that id for our commWindow but only want to send, not register.
 * 3. The window will mistakenly be regarded valid because of own commWindow
 ','line_number':989,'multiline':True]['text':' Display whose registry to check.','line_number':1000,'multiline':False]['text':' Window to remove','line_number':1001,'multiline':False]['text':'
     * Read the registry property.
     ','line_number':1008,'multiline':True]['text':' Scan the property for the window id.','line_number':1014,'multiline':False]['text':' Copy down the remainder to delete entry','line_number':1024,'multiline':False]['text':'
 * Read the registry property.  Delete it when it's formatted wrong.
 * Return the property in "regPropp".  "empty_prop" is used when it doesn't
 * exist yet.
 * Return OK when successful.
 ','line_number':1054,'multiline':True]['text':' When TRUE give error message.','line_number':1065,'multiline':False]['text':' No prop yet. Logically equal to the empty list','line_number':1089,'multiline':False]['text':' If the property is improperly formed, then delete it.','line_number':1095,'multiline':False]['text':'
 * This procedure is invoked by the various X event loops throughout Vims when
 * a property changes on the communication window.  This procedure reads the
 * property and enqueues command requests and responses. If immediate is true,
 * it runs the event immediately instead of enqueuing it. Immediate can cause
 * unintended behavior and should only be used for code that blocks for a
 * response.
 ','line_number':1109,'multiline':True]['text':' Information about event.','line_number':1120,'multiline':False]['text':' Run event immediately. Should mostly be 0.','line_number':1121,'multiline':False]['text':'
     * Read the comm property and delete it.
     ','line_number':1135,'multiline':True]['text':' If the property doesn't exist or is improperly formed then ignore it.','line_number':1145,'multiline':False]['text':'
 * Saves x clientserver commands in a queue so that they can be called when
 * vim is idle.
 ','line_number':1158,'multiline':True]['text':' out of memory','line_number':1169,'multiline':False]['text':' initialize circular queue','line_number':1173,'multiline':False]['text':' insert node at tail of queue','line_number':1179,'multiline':False]['text':'
 * Parses queued clientserver messages.
 ','line_number':1186,'multiline':True]['text':' cannot happen?','line_number':1195,'multiline':False]['text':'
 * Returns a non-zero value if there are clientserver messages waiting
 * int the queue.
 ','line_number':1206,'multiline':True]['text':'
 * Prases a single clientserver message. A single message may contain multiple
 * commands.
 * "propInfo" will be freed.
 ','line_number':1216,'multiline':True]['text':' A string containing 0 or more X commands','line_number':1224,'multiline':False]['text':' The size of propInfo in bytes.','line_number':1225,'multiline':False]['text':'
     * Several commands and results could arrive in the property at
     * one time;  each iteration through the outer loop handles a
     * single command or result.
     ','line_number':1235,'multiline':True]['text':'
	 * Ignore leading NULs; each command or result starts with a
	 * NUL so that no matter how badly formed a preceding command
	 * is, we'll be able to tell that a new command/result is
	 * starting.
	 ','line_number':1242,'multiline':True]['text':'
	     * This is an incoming command from some other application.
	     * Iterate over all of its options.  Stop when we reach
	     * the end of the property or something that doesn't look
	     * like an option.
	     ','line_number':1261,'multiline':True]['text':' Remember in global','line_number':1293,'multiline':False]['text':' Initialize the result property.','line_number':1331,'multiline':False]['text':' Evaluate the expression and return the result.','line_number':1338,'multiline':False]['text':'
	     * This is a reply to some command that we sent out.  Iterate
	     * over all of its options.  Stop when we reach the end of the
	     * property or something that doesn't look like an option.
	     ','line_number':1365,'multiline':True]['text':'
	     * Give the result information to anyone who's
	     * waiting for it.
	     ','line_number':1404,'multiline':True]['text':'
	     * This is a (n)otification.  Sent with serverreply_send in Vim
	     * script.  Execute any autocommand and save it for later retrieval
	     ','line_number':1430,'multiline':True]['text':'
	     * Didn't recognize this thing.  Just skip through the next
	     * null character and try again.
	     * Even if we get an 'r'(eply) we will throw it away as we
	     * never specify (and thus expect) one
	     ','line_number':1481,'multiline':True]['text':'
 * Append a given property to a given window, but set up an X error handler so
 * that if the append fails this procedure can return an error code rather
 * than having Xlib panic.
 * Return: 0 for OK, -1 for error
 ','line_number':1495,'multiline':True]['text':' Display on which to operate.','line_number':1503,'multiline':False]['text':' Window whose property is to be modified.','line_number':1504,'multiline':False]['text':' Name of property.','line_number':1505,'multiline':False]['text':' Characters  to append to property.','line_number':1506,'multiline':False]['text':' How much to append','line_number':1507,'multiline':False]['text':'
 * Another X Error handler, just used to check for errors.
 ','line_number':1521,'multiline':True]['text':'
 * Check if "str" looks like it had a serial number appended.
 * Actually just checks if the name ends in a digit.
 ','line_number':1531,'multiline':True]['text':' FEAT_CLIENTSERVER','line_number':1542,'multiline':False]