['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar et al.
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * normal.c:	Contains the main routine for processing characters in command
 *		mode.  Communicates closely with the code in ops.c to handle
 *		the operators.
 ','line_number':9,'multiline':True]['text':' saved Visual mode','line_number':17,'multiline':False]['text':'
 * nv_*(): functions called to handle Normal and Visual mode commands.
 * n_*(): functions called to handle Normal mode commands.
 * v_*(): functions called to handle Visual mode commands.
 ','line_number':25,'multiline':True]['text':' Declare nv_cmds[].','line_number':126,'multiline':False]['text':' Include the lookuptable generated by create_nvcmdidx.vim.','line_number':130,'multiline':False]['text':'
 * Search for a command in the commands table.
 * Returns -1 for invalid command.
 ','line_number':133,'multiline':True]['text':' A multi-byte character is never a command.','line_number':145,'multiline':False]['text':' We use the absolute value of the character.  Special keys have a','line_number':149,'multiline':False]['text':' negative value, but are sorted on their absolute value.','line_number':150,'multiline':False]['text':' If the character is in the first part: The character is the index into','line_number':154,'multiline':False]['text':' nv_cmd_idx[].','line_number':155,'multiline':False]['text':' Perform a binary search.','line_number':159,'multiline':False]['text':'
 * If currently editing a cmdline or text is locked: beep and give an error
 * message, return TRUE.
 ','line_number':182,'multiline':True]['text':'
 * If text is locked, "curbuf_lock" or "allbuf_lock" is set:
 * Give an error message, possibly beep and return TRUE.
 * "oap" may be NULL.
 ','line_number':198,'multiline':True]['text':'
 * Handle the count before a normal command and set cap->count0.
 ','line_number':217,'multiline':True]['text':' Handle a count before a command and compute ca.count0.','line_number':232,'multiline':False]['text':' Note that '0' is a command and not the start of a count, but it's','line_number':233,'multiline':False]['text':' part of a count after other digits.','line_number':234,'multiline':False]['text':' delete the digit and ~@%','line_number':242,'multiline':False]['text':' Set v:count here, when called from main() and not a stuffed','line_number':253,'multiline':False]['text':' command, so that v:count can be used in an expression mapping','line_number':254,'multiline':False]['text':' right after the count. Do set it for redo.','line_number':255,'multiline':False]['text':' no mapping for nchar, but keys','line_number':262,'multiline':False]['text':' don't map zero here','line_number':264,'multiline':False]['text':' If we got CTRL-W there may be a/another count','line_number':276,'multiline':False]['text':' remember first count','line_number':280,'multiline':False]['text':' no mapping for nchar, but keys','line_number':283,'multiline':False]['text':' get next character','line_number':284,'multiline':False]['text':' jump back','line_number':289,'multiline':False]['text':' Save the count values so that ca.opcount and ca.count0 are exactly','line_number':295,'multiline':False]['text':' the same when coming back here after handling K_CURSORHOLD.','line_number':296,'multiline':False]['text':' If we're in the middle of an operator (including after entering a','line_number':302,'multiline':False]['text':' yank buffer with '"') AND we had a count before the operator, then','line_number':303,'multiline':False]['text':' that count overrides the current value of ca.count0.','line_number':304,'multiline':False]['text':' What this means effectively, is that commands like "3dw" get turned','line_number':305,'multiline':False]['text':' into "d3w" which makes things fall into place pretty neatly.','line_number':306,'multiline':False]['text':' If you give a count before AND after the operator, they are','line_number':307,'multiline':False]['text':' multiplied.','line_number':308,'multiline':False]['text':' Always remember the count.  It will be set to zero (on the next call,','line_number':320,'multiline':False]['text':' above) when there is no pending operator.','line_number':321,'multiline':False]['text':' When called from main(), save the count for use by the "count" built-in','line_number':322,'multiline':False]['text':' variable.','line_number':323,'multiline':False]['text':' Only set v:count when called from main() and not a stuffed command.','line_number':328,'multiline':False]['text':' Do set it for redo.','line_number':329,'multiline':False]['text':'
 * Returns TRUE if the normal command (cap) needs a second character.
 ','line_number':337,'multiline':True]['text':'
 * Get one or more additional characters for a normal command.
 * Return the updated command index (if changed).
 ','line_number':355,'multiline':True]['text':' get character for replace mode','line_number':368,'multiline':False]['text':' get extra character literally','line_number':369,'multiline':False]['text':' using :lmap mappings','line_number':370,'multiline':False]['text':' getting a text character','line_number':371,'multiline':False]['text':' saved value of p_smd','line_number':373,'multiline':False]['text':' no mapping for nchar, but allow key codes','line_number':377,'multiline':False]['text':' Don't generate a CursorHold event here, most commands can't handle','line_number':378,'multiline':False]['text':' it, e.g., nv_replace(), nv_csearch().','line_number':379,'multiline':False]['text':'
	 * For 'g' get the next character now, so that we can check for
	 * "gr", "g'" and "g`".
	 ','line_number':383,'multiline':True]['text':' need to get a third character','line_number':393,'multiline':False]['text':' get it literally','line_number':395,'multiline':False]['text':' get it in replace mode','line_number':397,'multiline':False]['text':' no third character needed','line_number':400,'multiline':False]['text':' get it in replace mode','line_number':404,'multiline':False]['text':'
     * Get a second or third character.
     ','line_number':410,'multiline':True]['text':' pretend Replace mode','line_number':417,'multiline':False]['text':' show different cursor shape','line_number':419,'multiline':False]['text':' Allow mappings defined with ":lmap".','line_number':424,'multiline':False]['text':' Don't let the IM code show the mode here','line_number':435,'multiline':False]['text':' Disable bracketed paste and modifyOtherKeys here, we won't','line_number':443,'multiline':False]['text':' recognize the escape sequences with 'esckeys' off.','line_number':444,'multiline':False]['text':' Re-enable bracketed paste mode and modifyOtherKeys','line_number':455,'multiline':False]['text':' Undo the decrement done above','line_number':462,'multiline':False]['text':' Typing CTRL-K gets a digraph.','line_number':482,'multiline':False]['text':' Guessing how to update showcmd here...','line_number':492,'multiline':False]['text':' adjust chars > 127, except after "tTfFr" commands','line_number':499,'multiline':False]['text':' adjust Hebrew mapped char','line_number':502,'multiline':False]['text':' When the next character is CTRL-\ a following CTRL-N means the','line_number':508,'multiline':False]['text':' command is aborted and we go to Normal mode.','line_number':509,'multiline':False]['text':' There is a busy wait here when typing "f<C-\>" and then','line_number':525,'multiline':False]['text':' something different from CTRL-N.  Can't be avoided.','line_number':526,'multiline':False]['text':' When getting a text character and the next character is a','line_number':548,'multiline':False]['text':' multi-byte character, it could be a composing character.','line_number':549,'multiline':False]['text':' However, don't wait for it to arrive. Also, do enable mapping,','line_number':550,'multiline':False]['text':' because if it's put back with vungetc() it's too late to apply','line_number':551,'multiline':False]['text':' mapping.','line_number':552,'multiline':False]['text':' it wasn't, put it back','line_number':560,'multiline':False]['text':' Vim may be in a different mode when the user types the next key,','line_number':569,'multiline':False]['text':' but when replaying a recording the next key is already in the','line_number':570,'multiline':False]['text':' typeahead buffer, so record a <Nop> before that to prevent the','line_number':571,'multiline':False]['text':' vpeekc() above from applying wrong mappings when replaying.','line_number':572,'multiline':False]['text':'
 * Returns TRUE if after processing a normal mode command, need to wait for a
 * moment when a message is displayed that will be overwritten by the mode
 * message.
 ','line_number':584,'multiline':True]['text':' In Visual mode and with "^O" in Insert mode, a short message will be','line_number':592,'multiline':False]['text':' overwritten by the mode message.  Wait a bit, until a key is hit.','line_number':593,'multiline':False]['text':' In Visual mode, it's more important to keep the Visual area updated','line_number':594,'multiline':False]['text':' than keeping a message (e.g. from a /pat search).','line_number':595,'multiline':False]['text':' Only do this if the command was typed, not from a mapping.','line_number':596,'multiline':False]['text':' Don't wait when emsg_silent is non-zero.','line_number':597,'multiline':False]['text':' Also wait a bit after an error message, e.g. for "^O:".','line_number':598,'multiline':False]['text':' Don't redraw the screen, it would remove the message.','line_number':599,'multiline':False]['text':'
 * After processing a normal mode command, wait for a moment when a message is
 * displayed that will be overwritten by the mode message.
 ','line_number':626,'multiline':True]['text':' Draw the cursor with the right shape here','line_number':635,'multiline':False]['text':' If need to redraw, and there is a "keep_msg", redraw before the','line_number':639,'multiline':False]['text':' delay','line_number':640,'multiline':False]['text':' Showmode() will clear keep_msg, but we want to use it anyway.','line_number':647,'multiline':False]['text':' First update w_topline.','line_number':648,'multiline':False]['text':' now reset it, otherwise it's put in the history again','line_number':651,'multiline':False]['text':' may show different cursor shape','line_number':663,'multiline':False]['text':' wait at least one second','line_number':668,'multiline':False]['text':' wait up to three seconds','line_number':669,'multiline':False]['text':'
 * Execute a command in Normal mode.
 ','line_number':676,'multiline':True]['text':' TRUE when called from main()','line_number':682,'multiline':False]['text':' command arguments','line_number':684,'multiline':False]['text':' got CTRL-W command','line_number':686,'multiline':False]['text':' need to call out_flush()','line_number':688,'multiline':False]['text':' cursor position before command','line_number':689,'multiline':False]['text':' also resets ca.retval','line_number':696,'multiline':False]['text':' Use a count remembered from before entering an operator.  After typing','line_number':699,'multiline':False]['text':' "3d" we return from normal_cmd() and come back here, the "3" is','line_number':700,'multiline':False]['text':' remembered in "opcount".','line_number':701,'multiline':False]['text':' If there is an operator pending, then the command we take this time','line_number':704,'multiline':False]['text':' will terminate it. Finish_op tells us to finish the operation before','line_number':705,'multiline':False]['text':' returning this time (unless the operation was cancelled).','line_number':706,'multiline':False]['text':' may show different cursor shape','line_number':714,'multiline':False]['text':' When not finishing an operator and no register name typed, reset the','line_number':722,'multiline':False]['text':' count.','line_number':723,'multiline':False]['text':' Restore counts from before receiving K_CURSORHOLD.  This means after','line_number':732,'multiline':False]['text':' typing "3", handling K_CURSORHOLD and then typing "2" we get "32", not','line_number':733,'multiline':False]['text':' "3 * 2".','line_number':734,'multiline':False]['text':' allow scrolling here','line_number':747,'multiline':False]['text':' Set v:count here, when called from main() and not a stuffed','line_number':751,'multiline':False]['text':' command, so that v:count can be used in an expression mapping','line_number':752,'multiline':False]['text':' when there is no count. Do set it for redo.','line_number':753,'multiline':False]['text':'
     * Get the command character from the user.
     ','line_number':758,'multiline':True]['text':' If a mapping was started in Visual or Select mode, remember the length','line_number':764,'multiline':False]['text':' of the mapping.  This is used below to not return to Insert mode for as','line_number':765,'multiline':False]['text':' long as the mapping is being executed.','line_number':766,'multiline':False]['text':' In Select mode, typed text replaces the selection.','line_number':776,'multiline':False]['text':' Fake a "c"hange command.  When "restart_edit" is set (e.g., because','line_number':783,'multiline':False]['text':' 'insertmode' is set) fake a "d"elete command, Insert mode will','line_number':784,'multiline':False]['text':' restart automatically.','line_number':785,'multiline':False]['text':' Insert the typed character in the typeahead buffer, so that it can','line_number':786,'multiline':False]['text':' be mapped in Insert mode.  Required for ":lmap" to work.','line_number':787,'multiline':False]['text':' When recording and gotchars() was called the character will be','line_number':790,'multiline':False]['text':' recorded again, remove the previous recording.','line_number':791,'multiline':False]['text':' don't delay going to insert mode','line_number':799,'multiline':False]['text':' do go to Insert mode','line_number':800,'multiline':False]['text':' If the window was made so small that nothing shows, make it at least one','line_number':803,'multiline':False]['text':' line and one column when typing a command.','line_number':804,'multiline':False]['text':' Get the command count','line_number':810,'multiline':False]['text':' Find the command character in the table of commands.','line_number':814,'multiline':False]['text':' For CTRL-W we already got nchar when looking for a count.','line_number':815,'multiline':False]['text':' Not a known command: beep.','line_number':826,'multiline':False]['text':' this command is not allowed now','line_number':832,'multiline':False]['text':' In Visual/Select mode, a few keys are handled in a special way.','line_number':835,'multiline':False]['text':' when 'keymodel' contains "stopsel" may stop Select/Visual mode','line_number':838,'multiline':False]['text':' Keys that work different when 'keymodel' contains "startsel"','line_number':847,'multiline':False]['text':' Just in case','line_number':856,'multiline':False]['text':' Invert horizontal movements and operations.  Only when typed by the','line_number':871,'multiline':False]['text':' user directly, not when the result of a mapping or "x" translated','line_number':872,'multiline':False]['text':' to "dl".','line_number':873,'multiline':False]['text':' Get additional characters if we need them.','line_number':891,'multiline':False]['text':' Flush the showcmd characters onto the screen so we can see them while','line_number':895,'multiline':False]['text':' the command is being executed.  Only do this when the shown command was','line_number':896,'multiline':False]['text':' actually displayed, otherwise this will slow down a lot when executing','line_number':897,'multiline':False]['text':' mappings.','line_number':898,'multiline':False]['text':' don't scroll screen up for normal command','line_number':922,'multiline':False]['text':' remember where the cursor was','line_number':926,'multiline':False]['text':' When 'keymodel' contains "startsel" some keys start Select/Visual','line_number':928,'multiline':False]['text':' mode.','line_number':929,'multiline':False]['text':' Execute the command!','line_number':946,'multiline':False]['text':' Call the command function found in the commands table.','line_number':947,'multiline':False]['text':' If we didn't start or finish an operator, reset oap->regname, unless we','line_number':951,'multiline':False]['text':' need it later.','line_number':952,'multiline':False]['text':' Get the length of mapped chars again after typing a count, second','line_number':963,'multiline':False]['text':' character or "z333<cr>".','line_number':964,'multiline':False]['text':' If an operation is pending, handle it.  But not for K_IGNORE or','line_number':968,'multiline':False]['text':' K_MOUSEMOVE.','line_number':969,'multiline':False]['text':' Wait for a moment when a message is displayed that will be overwritten','line_number':973,'multiline':False]['text':' by the mode message.','line_number':974,'multiline':False]['text':' Finish up after executing a Normal mode command.','line_number':978,'multiline':False]['text':' Reset finish_op, in case it was set','line_number':993,'multiline':False]['text':' Redraw the cursor with another shape, if we were in Operator-pending','line_number':998,'multiline':False]['text':' mode or did a replace command.','line_number':999,'multiline':False]['text':' may show different cursor shape','line_number':1003,'multiline':False]['text':' check if we moved since setting pcmark','line_number':1014,'multiline':False]['text':' may need to update w_leftcol','line_number':1022,'multiline':False]['text':' may need to update w_leftcol','line_number':1028,'multiline':False]['text':' don't go to Insert mode if a terminal has a running job','line_number':1033,'multiline':False]['text':' May restart edit(), if we got here with CTRL-O in Insert mode (but not','line_number':1038,'multiline':False]['text':' if still inside a mapping that started in Visual mode).','line_number':1039,'multiline':False]['text':' May switch from Visual to Select mode after CTRL-O command.','line_number':1040,'multiline':False]['text':' Save count before an operator for next time.','line_number':1063,'multiline':False]['text':'
 * Set v:count and v:count1 according to "cap".
 * Set v:prevcount only when "set_prevcount" is TRUE.
 ','line_number':1068,'multiline':True]['text':' multiply with cap->opcount the same way as above','line_number':1077,'multiline':False]['text':' only set v:prevcount once','line_number':1081,'multiline':False]['text':'
 * Check if highlighting for Visual mode is possible, give a warning message
 * if not.
 ','line_number':1085,'multiline':True]['text':'
 * Call yank_do_autocmd() for "regname".
 ','line_number':1103,'multiline':True]['text':'
 * End Visual mode.
 * This function or the next should ALWAYS be called to end Visual mode, except
 * from do_pending_operator().
 ','line_number':1122,'multiline':True]['text':' If we are using the clipboard, then remember what was selected in case','line_number':1138,'multiline':False]['text':' we need to paste it somewhere while we still own the selection.','line_number':1139,'multiline':False]['text':' Only do this when the clipboard is already owned.  Don't want to grab','line_number':1140,'multiline':False]['text':' the selection when hitting ESC.','line_number':1141,'multiline':False]['text':' Emit a TextYankPost for the automatic copy of the selection into the','line_number':1146,'multiline':False]['text':' star and/or plus register.','line_number':1147,'multiline':False]['text':' Save the current VIsual area for '< and '> marks, and "gv"','line_number':1162,'multiline':False]['text':'
 * Reset VIsual_active and VIsual_reselect.
 ','line_number':1178,'multiline':True]['text':' delete the inversion later','line_number':1187,'multiline':False]['text':'
 * Reset VIsual_active and VIsual_reselect if it's set.
 ','line_number':1192,'multiline':True]['text':' delete the inversion later','line_number':1201,'multiline':False]['text':'
 * Check for a balloon-eval special item to include when searching for an
 * identifier.  When "dir" is BACKWARD "ptr[-1]" must be valid!
 * Returns TRUE if the character at "*ptr" should be included.
 * "dir" is FORWARD or BACKWARD, the direction of searching.
 * "*colp" is in/decremented if "ptr[-dir]" should also be included.
 * "bnp" points to a counter for square brackets.
 ','line_number':1216,'multiline':True]['text':' Accept everything inside [].','line_number':1231,'multiline':False]['text':' skip over "s.var"','line_number':1241,'multiline':False]['text':' two-character item: s->var','line_number':1245,'multiline':False]['text':'
 * Find the identifier under or to the right of the cursor.
 * "find_type" can have one of three values:
 * FIND_IDENT:   find an identifier (keyword)
 * FIND_STRING:  find any non-white text
 * FIND_IDENT + FIND_STRING: find any non-white text, identifier preferred.
 * FIND_EVAL:	 find text useful for C program debugging
 *
 * There are three steps:
 * 1. Search forward for the start of an identifier/text.  Doesn't move if
 *    already on one.
 * 2. Search backward for the start of this identifier/text.
 *    This doesn't match the real Vi but I like it a little better and it
 *    shouldn't bother anyone.
 * 3. Search forward to the end of this identifier/text.
 *    When FIND_IDENT isn't defined, we backup until a blank.
 *
 * Returns the length of the text, or zero if no text is found.
 * If text is found, a pointer to the text is put in "*text".  This
 * points into the current buffer line and is not always NUL terminated.
 ','line_number':1255,'multiline':True]['text':'
 * Like find_ident_under_cursor(), but for any window and any position.
 * However: Uses 'iskeyword' from the current window!.
 ','line_number':1283,'multiline':True]['text':' column where "text" starts, can be NULL','line_number':1293,'multiline':False]['text':' init to shut up GCC','line_number':1297,'multiline':False]['text':' bracket nesting','line_number':1302,'multiline':False]['text':' if i == 0: try to find an identifier','line_number':1304,'multiline':False]['text':' if i == 1: try to find any non-white text','line_number':1305,'multiline':False]['text':'
	 * 1. skip to start of identifier/text
	 ','line_number':1309,'multiline':True]['text':' Stop at a ']' to evaluate "a[x]".','line_number':1317,'multiline':False]['text':' When starting on a ']' count it, so that we include the '['.','line_number':1333,'multiline':False]['text':'
	 * 2. Back up to start of identifier/text.
	 ','line_number':1336,'multiline':True]['text':' Remember class of character under cursor.','line_number':1341,'multiline':False]['text':' If we don't want just any old text, or we've found an','line_number':1363,'multiline':False]['text':' identifier, stop searching.','line_number':1364,'multiline':False]['text':' If we don't want just any old text, or we've found an','line_number':1385,'multiline':False]['text':' identifier, stop searching.','line_number':1386,'multiline':False]['text':' didn't find an identifier or text','line_number':1395,'multiline':False]['text':'
     * 3. Find the end if the identifier/text.
     ','line_number':1410,'multiline':True]['text':' Search for point of changing multibyte character class.','line_number':1418,'multiline':False]['text':'
 * Prepare for redo of a normal command.
 ','line_number':1441,'multiline':True]['text':'
 * Prepare for redo of any command.
 * Note that only the last argument can be a multi-byte char.
 ','line_number':1451,'multiline':True]['text':'
 * Prepare for redo of any command with extra count after "cmd2".
 ','line_number':1468,'multiline':True]['text':' Put info about a mapping in the redo buffer, so that "." will use the','line_number':1485,'multiline':False]['text':' same script context.','line_number':1486,'multiline':False]['text':' yank from specified buffer','line_number':1490,'multiline':False]['text':'
 * Check for operator active and clear it.
 *
 * Beep and return TRUE if an operator was active.
 ','line_number':1511,'multiline':True]['text':'
 * Check for operator or Visual active.  Clear active operator.
 *
 * Beep and return TRUE if an operator or Visual was active.
 ','line_number':1525,'multiline':True]['text':'
 * Remove the shift modifier from a special key.
 ','line_number':1556,'multiline':True]['text':'
 * If the mode is currently displayed clear the command line or update the
 * command displayed.
 ','line_number':1574,'multiline':True]['text':' unshow visual mode later','line_number':1582,'multiline':False]['text':'
 * Routines for displaying a partly typed command
 ','line_number':1587,'multiline':True]['text':' For push_showcmd()','line_number':1591,'multiline':False]['text':' Show the size of the Visual area.','line_number':1610,'multiline':False]['text':' Include closed folds as a whole.','line_number':1622,'multiline':False]['text':' Make 'sbr' empty for a moment to get the correct size.','line_number':1634,'multiline':False]['text':' end of line','line_number':1672,'multiline':False]['text':' truncate','line_number':1683,'multiline':False]['text':' Don't actually display something if there is nothing to clear.','line_number':1691,'multiline':False]['text':'
 * Add 'c' to string of shown command chars.
 * Return TRUE if output has been written (and setcursor() has been called).
 ','line_number':1699,'multiline':True]['text':' Ignore keys that are scrollbar updates and mouse clicks','line_number':1736,'multiline':False]['text':'
 * Delete 'len' characters from the end of the shown command.
 ','line_number':1768,'multiline':True]['text':'
 * push_showcmd() and pop_showcmd() are used when waiting for the user to type
 * something and there is a partial mapping.
 ','line_number':1788,'multiline':True]['text':' 'showcmdloc' is "last" or empty','line_number':1832,'multiline':False]['text':' clear the rest of an old message by outputting up to SHOWCMD_COLS','line_number':1837,'multiline':False]['text':' spaces','line_number':1838,'multiline':False]['text':' put cursor back where it belongs','line_number':1843,'multiline':False]['text':'
 * When "check" is FALSE, prepare for commands that scroll the window.
 * When "check" is TRUE, take care of scroll-binding after the window has
 * scrolled.  Called from normal_cmd() and edit().
 ','line_number':1846,'multiline':True]['text':' If a ":syncbind" command was just used, don't scroll, only reset','line_number':1864,'multiline':False]['text':' the values.','line_number':1865,'multiline':False]['text':' Synchronize other windows, as necessary according to','line_number':1870,'multiline':False]['text':' 'scrollbind'.  Don't do this after an ":edit" command, except','line_number':1871,'multiline':False]['text':' when 'diff' is set.','line_number':1872,'multiline':False]['text':' jump flag set in 'scrollopt'','line_number':1888,'multiline':False]['text':' When switching between windows, make sure that the relative','line_number':1890,'multiline':False]['text':' vertical offset is valid for the new window.  The relative','line_number':1891,'multiline':False]['text':' offset is invalid whenever another 'scrollbind' window has','line_number':1892,'multiline':False]['text':' scrolled to a point that would force the current window to','line_number':1893,'multiline':False]['text':' scroll past the beginning or end of its buffer.  When the','line_number':1894,'multiline':False]['text':' resync is performed, some of the other 'scrollbind' windows may','line_number':1895,'multiline':False]['text':' need to jump so that the current window's relative position is','line_number':1896,'multiline':False]['text':' visible on-screen.','line_number':1897,'multiline':False]['text':'
 * Synchronize any windows that have "scrollbind" set, based on the
 * number of rows by which the current window has changed
 * (1998-11-02 16:21:01  R. Edward Ralston <eralston@computer.org>)
 ','line_number':1912,'multiline':True]['text':' check 'scrollopt' string for vertical and horizontal scroll options','line_number':1930,'multiline':False]['text':' loop through the scrollbound windows and scroll accordingly','line_number':1937,'multiline':False]['text':' skip original window and windows with 'noscrollbind'','line_number':1942,'multiline':False]['text':' do the vertical scroll','line_number':1946,'multiline':False]['text':' do the horizontal scroll','line_number':1976,'multiline':False]['text':' reset current-window','line_number':1981,'multiline':False]['text':'
 * Command character that's ignored.
 * Used for CTRL-Q and CTRL-S to avoid problems with terminals that use
 * xon/xoff.
 ','line_number':1988,'multiline':True]['text':' don't call edit() now','line_number':1996,'multiline':False]['text':'
 * Command character that doesn't do anything, but unlike nv_ignore() does
 * start edit().  Used for "startinsert" executed while starting up.
 ','line_number':1999,'multiline':True]['text':'
 * Command character doesn't exist.
 ','line_number':2008,'multiline':True]['text':'
 * <Help> and <F1> commands.
 ','line_number':2017,'multiline':True]['text':'
 * CTRL-A and CTRL-X: Add or subtract from letter or number under cursor.
 ','line_number':2027,'multiline':True]['text':'
 * CTRL-F, CTRL-B, etc: Scroll page up or down.
 ','line_number':2051,'multiline':True]['text':' <C-PageUp>: tab page back; <C-PageDown>: tab page forward','line_number':2062,'multiline':False]['text':'
 * Implementation of "gd" and "gD" command.
 ','line_number':2072,'multiline':True]['text':' 1 for "1gd" and "1gD"','line_number':2079,'multiline':False]['text':' clear any search statistics','line_number':2096,'multiline':False]['text':'
 * Return TRUE if line[offset] is not inside a C-style comment or string, FALSE
 * otherwise.
 ','line_number':2101,'multiline':True]['text':'
 * Search for variable declaration of "ptr[len]".
 * When "locally" is TRUE in the current function ("gd"), otherwise in the
 * current file ("gD").
 * When "thisblock" is TRUE check the {} block scope.
 * Return FAIL when not found.
 ','line_number':2147,'multiline':True]['text':' flags passed to searchit()','line_number':2160,'multiline':False]['text':' Put "\V" before the pattern to avoid that the special meaning of "."','line_number':2177,'multiline':False]['text':' and "~" causes trouble.','line_number':2178,'multiline':False]['text':' don't wrap around end of file now','line_number':2184,'multiline':False]['text':' don't switch ignorecase off now','line_number':2185,'multiline':False]['text':' With "gD" go to line 1.','line_number':2187,'multiline':False]['text':' With "gd" Search back for the start of the current function, then go','line_number':2188,'multiline':False]['text':' back until a blank line.  If this fails go to line 1.','line_number':2189,'multiline':False]['text':' Set in findpar() otherwise','line_number':2192,'multiline':False]['text':' Search forward for the identifier, ignore comment lines.','line_number':2204,'multiline':False]['text':' match after start is failure too','line_number':2211,'multiline':False]['text':' Check that the block the match is in doesn't end before the','line_number':2217,'multiline':False]['text':' position where we started the search from.','line_number':2218,'multiline':False]['text':' There can't be a useful match before the end of this block.','line_number':2223,'multiline':False]['text':' Skip to the end.','line_number':2224,'multiline':False]['text':' If we previously found a valid position, use it.','line_number':2232,'multiline':False]['text':' Ignore this line, continue at start of next line.','line_number':2242,'multiline':False]['text':' If the current position is not a valid identifier and a previous','line_number':2249,'multiline':False]['text':' match is present, favor that one instead.','line_number':2250,'multiline':False]['text':' Global search: use first valid match found','line_number':2257,'multiline':False]['text':' If we previously found a valid position, use it.','line_number':2262,'multiline':False]['text':' For finding a local variable and the match is before the "{" or','line_number':2268,'multiline':False]['text':' inside a comment, continue searching.  For K&R style function','line_number':2269,'multiline':False]['text':' declarations this skips the function header without types.','line_number':2270,'multiline':False]['text':' Remove SEARCH_START from flags to avoid getting stuck at one','line_number':2275,'multiline':False]['text':' position.','line_number':2276,'multiline':False]['text':' "n" searches forward now','line_number':2288,'multiline':False]['text':'
 * Move 'dist' lines in direction 'dir', counting lines by *screen*
 * lines rather than lines in the file.
 * 'dist' must be positive.
 *
 * Return OK if able to move cursor, FAIL otherwise.
 ','line_number':2299,'multiline':True]['text':' margin offset for first screen line','line_number':2313,'multiline':False]['text':' margin offset for wrapped screen line','line_number':2314,'multiline':False]['text':' text width for first screen line','line_number':2315,'multiline':False]['text':' text width for wrapped screen line','line_number':2316,'multiline':False]['text':' avoid divide by zero','line_number':2326,'multiline':False]['text':' Instead of sticking at the last character of the buffer line we','line_number':2330,'multiline':False]['text':' try to stick in the last column of the screen.','line_number':2331,'multiline':False]['text':' Move back within the line. This can give a negative value','line_number':2365,'multiline':False]['text':' for w_curswant if width1 < width2 (with cpoptions+=n),','line_number':2366,'multiline':False]['text':' which will get clipped to column 0.','line_number':2367,'multiline':False]['text':' to previous line','line_number':2371,'multiline':False]['text':' dir == FORWARD','line_number':2385,'multiline':False]['text':' move forward within line','line_number':2396,'multiline':False]['text':' to next line','line_number':2400,'multiline':False]['text':' Check if the cursor has moved below the number display','line_number':2410,'multiline':False]['text':' when width1 < width2 (with cpoptions+=n). Subtract width2','line_number':2411,'multiline':False]['text':' to get a negative value for w_curswant, which will get','line_number':2412,'multiline':False]['text':' clipped to column 0.','line_number':2413,'multiline':False]['text':' Check for landing on a character that got split at the end of the','line_number':2432,'multiline':False]['text':' last line.  We want to advance a screenline, not end up in the same','line_number':2433,'multiline':False]['text':' screenline or move two screenlines.','line_number':2434,'multiline':False]['text':' stick in the last column','line_number':2457,'multiline':False]['text':'
 * Handle CTRL-E and CTRL-Y commands: scroll a line up or down.
 * cap->arg must be TRUE for CTRL-E.
 ','line_number':2463,'multiline':True]['text':'
 * Scroll "count" lines up or down, and redraw.
 ','line_number':2474,'multiline':True]['text':' Adjust the cursor position for 'scrolloff'.  Mark w_topline as','line_number':2493,'multiline':False]['text':' valid, otherwise the screen jumps back at the end of the file.','line_number':2494,'multiline':False]['text':' If moved back to where we were, at least move the cursor, otherwise','line_number':2499,'multiline':False]['text':' we get stuck at one position.  Don't move the cursor up if the','line_number':2500,'multiline':False]['text':' first line of the buffer is already on the screen','line_number':2501,'multiline':False]['text':' Mark w_topline as valid, otherwise the screen jumps back at the','line_number':2522,'multiline':False]['text':' end of the file.','line_number':2523,'multiline':False]['text':'
 * Get the count specified after a 'z' command. Only the 'z<CR>', 'zl', 'zh',
 * 'z<Left>', and 'z<Right>' commands accept a count after 'z'.
 * Returns TRUE to process the 'z' command and FALSE to skip it.
 ','line_number':2533,'multiline':True]['text':' "z123{nchar}": edit the count before obtaining {nchar}','line_number':2544,'multiline':False]['text':' disallow scrolling here','line_number':2552,'multiline':False]['text':' no mapping for nchar, but allow key codes','line_number':2555,'multiline':False]['text':'
 * "zug" and "zuw": undo "zg" and "zw"
 * "zg": add good word to word list
 * "zw": add wrong word to word list
 * "zG": add good word to temp word list
 * "zW": add wrong word to temp word list
 ','line_number':2600,'multiline':True]['text':' no mapping for nchar, but allow key codes','line_number':2617,'multiline':False]['text':' Find bad word under the cursor.  When 'spell' is','line_number':2640,'multiline':False]['text':' off this fails and find_ident_under_cursor() is','line_number':2641,'multiline':False]['text':' used below.','line_number':2642,'multiline':False]['text':'
 * Commands that start with "z".
 ','line_number':2662,'multiline':True]['text':' "zf" and "zF" are always an operator, "zd", "zo", "zO", "zc"','line_number':2682,'multiline':False]['text':' and "zC" only in Visual mode.  "zj" and "zk" are motion','line_number':2683,'multiline':False]['text':' commands.','line_number':2684,'multiline':False]['text':' For "z+", "z<CR>", "zt", "z.", "zz", "z^", "z-", "zb":','line_number':2693,'multiline':False]['text':' If line number given, set cursor.','line_number':2694,'multiline':False]['text':' "z+", "z<CR>" and "zt": put cursor at top of screen','line_number':2709,'multiline':False]['text':' No count given: put cursor at the line below screen','line_number':2713,'multiline':False]['text':' make sure w_botline is valid','line_number':2714,'multiline':False]['text':' FALLTHROUGH','line_number':2720,'multiline':False]['text':' FALLTHROUGH','line_number':2725,'multiline':False]['text':' "z." and "zz": put cursor in middle of screen','line_number':2732,'multiline':False]['text':' FALLTHROUGH','line_number':2734,'multiline':False]['text':' "z^", "z-" and "zb": put cursor at bottom of screen','line_number':2741,'multiline':False]['text':' Strange Vi behavior: <count>z^ finds line at top of window','line_number':2742,'multiline':False]['text':' when <count> is at bottom of window, and puts that one at','line_number':2743,'multiline':False]['text':' bottom of window.','line_number':2744,'multiline':False]['text':' FALLTHROUGH','line_number':2754,'multiline':False]['text':' FALLTHROUGH','line_number':2757,'multiline':False]['text':' "zH" - scroll screen right half-page','line_number':2764,'multiline':False]['text':' FALLTHROUGH','line_number':2767,'multiline':False]['text':' "zh" - scroll screen to the right','line_number':2769,'multiline':False]['text':' "zL" - scroll window left half-page','line_number':2777,'multiline':False]['text':' FALLTHROUGH','line_number':2779,'multiline':False]['text':' "zl" - scroll window to the left if not wrapping','line_number':2781,'multiline':False]['text':' "zs" - scroll screen, cursor at the start','line_number':2788,'multiline':False]['text':' like the cursor is in col 0','line_number':2793,'multiline':False]['text':' "ze" - scroll screen, cursor at the end','line_number':2809,'multiline':False]['text':' like the cursor is in col 0','line_number':2814,'multiline':False]['text':' "zp", "zP" in block mode put without addind trailing spaces','line_number':2831,'multiline':False]['text':' "zy" Yank without trailing spaces','line_number':2835,'multiline':False]['text':' "zF": create fold command','line_number':2839,'multiline':False]['text':' "zf": create fold operator','line_number':2840,'multiline':False]['text':' "zF" is like "zfzf"','line_number':2848,'multiline':False]['text':' "zd": delete fold at cursor','line_number':2859,'multiline':False]['text':' "zD": delete fold at cursor recursively','line_number':2860,'multiline':False]['text':' "zE": erase all folds','line_number':2872,'multiline':False]['text':' "zn": fold none: reset 'foldenable'','line_number':2885,'multiline':False]['text':' "zN": fold Normal: set 'foldenable'','line_number':2889,'multiline':False]['text':' "zi": invert folding: toggle 'foldenable'','line_number':2893,'multiline':False]['text':' "za": open closed fold or close open fold at cursor','line_number':2897,'multiline':False]['text':' "zA": open fold at cursor recursively','line_number':2907,'multiline':False]['text':' "zo": open fold at cursor or Visual area','line_number':2917,'multiline':False]['text':' "zO": open fold recursively','line_number':2924,'multiline':False]['text':' "zc": close fold at cursor or Visual area','line_number':2931,'multiline':False]['text':' "zC": close fold recursively','line_number':2939,'multiline':False]['text':' "zv": open folds at the cursor','line_number':2947,'multiline':False]['text':' "zx": re-apply 'foldlevel' and open folds at the cursor','line_number':2951,'multiline':False]['text':' recompute folds','line_number':2953,'multiline':False]['text':' update right now','line_number':2954,'multiline':False]['text':' "zX": undo manual opens/closes, re-apply 'foldlevel'','line_number':2958,'multiline':False]['text':' recompute folds','line_number':2960,'multiline':False]['text':' force an update','line_number':2961,'multiline':False]['text':' "zm": fold more','line_number':2964,'multiline':False]['text':' force an update','line_number':2971,'multiline':False]['text':' "zM": close all folds','line_number':2975,'multiline':False]['text':' force an update','line_number':2977,'multiline':False]['text':' "zr": reduce folding','line_number':2981,'multiline':False]['text':' "zR": open all folds','line_number':2991,'multiline':False]['text':' force an update','line_number':2993,'multiline':False]['text':' "zj" move to next fold downwards','line_number':2996,'multiline':False]['text':' "zk" move to next fold upwards','line_number':2997,'multiline':False]['text':' FEAT_FOLDING','line_number':3003,'multiline':False]['text':' "zug" and "zuw": undo "zg" and "zw"','line_number':3006,'multiline':False]['text':' "zg": add good word to word list','line_number':3007,'multiline':False]['text':' "zw": add wrong word to word list','line_number':3008,'multiline':False]['text':' "zG": add good word to temp word list','line_number':3009,'multiline':False]['text':' "zW": add wrong word to temp word list','line_number':3010,'multiline':False]['text':' "z=": suggestions for a badly spelled word','line_number':3015,'multiline':False]['text':' Redraw when 'foldenable' changed','line_number':3025,'multiline':False]['text':' Adjust 'foldenable' in diff-synced windows.','line_number':3033,'multiline':False]['text':' Redraw when 'foldlevel' changed.','line_number':3047,'multiline':False]['text':'
 * Vertical scrollbar movement.
 ','line_number':3054,'multiline':True]['text':' Even if an operator was pending, we still want to scroll','line_number':3063,'multiline':False]['text':'
 * Horizontal scrollbar movement.
 ','line_number':3067,'multiline':True]['text':' Even if an operator was pending, we still want to scroll','line_number':3076,'multiline':False]['text':'
 * Click in GUI tab.
 ','line_number':3082,'multiline':True]['text':' Even if an operator was pending, we still want to jump tabs.','line_number':3091,'multiline':False]['text':'
 * Selected item in tab line menu.
 ','line_number':3095,'multiline':True]['text':' Even if an operator was pending, we still want to jump tabs.','line_number':3104,'multiline':False]['text':'
 * Handle selecting an item of the GUI tab line menu.
 * Used in Normal and Insert mode.
 ','line_number':3108,'multiline':True]['text':'
 * "Q" command.
 ','line_number':3153,'multiline':True]['text':' Ignore 'Q' in Visual mode, just give a beep.','line_number':3159,'multiline':False]['text':'
 * Handle a ":" command.
 ','line_number':3166,'multiline':True]['text':' Using ":" as a movement is characterwise exclusive.','line_number':3186,'multiline':False]['text':' translate "count:" into ":.,.+(count - 1)"','line_number':3192,'multiline':False]['text':' When typing, don't type below an old message','line_number':3201,'multiline':False]['text':' get a command line and execute it','line_number':3207,'multiline':False]['text':' If 'insertmode' changed, enter or exit Insert mode','line_number':3214,'multiline':False]['text':' The Ex command failed, do not execute the operator.','line_number':3224,'multiline':False]['text':' The start of the operator has become invalid by the Ex command.','line_number':3232,'multiline':False]['text':'
 * Handle CTRL-G command.
 ','line_number':3236,'multiline':True]['text':' toggle Selection/Visual mode','line_number':3242,'multiline':False]['text':' print full name if count given or :cd used','line_number':3249,'multiline':False]['text':'
 * Handle CTRL-H <Backspace> command.
 ','line_number':3253,'multiline':True]['text':' BS key behaves like 'x' in Select mode','line_number':3261,'multiline':False]['text':'
 * CTRL-L: clear screen and redraw.
 ','line_number':3268,'multiline':True]['text':' Clear all syntax states to force resyncing.','line_number':3278,'multiline':False]['text':'
 * CTRL-O: In Select mode: switch to Visual mode for one command.
 * Otherwise: Go to older pcmark.
 ','line_number':3298,'multiline':True]['text':' restart Select mode later','line_number':3310,'multiline':False]['text':'
 * CTRL-^ command, short for ":e #".  Works even when the alternate buffer is
 * not named.
 ','line_number':3319,'multiline':True]['text':'
 * "Z" commands.
 ','line_number':3331,'multiline':True]['text':' "ZZ": equivalent to ":x".','line_number':3342,'multiline':False]['text':' "ZQ": equivalent to ":q!" (Elvis compatible).','line_number':3346,'multiline':False]['text':'
 * Call nv_ident() as if "c1" was used, with "c2" as next character.
 ','line_number':3354,'multiline':True]['text':'
 * 'K' normal-mode command. Get the command to lookup the keyword under the
 * cursor.
 ','line_number':3371,'multiline':True]['text':' in the help buffer','line_number':3392,'multiline':False]['text':' 'keywordprog' is an ex command','line_number':3399,'multiline':False]['text':' An external command will probably use an argument starting','line_number':3408,'multiline':False]['text':' with "-" as an option.  To avoid trouble we skip the "-".','line_number':3409,'multiline':False]['text':' found dashes only','line_number':3417,'multiline':False]['text':' When a count is given, turn it into a range.  Is this','line_number':3424,'multiline':False]['text':' really what we want?','line_number':3425,'multiline':False]['text':'
 * Handle the commands that use the word under the cursor.
 * [g] CTRL-]	:ta to current identifier
 * [g] 'K'	run program for current identifier
 * [g] '*'	/ to current identifier or string
 * [g] '#'	? to current identifier or string
 *  g  ']'	:tselect for current identifier
 ','line_number':3447,'multiline':True]['text':' value of 'keywordprg'','line_number':3463,'multiline':False]['text':' 'keywordprg' is ":he"','line_number':3464,'multiline':False]['text':' 'keywordprg' starts with ":"','line_number':3465,'multiline':False]['text':' init for GCC','line_number':3466,'multiline':False]['text':' "g" command','line_number':3468,'multiline':False]['text':' "g*", "g#", "g]" and "gCTRL-]"','line_number':3472,'multiline':False]['text':' the pound sign, '#' for English keyboards','line_number':3483,'multiline':False]['text':' The "]", "CTRL-]" and "K" commands accept an argument in Visual mode.','line_number':3486,'multiline':False]['text':' Allocate buffer to put the command in.  Inserting backslashes can','line_number':3503,'multiline':False]['text':' double the length of the word.  p_kp / curbuf->b_p_kp could be added','line_number':3504,'multiline':False]['text':' and some numbers.','line_number':3505,'multiline':False]['text':' found white space only','line_number':3511,'multiline':False]['text':' Put cursor at start of word, makes search skip the word','line_number':3525,'multiline':False]['text':' under the cursor.','line_number':3526,'multiline':False]['text':' Call setpcmark() first, so "*``" puts the cursor back where','line_number':3527,'multiline':False]['text':' it was.','line_number':3528,'multiline':False]['text':' don't use 'smartcase' now','line_number':3534,'multiline':False]['text':' Now grab the chars in the identifier','line_number':3568,'multiline':False]['text':' Escape the argument properly for an Ex command','line_number':3573,'multiline':False]['text':' Escape the argument properly for a shell command','line_number':3576,'multiline':False]['text':' ":help" handles unescaped argument','line_number':3604,'multiline':False]['text':' put a backslash before \ and some others','line_number':3615,'multiline':False]['text':' When current byte is a part of multibyte character, copy all','line_number':3618,'multiline':False]['text':' bytes of that character.','line_number':3619,'multiline':False]['text':' Execute the command.','line_number':3633,'multiline':False]['text':' put pattern in search history','line_number':3641,'multiline':False]['text':'
 * Get visually selected text, within one line only.
 * Returns FAIL if more than one line selected.
 ','line_number':3657,'multiline':True]['text':' return: start of selected text','line_number':3664,'multiline':False]['text':' return: length of selected text','line_number':3665,'multiline':False]['text':' Correct the length to include all bytes of the last','line_number':3697,'multiline':False]['text':' character.','line_number':3698,'multiline':False]['text':' Do not include a trailing NUL.','line_number':3701,'multiline':False]['text':'
 * CTRL-T: backwards in tag stack
 ','line_number':3709,'multiline':True]['text':'
 * Handle scrolling command 'H', 'L' and 'M'.
 ','line_number':3719,'multiline':True]['text':' make sure curwin->w_botline is valid','line_number':3737,'multiline':False]['text':' Count a fold for one screen line.','line_number':3746,'multiline':False]['text':' Don't count filler lines above the window.','line_number':3766,'multiline':False]['text':' make sure w_empty_rows is valid','line_number':3770,'multiline':False]['text':' Count half he number of filler lines to be "below this','line_number':3775,'multiline':False]['text':' line" and half to be "above the next line".','line_number':3776,'multiline':False]['text':' (cap->cmdchar == 'H')','line_number':3795,'multiline':False]['text':' Count a fold for one screen line.','line_number':3801,'multiline':False]['text':' Correct for 'so', except when an operator is pending.','line_number':3817,'multiline':False]['text':'
 * Cursor right commands.
 ','line_number':3823,'multiline':True]['text':' <C-Right> and <S-Right> move a word or WORD right','line_number':3834,'multiline':False]['text':' In virtual edit mode, there's no such thing as "past_line", as lines','line_number':3845,'multiline':False]['text':' are (theoretically) infinitely long.','line_number':3846,'multiline':False]['text':'	  <Space> wraps to next line if 'whichwrap' has 's'.','line_number':3856,'multiline':False]['text':'	      'l' wraps to next line if 'whichwrap' has 'l'.','line_number':3857,'multiline':False]['text':' CURS_RIGHT wraps to next line if 'whichwrap' has '>'.','line_number':3858,'multiline':False]['text':' When deleting we also count the NL as a character.','line_number':3867,'multiline':False]['text':' Set cap->oap->inclusive when last char in the line is','line_number':3868,'multiline':False]['text':' included, move to next line after that','line_number':3869,'multiline':False]['text':' Only beep and flush if not moved at all','line_number':3886,'multiline':False]['text':'
 * Cursor left commands.
 *
 * Returns TRUE when operator end should not be adjusted.
 ','line_number':3918,'multiline':True]['text':' <C-Left> and <S-Left> move a word or WORD left','line_number':3930,'multiline':False]['text':' <BS> and <Del> wrap to previous line if 'whichwrap' has 'b'.','line_number':3943,'multiline':False]['text':'		 'h' wraps to previous line if 'whichwrap' has 'h'.','line_number':3944,'multiline':False]['text':'	   CURS_LEFT wraps to previous line if 'whichwrap' has '<'.','line_number':3945,'multiline':False]['text':' When the NL before the first char has to be deleted we','line_number':3959,'multiline':False]['text':' put the cursor on the NUL after the previous line.','line_number':3960,'multiline':False]['text':' This is a very special case, be careful!','line_number':3961,'multiline':False]['text':' Don't adjust op_end now, otherwise it won't work.','line_number':3962,'multiline':False]['text':' Only beep and flush if not moved at all','line_number':3980,'multiline':False]['text':'
 * Cursor up commands.
 * cap->arg is TRUE for "-": Move cursor to first non-blank.
 ','line_number':3993,'multiline':True]['text':' <S-Up> is page up','line_number':4002,'multiline':False]['text':'
 * Cursor down commands.
 * cap->arg is TRUE for CR and "+": Move cursor to first non-blank.
 ','line_number':4015,'multiline':True]['text':' <S-Down> is page down','line_number':4024,'multiline':False]['text':' Quickfix window only: view the result under the cursor.','line_number':4029,'multiline':False]['text':' In the cmdline window a <CR> executes the command.','line_number':4035,'multiline':False]['text':' In a prompt buffer a <CR> in the last line invokes the callback.','line_number':4040,'multiline':False]['text':'
 * Grab the file name under the cursor and edit it.
 ','line_number':4060,'multiline':True]['text':' do autowrite if necessary','line_number':4081,'multiline':False]['text':'
 * <End> command: to end of current line or last line.
 ','line_number':4099,'multiline':True]['text':' CTRL-END = goto last line','line_number':4105,'multiline':False]['text':' to end of current line','line_number':4109,'multiline':False]['text':'
 * Handle the "$" command.
 ','line_number':4114,'multiline':True]['text':' In virtual mode when off the edge of a line and an operator','line_number':4122,'multiline':False]['text':' is pending (whew!) keep the cursor where it is.','line_number':4123,'multiline':False]['text':' Otherwise, send it to the end of the line.','line_number':4124,'multiline':False]['text':' so we stay at the end','line_number':4127,'multiline':False]['text':'
 * Implementation of '?' and '/' commands.
 * If cap->arg is TRUE don't set PC mark.
 ','line_number':4137,'multiline':True]['text':' Translate "g??" to "g?g?"','line_number':4149,'multiline':False]['text':' When using 'incsearch' the cursor may be moved to set a different search','line_number':4156,'multiline':False]['text':' start position.','line_number':4157,'multiline':False]['text':'
 * Handle "N" and "n" commands.
 * cap->arg is SEARCH_REV for "N", 0 for "n".
 ','line_number':4172,'multiline':True]['text':' Avoid getting stuck on the current cursor position, which can','line_number':4185,'multiline':False]['text':' happen when an offset is given and the cursor is on the last char','line_number':4186,'multiline':False]['text':' in the buffer: Repeat with count + 1.','line_number':4187,'multiline':False]['text':' Redraw the window to refresh the highlighted matches.','line_number':4194,'multiline':False]['text':'
 * Search for "pat" in direction "dir" ('/' or '?', 0 for repeat).
 * Uses only cap->count1 and cap->oap from "cap".
 * Return 0 for failure, 1 for found, 2 for found and line offset added.
 ','line_number':4200,'multiline':True]['text':' extra flags for do_search()','line_number':4210,'multiline':False]['text':' Redraw the window to refresh the highlighted matches.','line_number':4242,'multiline':False]['text':' "/$" will put the cursor after the end of the line, may need to','line_number':4247,'multiline':False]['text':' correct that here','line_number':4248,'multiline':False]['text':'
 * Character search commands.
 * cap->arg is BACKWARD for 'F' and 'T', FORWARD for 'f' and 't', TRUE for
 * ',' and FALSE for ';'.
 * cap->nchar is NUL for ',' and ';' (repeat the search)
 ','line_number':4253,'multiline':True]['text':' Include a Tab for "tx" and for "dfx".','line_number':4277,'multiline':False]['text':'
 * "[{", "[(", "]}" or "])": go to Nth unclosed '{', '(', '}' or ')'
 * "[#", "]#": go to start/end of Nth innermost #if..#endif construct.
 * "[/", "[*", "]/", "]*": go to Nth comment start/end.
 * "[m" or "]m" search for prev/next start of (Java) method.
 * "[M" or "]M" search for prev/next end of (Java) method.
 ','line_number':4295,'multiline':True]['text':' init for GCC','line_number':4306,'multiline':False]['text':' nothing found','line_number':4333,'multiline':False]['text':' use last one found','line_number':4339,'multiline':False]['text':' Handle "[m", "]m", "[M" and "[M".  The findmatchlimit() only','line_number':4348,'multiline':False]['text':' brought us to the match for "[m" and "]M" when inside a method.','line_number':4349,'multiline':False]['text':' Try finding the '{' or '}' we want to be at.','line_number':4350,'multiline':False]['text':' Also repeat for the given count.','line_number':4351,'multiline':False]['text':' norm is TRUE for "]M" and "[m"','line_number':4354,'multiline':False]['text':' found a match: we were inside a method','line_number':4358,'multiline':False]['text':' if not found anything, that's an error','line_number':4374,'multiline':False]['text':' Must have found end/start of class: use it.','line_number':4383,'multiline':False]['text':' Or found the place to be at.','line_number':4384,'multiline':False]['text':' if no match found at all, we started outside of the','line_number':4391,'multiline':False]['text':' class and we're inside now.  Just go on.','line_number':4392,'multiline':False]['text':' found start/end of other method: go to match','line_number':4398,'multiline':False]['text':'
 * "[" and "]" commands.
 * cap->arg is BACKWARD for "[" and FORWARD for "]".
 ','line_number':4427,'multiline':True]['text':' init for GCC','line_number':4435,'multiline':False]['text':' cursor position before command','line_number':4436,'multiline':False]['text':' TODO: don't do this for an error.','line_number':4443,'multiline':False]['text':' "[f" or "]f" : Edit file under the cursor (same as "gf")','line_number':4445,'multiline':False]['text':' Find the occurrence(s) of the identifier or define under cursor','line_number':4451,'multiline':False]['text':' in current and included files or jump to the first occurrence.','line_number':4452,'multiline':False]['text':'','line_number':4453,'multiline':False]['text':'			search	     list	    jump','line_number':4454,'multiline':False]['text':'		      fwd   bwd    fwd	 bwd	 fwd	bwd','line_number':4455,'multiline':False]['text':' identifier     "]i"  "[i"   "]I"  "[I"	"]^I"  "[^I"','line_number':4456,'multiline':False]['text':' define	      "]d"  "[d"   "]D"  "[D"	"]^D"  "[^D"','line_number':4457,'multiline':False]['text':' Make a copy, if the line was changed it will be freed.','line_number':4467,'multiline':False]['text':' "[{", "[(", "]}" or "])": go to Nth unclosed '{', '(', '}' or ')'','line_number':4487,'multiline':False]['text':' "[#", "]#": go to start/end of Nth innermost #if..#endif construct.','line_number':4488,'multiline':False]['text':' "[/", "[*", "]/", "]*": go to Nth comment start/end.','line_number':4489,'multiline':False]['text':' "[m" or "]m" search for prev/next start of (Java) method.','line_number':4490,'multiline':False]['text':' "[M" or "]M" search for prev/next end of (Java) method.','line_number':4491,'multiline':False]['text':' "[[", "[]", "]]" and "][": move to start or end of function','line_number':4498,'multiline':False]['text':' "]]" or "[["','line_number':4501,'multiline':False]['text':' "][" or "[]"','line_number':4504,'multiline':False]['text':' Imitate strange Vi behaviour: When using "]]" with an operator','line_number':4507,'multiline':False]['text':' we also stop at '}'.','line_number':4508,'multiline':False]['text':' "[p", "[P", "]P" and "]p": put with indent adjustment','line_number':4524,'multiline':False]['text':' "['", "[`", "]'" and "]`": jump to next mark','line_number':4530,'multiline':False]['text':' [ or ] followed by a middle mouse click: put selected text with','line_number':4547,'multiline':False]['text':' indent adjustment.  Any other button just does as usual.','line_number':4548,'multiline':False]['text':' "[z" and "]z": move to start or end of open fold.','line_number':4557,'multiline':False]['text':' "[c" and "]c": move to next or previous diff-change.','line_number':4567,'multiline':False]['text':' "[s", "[S", "]s" and "]S": move to next spell error.','line_number':4577,'multiline':False]['text':' Not a valid cap->nchar.','line_number':4597,'multiline':False]['text':'
 * Handle Normal mode "%" command.
 ','line_number':4602,'multiline':True]['text':' {cnt}% : goto {cnt} percentage in file','line_number':4614,'multiline':False]['text':' Round up, so 'normal 100%' always jumps at the line line.','line_number':4622,'multiline':False]['text':' Beyond 21474836 lines, (ml_line_count * 100 + 99) would','line_number':4623,'multiline':False]['text':' overflow on 32-bits, so use a formula with less accuracy','line_number':4624,'multiline':False]['text':' to avoid overflows.','line_number':4625,'multiline':False]['text':' "%" : go to matching paren','line_number':4639,'multiline':False]['text':'
 * Handle "(" and ")" commands.
 * cap->arg is BACKWARD for "(" and FORWARD for ")".
 ','line_number':4663,'multiline':True]['text':' The motion used to be inclusive for "(", but that is not what Vi does.','line_number':4672,'multiline':False]['text':' Don't leave the cursor on the NUL past end of line.','line_number':4682,'multiline':False]['text':'
 * "m" command: Mark a position.
 ','line_number':4691,'multiline':True]['text':'
 * "{" and "}" commands.
 * cmd->arg is BACKWARD for "{" and FORWARD for "}".
 ','line_number':4704,'multiline':True]['text':'
 * "u" command: Undo or make lower case.
 ','line_number':4728,'multiline':True]['text':' translate "<Visual>u" to "<Visual>gu" and "guu" to "gugu"','line_number':4736,'multiline':False]['text':'
 * <Undo> command.
 ','line_number':4745,'multiline':True]['text':'
 * Handle the "r" command.
 ','line_number':4765,'multiline':True]['text':' get another character','line_number':4785,'multiline':False]['text':' Don't redo a multibyte character with CTRL-V.','line_number':4790,'multiline':False]['text':' Abort if the character is a special key.','line_number':4797,'multiline':False]['text':' Visual mode "r"','line_number':4804,'multiline':False]['text':' Use a special (negative) number to make a difference between a','line_number':4811,'multiline':False]['text':' literal CR or NL and a line break.','line_number':4812,'multiline':False]['text':' Break tabs, etc.','line_number':4822,'multiline':False]['text':' Add extra space and put the cursor on the first one.','line_number':4829,'multiline':False]['text':' Abort if not enough characters to replace.','line_number':4837,'multiline':False]['text':' Replacing with a TAB is done by edit() when it is complicated because','line_number':4846,'multiline':False]['text':' 'expandtab' or 'smarttab' is set.  CTRL-V TAB inserts a literal TAB.','line_number':4847,'multiline':False]['text':' Other characters are done below to avoid problems with things like','line_number':4848,'multiline':False]['text':' CTRL-V 048 (for edit() this would be R CTRL-V 0 ESC).','line_number':4849,'multiline':False]['text':' save line for undo','line_number':4859,'multiline':False]['text':' Replace character(s) by a single newline.','line_number':4865,'multiline':False]['text':' Strange vi behaviour: Only one newline is inserted.','line_number':4866,'multiline':False]['text':' Delete the characters here.','line_number':4867,'multiline':False]['text':' Insert the newline with an insert command, takes care of','line_number':4868,'multiline':False]['text':' autoindent.	The insert command depends on being on the last','line_number':4869,'multiline':False]['text':' character of a line or not.','line_number':4870,'multiline':False]['text':' delete the characters','line_number':4871,'multiline':False]['text':' Give 'r' to edit(), to get the redo command right.','line_number':4875,'multiline':False]['text':' This is slow, but it handles replacing a single-byte with a','line_number':4893,'multiline':False]['text':' multi-byte and the other way around.  Also handles adding','line_number':4894,'multiline':False]['text':' composing characters for utf-8.','line_number':4895,'multiline':False]['text':' will be decremented further down','line_number':4906,'multiline':False]['text':' Replace the characters within one line.','line_number':4920,'multiline':False]['text':' Get ptr again, because u_save and/or showmatch() will have','line_number':4923,'multiline':False]['text':' released the line.  This may also happen in ins_copychar().','line_number':4924,'multiline':False]['text':' At the same time we let know that the line will be changed.','line_number':4925,'multiline':False]['text':' mark the buffer as changed and prepare for displaying','line_number':4956,'multiline':False]['text':' cursor on the last replaced char','line_number':4960,'multiline':False]['text':' if the character on the left of the current cursor is a multi-byte','line_number':4961,'multiline':False]['text':' character, move two characters left','line_number':4962,'multiline':False]['text':'
 * 'o': Exchange start and end of Visual area.
 * 'O': same, but in block mode exchange left and right corners.
 ','line_number':4971,'multiline':True]['text':' 'selection "exclusive" and cursor at right-bottom corner: move it','line_number':4991,'multiline':False]['text':' right one column','line_number':4992,'multiline':False]['text':'
 * "R" (cap->arg is FALSE) and "gR" (cap->arg is TRUE).
 ','line_number':5020,'multiline':True]['text':' "R" is replace lines','line_number':5026,'multiline':False]['text':' remember original area for gv','line_number':5030,'multiline':False]['text':'
 * "gr".
 ','line_number':5049,'multiline':True]['text':' Do same as "r" in Visual mode for now','line_number':5059,'multiline':False]['text':' get another character','line_number':5071,'multiline':False]['text':' Prefix a control character with CTRL-V to avoid it being used as','line_number':5074,'multiline':False]['text':' a command.','line_number':5075,'multiline':False]['text':'
 * Swap case for "~" command, when it does not work like an operator.
 ','line_number':5085,'multiline':True]['text':' line may have been flushed, get it again','line_number':5136,'multiline':False]['text':'
 * Move cursor to mark.
 ','line_number':5182,'multiline':True]['text':' ignored if not MCHAR','line_number':5206,'multiline':False]['text':'
 * Handle commands that are operators in Visual mode.
 ','line_number':5210,'multiline':True]['text':' Uppercase means linewise, except in block mode, then "D" deletes till','line_number':5218,'multiline':False]['text':' the end of the line, and "C" replaces till EOL','line_number':5219,'multiline':False]['text':'
 * "s" and "S" commands.
 ','line_number':5234,'multiline':True]['text':' When showing output of term_dumpdiff() swap the top and bottom.','line_number':5241,'multiline':False]['text':' "vs" and "vS" are the same as "vc"','line_number':5252,'multiline':False]['text':'
 * Abbreviated commands.
 ','line_number':5266,'multiline':True]['text':' DEL key behaves like 'x'','line_number':5273,'multiline':False]['text':' in Visual mode these commands are operators','line_number':5275,'multiline':False]['text':'
 * Translate a command into another command.
 ','line_number':5282,'multiline':True]['text':' In Vi "2D" doesn't delete the next line.  Can't translate it','line_number':5296,'multiline':False]['text':' either, because "2." should also not use the count.','line_number':5297,'multiline':False]['text':'
 * "'" and "`" commands.  Also for "g'" and "g`".
 * cap->arg is TRUE for "'" and "g'".
 ','line_number':5321,'multiline':True]['text':' getting file may reset it','line_number':5332,'multiline':False]['text':' jumped to other file','line_number':5340,'multiline':False]['text':' May need to clear the coladd that a mark includes.','line_number':5353,'multiline':False]['text':'
 * Handle CTRL-O, CTRL-I, "g;", "g," and "CTRL-Tab" commands.
 ','line_number':5367,'multiline':True]['text':' getting file may reset it','line_number':5376,'multiline':False]['text':' jump to other file','line_number':5392,'multiline':False]['text':' can jump','line_number':5397,'multiline':False]['text':'
 * Handle '"' command.
 ','line_number':5419,'multiline':True]['text':' remember count before '"'','line_number':5434,'multiline':False]['text':'
 * Handle "v", "V" and "CTRL-V" commands.
 * Also for "gh", "gH" and "g^H" commands: Always start Select mode, cap->arg
 * is TRUE.
 * Handle CTRL-Q just like CTRL-V.
 ','line_number':5443,'multiline':True]['text':' 'v', 'V' and CTRL-V can be used while an operator is pending to make it','line_number':5455,'multiline':False]['text':' characterwise, linewise, or blockwise.','line_number':5456,'multiline':False]['text':' operator doesn't finish now but later','line_number':5460,'multiline':False]['text':' change Visual mode','line_number':5465,'multiline':False]['text':' stop visual mode','line_number':5467,'multiline':False]['text':' toggle char/block mode','line_number':5469,'multiline':False]['text':'	   or char/line mode','line_number':5470,'multiline':False]['text':' update the inversion','line_number':5475,'multiline':False]['text':' start Visual mode','line_number':5477,'multiline':False]['text':' use previously selected part','line_number':5482,'multiline':False]['text':' start Select mode when 'selectmode' contains "cmd"','line_number':5488,'multiline':False]['text':' show visual mode later','line_number':5492,'multiline':False]['text':' For V and ^V, we multiply the number of lines even if there','line_number':5493,'multiline':False]['text':' was only one -- webb','line_number':5494,'multiline':False]['text':' Update curswant on the original line, that is where "col" is','line_number':5522,'multiline':False]['text':' valid.','line_number':5523,'multiline':False]['text':' show the inversion','line_number':5533,'multiline':False]['text':' start Select mode when 'selectmode' contains "cmd"','line_number':5538,'multiline':False]['text':' include one more char','line_number':5542,'multiline':False]['text':' With a count select that many characters or lines.','line_number':5545,'multiline':False]['text':'
 * Start selection for Shift-movement keys.
 ','line_number':5555,'multiline':True]['text':' if 'selectmode' contains "key", start Select mode','line_number':5561,'multiline':False]['text':'
 * Start Select mode, if "c" is in 'selectmode' and not in a mapping or menu.
 * When "c" is 'o' (checking for "mouse") then also when mapped.
 ','line_number':5566,'multiline':True]['text':'
 * Start Visual mode "c".
 * Should set VIsual_select before calling this.
 ','line_number':5577,'multiline':True]['text':' Corner case: the 0 position in a tab may change when going into','line_number':5593,'multiline':False]['text':' virtualedit.  Recalculate curwin->w_cursor to avoid bad highlighting.','line_number':5594,'multiline':False]['text':' Check if redraw is needed after changing the state.','line_number':5609,'multiline':False]['text':' show visual mode later','line_number':5614,'multiline':False]['text':' Make sure the clipboard gets updated.  Needed because start and','line_number':5616,'multiline':False]['text':' end may still be the same, and the selection needs to be owned','line_number':5617,'multiline':False]['text':' Only need to redraw this line, unless still need to redraw an old','line_number':5621,'multiline':False]['text':' Visual area (when 'lazyredraw' is set).','line_number':5622,'multiline':False]['text':'
 * CTRL-W: Window commands
 ','line_number':5631,'multiline':True]['text':' "CTRL-W :" is the same as typing ":"; useful in a terminal window','line_number':5639,'multiline':False]['text':' everything is in window.c','line_number':5645,'multiline':False]['text':'
 * CTRL-Z: Suspend
 ','line_number':5648,'multiline':True]['text':' stop Visual mode','line_number':5656,'multiline':False]['text':'
 * "gv": Reselect the previous Visual area.  If Visual already active,
 *       exchange previous and current Visual area.
 ','line_number':5660,'multiline':True]['text':' set w_cursor to the start of the Visual area, tpos to the end','line_number':5681,'multiline':False]['text':' Set Visual to the start and w_cursor to the end of the Visual','line_number':5710,'multiline':False]['text':' area.  Make sure they are on an existing character.','line_number':5711,'multiline':False]['text':' When called from normal "g" command: start Select mode when','line_number':5718,'multiline':False]['text':' 'selectmode' contains "cmd".  When called for K_SELECT, always','line_number':5719,'multiline':False]['text':' start Select mode.','line_number':5720,'multiline':False]['text':' Make sure the clipboard gets updated.  Needed because start and','line_number':5730,'multiline':False]['text':' end are still the same, and the selection needs to be owned','line_number':5731,'multiline':False]['text':'
 * "g0", "g^" : Like "0" and "^" but for screen lines.
 * "gm": middle of "g0" and "g$".
 ','line_number':5738,'multiline':True]['text':' Go to the middle of the screen line.  When 'number' or','line_number':5771,'multiline':False]['text':' 'relativenumber' is on and lines are wrapping the middle can be more','line_number':5772,'multiline':False]['text':' to the left.','line_number':5773,'multiline':False]['text':'
 * "g_": to the last non-blank character in the line or <count> lines
 *       downward.
 ','line_number':5790,'multiline':True]['text':' In Visual mode we may end up after the line.','line_number':5811,'multiline':False]['text':' Decrease the cursor column until it's on a non-blank.','line_number':5815,'multiline':False]['text':'
 * "g$" : Like "$" but for screen lines.
 ','line_number':5823,'multiline':True]['text':' so we stay at the end','line_number':5841,'multiline':False]['text':' Make sure we stick in this column.','line_number':5860,'multiline':False]['text':' Check for landing on a character that got split at','line_number':5864,'multiline':False]['text':' the end of the line.  We do not want to advance to','line_number':5865,'multiline':False]['text':' the next screen line.','line_number':5866,'multiline':False]['text':' if it fails, let the cursor still move to the last char','line_number':5881,'multiline':False]['text':' if the character doesn't fit move one back','line_number':5887,'multiline':False]['text':' Make sure we stick in this column.','line_number':5898,'multiline':False]['text':'
 * "gi": start Insert at the last position.
 ','line_number':5910,'multiline':True]['text':'
 * Commands starting with "g".
 ','line_number':5934,'multiline':True]['text':' "g^A": dump log of used memory.','line_number':5948,'multiline':False]['text':' "g^A/g^X": sequentially increment visually selected region','line_number':5953,'multiline':False]['text':' "gR": Enter virtual replace mode.','line_number':5965,'multiline':False]['text':' "gv": Reselect the previous Visual area.  If Visual already active,','line_number':5979,'multiline':False]['text':' exchange previous and current Visual area.','line_number':5980,'multiline':False]['text':' "gV": Don't reselect the previous Visual area after a Select mode','line_number':5985,'multiline':False]['text':' mapping of menu.','line_number':5986,'multiline':False]['text':' "gh":  start Select mode.','line_number':5991,'multiline':False]['text':' "gH":  start Select line mode.','line_number':5992,'multiline':False]['text':' "g^H": start Select block mode.','line_number':5993,'multiline':False]['text':' FALLTHROUGH','line_number':5996,'multiline':False]['text':' "gn", "gN" visually select next/previous search match','line_number':6005,'multiline':False]['text':' "gn" selects next match','line_number':6006,'multiline':False]['text':' "gN" selects previous match','line_number':6007,'multiline':False]['text':' "gj" and "gk" two new funny movement keys -- up and down','line_number':6014,'multiline':False]['text':' movement based on *screen* line rather than *file* line.','line_number':6015,'multiline':False]['text':' with 'nowrap' it works just like the normal "j" command.','line_number':6018,'multiline':False]['text':' with 'nowrap' it works just like the normal "k" command.','line_number':6032,'multiline':False]['text':' "gJ": join two lines without inserting a space.','line_number':6044,'multiline':False]['text':' "g0", "g^" : Like "0" and "^" but for screen lines.','line_number':6049,'multiline':False]['text':' "gm": middle of "g0" and "g$".','line_number':6050,'multiline':False]['text':' "g_": to the last non-blank character in the line or <count> lines','line_number':6072,'multiline':False]['text':' downward.','line_number':6073,'multiline':False]['text':' "g$" : Like "$" but for screen lines.','line_number':6078,'multiline':False]['text':' "g*" and "g#", like "*" and "#" but without using "\<" and "\>"','line_number':6085,'multiline':False]['text':' pound sign (sometimes equal to '#')','line_number':6089,'multiline':False]['text':' :tag or :tselect for current identifier','line_number':6091,'multiline':False]['text':' :tselect for current identifier','line_number':6092,'multiline':False]['text':' ge and gE: go back to end of word','line_number':6096,'multiline':False]['text':' "g CTRL-G": display info about cursor position','line_number':6106,'multiline':False]['text':' "gi": start Insert at the last position.','line_number':6111,'multiline':False]['text':' "gI": Start insert in column 1.','line_number':6116,'multiline':False]['text':' "gf": goto file, edit file under cursor','line_number':6123,'multiline':False]['text':' "]f" and "[f": can also be used.','line_number':6124,'multiline':False]['text':' "g'm" and "g`m": jump to mark without setting pcmark','line_number':6130,'multiline':False]['text':' FALLTHROUGH','line_number':6133,'multiline':False]['text':' "gs": Goto sleep.','line_number':6138,'multiline':False]['text':' "ga": Display the ascii value of the character under the','line_number':6143,'multiline':False]['text':' cursor.	It is displayed in decimal, hex, and octal. -- webb','line_number':6144,'multiline':False]['text':' "g8": Display the bytes used for the UTF-8 character under the','line_number':6149,'multiline':False]['text':' cursor.	It is displayed in hex.','line_number':6150,'multiline':False]['text':' "8g8" finds illegal byte sequence.','line_number':6151,'multiline':False]['text':' "g<": show scrollback text','line_number':6159,'multiline':False]['text':' "gg": Goto the first line in file.  With a count it goes to','line_number':6164,'multiline':False]['text':' that line number like for "G". -- webb','line_number':6165,'multiline':False]['text':'	 Two-character operators:','line_number':6171,'multiline':False]['text':'	 "gq"	    Format text','line_number':6172,'multiline':False]['text':'	 "gw"	    Format text and keep cursor position','line_number':6173,'multiline':False]['text':'	 "g~"	    Toggle the case of the text.','line_number':6174,'multiline':False]['text':'	 "gu"	    Change text to lower case.','line_number':6175,'multiline':False]['text':'	 "gU"	    Change text to upper case.','line_number':6176,'multiline':False]['text':'   "g?"	    rot13 encoding','line_number':6177,'multiline':False]['text':'   "g@"	    call 'operatorfunc'','line_number':6178,'multiline':False]['text':' FALLTHROUGH','line_number':6182,'multiline':False]['text':' "gd": Find first occurrence of pattern under the cursor in the','line_number':6191,'multiline':False]['text':'	 current function','line_number':6192,'multiline':False]['text':' "gD": idem, but in the current file.','line_number':6193,'multiline':False]['text':' g<*Mouse> : <C-*mouse>','line_number':6199,'multiline':False]['text':' "gP" and "gp": same as "P" and "p" but leave cursor just after new text','line_number':6223,'multiline':False]['text':' "go": goto byte count from start of buffer','line_number':6230,'multiline':False]['text':' "gQ": improved Ex mode','line_number':6236,'multiline':False]['text':' "g+" and "g-": undo or redo along the timeline','line_number':6266,'multiline':False]['text':'
 * Handle "o" and "O" commands.
 ','line_number':6278,'multiline':True]['text':' Open above the first line of a folded sequence of lines','line_number':6293,'multiline':False]['text':' Open below the last line of a folded sequence of lines','line_number':6297,'multiline':False]['text':' trigger TextChangedI for the 'o/O' command','line_number':6301,'multiline':False]['text':' force redraw of cursorline','line_number':6318,'multiline':False]['text':' When '#' is in 'cpoptions' ignore the count.','line_number':6321,'multiline':False]['text':'
 * "." command: redo last change.
 ','line_number':6328,'multiline':True]['text':' If "restart_edit" is TRUE, the last but one command is repeated','line_number':6337,'multiline':False]['text':' instead of the last command (inserting text). This is used for','line_number':6338,'multiline':False]['text':' CTRL-O <.> in insert mode.','line_number':6339,'multiline':False]['text':'
 * CTRL-R: undo undo or specify register in select mode
 ','line_number':6344,'multiline':True]['text':' Get register name','line_number':6353,'multiline':False]['text':' the unnamed register is 0','line_number':6362,'multiline':False]['text':'
 * Handle "U" command.
 ','line_number':6376,'multiline':True]['text':' In Visual mode and typing "gUU" triggers an operator','line_number':6382,'multiline':False]['text':' translate "gUU" to "gUgU"','line_number':6385,'multiline':False]['text':'
 * '~' command: If tilde is not an operator and Visual is off: swap case of a
 * single character.
 ','line_number':6399,'multiline':True]['text':'
 * Handle an operator command.
 * The actual work is done by do_pending_operator().
 ','line_number':6421,'multiline':True]['text':' double operator works on lines','line_number':6439,'multiline':False]['text':'
 * Set v:operator to the characters for "optype".
 ','line_number':6452,'multiline':True]['text':'
 * Handle linewise operator "dd", "yy", etc.
 *
 * "_" is is a strange motion command that helps make operators more logical.
 * It is actually implemented, but not documented in the real Vi.  This motion
 * command actually refers to "the current line".  Commands like "dd" and "yy"
 * are really an alternate form of "d_" and "y_".  It does accept a count, so
 * "d3_" works to delete 3 lines.
 ','line_number':6472,'multiline':True]['text':' only with linewise motions','line_number':6487,'multiline':False]['text':' 'Y' does not move cursor','line_number':6493,'multiline':False]['text':'
 * <Home> command.
 ','line_number':6497,'multiline':True]['text':' CTRL-HOME is like "gg"','line_number':6503,'multiline':False]['text':' Don't move cursor past eol (only necessary in a','line_number':6511,'multiline':False]['text':' one-character line).','line_number':6512,'multiline':False]['text':'
 * "|" command.
 ','line_number':6515,'multiline':True]['text':' keep curswant at the column where we wanted to go, not where','line_number':6531,'multiline':False]['text':' we ended; differs if line is too short','line_number':6532,'multiline':False]['text':'
 * Handle back-word command "b" and "B".
 * cap->arg is 1 for "B"
 ','line_number':6536,'multiline':True]['text':'
 * Handle word motion commands "e", "E", "w" and "W".
 * cap->arg is TRUE for "E" and "W".
 ','line_number':6554,'multiline':True]['text':' Set inclusive for the "E" and "e" command.','line_number':6566,'multiline':False]['text':' "cw" and "cW" are a special case.','line_number':6573,'multiline':False]['text':' not an empty line','line_number':6577,'multiline':False]['text':' Reproduce a funny Vi behaviour: "cw" on a blank only','line_number':6581,'multiline':False]['text':' changes one character, not all blanks until the start of','line_number':6582,'multiline':False]['text':' the next word.  Only do this when the 'w' flag is included','line_number':6583,'multiline':False]['text':' in 'cpoptions'.','line_number':6584,'multiline':False]['text':' This is a little strange. To match what the real Vi does,','line_number':6594,'multiline':False]['text':' we effectively map 'cw' to 'ce', and 'cW' to 'cE', provided','line_number':6595,'multiline':False]['text':' that we are not on a space or a TAB.  This seems impolite','line_number':6596,'multiline':False]['text':' at first, but it's really more what we mean when we say','line_number':6597,'multiline':False]['text':' 'cw'.','line_number':6598,'multiline':False]['text':' Another strangeness: When standing on the end of a word','line_number':6599,'multiline':False]['text':' "ce" will change until the end of the next word, but "cw"','line_number':6600,'multiline':False]['text':' will change only one character! This is done by setting','line_number':6601,'multiline':False]['text':' flag.','line_number':6602,'multiline':False]['text':' Don't leave the cursor on the NUL past the end of line. Unless we','line_number':6617,'multiline':False]['text':' didn't move it forward.','line_number':6618,'multiline':False]['text':'
 * Used after a movement command: If the cursor ends up on the NUL after the
 * end of the line, may move it back to the last character and make the motion
 * inclusive.
 ','line_number':6634,'multiline':True]['text':' The cursor cannot remain on the NUL when:','line_number':6642,'multiline':False]['text':' - the column is > 0','line_number':6643,'multiline':False]['text':' - not in Visual mode or 'selection' is "o"','line_number':6644,'multiline':False]['text':' - 'virtualedit' is not "all" and not "onemore".','line_number':6645,'multiline':False]['text':' prevent cursor from moving on the trail byte','line_number':6651,'multiline':False]['text':'
 * "0" and "^" commands.
 * cap->arg is the argument for beginline().
 ','line_number':6658,'multiline':True]['text':' Don't move cursor past eol (only necessary in a','line_number':6672,'multiline':False]['text':' one-character line).','line_number':6673,'multiline':False]['text':'
 * In exclusive Visual mode, may include the last character.
 ','line_number':6676,'multiline':True]['text':'
 * Exclude last character at end of Visual area for 'selection' == "exclusive".
 * Should check VIsual_mode before calling this.
 * Returns TRUE when backed up to the previous line.
 ','line_number':6693,'multiline':True]['text':'
 * SELECT key in Normal or Visual mode: end of Select mode mapping.
 ','line_number':6727,'multiline':True]['text':' fake "gv" command','line_number':6740,'multiline':False]['text':'
 * "G", "gg", CTRL-END, CTRL-HOME.
 * cap->arg is TRUE for "G".
 ','line_number':6747,'multiline':True]['text':' When a count is given, use it instead of the default lnum','line_number':6763,'multiline':False]['text':'
 * CTRL-\ in Normal mode.
 ','line_number':6778,'multiline':True]['text':' unshow mode later','line_number':6788,'multiline':False]['text':' stop Visual','line_number':6794,'multiline':False]['text':' CTRL-\ CTRL-G restarts Insert mode when 'insertmode' is set.','line_number':6797,'multiline':False]['text':'
 * ESC in Normal mode: beep, but don't flush buffers.
 * Don't even beep if we are canceling a command.
 ','line_number':6805,'multiline':True]['text':' TRUE for CTRL-C','line_number':6820,'multiline':False]['text':' The user may accidentally do "vim file | grep word" and then','line_number':6827,'multiline':False]['text':' CTRL-C doesn't show anything.  With a changed buffer give the','line_number':6828,'multiline':False]['text':' message on stderr.  Without any changes might as well exit.','line_number':6829,'multiline':False]['text':' remove "-- (insert) --"','line_number':6852,'multiline':False]['text':' Don't reset "restart_edit" when 'insertmode' is set, it won't be','line_number':6854,'multiline':False]['text':' set again below when halfway a mapping.','line_number':6855,'multiline':False]['text':' don't stop executing autocommands et al.','line_number':6861,'multiline':False]['text':' When :normal runs out of characters while in the command line window','line_number':6867,'multiline':False]['text':' vgetorpeek() will repeatedly return ESC.  Exit the cmdline window to','line_number':6868,'multiline':False]['text':' break the loop.','line_number':6869,'multiline':False]['text':' stop Visual','line_number':6876,'multiline':False]['text':' make sure cursor is not beyond EOL','line_number':6877,'multiline':False]['text':' A CTRL-C is often used at the start of a menu.  When 'insertmode' is','line_number':6892,'multiline':False]['text':' set return to Insert mode afterwards.','line_number':6893,'multiline':False]['text':'
 * Move the cursor for the "A" command.
 ','line_number':6898,'multiline':True]['text':' Pretend Insert mode here to allow the cursor on the','line_number':6909,'multiline':False]['text':' character past the end of the line','line_number':6910,'multiline':False]['text':'
 * Handle "A", "a", "I", "i" and <Insert> commands.
 * Also handle K_PS, start bracketed paste.
 ','line_number':6919,'multiline':True]['text':' <Insert> is equal to "i"','line_number':6926,'multiline':False]['text':' in Visual mode "A" and "I" are an operator','line_number':6930,'multiline':False]['text':' in Visual mode and after an operator "a" and "i" are for text objects','line_number':6945,'multiline':False]['text':' Only give this error when 'insertmode' is off.','line_number':6961,'multiline':False]['text':' drop the pasted text','line_number':6965,'multiline':False]['text':' In Visual mode the selected text is deleted.','line_number':6974,'multiline':False]['text':' In linewise Visual mode insert before the beginning of the','line_number':6992,'multiline':False]['text':' next line.','line_number':6993,'multiline':False]['text':' When the last line in the buffer was deleted then create a','line_number':6994,'multiline':False]['text':' new line, otherwise there is not need to move cursor.','line_number':6995,'multiline':False]['text':' Detect this by checking if cursor moved above Visual area.','line_number':6996,'multiline':False]['text':' When the last char in the line was deleted then append.','line_number':7008,'multiline':False]['text':' Detect this by checking if cursor moved before Visual area.','line_number':7009,'multiline':False]['text':' Insert to replace the deleted text with the pasted text.','line_number':7015,'multiline':False]['text':' "A"ppend after the line','line_number':7022,'multiline':False]['text':' "I"nsert before the first non-blank','line_number':7026,'multiline':False]['text':' Bracketed paste works like "a"ppend, unless the cursor is in','line_number':7034,'multiline':False]['text':' the first column, then it inserts.','line_number':7035,'multiline':False]['text':' FALLTHROUGH','line_number':7038,'multiline':False]['text':' "a"ppend is like "i"nsert on the next character.','line_number':7040,'multiline':False]['text':' increment coladd when in virtual space, increment the','line_number':7041,'multiline':False]['text':' column otherwise, also to append after an unprintable char','line_number':7042,'multiline':False]['text':' Pretend Insert mode here to allow the cursor on the','line_number':7057,'multiline':False]['text':' character past the end of the line','line_number':7058,'multiline':False]['text':' drop the pasted text','line_number':7067,'multiline':False]['text':'
 * Invoke edit() and take care of "restart_edit" and the return value.
 ','line_number':7071,'multiline':True]['text':' "r" or "gr" command','line_number':7077,'multiline':False]['text':' Complicated: When the user types "a<C-O>a" we don't want to do Insert','line_number':7083,'multiline':False]['text':' mode recursively.  But when doing "a<C-O>." or "a<C-O>rx" we do allow','line_number':7084,'multiline':False]['text':' it.','line_number':7085,'multiline':False]['text':' Always reset "restart_edit", this is not a restarted edit.','line_number':7091,'multiline':False]['text':' Reset Changedtick_i, so that TextChangedI will only be triggered for stuff','line_number':7094,'multiline':False]['text':' from insert mode, for 'o/O' this has already been done in n_opencmd','line_number':7095,'multiline':False]['text':'
 * "a" or "i" while an operator is pending or in Visual mode: object motion.
 ','line_number':7105,'multiline':True]['text':' "ix" = inner object: exclude white space','line_number':7117,'multiline':False]['text':' "ax" = an object: include white space','line_number':7119,'multiline':False]['text':' Make sure (), [], {} and <> are in 'matchpairs'','line_number':7121,'multiline':False]['text':' "aw" = a word','line_number':7127,'multiline':False]['text':' "aW" = a WORD','line_number':7130,'multiline':False]['text':' "ab" = a braces block','line_number':7133,'multiline':False]['text':' "aB" = a Brackets block','line_number':7138,'multiline':False]['text':' "a[" = a [] block','line_number':7143,'multiline':False]['text':' "a<" = a <> block','line_number':7147,'multiline':False]['text':' "at" = a tag block (xml and html)','line_number':7152,'multiline':False]['text':' Do not adjust oap->end in do_pending_operator()','line_number':7153,'multiline':False]['text':' otherwise there are different results for 'dit'','line_number':7154,'multiline':False]['text':' (note leading whitespace in last line):','line_number':7155,'multiline':False]['text':' 1) <b>      2) <b>','line_number':7156,'multiline':False]['text':'    foobar      foobar','line_number':7157,'multiline':False]['text':'    </b>            </b>','line_number':7158,'multiline':False]['text':' "ap" = a paragraph','line_number':7163,'multiline':False]['text':' "as" = a sentence','line_number':7166,'multiline':False]['text':' "a'" = a single quoted string','line_number':7170,'multiline':False]['text':' "a`" = a backtick quoted string','line_number':7171,'multiline':False]['text':' TODO','line_number':7175,'multiline':False]['text':' "aS" = a section','line_number':7176,'multiline':False]['text':' "af" = a filename','line_number':7177,'multiline':False]['text':' "au" = a URL','line_number':7178,'multiline':False]['text':'
 * "q" command: Start/stop recording.
 * "q:", "q/", "q?": edit command-line in command-line window.
 ','line_number':7192,'multiline':True]['text':' "gqq" is the same as "gqgq": format line','line_number':7201,'multiline':False]['text':' (stop) recording into a named register, unless executing a','line_number':7222,'multiline':False]['text':' register','line_number':7223,'multiline':False]['text':'
 * Handle the "@r" command.
 ','line_number':7228,'multiline':True]['text':'
 * Handle the CTRL-U and CTRL-D commands.
 ','line_number':7254,'multiline':True]['text':'
 * Handle "J" or "gJ" command.
 ','line_number':7268,'multiline':True]['text':' join the visual lines','line_number':7274,'multiline':False]['text':' default for join is two lines!','line_number':7284,'multiline':False]['text':' can't join when on the last line','line_number':7288,'multiline':False]['text':'
 * "P", "gP", "p" and "gp" commands.
 ','line_number':7303,'multiline':True]['text':'
 * "P", "gP", "p" and "gp" commands.
 * "fix_indent" is TRUE for "[p", "[P", "]p" and "]P".
 ','line_number':7312,'multiline':True]['text':' "dp" is ":diffput"','line_number':7330,'multiline':False]['text':' Putting in Visual mode: The put text replaces the selected','line_number':7368,'multiline':False]['text':' text.  First delete the selected text, then put the new text.','line_number':7369,'multiline':False]['text':' Need to save and restore the registers that the delete','line_number':7370,'multiline':False]['text':' overwrites if the old contents is being put.','line_number':7371,'multiline':False]['text':' The delete is going to overwrite the register we want to','line_number':7386,'multiline':False]['text':' put, save it first.','line_number':7387,'multiline':False]['text':' Now delete the selected text. Avoid messages here.','line_number':7391,'multiline':False]['text':' delete PUT_LINE_BACKWARD;','line_number':7401,'multiline':False]['text':' Delete probably changed the register we want to put, save','line_number':7406,'multiline':False]['text':' it first. Then put back what was there before the delete.','line_number':7407,'multiline':False]['text':' When deleted a linewise Visual area, put the register as','line_number':7412,'multiline':False]['text':' lines to avoid it joined with the next line.  When deletion was','line_number':7413,'multiline':False]['text':' characterwise, split a line when putting lines.','line_number':7414,'multiline':False]['text':' cursor is at the end of the line or end of file, put','line_number':7426,'multiline':False]['text':' forward.','line_number':7427,'multiline':False]['text':' May have been reset in do_put().','line_number':7429,'multiline':False]['text':' If a register was saved, put it back now.','line_number':7434,'multiline':False]['text':' What to reselect with "gv"?  Selecting the just put text seems to','line_number':7438,'multiline':False]['text':' be the most useful, since the original text was removed.','line_number':7439,'multiline':False]['text':' need to adjust cursor position','line_number':7444,'multiline':False]['text':' When all lines were selected and deleted do_put() leaves an empty','line_number':7449,'multiline':False]['text':' line that needs to be deleted now.','line_number':7450,'multiline':False]['text':' If the cursor was in that line, move it to the end of the last','line_number':7456,'multiline':False]['text':' line.','line_number':7457,'multiline':False]['text':'
 * "o" and "O" commands.
 ','line_number':7467,'multiline':True]['text':' "do" is ":diffget"','line_number':7474,'multiline':False]['text':' switch start and end of visual','line_number':7482,'multiline':False]['text':'
 * Trigger CursorHold event.
 * When waiting for a character for 'updatetime' K_CURSORHOLD is put in the
 * input buffer.  "did_cursorhold" is set to avoid retriggering.
 ','line_number':7508,'multiline':True]['text':' don't call edit() now','line_number':7518,'multiline':False]