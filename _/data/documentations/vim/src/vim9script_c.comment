['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * vim9script.c: :vim9script, :import, :export and friends
 ','line_number':10,'multiline':True]['text':' When not generating protos this is included in proto.h','line_number':16,'multiline':False]['text':'
 * Return TRUE when currently using Vim9 script syntax.
 * Does not go up the stack, a ":function" inside vim9script uses legacy
 * syntax.
 ','line_number':21,'multiline':True]['text':' "sc_version" is also set when compiling a ":def" function in legacy','line_number':29,'multiline':False]['text':' script.','line_number':30,'multiline':False]['text':'
 * Return TRUE when currently in a script with script version smaller than
 * "max_version" or command modifiers forced it.
 ','line_number':37,'multiline':True]['text':'
 * Return TRUE if the current script is Vim9 script.
 * This also returns TRUE in a legacy function in a Vim9 script.
 ','line_number':49,'multiline':True]['text':'
 * Clear Vim9 script-local variables and functions.
 ','line_number':63,'multiline':True]['text':' old imports and script variables are no longer valid','line_number':75,'multiline':False]['text':'
 * ":vim9script".
 ','line_number':80,'multiline':True]['text':' Reloading a script without the "noclear" argument: clear','line_number':124,'multiline':False]['text':' script-local variables and functions.','line_number':125,'multiline':False]['text':' Store the prefix with the script, it is used to find exported functions.','line_number':129,'multiline':False]['text':' No check for this being the first command, the information is not','line_number':143,'multiline':False]['text':' available.','line_number':144,'multiline':False]['text':'
 * When in Vim9 script give an error and return FAIL.
 ','line_number':150,'multiline':True]['text':' FALLTHROUGH','line_number':165,'multiline':False]['text':'
 * Return TRUE if "p" points at "#{", not "#{{".
 * Give an error message if not done already.
 * This avoids that using a legacy style #{} dictionary leads to difficult to
 * understand errors.
 ','line_number':179,'multiline':True]['text':'
 * Return TRUE if "p" points at a "#" not followed by one '{'.
 * Gives an error for using "#{", not for "#{{".
 * Does not check for white space.
 ','line_number':198,'multiline':True]['text':'
 * "++nr" and "--nr" commands.
 ','line_number':215,'multiline':True]['text':' This works like "nr += 1" or "nr -= 1".','line_number':232,'multiline':False]['text':' Add a '|' to avoid looking in the next line.','line_number':233,'multiline':False]['text':'
 * ":export cmd"
 ','line_number':248,'multiline':True]['text':' can only get here when "export" wasn't caught in do_cmdline()','line_number':254,'multiline':False]['text':'
 * Add a new imported item entry to the current script.
 ','line_number':258,'multiline':True]['text':'
 * Free the script variables from "sn_all_vars".
 ','line_number':269,'multiline':True]['text':' Free the variable.  Don't remove it from the hashtab, ht_array','line_number':290,'multiline':False]['text':' might change then.  hash_clear() takes care of it later.','line_number':291,'multiline':False]['text':' existing commands using script variable indexes are no longer valid','line_number':315,'multiline':False]['text':'
 * Free all imported items in script "sid".
 ','line_number':319,'multiline':True]['text':'
 * Mark all imports as possible to redefine.  Used when a script is loaded
 * again but not cleared.
 ','line_number':341,'multiline':True]['text':'
 * Part of "import" that handles a relative or absolute file name/
 * Returns OK or FAIL.
 ','line_number':359,'multiline':True]['text':' Script does not exist yet, check name and create a new','line_number':375,'multiline':False]['text':' scriptitem.','line_number':376,'multiline':False]['text':' with testing override: load autoload script right away','line_number':394,'multiline':False]['text':'
 * Handle an ":import" command and add the resulting imported_T to "gap", when
 * not NULL, or script "import_sid" sn_imports.
 * "cctx" is NULL at the script level.
 * Returns a pointer to after the command or NULL in case of failure
 ','line_number':401,'multiline':True]['text':' The name of the file can be an expression, which must evaluate to a','line_number':435,'multiline':False]['text':' string.','line_number':436,'multiline':False]['text':' Give error messages for the start of the line.','line_number':447,'multiline':False]['text':'
     * find script file
     ','line_number':450,'multiline':True]['text':' Relative to current script: "./name.vim", "../../name.vim".','line_number':460,'multiline':False]['text':' On MS-Windows omitting the drive is still handled like an','line_number':475,'multiline':False]['text':' absolute path, not using 'runtimepath'.','line_number':476,'multiline':False]['text':' Absolute path: "/tmp/name.vim"','line_number':481,'multiline':False]['text':' Find file in "autoload" subdirs in 'runtimepath'.','line_number':489,'multiline':False]['text':' we need a scriptitem without loading the script','line_number':494,'multiline':False]['text':' testing override: load autoload script right away','line_number':505,'multiline':False]['text':' Find file in "import" subdirs in 'runtimepath'.','line_number':516,'multiline':False]['text':' encountering same script first time on a reload is OK','line_number':548,'multiline':False]['text':' Allow for the "as Name" to be in the next line.','line_number':557,'multiline':False]['text':' Skip over "as Name "; no line break allowed after "as".','line_number':568,'multiline':False]['text':' Do not allow for ':' and '#'.','line_number':569,'multiline':False]['text':'
 * ":import 'filename'"
 * ":import 'filename' as Name"
 ','line_number':640,'multiline':True]['text':'
 * When a script is a symlink it may be imported with one name and sourced
 * under another name.  Adjust the import script ID if needed.
 * "*sid" must be a valid script ID.
 ','line_number':664,'multiline':True]['text':'
 * Find an exported item in "sid" matching "name".
 * Either "cctx" or "cstack" is NULL.
 * When it is a variable return the index.
 * When it is a user function return "*ufunc".
 * When not found returns -1 and "*ufunc" is NULL.
 ','line_number':678,'multiline':True]['text':' Find name in "script".','line_number':710,'multiline':False]['text':' It could be a user function.  Normally this is stored as','line_number':729,'multiline':False]['text':' "<SNR>99_name".  For an autoload script a function is stored with','line_number':730,'multiline':False]['text':' the autoload prefix: "dir#script#name".','line_number':731,'multiline':False]['text':' try find the function by the script-local name','line_number':766,'multiline':False]['text':'
 * Declare a script-local variable without init: "var name: type".
 * "const" is an error since the value is missing.
 * Returns a pointer to after the type.
 ','line_number':792,'multiline':True]['text':' Check for valid starting character.','line_number':815,'multiline':False]['text':' parse type, check for reserved name','line_number':838,'multiline':False]['text':' Create the variable with 0/NULL value.','line_number':847,'multiline':False]['text':' A variable of type "any" is not possible, just use zero instead','line_number':850,'multiline':False]['text':'
 * Vim9 part of adding a script variable: add it to sn_all_vars (lookup by name
 * with a hashtable) and sn_var_vals (lookup by index).
 * When "create" is TRUE this is a new variable, otherwise find and update an
 * existing variable.
 * "flags" can have ASSIGN_FINAL, ASSIGN_CONST or ASSIGN_INIT.
 * When "*type" is NULL use "tv" for the type and update "*type".  If
 * "do_member" is TRUE also use the member type, otherwise use "any".
 ','line_number':860,'multiline':True]['text':' Store a pointer to the typval_T, so that it can be found by index','line_number':888,'multiline':False]['text':' instead of using a hastab lookup.','line_number':889,'multiline':False]['text':' Variable with this name exists, either in this block or in','line_number':896,'multiline':False]['text':' another block.','line_number':897,'multiline':False]['text':' variable defined in a loop, re-use the entry','line_number':902,'multiline':False]['text':' unhide the variable','line_number':905,'multiline':False]['text':' Variable not defined or not defined in current block: Add a','line_number':921,'multiline':False]['text':' svar_T and create a new sallvar_T.','line_number':922,'multiline':False]['text':' a pointer to the first char avoids a FORTIFY_SOURCE problem','line_number':937,'multiline':False]['text':' new variable name','line_number':944,'multiline':False]['text':' existing name in a new block, append to the list','line_number':948,'multiline':False]['text':' "var b: blob = null_blob" has a different type.','line_number':965,'multiline':False]['text':' The type probably uses uf_type_list, which is cleared when the','line_number':973,'multiline':False]['text':' function is freed, but the script variable may keep the type.','line_number':974,'multiline':False]['text':' Make a copy to avoid using freed memory.','line_number':975,'multiline':False]['text':' let ex_export() know the export worked.','line_number':986,'multiline':False]['text':'
 * Hide a script variable when leaving a block.
 * "idx" is de index in sn_var_vals.
 * When "func_defined" is non-zero then a function was defined in this block,
 * the variable may be accessed by it.  Otherwise the variable can be cleared.
 ','line_number':990,'multiline':True]['text':' Remove a variable declared inside the block, if it still exists.','line_number':1005,'multiline':False]['text':' If it was added in a nested block it will already have been removed.','line_number':1006,'multiline':False]['text':' The typval is moved into the sallvar_T.','line_number':1007,'multiline':False]['text':' There can be multiple entries with the same name in different','line_number':1018,'multiline':False]['text':' blocks, find the right one.','line_number':1019,'multiline':False]['text':' move the typval from the dictitem to the sallvar','line_number':1030,'multiline':False]['text':'
 * Find the script-local variable that links to "dest".
 * If "sid" is zero use the current script.
 * if "must_find" is TRUE and "dest" cannot be found report an internal error.
 * Returns NULL if not found and give an internal error.
 ','line_number':1049,'multiline':True]['text':' legacy script doesn't store variable types','line_number':1062,'multiline':False]['text':' Find the svar_T in sn_var_vals.  Start at the end, in a for loop the','line_number':1065,'multiline':False]['text':' variable was added at the end.','line_number':1066,'multiline':False]['text':' If "sv_name" is NULL the variable was hidden when leaving a block,','line_number':1071,'multiline':False]['text':' don't check "sv_tv" then, it might be used for another variable now.','line_number':1072,'multiline':False]['text':'
 * Check if the type of script variable "dest" allows assigning "value".
 * If needed convert "value" to a bool.
 ','line_number':1081,'multiline':True]['text':' words that cannot be used as a variable','line_number':1112,'multiline':False]['text':' FEAT_EVAL','line_number':1145,'multiline':False]