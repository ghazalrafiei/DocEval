['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * ex_getln.c: Functions for entering and editing an Ex command line.
 ','line_number':10,'multiline':True]['text':' Return value when handling keys in command-line mode.','line_number':20,'multiline':False]['text':' The current cmdline_info.  It is initialized in getcmdline() and after that','line_number':26,'multiline':False]['text':' used by other functions.  When invoking getcmdline() recursively it needs','line_number':27,'multiline':False]['text':' to be saved with save_cmdline() and restored with restore_cmdline().','line_number':28,'multiline':False]['text':' position set by set_cmdline_pos()','line_number':32,'multiline':False]['text':' extra character to display when redrawing','line_number':35,'multiline':False]['text':' the command line','line_number':36,'multiline':False]['text':' Hebrew mapping during command line','line_number':40,'multiline':False]['text':' key value of 'cedit' option','line_number':60,'multiline':False]['text':'
 * Abandon the command line.
 ','line_number':72,'multiline':True]['text':'
 * Guess that the pattern matches everything.  Only finds specific cases, such
 * as a trailing \|, which can happen while typing a pattern.
 ','line_number':86,'multiline':True]['text':' remove trailing \v and the like','line_number':107,'multiline':False]['text':' true, if the pattern is empty, or the pattern ends with \| and magic is','line_number':112,'multiline':False]['text':' set (or it ends with '|' and very magic is set)','line_number':113,'multiline':False]['text':' Struct to store the viewstate during 'incsearch' highlighting.','line_number':121,'multiline':False]['text':' Struct to store the state of 'incsearch' highlighting.','line_number':162,'multiline':False]['text':' where 'incsearch' starts searching','line_number':164,'multiline':False]['text':' window where this state is valid','line_number':166,'multiline':False]['text':' may be restored later','line_number':185,'multiline':False]['text':'
 * First move cursor to end of match, then to the start.  This
 * moves the whole match onto the screen when 'nowrap' is set.
 ','line_number':191,'multiline':True]['text':'
 * Return TRUE when 'incsearch' highlighting is to be done.
 * Sets search_first_line and search_last_line to the address range.
 * May change the last search pattern.
 ','line_number':207,'multiline':True]['text':' by default search all lines','line_number':239,'multiline':False]['text':' Skip over "substitute" to find the pattern separator.','line_number':264,'multiline':False]['text':' skip over ! and flags','line_number':282,'multiline':False]['text':' skip over "!"','line_number':296,'multiline':False]['text':' Don't do 'hlsearch' highlighting if the pattern matches everything.','line_number':319,'multiline':False]['text':' found a non-empty pattern or //','line_number':332,'multiline':False]['text':' parse the address range','line_number':336,'multiline':False]['text':' Allow for reverse match.','line_number':342,'multiline':False]['text':' :s defaults to the current line','line_number':356,'multiline':False]['text':' put the '" mark at the original position','line_number':384,'multiline':False]['text':' by default search all lines','line_number':393,'multiline':False]['text':' needed for TAB','line_number':399,'multiline':False]['text':'
 * Do 'incsearch' highlighting if desired.
 ','line_number':406,'multiline':True]['text':' do_search() result','line_number':416,'multiline':False]['text':' Parsing range may already set the last search pattern.','line_number':426,'multiline':False]['text':' NOTE: must call restore_last_search_pattern() before returning!','line_number':427,'multiline':False]['text':' may have skipped a redraw, do it now','line_number':436,'multiline':False]['text':' If there is a character waiting, search and redraw later.','line_number':441,'multiline':False]['text':' start at the original cursor position','line_number':451,'multiline':False]['text':' start after the last line','line_number':455,'multiline':False]['text':' start at the first line in the range','line_number':461,'multiline':False]['text':' Use the previous pattern for ":s//".','line_number':466,'multiline':False]['text':' If there is no pattern, don't do anything.','line_number':471,'multiline':False]['text':' turn off previous highlight','line_number':475,'multiline':False]['text':' so the user knows we're busy','line_number':482,'multiline':False]['text':' so it doesn't beep if bad expr','line_number':484,'multiline':False]['text':' Set the time limit to half a second.','line_number':492,'multiline':False]['text':' match outside of address range','line_number':509,'multiline':False]['text':' if interrupted while searching, behave like it failed','line_number':514,'multiline':False]['text':' remove <C-C> from input stream','line_number':517,'multiline':False]['text':' don't abandon the command line','line_number':518,'multiline':False]['text':' cancelled searching because a char was typed','line_number':522,'multiline':False]['text':' highlight position','line_number':526,'multiline':False]['text':' remove highlight','line_number':528,'multiline':False]['text':' First restore the old curwin values, so the screen is positioned in the','line_number':530,'multiline':False]['text':' same way as the actual search command.','line_number':531,'multiline':False]['text':' shutup gcc 4','line_number':548,'multiline':False]['text':' Disable 'hlsearch' highlighting if the pattern matches everything.','line_number':550,'multiline':False]['text':' Avoids a flash when typing "foo\|".','line_number':551,'multiline':False]['text':' May redraw the status line to show the cursor position.','line_number':567,'multiline':False]['text':' Leave it at the end to make CTRL-R CTRL-W work.  But not when beyond the','line_number':575,'multiline':False]['text':' end of the pattern, e.g. for ":s/pat/".','line_number':576,'multiline':False]['text':'
 * May adjust 'incsearch' highlighting for typing CTRL-G and CTRL-T, go to next
 * or previous match.
 * Returns FAIL when jumping to cmdline_not_changed;
 ','line_number':587,'multiline':True]['text':' Parsing range may already set the last search pattern.','line_number':607,'multiline':False]['text':' NOTE: must call restore_last_search_pattern() before returning!','line_number':608,'multiline':False]['text':' Start searching at the end of the match not at the beginning of','line_number':643,'multiline':False]['text':' the next column.','line_number':644,'multiline':False]['text':' Move just before the current match, so that when nv_search','line_number':667,'multiline':False]['text':' finishes the cursor will be put back on the match.','line_number':668,'multiline':False]['text':' Move just after the current match, so that when nv_search','line_number':674,'multiline':False]['text':' finishes the cursor will be put back on the match.','line_number':675,'multiline':False]['text':' wrap around','line_number':681,'multiline':False]['text':'
 * When CTRL-L typed: add character from the match to the pattern.
 * May set "*c" to the added character.
 * Return OK when jumping to cmdline_not_changed.
 ','line_number':707,'multiline':True]['text':' Parsing range may already set the last search pattern.','line_number':717,'multiline':False]['text':' NOTE: must call restore_last_search_pattern() before returning!','line_number':718,'multiline':False]['text':' Add a character from under the cursor for 'incsearch'.','line_number':729,'multiline':False]['text':' If 'ignorecase' and 'smartcase' are set and the','line_number':736,'multiline':False]['text':' command line has no uppercase characters, convert','line_number':737,'multiline':False]['text':' the character to lowercase.','line_number':738,'multiline':False]['text':' put a backslash before special characters','line_number':744,'multiline':False]['text':' add any composing characters','line_number':748,'multiline':False]['text':'
 * Return TRUE if the command line has an Arabic character at or after "start"
 * for "len" bytes.
 ','line_number':769,'multiline':True]['text':'
 * Handle CTRL-\ pressed in Command-line mode:
 * - CTRL-\ CTRL-N goes to Normal mode
 * - CTRL-\ CTRL-G goes to Insert mode when 'insertmode' is set
 * - CTRL-\ e prompts for an expression.
 ','line_number':803,'multiline':True]['text':' CTRL-\ e doesn't work when obtaining an expression, unless it','line_number':818,'multiline':False]['text':' is in a mapping.','line_number':819,'multiline':False]['text':'
	 * Replace the command line with the result of an expression.
	 * This will call getcmdline() recursively in get_expr_register().
	 ','line_number':837,'multiline':True]['text':' keep it at the end','line_number':842,'multiline':False]['text':' Evaluate the expression.  Set "textlock" to avoid nasty things','line_number':849,'multiline':False]['text':' like going to another buffer.','line_number':850,'multiline':False]['text':' Restore the cursor or use the position set with','line_number':864,'multiline':False]['text':' set_cmdline_pos().','line_number':865,'multiline':False]['text':' Don't do p_wc completion.','line_number':871,'multiline':False]['text':' don't abandon the command line','line_number':879,'multiline':False]['text':' will free ccline.cmdbuff after putting it','line_number':889,'multiline':False]['text':' in history','line_number':890,'multiline':False]['text':'
 * Completion for 'wildchar' or 'wildcharm' key.
 * - hitting <ESC> twice means: abandon command line.
 * - wildcard expansion is only done when the 'wildchar' key is really
 *   typed, not when it comes from a macro
 * Returns CMDLINE_CHANGED if command line is changed or CMDLINE_NOT_CHANGED.
 ','line_number':894,'multiline':True]['text':' typed p_wc at least twice','line_number':917,'multiline':False]['text':' if 'wildmode' contains "list" may still need to list','line_number':919,'multiline':False]['text':' don't insert 'wildchar' now','line_number':935,'multiline':False]['text':' typed p_wc first time','line_number':937,'multiline':False]['text':' if 'wildmode' first contains "longest", get longest','line_number':941,'multiline':False]['text':' common part','line_number':942,'multiline':False]['text':' if interrupted while completing, behave like it failed','line_number':948,'multiline':False]['text':' remove <C-C> from input stream','line_number':951,'multiline':False]['text':' don't abandon the command line','line_number':952,'multiline':False]['text':' when more than one match, and 'wildmode' first contains','line_number':959,'multiline':False]['text':' "list", or no change and 'wildmode' contains "longest,list",','line_number':960,'multiline':False]['text':' list all matches','line_number':961,'multiline':False]['text':' a "longest" that didn't do anything is skipped (but not','line_number':964,'multiline':False]['text':' "list:longest")','line_number':965,'multiline':False]['text':' remove match','line_number':977,'multiline':False]['text':'
 * Handle backspace, delete and CTRL-W keys in the command-line mode.
 * Returns:
 *  CMDLINE_NOT_CHANGED - if the command line is not changed
 *  CMDLINE_CHANGED - if the command line is changed
 *  GOTO_NORMAL_MODE - go back to normal mode
 ','line_number':1005,'multiline':True]['text':'
     * Delete current character is the same as backspace on next
     * character, except at end of line.
     ','line_number':1027,'multiline':True]['text':' Truncate at the end, required for multi-byte chars.','line_number':1076,'multiline':False]['text':' save view settings, so that the screen','line_number':1082,'multiline':False]['text':' won't be restored at the wrong position','line_number':1083,'multiline':False]['text':' In ex and debug mode it doesn't make sense to return.','line_number':1092,'multiline':False]['text':' no commandline to return','line_number':1100,'multiline':False]['text':' delete ':'','line_number':1109,'multiline':False]['text':'
 * Handle the CTRL-^ key in the command-line mode and toggle the use of the
 * language :lmap mappings and/or Input Method.
 ','line_number':1121,'multiline':True]['text':' ":lmap" mappings exists, toggle use of mappings.','line_number':1130,'multiline':False]['text':' Disable input method','line_number':1133,'multiline':False]['text':' There are no ":lmap" mappings, toggle IM.  When','line_number':1146,'multiline':False]['text':' 'imdisable' is set don't try getting the status, it's','line_number':1147,'multiline':False]['text':' always off.','line_number':1148,'multiline':False]['text':' Disable input method','line_number':1152,'multiline':False]['text':' Enable input method','line_number':1158,'multiline':False]['text':' may show different cursor shape','line_number':1172,'multiline':False]['text':' Show/unshow value of 'keymap' in status lines later.','line_number':1175,'multiline':False]['text':'
 * Handle the CTRL-R key in the command-line mode and insert the contents of a
 * numbered or named register.
 ','line_number':1180,'multiline':True]['text':' disallow scrolling here','line_number':1195,'multiline':False]['text':' CTRL-R <char>','line_number':1200,'multiline':False]['text':' CTRL-R CTRL-O == CTRL-R CTRL-R','line_number':1202,'multiline':False]['text':' CTRL-R CTRL-R <char>','line_number':1204,'multiline':False]['text':'
     * Insert the result of an expression.
     ','line_number':1209,'multiline':True]['text':' can't do this recursively','line_number':1215,'multiline':False]['text':' or when typing a password','line_number':1216,'multiline':False]['text':' use ESC to cancel inserting register','line_number':1225,'multiline':False]['text':' When there was a serious error abort getting the','line_number':1236,'multiline':False]['text':' command line.','line_number':1237,'multiline':False]['text':' will free ccline.cmdbuff after','line_number':1240,'multiline':False]['text':' putting it in history','line_number':1241,'multiline':False]['text':' Don't do p_wc completion.','line_number':1245,'multiline':False]['text':' set_cmdline_pos() was used','line_number':1249,'multiline':False]['text':' remove the double quote','line_number':1261,'multiline':False]['text':' With "literally": the command line has already changed.','line_number':1264,'multiline':False]['text':' Else: the text has been stuffed, but the command line didn't change yet.','line_number':1265,'multiline':False]['text':'
 * Handle the Left and Right mouse clicks in the command-line mode.
 ','line_number':1269,'multiline':True]['text':' When GUI is active, also move when 'mouse' is empty','line_number':1280,'multiline':False]['text':'
	 * Handle modeless selection.
	 ','line_number':1290,'multiline':True]['text':' Translate shift-left to right button.','line_number':1298,'multiline':False]['text':' Count ">" for double-wide char that doesn't fit.','line_number':1319,'multiline':False]['text':'
 * Handle the Up, Down, Page Up, Page down, CTRL-N and CTRL-P key in the
 * command-line mode. The pressed key is in 'c'.
 * Returns:
 *  CMDLINE_NOT_CHANGED - if the command line is not changed
 *  CMDLINE_CHANGED - if the command line is changed
 *  GOTO_NORMAL_MODE - go back to normal mode
 ','line_number':1328,'multiline':True]['text':' no history','line_number':1351,'multiline':False]['text':' save current command string so it can be restored later','line_number':1356,'multiline':False]['text':' one step backwards','line_number':1367,'multiline':False]['text':' first time','line_number':1371,'multiline':False]['text':' at top of list','line_number':1378,'multiline':False]['text':' one step forwards','line_number':1384,'multiline':False]['text':' on last entry, clear the line','line_number':1386,'multiline':False]['text':' not on a history line, nothing to do','line_number':1393,'multiline':False]['text':' wrap around','line_number':1396,'multiline':False]['text':' jumped to other entry','line_number':1414,'multiline':False]['text':' back to the old one','line_number':1423,'multiline':False]['text':' Correct for the separator character used when','line_number':1431,'multiline':False]['text':' adding the history entry vs the one used now.','line_number':1432,'multiline':False]['text':' First loop: count length.','line_number':1433,'multiline':False]['text':' Second loop: copy the characters.','line_number':1434,'multiline':False]['text':' Replace old sep with new sep, unless it is','line_number':1440,'multiline':False]['text':' escaped.','line_number':1441,'multiline':False]['text':' Escape new sep, unless it is already','line_number':1450,'multiline':False]['text':' escaped.','line_number':1451,'multiline':False]['text':'
 * Initialize the current command-line info.
 ','line_number':1501,'multiline':True]['text':' always start in insert mode','line_number':1507,'multiline':False]['text':'
     * set some variables for redrawcmd()
     ','line_number':1509,'multiline':True]['text':' alloc initial ccline.cmdbuff','line_number':1515,'multiline':False]['text':' autoindent for :insert and :append','line_number':1523,'multiline':False]['text':'
 * getcmdline() - accept a command line starting with firstc.
 *
 * firstc == ':'	    get ":" command line.
 * firstc == '/' or '?'	    get search pattern
 * firstc == '='	    get expression
 * firstc == '@'	    get text for input() function
 * firstc == '>'	    get text for debug mode
 * firstc == NUL	    get text for :insert command
 * firstc == -1		    like NUL, and break on CTRL-C
 *
 * The line is collected in ccline.cmdbuff, which is reallocated to fit the
 * command line.
 *
 * Careful: getcmdline() can be called recursively!
 *
 * Return pointer to allocated string if there is a commandline, NULL
 * otherwise.
 ','line_number':1536,'multiline':True]['text':' only used for incremental search','line_number':1558,'multiline':False]['text':' indent for inside conditionals','line_number':1559,'multiline':False]['text':' only used for incremental search','line_number':1568,'multiline':False]['text':' indent for inside conditionals','line_number':1569,'multiline':False]['text':' clear ccline first','line_number':1570,'multiline':False]['text':' call depth','line_number':1572,'multiline':False]['text':' TRUE when <ESC> just typed','line_number':1576,'multiline':False]['text':' when TRUE check for abbr.','line_number':1577,'multiline':False]['text':' string to match','line_number':1578,'multiline':False]['text':' current history line in use','line_number':1579,'multiline':False]['text':' history type to be used','line_number':1580,'multiline':False]['text':' did wild_list() recently','line_number':1584,'multiline':False]['text':' index in wim_flags[]','line_number':1585,'multiline':False]['text':' remember State when called','line_number':1588,'multiline':False]['text':' one of the keys was typed','line_number':1589,'multiline':False]['text':' mouse drag and release events are ignored, unless they are','line_number':1590,'multiline':False]['text':' preceded with a mouse down event','line_number':1591,'multiline':False]['text':' buffer where b_im_ptr is valid','line_number':1598,'multiline':False]['text':' one recursion level deeper','line_number':1604,'multiline':False]['text':' Being called recursively.  Since ccline is global, we need to save','line_number':1609,'multiline':False]['text':' the current buffer and restore it when returning.','line_number':1610,'multiline':False]['text':' start without Hebrew mapping for a command line','line_number':1625,'multiline':False]['text':' out of memory','line_number':1635,'multiline':False]['text':' Somehow got into a loop recursively calling getcmdline(), bail out.','line_number':1639,'multiline':False]['text':' don't redirect the typed command','line_number':1655,'multiline':False]['text':' avoid wait_return() message','line_number':1659,'multiline':False]['text':' draw prompt or indent','line_number':1662,'multiline':False]['text':'
     * Avoid scrolling when called by a recursive do_cmdline(), e.g. when
     * doing ":@0" when register 0 doesn't contain a CR.
     ','line_number':1680,'multiline':True]['text':' Use ":lmap" mappings for search pattern and input().','line_number':1690,'multiline':False]['text':' may show different cursor shape','line_number':1709,'multiline':False]['text':' When inside an autocommand for writing "exiting" may be set and','line_number':1712,'multiline':False]['text':' terminal mode set to cooked.  Need to set raw mode here then.','line_number':1713,'multiline':False]['text':' Trigger CmdlineEnter autocommands.','line_number':1716,'multiline':False]['text':' set hiscnt to impossible history value','line_number':1725,'multiline':False]['text':' init digraph typeahead','line_number':1729,'multiline':False]['text':' If something above caused an error, reset the flags, we do want to type','line_number':1732,'multiline':False]['text':' and execute commands. Display may be messed up a bit.','line_number':1733,'multiline':False]['text':' Redraw the statusline in case it uses the current mode using the mode()','line_number':1738,'multiline':False]['text':' function.','line_number':1739,'multiline':False]['text':'
     * Collect the command string, handling editing keys.
     ','line_number':1766,'multiline':True]['text':' Don't redirect the typed command.','line_number':1774,'multiline':False]['text':' Repeated, because a ":redir" inside','line_number':1775,'multiline':False]['text':' completion may switch it on.','line_number':1776,'multiline':False]['text':' allow scrolling here','line_number':1778,'multiline':False]['text':' reset after CTRL-D which had a more-prompt','line_number':1780,'multiline':False]['text':' There can't really be a reason why an error','line_number':1782,'multiline':False]['text':' that occurs while typing a command should','line_number':1783,'multiline':False]['text':' cause the command not to be executed.','line_number':1784,'multiline':False]['text':' Trigger SafeState if nothing is pending.','line_number':1786,'multiline':False]['text':' Get a character.  Ignore K_IGNORE and K_NOP, they should not do','line_number':1789,'multiline':False]['text':' anything, such as stop completion.','line_number':1790,'multiline':False]['text':' set the cursor on the right spot','line_number':1793,'multiline':False]['text':' Do not trigger CmdlineChanged below if:','line_number':1804,'multiline':False]['text':' - the length of the command line didn't change','line_number':1805,'multiline':False]['text':' - the <Cmd> mapping already triggered the event','line_number':1806,'multiline':False]['text':' Invert horizontal movements and operations.  Only when','line_number':1822,'multiline':False]['text':' typed by the user directly, not when the result of a','line_number':1823,'multiline':False]['text':' mapping.','line_number':1824,'multiline':False]['text':'
	 * Ignore got_int when CTRL-C was typed here.
	 * Don't ignore it in :global, we really need to break then, e.g., for
	 * ":g/pat/normal /pat" (without the <CR>).
	 * Don't ignore it for the input() function.
	 ','line_number':1838,'multiline':True]['text':' do clear got_int in Ex mode to avoid infinite Ctrl-C loop','line_number':1853,'multiline':False]['text':' free old command line when finished moving around in the history','line_number':1859,'multiline':False]['text':' list','line_number':1860,'multiline':False]['text':'
	 * When there are matching completions to select <S-Tab> works like
	 * CTRL-P (unless 'wc' is <S-Tab>).
	 ','line_number':1870,'multiline':True]['text':' Ctrl-Y: Accept the current selection and close the popup menu.','line_number':1883,'multiline':False]['text':' Ctrl-E: cancel the cmdline popup menu and return the original','line_number':1884,'multiline':False]['text':' text.','line_number':1885,'multiline':False]['text':' The wildmenu is cleared if the pressed key is not used for','line_number':1895,'multiline':False]['text':' navigating the wild menu (i.e. the key is not 'wildchar' or','line_number':1896,'multiline':False]['text':' 'wildcharm' or Ctrl-N or Ctrl-P or Ctrl-A or Ctrl-L).','line_number':1897,'multiline':False]['text':' If the popup menu is displayed, then PageDown and PageUp keys are','line_number':1898,'multiline':False]['text':' also used to navigate the menu.','line_number':1899,'multiline':False]['text':' free expanded names when finished walking through matches','line_number':1906,'multiline':False]['text':' CTRL-\ CTRL-N goes to Normal mode, CTRL-\ CTRL-G goes to Insert','line_number':1923,'multiline':False]['text':' mode when 'insertmode' is set, CTRL-\ e prompts for an expression.','line_number':1924,'multiline':False]['text':' back to cmd mode','line_number':1933,'multiline':False]['text':' backslash key not processed by','line_number':1934,'multiline':False]['text':' cmdline_handle_ctrl_bsl()','line_number':1935,'multiline':False]['text':' TODO: why is ex_normal_busy checked here?','line_number':1940,'multiline':False]['text':'
		 * Open a window to edit the command line (and history).
		 ','line_number':1943,'multiline':True]['text':' In Ex mode a backslash escapes a newline.','line_number':1958,'multiline':False]['text':' Might have typed ESC previously, don't','line_number':1970,'multiline':False]['text':' truncate the cmdline now.','line_number':1971,'multiline':False]['text':' Completion for 'wildchar' or 'wildcharm' key.','line_number':1983,'multiline':False]['text':' <S-Tab> goes to last match, in a clumsy way','line_number':1994,'multiline':False]['text':' Trigger the popup menu when wildoptions=pum','line_number':2003,'multiline':False]['text':' NUL is stored as NL','line_number':2013,'multiline':False]['text':' default: check for abbreviation','line_number':2016,'multiline':False]['text':' If already used to cancel/accept wildmenu, don't process the key','line_number':2018,'multiline':False]['text':' further.','line_number':2019,'multiline':False]['text':'
	 * Big switch for a typed command line character.
	 ','line_number':2026,'multiline':True]['text':' back to cmd mode','line_number':2044,'multiline':False]['text':' may show different cursor shape','line_number':2051,'multiline':False]['text':'	case '@':   only in very old vi','line_number':2063,'multiline':False]['text':' delete all characters left of the cursor','line_number':2065,'multiline':False]['text':' Truncate at the end, required for multi-byte chars.','line_number':2071,'multiline':False]['text':' Copy the modeless selection, if there is one.','line_number':2082,'multiline':False]['text':' get here if p_wc != ESC or when ESC typed twice','line_number':2092,'multiline':False]['text':' In exmode it doesn't make sense to return.  Except when','line_number':2094,'multiline':False]['text':' ":normal" runs out of characters.','line_number':2095,'multiline':False]['text':' will free ccline.cmdbuff after','line_number':2100,'multiline':False]['text':' putting it in history','line_number':2101,'multiline':False]['text':' back to cmd mode','line_number':2102,'multiline':False]['text':' insert register','line_number':2104,'multiline':False]['text':' Use ^D as normal char instead','line_number':2114,'multiline':False]['text':' don't do incremental search now','line_number':2117,'multiline':False]['text':' move to first byte of char','line_number':2151,'multiline':False]['text':' Ignore mouse event or open_cmdwin() result.','line_number':2165,'multiline':False]['text':' On MS-Windows ignore <M-F4>, we get it when closing the window','line_number':2169,'multiline':False]['text':' was cancelled.','line_number':2170,'multiline':False]['text':' somehow the cmdline is cleared','line_number':2174,'multiline':False]['text':' Ignore mouse','line_number':2182,'multiline':False]['text':' When GUI is active, also paste when 'mouse' is empty','line_number':2186,'multiline':False]['text':' Ignore mouse','line_number':2190,'multiline':False]['text':' Ignore drag and release events when the button-down wasn't','line_number':2211,'multiline':False]['text':' seen before.','line_number':2212,'multiline':False]['text':' FALLTHROUGH','line_number':2215,'multiline':False]['text':' Mouse scroll wheel: ignored here','line_number':2221,'multiline':False]['text':' Alternate buttons ignored here','line_number':2226,'multiline':False]['text':' mousefocus click, ignored','line_number':2237,'multiline':False]['text':' Don't want to change any tabs here.  Make sure the same tab','line_number':2260,'multiline':False]['text':' is still selected.','line_number':2261,'multiline':False]['text':' end of Select mode mapping - ignore','line_number':2267,'multiline':False]['text':' begin of command line','line_number':2270,'multiline':False]['text':' end of command line','line_number':2279,'multiline':False]['text':' all matches','line_number':2288,'multiline':False]['text':' As Ctrl-A completes all the matches, close the popup','line_number':2290,'multiline':False]['text':' menu (if present)','line_number':2291,'multiline':False]['text':' completion: longest common part','line_number':2306,'multiline':False]['text':' next match','line_number':2311,'multiline':False]['text':' previous match','line_number':2312,'multiline':False]['text':' FALLTHROUGH','line_number':2320,'multiline':False]['text':' If the popup menu is displayed, then PageUp and PageDown','line_number':2333,'multiline':False]['text':' are used to scroll the menu.','line_number':2334,'multiline':False]['text':' next match','line_number':2354,'multiline':False]['text':' previous match','line_number':2355,'multiline':False]['text':' Get next (two) character(s).  Do not change any','line_number':2368,'multiline':False]['text':' modifyOtherKeys ESC sequence to a normal key for','line_number':2369,'multiline':False]['text':' CTRL-SHIFT-V.','line_number':2370,'multiline':False]['text':' don't do abbreviation now','line_number':2373,'multiline':False]['text':' may need to remove ^ when composing char was typed','line_number':2375,'multiline':False]['text':' disallow scrolling here','line_number':2392,'multiline':False]['text':' FEAT_DIGRAPHS','line_number':2401,'multiline':False]['text':' CTRL-_: switch language mode','line_number':2404,'multiline':False]['text':' will free ccline.cmdbuff after','line_number':2419,'multiline':False]['text':' putting it in history','line_number':2420,'multiline':False]['text':' back to Normal mode','line_number':2421,'multiline':False]['text':'
		 * Normal character with no special meaning.  Just set mod_mask
		 * to 0x0 so that typing Shift-Space in the GUI doesn't enter
		 * the string <S-Space>.  This should only happen after ^V.
		 ','line_number':2424,'multiline':True]['text':'
	 * End of switch on command line character.
	 * We come here if we have a normal character.
	 ','line_number':2433,'multiline':True]['text':' Add ABBR_OFF for characters above 0x100, this is','line_number':2440,'multiline':False]['text':' what check_abbr() expects.','line_number':2441,'multiline':False]['text':'
	 * put the character in the command line
	 ','line_number':2446,'multiline':True]['text':' exclude composing chars','line_number':2456,'multiline':False]['text':'
 * This part implements incremental searches for "/" and "?"
 * Jump to cmdline_not_changed when a character has been read but the command
 * line did not change. Then we only search and redraw if something changed in
 * the past.
 * Jump to cmdline_changed when the command line did change.
 * (Sorry for the goto's, I know it is ugly).
 ','line_number':2467,'multiline':True]['text':' If the window changed incremental search state is not valid.','line_number':2483,'multiline':False]['text':' Trigger CmdlineChanged autocommands.','line_number':2488,'multiline':False]['text':' Always redraw the whole command line to fix shaping and','line_number':2503,'multiline':False]['text':' right-left typing.  Not efficient, but it works.','line_number':2504,'multiline':False]['text':' Do it only when there are no characters left to read','line_number':2505,'multiline':False]['text':' to avoid useless intermediate redraws.','line_number':2506,'multiline':False]['text':' We could have reached here without having a chance to clean up wild menu','line_number':2518,'multiline':False]['text':' if certain special keys like <Esc> or <C-\> were used as wildchar. Make','line_number':2519,'multiline':False]['text':' sure to still clean up to avoid memory corruption.','line_number':2520,'multiline':False]['text':'
	 * Put line in history buffer (":" and "=" only when it was typed).
	 ','line_number':2536,'multiline':True]['text':'
     * If the screen was shifted up, redraw the whole screen (later).
     * If the line is too long, clear it, so ruler and shown command do
     * not get printed in the middle of it.
     ','line_number':2555,'multiline':True]['text':' When the command line was typed, no need for a wait-return prompt.','line_number':2564,'multiline':False]['text':' Trigger CmdlineLeave autocommands.','line_number':2568,'multiline':False]['text':' may show different cursor shape','line_number':2586,'multiline':False]['text':'
 * Get a command line with a prompt.
 * This is prepared to be called recursively from getcmdline() (e.g. by
 * f_input() when evaluating an expression from CTRL-R =).
 * Returns the command line in allocated memory, or NULL.
 ','line_number':2604,'multiline':True]['text':' command line prompt','line_number':2613,'multiline':False]['text':' attributes for prompt','line_number':2614,'multiline':False]['text':' type of expansion','line_number':2615,'multiline':False]['text':' user-defined expansion argument','line_number':2616,'multiline':False]['text':' Save the values of the current cmdline and restore them below.','line_number':2626,'multiline':False]['text':' Restore msg_col, the prompt from input() may have changed it.','line_number':2646,'multiline':False]['text':' But only if called recursively and the commandline is therefore being','line_number':2647,'multiline':False]['text':' restored to an old one; if not, the input() prompt stays on the screen,','line_number':2648,'multiline':False]['text':' so we need its modified msg_col left intact.','line_number':2649,'multiline':False]['text':'
 * Read the 'wildmode' option, fill wim_flags[].
 ','line_number':2657,'multiline':True]['text':' Note: Keep this in sync with p_wim_values.','line_number':2673,'multiline':False]['text':' fill remaining entries with last flag','line_number':2699,'multiline':False]['text':' only when there are no errors, wim_flags[] is changed','line_number':2706,'multiline':False]['text':'
 * Return TRUE when the text must not be changed and we can't switch to
 * another window or buffer.  TRUE when editing the command line, evaluating
 * 'balloonexpr', etc.
 ','line_number':2712,'multiline':True]['text':'
 * Give an error message for a command that isn't allowed while the cmdline
 * window is open or editing the cmdline in another way.
 ','line_number':2725,'multiline':True]['text':'
 * Check for text, window or buffer locked.
 * Give an error message and return TRUE if something is locked.
 ','line_number':2743,'multiline':True]['text':'
 * Check if "curbuf_lock" or "allbuf_lock" is set and return TRUE when it is
 * and give an error message.
 ','line_number':2758,'multiline':True]['text':'
 * Check if "allbuf_lock" is set and return TRUE when it is and give an error
 * message.
 ','line_number':2773,'multiline':True]['text':' showing '*', always 1 position','line_number':2792,'multiline':False]['text':'
 * Compute the offset of the cursor on the command line for the prompt and
 * indent.
 ','line_number':2798,'multiline':True]['text':'
 * Compute the screen position for the cursor on the command line.
 ','line_number':2811,'multiline':True]['text':' overflow, Columns or Rows at weird value','line_number':2823,'multiline':False]['text':' Count ">" for double-wide multi-byte char that doesn't fit.','line_number':2831,'multiline':False]['text':' If the cmdline doesn't fit, show cursor on last visible char.','line_number':2834,'multiline':False]['text':' Don't move the cursor itself, so we can still append.','line_number':2835,'multiline':False]['text':'
 * Check if the character at "idx", which is "cells" wide, is a multi-byte
 * character that doesn't fit, so that a ">" must be displayed.
 ','line_number':2846,'multiline':True]['text':'
 * Get an Ex command line for the ":" command.
 ','line_number':2859,'multiline':True]['text':' normally ':', NUL for ":append"','line_number':2864,'multiline':False]['text':' indent for inside conditionals','line_number':2866,'multiline':False]['text':' When executing a register, remove ':' that's in front of each line.','line_number':2869,'multiline':False]['text':'
 * Get an Ex command line for Ex mode.
 * In Ex mode we only use the OS supplied line editing features and no
 * mappings or abbreviations.
 * Returns a string in allocated memory or NULL.
 ','line_number':2875,'multiline':True]['text':' normally ':', NUL for ":append" and '?' for','line_number':2883,'multiline':False]['text':' :s prompt','line_number':2884,'multiline':False]['text':' indent for inside conditionals','line_number':2886,'multiline':False]['text':' CTRL-V typed','line_number':2893,'multiline':False]['text':' Switch cursor on now.  This avoids that it happens after the "\n", which','line_number':2899,'multiline':False]['text':' confuses the system function that computes tabstops.','line_number':2900,'multiline':False]['text':' always start in column 0; write a newline if necessary','line_number':2903,'multiline':False]['text':' indent that is only displayed, not in the line itself','line_number':2909,'multiline':False]['text':' autoindent for :insert and :append is in the line itself','line_number':2919,'multiline':False]['text':'
     * Get the line, one character at a time.
     ','line_number':2938,'multiline':True]['text':' May request the keyboard protocol state now.','line_number':2947,'multiline':False]['text':'
	 * Get one character at a time.
	 ','line_number':2953,'multiline':True]['text':' Check for a ":normal" command and no more characters left.','line_number':2958,'multiline':False]['text':'
	 * Handle line editing.
	 * Previously this was left to the system, putting the terminal in
	 * cooked mode, but then CTRL-D and CTRL-T can't be used properly.
	 ','line_number':2964,'multiline':True]['text':' CR typed means "enter", which is NL','line_number':2983,'multiline':False]['text':' one more for the NUL','line_number':3024,'multiline':False]['text':' redraw the line','line_number':3032,'multiline':False]['text':' Delete one shiftwidth.','line_number':3061,'multiline':False]['text':' Ignore special key codes: mouse movement, K_IGNORE, etc.','line_number':3095,'multiline':False]['text':' Don't use chartabsize(), 'ts' can be different','line_number':3114,'multiline':False]['text':' We are done when a NL is entered, but not when it comes after an','line_number':3131,'multiline':False]['text':' odd number of backslashes, that results in a NUL.','line_number':3132,'multiline':False]['text':' Halve the number of backslashes: "\NL" -> "NUL", "\\NL" ->','line_number':3142,'multiline':False]['text':' "\NL", etc.','line_number':3143,'multiline':False]['text':' make following messages go to the next line','line_number':3162,'multiline':False]['text':' don't want ui_delay()','line_number':3167,'multiline':False]['text':'
 * Return TRUE if ccline.overstrike is on.
 ','line_number':3175,'multiline':True]['text':'
 * Return TRUE if the cursor is at the end of the cmdline.
 ','line_number':3186,'multiline':True]['text':'
 * Return the virtual column number at the current cursor position.
 * This is used by the IM code to obtain the start of the preedit string.
 ','line_number':3197,'multiline':True]['text':'
 * If part of the command line is an IM preedit string, redraw it with
 * IM feedback attributes.  The cursor position is restored after drawing.
 ','line_number':3223,'multiline':True]['text':' && im_get_status()  doesn't work when using SCIM','line_number':3232,'multiline':False]['text':' end of preedit string','line_number':3273,'multiline':False]['text':' FEAT_XIM && FEAT_GUI_GTK','line_number':3288,'multiline':False]['text':'
 * Allocate a new command line buffer.
 * Assigns the new buffer to ccline.cmdbuff and ccline.cmdbufflen.
 ','line_number':3290,'multiline':True]['text':'
     * give some extra space to avoid having to allocate all the time
     ','line_number':3297,'multiline':True]['text':' caller should check for out-of-memory','line_number':3305,'multiline':False]['text':'
 * Re-allocate the command line to length len + something extra.
 * return FAIL for failure, OK otherwise
 ','line_number':3309,'multiline':True]['text':' no need to resize','line_number':3319,'multiline':False]['text':' will get some more','line_number':3322,'multiline':False]['text':' out of memory','line_number':3323,'multiline':False]['text':' keep the old one','line_number':3325,'multiline':False]['text':' There isn't always a NUL after the command, but it may need to be','line_number':3328,'multiline':False]['text':' there, thus copy up to the NUL and add a NUL.','line_number':3329,'multiline':False]['text':' If xp_pattern points inside the old cmdbuff it needs to be adjusted','line_number':3341,'multiline':False]['text':' to point into the newly allocated memory.','line_number':3342,'multiline':False]['text':'
 * Draw part of the cmdline at the current cursor position.  But draw stars
 * when cmdline_star is TRUE.
 ','line_number':3362,'multiline':True]['text':'
	 * Do arabic shaping into a temporary buffer.  This is very
	 * inefficient!
	 ','line_number':3396,'multiline':True]['text':' Re-allocate the buffer.  We keep it around to avoid a lot of','line_number':3402,'multiline':False]['text':' alloc()/free() calls.','line_number':3403,'multiline':False]['text':' out of memory','line_number':3408,'multiline':False]['text':' Prepend a space to draw the leading composing char on.','line_number':3413,'multiline':False]['text':' Do Arabic shaping.','line_number':3425,'multiline':False]['text':' displaying from right to left','line_number':3428,'multiline':False]['text':' displaying from left to right','line_number':3439,'multiline':False]['text':'
 * Put a character on the command line.  Shifts the following text to the
 * right when "shift" is TRUE.  Used for CTRL-V, CTRL-K, etc.
 * "c" must be printable (fit in one display cell)!
 ','line_number':3480,'multiline':True]['text':'
 * Undo a putcmdline(c, FALSE).
 ','line_number':3500,'multiline':True]['text':'
 * Put the given string, of the given length, onto the command line.
 * If len is -1, then STRLEN() is used to calculate the length.
 * If 'redraw' is TRUE then the new part of the command line, and the remaining
 * part will be redrawn, otherwise it will not.  If this function is called
 * twice in a row, then 'redraw' should be FALSE and redrawcmd() should be
 * called afterwards.
 ','line_number':3521,'multiline':True]['text':' Check if ccline.cmdbuff needs to be longer','line_number':3540,'multiline':False]['text':' Count nr of characters in the new string.','line_number':3558,'multiline':False]['text':' Count nr of bytes in cmdline that are overwritten by these','line_number':3562,'multiline':False]['text':' characters.','line_number':3563,'multiline':False]['text':' When the inserted text starts with a composing character,','line_number':3584,'multiline':False]['text':' backup to the character before it.  There could be two of them.','line_number':3585,'multiline':False]['text':' Check the previous character for Arabic combining pair.','line_number':3599,'multiline':False]['text':' Also backup the cursor position.','line_number':3614,'multiline':False]['text':' Avoid clearing the rest of the line too often.','line_number':3632,'multiline':False]['text':' overflow, Columns or Rows at weird value','line_number':3640,'multiline':False]['text':' count ">" for a double-wide char that doesn't fit.','line_number':3648,'multiline':False]['text':' Stop cursor at the end of the screen, but do increment the','line_number':3651,'multiline':False]['text':' insert position, so that entering a very long command','line_number':3652,'multiline':False]['text':' works, even though you can't see it.','line_number':3653,'multiline':False]['text':'
 * Save ccline, because obtaining the "=" register may execute "normal :cmd"
 * and overwrite it.  But get_cmdline_str() may need it, thus make it
 * available globally in prev_ccline.
 ','line_number':3676,'multiline':True]['text':' signal that ccline is not in use','line_number':3691,'multiline':False]['text':'
 * Restore ccline after it has been saved with save_cmdline().
 ','line_number':3694,'multiline':True]['text':'
 * Paste a yank register into the command line.
 * Used by CTRL-R command in command-line mode.
 * insert_reg() can't be used here, because special characters from the
 * register contents will be interpreted as commands.
 *
 * Return FAIL for failure, OK otherwise.
 ','line_number':3704,'multiline':True]['text':' Insert text literally instead of "as typed"','line_number':3715,'multiline':False]['text':' remove trailing CR','line_number':3716,'multiline':False]['text':' check for valid regname; also accept special characters for CTRL-R in','line_number':3723,'multiline':False]['text':' the command line','line_number':3724,'multiline':False]['text':' A register containing CTRL-R can cause an endless loop.  Allow using','line_number':3730,'multiline':False]['text':' CTRL-C to break the loop.','line_number':3731,'multiline':False]['text':' Need to set "textlock" to avoid nasty things like going to another','line_number':3740,'multiline':False]['text':' buffer when evaluating an expression.','line_number':3741,'multiline':False]['text':' Got the value of a special register in "arg".','line_number':3748,'multiline':False]['text':' When 'incsearch' is set and CTRL-R CTRL-W used: skip the duplicate','line_number':3752,'multiline':False]['text':' part of the word.','line_number':3753,'multiline':False]['text':' Locate start of last word in the cmd buffer.','line_number':3760,'multiline':False]['text':'
 * Put a string on the command line.
 * When "literally" is TRUE, insert literally.
 * When "literally" is FALSE, insert as typed, but don't leave the command
 * line.
 ','line_number':3791,'multiline':True]['text':'
 * This function is called when the screen size changes and with incremental
 * search and in other situations where the command line may have been
 * overwritten.
 ','line_number':3825,'multiline':True]['text':'
 * When "do_compute_cmdrow" is TRUE the command line is redrawn at the bottom.
 * If FALSE cmdline_row is used, which should redraw in the same place.
 ','line_number':3836,'multiline':True]['text':' do the reverse of set_cmdspos()','line_number':3865,'multiline':False]['text':'
 * Redraw what is currently on the command line.
 ','line_number':3874,'multiline':True]['text':' when 'incsearch' is set there may be no command line while redrawing','line_number':3885,'multiline':False]['text':' Do not put this in the message window.','line_number':3893,'multiline':False]['text':' Don't use more prompt, truncate the cmdline if it doesn't fit.','line_number':3900,'multiline':False]['text':'
     * An emsg() before may have set msg_scroll. This is used in normal mode,
     * in cmdline mode we can reset them now.
     ','line_number':3910,'multiline':True]['text':' next message overwrites cmdline','line_number':3914,'multiline':False]['text':' Typing ':' at the more prompt may set skip_redraw.  We don't want this','line_number':3916,'multiline':False]['text':' in cmdline mode','line_number':3917,'multiline':False]['text':' ignore "msg_scrolled" in update_screen(), it will be reset soon.','line_number':3926,'multiline':False]['text':' always start in column 0','line_number':3976,'multiline':False]['text':' clear the bottom line(s)','line_number':3977,'multiline':False]['text':' will reset clear_cmdline','line_number':3978,'multiline':False]['text':'
 * Check the word in front of the cursor for an abbreviation.
 * Called when the non-id character "c" has been entered.
 * When an abbreviation is recognized it is removed from the text with
 * backspaces and the replacement string is inserted, followed by "c".
 ','line_number':3982,'multiline':True]['text':' no abbreviations or in paste mode','line_number':3993,'multiline':False]['text':' Do not consider '<,'> be part of the mapping, skip leading whitespace.','line_number':3996,'multiline':False]['text':' Actually accepts any mark.','line_number':3997,'multiline':False]['text':' check abbreviation from the beginning of the commandline','line_number':4006,'multiline':False]['text':'
 * Escape special characters in "fname", depending on "what":
 * VSE_NONE: for when used as a file name argument after a Vim command.
 * VSE_SHELL: for a shell command.
 * VSE_BUFFER: for the ":buffer" command.
 * Returns the result in allocated memory.
 ','line_number':4012,'multiline':True]['text':' Don't escape '[', '{' and '!' if they are in 'isfname' and for the','line_number':4027,'multiline':False]['text':' ":buffer" command.','line_number':4028,'multiline':False]['text':' For csh and similar shells need to put two backslashes before '!'.','line_number':4042,'multiline':False]['text':' One is taken by Vim, one by the shell.','line_number':4043,'multiline':False]['text':' '>' and '+' are special at the start of some commands, e.g. ":edit" and','line_number':4050,'multiline':False]['text':' ":write".  "cd -" has a special meaning.','line_number':4051,'multiline':False]['text':'
 * Put a backslash before the file name in "pp", which is in allocated memory.
 ','line_number':4058,'multiline':True]['text':'
 * For each file name in files[num_files]:
 * If 'orig_pat' starts with "~/", replace the home directory with "~".
 ','line_number':4076,'multiline':True]['text':'
 * Get a pointer to the current command line info.
 ','line_number':4103,'multiline':True]['text':'
 * Get pointer to the command line info to use. save_cmdline() may clear
 * ccline and put the previous value in prev_ccline.
 ','line_number':4112,'multiline':True]['text':'
 * Get the current command-line type.
 * Returns ':' or '/' or '?' or '@' or '>' or '-'
 * Only works when the command line is being edited.
 * Returns NUL when something is wrong.
 ','line_number':4128,'multiline':True]['text':'
 * Get the current command line in allocated memory.
 * Only works when the command line is being edited.
 * Returns NULL when something is wrong.
 ','line_number':4151,'multiline':True]['text':'
 * Get the current command-line completion type.
 ','line_number':4169,'multiline':True]['text':'
 * "getcmdcompltype()" function
 ','line_number':4205,'multiline':True]['text':'
 * "getcmdline()" function
 ','line_number':4215,'multiline':True]['text':'
 * "getcmdpos()" function
 ','line_number':4225,'multiline':True]['text':'
 * "getcmdscreenpos()" function
 ','line_number':4236,'multiline':True]['text':'
 * "getcmdtype()" function
 ','line_number':4247,'multiline':True]['text':' Set the command line str to "str".','line_number':4262,'multiline':False]['text':' Returns 1 when failed, 0 when OK.','line_number':4263,'multiline':False]['text':' Trigger CmdlineChanged autocommands.','line_number':4283,'multiline':False]['text':'
 * Set the command line byte position to "pos".  Zero is the first position.
 * Only works when the command line is being edited.
 * Returns 1 when failed, 0 when OK.
 ','line_number':4289,'multiline':True]['text':' The position is not set directly but after CTRL-\ e or CTRL-R = has','line_number':4303,'multiline':False]['text':' changed the command line.','line_number':4304,'multiline':False]['text':' "setcmdline()" function','line_number':4312,'multiline':False]['text':' Use tv_get_string() to handle a NULL string like an empty string.','line_number':4336,'multiline':False]['text':'
 * "setcmdpos()" function
 ','line_number':4340,'multiline':True]['text':'
 * Return the first character of the current command line.
 ','line_number':4357,'multiline':True]['text':'
 * Get indices "num1,num2" that specify a range within a list (not a range of
 * text lines in a buffer!) from a string.  Used for ":history" and ":clist".
 * Returns OK if parsed successfully, otherwise FAIL.
 ','line_number':4366,'multiline':True]['text':' parse "from" part of range','line_number':4379,'multiline':False]['text':' overflow','line_number':4383,'multiline':False]['text':' parse "to" part of range','line_number':4391,'multiline':False]['text':' overflow','line_number':4398,'multiline':False]['text':' no number given at all','line_number':4404,'multiline':False]['text':' only one number given','line_number':4407,'multiline':False]['text':'
 * Check value of 'cedit' and set cedit_key.
 * Returns NULL if value is OK, error message otherwise.
 ','line_number':4412,'multiline':True]['text':'
 * Open a window on the current command line and history.  Allow editing in
 * the window.  Returns when the window is closed.
 * Returns:
 *	CR	 if the command is to be executed
 *	Ctrl_C	 if it is to be abandoned
 *	K_IGNORE if editing continues
 ','line_number':4433,'multiline':True]['text':' Can't do this when text or buffer is locked.','line_number':4462,'multiline':False]['text':' Can't do this recursively.  Can't do it when typing a password.','line_number':4463,'multiline':False]['text':' Save current window sizes.','line_number':4476,'multiline':False]['text':' When using completion in Insert mode with <C-R>=<C-F> one can open the','line_number':4479,'multiline':False]['text':' command line window, but we don't want the popup menu then.','line_number':4480,'multiline':False]['text':' don't use a new tab page','line_number':4483,'multiline':False]['text':' Create a window for the command-line buffer.','line_number':4487,'multiline':False]['text':' Don't let quitting the More prompt make this fail.','line_number':4494,'multiline':False]['text':' Set "cmdwin_type" before any autocommands may mess things up.','line_number':4497,'multiline':False]['text':' Create the command-line buffer empty.','line_number':4500,'multiline':False]['text':' Some autocommand messed it up?','line_number':4503,'multiline':False]['text':' Don't allow switching to another buffer.','line_number':4525,'multiline':False]['text':' Showing the prompt may have set need_wait_return, reset it.','line_number':4528,'multiline':False]['text':' Make Tab start command-line completion: CTRL-X CTRL-V','line_number':4536,'multiline':False]['text':' Make S-Tab work like CTRL-P in command-line completion','line_number':4540,'multiline':False]['text':' Reset 'textwidth' after setting 'filetype' (the Vim filetype plugin','line_number':4548,'multiline':False]['text':' sets 'textwidth' to 78).','line_number':4549,'multiline':False]['text':' Fill the buffer with the history.','line_number':4552,'multiline':False]['text':' Replace the empty last line with the current command-line and put the','line_number':4572,'multiline':False]['text':' cursor there.','line_number':4573,'multiline':False]['text':' No Ex mode here!','line_number':4581,'multiline':False]['text':' Reset here so it can be set by a CmdWinEnter autocommand.','line_number':4587,'multiline':False]['text':' Trigger CmdwinEnter autocommands.','line_number':4590,'multiline':False]['text':' autocmd with ":startinsert"','line_number':4592,'multiline':False]['text':'
     * Call the main loop until <CR> or CTRL-C is typed.
     ','line_number':4598,'multiline':True]['text':' Trigger CmdwinLeave autocommands.','line_number':4609,'multiline':False]['text':' Restore KeyTyped in case it is modified by autocommands','line_number':4613,'multiline':False]['text':' Safety check: The old window or buffer was deleted: It's a bug when','line_number':4620,'multiline':False]['text':' this happens!','line_number':4621,'multiline':False]['text':' autocmds may abort script processing','line_number':4630,'multiline':False]['text':' Set the new command line from the cmdline buffer.','line_number':4634,'multiline':False]['text':' :qa[!] typed','line_number':4636,'multiline':False]['text':' Execute the command directly.','line_number':4642,'multiline':False]['text':' First need to cancel what we were doing.','line_number':4648,'multiline':False]['text':' :q or :close, don't execute any command','line_number':4657,'multiline':False]['text':' and don't modify the cmd window.','line_number':4658,'multiline':False]['text':' If the cursor is on the last character, it probably should be','line_number':4676,'multiline':False]['text':' after it.','line_number':4677,'multiline':False]['text':' Avoid command-line window first character being concealed.','line_number':4684,'multiline':False]['text':' First go back to the original window.','line_number':4687,'multiline':False]['text':' win_goto() may trigger an autocommand that already closes the','line_number':4694,'multiline':False]['text':' cmdline window.','line_number':4695,'multiline':False]['text':' win_close() may have already wiped the buffer when 'bh' is','line_number':4699,'multiline':False]['text':' set to 'wipe', autocommands may have closed other windows','line_number':4700,'multiline':False]['text':' Restore window sizes.','line_number':4704,'multiline':False]['text':' It can be confusing that the cmdwin still shows, redraw the','line_number':4710,'multiline':False]['text':' screen.','line_number':4711,'multiline':False]['text':'
 * Return TRUE if in the cmdwin, not editing the command line.
 ','line_number':4731,'multiline':True]['text':'
 * Used for commands that either take a simple command string argument, or:
 *	cmd << endmarker
 *	  {script}
 *	endmarker
 * Returns a pointer to allocated memory with {script} or NULL.
 ','line_number':4740,'multiline':True]['text':'
 * This function is used by f_input() and f_inputdialog() functions. The third
 * argument to f_input() specifies the type of completion to use at the
 * prompt. The third argument to f_inputdialog() specifies the value to return
 * when the user cancels the prompt.
 ','line_number':4782,'multiline':True]['text':' this doesn't work recursively.','line_number':4807,'multiline':False]['text':' While starting up, there is no place to enter text. When running tests','line_number':4819,'multiline':False]['text':' with --not-a-term we assume feedkeys() will be used.','line_number':4820,'multiline':False]['text':' Want to see the prompt.','line_number':4825,'multiline':False]['text':' Only the part of the message after the last NL is considered as','line_number':4828,'multiline':False]['text':' prompt for the command line','line_number':4829,'multiline':False]['text':' input() with a third argument: completion','line_number':4859,'multiline':False]['text':' since the user typed this, no need to wait for return','line_number':4898,'multiline':False]