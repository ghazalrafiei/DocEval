['text':' vi:set ts=8 sts=4 sw=4 noet:
 *
 * VIM - Vi IMproved	by Bram Moolenaar
 *
 * Do ":help uganda"  in Vim to read copying and usage conditions.
 * Do ":help credits" in Vim to see a list of people who contributed.
 * See README.txt for an overview of the Vim source code.
 ','line_number':1,'multiline':True]['text':'
 * misc1.c: functions that didn't seem to fit elsewhere
 ','line_number':10,'multiline':True]['text':' path_is_url() has found "://"','line_number':25,'multiline':False]['text':' path_is_url() has found ":\\"','line_number':26,'multiline':False]['text':' All user names (for ~user completion as done by shell).','line_number':28,'multiline':False]['text':'
 * get_leader_len() returns the length in bytes of the prefix of the given
 * string which introduces a comment.  If this string is not a comment then
 * 0 is returned.
 * When "flags" is not NULL, it is set to point to the flags of the recognized
 * comment leader.
 * "backward" must be true for the "O" command.
 * If "include_space" is set, include trailing whitespace while calculating the
 * length.
 ','line_number':31,'multiline':True]['text':' buffer for one option part','line_number':52,'multiline':False]['text':' pointer to comment string','line_number':53,'multiline':False]['text':' leading white space is ignored','line_number':60,'multiline':False]['text':'
     * Repeat to match several nested comment strings.
     ','line_number':63,'multiline':True]['text':'
	 * scan through the 'comments' option for a match
	 ','line_number':68,'multiline':True]['text':' Get one option part into part_buf[].  Advance "list" to next','line_number':74,'multiline':False]['text':' one.  Put "string" at start of string.','line_number':75,'multiline':False]['text':' remember where flags started','line_number':77,'multiline':False]['text':' missing ':', ignore this part','line_number':81,'multiline':False]['text':' isolate flags from string','line_number':83,'multiline':False]['text':' If we found a middle match previously, use that match when this','line_number':85,'multiline':False]['text':' is not a middle or end.','line_number':86,'multiline':False]['text':' When we already found a nested comment, only accept further','line_number':92,'multiline':False]['text':' nested comments.','line_number':93,'multiline':False]['text':' When 'O' flag present and using "O" command skip this one.','line_number':97,'multiline':False]['text':' Line contents and string must match.','line_number':101,'multiline':False]['text':' When string starts with white space, must have some white space','line_number':102,'multiline':False]['text':' (but the amount does not need to match, there might be a mix of','line_number':103,'multiline':False]['text':' TABs and spaces).','line_number':104,'multiline':False]['text':' missing white space','line_number':108,'multiline':False]['text':' string doesn't match','line_number':115,'multiline':False]['text':' When 'b' flag used, there must be white space or an','line_number':117,'multiline':False]['text':' end-of-line after the string in the line.','line_number':118,'multiline':False]['text':' We have found a match, stop searching unless this is a middle','line_number':123,'multiline':False]['text':' comment. The middle comment can be a substring of the end','line_number':124,'multiline':False]['text':' comment in which case it's better to return the length of the','line_number':125,'multiline':False]['text':' end comment and its flags.  Thus we keep searching with middle','line_number':126,'multiline':False]['text':' and end matches and use an end match if it matches better.','line_number':127,'multiline':False]['text':' Use this match instead of the middle match, since it's a','line_number':138,'multiline':False]['text':' longer thus better match.','line_number':139,'multiline':False]['text':' Use the previously found middle match after failing to find a','line_number':150,'multiline':False]['text':' match with an end.','line_number':151,'multiline':False]['text':' No match found, stop scanning.','line_number':158,'multiline':False]['text':' Include any trailing white space.','line_number':164,'multiline':False]['text':' If this comment doesn't nest, stop here.','line_number':171,'multiline':False]['text':'
 * Return the offset at which the last comment in line starts. If there is no
 * comment in the whole line, -1 is returned.
 *
 * When "flags" is not null, it is set to point to the flags describing the
 * recognized comment leader.
 ','line_number':179,'multiline':True]['text':' buffer for one option part','line_number':197,'multiline':False]['text':'
     * Repeat to match several nested comment strings.
     ','line_number':199,'multiline':True]['text':'
	 * scan through the 'comments' option for a match
	 ','line_number':205,'multiline':True]['text':'
	     * Get one option part into part_buf[].  Advance list to next one.
	     * put string at start of string.
	     ','line_number':213,'multiline':True]['text':' If everything is fine, this cannot actually','line_number':219,'multiline':False]['text':' happen.','line_number':220,'multiline':False]['text':' Isolate flags from string.','line_number':222,'multiline':False]['text':'
	     * Line contents and string must match.
	     * When string starts with white space, must have some white space
	     * (but the amount does not need to match, there might be a mix of
	     * TABs and spaces).
	     ','line_number':225,'multiline':True]['text':' do nothing ','line_number':239,'multiline':True]['text':'
	     * When 'b' flag used, there must be white space or an
	     * end-of-line after the string in the line.
	     ','line_number':243,'multiline':True]['text':' For a middlepart comment, only consider it to match if','line_number':253,'multiline':False]['text':' everything before the current position in the line is','line_number':254,'multiline':False]['text':' whitespace.  Otherwise we would think we are inside a','line_number':255,'multiline':False]['text':' comment if the middle part appears somewhere in the middle','line_number':256,'multiline':False]['text':' of the line.  E.g. for C the "*" appears often.','line_number':257,'multiline':False]['text':'
	     * We have found a match, stop searching.
	     ','line_number':264,'multiline':True]['text':' buffer for one option part','line_number':278,'multiline':False]['text':'
	     * If this comment nests, continue searching.
	     ','line_number':282,'multiline':True]['text':' Let's verify whether the comment leader found is a substring','line_number':290,'multiline':False]['text':' of other comment leaders. If it is, let's adjust the','line_number':291,'multiline':False]['text':' lower_check_bound so that we make sure that we have determined','line_number':292,'multiline':False]['text':' the comment leader correctly.','line_number':293,'multiline':False]['text':' Now we have to verify whether string ends with a substring','line_number':314,'multiline':False]['text':' beginning the com_leader.','line_number':315,'multiline':False]['text':'
 * Return the number of window lines occupied by buffer line "lnum".
 * Includes any filler lines.
 ','line_number':331,'multiline':True]['text':' when TRUE limit to window height','line_number':345,'multiline':False]['text':' Check for filler lines above this buffer line.  When folded the result','line_number':348,'multiline':False]['text':' is one line anyway.','line_number':349,'multiline':False]['text':'
 * Return the number of window lines occupied by buffer line "lnum".
 * Does not include filler lines.
 ','line_number':354,'multiline':True]['text':' when TRUE limit to window height','line_number':368,'multiline':False]['text':' Folded lines are handled just like an empty line.','line_number':377,'multiline':False]['text':' NOTE: Caller must handle lines that are MAYBE folded.','line_number':378,'multiline':False]['text':' add a line for each "above" and "below" aligned text property','line_number':386,'multiline':False]['text':'
 * Return number of window lines physical line "lnum" will occupy in window
 * "wp".  Does not care about folding, 'wrap' or 'diff'.
 ','line_number':398,'multiline':True]['text':' be quick for an empty line','line_number':417,'multiline':False]['text':' If list mode is on, then the '$' at the end of the line may take up one','line_number':422,'multiline':False]['text':' extra column.','line_number':423,'multiline':False]['text':'
     * Add column offset for 'number', 'relativenumber' and 'foldcolumn'.
     ','line_number':427,'multiline':True]['text':'
 * Like plines_win(), but only reports the number of physical screen lines
 * used from the start of the line to the given column number.
 ','line_number':440,'multiline':True]['text':' Check for filler lines above this buffer line.  When folded the result','line_number':454,'multiline':False]['text':' is one line anyway.','line_number':455,'multiline':False]['text':'
     * If *cts.cts_ptr is a TAB, and the TAB is not displayed as ^I, and we're
     * not in MODE_INSERT state, then col must be adjusted so that it
     * represents the last screen position of the TAB.  This only fixes an
     * error when the TAB wraps from one screen line to the next (when
     * 'columns' is not a multiple of 'ts') -- webb.
     ','line_number':474,'multiline':True]['text':'
     * Add column offset for 'number', 'relativenumber', 'foldcolumn', etc.
     ','line_number':487,'multiline':True]['text':' Check if there are any really folded lines, but also included lines','line_number':510,'multiline':False]['text':' that are maybe folded.','line_number':511,'multiline':False]['text':' count 1 for "+-- folded" line','line_number':515,'multiline':False]['text':' When searching columns is sometimes put at the end of a line.','line_number':539,'multiline':False]['text':'
 * Write a character at the current cursor position.
 * It is directly written into the block.
 ','line_number':556,'multiline':True]['text':'
 * Skip to next part of an option argument: Skip space and comma.
 ','line_number':567,'multiline':True]['text':'
 * check_status: called when the status bars for the buffer 'buf'
 *		 need to be updated
 ','line_number':580,'multiline':True]['text':'
 * Ask for a reply from the user, a 'y' or a 'n', with prompt "str" (which
 * should have been translated already).
 * No other characters are accepted, the message is repeated until a valid
 * reply is entered or CTRL-C is hit.
 * If direct is TRUE, don't use vgetc() but ui_inchar(), don't get characters
 * from any buffers but directly from the user.
 *
 * return the 'y' or 'n'
 ','line_number':597,'multiline':True]['text':' put terminal in raw mode for this question','line_number':613,'multiline':False]['text':' disallow scrolling here','line_number':617,'multiline':False]['text':' mouse behaves like with :confirm','line_number':619,'multiline':False]['text':' disables mouse for xterm','line_number':620,'multiline':False]['text':' no mapping here, but recognize keys','line_number':622,'multiline':False]['text':' same highlighting as for wait_return()','line_number':626,'multiline':False]['text':' show what you typed','line_number':634,'multiline':False]['text':'
 * Returns the current mode as a string in "buf[MODE_MAX_LENGTH]", NUL
 * terminated.
 * The first character represents the major mode, the following ones the minor
 * ones.
 ','line_number':648,'multiline':True]['text':' Testing the two-character code.','line_number':661,'multiline':False]['text':' to be able to detect force-linewise/blockwise/characterwise','line_number':732,'multiline':False]['text':' operations','line_number':733,'multiline':False]['text':'
 * "mode()" function
 ','line_number':751,'multiline':True]['text':' Clear out the minor mode when the argument is not a non-zero number or','line_number':764,'multiline':False]['text':' non-empty string.','line_number':765,'multiline':False]['text':'
 * "state()" function
 ','line_number':780,'multiline':True]['text':' FEAT_EVAL','line_number':821,'multiline':False]['text':'
 * Get a key stroke directly from the user.
 * Ignores mouse clicks and scrollbar events, except a click for the left
 * button (used at the more prompt).
 * Doesn't use vgetc(), because it syncs undo and eats mapped characters.
 * Disadvantage: typeahead is ignored.
 * Translates the interrupt character for unix to ESC.
 ','line_number':823,'multiline':True]['text':' mappings are not used here','line_number':842,'multiline':False]['text':' Leave some room for check_termcode() to insert a key code into (max','line_number':848,'multiline':False]['text':' 5 chars plus NUL).  And fix_input_buffer() can triple the number of','line_number':849,'multiline':False]['text':' bytes.','line_number':850,'multiline':False]['text':' Need some more space. This might happen when receiving a long','line_number':858,'multiline':False]['text':' escape sequence.','line_number':859,'multiline':False]['text':' panic!','line_number':869,'multiline':False]['text':' First time: blocking wait.  Second time: wait up to 100ms for a','line_number':872,'multiline':False]['text':' terminal code to complete.','line_number':873,'multiline':False]['text':' Replace zero and CSI by a special key code.','line_number':877,'multiline':False]['text':' keep track of the waiting time','line_number':883,'multiline':False]['text':' Incomplete termcode and not timed out yet: get more characters','line_number':885,'multiline':False]['text':' key code removed','line_number':890,'multiline':False]['text':' Redrawing was postponed, do it now.','line_number':895,'multiline':False]['text':' put cursor back where it belongs','line_number':897,'multiline':False]['text':' found a termcode: adjust length','line_number':901,'multiline':False]['text':' nothing typed yet','line_number':903,'multiline':False]['text':' Handle modifier and/or special key code.','line_number':906,'multiline':False]['text':' more bytes to get','line_number':932,'multiline':False]['text':'
 * Get a number from the user.
 * When "mouse_used" is not NULL allow using the mouse.
 ','line_number':948,'multiline':True]['text':' allow colon to abort','line_number':954,'multiline':False]['text':' When not printing messages, the user won't know what to type, return a','line_number':964,'multiline':False]['text':' zero (as if CR was hit).','line_number':965,'multiline':False]['text':' disallow scrolling here','line_number':970,'multiline':False]['text':' no mapping here, but recognize keys','line_number':973,'multiline':False]['text':' skip redraw once','line_number':1005,'multiline':False]['text':'
 * Ask the user to enter a number.
 * When "mouse_used" is not NULL allow using the mouse and in that case return
 * the line number.
 ','line_number':1022,'multiline':True]['text':' When using ":silent" assume that <CR> was entered.','line_number':1034,'multiline':False]['text':' Set the state such that text can be selected/copied/pasted and we still','line_number':1040,'multiline':False]['text':' get mouse events. redraw_after_callback() will not redraw if cmdline_row','line_number':1041,'multiline':False]['text':' is zero.','line_number':1042,'multiline':False]['text':' May show different mouse shape.','line_number':1047,'multiline':False]['text':' don't call wait_return() now','line_number':1053,'multiline':False]['text':' May need to restore mouse shape.','line_number':1063,'multiline':False]['text':' no messages now, wait until global is finished','line_number':1074,'multiline':False]['text':' 'lazyredraw' set, don't do messages now','line_number':1075,'multiline':False]['text':' We don't want to overwrite another important message, but do overwrite','line_number':1078,'multiline':False]['text':' a previous "more lines" or "fewer lines" message, so that "5dd" and','line_number':1079,'multiline':False]['text':' then "put" reports the last action.','line_number':1080,'multiline':False]['text':'
 * flush map and typeahead buffers and give a warning for an error
 ','line_number':1108,'multiline':True]['text':'
 * Give a warning for an error. "val" is one of the BO_ values, e.g., BO_OPER.
 ','line_number':1121,'multiline':True]['text':' Only beep once per half a second, otherwise a sequence of beeps','line_number':1140,'multiline':False]['text':' would freeze Vim.','line_number':1141,'multiline':False]['text':' While the GUI is starting up the termcap is set for','line_number':1149,'multiline':False]['text':' the GUI but the output still goes to a terminal.','line_number':1150,'multiline':False]['text':' No restore color information, refresh the screen.','line_number':1157,'multiline':False]['text':' When 'debug' contains "beep" produce a message.  If we are sourcing','line_number':1177,'multiline':False]['text':' a script or executing a function give the user a hint where the beep','line_number':1178,'multiline':False]['text':' comes from.','line_number':1179,'multiline':False]['text':'
 * To get the "real" home directory:
 * - get value of $HOME
 * For Unix:
 *  - go to that directory
 *  - do mch_dirname() to get the real name of that directory.
 *  This also works with mounts and links.
 *  Don't do this for MS-DOS, it will change the "current dir" for a drive.
 * For Windows:
 *  This code is duplicated in init_homedir() in dosinst.c.  Keep in sync!
 ','line_number':1187,'multiline':True]['text':' In case we are called a second time (when 'encoding' changes).','line_number':1203,'multiline':False]['text':'
     * Typically, $HOME is not defined on Windows, unless the user has
     * specifically defined it for Vim's sake.  However, on Windows NT
     * platforms, $HOMEDRIVE and $HOMEPATH are automatically defined for
     * each user.  Try constructing $HOME from these.
     ','line_number':1213,'multiline':True]['text':'
     * Weird but true: $HOME may contain an indirect reference to another
     * variable, esp. "%USERPROFILE%".  Happens when $USERPROFILE isn't set
     * when $HOME is being set.
     ','line_number':1239,'multiline':True]['text':' empty is same as not set','line_number':1263,'multiline':False]['text':' Convert from active codepage to UTF-8.  Other conversions are','line_number':1271,'multiline':False]['text':' not done, because they would fail for non-ASCII characters.','line_number':1272,'multiline':False]['text':'
     * Default home dir is C:/
     * Best assumption we can make in such a situation.
     ','line_number':1281,'multiline':True]['text':'
	 * Change to the directory and get the actual path.  This resolves
	 * links.  Don't do it when we can't return.
	 ','line_number':1292,'multiline':True]['text':'
 * Initialize $VIM and $VIMRUNTIME when 'enc' is updated.
 ','line_number':1324,'multiline':True]['text':'
 * Call expand_env() and store the result in an allocated string.
 * This is not very memory efficient, this expects the result to be freed
 * again soon.
 ','line_number':1349,'multiline':True]['text':'
 * Idem, but when "one" is TRUE handle the string as one file name, only
 * expand "~" at the start.
 ','line_number':1360,'multiline':True]['text':'
 * Expand environment variable with path name.
 * "~/" is also expanded, using $HOME.	For Unix "~user/" is expanded.
 * Skips over "\ ", "\~" and "\$" (not for Win32 though).
 * If anything fails no expansion is done and dst equals src.
 ','line_number':1375,'multiline':True]['text':' input string e.g. "$HOME/vim.hlp"','line_number':1383,'multiline':False]['text':' where to put the result','line_number':1384,'multiline':False]['text':' maximum length of the result','line_number':1385,'multiline':False]['text':' input string e.g. "$HOME/vim.hlp"','line_number':1392,'multiline':False]['text':' where to put the result','line_number':1393,'multiline':False]['text':' maximum length of the result','line_number':1394,'multiline':False]['text':' escape spaces in expanded variables','line_number':1395,'multiline':False]['text':' "srcp" is one file name','line_number':1396,'multiline':False]['text':' start again after this (can be NULL)','line_number':1397,'multiline':False]['text':' var was allocated, need to free it later','line_number':1404,'multiline':False]['text':' at start of a name','line_number':1405,'multiline':False]['text':' leave one char space for "\,"','line_number':1415,'multiline':False]['text':' Skip over `=expr`.','line_number':1419,'multiline':False]['text':'
	     * The variable name is copied into dst temporarily, because it may
	     * be a string in read-only memory and a NUL needs to be appended.
	     ','line_number':1451,'multiline':True]['text':' environment var','line_number':1455,'multiline':False]['text':' Unix has ${var-name} type environment vars','line_number':1462,'multiline':False]['text':' ignore '{'','line_number':1465,'multiline':False]['text':' home directory','line_number':1502,'multiline':False]['text':' user directory','line_number':1510,'multiline':False]['text':'
		 * Copy ~user to dst[], so we can put a NUL after it.
		 ','line_number':1513,'multiline':True]['text':'
		 * If the system supports getpwnam(), use it.
		 * Otherwise, or if getpwnam() fails, the shell is used to
		 * expand ~user.  This is slower and may fail if the shell
		 * does not support ~user (old versions of /bin/sh).
		 ','line_number':1526,'multiline':True]['text':' Note: memory allocated by getpwnam() is never freed.','line_number':1534,'multiline':False]['text':' Calling endpwent() apparently doesn't help.','line_number':1535,'multiline':False]['text':' !UNIX, thus VMS','line_number':1553,'multiline':False]['text':'
		 * USER_HOME is a comma-separated list of
		 * directories to search for the user account in.
		 ','line_number':1554,'multiline':True]['text':' UNIX','line_number':1583,'multiline':False]['text':' cannot expand user's home directory, so don't try','line_number':1585,'multiline':False]['text':' for gcc','line_number':1587,'multiline':False]['text':' UNIX || VMS','line_number':1588,'multiline':False]['text':' If 'shellslash' is set change backslashes to forward slashes.','line_number':1592,'multiline':False]['text':' Can't use slash_adjust(), p_ssl may be set temporarily.','line_number':1593,'multiline':False]['text':' If "var" contains white space, escape it with a backslash.','line_number':1609,'multiline':False]['text':' Required for ":e ~/tt" when $HOME includes a space.','line_number':1610,'multiline':False]['text':' if var[] ends in a path separator and tail[] starts','line_number':1630,'multiline':False]['text':' with it, skip a character','line_number':1631,'multiline':False]['text':' copy at least one char','line_number':1646,'multiline':False]['text':'
	     * Recognize the start of a new name, for '~'.
	     * Don't do this when "one" is TRUE, to avoid expanding "~" in
	     * ":edit foo ~ foo".
	     ','line_number':1648,'multiline':True]['text':'
 * If the string between "p" and "pend" ends in "name/", return "pend" minus
 * the length of "name/".  Otherwise return "pend".
 ','line_number':1677,'multiline':True]['text':'
 * Check if the directory "vimdir/<version>" or "vimdir/runtime" exists.
 * Return NULL if not, return its name in allocated memory otherwise.
 ','line_number':1694,'multiline':True]['text':' Check that "defaults.vim" exists in this directory, to avoid picking','line_number':1714,'multiline':False]['text':' up a stray "runtime" directory, it would make many tests fail in','line_number':1715,'multiline':False]['text':' mysterious ways.','line_number':1716,'multiline':False]['text':'
 * Vim's version of getenv().
 * Special handling of $HOME, $VIM and $VIMRUNTIME.
 * Also does ACP to 'enc' conversion for Win32.
 * "mustfree" is set to TRUE when the returned string is allocated.  It must be
 * initialized to FALSE by the caller.
 ','line_number':1730,'multiline':True]['text':' use "C:/" when $HOME is not set','line_number':1746,'multiline':False]['text':' Use Wide function','line_number':1750,'multiline':False]['text':' empty is the same as not set','line_number':1758,'multiline':False]['text':' empty is the same as not set','line_number':1772,'multiline':False]['text':' special handling for user settings directory...','line_number':1779,'multiline':False]['text':' handling $VIMRUNTIME and $VIM is below, bail out if it's another name.','line_number':1793,'multiline':False]['text':'
     * When expanding $VIMRUNTIME fails, try using $VIM/vim<version> or $VIM.
     * Don't do this when default_vimruntime_dir is non-empty.
     ','line_number':1798,'multiline':True]['text':' Use Wide function','line_number':1809,'multiline':False]['text':' empty is the same as not set','line_number':1811,'multiline':False]['text':' empty is the same as not set','line_number':1826,'multiline':False]['text':'
     * When expanding $VIM or $VIMRUNTIME fails, try using:
     * - the directory name from 'helpfile' (unless it contains '$')
     * - the executable name from argv[0]
     ','line_number':1839,'multiline':True]['text':'
	 * Use the name of the executable, obtained from argv[0].
	 ','line_number':1849,'multiline':True]['text':' remove the file name','line_number':1857,'multiline':False]['text':' remove "doc/" from 'helpfile', if present','line_number':1860,'multiline':False]['text':' remove "MacOS" from exe_name and add "Resources/vim"','line_number':1866,'multiline':False]['text':' remove "src/" from exe_name, if present','line_number':1886,'multiline':False]['text':' for $VIM, remove "runtime/" or "vim54/", if present','line_number':1891,'multiline':False]['text':' remove trailing path separator','line_number':1898,'multiline':False]['text':' check that the result is a directory name','line_number':1905,'multiline':False]['text':' may add "/vim54" or "/runtime" if it exists','line_number':1913,'multiline':False]['text':' When there is a pathdef.c file we can use default_vim_dir and','line_number':1926,'multiline':False]['text':' default_vimruntime_dir','line_number':1927,'multiline':False]['text':' Only use default_vimruntime_dir when it is not empty','line_number':1930,'multiline':False]['text':'
     * Set the environment variable, so that the new value can be found fast
     * next time, and others can also use it (e.g. Perl).
     ','line_number':1949,'multiline':True]['text':'
 * Removes environment variable "name" and take care of side effects.
 ','line_number':1979,'multiline':True]['text':' "homedir" is not cleared, keep using the old value until $HOME is set.','line_number':1987,'multiline':False]['text':'
 * Set environment variable "name" and take care of side effects.
 ','line_number':1995,'multiline':True]['text':'
 * Our portable version of setenv.
 ','line_number':2011,'multiline':True]['text':'
     * Putenv does not copy the string, it has to remain
     * valid.  The allocated memory will never be freed.
     ','line_number':2022,'multiline':True]['text':'
     * When setting $VIMRUNTIME adjust the directory to find message
     * translations to $VIMRUNTIME/lang.
     ','line_number':2034,'multiline':True]['text':'
 * Function given to ExpandGeneric() to obtain an environment variable name.
 ','line_number':2051,'multiline':True]['text':' No environ[] on the Amiga.','line_number':2060,'multiline':False]['text':' Borland C++ 5.2 has this in a header file.','line_number':2064,'multiline':False]['text':'
 * Add a user name to the list of users in ga_users.
 * Do nothing if user name is NULL or empty.
 ','line_number':2085,'multiline':True]['text':'
 * Find all user names for user completion.
 * Done only once and then cached.
 ','line_number':2104,'multiline':True]['text':' The $USER environment variable may be a valid remote user name (NIS,','line_number':2147,'multiline':False]['text':' LDAP) not already listed by getpwent(), as getpwent() only lists','line_number':2148,'multiline':False]['text':' local user names.  If $USER is not already listed, check whether it','line_number':2149,'multiline':False]['text':' is a valid remote user name using getpwnam() and if it is, add it to','line_number':2150,'multiline':False]['text':' the list of user names.','line_number':2151,'multiline':False]['text':'
 * Function given to ExpandGeneric() to obtain an user names.
 ','line_number':2177,'multiline':True]['text':'
 * Check whether name matches a user name. Return:
 * 0 if name does not match any user name.
 * 1 if name partially matches the beginning of a user name.
 * 2 is name fully matches a user name.
 ','line_number':2189,'multiline':True]['text':' full match','line_number':2206,'multiline':False]['text':' partial match','line_number':2208,'multiline':False]['text':' Ignore SIGHUP, because a dropped connection causes a read error, which','line_number':2217,'multiline':False]['text':' makes Vim exit and then handling SIGHUP causes various reentrance','line_number':2218,'multiline':False]['text':' problems.','line_number':2219,'multiline':False]['text':' trash any pending output','line_number':2227,'multiline':False]['text':'
	 * Switch terminal mode back now, so messages end up on the "normal"
	 * screen (if there are two screens).
	 ','line_number':2234,'multiline':True]['text':'
 * Preserve files and exit.
 * When called IObuff must contain a message.
 * NOTE: This may be called from deathtrap() in a signal handler, avoid unsafe
 * functions, such as allocating memory.
 ','line_number':2244,'multiline':True]['text':' Setting this will prevent free() calls.  That avoids calling free()','line_number':2257,'multiline':False]['text':' recursively when free() was invoked with a bad pointer.','line_number':2258,'multiline':False]['text':' don't know where cursor is now','line_number':2262,'multiline':False]['text':' close all not-modified buffers','line_number':2265,'multiline':False]['text':' don't know where cursor is now','line_number':2272,'multiline':False]['text':' preserve all swap files','line_number':2274,'multiline':False]['text':' close all memfiles, without deleting','line_number':2279,'multiline':False]['text':'
 * Check for CTRL-C pressed, but only once in a while.
 * Should be used instead of ui_breakcheck() for functions that check for
 * each line in the file.  Calling ui_breakcheck() each time takes too much
 * time, because it can be a system call.
 ','line_number':2286,'multiline':True]['text':'
 * Like line_breakcheck() but check 10 times less often.
 ','line_number':2309,'multiline':True]['text':'
 * Like line_breakcheck() but check 100 times less often.
 ','line_number':2323,'multiline':True]['text':'
 * Get the stdout of an external command.
 * If "ret_len" is NULL replace NUL characters with NL.  When "ret_len" is not
 * NULL store the length there.
 * Returns an allocated string, or NULL for error.
 ','line_number':2348,'multiline':True]['text':' optional input file name','line_number':2357,'multiline':False]['text':' can be SHELL_SILENT','line_number':2358,'multiline':False]['text':' get a name for the temp file','line_number':2371,'multiline':False]['text':' Add the redirection stuff','line_number':2378,'multiline':False]['text':'
     * Call the shell to execute the command (errors are ignored).
     * Don't check timestamps here.
     ','line_number':2383,'multiline':True]['text':'
     * read the names from the file into memory
     ','line_number':2393,'multiline':True]['text':' created temporary file is not always readable as binary','line_number':2397,'multiline':False]['text':' Not being able to seek means we can't read the file.','line_number':2403,'multiline':False]['text':' get size of temp file','line_number':2406,'multiline':False]['text':' back to the start','line_number':2407,'multiline':False]['text':' VMS doesn't give us what we asked for...','line_number':2423,'multiline':False]['text':' Change NUL into SOH, otherwise the string is truncated.','line_number':2432,'multiline':False]['text':' make sure the buffer is terminated','line_number':2437,'multiline':False]['text':'
	 * Write the text to a temp file, to be used for input of the shell
	 * command.
	 ','line_number':2476,'multiline':True]['text':' type error; errmsg already given','line_number':2534,'multiline':False]['text':' Omit SHELL_COOKED when invoked with ":silent".  Avoids that the shell','line_number':2549,'multiline':False]['text':' echoes typeahead, that messes up the display.','line_number':2550,'multiline':False]['text':' translate <CR><NL> into <NL>','line_number':2605,'multiline':False]['text':'
 * "system()" function
 ','line_number':2636,'multiline':True]['text':'
 * "systemlist()" function
 ','line_number':2645,'multiline':True]['text':' FEAT_EVAL','line_number':2653,'multiline':False]['text':'
 * Return TRUE when need to go to Insert mode because of 'insertmode'.
 * Don't do this when still processing a command or a mapping.
 * Don't do this when inside a ":normal" command.
 ','line_number':2657,'multiline':True]['text':'
 * Returns the isolated name of the shell in allocated memory:
 * - Skip beyond any path.  E.g., "/usr/bin/csh -f" -> "csh -f".
 * - Remove any argument.  E.g., "csh -f" -> "csh".
 * But don't allow a space in the path, so that this works:
 *   "/usr/bin/csh --rcfile ~/.cshrc"
 * But don't do that for Windows, it's common to have a space in the path.
 * Returns NULL when out of memory.
 ','line_number':2668,'multiline':True]['text':' No white space, use the tail.','line_number':2689,'multiline':False]['text':' Find the last path separator before the space.','line_number':2696,'multiline':False]['text':'
 * Check if the "://" of a URL is at the pointer, return URL_SLASH.
 * Also check for ":\\", which MS Internet Explorer accepts, return
 * URL_BACKSLASH.
 ','line_number':2707,'multiline':True]['text':'
 * Check if "fname" starts with "name://" or "name:\\".
 * Return URL_SLASH for "name://", URL_BACKSLASH for "name:\\".
 * Return zero otherwise.
 ','line_number':2722,'multiline':True]['text':' We accept alphabetic characters and a dash in scheme part.','line_number':2732,'multiline':False]['text':' RFC 3986 allows for more, but it increases the risk of matching','line_number':2733,'multiline':False]['text':' non-URL text.','line_number':2734,'multiline':False]['text':' first character must be alpha','line_number':2736,'multiline':False]['text':' check body: alpha or dash','line_number':2740,'multiline':False]['text':' check last char is not a dash','line_number':2744,'multiline':False]['text':' "://" or ":\\" must follow','line_number':2748,'multiline':False]['text':'
 * Return the dictionary of v:event.
 * Save and clear the value in case it already has items.
 ','line_number':2753,'multiline':True]['text':' recursive use of v:event, save, make empty and restore later','line_number':2764,'multiline':False]['text':'
 * Fires a ModeChanged autocmd event if appropriate.
 ','line_number':2785,'multiline':True]['text':' Skip this when got_int is set, the autocommand will not be executed.','line_number':2797,'multiline':False]['text':' Better trigger it next time.','line_number':2798,'multiline':False]['text':' concatenate modes in format "old_mode:new_mode"','line_number':2811,'multiline':False]['text':' For overflow detection, add a digit safely to an int value.','line_number':2822,'multiline':False]['text':' For overflow detection, add a digit safely to a long value.','line_number':2833,'multiline':False]['text':' Return something that fits into an int.','line_number':2844,'multiline':False]