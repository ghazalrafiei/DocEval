['text':' -*- mode: c++; c-basic-offset: 4 -*- ','line_number':1,'multiline':True]['text':'
 * Modified for use within matplotlib
 * 5 July 2007
 * Michael Droettboom
 ','line_number':3,'multiline':True]['text':'
** ~ppr/src/pprdrv/pprdrv_tt2.c
** Copyright 1995, Trinity College Computing Center.
** Written by David Chappell.
**
** Permission to use, copy, modify, and distribute this software and its
** documentation for any purpose and without fee is hereby granted, provided
** that the above copyright notice appear in all copies and that both that
** copyright notice and this permission notice appear in supporting
** documentation.  This software is provided "as is" without express or
** implied warranty.
**
** TrueType font support.  These functions allow PPR to generate
** PostScript fonts from Microsoft compatible TrueType font files.
**
** The functions in this file do most of the work to convert a
** TrueType font to a type 3 PostScript font.
**
** Most of the material in this file is derived from a program called
** "ttf2ps" which L. S. Ng posted to the usenet news group
** "comp.sources.postscript".  The author did not provide a copyright
** notice or indicate any restrictions on use.
**
** Last revised 11 July 1995.
','line_number':9,'multiline':True]['text':' The PostScript bounding box. ','line_number':51,'multiline':True]['text':' Variables to hold the character data. ','line_number':55,'multiline':True]['text':' array of contour endpoints ','line_number':56,'multiline':True]['text':' number of points, number of coutours ','line_number':57,'multiline':True]['text':' arrays of x and y coordinates ','line_number':58,'multiline':True]['text':' array of TrueType flags ','line_number':59,'multiline':True]['text':' A book-keeping variable for keeping track of the depth of the PS stack ','line_number':61,'multiline':True]['text':' Each point on a TrueType contour is either on the path or off it (a','line_number':80,'multiline':False]['text':' control point); here's a simple representation for building such','line_number':81,'multiline':False]['text':' contours. Added by Jouni Sepp√§nen 2012-05-27.','line_number':82,'multiline':False]['text':'
** This routine is used to break the character
** procedure up into a number of smaller
** procedures.  This is necessary so as not to
** overflow the stack on certain level 1 interpreters.
**
** Prepare to push another item onto the stack,
** starting a new proceedure if necessary.
**
** Not all the stack depth calculations in this routine
** are perfectly accurate, but they do the job.
','line_number':92,'multiline':True]['text':' Only do something of we will have a log of points. ','line_number':106,'multiline':True]['text':' Account for what we propose to add ','line_number':114,'multiline':True]['text':' A rough estimate ','line_number':119,'multiline':True]['text':' end of stack() ','line_number':122,'multiline':True]['text':' called at end ','line_number':124,'multiline':True]['text':' end of stack_end() ','line_number':131,'multiline':True]['text':'
** We call this routine to emmit the PostScript code
** for the character we have loaded with load_char().
','line_number':133,'multiline':True]['text':' Step thru the contours.
     * j = index to xcoor, ycoor, tt_flags (point data)
     * k = index to epts_ctr (which points belong to the same contour) ','line_number':141,'multiline':True]['text':' A TrueType contour consists of on-path and off-path points.','line_number':146,'multiline':False]['text':' Two consecutive on-path points are to be joined with a','line_number':147,'multiline':False]['text':' line; off-path points between on-path points indicate a','line_number':148,'multiline':False]['text':' quadratic spline, where the off-path point is the control','line_number':149,'multiline':False]['text':' point. Two consecutive off-path points have an implicit','line_number':150,'multiline':False]['text':' on-path point midway between them.','line_number':151,'multiline':False]['text':' Represent flags and x/y coordinates as a C++ list','line_number':154,'multiline':False]['text':' Don't try to access the last element of an empty list','line_number':165,'multiline':False]['text':' For any two consecutive off-path points, insert the implied','line_number':169,'multiline':False]['text':' on-path point.','line_number':170,'multiline':False]['text':' Handle the wrap-around: insert a point either at the beginning','line_number':185,'multiline':False]['text':' or at the end that has the same coordinates as the opposite point.','line_number':186,'multiline':False]['text':' This also ensures that the initial point is ON_PATH.','line_number':187,'multiline':False]['text':' The first point','line_number':199,'multiline':False]['text':' Step through the remaining points','line_number':203,'multiline':False]['text':' incremented inside ','line_number':205,'multiline':True]['text':' Now, we can fill the whole thing. ','line_number':230,'multiline':True]['text':' end of PSConvert() ','line_number':233,'multiline':True]['text':'
** Emit a PostScript "curveto" command, assuming the current point
** is (x0, y0), the control point of a quadratic spline is (x1, y1),
** and the endpoint is (x2, y2). Note that this requires a conversion,
** since PostScript splines are cubic.
','line_number':245,'multiline':True]['text':'
** Deallocate the structures which stored
** the data for the last simple glyph.
','line_number':275,'multiline':True]['text':' The flags array ','line_number':281,'multiline':True]['text':' The X coordinates ','line_number':282,'multiline':True]['text':' The Y coordinates ','line_number':283,'multiline':True]['text':' The array of contour endpoints ','line_number':284,'multiline':True]['text':'
** Load the simple glyph data pointed to by glyph.
** The pointer "glyph" should point 10 bytes into
** the glyph data.
','line_number':287,'multiline':True]['text':' Read the contour endpoints list. ','line_number':297,'multiline':True]['text':' From the endpoint of the last contour, we can ','line_number':305,'multiline':True]['text':' determine the number of points. ','line_number':306,'multiline':True]['text':' Skip the instructions. ','line_number':313,'multiline':True]['text':' Allocate space to hold the data. ','line_number':318,'multiline':True]['text':' Read the flags array, uncompressing it as we go. ','line_number':323,'multiline':True]['text':' There is danger of overflow here. ','line_number':324,'multiline':True]['text':' If next byte is repeat count, ','line_number':329,'multiline':True]['text':' Read the x coordinates ','line_number':345,'multiline':True]['text':' one byte value with ','line_number':348,'multiline':True]['text':' external sign ','line_number':350,'multiline':True]['text':' repeat last ','line_number':354,'multiline':True]['text':' two byte signed value ','line_number':358,'multiline':True]['text':' Read the y coordinates ','line_number':365,'multiline':True]['text':' one byte value with ','line_number':368,'multiline':True]['text':' external sign ','line_number':370,'multiline':True]['text':' repeat last value ','line_number':374,'multiline':True]['text':' two byte signed value ','line_number':378,'multiline':True]['text':' Convert delta values to absolute values. ','line_number':385,'multiline':True]['text':' end of load_char() ','line_number':398,'multiline':True]['text':'
** Emmit PostScript code for a composite character.
','line_number':400,'multiline':True]['text':' Once around this loop for each component. ','line_number':410,'multiline':True]['text':' read the flags word ','line_number':413,'multiline':True]['text':' read the glyphindex word ','line_number':416,'multiline':True]['text':' The tt spec. seems to say these are signed. ','line_number':421,'multiline':True]['text':' The tt spec. does not clearly indicate ','line_number':427,'multiline':True]['text':' whether these values are signed or not. ','line_number':429,'multiline':True]['text':' Debugging ','line_number':450,'multiline':True]['text':' If we have an (X,Y) shift and it is non-zero, ','line_number':456,'multiline':True]['text':' translate the coordinate system. ','line_number':457,'multiline':True]['text':' Invoke the CharStrings procedure to print the component. ','line_number':468,'multiline':True]['text':' If we translated the coordinate system, ','line_number':472,'multiline':True]['text':' put it back the way it was. ','line_number':473,'multiline':True]['text':' end of do_composite() ','line_number':482,'multiline':True]['text':'
** Return a pointer to a specific glyph's data.
','line_number':484,'multiline':True]['text':' Read the glyph offset from the index to location table. ','line_number':492,'multiline':True]['text':' end of find_glyph_data() ','line_number':517,'multiline':True]['text':' = false ','line_number':519,'multiline':True]['text':' Get a pointer to the data. ','line_number':529,'multiline':True]['text':' If the character is blank, it has no bounding box, ','line_number':532,'multiline':True]['text':' otherwise read the bounding box. ','line_number':533,'multiline':True]['text':' A blank char has an all zero BoundingBox ','line_number':536,'multiline':True]['text':' Set this for later if()s ','line_number':537,'multiline':True]['text':' Read the number of contours. ','line_number':541,'multiline':True]['text':' Read PostScript bounding box. ','line_number':544,'multiline':True]['text':' Advance the pointer. ','line_number':550,'multiline':True]['text':' If it is a simple character, load its data. ','line_number':554,'multiline':True]['text':' Consult the horizontal metrics table to determine ','line_number':564,'multiline':True]['text':' the character width. ','line_number':565,'multiline':True]['text':' Execute setcachedevice in order to inform the font machinery ','line_number':575,'multiline':True]['text':' of the character bounding box and advance width. ','line_number':576,'multiline':True]['text':' If it is a simple glyph, convert it, ','line_number':591,'multiline':True]['text':' otherwise, close the stack business. ','line_number':592,'multiline':True]['text':' simple ','line_number':593,'multiline':True]['text':' composite ','line_number':597,'multiline':True]['text':'
** This is the routine which is called from pprdrv_tt.c.
','line_number':610,'multiline':True]['text':' end of tt_type3_charproc() ','line_number':616,'multiline':True]['text':'
** Some of the given glyph ids may refer to composite glyphs.
** This function adds all of the dependencies of those composite
** glyphs to the glyph id vector.  Michael Droettboom [06-07-07]
','line_number':618,'multiline':True]['text':' This is a composite glyph','line_number':644,'multiline':False]['text':' end of file ','line_number':693,'multiline':True]