['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]['text':'          http://www.antigrain.com','line_number':13,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]['text':'-----------------------------------------------sbool_combine_spans_bin','line_number':27,'multiline':False]['text':' Functor.','line_number':28,'multiline':False]['text':' Combine two binary encoded spans, i.e., when we don't have any','line_number':29,'multiline':False]['text':' anti-aliasing information, but only X and Length. The function','line_number':30,'multiline':False]['text':' is compatible with any type of scanlines.','line_number':31,'multiline':False]['text':'----------------','line_number':32,'multiline':False]['text':'---------------------------------------------sbool_combine_spans_empty','line_number':49,'multiline':False]['text':' Functor.','line_number':50,'multiline':False]['text':' Combine two spans as empty ones. The functor does nothing','line_number':51,'multiline':False]['text':' and is used to XOR binary spans.','line_number':52,'multiline':False]['text':'----------------','line_number':53,'multiline':False]['text':'--------------------------------------------------sbool_add_span_empty','line_number':68,'multiline':False]['text':' Functor.','line_number':69,'multiline':False]['text':' Add nothing. Used in conbine_shapes_sub','line_number':70,'multiline':False]['text':'----------------','line_number':71,'multiline':False]['text':'----------------------------------------------------sbool_add_span_bin','line_number':83,'multiline':False]['text':' Functor.','line_number':84,'multiline':False]['text':' Add a binary span','line_number':85,'multiline':False]['text':'----------------','line_number':86,'multiline':False]['text':'-----------------------------------------------------sbool_add_span_aa','line_number':102,'multiline':False]['text':' Functor.','line_number':103,'multiline':False]['text':' Add an anti-aliased span','line_number':104,'multiline':False]['text':' anti-aliasing information, but only X and Length. The function','line_number':105,'multiline':False]['text':' is compatible with any type of scanlines.','line_number':106,'multiline':False]['text':'----------------','line_number':107,'multiline':False]['text':'----------------------------------------------sbool_intersect_spans_aa','line_number':133,'multiline':False]['text':' Functor.','line_number':134,'multiline':False]['text':' Intersect two spans preserving the anti-aliasing information.','line_number':135,'multiline':False]['text':' The result is added to the "sl" scanline.','line_number':136,'multiline':False]['text':'------------------','line_number':137,'multiline':False]['text':' Calculate the operation code and choose the ','line_number':162,'multiline':False]['text':' proper combination algorithm.','line_number':163,'multiline':False]['text':' 0 = Both spans are of AA type','line_number':164,'multiline':False]['text':' 1 = span1 is solid, span2 is AA','line_number':165,'multiline':False]['text':' 2 = span1 is AA, span2 is solid','line_number':166,'multiline':False]['text':' 3 = Both spans are of solid type','line_number':167,'multiline':False]['text':'-----------------','line_number':168,'multiline':False]['text':' Both are AA spans','line_number':171,'multiline':False]['text':' span1 is solid, span2 is AA','line_number':187,'multiline':False]['text':' span1 is AA, span2 is solid','line_number':208,'multiline':False]['text':' Both are solid spans','line_number':229,'multiline':False]['text':'--------------------------------------------------sbool_unite_spans_aa','line_number':245,'multiline':False]['text':' Functor.','line_number':246,'multiline':False]['text':' Unite two spans preserving the anti-aliasing information.','line_number':247,'multiline':False]['text':' The result is added to the "sl" scanline.','line_number':248,'multiline':False]['text':'------------------','line_number':249,'multiline':False]['text':' Calculate the operation code and choose the ','line_number':274,'multiline':False]['text':' proper combination algorithm.','line_number':275,'multiline':False]['text':' 0 = Both spans are of AA type','line_number':276,'multiline':False]['text':' 1 = span1 is solid, span2 is AA','line_number':277,'multiline':False]['text':' 2 = span1 is AA, span2 is solid','line_number':278,'multiline':False]['text':' 3 = Both spans are of solid type','line_number':279,'multiline':False]['text':'-----------------','line_number':280,'multiline':False]['text':' Both are AA spans','line_number':283,'multiline':False]['text':' span1 is solid, span2 is AA','line_number':301,'multiline':False]['text':' span1 is AA, span2 is solid','line_number':324,'multiline':False]['text':' Both are solid spans','line_number':347,'multiline':False]['text':'---------------------------------------------sbool_xor_formula_linear','line_number':361,'multiline':False]['text':'---------------------------------------------sbool_xor_formula_saddle','line_number':381,'multiline':False]['text':'-------------------------------------------sbool_xor_formula_abs_diff','line_number':404,'multiline':False]['text':'----------------------------------------------------sbool_xor_spans_aa','line_number':415,'multiline':False]['text':' Functor.','line_number':416,'multiline':False]['text':' XOR two spans preserving the anti-aliasing information.','line_number':417,'multiline':False]['text':' The result is added to the "sl" scanline.','line_number':418,'multiline':False]['text':'------------------','line_number':419,'multiline':False]['text':' Calculate the operation code and choose the ','line_number':445,'multiline':False]['text':' proper combination algorithm.','line_number':446,'multiline':False]['text':' 0 = Both spans are of AA type','line_number':447,'multiline':False]['text':' 1 = span1 is solid, span2 is AA','line_number':448,'multiline':False]['text':' 2 = span1 is AA, span2 is solid','line_number':449,'multiline':False]['text':' 3 = Both spans are of solid type','line_number':450,'multiline':False]['text':'-----------------','line_number':451,'multiline':False]['text':' Both are AA spans','line_number':454,'multiline':False]['text':' span1 is solid, span2 is AA','line_number':468,'multiline':False]['text':' span1 is AA, span2 is solid','line_number':480,'multiline':False]['text':' Both are solid spans','line_number':492,'multiline':False]['text':'-----------------------------------------------sbool_subtract_spans_aa','line_number':505,'multiline':False]['text':' Functor.','line_number':506,'multiline':False]['text':' Unite two spans preserving the anti-aliasing information.','line_number':507,'multiline':False]['text':' The result is added to the "sl" scanline.','line_number':508,'multiline':False]['text':'------------------','line_number':509,'multiline':False]['text':' Calculate the operation code and choose the ','line_number':534,'multiline':False]['text':' proper combination algorithm.','line_number':535,'multiline':False]['text':' 0 = Both spans are of AA type','line_number':536,'multiline':False]['text':' 1 = span1 is solid, span2 is AA','line_number':537,'multiline':False]['text':' 2 = span1 is AA, span2 is solid','line_number':538,'multiline':False]['text':' 3 = Both spans are of solid type','line_number':539,'multiline':False]['text':'-----------------','line_number':540,'multiline':False]['text':' Both are AA spans','line_number':543,'multiline':False]['text':' span1 is solid, span2 is AA','line_number':563,'multiline':False]['text':' span1 is AA, span2 is solid','line_number':581,'multiline':False]['text':' Both are solid spans','line_number':602,'multiline':False]['text':'--------------------------------------------sbool_add_spans_and_render','line_number':621,'multiline':False]['text':'---------------------------------------------sbool_intersect_scanlines','line_number':650,'multiline':False]['text':' Intersect two scanlines, "sl1" and "sl2" and generate a new "sl" one.','line_number':651,'multiline':False]['text':' The combine_spans functor can be of type sbool_combine_spans_bin or','line_number':652,'multiline':False]['text':' sbool_intersect_spans_aa. First is a general functor to combine','line_number':653,'multiline':False]['text':' two spans without Anti-Aliasing, the second preserves the AA','line_number':654,'multiline':False]['text':' information, but works slower','line_number':655,'multiline':False]['text':'','line_number':656,'multiline':False]['text':' Determine what spans we should advance in the next step','line_number':684,'multiline':False]['text':' The span with the least ending X should be advanced','line_number':685,'multiline':False]['text':' advance_both is just an optimization when we ending ','line_number':686,'multiline':False]['text':' coordinates are the same and we can advance both','line_number':687,'multiline':False]['text':'--------------','line_number':688,'multiline':False]['text':' Find the intersection of the spans','line_number':692,'multiline':False]['text':' and check if they intersect','line_number':693,'multiline':False]['text':'--------------','line_number':694,'multiline':False]['text':' Advance the spans','line_number':702,'multiline':False]['text':'--------------','line_number':703,'multiline':False]['text':'------------------------------------------------sbool_intersect_shapes','line_number':734,'multiline':False]['text':' Intersect the scanline shapes. Here the "Scanline Generator" ','line_number':735,'multiline':False]['text':' abstraction is used. ScanlineGen1 and ScanlineGen2 are ','line_number':736,'multiline':False]['text':' the generators, and can be of type rasterizer_scanline_aa<>.','line_number':737,'multiline':False]['text':' There function requires three scanline containers that can be of','line_number':738,'multiline':False]['text':' different types.','line_number':739,'multiline':False]['text':' "sl1" and "sl2" are used to retrieve scanlines from the generators,','line_number':740,'multiline':False]['text':' "sl" is ised as the resulting scanline to render it.','line_number':741,'multiline':False]['text':' The external "sl1" and "sl2" are used only for the sake of','line_number':742,'multiline':False]['text':' optimization and reusing of the scanline objects.','line_number':743,'multiline':False]['text':' the function calls sbool_intersect_scanlines with CombineSpansFunctor ','line_number':744,'multiline':False]['text':' as the last argument. See sbool_intersect_scanlines for details.','line_number':745,'multiline':False]['text':'----------','line_number':746,'multiline':False]['text':' Prepare the scanline generators.','line_number':759,'multiline':False]['text':' If anyone of them doesn't contain ','line_number':760,'multiline':False]['text':' any scanlines, then return.','line_number':761,'multiline':False]['text':'-----------------','line_number':762,'multiline':False]['text':' Get the bounding boxes','line_number':766,'multiline':False]['text':'----------------','line_number':767,'multiline':False]['text':' Calculate the intersection of the bounding ','line_number':771,'multiline':False]['text':' boxes and return if they don't intersect.','line_number':772,'multiline':False]['text':'-----------------','line_number':773,'multiline':False]['text':' Reset the scanlines and get two first ones','line_number':777,'multiline':False]['text':'-----------------','line_number':778,'multiline':False]['text':' The main loop','line_number':787,'multiline':False]['text':' Here we synchronize the scanlines with ','line_number':788,'multiline':False]['text':' the same Y coordinate, ignoring all other ones.','line_number':789,'multiline':False]['text':' Only scanlines having the same Y-coordinate ','line_number':790,'multiline':False]['text':' are to be combined.','line_number':791,'multiline':False]['text':'-----------------','line_number':792,'multiline':False]['text':' The Y coordinates are the same.','line_number':806,'multiline':False]['text':' Combine the scanlines, render if they contain any spans,','line_number':807,'multiline':False]['text':' and advance both generators to the next scanlines','line_number':808,'multiline':False]['text':'----------------------','line_number':809,'multiline':False]['text':'-------------------------------------------------sbool_unite_scanlines','line_number':828,'multiline':False]['text':' Unite two scanlines, "sl1" and "sl2" and generate a new "sl" one.','line_number':829,'multiline':False]['text':' The combine_spans functor can be of type sbool_combine_spans_bin or','line_number':830,'multiline':False]['text':' sbool_intersect_spans_aa. First is a general functor to combine','line_number':831,'multiline':False]['text':' two spans without Anti-Aliasing, the second preserves the AA','line_number':832,'multiline':False]['text':' information, but works slower','line_number':833,'multiline':False]['text':'','line_number':834,'multiline':False]['text':' = sl1.begin();','line_number':853,'multiline':False]['text':' = sl2.begin();','line_number':854,'multiline':False]['text':' Initialize the spans as invalid','line_number':862,'multiline':False]['text':'---------------','line_number':863,'multiline':False]['text':' Initialize span1 if there are spans','line_number':869,'multiline':False]['text':'---------------','line_number':870,'multiline':False]['text':' Initialize span2 if there are spans','line_number':879,'multiline':False]['text':'---------------','line_number':880,'multiline':False]['text':' Retrieve a new span1 if it's invalid','line_number':892,'multiline':False]['text':'----------------','line_number':893,'multiline':False]['text':' Retrieve a new span2 if it's invalid','line_number':902,'multiline':False]['text':'----------------','line_number':903,'multiline':False]['text':' Calculate the intersection','line_number':914,'multiline':False]['text':'----------------','line_number':915,'multiline':False]['text':' The length of the intersection','line_number':920,'multiline':False]['text':' The spans intersect,','line_number':923,'multiline':False]['text':' add the beginning of the span','line_number':924,'multiline':False]['text':'----------------','line_number':925,'multiline':False]['text':' Add the combination part of the spans','line_number':938,'multiline':False]['text':'----------------','line_number':939,'multiline':False]['text':' Invalidate the fully processed span or both','line_number':943,'multiline':False]['text':'----------------','line_number':944,'multiline':False]['text':' Invalidate span1 and eat','line_number':947,'multiline':False]['text':' the processed part of span2','line_number':948,'multiline':False]['text':'--------------','line_number':949,'multiline':False]['text':' Invalidate span2 and eat','line_number':957,'multiline':False]['text':' the processed part of span1','line_number':958,'multiline':False]['text':'--------------','line_number':959,'multiline':False]['text':' Invalidate both','line_number':966,'multiline':False]['text':' The spans do not intersect','line_number':974,'multiline':False]['text':'--------------','line_number':975,'multiline':False]['text':' Advance span1','line_number':978,'multiline':False]['text':'---------------','line_number':979,'multiline':False]['text':' Invalidate','line_number':984,'multiline':False]['text':' Advance span2','line_number':989,'multiline':False]['text':'---------------','line_number':990,'multiline':False]['text':' Invalidate','line_number':995,'multiline':False]['text':'----------------------------------------------------sbool_unite_shapes','line_number':1005,'multiline':False]['text':' Unite the scanline shapes. Here the "Scanline Generator" ','line_number':1006,'multiline':False]['text':' abstraction is used. ScanlineGen1 and ScanlineGen2 are ','line_number':1007,'multiline':False]['text':' the generators, and can be of type rasterizer_scanline_aa<>.','line_number':1008,'multiline':False]['text':' There function requires three scanline containers that can be ','line_number':1009,'multiline':False]['text':' of different type.','line_number':1010,'multiline':False]['text':' "sl1" and "sl2" are used to retrieve scanlines from the generators,','line_number':1011,'multiline':False]['text':' "sl" is ised as the resulting scanline to render it.','line_number':1012,'multiline':False]['text':' The external "sl1" and "sl2" are used only for the sake of','line_number':1013,'multiline':False]['text':' optimization and reusing of the scanline objects.','line_number':1014,'multiline':False]['text':' the function calls sbool_unite_scanlines with CombineSpansFunctor ','line_number':1015,'multiline':False]['text':' as the last argument. See sbool_unite_scanlines for details.','line_number':1016,'multiline':False]['text':'----------','line_number':1017,'multiline':False]['text':' Prepare the scanline generators.','line_number':1034,'multiline':False]['text':' If anyone of them doesn't contain ','line_number':1035,'multiline':False]['text':' any scanlines, then return.','line_number':1036,'multiline':False]['text':'-----------------','line_number':1037,'multiline':False]['text':' Get the bounding boxes','line_number':1042,'multiline':False]['text':'----------------','line_number':1043,'multiline':False]['text':' Calculate the union of the bounding boxes','line_number':1047,'multiline':False]['text':'-----------------','line_number':1048,'multiline':False]['text':' Reset the scanlines and get two first ones','line_number':1058,'multiline':False]['text':'-----------------','line_number':1059,'multiline':False]['text':' The main loop','line_number':1073,'multiline':False]['text':' Here we synchronize the scanlines with ','line_number':1074,'multiline':False]['text':' the same Y coordinate.','line_number':1075,'multiline':False]['text':'-----------------','line_number':1076,'multiline':False]['text':' The Y coordinates are the same.','line_number':1083,'multiline':False]['text':' Combine the scanlines, render if they contain any spans,','line_number':1084,'multiline':False]['text':' and advance both generators to the next scanlines','line_number':1085,'multiline':False]['text':'----------------------','line_number':1086,'multiline':False]['text':'-------------------------------------------------sbool_subtract_shapes','line_number':1134,'multiline':False]['text':' Subtract the scanline shapes, "sg1-sg2". Here the "Scanline Generator" ','line_number':1135,'multiline':False]['text':' abstraction is used. ScanlineGen1 and ScanlineGen2 are ','line_number':1136,'multiline':False]['text':' the generators, and can be of type rasterizer_scanline_aa<>.','line_number':1137,'multiline':False]['text':' There function requires three scanline containers that can be of','line_number':1138,'multiline':False]['text':' different types.','line_number':1139,'multiline':False]['text':' "sl1" and "sl2" are used to retrieve scanlines from the generators,','line_number':1140,'multiline':False]['text':' "sl" is ised as the resulting scanline to render it.','line_number':1141,'multiline':False]['text':' The external "sl1" and "sl2" are used only for the sake of','line_number':1142,'multiline':False]['text':' optimization and reusing of the scanline objects.','line_number':1143,'multiline':False]['text':' the function calls sbool_intersect_scanlines with CombineSpansFunctor ','line_number':1144,'multiline':False]['text':' as the last argument. See combine_scanlines_sub for details.','line_number':1145,'multiline':False]['text':'----------','line_number':1146,'multiline':False]['text':' Prepare the scanline generators.','line_number':1161,'multiline':False]['text':' Here "sg1" is master, "sg2" is slave.','line_number':1162,'multiline':False]['text':'-----------------','line_number':1163,'multiline':False]['text':' Get the bounding box','line_number':1167,'multiline':False]['text':'----------------','line_number':1168,'multiline':False]['text':' Reset the scanlines and get two first ones','line_number':1171,'multiline':False]['text':'-----------------','line_number':1172,'multiline':False]['text':' A fake span2 processor','line_number':1182,'multiline':False]['text':' The main loop','line_number':1185,'multiline':False]['text':' Here we synchronize the scanlines with ','line_number':1186,'multiline':False]['text':' the same Y coordinate, ignoring all other ones.','line_number':1187,'multiline':False]['text':' Only scanlines having the same Y-coordinate ','line_number':1188,'multiline':False]['text':' are to be combined.','line_number':1189,'multiline':False]['text':'-----------------','line_number':1190,'multiline':False]['text':' Synchronize "slave" with "master"','line_number':1194,'multiline':False]['text':'-----------------','line_number':1195,'multiline':False]['text':' The Y coordinates are the same.','line_number':1204,'multiline':False]['text':' Combine the scanlines and render if they contain any spans.','line_number':1205,'multiline':False]['text':'----------------------','line_number':1206,'multiline':False]['text':' Advance the "master"','line_number':1219,'multiline':False]['text':'---------------------------------------------sbool_intersect_shapes_aa','line_number':1231,'multiline':False]['text':' Intersect two anti-aliased scanline shapes. ','line_number':1232,'multiline':False]['text':' Here the "Scanline Generator" abstraction is used. ','line_number':1233,'multiline':False]['text':' ScanlineGen1 and ScanlineGen2 are the generators, and can be of ','line_number':1234,'multiline':False]['text':' type rasterizer_scanline_aa<>. There function requires three ','line_number':1235,'multiline':False]['text':' scanline containers that can be of different types.','line_number':1236,'multiline':False]['text':' "sl1" and "sl2" are used to retrieve scanlines from the generators,','line_number':1237,'multiline':False]['text':' "sl" is ised as the resulting scanline to render it.','line_number':1238,'multiline':False]['text':' The external "sl1" and "sl2" are used only for the sake of','line_number':1239,'multiline':False]['text':' optimization and reusing of the scanline objects.','line_number':1240,'multiline':False]['text':'----------','line_number':1241,'multiline':False]['text':'--------------------------------------------sbool_intersect_shapes_bin','line_number':1260,'multiline':False]['text':' Intersect two binary scanline shapes (without anti-aliasing). ','line_number':1261,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1262,'multiline':False]['text':'----------','line_number':1263,'multiline':False]['text':'-------------------------------------------------sbool_unite_shapes_aa','line_number':1282,'multiline':False]['text':' Unite two anti-aliased scanline shapes ','line_number':1283,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1284,'multiline':False]['text':'----------','line_number':1285,'multiline':False]['text':'------------------------------------------------sbool_unite_shapes_bin','line_number':1307,'multiline':False]['text':' Unite two binary scanline shapes (without anti-aliasing). ','line_number':1308,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1309,'multiline':False]['text':'----------','line_number':1310,'multiline':False]['text':'---------------------------------------------------sbool_xor_shapes_aa','line_number':1336,'multiline':False]['text':' Apply eXclusive OR to two anti-aliased scanline shapes. There's ','line_number':1337,'multiline':False]['text':' a modified "Linear" XOR used instead of classical "Saddle" one.','line_number':1338,'multiline':False]['text':' The reason is to have the result absolutely conststent with what','line_number':1339,'multiline':False]['text':' the scanline rasterizer produces.','line_number':1340,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1341,'multiline':False]['text':'----------','line_number':1342,'multiline':False]['text':'------------------------------------------sbool_xor_shapes_saddle_aa','line_number':1363,'multiline':False]['text':' Apply eXclusive OR to two anti-aliased scanline shapes. ','line_number':1364,'multiline':False]['text':' There's the classical "Saddle" used to calculate the ','line_number':1365,'multiline':False]['text':' Anti-Aliasing values, that is:','line_number':1366,'multiline':False]['text':' a XOR b : 1-((1-a+a*b)*(1-b+a*b))','line_number':1367,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1368,'multiline':False]['text':'----------','line_number':1369,'multiline':False]['text':'--------------------------------------sbool_xor_shapes_abs_diff_aa','line_number':1391,'multiline':False]['text':' Apply eXclusive OR to two anti-aliased scanline shapes. ','line_number':1392,'multiline':False]['text':' There's the absolute difference used to calculate ','line_number':1393,'multiline':False]['text':' Anti-Aliasing values, that is:','line_number':1394,'multiline':False]['text':' a XOR b : abs(a-b)','line_number':1395,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1396,'multiline':False]['text':'----------','line_number':1397,'multiline':False]['text':'--------------------------------------------------sbool_xor_shapes_bin','line_number':1420,'multiline':False]['text':' Apply eXclusive OR to two binary scanline shapes (without anti-aliasing). ','line_number':1421,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1422,'multiline':False]['text':'----------','line_number':1423,'multiline':False]['text':'----------------------------------------------sbool_subtract_shapes_aa','line_number':1446,'multiline':False]['text':' Subtract shapes "sg1-sg2" with anti-aliasing','line_number':1447,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1448,'multiline':False]['text':'----------','line_number':1449,'multiline':False]['text':'---------------------------------------------sbool_subtract_shapes_bin','line_number':1470,'multiline':False]['text':' Subtract binary shapes "sg1-sg2" without anti-aliasing','line_number':1471,'multiline':False]['text':' See intersect_shapes_aa for more comments','line_number':1472,'multiline':False]['text':'----------','line_number':1473,'multiline':False]['text':'------------------------------------------------------------sbool_op_e','line_number':1495,'multiline':False]['text':'----sbool_or','line_number':1498,'multiline':False]['text':'----sbool_and','line_number':1499,'multiline':False]['text':'----sbool_xor','line_number':1500,'multiline':False]['text':'----sbool_xor_saddle','line_number':1501,'multiline':False]['text':'----sbool_xor_abs_diff','line_number':1502,'multiline':False]['text':'----sbool_a_minus_b','line_number':1503,'multiline':False]['text':'----sbool_b_minus_a','line_number':1504,'multiline':False]['text':'----------------------------------------------sbool_combine_shapes_bin','line_number':1512,'multiline':False]['text':'-----------------------------------------------sbool_combine_shapes_aa','line_number':1539,'multiline':False]