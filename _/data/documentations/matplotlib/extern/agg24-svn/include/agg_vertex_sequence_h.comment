['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]['text':'          http://www.antigrain.com','line_number':13,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' vertex_sequence container and vertex_dist struct','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':18,'multiline':False]['text':'----------------------------------------------------------vertex_sequence','line_number':29,'multiline':False]['text':' Modified agg::pod_bvector. The data is interpreted as a sequence ','line_number':30,'multiline':False]['text':' of vertices. It means that the type T must expose:','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' bool T::operator() (const T& val)','line_number':33,'multiline':False]['text':' ','line_number':34,'multiline':False]['text':' that is called every time new vertex is being added. The main purpose','line_number':35,'multiline':False]['text':' of this operator is the possibility to calculate some values during ','line_number':36,'multiline':False]['text':' adding and to return true if the vertex fits some criteria or false if','line_number':37,'multiline':False]['text':' it doesn't. In the last case the new vertex is not added. ','line_number':38,'multiline':False]['text':' ','line_number':39,'multiline':False]['text':' The simple example is filtering coinciding vertices with calculation ','line_number':40,'multiline':False]['text':' of the distance between the current and previous ones:','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'    struct vertex_dist','line_number':43,'multiline':False]['text':'    {','line_number':44,'multiline':False]['text':'        double   x;','line_number':45,'multiline':False]['text':'        double   y;','line_number':46,'multiline':False]['text':'        double   dist;','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':'        vertex_dist() {}','line_number':49,'multiline':False]['text':'        vertex_dist(double x_, double y_) :','line_number':50,'multiline':False]['text':'            x(x_),','line_number':51,'multiline':False]['text':'            y(y_),','line_number':52,'multiline':False]['text':'            dist(0.0)','line_number':53,'multiline':False]['text':'        {','line_number':54,'multiline':False]['text':'        }','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':'        bool operator () (const vertex_dist& val)','line_number':57,'multiline':False]['text':'        {','line_number':58,'multiline':False]['text':'            return (dist = calc_distance(x, y, val.x, val.y)) > EPSILON;','line_number':59,'multiline':False]['text':'        }','line_number':60,'multiline':False]['text':'    };','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':' Function close() calls this operator and removes the last vertex if ','line_number':63,'multiline':False]['text':' necessary.','line_number':64,'multiline':False]['text':'------------------------------------------------------------------------','line_number':65,'multiline':False]['text':'------------------------------------------------------------------------','line_number':79,'multiline':False]['text':'------------------------------------------------------------------------','line_number':94,'multiline':False]['text':'------------------------------------------------------------------------','line_number':104,'multiline':False]['text':'-------------------------------------------------------------vertex_dist','line_number':127,'multiline':False]['text':' Vertex (x, y) with the distance to the next one. The last vertex has ','line_number':128,'multiline':False]['text':' distance between the last and the first points if the polygon is closed','line_number':129,'multiline':False]['text':' and 0.0 if it's a polyline.','line_number':130,'multiline':False]['text':'--------------------------------------------------------vertex_dist_cmd','line_number':155,'multiline':False]['text':' Save as the above but with additional "command" value','line_number':156,'multiline':False]