['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]['text':'          http://www.antigrain.com','line_number':13,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' Affine transformation classes.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':18,'multiline':False]['text':'============================================================trans_affine','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' See Implementation agg_trans_affine.cpp','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' Affine transformation are linear transformations in Cartesian coordinates','line_number':33,'multiline':False]['text':' (strictly speaking not only in Cartesian, but for the beginning we will ','line_number':34,'multiline':False]['text':' think so). They are rotation, scaling, translation and skewing.  ','line_number':35,'multiline':False]['text':' After any affine transformation a line segment remains a line segment ','line_number':36,'multiline':False]['text':' and it will never become a curve. ','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' There will be no math about matrix calculations, since it has been ','line_number':39,'multiline':False]['text':' described many times. Ask yourself a very simple question:','line_number':40,'multiline':False]['text':' "why do we need to understand and use some matrix stuff instead of just ','line_number':41,'multiline':False]['text':' rotating, scaling and so on". The answers are:','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' 1. Any combination of transformations can be done by only 4 multiplications','line_number':44,'multiline':False]['text':'    and 4 additions in floating point.','line_number':45,'multiline':False]['text':' 2. One matrix transformation is equivalent to the number of consecutive','line_number':46,'multiline':False]['text':'    discrete transformations, i.e. the matrix "accumulates" all transformations ','line_number':47,'multiline':False]['text':'    in the order of their settings. Suppose we have 4 transformations: ','line_number':48,'multiline':False]['text':'       * rotate by 30 degrees,','line_number':49,'multiline':False]['text':'       * scale X to 2.0, ','line_number':50,'multiline':False]['text':'       * scale Y to 1.5, ','line_number':51,'multiline':False]['text':'       * move to (100, 100). ','line_number':52,'multiline':False]['text':'    The result will depend on the order of these transformations, ','line_number':53,'multiline':False]['text':'    and the advantage of matrix is that the sequence of discret calls:','line_number':54,'multiline':False]['text':'    rotate(30), scaleX(2.0), scaleY(1.5), move(100,100) ','line_number':55,'multiline':False]['text':'    will have exactly the same result as the following matrix transformations:','line_number':56,'multiline':False]['text':'   ','line_number':57,'multiline':False]['text':'    affine_matrix m;','line_number':58,'multiline':False]['text':'    m *= rotate_matrix(30); ','line_number':59,'multiline':False]['text':'    m *= scaleX_matrix(2.0);','line_number':60,'multiline':False]['text':'    m *= scaleY_matrix(1.5);','line_number':61,'multiline':False]['text':'    m *= move_matrix(100,100);','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'    m.transform_my_point_at_last(x, y);','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' What is the good of it? In real life we will set-up the matrix only once','line_number':66,'multiline':False]['text':' and then transform many points, let alone the convenience to set any ','line_number':67,'multiline':False]['text':' combination of transformations.','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' So, how to use it? Very easy - literally as it's shown above. Not quite,','line_number':70,'multiline':False]['text':' let us write a correct example:','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' agg::trans_affine m;','line_number':73,'multiline':False]['text':' m *= agg::trans_affine_rotation(30.0 * 3.1415926 / 180.0);','line_number':74,'multiline':False]['text':' m *= agg::trans_affine_scaling(2.0, 1.5);','line_number':75,'multiline':False]['text':' m *= agg::trans_affine_translation(100.0, 100.0);','line_number':76,'multiline':False]['text':' m.transform(&x, &y);','line_number':77,'multiline':False]['text':'','line_number':78,'multiline':False]['text':' The affine matrix is all you need to perform any linear transformation,','line_number':79,'multiline':False]['text':' but all transformations have origin point (0,0). It means that we need to ','line_number':80,'multiline':False]['text':' use 2 translations if we want to rotate someting around (100,100):','line_number':81,'multiline':False]['text':' ','line_number':82,'multiline':False]['text':' m *= agg::trans_affine_translation(-100.0, -100.0);         // move to (0,0)','line_number':83,'multiline':False]['text':' m *= agg::trans_affine_rotation(30.0 * 3.1415926 / 180.0);  // rotate','line_number':84,'multiline':False]['text':' m *= agg::trans_affine_translation(100.0, 100.0);           // move back to (100,100)','line_number':85,'multiline':False]['text':'----------------------------------------------------------------------','line_number':86,'multiline':False]['text':'------------------------------------------ Construction','line_number':91,'multiline':False]['text':' Identity matrix','line_number':92,'multiline':False]['text':' Custom matrix. Usually used in derived classes','line_number':97,'multiline':False]['text':' Custom matrix from m[6]','line_number':103,'multiline':False]['text':' Rectangle to a parallelogram.','line_number':108,'multiline':False]['text':' Parallelogram to a rectangle.','line_number':115,'multiline':False]['text':' Arbitrary parallelogram transformation.','line_number':122,'multiline':False]['text':'---------------------------------- Parellelogram transformations','line_number':128,'multiline':False]['text':' transform a parallelogram to another one. Src and dst are ','line_number':129,'multiline':False]['text':' pointers to arrays of three points (double[6], x1,y1,...) that ','line_number':130,'multiline':False]['text':' identify three corners of the parallelograms assuming implicit ','line_number':131,'multiline':False]['text':' fourth point. The arguments are arrays of double[6] mapped ','line_number':132,'multiline':False]['text':' to x1,y1, x2,y2, x3,y3  where the coordinates are:','line_number':133,'multiline':False]['text':'        *-----------------*','line_number':134,'multiline':False]['text':'       /          (x3,y3)/','line_number':135,'multiline':False]['text':'      /                 /','line_number':136,'multiline':False]['text':'     /(x1,y1)   (x2,y2)/','line_number':137,'multiline':False]['text':'    *-----------------*','line_number':138,'multiline':False]['text':'------------------------------------------ Operations','line_number':151,'multiline':False]['text':' Reset - load an identity matrix','line_number':152,'multiline':False]['text':' Direct transformations operations','line_number':155,'multiline':False]['text':' Multiply matrix to another one','line_number':161,'multiline':False]['text':' Multiply "m" to "this" and assign the result to "this"','line_number':164,'multiline':False]['text':' Multiply matrix to inverse of another one','line_number':167,'multiline':False]['text':' Multiply inverse of "m" to "this" and assign the result to "this"','line_number':170,'multiline':False]['text':' Invert matrix. Do not try to invert degenerate matrices, ','line_number':173,'multiline':False]['text':' there's no check for validity. If you set scale to 0 and ','line_number':174,'multiline':False]['text':' then try to invert matrix, expect unpredictable result.','line_number':175,'multiline':False]['text':' Mirroring around X','line_number':178,'multiline':False]['text':' Mirroring around Y','line_number':181,'multiline':False]['text':'------------------------------------------- Load/Store','line_number':184,'multiline':False]['text':' Store matrix to an array [6] of double','line_number':185,'multiline':False]['text':' Load matrix from an array [6] of double','line_number':191,'multiline':False]['text':'------------------------------------------- Operators','line_number':198,'multiline':False]['text':' Multiply the matrix by another one','line_number':200,'multiline':False]['text':' Multiply the matrix by inverse of another one','line_number':206,'multiline':False]['text':' Multiply the matrix by another one and return','line_number':212,'multiline':False]['text':' the result in a separete matrix.','line_number':213,'multiline':False]['text':' Multiply the matrix by inverse of another one ','line_number':219,'multiline':False]['text':' and return the result in a separete matrix.','line_number':220,'multiline':False]['text':' Calculate and return the inverse matrix','line_number':226,'multiline':False]['text':' Equal operator with default epsilon','line_number':233,'multiline':False]['text':' Not Equal operator with default epsilon','line_number':239,'multiline':False]['text':'-------------------------------------------- Transformations','line_number':245,'multiline':False]['text':' Direct transformation of x and y','line_number':246,'multiline':False]['text':' Direct transformation of x and y, 2x2 matrix only, no translation','line_number':249,'multiline':False]['text':' Inverse transformation of x and y. It works slower than the ','line_number':252,'multiline':False]['text':' direct transformation. For massive operations it's better to ','line_number':253,'multiline':False]['text':' invert() the matrix and then use direct transformations. ','line_number':254,'multiline':False]['text':'-------------------------------------------- Auxiliary','line_number':257,'multiline':False]['text':' Calculate the determinant of matrix','line_number':258,'multiline':False]['text':' Calculate the reciprocal of the determinant','line_number':264,'multiline':False]['text':' Get the average scale (by X and Y). ','line_number':270,'multiline':False]['text':' Basically used to calculate the approximation_scale when','line_number':271,'multiline':False]['text':' decomposinting curves into line segments.','line_number':272,'multiline':False]['text':' Check to see if the matrix is not degenerate','line_number':275,'multiline':False]['text':' Check to see if it's an identity matrix','line_number':278,'multiline':False]['text':' Check to see if two matrices are equal','line_number':281,'multiline':False]['text':' Determine the major parameters. Use with caution considering ','line_number':284,'multiline':False]['text':' possible degenerate cases.','line_number':285,'multiline':False]['text':'------------------------------------------------------------------------','line_number':292,'multiline':False]['text':'------------------------------------------------------------------------','line_number':300,'multiline':False]['text':'------------------------------------------------------------------------','line_number':308,'multiline':False]['text':'------------------------------------------------------------------------','line_number':318,'multiline':False]['text':'------------------------------------------------------------------------','line_number':326,'multiline':False]['text':'------------------------------------------------------------------------','line_number':334,'multiline':False]['text':'------------------------------------------------------------------------','line_number':351,'multiline':False]['text':' Possible hint for the optimizer','line_number':354,'multiline':False]['text':'------------------------------------------------------------------------','line_number':365,'multiline':False]['text':' Possible hint for the optimizer','line_number':368,'multiline':False]['text':'------------------------------------------------------------------------','line_number':378,'multiline':False]['text':'------------------------------------------------------------------------','line_number':385,'multiline':False]['text':'------------------------------------------------------------------------','line_number':393,'multiline':False]['text':'------------------------------------------------------------------------','line_number':401,'multiline':False]['text':' Used to calculate scaling coefficients in image resampling. ','line_number':404,'multiline':False]['text':' When there is considerable shear this method gives us much','line_number':405,'multiline':False]['text':' better estimation than just sx, sy.','line_number':406,'multiline':False]['text':'====================================================trans_affine_rotation','line_number':411,'multiline':False]['text':' Rotation matrix. sin() and cos() are calculated twice for the same angle.','line_number':412,'multiline':False]['text':' There's no harm because the performance of sin()/cos() is very good on all','line_number':413,'multiline':False]['text':' modern processors. Besides, this operation is not going to be invoked too ','line_number':414,'multiline':False]['text':' often.','line_number':415,'multiline':False]['text':'====================================================trans_affine_scaling','line_number':424,'multiline':False]['text':' Scaling matrix. x, y - scale coefficients by X and Y respectively','line_number':425,'multiline':False]['text':'================================================trans_affine_translation','line_number':438,'multiline':False]['text':' Translation matrix','line_number':439,'multiline':False]['text':'====================================================trans_affine_skewing','line_number':448,'multiline':False]['text':' Sckewing (shear) matrix','line_number':449,'multiline':False]['text':'===============================================trans_affine_line_segment','line_number':459,'multiline':False]['text':' Rotate, Scale and Translate, associating 0...dist with line segment ','line_number':460,'multiline':False]['text':' x1,y1,x2,y2','line_number':461,'multiline':False]['text':'============================================trans_affine_reflection_unit','line_number':480,'multiline':False]['text':' Reflection matrix. Reflect coordinates across the line through ','line_number':481,'multiline':False]['text':' the origin containing the unit vector (ux, uy).','line_number':482,'multiline':False]['text':' Contributed by John Horigan','line_number':483,'multiline':False]['text':'=================================================trans_affine_reflection','line_number':497,'multiline':False]['text':' Reflection matrix. Reflect coordinates across the line through ','line_number':498,'multiline':False]['text':' the origin at the angle a or containing the non-unit vector (x, y).','line_number':499,'multiline':False]['text':' Contributed by John Horigan','line_number':500,'multiline':False]