['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]['text':' Anti-Grain Geometry - Version 2.4','line_number':2,'multiline':False]['text':' Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Permission to copy, use, modify, sell and distribute this software ','line_number':5,'multiline':False]['text':' is granted provided this copyright notice appears in all copies. ','line_number':6,'multiline':False]['text':' This software is provided "as is" without express or implied','line_number':7,'multiline':False]['text':' warranty, and with no claim as to its suitability for any purpose.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':10,'multiline':False]['text':' Contact: mcseem@antigrain.com','line_number':11,'multiline':False]['text':'          mcseemagg@yahoo.com','line_number':12,'multiline':False]['text':'          http://www.antigrain.com','line_number':13,'multiline':False]['text':'----------------------------------------------------------------------------','line_number':14,'multiline':False]['text':'-------------------------------------------------------pod_array_adaptor','line_number':25,'multiline':False]['text':'---------------------------------------------------------pod_auto_array','line_number':46,'multiline':False]['text':'--------------------------------------------------------pod_auto_vector','line_number':77,'multiline':False]['text':'---------------------------------------------------------------pod_array','line_number':105,'multiline':False]['text':'--------------------------------------------------------------pod_vector','line_number':158,'multiline':False]['text':' A simple class template to store Plain Old Data, a vector','line_number':159,'multiline':False]['text':' of a fixed size. The data is continous in memory','line_number':160,'multiline':False]['text':'------------------------------------------------------------------------','line_number':161,'multiline':False]['text':' Copying','line_number':171,'multiline':False]['text':' Set new capacity. All data is lost, size is set to zero.','line_number':175,'multiline':False]['text':' Allocate n elements. All data is lost, ','line_number':179,'multiline':False]['text':' but elements can be accessed in range 0...size-1. ','line_number':180,'multiline':False]['text':' Resize keeping the content.','line_number':183,'multiline':False]['text':'------------------------------------------------------------------------','line_number':218,'multiline':False]['text':'------------------------------------------------------------------------','line_number':231,'multiline':False]['text':'------------------------------------------------------------------------','line_number':240,'multiline':False]['text':'------------------------------------------------------------------------','line_number':260,'multiline':False]['text':'------------------------------------------------------------------------','line_number':266,'multiline':False]['text':'------------------------------------------------------------------------','line_number':275,'multiline':False]['text':'------------------------------------------------------------------------','line_number':284,'multiline':False]['text':'------------------------------------------------------------------------','line_number':290,'multiline':False]['text':'------------------------------------------------------------------------','line_number':299,'multiline':False]['text':'---------------------------------------------------------------pod_bvector','line_number':315,'multiline':False]['text':' A simple class template to store Plain Old Data, similar to std::deque','line_number':316,'multiline':False]['text':' It doesn't reallocate memory but instead, uses blocks of data of size ','line_number':317,'multiline':False]['text':' of (1 << S), that is, power of two. The data is NOT contiguous in memory, ','line_number':318,'multiline':False]['text':' so the only valid access method is operator [] or curr(), prev(), next()','line_number':319,'multiline':False]['text':' ','line_number':320,'multiline':False]['text':' There reallocs occure only when the pool of pointers to blocks needs ','line_number':321,'multiline':False]['text':' to be extended (it happens very rarely). You can control the value ','line_number':322,'multiline':False]['text':' of increment to reallocate the pointer buffer. See the second constructor.','line_number':323,'multiline':False]['text':' By default, the incremeent value equals (1 << S), i.e., the block size.','line_number':324,'multiline':False]['text':'------------------------------------------------------------------------','line_number':325,'multiline':False]['text':' Copying','line_number':342,'multiline':False]['text':'------------------------------------------------------------------------','line_number':513,'multiline':False]['text':'------------------------------------------------------------------------','line_number':529,'multiline':False]['text':'------------------------------------------------------------------------','line_number':551,'multiline':False]['text':'------------------------------------------------------------------------','line_number':562,'multiline':False]['text':'------------------------------------------------------------------------','line_number':574,'multiline':False]['text':'------------------------------------------------------------------------','line_number':594,'multiline':False]['text':'------------------------------------------------------------------------','line_number':613,'multiline':False]['text':'------------------------------------------------------------------------','line_number':638,'multiline':False]['text':'------------------------------------------------------------------------','line_number':652,'multiline':False]['text':'------------------------------------------------------------------------','line_number':661,'multiline':False]['text':'------------------------------------------------------------------------','line_number':669,'multiline':False]['text':'------------------------------------------------------------------------','line_number':678,'multiline':False]['text':' Allocate initial block if necessary','line_number':684,'multiline':False]['text':' The rest of the block is good, we can use it','line_number':689,'multiline':False]['text':'-----------------','line_number':690,'multiline':False]['text':' New block','line_number':696,'multiline':False]['text':'---------------','line_number':697,'multiline':False]['text':' Impossible to allocate','line_number':704,'multiline':False]['text':'------------------------------------------------------------------------','line_number':708,'multiline':False]['text':'------------------------------------------------------------------------','line_number':716,'multiline':False]['text':'------------------------------------------------------------------------','line_number':728,'multiline':False]['text':' Replace or add a number of elements starting from "start" position','line_number':744,'multiline':False]['text':'------------------------------------------------------------------------','line_number':745,'multiline':False]['text':'---------------------------------------------------------block_allocator','line_number':773,'multiline':False]['text':' Allocator for arbitrary POD data. Most usable in different cache','line_number':774,'multiline':False]['text':' systems for efficient memory allocations. ','line_number':775,'multiline':False]['text':' Memory is allocated with blocks of fixed size ("block_size" in','line_number':776,'multiline':False]['text':' the constructor). If required size exceeds the block size the allocator','line_number':777,'multiline':False]['text':' creates a new block of the required size. However, the most efficient','line_number':778,'multiline':False]['text':' use is when the average reqired size is much less than the block size. ','line_number':779,'multiline':False]['text':'------------------------------------------------------------------------','line_number':780,'multiline':False]['text':'------------------------------------------------------------------------','line_number':902,'multiline':False]['text':'-----------------------------------------------------------swap_elements','line_number':909,'multiline':False]['text':'--------------------------------------------------------------quick_sort','line_number':918,'multiline':False]['text':' we use base + len/2 as the pivot','line_number':942,'multiline':False]['text':' now ensure that *i <= *base <= *j ','line_number':949,'multiline':False]['text':' now, push the largest sub-array','line_number':977,'multiline':False]['text':' the sub-array is small, perform insertion sort','line_number':994,'multiline':False]['text':'------------------------------------------------------remove_duplicates','line_number':1026,'multiline':False]['text':' Remove duplicates from a sorted array. It doesn't cut the ','line_number':1027,'multiline':False]['text':' tail of the array, it just returns the number of remaining elements.','line_number':1028,'multiline':False]['text':'-----------------------------------------------------------------------','line_number':1029,'multiline':False]['text':'--------------------------------------------------------invert_container','line_number':1047,'multiline':False]['text':'------------------------------------------------------binary_search_pos','line_number':1058,'multiline':False]['text':'if(beg <= 0 && less(val, arr[0])) return 0;','line_number':1077,'multiline':False]['text':'if(end >= arr.size() - 1 && less(arr[end], val)) ++end;','line_number':1078,'multiline':False]['text':'----------------------------------------------------------range_adaptor','line_number':1083,'multiline':False]['text':'---------------------------------------------------------------int_less','line_number':1106,'multiline':False]['text':'------------------------------------------------------------int_greater','line_number':1109,'multiline':False]['text':'----------------------------------------------------------unsigned_less','line_number':1112,'multiline':False]['text':'-------------------------------------------------------unsigned_greater','line_number':1115,'multiline':False]