['text':' numpy<1.20.0 (Jan 2021)','line_number':22,'multiline':False]['text':' =================================================================================== #','line_number':44,'multiline':False]['text':' Base classes','line_number':45,'multiline':False]['text':' =================================================================================== #','line_number':46,'multiline':False]['text':' When True, scales for this property will populate the legend by default','line_number':52,'multiline':False]['text':' When True, scales for this property normalize data to [0, 1] before mapping','line_number':55,'multiline':False]['text':' TODO put these somewhere external for validation','line_number':79,'multiline':False]['text':' TODO putting this here won't pick it up if subclasses define infer_scale','line_number':80,'multiline':False]['text':' (e.g. color). How best to handle that? One option is to call super after','line_number':81,'multiline':False]['text':' handling property-specific possibilities (e.g. for color check that the','line_number':82,'multiline':False]['text':' arg is not a valid palette name) but that could get tricky.','line_number':83,'multiline':False]['text':' TODO validate numeric type? That should happen centrally somewhere','line_number':87,'multiline':False]['text':' TODO look into custom PlotSpecWarning with better formatting','line_number':133,'multiline':False]['text':' =================================================================================== #','line_number':140,'multiline':False]['text':' Properties relating to spatial position of marks on the plotting axes','line_number':141,'multiline':False]['text':' =================================================================================== #','line_number':142,'multiline':False]['text':' =================================================================================== #','line_number':151,'multiline':False]['text':' Properties with numeric values where scale range can be defined as an interval','line_number':152,'multiline':False]['text':' =================================================================================== #','line_number':153,'multiline':False]['text':' TODO infer continuous based on log/sqrt etc?','line_number':179,'multiline':False]['text':' TODO other variable types','line_number':191,'multiline':False]['text':' TODO use rcparams?','line_number':277,'multiline':False]['text':' TODO validate / enforce that output is in [0, 1]','line_number':314,'multiline':False]['text':' =================================================================================== #','line_number':334,'multiline':False]['text':' Properties defined by arbitrary objects with inherently nominal scaling','line_number':335,'multiline':False]['text':' =================================================================================== #','line_number':336,'multiline':False]['text':' Object representing null data, should appear invisible when drawn by matplotlib','line_number':344,'multiline':False]['text':' Note that we now drop nulls in Plot._plot_layer and thus may not need this','line_number':345,'multiline':False]['text':' TODO should we have named marker "palettes"? (e.g. see d3 options)','line_number':403,'multiline':False]['text':' TODO need some sort of "require_scale" functionality','line_number':405,'multiline':False]['text':' to raise when we get the wrong kind explicitly specified','line_number':406,'multiline':False]['text':' Start with marker specs that are well distinguishable','line_number':426,'multiline':False]['text':' Now generate more from regular polygons of increasing order','line_number':431,'multiline':False]['text':' Start with dash specs that are well distinguishable','line_number':467,'multiline':False]['text':' Now programmatically build as many as we need','line_number':472,'multiline':False]['text':' Take combinations of long and short dashes','line_number':476,'multiline':False]['text':' Interleave the combinations, reversing one of the streams','line_number':480,'multiline':False]['text':' Now insert the gaps','line_number':483,'multiline':False]['text':' Copied and modified from Matplotlib 3.4','line_number':496,'multiline':False]['text':' go from short hand -> full strings','line_number':497,'multiline':False]['text':' un-dashed styles','line_number':501,'multiline':False]['text':' dashed styles','line_number':505,'multiline':False]['text':' Normalize offset to be positive and shorter than the dash cycle','line_number':527,'multiline':False]['text':' =================================================================================== #','line_number':558,'multiline':False]['text':' Properties with  RGB(A) color values','line_number':559,'multiline':False]['text':' =================================================================================== #','line_number':560,'multiline':False]['text':' Return color with alpha channel only if the input spec has it','line_number':569,'multiline':False]['text':' This is so that RGBA colors can override the Alpha property','line_number':570,'multiline':False]['text':' TODO when inferring Continuous without data, verify type','line_number':592,'multiline':False]['text':' TODO need to rethink the variable type system','line_number':594,'multiline':False]['text':' (e.g. boolean, ordered categories as Ordinal, etc)..','line_number':595,'multiline':False]['text':' TODO It seems reasonable to allow a gradient mapping for nominal','line_number':606,'multiline':False]['text':' scale but it also feels "technically" wrong. Should this infer','line_number':607,'multiline':False]['text':' Ordinal with categorical data and, if so, verify orderedness?','line_number':608,'multiline':False]['text':' TODO Do we accept str like "log", "pow", etc. for semantics?','line_number':615,'multiline':False]['text':' TODO implement scales for date variables and any others.','line_number':628,'multiline':False]['text':' TODO what is best way to do this conditional?','line_number':634,'multiline':False]['text':' Should it be class-based or should classes have behavioral attributes?','line_number':635,'multiline':False]['text':' TODO Rethink best default continuous color gradient','line_number':642,'multiline':False]['text':' TODO blend_palette will strip alpha, but we should support','line_number':645,'multiline':False]['text':' interpolation on all four channels','line_number':646,'multiline':False]['text':' TODO for matplotlib colormaps this will clip extremes, which is','line_number':649,'multiline':False]['text':' different from what using the named colormap directly would do','line_number':650,'multiline':False]['text':' This may or may not be desireable.','line_number':651,'multiline':False]['text':' Remove alpha channel so it does not override alpha property downstream','line_number':664,'multiline':False]['text':' TODO this will need to be more flexible to support RGBA tuples (see above)','line_number':665,'multiline':False]['text':' Use current (global) default palette','line_number':717,'multiline':False]['text':' =================================================================================== #','line_number':732,'multiline':False]['text':' Properties that can take only two states','line_number':733,'multiline':False]['text':' =================================================================================== #','line_number':734,'multiline':False]['text':' TODO fire in a "nice" way (see above)','line_number':760,'multiline':False]['text':' =================================================================================== #','line_number':801,'multiline':False]['text':' Enumeration of properties for use by Plot and Mark classes','line_number':802,'multiline':False]['text':' =================================================================================== #','line_number':803,'multiline':False]['text':' TODO turn this into a property registry with hooks, etc.','line_number':804,'multiline':False]['text':' TODO Users do not interact directly with properties, so how to document them?','line_number':805,'multiline':False]['text':' TODO pattern?','line_number':835,'multiline':False]['text':' TODO gradient?','line_number':836,'multiline':False]