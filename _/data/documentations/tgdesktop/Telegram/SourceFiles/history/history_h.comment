['text':'
This file is part of Telegram Desktop,
the official desktop application for the Telegram messaging service.

For license and copyright information please follow this link:
https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
','line_number':1,'multiline':True]['text':' namespace Main','line_number':29,'multiline':False]['text':' namespace Data','line_number':61,'multiline':False]['text':' namespace Dialogs','line_number':66,'multiline':False]['text':' namespace HistoryView','line_number':70,'multiline':False]['text':' sponsored','line_number':204,'multiline':False]['text':' Used only internally and for channel admin log.','line_number':206,'multiline':False]['text':' Some old unread count is known, but we read history till some place.','line_number':247,'multiline':False]['text':' last message is in the list','line_number':262,'multiline':False]['text':' nothing was added after loading history back','line_number':264,'multiline':False]['text':' has messages for showing history at msgId','line_number':265,'multiline':False]['text':' find the correct scrollTopItem and scrollTopOffset using given top','line_number':410,'multiline':False]['text':' of the displayed window relative to the history start coordinate','line_number':411,'multiline':False]['text':' Interface for Data::Histories.','line_number':425,'multiline':False]['text':' Still public data.','line_number':440,'multiline':False]['text':' we save the last showAtMsgId to restore the state when switching','line_number':443,'multiline':False]['text':' between different conversation histories','line_number':444,'multiline':False]['text':' we save a pointer of the history item at the top of the displayed window','line_number':447,'multiline':False]['text':' together with an offset from the window top to the top of this message','line_number':448,'multiline':False]['text':' resulting scrollTop = top(scrollTopItem) + scrollTopOffset','line_number':449,'multiline':False]['text':' when this item is destroyed scrollTopItem just points to the next one','line_number':480,'multiline':False]['text':' and scrollTopOffset remains the same','line_number':481,'multiline':False]['text':' if we are at the bottom of the window scrollTopItem == nullptr and','line_number':482,'multiline':False]['text':' scrollTopOffset is undefined','line_number':483,'multiline':False]['text':' helper method for countScrollState(int top)','line_number':486,'multiline':False]['text':' this method just removes a block from the blocks list','line_number':489,'multiline':False]['text':' when the last item from this block was detached and','line_number':490,'multiline':False]['text':' calls the required previousItemChanged()','line_number':491,'multiline':False]['text':' All this methods add a new item to the first or last block','line_number':509,'multiline':False]['text':' depending on if we are in isBuildingFronBlock() state.','line_number':510,'multiline':False]['text':' The last block is created on the go if it is needed.','line_number':511,'multiline':False]['text':' Adds the item to the back or front block, depending on','line_number':513,'multiline':False]['text':' isBuildingFrontBlock(), creating the block if necessary.','line_number':514,'multiline':False]['text':' Usually all new items are added to the last block.','line_number':517,'multiline':False]['text':' Only when we scroll up and add a new slice to the','line_number':518,'multiline':False]['text':' front we want to create a new front block.','line_number':519,'multiline':False]['text':' After adding a new history slice check lastMessage / loadedAtBottom.','line_number':547,'multiline':False]['text':' Add all items to the unread mentions if we were not loaded at bottom and now are.','line_number':561,'multiline':False]['text':' Creates if necessary a new block for adding item.','line_number':575,'multiline':False]['text':' Depending on isBuildingFrontBlock() gets front or back block.','line_number':576,'multiline':False]['text':' This almost always is equal to _lastMessage. The only difference is','line_number':618,'multiline':False]['text':' for a group that migrated to a supergroup. Then _lastMessage can','line_number':619,'multiline':False]['text':' be a migrate message, but _chatListMessage should be the one before.','line_number':620,'multiline':False]['text':' A pointer to the block that is currently being built.','line_number':625,'multiline':False]['text':' We hold this pointer so we can destroy it while building','line_number':626,'multiline':False]['text':' and then create a new one if it is necessary.','line_number':627,'multiline':False]['text':' optimization for block->items.reserve() call','line_number':629,'multiline':False]