['text':'===-- scudo/interface.h ---------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' Post-allocation & pre-deallocation hooks.','line_number':19,'multiline':False]['text':' They must be thread-safe and not use heap related functions.','line_number':20,'multiline':False]['text':' Determine the likely cause of a tag check fault or other memory protection','line_number':28,'multiline':False]['text':' error on a system with memory tagging support. The results are returned via','line_number':29,'multiline':False]['text':' the error_info data structure. Up to three possible causes are returned in','line_number':30,'multiline':False]['text':' the reports array, in decreasing order of probability. The remaining elements','line_number':31,'multiline':False]['text':' of reports are zero-initialized.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' This function may be called from a different process from the one that','line_number':34,'multiline':False]['text':' crashed. In this case, various data structures must be copied from the','line_number':35,'multiline':False]['text':' crashing process to the process that analyzes the crash.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' This interface is not guaranteed to be stable and may change at any time.','line_number':38,'multiline':False]['text':' Furthermore, the version of scudo in the crashing process must be the same as','line_number':39,'multiline':False]['text':' the version in the process that analyzes the crash.','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' fault_addr is the fault address. On aarch64 this is available in the system','line_number':42,'multiline':False]['text':' register FAR_ELx, or siginfo.si_addr in Linux 5.11 or above. This address','line_number':43,'multiline':False]['text':' must include the pointer tag; this is available if SA_EXPOSE_TAGBITS was set','line_number':44,'multiline':False]['text':' in sigaction.sa_flags when the signal handler was registered. Note that the','line_number':45,'multiline':False]['text':' kernel strips the tag from the field sigcontext.fault_address, so this','line_number':46,'multiline':False]['text':' address is not suitable to be passed as fault_addr.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' stack_depot is a pointer to the stack depot data structure, which may be','line_number':49,'multiline':False]['text':' obtained by calling the function __scudo_get_stack_depot_addr() in the','line_number':50,'multiline':False]['text':' crashing process. The size of the stack depot is available by calling the','line_number':51,'multiline':False]['text':' function __scudo_get_stack_depot_size().','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' region_info is a pointer to the region info data structure, which may be','line_number':54,'multiline':False]['text':' obtained by calling the function __scudo_get_region_info_addr() in the','line_number':55,'multiline':False]['text':' crashing process. The size of the region info is available by calling the','line_number':56,'multiline':False]['text':' function __scudo_get_region_info_size().','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' memory is a pointer to a region of memory surrounding the fault address.','line_number':59,'multiline':False]['text':' The more memory available via this pointer, the more likely it is that the','line_number':60,'multiline':False]['text':' function will be able to analyze a crash correctly. It is recommended to','line_number':61,'multiline':False]['text':' provide an amount of memory equal to 16 * the primary allocator's largest','line_number':62,'multiline':False]['text':' size class either side of the fault address.','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' memory_tags is a pointer to an array of memory tags for the memory accessed','line_number':65,'multiline':False]['text':' via memory. Each byte of this array corresponds to a region of memory of size','line_number':66,'multiline':False]['text':' equal to the architecturally defined memory tag granule size (16 on aarch64).','line_number':67,'multiline':False]['text':'','line_number':68,'multiline':False]['text':' memory_addr is the start address of memory in the crashing process's address','line_number':69,'multiline':False]['text':' space.','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' memory_size is the size of the memory region referred to by the memory','line_number':72,'multiline':False]['text':' pointer.','line_number':73,'multiline':False]['text':' Tune the allocator's choice of memory tags to make it more likely that','line_number':125,'multiline':False]['text':' a certain class of memory errors will be detected. The value argument should','line_number':126,'multiline':False]['text':' be one of the M_MEMTAG_TUNING_* constants below.','line_number':127,'multiline':False]['text':' Per-thread memory initialization tuning. The value argument should be one of:','line_number':132,'multiline':False]['text':' 1: Disable automatic heap initialization and, where possible, memory tagging,','line_number':133,'multiline':False]['text':'    on this thread.','line_number':134,'multiline':False]['text':' 0: Normal behavior.','line_number':135,'multiline':False]['text':' Tune for buffer overflows.','line_number':152,'multiline':False]['text':' Tune for use-after-free.','line_number':157,'multiline':False]['text':' Print internal stats to the log.','line_number':162,'multiline':False]['text':' extern "C"','line_number':167,'multiline':False]['text':' SCUDO_INTERFACE_H_','line_number':169,'multiline':False]