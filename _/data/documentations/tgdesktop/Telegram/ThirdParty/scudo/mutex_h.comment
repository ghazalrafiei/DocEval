['text':'===-- mutex.h -------------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' for sync_mutex_t','line_number':19,'multiline':False]['text':' The compiler may try to fully unroll the loop, ending up in a','line_number':30,'multiline':False]['text':' NumberOfTries*NumberOfYields block of pauses mixed with tryLocks. This','line_number':31,'multiline':False]['text':' is large, ugly and unneeded, a compact loop is better for our purpose','line_number':32,'multiline':False]['text':' here. Use a pragma to tell the compiler not to unroll the loop.','line_number':33,'multiline':False]['text':' TODO(chiahungduan): In general, we may want to assert the owner of lock as','line_number':46,'multiline':False]['text':' well. Given the current uses of HybridMutex, it's acceptable without','line_number':47,'multiline':False]['text':' asserting the owner. Re-evaluate this when we have certain scenarios which','line_number':48,'multiline':False]['text':' requires a more fine-grained lock granularity.','line_number':49,'multiline':False]['text':' namespace scudo','line_number':82,'multiline':False]['text':' SCUDO_MUTEX_H_','line_number':84,'multiline':False]