['text':'===-- internal_defs.h -----------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' String related macros.','line_number':22,'multiline':False]['text':' Attributes & builtins related macros.','line_number':29,'multiline':False]['text':' __builtin_prefetch(X) generates prefetchnt0 on x86','line_number':42,'multiline':False]['text':' This check is only available on Clang. This is essentially an alias of','line_number':51,'multiline':False]['text':' C++20's 'constinit' specifier which will take care of this when (if?) we can','line_number':52,'multiline':False]['text':' ask all libc's that use Scudo to compile us with C++20. Dynamic','line_number':53,'multiline':False]['text':' initialization is bad; Scudo is designed to be lazy-initializated on the','line_number':54,'multiline':False]['text':' first call to malloc/free (and friends), and this generally happens in the','line_number':55,'multiline':False]['text':' loader somewhere in libdl's init. After the loader is done, control is','line_number':56,'multiline':False]['text':' transferred to libc's initialization, and the dynamic initializers are run.','line_number':57,'multiline':False]['text':' If there's a dynamic initializer for Scudo, then it will clobber the','line_number':58,'multiline':False]['text':' already-initialized Scudo, and re-initialize all its members back to default','line_number':59,'multiline':False]['text':' values, causing various explosions. Unfortunately, marking','line_number':60,'multiline':False]['text':' scudo::Allocator<>'s constructor as 'constexpr' isn't sufficient to prevent','line_number':61,'multiline':False]['text':' dynamic initialization, as default initialization is fine under 'constexpr'','line_number':62,'multiline':False]['text':' (but not 'constinit'). Clang at -O0, and gcc at all opt levels will emit a','line_number':63,'multiline':False]['text':' dynamic initializer for any constant-initialized variables if there is a mix','line_number':64,'multiline':False]['text':' of default-initialized and constant-initialized variables.','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' If you're looking at this because your build failed, you probably introduced','line_number':67,'multiline':False]['text':' a new member to scudo::Allocator<> (possibly transiently) that didn't have an','line_number':68,'multiline':False]['text':' initializer. The fix is easy - just add one.','line_number':69,'multiline':False]['text':' The following two functions have platform specific implementations.','line_number':92,'multiline':False]['text':' The superfluous die() call effectively makes this macro NORETURN.','line_number':157,'multiline':False]['text':' namespace scudo','line_number':164,'multiline':False]['text':' SCUDO_INTERNAL_DEFS_H_','line_number':166,'multiline':False]