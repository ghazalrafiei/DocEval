['text':'===-- secondary.h ---------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' This allocator wraps the platform allocation primitives, and as such is on','line_number':25,'multiline':False]['text':' the slower side and should preferably be used for larger sized allocations.','line_number':26,'multiline':False]['text':' Blocks allocated will be preceded and followed by a guard page, and hold','line_number':27,'multiline':False]['text':' their own header that is not checksummed: the guard pages and the Combined','line_number':28,'multiline':False]['text':' header should be enough for our purpose.','line_number':29,'multiline':False]['text':' namespace LargeBlock','line_number':65,'multiline':False]['text':' Note that the `H->MapMap` is stored on the pages managed by itself. Take','line_number':68,'multiline':False]['text':' over the ownership before unmap() so that any operation along with unmap()','line_number':69,'multiline':False]['text':' won't touch inaccessible pages.','line_number':70,'multiline':False]['text':' Not supported by the Secondary Cache, but not an error either.','line_number':93,'multiline':False]['text':' Template specialization to avoid producing zero-length array','line_number':122,'multiline':False]['text':' Ensure the default maximum specified fits the array.','line_number':155,'multiline':False]['text':' Release the memory and make it inaccessible at the same time by','line_number':186,'multiline':False]['text':' creating a new MAP_NOACCESS mapping on top of the existing mapping.','line_number':187,'multiline':False]['text':' Fuchsia does not support replacing mappings by creating a new mapping','line_number':188,'multiline':False]['text':' on top so we just do the two syscalls there.','line_number':189,'multiline':False]['text':' If we get here then memory tagging was disabled in between when we','line_number':204,'multiline':False]['text':' read Options and when we locked Mutex. We can't insert our entry into','line_number':205,'multiline':False]['text':' the quarantine or the cache because the permissions would be wrong so','line_number':206,'multiline':False]['text':' just unmap it.','line_number':207,'multiline':False]['text':' Not supported by the Secondary Cache, but not an error either.','line_number':332,'multiline':False]['text':' As with the Primary, the size passed to this function includes any desired','line_number':503,'multiline':False]['text':' alignment, so that the frontend can align the user allocation. The hint','line_number':504,'multiline':False]['text':' parameter allows us to unmap spurious memory when dealing with larger','line_number':505,'multiline':False]['text':' (greater than a page) alignments on 32-bit platforms.','line_number':506,'multiline':False]['text':' Due to the sparsity of address space available on those platforms, requesting','line_number':507,'multiline':False]['text':' an allocation from the Secondary with a large alignment would end up wasting','line_number':508,'multiline':False]['text':' VA space (even though we are not committing the whole thing), hence the need','line_number':509,'multiline':False]['text':' to trim off some of the reserved space.','line_number':510,'multiline':False]['text':' For allocations requested with an alignment greater than or equal to a page,','line_number':511,'multiline':False]['text':' the committed memory will amount to something close to Size - AlignmentHint','line_number':512,'multiline':False]['text':' (pending rounding and headers).','line_number':513,'multiline':False]['text':'Addr=','line_number':558,'multiline':True]['text':' Take the entire ownership of reserved region.','line_number':560,'multiline':False]['text':' In the unlikely event of alignments larger than a page, adjust the amount','line_number':569,'multiline':False]['text':' of memory we want to commit, and trim the extra memory.','line_number':570,'multiline':False]['text':' For alignments greater than or equal to a page, the user pointer (eg: the','line_number':572,'multiline':False]['text':' pointer that is returned by the C or C++ allocation APIs) ends up on a','line_number':573,'multiline':False]['text':' page boundary , and our headers will live in the preceding page.','line_number':574,'multiline':False]['text':' We only trim the extra memory on 32-bit platforms: 64-bit platforms','line_number':578,'multiline':False]['text':' are less constrained memory wise, and that saves us two syscalls.','line_number':579,'multiline':False]['text':' namespace scudo','line_number':648,'multiline':False]['text':' SCUDO_SECONDARY_H_','line_number':650,'multiline':False]