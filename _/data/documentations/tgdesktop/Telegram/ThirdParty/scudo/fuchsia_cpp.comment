['text':'===-- fuchsia.cpp ---------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' for sync_mutex_t','line_number':17,'multiline':False]['text':' for getenv()','line_number':18,'multiline':False]['text':' We zero-initialize the Extra parameter of map(), make sure this is consistent','line_number':31,'multiline':False]['text':' with ZX_HANDLE_INVALID.','line_number':32,'multiline':False]['text':' Only scenario so far.','line_number':46,'multiline':False]['text':' For MAP_NOACCESS, just allocate a Vmar and return.','line_number':67,'multiline':False]['text':' If a Vmo was specified, it's a resize operation.','line_number':79,'multiline':False]['text':' Otherwise, create a Vmo and set its name.','line_number':91,'multiline':False]['text':'buffer=','line_number':119,'multiline':True]['text':'buffer_size=','line_number':119,'multiline':True]['text':' No need to track the Vmo if we don't intend on resizing it. Close it.','line_number':122,'multiline':False]['text':' Destroying the vmar effectively unmaps the whole mapping.','line_number':149,'multiline':False]['text':' TODO: DCHECK the BaseAddress is consistent with the data in','line_number':181,'multiline':False]['text':' MapPlatformData.','line_number':182,'multiline':False]['text':' Note: we need to flag these methods with __TA_NO_THREAD_SAFETY_ANALYSIS','line_number':193,'multiline':False]['text':' because the Fuchsia implementation of sync_mutex_t has clang thread safety','line_number':194,'multiline':False]['text':' annotations. Were we to apply proper capability annotations to the top level','line_number':195,'multiline':False]['text':' HybridMutex class itself, they would not be needed. As it stands, the','line_number':196,'multiline':False]['text':' thread analysis thinks that we are locking the mutex and accidentally leaving','line_number':197,'multiline':False]['text':' it locked on the way out.','line_number':198,'multiline':False]['text':' Size and alignment must be compatible between both types.','line_number':200,'multiline':False]['text':' namespace scudo','line_number':235,'multiline':False]['text':' SCUDO_FUCHSIA','line_number':237,'multiline':False]