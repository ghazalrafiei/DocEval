['text':'===-- local_cache.h -------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' u16 will be promoted to int by arithmetic type conversion.','line_number':35,'multiline':False]['text':' Append from the back of `B`.','line_number':41,'multiline':False]['text':' u16 will be promoted to int by arithmetic type conversion.','line_number':43,'multiline':False]['text':' A BatchGroup is used to collect blocks. Each group has a group id to','line_number':71,'multiline':False]['text':' identify the group kind of contained blocks.','line_number':72,'multiline':False]['text':' `Next` is used by IntrusiveList.','line_number':74,'multiline':False]['text':' The compact base address of each group','line_number':76,'multiline':False]['text':' Cache value of TransferBatch::getMaxCached()','line_number':78,'multiline':False]['text':' Number of blocks pushed into this group. This is an increment-only','line_number':80,'multiline':False]['text':' counter.','line_number':81,'multiline':False]['text':' This is used to track how many bytes are not in-use since last time we','line_number':83,'multiline':False]['text':' tried to release pages.','line_number':84,'multiline':False]['text':' Blocks are managed by TransferBatch in a list.','line_number':86,'multiline':False]['text':' We read ClassSize first before accessing Chunks because it's adjacent to','line_number':115,'multiline':False]['text':' Count, while Chunks might be further off (depending on Count). That keeps','line_number':116,'multiline':False]['text':' the memory accesses in close quarters.','line_number':117,'multiline':False]['text':' We still have to initialize the cache in the event that the first heap','line_number':128,'multiline':False]['text':' operation in a thread is a deallocation.','line_number':129,'multiline':False]['text':' If the cache is full, drain half of blocks back to the main allocator.','line_number':132,'multiline':False]['text':' See comment in allocate() about memory accesses.','line_number':136,'multiline':False]['text':' Drain BatchClassId last as createBatch can refill it.','line_number':154,'multiline':False]['text':' The size of BatchClass is set to 0 intentionally. See the comment in','line_number':190,'multiline':False]['text':' initCache() for more details.','line_number':191,'multiline':False]['text':' Note that the string utils don't support printing u16 thus we cast it','line_number':195,'multiline':False]['text':' to a common use type uptr.','line_number':196,'multiline':False]['text':' Note: ClassSize is zero for the transfer batch.','line_number':212,'multiline':False]['text':' ClassSize in this struct is only used for malloc/free stats, which','line_number':235,'multiline':False]['text':' should only track user allocations, not internal movements.','line_number':236,'multiline':False]['text':' u16 will be promoted to int by arithmetic type conversion.','line_number':263,'multiline':False]['text':' namespace scudo','line_number':270,'multiline':False]['text':' SCUDO_LOCAL_CACHE_H_','line_number':272,'multiline':False]