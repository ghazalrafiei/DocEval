['text':'===-- release_test.cpp ----------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' Various valid counter's max values packed into one word.','line_number':23,'multiline':False]['text':' Check the "all bit set" values too.','line_number':27,'multiline':False]['text':' Verify the packing ratio, the counter is Expected to be packed into the','line_number':31,'multiline':False]['text':' closest power of 2 bits.','line_number':32,'multiline':False]['text':' Go through 1, 2, 4, 8, .. {32,64} bits per counter.','line_number':39,'multiline':False]['text':' Make sure counters request one memory page for the buffer.','line_number':41,'multiline':False]['text':' Similar to the above except that we are using incN().','line_number':62,'multiline':False]['text':' Make sure counters request one memory page for the buffer.','line_number':64,'multiline':False]['text':' 'x' denotes a page to be released, '.' denotes a page to be kept around.','line_number':108,'multiline':False]['text':' Strip trailing '.'-pages before comparing the results as they are not','line_number':134,'multiline':False]['text':' going to be reported to range_recorder anyway.','line_number':135,'multiline':False]['text':' Simplified version of a TransferBatch.','line_number':160,'multiline':False]['text':' Generate the random free list.','line_number':192,'multiline':False]['text':' Shuffle the array to ensure that the order is irrelevant.','line_number':206,'multiline':False]['text':' Build the FreeList from the FreeArray.','line_number':209,'multiline':False]['text':' Release the memory.','line_number':224,'multiline':False]['text':'NumberOfRegions=','line_number':228,'multiline':True]['text':'ReleaseSize=','line_number':229,'multiline':True]['text':'RegionIndex=','line_number':232,'multiline':True]['text':'MayContainLastBlockInRegion=','line_number':233,'multiline':True]['text':' Verify that there are no released pages touched by used chunks and all','line_number':238,'multiline':False]['text':' ranges of free chunks big enough to contain the entire memory pages had','line_number':239,'multiline':False]['text':' these pages released.','line_number':240,'multiline':False]['text':' Verify that this used chunk does not touch any released page.','line_number':256,'multiline':False]['text':' Verify that all entire memory pages covered by this range of free','line_number':269,'multiline':False]['text':' chunks were released.','line_number':270,'multiline':False]['text':'NumberOfRegions=','line_number':337,'multiline':True]['text':'ReleaseSize=','line_number':338,'multiline':True]['text':'Base=','line_number':339,'multiline':True]['text':'RegionIndex=','line_number':340,'multiline':True]['text':' All the pages before first block page are not supposed to be marked.','line_number':345,'multiline':False]['text':'Region=','line_number':348,'multiline':True]['text':' Verify the pages used by the blocks in the group except that if the','line_number':351,'multiline':False]['text':' end of the last block is not aligned with `GroupEnd`, it'll be verified','line_number':352,'multiline':False]['text':' later.','line_number':353,'multiline':False]['text':' First used page in the group has two cases, which are w/ and w/o','line_number':359,'multiline':False]['text':' block sitting across the boundary.','line_number':360,'multiline':False]['text':'Region=','line_number':363,'multiline':True]['text':' There's a block straddling `GroupBeg`, it's supposed to only','line_number':365,'multiline':False]['text':' increment the counter and we expect it should be 1 less','line_number':366,'multiline':False]['text':' (exclude the straddling one) than the total blocks on the page.','line_number':367,'multiline':False]['text':'Region=','line_number':368,'multiline':True]['text':'Region=','line_number':372,'multiline':True]['text':' Examine the last block which sits across the group boundary.','line_number':380,'multiline':False]['text':' This is the last block in the region, it's supposed to mark all the','line_number':382,'multiline':False]['text':' pages as all counted.','line_number':383,'multiline':False]['text':'Region=','line_number':386,'multiline':True]['text':'Region=','line_number':392,'multiline':True]['text':'Region=','line_number':394,'multiline':True]['text':'Region=','line_number':402,'multiline':True]['text':' Iterate each Group','line_number':404,'multiline':False]['text':' Release the entire region. This is to ensure the last page is counted.','line_number':406,'multiline':False]['text':'NumberOfRegions=','line_number':407,'multiline':True]['text':'ReleaseSize=','line_number':408,'multiline':True]['text':'From=','line_number':409,'multiline':True]['text':'To=','line_number':409,'multiline':True]['text':'Base=','line_number':409,'multiline':True]['text':'RegionIndex=','line_number':410,'multiline':True]['text':'Region=','line_number':412,'multiline':True]['text':' Iterate each size class','line_number':413,'multiline':False]['text':' In the following, we want to ensure the region includes at least 2 pages','line_number':421,'multiline':False]['text':' and we will release all the pages except the first one. The handling of','line_number':422,'multiline':False]['text':' the last block is tricky, so we always test the case that includes the','line_number':423,'multiline':False]['text':' last block.','line_number':424,'multiline':False]['text':' Skip the blocks in the first page and add the remaining.','line_number':437,'multiline':False]['text':' This follows the logic how we count the last page. It should be','line_number':448,'multiline':False]['text':' consistent with how markFreeBlocksInRegion() handles the last block.','line_number':449,'multiline':False]['text':' If FirstBlock is not aligned with page boundary, the first touched','line_number':473,'multiline':False]['text':' page will not be released either.','line_number':474,'multiline':False]['text':' Test marking by visiting each block.','line_number':484,'multiline':False]['text':'NumberOfRegions=','line_number':487,'multiline':True]['text':'ReleaseSize=','line_number':488,'multiline':True]['text':'Base=','line_number':490,'multiline':True]['text':'RegionIndex=','line_number':491,'multiline':True]['text':'MayContainLastBlockInRegion=','line_number':492,'multiline':True]['text':'Region=','line_number':498,'multiline':True]['text':' Test range marking.','line_number':507,'multiline':False]['text':'NumberOfRegions=','line_number':509,'multiline':True]['text':'ReleaseSize=','line_number':510,'multiline':True]['text':'Base=','line_number':512,'multiline':True]['text':'RegionIndex=','line_number':513,'multiline':True]['text':'Region=','line_number':516,'multiline':True]['text':'Region=','line_number':518,'multiline':True]['text':' Check the buffer size of PageMap.','line_number':526,'multiline':False]['text':'NumberOfRegions=','line_number':528,'multiline':True]['text':'ReleaseSize=','line_number':529,'multiline':True]['text':'NumberOfRegions=','line_number':531,'multiline':True]['text':'ReleaseSize=','line_number':532,'multiline':True]['text':' Iterate each size class','line_number':544,'multiline':False]['text':' We want to test if a memory group only contains single block that will be','line_number':576,'multiline':False]['text':' handled properly. The case is like:','line_number':577,'multiline':False]['text':'','line_number':578,'multiline':False]['text':'   From                     To','line_number':579,'multiline':False]['text':'     +----------------------+','line_number':580,'multiline':False]['text':'  +------------+------------+','line_number':581,'multiline':False]['text':'  |            |            |','line_number':582,'multiline':False]['text':'  +------------+------------+','line_number':583,'multiline':False]['text':'                            ^','line_number':584,'multiline':False]['text':'                        RegionSize','line_number':585,'multiline':False]['text':'','line_number':586,'multiline':False]['text':' Note that `From` will be page aligned.','line_number':587,'multiline':False]['text':'','line_number':588,'multiline':False]['text':' If the second from the last block is aligned at `From`, then we expect all','line_number':589,'multiline':False]['text':' the pages after `From` will be marked as can-be-released. Otherwise, the','line_number':590,'multiline':False]['text':' pages only touched by the last blocks will be marked as can-be-released.','line_number':591,'multiline':False]['text':'NumberOfRegions=','line_number':613,'multiline':True]['text':'ReleaseSize=','line_number':614,'multiline':True]['text':'ReleaseBase=','line_number':615,'multiline':True]['text':'Base=','line_number':616,'multiline':True]['text':'RegionIndex=','line_number':616,'multiline':True]['text':'RegionSize=','line_number':617,'multiline':True]['text':'Region=','line_number':620,'multiline':True]['text':'Region=','line_number':623,'multiline':True]['text':' for each size class','line_number':626,'multiline':False]['text':' Allocate the buffer pool on the heap because it is quite large (slightly','line_number':640,'multiline':False]['text':' more than StaticBufferCount * StaticBufferSize * sizeof(uptr)) and it may','line_number':641,'multiline':False]['text':' not fit in the stack on some platforms.','line_number':642,'multiline':False]['text':' The static buffer is supposed to be used up.','line_number':653,'multiline':False]