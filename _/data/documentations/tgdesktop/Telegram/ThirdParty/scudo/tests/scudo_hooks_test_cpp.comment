['text':'===-- scudo_hooks_test.cpp ------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' namespace','line_number':18,'multiline':False]['text':' Scudo defines weak symbols that can be defined by a client binary','line_number':20,'multiline':False]['text':' to register callbacks at key points in the allocation timeline.  In','line_number':21,'multiline':False]['text':' order to enforce those invariants, we provide definitions that','line_number':22,'multiline':False]['text':' update some global state every time they are called, so that tests','line_number':23,'multiline':False]['text':' can inspect their effects.  An unfortunate side effect of this','line_number':24,'multiline':False]['text':' setup is that because those symbols are part of the binary, they','line_number':25,'multiline':False]['text':' can't be selectively enabled; that means that they will get called','line_number':26,'multiline':False]['text':' on unrelated tests in the same compilation unit. To mitigate this','line_number':27,'multiline':False]['text':' issue, we insulate those tests in a separate compilation unit.','line_number':28,'multiline':False]['text':' Simple check that allocation callbacks, when registered, are called:','line_number':40,'multiline':False]['text':'   1) __scudo_allocate_hook is called when allocating.','line_number':41,'multiline':False]['text':'   2) __scudo_deallocate_hook is called when deallocating.','line_number':42,'multiline':False]['text':'   3) Both hooks are called when reallocating.','line_number':43,'multiline':False]['text':'   4) Neither are called for a no-op reallocation.','line_number':44,'multiline':False]['text':' Simple allocation and deallocation.','line_number':50,'multiline':False]['text':' Simple no-op, same size reallocation.','line_number':67,'multiline':False]['text':' Reallocation in increasing size classes. This ensures that at','line_number':83,'multiline':False]['text':' least one of the reallocations will be meaningful.','line_number':84,'multiline':False]