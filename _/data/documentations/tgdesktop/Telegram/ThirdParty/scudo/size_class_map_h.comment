['text':'===-- size_class_map.h ----------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' Force a 32-bit division if the template parameters allow for it.','line_number':29,'multiline':False]['text':' Note that Config::MaxNumCachedHint is u16 so the result is guaranteed to','line_number':35,'multiline':False]['text':' fit in u16.','line_number':36,'multiline':False]['text':' SizeClassMap maps allocation sizes into size classes and back, in an','line_number':41,'multiline':False]['text':' efficient table-free manner.','line_number':42,'multiline':False]['text':'','line_number':43,'multiline':False]['text':' Class 0 is a special class that doesn't abide by the same rules as other','line_number':44,'multiline':False]['text':' classes. The allocator uses it to hold batches.','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':' The other sizes are controlled by the template parameters:','line_number':47,'multiline':False]['text':' - MinSizeLog: defines the first class as 2^MinSizeLog bytes.','line_number':48,'multiline':False]['text':' - MaxSizeLog: defines the last class as 2^MaxSizeLog bytes.','line_number':49,'multiline':False]['text':' - MidSizeLog: classes increase with step 2^MinSizeLog from 2^MinSizeLog to','line_number':50,'multiline':False]['text':'               2^MidSizeLog bytes.','line_number':51,'multiline':False]['text':' - NumBits: the number of non-zero bits in sizes after 2^MidSizeLog.','line_number':52,'multiline':False]['text':'            eg. with NumBits==3 all size classes after 2^MidSizeLog look like','line_number':53,'multiline':False]['text':'            0b1xx0..0 (where x is either 0 or 1).','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' This class also gives a hint to a thread-caching allocator about the amount','line_number':56,'multiline':False]['text':' of chunks that can be cached per-thread:','line_number':57,'multiline':False]['text':' - MaxNumCachedHint is a hint for the max number of chunks cached per class.','line_number':58,'multiline':False]['text':' - 2^MaxBytesCachedLog is the max number of bytes cached per class.','line_number':59,'multiline':False]['text':' Do not perform the loop if the maximum size is too large.','line_number':362,'multiline':False]['text':' namespace scudo','line_number':373,'multiline':False]['text':' SCUDO_SIZE_CLASS_MAP_H_','line_number':375,'multiline':False]