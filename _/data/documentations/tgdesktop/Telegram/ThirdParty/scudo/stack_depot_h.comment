['text':'===-- stack_depot.h -------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' This data structure stores a stack trace for each allocation and','line_number':45,'multiline':False]['text':' deallocation when stack trace recording is enabled, that may be looked up','line_number':46,'multiline':False]['text':' using a hash of the stack trace. The lower bits of the hash are an index','line_number':47,'multiline':False]['text':' into the Tab array, which stores an index into the Ring array where the','line_number':48,'multiline':False]['text':' stack traces are stored. As the name implies, Ring is a ring buffer, so a','line_number':49,'multiline':False]['text':' stack trace may wrap around to the start of the array.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' Each stack trace in Ring is prefixed by a stack trace marker consisting of','line_number':52,'multiline':False]['text':' a fixed 1 bit in bit 0 (this allows disambiguation between stack frames','line_number':53,'multiline':False]['text':' and stack trace markers in the case where instruction pointers are 4-byte','line_number':54,'multiline':False]['text':' aligned, as they are on arm64), the stack trace hash in bits 1-32, and the','line_number':55,'multiline':False]['text':' size of the stack trace in bits 33-63.','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' The insert() function is potentially racy in its accesses to the Tab and','line_number':58,'multiline':False]['text':' Ring arrays, but find() is resilient to races in the sense that, barring','line_number':59,'multiline':False]['text':' hash collisions, it will either return the correct stack trace or no stack','line_number':60,'multiline':False]['text':' trace at all, even if two instances of insert() raced with one another.','line_number':61,'multiline':False]['text':' This is achieved by re-checking the hash of the stack trace before','line_number':62,'multiline':False]['text':' returning the trace.','line_number':63,'multiline':False]['text':' Use smaller table sizes for fuzzing in order to reduce input size.','line_number':66,'multiline':False]['text':' Insert hash of the stack trace [Begin, End) into the stack depot, and','line_number':85,'multiline':False]['text':' return the hash.','line_number':86,'multiline':False]['text':' Look up a stack trace by hash. Returns true if successful. The trace may be','line_number':112,'multiline':False]['text':' accessed via operator[] passing indexes between *RingPosPtr and','line_number':113,'multiline':False]['text':' *RingPosPtr + *SizePtr.','line_number':114,'multiline':False]['text':' namespace scudo','line_number':142,'multiline':False]['text':' SCUDO_STACK_DEPOT_H_','line_number':144,'multiline':False]