['text':'===-- mem_map_base.h ------------------------------------------*- C++ -*-===//','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.','line_number':3,'multiline':False]['text':' See https://llvm.org/LICENSE.txt for license information.','line_number':4,'multiline':False]['text':' SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'===----------------------------------------------------------------------===//','line_number':7,'multiline':False]['text':' In Scudo, every memory operation will be fulfilled through a','line_number':16,'multiline':False]['text':' platform-specific `MemMap` instance. The essential APIs are listed in the','line_number':17,'multiline':False]['text':' `MemMapBase` below. This is implemented in CRTP, so for each implementation,','line_number':18,'multiline':False]['text':' it has to implement all of the 'Impl' named functions.','line_number':19,'multiline':False]['text':' This is used to map a new set of contiguous pages. Note that the `Addr` is','line_number':24,'multiline':False]['text':' only a suggestion to the system.','line_number':25,'multiline':False]['text':' This is used to unmap partial/full pages from the beginning or the end.','line_number':31,'multiline':False]['text':' I.e., the result pages are expected to be still contiguous.','line_number':32,'multiline':False]['text':' This is used to remap a mapped range (either from map() or dispatched from','line_number':39,'multiline':False]['text':' ReservedMemory). For example, we have reserved several pages and then we','line_number':40,'multiline':False]['text':' want to remap them with different accessibility.','line_number':41,'multiline':False]['text':' This is used to update the pages' access permission. For example, mark','line_number':48,'multiline':False]['text':' pages as no read/write permission.','line_number':49,'multiline':False]['text':' Suggest releasing a set of contiguous physical pages back to the OS. Note','line_number':56,'multiline':False]['text':' that only physical pages are supposed to be released. Any release of','line_number':57,'multiline':False]['text':' virtual pages may lead to undefined behavior.','line_number':58,'multiline':False]['text':' This is similar to the above one except that any subsequent access to the','line_number':64,'multiline':False]['text':' released pages will return with zero-filled pages.','line_number':65,'multiline':False]['text':' `ReservedMemory` is a special memory handle which can be viewed as a page','line_number':84,'multiline':False]['text':' allocator. `ReservedMemory` will reserve a contiguous pages and the later','line_number':85,'multiline':False]['text':' page request can be fulfilled at the designated address. This is used when','line_number':86,'multiline':False]['text':' we want to ensure the virtual address of the MemMap will be in a known range.','line_number':87,'multiline':False]['text':' This is implemented in CRTP, so for each','line_number':88,'multiline':False]['text':' implementation, it has to implement all of the 'Impl' named functions.','line_number':89,'multiline':False]['text':' Reserve a chunk of memory at a suggested address.','line_number':95,'multiline':False]['text':' Release the entire reserved memory.','line_number':101,'multiline':False]['text':' Dispatch a sub-range of reserved memory. Note that any fragmentation of','line_number':107,'multiline':False]['text':' the reserved pages is managed by each implementation.','line_number':108,'multiline':False]['text':' namespace scudo','line_number':127,'multiline':False]['text':' SCUDO_MEM_MAP_BASE_H_','line_number':129,'multiline':False]