['text':'
  This file implements: FortranObject, array_from_pyobj, copy_ND_array

  Author: Pearu Peterson <pearu@cens.ioc.ee>
  $Revision: 1.52 $
  $Date: 2005/07/11 07:44:20 $
','line_number':12,'multiline':True]['text':'
 * Python-only fallback for thread-local callback pointers
 ','line_number':34,'multiline':True]['text':' PyArray_DescrFromType returns descr with elsize = 0.','line_number':109,'multiline':False]['text':'************************ FortranObject ******************************','line_number':119,'multiline':True]['text':' Initialize F90 module objects ','line_number':129,'multiline':True]['text':' Is Fortran routine ','line_number':149,'multiline':True]['text':' Is Fortran variable or array (not allocatable) ','line_number':158,'multiline':True]['text':' used for calling F90 module routines ','line_number':184,'multiline':True]['text':' Fortran methods ','line_number':205,'multiline':True]['text':' Returns number of bytes consumed from buf, or -1 on error. ','line_number':214,'multiline':True]['text':' p now points one beyond the last character of the string in buf ','line_number':335,'multiline':True]['text':' save pointer of an allocatable array ','line_number':350,'multiline':True]['text':' callback from Fortran ','line_number':353,'multiline':True]['text':' In fortran f=allocated(d) ','line_number':354,'multiline':True]['text':' printf("set_data: d=%p,f=%d\n",d,*f); ','line_number':358,'multiline':True]['text':' F90 allocatable array ','line_number':379,'multiline':True]['text':' array is allocated ','line_number':390,'multiline':True]['text':' Py_INCREF(v); ','line_number':396,'multiline':True]['text':' array is not allocated ','line_number':399,'multiline':True]['text':' is allocatable array ','line_number':448,'multiline':True]['text':' set new value (reallocate if needed --
                                   see f2py generated code for more
                                   details ) ','line_number':452,'multiline':True]['text':' deallocate ','line_number':463,'multiline':True]['text':' not allocatable array ','line_number':472,'multiline':True]['text':' copy Python object to Fortran array ','line_number':479,'multiline':True]['text':' successful ','line_number':497,'multiline':True]['text':'  printf("fortran call
        name=%s,func=%p,data=%p,%p\n",fp->defs[i].name,
        fp->defs[i].func,fp->defs[i].data,&fp->defs[i].data); ','line_number':519,'multiline':True]['text':' is Fortran routine ','line_number':522,'multiline':True]['text':' dummy routine ','line_number':528,'multiline':True]['text':'************************ f2py_report_atexit ******************************','line_number':565,'multiline':True]['text':'********************* report on array copy ***************************','line_number':673,'multiline':True]['text':'************************ array_from_obj ******************************','line_number':700,'multiline':True]['text':'
 * File: array_from_pyobj.c
 *
 * Description:
 * ------------
 * Provides array_from_pyobj function that returns a contiguous array
 * object with the given dimensions and required storage order, either
 * in row-major (C) or column-major (Fortran) order. The function
 * array_from_pyobj is very flexible about its Python object argument
 * that can be any number, list, tuple, or array.
 *
 * array_from_pyobj is used in f2py generated Python extension
 * modules.
 *
 * Author: Pearu Peterson <pearu@cens.ioc.ee>
 * Created: 13-16 January 2002
 * $Id: fortranobject.c,v 1.52 2005/07/11 07:44:20 pearu Exp $
 ','line_number':702,'multiline':True]['text':' SWAPTYPE(arr1->weakreflist,arr2->weakreflist,PyObject*); ','line_number':784,'multiline':True]['text':'
    get_elsize determines array itemsize from a Python object.  Returns
    elsize if successful, -1 otherwise.

    Supported types of the input are: numpy.ndarray, bytes, str, tuple,
    list.
  ','line_number':797,'multiline':True]['text':' borrowed ','line_number':817,'multiline':True]['text':'
     * Return an array with given element type and shape from a Python
     * object while taking into account the usage intent of the array.
     *
     * - element type is defined by type_num and elsize
     * - shape is defined by dims and rank
     *
     * ndarray_from_pyobj is used to convert Python object arguments
     * to numpy ndarrays with given type and shape that data is passed
     * to interfaced Fortran or C functions.
     *
     * errmess (if not NULL), contains a prefix of an error message
     * for an exception to be triggered within this function.
     *
     * Negative elsize value means that elsize is to be determined
     * from the Python object in runtime.
     *
     * Note on strings
     * ---------------
     *
     * String type (type_num == NPY_STRING) does not have fixed
     * element size and, by default, the type object sets it to
     * 0. Therefore, for string types, one has to use elsize
     * argument. For other types, elsize value is ignored.
     *
     * NumPy defines the type of a fixed-width string as
     * dtype('S<width>'). In addition, there is also dtype('c'), that
     * appears as dtype('S1') (these have the same type_num value),
     * but is actually different (.char attribute is either 'S' or
     * 'c', respecitely).
     *
     * In Fortran, character arrays and strings are different
     * concepts.  The relation between Fortran types, NumPy dtypes,
     * and type_num-elsize pairs, is defined as follows:
     *
     * character*5 foo     | dtype('S5')  | elsize=5, shape=()
     * character(5) foo    | dtype('S1')  | elsize=1, shape=(5)
     * character*5 foo(n)  | dtype('S5')  | elsize=5, shape=(n,)
     * character(5) foo(n) | dtype('S1')  | elsize=1, shape=(5, n)
     * character*(*) foo   | dtype('S')   | elsize=-1, shape=()
     *
     * Note about reference counting
     * -----------------------------
     *
     * If the caller returns the array to Python, it must be done with
     * Py_BuildValue("N",arr).  Otherwise, if obj!=arr then the caller
     * must call Py_DECREF(arr).
     *
     * Note on intent(cache,out,..)
     * ----------------------------
     * Don't expect correct data when returning intent(cache) array.
     *
     ','line_number':837,'multiline':True]['text':' new reference','line_number':903,'multiline':False]['text':' intent(cache), optional, intent(hide) ','line_number':912,'multiline':True]['text':' intent(cache) ','line_number':948,'multiline':True]['text':' here we have always intent(in) or intent(inout) or intent(inplace)
         ','line_number':973,'multiline':True]['text':'
        printf("intent alignment=%d\n", F2PY_GET_ALIGNMENT(intent));
        printf("alignment check=%d\n", F2PY_CHECK_ALIGNMENT(arr, intent));
        int i;
        for (i=1;i<=16;i++)
          printf("i=%d isaligned=%d\n", i, ARRAY_ISALIGNED(arr, i));
        ','line_number':980,'multiline':True]['text':' Returning input array ','line_number':997,'multiline':True]['text':' Must use PyArray_IS*ARRAY because intent(inout) requires
             * writable input ','line_number':1004,'multiline':True]['text':' here we have always intent(in) or intent(inplace) ','line_number':1029,'multiline':True]['text':' XXX: set exception ','line_number':1047,'multiline':True]['text':' Warning: in the case of NPY_STRING, PyArray_FromAny may','line_number':1077,'multiline':False]['text':' reset descr->elsize, e.g. dtype('S0') becomes dtype('S1').','line_number':1078,'multiline':False]['text':' This is internal sanity tests: elsize has been set to','line_number':1084,'multiline':False]['text':' descr->elsize in the beginning of this function.','line_number':1085,'multiline':False]['text':'
    Same as ndarray_from_pyobj but with elsize determined from type,
    if possible. Provided for backward compatibility.
   ','line_number':1108,'multiline':True]['text':'***************************************','line_number':1118,'multiline':True]['text':' Helper functions for array_from_pyobj ','line_number':1119,'multiline':True]['text':'***************************************','line_number':1120,'multiline':True]['text':'
     * This function fills in blanks (that are -1's) in dims list using
     * the dimensions from arr. It also checks that non-blank dims will
     * match with the corresponding values in arr dimensions.
     *
     * Returns 0 if the function is successful.
     *
     * If an error condition is detected, an exception is set and 1 is
     * returned.
     ','line_number':1126,'multiline':True]['text':' [1,2] -> [[1],[2]]; 1 -> [[1]]  ','line_number':1144,'multiline':True]['text':' Fill dims where -1 or 0; check dimensions; calc new_size; ','line_number':1149,'multiline':True]['text':' [[1,2]] -> [[1],[2]] ','line_number':1227,'multiline':True]['text':' [[1,2],[3,4]] -> [1,2,3,4] ','line_number':1271,'multiline':True]['text':' End of file: array_from_pyobj.c ','line_number':1313,'multiline':True]['text':'************************ copy_ND_array ******************************','line_number':1315,'multiline':True]['text':'******************** Various utility functions **********************','line_number':1324,'multiline':True]['text':'
    Write the description of a Python object to buf. The caller must
    provide buffer with size sufficient to write the description.

    Return 1 on success.
  ','line_number':1328,'multiline':True]['text':' TODO: detect the size of buf and make sure that size(buf) >= size(localbuf).','line_number':1358,'multiline':False]['text':'*******************************************','line_number':1390,'multiline':True]['text':' Compatibility functions for Python >= 3.0 ','line_number':1391,'multiline':True]['text':'*******************************************','line_number':1392,'multiline':True]['text':'************************ EOF fortranobject.c ******************************','line_number':1423,'multiline':True]