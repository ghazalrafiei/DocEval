['text':' Arrays','line_number':18,'multiline':False]['text':' DTypes','line_number':39,'multiline':False]['text':' Shapes','line_number':46,'multiline':False]['text':' Scalars','line_number':50,'multiline':False]['text':' `number` precision','line_number':58,'multiline':False]['text':' NOTE: Do not remove the extended precision bit-types even if seemingly unused;','line_number':60,'multiline':False]['text':' they're used by the mypy plugin','line_number':61,'multiline':False]['text':' Character codes','line_number':82,'multiline':False]['text':' Ufuncs','line_number':123,'multiline':False]['text':' NOTE: Numpy's mypy plugin is used for removing the types unavailable','line_number':156,'multiline':False]['text':' to the specific platform','line_number':157,'multiline':False]['text':' Ensures that the stubs are picked up','line_number':198,'multiline':False]['text':' Protocol for representing file-like-objects accepted','line_number':606,'multiline':False]['text':' by `ndarray.tofile` and `fromfile`','line_number':607,'multiline':False]['text':' NOTE: `seek`, `write` and `flush` are technically only required','line_number':614,'multiline':False]['text':' for `readwrite`/`write` modes','line_number':615,'multiline':False]['text':' TODO: Move placeholders to their respective module once','line_number':635,'multiline':False]['text':' their annotations are properly implemented','line_number':636,'multiline':False]['text':'','line_number':637,'multiline':False]['text':' Placeholders for classes','line_number':638,'multiline':False]['text':' Overload for subclass of generic','line_number':650,'multiline':False]['text':' Overloads for string aliases, Python types, and some assorted','line_number':659,'multiline':False]['text':' other special cases. Order is sometimes important because of the','line_number':660,'multiline':False]['text':' subtype relationships','line_number':661,'multiline':False]['text':'','line_number':662,'multiline':False]['text':' builtins.bool < int < float < complex < object','line_number':663,'multiline':False]['text':'','line_number':664,'multiline':False]['text':' so we have to make sure the overloads for the narrowest type is','line_number':665,'multiline':False]['text':' first.','line_number':666,'multiline':False]['text':' Builtin types','line_number':667,'multiline':False]['text':' `unsignedinteger` string-based representations and ctypes','line_number':681,'multiline':False]['text':' NOTE: We're assuming here that `uint_ptr_t == size_t`,','line_number':697,'multiline':False]['text':' an assumption that does not hold in rare cases (same for `ssize_t`)','line_number':698,'multiline':False]['text':' `signedinteger` string-based representations and ctypes','line_number':706,'multiline':False]['text':' `floating` string-based representations and ctypes','line_number':728,'multiline':False]['text':' `complexfloating` string-based representations','line_number':744,'multiline':False]['text':' Miscellaneous string-based representations and ctypes','line_number':756,'multiline':False]['text':' dtype of a dtype is the same dtype','line_number':772,'multiline':False]['text':' Handle strings that can't be expressed as literals; i.e. s1, s2, ...','line_number':789,'multiline':False]['text':' Catchall overload for void-likes','line_number':798,'multiline':False]['text':' Catchall overload for object-likes','line_number':807,'multiline':False]['text':' NOTE: In the future 1-based multiplications will also yield `flexible` dtypes','line_number':824,'multiline':False]['text':' NOTE: `__rmul__` seems to be broken when used in combination with','line_number':832,'multiline':False]['text':' literals as of mypy 0.902. Set the return-type to `dtype[Any]` for','line_number':833,'multiline':False]['text':' now for non-flexible dtypes.','line_number':834,'multiline':False]['text':' Explicitly defined `__eq__` and `__ne__` to get around mypy's','line_number':845,'multiline':False]['text':' `strict_equality` option; even though their signatures are','line_number':846,'multiline':False]['text':' identical to their `object`-based counterpart','line_number':847,'multiline':False]['text':' TODO: wait for support for recursive types','line_number':901,'multiline':False]['text':' TODO: `__setitem__` operates via `unsafe` casting rules, and can','line_number':930,'multiline':False]['text':' thus accept any type accepted by the relevant underlying `np.generic`','line_number':931,'multiline':False]['text':' constructor.','line_number':932,'multiline':False]['text':' This means that `value` must in reality be a supertype of `npt.ArrayLike`.','line_number':933,'multiline':False]['text':' TODO: How to deal with the non-commutative nature of `==` and `!=`?','line_number':975,'multiline':False]['text':' xref numpy/numpy#17368','line_number':976,'multiline':False]['text':' NOTE: `tostring()` is deprecated and therefore excluded','line_number':983,'multiline':False]['text':' def tostring(self, order=...): ...','line_number':984,'multiline':False]['text':' generics and 0d arrays return builtin scalars','line_number':991,'multiline':False]['text':' builtins.PyCapsule','line_number':999,'multiline':False]['text':' version','line_number':1001,'multiline':False]['text':' Shape','line_number':1002,'multiline':False]['text':' DType','line_number':1003,'multiline':False]['text':' F-continuous','line_number':1004,'multiline':False]['text':' Data','line_number':1005,'multiline':False]['text':' an `np.bool` is returned when `keepdims=True` and `self` is a 0d array','line_number':1007,'multiline':False]['text':' TODO: Set the `bound` to something more suitable once we','line_number':1383,'multiline':False]['text':' have proper shape support','line_number':1384,'multiline':False]['text':' Introduce an alias for `dtype` to avoid naming conflicts.','line_number':1415,'multiline':False]['text':' `builtins.PyCapsule` unfortunately lacks annotations as of the moment;','line_number':1418,'multiline':False]['text':' use `Any` as a stopgap measure','line_number':1419,'multiline':False]['text':' type: ignore[type-var]','line_number':1443,'multiline':False]['text':' type: ignore[type-var]','line_number':1449,'multiline':False]['text':' NOTE: In practice any object is accepted by `obj`, but as `__array_finalize__`','line_number':1489,'multiline':False]['text':' is a pseudo-abstract method the type has been narrowed down in order to','line_number':1490,'multiline':False]['text':' grant subclasses a bit more flexibility','line_number':1491,'multiline':False]['text':' Use the same output type as that of the underlying `generic`','line_number':1538,'multiline':False]['text':' type: ignore[type-var]','line_number':1541,'multiline':False]['text':' type: ignore[type-var]','line_number':1546,'multiline':False]['text':' 1D + 1D returns a scalar;','line_number':1591,'multiline':False]['text':' all other with at least 1 non-0D array return an ndarray.','line_number':1592,'multiline':False]['text':' type: ignore[misc]','line_number':1596,'multiline':False]['text':' `nonzero()` is deprecated for 0d arrays/generics','line_number':1600,'multiline':False]['text':' `put` is technically available to `generic`,','line_number':1611,'multiline':False]['text':' but is pointless as `generic`s are immutable','line_number':1612,'multiline':False]['text':' type: ignore[misc]','line_number':1621,'multiline':False]['text':' >= 1D array','line_number':1622,'multiline':False]['text':' 0D array-like','line_number':1623,'multiline':False]['text':' >= 1D array','line_number':1629,'multiline':False]['text':' >= 2D array','line_number':1651,'multiline':False]['text':' >= 2D array','line_number':1660,'multiline':False]['text':' type: ignore[misc]','line_number':1669,'multiline':False]['text':' type: ignore[misc]','line_number':1677,'multiline':False]['text':' Dispatch to the underlying `generic` via protocols','line_number':1765,'multiline':False]['text':' type: ignore[type-var]','line_number':1767,'multiline':False]['text':' type: ignore[type-var]','line_number':1771,'multiline':False]['text':' type: ignore[type-var]','line_number':1775,'multiline':False]['text':' type: ignore[type-var]','line_number':1779,'multiline':False]['text':' The last overload is for catching recursive objects whose','line_number':1787,'multiline':False]['text':' nesting is too deep.','line_number':1788,'multiline':False]['text':' The first overload is for catching `bytes` (as they are a subtype of','line_number':1789,'multiline':False]['text':' `Sequence[int]`) and `str`. As `str` is a recursive sequence of','line_number':1790,'multiline':False]['text':' strings, it will pass through the final overload otherwise','line_number':1791,'multiline':False]['text':' Unary ops','line_number':1837,'multiline':False]['text':' Binary ops','line_number':1870,'multiline':False]['text':' type: ignore[misc]','line_number':1872,'multiline':False]['text':' type: ignore[misc]','line_number':1874,'multiline':False]['text':' type: ignore[misc]','line_number':1876,'multiline':False]['text':' type: ignore[misc]','line_number':1878,'multiline':False]['text':' type: ignore[misc]','line_number':1889,'multiline':False]['text':' type: ignore[misc]','line_number':1891,'multiline':False]['text':' type: ignore[misc]','line_number':1893,'multiline':False]['text':' type: ignore[misc]','line_number':1895,'multiline':False]['text':' type: ignore[misc]','line_number':1906,'multiline':False]['text':' type: ignore[misc]','line_number':1908,'multiline':False]['text':' type: ignore[misc]','line_number':1910,'multiline':False]['text':' type: ignore[misc]','line_number':1912,'multiline':False]['text':' type: ignore[misc]','line_number':1921,'multiline':False]['text':' type: ignore[misc]','line_number':1923,'multiline':False]['text':' type: ignore[misc]','line_number':1925,'multiline':False]['text':' type: ignore[misc]','line_number':1927,'multiline':False]['text':' type: ignore[misc]','line_number':1936,'multiline':False]['text':' type: ignore[misc]','line_number':1938,'multiline':False]['text':' type: ignore[misc]','line_number':1940,'multiline':False]['text':' type: ignore[misc]','line_number':1942,'multiline':False]['text':' type: ignore[misc]','line_number':1947,'multiline':False]['text':' type: ignore[misc]','line_number':1949,'multiline':False]['text':' type: ignore[misc]','line_number':1951,'multiline':False]['text':' type: ignore[misc]','line_number':1953,'multiline':False]['text':' type: ignore[misc]','line_number':1958,'multiline':False]['text':' type: ignore[misc]','line_number':1960,'multiline':False]['text':' type: ignore[misc]','line_number':1962,'multiline':False]['text':' type: ignore[misc]','line_number':1964,'multiline':False]['text':' type: ignore[misc]','line_number':1966,'multiline':False]['text':' type: ignore[misc]','line_number':1970,'multiline':False]['text':' type: ignore[misc]','line_number':1981,'multiline':False]['text':' type: ignore[misc]','line_number':1983,'multiline':False]['text':' type: ignore[misc]','line_number':1985,'multiline':False]['text':' type: ignore[misc]','line_number':1987,'multiline':False]['text':' type: ignore[misc]','line_number':1989,'multiline':False]['text':' type: ignore[misc]','line_number':1993,'multiline':False]['text':' type: ignore[misc]','line_number':2008,'multiline':False]['text':' type: ignore[misc]','line_number':2010,'multiline':False]['text':' type: ignore[misc]','line_number':2012,'multiline':False]['text':' type: ignore[misc]','line_number':2014,'multiline':False]['text':' type: ignore[misc]','line_number':2018,'multiline':False]['text':' type: ignore[misc]','line_number':2033,'multiline':False]['text':' type: ignore[misc]','line_number':2035,'multiline':False]['text':' type: ignore[misc]','line_number':2037,'multiline':False]['text':' type: ignore[misc]','line_number':2039,'multiline':False]['text':' type: ignore[misc]','line_number':2043,'multiline':False]['text':' type: ignore[misc]','line_number':2045,'multiline':False]['text':' type: ignore[misc]','line_number':2054,'multiline':False]['text':' type: ignore[misc]','line_number':2056,'multiline':False]['text':' type: ignore[misc]','line_number':2058,'multiline':False]['text':' type: ignore[misc]','line_number':2060,'multiline':False]['text':' type: ignore[misc]','line_number':2062,'multiline':False]['text':' type: ignore[misc]','line_number':2075,'multiline':False]['text':' type: ignore[misc]','line_number':2077,'multiline':False]['text':' type: ignore[misc]','line_number':2079,'multiline':False]['text':' type: ignore[misc]','line_number':2081,'multiline':False]['text':' type: ignore[misc]','line_number':2083,'multiline':False]['text':' type: ignore[misc]','line_number':2096,'multiline':False]['text':' type: ignore[misc]','line_number':2098,'multiline':False]['text':' type: ignore[misc]','line_number':2100,'multiline':False]['text':' type: ignore[misc]','line_number':2102,'multiline':False]['text':' type: ignore[misc]','line_number':2115,'multiline':False]['text':' type: ignore[misc]','line_number':2117,'multiline':False]['text':' type: ignore[misc]','line_number':2119,'multiline':False]['text':' type: ignore[misc]','line_number':2121,'multiline':False]['text':' type: ignore[misc]','line_number':2134,'multiline':False]['text':' type: ignore[misc]','line_number':2136,'multiline':False]['text':' type: ignore[misc]','line_number':2138,'multiline':False]['text':' type: ignore[misc]','line_number':2140,'multiline':False]['text':' type: ignore[misc]','line_number':2151,'multiline':False]['text':' type: ignore[misc]','line_number':2153,'multiline':False]['text':' type: ignore[misc]','line_number':2155,'multiline':False]['text':' type: ignore[misc]','line_number':2157,'multiline':False]['text':' type: ignore[misc]','line_number':2168,'multiline':False]['text':' type: ignore[misc]','line_number':2170,'multiline':False]['text':' type: ignore[misc]','line_number':2172,'multiline':False]['text':' type: ignore[misc]','line_number':2187,'multiline':False]['text':' type: ignore[misc]','line_number':2189,'multiline':False]['text':' type: ignore[misc]','line_number':2191,'multiline':False]['text':' type: ignore[misc]','line_number':2206,'multiline':False]['text':' type: ignore[misc]','line_number':2208,'multiline':False]['text':' type: ignore[misc]','line_number':2217,'multiline':False]['text':' type: ignore[misc]','line_number':2219,'multiline':False]['text':' type: ignore[misc]','line_number':2228,'multiline':False]['text':' type: ignore[misc]','line_number':2230,'multiline':False]['text':' type: ignore[misc]','line_number':2239,'multiline':False]['text':' type: ignore[misc]','line_number':2241,'multiline':False]['text':' type: ignore[misc]','line_number':2250,'multiline':False]['text':' type: ignore[misc]','line_number':2252,'multiline':False]['text':' type: ignore[misc]','line_number':2261,'multiline':False]['text':' type: ignore[misc]','line_number':2263,'multiline':False]['text':' type: ignore[misc]','line_number':2272,'multiline':False]['text':' type: ignore[misc]','line_number':2274,'multiline':False]['text':' type: ignore[misc]','line_number':2283,'multiline':False]['text':' type: ignore[misc]','line_number':2285,'multiline':False]['text':' type: ignore[misc]','line_number':2294,'multiline':False]['text':' type: ignore[misc]','line_number':2296,'multiline':False]['text':' type: ignore[misc]','line_number':2305,'multiline':False]['text':' type: ignore[misc]','line_number':2307,'multiline':False]['text':' `np.generic` does not support inplace operations','line_number':2315,'multiline':False]['text':' NOTE: Inplace ops generally use "same_kind" casting w.r.t. to the left','line_number':2317,'multiline':False]['text':' operand. An exception to this rule are unsigned integers though, which','line_number':2318,'multiline':False]['text':' also accepts a signed integer for the right operand as long it is a 0D','line_number':2319,'multiline':False]['text':' object and its value is >= 0','line_number':2320,'multiline':False]['text':' Keep `dtype` at the bottom to avoid name conflicts with `np.dtype`','line_number':2486,'multiline':False]['text':' NOTE: while `np.generic` is not technically an instance of `ABCMeta`,','line_number':2490,'multiline':False]['text':' the `@abstractmethod` decorator is herein used to (forcefully) deny','line_number':2491,'multiline':False]['text':' the creation of `np.generic` instances.','line_number':2492,'multiline':False]['text':' The `# type: ignore` comments are necessary to silence mypy errors regarding','line_number':2493,'multiline':False]['text':' the missing `ABCMeta` metaclass.','line_number':2494,'multiline':False]['text':' See https://github.com/numpy/numpy-stubs/pull/80 for more details.','line_number':2496,'multiline':False]['text':' NOTE: `view` will perform a 0D->scalar cast,','line_number':2546,'multiline':False]['text':' thus the array `type` is irrelevant to the output type','line_number':2547,'multiline':False]['text':' type: ignore[misc]','line_number':2584,'multiline':False]['text':' type: ignore[misc]','line_number':2592,'multiline':False]['text':' Keep `dtype` at the bottom to avoid name conflicts with `np.dtype`','line_number':2648,'multiline':False]['text':' type: ignore','line_number':2652,'multiline':False]['text':' Ensure that objects annotated as `number` support arithmetic operations','line_number':2664,'multiline':False]['text':' The 3 protocols below may or may not raise,','line_number':2734,'multiline':False]['text':' depending on the underlying object','line_number':2735,'multiline':False]['text':' The `datetime64` constructors requires an object with the three attributes below,','line_number':2743,'multiline':False]['text':' and thus supports datetime duck typing','line_number':2744,'multiline':False]['text':' TODO: `item`/`tolist` returns either `dt.date`, `dt.datetime` or `int`','line_number':2753,'multiline':False]['text':' depending on the unit','line_number':2754,'multiline':False]['text':' `complex` is not a subtype of `SupportsComplex`','line_number':2790,'multiline':False]['text':' type: ignore','line_number':2793,'multiline':False]['text':' NOTE: `__index__` is technically defined in the bottom-most','line_number':2803,'multiline':False]['text':' sub-classes (`int64`, `uint32`, etc)','line_number':2804,'multiline':False]['text':' Ensure that objects annotated as `integer` support bit-wise operations','line_number':2817,'multiline':False]['text':' TODO: `item`/`tolist` returns either `dt.timedelta` or `int`','line_number':2869,'multiline':False]['text':' depending on the unit','line_number':2870,'multiline':False]['text':' NOTE: Only a limited number of units support conversion','line_number':2883,'multiline':False]['text':' to builtin scalar types: `Y`, `M`, `ns`, `ps`, `fs`, `as`','line_number':2884,'multiline':False]['text':' NOTE: `uint64 + signedinteger -> float64`','line_number':2911,'multiline':False]['text':' type: ignore','line_number':2951,'multiline':False]['text':' The main reason for `complexfloating` having two typevars is cosmetic.','line_number':3004,'multiline':False]['text':' It is used to clarify why `complex128`s precision is `_64Bit`, the latter','line_number':3005,'multiline':False]['text':' describing the two 64 bit floats representing its real and imaginary component','line_number':3006,'multiline':False]['text':' type: ignore[override]','line_number':3015,'multiline':False]['text':' type: ignore[override]','line_number':3017,'multiline':False]['text':' type: ignore[override]','line_number':3018,'multiline':False]['text':' NOTE: Deprecated','line_number':3020,'multiline':False]['text':' def __round__(self, ndigits=...): ...','line_number':3021,'multiline':False]['text':' type: ignore','line_number':3040,'multiline':False]['text':' TODO: `item`/`tolist` returns either `bytes` or `tuple`','line_number':3042,'multiline':False]['text':' depending on whether or not it's used as an opaque bytes sequence','line_number':3043,'multiline':False]['text':' or a structure','line_number':3044,'multiline':False]['text':' type: ignore','line_number':3067,'multiline':False]['text':' NOTE: Most `np.bytes_` / `np.str_` methods return their','line_number':3071,'multiline':False]['text':' builtin `bytes` / `str` counterpart','line_number':3072,'multiline':False]['text':'','line_number':3098,'multiline':False]['text':' Constants','line_number':3099,'multiline':False]['text':'','line_number':3100,'multiline':False]['text':' See `numpy._typing._ufunc` for more concrete nin-/nout-specific stubs','line_number':3114,'multiline':False]['text':' Broad return type because it has to encompass things like','line_number':3132,'multiline':False]['text':'','line_number':3133,'multiline':False]['text':' >>> np.logical_and.identity is True','line_number':3134,'multiline':False]['text':' True','line_number':3135,'multiline':False]['text':' >>> np.add.identity is 0','line_number':3136,'multiline':False]['text':' True','line_number':3137,'multiline':False]['text':' >>> np.sin.identity is None','line_number':3138,'multiline':False]['text':' True','line_number':3139,'multiline':False]['text':'','line_number':3140,'multiline':False]['text':' and any user-defined ufuncs.','line_number':3141,'multiline':False]['text':' This is None for ufuncs and a string for gufuncs.','line_number':3144,'multiline':False]['text':' The next four methods will always exist, but they will just','line_number':3147,'multiline':False]['text':' raise a ValueError ufuncs with that don't accept two input','line_number':3148,'multiline':False]['text':' arguments and return one output argument. Because of that we','line_number':3149,'multiline':False]['text':' can't type them very precisely.','line_number':3150,'multiline':False]['text':' Similarly at won't be defined for ufuncs that return multiple','line_number':3155,'multiline':False]['text':' outputs, so we can't type it very precisely.','line_number':3156,'multiline':False]['text':' Parameters: `__name__`, `ntypes` and `identity`','line_number':3159,'multiline':False]['text':' TODO: The type of each `__next__` and `iters` return-type depends','line_number':3329,'multiline':False]['text':' on the length and dtype of `args`; we can't describe this behavior yet','line_number':3330,'multiline':False]['text':' as we lack variadics (PEP 646).','line_number':3331,'multiline':False]['text':' TODO: Add a mypy plugin for managing functions whose output type is dependent','line_number':3573,'multiline':False]['text':' on the literal value of some sort of signature (e.g. `einsum` and `vectorize`)','line_number':3574,'multiline':False]['text':' type: ignore','line_number':3625,'multiline':False]['text':' Integral floats are accepted','line_number':3652,'multiline':False]['text':' type: ignore[typevar]','line_number':3790,'multiline':False]['text':' NOTE: Deprecated','line_number':3813,'multiline':False]['text':' class MachAr: ...','line_number':3814,'multiline':False]