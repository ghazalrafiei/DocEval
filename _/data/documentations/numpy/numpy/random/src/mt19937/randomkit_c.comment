['text':' Random kit 1.3 ','line_number':1,'multiline':True]['text':'
 * Copyright (c) 2003-2005, Jean-Sebastien Roy (js@jeannot.org)
 *
 * The rk_random and rk_seed functions algorithms and the original design of
 * the Mersenne Twister RNG:
 *
 *   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 *
 *   1. Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 *   3. The names of its contributors may not be used to endorse or promote
 *   products derived from this software without specific prior written
 *   permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Original algorithm for the implementation of rk_interval function from
 * Richard J. Wagner's implementation of the Mersenne Twister RNG, optimised by
 * Magnus Jonsson.
 *
 * Constants used in the rk_double implementation by Isaku Wada.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':3,'multiline':True]['text':' static char const rcsid[] =
  "@(#) $Jeannot: randomkit.c,v 1.28 2005/07/21 22:14:09 js Exp $"; ','line_number':65,'multiline':True]['text':'
 * Windows
 * XXX: we have to use this ugly defined(__GNUC__) because it is not easy to
 * detect the compiler used in distutils itself
 ','line_number':69,'multiline':True]['text':'
 * FIXME: ideally, we should set this to the real version of MSVCRT. We need
 * something higher than 0x601 to enable _ftime64 and co
 ','line_number':76,'multiline':True]['text':'
 * mingw msvcr lib import wrongly export _ftime, which does not exist in the
 * actual msvc runtime for version >= 8; we make it an alias to _ftime64, which
 * is available in those versions of the runtime
 ','line_number':84,'multiline':True]['text':' Windows crypto ','line_number':98,'multiline':True]['text':'
 * Do not move this include. randomkit.h must be included
 * after windows timeb.h is included.
 ','line_number':107,'multiline':True]['text':' Unix ','line_number':114,'multiline':True]['text':' static functions ','line_number':140,'multiline':True]['text':' Knuth's PRNG as used in the Mersenne Twister reference implementation ','line_number':147,'multiline':True]['text':' Thomas Wang 32 bits integer hash function ','line_number':158,'multiline':True]['text':' ensures non-zero key ','line_number':178,'multiline':True]['text':' Magic Mersenne Twister constants ','line_number':204,'multiline':True]['text':'
 * Slightly optimised reference implementation of the Mersenne Twister
 * Note that regardless of the precision of long, only 32 bit random
 * integers are produced
 ','line_number':211,'multiline':True]['text':' Tempering ','line_number':238,'multiline':True]['text':'
 * Returns an unsigned 64 bit random integer.
 ','line_number':247,'multiline':True]['text':'
 * Returns an unsigned 32 bit random integer.
 ','line_number':256,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint64 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':263,'multiline':True]['text':' Smallest bit mask >= max ','line_number':279,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint32 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':299,'multiline':True]['text':' Smallest bit mask >= max ','line_number':315,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint16 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':329,'multiline':True]['text':' Smallest bit mask >= max ','line_number':347,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint8 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':368,'multiline':True]['text':' Smallest bit mask >= max ','line_number':386,'multiline':True]['text':'
 * Fills an array with cnt random npy_bool between off and off + rng
 * inclusive.
 ','line_number':406,'multiline':True]['text':' If we reach here rng and mask are one and off is zero ','line_number':423,'multiline':True]['text':' Smallest bit mask >= max ','line_number':453,'multiline':True]['text':' Search a random value in [0..mask] <= max ','line_number':463,'multiline':True]['text':' shifts : 67108864 = 0x4000000, 9007199254740992 = 0x20000000000000 ','line_number':480,'multiline':True]['text':' Polar method, a more efficient version of the Box-Muller approach. ','line_number':571,'multiline':True]['text':' Keep for next call ','line_number':573,'multiline':True]