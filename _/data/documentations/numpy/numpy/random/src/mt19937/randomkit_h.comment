['text':' Random kit 1.3 ','line_number':1,'multiline':True]['text':'
 * Copyright (c) 2003-2005, Jean-Sebastien Roy (js@jeannot.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':3,'multiline':True]['text':' @(#) $Jeannot: randomkit.h,v 1.24 2005/07/21 22:14:09 js Exp $ ','line_number':26,'multiline':True]['text':'
 * Typical use:
 *
 * {
 *  rk_state state;
 *  unsigned long seed = 1, random_value;
 *
 *  rk_seed(seed, &state); // Initialize the RNG
 *  ...
 *  random_value = rk_random(&state); // Generate random values in [0..RK_MAX]
 * }
 *
 * Instead of rk_seed, you can use rk_randomseed which will get a random seed
 * from /dev/urandom (or the clock, if /dev/urandom is unavailable):
 *
 * {
 *  rk_state state;
 *  unsigned long random_value;
 *
 *  rk_randomseed(&state); // Initialize the RNG with a random seed
 *  ...
 *  random_value = rk_random(&state); // Generate random values in [0..RK_MAX]
 * }
 ','line_number':28,'multiline':True]['text':'
 * Useful macro:
 *  RK_DEV_RANDOM: the device used for random seeding.
 *                 defaults to "/dev/urandom"
 ','line_number':53,'multiline':True]['text':' !=0: gauss contains a gaussian deviate ','line_number':70,'multiline':True]['text':' The rk_state structure has been extended to store the following
   * information for the binomial generator. If the input values of n or p
   * are different than nsave and psave, then the other parameters will be
   * recomputed. RTK 2005-09-02 ','line_number':73,'multiline':True]['text':' !=0: following parameters initialized for
                            binomial ','line_number':78,'multiline':True]['text':' no error ','line_number':100,'multiline':True]['text':' no RK_DEV_RANDOM device ','line_number':101,'multiline':True]['text':' error strings ','line_number':105,'multiline':True]['text':' Maximum generated random value ','line_number':108,'multiline':True]['text':'
 * Initialize the RNG state using the given seed.
 ','line_number':115,'multiline':True]['text':'
 * Initialize the RNG state using a random seed.
 * Uses /dev/random or, when unavailable, the clock (see randomkit.c).
 * Returns RK_NOERR when no errors occurs.
 * Returns RK_ENODEV when the use of RK_DEV_RANDOM failed (for example because
 * there is no such device). In this case, the RNG was initialized using the
 * clock.
 ','line_number':120,'multiline':True]['text':'
 * Returns a random unsigned long between 0 and RK_MAX inclusive
 ','line_number':130,'multiline':True]['text':'
 * Returns a random long between 0 and LONG_MAX inclusive
 ','line_number':135,'multiline':True]['text':'
 * Returns a random unsigned long between 0 and ULONG_MAX inclusive
 ','line_number':140,'multiline':True]['text':'
 * Returns a random unsigned long between 0 and max inclusive.
 ','line_number':145,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint64 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':150,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint32 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':157,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint16 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':164,'multiline':True]['text':'
 * Fills an array with cnt random npy_uint8 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':171,'multiline':True]['text':'
 * Fills an array with cnt random npy_bool between off and off + rng
 * inclusive. It is assumed that npy_bool is the same size as npy_uint8.
 ','line_number':178,'multiline':True]['text':'
 * Returns a random double between 0.0 and 1.0, 1.0 excluded.
 ','line_number':185,'multiline':True]['text':'
 * fill the buffer with size random bytes
 ','line_number':190,'multiline':True]['text':'
 * fill the buffer with randombytes from the random device
 * Returns RK_ENODEV if the device is unavailable, or RK_NOERR if it is
 * On Unix, if strong is defined, RK_DEV_RANDOM is used. If not, RK_DEV_URANDOM
 * is used instead. This parameter has no effect on Windows.
 * Warning: on most unixes RK_DEV_RANDOM will wait for enough entropy to answer
 * which can take a very long time on quiet systems.
 ','line_number':195,'multiline':True]['text':'
 * fill the buffer using rk_devfill if the random device is available and using
 * rk_fill if it is not
 * parameters have the same meaning as rk_fill and rk_devfill
 * Returns RK_ENODEV if the device is unavailable, or RK_NOERR if it is
 ','line_number':205,'multiline':True]['text':'
 * return a random gaussian deviate with variance unity and zero mean.
 ','line_number':214,'multiline':True]['text':' _RANDOMKIT_ ','line_number':223,'multiline':True]