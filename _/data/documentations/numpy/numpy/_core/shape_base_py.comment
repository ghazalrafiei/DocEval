['text':' As a special case, dimension 0 of 1-dimensional arrays is "horizontal"','line_number':354,'multiline':False]['text':' optimize for the typical case where only arrays is provided','line_number':365,'multiline':False]['text':' Internal functions to eliminate the overhead of repeated dispatch in one of','line_number':459,'multiline':False]['text':' the two possible paths inside np.block.','line_number':460,'multiline':False]['text':' Use getattr to protect against __array_function__ being disabled.','line_number':461,'multiline':False]['text':' not strictly necessary, but saves us from:','line_number':508,'multiline':False]['text':'  - more than one way to do things - no point treating tuples like','line_number':509,'multiline':False]['text':'    lists','line_number':510,'multiline':False]['text':'  - horribly confusing behaviour that results when tuples are','line_number':511,'multiline':False]['text':'    treated like ndarray','line_number':512,'multiline':False]['text':' propagate our flag that indicates an empty list at the bottom','line_number':538,'multiline':False]['text':' We've 'bottomed out' on an empty list','line_number':544,'multiline':False]['text':' We've 'bottomed out' - arrays is either a scalar or an array','line_number':547,'multiline':False]['text':' Ensures `a` has at least `ndim` dimensions by prepending','line_number':553,'multiline':False]['text':' ones to `a.shape` as necessary','line_number':554,'multiline':False]['text':' Cache a result that will be reused.','line_number':597,'multiline':False]['text':' Take a shape, any shape','line_number':600,'multiline':False]['text':' Prepend the slice prefix and flatten the slices','line_number':654,'multiline':False]['text':' Flatten the array list','line_number':659,'multiline':False]['text':' We've 'bottomed out' - arrays is either a scalar or an array','line_number':664,'multiline':False]['text':' type(arrays) is not list','line_number':665,'multiline':False]['text':' Return the slice and the array inside a list to be consistent with','line_number':666,'multiline':False]['text':' the recursive case.','line_number':667,'multiline':False]['text':' We've 'bottomed out' - arrays is either a scalar or an array','line_number':686,'multiline':False]['text':' type(arrays) is not list','line_number':687,'multiline':False]['text':' Use type(...) is list to match the behavior of np.block(), which special','line_number':692,'multiline':False]['text':' cases list specifically rather than allowing for generic iterables or','line_number':693,'multiline':False]['text':' tuple. Also, we know that list.__array_function__ will never exist.','line_number':694,'multiline':False]['text':' It was found through benchmarking that making an array of final size','line_number':855,'multiline':False]['text':' around 256x256 was faster by straight concatenation on a','line_number':856,'multiline':False]['text':' i7-7700HQ processor and dual channel ram 2400MHz.','line_number':857,'multiline':False]['text':' It didn't seem to matter heavily on the dtype used.','line_number':858,'multiline':False]['text':'','line_number':859,'multiline':False]['text':' A 2D array using repeated concatenation requires 2 copies of the array.','line_number':860,'multiline':False]['text':'','line_number':861,'multiline':False]['text':' The fastest algorithm will depend on the ratio of CPU power to memory','line_number':862,'multiline':False]['text':' speed.','line_number':863,'multiline':False]['text':' One can monitor the results of the benchmark','line_number':864,'multiline':False]['text':' https://pv.github.io/numpy-bench/#bench_shape_base.Block2D.time_block2d','line_number':865,'multiline':False]['text':' to tune this parameter until a C version of the `_block_info_recursion`','line_number':866,'multiline':False]['text':' algorithm is implemented which would likely be faster than the python','line_number':867,'multiline':False]['text':' version.','line_number':868,'multiline':False]['text':' These helper functions are mostly used for testing.','line_number':875,'multiline':False]['text':' They allow us to write tests that directly call `_block_slicing`','line_number':876,'multiline':False]['text':' or `_block_concatenate` without blocking large arrays to force the wisdom','line_number':877,'multiline':False]['text':' to trigger the desired path.','line_number':878,'multiline':False]['text':' Test preferring F only in the case that all input arrays are F','line_number':901,'multiline':False]['text':' Note: In a c implementation, the function','line_number':906,'multiline':False]['text':' PyArray_CreateMultiSortedStridePerm could be used for more advanced','line_number':907,'multiline':False]['text':' guessing of the desired order.','line_number':908,'multiline':False]['text':' Catch an edge case where _block returns a view because','line_number':918,'multiline':False]['text':' `arrays` is a single numpy array and not a list of numpy arrays.','line_number':919,'multiline':False]['text':' This might copy scalars or lists twice, but this isn't a likely','line_number':920,'multiline':False]['text':' usecase for those interested in performance','line_number':921,'multiline':False]