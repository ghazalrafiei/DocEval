['text':'***********************************
 ** Types
 ***********************************','line_number':8,'multiline':True]['text':'*
 * Gather all data types supported by the module.
','line_number':11,'multiline':True]['text':' scalars','line_number':16,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64#
     ','line_number':17,'multiline':True]['text':'*end repeat*','line_number':21,'multiline':True]['text':' sequence','line_number':22,'multiline':False]['text':'*begin repeat
     * #sfx  = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64#
     ','line_number':23,'multiline':True]['text':'*end repeat*','line_number':27,'multiline':True]['text':' vectors','line_number':28,'multiline':False]['text':'*begin repeat
     * #sfx  = u8, u16, u32, u64, s8, s16, s32, s64, b8, b16, b32, b64#
     ','line_number':29,'multiline':True]['text':'*end repeat*','line_number':33,'multiline':True]['text':' multi-vectors x2','line_number':34,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64#
     ','line_number':35,'multiline':True]['text':'*end repeat*','line_number':39,'multiline':True]['text':' multi-vectors x3','line_number':40,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64#
     ','line_number':41,'multiline':True]['text':'*end repeat*','line_number':45,'multiline':True]['text':'*
 * Data types IDs and suffixes. Must be same data types as the ones
 * in union 'simd_data' to fit the macros in '_simd_inc_easyintrin.h'.
','line_number':58,'multiline':True]['text':' scalars','line_number':65,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64#
     ','line_number':66,'multiline':True]['text':'*end repeat*','line_number':70,'multiline':True]['text':' sequences','line_number':71,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64#
     ','line_number':72,'multiline':True]['text':'*end repeat*','line_number':76,'multiline':True]['text':' vectors','line_number':77,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64, b8, b16, b32, b64#
     ','line_number':78,'multiline':True]['text':'*end repeat*','line_number':82,'multiline':True]['text':' multi-vectors x2','line_number':83,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64#
     ','line_number':84,'multiline':True]['text':'*end repeat*','line_number':88,'multiline':True]['text':' multi-vectors x3','line_number':89,'multiline':False]['text':'*begin repeat
     * #sfx = u8, u16, u32, u64, s8, s16, s32, s64, f32, f64#
     ','line_number':90,'multiline':True]['text':'*end repeat*','line_number':94,'multiline':True]['text':'***********************************
 ** Declarations (inc_data)
 ***********************************','line_number':97,'multiline':True]['text':'*
 * simd_data_type information
 ','line_number':100,'multiline':True]['text':' type name compatible with python style','line_number':105,'multiline':False]['text':' returns '1' if the type represent a unsigned integer','line_number':107,'multiline':False]['text':' returns '1' if the type represent a signed integer','line_number':109,'multiline':False]['text':' returns '1' if the type represent a single or double precision','line_number':111,'multiline':False]['text':' returns '1' if the type represent a boolean','line_number':113,'multiline':False]['text':' returns '1' if the type represent a sequence','line_number':115,'multiline':False]['text':' returns '1' if the type represent a scalar','line_number':117,'multiline':False]['text':' returns '1' if the type represent a vector','line_number':119,'multiline':False]['text':' returns the len of multi-vector if the type represent x2 or x3 vector','line_number':121,'multiline':False]['text':' otherwise returns 0, e.g. returns 2 if data type is simd_data_vu8x2','line_number':122,'multiline':False]['text':' returns the equivalent scalar data type e.g. simd_data_vu8 -> simd_data_u8','line_number':124,'multiline':False]['text':' returns the equivalent scalar data type e.g. simd_data_s8 -> simd_data_vs8','line_number':126,'multiline':False]['text':' NOTE: returns the will equivalent "unsigned" vector type in case of "boolean" vector','line_number':127,'multiline':False]['text':' e.g. simd_data_vb8 -> simd_data_vu8','line_number':128,'multiline':False]['text':' number of vector lanes','line_number':130,'multiline':False]['text':' sizeof lane type','line_number':132,'multiline':False]['text':'*
 * Returns data info of certain dtype.
 *
 * Example:
 **  const simd_data_info *info = simd_data_getinfo(simd_data_vu8);
 **  if (info->is_vector && info->is_unsigned) {
 **     ...
 **  }
 ','line_number':136,'multiline':True]['text':'***********************************
 ** Declarations (inc_vector)
 ***********************************','line_number':148,'multiline':True]['text':' vector type id','line_number':154,'multiline':False]['text':' vector data, aligned for safe casting','line_number':156,'multiline':False]['text':'*
 * Create a Python obj(PySIMDVectorObject) from a NPYV vector based on the contents
 * of `data`(simd_data) and according to the vector data type `dtype`
 * on range(simd_data_[vu8:vf64]).
 * Return NULL and a Python exception on failure, otherwise new reference.
 *
 * Example:
 ** simd_data data = {.vu8 = npyv_setall_u8(0xff)};
 ** PySIMDVectorObject *obj = PySIMDVector_FromData(data, simd_data_vu8);
 ** if (obj != NULL) {
 **    printf("I have a valid vector obj and first element is \n", obj->data[0]);
 **    Py_DECREF(obj);
 ** }
 ','line_number':159,'multiline':True]['text':'*
 * Return a NPYV vector(simd_data) representation of `obj`(PySIMDVectorObject) and
 * according to the vector data type `dtype` on range (simd_data_[vu8:vf64]).
 * Raise a Python exception on failure.
 *
 * Example:
 ** simd_data data = PySIMDVector_AsData(vec_obj, simd_data_vf32);
 ** if (!PyErr_Occurred()) {
 **    npyv_f32 add_1 = npyv_add_f32(data.vf32, npyv_setall_f32(1));
 **    ...
 ** }
 ','line_number':175,'multiline':True]['text':'*
 * initialize and register PySIMDVectorType to certain PyModule,
 * PySIMDVectorType can be reached through attribute 'vector_type'.
 * return -1 on error, 0 on success.
 ','line_number':189,'multiline':True]['text':'***********************************
 ** Declarations (inc_convert)
 ***********************************','line_number':197,'multiline':True]['text':'*
 * Return a C scalar(simd_data) representation of `obj` and
 * according to the scalar data type `dtype` on range (simd_data_[u8:f64]).
 * Raise a Python exception on failure.
 *
 * Example:
 ** simd_data data = simd_scalar_from_number(obj, simd_data_f32);
 ** if (!PyErr_Occurred()) {
 **    printf("I have a valid float %d\n", data.f32);
 ** }
 ','line_number':200,'multiline':True]['text':'*
 * Create a Python scalar from a C scalar based on the contents
 * of `data`(simd_data) and according to the scalar data type `dtype`
 * on range(simd_data_[u8:f64]).
 * Return NULL and a Python exception on failure, otherwise new reference.
 *
 * Example:
 ** simd_data data = {.u32 = 0x7fffffff};
 ** PyObject *obj = simd_scalar_to_number(data, simd_data_s32);
 ** if (obj != NULL) {
 **    printf("I have a valid Python integer %d\n", PyLong_AsLong(obj));
 **    Py_DECREF(obj);
 ** }
 ','line_number':213,'multiline':True]['text':'*
 * Allocate a C array in memory according to number of elements `len`
 * and sequence data type `dtype` on range(simd_data_[qu8:qf64]).
 *
 * Return aligned pointer based on `NPY_SIMD_WIDTH` or NULL
 * with a Python exception on failure.
 *
 * Example:
 ** npyv_lanetype_f64 *aligned_ptr = simd_sequence_new(npyv_nlanes_f64, simd_data_f64);
 ** if (aligned_ptr != NULL) {
 **    // aligned store
 **    npyv_storea_f64(aligned_ptr, npyv_setall_f64(1.0));
 **    printf("The first element of my array %f\n", aligned_ptr[0]);
 **    simd_sequence_free(aligned_ptr);
 ** }
 ','line_number':229,'multiline':True]['text':'*
 * Return the number of elements of the allocated C array `ptr`
 * by `simd_sequence_new()` or `simd_sequence_from_iterable()`.
 ','line_number':247,'multiline':True]['text':'*
 * Free the allocated C array by `simd_sequence_new()` or
 * `simd_sequence_from_iterable()`.
 ','line_number':253,'multiline':True]['text':'*
 * Return a C array representation of a PyObject sequence `obj` and
 * according to the sequence data type `dtype` on range (simd_data_[qu8:qf64]).
 *
 * Note: parameter `min_size` takes the number of minimum acceptable elements.
 *
 * Return aligned pointer based on `NPY_SIMD_WIDTH` or NULL
 * with a Python exception on failure.
 *
 * Example:
 ** npyv_lanetype_u32 *ptr = simd_sequence_from_iterable(seq_obj, simd_data_qu32, npyv_nlanes_u32);
 ** if (ptr != NULL) {
 **     npyv_u32 a = npyv_load_u32(ptr);
 **     ...
 **     simd_sequence_free(ptr);
 ** }
 **
 ','line_number':259,'multiline':True]['text':'*
 * Fill a Python sequence object `obj` with a C array `ptr` allocated by
 * `simd_sequence_new()` or `simd_sequence_from_iterable()` according to
 * to the sequence data type `dtype` on range (simd_data_[qu8:qf64]).
 *
 * Return 0 on success or -1 with a Python exception on failure.
 ','line_number':279,'multiline':True]['text':'*
 * Create a Python list from a C array `ptr` allocated by
 * `simd_sequence_new()` or `simd_sequence_from_iterable()` according to
 * to the sequence data type `dtype` on range (simd_data_[qu8:qf64]).
 *
 * Return NULL and a Python exception on failure, otherwise new reference.
 ','line_number':288,'multiline':True]['text':'*
 * Return a SIMD multi-vector(simd_data) representation of Python tuple of
 * (simd_vector*,) `obj` according to the scalar data type `dtype`
 * on range (simd_data_[vu8x2:vf64x2])-(simd_data_[vu8x3:vf64x3]).
 *
 * Raise a Python exception on failure.
 *
 * Example:
 ** simd_data data = simd_vectorx_from_tuple(tuple_obj, simd_data_vf32x2);
 ** if (!PyErr_Occurred()) {
 **     npyv_f32 sum = npyv_add_f32(data.vf32x2.val[0], data.vf32x2.val[1]);
 **     ...
 ** }
 **
 ','line_number':297,'multiline':True]['text':'*
 * Create a Python tuple of 'simd_vector' from a SIMD multi-vector
 * based on the contents of `data`(simd_data) and according to
 * the multi-vector data type `dtype` on range
 * (simd_data_[vu8x2:vf64x2])-(simd_data_[vu8x3:vf64x3]).
 *
 * Return NULL and a Python exception on failure, otherwise new reference.
 ','line_number':314,'multiline':True]['text':'***********************************
 ** Declarations (inc_arg)
 ***********************************','line_number':325,'multiline':True]['text':' set by simd_arg_converter()','line_number':332,'multiline':False]['text':'*
 * The following functions gather all conversions between all data types
 * and they can used instead of all above functions.
 ','line_number':335,'multiline':True]['text':'*
 * Convert a Python object `obj` into simd_data `arg->data` according to the
 * required data type `arg->dtype`.
 *
 * Return -1 and raise Python exception on failure, otherwise return 0.
 *
 * Notes:
 *  - requires `simd_arg_free()` or `simd_sequence_free()`
 *    to free allocated C array, in case of sequence data types.
 *  - the number of minimum acceptable elements for sequence data
 *    types is the number of lanes of the equivalent vector data type.
 *
 * Example #1:
 ** simd_arg arg = {.dtype = simd_data_qu8};
 ** if (simd_arg_from_obj(seq_obj, &arg) < 0) {
 **     // fails to convert a python sequence object to C array of uint8
 **     return;
 ** }
 ** npyv_u8 v_u8 = npyv_load_u8(arg->data.qu8);
 ** ...
 ** simd_arg_free(&arg);
 *
 * Example #2:
 ** simd_arg arg = {.dtype = simd_data_vf32};
 ** if (simd_arg_from_obj(vector_obj, &arg) < 0) {
 **     // fails to convert a python simd_vector to NPYV vector
 **     return;
 ** }
 ** npyv_f32 add_one = npyv_add_f32(arg->data.vu8, npyv_setall_f32(1));
 ** ...
 ','line_number':339,'multiline':True]['text':'*
 * Convert a simd_data `arg->data` to into a Python object according to the
 * required data type `arg->dtype`.
 *
 * Return NULL and raise Python exception on failure, otherwise return
 * new reference.
 *
 * Example:
 ** simd_arg arg = {.dtype = simd_data_u32, .data = {.u32 = 0xffffffff}};
 ** PyObject *obj = simd_arg_to_obj(&arg);
 ** if (obj == NULL) {
 **    // fails convert C uint32 to Python integer.
 **    return;
 ** }
 **
 ','line_number':372,'multiline':True]['text':'*
 * Converter function used similar to simd_arg_from_obj() but
 * used with PyArg_Parse*().
 *
 * Notes:
 *  - requires `simd_arg_free()` or `simd_sequence_free()`
 *    to free allocated C array, in case of sequence data types.
 *  - the number of minimum acceptable elements for sequence data
 *    types is the number of lanes of the equivalent vector data type.
 *  - use 'arg->obj' to retrieve the parameter obj.
 *
 * Example:
 **  simd_arg seq_f32 = {.dtype = simd_data_qf32};
 **  simd_arg vec_f32 = {.dtype = simd_data_vf32};
 **  if (!PyArg_ParseTuple(
 **     args, "O&O&:add_sum_f32",
 **     simd_arg_converter, &seq_f32,
 **     simd_arg_converter, &vec_f32
 **  )) {
 **     // fail
 **     return;
 **  }
 **  npyv_f32 load_a = npyv_load_f32(seq_f32.data.qf32);
 **  npyv_f32 sum = npyv_add_f32(load_a, vec_f32.data.vf32);
 **  ...
 **  simd_arg_free(&seq_f32);
 ','line_number':390,'multiline':True]['text':'*
 * Free the allocated C array, if the arg hold sequence data type.
 ','line_number':419,'multiline':True]['text':' NPY_SIMD','line_number':425,'multiline':False]['text':' _SIMD_SIMD_INC_H_','line_number':426,'multiline':False]