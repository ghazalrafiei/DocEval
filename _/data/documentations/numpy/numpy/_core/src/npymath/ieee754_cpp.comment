['text':' -*- c -*- ','line_number':1,'multiline':True]['text':'
 * vim:syntax=c
 *
 * Low-level routines related to IEEE-754 format
 ','line_number':2,'multiline':True]['text':'
 The below code is provided for compilers which do not yet provide C11
 compatibility (gcc 4.5 and older)
 ','line_number':12,'multiline':True]['text':'
 * FIXME: There is a lot of redundancy between _next* and npy_nextafter*.
 * refactor this at some point
 *
 * p >= 0, returnx x + nulp
 * p < 0, returnx x - nulp
 ','line_number':21,'multiline':True]['text':' |x| ','line_number':36,'multiline':True]['text':' x is nan ','line_number':38,'multiline':True]['text':' x == 0 ','line_number':40,'multiline':True]['text':' return +minsubnormal ','line_number':42,'multiline':True]['text':' return -minsubnormal ','line_number':45,'multiline':True]['text':' raise underflow flag ','line_number':51,'multiline':True]['text':' x -= ulp ','line_number':53,'multiline':True]['text':' x += ulp ','line_number':58,'multiline':True]['text':' overflow  ','line_number':65,'multiline':True]['text':' underflow ','line_number':66,'multiline':True]['text':' raise underflow flag ','line_number':68,'multiline':True]['text':' |x| ','line_number':84,'multiline':True]['text':' x is nan ','line_number':86,'multiline':True]['text':' x == 0 ','line_number':88,'multiline':True]['text':' return +minsubnormal ','line_number':90,'multiline':True]['text':' return -minsubnormal ','line_number':93,'multiline':True]['text':' raise underflow flag ','line_number':99,'multiline':True]['text':' x -= ulp ','line_number':101,'multiline':True]['text':' x += ulp ','line_number':104,'multiline':True]['text':' overflow  ','line_number':109,'multiline':True]['text':' underflow ','line_number':110,'multiline':True]['text':' raise underflow flag ','line_number':112,'multiline':True]['text':'
 * FIXME: this is ugly and untested. The asm part only works with gcc, and we
 * should consolidate the GET_LDOUBLE* / SET_LDOUBLE macros
 ','line_number':124,'multiline':True]['text':' only works for big endian ','line_number':136,'multiline':True]['text':' Get two 64 bit ints from a long double.  ','line_number':148,'multiline':True]['text':' Set a long double from two 64 bit ints.  ','line_number':158,'multiline':True]['text':' 0x1.0000000000000p-105L','line_number':174,'multiline':False]['text':' |hx| ','line_number':177,'multiline':True]['text':' |lx| ','line_number':178,'multiline':True]['text':' signal the nan ','line_number':182,'multiline':True]['text':' x == 0 ','line_number':184,'multiline':True]['text':' return +-minsubnormal ','line_number':185,'multiline':True]['text':' raise underflow flag ','line_number':191,'multiline':True]['text':' p < 0, x -= ulp ','line_number':195,'multiline':True]['text':' overflow, return -inf ','line_number':197,'multiline':True]['text':' x <= LDBL_MIN ','line_number':202,'multiline':True]['text':' raise underflow flag ','line_number':208,'multiline':True]['text':' ulp will denormal ','line_number':212,'multiline':True]['text':' p >= 0, x += ulp ','line_number':222,'multiline':True]['text':' overflow, return +inf ','line_number':224,'multiline':True]['text':' x <= LDBL_MIN ','line_number':229,'multiline':True]['text':' raise underflow flag ','line_number':236,'multiline':True]['text':' handle negative LDBL_TRUE_MIN case ','line_number':238,'multiline':True]['text':' ulp will denormal ','line_number':242,'multiline':True]['text':' x is nan ','line_number':264,'multiline':True]['text':' return +-minsubnormal ','line_number':267,'multiline':True]['text':' raise underflow flag ','line_number':280,'multiline':True]['text':' x -= ulp ','line_number':283,'multiline':True]['text':' x += ulp ','line_number':293,'multiline':True]['text':' overflow  ','line_number':304,'multiline':True]['text':' underflow ','line_number':306,'multiline':True]['text':' raise underflow flag ','line_number':311,'multiline':True]['text':' namespace','line_number':341,'multiline':False]['text':' XXX: npy isnan/isinf may be optimized by bit twiddling ','line_number':347,'multiline':True]['text':'
 * Instantiation of C interface
 ','line_number':355,'multiline':True]['text':' 
 * General C99 code for floating point error handling.  These functions mainly
 * exists, because `fenv.h` was not standardized in C89 so they gave better
 * portability.  This should be unnecessary with C99/C++11 and further
 * functionality can be used from `fenv.h` directly. 
 ','line_number':390,'multiline':True]['text':'
 * According to the C99 standard FE_DIVBYZERO, etc. may not be provided when
 * unsupported.  In such cases NumPy will not report these correctly, but we
 * should still allow compiling (whether tests pass or not).
 * By defining them as 0 locally, we make them no-ops.  Unlike these defines,
 * for example `musl` still defines all of the functions (as no-ops):
 *     https://git.musl-libc.org/cgit/musl/tree/src/fenv/fenv.c
 * and does similar replacement in its tests:
 * http://nsz.repo.hu/git/?p=libc-test;a=blob;f=src/common/mtest.h;h=706c1ba23ea8989b17a2f72ed1a919e187c06b6a;hb=HEAD#l30
 ','line_number':398,'multiline':True]['text':'
     * By using a volatile, the compiler cannot reorder this call
     ','line_number':427,'multiline':True]['text':' testing float status is 50-100 times faster than clearing on x86 ','line_number':443,'multiline':True]