['text':' -*- c -*- ','line_number':1,'multiline':True]['text':'
 * vim:syntax=c
 *
 * Low-level routines related to IEEE-754 format
 ','line_number':2,'multiline':True]['text':'
 The below code is provided for compilers which do not yet provide C11 compatibility (gcc 4.5 and older)
 ','line_number':11,'multiline':True]['text':'
 * FIXME: There is a lot of redundancy between _next* and npy_nextafter*.
 * refactor this at some point
 *
 * p >= 0, returnx x + nulp
 * p < 0, returnx x - nulp
 ','line_number':18,'multiline':True]['text':' |x| ','line_number':32,'multiline':True]['text':' x is nan ','line_number':34,'multiline':True]['text':' x == 0 ','line_number':36,'multiline':True]['text':' return +minsubnormal ','line_number':38,'multiline':True]['text':' return -minsubnormal ','line_number':40,'multiline':True]['text':' raise underflow flag ','line_number':46,'multiline':True]['text':' x -= ulp ','line_number':48,'multiline':True]['text':' x += ulp ','line_number':52,'multiline':True]['text':' overflow  ','line_number':59,'multiline':True]['text':' underflow ','line_number':60,'multiline':True]['text':' raise underflow flag ','line_number':62,'multiline':True]['text':' |x| ','line_number':77,'multiline':True]['text':' x is nan ','line_number':79,'multiline':True]['text':' x == 0 ','line_number':81,'multiline':True]['text':' return +minsubnormal ','line_number':83,'multiline':True]['text':' return -minsubnormal ','line_number':85,'multiline':True]['text':' raise underflow flag ','line_number':91,'multiline':True]['text':' x -= ulp ','line_number':93,'multiline':True]['text':' x += ulp ','line_number':95,'multiline':True]['text':' overflow  ','line_number':100,'multiline':True]['text':' underflow ','line_number':101,'multiline':True]['text':' raise underflow flag ','line_number':103,'multiline':True]['text':'
 * FIXME: this is ugly and untested. The asm part only works with gcc, and we
 * should consolidate the GET_LDOUBLE* / SET_LDOUBLE macros
 ','line_number':115,'multiline':True]['text':' only works for big endian ','line_number':123,'multiline':True]['text':' Get two 64 bit ints from a long double.  ','line_number':138,'multiline':True]['text':' Set a long double from two 64 bit ints.  ','line_number':148,'multiline':True]['text':' |hx| ','line_number':165,'multiline':True]['text':' |lx| ','line_number':166,'multiline':True]['text':' signal the nan ','line_number':170,'multiline':True]['text':' x == 0 ','line_number':172,'multiline':True]['text':' return +-minsubnormal ','line_number':173,'multiline':True]['text':' raise underflow flag ','line_number':178,'multiline':True]['text':' p < 0, x -= ulp ','line_number':182,'multiline':True]['text':' overflow, return -inf ','line_number':184,'multiline':True]['text':' x <= LDBL_MIN ','line_number':189,'multiline':True]['text':' raise underflow flag ','line_number':196,'multiline':True]['text':' ulp will denormal ','line_number':200,'multiline':True]['text':' p >= 0, x += ulp ','line_number':206,'multiline':True]['text':' overflow, return +inf ','line_number':208,'multiline':True]['text':' x <= LDBL_MIN ','line_number':213,'multiline':True]['text':' raise underflow flag ','line_number':220,'multiline':True]['text':' handle negative LDBL_TRUE_MIN case ','line_number':222,'multiline':True]['text':' ulp will denormal ','line_number':226,'multiline':True]['text':' x is nan ','line_number':244,'multiline':True]['text':' return +-minsubnormal ','line_number':247,'multiline':True]['text':' raise underflow flag ','line_number':258,'multiline':True]['text':' x -= ulp ','line_number':261,'multiline':True]['text':' x += ulp ','line_number':271,'multiline':True]['text':' overflow  ','line_number':283,'multiline':True]['text':' underflow ','line_number':285,'multiline':True]['text':' raise underflow flag ','line_number':290,'multiline':True]['text':'*begin repeat
 * #suff = f,,l#
 * #SUFF = F,,L#
 * #type = npy_float, npy_double, npy_longdouble#
 ','line_number':299,'multiline':True]['text':' XXX: npy isnan/isinf may be optimized by bit twiddling ','line_number':306,'multiline':True]['text':'*end repeat*','line_number':313,'multiline':True]['text':'
 * General C99 code for floating point error handling.  These functions mainly
 * exists, because `fenv.h` was not standardized in C89 so they gave better
 * portability.  This should be unnecessary with C99/C++11 and further
 * functionality can be used from `fenv.h` directly.
 ','line_number':325,'multiline':True]['text':'
 * According to the C99 standard FE_DIVBYZERO, etc. may not be provided when
 * unsupported.  In such cases NumPy will not report these correctly, but we
 * should still allow compiling (whether tests pass or not).
 * By defining them as 0 locally, we make them no-ops.  Unlike these defines,
 * for example `musl` still defines all of the functions (as no-ops):
 *     https://git.musl-libc.org/cgit/musl/tree/src/fenv/fenv.c
 * and does similar replacement in its tests:
 * http://nsz.repo.hu/git/?p=libc-test;a=blob;f=src/common/mtest.h;h=706c1ba23ea8989b17a2f72ed1a919e187c06b6a;hb=HEAD#l30
 ','line_number':333,'multiline':True]['text':'
     * By using a volatile, the compiler cannot reorder this call
     ','line_number':361,'multiline':True]['text':' testing float status is 50-100 times faster than clearing on x86 ','line_number':376,'multiline':True]