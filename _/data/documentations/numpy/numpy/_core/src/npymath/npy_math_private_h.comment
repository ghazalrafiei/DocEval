['text':'
 *
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':1,'multiline':True]['text':'
 * from: @(#)fdlibm.h 5.1 93/09/24
 * $FreeBSD$
 ','line_number':13,'multiline':True]['text':'
 * The original fdlibm code used statements like:
 *      n0 = ((*(int*)&one)>>29)^1;             * index of high word *
 *      ix0 = *(n0+(int*)&x);                   * high word of x *
 *      ix1 = *((1-n0)+(int*)&x);               * low word of x *
 * to dig two 32 bit words out of the 64 bit IEEE floating point
 * value.  That is non-ANSI, and, moreover, the gcc instruction
 * scheduler gets it wrong.  We instead use the following macros.
 * Unlike the original code, we determine the endianness at compile
 * time, not at run time; I don't see much benefit to selecting
 * endianness at run time.
 ','line_number':37,'multiline':True]['text':'
 * A union which permits us to convert between a double and two 32 bit
 * ints.
 ','line_number':50,'multiline':True]['text':' XXX: not really, but we already make this assumption elsewhere. Will have to
 * fix this at some point ','line_number':55,'multiline':True]['text':' Get two 32 bit ints from a double.  ','line_number':87,'multiline':True]['text':' Get the more significant 32 bit int from a double.  ','line_number':97,'multiline':True]['text':' Get the less significant 32 bit int from a double.  ','line_number':106,'multiline':True]['text':' Set the more significant 32 bits of a double from an int.  ','line_number':115,'multiline':True]['text':' Set the less significant 32 bits of a double from an int.  ','line_number':125,'multiline':True]['text':' Set a double from two 32 bit ints.  ','line_number':135,'multiline':True]['text':'
 * A union which permits us to convert between a float and a 32 bit
 * int.
 ','line_number':145,'multiline':True]['text':' FIXME: Assumes 32 bit int.  ','line_number':153,'multiline':True]['text':' Get a 32 bit int from a float.  ','line_number':157,'multiline':True]['text':' Set a float from a 32 bit int.  ','line_number':166,'multiline':True]['text':'
 * Long double support
 ','line_number':175,'multiline':True]['text':'
     * Intel extended 80 bits precision. Bit representation is
     *          |  junk  |     s  |eeeeeeeeeeeeeee|mmmmmmmm................mmmmmmm|
     *          | 16 bits|  1 bit |    15 bits    |            64 bits            |
     *          |             a[2]                |     a[1]     |    a[0]        |
     *
     * 16 stronger bits of a[2] are junk
     ','line_number':179,'multiline':True]['text':'
     * Intel extended 80 bits precision, 16 bytes alignment.. Bit representation is
     *          |  junk  |     s  |eeeeeeeeeeeeeee|mmmmmmmm................mmmmmmm|
     *          | 16 bits|  1 bit |    15 bits    |            64 bits            |
     *          |             a[2]                |     a[1]     |    a[0]        |
     *
     * a[3] and 16 stronger bits of a[2] are junk
     ','line_number':217,'multiline':True]['text':'
     * Motorola extended 80 bits precision. Bit representation is
     *          |     s  |eeeeeeeeeeeeeee|  junk  |mmmmmmmm................mmmmmmm|
     *          |  1 bit |    15 bits    | 16 bits|            64 bits            |
     *          |             a[0]                |     a[1]     |    a[2]        |
     *
     * 16 low bits of a[0] are junk
     ','line_number':254,'multiline':True]['text':' 64 bits IEEE double precision aligned on 16 bytes: used by ppc arch on
     * Mac OS X ','line_number':292,'multiline':True]['text':'
     * IEEE double precision. Bit representation is
     *          |  s  |eeeeeeeeeee|mmmmmmmm................mmmmmmm|
     *          |1 bit|  11 bits  |            52 bits            |
     *          |          a[0]         |         a[1]            |
     ','line_number':295,'multiline':True]['text':' 64 bits IEEE double precision, Little Endian. ','line_number':330,'multiline':True]['text':'
     * IEEE double precision. Bit representation is
     *          |  s  |eeeeeeeeeee|mmmmmmmm................mmmmmmm|
     *          |1 bit|  11 bits  |            52 bits            |
     *          |          a[1]         |         a[0]            |
     ','line_number':332,'multiline':True]['text':'
     * IEEE quad precision, Big Endian. Bit representation is
     *          |  s  |eeeeeeeeeee|mmmmmmmm................mmmmmmm|
     *          |1 bit|  15 bits  |            112 bits           |
     *          |          a[0]         |           a[1]          |
     ','line_number':367,'multiline':True]['text':'
     * IEEE quad precision, Little Endian. Bit representation is
     *          |  s  |eeeeeeeeeee|mmmmmmmm................mmmmmmm|
     *          |1 bit|  15 bits  |            112 bits           |
     *          |          a[1]         |           a[0]          |
     ','line_number':402,'multiline':True]['text':' Get the sign bit of x. x should be of type IEEEl2bitsrep ','line_number':440,'multiline':True]['text':' Set the sign bit of x to v. x should be of type IEEEl2bitsrep ','line_number':444,'multiline':True]['text':' Get the exp bits of x. x should be of type IEEEl2bitsrep ','line_number':450,'multiline':True]['text':' Set the exp bit of x to v. x should be of type IEEEl2bitsrep ','line_number':454,'multiline':True]['text':' Get the manl bits of x. x should be of type IEEEl2bitsrep ','line_number':460,'multiline':True]['text':' Set the manl bit of x to v. x should be of type IEEEl2bitsrep ','line_number':464,'multiline':True]['text':' Get the manh bits of x. x should be of type IEEEl2bitsrep ','line_number':470,'multiline':True]['text':' Set the manh bit of x to v. x should be of type IEEEl2bitsrep ','line_number':474,'multiline':True]['text':' !HAVE_LDOUBLE_DOUBLE_DOUBLE_* ','line_number':480,'multiline':True]['text':' !_NPY_MATH_PRIVATE_H_ ','line_number':482,'multiline':True]