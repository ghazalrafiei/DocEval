['text':' xlocale was removed in glibc 2.26, see gh-8367','line_number':23,'multiline':False]['text':'
 * From the C99 standard, section 7.19.6: The exponent always contains at least
 * two digits, and only as many more digits as necessary to represent the
 * exponent.
 ','line_number':29,'multiline':True]['text':'
 * Ensure that any exponent, if present, is at least MIN_EXPONENT_DIGITS
 * in length.
 ','line_number':37,'multiline':True]['text':' Skip over the exponent and the sign. ','line_number':52,'multiline':True]['text':' Find the end of the exponent, keeping track of leading zeros. ','line_number':55,'multiline':True]['text':'
             * If there are 2 exactly digits, we're done,
             * regardless of what they contain
             ','line_number':69,'multiline':True]['text':'
             * There are more than 2 digits in the exponent.  See
             * if we can delete some of the leading zeros
             ','line_number':77,'multiline':True]['text':'
             * Delete extra_zeros_cnt worth of characters from the
             * front of the exponent
             ','line_number':86,'multiline':True]['text':'
             * Add one to significant_digit_cnt to copy the
             * trailing 0 byte, thus setting the length
             ','line_number':92,'multiline':True]['text':'
             * If there are fewer than 2 digits, add zeros
             * until there are 2, if there's enough room
             ','line_number':99,'multiline':True]['text':'
 * Ensure that buffer has a decimal point in it.  The decimal point
 * will not be in the current locale, it will always be '.'
 ','line_number':112,'multiline':True]['text':' search for the first non-digit character ','line_number':122,'multiline':True]['text':'
         * Skip leading sign, if present.  I think this could only
         * ever be '-', but it can't hurt to check for both.
         ','line_number':125,'multiline':True]['text':'
             * Nothing to do, we already have a decimal
             * point and a digit after it.
             ','line_number':135,'multiline':True]['text':'
             * We have a decimal point, but no following
             * digit.  Insert a zero after the decimal.
             ','line_number':141,'multiline':True]['text':'
             * If there is not enough room in the buffer
             * for the additional text, just skip it.  It's
             * not worth generating an error over.
             ','line_number':157,'multiline':True]['text':' see FORMATBUFLEN in unicodeobject.c ','line_number':170,'multiline':True]['text':'
 * Given a string that may have a decimal point in the current
 * locale, change it back to a dot.  Since the string cannot get
 * longer, no need for a maximum buffer size parameter.
 ','line_number':173,'multiline':True]['text':' buffer needs to get smaller ','line_number':197,'multiline':True]['text':'
 * Check that the format string is a valid one for NumPyOS_ascii_format*
 ','line_number':206,'multiline':True]['text':' The last character in the format string must be the format char ','line_number':215,'multiline':True]['text':'
     * I'm not sure why this test is here.  It's ensuring that the format
     * string after the first character doesn't have a single quote, a
     * lowercase l, or a percent. This is the reverse of the commented-out
     * test about 10 lines ago.
     ','line_number':222,'multiline':True]['text':'
     * Also curious about this function is that it accepts format strings
     * like "%xg", which are invalid for floats.  In general, the
     * interface to this function is not very good, but changing it is
     * difficult because it's a public API.
     ','line_number':232,'multiline':True]['text':'
 * Fix the generated string: make sure the decimal is ., that exponent has a
 * minimal number of digits, and that it has a decimal + one digit after that
 * decimal if decimal argument != 0 (Same effect that 'Z' format in
 * PyOS_ascii_formatd)
 ','line_number':247,'multiline':True]['text':'
     * Get the current locale, and find the decimal point string.
     * Convert that string back to a dot.
     ','line_number':256,'multiline':True]['text':'
     * If an exponent exists, ensure that the exponent is at least
     * MIN_EXPONENT_DIGITS digits, providing the buffer is large enough
     * for the extra zeros.  Also, if there are more than
     * MIN_EXPONENT_DIGITS, remove as many zeros as possible until we get
     * back to MIN_EXPONENT_DIGITS
     ','line_number':262,'multiline':True]['text':'
 * NumPyOS_ascii_format*:
 *      - buffer: A buffer to place the resulting string in
 *      - buf_size: The length of the buffer.
 *      - format: The printf()-style format to use for the code to use for
 *      converting.
 *      - value: The value to convert
 *      - decimal: if != 0, always has a decimal, and at leasat one digit after
 *      the decimal. This has the same effect as passing 'Z' in the original
 *      PyOS_ascii_formatd
 *
 * This is similar to PyOS_ascii_formatd in python > 2.6, except that it does
 * not handle 'n', and handles nan / inf.
 *
 * Converts a #gdouble to a string, using the '.' as decimal point. To format
 * the number you pass in a printf()-style format string. Allowed conversion
 * specifiers are 'e', 'E', 'f', 'F', 'g', 'G'.
 *
 * Return value: The pointer to the buffer with the converted string.
 ','line_number':278,'multiline':True]['text':'
 * NumPyOS_ascii_isspace:
 *
 * Same as isspace under C locale
 ','line_number':342,'multiline':True]['text':'
 * NumPyOS_ascii_isalpha:
 *
 * Same as isalpha under C locale
 ','line_number':355,'multiline':True]['text':'
 * NumPyOS_ascii_isdigit:
 *
 * Same as isdigit under C locale
 ','line_number':367,'multiline':True]['text':'
 * NumPyOS_ascii_isalnum:
 *
 * Same as isalnum under C locale
 ','line_number':379,'multiline':True]['text':'
 * NumPyOS_ascii_tolower:
 *
 * Same as tolower under C locale
 ','line_number':391,'multiline':True]['text':'
 * NumPyOS_ascii_strncasecmp:
 *
 * Same as strncasecmp under C locale
 ','line_number':406,'multiline':True]['text':'
 * NumPyOS_ascii_strtod_plain:
 *
 * PyOS_ascii_strtod work-alike, with no enhanced features,
 * for forward compatibility with Python >= 2.7
 ','line_number':429,'multiline':True]['text':'
 * NumPyOS_ascii_strtod:
 *
 * Work around bugs in PyOS_ascii_strtod
 ','line_number':452,'multiline':True]['text':'
     * ##1
     *
     * Recognize POSIX inf/nan representations on all platforms.
     ','line_number':467,'multiline':True]['text':' End of ##1 ','line_number':507,'multiline':True]['text':'
     * ##1
     *
     * Recognize POSIX inf/nan representations on all platforms.
     ','line_number':525,'multiline':True]['text':' End of ##1 ','line_number':565,'multiline':True]['text':'
 * read_numberlike_string:
 *      * fp: FILE pointer
 *      * value: Place to store the value read
 *
 * Read what looks like valid numeric input and store it in a buffer
 * for later parsing as a number.
 *
 * Similarly to fscanf, this function always consumes leading whitespace,
 * and any text that could be the leading part in valid input.
 *
 * Return value: similar to fscanf.
 *      * 0 if no number read,
 *      * 1 if a number read,
 *      * EOF if end-of-file met before reading anything.
 ','line_number':586,'multiline':True]['text':'
     * Fill buffer with the leftmost matching part in regexp
     *
     *     \s*[+-]? ( [0-9]*\.[0-9]+([eE][+-]?[0-9]+)
     *              | nan  (  \([:alphanum:_]*\) )?
     *              | inf(inity)?
     *              )
     *
     * case-insensitively.
     *
     * The "do { ... } while (0)" wrapping in macros ensures that they behave
     * properly eg. in "if ... else" structures.
     ','line_number':611,'multiline':True]['text':' 1. emulate fscanf EOF handling ','line_number':656,'multiline':True]['text':' 2. consume leading whitespace unconditionally ','line_number':661,'multiline':True]['text':' 3. start reading matching input to buffer ','line_number':666,'multiline':True]['text':' 4.1 sign (optional) ','line_number':669,'multiline':True]['text':' 4.2 nan, inf, infinity; [case-insensitive] ','line_number':672,'multiline':True]['text':' accept nan([:alphanum:_]*), similarly to strtod ','line_number':677,'multiline':True]['text':' 4.3 mantissa ','line_number':693,'multiline':True]['text':' 4.4 exponent ','line_number':701,'multiline':True]['text':' return 1 if something read, else 0 ','line_number':715,'multiline':True]['text':'
 * NumPyOS_ascii_ftolf:
 *      * fp: FILE pointer
 *      * value: Place to store the value read
 *
 * Similar to PyOS_ascii_strtod, except that it reads input from a file.
 *
 * Similarly to fscanf, this function always consumes leading whitespace,
 * and any text that could be the leading part in valid input.
 *
 * Return value: similar to fscanf.
 *      * 0 if no number read,
 *      * 1 if a number read,
 *      * EOF if end-of-file met before reading anything.
 ','line_number':726,'multiline':True]['text':' npy3k_compat.h uses this function in the _Py_BEGIN/END_SUPPRESS_IPH
 * macros. It does not need to be defined when building using MSVC
 * earlier than 14.0 (_MSC_VER == 1900).
 ','line_number':790,'multiline':True]