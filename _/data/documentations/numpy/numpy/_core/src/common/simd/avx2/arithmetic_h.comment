['text':'**************************
 * Addition
 **************************','line_number':9,'multiline':True]['text':' non-saturated','line_number':12,'multiline':False]['text':' saturated','line_number':24,'multiline':False]['text':' TODO: rest, after implement Packs intrins','line_number':29,'multiline':False]['text':'**************************
 * Subtraction
 **************************','line_number':31,'multiline':True]['text':' non-saturated','line_number':34,'multiline':False]['text':' saturated','line_number':46,'multiline':False]['text':' TODO: rest, after implement Packs intrins','line_number':51,'multiline':False]['text':'**************************
 * Multiplication
 **************************','line_number':53,'multiline':True]['text':' non-saturated','line_number':56,'multiline':False]['text':' saturated','line_number':66,'multiline':False]['text':' TODO: after implement Packs intrins','line_number':67,'multiline':False]['text':'**************************
 * Integer Division
 **************************','line_number':69,'multiline':True]['text':' See simd/intdiv.h for more clarification','line_number':72,'multiline':False]['text':' divide each unsigned 8-bit element by a precomputed divisor','line_number':73,'multiline':False]['text':' high part of unsigned multiplication','line_number':81,'multiline':False]['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':86,'multiline':False]['text':' divide each signed 8-bit element by a precomputed divisor (round towards zero)','line_number':93,'multiline':False]['text':' instead of _mm256_cvtepi8_epi16/_mm256_packs_epi16 to wrap around overflow','line_number':98,'multiline':False]['text':' divide each unsigned 16-bit element by a precomputed divisor','line_number':104,'multiline':False]['text':' high part of unsigned multiplication','line_number':109,'multiline':False]['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':111,'multiline':False]['text':' divide each signed 16-bit element by a precomputed divisor (round towards zero)','line_number':118,'multiline':False]['text':' high part of signed multiplication','line_number':122,'multiline':False]['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':124,'multiline':False]['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':125,'multiline':False]['text':' divide each unsigned 32-bit element by a precomputed divisor','line_number':131,'multiline':False]['text':' high part of unsigned multiplication','line_number':136,'multiline':False]['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':140,'multiline':False]['text':' divide each signed 32-bit element by a precomputed divisor (round towards zero)','line_number':147,'multiline':False]['text':' high part of signed multiplication','line_number':151,'multiline':False]['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':155,'multiline':False]['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':156,'multiline':False]['text':' returns the high 64 bits of unsigned 64-bit multiplication','line_number':162,'multiline':False]['text':' xref https://stackoverflow.com/a/28827013','line_number':163,'multiline':False]['text':' a0l, a0h, a1l, a1h','line_number':167,'multiline':False]['text':' b0l, b0h, b1l, b1h','line_number':168,'multiline':False]['text':' compute partial products','line_number':169,'multiline':False]['text':' a0l*b0l, a1l*b1l','line_number':170,'multiline':False]['text':' a0l*b0h, a1l*b1h','line_number':171,'multiline':False]['text':' a0h*b0l, a1h*b0l','line_number':172,'multiline':False]['text':' a0h*b0h, a1h*b1h','line_number':173,'multiline':False]['text':' sum partial products','line_number':174,'multiline':False]['text':' divide each unsigned 64-bit element by a divisor','line_number':187,'multiline':False]['text':' high part of unsigned multiplication','line_number':192,'multiline':False]['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':194,'multiline':False]['text':' divide each unsigned 64-bit element by a divisor (round towards zero)','line_number':201,'multiline':False]['text':' high part of unsigned multiplication','line_number':205,'multiline':False]['text':' convert unsigned to signed high multiplication','line_number':207,'multiline':False]['text':' mulhi - ((a < 0) ? m : 0) - ((m < 0) ? a : 0);','line_number':208,'multiline':False]['text':' q               = (a + mulhi) >> sh','line_number':215,'multiline':False]['text':' emulate arithmetic right shift','line_number':217,'multiline':False]['text':' q               = q - XSIGN(a)','line_number':221,'multiline':False]['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':222,'multiline':False]['text':'**************************
 * Division
 **************************','line_number':227,'multiline':True]['text':' TODO: emulate integer division','line_number':230,'multiline':False]['text':'**************************
 * FUSED
 **************************','line_number':234,'multiline':True]['text':' multiply and add, a*b + c','line_number':238,'multiline':False]['text':' multiply and subtract, a*b - c','line_number':241,'multiline':False]['text':' negate multiply and add, -(a*b) + c','line_number':244,'multiline':False]['text':' negate multiply and subtract, -(a*b) - c','line_number':247,'multiline':False]['text':' multiply, add for odd elements and subtract even elements.','line_number':250,'multiline':False]['text':' (a * b) -+ c','line_number':251,'multiline':False]['text':' multiply and add, a*b + c','line_number':255,'multiline':False]['text':' multiply and subtract, a*b - c','line_number':260,'multiline':False]['text':' negate multiply and add, -(a*b) + c','line_number':265,'multiline':False]['text':' negate multiply and subtract, -(a*b) - c','line_number':270,'multiline':False]['text':' multiply, add for odd elements and subtract even elements.','line_number':281,'multiline':False]['text':' (a * b) -+ c','line_number':282,'multiline':False]['text':' !NPY_HAVE_FMA3','line_number':288,'multiline':False]['text':'**************************
 * Summation
 **************************','line_number':290,'multiline':True]['text':' reduce sum across vector','line_number':293,'multiline':False]['text':' expand the source vector and performs sum reduce','line_number':329,'multiline':False]['text':' _NPY_SIMD_AVX2_ARITHMETIC_H','line_number':347,'multiline':False]