['text':'
 * Check whether an object has __array_ufunc__ defined on its class and it
 * is not the default, i.e., the object is not an ndarray, and its
 * __array_ufunc__ is not the same as that of ndarray.
 *
 * Returns a new reference, the value of type(obj).__array_ufunc__ if it
 * exists and is different from that of ndarray, and NULL otherwise.
 ','line_number':10,'multiline':True]['text':' On first entry, cache ndarray's __array_ufunc__ ','line_number':24,'multiline':True]['text':' Fast return for ndarray ','line_number':30,'multiline':True]['text':' Fast return for numpy scalar types ','line_number':34,'multiline':True]['text':'
     * Does the class define __array_ufunc__? (Note that LookupSpecial has fast
     * return for basic python types, so no need to worry about those here)
     ','line_number':39,'multiline':True]['text':' TODO[gh-14801]: propagate crashes during attribute access? ','line_number':46,'multiline':True]['text':' Ignore if the same as ndarray.__array_ufunc__ ','line_number':50,'multiline':True]['text':'
 * Check whether an object has __array_ufunc__ defined on its class and it
 * is not the default, i.e., the object is not an ndarray, and its
 * __array_ufunc__ is not the same as that of ndarray.
 *
 * Returns 1 if this is the case, 0 if not.
 ','line_number':58,'multiline':True]['text':'
 * Get possible out argument from kwds, and returns the number of outputs
 * contained within it: if a tuple, the number of elements in it, 1 otherwise.
 * The out argument itself is returned in out_kwd_obj, and the outputs
 * in the out_obj array (as borrowed references).
 *
 * Returns 0 if no outputs found, -1 if kwds is not a dict (with an error set).
 ','line_number':79,'multiline':True]['text':' borrowed reference ','line_number':102,'multiline':True]['text':'
         * The C-API recommends calling PySequence_Fast before any of the other
         * PySequence_Fast* functions. This is required for PyPy
         ','line_number':113,'multiline':True]