['text':'*
 * This header implements `npyv_divisor_*` intrinsics used for computing the parameters
 * of fast integer division, while division intrinsics `npyv_divc_*` are defined in
 * {extension}/arithmetic.h.
 ','line_number':1,'multiline':True]['text':'*********************************************************************************
 ** Integer division
 **********************************************************************************
 * Almost all architecture (except Power10) doesn't support integer vector division,
 * also the cost of scalar division in architectures like x86 is too high it can take
 * 30 to 40 cycles on modern chips and up to 100 on old ones.
 *
 * Therefore we are using division by multiplying with precomputed reciprocal technique,
 * the method that been used in this implementation is based on T. Granlund and P. L. Montgomery
 * “Division by invariant integers using multiplication(see [Figure 4.1, 5.1]
 * https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.1.2556)
 *
 * It shows a good impact for all architectures especially on X86,
 * however computing divisor parameters is kind of expensive so this implementation
 * should only works when divisor is a scalar and used multiple of times.
 *
 * The division process is separated into two intrinsics for each data type
 *
 *  1- npyv_{dtype}x3 npyv_divisor_{dtype} ({dtype} divisor);
 *     For computing the divisor parameters (multiplier + shifters + sign of divisor(signed only))
 *
 *  2- npyv_{dtype} npyv_divisor_{dtype} (npyv_{dtype} dividend, npyv_{dtype}x3 divisor_parms);
 *     For performing the final division.
 *
 ** For example:
 *    int vstep = npyv_nlanes_s32;                // number of lanes
 *    int x     = 0x6e70;
 *    npyv_s32x3 divisor = npyv_divisor_s32(x);   // init divisor params
 *    for (; len >= vstep; src += vstep, dst += vstep, len -= vstep) {
 *        npyv_s32 a = npyv_load_s32(*src);       // load s32 vector from memory
 *                 a = npyv_divc_s32(a, divisor); // divide all elements by x
 *        npyv_store_s32(dst, a);                 // store s32 vector into memory
 *    }
 *
 ** NOTES:
 *  - For 64-bit division on Aarch64 and IBM/Power, we fall-back to the scalar division
 *    since emulating multiply-high is expensive and both architectures have very fast dividers.
 *
 ***************************************************************
 ** Figure 4.1: Unsigned division by run–time invariant divisor
 ***************************************************************
 * Initialization (given uword d with 1 ≤ d < 2^N):
 *    int l   = ceil(log2(d));
 *    uword m = 2^N * (2^l− d) / d + 1;
 *    int sh1 = min(l, 1);
 *    int sh2 = max(l − 1, 0);
 *
 * For q = FLOOR(a/d), all uword:
 *    uword t1 = MULUH(m, a);
 *    q = SRL(t1 + SRL(a − t1, sh1), sh2);
 *
 ************************************************************************************
 ** Figure 5.1: Signed division by run–time invariant divisor, rounded towards zero
 ************************************************************************************
 * Initialization (given constant sword d with d !=0):
 *    int l       = max(ceil(log2(abs(d))), 1);
 *    udword m0   = 1 + (2^(N+l-1)) / abs(d);
 *    sword  m    = m0 − 2^N;
 *    sword dsign = XSIGN(d);
 *    int sh      = l − 1;
 *
 * For q = TRUNC(a/d), all sword:
 *    sword q0 = a + MULSH(m, a);
 *          q0 = SRA(q0, sh) − XSIGN(a);
 *    q = EOR(q0, dsign) − dsign;
 ','line_number':11,'multiline':True]['text':'*
 * bit-scan reverse for non-zeros. returns the index of the highest set bit.
 * equivalent to floor(log2(a))
 ','line_number':77,'multiline':True]['text':' _BitScanReverse','line_number':82,'multiline':False]['text':' due to use __builtin_clz','line_number':86,'multiline':False]['text':' performs on arm -> clz, ppc -> cntlzw','line_number':97,'multiline':False]['text':' due to use __builtin_clzll','line_number':108,'multiline':False]['text':'*
 * Divides 128-bit unsigned integer by a 64-bit when the lower
 * 64-bit of the dividend is zero.
 *
 * This function is needed to calculate the multiplier of 64-bit integer division
 * see npyv_divisor_u64/npyv_divisor_s64.
 ','line_number':127,'multiline':True]['text':'*
     * Minified version based on Donald Knuth’s Algorithm D (Division of nonnegative integers),
     * and Generic implementation in Hacker’s Delight.
     *
     * See https://skanthak.homepage.t-online.de/division.html
     * with respect to the license of the Hacker's Delight book
     * (https://web.archive.org/web/20190408122508/http://www.hackersdelight.org/permissions.htm)
     ','line_number':147,'multiline':True]['text':' shift amount for normalize','line_number':155,'multiline':False]['text':' normalize divisor','line_number':157,'multiline':False]['text':' break divisor up into two 32-bit digits','line_number':160,'multiline':False]['text':' compute high quotient digit','line_number':163,'multiline':False]['text':' compute dividend digit pairs','line_number':174,'multiline':False]['text':' compute second quotient digit for lower zeros','line_number':176,'multiline':False]['text':' Initializing divisor parameters for unsigned 8-bit division','line_number':182,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':187,'multiline':False]['text':' for potential divide by zero, On x86 GCC inserts `ud2` instruction','line_number':188,'multiline':False]['text':' instead of letting the HW/CPU trap it which leads to illegal instruction exception.','line_number':189,'multiline':False]['text':' 'volatile' should suppress this behavior and allow us to raise HW/CPU','line_number':190,'multiline':False]['text':' arithmetic exception.','line_number':191,'multiline':False]['text':' ceil(log2(d))','line_number':201,'multiline':False]['text':' 2^l, overflow to 0 if l = 8','line_number':202,'multiline':False]['text':' multiplier','line_number':203,'multiline':False]['text':' shift counts','line_number':204,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':207,'multiline':False]['text':' Initializing divisor parameters for signed 8-bit division','line_number':224,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':228,'multiline':False]['text':' ceil(log2(abs(d))) - 1','line_number':239,'multiline':False]['text':' multiplier','line_number':240,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':246,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':247,'multiline':False]['text':' Initializing divisor parameters for unsigned 16-bit division','line_number':262,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':267,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':268,'multiline':False]['text':' ceil(log2(d))','line_number':278,'multiline':False]['text':' 2^l, overflow to 0 if l = 16','line_number':279,'multiline':False]['text':' multiplier','line_number':280,'multiline':False]['text':' shift counts','line_number':281,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':285,'multiline':False]['text':' Initializing divisor parameters for signed 16-bit division','line_number':299,'multiline':False]['text':' ceil(log2(abs(d))) - 1','line_number':305,'multiline':False]['text':' multiplier','line_number':306,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':312,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':313,'multiline':False]['text':' sign of divisor','line_number':317,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':318,'multiline':False]['text':' Initializing divisor parameters for unsigned 32-bit division','line_number':329,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':334,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':335,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':336,'multiline':False]['text':' ceil(log2(d))','line_number':345,'multiline':False]['text':' 2^l, overflow to 0 if l = 32','line_number':346,'multiline':False]['text':' multiplier','line_number':347,'multiline':False]['text':' shift counts','line_number':348,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':352,'multiline':False]['text':' Initializing divisor parameters for signed 32-bit division','line_number':366,'multiline':False]['text':' Handel abs overflow','line_number':371,'multiline':False]['text':' ceil(log2(abs(d))) - 1','line_number':377,'multiline':False]['text':' multiplier','line_number':378,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':384,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':385,'multiline':False]['text':' sign of divisor','line_number':389,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':390,'multiline':False]['text':' Initializing divisor parameters for unsigned 64-bit division','line_number':401,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':410,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':411,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':412,'multiline':False]['text':' ceil(log2(d))','line_number':421,'multiline':False]['text':' 2^l','line_number':422,'multiline':False]['text':' multiplier','line_number':423,'multiline':False]['text':' shift counts','line_number':424,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':427,'multiline':False]['text':' Initializing divisor parameters for signed 64-bit division','line_number':436,'multiline':False]['text':' Handel abs overflow','line_number':448,'multiline':False]['text':' ceil(log2(abs(d))) - 1','line_number':454,'multiline':False]['text':' multiplier','line_number':455,'multiline':False]['text':' raise arithmetic exception for d == 0','line_number':461,'multiline':False]['text':' LCOV_EXCL_LINE','line_number':462,'multiline':False]['text':' sign of divisor','line_number':465,'multiline':False]['text':' SSE/AVX2/AVX512','line_number':466,'multiline':False]['text':' _NPY_SIMD_INTDIV_H','line_number':475,'multiline':False]