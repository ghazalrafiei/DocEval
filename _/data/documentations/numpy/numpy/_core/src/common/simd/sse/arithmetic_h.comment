['text':'**************************
 * Addition
 **************************','line_number':8,'multiline':True]['text':' non-saturated','line_number':11,'multiline':False]['text':' saturated','line_number':23,'multiline':False]['text':' TODO: rest, after implement Packs intrins','line_number':28,'multiline':False]['text':'**************************
 * Subtraction
 **************************','line_number':30,'multiline':True]['text':' non-saturated','line_number':33,'multiline':False]['text':' saturated','line_number':45,'multiline':False]['text':' TODO: rest, after implement Packs intrins','line_number':50,'multiline':False]['text':'**************************
 * Multiplication
 **************************','line_number':52,'multiline':True]['text':' non-saturated','line_number':55,'multiline':False]['text':' NPY_HAVE_SSE41','line_number':79,'multiline':False]['text':' TODO: emulate 64-bit*/','line_number':81,'multiline':False]['text':' saturated','line_number':85,'multiline':False]['text':' TODO: after implement Packs intrins','line_number':86,'multiline':False]['text':'**************************
 * Integer Division
 **************************','line_number':88,'multiline':True]['text':' See simd/intdiv.h for more clarification','line_number':91,'multiline':False]['text':' divide each unsigned 8-bit element by a precomputed divisor','line_number':92,'multiline':False]['text':' high part of unsigned multiplication','line_number':98,'multiline':False]['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':103,'multiline':False]['text':' divide each signed 8-bit element by a precomputed divisor (round towards zero)','line_number':110,'multiline':False]['text':' instead of _mm_cvtepi8_epi16/_mm_packs_epi16 to wrap around overflow','line_number':115,'multiline':False]['text':' divide each unsigned 16-bit element by a precomputed divisor','line_number':121,'multiline':False]['text':' high part of unsigned multiplication','line_number':124,'multiline':False]['text':' floor(a/d) = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':126,'multiline':False]['text':' divide each signed 16-bit element by a precomputed divisor (round towards zero)','line_number':133,'multiline':False]['text':' high part of signed multiplication','line_number':136,'multiline':False]['text':' q          = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':138,'multiline':False]['text':' trunc(a/d) = (q ^ dsign) - dsign','line_number':139,'multiline':False]['text':' divide each unsigned 32-bit element by a precomputed divisor','line_number':145,'multiline':False]['text':' high part of unsigned multiplication','line_number':148,'multiline':False]['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':158,'multiline':False]['text':' divide each signed 32-bit element by a precomputed divisor (round towards zero)','line_number':165,'multiline':False]['text':' high part of signed multiplication','line_number':170,'multiline':False]['text':' not SSE4.1','line_number':174,'multiline':False]['text':' high part of "unsigned" multiplication','line_number':175,'multiline':False]['text':' convert unsigned to signed high multiplication','line_number':181,'multiline':False]['text':' mulhi - ((a < 0) ? m : 0) - ((m < 0) ? a : 0);','line_number':182,'multiline':False]['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':189,'multiline':False]['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':190,'multiline':False]['text':' returns the high 64 bits of unsigned 64-bit multiplication','line_number':196,'multiline':False]['text':' xref https://stackoverflow.com/a/28827013','line_number':197,'multiline':False]['text':' a0l, a0h, a1l, a1h','line_number':201,'multiline':False]['text':' b0l, b0h, b1l, b1h','line_number':202,'multiline':False]['text':' compute partial products','line_number':203,'multiline':False]['text':' a0l*b0l, a1l*b1l','line_number':204,'multiline':False]['text':' a0l*b0h, a1l*b1h','line_number':205,'multiline':False]['text':' a0h*b0l, a1h*b0l','line_number':206,'multiline':False]['text':' a0h*b0h, a1h*b1h','line_number':207,'multiline':False]['text':' sum partial products','line_number':208,'multiline':False]['text':' divide each unsigned 64-bit element by a precomputed divisor','line_number':221,'multiline':False]['text':' high part of unsigned multiplication','line_number':224,'multiline':False]['text':' floor(a/d) = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':226,'multiline':False]['text':' divide each signed 64-bit element by a precomputed divisor (round towards zero)','line_number':233,'multiline':False]['text':' high part of unsigned multiplication','line_number':236,'multiline':False]['text':' convert unsigned to signed high multiplication','line_number':238,'multiline':False]['text':' mulhi - ((a < 0) ? m : 0) - ((m < 0) ? a : 0);','line_number':239,'multiline':False]['text':' q               = (a + mulhi) >> sh','line_number':251,'multiline':False]['text':' emulate arithmetic right shift','line_number':253,'multiline':False]['text':' q               = q - XSIGN(a)','line_number':257,'multiline':False]['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':258,'multiline':False]['text':'**************************
 * Division
 **************************','line_number':263,'multiline':True]['text':' TODO: emulate integer division','line_number':266,'multiline':False]['text':'**************************
 * FUSED
 **************************','line_number':269,'multiline':True]['text':' multiply and add, a*b + c','line_number':273,'multiline':False]['text':' multiply and subtract, a*b - c','line_number':276,'multiline':False]['text':' negate multiply and add, -(a*b) + c','line_number':279,'multiline':False]['text':' negate multiply and subtract, -(a*b) - c','line_number':282,'multiline':False]['text':' multiply, add for odd elements and subtract even elements.','line_number':285,'multiline':False]['text':' (a * b) -+ c','line_number':286,'multiline':False]['text':' multiply and add, a*b + c','line_number':290,'multiline':False]['text':' multiply and subtract, a*b - c','line_number':293,'multiline':False]['text':' negate multiply and add, -(a*b) + c','line_number':296,'multiline':False]['text':' multiply, add for odd elements and subtract even elements.','line_number':299,'multiline':False]['text':' (a * b) -+ c','line_number':300,'multiline':False]['text':' multiply and add, a*b + c','line_number':304,'multiline':False]['text':' multiply and subtract, a*b - c','line_number':309,'multiline':False]['text':' negate multiply and add, -(a*b) + c','line_number':314,'multiline':False]['text':' multiply, add for odd elements and subtract even elements.','line_number':319,'multiline':False]['text':' (a * b) -+ c','line_number':320,'multiline':False]['text':' NPY_HAVE_FMA3','line_number':341,'multiline':False]['text':' for FMA4 and NON-FMA3','line_number':342,'multiline':False]['text':' negate multiply and subtract, -(a*b) - c','line_number':343,'multiline':False]['text':' !NPY_HAVE_FMA3','line_number':354,'multiline':False]['text':'**************************
 * Summation
 **************************','line_number':356,'multiline':True]['text':' reduce sum across vector','line_number':359,'multiline':False]['text':' expand the source vector and performs sum reduce','line_number':396,'multiline':False]['text':' _NPY_SIMD_SSE_ARITHMETIC_H','line_number':413,'multiline':False]