['text':'
 * This header provides numpy a consistent interface to CBLAS code. It is needed
 * because not all providers of cblas provide cblas.h. For instance, MKL provides
 * mkl_cblas.h and also typedefs the CBLAS_XXX enums.
 ','line_number':1,'multiline':True]['text':' Allow the use in C++ code.  ','line_number':11,'multiline':True]['text':'
 * Enumerated and derived types
 ','line_number':17,'multiline':True]['text':' this may vary between platforms ','line_number':26,'multiline':True]['text':'
 * Use either the OpenBLAS scheme with the `64_` suffix behind the Fortran
 * compiler symbol mangling, or the MKL scheme (and upcoming
 * reference-lapack#666) which does it the other way around and uses `_64`.
 ','line_number':60,'multiline':True]['text':'
 * Note that CBLAS doesn't include Fortran compiler symbol mangling, so ends up
 * being the same in both schemes
 ','line_number':70,'multiline':True]['text':'
 * Convert NumPy stride to BLAS stride. Returns 0 if conversion cannot be done
 * (BLAS won't handle negative or zero strides the way we want).
 ','line_number':93,'multiline':True]['text':'
     * Should probably check pointer alignment also, but this may cause
     * problems if we require complex to be 16 byte aligned.
     ','line_number':100,'multiline':True]['text':'
 * Define a chunksize for CBLAS.
 *
 * The chunksize is the greatest power of two less than CBLAS_INT_MAX.
 ','line_number':113,'multiline':True]['text':' NUMPY_CORE_SRC_COMMON_NPY_CBLAS_H_ ','line_number':129,'multiline':True]