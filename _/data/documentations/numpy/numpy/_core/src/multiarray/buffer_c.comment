['text':'************************************************************************
 ****************   Implement Buffer Protocol ****************************
 ************************************************************************','line_number':22,'multiline':True]['text':'************************************************************************
 * PEP 3118 buffer protocol
 *
 * Implementing PEP 3118 is somewhat convoluted because of the desirata:
 *
 * - Don't add new members to ndarray or descr structs, to preserve binary
 *   compatibility. (Also, adding the items is actually not very useful,
 *   since mutability issues prevent an 1 to 1 relationship between arrays
 *   and buffer views.)
 *
 * - Don't use bf_releasebuffer, because it prevents PyArg_ParseTuple("s#", ...
 *   from working. Breaking this would cause several backward compatibility
 *   issues already on Python 2.6.
 *
 * - Behave correctly when array is reshaped in-place, or it's dtype is
 *   altered.
 *
 * The solution taken below is to manually track memory allocated for
 * Py_buffers.
 ************************************************************************','line_number':26,'multiline':True]['text':'
 * Format string translator
 *
 * Translate PyArray_Descr to a PEP 3118 format string.
 ','line_number':47,'multiline':True]['text':' Fast string 'class' ','line_number':53,'multiline':True]['text':'
 * Append a PEP3118-formatted field name, ":name:", to str
 ','line_number':93,'multiline':True]['text':' FIXME: XXX -- should it use UTF-8 here? ','line_number':103,'multiline':True]['text':'
 * Return non-zero if a type is aligned in each item in the given array,
 * AND, the descr element size is a multiple of the alignment,
 * AND, the array data is positioned to alignment granularity.
 ','line_number':135,'multiline':True]['text':'
         * If the descriptor is the arrays descriptor we can assume the
         * array's alignment is correct.
         ','line_number':147,'multiline':True]['text':'
 * Fill in str with an appropriate PEP 3118 format string, based on
 * descr. For structured dtypes, calls itself recursively. Each call extends
 * str at offset then updates offset, and uses  descr->byteorder, (and
 * possibly the byte order in obj) to determine the byte-order char.
 *
 * Returns 0 for success, -1 for failure
 ','line_number':182,'multiline':True]['text':' Insert padding manually ','line_number':278,'multiline':True]['text':' Insert child item ','line_number':292,'multiline':True]['text':' Insert field name ','line_number':299,'multiline':True]['text':' scalars are always natively aligned ','line_number':316,'multiline':True]['text':' Prefer native types, to cater for Cython ','line_number':327,'multiline':True]['text':' Data types that have no standard size ','line_number':335,'multiline':True]['text':'
                 * It's not possible to express native-only data types
                 * in non-native npy_byte orders
                 ','line_number':351,'multiline':True]['text':' XXX NPY_DATETIME ','line_number':396,'multiline':True]['text':' XXX NPY_TIMEDELTA ','line_number':397,'multiline':True]['text':' NumPy Unicode is always 4-byte ','line_number':406,'multiline':True]['text':' Insert padding bytes ','line_number':414,'multiline':True]['text':'
 * Information about all active buffers is stored as a linked list on
 * the ndarray. The initial pointer is currently tagged to have a chance of
 * detecting incompatible subclasses.
 *
 * Note: because for backward compatibility we cannot define bf_releasebuffer,
 * we must manually keep track of the additional data required by the buffers.
 ','line_number':439,'multiline':True]['text':' Additional per-array data required for providing the buffer interface ','line_number':448,'multiline':True]['text':' Fill in the info structure ','line_number':458,'multiline':True]['text':'
     * Note that the buffer info is cached as PyLongObjects making them appear
     * like unreachable lost memory to valgrind.
     ','line_number':462,'multiline':True]['text':' Fill in shape and strides ','line_number':497,'multiline':True]['text':'
             * Some buffer users may expect a contiguous buffer to have well
             * formatted strides also when a dimension is 1, but we do not
             * guarantee this internally. Thus, recalculate strides for
             * contiguous arrays.
             ','line_number':509,'multiline':True]['text':' Fill in format ','line_number':544,'multiline':True]['text':' Compare two info structures ','line_number':569,'multiline':True]['text':'
 * Tag the buffer info pointer by adding 2 (unless it is NULL to simplify
 * object initialization).
 * The linked list of buffer-infos was appended to the array struct in
 * NumPy 1.20. Tagging the pointer gives us a chance to raise/print
 * a useful error message instead of crashing hard if a C-subclass uses
 * the same field.
 ','line_number':594,'multiline':True]['text':'
 * NOTE: for backward compatibility (esp. with PyArg_ParseTuple("s#", ...))
 * we do *not* define bf_releasebuffer at all.
 *
 * Instead, any extra data allocated with the buffer is released only in
 * array_dealloc.
 *
 * Ensuring that the buffer stays in place is taken care by refcounting;
 * ndarrays do not reallocate if there are references to them, and a buffer
 * view holds one reference.
 *
 * This is stored in the array's _buffer_info slot (currently as a void *).
 ','line_number':638,'multiline':True]['text':' Shape is allocated as part of info ','line_number':661,'multiline':True]['text':'
 * Checks whether the pointer is tagged, and then frees the cache list.
 * (The tag check is only for transition due to changed structure size in 1.20)
 ','line_number':667,'multiline':True]['text':'
 * Get the buffer info returning either the old one (passed in) or a new
 * buffer info which adds holds on to (and thus replaces) the old one.
 ','line_number':683,'multiline':True]['text':' First currently stored buffer info ','line_number':691,'multiline':True]['text':' Compute information (it would be nice to skip this in simple cases) ','line_number':698,'multiline':True]['text':' Can't use this one, but possibly next ','line_number':706,'multiline':True]['text':'
              * Some arrays are C- and F-contiguous and if they have more
              * than one dimension, the buffer-info may differ between the
              * two because strides for length 1 dimension may be adjusted.
              * If we export both buffers, the first stored one may be
              * the one for the other contiguity, so check both.
              * This is generally very unlikely in all other cases, since
              * in all other cases the first one will match unless array
              * metadata was modified in-place (which is discouraged).
              ','line_number':709,'multiline':True]['text':'
         * The two info->format are considered equal if one of them
         * has no format set (meaning the format is arbitrary and can
         * be modified). If the new info has a format, but we reuse
         * the old one, this transfers the ownership to the old one.
         ','line_number':725,'multiline':True]['text':' Insert new info as first item in the linked buffer-info list. ','line_number':739,'multiline':True]['text':'
 * Retrieving buffers for ndarray
 ','line_number':748,'multiline':True]['text':' Check whether we can provide the wanted properties ','line_number':759,'multiline':True]['text':' Non-strided N-dim buffers must be C-contiguous ','line_number':777,'multiline':True]['text':' Fill in information (and add it to _buffer_info if necessary) ','line_number':792,'multiline':True]['text':'
     * If a read-only buffer is requested on a read-write array, we return a
     * read-write buffer as per buffer protocol.
     * We set a requested buffer to readonly also if the array will be readonly
     * after a deprecation. This jumps the deprecation, but avoiding the
     * warning is not convenient here. A warning is given if a writeable
     * buffer is requested since `PyArray_FailUnlessWriteable` is called above
     * (and clears the `NPY_ARRAY_WARN_ON_WRITE` flag).
     ','line_number':802,'multiline':True]['text':'
 * Retrieving buffers for void scalar (which can contain any complex types),
 * defined in buffer.c since it requires the complex format building logic.
 ','line_number':843,'multiline':True]['text':' It is unnecessary to find the correct format ','line_number':870,'multiline':True]['text':'
     * If a format is being exported, we need to use _buffer_get_info
     * to find the correct format.  This format must also be stored, since
     * at least in theory it can change (in practice it should never change).
     ','line_number':875,'multiline':True]['text':'***********************************************************************','line_number':890,'multiline':True]['text':'************************************************************************
 * Convert PEP 3118 format string to PyArray_Descr
 ','line_number':898,'multiline':True]['text':' Fast path ','line_number':922,'multiline':True]['text':' Strip whitespace, except from field names ','line_number':928,'multiline':True]['text':' Convert ','line_number':955,'multiline':True]['text':'
 * Fast path for parsing buffer strings corresponding to simple types.
 *
 * Currently, this deals only with single-element data types.
 ','line_number':987,'multiline':True]['text':' ^ means no alignment; doesn't matter for a single element ','line_number':1010,'multiline':True]['text':' Not a single-element data type ','line_number':1032,'multiline':True]['text':' Something unknown ','line_number':1038,'multiline':True]['text':' Other unhandled cases ','line_number':1091,'multiline':True]