['text':'
 * This module corresponds to the `Special functions for NPY_OBJECT`
 * section in the numpy reference for C-API.
 ','line_number':1,'multiline':True]['text':'
 * Helper function to clear a strided memory (normally or always contiguous)
 * from all Python (or other) references.  The function does nothing if the
 * array dtype does not indicate holding references.
 *
 * It is safe to call this function more than once, failing here is usually
 * critical (during cleanup) and should be set up to minimize the risk or
 * avoid it fully.
 ','line_number':26,'multiline':True]['text':' Flags unused: float errors do not matter and we do not release GIL ','line_number':45,'multiline':True]['text':'
 * Helper function to clear whole array.  It seems plausible that we should
 * be able to get away with assuming the array is contiguous.
 *
 * Must only be called on arrays which own their data (and asserts this).
 ','line_number':59,'multiline':True]['text':'
     * The contiguous path should cover practically all important cases since
     * it is difficult to create a non-contiguous array which owns its memory
     * and only arrays which own their memory should clear it.
     ','line_number':74,'multiline':True]['text':' Flags unused: float errors do not matter and we do not release GIL ','line_number':98,'multiline':True]['text':' Process the innermost dimension ','line_number':105,'multiline':True]['text':'NUMPY_API
 * XINCREF all objects in a single array item. This is complicated for
 * structured datatypes where the position of objects needs to be extracted.
 * The function is execute recursively for each nested field or subarrays dtype
 * such as as `np.dtype([("field1", "O"), ("field2", "f,O", (3,2))])`
 ','line_number':116,'multiline':True]['text':' There cannot be any elements, so return ','line_number':156,'multiline':True]['text':' Subarrays are always contiguous in memory ','line_number':159,'multiline':True]['text':' Recursively increment the reference count of subarray elements ','line_number':163,'multiline':True]['text':' This path should not be reachable. ','line_number':169,'multiline':True]['text':'NUMPY_API
 *
 * XDECREF all objects in a single array item. This is complicated for
 * structured datatypes where the position of objects needs to be extracted.
 * The function is execute recursively for each nested field or subarrays dtype
 * such as as `np.dtype([("field1", "O"), ("field2", "f,O", (3,2))])`
 ','line_number':176,'multiline':True]['text':' There cannot be any elements, so return ','line_number':218,'multiline':True]['text':' Subarrays are always contiguous in memory ','line_number':221,'multiline':True]['text':' Recursively decrement the reference count of subarray elements ','line_number':225,'multiline':True]['text':' This path should not be reachable. ','line_number':231,'multiline':True]['text':' Used for arrays of python objects to increment the reference count of ','line_number':237,'multiline':True]['text':' every python object in the array. ','line_number':238,'multiline':True]['text':'NUMPY_API
  For object arrays, increment all internal references.
','line_number':239,'multiline':True]['text':' handles misaligned data too ','line_number':281,'multiline':True]['text':'NUMPY_API
  Decrement all internal references for object arrays.
  (or arrays with object fields)

  The use of this function is strongly discouraged, within NumPy
  use PyArray_Clear, which DECREF's and sets everything to NULL and can
  work with any dtype.
','line_number':296,'multiline':True]['text':'
     * statically allocating it allows this function to not modify the
     * reference count of the array for use during dealloc.
     * (statically is not necessary as such)
     ','line_number':310,'multiline':True]['text':' handles misaligned data too ','line_number':349,'multiline':True]['text':'
 * This function is solely used as an entry point to ensure that `np.empty()`
 * fills dtype=object (including fields) with `None` rather than leaving it
 * NULL, because it is easy to not explicitly support NULL (although cython
 * does now and we never strictly guaranteed this).
 *
 * Assumes contiguous
 *
 * TODO: This function is utterly ridiculous for structures, should use
 *       a dtype_traversal function instead...
 ','line_number':372,'multiline':True]['text':' non-legacy dtypes are responsible for initializing','line_number':388,'multiline':False]['text':' their own internal references','line_number':389,'multiline':False]['text':' There cannot be any elements, so return ','line_number':453,'multiline':True]['text':' Subarrays are always contiguous in memory ','line_number':456,'multiline':True]['text':' Call _fillobject on each item recursively. ','line_number':459,'multiline':True]['text':' This path should not be reachable. ','line_number':468,'multiline':True]