['text':'************************************************************************
 ****************   Implement Number Protocol ****************************
 ************************************************************************','line_number':23,'multiline':True]['text':' NB: static objects initialized to zero ','line_number':27,'multiline':True]['text':'
 * Forward declarations. Might want to move functions around instead
 ','line_number':29,'multiline':True]['text':'
 * Dictionary can contain any of the numeric operations, by name.
 * Those not present will not be changed
 ','line_number':59,'multiline':True]['text':' FIXME - macro contains a return ','line_number':64,'multiline':True]['text':'
     * Unlike `matmul(a, b, out=a)` we ensure that the result is not broadcast
     * if the result without `out` would have less dimensions than `a`.
     * Since the signature of matmul is '(n?,k),(k,m?)->(n?,m?)' this is the
     * case exactly when the second operand has both core dimensions.
     *
     * The error here will be confusing, but for now, we enforce this by
     * passing the correct `axes=`.
     ','line_number':280,'multiline':True]['text':'
         * AxisError should indicate that the axes argument didn't work out
         * which should mean the second operand not being 2 dimensional.
         ','line_number':321,'multiline':True]['text':'
 * Determine if object is a scalar and if so, convert the object
 * to a double and place it in the out_exponent argument
 * and return the "scalar kind" as a result.   If the object is
 * not a scalar (or if there are other error conditions)
 * return NPY_NOSCALAR, and out_exponent is undefined.
 ','line_number':335,'multiline':True]['text':' ISFLOAT ','line_number':376,'multiline':True]['text':' IsScalar(o2, Floating) ','line_number':393,'multiline':True]['text':'
 * optimize float array or complex array to a scalar power
 * returns 0 on success, -1 if no optimization is possible
 * the result is in value (can be NULL if an error occurred)
 ','line_number':418,'multiline':True]['text':' NPY_NOSCALAR is not scalar ','line_number':428,'multiline':True]['text':' Because this is called with all arrays, we need to
         *  change the output if the kind of the scalar is different
         *  than that of the input and inplace is not on ---
         *  (thus, the input should be up-cast)
         ','line_number':463,'multiline':True]['text':' We only special-case the FLOAT_SCALAR and integer types ','line_number':474,'multiline':True]['text':' cast always creates a new array ','line_number':480,'multiline':True]['text':' no fast operation found ','line_number':492,'multiline':True]['text':' modular exponentiation is not implemented (gh-8804) ','line_number':502,'multiline':True]['text':' modulo is ignored! ','line_number':645,'multiline':True]['text':' nonzero has no way to indicate an error, but one can occur ','line_number':754,'multiline':True]['text':' 2017-09-25, 1.14 ','line_number':762,'multiline':True]['text':'
 * Convert the array to a scalar if allowed, and apply the builtin function
 * to it. The where argument is passed onto Py_EnterRecursiveCall when the
 * array contains python objects.
 ','line_number':779,'multiline':True]['text':' Need to guard against recursion if our array holds references ','line_number':799,'multiline':True]