['text':'','line_number':21,'multiline':False]['text':' `usecols` must point to a Python object that is Py_None or a 1-d contiguous','line_number':22,'multiline':False]['text':' numpy array with data type int32.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' `dtype` must point to a Python object that is Py_None or a numpy dtype','line_number':25,'multiline':False]['text':' instance.  If the latter, code and sizes must be arrays of length','line_number':26,'multiline':False]['text':' num_dtype_fields, holding the flattened data field type codes and byte','line_number':27,'multiline':False]['text':' sizes. (num_dtype_fields, codes, and sizes can be inferred from dtype,','line_number':28,'multiline':False]['text':' but we do that in Python code.)','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' If both `usecols` and `dtype` are not None, and the data type is compound,','line_number':31,'multiline':False]['text':' then len(usecols) must equal num_dtype_fields.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' If `dtype` is given and it is compound, and `usecols` is None, then the','line_number':34,'multiline':False]['text':' number of columns in the file must match the number of fields in `dtype`.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':'
     * If dtypes[0] is dtype the input was not structured and the result
     * is considered "homogeneous" and we have to discover the number of
     * columns/
     ','line_number':47,'multiline':True]['text':' character beyond unicode range ','line_number':89,'multiline':True]['text':'
 * A (somewhat verbose) check that none of the control characters match or are
 * newline.  Most of these combinations are completely fine, just weird or
 * surprising.
 * (I.e. there is an implicit priority for control characters, so if a comment
 * matches a delimiter, it would just be a comment.)
 * In theory some `delimiter=None` paths could have a "meaning", but let us
 * assume that users are better of setting one of the control chars to `None`
 * for clarity.
 *
 * This also checks that the control characters cannot be newlines.
 ','line_number':103,'multiline':True]['text':' The above doesn't work with delimiter=None, which means "whitespace" ','line_number':151,'multiline':True]['text':' Reject matching control characters, they just rarely make sense anyway ','line_number':230,'multiline':True]['text':' Ignore leading whitespace to match `string.split(None)` ','line_number':238,'multiline':True]['text':'
     * Parse usecols, the rest of NumPy has no clear helper for this, so do
     * it here manually.
     ','line_number':260,'multiline':True]['text':' Calloc just to not worry about overflow ','line_number':271,'multiline':True]