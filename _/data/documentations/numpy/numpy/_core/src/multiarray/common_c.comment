['text':'
 * The casting to use for implicit assignment operations resulting from
 * in-place operations (like +=) and out= arguments. (Notice that this
 * variable is misnamed, but it's part of the public API so I'm not sure we
 * can just change it. Maybe someone should try and see if anyone notices.
 ','line_number':22,'multiline':True]['text':'
 * In numpy 1.6 and earlier, this was NPY_UNSAFE_CASTING. In a future
 * release, it will become NPY_SAME_KIND_CASTING.  Right now, during the
 * transitional period, we continue to follow the NPY_UNSAFE_CASTING rules (to
 * avoid breaking people's code), but we also check for whether the cast would
 * be allowed under the NPY_SAME_KIND_CASTING rules, and if not we issue a
 * warning (that people's code will be broken in a future release.)
 ','line_number':28,'multiline':True]['text':'
 * Get a suitable string dtype by calling `__str__`.
 * For `np.bytes_`, this assumes an ASCII encoding.
 ','line_number':57,'multiline':True]['text':' assume that when we do the encoding elsewhere we'll use ASCII ','line_number':72,'multiline':True]['text':' convert UCS4 codepoints to bytes ','line_number':89,'multiline':True]['text':'
 * This function is now identical to the new PyArray_DiscoverDTypeAndShape
 * but only returns the dtype. It should in most cases be slowly phased out.
 * (Which may need some refactoring to PyArray_FromAny to make it simpler)
 ','line_number':109,'multiline':True]['text':'
     * C-data wrapping arrays may not own their data while not having a base;
     * WRITEBACKIFCOPY arrays have a base, but do own their data.
     ','line_number':137,'multiline':True]['text':'
         * This is somewhat unsafe for directly wrapped non-writable C-arrays,
         * which do not know whether the memory area is writable or not and
         * do not own their data (but have no base).
         * It would be better if this returned PyArray_ISWRITEABLE(ap).
         * Since it is hard to deprecate, this is deprecated only on the Python
         * side, but not on in PyArray_UpdateFlags.
         ','line_number':142,'multiline':True]['text':'
     * Get to the final base object.
     * If it is a writeable array, then return True if we can
     * find an array object or a writeable buffer object as
     * the final base object.
     ','line_number':153,'multiline':True]['text':'
             * If any base is writeable, it must be OK to switch, note that
             * bases are typically collapsed to always point to the most
             * general one.
             ','line_number':164,'multiline':True]['text':' there is no further base to test the writeable flag for ','line_number':173,'multiline':True]['text':'*
 * Convert an array shape to a string such as "(1, 2)".
 *
 * @param Dimensionality of the shape
 * @param npy_intp pointer to shape array
 * @param String to append after the shape `(1, 2)%s`.
 *
 * @return Python unicode string
 ','line_number':188,'multiline':True]['text':'
     * Negative dimension indicates "newaxis", which can
     * be discarded for printing if it's a leading dimension.
     * Find the first non-"newaxis" dimension.
     ','line_number':202,'multiline':True]['text':'*
 * unpack tuple of dtype->fields (descr, offset, title[not-needed])
 *
 * @param "value" should be the tuple.
 *
 * @return "descr" will be set to the field's dtype
 * @return "offset" will be set to the field's offset
 *
 * returns -1 on failure, 0 on success.
 ','line_number':299,'multiline':True]['text':'
 * check whether arrays with datatype dtype might have object fields. This will
 * only happen for structured dtypes (which may have hidden objects even if the
 * HASOBJECT flag is false), object dtypes, or subarray dtypes whose base type
 * is either of these.
 ','line_number':330,'multiline':True]['text':'
 * Make a new empty array, of the passed size, of a type that takes the
 * priority of ap1 and ap2 into account.
 *
 * If `out` is non-NULL, memory overlap is checked with ap1 and ap2, and an
 * updateifcopy temporary array may be returned. If `result` is non-NULL, the
 * output array to be returned (`out` if non-NULL and the newly allocated array
 * otherwise) is incref'd and put to *result.
 ','line_number':348,'multiline':True]['text':' verify that out is usable ','line_number':366,'multiline':True]['text':' check for memory overlap ','line_number':383,'multiline':True]['text':' allocate temporary output array ','line_number':386,'multiline':True]['text':' set copy-back ','line_number':393,'multiline':True]['text':'
         * Need to choose an output array that can hold a sum
         * -- use priority to determine which subtype.
         ','line_number':416,'multiline':True]['text':' Remove this if-else block when the deprecation expires ','line_number':451,'multiline':True]['text':' Numpy 1.25.0, 2023-01-02 ','line_number':453,'multiline':True]