['text':'
 * Use code 14 (MADV_HUGEPAGE) if it isn't defined. This gives a chance of
 * enabling huge pages even if built with linux kernel < 2.6.38
 ','line_number':19,'multiline':True]['text':' number of buckets for data','line_number':27,'multiline':True]['text':' number of buckets for dimensions/strides ','line_number':28,'multiline':True]['text':' number of cache entries per bucket ','line_number':29,'multiline':True]['text':' this structure fits neatly into a cacheline ','line_number':30,'multiline':True]['text':' number of cached pointers ','line_number':32,'multiline':True]['text':'
 * This function tells whether NumPy attempts to call `madvise` with
 * `MADV_HUGEPAGE`.  `madvise` is only ever used on linux, so the value
 * of `_madvise_hugepage` may be ignored.
 *
 * It is exposed to Python as `np._core.multiarray._get_madvise_hugepage`.
 ','line_number':41,'multiline':True]['text':'
 * This function enables or disables the use of `MADV_HUGEPAGE` on Linux
 * by modifying the global static `_madvise_hugepage`.
 * It returns the previous value of `_madvise_hugepage`.
 *
 * It is exposed to Python as `np._core.multiarray._set_madvise_hugepage`.
 ','line_number':60,'multiline':True]['text':' as the cache is managed in global variables verify the GIL is held ','line_number':83,'multiline':True]['text':'
 * very simplistic small memory block cache to avoid more expensive libc
 * allocations
 * base function for data cache with 1 byte buckets and dimension cache with
 * sizeof(npy_intp) byte buckets
 ','line_number':85,'multiline':True]['text':' allow kernel allocating huge pages for large arrays ','line_number':110,'multiline':True]['text':'*
             * Intentionally not checking for errors that may be returned by
             * older kernel versions; optimistically tries enabling huge pages.
             ','line_number':114,'multiline':True]['text':'
 * return pointer p to cache, nelem is number of elements of the cache bucket
 * size (1 or sizeof(npy_intp)) of the block pointed too
 ','line_number':125,'multiline':True]['text':'
 * array data cache, sz is number of bytes to allocate
 ','line_number':144,'multiline':True]['text':' zero initialized data, sz is number of bytes to allocate ','line_number':153,'multiline':True]['text':'
 * dimension/stride cache, uses a different allocator and is always a multiple
 * of npy_intp
 ','line_number':179,'multiline':True]['text':'
     * make sure any temporary allocation can be used for array metadata which
     * uses one memory block for both dimensions and strides
     ','line_number':186,'multiline':True]['text':' see npy_alloc_cache_dim ','line_number':200,'multiline':True]['text':' Similar to array_dealloc in arrayobject.c ','line_number':208,'multiline':True]['text':'NUMPY_API
 * Allocates memory for array data.
 ','line_number':226,'multiline':True]['text':'NUMPY_API
 * Allocates zeroed memory for array data.
 ','line_number':240,'multiline':True]['text':'NUMPY_API
 * Free memory for array data.
 ','line_number':253,'multiline':True]['text':'NUMPY_API
 * Reallocate/resize memory for array data.
 ','line_number':263,'multiline':True]['text':' The default data mem allocator malloc routine does not make use of a ctx.','line_number':280,'multiline':False]['text':' It should be called only through PyDataMem_UserNEW','line_number':281,'multiline':False]['text':' since itself does not handle eventhook and tracemalloc logic.','line_number':282,'multiline':False]['text':' The default data mem allocator calloc routine does not make use of a ctx.','line_number':289,'multiline':False]['text':' It should be called only through PyDataMem_UserNEW_ZEROED','line_number':290,'multiline':False]['text':' since itself does not handle eventhook and tracemalloc logic.','line_number':291,'multiline':False]['text':' The default data mem allocator realloc routine does not make use of a ctx.','line_number':311,'multiline':False]['text':' It should be called only through PyDataMem_UserRENEW','line_number':312,'multiline':False]['text':' since itself does not handle eventhook and tracemalloc logic.','line_number':313,'multiline':False]['text':' The default data mem allocator free routine does not make use of a ctx.','line_number':320,'multiline':False]['text':' It should be called only through PyDataMem_UserFREE','line_number':321,'multiline':False]['text':' since itself does not handle eventhook and tracemalloc logic.','line_number':322,'multiline':False]['text':' Memory handler global default ','line_number':329,'multiline':True]['text':' ctx ','line_number':334,'multiline':True]['text':' malloc ','line_number':335,'multiline':True]['text':' calloc ','line_number':336,'multiline':True]['text':' realloc ','line_number':337,'multiline':True]['text':' free ','line_number':338,'multiline':True]['text':' singleton capsule of the default handler ','line_number':341,'multiline':True]['text':' user_override index ','line_number':345,'multiline':True]['text':' Wrappers for the default or any user-assigned PyDataMem_Handler ','line_number':347,'multiline':True]['text':'NUMPY_API
 * Set a new allocation policy. If the input value is NULL, will reset
 * the policy to the default. Return the previous policy, or
 * return NULL if an error has occurred. We wrap the user-provided
 * functions so they will still call the python and numpy
 * memory management callback hooks.
 ','line_number':408,'multiline':True]['text':'NUMPY_API
 * Return the policy that will be used to allocate data
 * for the next PyArrayObject. On failure, return NULL.
 ','line_number':435,'multiline':True]