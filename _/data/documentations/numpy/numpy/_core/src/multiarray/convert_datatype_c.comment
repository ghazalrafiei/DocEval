['text':'
 * Required length of string when converting from unsigned integer type.
 * Array index is integer size in bytes.
 * - 3 chars needed for cast to max value of 255 or 127
 * - 5 chars needed for cast to max value of 65535 or 32767
 * - 10 chars needed for cast to max value of 4294967295 or 2147483647
 * - 20 chars needed for cast to max value of 18446744073709551615
 *   or 9223372036854775807
 ','line_number':39,'multiline':True]['text':'
 * Whether or not legacy value-based promotion/casting is used.
 ','line_number':50,'multiline':True]['text':'
 * Return 1 if promotion warnings should be given and 0 if they are currently
 * suppressed in the local context.
 ','line_number':72,'multiline':True]['text':' Errors should not really happen, but if it does assume we warn. ','line_number':90,'multiline':True]['text':' only when the no-warnings context is false, we give warnings ','line_number':95,'multiline':True]['text':'*
 * Fetch the casting implementation from one DType to another.
 *
 * @params from
 * @params to
 *
 * @returns A castingimpl (PyArrayDTypeMethod *), None or NULL with an
 *          error set.
 ','line_number':143,'multiline':True]['text':'
     * The following code looks up CastingImpl based on the fact that anything
     * can be cast to and from objects or structured (void) dtypes.
     *
     * The last part adds casts dynamically based on legacy definition
     ','line_number':166,'multiline':True]['text':'
     * Reject non-legacy dtypes. They need to use the new API to add casts and
     * doing that would have added a cast to the from descriptor's castingimpl
     * dict
     ','line_number':184,'multiline':True]['text':' All builtin dtypes have their casts explicitly defined. ','line_number':193,'multiline':True]['text':' A cast function must have been registered ','line_number':201,'multiline':True]['text':' Remember that this cast is not possible ','line_number':206,'multiline':True]['text':' PyArray_AddLegacyWrapping_CastingImpl find the correct casting level: ','line_number':215,'multiline':True]['text':'
         * TODO: Possibly move this to the cast registration time. But if we do
         *       that, we have to also update the cast when the casting safety
         *       is registered.
         ','line_number':216,'multiline':True]['text':'*
 * Fetch the (bound) casting implementation from one DType to another.
 *
 * @params from
 * @params to
 *
 * @returns A bound casting implementation or None (or NULL for error).
 ','line_number':245,'multiline':True]['text':' TODO: Create better way to wrap method into bound method ','line_number':261,'multiline':True]['text':'*
 * Find the minimal cast safety level given two cast-levels as input.
 * Supports the NPY_CAST_IS_VIEW check, and should be preferred to allow
 * extending cast-levels if necessary.
 * It is not valid for one of the arguments to be -1 to indicate an error.
 *
 * @param casting1
 * @param casting2
 * @return The minimal casting error (can be -1).
 ','line_number':294,'multiline':True]['text':' larger casting values are less safe ','line_number':310,'multiline':True]['text':'NUMPY_API
 * For backward compatibility
 *
 * Cast an array using typecode structure.
 * steals reference to dtype --- cannot be NULL
 *
 * This function always makes a copy of arr, even if the dtype
 * doesn't change.
 ','line_number':318,'multiline':True]['text':'
 * Fetches the legacy cast function. Warning, this only makes sense for legacy
 * dtypes.  Even most NumPy ones do NOT implement these anymore and the use
 * should be fully phased out.
 * The sole real purpose is supporting legacy style user dtypes.
 ','line_number':362,'multiline':True]['text':' The returned descriptors may not match, requiring a second check ','line_number':433,'multiline':True]['text':' `view_offset` differs: The multi-step cast cannot be a view. ','line_number':440,'multiline':True]['text':' `view_offset` differs: The multi-step cast cannot be a view. ','line_number':453,'multiline':True]['text':'
     * Check for less harmful non-standard returns.  The following two returns
     * should never happen:
     * 1. No-casting must imply a view offset of 0.
     * 2. Equivalent-casting + 0 view offset is (usually) the definition
     *    of a "no" cast.  However, changing the order of fields can also
     *    create descriptors that are not equivalent but views.
     * Note that unsafe casts can have a view offset.  For example, in
     * principle, casting `<i8` to `<i4` is a cast with 0 offset.
     ','line_number':464,'multiline':True]['text':'*
 * Given two dtype instances, find the correct casting safety.
 *
 * Note that in many cases, it may be preferable to fetch the casting
 * implementations fully to have them available for doing the actual cast
 * later.
 *
 * @param from
 * @param to The descriptor to cast to (may be NULL)
 * @param to_dtype If `to` is NULL, must pass the to_dtype (otherwise this
 *        is ignored).
 * @param[out] view_offset
 * @return NPY_CASTING or -1 on error or if the cast is not possible.
 ','line_number':485,'multiline':True]['text':'*
 * Check whether a cast is safe, see also `PyArray_GetCastInfo` for
 * a similar function.  Unlike GetCastInfo, this function checks the
 * `castingimpl->casting` when available.  This allows for two things:
 *
 * 1. It avoids  calling `resolve_descriptors` in some cases.
 * 2. Strings need to discover the length, but in some cases we know that the
 *    cast is valid (assuming the string length is discovered first).
 *
 * The latter means that a `can_cast` could return True, but the cast fail
 * because the parametric type cannot guess the correct output descriptor.
 * (I.e. if `object_arr.astype("S")` did _not_ inspect the objects, and the
 * user would have to guess the string length.)
 *
 * @param casting the requested casting safety.
 * @param from
 * @param to The descriptor to cast to (may be NULL)
 * @param to_dtype If `to` is NULL, must pass the to_dtype (otherwise this
 *        is ignored).
 * @return 0 for an invalid cast, 1 for a valid and -1 for an error.
 ','line_number':526,'multiline':True]['text':' No need to check using `castingimpl.resolve_descriptors()` ','line_number':565,'multiline':True]['text':' If casting is the smaller (or equal) safety we match ','line_number':575,'multiline':True]['text':'NUMPY_API
 *Check the type coercion rules.
 ','line_number':583,'multiline':True]['text':' Identity ','line_number':589,'multiline':True]['text':'
     * As a micro-optimization, keep the cast table around.  This can probably
     * be removed as soon as the ufunc loop lookup is modified (presumably
     * before the 1.21 release).  It does no harm, but the main user of this
     * function is the ufunc-loop lookup calling it until a loop matches!
     *
     * (The table extends further, but is not strictly correct for void).
     * TODO: Check this!
     ','line_number':593,'multiline':True]['text':'NUMPY_API
 * leaves reference count alone --- cannot be NULL
 *
 * PyArray_CanCastTypeTo is equivalent to this, but adds a 'casting'
 * parameter.
 ','line_number':637,'multiline':True]['text':' Provides an ordering for the dtype 'kind' character codes ','line_number':650,'multiline':True]['text':' Boolean kind ','line_number':655,'multiline':True]['text':' Unsigned int kind ','line_number':658,'multiline':True]['text':' Signed int kind ','line_number':661,'multiline':True]['text':' Float kind ','line_number':664,'multiline':True]['text':' Complex kind ','line_number':667,'multiline':True]['text':' String kind ','line_number':670,'multiline':True]['text':' Unicode kind ','line_number':674,'multiline':True]['text':' Void kind ','line_number':677,'multiline':True]['text':' Object kind ','line_number':680,'multiline':True]['text':'
         * Anything else, like datetime, is special cased to
         * not fit in this hierarchy
         ','line_number':683,'multiline':True]['text':' Converts a type number from unsigned to signed ','line_number':692,'multiline':True]['text':'NUMPY_API
 * Returns true if data of type 'from' may be cast to data of type
 * 'to' according to the rule 'casting'.
 ','line_number':713,'multiline':True]['text':'
     * NOTE: This code supports U and S, this is identical to the code
     *       in `ctors.c` which does not allow these dtypes to be attached
     *       to an array. Unlike the code for `np.array(..., dtype=)`
     *       which uses `PyArray_ExtractDTypeAndDescriptor` it rejects "m8"
     *       as a flexible dtype instance representing a DType.
     ','line_number':723,'multiline':True]['text':'
     * TODO: We should grow support for `np.can_cast("d", "S")` being
     *       different from `np.can_cast("d", "S0")` here, at least for
     *       the python side API.
     *       The `to = NULL` branch, which considers "S0" to be "flexible"
     *       should probably be deprecated.
     *       (This logic is duplicated in `PyArray_CanCastArrayTo`)
     ','line_number':730,'multiline':True]['text':' consider mainly S0 and U0 as S and U ','line_number':739,'multiline':True]['text':' Clear any errors and consider this unsafe (should likely be changed) ','line_number':743,'multiline':True]['text':' CanCastArrayTo needs this function ','line_number':752,'multiline':True]['text':'
 * NOTE: This function uses value based casting logic for scalars. It will
 *       require updates when we phase out value-based-casting.
 ','line_number':757,'multiline':True]['text':'
     * If the two dtypes are actually references to the same object
     * or if casting type is forced unsafe then always OK.
     *
     * TODO: Assuming that unsafe casting always works is not actually correct
     ','line_number':765,'multiline':True]['text':' This is definitely a valid cast. ','line_number':777,'multiline':True]['text':' Probably must return 0, but just keep trying for now. ','line_number':781,'multiline':True]['text':'
     * If the scalar isn't a number, value-based casting cannot kick in and
     * we must not attempt it.
     * (Additional fast-checks would be possible, but probably unnecessary.)
     ','line_number':785,'multiline':True]['text':'
     * At this point we have to check value-based casting.
     ','line_number':794,'multiline':True]['text':' An aligned memory buffer large enough to hold any builtin numeric type ','line_number':799,'multiline':True]['text':'
     * If we've got a small unsigned scalar, and the 'to' type
     * is not unsigned, then make it signed to allow the value
     * to be cast more appropriately.
     ','line_number':808,'multiline':True]['text':'
     * This function only works reliably for legacy (NumPy dtypes).
     * If we end up here for a non-legacy DType, it is a bug.
     ','line_number':838,'multiline':True]['text':'
     * Quickly check for the typical numeric cases, where the casting rules
     * can be hardcoded fairly easily.
     ','line_number':844,'multiline':True]['text':'
     * For all other cases we use the default dtype.
     ','line_number':864,'multiline':True]['text':'NUMPY_API
 * Returns 1 if the array object may be cast to the given data type using
 * the casting rule, 0 otherwise.  This differs from PyArray_CanCastTo in
 * that it handles scalar arrays (0 dimensions) specially, by checking
 * their value.
 ','line_number':882,'multiline':True]['text':' NOTE, TODO: The same logic as `PyArray_CanCastTypeTo`: ','line_number':895,'multiline':True]['text':'
         * If it's a scalar, check the value.  (This only currently matters for
         * numeric types and for `to == NULL` it can't be numeric.)
         ','line_number':901,'multiline':True]['text':'
         * If it's a scalar, check the value.  (This only currently matters for
         * numeric types and for `to == NULL` it can't be numeric.)
         ','line_number':910,'multiline':True]['text':' Otherwise, use the standard rules (same as `PyArray_CanCastTypeTo`) ','line_number':921,'multiline':True]['text':' Clear any errors and consider this unsafe (should likely be changed) ','line_number':923,'multiline':True]['text':'*
 * Helper function to set a useful error when casting is not possible.
 *
 * @param src_dtype
 * @param dst_dtype
 * @param casting
 * @param scalar Whether this was a "scalar" cast (includes 0-D array with
 *               PyArray_CanCastArrayTo result).
 ','line_number':952,'multiline':True]['text':'NUMPY_API
 * See if array scalars can be cast.
 *
 * TODO: For NumPy 2.0, add a NPY_CASTING parameter.
 ','line_number':979,'multiline':True]['text':'
 * Internal promote types function which handles unsigned integers which
 * fit in same-sized signed integers specially.
 ','line_number':998,'multiline':True]['text':' Convert to the equivalent-sized signed integer ','line_number':1013,'multiline':True]['text':' The table doesn't handle string/unicode/void, check the result ','line_number':1017,'multiline':True]['text':' Convert to the equivalent-sized signed integer ','line_number':1032,'multiline':True]['text':' The table doesn't handle string/unicode/void, check the result ','line_number':1036,'multiline':True]['text':'*
 * This function should possibly become public API eventually.  At this
 * time it is implemented by falling back to `PyArray_AdaptFlexibleDType`.
 * We will use `CastingImpl[from, to].resolve_descriptors(...)` to implement
 * this logic.
 * Before that, the API needs to be reviewed though.
 *
 * WARNING: This function currently does not guarantee that `descr` can
 *          actually be cast to the given DType.
 *
 * @param descr The dtype instance to adapt "cast"
 * @param given_DType The DType class for which we wish to find an instance able
 *        to represent `descr`.
 * @returns Instance of `given_DType`. If `given_DType` is parametric the
 *          descr may be adapted to hold it.
 ','line_number':1051,'multiline':True]['text':'
         * Don't actually do anything, the default is always the result
         * of any cast.
         ','line_number':1075,'multiline':True]['text':' (; due to compiler limitations) ','line_number':1106,'multiline':True]['text':'
 * Helper to find the target descriptor for multiple arrays given an input
 * one that may be a DType class (e.g. "U" or "S").
 * Works with arrays, since that is what `concatenate` works with. However,
 * unlike `np.array(...)` or `arr.astype()` we will never inspect the array's
 * content, which means that object arrays can only be cast to strings if a
 * fixed width is provided (same for string -> generic datetime).
 *
 * As this function uses `PyArray_ExtractDTypeAndDescriptor`, it should
 * eventually be refactored to move the step to an earlier point.
 ','line_number':1116,'multiline':True]['text':' concatenate requires at least one array input. ','line_number':1151,'multiline':True]['text':'
     * NOTE: This code duplicates `PyArray_CastToDTypeAndPromoteDescriptors`
     *       to use arrays, copying the descriptors seems not better.
     ','line_number':1153,'multiline':True]['text':'NUMPY_API
 * Produces the smallest size and lowest kind type to which both
 * input types can be cast.
 ','line_number':1182,'multiline':True]['text':' Fast path for identical inputs (NOTE: This path preserves metadata!) ','line_number':1192,'multiline':True]['text':'
             * Short-cut for legacy/builtin dtypes except void, since void has
             * no reliable byteorder.  Note: This path preserves metadata!
             ','line_number':1194,'multiline':True]['text':' Note that this path loses all metadata ','line_number':1210,'multiline':True]['text':' Cast the input types to the common DType if necessary ','line_number':1216,'multiline':True]['text':'
     * And find the common instance of the two inputs
     * NOTE: Common instance preserves metadata (normally and of one input)
     ','line_number':1229,'multiline':True]['text':'
 * Produces the smallest size and lowest kind type to which all
 * input types can be cast.
 *
 * Roughly equivalent to functools.reduce(PyArray_PromoteTypes, types)
 * but uses a more complex pairwise approach.
 ','line_number':1240,'multiline':True]['text':'
 * NOTE: While this is unlikely to be a performance problem, if
 *       it is it could be reverted to a simple positive/negative
 *       check as the previous system used.
 *
 * The is_small_unsigned output flag indicates whether it's an unsigned integer,
 * and would fit in a signed integer of the same bit size.
 ','line_number':1257,'multiline':True]['text':'
         * Float types aren't allowed to be demoted to integer types,
         * but precision loss is allowed.
         ','line_number':1455,'multiline':True]['text':'
         * The code to demote complex to float is disabled for now,
         * as forcing complex by adding 0j is probably desirable.
         ','line_number':1492,'multiline':True]['text':'
            npy_cfloat value = *(npy_cfloat *)valueptr;
            if (value.imag == 0) {
                return min_scalar_type_num((char *)&value.real,
                                            NPY_FLOAT, is_small_unsigned);
            }
            ','line_number':1497,'multiline':True]['text':'
            if (value.imag == 0) {
                return min_scalar_type_num((char *)&value.real,
                                            NPY_DOUBLE, is_small_unsigned);
            }
            ','line_number':1508,'multiline':True]['text':'
            if (value.imag == 0) {
                return min_scalar_type_num((char *)&value.real,
                                            NPY_LONGDOUBLE, is_small_unsigned);
            }
            ','line_number':1522,'multiline':True]['text':'
     * If the array isn't a numeric scalar, just return the array's dtype.
     ','line_number':1549,'multiline':True]['text':' An aligned memory buffer large enough to hold any type ','line_number':1559,'multiline':True]['text':'NUMPY_API
 * If arr is a scalar (has 0 dimensions) with a built-in number data type,
 * finds the smallest type size/kind which can still represent its data.
 * Otherwise, returns the array's data type.
 *
 ','line_number':1570,'multiline':True]['text':'
 * Provides an ordering for the dtype 'kind' character codes, to help
 * determine when to use the min_scalar_type function. This groups
 * 'kind' into boolean, integer, floating point, and everything else.
 ','line_number':1583,'multiline':True]['text':' Boolean kind ','line_number':1592,'multiline':True]['text':' Unsigned int kind ','line_number':1595,'multiline':True]['text':' Signed int kind ','line_number':1597,'multiline':True]['text':' Float kind ','line_number':1600,'multiline':True]['text':' Complex kind ','line_number':1602,'multiline':True]['text':' Anything else ','line_number':1605,'multiline':True]['text':'
 * Determine if there is a mix of scalars and arrays/dtypes.
 * If this is the case, the scalars should be handled as the minimum type
 * capable of holding the value when the maximum "category" of the scalars
 * surpasses the maximum "category" of the arrays/dtypes.
 * If the scalars are of a lower or same category as the arrays, they may be
 * demoted to a lower type within their category (the lowest type they can
 * be cast to safely according to scalar casting rules).
 *
 * If any new style dtype is involved (non-legacy), always returns 0.
 ','line_number':1612,'multiline':True]['text':' Compute the maximum "kinds" and whether everything is scalar ','line_number':1636,'multiline':True]['text':'
         * If the max scalar kind is bigger than the max array kind,
         * finish computing the max array kind
         ','line_number':1657,'multiline':True]['text':' Indicate whether to use the min_scalar_type function ','line_number':1671,'multiline':True]['text':' A Python integer could be `u` so is effectively that: ','line_number':1688,'multiline':True]['text':' For the new logic, only complex or not matters: ','line_number':1694,'multiline':True]['text':'NUMPY_API
 *
 * Produces the result type of a bunch of inputs, using the same rules
 * as `np.result_type`.
 *
 * NOTE: This function is expected to through a transitional period or
 *       change behaviour.  DTypes should always be strictly enforced for
 *       0-D arrays, while "weak DTypes" will be used to represent Python
 *       integers, floats, and complex in all cases.
 *       (Within this function, these are currently flagged on the array
 *       object to work through `np.result_type`, this may change.)
 *
 *       Until a time where this transition is complete, we probably cannot
 *       add new "weak DTypes" or allow users to create their own.
 ','line_number':1718,'multiline':True]['text':' If the input is a single value, skip promotion. ','line_number':1741,'multiline':True]['text':' Copy all dtypes into a single array defining non-value-based behaviour ','line_number':1775,'multiline':True]['text':' Array descr is also the correct "default" for scalars: ','line_number':1785,'multiline':True]['text':'
         * If the original was a Python scalar/literal, we use only the
         * corresponding abstract DType (and no descriptor) below.
         * Otherwise, we propagate the descriptor as well.
         ','line_number':1790,'multiline':True]['text':' no descriptor for py-scalars ','line_number':1795,'multiline':True]['text':' This could even be an object dtype here for large ints ','line_number':1797,'multiline':True]['text':' Not a "normal" scalar, so we cannot avoid the legacy path ','line_number':1800,'multiline':True]['text':' (ab)use default descriptor to define a default ','line_number':1828,'multiline':True]['text':'
     * NOTE: Code duplicates `PyArray_CastToDTypeAndPromoteDescriptors`, but
     *       supports special handling of the abstract values.
     ','line_number':1838,'multiline':True]['text':' originally a python scalar/literal ','line_number':1845,'multiline':True]['text':'
         * If the DType is not parametric, or all were weak scalars,
         * a result may not yet be set.
         ','line_number':1864,'multiline':True]['text':'
     * Unfortunately, when 0-D "scalar" arrays are involved and mixed, we *may*
     * have to use the value-based logic.
     * `PyArray_CheckLegacyResultType` may behave differently based on the
     * current value of `npy_legacy_promotion`:
     * 1. It does nothing (we use the "new" behavior)
     * 2. It does nothing, but warns if there the result would differ.
     * 3. It replaces the result based on the legacy value-based logic.
     ','line_number':1874,'multiline':True]['text':'
 * Produces the result type of a bunch of inputs, using the UFunc
 * type promotion rules. Use this function when you have a set of
 * input arrays, and need to determine an output array dtype.
 *
 * If all the inputs are scalars (have 0 dimensions) or the maximum "kind"
 * of the scalars is greater than the maximum "kind" of the arrays, does
 * a regular type promotion.
 *
 * Otherwise, does a type promotion on the MinScalarType
 * of all the inputs.  Data types passed directly are treated as array
 * types.
 ','line_number':1904,'multiline':True]['text':' If there's just one type, results must match ','line_number':1934,'multiline':True]['text':' Loop through all the types, promoting them ','line_number':1941,'multiline':True]['text':' Build a single array of all the dtypes ','line_number':1944,'multiline':True]['text':' Combine it with the existing type ','line_number':1971,'multiline':True]['text':' Combine it with the existing type ','line_number':1993,'multiline':True]['text':' None of the above loops ran ','line_number':2008,'multiline':True]['text':'*
 * Promotion of descriptors (of arbitrary DType) to their correctly
 * promoted instances of the given DType.
 * I.e. the given DType could be a string, which then finds the correct
 * string length, given all `descrs`.
 *
 * @param ndescrs number of descriptors to cast and find the common instance.
 *        At least one must be passed in.
 * @param descrs The descriptors to work with.
 * @param DType The DType of the desired output descriptor.
 ','line_number':2041,'multiline':True]['text':' Note that this "fast" path loses all metadata ','line_number':2063,'multiline':True]['text':'NUMPY_API
 * Is the typenum valid?
 ','line_number':2084,'multiline':True]['text':' Backward compatibility only ','line_number':2101,'multiline':True]['text':' In both Zero and One

***You must free the memory once you are done with it
using PyDataMem_FREE(ptr) or you create a memory leak***

If arr is an Object array you are getting a
BORROWED reference to Zero or One.
Do not DECREF.
Please INCREF if you will be hanging on to it.

The memory for the ptr still must be freed in any case;
','line_number':2102,'multiline':True]['text':'NUMPY_API
  Get pointer to zero of correct type for array.
','line_number':2125,'multiline':True]['text':' XXX this is dangerous, the caller probably is not
           aware that zeroval is actually a static PyObject*
           In the best case they will only use it as-is, but
           if they simply memcpy it into a ndarray without using
           setitem(), refcount errors will occur
        ','line_number':2151,'multiline':True]['text':'NUMPY_API
  Get pointer to one of correct type for array
','line_number':2171,'multiline':True]['text':' XXX this is dangerous, the caller probably is not
           aware that oneval is actually a static PyObject*
           In the best case they will only use it as-is, but
           if they simply memcpy it into a ndarray without using
           setitem(), refcount errors will occur
        ','line_number':2197,'multiline':True]['text':' End deprecated ','line_number':2218,'multiline':True]['text':'NUMPY_API
 * Return the typecode of the array a Python object would be converted to
 *
 * Returns the type number the result should have, or NPY_NOTYPE on error.
 ','line_number':2220,'multiline':True]['text':'
         * TODO: If we keep all type number style API working, by defining
         *       type numbers always. We may be able to allow this again.
         ','line_number':2245,'multiline':True]['text':' Raises error when len(op) == 0 ','line_number':2266,'multiline':True]['text':'NUMPY_API
 *
 * This function is only used in one place within NumPy and should
 * generally be avoided. It is provided mainly for backward compatibility.
 *
 * The user of the function has to free the returned array with PyDataMem_FREE.
 ','line_number':2268,'multiline':True]['text':' Convert everything to an array, this could be optimized away ','line_number':2316,'multiline':True]['text':' Make sure all arrays are contiguous and have the correct dtype. ','line_number':2336,'multiline':True]['text':'*
 * Private function to add a casting implementation by unwrapping a bound
 * array method.
 *
 * @param meth
 * @return 0 on success -1 on failure.
 ','line_number':2362,'multiline':True]['text':'
         * The method casting between instances of the same dtype is special,
         * since it is common, it is stored explicitly (currently) and must
         * obey additional constraints to ensure convenient casting.
         ','line_number':2378,'multiline':True]['text':'*
 * Add a new casting implementation using a PyArrayMethod_Spec.
 *
 * @param spec
 * @param private If private, allow slots not publicly exposed.
 * @return 0 on success -1 on failure
 ','line_number':2415,'multiline':True]['text':' Create a bound method, unbind and store it ','line_number':2425,'multiline':True]['text':' this function only makes sense for non-flexible legacy dtypes: ','line_number':2462,'multiline':True]['text':'
     * Legacy dtypes (except datetime) only have byte-order and elsize as
     * storage parameters.
     ','line_number':2465,'multiline':True]['text':'
 * Simple dtype resolver for casting between two different (non-parametric)
 * (legacy) dtypes.
 ','line_number':2502,'multiline':True]['text':'
         * TODO: we have an issue with complex, since the below loops
         *       use the itemsize, the complex alignment would be too small.
         *       Using aligned = 0, might cause slow downs in some cases.
         ','line_number':2557,'multiline':True]['text':' Fetch the optimized loops (2<<10 is a non-contiguous stride) ','line_number':2629,'multiline':True]['text':'
         * The get_loop function must also give a ComplexWarning. We could
         * consider moving this warning into the inner-loop at some point
         * for simplicity (this requires ensuring it is only emitted once).
         ','line_number':2645,'multiline':True]['text':' Use the default get loop function. ','line_number':2656,'multiline':True]['text':' Find the correct casting level, and special case no-cast ','line_number':2663,'multiline':True]['text':' When there is no casting (equivalent C-types) use byteswap loops ','line_number':2668,'multiline':True]['text':' Create a bound method, unbind and store it ','line_number':2690,'multiline':True]['text':'
 * This registers the castingimpl for all casts between numeric types.
 * Eventually, this function should likely be defined as part of a .c.src
 * file to remove `PyArray_GetStridedNumericCastFn` entirely.
 ','line_number':2695,'multiline':True]['text':'
     * NOTE: The following code used to be part of PyArray_AdaptFlexibleDType
     *
     * Get a string-size estimate of the input. These
     * are generally the size needed, rounded up to
     * a multiple of eight.
     ','line_number':2734,'multiline':True]['text':' 5 chars needed for cast to 'True' or 'False' ','line_number':2757,'multiline':True]['text':' Add character for sign symbol ','line_number':2764,'multiline':True]['text':' The legacy loop can handle mismatching itemsizes ','line_number':2807,'multiline':True]['text':' Set the input one as well (late for easier error management) ','line_number':2814,'multiline':True]['text':' Casting from string, is always a simple legacy-style cast ','line_number':2841,'multiline':True]['text':'
     * Casting to strings, is almost the same, but requires a custom resolver
     * to define the correct string length. Right now we use a generic function
     * for this.
     ','line_number':2848,'multiline':True]['text':' Almost everything can be same-kind cast to string (except unicode) ','line_number':2866,'multiline':True]['text':' same-kind if too short ','line_number':2868,'multiline':True]['text':' New string is longer: safe but cannot be a view ','line_number':2901,'multiline':True]['text':' New string fits into old: if the byte-order matches can be a view ','line_number':2905,'multiline':True]['text':' The strings have the same length: ','line_number':2915,'multiline':True]['text':'
 * Add string casts. Right now all string casts are just legacy-wrapped ones
 * (except string<->string and unicode<->unicode), but they do require
 * custom type resolution for the string length.
 *
 * A bit like `object`, it could make sense to define a simpler protocol for
 * string casts, however, we also need to remember that the itemsize of the
 * output has to be found.
 ','line_number':2955,'multiline':True]['text':' Add most casts as legacy ones ','line_number':2972,'multiline':True]['text':' The functions skip string == other_dt or unicode == other_dt ','line_number':2980,'multiline':True]['text':' string<->string and unicode<->unicode have their own specialized casts ','line_number':2991,'multiline':True]['text':'
 * Small helper function to handle the case of `arr.astype(dtype="V")`.
 * When the output descriptor is not passed, we always use `V<itemsize>`
 * of the other dtype.
 ','line_number':3028,'multiline':True]['text':' `dtype="V"` means unstructured currently (compare final path) ','line_number':3038,'multiline':True]['text':'
         * We currently consider this at most a safe cast. It would be
         * possible to allow a view if the field has exactly one element.
         ','line_number':3071,'multiline':True]['text':' Subarray dtype ','line_number':3077,'multiline':True]['text':' A single field, view is OK if sub-view is ','line_number':3085,'multiline':True]['text':' Structured dtype ','line_number':3091,'multiline':True]['text':' TODO: This retained behaviour, but likely should be changed. ','line_number':3093,'multiline':True]['text':' Considered at most unsafe casting (but this could be changed) ','line_number':3097,'multiline':True]['text':'
                 * Assume that a view is impossible when there is more than one
                 * field.  (Fields could overlap, but that seems weird...)
                 ','line_number':3120,'multiline':True]['text':' Plain void type. This behaves much like a "view" ','line_number':3129,'multiline':True]['text':'
             * A simple view, at the moment considered "safe" (the refcheck is
             * probably not necessary, but more future proof)
             ','line_number':3132,'multiline':True]['text':' new elsize is smaller so a view is OK (reject refs for now) ','line_number':3144,'multiline':True]['text':' Void dtypes always do the full cast. ','line_number':3151,'multiline':True]['text':'
         * TODO: This could be a simple zero padded cast, adding a decref
         *       in case of `move_references`. But for now use legacy casts
         *       (which is the behaviour at least up to 1.20).
         ','line_number':3200,'multiline':True]['text':' The structured part may allow a view (and have its own offset): ','line_number':3255,'multiline':True]['text':' A view is possible if the subarray has exactly one element: ','line_number':3260,'multiline':True]['text':' Only allow casting a single field ','line_number':3267,'multiline':True]['text':'
         * unstructured voids are considered unsafe casts and defined, albeit,
         * at this time they go back to legacy behaviour using getitem/setitem.
         ','line_number':3279,'multiline':True]['text':'
     * The cast is always considered unsafe, so the PyArray_GetCastInfo
     * result currently only matters for the view_offset.
     ','line_number':3287,'multiline':True]['text':' Void dtypes always do the full cast. ','line_number':3301,'multiline':True]['text':'
         * Special case strings here, it should be useless (and only actually
         * work for empty arrays).  Possibly this should simply raise for
         * all parametric DTypes.
         ','line_number':3307,'multiline':True]['text':'
         * In general this is currently defined through legacy behaviour via
         * scalars, and should likely just not be allowed.
         ','line_number':3358,'multiline':True]['text':'
 * Find the correct field casting safety.  See the TODO note below, including
 * in 1.20 (and later) this was based on field names rather than field order
 * which it should be using.
 *
 * NOTE: In theory it would be possible to cache the all the field casting
 *       implementations on the dtype, to avoid duplicate work.
 ','line_number':3403,'multiline':True]['text':' if there are no fields, a view is OK. ','line_number':3421,'multiline':True]['text':' Check whether the field names match ','line_number':3431,'multiline':True]['text':' Field name mismatch, consider this at most SAFE. ','line_number':3444,'multiline':True]['text':' Also check the title (denote mismatch as SAFE only) ','line_number':3448,'multiline':True]['text':' Adjust the "view offset" by the field offsets: ','line_number':3472,'multiline':True]['text':'
         * If there is one field, use its field offset.  After that propagate
         * the view offset if they match and set to "invalid" if not.
         ','line_number':3485,'multiline':True]['text':' Can never be considered "no" casting. ','line_number':3498,'multiline':True]['text':' The new dtype may have access outside the old one due to padding: ','line_number':3502,'multiline':True]['text':' negative offsets would give indirect access before original dtype ','line_number':3504,'multiline':True]['text':' new dtype has indirect access outside of the original dtype ','line_number':3508,'multiline':True]['text':' This is weird, since it doesn't return the original descr, but... ','line_number':3527,'multiline':True]['text':' From structured to structured, need to check fields ','line_number':3532,'multiline':True]['text':' Both are plain void dtypes ','line_number':3549,'multiline':True]['text':'
         * At this point, one of the dtypes must be a subarray dtype, the
         * other is definitely not a structured one.
         ','line_number':3563,'multiline':True]['text':' If the shapes do not match, this is at most an unsafe cast ','line_number':3571,'multiline':True]['text':'
         * We can use a view in two cases:
         * 1. The shapes and elsizes matches, so any view offset applies to
         *    each element of the subarray identically.
         *    (in practice this probably implies the `view_offset` will be 0)
         * 2. There is exactly one element and the subarray has no effect
         *    (can be tested by checking if the itemsizes of the base matches)
         ','line_number':3573,'multiline':True]['text':' Both are subarrays and the shape matches, could be no cast ','line_number':3588,'multiline':True]['text':' May be a view if there is one element or elsizes match ','line_number':3590,'multiline':True]['text':' May use a view if "from" has only a single element: ','line_number':3598,'multiline':True]['text':' May use a view if "from" has only a single element: ','line_number':3604,'multiline':True]['text':' An offset for  ','line_number':3612,'multiline':True]['text':' Void dtypes always do the full cast. ','line_number':3624,'multiline':True]['text':'
         * This is a string-like copy of the two bytes (zero padding if
         * necessary)
         ','line_number':3664,'multiline':True]['text':'
 * This initializes the void to void cast. Voids include structured dtypes,
 * which means that they can cast from and to any other dtype and, in that
 * sense, are special (similar to Object).
 ','line_number':3680,'multiline':True]['text':' may not cast at all ','line_number':3698,'multiline':True]['text':'
 * Implement object to any casting implementation. Casting from object may
 * require inspecting of all array elements (for parametric dtypes), and
 * the resolver will thus reject all parametric dtypes if the out dtype
 * is not provided.
 ','line_number':3709,'multiline':True]['text':'
         * This should not really be called, since object -> parametric casts
         * require inspecting the object array. Allow legacy ones, the path
         * here is that e.g. "M8" input is considered to be the DType class,
         * and by allowing it here, we go back to the "M8" instance.
         ','line_number':3724,'multiline':True]['text':'
 * Casting to object is special since it is generic to all input dtypes.
 ','line_number':3754,'multiline':True]['text':' Any object is simple (could even use the default) ','line_number':3785,'multiline':True]['text':'
 * Casting to object is special since it is generic to all input dtypes.
 ','line_number':3811,'multiline':True]['text':'
 * Casts within the object dtype is always just a plain copy/view.
 * For that reason, this function might remain unimplemented.
 ','line_number':3841,'multiline':True]['text':' Datetime casts are defined in datetime.c ','line_number':3905,'multiline':True]