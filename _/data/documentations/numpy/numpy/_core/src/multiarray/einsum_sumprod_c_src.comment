['text':'
 * This file provides optimized sum of product implementations used internally
 * by einsum.
 *
 * Copyright (c) 2011 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]['text':' for NPY_NTYPES ','line_number':15,'multiline':True]['text':' ARM/Neon don't have instructions for aligned memory access','line_number':23,'multiline':False]['text':'********************************************','line_number':30,'multiline':True]['text':'*begin repeat
 * #name = byte, short, int, long, longlong,
 *         ubyte, ushort, uint, ulong, ulonglong,
 *         half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 * #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *         npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *         npy_half, npy_float, npy_double, npy_longdouble,
 *         npy_cfloat, npy_cdouble, npy_clongdouble#
 * #temptype = npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *             npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *             npy_float, npy_float, npy_double, npy_longdouble,
 *             npy_float, npy_double, npy_longdouble#
 * #sfx  = s8, s16, s32, long, s64,
 *        u8, u16, u32, ulong, u64,
 *        half, f32, f64, longdouble,
 *        f32, f64, clongdouble#
 * #to = ,,,,,
 *       ,,,,,
 *       npy_float_to_half,,,,
 *       ,,#
 * #from = ,,,,,
 *         ,,,,,
 *         npy_half_to_float,,,,
 *         ,,#
 * #complex = 0*5,
 *            0*5,
 *            0*4,
 *            1*3#
 * #float32 = 0*5,
 *            0*5,
 *            0,1,0,0,
 *            0*3#
 * #float64 = 0*5,
 *            0*5,
 *            0,0,1,0,
 *            0*3#
 * #NPYV_CHK = 0*5,
 *             0*5,
 *             0, NPY_SIMD_F32, NPY_SIMD_F64, 0,
 *             0*3#
 ','line_number':32,'multiline':True]['text':' NPYV check for @type@','line_number':79,'multiline':False]['text':' Use aligned instructions if possible ','line_number':80,'multiline':True]['text':'*begin repeat1
     * #cond = if(is_aligned), else#
     * #ld = loada, load#
     * #st = storea, store#
     ','line_number':86,'multiline':True]['text':'*begin repeat2
             * #i = 0, 1, 2, 3#
             ','line_number':93,'multiline':True]['text':'*end repeat2*','line_number':97,'multiline':True]['text':'*end repeat1*','line_number':104,'multiline':True]['text':' !NPY_DISABLE_OPTIMIZATION','line_number':118,'multiline':False]['text':' NPYV check for @type@','line_number':122,'multiline':False]['text':'*begin repeat1
 * #nop = 1, 2, 3, 1000#
 * #noplabel = one, two, three, any#
 ','line_number':127,'multiline':True]['text':' complex ','line_number':189,'multiline':True]['text':' This is placed before the main loop to make small counts faster ','line_number':240,'multiline':True]['text':'*begin repeat2
 * #i = 6, 5, 4, 3, 2, 1, 0#
 ','line_number':243,'multiline':True]['text':'*end repeat2*','line_number':258,'multiline':True]['text':' Unroll the loop by 8 ','line_number':263,'multiline':True]['text':'*begin repeat2
 * #i = 0, 1, 2, 3, 4, 5, 6, 7#
 ','line_number':267,'multiline':True]['text':' complex ','line_number':273,'multiline':True]['text':'*end repeat2*','line_number':281,'multiline':True]['text':' Finish off the loop ','line_number':286,'multiline':True]['text':' calculate the multiply and add operation such as dataout = data*scalar+dataout','line_number':292,'multiline':False]['text':' NPYV check for @type@','line_number':296,'multiline':False]['text':' Use aligned instructions if possible ','line_number':297,'multiline':True]['text':'*begin repeat2
     * #cond = if(is_aligned), else#
     * #ld = loada, load#
     * #st = storea, store#
     ','line_number':301,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':309,'multiline':True]['text':'*end repeat3*','line_number':314,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':315,'multiline':True]['text':'*end repeat3*','line_number':319,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':320,'multiline':True]['text':'*end repeat3*','line_number':324,'multiline':True]['text':'*end repeat2*','line_number':327,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':337,'multiline':True]['text':'*end repeat2*','line_number':342,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':343,'multiline':True]['text':'*end repeat2*','line_number':347,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':348,'multiline':True]['text':'*end repeat2*','line_number':352,'multiline':True]['text':' !NPY_DISABLE_OPTIMIZATION','line_number':354,'multiline':False]['text':' NPYV check for @type@','line_number':360,'multiline':False]['text':' NPYV check for @type@','line_number':372,'multiline':False]['text':' Use aligned instructions if possible ','line_number':374,'multiline':True]['text':'*begin repeat2
     * #cond = if(is_aligned), else#
     * #ld = loada, load#
     * #st = storea, store#
     ','line_number':379,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':387,'multiline':True]['text':'*end repeat3*','line_number':393,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':394,'multiline':True]['text':'*end repeat3*','line_number':398,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':399,'multiline':True]['text':'*end repeat3*','line_number':403,'multiline':True]['text':'*end repeat2*','line_number':406,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':417,'multiline':True]['text':'*end repeat2*','line_number':423,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':424,'multiline':True]['text':'*end repeat2*','line_number':428,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':429,'multiline':True]['text':'*end repeat2*','line_number':433,'multiline':True]['text':' !NPY_DISABLE_OPTIMIZATION','line_number':435,'multiline':False]['text':' NPYV check for @type@','line_number':442,'multiline':False]['text':' Some extra specializations for the two operand case ','line_number':446,'multiline':True]['text':' NPYV check for @type@','line_number':484,'multiline':False]['text':' Use aligned instructions if possible ','line_number':485,'multiline':True]['text':'*begin repeat2
     * #cond = if(is_aligned), else#
     * #ld = loada, load#
     * #st = storea, store#
     ','line_number':490,'multiline':True]['text':'*begin repeat3
             * #i = 0, 1, 2, 3#
             ','line_number':498,'multiline':True]['text':'*end repeat3*','line_number':503,'multiline':True]['text':'*end repeat2*','line_number':510,'multiline':True]['text':'*begin repeat2
         * #i = 0, 1, 2, 3#
         ','line_number':521,'multiline':True]['text':'*end repeat2*','line_number':525,'multiline':True]['text':' !NPY_DISABLE_OPTIMIZATION','line_number':528,'multiline':False]['text':' NPYV check for @type@','line_number':534,'multiline':False]['text':' Unroll the loop by 8 ','line_number':569,'multiline':True]['text':'*begin repeat2
 * #i = 0, 1, 2, 3, 4, 5, 6, 7#
 ','line_number':573,'multiline':True]['text':'*end repeat2*','line_number':580,'multiline':True]['text':' Finish off the loop ','line_number':587,'multiline':True]['text':'*begin repeat2
 * #i = 0, 1, 2, 3, 4, 5, 6, 7#
 ','line_number':589,'multiline':True]['text':'*end repeat2*','line_number':599,'multiline':True]['text':' @nop@ > 3 || @complex ','line_number':602,'multiline':True]['text':' complex ','line_number':623,'multiline':True]['text':' functions for various @nop@ ','line_number':653,'multiline':True]['text':' !NPY_DISABLE_OPTIMIZATION','line_number':678,'multiline':False]['text':' !@complex@','line_number':685,'multiline':False]['text':' @nop@ == 1 ','line_number':688,'multiline':True]['text':' complex ','line_number':744,'multiline':True]['text':'*end repeat1*','line_number':796,'multiline':True]['text':'*end repeat*','line_number':798,'multiline':True]['text':' Do OR of ANDs for the boolean type ','line_number':801,'multiline':True]['text':'*begin repeat
 * #nop = 1, 2, 3, 1000#
 * #noplabel = one, two, three, any#
 ','line_number':803,'multiline':True]['text':' This is placed before the main loop to make small counts faster ','line_number':883,'multiline':True]['text':'*begin repeat1
 * #i = 6, 5, 4, 3, 2, 1, 0#
 ','line_number':886,'multiline':True]['text':'*end repeat1*','line_number':905,'multiline':True]['text':' Unroll the loop by 8 for fixed-size nop ','line_number':911,'multiline':True]['text':'*begin repeat1
 * #i = 0, 1, 2, 3, 4, 5, 6, 7#
 ','line_number':920,'multiline':True]['text':'*end repeat1*','line_number':925,'multiline':True]['text':'*begin repeat1
 * #i = 0, 1, 2, 3, 4, 5, 6, 7#
 ','line_number':929,'multiline':True]['text':'*end repeat1*','line_number':936,'multiline':True]['text':'*begin repeat1
 * #i = 0, 1, 2, 3, 4, 5, 6, 7#
 ','line_number':941,'multiline':True]['text':'*end repeat1*','line_number':949,'multiline':True]['text':' If the loop was unrolled, we need to finish it off ','line_number':967,'multiline':True]['text':'*end repeat*','line_number':1027,'multiline':True]['text':'*begin repeat
 * #fn_name = 
 *  object_sum_of_products_any,
 *  object_sum_of_products_one,
 *  object_sum_of_products_two,
 *  object_sum_of_products_three,
 *  object_sum_of_products_contig_any,
 *  object_sum_of_products_contig_one,
 *  object_sum_of_products_contig_two,
 *  object_sum_of_products_contig_three,
 *  object_sum_of_products_outstride0_any,
 *  object_sum_of_products_outstride0_one,
 *  object_sum_of_products_outstride0_two,
 *  object_sum_of_products_outstride0_three#
 ','line_number':1029,'multiline':True]['text':' convention is to treat nulls as None','line_number':1051,'multiline':False]['text':' convention is to treat nulls as None','line_number':1057,'multiline':False]['text':'*end repeat*','line_number':1078,'multiline':True]['text':' These tables need to match up with the type enum ','line_number':1080,'multiline':True]['text':'*begin repeat
 * #name = bool,
 *         byte, ubyte,
 *         short, ushort,
 *         int, uint,
 *         long, ulong,
 *         longlong, ulonglong,
 *         float, double, longdouble,
 *         cfloat, cdouble, clongdouble,
 *         object, string, unicode, void,
 *         datetime, timedelta, half#
 * #use = 0,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1, 1,
 *        1, 1, 1,
 *        0, 0, 0, 0,
 *        0, 0, 1#
 ','line_number':1083,'multiline':True]['text':'*end repeat*','line_number':1110,'multiline':True]['text':' End of _contig_outstride0_unary_specialization_table ','line_number':1111,'multiline':True]['text':'*begin repeat
 * #name = bool,
 *         byte, ubyte,
 *         short, ushort,
 *         int, uint,
 *         long, ulong,
 *         longlong, ulonglong,
 *         float, double, longdouble,
 *         cfloat, cdouble, clongdouble,
 *         object, string, unicode, void,
 *         datetime, timedelta, half#
 * #use = 0,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1, 1,
 *        0, 0, 0,
 *        0, 0, 0, 0,
 *        0, 0, 1#
 ','line_number':1114,'multiline':True]['text':'*end repeat*','line_number':1147,'multiline':True]['text':' End of _binary_specialization_table ','line_number':1148,'multiline':True]['text':'*begin repeat
 * #name = bool,
 *         byte, ubyte,
 *         short, ushort,
 *         int, uint,
 *         long, ulong,
 *         longlong, ulonglong,
 *         float, double, longdouble,
 *         cfloat, cdouble, clongdouble,
 *         object, string, unicode, void,
 *         datetime, timedelta, half#
 * #use = 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1, 1,
 *        1, 1, 1,
 *        1, 0, 0, 0,
 *        0, 0, 1#
 ','line_number':1151,'multiline':True]['text':'*end repeat*','line_number':1183,'multiline':True]['text':' End of _outstride0_specialized_table ','line_number':1184,'multiline':True]['text':'*begin repeat
 * #name = bool,
 *         byte, ubyte,
 *         short, ushort,
 *         int, uint,
 *         long, ulong,
 *         longlong, ulonglong,
 *         float, double, longdouble,
 *         cfloat, cdouble, clongdouble,
 *         object, string, unicode, void,
 *         datetime, timedelta, half#
 * #use = 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1, 1,
 *        1, 1, 1,
 *        1, 0, 0, 0,
 *        0, 0, 1#
 ','line_number':1187,'multiline':True]['text':'*end repeat*','line_number':1219,'multiline':True]['text':' End of _allcontig_specialized_table ','line_number':1220,'multiline':True]['text':'*begin repeat
 * #name = bool,
 *         byte, ubyte,
 *         short, ushort,
 *         int, uint,
 *         long, ulong,
 *         longlong, ulonglong,
 *         float, double, longdouble,
 *         cfloat, cdouble, clongdouble,
 *         object, string, unicode, void,
 *         datetime, timedelta, half#
 * #use = 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1,
 *        1, 1, 1,
 *        1, 1, 1,
 *        1, 0, 0, 0,
 *        0, 0, 1#
 ','line_number':1223,'multiline':True]['text':'*end repeat*','line_number':1255,'multiline':True]['text':' End of _unnspecialized_table ','line_number':1256,'multiline':True]['text':' contiguous reduction ','line_number':1268,'multiline':True]['text':' nop of 2 has more specializations ','line_number':1277,'multiline':True]['text':' Encode the zero/contiguous strides ','line_number':1279,'multiline':True]['text':' Inner loop with an output stride of 0 ','line_number':1296,'multiline':True]['text':' Check for all contiguous ','line_number':1301,'multiline':True]['text':' Contiguous loop ','line_number':1308,'multiline':True]['text':' None of the above specializations caught it, general loops ','line_number':1313,'multiline':True]