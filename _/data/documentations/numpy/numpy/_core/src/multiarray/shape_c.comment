['text':' for interned strings ','line_number':21,'multiline':True]['text':' for npy_mul_sizes_with_overflow ','line_number':22,'multiline':True]['text':' for convert_shape_to_string ','line_number':23,'multiline':True]['text':'NUMPY_API
 * Resize (reallocate data).  Only works if nothing else is referencing this
 * array and it is contiguous.  If refcheck is 0, then the reference count is
 * not checked and assumed to be 1.  You still must own this data and have no
 * weak-references and no base object.
 ','line_number':36,'multiline':True]['text':' Compute total size of old and new arrays. The new size might overflow ','line_number':61,'multiline':True]['text':' Convert to number of bytes. The new count might overflow ','line_number':79,'multiline':True]['text':' PYPY_VERSION ','line_number':109,'multiline':True]['text':' Reallocate space if needed - allocating 0 is forbidden ','line_number':123,'multiline':True]['text':' This can happen if someone arbitrarily sets NPY_ARRAY_OWNDATA ','line_number':126,'multiline':True]['text':' Fill new memory with zeros ','line_number':143,'multiline':True]['text':' Different number of dimensions. ','line_number':162,'multiline':True]['text':' Need new dimensions and strides arrays ','line_number':164,'multiline':True]['text':' make new_strides variable ','line_number':174,'multiline':True]['text':'
 * Returns a new array
 * with the new shape from the data
 * in the old array --- order-perspective depends on order argument.
 * copy-only-if-necessary
 ','line_number':190,'multiline':True]['text':'NUMPY_API
 * New shape for an array
 ','line_number':197,'multiline':True]['text':'  Quick check to make sure anything actually needs to be done ','line_number':221,'multiline':True]['text':'
     * fix any -1 dimensions and check new-dimensions against old size
     ','line_number':236,'multiline':True]['text':'
     * sometimes we have to create a new copy of the array
     * in order to get the right orientation and
     * because we can't just reuse the buffer with the
     * data in the order it is in.
     ','line_number':242,'multiline':True]['text':' no need to copy the array after all ','line_number':255,'multiline':True]['text':' We always have to interpret the contiguous buffer correctly ','line_number':268,'multiline':True]['text':' Make sure the flags argument is set. ','line_number':270,'multiline':True]['text':' For backward compatibility -- Not recommended ','line_number':295,'multiline':True]['text':'NUMPY_API
 * Reshape
 ','line_number':297,'multiline':True]['text':'
 * attempt to reshape an array without copying data
 *
 * The requested newdims are not checked, but must be compatible with
 * the size of self, which must be non-zero. Other than that this
 * function should correctly handle all reshapes, including axes of
 * length 1. Zero strides should work but are untested.
 *
 * If a copy is needed, returns 0
 * If no copy is needed, returns 1 and fills newstrides
 *     with appropriate strides
 *
 * The "is_f_order" argument describes how the array should be viewed
 * during the reshape, not how it is stored in memory (that
 * information is in PyArray_STRIDES(self)).
 *
 * If some output dimensions have length 1, the strides assigned to
 * them are arbitrary. In the current implementation, they are the
 * stride of the next-fastest index.
 ','line_number':350,'multiline':True]['text':'
     * Remove axes with dimension 1 from the old array. They have no effect
     * but would need special cases since their strides do not matter.
     ','line_number':381,'multiline':True]['text':' oi to oj and ni to nj give the axis ranges currently worked with ','line_number':393,'multiline':True]['text':' Misses trailing 1s, these are handled later ','line_number':404,'multiline':True]['text':' Check whether the original axes can be combined ','line_number':411,'multiline':True]['text':' not contiguous enough ','line_number':415,'multiline':True]['text':' C order ','line_number':420,'multiline':True]['text':' not contiguous enough ','line_number':422,'multiline':True]['text':' Calculate new strides for all axes currently worked with ','line_number':428,'multiline':True]['text':' C order ','line_number':436,'multiline':True]['text':'
     * Set strides corresponding to trailing 1s of the new shape.
     ','line_number':446,'multiline':True]['text':'NUMPY_API
 *
 * return a new view of the array object with all of its unit-length
 * dimensions squeezed out if needed, otherwise
 * return the same array.
 ','line_number':524,'multiline':True]['text':' If there were no ones to squeeze out, return the same array ','line_number':552,'multiline':True]['text':'
     * If self isn't not a base class ndarray, call its
     * __array_wrap__ method
     ','line_number':565,'multiline':True]['text':'
 * Just like PyArray_Squeeze, but allows the caller to select
 * a subset of the size-one dimensions to squeeze out.
 ','line_number':578,'multiline':True]['text':' Verify that the axes requested are all of size one ','line_number':592,'multiline':True]['text':' If there were no axes to squeeze out, return the same array ','line_number':608,'multiline':True]['text':'
     * If self isn't not a base class ndarray, call its
     * __array_wrap__ method
     ','line_number':621,'multiline':True]['text':'NUMPY_API
 * SwapAxes
 ','line_number':634,'multiline':True]['text':'NUMPY_API
 * Return Transpose.
 ','line_number':665,'multiline':True]['text':'
     * this allocates memory for dimensions and strides (but fills them
     * incorrectly), sets up descr, and points data at PyArray_DATA(ap).
     ','line_number':711,'multiline':True]['text':' fix the dimensions and strides of the return-array ','line_number':724,'multiline':True]['text':'
 * Return matrix transpose (swap last two dimensions).
 ','line_number':734,'multiline':True]['text':'
 * Sorts items so stride is descending, because C-order
 * is the default in the face of ambiguity.
 ','line_number':750,'multiline':True]['text':' Sort the absolute value of the strides ','line_number':759,'multiline':True]['text':'
         * Make the qsort stable by next comparing the perm order.
         * (Note that two perm entries will never be equal)
         ','line_number':768,'multiline':True]['text':'NUMPY_API
 *
 * This function populates the first ndim elements
 * of strideperm with sorted descending by their absolute values.
 * For example, the stride array (4, -2, 12) becomes
 * [(2, 12), (0, 4), (1, -2)].
 ','line_number':782,'multiline':True]['text':' Set up the strideperm values ','line_number':795,'multiline':True]['text':' Sort them ','line_number':801,'multiline':True]['text':'
 * Creates a sorted stride perm matching the KEEPORDER behavior
 * of the NpyIter object. Because this operates based on multiple
 * input strides, the 'stride' member of the npy_stride_sort_item
 * would be useless and we simply argsort a list of indices instead.
 *
 * The caller should have already validated that 'ndim' matches for
 * every array in the arrays list.
 ','line_number':814,'multiline':True]['text':' Initialize the strideperm values to the identity. ','line_number':829,'multiline':True]['text':'
     * This is the same as the custom stable insertion sort in
     * the NpyIter object, but sorting in the reverse order as
     * in the iterator. The iterator sorts from smallest stride
     * to biggest stride (Fortran order), whereas here we sort
     * from biggest stride to smallest stride (C order).
     ','line_number':834,'multiline':True]['text':'
                         * Set swap even if it's not ambiguous already,
                         * because in the case of conflicts between
                         * different operands, C-order wins.
                         ','line_number':856,'multiline':True]['text':' Only set swap if it's still ambiguous ','line_number':864,'multiline':True]['text':'
                     * A comparison has been done, so it's
                     * no longer ambiguous
                     ','line_number':870,'multiline':True]['text':'
             * If the comparison was unambiguous, either shift
             * 'ipos' to 'i1' or stop looking for an insertion point
             ','line_number':877,'multiline':True]['text':' Insert out_strideperm[i0] into the right place ','line_number':891,'multiline':True]['text':'NUMPY_API
 * Ravel
 * Returns a contiguous array
 ','line_number':901,'multiline':True]['text':' This handles some corner cases, such as 0-d arrays as well ','line_number':914,'multiline':True]['text':' For KEEPORDER, check if we can make a flattened view ','line_number':932,'multiline':True]['text':' The output array must be contiguous, so the first stride is fixed ','line_number':941,'multiline':True]['text':' A size one dimension does not matter ','line_number':946,'multiline':True]['text':' If all the strides matched a contiguous layout, return a view ','line_number':955,'multiline':True]['text':'NUMPY_API
 * Flatten
 ','line_number':971,'multiline':True]['text':'NUMPY_API
 *
 * Removes the axes flagged as True from the array,
 * modifying it in place. If an axis flagged for removal
 * has a shape entry bigger than one, this effectively selects
 * index zero for that axis.
 *
 * WARNING: If an axis flagged for removal has a shape equal to zero,
 *          the array will point to invalid memory. The caller must
 *          validate this!
 *          If an axis flagged for removal has a shape larger than one,
 *          the aligned flag (and in the future the contiguous flags),
 *          may need explicit update.
 *
 * For example, this can be used to remove the reduction axes
 * from a reduction result once its computation is complete.
 ','line_number':1004,'multiline':True]['text':' Compress the dimensions and strides ','line_number':1028,'multiline':True]['text':' The final number of dimensions ','line_number':1037,'multiline':True]['text':' NOTE: This is only necessary if a dimension with size != 1 was removed ','line_number':1040,'multiline':True]