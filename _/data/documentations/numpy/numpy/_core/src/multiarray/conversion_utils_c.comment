['text':'***************************************************************
* Useful function for conversion when used with PyArg_ParseTuple
***************************************************************','line_number':27,'multiline':True]['text':'NUMPY_API
 *
 * Useful to pass as converter function for O& processing in PyArgs_ParseTuple.
 *
 * This conversion function can be used with the "O&" argument for
 * PyArg_ParseTuple.  It will immediately return an object of array type
 * or will convert to a NPY_ARRAY_CARRAY any other object.
 *
 * If you use PyArray_Converter, you must DECREF the array when finished
 * as you get a new reference to it.
 ','line_number':31,'multiline':True]['text':'NUMPY_API
 * Useful to pass as converter function for O& processing in
 * PyArgs_ParseTuple for output arrays
 ','line_number':59,'multiline':True]['text':'
 * Convert the given value to an integer. Replaces the error when compared
 * to `PyArray_PyIntAsIntp`.  Exists mainly to retain old behaviour of
 * `PyArray_IntpConverter` and `PyArray_IntpFromSequence`
 ','line_number':83,'multiline':True]['text':'NUMPY_API
 * Get intp chunk from sequence
 *
 * This function takes a Python sequence object and allocates and
 * fills in an intp array with the converted values.
 *
 * Remember to free the pointer seq.ptr when done using
 * PyDimMem_FREE(seq.ptr)**
 ','line_number':103,'multiline':True]['text':'
     * When the deprecation below expires, remove the `if` statement, and
     * update the comment for PyArray_OptionalIntpConverter.
     ','line_number':118,'multiline':True]['text':' Numpy 1.20, 2020-05-31 ','line_number':123,'multiline':True]['text':'
     * If obj is a scalar we skip all the useless computations and jump to
     * dimension_from_scalar as soon as possible.
     ','line_number':134,'multiline':True]['text':' continue attempting to parse as a single integer. ','line_number':142,'multiline':True]['text':'
         * obj *might* be a scalar (if dimension_from_scalar does not fail, at
         * the moment no check have been performed to verify this hypothesis).
         ','line_number':148,'multiline':True]['text':'
                 * If the error occurred is a type error (cannot convert the
                 * value to an integer) communicate that we expected a sequence
                 * or an integer from the user.
                 ','line_number':162,'multiline':True]['text':'
         * `obj` is a sequence converted to the `PySequence_Fast` in `seq_obj`
         ','line_number':179,'multiline':True]['text':'
 * Like PyArray_IntpConverter, but leaves `seq` untouched if `None` is passed
 * rather than treating `None` as `()`.
 ','line_number':214,'multiline':True]['text':'NUMPY_API
 * Get buffer chunk from object
 *
 * this function takes a Python object which exposes the (single-segment)
 * buffer interface and returns a pointer to the data segment
 *
 * You should increment the reference count by one of buf->base
 * if you will hang on to a reference
 *
 * You only get a borrowed reference to the object. Do not free the
 * memory...
 ','line_number':264,'multiline':True]['text':'
     * In Python 3 both of the deprecated functions PyObject_AsWriteBuffer and
     * PyObject_AsReadBuffer that this code replaces release the buffer. It is
     * up to the object that supplies the buffer to guarantee that the buffer
     * sticks around after the release.
     ','line_number':301,'multiline':True]['text':' Point to the base of the buffer object if present ','line_number':309,'multiline':True]['text':'NUMPY_API
 * Get axis from an object (possibly None) -- a converter function,
 *
 * See also PyArray_ConvertMultiAxis, which also handles a tuple of axes.
 ','line_number':319,'multiline':True]['text':'
 * Converts an axis parameter into an ndim-length C-array of
 * boolean flags, True for each axis specified.
 *
 * If obj is None or NULL, everything is set to True. If obj is a tuple,
 * each axis within the tuple is set to True. If obj is an integer,
 * just that axis is set to True.
 ','line_number':340,'multiline':True]['text':' None means all of the axes ','line_number':351,'multiline':True]['text':' A tuple of which axes ','line_number':356,'multiline':True]['text':' Try to interpret axis as an integer ','line_number':386,'multiline':True]['text':'
         * Special case letting axis={-1,0} slip through for scalars,
         * for backwards compatibility reasons.
         ','line_number':398,'multiline':True]['text':'NUMPY_API
 * Convert an object to true / false
 ','line_number':416,'multiline':True]['text':' allow bytes for compatibility ','line_number':442,'multiline':True]['text':' str_func returns -1 without an exception if the value is wrong ','line_number':472,'multiline':True]['text':'NUMPY_API
 * Convert object to endian
 ','line_number':519,'multiline':True]['text':'
         * Mergesort is an alias for NPY_STABLESORT.
         * That maintains backwards compatibility while
         * allowing other types of stable sorts to be used.
         ','line_number':545,'multiline':True]['text':'
         * NPY_STABLESORT is one of
         *
         *   - mergesort
         *   - timsort
         *
         *  Which one is used depends on the data type.
         ','line_number':554,'multiline':True]['text':'NUMPY_API
 * Convert object to sort kind
 ','line_number':570,'multiline':True]['text':' Leave the desired default from the caller for Py_None ','line_number':576,'multiline':True]['text':'NUMPY_API
 * Convert object to select kind
 ','line_number':598,'multiline':True]['text':' Filters out the case sensitive/non-exact
     * match inputs and other inputs and outputs DeprecationWarning
     ','line_number':629,'multiline':True]['text':' NumPy 1.20, 2020-05-19 ','line_number':633,'multiline':True]['text':'NUMPY_API
 * Convert object to searchsorted side
 ','line_number':644,'multiline':True]['text':'NUMPY_API
 * Convert an object to FORTRAN / C / ANY / KEEP
 ','line_number':682,'multiline':True]['text':' Leave the desired default from the caller for Py_None ','line_number':688,'multiline':True]['text':' Filters out the case sensitive/non-exact
     * match inputs and other inputs and outputs DeprecationWarning
     ','line_number':721,'multiline':True]['text':' Numpy 1.20, 2020-05-19 ','line_number':725,'multiline':True]['text':'NUMPY_API
 * Convert an object to NPY_RAISE / NPY_CLIP / NPY_WRAP
 ','line_number':736,'multiline':True]['text':' For users passing `RAISE`, `WRAP`, `CLIP` ','line_number':752,'multiline':True]['text':'NUMPY_API
 * Convert an object to an array of n NPY_CLIPMODE values.
 * This is intended to be used in functions where a different mode
 * could be applied to each axis, like in ravel_multi_index.
 ','line_number':775,'multiline':True]['text':' Get the clip mode(s) ','line_number':784,'multiline':True]['text':' Filters out the case sensitive/non-exact
     * match inputs and other inputs and outputs DeprecationWarning
     ','line_number':842,'multiline':True]['text':' Numpy 1.21, 2021-01-19 ','line_number':846,'multiline':True]['text':'
 * Convert an object to NPY_VALID / NPY_SAME / NPY_FULL
 ','line_number':857,'multiline':True]['text':' For users passing integers ','line_number':870,'multiline':True]['text':'NUMPY_API
 * Convert any Python object, *obj*, to an NPY_CASTING enum.
 ','line_number':931,'multiline':True]['text':'****************************
* Other conversion functions
****************************','line_number':944,'multiline':True]['text':' This assumes that NPY_SIZEOF_INTP >= NPY_SIZEOF_INT ','line_number':952,'multiline':True]['text':'NUMPY_API','line_number':964,'multiline':True]['text':'
     * Be a bit stricter and not allow bools.
     * np.bool is also disallowed as Boolean arrays do not currently
     * support index.
     ','line_number':981,'multiline':True]['text':'
     * Since it is the usual case, first check if o is an integer. This is
     * an exact check, since otherwise __index__ is used.
     ','line_number':991,'multiline':True]['text':'
     * The most general case. PyNumber_Index(o) covers everything
     * including arrays. In principle it may be possible to replace
     * the whole function by PyIndex_AsSSize_t after deprecation.
     ','line_number':1004,'multiline':True]['text':' Only replace TypeError's here, which are the normal errors. ','line_number':1022,'multiline':True]['text':' silence unused warning ','line_number':1028,'multiline':True]['text':'NUMPY_API','line_number':1051,'multiline':True]['text':'*
 * Reads values from a sequence of integers and stores them into an array.
 *
 * @param  seq      A sequence created using `PySequence_Fast`.
 * @param  vals     Array used to store dimensions (must be large enough to
 *                      hold `maxvals` values).
 * @param  max_vals Maximum number of dimensions that can be written into `vals`.
 * @return          Number of dimensions or -1 if an error occurred.
 *
 * .. note::
 *
 *   Opposed to PyArray_IntpFromSequence it uses and returns `npy_intp`
 *      for the number of values.
 ','line_number':1070,'multiline':True]['text':'
     * First of all, check if sequence is a scalar integer or if it can be
     * "casted" into a scalar.
     ','line_number':1087,'multiline':True]['text':'NUMPY_API
 * PyArray_IntpFromSequence
 * Returns the number of integers converted or -1 if an error occurred.
 * vals must be large enough to hold maxvals
 ','line_number':1104,'multiline':True]['text':' continue attempting to parse as a single integer. ','line_number':1117,'multiline':True]['text':'*
 * WARNING: This flag is a bad idea, but was the only way to both
 *   1) Support unpickling legacy pickles with object types.
 *   2) Deprecate (and later disable) usage of O4 and O8
 *
 * The key problem is that the pickled representation unpickles by
 * directly calling the dtype constructor, which has no way of knowing
 * that it is in an unpickle context instead of a normal context without
 * evil global state like we create here.
 ','line_number':1143,'multiline':True]['text':'
 * Convert a gentype (that is actually a generic kind character) and
 * it's itemsize to a NUmPy typenumber, i.e. `itemsize=4` and `gentype='f'`
 * becomes `NPY_FLOAT32`.
 ','line_number':1155,'multiline':True]['text':'
             * For 'O4' and 'O8', let it pass, but raise a
             * deprecation warning. For all other cases, raise
             * an exception by leaving newtype unset.
             ','line_number':1272,'multiline':True]['text':' 2012-02-04, 1.7, not sure when this can be removed ','line_number':1280,'multiline':True]['text':' Lifted from numarray ','line_number':1328,'multiline':True]['text':' TODO: not documented ','line_number':1329,'multiline':True]['text':'NUMPY_API
  PyArray_IntTupleFromIntp
','line_number':1330,'multiline':True]