['text':'
 * Coercion to boolean is done via integer right now.
 ','line_number':19,'multiline':True]['text':'
 * In order to not pack a whole copy of a floating point parser, we copy the
 * result into ascii and call the Python one.  Float parsing isn't super quick
 * so this is not terrible, but avoiding it would speed up things.
 *
 * Also note that parsing the first float of a complex will copy the whole
 * string to ascii rather than just the first part.
 * TODO: A tweak of the break might be a simple mitigation there.
 *
 * @param str The UCS4 string to parse
 * @param end Pointer to the end of the string
 * @param skip_trailing_whitespace If false does not skip trailing whitespace
 *        (used by the complex parser).
 * @param result Output stored as double value.
 ','line_number':36,'multiline':True]['text':' skip leading whitespace ','line_number':56,'multiline':True]['text':' empty or only whitespace: not a floating point number ','line_number':63,'multiline':True]['text':' We convert to ASCII for the Python parser, use stack if small: ','line_number':66,'multiline':True]['text':' Character cannot be used, ignore for end calculation and stop ','line_number':83,'multiline':True]['text':' Rewind `end` to the first UCS4 character not parsed: ','line_number':93,'multiline':True]['text':' and then skip any remaining whitespace: ','line_number':103,'multiline':True]['text':' Remove whitespace before the possibly leading '(' ','line_number':167,'multiline':True]['text':' Allow whitespace within the parentheses: "( 1j)" ','line_number':174,'multiline':True]['text':' No imaginary part in the string (e.g. "3.5")','line_number':183,'multiline':False]['text':' Only an imaginary part (e.g "1.5j") ','line_number':188,'multiline':True]['text':' Imaginary part still to parse ','line_number':194,'multiline':True]['text':' Advance to support +- (and ++) ','line_number':196,'multiline':True]['text':' Allow whitespace inside brackets as in "(1+2j )" or "( 1j )" ','line_number':211,'multiline':True]['text':' parentheses was not closed ','line_number':219,'multiline':True]['text':'
 * String and unicode conversion functions.
 ','line_number':284,'multiline':True]['text':'
             * loadtxt assumed latin1, which is compatible with UCS1 (first
             * 256 unicode characters).
             ','line_number':297,'multiline':True]['text':' TODO: Was UnicodeDecodeError, is unspecific error good? ','line_number':302,'multiline':True]['text':'
 * Convert functions helper for the generic converter.
 ','line_number':343,'multiline':True]['text':' Converts to unicode and calls custom converter (if set) ','line_number':381,'multiline':True]