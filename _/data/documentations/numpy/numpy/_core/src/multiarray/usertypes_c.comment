['text':'
  Provide multidimensional arrays as a basic object type in python.

  Based on Original Numeric implementation
  Copyright (c) 1995, 1996, 1997 Jim Hugunin, hugunin@mit.edu

  with contributions from many Numeric Python developers 1995-2004

  Heavily modified in 2005 with inspiration from Numarray

  by

  Travis Oliphant,  oliphant@ee.byu.edu
  Brigham Young University


maintainer email:  oliphant.travis@ieee.org

  Numarray design (which provided guidance) by
  Space Science Telescope Institute
  (J. Todd Miller, Perry Greenfield, Rick White)
','line_number':1,'multiline':True]['text':' Replace the passed-in pointer ','line_number':68,'multiline':True]['text':'NUMPY_API
  Initialize arrfuncs to NULL
','line_number':104,'multiline':True]['text':'
  returns typenum to associate with this type >=NPY_USERDEF.
  needs the userdecrs table and PyArray_NUMUSER variables
  defined in arraytypes.inc
','line_number':142,'multiline':True]['text':'NUMPY_API
  Register Data type
  Does not change the reference count of descr
','line_number':147,'multiline':True]['text':' See if this type is already registered ','line_number':159,'multiline':True]['text':'
         * User dtype can't actually do reference counting, however, there
         * are existing hacks (e.g. xpress), which use a structured one:
         *     dtype((xpress.var, [('variable', 'O')]))
         * so we have to support this. But such a structure must be constant
         * (i.e. fixed at registration time, this is the case for `xpress`).
         ','line_number':193,'multiline':True]['text':' Invalidate cached hash value ','line_number':216,'multiline':True]['text':'
     * Legacy user DTypes classes cannot have a name, since the user never
     * defined one.  So we create a name for them here. These DTypes are
     * effectively static types.
     *
     * Note: we have no intention of freeing the memory again since this
     * behaves identically to static type definition.
     ','line_number':226,'multiline':True]['text':'
     * We have to take only the name, and ignore the module to get
     * a reasonable __name__, since static types are limited in this regard
     * (this is not ideal, but not a big issue in practice).
     * This is what Python does to print __name__ for static types.
     ','line_number':236,'multiline':True]['text':' free the name only on failure ','line_number':262,'multiline':True]['text':' See comment where use_void_clearimpl is set... ','line_number':266,'multiline':True]['text':' Also use the void zerofill since there may be objects ','line_number':269,'multiline':True]['text':'
 * Checks that there is no cast already cached using the new casting-impl
 * mechanism.
 * In that case, we do not clear out the cache (but otherwise silently
 * continue).  Users should not modify casts after they have been used,
 * but this may also happen accidentally during setup (and may never have
 * mattered).  See https://github.com/numpy/numpy/issues/20009
 ','line_number':278,'multiline':True]['text':'NUMPY_API
  Register Casting Function
  Replaces any function currently stored.
','line_number':327,'multiline':True]['text':'NUMPY_API
 * Register a type number indicating that a descriptor can be cast
 * to it safely
 ','line_number':372,'multiline':True]['text':'
     * If we were to allow this, the casting lookup table for
     * built-in types needs to be modified, as cancastto is
     * not checked for them.
     ','line_number':380,'multiline':True]['text':'
         * register with cancastto
         * These lists won't be freed once created
         * -- they become part of the data-type
         ','line_number':398,'multiline':True]['text':' register with cancastscalarkindto ','line_number':414,'multiline':True]['text':'
 * Legacy user DTypes implemented the common DType operation
 * (as used in type promotion/result_type, and e.g. the type for
 * concatenation), by using "safe cast" logic.
 *
 * New DTypes do have this behaviour generally, but we use can-cast
 * when legacy user dtypes are involved.
 ','line_number':442,'multiline':True]['text':' legacy DTypes can always defer to new style ones ','line_number':457,'multiline':True]['text':' Defer so that only one of the types handles the cast ','line_number':461,'multiline':True]['text':' Check whether casting is possible from one type to the other ','line_number':467,'multiline':True]['text':'
     * The following code used to be part of PyArray_PromoteTypes().
     * We can expect that this code is never used.
     * In principle, it allows for promotion of two different user dtypes
     * to a single NumPy dtype of the same "kind". In practice
     * using the same `kind` as NumPy was never possible due to an
     * simplification where `PyArray_EquivTypes(descr1, descr2)` will
     * return True if both kind and element size match (e.g. bfloat16 and
     * float16 would be equivalent).
     * The option is also very obscure and not used in the examples.
     ','line_number':477,'multiline':True]['text':' Convert the 'kind' char into a scalar kind ','line_number':489,'multiline':True]['text':' If both are scalars, there may be a promotion possible ','line_number':525,'multiline':True]['text':' Start with the larger scalar kind ','line_number':528,'multiline':True]['text':' If there is no larger type of this kind, try a larger kind ','line_number':534,'multiline':True]['text':' Use -1 to signal no promoted type found ','line_number':537,'multiline':True]['text':' If we found a type to which we can promote both, done! ','line_number':546,'multiline':True]['text':' Try the next larger type of this kind ','line_number':552,'multiline':True]['text':'*
 * This function wraps a legacy cast into an array-method. This is mostly
 * used for legacy user-dtypes, but for example numeric to/from datetime
 * casts were only defined that way as well.
 *
 * @param from
 * @param to
 * @param casting If `NPY_NO_CASTING` will check the legacy registered cast,
 *        otherwise uses the provided cast.
 ','line_number':562,'multiline':True]['text':' Name is not actually used, but allows identifying these. ','line_number':595,'multiline':True]