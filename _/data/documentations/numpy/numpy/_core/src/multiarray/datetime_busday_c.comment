['text':'
 * This file implements business day functionality for NumPy datetime.
 *
 * Written by Mark Wiebe (mwwiebe@gmail.com)
 * Copyright (c) 2011 by Enthought, Inc.
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]['text':' Gets the day of the week for a datetime64[D] value ','line_number':26,'multiline':True]['text':' Get the day of the week for 'date' (1970-01-05 is Monday) ','line_number':32,'multiline':True]['text':'
 * Returns 1 if the date is a holiday (contained in the sorted
 * list of dates), 0 otherwise.
 *
 * The holidays list should be normalized, which means any NaT (not-a-time)
 * values, duplicates, and dates already excluded by the weekmask should
 * be removed, and the list should be sorted.
 ','line_number':41,'multiline':True]['text':' Simple binary search ','line_number':55,'multiline':True]['text':' Not found ','line_number':70,'multiline':True]['text':'
 * Finds the earliest holiday which is on or after 'date'. If 'date' does not
 * appear within the holiday range, returns 'holidays_begin' if 'date'
 * is before all holidays, or 'holidays_end' if 'date' is after all
 * holidays.
 *
 * To remove all the holidays before 'date' from a holiday range, do:
 *
 *      holidays_begin = find_holiday_earliest_on_or_after(date,
 *                                          holidays_begin, holidays_end);
 *
 * The holidays list should be normalized, which means any NaT (not-a-time)
 * values, duplicates, and dates already excluded by the weekmask should
 * be removed, and the list should be sorted.
 ','line_number':74,'multiline':True]['text':' Simple binary search ','line_number':95,'multiline':True]['text':'
 * Finds the earliest holiday which is after 'date'. If 'date' does not
 * appear within the holiday range, returns 'holidays_begin' if 'date'
 * is before all holidays, or 'holidays_end' if 'date' is after all
 * holidays.
 *
 * To remove all the holidays after 'date' from a holiday range, do:
 *
 *      holidays_end = find_holiday_earliest_after(date,
 *                                          holidays_begin, holidays_end);
 *
 * The holidays list should be normalized, which means any NaT (not-a-time)
 * values, duplicates, and dates already excluded by the weekmask should
 * be removed, and the list should be sorted.
 ','line_number':113,'multiline':True]['text':' Simple binary search ','line_number':134,'multiline':True]['text':'
 * Applies the 'roll' strategy to 'date', placing the result in 'out'
 * and setting 'out_day_of_week' to the day of the week that results.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':152,'multiline':True]['text':' Deal with NaT input ','line_number':167,'multiline':True]['text':' Get the day of the week for 'date' ','line_number':180,'multiline':True]['text':' Apply the 'roll' if it's not a business day ','line_number':183,'multiline':True]['text':' If we crossed a month boundary, do preceding instead ','line_number':201,'multiline':True]['text':' If we crossed a month boundary, do following instead ','line_number':229,'multiline':True]['text':'
 * Applies a single business day offset. See the function
 * business_day_offset for the meaning of all the parameters.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':265,'multiline':True]['text':' Roll the date to a business day ','line_number':281,'multiline':True]['text':' If we get a NaT, just return it ','line_number':289,'multiline':True]['text':' Now we're on a valid business day ','line_number':295,'multiline':True]['text':' Remove any earlier holidays ','line_number':297,'multiline':True]['text':' Jump by as many weeks as we can ','line_number':301,'multiline':True]['text':' Adjust based on the number of holidays we crossed ','line_number':305,'multiline':True]['text':' Step until we use up the rest of the offset ','line_number':311,'multiline':True]['text':' Remove any later holidays ','line_number':324,'multiline':True]['text':' Jump by as many weeks as we can ','line_number':328,'multiline':True]['text':' Adjust based on the number of holidays we crossed ','line_number':332,'multiline':True]['text':' Step until we use up the rest of the offset ','line_number':338,'multiline':True]['text':'
 * Applies a single business day count operation. See the function
 * business_day_count for the meaning of all the parameters.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':355,'multiline':True]['text':' If we get a NaT, raise an error ','line_number':372,'multiline':True]['text':' Trivial empty date range ','line_number':380,'multiline':True]['text':' we swapped date_begin and date_end, so we need to correct for the','line_number':390,'multiline':False]['text':' original date_end that should not be included. gh-23197','line_number':391,'multiline':False]['text':' Remove any earlier holidays ','line_number':396,'multiline':True]['text':' Remove any later holidays ','line_number':399,'multiline':True]['text':' Start the count as negative the number of holidays in the range ','line_number':403,'multiline':True]['text':' Add the whole weeks between date_begin and date_end ','line_number':406,'multiline':True]['text':' Get the day of the week for 'date_begin' ','line_number':412,'multiline':True]['text':' Count the remaining days one by one ','line_number':415,'multiline':True]['text':'
 * Applies the given offsets in business days to the dates provided.
 * This is the low-level function which requires already cleaned input
 * data.
 *
 * dates:    An array of dates with 'datetime64[D]' data type.
 * offsets:  An array safely convertible into type int64.
 * out:      Either NULL, or an array with 'datetime64[D]' data type
 *              in which to place the resulting dates.
 * roll:     A rule for how to treat non-business day dates.
 * weekmask: A 7-element boolean mask, 1 for possible business days and 0
 *              for non-business days.
 * busdays_in_weekmask: A count of how many 1's there are in weekmask.
 * holidays_begin/holidays_end: A sorted list of dates matching '[D]'
 *           unit metadata, with any dates falling on a day of the
 *           week without weekmask[i] == 1 already filtered out.
 *
 * For each (date, offset) in the broadcasted pair of (dates, offsets),
 * does the following:
 *  + Applies the 'roll' rule to the date to either produce NaT, raise
 *    an exception, or land on a valid business day.
 *  + Adds 'offset' business days to the valid business day found.
 *  + Sets the value in 'out' if provided, or the allocated output array
 *    otherwise.
 ','line_number':435,'multiline':True]['text':' First create the data types for dates and offsets ','line_number':483,'multiline':True]['text':' Set up the iterator parameters ','line_number':497,'multiline':True]['text':' Allocate the iterator ','line_number':508,'multiline':True]['text':' Loop over all elements ','line_number':515,'multiline':True]['text':' Get the return object from the iterator ','line_number':555,'multiline':True]['text':'
 * Counts the number of business days between two dates, not including
 * the end date. This is the low-level function which requires already
 * cleaned input data.
 *
 * If dates_begin is before dates_end, the result is positive.  If
 * dates_begin is after dates_end, it is negative.
 *
 * dates_begin:  An array of dates with 'datetime64[D]' data type.
 * dates_end:    An array of dates with 'datetime64[D]' data type.
 * out:      Either NULL, or an array with 'int64' data type
 *              in which to place the resulting dates.
 * weekmask: A 7-element boolean mask, 1 for possible business days and 0
 *              for non-business days.
 * busdays_in_weekmask: A count of how many 1's there are in weekmask.
 * holidays_begin/holidays_end: A sorted list of dates matching '[D]'
 *           unit metadata, with any dates falling on a day of the
 *           week without weekmask[i] == 1 already filtered out.
 ','line_number':578,'multiline':True]['text':' First create the data types for the dates and the int64 output ','line_number':619,'multiline':True]['text':' Set up the iterator parameters ','line_number':633,'multiline':True]['text':' Allocate the iterator ','line_number':644,'multiline':True]['text':' Loop over all elements ','line_number':651,'multiline':True]['text':' Get the return object from the iterator ','line_number':690,'multiline':True]['text':'
 * Returns a boolean array with True for input dates which are valid
 * business days, and False for dates which are not. This is the
 * low-level function which requires already cleaned input data.
 *
 * dates:  An array of dates with 'datetime64[D]' data type.
 * out:      Either NULL, or an array with 'bool' data type
 *              in which to place the resulting dates.
 * weekmask: A 7-element boolean mask, 1 for possible business days and 0
 *              for non-business days.
 * busdays_in_weekmask: A count of how many 1's there are in weekmask.
 * holidays_begin/holidays_end: A sorted list of dates matching '[D]'
 *           unit metadata, with any dates falling on a day of the
 *           week without weekmask[i] == 1 already filtered out.
 ','line_number':713,'multiline':True]['text':' First create the data types for the dates and the bool output ','line_number':749,'multiline':True]['text':' Set up the iterator parameters ','line_number':761,'multiline':True]['text':' Allocate the iterator ','line_number':770,'multiline':True]['text':' Loop over all elements ','line_number':777,'multiline':True]['text':' Check if it's a business day ','line_number':802,'multiline':True]['text':' Get the return object from the iterator ','line_number':816,'multiline':True]['text':' Make obj into an UTF8 string ','line_number':843,'multiline':True]['text':' accept bytes input ','line_number':845,'multiline':True]['text':' Use switch statements to quickly isolate the right enum value ','line_number':863,'multiline':True]['text':'
 * This is the 'busday_offset' function exposed for calling
 * from Python.
 ','line_number':934,'multiline':True]['text':' Make sure only one of the weekmask/holidays and busdaycal is supplied ','line_number':967,'multiline':True]['text':' Indicate that the holidays weren't allocated by us ','line_number':976,'multiline':True]['text':' Copy the private normalized weekmask/holidays data ','line_number':979,'multiline':True]['text':'
         * Fix up the weekmask from the uninitialized
         * signal value to a proper default.
         ','line_number':985,'multiline':True]['text':' Count the number of business days in a week ','line_number':993,'multiline':True]['text':' The holidays list must be normalized before using it ','line_number':999,'multiline':True]['text':' Make 'dates' into an array ','line_number':1003,'multiline':True]['text':' Use the datetime dtype with generic units so it fills it in ','line_number':1011,'multiline':True]['text':' This steals the datetime_dtype reference ','line_number':1017,'multiline':True]['text':' Make 'offsets' into an array ','line_number':1025,'multiline':True]['text':' Make sure 'out' is an array if it's provided ','line_number':1033,'multiline':True]['text':'
 * This is the 'busday_count' function exposed for calling
 * from Python.
 ','line_number':1065,'multiline':True]['text':' Make sure only one of the weekmask/holidays and busdaycal is supplied ','line_number':1096,'multiline':True]['text':' Indicate that the holidays weren't allocated by us ','line_number':1105,'multiline':True]['text':' Copy the private normalized weekmask/holidays data ','line_number':1108,'multiline':True]['text':'
         * Fix up the weekmask from the uninitialized
         * signal value to a proper default.
         ','line_number':1114,'multiline':True]['text':' Count the number of business days in a week ','line_number':1122,'multiline':True]['text':' The holidays list must be normalized before using it ','line_number':1128,'multiline':True]['text':' Make 'dates_begin' into an array ','line_number':1132,'multiline':True]['text':' Use the datetime dtype with generic units so it fills it in ','line_number':1140,'multiline':True]['text':' This steals the datetime_dtype reference ','line_number':1146,'multiline':True]['text':' Make 'dates_end' into an array ','line_number':1155,'multiline':True]['text':' Use the datetime dtype with generic units so it fills it in ','line_number':1163,'multiline':True]['text':' This steals the datetime_dtype reference ','line_number':1169,'multiline':True]['text':' Make sure 'out' is an array if it's provided ','line_number':1178,'multiline':True]['text':'
 * This is the 'is_busday' function exposed for calling
 * from Python.
 ','line_number':1210,'multiline':True]['text':' Make sure only one of the weekmask/holidays and busdaycal is supplied ','line_number':1240,'multiline':True]['text':' Indicate that the holidays weren't allocated by us ','line_number':1249,'multiline':True]['text':' Copy the private normalized weekmask/holidays data ','line_number':1252,'multiline':True]['text':'
         * Fix up the weekmask from the uninitialized
         * signal value to a proper default.
         ','line_number':1258,'multiline':True]['text':' Count the number of business days in a week ','line_number':1266,'multiline':True]['text':' The holidays list must be normalized before using it ','line_number':1272,'multiline':True]['text':' Make 'dates' into an array ','line_number':1276,'multiline':True]['text':' Use the datetime dtype with generic units so it fills it in ','line_number':1284,'multiline':True]['text':' This steals the datetime_dtype reference ','line_number':1290,'multiline':True]['text':' Make sure 'out' is an array if it's provided ','line_number':1299,'multiline':True]