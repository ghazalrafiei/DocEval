['text':' for npy_mul_sizes_with_overflow ','line_number':13,'multiline':True]['text':' for npy_bswap8 ','line_number':14,'multiline':True]['text':'
 * Returns -1 if the array is monotonic decreasing,
 * +1 if the array is monotonic increasing,
 * and 0 if the array is not monotonic.
 ','line_number':27,'multiline':True]['text':' all bin edges hold the same value ','line_number':40,'multiline':True]['text':' Skip repeated values at the beginning of the array ','line_number':45,'multiline':True]['text':' all bin edges hold the same value ','line_number':49,'multiline':True]['text':' Possibly monotonic increasing ','line_number':55,'multiline':True]['text':' last > next, possibly monotonic decreasing ','line_number':66,'multiline':True]['text':' Find the minimum and maximum of an integer array ','line_number':78,'multiline':True]['text':'
 * arr_bincount is registered as bincount.
 *
 * bincount accepts one, two or three arguments. The first is an array of
 * non-negative integers The second, if present, is an array of weights,
 * which must be promotable to double. Call these arguments list and
 * weight. Both must be one-dimensional with len(weight) == len(list). If
 * weight is not present then bincount(list)[i] is the number of occurrences
 * of i in list.  If weight is present then bincount(self,list, weight)[i]
 * is the sum of all weight[j] where list [j] == i.  Self is not used.
 * The third argument, if present, is a minimum length desired for the
 * output array.
 ','line_number':99,'multiline':True]['text':'
     * This if/else if can be removed by changing the argspec to O|On above,
     * once we retire the deprecation
     ','line_number':138,'multiline':True]['text':' NumPy 1.14, 2017-06-01 ','line_number':143,'multiline':True]['text':' handle empty list ','line_number':162,'multiline':True]['text':' Internal function to expose check_array_monotonic to python ','line_number':231,'multiline':True]['text':'
     * TODO:
     *  `x` could be strided, needs change to check_array_monotonic
     *  `x` is forced to double for this check
     ','line_number':247,'multiline':True]['text':'
 * Returns input array with values inserted sequentially into places
 * indicated by the mask
 ','line_number':268,'multiline':True]['text':' zero if null array ','line_number':325,'multiline':True]['text':'* @brief find index of a sorted array such that arr[i] <= key < arr[i + 1].
 *
 * If an starting index guess is in-range, the array values around this
 * index are first checked.  This allows for repeated calls for well-ordered
 * keys (a very common case) to use the previous index as a very good guess.
 *
 * If the guess value is not useful, bisection of the array is used to
 * find the index.  If there is no such index, the return values are:
 *     key < arr[0] -- -1
 *     key == arr[len - 1] -- len - 1
 *     key > arr[len - 1] -- len
 * The array is assumed contiguous and sorted in ascending order.
 *
 * @param key key value.
 * @param arr contiguous sorted array to be searched.
 * @param len length of the array.
 * @param guess initial guess of index
 * @return index
 ','line_number':395,'multiline':True]['text':' Handle keys outside of the arr range first ','line_number':421,'multiline':True]['text':'
     * If len <= 4 use linear search.
     * From above we know key >= arr[0] when we start.
     ','line_number':429,'multiline':True]['text':' check most likely values: guess - 1, guess, guess + 1 ','line_number':444,'multiline':True]['text':' last attempt to restrict search to items in cache ','line_number':448,'multiline':True]['text':' key >= arr[guess - 1] ','line_number':455,'multiline':True]['text':' key >= arr[guess] ','line_number':460,'multiline':True]['text':' key >= arr[guess + 1] ','line_number':465,'multiline':True]['text':' key >= arr[guess + 2] ','line_number':470,'multiline':True]['text':' last attempt to restrict search to items in cache ','line_number':472,'multiline':True]['text':' finally, find index by bisection ','line_number':481,'multiline':True]['text':' Get left and right fill values. ','line_number':557,'multiline':True]['text':' binary_search_with_guess needs at least a 3 item long array ','line_number':577,'multiline':True]['text':' only pre-calculate slopes if there are relatively few of them. ','line_number':593,'multiline':True]['text':' Avoid potential non-finite interpolation ','line_number':629,'multiline':True]['text':' If we get nan in one direction, try the other ','line_number':637,'multiline':True]['text':' As for arr_interp but for complex fp values ','line_number':665,'multiline':True]['text':' Get left and right fill values. ','line_number':732,'multiline':True]['text':' binary_search_with_guess needs at least a 3 item long array ','line_number':761,'multiline':True]['text':' only pre-calculate slopes if there are relatively few of them. ','line_number':777,'multiline':True]['text':' Avoid potential non-finite interpolation ','line_number':816,'multiline':True]['text':' If we get nan in one direction, try the other ','line_number':830,'multiline':True]['text':' Convert obj to an ndarray with integer dtype or fail ','line_number':873,'multiline':True]['text':' prefer int dtype ','line_number':879,'multiline':True]['text':' ensure dtype is int-based ','line_number':901,'multiline':True]['text':'
 * Converts a Python sequence into 'count' PyArrayObjects
 *
 * seq         - Input Python object, usually a tuple but any sequence works.
 *               Must have integral content.
 * paramname   - The name of the parameter that produced 'seq'.
 * count       - How many arrays there should be (errors if it doesn't match).
 * op          - Where the arrays are placed.
 ','line_number':910,'multiline':True]['text':' Inner loop for ravel_multi_index ','line_number':956,'multiline':True]['text':'
     * Check for 0-dimensional axes unless there is nothing to do.
     * An empty array/shape cannot be indexed at all.
     ','line_number':968,'multiline':True]['text':' ravel_multi_index implementation - see add_newdocs.py ','line_number':1040,'multiline':True]['text':' Get the multi_index into op ','line_number':1113,'multiline':True]['text':'
 * Inner loop for unravel_index
 * order must be NPY_CORDER or NPY_FORTRANORDER
 ','line_number':1185,'multiline':True]['text':' NPY_KEEPORDER or NPY_ANYORDER have no meaning in this setting ','line_number':1202,'multiline':True]['text':'
             * Using a local seems to enable single-divide optimization
             * but only if the / precedes the %
             ','line_number':1212,'multiline':True]['text':' unravel_index implementation - see add_newdocs.py ','line_number':1236,'multiline':True]['text':'
     * Create the return array with a layout compatible with the indices
     * and with a dimension added to the end for the multi-index
     ','line_number':1293,'multiline':True]['text':' Remove the multi-index and inner loop ','line_number':1308,'multiline':True]['text':'
         * There's no index meaning "take the only element 10 times"
         * on a zero-d array, so we have no choice but to error. (See gh-580)
         *
         * Do this check after iterating, so we give a better error message
         * for invalid indices.
         ','line_number':1356,'multiline':True]['text':' Now make a tuple of views, one per index ','line_number':1368,'multiline':True]['text':' Can only be called if doc is currently NULL ','line_number':1405,'multiline':True]['text':' Don't add docstrings ','line_number':1414,'multiline':True]['text':' borrowed object ','line_number':1418,'multiline':True]['text':' hold on to string (leaks reference) ','line_number':1451,'multiline':True]['text':'
         * We add it to both `tp_doc` and `__doc__` here.  Note that in theory
         * `tp_doc` extracts the signature line, but we currently do not use
         * it.  It may make sense to only add it as `__doc__` and
         * `__text_signature__` to the dict in the future.
         * The dictionary path is only necessary for heaptypes (currently not
         * used) and metaclasses.
         * If `__doc__` as stored in `tp_dict` is None, we assume this was
         * filled in by `PyType_Ready()` and should also be replaced.
         ','line_number':1463,'multiline':True]['text':' Warning: Modifying `tp_dict` is not generally safe! ','line_number':1477,'multiline':True]['text':' error during PyUnicode_Compare ','line_number':1503,'multiline':True]['text':'
 * This function packs boolean values in the input array into the bits of a
 * byte array. Truth values are determined as usual: 0 is false, everything
 * else is true.
 ','line_number':1524,'multiline':True]['text':' in bytes ','line_number':1531,'multiline':True]['text':'
     * Loop through the elements of inptr.
     * Determine whether or not it is nonzero.
     *  Yes: set corresponding bit (and adjust build value)
     *  No:  move on
     * Every 8th value, set the value of build and increment the outptr
     ','line_number':1539,'multiline':True]['text':' uneven bits ','line_number':1547,'multiline':True]['text':' don't handle non-full 8-byte remainder ','line_number':1552,'multiline':True]['text':' assumes n_in > 0 ','line_number':1611,'multiline':True]['text':' Don't reset index. Just handle remainder of above block ','line_number':1614,'multiline':True]['text':' Setup output shape ','line_number':1701,'multiline':True]['text':'
     * Divide axis dimension by 8
     * 8 -> 1, 9 -> 2, 16 -> 2, 17 -> 3 etc..
     ','line_number':1706,'multiline':True]['text':' Create output array ','line_number':1712,'multiline':True]['text':' Setup iterators to iterate over all but given axis ','line_number':1720,'multiline':True]['text':'
     * lookuptable for bitorder big as it has been around longer
     * bitorder little is handled via byteswapping in the loop
     ','line_number':1757,'multiline':True]['text':' Handle 0-d array by converting it to a 1-d array ','line_number':1793,'multiline':True]['text':' Setup output shape ','line_number':1807,'multiline':True]['text':' Multiply axis dimension by 8 ','line_number':1812,'multiline':True]['text':' Create output array ','line_number':1832,'multiline':True]['text':' Setup iterators to iterate over all but given axis ','line_number':1841,'multiline':True]['text':'
     * setup lookup table under GIL, 256 8 byte blocks representing 8 bits
     * expanded to 1/0 bytes
     ','line_number':1850,'multiline':True]['text':' for unity stride we can just copy out of the lookup table ','line_number':1889,'multiline':True]['text':' Clean up the tail portion ','line_number':1909,'multiline':True]['text':' Add padding ','line_number':1917,'multiline':True]['text':' Clean up the tail portion ','line_number':1931,'multiline':True]['text':' Clean up the tail portion ','line_number':1945,'multiline':True]['text':' Add padding ','line_number':1951,'multiline':True]