['text':'
  Python Multiarray Module -- A useful collection of functions for creating and
  using ndarrays

  Original file
  Copyright (c) 1995, 1996, 1997 Jim Hugunin, hugunin@mit.edu

  Modified for numpy in 2005

  Travis E. Oliphant
  oliphant@ee.byu.edu
  Brigham Young University
','line_number':1,'multiline':True]['text':' Internal APIs ','line_number':36,'multiline':True]['text':' for npy_mul_sizes_with_overflow ','line_number':68,'multiline':True]['text':' for PyArray_AssignZero ','line_number':71,'multiline':True]['text':' _get_experimental_dtype_api ','line_number':76,'multiline':True]['text':' _readtext_from_file_object ','line_number':77,'multiline':True]['text':'
 *****************************************************************************
 **                    INCLUDE GENERATED CODE                               **
 *****************************************************************************
 ','line_number':83,'multiline':True]['text':' __ufunc_api.c define is the PyUFunc_API table: ','line_number':88,'multiline':True]['text':' in ufunc_object.c ','line_number':92,'multiline':True]['text':' From umath/string_ufuncs.cpp/h ','line_number':93,'multiline':True]['text':'
 * global variable to determine if legacy printing is enabled, accessible from
 * C. For simplicity the mode is encoded as an integer where INT_MAX means no
 * legacy mode, and '113'/'121' means 1.13/1.21 legacy mode; and 0 maps to
 * INT_MAX. We can upgrade this if we have more complex requirements in the
 * future.
 ','line_number':98,'multiline':True]['text':'NUMPY_API
 * Get Priority from object
 ','line_number':121,'multiline':True]['text':' TODO[gh-14801]: propagate crashes during attribute access? ','line_number':140,'multiline':True]['text':' TODO[gh-14801]: propagate crashes for bad priority? ','line_number':149,'multiline':True]['text':'NUMPY_API
 * Multiply a List of ints
 ','line_number':156,'multiline':True]['text':'NUMPY_API
 * Multiply a List
 ','line_number':170,'multiline':True]['text':'NUMPY_API
 * Multiply a List of Non-negative numbers with over-flow detection.
 ','line_number':184,'multiline':True]['text':'NUMPY_API
 * Produce a pointer into array
 ','line_number':206,'multiline':True]['text':'NUMPY_API
 * Compare Lists
 ','line_number':222,'multiline':True]['text':'
 * simulates a C-style 1-3 dimensional array which can be accessed using
 * ptr[i]  or ptr[i][j] or ptr[i][j][k] -- requires pointer allocation
 * for 2-d and 3-d.
 *
 * For 2-d and up, ptr is NOT equivalent to a statically defined
 * 2-d or 3-d array.  In particular, it cannot be passed into a
 * function that requires a true pointer to a fixed-size array.
 ','line_number':238,'multiline':True]['text':'NUMPY_API
 * Simulate a C-array
 * steals a reference to typedescr -- can be NULL
 ','line_number':248,'multiline':True]['text':'NUMPY_API
 * Free pointers created if As2D is called
 ','line_number':311,'multiline':True]['text':'
 * Get the ndarray subclass with the highest priority
 ','line_number':329,'multiline':True]['text':' Get the priority subtype for the array ','line_number':338,'multiline':True]['text':'
 * Concatenates a list of ndarrays.
 ','line_number':353,'multiline':True]['text':' All the arrays must have the same 'ndim' ','line_number':371,'multiline':True]['text':' Handle standard Python negative indexing ','line_number':380,'multiline':True]['text':'
     * Figure out the final concatenated shape starting from the first
     * array's shape.
     ','line_number':385,'multiline':True]['text':' Build up the size of the concatenation axis ','line_number':405,'multiline':True]['text':' Validate that the rest of the dimensions match ','line_number':409,'multiline':True]['text':' Get the priority subtype for the array ','line_number':440,'multiline':True]['text':'
         * Figure out the permutation to apply to the strides to match
         * the memory layout of the input arrays, using ambiguity
         * resolution rules matching that of the NpyIter.
         ','line_number':448,'multiline':True]['text':' Allocate the array for the result. This steals the 'dtype' reference. ','line_number':461,'multiline':True]['text':'
     * Create a view which slides through ret for assigning the
     * successive input arrays.
     ','line_number':471,'multiline':True]['text':' Set the dimension to match the input array's ','line_number':482,'multiline':True]['text':' Copy the data for this array ','line_number':485,'multiline':True]['text':' Slide to the start of the next window ','line_number':493,'multiline':True]['text':'
 * Concatenates a list of ndarrays, flattening each in the specified order.
 ','line_number':502,'multiline':True]['text':'
     * Figure out the final concatenated shape starting from the first
     * array's shape.
     ','line_number':521,'multiline':True]['text':' Check for overflow ','line_number':527,'multiline':True]['text':' Get the priority subtype for the array ','line_number':555,'multiline':True]['text':' Allocate the array for the result. This steals the 'dtype' reference. ','line_number':566,'multiline':True]['text':'
     * Create a view which slides through ret for assigning the
     * successive input arrays.
     ','line_number':576,'multiline':True]['text':' To give warning for just one input array. ','line_number':587,'multiline':True]['text':' Adjust the window dimensions for this array ','line_number':589,'multiline':True]['text':' This should be an error, but was previously allowed here. ','line_number':594,'multiline':True]['text':' NumPy 1.20, 2020-09-03 ','line_number':596,'multiline':True]['text':' Copy the data for this array ','line_number':618,'multiline':True]['text':' Slide to the start of the next window ','line_number':626,'multiline':True]['text':'*
 * Implementation for np.concatenate
 *
 * @param op Sequence of arrays to concatenate
 * @param axis Axis to concatenate along
 * @param ret output array to fill
 * @param dtype Forced output array dtype (cannot be combined with ret)
 * @param casting Casting mode used
 * @param casting_not_passed Deprecation helper
 ','line_number':636,'multiline':True]['text':' Convert the input list into arrays ','line_number':666,'multiline':True]['text':' 'narrays' was set to how far we got in the conversion ','line_number':710,'multiline':True]['text':'NUMPY_API
 * Concatenate
 *
 * Concatenate an arbitrary Python sequence into an array.
 * op is a python object supporting the sequence interface.
 * Its elements will be concatenated together to form a single
 * multidimensional array. If axis is NPY_MAXDIMS or bigger, then
 * each sequence object will be flattened before concatenation
','line_number':719,'multiline':True]['text':' retain legacy behaviour for casting ','line_number':731,'multiline':True]['text':' points to the npy_byte to test ','line_number':747,'multiline':True]['text':'NUMPY_API
 * ScalarKind
 *
 * Returns the scalar kind of a type number, with an
 * optional tweak based on the scalar value itself.
 * If no scalar is provided, it returns INTPOS_SCALAR
 * for both signed and unsigned integers, otherwise
 * it checks the sign of any signed integer to choose
 * INTNEG_SCALAR when appropriate.
 ','line_number':764,'multiline':True]['text':' Signed integer types are INTNEG in the table ','line_number':781,'multiline':True]['text':'NUMPY_API
 *
 * Determines whether the data type 'thistype', with
 * scalar kind 'scalar', can be coerced into 'neededtype'.
 ','line_number':799,'multiline':True]['text':' If 'thistype' is not a scalar, it must be safely castable ','line_number':811,'multiline':True]['text':'
         * The lookup table gives us exactly what we need for
         * this comparison, which PyArray_ScalarKind would not.
         *
         * The rule is that positive scalars can be coerced
         * to a signed ints, but negative scalars cannot be coerced
         * to unsigned ints.
         *   _npy_scalar_kinds_table[int]==NEGINT > POSINT,
         *      so 1 is returned, but
         *   _npy_scalar_kinds_table[uint]==POSINT < NEGINT,
         *      so 0 is returned, as required.
         *
         ','line_number':822,'multiline':True]['text':' Could perhaps be redone to not make contiguous arrays ','line_number':859,'multiline':True]['text':'NUMPY_API
 * Numeric.innerproduct(a,v)
 ','line_number':861,'multiline':True]['text':'NUMPY_API
 * Numeric.matrixproduct(a,v)
 * just like inner product but does the swapaxes stuff on the fly
 ','line_number':945,'multiline':True]['text':'NUMPY_API
 * Numeric.matrixproduct2(a,v,out)
 * just like inner product but does the swapaxes stuff on the fly
 ','line_number':955,'multiline':True]['text':' Choose which subtype to return ','line_number':1049,'multiline':True]['text':' Ensure that multiarray.dot(<Nx0>,<0xM>) -> zeros((N,M)) ','line_number':1054,'multiline':True]['text':' only for OBJECT arrays ','line_number':1096,'multiline':True]['text':' Trigger possible copy-back into `result` ','line_number':1102,'multiline':True]['text':'
 * Implementation which is common between PyArray_Correlate
 * and PyArray_Correlate2.
 *
 * inverted is set to 1 if computed correlate(ap2, ap1), 0 otherwise
 ','line_number':1117,'multiline':True]['text':'
     * Need to choose an output array that can hold a sum
     * -- use priority to determine which subtype.
     ','line_number':1180,'multiline':True]['text':'
 * Revert a one dimensional array in-place
 *
 * Return 0 on success, other value on failure
 ','line_number':1241,'multiline':True]['text':' Optimization for unstructured dtypes ','line_number':1256,'multiline':True]['text':' First reverse the whole array byte by byte... ','line_number':1259,'multiline':True]['text':' ...then swap in place every item ','line_number':1265,'multiline':True]['text':'NUMPY_API
 * correlate(a1,a2,mode)
 *
 * This function computes the usual correlation (correlate(a1, a2) !=
 * correlate(a2, a1), and conjugate the second argument for complex inputs
 ','line_number':1288,'multiline':True]['text':'
     * If we inverted input orders, we need to reverse the output array (i.e.
     * ret = ret[::-1])
     ','line_number':1341,'multiline':True]['text':'NUMPY_API
 * Numeric.correlate(a1,a2,mode)
 ','line_number':1365,'multiline':True]['text':'NUMPY_API
 *
 * This function returns true if the two typecodes are
 * equivalent (same basic kind and same itemsize).
 ','line_number':1438,'multiline':True]['text':'
         * 2021-12-17: This case is nonsense and should be removed eventually!
         *
         * boost::python has/had a bug effectively using EquivTypes with
         * `type(arbitrary_obj)`.  That is clearly wrong as that cannot be a
         * `PyArray_Descr *`.  We assume that `type(type(type(arbitrary_obj))`
         * is always in practice `type` (this is the type of the metaclass),
         * but for our descriptors, `type(type(descr))` is DTypeMeta.
         *
         * In that case, we just return False.  There is a possibility that
         * this actually _worked_ effectively (returning 1 sometimes).
         * We ignore that possibility for simplicity; it really is not our bug.
         ','line_number':1451,'multiline':True]['text':'
     * Do not use PyArray_CanCastTypeTo because it supports legacy flexible
     * dtypes as input.
     ','line_number':1467,'multiline':True]['text':' If casting is "no casting" this dtypes are considered equivalent. ','line_number':1477,'multiline':True]['text':'NUMPY_API','line_number':1482,'multiline':True]['text':'** END C-API FUNCTIONS *','line_number':1501,'multiline':True]['text':'
 * NOTE: The order specific stride setting is not necessary to preserve
 *       contiguity and could be removed.  However, this way the resulting
 *       strides strides look better for fortran order inputs.
 ','line_number':1502,'multiline':True]['text':' Hold on to `in_descr` as `dtype`, since we may also set it below. ','line_number':1561,'multiline':True]['text':' fast exit if simple call ','line_number':1571,'multiline':True]['text':'
             * User did not ask for a specific dtype instance or class. So
             * we can return either self or a copy.
             ','line_number':1576,'multiline':True]['text':'
             * If the user passed a DType class but not a dtype instance,
             * we must use `PyArray_AdaptDescriptorToArray` to find the
             * correct dtype instance.
             * Even if the fast-path doesn't work we will use this.
             ','line_number':1596,'multiline':True]['text':' One more chance for faster exit if user specified the dtype. ','line_number':1608,'multiline':True]['text':' Create a new PyArrayObject from the caller's
                     * PyArray_Descr. Use the reference `op` as the base
                     * object. ','line_number':1617,'multiline':True]['text':' order == NPY_ANYORDER && ','line_number':1663,'multiline':True]['text':'
     * create a new array from the same data with ones in the shape
     * steals a reference to ret
     ','line_number':1688,'multiline':True]['text':' Fast path for symmetry (we copy by default which is slow) ','line_number':1736,'multiline':True]['text':' Get the boolean where mask ','line_number':1933,'multiline':True]['text':' -1 is a special value meaning "not specified" ','line_number':2027,'multiline':True]['text':' steals the reference to dt_info.descr if it's not NULL ','line_number':2041,'multiline':True]['text':'
 * This function is needed for supporting Pickles of
 * numpy scalar objects.
 ','line_number':2061,'multiline':True]['text':' Deprecated 2020-11-24, NumPy 1.20 ','line_number':2083,'multiline':True]['text':' We store the full array to unpack it here: ','line_number':2094,'multiline':True]['text':' We pickle structured voids as arrays currently ','line_number':2096,'multiline':True]['text':' Backward compatibility with Python 2 NumPy pickles ','line_number':2131,'multiline':True]['text':' More informative error message ','line_number':2136,'multiline':True]['text':' free dptr which contains zeros ','line_number':2161,'multiline':True]['text':' binary mode, condition copied from PyArray_FromString ','line_number':2274,'multiline':True]['text':' Numpy 1.14, 2017-10-19 ','line_number':2276,'multiline':True]['text':' If an exception is thrown in the call to PyArray_FromFile
     * we need to clear it, and restore it later to ensure that
     * we can cleanup the duplicated file descriptor properly.
     ','line_number':2357,'multiline':True]['text':'
         * Casting was not passed in, needed for deprecation only.
         * This should be simplified once the deprecation is finished.
         ','line_number':2463,'multiline':True]['text':'
     * Conjugating dot product using the BLAS for vectors.
     * Flattens both op1 and op2 before dotting.
     ','line_number':2556,'multiline':True]['text':' array scalar output ','line_number':2602,'multiline':True]['text':' Get the subscripts string ','line_number':2675,'multiline':True]['text':' Set the operands to NULL ','line_number':2692,'multiline':True]['text':' Get the operands ','line_number':2697,'multiline':True]['text':'
 * Converts a list of subscripts to a string.
 *
 * Returns -1 on error, the number of characters placed in subscripts
 * otherwise.
 ','line_number':2718,'multiline':True]['text':' Ellipsis ','line_number':2740,'multiline':True]['text':' Subscript ','line_number':2759,'multiline':True]['text':' Invalid ','line_number':2762,'multiline':True]['text':'
 * Fills in the subscripts, with maximum size subsize, and op,
 * with the values in the tuple 'args'.
 *
 * Returns -1 on error, number of operands placed in op otherwise.
 ','line_number':2807,'multiline':True]['text':' Set the operands to NULL ','line_number':2832,'multiline':True]['text':' Get the operands and build the subscript string ','line_number':2837,'multiline':True]['text':' Comma between the subscripts for each operand ','line_number':2842,'multiline':True]['text':' Add the '->' to the string if provided ','line_number':2866,'multiline':True]['text':' NULL-terminate the subscripts string ','line_number':2888,'multiline':True]['text':' einsum('i,j', a, b), einsum('i,j->ij', a, b) ','line_number':2925,'multiline':True]['text':' einsum(a, [0], b, [1]), einsum(a, [0], b, [1], [0,1]) ','line_number':2929,'multiline':True]['text':' Get the keyword arguments ','line_number':2939,'multiline':True]['text':' If no output was supplied, possibly convert to a scalar ','line_number':2998,'multiline':True]['text':' out is a borrowed reference ','line_number':3010,'multiline':True]['text':'NUMPY_API
 *
 * Included at the very first so not auto-grabbed and thus not labeled.
 ','line_number':3099,'multiline':True]['text':'NUMPY_API
 * Returns the built-in (at compilation time) C API version
 ','line_number':3109,'multiline':True]['text':'NUMPY_API
','line_number':3125,'multiline':True]['text':' reset the array_repr function to built-in ','line_number':3195,'multiline':True]['text':'
 * inner loop with constant size memcpy arguments
 * this allows the compiler to replace function calls while still handling the
 * alignment requirements of the platform.
 ','line_number':3217,'multiline':True]['text':'NUMPY_API
 * Where
 ','line_number':3240,'multiline':True]['text':' `PyArray_DescrFromType` cannot fail for simple builtin types: ','line_number':3294,'multiline':True]['text':' Get the result from the iterator object array ','line_number':3308,'multiline':True]['text':' The iterator has NPY_ITER_ALIGNED flag so no need to check alignment','line_number':3322,'multiline':False]['text':' of the input arrays.','line_number':3323,'multiline':False]['text':'','line_number':3324,'multiline':False]['text':' There's also no need to set up a cast for y, since the iterator','line_number':3325,'multiline':False]['text':' ensures both casts are identical.','line_number':3326,'multiline':False]['text':' the iterator might mutate these pointers,','line_number':3354,'multiline':False]['text':' so need to update them every iteration','line_number':3355,'multiline':False]['text':' constant sizes so compiler replaces memcpy ','line_number':3360,'multiline':True]['text':' If the first parameter is an object or scalar, use CanCastArrayTo ','line_number':3492,'multiline':True]['text':' Otherwise use CanCastTypeTo ','line_number':3513,'multiline':True]['text':'
             * Mark array if it was a python scalar (we do not need the actual
             * DType here yet, this is figured out inside ResultType.
             ','line_number':3615,'multiline':True]['text':'
 * Prints floating-point scalars using the Dragon4 algorithm, scientific mode.
 * See docstring of `np.format_float_scientific` for description of arguments.
 * The differences is that a value of -1 is valid for pad_left, exp_digits,
 * precision, which is equivalent to `None`.
 ','line_number':3701,'multiline':True]['text':'
 * Prints floating-point scalars using the Dragon4 algorithm, positional mode.
 * See docstring of `np.format_float_positional` for description of arguments.
 * The differences is that a value of -1 is valid for pad_left, pad_right,
 * precision, which is equivalent to `None`.
 ','line_number':3743,'multiline':True]['text':'
 * returns 1 if array is a user-defined string dtype, sets an error and
 * returns 0 otherwise
 ','line_number':3809,'multiline':True]['text':'
 * The only purpose of this function is that it allows the "rstrip".
 * From my (@seberg's) perspective, this function should be deprecated
 * and I do not think it matters if it is not particularly fast.
 ','line_number':3838,'multiline':True]['text':' Steals ref to arg ','line_number':3987,'multiline':True]['text':'
     * This is a faster version of _vec_string_args to use when there
     * are no additional arguments to the string method.  This doesn't
     * require a broadcast iterator (and broadcast iterators don't work
     * with 1 argument anyway).
     ','line_number':4026,'multiline':True]['text':' Use FromAny to enable checking overlap for objects exposing array
           interfaces etc. ','line_number':4188,'multiline':True]['text':' noop ','line_number':4208,'multiline':True]['text':' Don't know, so say yes ','line_number':4246,'multiline':True]['text':' Don't know, so say yes ','line_number':4260,'multiline':True]['text':' Doesn't happen usually ','line_number':4265,'multiline':True]['text':' No need to give the other warning in a sub-interpreter as well... ','line_number':4351,'multiline':True]['text':' Datetime-related functions ','line_number':4487,'multiline':True]['text':' Datetime business-day API ','line_number':4494,'multiline':True]['text':' from umath ','line_number':4553,'multiline':True]['text':' sentinel ','line_number':4593,'multiline':True]['text':' Establish scalar-type hierarchy
 *
 *  For dual inheritance we need to make sure that the objects being
 *  inherited from have the tp->mro object initialized.  This is
 *  not necessarily true for the basic type objects of Python (it is
 *  checked for single inheritance but not dual in PyType_Ready).
 *
 *  Thus, we call PyType_Ready on the standard Python Types, here.
 ','line_number':4599,'multiline':True]['text':' Datetime doesn't fit in any category ','line_number':4687,'multiline':True]['text':' Timedelta is an integer with an associated unit ','line_number':4689,'multiline':True]['text':'
     * Clean up string and unicode array types so they act more like
     * strings -- get their tables from the standard types.
     ','line_number':4720,'multiline':True]['text':' place a flag dictionary in d ','line_number':4726,'multiline':True]['text':'
 * Initializes global constants.  At some points these need to be cleaned
 * up, and sometimes we also import them where they are needed.  But for
 * some things, adding an `npy_cache_import` everywhere seems inconvenient.
 *
 * These globals should not need the C-layer at all and will be imported
 * before anything on the C-side is initialized.
 ','line_number':4841,'multiline':True]['text':' Initialization function for the module ','line_number':4892,'multiline':True]['text':' Create the module and add the functions ','line_number':4897,'multiline':True]['text':' Initialize CPU features ','line_number':4903,'multiline':True]['text':' Initialize CPU dispatch tracer ','line_number':4907,'multiline':True]['text':' Initialize access to the PyDateTime API ','line_number':4921,'multiline':True]['text':' Add some symbolic constants to the module ','line_number':4928,'multiline':True]['text':'
     * PyExc_Exception should catch all the standard errors that are
     * now raised instead of the string exception "multiarray.error"

     * This is for backward compatibility with existing code.
     ','line_number':5021,'multiline':True]['text':' Business day calendar object ','line_number':5108,'multiline':True]['text':' Finalize scalar types and expose them via namespace or typeinfo dict ','line_number':5113,'multiline':True]['text':'
     * Initialize the default PyDataMem_Handler capsule singleton.
     ','line_number':5145,'multiline':True]['text':'
     * Initialize the context-local current handler
     * with the default PyDataMem_Handler capsule.
     ','line_number':5152,'multiline':True]