['text':'
     * Leak the pyobj if not initialized.  This can happen if we are running
     * exit handlers that are destructing c++ objects with residual (owned)
     * PyObjects stored in them after the Python runtime has already been
     * terminated.
     ','line_number':15,'multiline':True]['text':' This will also free the shape and strides as it's one allocation.','line_number':28,'multiline':False]['text':' This is exactly as mandated by dlpack ','line_number':35,'multiline':True]['text':' an exception may be in-flight, we must save it in case we create another one ','line_number':41,'multiline':True]['text':'
     *  the spec says the deleter can be NULL if there is no way for the caller
     * to provide a reasonable destructor.
     ','line_number':51,'multiline':True]['text':' TODO: is the deleter allowed to set a python exception? ','line_number':57,'multiline':True]['text':' used internally, almost identical to dlpack_capsule_deleter() ','line_number':65,'multiline':True]['text':' an exception may be in-flight, we must save it in case we create another one ','line_number':68,'multiline':True]['text':'
     *  the spec says the deleter can be NULL if there is no way for the caller
     * to provide a reasonable destructor.
     ','line_number':78,'multiline':True]['text':' TODO: is the deleter allowed to set a python exception? ','line_number':84,'multiline':True]['text':' This function cannot return NULL, but it can fail,','line_number':93,'multiline':False]['text':' So call PyErr_Occurred to check if it failed after','line_number':94,'multiline':False]['text':' calling it.','line_number':95,'multiline':False]['text':' walk the bases (see gh-20340)','line_number':103,'multiline':False]['text':' The outer if is due to the fact that NumPy arrays are on the CPU','line_number':108,'multiline':False]['text':' by default (if not created from DLPack).','line_number':109,'multiline':False]['text':' We can't be sure that the dtype is','line_number':184,'multiline':False]['text':' IEEE or padded.','line_number':185,'multiline':False]['text':' We can't be sure that the dtype is','line_number':195,'multiline':False]['text':' IEEE or padded.','line_number':196,'multiline':False]['text':' ensure alignment','line_number':217,'multiline':False]['text':'
     * Note: the `dlpack.h` header suggests/standardizes that `data` must be
     * 256-byte aligned.  We ignore this intentionally, because `__dlpack__`
     * standardizes that `byte_offset` must be 0 (for now) to not break pytorch:
     * https://github.com/data-apis/array-api/issues/293#issuecomment-964111413
     *
     * We further assume that exporting fully unaligned data is OK even without
     * `byte_offset` since the standard does not reject it.
     * Presumably, pytorch will support importing `byte_offset != 0` and NumPy
     * can choose to use it starting about 2023.  At that point, it may be
     * that NumPy MUST use `byte_offset` to adhere to the standard (as
     * specified in the header)!
     ','line_number':228,'multiline':True]['text':' Strides in DLPack are items; in NumPy are bytes.','line_number':253,'multiline':False]['text':' the capsule holds a reference','line_number':274,'multiline':False]['text':' DLPack has elements as stride units, NumPy has bytes.','line_number':389,'multiline':False]