['text':'
 * This file implements an object encapsulating a business day
 * calendar object for accelerating NumPy datetime business day functions.
 *
 * Written by Mark Wiebe (mwwiebe@gmail.com)
 * Copyright (c) 2011 by Enthought, Inc.
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]['text':' Make obj into an UTF8 string ','line_number':33,'multiline':True]['text':' accept bytes input ','line_number':35,'multiline':True]['text':' Length 7 is a string like "1111100" ','line_number':55,'multiline':True]['text':' a string like "SatSun" or "Mon Tue Wed" ','line_number':74,'multiline':True]['text':' Something like [1,1,1,1,1,0,0] ','line_number':148,'multiline':True]['text':'
 * Sorts the array of dates provided in place and removes
 * NaT, duplicates and any date which is already excluded on account
 * of the weekmask.
 *
 * Returns the number of dates left after removing weekmask-excluded
 * dates.
 ','line_number':215,'multiline':True]['text':' Sort the dates ','line_number':233,'multiline':True]['text':' Sweep through the array, eliminating unnecessary values ','line_number':236,'multiline':True]['text':' Skip any NaT or duplicate ','line_number':241,'multiline':True]['text':' Get the day of the week (1970-01-05 is Monday) ','line_number':243,'multiline':True]['text':'
             * If the holiday falls on a possible business day,
             * then keep it.
             ','line_number':249,'multiline':True]['text':' Adjust the end of the holidays array ','line_number':260,'multiline':True]['text':'
 * Converts a Python input into a non-normalized list of holidays.
 *
 * IMPORTANT: This function can't do the normalization, because it doesn't
 *            know the weekmask. You must call 'normalize_holiday_list'
 *            on the result before using it.
 ','line_number':264,'multiline':True]['text':' Make 'dates' into an array ','line_number':278,'multiline':True]['text':' Use the datetime dtype with generic units so it fills it in ','line_number':286,'multiline':True]['text':' This steals the datetime_dtype reference ','line_number':292,'multiline':True]['text':' Allocate the memory for the dates ','line_number':317,'multiline':True]['text':' Cast the data into a raw date array ','line_number':326,'multiline':True]['text':' Start with an empty holidays list ','line_number':354,'multiline':True]['text':' Set the weekmask to the default ','line_number':358,'multiline':True]['text':' Clear the holidays if necessary ','line_number':378,'multiline':True]['text':' Reset the weekmask to the default ','line_number':385,'multiline':True]['text':' Parse the parameters ','line_number':395,'multiline':True]['text':' Count the number of business days in a week ','line_number':403,'multiline':True]['text':' Normalize the holidays list ','line_number':410,'multiline':True]['text':' Clear the holidays ','line_number':426,'multiline':True]['text':' Allocate a 7-element boolean array ','line_number':442,'multiline':True]['text':' Copy the weekmask data ','line_number':448,'multiline':True]['text':' Create a date dtype ','line_number':461,'multiline':True]['text':' Allocate a date array (this steals the date_dtype reference) ','line_number':467,'multiline':True]['text':' Copy the holidays ','line_number':473,'multiline':True]