['text':' Array Descr Object ','line_number':1,'multiline':True]['text':' Do not accidentally delete a statically defined DType: ','line_number':36,'multiline':True]['text':' `other` is guaranteed not to be `self`, so we don't have to do much... ','line_number':76,'multiline':True]['text':'
     * Lets not trust that the DType is implemented correctly
     * TODO: Should probably do an exact type-check (at least unless this is
     *       an abstract DType).
     ','line_number':96,'multiline':True]['text':'
     * Should probably do some more sanity checks here on the descriptor
     * to ensure the user is not being naughty. But in the end, we have
     * only limited control anyway.
     ','line_number':110,'multiline':True]['text':'
 * The descr->f structure used user-DTypes.  Some functions may be filled
 * from the user in the future and more could get defaults for compatibility.
 ','line_number':148,'multiline':True]['text':' Set default values (where applicable) ','line_number':173,'multiline':True]['text':' May need a default for non-parametric? ','line_number':180,'multiline':True]['text':'
         * It is up to the user to get this right, the slots in the public API
         * are sorted exactly like they are stored in the NPY_DT_Slots struct
         * right now:
         ','line_number':205,'multiline':True]['text':' slot > NPY_NUM_DTYPE_SLOTS are PyArray_ArrFuncs','line_number':211,'multiline':False]['text':' invalid type num. Ideally, we get away with it! ','line_number':291,'multiline':True]['text':'
     * Handle the scalar type mapping.
     ','line_number':294,'multiline':True]['text':' Ensure cast dict is defined (not sure we have to do it here) ','line_number':311,'multiline':True]['text':'
     * And now, register all the casts that are currently defined!
     ','line_number':317,'multiline':True]['text':'
         * The user doesn't know the name of DType yet, so we have to fill it
         * in for them!
         ','line_number':327,'multiline':True]['text':' Register the cast! ','line_number':336,'multiline':True]['text':' Also clean up again, so nobody can get bad ideas... ','line_number':339,'multiline':True]['text':'*
 * tp_is_gc slot of Python types. This is implemented only for documentation
 * purposes to indicate and document the subtleties involved.
 *
 * Python Type objects are either statically created (typical C-Extension type)
 * or HeapTypes (typically created in Python).
 * HeapTypes have the Py_TPFLAGS_HEAPTYPE flag and are garbage collected.
 * Our DTypeMeta instances (`np.dtype` and its subclasses) *may* be HeapTypes
 * if the Py_TPFLAGS_HEAPTYPE flag is set (they are created from Python).
 * They are not for legacy DTypes or np.dtype itself.
 *
 * @param self
 * @return nonzero if the object is garbage collected
 ','line_number':354,'multiline':True]['text':'
     * We have to traverse the base class (if it is a HeapType).
     * PyType_Type will handle this logic for us.
     * This function is currently not used, but will probably be necessary
     * in the future when we implement HeapTypes (python/dynamically
     * defined types). It should be revised at that time.
     ','line_number':378,'multiline':True]['text':' TODO: This should allow endianness and possibly metadata ','line_number':397,'multiline':True]['text':' reject parametric ones since we would need to get unit, etc. info ','line_number':399,'multiline':True]['text':' unicode strings are 4 bytes per character','line_number':443,'multiline':False]['text':' If the object is of the correct scalar type return our singleton ','line_number':466,'multiline':True]['text':'
 * For most builtin (and legacy) dtypes, the canonical property means to
 * ensure native byte-order.  (We do not care about metadata here.)
 ','line_number':562,'multiline':True]['text':' Ensure a copy of the singleton (just in case we do adapt it somewhere) ','line_number':579,'multiline':True]['text':'
     * The legacy behaviour for `np.array([], dtype="V")` is to use "V8".
     * This is because `[]` uses `float64` as dtype, and then that is used
     * for the size of the requested void.
     ','line_number':594,'multiline':True]['text':' just return self, no need to modify ','line_number':640,'multiline':True]['text':'
         * This branch is fairly complex, since it needs to build a new
         * descriptor that is in canonical form.  This means that the new
         * descriptor should be an aligned struct if the old one was, and
         * otherwise it should be an unaligned struct.
         * Any unnecessary empty space is stripped from the struct.
         *
         * TODO: In principle we could/should try to provide the identity when
         *       no change is necessary. (Simple if we add a flag.)
         ','line_number':653,'multiline':True]['text':' always needed for field access ','line_number':676,'multiline':True]['text':' Be sure to set all items in the tuple before using it ','line_number':706,'multiline':True]['text':' Reference now owned by new->fields ','line_number':721,'multiline':True]['text':' unstructured voids are always canonical. ','line_number':730,'multiline':True]['text':' If both have fields promoting individual fields may be possible ','line_number':754,'multiline':True]['text':'
         * If it is the same dtype and the container did not change, we might
         * as well preserve identity and metadata.  This could probably be
         * changed.
         ','line_number':792,'multiline':True]['text':'
     * Always accept the common Python types, this ensures that we do not
     * convert pyfloat->float64->integers. Subclasses are hopefully rejected
     * as being discovered.
     * This is necessary only for python scalar classes which we discover
     * as valid DTypes.
     ','line_number':822,'multiline':True]['text':' Convert our scalars (raise on too large unsigned and NaN, etc.) ','line_number':858,'multiline':True]['text':'
     * To be able to identify the descriptor from e.g. any string, datetime
     * must take charge. Otherwise we would attempt casting which does not
     * truly support this. Only object arrays are special cased in this way.
     ','line_number':870,'multiline':True]['text':'
         * TODO: This should likely be deprecated or otherwise resolved.
         *       Deprecation has to occur in `String->setitem` unfortunately.
         *
         * Datetime currently do not cast to shorter strings, but string
         * coercion for arbitrary values uses `str(obj)[:len]` so it works.
         * This means `np.array(np.datetime64("2020-01-01"), "U9")`
         * and `np.array(np.datetime64("2020-01-01")).astype("U9")` behave
         * differently.
         ','line_number':887,'multiline':True]['text':'
 * The following set of functions define the common dtype operator for
 * the builtin types.
 ','line_number':903,'multiline':True]['text':'
         * The abstract complex has a lower priority than the concrete inexact
         * types to ensure the correct promotion with integers.
         ','line_number':912,'multiline':True]['text':'
         * Let the more generic (larger type number) DType handle this
         * (note that half is after all others, which works out here.)
         ','line_number':949,'multiline':True]['text':'
     * Note: The use of the promotion table should probably be revised at
     *       some point. It may be most useful to remove it entirely and then
     *       consider adding a fast path/cache `PyArray_CommonDType()` itself.
     ','line_number':957,'multiline':True]['text':' Not numeric so defer unless cls is unicode and other is string ','line_number':976,'multiline':True]['text':'
     * The builtin types are ordered by complexity (aside from object) here.
     * Arguably, we should not consider numbers and strings "common", but
     * we currently do.
     ','line_number':981,'multiline':True]['text':'
     * Timedelta/datetime shouldn't actually promote at all.  That they
     * currently do means that we need additional hacks in the comparison
     * type resolver.  For comparisons we have to make sure we reject it
     * nicely in order to return an array of True/False values.
     ','line_number':994,'multiline':True]['text':'
         * TODO: We actually currently do allow promotion here. This is
         *       currently relied on within `np.add(datetime, timedelta)`,
         *       while for concatenation the cast step will fail.
         ','line_number':1001,'multiline':True]['text':'
     * The object DType is special in that it can represent everything,
     * including all potential user DTypes.
     * One reason to defer (or error) here might be if the other DType
     * does not support scalars so that e.g. `arr1d[0]` returns a 0-D array
     * and `arr.astype(object)` would fail. But object casts are special.
     ','line_number':1018,'multiline':True]['text':'*
 * This function takes a PyArray_Descr and replaces its base class with
 * a newly created dtype subclass (DTypeMeta instances).
 * There are some subtleties that need to be remembered when doing this,
 * first for the class objects itself it could be either a HeapType or not.
 * Since we are defining the DType from C, we will not make it a HeapType,
 * thus making it identical to a typical *static* type (except that we
 * malloc it). We could do it the other way, but there seems no reason to
 * do so.
 *
 * The DType instances (the actual dtypes or descriptors), are based on
 * prototypes which are passed in. These should not be garbage collected
 * and thus Py_TPFLAGS_HAVE_GC is not set. (We could allow this, but than
 * would have to allocate a new object, since the GC needs information before
 * the actual struct).
 *
 * The above is the reason why we should works exactly like we would for a
 * static type here.
 * Otherwise, we blurry the lines between C-defined extension classes
 * and Python subclasses. e.g. `class MyInt(int): pass` is very different
 * from our `class Float64(np.dtype): pass`, because the latter should not
 * be a HeapType and its instances should be exact PyArray_Descr structs.
 *
 * @param descr The descriptor that should be wrapped.
 * @param name The name for the DType.
 * @param alias A second name which is also set to the new class for builtins
 *              (i.e. `np.types.LongDType` for `np.types.Int64DType`).
 *              Some may have more aliases, as `intp` is not its own thing,
 *              as of writing this, these are not added here.
 *
 * @returns 0 on success, -1 on failure.
 ','line_number':1030,'multiline':True]['text':' Accept if the type was filled in from an existing builtin dtype ','line_number':1069,'multiline':True]['text':'
     * Initialize the struct fields identically to static code by copying
     * a prototype instances for everything except our own fields which
     * vary between the DTypes.
     * In particular any Object initialization must be strictly copied from
     * the untouched prototype to avoid complexities (e.g. with PyPy).
     * Any Type slots need to be fixed before PyType_Ready, although most
     * will be inherited automatically there.
     ','line_number':1103,'multiline':True]['text':' set below ','line_number':1115,'multiline':True]['text':' Further fields are not common between DTypes ','line_number':1128,'multiline':True]['text':' Fix name of the Type','line_number':1131,'multiline':True]['text':' Let python finish the initialization (probably unnecessary) ','line_number':1135,'multiline':True]['text':'
     * Fill DTypeMeta information that varies between DTypes, any variable
     * type information would need to be set before PyType_Ready().
     ','line_number':1146,'multiline':True]['text':' Set default functions (correct for most dtypes, override below) ','line_number':1156,'multiline':True]['text':' Convert our scalars (raise on too large unsigned and NaN, etc.) ','line_number':1168,'multiline':True]['text':' Datetimes are flexible, but were not considered previously ','line_number':1181,'multiline':True]['text':' Finally, replace the current class of the descr ','line_number':1226,'multiline':True]['text':' And it to the types submodule if it is a builtin dtype ','line_number':1229,'multiline':True]['text':'
 * Simple exposed information, defined for each DType (class).
 ','line_number':1268,'multiline':True]['text':' NPY_STRING is the legacy python2 name','line_number':1316,'multiline':False]['text':' Types are garbage collected (see dtypemeta_is_gc documentation) ','line_number':1330,'multiline':True]['text':' set to PyType_Type at import time ','line_number':1336,'multiline':True]