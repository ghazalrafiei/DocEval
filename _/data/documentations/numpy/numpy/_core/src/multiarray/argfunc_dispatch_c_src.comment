['text':' -*- c -*- ','line_number':1,'multiline':True]['text':'@targets
 ** $maxopt baseline
 ** sse2 sse42 xop avx2 avx512_skx
 ** vsx2
 ** neon asimd
 ** vx vxe
 *','line_number':2,'multiline':True]['text':' TODO: add special loop for large SIMD width.','line_number':22,'multiline':False]['text':' i.e avoid unroll by x4 should be numerically safe till 2048-bit SIMD width','line_number':23,'multiline':False]['text':' or maybe expand the indices to 32|64-bit vectors(slower).','line_number':24,'multiline':False]['text':'*begin repeat
 * #sfx = u8, s8, u16, s16#
 * #usfx = u8, u8, u16, u16#
 * #bsfx = b8, b8, b16, b16#
 * #idx_max = NPY_MAX_UINT8*2, NPY_MAX_UINT16*2#
 ','line_number':26,'multiline':True]['text':'*begin repeat1
 * #intrin = cmpgt, cmplt#
 * #func = argmax, argmin#
 * #op = >, <#
 ','line_number':32,'multiline':True]['text':' reverse to put lowest index first in case of matched values','line_number':70,'multiline':False]['text':' reduce','line_number':86,'multiline':False]['text':' get the lowest index in case of matched values','line_number':100,'multiline':False]['text':'*end repeat1*','line_number':117,'multiline':True]['text':'*end repeat*','line_number':118,'multiline':True]['text':'*begin repeat
 * #sfx = u32, s32, u64, s64, f32, f64#
 * #usfx = u32, u32, u64, u64, u32, u64#
 * #bsfx = b32, b32, b64, b64, b32, b64#
 * #is_fp = 0*4, 1*2#
 * #is_idx32 = 1*2, 0*2, 1, 0#
 * #chk_simd = NPY_SIMD*4, NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':121,'multiline':True]['text':'*begin repeat1
 * #intrin = cmpgt, cmplt#
 * #func = argmax, argmin#
 * #op = >, <#
 * #iop = <, >#
 ','line_number':130,'multiline':True]['text':' loop by a scalar will perform better for small arrays','line_number':143,'multiline':False]['text':' guard against wraparound vector addition for 32-bit indices','line_number':148,'multiline':False]['text':' in case of the array length is larger than 16gb','line_number':149,'multiline':False]['text':' create index for vector indices','line_number':155,'multiline':False]['text':' initialize vector accumulator for highest values and its indexes','line_number':164,'multiline':False]['text':' reverse to put lowest index first in case of matched values','line_number':174,'multiline':False]['text':' reduce','line_number':232,'multiline':False]['text':' get the lowest index in case of matched values','line_number':246,'multiline':False]['text':' negated, for correct nan handling','line_number':256,'multiline':False]['text':' nan encountered, it's maximal','line_number':264,'multiline':False]['text':'*end repeat1*','line_number':272,'multiline':True]['text':' chk_simd','line_number':273,'multiline':False]['text':'*end repeat*','line_number':274,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *         BYTE, SHORT, INT, LONG, LONGLONG,
 *         FLOAT, DOUBLE, LONGDOUBLE#
 *
 * #BTYPE = BYTE, SHORT, INT, LONG, LONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          FLOAT, DOUBLE, LONGDOUBLE#
 * #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *         npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *         npy_float, npy_double, npy_longdouble#
 *
 * #is_fp = 0*10, 1*3#
 * #is_unsigned = 1*5, 0*5, 0*3#
 ','line_number':276,'multiline':True]['text':'*begin repeat1
 * #len = 8, 16, 32, 64#
 ','line_number':293,'multiline':True]['text':'*end repeat1*','line_number':310,'multiline':True]['text':'*begin repeat1
 * #func = argmax, argmin#
 * #op = >, <#
 * #iop = <, >#
 ','line_number':313,'multiline':True]['text':' nan encountered; it's maximal|minimal','line_number':323,'multiline':False]['text':' negated, for correct nan handling','line_number':339,'multiline':False]['text':' nan encountered, it's maximal|minimal','line_number':347,'multiline':False]['text':' TO_SIMD_SFX','line_number':353,'multiline':False]['text':'*end repeat1*','line_number':356,'multiline':True]['text':'*end repeat*','line_number':357,'multiline':True]['text':' NPY_SIMD','line_number':389,'multiline':False]