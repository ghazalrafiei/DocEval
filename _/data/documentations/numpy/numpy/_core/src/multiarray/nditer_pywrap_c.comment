['text':'
 * This file implements the CPython wrapper of NpyIter
 *
 * Copyright (c) 2010 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]['text':' Functions not part of the public NumPy C API ','line_number':24,'multiline':True]['text':' The iterator ','line_number':32,'multiline':True]['text':' Flag indicating iteration started/stopped ','line_number':34,'multiline':True]['text':' Child to update for nested iteration ','line_number':36,'multiline':True]['text':' Cached values from the iterator ','line_number':38,'multiline':True]['text':' iternext and get_multi_index functions ','line_number':53,'multiline':True]['text':' Internal data pointers ','line_number':66,'multiline':True]['text':' The read/write settings ','line_number':80,'multiline':True]['text':' accept unicode input ','line_number':131,'multiline':True]['text':' Use switch statements to quickly isolate the right flag ','line_number':146,'multiline':True]['text':'
                 * Documentation is grow_inner, but initial implementation
                 * was growinner, so allowing for either.
                 ','line_number':189,'multiline':True]['text':' accept unicode input ','line_number':263,'multiline':True]['text':' Use switch statements to quickly isolate the right flag ','line_number':282,'multiline':True]['text':' If the first item is a string, try as one set of flags ','line_number':413,'multiline':True]['text':'
     * If the input isn't a tuple of dtypes, try converting it as-is
     * to a dtype, and replicating to all operands.
     ','line_number':449,'multiline':True]['text':' Try converting the object to a descr ','line_number':468,'multiline':True]['text':' Copy the tuples into op_axes ','line_number':512,'multiline':True]['text':' numpy.newaxis is None ','line_number':550,'multiline':True]['text':'
 * Converts the operand array and op_flags array into the form
 * NpyIter_AdvancedNew needs.  Sets nop, and on success, each
 * op[i] owns a reference to an array object.
 ','line_number':579,'multiline':True]['text':' nop and op ','line_number':591,'multiline':True]['text':' This is converted to an array after op flags are retrieved ','line_number':617,'multiline':True]['text':' Is converted to an array after op flags are retrieved ','line_number':623,'multiline':True]['text':' op_flags ','line_number':630,'multiline':True]['text':'
             * By default, make NULL operands writeonly and flagged for
             * allocation, and everything else readonly.  To write
             * to a provided operand, you must specify the write flag manually.
             ','line_number':633,'multiline':True]['text':' Now that we have the flags - convert all the ops to arrays ','line_number':655,'multiline':True]['text':' Set the dtypes and ops to all NULL to start ','line_number':732,'multiline':True]['text':' op and op_flags ','line_number':735,'multiline':True]['text':' op_request_dtypes ','line_number':741,'multiline':True]['text':' op_axes ','line_number':748,'multiline':True]['text':' Initialize to point to the op_axes arrays ','line_number':750,'multiline':True]['text':' Cache some values for the member functions to use ','line_number':784,'multiline':True]['text':' Release the references we got to the ops and dtypes ','line_number':800,'multiline':True]['text':' axes ','line_number':858,'multiline':True]['text':'
             * This check is very important, without it out of bounds
             * data accesses are possible.
             ','line_number':906,'multiline':True]['text':' op and op_flags ','line_number':924,'multiline':True]['text':' Set the dtypes to all NULL to start as well ','line_number':930,'multiline':True]['text':' op_request_dtypes ','line_number':935,'multiline':True]['text':' For broadcasting allocated arrays ','line_number':947,'multiline':True]['text':'
     * Clear any unnecessary ALLOCATE flags, so we can use them
     * to indicate exactly the allocated outputs.  Also, separate
     * the inner loop flags.
     ','line_number':952,'multiline':True]['text':'
         * Clear any flags allowing copies or output allocation for
         * the inner loop.
         ','line_number':962,'multiline':True]['text':'
         * If buffering is enabled and copying is not,
         * clear the nbo_aligned flag and strip the data type
         * for the outer loops.
         ','line_number':969,'multiline':True]['text':' Only the inner loop gets the buffering and no inner flags ','line_number':984,'multiline':True]['text':'
         * All the operands' op_axes are the same, except for
         * allocated outputs.
         ','line_number':993,'multiline':True]['text':'
        printf("\n");
        for (iop = 0; iop < nop; ++iop) {
            npy_intp i;

            for (i = 0; i < nested_naxes[inest]; ++i) {
                printf("%d ", (int)op_axes_nop[iop][i]);
            }
            printf("\n");
        }
        ','line_number':1011,'multiline':True]['text':' Allocate the iterator ','line_number':1023,'multiline':True]['text':' Cache some values for the member functions to use ','line_number':1052,'multiline':True]['text':'
         * If there are any allocated outputs or any copies were made,
         * adjust op so that the other iterators use the same ones.
         ','line_number':1067,'multiline':True]['text':'
                 * Clear any flags allowing copies for
                 * the rest of the iterators
                 ','line_number':1080,'multiline':True]['text':' Clear the common dtype flag for the rest of the iterators ','line_number':1087,'multiline':True]['text':' Release our references to the ops and dtypes ','line_number':1094,'multiline':True]['text':' Set up the nested child references ','line_number':1101,'multiline':True]['text':'
         * Indicates which iterator to reset with new base pointers
         * each iteration step.
         ','line_number':1105,'multiline':True]['text':'
         * Need to do a nested reset so all the iterators point
         * at the right data
         ','line_number':1112,'multiline':True]['text':' Store error, so that WriteUnraisable cannot clear an existing one ','line_number':1139,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1218,'multiline':True]['text':'
 * Makes a copy of the iterator.  Note that the nesting is not
 * copied.
 ','line_number':1226,'multiline':True]['text':' Allocate the iterator ','line_number':1241,'multiline':True]['text':' Copy the C iterator ','line_number':1247,'multiline':True]['text':' Cache some values for the member functions to use ','line_number':1254,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1271,'multiline':True]['text':' casting error, buffer cleanup will occur at reset or dealloc ','line_number':1280,'multiline':True]['text':' RemoveAxis invalidates cached values ','line_number':1306,'multiline':True]['text':' RemoveAxis also resets the iterator ','line_number':1310,'multiline':True]['text':' RemoveMultiIndex invalidates cached values ','line_number':1334,'multiline':True]['text':' RemoveMultiIndex also resets the iterator ','line_number':1336,'multiline':True]['text':' EnableExternalLoop invalidates cached values ','line_number':1360,'multiline':True]['text':' EnableExternalLoop also resets the iterator ','line_number':1362,'multiline':True]['text':' Return an array  or tuple of arrays with the values ','line_number':1406,'multiline':True]['text':'
     * Use the started flag for the Python iteration protocol to work
     * when buffering is enabled.
     ','line_number':1497,'multiline':True]['text':'
             * A casting error may be set here (or no error causing a
             * StopIteration). Buffers may only be cleaned up later.
             ','line_number':1503,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1511,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1619,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1680,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1733,'multiline':True]['text':' If there is nesting, the nested iterators should be reset ','line_number':1802,'multiline':True]['text':' Negative indexing ','line_number':1993,'multiline':True]['text':'
     * This check is disabled because it prevents things like
     * np.add(it[0], it[1], it[2]), where it[2] is a write-only
     * parameter.  When write-only, the value of it[i] is
     * likely random junk, as if it were allocated with an
     * np.empty(...) call.
     ','line_number':2005,'multiline':True]['text':' If the iterator is going over every element, return array scalars ','line_number':2031,'multiline':True]['text':' Negative indexing ','line_number':2124,'multiline':True]['text':' TODO - there should be a better way than this... ','line_number':2153,'multiline':True]['text':' even if called via exception handling, writeback any data ','line_number':2352,'multiline':True]['text':'sq_length','line_number':2455,'multiline':True]['text':'sq_concat','line_number':2456,'multiline':True]['text':'sq_repeat','line_number':2457,'multiline':True]['text':'sq_item','line_number':2458,'multiline':True]['text':'sq_slice','line_number':2459,'multiline':True]['text':'sq_ass_item','line_number':2460,'multiline':True]['text':'sq_ass_slice','line_number':2461,'multiline':True]['text':'sq_contains ','line_number':2462,'multiline':True]['text':'sq_inplace_concat ','line_number':2463,'multiline':True]['text':'sq_inplace_repeat ','line_number':2464,'multiline':True]['text':'mp_length','line_number':2468,'multiline':True]['text':'mp_subscript','line_number':2469,'multiline':True]['text':'mp_ass_subscript','line_number':2470,'multiline':True]