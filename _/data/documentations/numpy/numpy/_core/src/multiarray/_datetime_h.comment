['text':'
 * Returns 1 if the given year is a leap year, 0 otherwise.
 ','line_number':10,'multiline':True]['text':'
 * Calculates the days offset from the 1970 epoch.
 ','line_number':16,'multiline':True]['text':'
 * Creates a datetime or timedelta dtype using a copy of the provided metadata.
 ','line_number':22,'multiline':True]['text':'
 * Creates a datetime or timedelta dtype using the given unit.
 ','line_number':28,'multiline':True]['text':'
 * This function returns a pointer to the DateTimeMetaData
 * contained within the provided datetime dtype.
 ','line_number':34,'multiline':True]['text':'
 * Both type1 and type2 must be either NPY_DATETIME or NPY_TIMEDELTA.
 * Applies the type promotion rules between the two types, returning
 * the promoted type.
 ','line_number':45,'multiline':True]['text':'
 * Extracts the month number, within the current year,
 * from a 'datetime64[D]' value. January is 1, etc.
 ','line_number':53,'multiline':True]['text':'
 * Parses the metadata string into the metadata C structure.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':60,'multiline':True]['text':'
 * Converts a datetype dtype string into a dtype descr object.
 * The "type" string should be NULL-terminated, and len should
 * contain its string length.
 ','line_number':70,'multiline':True]['text':'
 * Converts a substring given by 'str' and 'len' into
 * a date time unit enum value. The 'metastr' parameter
 * is used for error messages, and may be NULL.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':78,'multiline':True]['text':'
 * Translate divisors into multiples of smaller units.
 * 'metastr' is used for the error message if the divisor doesn't work,
 * and can be NULL if the metadata didn't come from a string.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':88,'multiline':True]['text':'
 * Determines whether the 'divisor' metadata divides evenly into
 * the 'dividend' metadata.
 ','line_number':99,'multiline':True]['text':'
 * This provides the casting rules for the DATETIME data type units.
 *
 * Notably, there is a barrier between 'date units' and 'time units'
 * for all but 'unsafe' casting.
 ','line_number':109,'multiline':True]['text':'
 * This provides the casting rules for the DATETIME data type metadata.
 ','line_number':120,'multiline':True]['text':'
 * This provides the casting rules for the TIMEDELTA data type units.
 *
 * Notably, there is a barrier between the nonlinear years and
 * months units, and all the other units.
 ','line_number':128,'multiline':True]['text':'
 * This provides the casting rules for the TIMEDELTA data type metadata.
 ','line_number':139,'multiline':True]['text':'
 * Computes the conversion factor to convert data with 'src_meta' metadata
 * into data with 'dst_meta' metadata.
 *
 * If overflow occurs, both out_num and out_denom are set to 0, but
 * no error is set.
 ','line_number':147,'multiline':True]['text':'
 * Given a pointer to datetime metadata,
 * returns a tuple for pickling and other purposes.
 ','line_number':159,'multiline':True]['text':'
 * Converts a metadata tuple into a datetime metadata C struct.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':166,'multiline':True]['text':'
 * Gets a tzoffset in minutes by calling the fromutc() function on
 * the Python datetime.tzinfo object.
 ','line_number':176,'multiline':True]['text':'
 * Converts an input object into datetime metadata. The input
 * may be either a string or a tuple.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':183,'multiline':True]['text':'
 * Returns datetime metadata as a new reference a Unicode object.
 * Returns NULL on error.
 *
 * If 'skip_brackets' is true, skips the '[]'.
 *
 ','line_number':193,'multiline':True]['text':'
 * Converts a PyObject * into a datetime, in any of the forms supported.
 *
 * If the units metadata isn't known ahead of time, set meta->base
 * to -1, and this function will populate meta with either default
 * values or values from the input object.
 *
 * The 'casting' parameter is used to control what kinds of inputs
 * are accepted, and what happens. For example, with 'unsafe' casting,
 * unrecognized inputs are converted to 'NaT' instead of throwing an error,
 * while with 'safe' casting an error will be thrown if any precision
 * from the input will be thrown away.
 *
 * Returns -1 on error, 0 on success.
 ','line_number':204,'multiline':True]['text':'
 * Converts a PyObject * into a timedelta, in any of the forms supported
 *
 * If the units metadata isn't known ahead of time, set meta->base
 * to -1, and this function will populate meta with either default
 * values or values from the input object.
 *
 * The 'casting' parameter is used to control what kinds of inputs
 * are accepted, and what happens. For example, with 'unsafe' casting,
 * unrecognized inputs are converted to 'NaT' instead of throwing an error,
 * while with 'safe' casting an error will be thrown if any precision
 * from the input will be thrown away.
 *
 * Returns -1 on error, 0 on success.
 ','line_number':223,'multiline':True]['text':'
 * Converts a datetime into a PyObject *.
 *
 * For days or coarser, returns a datetime.date.
 * For microseconds or coarser, returns a datetime.datetime.
 * For units finer than microseconds, returns an integer.
 ','line_number':242,'multiline':True]['text':'
 * Converts a timedelta into a PyObject *.
 *
 * Not-a-time is returned as the string "NaT".
 * For microseconds or coarser, returns a datetime.timedelta.
 * For units finer than microseconds, returns an integer.
 ','line_number':252,'multiline':True]['text':'
 * Adjusts a datetimestruct based on a seconds offset. Assumes
 * the current values are valid.
 ','line_number':262,'multiline':True]['text':'
 * Adjusts a datetimestruct based on a minutes offset. Assumes
 * the current values are valid.
 ','line_number':269,'multiline':True]['text':'
 * Returns true if the datetime metadata matches
 ','line_number':276,'multiline':True]['text':'
 * Casts a single datetime from having src_meta metadata into
 * dst_meta metadata.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':282,'multiline':True]['text':'
 * Casts a single timedelta from having src_meta metadata into
 * dst_meta metadata.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':294,'multiline':True]['text':'
 * Returns true if the object is something that is best considered
 * a Datetime or Timedelta, false otherwise.
 ','line_number':306,'multiline':True]['text':'
 * Implements a datetime-specific arange
 ','line_number':313,'multiline':True]['text':'
 * Examines all the objects in the given Python object by
 * recursively descending the sequence structure. Returns a
 * datetime or timedelta type with metadata based on the data.
 ','line_number':320,'multiline':True]['text':' NUMPY_CORE_SRC_MULTIARRAY__DATETIME_H_ ','line_number':331,'multiline':True]