['text':'
  Provide multidimensional arrays as a basic object type in python.

  Based on Original Numeric implementation
  Copyright (c) 1995, 1996, 1997 Jim Hugunin, hugunin@mit.edu

  with contributions from many Numeric Python developers 1995-2004

  Heavily modified in 2005 with inspiration from Numarray

  by

  Travis Oliphant,  oliphant@ee.byu.edu
  Brigham Young University


maintainer email:  oliphant.travis@ieee.org

  Numarray design (which provided guidance) by
  Space Science Telescope Institute
  (J. Todd Miller, Perry Greenfield, Rick White)
','line_number':1,'multiline':True]['text':'NUMPY_API
  Compute the size of an array (in number of items)
','line_number':68,'multiline':True]['text':'NUMPY_API ','line_number':82,'multiline':True]['text':' 2021-Dec-15 1.23','line_number':86,'multiline':True]['text':'NUMPY_API
 *
 * Precondition: 'arr' is a copy of 'base' (though possibly with different
 * strides, ordering, etc.). This function sets the WRITEBACKIFCOPY flag and the
 * ->base pointer on 'arr', call PyArray_ResolveWritebackIfCopy to copy any
 * changes back to 'base' before deallocating the array.
 *
 * Steals a reference to 'base'.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':97,'multiline':True]['text':'
     * Any writes to 'arr' will magically turn into writes to 'base', so we
     * should warn if necessary.
     ','line_number':125,'multiline':True]['text':'
     * Unlike PyArray_SetBaseObject, we do not compress the chain of base
     * references.
     ','line_number':133,'multiline':True]['text':'NUMPY_API
 * Sets the 'base' attribute of the array. This steals a reference
 * to 'obj'.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':148,'multiline':True]['text':'
     * Allow the base to be set only once. Once the object which
     * owns the data is set, it doesn't make sense to change it.
     ','line_number':163,'multiline':True]['text':'
     * Don't allow infinite chains of views, always set the base
     * to the first owner of the data.
     * That is, either the first object which isn't an array,
     * or the first object which owns its own data.
     ','line_number':175,'multiline':True]['text':' Propagate WARN_ON_WRITE through views. ','line_number':186,'multiline':True]['text':' If this array owns its own data, stop collapsing ','line_number':191,'multiline':True]['text':' If there's no base, stop collapsing ','line_number':197,'multiline':True]['text':' Stop the collapse new base when the would not be of the same
         * type (i.e. different subclass).
         ','line_number':201,'multiline':True]['text':' Disallow circular references ','line_number':214,'multiline':True]['text':'*
 * Assign an arbitrary object a NumPy array. This is largely basically
 * identical to PyArray_FromAny, but assigns directly to the output array.
 *
 * @param dest Array to be written to
 * @param src_object Object to be assigned, array-coercion rules apply.
 * @return 0 on success -1 on failures.
 ','line_number':228,'multiline':True]['text':'NUMPY_API','line_number':236,'multiline':True]['text':'
     * We have to set the maximum number of dimensions here to support
     * sequences within object arrays.
     ','line_number':247,'multiline':True]['text':' The input is an array or array object, so assign directly ','line_number':259,'multiline':True]['text':'
     * We may need to broadcast, due to shape mismatches, in this case
     * create a temporary array first, and assign that after filling
     * it from the sequences/scalar.
     ','line_number':268,'multiline':True]['text':'
         * Broadcasting may be necessary, so assign to a view first.
         * This branch could lead to a shape mismatch error later.
         ','line_number':275,'multiline':True]['text':' would error during discovery ','line_number':279,'multiline':True]['text':' Assign the values to `view` (whichever array that is) ','line_number':293,'multiline':True]['text':' single (non-array) item, assign immediately ','line_number':295,'multiline':True]['text':'NUMPY_API
 *
 * If WRITEBACKIFCOPY and self has data, reset the base WRITEABLE flag,
 * copy the local data to base, release the local data, and set flags
 * appropriately. Return 0 if not relevant, 1 if success, < 0 on failure
 ','line_number':321,'multiline':True]['text':'
             * WRITEBACKIFCOPY means that fa->base's data
             * should be updated with the contents
             * of self.
             * fa->base->flags is not WRITEABLE to protect the relationship
             * unlock it.
             ','line_number':333,'multiline':True]['text':' this should never happen, how did the two copies of data
                 * get out of sync?
                 ','line_number':348,'multiline':True]['text':'********************** end C-API functions *********************','line_number':359,'multiline':True]['text':' dealloc must not raise an error, best effort try to write
   to stderr and clear the error
','line_number':362,'multiline':True]['text':' array object functions ','line_number':382,'multiline':True]['text':'
             * prevent reaching 0 twice and thus recursing into dealloc.
             * Increasing sys.gettotalrefcount, but path should not be taken.
             ','line_number':403,'multiline':True]['text':'
         * If fa->base is non-NULL, it is something
         * to DECREF -- either a view or a buffer object
         ','line_number':416,'multiline':True]['text':' Free any internal references ','line_number':424,'multiline':True]['text':' Guess at malloc/free ???','line_number':437,'multiline':False]['text':' must match allocation in PyArray_NewFromDescr ','line_number':450,'multiline':True]['text':'NUMPY_API
 * Prints the raw data of the ndarray in a form useful for debugging
 * low-level C issues.
 ','line_number':456,'multiline':True]['text':' Call this from contexts where an array might be written to, but we have no
 * way to tell. (E.g., when converting to a read-write buffer.)
 ','line_number':519,'multiline':True]['text':' Only warn once per array ','line_number':533,'multiline':True]['text':'NUMPY_API
 *
 *  This function does nothing and returns 0 if *obj* is writeable.
 *  It raises an exception and returns -1 if *obj* is not writeable.
 *  It may also do other house-keeping, such as issuing warnings on
 *  arrays which are transitioning to become views. Always call this
 *  function at some point before writing to an array.
 *
 *  *name* is a name for the array, used to give better error messages.
 *  It can be something like "assignment destination", "output array",
 *  or even just "array".
 ','line_number':545,'multiline':True]['text':' From umath/string_ufuncs.cpp/h ','line_number':571,'multiline':True]['text':'
 * VOID-type arrays can only be compared equal and not-equal
 * in which case the fields are all compared by extracting the fields
 * and testing one at a time...
 * equality testing is performed using logical_ands on all the fields.
 * in-equality testing is performed using logical_ors on all the fields.
 *
 * VOID-type arrays without fields are compared for equality by comparing their
 * memory at each location directly (using string-code).
 ','line_number':576,'multiline':True]['text':' Use promotion to decide whether the comparison is valid ','line_number':603,'multiline':True]['text':'
             * If the fields were subarrays, the dimensions may have changed.
             * In that case, the new shape (subarray part) must match exactly.
             * (If this is 0, there is no subarray.)
             ','line_number':645,'multiline':True]['text':' neither is subarray ','line_number':653,'multiline':True]['text':' Compare only the added (subarray) dimensions: ','line_number':654,'multiline':True]['text':'
             * If the field type has a non-trivial shape, additional
             * dimensions will have been appended to `a` and `b`.
             * In that case, reduce them using `op`.
             ','line_number':676,'multiline':True]['text':' If the type was multidimensional, collapse that part to 1-D
                 ','line_number':683,'multiline':True]['text':'
                     * Compute the new dimension size manually, as reshaping
                     * with -1 does not work on empty arrays.
                     ','line_number':696,'multiline':True]['text':' Reduce the extra dimension of `temp` using `op` ','line_number':714,'multiline':True]['text':' these dtypes had no fields. Use a MultiIter to broadcast them
             * to an output array, and fill with True (for EQ)','line_number':741,'multiline':True]['text':'
         * Since arrays absorb subarray descriptors, this path can only be
         * reached when both arrays have unstructured voids "V<len>" dtypes.
         ','line_number':768,'multiline':True]['text':' compare as a string. Assumes self and other have same descr->type ','line_number':779,'multiline':True]['text':'
 * Silence the current error and emit a deprecation warning instead.
 *
 * If warnings are raised as errors, this sets the warning __cause__ to the
 * silenced error.
 ','line_number':784,'multiline':True]['text':'
         * The ufunc does not support void/structured types, so these
         * need to be handled specifically. Only a few cases are supported.
         ','line_number':825,'multiline':True]['text':'
             * If not successful, indicate that the items cannot be compared
             * this way.
             ','line_number':832,'multiline':True]['text':' 2015-05-07, 1.10 ','line_number':837,'multiline':True]['text':'
         * The ufunc does not support void/structured types, so these
         * need to be handled specifically. Only a few cases are supported.
         ','line_number':857,'multiline':True]['text':'
             * If not successful, indicate that the items cannot be compared
             * this way.
            ','line_number':864,'multiline':True]['text':' 2015-05-07, 1.10 ','line_number':869,'multiline':True]['text':'
     * At this point `self` can take control of the operation by converting
     * `other` to an array (it would have a chance to take control).
     * If we are not in `==` and `!=`, this is an error and we hope that
     * the existing error makes sense and derives from `TypeError` (which
     * python would raise for `NotImplemented`) when it should.
     *
     * However, if the issue is no matching loop for the given dtypes and
     * we are inside == and !=, then returning an array of True or False
     * makes sense (following Python behavior for `==` and `!=`).
     * Effectively: Both *dtypes* told us that they cannot be compared.
     *
     * In theory, the error could be raised from within an object loop, the
     * solution to that could be pushing this into the ufunc (where we can
     * distinguish the two easily).  In practice, it seems like it should not
     * but a huge problem:  The ufunc loop will itself call `==` which should
     * probably never raise a UFuncNoLoopError.
     *
     * TODO: If/once we correctly push structured comparisons into the ufunc
     *       we could consider pushing this path into the ufunc itself as a
     *       fallback loop (which ignores the input arrays).
     *       This would have the advantage that subclasses implementing
     *       `__array_ufunc__` do not explicitly need `__eq__` and `__ne__`.
     ','line_number':902,'multiline':True]['text':'
            * Void arrays are currently not handled by ufuncs, so if the other
            * is a void array, we defer to it (will raise a TypeError).
            ','line_number':933,'multiline':True]['text':'
             * (seberg) not sure that this is best, but we preserve Python
             * bool result for "scalar" inputs for now by returning
             * `NotImplemented`.
             ','line_number':942,'multiline':True]['text':' Hack warning: using NpyIter to allocate broadcasted result. ','line_number':951,'multiline':True]['text':'
         * The array is guaranteed to be newly allocated and thus contiguous,
         * so simply fill it with 0 or 1.
         ','line_number':978,'multiline':True]['text':' Ensure basic subclass support by wrapping: ','line_number':984,'multiline':True]['text':'
             * If other is also a subclass (with higher priority) we would
             * already have deferred.  So use `self` for wrapping.  If users
             * need more, they need to override `==` and `!=`.
             ','line_number':986,'multiline':True]['text':'NUMPY_API
 ','line_number':998,'multiline':True]['text':'
 * This routine checks to see if newstrides (of length nd) will not
 * ever be able to walk outside of the memory implied numbytes and offset.
 *
 * The available memory is assumed to start at -offset and proceed
 * to numbytes-offset.  The strides are checked to ensure
 * that accessing memory using striding will not try to reach beyond
 * this memory for any of the axes.
 *
 * If numbytes is 0 it will be calculated using the dimensions and
 * element-size.
 *
 * This function checks for walking beyond the beginning and right-end
 * of the buffer and therefore works for any integer stride (positive
 * or negative).
 ','line_number':1026,'multiline':True]['text':'NUMPY_API','line_number':1043,'multiline':True]['text':'
     * Usually called with shape and type but can also be called with buffer,
     * strides, and swapped info For now, let's just use this to create an
     * empty, contiguous array of a specific type and shape.
     ','line_number':1085,'multiline':True]['text':' Logic shared by `empty`, `empty_like`, and `ndarray.__new__` ','line_number':1154,'multiline':True]['text':' place Py_None in object positions ','line_number':1156,'multiline':True]['text':' buffer given -- use it ','line_number':1164,'multiline':True]['text':' get writeable and aligned ','line_number':1177,'multiline':True]['text':' methods ','line_number':1220,'multiline':True]