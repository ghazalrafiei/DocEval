['text':' -*- c -*- ','line_number':1,'multiline':True]['text':' for memchr ','line_number':23,'multiline':True]['text':' Use Libdivide for faster division ','line_number':25,'multiline':True]['text':'
 * cutoff blocksize for pairwise summation
 * decreasing it decreases errors slightly as more pairs are summed but
 * also lowers performance, as the inner loop is unrolled eight times it is
 * effectively 16
 ','line_number':28,'multiline':True]['text':'* Provides the various *_LOOP macros ','line_number':36,'multiline':True]['text':'*****************************************************************************
 **                          GENERIC FLOAT LOOPS                             **
 ****************************************************************************','line_number':39,'multiline':True]['text':' direct loops using a suitable callback ','line_number':43,'multiline':True]['text':'*begin repeat
 * #c = e, f, d, g#
 * #type = npy_half, npy_float, npy_double, npy_longdouble#
 *','line_number':45,'multiline':True]['text':'UFUNC_API','line_number':50,'multiline':True]['text':'UFUNC_API','line_number':62,'multiline':True]['text':'*end repeat*','line_number':75,'multiline':True]['text':' indirect loops with casting ','line_number':77,'multiline':True]['text':'*begin repeat
 * #c1    = e,         e,          f#
 * #type1 = npy_half,  npy_half,   npy_float#
 * #c2    = f,         d,          d#
 * #type2 = npy_float, npy_double, npy_double#
 *
 * #conv12  = npy_half_to_float, npy_half_to_double, (double)#
 * #conv21  = npy_float_to_half, npy_double_to_half, (float)#
 *','line_number':78,'multiline':True]['text':'UFUNC_API','line_number':88,'multiline':True]['text':'UFUNC_API','line_number':99,'multiline':True]['text':'*end repeat*','line_number':112,'multiline':True]['text':'*****************************************************************************
 **                          GENERIC COMPLEX LOOPS                           **
 ****************************************************************************','line_number':114,'multiline':True]['text':' direct loops using a suitable callback ','line_number':118,'multiline':True]['text':'*begin repeat
 * #c = F, D, G#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 *','line_number':119,'multiline':True]['text':'UFUNC_API','line_number':124,'multiline':True]['text':'UFUNC_API','line_number':137,'multiline':True]['text':'*end repeat*','line_number':150,'multiline':True]['text':' indirect loops with casting ','line_number':153,'multiline':True]['text':'UFUNC_API','line_number':154,'multiline':True]['text':'UFUNC_API','line_number':170,'multiline':True]['text':'*****************************************************************************
 **                         GENERIC OBJECT lOOPS                             **
 ****************************************************************************','line_number':189,'multiline':True]['text':'UFUNC_API','line_number':193,'multiline':True]['text':' We allow NULL, but try to guarantee non-NULL to downstream ','line_number':201,'multiline':True]['text':'UFUNC_API','line_number':212,'multiline':True]['text':' We allow NULL, but try to guarantee non-NULL to downstream ','line_number':220,'multiline':True]['text':'UFUNC_API','line_number':250,'multiline':True]['text':' We allow NULL, but try to guarantee non-NULL to downstream ','line_number':259,'multiline':True]['text':' We allow NULL, but try to guarantee non-NULL to downstream ','line_number':280,'multiline':True]['text':'UFUNC_API','line_number':297,'multiline':True]['text':' We allow NULL, but try to guarantee non-NULL to downstream ','line_number':306,'multiline':True]['text':'
 * A general-purpose ufunc that deals with general-purpose Python callable.
 * func is a structure with nin, nout, and a Python callable function
 ','line_number':319,'multiline':True]['text':'UFUNC_API','line_number':324,'multiline':True]['text':' We allow NULL, but try to guarantee non-NULL to downstream ','line_number':350,'multiline':True]['text':' No output expected, no output received, continue ','line_number':364,'multiline':True]['text':' Single output expected, assign and continue ','line_number':368,'multiline':True]['text':'
             * Multiple returns match expected number of outputs, assign
             * and continue. Will also gobble empty tuples if nout == 0.
             ','line_number':374,'multiline':True]['text':' Mismatch between returns and expected outputs, exit ','line_number':387,'multiline':True]['text':'
 *****************************************************************************
 **                             BOOLEAN LOOPS                               **
 *****************************************************************************
 ','line_number':397,'multiline':True]['text':'
 *****************************************************************************
 **                           INTEGER LOOPS
 *****************************************************************************
 ','line_number':411,'multiline':True]['text':'*begin repeat
 * #TYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 * #ftype = npy_float, npy_float, npy_float, npy_float, npy_double, npy_double,
 *          npy_double, npy_double, npy_double, npy_double#
 * #SIGNED = 1, 0, 1, 0, 1, 0, 1, 0, 1, 0#
 * #c = hh,uhh,h,uh,,u,l,ul,ll,ull#
 ','line_number':417,'multiline':True]['text':'*begin repeat1
 * Arithmetic
 * #kind = add, subtract, multiply, bitwise_and, bitwise_or, bitwise_xor#
 * #OP = +, -, *, &, |, ^#
 ','line_number':443,'multiline':True]['text':'*end repeat1*','line_number':472,'multiline':True]['text':'*end repeat*','line_number':510,'multiline':True]['text':'*begin repeat
 * #TYPE = BYTE, SHORT, INT, LONG, LONGLONG#
 * #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 * #c    = ,,,l,ll#
 ','line_number':512,'multiline':True]['text':'*begin repeat1
 * #kind = gcd, lcm#
 *','line_number':517,'multiline':True]['text':'*end repeat1*','line_number':529,'multiline':True]['text':'*end repeat*','line_number':530,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG#
 * #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 * #c    = u,u,u,ul,ull#
 ','line_number':532,'multiline':True]['text':'*begin repeat1
 * #kind = gcd, lcm#
 *','line_number':537,'multiline':True]['text':'*end repeat1*','line_number':549,'multiline':True]['text':'*end repeat*','line_number':550,'multiline':True]['text':'
 * NOTE: It may be nice to vectorize these, OTOH, these are still faster
 *       than the cast we used to do.
 ','line_number':553,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal#
 * #OP = ==, !=, <, <=, >, >=#
 ','line_number':558,'multiline':True]['text':'*end repeat*','line_number':591,'multiline':True]['text':'
 *****************************************************************************
 **                           DATETIME LOOPS                                **
 *****************************************************************************
 ','line_number':594,'multiline':True]['text':'*begin repeat
 * #type = npy_datetime, npy_timedelta#
 * #TYPE = DATETIME, TIMEDELTA#
 ','line_number':646,'multiline':True]['text':'*begin repeat1
 * #kind = equal, greater, greater_equal, less, less_equal#
 * #OP =  ==, >, >=, <, <=#
 ','line_number':677,'multiline':True]['text':'*end repeat1*','line_number':692,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum#
 * #OP =  >, <#
 *','line_number':707,'multiline':True]['text':'*end repeat1*','line_number':729,'multiline':True]['text':'*begin repeat1
 * #kind = fmax, fmin#
 * #OP =  >=, <=#
 *','line_number':731,'multiline':True]['text':'*end repeat1*','line_number':752,'multiline':True]['text':'*end repeat*','line_number':754,'multiline':True]['text':' Note: Assuming 'q' == NPY_LONGLONG ','line_number':846,'multiline':True]['text':' Note: Assuming 'q' == NPY_LONGLONG ','line_number':862,'multiline':True]['text':' Note: Assuming 'q' == NPY_LONGLONG ','line_number':920,'multiline':True]['text':' NOTE: This code is similar to array floor divide ','line_number':924,'multiline':True]['text':' When the divisor is a constant, use libdivide for faster division ','line_number':927,'multiline':True]['text':' In case of empty array, just return ','line_number':929,'multiline':True]['text':' If divisor is 0, we need not compute anything ','line_number':936,'multiline':True]['text':' handle mixed case the way Python does ','line_number':1021,'multiline':True]['text':' NOTE: This code is similar to array floor divide ','line_number':1037,'multiline':True]['text':' When the divisor is a constant, use libdivide for faster division ','line_number':1040,'multiline':True]['text':' In case of empty array, just return ','line_number':1042,'multiline':True]['text':' If divisor is 0 or NAT, we need not compute anything ','line_number':1049,'multiline':True]['text':' Negative quotients needs to be rounded down ','line_number':1073,'multiline':True]['text':' Negative quotients needs to be rounded down ','line_number':1096,'multiline':True]['text':'
 *****************************************************************************
 **                             FLOAT LOOPS                                 **
 *****************************************************************************
 ','line_number':1136,'multiline':True]['text':'*begin repeat
 * Float types
 *  #type = npy_float, npy_double, npy_longdouble#
 *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 *  #c = f, , l#
 *  #C = F, , L#
 *  #fd = 1, 1, 0#
 *  #VCHK = 1, 1, 0#
 ','line_number':1142,'multiline':True]['text':'*begin repeat1
 * #kind = logical_and, logical_or#
 * #OP = &&, ||#
 ','line_number':1151,'multiline':True]['text':'*end repeat1*','line_number':1165,'multiline':True]['text':'*begin repeat1
 * #kind = isnan, isinf, isfinite, signbit#
 * #func = npy_isnan, npy_isinf, npy_isfinite, npy_signbit#
 *','line_number':1187,'multiline':True]['text':'*end repeat1*','line_number':1200,'multiline':True]['text':' Sign of nan is nan ','line_number':1315,'multiline':True]['text':'
     * Additional loop to handle npy_long integer inputs (cf. #866, #1633).
     * npy_long != npy_int on many 64-bit platforms, so we need this second loop
     * to handle the default (and larger) integer types.
     ','line_number':1335,'multiline':True]['text':' Range OK ','line_number':1344,'multiline':True]['text':'
             * Outside npy_int range -- also ldexp will overflow in this case,
             * given that exponent has less bits than npy_int.
             ','line_number':1348,'multiline':True]['text':'*end repeat*','line_number':1362,'multiline':True]['text':'
 *****************************************************************************
 **                          LONGDOUBLE LOOPS                               **
 *****************************************************************************
 ','line_number':1364,'multiline':True]['text':'*begin repeat
 * Arithmetic
 * # kind = add, subtract, multiply, divide#
 * # OP = +, -, *, /#
 * # PW = 1, 0, 0, 0#
 ','line_number':1370,'multiline':True]['text':'*end repeat*','line_number':1425,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal#
 * #OP = ==, !=, <, <=, >, >=#
 ','line_number':1427,'multiline':True]['text':'*end repeat*','line_number':1441,'multiline':True]['text':' add 0 to clear -0.0 ','line_number':1458,'multiline':True]['text':'
 *****************************************************************************
 **                          HALF-FLOAT LOOPS                               **
 *****************************************************************************
 ','line_number':1492,'multiline':True]['text':'*begin repeat
 * Arithmetic
 * # kind = add, subtract, multiply, divide#
 * # OP = +, -, *, /#
 * # PW = 1, 0, 0, 0#
 ','line_number':1499,'multiline':True]['text':'*end repeat*','line_number':1555,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, less, less_equal, greater,
 *         greater_equal, logical_and, logical_or#
 * #OP = npy_half_eq, npy_half_ne, npy_half_lt, npy_half_le, npy_half_gt,
 *       npy_half_ge, _HALF_LOGICAL_AND, _HALF_LOGICAL_OR#
 ','line_number':1559,'multiline':True]['text':'*end repeat*','line_number':1574,'multiline':True]['text':'*begin repeat
 * #kind = isnan, isinf, isfinite, signbit#
 * #func = npy_half_isnan, npy_half_isinf, npy_half_isfinite, npy_half_signbit#
 *','line_number':1597,'multiline':True]['text':'*end repeat*','line_number':1610,'multiline':True]['text':'*begin repeat
 * #kind = maximum, minimum#
 * #OP =  npy_half_ge, npy_half_le#
 *','line_number':1641,'multiline':True]['text':'  ','line_number':1648,'multiline':True]['text':' npy_half_isnan will never set floatstatus_invalid, so do not clear ','line_number':1654,'multiline':True]['text':'*end repeat*','line_number':1682,'multiline':True]['text':'*begin repeat
 * #kind = fmax, fmin#
 * #OP =  npy_half_ge, npy_half_le#
 *','line_number':1684,'multiline':True]['text':'  ','line_number':1691,'multiline':True]['text':' no need to clear floatstatus_invalid ','line_number':1697,'multiline':True]['text':'*end repeat*','line_number':1725,'multiline':True]['text':' Sign of nan is nan ','line_number':1849,'multiline':True]['text':'
     * Additional loop to handle npy_long integer inputs (cf. #866, #1633).
     * npy_long != npy_int on many 64-bit platforms, so we need this second loop
     * to handle the default integer type.
     ','line_number':1892,'multiline':True]['text':' Range OK ','line_number':1901,'multiline':True]['text':'
             * Outside npy_int range -- also ldexp will overflow in this case,
             * given that exponent has less bits than npy_int.
             ','line_number':1905,'multiline':True]['text':'
 *****************************************************************************
 **                           COMPLEX LOOPS                                 **
 *****************************************************************************
 ','line_number':1919,'multiline':True]['text':'*begin repeat
 * complex types
 * #TYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #ftype = npy_float, npy_double, npy_longdouble#
 * #c = f, , l#
 * #C = F, , L#
 * #SIMD = 1, 1, 0#
 ','line_number':1936,'multiline':True]['text':' CFLOAT & CDOUBLE defined by 'loops_arithm_fp.dispatch.c.src'','line_number':1946,'multiline':False]['text':'*begin repeat1
 * arithmetic
 * #kind = add, subtract#
 * #OP = +, -#
 * #PW = 1, 0#
 ','line_number':1947,'multiline':True]['text':' Parenthesis around @PW@ tells clang dead code is intentional','line_number':1956,'multiline':False]['text':'*end repeat1*','line_number':2004,'multiline':True]['text':' !SIMD','line_number':2045,'multiline':False]['text':' divide by zero should yield a complex inf or nan ','line_number':2059,'multiline':True]['text':'*begin repeat1
 * #kind= greater, greater_equal, less, less_equal, equal, not_equal#
 * #OP = CGT, CGE, CLT, CLE, CEQ, CNE#
 ','line_number':2080,'multiline':True]['text':'*end repeat1*','line_number':2095,'multiline':True]['text':'*begin repeat1
   #kind = logical_and, logical_or#
   #OP1 = ||, ||#
   #OP2 = &&, ||#
','line_number':2097,'multiline':True]['text':'*end repeat1*','line_number':2113,'multiline':True]['text':'*begin repeat1
 * #kind = isnan, isinf, isfinite#
 * #func = npy_isnan, npy_isinf, npy_isfinite#
 * #OP = ||, ||, &&#
 *','line_number':2139,'multiline':True]['text':'*end repeat1*','line_number':2154,'multiline':True]['text':' CFLOAT & CDOUBLE defined by 'loops_arithm_fp.dispatch.c.src'','line_number':2157,'multiline':False]['text':' CFLOAT & CDOUBLE defined by 'loops_arithm_fp.dispatch.c.src'','line_number':2200,'multiline':False]['text':' fixme: sign of nan is currently 0 ','line_number':2235,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum#
 * #OP = CGE, CLE#
 ','line_number':2246,'multiline':True]['text':'*end repeat1*','line_number':2267,'multiline':True]['text':'*begin repeat1
 * #kind = fmax, fmin#
 * #OP = CGE, CLE#
 ','line_number':2269,'multiline':True]['text':'*end repeat1*','line_number':2292,'multiline':True]['text':'*end repeat*','line_number':2294,'multiline':True]['text':'
 *****************************************************************************
 **                            OBJECT LOOPS                                 **
 *****************************************************************************
 ','line_number':2303,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 * #OP = EQ, NE, GT, GE, LT, LE#
 * #identity = NPY_TRUE, NPY_FALSE, -1*4#
 ','line_number':2309,'multiline':True]['text':'*begin repeat1
 * #suffix = , _OO_O#
 * #as_bool = 1, 0#
 ','line_number':2315,'multiline':True]['text':'
         * Do not use RichCompareBool because it includes an identity check for
         * == and !=. This is wrong for elementwise behaviour, since it means
         * that NaN can be equal to NaN and an array is equal to itself.
         ','line_number':2329,'multiline':True]['text':'*end repeat1*','line_number':2352,'multiline':True]['text':'*end repeat*','line_number':2353,'multiline':True]['text':' in1 is NaN ','line_number':2382,'multiline':True]['text':'
 *****************************************************************************
 **                              END LOOPS                                  **
 *****************************************************************************
 ','line_number':2396,'multiline':True]