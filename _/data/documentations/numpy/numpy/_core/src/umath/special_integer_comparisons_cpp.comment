['text':' For `get_wrapped_legacy_ufunc_loop`. ','line_number':17,'multiline':True]['text':'
 * Helper for templating, avoids warnings about uncovered switch paths.
 ','line_number':21,'multiline':True]['text':'
 * Determine if a Python long is within the typenums range, smaller, or larger.
 * 
 * Function returns -1 for errors.
 ','line_number':108,'multiline':True]['text':'
        * If we are checking for unisgned long long, the value may be larger
        * then long long, but within range of unsigned long long.  Check this
        * by doing the normal Python integer comparison.
        ','line_number':144,'multiline':True]['text':'
 * Find the type resolution for any numpy_int with pyint comparison.  This
 * function supports *both* directions for all types.
 ','line_number':169,'multiline':True]['text':'
     * Three way decision (with hack) on value range:
     *  0: The value fits within the range of the dtype.
     *  1: The value came second and is larger or came first and is smaller.
     * -1: The value came second and is smaller or came first and is larger
     ','line_number':188,'multiline':True]['text':'
     * Very small/large values always need to be encoded as `object` dtype
     * in order to never fail casting (NumPy will store the Python integer
     * in a 0-D object array this way -- even if we never inspect it).
     *
     * TRICK: We encode the value range by whether or not we use the object
     *        singleton!  This information is then available in `get_loop()`
     *        to pick a loop that returns always True or False.
     ','line_number':203,'multiline':True]['text':'
         * Fall back to the current implementation, which wraps legacy loops.
         ','line_number':241,'multiline':True]['text':' HACK: If the descr is the singleton the result is smaller ','line_number':257,'multiline':True]['text':' Singleton came second and is smaller, or first and is larger ','line_number':260,'multiline':True]['text':' Singleton came second and is larger, or first and is smaller ','line_number':275,'multiline':True]['text':'
 * Machinery to add the python integer to NumPy intger comparsisons as well
 * as a special promotion to special case Python int with Python int
 * comparisons.
 ','line_number':296,'multiline':True]['text':'
 * Simple promoter that ensures we use the object loop when the input
 * is python integers only.
 * Note that if a user would pass the Python `int` abstract DType explicitly
 * they promise to actually pass a Python int and we accept that we never
 * check for that.
 ','line_number':302,'multiline':True]['text':'
 * This function replaces the strided loop with the passed in one,
 * and registers it with the given ufunc.
 * It additionally adds a promoter for (pyint, pyint, bool) to use the
 * (object, object, bool) implementation.
 ','line_number':321,'multiline':True]['text':' 
     * NOTE: Iterates all type numbers, it would be nice to reduce this.
     *       (that would be easier if we consolidate int DTypes in general.)
     ','line_number':348,'multiline':True]['text':' Register the spec/loop for both forward and backward direction ','line_number':357,'multiline':True]['text':'
     * Install the promoter info to allow two Python integers to work.
     ','line_number':374,'multiline':True]['text':' All loops have a boolean out DType (others filled in later) ','line_number':419,'multiline':True]['text':'
     * We only have one loop right now, the strided one.  The default type
     * resolver ensures native byte order/canonical representation.
     ','line_number':421,'multiline':True]['text':'
     * The following sets up the correct promoter to make comparisons like
     * `np.equal(2, 4)` (with two python integers) use an object loop.
     ','line_number':440,'multiline':True]['text':' Add all combinations of PyInt and NumPy integer comparisons ','line_number':462,'multiline':True]