['text':'@targets
 ** $maxopt baseline
 ** sse2 sse42 avx2 avx512f avx512_skx
 ** vsx2 vsx3
 ** neon
 ** vx vxe
 *','line_number':1,'multiline':True]['text':' Provides the various *_LOOP macros','line_number':16,'multiline':False]['text':'*******************************************************************************
 ** Defining the SIMD kernels
 *******************************************************************************','line_number':19,'multiline':True]['text':'*begin repeat
 * #sfx    = u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
 * #len    =  8,  8,  16,  16,  32,  32,  64,  64,  32,  64#
 * #signed =  0,  1,   0,   1,   0,   1,   0,   1,   0,   0#
 * #VECTOR = NPY_SIMD*8, NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':22,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, less, less_equal#
 * #eq = 1, 0, 0, 0#
 * #neq = 0, 1, 0, 0#
 * #OP = ==, !=, <, <=#
 * #VOP = cmpeq, cmpneq, cmplt, cmple#
 ','line_number':28,'multiline':True]['text':' Unroll the loop to get a resultant vector with 'vsteps' elements.','line_number':44,'multiline':False]['text':' @len@ >= 64','line_number':75,'multiline':False]['text':' @len@ >= 32','line_number':76,'multiline':False]['text':' @len@ >= 16','line_number':77,'multiline':False]['text':' @len@ >= 8','line_number':78,'multiline':False]['text':' Pack the 'c' vectors into a single vector 'r'','line_number':80,'multiline':False]['text':' @len@ >= 64','line_number':131,'multiline':False]['text':' @len@ >= 32','line_number':132,'multiline':False]['text':' @len@ >= 16','line_number':133,'multiline':False]['text':' @len@ >= 8','line_number':134,'multiline':False]['text':' @len@ >= 64','line_number':185,'multiline':False]['text':' @len@ >= 32','line_number':186,'multiline':False]['text':' @len@ >= 16','line_number':187,'multiline':False]['text':' @len@ >= 8','line_number':188,'multiline':False]['text':'*end repeat1*','line_number':210,'multiline':True]['text':'*end repeat*','line_number':211,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, less, less_equal#
 * #eq = 1, 0, 0, 0#
 * #neq = 0, 1, 0, 0#
 * #OP = ==, !=, <, <=#
 * #VOP = xnor, xor, andc, orc#
 ','line_number':213,'multiline':True]['text':' Whatever element in src != 0x0 is converted to 0xFF','line_number':233,'multiline':False]['text':'*end repeat*','line_number':293,'multiline':True]['text':'*begin repeat
 * #type = npy_ubyte*2, npy_byte, npy_ushort, npy_short, npy_uint, npy_int,
           npy_ulonglong, npy_longlong, npy_float, npy_double#
 * #sfx = b8, u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
 * #bool = 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0#
 * #fp = 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1#
 * #signed = 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0#
 * #VECTOR = NPY_SIMD*9, NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':295,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, less, less_equal#
 * #eq   = 1, 0, 0, 0#
 * #neq  = 0, 1, 0, 0#
 * #OP = ==, !=, <, <=#
 ','line_number':304,'multiline':True]['text':' argument one scalar ','line_number':318,'multiline':True]['text':' argument two scalar ','line_number':323,'multiline':True]['text':'*end repeat1*','line_number':347,'multiline':True]['text':'*end repeat*','line_number':348,'multiline':True]['text':'*******************************************************************************
 ** Defining ufunc inner functions
 *******************************************************************************','line_number':350,'multiline':True]['text':'
 * In order to reduce the size of the binary generated from this source, the
 * following rules are applied: 1) each data type implements its function
 * 'greater' as a call to the function 'less' but with the arguments swapped,
 * the same applies to the function 'greater_equal', which is implemented
 * with a call to the function 'less_equal', and 2) for the integer datatypes
 * of the same size (eg 8-bit), a single kernel of the functions 'equal' and
 * 'not_equal' is used to implement both signed and unsigned types.
 ','line_number':354,'multiline':True]['text':'*begin repeat
 * Signed and Unsigned types
 *  #TYPE  = UBYTE,     USHORT,     UINT,     ULONG,     ULONGLONG,
 *           BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #STYPE = BYTE,      SHORT,      INT,      LONG,      LONGLONG,
 *           BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #signed = 0, 0, 0, 0, 0, 1, 1, 1, 1, 1#
 ','line_number':364,'multiline':True]['text':'*begin repeat1
 * #len = 8, 16, 32, 64#
 ','line_number':375,'multiline':True]['text':'*end repeat1*','line_number':385,'multiline':True]['text':'*begin repeat1
 * #kind = greater, greater_equal#
 * #kind_to = less, less_equal#
 ','line_number':388,'multiline':True]['text':'*end repeat1*','line_number':399,'multiline':True]['text':'*begin repeat1
 * #kind = less, less_equal#
 ','line_number':401,'multiline':True]['text':'*end repeat1*','line_number':409,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal#
 ','line_number':411,'multiline':True]['text':'*end repeat1*','line_number':419,'multiline':True]['text':'*end repeat*','line_number':420,'multiline':True]['text':'*begin repeat
 * Boolean & Float types
 * #TYPE = BOOL, FLOAT, DOUBLE#
 * #sfx = b8, f32, f64#
 * #fp = 0, 1, 1#
 ','line_number':422,'multiline':True]['text':'*begin repeat1
 * #kind = greater, greater_equal#
 * #kind_to = less, less_equal#
 ','line_number':428,'multiline':True]['text':'*end repeat1*','line_number':442,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, less, less_equal#
 ','line_number':444,'multiline':True]['text':'*end repeat1*','line_number':455,'multiline':True]['text':'*end repeat*','line_number':456,'multiline':True]