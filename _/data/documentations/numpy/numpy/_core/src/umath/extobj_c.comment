['text':' for npy_um_str_pyvals_name ','line_number':17,'multiline':True]['text':'
 * The global ContextVar to store the extobject. It is exposed to Python
 * as `_extobj_contextvar`.
 ','line_number':21,'multiline':True]['text':' Integer mask ','line_number':36,'multiline':True]['text':' The python strings for the above error modes defined in extobj.h ','line_number':47,'multiline':True]['text':' Default user error mode (underflows are ignored, others warn) ','line_number':52,'multiline':True]['text':'
 * Fetch the current error/extobj state and fill it into `npy_extobj *extobj`.
 * On success, the filled `extobj` must be cleared using `npy_extobj_clear`.
 * Returns -1 on failure and 0 on success.
 ','line_number':124,'multiline':True]['text':'
     * First initialize the string constants we need to parse `errstate()`
     * inputs.
     ','line_number':156,'multiline':True]['text':'
 * Parsing helper for extobj_seterrobj to extract the modes
 * "ignore", "raise", etc.
 ','line_number':182,'multiline':True]['text':'
 * This function is currently exposed as `umath._seterrobj()`, it is private
 * and returns a capsule representing the errstate.  This capsule is then
 * assigned to the `npy_extobj_contextvar` in Python.
 ','line_number':212,'multiline':True]['text':' Check that the new buffersize is valid (negative ones mean no change) ','line_number':242,'multiline':True]['text':' Validate func (probably): None, callable, or callable write attribute ','line_number':263,'multiline':True]['text':' Fetch the current extobj, we will mutate it and then store it: ','line_number':277,'multiline':True]['text':' if all is passed use it for any mode not passed explicitly ','line_number':284,'multiline':True]['text':'
 * For inspection purposes, allow fetching a dictionary representing the
 * current extobj/errobj.
 ','line_number':321,'multiline':True]['text':' Set all error modes: ','line_number':339,'multiline':True]['text':' Set the callable: ','line_number':357,'multiline':True]['text':' And the bufsize: ','line_number':361,'multiline':True]['text':'
 * fpstatus is the ufunc_formatted hardware status
 * errmask is the handling mask specified by the user.
 * pyfunc is a Python callable or write method (logging).
 ','line_number':381,'multiline':True]['text':'
 * 2. for each of the flags
 * determine whether to ignore, warn, raise error, or call Python function.
 * If ignore, do nothing
 * If warn, print a warning and continue
 * If raise return an error
 * If call, call a user-defined function with string
 ','line_number':387,'multiline':True]['text':' don't need C API for a simple ignore ','line_number':405,'multiline':True]['text':' don't need C API for a simple print ','line_number':410,'multiline':True]['text':'
 * Extracts some values from the global pyvals tuple.
 * all destinations may be NULL, in which case they are not retrieved
 * ref - should hold the global tuple
 * name - is the name of the ufunc (ufuncobj->name)
 *
 * bufsize - receives the buffer size to use
 * errmask - receives the bitmask for error handling
 * pyfunc - receives the python object to call with the error,
 *          if an error handling method is 'call'
 ','line_number':474,'multiline':True]['text':'
 * Handler which uses the default `np.errstate` given that `fpe_errors` is
 * already set.  `fpe_errors` is typically the (nonzero) result of
 * `npy_get_floatstatus_barrier`.
 *
 * Returns -1 on failure (an error was raised) and 0 on success.
 ','line_number':509,'multiline':True]['text':'
 * check the floating point status
 *  - errmask: mask of status to check
 *  - extobj: ufunc pyvals object
 *            may be null, in which case the thread global one is fetched
 *  - ufunc_name: name of ufunc
 ','line_number':535,'multiline':True]['text':' Get error state parameters ','line_number':556,'multiline':True]