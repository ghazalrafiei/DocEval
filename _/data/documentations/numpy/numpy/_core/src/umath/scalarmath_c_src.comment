['text':' -*- c -*- ','line_number':1,'multiline':True]['text':' The purpose of this module is to add faster math for array scalars
   that does not go through the ufunc machinery

   but still supports error-modes.
','line_number':3,'multiline':True]['text':' TODO: Used for some functions, should possibly move these to npy_math.h ','line_number':39,'multiline':True]['text':' Basic operations:
 *
 *  BINARY:
 *
 * add, subtract, multiply, divide, remainder, divmod, power,
 * floor_divide, true_divide
 *
 * lshift, rshift, and, or, xor (integers only)
 *
 * UNARY:
 *
 * negative, positive, absolute, nonzero, invert, int, long, float, oct, hex
 *
 ','line_number':42,'multiline':True]['text':'*begin repeat
 *  #name = byte, short, int, long, longlong#
 *  #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 ','line_number':57,'multiline':True]['text':'*end repeat*','line_number':78,'multiline':True]['text':'*begin repeat
 *  #name = ubyte, ushort, uint, ulong, ulonglong#
 *  #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 ','line_number':80,'multiline':True]['text':'*end repeat*','line_number':101,'multiline':True]['text':'*begin repeat
 *
 * #name = byte, ubyte, short, ushort,
 *         int, uint, long, ulong#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort,
 *         npy_int, npy_uint, npy_long, npy_ulong#
 * #big =  npy_int, npy_uint, npy_int, npy_uint,
 *         npy_longlong, npy_ulonglong, npy_longlong, npy_ulonglong#
 * #NAME = BYTE, UBYTE, SHORT, USHORT,
 *         INT, UINT, LONG, ULONG#
 * #SIZENAME = BYTE*2, SHORT*2, INT*2, LONG*2#
 * #SIZE = INT*4,LONGLONG*4#
 * #neg = (1,0)*4#
 ','line_number':107,'multiline':True]['text':'*end repeat*','line_number':137,'multiline':True]['text':'*begin repeat
 *
 * #name = int, uint, long, ulong,
 *         longlong, ulonglong#
 * #type = npy_int, npy_uint, npy_long, npy_ulong,
 *         npy_longlong, npy_ulonglong#
 * #SIZE = INT*2, LONG*2, LONGLONG*2#
 ','line_number':139,'multiline':True]['text':'*end repeat*','line_number':156,'multiline':True]['text':'*begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 * #neg = (1,0)*5#
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG#
 ','line_number':158,'multiline':True]['text':' handled like Python does ','line_number':218,'multiline':True]['text':'*end repeat*','line_number':228,'multiline':True]['text':'*begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint, long,
 *         ulong, longlong, ulonglong#
 ','line_number':230,'multiline':True]['text':'*end repeat*','line_number':243,'multiline':True]['text':' b will always be positive in this call ','line_number':245,'multiline':True]['text':'*begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 * #upc = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *        LONG, ULONG, LONGLONG, ULONGLONG#
 ','line_number':246,'multiline':True]['text':'*end repeat*','line_number':280,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 * #suffix = hh,uhh,h,uh,,u,l,ul,ll,ull#
 ','line_number':283,'multiline':True]['text':'*begin repeat1
 * #oper = and, xor, or#
 * #op = &, ^, |#
 ','line_number':291,'multiline':True]['text':'*end repeat1*','line_number':303,'multiline':True]['text':'*end repeat*','line_number':319,'multiline':True]['text':'*begin repeat
 * #name = float, double, longdouble#
 * #type = npy_float, npy_double, npy_longdouble#
 * #c = f, , l#
 ','line_number':321,'multiline':True]['text':'*begin repeat1
 * #OP = +, -, *, /#
 * #oper = add, subtract, multiply, divide#
 ','line_number':327,'multiline':True]['text':'*end repeat1*','line_number':339,'multiline':True]['text':'*end repeat*','line_number':365,'multiline':True]['text':'*begin repeat
 * #OP = +, -, *, /#
 * #oper = add, subtract, multiply, divide#
 ','line_number':367,'multiline':True]['text':'*end repeat*','line_number':380,'multiline':True]['text':'*begin repeat
 * #name = cfloat, cdouble, clongdouble#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 * #TYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #rname = float, double, longdouble#
 * #rtype = npy_float, npy_double, npy_longdouble#
 * #c = f,,l#
 ','line_number':415,'multiline':True]['text':'
 * TODO: Mark as  to work around FPEs not being issues on clang 12.
 *       This should be removed when possible.
 ','line_number':440,'multiline':True]['text':' Use the ufunc loop directly to avoid duplicating the complicated logic ','line_number':452,'multiline':True]['text':'*end repeat*','line_number':465,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong#
 ','line_number':469,'multiline':True]['text':'*end repeat*','line_number':482,'multiline':True]['text':'*begin repeat
 * #name = float, double, longdouble#
 * #type = npy_float, npy_double, npy_longdouble#
 * #c = f,,l#
 ','line_number':485,'multiline':True]['text':'*end repeat*','line_number':498,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong,
 *         float, double, longdouble#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_float, npy_double, npy_longdouble#
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG,
 *         FLOAT, DOUBLE, LONGDOUBLE#
 * #uns = (0,1)*5,0*3#
 * #int = 1*10,0*3#
 ','line_number':509,'multiline':True]['text':' floats ','line_number':538,'multiline':True]['text':'*end repeat*','line_number':543,'multiline':True]['text':'*begin repeat
 * #NAME = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name = cfloat, cdouble, clongdouble#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 * #c = f, , l#
 ','line_number':553,'multiline':True]['text':'*end repeat*','line_number':566,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong,
 *         half, float, double, longdouble#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_half, npy_float, npy_double, npy_longdouble#
 ','line_number':568,'multiline':True]['text':'*end repeat*','line_number':582,'multiline':True]['text':'*begin repeat
 * #NAME = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name = cfloat, cdouble, clongdouble#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 * #c = f,,l#
 ','line_number':584,'multiline':True]['text':'*end repeat*','line_number':604,'multiline':True]['text':'*begin repeat
 * #name = ubyte, ushort, uint, ulong, ulonglong#
 ','line_number':607,'multiline':True]['text':'*end repeat*','line_number':613,'multiline':True]['text':'*begin repeat
 * #name = byte, short, int, long, longlong#
 * #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 * #NAME = BYTE, SHORT, INT, LONG, LONGLONG#
 ','line_number':616,'multiline':True]['text':'*end repeat*','line_number':631,'multiline':True]['text':'*begin repeat
 * #name = float, double, longdouble#
 * #type = npy_float, npy_double, npy_longdouble#
 * #c = f,,l#
 ','line_number':633,'multiline':True]['text':'*end repeat*','line_number':644,'multiline':True]['text':'*begin repeat
 * #name = cfloat, cdouble, clongdouble#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 * #rtype = npy_float, npy_double, npy_longdouble#
 * #c = f,,l#
 ','line_number':653,'multiline':True]['text':'*end repeat*','line_number':665,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint, long,
 *         ulong, longlong, ulonglong#
 ','line_number':667,'multiline':True]['text':'*end repeat*','line_number':679,'multiline':True]['text':'** END OF BASIC CODE *','line_number':681,'multiline':True]['text':'
 * How binary operators work
 * -------------------------
 *
 * All binary (numeric) operators use the larger of the two types, with the
 * exception of unsigned int and signed int mixed cases which must promote
 * to a larger type.
 *
 * The strategy employed for all binary operation is that we coerce the other
 * scalar if it is safe to do.  E.g. `float64 + float32` the `float64` can
 * convert `float32` and do the operation as `float64 + float64`.
 * OTOH, for `float32 + float64` it is safe, and we should defer to `float64`.
 *
 * So we have multiple possible paths:
 * - The other scalar is a subclass.  In principle *both* inputs could be
 *   different subclasses.  In this case it would make sense to defer, but
 *   Python's `int` does not try this as well, so we do not here:
 *
 *      class A(int): pass
 *      class B(int):
 *          def __add__(self, other): return "b"
 *          __radd__ = __add__
 *
 *      A(1) + B(1)  # return 2
 *      B(1) + A(1)  # return "b"
 *
 * - The other scalar can be converted:  All is good, we do the operation
 * - The other scalar cannot be converted, there are two possibilities:
 *   - The reverse should work, so we return NotImplemented to defer.
 *     (If self is a subclass, this will end up in the "unknown" path.)
 *   - Neither works (e.g. `uint8 + int8`):  We currently use the array path.
 * - The other object is a unknown.  It could be either a scalar, an array,
 *   or an array-like (including a list!).  Because NumPy scalars pretend to be
 *   arrays we fall into the array fallback path here _normally_ (through
 *   the generic scalar path).
 *   First we check if we should defer, though.
 *
 * The last possibility is awkward and leads to very confusing situations.
 * The problem is that usually we should defer (return NotImplemented)
 * in that path.
 * If the other object is a NumPy array (or array-like) it will know what to
 * do.  If NumPy knows that it is a scalar (not generic `object`), then it
 * would make sense to try and use the "array path" (i.e. deal with it
 * using the ufunc machinery).
 *
 * But this overlooks two things that currently work:
 *
 * 1. `np.float64(3) * [1, 2, 3]`  happily returns an array result.
 * 2. `np.int32(3) * decimal.Decimal(3)` works!  (see below)
 *
 * The first must work, because scalars pretend to be arrays.  Which means
 * they inherit the greedy "convert the other object to an array" logic.
 * This may be a questionable choice, but is fine.
 * (As of now, it is not negotiable, since NumPy often converts 0-D arrays
 * to scalars.)
 *
 * The second one is more confusing.  This works also by using the ufunc
 * machinery (array path), but it works because:
 *
 *     np.add(np.int32(3), decimal.Decimal(3))
 *
 * Will convert the `int32` to an int32 array, and the decimal to an object
 * array.  It then *casts* the `int32` array to an object array.
 * The casting step CONVERTS the integer to a Python integer.  The ufunc object
 * loop will then call back into Python scalar logic.
 *
 * The above would be recursive, if it was not for the conversion of the int32
 * to a Python integer!
 * This leads us to the EXCEEDINGLY IMPORTANT special case:
 *
 * WARNING: longdouble and clongdouble do NOT convert to a Python scalar
 *          when cast to object.  Thus they MUST NEVER take the array-path.
 *          However, they STILL should defer at least for
 *          `np.longdouble(3) + array`.
 *
 *
 * As a general note, in the above we defer exactly when we know that deferring
 * will work.  `longdouble` uses the "simple" logic of generally deferring
 * though, because it would otherwise easily run into an infinite recursion.
 *
 *
 * The future?!
 * ------------
 *
 * This is very tricky and it would be nice to formalize away that "recursive"
 * path we currently use.  I (seberg) have currently no great idea on this,
 * this is more brainstorming!
 *
 * If both are scalars (known to NumPy), they have a DType and we may be able
 * to do the ufunc promotion to make sure there is no risk of recursion.
 *
 * In principle always deferring would probably be clean.  But we likely cannot
 * do that?  There is also an issue that it is nice that we allow adding a
 * DType for an existing Python scalar (which will not know about NumPy
 * scalars).
 * The DType/ufunc machinery teaches NumPy how arrays will work with that
 * Python scalar, but the DType may need to help us decide whether we should
 * defer (return NotImplemented) or try using the ufunc machinery (or a
 * simplified ufunc-like machinery limited to scalars).
 ','line_number':684,'multiline':True]['text':'
 * Enum used to describe the space of possibilities when converting the second
 * argument to a binary operation.
 * Any of these flags may be combined with the return flag of
 * `may_need_deferring` indicating that the other is any type of object which
 * may e.g. define an `__array_priority__`.
 ','line_number':786,'multiline':True]['text':' An error occurred (should not really happen/be possible) ','line_number':794,'multiline':True]['text':' A known NumPy scalar, but of higher precision: we defer ','line_number':796,'multiline':True]['text':'
     * Conversion was successful (known scalar of less precision).  Note that
     * the other value may still be a subclass of such a scalar so even here
     * we may have to check for deferring.
     * More specialized subclass handling, which defers based on whether the
     * subclass has an implementation, plausible but complicated.
     * We do not do it, as even CPython does not do it for the builtin `int`.
     ','line_number':798,'multiline':True]['text':'
     * We use the normal conversion (setitem) function when coercing from
     * Python scalars.
     ','line_number':807,'multiline':True]['text':'
     * Other object is an unknown scalar or array-like, we (typically) use
     * the generic path, which normally ends up in the ufunc machinery.
     ','line_number':812,'multiline':True]['text':'
     * Promotion necessary
     ','line_number':817,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong,
 *         half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 * #Name = Byte, UByte, Short, UShort, Int, UInt,
 *         Long, ULong, LongLong, ULongLong,
 *         Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble#
 * #TYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_half, npy_float, npy_double, npy_longdouble,
 *         npy_cfloat, npy_cdouble, npy_clongdouble#
 * #c = x*14, f, , l#
 ','line_number':823,'multiline':True]['text':'
 * TODO: This whole thing is awkward, and we should create a helper header to
 *       define inline functions that convert single elements for all numeric
 *       types.  That could then also be used to define all cast loops.
 *       (Even if that may get more complex for SIMD at some point.)
 *       For now, half casts could be optimized because of that.
 ','line_number':847,'multiline':True]['text':'
             * If self can cast safely to other, this is clear:
             * we should definitely defer.
             ','line_number':874,'multiline':True]['text':' Otherwise, we must promote ','line_number':881,'multiline':True]['text':'
 * Complex to complex (and rejecting complex to real) is a bit different:
 ','line_number':886,'multiline':True]['text':' Getting a complex value to real is never safe: ','line_number':910,'multiline':True]['text':'*
 * Convert the value to the own type and and store the result.
 *
 * @param value The value to convert (if compatible)
 * @param result The result value (output)
 * @param may_need_deferring Set to `NPY_TRUE` when the caller must check
 *        `BINOP_GIVE_UP_IF_NEEDED` (or similar) due to possible implementation
 *        of `__array_priority__` (or similar).
 *        This is set for unknown objects and all subclasses even when they
 *        can be handled.
 * @result The result value indicating what we did with `value` or what type
 *         of object it is (see `conversion_result`).
 ','line_number':924,'multiline':True]['text':' Optimize the identical scalar specifically. ','line_number':947,'multiline':True]['text':'
         * In principle special, assyemetric, handling could be possible for
         * explicit subclasses.
         * In practice, we just check the normal deferring logic.
         ','line_number':950,'multiline':True]['text':'
     * Then we check for the basic Python types float, int, and complex.
     * (this is a bit tedious to do right for complex).
     ','line_number':959,'multiline':True]['text':' A NumPy double is a float subclass, but special. ','line_number':970,'multiline':True]['text':' Legacy promotion and weak-and-warn not handled here ','line_number':979,'multiline':True]['text':' Weak promotion is used when self is float or complex: ','line_number':982,'multiline':True]['text':'
             * long -> (c)longdouble is safe, so `OTHER_IS_UNKNOWN_OBJECT` will
             * be returned below for huge integers.
             ','line_number':997,'multiline':True]['text':' Legacy promotion and weak-and-warn not handled here ','line_number':1002,'multiline':True]['text':' handle as if "unsafe" ','line_number':1010,'multiline':True]['text':' should not be possible ','line_number':1017,'multiline':True]['text':' A NumPy complex double is a float subclass, but special. ','line_number':1025,'multiline':True]['text':' Legacy promotion and weak-and-warn not handled here ','line_number':1034,'multiline':True]['text':' Weak promotion is used when self is float or complex: ','line_number':1037,'multiline':True]['text':' should not be possible ','line_number':1046,'multiline':True]['text':' unreachable, always unsafe cast above; return to avoid warning ','line_number':1052,'multiline':True]['text':' defined(IS_CFLOAT) || ... ','line_number':1055,'multiline':True]['text':'
     * (seberg) It would be nice to use `PyArray_DiscoverDTypeFromScalarType`
     * from array coercion here.  OTOH, the array coercion code also falls
     * back to this code.  The issue is around how subclasses should work...
     *
     * It would be nice to try to fully align the paths again (they effectively
     * are equivalent).  Proper support for subclasses is in general tricky,
     * and it would make more sense to just _refuse_ to support them.
     * However, it is unclear that this is a viable option...
     ','line_number':1058,'multiline':True]['text':'
         * The input is an unknown python object.  This should probably defer
         * but only does so for float128.
         * For all other cases, we defer to the array logic.  If the object
         * is indeed not an array-like, this will end up converting the NumPy
         * scalar to a Python scalar and then try again.
         * The logic is that the ufunc casts the input to object, which does
         * the conversion.
         * If the object is an array, deferring will always kick in.
         ','line_number':1069,'multiline':True]['text':' Should not happen, but may be possible with bad user subclasses ','line_number':1088,'multiline':True]['text':'
         * This is a subclass of a builtin type, we may continue normally,
         * but should check whether we need to defer.
         ','line_number':1095,'multiline':True]['text':'
     * Otherwise, we have a clear NumPy scalar, find if it is a compatible
     * builtin scalar.
     * Each `GET_VALUE_OR_DEFER` represents a case clause for its type number,
     * extracting the value if it is safe and otherwise deferring.
     * (Safety is known at compile time, so the switch statement should be
     * simplified by the compiler accordingly.)
     * If we have a scalar that is not listed or not safe, we defer to it.
     *
     * We should probably defer more aggressively, but that is too big a change,
     * since it would disable `np.float64(1.) * [1, 2, 3, 4]`.
     ','line_number':1102,'multiline':True]['text':' set by the GET_VALUE_OR_DEFER macro ','line_number':1114,'multiline':True]['text':' UInts ','line_number':1117,'multiline':True]['text':' Ints ','line_number':1123,'multiline':True]['text':' Floats ','line_number':1129,'multiline':True]['text':' Complex: We should still defer, but the code won't work... ','line_number':1145,'multiline':True]['text':'
             * If there is no match, this is an unknown scalar object.  It
             * would make sense to defer generously here, but it should also
             * always be safe to use the array path.
             * The issue is, that the other scalar may or may not be designed
             * to deal with NumPy scalars.  Without knowing that, we cannot
             * defer (which would be much faster potentially).
             * TODO: We could add a DType flag to allow opting in to deferring!
             ','line_number':1150,'multiline':True]['text':'*end repeat*','line_number':1172,'multiline':True]['text':'*begin repeat
 *
 * #name = (byte, ubyte, short, ushort, int, uint,
 *             long, ulong, longlong, ulonglong)*12,
 *         (half, float, double, longdouble,
 *             cfloat, cdouble, clongdouble)*4,
 *         (half, float, double, longdouble)*3#
 * #Name = (Byte, UByte, Short, UShort, Int, UInt,
 *             Long, ULong,LongLong,ULongLong)*12,
 *         (Half, Float, Double, LongDouble,
 *             CFloat, CDouble, CLongDouble)*4,
 *         (Half, Float, Double, LongDouble)*3#
 * #NAME = (BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *              LONG, ULONG, LONGLONG, ULONGLONG)*12,
 *          (HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *              CFLOAT, CDOUBLE, CLONGDOUBLE)*4,
 *          (HALF, FLOAT, DOUBLE, LONGDOUBLE)*3#
 * #type = (npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *             npy_long, npy_ulong, npy_longlong, npy_ulonglong)*12,
 *         (npy_half, npy_float, npy_double, npy_longdouble,
 *             npy_cfloat, npy_cdouble, npy_clongdouble)*4,
 *         (npy_half, npy_float, npy_double, npy_longdouble)*3#
 *
 * #oper = add*10, subtract*10, multiply*10, remainder*10,
 *         divmod*10, floor_divide*10, lshift*10, rshift*10, and*10,
 *         or*10, xor*10, true_divide*10,
 *         add*7, subtract*7, multiply*7, true_divide*7,
 *         floor_divide*4, divmod*4, remainder*4#
 *
 * #fperr = 0*110, 1*10,
 *          1*28, 1*12#
 * #twoout = 0*40,1*10,0*70,
 *           0*28,
 *           0*4,1*4,0*4#
 * #otype = (npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *             npy_long, npy_ulong, npy_longlong, npy_ulonglong)*11,
 *         npy_double*10,
 *         (npy_half, npy_float, npy_double, npy_longdouble,
 *             npy_cfloat, npy_cdouble, npy_clongdouble)*4,
 *         (npy_half, npy_float, npy_double, npy_longdouble)*3#
 * #OName = (Byte, UByte, Short, UShort, Int, UInt,
 *              Long, ULong, LongLong, ULongLong)*11,
 *          Double*10,
 *          (Half, Float, Double, LongDouble,
 *              CFloat, CDouble, CLongDouble)*4,
 *          (Half, Float, Double, LongDouble)*3#
 ','line_number':1175,'multiline':True]['text':' drop the "true_" from "true_divide" for floating point warnings: ','line_number':1223,'multiline':True]['text':'
     * Check if this operation may be considered forward.  Note `is_forward`
     * does not imply that we can defer to a subclass `b`.  It just means that
     * the first operand fits to the method.
     ','line_number':1237,'multiline':True]['text':' subclasses are involved ','line_number':1250,'multiline':True]['text':'
     * Extract the other value (if it is compatible).  Otherwise, decide
     * how to deal with it.  This is somewhat complicated.
     *
     * Note: This pattern is used multiple times below.
     ','line_number':1255,'multiline':True]['text':' an error occurred (should never happen) ','line_number':1267,'multiline':True]['text':'
             * defer to other;  This is normally a forward operation.  However,
             * it could be backward if an operation is undefined forward.
             * An example is the complex remainder `complex % bool` will defer
             * even though it would normally handle the operation.
             ','line_number':1274,'multiline':True]['text':' successfully extracted value we can proceed ','line_number':1282,'multiline':True]['text':'
             * Either an array-like, unknown scalar (any Python object, but
             * also integers that are too large to convert to `long`), or
             * even a subclass of a NumPy scalar (currently).
             *
             * Generally, we try dropping through to the array path here,
             * but this can lead to infinite recursions for (c)longdouble.
             ','line_number':1284,'multiline':True]['text':'
             * Python scalar that is larger than the current one, or two
             * NumPy scalars that promote to a third (uint16 + int16 -> int32).
             *
             * TODO: We could special case the promotion case here for much
             *       better speed and to deal with integer overflow warnings
             *       correctly.  (e.g. `uint8 * int8` cannot warn).
             ','line_number':1296,'multiline':True]['text':' error was checked already, impossible to reach ','line_number':1311,'multiline':True]['text':'
     * Prepare the actual calculation.
     ','line_number':1327,'multiline':True]['text':'
     * here we do the actual calculation with arg1 and arg2
     * as a function call.
     * Note that `retstatus` is the "floating point error" value for integer
     * functions.  Float functions should always return 0, and then use
     * the following `npy_get_floatstatus_barrier`.
     ','line_number':1336,'multiline':True]['text':' Check status flag.  If it is set, then look up what to do ','line_number':1350,'multiline':True]['text':'*end repeat*','line_number':1394,'multiline':True]['text':'*begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong,
 *         half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 *
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_half, npy_float, npy_double, npy_longdouble,
 *         npy_cfloat, npy_cdouble, npy_clongdouble#
 *
 * #Name = Byte, UByte, Short, UShort, Int, UInt,
 *         Long, ULong, LongLong, ULongLong,
 *         Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble#
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 *
 * #isint = 1*10,0*7#
 * #isuint = (0,1)*5,0*7#
 * #cmplx = 0*14,1*3#
 * #iszero = _IS_ZERO*10, npy_half_iszero, _IS_ZERO*6#
 * #zero = 0*10, NPY_HALF_ZERO, 0*6#
 * #one = 1*10, NPY_HALF_ONE, 1*6#
 ','line_number':1398,'multiline':True]['text':' modular exponentiation is not implemented (gh-8804) ','line_number':1432,'multiline':True]['text':' subclasses are involved ','line_number':1448,'multiline':True]['text':'
     * Extract the other value (if it is compatible). See the generic
     * (non power) version above for detailed notes.
     ','line_number':1452,'multiline':True]['text':' an error occurred (should never happen) ','line_number':1461,'multiline':True]['text':' successfully extracted value we can proceed ','line_number':1470,'multiline':True]['text':' error was checked already, impossible to reach ','line_number':1483,'multiline':True]['text':'
     * Prepare the actual calculation:
     ','line_number':1500,'multiline':True]['text':'
     * here we do the actual calculation with arg1 and arg2
     * as a function call.
     ','line_number':1505,'multiline':True]['text':' Check status flag.  If it is set, then look up what to do ','line_number':1519,'multiline':True]['text':'*end repeat*','line_number':1539,'multiline':True]['text':'*begin repeat
 *
 * #name = (cfloat, cdouble, clongdouble)*3#
 * #oper = floor_divide*3, divmod*3, remainder*3#
 *
 ','line_number':1543,'multiline':True]['text':'
 * Complex numbers do not support remainder so we manually make sure that the
 * operation is not defined.  This is/was especially important for longdoubles
 * due to their tendency to recurse for some operations, see gh-18548.
 * (We need to define the slots to avoid inheriting it.)
 ','line_number':1550,'multiline':True]['text':'*end repeat*','line_number':1562,'multiline':True]['text':'*begin repeat
 *
 * #name = half, float, double, longdouble, cfloat, cdouble, clongdouble#
 *
 ','line_number':1564,'multiline':True]['text':'*begin repeat1
 *
 * #oper = lshift, rshift, and, or, xor#
 *
 ','line_number':1570,'multiline':True]['text':'*end repeat1*','line_number':1578,'multiline':True]['text':'*end repeat*','line_number':1580,'multiline':True]['text':'*begin repeat
 * #name = (byte, ubyte, short, ushort, int, uint,
 *             long, ulong, longlong, ulonglong,
 *             half, float, double, longdouble,
 *             cfloat, cdouble, clongdouble)*3,
 *
 *         byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong#
 *
 * #Name = (Byte, UByte, Short, UShort, Int, UInt,
 *             Long, ULong, LongLong, ULongLong,
 *             Half, Float, Double, LongDouble,
 *             CFloat, CDouble, CLongDouble)*3,
 *
 *         Byte, UByte, Short, UShort, Int, UInt,
 *         Long, ULong, LongLong, ULongLong#
 *
 * #type = (npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *             npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *             npy_half, npy_float, npy_double, npy_longdouble,
 *             npy_cfloat, npy_cdouble, npy_clongdouble)*3,
 *
 *         npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 *
 * #otype = (npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *             npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *             npy_half, npy_float, npy_double, npy_longdouble,
 *             npy_cfloat, npy_cdouble, npy_clongdouble)*2,
 *         npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_half, npy_float, npy_double, npy_longdouble,
 *         npy_float, npy_double, npy_longdouble,
 *
 *         npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 *
 * #OName = (Byte, UByte, Short, UShort, Int, UInt,
 *              Long, ULong, LongLong, ULongLong,
 *              Half, Float, Double, LongDouble,
 *              CFloat, CDouble, CLongDouble)*2,
 *          Byte, UByte, Short, UShort, Int, UInt,
 *          Long, ULong, LongLong, ULongLong,
 *          Half, Float, Double, LongDouble,
 *          Float, Double, LongDouble,
 *
 *          Byte, UByte, Short, UShort, Int, UInt,
 *          Long, ULong, LongLong, ULongLong#
 *
 * #oper = negative*17, positive*17, absolute*17, invert*10#
 ','line_number':1582,'multiline':True]['text':'
     * TODO: Complex absolute should check floating point flags.
     ','line_number':1650,'multiline':True]['text':'*end repeat*','line_number':1659,'multiline':True]['text':'*begin repeat
 *
 * #name = half, float, double, longdouble, cfloat, cdouble, clongdouble#
 ','line_number':1661,'multiline':True]['text':'*end repeat*','line_number':1668,'multiline':True]['text':'*begin repeat
 *
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT,
 *         UINT, LONG, ULONG, LONGLONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name = byte, ubyte, short, ushort, int,
 *         uint, long, ulong, longlong, ulonglong,
 *         half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 * #Name = Byte, UByte, Short, UShort, Int, UInt,
 *         Long, ULong, LongLong, ULongLong,
 *         Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int,
 *         npy_uint, npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_half, npy_float, npy_double, npy_longdouble,
 *         npy_cfloat, npy_cdouble, npy_clongdouble#
 * #t = x*14, f, , l#
 * #simp = 1*14, 0*3#
 * #nonzero = _IS_NONZERO*10, !npy_half_iszero, _IS_NONZERO*6#
 ','line_number':1671,'multiline':True]['text':'*end repeat*','line_number':1709,'multiline':True]['text':'*begin repeat
 *
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT,
 *         UINT, LONG, ULONG, LONGLONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name = byte, ubyte, short, ushort, int,
 *         uint, long, ulong, longlong, ulonglong,
 *         half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 *
 * #Name = Byte, UByte, Short, UShort, Int,
 *         UInt, Long, ULong, LongLong, ULongLong,
 *         Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble#
 * #n = x*14, f, , l#
 *
 * #cmplx = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1#
 * #sign = (signed, unsigned)*5, , , , , , , #
 * #ctype = long*8, PY_LONG_LONG*2,
 *          double*3, npy_longdouble, double*2, npy_longdouble#
 * #to_ctype = , , , , , , , , , , npy_half_to_double, , , , , , #
 * #func = (PyLong_FromLong, PyLong_FromUnsignedLong)*4,
 *         PyLong_FromLongLong, PyLong_FromUnsignedLongLong,
 *         PyLong_FromDouble*3, npy_longdouble_to_PyLong,
 *         PyLong_FromDouble*2, npy_longdouble_to_PyLong#
 ','line_number':1725,'multiline':True]['text':'*end repeat*','line_number':1776,'multiline':True]['text':'*begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint,
 *             long, ulong, longlong, ulonglong,
 *             half, float, double, longdouble,
 *             cfloat, cdouble, clongdouble#
 * #Name = Byte, UByte, Short, UShort, Int, UInt,
 *             Long, ULong, LongLong, ULongLong,
 *             Half, Float, Double, LongDouble,
 *             CFloat, CDouble, CLongDouble#
 * #n = x*14, f, , l#
 * #cmplx = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1#
 * #to_ctype = , , , , , , , , , , npy_half_to_double, , , , , , #
 * #func = PyFloat_FromDouble*17#
 ','line_number':1778,'multiline':True]['text':'*end repeat*','line_number':1805,'multiline':True]['text':'*begin repeat
 * #oper = le, ge, lt, gt, eq, ne#
 * #op = <=, >=, <, >, ==, !=#
 * #halfop = npy_half_le, npy_half_ge, npy_half_lt,
 *           npy_half_gt, npy_half_eq, npy_half_ne#
 ','line_number':1807,'multiline':True]['text':'*end repeat*','line_number':1824,'multiline':True]['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong,
 *         half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 * #Name = Byte, UByte, Short, UShort, Int, UInt,
 *         Long, ULong, LongLong, ULongLong,
 *         Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble#
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #isint = 1*10, 0*7#
 * #simp = def*10, def_half, def*3, fcmplx, cmplx, lcmplx#
 ','line_number':1826,'multiline':True]['text':' Special case comparison with python integers ','line_number':1851,'multiline':True]['text':'
     * Extract the other value (if it is compatible).
     ','line_number':1871,'multiline':True]['text':' an error occurred (should never happen) ','line_number':1877,'multiline':True]['text':' successfully extracted value we can proceed ','line_number':1886,'multiline':True]['text':' error was checked already, impossible to reach ','line_number':1899,'multiline':True]['text':' here we do the actual calculation with arg1 and arg2 ','line_number':1905,'multiline':True]['text':'*end repeat*','line_number':1936,'multiline':True]['text':'*begin repeat
 *  #name = byte, ubyte, short, ushort, int, uint,
 *          long, ulong, longlong, ulonglong,
 *          half, float, double, longdouble,
 *          cfloat, cdouble, clongdouble#
*','line_number':1939,'multiline':True]['text':' TODO: This struct/initialization should not be split between files ','line_number':1966,'multiline':True]['text':' set in add_scalarmath below ','line_number':1967,'multiline':True]['text':'*end repeat*','line_number':1969,'multiline':True]['text':'*begin repeat
     *  #name = byte, ubyte, short, ushort, int, uint,
     *          long, ulong, longlong, ulonglong,
     *          half, float, double, longdouble,
     *          cfloat, cdouble, clongdouble#
     *  #NAME = Byte, UByte, Short, UShort, Int, UInt,
     *          Long, ULong, LongLong, ULongLong,
     *          Half, Float, Double, LongDouble,
     *          CFloat, CDouble, CLongDouble#
     *','line_number':1974,'multiline':True]['text':'*end repeat*','line_number':1987,'multiline':True]