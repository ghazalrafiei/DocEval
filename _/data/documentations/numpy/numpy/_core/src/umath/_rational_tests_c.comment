['text':' Fixed size rational numbers exposed to Python ','line_number':1,'multiline':True]['text':' for error_converting ','line_number':10,'multiline':True]['text':' Relevant arithmetic exceptions ','line_number':15,'multiline':True]['text':' Uncomment the following line to work around a bug in numpy ','line_number':17,'multiline':True]['text':' #define ACQUIRE_GIL ','line_number':18,'multiline':True]['text':' Need to grab the GIL to dodge a bug in numpy ','line_number':23,'multiline':True]['text':' Need to grab the GIL to dodge a bug in numpy ','line_number':38,'multiline':True]['text':' Integer arithmetic utilities ','line_number':50,'multiline':True]['text':' Fixed precision rational numbers ','line_number':119,'multiline':True]['text':' numerator ','line_number':122,'multiline':True]['text':'
     * denominator minus one: numpy.zeros() uses memset(0) for non-object
     * types, so need to ensure that rational(0) has all zero bytes
     ','line_number':124,'multiline':True]['text':' Assumes d_ > 0 ','line_number':172,'multiline':True]['text':'
     * Note that the numerator computation can never overflow int128_t,
     * since each term is strictly under 2**128/4 (since d > 0).
     ','line_number':197,'multiline':True]['text':' We're safe from overflow as with + ','line_number':207,'multiline':True]['text':' We're safe from overflow as with + ','line_number':214,'multiline':True]['text':' Always round down ','line_number':225,'multiline':True]['text':'
     * This can be done without casting up to 64 bits, but it requires
     * working out all the sign cases
     ','line_number':229,'multiline':True]['text':'
     * Round towards nearest integer, moving exact half integers towards
     * zero
     ','line_number':257,'multiline':True]['text':'
     * Since we enforce d > 0, and store fractions in reduced form,
     * equality is easy.
     ','line_number':291,'multiline':True]['text':' Expose rational to Python as a numpy scalar ','line_number':361,'multiline':True]['text':' TODO: allow construction from unicode strings','line_number':409,'multiline':False]['text':' Check that we had an exact integer ','line_number':443,'multiline':True]['text':'
 * Returns Py_NotImplemented on most conversion failures, or raises an
 * overflow error for too long ints
 ','line_number':468,'multiline':True]['text':' Use a fairly weak hash as Python expects ','line_number':555,'multiline':True]['text':' Never return the special error value -1 ','line_number':557,'multiline':True]['text':' nb_add ','line_number':610,'multiline':True]['text':' nb_subtract ','line_number':611,'multiline':True]['text':' nb_multiply ','line_number':612,'multiline':True]['text':' nb_remainder ','line_number':613,'multiline':True]['text':' nb_divmod ','line_number':614,'multiline':True]['text':' nb_power ','line_number':615,'multiline':True]['text':' nb_negative ','line_number':616,'multiline':True]['text':' nb_positive ','line_number':617,'multiline':True]['text':' nb_absolute ','line_number':618,'multiline':True]['text':' nb_nonzero ','line_number':619,'multiline':True]['text':' nb_invert ','line_number':620,'multiline':True]['text':' nb_lshift ','line_number':621,'multiline':True]['text':' nb_rshift ','line_number':622,'multiline':True]['text':' nb_and ','line_number':623,'multiline':True]['text':' nb_xor ','line_number':624,'multiline':True]['text':' nb_or ','line_number':625,'multiline':True]['text':' nb_int ','line_number':626,'multiline':True]['text':' reserved ','line_number':627,'multiline':True]['text':' nb_float ','line_number':628,'multiline':True]['text':' nb_inplace_add ','line_number':630,'multiline':True]['text':' nb_inplace_subtract ','line_number':631,'multiline':True]['text':' nb_inplace_multiply ','line_number':632,'multiline':True]['text':' nb_inplace_remainder ','line_number':633,'multiline':True]['text':' nb_inplace_power ','line_number':634,'multiline':True]['text':' nb_inplace_lshift ','line_number':635,'multiline':True]['text':' nb_inplace_rshift ','line_number':636,'multiline':True]['text':' nb_inplace_and ','line_number':637,'multiline':True]['text':' nb_inplace_xor ','line_number':638,'multiline':True]['text':' nb_inplace_or ','line_number':639,'multiline':True]['text':' nb_floor_divide ','line_number':641,'multiline':True]['text':' nb_true_divide ','line_number':642,'multiline':True]['text':' nb_inplace_floor_divide ','line_number':643,'multiline':True]['text':' nb_inplace_true_divide ','line_number':644,'multiline':True]['text':' nb_index ','line_number':645,'multiline':True]['text':' sentinel ','line_number':661,'multiline':True]['text':' tp_name ','line_number':666,'multiline':True]['text':' tp_basicsize ','line_number':667,'multiline':True]['text':' tp_itemsize ','line_number':668,'multiline':True]['text':' tp_dealloc ','line_number':669,'multiline':True]['text':' tp_print ','line_number':670,'multiline':True]['text':' tp_getattr ','line_number':671,'multiline':True]['text':' tp_setattr ','line_number':672,'multiline':True]['text':' tp_reserved ','line_number':673,'multiline':True]['text':' tp_repr ','line_number':674,'multiline':True]['text':' tp_as_number ','line_number':675,'multiline':True]['text':' tp_as_sequence ','line_number':676,'multiline':True]['text':' tp_as_mapping ','line_number':677,'multiline':True]['text':' tp_hash ','line_number':678,'multiline':True]['text':' tp_call ','line_number':679,'multiline':True]['text':' tp_str ','line_number':680,'multiline':True]['text':' tp_getattro ','line_number':681,'multiline':True]['text':' tp_setattro ','line_number':682,'multiline':True]['text':' tp_as_buffer ','line_number':683,'multiline':True]['text':' tp_flags ','line_number':684,'multiline':True]['text':' tp_doc ','line_number':685,'multiline':True]['text':' tp_traverse ','line_number':686,'multiline':True]['text':' tp_clear ','line_number':687,'multiline':True]['text':' tp_richcompare ','line_number':688,'multiline':True]['text':' tp_weaklistoffset ','line_number':689,'multiline':True]['text':' tp_iter ','line_number':690,'multiline':True]['text':' tp_iternext ','line_number':691,'multiline':True]['text':' tp_methods ','line_number':692,'multiline':True]['text':' tp_members ','line_number':693,'multiline':True]['text':' tp_getset ','line_number':694,'multiline':True]['text':' tp_base ','line_number':695,'multiline':True]['text':' tp_dict ','line_number':696,'multiline':True]['text':' tp_descr_get ','line_number':697,'multiline':True]['text':' tp_descr_set ','line_number':698,'multiline':True]['text':' tp_dictoffset ','line_number':699,'multiline':True]['text':' tp_init ','line_number':700,'multiline':True]['text':' tp_alloc ','line_number':701,'multiline':True]['text':' tp_new ','line_number':702,'multiline':True]['text':' tp_free ','line_number':703,'multiline':True]['text':' tp_is_gc ','line_number':704,'multiline':True]['text':' tp_bases ','line_number':705,'multiline':True]['text':' tp_mro ','line_number':706,'multiline':True]['text':' tp_cache ','line_number':707,'multiline':True]['text':' tp_subclasses ','line_number':708,'multiline':True]['text':' tp_weaklist ','line_number':709,'multiline':True]['text':' tp_del ','line_number':710,'multiline':True]['text':' tp_version_tag ','line_number':711,'multiline':True]['text':' NumPy support ','line_number':714,'multiline':True]['text':' typeobj ','line_number':893,'multiline':True]['text':' kind ','line_number':894,'multiline':True]['text':' type ','line_number':895,'multiline':True]['text':' byteorder ','line_number':896,'multiline':True]['text':'
     * For now, we need NPY_NEEDS_PYAPI in order to make numpy detect our
     * exceptions.  This isn't technically necessary,
     * since we're careful about thread safety, and hopefully future
     * versions of numpy will recognize that.
     ','line_number':897,'multiline':True]['text':' hasobject ','line_number':903,'multiline':True]['text':' type_num ','line_number':904,'multiline':True]['text':' elsize ','line_number':905,'multiline':True]['text':' alignment ','line_number':906,'multiline':True]['text':' subarray ','line_number':907,'multiline':True]['text':' fields ','line_number':908,'multiline':True]['text':' names ','line_number':909,'multiline':True]['text':' f ','line_number':910,'multiline':True]['text':' pointers to data for input and output arrays ','line_number':1002,'multiline':True]['text':' lengths of core dimensions ','line_number':1007,'multiline':True]['text':' striding over core dimensions ','line_number':1012,'multiline':True]['text':' core dimensions counters ','line_number':1020,'multiline':True]['text':' calculate dot product for each row/column vector pair ','line_number':1023,'multiline':True]['text':' advance to next column of 2nd input array and output array ','line_number':1028,'multiline':True]['text':' reset to first column of 2nd input array and output array ','line_number':1033,'multiline':True]['text':' advance to next row of 1st input array and output array ','line_number':1037,'multiline':True]['text':' outer dimensions counter ','line_number':1048,'multiline':True]['text':' length of flattened outer dimensions ','line_number':1051,'multiline':True]['text':' striding over flattened outer dimensions for input and output arrays ','line_number':1054,'multiline':True]['text':'
     * loop through outer dimensions, performing matrix multiply on
     * core dimensions for each loop
     ','line_number':1059,'multiline':True]['text':' sentinel ','line_number':1101,'multiline':True]['text':' Can't set this until we import numpy ','line_number':1140,'multiline':True]['text':' Initialize rational type object ','line_number':1143,'multiline':True]['text':' Initialize rational descriptor ','line_number':1148,'multiline':True]['text':' Left undefined: scanfunc, fromstr, sort, argsort ','line_number':1161,'multiline':True]['text':' Support dtype(rational) syntax ','line_number':1168,'multiline':True]['text':' Register casts to and from rational ','line_number':1174,'multiline':True]['text':' Register ufuncs ','line_number':1203,'multiline':True]['text':' Binary ','line_number':1232,'multiline':True]['text':' Comparisons ','line_number':1242,'multiline':True]['text':' Unary ','line_number':1249,'multiline':True]['text':' Create module ','line_number':1260,'multiline':True]['text':' Add rational type ','line_number':1267,'multiline':True]['text':' Create matrix multiply generalized ufunc ','line_number':1271,'multiline':True]['text':' Create test ufunc with built in input types and rational output type ','line_number':1288,'multiline':True]['text':' Create test ufunc with rational types using RegisterLoopForDescr ','line_number':1305,'multiline':True]['text':' Create numerator and denominator ufuncs ','line_number':1324,'multiline':True]['text':' Create gcd and lcm ufuncs ','line_number':1341,'multiline':True]