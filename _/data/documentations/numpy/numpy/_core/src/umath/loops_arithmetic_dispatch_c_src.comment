['text':'@targets
 ** $maxopt baseline
 ** sse2 sse41 avx2 avx512f avx512_skx
 ** vsx2 vsx4
 ** neon
 ** vx
 *','line_number':1,'multiline':True]['text':' Provides the various *_LOOP macros','line_number':16,'multiline':False]['text':'###############################################################################','line_number':19,'multiline':False]['text':'## Division','line_number':20,'multiline':False]['text':'###############################################################################','line_number':21,'multiline':False]['text':'*******************************************************************************
 ** Defining the SIMD kernels
 *
 * Floor division of signed is based on T. Granlund and P. L. Montgomery
 * "Division by invariant integers using multiplication(see [Figure 6.1]
 * https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.1.2556)"
 * For details on TRUNC division see simd/intdiv.h for more clarification
 ***********************************************************************************
 ** Figure 6.1: Signed division by run-time invariant divisor, rounded towards -INF
 ***********************************************************************************
 * For q = FLOOR(a/d), all sword:
 *     sword -dsign = SRL(d, N - 1);
 *     uword -nsign = (n < -dsign);
 *     uword -qsign = EOR(-nsign, -dsign);
 *     q = TRUNC((n - (-dsign ) + (-nsign))/d) - (-qsign);
 *******************************************************************************','line_number':22,'multiline':True]['text':'*begin repeat
 * Signed types
 * #sfx    = s8, s16, s32, s64#
 * #len    = 8,  16,  32,  64#
 ','line_number':40,'multiline':True]['text':' Negative quotients needs to be rounded down','line_number':95,'multiline':False]['text':'*end repeat*','line_number':104,'multiline':True]['text':'*begin repeat
 * Unsigned types
 * #sfx    = u8, u16, u32, u64#
 * #len    = 8,  16,  32,  64#
 ','line_number':106,'multiline':True]['text':'*end repeat*','line_number':132,'multiline':True]['text':'*begin repeat
 * #t = u, s#
 * #signed = 0, 1#
 ','line_number':136,'multiline':True]['text':'
 * Computes division of 2 8-bit signed/unsigned integer vectors
 *
 * As Power10 only supports integer vector division for data of 32 bits or
 * greater, we have to convert npyv_u8 into 4x npyv_u32, execute the integer
 * vector division instruction, and then, convert the result back to npyv_u8.
 ','line_number':140,'multiline':True]['text':'*end repeat*','line_number':203,'multiline':True]['text':'*begin repeat
 * Unsigned types
 * #sfx = u8, u16, u32, u64#
 * #len = 8,  16,  32,  64#
 ','line_number':205,'multiline':True]['text':'*end repeat*','line_number':242,'multiline':True]['text':'*begin repeat
 * Signed types
 * #sfx = s8, s16, s32, s64#
 * #len = 8,  16,  32,  64#
 ','line_number':244,'multiline':True]['text':' (b == 0 || (a == NPY_MIN_INT@len@ && b == -1))','line_number':268,'multiline':False]['text':' handle mixed case the way Python does','line_number':275,'multiline':False]['text':' ((a > 0) == (b > 0) || rem == 0)','line_number':276,'multiline':False]['text':' Divide by zero','line_number':284,'multiline':False]['text':' Overflow','line_number':286,'multiline':False]['text':'*end repeat*','line_number':316,'multiline':True]['text':' NPY_HAVE_VSX4','line_number':317,'multiline':False]['text':' NPY_SIMD','line_number':318,'multiline':False]['text':'*******************************************************************************
 ** Defining ufunc inner functions
 *******************************************************************************','line_number':320,'multiline':True]['text':'*begin repeat
 * Signed types
 *  #type  = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 *  #TYPE  = BYTE,     SHORT,     INT,     LONG,     LONGLONG#
 ','line_number':324,'multiline':True]['text':'*begin repeat1
 * #len = 8, 16, 32, 64#
 ','line_number':331,'multiline':True]['text':'*end repeat1*','line_number':336,'multiline':True]['text':'
     * FIXME: On x86 at least, dividing the smallest representable integer
     * by -1 causes a SIFGPE (division overflow). We treat this case here
     * (to avoid a SIGFPE crash at python level), but a good solution would
     * be to treat integer division problems separately from FPU exceptions
     * (i.e. a different approach than npy_set_floatstatus_divbyzero()).
     ','line_number':345,'multiline':True]['text':' Negative quotients needs to be rounded down','line_number':363,'multiline':False]['text':' both arguments are arrays of the same size','line_number':381,'multiline':False]['text':' for contiguous block of memory, divisor is a scalar and not 0','line_number':386,'multiline':False]['text':'*end repeat*','line_number':421,'multiline':True]['text':'*begin repeat
 * Unsigned types
 *  #type  = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 *  #TYPE  = UBYTE,     USHORT,     UINT,     ULONG,     ULONGLONG#
 *  #STYPE = BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 ','line_number':423,'multiline':True]['text':'*begin repeat1
 * #len = 8, 16, 32, 64#
 ','line_number':431,'multiline':True]['text':'*end repeat1*','line_number':436,'multiline':True]['text':'
 * For 64-bit division on Armv7, Aarch64, and IBM/Power, NPYV fall-backs to the scalar division
 * because emulating multiply-high on these architectures is going to be expensive comparing
 * to the native scalar dividers.
 * Therefore it's better to disable NPYV in this special case to avoid any unnecessary shuffles.
 * Power10(VSX4) is an exception here since it has native support for integer vector division.
 ','line_number':438,'multiline':True]['text':' both arguments are arrays of the same size','line_number':465,'multiline':False]['text':' for contiguous block of memory, divisor is a scalar and not 0','line_number':470,'multiline':False]['text':'*end repeat*','line_number':518,'multiline':True]