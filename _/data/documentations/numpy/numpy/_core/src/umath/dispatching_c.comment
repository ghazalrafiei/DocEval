['text':'
 * This file implements universal function dispatching and promotion (which
 * is necessary to happen before dispatching).
 * This is part of the UFunc object.  Promotion and dispatching uses the
 * following things:
 *
 * - operand_DTypes:  The datatypes as passed in by the user.
 * - signature: The DTypes fixed by the user with `dtype=` or `signature=`.
 * - ufunc._loops: A list of all ArrayMethods and promoters, it contains
 *   tuples `(dtypes, ArrayMethod)` or `(dtypes, promoter)`.
 * - ufunc._dispatch_cache: A cache to store previous promotion and/or
 *   dispatching results.
 * - The actual arrays are used to support the old code paths where necessary.
 *   (this includes any value-based casting/promotion logic)
 *
 * In general, `operand_Dtypes` is always overridden by `signature`.  If a
 * DType is included in the `signature` it must match precisely.
 *
 * The process of dispatching and promotion can be summarized in the following
 * steps:
 *
 * 1. Override any `operand_DTypes` from `signature`.
 * 2. Check if the new `operand_Dtypes` is cached (if it is, got to 4.)
 * 3. Find the best matching "loop".  This is done using multiple dispatching
 *    on all `operand_DTypes` and loop `dtypes`.  A matching loop must be
 *    one whose DTypes are superclasses of the `operand_DTypes` (that are
 *    defined).  The best matching loop must be better than any other matching
 *    loop.  This result is cached.
 * 4. If the found loop is a promoter: We call the promoter. It can modify
 *    the `operand_DTypes` currently.  Then go back to step 2.
 *    (The promoter can call arbitrary code, so it could even add the matching
 *    loop first.)
 * 5. The final `ArrayMethod` is found, its registered `dtypes` is copied
 *    into the `signature` so that it is available to the ufunc loop.
 *
 ','line_number':1,'multiline':True]['text':' forward declaration ','line_number':61,'multiline':True]['text':'*
 * Function to add a new loop to the ufunc.  This mainly appends it to the
 * list (as it currently is just a list).
 *
 * @param ufunc The universal function to add the loop to.
 * @param info The tuple (dtype_tuple, ArrayMethod/promoter).
 * @param ignore_duplicate If 1 and a loop with the same `dtype_tuple` is
 *        found, the function does nothing.
 ','line_number':70,'multiline':True]['text':'
     * Validate the info object, this should likely move to a different
     * entry-point in the future (and is mostly unnecessary currently).
     ','line_number':82,'multiline':True]['text':'
 * Add loop directly to a ufunc from a given ArrayMethod spec.
 ','line_number':150,'multiline':True]['text':'*
 * Resolves the implementation to use, this uses typical multiple dispatching
 * methods of finding the best matching implementation or resolver.
 * (Based on `isinstance()`, the knowledge that non-abstract DTypes cannot
 * be subclassed is used, however.)
 *
 * NOTE: This currently does not take into account output dtypes which do not
 *       have to match.  The possible extension here is that if an output
 *       is given (and thus an output dtype), but not part of the signature
 *       we could ignore it for matching, but *prefer* a loop that matches
 *       better.
 *       Why is this not done currently?  First, it seems a niche feature that
 *       loops can only be distinguished based on the output dtype.  Second,
 *       there are some nasty theoretical things because:
 *
 *            np.add(f4, f4, out=f8)
 *            np.add(f4, f4, out=f8, dtype=f8)
 *
 *       are different, the first uses the f4 loop, the second the f8 loop.
 *       The problem is, that the current cache only uses the op_dtypes and
 *       both are `(f4, f4, f8)`.  The cache would need to store also which
 *       output was provided by `dtype=`/`signature=`.
 *
 * @param ufunc
 * @param op_dtypes The DTypes that are either passed in (defined by an
 *        operand) or defined by the `signature` as also passed in as
 *        `fixed_DTypes`.
 * @param out_info Returns the tuple describing the best implementation
 *        (consisting of dtypes and ArrayMethod or promoter).
 *        WARNING: Returns a borrowed reference!
 * @returns -1 on error 0 on success.  Note that the output can be NULL on
 *          success if nothing is found.
 ','line_number':189,'multiline':True]['text':' Test all resolvers  ','line_number':244,'multiline':True]['text':'
         * Test if the current resolver matches, it could make sense to
         * reorder these checks to avoid the IsSubclass check as much as
         * possible.
         ','line_number':254,'multiline':True]['text':'
         * NOTE: We currently match the output dtype exactly here, this is
         *       actually only necessary if the signature includes.
         *       Currently, we rely that op-dtypes[nin:nout] is NULLed if not.
         ','line_number':261,'multiline':True]['text':' Unspecified out always matches (see below for inputs) ','line_number':273,'multiline':True]['text':'
                 * This is a reduce-like operation, which always have the form
                 * `(res_DType, op_DType, res_DType)`.  If the first and last
                 * dtype of the loops match, this should be reduce-compatible.
                 ','line_number':276,'multiline':True]['text':'
                 * This should be a reduce, but doesn't follow the reduce
                 * pattern.  So (for now?) consider this not a match.
                 ','line_number':285,'multiline':True]['text':' always matches ','line_number':294,'multiline':True]['text':'
             * TODO: Could consider allowing reverse subclass relation, i.e.
             *       the operation DType passed in to be abstract.  That
             *       definitely is OK for outputs (and potentially useful,
             *       you could enforce e.g. an inexact result).
             *       It might also be useful for some stranger promoters.
             ','line_number':314,'multiline':True]['text':' The resolver matches, but we have to check if it is better ','line_number':326,'multiline':True]['text':' -1 neither, 0 current best, 1 new ','line_number':328,'multiline':True]['text':'
             * If both have concrete and None in the same position and
             * they are identical, we will continue searching using the
             * first best for comparison, in an attempt to find a better
             * one.
             * In all cases, we give up resolution, since it would be
             * necessary to compare to two "best" cases.
             ','line_number':329,'multiline':True]['text':' inputs prefer one loop and outputs have lower priority ','line_number':339,'multiline':True]['text':' equivalent, so this entry does not matter ','line_number':349,'multiline':True]['text':'
                     * If an a dtype is NULL it always matches, so there is no
                     * point in defining one as more precise than the other.
                     ','line_number':353,'multiline':True]['text':' If either is None, the other is strictly more specific ','line_number':359,'multiline':True]['text':'
                 * If both are concrete and not identical, this is
                 * ambiguous.
                 ','line_number':366,'multiline':True]['text':'
                     * Ambiguous unless they are identical (checked above),
                     * or one matches exactly.
                     ','line_number':372,'multiline':True]['text':' old is not abstract, so better (both not possible) ','line_number':387,'multiline':True]['text':' new is not abstract, so better (both not possible) ','line_number':391,'multiline':True]['text':'
                 * TODO: This will need logic for abstract DTypes to decide if
                 *       one is a subclass of the other (And their subclass
                 *       relation is well defined).  For now, we bail out
                 *       in cas someone manages to get here.
                 ','line_number':394,'multiline':True]['text':' no new info, nothing to update ','line_number':410,'multiline':True]['text':'
                     * We need a clear best, this could be tricky, unless
                     * the signature is identical, we would have to compare
                     * against both of the found ones until we find a
                     * better one.
                     * Instead, only support the case where they are
                     * identical.
                     ','line_number':414,'multiline':True]['text':' TODO: Document the above comment, may need relaxing? ','line_number':422,'multiline':True]['text':'
                 * We could not find a best loop, but promoters should be
                 * designed in a way to disambiguate such scenarios, so we
                 * retry the whole lookup using only promoters.
                 * (There is a small chance we already got two promoters.
                 * We just redo it anyway for simplicity.)
                 ','line_number':430,'multiline':True]['text':'
                 * If this is already the retry, we are out of luck.  Promoters
                 * should be designed in a way that this cannot happen!
                 * (It should be noted, that the retry might not find anything
                 * and we still do a legacy lookup later.)
                 ','line_number':441,'multiline':True]['text':' The new match is not better, continue looking. ','line_number':464,'multiline':True]['text':' The new match is better (or there was no previous match) ','line_number':468,'multiline':True]['text':' The non-legacy lookup failed ','line_number':473,'multiline':True]['text':'
 * A promoter can currently be either a C-Capsule containing a promoter
 * function pointer, or a Python function.  Both of these can at this time
 * only return new operation DTypes (i.e. mutate the input while leaving
 * those defined by the `signature` unmodified).
 ','line_number':483,'multiline':True]['text':' We could also go the other way and wrap up the python function... ','line_number':501,'multiline':True]['text':'
     * If none of the dtypes changes, we would recurse infinitely, abort.
     * (Of course it is nevertheless possible to recurse infinitely.)
     ','line_number':518,'multiline':True]['text':'
     * Do a recursive call, the promotion function has to ensure that the
     * new tuple is strictly more precise (thus guaranteeing eventual finishing)
     ','line_number':533,'multiline':True]['text':' no legacy promotion ','line_number':542,'multiline':True]['text':'
 * Convert the DType `signature` into the tuple of descriptors that is used
 * by the old ufunc type resolvers in `ufunc_type_resolution.c`.
 *
 * Note that we do not need to pass the type tuple when we use the legacy path
 * for type resolution rather than promotion, since the signature is always
 * correct in that case.
 ','line_number':554,'multiline':True]['text':'
                 * The legacy type resolution can't deal with these.
                 * This path will return `None` or so in the future to
                 * set an error later if the legacy type resolution is used.
                 ','line_number':580,'multiline':True]['text':' The whole signature was None, simply ignore type tuple ','line_number':597,'multiline':True]['text':'
 * Fills in the operation_DTypes with borrowed references.  This may change
 * the content, since it will use the legacy type resolution, which can special
 * case 0-D arrays (using value-based logic).
 ','line_number':605,'multiline':True]['text':'
     * We use unsafe casting. This is of course not accurate, but that is OK
     * here, because for promotion/dispatching the casting safety makes no
     * difference.  Whether the actual operands can be casts must be checked
     * during the type resolution step (which may _also_ calls this!).
     ','line_number':624,'multiline':True]['text':' Not all legacy resolvers clean up on failures: ','line_number':634,'multiline':True]['text':'
         * When warnings are enabled, we don't replace the DTypes, but only
         * check whether the old result is the same as the new one.
         * For noise reason, we do this only on the *output* dtypes which
         * ignores floating point precision changes for comparisons such as
         * `np.float32(3.1) < 3.1`.
         ','line_number':643,'multiline':True]['text':'
             * If an output was provided and the new dtype matches, we
             * should (at best) lose a tiny bit of precision, e.g.:
             * `np.true_divide(float32_arr0d, 1, out=float32_arr0d)`
             * (which operated on float64 before, although it is probably rare)
             ','line_number':651,'multiline':True]['text':' Otherwise, warn if the dtype doesn't match ','line_number':663,'multiline':True]['text':'
     * datetime legacy resolvers ignore the signature, which should be
     * warn/raise (when used).  In such cases, the signature is (incorrectly)
     * mutated, and caching is not possible.
     ','line_number':683,'multiline':True]['text':'
 * Note, this function returns a BORROWED references to info since it adds
 * it to the loops.
 ','line_number':699,'multiline':True]['text':' now borrowed from the ufunc's list of loops ','line_number':729,'multiline':True]['text':'
 * The main implementation to find the correct DType signature and ArrayMethod
 * to use for a ufunc.  This function may recurse with `do_legacy_fallback`
 * set to False.
 *
 * If value-based promotion is necessary, this is handled ahead of time by
 * `promote_and_get_ufuncimpl`.
 ','line_number':734,'multiline':True]['text':'
     * Fetch the dispatching info which consists of the implementation and
     * the DType signature tuple.  There are three steps:
     *
     * 1. Check the cache.
     * 2. Check all registered loops/promoters to find the best match.
     * 3. Fall back to the legacy implementation if no match was found.
     ','line_number':749,'multiline':True]['text':' Found the ArrayMethod and NOT a promoter: return it ','line_number':761,'multiline':True]['text':'
     * If `info == NULL`, loading from cache failed, use the full resolution
     * in `resolve_implementation_info` (which caches its result on success).
     ','line_number':765,'multiline':True]['text':'
             * Found the ArrayMethod and NOT promoter.  Before returning it
             * add it to the cache for faster lookup in the future.
             ','line_number':776,'multiline':True]['text':'
     * At this point `info` is NULL if there is no matching loop, or it is
     * a promoter that needs to be used/called:
     ','line_number':788,'multiline':True]['text':' Add result to the cache using the original types: ','line_number':801,'multiline':True]['text':'
     * Even using promotion no loop was found.
     * Using promotion failed, this should normally be an error.
     * However, we need to give the legacy implementation a chance here.
     * (it will modify `op_dtypes`).
     ','line_number':810,'multiline':True]['text':' Already tried or not a "legacy" ufunc (no loop found, return) ','line_number':818,'multiline':True]['text':' TODO: only the comparison deprecation needs this ','line_number':823,'multiline':True]['text':'
         * NOTE: This block exists solely to support numba's DUFuncs which add
         * new loops dynamically, so our list may get outdated.  Thus, we
         * have to make sure that the loop exists.
         *
         * Before adding a new loop, ensure that it actually exists. There
         * is a tiny chance that this would not work, but it would require an
         * extension additionally have a custom loop getter.
         * This check should ensure a the right error message, but in principle
         * we could try to call the loop getter here.
         ','line_number':831,'multiline':True]['text':' assume it exists, break if not ','line_number':845,'multiline':True]['text':' Add this to the cache using the original types: ','line_number':868,'multiline':True]['text':'*
 * The central entry-point for the promotion and dispatching machinery.
 *
 * It currently may work with the operands (although it would be possible to
 * only work with DType (classes/types).  This is because it has to ensure
 * that legacy (value-based promotion) is used when necessary.
 *
 * NOTE: The machinery here currently ignores output arguments unless
 *       they are part of the signature.  This slightly limits unsafe loop
 *       specializations, which is important for the `ensure_reduce_compatible`
 *       fallback mode.
 *       To fix this, the caching mechanism (and dispatching) can be extended.
 *       When/if that happens, the `ensure_reduce_compatible` could be
 *       deprecated (it should never kick in because promotion kick in first).
 *
 * @param ufunc The ufunc object, used mainly for the fallback.
 * @param ops The array operands (used only for the fallback).
 * @param signature As input, the DType signature fixed explicitly by the user.
 *        The signature is *filled* in with the operation signature we end up
 *        using.
 * @param op_dtypes The operand DTypes (without casting) which are specified
 *        either by the `signature` or by an `operand`.
 *        (outputs and the second input can be NULL for reductions).
 *        NOTE: In some cases, the promotion machinery may currently modify
 *        these including clearing the output.
 * @param force_legacy_promotion If set, we have to use the old type resolution
 *        to implement value-based promotion/casting.
 * @param promoting_pyscalars Indication that some of the initial inputs were
 *        int, float, or complex.  In this case weak-scalar promotion is used
 *        which can lead to a lower result precision even when legacy promotion
 *        does not kick in: `np.int8(1) + 1` is the example.
 *        (Legacy promotion is skipped because `np.int8(1)` is also scalar)
 * @param ensure_reduce_compatible Must be set for reductions, in which case
 *        the found implementation is checked for reduce-like compatibility.
 *        If it is *not* compatible and `signature[2] != NULL`, we assume its
 *        output DType is correct (see NOTE above).
 *        If removed, promotion may require information about whether this
 *        is a reduction, so the more likely case is to always keep fixing this
 *        when necessary, but push down the handling so it can be cached.
 ','line_number':877,'multiline':True]['text':'
     * Get the actual DTypes we operate with by setting op_dtypes[i] from
     * signature[i].
     ','line_number':929,'multiline':True]['text':'
             * ignore the operand input, we cannot overwrite signature yet
             * since it is fixed (cannot be promoted!)
             ','line_number':935,'multiline':True]['text':'
             * We currently just ignore outputs if not in signature, this will
             * always give the/a correct result (limits registering specialized
             * loops which include the cast).
             * (See also comment in resolve_implementation_info.)
             ','line_number':944,'multiline':True]['text':'
         * We must use legacy promotion for value-based logic. Call the old
         * resolver once up-front to get the "actual" loop dtypes.
         * After this (additional) promotion, we can even use normal caching.
         ','line_number':957,'multiline':True]['text':' unused, as we modify the original `op_dtypes` ','line_number':962,'multiline':True]['text':' Pause warnings and always use "new" path ','line_number':969,'multiline':True]['text':' If necessary, check if the old result would have been different ','line_number':983,'multiline':True]['text':' Before calling to the legacy promotion, pretend that is the state: ','line_number':992,'multiline':True]['text':' Reset the promotion state: ','line_number':996,'multiline':True]['text':'
     * In certain cases (only the logical ufuncs really), the loop we found may
     * not be reduce-compatible.  Since the machinery can't distinguish a
     * reduction with an output from a normal ufunc call, we have to assume
     * the result DType is correct and force it for the input (if not forced
     * already).
     * NOTE: This does assume that all loops are "safe" see the NOTE in this
     *       comment.  That could be relaxed, in which case we may need to
     *       cache if a call was for a reduction.
     ','line_number':1003,'multiline':True]['text':'
             * If signature is forced the cache may contain an incompatible
             * loop found via promotion (signature not enforced).  Reject it.
             ','line_number':1029,'multiline':True]['text':' We only set the "no loop found error here" ','line_number':1040,'multiline':True]['text':'
     * Otherwise an error occurred, but if the error was DTypePromotionError
     * then we chain it, because DTypePromotionError effectively means that there
     * is no loop available.  (We failed finding a loop by using promotion.)
     ','line_number':1044,'multiline':True]['text':'
 * Generic promoter used by as a final fallback on ufuncs.  Most operations are
 * homogeneous, so we can try to find the homogeneous dtype on the inputs
 * and use that.
 * We need to special case the reduction case, where op_dtypes[0] == NULL
 * is possible.
 ','line_number':1059,'multiline':True]['text':' If nin < 2 promotion is a no-op, so it should not be registered ','line_number':1071,'multiline':True]['text':' must be reduction ','line_number':1074,'multiline':True]['text':'
     * If a signature is used and homogeneous in its outputs use that
     * (Could/should likely be rather applied to inputs also, although outs
     * only could have some advantage and input dtypes are rarely enforced.)
     ','line_number':1084,'multiline':True]['text':' Not homogeneous, unset common ','line_number':1096,'multiline':True]['text':' Otherwise, use the common DType of all input operands ','line_number':1101,'multiline':True]['text':' Do not propagate normal promotion errors ','line_number':1106,'multiline':True]['text':' never replace a fixed one. ','line_number':1115,'multiline':True]['text':'
 * In some cases, we assume that there will only ever be object loops,
 * and the object loop should *always* be chosen.
 * (in those cases more specific loops should not really be registered, but
 * we do not check that.)
 *
 * We default to this for "old-style" ufuncs which have exactly one loop
 * consisting only of objects (during registration time, numba mutates this
 * but presumably).
 ','line_number':1130,'multiline':True]['text':'
 * Special promoter for the logical ufuncs.  The logical ufuncs can always
 * use the ??->? and still get the correct output (as long as the output
 * is not supposed to be `object`).
 ','line_number':1158,'multiline':True]['text':'
     * If we find any object DType at all, we currently force to object.
     * However, if the output is specified and not object, there is no point,
     * it should be just as well to cast the input rather than doing the
     * unsafe out cast.
     ','line_number':1168,'multiline':True]['text':' bail out, this is _only_ to give future/deprecation warning! ','line_number':1178,'multiline':True]['text':' bail out on strings: currently casting them to bool is too weird ','line_number':1183,'multiline':True]['text':' Always override to boolean ','line_number':1197,'multiline':True]['text':'
     * Actually, we have to use the OBJECT loop after all, set all we can
     * to object (that might not work out, but try).
     *
     * NOTE: Change this to check for `op_dtypes[0] == NULL` to STOP
     *       returning `object` for `np.logical_and.reduce(obj_arr)`
     *       which will also affect `np.all` and `np.any`!
     ','line_number':1211,'multiline':True]['text':'
 * Return the PyArrayMethodObject or PyCapsule that matches a registered
 * tuple of identical dtypes. Return a borrowed ref of the first match.
 ','line_number':1259,'multiline':True]['text':' Got the match ','line_number':1288,'multiline':True]