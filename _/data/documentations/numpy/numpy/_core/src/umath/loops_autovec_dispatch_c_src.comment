['text':'@targets
 ** $maxopt $autovec baseline
 ** sse2 avx2
 ** neon
 ** vsx2
 ** vx
 *','line_number':1,'multiline':True]['text':' Provides the various *_LOOP macros','line_number':15,'multiline':False]['text':'
 *****************************************************************************
 **                           INTEGER LOOPS
 *****************************************************************************
 ','line_number':18,'multiline':True]['text':'
 * Arithmetic bit shift operations.
 *
 * Intel hardware masks bit shift values, so large shifts wrap around
 * and can produce surprising results. The special handling ensures that
 * behavior is independent of compiler or hardware.
 * TODO: We could implement consistent behavior for negative shifts,
 *       which is undefined in C.
 ','line_number':23,'multiline':True]['text':'*begin repeat
 * #TYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG#
 * #type = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *         npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 * #ftype = npy_float, npy_float, npy_float, npy_float, npy_double, npy_double,
 *          npy_double, npy_double, npy_double, npy_double#
 * #SIGNED = 1, 0, 1, 0, 1, 0, 1, 0, 1, 0#
 * #c = hh,uhh,h,uh,,u,l,ul,ll,ull#
 ','line_number':35,'multiline':True]['text':'*begin repeat1
 * Arithmetic
 * #kind = add, subtract, multiply#
 * #OP = +, -, *#
 ','line_number':64,'multiline':True]['text':'*end repeat1*','line_number':79,'multiline':True]['text':' For some reason, our macOS CI sets an "invalid" flag here, but only','line_number':87,'multiline':False]['text':' for some types.','line_number':88,'multiline':False]['text':'*end repeat*','line_number':113,'multiline':True]['text':'
 *****************************************************************************
 **                         UNSIGNED INTEGER LOOPS
 *****************************************************************************
 ','line_number':115,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG#
 * #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 * #c    = u,u,u,ul,ull#
 ','line_number':120,'multiline':True]['text':'*begin repeat1
 * Arithmetic
 * #kind = bitwise_and, bitwise_or, bitwise_xor#
 * #OP = &, |, ^#
 ','line_number':137,'multiline':True]['text':'*end repeat1*','line_number':152,'multiline':True]['text':'*begin repeat1
 * #kind = logical_and, logical_or#
 * #OP = &&, ||#
 ','line_number':154,'multiline':True]['text':'
     * gcc vectorization of this is not good (PR60575) but manual integer
     * vectorization is too tedious to be worthwhile
     ','line_number':161,'multiline':True]['text':'*end repeat1*','line_number':167,'multiline':True]['text':'*begin repeat1
 * #kind = isnan, isinf, isfinite#
 * #func = npy_isnan, npy_isinf, npy_isfinite#
 * #val = NPY_FALSE, NPY_FALSE, NPY_TRUE#
 *','line_number':178,'multiline':True]['text':'
     * The (void)in; suppresses an unused variable warning raised by gcc and allows
     * us to reuse this macro even though we do not depend on in
     ','line_number':186,'multiline':True]['text':'*end repeat1*','line_number':192,'multiline':True]['text':'*end repeat*','line_number':211,'multiline':True]['text':'
 *****************************************************************************
 **                         SIGNED! INTEGER LOOPS
 *****************************************************************************
 ','line_number':213,'multiline':True]['text':'*begin repeat
 * #TYPE = BYTE, SHORT, INT, LONG, LONGLONG#
 * #type = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 * #c    = ,,,l,ll#
 ','line_number':219,'multiline':True]['text':'*begin repeat1
 * #kind = conjugate, invert, isnan, isinf, isfinite,
 *         logical_and, logical_or, logical_xor, logical_not,
 *         bitwise_and, bitwise_or, bitwise_xor#
 *','line_number':237,'multiline':True]['text':'*end repeat1*','line_number':247,'multiline':True]['text':'*end repeat*','line_number':248,'multiline':True]['text':'
 *****************************************************************************
 **                             BOOLEAN LOOPS                               **
 *****************************************************************************
 ','line_number':250,'multiline':True]['text':'*begin repeat
 * #kind = isnan, isinf, isfinite#
 * #func = npy_isnan, npy_isinf, npy_isfinite#
 * #val = NPY_FALSE, NPY_FALSE, NPY_TRUE#
 *','line_number':255,'multiline':True]['text':'*end repeat*','line_number':265,'multiline':True]['text':'
 *****************************************************************************
 **                          HALF-FLOAT LOOPS                               **
 *****************************************************************************
 ','line_number':267,'multiline':True]['text':'
 *****************************************************************************
 **                           DATETIME LOOPS                                **
 *****************************************************************************
 ','line_number':279,'multiline':True]['text':'*begin repeat
 * #type = npy_datetime, npy_timedelta#
 * #TYPE = DATETIME, TIMEDELTA#
 ','line_number':285,'multiline':True]['text':'*end repeat*','line_number':294,'multiline':True]