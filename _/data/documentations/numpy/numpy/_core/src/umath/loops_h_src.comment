['text':' -*- c -*- ','line_number':1,'multiline':True]['text':'
 * vim:syntax=c
 ','line_number':2,'multiline':True]['text':'
 *****************************************************************************
 **                             BOOLEAN LOOPS                               **
 *****************************************************************************
 ','line_number':13,'multiline':True]['text':'
 * Following functions are defined by umath generator
 * to enable runtime dispatching without the need
 * to redefine them within dsipatch-able sources.
 ','line_number':19,'multiline':True]['text':' #define BOOL_invert BOOL_logical_not','line_number':24,'multiline':False]['text':' #define BOOL_add BOOL_logical_or','line_number':25,'multiline':False]['text':' #define BOOL_bitwise_and BOOL_logical_and','line_number':26,'multiline':False]['text':' #define BOOL_bitwise_or BOOL_logical_or','line_number':27,'multiline':False]['text':' #define BOOL_logical_xor BOOL_not_equal','line_number':28,'multiline':False]['text':' #define BOOL_bitwise_xor BOOL_logical_xor','line_number':29,'multiline':False]['text':' #define BOOL_multiply BOOL_logical_and','line_number':30,'multiline':False]['text':' #define BOOL_maximum BOOL_logical_or','line_number':31,'multiline':False]['text':' #define BOOL_minimum BOOL_logical_and','line_number':32,'multiline':False]['text':' #define BOOL_fmax BOOL_maximum','line_number':33,'multiline':False]['text':' #define BOOL_fmin BOOL_minimum','line_number':34,'multiline':False]['text':'*begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 ','line_number':43,'multiline':True]['text':'*end repeat*','line_number':48,'multiline':True]['text':'*begin repeat
 * #kind = logical_and, logical_or, logical_not, absolute#
 ','line_number':54,'multiline':True]['text':'*end repeat*','line_number':59,'multiline':True]['text':'*begin repeat
 * #kind = isnan, isinf, isfinite#
 *','line_number':64,'multiline':True]['text':'*end repeat*','line_number':69,'multiline':True]['text':'*begin repeat
 * #kind = isnan, isinf, isfinite#
 ','line_number':75,'multiline':True]['text':'*end repeat*','line_number':80,'multiline':True]['text':'
 *****************************************************************************
 **                           INTEGER LOOPS
 *****************************************************************************
 ','line_number':82,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
           BYTE,  SHORT,  INT,  LONG,  LONGLONG#
 ','line_number':92,'multiline':True]['text':'*end repeat3*','line_number':102,'multiline':True]['text':'*end repeat*','line_number':103,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
           BYTE,  SHORT,  INT,  LONG,  LONGLONG#
 ','line_number':109,'multiline':True]['text':'*begin repeat1
 * #kind = divmod, fmod, remainder#
 ','line_number':113,'multiline':True]['text':'*end repeat1*','line_number':118,'multiline':True]['text':'*end repeat*','line_number':119,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
           BYTE,  SHORT,  INT,  LONG,  LONGLONG#
 ','line_number':125,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 ','line_number':129,'multiline':True]['text':'*end repeat1*','line_number':134,'multiline':True]['text':'*end repeat*','line_number':135,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
           BYTE,  SHORT,  INT,  LONG,  LONGLONG#
 ','line_number':141,'multiline':True]['text':'*begin repeat1
 * #kind = invert, logical_not, conjugate, reciprocal, square, add,
 *         subtract, multiply, bitwise_and, bitwise_or, bitwise_xor,
 *         left_shift, right_shift, logical_and, logical_or,
 *         logical_xor, isnan, isinf, isfinite,
 *         absolute, sign, bitwise_count#
 ','line_number':145,'multiline':True]['text':'*end repeat1*','line_number':154,'multiline':True]['text':'*end repeat*','line_number':155,'multiline':True]['text':'*begin repeat
 * #TYPE = BYTE, SHORT, INT, LONG, LONGLONG#
 ','line_number':157,'multiline':True]['text':'*begin repeat1
 * both signed and unsigned integer types
 * #s = , u#
 * #S = , U#
 ','line_number':160,'multiline':True]['text':'*begin repeat2
 * Arithmetic
 * #kind = add, subtract, multiply, bitwise_and, bitwise_or, bitwise_xor,
 *          left_shift, right_shift#
 * #OP = +, -,*, &, |, ^, <<, >>#
 ','line_number':178,'multiline':True]['text':'*end repeat2*','line_number':188,'multiline':True]['text':'*begin repeat2
 * #kind = maximum, minimum#
 *','line_number':190,'multiline':True]['text':'*end repeat2*','line_number':199,'multiline':True]['text':'*end repeat2*','line_number':209,'multiline':True]['text':'*end repeat1*','line_number':212,'multiline':True]['text':'*end repeat*','line_number':213,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal#
 * #OP = ==, !=, <, <=, >, >=#
 ','line_number':215,'multiline':True]['text':'*end repeat*','line_number':224,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *         BYTE,  SHORT,  INT,  LONG,  LONGLONG#
 ','line_number':230,'multiline':True]['text':'*begin repeat1
 * #kind = negative#
 ','line_number':234,'multiline':True]['text':'*end repeat1*','line_number':239,'multiline':True]['text':'*end repeat*','line_number':240,'multiline':True]['text':'
 *****************************************************************************
 **                             FLOAT LOOPS                                 **
 *****************************************************************************
 ','line_number':243,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':251,'multiline':True]['text':'*begin repeat1
 * #kind = rint, floor, trunc, ceil, sqrt, absolute, square, reciprocal#
 ','line_number':254,'multiline':True]['text':'*end repeat1*','line_number':259,'multiline':True]['text':'*end repeat*','line_number':260,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':265,'multiline':True]['text':'*begin repeat1
 * #kind = isnan, isinf, isfinite, signbit#
 ','line_number':268,'multiline':True]['text':'*end repeat1*','line_number':273,'multiline':True]['text':'*end repeat*','line_number':274,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 ','line_number':279,'multiline':True]['text':'*begin repeat1
 * #kind = negative#
 ','line_number':282,'multiline':True]['text':'*end repeat1*','line_number':287,'multiline':True]['text':'*end repeat*','line_number':288,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':293,'multiline':True]['text':'*begin repeat1
 * Arithmetic
 * # kind = add, subtract, multiply, divide#
 ','line_number':296,'multiline':True]['text':'*end repeat1*','line_number':306,'multiline':True]['text':'*end repeat*','line_number':307,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':312,'multiline':True]['text':'*begin repeat1
 * #func = tanh#
 ','line_number':315,'multiline':True]['text':'*end repeat1*','line_number':320,'multiline':True]['text':'*end repeat*','line_number':321,'multiline':True]['text':' SVML','line_number':323,'multiline':False]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':328,'multiline':True]['text':'*begin repeat1
 * #func = tanh, exp2, log2, log10, expm1, log1p, cbrt, tan, arcsin, arccos, arctan, sinh, cosh, arcsinh, arccosh, arctanh#
 ','line_number':331,'multiline':True]['text':'*end repeat1*','line_number':338,'multiline':True]['text':'*end repeat*','line_number':339,'multiline':True]['text':'*begin repeat
 * #func = sin, cos, tan, exp, exp2, log, log2, log10, expm1, log1p, cbrt, arcsin, arccos, arctan, sinh, cosh, tanh, arcsinh, arccosh, arctanh#
 ','line_number':341,'multiline':True]['text':'*end repeat*','line_number':348,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':350,'multiline':True]['text':'*begin repeat1
 * #func = power, arctan2#
 ','line_number':353,'multiline':True]['text':'*end repeat1*','line_number':360,'multiline':True]['text':'*end repeat*','line_number':361,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':367,'multiline':True]['text':'*begin repeat1
 *  #func = sin, cos#
 ','line_number':370,'multiline':True]['text':'*end repeat1*','line_number':376,'multiline':True]['text':'*end repeat*','line_number':377,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':382,'multiline':True]['text':'*begin repeat1
 * # kind = exp, log, frexp, ldexp#
 ','line_number':385,'multiline':True]['text':'*end repeat1*','line_number':391,'multiline':True]['text':'*end repeat*','line_number':392,'multiline':True]['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE#
 ','line_number':397,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal#
 ','line_number':400,'multiline':True]['text':'*end repeat1*','line_number':406,'multiline':True]['text':'*end repeat*','line_number':407,'multiline':True]['text':'*begin repeat
 * Float types
 *  #TYPE = HALF, FLOAT, DOUBLE, LONGDOUBLE#
 *  #c = f, f, , l#
 *  #C = F, F, , L#
 *  #half = 1, 0, 0, 0#
 *  #fd = 0, 1, 1, 0#
 ','line_number':409,'multiline':True]['text':'*begin repeat1
 * Arithmetic
 * # kind = add, subtract, multiply, divide#
 * # OP = +, -, *, /#
 ','line_number':418,'multiline':True]['text':'*end repeat1*','line_number':429,'multiline':True]['text':'*end repeat1*','line_number':430,'multiline':True]['text':'*begin repeat1
 * #kind = logical_and, logical_or#
 * #OP = &&, ||#
 ','line_number':432,'multiline':True]['text':'*end repeat1*','line_number':438,'multiline':True]['text':'*begin repeat1
 * #kind = isnan, isinf, isfinite, signbit, copysign, nextafter, spacing#
 * #func = npy_isnan, npy_isinf, npy_isfinite, npy_signbit, npy_copysign, nextafter, spacing#
 * #dispatched = 1, 1, 1, 1, 0, 0, 0#
 *','line_number':446,'multiline':True]['text':'*end repeat2*','line_number':456,'multiline':True]['text':'*end repeat1*','line_number':457,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum#
 *','line_number':459,'multiline':True]['text':'*end repeat1*','line_number':468,'multiline':True]['text':'*begin repeat1
 * #kind = fmax, fmin#
 *','line_number':470,'multiline':True]['text':'*end repeat1*','line_number':479,'multiline':True]['text':'*end repeat*','line_number':530,'multiline':True]['text':'*begin repeat
 * #TYPE = HALF, LONGDOUBLE#
 ','line_number':532,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, less, less_equal, greater, greater_equal#
 ','line_number':535,'multiline':True]['text':'*end repeat1*','line_number':540,'multiline':True]['text':'*end repeat*','line_number':541,'multiline':True]['text':'*begin repeat
 * #TYPE = HALF#
 ','line_number':546,'multiline':True]['text':'*begin repeat1
 * #kind = absolute#
 ','line_number':549,'multiline':True]['text':'*end repeat1*','line_number':554,'multiline':True]['text':'*end repeat*','line_number':555,'multiline':True]['text':'
 *****************************************************************************
 **                           COMPLEX LOOPS                                 **
 *****************************************************************************
 ','line_number':556,'multiline':True]['text':'*begin repeat
 * #TYPE = CFLOAT, CDOUBLE#
 ','line_number':564,'multiline':True]['text':'*begin repeat1
 * #kind = add, subtract, multiply, conjugate, square#
 ','line_number':567,'multiline':True]['text':'*end repeat1*','line_number':572,'multiline':True]['text':'*end repeat*','line_number':573,'multiline':True]['text':'*begin repeat
 * #TYPE = CFLOAT, CDOUBLE#
 ','line_number':578,'multiline':True]['text':'*begin repeat1
 * #kind = absolute#
 ','line_number':581,'multiline':True]['text':'*end repeat1*','line_number':586,'multiline':True]['text':'*end repeat*','line_number':587,'multiline':True]['text':'*begin repeat
 * complex types
 * #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 * #c = f, , l#
 * #C = F, , L#
 ','line_number':596,'multiline':True]['text':'*begin repeat1
 * arithmetic
 * #kind = add, subtract, multiply#
 ','line_number':603,'multiline':True]['text':'*end repeat1*','line_number':612,'multiline':True]['text':'*begin repeat1
 * #kind= greater, greater_equal, less, less_equal, equal, not_equal#
 * #OP = CGT, CGE, CLT, CLE, CEQ, CNE#
 ','line_number':617,'multiline':True]['text':'*end repeat1*','line_number':623,'multiline':True]['text':'*begin repeat1
   #kind = logical_and, logical_or#
   #OP1 = ||, ||#
   #OP2 = &&, ||#
','line_number':625,'multiline':True]['text':'*end repeat1*','line_number':632,'multiline':True]['text':'*begin repeat1
 * #kind = isnan, isinf, isfinite#
 * #func = npy_isnan, npy_isinf, npy_isfinite#
 * #OP = ||, ||, &&#
 *','line_number':639,'multiline':True]['text':'*end repeat1*','line_number':646,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum#
 * #OP = CGE, CLE#
 ','line_number':669,'multiline':True]['text':'*end repeat1*','line_number':675,'multiline':True]['text':'*begin repeat1
 * #kind = fmax, fmin#
 * #OP = CGE, CLE#
 ','line_number':677,'multiline':True]['text':'*end repeat1*','line_number':683,'multiline':True]['text':'*end repeat*','line_number':685,'multiline':True]['text':'
 *****************************************************************************
 **                            DATETIME LOOPS                               **
 *****************************************************************************
 ','line_number':694,'multiline':True]['text':'*begin repeat
 * #TYPE = DATETIME, TIMEDELTA#
 ','line_number':712,'multiline':True]['text':'*begin repeat1
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 * #OP =  ==, !=, >, >=, <, <=#
 ','line_number':727,'multiline':True]['text':'*end repeat1*','line_number':733,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum, fmin, fmax#
 *','line_number':735,'multiline':True]['text':'*end repeat1*','line_number':740,'multiline':True]['text':'*end repeat*','line_number':742,'multiline':True]['text':' Special case equivalents to above functions ','line_number':792,'multiline':True]['text':' #define TIMEDELTA_mm_d_floor_divide TIMEDELTA_mm_d_divide ','line_number':795,'multiline':True]['text':'*begin repeat
 * #TYPE = TIMEDELTA, DATETIME#
 ','line_number':801,'multiline':True]['text':'*begin repeat1
 * #kind = isinf#
 ','line_number':804,'multiline':True]['text':'*end repeat1*','line_number':809,'multiline':True]['text':'*end repeat*','line_number':810,'multiline':True]['text':'
 *****************************************************************************
 **                            OBJECT LOOPS                                 **
 *****************************************************************************
 ','line_number':812,'multiline':True]['text':'*begin repeat
 * #kind = equal, not_equal, greater, greater_equal, less, less_equal#
 * #OP = EQ, NE, GT, GE, LT, LE#
 ','line_number':818,'multiline':True]['text':'*begin repeat1
 * #suffix = , _OO_O#
 ','line_number':822,'multiline':True]['text':'*end repeat1*','line_number':827,'multiline':True]['text':'*end repeat*','line_number':828,'multiline':True]['text':'
 *****************************************************************************
 **                            MIN/MAX LOOPS                                **
 *****************************************************************************
 ','line_number':836,'multiline':True]['text':'---------- Integers ----------','line_number':846,'multiline':False]['text':'*begin repeat
 * #TYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG#
 ','line_number':848,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum#
 ','line_number':852,'multiline':True]['text':'*end repeat1*','line_number':857,'multiline':True]['text':'*end repeat*','line_number':858,'multiline':True]['text':'---------- Float ----------','line_number':860,'multiline':False]['text':'*begin repeat
  * #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
  ','line_number':862,'multiline':True]['text':'*begin repeat1
 * #kind = maximum, minimum, fmax, fmin#
 ','line_number':865,'multiline':True]['text':'*end repeat1*','line_number':870,'multiline':True]['text':'*end repeat*','line_number':871,'multiline':True]['text':'
 *****************************************************************************
 **                              END LOOPS                                  **
 *****************************************************************************
 ','line_number':873,'multiline':True]