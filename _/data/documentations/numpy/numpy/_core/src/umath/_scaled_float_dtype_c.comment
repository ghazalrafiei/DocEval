['text':'
 * This file implements a basic scaled float64 DType.  The reason is to have
 * a simple parametric DType for testing.  It is not meant to be a useful
 * DType by itself, but due to the scaling factor has similar properties as
 * a Unit DType.
 *
 * The code here should be seen as a work in progress.  Some choices are made
 * to test certain code paths, but that does not mean that they must not
 * be modified.
 *
 * NOTE: The tests were initially written using private API and ABI, ideally
 *       they should be replaced/modified with versions using public API.
 ','line_number':1,'multiline':True]['text':' TODO: from wrapping_array_method.c, use proper public header eventually  ','line_number':29,'multiline':True]['text':' Accept only floats (some others may work due to normal casting) ','line_number':49,'multiline':True]['text':' We make the choice of using the larger scaling ','line_number':89,'multiline':True]['text':'
 * Implement minimal getitem and setitem to make this DType mostly(?) safe to
 * expose in Python.
 * TODO: This should not use the old-style API, but the new-style is missing!
','line_number':99,'multiline':True]['text':' Special DType methods and the descr->f slot storage ','line_number':134,'multiline':True]['text':' do not bother with byte-swapping... ','line_number':148,'multiline':True]['text':' Don't copy PyObject_HEAD part ','line_number':166,'multiline':True]['text':'
 * Implement some casts.
 ','line_number':264,'multiline':True]['text':'
 * It would make more sense to test this early on, but this allows testing
 * error returns.
 ','line_number':268,'multiline':True]['text':' could also be moved into auxdata: ','line_number':288,'multiline':True]['text':' could also be moved into auxdata: ','line_number':316,'multiline':True]['text':' same scaling is just a view ','line_number':356,'multiline':True]['text':' changing the sign does not lose precision ','line_number':362,'multiline':True]['text':' Technically, this is not a safe cast, since over/underflows can occur ','line_number':365,'multiline':True]['text':'
 * Casting to and from doubles.
 *
 * To keep things interesting, we ONLY define the trivial cast with a factor
 * of 1.  All other casts have to be handled by the sfloat to sfloat cast.
 *
 * The casting machinery should optimize this step away normally, since we
 * flag the this is a view.
 ','line_number':370,'multiline':True]['text':'
 * Cast to boolean (for testing the logical functions a bit better).
 ','line_number':417,'multiline':True]['text':' cannot fail ','line_number':449,'multiline':True]['text':' minimal guaranteed casting ','line_number':463,'multiline':True]['text':' Technically, it is just a copy currently so this is fine: ','line_number':484,'multiline':True]['text':'
 * We also wish to test very simple ufunc functionality.  So create two
 * ufunc loops:
 * 1. Multiplication, which can multiply the factors and work with that.
 * 2. Addition, which needs to use the common instance, and runs into
 *    cast safety subtleties since we will implement it without an additional
 *    cast.
 ','line_number':527,'multiline':True]['text':'
     * Multiply the scaling for the result.  If the result was passed in we
     * simply ignore it and let the casting machinery fix it up here.
     ','line_number':562,'multiline':True]['text':'
 * Unlike the multiplication implementation above, this loops deals with
 * scaling (casting) internally.  This allows to test some different paths.
 ','line_number':580,'multiline':True]['text':'
     * Here we accept an output descriptor (the inner loop can deal with it),
     * if none is given, we use the "common instance":
     ','line_number':624,'multiline':True]['text':' If the factors mismatch, we do implicit casting inside the ufunc! ','line_number':644,'multiline':True]['text':'
 * We define the hypot loop using the "PyUFunc_AddWrappingLoop" API.
 * We use this very narrowly for mapping to the double hypot loop currently.
 ','line_number':659,'multiline':True]['text':'
 * We add some very basic promoters to allow multiplying normal and scaled
 ','line_number':765,'multiline':True]['text':'
 * Add new ufunc loops (this is somewhat clumsy as of writing it, but should
 * get less so with the introduction of public API).
 ','line_number':786,'multiline':True]['text':' N.B.: Wrapping isn't actually correct if scaling can be negative ','line_number':837,'multiline':True]['text':'
     * Add a promoter for both directions of multiply with double.
     ','line_number':842,'multiline':True]['text':'
 * Python entry point, exported via `umathmodule.h` and `multiarraymodule.c`.
 * TODO: Should be moved when the necessary API is not internal anymore.
 ','line_number':872,'multiline':True]['text':' Allow calling the function multiple times. ','line_number':879,'multiline':True]