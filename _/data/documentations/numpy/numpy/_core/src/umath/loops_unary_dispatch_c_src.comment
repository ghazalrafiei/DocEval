['text':'@targets
 ** $maxopt baseline
 ** neon asimd
 ** sse2 avx2 avx512_skx
 ** vsx2
 ** vx vxe
 *','line_number':1,'multiline':True]['text':' Provides the various *_LOOP macros','line_number':18,'multiline':False]['text':'******************************************************************************
 ** Scalar ops
 *****************************************************************************','line_number':21,'multiline':True]['text':'******************************************************************************
 ** extra SIMD intrinsics
 *****************************************************************************','line_number':26,'multiline':True]['text':'*begin repeat
 * #sfx  = s8, u8, s16, u16, s32, u32, s64, u64#
 * #ssfx =  8,  8,  16,  16,  32,  32,  64,  64#
 ','line_number':32,'multiline':True]['text':' (x ^ -1) + 1','line_number':42,'multiline':False]['text':'*end repeat*','line_number':47,'multiline':True]['text':'*begin repeat
 * #sfx  = f32, f64#
 * #VCHK = NPY_SIMD_F32, NPY_SIMD_F64#
 * #fd = f, #
 ','line_number':49,'multiline':True]['text':' (v ^ signmask)','line_number':61,'multiline':False]['text':' @VCHK@','line_number':66,'multiline':False]['text':'*end repeat*','line_number':67,'multiline':True]['text':' NPY_SIMD','line_number':69,'multiline':False]['text':'*******************************************************************************
 ** Defining the SIMD kernels
 *******************************************************************************','line_number':71,'multiline':True]['text':'*begin repeat
 * #sfx = s8, u8, s16, u16, s32, u32, s64, u64, f32, f64#
 * #simd_chk = NPY_SIMD*8, NPY_SIMD_F32, NPY_SIMD_F64#
 * #is_fp = 0*8, 1*2#
 * #supports_ncontig = 0*4,1*6#
 ','line_number':74,'multiline':True]['text':'*begin repeat1
 * #kind   = negative#
 * #intrin = negative#
 * #unroll = 4#
 ','line_number':80,'multiline':True]['text':' Avoid memory bandwidth bottleneck for larger SIMD','line_number':89,'multiline':False]['text':' contiguous inputs and output.','line_number':94,'multiline':False]['text':' unrolled vector loop','line_number':103,'multiline':False]['text':'*begin repeat2
     * #U = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15#
     ','line_number':105,'multiline':True]['text':'*end repeat2*','line_number':113,'multiline':True]['text':' single vector loop','line_number':115,'multiline':False]['text':' scalar finish up any remaining iterations','line_number':121,'multiline':False]['text':' contiguous input, non-contiguous output','line_number':128,'multiline':False]['text':' unrolled vector loop','line_number':137,'multiline':False]['text':'*begin repeat2
     * #U = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15#
     ','line_number':139,'multiline':True]['text':'*end repeat2*','line_number':147,'multiline':True]['text':' single vector loop','line_number':149,'multiline':False]['text':' scalar finish up any remaining iterations','line_number':155,'multiline':False]['text':' non-contiguous input, contiguous output','line_number':160,'multiline':False]['text':' unrolled vector loop','line_number':169,'multiline':False]['text':'*begin repeat2
     * #U = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15#
     ','line_number':171,'multiline':True]['text':'*end repeat2*','line_number':179,'multiline':True]['text':' single vector loop','line_number':181,'multiline':False]['text':' scalar finish up any remaining iterations','line_number':187,'multiline':False]['text':' non-contiguous input and output','line_number':192,'multiline':False]['text':' limit unroll to 2x','line_number':193,'multiline':False]['text':' unrolled vector loop','line_number':206,'multiline':False]['text':'*begin repeat2
     * #U = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15#
     ','line_number':208,'multiline':True]['text':'*end repeat2*','line_number':216,'multiline':True]['text':' single vector loop','line_number':218,'multiline':False]['text':' scalar finish up any remaining iterations','line_number':224,'multiline':False]['text':' @supports_ncontig@','line_number':229,'multiline':False]['text':' @simd_chk@','line_number':231,'multiline':False]['text':'end repeat1*','line_number':232,'multiline':True]['text':'*end repeat*','line_number':233,'multiline':True]['text':'*******************************************************************************
 ** Defining ufunc inner functions
 *******************************************************************************','line_number':235,'multiline':True]['text':'*begin repeat
 * #TYPE = UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *         BYTE,  SHORT,  INT,  LONG,  LONGLONG,
 *         FLOAT, DOUBLE, LONGDOUBLE#
 *
 * #BTYPE = BYTE, SHORT, INT,  LONG, LONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          FLOAT, DOUBLE, LONGDOUBLE#
 * #type = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *         npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *         npy_float, npy_double, npy_longdouble#
 *
 * #is_fp = 0*10, 1*3#
 * #is_unsigned = 1*5, 0*5, 0*3#
 * #supports_ncontig = 0*2, 1*3, 0*2, 1*3, 1*3#
 ','line_number':238,'multiline':True]['text':'*begin repeat1
 * #len = 8, 16, 32, 64#
 ','line_number':256,'multiline':True]['text':'*end repeat1*','line_number':273,'multiline':True]['text':'*begin repeat1
 * #kind = negative#
 * #intrin = negative#
 ','line_number':276,'multiline':True]['text':' no overlap and operands are contiguous','line_number':291,'multiline':False]['text':' contiguous input, non-contiguous output','line_number':304,'multiline':False]['text':' non-contiguous input, contiguous output','line_number':311,'multiline':False]['text':' SSE2 does better with unrolled scalar for heavy non-contiguous','line_number':317,'multiline':False]['text':' non-contiguous input and output','line_number':320,'multiline':False]['text':' @supports_ncontig@','line_number':328,'multiline':False]['text':' TO_SIMD_SFX','line_number':330,'multiline':False]['text':'
     * scalar unrolls
     * 8x unroll performed best on
     *  - Apple M1 Native / arm64
     *  - Apple M1 Rosetta / SSE42
     *  - iMacPro / AVX512
     ','line_number':332,'multiline':True]['text':'*begin repeat2
     * #U = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15#
     ','line_number':341,'multiline':True]['text':'*end repeat2*','line_number':348,'multiline':True]['text':' NPY_DISABLE_OPTIMIZATION','line_number':350,'multiline':False]['text':'*end repeat*','line_number':362,'multiline':True]