['text':' Only use thread if configured in config and python supports it ','line_number':11,'multiline':True]['text':'
 * There are several places in the code where an array of dimensions
 * is allocated statically.  This is the size of that static
 * allocation.
 *
 * The array creation itself could have arbitrary dimensions but all
 * the places where static allocation is used would need to be changed
 * to dynamic (including inside of several structures)
 *
 * As of NumPy 2.0, we strongly discourage the downstream use of NPY_MAXDIMS,
 * but since auditing everything seems a big ask, define it as 64.
 * A future version could:
 * - Increase or remove the limit and require recompilation (like 2.0 did)
 * - Deprecate or remove the macro but keep the limit (at basically any time)
 ','line_number':30,'multiline':True]['text':' We cannot change this as it would break ABI: ','line_number':46,'multiline':True]['text':' NPY_MAXARGS is version dependent and defined in npy_2_compat.h ','line_number':48,'multiline':True]['text':' Used for Converter Functions "O&" code in ParseTuple ','line_number':50,'multiline':True]['text':'
                     * New 1.6 types appended, may be integrated
                     * into the above in 2.0.
                     ','line_number':66,'multiline':True]['text':' leave room for characters ','line_number':75,'multiline':True]['text':' The number of types not including the new 1.6 types ','line_number':77,'multiline':True]['text':' basetype array priority ','line_number':84,'multiline':True]['text':' default subtype priority ','line_number':87,'multiline':True]['text':' default scalar priority ','line_number':90,'multiline':True]['text':' How many floating point types are there (excluding half) ','line_number':93,'multiline':True]['text':'
 * These characters correspond to the array type and the struct
 * module
 ','line_number':96,'multiline':True]['text':'
         * Note, we removed `NPY_INTPLTR` due to changing its definition
         * to 'n', rather than 'p'.  On any typical platform this is the
         * same integer.  'n' should be used for the `np.intp` with the same
         * size as `size_t` while 'p' remains pointer sized.
         *
         * 'p', 'P', 'n', and 'N' are valid and defined explicitly
         * in `arraytypes.c.src`.
         ','line_number':129,'multiline':True]['text':'
         * These are for dtype 'kinds', not dtype 'typecodes'
         * as the above are for.
         ','line_number':139,'multiline':True]['text':'
 * Changing this may break Numpy API compatibility
 * due to changing offsets in PyArray_ArrFuncs, so be
 * careful. Here we have reused the mergesort slot for
 * any kind of stable sort, the actual implementation will
 * depend on the data type.
 ','line_number':150,'multiline':True]['text':' For specifying array memory layout or iteration order ','line_number':190,'multiline':True]['text':' Fortran order if inputs are all Fortran, C otherwise ','line_number':192,'multiline':True]['text':' C order ','line_number':194,'multiline':True]['text':' Fortran order ','line_number':196,'multiline':True]['text':' An order as close to the inputs as possible ','line_number':198,'multiline':True]['text':' For specifying allowed casting in operations which support it ','line_number':202,'multiline':True]['text':' Only allow identical types ','line_number':205,'multiline':True]['text':' Allow identical and byte swapped types ','line_number':207,'multiline':True]['text':' Only allow safe casts ','line_number':209,'multiline':True]['text':' Allow safe casts or casts within the same kind ','line_number':211,'multiline':True]['text':' Allow any casts ','line_number':213,'multiline':True]['text':' The special not-a-time (NaT) value ','line_number':229,'multiline':True]['text':'
 * Upper bound on the length of a DATETIME ISO 8601 string
 *   YEAR: 21 (64-bit year)
 *   MONTH: 3
 *   DAY: 3
 *   HOURS: 3
 *   MINUTES: 3
 *   SECONDS: 3
 *   ATTOSECONDS: 1 + 3*6
 *   TIMEZONE: 5
 *   NULL TERMINATOR: 1
 ','line_number':232,'multiline':True]['text':' The FR in the unit names stands for frequency ','line_number':246,'multiline':True]['text':' Force signed enum type, must be -1 for code compatibility ','line_number':248,'multiline':True]['text':' error or undetermined ','line_number':249,'multiline':True]['text':' Start of valid units ','line_number':251,'multiline':True]['text':' Years ','line_number':252,'multiline':True]['text':' Months ','line_number':253,'multiline':True]['text':' Weeks ','line_number':254,'multiline':True]['text':' Gap where 1.6 NPY_FR_B (value 3) was ','line_number':255,'multiline':True]['text':' Days ','line_number':256,'multiline':True]['text':' hours ','line_number':257,'multiline':True]['text':' minutes ','line_number':258,'multiline':True]['text':' seconds ','line_number':259,'multiline':True]['text':' milliseconds ','line_number':260,'multiline':True]['text':' microseconds ','line_number':261,'multiline':True]['text':' nanoseconds ','line_number':262,'multiline':True]['text':' picoseconds ','line_number':263,'multiline':True]['text':' femtoseconds ','line_number':264,'multiline':True]['text':' attoseconds ','line_number':265,'multiline':True]['text':' unbound units, can convert to anything ','line_number':266,'multiline':True]['text':'
 * NOTE: With the NPY_FR_B gap for 1.6 ABI compatibility, NPY_DATETIME_NUMUNITS
 * is technically one more than the actual number of units.
 ','line_number':269,'multiline':True]['text':'
 * Business day conventions for mapping invalid business
 * days to valid business days.
 ','line_number':276,'multiline':True]['text':' Go forward in time to the following business day. ','line_number':281,'multiline':True]['text':' Go backward in time to the preceding business day. ','line_number':284,'multiline':True]['text':'
     * Go forward in time to the following business day, unless it
     * crosses a month boundary, in which case go backward
     ','line_number':287,'multiline':True]['text':'
     * Go backward in time to the preceding business day, unless it
     * crosses a month boundary, in which case go forward.
     ','line_number':292,'multiline':True]['text':' Produce a NaT for non-business days. ','line_number':297,'multiline':True]['text':' Raise an exception for non-business days. ','line_number':299,'multiline':True]['text':'***********************************************************
 * NumPy Auxiliary Data for inner loops, sort functions, etc.
 ***********************************************************','line_number':303,'multiline':True]['text':'
 * When creating an auxiliary data struct, this should always appear
 * as the first member, like this:
 *
 * typedef struct {
 *     NpyAuxData base;
 *     double constant;
 * } constant_multiplier_aux_data;
 ','line_number':307,'multiline':True]['text':' Function pointers for freeing or cloning auxiliary data ','line_number':318,'multiline':True]['text':' To allow for a bit of expansion without breaking the ABI ','line_number':325,'multiline':True]['text':' Macros to use for freeing and cloning auxiliary data ','line_number':329,'multiline':True]['text':'
* Macros to define how array, and dimension/strides data is
* allocated. These should be made private
','line_number':342,'multiline':True]['text':' use the Raw versions which are safe to call with the GIL released ','line_number':351,'multiline':True]['text':' Dimensions and strides ','line_number':361,'multiline':True]['text':' forward declaration ','line_number':370,'multiline':True]['text':' These must deal with unaligned and swapped data if necessary ','line_number':373,'multiline':True]['text':'
 * These assume aligned and notswapped data -- a buffer will be used
 * before or contiguous data will be obtained
 ','line_number':384,'multiline':True]['text':'
 * XXX the ignore argument should be removed next time the API version
 * is bumped. It used to be the separator.
 ','line_number':398,'multiline':True]['text':'
         * Functions to cast to most other standard types
         * Can have some NULL entries. The types
         * DATETIME, TIMEDELTA, and HALF go into the castdict
         * even though they are built-in.
         ','line_number':422,'multiline':True]['text':' The next four functions *cannot* be NULL ','line_number':430,'multiline':True]['text':'
         * Functions to get and set items with standard Python types
         * -- not array scalars
         ','line_number':432,'multiline':True]['text':'
         * Copy and/or swap data.  Memory areas may not overlap
         * Use memmove first if they might
         ','line_number':439,'multiline':True]['text':'
         * Function to compare items
         * Can be NULL
         ','line_number':446,'multiline':True]['text':'
         * Function to select largest
         * Can be NULL
         ','line_number':452,'multiline':True]['text':'
         * Function to compute dot product
         * Can be NULL
         ','line_number':458,'multiline':True]['text':'
         * Function to scan an ASCII file and
         * place a single value plus possible separator
         * Can be NULL
         ','line_number':464,'multiline':True]['text':'
         * Function to read a single value from a string
         * and adjust the pointer; Can be NULL
         ','line_number':471,'multiline':True]['text':'
         * Function to determine if data is zero or not
         * If NULL a default version is
         * used at Registration time.
         ','line_number':477,'multiline':True]['text':'
         * Used for arange. Should return 0 on success
         * and -1 on failure.
         * Can be NULL.
         ','line_number':484,'multiline':True]['text':'
         * Function to fill arrays with scalar values
         * Can be NULL
         ','line_number':491,'multiline':True]['text':'
         * Sorting functions
         * Can be NULL
         ','line_number':497,'multiline':True]['text':'
         * Dictionary of additional casting functions
         * PyArray_VectorUnaryFuncs
         * which can be populated to support casting
         * to other registered types. Can be NULL
         ','line_number':504,'multiline':True]['text':'
         * Functions useful for generalizing
         * the casting rules.
         * Can be NULL;
         ','line_number':512,'multiline':True]['text':'
         * Function to select smallest
         * Can be NULL
         ','line_number':525,'multiline':True]['text':' The item must be reference counted when it is inserted or extracted. ','line_number':533,'multiline':True]['text':' Same as needing REFCOUNT ','line_number':535,'multiline':True]['text':' Convert to list for pickling ','line_number':537,'multiline':True]['text':' The item is a POINTER  ','line_number':539,'multiline':True]['text':' memory needs to be initialized for this data-type ','line_number':541,'multiline':True]['text':' operations need Python C-API so don't give-up thread. ','line_number':543,'multiline':True]['text':' Use f.getitem when extracting elements of this data-type ','line_number':545,'multiline':True]['text':' Use f.setitem when setting creating 0-d array from this data-type.','line_number':547,'multiline':True]['text':' A sticky flag specifically for structured arrays ','line_number':549,'multiline':True]['text':'
 *These are inherited for global data-type if any data-types in the
 * field have them
 ','line_number':552,'multiline':True]['text':'
         * the type object representing an
         * instance of this type -- should not
         * be two type_numbers with the same type
         * object.
         ','line_number':571,'multiline':True]['text':' kind for this type ','line_number':578,'multiline':True]['text':' unique-character representing this type ','line_number':580,'multiline':True]['text':'
         * '>' (big), '<' (little), '|'
         * (not-applicable), or '=' (native).
         ','line_number':582,'multiline':True]['text':' flags describing data type ','line_number':587,'multiline':True]['text':' number representing this type ','line_number':589,'multiline':True]['text':' element size (itemsize) for this type ','line_number':591,'multiline':True]['text':' alignment needed for this type ','line_number':593,'multiline':True]['text':'
         * Non-NULL if this type is
         * is an array (C-contiguous)
         * of some other type
         ','line_number':595,'multiline':True]['text':'
         * The fields dictionary for this type
         * For statically defined descr this
         * is always Py_None
         ','line_number':601,'multiline':True]['text':'
         * An ordered tuple of field names or NULL
         * if no fields are defined
         ','line_number':607,'multiline':True]['text':'
         * a table of functions specific for each
         * basic data descriptor
         ','line_number':612,'multiline':True]['text':' Metadata about this dtype ','line_number':617,'multiline':True]['text':'
         * Metadata specific to the C implementation
         * of the particular dtype. This was added
         * for NumPy 1.7.0.
         ','line_number':619,'multiline':True]['text':' Cached hash value (-1 if not yet computed).
         * This was added for NumPy 2.0.0.
         ','line_number':625,'multiline':True]['text':' a tuple ','line_number':633,'multiline':True]['text':'
 * Memory handler structure for array data.
 ','line_number':636,'multiline':True]['text':' The declaration of free differs from PyMemAllocatorEx ','line_number':639,'multiline':True]['text':'
     * This is the end of the version=1 struct. Only add new fields after
     * this line
     ','line_number':646,'multiline':True]['text':' multiple of 64 to keep the struct aligned ','line_number':653,'multiline':True]['text':' currently 1 ','line_number':654,'multiline':True]['text':'
 * The main array object structure.
 *
 * It has been recommended to use the inline functions defined below
 * (PyArray_DATA and friends) to access fields here for a number of
 * releases. Direct access to the members themselves is deprecated.
 * To ensure that your code does not use deprecated access,
 * #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
 * (or NPY_1_8_API_VERSION or higher as required).
 ','line_number':659,'multiline':True]['text':' This struct will be moved to a private header in a future release ','line_number':669,'multiline':True]['text':' Pointer to the raw data buffer ','line_number':672,'multiline':True]['text':' The number of dimensions, also called 'ndim' ','line_number':674,'multiline':True]['text':' The size in each dimension, also called 'shape' ','line_number':676,'multiline':True]['text':'
     * Number of bytes to jump to get to the
     * next element in each dimension
     ','line_number':678,'multiline':True]['text':'
     * This object is decref'd upon
     * deletion of array. Except in the
     * case of WRITEBACKIFCOPY which has
     * special handling.
     *
     * For views it points to the original
     * array, collapsed so no chains of
     * views occur.
     *
     * For creation from buffer object it
     * points to an object that should be
     * decref'd on deletion
     *
     * For WRITEBACKIFCOPY flag this is an
     * array to-be-updated upon calling
     * PyArray_ResolveWritebackIfCopy
     ','line_number':683,'multiline':True]['text':' Pointer to type structure ','line_number':702,'multiline':True]['text':' Flags describing array -- see below ','line_number':704,'multiline':True]['text':' For weak references ','line_number':706,'multiline':True]['text':' private buffer info, tagged to allow warning ','line_number':709,'multiline':True]['text':'
     * For malloc/calloc/realloc/free per object
     ','line_number':711,'multiline':True]['text':'
 * To hide the implementation details, we only expose
 * the Python struct HEAD.
 ','line_number':719,'multiline':True]['text':'
 * Can't put this in npy_deprecated_api.h like the others.
 * PyArrayObject field access is deprecated as of NumPy 1.7.
 ','line_number':725,'multiline':True]['text':'
 * Removed 2020-Nov-25, NumPy 1.20
 * #define NPY_SIZEOF_PYARRAYOBJECT (sizeof(PyArrayObject_fields))
 *
 * The above macro was removed as it gave a false sense of a stable ABI
 * with respect to the structures size.  If you require a runtime constant,
 * you can use `PyArray_Type.tp_basicsize` instead.  Otherwise, please
 * see the PyArrayObject documentation or ask the NumPy developers for
 * information on how to correctly replace the macro in a way that is
 * compatible with multiple NumPy versions.
 ','line_number':736,'multiline':True]['text':' Mirrors buffer object to ptr ','line_number':748,'multiline':True]['text':'
 * This structure contains an exploded view of a date-time value.
 * NaT is represented by year == NPY_DATETIME_NAT.
 ','line_number':768,'multiline':True]['text':' This is not used internally. ','line_number':777,'multiline':True]['text':'
 * Means c-style contiguous (last index varies the fastest). The data
 * elements right after each other.
 *
 * This flag may be requested in constructor functions.
 * This flag may be tested for in PyArray_FLAGS(arr).
 ','line_number':785,'multiline':True]['text':'
 * Set if array is a contiguous Fortran array: the first index varies
 * the fastest in memory (strides array is reverse of C-contiguous
 * array)
 *
 * This flag may be requested in constructor functions.
 * This flag may be tested for in PyArray_FLAGS(arr).
 ','line_number':794,'multiline':True]['text':'
 * Note: all 0-d arrays are C_CONTIGUOUS and F_CONTIGUOUS. If a
 * 1-d array is C_CONTIGUOUS it is also F_CONTIGUOUS. Arrays with
 * more then one dimension can be C_CONTIGUOUS and F_CONTIGUOUS
 * at the same time if they have either zero or one element.
 * A higher dimensional array always has the same contiguity flags as
 * `array.squeeze()`; dimensions with `array.shape[dimension] == 1` are
 * effectively ignored when checking for contiguity.
 ','line_number':804,'multiline':True]['text':'
 * If set, the array owns the data: it will be free'd when the array
 * is deleted.
 *
 * This flag may be tested for in PyArray_FLAGS(arr).
 ','line_number':814,'multiline':True]['text':'
 * An array never has the next four set; they're only used as parameter
 * flags to the various FromAny functions
 *
 * This flag may be requested in constructor functions.
 ','line_number':822,'multiline':True]['text':' Cause a cast to occur regardless of whether or not it is safe. ','line_number':829,'multiline':True]['text':'
 * Always copy the array. Returned arrays are always CONTIGUOUS,
 * ALIGNED, and WRITEABLE. See also: NPY_ARRAY_ENSURENOCOPY = 0x4000.
 *
 * This flag may be requested in constructor functions.
 ','line_number':832,'multiline':True]['text':'
 * Make sure the returned array is a base-class ndarray
 *
 * This flag may be requested in constructor functions.
 ','line_number':840,'multiline':True]['text':'
 * Make sure that the strides are in units of the element size Needed
 * for some operations with record-arrays.
 *
 * This flag may be requested in constructor functions.
 ','line_number':847,'multiline':True]['text':'
 * Array data is aligned on the appropriate memory address for the type
 * stored according to how the compiler would align things (e.g., an
 * array of integers (4 bytes each) starts on a memory address that's
 * a multiple of 4)
 *
 * This flag may be requested in constructor functions.
 * This flag may be tested for in PyArray_FLAGS(arr).
 ','line_number':855,'multiline':True]['text':'
 * Array data has the native endianness
 *
 * This flag may be requested in constructor functions.
 ','line_number':866,'multiline':True]['text':'
 * Array data is writeable
 *
 * This flag may be requested in constructor functions.
 * This flag may be tested for in PyArray_FLAGS(arr).
 ','line_number':873,'multiline':True]['text':'
 * If this flag is set, then base contains a pointer to an array of
 * the same size that should be updated with the current contents of
 * this array when PyArray_ResolveWritebackIfCopy is called.
 *
 * This flag may be requested in constructor functions.
 * This flag may be tested for in PyArray_FLAGS(arr).
 ','line_number':881,'multiline':True]['text':'
 * No copy may be made while converting from an object/array (result is a view)
 *
 * This flag may be requested in constructor functions.
 ','line_number':891,'multiline':True]['text':'
 * NOTE: there are also internal flags defined in multiarray/arrayobject.h,
 * which start at bit 31 and work down.
 ','line_number':898,'multiline':True]['text':' This flag is for the array interface, not PyArrayObject ','line_number':932,'multiline':True]['text':'
 * Size of internal buffers used for alignment Make BUFSIZE a multiple
 * of sizeof(npy_cdouble) -- usually 16 so that ufunc buffers are aligned
 ','line_number':938,'multiline':True]['text':' buffer stress test size: ','line_number':945,'multiline':True]['text':'#define NPY_BUFSIZE 17','line_number':946,'multiline':True]['text':'
 * C API: consists of Macros and functions.  The MACROS are defined
 * here.
 ','line_number':948,'multiline':True]['text':' the variable is used in some places, so always define it ','line_number':961,'multiline':True]['text':'*********************************
 * The nditer object, added in 1.6
 *********************************','line_number':996,'multiline':True]['text':' The actual structure of the iterator is an internal detail ','line_number':1000,'multiline':True]['text':' Iterator function pointers that may be specialized ','line_number':1003,'multiline':True]['text':'** Global flags that may be passed to the iterator constructors **','line_number':1008,'multiline':True]['text':' Track an index representing C order ','line_number':1010,'multiline':True]['text':' Track an index representing Fortran order ','line_number':1012,'multiline':True]['text':' Track a multi-index ','line_number':1014,'multiline':True]['text':' User code external to the iterator does the 1-dimensional innermost loop ','line_number':1016,'multiline':True]['text':' Convert all the operands to a common data type ','line_number':1018,'multiline':True]['text':' Operands may hold references, requiring API access during iteration ','line_number':1020,'multiline':True]['text':' Zero-sized operands should be permitted, iteration checks IterSize for 0 ','line_number':1022,'multiline':True]['text':' Permits reductions (size-0 stride with dimension size > 1) ','line_number':1024,'multiline':True]['text':' Enables sub-range iteration ','line_number':1026,'multiline':True]['text':' Enables buffering ','line_number':1028,'multiline':True]['text':' When buffering is enabled, grows the inner loop if possible ','line_number':1030,'multiline':True]['text':' Delay allocation of buffers until first Reset* call ','line_number':1032,'multiline':True]['text':' When NPY_KEEPORDER is specified, disable reversing negative-stride axes ','line_number':1034,'multiline':True]['text':'
 * If output operands overlap with other operands (based on heuristics that
 * has false positives but no false negatives), make temporary copies to
 * eliminate overlap.
 ','line_number':1036,'multiline':True]['text':'** Per-operand flags that may be passed to the iterator constructors **','line_number':1043,'multiline':True]['text':' The operand will be read from and written to ','line_number':1045,'multiline':True]['text':' The operand will only be read from ','line_number':1047,'multiline':True]['text':' The operand will only be written to ','line_number':1049,'multiline':True]['text':' The operand's data must be in native byte order ','line_number':1051,'multiline':True]['text':' The operand's data must be aligned ','line_number':1053,'multiline':True]['text':' The operand's data must be contiguous (within the inner loop) ','line_number':1055,'multiline':True]['text':' The operand may be copied to satisfy requirements ','line_number':1057,'multiline':True]['text':' The operand may be copied with WRITEBACKIFCOPY to satisfy requirements ','line_number':1059,'multiline':True]['text':' Allocate the operand if it is NULL ','line_number':1061,'multiline':True]['text':' If an operand is allocated, don't use any subtype ','line_number':1063,'multiline':True]['text':' This is a virtual array slot, operand is NULL but temporary data is there ','line_number':1065,'multiline':True]['text':' Require that the dimension match the iterator dimensions exactly ','line_number':1067,'multiline':True]['text':' A mask is being used on this array, affects buffer -> array copy ','line_number':1069,'multiline':True]['text':' This array is the mask for all WRITEMASKED operands ','line_number':1071,'multiline':True]['text':' Assume iterator order data access for COPY_IF_OVERLAP ','line_number':1073,'multiline':True]['text':'****************************
 * Basic iterator object
 ****************************','line_number':1080,'multiline':True]['text':' FWD declaration ','line_number':1084,'multiline':True]['text':'
 * type of the function which translates a set of coordinates to a
 * pointer to the data
 ','line_number':1087,'multiline':True]['text':' number of dimensions - 1 ','line_number':1096,'multiline':True]['text':' N-dimensional loop ','line_number':1098,'multiline':True]['text':' ao->dimensions - 1 ','line_number':1099,'multiline':True]['text':' ao->strides or fake ','line_number':1100,'multiline':True]['text':' how far to jump back ','line_number':1101,'multiline':True]['text':' shape factors ','line_number':1102,'multiline':True]['text':' pointer to current item','line_number':1104,'multiline':True]['text':' Iterator API ','line_number':1114,'multiline':True]['text':'
 * Any object passed to PyArray_Broadcast must be binary compatible
 * with this structure.
 ','line_number':1222,'multiline':True]['text':' number of iters ','line_number':1229,'multiline':True]['text':' broadcasted size ','line_number':1230,'multiline':True]['text':' current index ','line_number':1231,'multiline':True]['text':' number of dims ','line_number':1232,'multiline':True]['text':' dimensions ','line_number':1233,'multiline':True]['text':'
         * Space for the indivdual iterators, do not specify size publically
         * to allow changing it more easily.
         * One reason is that Cython uses this for checks and only allows
         * growing structs (as of Cython 3.0.6).  It also allows NPY_MAXARGS
         * to be runtime dependent.
         ','line_number':1234,'multiline':True]['text':' 64 is NPY_MAXARGS ','line_number':1242,'multiline':True]['text':' not internal build ','line_number':1243,'multiline':True]['text':'
     * PyArrayIterObject part: keep this in this exact order
     ','line_number':1344,'multiline':True]['text':' number of dimensions - 1 ','line_number':1347,'multiline':True]['text':' N-dimensional loop ','line_number':1349,'multiline':True]['text':' ao->dimensions - 1 ','line_number':1350,'multiline':True]['text':' ao->strides or fake ','line_number':1351,'multiline':True]['text':' how far to jump back ','line_number':1352,'multiline':True]['text':' shape factors ','line_number':1353,'multiline':True]['text':' pointer to current item','line_number':1355,'multiline':True]['text':'
     * New members
     ','line_number':1363,'multiline':True]['text':' Dimensions is the dimension of the array ','line_number':1368,'multiline':True]['text':'
     * Neighborhood points coordinates are computed relatively to the
     * point pointed by _internal_iter
     ','line_number':1371,'multiline':True]['text':'
     * To keep a reference to the representation of the constant value
     * for constant padding
     ','line_number':1376,'multiline':True]['text':'
 * Neighborhood iterator API
 ','line_number':1385,'multiline':True]['text':' General: those work for any mode ','line_number':1389,'multiline':True]['text':'
 * Include inline implementations - functions defined there are not
 * considered public API
 ','line_number':1399,'multiline':True]['text':' The default array type ','line_number':1409,'multiline':True]['text':' default integer type defined in npy_2_compat header ','line_number':1411,'multiline':True]['text':'
 * All sorts of useful ways to look into a PyArrayObject. It is recommended
 * to use PyArrayObject * objects instead of always casting from PyObject *,
 * for improved type checking.
 *
 * In many cases here the macro versions of the accessors are deprecated,
 * but can't be immediately changed to inline functions because the
 * preexisting macros accept PyObject * and do automatic casts. Inline
 * functions accepting PyArrayObject * provides for some compile-time
 * checking of correctness when working with these objects in C.
 ','line_number':1413,'multiline':True]['text':'
 * Changing access macros into functions, to allow for future hiding
 * of the internal memory layout. This later hiding will allow the 2.x series
 * to change the internal representation of arrays without affecting
 * ABI compatibility.
 ','line_number':1435,'multiline':True]['text':'
 * SETITEM should only be used if it is known that the value is a scalar
 * and of a type understood by the arrays dtype.
 * Use `PyArray_Pack` if the value may be of a different dtype.
 ','line_number':1527,'multiline':True]['text':' These macros are deprecated as of NumPy 1.7. ','line_number':1540,'multiline':True]['text':'
 * Enables the specified array flags. Does no checking,
 * assumes you know what you're doing.
 ','line_number':1579,'multiline':True]['text':'
 * Clears the specified array flags. Does no checking,
 * assumes you know what you're doing.
 ','line_number':1589,'multiline':True]['text':'
     * FIXME: This should check for a flag on the data-type that
     * states whether or not it is variable length.  Because the
     * ISFLEXIBLE check is hard-coded to the built-in data-types.
     ','line_number':1687,'multiline':True]['text':'***********************************************************
 * A struct used by PyArray_CreateSortedStridePerm, new in 1.7.
 ***********************************************************','line_number':1730,'multiline':True]['text':'***********************************************************
 * This is the form of the struct that's stored in the
 * PyCapsule returned by an array's __array_struct__ attribute. See
 * https://docs.scipy.org/doc/numpy/reference/arrays.interface.html for the full
 * documentation.
 ***********************************************************','line_number':1738,'multiline':True]['text':'
                           * contains the integer 2 as a sanity
                           * check
                           ','line_number':1745,'multiline':True]['text':' number of dimensions ','line_number':1750,'multiline':True]['text':'
                           * kind in array --- character code of
                           * typestr
                           ','line_number':1752,'multiline':True]['text':' size of each element ','line_number':1757,'multiline':True]['text':'
                           * how should be data interpreted. Valid
                           * flags are CONTIGUOUS (1), F_CONTIGUOUS (2),
                           * ALIGNED (0x100), NOTSWAPPED (0x200), and
                           * WRITEABLE (0x400).  ARR_HAS_DESCR (0x800)
                           * states that arrdescr field is present in
                           * structure
                           ','line_number':1759,'multiline':True]['text':'
                            * A length-nd array of shape
                            * information
                            ','line_number':1768,'multiline':True]['text':' A length-nd array of stride information ','line_number':1773,'multiline':True]['text':' A pointer to the first element of the array ','line_number':1775,'multiline':True]['text':'
                           * A list of fields or NULL (ignored if flags
                           * does not have ARR_HAS_DESCR flag set)
                           ','line_number':1777,'multiline':True]['text':'
 * PyArray_DTypeMeta related definitions.
 *
 * As of now, this API is preliminary and will be extended as necessary.
 ','line_number':1784,'multiline':True]['text':'
     * The Structures defined in this block are currently considered
     * private API and may change without warning!
     * Part of this (at least the size) is expected to be public API without
     * further modifications.
     ','line_number':1790,'multiline':True]['text':' TODO: Make this definition public in the API, as soon as its settled ','line_number':1796,'multiline':True]['text':'
     * While NumPy DTypes would not need to be heap types the plan is to
     * make DTypes available in Python at which point they will be heap types.
     * Since we also wish to add fields to the DType class, this looks like
     * a typical instance definition, but with PyHeapTypeObject instead of
     * only the PyObject_HEAD.
     * This must only be exposed very extremely careful consideration, since
     * it is a fairly complex construct which may be better to allow
     * refactoring of.
     ','line_number':1799,'multiline':True]['text':'
         * Most DTypes will have a singleton default instance, for the
         * parametric legacy DTypes (bytes, string, void, datetime) this
         * may be a pointer to the *prototype* instance?
         ','line_number':1812,'multiline':True]['text':' Copy of the legacy DTypes type number, usually invalid. ','line_number':1818,'multiline':True]['text':' The type object of the scalar instances (may be NULL?) ','line_number':1821,'multiline':True]['text':'
         * DType flags to signal legacy, parametric, or
         * abstract.  But plenty of space for additional information/flags.
         ','line_number':1823,'multiline':True]['text':'
         * Use indirection in order to allow a fixed size for this struct.
         * A stable ABI size makes creating a static DType less painful
         * while also ensuring flexibility for all opaque API (with one
         * indirection due the pointer lookup).
         ','line_number':1829,'multiline':True]['text':' NPY_INTERNAL_BUILD ','line_number':1839,'multiline':True]['text':'
 * Use the keyword NPY_DEPRECATED_INCLUDES to ensure that the header files
 * npy_*_*_deprecated_api.h are only included from here and nowhere else.
 ','line_number':1842,'multiline':True]['text':'
 * There is no file npy_1_8_deprecated_api.h since there are no additional
 * deprecated API features in NumPy 1.8.
 *
 * Note to maintainers: insert code like the following in future NumPy
 * versions.
 *
 * #if !defined(NPY_NO_DEPRECATED_API) || \
 *     (NPY_NO_DEPRECATED_API < NPY_1_9_API_VERSION)
 * #include "npy_1_9_deprecated_api.h"
 * #endif
 ','line_number':1854,'multiline':True]['text':' NUMPY_CORE_INCLUDE_NUMPY_NDARRAYTYPES_H_ ','line_number':1868,'multiline':True]