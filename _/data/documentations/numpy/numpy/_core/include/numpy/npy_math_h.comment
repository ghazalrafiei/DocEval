['text':' By adding static inline specifiers to npy_math function definitions when
   appropriate, compiler is given the opportunity to optimize ','line_number':8,'multiline':True]['text':'
 * NAN and INFINITY like macros (same behavior as glibc for NAN, same as C99
 * for INFINITY)
 *
 * XXX: I should test whether INFINITY and NAN are available on the platform
 ','line_number':24,'multiline':True]['text':'
 * Useful constants
 ','line_number':69,'multiline':True]['text':' e ','line_number':72,'multiline':True]['text':' log_2 e ','line_number':73,'multiline':True]['text':' log_10 e ','line_number':74,'multiline':True]['text':' log_e 2 ','line_number':75,'multiline':True]['text':' log_e 10 ','line_number':76,'multiline':True]['text':' pi ','line_number':77,'multiline':True]['text':' pi/2 ','line_number':78,'multiline':True]['text':' pi/4 ','line_number':79,'multiline':True]['text':' 1/pi ','line_number':80,'multiline':True]['text':' 2/pi ','line_number':81,'multiline':True]['text':' Euler constant ','line_number':82,'multiline':True]['text':' sqrt(2) ','line_number':83,'multiline':True]['text':' 1/sqrt(2) ','line_number':84,'multiline':True]['text':' e ','line_number':86,'multiline':True]['text':' log_2 e ','line_number':87,'multiline':True]['text':' log_10 e ','line_number':88,'multiline':True]['text':' log_e 2 ','line_number':89,'multiline':True]['text':' log_e 10 ','line_number':90,'multiline':True]['text':' pi ','line_number':91,'multiline':True]['text':' pi/2 ','line_number':92,'multiline':True]['text':' pi/4 ','line_number':93,'multiline':True]['text':' 1/pi ','line_number':94,'multiline':True]['text':' 2/pi ','line_number':95,'multiline':True]['text':' Euler constant ','line_number':96,'multiline':True]['text':' sqrt(2) ','line_number':97,'multiline':True]['text':' 1/sqrt(2) ','line_number':98,'multiline':True]['text':' e ','line_number':100,'multiline':True]['text':' log_2 e ','line_number':101,'multiline':True]['text':' log_10 e ','line_number':102,'multiline':True]['text':' log_e 2 ','line_number':103,'multiline':True]['text':' log_e 10 ','line_number':104,'multiline':True]['text':' pi ','line_number':105,'multiline':True]['text':' pi/2 ','line_number':106,'multiline':True]['text':' pi/4 ','line_number':107,'multiline':True]['text':' 1/pi ','line_number':108,'multiline':True]['text':' 2/pi ','line_number':109,'multiline':True]['text':' Euler constant ','line_number':110,'multiline':True]['text':' sqrt(2) ','line_number':111,'multiline':True]['text':' 1/sqrt(2) ','line_number':112,'multiline':True]['text':'
 * Integer functions.
 ','line_number':114,'multiline':True]['text':'
 * C99 double math funcs that need fixups or are blocklist-able
 ','line_number':164,'multiline':True]['text':' Mandatory C99 double math funcs, no blocklisting or fixups ','line_number':174,'multiline':True]['text':' defined for legacy reasons, should be deprecated at some point ','line_number':175,'multiline':True]['text':'
 * IEEE 754 fpu handling
 ','line_number':208,'multiline':True]['text':' use builtins to avoid function calls in tight loops
 * only available if npy_config.h is available (= numpys own build) ','line_number':212,'multiline':True]['text':' only available if npy_config.h is available (= numpys own build) ','line_number':221,'multiline':True]['text':' only available if npy_config.h is available (= numpys own build) ','line_number':228,'multiline':True]['text':'
 * float C99 math funcs that need fixups or are blocklist-able
 ','line_number':237,'multiline':True]['text':' Mandatory C99 float math funcs, no blocklisting or fixups ','line_number':251,'multiline':True]['text':' defined for legacy reasons, should be deprecated at some point ','line_number':252,'multiline':True]['text':'
 * long double C99 double math funcs that need fixups or are blocklist-able
 ','line_number':282,'multiline':True]['text':' Mandatory C99 double math funcs, no blocklisting or fixups ','line_number':296,'multiline':True]['text':' defined for legacy reasons, should be deprecated at some point ','line_number':297,'multiline':True]['text':'
 * Non standard functions
 ','line_number':326,'multiline':True]['text':'
 * Complex declarations
 ','line_number':359,'multiline':True]['text':'
 * Double precision complex functions
 ','line_number':454,'multiline':True]['text':'
 * Single precision complex functions
 ','line_number':482,'multiline':True]['text':'
 * Extended precision complex functions
 ','line_number':511,'multiline':True]['text':'
 * Functions that set the floating point error
 * status word.
 ','line_number':540,'multiline':True]['text':'
 * platform-dependent code translates floating point
 * status to an integer sum of these values
 ','line_number':545,'multiline':True]['text':'
 * use caution with these - clang and gcc8.1 are known to reorder calls
 * to this form of the function which can defeat the check. The _barrier
 * form of the call is preferable, where the argument is
 * (char*)&local_variable
 ','line_number':556,'multiline':True]['text':' NUMPY_CORE_INCLUDE_NUMPY_NPY_MATH_H_ ','line_number':578,'multiline':True]