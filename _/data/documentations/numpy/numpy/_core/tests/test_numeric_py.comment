['text':' See also gh-6740','line_number':63,'multiline':False]['text':' check that non-array arguments to functions wrap them in arrays','line_number':88,'multiline':False]['text':' Setting the seed to make the test reproducible','line_number':307,'multiline':False]['text':' The returned  object should be the object specified during calling','line_number':319,'multiline':False]['text':' The returned  object should be the object specified during calling','line_number':328,'multiline':False]['text':' Shape of returned mean and std should be same','line_number':331,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':335,'multiline':False]['text':' Setting the seed to make the test reproducible','line_number':342,'multiline':False]['text':' The returned  object should be the object specified during calling','line_number':354,'multiline':False]['text':' The returned  object should be the object specified during calling','line_number':363,'multiline':False]['text':' Shape of returned mean and var should be same','line_number':366,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':370,'multiline':False]['text':' Shape of returned mean and std should be same','line_number':389,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':392,'multiline':False]['text':' Shape of returned mean and var should be same','line_number':412,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':415,'multiline':False]['text':' Shape of returned mean and std should be same','line_number':439,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':442,'multiline':False]['text':' Shape of returned mean and var should be same','line_number':466,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':469,'multiline':False]['text':' Setting the seed to make the test reproducible','line_number':477,'multiline':False]['text':' Shape of returned mean and std should be same','line_number':494,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':497,'multiline':False]['text':' Setting the seed to make the test reproducible','line_number':503,'multiline':False]['text':' Shape of returned mean and std should be same','line_number':520,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':523,'multiline':False]['text':' Shape of returned mean and std should be same','line_number':554,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':558,'multiline':False]['text':' masked elements should be ignored','line_number':569,'multiline':False]['text':' Shape of returned mean and var should be same','line_number':601,'multiline':False]['text':' Output should be the same as from the individual algorithms','line_number':605,'multiline':False]['text':' masked elements should be ignored','line_number':616,'multiline':False]['text':' PEP 3141','line_number':632,'multiline':False]['text':' offset for simd tests','line_number':674,'multiline':False]['text':' check bad element in all positions','line_number':694,'multiline':False]['text':' big array test for blocked libc loops','line_number':703,'multiline':False]['text':' generate values for all permutation of 256bit simd vectors','line_number':765,'multiline':False]['text':' offset for alignment test','line_number':807,'multiline':False]['text':' check bool == 0x1','line_number':820,'multiline':False]['text':' isnan on amd64 takes the same code path','line_number':825,'multiline':False]['text':' offset for alignment test','line_number':833,'multiline':False]['text':' check bool == 0x1','line_number':846,'multiline':False]['text':' isnan on amd64 takes the same code path','line_number':851,'multiline':False]['text':' Check that fpe exception is raised.','line_number':905,'multiline':False]['text':'','line_number':906,'multiline':False]['text':' Given a floating operation `flop` and two scalar values, check that','line_number':907,'multiline':False]['text':' the operation raises the floating point exception specified by','line_number':908,'multiline':False]['text':' `fpeerr`. Tests all variants with 0-d array scalars as well.','line_number':909,'multiline':False]['text':' Test for all real and complex float types','line_number':916,'multiline':False]['text':' Test basic arithmetic function errors','line_number':925,'multiline':False]['text':' Get some extreme values for the type','line_number':929,'multiline':False]['text':' 'c', complex, corresponding real dtype','line_number':937,'multiline':False]['text':' The complex types raise different exceptions','line_number':943,'multiline':False]['text':' The value of tiny for double double is NaN, so we need to','line_number':949,'multiline':False]['text':' pass the assert','line_number':950,'multiline':False]['text':' test warning code path','line_number':984,'multiline':False]['text':' tests that the scalars get coerced correctly.','line_number':1004,'multiline':False]['text':' coercion within the same kind','line_number':1011,'multiline':False]['text':' coercion between kinds','line_number':1023,'multiline':False]['text':' coercion between scalars and 1-D arrays','line_number':1038,'multiline':False]['text':' unsigned and signed unfortunately tend to promote to float64:','line_number':1044,'multiline':False]['text':' coercion between scalars and 1-D arrays, where','line_number':1064,'multiline':False]['text':' the scalar has greater kind than the array','line_number':1065,'multiline':False]['text':' Use-case: float/complex scalar * bool/int8 array','line_number':1079,'multiline':False]['text':'           shouldn't narrow the float/complex type','line_number':1080,'multiline':False]['text':' The following use-case is problematic, and to resolve its','line_number':1104,'multiline':False]['text':' tricky side-effects requires more changes.','line_number':1105,'multiline':False]['text':'','line_number':1106,'multiline':False]['text':' Use-case: (1-t)*a, where 't' is a boolean array and 'a' is','line_number':1107,'multiline':False]['text':'            a float32, shouldn't promote to float64','line_number':1108,'multiline':False]['text':'','line_number':1109,'multiline':False]['text':' a = np.array([1.0, 1.5], dtype=np.float32)','line_number':1110,'multiline':False]['text':' t = np.array([True, False])','line_number':1111,'multiline':False]['text':' b = t*a','line_number':1112,'multiline':False]['text':' assert_equal(b, [1.0, 0.0])','line_number':1113,'multiline':False]['text':' assert_equal(b.dtype, np.dtype('f4'))','line_number':1114,'multiline':False]['text':' b = (1-t)*a','line_number':1115,'multiline':False]['text':' assert_equal(b, [0.0, 1.5])','line_number':1116,'multiline':False]['text':' assert_equal(b.dtype, np.dtype('f4'))','line_number':1117,'multiline':False]['text':'','line_number':1118,'multiline':False]['text':' Probably ~t (bitwise negation) is more proper to use here,','line_number':1119,'multiline':False]['text':' but this is arguably less intuitive to understand at a glance, and','line_number':1120,'multiline':False]['text':' would fail if 't' is actually an integer array instead of boolean:','line_number':1121,'multiline':False]['text':'','line_number':1122,'multiline':False]['text':' b = (~t)*a','line_number':1123,'multiline':False]['text':' assert_equal(b, [0.0, 1.5])','line_number':1124,'multiline':False]['text':' assert_equal(b.dtype, np.dtype('f4'))','line_number':1125,'multiline':False]['text':' promote_types should always return native-endian types','line_number':1132,'multiline':False]['text':' The rational type defines safe casting for signed integers,','line_number':1154,'multiline':False]['text':' boolean. Rational itself *does* cast safely to double.','line_number':1155,'multiline':False]['text':' (rational does not actually cast to all signed integers, e.g.','line_number':1156,'multiline':False]['text':' int64 can be both long and longlong and it registers only the first)','line_number':1157,'multiline':False]['text':' Promote numeric with unsized string:','line_number':1187,'multiline':False]['text':' Promote numeric with sized string:','line_number':1198,'multiline':False]['text':' Promote with object:','line_number':1211,'multiline':False]['text':' mismatch shape','line_number':1215,'multiline':False]['text':' Mismatching names:','line_number':1216,'multiline':False]['text':' The same type passed in twice to promote types always','line_number':1237,'multiline':False]['text':' preserves metadata','line_number':1238,'multiline':False]['text':' byte-swapping preserves and makes the dtype native:','line_number':1245,'multiline':False]['text':' The type does not have byte swapping','line_number':1248,'multiline':False]['text':' Metadata is (currently) generally lost on byte-swapping (except for','line_number':1253,'multiline':False]['text':' unicode.','line_number':1254,'multiline':False]['text':' Promotion failed, this test only checks metadata','line_number':1285,'multiline':False]['text':' All except string dtypes (and unstructured void) lose metadata','line_number':1289,'multiline':False]['text':' on promotion (unless both dtypes are identical).','line_number':1290,'multiline':False]['text':' At some point structured ones did not, but were restrictive.','line_number':1291,'multiline':False]['text':' If one result is the result, it is usually returned unchanged:','line_number':1294,'multiline':False]['text':' dtype1 may have been cast to the same type/kind as dtype2.','line_number':1297,'multiline':False]['text':' If the resulting dtype is identical we currently pick the cast','line_number':1298,'multiline':False]['text':' version of dtype1, which lost the metadata:','line_number':1299,'multiline':False]['text':' Try again for byteswapped version','line_number':1307,'multiline':False]['text':' Also test keyword arguments','line_number':1388,'multiline':False]['text':' Non-structured can only be cast to structured in 'unsafe' mode.','line_number':1392,'multiline':False]['text':' Even if there is just a single field which is OK.','line_number':1397,'multiline':False]['text':' It should be the same for recursive structured or subarrays.','line_number':1401,'multiline':False]['text':' Need unsafe casting for structured to simple.','line_number':1408,'multiline':False]['text':' Since it is unclear what is being cast, multiple fields to','line_number':1412,'multiline':False]['text':' single should not work even for unsafe casting.','line_number':1413,'multiline':False]['text':' But a single field inside a single field is OK.','line_number':1415,'multiline':False]['text':' And a subarray is fine too - it will just take the first element','line_number':1418,'multiline':False]['text':' (arguably not very consistently; might also take the first field).','line_number':1419,'multiline':False]['text':' But a structured subarray with multiple fields should fail.','line_number':1422,'multiline':False]['text':' gh-5917','line_number':1429,'multiline':False]['text':' Custom exception class to test exception propagation in fromiter','line_number':1443,'multiline':False]['text':' Utility method for the issue 2592 tests.','line_number':1477,'multiline':False]['text':' Raise an exception at the desired index in the iterator.','line_number':1478,'multiline':False]['text':' Test iteration exceptions are correctly raised. The data/generator','line_number':1487,'multiline':False]['text':' has `count` elements but errors at `error_index`','line_number':1488,'multiline':False]['text':' Note, "S0" could be allowed at some point, so long "S" (without','line_number':1495,'multiline':False]['text':' any length) is rejected.','line_number':1496,'multiline':False]['text':' subarray dtypes (important because their dimensions end up','line_number':1504,'multiline':False]['text':' in the result arrays dimension:','line_number':1505,'multiline':False]['text':' make sure we realloc a bit','line_number':1513,'multiline':False]['text':' Class/example from gh-15789','line_number':1516,'multiline':False]['text':' only required to be an estimate, this is legal','line_number':1518,'multiline':False]['text':' 0 or 1','line_number':1519,'multiline':False]['text':' actual iterator is empty.','line_number':1535,'multiline':False]['text':' The following manages to hit somewhat trickier code paths:','line_number':1550,'multiline':False]['text':' x = np.array([(1, 2), (0, 0), (1, 1), (-1, 3), (0, 7)],','line_number':1586,'multiline':False]['text':'              dtype=[('a', 'i4'), ('b', 'i2')])','line_number':1587,'multiline':False]['text':' test special sparse condition boolean code path','line_number':1627,'multiline':False]['text':' Basic check of functionality','line_number':1653,'multiline':False]['text':' More thorough test that the axis argument is respected','line_number':1669,'multiline':False]['text':' for all dtypes and responds correctly when presented with','line_number':1670,'multiline':False]['text':' either integer or tuple arguments for axis','line_number':1671,'multiline':False]['text':' np.zeros doesn't work for np.datetime64','line_number':1689,'multiline':False]['text':' There are no 'nonzero' objects for np.void, so the testing','line_number':1714,'multiline':False]['text':' setup is slightly different for this dtype','line_number':1715,'multiline':False]['text':' Check that the axis behaviour for valid axes in','line_number':1735,'multiline':False]['text':' non-special cases is consistent (and therefore','line_number':1736,'multiline':False]['text':' correct) by checking it against an integer array','line_number':1737,'multiline':False]['text':' that is then casted to the generic object dtype','line_number':1738,'multiline':False]['text':' Tests that the array method','line_number':1773,'multiline':False]['text':' call to nonzero works','line_number':1774,'multiline':False]['text':' gh-9295','line_number':1781,'multiline':False]['text':' gh-13631','line_number':1792,'multiline':False]['text':' result grows on the second pass','line_number':1809,'multiline':False]['text':' result shrinks on the second pass','line_number':1816,'multiline':False]['text':' Checks that structured void does not mutate alignment flag of','line_number':1824,'multiline':False]['text':' original array.','line_number':1825,'multiline':False]['text':' `ones` may short-circuit','line_number':1826,'multiline':False]['text':' structs are considered "aligned"','line_number':1827,'multiline':False]['text':' make sure that nonzero/count_nonzero do not flip the flag:','line_number':1829,'multiline':False]['text':' gh-13930','line_number':1836,'multiline':False]['text':' assert that an exception in first pass is handled correctly','line_number':1856,'multiline':False]['text':' raise exception in second pass for 1-dimensional loop','line_number':1860,'multiline':False]['text':' raise exception in second pass for n-dimensional loop','line_number':1864,'multiline':False]['text':' Nonzero (and some other functions) should be threadsafe for','line_number':1870,'multiline':False]['text':' structured datatypes, see gh-15387. This test can behave randomly.','line_number':1871,'multiline':False]['text':' Create a deeply nested dtype to make a failure more likely:','line_number':1874,'multiline':False]['text':' The array should be large enough to likely run into threading issues','line_number':1878,'multiline':False]['text':' see gh-8670','line_number':1933,'multiline':False]['text':' Ensure that the example in the issue does not','line_number':1935,'multiline':False]['text':' break before proceeding to a more thorough test.','line_number':1936,'multiline':False]['text':' See gh-14289.','line_number':1945,'multiline':False]['text':' those are 0-d arrays, it used to be a special case','line_number':1978,'multiline':False]['text':' where (e0 == e0).all() would raise','line_number':1979,'multiline':False]['text':' x,y, nan_equal, expected_result','line_number':1982,'multiline':False]['text':'','line_number':1987,'multiline':False]['text':' Non-nanable – those cannot hold nans','line_number':1992,'multiline':False]['text':' Non-float dtype - equal_nan should have no effect,','line_number':2012,'multiline':False]['text':' these can hold None','line_number':2023,'multiline':False]['text':' instances are the same','line_number':2029,'multiline':False]['text':' equal but not same instance','line_number':2034,'multiline':False]['text':' same once stripped of Nan','line_number':2039,'multiline':False]['text':' nan's not conflated with inf's','line_number':2044,'multiline':False]['text':' all Nan','line_number':2049,'multiline':False]['text':' Timedeltas are particular','line_number':2060,'multiline':False]['text':' Multi-dimensional array','line_number':2073,'multiline':False]['text':' both complexes are nan+nan.j but the same instance','line_number':2082,'multiline':False]['text':' only real or img are nan.','line_number':2085,'multiline':False]['text':' Complex values','line_number':2088,'multiline':False]['text':' Complex values, 1+nan, nan+1j','line_number':2093,'multiline':False]['text':' Can't test != of actually different data','line_number':2166,'multiline':False]['text':' Check flags, 32 bit arches typically don't provide 16 byte alignment','line_number':2177,'multiline':False]['text':' check endianness','line_number':2188,'multiline':False]['text':' use a.choose to verify fastclip result','line_number':2201,'multiline':False]['text':' Handy functions','line_number':2205,'multiline':False]['text':' Now the real test cases','line_number':2235,'multiline':False]['text':' for preservation of behavior described in','line_number':2239,'multiline':False]['text':' gh-12519; amin > amax behavior may still change','line_number':2240,'multiline':False]['text':' in the future','line_number':2241,'multiline':False]['text':' Test native double input with scalar min/max.','line_number':2251,'multiline':False]['text':' Test native int input with scalar min/max.','line_number':2260,'multiline':False]['text':' Test native double input with array min/max.','line_number':2270,'multiline':False]['text':' Test non native double input with scalar min/max.','line_number':2279,'multiline':False]['text':' Test native double input with non native double scalar min/max.','line_number':2280,'multiline':False]['text':' Test native double input with non native double scalar min/max.','line_number':2288,'multiline':False]['text':' Test native complex input with native double scalar min/max.','line_number':2298,'multiline':False]['text':' Test native input with complex double scalar min/max.','line_number':2299,'multiline':False]['text':' Test native input with complex double scalar min/max.','line_number':2307,'multiline':False]['text':' Address Issue gh-5354 for clipping complex arrays','line_number':2316,'multiline':False]['text':' Test native complex input without explicit min/max','line_number':2317,'multiline':False]['text':' ie, either min=None or max=None','line_number':2318,'multiline':False]['text':' Test clip for non contiguous native input and native scalar min/max.','line_number':2328,'multiline':False]['text':' Test native double input with scalar min/max.','line_number':2338,'multiline':False]['text':' Test native int32 input with double min/max and int32 out.','line_number':2350,'multiline':False]['text':' explicitly passing "unsafe" will silence warning','line_number':2360,'multiline':False]['text':' Test native int32 input with int32 scalar min/max and int64 out.','line_number':2366,'multiline':False]['text':' Test native int32 input with double array min/max and int32 out.','line_number':2377,'multiline':False]['text':' Test native double input with scalar min/max and int out.','line_number':2388,'multiline':False]['text':' Test native double input with array min/max in-place.','line_number':2399,'multiline':False]['text':' Test native double input with scalar min/max in-place.','line_number':2409,'multiline':False]['text':' Test non contiguous double input with double scalar min/max in-place.','line_number':2419,'multiline':False]['text':' Test native double input with scalar min/max.','line_number':2432,'multiline':False]['text':' Test native int32 input with int32 scalar min/max.','line_number':2441,'multiline':False]['text':' Test native int32 input with float64 scalar min/max.','line_number':2451,'multiline':False]['text':' Test native int32 input with float32 scalar min/max.','line_number':2460,'multiline':False]['text':' Test native int32 with double arrays min/max.','line_number':2469,'multiline':False]['text':' Test native with NON native scalar min/max.','line_number':2478,'multiline':False]['text':' Test NON native with native array min/max.','line_number':2488,'multiline':False]['text':' Test NON native with native scalar min/max.','line_number':2499,'multiline':False]['text':' Test native with NON native array min/max.','line_number':2510,'multiline':False]['text':' Test native int32 with float min/max and float out for output argument.','line_number':2521,'multiline':False]['text':' Test non native with native scalar, min/max, out non native','line_number':2531,'multiline':False]['text':' Test native int32 input and min/max and float out','line_number':2543,'multiline':False]['text':' Test native double input with scalar min/max','line_number':2553,'multiline':False]['text':' Test native int32 input with double min/max and int32 out','line_number':2564,'multiline':False]['text':' Test native int32 input with int32 scalar min/max and int64 out','line_number':2575,'multiline':False]['text':' Test native int32 input with double array min/max and int32 out','line_number':2586,'multiline':False]['text':' Test native double input with scalar min/max and int out','line_number':2597,'multiline':False]['text':' Test that the out argument works when transposed','line_number':2608,'multiline':False]['text':' Test that the out argument works when it has memory overlap','line_number':2616,'multiline':False]['text':' Test native double input with array min/max','line_number':2624,'multiline':False]['text':' Test native double input with scalar min/max','line_number':2634,'multiline':False]['text':' Ensure that the clip() function takes an out=argument.','line_number':2644,'multiline':False]['text':' two scalars','line_number':2680,'multiline':False]['text':' mix scalar and array','line_number':2682,'multiline':False]['text':' two arrays','line_number':2684,'multiline':False]['text':' requirement from ufunc_docstrings.py','line_number':2689,'multiline':False]['text':' for a bug in npy_ObjectClip, based on a','line_number':2695,'multiline':False]['text':' case produced by hypothesis','line_number':2696,'multiline':False]['text':' for bugs in NPY_TIMEDELTA_MAX, based on a case','line_number':2701,'multiline':False]['text':' produced by hypothesis','line_number':2702,'multiline':False]['text':' problematic scalar nan case from hypothesis','line_number':2713,'multiline':False]['text':' enforcement of scalar nan propagation for comparisons','line_number':2719,'multiline':False]['text':' called through clip()','line_number':2720,'multiline':False]['text':' NOTE: the expected function spec doesn't','line_number':2733,'multiline':False]['text':' propagate NaT, but clip() now does','line_number':2734,'multiline':False]['text':' Generate shapes for the bounds which can be broadcast with each other','line_number':2763,'multiline':False]['text':' and with the base shape.  Below, we might decide to use scalar bounds,','line_number':2764,'multiline':False]['text':' but it's clearer to generate these shapes unconditionally in advance.','line_number':2765,'multiline':False]['text':' Scalar `nan` is deprecated due to the differing behaviour it shows.','line_number':2771,'multiline':False]['text':' Then calculate our result and expected result and check that they're','line_number':2779,'multiline':False]['text':' equal!  See gh-12519 and gh-19457 for discussion deciding on this','line_number':2780,'multiline':False]['text':' property and the result_type argument.','line_number':2781,'multiline':False]['text':' Parametric test factory.','line_number':2806,'multiline':False]['text':' Parametric test factory.','line_number':2826,'multiline':False]['text':' Could make problems because of abs(min_int) == min_int','line_number':2854,'multiline':False]['text':' Issue gh-6475','line_number':2864,'multiline':False]['text':' Check that allclose does not preserve subtypes','line_number':2865,'multiline':False]['text':' This is just 1 at float32 precision','line_number':2948,'multiline':False]['text':' NEP 50 broadcasting of python scalars','line_number':2950,'multiline':False]['text':' Test that it works for isclose arguments too (and that those fail if','line_number':2952,'multiline':False]['text':' one uses a numpy float64).','line_number':2953,'multiline':False]['text':' Show that gh-14330 is resolved','line_number':2988,'multiline':False]['text':' Make sure to test the output type when arguments are interchanged.','line_number':3010,'multiline':False]['text':' Ensure that the mask isn't modified...','line_number':3023,'multiline':False]['text':' Ensure that the mask isn't modified...','line_number':3027,'multiline':False]['text':' Ensure that the mask isn't modified...','line_number':3033,'multiline':False]['text':' GH7014, when two scalars are compared the output should also be a','line_number':3047,'multiline':False]['text':' scalar','line_number':3048,'multiline':False]['text':' Allclose currently works for timedelta64 as long as `atol` is','line_number':3054,'multiline':False]['text':' an integer or also a timedelta64','line_number':3055,'multiline':False]['text':' Test ones, zeros, empty and full.','line_number':3115,'multiline':False]['text':' void, bytes, str','line_number':3119,'multiline':False]['text':' do not fill void type','line_number':3145,'multiline':False]['text':' Make sure we have an object for reference','line_number':3184,'multiline':False]['text':' Array scalars','line_number':3202,'multiline':False]['text':' 1D arrays','line_number':3205,'multiline':False]['text':' 2D C-layout arrays','line_number':3208,'multiline':False]['text':' 2D F-layout arrays','line_number':3211,'multiline':False]['text':' 3D C-layout arrays','line_number':3214,'multiline':False]['text':' 3D F-layout arrays','line_number':3217,'multiline':False]['text':' 3D non-C/F-layout arrays','line_number':3220,'multiline':False]['text':' Conversion is close to what np.full_like uses','line_number':3229,'multiline':False]['text':' but we  may want to convert directly in the future','line_number':3230,'multiline':False]['text':' which may result in errors (where this does not).','line_number':3231,'multiline':False]['text':' default (K) order, dtype','line_number':3243,'multiline':False]['text':' C order, default dtype','line_number':3256,'multiline':False]['text':' F order, default dtype','line_number':3266,'multiline':False]['text':' A order','line_number':3276,'multiline':False]['text':' Test the 'shape' parameter','line_number':3289,'multiline':False]['text':' Test the 'subok' parameter','line_number':3317,'multiline':False]['text':' Inf to integer casts cause invalid-value errors: ignore them.','line_number':3343,'multiline':False]['text':' Regression test for gh-19860','line_number':3351,'multiline':False]['text':' Ensure b is not contiguous.','line_number':3353,'multiline':False]['text':' dtype is bytes','line_number':3359,'multiline':False]['text':' integer mode','line_number':3426,'multiline':False]['text':' illegal arguments','line_number':3430,'multiline':False]['text':' integer mode','line_number':3455,'multiline':False]['text':' illegal arguments','line_number':3459,'multiline':False]['text':' get an nd array with multiple elements in every dimension','line_number':3468,'multiline':False]['text':' none','line_number':3471,'multiline':False]['text':' only one','line_number':3475,'multiline':False]['text':' all but one','line_number':3480,'multiline':False]['text':' all','line_number':3485,'multiline':False]['text':' Roll multiple axes at once.','line_number':3536,'multiline':False]['text':' Roll the same axis multiple times.','line_number':3558,'multiline':False]['text':' Roll more than one turn in either direction.','line_number':3565,'multiline':False]['text':' expected shape indexed by (axis, start) for array of','line_number':3579,'multiline':False]['text':' shape (1, 2, 3, 4)','line_number':3580,'multiline':False]['text':' positive axis, positive start','line_number':3606,'multiline':False]['text':' negative axis, positive start','line_number':3613,'multiline':False]['text':' positive axis, negative start','line_number':3621,'multiline':False]['text':' negative axis, negative start','line_number':3629,'multiline':False]['text':' Ticket #2624 (Trac #2032)','line_number':3751,'multiline':False]['text':' gh-5885','line_number':3797,'multiline':False]['text':' regression test for gh-19138','line_number':3803,'multiline':False]['text':' a further call to np.require ought to return the same array','line_number':3894,'multiline':False]['text':' unless OWNDATA is specified.','line_number':3895,'multiline':False]['text':' gh-5881','line_number':3945,'multiline':False]['text':' gh-6899','line_number':3962,'multiline':False]['text':'gh-13455','line_number':3982,'multiline':False]['text':' Test resolution to issue #5663','line_number':4015,'multiline':False]['text':' gh-12130','line_number':4023,'multiline':False]['text':' contracting no axes is well defined','line_number':4025,'multiline':False]