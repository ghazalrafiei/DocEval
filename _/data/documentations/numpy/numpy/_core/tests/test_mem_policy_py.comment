['text':' FIXME: numpy.testing.extbuild uses `numpy.distutils`, so this won't work on','line_number':15,'multiline':False]['text':' Python 3.12 and up. It's an internal test utility, so for now we just skip','line_number':16,'multiline':False]['text':' these tests.','line_number':17,'multiline':False]['text':' if it does not exist, build and load it','line_number':215,'multiline':False]['text':' a doesn't own its own data','line_number':231,'multiline':False]['text':' b doesn't own its own data','line_number':239,'multiline':False]['text':' tests PyDataMem_SetHandler(NULL)','line_number':246,'multiline':False]['text':' set the policy to default','line_number':257,'multiline':False]['text':' re-set the policy to default','line_number':262,'multiline':False]['text':' set the policy to original','line_number':267,'multiline':False]['text':' since default policy is a singleton,','line_number':270,'multiline':False]['text':' these should be the same object','line_number':271,'multiline':False]['text':' The memory policy goes hand-in-hand with flags.owndata','line_number':277,'multiline':False]['text':' the policy is not affected by changes in parallel contexts','line_number':307,'multiline':False]['text':' change policy in the child context','line_number':309,'multiline':False]['text':' the child contexts inherit the parent policy','line_number':322,'multiline':False]['text':' the parent context is not affected by child policy changes','line_number':330,'multiline':False]['text':' the policy is not affected by changes in parallel threads','line_number':350,'multiline':False]['text':' change policy in the child thread','line_number':352,'multiline':False]['text':' the child threads do not inherit the parent policy','line_number':361,'multiline':False]['text':' the parent thread is not affected by child policy changes','line_number':371,'multiline':False]['text':' test array manipulation. This is slow','line_number':386,'multiline':False]['text':' when the np._core.test tests recurse into this test, the','line_number':388,'multiline':False]['text':' policy will be set so this "if" will be false, preventing','line_number':389,'multiline':False]['text':' infinite recursion','line_number':390,'multiline':False]['text':'','line_number':391,'multiline':False]['text':' if needed, debug this by','line_number':392,'multiline':False]['text':' - running tests with -- -s (to not capture stdout/stderr','line_number':393,'multiline':False]['text':' - setting verbose=2','line_number':394,'multiline':False]['text':' - setting extra_argv=['-vv'] here','line_number':395,'multiline':False]['text':' also try the ma tests, the pickling test is quite tricky','line_number':397,'multiline':False]['text':' See what we expect to be set based on the env variable','line_number':417,'multiline':False]['text':' The policy should be NULL, so we have to assume we can call','line_number':425,'multiline':False]['text':' "free".  A warning is given if the policy == "1"','line_number':426,'multiline':False]