['text':' could be a parameter, but maybe not an optional one?','line_number':56,'multiline':False]['text':' reset array values to fill_value:','line_number':70,'multiline':False]['text':' The eps for float128 is 1-e33, so this is way bigger','line_number':118,'multiline':False]['text':' Out argument must be tuple, since there are multiple outputs.','line_number':175,'multiline':False]['text':' Out argument must be tuple, since there are multiple outputs.','line_number':263,'multiline':False]['text':' Initialize input arrays','line_number':281,'multiline':False]['text':' (Binary) Comparison (x1=array, x2=array)','line_number':294,'multiline':False]['text':' (Scalar1) Comparison (x1=scalar, x2=array)','line_number':298,'multiline':False]['text':' (Scalar2) Comparison (x1=array, x2=scalar)','line_number':302,'multiline':False]['text':' Sequence: Binary, Scalar1 and Scalar2','line_number':306,'multiline':False]['text':' Check comparing identical objects whose comparison','line_number':315,'multiline':False]['text':' is not a simple boolean, e.g., arrays that are compared elementwise.','line_number':316,'multiline':False]['text':' Check error raised when comparing identical non-comparable objects.','line_number':320,'multiline':False]['text':' Check identity doesn't override comparison mismatch.','line_number':328,'multiline':False]['text':' Check comparing identical objects whose comparison','line_number':333,'multiline':False]['text':' is not a simple boolean, e.g., arrays that are compared elementwise.','line_number':334,'multiline':False]['text':' Check error raised when comparing identical non-comparable objects.','line_number':338,'multiline':False]['text':' Check identity doesn't override comparison mismatch.','line_number':346,'multiline':False]['text':' gh-20929','line_number':351,'multiline':False]['text':' make sure np.equal.reduce raises a TypeError if an array is passed','line_number':352,'multiline':False]['text':' without specifying the dtype','line_number':353,'multiline':False]['text':' bool output dtype is fine of course:','line_number':363,'multiline':False]['text':' but the following are examples do not have a loop:','line_number':366,'multiline':False]['text':' Note that float(2**60) + 1 == float(2**60).','line_number':385,'multiline':False]['text':' Also check the scalars:','line_number':392,'multiline':False]['text':' The Python operator here is mainly interesting:','line_number':397,'multiline':False]['text':' The Python operator here is mainly interesting:','line_number':428,'multiline':False]['text':' gh-9876','line_number':435,'multiline':False]['text':' make sure arrays with weird strides work with the optimizations in','line_number':436,'multiline':False]['text':' pairwise_sum_@TYPE@. On x86, the 'b' field will count as aligned at a','line_number':437,'multiline':False]['text':' 4 byte offset, even though its itemsize is 8.','line_number':438,'multiline':False]['text':' int division should follow Python','line_number':446,'multiline':False]['text':' dividend','line_number':460,'multiline':False]['text':' divisors','line_number':462,'multiline':False]['text':' scalar divisors','line_number':464,'multiline':False]['text':' dividend','line_number':468,'multiline':False]['text':' divisors','line_number':470,'multiline':False]['text':' scalar divisors','line_number':472,'multiline':False]['text':' dividend','line_number':475,'multiline':False]['text':' divisors','line_number':477,'multiline':False]['text':' scalar divisors','line_number':479,'multiline':False]['text':' Large enough to test SIMD loops and remainder elements','line_number':487,'multiline':False]['text':' Verify overflow case','line_number':520,'multiline':False]['text':' If either divisor is 0 or quotient is Nat, check for division by 0','line_number':593,'multiline':False]['text':' Test for arrays as well','line_number':598,'multiline':False]['text':' check that implementation is correct','line_number':611,'multiline':False]['text':' check overflow, underflow','line_number':615,'multiline':False]['text':' check that floor division, divmod and remainder raises type errors','line_number':636,'multiline':False]['text':' Check that the sign bit is correctly set when dividing positive and','line_number':646,'multiline':False]['text':' negative zero by one.','line_number':647,'multiline':False]['text':' divide by zero error check','line_number':661,'multiline':False]['text':' The following already contain a NaN and should not warn','line_number':667,'multiline':False]['text':' test corner cases like 1.0//0.0 for errors and return vals','line_number':676,'multiline':False]['text':' verify 1.0//0.0 computations return inf','line_number':691,'multiline':False]['text':' test that float results are exact for small integers. This also','line_number':726,'multiline':False]['text':' holds for the same integers scaled by powers of two.','line_number':727,'multiline':False]['text':' convert exact integer results from Python to float so that','line_number':736,'multiline':False]['text':' signed zero can be used, it is checked.','line_number':737,'multiline':False]['text':' gh-6127','line_number':752,'multiline':False]['text':' Equal assertion should hold when fmod is used','line_number':762,'multiline':False]['text':' Check valid errors raised for divmod and remainder','line_number':775,'multiline':False]['text':' since divmod is combination of both remainder and divide','line_number':780,'multiline':False]['text':' ops it will set both dividebyzero and invalid flags','line_number':781,'multiline':False]['text':' inf / 0 does not set any flags, only the modulo creates a NaN','line_number':793,'multiline':False]['text':' The following already contain a NaN and should not warn.','line_number':810,'multiline':False]['text':' check nan cases','line_number':833,'multiline':False]['text':' Check remainder magnitude.','line_number':865,'multiline':False]['text':' Check nans, inf','line_number':877,'multiline':False]['text':' MSVC 2008 returns NaN here, so disable the check.','line_number':888,'multiline':False]['text':'rem = np.remainder(fone, finf)','line_number':889,'multiline':False]['text':'assert_(rem == fone, 'dt: %s, rem: %s' % (dt, rem))','line_number':890,'multiline':False]['text':' Remainder is well defined though, and does not warn:','line_number':953,'multiline':False]['text':' Check fmod as well:','line_number':957,'multiline':False]['text':' Divmod warns for the division part:','line_number':961,'multiline':False]['text':' Note that the return value cannot be well defined here, but NumPy','line_number':972,'multiline':False]['text':' currently uses 0 consistently.  This could be changed.','line_number':973,'multiline':False]['text':' SIMD tries to perform the operation on as many elements as possible','line_number':997,'multiline':False]['text':' that is a multiple of the register's size. We resort to the','line_number':998,'multiline':False]['text':' default implementation for the leftover elements.','line_number':999,'multiline':False]['text':' We try to cover all paths here.','line_number':1000,'multiline':False]['text':' If dividend is a larger type than the divisor (`else` case),','line_number':1004,'multiline':False]['text':' then, result will be a larger type than dividend and will not','line_number':1005,'multiline':False]['text':' result in an overflow for `divmod` and `floor_divide`.','line_number':1006,'multiline':False]['text':' Arrays','line_number':1020,'multiline':False]['text':' In case of divmod, we need to flatten the result','line_number':1022,'multiline':False]['text':' column first as we get a column vector of quotient and','line_number':1023,'multiline':False]['text':' remainder and a normal flatten of the expected result.','line_number':1024,'multiline':False]['text':' Scalars','line_number':1034,'multiline':False]['text':' Arrays','line_number':1042,'multiline':False]['text':' See above comment on flatten','line_number':1044,'multiline':False]['text':' Ticket #836','line_number':1111,'multiline':False]['text':' ticket #1271','line_number':1124,'multiline':False]['text':' FIXME cinf not tested.','line_number':1128,'multiline':False]['text':'cinf = np.array([complex(np.inf, 0)])','line_number':1129,'multiline':False]['text':' positive powers','line_number':1136,'multiline':False]['text':' zero power','line_number':1140,'multiline':False]['text':' negative power','line_number':1145,'multiline':False]['text':' Testing 0^{Non-zero} issue 18378','line_number':1152,'multiline':False]['text':'Complex powers with positive real part will not generate a warning','line_number':1160,'multiline':False]['text':'Testing zero values when real part is greater than zero','line_number':1163,'multiline':False]['text':'Complex powers will negative real part or 0 (provided imaginary','line_number':1167,'multiline':False]['text':' part is not zero) will generate a NAN and hence a RUNTIME warning','line_number':1168,'multiline':False]['text':' check the inplace operation on the casted copy doesn't mess with x','line_number':1182,'multiline':False]['text':' Check that the fast path ignores 1-element not 0-d arrays','line_number':1186,'multiline':False]['text':' a good log2 implementation should provide this,','line_number':1261,'multiline':False]['text':' might fail on OS with bad libm','line_number':1262,'multiline':False]['text':' Need test for intermediate precisions','line_number':1293,'multiline':False]['text':' test aliasing(issue #17761)','line_number':1350,'multiline':False]['text':' test log() of max for dtype does not raise','line_number':1355,'multiline':False]['text':' See: https://github.com/numpy/numpy/issues/19192','line_number':1404,'multiline':False]['text':' See https://github.com/numpy/numpy/issues/18005','line_number':1469,'multiline':False]['text':' with np.errstate(invalid='raise'):','line_number':1529,'multiline':False]['text':'     assert_raises(','line_number':1530,'multiline':False]['text':'         FloatingPointError, np.sqrt, np.array(-100., dtype=dt)','line_number':1531,'multiline':False]['text':'     )','line_number':1532,'multiline':False]['text':' Make sure glibc < 2.18 atanh is not used, issue 25087','line_number':1703,'multiline':False]['text':' See: https://github.com/numpy/numpy/issues/20448','line_number':1706,'multiline':False]['text':' test to ensure no spurious FP exceptions are raised due to SIMD','line_number':1742,'multiline':False]['text':' neg','line_number':1765,'multiline':False]['text':' flat','line_number':1768,'multiline':False]['text':' zero','line_number':1771,'multiline':False]['text':' nan','line_number':1776,'multiline':False]['text':' inf','line_number':1783,'multiline':False]['text':' ninf','line_number':1790,'multiline':False]['text':' FIXME: NAN raises FP invalid exception:','line_number':1803,'multiline':False]['text':'  - ceil/float16 on MSVC:32-bit','line_number':1804,'multiline':False]['text':'  - spacing/float16 on almost all platforms','line_number':1805,'multiline':False]['text':' Verify a bug fix caused due to filling the remaining lanes of the','line_number':1817,'multiline':False]['text':' partially loaded dividend SIMD vector with ones, which leads to','line_number':1818,'multiline':False]['text':' raising an overflow warning when the divisor is denormal.','line_number':1819,'multiline':False]['text':' see https://github.com/numpy/numpy/issues/25097','line_number':1820,'multiline':False]['text':' On RISC-V, many operations that produce NaNs, such as converting','line_number':1839,'multiline':False]['text':' a -NaN from f64 to f32, return a canonical NaN.  The canonical','line_number':1840,'multiline':False]['text':' NaNs are always positive.  See section 11.3 NaN Generation and','line_number':1841,'multiline':False]['text':' Propagation of the RISC-V Unprivileged ISA for more details.','line_number':1842,'multiline':False]['text':' We disable the sign test on riscv64 for -np.nan as we','line_number':1843,'multiline':False]['text':' cannot assume that its sign will be honoured in these tests.','line_number':1844,'multiline':False]['text':' Disable the -np.nan signbit tests on riscv64.  See comments in','line_number':1876,'multiline':False]['text':' test_fpclass for more details.','line_number':1877,'multiline':False]['text':' ncontig in, ncontig out','line_number':1891,'multiline':False]['text':' contig in, ncontig out','line_number':1896,'multiline':False]['text':' ncontig in, contig out','line_number':1901,'multiline':False]['text':' contig in, contig out, nd stride','line_number':1906,'multiline':False]['text':' func : [maxulperror, low, high]','line_number':1949,'multiline':False]['text':' various array sizes to ensure masking in AVX is tested','line_number':1967,'multiline':False]['text':' various strides to test gather instruction','line_number':1983,'multiline':False]['text':' test coverage for elements > 117435.992f for which glibc is used','line_number':2011,'multiline':False]['text':' this is known to be problematic on old glibc, so skip it there','line_number':2012,'multiline':False]['text':' test aliasing(issue #17761)','line_number':2017,'multiline':False]['text':' atan2(1, 1) returns pi/4.','line_number':2181,'multiline':False]['text':' atan2(+-0, -0) returns +-pi.','line_number':2187,'multiline':False]['text':' atan2(+-0, +0) returns +-0.','line_number':2192,'multiline':False]['text':' atan2(+-0, x) returns +-pi for x < 0.','line_number':2197,'multiline':False]['text':' atan2(+-0, x) returns +-0 for x > 0.','line_number':2202,'multiline':False]['text':' atan2(y, +-0) returns +pi/2 for y > 0.','line_number':2207,'multiline':False]['text':' atan2(y, +-0) returns -pi/2 for y < 0.','line_number':2212,'multiline':False]['text':' atan2(+-y, -infinity) returns +-pi for finite y > 0.','line_number':2217,'multiline':False]['text':' atan2(+-y, +infinity) returns +-0 for finite y > 0.','line_number':2222,'multiline':False]['text':' atan2(+-infinity, x) returns +-pi/2 for finite x.','line_number':2227,'multiline':False]['text':' atan2(+-infinity, -infinity) returns +-3*pi/4.','line_number':2232,'multiline':False]['text':' atan2(+-infinity, +infinity) returns +-pi/4.','line_number':2237,'multiline':False]['text':' atan2(nan, x) returns nan for any x, including inf','line_number':2242,'multiline':False]['text':' The default Python int type should work','line_number':2258,'multiline':False]['text':' The following int types should all be accepted','line_number':2260,'multiline':False]['text':' silence warning emitted on overflow','line_number':2268,'multiline':False]['text':' Multiple checks to give this a chance to','line_number':2310,'multiline':False]['text':' fail if cmp is used instead of rich compare.','line_number':2311,'multiline':False]['text':' Failure cannot be guaranteed.','line_number':2312,'multiline':False]['text':' v1    v2          expected','line_number':2356,'multiline':False]['text':' Multiple checks to give this a chance to','line_number':2402,'multiline':False]['text':' fail if cmp is used instead of rich compare.','line_number':2403,'multiline':False]['text':' Failure cannot be guaranteed.','line_number':2404,'multiline':False]['text':' v1    v2          expected','line_number':2448,'multiline':False]['text':' v1    v2          expected','line_number':2511,'multiline':False]['text':' v1    v2          expected','line_number':2574,'multiline':False]['text':' 2, 3 and 4 serves as true values','line_number':2594,'multiline':False]['text':' boolean','line_number':2600,'multiline':False]['text':' OR','line_number':2605,'multiline':False]['text':' AND','line_number':2609,'multiline':False]['text':' XOR','line_number':2613,'multiline':False]['text':' boolean type','line_number':2656,'multiline':False]['text':' All integers','line_number':2657,'multiline':False]['text':' Object_ type','line_number':2658,'multiline':False]['text':' Test empty reduction, no object dtype','line_number':2712,'multiline':False]['text':' No object array types','line_number':2714,'multiline':False]['text':' Empty object arrays use the identity.  Note that the types may','line_number':2723,'multiline':False]['text':' differ, the actual type used is determined by the assign_identity','line_number':2724,'multiline':False]['text':' function and is not the same as the type returned by the identity','line_number':2725,'multiline':False]['text':' method.','line_number':2726,'multiline':False]['text':' Non-empty object arrays do not use the identity','line_number':2734,'multiline':False]['text':' bitwise_count is only in-built in 3.10+','line_number':2745,'multiline':False]['text':' In reference to github issue #6229','line_number':2829,'multiline':False]['text':' In reference to github issue #6229','line_number':2838,'multiline':False]['text':' FIXME: a not used','line_number':2841,'multiline':False]['text':' simd tests on max/min, test all alignments, slow but important','line_number':2848,'multiline':False]['text':' for 2 * vz + 2 * (vs - 1) + 1 (unrolled once)','line_number':2849,'multiline':False]['text':' check data that is not aligned to element size','line_number':2869,'multiline':False]['text':' i.e doubles are aligned to 4 bytes on i386','line_number':2870,'multiline':False]['text':' gh 10370, 11029 Some compilers reorder the call to npy_getfloatstatus','line_number':2876,'multiline':False]['text':' and put it before the call to an intrisic function that causes','line_number':2877,'multiline':False]['text':' invalid status to be set. Also make sure warnings are not emitted','line_number':2878,'multiline':False]['text':' simd tests on abs, test all alignments for vz + 2 * (vs - 1) + 1','line_number':2891,'multiline':False]['text':' check data that is not aligned to element size','line_number':2920,'multiline':False]['text':' i.e doubles are aligned to 4 bytes on i386','line_number':2921,'multiline':False]['text':' contig in, contig out','line_number':2944,'multiline':False]['text':' contig in, ncontig out','line_number':2946,'multiline':False]['text':' ncontig in, contig out','line_number':2949,'multiline':False]['text':' ncontig in, ncontig out','line_number':2951,'multiline':False]['text':' contig in, contig out, nd stride','line_number':2954,'multiline':False]['text':' Calling convention for out should not affect how special methods are','line_number':3003,'multiline':False]['text':' called','line_number':3004,'multiline':False]['text':' We need to ensure these are fetched at the same time, before','line_number':3016,'multiline':False]['text':' any other ufuncs are called by the assertions','line_number':3017,'multiline':False]['text':' for short test output','line_number':3020,'multiline':False]['text':' assert_equal produces truly useless error messages','line_number':3032,'multiline':False]['text':' method not on the out argument','line_number':3039,'multiline':False]['text':' method on the out argument','line_number':3045,'multiline':False]['text':' Also check the where mask handling:','line_number':3050,'multiline':False]['text':' test fix for bug #1026:','line_number':3055,'multiline':False]['text':' test fix for bug #826:','line_number':3072,'multiline':False]['text':' double-free (segfault) of "ok" if "bad" raises an exception','line_number':3170,'multiline':False]['text':' Tests that issue #8507 is resolved. Previously, this would segfault','line_number':3175,'multiline':False]['text':' check override works even with instance with high priority.','line_number':3213,'multiline':False]['text':' self','line_number':3226,'multiline':False]['text':' Some multi arg functions for testing.','line_number':3240,'multiline':False]['text':' Make these into ufuncs.','line_number':3247,'multiline':False]['text':' Standard','line_number':3281,'multiline':False]['text':' With 1 NotImplemented','line_number':3287,'multiline':False]['text':' Check our counter works, so we can trust tests below.','line_number':3291,'multiline':False]['text':' Both NotImplemented.','line_number':3295,'multiline':False]['text':' Ternary testing.','line_number':3312,'multiline':False]['text':' Quaternary testing.','line_number':3341,'multiline':False]['text':' __call__','line_number':3379,'multiline':False]['text':' __call__, wrong args','line_number':3390,'multiline':False]['text':' reduce, positional args','line_number':3396,'multiline':False]['text':' reduce, kwargs','line_number':3407,'multiline':False]['text':' reduce, output equal to None removed, but not other explicit ones,','line_number':3422,'multiline':False]['text':' even if they are at their default value.','line_number':3423,'multiline':False]['text':' np._NoValue ignored for initial','line_number':3433,'multiline':False]['text':' None kept for initial, True for where.','line_number':3438,'multiline':False]['text':' reduce, wrong args','line_number':3443,'multiline':False]['text':' accumulate, pos args','line_number':3448,'multiline':False]['text':' accumulate, kwargs','line_number':3458,'multiline':False]['text':' accumulate, output equal to None removed.','line_number':3469,'multiline':False]['text':' accumulate, wrong args','line_number':3477,'multiline':False]['text':' reduceat, pos args','line_number':3484,'multiline':False]['text':' reduceat, kwargs','line_number':3494,'multiline':False]['text':' reduceat, output equal to None removed.','line_number':3505,'multiline':False]['text':' reduceat, wrong args','line_number':3513,'multiline':False]['text':' outer','line_number':3520,'multiline':False]['text':' outer, wrong args','line_number':3528,'multiline':False]['text':' at','line_number':3533,'multiline':False]['text':' at, wrong args','line_number':3540,'multiline':False]['text':' ufuncs with multiple output modf and frexp.','line_number':3570,'multiline':False]['text':' While we're at it, check that default output is never passed on.','line_number':3578,'multiline':False]['text':' Out argument must be tuple, since there are multiple outputs.','line_number':3586,'multiline':False]['text':' don't give positional and output argument, or too many arguments.','line_number':3589,'multiline':False]['text':' wrong number of arguments in the tuple is an error too.','line_number':3590,'multiline':False]['text':' ufuncs always raise','line_number':3708,'multiline':False]['text':' opt-outs still hold even when other arguments have pathological','line_number':3717,'multiline':False]['text':' __array_ufunc__ implementations','line_number':3718,'multiline':False]['text':' gufunc are just ufunc instances, but follow a different path,','line_number':3732,'multiline':False]['text':' so check __array_ufunc__ overrides them properly.','line_number':3733,'multiline':False]['text':' wrong number of arguments in the tuple is an error too.','line_number':3754,'multiline':False]['text':' NOTE: this class is used in doc/source/user/basics.subclassing.rst','line_number':3762,'multiline':False]['text':' if you make any changes here, do update it there too.','line_number':3763,'multiline':False]['text':' 1 input, 1 output','line_number':3824,'multiline':False]['text':' 1 input, 2 outputs','line_number':3839,'multiline':False]['text':' 2 input, 1 output','line_number':3853,'multiline':False]['text':' some tests with a non-ndarray subclass','line_number':3859,'multiline':False]['text':' regression check for gh-9102 -- tests ufunc.reduce implicitly.','line_number':3869,'multiline':False]['text':' simple explicit tests of reduce, accumulate, reduceat','line_number':3891,'multiline':False]['text':' and a few tests for at','line_number':3920,'multiline':False]['text':' This is mainly a regression test for gh-24023 (shouldn't segfault)','line_number':3935,'multiline':False]['text':' No kwargs means kwargs may be NULL on the C-level','line_number':3940,'multiline':False]['text':' And the same with a valid call:','line_number':3944,'multiline':False]['text':' basic use','line_number':3971,'multiline':False]['text':' negatives are ignored','line_number':3977,'multiline':False]['text':' reduce','line_number':3982,'multiline':False]['text':' broadcasting, and a test including 0','line_number':3986,'multiline':False]['text':' basic use','line_number':3992,'multiline':False]['text':' negatives are ignored','line_number':3998,'multiline':False]['text':' reduce','line_number':4003,'multiline':False]['text':' broadcasting, and a test including 0','line_number':4007,'multiline':False]['text':' verify that we don't overflow when a*b does overflow','line_number':4013,'multiline':False]['text':' verify that we don't overflow when taking abs(x)','line_number':4021,'multiline':False]['text':' not relevant for lcm, where the result is unrepresentable anyway','line_number':4022,'multiline':False]['text':' negative power of two','line_number':4023,'multiline':False]['text':' not well-defined on float due to rounding errors','line_number':4037,'multiline':False]['text':' Converting to an array first is a bit different as it means we','line_number':4042,'multiline':False]['text':' have an explicit object dtype:','line_number':4043,'multiline':False]['text':' Special promotion rules should ensure that this also works for','line_number':4045,'multiline':False]['text':' two Python integers (even if slow).','line_number':4046,'multiline':False]['text':' (We do this for comparisons, as the result is always bool and','line_number':4047,'multiline':False]['text':' we also special case array comparisons with Python integers)','line_number':4048,'multiline':False]['text':' But, we cannot do this when it would affect the result dtype:','line_number':4051,'multiline':False]['text':' Asking for `object` explicitly is fine, though:','line_number':4055,'multiline':False]['text':' As of now, the below work, because it is using arrays (which','line_number':4058,'multiline':False]['text':' will be object arrays)','line_number':4059,'multiline':False]['text':' consistent with math.trunc','line_number':4093,'multiline':False]['text':' check branch cuts and continuity on them','line_number':4131,'multiline':False]['text':' check against bogus branch cuts: assert continuity between quadrants','line_number':4146,'multiline':False]['text':' check branch cuts and continuity on them','line_number':4157,'multiline':False]['text':' check against bogus branch cuts: assert continuity between quadrants','line_number':4172,'multiline':False]['text':' manylinux2014 uses glibc2.17','line_number':4204,'multiline':False]['text':' Check against known-good functions','line_number':4215,'multiline':False]['text':' The switchover was chosen as 1e-3; hence there can be up to','line_number':4244,'multiline':False]['text':' ~eps/1e-3 of relative cancellation error before it','line_number':4245,'multiline':False]['text':' It's not guaranteed that the system-provided arc functions','line_number':4255,'multiline':False]['text':' are accurate down to a few epsilons. (Eg. on Linux 64-bit)','line_number':4256,'multiline':False]['text':' So, give more leeway for long complex tests here:','line_number':4257,'multiline':False]['text':' Check a few points','line_number':4263,'multiline':False]['text':' Check continuity across switchover points','line_number':4282,'multiline':False]['text':' NB: the cancellation error at the switchover is at least eps','line_number':4290,'multiline':False]['text':' Integer to low precision float promotion is a dubious choice:','line_number':4305,'multiline':False]['text':' don't fail if types added','line_number':4314,'multiline':False]['text':' don't bother checking the long list of kwargs, which are likely to','line_number':4321,'multiline':False]['text':' change','line_number':4322,'multiline':False]['text':' with identity=value','line_number':4349,'multiline':False]['text':' with identity=None (reorderable)','line_number':4355,'multiline':False]['text':' with no identity (not reorderable)','line_number':4361,'multiline':False]['text':' check that signed zeros also work as a displacement','line_number':4412,'multiline':False]['text':' The value of tiny for double double is NaN, so we need to pass the','line_number':4466,'multiline':False]['text':' assert','line_number':4467,'multiline':False]['text':' Reference from this fortran file, built with gfortran 4.3.3 on linux','line_number':4503,'multiline':False]['text':' 32bits:','line_number':4504,'multiline':False]['text':'       PROGRAM test_spacing','line_number':4505,'multiline':False]['text':'        INTEGER, PARAMETER :: SGL = SELECTED_REAL_KIND(p=6, r=37)','line_number':4506,'multiline':False]['text':'        INTEGER, PARAMETER :: DBL = SELECTED_REAL_KIND(p=13, r=200)','line_number':4507,'multiline':False]['text':'','line_number':4508,'multiline':False]['text':'        WRITE(*,*) spacing(0.00001_DBL)','line_number':4509,'multiline':False]['text':'        WRITE(*,*) spacing(1.0_DBL)','line_number':4510,'multiline':False]['text':'        WRITE(*,*) spacing(1000._DBL)','line_number':4511,'multiline':False]['text':'        WRITE(*,*) spacing(10500._DBL)','line_number':4512,'multiline':False]['text':'','line_number':4513,'multiline':False]['text':'        WRITE(*,*) spacing(0.00001_SGL)','line_number':4514,'multiline':False]['text':'        WRITE(*,*) spacing(1.0_SGL)','line_number':4515,'multiline':False]['text':'        WRITE(*,*) spacing(1000._SGL)','line_number':4516,'multiline':False]['text':'        WRITE(*,*) spacing(10500._SGL)','line_number':4517,'multiline':False]['text':'       END PROGRAM','line_number':4518,'multiline':False]['text':' XXX: spacing does not handle long double yet','line_number':4533,'multiline':False]['text':' test buffered -- this should work','line_number':4561,'multiline':False]['text':' This is when the error occurs.','line_number':4565,'multiline':False]['text':' test no buffer','line_number':4566,'multiline':False]['text':' Another case with a slightly different zero-sized shape','line_number':4579,'multiline':False]['text':' np.rint bug for large integer values on Windows 32-bit and MKL','line_number':4610,'multiline':False]['text':' https://github.com/numpy/numpy/issues/6685','line_number':4611,'multiline':False]['text':' This is exactly representable in floating point','line_number':4613,'multiline':False]['text':' Rint should not change the value','line_number':4615,'multiline':False]['text':' Reproduces bug https://github.com/numpy/numpy/issues/15597','line_number':4621,'multiline':False]['text':' for gh-8661','line_number':4671,'multiline':False]['text':' The outer call reshapes to 3 dims, try to do a bad reshape.','line_number':4679,'multiline':False]['text':' outer inserts 1-sized dims. In that case disturb them.','line_number':4686,'multiline':False]['text':' The first array gets reshaped (not the second one)','line_number':4693,'multiline':False]['text':' This actually works, since we only see the reshaping error:','line_number':4696,'multiline':False]['text':' legacy ufuncs can't report errors and NumPy can't check if the GIL','line_number':4706,'multiline':False]['text':' is released.  So NumPy has to check after the GIL is released just to','line_number':4707,'multiline':False]['text':' cover all bases.  `np.power` uses/used to use this.','line_number':4708,'multiline':False]['text':' not contiguous means the fast-path cannot be taken','line_number':4715,'multiline':False]['text':' Verify that an exception raised in a gufunc loop propagates correctly.','line_number':4737,'multiline':False]['text':' The signature of always_error_gufunc is '(i),()->()'.','line_number':4738,'multiline':False]['text':' test for attributes (which are C-level defined)','line_number':4747,'multiline':False]['text':' And typical functions:','line_number':4750,'multiline':False]['text':' test for attributes (which are C-level defined)','line_number':4759,'multiline':False]['text':' And typical functions:','line_number':4763,'multiline':False]