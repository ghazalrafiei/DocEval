['text':' NOTE: Please avoid the use of numpy.testing since NPYV intrinsics','line_number':1,'multiline':False]['text':' may be involved in their functionality.','line_number':2,'multiline':False]['text':'define NPY_FPE_DIVIDEBYZERO  1','line_number':12,'multiline':False]['text':'define NPY_FPE_OVERFLOW      2','line_number':13,'multiline':False]['text':'define NPY_FPE_UNDERFLOW     4','line_number':14,'multiline':False]['text':'define NPY_FPE_INVALID       8','line_number':15,'multiline':False]['text':' submodule of the desired SIMD extension, e.g. targets["AVX512F"]','line_number':24,'multiline':False]['text':' the current data type suffix e.g. 's8'','line_number':26,'multiline':False]['text':' target name can be 'baseline' or one or more of CPU features','line_number':28,'multiline':False]['text':' multi-target separator','line_number':119,'multiline':False]['text':' among the boolean types, andc, orc and xnor only support b8','line_number':169,'multiline':False]['text':' create the vectors','line_number':204,'multiline':False]['text':' for scalar execution, concatenate the elements of the multiple lists','line_number':210,'multiline':False]['text':' into a single list (spack) and then iterate over the elements of','line_number':211,'multiline':False]['text':' the created list applying a mask to capture the first byte of them.','line_number':212,'multiline':False]['text':' load to cast','line_number':258,'multiline':False]['text':' left shift','line_number':260,'multiline':False]['text':' load to cast','line_number':263,'multiline':False]['text':' right shift','line_number':265,'multiline':False]['text':' shift by zero or max or out-range immediate constant is not applicable and illogical','line_number':269,'multiline':False]['text':' load to cast','line_number':271,'multiline':False]['text':' left shift by an immediate constant','line_number':273,'multiline':False]['text':' load to cast','line_number':276,'multiline':False]['text':' right shift by an immediate constant','line_number':278,'multiline':False]['text':' very costly to emulate nearest even on Armv7','line_number':335,'multiline':False]['text':' instead we round halves to up. e.g. 0.5 -> 1, -0.5 -> -1','line_number':336,'multiline':False]['text':' multiply and add, a*b + c','line_number':370,'multiline':False]['text':' multiply and subtract, a*b - c','line_number':374,'multiline':False]['text':' negate multiply and add, -(a*b) + c','line_number':378,'multiline':False]['text':' negate multiply and subtract, -(a*b) - c','line_number':382,'multiline':False]['text':' multiply, add for odd elements and subtract even elements.','line_number':386,'multiline':False]['text':' (a * b) -+ c','line_number':387,'multiline':False]['text':' load to truncate precision','line_number':417,'multiline':False]['text':' square','line_number':425,'multiline':False]['text':' special cases','line_number':449,'multiline':False]['text':' test large numbers','line_number':463,'multiline':False]['text':' signed zero','line_number':473,'multiline':False]['text':' load to truncate precision','line_number':567,'multiline':False]['text':' unaligned load','line_number':647,'multiline':False]['text':' aligned load','line_number':650,'multiline':False]['text':' stream load','line_number':653,'multiline':False]['text':' load lower part','line_number':656,'multiline':False]['text':' detect overflow','line_number':661,'multiline':False]['text':' unaligned store','line_number':666,'multiline':False]['text':' aligned store','line_number':670,'multiline':False]['text':' stream store','line_number':674,'multiline':False]['text':' store lower part','line_number':678,'multiline':False]['text':' detect overflow','line_number':682,'multiline':False]['text':' store higher part','line_number':683,'multiline':False]['text':' detect overflow','line_number':687,'multiline':False]['text':' test out of range','line_number':699,'multiline':False]['text':' cast unsigned','line_number':751,'multiline':False]['text':' cast unsigned','line_number':779,'multiline':False]['text':' detect overflow','line_number':812,'multiline':False]['text':' detect overflow','line_number':823,'multiline':False]['text':' stride 0','line_number':824,'multiline':False]['text':' detect overflow','line_number':855,'multiline':False]['text':' detect overflow','line_number':868,'multiline':False]['text':' stride 0','line_number':870,'multiline':False]['text':' py level of npyv_set_* don't support ignoring the extra specified lanes or','line_number':909,'multiline':False]['text':' fill non-specified lanes with zero.','line_number':910,'multiline':False]['text':' py level of npyv_setf_* don't support ignoring the extra specified lanes or','line_number':913,'multiline':False]['text':' fill non-specified lanes with the specified scalar.','line_number':914,'multiline':False]['text':' We're testing the sanity of _simd's type-vector,','line_number':918,'multiline':False]['text':' reinterpret* intrinsics itself are tested via compiler','line_number':919,'multiline':False]['text':' during the build of _simd module','line_number':920,'multiline':False]['text':' select & mask operations','line_number':930,'multiline':False]['text':' test extract elements','line_number':936,'multiline':False]['text':' cleanup intrinsic is only used with AVX for','line_number':939,'multiline':False]['text':' zeroing registers to avoid the AVX-SSE transition penalty,','line_number':940,'multiline':False]['text':' so nothing to test here','line_number':941,'multiline':False]['text':' lower half part','line_number':947,'multiline':False]['text':' higher half part','line_number':950,'multiline':False]['text':' combine two lower parts','line_number':953,'multiline':False]['text':' combine two higher parts','line_number':956,'multiline':False]['text':' combine x2','line_number':959,'multiline':False]['text':' zip(interleave)','line_number':963,'multiline':False]['text':' unzip(deinterleave)','line_number':976,'multiline':False]['text':' Reverse elements of each 64-bit lane','line_number':983,'multiline':False]['text':' close enough from the edge to detect any deviation','line_number':1125,'multiline':False]['text':' lower half part','line_number':1129,'multiline':False]['text':' higher half part','line_number':1131,'multiline':False]['text':' non-saturated','line_number':1143,'multiline':False]['text':' load to cast','line_number':1144,'multiline':False]['text':' load to truncate f64 to precision of f32','line_number':1173,'multiline':False]['text':' to test overflow','line_number':1200,'multiline':False]['text':' negate','line_number':1213,'multiline':False]['text':' cast','line_number':1216,'multiline':False]['text':' reduce sum','line_number':1232,'multiline':False]['text':' multi-target separator','line_number':1304,'multiline':False]['text':' multi-target','line_number':1306,'multiline':False]