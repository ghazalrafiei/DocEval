['text':' the casting code also uses the reciprocal.','line_number':24,'multiline':False]['text':' This does not test much, since we always discover the scaling as 1.','line_number':35,'multiline':False]['text':' But most of NumPy (when writing) does not understand DType classes','line_number':36,'multiline':False]['text':' Check the repr, mainly to cover the code paths:','line_number':48,'multiline':False]['text':' repr of structured dtypes need special handling because the','line_number':56,'multiline':False]['text':' implementation bypasses the object repr','line_number':57,'multiline':False]['text':' Float64 -> SF(1.) and then promotes normally, so both of this work:','line_number':98,'multiline':False]['text':' Test an undefined promotion:','line_number':102,'multiline':False]['text':' multiplies dtype scaling and content separately:','line_number':111,'multiline':False]['text':' For reductions to work, the first and last operand must have the','line_number':117,'multiline':False]['text':' same dtype.  For this parametric DType that is not necessarily true.','line_number':118,'multiline':False]['text':' Addition reductin works (as of writing requires to pass initial','line_number':120,'multiline':False]['text':' because setting a scaled-float from the default `0` fails).','line_number':121,'multiline':False]['text':' But each multiplication changes the factor, so a reduction is not','line_number':125,'multiline':False]['text':' possible (the relaxed version of the old refusal to handle any','line_number':126,'multiline':False]['text':' flexible dtype).','line_number':127,'multiline':False]['text':' one factor is one, so we get the factor of b:','line_number':149,'multiline':False]['text':' Check that promotion works when `out` is used:','line_number':155,'multiline':False]['text':' The promoter accepts this (maybe it should not), but the SFloat','line_number':158,'multiline':False]['text':' result cannot be cast to integer:','line_number':159,'multiline':False]['text':' addition uses the type promotion rules for the result:','line_number':167,'multiline':False]['text':' sign change is "equiv":','line_number':182,'multiline':False]['text':' Different factor is "same_kind" (default) so check that "safe" fails','line_number':187,'multiline':False]['text':' Check that casting the output fails also (done by the ufunc here)','line_number':191,'multiline':False]['text':' make sure first element is considered False.','line_number':199,'multiline':False]['text':' also check that the same works for reductions:','line_number':206,'multiline':False]['text':' The output casting does not match the bool, bool -> bool loop:','line_number':211,'multiline':False]['text':' Also check reduction (keepdims, due to incorrect getitem)','line_number':225,'multiline':False]['text':' Very simple test that we accept `.astype()` also on the class.','line_number':232,'multiline':False]['text':' ScaledFloat always returns the default descriptor, but it does','line_number':233,'multiline':False]['text':' check the relevant code paths.','line_number':234,'multiline':False]['text':' passing the class class','line_number':237,'multiline':False]['text':' above will have discovered 1. scaling','line_number':238,'multiline':False]['text':' passing in a dtype class should return','line_number':242,'multiline':False]['text':' the default descriptor','line_number':243,'multiline':False]['text':' this monkeypatch is needed because pickle','line_number':256,'multiline':False]['text':' uses the repr of a type to reconstruct it','line_number':257,'multiline':False]['text':' adapted from RoundtripTest.roundtrip in np.save tests','line_number':262,'multiline':False]['text':' can't actually unpickle, but we can pickle (if in namespace)','line_number':299,'multiline':False]