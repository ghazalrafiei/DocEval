['text':' one dimensional','line_number':23,'multiline':False]['text':' two dimensional','line_number':27,'multiline':False]['text':' two dimensional with flexible dtype','line_number':33,'multiline':False]['text':' test that object + subclass is OK:','line_number':51,'multiline':False]['text':' make sure that subclasses which return 0ds instead','line_number':62,'multiline':False]['text':' of scalars don't cause infinite recursion in str','line_number':63,'multiline':False]['text':' check it works properly with object arrays too','line_number':81,'multiline':False]['text':' plus recursive object arrays (even depth > 1)','line_number':86,'multiline':False]['text':' resolve circular references for garbage collector','line_number':93,'multiline':False]['text':' nested 0d-subclass-object','line_number':95,'multiline':False]['text':' gh-10663','line_number':101,'multiline':False]['text':' resolve recursion for garbage collector','line_number':128,'multiline':False]['text':' resolve recursion for garbage collector','line_number':134,'multiline':False]['text':' resolve circular references for garbage collector','line_number':142,'multiline':False]['text':' printing square brackets directly would be ambiguuous','line_number':145,'multiline':False]['text':' gh-9345','line_number':153,'multiline':False]['text':' RecursionError ?','line_number':154,'multiline':False]['text':' gh-10366','line_number':157,'multiline':False]['text':' ensure than an appropriate TypeError','line_number':219,'multiline':False]['text':' is raised when array2string receives','line_number':220,'multiline':False]['text':' an unexpected kwarg','line_number':221,'multiline':False]['text':' for issue #5692','line_number':269,'multiline':False]['text':' same again, but with non-legacy behavior','line_number':282,'multiline':False]['text':' and again, with timedeltas','line_number':293,'multiline':False]['text':' See #8160','line_number':304,'multiline':False]['text':' See #8172','line_number':315,'multiline':False]['text':' previously the global print options would be taken over the kwarg','line_number':334,'multiline':False]['text':' This test checks that, given any value that can be represented in an','line_number':505,'multiline':False]['text':' array of dtype("U") (i.e. unicode string), ...','line_number':506,'multiline':False]['text':' casting a list of them to an array does not e.g. truncate the value','line_number':508,'multiline':False]['text':' use raw python strings for repr below','line_number':510,'multiline':False]['text':' and that np.array2string puts a newline in the expected location','line_number':511,'multiline':False]['text':' make sure we do not hold references to the array due to a recursive','line_number':518,'multiline':False]['text':' closure (gh-10620)','line_number':519,'multiline':False]['text':' mixed negative and positive value array','line_number':531,'multiline':False]['text':' all non-negative array','line_number':545,'multiline':False]['text':' all negative array','line_number':559,'multiline':False]['text':' 2d array mixed negative and positive','line_number':573,'multiline':False]['text':' 2d array all positive','line_number':587,'multiline':False]['text':' 2d array all negative','line_number':601,'multiline':False]['text':' repr of 0d arrays is affected by printoptions','line_number':686,'multiline':False]['text':' str is unaffected','line_number':690,'multiline':False]['text':' check `style` arg raises','line_number':693,'multiline':False]['text':' but not in legacy mode','line_number':696,'multiline':False]['text':' gh-10934 style was broken in legacy mode, check it works','line_number':698,'multiline':False]['text':' gh-10383','line_number':773,'multiline':False]['text':' make sure internal computations in FloatingFormat don't','line_number':779,'multiline':False]['text':' warn about overflow','line_number':780,'multiline':False]['text':' also make sure 1e23 is right (is between two fp numbers)','line_number':801,'multiline':False]['text':' note: we construct w from the strings `1eXX` instead of doing','line_number':803,'multiline':False]['text':' `10.**arange(24)` because it turns out the two are not equivalent in','line_number':804,'multiline':False]['text':' python. On some architectures `1e23 != 10.**23`.','line_number':805,'multiline':False]['text':' unique mode','line_number':808,'multiline':False]['text':' maxprec mode, precision=8','line_number':828,'multiline':False]['text':' fixed mode, precision=4','line_number':844,'multiline':False]['text':' for larger precision, representation error becomes more apparent:','line_number':859,'multiline':False]['text':' maxprec_equal  mode, precision=8','line_number':865,'multiline':False]['text':' test unique special case (gh-18609)','line_number':881,'multiline':False]['text':' in legacy mode, str of floats get truncated, and complex scalars','line_number':886,'multiline':False]['text':' use * for non-finite imaginary part','line_number':887,'multiline':False]['text':' 4-byte width string','line_number':934,'multiline':False]['text':' preserve the sensible default of only showing dtype if nonstandard','line_number':949,'multiline':False]['text':' if the type is >1 byte, the non-native endian version','line_number':955,'multiline':False]['text':' must show endianness.','line_number':956,'multiline':False]['text':' 1.13 had extra trailing spaces, and was missing newlines','line_number':1053,'multiline':False]['text':' test that context manager actually works','line_number':1111,'multiline':False]['text':' test that print options are actually restrored','line_number':1117,'multiline':False]['text':' test that print options are restored even if an exception is raised','line_number':1125,'multiline':False]['text':' Test NEP 51 scalar repr (and legacy option) for numeric types','line_number':1144,'multiline':False]['text':' complex may have extra brackets','line_number':1150,'multiline':False]['text':' Test NEP 51 scalar repr (and legacy option) for numeric types','line_number':1180,'multiline':False]['text':' Note that based on this currently we do not print the same as a tuple','line_number':1187,'multiline':False]['text':' would, since the tuple would include the repr() inside for floats, but','line_number':1188,'multiline':False]['text':' we do not do that.','line_number':1189,'multiline':False]