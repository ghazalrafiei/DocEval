['text':' Remove this when cython fixes https://github.com/cython/cython/issues/5411','line_number':28,'multiline':False]['text':' Remove functions that do not support `floats`','line_number':36,'multiline':False]['text':' class to use in testing object method loops','line_number':133,'multiline':False]['text':' The conjugate ufunc should fall back to calling the method:','line_number':162,'multiline':False]['text':' Use 0-D arrays, to ensure the same element call','line_number':181,'multiline':False]['text':' Check that ufunc not defined in the top level numpy namespace','line_number':206,'multiline':False]['text':' such as numpy._core._rational_tests.test_add can also be pickled','line_number':207,'multiline':False]['text':' This tests that a simplification of our ufunc pickle code will','line_number':222,'multiline':False]['text':' lead to allowing qualnames as names.  Future ufuncs should','line_number':223,'multiline':False]['text':' possible add a specific qualname, or a hook into pickling instead','line_number':224,'multiline':False]['text':' (dask+numba may benefit).','line_number':225,'multiline':False]['text':' from include/numpy/ufuncobject.h','line_number':320,'multiline':False]['text':' the arguments to test_signature are: nin, nout, core_signature','line_number':324,'multiline':False]['text':' empty core signature; treat as plain ufunc (with trivial core)','line_number':334,'multiline':False]['text':' more complicated names for variables','line_number':344,'multiline':False]['text':' matrix_multiply signature from _umath_tests','line_number':363,'multiline':False]['text':' matmul signature from _umath_tests','line_number':373,'multiline':False]['text':' signature all None, is an acceptable alternative (since 1.21)','line_number':479,'multiline':False]['text':' to not providing a signature.','line_number':480,'multiline':False]['text':' special case, that would be deprecated anyway, so errors:','line_number':489,'multiline':False]['text':' Since that will be the normal behaviour (past NumPy 1.21)','line_number':493,'multiline':False]['text':' we do support the types already:','line_number':494,'multiline':False]['text':' We allow certain dtype instances when there is a clear singleton','line_number':502,'multiline':False]['text':' and the given one is equivalent; mainly for backcompat.','line_number':503,'multiline':False]['text':' Relies on pickling behavior, if assert fails just remove test...','line_number':506,'multiline':False]['text':' If the second argument matches already, no need to specify it:','line_number':528,'multiline':False]['text':' ldexp only has a loop for long input as second argument, overriding','line_number':534,'multiline':False]['text':' the output cannot help with that (no matter the casting)','line_number':535,'multiline':False]['text':' Ensure e,d->None is in the dispatching cache (double loop)','line_number':544,'multiline':False]['text':' The error must still be raised:','line_number':546,'multiline':False]['text':' Test that providing only `dtype=` or `signature=(None, None, dtype)`','line_number':554,'multiline':False]['text':' is sufficient if falling back to a homogeneous signature works.','line_number':555,'multiline':False]['text':' In this case, the `intp, intp -> intp` loop is chosen.','line_number':556,'multiline':False]['text':' the cast happens first.','line_number':558,'multiline':False]['text':' the unsafe casting would normally cause errors though:','line_number':563,'multiline':False]['text':' neither a string nor a tuple','line_number':569,'multiline':False]['text':' bad symbols that do not translate to dtypes','line_number':572,'multiline':False]['text':' incomplete and byte string','line_number':576,'multiline':False]['text':' incomplete string','line_number':579,'multiline':False]['text':' bad length','line_number':582,'multiline':False]['text':' Signatures only set the type numbers (not the actual loop dtypes)','line_number':588,'multiline':False]['text':' so using `M` in a signature/dtype should generally work:','line_number':589,'multiline':False]['text':' Normally, a "no" cast:','line_number':609,'multiline':False]['text':' Byte-swapping is not allowed with "no" though:','line_number':612,'multiline':False]['text':' But is allowed with "equiv":','line_number':616,'multiline':False]['text':' Casting to float64 is safe, but not equiv:','line_number':620,'multiline':False]['text':' but it is safe cast:','line_number':624,'multiline':False]['text':' upcast','line_number':626,'multiline':False]['text':' Check result value and dtype.','line_number':639,'multiline':False]['text':' Check with no output type specified','line_number':642,'multiline':False]['text':' Check with output type specified.  This also checks for the','line_number':657,'multiline':False]['text':' incorrect casts in issue gh-3484 because the unary '-' does','line_number':658,'multiline':False]['text':' not change types, even for unsigned types, Hence casts in the','line_number':659,'multiline':False]['text':' ufunc from signed to unsigned and vice versa will lead to','line_number':660,'multiline':False]['text':' errors in the values.','line_number':661,'multiline':False]['text':' Casting complex to float is not allowed','line_number':669,'multiline':False]['text':' The value of tiny for double double is NaN','line_number':674,'multiline':False]['text':' Some test values result in invalid for float16','line_number':681,'multiline':False]['text':' and the cast to it may overflow to inf.','line_number':682,'multiline':False]['text':' The value of tiny for double double is NaN','line_number':694,'multiline':False]['text':' Check booleans','line_number':707,'multiline':False]['text':' warning if sum overflows, which it does in float16','line_number':728,'multiline':False]['text':' sum with first reduction entry != 0','line_number':753,'multiline':False]['text':' sum with first reduction entry != 0','line_number':778,'multiline':False]['text':' Integer, single axis','line_number':784,'multiline':False]['text':' Floating point','line_number':787,'multiline':False]['text':' Multiple non-adjacent axes','line_number':790,'multiline':False]['text':' More extensive tests done in test_reduction_with_where.','line_number':795,'multiline':False]['text':' Broadcast in core dimensions should fail','line_number':814,'multiline':False]['text':' Extend core dimensions should fail','line_number':818,'multiline':False]['text':' Broadcast should fail','line_number':822,'multiline':False]['text':' Writing to a broadcasted array with overlap should warn, gh-2705','line_number':827,'multiline':False]['text':' Output reduction should not be allowed.','line_number':839,'multiline':False]['text':' See gh-15139','line_number':840,'multiline':False]['text':' For ufuncs and gufuncs (not for reductions), we currently allow','line_number':850,'multiline':False]['text':' the output to cause broadcasting of the input arrays.','line_number':851,'multiline':False]['text':' both along dimensions with shape 1 and dimensions which do not','line_number':852,'multiline':False]['text':' exist at all in the inputs.','line_number':853,'multiline':False]['text':' The same holds for gufuncs (gh-16484)','line_number':859,'multiline':False]['text':' the result would be just a scalar `5`, but is broadcast fully:','line_number':861,'multiline':False]['text':' Output is (currently) allowed to broadcast inputs, but it cannot be','line_number':870,'multiline':False]['text':' smaller than the actual result.','line_number':871,'multiline':False]['text':' Output should always be native-endian','line_number':899,'multiline':False]['text':' inner1d signature: '(i),(i)->()'','line_number':956,'multiline':False]['text':' basic tests on inputs (outputs tested below with matrix_multiply).','line_number':960,'multiline':False]['text':' default','line_number':963,'multiline':False]['text':' integers ok for single axis.','line_number':966,'multiline':False]['text':' mix fine','line_number':969,'multiline':False]['text':' can omit last axis.','line_number':972,'multiline':False]['text':' can pass in other types of integer (with __index__ protocol)','line_number':975,'multiline':False]['text':' swap some axes','line_number':978,'multiline':False]['text':' Check errors for improperly constructed axes arguments.','line_number':983,'multiline':False]['text':' should have list.','line_number':984,'multiline':False]['text':' needs enough elements','line_number':986,'multiline':False]['text':' should pass in indices.','line_number':988,'multiline':False]['text':' cannot pass an index unless there is only one dimension','line_number':992,'multiline':False]['text':' (output is wrong in this case)','line_number':993,'multiline':False]['text':' or pass in generally the wrong number of axes','line_number':995,'multiline':False]['text':' axes need to have same length.','line_number':998,'multiline':False]['text':' matrix_multiply signature: '(m,n),(n,p)->(m,p)'','line_number':1001,'multiline':False]['text':' Sanity check.','line_number':1005,'multiline':False]['text':' Default axes.','line_number':1008,'multiline':False]['text':' Default with explicit axes.','line_number':1011,'multiline':False]['text':' swap some axes.','line_number':1014,'multiline':False]['text':' Default with output array.','line_number':1018,'multiline':False]['text':' Transposed output array','line_number':1023,'multiline':False]['text':' Check errors for improperly constructed axes arguments.','line_number':1028,'multiline':False]['text':' wrong argument','line_number':1029,'multiline':False]['text':' axes should be list','line_number':1031,'multiline':False]['text':' list needs to have right length','line_number':1034,'multiline':False]['text':' list should not contain None, or lists','line_number':1037,'multiline':False]['text':' single integers are AxisErrors if more are required','line_number':1044,'multiline':False]['text':' tuples should not have duplicated values','line_number':1047,'multiline':False]['text':' arrays should have enough axes.','line_number':1049,'multiline':False]['text':' Regular ufuncs should not accept axes.','line_number':1055,'multiline':False]['text':' should be able to deal with bad unrelated kwargs.','line_number':1057,'multiline':False]['text':' inner1d signature: '(i),(i)->()'','line_number':1061,'multiline':False]['text':' Sanity checks on innerwt and cumsum.','line_number':1075,'multiline':False]['text':' Check errors.','line_number':1090,'multiline':False]['text':' Cannot pass in both axis and axes.','line_number':1091,'multiline':False]['text':' Not an integer.','line_number':1093,'multiline':False]['text':' more than 1 core dimensions.','line_number':1095,'multiline':False]['text':' Output wrong size in axis.','line_number':1098,'multiline':False]['text':' Regular ufuncs should not accept axis.','line_number':1101,'multiline':False]['text':' inner1d signature: '(i),(i)->()'','line_number':1105,'multiline':False]['text':' Now combined with axis and axes.','line_number':1119,'multiline':False]['text':' Hardly useful, but should work.','line_number':1146,'multiline':False]['text':' Check with two core dimensions.','line_number':1150,'multiline':False]['text':' Sanity check on innerwt.','line_number':1165,'multiline':False]['text':' Check errors.','line_number':1173,'multiline':False]['text':' Not a boolean','line_number':1174,'multiline':False]['text':' More than 1 core dimension, and core output dimensions.','line_number':1176,'multiline':False]['text':' Regular ufuncs should not accept keepdims.','line_number':1180,'multiline':False]['text':' Wrong output core dimension.','line_number':1210,'multiline':False]['text':' Wrong output broadcast dimension (see gh-15139).','line_number':1212,'multiline':False]['text':' Comparing the effects of ? in signature:','line_number':1216,'multiline':False]['text':' matrix_multiply: (m,n),(n,p)->(m,p)    # all must be there.','line_number':1217,'multiline':False]['text':' matmul:        (m?,n),(n,p?)->(m?,p?)  # allow missing m, p.','line_number':1218,'multiline':False]['text':' matrix @ single column vector with proper dimension','line_number':1223,'multiline':False]['text':' matmul does the same thing','line_number':1225,'multiline':False]['text':' matrix @ vector without dimension making it a column vector.','line_number':1228,'multiline':False]['text':' matrix multiply fails -> missing core dim.','line_number':1229,'multiline':False]['text':' matmul mimicker passes, and returns a vector.','line_number':1231,'multiline':False]['text':' Now with a column array: same as for column vector,','line_number':1234,'multiline':False]['text':' broadcasting sensibly.','line_number':1235,'multiline':False]['text':' As above, but for row vector','line_number':1239,'multiline':False]['text':' row vector @ matrix','line_number':1243,'multiline':False]['text':' single row vector @ matrix','line_number':1247,'multiline':False]['text':' row vector array @ matrix','line_number':1251,'multiline':False]['text':' Now for vector combinations','line_number':1255,'multiline':False]['text':' row vector @ column vector','line_number':1256,'multiline':False]['text':' single row vector @ single col vector','line_number':1262,'multiline':False]['text':' row vector array @ matrix','line_number':1266,'multiline':False]['text':' Finally, check that things are *not* squeezed if one gives an','line_number':1270,'multiline':False]['text':' output.','line_number':1271,'multiline':False]['text':' And check one cannot put missing dimensions back.','line_number':1278,'multiline':False]['text':' But fine for matmul, since it is just a broadcast.','line_number':1282,'multiline':False]['text':' An output array is required to determine p with signature (n,d)->(p)','line_number':1357,'multiline':False]['text':' normal behavior is a cast','line_number':1398,'multiline':False]['text':' normal behavior is a cast','line_number':1402,'multiline':False]['text':' Reductions on object arrays','line_number':1406,'multiline':False]['text':' Checks that in-place accumulates work, see also gh-7402','line_number':1425,'multiline':False]['text':' Twice reproduced also for tuples:','line_number':1428,'multiline':False]['text':' And the same if the axis argument is used','line_number':1435,'multiline':False]['text':' Typical accumulation on object works as expected:','line_number':1445,'multiline':False]['text':' But errors are propagated from the inner-loop if they occur:','line_number':1448,'multiline':False]['text':' Checks that in-place reduceats work, see also gh-7465','line_number':1453,'multiline':False]['text':' And the same if the axis argument is used','line_number':1462,'multiline':False]['text':' Reduceat works as expected when no invalid operation occurs (None is','line_number':1472,'multiline':False]['text':' not involved in an operation here)','line_number':1473,'multiline':False]['text':' But errors when None would be involved in an operation:','line_number':1476,'multiline':False]['text':' Test with default dtype and object dtype','line_number':1481,'multiline':False]['text':' The functions 'sum', 'prod', etc allow specifying axis=0','line_number':1502,'multiline':False]['text':' even for scalars','line_number':1503,'multiline':False]['text':' Check scalar behaviour for ufuncs without an identity','line_number':1511,'multiline':False]['text':' Make sure that scalars are coming out from this operation','line_number':1514,'multiline':False]['text':' check if scalars/0-d arrays get cast','line_number':1520,'multiline':False]['text':' assert that 0-d arrays get wrapped','line_number':1523,'multiline':False]['text':' Test that it's possible to do casts on output','line_number':1530,'multiline':False]['text':' Test that the where= ufunc parameter works with regular arrays','line_number':1543,'multiline':False]['text':' Broadcasting the where= parameter','line_number':1553,'multiline':False]['text':' This test is temporarily skipped because it requires','line_number':1558,'multiline':False]['text':' adding masking features to the nditer to work properly','line_number':1559,'multiline':False]['text':' With casting on output','line_number':1561,'multiline':False]['text':' With casting and allocated output','line_number':1569,'multiline':False]['text':' No casting and allocated output','line_number':1574,'multiline':False]['text':' See gh-17198','line_number':1580,'multiline':False]['text':' outside mask, out remains all 0','line_number':1589,'multiline':False]['text':' np.minimum.reduce is an identityless reduction','line_number':1592,'multiline':False]['text':' Verify that it sees the zero at various positions','line_number':1594,'multiline':False]['text':' Regression test for gh-20921 (copying identity incorrectly failed)','line_number':1641,'multiline':False]['text':' For an object loop, the default value 0 with type int is used:','line_number':1679,'multiline':False]['text':' When the loop is float64 but `out` is object this does not happen,','line_number':1682,'multiline':False]['text':' the result is float64 cast to object (which gives Python `float`).','line_number':1683,'multiline':False]['text':' np.minimum.reduce is an identityless reduction','line_number':1688,'multiline':False]['text':' For cases like np.maximum(np.abs(...), initial=0)','line_number':1690,'multiline':False]['text':' More generally, a supremum over non-negative numbers.','line_number':1691,'multiline':False]['text':' For cases like reduction of an empty array over the reals.','line_number':1694,'multiline':False]['text':' Random tests','line_number':1698,'multiline':False]['text':' Check initial=None raises ValueError for both types of ufunc reductions','line_number':1704,'multiline':False]['text':' Also in the somewhat special object case:','line_number':1707,'multiline':False]['text':' Check that np._NoValue gives default behavior.','line_number':1711,'multiline':False]['text':' Check that initial kwarg behaves as intended for dtype=object','line_number':1714,'multiline':False]['text':' OK, since the reduction itself is *not* empty, the result is','line_number':1721,'multiline':False]['text':' Not OK, the reduction itself is empty and we have no identity','line_number':1723,'multiline':False]['text':' Test that an empty reduction fails also if the result is empty','line_number':1727,'multiline':False]['text':' Division reduction makes sense with `initial=1` (empty or not):','line_number':1732,'multiline':False]['text':' Check we do not overwrite elements of a internally.','line_number':1751,'multiline':False]['text':' If we have a n x m array and do a reduction with axis=1, then we are','line_number':1789,'multiline':False]['text':' doing n reductions, and each reduction takes an m-element array. For','line_number':1790,'multiline':False]['text':' a reduction operation without an identity, then:','line_number':1791,'multiline':False]['text':'   n > 0, m > 0: fine','line_number':1792,'multiline':False]['text':'   n = 0, m > 0: fine, doing 0 reductions of m-element arrays','line_number':1793,'multiline':False]['text':'   n > 0, m = 0: can't reduce a 0-element array, ValueError','line_number':1794,'multiline':False]['text':'   n = 0, m = 0: can't reduce a 0-element array, ValueError (for','line_number':1795,'multiline':False]['text':'     consistency with the above case)','line_number':1796,'multiline':False]['text':' This test doesn't actually look at return values, it just checks to','line_number':1797,'multiline':False]['text':' make sure that error we get an error in exactly those cases where we','line_number':1798,'multiline':False]['text':' expect one, and assumes the calculations themselves are done','line_number':1799,'multiline':False]['text':' correctly.','line_number':1800,'multiline':False]['text':' Check what happens if the inner (resp. outer) dimensions are a','line_number':1818,'multiline':False]['text':' mix of zero and non-zero:','line_number':1819,'multiline':False]['text':' np.maximum is just an arbitrary ufunc with no reduction identity','line_number':1826,'multiline':False]['text':' all of the combinations are fine for a reduction that has an','line_number':1835,'multiline':False]['text':' identity','line_number':1836,'multiline':False]['text':' OTOH, accumulate always makes sense for any combination of n and m,','line_number':1844,'multiline':False]['text':' because it maps an m-element array to an m-element array. These','line_number':1845,'multiline':False]['text':' tests are simpler because accumulate doesn't accept multiple axes.','line_number':1846,'multiline':False]['text':' In old versions of numpy, in-place operations used the 'unsafe'','line_number':1854,'multiline':False]['text':' casting rules. In versions >= 1.10, 'same_kind' is the','line_number':1855,'multiline':False]['text':' default and an exception is raised instead of a warning.','line_number':1856,'multiline':False]['text':' when 'same_kind' is not satisfied.','line_number':1857,'multiline':False]['text':' Non-in-place addition is fine','line_number':1859,'multiline':False]['text':' Make sure that explicitly overriding the exception is allowed:','line_number':1868,'multiline':False]['text':' Test ufunc with built in input types and custom output type','line_number':1873,'multiline':False]['text':' Output must be specified so numpy knows what','line_number':1879,'multiline':False]['text':' ufunc signature to look for','line_number':1880,'multiline':False]['text':' The new resolution means that we can (usually) find custom loops','line_number':1885,'multiline':False]['text':' as long as they match exactly:','line_number':1886,'multiline':False]['text':' This works even more generally, so long the default common-dtype','line_number':1890,'multiline':False]['text':' promoter works out:','line_number':1891,'multiline':False]['text':' This scalar path used to go into legacy promotion, but doesn't now:','line_number':1895,'multiline':False]['text':' gh-9351 - looking for a non-first userloop would previously hang','line_number':1944,'multiline':False]['text':' missing second operand','line_number':1991,'multiline':False]['text':' extraneous second operand','line_number':2004,'multiline':False]['text':' second operand cannot be converted to an array','line_number':2008,'multiline':False]['text':' ufuncs with indexed loops for performance in ufunc.at','line_number':2011,'multiline':False]['text':' Avoid divide-by-zero and inf for integer divide','line_number':2020,'multiline':False]['text':' Do the calculation twice and compare the answers','line_number':2029,'multiline':False]['text':' Make sure all the work happens inside the ufunc','line_number':2036,'multiline':False]['text':' in order to duplicate error/warning handling','line_number':2037,'multiline':False]['text':' If w_loop warned, make sure w_at warned as well','line_number':2040,'multiline':False]['text':'','line_number':2042,'multiline':False]['text':' Make sure the indexed loop check does not choke on iters','line_number':2065,'multiline':False]['text':' with subspaces','line_number':2066,'multiline':False]['text':' If it is [-1, -1, -1, -100, 0] then the regular strided loop was used','line_number':2075,'multiline':False]['text':' issue gh-23457','line_number':2079,'multiline':False]['text':' index must be cast, which may be buffered in chunks:','line_number':2092,'multiline':False]['text':' index must be cast, which may be buffered in chunks:','line_number':2101,'multiline':False]['text':' Test mixed dtypes','line_number':2195,'multiline':False]['text':' Test boolean indexing and boolean ufuncs','line_number':2201,'multiline':False]['text':' Test unary operator','line_number':2207,'multiline':False]['text':' Test empty subspace','line_number':2213,'multiline':False]['text':' Test with swapped byte order','line_number':2219,'multiline':False]['text':' Test exception thrown','line_number':2225,'multiline':False]['text':' Test multiple output ufuncs raise error, gh-5665','line_number':2230,'multiline':False]['text':' Test maximum','line_number':2233,'multiline':False]['text':' Test ufuncs with non-trivial signature raise a TypeError','line_number':2256,'multiline':False]['text':' str dtype does not have a ufunc loop for np.add','line_number':2265,'multiline':False]['text':' a, axis=0, dtype=None, out=None, keepdims=False','line_number':2287,'multiline':False]['text':' multiple keywords','line_number':2304,'multiline':False]['text':' too little','line_number':2311,'multiline':False]['text':' too much','line_number':2313,'multiline':False]['text':' invalid axis','line_number':2315,'multiline':False]['text':' invalid dtype','line_number':2320,'multiline':False]['text':' invalid out','line_number':2324,'multiline':False]['text':' keepdims boolean, no invalid value','line_number':2328,'multiline':False]['text':' assert_raises(TypeError, f, d, 0, None, None, "invalid")','line_number':2329,'multiline':False]['text':' assert_raises(TypeError, f, d, keepdims="invalid", axis=0, dtype=None)','line_number':2330,'multiline':False]['text':' invalid mix','line_number':2331,'multiline':False]['text':' invalid keyword','line_number':2335,'multiline':False]['text':' https://github.com/numpy/numpy/issues/4855','line_number':2346,'multiline':False]['text':' Scalar comparisons should always work, without deprecation warnings.','line_number':2360,'multiline':False]['text':' even when the ufunc fails.','line_number':2361,'multiline':False]['text':' See gh-5964 and gh-2091. Some of these functions are not operator','line_number':2370,'multiline':False]['text':' related and were fixed for other reasons in the past.','line_number':2371,'multiline':False]['text':' logical_xor object loop is bad','line_number':2389,'multiline':False]['text':' Most mixed signatures fail (except those with bool out, e.g. `OO->?`)','line_number':2404,'multiline':False]['text':' The logical ufuncs support even input that can't be promoted:','line_number':2412,'multiline':False]['text':' check that the output has no effect:','line_number':2417,'multiline':False]['text':' Last check, test reduction when out and a match (the complexity here','line_number':2423,'multiline':False]['text':' is that the "i,i->?" may seem right, but should not match.','line_number':2424,'multiline':False]['text':' It would be safe, but not equiv casting:','line_number':2453,'multiline':False]['text':' See gh-20699, byte-order changes need some extra care in the type','line_number':2457,'multiline':False]['text':' resolution to make the following succeed:','line_number':2458,'multiline':False]['text':' Check that the out argument to reductions is considered for','line_number':2468,'multiline':False]['text':' promotion.  See also gh-20455.','line_number':2469,'multiline':False]['text':' Note that these paths could prefer `initial=` in the future and','line_number':2470,'multiline':False]['text':' do not up-cast to the default integer for add and prod','line_number':2471,'multiline':False]['text':' For legacy dtypes, the signature currently has to be forced if `out=`','line_number':2478,'multiline':False]['text':' is passed.  The two paths below should differ, without `dtype=` the','line_number':2479,'multiline':False]['text':' expected result should be: `np.prod(arr.astype("f8")).astype("f4")`!','line_number':2480,'multiline':False]['text':' float32 and int64 promote to float64:','line_number':2483,'multiline':False]['text':' If `dtype=` is passed, the calculation is forced to float32:','line_number':2485,'multiline':False]['text':' Checks the case where the we have a simple byte-swap works, maily','line_number':2491,'multiline':False]['text':' tests that this is not rejected directly.','line_number':2492,'multiline':False]['text':' (interesting because we require descriptor identity in reducelikes).','line_number':2493,'multiline':False]['text':' Check reduceat:','line_number':2499,'multiline':False]['text':' And accumulate:','line_number':2504,'multiline':False]['text':' Check that reduction deals with non-contiguous output arrays','line_number':2511,'multiline':False]['text':' appropriately.','line_number':2512,'multiline':False]['text':'','line_number':2513,'multiline':False]['text':' gh-8036','line_number':2514,'multiline':False]['text':' The results should match, and y_base shouldn't get clobbered','line_number':2526,'multiline':False]['text':' Should raise an error mentioning "shape" or "size"','line_number':2533,'multiline':False]['text':' definitely wrong shape','line_number':2535,'multiline':False]['text':' If a cast is necessary on the output, we can be sure to use','line_number':2537,'multiline':False]['text':' the generic NpyIter (non-fast) path.','line_number':2538,'multiline':False]['text':' Test that we're not incorrectly broadcasting dimensions.','line_number':2552,'multiline':False]['text':' See gh-15144 (failed for np.add.reduce previously).','line_number':2553,'multiline':False]['text':' Test that the output shape cannot broadcast an input dimension','line_number':2567,'multiline':False]['text':' (it never can add dimensions, but it might expand an existing one)','line_number':2568,'multiline':False]['text':' no subclass, all fine','line_number':2584,'multiline':False]['text':' gh-9337','line_number':2590,'multiline':False]['text':' gh-7961','line_number':2594,'multiline':False]['text':' minimally check the exception text','line_number':2596,'multiline':False]['text':' ok, just not implemented','line_number':2604,'multiline':False]['text':' ok, just not implemented','line_number':2611,'multiline':False]['text':' ok, just not implemented','line_number':2618,'multiline':False]['text':' types is a list of strings like ii->i','line_number':2632,'multiline':False]['text':' types is a list of strings like ii->i','line_number':2657,'multiline':False]['text':' bool, object, datetime are too irregular for this simple test','line_number':2659,'multiline':False]['text':' for floating point results allow a small fuss in comparisons','line_number':2678,'multiline':False]['text':' since different algorithms (libm vs. intrinsics) can be used','line_number':2679,'multiline':False]['text':' for different input strides','line_number':2680,'multiline':False]['text':' issue gh-15127','line_number':2690,'multiline':False]['text':' test that calling certain ufuncs with a non-standard `nan` value does not','line_number':2691,'multiline':False]['text':' emit a warning','line_number':2692,'multiline':False]['text':' `b` holds a 64 bit signaling nan: the most significant bit of the','line_number':2693,'multiline':False]['text':' significand is zero.','line_number':2694,'multiline':False]['text':' Tests that casting errors are correctly reported and buffers are','line_number':2707,'multiline':False]['text':' cleared.','line_number':2708,'multiline':False]['text':' The following array can be added to itself as an object array, but','line_number':2709,'multiline':False]['text':' the result cannot be cast to an integer output:','line_number':2710,'multiline':False]['text':' relies on python cache (leak-check will still find it)','line_number':2711,'multiline':False]['text':' Output casting failure:','line_number':2719,'multiline':False]['text':' output is unchanged after the error, this shows that the iteration','line_number':2723,'multiline':False]['text':' was aborted (this is not necessarily defined behaviour)','line_number':2724,'multiline':False]['text':' Input casting failure:','line_number':2728,'multiline':False]['text':' output is unchanged after the error, this shows that the iteration','line_number':2732,'multiline':False]['text':' was aborted (this is not necessarily defined behaviour)','line_number':2733,'multiline':False]['text':' Force cast inputs, but the buffered cast of `arr` to intp fails:','line_number':2744,'multiline':False]['text':' Force cast inputs, but the buffered cast of `arr` to intp fails:','line_number':2756,'multiline':False]['text':' This tests the fast-path "invalid cast", see gh-19904.','line_number':2761,'multiline':False]['text':' the void dtype definitely cannot cast to double:','line_number':2764,'multiline':False]['text':' Test reporting of casting errors in reductions, we test various','line_number':2772,'multiline':False]['text':' offsets to where the casting error will occur, since these may occur','line_number':2773,'multiline':False]['text':' at different places during the reduction procedure. For example','line_number':2774,'multiline':False]['text':' the first item may be special.','line_number':2775,'multiline':False]['text':' relies on python cache (leak-check will still find it)','line_number':2776,'multiline':False]['text':' This is an unsafe cast, but we currently always allow that.','line_number':2784,'multiline':False]['text':' Note that the double loop is picked, but the cast fails.','line_number':2785,'multiline':False]['text':' `initial=None` disables the use of an identity here to test failures','line_number':2786,'multiline':False]['text':' while copying the first values path (not used when identity exists).','line_number':2787,'multiline':False]['text':' If an error occurred during casting, the operation is done at most until','line_number':2790,'multiline':False]['text':' the error occurs (the result of which would be `value * offset`) and -1','line_number':2791,'multiline':False]['text':' if the error happened immediately.','line_number':2792,'multiline':False]['text':' This does not define behaviour, the output is invalid and thus undefined','line_number':2793,'multiline':False]['text':' Test cleanup, including of the initial value (manually provided or not)','line_number':2798,'multiline':False]['text':' adding inf and -inf (or log(-inf) creates an invalid float and warns','line_number':2812,'multiline':False]['text':' In-place ops may end up on a different path (reduce path) see gh-21211','line_number':2845,'multiline':False]['text':' Test various length, in case SIMD paths or chunking play a role.','line_number':2865,'multiline':False]['text':' 150 extends beyond the pairwise blocksize; probably not important.','line_number':2866,'multiline':False]['text':' `sum([])` should probably be 0.0 and not -0.0 like `sum([-0.0])`','line_number':2873,'multiline':False]['text':' This checks that no read past the string buffer occurs in','line_number':2909,'multiline':False]['text':' string_fastsearch.h. The buffer class makes sure this is checked.','line_number':2910,'multiline':False]['text':' To see it in action, you can remove the checks in the buffer and','line_number':2911,'multiline':False]['text':' this test will produce an 'Invalid read' if run under valgrind.','line_number':2912,'multiline':False]['text':' Basic test for dtype resolution:','line_number':2920,'multiline':False]['text':' Signature uses the same logic to parse as ufunc (less strict)','line_number':2928,'multiline':False]['text':' the following is "same-kind" casting so works:','line_number':2929,'multiline':False]['text':' Check NEP 50 "weak" promotion also:','line_number':2934,'multiline':False]['text':' S0 is often converted by NumPy to S1, but not here:','line_number':2943,'multiline':False]['text':' Subarray dtypes are weird and may not work fully, we preserve them','line_number':2947,'multiline':False]['text':' leading to a TypeError (currently no equal loop for void/structured)','line_number':2948,'multiline':False]['text':' Check special addition resolution:','line_number':2956,'multiline':False]['text':' May be allowable at some point?','line_number':2963,'multiline':False]['text':' This is a basic test for the full strided loop access','line_number':2987,'multiline':False]['text':' can be used without casting','line_number':3005,'multiline':False]['text':' Fill in the rest of the information:','line_number':3007,'multiline':False]['text':' is a C-array with 10 here','line_number':3021,'multiline':False]['text':' We just directly called the negative inner-loop in-place:','line_number':3025,'multiline':False]['text':' cannot call it a second time:','line_number':3048,'multiline':False]