['text':' Convert float/complex array scalars to float (gh-3504),','line_number':129,'multiline':False]['text':' and make sure one can use variables that have','line_number':130,'multiline':False]['text':' an __array_interface__ (gh-6634).','line_number':131,'multiline':False]['text':' In-place multiplication y *= delta/div is faster, but prevents','line_number':144,'multiline':False]['text':' the multiplicant from overriding what class is produced, and thus','line_number':145,'multiline':False]['text':' prevents, e.g. use of Quantities, see gh-7142. Hence, we multiply','line_number':146,'multiline':False]['text':' in place only for standard scalar types.','line_number':147,'multiline':False]['text':' Special handling for denormal numbers, gh-5437','line_number':154,'multiline':False]['text':' sequences with 0 items or 1 item with endpoint=True (i.e. div <= 0)','line_number':166,'multiline':False]['text':' have an undefined step','line_number':167,'multiline':False]['text':' Multiply with delta to allow possible override of output class.','line_number':169,'multiline':False]['text':' complex to dtype('complex128'), for instance','line_number':424,'multiline':False]['text':' Promote both arguments to the same dtype in case, for instance, one is','line_number':427,'multiline':False]['text':' complex and another is negative and log would produce NaN otherwise.','line_number':428,'multiline':False]['text':' Copy since we may change things in-place further down.','line_number':429,'multiline':False]['text':' Avoid negligible real or imaginary parts in output by rotating to','line_number':434,'multiline':False]['text':' positive real, calculating, then undoing rotation','line_number':435,'multiline':False]['text':' Make sure the endpoints match the start and stop arguments. This is','line_number':454,'multiline':False]['text':' necessary because np.exp(np.log(x)) is not necessarily equal to x.','line_number':455,'multiline':False]