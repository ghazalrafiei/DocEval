['text':'
 * Main configuration header of the CPU dispatcher.
 *
 * This header is autogenerated by the Meson build script located at `meson_cpu/meson.build`.
 * It provides a set of utilities that are required for the runtime dispatching process.
 *
 * The most important macros in this header are:
 *   - @ref @P@CPU_DISPATCH_DECLARE: Used to declare the dispatched functions and variables.
 *   - @ref @P@CPU_DISPATCH_CURFX: Used to define the dispatched functions with target-specific suffixes.
 *   - @ref @P@CPU_DISPATCH_CALL: Used for runtime dispatching of the exported functions and variables.
 ','line_number':1,'multiline':True]['text':'/ This definition is required to provides comptablity with NumPy distutils','line_number':14,'multiline':False]['text':'*
 * @def @P@WITH_CPU_BASELINE
 * Enabled baseline features names as a single string where each is separated by a single space.
 * For example: "SSE SSE2 SSE3"
 * Required for logging purposes only.
 ','line_number':16,'multiline':True]['text':'*
 * @def @P@WITH_CPU_BASELINE_N
 * Number of enabled baseline features.
 ','line_number':23,'multiline':True]['text':'*
 * @def @P@WITH_CPU_DISPATCH
 * Dispatched features names as a single string where each is separated by a single space.
 ','line_number':28,'multiline':True]['text':'*
 * @def @P@WITH_CPU_DISPATCH_N
 * Number of enabled dispatched features.
 ','line_number':33,'multiline':True]['text':' Expand a macro, used by the following macros','line_number':38,'multiline':False]['text':'*
 * @def @P@WITH_CPU_BASELINE_CALL(EXEC_CB, ...)
 * Call each enabled baseline feature sorted by lowest interest
 * using preprocessor callback without testing whiher the
 * feature is supported by CPU or not.
 *
 * Required for logging purposes only, for example, generating
 * a Python list to hold the information of the enabled features.
 *
 * Unwrapped Version:
 * @code
 * #define @P@WITH_CPU_BASELINE_CALL(EXEC_CB, ...) \
 *     @P@_CPU_EXPAND(EXEC_CB(SSE, __VA_ARGS__))   \
 *     @P@_CPU_EXPAND(EXEC_CB(SSE2, __VA_ARGS__))  \
 *     @P@_CPU_EXPAND(EXEC_CB(SSE3, __VA_ARGS__))
 * @endcode
 *
 * @param EXEC_CB The preprocessor callback to be called for each enabled baseline feature.
 * @param ... Additional arguments to be passed to the preprocessor callback.
 ','line_number':46,'multiline':True]['text':'*
 * @def @P@WITH_CPU_DISPATCH_CALL(EXEC_CB, ...)
 * Similar to the above but for enabled dispatched features.
 *
 * @param EXEC_CB The preprocessor callback to be called for each enabled dispatched feature.
 * @param ... Additional arguments to be passed to the preprocessor callback.
 ','line_number':69,'multiline':True]['text':'
 * Defines the default behavior for the configurable macros derived from the configuration header
 * that is generated by the meson function `mod_features.multi_targets()`.
 *
 * Note: Providing fallback in case of optimization disabled is no longer needed for meson
 * since we always guarantee having configuration headers.
 *
 * However, it is still needed for compatibility with Numpy distutils.
 ','line_number':78,'multiline':True]['text':'*
 * @def @P@CPU_DISPATCH_CURFX(NAME)
 *
 * Returns `NAME` suffixed with "_" + "the current target" during compiling
 * the generated static libraries that are derived from the Meson function
 * `mod_features.multi_targets()`.
 *
 * It also returns `NAME` as-is without any suffix when it comes to the baseline features or
 * in case if the optimization is disabled.
 *
 * Note: `mod_features.multi_targets()` provides a unique target name within the compiler #definition
 * called `@P@MTARGETS_CURRENT` on each generated library based on the specified features
 * within its parameter 'dispatch:'.
 *
 * For example:
 *
 * @code
 * # from meson
 * mod_features.multi_targets(
 *  'arithmetic.dispatch.h', 'arithmetic.c',
 *   baseline: [SSE3], dispatch: [AVX512_SKX, AVX2],
 *   prefix: '@P@'
 * )
 * @code
 *
 * @code
 * void @P@CPU_DISPATCH_CURFX(add)(const int *src0, const int *src1, int *dst)
 * {
 * #ifdef @P@HAVE_AVX512F // one of the implied feature of AVX512_SKX
 *   // code
 * #elif defined(@P@HAVE_AVX2)
 *   // code
 * #elif defined(@P@HAVE_SSE3)
 *   // CODE
 * #else
 *   // Fallback code in case of no features enabled
 * #endif
 * }
 * @endif
 *
 * // Unwrapped version :
 * void add_AVX512_SKX(const int *src0, const int *src1, int *dst)
 * {...}
 * void add_AVX2(const int *src0, const int *src1, int *dst)
 * {...}
 * // baseline
 * void add(const int *src0, const int *src1, int *dst)
 * {...}
 * @endcode
 *
 * @param NAME The base name of the dispatched function or variable.
 ','line_number':96,'multiline':True]['text':' '@P@MTARGETS_CURRENT': only defined by the dispatch targets','line_number':149,'multiline':False]['text':' within the meson function `mod_features.multi_targets()`','line_number':150,'multiline':False]['text':'*
 * @def @P@CPU_DISPATCH_DECLARE(...)
 *
 * Provides forward declarations for the exported variables and functions
 * based on the enabled baseline and dispatched features.
 *
 * This macro requires include the config file that been generated
 * by meson function `mod_features.multi_targets()` to determine the enabled
 * baseline and dispatched features.
 *
 * For example:
 *
 * @code
 * # from meson
 * mod_features.multi_targets(
 *  'arithmetic.dispatch.h', 'arithmetic.c',
 *   baseline: [SSE3], dispatch: [AVX512_SKX, AVX2],
 *   prefix: '@P@'
 * )
 * @code
 *
 * @code
 * // from C
 * #include "arithmetic.dispatch.h"
 * @P@CPU_DISPATCH_DECLARE(void add, (const int *src0, const int *src1, int *dst))
 *
 * // Unwrapped version:
 * void add_AVX512_SKX(const int *src0, const int *src1, int *dst);
 * void add_AVX2(const int *src0, const int *src1, int *dst);
 * void add(const int *src0, const int *src1, int *dst); // baseline
 * @endcode
 *
 * @param ... The function or variable prototype to be declared,
 *            with the target-specific suffix added automatically.
 ','line_number':155,'multiline':True]['text':' Preprocessor callbacks','line_number':194,'multiline':False]['text':' Dummy CPU runtime checking','line_number':199,'multiline':False]['text':'*
 * @def @P@CPU_DISPATCH_DECLARE_XB(LEFT, ...)
 *
 * Same as `@P@CPU_DISPATCH_DECLARE` but exclude the baseline declaration even
 * if it was enabled within `mod_features.multi_targets()`.
 ','line_number':202,'multiline':True]['text':'*
 * @def @P@CPU_DISPATCH_CALL(...)
 *
 * Helper macro used for runtime dispatching of the exported functions and variables
 * within the meson `mod_features.multi_targets()` function.
 *
 * This macro dispatches only one symbol based on the order of the specified features within the meson function
 * `mod_features.multi_targets()`. For example, if `mod_features.multi_targets()` is called with
 * `dispatch: [features_highest_1, features_highest_2]`, the macro will test each enabled feature against
 * the CPU at runtime. Once it fails, it will move to the next order until falling back to the baseline.
 *
 * Similar to `@P@CPU_DISPATCH_DECLARE`, this macro requires including the config file that has been generated
 * by the meson function `mod_features.multi_targets()` to determine the enabled baseline and dispatched features.
 *
 * Example usage:
 *
 * @code
 * # from meson
 * mod_features.multi_targets(
 *   'arithmetic.dispatch.h', 'arithmetic.c',
 *   baseline: [SSE3], dispatch: [AVX512_SKX, AVX2],
 *   prefix: '@P@'
 * )
 * @endcode
 *
 * @code
 * // from C
 * #include "arithmetic.dispatch.h"
 *
 * // Example 1:
 * @P@CPU_DISPATCH_CALL(add, (src0, src1, dst));
 *
 * // Unwrapped version:
 * @P@CPU_HAVE(AVX512_SKX) ? add_AVX512_SKX(src0, src1, dst) :
 *     (@P@CPU_HAVE(AVX2) ? add_AVX2(src0, src1, dst) :
 *         add(src0, src1, dst); // baseline
 *
 * // Example 2:
 * typedef void (*func_type)(const int*, const int*, int*);
 * func_type func = @P@CPU_DISPATCH_CALL(add);
 *
 * // Unwrapped version:
 * func_type func2 = @P@CPU_HAVE(AVX512_SKX) ? add_AVX512_SKX :
 *                     (@P@CPU_HAVE(AVX2) ? add_AVX2 :
 *                         add; // baseline
 *
 * // Example 3:
 * func_type func3;
 * @P@CPU_DISPATCH_CALL(func3 = add);
 *
 * // Unwrapped version:
 * func_type func2 = @P@CPU_HAVE(AVX512_SKX) ? func3 = add_AVX512_SKX :
 *                     (@P@CPU_HAVE(AVX2) ? func3 = add_AVX2 :
 *                         func3 = add; // baseline
 *
 * @endcode
 *
 * @param ... The function or variable prototype to be called or assigned,
 *            with the target-specific suffix added automatically.
 ','line_number':211,'multiline':True]['text':' Preprocessor callbacks','line_number':274,'multiline':False]['text':'*
 * @def @P@CPU_DISPATCH_CALL_XB(LEFT, ...)
 *
 * Same as `@P@CPU_DISPATCH_CALL` but exclude the baseline call even
 * if it was provided within meson `mod_features.multi_targets()`.
 *
 * Note: This macro returns void
 ','line_number':280,'multiline':True]['text':' discarded expression value ','line_number':292,'multiline':True]['text':'*
 * @def @P@CPU_DISPATCH_INFO(...)
 *
 * Returns an array of two strings containing the enabled target names
 * in each multi-target source.
 *
 * The first item represents the currently dispatched target,
 * while the second item contains the available targets that
 * can potentially be dispatched based on CPU capabilities.
 *
 * @code
 * #include "arithmetic.dispatch.h" // generated config file
 * const char *enabled_targets[] = @P@CPU_DISPATCH_INFO();
 *
 * printf("Current dispatched target: %s\n", enabled_targets[0]);
 * printf("Available targets: %s\n", enabled_targets[1]);
 * @endcode
 ','line_number':294,'multiline':True]['text':' Preprocessor callbacks','line_number':325,'multiline':False]['text':'*
 * Macro @P@CPU_DISPATCH_CALL_ALL(...)
 *
 * Same as `@P@CPU_DISPATCH_CALL` but dispatching all the required optimizations for
 * the exported functions and variables instead of highest interested one.
 * Returns void.
 ','line_number':330,'multiline':True]['text':' Preprocessor callbacks','line_number':340,'multiline':False]['text':' Brings the headers files of enabled CPU features','line_number':346,'multiline':False]['text':' @P@_CPU_DISPATCHER_CONF_H_','line_number':388,'multiline':False]