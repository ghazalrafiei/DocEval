['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'
 * Tokenize command line containing indirect command line arguments.
 * An '@' at the beginning of a command line argument indicates that
 * the rest of the argument is the name of the file which should be
 * read and tokenized as Bash does it: tokens are separated by the
 * whitespace, quotes and double quotes can be used to have whitespace
 * and the other quote inside the token, and backslash followed by
 * newline is treated as empty string.
 ','line_number':30,'multiline':True]['text':' This class is used as follows:
   *
   *  int main(int argc, char* argv[]) {
   *    ArgTokenStream tokens(argc-1, argv+1);
   *    while (!tokens.AtEnd()) {
   *       if (tokens.MatchAndSet("--opt1", ...) ||
   *           tokens.MatchAndSet("--opt2", ...) ||
   *           ...) {
   *         continue;
   *       }
   *       // Process non-option argument or report an error.
   *       // ArgTokenStream::token() returns the current token.
   *    }
   *  }
   ','line_number':41,'multiline':True]['text':' Internal class to handle indirect command files.','line_number':58,'multiline':False]['text':' Assign next token to TOKEN, return true on success, false on EOF.','line_number':83,'multiline':False]['text':' Append the quoted string to the TOKEN. The quote character (which can be','line_number':133,'multiline':False]['text':' single or double quote) is in the current character. Everything up to the','line_number':134,'multiline':False]['text':' matching quote character is appended.','line_number':135,'multiline':False]['text':' In the "-quoted token, \" stands for ", and \x','line_number':141,'multiline':False]['text':' is copied literally for any other x.','line_number':142,'multiline':False]['text':' Get the next character from the input stream. Skip backslash followed','line_number':163,'multiline':False]['text':' by the newline.','line_number':164,'multiline':False]['text':' Eat "\\\n" sequence.','line_number':171,'multiline':False]['text':' Constructor. Automatically reads the first token.','line_number':191,'multiline':False]['text':' Process --OPTION','line_number':197,'multiline':False]['text':' If the current token is --OPTION, set given FLAG to true, proceed to next','line_number':198,'multiline':False]['text':' token and return true','line_number':199,'multiline':False]['text':' Process --OPTION OPTARG','line_number':209,'multiline':False]['text':' If the current token is --OPTION, set OPTARG to the next token, proceed to','line_number':210,'multiline':False]['text':' the next token after it and return true.','line_number':211,'multiline':False]['text':' Process --OPTION OPTARG1 OPTARG2 ...','line_number':225,'multiline':False]['text':' If a current token is --OPTION, push_back all subsequent tokens up to the','line_number':226,'multiline':False]['text':' next option to the OPTARGS array, proceed to the next option and return','line_number':227,'multiline':False]['text':' true.','line_number':228,'multiline':False]['text':' Process --OPTION OPTARG1,OPTSUFF1 OPTARG2,OPTSUFF2 ...','line_number':241,'multiline':False]['text':' If a current token is --OPTION, push_back all subsequent tokens up to the','line_number':242,'multiline':False]['text':' next option to the OPTARGS array, splitting the OPTARG,OPTSUFF by a comma,','line_number':243,'multiline':False]['text':' proceed to the next option and return true.','line_number':244,'multiline':False]['text':' Current token.','line_number':266,'multiline':False]['text':' Read the next token.','line_number':269,'multiline':False]['text':' True if there are no more tokens.','line_number':290,'multiline':False]['text':'  THIRD_PARTY_BAZEL_SRC_TOOLS_SINGLEJAR_TOKEN_STREAM_H_','line_number':307,'multiline':False]